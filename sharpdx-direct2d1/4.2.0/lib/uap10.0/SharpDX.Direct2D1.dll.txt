public enum SharpDX.Direct2D1.AffineTransform2DInterpolationMode : Enum {
    public int value__;
    public static AffineTransform2DInterpolationMode NearestNeighbor;
    public static AffineTransform2DInterpolationMode Linear;
    public static AffineTransform2DInterpolationMode Cubic;
    public static AffineTransform2DInterpolationMode MultiSampleLinear;
    public static AffineTransform2DInterpolationMode Anisotropic;
    public static AffineTransform2DInterpolationMode HighQualityCubic;
}
public enum SharpDX.Direct2D1.AffineTransform2DProperties : Enum {
    public int value__;
    public static AffineTransform2DProperties InterpolationMode;
    public static AffineTransform2DProperties BorderMode;
    public static AffineTransform2DProperties TransformMatrix;
    public static AffineTransform2DProperties Sharpness;
}
public enum SharpDX.Direct2D1.AlphaMode : Enum {
    public int value__;
    public static AlphaMode Unknown;
    public static AlphaMode Premultiplied;
    public static AlphaMode Straight;
    public static AlphaMode Ignore;
}
[GuidAttribute("0359dc30-95e6-4568-9055-27720d130e93")]
public class SharpDX.Direct2D1.AnalysisTransform : ComObject {
    public AnalysisTransform(IntPtr nativePtr);
    public void ProcessAnalysisResults(DataStream analysisData);
    public void ProcessAnalysisResults(T analysisData);
    public void ProcessAnalysisResults(T[] analysisData);
    public static AnalysisTransform op_Explicit(IntPtr nativePtr);
    internal void ProcessAnalysisResults(IntPtr analysisData, int analysisDataCount);
}
public enum SharpDX.Direct2D1.AntialiasMode : Enum {
    public int value__;
    public static AntialiasMode PerPrimitive;
    public static AntialiasMode Aliased;
}
public class SharpDX.Direct2D1.ArcSegment : ValueType {
    public RawVector2 Point;
    public Size2F Size;
    public float RotationAngle;
    public SweepDirection SweepDirection;
    public ArcSize ArcSize;
}
public enum SharpDX.Direct2D1.ArcSize : Enum {
    public int value__;
    public static ArcSize Small;
    public static ArcSize Large;
}
public enum SharpDX.Direct2D1.ArithmeticCompositeProperties : Enum {
    public int value__;
    public static ArithmeticCompositeProperties Coefficients;
    public static ArithmeticCompositeProperties ClampOutput;
}
[CompilerGeneratedAttribute]
internal class SharpDX.Direct2D1.AssemblyDoc : object {
}
public enum SharpDX.Direct2D1.AtlasProperties : Enum {
    public int value__;
    public static AtlasProperties InputRectangle;
    public static AtlasProperties InputPaddingRectangle;
}
public class SharpDX.Direct2D1.BezierSegment : ValueType {
    public RawVector2 Point1;
    public RawVector2 Point2;
    public RawVector2 Point3;
}
[GuidAttribute("a2296057-ea42-4099-983b-539fb6505426")]
public class SharpDX.Direct2D1.Bitmap : Image {
    public Size2F DotsPerInch { get; }
    public Size2F Size { get; }
    public Size2 PixelSize { get; }
    public PixelFormat PixelFormat { get; }
    public Bitmap(RenderTarget renderTarget, Size2 size);
    public Bitmap(RenderTarget renderTarget, Size2 size, BitmapProperties bitmapProperties);
    public Bitmap(RenderTarget renderTarget, Size2 size, DataPointer dataPointer, int pitch);
    public Bitmap(RenderTarget renderTarget, Size2 size, DataPointer dataPointer, int pitch, BitmapProperties bitmapProperties);
    public Bitmap(RenderTarget renderTarget, Bitmap bitmap);
    public Bitmap(RenderTarget renderTarget, Bitmap bitmap, Nullable`1<BitmapProperties> bitmapProperties);
    public Bitmap(RenderTarget renderTarget, Surface surface);
    public Bitmap(RenderTarget renderTarget, Surface surface, Nullable`1<BitmapProperties> bitmapProperties);
    public Bitmap(RenderTarget renderTarget, BitmapLock bitmapLock);
    public Bitmap(RenderTarget renderTarget, BitmapLock bitmapLock, Nullable`1<BitmapProperties> bitmapProperties);
    public Bitmap(IntPtr nativePtr);
    public static Bitmap New(RenderTarget renderTarget, Size2 size, T[] pixelDatas, BitmapProperties bitmapProperties);
    public static Bitmap FromWicBitmap(RenderTarget renderTarget, BitmapSource wicBitmapSource);
    public static Bitmap FromWicBitmap(RenderTarget renderTarget, BitmapSource wicBitmap, BitmapProperties bitmapProperties);
    public void CopyFromBitmap(Bitmap sourceBitmap);
    public void CopyFromBitmap(Bitmap sourceBitmap, RawPoint destinationPoint);
    public void CopyFromBitmap(Bitmap sourceBitmap, RawPoint destinationPoint, RawRectangle sourceArea);
    public void CopyFromMemory(IntPtr pointer, int pitch);
    public void CopyFromMemory(Byte[] memory, int pitch);
    public void CopyFromMemory(T[] memory, int pitch);
    public void CopyFromMemory(IntPtr pointer, int pitch, RawRectangle destinationArea);
    public void CopyFromMemory(Byte[] memory, int pitch, RawRectangle destinationArea);
    public void CopyFromMemory(T[] memory, int pitch, RawRectangle destinationArea);
    public void CopyFromRenderTarget(RenderTarget renderTarget);
    public void CopyFromRenderTarget(RenderTarget renderTarget, RawPoint destinationPoint);
    public void CopyFromRenderTarget(RenderTarget renderTarget, RawPoint destinationPoint, RawRectangle sourceArea);
    public void CopyFromStream(Stream stream, int pitch, int length);
    public void CopyFromStream(Stream stream, int pitch, int length, RawRectangle destinationArea);
    public Size2F get_DotsPerInch();
    public static Bitmap op_Explicit(IntPtr nativePtr);
    public Size2F get_Size();
    public Size2 get_PixelSize();
    public PixelFormat get_PixelFormat();
    internal Size2F GetSize();
    internal Size2 GetPixelSize();
    internal PixelFormat GetPixelFormat();
    internal void GetDpi(Single& dpiX, Single& dpiY);
    internal void CopyFromBitmap(Nullable`1<RawPoint> destPoint, Bitmap bitmap, Nullable`1<RawRectangle> srcRect);
    internal void CopyFromRenderTarget(Nullable`1<RawPoint> destPoint, RenderTarget renderTarget, Nullable`1<RawRectangle> srcRect);
    internal void CopyFromMemory(Nullable`1<RawRectangle> dstRect, IntPtr srcData, int pitch);
}
[GuidAttribute("a898a84c-3873-4588-b08b-ebbf978df041")]
public class SharpDX.Direct2D1.Bitmap1 : Bitmap {
    public ColorContext ColorContext { get; }
    public BitmapOptions Options { get; }
    public Surface Surface { get; }
    public Bitmap1(DeviceContext deviceContext, Size2 size);
    public Bitmap1(DeviceContext deviceContext, Size2 size, BitmapProperties1 bitmapProperties);
    public Bitmap1(DeviceContext deviceContext, Size2 size, DataStream dataStream, int pitch);
    public Bitmap1(DeviceContext deviceContext, Size2 size, DataStream dataStream, int pitch, BitmapProperties1 bitmapProperties);
    public Bitmap1(DeviceContext deviceContext, Surface surface);
    public Bitmap1(DeviceContext deviceContext, Surface surface, BitmapProperties1 bitmapProperties);
    public Bitmap1(IntPtr nativePtr);
    public static Bitmap1 FromWicBitmap(DeviceContext deviceContext, BitmapSource wicBitmapSource);
    public static Bitmap1 FromWicBitmap(DeviceContext deviceContext, BitmapSource wicBitmap, BitmapProperties1 bitmapProperties);
    public DataRectangle Map(MapOptions options);
    public static Bitmap1 op_Explicit(IntPtr nativePtr);
    public ColorContext get_ColorContext();
    public BitmapOptions get_Options();
    public Surface get_Surface();
    internal void GetColorContext(ColorContext& colorContext);
    internal BitmapOptions GetOptions();
    internal void GetSurface(Surface& dxgiSurface);
    internal void Map(MapOptions options, MappedRectangle& mappedRect);
    public void Unmap();
}
[GuidAttribute("2cd906aa-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.BitmapBrush : Brush {
    public ExtendMode ExtendModeX { get; public set; }
    public ExtendMode ExtendModeY { get; public set; }
    public BitmapInterpolationMode InterpolationMode { get; public set; }
    public Bitmap Bitmap { get; public set; }
    public BitmapBrush(RenderTarget renderTarget, Bitmap bitmap);
    public BitmapBrush(RenderTarget renderTarget, Bitmap bitmap, BitmapBrushProperties bitmapBrushProperties);
    public BitmapBrush(RenderTarget renderTarget, Bitmap bitmap, BrushProperties brushProperties);
    public BitmapBrush(RenderTarget renderTarget, Bitmap bitmap, Nullable`1<BitmapBrushProperties> bitmapBrushProperties, Nullable`1<BrushProperties> brushProperties);
    public BitmapBrush(IntPtr nativePtr);
    public static BitmapBrush op_Explicit(IntPtr nativePtr);
    public ExtendMode get_ExtendModeX();
    public void set_ExtendModeX(ExtendMode value);
    public ExtendMode get_ExtendModeY();
    public void set_ExtendModeY(ExtendMode value);
    public BitmapInterpolationMode get_InterpolationMode();
    public void set_InterpolationMode(BitmapInterpolationMode value);
    public Bitmap get_Bitmap();
    public void set_Bitmap(Bitmap value);
    internal void SetExtendModeX(ExtendMode extendModeX);
    internal void SetExtendModeY(ExtendMode extendModeY);
    internal void SetInterpolationMode(BitmapInterpolationMode interpolationMode);
    internal void SetBitmap(Bitmap bitmap);
    internal ExtendMode GetExtendModeX();
    internal ExtendMode GetExtendModeY();
    internal BitmapInterpolationMode GetInterpolationMode();
    internal void GetBitmap(Bitmap& bitmap);
}
[GuidAttribute("41343a53-e41a-49a2-91cd-21793bbb62e5")]
public class SharpDX.Direct2D1.BitmapBrush1 : BitmapBrush {
    public InterpolationMode InterpolationMode1 { get; public set; }
    public BitmapBrush1(DeviceContext deviceContext, Bitmap1 bitmap);
    public BitmapBrush1(DeviceContext deviceContext, Bitmap1 bitmap, BitmapBrushProperties1 bitmapBrushProperties);
    public BitmapBrush1(DeviceContext deviceContext, Bitmap1 bitmap, BrushProperties brushProperties);
    public BitmapBrush1(DeviceContext deviceContext, Bitmap1 bitmap, Nullable`1<BitmapBrushProperties1> bitmapBrushProperties, Nullable`1<BrushProperties> brushProperties);
    public BitmapBrush1(IntPtr nativePtr);
    public static BitmapBrush1 op_Explicit(IntPtr nativePtr);
    public InterpolationMode get_InterpolationMode1();
    public void set_InterpolationMode1(InterpolationMode value);
    internal void SetInterpolationMode1(InterpolationMode interpolationMode);
    internal InterpolationMode GetInterpolationMode1();
}
public class SharpDX.Direct2D1.BitmapBrushProperties : ValueType {
    public ExtendMode ExtendModeX;
    public ExtendMode ExtendModeY;
    public BitmapInterpolationMode InterpolationMode;
}
public class SharpDX.Direct2D1.BitmapBrushProperties1 : ValueType {
    public ExtendMode ExtendModeX;
    public ExtendMode ExtendModeY;
    public InterpolationMode InterpolationMode;
}
public enum SharpDX.Direct2D1.BitmapInterpolationMode : Enum {
    public int value__;
    public static BitmapInterpolationMode NearestNeighbor;
    public static BitmapInterpolationMode Linear;
}
[FlagsAttribute]
public enum SharpDX.Direct2D1.BitmapOptions : Enum {
    public int value__;
    public static BitmapOptions None;
    public static BitmapOptions Target;
    public static BitmapOptions CannotDraw;
    public static BitmapOptions CpuRead;
    public static BitmapOptions GdiCompatible;
}
public class SharpDX.Direct2D1.BitmapProperties : ValueType {
    public PixelFormat PixelFormat;
    public float DpiX;
    public float DpiY;
    public BitmapProperties(PixelFormat pixelFormat);
    public BitmapProperties(PixelFormat pixelFormat, float dpiX, float dpiY);
}
public class SharpDX.Direct2D1.BitmapProperties1 : object {
    private ColorContext colorContext;
    public PixelFormat PixelFormat;
    public float DpiX;
    public float DpiY;
    public BitmapOptions BitmapOptions;
    public ColorContext ColorContext;
    public BitmapProperties1(PixelFormat pixelFormat);
    public BitmapProperties1(PixelFormat pixelFormat, float dpiX, float dpiY);
    public BitmapProperties1(PixelFormat pixelFormat, float dpiX, float dpiY, BitmapOptions bitmapOptions);
    public BitmapProperties1(PixelFormat pixelFormat, float dpiX, float dpiY, BitmapOptions bitmapOptions, ColorContext colorContext);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[GuidAttribute("2cd90695-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.BitmapRenderTarget : RenderTarget {
    public Bitmap Bitmap { get; }
    public BitmapRenderTarget(RenderTarget renderTarget, CompatibleRenderTargetOptions options);
    public BitmapRenderTarget(RenderTarget renderTarget, CompatibleRenderTargetOptions options, Size2F desiredSize);
    public BitmapRenderTarget(RenderTarget renderTarget, CompatibleRenderTargetOptions options, Nullable`1<PixelFormat> desiredFormat);
    public BitmapRenderTarget(RenderTarget renderTarget, CompatibleRenderTargetOptions options, Nullable`1<Size2F> desiredSize, Nullable`1<Size2> desiredPixelSize, Nullable`1<PixelFormat> desiredFormat);
    public BitmapRenderTarget(IntPtr nativePtr);
    public static BitmapRenderTarget op_Explicit(IntPtr nativePtr);
    public Bitmap get_Bitmap();
    internal void GetBitmap(Bitmap& bitmap);
}
public enum SharpDX.Direct2D1.BitmapSourceAlphaMode : Enum {
    public int value__;
    public static BitmapSourceAlphaMode Premultiplied;
    public static BitmapSourceAlphaMode Straight;
}
public enum SharpDX.Direct2D1.BitmapSourceInterpolationMode : Enum {
    public int value__;
    public static BitmapSourceInterpolationMode NearestNeighbor;
    public static BitmapSourceInterpolationMode Linear;
    public static BitmapSourceInterpolationMode Cubic;
    public static BitmapSourceInterpolationMode Fant;
    public static BitmapSourceInterpolationMode MipmapLinear;
}
public enum SharpDX.Direct2D1.BitmapSourceOrientation : Enum {
    public int value__;
    public static BitmapSourceOrientation Default;
    public static BitmapSourceOrientation FlipHorizontal;
    public static BitmapSourceOrientation RotateClockwise180;
    public static BitmapSourceOrientation RotateClockwise180FlipHorizontal;
    public static BitmapSourceOrientation RotateClockwise270FlipHorizontal;
    public static BitmapSourceOrientation RotateClockwise90;
    public static BitmapSourceOrientation RotateClockwise90FlipHorizontal;
    public static BitmapSourceOrientation RotateClockwise270;
}
public enum SharpDX.Direct2D1.BitmapSourceProperties : Enum {
    public int value__;
    public static BitmapSourceProperties WicBitmapSource;
    public static BitmapSourceProperties Scale;
    public static BitmapSourceProperties InterpolationMode;
    public static BitmapSourceProperties EnableDpiCorrection;
    public static BitmapSourceProperties AlphaMode;
    public static BitmapSourceProperties Orientation;
}
public enum SharpDX.Direct2D1.Blend : Enum {
    public int value__;
    public static Blend Zero;
    public static Blend One;
    public static Blend SourceColor;
    public static Blend InverseSourceColor;
    public static Blend SourceAlpha;
    public static Blend InverseSourceAlpha;
    public static Blend DestinationAlpha;
    public static Blend InverseDestinationAlpha;
    public static Blend DestinationColor;
    public static Blend InverseDestinationColor;
    public static Blend SourceAlphaSaturate;
    public static Blend BlendFactor;
    public static Blend InverseBlendFactor;
}
public class SharpDX.Direct2D1.BlendDescription : ValueType {
    public Blend SourceBlend;
    public Blend DestinationBlend;
    public BlendOperation BlendOperation;
    public Blend SourceBlendAlpha;
    public Blend DestinationBlendAlpha;
    public BlendOperation BlendOperationAlpha;
    public RawColor4 BlendFactor;
}
public enum SharpDX.Direct2D1.BlendMode : Enum {
    public int value__;
    public static BlendMode Multiply;
    public static BlendMode Screen;
    public static BlendMode Darken;
    public static BlendMode Lighten;
    public static BlendMode Dissolve;
    public static BlendMode ColorBurn;
    public static BlendMode LinearBurn;
    public static BlendMode DarkerColor;
    public static BlendMode LighterColor;
    public static BlendMode ColorDodge;
    public static BlendMode LinearDodge;
    public static BlendMode Overlay;
    public static BlendMode SoftLight;
    public static BlendMode HardLight;
    public static BlendMode VividLight;
    public static BlendMode LinearLight;
    public static BlendMode PinLight;
    public static BlendMode HardMix;
    public static BlendMode Difference;
    public static BlendMode Exclusion;
    public static BlendMode Hue;
    public static BlendMode Saturation;
    public static BlendMode Color;
    public static BlendMode Luminosity;
    public static BlendMode Subtract;
    public static BlendMode Division;
}
public enum SharpDX.Direct2D1.BlendOperation : Enum {
    public int value__;
    public static BlendOperation Add;
    public static BlendOperation Subtract;
    public static BlendOperation ReverseSubtract;
    public static BlendOperation Minimum;
    public static BlendOperation Maximum;
}
public enum SharpDX.Direct2D1.BlendProperties : Enum {
    public int value__;
    public static BlendProperties Mode;
}
[GuidAttribute("63ac0b32-ba44-450f-8806-7f4ca1ff2f1b")]
public class SharpDX.Direct2D1.BlendTransform : ConcreteTransform {
    public BlendDescription Description { get; public set; }
    public BlendTransform(EffectContext context, int numInputs, BlendDescription blendDescription);
    public BlendTransform(EffectContext context, int numInputs, BlendDescription& blendDescription);
    public BlendTransform(IntPtr nativePtr);
    public static BlendTransform op_Explicit(IntPtr nativePtr);
    public BlendDescription get_Description();
    public void set_Description(BlendDescription value);
    internal void SetDescription(BlendDescription& description);
    internal void GetDescription(BlendDescription& description);
}
public enum SharpDX.Direct2D1.BorderEdgeMode : Enum {
    public int value__;
    public static BorderEdgeMode Clamp;
    public static BorderEdgeMode Wrap;
    public static BorderEdgeMode Mirror;
}
public enum SharpDX.Direct2D1.BorderMode : Enum {
    public int value__;
    public static BorderMode Soft;
    public static BorderMode Hard;
}
public enum SharpDX.Direct2D1.BorderProperties : Enum {
    public int value__;
    public static BorderProperties EdgeModeX;
    public static BorderProperties EdgeModeY;
}
[GuidAttribute("4998735c-3a19-473c-9781-656847e3a347")]
public class SharpDX.Direct2D1.BorderTransform : ConcreteTransform {
    public ExtendMode ExtendModeX { get; public set; }
    public ExtendMode ExtendModeY { get; public set; }
    public BorderTransform(EffectContext context, ExtendMode extendModeX, ExtendMode extendModeY);
    public BorderTransform(IntPtr nativePtr);
    public static BorderTransform op_Explicit(IntPtr nativePtr);
    public ExtendMode get_ExtendModeX();
    public void set_ExtendModeX(ExtendMode value);
    public ExtendMode get_ExtendModeY();
    public void set_ExtendModeY(ExtendMode value);
    internal void SetExtendModeX(ExtendMode extendMode);
    internal void SetExtendModeY(ExtendMode extendMode);
    internal ExtendMode GetExtendModeX();
    internal ExtendMode GetExtendModeY();
}
[GuidAttribute("90f732e2-5092-4606-a819-8651970baccd")]
public class SharpDX.Direct2D1.BoundsAdjustmentTransform : TransformNodeNative {
    public RawRectangle OutputBounds { get; public set; }
    public BoundsAdjustmentTransform(EffectContext context, RawRectangle outputRectangle);
    public BoundsAdjustmentTransform(IntPtr nativePtr);
    public static BoundsAdjustmentTransform op_Explicit(IntPtr nativePtr);
    public RawRectangle get_OutputBounds();
    public void set_OutputBounds(RawRectangle value);
    internal void SetOutputBounds(RawRectangle outputBounds);
    internal void GetOutputBounds(RawRectangle& outputBounds);
}
public enum SharpDX.Direct2D1.BrightnessProperties : Enum {
    public int value__;
    public static BrightnessProperties WhitePoint;
    public static BrightnessProperties BlackPoint;
}
[GuidAttribute("2cd906a8-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.Brush : Resource {
    public float Opacity { get; public set; }
    public RawMatrix3x2 Transform { get; public set; }
    public Brush(IntPtr nativePtr);
    public static Brush op_Explicit(IntPtr nativePtr);
    public float get_Opacity();
    public void set_Opacity(float value);
    public RawMatrix3x2 get_Transform();
    public void set_Transform(RawMatrix3x2 value);
    internal void SetOpacity(float opacity);
    internal void SetTransform(RawMatrix3x2& transform);
    internal float GetOpacity();
    internal void GetTransform(RawMatrix3x2& transform);
}
public class SharpDX.Direct2D1.BrushProperties : ValueType {
    public float Opacity;
    public RawMatrix3x2 Transform;
}
public enum SharpDX.Direct2D1.BufferPrecision : Enum {
    public int value__;
    public static BufferPrecision Unknown;
    public static BufferPrecision PerChannel8UNorm;
    public static BufferPrecision PerChannel8UNormSRgb;
    public static BufferPrecision PerChannel16UNorm;
    public static BufferPrecision PerChannel16Float;
    public static BufferPrecision PerChannel32Float;
}
public enum SharpDX.Direct2D1.CapStyle : Enum {
    public int value__;
    public static CapStyle Flat;
    public static CapStyle Square;
    public static CapStyle Round;
    public static CapStyle Triangle;
}
public enum SharpDX.Direct2D1.ChangeType : Enum {
    public int value__;
    public static ChangeType None;
    public static ChangeType Properties;
    public static ChangeType Context;
    public static ChangeType Graph;
}
public enum SharpDX.Direct2D1.ChannelDepth : Enum {
    public int value__;
    public static ChannelDepth Default;
    public static ChannelDepth One;
    public static ChannelDepth Four;
}
public enum SharpDX.Direct2D1.ChannelSelector : Enum {
    public int value__;
    public static ChannelSelector R;
    public static ChannelSelector G;
    public static ChannelSelector B;
    public static ChannelSelector A;
}
public enum SharpDX.Direct2D1.ChromakeyProperty : Enum {
    public int value__;
    public static ChromakeyProperty Color;
    public static ChromakeyProperty Tolerance;
    public static ChromakeyProperty InvertAlpha;
    public static ChromakeyProperty Feather;
}
public enum SharpDX.Direct2D1.ColorBitmapGlyphSnapOption : Enum {
    public int value__;
    public static ColorBitmapGlyphSnapOption Default;
    public static ColorBitmapGlyphSnapOption Disable;
}
[GuidAttribute("1c4820bb-5771-4518-a581-2fe4dd0ec657")]
public class SharpDX.Direct2D1.ColorContext : Resource {
    public Byte[] ProfileData { get; }
    public ColorSpace ColorSpace { get; }
    internal int ProfileSize { get; }
    public ColorContext(EffectContext context, ColorSpace space, Byte[] profileRef);
    public ColorContext(EffectContext context, string filename);
    public ColorContext(EffectContext context, ColorContext wicColorContext);
    public ColorContext(IntPtr nativePtr);
    public Byte[] get_ProfileData();
    public static ColorContext op_Explicit(IntPtr nativePtr);
    public ColorSpace get_ColorSpace();
    internal int get_ProfileSize();
    internal ColorSpace GetColorSpace();
    internal int GetProfileSize();
    internal void GetProfile(Byte[] rofileRef, int profileSize);
}
[GuidAttribute("1ab42875-c57f-4be9-bd85-9cd78d6f55ee")]
public class SharpDX.Direct2D1.ColorContext1 : ColorContext {
    public ColorContextType ColorContextType { get; }
    public ColorSpaceType DXGIColorSpace { get; }
    public SimpleColorProfile SimpleColorProfile { get; }
    public ColorContext1(DeviceContext5 context, ColorSpaceType colorSpace);
    public ColorContext1(DeviceContext5 context, SimpleColorProfile& simpleProfile);
    public ColorContext1(EffectContext2 context, ColorSpaceType colorSpace);
    public ColorContext1(EffectContext2 context, SimpleColorProfile& simpleProfile);
    public ColorContext1(IntPtr nativePtr);
    public static ColorContext1 op_Explicit(IntPtr nativePtr);
    public ColorContextType get_ColorContextType();
    public ColorSpaceType get_DXGIColorSpace();
    public SimpleColorProfile get_SimpleColorProfile();
    internal ColorContextType GetColorContextType();
    internal ColorSpaceType GetDXGIColorSpace();
    internal void GetSimpleColorProfile(SimpleColorProfile& simpleProfile);
}
public enum SharpDX.Direct2D1.ColorContextType : Enum {
    public int value__;
    public static ColorContextType Icc;
    public static ColorContextType Simple;
    public static ColorContextType Dxgi;
}
public enum SharpDX.Direct2D1.ColorInterpolationMode : Enum {
    public int value__;
    public static ColorInterpolationMode Straight;
    public static ColorInterpolationMode Premultiplied;
}
public enum SharpDX.Direct2D1.ColorManagementAlphaMode : Enum {
    public int value__;
    public static ColorManagementAlphaMode Premultiplied;
    public static ColorManagementAlphaMode Straight;
}
public enum SharpDX.Direct2D1.ColorManagementProperties : Enum {
    public int value__;
    public static ColorManagementProperties SourceColorContext;
    public static ColorManagementProperties SourceRenderingIntent;
    public static ColorManagementProperties DestinationColorContext;
    public static ColorManagementProperties DestinationRenderingIntent;
    public static ColorManagementProperties AlphaMode;
    public static ColorManagementProperties Quality;
}
public enum SharpDX.Direct2D1.ColorManagementQuality : Enum {
    public int value__;
    public static ColorManagementQuality Proof;
    public static ColorManagementQuality Normal;
    public static ColorManagementQuality Best;
}
public enum SharpDX.Direct2D1.ColorManagementRenderingIntent : Enum {
    public int value__;
    public static ColorManagementRenderingIntent Perceptual;
    public static ColorManagementRenderingIntent RelativeColorimetric;
    public static ColorManagementRenderingIntent Saturation;
    public static ColorManagementRenderingIntent AbsoluteColorimetric;
}
public enum SharpDX.Direct2D1.ColorMatrixAlphaMode : Enum {
    public int value__;
    public static ColorMatrixAlphaMode Premultiplied;
    public static ColorMatrixAlphaMode Straight;
}
public enum SharpDX.Direct2D1.ColorMatrixProperties : Enum {
    public int value__;
    public static ColorMatrixProperties ColorMatrix;
    public static ColorMatrixProperties AlphaMode;
    public static ColorMatrixProperties ClampOutput;
}
public enum SharpDX.Direct2D1.ColorSpace : Enum {
    public int value__;
    public static ColorSpace Custom;
    public static ColorSpace SRgb;
    public static ColorSpace ScRgb;
}
public enum SharpDX.Direct2D1.CombineMode : Enum {
    public int value__;
    public static CombineMode Union;
    public static CombineMode Intersect;
    public static CombineMode Xor;
    public static CombineMode Exclude;
}
[GuidAttribute("b4f34a19-2383-4d76-94f6-ec343657c3dc")]
public class SharpDX.Direct2D1.CommandList : Image {
    public CommandList(DeviceContext deviceContext);
    public CommandList(IntPtr nativePtr);
    public static CommandList op_Explicit(IntPtr nativePtr);
    public void Stream(CommandSink sink);
    public void Close();
}
[GuidAttribute("54d7898a-a061-40a7-bec7-e465bcba2c4f")]
public interface SharpDX.Direct2D1.CommandSink {
    unknown AntialiasMode AntialiasMode {public set; }
    unknown TextAntialiasMode TextAntialiasMode {public set; }
    unknown RenderingParams TextRenderingParams {public set; }
    unknown RawMatrix3x2 Transform {public set; }
    unknown PrimitiveBlend PrimitiveBlend {public set; }
    unknown UnitMode UnitMode {public set; }
    public abstract virtual void BeginDraw();
    public abstract virtual void EndDraw();
    public abstract virtual void set_AntialiasMode(AntialiasMode value);
    public abstract virtual void SetTags(long tag1, long tag2);
    public abstract virtual void set_TextAntialiasMode(TextAntialiasMode value);
    public abstract virtual void set_TextRenderingParams(RenderingParams value);
    public abstract virtual void set_Transform(RawMatrix3x2 value);
    public abstract virtual void set_PrimitiveBlend(PrimitiveBlend value);
    public abstract virtual void set_UnitMode(UnitMode value);
    public abstract virtual void Clear(Nullable`1<RawColor4> color);
    public abstract virtual void DrawGlyphRun(RawVector2 baselineOrigin, GlyphRun glyphRun, GlyphRunDescription glyphRunDescription, Brush foregroundBrush, MeasuringMode measuringMode);
    public abstract virtual void DrawLine(RawVector2 point0, RawVector2 point1, Brush brush, float strokeWidth, StrokeStyle strokeStyle);
    public abstract virtual void DrawGeometry(Geometry geometry, Brush brush, float strokeWidth, StrokeStyle strokeStyle);
    public abstract virtual void DrawRectangle(RawRectangleF rect, Brush brush, float strokeWidth, StrokeStyle strokeStyle);
    public abstract virtual void DrawBitmap(Bitmap bitmap, Nullable`1<RawRectangleF> destinationRectangle, float opacity, InterpolationMode interpolationMode, Nullable`1<RawRectangleF> sourceRectangle, Nullable`1<RawMatrix> erspectiveTransformRef);
    public abstract virtual void DrawImage(Image image, Nullable`1<RawVector2> targetOffset, Nullable`1<RawRectangleF> imageRectangle, InterpolationMode interpolationMode, CompositeMode compositeMode);
    public abstract virtual void DrawGdiMetafile(GdiMetafile gdiMetafile, Nullable`1<RawVector2> targetOffset);
    public abstract virtual void FillMesh(Mesh mesh, Brush brush);
    public abstract virtual void FillOpacityMask(Bitmap opacityMask, Brush brush, Nullable`1<RawRectangleF> destinationRectangle, Nullable`1<RawRectangleF> sourceRectangle);
    public abstract virtual void FillGeometry(Geometry geometry, Brush brush, Brush opacityBrush);
    public abstract virtual void FillRectangle(RawRectangleF rect, Brush brush);
    public abstract virtual void PushAxisAlignedClip(RawRectangleF clipRect, AntialiasMode antialiasMode);
    public abstract virtual void PushLayer(LayerParameters1& layerParameters1, Layer layer);
    public abstract virtual void PopAxisAlignedClip();
    public abstract virtual void PopLayer();
}
[GuidAttribute("9eb767fd-4269-4467-b8c2-eb30cb305743")]
public interface SharpDX.Direct2D1.CommandSink1 {
    unknown PrimitiveBlend PrimitiveBlend1 {public set; }
    public abstract virtual void set_PrimitiveBlend1(PrimitiveBlend value);
}
[GuidAttribute("9eb767fd-4269-4467-b8c2-eb30cb305743")]
internal class SharpDX.Direct2D1.CommandSink1Native : CommandSinkNative {
    unknown PrimitiveBlend PrimitiveBlend1 {public set; }
    unknown PrimitiveBlend PrimitiveBlend1_ {public set; }
    public CommandSink1Native(IntPtr nativePtr);
    public sealed virtual void set_PrimitiveBlend1(PrimitiveBlend value);
    public static CommandSink1Native op_Explicit(IntPtr nativePtr);
    public void set_PrimitiveBlend1_(PrimitiveBlend value);
    internal void SetPrimitiveBlend1_(PrimitiveBlend primitiveBlend);
}
internal class SharpDX.Direct2D1.CommandSink1Shadow : ComObjectShadow {
    private static CommandSink1Vtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static CommandSink1Shadow();
    public static IntPtr ToIntPtr(CommandSink1 callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
[GuidAttribute("3bab440e-417e-47df-a2e2-bc0be6a00916")]
public interface SharpDX.Direct2D1.CommandSink2 {
    public abstract virtual void DrawInk(Ink ink, Brush brush, InkStyle inkStyle);
    public abstract virtual void DrawGradientMesh(GradientMesh gradientMesh);
    public abstract virtual void DrawGdiMetafile(GdiMetafile gdiMetafile, Nullable`1<RawRectangleF> destinationRectangle, Nullable`1<RawRectangleF> sourceRectangle);
}
[GuidAttribute("3bab440e-417e-47df-a2e2-bc0be6a00916")]
internal class SharpDX.Direct2D1.CommandSink2Native : CommandSink1Native {
    public CommandSink2Native(IntPtr nativePtr);
    public sealed virtual void DrawInk(Ink ink, Brush brush, InkStyle inkStyle);
    public sealed virtual void DrawGradientMesh(GradientMesh gradientMesh);
    public sealed virtual void DrawGdiMetafile(GdiMetafile gdiMetafile, Nullable`1<RawRectangleF> destinationRectangle, Nullable`1<RawRectangleF> sourceRectangle);
    public static CommandSink2Native op_Explicit(IntPtr nativePtr);
    internal void DrawInk_(Ink ink, Brush brush, InkStyle inkStyle);
    internal void DrawGradientMesh_(GradientMesh gradientMesh);
    internal void DrawGdiMetafile_(GdiMetafile gdiMetafile, Nullable`1<RawRectangleF> destinationRectangle, Nullable`1<RawRectangleF> sourceRectangle);
}
[GuidAttribute("18079135-4cf3-4868-bc8e-06067e6d242d")]
public interface SharpDX.Direct2D1.CommandSink3 {
    public abstract virtual void DrawSpriteBatch(SpriteBatch spriteBatch, int startIndex, int spriteCount, Bitmap bitmap, BitmapInterpolationMode interpolationMode, SpriteOptions spriteOptions);
}
[GuidAttribute("18079135-4cf3-4868-bc8e-06067e6d242d")]
internal class SharpDX.Direct2D1.CommandSink3Native : CommandSink2Native {
    public CommandSink3Native(IntPtr nativePtr);
    public sealed virtual void DrawSpriteBatch(SpriteBatch spriteBatch, int startIndex, int spriteCount, Bitmap bitmap, BitmapInterpolationMode interpolationMode, SpriteOptions spriteOptions);
    public static CommandSink3Native op_Explicit(IntPtr nativePtr);
    internal void DrawSpriteBatch_(SpriteBatch spriteBatch, int startIndex, int spriteCount, Bitmap bitmap, BitmapInterpolationMode interpolationMode, SpriteOptions spriteOptions);
}
[GuidAttribute("c78a6519-40d6-4218-b2de-beeeb744bb3e")]
public interface SharpDX.Direct2D1.CommandSink4 {
    public abstract virtual void SetPrimitiveBlend2(PrimitiveBlend primitiveBlend);
}
[GuidAttribute("c78a6519-40d6-4218-b2de-beeeb744bb3e")]
internal class SharpDX.Direct2D1.CommandSink4Native : CommandSink3Native {
    unknown PrimitiveBlend PrimitiveBlend2_ {public set; }
    public CommandSink4Native(IntPtr nativePtr);
    public sealed virtual void SetPrimitiveBlend2(PrimitiveBlend primitiveBlend);
    public static CommandSink4Native op_Explicit(IntPtr nativePtr);
    public void set_PrimitiveBlend2_(PrimitiveBlend value);
    internal void SetPrimitiveBlend2_(PrimitiveBlend primitiveBlend);
}
[GuidAttribute("54d7898a-a061-40a7-bec7-e465bcba2c4f")]
internal class SharpDX.Direct2D1.CommandSinkNative : ComObject {
    unknown AntialiasMode AntialiasMode {public set; }
    unknown TextAntialiasMode TextAntialiasMode {public set; }
    unknown RenderingParams TextRenderingParams {public set; }
    unknown RawMatrix3x2 Transform {public set; }
    unknown PrimitiveBlend PrimitiveBlend {public set; }
    unknown UnitMode UnitMode {public set; }
    unknown AntialiasMode AntialiasMode_ {public set; }
    unknown TextAntialiasMode TextAntialiasMode_ {public set; }
    unknown RenderingParams TextRenderingParams_ {public set; }
    unknown RawMatrix3x2 Transform_ {public set; }
    unknown PrimitiveBlend PrimitiveBlend_ {public set; }
    unknown UnitMode UnitMode_ {public set; }
    public CommandSinkNative(IntPtr nativePtr);
    public sealed virtual void BeginDraw();
    public sealed virtual void EndDraw();
    public sealed virtual void set_AntialiasMode(AntialiasMode value);
    public sealed virtual void SetTags(long tag1, long tag2);
    public sealed virtual void set_TextAntialiasMode(TextAntialiasMode value);
    public sealed virtual void set_TextRenderingParams(RenderingParams value);
    public sealed virtual void set_Transform(RawMatrix3x2 value);
    public sealed virtual void set_PrimitiveBlend(PrimitiveBlend value);
    public sealed virtual void set_UnitMode(UnitMode value);
    public sealed virtual void Clear(Nullable`1<RawColor4> color);
    public sealed virtual void DrawGlyphRun(RawVector2 baselineOrigin, GlyphRun glyphRun, GlyphRunDescription glyphRunDescription, Brush foregroundBrush, MeasuringMode measuringMode);
    public sealed virtual void DrawLine(RawVector2 point0, RawVector2 point1, Brush brush, float strokeWidth, StrokeStyle strokeStyle);
    public sealed virtual void DrawGeometry(Geometry geometry, Brush brush, float strokeWidth, StrokeStyle strokeStyle);
    public sealed virtual void DrawRectangle(RawRectangleF rect, Brush brush, float strokeWidth, StrokeStyle strokeStyle);
    public sealed virtual void DrawBitmap(Bitmap bitmap, Nullable`1<RawRectangleF> destinationRectangle, float opacity, InterpolationMode interpolationMode, Nullable`1<RawRectangleF> sourceRectangle, Nullable`1<RawMatrix> erspectiveTransformRef);
    public sealed virtual void DrawImage(Image image, Nullable`1<RawVector2> targetOffset, Nullable`1<RawRectangleF> imageRectangle, InterpolationMode interpolationMode, CompositeMode compositeMode);
    public sealed virtual void DrawGdiMetafile(GdiMetafile gdiMetafile, Nullable`1<RawVector2> targetOffset);
    public sealed virtual void FillMesh(Mesh mesh, Brush brush);
    public sealed virtual void FillOpacityMask(Bitmap opacityMask, Brush brush, Nullable`1<RawRectangleF> destinationRectangle, Nullable`1<RawRectangleF> sourceRectangle);
    public sealed virtual void FillGeometry(Geometry geometry, Brush brush, Brush opacityBrush);
    public sealed virtual void FillRectangle(RawRectangleF rect, Brush brush);
    public sealed virtual void PushAxisAlignedClip(RawRectangleF clipRect, AntialiasMode antialiasMode);
    public sealed virtual void PushLayer(LayerParameters1& layerParameters1, Layer layer);
    public sealed virtual void PopAxisAlignedClip();
    public sealed virtual void PopLayer();
    public static CommandSinkNative op_Explicit(IntPtr nativePtr);
    public void set_AntialiasMode_(AntialiasMode value);
    public void set_TextAntialiasMode_(TextAntialiasMode value);
    public void set_TextRenderingParams_(RenderingParams value);
    public void set_Transform_(RawMatrix3x2 value);
    public void set_PrimitiveBlend_(PrimitiveBlend value);
    public void set_UnitMode_(UnitMode value);
    internal void BeginDraw_();
    internal void EndDraw_();
    internal void SetAntialiasMode_(AntialiasMode antialiasMode);
    internal void SetTags_(long tag1, long tag2);
    internal void SetTextAntialiasMode_(TextAntialiasMode textAntialiasMode);
    internal void SetTextRenderingParams_(RenderingParams textRenderingParams);
    internal void SetTransform_(RawMatrix3x2& transform);
    internal void SetPrimitiveBlend_(PrimitiveBlend primitiveBlend);
    internal void SetUnitMode_(UnitMode unitMode);
    internal void Clear_(Nullable`1<RawColor4> color);
    internal void DrawGlyphRun_(RawVector2 baselineOrigin, GlyphRun glyphRun, GlyphRunDescription glyphRunDescription, Brush foregroundBrush, MeasuringMode measuringMode);
    internal void DrawLine_(RawVector2 point0, RawVector2 point1, Brush brush, float strokeWidth, StrokeStyle strokeStyle);
    internal void DrawGeometry_(Geometry geometry, Brush brush, float strokeWidth, StrokeStyle strokeStyle);
    internal void DrawRectangle_(RawRectangleF rect, Brush brush, float strokeWidth, StrokeStyle strokeStyle);
    internal void DrawBitmap_(Bitmap bitmap, Nullable`1<RawRectangleF> destinationRectangle, float opacity, InterpolationMode interpolationMode, Nullable`1<RawRectangleF> sourceRectangle, Nullable`1<RawMatrix> erspectiveTransformRef);
    internal void DrawImage_(Image image, Nullable`1<RawVector2> targetOffset, Nullable`1<RawRectangleF> imageRectangle, InterpolationMode interpolationMode, CompositeMode compositeMode);
    internal void DrawGdiMetafile_(GdiMetafile gdiMetafile, Nullable`1<RawVector2> targetOffset);
    internal void FillMesh_(Mesh mesh, Brush brush);
    internal void FillOpacityMask_(Bitmap opacityMask, Brush brush, Nullable`1<RawRectangleF> destinationRectangle, Nullable`1<RawRectangleF> sourceRectangle);
    internal void FillGeometry_(Geometry geometry, Brush brush, Brush opacityBrush);
    internal void FillRectangle_(RawRectangleF rect, Brush brush);
    internal void PushAxisAlignedClip_(RawRectangleF clipRect, AntialiasMode antialiasMode);
    internal void PushLayer_(LayerParameters1& layerParameters1, Layer layer);
    internal void PopAxisAlignedClip_();
    internal void PopLayer_();
}
internal class SharpDX.Direct2D1.CommandSinkShadow : ComObjectShadow {
    private static CommandSinkVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static CommandSinkShadow();
    public static IntPtr ToIntPtr(CommandSink callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
[FlagsAttribute]
public enum SharpDX.Direct2D1.CompatibleRenderTargetOptions : Enum {
    public int value__;
    public static CompatibleRenderTargetOptions None;
    public static CompatibleRenderTargetOptions GdiCompatible;
}
public enum SharpDX.Direct2D1.CompositeMode : Enum {
    public int value__;
    public static CompositeMode SourceOver;
    public static CompositeMode DestinationOver;
    public static CompositeMode SourceIn;
    public static CompositeMode DestinationIn;
    public static CompositeMode SourceOut;
    public static CompositeMode DestinationOut;
    public static CompositeMode SourceAtop;
    public static CompositeMode DestinationAtop;
    public static CompositeMode Xor;
    public static CompositeMode Plus;
    public static CompositeMode SourceCopy;
    public static CompositeMode BoundedSourceCopy;
    public static CompositeMode MaskInvert;
}
public enum SharpDX.Direct2D1.CompositeProperties : Enum {
    public int value__;
    public static CompositeProperties Mode;
}
[GuidAttribute("5598b14b-9fd7-48b7-9bdb-8f0964eb38bc")]
public class SharpDX.Direct2D1.ComputeInformation : RenderInformation {
    unknown Guid ComputeShader {public set; }
    public ComputeInformation(IntPtr nativePtr);
    public void SetConstantBuffer(DataStream dataStream);
    public void SetConstantBuffer(T value);
    public void SetConstantBuffer(T& value);
    public static ComputeInformation op_Explicit(IntPtr nativePtr);
    public void set_ComputeShader(Guid value);
    internal void SetComputeShaderConstantBuffer(IntPtr buffer, int bufferCount);
    internal void SetComputeShader(Guid shaderId);
    public void SetResourceTexture(int textureIndex, ResourceTexture resourceTexture);
}
[ShadowAttribute("SharpDX.Direct2D1.ComputeTransformShadow")]
[GuidAttribute("0d85573c-01e3-4f7d-bfd9-0d60608bf3c3")]
public interface SharpDX.Direct2D1.ComputeTransform {
    public abstract virtual void SetComputeInformation(ComputeInformation computeInfo);
    public abstract virtual RawInt3 CalculateThreadgroups(RawRectangle outputRect);
}
[GuidAttribute("0d85573c-01e3-4f7d-bfd9-0d60608bf3c3")]
public class SharpDX.Direct2D1.ComputeTransformNative : TransformNative {
    unknown ComputeInformation ComputeInfo_ {public set; }
    public ComputeTransformNative(IntPtr nativePtr);
    public sealed virtual void SetComputeInformation(ComputeInformation computeInfo);
    public sealed virtual RawInt3 CalculateThreadgroups(RawRectangle outputRect);
    public static ComputeTransformNative op_Explicit(IntPtr nativePtr);
    public void set_ComputeInfo_(ComputeInformation value);
    internal void SetComputeInfo_(ComputeInformation computeInfo);
    internal void CalculateThreadgroups_(RawRectangle outputRect, Int32& dimensionX, Int32& dimensionY, Int32& dimensionZ);
}
internal class SharpDX.Direct2D1.ComputeTransformShadow : TransformShadow {
    private static ComputeTransformVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static ComputeTransformShadow();
    public static IntPtr ToIntPtr(ComputeTransform callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
[GuidAttribute("1a799d8a-69f7-4e4c-9fed-437ccc6684cc")]
public class SharpDX.Direct2D1.ConcreteTransform : TransformNodeNative {
    unknown RawBool Cached {public set; }
    public ConcreteTransform(IntPtr nativePtr);
    public static ConcreteTransform op_Explicit(IntPtr nativePtr);
    public void set_Cached(RawBool value);
    public void SetOutputBuffer(BufferPrecision bufferPrecision, ChannelDepth channelDepth);
    internal void SetCached(RawBool isCached);
}
public enum SharpDX.Direct2D1.ContrastProperty : Enum {
    public int value__;
    public static ContrastProperty Contrast;
    public static ContrastProperty ClampInput;
}
public enum SharpDX.Direct2D1.ConvoleMatrixProperties : Enum {
    public int value__;
    public static ConvoleMatrixProperties KernelUnitLength;
    public static ConvoleMatrixProperties ScaleMode;
    public static ConvoleMatrixProperties KernelSizeX;
    public static ConvoleMatrixProperties KernelSizeY;
    public static ConvoleMatrixProperties KernelMatrix;
    public static ConvoleMatrixProperties Divisor;
    public static ConvoleMatrixProperties Bias;
    public static ConvoleMatrixProperties KernelOffset;
    public static ConvoleMatrixProperties PreserveAlpha;
    public static ConvoleMatrixProperties BorderMode;
    public static ConvoleMatrixProperties ClampOutput;
}
public enum SharpDX.Direct2D1.ConvoleMatrixScaleMode : Enum {
    public int value__;
    public static ConvoleMatrixScaleMode NearestNeighbor;
    public static ConvoleMatrixScaleMode Linear;
    public static ConvoleMatrixScaleMode Cubic;
    public static ConvoleMatrixScaleMode MultiSampleLinear;
    public static ConvoleMatrixScaleMode Anisotropic;
    public static ConvoleMatrixScaleMode HighQualityCubic;
}
public class SharpDX.Direct2D1.CreationProperties : ValueType {
    public ThreadingMode ThreadingMode;
    public DebugLevel DebugLevel;
    public DeviceContextOptions Options;
}
public enum SharpDX.Direct2D1.CropProperties : Enum {
    public int value__;
    public static CropProperties Rectangle;
    public static CropProperties BorderMode;
}
public enum SharpDX.Direct2D1.CrossfadeProp : Enum {
    public int value__;
    public static CrossfadeProp Weight;
}
[ShadowAttribute("SharpDX.Direct2D1.CustomEffectShadow")]
[GuidAttribute("a248fd3f-3e6c-4e63-9f03-7f68ecc91db9")]
public interface SharpDX.Direct2D1.CustomEffect {
    public abstract virtual void Initialize(EffectContext effectContext, TransformGraph transformGraph);
    public abstract virtual void PrepareForRender(ChangeType changeType);
    public abstract virtual void SetGraph(TransformGraph transformGraph);
}
[AttributeUsageAttribute("4")]
public class SharpDX.Direct2D1.CustomEffectAttribute : Attribute {
    private string description;
    private string category;
    private string author;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    public string DisplayName { get; public set; }
    public string Description { get; }
    public string Category { get; }
    public string Author { get; }
    public CustomEffectAttribute(string description, string category, string author);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    public string get_Description();
    public string get_Category();
    public string get_Author();
}
public abstract class SharpDX.Direct2D1.CustomEffectBase : CallbackBase {
    public virtual void Initialize(EffectContext effectContext, TransformGraph transformGraph);
    public virtual void PrepareForRender(ChangeType changeType);
    public virtual void SetGraph(TransformGraph transformGraph);
}
internal class SharpDX.Direct2D1.CustomEffectFactory : object {
    private Type customEffectType;
    private CreateCustomEffectDelegate callback;
    private XDocument xml;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomEffectFactoryDelegate <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <NativePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyBinding[] <Bindings>k__BackingField;
    public Guid Guid { get; private set; }
    public CustomEffectFactoryDelegate Factory { get; private set; }
    public IntPtr NativePointer { get; private set; }
    public PropertyBinding[] Bindings { get; private set; }
    public CustomEffectFactory(CustomEffectFactoryDelegate factory, Type customEffectType);
    public CustomEffectFactory(CustomEffectFactoryDelegate factory, Type customEffectType, Guid effectId);
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
private void set_Guid(Guid value);
    [CompilerGeneratedAttribute]
public CustomEffectFactoryDelegate get_Factory();
    [CompilerGeneratedAttribute]
private void set_Factory(CustomEffectFactoryDelegate value);
    [CompilerGeneratedAttribute]
public IntPtr get_NativePointer();
    [CompilerGeneratedAttribute]
private void set_NativePointer(IntPtr value);
    [CompilerGeneratedAttribute]
public PropertyBinding[] get_Bindings();
    [CompilerGeneratedAttribute]
private void set_Bindings(PropertyBinding[] value);
    public string ToXml();
    private void InitializeBindings();
    private static XElement CreateXmlProperty(string name, string type, string value);
    private void InitializeXml();
    private int CreateCustomEffectImpl(IntPtr& nativeCustomEffectPtr);
}
internal class SharpDX.Direct2D1.CustomEffectFactoryDelegate : MulticastDelegate {
    public CustomEffectFactoryDelegate(object object, IntPtr method);
    public virtual CustomEffect Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual CustomEffect EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("4")]
public class SharpDX.Direct2D1.CustomEffectInputAttribute : Attribute {
    private string input;
    public string Input { get; }
    public CustomEffectInputAttribute(string input);
    public string get_Input();
}
[GuidAttribute("a248fd3f-3e6c-4e63-9f03-7f68ecc91db9")]
internal class SharpDX.Direct2D1.CustomEffectNative : ComObject {
    unknown TransformGraph Graph_ {public set; }
    public CustomEffectNative(IntPtr nativePtr);
    public sealed virtual void Initialize(EffectContext effectContext, TransformGraph transformGraph);
    public sealed virtual void PrepareForRender(ChangeType changeType);
    public sealed virtual void SetGraph(TransformGraph transformGraph);
    public static CustomEffectNative op_Explicit(IntPtr nativePtr);
    public void set_Graph_(TransformGraph value);
    internal void Initialize_(EffectContext effectContext, TransformGraph transformGraph);
    internal void PrepareForRender_(ChangeType changeType);
    internal void SetGraph_(TransformGraph transformGraph);
}
internal class SharpDX.Direct2D1.CustomEffectShadow : ComObjectShadow {
    private static CustomEffectVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static CustomEffectShadow();
    public static IntPtr ToIntPtr(CustomEffect callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
public class SharpDX.Direct2D1.CustomVertexBufferProperties : object {
    [CompilerGeneratedAttribute]
private Byte[] <InputSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private InputElement[] <InputElements>k__BackingField;
    internal IntPtr ShaderBufferWithInputSignature;
    internal int ShaderBufferSize;
    internal IntPtr InputElementsPointer;
    internal int ElementCount;
    public int Stride;
    public Byte[] InputSignature { get; public set; }
    public InputElement[] InputElements { get; public set; }
    public CustomVertexBufferProperties(Byte[] inputSignature, InputElement[] inputElements, int stride);
    [CompilerGeneratedAttribute]
public Byte[] get_InputSignature();
    [CompilerGeneratedAttribute]
public void set_InputSignature(Byte[] value);
    [CompilerGeneratedAttribute]
public InputElement[] get_InputElements();
    [CompilerGeneratedAttribute]
public void set_InputElements(InputElement[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public static class SharpDX.Direct2D1.D2D1 : object {
    public static float DefaultFlatteningTolerance;
    public static float DefaultDpi;
    public static float ComputeFlatteningTolerance(RawMatrix3x2& matrix, float dpiX, float dpiY, float maxZoomFactor);
    public static void CreateFactory(FactoryType factoryType, Guid riid, Nullable`1<FactoryOptions> factoryOptionsRef, IntPtr& iFactoryOut);
    private static int D2D1CreateFactory_(int param0, Void* param1, Void* param2, Void* param3);
    public static void MakeRotateMatrix(float angle, RawVector2 center, RawMatrix3x2& matrix);
    private static void D2D1MakeRotateMatrix_(float param0, RawVector2 param1, Void* param2);
    public static void MakeSkewMatrix(float angleX, float angleY, RawVector2 center, RawMatrix3x2& matrix);
    private static void D2D1MakeSkewMatrix_(float param0, float param1, RawVector2 param2, Void* param3);
    public static RawBool IsMatrixInvertible(RawMatrix3x2& matrix);
    private static RawBool D2D1IsMatrixInvertible_(Void* param0);
    public static RawBool InvertMatrix(RawMatrix3x2& matrix);
    private static RawBool D2D1InvertMatrix_(Void* param0);
    public static void CreateDevice(Device dxgiDevice, Nullable`1<CreationProperties> creationProperties, Device d2dDevice);
    private static int D2D1CreateDevice_(Void* param0, Void* param1, Void* param2);
    public static void CreateDeviceContext(Surface dxgiSurface, Nullable`1<CreationProperties> creationProperties, DeviceContext d2dDeviceContext);
    private static int D2D1CreateDeviceContext_(Void* param0, Void* param1, Void* param2);
    public static RawColor4 ConvertColorSpace(ColorSpace sourceColorSpace, ColorSpace destinationColorSpace, RawColor4 color);
    private static Void* D2D1ConvertColorSpace_(Void* param0, int param1, int param2, Void* param3);
    public static void SinCos(float angle, Single& s, Single& c);
    private static void D2D1SinCos_(float param0, Void* param1, Void* param2);
    public static float Tan(float angle);
    private static float D2D1Tan_(float param0);
    public static float Vec3Length(float x, float y, float z);
    private static float D2D1Vec3Length_(float param0, float param1, float param2);
    public static float ComputeMaximumScaleFactor(RawMatrix3x2& matrix);
    private static float D2D1ComputeMaximumScaleFactor_(Void* param0);
    public static void GetGradientMeshInteriorPointsFromCoonsPatch(RawVector2 point0Ref, RawVector2 point1Ref, RawVector2 point2Ref, RawVector2 point3Ref, RawVector2 point4Ref, RawVector2 point5Ref, RawVector2 point6Ref, RawVector2 point7Ref, RawVector2 point8Ref, RawVector2 point9Ref, RawVector2 point10Ref, RawVector2 point11Ref, RawVector2& tensorPoint11Ref, RawVector2& tensorPoint12Ref, RawVector2& tensorPoint21Ref, RawVector2& tensorPoint22Ref);
    private static void D2D1GetGradientMeshInteriorPointsFromCoonsPatch_(Void* param0, Void* param1, Void* param2, Void* param3, Void* param4, Void* param5, Void* param6, Void* param7, Void* param8, Void* param9, Void* param10, Void* param11, Void* param12, Void* param13, Void* param14, Void* param15);
}
public enum SharpDX.Direct2D1.DashStyle : Enum {
    public int value__;
    public static DashStyle Solid;
    public static DashStyle Dash;
    public static DashStyle Dot;
    public static DashStyle DashDot;
    public static DashStyle DashDotDot;
    public static DashStyle Custom;
}
public enum SharpDX.Direct2D1.DebugLevel : Enum {
    public int value__;
    public static DebugLevel None;
    public static DebugLevel Error;
    public static DebugLevel Warning;
    public static DebugLevel Information;
}
[GuidAttribute("47dd575d-ac05-4cdd-8049-9b02cd16f44c")]
public class SharpDX.Direct2D1.Device : Resource {
    public long MaximumTextureMemory { get; public set; }
    public Device(Device device);
    public Device(Device device, CreationProperties creationProperties);
    public Device(Factory1 factory, Device device);
    public Device(IntPtr nativePtr);
    public static Device op_Explicit(IntPtr nativePtr);
    public long get_MaximumTextureMemory();
    public void set_MaximumTextureMemory(long value);
    internal void CreateDeviceContext(DeviceContextOptions options, DeviceContext deviceContext);
    internal void CreatePrintControl(ImagingFactory wicFactory, ComObject documentTarget, Nullable`1<PrintControlProperties> rintControlPropertiesRef, PrintControl rintControlRef);
    internal void SetMaximumTextureMemory(long maximumInBytes);
    internal long GetMaximumTextureMemory();
    public void ClearResources(int millisecondsSinceUse);
}
[GuidAttribute("d21768e1-23a4-4823-a14b-7c3eba85d658")]
public class SharpDX.Direct2D1.Device1 : Device {
    public RenderingPriority RenderingPriority { get; public set; }
    public Device1(Factory2 factory, Device device);
    public Device1(IntPtr nativePtr);
    public static Device1 op_Explicit(IntPtr nativePtr);
    public RenderingPriority get_RenderingPriority();
    public void set_RenderingPriority(RenderingPriority value);
    internal RenderingPriority GetRenderingPriority();
    internal void SetRenderingPriority(RenderingPriority renderingPriority);
    internal void CreateDeviceContext(DeviceContextOptions options, DeviceContext1 deviceContext1);
}
[GuidAttribute("a44472e1-8dfb-4e60-8492-6e2861c9ca8b")]
public class SharpDX.Direct2D1.Device2 : Device1 {
    public Device DxgiDevice { get; }
    public Device2(Factory3 factory, Device device);
    public Device2(IntPtr nativePtr);
    public static Device2 op_Explicit(IntPtr nativePtr);
    public Device get_DxgiDevice();
    internal void CreateDeviceContext(DeviceContextOptions options, DeviceContext2 deviceContext2);
    public void FlushDeviceContexts(Bitmap bitmap);
    internal void GetDxgiDevice(Device& dxgiDevice);
}
[GuidAttribute("852f2087-802c-4037-ab60-ff2e7ee6fc01")]
public class SharpDX.Direct2D1.Device3 : Device2 {
    public Device3(Factory4 factory, Device device);
    public Device3(IntPtr nativePtr);
    public static Device3 op_Explicit(IntPtr nativePtr);
    internal void CreateDeviceContext(DeviceContextOptions options, DeviceContext3 deviceContext3);
}
[GuidAttribute("d7bdb159-5683-4a46-bc9c-72dc720b858b")]
public class SharpDX.Direct2D1.Device4 : Device3 {
    public long MaximumColorGlyphCacheMemory { get; public set; }
    public Device4(Factory5 factory, Device device);
    public Device4(IntPtr nativePtr);
    public static Device4 op_Explicit(IntPtr nativePtr);
    public long get_MaximumColorGlyphCacheMemory();
    public void set_MaximumColorGlyphCacheMemory(long value);
    internal void CreateDeviceContext(DeviceContextOptions options, DeviceContext4 deviceContext4);
    internal void SetMaximumColorGlyphCacheMemory(long maximumInBytes);
    internal long GetMaximumColorGlyphCacheMemory();
}
[GuidAttribute("d55ba0a4-6405-4694-aef5-08ee1a4358b4")]
public class SharpDX.Direct2D1.Device5 : Device4 {
    public Device5(Factory6 factory, Device device);
    public Device5(IntPtr nativePtr);
    public static Device5 op_Explicit(IntPtr nativePtr);
    internal void CreateDeviceContext(DeviceContextOptions options, DeviceContext5 deviceContext5);
}
[GuidAttribute("e8f7fe7a-191c-466d-ad95-975678bda998")]
public class SharpDX.Direct2D1.DeviceContext : RenderTarget {
    public Device Device { get; }
    public Image Target { get; public set; }
    public RenderingControls RenderingControls { get; public set; }
    public PrimitiveBlend PrimitiveBlend { get; public set; }
    public UnitMode UnitMode { get; public set; }
    public DeviceContext(Surface surface);
    public DeviceContext(Surface surface, CreationProperties creationProperties);
    public DeviceContext(Device device, DeviceContextOptions options);
    public DeviceContext(IntPtr nativePtr);
    public void DrawImage(Effect effect, RawVector2 targetOffset, InterpolationMode interpolationMode, CompositeMode compositeMode);
    public void DrawImage(Effect effect, InterpolationMode interpolationMode, CompositeMode compositeMode);
    public void DrawImage(Image image, RawVector2 targetOffset, InterpolationMode interpolationMode, CompositeMode compositeMode);
    public void DrawImage(Image image, InterpolationMode interpolationMode, CompositeMode compositeMode);
    public void DrawBitmap(Bitmap bitmap, float opacity, InterpolationMode interpolationMode);
    public void DrawBitmap(Bitmap bitmap, float opacity, InterpolationMode interpolationMode, RawMatrix perspectiveTransformRef);
    public void DrawBitmap(Bitmap bitmap, float opacity, InterpolationMode interpolationMode, RawRectangleF sourceRectangle, RawMatrix perspectiveTransformRef);
    public void PushLayer(LayerParameters1 layerParameters, Layer layer);
    public RawRectangleF[] GetEffectInvalidRectangles(Effect effect);
    public RawRectangleF[] GetEffectRequiredInputRectangles(Effect renderEffect, EffectInputDescription[] inputDescriptions);
    public RawRectangleF[] GetEffectRequiredInputRectangles(Effect renderEffect, RawRectangleF renderImageRectangle, EffectInputDescription[] inputDescriptions);
    public void FillOpacityMask(Bitmap opacityMask, Brush brush);
    public static DeviceContext op_Explicit(IntPtr nativePtr);
    public Device get_Device();
    public Image get_Target();
    public void set_Target(Image value);
    public RenderingControls get_RenderingControls();
    public void set_RenderingControls(RenderingControls value);
    public PrimitiveBlend get_PrimitiveBlend();
    public void set_PrimitiveBlend(PrimitiveBlend value);
    public UnitMode get_UnitMode();
    public void set_UnitMode(UnitMode value);
    internal void CreateBitmap(Size2 size, IntPtr sourceData, int pitch, BitmapProperties1 bitmapProperties, Bitmap1 bitmap);
    internal void CreateBitmapFromWicBitmap(BitmapSource wicBitmapSource, BitmapProperties1 bitmapProperties, Bitmap1& bitmap);
    internal void CreateColorContext(ColorSpace space, Byte[] rofileRef, int profileSize, ColorContext colorContext);
    internal void CreateColorContextFromFilename(string filename, ColorContext colorContext);
    internal void CreateColorContextFromWicColorContext(ColorContext wicColorContext, ColorContext colorContext);
    internal void CreateBitmapFromDxgiSurface(Surface surface, BitmapProperties1 bitmapProperties, Bitmap1 bitmap);
    internal void CreateEffect(Guid effectId, Effect effect);
    internal void CreateGradientStopCollection(GradientStop[] straightAlphaGradientStops, int straightAlphaGradientStopsCount, ColorSpace preInterpolationSpace, ColorSpace postInterpolationSpace, BufferPrecision bufferPrecision, ExtendMode extendMode, ColorInterpolationMode colorInterpolationMode, GradientStopCollection1 gradientStopCollection1);
    internal void CreateImageBrush(Image image, ImageBrushProperties& imageBrushProperties, Nullable`1<BrushProperties> brushProperties, ImageBrush imageBrush);
    internal void CreateBitmapBrush(Bitmap bitmap, Nullable`1<BitmapBrushProperties1> bitmapBrushProperties, Nullable`1<BrushProperties> brushProperties, BitmapBrush1 bitmapBrush);
    internal void CreateCommandList(CommandList commandList);
    public RawBool IsDxgiFormatSupported(Format format);
    public RawBool IsBufferPrecisionSupported(BufferPrecision bufferPrecision);
    public RawRectangleF GetImageLocalBounds(Image image);
    public RawRectangleF GetImageWorldBounds(Image image);
    public RawRectangleF GetGlyphRunWorldBounds(RawVector2 baselineOrigin, GlyphRun glyphRun, MeasuringMode measuringMode);
    internal void GetDevice(Device& device);
    internal void SetTarget(Image image);
    internal void GetTarget(Image& image);
    internal void SetRenderingControls(RenderingControls renderingControls);
    internal void GetRenderingControls(RenderingControls& renderingControls);
    internal void SetPrimitiveBlend(PrimitiveBlend primitiveBlend);
    internal PrimitiveBlend GetPrimitiveBlend();
    internal void SetUnitMode(UnitMode unitMode);
    internal UnitMode GetUnitMode();
    public void DrawGlyphRun(RawVector2 baselineOrigin, GlyphRun glyphRun, GlyphRunDescription glyphRunDescription, Brush foregroundBrush, MeasuringMode measuringMode);
    public void DrawImage(Image image, Nullable`1<RawVector2> targetOffset, Nullable`1<RawRectangleF> imageRectangle, InterpolationMode interpolationMode, CompositeMode compositeMode);
    public void DrawGdiMetafile(GdiMetafile gdiMetafile, Nullable`1<RawVector2> targetOffset);
    public void DrawBitmap(Bitmap bitmap, Nullable`1<RawRectangleF> destinationRectangle, float opacity, InterpolationMode interpolationMode, Nullable`1<RawRectangleF> sourceRectangle, Nullable`1<RawMatrix> erspectiveTransformRef);
    public void PushLayer(LayerParameters1& layerParameters, Layer layer);
    public void InvalidateEffectInputRectangle(Effect effect, int input, RawRectangleF inputRectangle);
    internal int GetEffectInvalidRectangleCount(Effect effect);
    internal void GetEffectInvalidRectangles(Effect effect, RawRectangleF[] rectangles, int rectanglesCount);
    internal void GetEffectRequiredInputRectangles(Effect renderEffect, Nullable`1<RawRectangleF> renderImageRectangle, EffectInputDescription[] inputDescriptions, RawRectangleF[] requiredInputRects, int inputCount);
    public void FillOpacityMask(Bitmap opacityMask, Brush brush, Nullable`1<RawRectangleF> destinationRectangle, Nullable`1<RawRectangleF> sourceRectangle);
}
[GuidAttribute("d37f57e4-6908-459f-a199-e72f24f79987")]
public class SharpDX.Direct2D1.DeviceContext1 : DeviceContext {
    public DeviceContext1(Device1 device, DeviceContextOptions options);
    public DeviceContext1(IntPtr nativePtr);
    public static DeviceContext1 op_Explicit(IntPtr nativePtr);
    internal void CreateFilledGeometryRealization(Geometry geometry, float flatteningTolerance, GeometryRealization geometryRealization);
    internal void CreateStrokedGeometryRealization(Geometry geometry, float flatteningTolerance, float strokeWidth, StrokeStyle strokeStyle, GeometryRealization geometryRealization);
    public void DrawGeometryRealization(GeometryRealization geometryRealization, Brush brush);
}
[GuidAttribute("394ea6a3-0c34-4321-950b-6ca20f0be6c7")]
public class SharpDX.Direct2D1.DeviceContext2 : DeviceContext1 {
    public DeviceContext2(Device2 device, DeviceContextOptions options);
    public DeviceContext2(IntPtr nativePtr);
    public static DeviceContext2 op_Explicit(IntPtr nativePtr);
    internal void CreateInk(InkPoint startPoint, Ink ink);
    internal void CreateInkStyle(Nullable`1<InkStyleProperties> inkStyleProperties, InkStyle inkStyle);
    internal void CreateGradientMesh(GradientMeshPatch[] atchesRef, int patchesCount, GradientMesh gradientMesh);
    internal void CreateImageSourceFromWic(BitmapSource wicBitmapSource, ImageSourceLoadingOptions loadingOptions, AlphaMode alphaMode, ImageSourceFromWic imageSource);
    internal void CreateLookupTable3D(BufferPrecision precision, Int32[] extents, Byte[] data, int dataCount, Int32[] strides, LookupTable3D lookupTable);
    internal void CreateImageSourceFromDxgi(Surface[] surfaces, int surfaceCount, ColorSpaceType colorSpace, ImageSourceFromDxgiOptions options, ImageSource imageSource);
    public void GetGradientMeshWorldBounds(GradientMesh gradientMesh, RawRectangleF& boundsRef);
    public void DrawInk(Ink ink, Brush brush, InkStyle inkStyle);
    public void DrawGradientMesh(GradientMesh gradientMesh);
    public void DrawGdiMetafile(GdiMetafile gdiMetafile, Nullable`1<RawRectangleF> destinationRectangle, Nullable`1<RawRectangleF> sourceRectangle);
    internal void CreateTransformedImageSource(ImageSource imageSource, TransformedImageSourceProperties& ropertiesRef, TransformedImageSource transformedImageSource);
    internal void CreateImageSourceFromDxgi(ComArray`1<Surface> surfaces, int surfaceCount, ColorSpaceType colorSpace, ImageSourceFromDxgiOptions options, ImageSource imageSource);
    private void CreateImageSourceFromDxgi(IntPtr surfaces, int surfaceCount, ColorSpaceType colorSpace, ImageSourceFromDxgiOptions options, IntPtr imageSource);
}
[GuidAttribute("235a7496-8351-414c-bcd4-6672ab2d8e00")]
public class SharpDX.Direct2D1.DeviceContext3 : DeviceContext2 {
    public DeviceContext3(Device3 device, DeviceContextOptions options);
    public DeviceContext3(IntPtr nativePtr);
    public static DeviceContext3 op_Explicit(IntPtr nativePtr);
    internal void CreateSpriteBatch(SpriteBatch spriteBatch);
    public void DrawSpriteBatch(SpriteBatch spriteBatch, int startIndex, int spriteCount, Bitmap bitmap, BitmapInterpolationMode interpolationMode, SpriteOptions spriteOptions);
}
[GuidAttribute("8c427831-3d90-4476-b647-c4fae349e4db")]
public class SharpDX.Direct2D1.DeviceContext4 : DeviceContext3 {
    public DeviceContext4(Device4 device, DeviceContextOptions options);
    public DeviceContext4(IntPtr nativePtr);
    public static DeviceContext4 op_Explicit(IntPtr nativePtr);
    public void CreateSvgGlyphStyle(SvgGlyphStyle& svgGlyphStyle);
    public void DrawText(string text, int stringLength, TextFormat textFormat, RawRectangleF layoutRect, Brush defaultFillBrush, SvgGlyphStyle svgGlyphStyle, int colorPaletteIndex, DrawTextOptions options, MeasuringMode measuringMode);
    public void DrawTextLayout(RawVector2 origin, TextLayout textLayout, Brush defaultFillBrush, SvgGlyphStyle svgGlyphStyle, int colorPaletteIndex, DrawTextOptions options);
    public void DrawColorBitmapGlyphRun(GlyphImageFormatS glyphImageFormat, RawVector2 baselineOrigin, GlyphRun glyphRun, MeasuringMode measuringMode, ColorBitmapGlyphSnapOption bitmapSnapOption);
    public void DrawSvgGlyphRun(RawVector2 baselineOrigin, GlyphRun glyphRun, Brush defaultFillBrush, SvgGlyphStyle svgGlyphStyle, int colorPaletteIndex, MeasuringMode measuringMode);
    public void GetColorBitmapGlyphImage(GlyphImageFormatS glyphImageFormat, RawVector2 glyphOrigin, FontFace fontFace, float fontEmSize, short glyphIndex, RawBool isSideways, Nullable`1<RawMatrix3x2> worldTransform, float dpiX, float dpiY, RawMatrix3x2& glyphTransform, Image& glyphImage);
    public void GetSvgGlyphImage(RawVector2 glyphOrigin, FontFace fontFace, float fontEmSize, short glyphIndex, RawBool isSideways, Nullable`1<RawMatrix3x2> worldTransform, Brush defaultFillBrush, SvgGlyphStyle svgGlyphStyle, int colorPaletteIndex, RawMatrix3x2& glyphTransform, CommandList& glyphImage);
}
[GuidAttribute("7836d248-68cc-4df6-b9e8-de991bf62eb7")]
public class SharpDX.Direct2D1.DeviceContext5 : DeviceContext4 {
    public DeviceContext5(Device5 device, DeviceContextOptions options);
    public DeviceContext5(IntPtr nativePtr);
    public SvgDocument CreateSvgDocument(IStream stream, Size2F viewportSize);
    public static DeviceContext5 op_Explicit(IntPtr nativePtr);
    public void CreateSvgDocument(IStream inputXmlStream, Size2F viewportSize, SvgDocument& svgDocument);
    public void DrawSvgDocument(SvgDocument svgDocument);
    public void CreateColorContextFromDxgiColorSpace(ColorSpaceType colorSpace, ColorContext1 colorContext);
    public void CreateColorContextFromSimpleColorProfile(SimpleColorProfile& simpleProfile, ColorContext1 colorContext);
}
public enum SharpDX.Direct2D1.DeviceContextInitializeMode : Enum {
    public int value__;
    public static DeviceContextInitializeMode Copy;
    public static DeviceContextInitializeMode Clear;
}
[FlagsAttribute]
public enum SharpDX.Direct2D1.DeviceContextOptions : Enum {
    public int value__;
    public static DeviceContextOptions None;
    public static DeviceContextOptions EnableMultithreadedOptimizations;
}
[GuidAttribute("1c51bc64-de61-46fd-9899-63a5d8f03950")]
public class SharpDX.Direct2D1.DeviceContextRenderTarget : RenderTarget {
    public DeviceContextRenderTarget(Factory factory, RenderTargetProperties properties);
    public DeviceContextRenderTarget(IntPtr nativePtr);
    public static DeviceContextRenderTarget op_Explicit(IntPtr nativePtr);
    public void BindDeviceContext(IntPtr hDC, RawRectangle subRectRef);
}
public enum SharpDX.Direct2D1.DirectionalBlurOptimization : Enum {
    public int value__;
    public static DirectionalBlurOptimization Speed;
    public static DirectionalBlurOptimization Balanced;
    public static DirectionalBlurOptimization Quality;
}
public enum SharpDX.Direct2D1.DirectionalBlurProperties : Enum {
    public int value__;
    public static DirectionalBlurProperties StandardDeviation;
    public static DirectionalBlurProperties Angle;
    public static DirectionalBlurProperties Optimization;
    public static DirectionalBlurProperties BorderMode;
}
public enum SharpDX.Direct2D1.DiscreteTransferProperties : Enum {
    public int value__;
    public static DiscreteTransferProperties RedTable;
    public static DiscreteTransferProperties RedDisable;
    public static DiscreteTransferProperties GreenTable;
    public static DiscreteTransferProperties GreenDisable;
    public static DiscreteTransferProperties BlueTable;
    public static DiscreteTransferProperties BlueDisable;
    public static DiscreteTransferProperties AlphaTable;
    public static DiscreteTransferProperties AlphaDisable;
    public static DiscreteTransferProperties ClampOutput;
}
public enum SharpDX.Direct2D1.DisplacementMapProperties : Enum {
    public int value__;
    public static DisplacementMapProperties Scale;
    public static DisplacementMapProperties XChannelSelect;
    public static DisplacementMapProperties YChannelSelect;
}
public enum SharpDX.Direct2D1.DistantDiffuseProperties : Enum {
    public int value__;
    public static DistantDiffuseProperties Azimuth;
    public static DistantDiffuseProperties Elevation;
    public static DistantDiffuseProperties DiffuseConstant;
    public static DistantDiffuseProperties SurfaceScale;
    public static DistantDiffuseProperties Color;
    public static DistantDiffuseProperties KernelUnitLength;
    public static DistantDiffuseProperties ScaleMode;
}
public enum SharpDX.Direct2D1.DistantDiffuseScaleMode : Enum {
    public int value__;
    public static DistantDiffuseScaleMode NearestNeighbor;
    public static DistantDiffuseScaleMode Linear;
    public static DistantDiffuseScaleMode Cubic;
    public static DistantDiffuseScaleMode MultiSampleLinear;
    public static DistantDiffuseScaleMode Anisotropic;
    public static DistantDiffuseScaleMode HighQualityCubic;
}
public enum SharpDX.Direct2D1.DistantSpecularProperties : Enum {
    public int value__;
    public static DistantSpecularProperties Azimuth;
    public static DistantSpecularProperties Elevation;
    public static DistantSpecularProperties SpecularExponent;
    public static DistantSpecularProperties SpecularConstant;
    public static DistantSpecularProperties SurfaceScale;
    public static DistantSpecularProperties Color;
    public static DistantSpecularProperties KernelUnitLength;
    public static DistantSpecularProperties ScaleMode;
}
public enum SharpDX.Direct2D1.DistantSpecularScaleMode : Enum {
    public int value__;
    public static DistantSpecularScaleMode NearestNeighbor;
    public static DistantSpecularScaleMode Linear;
    public static DistantSpecularScaleMode Cubic;
    public static DistantSpecularScaleMode MultiSampleLinear;
    public static DistantSpecularScaleMode Anisotropic;
    public static DistantSpecularScaleMode HighQualityCubic;
}
public enum SharpDX.Direct2D1.DpiCompensationInterpolationMode : Enum {
    public int value__;
    public static DpiCompensationInterpolationMode NearestNeighbor;
    public static DpiCompensationInterpolationMode Linear;
    public static DpiCompensationInterpolationMode Cubic;
    public static DpiCompensationInterpolationMode MultiSampleLinear;
    public static DpiCompensationInterpolationMode Anisotropic;
    public static DpiCompensationInterpolationMode HighQualityCubic;
}
public enum SharpDX.Direct2D1.DpiCompensationProperties : Enum {
    public int value__;
    public static DpiCompensationProperties InterpolationMode;
    public static DpiCompensationProperties BorderMode;
    public static DpiCompensationProperties InputDpi;
}
[GuidAttribute("693ce632-7f2f-45de-93fe-18d88b37aa21")]
public class SharpDX.Direct2D1.DrawInformation : RenderInformation {
    public DrawInformation(IntPtr nativePtr);
    public void SetVertexConstantBuffer(DataStream dataStream);
    public void SetVertexConstantBuffer(T value);
    public void SetVertexConstantBuffer(T& value);
    public void SetPixelConstantBuffer(DataStream dataStream);
    public void SetPixelConstantBuffer(T value);
    public void SetPixelConstantBuffer(T& value);
    public static DrawInformation op_Explicit(IntPtr nativePtr);
    internal void SetPixelShaderConstantBuffer(IntPtr buffer, int bufferCount);
    public void SetResourceTexture(int textureIndex, ResourceTexture resourceTexture);
    internal void SetVertexShaderConstantBuffer(IntPtr buffer, int bufferCount);
    public void SetPixelShader(Guid shaderId, PixelOptions pixelOptions);
    public void SetVertexProcessing(VertexBuffer vertexBuffer, VertexOptions vertexOptions, Nullable`1<BlendDescription> blendDescription, Nullable`1<VertexRange> vertexRange, Nullable`1<Guid> vertexShader);
}
[GuidAttribute("28506e39-ebf6-46a1-bb47-fd85565ab957")]
public class SharpDX.Direct2D1.DrawingStateBlock : Resource {
    public DrawingStateDescription Description { get; public set; }
    public RenderingParams TextRenderingParams { get; public set; }
    public DrawingStateBlock(Factory factory);
    public DrawingStateBlock(Factory factory, DrawingStateDescription drawingStateDescription);
    public DrawingStateBlock(Factory factory, RenderingParams textRenderingParams);
    public DrawingStateBlock(Factory factory, Nullable`1<DrawingStateDescription> drawingStateDescription, RenderingParams textRenderingParams);
    public DrawingStateBlock(IntPtr nativePtr);
    public static DrawingStateBlock op_Explicit(IntPtr nativePtr);
    public DrawingStateDescription get_Description();
    public void set_Description(DrawingStateDescription value);
    public RenderingParams get_TextRenderingParams();
    public void set_TextRenderingParams(RenderingParams value);
    internal void GetDescription(DrawingStateDescription& stateDescription);
    internal void SetDescription(DrawingStateDescription& stateDescription);
    internal void SetTextRenderingParams(RenderingParams textRenderingParams);
    internal void GetTextRenderingParams(RenderingParams& textRenderingParams);
}
[GuidAttribute("689f1f85-c72e-4e33-8f19-85754efd5ace")]
public class SharpDX.Direct2D1.DrawingStateBlock1 : DrawingStateBlock {
    public DrawingStateDescription1 Description { get; public set; }
    public DrawingStateBlock1(Factory1 factory);
    public DrawingStateBlock1(Factory1 factory, DrawingStateDescription1 drawingStateDescription);
    public DrawingStateBlock1(Factory1 factory, RenderingParams textRenderingParams);
    public DrawingStateBlock1(Factory1 factory, DrawingStateDescription1 drawingStateDescription, RenderingParams textRenderingParams);
    public DrawingStateBlock1(IntPtr nativePtr);
    public static DrawingStateBlock1 op_Explicit(IntPtr nativePtr);
    public DrawingStateDescription1 get_Description();
    public void set_Description(DrawingStateDescription1 value);
    internal void GetDescription(DrawingStateDescription1& stateDescription);
    internal void SetDescription(DrawingStateDescription1& stateDescription);
}
public class SharpDX.Direct2D1.DrawingStateDescription : ValueType {
    public AntialiasMode AntialiasMode;
    public TextAntialiasMode TextAntialiasMode;
    public long Tag1;
    public long Tag2;
    public RawMatrix3x2 Transform;
}
public class SharpDX.Direct2D1.DrawingStateDescription1 : ValueType {
    public AntialiasMode AntialiasMode;
    public TextAntialiasMode TextAntialiasMode;
    public long Tag1;
    public long Tag2;
    public RawMatrix3x2 Transform;
    public PrimitiveBlend PrimitiveBlend;
    public UnitMode UnitMode;
}
[FlagsAttribute]
public enum SharpDX.Direct2D1.DrawTextOptions : Enum {
    public int value__;
    public static DrawTextOptions NoSnap;
    public static DrawTextOptions Clip;
    public static DrawTextOptions EnableColorFont;
    public static DrawTextOptions DisableColorBitmapSnapping;
    public static DrawTextOptions None;
}
[ShadowAttribute("SharpDX.Direct2D1.DrawTransformShadow")]
[GuidAttribute("36bfdcb6-9739-435d-a30d-a653beff6a6f")]
public interface SharpDX.Direct2D1.DrawTransform {
    public abstract virtual void SetDrawInformation(DrawInformation drawInfo);
}
[GuidAttribute("36bfdcb6-9739-435d-a30d-a653beff6a6f")]
public class SharpDX.Direct2D1.DrawTransformNative : TransformNative {
    unknown DrawInformation DrawInfo_ {public set; }
    public DrawTransformNative(IntPtr nativePtr);
    public sealed virtual void SetDrawInformation(DrawInformation drawInfo);
    public static DrawTransformNative op_Explicit(IntPtr nativePtr);
    public void set_DrawInfo_(DrawInformation value);
    internal void SetDrawInfo_(DrawInformation drawInfo);
}
internal class SharpDX.Direct2D1.DrawTransformShadow : TransformShadow {
    private static DrawTransformVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static DrawTransformShadow();
    public static IntPtr ToIntPtr(DrawTransform callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
public enum SharpDX.Direct2D1.EdgeDetectionMode : Enum {
    public int value__;
    public static EdgeDetectionMode StreamOutputBel;
    public static EdgeDetectionMode Prewitt;
}
public enum SharpDX.Direct2D1.EdgeDetectionProperty : Enum {
    public int value__;
    public static EdgeDetectionProperty Strength;
    public static EdgeDetectionProperty BlurRadius;
    public static EdgeDetectionProperty Mode;
    public static EdgeDetectionProperty OverlayEdges;
    public static EdgeDetectionProperty AlphaMode;
}
[GuidAttribute("28211a43-7d89-476f-8181-2d6159b220ad")]
public class SharpDX.Direct2D1.Effect : Properties {
    public static Guid ArithmeticComposite;
    public static Guid Atlas;
    public static Guid BitmapSource;
    public static Guid Blend;
    public static Guid Border;
    public static Guid Brightness;
    public static Guid ColorManagement;
    public static Guid ColorMatrix;
    public static Guid Composite;
    public static Guid ConvolveMatrix;
    public static Guid Crop;
    public static Guid DirectionalBlur;
    public static Guid DiscreteTransfer;
    public static Guid DisplacementMap;
    public static Guid DistantDiffuse;
    public static Guid DistantSpecular;
    public static Guid DpiCompensation;
    public static Guid Flood;
    public static Guid GammaTransfer;
    public static Guid GaussianBlur;
    public static Guid Scale;
    public static Guid Histogram;
    public static Guid HueRotation;
    public static Guid LinearTransfer;
    public static Guid LuminanceToAlpha;
    public static Guid Morphology;
    public static Guid OpacityMetadata;
    public static Guid PointDiffuse;
    public static Guid PointSpecular;
    public static Guid Premultiply;
    public static Guid Saturation;
    public static Guid Shadow;
    public static Guid SpotDiffuse;
    public static Guid SpotSpecular;
    public static Guid TableTransfer;
    public static Guid Tile;
    public static Guid Turbulence;
    public static Guid UnPremultiply;
    public static Guid YCbCr;
    public static Guid Contrast;
    public static Guid RgbToHue;
    public static Guid HueToRgb;
    public static Guid ChromaKey;
    public static Guid Emboss;
    public static Guid Exposure;
    public static Guid Grayscale;
    public static Guid Invert;
    public static Guid Posterize;
    public static Guid Sepia;
    public static Guid Sharpen;
    public static Guid Straighten;
    public static Guid TemperatureTint;
    public static Guid Vignette;
    public static Guid EdgeDetection;
    public static Guid HighlightsShadows;
    public static Guid LookupTable3D;
    public static Guid Opacity;
    public static Guid AlphaMask;
    public static Guid CrossFade;
    public static Guid Tint;
    public static Guid AffineTransform2D;
    public static Guid PerspectiveTransform3D;
    public static Guid Transform3D;
    public int InputCount { get; public set; }
    public Image Output { get; }
    public Effect(DeviceContext deviceContext, Guid effectId);
    public Effect(EffectContext effectContext, Guid effectId);
    public Effect(IntPtr nativePtr);
    private static Effect();
    public void SetInputEffect(int index, Effect effect, bool invalidate);
    public static Effect op_Explicit(IntPtr nativePtr);
    public int get_InputCount();
    public void set_InputCount(int value);
    public Image get_Output();
    public void SetInput(int index, Image input, RawBool invalidate);
    internal void SetInputCount(int inputCount);
    public Image GetInput(int index);
    internal int GetInputCount();
    internal void GetOutput(Image& outputImage);
}
public class SharpDX.Direct2D1.Effect`1 : Effect {
    public Effect`1(DeviceContext deviceContext);
    public Effect`1(DeviceContext deviceContext, Guid effectId);
    public Effect`1(EffectContext effectContext);
}
[GuidAttribute("3d9f916b-27dc-4ad7-b4f1-64945340f563")]
public class SharpDX.Direct2D1.EffectContext : ComObject {
    public RawVector2 Dpi { get; }
    public EffectContext(IntPtr nativePtr);
    public RawVector2 get_Dpi();
    public FeatureLevel GetMaximumSupportedFeatureLevel(FeatureLevel[] featureLevels);
    public void LoadPixelShader(Guid shaderId, Byte[] shaderBytecode);
    public void LoadVertexShader(Guid shaderId, Byte[] shaderBytecode);
    public void LoadComputeShader(Guid shaderId, Byte[] shaderBytecode);
    public bool CheckFeatureSupport(Feature feature);
    public static EffectContext op_Explicit(IntPtr nativePtr);
    internal void GetDpi(Single& dpiX, Single& dpiY);
    internal void CreateEffect(Guid effectId, Effect effect);
    internal FeatureLevel GetMaximumSupportedFeatureLevel(FeatureLevel[] featureLevels, int featureLevelsCount);
    public TransformNode CreateTransformNodeFromEffect(Effect effect);
    internal void CreateBlendTransform(int numInputs, BlendDescription& blendDescription, BlendTransform transform);
    internal void CreateBorderTransform(ExtendMode extendModeX, ExtendMode extendModeY, BorderTransform transform);
    internal void CreateOffsetTransform(RawPoint offset, OffsetTransform transform);
    internal void CreateBoundsAdjustmentTransform(RawRectangle outputRectangle, BoundsAdjustmentTransform transform);
    internal void LoadPixelShader(Guid shaderId, Byte[] shaderBuffer, int shaderBufferCount);
    internal void LoadVertexShader(Guid resourceId, Byte[] shaderBuffer, int shaderBufferCount);
    internal void LoadComputeShader(Guid resourceId, Byte[] shaderBuffer, int shaderBufferCount);
    public RawBool IsShaderLoaded(Guid shaderId);
    internal void CreateResourceTexture(Nullable`1<Guid> resourceId, IntPtr resourceTextureProperties, Byte[] data, Int32[] strides, int dataSize, ResourceTexture resourceTexture);
    public ResourceTexture FindResourceTexture(Guid resourceId);
    internal void CreateVertexBuffer(VertexBufferProperties vertexBufferProperties, Nullable`1<Guid> resourceId, IntPtr customVertexBufferProperties, VertexBuffer buffer);
    public VertexBuffer FindVertexBuffer(Guid resourceId);
    internal void CreateColorContext(ColorSpace space, Byte[] rofileRef, int profileSize, ColorContext colorContext);
    internal void CreateColorContextFromFilename(string filename, ColorContext colorContext);
    internal void CreateColorContextFromWicColorContext(ColorContext wicColorContext, ColorContext colorContext);
    internal Result CheckFeatureSupport(Feature feature, IntPtr featureSupportData, int featureSupportDataSize);
    public RawBool IsBufferPrecisionSupported(BufferPrecision bufferPrecision);
}
[GuidAttribute("84ab595a-fc81-4546-bacd-e8ef4d8abe7a")]
public class SharpDX.Direct2D1.EffectContext1 : EffectContext {
    public EffectContext1(IntPtr nativePtr);
    public static EffectContext1 op_Explicit(IntPtr nativePtr);
    public void CreateLookupTable3D(BufferPrecision precision, Int32[] extents, Byte[] data, int dataCount, Int32[] strides, LookupTable3D& lookupTable);
}
[GuidAttribute("577ad2a0-9fc7-4dda-8b18-dab810140052")]
public class SharpDX.Direct2D1.EffectContext2 : EffectContext1 {
    public EffectContext2(IntPtr nativePtr);
    public static EffectContext2 op_Explicit(IntPtr nativePtr);
    public void CreateColorContextFromDxgiColorSpace(ColorSpaceType colorSpace, ColorContext1 colorContext);
    public void CreateColorContextFromSimpleColorProfile(SimpleColorProfile& simpleProfile, ColorContext1 colorContext);
}
public class SharpDX.Direct2D1.EffectInputDescription : object {
    public Effect Effect;
    public int InputIndex;
    public RawRectangleF InputRectangle;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct2D1.Effects.AffineTransform2D : Effect {
    public InterpolationMode InterpolationMode { get; public set; }
    public BorderMode BorderMode { get; public set; }
    public RawMatrix3x2 TransformMatrix { get; public set; }
    public float Sharpness { get; public set; }
    public AffineTransform2D(DeviceContext context);
    public InterpolationMode get_InterpolationMode();
    public void set_InterpolationMode(InterpolationMode value);
    public BorderMode get_BorderMode();
    public void set_BorderMode(BorderMode value);
    public RawMatrix3x2 get_TransformMatrix();
    public void set_TransformMatrix(RawMatrix3x2 value);
    public float get_Sharpness();
    public void set_Sharpness(float value);
}
public class SharpDX.Direct2D1.Effects.ArithmeticComposite : Effect {
    public RawVector4 Coefficients { get; public set; }
    public bool ClampOutput { get; public set; }
    public ArithmeticComposite(DeviceContext context);
    public RawVector4 get_Coefficients();
    public void set_Coefficients(RawVector4 value);
    public bool get_ClampOutput();
    public void set_ClampOutput(bool value);
}
public class SharpDX.Direct2D1.Effects.Atlas : Effect {
    public RawVector4 InputRectangle { get; public set; }
    public RawVector4 InputPaddingRectangle { get; public set; }
    public Atlas(DeviceContext context);
    public RawVector4 get_InputRectangle();
    public void set_InputRectangle(RawVector4 value);
    public RawVector4 get_InputPaddingRectangle();
    public void set_InputPaddingRectangle(RawVector4 value);
}
public class SharpDX.Direct2D1.Effects.BitmapSource : Effect {
    private BitmapSource wicBitmapSource;
    public BitmapSource WicBitmapSource { get; public set; }
    public RawVector2 ScaleSource { get; public set; }
    public InterpolationMode InterpolationMode { get; public set; }
    public bool EnableDpiCorrection { get; public set; }
    public AlphaMode AlphaMode { get; public set; }
    public BitmapSourceOrientation Orientation { get; public set; }
    public BitmapSource(DeviceContext context);
    public BitmapSource get_WicBitmapSource();
    public void set_WicBitmapSource(BitmapSource value);
    public RawVector2 get_ScaleSource();
    public void set_ScaleSource(RawVector2 value);
    public InterpolationMode get_InterpolationMode();
    public void set_InterpolationMode(InterpolationMode value);
    public bool get_EnableDpiCorrection();
    public void set_EnableDpiCorrection(bool value);
    public AlphaMode get_AlphaMode();
    public void set_AlphaMode(AlphaMode value);
    public BitmapSourceOrientation get_Orientation();
    public void set_Orientation(BitmapSourceOrientation value);
}
public class SharpDX.Direct2D1.Effects.Blend : Effect {
    public BlendMode Mode { get; public set; }
    public Blend(DeviceContext context);
    public BlendMode get_Mode();
    public void set_Mode(BlendMode value);
}
public class SharpDX.Direct2D1.Effects.Border : Effect {
    public BorderEdgeMode EdgeModeX { get; public set; }
    public BorderEdgeMode EdgeModeY { get; public set; }
    public Border(DeviceContext context);
    public BorderEdgeMode get_EdgeModeX();
    public void set_EdgeModeX(BorderEdgeMode value);
    public BorderEdgeMode get_EdgeModeY();
    public void set_EdgeModeY(BorderEdgeMode value);
}
public class SharpDX.Direct2D1.Effects.Brightness : Effect {
    public RawVector2 WhitePoint { get; public set; }
    public RawVector2 BlackPoint { get; public set; }
    public Brightness(DeviceContext context);
    public RawVector2 get_WhitePoint();
    public void set_WhitePoint(RawVector2 value);
    public RawVector2 get_BlackPoint();
    public void set_BlackPoint(RawVector2 value);
}
public class SharpDX.Direct2D1.Effects.ColorManagement : Effect {
    private ColorContext sourceContext;
    private ColorContext destinationContext;
    public ColorContext SourceContext { get; public set; }
    public ColorManagementRenderingIntent SourceIntent { get; public set; }
    public ColorContext DestinationContext { get; public set; }
    public ColorManagementRenderingIntent DestinationIntent { get; public set; }
    public ColorManagementAlphaMode AlphaMode { get; public set; }
    public ColorManagement(DeviceContext context);
    public ColorContext get_SourceContext();
    public void set_SourceContext(ColorContext value);
    public ColorManagementRenderingIntent get_SourceIntent();
    public void set_SourceIntent(ColorManagementRenderingIntent value);
    public ColorContext get_DestinationContext();
    public void set_DestinationContext(ColorContext value);
    public ColorManagementRenderingIntent get_DestinationIntent();
    public void set_DestinationIntent(ColorManagementRenderingIntent value);
    public ColorManagementAlphaMode get_AlphaMode();
    public void set_AlphaMode(ColorManagementAlphaMode value);
}
public class SharpDX.Direct2D1.Effects.ColorMatrix : Effect {
    public RawMatrix5x4 Matrix { get; public set; }
    public AlphaMode AlphaMode { get; public set; }
    public bool ClampOutput { get; public set; }
    public ColorMatrix(DeviceContext context);
    public RawMatrix5x4 get_Matrix();
    public void set_Matrix(RawMatrix5x4 value);
    public AlphaMode get_AlphaMode();
    public void set_AlphaMode(AlphaMode value);
    public bool get_ClampOutput();
    public void set_ClampOutput(bool value);
}
public class SharpDX.Direct2D1.Effects.Composite : Effect {
    public CompositeMode Mode { get; public set; }
    public Composite(DeviceContext context);
    public CompositeMode get_Mode();
    public void set_Mode(CompositeMode value);
}
public class SharpDX.Direct2D1.Effects.ConvolveMatrix : Effect {
    private Single[] kernelMatrix;
    public float KernelUnitLength { get; public set; }
    public ConvoleMatrixScaleMode ScaleMode { get; public set; }
    public int KernelSizeX { get; public set; }
    public int KernelSizeY { get; public set; }
    public Single[] KernelMatrix { get; public set; }
    public float Divisor { get; public set; }
    public float Bias { get; public set; }
    public RawVector2 KernelOffset { get; public set; }
    public bool PreserveAlpha { get; public set; }
    public BorderMode BorderMode { get; public set; }
    public bool ClampOutput { get; public set; }
    public ConvolveMatrix(DeviceContext context);
    public float get_KernelUnitLength();
    public void set_KernelUnitLength(float value);
    public ConvoleMatrixScaleMode get_ScaleMode();
    public void set_ScaleMode(ConvoleMatrixScaleMode value);
    public int get_KernelSizeX();
    public void set_KernelSizeX(int value);
    public int get_KernelSizeY();
    public void set_KernelSizeY(int value);
    public Single[] get_KernelMatrix();
    public void set_KernelMatrix(Single[] value);
    public float get_Divisor();
    public void set_Divisor(float value);
    public float get_Bias();
    public void set_Bias(float value);
    public RawVector2 get_KernelOffset();
    public void set_KernelOffset(RawVector2 value);
    public bool get_PreserveAlpha();
    public void set_PreserveAlpha(bool value);
    public BorderMode get_BorderMode();
    public void set_BorderMode(BorderMode value);
    public bool get_ClampOutput();
    public void set_ClampOutput(bool value);
}
public class SharpDX.Direct2D1.Effects.Crop : Effect {
    public RawVector4 Rectangle { get; public set; }
    public Crop(DeviceContext context);
    public RawVector4 get_Rectangle();
    public void set_Rectangle(RawVector4 value);
}
public class SharpDX.Direct2D1.Effects.DirectionalBlur : Effect {
    public float StandardDeviation { get; public set; }
    public float Angle { get; public set; }
    public DirectionalBlurOptimization Optimization { get; public set; }
    public BorderMode BorderMode { get; public set; }
    public DirectionalBlur(DeviceContext context);
    public float get_StandardDeviation();
    public void set_StandardDeviation(float value);
    public float get_Angle();
    public void set_Angle(float value);
    public DirectionalBlurOptimization get_Optimization();
    public void set_Optimization(DirectionalBlurOptimization value);
    public BorderMode get_BorderMode();
    public void set_BorderMode(BorderMode value);
}
public class SharpDX.Direct2D1.Effects.DiscreteTransfer : Effect {
    public Single[] RedTable { get; public set; }
    public bool RedDisable { get; public set; }
    public Single[] GreenTable { get; public set; }
    public bool GreenDisable { get; public set; }
    public Single[] BlueTable { get; public set; }
    public bool BlueDisable { get; public set; }
    public Single[] AlphaTable { get; public set; }
    public bool AlphaDisable { get; public set; }
    public bool ClampOutput { get; public set; }
    public DiscreteTransfer(DeviceContext context);
    public Single[] get_RedTable();
    public void set_RedTable(Single[] value);
    public bool get_RedDisable();
    public void set_RedDisable(bool value);
    public Single[] get_GreenTable();
    public void set_GreenTable(Single[] value);
    public bool get_GreenDisable();
    public void set_GreenDisable(bool value);
    public Single[] get_BlueTable();
    public void set_BlueTable(Single[] value);
    public bool get_BlueDisable();
    public void set_BlueDisable(bool value);
    public Single[] get_AlphaTable();
    public void set_AlphaTable(Single[] value);
    public bool get_AlphaDisable();
    public void set_AlphaDisable(bool value);
    public bool get_ClampOutput();
    public void set_ClampOutput(bool value);
}
public class SharpDX.Direct2D1.Effects.DisplacementMap : Effect {
    public float Scale { get; public set; }
    public ChannelSelector XChannelSelect { get; public set; }
    public ChannelSelector YChannelSelect { get; public set; }
    public DisplacementMap(DeviceContext context);
    public float get_Scale();
    public void set_Scale(float value);
    public ChannelSelector get_XChannelSelect();
    public void set_XChannelSelect(ChannelSelector value);
    public ChannelSelector get_YChannelSelect();
    public void set_YChannelSelect(ChannelSelector value);
}
public class SharpDX.Direct2D1.Effects.DistantDiffuse : Effect {
    public float Azimuth { get; public set; }
    public float Elevation { get; public set; }
    public float DiffuseConstant { get; public set; }
    public float SurfaceScale { get; public set; }
    public RawVector3 Color { get; public set; }
    public RawVector2 KernelUnitLength { get; public set; }
    public DistantDiffuseScaleMode ScaleMode { get; public set; }
    public DistantDiffuse(DeviceContext context);
    public float get_Azimuth();
    public void set_Azimuth(float value);
    public float get_Elevation();
    public void set_Elevation(float value);
    public float get_DiffuseConstant();
    public void set_DiffuseConstant(float value);
    public float get_SurfaceScale();
    public void set_SurfaceScale(float value);
    public RawVector3 get_Color();
    public void set_Color(RawVector3 value);
    public RawVector2 get_KernelUnitLength();
    public void set_KernelUnitLength(RawVector2 value);
    public DistantDiffuseScaleMode get_ScaleMode();
    public void set_ScaleMode(DistantDiffuseScaleMode value);
}
public class SharpDX.Direct2D1.Effects.DistantSpecular : Effect {
    public float Azimuth { get; public set; }
    public float Elevation { get; public set; }
    public float SpecularExponent { get; public set; }
    public float SpecularConstant { get; public set; }
    public float SurfaceScale { get; public set; }
    public RawVector3 Color { get; public set; }
    public RawVector2 KernelUnitLength { get; public set; }
    public DistantSpecularScaleMode ScaleMode { get; public set; }
    public DistantSpecular(DeviceContext context);
    public float get_Azimuth();
    public void set_Azimuth(float value);
    public float get_Elevation();
    public void set_Elevation(float value);
    public float get_SpecularExponent();
    public void set_SpecularExponent(float value);
    public float get_SpecularConstant();
    public void set_SpecularConstant(float value);
    public float get_SurfaceScale();
    public void set_SurfaceScale(float value);
    public RawVector3 get_Color();
    public void set_Color(RawVector3 value);
    public RawVector2 get_KernelUnitLength();
    public void set_KernelUnitLength(RawVector2 value);
    public DistantSpecularScaleMode get_ScaleMode();
    public void set_ScaleMode(DistantSpecularScaleMode value);
}
public class SharpDX.Direct2D1.Effects.DpiCompensation : Effect {
    public DpiCompensationInterpolationMode InterpolationMode { get; public set; }
    public BorderMode BorderMode { get; public set; }
    public float InputDpi { get; public set; }
    public DpiCompensation(DeviceContext context);
    public DpiCompensationInterpolationMode get_InterpolationMode();
    public void set_InterpolationMode(DpiCompensationInterpolationMode value);
    public BorderMode get_BorderMode();
    public void set_BorderMode(BorderMode value);
    public float get_InputDpi();
    public void set_InputDpi(float value);
}
public class SharpDX.Direct2D1.Effects.Flood : Effect {
    public RawColor4 Color { get; public set; }
    public Flood(DeviceContext context);
    public RawColor4 get_Color();
    public void set_Color(RawColor4 value);
}
public class SharpDX.Direct2D1.Effects.GammaTransfer : Effect {
    public float RedAmplitude { get; public set; }
    public float RedExponent { get; public set; }
    public float RedOffset { get; public set; }
    public bool RedDisable { get; public set; }
    public float GreenAmplitude { get; public set; }
    public float GreenExponent { get; public set; }
    public float GreenOffset { get; public set; }
    public bool GreenDisable { get; public set; }
    public float BlueAmplitude { get; public set; }
    public float BlueExponent { get; public set; }
    public float BlueOffset { get; public set; }
    public bool BlueDisable { get; public set; }
    public float AlphaAmplitude { get; public set; }
    public float AlphaExponent { get; public set; }
    public float AlphaOffset { get; public set; }
    public bool AlphaDisable { get; public set; }
    public bool ClampOutput { get; public set; }
    public GammaTransfer(DeviceContext context);
    public float get_RedAmplitude();
    public void set_RedAmplitude(float value);
    public float get_RedExponent();
    public void set_RedExponent(float value);
    public float get_RedOffset();
    public void set_RedOffset(float value);
    public bool get_RedDisable();
    public void set_RedDisable(bool value);
    public float get_GreenAmplitude();
    public void set_GreenAmplitude(float value);
    public float get_GreenExponent();
    public void set_GreenExponent(float value);
    public float get_GreenOffset();
    public void set_GreenOffset(float value);
    public bool get_GreenDisable();
    public void set_GreenDisable(bool value);
    public float get_BlueAmplitude();
    public void set_BlueAmplitude(float value);
    public float get_BlueExponent();
    public void set_BlueExponent(float value);
    public float get_BlueOffset();
    public void set_BlueOffset(float value);
    public bool get_BlueDisable();
    public void set_BlueDisable(bool value);
    public float get_AlphaAmplitude();
    public void set_AlphaAmplitude(float value);
    public float get_AlphaExponent();
    public void set_AlphaExponent(float value);
    public float get_AlphaOffset();
    public void set_AlphaOffset(float value);
    public bool get_AlphaDisable();
    public void set_AlphaDisable(bool value);
    public bool get_ClampOutput();
    public void set_ClampOutput(bool value);
}
public class SharpDX.Direct2D1.Effects.GaussianBlur : Effect {
    public float StandardDeviation { get; public set; }
    public GaussianBlurOptimization Optimization { get; public set; }
    public BorderMode BorderMode { get; public set; }
    public GaussianBlur(DeviceContext context);
    public float get_StandardDeviation();
    public void set_StandardDeviation(float value);
    public GaussianBlurOptimization get_Optimization();
    public void set_Optimization(GaussianBlurOptimization value);
    public BorderMode get_BorderMode();
    public void set_BorderMode(BorderMode value);
}
public class SharpDX.Direct2D1.Effects.Histogram : Effect {
    public int NumBins { get; public set; }
    public ChannelSelector ChannelSelect { get; public set; }
    public Single[] HistogramOutput { get; }
    public Histogram(DeviceContext context);
    public int get_NumBins();
    public void set_NumBins(int value);
    public ChannelSelector get_ChannelSelect();
    public void set_ChannelSelect(ChannelSelector value);
    public Single[] get_HistogramOutput();
}
public class SharpDX.Direct2D1.Effects.HueRotation : Effect {
    public float Angle { get; public set; }
    public HueRotation(DeviceContext context);
    public float get_Angle();
    public void set_Angle(float value);
}
public class SharpDX.Direct2D1.Effects.LinearTransfer : Effect {
    public float RedYIntercept { get; public set; }
    public float RedSlope { get; public set; }
    public bool RedDisable { get; public set; }
    public float GreenYIntercept { get; public set; }
    public float GreenSlope { get; public set; }
    public bool GreenDisable { get; public set; }
    public float BlueYIntercept { get; public set; }
    public float BlueSlope { get; public set; }
    public bool BlueDisable { get; public set; }
    public float AlphaYIntercept { get; public set; }
    public float AlphaSlope { get; public set; }
    public bool AlphaDisable { get; public set; }
    public bool ClampOutput { get; public set; }
    public LinearTransfer(DeviceContext context);
    public float get_RedYIntercept();
    public void set_RedYIntercept(float value);
    public float get_RedSlope();
    public void set_RedSlope(float value);
    public bool get_RedDisable();
    public void set_RedDisable(bool value);
    public float get_GreenYIntercept();
    public void set_GreenYIntercept(float value);
    public float get_GreenSlope();
    public void set_GreenSlope(float value);
    public bool get_GreenDisable();
    public void set_GreenDisable(bool value);
    public float get_BlueYIntercept();
    public void set_BlueYIntercept(float value);
    public float get_BlueSlope();
    public void set_BlueSlope(float value);
    public bool get_BlueDisable();
    public void set_BlueDisable(bool value);
    public float get_AlphaYIntercept();
    public void set_AlphaYIntercept(float value);
    public float get_AlphaSlope();
    public void set_AlphaSlope(float value);
    public bool get_AlphaDisable();
    public void set_AlphaDisable(bool value);
    public bool get_ClampOutput();
    public void set_ClampOutput(bool value);
}
public class SharpDX.Direct2D1.Effects.LuminanceToAlpha : Effect {
    public LuminanceToAlpha(DeviceContext context);
}
public class SharpDX.Direct2D1.Effects.Morphology : Effect {
    public MorphologyMode Mode { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public Morphology(DeviceContext context);
    public MorphologyMode get_Mode();
    public void set_Mode(MorphologyMode value);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
}
[CompilerGeneratedAttribute]
internal class SharpDX.Direct2D1.Effects.NamespaceDoc : object {
}
public class SharpDX.Direct2D1.Effects.OpacityMetadata : Effect {
    public RawVector4 OpaqueRectangle { get; public set; }
    public OpacityMetadata(DeviceContext deviceContext);
    public RawVector4 get_OpaqueRectangle();
    public void set_OpaqueRectangle(RawVector4 value);
}
public class SharpDX.Direct2D1.Effects.PerspectiveTransform3D : Effect {
    public PerspectiveTransform3DInteroplationMode InterpolationMode { get; public set; }
    public BorderMode BorderMode { get; public set; }
    public float Depth { get; public set; }
    public RawVector2 PerspectiveOrigin { get; public set; }
    public RawVector3 LocalOffset { get; public set; }
    public RawVector3 GlobalOffset { get; public set; }
    public RawVector3 RotationOrigin { get; public set; }
    public RawVector3 Rotation { get; public set; }
    public PerspectiveTransform3D(DeviceContext deviceContext);
    public PerspectiveTransform3DInteroplationMode get_InterpolationMode();
    public void set_InterpolationMode(PerspectiveTransform3DInteroplationMode value);
    public BorderMode get_BorderMode();
    public void set_BorderMode(BorderMode value);
    public float get_Depth();
    public void set_Depth(float value);
    public RawVector2 get_PerspectiveOrigin();
    public void set_PerspectiveOrigin(RawVector2 value);
    public RawVector3 get_LocalOffset();
    public void set_LocalOffset(RawVector3 value);
    public RawVector3 get_GlobalOffset();
    public void set_GlobalOffset(RawVector3 value);
    public RawVector3 get_RotationOrigin();
    public void set_RotationOrigin(RawVector3 value);
    public RawVector3 get_Rotation();
    public void set_Rotation(RawVector3 value);
}
public class SharpDX.Direct2D1.Effects.PointDiffuse : Effect {
    public RawVector3 LightPosition { get; public set; }
    public float DiffuseConstant { get; public set; }
    public float SurfaceScale { get; public set; }
    public RawVector3 Color { get; public set; }
    public RawVector2 KernelUnitLength { get; public set; }
    public PointDiffuseScaleMode ScaleMode { get; public set; }
    public PointDiffuse(DeviceContext context);
    public RawVector3 get_LightPosition();
    public void set_LightPosition(RawVector3 value);
    public float get_DiffuseConstant();
    public void set_DiffuseConstant(float value);
    public float get_SurfaceScale();
    public void set_SurfaceScale(float value);
    public RawVector3 get_Color();
    public void set_Color(RawVector3 value);
    public RawVector2 get_KernelUnitLength();
    public void set_KernelUnitLength(RawVector2 value);
    public PointDiffuseScaleMode get_ScaleMode();
    public void set_ScaleMode(PointDiffuseScaleMode value);
}
public class SharpDX.Direct2D1.Effects.PointSpecular : Effect {
    public RawVector3 LightPosition { get; public set; }
    public float SpecularExponent { get; public set; }
    public float SpecularConstant { get; public set; }
    public float SurfaceScale { get; public set; }
    public RawVector3 Color { get; public set; }
    public RawVector2 KernelUnitLength { get; public set; }
    public PointSpecularScaleMode ScaleMode { get; public set; }
    public PointSpecular(DeviceContext context);
    public RawVector3 get_LightPosition();
    public void set_LightPosition(RawVector3 value);
    public float get_SpecularExponent();
    public void set_SpecularExponent(float value);
    public float get_SpecularConstant();
    public void set_SpecularConstant(float value);
    public float get_SurfaceScale();
    public void set_SurfaceScale(float value);
    public RawVector3 get_Color();
    public void set_Color(RawVector3 value);
    public RawVector2 get_KernelUnitLength();
    public void set_KernelUnitLength(RawVector2 value);
    public PointSpecularScaleMode get_ScaleMode();
    public void set_ScaleMode(PointSpecularScaleMode value);
}
public class SharpDX.Direct2D1.Effects.Premultiply : Effect {
    public Premultiply(DeviceContext context);
}
public class SharpDX.Direct2D1.Effects.Saturation : Effect {
    public float Value { get; public set; }
    public Saturation(DeviceContext context);
    public float get_Value();
    public void set_Value(float value);
}
public class SharpDX.Direct2D1.Effects.Scale : Effect {
    public RawVector2 ScaleAmount { get; public set; }
    public RawVector2 CenterPoint { get; public set; }
    public BorderMode BorderMode { get; public set; }
    public float Sharpness { get; public set; }
    public InterpolationMode InterpolationMode { get; public set; }
    public Scale(DeviceContext context);
    public RawVector2 get_ScaleAmount();
    public void set_ScaleAmount(RawVector2 value);
    public RawVector2 get_CenterPoint();
    public void set_CenterPoint(RawVector2 value);
    public BorderMode get_BorderMode();
    public void set_BorderMode(BorderMode value);
    public float get_Sharpness();
    public void set_Sharpness(float value);
    public InterpolationMode get_InterpolationMode();
    public void set_InterpolationMode(InterpolationMode value);
}
public class SharpDX.Direct2D1.Effects.Shadow : Effect {
    public float BlurStandardDeviation { get; public set; }
    public RawColor4 Color { get; public set; }
    public ShadowOptimization Optimization { get; public set; }
    public Shadow(DeviceContext context);
    public float get_BlurStandardDeviation();
    public void set_BlurStandardDeviation(float value);
    public RawColor4 get_Color();
    public void set_Color(RawColor4 value);
    public ShadowOptimization get_Optimization();
    public void set_Optimization(ShadowOptimization value);
}
public class SharpDX.Direct2D1.Effects.SpotDiffuse : Effect {
    public RawVector3 LightPosition { get; public set; }
    public RawVector3 PointsAt { get; public set; }
    public float Focus { get; public set; }
    public float LimitingConeAngle { get; public set; }
    public float DiffuseConstant { get; public set; }
    public float SurfaceScale { get; public set; }
    public RawVector3 Color { get; public set; }
    public RawVector2 KernelUnitLength { get; public set; }
    public SpotDiffuseScaleMode ScaleMode { get; public set; }
    public SpotDiffuse(DeviceContext context);
    public RawVector3 get_LightPosition();
    public void set_LightPosition(RawVector3 value);
    public RawVector3 get_PointsAt();
    public void set_PointsAt(RawVector3 value);
    public float get_Focus();
    public void set_Focus(float value);
    public float get_LimitingConeAngle();
    public void set_LimitingConeAngle(float value);
    public float get_DiffuseConstant();
    public void set_DiffuseConstant(float value);
    public float get_SurfaceScale();
    public void set_SurfaceScale(float value);
    public RawVector3 get_Color();
    public void set_Color(RawVector3 value);
    public RawVector2 get_KernelUnitLength();
    public void set_KernelUnitLength(RawVector2 value);
    public SpotDiffuseScaleMode get_ScaleMode();
    public void set_ScaleMode(SpotDiffuseScaleMode value);
}
public class SharpDX.Direct2D1.Effects.SpotSpecular : Effect {
    public RawVector3 LightPosition { get; public set; }
    public RawVector3 PointsAt { get; public set; }
    public float Focus { get; public set; }
    public float LimitingConeAngle { get; public set; }
    public float SpecularExponent { get; public set; }
    public float SpecularConstant { get; public set; }
    public float SurfaceScale { get; public set; }
    public RawVector3 Color { get; public set; }
    public RawVector2 KernelUnitLength { get; public set; }
    public SpotSpecularScaleMode ScaleMode { get; public set; }
    public SpotSpecular(DeviceContext context);
    public RawVector3 get_LightPosition();
    public void set_LightPosition(RawVector3 value);
    public RawVector3 get_PointsAt();
    public void set_PointsAt(RawVector3 value);
    public float get_Focus();
    public void set_Focus(float value);
    public float get_LimitingConeAngle();
    public void set_LimitingConeAngle(float value);
    public float get_SpecularExponent();
    public void set_SpecularExponent(float value);
    public float get_SpecularConstant();
    public void set_SpecularConstant(float value);
    public float get_SurfaceScale();
    public void set_SurfaceScale(float value);
    public RawVector3 get_Color();
    public void set_Color(RawVector3 value);
    public RawVector2 get_KernelUnitLength();
    public void set_KernelUnitLength(RawVector2 value);
    public SpotSpecularScaleMode get_ScaleMode();
    public void set_ScaleMode(SpotSpecularScaleMode value);
}
public class SharpDX.Direct2D1.Effects.TableTransfer : Effect {
    public Single[] RedTable { get; public set; }
    public bool RedDisable { get; public set; }
    public Single[] GreenTable { get; public set; }
    public bool GreenDisable { get; public set; }
    public Single[] BlueTable { get; public set; }
    public bool BlueDisable { get; public set; }
    public Single[] AlphaTable { get; public set; }
    public bool AlphaDisable { get; public set; }
    public bool ClampOutput { get; public set; }
    public TableTransfer(DeviceContext context);
    public Single[] get_RedTable();
    public void set_RedTable(Single[] value);
    public bool get_RedDisable();
    public void set_RedDisable(bool value);
    public Single[] get_GreenTable();
    public void set_GreenTable(Single[] value);
    public bool get_GreenDisable();
    public void set_GreenDisable(bool value);
    public Single[] get_BlueTable();
    public void set_BlueTable(Single[] value);
    public bool get_BlueDisable();
    public void set_BlueDisable(bool value);
    public Single[] get_AlphaTable();
    public void set_AlphaTable(Single[] value);
    public bool get_AlphaDisable();
    public void set_AlphaDisable(bool value);
    public bool get_ClampOutput();
    public void set_ClampOutput(bool value);
}
public class SharpDX.Direct2D1.Effects.Tile : Effect {
    public RawVector4 Rectangle { get; public set; }
    public Tile(DeviceContext context);
    public RawVector4 get_Rectangle();
    public void set_Rectangle(RawVector4 value);
}
public class SharpDX.Direct2D1.Effects.Transform3D : Effect {
    public InterpolationMode InterpolationMode { get; public set; }
    public BorderMode BorderMode { get; public set; }
    public RawMatrix TransformMatrix { get; public set; }
    public Transform3D(DeviceContext context);
    public InterpolationMode get_InterpolationMode();
    public void set_InterpolationMode(InterpolationMode value);
    public BorderMode get_BorderMode();
    public void set_BorderMode(BorderMode value);
    public RawMatrix get_TransformMatrix();
    public void set_TransformMatrix(RawMatrix value);
}
public class SharpDX.Direct2D1.Effects.Turbulence : Effect {
    public RawVector2 Offset { get; public set; }
    public RawVector2 BaseFrequency { get; public set; }
    public int OctaveCount { get; public set; }
    public int Seed { get; public set; }
    public TurbulenceNoise Noise { get; public set; }
    public bool Stitchable { get; public set; }
    public Turbulence(DeviceContext context);
    public RawVector2 get_Offset();
    public void set_Offset(RawVector2 value);
    public RawVector2 get_BaseFrequency();
    public void set_BaseFrequency(RawVector2 value);
    public int get_OctaveCount();
    public void set_OctaveCount(int value);
    public int get_Seed();
    public void set_Seed(int value);
    public TurbulenceNoise get_Noise();
    public void set_Noise(TurbulenceNoise value);
    public bool get_Stitchable();
    public void set_Stitchable(bool value);
}
public class SharpDX.Direct2D1.Effects.UnPremultiply : Effect {
    public UnPremultiply(DeviceContext context);
}
public class SharpDX.Direct2D1.Effects.YCbCr : Effect {
    public YcbcrChromaSubSampling ChromaSubSampling { get; public set; }
    public RawMatrix3x2 Transform { get; public set; }
    public YcbcrInterpolationMode InterpolationMode { get; public set; }
    public YCbCr(DeviceContext context);
    public YcbcrChromaSubSampling get_ChromaSubSampling();
    public void set_ChromaSubSampling(YcbcrChromaSubSampling value);
    public RawMatrix3x2 get_Transform();
    public void set_Transform(RawMatrix3x2 value);
    public YcbcrInterpolationMode get_InterpolationMode();
    public void set_InterpolationMode(YcbcrInterpolationMode value);
}
public class SharpDX.Direct2D1.Ellipse : ValueType {
    public RawVector2 Point;
    public float RadiusX;
    public float RadiusY;
    public Ellipse(RawVector2 center, float radiusX, float radiusY);
}
[GuidAttribute("2cd906a4-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.EllipseGeometry : Geometry {
    public Ellipse Ellipse { get; }
    public EllipseGeometry(Factory factory, Ellipse ellipse);
    public EllipseGeometry(IntPtr nativePtr);
    public static EllipseGeometry op_Explicit(IntPtr nativePtr);
    public Ellipse get_Ellipse();
    internal void GetEllipse(Ellipse& ellipse);
}
public enum SharpDX.Direct2D1.EmbossProperty : Enum {
    public int value__;
    public static EmbossProperty Height;
    public static EmbossProperty Direction;
}
public enum SharpDX.Direct2D1.ExposureProperty : Enum {
    public int value__;
    public static ExposureProperty ExposureValue;
}
public enum SharpDX.Direct2D1.ExtendMode : Enum {
    public int value__;
    public static ExtendMode Clamp;
    public static ExtendMode Wrap;
    public static ExtendMode Mirror;
}
[GuidAttribute("06152247-6f50-465a-9245-118bfd3b6007")]
public class SharpDX.Direct2D1.Factory : ComObject {
    public Size2F DesktopDpi { get; }
    public Factory(FactoryType factoryType);
    public Factory(FactoryType factoryType, DebugLevel debugLevel);
    public Factory(IntPtr nativePtr);
    public Size2F get_DesktopDpi();
    public static Factory op_Explicit(IntPtr nativePtr);
    public void ReloadSystemMetrics();
    internal void GetDesktopDpi(Single& dpiX, Single& dpiY);
    internal void CreateRectangleGeometry(RawRectangleF rectangle, RectangleGeometry rectangleGeometry);
    internal void CreateRoundedRectangleGeometry(RoundedRectangle& roundedRectangle, RoundedRectangleGeometry roundedRectangleGeometry);
    internal void CreateEllipseGeometry(Ellipse ellipse, EllipseGeometry ellipseGeometry);
    internal void CreateGeometryGroup(FillMode fillMode, Geometry[] geometries, int geometriesCount, GeometryGroup geometryGroup);
    internal void CreateTransformedGeometry(Geometry sourceGeometry, RawMatrix3x2& transform, TransformedGeometry transformedGeometry);
    internal void CreatePathGeometry(PathGeometry athGeometryRef);
    internal void CreateStrokeStyle(StrokeStyleProperties& strokeStyleProperties, Single[] dashes, int dashesCount, StrokeStyle strokeStyle);
    internal void CreateDrawingStateBlock(Nullable`1<DrawingStateDescription> drawingStateDescription, RenderingParams textRenderingParams, DrawingStateBlock drawingStateBlock);
    internal void CreateWicBitmapRenderTarget(Bitmap target, RenderTargetProperties& renderTargetProperties, RenderTarget renderTarget);
    internal void CreateHwndRenderTarget(RenderTargetProperties& renderTargetProperties, HwndRenderTargetProperties& hwndRenderTargetProperties, WindowRenderTarget hwndRenderTarget);
    internal void CreateDxgiSurfaceRenderTarget(Surface dxgiSurface, RenderTargetProperties& renderTargetProperties, RenderTarget renderTarget);
    internal void CreateDCRenderTarget(RenderTargetProperties& renderTargetProperties, DeviceContextRenderTarget dcRenderTarget);
    internal void CreateGeometryGroup(FillMode fillMode, ComArray`1<Geometry> geometries, int geometriesCount, GeometryGroup geometryGroup);
    private void CreateGeometryGroup(FillMode fillMode, IntPtr geometries, int geometriesCount, IntPtr geometryGroup);
}
[GuidAttribute("bb12d362-daee-4b9a-aa1d-14ba401cfa1f")]
public class SharpDX.Direct2D1.Factory1 : Factory {
    private Dictionary`2<Guid, CustomEffectFactory> registeredEffects;
    public Guid[] RegisteredEffects { get; }
    public Factory1(FactoryType factoryType);
    public Factory1(FactoryType factoryType, DebugLevel debugLevel);
    public Factory1(IntPtr nativePtr);
    public Guid[] get_RegisteredEffects();
    public void RegisterEffect(Func`1<T> effectFactory);
    public void RegisterEffect(Func`1<T> effectFactory, Guid effectId);
    public void RegisterEffect();
    public void RegisterEffect(Guid effectId);
    public void UnRegisterEffect();
    public static Factory1 op_Explicit(IntPtr nativePtr);
    internal void CreateDevice(Device dxgiDevice, Device d2dDevice);
    internal void CreateStrokeStyle(StrokeStyleProperties1& strokeStyleProperties, Single[] dashes, int dashesCount, StrokeStyle1 strokeStyle);
    internal void CreatePathGeometry(PathGeometry1 athGeometryRef);
    internal void CreateDrawingStateBlock(Nullable`1<DrawingStateDescription1> drawingStateDescription, RenderingParams textRenderingParams, DrawingStateBlock1 drawingStateBlock);
    internal void CreateGdiMetafile(IStream metafileStream, GdiMetafile& metafile);
    internal void RegisterEffectFromStream(Guid classId, IStream ropertyXmlRef, PropertyBinding[] bindings, int bindingsCount, FunctionCallback effectFactory);
    internal void RegisterEffectFromString(Guid classId, string ropertyXmlRef, PropertyBinding[] bindings, int bindingsCount, FunctionCallback effectFactory);
    internal void UnregisterEffect(Guid classId);
    internal void GetRegisteredEffects(Guid[] effects, int effectsCount, Int32& effectsReturned, Int32& effectsRegistered);
    public Properties GetEffectProperties(Guid effectId);
}
[GuidAttribute("94f81a73-9212-4376-9c58-b16a3a0d3992")]
public class SharpDX.Direct2D1.Factory2 : Factory1 {
    public Factory2(FactoryType factoryType);
    public Factory2(FactoryType factoryType, DebugLevel debugLevel);
    public Factory2(IntPtr nativePtr);
    public static Factory2 op_Explicit(IntPtr nativePtr);
    internal void CreateDevice(Device dxgiDevice, Device1 d2dDevice1);
}
[GuidAttribute("0869759f-4f00-413f-b03e-2bda45404d0f")]
public class SharpDX.Direct2D1.Factory3 : Factory2 {
    public Factory3(IntPtr nativePtr);
    public static Factory3 op_Explicit(IntPtr nativePtr);
    internal void CreateDevice(Device dxgiDevice, Device2 d2dDevice2);
}
[GuidAttribute("bd4ec2d2-0662-4bee-ba8e-6f29f032e096")]
public class SharpDX.Direct2D1.Factory4 : Factory3 {
    public Factory4(IntPtr nativePtr);
    public static Factory4 op_Explicit(IntPtr nativePtr);
    internal void CreateDevice(Device dxgiDevice, Device3 d2dDevice3);
}
[GuidAttribute("c4349994-838e-4b0f-8cab-44997d9eeacc")]
public class SharpDX.Direct2D1.Factory5 : Factory4 {
    public Factory5(IntPtr nativePtr);
    public static Factory5 op_Explicit(IntPtr nativePtr);
    internal void CreateDevice(Device dxgiDevice, Device4 d2dDevice4);
}
[GuidAttribute("f9976f46-f642-44c1-97ca-da32ea2a2635")]
public class SharpDX.Direct2D1.Factory6 : Factory5 {
    public Factory6(IntPtr nativePtr);
    public static Factory6 op_Explicit(IntPtr nativePtr);
    internal void CreateDevice(Device dxgiDevice, Device5 d2dDevice5);
}
public class SharpDX.Direct2D1.FactoryOptions : ValueType {
    public DebugLevel DebugLevel;
}
public enum SharpDX.Direct2D1.FactoryType : Enum {
    public int value__;
    public static FactoryType SingleThreaded;
    public static FactoryType MultiThreaded;
}
public enum SharpDX.Direct2D1.Feature : Enum {
    public int value__;
    public static Feature Doubles;
    public static Feature D3D10XHardwareOptions;
}
internal class SharpDX.Direct2D1.FeatureDataD3D10XHardwareOptions : ValueType {
    public RawBool ComputeShadersPlusRawAndStructuredBuffersViaShader4X;
}
internal class SharpDX.Direct2D1.FeatureDataDoubles : ValueType {
    public RawBool DoublePrecisionFloatShaderOps;
}
public enum SharpDX.Direct2D1.FeatureLevel : Enum {
    public int value__;
    public static FeatureLevel Level_DEFAULT;
    public static FeatureLevel Level_9;
    public static FeatureLevel Level_10;
}
public enum SharpDX.Direct2D1.FigureBegin : Enum {
    public int value__;
    public static FigureBegin Filled;
    public static FigureBegin Hollow;
}
public enum SharpDX.Direct2D1.FigureEnd : Enum {
    public int value__;
    public static FigureEnd Open;
    public static FigureEnd Closed;
}
public enum SharpDX.Direct2D1.FillMode : Enum {
    public int value__;
    public static FillMode Alternate;
    public static FillMode Winding;
}
public enum SharpDX.Direct2D1.Filter : Enum {
    public int value__;
    public static Filter MinimumMagMipPoint;
    public static Filter MinimumMagPointMipLinear;
    public static Filter MinimumPointMagLinearMipPoint;
    public static Filter MinimumPointMagMipLinear;
    public static Filter MinimumLinearMagMipPoint;
    public static Filter MinimumLinearMagPointMipLinear;
    public static Filter MinimumMagLinearMipPoint;
    public static Filter MinimumMagMipLinear;
    public static Filter Anisotropic;
}
public enum SharpDX.Direct2D1.FloodProperties : Enum {
    public int value__;
    public static FloodProperties Color;
}
public enum SharpDX.Direct2D1.Gamma : Enum {
    public int value__;
    public static Gamma StandardRgb;
    public static Gamma Linear;
}
public enum SharpDX.Direct2D1.Gamma1 : Enum {
    public int value__;
    public static Gamma1 G22;
    public static Gamma1 G10;
    public static Gamma1 G2084;
}
public enum SharpDX.Direct2D1.GammaTransferProperties : Enum {
    public int value__;
    public static GammaTransferProperties RedAmplitude;
    public static GammaTransferProperties RedExponent;
    public static GammaTransferProperties RedOffset;
    public static GammaTransferProperties RedDisable;
    public static GammaTransferProperties GreenAmplitude;
    public static GammaTransferProperties GreenExponent;
    public static GammaTransferProperties GreenOffset;
    public static GammaTransferProperties GreenDisable;
    public static GammaTransferProperties BlueAmplitude;
    public static GammaTransferProperties BlueExponent;
    public static GammaTransferProperties BlueOffset;
    public static GammaTransferProperties BlueDisable;
    public static GammaTransferProperties AlphaAmplitude;
    public static GammaTransferProperties AlphaExponent;
    public static GammaTransferProperties AlphaOffset;
    public static GammaTransferProperties AlphaDisable;
    public static GammaTransferProperties ClampOutput;
}
public enum SharpDX.Direct2D1.GaussianBlurOptimization : Enum {
    public int value__;
    public static GaussianBlurOptimization Speed;
    public static GaussianBlurOptimization Balanced;
    public static GaussianBlurOptimization Quality;
}
public enum SharpDX.Direct2D1.GaussianBlurProperties : Enum {
    public int value__;
    public static GaussianBlurProperties StandardDeviation;
    public static GaussianBlurProperties Optimization;
    public static GaussianBlurProperties BorderMode;
}
public class SharpDX.Direct2D1.GdiInteropRenderTarget : object {
}
[GuidAttribute("2f543dc3-cfc1-4211-864f-cfd91c6f3395")]
public class SharpDX.Direct2D1.GdiMetafile : Resource {
    public RawRectangleF Bounds { get; }
    public GdiMetafile(IntPtr nativePtr);
    public static GdiMetafile op_Explicit(IntPtr nativePtr);
    public RawRectangleF get_Bounds();
    public void Stream(GdiMetafileSink sink);
    internal void GetBounds(RawRectangleF& bounds);
}
[GuidAttribute("2e69f9e8-dd3f-4bf9-95ba-c04f49d788df")]
public class SharpDX.Direct2D1.GdiMetafile1 : GdiMetafile {
    public RawRectangleF SourceBounds { get; }
    public GdiMetafile1(IntPtr nativePtr);
    public static GdiMetafile1 op_Explicit(IntPtr nativePtr);
    public RawRectangleF get_SourceBounds();
    public void GetDpi(Single& dpiX, Single& dpiY);
    internal void GetSourceBounds(RawRectangleF& bounds);
}
[GuidAttribute("82237326-8111-4f7c-bcf4-b5c1175564fe")]
public interface SharpDX.Direct2D1.GdiMetafileSink {
}
[GuidAttribute("fd0ecb6b-91e6-411e-8655-395e760f91b4")]
public interface SharpDX.Direct2D1.GdiMetafileSink1 {
}
[GuidAttribute("fd0ecb6b-91e6-411e-8655-395e760f91b4")]
internal class SharpDX.Direct2D1.GdiMetafileSink1Native : GdiMetafileSinkNative {
    public GdiMetafileSink1Native(IntPtr nativePtr);
    public static GdiMetafileSink1Native op_Explicit(IntPtr nativePtr);
    internal void ProcessRecord_(int recordType, IntPtr recordData, int recordDataSize, int flags);
}
[GuidAttribute("82237326-8111-4f7c-bcf4-b5c1175564fe")]
internal class SharpDX.Direct2D1.GdiMetafileSinkNative : ComObject {
    public GdiMetafileSinkNative(IntPtr nativePtr);
    public static GdiMetafileSinkNative op_Explicit(IntPtr nativePtr);
    internal void ProcessRecord_(int recordType, IntPtr recordData, int recordDataSize);
}
[GuidAttribute("2cd906a1-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.Geometry : Resource {
    private float _flatteningTolerance;
    public static float DefaultFlatteningTolerance;
    public float FlatteningTolerance { get; public set; }
    public Geometry(IntPtr nativePtr);
    public float get_FlatteningTolerance();
    public void set_FlatteningTolerance(float value);
    public void Combine(Geometry inputGeometry, CombineMode combineMode, GeometrySink geometrySink);
    public void Combine(Geometry inputGeometry, CombineMode combineMode, float flatteningTolerance, GeometrySink geometrySink);
    public GeometryRelation Compare(Geometry inputGeometry);
    public GeometryRelation Compare(Geometry inputGeometry, float flatteningTolerance);
    public float ComputeArea();
    public float ComputeArea(float flatteningTolerance);
    public float ComputeLength();
    public float ComputeLength(float flatteningTolerance);
    public RawVector2 ComputePointAtLength(float length, RawVector2& unitTangentVector);
    public RawVector2 ComputePointAtLength(float length, float flatteningTolerance, RawVector2& unitTangentVector);
    public bool FillContainsPoint(RawPoint point);
    public bool FillContainsPoint(RawVector2 point);
    public bool FillContainsPoint(RawPoint point, float flatteningTolerance);
    public bool FillContainsPoint(RawVector2 point, float flatteningTolerance);
    public bool FillContainsPoint(RawPoint point, RawMatrix3x2 worldTransform, float flatteningTolerance);
    public RawRectangleF GetBounds();
    public RawRectangleF GetWidenedBounds(float strokeWidth);
    public RawRectangleF GetWidenedBounds(float strokeWidth, float flatteningTolerance);
    public RawRectangleF GetWidenedBounds(float strokeWidth, StrokeStyle strokeStyle, float flatteningTolerance);
    public void Outline(GeometrySink geometrySink);
    public void Outline(float flatteningTolerance, GeometrySink geometrySink);
    public void Simplify(GeometrySimplificationOption simplificationOption, SimplifiedGeometrySink geometrySink);
    public void Simplify(GeometrySimplificationOption simplificationOption, float flatteningTolerance, SimplifiedGeometrySink geometrySink);
    public bool StrokeContainsPoint(RawPoint point, float strokeWidth);
    public bool StrokeContainsPoint(RawVector2 point, float strokeWidth);
    public bool StrokeContainsPoint(RawPoint point, float strokeWidth, StrokeStyle strokeStyle);
    public bool StrokeContainsPoint(RawVector2 point, float strokeWidth, StrokeStyle strokeStyle);
    public bool StrokeContainsPoint(RawPoint point, float strokeWidth, StrokeStyle strokeStyle, RawMatrix3x2 transform);
    public bool StrokeContainsPoint(RawVector2 point, float strokeWidth, StrokeStyle strokeStyle, RawMatrix3x2 transform);
    public bool StrokeContainsPoint(RawPoint point, float strokeWidth, StrokeStyle strokeStyle, RawMatrix3x2 transform, float flatteningTolerance);
    public void Tessellate(TessellationSink tessellationSink);
    public void Tessellate(float flatteningTolerance, TessellationSink tessellationSink);
    public void Widen(float strokeWidth, GeometrySink geometrySink);
    public void Widen(float strokeWidth, float flatteningTolerance, GeometrySink geometrySink);
    public void Widen(float strokeWidth, StrokeStyle strokeStyle, float flatteningTolerance, GeometrySink geometrySink);
    public static Geometry op_Explicit(IntPtr nativePtr);
    public RawRectangleF GetBounds(Nullable`1<RawMatrix3x2> worldTransform);
    public RawRectangleF GetWidenedBounds(float strokeWidth, StrokeStyle strokeStyle, Nullable`1<RawMatrix3x2> worldTransform, float flatteningTolerance);
    public RawBool StrokeContainsPoint(RawVector2 point, float strokeWidth, StrokeStyle strokeStyle, Nullable`1<RawMatrix3x2> worldTransform, float flatteningTolerance);
    public RawBool FillContainsPoint(RawVector2 point, Nullable`1<RawMatrix3x2> worldTransform, float flatteningTolerance);
    public GeometryRelation Compare(Geometry inputGeometry, Nullable`1<RawMatrix3x2> inputGeometryTransform, float flatteningTolerance);
    public void Simplify(GeometrySimplificationOption simplificationOption, Nullable`1<RawMatrix3x2> worldTransform, float flatteningTolerance, SimplifiedGeometrySink geometrySink);
    public void Tessellate(Nullable`1<RawMatrix3x2> worldTransform, float flatteningTolerance, TessellationSink tessellationSink);
    public void Combine(Geometry inputGeometry, CombineMode combineMode, Nullable`1<RawMatrix3x2> inputGeometryTransform, float flatteningTolerance, SimplifiedGeometrySink geometrySink);
    public void Outline(Nullable`1<RawMatrix3x2> worldTransform, float flatteningTolerance, SimplifiedGeometrySink geometrySink);
    public float ComputeArea(Nullable`1<RawMatrix3x2> worldTransform, float flatteningTolerance);
    public float ComputeLength(Nullable`1<RawMatrix3x2> worldTransform, float flatteningTolerance);
    public RawVector2 ComputePointAtLength(float length, Nullable`1<RawMatrix3x2> worldTransform, float flatteningTolerance, RawVector2& unitTangentVector);
    public void Widen(float strokeWidth, StrokeStyle strokeStyle, Nullable`1<RawMatrix3x2> worldTransform, float flatteningTolerance, SimplifiedGeometrySink geometrySink);
}
[GuidAttribute("2cd906a6-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.GeometryGroup : Geometry {
    public FillMode FillMode { get; }
    public int SourceGeometryCount { get; }
    public GeometryGroup(Factory factory, FillMode fillMode, Geometry[] geometries);
    public GeometryGroup(IntPtr nativePtr);
    public Geometry[] GetSourceGeometry();
    public Geometry[] GetSourceGeometry(int geometriesCount);
    public static GeometryGroup op_Explicit(IntPtr nativePtr);
    public FillMode get_FillMode();
    public int get_SourceGeometryCount();
    internal FillMode GetFillMode();
    internal int GetSourceGeometryCount();
    internal void GetSourceGeometries(Geometry[] geometries, int geometriesCount);
}
[GuidAttribute("a16907d7-bc02-4801-99e8-8cf7f485f774")]
public class SharpDX.Direct2D1.GeometryRealization : Resource {
    public GeometryRealization(DeviceContext1 context, Geometry geometry, float flatteningTolerance);
    public GeometryRealization(DeviceContext1 context, Geometry geometry, float flatteningTolerance, float strokeWidth, StrokeStyle strokeStyle);
    public GeometryRealization(IntPtr nativePtr);
    public static GeometryRealization op_Explicit(IntPtr nativePtr);
}
public enum SharpDX.Direct2D1.GeometryRelation : Enum {
    public int value__;
    public static GeometryRelation Unknown;
    public static GeometryRelation Disjoint;
    public static GeometryRelation IsContained;
    public static GeometryRelation Contains;
    public static GeometryRelation Overlap;
}
public enum SharpDX.Direct2D1.GeometrySimplificationOption : Enum {
    public int value__;
    public static GeometrySimplificationOption CubicsAndLines;
    public static GeometrySimplificationOption Lines;
}
[ShadowAttribute("SharpDX.Direct2D1.GeometrySinkShadow")]
[GuidAttribute("2cd9069f-12e2-11dc-9fed-001143a055f9")]
public interface SharpDX.Direct2D1.GeometrySink {
    public abstract virtual void AddLine(RawVector2 point);
    public abstract virtual void AddBezier(BezierSegment bezier);
    public abstract virtual void AddQuadraticBezier(QuadraticBezierSegment bezier);
    public abstract virtual void AddQuadraticBeziers(QuadraticBezierSegment[] beziers);
    public abstract virtual void AddArc(ArcSegment arc);
}
[GuidAttribute("2cd9069f-12e2-11dc-9fed-001143a055f9")]
internal class SharpDX.Direct2D1.GeometrySinkNative : SimplifiedGeometrySinkNative {
    public GeometrySinkNative(IntPtr nativePtr);
    public sealed virtual void AddLine(RawVector2 point);
    public sealed virtual void AddBezier(BezierSegment bezier);
    public sealed virtual void AddQuadraticBezier(QuadraticBezierSegment bezier);
    public sealed virtual void AddQuadraticBeziers(QuadraticBezierSegment[] beziers);
    public sealed virtual void AddArc(ArcSegment arc);
    public static GeometrySinkNative op_Explicit(IntPtr nativePtr);
    internal void AddLine_(RawVector2 point);
    internal void AddBezier_(BezierSegment& bezier);
    internal void AddQuadraticBezier_(QuadraticBezierSegment bezier);
    internal void AddQuadraticBeziers_(QuadraticBezierSegment[] beziers, int beziersCount);
    internal void AddArc_(ArcSegment& arc);
}
internal class SharpDX.Direct2D1.GeometrySinkShadow : SimplifiedGeometrySinkShadow {
    private static GeometrySinkVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static GeometrySinkShadow();
    protected virtual CppObjectVtbl get_GetVtbl();
    public static IntPtr ToIntPtr(GeometrySink geometrySink);
}
public enum SharpDX.Direct2D1.GlyphImageFormatS : Enum {
    public int value__;
    public static GlyphImageFormatS None;
    public static GlyphImageFormatS Truetype;
    public static GlyphImageFormatS Cff;
    public static GlyphImageFormatS Colr;
    public static GlyphImageFormatS Svg;
    public static GlyphImageFormatS Png;
    public static GlyphImageFormatS Jpeg;
    public static GlyphImageFormatS Tiff;
    public static GlyphImageFormatS PremultipliedB8G8R8A8;
}
[GuidAttribute("f292e401-c050-4cde-83d7-04962d3b23c2")]
public class SharpDX.Direct2D1.GradientMesh : Resource {
    public int PatchCount { get; }
    public GradientMesh(DeviceContext2 context2, GradientMeshPatch[] atchesRef, int patchesCount);
    public GradientMesh(IntPtr nativePtr);
    public static GradientMesh op_Explicit(IntPtr nativePtr);
    public int get_PatchCount();
    internal int GetPatchCount();
    public void GetPatches(int startIndex, GradientMeshPatch[] atchesRef, int patchesCount);
}
public class SharpDX.Direct2D1.GradientMeshPatch : ValueType {
    public RawVector2 Point00;
    public RawVector2 Point01;
    public RawVector2 Point02;
    public RawVector2 Point03;
    public RawVector2 Point10;
    public RawVector2 Point11;
    public RawVector2 Point12;
    public RawVector2 Point13;
    public RawVector2 Point20;
    public RawVector2 Point21;
    public RawVector2 Point22;
    public RawVector2 Point23;
    public RawVector2 Point30;
    public RawVector2 Point31;
    public RawVector2 Point32;
    public RawVector2 Point33;
    public RawColor4 Color00;
    public RawColor4 Color03;
    public RawColor4 Color30;
    public RawColor4 Color33;
    public PatchEdgeMode TopEdgeMode;
    public PatchEdgeMode LeftEdgeMode;
    public PatchEdgeMode BottomEdgeMode;
    public PatchEdgeMode RightEdgeMode;
}
public class SharpDX.Direct2D1.GradientStop : ValueType {
    public float Position;
    public RawColor4 Color;
}
[GuidAttribute("2cd906a7-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.GradientStopCollection : Resource {
    public int GradientStopCount { get; }
    public Gamma ColorInterpolationGamma { get; }
    public ExtendMode ExtendMode { get; }
    public GradientStopCollection(RenderTarget renderTarget, GradientStop[] gradientStops);
    public GradientStopCollection(RenderTarget renderTarget, GradientStop[] gradientStops, ExtendMode extendMode);
    public GradientStopCollection(RenderTarget renderTarget, GradientStop[] gradientStops, Gamma colorInterpolationGamma);
    public GradientStopCollection(RenderTarget renderTarget, GradientStop[] gradientStops, Gamma colorInterpolationGamma, ExtendMode extendMode);
    public GradientStopCollection(IntPtr nativePtr);
    public static GradientStopCollection op_Explicit(IntPtr nativePtr);
    public int get_GradientStopCount();
    public Gamma get_ColorInterpolationGamma();
    public ExtendMode get_ExtendMode();
    internal int GetGradientStopCount();
    public void GetGradientStops(GradientStop[] gradientStops, int gradientStopsCount);
    internal Gamma GetColorInterpolationGamma();
    internal ExtendMode GetExtendMode();
}
[GuidAttribute("ae1572f4-5dd0-4777-998b-9279472ae63b")]
public class SharpDX.Direct2D1.GradientStopCollection1 : GradientStopCollection {
    public ColorSpace PreInterpolationSpace { get; }
    public ColorSpace PostInterpolationSpace { get; }
    public BufferPrecision BufferPrecision { get; }
    public ColorInterpolationMode ColorInterpolationMode { get; }
    public GradientStopCollection1(DeviceContext context, GradientStop[] straightAlphaGradientStops, ColorSpace preInterpolationSpace, ColorSpace postInterpolationSpace, BufferPrecision bufferPrecision, ExtendMode extendMode, ColorInterpolationMode colorInterpolationMode);
    public GradientStopCollection1(IntPtr nativePtr);
    public static GradientStopCollection1 op_Explicit(IntPtr nativePtr);
    public ColorSpace get_PreInterpolationSpace();
    public ColorSpace get_PostInterpolationSpace();
    public BufferPrecision get_BufferPrecision();
    public ColorInterpolationMode get_ColorInterpolationMode();
    public void GetGradientStops1(GradientStop[] gradientStops, int gradientStopsCount);
    internal ColorSpace GetPreInterpolationSpace();
    internal ColorSpace GetPostInterpolationSpace();
    internal BufferPrecision GetBufferPrecision();
    internal ColorInterpolationMode GetColorInterpolationMode();
}
public enum SharpDX.Direct2D1.HighlightSandShadowsInputGamma : Enum {
    public int value__;
    public static HighlightSandShadowsInputGamma Linear;
    public static HighlightSandShadowsInputGamma SRgb;
}
public enum SharpDX.Direct2D1.HighlightSandShadowsProperty : Enum {
    public int value__;
    public static HighlightSandShadowsProperty Highlights;
    public static HighlightSandShadowsProperty Shadows;
    public static HighlightSandShadowsProperty Clarity;
    public static HighlightSandShadowsProperty InputGamma;
    public static HighlightSandShadowsProperty MaskBlurRadius;
}
public enum SharpDX.Direct2D1.HistogramProperties : Enum {
    public int value__;
    public static HistogramProperties NumBins;
    public static HistogramProperties ChannelSelect;
    public static HistogramProperties HistogramOutput;
}
public enum SharpDX.Direct2D1.HueRotationProperties : Enum {
    public int value__;
    public static HueRotationProperties Angle;
}
public enum SharpDX.Direct2D1.HueToRgbInputColorSpace : Enum {
    public int value__;
    public static HueToRgbInputColorSpace HueSaturationValue;
    public static HueToRgbInputColorSpace HueSaturationLightness;
}
public enum SharpDX.Direct2D1.HueToRgbProperty : Enum {
    public int value__;
    public static HueToRgbProperty InputColorSpace;
}
public class SharpDX.Direct2D1.HwndRenderTargetProperties : ValueType {
    public IntPtr Hwnd;
    public Size2 PixelSize;
    public PresentOptions PresentOptions;
}
[GuidAttribute("65019f75-8da2-497c-b32c-dfa34e48ede6")]
public class SharpDX.Direct2D1.Image : Resource {
    public Image(IntPtr nativePtr);
    public static Image op_Explicit(IntPtr nativePtr);
}
[GuidAttribute("fe9e984d-3f95-407c-b5db-cb94d4e8f87c")]
public class SharpDX.Direct2D1.ImageBrush : Brush {
    public Image Image { get; public set; }
    public ExtendMode ExtendModeX { get; public set; }
    public ExtendMode ExtendModeY { get; public set; }
    public InterpolationMode InterpolationMode { get; public set; }
    public RawRectangleF SourceRectangle { get; public set; }
    public ImageBrush(DeviceContext context, Image image, ImageBrushProperties imageBrushProperties);
    public ImageBrush(DeviceContext context, Image image, ImageBrushProperties imageBrushProperties, BrushProperties brushProperties);
    public ImageBrush(IntPtr nativePtr);
    public static ImageBrush op_Explicit(IntPtr nativePtr);
    public Image get_Image();
    public void set_Image(Image value);
    public ExtendMode get_ExtendModeX();
    public void set_ExtendModeX(ExtendMode value);
    public ExtendMode get_ExtendModeY();
    public void set_ExtendModeY(ExtendMode value);
    public InterpolationMode get_InterpolationMode();
    public void set_InterpolationMode(InterpolationMode value);
    public RawRectangleF get_SourceRectangle();
    public void set_SourceRectangle(RawRectangleF value);
    internal void SetImage(Image image);
    internal void SetExtendModeX(ExtendMode extendModeX);
    internal void SetExtendModeY(ExtendMode extendModeY);
    internal void SetInterpolationMode(InterpolationMode interpolationMode);
    internal void SetSourceRectangle(RawRectangleF sourceRectangle);
    internal void GetImage(Image& image);
    internal ExtendMode GetExtendModeX();
    internal ExtendMode GetExtendModeY();
    internal InterpolationMode GetInterpolationMode();
    internal void GetSourceRectangle(RawRectangleF& sourceRectangle);
}
public class SharpDX.Direct2D1.ImageBrushProperties : ValueType {
    public RawRectangleF SourceRectangle;
    public ExtendMode ExtendModeX;
    public ExtendMode ExtendModeY;
    public InterpolationMode InterpolationMode;
}
[GuidAttribute("c9b664e5-74a1-4378-9ac2-eefc37a3f4d8")]
public class SharpDX.Direct2D1.ImageSource : Image {
    public ImageSource(DeviceContext2 context2, Surface[] surfaces, int surfaceCount, ColorSpaceType colorSpace, ImageSourceFromDxgiOptions options);
    public ImageSource(IntPtr nativePtr);
    public static ImageSource op_Explicit(IntPtr nativePtr);
    public void OfferResources();
    public void TryReclaimResources(RawBool& resourcesDiscarded);
}
[FlagsAttribute]
public enum SharpDX.Direct2D1.ImageSourceFromDxgiOptions : Enum {
    public int value__;
    public static ImageSourceFromDxgiOptions None;
    public static ImageSourceFromDxgiOptions LowQualityPrimaryConversion;
}
[GuidAttribute("77395441-1c8f-4555-8683-f50dab0fe792")]
public class SharpDX.Direct2D1.ImageSourceFromWic : ImageSource {
    public BitmapSource Source { get; }
    public ImageSourceFromWic(DeviceContext2 context2, BitmapSource wicBitmapSource, ImageSourceLoadingOptions loadingOptions, AlphaMode alphaMode);
    public ImageSourceFromWic(IntPtr nativePtr);
    public static ImageSourceFromWic op_Explicit(IntPtr nativePtr);
    public BitmapSource get_Source();
    public void EnsureCached(Nullable`1<RawRectangle> rectangleToFill);
    public void TrimCache(Nullable`1<RawRectangle> rectangleToPreserve);
    internal void GetSource(BitmapSource& wicBitmapSource);
}
[FlagsAttribute]
public enum SharpDX.Direct2D1.ImageSourceLoadingOptions : Enum {
    public int value__;
    public static ImageSourceLoadingOptions None;
    public static ImageSourceLoadingOptions ReleaseSource;
    public static ImageSourceLoadingOptions CacheOnDemand;
}
[GuidAttribute("b499923b-7029-478f-a8b3-432c7c5f5312")]
public class SharpDX.Direct2D1.Ink : Resource {
    public InkPoint StartPoint { get; public set; }
    unknown InkBezierSegment SegmentAtEnd {public set; }
    public int SegmentCount { get; }
    public Ink(DeviceContext2 context2, InkPoint startPoint);
    public Ink(IntPtr nativePtr);
    public static Ink op_Explicit(IntPtr nativePtr);
    public InkPoint get_StartPoint();
    public void set_StartPoint(InkPoint value);
    public void set_SegmentAtEnd(InkBezierSegment value);
    public int get_SegmentCount();
    internal void SetStartPoint(InkPoint startPoint);
    internal InkPoint GetStartPoint();
    public void AddSegments(InkBezierSegment[] segments, int segmentsCount);
    public void RemoveSegmentsAtEnd(int segmentsCount);
    public void SetSegments(int startSegment, InkBezierSegment[] segments, int segmentsCount);
    internal void SetSegmentAtEnd(InkBezierSegment& segment);
    internal int GetSegmentCount();
    public void GetSegments(int startSegment, InkBezierSegment[] segments, int segmentsCount);
    public void StreamAsGeometry(InkStyle inkStyle, Nullable`1<RawMatrix3x2> worldTransform, float flatteningTolerance, SimplifiedGeometrySink geometrySink);
    public void GetBounds(InkStyle inkStyle, Nullable`1<RawMatrix3x2> worldTransform, RawRectangleF& bounds);
}
public class SharpDX.Direct2D1.InkBezierSegment : ValueType {
    public InkPoint Point1;
    public InkPoint Point2;
    public InkPoint Point3;
}
public enum SharpDX.Direct2D1.InkNibShape : Enum {
    public int value__;
    public static InkNibShape Round;
    public static InkNibShape Square;
}
public class SharpDX.Direct2D1.InkPoint : ValueType {
    public float X;
    public float Y;
    public float Radius;
}
[GuidAttribute("bae8b344-23fc-4071-8cb5-d05d6f073848")]
public class SharpDX.Direct2D1.InkStyle : Resource {
    public RawMatrix3x2 NibTransform { get; public set; }
    public InkNibShape NibShape { get; public set; }
    public InkStyle(DeviceContext2 context2);
    public InkStyle(DeviceContext2 context2, InkStyleProperties inkStyleProperties);
    public InkStyle(IntPtr nativePtr);
    public static InkStyle op_Explicit(IntPtr nativePtr);
    public RawMatrix3x2 get_NibTransform();
    public void set_NibTransform(RawMatrix3x2 value);
    public InkNibShape get_NibShape();
    public void set_NibShape(InkNibShape value);
    internal void SetNibTransform(RawMatrix3x2& transform);
    internal void GetNibTransform(RawMatrix3x2& transform);
    internal void SetNibShape(InkNibShape nibShape);
    internal InkNibShape GetNibShape();
}
public class SharpDX.Direct2D1.InkStyleProperties : ValueType {
    public InkNibShape NibShape;
    public RawMatrix3x2 NibTransform;
}
public class SharpDX.Direct2D1.InputDescription : ValueType {
    public Filter Filter;
    public int LevelOfDetailCount;
    public InputDescription(Filter filter, int levelOfDetail);
}
public class SharpDX.Direct2D1.InputElement : ValueType {
    public string SemanticName;
    public int SemanticIndex;
    public Format Format;
    public int Slot;
    public int AlignedByteOffset;
    public static int AppendAligned { get; }
    public InputElement(string name, int index, Format format, int slot);
    public InputElement(string name, int index, Format format, int offset, int slot);
    public static int get_AppendAligned();
    public bool Equals(InputElement other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(InputElement left, InputElement right);
    public static bool op_Inequality(InputElement left, InputElement right);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public enum SharpDX.Direct2D1.InterpolationMode : Enum {
    public int value__;
    public static InterpolationMode NearestNeighbor;
    public static InterpolationMode Linear;
    public static InterpolationMode Cubic;
    public static InterpolationMode MultiSampleLinear;
    public static InterpolationMode Anisotropic;
    public static InterpolationMode HighQualityCubic;
}
public enum SharpDX.Direct2D1.InterpolationModeDefinition : Enum {
    public int value__;
    public static InterpolationModeDefinition NearestNeighbor;
    public static InterpolationModeDefinition Linear;
    public static InterpolationModeDefinition Cubic;
    public static InterpolationModeDefinition MultiSampleLinear;
    public static InterpolationModeDefinition Anisotropic;
    public static InterpolationModeDefinition HighQualityCubic;
    public static InterpolationModeDefinition Fant;
    public static InterpolationModeDefinition MipmapLinear;
}
[GuidAttribute("2cd9069b-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.Layer : Resource {
    public Size2F Size { get; }
    public Layer(RenderTarget renderTarget);
    public Layer(RenderTarget renderTarget, Nullable`1<Size2F> size);
    public Layer(IntPtr nativePtr);
    public static Layer op_Explicit(IntPtr nativePtr);
    public Size2F get_Size();
    internal Size2F GetSize();
}
[FlagsAttribute]
public enum SharpDX.Direct2D1.LayerOptions : Enum {
    public int value__;
    public static LayerOptions None;
    public static LayerOptions InitializeForCleartype;
}
[FlagsAttribute]
public enum SharpDX.Direct2D1.LayerOptions1 : Enum {
    public int value__;
    public static LayerOptions1 None;
    public static LayerOptions1 InitializeFromBackground;
    public static LayerOptions1 IgnoreAlpha;
}
public class SharpDX.Direct2D1.LayerParameters : ValueType {
    public RawRectangleF ContentBounds;
    public Geometry GeometricMask;
    public AntialiasMode MaskAntialiasMode;
    public RawMatrix3x2 MaskTransform;
    public float Opacity;
    public Brush OpacityBrush;
    public LayerOptions LayerOptions;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct2D1.LayerParameters1 : ValueType {
    public RawRectangleF ContentBounds;
    public Geometry GeometricMask;
    public AntialiasMode MaskAntialiasMode;
    public RawMatrix3x2 MaskTransform;
    public float Opacity;
    public Brush OpacityBrush;
    public LayerOptions1 LayerOptions;
    public LayerParameters1(RawRectangleF contentBounds, Geometry geometryMask, AntialiasMode maskAntialiasMode, RawMatrix3x2 maskTransform, float opacity, Brush opacityBrush, LayerOptions1 layerOptions);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[GuidAttribute("2cd906ab-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.LinearGradientBrush : Brush {
    public RawVector2 StartPoint { get; public set; }
    public RawVector2 EndPoint { get; public set; }
    public GradientStopCollection GradientStopCollection { get; }
    public LinearGradientBrush(RenderTarget renderTarget, LinearGradientBrushProperties linearGradientBrushProperties, GradientStopCollection gradientStopCollection);
    public LinearGradientBrush(RenderTarget renderTarget, LinearGradientBrushProperties linearGradientBrushProperties, Nullable`1<BrushProperties> brushProperties, GradientStopCollection gradientStopCollection);
    public LinearGradientBrush(IntPtr nativePtr);
    public static LinearGradientBrush op_Explicit(IntPtr nativePtr);
    public RawVector2 get_StartPoint();
    public void set_StartPoint(RawVector2 value);
    public RawVector2 get_EndPoint();
    public void set_EndPoint(RawVector2 value);
    public GradientStopCollection get_GradientStopCollection();
    internal void SetStartPoint(RawVector2 startPoint);
    internal void SetEndPoint(RawVector2 endPoint);
    internal RawVector2 GetStartPoint();
    internal RawVector2 GetEndPoint();
    internal void GetGradientStopCollection(GradientStopCollection& gradientStopCollection);
}
public class SharpDX.Direct2D1.LinearGradientBrushProperties : ValueType {
    public RawVector2 StartPoint;
    public RawVector2 EndPoint;
}
public enum SharpDX.Direct2D1.LinearTransferProperties : Enum {
    public int value__;
    public static LinearTransferProperties RedYIntercept;
    public static LinearTransferProperties RedSlope;
    public static LinearTransferProperties RedDisable;
    public static LinearTransferProperties GreenYIntercept;
    public static LinearTransferProperties GreenSlope;
    public static LinearTransferProperties GreenDisable;
    public static LinearTransferProperties BlueYIntercept;
    public static LinearTransferProperties BlueSlope;
    public static LinearTransferProperties BlueDisable;
    public static LinearTransferProperties AlphaYIntercept;
    public static LinearTransferProperties AlphaSlope;
    public static LinearTransferProperties AlphaDisable;
    public static LinearTransferProperties ClampOutput;
}
public enum SharpDX.Direct2D1.LineJoin : Enum {
    public int value__;
    public static LineJoin Miter;
    public static LineJoin Bevel;
    public static LineJoin Round;
    public static LineJoin MiterOrBevel;
}
[GuidAttribute("53dd9855-a3b0-4d5b-82e1-26e25c5e5797")]
public class SharpDX.Direct2D1.LookupTable3D : Resource {
    public LookupTable3D(DeviceContext2 context2, BufferPrecision precision, Int32[] extents, Byte[] data, int dataCount, Int32[] strides);
    public LookupTable3D(IntPtr nativePtr);
    public static LookupTable3D op_Explicit(IntPtr nativePtr);
}
public enum SharpDX.Direct2D1.LookupTable3DProperty : Enum {
    public int value__;
    public static LookupTable3DProperty Lut;
    public static LookupTable3DProperty AlphaMode;
}
[FlagsAttribute]
public enum SharpDX.Direct2D1.MapOptions : Enum {
    public int value__;
    public static MapOptions None;
    public static MapOptions Read;
    public static MapOptions Write;
    public static MapOptions Discard;
}
internal class SharpDX.Direct2D1.MappedRectangle : ValueType {
    public int Pitch;
    public IntPtr Bits;
}
public enum SharpDX.Direct2D1.MeasuringMode : Enum {
    public int value__;
    public static MeasuringMode Natural;
    public static MeasuringMode GdiClassic;
    public static MeasuringMode GdiNatural;
}
[GuidAttribute("2cd906c2-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.Mesh : Resource {
    public Mesh(RenderTarget renderTarget);
    public Mesh(RenderTarget renderTarget, Triangle[] triangles);
    public Mesh(IntPtr nativePtr);
    public TessellationSink Open();
    public static Mesh op_Explicit(IntPtr nativePtr);
    internal void Open_(TessellationSink& tessellationSink);
}
internal class SharpDX.Direct2D1.ModuleInit : object {
    [TagAttribute("SharpDX.ModuleInit")]
internal static void Setup();
}
public enum SharpDX.Direct2D1.MorphologyMode : Enum {
    public int value__;
    public static MorphologyMode Erode;
    public static MorphologyMode Dilate;
}
public enum SharpDX.Direct2D1.MorphologyProperties : Enum {
    public int value__;
    public static MorphologyProperties Mode;
    public static MorphologyProperties Width;
    public static MorphologyProperties Height;
}
[GuidAttribute("31e6e7bc-e0ff-4d46-8c64-a0a8c41c15d3")]
public class SharpDX.Direct2D1.Multithread : ComObject {
    public RawBool MultithreadProtected { get; }
    public Multithread(IntPtr nativePtr);
    public static Multithread op_Explicit(IntPtr nativePtr);
    public RawBool get_MultithreadProtected();
    internal RawBool GetMultithreadProtected();
    public void Enter();
    public void Leave();
}
[CompilerGeneratedAttribute]
internal class SharpDX.Direct2D1.NamespaceDoc : object {
}
[GuidAttribute("3fe6adea-7643-4f53-bd14-a0ce63f24042")]
public class SharpDX.Direct2D1.OffsetTransform : TransformNodeNative {
    public RawPoint Offset { get; public set; }
    public OffsetTransform(EffectContext context, RawPoint offset);
    public OffsetTransform(IntPtr nativePtr);
    public static OffsetTransform op_Explicit(IntPtr nativePtr);
    public RawPoint get_Offset();
    public void set_Offset(RawPoint value);
    internal void SetOffset(RawPoint offset);
    internal RawPoint GetOffset();
}
public enum SharpDX.Direct2D1.OpacityMaskContent : Enum {
    public int value__;
    public static OpacityMaskContent Graphics;
    public static OpacityMaskContent TextNatural;
    public static OpacityMaskContent TextGdiCompatible;
}
public enum SharpDX.Direct2D1.OpacityMetadataProperties : Enum {
    public int value__;
    public static OpacityMetadataProperties InputOpaqueRectangle;
}
public enum SharpDX.Direct2D1.OpacityProp : Enum {
    public int value__;
    public static OpacityProp Opacity;
}
public enum SharpDX.Direct2D1.Orientation : Enum {
    public int value__;
    public static Orientation Default;
    public static Orientation FlipHorizontal;
    public static Orientation RotateClockwise180;
    public static Orientation RotateClockwise180FlipHorizontal;
    public static Orientation RotateClockwise90FlipHorizontal;
    public static Orientation RotateClockwise270;
    public static Orientation RotateClockwise270FlipHorizontal;
    public static Orientation RotateClockwise90;
}
public enum SharpDX.Direct2D1.PatchEdgeMode : Enum {
    public int value__;
    public static PatchEdgeMode Aliased;
    public static PatchEdgeMode Antialiased;
    public static PatchEdgeMode AliasedInflated;
}
[GuidAttribute("2cd906a5-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.PathGeometry : Geometry {
    public int SegmentCount { get; }
    public int FigureCount { get; }
    public PathGeometry(Factory factory);
    public PathGeometry(IntPtr nativePtr);
    public static PathGeometry op_Explicit(IntPtr nativePtr);
    public int get_SegmentCount();
    public int get_FigureCount();
    public GeometrySink Open();
    public void Stream(GeometrySink geometrySink);
    internal void GetSegmentCount(Int32& count);
    internal void GetFigureCount(Int32& count);
}
[GuidAttribute("62baa2d2-ab54-41b7-b872-787e0106a421")]
public class SharpDX.Direct2D1.PathGeometry1 : PathGeometry {
    public PathGeometry1(Factory1 factory);
    public PathGeometry1(IntPtr nativePtr);
    public static PathGeometry1 op_Explicit(IntPtr nativePtr);
    public void ComputePointAndSegmentAtLength(float length, int startSegment, Nullable`1<RawMatrix3x2> worldTransform, float flatteningTolerance, PointDescription& ointDescriptionRef);
}
public enum SharpDX.Direct2D1.PathSegment : Enum {
    public int value__;
    public static PathSegment None;
    public static PathSegment ForceUnstroked;
    public static PathSegment ForceRoundLineJoin;
}
public enum SharpDX.Direct2D1.PerspectiveTransform3DInteroplationMode : Enum {
    public int value__;
    public static PerspectiveTransform3DInteroplationMode NearestNeighbor;
    public static PerspectiveTransform3DInteroplationMode Linear;
    public static PerspectiveTransform3DInteroplationMode Cubic;
    public static PerspectiveTransform3DInteroplationMode MultiSampleLinear;
    public static PerspectiveTransform3DInteroplationMode Anisotropic;
}
public enum SharpDX.Direct2D1.PerspectiveTransform3DProperties : Enum {
    public int value__;
    public static PerspectiveTransform3DProperties InterpolationMode;
    public static PerspectiveTransform3DProperties BorderMode;
    public static PerspectiveTransform3DProperties Depth;
    public static PerspectiveTransform3DProperties PerspectiveOrigin;
    public static PerspectiveTransform3DProperties LocalOffset;
    public static PerspectiveTransform3DProperties GlobalOffset;
    public static PerspectiveTransform3DProperties RotationOrigin;
    public static PerspectiveTransform3DProperties Rotation;
}
public class SharpDX.Direct2D1.PixelFormat : ValueType {
    public Format Format;
    public AlphaMode AlphaMode;
    public PixelFormat(Format format, AlphaMode alphaMode);
}
[FlagsAttribute]
public enum SharpDX.Direct2D1.PixelOptions : Enum {
    public int value__;
    public static PixelOptions None;
    public static PixelOptions TrivialSampling;
}
public class SharpDX.Direct2D1.PointDescription : ValueType {
    public RawVector2 Point;
    public RawVector2 UnitTangentVector;
    public int EndSegment;
    public int EndFigure;
    public float LengthToEndSegment;
}
public enum SharpDX.Direct2D1.PointDiffuseProperties : Enum {
    public int value__;
    public static PointDiffuseProperties LightPosition;
    public static PointDiffuseProperties DiffuseConstant;
    public static PointDiffuseProperties SurfaceScale;
    public static PointDiffuseProperties Color;
    public static PointDiffuseProperties KernelUnitLength;
    public static PointDiffuseProperties ScaleMode;
}
public enum SharpDX.Direct2D1.PointDiffuseScaleMode : Enum {
    public int value__;
    public static PointDiffuseScaleMode NearestNeighbor;
    public static PointDiffuseScaleMode Linear;
    public static PointDiffuseScaleMode Cubic;
    public static PointDiffuseScaleMode MultiSampleLinear;
    public static PointDiffuseScaleMode Anisotropic;
    public static PointDiffuseScaleMode HighQualityCubic;
}
public enum SharpDX.Direct2D1.PointSpecularProperties : Enum {
    public int value__;
    public static PointSpecularProperties LightPosition;
    public static PointSpecularProperties SpecularExponent;
    public static PointSpecularProperties SpecularConstant;
    public static PointSpecularProperties SurfaceScale;
    public static PointSpecularProperties Color;
    public static PointSpecularProperties KernelUnitLength;
    public static PointSpecularProperties ScaleMode;
}
public enum SharpDX.Direct2D1.PointSpecularScaleMode : Enum {
    public int value__;
    public static PointSpecularScaleMode NearestNeighbor;
    public static PointSpecularScaleMode Linear;
    public static PointSpecularScaleMode Cubic;
    public static PointSpecularScaleMode MultiSampleLinear;
    public static PointSpecularScaleMode Anisotropic;
    public static PointSpecularScaleMode HighQualityCubic;
}
public enum SharpDX.Direct2D1.PosterizeProperty : Enum {
    public int value__;
    public static PosterizeProperty RedValueCount;
    public static PosterizeProperty GreenValueCount;
    public static PosterizeProperty BlueValueCount;
}
[FlagsAttribute]
public enum SharpDX.Direct2D1.PresentOptions : Enum {
    public int value__;
    public static PresentOptions None;
    public static PresentOptions RetainContents;
    public static PresentOptions Immediately;
}
public enum SharpDX.Direct2D1.PrimitiveBlend : Enum {
    public int value__;
    public static PrimitiveBlend SourceOver;
    public static PrimitiveBlend Copy;
    public static PrimitiveBlend Minimum;
    public static PrimitiveBlend Add;
    public static PrimitiveBlend Maximum;
}
[GuidAttribute("2c1d867d-c290-41c8-ae7e-34a98702e9a5")]
public class SharpDX.Direct2D1.PrintControl : ComObject {
    public PrintControl(Device device, ImagingFactory wicFactory, ComObject documentTarget);
    public PrintControl(Device device, ImagingFactory wicFactory, ComObject documentTarget, PrintControlProperties rintControlPropertiesRef);
    public PrintControl(IntPtr nativePtr);
    public void AddPage(CommandList commandList, Size2F pageSize);
    public void AddPage(CommandList commandList, Size2F pageSize, Int64& tag1, Int64& tag2);
    public static PrintControl op_Explicit(IntPtr nativePtr);
    public void AddPage(CommandList commandList, Size2F pageSize, IStream agePrintTicketStreamRef, Int64& tag1, Int64& tag2);
    public void Close();
}
public class SharpDX.Direct2D1.PrintControlProperties : ValueType {
    public PrintFontSubsetMode FontSubset;
    public float RasterDPI;
    public ColorSpace ColorSpace;
}
public enum SharpDX.Direct2D1.PrintFontSubsetMode : Enum {
    public int value__;
    public static PrintFontSubsetMode Default;
    public static PrintFontSubsetMode Eachpage;
    public static PrintFontSubsetMode None;
}
[GuidAttribute("483473d7-cd46-4f9d-9d3a-3112aa80159d")]
public class SharpDX.Direct2D1.Properties : ComObject {
    public bool Cached { get; public set; }
    public int PropertyCount { get; }
    public Properties(IntPtr nativePtr);
    public bool get_Cached();
    public void set_Cached(bool value);
    public string GetPropertyName(int index);
    public int GetIntValue(int index);
    public UInt32 GetUIntValue(int index);
    public float GetFloatValue(int index);
    public bool GetBoolValue(int index);
    public Guid GetGuidValue(int index);
    public RawVector2 GetVector2Value(int index);
    public RawVector3 GetVector3Value(int index);
    public RawColor3 GetColor3Value(int index);
    public RawVector4 GetVector4Value(int index);
    public RawRectangleF GetRectangleFValue(int index);
    public RawColor4 GetColor4Value(int index);
    public RawMatrix GetMatrixValue(int index);
    public RawMatrix3x2 GetMatrix3x2Value(int index);
    public RawMatrix5x4 GetMatrix5x4Value(int index);
    public T GetEnumValue(int index);
    public T GetComObjectValue(int index);
    public T GetValue(int index, PropertyType type);
    public UInt32 GetUIntValueByName(string name);
    public float GetFloatValueByName(string name);
    public bool GetBoolValueByName(string name);
    public Guid GetGuidValueByName(string name);
    public RawVector2 GetVector2ValueByName(string name);
    public RawVector3 GetVector3ValueByName(string name);
    public RawColor3 GetColor3ValueByName(string name);
    public RawVector4 GetVector4ValueByName(string name);
    public RawRectangleF GetRectangleFValueByName(string name);
    public RawColor4 GetColor4ValueByName(string name);
    public RawMatrix GetMatrixValueByName(string name);
    public RawMatrix3x2 GetMatrix3x2ValueByName(string name);
    public RawMatrix5x4 GetMatrix5x4ValueByName(string name);
    public T GetEnumValueByName(string name);
    public T GetComObjectValueByName(string name);
    public T GetValue(string name, PropertyType type);
    public void SetValueByName(string name, int value);
    public void SetValueByName(string name, UInt32 value);
    public void SetValueByName(string name, bool value);
    public void SetValueByName(string name, Guid value);
    public void SetValueByName(string name, float value);
    public void SetValueByName(string name, RawVector2 value);
    public void SetValueByName(string name, RawColor3 value);
    public void SetValueByName(string name, RawVector4 value);
    public void SetValueByName(string name, RawRectangleF value);
    public void SetValueByName(string name, RawColor4 value);
    public void SetValueByName(string name, RawMatrix3x2 value);
    public void SetValueByName(string name, RawMatrix value);
    public void SetValueByName(string name, RawMatrix5x4 value);
    public void SetValueByName(string name, string value);
    public void SetValueByName(string name, T value);
    public void SetValueByName(string name, PropertyType type, T value);
    public void SetValue(int index, int value);
    public void SetValue(int index, UInt32 value);
    public void SetValue(int index, bool value);
    public void SetValue(int index, Guid value);
    public void SetValue(int index, float value);
    public void SetValue(int index, RawVector2 value);
    public void SetValue(int index, RawVector3 value);
    public void SetValue(int index, RawColor3 value);
    public void SetValue(int index, RawVector4 value);
    public void SetValue(int index, RawRectangleF value);
    public void SetValue(int index, RawColor4 value);
    public void SetValue(int index, RawMatrix3x2 value);
    public void SetValue(int index, RawMatrix value);
    public void SetValue(int index, RawMatrix5x4 value);
    public void SetValue(int index, string value);
    public void SetEnumValue(int index, T value);
    public void SetValue(int index, T value);
    public void SetValue(int index, PropertyType type, T value);
    public static Properties op_Explicit(IntPtr nativePtr);
    public int get_PropertyCount();
    internal int GetPropertyCount();
    internal void GetPropertyName(int index, IntPtr name, int nameCount);
    internal int GetPropertyNameLength(int index);
    public PropertyType GetTypeInfo(int index);
    public int GetPropertyIndex(string name);
    public void SetValueByName(string name, PropertyType type, IntPtr data, int dataSize);
    public void SetValue(int index, PropertyType type, IntPtr data, int dataSize);
    public void GetValueByName(string name, PropertyType type, IntPtr data, int dataSize);
    public void GetValue(int index, PropertyType type, IntPtr data, int dataSize);
    public int GetValueSize(int index);
    public Properties GetSubProperties(int index);
}
public enum SharpDX.Direct2D1.Property : Enum {
    public int value__;
    public static Property Clsid;
    public static Property DisplayName;
    public static Property Author;
    public static Property Category;
    public static Property Description;
    public static Property Inputs;
    public static Property Cached;
    public static Property Precision;
    public static Property MinimumInputs;
    public static Property MaximumInputs;
}
internal class SharpDX.Direct2D1.PropertyBinding : object {
    private NativeGetSet nativeGetSet;
    [CompilerGeneratedAttribute]
private PropertyBindingAttribute <Attribute>k__BackingField;
    public string PropertyName;
    internal IntPtr SetFunction;
    internal IntPtr GetFunction;
    public string TypeName { get; }
    public PropertyBindingAttribute Attribute { get; private set; }
    public string get_TypeName();
    [CompilerGeneratedAttribute]
public PropertyBindingAttribute get_Attribute();
    [CompilerGeneratedAttribute]
private void set_Attribute(PropertyBindingAttribute value);
    public static PropertyBinding Get(Type customEffectType, PropertyInfo propertyInfo);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[AttributeUsageAttribute("128")]
public class SharpDX.Direct2D1.PropertyBindingAttribute : Attribute {
    private PropertyType bindingType;
    private int order;
    private string min;
    private string max;
    private string defaultValue;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyType <Type>k__BackingField;
    public PropertyType BindingType { get; }
    public int Order { get; }
    public string DisplayName { get; public set; }
    public PropertyType Type { get; public set; }
    public string Min { get; }
    public string Max { get; }
    public string Default { get; }
    public PropertyBindingAttribute(int order, string min, string max, string defaultValue);
    public PropertyBindingAttribute(PropertyType bindingType, int order, string min, string max, string defaultValue);
    public PropertyType get_BindingType();
    public int get_Order();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public PropertyType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(PropertyType value);
    public string get_Min();
    public string get_Max();
    public string get_Default();
}
public enum SharpDX.Direct2D1.PropertyType : Enum {
    public int value__;
    public static PropertyType Unknown;
    public static PropertyType String;
    public static PropertyType Bool;
    public static PropertyType UInt32;
    public static PropertyType Int32;
    public static PropertyType Float;
    public static PropertyType Vector2;
    public static PropertyType Vector3;
    public static PropertyType Vector4;
    public static PropertyType Blob;
    public static PropertyType IUnknown;
    public static PropertyType Enum;
    public static PropertyType Array;
    public static PropertyType Clsid;
    public static PropertyType Matrix3x2;
    public static PropertyType Matrix4x3;
    public static PropertyType Matrix4x4;
    public static PropertyType Matrix5x4;
    public static PropertyType ColorContext;
}
public static class SharpDX.Direct2D1.PropertyTypeHelper : object {
    public static string ConvertToString(PropertyType propertyType);
}
public class SharpDX.Direct2D1.QuadraticBezierSegment : ValueType {
    public RawVector2 Point1;
    public RawVector2 Point2;
}
[GuidAttribute("2cd906ac-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.RadialGradientBrush : Brush {
    public RawVector2 Center { get; public set; }
    public RawVector2 GradientOriginOffset { get; public set; }
    public float RadiusX { get; public set; }
    public float RadiusY { get; public set; }
    public GradientStopCollection GradientStopCollection { get; }
    public RadialGradientBrush(RenderTarget renderTarget, RadialGradientBrushProperties& radialGradientBrushProperties, GradientStopCollection gradientStopCollection);
    public RadialGradientBrush(RenderTarget renderTarget, RadialGradientBrushProperties radialGradientBrushProperties, GradientStopCollection gradientStopCollection);
    public RadialGradientBrush(RenderTarget renderTarget, RadialGradientBrushProperties radialGradientBrushProperties, BrushProperties brushProperties, GradientStopCollection gradientStopCollection);
    public RadialGradientBrush(RenderTarget renderTarget, RadialGradientBrushProperties& radialGradientBrushProperties, Nullable`1<BrushProperties> brushProperties, GradientStopCollection gradientStopCollection);
    public RadialGradientBrush(IntPtr nativePtr);
    public static RadialGradientBrush op_Explicit(IntPtr nativePtr);
    public RawVector2 get_Center();
    public void set_Center(RawVector2 value);
    public RawVector2 get_GradientOriginOffset();
    public void set_GradientOriginOffset(RawVector2 value);
    public float get_RadiusX();
    public void set_RadiusX(float value);
    public float get_RadiusY();
    public void set_RadiusY(float value);
    public GradientStopCollection get_GradientStopCollection();
    internal void SetCenter(RawVector2 center);
    internal void SetGradientOriginOffset(RawVector2 gradientOriginOffset);
    internal void SetRadiusX(float radiusX);
    internal void SetRadiusY(float radiusY);
    internal RawVector2 GetCenter();
    internal RawVector2 GetGradientOriginOffset();
    internal float GetRadiusX();
    internal float GetRadiusY();
    internal void GetGradientStopCollection(GradientStopCollection& gradientStopCollection);
}
public class SharpDX.Direct2D1.RadialGradientBrushProperties : ValueType {
    public RawVector2 Center;
    public RawVector2 GradientOriginOffset;
    public float RadiusX;
    public float RadiusY;
}
[GuidAttribute("2cd906a2-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.RectangleGeometry : Geometry {
    public RawRectangleF Rectangle { get; }
    public RectangleGeometry(Factory factory, RawRectangleF rectangle);
    public RectangleGeometry(IntPtr nativePtr);
    public static RectangleGeometry op_Explicit(IntPtr nativePtr);
    public RawRectangleF get_Rectangle();
    internal void GetRectangle(RawRectangleF& rect);
}
[GuidAttribute("519ae1bd-d19a-420d-b849-364f594776b7")]
public class SharpDX.Direct2D1.RenderInformation : ComObject {
    unknown RawBool Cached {public set; }
    unknown int InstructionCountHint {public set; }
    public RenderInformation(IntPtr nativePtr);
    public static RenderInformation op_Explicit(IntPtr nativePtr);
    public void set_Cached(RawBool value);
    public void set_InstructionCountHint(int value);
    public void SetInputDescription(int inputIndex, InputDescription inputDescription);
    public void SetOutputBuffer(BufferPrecision bufferPrecision, ChannelDepth channelDepth);
    internal void SetCached(RawBool isCached);
    internal void SetInstructionCountHint(int instructionCount);
}
public class SharpDX.Direct2D1.RenderingControls : ValueType {
    public BufferPrecision BufferPrecision;
    public Size2 TileSize;
}
public enum SharpDX.Direct2D1.RenderingPriority : Enum {
    public int value__;
    public static RenderingPriority Normal;
    public static RenderingPriority Low;
}
[GuidAttribute("2cd90694-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.RenderTarget : Resource {
    private float _strokeWidth;
    public static float DefaultStrokeWidth;
    public float StrokeWidth { get; public set; }
    public Size2F DotsPerInch { get; public set; }
    public RawMatrix3x2 Transform { get; public set; }
    public AntialiasMode AntialiasMode { get; public set; }
    public TextAntialiasMode TextAntialiasMode { get; public set; }
    public RenderingParams TextRenderingParams { get; public set; }
    public PixelFormat PixelFormat { get; }
    public Size2F Size { get; }
    public Size2 PixelSize { get; }
    public int MaximumBitmapSize { get; }
    public RenderTarget(Factory factory, Surface dxgiSurface, RenderTargetProperties properties);
    public RenderTarget(IntPtr nativePtr);
    public float get_StrokeWidth();
    public void set_StrokeWidth(float value);
    public void DrawBitmap(Bitmap bitmap, float opacity, BitmapInterpolationMode interpolationMode);
    public void DrawBitmap(Bitmap bitmap, RawRectangleF destinationRectangle, float opacity, BitmapInterpolationMode interpolationMode);
    public void DrawBitmap(Bitmap bitmap, float opacity, BitmapInterpolationMode interpolationMode, RawRectangleF sourceRectangle);
    public void DrawEllipse(Ellipse ellipse, Brush brush);
    public void DrawEllipse(Ellipse ellipse, Brush brush, float strokeWidth);
    public void DrawGeometry(Geometry geometry, Brush brush);
    public void DrawGeometry(Geometry geometry, Brush brush, float strokeWidth);
    public void DrawLine(RawVector2 point0, RawVector2 point1, Brush brush);
    public void DrawLine(RawVector2 point0, RawVector2 point1, Brush brush, float strokeWidth);
    public void DrawRectangle(RawRectangleF rect, Brush brush);
    public void DrawRectangle(RawRectangleF rect, Brush brush, float strokeWidth);
    public void DrawRoundedRectangle(RoundedRectangle roundedRect, Brush brush);
    public void DrawRoundedRectangle(RoundedRectangle roundedRect, Brush brush, float strokeWidth);
    public void DrawRoundedRectangle(RoundedRectangle roundedRect, Brush brush, float strokeWidth, StrokeStyle strokeStyle);
    public void DrawText(string text, TextFormat textFormat, RawRectangleF layoutRect, Brush defaultForegroundBrush);
    public void DrawText(string text, TextFormat textFormat, RawRectangleF layoutRect, Brush defaultForegroundBrush, DrawTextOptions options);
    public void DrawText(string text, TextFormat textFormat, RawRectangleF layoutRect, Brush defaultForegroundBrush, DrawTextOptions options, MeasuringMode measuringMode);
    public void DrawTextLayout(RawVector2 origin, TextLayout textLayout, Brush defaultForegroundBrush);
    public void EndDraw(Int64& tag1, Int64& tag2);
    public void EndDraw();
    public void FillGeometry(Geometry geometry, Brush brush);
    public void FillOpacityMask(Bitmap opacityMask, Brush brush, OpacityMaskContent content);
    public void FillRoundedRectangle(RoundedRectangle roundedRect, Brush brush);
    public void Flush();
    public Size2F get_DotsPerInch();
    public void set_DotsPerInch(Size2F value);
    public static RenderTarget op_Explicit(IntPtr nativePtr);
    public RawMatrix3x2 get_Transform();
    public void set_Transform(RawMatrix3x2 value);
    public AntialiasMode get_AntialiasMode();
    public void set_AntialiasMode(AntialiasMode value);
    public TextAntialiasMode get_TextAntialiasMode();
    public void set_TextAntialiasMode(TextAntialiasMode value);
    public RenderingParams get_TextRenderingParams();
    public void set_TextRenderingParams(RenderingParams value);
    public PixelFormat get_PixelFormat();
    public Size2F get_Size();
    public Size2 get_PixelSize();
    public int get_MaximumBitmapSize();
    internal void CreateBitmap(Size2 size, IntPtr srcData, int pitch, BitmapProperties bitmapProperties, Bitmap bitmap);
    internal void CreateBitmapFromWicBitmap(BitmapSource wicBitmapSource, Nullable`1<BitmapProperties> bitmapProperties, Bitmap& bitmap);
    internal void CreateSharedBitmap(Guid riid, IntPtr data, Nullable`1<BitmapProperties> bitmapProperties, Bitmap bitmap);
    internal void CreateBitmapBrush(Bitmap bitmap, Nullable`1<BitmapBrushProperties> bitmapBrushProperties, Nullable`1<BrushProperties> brushProperties, BitmapBrush bitmapBrush);
    internal void CreateSolidColorBrush(RawColor4 color, Nullable`1<BrushProperties> brushProperties, SolidColorBrush solidColorBrush);
    internal void CreateGradientStopCollection(GradientStop[] gradientStops, int gradientStopsCount, Gamma colorInterpolationGamma, ExtendMode extendMode, GradientStopCollection gradientStopCollection);
    internal void CreateLinearGradientBrush(LinearGradientBrushProperties linearGradientBrushProperties, Nullable`1<BrushProperties> brushProperties, GradientStopCollection gradientStopCollection, LinearGradientBrush linearGradientBrush);
    internal void CreateRadialGradientBrush(RadialGradientBrushProperties& radialGradientBrushProperties, Nullable`1<BrushProperties> brushProperties, GradientStopCollection gradientStopCollection, RadialGradientBrush radialGradientBrush);
    internal void CreateCompatibleRenderTarget(Nullable`1<Size2F> desiredSize, Nullable`1<Size2> desiredPixelSize, Nullable`1<PixelFormat> desiredFormat, CompatibleRenderTargetOptions options, BitmapRenderTarget bitmapRenderTarget);
    internal void CreateLayer(Nullable`1<Size2F> size, Layer layer);
    internal void CreateMesh(Mesh mesh);
    public void DrawLine(RawVector2 point0, RawVector2 point1, Brush brush, float strokeWidth, StrokeStyle strokeStyle);
    public void DrawRectangle(RawRectangleF rect, Brush brush, float strokeWidth, StrokeStyle strokeStyle);
    public void FillRectangle(RawRectangleF rect, Brush brush);
    public void DrawRoundedRectangle(RoundedRectangle& roundedRect, Brush brush, float strokeWidth, StrokeStyle strokeStyle);
    public void FillRoundedRectangle(RoundedRectangle& roundedRect, Brush brush);
    public void DrawEllipse(Ellipse ellipse, Brush brush, float strokeWidth, StrokeStyle strokeStyle);
    public void FillEllipse(Ellipse ellipse, Brush brush);
    public void DrawGeometry(Geometry geometry, Brush brush, float strokeWidth, StrokeStyle strokeStyle);
    public void FillGeometry(Geometry geometry, Brush brush, Brush opacityBrush);
    public void FillMesh(Mesh mesh, Brush brush);
    public void FillOpacityMask(Bitmap opacityMask, Brush brush, OpacityMaskContent content, Nullable`1<RawRectangleF> destinationRectangle, Nullable`1<RawRectangleF> sourceRectangle);
    public void DrawBitmap(Bitmap bitmap, Nullable`1<RawRectangleF> destinationRectangle, float opacity, BitmapInterpolationMode interpolationMode, Nullable`1<RawRectangleF> sourceRectangle);
    public void DrawText(string text, int stringLength, TextFormat textFormat, RawRectangleF layoutRect, Brush defaultFillBrush, DrawTextOptions options, MeasuringMode measuringMode);
    public void DrawTextLayout(RawVector2 origin, TextLayout textLayout, Brush defaultFillBrush, DrawTextOptions options);
    public void DrawGlyphRun(RawVector2 baselineOrigin, GlyphRun glyphRun, Brush foregroundBrush, MeasuringMode measuringMode);
    internal void SetTransform(RawMatrix3x2& transform);
    internal void GetTransform(RawMatrix3x2& transform);
    internal void SetAntialiasMode(AntialiasMode antialiasMode);
    internal AntialiasMode GetAntialiasMode();
    internal void SetTextAntialiasMode(TextAntialiasMode textAntialiasMode);
    internal TextAntialiasMode GetTextAntialiasMode();
    internal void SetTextRenderingParams(RenderingParams textRenderingParams);
    internal void GetTextRenderingParams(RenderingParams& textRenderingParams);
    public void SetTags(long tag1, long tag2);
    public void GetTags(Int64& tag1, Int64& tag2);
    public void PushLayer(LayerParameters& layerParameters, Layer layer);
    public void PopLayer();
    public void Flush(Int64& tag1, Int64& tag2);
    public void SaveDrawingState(DrawingStateBlock drawingStateBlock);
    public void RestoreDrawingState(DrawingStateBlock drawingStateBlock);
    public void PushAxisAlignedClip(RawRectangleF clipRect, AntialiasMode antialiasMode);
    public void PopAxisAlignedClip();
    public void Clear(Nullable`1<RawColor4> clearColor);
    public void BeginDraw();
    public Result TryEndDraw(Int64& tag1, Int64& tag2);
    internal PixelFormat GetPixelFormat();
    internal void SetDpi(float dpiX, float dpiY);
    internal void GetDpi(Single& dpiX, Single& dpiY);
    internal Size2F GetSize();
    internal Size2 GetPixelSize();
    internal int GetMaximumBitmapSize();
    public RawBool IsSupported(RenderTargetProperties& renderTargetProperties);
}
public class SharpDX.Direct2D1.RenderTargetProperties : ValueType {
    public RenderTargetType Type;
    public PixelFormat PixelFormat;
    public float DpiX;
    public float DpiY;
    public RenderTargetUsage Usage;
    public FeatureLevel MinLevel;
    public RenderTargetProperties(PixelFormat pixelFormat);
    public RenderTargetProperties(RenderTargetType type, PixelFormat pixelFormat, float dpiX, float dpiY, RenderTargetUsage usage, FeatureLevel minLevel);
}
public enum SharpDX.Direct2D1.RenderTargetType : Enum {
    public int value__;
    public static RenderTargetType Default;
    public static RenderTargetType Software;
    public static RenderTargetType Hardware;
}
public enum SharpDX.Direct2D1.RenderTargetUsage : Enum {
    public int value__;
    public static RenderTargetUsage None;
    public static RenderTargetUsage ForceBitmapRemoting;
    public static RenderTargetUsage GdiCompatible;
}
[GuidAttribute("2cd90691-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.Resource : ComObject {
    public Factory Factory { get; }
    public Resource(IntPtr nativePtr);
    public static Resource op_Explicit(IntPtr nativePtr);
    public Factory get_Factory();
    internal void GetFactory(Factory& factory);
}
[GuidAttribute("688d15c3-02b0-438d-b13a-d1b44c32c39a")]
public class SharpDX.Direct2D1.ResourceTexture : ComObject {
    public ResourceTexture(EffectContext context, Guid resourceId, ResourceTextureProperties resourceTextureProperties);
    public ResourceTexture(EffectContext context, Guid resourceId, ResourceTextureProperties resourceTextureProperties, Byte[] data, Int32[] strides);
    public ResourceTexture(IntPtr nativePtr);
    private static void CreateResourceTexture(EffectContext context, Guid resourceId, ResourceTextureProperties resourceTextureProperties, Byte[] data, Int32[] strides, ResourceTexture outTexture);
    public static ResourceTexture op_Explicit(IntPtr nativePtr);
    public void Update(Int32[] minimumExtents, Int32[] maximimumExtents, Int32[] strides, int dimensions, Byte[] data, int dataCount);
}
public class SharpDX.Direct2D1.ResourceTextureProperties : object {
    [CompilerGeneratedAttribute]
private Int32[] <Extents>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtendMode[] <ExtendModes>k__BackingField;
    internal IntPtr ExtentsPointer;
    public int Dimensions;
    public BufferPrecision BufferPrecision;
    public ChannelDepth ChannelDepth;
    public Filter Filter;
    internal IntPtr ExtendModesPointer;
    public Int32[] Extents { get; public set; }
    public ExtendMode[] ExtendModes { get; public set; }
    [CompilerGeneratedAttribute]
public Int32[] get_Extents();
    [CompilerGeneratedAttribute]
public void set_Extents(Int32[] value);
    [CompilerGeneratedAttribute]
public ExtendMode[] get_ExtendModes();
    [CompilerGeneratedAttribute]
public void set_ExtendModes(ExtendMode[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct2D1.ResultCode : object {
    public static ResultDescriptor WrongState;
    public static ResultDescriptor NotInitializeD;
    public static ResultDescriptor UnsupportedOperation;
    public static ResultDescriptor ScannerFailed;
    public static ResultDescriptor ScreenAccessDenied;
    public static ResultDescriptor DisplayStateInvalid;
    public static ResultDescriptor ZeroVector;
    public static ResultDescriptor InternalError;
    public static ResultDescriptor DisplayFormatNotSupported;
    public static ResultDescriptor InvalidCall;
    public static ResultDescriptor NoHardwareDevice;
    public static ResultDescriptor RecreateTarget;
    public static ResultDescriptor TooManyShaderElements;
    public static ResultDescriptor ShaderCompileFailed;
    public static ResultDescriptor MaximumTextureSizeExceeded;
    public static ResultDescriptor UnsupportedVersion;
    public static ResultDescriptor BadNumber;
    public static ResultDescriptor WrongFactory;
    public static ResultDescriptor LayerAlreadyInUse;
    public static ResultDescriptor PopCallDidNotMatchPush;
    public static ResultDescriptor WrongResourceDomain;
    public static ResultDescriptor PushPopUnbalanced;
    public static ResultDescriptor RenderTargetHasLayerOrCliprect;
    public static ResultDescriptor IncompatibleBrushTypes;
    public static ResultDescriptor Win32Error;
    public static ResultDescriptor TargetNotGdiCompatible;
    public static ResultDescriptor TextEffectIsWrongType;
    public static ResultDescriptor TextRendererNotReleased;
    public static ResultDescriptor ExceedsMaximumBitmapSize;
    public static ResultDescriptor InvalidGraphConfiguration;
    public static ResultDescriptor InvalidInternalGraphConfiguration;
    public static ResultDescriptor CyclicGraph;
    public static ResultDescriptor BitmapCannotDraw;
    public static ResultDescriptor OutstandingBitmapReferences;
    public static ResultDescriptor OriginalTargetNotBound;
    public static ResultDescriptor InvalidTarget;
    public static ResultDescriptor BitmapBoundAsTarget;
    public static ResultDescriptor InsufficientDeviceCapabilities;
    public static ResultDescriptor IntermediateTooLarge;
    public static ResultDescriptor EffectIsNotRegistered;
    public static ResultDescriptor InvalidProperty;
    public static ResultDescriptor NoSubProperties;
    public static ResultDescriptor PrintJobClosed;
    public static ResultDescriptor PrintFormatNotSupported;
    public static ResultDescriptor TooManyTransformInputs;
    public static ResultDescriptor InvalidGlyphImage;
    private static ResultCode();
}
public enum SharpDX.Direct2D1.RgbToHueOutputColorSpace : Enum {
    public int value__;
    public static RgbToHueOutputColorSpace HueSaturationValue;
    public static RgbToHueOutputColorSpace HueSaturationLightness;
}
public enum SharpDX.Direct2D1.RgbToHueProperty : Enum {
    public int value__;
    public static RgbToHueProperty OutputColorSpace;
}
public class SharpDX.Direct2D1.RoundedRectangle : ValueType {
    public RawRectangleF Rect;
    public float RadiusX;
    public float RadiusY;
}
[GuidAttribute("2cd906a3-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.RoundedRectangleGeometry : Geometry {
    public RoundedRectangle RoundedRect { get; }
    public RoundedRectangleGeometry(Factory factory, RoundedRectangle roundedRectangle);
    public RoundedRectangleGeometry(IntPtr nativePtr);
    public static RoundedRectangleGeometry op_Explicit(IntPtr nativePtr);
    public RoundedRectangle get_RoundedRect();
    internal void GetRoundedRect(RoundedRectangle& roundedRect);
}
public enum SharpDX.Direct2D1.SaturationProperties : Enum {
    public int value__;
    public static SaturationProperties Saturation;
}
public enum SharpDX.Direct2D1.ScaleInterpolationMode : Enum {
    public int value__;
    public static ScaleInterpolationMode NearestNeighbor;
    public static ScaleInterpolationMode Linear;
    public static ScaleInterpolationMode Cubic;
    public static ScaleInterpolationMode MultiSampleLinear;
    public static ScaleInterpolationMode Anisotropic;
    public static ScaleInterpolationMode HighQualityCubic;
}
public enum SharpDX.Direct2D1.ScaleProperties : Enum {
    public int value__;
    public static ScaleProperties Scale;
    public static ScaleProperties CenterPoint;
    public static ScaleProperties InterpolationMode;
    public static ScaleProperties BorderMode;
    public static ScaleProperties Sharpness;
}
public enum SharpDX.Direct2D1.SepiaProperty : Enum {
    public int value__;
    public static SepiaProperty Intensity;
    public static SepiaProperty AlphaMode;
}
public enum SharpDX.Direct2D1.ShadowOptimization : Enum {
    public int value__;
    public static ShadowOptimization Speed;
    public static ShadowOptimization Balanced;
    public static ShadowOptimization Quality;
}
public enum SharpDX.Direct2D1.ShadowProperties : Enum {
    public int value__;
    public static ShadowProperties BlurStandardDeviation;
    public static ShadowProperties Color;
    public static ShadowProperties Optimization;
}
public enum SharpDX.Direct2D1.SharpenProperty : Enum {
    public int value__;
    public static SharpenProperty Sharpness;
    public static SharpenProperty Threshold;
}
public class SharpDX.Direct2D1.SimpleColorProfile : ValueType {
    public RawVector2 RedPrimary;
    public RawVector2 GreenPrimary;
    public RawVector2 BluePrimary;
    public RawVector2 WhitePointXZ;
    public Gamma1 Gamma;
}
[ShadowAttribute("SharpDX.Direct2D1.SimplifiedGeometrySinkShadow")]
[GuidAttribute("2cd9069e-12e2-11dc-9fed-001143a055f9")]
public interface SharpDX.Direct2D1.SimplifiedGeometrySink {
    public abstract virtual void SetFillMode(FillMode fillMode);
    public abstract virtual void SetSegmentFlags(PathSegment vertexFlags);
    public abstract virtual void BeginFigure(RawVector2 startPoint, FigureBegin figureBegin);
    public abstract virtual void AddLines(RawVector2[] ointsRef);
    public abstract virtual void AddBeziers(BezierSegment[] beziers);
    public abstract virtual void EndFigure(FigureEnd figureEnd);
    public abstract virtual void Close();
}
[GuidAttribute("2cd9069e-12e2-11dc-9fed-001143a055f9")]
internal class SharpDX.Direct2D1.SimplifiedGeometrySinkNative : ComObject {
    unknown FillMode FillMode_ {public set; }
    unknown PathSegment SegmentFlags_ {public set; }
    public SimplifiedGeometrySinkNative(IntPtr nativePtr);
    public sealed virtual void AddBeziers(BezierSegment[] beziers);
    public sealed virtual void AddLines(RawVector2[] points);
    public sealed virtual void BeginFigure(RawVector2 startPoint, FigureBegin figureBegin);
    public sealed virtual void Close();
    public sealed virtual void EndFigure(FigureEnd figureEnd);
    public sealed virtual void SetFillMode(FillMode fillMode);
    public sealed virtual void SetSegmentFlags(PathSegment vertexFlags);
    public static SimplifiedGeometrySinkNative op_Explicit(IntPtr nativePtr);
    public void set_FillMode_(FillMode value);
    public void set_SegmentFlags_(PathSegment value);
    internal void SetFillMode_(FillMode fillMode);
    internal void SetSegmentFlags_(PathSegment vertexFlags);
    internal void BeginFigure_(RawVector2 startPoint, FigureBegin figureBegin);
    internal void AddLines_(RawVector2[] ointsRef, int pointsCount);
    internal void AddBeziers_(BezierSegment[] beziers, int beziersCount);
    internal void EndFigure_(FigureEnd figureEnd);
    internal void Close_();
}
internal class SharpDX.Direct2D1.SimplifiedGeometrySinkShadow : ComObjectShadow {
    private static SimplifiedGeometrySinkVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static SimplifiedGeometrySinkShadow();
    public static IntPtr ToIntPtr(SimplifiedGeometrySink callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
[GuidAttribute("2cd906a9-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.SolidColorBrush : Brush {
    public RawColor4 Color { get; public set; }
    public SolidColorBrush(RenderTarget renderTarget, RawColor4 color);
    public SolidColorBrush(RenderTarget renderTarget, RawColor4 color, Nullable`1<BrushProperties> brushProperties);
    public SolidColorBrush(IntPtr nativePtr);
    public static SolidColorBrush op_Explicit(IntPtr nativePtr);
    public RawColor4 get_Color();
    public void set_Color(RawColor4 value);
    internal void SetColor(RawColor4 color);
    internal RawColor4 GetColor();
}
[ShadowAttribute("SharpDX.Direct2D1.SourceTransformShadow")]
[GuidAttribute("db1800dd-0c34-4cf9-be90-31cc0a5653e1")]
public interface SharpDX.Direct2D1.SourceTransform {
    public abstract virtual void SetRenderInformation(RenderInformation renderInfo);
    public abstract virtual void Draw(Bitmap1 target, RawRectangle drawRect, RawPoint targetOrigin);
}
[GuidAttribute("db1800dd-0c34-4cf9-be90-31cc0a5653e1")]
public class SharpDX.Direct2D1.SourceTransformNative : TransformNative {
    unknown RenderInformation RenderInfo_ {public set; }
    public SourceTransformNative(IntPtr nativePtr);
    public sealed virtual void SetRenderInformation(RenderInformation renderInfo);
    public sealed virtual void Draw(Bitmap1 target, RawRectangle drawRect, RawPoint targetOrigin);
    public static SourceTransformNative op_Explicit(IntPtr nativePtr);
    public void set_RenderInfo_(RenderInformation value);
    internal void SetRenderInfo_(RenderInformation renderInfo);
    internal void Draw_(Bitmap1 target, RawRectangle drawRect, RawPoint targetOrigin);
}
internal class SharpDX.Direct2D1.SourceTransformShadow : TransformShadow {
    private static SourceTransformVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static SourceTransformShadow();
    public static IntPtr ToIntPtr(SourceTransform callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
public enum SharpDX.Direct2D1.SpotDiffuseProperties : Enum {
    public int value__;
    public static SpotDiffuseProperties LightPosition;
    public static SpotDiffuseProperties PointsAt;
    public static SpotDiffuseProperties Focus;
    public static SpotDiffuseProperties LimitingConeAngle;
    public static SpotDiffuseProperties DiffuseConstant;
    public static SpotDiffuseProperties SurfaceScale;
    public static SpotDiffuseProperties Color;
    public static SpotDiffuseProperties KernelUnitLength;
    public static SpotDiffuseProperties ScaleMode;
}
public enum SharpDX.Direct2D1.SpotDiffuseScaleMode : Enum {
    public int value__;
    public static SpotDiffuseScaleMode NearestNeighbor;
    public static SpotDiffuseScaleMode Linear;
    public static SpotDiffuseScaleMode Cubic;
    public static SpotDiffuseScaleMode MultiSampleLinear;
    public static SpotDiffuseScaleMode Anisotropic;
    public static SpotDiffuseScaleMode HighQualityCubic;
}
public enum SharpDX.Direct2D1.SpotSpecularProperties : Enum {
    public int value__;
    public static SpotSpecularProperties LightPosition;
    public static SpotSpecularProperties PointsAt;
    public static SpotSpecularProperties Focus;
    public static SpotSpecularProperties LimitingConeAngle;
    public static SpotSpecularProperties SpecularExponent;
    public static SpotSpecularProperties SpecularConstant;
    public static SpotSpecularProperties SurfaceScale;
    public static SpotSpecularProperties Color;
    public static SpotSpecularProperties KernelUnitLength;
    public static SpotSpecularProperties ScaleMode;
}
public enum SharpDX.Direct2D1.SpotSpecularScaleMode : Enum {
    public int value__;
    public static SpotSpecularScaleMode NearestNeighbor;
    public static SpotSpecularScaleMode Linear;
    public static SpotSpecularScaleMode Cubic;
    public static SpotSpecularScaleMode MultiSampleLinear;
    public static SpotSpecularScaleMode Anisotropic;
    public static SpotSpecularScaleMode HighQualityCubic;
}
[GuidAttribute("4dc583bf-3a10-438a-8722-e9765224f1f1")]
public class SharpDX.Direct2D1.SpriteBatch : Resource {
    public int SpriteCount { get; }
    public SpriteBatch(DeviceContext3 context3);
    public SpriteBatch(IntPtr nativePtr);
    public static SpriteBatch op_Explicit(IntPtr nativePtr);
    public int get_SpriteCount();
    public void AddSprites(int spriteCount, RawRectangleF[] destinationRectangles, RawRectangle[] sourceRectangles, RawColor4[] colors, RawMatrix3x2[] transforms, int destinationRectanglesStride, int sourceRectanglesStride, int colorsStride, int transformsStride);
    public void SetSprites(int startIndex, int spriteCount, RawRectangleF[] destinationRectangles, RawRectangle[] sourceRectangles, RawColor4[] colors, RawMatrix3x2[] transforms, int destinationRectanglesStride, int sourceRectanglesStride, int colorsStride, int transformsStride);
    public void GetSprites(int startIndex, int spriteCount, RawRectangleF[] destinationRectangles, RawRectangle[] sourceRectangles, RawColor4[] colors, RawMatrix3x2[] transforms);
    internal int GetSpriteCount();
    public void Clear();
}
[FlagsAttribute]
public enum SharpDX.Direct2D1.SpriteOptions : Enum {
    public int value__;
    public static SpriteOptions None;
    public static SpriteOptions ClampToSourceRectangle;
}
public enum SharpDX.Direct2D1.StraightenProperty : Enum {
    public int value__;
    public static StraightenProperty Angle;
    public static StraightenProperty MaintainSize;
    public static StraightenProperty ScaleMode;
}
public enum SharpDX.Direct2D1.StraightenScaleMode : Enum {
    public int value__;
    public static StraightenScaleMode NearestNeighbor;
    public static StraightenScaleMode Linear;
    public static StraightenScaleMode Cubic;
    public static StraightenScaleMode MultiSampleLinear;
    public static StraightenScaleMode Anisotropic;
}
[GuidAttribute("2cd9069d-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.StrokeStyle : Resource {
    public CapStyle StartCap { get; }
    public CapStyle EndCap { get; }
    public CapStyle DashCap { get; }
    public float MiterLimit { get; }
    public LineJoin LineJoin { get; }
    public float DashOffset { get; }
    public DashStyle DashStyle { get; }
    public int DashesCount { get; }
    public StrokeStyle(Factory factory, StrokeStyleProperties properties);
    public StrokeStyle(Factory factory, StrokeStyleProperties properties, Single[] dashes);
    public StrokeStyle(IntPtr nativePtr);
    public static StrokeStyle op_Explicit(IntPtr nativePtr);
    public CapStyle get_StartCap();
    public CapStyle get_EndCap();
    public CapStyle get_DashCap();
    public float get_MiterLimit();
    public LineJoin get_LineJoin();
    public float get_DashOffset();
    public DashStyle get_DashStyle();
    public int get_DashesCount();
    internal CapStyle GetStartCap();
    internal CapStyle GetEndCap();
    internal CapStyle GetDashCap();
    internal float GetMiterLimit();
    internal LineJoin GetLineJoin();
    internal float GetDashOffset();
    internal DashStyle GetDashStyle();
    internal int GetDashesCount();
    public void GetDashes(Single[] dashes, int dashesCount);
}
[GuidAttribute("10a72a66-e91c-43f4-993f-ddf4b82b0b4a")]
public class SharpDX.Direct2D1.StrokeStyle1 : StrokeStyle {
    public StrokeTransformType StrokeTransformType { get; }
    public StrokeStyle1(Factory1 factory, StrokeStyleProperties1 strokeStyleProperties);
    public StrokeStyle1(Factory1 factory, StrokeStyleProperties1 strokeStyleProperties, Single[] dashes);
    public StrokeStyle1(IntPtr nativePtr);
    public static StrokeStyle1 op_Explicit(IntPtr nativePtr);
    public StrokeTransformType get_StrokeTransformType();
    internal StrokeTransformType GetStrokeTransformType();
}
public class SharpDX.Direct2D1.StrokeStyleProperties : ValueType {
    public CapStyle StartCap;
    public CapStyle EndCap;
    public CapStyle DashCap;
    public LineJoin LineJoin;
    public float MiterLimit;
    public DashStyle DashStyle;
    public float DashOffset;
}
public class SharpDX.Direct2D1.StrokeStyleProperties1 : ValueType {
    public CapStyle StartCap;
    public CapStyle EndCap;
    public CapStyle DashCap;
    public LineJoin LineJoin;
    public float MiterLimit;
    public DashStyle DashStyle;
    public float DashOffset;
    public StrokeTransformType TransformType;
}
public enum SharpDX.Direct2D1.StrokeTransformType : Enum {
    public int value__;
    public static StrokeTransformType Normal;
    public static StrokeTransformType Fixed;
    public static StrokeTransformType Hairline;
}
public enum SharpDX.Direct2D1.SubProperty : Enum {
    public int value__;
    public static SubProperty DisplayName;
    public static SubProperty Isreadonly;
    public static SubProperty Minimum;
    public static SubProperty Maximum;
    public static SubProperty Default;
    public static SubProperty Fields;
    public static SubProperty Index;
}
public enum SharpDX.Direct2D1.SvgAspectAlign : Enum {
    public int value__;
    public static SvgAspectAlign None;
    public static SvgAspectAlign XMinimumYMinimum;
    public static SvgAspectAlign XMidYMinimum;
    public static SvgAspectAlign XMaximumYMinimum;
    public static SvgAspectAlign XMinimumYMid;
    public static SvgAspectAlign XMidYMid;
    public static SvgAspectAlign XMaximumYMid;
    public static SvgAspectAlign XMinimumYMaximum;
    public static SvgAspectAlign XMidYMaximum;
    public static SvgAspectAlign XMaximumYMaximum;
}
public enum SharpDX.Direct2D1.SvgAspectScaling : Enum {
    public int value__;
    public static SvgAspectScaling Meet;
    public static SvgAspectScaling Slice;
}
[GuidAttribute("c9cdb0dd-f8c9-4e70-b7c2-301c80292c5e")]
public class SharpDX.Direct2D1.SvgAttribute : Resource {
    public SvgElement Element { get; }
    public SvgAttribute(IntPtr nativePtr);
    public SvgAttribute Clone();
    public static SvgAttribute op_Explicit(IntPtr nativePtr);
    public SvgElement get_Element();
    internal void GetElement(SvgElement& element);
    internal void Clone(SvgAttribute& attribute);
}
public enum SharpDX.Direct2D1.SvgAttributePodType : Enum {
    public int value__;
    public static SvgAttributePodType Float;
    public static SvgAttributePodType Color;
    public static SvgAttributePodType FillMode;
    public static SvgAttributePodType Display;
    public static SvgAttributePodType Overflow;
    public static SvgAttributePodType LineCap;
    public static SvgAttributePodType LineJoin;
    public static SvgAttributePodType Visibility;
    public static SvgAttributePodType Matrix;
    public static SvgAttributePodType UnitType;
    public static SvgAttributePodType ExtendMode;
    public static SvgAttributePodType PreserveAspectRatio;
    public static SvgAttributePodType ViewBox;
    public static SvgAttributePodType Length;
}
public enum SharpDX.Direct2D1.SvgAttributeStringType : Enum {
    public int value__;
    public static SvgAttributeStringType Svg;
    public static SvgAttributeStringType Id;
}
public enum SharpDX.Direct2D1.SvgDisplay : Enum {
    public int value__;
    public static SvgDisplay Inline;
    public static SvgDisplay None;
}
[GuidAttribute("86b88e4d-afa4-4d7b-88e4-68a51c4a0aec")]
public class SharpDX.Direct2D1.SvgDocument : Resource {
    public Size2F ViewportSize { get; public set; }
    public SvgElement Root { get; public set; }
    public SvgDocument(IntPtr nativePtr);
    public SvgElement FindElementById(string id);
    public static SvgDocument op_Explicit(IntPtr nativePtr);
    public Size2F get_ViewportSize();
    public void set_ViewportSize(Size2F value);
    public SvgElement get_Root();
    public void set_Root(SvgElement value);
    internal void SetViewportSize(Size2F viewportSize);
    internal Size2F GetViewportSize();
    internal void SetRoot(SvgElement root);
    internal void GetRoot(SvgElement& root);
    private Result TryFindElementById_(string id, SvgElement& svgElement);
    public void Serialize(IStream outputXmlStream, SvgElement subtree);
    public void Deserialize(IStream inputXmlStream, SvgElement& subtree);
    public void CreatePaint(SvgPaintType paintType, Nullable`1<RawColor4> color, string id, SvgPaint& aintRef);
    public void CreateStrokeDashArray(SvgLength[] dashes, int dashesCount, SvgStrokeDashArray& strokeDashArray);
    public void CreatePointCollection(RawVector2[] ointsRef, int pointsCount, SvgPointCollection& ointCollectionRef);
    public void CreatePathData(Single[] segmentData, int segmentDataCount, SvgPathCommand[] commands, int commandsCount, SvgPathData& athDataRef);
}
[GuidAttribute("ac7b67a6-183e-49c1-a823-0ebe40b0db29")]
public class SharpDX.Direct2D1.SvgElement : Resource {
    public SvgElement[] Children { get; }
    public string TagName { get; }
    public SvgDocument Document { get; }
    public int TagNameLength { get; }
    public RawBool IsTextContent { get; }
    public SvgElement Parent { get; }
    public SvgElement FirstChild { get; }
    public SvgElement LastChild { get; }
    public int SpecifiedAttributeCount { get; }
    public int TextValueLength { get; }
    public SvgElement(IntPtr nativePtr);
    public SvgElement[] get_Children();
    public string get_TagName();
    public void SetAttributeValue(string name, float value);
    public void GetAttributeValue(string name, Single& value);
    public void SetAttributeValue(string name, RawColor4 color);
    public void GetAttributeValue(string name, RawColor4& color);
    public void SetAttributeValue(string name, FillMode fillMode);
    public void GetAttributeValue(string name, FillMode& fillMode);
    public void SetAttributeValue(string name, SvgDisplay display);
    public void GetAttributeValue(string name, SvgDisplay& display);
    public void SetAttributeValue(string name, SvgOverflow overflow);
    public void GetAttributeValue(string name, SvgOverflow& overflow);
    public void SetAttributeValue(string name, SvgLineJoin lineJoin);
    public void GetAttributeValue(string name, SvgLineJoin& lineJoin);
    public void SetAttributeValue(string name, SvgLineCap lineCap);
    public void GetAttributeValue(string name, SvgLineCap& lineCap);
    public void SetAttributeValue(string name, SvgVisibility visibility);
    public void GetAttributeValue(string name, SvgVisibility& visibility);
    public void SetAttributeValue(string name, RawMatrix3x2 matrix);
    public void GetAttributeValue(string name, RawMatrix3x2& matrix);
    public void SetAttributeValue(string name, SvgUnitType unitType);
    public void GetAttributeValue(string name, SvgUnitType& unitType);
    public void SetAttributeValue(string name, ExtendMode extendMode);
    public void GetAttributeValue(string name, ExtendMode& extendMode);
    public void SetAttributeValue(string name, SvgPreserveAspectRatio preserveAspectRatio);
    public void GetAttributeValue(string name, SvgPreserveAspectRatio& preserveAspectRatio);
    public void SetAttributeValue(string name, SvgLength length);
    public void GetAttributeValue(string name, SvgLength& length);
    public T GetAttributeValue(string name);
    public static SvgElement op_Explicit(IntPtr nativePtr);
    public SvgDocument get_Document();
    public int get_TagNameLength();
    public RawBool get_IsTextContent();
    public SvgElement get_Parent();
    public SvgElement get_FirstChild();
    public SvgElement get_LastChild();
    public int get_SpecifiedAttributeCount();
    public int get_TextValueLength();
    internal void GetDocument(SvgDocument& document);
    public void GetTagName(IntPtr name, int nameCount);
    internal int GetTagNameLength();
    internal RawBool IsTextContent_();
    internal void GetParent(SvgElement& arentRef);
    public RawBool HasChildren();
    internal void GetFirstChild(SvgElement& child);
    internal void GetLastChild(SvgElement& child);
    public void GetPreviousChild(SvgElement referenceChild, SvgElement& reviousChildRef);
    public void GetNextChild(SvgElement referenceChild, SvgElement& nextChild);
    public void InsertChildBefore(SvgElement newChild, SvgElement referenceChild);
    public void AppendChild(SvgElement newChild);
    public void ReplaceChild(SvgElement newChild, SvgElement oldChild);
    public void RemoveChild(SvgElement oldChild);
    public void CreateChild(string tagName, SvgElement& newChild);
    public RawBool IsAttributeSpecified(string name, RawBool& inherited);
    internal int GetSpecifiedAttributeCount();
    public void GetSpecifiedAttributeName(int index, IntPtr name, int nameCount, RawBool& inherited);
    public void GetSpecifiedAttributeNameLength(int index, Int32& nameLength, RawBool& inherited);
    public void RemoveAttribute(string name);
    public void SetTextValue(string name, int nameCount);
    public void GetTextValue(IntPtr name, int nameCount);
    internal int GetTextValueLength();
    public void SetAttributeValue(string name, SvgAttribute value);
    public void SetAttributeValue(string name, SvgAttributePodType type, IntPtr value, int valueSizeInBytes);
    public void SetAttributeValue(string name, SvgAttributeStringType type, string value);
    public void GetAttributeValue(string name, Guid riid, IntPtr& value);
    public void GetAttributeValue(string name, SvgAttributePodType type, IntPtr value, int valueSizeInBytes);
    public void GetAttributeValue(string name, SvgAttributeStringType type, IntPtr value, int valueCount);
    public void GetAttributeValueLength(string name, SvgAttributeStringType type, Int32& valueLength);
}
[GuidAttribute("af671749-d241-4db8-8e41-dcc2e5c1a438")]
public class SharpDX.Direct2D1.SvgGlyphStyle : Resource {
    public Brush Fill { get; public set; }
    public int StrokeDashesCount { get; }
    public SvgGlyphStyle(IntPtr nativePtr);
    public static SvgGlyphStyle op_Explicit(IntPtr nativePtr);
    public Brush get_Fill();
    public void set_Fill(Brush value);
    public int get_StrokeDashesCount();
    internal void SetFill(Brush brush);
    internal void GetFill(Brush& brush);
    public void SetStroke(Brush brush, float strokeWidth, Single[] dashes, int dashesCount, float dashOffset);
    internal int GetStrokeDashesCount();
    public void GetStroke(Brush& brush, Single& strokeWidth, Single[] dashes, int dashesCount, Single& dashOffset);
}
public class SharpDX.Direct2D1.SvgLength : ValueType {
    public float Value;
    public SvgLengthUnits Units;
}
public enum SharpDX.Direct2D1.SvgLengthUnits : Enum {
    public int value__;
    public static SvgLengthUnits Number;
    public static SvgLengthUnits Percentage;
}
public enum SharpDX.Direct2D1.SvgLineCap : Enum {
    public int value__;
    public static SvgLineCap Butt;
    public static SvgLineCap Square;
    public static SvgLineCap Round;
}
public enum SharpDX.Direct2D1.SvgLineJoin : Enum {
    public int value__;
    public static SvgLineJoin Bevel;
    public static SvgLineJoin Miter;
    public static SvgLineJoin Round;
}
public enum SharpDX.Direct2D1.SvgOverflow : Enum {
    public int value__;
    public static SvgOverflow Visible;
    public static SvgOverflow Hidden;
}
[GuidAttribute("d59bab0a-68a2-455b-a5dc-9eb2854e2490")]
public class SharpDX.Direct2D1.SvgPaint : SvgAttribute {
    public SvgPaintType PaintType { get; public set; }
    public RawColor4 Color { get; public set; }
    public int IdLength { get; }
    public SvgPaint(IntPtr nativePtr);
    public static SvgPaint op_Explicit(IntPtr nativePtr);
    public SvgPaintType get_PaintType();
    public void set_PaintType(SvgPaintType value);
    public RawColor4 get_Color();
    public void set_Color(RawColor4 value);
    public int get_IdLength();
    internal void SetPaintType(SvgPaintType paintType);
    internal SvgPaintType GetPaintType();
    internal void SetColor(RawColor4 color);
    internal void GetColor(RawColor4& color);
    public void SetId(string id);
    public void GetId(IntPtr id, int idCount);
    internal int GetIdLength();
}
public enum SharpDX.Direct2D1.SvgPaintType : Enum {
    public int value__;
    public static SvgPaintType None;
    public static SvgPaintType Color;
    public static SvgPaintType CurrentColor;
    public static SvgPaintType Uri;
    public static SvgPaintType UriNone;
    public static SvgPaintType UriColor;
    public static SvgPaintType UriCurrentColor;
}
public enum SharpDX.Direct2D1.SvgPathCommand : Enum {
    public int value__;
    public static SvgPathCommand ClosePath;
    public static SvgPathCommand MoveAbsolute;
    public static SvgPathCommand MoveRelative;
    public static SvgPathCommand LineAbsolute;
    public static SvgPathCommand LineRelative;
    public static SvgPathCommand CubicAbsolute;
    public static SvgPathCommand CubicRelative;
    public static SvgPathCommand QuadradicAbsolute;
    public static SvgPathCommand QuadradicRelative;
    public static SvgPathCommand ArcAbsolute;
    public static SvgPathCommand ArcRelative;
    public static SvgPathCommand HorizontalAbsolute;
    public static SvgPathCommand HorizontalRelative;
    public static SvgPathCommand VerticalAbsolute;
    public static SvgPathCommand VerticalRelative;
    public static SvgPathCommand CubicSmoothAbsolute;
    public static SvgPathCommand CubicSmoothRelative;
    public static SvgPathCommand QuadradicSmoothAbsolute;
    public static SvgPathCommand QuadradicSmoothRelative;
}
[GuidAttribute("c095e4f4-bb98-43d6-9745-4d1b84ec9888")]
public class SharpDX.Direct2D1.SvgPathData : SvgAttribute {
    public int SegmentDataCount { get; }
    public int CommandsCount { get; }
    public SvgPathData(IntPtr nativePtr);
    public static SvgPathData op_Explicit(IntPtr nativePtr);
    public int get_SegmentDataCount();
    public int get_CommandsCount();
    public void RemoveSegmentDataAtEnd(int dataCount);
    public void UpdateSegmentData(Single[] data, int dataCount, int startIndex);
    public void GetSegmentData(Single[] data, int dataCount, int startIndex);
    internal int GetSegmentDataCount();
    public void RemoveCommandsAtEnd(int commandsCount);
    public void UpdateCommands(SvgPathCommand[] commands, int commandsCount, int startIndex);
    public void GetCommands(SvgPathCommand[] commands, int commandsCount, int startIndex);
    internal int GetCommandsCount();
    public void CreatePathGeometry(FillMode fillMode, PathGeometry1& athGeometryRef);
}
[GuidAttribute("9dbe4c0d-3572-4dd9-9825-5530813bb712")]
public class SharpDX.Direct2D1.SvgPointCollection : SvgAttribute {
    public int PointsCount { get; }
    public SvgPointCollection(IntPtr nativePtr);
    public static SvgPointCollection op_Explicit(IntPtr nativePtr);
    public int get_PointsCount();
    public void RemovePointsAtEnd(int pointsCount);
    public void UpdatePoints(RawVector2[] ointsRef, int pointsCount, int startIndex);
    public void GetPoints(RawVector2[] ointsRef, int pointsCount, int startIndex);
    internal int GetPointsCount();
}
public class SharpDX.Direct2D1.SvgPreserveAspectRatio : ValueType {
    public RawBool Defer;
    public SvgAspectAlign Align;
    public SvgAspectScaling MeetOrSlice;
}
[GuidAttribute("f1c0ca52-92a3-4f00-b4ce-f35691efd9d9")]
public class SharpDX.Direct2D1.SvgStrokeDashArray : SvgAttribute {
    public int DashesCount { get; }
    public SvgStrokeDashArray(IntPtr nativePtr);
    public static SvgStrokeDashArray op_Explicit(IntPtr nativePtr);
    public int get_DashesCount();
    public void RemoveDashesAtEnd(int dashesCount);
    public void UpdateDashes(SvgLength[] dashes, int dashesCount, int startIndex);
    public void UpdateDashes(Single[] dashes, int dashesCount, int startIndex);
    public void GetDashes(SvgLength[] dashes, int dashesCount, int startIndex);
    public void GetDashes(Single[] dashes, int dashesCount, int startIndex);
    internal int GetDashesCount();
}
public enum SharpDX.Direct2D1.SvgUnitType : Enum {
    public int value__;
    public static SvgUnitType UserSpaceOnUse;
    public static SvgUnitType ObjectBoundingBox;
}
public class SharpDX.Direct2D1.SvgViewBox : ValueType {
    public float X;
    public float Y;
    public float Width;
    public float Height;
}
public enum SharpDX.Direct2D1.SvgVisibility : Enum {
    public int value__;
    public static SvgVisibility Visible;
    public static SvgVisibility Hidden;
}
public enum SharpDX.Direct2D1.SweepDirection : Enum {
    public int value__;
    public static SweepDirection CounterClockwise;
    public static SweepDirection Clockwise;
}
public enum SharpDX.Direct2D1.TableTransferProperties : Enum {
    public int value__;
    public static TableTransferProperties RedTable;
    public static TableTransferProperties RedDisable;
    public static TableTransferProperties GreenTable;
    public static TableTransferProperties GreenDisable;
    public static TableTransferProperties BlueTable;
    public static TableTransferProperties BlueDisable;
    public static TableTransferProperties AlphaTable;
    public static TableTransferProperties AlphaDisable;
    public static TableTransferProperties ClampOutput;
}
public enum SharpDX.Direct2D1.TemperatureAndTintProperty : Enum {
    public int value__;
    public static TemperatureAndTintProperty Temperature;
    public static TemperatureAndTintProperty Tint;
}
[GuidAttribute("2cd906c1-12e2-11dc-9fed-001143a055f9")]
[ShadowAttribute("SharpDX.Direct2D1.TessellationSinkShadow")]
public interface SharpDX.Direct2D1.TessellationSink {
    public abstract virtual void AddTriangles(Triangle[] triangles);
    public abstract virtual void Close();
}
[GuidAttribute("2cd906c1-12e2-11dc-9fed-001143a055f9")]
internal class SharpDX.Direct2D1.TessellationSinkNative : ComObject {
    public TessellationSinkNative(IntPtr nativePtr);
    public sealed virtual void AddTriangles(Triangle[] triangles);
    public sealed virtual void Close();
    public static TessellationSinkNative op_Explicit(IntPtr nativePtr);
    internal void AddTriangles_(Triangle[] triangles, int trianglesCount);
    internal void Close_();
}
internal class SharpDX.Direct2D1.TessellationSinkShadow : ComObjectShadow {
    private static TessellationSinkVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static TessellationSinkShadow();
    public static IntPtr ToIntPtr(TessellationSink tessellationSink);
    protected virtual CppObjectVtbl get_GetVtbl();
}
public enum SharpDX.Direct2D1.TextAntialiasMode : Enum {
    public int value__;
    public static TextAntialiasMode Default;
    public static TextAntialiasMode Cleartype;
    public static TextAntialiasMode Grayscale;
    public static TextAntialiasMode Aliased;
}
public enum SharpDX.Direct2D1.ThreadingMode : Enum {
    public int value__;
    public static ThreadingMode SingleThreaded;
    public static ThreadingMode MultiThreaded;
}
public enum SharpDX.Direct2D1.TileProperties : Enum {
    public int value__;
    public static TileProperties Rectangle;
}
public enum SharpDX.Direct2D1.TintProp : Enum {
    public int value__;
    public static TintProp Color;
    public static TintProp ClampOutput;
}
[GuidAttribute("ef1a287d-342a-4f76-8fdb-da0d6ea9f92b")]
[ShadowAttribute("SharpDX.Direct2D1.TransformShadow")]
public interface SharpDX.Direct2D1.Transform {
    public abstract virtual void MapOutputRectangleToInputRectangles(RawRectangle outputRect, RawRectangle[] inputRects);
    public abstract virtual RawRectangle MapInputRectanglesToOutputRectangle(RawRectangle[] inputRects, RawRectangle[] inputOpaqueSubRects, RawRectangle& outputOpaqueSubRect);
    public abstract virtual RawRectangle MapInvalidRect(int inputIndex, RawRectangle invalidInputRect);
}
public enum SharpDX.Direct2D1.Transform3DInterpolationMode : Enum {
    public int value__;
    public static Transform3DInterpolationMode NearestNeighbor;
    public static Transform3DInterpolationMode Linear;
    public static Transform3DInterpolationMode Cubic;
    public static Transform3DInterpolationMode MultiSampleLinear;
    public static Transform3DInterpolationMode Anisotropic;
}
public enum SharpDX.Direct2D1.Transform3DProperties : Enum {
    public int value__;
    public static Transform3DProperties InterpolationMode;
    public static Transform3DProperties BorderMode;
    public static Transform3DProperties TransformMatrix;
}
[GuidAttribute("2cd906bb-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.TransformedGeometry : Geometry {
    public Geometry SourceGeometry { get; }
    public RawMatrix3x2 Transform { get; }
    public TransformedGeometry(Factory factory, Geometry geometrySource, RawMatrix3x2 matrix3X2);
    public TransformedGeometry(IntPtr nativePtr);
    public static TransformedGeometry op_Explicit(IntPtr nativePtr);
    public Geometry get_SourceGeometry();
    public RawMatrix3x2 get_Transform();
    internal void GetSourceGeometry(Geometry& sourceGeometry);
    internal void GetTransform(RawMatrix3x2& transform);
}
[GuidAttribute("7f1f79e5-2796-416c-8f55-700f911445e5")]
public class SharpDX.Direct2D1.TransformedImageSource : Image {
    public ImageSource Source { get; }
    public TransformedImageSourceProperties Properties { get; }
    public TransformedImageSource(DeviceContext2 context2, ImageSource imageSource, TransformedImageSourceProperties& ropertiesRef);
    public TransformedImageSource(IntPtr nativePtr);
    public static TransformedImageSource op_Explicit(IntPtr nativePtr);
    public ImageSource get_Source();
    public TransformedImageSourceProperties get_Properties();
    internal void GetSource(ImageSource& imageSource);
    internal void GetProperties(TransformedImageSourceProperties& ropertiesRef);
}
[FlagsAttribute]
public enum SharpDX.Direct2D1.TransformedImageSourceOptions : Enum {
    public int value__;
    public static TransformedImageSourceOptions None;
    public static TransformedImageSourceOptions DisableDpiScale;
}
public class SharpDX.Direct2D1.TransformedImageSourceProperties : ValueType {
    public Orientation Orientation;
    public float ScaleX;
    public float ScaleY;
    public InterpolationMode InterpolationMode;
    public TransformedImageSourceOptions Options;
}
[GuidAttribute("13d29038-c3e6-4034-9081-13b53a417992")]
public class SharpDX.Direct2D1.TransformGraph : ComObject {
    public int InputCount { get; }
    public TransformGraph(IntPtr nativePtr);
    public static TransformGraph op_Explicit(IntPtr nativePtr);
    public int get_InputCount();
    internal int GetInputCount();
    public void SetSingleTransformNode(TransformNode node);
    public void AddNode(TransformNode node);
    public void RemoveNode(TransformNode node);
    public void SetOutputNode(TransformNode node);
    public void ConnectNode(TransformNode fromNode, TransformNode toNode, int toNodeInputIndex);
    public void ConnectToEffectInput(int toEffectInputIndex, TransformNode node, int toNodeInputIndex);
    public void Clear();
    public void SetPassthroughGraph(int effectInputIndex);
}
[GuidAttribute("ef1a287d-342a-4f76-8fdb-da0d6ea9f92b")]
public class SharpDX.Direct2D1.TransformNative : TransformNodeNative {
    public TransformNative(IntPtr nativePtr);
    public sealed virtual void MapOutputRectangleToInputRectangles(RawRectangle outputRect, RawRectangle[] inputRects);
    public sealed virtual RawRectangle MapInputRectanglesToOutputRectangle(RawRectangle[] inputRects, RawRectangle[] inputOpaqueSubRects, RawRectangle& outputOpaqueSubRect);
    public sealed virtual RawRectangle MapInvalidRect(int inputIndex, RawRectangle invalidInputRect);
    public static TransformNative op_Explicit(IntPtr nativePtr);
    internal void MapOutputRectToInputRects_(RawRectangle outputRect, RawRectangle[] inputRects, int inputRectsCount);
    internal RawRectangle MapInputRectsToOutputRect_(RawRectangle[] inputRects, RawRectangle[] inputOpaqueSubRects, int inputRectCount, RawRectangle& outputOpaqueSubRect);
    internal RawRectangle MapInvalidRect_(int inputIndex, RawRectangle invalidInputRect);
}
[ShadowAttribute("SharpDX.Direct2D1.TransformNodeShadow")]
[GuidAttribute("b2efe1e7-729f-4102-949f-505fa21bf666")]
public interface SharpDX.Direct2D1.TransformNode {
    public int InputCount { get; }
    public abstract virtual int get_InputCount();
}
[GuidAttribute("b2efe1e7-729f-4102-949f-505fa21bf666")]
public class SharpDX.Direct2D1.TransformNodeNative : ComObject {
    public int InputCount { get; }
    public int InputCount_ { get; }
    public TransformNodeNative(IntPtr nativePtr);
    public sealed virtual int get_InputCount();
    public static TransformNodeNative op_Explicit(IntPtr nativePtr);
    public int get_InputCount_();
    internal int GetInputCount_();
}
internal class SharpDX.Direct2D1.TransformNodeShadow : ComObjectShadow {
    private static TransformNodeVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static TransformNodeShadow();
    public static IntPtr ToIntPtr(TransformNode callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
internal class SharpDX.Direct2D1.TransformShadow : TransformNodeShadow {
    private static TransformVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static TransformShadow();
    public static IntPtr ToIntPtr(Transform callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
public class SharpDX.Direct2D1.Triangle : ValueType {
    public RawVector2 Point1;
    public RawVector2 Point2;
    public RawVector2 Point3;
}
public enum SharpDX.Direct2D1.TurbulenceNoise : Enum {
    public int value__;
    public static TurbulenceNoise FractalSum;
    public static TurbulenceNoise Turbulence;
}
public enum SharpDX.Direct2D1.TurbulenceProperties : Enum {
    public int value__;
    public static TurbulenceProperties Offset;
    public static TurbulenceProperties Size;
    public static TurbulenceProperties BaseFrequency;
    public static TurbulenceProperties NumOctaves;
    public static TurbulenceProperties Seed;
    public static TurbulenceProperties Noise;
    public static TurbulenceProperties Stitchable;
}
public enum SharpDX.Direct2D1.UnitMode : Enum {
    public int value__;
    public static UnitMode Dips;
    public static UnitMode Pixels;
}
[GuidAttribute("9b8b1336-00a5-4668-92b7-ced5d8bf9b7b")]
public class SharpDX.Direct2D1.VertexBuffer : ComObject {
    public VertexBuffer(EffectContext context, Guid resourceId, VertexBufferProperties vertexBufferProperties, CustomVertexBufferProperties customVertexBufferProperties);
    public VertexBuffer(IntPtr nativePtr);
    public static VertexBuffer op_Explicit(IntPtr nativePtr);
    public void Map(Byte[] data, int bufferSize);
    public void Unmap();
}
public class SharpDX.Direct2D1.VertexBufferProperties : object {
    private DataStream data;
    public int InputCount;
    public VertexUsage Usage;
    internal IntPtr DataPointer;
    internal int SizeInBytes;
    public DataStream Data { get; public set; }
    public VertexBufferProperties(int inputCount, VertexUsage usage, DataStream data);
    public DataStream get_Data();
    public void set_Data(DataStream value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[FlagsAttribute]
public enum SharpDX.Direct2D1.VertexOptions : Enum {
    public int value__;
    public static VertexOptions None;
    public static VertexOptions DoNotClear;
    public static VertexOptions UseDepthBuffer;
    public static VertexOptions AssumeNoOverlap;
}
public class SharpDX.Direct2D1.VertexRange : ValueType {
    public int StartVertex;
    public int VertexCount;
    public VertexRange(int startVertex, int vertexCount);
}
public enum SharpDX.Direct2D1.VertexUsage : Enum {
    public int value__;
    public static VertexUsage Static;
    public static VertexUsage Dynamic;
}
public enum SharpDX.Direct2D1.VignetteProperty : Enum {
    public int value__;
    public static VignetteProperty Color;
    public static VignetteProperty TransitionSize;
    public static VignetteProperty Strength;
}
public class SharpDX.Direct2D1.WicRenderTarget : RenderTarget {
    public WicRenderTarget(Factory factory, Bitmap wicBitmap, RenderTargetProperties renderTargetProperties);
}
[GuidAttribute("2cd90698-12e2-11dc-9fed-001143a055f9")]
public class SharpDX.Direct2D1.WindowRenderTarget : RenderTarget {
    public IntPtr Hwnd { get; }
    public WindowRenderTarget(Factory factory, RenderTargetProperties renderTargetProperties, HwndRenderTargetProperties hwndProperties);
    public WindowRenderTarget(IntPtr nativePtr);
    public static WindowRenderTarget op_Explicit(IntPtr nativePtr);
    public IntPtr get_Hwnd();
    public WindowState CheckWindowState();
    public void Resize(Size2 ixelSizeRef);
    internal IntPtr GetHwnd();
}
public enum SharpDX.Direct2D1.WindowState : Enum {
    public int value__;
    public static WindowState None;
    public static WindowState Occluded;
}
public enum SharpDX.Direct2D1.YcbcrChromaSubSampling : Enum {
    public int value__;
    public static YcbcrChromaSubSampling Auto;
    public static YcbcrChromaSubSampling Both;
    public static YcbcrChromaSubSampling Horizontal;
    public static YcbcrChromaSubSampling None;
    public static YcbcrChromaSubSampling Vertical;
}
public enum SharpDX.Direct2D1.YcbcrInterpolationMode : Enum {
    public int value__;
    public static YcbcrInterpolationMode NearestNeighbor;
    public static YcbcrInterpolationMode Linear;
    public static YcbcrInterpolationMode Cubic;
    public static YcbcrInterpolationMode MultiSampleLinear;
    public static YcbcrInterpolationMode Anisotropic;
    public static YcbcrInterpolationMode HighQualityCubic;
}
public enum SharpDX.Direct2D1.YCbCrProperties : Enum {
    public int value__;
    public static YCbCrProperties ChromaSubSampling;
    public static YCbCrProperties TransformMatrix;
    public static YCbCrProperties InterpolationMode;
}
[GuidAttribute("CE25F8FD-863B-4D13-9651-C1F88DC73FE2")]
public class SharpDX.DirectWrite.AsyncResult : ComObject {
    public IntPtr WaitHandle { get; }
    public Result Result { get; }
    public AsyncResult(IntPtr nativePtr);
    public static AsyncResult op_Explicit(IntPtr nativePtr);
    public IntPtr get_WaitHandle();
    public Result get_Result();
    internal IntPtr GetWaitHandle();
    internal Result GetResult();
}
public enum SharpDX.DirectWrite.Baseline : Enum {
    public int value__;
    public static Baseline Default;
    public static Baseline Roman;
    public static Baseline Central;
    public static Baseline Math;
    public static Baseline Hanging;
    public static Baseline IdeographicBottom;
    public static Baseline IdeographicTop;
    public static Baseline Minimum;
    public static Baseline Maximum;
}
[GuidAttribute("5e5a32a3-8dff-4773-9ff6-0696eab77267")]
public class SharpDX.DirectWrite.BitmapRenderTarget : ComObject {
    public IntPtr MemoryDC { get; }
    public float PixelsPerDip { get; public set; }
    public RawMatrix3x2 CurrentTransform { get; public set; }
    public Size2 Size { get; }
    public BitmapRenderTarget(IntPtr nativePtr);
    public void DrawGlyphRun(float baselineOriginX, float baselineOriginY, MeasuringMode measuringMode, GlyphRun glyphRun, RenderingParams renderingParams, RawColorBGRA textColor, RawRectangle& blackBoxRect);
    public void DrawGlyphRun(float baselineOriginX, float baselineOriginY, MeasuringMode measuringMode, GlyphRun glyphRun, RenderingParams renderingParams, RawColorBGRA textColor);
    public static BitmapRenderTarget op_Explicit(IntPtr nativePtr);
    public IntPtr get_MemoryDC();
    public float get_PixelsPerDip();
    public void set_PixelsPerDip(float value);
    public RawMatrix3x2 get_CurrentTransform();
    public void set_CurrentTransform(RawMatrix3x2 value);
    public Size2 get_Size();
    private void DrawGlyphRun(float baselineOriginX, float baselineOriginY, MeasuringMode measuringMode, GlyphRun glyphRun, RenderingParams renderingParams, int textColor, RawRectangle& blackBoxRect);
    internal IntPtr GetMemoryDC();
    internal float GetPixelsPerDip();
    internal void SetPixelsPerDip(float pixelsPerDip);
    internal void GetCurrentTransform(RawMatrix3x2& transform);
    internal void SetCurrentTransform(Nullable`1<RawMatrix3x2> transform);
    internal void GetSize(Size2& size);
    public void Resize(int width, int height);
}
[GuidAttribute("791e8298-3ef3-4230-9880-c9bdecc42064")]
public class SharpDX.DirectWrite.BitmapRenderTarget1 : BitmapRenderTarget {
    public TextAntialiasMode TextAntialiasMode { get; public set; }
    public BitmapRenderTarget1(IntPtr nativePtr);
    public static BitmapRenderTarget1 op_Explicit(IntPtr nativePtr);
    public TextAntialiasMode get_TextAntialiasMode();
    public void set_TextAntialiasMode(TextAntialiasMode value);
    internal TextAntialiasMode GetTextAntialiasMode();
    internal void SetTextAntialiasMode(TextAntialiasMode antialiasMode);
}
public enum SharpDX.DirectWrite.BreakCondition : Enum {
    public int value__;
    public static BreakCondition Neutral;
    public static BreakCondition CanBreak;
    public static BreakCondition MayNotBreak;
    public static BreakCondition MustBreak;
}
public class SharpDX.DirectWrite.CaretMetrics : ValueType {
    public short SlopeRise;
    public short SlopeRun;
    public short Offset;
}
public class SharpDX.DirectWrite.ClusterMetrics : ValueType {
    public float Width;
    public short Length;
    internal short _CanWrapLineAfter;
    internal short _IsWhitespace;
    internal short _IsNewline;
    internal short _IsSoftHyphen;
    internal short _IsRightToLeft;
    internal short _Padding;
    public bool CanWrapLineAfter { get; public set; }
    public bool IsWhitespace { get; public set; }
    public bool IsNewline { get; public set; }
    public bool IsSoftHyphen { get; public set; }
    public bool IsRightToLeft { get; public set; }
    internal short Padding { get; internal set; }
    public bool get_CanWrapLineAfter();
    public void set_CanWrapLineAfter(bool value);
    public bool get_IsWhitespace();
    public void set_IsWhitespace(bool value);
    public bool get_IsNewline();
    public void set_IsNewline(bool value);
    public bool get_IsSoftHyphen();
    public void set_IsSoftHyphen(bool value);
    public bool get_IsRightToLeft();
    public void set_IsRightToLeft(bool value);
    internal short get_Padding();
    internal void set_Padding(short value);
}
public class SharpDX.DirectWrite.ColorGlyphRun : ValueType {
    public GlyphRun GlyphRun;
    public IntPtr GlyphRunDescription;
    public float BaselineOriginX;
    public float BaselineOriginY;
    public RawColor4 RunColor;
    public short PaletteIndex;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.DirectWrite.ColorGlyphRun1 : ValueType {
    public GlyphRun GlyphRun;
    public IntPtr GlyphRunDescription;
    public float BaselineOriginX;
    public float BaselineOriginY;
    public RawColor4 RunColor;
    public short PaletteIndex;
    public GlyphImageFormatS GlyphImageFormat;
    public MeasuringMode MeasuringMode;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[GuidAttribute("d31fbe17-f157-41a2-8d24-cb779e0560e8")]
public class SharpDX.DirectWrite.ColorGlyphRunEnumerator : ComObject {
    public ColorGlyphRun CurrentRun { get; }
    public ColorGlyphRunEnumerator(IntPtr nativePtr);
    public ColorGlyphRun get_CurrentRun();
    public static ColorGlyphRunEnumerator op_Explicit(IntPtr nativePtr);
    public void MoveNext(RawBool& hasRun);
    internal void GetCurrentRun(IntPtr& colorGlyphRun);
}
[GuidAttribute("7C5F86DA-C7A1-4F05-B8E1-55A179FE5A35")]
public class SharpDX.DirectWrite.ColorGlyphRunEnumerator1 : ColorGlyphRunEnumerator {
    public ColorGlyphRun1 CurrentRun { get; }
    public ColorGlyphRunEnumerator1(IntPtr nativePtr);
    public ColorGlyphRun1 get_CurrentRun();
    public static ColorGlyphRunEnumerator1 op_Explicit(IntPtr nativePtr);
    internal void GetCurrentRun(IntPtr& colorGlyphRun);
}
public enum SharpDX.DirectWrite.ContainerType : Enum {
    public int value__;
    public static ContainerType Unknown;
    public static ContainerType Woff;
    public static ContainerType Woff2;
}
internal static class SharpDX.DirectWrite.DWrite : object {
    public static void CreateFactory(FactoryType factoryType, Guid iid, ComObject factory);
    private static int DWriteCreateFactory_(int param0, Void* param1, Void* param2);
}
public class SharpDX.DirectWrite.EllipsisTrimming : InlineObjectNative {
    protected EllipsisTrimming(IntPtr nativePtr);
    public EllipsisTrimming(Factory factory, TextFormat textFormat);
}
[GuidAttribute("b859ee5a-d838-4b5b-a2e8-1adc7d93db48")]
public class SharpDX.DirectWrite.Factory : ComObject {
    private List`1<FontCollectionLoader> _fontCollectionLoaderCallbacks;
    private List`1<FontFileLoader> _fontFileLoaderCallbacks;
    public GdiInterop GdiInterop { get; }
    public Factory(FactoryType factoryType);
    public Factory(IntPtr nativePtr);
    internal FontCollectionLoader FindRegisteredFontCollectionLoaderCallback(FontCollectionLoader loader);
    internal FontFileLoader FindRegisteredFontFileLoaderCallback(FontFileLoader loader);
    public void RegisterFontCollectionLoader(FontCollectionLoader fontCollectionLoader);
    public void UnregisterFontCollectionLoader(FontCollectionLoader fontCollectionLoader);
    public void RegisterFontFileLoader(FontFileLoader fontFileLoader);
    public void UnregisterFontFileLoader(FontFileLoader fontFileLoader);
    public static Factory op_Explicit(IntPtr nativePtr);
    public GdiInterop get_GdiInterop();
    public FontCollection GetSystemFontCollection(RawBool checkForUpdates);
    internal void CreateCustomFontCollection(FontCollectionLoader collectionLoader, IntPtr collectionKey, int collectionKeySize, FontCollection fontCollection);
    internal void RegisterFontCollectionLoader_(FontCollectionLoader fontCollectionLoader);
    internal void UnregisterFontCollectionLoader_(FontCollectionLoader fontCollectionLoader);
    internal void CreateFontFileReference(string filePath, Nullable`1<long> lastWriteTime, FontFile fontFile);
    internal void CreateCustomFontFileReference(IntPtr fontFileReferenceKey, int fontFileReferenceKeySize, FontFileLoader fontFileLoader, FontFile fontFile);
    internal void CreateFontFace(FontFaceType fontFaceType, int numberOfFiles, FontFile[] fontFiles, int faceIndex, FontSimulations fontFaceSimulationFlags, FontFace fontFace);
    internal void CreateRenderingParams(RenderingParams renderingParams);
    internal void CreateMonitorRenderingParams(IntPtr monitor, RenderingParams renderingParams);
    internal void CreateCustomRenderingParams(float gamma, float enhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, RenderingParams renderingParams);
    internal void RegisterFontFileLoader_(FontFileLoader fontFileLoader);
    internal void UnregisterFontFileLoader_(FontFileLoader fontFileLoader);
    internal void CreateTextFormat(string fontFamilyName, FontCollection fontCollection, FontWeight fontWeight, FontStyle fontStyle, FontStretch fontStretch, float fontSize, string localeName, TextFormat textFormat);
    internal void CreateTypography(Typography typography);
    internal void GetGdiInterop(GdiInterop& gdiInterop);
    internal void CreateTextLayout(string text, int stringLength, TextFormat textFormat, float maxWidth, float maxHeight, TextLayout textLayout);
    internal void CreateGdiCompatibleTextLayout(string text, int stringLength, TextFormat textFormat, float layoutWidth, float layoutHeight, float pixelsPerDip, Nullable`1<RawMatrix3x2> transform, RawBool useGdiNatural, TextLayout textLayout);
    internal void CreateEllipsisTrimmingSign(TextFormat textFormat, InlineObjectNative trimmingSign);
    internal void CreateTextAnalyzer(TextAnalyzer textAnalyzer);
    internal void CreateNumberSubstitution(NumberSubstitutionMethod substitutionMethod, string localeName, RawBool ignoreUserOverride, NumberSubstitution numberSubstitution);
    internal void CreateGlyphRunAnalysis(GlyphRun glyphRun, float pixelsPerDip, Nullable`1<RawMatrix3x2> transform, RenderingMode renderingMode, MeasuringMode measuringMode, float baselineOriginX, float baselineOriginY, GlyphRunAnalysis glyphRunAnalysis);
    internal void CreateFontFace(FontFaceType fontFaceType, int numberOfFiles, ComArray`1<FontFile> fontFiles, int faceIndex, FontSimulations fontFaceSimulationFlags, FontFace fontFace);
    private void CreateFontFace(FontFaceType fontFaceType, int numberOfFiles, IntPtr fontFiles, int faceIndex, FontSimulations fontFaceSimulationFlags, IntPtr fontFace);
}
[GuidAttribute("30572f99-dac6-41db-a16e-0486307e606a")]
public class SharpDX.DirectWrite.Factory1 : Factory {
    public Factory1(FactoryType factoryType);
    public Factory1(IntPtr nativePtr);
    public static Factory1 op_Explicit(IntPtr nativePtr);
    public void GetEudcFontCollection(FontCollection& fontCollection, RawBool checkForUpdates);
    public void CreateCustomRenderingParams(float gamma, float enhancedContrast, float enhancedContrastGrayscale, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, RenderingParams1& renderingParams);
}
[GuidAttribute("0439fc60-ca44-4994-8dee-3a9af7b732ec")]
public class SharpDX.DirectWrite.Factory2 : Factory1 {
    public FontFallback SystemFontFallback { get; }
    public Factory2(IntPtr nativePtr);
    public void TranslateColorGlyphRun(float baselineOriginX, float baselineOriginY, GlyphRun glyphRun, GlyphRunDescription glyphRunDescription, MeasuringMode measuringMode, Nullable`1<RawMatrix3x2> worldToDeviceTransform, int colorPaletteIndex, ColorGlyphRunEnumerator& colorLayers);
    public ColorGlyphRunEnumerator TranslateColorGlyphRun(float baselineOriginX, float baselineOriginY, GlyphRun glyphRun, GlyphRunDescription glyphRunDescription, MeasuringMode measuringMode, Nullable`1<RawMatrix3x2> worldToDeviceTransform, int colorPaletteIndex);
    public static Factory2 op_Explicit(IntPtr nativePtr);
    public FontFallback get_SystemFontFallback();
    internal void GetSystemFontFallback(FontFallback& fontFallback);
    public void CreateFontFallbackBuilder(FontFallbackBuilder& fontFallbackBuilder);
    public Result TryTranslateColorGlyphRun(float baselineOriginX, float baselineOriginY, GlyphRun glyphRun, GlyphRunDescription glyphRunDescription, MeasuringMode measuringMode, Nullable`1<RawMatrix3x2> worldToDeviceTransform, int colorPaletteIndex, ColorGlyphRunEnumerator& colorLayers);
    public void CreateCustomRenderingParams(float gamma, float enhancedContrast, float grayscaleEnhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode, GridFitMode gridFitMode, RenderingParams2& renderingParams);
    public void CreateGlyphRunAnalysis(GlyphRun glyphRun, Nullable`1<RawMatrix3x2> transform, RenderingMode renderingMode, MeasuringMode measuringMode, GridFitMode gridFitMode, TextAntialiasMode antialiasMode, float baselineOriginX, float baselineOriginY, GlyphRunAnalysis& glyphRunAnalysis);
}
[GuidAttribute("9A1B41C3-D3BB-466A-87FC-FE67556A3B65")]
public class SharpDX.DirectWrite.Factory3 : Factory2 {
    public FontSet SystemFontSet { get; }
    public FontDownloadQueue FontDownloadQueue { get; }
    public Factory3(IntPtr nativePtr);
    public static Factory3 op_Explicit(IntPtr nativePtr);
    public FontSet get_SystemFontSet();
    public FontDownloadQueue get_FontDownloadQueue();
    public void CreateGlyphRunAnalysis(GlyphRun glyphRun, Nullable`1<RawMatrix3x2> transform, RenderingMode1 renderingMode, MeasuringMode measuringMode, GridFitMode gridFitMode, TextAntialiasMode antialiasMode, float baselineOriginX, float baselineOriginY, GlyphRunAnalysis& glyphRunAnalysis);
    public void CreateCustomRenderingParams(float gamma, float enhancedContrast, float grayscaleEnhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode1 renderingMode, GridFitMode gridFitMode, RenderingParams3& renderingParams);
    public void CreateFontFaceReference(FontFile fontFile, int faceIndex, FontSimulations fontSimulations, FontFaceReference& fontFaceReference);
    public void CreateFontFaceReference(string filePath, Nullable`1<long> lastWriteTime, int faceIndex, FontSimulations fontSimulations, FontFaceReference& fontFaceReference);
    internal void GetSystemFontSet(FontSet& fontSet);
    public void CreateFontSetBuilder(FontSetBuilder& fontSetBuilder);
    public void CreateFontCollectionFromFontSet(FontSet fontSet, FontCollection1& fontCollection);
    public void GetSystemFontCollection(RawBool includeDownloadableFonts, FontCollection1& fontCollection, RawBool checkForUpdates);
    internal void GetFontDownloadQueue(FontDownloadQueue& fontDownloadQueue);
}
[GuidAttribute("4B0B5BD3-0797-4549-8AC5-FE915CC53856")]
public class SharpDX.DirectWrite.Factory4 : Factory3 {
    public Factory4(IntPtr nativePtr);
    public static Factory4 op_Explicit(IntPtr nativePtr);
    public void TranslateColorGlyphRun(RawVector2 baselineOrigin, GlyphRun glyphRun, GlyphRunDescription glyphRunDescription, GlyphImageFormatS desiredGlyphImageFormats, MeasuringMode measuringMode, Nullable`1<RawMatrix3x2> worldAndDpiTransform, int colorPaletteIndex, ColorGlyphRunEnumerator1& colorLayers);
    public void ComputeGlyphOrigins(GlyphRun glyphRun, RawVector2 baselineOrigin, RawVector2[] glyphOrigins);
    public void ComputeGlyphOrigins(GlyphRun glyphRun, MeasuringMode measuringMode, RawVector2 baselineOrigin, Nullable`1<RawMatrix3x2> worldAndDpiTransform, RawVector2[] glyphOrigins);
}
[GuidAttribute("958DB99A-BE2A-4F09-AF7D-65189803D1D3")]
public class SharpDX.DirectWrite.Factory5 : Factory4 {
    public Factory5(IntPtr nativePtr);
    public static Factory5 op_Explicit(IntPtr nativePtr);
    public void CreateFontSetBuilder(FontSetBuilder1& fontSetBuilder);
    public void CreateInMemoryFontFileLoader(InMemoryFontFileLoader& newLoader);
    public void CreateHttpFontFileLoader(string referrerUrl, string extraHeaders, RemoteFontFileLoader& newLoader);
    public ContainerType AnalyzeContainerType(IntPtr fileData, int fileDataSize);
    public void UnpackFontFile(ContainerType containerType, IntPtr fileData, int fileDataSize, FontFileStream& unpackedFontStream);
}
public enum SharpDX.DirectWrite.FactoryType : Enum {
    public int value__;
    public static FactoryType Shared;
    public static FactoryType Isolated;
}
public class SharpDX.DirectWrite.FileFragment : ValueType {
    public long FileOffset;
    public long FragmentSize;
}
public enum SharpDX.DirectWrite.FlowDirection : Enum {
    public int value__;
    public static FlowDirection TopToBottom;
    public static FlowDirection BottomToTop;
    public static FlowDirection LeftToRight;
    public static FlowDirection RightToLeft;
}
[GuidAttribute("acd16696-8c14-4f5d-877e-fe3fc1d32737")]
public class SharpDX.DirectWrite.Font : ComObject {
    public FontFamily FontFamily { get; }
    public FontWeight Weight { get; }
    public FontStretch Stretch { get; }
    public FontStyle Style { get; }
    public RawBool IsSymbolFont { get; }
    public LocalizedStrings FaceNames { get; }
    public FontSimulations Simulations { get; }
    public FontMetrics Metrics { get; }
    public Font(IntPtr nativePtr);
    public static Font op_Explicit(IntPtr nativePtr);
    public FontFamily get_FontFamily();
    public FontWeight get_Weight();
    public FontStretch get_Stretch();
    public FontStyle get_Style();
    public RawBool get_IsSymbolFont();
    public LocalizedStrings get_FaceNames();
    public FontSimulations get_Simulations();
    public FontMetrics get_Metrics();
    internal void GetFontFamily(FontFamily& fontFamily);
    internal FontWeight GetWeight();
    internal FontStretch GetStretch();
    internal FontStyle GetStyle();
    internal RawBool IsSymbolFont_();
    internal void GetFaceNames(LocalizedStrings& names);
    public RawBool GetInformationalStrings(InformationalStringId informationalStringID, LocalizedStrings& informationalStrings);
    internal FontSimulations GetSimulations();
    internal void GetMetrics(FontMetrics& fontMetrics);
    public RawBool HasCharacter(int unicodeValue);
    internal void CreateFontFace(FontFace fontFace);
}
[GuidAttribute("acd16696-8c14-4f5d-877e-fe3fc1d32738")]
public class SharpDX.DirectWrite.Font1 : Font {
    public FontMetrics1 Metrics { get; }
    public Panose Panose { get; }
    public RawBool IsMonospacedFont { get; }
    public Font1(IntPtr nativePtr);
    public static Font1 op_Explicit(IntPtr nativePtr);
    public FontMetrics1 get_Metrics();
    public Panose get_Panose();
    public RawBool get_IsMonospacedFont();
    internal void GetMetrics(FontMetrics1& fontMetrics);
    internal void GetPanose(Panose& anoseRef);
    public void GetUnicodeRanges(int maxRangeCount, UnicodeRange[] unicodeRanges, Int32& actualRangeCount);
    internal RawBool IsMonospacedFont_();
}
[GuidAttribute("29748ed6-8c9c-4a6a-be0b-d912e8538944")]
public class SharpDX.DirectWrite.Font2 : Font1 {
    public RawBool IsColorFont { get; }
    public Font2(IntPtr nativePtr);
    public static Font2 op_Explicit(IntPtr nativePtr);
    public RawBool get_IsColorFont();
    internal RawBool IsColorFont_();
}
[GuidAttribute("29748ED6-8C9C-4A6A-BE0B-D912E8538944")]
public class SharpDX.DirectWrite.Font3 : Font2 {
    public FontFaceReference FontFaceReference { get; }
    public Locality Locality { get; }
    public Font3(IntPtr nativePtr);
    public static Font3 op_Explicit(IntPtr nativePtr);
    public FontFaceReference get_FontFaceReference();
    public Locality get_Locality();
    public void CreateFontFace(FontFace3& fontFace);
    public RawBool Equals(Font font);
    internal void GetFontFaceReference(FontFaceReference& fontFaceReference);
    public RawBool HasCharacter(int unicodeValue);
    internal Locality GetLocality();
}
[GuidAttribute("a84cee02-3eea-4eee-a827-87c1a02a0fcc")]
public class SharpDX.DirectWrite.FontCollection : ComObject {
    public int FontFamilyCount { get; }
    public FontCollection(Factory factory, FontCollectionLoader collectionLoader, DataPointer collectionKey);
    public FontCollection(IntPtr nativePtr);
    public static FontCollection op_Explicit(IntPtr nativePtr);
    public int get_FontFamilyCount();
    internal int GetFontFamilyCount();
    public FontFamily GetFontFamily(int index);
    public RawBool FindFamilyName(string familyName, Int32& index);
    public Font GetFontFromFontFace(FontFace fontFace);
}
[GuidAttribute("53585141-D9F8-4095-8321-D73CF6BD116C")]
public class SharpDX.DirectWrite.FontCollection1 : FontCollection {
    public FontSet FontSet { get; }
    public FontCollection1(IntPtr nativePtr);
    public static FontCollection1 op_Explicit(IntPtr nativePtr);
    public FontSet get_FontSet();
    internal void GetFontSet(FontSet& fontSet);
    public void GetFontFamily(int index, FontFamily1& fontFamily);
}
[ShadowAttribute("SharpDX.DirectWrite.FontCollectionLoaderShadow")]
[GuidAttribute("cca920e4-52f0-492b-bfa8-29c72ee0a468")]
public interface SharpDX.DirectWrite.FontCollectionLoader {
    public abstract virtual FontFileEnumerator CreateEnumeratorFromKey(Factory factory, DataPointer collectionKey);
}
internal class SharpDX.DirectWrite.FontCollectionLoaderShadow : ComObjectShadow {
    private static FontCollectionLoaderVtbl Vtbl;
    private Factory _factory;
    protected CppObjectVtbl GetVtbl { get; }
    private static FontCollectionLoaderShadow();
    public static IntPtr ToIntPtr(FontCollectionLoader loader);
    public static void SetFactory(FontCollectionLoader loader, Factory factory);
    protected virtual CppObjectVtbl get_GetVtbl();
}
[GuidAttribute("B06FE5B9-43EC-4393-881B-DBE4DC72FDA7")]
public class SharpDX.DirectWrite.FontDownloadListener : ComObject {
    public FontDownloadListener(IntPtr nativePtr);
    public static FontDownloadListener op_Explicit(IntPtr nativePtr);
    public void DownloadCompleted(FontDownloadQueue downloadQueue, IUnknown context, Result downloadResult);
}
[GuidAttribute("B71E6052-5AEA-4FA3-832E-F60D431F7E91")]
public class SharpDX.DirectWrite.FontDownloadQueue : ComObject {
    public RawBool IsEmpty { get; }
    public long GenerationCount { get; }
    public FontDownloadQueue(IntPtr nativePtr);
    public static FontDownloadQueue op_Explicit(IntPtr nativePtr);
    public RawBool get_IsEmpty();
    public long get_GenerationCount();
    public void AddListener(FontDownloadListener listener, Int32& token);
    public void RemoveListener(int token);
    internal RawBool IsEmpty_();
    public void BeginDownload(IUnknown context);
    public void CancelDownload();
    internal long GetGenerationCount();
}
[GuidAttribute("5f49804d-7024-4d43-bfa9-d25984f53849")]
public class SharpDX.DirectWrite.FontFace : ComObject {
    public FontFaceType FaceType { get; }
    public int Index { get; }
    public FontSimulations Simulations { get; }
    public RawBool IsSymbolFont { get; }
    public FontMetrics Metrics { get; }
    public short GlyphCount { get; }
    public FontFace(Factory factory, FontFaceType fontFaceType, FontFile[] fontFiles, int faceIndex, FontSimulations fontFaceSimulationFlags);
    public FontFace(Font font);
    public FontFace(IntPtr nativePtr);
    public GlyphMetrics[] GetDesignGlyphMetrics(Int16[] glyphIndices, bool isSideways);
    public GlyphMetrics[] GetGdiCompatibleGlyphMetrics(float fontSize, float pixelsPerDip, Nullable`1<RawMatrix3x2> transform, bool useGdiNatural, Int16[] glyphIndices, bool isSideways);
    public Int16[] GetGlyphIndices(Int32[] codePoints);
    public FontFile[] GetFiles();
    public bool TryGetFontTable(int openTypeTableTag, DataPointer& tableData, IntPtr& tableContext);
    public static FontFace op_Explicit(IntPtr nativePtr);
    public FontFaceType get_FaceType();
    public int get_Index();
    public FontSimulations get_Simulations();
    public RawBool get_IsSymbolFont();
    public FontMetrics get_Metrics();
    public short get_GlyphCount();
    internal FontFaceType GetFaceType();
    internal void GetFiles(Int32& numberOfFiles, FontFile[] fontFiles);
    internal int GetIndex();
    internal FontSimulations GetSimulations();
    internal RawBool IsSymbolFont_();
    internal void GetMetrics(FontMetrics& fontFaceMetrics);
    internal short GetGlyphCount();
    internal void GetDesignGlyphMetrics(Int16[] glyphIndices, int glyphCount, GlyphMetrics[] glyphMetrics, RawBool isSideways);
    public void GetGlyphIndices(Int32[] codePoints, int codePointCount, Int16[] glyphIndices);
    internal void TryGetFontTable(int openTypeTableTag, IntPtr tableData, Int32& tableSize, IntPtr& tableContext, RawBool& exists);
    public void ReleaseFontTable(IntPtr tableContext);
    public void GetGlyphRunOutline(float emSize, Int16[] glyphIndices, Single[] glyphAdvances, GlyphOffset[] glyphOffsets, int glyphCount, RawBool isSideways, RawBool isRightToLeft, SimplifiedGeometrySink geometrySink);
    public RenderingMode GetRecommendedRenderingMode(float emSize, float pixelsPerDip, MeasuringMode measuringMode, RenderingParams renderingParams);
    public FontMetrics GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, Nullable`1<RawMatrix3x2> transform);
    internal void GetGdiCompatibleGlyphMetrics(float emSize, float pixelsPerDip, Nullable`1<RawMatrix3x2> transform, RawBool useGdiNatural, Int16[] glyphIndices, int glyphCount, GlyphMetrics[] glyphMetrics, RawBool isSideways);
}
[GuidAttribute("a71efdb4-9fdb-4838-ad90-cfc3be8c3daf")]
public class SharpDX.DirectWrite.FontFace1 : FontFace {
    public FontMetrics1 Metrics { get; }
    public CaretMetrics CaretMetrics { get; }
    public RawBool IsMonospacedFont { get; }
    public FontFace1(IntPtr nativePtr);
    public static FontFace1 op_Explicit(IntPtr nativePtr);
    public FontMetrics1 get_Metrics();
    public CaretMetrics get_CaretMetrics();
    public RawBool get_IsMonospacedFont();
    internal void GetMetrics(FontMetrics1& fontMetrics);
    public void GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, Nullable`1<RawMatrix3x2> transform, FontMetrics1& fontMetrics);
    internal void GetCaretMetrics(CaretMetrics& caretMetrics);
    public void GetUnicodeRanges(int maxRangeCount, UnicodeRange[] unicodeRanges, Int32& actualRangeCount);
    internal RawBool IsMonospacedFont_();
    public void GetDesignGlyphAdvances(int glyphCount, Int16[] glyphIndices, Int32[] glyphAdvances, RawBool isSideways);
    public void GetGdiCompatibleGlyphAdvances(float emSize, float pixelsPerDip, Nullable`1<RawMatrix3x2> transform, RawBool useGdiNatural, RawBool isSideways, int glyphCount, Int16[] glyphIndices, Int32[] glyphAdvances);
    public void GetKerningPairAdjustments(int glyphCount, Int16[] glyphIndices, Int32[] glyphAdvanceAdjustments);
    public RawBool HasKerningPairs();
    public void GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Nullable`1<RawMatrix3x2> transform, RawBool isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, RenderingMode& renderingMode);
    public void GetVerticalGlyphVariants(int glyphCount, Int16[] nominalGlyphIndices, Int16[] verticalGlyphIndices);
    public RawBool HasVerticalGlyphVariants();
}
[GuidAttribute("d8b768ff-64bc-4e66-982b-ec8e87f693f7")]
public class SharpDX.DirectWrite.FontFace2 : FontFace1 {
    public RawBool IsColorFont { get; }
    public int ColorPaletteCount { get; }
    public int PaletteEntryCount { get; }
    public FontFace2(IntPtr nativePtr);
    public static FontFace2 op_Explicit(IntPtr nativePtr);
    public RawBool get_IsColorFont();
    public int get_ColorPaletteCount();
    public int get_PaletteEntryCount();
    internal RawBool IsColorFont_();
    internal int GetColorPaletteCount();
    internal int GetPaletteEntryCount();
    public void GetPaletteEntries(int colorPaletteIndex, int firstEntryIndex, int entryCount, RawColor4[] aletteEntriesRef);
    public void GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Nullable`1<RawMatrix3x2> transform, RawBool isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, RenderingParams renderingParams, RenderingMode& renderingMode, GridFitMode& gridFitMode);
}
[GuidAttribute("D37D7598-09BE-4222-A236-2081341CC1F2")]
public class SharpDX.DirectWrite.FontFace3 : FontFace2 {
    public FontFaceReference FontFaceReference { get; }
    public Panose Panose { get; }
    public FontWeight Weight { get; }
    public FontStretch Stretch { get; }
    public FontStyle Style { get; }
    public LocalizedStrings FamilyNames { get; }
    public LocalizedStrings FaceNames { get; }
    public FontFace3(IntPtr nativePtr);
    public static FontFace3 op_Explicit(IntPtr nativePtr);
    public FontFaceReference get_FontFaceReference();
    public Panose get_Panose();
    public FontWeight get_Weight();
    public FontStretch get_Stretch();
    public FontStyle get_Style();
    public LocalizedStrings get_FamilyNames();
    public LocalizedStrings get_FaceNames();
    internal void GetFontFaceReference(FontFaceReference& fontFaceReference);
    internal void GetPanose(Panose& anoseRef);
    internal FontWeight GetWeight();
    internal FontStretch GetStretch();
    internal FontStyle GetStyle();
    internal void GetFamilyNames(LocalizedStrings& names);
    internal void GetFaceNames(LocalizedStrings& names);
    public void GetInformationalStrings(InformationalStringId informationalStringID, LocalizedStrings& informationalStrings, RawBool& exists);
    public RawBool HasCharacter(int unicodeValue);
    public void GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, Nullable`1<RawMatrix3x2> transform, RawBool isSideways, OutlineThreshold outlineThreshold, MeasuringMode measuringMode, RenderingParams renderingParams, RenderingMode1& renderingMode, GridFitMode& gridFitMode);
    public RawBool IsCharacterLocal(int unicodeValue);
    public RawBool IsGlyphLocal(short glyphId);
    public void AreCharactersLocal(string characters, int characterCount, RawBool enqueueIfNotLocal, RawBool& isLocal);
    public void AreGlyphsLocal(Int16[] glyphIndices, int glyphCount, RawBool enqueueIfNotLocal, RawBool& isLocal);
}
[GuidAttribute("27F2A904-4EB8-441D-9678-0563F53E3E2F")]
public class SharpDX.DirectWrite.FontFace4 : FontFace3 {
    public FontFace4(IntPtr nativePtr);
    public static FontFace4 op_Explicit(IntPtr nativePtr);
    public void GetGlyphImageFormats(short glyphId, int pixelsPerEmFirst, int pixelsPerEmLast, GlyphImageFormatS& glyphImageFormats);
    public GlyphImageFormatS GetGlyphImageFormats();
    public void GetGlyphImageData(short glyphId, int pixelsPerEm, GlyphImageFormatS glyphImageFormat, GlyphImageData& glyphData, IntPtr& glyphDataContext);
    public void ReleaseGlyphImageData(IntPtr glyphDataContext);
}
[GuidAttribute("5E7FA7CA-DDE3-424C-89F0-9FCD6FED58CD")]
public class SharpDX.DirectWrite.FontFaceReference : ComObject {
    public int FontFaceIndex { get; }
    public FontSimulations Simulations { get; }
    public FontFile FontFile { get; }
    public long LocalFileSize { get; }
    public long FileSize { get; }
    public long FileTime { get; }
    public Locality Locality { get; }
    public FontFaceReference(IntPtr nativePtr);
    public static FontFaceReference op_Explicit(IntPtr nativePtr);
    public int get_FontFaceIndex();
    public FontSimulations get_Simulations();
    public FontFile get_FontFile();
    public long get_LocalFileSize();
    public long get_FileSize();
    public long get_FileTime();
    public Locality get_Locality();
    public void CreateFontFace(FontFace3& fontFace);
    public void CreateFontFaceWithSimulations(FontSimulations fontFaceSimulationFlags, FontFace3& fontFace);
    public RawBool Equals(FontFaceReference fontFaceReference);
    internal int GetFontFaceIndex();
    internal FontSimulations GetSimulations();
    internal void GetFontFile(FontFile& fontFile);
    internal long GetLocalFileSize();
    internal long GetFileSize();
    internal void GetFileTime(Int64& lastWriteTime);
    internal Locality GetLocality();
    public void EnqueueFontDownloadRequest();
    public void EnqueueCharacterDownloadRequest(string characters, int characterCount);
    public void EnqueueGlyphDownloadRequest(Int16[] glyphIndices, int glyphCount);
    public void EnqueueFileFragmentDownloadRequest(long fileOffset, long fragmentSize);
}
public enum SharpDX.DirectWrite.FontFaceType : Enum {
    public int value__;
    public static FontFaceType Cff;
    public static FontFaceType Truetype;
    public static FontFaceType OpenTypeCollection;
    public static FontFaceType Type1;
    public static FontFaceType Vector;
    public static FontFaceType Bitmap;
    public static FontFaceType Unknown;
    public static FontFaceType RawCff;
    public static FontFaceType TruetypeCollection;
}
[GuidAttribute("EFA008F9-F7A1-48BF-B05C-F224713CC0FF")]
public class SharpDX.DirectWrite.FontFallback : ComObject {
    public FontFallback(IntPtr nativePtr);
    public static FontFallback op_Explicit(IntPtr nativePtr);
    public void MapCharacters(TextAnalysisSource analysisSource, int textPosition, int textLength, FontCollection baseFontCollection, string baseFamilyName, FontWeight baseWeight, FontStyle baseStyle, FontStretch baseStretch, Int32& mappedLength, Font& mappedFont, Single& scale);
}
[GuidAttribute("FD882D06-8ABA-4FB8-B849-8BE8B73E14DE")]
public class SharpDX.DirectWrite.FontFallbackBuilder : ComObject {
    public FontFallbackBuilder(IntPtr nativePtr);
    public static FontFallbackBuilder op_Explicit(IntPtr nativePtr);
    public void AddMapping(UnicodeRange[] ranges, int rangesCount, string targetFamilyNames, int targetFamilyNamesCount, FontCollection fontCollection, string localeName, string baseFamilyName, float scale);
    public void AddMappings(FontFallback fontFallback);
    public void CreateFontFallback(FontFallback& fontFallback);
}
[GuidAttribute("da20d8ef-812a-4c43-9802-62ec4abd7add")]
public class SharpDX.DirectWrite.FontFamily : FontList {
    public LocalizedStrings FamilyNames { get; }
    public FontFamily(IntPtr nativePtr);
    public static FontFamily op_Explicit(IntPtr nativePtr);
    public LocalizedStrings get_FamilyNames();
    internal void GetFamilyNames(LocalizedStrings& names);
    public Font GetFirstMatchingFont(FontWeight weight, FontStretch stretch, FontStyle style);
    public FontList GetMatchingFonts(FontWeight weight, FontStretch stretch, FontStyle style);
}
[GuidAttribute("DA20D8EF-812A-4C43-9802-62EC4ABD7ADF")]
public class SharpDX.DirectWrite.FontFamily1 : FontFamily {
    public FontFamily1(IntPtr nativePtr);
    public static FontFamily1 op_Explicit(IntPtr nativePtr);
    public Locality GetFontLocality(int listIndex);
    public void GetFont(int listIndex, Font3& font);
    public void GetFontFaceReference(int listIndex, FontFaceReference& fontFaceReference);
}
public class SharpDX.DirectWrite.FontFeature : ValueType {
    public FontFeatureTag NameTag;
    public int Parameter;
    public FontFeature(FontFeatureTag nameTag, int parameter);
}
public enum SharpDX.DirectWrite.FontFeatureTag : Enum {
    public int value__;
    public static FontFeatureTag AlternativeFractions;
    public static FontFeatureTag PetiteCapitalsFromCapitals;
    public static FontFeatureTag SmallCapitalsFromCapitals;
    public static FontFeatureTag ContextualAlternates;
    public static FontFeatureTag CaseSensitiveForms;
    public static FontFeatureTag GlyphCompositionDecomposition;
    public static FontFeatureTag ContextualLigatures;
    public static FontFeatureTag CapitalSpacing;
    public static FontFeatureTag ContextualSwash;
    public static FontFeatureTag CursivePositioning;
    public static FontFeatureTag Default;
    public static FontFeatureTag DiscretionaryLigatures;
    public static FontFeatureTag ExpertForms;
    public static FontFeatureTag Fractions;
    public static FontFeatureTag FullWidth;
    public static FontFeatureTag HalfForms;
    public static FontFeatureTag HalantForms;
    public static FontFeatureTag AlternateHalfWidth;
    public static FontFeatureTag HistoricalForms;
    public static FontFeatureTag HorizontalKanaAlternates;
    public static FontFeatureTag HistoricalLigatures;
    public static FontFeatureTag HalfWidth;
    public static FontFeatureTag HojoKanjiForms;
    public static FontFeatureTag Jis04Forms;
    public static FontFeatureTag Jis78Forms;
    public static FontFeatureTag Jis83Forms;
    public static FontFeatureTag Jis90Forms;
    public static FontFeatureTag Kerning;
    public static FontFeatureTag StandardLigatures;
    public static FontFeatureTag LiningFigures;
    public static FontFeatureTag LocalizedForms;
    public static FontFeatureTag MarkPositioning;
    public static FontFeatureTag MathematicalGreek;
    public static FontFeatureTag MarkToMarkPositioning;
    public static FontFeatureTag AlternateAnnotationForms;
    public static FontFeatureTag NlcKanjiForms;
    public static FontFeatureTag OldStyleFigures;
    public static FontFeatureTag Ordinals;
    public static FontFeatureTag ProportionalAlternateWidth;
    public static FontFeatureTag PetiteCapitals;
    public static FontFeatureTag ProportionalFigures;
    public static FontFeatureTag ProportionalWidths;
    public static FontFeatureTag QuarterWidths;
    public static FontFeatureTag RequiredLigatures;
    public static FontFeatureTag RubyNotationForms;
    public static FontFeatureTag StylisticAlternates;
    public static FontFeatureTag ScientificInferiors;
    public static FontFeatureTag SmallCapitals;
    public static FontFeatureTag SimplifiedForms;
    public static FontFeatureTag StylisticSet1;
    public static FontFeatureTag StylisticSet2;
    public static FontFeatureTag StylisticSet3;
    public static FontFeatureTag StylisticSet4;
    public static FontFeatureTag StylisticSet5;
    public static FontFeatureTag StylisticSet6;
    public static FontFeatureTag StylisticSet7;
    public static FontFeatureTag StylisticSet8;
    public static FontFeatureTag StylisticSet9;
    public static FontFeatureTag StylisticSet10;
    public static FontFeatureTag StylisticSet11;
    public static FontFeatureTag StylisticSet12;
    public static FontFeatureTag StylisticSet13;
    public static FontFeatureTag StylisticSet14;
    public static FontFeatureTag StylisticSet15;
    public static FontFeatureTag StylisticSet16;
    public static FontFeatureTag StylisticSet17;
    public static FontFeatureTag StylisticSet18;
    public static FontFeatureTag StylisticSet19;
    public static FontFeatureTag StylisticSet20;
    public static FontFeatureTag Subscript;
    public static FontFeatureTag Superscript;
    public static FontFeatureTag Swash;
    public static FontFeatureTag Titling;
    public static FontFeatureTag TraditionalNameForms;
    public static FontFeatureTag TabularFigures;
    public static FontFeatureTag TraditionalForms;
    public static FontFeatureTag ThirdWidths;
    public static FontFeatureTag Unicase;
    public static FontFeatureTag VerticalWriting;
    public static FontFeatureTag VerticalAlternatesAndRotation;
    public static FontFeatureTag SlashedZero;
}
[GuidAttribute("739d886a-cef5-47dc-8769-1a8b41bebbb0")]
public class SharpDX.DirectWrite.FontFile : ComObject {
    private FontFileLoaderShadow fontLoaderShadow;
    public FontFileLoader Loader { get; }
    public FontFile(Factory factory, string filePath);
    public FontFile(Factory factory, string filePath, Nullable`1<long> lastWriteTime);
    public FontFile(Factory factory, IntPtr fontFileReferenceKey, int fontFileReferenceKeySize, FontFileLoader fontFileLoader);
    public FontFile(IntPtr nativePtr);
    public FontFileLoader get_Loader();
    public DataPointer GetReferenceKey();
    public static FontFile op_Explicit(IntPtr nativePtr);
    internal void GetReferenceKey(IntPtr fontFileReferenceKey, Int32& fontFileReferenceKeySize);
    internal void GetLoader(FontFileLoader& fontFileLoader);
    public void Analyze(RawBool& isSupportedFontType, FontFileType& fontFileType, FontFaceType& fontFaceType, Int32& numberOfFaces);
}
[GuidAttribute("72755049-5ff7-435d-8348-4be97cfa6c7c")]
[ShadowAttribute("SharpDX.DirectWrite.FontFileEnumeratorShadow")]
public interface SharpDX.DirectWrite.FontFileEnumerator {
    public FontFile CurrentFontFile { get; }
    public abstract virtual bool MoveNext();
    public abstract virtual FontFile get_CurrentFontFile();
}
internal class SharpDX.DirectWrite.FontFileEnumeratorShadow : ComObjectShadow {
    private static FontFileEnumeratorVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static FontFileEnumeratorShadow();
    public static IntPtr ToIntPtr(FontFileEnumerator callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
[ShadowAttribute("SharpDX.DirectWrite.FontFileLoaderShadow")]
[GuidAttribute("727cad4e-d6af-4c9e-8a08-d695b11caa49")]
public interface SharpDX.DirectWrite.FontFileLoader {
    public abstract virtual FontFileStream CreateStreamFromKey(DataPointer fontFileReferenceKey);
}
[GuidAttribute("727cad4e-d6af-4c9e-8a08-d695b11caa49")]
public class SharpDX.DirectWrite.FontFileLoaderNative : ComObject {
    public FontFileLoaderNative(IntPtr nativePtr);
    public sealed virtual FontFileStream CreateStreamFromKey(DataPointer fontFileReferenceKey);
    public static FontFileLoaderNative op_Explicit(IntPtr nativePtr);
    internal void CreateStreamFromKey_(IntPtr fontFileReferenceKey, int fontFileReferenceKeySize, FontFileStream& fontFileStream);
}
internal class SharpDX.DirectWrite.FontFileLoaderShadow : ComObjectShadow {
    private static FontFileLoaderVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static FontFileLoaderShadow();
    public static IntPtr ToIntPtr(FontFileLoader callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
[ShadowAttribute("SharpDX.DirectWrite.FontFileStreamShadow")]
[GuidAttribute("6d4865fe-0ab8-4d91-8f62-5dd6be34a3e0")]
public interface SharpDX.DirectWrite.FontFileStream {
    public abstract virtual void ReadFileFragment(IntPtr& fragmentStart, long fileOffset, long fragmentSize, IntPtr& fragmentContext);
    public abstract virtual void ReleaseFileFragment(IntPtr fragmentContext);
    public abstract virtual long GetFileSize();
    public abstract virtual long GetLastWriteTime();
}
[GuidAttribute("6d4865fe-0ab8-4d91-8f62-5dd6be34a3e0")]
public class SharpDX.DirectWrite.FontFileStreamNative : ComObject {
    public long FileSize_ { get; }
    public long LastWriteTime_ { get; }
    public FontFileStreamNative(IntPtr nativePtr);
    public sealed virtual void ReadFileFragment(IntPtr& fragmentStart, long fileOffset, long fragmentSize, IntPtr& fragmentContext);
    public sealed virtual void ReleaseFileFragment(IntPtr fragmentContext);
    public sealed virtual long GetFileSize();
    public sealed virtual long GetLastWriteTime();
    public static FontFileStreamNative op_Explicit(IntPtr nativePtr);
    public long get_FileSize_();
    public long get_LastWriteTime_();
    internal void ReadFileFragment_(IntPtr& fragmentStart, long fileOffset, long fragmentSize, IntPtr& fragmentContext);
    internal void ReleaseFileFragment_(IntPtr fragmentContext);
    internal void GetFileSize_(Int64& fileSize);
    internal void GetLastWriteTime_(Int64& lastWriteTime);
}
internal class SharpDX.DirectWrite.FontFileStreamShadow : ComObjectShadow {
    private static FontFileStreamVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static FontFileStreamShadow();
    public static IntPtr ToIntPtr(FontFileStream callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
public enum SharpDX.DirectWrite.FontFileType : Enum {
    public int value__;
    public static FontFileType Unknown;
    public static FontFileType Cff;
    public static FontFileType Truetype;
    public static FontFileType OpenTypeCollection;
    public static FontFileType Type1Pfm;
    public static FontFileType Type1Pfb;
    public static FontFileType Vector;
    public static FontFileType Bitmap;
    public static FontFileType TruetypeCollection;
}
public enum SharpDX.DirectWrite.FontLineGapUsage : Enum {
    public int value__;
    public static FontLineGapUsage Default;
    public static FontLineGapUsage Disabled;
    public static FontLineGapUsage Enabled;
}
[GuidAttribute("1a0d8438-1d97-4ec1-aef9-a2fb86ed6acb")]
public class SharpDX.DirectWrite.FontList : ComObject {
    public FontCollection FontCollection { get; }
    public int FontCount { get; }
    public FontList(IntPtr nativePtr);
    public static FontList op_Explicit(IntPtr nativePtr);
    public FontCollection get_FontCollection();
    public int get_FontCount();
    internal void GetFontCollection(FontCollection& fontCollection);
    internal int GetFontCount();
    public Font GetFont(int index);
}
[GuidAttribute("DA20D8EF-812A-4C43-9802-62EC4ABD7ADE")]
public class SharpDX.DirectWrite.FontList1 : FontList {
    public FontList1(IntPtr nativePtr);
    public static FontList1 op_Explicit(IntPtr nativePtr);
    public Locality GetFontLocality(int listIndex);
    public void GetFont(int listIndex, Font3& font);
    public void GetFontFaceReference(int listIndex, FontFaceReference& fontFaceReference);
}
public class SharpDX.DirectWrite.FontMetrics : ValueType {
    public short DesignUnitsPerEm;
    public short Ascent;
    public short Descent;
    public short LineGap;
    public short CapHeight;
    public short XHeight;
    public short UnderlinePosition;
    public short UnderlineThickness;
    public short StrikethroughPosition;
    public short StrikethroughThickness;
}
public class SharpDX.DirectWrite.FontMetrics1 : ValueType {
    public short DesignUnitsPerEm;
    public short Ascent;
    public short Descent;
    public short LineGap;
    public short CapHeight;
    public short XHeight;
    public short UnderlinePosition;
    public short UnderlineThickness;
    public short StrikethroughPosition;
    public short StrikethroughThickness;
    public short GlyphBoxLeft;
    public short GlyphBoxTop;
    public short GlyphBoxRight;
    public short GlyphBoxBottom;
    public short SubscriptPositionX;
    public short SubscriptPositionY;
    public short SubscriptSizeX;
    public short SubscriptSizeY;
    public short SuperscriptPositionX;
    public short SuperscriptPositionY;
    public short SuperscriptSizeX;
    public short SuperscriptSizeY;
    public RawBool HasTypographicMetrics;
}
public class SharpDX.DirectWrite.FontProperty : ValueType {
    public FontPropertyId PropertyId;
    public string PropertyValue;
    public string LocaleName;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public enum SharpDX.DirectWrite.FontPropertyId : Enum {
    public int value__;
    public static FontPropertyId None;
    public static FontPropertyId WeightStretchStyleFamilyName;
    public static FontPropertyId TypographicFamilyName;
    public static FontPropertyId WeightStretchStyleFaceName;
    public static FontPropertyId FullName;
    public static FontPropertyId Win32FamilyName;
    public static FontPropertyId PostscriptName;
    public static FontPropertyId DesignScriptLanguageTag;
    public static FontPropertyId SupportedScriptLanguageTag;
    public static FontPropertyId SemanticTag;
    public static FontPropertyId Weight;
    public static FontPropertyId Stretch;
    public static FontPropertyId Style;
    public static FontPropertyId TypographicFaceName;
    public static FontPropertyId Total;
    public static FontPropertyId TotalRasterizer3;
    public static FontPropertyId PreferRedFamilyName;
    public static FontPropertyId FamilyName;
    public static FontPropertyId FaceName;
}
[GuidAttribute("53585141-D9F8-4095-8321-D73CF6BD116B")]
public class SharpDX.DirectWrite.FontSet : ComObject {
    public int FontCount { get; }
    public FontSet(IntPtr nativePtr);
    public static FontSet op_Explicit(IntPtr nativePtr);
    public int get_FontCount();
    internal int GetFontCount();
    public void GetFontFaceReference(int listIndex, FontFaceReference& fontFaceReference);
    public void FindFontFaceReference(FontFaceReference fontFaceReference, Int32& listIndex, RawBool& exists);
    public void FindFontFace(FontFace fontFace, Int32& listIndex, RawBool& exists);
    public void GetPropertyValues(FontPropertyId propertyID, StringList& values);
    public void GetPropertyValues(FontPropertyId propertyID, string referredLocaleNamesRef, StringList& values);
    public void GetPropertyValues(int listIndex, FontPropertyId propertyId, RawBool& exists, LocalizedStrings& values);
    public void GetPropertyOccurrenceCount(FontProperty& ropertyRef, Int32& ropertyOccurrenceCountRef);
    public void GetMatchingFonts(string familyName, FontWeight fontWeight, FontStretch fontStretch, FontStyle fontStyle, FontSet& filteredSet);
    public void GetMatchingFonts(FontProperty[] ropertiesRef, int propertyCount, FontSet& filteredSet);
}
[GuidAttribute("2F642AFE-9C68-4F40-B8BE-457401AFCB3D")]
public class SharpDX.DirectWrite.FontSetBuilder : ComObject {
    public FontSetBuilder(IntPtr nativePtr);
    public static FontSetBuilder op_Explicit(IntPtr nativePtr);
    public void AddFontFaceReference(FontFaceReference fontFaceReference, FontProperty[] ropertiesRef, int propertyCount);
    public void AddFontFaceReference(FontFaceReference fontFaceReference);
    public void AddFontSet(FontSet fontSet);
    public void CreateFontSet(FontSet& fontSet);
}
[GuidAttribute("3FF7715F-3CDC-4DC6-9B72-EC5621DCCAFD")]
public class SharpDX.DirectWrite.FontSetBuilder1 : FontSetBuilder {
    public FontSetBuilder1(IntPtr nativePtr);
    public static FontSetBuilder1 op_Explicit(IntPtr nativePtr);
    public void AddFontFile(FontFile fontFile);
}
public enum SharpDX.DirectWrite.FontSimulations : Enum {
    public int value__;
    public static FontSimulations None;
    public static FontSimulations Bold;
    public static FontSimulations Oblique;
}
public enum SharpDX.DirectWrite.FontStretch : Enum {
    public int value__;
    public static FontStretch Undefined;
    public static FontStretch UltraCondensed;
    public static FontStretch ExtraCondensed;
    public static FontStretch Condensed;
    public static FontStretch SemiCondensed;
    public static FontStretch Normal;
    public static FontStretch Medium;
    public static FontStretch SemiExpanded;
    public static FontStretch Expanded;
    public static FontStretch ExtraExpanded;
    public static FontStretch UltraExpanded;
}
public enum SharpDX.DirectWrite.FontStyle : Enum {
    public int value__;
    public static FontStyle Normal;
    public static FontStyle Oblique;
    public static FontStyle Italic;
}
public enum SharpDX.DirectWrite.FontWeight : Enum {
    public int value__;
    public static FontWeight Thin;
    public static FontWeight ExtraLight;
    public static FontWeight UltraLight;
    public static FontWeight Light;
    public static FontWeight SemiLight;
    public static FontWeight Normal;
    public static FontWeight Regular;
    public static FontWeight Medium;
    public static FontWeight DemiBold;
    public static FontWeight SemiBold;
    public static FontWeight Bold;
    public static FontWeight ExtraBold;
    public static FontWeight UltraBold;
    public static FontWeight Black;
    public static FontWeight Heavy;
    public static FontWeight ExtraBlack;
    public static FontWeight UltraBlack;
}
[GuidAttribute("1edd9491-9853-4299-898f-6432983b6f3a")]
public class SharpDX.DirectWrite.GdiInterop : ComObject {
    public GdiInterop(IntPtr nativePtr);
    public Font FromLogFont(object logFont);
    public bool ToLogFont(Font font, object logFont);
    public static GdiInterop op_Explicit(IntPtr nativePtr);
    internal void CreateFontFromLOGFONT(IntPtr logFont, Font& font);
    internal void ConvertFontToLOGFONT(Font font, IntPtr logFont, RawBool& isSystemFont);
    internal void ConvertFontFaceToLOGFONT(FontFace font, IntPtr logFont);
    public FontFace CreateFontFaceFromHdc(IntPtr hdc);
    public BitmapRenderTarget CreateBitmapRenderTarget(IntPtr hdc, int width, int height);
}
[GuidAttribute("4556BE70-3ABD-4F70-90BE-421780A6F515")]
public class SharpDX.DirectWrite.GdiInterop1 : GdiInterop {
    public GdiInterop1(IntPtr nativePtr);
    public static GdiInterop1 op_Explicit(IntPtr nativePtr);
    internal Font CreateFontFromLOGFONT(IntPtr logFont, FontCollection fontCollection);
    public FontSignature GetFontSignature(FontFace fontFace);
    public FontSignature GetFontSignature(Font font);
    internal void GetMatchingFontsByLOGFONT(IntPtr logFont, FontSet fontSet, FontSet& filteredSet);
}
public class SharpDX.DirectWrite.GlyphImageData : ValueType {
    public IntPtr ImageData;
    public int ImageDataSize;
    public int UniqueDataId;
    public int PixelsPerEm;
    public Size2 PixelSize;
    public RawPoint HorizontalLeftOrigin;
    public RawPoint HorizontalRightOrigin;
    public RawPoint VerticalTopOrigin;
    public RawPoint VerticalBottomOrigin;
}
public class SharpDX.DirectWrite.GlyphMetrics : ValueType {
    public int LeftSideBearing;
    public int AdvanceWidth;
    public int RightSideBearing;
    public int TopSideBearing;
    public int AdvanceHeight;
    public int BottomSideBearing;
    public int VerticalOriginY;
}
public class SharpDX.DirectWrite.GlyphOffset : ValueType {
    public float AdvanceOffset;
    public float AscenderOffset;
}
public enum SharpDX.DirectWrite.GlyphOrientationAngle : Enum {
    public int value__;
    public static GlyphOrientationAngle Degrees0;
    public static GlyphOrientationAngle Degrees90;
    public static GlyphOrientationAngle Degrees180;
    public static GlyphOrientationAngle Degrees270;
}
public class SharpDX.DirectWrite.GlyphRun : object {
    [CompilerGeneratedAttribute]
private FontFace <FontFace>k__BackingField;
    [CompilerGeneratedAttribute]
private Int16[] <Indices>k__BackingField;
    [CompilerGeneratedAttribute]
private Single[] <Advances>k__BackingField;
    [CompilerGeneratedAttribute]
private GlyphOffset[] <Offsets>k__BackingField;
    internal FontFace FontFacePointer;
    public float FontSize;
    internal int GlyphCount;
    internal IntPtr GlyphIndicesPointer;
    internal IntPtr GlyphAdvancesPointer;
    internal IntPtr GlyphOffsetsPointer;
    public RawBool IsSideways;
    public int BidiLevel;
    public FontFace FontFace { get; public set; }
    public Int16[] Indices { get; public set; }
    public Single[] Advances { get; public set; }
    public GlyphOffset[] Offsets { get; public set; }
    [CompilerGeneratedAttribute]
public FontFace get_FontFace();
    [CompilerGeneratedAttribute]
public void set_FontFace(FontFace value);
    [CompilerGeneratedAttribute]
public Int16[] get_Indices();
    [CompilerGeneratedAttribute]
public void set_Indices(Int16[] value);
    [CompilerGeneratedAttribute]
public Single[] get_Advances();
    [CompilerGeneratedAttribute]
public void set_Advances(Single[] value);
    [CompilerGeneratedAttribute]
public GlyphOffset[] get_Offsets();
    [CompilerGeneratedAttribute]
public void set_Offsets(GlyphOffset[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
    public sealed virtual void Dispose();
}
[GuidAttribute("7d97dbf7-e085-42d4-81e3-6a883bded118")]
public class SharpDX.DirectWrite.GlyphRunAnalysis : ComObject {
    public GlyphRunAnalysis(Factory factory, GlyphRun glyphRun, float pixelsPerDip, RenderingMode renderingMode, MeasuringMode measuringMode, float baselineOriginX, float baselineOriginY);
    public GlyphRunAnalysis(Factory factory, GlyphRun glyphRun, float pixelsPerDip, Nullable`1<RawMatrix3x2> transform, RenderingMode renderingMode, MeasuringMode measuringMode, float baselineOriginX, float baselineOriginY);
    public GlyphRunAnalysis(IntPtr nativePtr);
    public static GlyphRunAnalysis op_Explicit(IntPtr nativePtr);
    public RawRectangle GetAlphaTextureBounds(TextureType textureType);
    public void CreateAlphaTexture(TextureType textureType, RawRectangle textureBounds, Byte[] alphaValues, int bufferSize);
    public void GetAlphaBlendParams(RenderingParams renderingParams, Single& blendGamma, Single& blendEnhancedContrast, Single& blendClearTypeLevel);
}
public class SharpDX.DirectWrite.GlyphRunDescription : object {
    public string LocaleName;
    public string Text;
    internal int TextLength;
    public IntPtr ClusterMap;
    public int TextPosition;
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
    internal void __MarshalFree(__Native& ref);
}
public class SharpDX.DirectWrite.GlyphRunItem : ValueType {
    public short Index;
    public float Advance;
    public GlyphOffset Offset;
}
public enum SharpDX.DirectWrite.GridFitMode : Enum {
    public int value__;
    public static GridFitMode Default;
    public static GridFitMode Disabled;
    public static GridFitMode Enabled;
}
public class SharpDX.DirectWrite.HitTestMetrics : ValueType {
    public int TextPosition;
    public int Length;
    public float Left;
    public float Top;
    public float Width;
    public float Height;
    public int BidiLevel;
    public RawBool IsText;
    public RawBool IsTrimmed;
}
public enum SharpDX.DirectWrite.InformationalStringId : Enum {
    public int value__;
    public static InformationalStringId None;
    public static InformationalStringId CopyrightNotice;
    public static InformationalStringId VersionStrings;
    public static InformationalStringId Trademark;
    public static InformationalStringId Manufacturer;
    public static InformationalStringId Designer;
    public static InformationalStringId DesignerUrl;
    public static InformationalStringId Description;
    public static InformationalStringId FontVendorUrl;
    public static InformationalStringId LicenseDescription;
    public static InformationalStringId LicenseInformationUrl;
    public static InformationalStringId Win32FamilyNames;
    public static InformationalStringId Win32SubFamilyNames;
    public static InformationalStringId TypographicFamilyNames;
    public static InformationalStringId TypographicSubFamilyNames;
    public static InformationalStringId SampleText;
    public static InformationalStringId FullName;
    public static InformationalStringId PostscriptName;
    public static InformationalStringId PostscriptCidName;
    public static InformationalStringId WeightStretchStyleFamilyName;
    public static InformationalStringId DesignScriptLanguageTag;
    public static InformationalStringId SupportedScriptLanguageTag;
    public static InformationalStringId PreferRedFamilyNames;
    public static InformationalStringId PreferRedSubFamilyNames;
    public static InformationalStringId WwsFamilyName;
}
[GuidAttribute("8339FDE3-106F-47ab-8373-1C6295EB10B3")]
[ShadowAttribute("SharpDX.DirectWrite.InlineObjectShadow")]
public interface SharpDX.DirectWrite.InlineObject {
    public InlineObjectMetrics Metrics { get; }
    public OverhangMetrics OverhangMetrics { get; }
    public abstract virtual void Draw(object clientDrawingContext, TextRenderer renderer, float originX, float originY, bool isSideways, bool isRightToLeft, ComObject clientDrawingEffect);
    public abstract virtual InlineObjectMetrics get_Metrics();
    public abstract virtual OverhangMetrics get_OverhangMetrics();
    public abstract virtual void GetBreakConditions(BreakCondition& breakConditionBefore, BreakCondition& breakConditionAfter);
}
public class SharpDX.DirectWrite.InlineObjectMetrics : ValueType {
    public float Width;
    public float Height;
    public float Baseline;
    public RawBool SupportsSideways;
}
[GuidAttribute("8339FDE3-106F-47ab-8373-1C6295EB10B3")]
public class SharpDX.DirectWrite.InlineObjectNative : ComObject {
    public InlineObjectMetrics Metrics { get; }
    public OverhangMetrics OverhangMetrics { get; }
    public InlineObjectMetrics Metrics_ { get; }
    public OverhangMetrics OverhangMetrics_ { get; }
    public InlineObjectNative(IntPtr nativePtr);
    public sealed virtual void Draw(object clientDrawingContext, TextRenderer renderer, float originX, float originY, bool isSideways, bool isRightToLeft, ComObject clientDrawingEffect);
    public sealed virtual InlineObjectMetrics get_Metrics();
    public sealed virtual OverhangMetrics get_OverhangMetrics();
    public sealed virtual void GetBreakConditions(BreakCondition& breakConditionBefore, BreakCondition& breakConditionAfter);
    public static InlineObjectNative op_Explicit(IntPtr nativePtr);
    public InlineObjectMetrics get_Metrics_();
    public OverhangMetrics get_OverhangMetrics_();
    internal void Draw_(IntPtr clientDrawingContext, TextRenderer renderer, float originX, float originY, RawBool isSideways, RawBool isRightToLeft, IntPtr clientDrawingEffect);
    internal void GetMetrics_(InlineObjectMetrics& metrics);
    internal void GetOverhangMetrics_(OverhangMetrics& overhangs);
    internal void GetBreakConditions_(BreakCondition& breakConditionBefore, BreakCondition& breakConditionAfter);
}
internal class SharpDX.DirectWrite.InlineObjectShadow : ComObjectShadow {
    private static InlineObjectVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static InlineObjectShadow();
    public static IntPtr ToIntPtr(InlineObject callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
[GuidAttribute("DC102F47-A12D-4B1C-822D-9E117E33043F")]
public class SharpDX.DirectWrite.InMemoryFontFileLoader : FontFileLoaderNative {
    public int FileCount { get; }
    public InMemoryFontFileLoader(IntPtr nativePtr);
    public static InMemoryFontFileLoader op_Explicit(IntPtr nativePtr);
    public int get_FileCount();
    public void CreateInMemoryFontFileReference(Factory factory, IntPtr fontData, int fontDataSize, IUnknown ownerObject, FontFile& fontFile);
    internal int GetFileCount();
}
public class SharpDX.DirectWrite.JustificationOpportunity : ValueType {
    public float ExpansionMinimum;
    public float ExpansionMaximum;
    public float CompressionMaximum;
    internal int _ExpansionPriority;
    internal int _CompressionPriority;
    internal int _AllowResidualExpansion;
    internal int _AllowResidualCompression;
    internal int _ApplyToLeadingEdge;
    internal int _ApplyToTrailingEdge;
    internal int _Reserved;
    public int ExpansionPriority { get; public set; }
    public int CompressionPriority { get; public set; }
    public bool AllowResidualExpansion { get; public set; }
    public bool AllowResidualCompression { get; public set; }
    public bool ApplyToLeadingEdge { get; public set; }
    public bool ApplyToTrailingEdge { get; public set; }
    public int Reserved { get; public set; }
    public int get_ExpansionPriority();
    public void set_ExpansionPriority(int value);
    public int get_CompressionPriority();
    public void set_CompressionPriority(int value);
    public bool get_AllowResidualExpansion();
    public void set_AllowResidualExpansion(bool value);
    public bool get_AllowResidualCompression();
    public void set_AllowResidualCompression(bool value);
    public bool get_ApplyToLeadingEdge();
    public void set_ApplyToLeadingEdge(bool value);
    public bool get_ApplyToTrailingEdge();
    public void set_ApplyToTrailingEdge(bool value);
    public int get_Reserved();
    public void set_Reserved(int value);
}
public class SharpDX.DirectWrite.LineBreakpoint : ValueType {
    internal byte _BreakConditionBefore_;
    internal byte _BreakConditionAfter_;
    internal byte _IsWhitespace;
    internal byte _IsSoftHyphen;
    internal byte _Padding;
    public BreakCondition BreakConditionBefore { get; public set; }
    public BreakCondition BreakConditionAfter { get; public set; }
    internal byte BreakConditionBefore_ { get; internal set; }
    internal byte BreakConditionAfter_ { get; internal set; }
    public bool IsWhitespace { get; public set; }
    public bool IsSoftHyphen { get; public set; }
    internal byte Padding { get; internal set; }
    public BreakCondition get_BreakConditionBefore();
    public void set_BreakConditionBefore(BreakCondition value);
    public BreakCondition get_BreakConditionAfter();
    public void set_BreakConditionAfter(BreakCondition value);
    internal byte get_BreakConditionBefore_();
    internal void set_BreakConditionBefore_(byte value);
    internal byte get_BreakConditionAfter_();
    internal void set_BreakConditionAfter_(byte value);
    public bool get_IsWhitespace();
    public void set_IsWhitespace(bool value);
    public bool get_IsSoftHyphen();
    public void set_IsSoftHyphen(bool value);
    internal byte get_Padding();
    internal void set_Padding(byte value);
}
public class SharpDX.DirectWrite.LineMetrics : ValueType {
    public int Length;
    public int TrailingWhitespaceLength;
    public int NewlineLength;
    public float Height;
    public float Baseline;
    public RawBool IsTrimmed;
}
public class SharpDX.DirectWrite.LineMetrics1 : ValueType {
    public int Length;
    public int TrailingWhitespaceLength;
    public int NewlineLength;
    public float Height;
    public float Baseline;
    public RawBool IsTrimmed;
    public float LeadingBefore;
    public float LeadingAfter;
}
public class SharpDX.DirectWrite.LineSpacing : ValueType {
    public LineSpacingMethod Method;
    public float Height;
    public float Baseline;
    public float LeadingBefore;
    public FontLineGapUsage FontLineGapUsage;
}
public enum SharpDX.DirectWrite.LineSpacingMethod : Enum {
    public int value__;
    public static LineSpacingMethod Default;
    public static LineSpacingMethod Uniform;
    public static LineSpacingMethod Proportional;
}
[GuidAttribute("b2d9f3ec-c9fe-4a11-a2ec-d86208f7c0a2")]
public class SharpDX.DirectWrite.LocalFontFileLoader : FontFileLoaderNative {
    public LocalFontFileLoader(IntPtr nativePtr);
    public string GetFilePath(DataPointer referenceKey);
    public DateTime GetLastWriteTime(DataPointer referenceKey);
    public static LocalFontFileLoader op_Explicit(IntPtr nativePtr);
    internal int GetFilePathLengthFromKey(IntPtr fontFileReferenceKey, int fontFileReferenceKeySize);
    internal void GetFilePathFromKey(IntPtr fontFileReferenceKey, int fontFileReferenceKeySize, IntPtr filePath, int filePathSize);
    internal long GetLastWriteTimeFromKey(IntPtr fontFileReferenceKey, int fontFileReferenceKeySize);
}
public enum SharpDX.DirectWrite.Locality : Enum {
    public int value__;
    public static Locality Remote;
    public static Locality Partial;
    public static Locality Local;
}
[GuidAttribute("08256209-099a-4b34-b86d-c22b110e7771")]
public class SharpDX.DirectWrite.LocalizedStrings : ComObject {
    public int Count { get; }
    public LocalizedStrings(IntPtr nativePtr);
    public string GetLocaleName(int index);
    public string GetString(int index);
    public static LocalizedStrings op_Explicit(IntPtr nativePtr);
    public int get_Count();
    internal int GetCount();
    public RawBool FindLocaleName(string localeName, Int32& index);
    internal void GetLocaleNameLength(int index, Int32& length);
    internal void GetLocaleName(int index, IntPtr localeName, int size);
    internal void GetStringLength(int index, Int32& length);
    internal void GetString(int index, IntPtr stringBuffer, int size);
}
[CompilerGeneratedAttribute]
internal class SharpDX.DirectWrite.NamespaceDoc : object {
}
[GuidAttribute("14885CC9-BAB0-4f90-B6ED-5C366A2CD03D")]
public class SharpDX.DirectWrite.NumberSubstitution : ComObject {
    public NumberSubstitution(Factory factory, NumberSubstitutionMethod substitutionMethod, string localeName, bool ignoreUserOverride);
    public NumberSubstitution(IntPtr nativePtr);
    public static NumberSubstitution op_Explicit(IntPtr nativePtr);
}
public enum SharpDX.DirectWrite.NumberSubstitutionMethod : Enum {
    public int value__;
    public static NumberSubstitutionMethod FromCulture;
    public static NumberSubstitutionMethod Contextual;
    public static NumberSubstitutionMethod None;
    public static NumberSubstitutionMethod National;
    public static NumberSubstitutionMethod Traditional;
}
public enum SharpDX.DirectWrite.OptimizationIcalAlignment : Enum {
    public int value__;
    public static OptimizationIcalAlignment None;
    public static OptimizationIcalAlignment NoSideBearings;
}
public enum SharpDX.DirectWrite.OutlineThreshold : Enum {
    public int value__;
    public static OutlineThreshold Antialiased;
    public static OutlineThreshold Aliased;
}
public class SharpDX.DirectWrite.OverhangMetrics : ValueType {
    public float Left;
    public float Top;
    public float Right;
    public float Bottom;
}
public class SharpDX.DirectWrite.Panose : ValueType {
    internal Byte[] _Values;
    public byte FamilyKind;
    public PanoseText Text;
    public PanoseScript Script;
    public PanoseDecorative Decorative;
    public PanoseSymbol Symbol;
    public Byte[] Values { get; private set; }
    public Byte[] get_Values();
    private void set_Values(Byte[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public enum SharpDX.DirectWrite.PanoseArmStyle : Enum {
    public int value__;
    public static PanoseArmStyle Any;
    public static PanoseArmStyle NoFit;
    public static PanoseArmStyle StraightArmsHorizontal;
    public static PanoseArmStyle StraightArmsWedge;
    public static PanoseArmStyle StraightArmsVertical;
    public static PanoseArmStyle StraightArmsSingleSerif;
    public static PanoseArmStyle StraightArmsDoubleSerif;
    public static PanoseArmStyle NonstraightArmsHorizontal;
    public static PanoseArmStyle NonstraightArmsWedge;
    public static PanoseArmStyle NonstraightArmsVertical;
    public static PanoseArmStyle NonstraightArmsSingleSerif;
    public static PanoseArmStyle NonstraightArmsDoubleSerif;
    public static PanoseArmStyle StraightArmsHorz;
    public static PanoseArmStyle StraightArmsVert;
    public static PanoseArmStyle BentArmsHorz;
    public static PanoseArmStyle BentArmsWedge;
    public static PanoseArmStyle BentArmsVert;
    public static PanoseArmStyle BentArmsSingleSerif;
    public static PanoseArmStyle BentArmsDoubleSerif;
}
public enum SharpDX.DirectWrite.PanoseAspect : Enum {
    public int value__;
    public static PanoseAspect Any;
    public static PanoseAspect NoFit;
    public static PanoseAspect SuperCondensed;
    public static PanoseAspect VeryCondensed;
    public static PanoseAspect Condensed;
    public static PanoseAspect Normal;
    public static PanoseAspect Extended;
    public static PanoseAspect VeryExtended;
    public static PanoseAspect SuperExtended;
    public static PanoseAspect Monospaced;
}
public enum SharpDX.DirectWrite.PanoseAspectRatio : Enum {
    public int value__;
    public static PanoseAspectRatio Any;
    public static PanoseAspectRatio NoFit;
    public static PanoseAspectRatio VeryCondensed;
    public static PanoseAspectRatio Condensed;
    public static PanoseAspectRatio Normal;
    public static PanoseAspectRatio Expanded;
    public static PanoseAspectRatio VeryExpanded;
}
public enum SharpDX.DirectWrite.PanoseCharacterRanges : Enum {
    public int value__;
    public static PanoseCharacterRanges Any;
    public static PanoseCharacterRanges NoFit;
    public static PanoseCharacterRanges ExtendedCollection;
    public static PanoseCharacterRanges Literals;
    public static PanoseCharacterRanges NoLowerCase;
    public static PanoseCharacterRanges SmallCaps;
}
public enum SharpDX.DirectWrite.PanoseContrast : Enum {
    public int value__;
    public static PanoseContrast Any;
    public static PanoseContrast NoFit;
    public static PanoseContrast None;
    public static PanoseContrast VeryLow;
    public static PanoseContrast Low;
    public static PanoseContrast MediumLow;
    public static PanoseContrast Medium;
    public static PanoseContrast MediumHigh;
    public static PanoseContrast High;
    public static PanoseContrast VeryHigh;
    public static PanoseContrast HorizontalLow;
    public static PanoseContrast HorizontalMedium;
    public static PanoseContrast HorizontalHigh;
    public static PanoseContrast Broken;
}
public class SharpDX.DirectWrite.PanoseDecorative : ValueType {
    public byte FamilyKind;
    public byte DecorativeClass;
    public byte Weight;
    public byte Aspect;
    public byte Contrast;
    public byte SerifVariant;
    public byte Fill;
    public byte Lining;
    public byte DecorativeTopology;
    public byte CharacterRange;
}
public enum SharpDX.DirectWrite.PanoseDecorativeClass : Enum {
    public int value__;
    public static PanoseDecorativeClass Any;
    public static PanoseDecorativeClass NoFit;
    public static PanoseDecorativeClass Derivative;
    public static PanoseDecorativeClass NonStandardTopology;
    public static PanoseDecorativeClass NonStandardElements;
    public static PanoseDecorativeClass NonStandardAspect;
    public static PanoseDecorativeClass Initials;
    public static PanoseDecorativeClass Cartoon;
    public static PanoseDecorativeClass PictureStems;
    public static PanoseDecorativeClass Ornamented;
    public static PanoseDecorativeClass TextAndBackground;
    public static PanoseDecorativeClass Collage;
    public static PanoseDecorativeClass Montage;
}
public enum SharpDX.DirectWrite.PanoseDecorativeTopology : Enum {
    public int value__;
    public static PanoseDecorativeTopology Any;
    public static PanoseDecorativeTopology NoFit;
    public static PanoseDecorativeTopology Standard;
    public static PanoseDecorativeTopology Square;
    public static PanoseDecorativeTopology MultipleSegment;
    public static PanoseDecorativeTopology ArtDeco;
    public static PanoseDecorativeTopology UnevenWeighting;
    public static PanoseDecorativeTopology DiverseArms;
    public static PanoseDecorativeTopology DiverseForms;
    public static PanoseDecorativeTopology LombardicForms;
    public static PanoseDecorativeTopology UpperCaseInLowerCase;
    public static PanoseDecorativeTopology ImpliedTopology;
    public static PanoseDecorativeTopology HorseshoeEAndA;
    public static PanoseDecorativeTopology Cursive;
    public static PanoseDecorativeTopology Blackletter;
    public static PanoseDecorativeTopology SwashVariance;
}
public enum SharpDX.DirectWrite.PanoseFamily : Enum {
    public int value__;
    public static PanoseFamily Any;
    public static PanoseFamily NoFit;
    public static PanoseFamily TextDisplay;
    public static PanoseFamily Script;
    public static PanoseFamily Decorative;
    public static PanoseFamily Symbol;
    public static PanoseFamily Pictorial;
}
public enum SharpDX.DirectWrite.PanoseFill : Enum {
    public int value__;
    public static PanoseFill Any;
    public static PanoseFill NoFit;
    public static PanoseFill StandardSolidFill;
    public static PanoseFill NoFill;
    public static PanoseFill PatternedFill;
    public static PanoseFill ComplexFill;
    public static PanoseFill ShapedFill;
    public static PanoseFill DrawnDistressed;
}
public enum SharpDX.DirectWrite.PanoseFinials : Enum {
    public int value__;
    public static PanoseFinials Any;
    public static PanoseFinials NoFit;
    public static PanoseFinials NoneNoLoops;
    public static PanoseFinials NoneClosedLoops;
    public static PanoseFinials NoneOpenLoops;
    public static PanoseFinials SharpNoLoops;
    public static PanoseFinials SharpClosedLoops;
    public static PanoseFinials SharpOpenLoops;
    public static PanoseFinials TaperedNoLoops;
    public static PanoseFinials TaperedClosedLoops;
    public static PanoseFinials TaperedOpenLoops;
    public static PanoseFinials RoundNoLoops;
    public static PanoseFinials RoundClosedLoops;
    public static PanoseFinials RoundOpenLoops;
}
public enum SharpDX.DirectWrite.PanoseLetterform : Enum {
    public int value__;
    public static PanoseLetterform Any;
    public static PanoseLetterform NoFit;
    public static PanoseLetterform NormalContact;
    public static PanoseLetterform NormalWeighted;
    public static PanoseLetterform NormalBoxed;
    public static PanoseLetterform NormalFlattened;
    public static PanoseLetterform NormalRounded;
    public static PanoseLetterform NormalOffCenter;
    public static PanoseLetterform NormalSquare;
    public static PanoseLetterform ObliqueContact;
    public static PanoseLetterform ObliqueWeighted;
    public static PanoseLetterform ObliqueBoxed;
    public static PanoseLetterform ObliqueFlattened;
    public static PanoseLetterform ObliqueRounded;
    public static PanoseLetterform ObliqueOffCenter;
    public static PanoseLetterform ObliqueSquare;
}
public enum SharpDX.DirectWrite.PanoseLining : Enum {
    public int value__;
    public static PanoseLining Any;
    public static PanoseLining NoFit;
    public static PanoseLining None;
    public static PanoseLining Inline;
    public static PanoseLining Outline;
    public static PanoseLining Engraved;
    public static PanoseLining Shadow;
    public static PanoseLining Relief;
    public static PanoseLining Backdrop;
}
public enum SharpDX.DirectWrite.PanoseMidline : Enum {
    public int value__;
    public static PanoseMidline Any;
    public static PanoseMidline NoFit;
    public static PanoseMidline StandardTrimmed;
    public static PanoseMidline StandardPointed;
    public static PanoseMidline StandardSerifed;
    public static PanoseMidline HighTrimmed;
    public static PanoseMidline HighPointed;
    public static PanoseMidline HighSerifed;
    public static PanoseMidline ConstantTrimmed;
    public static PanoseMidline ConstantPointed;
    public static PanoseMidline ConstantSerifed;
    public static PanoseMidline LowTrimmed;
    public static PanoseMidline LowPointed;
    public static PanoseMidline LowSerifed;
}
public enum SharpDX.DirectWrite.PanoseProportion : Enum {
    public int value__;
    public static PanoseProportion Any;
    public static PanoseProportion NoFit;
    public static PanoseProportion OldStyle;
    public static PanoseProportion Modern;
    public static PanoseProportion EvenWidth;
    public static PanoseProportion Expanded;
    public static PanoseProportion Condensed;
    public static PanoseProportion VeryExpanded;
    public static PanoseProportion VeryCondensed;
    public static PanoseProportion Monospaced;
}
public class SharpDX.DirectWrite.PanoseScript : ValueType {
    public byte FamilyKind;
    public byte ToolKind;
    public byte Weight;
    public byte Spacing;
    public byte AspectRatio;
    public byte Contrast;
    public byte ScriptTopology;
    public byte ScriptForm;
    public byte Finials;
    public byte XAscent;
}
public enum SharpDX.DirectWrite.PanoseScriptForm : Enum {
    public int value__;
    public static PanoseScriptForm Any;
    public static PanoseScriptForm NoFit;
    public static PanoseScriptForm UprightNoWrapping;
    public static PanoseScriptForm UprightSomeWrapping;
    public static PanoseScriptForm UprightMoreWrapping;
    public static PanoseScriptForm UprightExtremeWrapping;
    public static PanoseScriptForm ObliqueNoWrapping;
    public static PanoseScriptForm ObliqueSomeWrapping;
    public static PanoseScriptForm ObliqueMoreWrapping;
    public static PanoseScriptForm ObliqueExtremeWrapping;
    public static PanoseScriptForm ExaggeratedNoWrapping;
    public static PanoseScriptForm ExaggeratedSomeWrapping;
    public static PanoseScriptForm ExaggeratedMoreWrapping;
    public static PanoseScriptForm ExaggeratedExtremeWrapping;
}
public enum SharpDX.DirectWrite.PanoseScriptTopology : Enum {
    public int value__;
    public static PanoseScriptTopology Any;
    public static PanoseScriptTopology NoFit;
    public static PanoseScriptTopology RomanDisconnected;
    public static PanoseScriptTopology RomanTrailing;
    public static PanoseScriptTopology RomanConnected;
    public static PanoseScriptTopology CursiveDisconnected;
    public static PanoseScriptTopology CursiveTrailing;
    public static PanoseScriptTopology CursiveConnected;
    public static PanoseScriptTopology BlackletterDisconnected;
    public static PanoseScriptTopology BlackletterTrailing;
    public static PanoseScriptTopology BlackletterConnected;
}
public enum SharpDX.DirectWrite.PanoseSerifStyle : Enum {
    public int value__;
    public static PanoseSerifStyle Any;
    public static PanoseSerifStyle NoFit;
    public static PanoseSerifStyle Cove;
    public static PanoseSerifStyle ObtuseCove;
    public static PanoseSerifStyle SquareCove;
    public static PanoseSerifStyle ObtuseSquareCove;
    public static PanoseSerifStyle Square;
    public static PanoseSerifStyle Thin;
    public static PanoseSerifStyle Oval;
    public static PanoseSerifStyle Exaggerated;
    public static PanoseSerifStyle Triangle;
    public static PanoseSerifStyle NormalSans;
    public static PanoseSerifStyle ObtuseSans;
    public static PanoseSerifStyle PerpendicularSans;
    public static PanoseSerifStyle Flared;
    public static PanoseSerifStyle Rounded;
    public static PanoseSerifStyle Script;
    public static PanoseSerifStyle PerpSans;
    public static PanoseSerifStyle Bone;
}
public enum SharpDX.DirectWrite.PanoseSpacing : Enum {
    public int value__;
    public static PanoseSpacing Any;
    public static PanoseSpacing NoFit;
    public static PanoseSpacing ProportionalSpaced;
    public static PanoseSpacing Monospaced;
}
public enum SharpDX.DirectWrite.PanoseStrokeVariation : Enum {
    public int value__;
    public static PanoseStrokeVariation Any;
    public static PanoseStrokeVariation NoFit;
    public static PanoseStrokeVariation NoVariation;
    public static PanoseStrokeVariation GradualDiagonal;
    public static PanoseStrokeVariation GradualTransitional;
    public static PanoseStrokeVariation GradualVertical;
    public static PanoseStrokeVariation GradualHorizontal;
    public static PanoseStrokeVariation RapidVertical;
    public static PanoseStrokeVariation RapidHorizontal;
    public static PanoseStrokeVariation InstantVertical;
    public static PanoseStrokeVariation InstantHorizontal;
}
public class SharpDX.DirectWrite.PanoseSymbol : ValueType {
    public byte FamilyKind;
    public byte SymbolKind;
    public byte Weight;
    public byte Spacing;
    public byte AspectRatioAndContrast;
    public byte AspectRatio94;
    public byte AspectRatio119;
    public byte AspectRatio157;
    public byte AspectRatio163;
    public byte AspectRatio211;
}
public enum SharpDX.DirectWrite.PanoseSymbolAspectRatio : Enum {
    public int value__;
    public static PanoseSymbolAspectRatio Any;
    public static PanoseSymbolAspectRatio NoFit;
    public static PanoseSymbolAspectRatio NoWidth;
    public static PanoseSymbolAspectRatio ExceptionallyWide;
    public static PanoseSymbolAspectRatio SuperWide;
    public static PanoseSymbolAspectRatio VeryWide;
    public static PanoseSymbolAspectRatio Wide;
    public static PanoseSymbolAspectRatio Normal;
    public static PanoseSymbolAspectRatio Narrow;
    public static PanoseSymbolAspectRatio VeryNarrow;
}
public enum SharpDX.DirectWrite.PanoseSymbolKind : Enum {
    public int value__;
    public static PanoseSymbolKind Any;
    public static PanoseSymbolKind NoFit;
    public static PanoseSymbolKind Montages;
    public static PanoseSymbolKind Pictures;
    public static PanoseSymbolKind Shapes;
    public static PanoseSymbolKind Scientific;
    public static PanoseSymbolKind Music;
    public static PanoseSymbolKind Expert;
    public static PanoseSymbolKind Patterns;
    public static PanoseSymbolKind Boarders;
    public static PanoseSymbolKind Icons;
    public static PanoseSymbolKind Logos;
    public static PanoseSymbolKind IndustrySpecific;
}
public class SharpDX.DirectWrite.PanoseText : ValueType {
    public byte FamilyKind;
    public byte SerifStyle;
    public byte Weight;
    public byte Proportion;
    public byte Contrast;
    public byte StrokeVariation;
    public byte ArmStyle;
    public byte Letterform;
    public byte Midline;
    public byte XHeight;
}
public enum SharpDX.DirectWrite.PanoseToolKind : Enum {
    public int value__;
    public static PanoseToolKind Any;
    public static PanoseToolKind NoFit;
    public static PanoseToolKind FlatNib;
    public static PanoseToolKind PressurePoint;
    public static PanoseToolKind Engraved;
    public static PanoseToolKind Ball;
    public static PanoseToolKind Brush;
    public static PanoseToolKind Rough;
    public static PanoseToolKind FeltPenBrushTip;
    public static PanoseToolKind WildBrush;
}
public enum SharpDX.DirectWrite.PanoseWeight : Enum {
    public int value__;
    public static PanoseWeight Any;
    public static PanoseWeight NoFit;
    public static PanoseWeight VeryLight;
    public static PanoseWeight Light;
    public static PanoseWeight Thin;
    public static PanoseWeight Book;
    public static PanoseWeight Medium;
    public static PanoseWeight Demi;
    public static PanoseWeight Bold;
    public static PanoseWeight Heavy;
    public static PanoseWeight Black;
    public static PanoseWeight ExtraBlack;
    public static PanoseWeight Nord;
}
public enum SharpDX.DirectWrite.PanoseXascent : Enum {
    public int value__;
    public static PanoseXascent Any;
    public static PanoseXascent NoFit;
    public static PanoseXascent VeryLow;
    public static PanoseXascent Low;
    public static PanoseXascent Medium;
    public static PanoseXascent High;
    public static PanoseXascent VeryHigh;
}
public enum SharpDX.DirectWrite.PanoseXheight : Enum {
    public int value__;
    public static PanoseXheight Any;
    public static PanoseXheight NoFit;
    public static PanoseXheight ConstantSmall;
    public static PanoseXheight ConstantStandard;
    public static PanoseXheight ConstantLarge;
    public static PanoseXheight DuckingSmall;
    public static PanoseXheight DuckingStandard;
    public static PanoseXheight DuckingLarge;
    public static PanoseXheight ConstantStd;
    public static PanoseXheight DuckingStd;
}
public enum SharpDX.DirectWrite.ParagraphAlignment : Enum {
    public int value__;
    public static ParagraphAlignment Near;
    public static ParagraphAlignment Far;
    public static ParagraphAlignment Center;
}
public enum SharpDX.DirectWrite.PixelGeometry : Enum {
    public int value__;
    public static PixelGeometry Flat;
    public static PixelGeometry Rgb;
    public static PixelGeometry Bgr;
}
[ShadowAttribute("SharpDX.DirectWrite.PixelSnappingShadow")]
[GuidAttribute("eaf3a2da-ecf4-4d24-b644-b34f6842024b")]
public interface SharpDX.DirectWrite.PixelSnapping {
    public abstract virtual bool IsPixelSnappingDisabled(object clientDrawingContext);
    public abstract virtual RawMatrix3x2 GetCurrentTransform(object clientDrawingContext);
    public abstract virtual float GetPixelsPerDip(object clientDrawingContext);
}
internal abstract class SharpDX.DirectWrite.PixelSnappingShadow : ComObjectShadow {
}
public enum SharpDX.DirectWrite.ReadingDirection : Enum {
    public int value__;
    public static ReadingDirection LeftToRight;
    public static ReadingDirection RightToLeft;
    public static ReadingDirection TopToBottom;
    public static ReadingDirection BottomToTop;
}
[GuidAttribute("68648C83-6EDE-46C0-AB46-20083A887FDE")]
public class SharpDX.DirectWrite.RemoteFontFileLoader : FontFileLoaderNative {
    public RemoteFontFileLoader(IntPtr nativePtr);
    public static RemoteFontFileLoader op_Explicit(IntPtr nativePtr);
    public void CreateRemoteStreamFromKey(IntPtr fontFileReferenceKey, int fontFileReferenceKeySize, RemoteFontFileStream& fontFileStream);
    public void GetLocalityFromKey(IntPtr fontFileReferenceKey, int fontFileReferenceKeySize, Locality& locality);
    public void CreateFontFileReferenceFromUrl(Factory factory, string baseUrl, string fontFileUrl, FontFile& fontFile);
}
[GuidAttribute("4DB3757A-2C72-4ED9-B2B6-1ABABE1AFF9C")]
public class SharpDX.DirectWrite.RemoteFontFileStream : FontFileStreamNative {
    public long LocalFileSize { get; }
    public Locality Locality { get; }
    public RemoteFontFileStream(IntPtr nativePtr);
    public static RemoteFontFileStream op_Explicit(IntPtr nativePtr);
    public long get_LocalFileSize();
    public Locality get_Locality();
    internal void GetLocalFileSize(Int64& localFileSize);
    public void GetFileFragmentLocality(long fileOffset, long fragmentSize, RawBool& isLocal, long artialSizeRef);
    internal Locality GetLocality();
    public AsyncResult BeginDownload(Guid downloadOperationID, FileFragment[] fileFragments, int fragmentCount);
}
public enum SharpDX.DirectWrite.RenderingMode : Enum {
    public int value__;
    public static RenderingMode Default;
    public static RenderingMode Aliased;
    public static RenderingMode GdiClassic;
    public static RenderingMode GdiNatural;
    public static RenderingMode Natural;
    public static RenderingMode NaturalSymmetric;
    public static RenderingMode Outline;
    public static RenderingMode CleartypeGdiClassic;
    public static RenderingMode CleartypeGdiNatural;
    public static RenderingMode CleartypeNatural;
    public static RenderingMode CleartypeNaturalSymmetric;
}
public enum SharpDX.DirectWrite.RenderingMode1 : Enum {
    public int value__;
    public static RenderingMode1 Default;
    public static RenderingMode1 Aliased;
    public static RenderingMode1 GdiClassic;
    public static RenderingMode1 GdiNatural;
    public static RenderingMode1 Natural;
    public static RenderingMode1 NaturalSymmetric;
    public static RenderingMode1 Outline;
    public static RenderingMode1 NaturalSymmetricDownsampled;
}
[GuidAttribute("2f0da53a-2add-47cd-82ee-d9ec34688e75")]
public class SharpDX.DirectWrite.RenderingParams : ComObject {
    public float Gamma { get; }
    public float EnhancedContrast { get; }
    public float ClearTypeLevel { get; }
    public PixelGeometry PixelGeometry { get; }
    public RenderingMode RenderingMode { get; }
    public RenderingParams(Factory factory);
    public RenderingParams(Factory factory, IntPtr monitorHandle);
    public RenderingParams(Factory factory, float gamma, float enhancedContrast, float clearTypeLevel, PixelGeometry pixelGeometry, RenderingMode renderingMode);
    public RenderingParams(IntPtr nativePtr);
    public static RenderingParams op_Explicit(IntPtr nativePtr);
    public float get_Gamma();
    public float get_EnhancedContrast();
    public float get_ClearTypeLevel();
    public PixelGeometry get_PixelGeometry();
    public RenderingMode get_RenderingMode();
    internal float GetGamma();
    internal float GetEnhancedContrast();
    internal float GetClearTypeLevel();
    internal PixelGeometry GetPixelGeometry();
    internal RenderingMode GetRenderingMode();
}
[GuidAttribute("94413cf4-a6fc-4248-8b50-6674348fcad3")]
public class SharpDX.DirectWrite.RenderingParams1 : RenderingParams {
    public float GrayscaleEnhancedContrast { get; }
    public RenderingParams1(IntPtr nativePtr);
    public static RenderingParams1 op_Explicit(IntPtr nativePtr);
    public float get_GrayscaleEnhancedContrast();
    internal float GetGrayscaleEnhancedContrast();
}
[GuidAttribute("F9D711C3-9777-40AE-87E8-3E5AF9BF0948")]
public class SharpDX.DirectWrite.RenderingParams2 : RenderingParams1 {
    public GridFitMode GridFitMode { get; }
    public RenderingParams2(IntPtr nativePtr);
    public static RenderingParams2 op_Explicit(IntPtr nativePtr);
    public GridFitMode get_GridFitMode();
    internal GridFitMode GetGridFitMode();
}
[GuidAttribute("B7924BAA-391B-412A-8C5C-E44CC2D867DC")]
public class SharpDX.DirectWrite.RenderingParams3 : RenderingParams2 {
    public RenderingMode1 RenderingMode1 { get; }
    public RenderingParams3(IntPtr nativePtr);
    public static RenderingParams3 op_Explicit(IntPtr nativePtr);
    public RenderingMode1 get_RenderingMode1();
    internal RenderingMode1 GetRenderingMode1();
}
public class SharpDX.DirectWrite.ScriptAnalysis : ValueType {
    public short Script;
    public ScriptShapes Shapes;
}
public enum SharpDX.DirectWrite.ScriptJustify : Enum {
    public int value__;
    public static ScriptJustify None;
    public static ScriptJustify ArabicBlank;
    public static ScriptJustify Character;
    public static ScriptJustify Blank;
    public static ScriptJustify ArabicNormal;
    public static ScriptJustify ArabicKashida;
    public static ScriptJustify ArabicAlef;
    public static ScriptJustify ArabicHa;
    public static ScriptJustify ArabicRa;
    public static ScriptJustify ArabicBa;
    public static ScriptJustify ArabicBaRa;
    public static ScriptJustify ArabicSeen;
    public static ScriptJustify ArabicSeenMedial;
}
public class SharpDX.DirectWrite.ScriptProperties : ValueType {
    public int IsoScriptCode;
    public int IsoScriptNumber;
    public int ClusterLookahead;
    public int JustificationCharacter;
    internal int _RestrictCaretToClusters;
    internal int _UsesWordDividers;
    internal int _IsDiscreteWriting;
    internal int _IsBlockWriting;
    internal int _IsDistributedWithinCluster;
    internal int _IsConnectedWriting;
    internal int _IsCursiveWriting;
    internal int _Reserved;
    public bool RestrictCaretToClusters { get; public set; }
    public bool UsesWordDividers { get; public set; }
    public bool IsDiscreteWriting { get; public set; }
    public bool IsBlockWriting { get; public set; }
    public bool IsDistributedWithinCluster { get; public set; }
    public bool IsConnectedWriting { get; public set; }
    public bool IsCursiveWriting { get; public set; }
    public int Reserved { get; public set; }
    public bool get_RestrictCaretToClusters();
    public void set_RestrictCaretToClusters(bool value);
    public bool get_UsesWordDividers();
    public void set_UsesWordDividers(bool value);
    public bool get_IsDiscreteWriting();
    public void set_IsDiscreteWriting(bool value);
    public bool get_IsBlockWriting();
    public void set_IsBlockWriting(bool value);
    public bool get_IsDistributedWithinCluster();
    public void set_IsDistributedWithinCluster(bool value);
    public bool get_IsConnectedWriting();
    public void set_IsConnectedWriting(bool value);
    public bool get_IsCursiveWriting();
    public void set_IsCursiveWriting(bool value);
    public int get_Reserved();
    public void set_Reserved(int value);
}
public enum SharpDX.DirectWrite.ScriptShapes : Enum {
    public int value__;
    public static ScriptShapes Default;
    public static ScriptShapes NoVisual;
}
public class SharpDX.DirectWrite.ShapingGlyphProperties : ValueType {
    internal short _Justification_;
    internal short _IsClusterStart;
    internal short _IsDiacritic;
    internal short _IsZeroWidthSpace;
    internal short _Reserved;
    public ScriptJustify Justification { get; public set; }
    internal short Justification_ { get; internal set; }
    public bool IsClusterStart { get; public set; }
    public bool IsDiacritic { get; public set; }
    public bool IsZeroWidthSpace { get; public set; }
    internal short Reserved { get; internal set; }
    public ScriptJustify get_Justification();
    public void set_Justification(ScriptJustify value);
    internal short get_Justification_();
    internal void set_Justification_(short value);
    public bool get_IsClusterStart();
    public void set_IsClusterStart(bool value);
    public bool get_IsDiacritic();
    public void set_IsDiacritic(bool value);
    public bool get_IsZeroWidthSpace();
    public void set_IsZeroWidthSpace(bool value);
    internal short get_Reserved();
    internal void set_Reserved(short value);
}
public class SharpDX.DirectWrite.ShapingTextProperties : ValueType {
    internal short _IsShapedAlone;
    internal short _Reserved;
    public bool IsShapedAlone { get; public set; }
    internal short Reserved { get; internal set; }
    public bool get_IsShapedAlone();
    public void set_IsShapedAlone(bool value);
    internal short get_Reserved();
    internal void set_Reserved(short value);
}
public class SharpDX.DirectWrite.Strikethrough : ValueType {
    public float Width;
    public float Thickness;
    public float Offset;
    public ReadingDirection ReadingDirection;
    public FlowDirection FlowDirection;
    public string LocaleName;
    public MeasuringMode MeasuringMode;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[GuidAttribute("CFEE3140-1157-47CA-8B85-31BFCF3F2D0E")]
public class SharpDX.DirectWrite.StringList : ComObject {
    public int Count { get; }
    public StringList(IntPtr nativePtr);
    public static StringList op_Explicit(IntPtr nativePtr);
    public int get_Count();
    internal int GetCount();
    public void GetLocaleNameLength(int listIndex, Int32& length);
    public void GetLocaleName(int listIndex, IntPtr localeName, int size);
    public void GetStringLength(int listIndex, Int32& length);
    public void GetString(int listIndex, IntPtr stringBuffer, int stringBufferSize);
}
public enum SharpDX.DirectWrite.TextAlignment : Enum {
    public int value__;
    public static TextAlignment Leading;
    public static TextAlignment Trailing;
    public static TextAlignment Center;
    public static TextAlignment Justified;
}
[GuidAttribute("5810cd44-0ca0-4701-b3fa-bec5182ae4f6")]
[ShadowAttribute("SharpDX.DirectWrite.TextAnalysisSinkShadow")]
public interface SharpDX.DirectWrite.TextAnalysisSink {
    public abstract virtual void SetScriptAnalysis(int textPosition, int textLength, ScriptAnalysis scriptAnalysis);
    public abstract virtual void SetLineBreakpoints(int textPosition, int textLength, LineBreakpoint[] lineBreakpoints);
    public abstract virtual void SetBidiLevel(int textPosition, int textLength, byte explicitLevel, byte resolvedLevel);
    public abstract virtual void SetNumberSubstitution(int textPosition, int textLength, NumberSubstitution numberSubstitution);
}
[GuidAttribute("B0D941A0-85E7-4D8B-9FD3-5CED9934482A")]
[ShadowAttribute("SharpDX.DirectWrite.TextAnalysisSink1Shadow")]
public interface SharpDX.DirectWrite.TextAnalysisSink1 {
    public abstract virtual void SetGlyphOrientation(int textPosition, int textLength, GlyphOrientationAngle glyphOrientationAngle, byte adjustedBidiLevel, RawBool isSideways, RawBool isRightToLeft);
}
internal class SharpDX.DirectWrite.TextAnalysisSink1Shadow : TextAnalysisSinkShadow {
    private static TextAnalysisSink1Vtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static TextAnalysisSink1Shadow();
    public static IntPtr ToIntPtr(TextAnalysisSink1 callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
internal class SharpDX.DirectWrite.TextAnalysisSinkShadow : ComObjectShadow {
    private static TextAnalysisSinkVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static TextAnalysisSinkShadow();
    public static IntPtr ToIntPtr(TextAnalysisSink callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
[GuidAttribute("688e1a58-5094-47c8-adc8-fbcea60ae92b")]
[ShadowAttribute("SharpDX.DirectWrite.TextAnalysisSourceShadow")]
public interface SharpDX.DirectWrite.TextAnalysisSource {
    public ReadingDirection ReadingDirection { get; }
    public abstract virtual string GetTextAtPosition(int textPosition);
    public abstract virtual string GetTextBeforePosition(int textPosition);
    public abstract virtual ReadingDirection get_ReadingDirection();
    public abstract virtual string GetLocaleName(int textPosition, Int32& textLength);
    public abstract virtual NumberSubstitution GetNumberSubstitution(int textPosition, Int32& textLength);
}
[ShadowAttribute("SharpDX.DirectWrite.TextAnalysisSource1Shadow")]
[GuidAttribute("639CFAD8-0FB4-4B21-A58A-067920120009")]
public interface SharpDX.DirectWrite.TextAnalysisSource1 {
    public abstract virtual void GetVerticalGlyphOrientation(int textPosition, Int32& textLength, VerticalGlyphOrientation& glyphOrientation, Byte& bidiLevel);
}
internal class SharpDX.DirectWrite.TextAnalysisSource1Shadow : TextAnalysisSourceShadow {
    private static TextAnalysisSource1Vtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static TextAnalysisSource1Shadow();
    protected virtual CppObjectVtbl get_GetVtbl();
    public static IntPtr ToIntPtr(TextAnalysisSource1 callback);
}
internal class SharpDX.DirectWrite.TextAnalysisSourceShadow : ComObjectShadow {
    private static TextAnalysisSourceVtbl Vtbl;
    private List`1<IntPtr> allocatedStrings;
    protected CppObjectVtbl GetVtbl { get; }
    private static TextAnalysisSourceShadow();
    protected virtual CppObjectVtbl get_GetVtbl();
    protected virtual void Dispose(bool disposing);
    public static IntPtr ToIntPtr(TextAnalysisSource callback);
}
[GuidAttribute("b7e6163e-7f46-43b4-84b3-e4e6249c365d")]
public class SharpDX.DirectWrite.TextAnalyzer : ComObject {
    public TextAnalyzer(Factory factory);
    public TextAnalyzer(IntPtr nativePtr);
    public void GetGlyphs(string textString, int textLength, FontFace fontFace, bool isSideways, bool isRightToLeft, ScriptAnalysis scriptAnalysis, string localeName, NumberSubstitution numberSubstitution, FontFeature[][] features, Int32[] featureRangeLengths, int maxGlyphCount, Int16[] clusterMap, ShapingTextProperties[] textProps, Int16[] glyphIndices, ShapingGlyphProperties[] glyphProps, Int32& actualGlyphCount);
    public void GetGlyphPlacements(string textString, Int16[] clusterMap, ShapingTextProperties[] textProps, int textLength, Int16[] glyphIndices, ShapingGlyphProperties[] glyphProps, int glyphCount, FontFace fontFace, float fontEmSize, bool isSideways, bool isRightToLeft, ScriptAnalysis scriptAnalysis, string localeName, FontFeature[][] features, Int32[] featureRangeLengths, Single[] glyphAdvances, GlyphOffset[] glyphOffsets);
    public void GetGdiCompatibleGlyphPlacements(string textString, Int16[] clusterMap, ShapingTextProperties[] textProps, int textLength, Int16[] glyphIndices, ShapingGlyphProperties[] glyphProps, int glyphCount, FontFace fontFace, float fontEmSize, float pixelsPerDip, Nullable`1<RawMatrix3x2> transform, bool useGdiNatural, bool isSideways, bool isRightToLeft, ScriptAnalysis scriptAnalysis, string localeName, FontFeature[][] features, Int32[] featureRangeLengths, Single[] glyphAdvances, GlyphOffset[] glyphOffsets);
    private static IntPtr AllocateFeatures(FontFeature[][] features);
    public static TextAnalyzer op_Explicit(IntPtr nativePtr);
    public void AnalyzeScript(TextAnalysisSource analysisSource, int textPosition, int textLength, TextAnalysisSink analysisSink);
    public void AnalyzeBidi(TextAnalysisSource analysisSource, int textPosition, int textLength, TextAnalysisSink analysisSink);
    public void AnalyzeNumberSubstitution(TextAnalysisSource analysisSource, int textPosition, int textLength, TextAnalysisSink analysisSink);
    public void AnalyzeLineBreakpoints(TextAnalysisSource analysisSource, int textPosition, int textLength, TextAnalysisSink analysisSink);
    internal void GetGlyphs(string textString, int textLength, FontFace fontFace, RawBool isSideways, RawBool isRightToLeft, ScriptAnalysis scriptAnalysis, string localeName, NumberSubstitution numberSubstitution, IntPtr features, Int32[] featureRangeLengths, int featureRanges, int maxGlyphCount, Int16[] clusterMap, ShapingTextProperties[] textProps, Int16[] glyphIndices, ShapingGlyphProperties[] glyphProps, Int32& actualGlyphCount);
    internal void GetGlyphPlacements(string textString, Int16[] clusterMap, ShapingTextProperties[] textProps, int textLength, Int16[] glyphIndices, ShapingGlyphProperties[] glyphProps, int glyphCount, FontFace fontFace, float fontEmSize, RawBool isSideways, RawBool isRightToLeft, ScriptAnalysis scriptAnalysis, string localeName, IntPtr features, Int32[] featureRangeLengths, int featureRanges, Single[] glyphAdvances, GlyphOffset[] glyphOffsets);
    internal void GetGdiCompatibleGlyphPlacements(string textString, Int16[] clusterMap, ShapingTextProperties[] textProps, int textLength, Int16[] glyphIndices, ShapingGlyphProperties[] glyphProps, int glyphCount, FontFace fontFace, float fontEmSize, float pixelsPerDip, Nullable`1<RawMatrix3x2> transform, RawBool useGdiNatural, RawBool isSideways, RawBool isRightToLeft, ScriptAnalysis scriptAnalysis, string localeName, IntPtr features, Int32[] featureRangeLengths, int featureRanges, Single[] glyphAdvances, GlyphOffset[] glyphOffsets);
}
[GuidAttribute("80DAD800-E21F-4E83-96CE-BFCCE500DB7C")]
public class SharpDX.DirectWrite.TextAnalyzer1 : TextAnalyzer {
    public TextAnalyzer1(IntPtr nativePtr);
    public static TextAnalyzer1 op_Explicit(IntPtr nativePtr);
    public void ApplyCharacterSpacing(float leadingSpacing, float trailingSpacing, float minimumAdvanceWidth, int textLength, int glyphCount, Int16[] clusterMap, Single[] glyphAdvances, GlyphOffset[] glyphOffsets, ShapingGlyphProperties[] glyphProperties, Single[] modifiedGlyphAdvances, GlyphOffset[] modifiedGlyphOffsets);
    public void GetBaseline(FontFace fontFace, Baseline baseline, RawBool isVertical, RawBool isSimulationAllowed, ScriptAnalysis scriptAnalysis, string localeName, Int32& baselineCoordinate, RawBool& exists);
    public void AnalyzeVerticalGlyphOrientation(TextAnalysisSource1 analysisSource, int textPosition, int textLength, TextAnalysisSink1 analysisSink);
    public void GetGlyphOrientationTransform(GlyphOrientationAngle glyphOrientationAngle, RawBool isSideways, RawMatrix3x2& transform);
    public void GetScriptProperties(ScriptAnalysis scriptAnalysis, ScriptProperties& scriptProperties);
    public void GetTextComplexity(string textString, int textLength, FontFace fontFace, RawBool& isTextSimple, int textLengthRead, Int16[] glyphIndices);
    public void GetJustificationOpportunities(FontFace fontFace, float fontEmSize, ScriptAnalysis scriptAnalysis, int textLength, int glyphCount, string textString, Int16[] clusterMap, ShapingGlyphProperties[] glyphProperties, JustificationOpportunity[] justificationOpportunities);
    public void JustifyGlyphAdvances(float lineWidth, int glyphCount, JustificationOpportunity[] justificationOpportunities, Single[] glyphAdvances, GlyphOffset[] glyphOffsets, Single[] justifiedGlyphAdvances, GlyphOffset[] justifiedGlyphOffsets);
    public void GetJustifiedGlyphs(FontFace fontFace, float fontEmSize, ScriptAnalysis scriptAnalysis, int textLength, int glyphCount, int maxGlyphCount, Int16[] clusterMap, Int16[] glyphIndices, Single[] glyphAdvances, Single[] justifiedGlyphAdvances, GlyphOffset[] justifiedGlyphOffsets, ShapingGlyphProperties[] glyphProperties, int actualGlyphCount, Int16[] modifiedClusterMap, Int16[] modifiedGlyphIndices, Single[] modifiedGlyphAdvances, GlyphOffset[] modifiedGlyphOffsets);
}
[GuidAttribute("553A9FF3-5693-4DF7-B52B-74806F7F2EB9")]
public class SharpDX.DirectWrite.TextAnalyzer2 : TextAnalyzer1 {
    public TextAnalyzer2(IntPtr nativePtr);
    public static TextAnalyzer2 op_Explicit(IntPtr nativePtr);
    public void GetGlyphOrientationTransform(GlyphOrientationAngle glyphOrientationAngle, RawBool isSideways, float originX, float originY, RawMatrix3x2& transform);
    public void GetTypographicFeatures(FontFace fontFace, ScriptAnalysis scriptAnalysis, string localeName, int maxTagCount, Int32& actualTagCount, FontFeatureTag[] tags);
    public void CheckTypographicFeature(FontFace fontFace, ScriptAnalysis scriptAnalysis, string localeName, FontFeatureTag featureTag, int glyphCount, Int16[] glyphIndices, Byte[] featureApplies);
}
public enum SharpDX.DirectWrite.TextAntialiasMode : Enum {
    public int value__;
    public static TextAntialiasMode Cleartype;
    public static TextAntialiasMode Grayscale;
}
[GuidAttribute("9c906818-31d7-4fd3-a151-7c5e225db55a")]
public class SharpDX.DirectWrite.TextFormat : ComObject {
    public string FontFamilyName { get; }
    public string LocaleName { get; }
    public TextAlignment TextAlignment { get; public set; }
    public ParagraphAlignment ParagraphAlignment { get; public set; }
    public WordWrapping WordWrapping { get; public set; }
    public ReadingDirection ReadingDirection { get; public set; }
    public FlowDirection FlowDirection { get; public set; }
    public float IncrementalTabStop { get; public set; }
    public FontCollection FontCollection { get; }
    public FontWeight FontWeight { get; }
    public FontStyle FontStyle { get; }
    public FontStretch FontStretch { get; }
    public float FontSize { get; }
    public TextFormat(Factory factory, string fontFamilyName, float fontSize);
    public TextFormat(Factory factory, string fontFamilyName, FontWeight fontWeight, FontStyle fontStyle, float fontSize);
    public TextFormat(Factory factory, string fontFamilyName, FontWeight fontWeight, FontStyle fontStyle, FontStretch fontStretch, float fontSize);
    public TextFormat(Factory factory, string fontFamilyName, FontCollection fontCollection, FontWeight fontWeight, FontStyle fontStyle, FontStretch fontStretch, float fontSize);
    public TextFormat(Factory factory, string fontFamilyName, FontCollection fontCollection, FontWeight fontWeight, FontStyle fontStyle, FontStretch fontStretch, float fontSize, string localeName);
    public TextFormat(IntPtr nativePtr);
    public string get_FontFamilyName();
    public string get_LocaleName();
    public static TextFormat op_Explicit(IntPtr nativePtr);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    public ParagraphAlignment get_ParagraphAlignment();
    public void set_ParagraphAlignment(ParagraphAlignment value);
    public WordWrapping get_WordWrapping();
    public void set_WordWrapping(WordWrapping value);
    public ReadingDirection get_ReadingDirection();
    public void set_ReadingDirection(ReadingDirection value);
    public FlowDirection get_FlowDirection();
    public void set_FlowDirection(FlowDirection value);
    public float get_IncrementalTabStop();
    public void set_IncrementalTabStop(float value);
    public FontCollection get_FontCollection();
    public FontWeight get_FontWeight();
    public FontStyle get_FontStyle();
    public FontStretch get_FontStretch();
    public float get_FontSize();
    internal void SetTextAlignment(TextAlignment textAlignment);
    internal void SetParagraphAlignment(ParagraphAlignment paragraphAlignment);
    internal void SetWordWrapping(WordWrapping wordWrapping);
    internal void SetReadingDirection(ReadingDirection readingDirection);
    internal void SetFlowDirection(FlowDirection flowDirection);
    internal void SetIncrementalTabStop(float incrementalTabStop);
    public void SetTrimming(Trimming trimmingOptions, InlineObject trimmingSign);
    public void SetLineSpacing(LineSpacingMethod lineSpacingMethod, float lineSpacing, float baseline);
    internal TextAlignment GetTextAlignment();
    internal ParagraphAlignment GetParagraphAlignment();
    internal WordWrapping GetWordWrapping();
    internal ReadingDirection GetReadingDirection();
    internal FlowDirection GetFlowDirection();
    internal float GetIncrementalTabStop();
    public void GetTrimming(Trimming& trimmingOptions, InlineObject& trimmingSign);
    public void GetLineSpacing(LineSpacingMethod& lineSpacingMethod, Single& lineSpacing, Single& baseline);
    internal void GetFontCollection(FontCollection& fontCollection);
    internal int GetFontFamilyNameLength();
    internal void GetFontFamilyName(IntPtr fontFamilyName, int nameSize);
    internal FontWeight GetFontWeight();
    internal FontStyle GetFontStyle();
    internal FontStretch GetFontStretch();
    internal float GetFontSize();
    internal int GetLocaleNameLength();
    internal void GetLocaleName(IntPtr localeName, int nameSize);
}
[GuidAttribute("5F174B49-0D8B-4CFB-8BCA-F1CCE9D06C67")]
public class SharpDX.DirectWrite.TextFormat1 : TextFormat {
    public VerticalGlyphOrientation VerticalGlyphOrientation { get; public set; }
    public RawBool LastLineWrapping { get; public set; }
    public OptimizationIcalAlignment OpticalAlignment { get; public set; }
    public FontFallback FontFallback { get; public set; }
    public TextFormat1(IntPtr nativePtr);
    public static TextFormat1 op_Explicit(IntPtr nativePtr);
    public VerticalGlyphOrientation get_VerticalGlyphOrientation();
    public void set_VerticalGlyphOrientation(VerticalGlyphOrientation value);
    public RawBool get_LastLineWrapping();
    public void set_LastLineWrapping(RawBool value);
    public OptimizationIcalAlignment get_OpticalAlignment();
    public void set_OpticalAlignment(OptimizationIcalAlignment value);
    public FontFallback get_FontFallback();
    public void set_FontFallback(FontFallback value);
    internal void SetVerticalGlyphOrientation(VerticalGlyphOrientation glyphOrientation);
    internal VerticalGlyphOrientation GetVerticalGlyphOrientation();
    internal void SetLastLineWrapping(RawBool isLastLineWrappingEnabled);
    internal RawBool GetLastLineWrapping();
    internal void SetOpticalAlignment(OptimizationIcalAlignment opticalAlignment);
    internal OptimizationIcalAlignment GetOpticalAlignment();
    internal void SetFontFallback(FontFallback fontFallback);
    internal void GetFontFallback(FontFallback& fontFallback);
}
[GuidAttribute("F67E0EDD-9E3D-4ECC-8C32-4183253DFE70")]
public class SharpDX.DirectWrite.TextFormat2 : TextFormat1 {
    public LineSpacing LineSpacing { get; public set; }
    public TextFormat2(IntPtr nativePtr);
    public static TextFormat2 op_Explicit(IntPtr nativePtr);
    public LineSpacing get_LineSpacing();
    public void set_LineSpacing(LineSpacing value);
    internal void SetLineSpacing(LineSpacing& lineSpacingOptions);
    internal void GetLineSpacing(LineSpacing& lineSpacingOptions);
}
[GuidAttribute("53737037-6d14-410b-9bfe-0b182bb70961")]
public class SharpDX.DirectWrite.TextLayout : TextFormat {
    public float MaxWidth { get; public set; }
    public float MaxHeight { get; public set; }
    public TextMetrics Metrics { get; }
    public OverhangMetrics OverhangMetrics { get; }
    public TextLayout(Factory factory, string text, TextFormat textFormat, float maxWidth, float maxHeight);
    public TextLayout(Factory factory, string text, TextFormat textFormat, float layoutWidth, float layoutHeight, float pixelsPerDip, bool useGdiNatural);
    public TextLayout(Factory factory, string text, TextFormat textFormat, float layoutWidth, float layoutHeight, float pixelsPerDip, Nullable`1<RawMatrix3x2> transform, bool useGdiNatural);
    public TextLayout(IntPtr nativePtr);
    public void Draw(TextRenderer renderer, float originX, float originY);
    public void Draw(object clientDrawingContext, TextRenderer renderer, float originX, float originY);
    public ClusterMetrics[] GetClusterMetrics();
    public void SetDrawingEffect(ComObject drawingEffect, TextRange textRange);
    public ComObject GetDrawingEffect(int currentPosition);
    public ComObject GetDrawingEffect(int currentPosition, TextRange& textRange);
    public FontCollection GetFontCollection(int currentPosition);
    public string GetFontFamilyName(int currentPosition);
    public string GetFontFamilyName(int currentPosition, TextRange& textRange);
    public float GetFontSize(int currentPosition);
    public FontStretch GetFontStretch(int currentPosition);
    public FontStyle GetFontStyle(int currentPosition);
    public FontWeight GetFontWeight(int currentPosition);
    public InlineObject GetInlineObject(int currentPosition);
    public LineMetrics[] GetLineMetrics();
    public string GetLocaleName(int currentPosition);
    public string GetLocaleName(int currentPosition, TextRange& textRange);
    public bool HasStrikethrough(int currentPosition);
    public Typography GetTypography(int currentPosition);
    public bool HasUnderline(int currentPosition);
    public HitTestMetrics[] HitTestTextRange(int textPosition, int textLength, float originX, float originY);
    public static TextLayout op_Explicit(IntPtr nativePtr);
    public float get_MaxWidth();
    public void set_MaxWidth(float value);
    public float get_MaxHeight();
    public void set_MaxHeight(float value);
    public TextMetrics get_Metrics();
    public OverhangMetrics get_OverhangMetrics();
    internal void SetMaxWidth(float maxWidth);
    internal void SetMaxHeight(float maxHeight);
    public void SetFontCollection(FontCollection fontCollection, TextRange textRange);
    public void SetFontFamilyName(string fontFamilyName, TextRange textRange);
    public void SetFontWeight(FontWeight fontWeight, TextRange textRange);
    public void SetFontStyle(FontStyle fontStyle, TextRange textRange);
    public void SetFontStretch(FontStretch fontStretch, TextRange textRange);
    public void SetFontSize(float fontSize, TextRange textRange);
    public void SetUnderline(RawBool hasUnderline, TextRange textRange);
    public void SetStrikethrough(RawBool hasStrikethrough, TextRange textRange);
    public void SetDrawingEffect(IntPtr drawingEffect, TextRange textRange);
    public void SetInlineObject(InlineObject inlineObject, TextRange textRange);
    public void SetTypography(Typography typography, TextRange textRange);
    public void SetLocaleName(string localeName, TextRange textRange);
    internal float GetMaxWidth();
    internal float GetMaxHeight();
    public FontCollection GetFontCollection(int currentPosition, TextRange& textRange);
    internal void GetFontFamilyNameLength(int currentPosition, Int32& nameLength, TextRange& textRange);
    internal void GetFontFamilyName(int currentPosition, IntPtr fontFamilyName, int nameSize, TextRange& textRange);
    public FontWeight GetFontWeight(int currentPosition, TextRange& textRange);
    public FontStyle GetFontStyle(int currentPosition, TextRange& textRange);
    public FontStretch GetFontStretch(int currentPosition, TextRange& textRange);
    public float GetFontSize(int currentPosition, TextRange& textRange);
    public RawBool HasUnderline(int currentPosition, TextRange& textRange);
    public RawBool HasStrikethrough(int currentPosition, TextRange& textRange);
    internal IntPtr GetDrawingEffect_(int currentPosition, TextRange& textRange);
    public InlineObject GetInlineObject(int currentPosition, TextRange& textRange);
    public Typography GetTypography(int currentPosition, TextRange& textRange);
    internal void GetLocaleNameLength(int currentPosition, Int32& nameLength, TextRange& textRange);
    internal void GetLocaleName(int currentPosition, IntPtr localeName, int nameSize, TextRange& textRange);
    public void Draw(IntPtr clientDrawingContext, TextRenderer renderer, float originX, float originY);
    internal Result GetLineMetrics(LineMetrics[] lineMetrics, int maxLineCount, Int32& actualLineCount);
    internal void GetMetrics(TextMetrics& textMetrics);
    internal void GetOverhangMetrics(OverhangMetrics& overhangs);
    internal Result GetClusterMetrics(ClusterMetrics[] clusterMetrics, int maxClusterCount, Int32& actualClusterCount);
    public float DetermineMinWidth();
    public HitTestMetrics HitTestPoint(float pointX, float pointY, RawBool& isTrailingHit, RawBool& isInside);
    public HitTestMetrics HitTestTextPosition(int textPosition, RawBool isTrailingHit, Single& ointXRef, Single& ointYRef);
    internal Result HitTestTextRange(int textPosition, int textLength, float originX, float originY, HitTestMetrics[] hitTestMetrics, int maxHitTestMetricsCount, Int32& actualHitTestMetricsCount);
}
[GuidAttribute("9064D822-80A7-465C-A986-DF65F78B8FEB")]
public class SharpDX.DirectWrite.TextLayout1 : TextLayout {
    public TextLayout1(IntPtr nativePtr);
    public static TextLayout1 op_Explicit(IntPtr nativePtr);
    public void SetPairKerning(RawBool isPairKerningEnabled, TextRange textRange);
    public void GetPairKerning(int currentPosition, RawBool& isPairKerningEnabled, TextRange& textRange);
    public void SetCharacterSpacing(float leadingSpacing, float trailingSpacing, float minimumAdvanceWidth, TextRange textRange);
    public void GetCharacterSpacing(int currentPosition, Single& leadingSpacing, Single& trailingSpacing, Single& minimumAdvanceWidth, TextRange& textRange);
}
[GuidAttribute("1093C18F-8D5E-43F0-B064-0917311B525E")]
public class SharpDX.DirectWrite.TextLayout2 : TextLayout1 {
    public TextMetrics1 Metrics { get; }
    public VerticalGlyphOrientation VerticalGlyphOrientation { get; public set; }
    public RawBool LastLineWrapping { get; public set; }
    public OptimizationIcalAlignment OpticalAlignment { get; public set; }
    public FontFallback FontFallback { get; public set; }
    public TextLayout2(IntPtr nativePtr);
    public static TextLayout2 op_Explicit(IntPtr nativePtr);
    public TextMetrics1 get_Metrics();
    public VerticalGlyphOrientation get_VerticalGlyphOrientation();
    public void set_VerticalGlyphOrientation(VerticalGlyphOrientation value);
    public RawBool get_LastLineWrapping();
    public void set_LastLineWrapping(RawBool value);
    public OptimizationIcalAlignment get_OpticalAlignment();
    public void set_OpticalAlignment(OptimizationIcalAlignment value);
    public FontFallback get_FontFallback();
    public void set_FontFallback(FontFallback value);
    internal void GetMetrics(TextMetrics1& textMetrics);
    internal void SetVerticalGlyphOrientation(VerticalGlyphOrientation glyphOrientation);
    internal VerticalGlyphOrientation GetVerticalGlyphOrientation();
    internal void SetLastLineWrapping(RawBool isLastLineWrappingEnabled);
    internal RawBool GetLastLineWrapping();
    internal void SetOpticalAlignment(OptimizationIcalAlignment opticalAlignment);
    internal OptimizationIcalAlignment GetOpticalAlignment();
    internal void SetFontFallback(FontFallback fontFallback);
    internal void GetFontFallback(FontFallback& fontFallback);
}
[GuidAttribute("07DDCD52-020E-4DE8-AC33-6C953D83F92D")]
public class SharpDX.DirectWrite.TextLayout3 : TextLayout2 {
    public LineSpacing LineSpacing { get; public set; }
    public TextLayout3(IntPtr nativePtr);
    public static TextLayout3 op_Explicit(IntPtr nativePtr);
    public LineSpacing get_LineSpacing();
    public void set_LineSpacing(LineSpacing value);
    public void InvalidateLayout();
    internal void SetLineSpacing(LineSpacing& lineSpacingOptions);
    internal void GetLineSpacing(LineSpacing& lineSpacingOptions);
    public void GetLineMetrics(LineMetrics1[] lineMetrics, int maxLineCount, Int32& actualLineCount);
}
public class SharpDX.DirectWrite.TextMetrics : ValueType {
    public float Left;
    public float Top;
    public float Width;
    public float WidthIncludingTrailingWhitespace;
    public float Height;
    public float LayoutWidth;
    public float LayoutHeight;
    public int MaxBidiReorderingDepth;
    public int LineCount;
}
public class SharpDX.DirectWrite.TextMetrics1 : ValueType {
    public float Left;
    public float Top;
    public float Width;
    public float WidthIncludingTrailingWhitespace;
    public float Height;
    public float LayoutWidth;
    public float LayoutHeight;
    public int MaxBidiReorderingDepth;
    public int LineCount;
    public float HeightIncludingTrailingWhitespace;
}
public class SharpDX.DirectWrite.TextRange : ValueType {
    public int StartPosition;
    public int Length;
    public TextRange(int startPosition, int length);
}
[ShadowAttribute("SharpDX.DirectWrite.TextRendererShadow")]
[GuidAttribute("ef8a8135-5cc6-45fe-8825-c5a0724eb819")]
public interface SharpDX.DirectWrite.TextRenderer {
    public abstract virtual Result DrawGlyphRun(object clientDrawingContext, float baselineOriginX, float baselineOriginY, MeasuringMode measuringMode, GlyphRun glyphRun, GlyphRunDescription glyphRunDescription, ComObject clientDrawingEffect);
    public abstract virtual Result DrawUnderline(object clientDrawingContext, float baselineOriginX, float baselineOriginY, Underline& underline, ComObject clientDrawingEffect);
    public abstract virtual Result DrawStrikethrough(object clientDrawingContext, float baselineOriginX, float baselineOriginY, Strikethrough& strikethrough, ComObject clientDrawingEffect);
    public abstract virtual Result DrawInlineObject(object clientDrawingContext, float originX, float originY, InlineObject inlineObject, bool isSideways, bool isRightToLeft, ComObject clientDrawingEffect);
}
[GuidAttribute("D3E0E934-22A0-427E-AAE4-7D9574B59DB1")]
public interface SharpDX.DirectWrite.TextRenderer1 {
}
public abstract class SharpDX.DirectWrite.TextRendererBase : CallbackBase {
    public virtual bool IsPixelSnappingDisabled(object clientDrawingContext);
    public virtual RawMatrix3x2 GetCurrentTransform(object clientDrawingContext);
    public virtual float GetPixelsPerDip(object clientDrawingContext);
    public virtual Result DrawGlyphRun(object clientDrawingContext, float baselineOriginX, float baselineOriginY, MeasuringMode measuringMode, GlyphRun glyphRun, GlyphRunDescription glyphRunDescription, ComObject clientDrawingEffect);
    public virtual Result DrawUnderline(object clientDrawingContext, float baselineOriginX, float baselineOriginY, Underline& underline, ComObject clientDrawingEffect);
    public virtual Result DrawStrikethrough(object clientDrawingContext, float baselineOriginX, float baselineOriginY, Strikethrough& strikethrough, ComObject clientDrawingEffect);
    public virtual Result DrawInlineObject(object clientDrawingContext, float originX, float originY, InlineObject inlineObject, bool isSideways, bool isRightToLeft, ComObject clientDrawingEffect);
}
internal class SharpDX.DirectWrite.TextRendererShadow : PixelSnappingShadow {
    private static TextRendererVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static TextRendererShadow();
    public static IntPtr ToIntPtr(TextRenderer callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
public enum SharpDX.DirectWrite.TextureType : Enum {
    public int value__;
    public static TextureType Aliased1x1;
    public static TextureType Cleartype3x1;
}
public class SharpDX.DirectWrite.Trimming : ValueType {
    public TrimmingGranularity Granularity;
    public int Delimiter;
    public int DelimiterCount;
}
public enum SharpDX.DirectWrite.TrimmingGranularity : Enum {
    public int value__;
    public static TrimmingGranularity None;
    public static TrimmingGranularity Character;
    public static TrimmingGranularity Word;
}
internal class SharpDX.DirectWrite.TypographicFeatures : ValueType {
    public IntPtr Features;
    public int FeatureCount;
}
[GuidAttribute("55f1112b-1dc2-4b3c-9541-f46894ed85b6")]
public class SharpDX.DirectWrite.Typography : ComObject {
    public int FontFeatureCount { get; }
    public Typography(Factory factory);
    public Typography(IntPtr nativePtr);
    public static Typography op_Explicit(IntPtr nativePtr);
    public int get_FontFeatureCount();
    public void AddFontFeature(FontFeature fontFeature);
    internal int GetFontFeatureCount();
    public FontFeature GetFontFeature(int fontFeatureIndex);
}
public class SharpDX.DirectWrite.Underline : ValueType {
    public float Width;
    public float Thickness;
    public float Offset;
    public float RunHeight;
    public ReadingDirection ReadingDirection;
    public FlowDirection FlowDirection;
    public string LocaleName;
    public MeasuringMode MeasuringMode;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.DirectWrite.UnicodeRange : ValueType {
    public int First;
    public int Last;
}
public enum SharpDX.DirectWrite.VerticalGlyphOrientation : Enum {
    public int value__;
    public static VerticalGlyphOrientation Default;
    public static VerticalGlyphOrientation Stacked;
}
public enum SharpDX.DirectWrite.WordWrapping : Enum {
    public int value__;
    public static WordWrapping Wrap;
    public static WordWrapping NoWrap;
    public static WordWrapping EmergencyBreak;
    public static WordWrapping WholeWord;
    public static WordWrapping Character;
}
public enum SharpDX.WIC.BIMIptcDigestProperties : Enum {
    public int value__;
    public static BIMIptcDigestProperties PString;
    public static BIMIptcDigestProperties IptcDigest;
}
public enum SharpDX.WIC.BIMIptcProperties : Enum {
    public int value__;
    public static BIMIptcProperties PString;
    public static BIMIptcProperties EmbeddedIPTC;
}
public enum SharpDX.WIC.BIMResolutionInfoProperties : Enum {
    public int value__;
    public static BIMResolutionInfoProperties PString;
    public static BIMResolutionInfoProperties HResolution;
    public static BIMResolutionInfoProperties HResolutionUnit;
    public static BIMResolutionInfoProperties WidthUnit;
    public static BIMResolutionInfoProperties VResolution;
    public static BIMResolutionInfoProperties VResolutionUnit;
    public static BIMResolutionInfoProperties HeightUnit;
}
[GuidAttribute("00000121-a8f2-4877-ba0a-fd2b6645fb94")]
public class SharpDX.WIC.Bitmap : BitmapSource {
    unknown Palette Palette {public set; }
    public Bitmap(ImagingFactory factory, int width, int height, Guid pixelFormat, BitmapCreateCacheOption option);
    public Bitmap(ImagingFactory factory, int width, int height, Guid pixelFormat, DataRectangle dataRectangle, int totalSizeInBytes);
    public Bitmap(ImagingFactory factory, BitmapSource bitmapSource, BitmapCreateCacheOption option);
    public Bitmap(ImagingFactory factory, BitmapSource bitmapSource, RawBox rectangle);
    public Bitmap(IntPtr nativePtr);
    public static Bitmap New(ImagingFactory factory, int width, int height, Guid pixelFormat, T[] pixelDatas, int stride);
    public BitmapLock Lock(BitmapLockFlags flags);
    public BitmapLock Lock(RawBox rcLockRef, BitmapLockFlags flags);
    public static Bitmap op_Explicit(IntPtr nativePtr);
    public void set_Palette(Palette value);
    internal BitmapLock Lock(IntPtr rcLockRef, BitmapLockFlags flags);
    internal void SetPalette(Palette paletteRef);
    public void SetResolution(double dpiX, double dpiY);
}
public enum SharpDX.WIC.BitmapAlphaChannelOption : Enum {
    public int value__;
    public static BitmapAlphaChannelOption UseAlpha;
    public static BitmapAlphaChannelOption UsePremultipliedAlpha;
    public static BitmapAlphaChannelOption IgnoreAlpha;
}
[GuidAttribute("E4FBCF03-223D-4e81-9333-D635556DD1B5")]
public class SharpDX.WIC.BitmapClipper : BitmapSource {
    public BitmapClipper(ImagingFactory factory);
    public BitmapClipper(IntPtr nativePtr);
    public void Initialize(BitmapSource sourceRef, RawBox rectangleRef);
    public static BitmapClipper op_Explicit(IntPtr nativePtr);
    internal void Initialize(BitmapSource sourceRef, IntPtr rectangleRef);
}
[GuidAttribute("E87A44C4-B76E-4c47-8B09-298EB12A2714")]
public class SharpDX.WIC.BitmapCodecInfo : ComponentInfo {
    public Guid[] PixelFormats { get; }
    public string ColorManagementVersion { get; }
    public string DeviceManufacturer { get; }
    public string DeviceModels { get; }
    public string MimeTypes { get; }
    public string FileExtensions { get; }
    public Guid ContainerFormat { get; }
    public RawBool IsAnimationSupported { get; }
    public RawBool IsChromakeySupported { get; }
    public RawBool IsLosslessSupported { get; }
    public RawBool IsMultiframeSupported { get; }
    public BitmapCodecInfo(IntPtr nativePtr);
    public Guid[] get_PixelFormats();
    public string get_ColorManagementVersion();
    public string get_DeviceManufacturer();
    public string get_DeviceModels();
    public string get_MimeTypes();
    public string get_FileExtensions();
    public static BitmapCodecInfo op_Explicit(IntPtr nativePtr);
    public Guid get_ContainerFormat();
    public RawBool get_IsAnimationSupported();
    public RawBool get_IsChromakeySupported();
    public RawBool get_IsLosslessSupported();
    public RawBool get_IsMultiframeSupported();
    internal void GetContainerFormat(Guid& guidContainerFormatRef);
    internal void GetPixelFormats(int formats, Guid[] guidPixelFormatsRef, Int32& actualRef);
    internal void GetColorManagementVersion(int cchColorManagementVersion, IntPtr colorManagementVersion, Int32& cchActualRef);
    internal void GetDeviceManufacturer(int cchDeviceManufacturer, IntPtr deviceManufacturer, Int32& cchActualRef);
    internal void GetDeviceModels(int cchDeviceModels, IntPtr deviceModels, Int32& cchActualRef);
    internal void GetMimeTypes(int cchMimeTypes, IntPtr mimeTypes, Int32& cchActualRef);
    internal void GetFileExtensions(int cchFileExtensions, IntPtr fileExtensions, Int32& cchActualRef);
    internal void IsAnimationSupported_(RawBool& fSupportAnimationRef);
    internal void IsChromakeySupported_(RawBool& fSupportChromakeyRef);
    internal void IsLosslessSupported_(RawBool& fSupportLosslessRef);
    internal void IsMultiframeSupported_(RawBool& fSupportMultiframeRef);
    public RawBool MatchesMimeType(string mimeType);
}
[GuidAttribute("64C1024E-C3CF-4462-8078-88C2B11C46D9")]
internal class SharpDX.WIC.BitmapCodecProgressNotification : ComObject {
    public BitmapCodecProgressNotification(IntPtr nativePtr);
    public static BitmapCodecProgressNotification op_Explicit(IntPtr nativePtr);
    internal void RegisterProgressNotification(FunctionCallback fnProgressNotificationRef, IntPtr vDataRef, int progressFlags);
}
public enum SharpDX.WIC.BitmapCreateCacheOption : Enum {
    public int value__;
    public static BitmapCreateCacheOption NoCache;
    public static BitmapCreateCacheOption CacheOnDemand;
    public static BitmapCreateCacheOption CacheOnLoad;
}
[GuidAttribute("9EDDE9E7-8DEE-47ea-99DF-E6FAF2ED44BF")]
public class SharpDX.WIC.BitmapDecoder : ComObject {
    private WICStream internalWICStream;
    [ObsoleteAttribute("Use TryGetColorContexts instead")]
public ColorContext[] ColorContexts { get; }
    public Guid ContainerFormat { get; }
    public BitmapDecoderInfo DecoderInfo { get; }
    public MetadataQueryReader MetadataQueryReader { get; }
    public BitmapSource Preview { get; }
    public BitmapSource Thumbnail { get; }
    public int FrameCount { get; }
    public BitmapDecoder(BitmapDecoderInfo bitmapDecoderInfo);
    public BitmapDecoder(ImagingFactory factory, Guid containerFormatGuid);
    public BitmapDecoder(ImagingFactory factory, Guid containerFormatGuid, Guid guidVendorRef);
    public BitmapDecoder(ImagingFactory factory, IStream streamRef, DecodeOptions metadataOptions);
    public BitmapDecoder(ImagingFactory factory, Stream streamRef, DecodeOptions metadataOptions);
    public BitmapDecoder(ImagingFactory factory, IStream streamRef, Guid guidVendorRef, DecodeOptions metadataOptions);
    public BitmapDecoder(ImagingFactory factory, Stream streamRef, Guid guidVendorRef, DecodeOptions metadataOptions);
    public BitmapDecoder(ImagingFactory factory, string filename, DecodeOptions metadataOptions);
    public BitmapDecoder(ImagingFactory factory, string filename, NativeFileAccess desiredAccess, DecodeOptions metadataOptions);
    public BitmapDecoder(ImagingFactory factory, string filename, Nullable`1<Guid> guidVendorRef, NativeFileAccess desiredAccess, DecodeOptions metadataOptions);
    public BitmapDecoder(ImagingFactory factory, NativeFileStream fileStream, DecodeOptions metadataOptions);
    public BitmapDecoder(ImagingFactory factory, NativeFileStream fileStream, Guid guidVendorRef, DecodeOptions metadataOptions);
    public BitmapDecoder(IntPtr nativePtr);
    public void Initialize(IStream stream, DecodeOptions cacheOptions);
    protected virtual void Dispose(bool disposing);
    public Result TryGetColorContexts(ImagingFactory imagingFactory, ColorContext[]& colorContexts);
    public ColorContext[] TryGetColorContexts(ImagingFactory imagingFactory);
    public ColorContext[] get_ColorContexts();
    public static BitmapDecoder op_Explicit(IntPtr nativePtr);
    public Guid get_ContainerFormat();
    public BitmapDecoderInfo get_DecoderInfo();
    public MetadataQueryReader get_MetadataQueryReader();
    public BitmapSource get_Preview();
    public BitmapSource get_Thumbnail();
    public int get_FrameCount();
    public BitmapDecoderCapabilities QueryCapability(IStream streamRef);
    internal void Initialize_(IStream streamRef, DecodeOptions cacheOptions);
    internal void GetContainerFormat(Guid& guidContainerFormatRef);
    internal void GetDecoderInfo(BitmapDecoderInfo& decoderInfoOut);
    public void CopyPalette(Palette paletteRef);
    internal void GetMetadataQueryReader(MetadataQueryReader& metadataQueryReaderOut);
    internal void GetPreview(BitmapSource& bitmapSourceOut);
    internal Result GetColorContexts(int count, ColorContext[] colorContextsOut, Int32& actualCountRef);
    internal void GetThumbnail(BitmapSource& thumbnailOut);
    internal void GetFrameCount(Int32& countRef);
    public BitmapFrameDecode GetFrame(int index);
    internal Result GetColorContexts(int count, ComArray`1<ColorContext> colorContextsOut, Int32& actualCountRef);
    private Result GetColorContexts(int count, IntPtr colorContextsOut, IntPtr actualCountRef);
}
[FlagsAttribute]
public enum SharpDX.WIC.BitmapDecoderCapabilities : Enum {
    public int value__;
    public static BitmapDecoderCapabilities SameEncoder;
    public static BitmapDecoderCapabilities CanDecodeAllImages;
    public static BitmapDecoderCapabilities CanDecodeSomeImages;
    public static BitmapDecoderCapabilities CanEnumerateMetadata;
    public static BitmapDecoderCapabilities CanDecodeThumbnail;
    public static BitmapDecoderCapabilities None;
}
public class SharpDX.WIC.BitmapDecoderGuids : object {
    public static Guid Png;
    public static Guid Bmp;
    public static Guid Ico;
    public static Guid Jpeg;
    public static Guid Gif;
    public static Guid Tiff;
    public static Guid Wmp;
    public static Guid Dds;
    public static Guid Adng;
    private static BitmapDecoderGuids();
}
[GuidAttribute("D8CD007F-D08F-4191-9BFC-236EA7F0E4B5")]
public class SharpDX.WIC.BitmapDecoderInfo : BitmapCodecInfo {
    public BitmapPattern[] Patterns { get; }
    public BitmapDecoderInfo(IntPtr nativePtr);
    public BitmapPattern[] get_Patterns();
    public static BitmapDecoderInfo op_Explicit(IntPtr nativePtr);
    internal void GetPatterns(int sizePatterns, BitmapPattern[] patternsRef, Int32& atternCountRef, Int32& patternsActualRef);
    public RawBool MatchesPattern(IStream streamRef);
    internal void CreateInstance(BitmapDecoder bitmapDecoderOut);
}
public enum SharpDX.WIC.BitmapDitherType : Enum {
    public int value__;
    public static BitmapDitherType None;
    public static BitmapDitherType Solid;
    public static BitmapDitherType Ordered4x4;
    public static BitmapDitherType Ordered8x8;
    public static BitmapDitherType Ordered16x16;
    public static BitmapDitherType Spiral4x4;
    public static BitmapDitherType Spiral8x8;
    public static BitmapDitherType DualSpiral4x4;
    public static BitmapDitherType DualSpiral8x8;
    public static BitmapDitherType ErrorDiffusion;
}
[GuidAttribute("00000103-a8f2-4877-ba0a-fd2b6645fb94")]
public class SharpDX.WIC.BitmapEncoder : ComObject {
    private ImagingFactory factory;
    private WICStream internalWICStream;
    public Guid ContainerFormat { get; }
    public BitmapEncoderInfo EncoderInfo { get; }
    unknown Palette Palette {public set; }
    unknown BitmapSource Thumbnail {public set; }
    unknown BitmapSource Preview {public set; }
    public MetadataQueryWriter MetadataQueryWriter { get; }
    public BitmapEncoder(ImagingFactory factory, Guid containerFormatGuid);
    public BitmapEncoder(ImagingFactory factory, Guid containerFormatGuid, Guid guidVendorRef);
    public BitmapEncoder(ImagingFactory factory, Guid containerFormatGuid, WICStream stream);
    public BitmapEncoder(ImagingFactory factory, Guid containerFormatGuid, Stream stream);
    public BitmapEncoder(ImagingFactory factory, Guid containerFormatGuid, Guid guidVendorRef, WICStream stream);
    public BitmapEncoder(ImagingFactory factory, Guid containerFormatGuid, Guid guidVendorRef, Stream stream);
    public BitmapEncoder(IntPtr nativePtr);
    public void Initialize(IStream stream);
    public void Initialize(Stream stream);
    public void SetColorContexts(ColorContext[] colorContextOut);
    protected virtual void Dispose(bool disposing);
    public static BitmapEncoder op_Explicit(IntPtr nativePtr);
    public Guid get_ContainerFormat();
    public BitmapEncoderInfo get_EncoderInfo();
    public void set_Palette(Palette value);
    public void set_Thumbnail(BitmapSource value);
    public void set_Preview(BitmapSource value);
    public MetadataQueryWriter get_MetadataQueryWriter();
    internal void Initialize(IStream streamRef, BitmapEncoderCacheOption cacheOption);
    internal void GetContainerFormat(Guid& guidContainerFormatRef);
    internal void GetEncoderInfo(BitmapEncoderInfo& encoderInfoOut);
    internal void SetColorContexts(int count, ColorContext[] colorContextOut);
    internal void SetPalette(Palette paletteRef);
    internal void SetThumbnail(BitmapSource thumbnailRef);
    internal void SetPreview(BitmapSource previewRef);
    internal void CreateNewFrame(BitmapFrameEncode frameEncodeOut, PropertyBag encoderOptionsOut);
    public void Commit();
    internal void GetMetadataQueryWriter(MetadataQueryWriter& metadataQueryWriterOut);
    internal void SetColorContexts(int count, ComArray`1<ColorContext> colorContextOut);
    private void SetColorContexts(int count, IntPtr colorContextOut);
}
internal enum SharpDX.WIC.BitmapEncoderCacheOption : Enum {
    public int value__;
    public static BitmapEncoderCacheOption InMemory;
    public static BitmapEncoderCacheOption TempFile;
    public static BitmapEncoderCacheOption NoCache;
}
public class SharpDX.WIC.BitmapEncoderGuids : object {
    public static Guid Bmp;
    public static Guid Png;
    public static Guid Jpeg;
    public static Guid Gif;
    public static Guid Tiff;
    public static Guid Wmp;
    public static Guid Dds;
    public static Guid JpegQualcommPhone;
    private static BitmapEncoderGuids();
}
[GuidAttribute("94C9B4EE-A09F-4f92-8A1E-4A9BCE7E76FB")]
public class SharpDX.WIC.BitmapEncoderInfo : BitmapCodecInfo {
    public BitmapEncoderInfo(IntPtr nativePtr);
    public static BitmapEncoderInfo op_Explicit(IntPtr nativePtr);
    public void CreateInstance(BitmapEncoder& bitmapEncoderOut);
}
public class SharpDX.WIC.BitmapEncoderOptions : PropertyBag {
    private static PropertyBagKey`2<float, float> ImageQualityKey;
    private static PropertyBagKey`2<float, float> CompressionQualityKey;
    private static PropertyBagKey`2<bool, bool> LosslessKey;
    private static PropertyBagKey`2<BitmapTransformOptions, byte> BitmapTransformKey;
    private static PropertyBagKey`2<bool, bool> InterlaceOptionKey;
    private static PropertyBagKey`2<PngFilterOption, byte> FilterOptionKey;
    private static PropertyBagKey`2<TiffCompressionOption, bool> TiffCompressionMethodKey;
    private static PropertyBagKey`2<UInt32[], UInt32[]> LuminanceKey;
    private static PropertyBagKey`2<UInt32[], UInt32[]> ChrominanceKey;
    private static PropertyBagKey`2<JpegYCrCbSubsamplingOption, byte> JpegYCrCbSubsamplingKey;
    private static PropertyBagKey`2<bool, bool> SuppressApp0Key;
    public float ImageQuality { get; public set; }
    public float CompressionQuality { get; public set; }
    public bool LossLess { get; public set; }
    public BitmapTransformOptions BitmapTransform { get; public set; }
    public bool InterlaceOption { get; public set; }
    public PngFilterOption FilterOption { get; public set; }
    public TiffCompressionOption TiffCompressionMethod { get; public set; }
    public UInt32[] Luminance { get; public set; }
    public UInt32[] Chrominance { get; public set; }
    public JpegYCrCbSubsamplingOption JpegYCrCbSubsampling { get; public set; }
    public bool SuppressApp0 { get; public set; }
    public BitmapEncoderOptions(IntPtr propertyBagPointer);
    private static BitmapEncoderOptions();
    public float get_ImageQuality();
    public void set_ImageQuality(float value);
    public float get_CompressionQuality();
    public void set_CompressionQuality(float value);
    public bool get_LossLess();
    public void set_LossLess(bool value);
    public BitmapTransformOptions get_BitmapTransform();
    public void set_BitmapTransform(BitmapTransformOptions value);
    public bool get_InterlaceOption();
    public void set_InterlaceOption(bool value);
    public PngFilterOption get_FilterOption();
    public void set_FilterOption(PngFilterOption value);
    public TiffCompressionOption get_TiffCompressionMethod();
    public void set_TiffCompressionMethod(TiffCompressionOption value);
    public UInt32[] get_Luminance();
    public void set_Luminance(UInt32[] value);
    public UInt32[] get_Chrominance();
    public void set_Chrominance(UInt32[] value);
    public JpegYCrCbSubsamplingOption get_JpegYCrCbSubsampling();
    public void set_JpegYCrCbSubsampling(JpegYCrCbSubsamplingOption value);
    public bool get_SuppressApp0();
    public void set_SuppressApp0(bool value);
}
[GuidAttribute("5009834F-2D6A-41ce-9E1B-17C5AFF7A782")]
public class SharpDX.WIC.BitmapFlipRotator : BitmapSource {
    public BitmapFlipRotator(ImagingFactory factory);
    public BitmapFlipRotator(IntPtr nativePtr);
    public static BitmapFlipRotator op_Explicit(IntPtr nativePtr);
    public void Initialize(BitmapSource sourceRef, BitmapTransformOptions options);
}
[GuidAttribute("3B16811B-6A43-4ec9-A813-3D930C13B940")]
public class SharpDX.WIC.BitmapFrameDecode : BitmapSource {
    [ObsoleteAttribute("Use TryGetColorContexts instead")]
public ColorContext[] ColorContexts { get; }
    public MetadataQueryReader MetadataQueryReader { get; }
    public BitmapSource Thumbnail { get; }
    public BitmapFrameDecode(IntPtr nativePtr);
    public Result TryGetColorContexts(ImagingFactory imagingFactory, ColorContext[]& colorContexts);
    public ColorContext[] TryGetColorContexts(ImagingFactory imagingFactory);
    public ColorContext[] get_ColorContexts();
    public static BitmapFrameDecode op_Explicit(IntPtr nativePtr);
    public MetadataQueryReader get_MetadataQueryReader();
    public BitmapSource get_Thumbnail();
    internal void GetMetadataQueryReader(MetadataQueryReader& metadataQueryReaderOut);
    internal Result GetColorContexts(int count, ColorContext[] colorContextsOut, Int32& actualCountRef);
    internal void GetThumbnail(BitmapSource& thumbnailOut);
    internal Result GetColorContexts(int count, ComArray`1<ColorContext> colorContextsOut, Int32& actualCountRef);
    private Result GetColorContexts(int count, IntPtr colorContextsOut, IntPtr actualCountRef);
}
[GuidAttribute("00000105-a8f2-4877-ba0a-fd2b6645fb94")]
public class SharpDX.WIC.BitmapFrameEncode : ComObject {
    [CompilerGeneratedAttribute]
private BitmapEncoderOptions <Options>k__BackingField;
    public BitmapEncoderOptions Options { get; private set; }
    unknown Palette Palette {public set; }
    unknown BitmapSource Thumbnail {public set; }
    public MetadataQueryWriter MetadataQueryWriter { get; }
    public BitmapFrameEncode(BitmapEncoder encoder);
    public BitmapFrameEncode(IntPtr nativePtr);
    [CompilerGeneratedAttribute]
public BitmapEncoderOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(BitmapEncoderOptions value);
    public void Initialize();
    public void SetColorContexts(ColorContext[] colorContextOut);
    public void WritePixels(int lineCount, DataRectangle buffer, int totalSizeInBytes);
    public void WritePixels(int lineCount, IntPtr buffer, int rowStride, int totalSizeInBytes);
    public void WritePixels(int lineCount, int stride, T[] pixelBuffer);
    public void WriteSource(BitmapSource bitmapSource);
    public void WriteSource(BitmapSource bitmapSourceRef, RawBox rectangleRef);
    protected virtual void Dispose(bool disposing);
    public static BitmapFrameEncode op_Explicit(IntPtr nativePtr);
    public void set_Palette(Palette value);
    public void set_Thumbnail(BitmapSource value);
    public MetadataQueryWriter get_MetadataQueryWriter();
    internal void Initialize(PropertyBag encoderOptionsRef);
    public void SetSize(int width, int height);
    public void SetResolution(double dpiX, double dpiY);
    public void SetPixelFormat(Guid& pixelFormatRef);
    internal void SetColorContexts(int count, ColorContext[] colorContextOut);
    internal void SetPalette(Palette paletteRef);
    internal void SetThumbnail(BitmapSource thumbnailRef);
    internal void WritePixels(int lineCount, int stride, int bufferSize, IntPtr pixelsRef);
    internal void WriteSource(BitmapSource bitmapSourceRef, IntPtr rectangleRef);
    public void Commit();
    internal void GetMetadataQueryWriter(MetadataQueryWriter& metadataQueryWriterOut);
    internal void SetColorContexts(int count, ComArray`1<ColorContext> colorContextOut);
    private void SetColorContexts(int count, IntPtr colorContextOut);
}
public enum SharpDX.WIC.BitmapInterpolationMode : Enum {
    public int value__;
    public static BitmapInterpolationMode NearestNeighbor;
    public static BitmapInterpolationMode Linear;
    public static BitmapInterpolationMode Cubic;
    public static BitmapInterpolationMode Fant;
    public static BitmapInterpolationMode HighQualityCubic;
}
[GuidAttribute("00000123-a8f2-4877-ba0a-fd2b6645fb94")]
public class SharpDX.WIC.BitmapLock : ComObject {
    public Size2 Size { get; }
    public DataRectangle Data { get; }
    public int Stride { get; }
    public Guid PixelFormat { get; }
    public BitmapLock(IntPtr nativePtr);
    public Size2 get_Size();
    public DataRectangle get_Data();
    public static BitmapLock op_Explicit(IntPtr nativePtr);
    public int get_Stride();
    public Guid get_PixelFormat();
    internal void GetSize(Int32& widthRef, Int32& heightRef);
    internal void GetStride(Int32& strideRef);
    internal IntPtr GetDataPointer(Int32& bufferSizeRef);
    internal void GetPixelFormat(Guid& pixelFormatRef);
}
public enum SharpDX.WIC.BitmapLockFlags : Enum {
    public int value__;
    public static BitmapLockFlags Read;
    public static BitmapLockFlags Write;
}
public enum SharpDX.WIC.BitmapPaletteType : Enum {
    public int value__;
    public static BitmapPaletteType Custom;
    public static BitmapPaletteType MedianCut;
    public static BitmapPaletteType FixedBW;
    public static BitmapPaletteType FixedHalftone8;
    public static BitmapPaletteType FixedHalftone27;
    public static BitmapPaletteType FixedHalftone64;
    public static BitmapPaletteType FixedHalftone125;
    public static BitmapPaletteType FixedHalftone216;
    public static BitmapPaletteType FixedWebPalette;
    public static BitmapPaletteType FixedHalftone252;
    public static BitmapPaletteType FixedHalftone256;
    public static BitmapPaletteType FixedGray4;
    public static BitmapPaletteType FixedGray16;
    public static BitmapPaletteType FixedGray256;
}
public class SharpDX.WIC.BitmapPattern : ValueType {
    public long Position;
    public int Length;
    public IntPtr Pattern;
    public IntPtr Mask;
    public RawBool EndOfStream;
}
public class SharpDX.WIC.BitmapPlane : ValueType {
    public Guid Format;
    public IntPtr PbBuffer;
    public int CbStride;
    public int CbBufferSize;
}
public class SharpDX.WIC.BitmapPlaneDescription : ValueType {
    public Guid Format;
    public int Width;
    public int Height;
}
[GuidAttribute("00000302-a8f2-4877-ba0a-fd2b6645fb94")]
public class SharpDX.WIC.BitmapScaler : BitmapSource {
    public BitmapScaler(ImagingFactory factory);
    public BitmapScaler(IntPtr nativePtr);
    public static BitmapScaler op_Explicit(IntPtr nativePtr);
    public void Initialize(BitmapSource sourceRef, int width, int height, BitmapInterpolationMode mode);
}
[GuidAttribute("00000120-a8f2-4877-ba0a-fd2b6645fb94")]
public class SharpDX.WIC.BitmapSource : ComObject {
    public Size2 Size { get; }
    public Guid PixelFormat { get; }
    public BitmapSource(IntPtr nativePtr);
    public Size2 get_Size();
    public void CopyPixels(RawBox rectangle, int stride, DataPointer dataPointer);
    public void CopyPixels(int stride, DataPointer dataPointer);
    public void CopyPixels(int stride, IntPtr dataPointer, int size);
    public void CopyPixels(RawBox rectangle, T[] output);
    public void CopyPixels(T[] output);
    public void CopyPixels(RawRectangle rectangle, Byte[] output, int stride);
    public void CopyPixels(Byte[] output, int stride);
    public static BitmapSource op_Explicit(IntPtr nativePtr);
    public Guid get_PixelFormat();
    internal void GetSize(Int32& widthRef, Int32& heightRef);
    internal void GetPixelFormat(Guid& pixelFormatRef);
    public void GetResolution(Double& dpiXRef, Double& dpiYRef);
    public void CopyPalette(Palette paletteRef);
    internal void CopyPixels(IntPtr rectangleRef, int stride, int bufferSize, IntPtr bufferRef);
}
[GuidAttribute("3B16811B-6A43-4ec9-B713-3D5A0C13B940")]
public class SharpDX.WIC.BitmapSourceTransform : ComObject {
    public BitmapSourceTransform(IntPtr nativePtr);
    public void CopyPixels(int width, int height, int stride, DataStream output);
    public void CopyPixels(int width, int height, BitmapTransformOptions dstTransform, int stride, DataStream output);
    public void CopyPixels(int width, int height, Guid guidDstFormat, BitmapTransformOptions dstTransform, int stride, DataStream output);
    public void CopyPixels(RawBox rectangle, int width, int height, Guid guidDstFormat, BitmapTransformOptions dstTransform, int stride, DataStream output);
    public void GetClosestSize(Size2& size);
    public static BitmapSourceTransform op_Explicit(IntPtr nativePtr);
    internal void CopyPixels(IntPtr rectangleRef, int width, int height, Nullable`1<Guid> guidDstFormatRef, BitmapTransformOptions dstTransform, int nStride, int bufferSize, IntPtr bufferRef);
    internal void GetClosestSize(Int32& widthRef, Int32& heightRef);
    public void GetClosestPixelFormat(Guid& guidDstFormatRef);
    public void IsSupportingTransform(BitmapTransformOptions dstTransform, RawBool& fIsSupportedRef);
}
[FlagsAttribute]
public enum SharpDX.WIC.BitmapTransformOptions : Enum {
    public int value__;
    public static BitmapTransformOptions Rotate0;
    public static BitmapTransformOptions Rotate90;
    public static BitmapTransformOptions Rotate180;
    public static BitmapTransformOptions Rotate270;
    public static BitmapTransformOptions FlipHorizontal;
    public static BitmapTransformOptions FlipVertical;
}
public class SharpDX.WIC.BmpBitmapDecoder : BitmapDecoder {
    public BmpBitmapDecoder(IntPtr nativePtr);
    public BmpBitmapDecoder(ImagingFactory factory);
    public BmpBitmapDecoder(ImagingFactory factory, Guid guidVendorRef);
}
public class SharpDX.WIC.BmpBitmapEncoder : BitmapEncoder {
    public BmpBitmapEncoder(IntPtr nativePtr);
    public BmpBitmapEncoder(ImagingFactory factory);
    public BmpBitmapEncoder(ImagingFactory factory, Stream stream);
    public BmpBitmapEncoder(ImagingFactory factory, Guid guidVendorRef, Stream stream);
    public BmpBitmapEncoder(ImagingFactory factory, WICStream stream);
    public BmpBitmapEncoder(ImagingFactory factory, Guid guidVendorRef, WICStream stream);
}
[GuidAttribute("3C613A02-34B2-44ea-9A7C-45AEA9C6FD6D")]
public class SharpDX.WIC.ColorContext : ComObject {
    public DataStream Profile { get; }
    public ColorContextType TypeInfo { get; }
    public int ExifColorSpace { get; }
    public ColorContext(ImagingFactory factory);
    public ColorContext(IntPtr nativePtr);
    public void InitializeFromMemory(DataPointer dataPointer);
    public DataStream get_Profile();
    public static ColorContext op_Explicit(IntPtr nativePtr);
    public ColorContextType get_TypeInfo();
    public int get_ExifColorSpace();
    public void InitializeFromFilename(string filename);
    internal void InitializeFromMemory(IntPtr bufferRef, int bufferSize);
    public void InitializeFromExifColorSpace(int value);
    internal void GetTypeInfo(ColorContextType& typeRef);
    internal void GetProfileBytes(int buffer, IntPtr bufferRef, Int32& actualRef);
    internal void GetExifColorSpace(Int32& valueRef);
}
public static class SharpDX.WIC.ColorContextsHelper : object {
    internal static Result TryGetColorContexts(ColorContextsProvider getColorContexts, ImagingFactory imagingFactory, ColorContext[]& colorContexts);
    internal static ColorContext[] TryGetColorContexts(ColorContextsProvider getColorContexts, ImagingFactory imagingFactory);
    internal static ColorContext[] GetColorContexts(ColorContextsProvider getColorContexts, ImagingFactory imagingFactory);
}
internal class SharpDX.WIC.ColorContextsProvider : MulticastDelegate {
    public ColorContextsProvider(object object, IntPtr method);
    public virtual Result Invoke(int count, ColorContext[] colorContexts, Int32& actualCountRef);
    public virtual IAsyncResult BeginInvoke(int count, ColorContext[] colorContexts, Int32& actualCountRef, AsyncCallback callback, object object);
    public virtual Result EndInvoke(Int32& actualCountRef, IAsyncResult result);
}
public enum SharpDX.WIC.ColorContextType : Enum {
    public int value__;
    public static ColorContextType Uninitialized;
    public static ColorContextType Profile;
    public static ColorContextType ExifColorSpace;
}
[GuidAttribute("B66F034F-D0E2-40ab-B436-6DE39E321A94")]
public class SharpDX.WIC.ColorTransform : BitmapSource {
    public ColorTransform(ImagingFactory factory);
    public ColorTransform(IntPtr nativePtr);
    public static ColorTransform op_Explicit(IntPtr nativePtr);
    public void Initialize(BitmapSource bitmapSourceRef, ColorContext contextSourceRef, ColorContext contextDestRef, Guid ixelFmtDestRef);
}
[FlagsAttribute]
public enum SharpDX.WIC.ComponentEnumerateOptions : Enum {
    public int value__;
    public static ComponentEnumerateOptions Default;
    public static ComponentEnumerateOptions Refresh;
    public static ComponentEnumerateOptions Disabled;
    public static ComponentEnumerateOptions Unsigned;
    public static ComponentEnumerateOptions BuiltInOnly;
}
[GuidAttribute("23BC3F0A-698B-4357-886B-F24D50671334")]
public class SharpDX.WIC.ComponentInfo : ComObject {
    public string Author { get; }
    public string Version { get; }
    public string SpecVersion { get; }
    public string FriendlyName { get; }
    public ComponentType ComponentType { get; }
    public Guid CLSID { get; }
    public int SigningStatus { get; }
    public Guid VendorGUID { get; }
    public ComponentInfo(ImagingFactory factory, Guid clsidComponent);
    public ComponentInfo(IntPtr nativePtr);
    public string get_Author();
    public string get_Version();
    public string get_SpecVersion();
    public string get_FriendlyName();
    public static ComponentInfo op_Explicit(IntPtr nativePtr);
    public ComponentType get_ComponentType();
    public Guid get_CLSID();
    public int get_SigningStatus();
    public Guid get_VendorGUID();
    internal void GetComponentType(ComponentType& typeRef);
    internal void GetCLSID(Guid& clsidRef);
    internal void GetSigningStatus(Int32& statusRef);
    internal void GetAuthor(int cchAuthor, IntPtr author, Int32& cchActualRef);
    internal void GetVendorGUID(Guid& guidVendorRef);
    internal void GetVersion(int cchVersion, IntPtr version, Int32& cchActualRef);
    internal void GetSpecVersion(int cchSpecVersion, IntPtr specVersion, Int32& cchActualRef);
    internal void GetFriendlyName(int cchFriendlyName, IntPtr friendlyName, Int32& cchActualRef);
}
[FlagsAttribute]
public enum SharpDX.WIC.ComponentSigning : Enum {
    public int value__;
    public static ComponentSigning Signed;
    public static ComponentSigning Unsigned;
    public static ComponentSigning Safe;
    public static ComponentSigning Disabled;
}
[FlagsAttribute]
public enum SharpDX.WIC.ComponentType : Enum {
    public int value__;
    public static ComponentType Decoder;
    public static ComponentType Encoder;
    public static ComponentType PixelFormatConverter;
    public static ComponentType MetadataReader;
    public static ComponentType MetadataWriter;
    public static ComponentType PixelFormat;
    public static ComponentType AllComponents;
}
public class SharpDX.WIC.ContainerFormatGuids : object {
    public static Guid Bmp;
    public static Guid Png;
    public static Guid Ico;
    public static Guid Jpeg;
    public static Guid Tiff;
    public static Guid Gif;
    public static Guid Wmp;
    public static Guid Dds;
    public static Guid Adng;
    private static ContainerFormatGuids();
}
public enum SharpDX.WIC.DdsAlphaMode : Enum {
    public int value__;
    public static DdsAlphaMode DdsAlphaModeUnknown;
    public static DdsAlphaMode DdsAlphaModeStraight;
    public static DdsAlphaMode DdsAlphaModePremultiplied;
    public static DdsAlphaMode DdsAlphaModeOpaque;
    public static DdsAlphaMode DdsAlphaModeCustom;
}
[GuidAttribute("409cd537-8532-40cb-9774-e2feb2df4e9c")]
public class SharpDX.WIC.DdsDecoder : ComObject {
    public DdsParameters Parameters { get; }
    public DdsDecoder(IntPtr nativePtr);
    public static DdsDecoder op_Explicit(IntPtr nativePtr);
    public DdsParameters get_Parameters();
    internal void GetParameters(DdsParameters& parametersRef);
    public void GetFrame(int arrayIndex, int mipLevel, int sliceIndex, BitmapFrameDecode& bitmapFrameOut);
}
public enum SharpDX.WIC.DdsDimension : Enum {
    public int value__;
    public static DdsDimension DdsTexture1D;
    public static DdsDimension DdsTexture2D;
    public static DdsDimension DdsTexture3D;
    public static DdsDimension DdsTextureCube;
}
[GuidAttribute("5cacdb4c-407e-41b3-b936-d0f010cd6732")]
public class SharpDX.WIC.DdsEncoder : ComObject {
    public DdsParameters Parameters { get; public set; }
    public DdsEncoder(IntPtr nativePtr);
    public static DdsEncoder op_Explicit(IntPtr nativePtr);
    public DdsParameters get_Parameters();
    public void set_Parameters(DdsParameters value);
    internal void SetParameters(DdsParameters& parametersRef);
    internal void GetParameters(DdsParameters& parametersRef);
    public void CreateNewFrame(BitmapFrameEncode& frameEncodeOut, Int32& arrayIndexRef, Int32& mipLevelRef, Int32& sliceIndexRef);
}
public class SharpDX.WIC.DdsFormatInfo : ValueType {
    public Format DxgiFormat;
    public int BytesPerBlock;
    public int BlockWidth;
    public int BlockHeight;
}
[GuidAttribute("3d4c0c61-18a4-41e4-bd80-481a4fc9f464")]
public class SharpDX.WIC.DdsFrameDecode : ComObject {
    public Size2 SizeInBlocks { get; }
    public DdsFormatInfo FormatInfo { get; }
    public DdsFrameDecode(IntPtr nativePtr);
    public Size2 get_SizeInBlocks();
    public void CopyBlocks(Nullable`1<RawBox> boundsInBlocks, int stride, DataStream destination);
    public static DdsFrameDecode op_Explicit(IntPtr nativePtr);
    public DdsFormatInfo get_FormatInfo();
    internal void GetSizeInBlocks(Int32& widthInBlocksRef, Int32& heightInBlocksRef);
    internal void GetFormatInfo(DdsFormatInfo& formatInfoRef);
    internal void CopyBlocks(Nullable`1<RawBox> rcBoundsInBlocksRef, int stride, int bufferSize, IntPtr bufferRef);
}
public class SharpDX.WIC.DdsParameters : ValueType {
    public int Width;
    public int Height;
    public int Depth;
    public int MipLevels;
    public int ArraySize;
    public Format DxgiFormat;
    public DdsDimension Dimension;
    public DdsAlphaMode AlphaMode;
}
public enum SharpDX.WIC.DecodeOptions : Enum {
    public int value__;
    public static DecodeOptions CacheOnDemand;
    public static DecodeOptions CacheOnLoad;
}
[GuidAttribute("fbec5e44-f7be-4b65-b7f8-c0c81fef026d")]
public class SharpDX.WIC.DevelopRaw : BitmapFrameDecode {
    public PropertyBag CurrentParameterSet { get; }
    public double ExposureCompensation { get; public set; }
    public NamedWhitePoint NamedWhitePoint { get; public set; }
    public int WhitePointKelvin { get; public set; }
    public double Contrast { get; public set; }
    public double Gamma { get; public set; }
    public double Sharpness { get; public set; }
    public double Saturation { get; public set; }
    public double Tint { get; public set; }
    public double NoiseReduction { get; public set; }
    unknown ColorContext DestinationColorContext {public set; }
    public double Rotation { get; public set; }
    public RawRenderMode RenderMode { get; public set; }
    unknown DevelopRawNotificationCallback NotificationCallback {internal set; }
    public DevelopRaw(IntPtr nativePtr);
    public static DevelopRaw op_Explicit(IntPtr nativePtr);
    public PropertyBag get_CurrentParameterSet();
    public double get_ExposureCompensation();
    public void set_ExposureCompensation(double value);
    public NamedWhitePoint get_NamedWhitePoint();
    public void set_NamedWhitePoint(NamedWhitePoint value);
    public int get_WhitePointKelvin();
    public void set_WhitePointKelvin(int value);
    public double get_Contrast();
    public void set_Contrast(double value);
    public double get_Gamma();
    public void set_Gamma(double value);
    public double get_Sharpness();
    public void set_Sharpness(double value);
    public double get_Saturation();
    public void set_Saturation(double value);
    public double get_Tint();
    public void set_Tint(double value);
    public double get_NoiseReduction();
    public void set_NoiseReduction(double value);
    public void set_DestinationColorContext(ColorContext value);
    public double get_Rotation();
    public void set_Rotation(double value);
    public RawRenderMode get_RenderMode();
    public void set_RenderMode(RawRenderMode value);
    internal void set_NotificationCallback(DevelopRawNotificationCallback value);
    public void QueryRawCapabilitiesInfo(RawCapabilitiesInfo& infoRef);
    public void LoadParameterSet(RawParameterSet parameterSet);
    internal void GetCurrentParameterSet(PropertyBag& currentParameterSetOut);
    internal void SetExposureCompensation(double ev);
    internal void GetExposureCompensation(Double& eVRef);
    public void SetWhitePointRGB(int red, int green, int blue);
    public void GetWhitePointRGB(Int32& redRef, Int32& greenRef, Int32& blueRef);
    internal void SetNamedWhitePoint(NamedWhitePoint whitePoint);
    internal void GetNamedWhitePoint(NamedWhitePoint& whitePointRef);
    internal void SetWhitePointKelvin(int whitePointKelvin);
    internal void GetWhitePointKelvin(Int32& whitePointKelvinRef);
    public void GetKelvinRangeInfo(Int32& minKelvinTempRef, Int32& maxKelvinTempRef, Int32& kelvinTempStepValueRef);
    internal void SetContrast(double contrast);
    internal void GetContrast(Double& contrastRef);
    internal void SetGamma(double gamma);
    internal void GetGamma(Double& gammaRef);
    internal void SetSharpness(double sharpness);
    internal void GetSharpness(Double& sharpnessRef);
    internal void SetSaturation(double saturation);
    internal void GetSaturation(Double& saturationRef);
    internal void SetTint(double tint);
    internal void GetTint(Double& tintRef);
    internal void SetNoiseReduction(double noiseReduction);
    internal void GetNoiseReduction(Double& noiseReductionRef);
    internal void SetDestinationColorContext(ColorContext colorContextRef);
    public void SetToneCurve(int toneCurveSize, RawToneCurve[] toneCurveRef);
    public void GetToneCurve(int toneCurveBufferSize, RawToneCurve[] toneCurveRef, IntPtr actualToneCurveBufferSizeRef);
    internal void SetRotation(double rotation);
    internal void GetRotation(Double& rotationRef);
    internal void SetRenderMode(RawRenderMode renderMode);
    internal void GetRenderMode(RawRenderMode& renderModeRef);
    internal void SetNotificationCallback(DevelopRawNotificationCallback callbackRef);
}
[GuidAttribute("95c75a6e-3e8c-4ec2-85a8-aebcc551e59b")]
internal class SharpDX.WIC.DevelopRawNotificationCallback : ComObject {
    public DevelopRawNotificationCallback(IntPtr nativePtr);
    public static DevelopRawNotificationCallback op_Explicit(IntPtr nativePtr);
    public void Notify(int notificationMask);
}
[GuidAttribute("DC2BB46D-3F07-481E-8625-220C4AEDBB33")]
internal class SharpDX.WIC.EnumMetadataItem : ComObject {
    public EnumMetadataItem(IntPtr nativePtr);
    public static EnumMetadataItem op_Explicit(IntPtr nativePtr);
    public void Skip(int celt);
    public void Reset();
    public void Clone(EnumMetadataItem& enumMetadataItemOut);
}
[GuidAttribute("B84E2C09-78C9-4AC4-8BD3-524AE1663A2F")]
public class SharpDX.WIC.FastMetadataEncoder : ComObject {
    public MetadataQueryWriter MetadataQueryWriter { get; }
    public FastMetadataEncoder(ImagingFactory factory, BitmapDecoder decoder);
    public FastMetadataEncoder(ImagingFactory factory, BitmapFrameDecode frameDecoder);
    public FastMetadataEncoder(IntPtr nativePtr);
    public static FastMetadataEncoder op_Explicit(IntPtr nativePtr);
    public MetadataQueryWriter get_MetadataQueryWriter();
    public void Commit();
    internal void GetMetadataQueryWriter(MetadataQueryWriter& metadataQueryWriterOut);
}
[GuidAttribute("00000301-a8f2-4877-ba0a-fd2b6645fb94")]
public class SharpDX.WIC.FormatConverter : BitmapSource {
    public FormatConverter(FormatConverterInfo converterInfo);
    public FormatConverter(ImagingFactory factory);
    public FormatConverter(IntPtr nativePtr);
    public void Initialize(BitmapSource sourceRef, Guid dstFormat);
    public static FormatConverter op_Explicit(IntPtr nativePtr);
    public void Initialize(BitmapSource sourceRef, Guid dstFormat, BitmapDitherType dither, Palette paletteRef, double alphaThresholdPercent, BitmapPaletteType paletteTranslate);
    public RawBool CanConvert(Guid srcPixelFormat, Guid dstPixelFormat);
}
[GuidAttribute("9F34FB65-13F4-4f15-BC57-3726B5E53D9F")]
public class SharpDX.WIC.FormatConverterInfo : ComponentInfo {
    public Guid[] PixelFormats { get; }
    public FormatConverterInfo(IntPtr nativePtr);
    public Guid[] get_PixelFormats();
    public static FormatConverterInfo op_Explicit(IntPtr nativePtr);
    internal void GetPixelFormats(int formats, Guid[] pixelFormatGUIDsRef, Int32& actualRef);
    internal void CreateInstance(FormatConverter converterOut);
}
public enum SharpDX.WIC.GifApplicationExtensionProperties : Enum {
    public int value__;
    public static GifApplicationExtensionProperties Application;
    public static GifApplicationExtensionProperties Data;
}
public class SharpDX.WIC.GifBitmapDecoder : BitmapDecoder {
    public GifBitmapDecoder(IntPtr nativePtr);
    public GifBitmapDecoder(ImagingFactory factory);
    public GifBitmapDecoder(ImagingFactory factory, Guid guidVendorRef);
}
public class SharpDX.WIC.GifBitmapEncoder : BitmapEncoder {
    public GifBitmapEncoder(IntPtr nativePtr);
    public GifBitmapEncoder(ImagingFactory factory);
    public GifBitmapEncoder(ImagingFactory factory, Stream stream);
    public GifBitmapEncoder(ImagingFactory factory, Guid guidVendorRef, Stream stream);
    public GifBitmapEncoder(ImagingFactory factory, WICStream stream);
    public GifBitmapEncoder(ImagingFactory factory, Guid guidVendorRef, WICStream stream);
}
public enum SharpDX.WIC.GifCommentExtensionProperties : Enum {
    public int value__;
    public static GifCommentExtensionProperties Text;
}
public enum SharpDX.WIC.GifGraphicControlExtensionProperties : Enum {
    public int value__;
    public static GifGraphicControlExtensionProperties Disposal;
    public static GifGraphicControlExtensionProperties UserInputFlag;
    public static GifGraphicControlExtensionProperties TransparencyFlag;
    public static GifGraphicControlExtensionProperties Delay;
    public static GifGraphicControlExtensionProperties TransparentColorIndex;
}
public enum SharpDX.WIC.GifImageDescriptorProperties : Enum {
    public int value__;
    public static GifImageDescriptorProperties Left;
    public static GifImageDescriptorProperties Top;
    public static GifImageDescriptorProperties Width;
    public static GifImageDescriptorProperties Height;
    public static GifImageDescriptorProperties LocalColorTableFlag;
    public static GifImageDescriptorProperties InterlaceFlag;
    public static GifImageDescriptorProperties SortFlag;
    public static GifImageDescriptorProperties LocalColorTableSize;
}
public enum SharpDX.WIC.GifLogicalScreenDescriptorProperties : Enum {
    public int value__;
    public static GifLogicalScreenDescriptorProperties Signature;
    public static GifLogicalScreenDescriptorProperties Width;
    public static GifLogicalScreenDescriptorProperties Height;
    public static GifLogicalScreenDescriptorProperties GlobalColorTableFlag;
    public static GifLogicalScreenDescriptorProperties ColorResolution;
    public static GifLogicalScreenDescriptorProperties SortFlag;
    public static GifLogicalScreenDescriptorProperties GlobalColorTableSize;
    public static GifLogicalScreenDescriptorProperties BackgroundColorIndex;
    public static GifLogicalScreenDescriptorProperties PixelAspectRatio;
}
[GuidAttribute("04C75BF8-3CE1-473B-ACC5-3CC4F5E94999")]
public class SharpDX.WIC.ImageEncoder : ComObject {
    public ImageEncoder(ImagingFactory2 factory, Device d2dDevice);
    public ImageEncoder(IntPtr nativePtr);
    public static ImageEncoder op_Explicit(IntPtr nativePtr);
    public void WriteFrame(Image imageRef, BitmapFrameEncode frameEncodeRef, ImageParameters imageParametersRef);
    public void WriteFrameThumbnail(Image imageRef, BitmapFrameEncode frameEncodeRef, ImageParameters imageParametersRef);
    public void WriteThumbnail(Image imageRef, BitmapEncoder encoderRef, ImageParameters imageParametersRef);
}
public class SharpDX.WIC.ImageParameters : ValueType {
    public PixelFormat PixelFormat;
    public float DpiX;
    public float DpiY;
    public float Top;
    public float Left;
    public int PixelWidth;
    public int PixelHeight;
    public ImageParameters(PixelFormat pixelFormat, float dpiX, float dpiY, float top, float left, int pixelWidth, int pixelHeight);
}
[GuidAttribute("ec5ec8a9-c395-4314-9c77-54d7a935ff70")]
public class SharpDX.WIC.ImagingFactory : ComObject {
    public static Guid WICImagingFactoryClsid;
    public ImagingFactory(IntPtr nativePtr);
    private static ImagingFactory();
    public static ImagingFactory op_Explicit(IntPtr nativePtr);
    internal void CreateDecoderFromFilename(string filename, Nullable`1<Guid> guidVendorRef, int desiredAccess, DecodeOptions metadataOptions, BitmapDecoder decoderOut);
    internal void CreateDecoderFromStream(IStream streamRef, Nullable`1<Guid> guidVendorRef, DecodeOptions metadataOptions, BitmapDecoder decoderOut);
    internal void CreateDecoderFromFileHandle(IntPtr hFile, Nullable`1<Guid> guidVendorRef, DecodeOptions metadataOptions, BitmapDecoder decoderOut);
    internal void CreateComponentInfo(Guid clsidComponent, ComponentInfo infoOut);
    internal void CreateDecoder(Guid guidContainerFormat, Nullable`1<Guid> guidVendorRef, BitmapDecoder decoderOut);
    internal void CreateEncoder(Guid guidContainerFormat, Nullable`1<Guid> guidVendorRef, BitmapEncoder encoderOut);
    internal void CreatePalette(Palette paletteOut);
    internal void CreateFormatConverter(FormatConverter formatConverterOut);
    internal void CreateBitmapScaler(BitmapScaler bitmapScalerOut);
    internal void CreateBitmapClipper(BitmapClipper bitmapClipperOut);
    internal void CreateBitmapFlipRotator(BitmapFlipRotator bitmapFlipRotatorOut);
    internal void CreateStream(WICStream wICStreamOut);
    internal void CreateColorContext(ColorContext wICColorContextOut);
    internal void CreateColorTransformer(ColorTransform wICColorTransformOut);
    internal void CreateBitmap(int width, int height, Guid ixelFormatRef, BitmapCreateCacheOption option, Bitmap bitmapOut);
    internal void CreateBitmapFromSource(BitmapSource bitmapSourceRef, BitmapCreateCacheOption option, Bitmap bitmapOut);
    internal void CreateBitmapFromSourceRect(BitmapSource bitmapSourceRef, int x, int y, int width, int height, Bitmap bitmapOut);
    internal void CreateBitmapFromMemory(int width, int height, Guid ixelFormatRef, int stride, int bufferSize, IntPtr bufferRef, Bitmap bitmapOut);
    internal void CreateBitmapFromHBITMAP(IntPtr hBitmap, IntPtr hPalette, BitmapAlphaChannelOption options, Bitmap bitmapOut);
    internal void CreateBitmapFromHICON(IntPtr hIcon, Bitmap bitmapOut);
    internal void CreateComponentEnumerator(int componentTypes, int options, ComObject enumUnknownOut);
    internal void CreateFastMetadataEncoderFromDecoder(BitmapDecoder decoderRef, FastMetadataEncoder fastEncoderOut);
    internal void CreateFastMetadataEncoderFromFrameDecode(BitmapFrameDecode frameDecoderRef, FastMetadataEncoder fastEncoderOut);
    internal void CreateQueryWriter(Guid guidMetadataFormat, Nullable`1<Guid> guidVendorRef, MetadataQueryWriter queryWriterOut);
    internal void CreateQueryWriterFromReader(MetadataQueryReader queryReaderRef, Nullable`1<Guid> guidVendorRef, MetadataQueryWriter queryWriterOut);
}
[GuidAttribute("7B816B45-1996-4476-B132-DE9E247C8AF0")]
public class SharpDX.WIC.ImagingFactory2 : ImagingFactory {
    public ImagingFactory2(IntPtr nativePtr);
    public static ImagingFactory2 op_Explicit(IntPtr nativePtr);
    internal void CreateImageEncoder(Device d2DDeviceRef, ImageEncoder wICImageEncoderOut);
}
public class SharpDX.WIC.JpegBitmapDecoder : BitmapDecoder {
    public JpegBitmapDecoder(IntPtr nativePtr);
    public JpegBitmapDecoder(ImagingFactory factory);
    public JpegBitmapDecoder(ImagingFactory factory, Guid guidVendorRef);
}
public class SharpDX.WIC.JpegBitmapEncoder : BitmapEncoder {
    public JpegBitmapEncoder(IntPtr nativePtr);
    public JpegBitmapEncoder(ImagingFactory factory);
    public JpegBitmapEncoder(ImagingFactory factory, Stream stream);
    public JpegBitmapEncoder(ImagingFactory factory, Guid guidVendorRef, Stream stream);
    public JpegBitmapEncoder(ImagingFactory factory, WICStream stream);
    public JpegBitmapEncoder(ImagingFactory factory, Guid guidVendorRef, WICStream stream);
}
public enum SharpDX.WIC.JpegChrominanceProperties : Enum {
    public int value__;
    public static JpegChrominanceProperties Table;
}
public enum SharpDX.WIC.JpegCommentProperties : Enum {
    public int value__;
    public static JpegCommentProperties Text;
}
[GuidAttribute("8939F66E-C46A-4c21-A9D1-98B327CE1679")]
public class SharpDX.WIC.JpegFrameDecode : ComObject {
    public JpegFrameHeader FrameHeader { get; }
    public JpegFrameDecode(IntPtr nativePtr);
    public static JpegFrameDecode op_Explicit(IntPtr nativePtr);
    public JpegFrameHeader get_FrameHeader();
    public void DoesSupportIndexing(RawBool& fIndexingSupportedRef);
    public void SetIndexing(JpegIndexingOptions options, int horizontalIntervalSize);
    public void ClearIndexing();
    public void GetAcHuffmanTable(int scanIndex, int tableIndex, JpegAcHuffmanTable& acHuffmanTableRef);
    public void GetDcHuffmanTable(int scanIndex, int tableIndex, JpegDeviceContextHuffmanTable& dcHuffmanTableRef);
    public void GetQuantizationTable(int scanIndex, int tableIndex, JpegQuantizationTable& quantizationTableRef);
    internal void GetFrameHeader(JpegFrameHeader& frameHeaderRef);
    public void GetScanHeader(int scanIndex, JpegScanHeader& scanHeaderRef);
    public void CopyScan(int scanIndex, int scanOffset, int scanData, Byte[] scanDataRef, Int32& scanDataActualRef);
    public void CopyMinimalStream(int streamOffset, int streamData, Byte[] streamDataRef, Int32& streamDataActualRef);
}
[GuidAttribute("2F0C601F-D2C6-468C-ABFA-49495D983ED1")]
public class SharpDX.WIC.JpegFrameEncode : ComObject {
    public JpegFrameEncode(IntPtr nativePtr);
    public static JpegFrameEncode op_Explicit(IntPtr nativePtr);
    public void GetAcHuffmanTable(int scanIndex, int tableIndex, JpegAcHuffmanTable& acHuffmanTableRef);
    public void GetDcHuffmanTable(int scanIndex, int tableIndex, JpegDeviceContextHuffmanTable& dcHuffmanTableRef);
    public void GetQuantizationTable(int scanIndex, int tableIndex, JpegQuantizationTable& quantizationTableRef);
    public void WriteScan(int scanData, Byte[] scanDataRef);
}
public class SharpDX.WIC.JpegFrameHeader : ValueType {
    public int Width;
    public int Height;
    public JpegTransferMatrix TransferMatrix;
    public JpegScanType ScanType;
    public int CComponents;
    public int ComponentIdentifiers;
    public int SampleFactors;
    public int QuantizationTableIndices;
}
public enum SharpDX.WIC.JpegIndexingOptions : Enum {
    public int value__;
    public static JpegIndexingOptions JpegIndexingOptionsGenerateOnDemand;
    public static JpegIndexingOptions JpegIndexingOptionsGenerateOnLoad;
}
public enum SharpDX.WIC.JpegLuminanceProperties : Enum {
    public int value__;
    public static JpegLuminanceProperties Table;
}
public class SharpDX.WIC.JpegScanHeader : ValueType {
    public int CComponents;
    public int RestartInterval;
    public int ComponentSelectors;
    public int HuffmanTableIndices;
    public byte StartSpectralSelection;
    public byte EndSpectralSelection;
    public byte SuccessiveApproximationHigh;
    public byte SuccessiveApproximationLow;
}
public enum SharpDX.WIC.JpegScanType : Enum {
    public int value__;
    public static JpegScanType JpegScanTypeInterleaved;
    public static JpegScanType JpegScanTypePlanarComponents;
    public static JpegScanType JpegScanTypeProgressive;
}
public enum SharpDX.WIC.JpegTransferMatrix : Enum {
    public int value__;
    public static JpegTransferMatrix JpegTransferMatrixIdentity;
    public static JpegTransferMatrix JpegTransferMatrixBT601;
}
public enum SharpDX.WIC.JpegYCrCbSubsamplingOption : Enum {
    public int value__;
    public static JpegYCrCbSubsamplingOption Default;
    public static JpegYCrCbSubsamplingOption Mode420;
    public static JpegYCrCbSubsamplingOption Mode422;
    public static JpegYCrCbSubsamplingOption Mode444;
    public static JpegYCrCbSubsamplingOption Mode440;
}
[GuidAttribute("30989668-E1C9-4597-B395-458EEDB808DF")]
public class SharpDX.WIC.MetadataQueryReader : ComObject {
    public IEnumerable`1<string> Enumerator { get; }
    public IEnumerable`1<string> QueryPaths { get; }
    public string Location { get; }
    public Guid ContainerFormat { get; }
    public MetadataQueryReader(IntPtr nativePtr);
    public IEnumerable`1<string> get_Enumerator();
    [IteratorStateMachineAttribute("SharpDX.WIC.MetadataQueryReader/<get_QueryPaths>d__3")]
public IEnumerable`1<string> get_QueryPaths();
    public string get_Location();
    public Result TryGetMetadataByName(string name, Object& value);
    public object TryGetMetadataByName(string name);
    public object GetMetadataByName(string name);
    public void Dump(TextWriter writer, int level);
    public static MetadataQueryReader op_Explicit(IntPtr nativePtr);
    public Guid get_ContainerFormat();
    internal void GetContainerFormat(Guid& guidContainerFormatRef);
    internal void GetLocation(int cchMaxLength, IntPtr namespace, Int32& cchActualLengthRef);
    internal Result GetMetadataByName(string name, IntPtr varValueRef);
    internal IntPtr GetEnumerator();
}
[GuidAttribute("A721791A-0DEF-4d06-BD91-2118BF1DB10B")]
public class SharpDX.WIC.MetadataQueryWriter : MetadataQueryReader {
    public MetadataQueryWriter(ImagingFactory factory, Guid guidMetadataFormat);
    public MetadataQueryWriter(ImagingFactory factory, Guid guidMetadataFormat, Guid guidVendorRef);
    public MetadataQueryWriter(ImagingFactory factory, MetadataQueryReader metadataQueryReader);
    public MetadataQueryWriter(ImagingFactory factory, MetadataQueryReader metadataQueryReader, Guid guidVendorRef);
    public MetadataQueryWriter(IntPtr nativePtr);
    public void SetMetadataByName(string name, object value);
    public static MetadataQueryWriter op_Explicit(IntPtr nativePtr);
    internal void SetMetadataByName(string name, IntPtr varValueRef);
    public void RemoveMetadataByName(string name);
}
[FlagsAttribute]
public enum SharpDX.WIC.NamedWhitePoint : Enum {
    public int value__;
    public static NamedWhitePoint Default;
    public static NamedWhitePoint Daylight;
    public static NamedWhitePoint Cloudy;
    public static NamedWhitePoint Shade;
    public static NamedWhitePoint Tungsten;
    public static NamedWhitePoint Fluorescent;
    public static NamedWhitePoint Flash;
    public static NamedWhitePoint Underwater;
    public static NamedWhitePoint Custom;
    public static NamedWhitePoint AutoWhiteBalance;
    public static NamedWhitePoint AsShot;
}
[CompilerGeneratedAttribute]
internal class SharpDX.WIC.NamespaceDoc : object {
}
[GuidAttribute("00000040-a8f2-4877-ba0a-fd2b6645fb94")]
public class SharpDX.WIC.Palette : ComObject {
    public BitmapPaletteType TypeInfo { get; }
    public int ColorCount { get; }
    public RawBool IsBlackWhite { get; }
    public RawBool IsGrayscale { get; }
    public Palette(ImagingFactory factory);
    public Palette(IntPtr nativePtr);
    public void Initialize(T[] colors);
    public T[] GetColors();
    public static Palette op_Explicit(IntPtr nativePtr);
    public BitmapPaletteType get_TypeInfo();
    public int get_ColorCount();
    public RawBool get_IsBlackWhite();
    public RawBool get_IsGrayscale();
    public void Initialize(BitmapPaletteType ePaletteType, RawBool fAddTransparentColor);
    internal void Initialize(IntPtr colorsRef, int count);
    public void Initialize(BitmapSource surfaceRef, int count, RawBool fAddTransparentColor);
    public void Initialize(Palette paletteRef);
    internal void GetTypeInfo(BitmapPaletteType& ePaletteTypeRef);
    internal void GetColorCount(Int32& countRef);
    internal void GetColors(int count, IntPtr colorsRef, Int32& actualColorsRef);
    internal void IsBlackWhite_(RawBool& fIsBlackWhiteRef);
    internal void IsGrayscale_(RawBool& fIsGrayscaleRef);
    public void HasAlpha(RawBool& fHasAlphaRef);
}
public class SharpDX.WIC.PixelFormat : object {
    private static Dictionary`2<Guid, int> mapGuidToSize;
    public static Guid FormatDontCare;
    public static Guid Format1bppIndexed;
    public static Guid Format2bppIndexed;
    public static Guid Format4bppIndexed;
    public static Guid Format8bppIndexed;
    public static Guid FormatBlackWhite;
    public static Guid Format2bppGray;
    public static Guid Format4bppGray;
    public static Guid Format8bppGray;
    public static Guid Format8bppAlpha;
    public static Guid Format16bppBGR555;
    public static Guid Format16bppBGR565;
    public static Guid Format16bppBGRA5551;
    public static Guid Format16bppGray;
    public static Guid Format24bppBGR;
    public static Guid Format24bppRGB;
    public static Guid Format32bppBGR;
    public static Guid Format32bppBGRA;
    public static Guid Format32bppPBGRA;
    public static Guid Format32bppGrayFloat;
    public static Guid Format32bppRGB;
    public static Guid Format32bppRGBA;
    public static Guid Format32bppPRGBA;
    public static Guid Format48bppRGB;
    public static Guid Format48bppBGR;
    public static Guid Format64bppRGB;
    public static Guid Format64bppRGBA;
    public static Guid Format64bppBGRA;
    public static Guid Format64bppPRGBA;
    public static Guid Format64bppPBGRA;
    public static Guid Format16bppGrayFixedPoint;
    public static Guid Format32bppBGR101010;
    public static Guid Format48bppRGBFixedPoint;
    public static Guid Format48bppBGRFixedPoint;
    public static Guid Format96bppRGBFixedPoint;
    public static Guid Format96bppRGBFloat;
    public static Guid Format128bppRGBAFloat;
    public static Guid Format128bppPRGBAFloat;
    public static Guid Format128bppRGBFloat;
    public static Guid Format32bppCMYK;
    public static Guid Format64bppRGBAFixedPoint;
    public static Guid Format64bppBGRAFixedPoint;
    public static Guid Format64bppRGBFixedPoint;
    public static Guid Format128bppRGBAFixedPoint;
    public static Guid Format128bppRGBFixedPoint;
    public static Guid Format64bppRGBAHalf;
    public static Guid Format64bppPRGBAHalf;
    public static Guid Format64bppRGBHalf;
    public static Guid Format48bppRGBHalf;
    public static Guid Format32bppRGBE;
    public static Guid Format16bppGrayHalf;
    public static Guid Format32bppGrayFixedPoint;
    public static Guid Format32bppRGBA1010102;
    public static Guid Format32bppRGBA1010102XR;
    public static Guid Format64bppCMYK;
    public static Guid Format24bpp3Channels;
    public static Guid Format32bpp4Channels;
    public static Guid Format40bpp5Channels;
    public static Guid Format48bpp6Channels;
    public static Guid Format56bpp7Channels;
    public static Guid Format64bpp8Channels;
    public static Guid Format48bpp3Channels;
    public static Guid Format64bpp4Channels;
    public static Guid Format80bpp5Channels;
    public static Guid Format96bpp6Channels;
    public static Guid Format112bpp7Channels;
    public static Guid Format128bpp8Channels;
    public static Guid Format40bppCMYKAlpha;
    public static Guid Format80bppCMYKAlpha;
    public static Guid Format32bpp3ChannelsAlpha;
    public static Guid Format40bpp4ChannelsAlpha;
    public static Guid Format48bpp5ChannelsAlpha;
    public static Guid Format56bpp6ChannelsAlpha;
    public static Guid Format64bpp7ChannelsAlpha;
    public static Guid Format72bpp8ChannelsAlpha;
    public static Guid Format64bpp3ChannelsAlpha;
    public static Guid Format80bpp4ChannelsAlpha;
    public static Guid Format96bpp5ChannelsAlpha;
    public static Guid Format112bpp6ChannelsAlpha;
    public static Guid Format128bpp7ChannelsAlpha;
    public static Guid Format144bpp8ChannelsAlpha;
    public static Guid Format8bppY;
    public static Guid Format8bppCb;
    public static Guid Format8bppCr;
    public static Guid Format16bppCbCr;
    public static Guid Format16bppYQuantizedDctCoefficients;
    public static Guid Format16bppCbQuantizedDctCoefficients;
    public static Guid Format16bppCrQuantizedDctCoefficients;
    private static PixelFormat();
    public static int GetBitsPerPixel(Guid guid);
    public static int GetStride(Guid guid, int width);
}
[GuidAttribute("E8EDA601-3D48-431a-AB44-69059BE88BBE")]
public class SharpDX.WIC.PixelFormatInfo : ComponentInfo {
    public Guid FormatGUID { get; }
    public ColorContext ColorContext { get; }
    public int BitsPerPixel { get; }
    public int ChannelCount { get; }
    public PixelFormatInfo(IntPtr nativePtr);
    public Byte[] GetChannelMask(int channelIndex);
    public static PixelFormatInfo op_Explicit(IntPtr nativePtr);
    public Guid get_FormatGUID();
    public ColorContext get_ColorContext();
    public int get_BitsPerPixel();
    public int get_ChannelCount();
    internal void GetFormatGUID(Guid& formatRef);
    internal void GetColorContext(ColorContext& colorContextOut);
    internal void GetBitsPerPixel(Int32& bitsPerPixelRef);
    internal void GetChannelCount(Int32& channelCountRef);
    internal void GetChannelMask(int channelIndex, int maskBuffer, Byte[] maskBufferRef, Int32& actualRef);
}
[GuidAttribute("A9DB33A2-AF5F-43C7-B679-74F5984B5AA4")]
public class SharpDX.WIC.PixelFormatInfo2 : PixelFormatInfo {
    public RawBool IsSupportingTransparency { get; }
    public PixelFormatNumericRepresentation NumericRepresentation { get; }
    public PixelFormatInfo2(IntPtr nativePtr);
    public static PixelFormatInfo2 op_Explicit(IntPtr nativePtr);
    public RawBool get_IsSupportingTransparency();
    public PixelFormatNumericRepresentation get_NumericRepresentation();
    internal void IsSupportingTransparency_(RawBool& fSupportsTransparencyRef);
    internal void GetNumericRepresentation(PixelFormatNumericRepresentation& numericRepresentationRef);
}
public enum SharpDX.WIC.PixelFormatNumericRepresentation : Enum {
    public int value__;
    public static PixelFormatNumericRepresentation Unspecified;
    public static PixelFormatNumericRepresentation Indexed;
    public static PixelFormatNumericRepresentation UnsignedInteger;
    public static PixelFormatNumericRepresentation SignedInteger;
    public static PixelFormatNumericRepresentation Fixed;
    public static PixelFormatNumericRepresentation Float;
}
[GuidAttribute("F928B7B8-2221-40C1-B72E-7E82F1974D1A")]
public class SharpDX.WIC.PlanarBitmapFrameEncode : ComObject {
    public PlanarBitmapFrameEncode(IntPtr nativePtr);
    public static PlanarBitmapFrameEncode op_Explicit(IntPtr nativePtr);
    public void WritePixels(int lineCount, BitmapPlane[] planesRef, int planes);
    public void WriteSource(BitmapSource[] planesOut, int planes, Nullable`1<RawBox> rcSourceRef);
    public void WriteSource(ComArray`1<BitmapSource> planesOut, int planes, Nullable`1<RawBox> rcSourceRef);
    private void WriteSource(IntPtr planesOut, int planes, IntPtr rcSourceRef);
}
[GuidAttribute("3AFF9CCE-BE95-4303-B927-E7D16FF4A613")]
public class SharpDX.WIC.PlanarBitmapSourceTransform : ComObject {
    public PlanarBitmapSourceTransform(IntPtr nativePtr);
    public static PlanarBitmapSourceTransform op_Explicit(IntPtr nativePtr);
    public void DoesSupportTransform(Int32& widthRef, Int32& heightRef, BitmapTransformOptions dstTransform, PlanarOptions dstPlanarOptions, Guid[] guidDstFormatsRef, BitmapPlaneDescription[] planeDescriptionsRef, int planes, RawBool& fIsSupportedRef);
    public void CopyPixels(Nullable`1<RawBox> rcSourceRef, int width, int height, BitmapTransformOptions dstTransform, PlanarOptions dstPlanarOptions, BitmapPlane[] dstPlanesRef, int planes);
}
[GuidAttribute("BEBEE9CB-83B0-4DCC-8132-B0AAA55EAC96")]
public class SharpDX.WIC.PlanarFormatConverter : BitmapSource {
    public PlanarFormatConverter(IntPtr nativePtr);
    public static PlanarFormatConverter op_Explicit(IntPtr nativePtr);
    public void Initialize(BitmapSource[] planesOut, int planes, Guid dstFormat, BitmapDitherType dither, Palette paletteRef, double alphaThresholdPercent, BitmapPaletteType paletteTranslate);
    public void CanConvert(Guid[] srcPixelFormatsRef, int srcPlanes, Guid dstPixelFormat, RawBool& fCanConvertRef);
    public void Initialize(ComArray`1<BitmapSource> planesOut, int planes, Guid dstFormat, BitmapDitherType dither, Palette paletteRef, double alphaThresholdPercent, BitmapPaletteType paletteTranslate);
    private void Initialize(IntPtr planesOut, int planes, IntPtr dstFormat, BitmapDitherType dither, IntPtr paletteRef, double alphaThresholdPercent, BitmapPaletteType paletteTranslate);
}
public enum SharpDX.WIC.PlanarOptions : Enum {
    public int value__;
    public static PlanarOptions PlanarOptionsDefault;
    public static PlanarOptions PlanarOptionsPreserveSubsampling;
}
public class SharpDX.WIC.PngBitmapDecoder : BitmapDecoder {
    public PngBitmapDecoder(IntPtr nativePtr);
    public PngBitmapDecoder(ImagingFactory factory);
    public PngBitmapDecoder(ImagingFactory factory, Guid guidVendorRef);
}
public class SharpDX.WIC.PngBitmapEncoder : BitmapEncoder {
    public PngBitmapEncoder(IntPtr nativePtr);
    public PngBitmapEncoder(ImagingFactory factory);
    public PngBitmapEncoder(ImagingFactory factory, Stream stream);
    public PngBitmapEncoder(ImagingFactory factory, Guid guidVendorRef, Stream stream);
    public PngBitmapEncoder(ImagingFactory factory, WICStream stream);
    public PngBitmapEncoder(ImagingFactory factory, Guid guidVendorRef, WICStream stream);
}
public enum SharpDX.WIC.PngBkgdProperties : Enum {
    public int value__;
    public static PngBkgdProperties Color;
}
public enum SharpDX.WIC.PngChrmProperties : Enum {
    public int value__;
    public static PngChrmProperties WhitePointX;
    public static PngChrmProperties WhitePointY;
    public static PngChrmProperties RedX;
    public static PngChrmProperties RedY;
    public static PngChrmProperties GreenX;
    public static PngChrmProperties GreenY;
    public static PngChrmProperties BlueX;
    public static PngChrmProperties BlueY;
}
public enum SharpDX.WIC.PngFilterOption : Enum {
    public int value__;
    public static PngFilterOption Unspecified;
    public static PngFilterOption None;
    public static PngFilterOption Sub;
    public static PngFilterOption Up;
    public static PngFilterOption Average;
    public static PngFilterOption Paeth;
    public static PngFilterOption Adaptive;
}
public enum SharpDX.WIC.PngGamaProperties : Enum {
    public int value__;
    public static PngGamaProperties Gamma;
}
public enum SharpDX.WIC.PngHistProperties : Enum {
    public int value__;
    public static PngHistProperties Frequencies;
}
public enum SharpDX.WIC.PngIccpProperties : Enum {
    public int value__;
    public static PngIccpProperties ProfileName;
    public static PngIccpProperties ProfileData;
}
public enum SharpDX.WIC.PngItxtProperties : Enum {
    public int value__;
    public static PngItxtProperties Keyword;
    public static PngItxtProperties CompressionFlag;
    public static PngItxtProperties LanguageTag;
    public static PngItxtProperties TranslatedKeyword;
    public static PngItxtProperties Text;
}
public enum SharpDX.WIC.PngSrgbProperties : Enum {
    public int value__;
    public static PngSrgbProperties RenderingIntent;
}
public enum SharpDX.WIC.PngTimeProperties : Enum {
    public int value__;
    public static PngTimeProperties Year;
    public static PngTimeProperties Month;
    public static PngTimeProperties Day;
    public static PngTimeProperties Hour;
    public static PngTimeProperties Minute;
    public static PngTimeProperties Second;
}
[GuidAttribute("4776F9CD-9517-45FA-BF24-E89C5EC5C60C")]
internal class SharpDX.WIC.ProgressCallback : ComObject {
    public ProgressCallback(IntPtr nativePtr);
    public static ProgressCallback op_Explicit(IntPtr nativePtr);
    public void Notify(int frameNum, ProgressOperation operation, double dblProgress);
}
[GuidAttribute("DAAC296F-7AA5-4dbf-8D15-225C5976F891")]
public class SharpDX.WIC.ProgressiveLevelControl : ComObject {
    public int LevelCount { get; }
    public int CurrentLevel { get; public set; }
    public ProgressiveLevelControl(IntPtr nativePtr);
    public static ProgressiveLevelControl op_Explicit(IntPtr nativePtr);
    public int get_LevelCount();
    public int get_CurrentLevel();
    public void set_CurrentLevel(int value);
    internal void GetLevelCount(Int32& levelsRef);
    internal void GetCurrentLevel(Int32& nLevelRef);
    internal void SetCurrentLevel(int nLevel);
}
[FlagsAttribute]
public enum SharpDX.WIC.ProgressNotification : Enum {
    public int value__;
    public static ProgressNotification Begin;
    public static ProgressNotification End;
    public static ProgressNotification Frequent;
    public static ProgressNotification All;
}
[FlagsAttribute]
public enum SharpDX.WIC.ProgressOperation : Enum {
    public int value__;
    public static ProgressOperation CopyPixels;
    public static ProgressOperation WritePixels;
    public static ProgressOperation All;
}
public enum SharpDX.WIC.RawCapabilities : Enum {
    public int value__;
    public static RawCapabilities NotSupported;
    public static RawCapabilities GetSupported;
    public static RawCapabilities FullySupported;
}
public class SharpDX.WIC.RawCapabilitiesInfo : ValueType {
    public int CbSize;
    public int CodecMajorVersion;
    public int CodecMinorVersion;
    public RawCapabilities ExposureCompensationSupport;
    public RawCapabilities ContrastSupport;
    public RawCapabilities RGBWhitePointSupport;
    public RawCapabilities NamedWhitePointSupport;
    public int NamedWhitePointSupportMask;
    public RawCapabilities KelvinWhitePointSupport;
    public RawCapabilities GammaSupport;
    public RawCapabilities TintSupport;
    public RawCapabilities SaturationSupport;
    public RawCapabilities SharpnessSupport;
    public RawCapabilities NoiseReductionSupport;
    public RawCapabilities DestinationColorProfileSupport;
    public RawCapabilities ToneCurveSupport;
    public RawRotationCapabilities RotationSupport;
    public RawCapabilities RenderModeSupport;
}
public enum SharpDX.WIC.RawParameterSet : Enum {
    public int value__;
    public static RawParameterSet AsShot;
    public static RawParameterSet UserAdjusted;
    public static RawParameterSet AutoAdjusted;
}
public enum SharpDX.WIC.RawRenderMode : Enum {
    public int value__;
    public static RawRenderMode Draft;
    public static RawRenderMode Normal;
    public static RawRenderMode BestQuality;
}
public enum SharpDX.WIC.RawRotationCapabilities : Enum {
    public int value__;
    public static RawRotationCapabilities NotSupported;
    public static RawRotationCapabilities GetSupported;
    public static RawRotationCapabilities NinetyDegreesSupported;
    public static RawRotationCapabilities FullySupported;
}
public class SharpDX.WIC.RawToneCurve : ValueType {
    public int CPoints;
    internal RawToneCurvePoint[] _APoints;
    public RawToneCurvePoint[] APoints { get; private set; }
    public RawToneCurvePoint[] get_APoints();
    private void set_APoints(RawToneCurvePoint[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.WIC.RawToneCurvePoint : ValueType {
    public double Input;
    public double Output;
}
public class SharpDX.WIC.ResultCode : object {
    public static ResultDescriptor Base;
    public static ResultDescriptor GenericError;
    public static ResultDescriptor InvalidParameter;
    public static ResultDescriptor OufOfMemory;
    public static ResultDescriptor NotImplemented;
    public static ResultDescriptor Aborted;
    public static ResultDescriptor AccessDenied;
    public static ResultDescriptor Valueoverflow;
    public static ResultDescriptor WrongState;
    public static ResultDescriptor Valueoutofrange;
    public static ResultDescriptor Unknownimageformat;
    public static ResultDescriptor UnsupportedVersion;
    public static ResultDescriptor NotInitializeD;
    public static ResultDescriptor Alreadylocked;
    public static ResultDescriptor Propertynotfound;
    public static ResultDescriptor Propertynotsupported;
    public static ResultDescriptor Propertysize;
    public static ResultDescriptor Codecpresent;
    public static ResultDescriptor Codecnothumbnail;
    public static ResultDescriptor Paletteunavailable;
    public static ResultDescriptor Codectoomanyscanlines;
    public static ResultDescriptor Internalerror;
    public static ResultDescriptor SourceRectangleDoesnotmatchdimensions;
    public static ResultDescriptor Componentnotfound;
    public static ResultDescriptor Imagesizeoutofrange;
    public static ResultDescriptor TooMuchmetadata;
    public static ResultDescriptor Badimage;
    public static ResultDescriptor Badheader;
    public static ResultDescriptor FrameMissing;
    public static ResultDescriptor Badmetadataheader;
    public static ResultDescriptor Badstreamdata;
    public static ResultDescriptor StreamWrite;
    public static ResultDescriptor StreamRead;
    public static ResultDescriptor StreamNotAvailable;
    public static ResultDescriptor UnsupportedPixelFormat;
    public static ResultDescriptor UnsupportedOperation;
    public static ResultDescriptor InvalidRegistration;
    public static ResultDescriptor Componentinitializefailure;
    public static ResultDescriptor Insufficientbuffer;
    public static ResultDescriptor Duplicatemetadatapresent;
    public static ResultDescriptor Propertyunexpectedtype;
    public static ResultDescriptor UnexpectedSize;
    public static ResultDescriptor InvalidQueryRequest;
    public static ResultDescriptor UnexpectedMetadataType;
    public static ResultDescriptor Requestonlyvalidatmetadataroot;
    public static ResultDescriptor InvalidQueryCharacter;
    public static ResultDescriptor Win32error;
    public static ResultDescriptor InvalidProgressivelevel;
    public static ResultDescriptor InvalidJpegscanindex;
    private static ResultCode();
}
public enum SharpDX.WIC.SectionAccessLevel : Enum {
    public int value__;
    public static SectionAccessLevel Read;
    public static SectionAccessLevel ReadWrite;
}
public class SharpDX.WIC.TiffBitmapDecoder : BitmapDecoder {
    public TiffBitmapDecoder(IntPtr nativePtr);
    public TiffBitmapDecoder(ImagingFactory factory);
    public TiffBitmapDecoder(ImagingFactory factory, Guid guidVendorRef);
}
public class SharpDX.WIC.TiffBitmapEncoder : BitmapEncoder {
    public TiffBitmapEncoder(IntPtr nativePtr);
    public TiffBitmapEncoder(ImagingFactory factory);
    public TiffBitmapEncoder(ImagingFactory factory, Stream stream);
    public TiffBitmapEncoder(ImagingFactory factory, Guid guidVendorRef, Stream stream);
    public TiffBitmapEncoder(ImagingFactory factory, WICStream stream);
    public TiffBitmapEncoder(ImagingFactory factory, Guid guidVendorRef, WICStream stream);
}
public enum SharpDX.WIC.TiffCompressionOption : Enum {
    public int value__;
    public static TiffCompressionOption DontCare;
    public static TiffCompressionOption None;
    public static TiffCompressionOption CCITT3;
    public static TiffCompressionOption CCITT4;
    public static TiffCompressionOption LZW;
    public static TiffCompressionOption RLE;
    public static TiffCompressionOption ZIP;
    public static TiffCompressionOption LZWHDifferencing;
}
[GuidAttribute("135FF860-22B7-4ddf-B0F6-218F4F299A43")]
public class SharpDX.WIC.WICStream : ComStream {
    private ComStreamProxy streamProxy;
    public WICStream(ImagingFactory factory, string fileName, NativeFileAccess fileAccess);
    public WICStream(ImagingFactory factory, Stream stream);
    public WICStream(ImagingFactory factory, DataPointer dataStream);
    public WICStream(IntPtr nativePtr);
    protected virtual void Dispose(bool disposing);
    public static WICStream op_Explicit(IntPtr nativePtr);
    internal void InitializeFromIStream(IStream streamRef);
    internal void InitializeFromFilename(string fileName, int desiredAccess);
    internal void InitializeFromMemory(IntPtr bufferRef, int bufferSize);
    internal void InitializeFromIStreamRegion(IStream streamRef, long ulOffset, long ulMaxSize);
}
public class SharpDX.WIC.WmpBitmapDecoder : BitmapDecoder {
    public WmpBitmapDecoder(IntPtr nativePtr);
    public WmpBitmapDecoder(ImagingFactory factory);
    public WmpBitmapDecoder(ImagingFactory factory, Guid guidVendorRef);
}
public class SharpDX.WIC.WmpBitmapEncoder : BitmapEncoder {
    public WmpBitmapEncoder(IntPtr nativePtr);
    public WmpBitmapEncoder(ImagingFactory factory);
    public WmpBitmapEncoder(ImagingFactory factory, Stream stream);
    public WmpBitmapEncoder(ImagingFactory factory, Guid guidVendorRef, Stream stream);
    public WmpBitmapEncoder(ImagingFactory factory, WICStream stream);
    public WmpBitmapEncoder(ImagingFactory factory, Guid guidVendorRef, WICStream stream);
}
