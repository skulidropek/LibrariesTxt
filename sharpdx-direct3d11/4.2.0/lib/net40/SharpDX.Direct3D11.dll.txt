public class SharpDX.Direct3D11.AesCtrIv : ValueType {
    public long Iv;
    public long Count;
}
[CompilerGeneratedAttribute]
internal class SharpDX.Direct3D11.AssemblyDoc : object {
}
[GuidAttribute("4b35d0cd-1e15-4258-9c98-1b1333f6dd3b")]
public class SharpDX.Direct3D11.Asynchronous : DeviceChild {
    public int DataSize { get; }
    public Asynchronous(IntPtr nativePtr);
    public static Asynchronous op_Explicit(IntPtr nativePtr);
    public int get_DataSize();
    internal int GetDataSize();
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.AsynchronousFlags : Enum {
    public int value__;
    public static AsynchronousFlags DoNotFlush;
    public static AsynchronousFlags None;
}
[GuidAttribute("3015A308-DCBD-47aa-A747-192486D14D4A")]
public class SharpDX.Direct3D11.AuthenticatedChannel : DeviceChild {
    public int CertificateSize { get; }
    public IntPtr ChannelHandle { get; }
    public AuthenticatedChannel(IntPtr nativePtr);
    public static AuthenticatedChannel op_Explicit(IntPtr nativePtr);
    public int get_CertificateSize();
    public IntPtr get_ChannelHandle();
    internal void GetCertificateSize(Int32& certificateSizeRef);
    public void GetCertificate(int certificateSize, Byte[] certificateRef);
    internal void GetChannelHandle(IntPtr& channelHandleRef);
}
public enum SharpDX.Direct3D11.AuthenticatedChannelType : Enum {
    public int value__;
    public static AuthenticatedChannelType D3D11;
    public static AuthenticatedChannelType DriverSoftware;
    public static AuthenticatedChannelType DriverHardware;
}
public class SharpDX.Direct3D11.AuthenticatedConfigureAccessibleEncryptionInput : ValueType {
    public AuthenticatedConfigureInput Parameters;
    public Guid EncryptionGuid;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedConfigureCryptoSessionInput : ValueType {
    public AuthenticatedConfigureInput Parameters;
    public IntPtr DecoderHandle;
    public IntPtr CryptoSessionHandle;
    public IntPtr DeviceHandle;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedConfigureInitializeInput : ValueType {
    public AuthenticatedConfigureInput Parameters;
    public int StartSequenceQuery;
    public int StartSequenceConfigure;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedConfigureInput : ValueType {
    public MessageAuthenticationCode Omac;
    public Guid ConfigureType;
    public IntPtr HChannel;
    public int SequenceNumber;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedConfigureOutput : ValueType {
    public MessageAuthenticationCode Omac;
    public Guid ConfigureType;
    public IntPtr HChannel;
    public int SequenceNumber;
    public Result ReturnCode;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedConfigureProtectionInput : ValueType {
    public AuthenticatedConfigureInput Parameters;
    public AuthenticatedProtectionFlags Protections;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedConfigureSharedResourceInput : ValueType {
    public AuthenticatedConfigureInput Parameters;
    public AuthenticatedProcessIdentifierType ProcessType;
    public IntPtr ProcessHandle;
    public RawBool AllowAccess;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public enum SharpDX.Direct3D11.AuthenticatedProcessIdentifierType : Enum {
    public int value__;
    public static AuthenticatedProcessIdentifierType ProcessidtypeUnknown;
    public static AuthenticatedProcessIdentifierType ProcessidtypeDwm;
    public static AuthenticatedProcessIdentifierType ProcessidtypeHandle;
}
public class SharpDX.Direct3D11.AuthenticatedProtectionFlags : ValueType {
    public AuthenticatedProtectionFlagsMidlMidlItfD3d11000000340001Inner Flags;
    public int Value;
}
public class SharpDX.Direct3D11.AuthenticatedProtectionFlagsMidlMidlItfD3d11000000340001Inner : ValueType {
    internal int _ProtectionEnabled;
    internal int _OverlayOrFullscreenRequired;
    internal int _Reserved;
    public bool ProtectionEnabled { get; public set; }
    public bool OverlayOrFullscreenRequired { get; public set; }
    public int Reserved { get; public set; }
    public bool get_ProtectionEnabled();
    public void set_ProtectionEnabled(bool value);
    public bool get_OverlayOrFullscreenRequired();
    public void set_OverlayOrFullscreenRequired(bool value);
    public int get_Reserved();
    public void set_Reserved(int value);
}
public class SharpDX.Direct3D11.AuthenticatedQueryAccessibilityEncryptionGuidCountOutput : ValueType {
    public AuthenticatedQueryOutput Output;
    public int EncryptionGuidCount;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedQueryAccessibilityEncryptionGuidInput : ValueType {
    public AuthenticatedQueryInput Input;
    public int EncryptionGuidIndex;
}
public class SharpDX.Direct3D11.AuthenticatedQueryAccessibilityEncryptionGuidOutput : ValueType {
    public AuthenticatedQueryOutput Output;
    public int EncryptionGuidIndex;
    public Guid EncryptionGuid;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedQueryAcessibilityOutput : ValueType {
    public AuthenticatedQueryOutput Output;
    public BusType BusType;
    public RawBool AccessibleInContiguousBlocks;
    public RawBool AccessibleInNonContiguousBlocks;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedQueryChannelTypeOutput : ValueType {
    public AuthenticatedQueryOutput Output;
    public AuthenticatedChannelType ChannelType;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedQueryCryptoSessionInput : ValueType {
    public AuthenticatedQueryInput Input;
    public IntPtr DecoderHandle;
}
public class SharpDX.Direct3D11.AuthenticatedQueryCryptoSessionOutput : ValueType {
    public AuthenticatedQueryOutput Output;
    public IntPtr DecoderHandle;
    public IntPtr CryptoSessionHandle;
    public IntPtr DeviceHandle;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedQueryCurrentAccessibilityEncryptionOutput : ValueType {
    public AuthenticatedQueryOutput Output;
    public Guid EncryptionGuid;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedQueryDeviceHandleOutput : ValueType {
    public AuthenticatedQueryOutput Output;
    public IntPtr DeviceHandle;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedQueryInput : ValueType {
    public Guid QueryType;
    public IntPtr HChannel;
    public int SequenceNumber;
}
public class SharpDX.Direct3D11.AuthenticatedQueryOutput : ValueType {
    public MessageAuthenticationCode Omac;
    public Guid QueryType;
    public IntPtr HChannel;
    public int SequenceNumber;
    public Result ReturnCode;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedQueryOutputIdCountInput : ValueType {
    public AuthenticatedQueryInput Input;
    public IntPtr DeviceHandle;
    public IntPtr CryptoSessionHandle;
}
public class SharpDX.Direct3D11.AuthenticatedQueryOutputIdCountOutput : ValueType {
    public AuthenticatedQueryOutput Output;
    public IntPtr DeviceHandle;
    public IntPtr CryptoSessionHandle;
    public int OutputIDCount;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedQueryOutputIdInput : ValueType {
    public AuthenticatedQueryInput Input;
    public IntPtr DeviceHandle;
    public IntPtr CryptoSessionHandle;
    public int OutputIDIndex;
}
public class SharpDX.Direct3D11.AuthenticatedQueryOutputIdOutput : ValueType {
    public AuthenticatedQueryOutput Output;
    public IntPtr DeviceHandle;
    public IntPtr CryptoSessionHandle;
    public int OutputIDIndex;
    public long OutputID;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedQueryProtectionOutput : ValueType {
    public AuthenticatedQueryOutput Output;
    public AuthenticatedProtectionFlags ProtectionFlags;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedQueryRestrictedSharedResourceProcessCountOutput : ValueType {
    public AuthenticatedQueryOutput Output;
    public int RestrictedSharedResourceProcessCount;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedQueryRestrictedSharedResourceProcessInput : ValueType {
    public AuthenticatedQueryInput Input;
    public int ProcessIndex;
}
public class SharpDX.Direct3D11.AuthenticatedQueryRestrictedSharedResourceProcessOutput : ValueType {
    public AuthenticatedQueryOutput Output;
    public int ProcessIndex;
    public AuthenticatedProcessIdentifierType ProcessIdentifier;
    public IntPtr ProcessHandle;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.AuthenticatedQueryUnrestrictedProtectedSharedResourceCountOutput : ValueType {
    public AuthenticatedQueryOutput Output;
    public int UnrestrictedProtectedSharedResourceCount;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.BindFlags : Enum {
    public int value__;
    public static BindFlags VertexBuffer;
    public static BindFlags IndexBuffer;
    public static BindFlags ConstantBuffer;
    public static BindFlags ShaderResource;
    public static BindFlags StreamOutput;
    public static BindFlags RenderTarget;
    public static BindFlags DepthStencil;
    public static BindFlags UnorderedAccess;
    public static BindFlags Decoder;
    public static BindFlags VideoEncoder;
    public static BindFlags None;
}
public enum SharpDX.Direct3D11.BlendOperation : Enum {
    public int value__;
    public static BlendOperation Add;
    public static BlendOperation Subtract;
    public static BlendOperation ReverseSubtract;
    public static BlendOperation Minimum;
    public static BlendOperation Maximum;
}
public enum SharpDX.Direct3D11.BlendOption : Enum {
    public int value__;
    public static BlendOption Zero;
    public static BlendOption One;
    public static BlendOption SourceColor;
    public static BlendOption InverseSourceColor;
    public static BlendOption SourceAlpha;
    public static BlendOption InverseSourceAlpha;
    public static BlendOption DestinationAlpha;
    public static BlendOption InverseDestinationAlpha;
    public static BlendOption DestinationColor;
    public static BlendOption InverseDestinationColor;
    public static BlendOption SourceAlphaSaturate;
    public static BlendOption BlendFactor;
    public static BlendOption InverseBlendFactor;
    public static BlendOption SecondarySourceColor;
    public static BlendOption InverseSecondarySourceColor;
    public static BlendOption SecondarySourceAlpha;
    public static BlendOption InverseSecondarySourceAlpha;
}
[GuidAttribute("75b68faa-347d-4159-8f45-a0640f01cd9a")]
public class SharpDX.Direct3D11.BlendState : DeviceChild {
    public BlendStateDescription Description { get; }
    public BlendState(Device device, BlendStateDescription description);
    public BlendState(IntPtr nativePtr);
    public static BlendState op_Explicit(IntPtr nativePtr);
    public BlendStateDescription get_Description();
    internal void GetDescription(BlendStateDescription& descRef);
}
[GuidAttribute("cc86fabe-da55-401d-85e7-e3c9de2877e9")]
public class SharpDX.Direct3D11.BlendState1 : BlendState {
    public BlendStateDescription1 Description1 { get; }
    public BlendState1(Device1 device, BlendStateDescription1 description);
    public BlendState1(IntPtr nativePtr);
    public static BlendState1 op_Explicit(IntPtr nativePtr);
    public BlendStateDescription1 get_Description1();
    internal void GetDescription1(BlendStateDescription1& descRef);
}
public class SharpDX.Direct3D11.BlendStateDescription : ValueType {
    public RawBool AlphaToCoverageEnable;
    public RawBool IndependentBlendEnable;
    internal RenderTargetBlendDescription[] _RenderTarget;
    public RenderTargetBlendDescription[] RenderTarget { get; private set; }
    public static BlendStateDescription Default();
    public BlendStateDescription Clone();
    public RenderTargetBlendDescription[] get_RenderTarget();
    private void set_RenderTarget(RenderTargetBlendDescription[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.BlendStateDescription1 : ValueType {
    public RawBool AlphaToCoverageEnable;
    public RawBool IndependentBlendEnable;
    internal RenderTargetBlendDescription1[] _RenderTarget;
    public RenderTargetBlendDescription1[] RenderTarget { get; private set; }
    public static BlendStateDescription1 Default();
    public BlendStateDescription1 Clone();
    public RenderTargetBlendDescription1[] get_RenderTarget();
    private void set_RenderTarget(RenderTargetBlendDescription1[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[GuidAttribute("48570b85-d1ee-4fcd-a250-eb350722b037")]
public class SharpDX.Direct3D11.Buffer : Resource {
    public BufferDescription Description { get; }
    public Buffer(Device device, BufferDescription description);
    public Buffer(Device device, DataStream data, BufferDescription description);
    public Buffer(Device device, IntPtr dataPointer, BufferDescription description);
    public Buffer(Device device, int sizeInBytes, ResourceUsage usage, BindFlags bindFlags, CpuAccessFlags accessFlags, ResourceOptionFlags optionFlags, int structureByteStride);
    public Buffer(Device device, DataStream data, int sizeInBytes, ResourceUsage usage, BindFlags bindFlags, CpuAccessFlags accessFlags, ResourceOptionFlags optionFlags, int structureByteStride);
    public Buffer(IntPtr nativePtr);
    public static Buffer Create(Device device, BindFlags bindFlags, T& data, int sizeInBytes, ResourceUsage usage, CpuAccessFlags accessFlags, ResourceOptionFlags optionFlags, int structureByteStride);
    public static Buffer Create(Device device, BindFlags bindFlags, T[] data, int sizeInBytes, ResourceUsage usage, CpuAccessFlags accessFlags, ResourceOptionFlags optionFlags, int structureByteStride);
    public static Buffer Create(Device device, T& data, BufferDescription description);
    public static Buffer Create(Device device, T[] data, BufferDescription description);
    public static Buffer op_Explicit(IntPtr nativePtr);
    public BufferDescription get_Description();
    internal void GetDescription(BufferDescription& descRef);
}
public class SharpDX.Direct3D11.BufferDescription : ValueType {
    public int SizeInBytes;
    public ResourceUsage Usage;
    public BindFlags BindFlags;
    public CpuAccessFlags CpuAccessFlags;
    public ResourceOptionFlags OptionFlags;
    public int StructureByteStride;
    public BufferDescription(int sizeInBytes, ResourceUsage usage, BindFlags bindFlags, CpuAccessFlags cpuAccessFlags, ResourceOptionFlags optionFlags, int structureByteStride);
    public BufferDescription(int sizeInBytes, BindFlags bindFlags, ResourceUsage usage);
}
public enum SharpDX.Direct3D11.BusType : Enum {
    public int value__;
    public static BusType TypeOther;
    public static BusType TypePci;
    public static BusType TypePcix;
    public static BusType TypePciexpress;
    public static BusType TypeAgp;
    public static BusType ImplModifierInsideOfChipset;
    public static BusType ImplModifierTracksOnMotherBoardToChip;
    public static BusType ImplModifierTracksOnMotherBoardToSocket;
    public static BusType ImplModifierDaughterBoardConnector;
    public static BusType ImplModifierDaughterBoardConnectorInsideOfNuae;
    public static BusType ImplModifierNonStandard;
}
public class SharpDX.Direct3D11.Cd3d11VideoDefault : ValueType {
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.CheckMultisampleQualityLevelsFlags : Enum {
    public int value__;
    public static CheckMultisampleQualityLevelsFlags TiledResource;
    public static CheckMultisampleQualityLevelsFlags None;
}
[GuidAttribute("a6cd7faa-b0b7-4a2f-9436-8662a65797cb")]
public class SharpDX.Direct3D11.ClassInstance : DeviceChild {
    public string InstanceName { get; }
    public string TypeName { get; }
    public ClassLinkage ClassLinkage { get; }
    public ClassInstanceDescription Description { get; }
    public ClassInstance(ClassLinkage linkage, string classTypeName, int constantBufferOffset, int constantVectorOffset, int textureOffset, int samplerOffset);
    public ClassInstance(IntPtr nativePtr);
    public string get_InstanceName();
    public string get_TypeName();
    public static ClassInstance op_Explicit(IntPtr nativePtr);
    public ClassLinkage get_ClassLinkage();
    public ClassInstanceDescription get_Description();
    internal void GetClassLinkage(ClassLinkage& linkageOut);
    internal void GetDescription(ClassInstanceDescription& descRef);
    internal void GetInstanceName(IntPtr instanceNameRef, PointerSize& bufferLengthRef);
    internal void GetTypeName(IntPtr typeNameRef, PointerSize& bufferLengthRef);
}
public class SharpDX.Direct3D11.ClassInstanceDescription : ValueType {
    public int InstanceId;
    public int InstanceIndex;
    public int TypeId;
    public int ConstantBuffer;
    public int BaseConstantBufferOffset;
    public int BaseTexture;
    public int BaseSampler;
    public RawBool IsCreated;
}
[GuidAttribute("ddf57cba-9543-46e4-a12b-f207a0fe7fed")]
public class SharpDX.Direct3D11.ClassLinkage : DeviceChild {
    public ClassLinkage(Device device);
    public ClassLinkage(IntPtr nativePtr);
    public static ClassLinkage op_Explicit(IntPtr nativePtr);
    public ClassInstance GetClassInstance(string classInstanceNameRef, int instanceIndex);
    internal void CreateClassInstance(string classTypeNameRef, int constantBufferOffset, int constantVectorOffset, int textureOffset, int samplerOffset, ClassInstance instanceOut);
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.ColorWriteMaskFlags : Enum {
    public byte value__;
    public static ColorWriteMaskFlags Red;
    public static ColorWriteMaskFlags Green;
    public static ColorWriteMaskFlags Blue;
    public static ColorWriteMaskFlags Alpha;
    public static ColorWriteMaskFlags All;
}
[GuidAttribute("a24bc4d1-769e-43f7-8013-98ff566c18e2")]
public class SharpDX.Direct3D11.CommandList : DeviceChild {
    public CommandList(IntPtr nativePtr);
    public static CommandList op_Explicit(IntPtr nativePtr);
}
public abstract class SharpDX.Direct3D11.CommonShaderStage : CppObject {
    public static int ConstantBufferApiSlotCount;
    public static int ConstantBufferComponents;
    public static int ConstantBufferComponentBitCount;
    public static int ConstantBufferHwSlotCount;
    public static int ConstantBufferPartialUpdateExtentsByteAlignment;
    public static int ConstantBufferRegisterComponents;
    public static int ConstantBufferRegisterCount;
    public static int ConstantBufferRegisterReadsPerInst;
    public static int ConstantBufferRegisterReadPorts;
    public static int FlowcontrolNestingLimit;
    public static int ImmediateConstantBufferRegisterComponents;
    public static int ImmediateConstantBufferRegisterCount;
    public static int ImmediateConstantBufferRegisterReadsPerInst;
    public static int ImmediateConstantBufferRegisterReadPorts;
    public static int ImmediateValueComponentBitCount;
    public static int InputResourceRegisterComponents;
    public static int InputResourceRegisterCount;
    public static int InputResourceRegisterReadsPerInst;
    public static int InputResourceRegisterReadPorts;
    public static int InputResourceSlotCount;
    public static int SamplerRegisterComponents;
    public static int SamplerRegisterCount;
    public static int SamplerRegisterReadsPerInst;
    public static int SamplerRegisterReadPorts;
    public static int SamplerSlotCount;
    public static int SubRoutineNestingLimit;
    public static int TempRegisterComponents;
    public static int TempRegisterComponentBitCount;
    public static int TempRegisterCount;
    public static int TempRegisterReadsPerInst;
    public static int TempRegisterReadPorts;
    public static int TextureCoordRangeReductionMaximum;
    public static int TextureCoordRangeReductionMinimum;
    public static int TextureElOffsetMaximumNegative;
    public static int TextureElOffsetMaximumPositive;
    protected CommonShaderStage(IntPtr pointer);
    public Buffer[] GetConstantBuffers(int startSlot, int count);
    public SamplerState[] GetSamplers(int startSlot, int count);
    public ShaderResourceView[] GetShaderResources(int startSlot, int count);
    public void SetConstantBuffer(int slot, Buffer constantBuffer);
    public void SetConstantBuffers(int slot, Buffer[] constantBuffers);
    public void SetConstantBuffers(int slot, ComArray`1<Buffer> constantBuffers);
    public void SetSampler(int slot, SamplerState sampler);
    public void SetSamplers(int slot, SamplerState[] samplers);
    public void SetSamplers(int slot, ComArray`1<SamplerState> samplers);
    public void SetShaderResource(int slot, ShaderResourceView resourceView);
    public void SetShaderResources(int startSlot, ShaderResourceView[] shaderResourceViews);
    public void SetShaderResources(int startSlot, ComArray`1<ShaderResourceView> shaderResourceViews);
    internal abstract virtual void GetShaderResources(int startSlot, int numViews, ShaderResourceView[] shaderResourceViewsRef);
    internal abstract virtual void GetSamplers(int startSlot, int numSamplers, SamplerState[] samplersRef);
    internal abstract virtual void GetConstantBuffers(int startSlot, int numBuffers, Buffer[] constantBuffersRef);
    public void SetShaderResources(int startSlot, int numViews, ShaderResourceView[] shaderResourceViews);
    public void SetShaderResources(int startSlot, int numViews, ComArray`1<ShaderResourceView> shaderResourceViewsRef);
    internal abstract virtual void SetShaderResources(int startSlot, int numViews, IntPtr shaderResourceViewsRef);
    public void SetSamplers(int startSlot, int numSamplers, SamplerState[] samplers);
    public void SetSamplers(int startSlot, int numSamplers, ComArray`1<SamplerState> samplers);
    internal abstract virtual void SetSamplers(int startSlot, int numSamplers, IntPtr samplersRef);
    public void SetConstantBuffers(int startSlot, int numBuffers, Buffer[] constantBuffers);
    public void SetConstantBuffers(int startSlot, int numBuffers, ComArray`1<Buffer> constantBuffers);
    internal abstract virtual void SetConstantBuffers(int startSlot, int numBuffers, IntPtr constantBuffersRef);
    public abstract virtual void SetShader(DeviceChild shader, ClassInstance[] classInstancesOut, int numClassInstances);
    internal abstract virtual void SetUnorderedAccessViews(int startSlot, int numBuffers, IntPtr unorderedAccessBuffer, IntPtr uavCount);
}
public abstract class SharpDX.Direct3D11.CommonShaderStage`1 : CommonShaderStage {
    protected CommonShaderStage`1(IntPtr pointer);
    public T Get();
    public T Get(ClassInstance[] classInstances);
    public void Set(T shader);
    public void Set(T shader, ClassInstance[] classInstances);
    public void Set(T shader, ComArray`1<ClassInstance> classInstances);
    public virtual void SetShader(DeviceChild shader, ClassInstance[] classInstancesOut, int numClassInstances);
    internal virtual void SetUnorderedAccessViews(int startSlot, int numBuffers, IntPtr unorderedAccessBuffer, IntPtr uavCount);
    internal abstract virtual void SetShader(T shaderRef, ClassInstance[] classInstancesRef, int numClassInstances);
    internal abstract virtual void SetShader(T shaderRef, ComArray`1<ClassInstance> classInstancesRef, int numClassInstances);
    internal abstract virtual void GetShader(T& pixelShaderRef, ClassInstance[] classInstancesRef, Int32& numClassInstancesRef);
}
public enum SharpDX.Direct3D11.Comparison : Enum {
    public int value__;
    public static Comparison Never;
    public static Comparison Less;
    public static Comparison Equal;
    public static Comparison LessEqual;
    public static Comparison Greater;
    public static Comparison NotEqual;
    public static Comparison GreaterEqual;
    public static Comparison Always;
}
[GuidAttribute("4f5b196e-c2bd-495e-bd01-1fded38e4969")]
public class SharpDX.Direct3D11.ComputeShader : DeviceChild {
    public ComputeShader(Device device, Byte[] shaderBytecode, ClassLinkage linkage);
    public ComputeShader(IntPtr nativePtr);
    public static ComputeShader op_Explicit(IntPtr nativePtr);
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.ComputeShaderFormatSupport : Enum {
    public int value__;
    public static ComputeShaderFormatSupport AtomicAdd;
    public static ComputeShaderFormatSupport AtomicBitwiseOperations;
    public static ComputeShaderFormatSupport AtomicCompareStoreOrCompareExchange;
    public static ComputeShaderFormatSupport AtomicExchange;
    public static ComputeShaderFormatSupport AtomicSignedMinimumOrMaximum;
    public static ComputeShaderFormatSupport AtomicUnsignedMinimumOrMaximum;
    public static ComputeShaderFormatSupport TypedLoad;
    public static ComputeShaderFormatSupport TypedStore;
    public static ComputeShaderFormatSupport OutputMergerLogicOperation;
    public static ComputeShaderFormatSupport Tiled;
    public static ComputeShaderFormatSupport Shareable;
    public static ComputeShaderFormatSupport MultiplaneOverlay;
    public static ComputeShaderFormatSupport None;
}
[GuidAttribute("c0bfa96c-e089-44fb-8eaf-26f8796190da")]
public class SharpDX.Direct3D11.ComputeShaderStage : CommonShaderStage`1<ComputeShader> {
    public static int UnorderedAccessViewSlotCount;
    public static int DispatchMaximumThreadGroupsPerDimension;
    public static int ThreadGroupSharedMemoryRegisterCount;
    public static int ThreadGroupSharedMemoryRegisterReadsPerInst;
    public static int ThreadGroupSharedMemoryResourceRegisterComponents;
    public static int ThreadGroupSharedMemoryResourceRegisterReadPorts;
    public static int ThreadgroupidRegisterComponents;
    public static int ThreadgroupidRegisterCount;
    public static int ThreadidingroupflattenedRegisterComponents;
    public static int ThreadidingroupflattenedRegisterCount;
    public static int ThreadidingroupRegisterComponents;
    public static int ThreadidingroupRegisterCount;
    public static int ThreadidRegisterComponents;
    public static int ThreadidRegisterCount;
    public static int ThreadGroupMaximumThreadsPerGroup;
    public static int ThreadGroupMaximumX;
    public static int ThreadGroupMaximumY;
    public static int ThreadGroupMaximumZ;
    public static int ThreadGroupMinimumX;
    public static int ThreadGroupMinimumY;
    public static int ThreadGroupMinimumZ;
    public static int ThreadLocalTempRegisterPool;
    public ComputeShaderStage(IntPtr nativePtr);
    public UnorderedAccessView[] GetUnorderedAccessViews(int startSlot, int count);
    public void SetUnorderedAccessView(int startSlot, UnorderedAccessView unorderedAccessView);
    public void SetUnorderedAccessView(int startSlot, UnorderedAccessView unorderedAccessView, int uavInitialCount);
    public void SetUnorderedAccessViews(int startSlot, UnorderedAccessView[] unorderedAccessViews);
    public void SetUnorderedAccessViews(int startSlot, UnorderedAccessView[] unorderedAccessViews, Int32[] uavInitialCounts);
    public static ComputeShaderStage op_Explicit(IntPtr nativePtr);
    internal virtual void SetShaderResources(int startSlot, int numViews, IntPtr shaderResourceViewsOut);
    internal virtual void SetUnorderedAccessViews(int startSlot, int numUAVs, IntPtr unorderedAccessViewsOut, IntPtr uAVInitialCountsRef);
    internal virtual void SetShader(ComputeShader computeShaderRef, ClassInstance[] classInstancesOut, int numClassInstances);
    internal virtual void SetSamplers(int startSlot, int numSamplers, IntPtr samplersOut);
    internal virtual void SetConstantBuffers(int startSlot, int numBuffers, IntPtr constantBuffersOut);
    internal virtual void GetShaderResources(int startSlot, int numViews, ShaderResourceView[] shaderResourceViewsOut);
    internal void GetUnorderedAccessViews(int startSlot, int numUAVs, UnorderedAccessView[] unorderedAccessViewsOut);
    internal virtual void GetShader(ComputeShader& computeShaderOut, ClassInstance[] classInstancesOut, Int32& numClassInstancesRef);
    internal virtual void GetSamplers(int startSlot, int numSamplers, SamplerState[] samplersOut);
    internal virtual void GetConstantBuffers(int startSlot, int numBuffers, Buffer[] constantBuffersOut);
    internal virtual void SetShader(ComputeShader computeShaderRef, ComArray`1<ClassInstance> classInstancesOut, int numClassInstances);
    private void SetShader(IntPtr computeShaderRef, IntPtr classInstancesOut, int numClassInstances);
}
public enum SharpDX.Direct3D11.ConservativeRasterizationMode : Enum {
    public int value__;
    public static ConservativeRasterizationMode Off;
    public static ConservativeRasterizationMode On;
}
public enum SharpDX.Direct3D11.ConservativeRasterizationTier : Enum {
    public int value__;
    public static ConservativeRasterizationTier NotSupported;
    public static ConservativeRasterizationTier Tier1;
    public static ConservativeRasterizationTier Tier2;
    public static ConservativeRasterizationTier Tier3;
}
public enum SharpDX.Direct3D11.ContentProtectionCaps : Enum {
    public int value__;
    public static ContentProtectionCaps Software;
    public static ContentProtectionCaps Hardware;
    public static ContentProtectionCaps ProtectionAlwaysOn;
    public static ContentProtectionCaps PartialDecryption;
    public static ContentProtectionCaps ContentKey;
    public static ContentProtectionCaps FreshenSessionKey;
    public static ContentProtectionCaps EncryptedReadBack;
    public static ContentProtectionCaps EncryptedReadBackKey;
    public static ContentProtectionCaps SequentialCtrIv;
    public static ContentProtectionCaps EncryptSlicedataOnly;
    public static ContentProtectionCaps DecryptionBlit;
    public static ContentProtectionCaps HardwareProtectUncompressed;
    public static ContentProtectionCaps HardwareProtectedMemoryPageable;
    public static ContentProtectionCaps HardwareTeardown;
    public static ContentProtectionCaps HardwareDrmCommunication;
}
public enum SharpDX.Direct3D11.ContextType : Enum {
    public int value__;
    public static ContextType All;
    public static ContextType ThreeDimensions;
    public static ContextType Compute;
    public static ContextType Copy;
    public static ContextType Video;
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.CopyFlags : Enum {
    public int value__;
    public static CopyFlags NoOverwrite;
    public static CopyFlags Discard;
    public static CopyFlags None;
}
[GuidAttribute("6e8c49fb-a371-4770-b440-29086022b741")]
public class SharpDX.Direct3D11.Counter : Asynchronous {
    public CounterDescription Description { get; }
    public Counter(Device device, CounterDescription description);
    public Counter(IntPtr nativePtr);
    public static Counter op_Explicit(IntPtr nativePtr);
    public CounterDescription get_Description();
    internal void GetDescription(CounterDescription& descRef);
}
public class SharpDX.Direct3D11.CounterCapabilities : ValueType {
    public CounterKind LastDeviceDependentCounter;
    public int SimultaneousCounterCount;
    public byte DetectableParallelUnitCount;
}
public class SharpDX.Direct3D11.CounterDescription : ValueType {
    public CounterKind Counter;
    public int MiscFlags;
}
public enum SharpDX.Direct3D11.CounterKind : Enum {
    public int value__;
    public static CounterKind DeviceDependent0;
}
public class SharpDX.Direct3D11.CounterMetadata : object {
    [CompilerGeneratedAttribute]
private CounterType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HardwareCounterCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Units>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public CounterType Type { get; internal set; }
    public int HardwareCounterCount { get; internal set; }
    public string Name { get; internal set; }
    public string Units { get; internal set; }
    public string Description { get; internal set; }
    [CompilerGeneratedAttribute]
public CounterType get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(CounterType value);
    [CompilerGeneratedAttribute]
public int get_HardwareCounterCount();
    [CompilerGeneratedAttribute]
internal void set_HardwareCounterCount(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Units();
    [CompilerGeneratedAttribute]
internal void set_Units(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
internal void set_Description(string value);
}
public enum SharpDX.Direct3D11.CounterType : Enum {
    public int value__;
    public static CounterType Float32;
    public static CounterType UInt16;
    public static CounterType UInt32;
    public static CounterType UInt64;
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.CpuAccessFlags : Enum {
    public int value__;
    public static CpuAccessFlags Write;
    public static CpuAccessFlags Read;
    public static CpuAccessFlags None;
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.CreateDeviceContextStateFlags : Enum {
    public int value__;
    public static CreateDeviceContextStateFlags SingleThreaded;
    public static CreateDeviceContextStateFlags None;
}
[GuidAttribute("9B32F9AD-BDCC-40a6-A39D-D5C865845720")]
public class SharpDX.Direct3D11.CryptoSession : DeviceChild {
    public Guid CryptoType { get; }
    public Guid DecoderProfile { get; }
    public int CertificateSize { get; }
    public IntPtr CryptoSessionHandle { get; }
    public CryptoSession(IntPtr nativePtr);
    public static CryptoSession op_Explicit(IntPtr nativePtr);
    public Guid get_CryptoType();
    public Guid get_DecoderProfile();
    public int get_CertificateSize();
    public IntPtr get_CryptoSessionHandle();
    internal void GetCryptoType(Guid& cryptoTypeRef);
    internal void GetDecoderProfile(Guid& decoderProfileRef);
    internal void GetCertificateSize(Int32& certificateSizeRef);
    public void GetCertificate(int certificateSize, Byte[] certificateRef);
    internal void GetCryptoSessionHandle(IntPtr& cryptoSessionHandleRef);
}
public enum SharpDX.Direct3D11.CryptoSessionStatus : Enum {
    public int value__;
    public static CryptoSessionStatus Ok;
    public static CryptoSessionStatus KeyLost;
    public static CryptoSessionStatus KeyAndContentLost;
}
public enum SharpDX.Direct3D11.CullMode : Enum {
    public int value__;
    public static CullMode None;
    public static CullMode Front;
    public static CullMode Back;
}
internal static class SharpDX.Direct3D11.D3D11 : object {
    public static int SdkVersion;
    public static Result CreateDevice(Adapter adapterRef, DriverType driverType, IntPtr software, DeviceCreationFlags flags, FeatureLevel[] featureLevelsRef, int featureLevels, int sDKVersion, Device deviceOut, FeatureLevel& featureLevelRef, DeviceContext& immediateContextOut);
    private static int D3D11CreateDevice_(Void* param0, int param1, Void* param2, int param3, Void* param4, int param5, int param6, Void* param7, Void* param8, Void* param9);
    public static void On12CreateDevice(IUnknown deviceRef, DeviceCreationFlags flags, FeatureLevel[] featureLevelsRef, int featureLevels, IUnknown[] commandQueuesOut, int numQueues, int nodeMask, Device& deviceOut, DeviceContext& immediateContextOut, FeatureLevel& chosenFeatureLevelRef);
    private static int D3D11On12CreateDevice_(Void* param0, int param1, Void* param2, int param3, Void* param4, int param5, int param6, Void* param7, Void* param8, Void* param9);
}
public class SharpDX.Direct3D11.D3D11ResourceFlags : ValueType {
    public int BindFlags;
    public int MiscFlags;
    public int CPUAccessFlags;
    public int StructureByteStride;
}
internal static class SharpDX.Direct3D11.D3DCSX : object {
}
internal static class SharpDX.Direct3D11.D3DX11 : object {
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.DebugFeatureFlags : Enum {
    public int value__;
    public static DebugFeatureFlags FlushPerRender;
    public static DebugFeatureFlags FinishPerRender;
    public static DebugFeatureFlags PresentPerRender;
    public static DebugFeatureFlags AlwaysDiscardOfferedResource;
    public static DebugFeatureFlags NeverDiscardOfferedResource;
    public static DebugFeatureFlags AvoidBehaviorChangingDebugAids;
    public static DebugFeatureFlags DisableTiledResourceMappingTrackingAndValidation;
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.DepthStencilClearFlags : Enum {
    public int value__;
    public static DepthStencilClearFlags Depth;
    public static DepthStencilClearFlags Stencil;
}
public class SharpDX.Direct3D11.DepthStencilOperationDescription : ValueType {
    public StencilOperation FailOperation;
    public StencilOperation DepthFailOperation;
    public StencilOperation PassOperation;
    public Comparison Comparison;
}
[GuidAttribute("03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1")]
public class SharpDX.Direct3D11.DepthStencilState : DeviceChild {
    public DepthStencilStateDescription Description { get; }
    public DepthStencilState(Device device, DepthStencilStateDescription description);
    public DepthStencilState(IntPtr nativePtr);
    public static DepthStencilState op_Explicit(IntPtr nativePtr);
    public DepthStencilStateDescription get_Description();
    internal void GetDescription(DepthStencilStateDescription& descRef);
}
public class SharpDX.Direct3D11.DepthStencilStateDescription : ValueType {
    public RawBool IsDepthEnabled;
    public DepthWriteMask DepthWriteMask;
    public Comparison DepthComparison;
    public RawBool IsStencilEnabled;
    public byte StencilReadMask;
    public byte StencilWriteMask;
    public DepthStencilOperationDescription FrontFace;
    public DepthStencilOperationDescription BackFace;
    public static DepthStencilStateDescription Default();
}
[GuidAttribute("9fdac92a-1876-48c3-afad-25b94f84a9b6")]
public class SharpDX.Direct3D11.DepthStencilView : ResourceView {
    public DepthStencilViewDescription Description { get; }
    public DepthStencilView(Device device, Resource resource);
    public DepthStencilView(Device device, Resource resource, DepthStencilViewDescription description);
    public DepthStencilView(IntPtr nativePtr);
    public static DepthStencilView op_Explicit(IntPtr nativePtr);
    public DepthStencilViewDescription get_Description();
    internal void GetDescription(DepthStencilViewDescription& descRef);
}
public class SharpDX.Direct3D11.DepthStencilViewDescription : ValueType {
    public Format Format;
    public DepthStencilViewDimension Dimension;
    public DepthStencilViewFlags Flags;
    public Texture1DResource Texture1D;
    public Texture1DArrayResource Texture1DArray;
    public Texture2DResource Texture2D;
    public Texture2DArrayResource Texture2DArray;
    public Texture2DMultisampledResource Texture2DMS;
    public Texture2DMultisampledArrayResource Texture2DMSArray;
}
public enum SharpDX.Direct3D11.DepthStencilViewDimension : Enum {
    public int value__;
    public static DepthStencilViewDimension Unknown;
    public static DepthStencilViewDimension Texture1D;
    public static DepthStencilViewDimension Texture1DArray;
    public static DepthStencilViewDimension Texture2D;
    public static DepthStencilViewDimension Texture2DArray;
    public static DepthStencilViewDimension Texture2DMultisampled;
    public static DepthStencilViewDimension Texture2DMultisampledArray;
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.DepthStencilViewFlags : Enum {
    public int value__;
    public static DepthStencilViewFlags ReadOnlyDepth;
    public static DepthStencilViewFlags ReadOnlyStencil;
    public static DepthStencilViewFlags None;
}
public enum SharpDX.Direct3D11.DepthWriteMask : Enum {
    public int value__;
    public static DepthWriteMask Zero;
    public static DepthWriteMask All;
}
[GuidAttribute("db6f6ddb-ac77-4e88-8253-819df9bbf140")]
public class SharpDX.Direct3D11.Device : ComObject {
    public static int MultisampleCountMaximum;
    protected internal DeviceContext ImmediateContext__;
    public bool IsReferenceDevice { get; }
    public string DebugName { get; public set; }
    public FeatureLevel FeatureLevel { get; }
    public DeviceCreationFlags CreationFlags { get; }
    public Result DeviceRemovedReason { get; }
    public DeviceContext ImmediateContext { get; }
    public int ExceptionMode { get; public set; }
    public Device(DriverType driverType);
    public Device(Adapter adapter);
    public Device(DriverType driverType, DeviceCreationFlags flags);
    public Device(Adapter adapter, DeviceCreationFlags flags);
    public Device(DriverType driverType, DeviceCreationFlags flags, FeatureLevel[] featureLevels);
    public Device(Adapter adapter, DeviceCreationFlags flags, FeatureLevel[] featureLevels);
    public Device(IntPtr nativePtr);
    public static void CreateWithSwapChain(DriverType driverType, DeviceCreationFlags flags, SwapChainDescription swapChainDescription, Device& device, SwapChain& swapChain);
    public static void CreateWithSwapChain(Adapter adapter, DeviceCreationFlags flags, SwapChainDescription swapChainDescription, Device& device, SwapChain& swapChain);
    public static void CreateWithSwapChain(DriverType driverType, DeviceCreationFlags flags, FeatureLevel[] featureLevels, SwapChainDescription swapChainDescription, Device& device, SwapChain& swapChain);
    public static void CreateWithSwapChain(Adapter adapter, DeviceCreationFlags flags, FeatureLevel[] featureLevels, SwapChainDescription swapChainDescription, Device& device, SwapChain& swapChain);
    private static void CreateWithSwapChain(Adapter adapter, DriverType driverType, DeviceCreationFlags flags, FeatureLevel[] featureLevels, SwapChainDescription swapChainDescription, Device& device, SwapChain& swapChain);
    public CounterMetadata GetCounterMetadata(CounterDescription counterDescription);
    public T OpenSharedResource(IntPtr resourceHandle);
    public ComputeShaderFormatSupport CheckComputeShaderFormatSupport(Format format);
    public FeatureDataD3D11Options CheckD3D11Feature();
    public FeatureDataShaderMinimumPrecisionSupport CheckShaderMinimumPrecisionSupport();
    public bool CheckFullNonPow2TextureSupport();
    public bool CheckTileBasedDeferredRendererSupport();
    public FeatureDataD3D11Options1 CheckD3D112Feature();
    public FeatureDataD3D11Options2 CheckD3D113Features2();
    public FeatureDataD3D11Options3 CheckD3D113Features3();
    public FeatureDataD3D11Options4 CheckD3D113Features4();
    public bool CheckFeatureSupport(Feature feature);
    public Result CheckThreadingSupport(Boolean& supportsConcurrentResources, Boolean& supportsCommandLists);
    public static bool IsSupportedFeatureLevel(FeatureLevel featureLevel);
    public static bool IsSupportedFeatureLevel(Adapter adapter, FeatureLevel featureLevel);
    public static FeatureLevel GetSupportedFeatureLevel();
    public static FeatureLevel GetSupportedFeatureLevel(Adapter adapter);
    public bool get_IsReferenceDevice();
    public string get_DebugName();
    public void set_DebugName(string value);
    protected virtual void Dispose(bool disposing);
    private void CreateDevice(Adapter adapter, DriverType driverType, DeviceCreationFlags flags, FeatureLevel[] featureLevels);
    public static Device CreateFromDirect3D12(ComObject d3D12Device, DeviceCreationFlags flags, FeatureLevel[] featureLevels, Adapter adapter, ComObject[] commandQueues);
    public static Device op_Explicit(IntPtr nativePtr);
    public FeatureLevel get_FeatureLevel();
    public DeviceCreationFlags get_CreationFlags();
    public Result get_DeviceRemovedReason();
    public DeviceContext get_ImmediateContext();
    public int get_ExceptionMode();
    public void set_ExceptionMode(int value);
    internal void CreateBuffer(BufferDescription& descRef, Nullable`1<DataBox> initialDataRef, Buffer bufferOut);
    internal void CreateTexture1D(Texture1DDescription& descRef, DataBox[] initialDataRef, Texture1D texture1DOut);
    internal void CreateTexture2D(Texture2DDescription& descRef, DataBox[] initialDataRef, Texture2D texture2DOut);
    internal void CreateTexture3D(Texture3DDescription& descRef, DataBox[] initialDataRef, Texture3D texture3DOut);
    internal void CreateShaderResourceView(Resource resourceRef, Nullable`1<ShaderResourceViewDescription> descRef, ShaderResourceView sRViewOut);
    internal void CreateUnorderedAccessView(Resource resourceRef, Nullable`1<UnorderedAccessViewDescription> descRef, UnorderedAccessView uAViewOut);
    internal void CreateRenderTargetView(Resource resourceRef, Nullable`1<RenderTargetViewDescription> descRef, RenderTargetView rTViewOut);
    internal void CreateDepthStencilView(Resource resourceRef, Nullable`1<DepthStencilViewDescription> descRef, DepthStencilView depthStencilViewOut);
    internal void CreateInputLayout(InputElement[] inputElementDescsRef, int numElements, IntPtr shaderBytecodeWithInputSignatureRef, PointerSize bytecodeLength, InputLayout inputLayoutOut);
    internal void CreateVertexShader(IntPtr shaderBytecodeRef, PointerSize bytecodeLength, ClassLinkage classLinkageRef, VertexShader vertexShaderOut);
    internal void CreateGeometryShader(IntPtr shaderBytecodeRef, PointerSize bytecodeLength, ClassLinkage classLinkageRef, GeometryShader geometryShaderOut);
    internal void CreateGeometryShaderWithStreamOutput(IntPtr shaderBytecodeRef, PointerSize bytecodeLength, StreamOutputElement[] sODeclarationRef, int numEntries, Int32[] bufferStridesRef, int numStrides, int rasterizedStream, ClassLinkage classLinkageRef, GeometryShader geometryShaderOut);
    internal void CreatePixelShader(IntPtr shaderBytecodeRef, PointerSize bytecodeLength, ClassLinkage classLinkageRef, PixelShader pixelShaderOut);
    internal void CreateHullShader(IntPtr shaderBytecodeRef, PointerSize bytecodeLength, ClassLinkage classLinkageRef, HullShader hullShaderOut);
    internal void CreateDomainShader(IntPtr shaderBytecodeRef, PointerSize bytecodeLength, ClassLinkage classLinkageRef, DomainShader domainShaderOut);
    internal void CreateComputeShader(IntPtr shaderBytecodeRef, PointerSize bytecodeLength, ClassLinkage classLinkageRef, ComputeShader computeShaderOut);
    internal void CreateClassLinkage(ClassLinkage linkageOut);
    internal void CreateBlendState(BlendStateDescription& blendStateDescRef, BlendState blendStateOut);
    internal void CreateDepthStencilState(DepthStencilStateDescription& depthStencilDescRef, DepthStencilState depthStencilStateOut);
    internal void CreateRasterizerState(RasterizerStateDescription& rasterizerDescRef, RasterizerState rasterizerStateOut);
    internal void CreateSamplerState(SamplerStateDescription& samplerDescRef, SamplerState samplerStateOut);
    internal void CreateQuery(QueryDescription queryDescRef, Query queryOut);
    internal void CreatePredicate(QueryDescription predicateDescRef, Predicate predicateOut);
    internal void CreateCounter(CounterDescription counterDescRef, Counter counterOut);
    internal void CreateDeferredContext(int contextFlags, DeviceContext deferredContextOut);
    internal void OpenSharedResource(IntPtr hResource, Guid returnedInterface, IntPtr& resourceOut);
    public FormatSupport CheckFormatSupport(Format format);
    public int CheckMultisampleQualityLevels(Format format, int sampleCount);
    public CounterCapabilities GetCounterCapabilities();
    internal void CheckCounter(CounterDescription descRef, CounterType& typeRef, Int32& activeCountersRef, IntPtr szName, IntPtr nameLengthRef, IntPtr szUnits, IntPtr unitsLengthRef, IntPtr szDescription, IntPtr descriptionLengthRef);
    internal Result CheckFeatureSupport(Feature feature, IntPtr featureSupportDataRef, int featureSupportDataSize);
    public Result GetPrivateData(Guid guid, Int32& dataSizeRef, IntPtr dataRef);
    public void SetPrivateData(Guid guid, int dataSize, IntPtr dataRef);
    public void SetPrivateDataInterface(Guid guid, IUnknown dataRef);
    internal FeatureLevel GetFeatureLevel();
    internal DeviceCreationFlags GetCreationFlags();
    internal Result GetDeviceRemovedReason();
    internal void GetImmediateContext(DeviceContext& immediateContextOut);
    internal void SetExceptionMode(int raiseFlags);
    internal int GetExceptionMode();
}
[GuidAttribute("a04bfb29-08ef-43d6-a49c-a9bdbdcbe686")]
public class SharpDX.Direct3D11.Device1 : Device {
    protected internal DeviceContext1 ImmediateContext1__;
    public DeviceContext1 ImmediateContext1 { get; }
    public Device1(IntPtr nativePtr);
    public DeviceContextState CreateDeviceContextState(CreateDeviceContextStateFlags flags, FeatureLevel[] featureLevelsRef, FeatureLevel& chosenFeatureLevelRef);
    public T OpenSharedResource1(IntPtr resourceHandle);
    public T OpenSharedResource1(string name, SharedResourceFlags desiredAccess);
    protected virtual void Dispose(bool disposing);
    public static Device1 op_Explicit(IntPtr nativePtr);
    public DeviceContext1 get_ImmediateContext1();
    internal void GetImmediateContext1(DeviceContext1& immediateContextOut);
    internal void CreateDeferredContext1(int contextFlags, DeviceContext1 deferredContextOut);
    internal void CreateBlendState1(BlendStateDescription1& blendStateDescRef, BlendState1 blendStateOut);
    internal void CreateRasterizerState1(RasterizerStateDescription1& rasterizerDescRef, RasterizerState1 rasterizerStateOut);
    internal void CreateDeviceContextState(CreateDeviceContextStateFlags flags, FeatureLevel[] featureLevelsRef, int featureLevels, int sDKVersion, Guid emulatedInterface, FeatureLevel& chosenFeatureLevelRef, DeviceContextState contextStateOut);
    internal void OpenSharedResource1(IntPtr hResource, Guid returnedInterface, IntPtr& resourceOut);
    internal void OpenSharedResourceByName(string lpName, SharedResourceFlags dwDesiredAccess, Guid returnedInterface, IntPtr& resourceOut);
}
[GuidAttribute("85611e73-70a9-490e-9614-a9e302777904")]
public class SharpDX.Direct3D11.Device11On12 : ComObject {
    public Device11On12(IntPtr nativePtr);
    public static Device11On12 op_Explicit(IntPtr nativePtr);
    public void CreateWrappedResource(IUnknown resource12Ref, D3D11ResourceFlags flags11Ref, int inState, int outState, Guid riid, Resource& resource11Out);
    public void ReleaseWrappedResources(Resource[] resourcesOut, int numResources);
    public void AcquireWrappedResources(Resource[] resourcesOut, int numResources);
    public void ReleaseWrappedResources(ComArray`1<Resource> resourcesOut, int numResources);
    private void ReleaseWrappedResources(IntPtr resourcesOut, int numResources);
    public void AcquireWrappedResources(ComArray`1<Resource> resourcesOut, int numResources);
    private void AcquireWrappedResources(IntPtr resourcesOut, int numResources);
}
[GuidAttribute("9d06dffa-d1e5-4d07-83a8-1bb123f2f841")]
public class SharpDX.Direct3D11.Device2 : Device1 {
    protected internal DeviceContext2 ImmediateContext2__;
    public DeviceContext2 ImmediateContext2 { get; }
    public Device2(IntPtr nativePtr);
    protected virtual void Dispose(bool disposing);
    public static Device2 op_Explicit(IntPtr nativePtr);
    public DeviceContext2 get_ImmediateContext2();
    internal void GetImmediateContext2(DeviceContext2& immediateContextOut);
    internal void CreateDeferredContext2(int contextFlags, DeviceContext2 deferredContextOut);
    public void GetResourceTiling(Resource tiledResourceRef, Int32& numTilesForEntireResourceRef, PackedMipDescription& packedMipDescRef, TileShape& standardTileShapeForNonPackedMipsRef, Int32& numSubresourceTilingsRef, int firstSubresourceTilingToGet, SubResourceTiling[] subresourceTilingsForNonPackedMipsRef);
    public int CheckMultisampleQualityLevels1(Format format, int sampleCount, CheckMultisampleQualityLevelsFlags flags);
}
[GuidAttribute("A05C8C37-D2C6-4732-B3A0-9CE0B0DC9AE6")]
public class SharpDX.Direct3D11.Device3 : Device2 {
    protected internal DeviceContext3 ImmediateContext3__;
    public DeviceContext3 ImmediateContext3 { get; }
    public Device3(IntPtr nativePtr);
    protected virtual void Dispose(bool disposing);
    public static Device3 op_Explicit(IntPtr nativePtr);
    public DeviceContext3 get_ImmediateContext3();
    internal void CreateTexture2D1(Texture2DDescription1& desc1Ref, DataBox[] initialDataRef, Texture2D1 texture2DOut);
    internal void CreateTexture3D1(Texture3DDescription1& desc1Ref, DataBox[] initialDataRef, Texture3D1 texture3DOut);
    internal void CreateRasterizerState2(RasterizerStateDescription2& rasterizerDescRef, RasterizerState2 rasterizerStateOut);
    internal void CreateShaderResourceView1(Resource resourceRef, Nullable`1<ShaderResourceViewDescription1> desc1Ref, ShaderResourceView1 sRView1Out);
    internal void CreateUnorderedAccessView1(Resource resourceRef, Nullable`1<UnorderedAccessViewDescription1> desc1Ref, UnorderedAccessView1 uAView1Out);
    internal void CreateRenderTargetView1(Resource resourceRef, Nullable`1<RenderTargetViewDescription1> desc1Ref, RenderTargetView1 rTView1Out);
    internal void CreateQuery1(QueryDescription1 queryDesc1Ref, Query1 query1Out);
    internal void GetImmediateContext3(DeviceContext3& immediateContextOut);
    internal void CreateDeferredContext3(int contextFlags, DeviceContext3 deferredContextOut);
    public void WriteToSubresource(Resource dstResourceRef, int dstSubresource, Nullable`1<ResourceRegion> dstBoxRef, IntPtr srcDataRef, int srcRowPitch, int srcDepthPitch);
    public void ReadFromSubresource(IntPtr dstDataRef, int dstRowPitch, int dstDepthPitch, Resource srcResourceRef, int srcSubresource, Nullable`1<ResourceRegion> srcBoxRef);
}
[GuidAttribute("8992ab71-02e6-4b8d-ba48-b056dcda42c4")]
public class SharpDX.Direct3D11.Device4 : Device3 {
    public Device4(IntPtr nativePtr);
    public static Device4 op_Explicit(IntPtr nativePtr);
    public int RegisterDeviceRemovedEvent(IntPtr hEvent);
    public void UnregisterDeviceRemoved(int dwCookie);
}
[GuidAttribute("8ffde202-a0e7-45df-9e01-e837801b5ea0")]
public class SharpDX.Direct3D11.Device5 : Device4 {
    public Device5(IntPtr nativePtr);
    public Fence OpenSharedFence(IntPtr resourceHandle);
    public static Device5 op_Explicit(IntPtr nativePtr);
    internal void OpenSharedFence(IntPtr hFence, Guid returnedInterface, IntPtr& fenceOut);
    internal void CreateFence(long initialValue, FenceFlags flags, Guid returnedInterface, Fence fenceOut);
}
[GuidAttribute("1841e5c8-16b0-489b-bcc8-44cfb0d5deae")]
public class SharpDX.Direct3D11.DeviceChild : ComObject {
    protected internal Device Device__;
    public string DebugName { get; public set; }
    public Device Device { get; }
    public DeviceChild(IntPtr nativePtr);
    public string get_DebugName();
    public void set_DebugName(string value);
    protected virtual void NativePointerUpdated(IntPtr oldNativePointer);
    protected virtual void Dispose(bool disposing);
    private void DisposeDevice();
    public static DeviceChild op_Explicit(IntPtr nativePtr);
    public Device get_Device();
    internal void GetDevice(Device& deviceOut);
    public Result GetPrivateData(Guid guid, Int32& dataSizeRef, IntPtr dataRef);
    public void SetPrivateData(Guid guid, int dataSize, IntPtr dataRef);
    public void SetPrivateDataInterface(Guid guid, IUnknown dataRef);
}
[GuidAttribute("c0bfa96c-e089-44fb-8eaf-26f8796190da")]
public class SharpDX.Direct3D11.DeviceContext : DeviceChild {
    private bool isCheckThreadingSupport;
    private bool supportsCommandLists;
    [CompilerGeneratedAttribute]
private VertexShaderStage <VertexShader>k__BackingField;
    [CompilerGeneratedAttribute]
private PixelShaderStage <PixelShader>k__BackingField;
    [CompilerGeneratedAttribute]
private InputAssemblerStage <InputAssembler>k__BackingField;
    [CompilerGeneratedAttribute]
private GeometryShaderStage <GeometryShader>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputMergerStage <OutputMerger>k__BackingField;
    [CompilerGeneratedAttribute]
private StreamOutputStage <StreamOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private RasterizerStage <Rasterizer>k__BackingField;
    [CompilerGeneratedAttribute]
private HullShaderStage <HullShader>k__BackingField;
    [CompilerGeneratedAttribute]
private DomainShaderStage <DomainShader>k__BackingField;
    [CompilerGeneratedAttribute]
private ComputeShaderStage <ComputeShader>k__BackingField;
    public VertexShaderStage VertexShader { get; private set; }
    public PixelShaderStage PixelShader { get; private set; }
    public InputAssemblerStage InputAssembler { get; private set; }
    public GeometryShaderStage GeometryShader { get; private set; }
    public OutputMergerStage OutputMerger { get; private set; }
    public StreamOutputStage StreamOutput { get; private set; }
    public RasterizerStage Rasterizer { get; private set; }
    public HullShaderStage HullShader { get; private set; }
    public DomainShaderStage DomainShader { get; private set; }
    public ComputeShaderStage ComputeShader { get; private set; }
    public DeviceContextType TypeInfo { get; }
    public int ContextFlags { get; }
    public DeviceContext(Device device);
    public DeviceContext(IntPtr nativePtr);
    public CommandList FinishCommandList(bool restoreState);
    public bool IsDataAvailable(Asynchronous data);
    public bool IsDataAvailable(Asynchronous data, AsynchronousFlags flags);
    public DataStream GetData(Asynchronous data);
    public T GetData(Asynchronous data);
    public bool GetData(Asynchronous data, T& result);
    public DataStream GetData(Asynchronous data, AsynchronousFlags flags);
    public T GetData(Asynchronous data, AsynchronousFlags flags);
    public bool GetData(Asynchronous data, AsynchronousFlags flags, T& result);
    public void CopyResource(Resource source, Resource destination);
    public void CopySubresourceRegion(Resource source, int sourceSubresource, Nullable`1<ResourceRegion> sourceRegion, Resource destination, int destinationSubResource, int dstX, int dstY, int dstZ);
    public void ResolveSubresource(Resource source, int sourceSubresource, Resource destination, int destinationSubresource, Format format);
    public DataBox MapSubresource(Texture1D resource, int mipSlice, int arraySlice, MapMode mode, MapFlags flags, DataStream& stream);
    public DataBox MapSubresource(Texture2D resource, int mipSlice, int arraySlice, MapMode mode, MapFlags flags, DataStream& stream);
    public DataBox MapSubresource(Texture3D resource, int mipSlice, int arraySlice, MapMode mode, MapFlags flags, DataStream& stream);
    public DataBox MapSubresource(Buffer resource, MapMode mode, MapFlags flags, DataStream& stream);
    public DataBox MapSubresource(Resource resource, int mipSlice, int arraySlice, MapMode mode, MapFlags flags, Int32& mipSize);
    public DataBox MapSubresource(Resource resource, int subresource, MapMode mode, MapFlags flags, DataStream& stream);
    public DataBox MapSubresource(Resource resourceRef, int subresource, MapMode mapType, MapFlags mapFlags);
    public void UpdateSubresource(T& data, Resource resource, int subresource, int rowPitch, int depthPitch, Nullable`1<ResourceRegion> region);
    public void UpdateSubresource(T[] data, Resource resource, int subresource, int rowPitch, int depthPitch, Nullable`1<ResourceRegion> region);
    public void UpdateSubresource(DataBox source, Resource resource, int subresource);
    public void UpdateSubresource(DataBox source, Resource resource, int subresource, ResourceRegion region);
    public void UpdateSubresourceSafe(T& data, Resource resource, int srcBytesPerElement, int subresource, int rowPitch, int depthPitch, bool isCompressedResource);
    public void UpdateSubresourceSafe(T[] data, Resource resource, int srcBytesPerElement, int subresource, int rowPitch, int depthPitch, bool isCompressedResource);
    public void UpdateSubresourceSafe(DataBox source, Resource resource, int srcBytesPerElement, int subresource, bool isCompressedResource);
    public void UpdateSubresourceSafe(DataBox source, Resource resource, int srcBytesPerElement, int subresource, ResourceRegion region, bool isCompressedResource);
    internal bool UpdateSubresourceSafe(Resource dstResourceRef, int dstSubresource, Nullable`1<ResourceRegion> dstBoxRef, IntPtr pSrcData, int srcRowPitch, int srcDepthPitch, int srcBytesPerElement, bool isCompressedResource);
    public static DeviceContext op_Explicit(IntPtr nativePtr);
    protected virtual void NativePointerUpdated(IntPtr oldPointer);
    [CompilerGeneratedAttribute]
public VertexShaderStage get_VertexShader();
    [CompilerGeneratedAttribute]
private void set_VertexShader(VertexShaderStage value);
    [CompilerGeneratedAttribute]
public PixelShaderStage get_PixelShader();
    [CompilerGeneratedAttribute]
private void set_PixelShader(PixelShaderStage value);
    [CompilerGeneratedAttribute]
public InputAssemblerStage get_InputAssembler();
    [CompilerGeneratedAttribute]
private void set_InputAssembler(InputAssemblerStage value);
    [CompilerGeneratedAttribute]
public GeometryShaderStage get_GeometryShader();
    [CompilerGeneratedAttribute]
private void set_GeometryShader(GeometryShaderStage value);
    [CompilerGeneratedAttribute]
public OutputMergerStage get_OutputMerger();
    [CompilerGeneratedAttribute]
private void set_OutputMerger(OutputMergerStage value);
    [CompilerGeneratedAttribute]
public StreamOutputStage get_StreamOutput();
    [CompilerGeneratedAttribute]
private void set_StreamOutput(StreamOutputStage value);
    [CompilerGeneratedAttribute]
public RasterizerStage get_Rasterizer();
    [CompilerGeneratedAttribute]
private void set_Rasterizer(RasterizerStage value);
    [CompilerGeneratedAttribute]
public HullShaderStage get_HullShader();
    [CompilerGeneratedAttribute]
private void set_HullShader(HullShaderStage value);
    [CompilerGeneratedAttribute]
public DomainShaderStage get_DomainShader();
    [CompilerGeneratedAttribute]
private void set_DomainShader(DomainShaderStage value);
    [CompilerGeneratedAttribute]
public ComputeShaderStage get_ComputeShader();
    [CompilerGeneratedAttribute]
private void set_ComputeShader(ComputeShaderStage value);
    public DeviceContextType get_TypeInfo();
    public int get_ContextFlags();
    public void DrawIndexed(int indexCount, int startIndexLocation, int baseVertexLocation);
    public void Draw(int vertexCount, int startVertexLocation);
    internal Result MapSubresource(Resource resourceRef, int subresource, MapMode mapType, MapFlags mapFlags, DataBox& mappedResourceRef);
    public void UnmapSubresource(Resource resourceRef, int subresource);
    public void DrawIndexedInstanced(int indexCountPerInstance, int instanceCount, int startIndexLocation, int baseVertexLocation, int startInstanceLocation);
    public void DrawInstanced(int vertexCountPerInstance, int instanceCount, int startVertexLocation, int startInstanceLocation);
    public void Begin(Asynchronous asyncRef);
    public void End(Asynchronous asyncRef);
    internal Result GetDataInternal(Asynchronous asyncRef, IntPtr dataRef, int dataSize, AsynchronousFlags getDataFlags);
    public void SetPredication(Predicate predicateRef, RawBool predicateValue);
    public void DrawAuto();
    public void DrawIndexedInstancedIndirect(Buffer bufferForArgsRef, int alignedByteOffsetForArgs);
    public void DrawInstancedIndirect(Buffer bufferForArgsRef, int alignedByteOffsetForArgs);
    public void Dispatch(int threadGroupCountX, int threadGroupCountY, int threadGroupCountZ);
    public void DispatchIndirect(Buffer bufferForArgsRef, int alignedByteOffsetForArgs);
    internal void CopySubresourceRegion_(Resource dstResourceRef, int dstSubresource, int dstX, int dstY, int dstZ, Resource srcResourceRef, int srcSubresource, Nullable`1<ResourceRegion> srcBoxRef);
    internal void CopyResource_(Resource dstResourceRef, Resource srcResourceRef);
    public void UpdateSubresource(Resource dstResourceRef, int dstSubresource, Nullable`1<ResourceRegion> dstBoxRef, IntPtr srcDataRef, int srcRowPitch, int srcDepthPitch);
    public void CopyStructureCount(Buffer dstBufferRef, int dstAlignedByteOffset, UnorderedAccessView srcViewRef);
    public void ClearRenderTargetView(RenderTargetView renderTargetViewRef, RawColor4 colorRGBA);
    public void ClearUnorderedAccessView(UnorderedAccessView unorderedAccessViewRef, RawInt4 values);
    public void ClearUnorderedAccessView(UnorderedAccessView unorderedAccessViewRef, RawVector4 values);
    public void ClearDepthStencilView(DepthStencilView depthStencilViewRef, DepthStencilClearFlags clearFlags, float depth, byte stencil);
    public void GenerateMips(ShaderResourceView shaderResourceViewRef);
    public void SetMinimumLod(Resource resourceRef, float minLOD);
    public float GetMinimumLod(Resource resourceRef);
    internal void ResolveSubresource_(Resource dstResourceRef, int dstSubresource, Resource srcResourceRef, int srcSubresource, Format format);
    public void ExecuteCommandList(CommandList commandListRef, RawBool restoreContextState);
    public Predicate GetPredication(RawBool& predicateValueRef);
    public void ClearState();
    public void Flush();
    internal DeviceContextType GetTypeInfo();
    internal int GetContextFlags();
    internal void FinishCommandListInternal(RawBool restoreDeferredContextState, CommandList& commandListOut);
}
[GuidAttribute("bb2c6faa-b5fb-4082-8e6b-388b8cfa90e1")]
public class SharpDX.Direct3D11.DeviceContext1 : DeviceContext {
    public DeviceContext1(Device1 device);
    public DeviceContext1(IntPtr nativePtr);
    public void ClearView(ResourceView viewRef, RawColor4 color, RawRectangle[] rectangles);
    public static DeviceContext1 op_Explicit(IntPtr nativePtr);
    public void CopySubresourceRegion1(Resource dstResourceRef, int dstSubresource, int dstX, int dstY, int dstZ, Resource srcResourceRef, int srcSubresource, Nullable`1<ResourceRegion> srcBoxRef, int copyFlags);
    public void UpdateSubresource1(Resource dstResourceRef, int dstSubresource, Nullable`1<ResourceRegion> dstBoxRef, IntPtr srcDataRef, int srcRowPitch, int srcDepthPitch, int copyFlags);
    public void DiscardResource(Resource resourceRef);
    public void DiscardView(ResourceView resourceViewRef);
    public void VSSetConstantBuffers1(int startSlot, int numBuffers, Buffer[] constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    public void HSSetConstantBuffers1(int startSlot, int numBuffers, Buffer[] constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    public void DSSetConstantBuffers1(int startSlot, int numBuffers, Buffer[] constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    public void GSSetConstantBuffers1(int startSlot, int numBuffers, Buffer[] constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    public void PSSetConstantBuffers1(int startSlot, int numBuffers, Buffer[] constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    public void CSSetConstantBuffers1(int startSlot, int numBuffers, Buffer[] constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    public void VSGetConstantBuffers1(int startSlot, int numBuffers, Buffer[] constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    public void HSGetConstantBuffers1(int startSlot, int numBuffers, Buffer[] constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    public void DSGetConstantBuffers1(int startSlot, int numBuffers, Buffer[] constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    public void GSGetConstantBuffers1(int startSlot, int numBuffers, Buffer[] constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    public void PSGetConstantBuffers1(int startSlot, int numBuffers, Buffer[] constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    public void CSGetConstantBuffers1(int startSlot, int numBuffers, Buffer[] constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    public void SwapDeviceContextState(DeviceContextState stateRef, DeviceContextState& previousStateOut);
    public void ClearView(ResourceView viewRef, RawColor4 color, RawRectangle[] rectRef, int numRects);
    public void DiscardView1(ResourceView resourceViewRef, RawRectangle[] rectsRef, int numRects);
    public void VSSetConstantBuffers1(int startSlot, int numBuffers, ComArray`1<Buffer> constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    private void VSSetConstantBuffers1(int startSlot, int numBuffers, IntPtr constantBuffersOut, IntPtr firstConstantRef, IntPtr numConstantsRef);
    public void HSSetConstantBuffers1(int startSlot, int numBuffers, ComArray`1<Buffer> constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    private void HSSetConstantBuffers1(int startSlot, int numBuffers, IntPtr constantBuffersOut, IntPtr firstConstantRef, IntPtr numConstantsRef);
    public void DSSetConstantBuffers1(int startSlot, int numBuffers, ComArray`1<Buffer> constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    private void DSSetConstantBuffers1(int startSlot, int numBuffers, IntPtr constantBuffersOut, IntPtr firstConstantRef, IntPtr numConstantsRef);
    public void GSSetConstantBuffers1(int startSlot, int numBuffers, ComArray`1<Buffer> constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    private void GSSetConstantBuffers1(int startSlot, int numBuffers, IntPtr constantBuffersOut, IntPtr firstConstantRef, IntPtr numConstantsRef);
    public void PSSetConstantBuffers1(int startSlot, int numBuffers, ComArray`1<Buffer> constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    private void PSSetConstantBuffers1(int startSlot, int numBuffers, IntPtr constantBuffersOut, IntPtr firstConstantRef, IntPtr numConstantsRef);
    public void CSSetConstantBuffers1(int startSlot, int numBuffers, ComArray`1<Buffer> constantBuffersOut, Int32[] firstConstantRef, Int32[] numConstantsRef);
    private void CSSetConstantBuffers1(int startSlot, int numBuffers, IntPtr constantBuffersOut, IntPtr firstConstantRef, IntPtr numConstantsRef);
}
[GuidAttribute("420d5b32-b90c-4da4-bef0-359f6a24a83a")]
public class SharpDX.Direct3D11.DeviceContext2 : DeviceContext1 {
    public RawBool IsAnnotationEnabled { get; }
    public DeviceContext2(Device2 device);
    public DeviceContext2(IntPtr nativePtr);
    public static DeviceContext2 op_Explicit(IntPtr nativePtr);
    public RawBool get_IsAnnotationEnabled();
    public void UpdateTileMappings(Resource tiledResourceRef, int numTiledResourceRegions, TiledResourceCoordinate[] tiledResourceRegionStartCoordinatesRef, TileRegionSize[] tiledResourceRegionSizesRef, Buffer tilePoolRef, int numRanges, TileRangeFlags[] rangeFlagsRef, Int32[] tilePoolStartOffsetsRef, Int32[] rangeTileCountsRef, TileMappingFlags flags);
    public void CopyTileMappings(Resource destTiledResourceRef, TiledResourceCoordinate destRegionStartCoordinateRef, Resource sourceTiledResourceRef, TiledResourceCoordinate sourceRegionStartCoordinateRef, TileRegionSize tileRegionSizeRef, TileMappingFlags flags);
    public void CopyTiles(Resource tiledResourceRef, TiledResourceCoordinate tileRegionStartCoordinateRef, TileRegionSize tileRegionSizeRef, Buffer bufferRef, long bufferStartOffsetInBytes, TileMappingFlags flags);
    public void UpdateTiles(Resource destTiledResourceRef, TiledResourceCoordinate destTileRegionStartCoordinateRef, TileRegionSize destTileRegionSizeRef, IntPtr sourceTileDataRef, TileMappingFlags flags);
    public void ResizeTilePool(Buffer tilePoolRef, long newSizeInBytes);
    public void TiledResourceBarrier(DeviceChild tiledResourceOrViewAccessBeforeBarrierRef, DeviceChild tiledResourceOrViewAccessAfterBarrierRef);
    internal RawBool IsAnnotationEnabled_();
    public void SetMarkerInt(string labelRef, int data);
    public void BeginEventInt(string labelRef, int data);
    public void EndEvent();
}
[GuidAttribute("b4e3c01d-e79e-4637-91b2-510e9f4c9b8f")]
public class SharpDX.Direct3D11.DeviceContext3 : DeviceContext2 {
    public RawBool HardwareProtectionState { get; public set; }
    public DeviceContext3(Device3 device);
    public DeviceContext3(IntPtr nativePtr);
    public static DeviceContext3 op_Explicit(IntPtr nativePtr);
    public RawBool get_HardwareProtectionState();
    public void set_HardwareProtectionState(RawBool value);
    public void Flush1(ContextType contextType, IntPtr hEvent);
    internal void SetHardwareProtectionState(RawBool hwProtectionEnable);
    internal void GetHardwareProtectionState(RawBool& hwProtectionEnableRef);
}
[GuidAttribute("917600da-f58c-4c33-98d8-3e15b390fa24")]
public class SharpDX.Direct3D11.DeviceContext4 : DeviceContext3 {
    public DeviceContext4(IntPtr nativePtr);
    public static DeviceContext4 op_Explicit(IntPtr nativePtr);
    public void Signal(Fence fenceRef, long value);
    public void Wait(Fence fenceRef, long value);
}
[GuidAttribute("5c1e0d8a-7c23-48f9-8c59-a92958ceff11")]
public class SharpDX.Direct3D11.DeviceContextState : DeviceChild {
    public DeviceContextState(IntPtr nativePtr);
    public static DeviceContextState op_Explicit(IntPtr nativePtr);
}
public enum SharpDX.Direct3D11.DeviceContextType : Enum {
    public int value__;
    public static DeviceContextType Immediate;
    public static DeviceContextType Deferred;
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.DeviceCreationFlags : Enum {
    public int value__;
    public static DeviceCreationFlags SingleThreaded;
    public static DeviceCreationFlags Debug;
    public static DeviceCreationFlags SwitchToRef;
    public static DeviceCreationFlags PreventThreadingOptimizations;
    public static DeviceCreationFlags BgraSupport;
    public static DeviceCreationFlags Debuggable;
    public static DeviceCreationFlags PreventAlteringLayerSettingsFromRegistry;
    public static DeviceCreationFlags DisableGpuTimeout;
    public static DeviceCreationFlags VideoSupport;
    public static DeviceCreationFlags None;
}
[GuidAttribute("79cf2233-7536-4948-9d36-1e4692dc5760")]
public class SharpDX.Direct3D11.DeviceDebug : ComObject {
    public DebugFeatureFlags FeatureFlags { get; public set; }
    public int PresentDelay { get; public set; }
    public SwapChain SwapChain { get; public set; }
    public DeviceDebug(Device device);
    public DeviceDebug(IntPtr nativePtr);
    public DebugFeatureFlags get_FeatureFlags();
    public void set_FeatureFlags(DebugFeatureFlags value);
    public static DeviceDebug op_Explicit(IntPtr nativePtr);
    public int get_PresentDelay();
    public void set_PresentDelay(int value);
    public SwapChain get_SwapChain();
    public void set_SwapChain(SwapChain value);
    internal void SetFeatureFlags(int mask);
    internal int GetFeatureFlags();
    internal void SetPresentDelay(int milliseconds);
    internal int GetPresentDelay();
    internal void SetSwapChain(SwapChain swapChainRef);
    internal void GetSwapChain(SwapChain& swapChainOut);
    public void ValidateContext(DeviceContext contextRef);
    public void ReportLiveDeviceObjects(ReportingLevel flags);
    public void ValidateContextForDispatch(DeviceContext contextRef);
}
[GuidAttribute("f582c508-0f36-490c-9977-31eece268cfa")]
public class SharpDX.Direct3D11.DomainShader : DeviceChild {
    public DomainShader(Device device, Byte[] shaderBytecode, ClassLinkage linkage);
    public DomainShader(IntPtr nativePtr);
    public static DomainShader op_Explicit(IntPtr nativePtr);
}
[GuidAttribute("c0bfa96c-e089-44fb-8eaf-26f8796190da")]
public class SharpDX.Direct3D11.DomainShaderStage : CommonShaderStage`1<DomainShader> {
    public DomainShaderStage(IntPtr nativePtr);
    public static DomainShaderStage op_Explicit(IntPtr nativePtr);
    internal virtual void SetShaderResources(int startSlot, int numViews, IntPtr shaderResourceViewsOut);
    internal virtual void SetShader(DomainShader domainShaderRef, ClassInstance[] classInstancesOut, int numClassInstances);
    internal virtual void SetSamplers(int startSlot, int numSamplers, IntPtr samplersOut);
    internal virtual void SetConstantBuffers(int startSlot, int numBuffers, IntPtr constantBuffersOut);
    internal virtual void GetShaderResources(int startSlot, int numViews, ShaderResourceView[] shaderResourceViewsOut);
    internal virtual void GetShader(DomainShader& domainShaderOut, ClassInstance[] classInstancesOut, Int32& numClassInstancesRef);
    internal virtual void GetSamplers(int startSlot, int numSamplers, SamplerState[] samplersOut);
    internal virtual void GetConstantBuffers(int startSlot, int numBuffers, Buffer[] constantBuffersOut);
    internal virtual void SetShader(DomainShader domainShaderRef, ComArray`1<ClassInstance> classInstancesOut, int numClassInstances);
    private void SetShader(IntPtr domainShaderRef, IntPtr classInstancesOut, int numClassInstances);
}
public class SharpDX.Direct3D11.DrawIndexedInstancedIndirectArguments : ValueType {
    public int IndexCountPerInstance;
    public int InstanceCount;
    public int StartIndexLocation;
    public int BaseVertexLocation;
    public int StartInstanceLocation;
}
public class SharpDX.Direct3D11.DrawInstancedIndirectArguments : ValueType {
    public int VertexCountPerInstance;
    public int InstanceCount;
    public int StartVertexLocation;
    public int StartInstanceLocation;
}
public class SharpDX.Direct3D11.EncryptedBlockInformation : ValueType {
    public int NumEncryptedBytesAtBeginning;
    public int NumBytesInSkipPattern;
    public int NumBytesInEncryptPattern;
}
public enum SharpDX.Direct3D11.Feature : Enum {
    public int value__;
    public static Feature Threading;
    public static Feature ShaderDoubles;
    public static Feature FormatSupport;
    public static Feature ComputeShaders;
    public static Feature D3D10XHardwareOptions;
    public static Feature D3D11Options;
    public static Feature ArchitectureInformation;
    public static Feature D3D9Options;
    public static Feature ShaderMinimumPrecisionSupport;
    public static Feature D3D9ShadowSupport;
    public static Feature D3D11Options1;
    public static Feature D3D9SimpleInstancingSupport;
    public static Feature MarkerSupport;
    public static Feature D3D9Options1;
    public static Feature D3D11Options2;
    public static Feature D3D11Options3;
    public static Feature GpuVirtualAddressSupport;
    public static Feature D3D11Options4;
    public static Feature ShaderCache;
}
internal class SharpDX.Direct3D11.FeatureDataArchitectureInformation : ValueType {
    public RawBool TileBasedDeferredRenderer;
}
internal class SharpDX.Direct3D11.FeatureDataD3D10XHardwareOptions : ValueType {
    public RawBool ComputeShadersPlusRawAndStructuredBuffersViaShader4X;
}
public class SharpDX.Direct3D11.FeatureDataD3D11Options : ValueType {
    public RawBool OutputMergerLogicOp;
    public RawBool UAVOnlyRenderingForcedSampleCount;
    public RawBool DiscardAPIsSeenByDriver;
    public RawBool FlagsForUpdateAndCopySeenByDriver;
    public RawBool ClearView;
    public RawBool CopyWithOverlap;
    public RawBool ConstantBufferPartialUpdate;
    public RawBool ConstantBufferOffsetting;
    public RawBool MapNoOverwriteOnDynamicConstantBuffer;
    public RawBool MapNoOverwriteOnDynamicBufferSRV;
    public RawBool MultisampleRTVWithForcedSampleCountOne;
    public RawBool SAD4ShaderInstructions;
    public RawBool ExtendedDoublesShaderInstructions;
    public RawBool ExtendedResourceSharing;
}
public class SharpDX.Direct3D11.FeatureDataD3D11Options1 : ValueType {
    public TiledResourcesTier TiledResourcesTier;
    public RawBool MinMaxFiltering;
    public RawBool ClearViewAlsoSupportsDepthOnlyFormats;
    public RawBool MapOnDefaultBuffers;
}
public class SharpDX.Direct3D11.FeatureDataD3D11Options2 : ValueType {
    public RawBool PSSpecifiedStencilRefSupported;
    public RawBool TypedUAVLoadAdditionalFormats;
    public RawBool ROVsSupported;
    public ConservativeRasterizationTier ConservativeRasterizationTier;
    public TiledResourcesTier TiledResourcesTier;
    public RawBool MapOnDefaultTextures;
    public RawBool StandardSwizzle;
    public RawBool UnifiedMemoryArchitecture;
}
public class SharpDX.Direct3D11.FeatureDataD3D11Options3 : ValueType {
    public RawBool VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;
}
public class SharpDX.Direct3D11.FeatureDataD3D11Options4 : ValueType {
    public RawBool ExtendedNV12SharedTextureSupported;
}
internal class SharpDX.Direct3D11.FeatureDataD3D9Options : ValueType {
    public RawBool FullNonPow2TextureSupport;
}
internal class SharpDX.Direct3D11.FeatureDataD3D9Options1 : ValueType {
    public RawBool FullNonPow2TextureSupported;
    public RawBool DepthAsTextureWithLessEqualComparisonFilterSupported;
    public RawBool SimpleInstancingSupported;
    public RawBool TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;
}
internal class SharpDX.Direct3D11.FeatureDataD3D9ShadowSupport : ValueType {
    public RawBool SupportsDepthAsTextureWithLessEqualComparisonFilter;
}
internal class SharpDX.Direct3D11.FeatureDataD3D9SimpleInstancingSupport : ValueType {
    public RawBool SimpleInstancingSupported;
}
internal class SharpDX.Direct3D11.FeatureDataDoubles : ValueType {
    public RawBool DoublePrecisionFloatShaderOps;
}
internal class SharpDX.Direct3D11.FeatureDataFormatSupport : ValueType {
    public Format InFormat;
    public FormatSupport OutFormatSupport;
}
internal class SharpDX.Direct3D11.FeatureDataFormatSupport2 : ValueType {
    public Format InFormat;
    public ComputeShaderFormatSupport OutFormatSupport2;
}
internal class SharpDX.Direct3D11.FeatureDataGpuVirtualAddressSupport : ValueType {
    public int MaxGPUVirtualAddressBitsPerResource;
    public int MaxGPUVirtualAddressBitsPerProcess;
}
internal class SharpDX.Direct3D11.FeatureDataMarkerSupport : ValueType {
    public RawBool Profile;
}
internal class SharpDX.Direct3D11.FeatureDataShaderCache : ValueType {
    public int SupportFlags;
}
public class SharpDX.Direct3D11.FeatureDataShaderMinimumPrecisionSupport : ValueType {
    public int PixelShaderMinPrecision;
    public int AllOtherShaderStagesMinPrecision;
}
internal class SharpDX.Direct3D11.FeatureDataThreading : ValueType {
    public RawBool DriverConcurrentCreates;
    public RawBool DriverCommandLists;
}
[GuidAttribute("affde9d1-1df7-4bb7-8a34-0f46251dab80")]
public class SharpDX.Direct3D11.Fence : DeviceChild {
    public long CompletedValue { get; }
    public Fence(Device5 device, long initialValue, FenceFlags flags);
    public Fence(IntPtr nativePtr);
    public static Fence op_Explicit(IntPtr nativePtr);
    public long get_CompletedValue();
    public IntPtr CreateSharedHandle(Nullable`1<SecurityAttributes> attributesRef, int dwAccess, string lpName);
    internal long GetCompletedValue();
    public void SetEventOnCompletion(long value, IntPtr hEvent);
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.FenceFlags : Enum {
    public int value__;
    public static FenceFlags None;
    public static FenceFlags Shared;
    public static FenceFlags SharedCrossAdapter;
}
public enum SharpDX.Direct3D11.FillMode : Enum {
    public int value__;
    public static FillMode Wireframe;
    public static FillMode Solid;
}
public enum SharpDX.Direct3D11.Filter : Enum {
    public int value__;
    public static Filter MinMagMipPoint;
    public static Filter MinMagPointMipLinear;
    public static Filter MinPointMagLinearMipPoint;
    public static Filter MinPointMagMipLinear;
    public static Filter MinLinearMagMipPoint;
    public static Filter MinLinearMagPointMipLinear;
    public static Filter MinMagLinearMipPoint;
    public static Filter MinMagMipLinear;
    public static Filter Anisotropic;
    public static Filter ComparisonMinMagMipPoint;
    public static Filter ComparisonMinMagPointMipLinear;
    public static Filter ComparisonMinPointMagLinearMipPoint;
    public static Filter ComparisonMinPointMagMipLinear;
    public static Filter ComparisonMinLinearMagMipPoint;
    public static Filter ComparisonMinLinearMagPointMipLinear;
    public static Filter ComparisonMinMagLinearMipPoint;
    public static Filter ComparisonMinMagMipLinear;
    public static Filter ComparisonAnisotropic;
    public static Filter MinimumMinMagMipPoint;
    public static Filter MinimumMinMagPointMipLinear;
    public static Filter MinimumMinPointMagLinearMipPoint;
    public static Filter MinimumMinPointMagMipLinear;
    public static Filter MinimumMinLinearMagMipPoint;
    public static Filter MinimumMinLinearMagPointMipLinear;
    public static Filter MinimumMinMagLinearMipPoint;
    public static Filter MinimumMinMagMipLinear;
    public static Filter MinimumAnisotropic;
    public static Filter MaximumMinMagMipPoint;
    public static Filter MaximumMinMagPointMipLinear;
    public static Filter MaximumMinPointMagLinearMipPoint;
    public static Filter MaximumMinPointMagMipLinear;
    public static Filter MaximumMinLinearMagMipPoint;
    public static Filter MaximumMinLinearMagPointMipLinear;
    public static Filter MaximumMinMagLinearMipPoint;
    public static Filter MaximumMinMagMipLinear;
    public static Filter MaximumAnisotropic;
}
public enum SharpDX.Direct3D11.FilterReductionType : Enum {
    public int value__;
    public static FilterReductionType Standard;
    public static FilterReductionType Comparison;
    public static FilterReductionType Minimum;
    public static FilterReductionType Maximum;
}
public enum SharpDX.Direct3D11.FilterType : Enum {
    public int value__;
    public static FilterType Point;
    public static FilterType Linear;
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.FormatSupport : Enum {
    public int value__;
    public static FormatSupport Buffer;
    public static FormatSupport InputAssemblyVertexBuffer;
    public static FormatSupport InputAssemblyIndexBuffer;
    public static FormatSupport StreamOutputBuffer;
    public static FormatSupport Texture1D;
    public static FormatSupport Texture2D;
    public static FormatSupport Texture3D;
    public static FormatSupport TextureCube;
    public static FormatSupport ShaderLoad;
    public static FormatSupport ShaderSample;
    public static FormatSupport ShaderSampleComparison;
    public static FormatSupport ShaderSampleMonoText;
    public static FormatSupport Mip;
    public static FormatSupport MipAutogen;
    public static FormatSupport RenderTarget;
    public static FormatSupport Blendable;
    public static FormatSupport DepthStencil;
    public static FormatSupport CpuLockable;
    public static FormatSupport MultisampleResolve;
    public static FormatSupport Display;
    public static FormatSupport CastWithinBitLayout;
    public static FormatSupport MultisampleRenderTarget;
    public static FormatSupport MultisampleLoad;
    public static FormatSupport ShaderGather;
    public static FormatSupport BackBufferCast;
    public static FormatSupport TypedUnorderedAccessView;
    public static FormatSupport ShaderGatherComparison;
    public static FormatSupport DecoderOutput;
    public static FormatSupport VideoProcessorOutput;
    public static FormatSupport VideoProcessorInput;
    public static FormatSupport VideoEncoder;
    public static FormatSupport None;
}
[GuidAttribute("38325b96-effb-4022-ba02-2e795b70275c")]
public class SharpDX.Direct3D11.GeometryShader : DeviceChild {
    public static int StreamOutputNoRasterizedStream;
    public static int StreamOutputStreamCount;
    public static int StreamOutputOutputComponentCount;
    public static int StreamOutputBufferSlotCount;
    public GeometryShader(Device device, Byte[] shaderBytecode, ClassLinkage linkage);
    public GeometryShader(Device device, Byte[] shaderBytecode, StreamOutputElement[] elements, Int32[] bufferedStrides, int rasterizedStream, ClassLinkage linkage);
    public GeometryShader(IntPtr nativePtr);
    public static GeometryShader op_Explicit(IntPtr nativePtr);
}
[GuidAttribute("c0bfa96c-e089-44fb-8eaf-26f8796190da")]
public class SharpDX.Direct3D11.GeometryShaderStage : CommonShaderStage`1<GeometryShader> {
    public GeometryShaderStage(IntPtr nativePtr);
    public static GeometryShaderStage op_Explicit(IntPtr nativePtr);
    internal virtual void SetConstantBuffers(int startSlot, int numBuffers, IntPtr constantBuffersOut);
    internal virtual void SetShader(GeometryShader shaderRef, ClassInstance[] classInstancesOut, int numClassInstances);
    internal virtual void SetShaderResources(int startSlot, int numViews, IntPtr shaderResourceViewsOut);
    internal virtual void SetSamplers(int startSlot, int numSamplers, IntPtr samplersOut);
    internal virtual void GetConstantBuffers(int startSlot, int numBuffers, Buffer[] constantBuffersOut);
    internal virtual void GetShader(GeometryShader& geometryShaderOut, ClassInstance[] classInstancesOut, Int32& numClassInstancesRef);
    internal virtual void GetShaderResources(int startSlot, int numViews, ShaderResourceView[] shaderResourceViewsOut);
    internal virtual void GetSamplers(int startSlot, int numSamplers, SamplerState[] samplersOut);
    internal virtual void SetShader(GeometryShader shaderRef, ComArray`1<ClassInstance> classInstancesOut, int numClassInstances);
    private void SetShader(IntPtr shaderRef, IntPtr classInstancesOut, int numClassInstances);
}
[GuidAttribute("8e5c6061-628a-4c8e-8264-bbe45cb3d5dd")]
public class SharpDX.Direct3D11.HullShader : DeviceChild {
    public HullShader(Device device, Byte[] shaderBytecode, ClassLinkage linkage);
    public HullShader(IntPtr nativePtr);
    public static HullShader op_Explicit(IntPtr nativePtr);
}
[GuidAttribute("c0bfa96c-e089-44fb-8eaf-26f8796190da")]
public class SharpDX.Direct3D11.HullShaderStage : CommonShaderStage`1<HullShader> {
    public HullShaderStage(IntPtr nativePtr);
    public static HullShaderStage op_Explicit(IntPtr nativePtr);
    internal virtual void SetShaderResources(int startSlot, int numViews, IntPtr shaderResourceViewsOut);
    internal virtual void SetShader(HullShader hullShaderRef, ClassInstance[] classInstancesOut, int numClassInstances);
    internal virtual void SetSamplers(int startSlot, int numSamplers, IntPtr samplersOut);
    internal virtual void SetConstantBuffers(int startSlot, int numBuffers, IntPtr constantBuffersOut);
    internal virtual void GetShaderResources(int startSlot, int numViews, ShaderResourceView[] shaderResourceViewsOut);
    internal virtual void GetShader(HullShader& hullShaderOut, ClassInstance[] classInstancesOut, Int32& numClassInstancesRef);
    internal virtual void GetSamplers(int startSlot, int numSamplers, SamplerState[] samplersOut);
    internal virtual void GetConstantBuffers(int startSlot, int numBuffers, Buffer[] constantBuffersOut);
    internal virtual void SetShader(HullShader hullShaderRef, ComArray`1<ClassInstance> classInstancesOut, int numClassInstances);
    private void SetShader(IntPtr hullShaderRef, IntPtr classInstancesOut, int numClassInstances);
}
[GuidAttribute("6543dbb6-1b48-42f5-ab82-e97ec74326f6")]
public class SharpDX.Direct3D11.InfoQueue : ComObject {
    public long MessageCountLimit { get; public set; }
    public long NumMessagesAllowedByStorageFilter { get; }
    public long NumMessagesDeniedByStorageFilter { get; }
    public long NumStoredMessages { get; }
    public long NumStoredMessagesAllowedByRetrievalFilter { get; }
    public long NumMessagesDiscardedByMessageCountLimit { get; }
    public int StorageFilterStackSize { get; }
    public int RetrievalFilterStackSize { get; }
    public RawBool MuteDebugOutput { get; public set; }
    public InfoQueue(IntPtr nativePtr);
    public Message GetMessage(long messageIndex);
    public InfoQueueFilter GetStorageFilter();
    public InfoQueueFilter GetRetrievalFilter();
    public static InfoQueue op_Explicit(IntPtr nativePtr);
    public long get_MessageCountLimit();
    public void set_MessageCountLimit(long value);
    public long get_NumMessagesAllowedByStorageFilter();
    public long get_NumMessagesDeniedByStorageFilter();
    public long get_NumStoredMessages();
    public long get_NumStoredMessagesAllowedByRetrievalFilter();
    public long get_NumMessagesDiscardedByMessageCountLimit();
    public int get_StorageFilterStackSize();
    public int get_RetrievalFilterStackSize();
    public RawBool get_MuteDebugOutput();
    public void set_MuteDebugOutput(RawBool value);
    internal void SetMessageCountLimit(long messageCountLimit);
    public void ClearStoredMessages();
    internal void GetMessage(long messageIndex, IntPtr messageRef, PointerSize& messageByteLengthRef);
    internal long GetNumMessagesAllowedByStorageFilter();
    internal long GetNumMessagesDeniedByStorageFilter();
    internal long GetNumStoredMessages();
    internal long GetNumStoredMessagesAllowedByRetrievalFilter();
    internal long GetNumMessagesDiscardedByMessageCountLimit();
    internal long GetMessageCountLimit();
    public void AddStorageFilterEntries(InfoQueueFilter filterRef);
    internal void GetStorageFilter(IntPtr filterRef, PointerSize& filterByteLengthRef);
    public void ClearStorageFilter();
    public void PushEmptyStorageFilter();
    public void PushCopyOfStorageFilter();
    public void PushStorageFilter(InfoQueueFilter filterRef);
    public void PopStorageFilter();
    internal int GetStorageFilterStackSize();
    public void AddRetrievalFilterEntries(InfoQueueFilter filterRef);
    internal void GetRetrievalFilter(IntPtr filterRef, PointerSize& filterByteLengthRef);
    public void ClearRetrievalFilter();
    public void PushEmptyRetrievalFilter();
    public void PushCopyOfRetrievalFilter();
    public void PushRetrievalFilter(InfoQueueFilter filterRef);
    public void PopRetrievalFilter();
    internal int GetRetrievalFilterStackSize();
    public void AddMessage(MessageCategory category, MessageSeverity severity, MessageId id, string descriptionRef);
    public void AddApplicationMessage(MessageSeverity severity, string descriptionRef);
    public void SetBreakOnCategory(MessageCategory category, RawBool bEnable);
    public void SetBreakOnSeverity(MessageSeverity severity, RawBool bEnable);
    public void SetBreakOnID(MessageId id, RawBool bEnable);
    public RawBool GetBreakOnCategory(MessageCategory category);
    public RawBool GetBreakOnSeverity(MessageSeverity severity);
    public RawBool GetBreakOnID(MessageId id);
    internal void SetMuteDebugOutput(RawBool bMute);
    internal RawBool GetMuteDebugOutput();
}
public class SharpDX.Direct3D11.InfoQueueFilter : object {
    public InfoQueueFilterDescription AllowList;
    public InfoQueueFilterDescription DenyList;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.InfoQueueFilterDescription : object {
    [CompilerGeneratedAttribute]
private MessageCategory[] <Categories>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageSeverity[] <Severities>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageId[] <Ids>k__BackingField;
    internal int CategorieCount;
    internal IntPtr PCategoryList;
    internal int SeveritieCount;
    internal IntPtr PSeverityList;
    internal int IDCount;
    internal IntPtr PIDList;
    public MessageCategory[] Categories { get; public set; }
    public MessageSeverity[] Severities { get; public set; }
    public MessageId[] Ids { get; public set; }
    [CompilerGeneratedAttribute]
public MessageCategory[] get_Categories();
    [CompilerGeneratedAttribute]
public void set_Categories(MessageCategory[] value);
    [CompilerGeneratedAttribute]
public MessageSeverity[] get_Severities();
    [CompilerGeneratedAttribute]
public void set_Severities(MessageSeverity[] value);
    [CompilerGeneratedAttribute]
public MessageId[] get_Ids();
    [CompilerGeneratedAttribute]
public void set_Ids(MessageId[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[GuidAttribute("c0bfa96c-e089-44fb-8eaf-26f8796190da")]
public class SharpDX.Direct3D11.InputAssemblerStage : CppObject {
    public static int DefaultIndexBufferOffsetInBytes;
    public static int DefaultPrimitiveTopology;
    public static int DefaultVertexBufferOffsetInBytes;
    public static int IndexInputResourceSlotCount;
    public static int InstanceIdBitCount;
    public static int IntegerArithmeticBitCount;
    public static int PatchMaximumControlPointCount;
    public static int PrimitiveIdBitCount;
    public static int VertexIdBitCount;
    public static int VertexInputResourceSlotCount;
    public static int VertexInputStructureElementsComponents;
    public static int VertexInputStructureElementCount;
    public InputLayout InputLayout { get; public set; }
    public PrimitiveTopology PrimitiveTopology { get; public set; }
    public InputAssemblerStage(IntPtr nativePtr);
    public void SetVertexBuffers(int slot, VertexBufferBinding vertexBufferBinding);
    public void SetVertexBuffers(int firstSlot, VertexBufferBinding[] vertexBufferBindings);
    public void SetVertexBuffers(int slot, Buffer[] vertexBuffers, Int32[] stridesRef, Int32[] offsetsRef);
    public static InputAssemblerStage op_Explicit(IntPtr nativePtr);
    public InputLayout get_InputLayout();
    public void set_InputLayout(InputLayout value);
    public PrimitiveTopology get_PrimitiveTopology();
    public void set_PrimitiveTopology(PrimitiveTopology value);
    internal void SetInputLayout(InputLayout inputLayoutRef);
    public void SetVertexBuffers(int startSlot, int numBuffers, IntPtr vertexBuffersOut, IntPtr stridesRef, IntPtr offsetsRef);
    public void SetIndexBuffer(Buffer indexBufferRef, Format format, int offset);
    internal void SetPrimitiveTopology(PrimitiveTopology topology);
    internal void GetInputLayout(InputLayout& inputLayoutOut);
    public void GetVertexBuffers(int startSlot, int numBuffers, Buffer[] vertexBuffersOut, Int32[] stridesRef, Int32[] offsetsRef);
    public void GetIndexBuffer(Buffer& indexBufferRef, Format& format, Int32& offset);
    internal void GetPrimitiveTopology(PrimitiveTopology& topologyRef);
}
public enum SharpDX.Direct3D11.InputClassification : Enum {
    public int value__;
    public static InputClassification PerVertexData;
    public static InputClassification PerInstanceData;
}
public class SharpDX.Direct3D11.InputElement : ValueType {
    public string SemanticName;
    public int SemanticIndex;
    public Format Format;
    public int Slot;
    public int AlignedByteOffset;
    public InputClassification Classification;
    public int InstanceDataStepRate;
    public static int AppendAligned { get; }
    public InputElement(string name, int index, Format format, int offset, int slot, InputClassification slotClass, int stepRate);
    public InputElement(string name, int index, Format format, int offset, int slot);
    public InputElement(string name, int index, Format format, int slot);
    public static int get_AppendAligned();
    public sealed virtual bool Equals(InputElement other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(InputElement left, InputElement right);
    public static bool op_Inequality(InputElement left, InputElement right);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[GuidAttribute("e4819ddc-4cf0-4025-bd26-5de82a3e07b7")]
public class SharpDX.Direct3D11.InputLayout : DeviceChild {
    public InputLayout(Device device, Byte[] shaderBytecode, InputElement[] elements);
    public InputLayout(IntPtr nativePtr);
    public static InputLayout op_Explicit(IntPtr nativePtr);
}
public class SharpDX.Direct3D11.KeyExchangeHwProtectionData : ValueType {
    public int HWProtectionFunctionID;
    public IntPtr PInputData;
    public IntPtr POutputData;
    public Result Status;
}
public class SharpDX.Direct3D11.KeyExchangeHwProtectionInputData : ValueType {
    public int PrivateDataSize;
    public int HWProtectionDataSize;
    internal Byte[] _PbInput;
    public Byte[] PbInput { get; private set; }
    public Byte[] get_PbInput();
    private void set_PbInput(Byte[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.KeyExchangeHwProtectionOutputData : ValueType {
    public int PrivateDataSize;
    public int MaxHWProtectionDataSize;
    public int HWProtectionDataSize;
    public long TransportTime;
    public long ExecutionTime;
    internal Byte[] _PbOutput;
    public Byte[] PbOutput { get; private set; }
    public Byte[] get_PbOutput();
    private void set_PbOutput(Byte[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public enum SharpDX.Direct3D11.LogicOperation : Enum {
    public int value__;
    public static LogicOperation Clear;
    public static LogicOperation Set;
    public static LogicOperation Copy;
    public static LogicOperation CopyInverted;
    public static LogicOperation Noop;
    public static LogicOperation Invert;
    public static LogicOperation And;
    public static LogicOperation Nand;
    public static LogicOperation Or;
    public static LogicOperation Nor;
    public static LogicOperation Xor;
    public static LogicOperation Equiv;
    public static LogicOperation AndReverse;
    public static LogicOperation AndInverted;
    public static LogicOperation OrReverse;
    public static LogicOperation OrInverted;
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.MapFlags : Enum {
    public int value__;
    public static MapFlags DoNotWait;
    public static MapFlags None;
}
public enum SharpDX.Direct3D11.MapMode : Enum {
    public int value__;
    public static MapMode Read;
    public static MapMode Write;
    public static MapMode ReadWrite;
    public static MapMode WriteDiscard;
    public static MapMode WriteNoOverwrite;
}
public class SharpDX.Direct3D11.Message : ValueType {
    public MessageCategory Category;
    public MessageSeverity Severity;
    public MessageId Id;
    public string Description;
    internal PointerSize DescriptionByteLength;
    internal void __MarshalFrom(__Native& ref);
    public virtual string ToString();
}
public class SharpDX.Direct3D11.MessageAuthenticationCode : ValueType {
    internal Byte[] _Buffer;
    public Byte[] Buffer { get; private set; }
    public Byte[] get_Buffer();
    private void set_Buffer(Byte[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public enum SharpDX.Direct3D11.MessageCategory : Enum {
    public int value__;
    public static MessageCategory ApplicationDefined;
    public static MessageCategory Miscellaneous;
    public static MessageCategory Initialization;
    public static MessageCategory Cleanup;
    public static MessageCategory Compilation;
    public static MessageCategory StateCreation;
    public static MessageCategory StateSetting;
    public static MessageCategory StateGetting;
    public static MessageCategory ResourceManipulation;
    public static MessageCategory Execution;
    public static MessageCategory Shader;
}
public enum SharpDX.Direct3D11.MessageId : Enum {
    public int value__;
    public static MessageId MessageIdUnknown;
    public static MessageId MessageIdDeviceInputAssemblySetVertexBuffersHazard;
    public static MessageId MessageIdDeviceInputAssemblySetIndexBufferHazard;
    public static MessageId MessageIdDeviceVertexShaderSetShaderResourcesHazard;
    public static MessageId MessageIdDeviceVertexShaderSetConstantBuffersHazard;
    public static MessageId MessageIdDeviceGeometryShaderSetShaderResourcesHazard;
    public static MessageId MessageIdDeviceGeometryShaderSetConstantBuffersHazard;
    public static MessageId MessageIdDevicePixelShaderSetShaderResourcesHazard;
    public static MessageId MessageIdDevicePixelShaderSetConstantBuffersHazard;
    public static MessageId MessageIdDeviceOutputMergerSetRenderTargetsHazard;
    public static MessageId MessageIdDeviceStreamOutputSetTargetsHazard;
    public static MessageId MessageIdStringFromApplication;
    public static MessageId MessageIdCorruptedThis;
    public static MessageId MessageIdCorruptedParameter1;
    public static MessageId MessageIdCorruptedParameter2;
    public static MessageId MessageIdCorruptedParameter3;
    public static MessageId MessageIdCorruptedParameter4;
    public static MessageId MessageIdCorruptedParameter5;
    public static MessageId MessageIdCorruptedParameter6;
    public static MessageId MessageIdCorruptedParameter7;
    public static MessageId MessageIdCorruptedParameter8;
    public static MessageId MessageIdCorruptedParameter9;
    public static MessageId MessageIdCorruptedParameter10;
    public static MessageId MessageIdCorruptedParameter11;
    public static MessageId MessageIdCorruptedParameter12;
    public static MessageId MessageIdCorruptedParameter13;
    public static MessageId MessageIdCorruptedParameter14;
    public static MessageId MessageIdCorruptedParameter15;
    public static MessageId MessageIdCorruptedMultithreading;
    public static MessageId MessageIdMessageReportingOufOfMemory;
    public static MessageId MessageIdInputAssemblySetInputLayoutUnbindDeletingObject;
    public static MessageId MessageIdInputAssemblySetVertexBuffersUnbindDeletingObject;
    public static MessageId MessageIdInputAssemblySetIndexBufferUnbindDeletingObject;
    public static MessageId MessageIdVertexShaderSetShaderUnbindDeletingObject;
    public static MessageId MessageIdVertexShaderSetShaderResourcesUnbindDeletingObject;
    public static MessageId MessageIdVertexShaderSetConstantBuffersUnbindDeletingObject;
    public static MessageId MessageIdVertexShaderSetSamplersUnbindDeletingObject;
    public static MessageId MessageIdGeometryShaderSetShaderUnbindDeletingObject;
    public static MessageId MessageIdGeometryShaderSetShaderResourcesUnbindDeletingObject;
    public static MessageId MessageIdGeometryShaderSetConstantBuffersUnbindDeletingObject;
    public static MessageId MessageIdGeometryShaderSetSamplersUnbindDeletingObject;
    public static MessageId MessageIdStreamOutputSetTargetsUnbindDeletingObject;
    public static MessageId MessageIdPixelShaderSetShaderUnbindDeletingObject;
    public static MessageId MessageIdPixelShaderSetShaderResourcesUnbindDeletingObject;
    public static MessageId MessageIdPixelShaderSetConstantBuffersUnbindDeletingObject;
    public static MessageId MessageIdPixelShaderSetSamplersUnbindDeletingObject;
    public static MessageId MessageIdRasterizerSetStateUnbindDeletingObject;
    public static MessageId MessageIdOutputMergerSetBlendStateUnbindDeletingObject;
    public static MessageId MessageIdOutputMergerSetDepthStencilStateUnbindDeletingObject;
    public static MessageId MessageIdOutputMergerSetRenderTargetsUnbindDeletingObject;
    public static MessageId MessageIdSetPredicationUnbindDeletingObject;
    public static MessageId MessageIdGetPrivateDataMoreData;
    public static MessageId MessageIdSetPrivateDataInvalidFreeData;
    public static MessageId MessageIdSetPrivateDataInvalidIUnknown;
    public static MessageId MessageIdSetPrivateDataInvalidFlags;
    public static MessageId MessageIdSetPrivateDataChangingparams;
    public static MessageId MessageIdSetPrivateDataOufOfMemory;
    public static MessageId MessageIdCreateBufferUnrecognizedFormat;
    public static MessageId MessageIdCreateBufferInvalidSamples;
    public static MessageId MessageIdCreateBufferUnrecognizedUsage;
    public static MessageId MessageIdCreateBufferUnrecognizedBindFlags;
    public static MessageId MessageIdCreateBufferUnrecognizedCpuAccessFlags;
    public static MessageId MessageIdCreateBufferUnrecognizedMiscFlags;
    public static MessageId MessageIdCreateBufferInvalidCpuAccessFlags;
    public static MessageId MessageIdCreateBufferInvalidBindFlags;
    public static MessageId MessageIdCreateBufferInvalidInitialData;
    public static MessageId MessageIdCreateBufferInvalidDimensions;
    public static MessageId MessageIdCreateBufferInvalidMipLevels;
    public static MessageId MessageIdCreateBufferInvalidMiscFlags;
    public static MessageId MessageIdCreateBufferInvalidArgumentReturn;
    public static MessageId MessageIdCreateBufferOufOfMemoryReturn;
    public static MessageId MessageIdCreateBufferNullDescription;
    public static MessageId MessageIdCreateBufferInvalidConstantBufferBindingS;
    public static MessageId MessageIdCreateBufferLargeAllocation;
    public static MessageId MessageIdCreateTexture1DUnrecognizedFormat;
    public static MessageId MessageIdCreateTexture1DUnsupportedFormat;
    public static MessageId MessageIdCreateTexture1DInvalidSamples;
    public static MessageId MessageIdCreateTexture1DUnrecognizedUsage;
    public static MessageId MessageIdCreateTexture1DUnrecognizedBindFlags;
    public static MessageId MessageIdCreateTexture1DUnrecognizedCpuAccessFlags;
    public static MessageId MessageIdCreateTexture1DUnrecognizedMiscFlags;
    public static MessageId MessageIdCreateTexture1DInvalidCpuAccessFlags;
    public static MessageId MessageIdCreateTexture1DInvalidBindFlags;
    public static MessageId MessageIdCreateTexture1DInvalidInitialData;
    public static MessageId MessageIdCreateTexture1DInvalidDimensions;
    public static MessageId MessageIdCreateTexture1DInvalidMipLevels;
    public static MessageId MessageIdCreateTexture1DInvalidMiscFlags;
    public static MessageId MessageIdCreateTexture1DInvalidArgumentReturn;
    public static MessageId MessageIdCreateTexture1DOufOfMemoryReturn;
    public static MessageId MessageIdCreateTexture1DNullDescription;
    public static MessageId MessageIdCreateTexture1DLargeAllocation;
    public static MessageId MessageIdCreateTexture2DUnrecognizedFormat;
    public static MessageId MessageIdCreateTexture2DUnsupportedFormat;
    public static MessageId MessageIdCreateTexture2DInvalidSamples;
    public static MessageId MessageIdCreateTexture2DUnrecognizedUsage;
    public static MessageId MessageIdCreateTexture2DUnrecognizedBindFlags;
    public static MessageId MessageIdCreateTexture2DUnrecognizedCpuAccessFlags;
    public static MessageId MessageIdCreateTexture2DUnrecognizedMiscFlags;
    public static MessageId MessageIdCreateTexture2DInvalidCpuAccessFlags;
    public static MessageId MessageIdCreateTexture2DInvalidBindFlags;
    public static MessageId MessageIdCreateTexture2DInvalidInitialData;
    public static MessageId MessageIdCreateTexture2DInvalidDimensions;
    public static MessageId MessageIdCreateTexture2DInvalidMipLevels;
    public static MessageId MessageIdCreateTexture2DInvalidMiscFlags;
    public static MessageId MessageIdCreateTexture2DInvalidArgumentReturn;
    public static MessageId MessageIdCreateTexture2DOufOfMemoryReturn;
    public static MessageId MessageIdCreateTexture2DNullDescription;
    public static MessageId MessageIdCreateTexture2DLargeAllocation;
    public static MessageId MessageIdCreateTexture3DUnrecognizedFormat;
    public static MessageId MessageIdCreateTexture3DUnsupportedFormat;
    public static MessageId MessageIdCreateTexture3DInvalidSamples;
    public static MessageId MessageIdCreateTexture3DUnrecognizedUsage;
    public static MessageId MessageIdCreateTexture3DUnrecognizedBindFlags;
    public static MessageId MessageIdCreateTexture3DUnrecognizedCpuAccessFlags;
    public static MessageId MessageIdCreateTexture3DUnrecognizedMiscFlags;
    public static MessageId MessageIdCreateTexture3DInvalidCpuAccessFlags;
    public static MessageId MessageIdCreateTexture3DInvalidBindFlags;
    public static MessageId MessageIdCreateTexture3DInvalidInitialData;
    public static MessageId MessageIdCreateTexture3DInvalidDimensions;
    public static MessageId MessageIdCreateTexture3DInvalidMipLevels;
    public static MessageId MessageIdCreateTexture3DInvalidMiscFlags;
    public static MessageId MessageIdCreateTexture3DInvalidArgumentReturn;
    public static MessageId MessageIdCreateTexture3DOufOfMemoryReturn;
    public static MessageId MessageIdCreateTexture3DNullDescription;
    public static MessageId MessageIdCreateTexture3DLargeAllocation;
    public static MessageId MessageIdCreateShaderResourceViewUnrecognizedFormat;
    public static MessageId MessageIdCreateShaderResourceViewInvalidDescription;
    public static MessageId MessageIdCreateShaderResourceViewInvalidFormat;
    public static MessageId MessageIdCreateShaderResourceViewInvalidDimensions;
    public static MessageId MessageIdCreateShaderResourceViewInvalidResource;
    public static MessageId MessageIdCreateShaderResourceViewTooManyObjects;
    public static MessageId MessageIdCreateShaderResourceViewInvalidArgumentReturn;
    public static MessageId MessageIdCreateShaderResourceViewOufOfMemoryReturn;
    public static MessageId MessageIdCreateRenderTargetViewUnrecognizedFormat;
    public static MessageId MessageIdCreateRenderTargetViewUnsupportedFormat;
    public static MessageId MessageIdCreateRenderTargetViewInvalidDescription;
    public static MessageId MessageIdCreateRenderTargetViewInvalidFormat;
    public static MessageId MessageIdCreateRenderTargetViewInvalidDimensions;
    public static MessageId MessageIdCreateRenderTargetViewInvalidResource;
    public static MessageId MessageIdCreateRenderTargetViewTooManyObjects;
    public static MessageId MessageIdCreateRenderTargetViewInvalidArgumentReturn;
    public static MessageId MessageIdCreateRenderTargetViewOufOfMemoryReturn;
    public static MessageId MessageIdCreateDepthStencilViewUnrecognizedFormat;
    public static MessageId MessageIdCreateDepthStencilViewInvalidDescription;
    public static MessageId MessageIdCreateDepthStencilViewInvalidFormat;
    public static MessageId MessageIdCreateDepthStencilViewInvalidDimensions;
    public static MessageId MessageIdCreateDepthStencilViewInvalidResource;
    public static MessageId MessageIdCreateDepthStencilViewTooManyObjects;
    public static MessageId MessageIdCreateDepthStencilViewInvalidArgumentReturn;
    public static MessageId MessageIdCreateDepthStencilViewOufOfMemoryReturn;
    public static MessageId MessageIdCreateInputLayoutOufOfMemory;
    public static MessageId MessageIdCreateInputLayoutTooManyElements;
    public static MessageId MessageIdCreateInputLayoutInvalidFormat;
    public static MessageId MessageIdCreateInputLayoutIncompatibleformat;
    public static MessageId MessageIdCreateInputLayoutInvalidSlot;
    public static MessageId MessageIdCreateInputLayoutInvalidInputsLotclass;
    public static MessageId MessageIdCreateInputLayoutSteprateslotclassmismatch;
    public static MessageId MessageIdCreateInputLayoutInvalidSlotClassChange;
    public static MessageId MessageIdCreateInputLayoutInvalidStepratechange;
    public static MessageId MessageIdCreateInputLayoutInvalidAlignment;
    public static MessageId MessageIdCreateInputLayoutDuplicatesemantic;
    public static MessageId MessageIdCreateInputLayoutUnparseableinputsignature;
    public static MessageId MessageIdCreateInputLayoutNullSemantic;
    public static MessageId MessageIdCreateInputLayoutMissingElement;
    public static MessageId MessageIdCreateInputLayoutNullDescription;
    public static MessageId MessageIdCreateVertexShaderOufOfMemory;
    public static MessageId MessageIdCreateVertexShaderInvalidShaderBytecode;
    public static MessageId MessageIdCreateVertexShaderInvalidShaderType;
    public static MessageId MessageIdCreateGeometryShaderOufOfMemory;
    public static MessageId MessageIdCreateGeometryShaderInvalidShaderBytecode;
    public static MessageId MessageIdCreateGeometryShaderInvalidShaderType;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputOufOfMemory;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputInvalidShaderBytecode;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputInvalidShaderType;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputInvalidNumentries;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputOutputStreamsTrideunused;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputUnexpectedDeclaration;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputExpectedDeclaration;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputOutputSlot0expected;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputInvalidOutputSlot;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputOnlyoneelementperslot;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputInvalidComponentcount;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputInvalidStartcomponentandcomponentcount;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputInvalidGapdefinition;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputRepeatedoutput;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputInvalidOutputStreamsTride;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputMissingSemantic;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputMaskmismatch;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputCanthaveonlygaps;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputDeclarationTooComplex;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputMissingOutputSignature;
    public static MessageId MessageIdCreatePixelShaderOufOfMemory;
    public static MessageId MessageIdCreatePixelShaderInvalidShaderBytecode;
    public static MessageId MessageIdCreatePixelShaderInvalidShaderType;
    public static MessageId MessageIdCreateRasterizerstateInvalidFillmode;
    public static MessageId MessageIdCreateRasterizerstateInvalidCullmode;
    public static MessageId MessageIdCreateRasterizerstateInvalidDepthBiasclamp;
    public static MessageId MessageIdCreateRasterizerstateInvalidSlopescaleddepthbias;
    public static MessageId MessageIdCreateRasterizerstateTooManyObjects;
    public static MessageId MessageIdCreateRasterizerstateNullDescription;
    public static MessageId MessageIdCreateDepthStencilStateInvalidDepthWriteMask;
    public static MessageId MessageIdCreateDepthStencilStateInvalidDepthFunction;
    public static MessageId MessageIdCreateDepthStencilStateInvalidFrontfacestencilfailop;
    public static MessageId MessageIdCreateDepthStencilStateInvalidFrontfacestencilzfailop;
    public static MessageId MessageIdCreateDepthStencilStateInvalidFrontfacestencilpassop;
    public static MessageId MessageIdCreateDepthStencilStateInvalidFrontfacestencilfunc;
    public static MessageId MessageIdCreateDepthStencilStateInvalidBackfaceStencilFailop;
    public static MessageId MessageIdCreateDepthStencilStateInvalidBackfaceStencilZfailop;
    public static MessageId MessageIdCreateDepthStencilStateInvalidBackfaceStencilPassop;
    public static MessageId MessageIdCreateDepthStencilStateInvalidBackfaceStencilFunction;
    public static MessageId MessageIdCreateDepthStencilStateTooManyObjects;
    public static MessageId MessageIdCreateDepthStencilStateNullDescription;
    public static MessageId MessageIdCreateBlendStateInvalidSourceBlend;
    public static MessageId MessageIdCreateBlendStateInvalidDestinationBlend;
    public static MessageId MessageIdCreateBlendStateInvalidBlendOperation;
    public static MessageId MessageIdCreateBlendStateInvalidSourceBlendAlpha;
    public static MessageId MessageIdCreateBlendStateInvalidDestinationBlendAlpha;
    public static MessageId MessageIdCreateBlendStateInvalidBlendOperationAlpha;
    public static MessageId MessageIdCreateBlendStateInvalidRenderTargetWriteMask;
    public static MessageId MessageIdCreateBlendStateTooManyObjects;
    public static MessageId MessageIdCreateBlendStateNullDescription;
    public static MessageId MessageIdCreateSamplerStateInvalidFilter;
    public static MessageId MessageIdCreateSamplerStateInvalidAddressU;
    public static MessageId MessageIdCreateSamplerStateInvalidAddressV;
    public static MessageId MessageIdCreateSamplerStateInvalidAddressW;
    public static MessageId MessageIdCreateSamplerStateInvalidMiplodbias;
    public static MessageId MessageIdCreateSamplerStateInvalidMaximumAnisotropy;
    public static MessageId MessageIdCreateSamplerStateInvalidComparisonfunc;
    public static MessageId MessageIdCreateSamplerStateInvalidMinimumLod;
    public static MessageId MessageIdCreateSamplerStateInvalidMaximumLod;
    public static MessageId MessageIdCreateSamplerStateTooManyObjects;
    public static MessageId MessageIdCreateSamplerStateNullDescription;
    public static MessageId MessageIdCreateQueryOrpredicateInvalidQuery;
    public static MessageId MessageIdCreateQueryOrpredicateInvalidMiscFlags;
    public static MessageId MessageIdCreateQueryOrpredicateUnexpectedMiscFlags;
    public static MessageId MessageIdCreateQueryOrpredicateNullDescription;
    public static MessageId MessageIdDeviceInputAssemblySetPrimitivetopologyTopologyUnrecognized;
    public static MessageId MessageIdDeviceInputAssemblySetPrimitivetopologyTopologyUndefined;
    public static MessageId MessageIdInputAssemblySetVertexBuffersInvalidBuffer;
    public static MessageId MessageIdDeviceInputAssemblySetVertexBuffersOffsetTooLarge;
    public static MessageId MessageIdDeviceInputAssemblySetVertexBuffersBuffersEmpty;
    public static MessageId MessageIdInputAssemblySetIndexBufferInvalidBuffer;
    public static MessageId MessageIdDeviceInputAssemblySetIndexBufferFormatInvalid;
    public static MessageId MessageIdDeviceInputAssemblySetIndexBufferOffsetTooLarge;
    public static MessageId MessageIdDeviceInputAssemblySetIndexBufferOffsetUnaligned;
    public static MessageId MessageIdDeviceVertexShaderSetShaderResourcesViewsEmpty;
    public static MessageId MessageIdVertexShaderSetConstantBuffersInvalidBuffer;
    public static MessageId MessageIdDeviceVertexShaderSetConstantBuffersBuffersEmpty;
    public static MessageId MessageIdDeviceVertexShaderSetSamplersSamplersEmpty;
    public static MessageId MessageIdDeviceGeometryShaderSetShaderResourcesViewsEmpty;
    public static MessageId MessageIdGeometryShaderSetConstantBuffersInvalidBuffer;
    public static MessageId MessageIdDeviceGeometryShaderSetConstantBuffersBuffersEmpty;
    public static MessageId MessageIdDeviceGeometryShaderSetSamplersSamplersEmpty;
    public static MessageId MessageIdStreamOutputSetTargetsInvalidBuffer;
    public static MessageId MessageIdDeviceStreamOutputSetTargetsOffsetUnaligned;
    public static MessageId MessageIdDevicePixelShaderSetShaderResourcesViewsEmpty;
    public static MessageId MessageIdPixelShaderSetConstantBuffersInvalidBuffer;
    public static MessageId MessageIdDevicePixelShaderSetConstantBuffersBuffersEmpty;
    public static MessageId MessageIdDevicePixelShaderSetSamplersSamplersEmpty;
    public static MessageId MessageIdDeviceRasterizerSetViewportsInvalidViewport;
    public static MessageId MessageIdDeviceRasterizerSetScissorRectanglesInvalidScissor;
    public static MessageId MessageIdClearrendertargetviewDenormflush;
    public static MessageId MessageIdCleardepthstencilviewDenormflush;
    public static MessageId MessageIdCleardepthstencilviewInvalid;
    public static MessageId MessageIdDeviceInputAssemblyGetVertexBuffersBuffersEmpty;
    public static MessageId MessageIdDeviceVertexShaderGetShaderResourcesViewsEmpty;
    public static MessageId MessageIdDeviceVertexShaderGetConstantBuffersBuffersEmpty;
    public static MessageId MessageIdDeviceVertexShaderGetSamplersSamplersEmpty;
    public static MessageId MessageIdDeviceGeometryShaderGetShaderResourcesViewsEmpty;
    public static MessageId MessageIdDeviceGeometryShaderGetConstantBuffersBuffersEmpty;
    public static MessageId MessageIdDeviceGeometryShaderGetSamplersSamplersEmpty;
    public static MessageId MessageIdDeviceStreamOutputGetTargetsBuffersEmpty;
    public static MessageId MessageIdDevicePixelShaderGetShaderResourcesViewsEmpty;
    public static MessageId MessageIdDevicePixelShaderGetConstantBuffersBuffersEmpty;
    public static MessageId MessageIdDevicePixelShaderGetSamplersSamplersEmpty;
    public static MessageId MessageIdDeviceRasterizerGetViewportsViewportsEmpty;
    public static MessageId MessageIdDeviceRasterizerGetScissorRectanglesRectanglesEmpty;
    public static MessageId MessageIdDeviceGeneratemipsResourceInvalid;
    public static MessageId MessageIdCopySubResourceRegionInvalidDestinationSubResource;
    public static MessageId MessageIdCopySubResourceRegionInvalidSourceSubResource;
    public static MessageId MessageIdCopySubResourceRegionInvalidSourceBox;
    public static MessageId MessageIdCopySubResourceRegionInvalidSource;
    public static MessageId MessageIdCopySubResourceRegionInvalidDestinationState;
    public static MessageId MessageIdCopySubResourceRegionInvalidSourceState;
    public static MessageId MessageIdCopyResourceInvalidSource;
    public static MessageId MessageIdCopyResourceInvalidDestinationState;
    public static MessageId MessageIdCopyResourceInvalidSourceState;
    public static MessageId MessageIdUpdatesUbresourceInvalidDestinationSubResource;
    public static MessageId MessageIdUpdatesUbresourceInvalidDestinationBox;
    public static MessageId MessageIdUpdatesUbresourceInvalidDestinationState;
    public static MessageId MessageIdDeviceResolvesubresourceDestinationInvalid;
    public static MessageId MessageIdDeviceResolvesubresourceDestinationSubResourceInvalid;
    public static MessageId MessageIdDeviceResolvesubresourceSourceInvalid;
    public static MessageId MessageIdDeviceResolvesubresourceSourceSubResourceInvalid;
    public static MessageId MessageIdDeviceResolvesubresourceFormatInvalid;
    public static MessageId MessageIdBufferMapInvalidMaptype;
    public static MessageId MessageIdBufferMapInvalidFlags;
    public static MessageId MessageIdBufferMapAlreadymapped;
    public static MessageId MessageIdBufferMapDeviceremovedReturn;
    public static MessageId MessageIdBufferUnmapNotMapped;
    public static MessageId MessageIdTexture1DMapInvalidMaptype;
    public static MessageId MessageIdTexture1DMapInvalidSubResource;
    public static MessageId MessageIdTexture1DMapInvalidFlags;
    public static MessageId MessageIdTexture1DMapAlreadymapped;
    public static MessageId MessageIdTexture1DMapDeviceremovedReturn;
    public static MessageId MessageIdTexture1DUnmapInvalidSubResource;
    public static MessageId MessageIdTexture1DUnmapNotMapped;
    public static MessageId MessageIdTexture2DMapInvalidMaptype;
    public static MessageId MessageIdTexture2DMapInvalidSubResource;
    public static MessageId MessageIdTexture2DMapInvalidFlags;
    public static MessageId MessageIdTexture2DMapAlreadymapped;
    public static MessageId MessageIdTexture2DMapDeviceremovedReturn;
    public static MessageId MessageIdTexture2DUnmapInvalidSubResource;
    public static MessageId MessageIdTexture2DUnmapNotMapped;
    public static MessageId MessageIdTexture3DMapInvalidMaptype;
    public static MessageId MessageIdTexture3DMapInvalidSubResource;
    public static MessageId MessageIdTexture3DMapInvalidFlags;
    public static MessageId MessageIdTexture3DMapAlreadymapped;
    public static MessageId MessageIdTexture3DMapDeviceremovedReturn;
    public static MessageId MessageIdTexture3DUnmapInvalidSubResource;
    public static MessageId MessageIdTexture3DUnmapNotMapped;
    public static MessageId MessageIdCheckFormatSupportFormatDeprecated;
    public static MessageId MessageIdCheckMultisamplequalitylevelsFormatDeprecated;
    public static MessageId MessageIdSetExceptionmodeUnrecognizedFlags;
    public static MessageId MessageIdSetExceptionmodeInvalidArgumentReturn;
    public static MessageId MessageIdSetExceptionmodeDeviceremovedReturn;
    public static MessageId MessageIdRefSimulatingInfinitelyFastHardware;
    public static MessageId MessageIdRefThreadingMode;
    public static MessageId MessageIdRefUmdriverException;
    public static MessageId MessageIdRefKmdriverException;
    public static MessageId MessageIdRefHardwareException;
    public static MessageId MessageIdRefAccessIngIndexAbleTempOutOfRange;
    public static MessageId MessageIdRefProblemParsingShader;
    public static MessageId MessageIdRefOutOfMemory;
    public static MessageId MessageIdRefInformation;
    public static MessageId MessageIdDeviceDrawVertexPosOverflow;
    public static MessageId MessageIdDeviceDrawIndexedIndexPosOverflow;
    public static MessageId MessageIdDeviceDrawInstancedVertexPosOverflow;
    public static MessageId MessageIdDeviceDrawInstancedInstancePosOverflow;
    public static MessageId MessageIdDeviceDrawIndexedInstancedInstancePosOverflow;
    public static MessageId MessageIdDeviceDrawIndexedInstancedIndexPosOverflow;
    public static MessageId MessageIdDeviceDrawVertexShaderNotSet;
    public static MessageId MessageIdDeviceShaderLinkageSemanticnameNotFound;
    public static MessageId MessageIdDeviceShaderLinkageRegisterindex;
    public static MessageId MessageIdDeviceShaderLinkageComponenttype;
    public static MessageId MessageIdDeviceShaderLinkageRegistermask;
    public static MessageId MessageIdDeviceShaderLinkageSystemvalue;
    public static MessageId MessageIdDeviceShaderLinkageNeverwrittenAlwaysreads;
    public static MessageId MessageIdDeviceDrawVertexBufferNotSet;
    public static MessageId MessageIdDeviceDrawInputLayoutNotSet;
    public static MessageId MessageIdDeviceDrawConstantBufferNotSet;
    public static MessageId MessageIdDeviceDrawConstantBufferTooSmall;
    public static MessageId MessageIdDeviceDrawSamplerNotSet;
    public static MessageId MessageIdDeviceDrawShaderResourceViewNotSet;
    public static MessageId MessageIdDeviceDrawViewDimensionMismatch;
    public static MessageId MessageIdDeviceDrawVertexBufferStrideTooSmall;
    public static MessageId MessageIdDeviceDrawVertexBufferTooSmall;
    public static MessageId MessageIdDeviceDrawIndexBufferNotSet;
    public static MessageId MessageIdDeviceDrawIndexBufferFormatInvalid;
    public static MessageId MessageIdDeviceDrawIndexBufferTooSmall;
    public static MessageId MessageIdDeviceDrawGeometryShaderInputPrimitiveMismatch;
    public static MessageId MessageIdDeviceDrawResourceReturnTypeMismatch;
    public static MessageId MessageIdDeviceDrawPositionNotPresent;
    public static MessageId MessageIdDeviceDrawOutputStreamNotSet;
    public static MessageId MessageIdDeviceDrawBoundResourceMapped;
    public static MessageId MessageIdDeviceDrawInvalidPrimitivetopology;
    public static MessageId MessageIdDeviceDrawVertexOffsetUnaligned;
    public static MessageId MessageIdDeviceDrawVertexStrideUnaligned;
    public static MessageId MessageIdDeviceDrawIndexOffsetUnaligned;
    public static MessageId MessageIdDeviceDrawOutputStreamOffsetUnaligned;
    public static MessageId MessageIdDeviceDrawResourceFormatLdUnsupported;
    public static MessageId MessageIdDeviceDrawResourceFormatSampleUnsupported;
    public static MessageId MessageIdDeviceDrawResourceFormatSampleCUnsupported;
    public static MessageId MessageIdDeviceDrawResourceMultisampleUnsupported;
    public static MessageId MessageIdDeviceDrawStreamOutputTargetsBoundWithoutSource;
    public static MessageId MessageIdDeviceDrawStreamOutputStrideLargeRThanBuffer;
    public static MessageId MessageIdDeviceDrawOutputMergerRenderTargetDoesNotSupportBlending;
    public static MessageId MessageIdDeviceDrawOutputMergerDualSourceBlendingCanOnlyHaveRenderTarget0;
    public static MessageId MessageIdDeviceRemovalProcessAtFault;
    public static MessageId MessageIdDeviceRemovalProcessPossiblyAtFault;
    public static MessageId MessageIdDeviceRemovalProcessNotAtFault;
    public static MessageId MessageIdDeviceOpenSharedResourceInvalidArgumentReturn;
    public static MessageId MessageIdDeviceOpenSharedResourceOufOfMemoryReturn;
    public static MessageId MessageIdDeviceOpenSharedResourceBadinterfaceReturn;
    public static MessageId MessageIdDeviceDrawViewportNotSet;
    public static MessageId MessageIdCreateInputLayoutTrailingDigitInSemantic;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputTrailingDigitInSemantic;
    public static MessageId MessageIdDeviceRasterizerSetViewportsDenormflush;
    public static MessageId MessageIdOutputMergerSetRenderTargetsInvalidView;
    public static MessageId MessageIdDeviceSetTextFiltersizeInvalidDimensions;
    public static MessageId MessageIdDeviceDrawSamplerMismatch;
    public static MessageId MessageIdCreateInputLayoutTypeMismatch;
    public static MessageId MessageIdBlendStateGetDescriptionLegacy;
    public static MessageId MessageIdShaderResourceViewGetDescriptionLegacy;
    public static MessageId MessageIdCreateQueryOufOfMemoryReturn;
    public static MessageId MessageIdCreatePredicateOufOfMemoryReturn;
    public static MessageId MessageIdCreateCounterOufOfRangeCounter;
    public static MessageId MessageIdCreateCounterSimultaneousActiveCountersExhausted;
    public static MessageId MessageIdCreateCounterUnsupportedWellknownCounter;
    public static MessageId MessageIdCreateCounterOufOfMemoryReturn;
    public static MessageId MessageIdCreateCounterNonexclusiveReturn;
    public static MessageId MessageIdCreateCounterNullDescription;
    public static MessageId MessageIdCheckCounterOufOfRangeCounter;
    public static MessageId MessageIdCheckCounterUnsupportedWellknownCounter;
    public static MessageId MessageIdSetPredicationInvalidPredicateState;
    public static MessageId MessageIdQueryBeginUnsupported;
    public static MessageId MessageIdPredicateBeginDuringPredication;
    public static MessageId MessageIdQueryBeginDuplicate;
    public static MessageId MessageIdQueryBeginAbandoningPreviousResults;
    public static MessageId MessageIdPredicateEndDuringPredication;
    public static MessageId MessageIdQueryEndAbandoningPreviousResults;
    public static MessageId MessageIdQueryEndWithoutBegin;
    public static MessageId MessageIdQueryGetDataInvalidDataSize;
    public static MessageId MessageIdQueryGetDataInvalidFlags;
    public static MessageId MessageIdQueryGetDataInvalidCall;
    public static MessageId MessageIdDeviceDrawPixelShaderOutputTypeMismatch;
    public static MessageId MessageIdDeviceDrawResourceFormatGatherUnsupported;
    public static MessageId MessageIdDeviceDrawInvalidUseOfCenterMultisamplePattern;
    public static MessageId MessageIdDeviceInputAssemblySetVertexBuffersStrideTooLarge;
    public static MessageId MessageIdDeviceInputAssemblySetVertexBuffersInvalidRange;
    public static MessageId MessageIdCreateInputLayoutEmptyLayout;
    public static MessageId MessageIdDeviceDrawResourceSampleCountMismatch;
    public static MessageId MessageIdLiveObjectSummary;
    public static MessageId MessageIdLiveBuffer;
    public static MessageId MessageIdLiveTexture1D;
    public static MessageId MessageIdLiveTexture2D;
    public static MessageId MessageIdLiveTexture3D;
    public static MessageId MessageIdLiveShaderResourceView;
    public static MessageId MessageIdLiveRenderTargetView;
    public static MessageId MessageIdLiveDepthStencilView;
    public static MessageId MessageIdLiveVertexShader;
    public static MessageId MessageIdLiveGeometryShader;
    public static MessageId MessageIdLivePixelShader;
    public static MessageId MessageIdLiveInputLayout;
    public static MessageId MessageIdLiveSampler;
    public static MessageId MessageIdLiveBlendState;
    public static MessageId MessageIdLiveDepthStencilState;
    public static MessageId MessageIdLiveRasterizerstate;
    public static MessageId MessageIdLiveQuery;
    public static MessageId MessageIdLivePredicate;
    public static MessageId MessageIdLiveCounter;
    public static MessageId MessageIdLiveDevice;
    public static MessageId MessageIdLiveSwapchain;
    public static MessageId MessageIdD3D10MessagesEnd;
    public static MessageId MessageIdD3D10L9MessagesStart;
    public static MessageId MessageIdCreateDepthStencilStateStencilNoTwoSided;
    public static MessageId MessageIdCreateRasterizerstateDepthBiasClampNotSupported;
    public static MessageId MessageIdCreateSamplerStateNoComparisonSupport;
    public static MessageId MessageIdCreateSamplerStateExcessiveAnisotropy;
    public static MessageId MessageIdCreateSamplerStateBorderOutOfRange;
    public static MessageId MessageIdVertexShaderSetSamplersNotSupported;
    public static MessageId MessageIdVertexShaderSetSamplersTooManySamplers;
    public static MessageId MessageIdPixelShaderSetSamplersTooManySamplers;
    public static MessageId MessageIdCreateResourceNoArrays;
    public static MessageId MessageIdCreateResourceNoVertexBufferAndIndexBufferBind;
    public static MessageId MessageIdCreateResourceNoTexture1D;
    public static MessageId MessageIdCreateResourceDimensionOutOfRange;
    public static MessageId MessageIdCreateResourceNotBindableAsShaderResource;
    public static MessageId MessageIdOutputMergerSetRenderTargetsTooManyRenderTargets;
    public static MessageId MessageIdOutputMergerSetRenderTargetsNoDifferingBitDepthS;
    public static MessageId MessageIdInputAssemblySetVertexBuffersBadBufferIndex;
    public static MessageId MessageIdDeviceRasterizerSetViewportsTooManyViewports;
    public static MessageId MessageIdDeviceInputAssemblySetPrimitivetopologyWithAdjacencyUnsupported;
    public static MessageId MessageIdDeviceRasterizerSetScissorRectanglesTooManyScissors;
    public static MessageId MessageIdCopyResourceOnlyTexture2DWithinGpuMemory;
    public static MessageId MessageIdCopyResourceNoTexture3DReadback;
    public static MessageId MessageIdCopyResourceNoTextureOnlyReadback;
    public static MessageId MessageIdCreateInputLayoutUnsupportedFormat;
    public static MessageId MessageIdCreateBlendStateNoAlphaToCoverage;
    public static MessageId MessageIdCreateRasterizerstateDepthClipEnableMustBeTrue;
    public static MessageId MessageIdDrawIndexedStartindexlocationMustBePositive;
    public static MessageId MessageIdCreateShaderResourceViewMustUseLowestLod;
    public static MessageId MessageIdCreateSamplerStateMinimumLodMustNotBeFractional;
    public static MessageId MessageIdCreateSamplerStateMaximumLodMustBeFltMaximum;
    public static MessageId MessageIdCreateShaderResourceViewFirstArraySliceMustBeZero;
    public static MessageId MessageIdCreateShaderResourceViewCubeSMustHave6Sides;
    public static MessageId MessageIdCreateResourceNotBindableAsRenderTarget;
    public static MessageId MessageIdCreateResourceNoDwordIndexBuffer;
    public static MessageId MessageIdCreateResourceMSAAPrecludesShaderResource;
    public static MessageId MessageIdCreateResourcePresentationPrecludesShaderResource;
    public static MessageId MessageIdCreateBlendStateNoIndependentBlendEnable;
    public static MessageId MessageIdCreateBlendStateNoIndependentWriteMasks;
    public static MessageId MessageIdCreateResourceNoStreamOut;
    public static MessageId MessageIdCreateResourceOnlyVertexBufferIndexBufferForBuffers;
    public static MessageId MessageIdCreateResourceNoAutogenForVolumes;
    public static MessageId MessageIdCreateResourceDxgiFormatR8G8B8A8CannotBeShared;
    public static MessageId MessageIdVertexShaderShaderResourcesNotSupported;
    public static MessageId MessageIdGeometryShaderNotSupported;
    public static MessageId MessageIdStreamOutNotSupported;
    public static MessageId MessageIdTextFilterNotSupported;
    public static MessageId MessageIdCreateBlendStateNoSeparateAlphaBlend;
    public static MessageId MessageIdCreateBlendStateNoMrtBlend;
    public static MessageId MessageIdCreateBlendStateOperationNotSupported;
    public static MessageId MessageIdCreateSamplerStateNoMirrorOnce;
    public static MessageId MessageIdDrawInstancedNotSupported;
    public static MessageId MessageIdDrawIndexedInstancedNotSupportedBelow93;
    public static MessageId MessageIdDrawIndexedPointListUnsupported;
    public static MessageId MessageIdSetBlendStateSampleMaskCannotBeZero;
    public static MessageId MessageIdCreateResourceDimensionExceedsFeatureLevelDefinition;
    public static MessageId MessageIdCreateResourceOnlySingleMipLevelDepthStencilSupported;
    public static MessageId MessageIdDeviceRasterizerSetScissorRectanglesNegativeScissor;
    public static MessageId MessageIdSlotZeroMustBeD3D10InputPerVertexData;
    public static MessageId MessageIdCreateResourceNonPow2Mipmap;
    public static MessageId MessageIdCreateSamplerStateBorderNotSupported;
    public static MessageId MessageIdOutputMergerSetRenderTargetsNoSRgbMrt;
    public static MessageId MessageIdCopyResourceNo3DMismatchedUpdates;
    public static MessageId MessageIdD3D10L9MessagesEnd;
    public static MessageId MessageIdD3D11MessagesStart;
    public static MessageId MessageIdCreateDepthStencilViewInvalidFlags;
    public static MessageId MessageIdCreateVertexShaderInvalidClassLinkage;
    public static MessageId MessageIdCreateGeometryShaderInvalidClassLinkage;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputInvalidNumstreams;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputInvalidStreamTorasterizer;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputUnexpectedStreams;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputInvalidClassLinkage;
    public static MessageId MessageIdCreatePixelShaderInvalidClassLinkage;
    public static MessageId MessageIdCreateDeferredContextInvalidCommandlistflags;
    public static MessageId MessageIdCreateDeferredContextSingleThreaded;
    public static MessageId MessageIdCreateDeferredContextInvalidArgumentReturn;
    public static MessageId MessageIdCreateDeferredContextInvalidCallReturn;
    public static MessageId MessageIdCreateDeferredContextOufOfMemoryReturn;
    public static MessageId MessageIdFinishDisplayListOnimmediatecontext;
    public static MessageId MessageIdFinishDisplayListOufOfMemoryReturn;
    public static MessageId MessageIdFinishDisplayListInvalidCallReturn;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputInvalidStream;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputUnexpectedEntries;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputUnexpectedStrides;
    public static MessageId MessageIdCreateGeometryShaderWithStreamOutputInvalidNumstrides;
    public static MessageId MessageIdDeviceHullShaderSetShaderResourcesHazard;
    public static MessageId MessageIdDeviceHullShaderSetConstantBuffersHazard;
    public static MessageId MessageIdHullShaderSetShaderResourcesUnbindDeletingObject;
    public static MessageId MessageIdHullShaderSetConstantBuffersUnbindDeletingObject;
    public static MessageId MessageIdCreateHullShaderInvalidCall;
    public static MessageId MessageIdCreateHullShaderOufOfMemory;
    public static MessageId MessageIdCreateHullShaderInvalidShaderBytecode;
    public static MessageId MessageIdCreateHullShaderInvalidShaderType;
    public static MessageId MessageIdCreateHullShaderInvalidClassLinkage;
    public static MessageId MessageIdDeviceHullShaderSetShaderResourcesViewsEmpty;
    public static MessageId MessageIdHullShaderSetConstantBuffersInvalidBuffer;
    public static MessageId MessageIdDeviceHullShaderSetConstantBuffersBuffersEmpty;
    public static MessageId MessageIdDeviceHullShaderSetSamplersSamplersEmpty;
    public static MessageId MessageIdDeviceHullShaderGetShaderResourcesViewsEmpty;
    public static MessageId MessageIdDeviceHullShaderGetConstantBuffersBuffersEmpty;
    public static MessageId MessageIdDeviceHullShaderGetSamplersSamplersEmpty;
    public static MessageId MessageIdDeviceDomainShaderSetShaderResourcesHazard;
    public static MessageId MessageIdDeviceDomainShaderSetConstantBuffersHazard;
    public static MessageId MessageIdDomainShaderSetShaderResourcesUnbindDeletingObject;
    public static MessageId MessageIdDomainShaderSetConstantBuffersUnbindDeletingObject;
    public static MessageId MessageIdCreateDomainShaderInvalidCall;
    public static MessageId MessageIdCreateDomainShaderOufOfMemory;
    public static MessageId MessageIdCreateDomainShaderInvalidShaderBytecode;
    public static MessageId MessageIdCreateDomainShaderInvalidShaderType;
    public static MessageId MessageIdCreateDomainShaderInvalidClassLinkage;
    public static MessageId MessageIdDeviceDomainShaderSetShaderResourcesViewsEmpty;
    public static MessageId MessageIdDomainShaderSetConstantBuffersInvalidBuffer;
    public static MessageId MessageIdDeviceDomainShaderSetConstantBuffersBuffersEmpty;
    public static MessageId MessageIdDeviceDomainShaderSetSamplersSamplersEmpty;
    public static MessageId MessageIdDeviceDomainShaderGetShaderResourcesViewsEmpty;
    public static MessageId MessageIdDeviceDomainShaderGetConstantBuffersBuffersEmpty;
    public static MessageId MessageIdDeviceDomainShaderGetSamplersSamplersEmpty;
    public static MessageId MessageIdDeviceDrawHullShaderXorDomainShaderMismatch;
    public static MessageId MessageIdDeferredContextRemovalProcessAtFault;
    public static MessageId MessageIdDeviceDrawIndirectInvalidArgumentBuffer;
    public static MessageId MessageIdDeviceDrawIndirectOffsetUnaligned;
    public static MessageId MessageIdDeviceDrawIndirectOffsetOverflow;
    public static MessageId MessageIdResourceMapInvalidMaptype;
    public static MessageId MessageIdResourceMapInvalidSubResource;
    public static MessageId MessageIdResourceMapInvalidFlags;
    public static MessageId MessageIdResourceMapAlreadymapped;
    public static MessageId MessageIdResourceMapDeviceremovedReturn;
    public static MessageId MessageIdResourceMapOufOfMemoryReturn;
    public static MessageId MessageIdResourceMapWithoutInitialDiscard;
    public static MessageId MessageIdResourceUnmapInvalidSubResource;
    public static MessageId MessageIdResourceUnmapNotMapped;
    public static MessageId MessageIdDeviceDrawRasterizingControlPoints;
    public static MessageId MessageIdDeviceInputAssemblySetPrimitivetopologyTopologyUnsupported;
    public static MessageId MessageIdDeviceDrawHullShaderDomainShaderSignatureMismatch;
    public static MessageId MessageIdDeviceDrawHullShaderInputTopologyMismatch;
    public static MessageId MessageIdDeviceDrawHullShaderDomainShaderControlPointCountMismatch;
    public static MessageId MessageIdDeviceDrawHullShaderDomainShaderTessellatorDomainMismatch;
    public static MessageId MessageIdCreateContext;
    public static MessageId MessageIdLiveContext;
    public static MessageId MessageIdDestroyContext;
    public static MessageId MessageIdCreateBuffer;
    public static MessageId MessageIdLiveBufferWin7;
    public static MessageId MessageIdDestroyBuffer;
    public static MessageId MessageIdCreateTexture1D;
    public static MessageId MessageIdLiveTexture1DWin7;
    public static MessageId MessageIdDestroyTexture1D;
    public static MessageId MessageIdCreateTexture2D;
    public static MessageId MessageIdLiveTexture2DWin7;
    public static MessageId MessageIdDestroyTexture2D;
    public static MessageId MessageIdCreateTexture3D;
    public static MessageId MessageIdLiveTexture3DWin7;
    public static MessageId MessageIdDestroyTexture3D;
    public static MessageId MessageIdCreateShaderResourceView;
    public static MessageId MessageIdLiveShaderResourceViewWin7;
    public static MessageId MessageIdDestroyShaderResourceView;
    public static MessageId MessageIdCreateRenderTargetView;
    public static MessageId MessageIdLiveRenderTargetViewWin7;
    public static MessageId MessageIdDestroyRenderTargetView;
    public static MessageId MessageIdCreateDepthStencilView;
    public static MessageId MessageIdLiveDepthStencilViewWin7;
    public static MessageId MessageIdDestroyDepthStencilView;
    public static MessageId MessageIdCreateVertexShader;
    public static MessageId MessageIdLiveVertexShaderWin7;
    public static MessageId MessageIdDestroyVertexShader;
    public static MessageId MessageIdCreateHullShader;
    public static MessageId MessageIdLiveHullShader;
    public static MessageId MessageIdDestroyHullShader;
    public static MessageId MessageIdCreateDomainShader;
    public static MessageId MessageIdLiveDomainShader;
    public static MessageId MessageIdDestroyDomainShader;
    public static MessageId MessageIdCreateGeometryShader;
    public static MessageId MessageIdLiveGeometryShaderWin7;
    public static MessageId MessageIdDestroyGeometryShader;
    public static MessageId MessageIdCreatePixelShader;
    public static MessageId MessageIdLivePixelShaderWin7;
    public static MessageId MessageIdDestroyPixelShader;
    public static MessageId MessageIdCreateInputLayout;
    public static MessageId MessageIdLiveInputLayoutWin7;
    public static MessageId MessageIdDestroyInputLayout;
    public static MessageId MessageIdCreateSampler;
    public static MessageId MessageIdLiveSamplerWin7;
    public static MessageId MessageIdDestroySampler;
    public static MessageId MessageIdCreateBlendState;
    public static MessageId MessageIdLiveBlendStateWin7;
    public static MessageId MessageIdDestroyBlendState;
    public static MessageId MessageIdCreateDepthStencilState;
    public static MessageId MessageIdLiveDepthStencilStateWin7;
    public static MessageId MessageIdDestroyDepthStencilState;
    public static MessageId MessageIdCreateRasterizerstate;
    public static MessageId MessageIdLiveRasterizerstateWin7;
    public static MessageId MessageIdDestroyRasterizerstate;
    public static MessageId MessageIdCreateQuery;
    public static MessageId MessageIdLiveQueryWin7;
    public static MessageId MessageIdDestroyQuery;
    public static MessageId MessageIdCreatePredicate;
    public static MessageId MessageIdLivePredicateWin7;
    public static MessageId MessageIdDestroyPredicate;
    public static MessageId MessageIdCreateCounter;
    public static MessageId MessageIdDestroyCounter;
    public static MessageId MessageIdCreateCommandlist;
    public static MessageId MessageIdLiveCommandlist;
    public static MessageId MessageIdDestroyCommandlist;
    public static MessageId MessageIdCreateClassInstance;
    public static MessageId MessageIdLiveClassInstance;
    public static MessageId MessageIdDestroyClassInstance;
    public static MessageId MessageIdCreateClassLinkage;
    public static MessageId MessageIdLiveClassLinkage;
    public static MessageId MessageIdDestroyClassLinkage;
    public static MessageId MessageIdLiveDeviceWin7;
    public static MessageId MessageIdLiveObjectSummaryWin7;
    public static MessageId MessageIdCreateComputeShader;
    public static MessageId MessageIdLiveComputeShader;
    public static MessageId MessageIdDestroyComputeShader;
    public static MessageId MessageIdCreateUnorderedAccessView;
    public static MessageId MessageIdLiveUnorderedAccessView;
    public static MessageId MessageIdDestroyUnorderedAccessView;
    public static MessageId MessageIdDeviceSetShaderInterfacesFeaturelevel;
    public static MessageId MessageIdDeviceSetShaderInterfaceCountMismatch;
    public static MessageId MessageIdDeviceSetShaderInvalidInstance;
    public static MessageId MessageIdDeviceSetShaderInvalidInstanceIndex;
    public static MessageId MessageIdDeviceSetShaderInvalidInstanceType;
    public static MessageId MessageIdDeviceSetShaderInvalidInstanceData;
    public static MessageId MessageIdDeviceSetShaderUnboundInstanceData;
    public static MessageId MessageIdDeviceSetShaderInstanceDataBindingS;
    public static MessageId MessageIdDeviceCreateShaderClassLinkageFull;
    public static MessageId MessageIdDeviceCheckFeaturesupportUnrecognizedFeature;
    public static MessageId MessageIdDeviceCheckFeaturesupportMismatchedDataSize;
    public static MessageId MessageIdDeviceCheckFeaturesupportInvalidArgumentReturn;
    public static MessageId MessageIdDeviceComputeShaderSetShaderResourcesHazard;
    public static MessageId MessageIdDeviceComputeShaderSetConstantBuffersHazard;
    public static MessageId MessageIdComputeShaderSetShaderResourcesUnbindDeletingObject;
    public static MessageId MessageIdComputeShaderSetConstantBuffersUnbindDeletingObject;
    public static MessageId MessageIdCreateComputeShaderInvalidCall;
    public static MessageId MessageIdCreateComputeShaderOufOfMemory;
    public static MessageId MessageIdCreateComputeShaderInvalidShaderBytecode;
    public static MessageId MessageIdCreateComputeShaderInvalidShaderType;
    public static MessageId MessageIdCreateComputeShaderInvalidClassLinkage;
    public static MessageId MessageIdDeviceComputeShaderSetShaderResourcesViewsEmpty;
    public static MessageId MessageIdComputeShaderSetConstantBuffersInvalidBuffer;
    public static MessageId MessageIdDeviceComputeShaderSetConstantBuffersBuffersEmpty;
    public static MessageId MessageIdDeviceComputeShaderSetSamplersSamplersEmpty;
    public static MessageId MessageIdDeviceComputeShaderGetShaderResourcesViewsEmpty;
    public static MessageId MessageIdDeviceComputeShaderGetConstantBuffersBuffersEmpty;
    public static MessageId MessageIdDeviceComputeShaderGetSamplersSamplersEmpty;
    public static MessageId MessageIdDeviceCreateVertexShaderDoubleFloatopsnotsupported;
    public static MessageId MessageIdDeviceCreateHullShaderDoubleFloatopsnotsupported;
    public static MessageId MessageIdDeviceCreateDomainShaderDoubleFloatopsnotsupported;
    public static MessageId MessageIdDeviceCreateGeometryShaderDoubleFloatopsnotsupported;
    public static MessageId MessageIdDeviceCreateGeometryShaderWithStreamOutputDoubleFloatopsnotsupported;
    public static MessageId MessageIdDeviceCreatePixelShaderDoubleFloatopsnotsupported;
    public static MessageId MessageIdDeviceCreateComputeShaderDoubleFloatopsnotsupported;
    public static MessageId MessageIdCreateBufferInvalidStructurestride;
    public static MessageId MessageIdCreateShaderResourceViewInvalidFlags;
    public static MessageId MessageIdCreateUnorderedAccessViewInvalidResource;
    public static MessageId MessageIdCreateUnorderedAccessViewInvalidDescription;
    public static MessageId MessageIdCreateUnorderedAccessViewInvalidFormat;
    public static MessageId MessageIdCreateUnorderedAccessViewInvalidDimensions;
    public static MessageId MessageIdCreateUnorderedAccessViewUnrecognizedFormat;
    public static MessageId MessageIdDeviceOutputMergerSetRenderTargetsAndUnorderedAccessViewsHazard;
    public static MessageId MessageIdDeviceOutputMergerSetRenderTargetsAndUnorderedAccessViewsOverlappingOldSlots;
    public static MessageId MessageIdDeviceOutputMergerSetRenderTargetsAndUnorderedAccessViewsNoOperation;
    public static MessageId MessageIdComputeShaderSetUnorderedAccessViewsUnbindDeletingObject;
    public static MessageId MessageIdPixelShaderSetUnorderedAccessViewsUnbindDeletingObject;
    public static MessageId MessageIdCreateUnorderedAccessViewInvalidArgumentReturn;
    public static MessageId MessageIdCreateUnorderedAccessViewOufOfMemoryReturn;
    public static MessageId MessageIdCreateUnorderedAccessViewTooManyObjects;
    public static MessageId MessageIdDeviceComputeShaderSetUnorderedAccessViewsHazard;
    public static MessageId MessageIdClearunorderedaccessviewDenormflush;
    public static MessageId MessageIdDeviceComputeShaderSetUnorderedAccessSViewsEmpty;
    public static MessageId MessageIdDeviceComputeShaderGetUnorderedAccessSViewsEmpty;
    public static MessageId MessageIdCreateUnorderedAccessViewInvalidFlags;
    public static MessageId MessageIdCreateShaderResesourceviewTooManyObjects;
    public static MessageId MessageIdDeviceDispatchindirectInvalidArgumentBuffer;
    public static MessageId MessageIdDeviceDispatchindirectOffsetUnaligned;
    public static MessageId MessageIdDeviceDispatchindirectOffsetOverflow;
    public static MessageId MessageIdDeviceSetResourceMinimumLodInvalidContext;
    public static MessageId MessageIdDeviceSetResourceMinimumLodInvalidResource;
    public static MessageId MessageIdDeviceSetResourceMinimumLodInvalidMinimumLod;
    public static MessageId MessageIdDeviceGetResourceMinimumLodInvalidContext;
    public static MessageId MessageIdDeviceGetResourceMinimumLodInvalidResource;
    public static MessageId MessageIdOutputMergerSetDepthStencilUnbindDeletingObject;
    public static MessageId MessageIdCleardepthstencilviewDepthReadonly;
    public static MessageId MessageIdCleardepthstencilviewStencilReadonly;
    public static MessageId MessageIdCheckFeaturesupportFormatDeprecated;
    public static MessageId MessageIdDeviceUnorderedAccessViewReturnTypeMismatch;
    public static MessageId MessageIdDeviceUnorderedAccessViewNotSet;
    public static MessageId MessageIdDeviceDrawUnorderedAccessViewRenderTargetViewOverlap;
    public static MessageId MessageIdDeviceUnorderedAccessViewDimensionMismatch;
    public static MessageId MessageIdDeviceUnorderedAccessViewAppendUnsupported;
    public static MessageId MessageIdDeviceUnorderedAccessViewAtomicsUnsupported;
    public static MessageId MessageIdDeviceUnorderedAccessViewStructureStrideMismatch;
    public static MessageId MessageIdDeviceUnorderedAccessViewBufferTypeMismatch;
    public static MessageId MessageIdDeviceUnorderedAccessViewRawUnsupported;
    public static MessageId MessageIdDeviceUnorderedAccessViewFormatLdUnsupported;
    public static MessageId MessageIdDeviceUnorderedAccessViewFormatStoreUnsupported;
    public static MessageId MessageIdDeviceUnorderedAccessViewAtomicAddUnsupported;
    public static MessageId MessageIdDeviceUnorderedAccessViewAtomicBitwiseOperationsUnsupported;
    public static MessageId MessageIdDeviceUnorderedAccessViewAtomicCmpstoreCmpexchangeUnsupported;
    public static MessageId MessageIdDeviceUnorderedAccessViewAtomicExchangeUnsupported;
    public static MessageId MessageIdDeviceUnorderedAccessViewAtomicSignedMinimumMaximumUnsupported;
    public static MessageId MessageIdDeviceUnorderedAccessViewAtomicUnsignedMinimumMaximumUnsupported;
    public static MessageId MessageIdDeviceDispatchBoundResourceMapped;
    public static MessageId MessageIdDeviceDispatchThreadgroupcountOverflow;
    public static MessageId MessageIdDeviceDispatchThreadgroupcountZero;
    public static MessageId MessageIdDeviceShaderResourceViewStructureStrideMismatch;
    public static MessageId MessageIdDeviceShaderResourceViewBufferTypeMismatch;
    public static MessageId MessageIdDeviceShaderResourceViewRawUnsupported;
    public static MessageId MessageIdDeviceDispatchUnsupported;
    public static MessageId MessageIdDeviceDispatchindirectUnsupported;
    public static MessageId MessageIdCopyStructurecountInvalidOffset;
    public static MessageId MessageIdCopyStructurecountLargeOffset;
    public static MessageId MessageIdCopyStructurecountInvalidDestinationState;
    public static MessageId MessageIdCopyStructurecountInvalidSourceState;
    public static MessageId MessageIdCheckFormatSupportFormatNotSupported;
    public static MessageId MessageIdDeviceComputeShaderSetUnorderedAccessViewsInvalidView;
    public static MessageId MessageIdDeviceComputeShaderSetUnorderedAccessViewsInvalidOffset;
    public static MessageId MessageIdDeviceComputeShaderSetUnorderedAccessViewsTooManyViews;
    public static MessageId MessageIdClearunorderedaccessviewfloatInvalidFormat;
    public static MessageId MessageIdDeviceUnorderedAccessViewCounterUnsupported;
    public static MessageId MessageIdRefWarning;
    public static MessageId MessageIdDeviceDrawPixelShaderWithoutRenderTargetViewOrDepthStencilView;
    public static MessageId MessageIdShaderAbort;
    public static MessageId MessageIdShaderMessage;
    public static MessageId MessageIdShaderError;
    public static MessageId MessageIdOfferresourcesInvalidResource;
    public static MessageId MessageIdHullShaderSetSamplersUnbindDeletingObject;
    public static MessageId MessageIdDomainShaderSetSamplersUnbindDeletingObject;
    public static MessageId MessageIdComputeShaderSetSamplersUnbindDeletingObject;
    public static MessageId MessageIdHullShaderSetShaderUnbindDeletingObject;
    public static MessageId MessageIdDomainShaderSetShaderUnbindDeletingObject;
    public static MessageId MessageIdComputeShaderSetShaderUnbindDeletingObject;
    public static MessageId MessageIdEnqueueSetEventInvalidArgumentReturn;
    public static MessageId MessageIdEnqueueSetEventOufOfMemoryReturn;
    public static MessageId MessageIdEnqueueSetEventAccessDeniedReturn;
    public static MessageId MessageIdDeviceOutputMergerSetRenderTargetsAndUnorderedAccessViewsNumuavsInvalidRange;
    public static MessageId MessageIdUseOfZeroRefcountObject;
    public static MessageId MessageIdD3D11MessagesEnd;
    public static MessageId MessageIdD3D111MessagesStart;
    public static MessageId MessageIdCreateVideoDecoder;
    public static MessageId MessageIdCreateVideoProcessorEnum;
    public static MessageId MessageIdCreateVideoProcessor;
    public static MessageId MessageIdCreateDecoderoutputview;
    public static MessageId MessageIdCreateProcessorInputView;
    public static MessageId MessageIdCreateProcessorOutputView;
    public static MessageId MessageIdCreateDevicecontextstate;
    public static MessageId MessageIdLiveVideoDecoder;
    public static MessageId MessageIdLiveVideoProcessorEnum;
    public static MessageId MessageIdLiveVideoProcessor;
    public static MessageId MessageIdLiveDecoderoutputview;
    public static MessageId MessageIdLiveProcessorInputView;
    public static MessageId MessageIdLiveProcessorOutputView;
    public static MessageId MessageIdLiveDevicecontextstate;
    public static MessageId MessageIdDestroyVideoDecoder;
    public static MessageId MessageIdDestroyVideoProcessorEnum;
    public static MessageId MessageIdDestroyVideoProcessor;
    public static MessageId MessageIdDestroyDecoderoutputview;
    public static MessageId MessageIdDestroyProcessorInputView;
    public static MessageId MessageIdDestroyProcessorOutputView;
    public static MessageId MessageIdDestroyDevicecontextstate;
    public static MessageId MessageIdCreateDevicecontextstateInvalidFlags;
    public static MessageId MessageIdCreateDevicecontextstateInvalidFeaturelevel;
    public static MessageId MessageIdCreateDevicecontextstateFeaturelevelsNotSupported;
    public static MessageId MessageIdCreateDevicecontextstateInvalidRefiid;
    public static MessageId MessageIdDeviceDiscardviewInvalidView;
    public static MessageId MessageIdCopySubResourceRegion1InvalidCopyFlags;
    public static MessageId MessageIdUpdatesUbresource1InvalidCopyFlags;
    public static MessageId MessageIdCreateRasterizerstateInvalidForcedSamplecount;
    public static MessageId MessageIdCreateVideoDecoderOufOfMemoryReturn;
    public static MessageId MessageIdCreateVideoDecoderNullParam;
    public static MessageId MessageIdCreateVideoDecoderInvalidFormat;
    public static MessageId MessageIdCreateVideoDecoderZerowidthheight;
    public static MessageId MessageIdCreateVideoDecoderDriverInvalidBufferSize;
    public static MessageId MessageIdCreateVideoDecoderDriverInvalidBufferUsage;
    public static MessageId MessageIdGetVideoDecoderprofilecountOufOfMemory;
    public static MessageId MessageIdGetVideoDecoderprofileNullParam;
    public static MessageId MessageIdGetVideoDecoderprofileInvalidIndex;
    public static MessageId MessageIdGetVideoDecoderprofileOufOfMemoryReturn;
    public static MessageId MessageIdCheckVideoDecoderformatNullParam;
    public static MessageId MessageIdCheckVideoDecoderformatOufOfMemoryReturn;
    public static MessageId MessageIdGetVideoDecoderconfigcountNullParam;
    public static MessageId MessageIdGetVideoDecoderconfigcountOufOfMemoryReturn;
    public static MessageId MessageIdGetVideoDecoderconfigNullParam;
    public static MessageId MessageIdGetVideoDecoderconfigInvalidIndex;
    public static MessageId MessageIdGetVideoDecoderconfigOufOfMemoryReturn;
    public static MessageId MessageIdGetDecodercreationparamsNullParam;
    public static MessageId MessageIdGetDecoderdriverhandleNullParam;
    public static MessageId MessageIdGetDecoderbufferNullParam;
    public static MessageId MessageIdGetDecoderbufferInvalidBuffer;
    public static MessageId MessageIdGetDecoderbufferInvalidType;
    public static MessageId MessageIdGetDecoderbufferLocked;
    public static MessageId MessageIdReleasedecoderbufferNullParam;
    public static MessageId MessageIdReleasedecoderbufferInvalidType;
    public static MessageId MessageIdReleasedecoderbufferNotLocked;
    public static MessageId MessageIdDecoderbeginframeNullParam;
    public static MessageId MessageIdDecoderbeginframeHazard;
    public static MessageId MessageIdDecoderendframeNullParam;
    public static MessageId MessageIdSubMitdecoderbuffersNullParam;
    public static MessageId MessageIdSubMitdecoderbuffersInvalidType;
    public static MessageId MessageIdDecoderextensionNullParam;
    public static MessageId MessageIdDecoderextensionInvalidResource;
    public static MessageId MessageIdCreateVideoProcessorEnumeratorOufOfMemoryReturn;
    public static MessageId MessageIdCreateVideoProcessorEnumeratorNullParam;
    public static MessageId MessageIdCreateVideoProcessorEnumeratorInvalidFrameFormat;
    public static MessageId MessageIdCreateVideoProcessorEnumeratorInvalidUsage;
    public static MessageId MessageIdCreateVideoProcessorEnumeratorInvalidInputFrameRate;
    public static MessageId MessageIdCreateVideoProcessorEnumeratorInvalidOutputFrameRate;
    public static MessageId MessageIdCreateVideoProcessorEnumeratorInvalidWidthheight;
    public static MessageId MessageIdGetVideoProcessorContentdescNullParam;
    public static MessageId MessageIdCheckVideoProcessorFormatNullParam;
    public static MessageId MessageIdGetVideoProcessorCapsNullParam;
    public static MessageId MessageIdGetVideoProcessorRateConversioncapsNullParam;
    public static MessageId MessageIdGetVideoProcessorRateConversioncapsInvalidIndex;
    public static MessageId MessageIdGetVideoProcessorCustomrateNullParam;
    public static MessageId MessageIdGetVideoProcessorCustomrateInvalidIndex;
    public static MessageId MessageIdGetVideoProcessorFilterrangeNullParam;
    public static MessageId MessageIdGetVideoProcessorFilterrangeUnsupported;
    public static MessageId MessageIdCreateVideoProcessorOufOfMemoryReturn;
    public static MessageId MessageIdCreateVideoProcessorNullParam;
    public static MessageId MessageIdVideoProcessorSetOutputTargetRectangleNullParam;
    public static MessageId MessageIdVideoProcessorSetOutputBackgroundColorNullParam;
    public static MessageId MessageIdVideoProcessorSetOutputBackgroundColorInvalidAlpha;
    public static MessageId MessageIdVideoProcessorSetOutputColorSpaceNullParam;
    public static MessageId MessageIdVideoProcessorSetOutputAlphaFillmodeNullParam;
    public static MessageId MessageIdVideoProcessorSetOutputAlphaFillmodeUnsupported;
    public static MessageId MessageIdVideoProcessorSetOutputAlphaFillmodeInvalidStream;
    public static MessageId MessageIdVideoProcessorSetOutputAlphaFillmodeInvalidFillmode;
    public static MessageId MessageIdVideoProcessorSetOutputConstrictionNullParam;
    public static MessageId MessageIdVideoProcessorSetOutputStereoModeNullParam;
    public static MessageId MessageIdVideoProcessorSetOutputStereoModeUnsupported;
    public static MessageId MessageIdVideoProcessorSetOutputExtensionNullParam;
    public static MessageId MessageIdVideoProcessorGetOutputTargetRectangleNullParam;
    public static MessageId MessageIdVideoProcessorGetOutputBackgroundColorNullParam;
    public static MessageId MessageIdVideoProcessorGetOutputColorSpaceNullParam;
    public static MessageId MessageIdVideoProcessorGetOutputAlphaFillmodeNullParam;
    public static MessageId MessageIdVideoProcessorGetOutputConstrictionNullParam;
    public static MessageId MessageIdVideoProcessorSetOutputConstrictionUnsupported;
    public static MessageId MessageIdVideoProcessorSetOutputConstrictionInvalidSize;
    public static MessageId MessageIdVideoProcessorGetOutputStereoModeNullParam;
    public static MessageId MessageIdVideoProcessorGetOutputExtensionNullParam;
    public static MessageId MessageIdVideoProcessorSetStreamFrameFormatNullParam;
    public static MessageId MessageIdVideoProcessorSetStreamFrameFormatInvalidFormat;
    public static MessageId MessageIdVideoProcessorSetStreamFrameFormatInvalidStream;
    public static MessageId MessageIdVideoProcessorSetStreamColorSpaceNullParam;
    public static MessageId MessageIdVideoProcessorSetStreamColorSpaceInvalidStream;
    public static MessageId MessageIdVideoProcessorSetStreamOutputRateNullParam;
    public static MessageId MessageIdVideoProcessorSetStreamOutputRateInvalidRate;
    public static MessageId MessageIdVideoProcessorSetStreamOutputRateInvalidFlags;
    public static MessageId MessageIdVideoProcessorSetStreamOutputRateInvalidStream;
    public static MessageId MessageIdVideoProcessorSetStreamSourceRectangleNullParam;
    public static MessageId MessageIdVideoProcessorSetStreamSourceRectangleInvalidStream;
    public static MessageId MessageIdVideoProcessorSetStreamSourceRectangleInvalidRectangle;
    public static MessageId MessageIdVideoProcessorSetStreamDestinationRectangleNullParam;
    public static MessageId MessageIdVideoProcessorSetStreamDestinationRectangleInvalidStream;
    public static MessageId MessageIdVideoProcessorSetStreamDestinationRectangleInvalidRectangle;
    public static MessageId MessageIdVideoProcessorSetStreamAlphaNullParam;
    public static MessageId MessageIdVideoProcessorSetStreamAlphaInvalidStream;
    public static MessageId MessageIdVideoProcessorSetStreamAlphaInvalidAlpha;
    public static MessageId MessageIdVideoProcessorSetStreamPaletteNullParam;
    public static MessageId MessageIdVideoProcessorSetStreamPaletteInvalidStream;
    public static MessageId MessageIdVideoProcessorSetStreamPaletteInvalidCount;
    public static MessageId MessageIdVideoProcessorSetStreamPaletteInvalidAlpha;
    public static MessageId MessageIdVideoProcessorSetStreamPixelAspectRatioNullParam;
    public static MessageId MessageIdVideoProcessorSetStreamPixelAspectRatioInvalidStream;
    public static MessageId MessageIdVideoProcessorSetStreamPixelAspectRatioInvalidRatio;
    public static MessageId MessageIdVideoProcessorSetStreamLumakeyNullParam;
    public static MessageId MessageIdVideoProcessorSetStreamLumakeyInvalidStream;
    public static MessageId MessageIdVideoProcessorSetStreamLumakeyInvalidRange;
    public static MessageId MessageIdVideoProcessorSetStreamLumakeyUnsupported;
    public static MessageId MessageIdVideoProcessorSetStreamStereoFormatNullParam;
    public static MessageId MessageIdVideoProcessorSetStreamStereoFormatInvalidStream;
    public static MessageId MessageIdVideoProcessorSetStreamStereoFormatUnsupported;
    public static MessageId MessageIdVideoProcessorSetStreamStereoFormatFlipUnsupported;
    public static MessageId MessageIdVideoProcessorSetStreamStereoFormatMonoOffsetUnsupported;
    public static MessageId MessageIdVideoProcessorSetStreamStereoFormatFormatUnsupported;
    public static MessageId MessageIdVideoProcessorSetStreamStereoFormatInvalidFormat;
    public static MessageId MessageIdVideoProcessorSetStreamAutoprocessingmodeNullParam;
    public static MessageId MessageIdVideoProcessorSetStreamAutoprocessingmodeInvalidStream;
    public static MessageId MessageIdVideoProcessorSetStreamFilterNullParam;
    public static MessageId MessageIdVideoProcessorSetStreamFilterInvalidStream;
    public static MessageId MessageIdVideoProcessorSetStreamFilterInvalidFilter;
    public static MessageId MessageIdVideoProcessorSetStreamFilterUnsupported;
    public static MessageId MessageIdVideoProcessorSetStreamFilterInvalidLevel;
    public static MessageId MessageIdVideoProcessorSetStreamExtensionNullParam;
    public static MessageId MessageIdVideoProcessorSetStreamExtensionInvalidStream;
    public static MessageId MessageIdVideoProcessorGetStreamFrameFormatNullParam;
    public static MessageId MessageIdVideoProcessorGetStreamColorSpaceNullParam;
    public static MessageId MessageIdVideoProcessorGetStreamOutputRateNullParam;
    public static MessageId MessageIdVideoProcessorGetStreamSourceRectangleNullParam;
    public static MessageId MessageIdVideoProcessorGetStreamDestinationRectangleNullParam;
    public static MessageId MessageIdVideoProcessorGetStreamAlphaNullParam;
    public static MessageId MessageIdVideoProcessorGetStreamPaletteNullParam;
    public static MessageId MessageIdVideoProcessorGetStreamPixelAspectRatioNullParam;
    public static MessageId MessageIdVideoProcessorGetStreamLumakeyNullParam;
    public static MessageId MessageIdVideoProcessorGetStreamStereoFormatNullParam;
    public static MessageId MessageIdVideoProcessorGetStreamAutoprocessingmodeNullParam;
    public static MessageId MessageIdVideoProcessorGetStreamFilterNullParam;
    public static MessageId MessageIdVideoProcessorGetStreamExtensionNullParam;
    public static MessageId MessageIdVideoProcessorGetStreamExtensionInvalidStream;
    public static MessageId MessageIdVideoProcessorBlitNullParam;
    public static MessageId MessageIdVideoProcessorBlitInvalidStreamCount;
    public static MessageId MessageIdVideoProcessorBlitTargetRectangle;
    public static MessageId MessageIdVideoProcessorBlitInvalidOutput;
    public static MessageId MessageIdVideoProcessorBlitInvalidPastframes;
    public static MessageId MessageIdVideoProcessorBlitInvalidFutureFrames;
    public static MessageId MessageIdVideoProcessorBlitInvalidSourceRectangle;
    public static MessageId MessageIdVideoProcessorBlitInvalidDestinationRectangle;
    public static MessageId MessageIdVideoProcessorBlitInvalidInputResource;
    public static MessageId MessageIdVideoProcessorBlitInvalidArraySize;
    public static MessageId MessageIdVideoProcessorBlitInvalidArray;
    public static MessageId MessageIdVideoProcessorBlitRightexpected;
    public static MessageId MessageIdVideoProcessorBlitRightnotexpected;
    public static MessageId MessageIdVideoProcessorBlitStereoNotEnabled;
    public static MessageId MessageIdVideoProcessorBlitInvalidRightresource;
    public static MessageId MessageIdVideoProcessorBlitNostereostreams;
    public static MessageId MessageIdVideoProcessorBlitInputHazard;
    public static MessageId MessageIdVideoProcessorBlitOutputHazard;
    public static MessageId MessageIdCreateVideoDecoderoutputviewOufOfMemoryReturn;
    public static MessageId MessageIdCreateVideoDecoderoutputviewNullParam;
    public static MessageId MessageIdCreateVideoDecoderoutputviewInvalidType;
    public static MessageId MessageIdCreateVideoDecoderoutputviewInvalidBind;
    public static MessageId MessageIdCreateVideoDecoderoutputviewUnsupportedFormat;
    public static MessageId MessageIdCreateVideoDecoderoutputviewInvalidMip;
    public static MessageId MessageIdCreateVideoDecoderoutputviewUnsupportemip;
    public static MessageId MessageIdCreateVideoDecoderoutputviewInvalidArraySize;
    public static MessageId MessageIdCreateVideoDecoderoutputviewInvalidArray;
    public static MessageId MessageIdCreateVideoDecoderoutputviewInvalidDimension;
    public static MessageId MessageIdCreateVideoProcessorInputViewOufOfMemoryReturn;
    public static MessageId MessageIdCreateVideoProcessorInputViewNullParam;
    public static MessageId MessageIdCreateVideoProcessorInputViewInvalidType;
    public static MessageId MessageIdCreateVideoProcessorInputViewInvalidBind;
    public static MessageId MessageIdCreateVideoProcessorInputViewInvalidMisc;
    public static MessageId MessageIdCreateVideoProcessorInputViewInvalidUsage;
    public static MessageId MessageIdCreateVideoProcessorInputViewInvalidFormat;
    public static MessageId MessageIdCreateVideoProcessorInputViewInvalidFourcc;
    public static MessageId MessageIdCreateVideoProcessorInputViewInvalidMip;
    public static MessageId MessageIdCreateVideoProcessorInputViewUnsupportedMip;
    public static MessageId MessageIdCreateVideoProcessorInputViewInvalidArraySize;
    public static MessageId MessageIdCreateVideoProcessorInputViewInvalidArray;
    public static MessageId MessageIdCreateVideoProcessorInputViewInvalidDimension;
    public static MessageId MessageIdCreateVideoProcessorOutputViewOufOfMemoryReturn;
    public static MessageId MessageIdCreateVideoProcessorOutputViewNullParam;
    public static MessageId MessageIdCreateVideoProcessorOutputViewInvalidType;
    public static MessageId MessageIdCreateVideoProcessorOutputViewInvalidBind;
    public static MessageId MessageIdCreateVideoProcessorOutputViewInvalidFormat;
    public static MessageId MessageIdCreateVideoProcessorOutputViewInvalidMip;
    public static MessageId MessageIdCreateVideoProcessorOutputViewUnsupportedMip;
    public static MessageId MessageIdCreateVideoProcessorOutputViewUnsupportedArray;
    public static MessageId MessageIdCreateVideoProcessorOutputViewInvalidArray;
    public static MessageId MessageIdCreateVideoProcessorOutputViewInvalidDimension;
    public static MessageId MessageIdDeviceDrawInvalidUseOfForcedSampleCount;
    public static MessageId MessageIdCreateBlendStateInvalidLogicOperations;
    public static MessageId MessageIdCreateShaderResourceViewInvalidDarraywithdecoder;
    public static MessageId MessageIdCreateUnorderedAccessViewInvalidDarraywithdecoder;
    public static MessageId MessageIdCreateRenderTargetViewInvalidDarraywithdecoder;
    public static MessageId MessageIdDeviceLockedoutInterface;
    public static MessageId MessageIdRefWarningAtomicInconsistent;
    public static MessageId MessageIdRefWarningReadingUninitializedResource;
    public static MessageId MessageIdRefWarningRawHazard;
    public static MessageId MessageIdRefWarningWarHazard;
    public static MessageId MessageIdRefWarningWawHazard;
    public static MessageId MessageIdCreateCryptosessionNullParam;
    public static MessageId MessageIdCreateCryptosessionOufOfMemoryReturn;
    public static MessageId MessageIdGetCryptotypeNullParam;
    public static MessageId MessageIdGetDecoderprofileNullParam;
    public static MessageId MessageIdGetCryptoSessionCertificateSizeNullParam;
    public static MessageId MessageIdGetCryptoSessionCertificateNullParam;
    public static MessageId MessageIdGetCryptoSessionCertificateWrongSize;
    public static MessageId MessageIdGetCryptoSessionHandleWrongSize;
    public static MessageId MessageIdNegotiatecrpytosessionkeyexchangeNullParam;
    public static MessageId MessageIdEncryptionBlitUnsupported;
    public static MessageId MessageIdEncryptionBlitNullParam;
    public static MessageId MessageIdEncryptionBlitSourceWrongDevice;
    public static MessageId MessageIdEncryptionBlitDestinationWrongDevice;
    public static MessageId MessageIdEncryptionBlitFormatMismatch;
    public static MessageId MessageIdEncryptionBlitSizeMismatch;
    public static MessageId MessageIdEncryptionBlitSourceMultisampled;
    public static MessageId MessageIdEncryptionBlitDestinationNotStaging;
    public static MessageId MessageIdEncryptionBlitSourceMapped;
    public static MessageId MessageIdEncryptionBlitDestinationMapped;
    public static MessageId MessageIdEncryptionBlitSourceOffered;
    public static MessageId MessageIdEncryptionBlitDestinationOffered;
    public static MessageId MessageIdEncryptionBlitSourceContentUndefined;
    public static MessageId MessageIdDecryptionBlitUnsupported;
    public static MessageId MessageIdDecryptionBlitNullParam;
    public static MessageId MessageIdDecryptionBlitSourceWrongDevice;
    public static MessageId MessageIdDecryptionBlitDestinationWrongDevice;
    public static MessageId MessageIdDecryptionBlitFormatMismatch;
    public static MessageId MessageIdDecryptionBlitSizeMismatch;
    public static MessageId MessageIdDecryptionBlitDestinationMultisampled;
    public static MessageId MessageIdDecryptionBlitSourceNotStaging;
    public static MessageId MessageIdDecryptionBlitDestinationNotRenderTarget;
    public static MessageId MessageIdDecryptionBlitSourceMapped;
    public static MessageId MessageIdDecryptionBlitDestinationMapped;
    public static MessageId MessageIdDecryptionBlitSourceOffered;
    public static MessageId MessageIdDecryptionBlitDestinationOffered;
    public static MessageId MessageIdDecryptionBlitSourceContentUndefined;
    public static MessageId MessageIdStartsessionkeyrefreshNullParam;
    public static MessageId MessageIdStartsessionkeyrefreshInvalidSize;
    public static MessageId MessageIdFinishSessionkeyrefreshNullParam;
    public static MessageId MessageIdGetEncryptionBlitKeyNullParam;
    public static MessageId MessageIdGetEncryptionBlitKeyInvalidSize;
    public static MessageId MessageIdGetContentprotectioncapsNullParam;
    public static MessageId MessageIdCheckCryptokeyexchangeNullParam;
    public static MessageId MessageIdCheckCryptokeyexchangeInvalidIndex;
    public static MessageId MessageIdCreateAuthenticatedChannelNullParam;
    public static MessageId MessageIdCreateAuthenticatedChannelUnsupported;
    public static MessageId MessageIdCreateAuthenticatedChannelInvalidType;
    public static MessageId MessageIdCreateAuthenticatedChannelOufOfMemoryReturn;
    public static MessageId MessageIdGetAuthenticatedChannelcertificatesizeInvalidChannel;
    public static MessageId MessageIdGetAuthenticatedChannelcertificatesizeNullParam;
    public static MessageId MessageIdGetAuthenticatedChannelcertificateInvalidChannel;
    public static MessageId MessageIdGetAuthenticatedChannelcertificateNullParam;
    public static MessageId MessageIdGetAuthenticatedChannelcertificateWrongSize;
    public static MessageId MessageIdNegotiateauthenticatedchannelkeyexchangeInvalidChannel;
    public static MessageId MessageIdNegotiateauthenticatedchannelkeyexchangeNullParam;
    public static MessageId MessageIdQueryAuthenticatedChannelNullParam;
    public static MessageId MessageIdQueryAuthenticatedChannelWrongChannel;
    public static MessageId MessageIdQueryAuthenticatedChannelUnsupportedQuery;
    public static MessageId MessageIdQueryAuthenticatedChannelWrongSize;
    public static MessageId MessageIdQueryAuthenticatedChannelInvalidProcessindex;
    public static MessageId MessageIdConfigureauthenticatedchannelNullParam;
    public static MessageId MessageIdConfigureauthenticatedchannelWrongChannel;
    public static MessageId MessageIdConfigureauthenticatedchannelUnsupportedConfigure;
    public static MessageId MessageIdConfigureauthenticatedchannelWrongSize;
    public static MessageId MessageIdConfigureauthenticatedchannelInvalidProcessidtype;
    public static MessageId MessageIdVertexShaderSetConstantBuffersInvalidBufferOffsetorcount;
    public static MessageId MessageIdDomainShaderSetConstantBuffersInvalidBufferOffsetorcount;
    public static MessageId MessageIdHullShaderSetConstantBuffersInvalidBufferOffsetorcount;
    public static MessageId MessageIdGeometryShaderSetConstantBuffersInvalidBufferOffsetorcount;
    public static MessageId MessageIdPixelShaderSetConstantBuffersInvalidBufferOffsetorcount;
    public static MessageId MessageIdComputeShaderSetConstantBuffersInvalidBufferOffsetorcount;
    public static MessageId MessageIdNegotiatecrpytosessionkeyexchangeInvalidSize;
    public static MessageId MessageIdNegotiateauthenticatedchannelkeyexchangeInvalidSize;
    public static MessageId MessageIdOfferresourcesInvalidPriority;
    public static MessageId MessageIdGetCryptoSessionHandleOufOfMemory;
    public static MessageId MessageIdAcquirehandleforcaptureNullParam;
    public static MessageId MessageIdAcquirehandleforcaptureInvalidType;
    public static MessageId MessageIdAcquirehandleforcaptureInvalidBind;
    public static MessageId MessageIdAcquirehandleforcaptureInvalidArray;
    public static MessageId MessageIdVideoProcessorSetStreamRotationNullParam;
    public static MessageId MessageIdVideoProcessorSetStreamRotationInvalidStream;
    public static MessageId MessageIdVideoProcessorSetStreamRotationInvalid;
    public static MessageId MessageIdVideoProcessorSetStreamRotationUnsupported;
    public static MessageId MessageIdVideoProcessorGetStreamRotationNullParam;
    public static MessageId MessageIdDeviceClearviewInvalidView;
    public static MessageId MessageIdDeviceCreateVertexShaderDoubleExtensionSnotsupported;
    public static MessageId MessageIdDeviceCreateVertexShaderShaderExtensionSnotsupported;
    public static MessageId MessageIdDeviceCreateHullShaderDoubleExtensionSnotsupported;
    public static MessageId MessageIdDeviceCreateHullShaderShaderExtensionSnotsupported;
    public static MessageId MessageIdDeviceCreateDomainShaderDoubleExtensionSnotsupported;
    public static MessageId MessageIdDeviceCreateDomainShaderShaderExtensionSnotsupported;
    public static MessageId MessageIdDeviceCreateGeometryShaderDoubleExtensionSnotsupported;
    public static MessageId MessageIdDeviceCreateGeometryShaderShaderExtensionSnotsupported;
    public static MessageId MessageIdDeviceCreateGeometryShaderWithStreamOutputDoubleExtensionSnotsupported;
    public static MessageId MessageIdDeviceCreateGeometryShaderWithStreamOutputShaderExtensionSnotsupported;
    public static MessageId MessageIdDeviceCreatePixelShaderDoubleExtensionSnotsupported;
    public static MessageId MessageIdDeviceCreatePixelShaderShaderExtensionSnotsupported;
    public static MessageId MessageIdDeviceCreateComputeShaderDoubleExtensionSnotsupported;
    public static MessageId MessageIdDeviceCreateComputeShaderShaderExtensionSnotsupported;
    public static MessageId MessageIdDeviceShaderLinkageMinimumPrecision;
    public static MessageId MessageIdVideoProcessorSetStreamAlphaUnsupported;
    public static MessageId MessageIdVideoProcessorSetStreamPixelAspectRatioUnsupported;
    public static MessageId MessageIdDeviceCreateVertexShaderUnorderedAccessViewsNotSupported;
    public static MessageId MessageIdDeviceCreateHullShaderUnorderedAccessViewsNotSupported;
    public static MessageId MessageIdDeviceCreateDomainShaderUnorderedAccessViewsNotSupported;
    public static MessageId MessageIdDeviceCreateGeometryShaderUnorderedAccessViewsNotSupported;
    public static MessageId MessageIdDeviceCreateGeometryShaderWithStreamOutputUnorderedAccessViewsNotSupported;
    public static MessageId MessageIdDeviceCreatePixelShaderUnorderedAccessViewsNotSupported;
    public static MessageId MessageIdDeviceCreateComputeShaderUnorderedAccessViewsNotSupported;
    public static MessageId MessageIdDeviceOutputMergerSetRenderTargetsAndUnorderedAccessViewsInvalidOffset;
    public static MessageId MessageIdDeviceOutputMergerSetRenderTargetsAndUnorderedAccessViewsTooManyViews;
    public static MessageId MessageIdDeviceClearviewNotSupported;
    public static MessageId MessageIdSwapdevicecontextstateNotSupported;
    public static MessageId MessageIdUpdatesUbresourcePreferUpdatesUbresource1;
    public static MessageId MessageIdGetDeviceContextInaccessible;
    public static MessageId MessageIdDeviceClearviewInvalidRectangle;
    public static MessageId MessageIdDeviceDrawSampleMaskIgnoredOnFl9;
    public static MessageId MessageIdDeviceOpenSharedResource1NotSupported;
    public static MessageId MessageIdDeviceOpenSharedResourceByNameNotSupported;
    public static MessageId MessageIdEnqueueSetEventNotSupported;
    public static MessageId MessageIdOfferreleaseNotSupported;
    public static MessageId MessageIdOfferresourcesInaccessible;
    public static MessageId MessageIdCreateVideoProcessorInputViewInvalidMSAA;
    public static MessageId MessageIdCreateVideoProcessorOutputViewInvalidMSAA;
    public static MessageId MessageIdDeviceClearviewInvalidSourceRectangle;
    public static MessageId MessageIdDeviceClearviewEmptyRectangle;
    public static MessageId MessageIdUpdatesUbresourceEmptyDestinationBox;
    public static MessageId MessageIdCopySubResourceRegionEmptySourceBox;
    public static MessageId MessageIdDeviceDrawOutputMergerRenderTargetDoesNotSupportLogicOperations;
    public static MessageId MessageIdDeviceDrawDepthStencilViewNotSet;
    public static MessageId MessageIdDeviceDrawRenderTargetViewNotSet;
    public static MessageId MessageIdDeviceDrawRenderTargetViewNotSetDueToFlipPresent;
    public static MessageId MessageIdDeviceUnorderedAccessViewNotSetDueToFlipPresent;
    public static MessageId MessageIdGetDataFornewhardwarekeyNullParam;
    public static MessageId MessageIdCheckCryptosessionstatusNullParam;
    public static MessageId MessageIdGetCryptoSessionPrivateDataSizeNullParam;
    public static MessageId MessageIdGetVideoDecodercapsNullParam;
    public static MessageId MessageIdGetVideoDecodercapsZerowidthheight;
    public static MessageId MessageIdCheckVideoDecoderdownsamplingNullParam;
    public static MessageId MessageIdCheckVideoDecoderdownsamplingInvalidColorSpace;
    public static MessageId MessageIdCheckVideoDecoderdownsamplingZerowidthheight;
    public static MessageId MessageIdVideoDecoderenabledownsamplingNullParam;
    public static MessageId MessageIdVideoDecoderenabledownsamplingUnsupported;
    public static MessageId MessageIdVideoDecoderupdatedownsamplingNullParam;
    public static MessageId MessageIdVideoDecoderupdatedownsamplingUnsupported;
    public static MessageId MessageIdCheckVideoProcessorFormatConversionNullParam;
    public static MessageId MessageIdVideoProcessorSetOutputColorSpace1NullParam;
    public static MessageId MessageIdVideoProcessorGetOutputColorSpace1NullParam;
    public static MessageId MessageIdVideoProcessorSetStreamColorSpace1NullParam;
    public static MessageId MessageIdVideoProcessorSetStreamColorSpace1InvalidStream;
    public static MessageId MessageIdVideoProcessorSetStreamMirrorNullParam;
    public static MessageId MessageIdVideoProcessorSetStreamMirrorInvalidStream;
    public static MessageId MessageIdVideoProcessorSetStreamMirrorUnsupported;
    public static MessageId MessageIdVideoProcessorGetStreamColorSpace1NullParam;
    public static MessageId MessageIdVideoProcessorGetStreamMirrorNullParam;
    public static MessageId MessageIdRecommendvideodecoderdownsamplingNullParam;
    public static MessageId MessageIdRecommendvideodecoderdownsamplingInvalidColorSpace;
    public static MessageId MessageIdRecommendvideodecoderdownsamplingZerowidthheight;
    public static MessageId MessageIdVideoProcessorSetOutputShaderUsageNullParam;
    public static MessageId MessageIdVideoProcessorGetOutputShaderUsageNullParam;
    public static MessageId MessageIdVideoProcessorGetBehaviorhintsNullParam;
    public static MessageId MessageIdVideoProcessorGetBehaviorhintsInvalidStreamCount;
    public static MessageId MessageIdVideoProcessorGetBehaviorhintsTargetRectangle;
    public static MessageId MessageIdVideoProcessorGetBehaviorhintsInvalidSourceRectangle;
    public static MessageId MessageIdVideoProcessorGetBehaviorhintsInvalidDestinationRectangle;
    public static MessageId MessageIdGetCryptoSessionPrivateDataSizeInvalidKeyExchangeType;
    public static MessageId MessageIdD3D111MessagesEnd;
    public static MessageId MessageIdD3D112MessagesStart;
    public static MessageId MessageIdCreateBufferInvalidUsage;
    public static MessageId MessageIdCreateTexture1DInvalidUsage;
    public static MessageId MessageIdCreateTexture2DInvalidUsage;
    public static MessageId MessageIdCreateInputLayoutLevel9SteprateNot1;
    public static MessageId MessageIdCreateInputLayoutLevel9InstancingNotSupported;
    public static MessageId MessageIdUpdateTilemappingsInvalidParameter;
    public static MessageId MessageIdCopyTilemappingsInvalidParameter;
    public static MessageId MessageIdCopyTilesInvalidParameter;
    public static MessageId MessageIdUpdateTilesInvalidParameter;
    public static MessageId MessageIdResizetilepoolInvalidParameter;
    public static MessageId MessageIdTiledresourcebarrierInvalidParameter;
    public static MessageId MessageIdNullTileMappingAccessWarning;
    public static MessageId MessageIdNullTileMappingAccessError;
    public static MessageId MessageIdDirtyTileMappingAccess;
    public static MessageId MessageIdDuplicateTileMappingsInCoveredArea;
    public static MessageId MessageIdTileMappingsInCoveredAreaDuplicatedOutside;
    public static MessageId MessageIdTileMappingsSharedBetweenIncompatibleResources;
    public static MessageId MessageIdTileMappingsSharedBetweenInputAndOutput;
    public static MessageId MessageIdCheckMultisamplequalitylevelsInvalidFlags;
    public static MessageId MessageIdGetResourceTilingNontiledResource;
    public static MessageId MessageIdResizetilepoolShrinkWithMappingsStillDefinedPastEnd;
    public static MessageId MessageIdNeedToCallTiledresourcebarrier;
    public static MessageId MessageIdCreateDeviceInvalidArguments;
    public static MessageId MessageIdCreateDeviceWarning;
    public static MessageId MessageIdClearunorderedaccessviewuintHazard;
    public static MessageId MessageIdClearunorderedaccessviewfloatHazard;
    public static MessageId MessageIdTiledResourceTier1BufferTextureMismatch;
    public static MessageId MessageIdCreateCryptosession;
    public static MessageId MessageIdCreateAuthenticatedChannel;
    public static MessageId MessageIdLiveCryptosession;
    public static MessageId MessageIdLiveAuthenticatedChannel;
    public static MessageId MessageIdDestroyCryptosession;
    public static MessageId MessageIdDestroyAuthenticatedChannel;
    public static MessageId MessageIdD3D112MessagesEnd;
    public static MessageId MessageIdD3D113MessagesStart;
    public static MessageId MessageIdCreateRasterizerstateInvalidConservativerastermode;
    public static MessageId MessageIdDeviceDrawInvalidSystemvalue;
    public static MessageId MessageIdCreateQueryOrpredicateInvalidContextType;
    public static MessageId MessageIdCreateQueryOrpredicateDecodenotsupported;
    public static MessageId MessageIdCreateQueryOrpredicateEncodenotsupported;
    public static MessageId MessageIdCreateShaderResourceViewInvalidPlaneindex;
    public static MessageId MessageIdCreateShaderResourceViewInvalidVideoPlaneindex;
    public static MessageId MessageIdCreateShaderResourceViewAmbiguousvideoplaneindex;
    public static MessageId MessageIdCreateRenderTargetViewInvalidPlaneindex;
    public static MessageId MessageIdCreateRenderTargetViewInvalidVideoPlaneindex;
    public static MessageId MessageIdCreateRenderTargetViewAmbiguousvideoplaneindex;
    public static MessageId MessageIdCreateUnorderedAccessViewInvalidPlaneindex;
    public static MessageId MessageIdCreateUnorderedAccessViewInvalidVideoPlaneindex;
    public static MessageId MessageIdCreateUnorderedAccessViewAmbiguousvideoplaneindex;
    public static MessageId MessageIdJpegdecodeInvalidScandataoffset;
    public static MessageId MessageIdJpegdecodeNotSupported;
    public static MessageId MessageIdJpegdecodeDimensionstoolarge;
    public static MessageId MessageIdJpegdecodeInvalidComponents;
    public static MessageId MessageIdJpegdecodeDestinationNot2D;
    public static MessageId MessageIdJpegdecodeTiledresourcesunsupported;
    public static MessageId MessageIdJpegdecodeGuardrectsunsupported;
    public static MessageId MessageIdJpegdecodeFormatUnsupported;
    public static MessageId MessageIdJpegdecodeInvalidSubResource;
    public static MessageId MessageIdJpegdecodeInvalidMiplevel;
    public static MessageId MessageIdJpegdecodeEmptyDestinationBox;
    public static MessageId MessageIdJpegdecodeDestinationBoxnot2d;
    public static MessageId MessageIdJpegdecodeDestinationBoxnotsub;
    public static MessageId MessageIdJpegdecodeDestinationBoxesintersect;
    public static MessageId MessageIdJpegdecodeXsubsamplemismatch;
    public static MessageId MessageIdJpegdecodeYsubsamplemismatch;
    public static MessageId MessageIdJpegdecodeXsubsampleodd;
    public static MessageId MessageIdJpegdecodeYsubsampleodd;
    public static MessageId MessageIdJpegdecodeOutputDimensionstoolarge;
    public static MessageId MessageIdJpegdecodeNonpow2scaleunsupported;
    public static MessageId MessageIdJpegdecodeFractionaldownscaletolarge;
    public static MessageId MessageIdJpegdecodeChromasizemismatch;
    public static MessageId MessageIdJpegdecodeLumachromasizemismatch;
    public static MessageId MessageIdJpegdecodeInvalidNumdestinations;
    public static MessageId MessageIdJpegdecodeSubBoxunsupported;
    public static MessageId MessageIdJpegdecode1DEstunsupportedformat;
    public static MessageId MessageIdJpegdecode3DEstunsupportedformat;
    public static MessageId MessageIdJpegdecodeScaleunsupported;
    public static MessageId MessageIdJpegdecodeInvalidSourceSize;
    public static MessageId MessageIdJpegdecodeInvalidCopyFlags;
    public static MessageId MessageIdJpegdecodeHazard;
    public static MessageId MessageIdJpegdecodeUnsupportedSourceBufferUsage;
    public static MessageId MessageIdJpegdecodeUnsupportedSourceBufferMiscFlags;
    public static MessageId MessageIdJpegdecodeUnsupportedDestinationTextureUsage;
    public static MessageId MessageIdJpegdecodeBackbuffernotsupported;
    public static MessageId MessageIdJpegdecodeUnsupprtedcopyflags;
    public static MessageId MessageIdJpegencodeNotSupported;
    public static MessageId MessageIdJpegencodeInvalidScandataoffset;
    public static MessageId MessageIdJpegencodeInvalidComponents;
    public static MessageId MessageIdJpegencodeSourceNot2D;
    public static MessageId MessageIdJpegencodeTiledresourcesunsupported;
    public static MessageId MessageIdJpegencodeGuardrectsunsupported;
    public static MessageId MessageIdJpegencodeXsubsamplemismatch;
    public static MessageId MessageIdJpegencodeYsubsamplemismatch;
    public static MessageId MessageIdJpegencodeFormatUnsupported;
    public static MessageId MessageIdJpegencodeInvalidSubResource;
    public static MessageId MessageIdJpegencodeInvalidMiplevel;
    public static MessageId MessageIdJpegencodeDimensionstoolarge;
    public static MessageId MessageIdJpegencodeHazard;
    public static MessageId MessageIdJpegencodeUnsupportedDestinationBufferUsage;
    public static MessageId MessageIdJpegencodeUnsupportedDestinationBufferMiscFlags;
    public static MessageId MessageIdJpegencodeUnsupportedSourceTextureUsage;
    public static MessageId MessageIdJpegencodeBackbuffernotsupported;
    public static MessageId MessageIdCreateQueryOrpredicateUnsupportedContextTtypeforquery;
    public static MessageId MessageIdFlush1InvalidContextType;
    public static MessageId MessageIdDeviceSetHardwareprotectionInvalidContext;
    public static MessageId MessageIdVideoProcessorSetOutputHdrmetadataNullParam;
    public static MessageId MessageIdVideoProcessorSetOutputHdrmetadataInvalidSize;
    public static MessageId MessageIdVideoProcessorGetOutputHdrmetadataNullParam;
    public static MessageId MessageIdVideoProcessorGetOutputHdrmetadataInvalidSize;
    public static MessageId MessageIdVideoProcessorSetStreamHdrmetadataNullParam;
    public static MessageId MessageIdVideoProcessorSetStreamHdrmetadataInvalidStream;
    public static MessageId MessageIdVideoProcessorSetStreamHdrmetadataInvalidSize;
    public static MessageId MessageIdVideoProcessorGetStreamHdrmetadataNullParam;
    public static MessageId MessageIdVideoProcessorGetStreamHdrmetadataInvalidStream;
    public static MessageId MessageIdVideoProcessorGetStreamHdrmetadataInvalidSize;
    public static MessageId MessageIdVideoProcessorGetStreamFrameFormatInvalidStream;
    public static MessageId MessageIdVideoProcessorGetStreamColorSpaceInvalidStream;
    public static MessageId MessageIdVideoProcessorGetStreamOutputRateInvalidStream;
    public static MessageId MessageIdVideoProcessorGetStreamSourceRectangleInvalidStream;
    public static MessageId MessageIdVideoProcessorGetStreamDestinationRectangleInvalidStream;
    public static MessageId MessageIdVideoProcessorGetStreamAlphaInvalidStream;
    public static MessageId MessageIdVideoProcessorGetStreamPaletteInvalidStream;
    public static MessageId MessageIdVideoProcessorGetStreamPixelAspectRatioInvalidStream;
    public static MessageId MessageIdVideoProcessorGetStreamLumakeyInvalidStream;
    public static MessageId MessageIdVideoProcessorGetStreamStereoFormatInvalidStream;
    public static MessageId MessageIdVideoProcessorGetStreamAutoprocessingmodeInvalidStream;
    public static MessageId MessageIdVideoProcessorGetStreamFilterInvalidStream;
    public static MessageId MessageIdVideoProcessorGetStreamRotationInvalidStream;
    public static MessageId MessageIdVideoProcessorGetStreamColorSpace1InvalidStream;
    public static MessageId MessageIdVideoProcessorGetStreamMirrorInvalidStream;
    public static MessageId MessageIdCreateFence;
    public static MessageId MessageIdLiveFence;
    public static MessageId MessageIdDestroyFence;
    public static MessageId MessageIdD3D113MessagesEnd;
}
public enum SharpDX.Direct3D11.MessageSeverity : Enum {
    public int value__;
    public static MessageSeverity Corruption;
    public static MessageSeverity Error;
    public static MessageSeverity Warning;
    public static MessageSeverity Information;
    public static MessageSeverity Message;
}
internal class SharpDX.Direct3D11.ModuleInit : object {
    [TagAttribute("SharpDX.ModuleInit")]
internal static void Setup();
}
[GuidAttribute("9B7E4E00-342C-4106-A19F-4F2704F689F0")]
public class SharpDX.Direct3D11.Multithread : ComObject {
    public Multithread(IntPtr nativePtr);
    public static Multithread op_Explicit(IntPtr nativePtr);
    public void Enter();
    public void Leave();
    public RawBool SetMultithreadProtected(RawBool bMTProtect);
    public RawBool GetMultithreadProtected();
}
[CompilerGeneratedAttribute]
internal class SharpDX.Direct3D11.NamespaceDoc : object {
}
[GuidAttribute("c0bfa96c-e089-44fb-8eaf-26f8796190da")]
public class SharpDX.Direct3D11.OutputMergerStage : CppObject {
    public static int SimultaneousRenderTargetCount;
    public RawColor4 BlendFactor { get; public set; }
    public int BlendSampleMask { get; public set; }
    public BlendState BlendState { get; public set; }
    public int DepthStencilReference { get; public set; }
    public DepthStencilState DepthStencilState { get; public set; }
    public OutputMergerStage(IntPtr nativePtr);
    public void GetRenderTargets(DepthStencilView& depthStencilViewRef);
    public RenderTargetView[] GetRenderTargets(int numViews);
    public RenderTargetView[] GetRenderTargets(int numViews, DepthStencilView& depthStencilViewRef);
    public BlendState GetBlendState(RawColor4& blendFactor, Int32& sampleMaskRef);
    public DepthStencilState GetDepthStencilState(Int32& stencilRefRef);
    public UnorderedAccessView[] GetUnorderedAccessViews(int startSlot, int count);
    public void ResetTargets();
    public void SetTargets(RenderTargetView[] renderTargetViews);
    public void SetTargets(RenderTargetView renderTargetView);
    public void SetTargets(DepthStencilView depthStencilView, RenderTargetView[] renderTargetViews);
    public void SetTargets(DepthStencilView depthStencilView, int renderTargetCount, RenderTargetView[] renderTargetViews);
    public void SetTargets(DepthStencilView depthStencilView, RenderTargetView renderTargetView);
    public void SetTargets(DepthStencilView depthStencilView, ComArray`1<RenderTargetView> renderTargetViews);
    public void SetTargets(ComArray`1<RenderTargetView> renderTargetViews);
    public void SetTargets(RenderTargetView renderTargetView, int startSlot, UnorderedAccessView[] unorderedAccessViews);
    public void SetTargets(int startSlot, UnorderedAccessView[] unorderedAccessViews, RenderTargetView[] renderTargetViews);
    public void SetTargets(DepthStencilView depthStencilView, RenderTargetView renderTargetView, int startSlot, UnorderedAccessView[] unorderedAccessViews);
    public void SetTargets(DepthStencilView depthStencilView, int startSlot, UnorderedAccessView[] unorderedAccessViews, RenderTargetView[] renderTargetViews);
    public void SetTargets(RenderTargetView renderTargetView, int startSlot, UnorderedAccessView[] unorderedAccessViews, Int32[] initialLengths);
    public void SetTargets(int startSlot, UnorderedAccessView[] unorderedAccessViews, Int32[] initialLengths, RenderTargetView[] renderTargetViews);
    public void SetTargets(DepthStencilView depthStencilView, RenderTargetView renderTargetView, int startSlot, UnorderedAccessView[] unorderedAccessViews, Int32[] initialLengths);
    public void SetTargets(DepthStencilView depthStencilView, int startSlot, UnorderedAccessView[] unorderedAccessViews, Int32[] initialLengths, RenderTargetView[] renderTargetViews);
    private void SetRenderTargets(int numViews, RenderTargetView[] renderTargetViews, DepthStencilView depthStencilViewRef);
    public void SetRenderTargets(DepthStencilView depthStencilView, RenderTargetView renderTargetView);
    public void SetRenderTargets(RenderTargetView renderTargetView);
    public void SetRenderTargets(DepthStencilView depthStencilView, RenderTargetView[] renderTargetViews);
    public void SetUnorderedAccessView(int startSlot, UnorderedAccessView unorderedAccessView);
    public void SetUnorderedAccessView(int startSlot, UnorderedAccessView unorderedAccessView, int uavInitialCount);
    public void SetUnorderedAccessViews(int startSlot, UnorderedAccessView[] unorderedAccessViews);
    public void SetUnorderedAccessViews(int startSlot, UnorderedAccessView[] unorderedAccessViews, Int32[] uavInitialCounts);
    internal void SetRenderTargetsAndUnorderedAccessViews(int numRTVs, RenderTargetView[] renderTargetViewsOut, DepthStencilView depthStencilViewRef, int uAVStartSlot, int numUAVs, UnorderedAccessView[] unorderedAccessViewsOut, Int32[] uAVInitialCountsRef);
    internal void SetRenderTargetsAndUnorderedAccessViews(int numRTVs, ComArray`1<RenderTargetView> renderTargetViewsOut, DepthStencilView depthStencilViewRef, int uAVStartSlot, int numUAVs, ComArray`1<UnorderedAccessView> unorderedAccessViewsOut, Int32[] uAVInitialCountsRef);
    internal void SetRenderTargetsAndKeepUAV(int numRTVs, IntPtr rtvs, DepthStencilView depthStencilViewRef);
    internal void SetUnorderedAccessViewsKeepRTV(int startSlot, int numBuffers, IntPtr unorderedAccessBuffer, IntPtr uavCount);
    public void SetBlendState(BlendState blendStateRef, Nullable`1<RawColor4> blendFactor, UInt32 sampleMask);
    public RawColor4 get_BlendFactor();
    public void set_BlendFactor(RawColor4 value);
    public int get_BlendSampleMask();
    public void set_BlendSampleMask(int value);
    public BlendState get_BlendState();
    public void set_BlendState(BlendState value);
    public int get_DepthStencilReference();
    public void set_DepthStencilReference(int value);
    public DepthStencilState get_DepthStencilState();
    public void set_DepthStencilState(DepthStencilState value);
    public static OutputMergerStage op_Explicit(IntPtr nativePtr);
    internal void SetRenderTargets(int numViews, IntPtr renderTargetViewsOut, DepthStencilView depthStencilViewRef);
    internal void SetRenderTargetsAndUnorderedAccessViews(int numRTVs, IntPtr renderTargetViewsOut, DepthStencilView depthStencilViewRef, int uAVStartSlot, int numUAVs, IntPtr unorderedAccessViewsOut, IntPtr uAVInitialCountsRef);
    public void SetBlendState(BlendState blendStateRef, Nullable`1<RawColor4> blendFactor, int sampleMask);
    public void SetDepthStencilState(DepthStencilState depthStencilStateRef, int stencilRef);
    internal void GetRenderTargets(int numViews, RenderTargetView[] renderTargetViewsOut, DepthStencilView& depthStencilViewOut);
    internal void GetRenderTargetsAndUnorderedAccessViews(int numRTVs, RenderTargetView[] renderTargetViewsOut, DepthStencilView& depthStencilViewOut, int uAVStartSlot, int numUAVs, UnorderedAccessView[] unorderedAccessViewsOut);
    internal void GetBlendState(BlendState& blendStateOut, RawColor4& blendFactor, Int32& sampleMaskRef);
    internal void GetDepthStencilState(DepthStencilState& depthStencilStateOut, Int32& stencilRefRef);
}
public class SharpDX.Direct3D11.PackedMipDescription : ValueType {
    public byte StandardMipCount;
    public byte PackedMipCount;
    public int TilesForPackedMipCount;
    public int StartTileIndexInOverallResource;
}
[GuidAttribute("ea82e40d-51dc-4f33-93d4-db7c9125ae8c")]
public class SharpDX.Direct3D11.PixelShader : DeviceChild {
    public PixelShader(Device device, Byte[] shaderBytecode, ClassLinkage linkage);
    public PixelShader(IntPtr nativePtr);
    public static PixelShader op_Explicit(IntPtr nativePtr);
}
[GuidAttribute("c0bfa96c-e089-44fb-8eaf-26f8796190da")]
public class SharpDX.Direct3D11.PixelShaderStage : CommonShaderStage`1<PixelShader> {
    public static float PixelCenterFractionalComponent;
    public static int FrontfacingDefaultValue;
    public static int FrontfacingFalseValue;
    public static int FrontfacingTrueValue;
    public static int InputRegisterComponents;
    public static int InputRegisterComponentBitCount;
    public static int InputRegisterCount;
    public static int InputRegisterReadsPerInst;
    public static int InputRegisterReadPorts;
    public static int LegacyPixelCenterFractionalComponent;
    public static int OutputDepthRegisterComponents;
    public static int OutputDepthRegisterComponentBitCount;
    public static int OutputDepthRegisterCount;
    public static int OutputMaskRegisterComponents;
    public static int OutputMaskRegisterComponentBitCount;
    public static int OutputMaskRegisterCount;
    public static int OutputRegisterComponents;
    public static int OutputRegisterComponentBitCount;
    public static int OutputRegisterCount;
    public PixelShaderStage(IntPtr nativePtr);
    public static PixelShaderStage op_Explicit(IntPtr nativePtr);
    internal virtual void SetShaderResources(int startSlot, int numViews, IntPtr shaderResourceViewsOut);
    internal virtual void SetShader(PixelShader pixelShaderRef, ClassInstance[] classInstancesOut, int numClassInstances);
    internal virtual void SetSamplers(int startSlot, int numSamplers, IntPtr samplersOut);
    internal virtual void SetConstantBuffers(int startSlot, int numBuffers, IntPtr constantBuffersOut);
    internal virtual void GetShaderResources(int startSlot, int numViews, ShaderResourceView[] shaderResourceViewsOut);
    internal virtual void GetShader(PixelShader& pixelShaderOut, ClassInstance[] classInstancesOut, Int32& numClassInstancesRef);
    internal virtual void GetSamplers(int startSlot, int numSamplers, SamplerState[] samplersOut);
    internal virtual void GetConstantBuffers(int startSlot, int numBuffers, Buffer[] constantBuffersOut);
    internal virtual void SetShader(PixelShader pixelShaderRef, ComArray`1<ClassInstance> classInstancesOut, int numClassInstances);
    private void SetShader(IntPtr pixelShaderRef, IntPtr classInstancesOut, int numClassInstances);
}
[GuidAttribute("9eb576dd-9f77-4d86-81aa-8bab5fe490e2")]
public class SharpDX.Direct3D11.Predicate : Query {
    public Predicate(Device device, QueryDescription description);
    public Predicate(IntPtr nativePtr);
    public static Predicate op_Explicit(IntPtr nativePtr);
}
[GuidAttribute("d6c00747-87b7-425e-b84d-44d108560afd")]
public class SharpDX.Direct3D11.Query : Asynchronous {
    public QueryDescription Description { get; }
    public Query(Device device, QueryDescription description);
    public Query(IntPtr nativePtr);
    public static Query op_Explicit(IntPtr nativePtr);
    public QueryDescription get_Description();
    internal void GetDescription(QueryDescription& descRef);
}
[GuidAttribute("631b4766-36dc-461d-8db6-c47e13e60916")]
public class SharpDX.Direct3D11.Query1 : Query {
    public QueryDescription1 Description1 { get; }
    public Query1(Device3 device, QueryDescription1 description);
    public Query1(IntPtr nativePtr);
    public static Query1 op_Explicit(IntPtr nativePtr);
    public QueryDescription1 get_Description1();
    internal void GetDescription1(QueryDescription1& desc1Ref);
}
public class SharpDX.Direct3D11.QueryDataPipelineStatistics : ValueType {
    public long IAVerticeCount;
    public long IAPrimitiveCount;
    public long VSInvocationCount;
    public long GSInvocationCount;
    public long GSPrimitiveCount;
    public long CInvocationCount;
    public long CPrimitiveCount;
    public long PSInvocationCount;
    public long HSInvocationCount;
    public long DSInvocationCount;
    public long CSInvocationCount;
}
public class SharpDX.Direct3D11.QueryDataTimestampDisjoint : ValueType {
    public long Frequency;
    public RawBool Disjoint;
}
public class SharpDX.Direct3D11.QueryDescription : ValueType {
    public QueryType Type;
    public QueryFlags Flags;
}
public class SharpDX.Direct3D11.QueryDescription1 : ValueType {
    public QueryType Query;
    public int MiscFlags;
    public ContextType ContextType;
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.QueryFlags : Enum {
    public int value__;
    public static QueryFlags Predicatehint;
    public static QueryFlags None;
}
public enum SharpDX.Direct3D11.QueryType : Enum {
    public int value__;
    public static QueryType Event;
    public static QueryType Occlusion;
    public static QueryType Timestamp;
    public static QueryType TimestampDisjoint;
    public static QueryType PipelineStatistics;
    public static QueryType OcclusionPredicate;
    public static QueryType StreamOutputStatistics;
    public static QueryType StreamOutputOverflowPredicate;
    public static QueryType StreamOutputStatisticsStream0;
    public static QueryType StreamOutputOverflowPredicateStream0;
    public static QueryType StreamOutputStatisticsStream1;
    public static QueryType StreamOutputOverflowPredicateStream1;
    public static QueryType StreamOutputStatisticsStream2;
    public static QueryType StreamOutputOverflowPredicateStream2;
    public static QueryType StreamOutputStatisticsStream3;
    public static QueryType StreamOutputOverflowPredicateStream3;
}
[GuidAttribute("c0bfa96c-e089-44fb-8eaf-26f8796190da")]
public class SharpDX.Direct3D11.RasterizerStage : CppObject {
    public RasterizerState State { get; public set; }
    public RasterizerStage(IntPtr nativePtr);
    public T[] GetViewports();
    public void GetViewports(T[] viewports);
    public T[] GetScissorRectangles();
    public void GetScissorRectangles(T[] scissorRectangles);
    public void SetScissorRectangle(int left, int top, int right, int bottom);
    public void SetScissorRectangles(T[] scissorRectangles);
    public void SetViewport(float x, float y, float width, float height, float minZ, float maxZ);
    public void SetViewport(RawViewportF viewport);
    public void SetViewports(RawViewportF[] viewports, int count);
    public void SetViewports(RawViewportF* viewports, int count);
    public static RasterizerStage op_Explicit(IntPtr nativePtr);
    public RasterizerState get_State();
    public void set_State(RasterizerState value);
    internal void SetState(RasterizerState rasterizerStateRef);
    internal void SetViewports(int numViewports, IntPtr viewportsRef);
    internal void SetScissorRects(int numRects, IntPtr rectsRef);
    internal void GetState(RasterizerState& rasterizerStateOut);
    internal void GetViewports(Int32& numViewportsRef, IntPtr viewportsRef);
    internal void GetScissorRects(Int32& numRectsRef, IntPtr rectsRef);
}
[GuidAttribute("9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7")]
public class SharpDX.Direct3D11.RasterizerState : DeviceChild {
    public RasterizerStateDescription Description { get; }
    public RasterizerState(Device device, RasterizerStateDescription description);
    public RasterizerState(IntPtr nativePtr);
    public static RasterizerState op_Explicit(IntPtr nativePtr);
    public RasterizerStateDescription get_Description();
    internal void GetDescription(RasterizerStateDescription& descRef);
}
[GuidAttribute("1217d7a6-5039-418c-b042-9cbe256afd6e")]
public class SharpDX.Direct3D11.RasterizerState1 : RasterizerState {
    public RasterizerStateDescription1 Description1 { get; }
    public RasterizerState1(Device1 device, RasterizerStateDescription1 description);
    public RasterizerState1(IntPtr nativePtr);
    public static RasterizerState1 op_Explicit(IntPtr nativePtr);
    public RasterizerStateDescription1 get_Description1();
    internal void GetDescription1(RasterizerStateDescription1& descRef);
}
[GuidAttribute("6fbd02fb-209f-46c4-b059-2ed15586a6ac")]
public class SharpDX.Direct3D11.RasterizerState2 : RasterizerState1 {
    public RasterizerStateDescription2 Description2 { get; }
    public RasterizerState2(Device3 device, RasterizerStateDescription2 description);
    public RasterizerState2(IntPtr nativePtr);
    public static RasterizerState2 op_Explicit(IntPtr nativePtr);
    public RasterizerStateDescription2 get_Description2();
    internal void GetDescription2(RasterizerStateDescription2& descRef);
}
public class SharpDX.Direct3D11.RasterizerStateDescription : ValueType {
    public FillMode FillMode;
    public CullMode CullMode;
    public RawBool IsFrontCounterClockwise;
    public int DepthBias;
    public float DepthBiasClamp;
    public float SlopeScaledDepthBias;
    public RawBool IsDepthClipEnabled;
    public RawBool IsScissorEnabled;
    public RawBool IsMultisampleEnabled;
    public RawBool IsAntialiasedLineEnabled;
    public static RasterizerStateDescription Default();
}
public class SharpDX.Direct3D11.RasterizerStateDescription1 : ValueType {
    public FillMode FillMode;
    public CullMode CullMode;
    public RawBool IsFrontCounterClockwise;
    public int DepthBias;
    public float DepthBiasClamp;
    public float SlopeScaledDepthBias;
    public RawBool IsDepthClipEnabled;
    public RawBool IsScissorEnabled;
    public RawBool IsMultisampleEnabled;
    public RawBool IsAntialiasedLineEnabled;
    public int ForcedSampleCount;
    public static RasterizerStateDescription1 Default();
}
public class SharpDX.Direct3D11.RasterizerStateDescription2 : ValueType {
    public FillMode FillMode;
    public CullMode CullMode;
    public RawBool IsFrontCounterClockwise;
    public int DepthBias;
    public float DepthBiasClamp;
    public float SlopeScaledDepthBias;
    public RawBool IsDepthClipEnabled;
    public RawBool IsScissorEnabled;
    public RawBool IsMultisampleEnabled;
    public RawBool IsAntialiasedLineEnabled;
    public int ForcedSampleCount;
    public ConservativeRasterizationMode ConservativeRasterizationMode;
}
[GuidAttribute("03916615-c644-418c-9bf4-75db5be63ca0")]
public class SharpDX.Direct3D11.RefDefaultTrackingOptions : ComObject {
    public RefDefaultTrackingOptions(IntPtr nativePtr);
    public static RefDefaultTrackingOptions op_Explicit(IntPtr nativePtr);
    public void SetTrackingOptions(int resourceTypeFlags, int options);
}
[GuidAttribute("193dacdf-0db2-4c05-a55c-ef06cac56fd9")]
public class SharpDX.Direct3D11.RefTrackingOptions : ComObject {
    unknown int TrackingOptions {public set; }
    public RefTrackingOptions(IntPtr nativePtr);
    public static RefTrackingOptions op_Explicit(IntPtr nativePtr);
    public void set_TrackingOptions(int value);
    internal void SetTrackingOptions(int uOptions);
}
public class SharpDX.Direct3D11.RenderTargetBlendDescription : ValueType {
    public RawBool IsBlendEnabled;
    public BlendOption SourceBlend;
    public BlendOption DestinationBlend;
    public BlendOperation BlendOperation;
    public BlendOption SourceAlphaBlend;
    public BlendOption DestinationAlphaBlend;
    public BlendOperation AlphaBlendOperation;
    public ColorWriteMaskFlags RenderTargetWriteMask;
    public RenderTargetBlendDescription(bool isBlendEnabled, BlendOption sourceBlend, BlendOption destinationBlend, BlendOperation blendOperation, BlendOption sourceAlphaBlend, BlendOption destinationAlphaBlend, BlendOperation alphaBlendOperation, ColorWriteMaskFlags renderTargetWriteMask);
    public virtual string ToString();
}
public class SharpDX.Direct3D11.RenderTargetBlendDescription1 : ValueType {
    public RawBool IsBlendEnabled;
    public RawBool IsLogicOperationEnabled;
    public BlendOption SourceBlend;
    public BlendOption DestinationBlend;
    public BlendOperation BlendOperation;
    public BlendOption SourceAlphaBlend;
    public BlendOption DestinationAlphaBlend;
    public BlendOperation AlphaBlendOperation;
    public LogicOperation LogicOperation;
    public ColorWriteMaskFlags RenderTargetWriteMask;
}
[GuidAttribute("dfdba067-0b8d-4865-875b-d7b4516cc164")]
public class SharpDX.Direct3D11.RenderTargetView : ResourceView {
    public RenderTargetViewDescription Description { get; }
    public RenderTargetView(Device device, Resource resource);
    public RenderTargetView(Device device, Resource resource, RenderTargetViewDescription description);
    public RenderTargetView(IntPtr nativePtr);
    public static RenderTargetView op_Explicit(IntPtr nativePtr);
    public RenderTargetViewDescription get_Description();
    internal void GetDescription(RenderTargetViewDescription& descRef);
}
[GuidAttribute("ffbe2e23-f011-418a-ac56-5ceed7c5b94b")]
public class SharpDX.Direct3D11.RenderTargetView1 : RenderTargetView {
    public RenderTargetViewDescription1 Description1 { get; }
    public RenderTargetView1(Device3 device, Resource resource);
    public RenderTargetView1(Device3 device, Resource resource, RenderTargetViewDescription1 description);
    public RenderTargetView1(IntPtr nativePtr);
    public static RenderTargetView1 op_Explicit(IntPtr nativePtr);
    public RenderTargetViewDescription1 get_Description1();
    internal void GetDescription1(RenderTargetViewDescription1& desc1Ref);
}
public class SharpDX.Direct3D11.RenderTargetViewDescription : ValueType {
    public Format Format;
    public RenderTargetViewDimension Dimension;
    public BufferResource Buffer;
    public Texture1DResource Texture1D;
    public Texture1DArrayResource Texture1DArray;
    public Texture2DResource Texture2D;
    public Texture2DArrayResource Texture2DArray;
    public Texture2DMultisampledResource Texture2DMS;
    public Texture2DMultisampledArrayResource Texture2DMSArray;
    public Texture3DResource Texture3D;
}
public class SharpDX.Direct3D11.RenderTargetViewDescription1 : ValueType {
    public Format Format;
    public RenderTargetViewDimension Dimension;
    public BufferResource Buffer;
    public Texture1DResource Texture1D;
    public Texture1DArrayResource Texture1DArray;
    public Texture2DResource Texture2D;
    public Texture2DArrayResource Texture2DArray;
    public Texture2DMultisampledResource Texture2DMS;
    public Texture2DMultisampledArrayResource Texture2DMSArray;
    public Texture3DResource Texture3D;
}
public enum SharpDX.Direct3D11.RenderTargetViewDimension : Enum {
    public int value__;
    public static RenderTargetViewDimension Unknown;
    public static RenderTargetViewDimension Buffer;
    public static RenderTargetViewDimension Texture1D;
    public static RenderTargetViewDimension Texture1DArray;
    public static RenderTargetViewDimension Texture2D;
    public static RenderTargetViewDimension Texture2DArray;
    public static RenderTargetViewDimension Texture2DMultisampled;
    public static RenderTargetViewDimension Texture2DMultisampledArray;
    public static RenderTargetViewDimension Texture3D;
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.ReportingLevel : Enum {
    public int value__;
    public static ReportingLevel Summary;
    public static ReportingLevel Detail;
    public static ReportingLevel IgnoreInternal;
    public static ReportingLevel None;
}
[GuidAttribute("dc8e63f3-d12b-4952-b47b-5e45026a862d")]
public class SharpDX.Direct3D11.Resource : DeviceChild {
    public static int MaximumMipLevels;
    public static int ResourceSizeInMegabytes;
    public static int MaximumTexture1DArraySize;
    public static int MaximumTexture2DArraySize;
    public static int MaximumTexture1DSize;
    public static int MaximumTexture2DSize;
    public static int MaximumTexture3DSize;
    public static int MaximumTextureCubeSize;
    public ResourceDimension Dimension { get; }
    public int EvictionPriority { get; public set; }
    public Resource(IntPtr nativePtr);
    public static T FromSwapChain(SwapChain swapChain, int index);
    public static int CalculateSubResourceIndex(int mipSlice, int arraySlice, int mipLevel);
    public static int CalculateMipSize(int mipLevel, int baseSize);
    public virtual int CalculateSubResourceIndex(int mipSlice, int arraySlice, Int32& mipSize);
    public static Resource op_Explicit(IntPtr nativePtr);
    public ResourceDimension get_Dimension();
    public int get_EvictionPriority();
    public void set_EvictionPriority(int value);
    internal void GetDimension(ResourceDimension& resourceDimensionRef);
    internal void SetEvictionPriority(int evictionPriority);
    internal int GetEvictionPriority();
}
public enum SharpDX.Direct3D11.ResourceDimension : Enum {
    public int value__;
    public static ResourceDimension Unknown;
    public static ResourceDimension Buffer;
    public static ResourceDimension Texture1D;
    public static ResourceDimension Texture2D;
    public static ResourceDimension Texture3D;
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.ResourceOptionFlags : Enum {
    public int value__;
    public static ResourceOptionFlags GenerateMipMaps;
    public static ResourceOptionFlags Shared;
    public static ResourceOptionFlags TextureCube;
    public static ResourceOptionFlags DrawIndirectArguments;
    public static ResourceOptionFlags BufferAllowRawViews;
    public static ResourceOptionFlags BufferStructured;
    public static ResourceOptionFlags ResourceClamp;
    public static ResourceOptionFlags SharedKeyedmutex;
    public static ResourceOptionFlags GdiCompatible;
    public static ResourceOptionFlags SharedNthandle;
    public static ResourceOptionFlags RestrictedContent;
    public static ResourceOptionFlags RestrictSharedResource;
    public static ResourceOptionFlags RestrictSharedResourceDriver;
    public static ResourceOptionFlags Guarded;
    public static ResourceOptionFlags TilePool;
    public static ResourceOptionFlags Tiled;
    public static ResourceOptionFlags HwProtected;
    public static ResourceOptionFlags None;
}
public class SharpDX.Direct3D11.ResourceRegion : ValueType {
    public int Left;
    public int Top;
    public int Front;
    public int Right;
    public int Bottom;
    public int Back;
    public ResourceRegion(int left, int top, int front, int right, int bottom, int back);
}
public enum SharpDX.Direct3D11.ResourceUsage : Enum {
    public int value__;
    public static ResourceUsage Default;
    public static ResourceUsage Immutable;
    public static ResourceUsage Dynamic;
    public static ResourceUsage Staging;
}
[GuidAttribute("839d1216-bb2e-412b-b7f4-a9dbebe08ed1")]
public class SharpDX.Direct3D11.ResourceView : DeviceChild {
    public Resource Resource { get; }
    public ResourceView(IntPtr nativePtr);
    public Resource get_Resource();
    public T ResourceAs();
    public static ResourceView op_Explicit(IntPtr nativePtr);
    internal void GetResource(IntPtr& resourceOut);
}
public static class SharpDX.Direct3D11.ResultCode : object {
    public static ResultDescriptor TooManyUniqueStateObjects;
    public static ResultDescriptor FileNotFound;
    public static ResultDescriptor TooManyUniqueViewObjects;
    public static ResultDescriptor DeferredContextMapWithoutInitialDiscard;
    private static ResultCode();
}
[GuidAttribute("da6fea51-564c-4487-9810-f0d0f9b4e3a5")]
public class SharpDX.Direct3D11.SamplerState : DeviceChild {
    public SamplerStateDescription Description { get; }
    public SamplerState(Device device, SamplerStateDescription description);
    public SamplerState(IntPtr nativePtr);
    public static SamplerState op_Explicit(IntPtr nativePtr);
    public SamplerStateDescription get_Description();
    internal void GetDescription(SamplerStateDescription& descRef);
}
public class SharpDX.Direct3D11.SamplerStateDescription : ValueType {
    public Filter Filter;
    public TextureAddressMode AddressU;
    public TextureAddressMode AddressV;
    public TextureAddressMode AddressW;
    public float MipLodBias;
    public int MaximumAnisotropy;
    public Comparison ComparisonFunction;
    public RawColor4 BorderColor;
    public float MinimumLod;
    public float MaximumLod;
    public static SamplerStateDescription Default();
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.ShaderCacheSupportFlags : Enum {
    public int value__;
    public static ShaderCacheSupportFlags None;
    public static ShaderCacheSupportFlags AutomaticInprocCache;
    public static ShaderCacheSupportFlags AutomaticDiskCache;
}
public enum SharpDX.Direct3D11.ShaderMinimumPrecisionSupport : Enum {
    public int value__;
    public static ShaderMinimumPrecisionSupport Bit10;
    public static ShaderMinimumPrecisionSupport Bit16;
}
[GuidAttribute("b0e06fe0-8192-4e1a-b1ca-36d7414710b2")]
public class SharpDX.Direct3D11.ShaderResourceView : ResourceView {
    public ShaderResourceViewDescription Description { get; }
    public ShaderResourceView(Device device, Resource resource);
    public ShaderResourceView(Device device, Resource resource, ShaderResourceViewDescription description);
    public ShaderResourceView(IntPtr nativePtr);
    public static ShaderResourceView op_Explicit(IntPtr nativePtr);
    public ShaderResourceViewDescription get_Description();
    internal void GetDescription(ShaderResourceViewDescription& descRef);
}
[GuidAttribute("91308b87-9040-411d-8c67-c39253ce3802")]
public class SharpDX.Direct3D11.ShaderResourceView1 : ShaderResourceView {
    public ShaderResourceViewDescription1 Description1 { get; }
    public ShaderResourceView1(Device3 device, Resource resource);
    public ShaderResourceView1(Device3 device, Resource resource, ShaderResourceViewDescription1 description);
    public ShaderResourceView1(IntPtr nativePtr);
    public static ShaderResourceView1 op_Explicit(IntPtr nativePtr);
    public ShaderResourceViewDescription1 get_Description1();
    internal void GetDescription1(ShaderResourceViewDescription1& desc1Ref);
}
public class SharpDX.Direct3D11.ShaderResourceViewDescription : ValueType {
    public Format Format;
    public ShaderResourceViewDimension Dimension;
    public BufferResource Buffer;
    public Texture1DResource Texture1D;
    public Texture1DArrayResource Texture1DArray;
    public Texture2DResource Texture2D;
    public Texture2DArrayResource Texture2DArray;
    public Texture2DMultisampledResource Texture2DMS;
    public Texture2DMultisampledArrayResource Texture2DMSArray;
    public Texture3DResource Texture3D;
    public TextureCubeResource TextureCube;
    public TextureCubeArrayResource TextureCubeArray;
    public ExtendedBufferResource BufferEx;
}
public class SharpDX.Direct3D11.ShaderResourceViewDescription1 : ValueType {
    public Format Format;
    public ShaderResourceViewDimension Dimension;
    public BufferResource Buffer;
    public Texture1DResource Texture1D;
    public Texture1DArrayResource Texture1DArray;
    public Texture2DResource1 Texture2D;
    public Texture2DArrayResource1 Texture2DArray;
    public Texture2DMultisampledResource Texture2DMS;
    public Texture2DMultisampledArrayResource Texture2DMSArray;
    public Texture3DResource Texture3D;
    public TextureCubeResource TextureCube;
    public TextureCubeArrayResource TextureCubeArray;
    public ExtendedBufferResource BufferEx;
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.ShaderResourceViewExtendedBufferFlags : Enum {
    public int value__;
    public static ShaderResourceViewExtendedBufferFlags Raw;
    public static ShaderResourceViewExtendedBufferFlags None;
}
public enum SharpDX.Direct3D11.ShaderTrackingOption : Enum {
    public int value__;
    public static ShaderTrackingOption Ignore;
    public static ShaderTrackingOption TrackUninitialized;
    public static ShaderTrackingOption TrackRaw;
    public static ShaderTrackingOption TrackWar;
    public static ShaderTrackingOption TrackWaw;
    public static ShaderTrackingOption AllowSame;
    public static ShaderTrackingOption TrackAtomicConsistency;
    public static ShaderTrackingOption TrackRawAcrossThreadgroups;
    public static ShaderTrackingOption TrackWarAcrossThreadgroups;
    public static ShaderTrackingOption TrackWawAcrossThreadgroups;
    public static ShaderTrackingOption TrackAtomicConsistencyAcrossThreadgroups;
    public static ShaderTrackingOption UnorderedAccessViewSpecificFlags;
    public static ShaderTrackingOption AllHazards;
    public static ShaderTrackingOption AllHazardsAllowingSame;
    public static ShaderTrackingOption AllOptions;
}
public enum SharpDX.Direct3D11.ShaderTrackingResourceType : Enum {
    public int value__;
    public static ShaderTrackingResourceType None;
    public static ShaderTrackingResourceType UnorderedAccessViewDevicememory;
    public static ShaderTrackingResourceType NonUnorderedAccessViewDevicememory;
    public static ShaderTrackingResourceType AllDevicememory;
    public static ShaderTrackingResourceType GroupsharedMemory;
    public static ShaderTrackingResourceType AllSharedMemory;
    public static ShaderTrackingResourceType GroupsharedNonUnorderedAccessView;
    public static ShaderTrackingResourceType All;
}
public enum SharpDX.Direct3D11.StandardMultisampleQualityLevels : Enum {
    public int value__;
    public static StandardMultisampleQualityLevels StandardMultisamplePattern;
    public static StandardMultisampleQualityLevels CenterMultisamplePattern;
}
public enum SharpDX.Direct3D11.StencilOperation : Enum {
    public int value__;
    public static StencilOperation Keep;
    public static StencilOperation Zero;
    public static StencilOperation Replace;
    public static StencilOperation IncrementAndClamp;
    public static StencilOperation DecrementAndClamp;
    public static StencilOperation Invert;
    public static StencilOperation Increment;
    public static StencilOperation Decrement;
}
public class SharpDX.Direct3D11.StreamOutputBufferBinding : ValueType {
    private Buffer _buffer;
    private int _offset;
    public Buffer Buffer { get; public set; }
    public int Offset { get; public set; }
    public StreamOutputBufferBinding(Buffer buffer, int offset);
    public Buffer get_Buffer();
    public void set_Buffer(Buffer value);
    public int get_Offset();
    public void set_Offset(int value);
}
public class SharpDX.Direct3D11.StreamOutputElement : ValueType {
    public int Stream;
    public string SemanticName;
    public int SemanticIndex;
    public byte StartComponent;
    public byte ComponentCount;
    public byte OutputSlot;
    public StreamOutputElement(int streamIndex, string semanticName, int semanticIndex, byte startComponent, byte componentCount, byte outputSlot);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[GuidAttribute("c0bfa96c-e089-44fb-8eaf-26f8796190da")]
public class SharpDX.Direct3D11.StreamOutputStage : CppObject {
    public StreamOutputStage(IntPtr nativePtr);
    internal void SetTargets(int numBuffers, Buffer[] sOTargetsOut, Int32[] offsetsRef);
    public void SetTarget(Buffer buffer, int offsets);
    public void SetTargets(StreamOutputBufferBinding[] bufferBindings);
    public Buffer[] GetTargets(int numBuffers);
    public static StreamOutputStage op_Explicit(IntPtr nativePtr);
    internal void SetTargets(int numBuffers, IntPtr sOTargetsOut, IntPtr offsetsRef);
    internal void GetTargets(int numBuffers, Buffer[] sOTargetsOut);
}
public class SharpDX.Direct3D11.StreamOutputStatistics : ValueType {
    public long NumPrimitivesWritten;
    public long PrimitivesStorageNeeded;
}
public class SharpDX.Direct3D11.SubResourceTiling : ValueType {
    public int WidthInTiles;
    public short HeightInTiles;
    public short DepthInTiles;
    public int StartTileIndexInOverallResource;
}
[GuidAttribute("1ef337e3-58e7-4f83-a692-db221f5ed47e")]
public class SharpDX.Direct3D11.SwitchToRef : ComObject {
    public SwitchToRef(IntPtr nativePtr);
    public static SwitchToRef op_Explicit(IntPtr nativePtr);
    public RawBool SetUseRef(RawBool useRef);
    public RawBool GetUseRef();
}
[GuidAttribute("f8fb5c27-c6b3-4f75-a4c8-439af2ef564c")]
public class SharpDX.Direct3D11.Texture1D : Resource {
    public Texture1DDescription Description { get; }
    public Texture1D(Device device, Texture1DDescription description);
    public Texture1D(Device device, Texture1DDescription description, DataStream[] data);
    public Texture1D(Device device, Texture1DDescription description, IntPtr[] data);
    public Texture1D(Device device, Texture1DDescription description, DataBox[] data);
    public Texture1D(IntPtr nativePtr);
    public virtual int CalculateSubResourceIndex(int mipSlice, int arraySlice, Int32& mipSize);
    public static Texture1D op_Explicit(IntPtr nativePtr);
    public Texture1DDescription get_Description();
    internal void GetDescription(Texture1DDescription& descRef);
}
public class SharpDX.Direct3D11.Texture1DDescription : ValueType {
    public int Width;
    public int MipLevels;
    public int ArraySize;
    public Format Format;
    public ResourceUsage Usage;
    public BindFlags BindFlags;
    public CpuAccessFlags CpuAccessFlags;
    public ResourceOptionFlags OptionFlags;
}
[GuidAttribute("6f15aaf2-d208-4e89-9ab4-489535d34f9c")]
public class SharpDX.Direct3D11.Texture2D : Resource {
    public Texture2DDescription Description { get; }
    public Texture2D(Device device, Texture2DDescription description);
    public Texture2D(Device device, Texture2DDescription description, DataRectangle[] data);
    public Texture2D(Device device, Texture2DDescription description, DataBox[] data);
    public Texture2D(IntPtr nativePtr);
    public virtual int CalculateSubResourceIndex(int mipSlice, int arraySlice, Int32& mipSize);
    public static Texture2D op_Explicit(IntPtr nativePtr);
    public Texture2DDescription get_Description();
    internal void GetDescription(Texture2DDescription& descRef);
}
[GuidAttribute("51218251-1E33-4617-9CCB-4D3A4367E7BB")]
public class SharpDX.Direct3D11.Texture2D1 : Texture2D {
    public Texture2DDescription1 Description1 { get; }
    public Texture2D1(Device3 device, Texture2DDescription1 description);
    public Texture2D1(Device3 device, Texture2DDescription1 description, DataRectangle[] data);
    public Texture2D1(Device3 device, Texture2DDescription1 description, DataBox[] data);
    public Texture2D1(IntPtr nativePtr);
    public virtual int CalculateSubResourceIndex(int mipSlice, int arraySlice, Int32& mipSize);
    public static Texture2D1 op_Explicit(IntPtr nativePtr);
    public Texture2DDescription1 get_Description1();
    internal void GetDescription1(Texture2DDescription1& descRef);
}
public class SharpDX.Direct3D11.Texture2DArrayVpov : ValueType {
    public int MipSlice;
    public int FirstArraySlice;
    public int ArraySize;
}
public class SharpDX.Direct3D11.Texture2DDescription : ValueType {
    public int Width;
    public int Height;
    public int MipLevels;
    public int ArraySize;
    public Format Format;
    public SampleDescription SampleDescription;
    public ResourceUsage Usage;
    public BindFlags BindFlags;
    public CpuAccessFlags CpuAccessFlags;
    public ResourceOptionFlags OptionFlags;
}
public class SharpDX.Direct3D11.Texture2DDescription1 : ValueType {
    public int Width;
    public int Height;
    public int MipLevels;
    public int ArraySize;
    public Format Format;
    public SampleDescription SampleDescription;
    public ResourceUsage Usage;
    public BindFlags BindFlags;
    public CpuAccessFlags CpuAccessFlags;
    public ResourceOptionFlags OptionFlags;
    public TextureLayout TextureLayout;
}
public class SharpDX.Direct3D11.Texture2DVdov : ValueType {
    public int ArraySlice;
}
public class SharpDX.Direct3D11.Texture2DVpiv : ValueType {
    public int MipSlice;
    public int ArraySlice;
}
public class SharpDX.Direct3D11.Texture2DVpov : ValueType {
    public int MipSlice;
}
[GuidAttribute("037e866e-f56d-4357-a8af-9dabbe6e250e")]
public class SharpDX.Direct3D11.Texture3D : Resource {
    public Texture3DDescription Description { get; }
    public Texture3D(Device device, Texture3DDescription description);
    public Texture3D(Device device, Texture3DDescription description, DataBox[] data);
    public Texture3D(IntPtr nativePtr);
    public virtual int CalculateSubResourceIndex(int mipSlice, int arraySlice, Int32& mipSize);
    public static Texture3D op_Explicit(IntPtr nativePtr);
    public Texture3DDescription get_Description();
    internal void GetDescription(Texture3DDescription& descRef);
}
[GuidAttribute("0C711683-2853-4846-9BB0-F3E60639E46A")]
public class SharpDX.Direct3D11.Texture3D1 : Texture3D {
    public Texture3DDescription1 Description1 { get; }
    public Texture3D1(Device3 device, Texture3DDescription1 description);
    public Texture3D1(Device3 device, Texture3DDescription1 description, DataBox[] data);
    public Texture3D1(IntPtr nativePtr);
    public virtual int CalculateSubResourceIndex(int mipSlice, int arraySlice, Int32& mipSize);
    public static Texture3D1 op_Explicit(IntPtr nativePtr);
    public Texture3DDescription1 get_Description1();
    internal void GetDescription1(Texture3DDescription1& descRef);
}
public class SharpDX.Direct3D11.Texture3DDescription : ValueType {
    public int Width;
    public int Height;
    public int Depth;
    public int MipLevels;
    public Format Format;
    public ResourceUsage Usage;
    public BindFlags BindFlags;
    public CpuAccessFlags CpuAccessFlags;
    public ResourceOptionFlags OptionFlags;
}
public class SharpDX.Direct3D11.Texture3DDescription1 : ValueType {
    public int Width;
    public int Height;
    public int Depth;
    public int MipLevels;
    public Format Format;
    public ResourceUsage Usage;
    public BindFlags BindFlags;
    public CpuAccessFlags CpuAccessFlags;
    public ResourceOptionFlags OptionFlags;
    public TextureLayout TextureLayout;
}
public enum SharpDX.Direct3D11.TextureAddressMode : Enum {
    public int value__;
    public static TextureAddressMode Wrap;
    public static TextureAddressMode Mirror;
    public static TextureAddressMode Clamp;
    public static TextureAddressMode Border;
    public static TextureAddressMode MirrorOnce;
}
public enum SharpDX.Direct3D11.TextureCubeFace : Enum {
    public int value__;
    public static TextureCubeFace PositiveX;
    public static TextureCubeFace NegativeX;
    public static TextureCubeFace PositiveY;
    public static TextureCubeFace NegativeY;
    public static TextureCubeFace PositiveZ;
    public static TextureCubeFace NegativeZ;
}
public enum SharpDX.Direct3D11.TextureLayout : Enum {
    public int value__;
    public static TextureLayout Undefined;
    public static TextureLayout RowMajor;
    public static TextureLayout StandardSwizzle64kb;
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.TileCopyFlags : Enum {
    public int value__;
    public static TileCopyFlags NoOverwrite;
    public static TileCopyFlags LinearBufferToSwizzledTiledResource;
    public static TileCopyFlags SwizzledTiledResourceToLinearBuffer;
    public static TileCopyFlags None;
}
public class SharpDX.Direct3D11.TiledResourceCoordinate : ValueType {
    public int X;
    public int Y;
    public int Z;
    public int Subresource;
}
public enum SharpDX.Direct3D11.TiledResourcesTier : Enum {
    public int value__;
    public static TiledResourcesTier NotSupported;
    public static TiledResourcesTier Tier1;
    public static TiledResourcesTier Tier2;
    public static TiledResourcesTier Tier3;
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.TileMappingFlags : Enum {
    public int value__;
    public static TileMappingFlags NoOverwrite;
    public static TileMappingFlags None;
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.TileRangeFlags : Enum {
    public int value__;
    public static TileRangeFlags Null;
    public static TileRangeFlags Skip;
    public static TileRangeFlags ReuseSingleTile;
    public static TileRangeFlags None;
}
public class SharpDX.Direct3D11.TileRegionSize : ValueType {
    public int TileCount;
    public RawBool BUseBox;
    public int Width;
    public short Height;
    public short Depth;
}
public class SharpDX.Direct3D11.TileShape : ValueType {
    public int WidthInTexels;
    public int HeightInTexels;
    public int DepthInTexels;
}
[GuidAttribute("1911c771-1587-413e-a7e0-fb26c3de0268")]
public class SharpDX.Direct3D11.TracingDevice : ComObject {
    public TracingDevice(IntPtr nativePtr);
    public static TracingDevice op_Explicit(IntPtr nativePtr);
    public void SetShaderTrackingOptionsByType(int resourceTypeFlags, int options);
    public void SetShaderTrackingOptions(IUnknown shaderRef, int options);
}
[GuidAttribute("28acf509-7f5c-48f6-8611-f316010a6380")]
public class SharpDX.Direct3D11.UnorderedAccessView : ResourceView {
    public UnorderedAccessViewDescription Description { get; }
    public UnorderedAccessView(Device device, Resource resource);
    public UnorderedAccessView(Device device, Resource resource, UnorderedAccessViewDescription description);
    public UnorderedAccessView(IntPtr nativePtr);
    public static UnorderedAccessView op_Explicit(IntPtr nativePtr);
    public UnorderedAccessViewDescription get_Description();
    internal void GetDescription(UnorderedAccessViewDescription& descRef);
}
[GuidAttribute("7b3b6153-a886-4544-ab37-6537c8500403")]
public class SharpDX.Direct3D11.UnorderedAccessView1 : UnorderedAccessView {
    public UnorderedAccessViewDescription1 Description1 { get; }
    public UnorderedAccessView1(Device3 device, Resource resource);
    public UnorderedAccessView1(Device3 device, Resource resource, UnorderedAccessViewDescription1 description);
    public UnorderedAccessView1(IntPtr nativePtr);
    public static UnorderedAccessView1 op_Explicit(IntPtr nativePtr);
    public UnorderedAccessViewDescription1 get_Description1();
    internal void GetDescription1(UnorderedAccessViewDescription1& desc1Ref);
}
[FlagsAttribute]
public enum SharpDX.Direct3D11.UnorderedAccessViewBufferFlags : Enum {
    public int value__;
    public static UnorderedAccessViewBufferFlags Raw;
    public static UnorderedAccessViewBufferFlags Append;
    public static UnorderedAccessViewBufferFlags Counter;
    public static UnorderedAccessViewBufferFlags None;
}
public class SharpDX.Direct3D11.UnorderedAccessViewDescription : ValueType {
    public Format Format;
    public UnorderedAccessViewDimension Dimension;
    public BufferResource Buffer;
    public Texture1DResource Texture1D;
    public Texture1DArrayResource Texture1DArray;
    public Texture2DResource Texture2D;
    public Texture2DArrayResource Texture2DArray;
    public Texture3DResource Texture3D;
}
public class SharpDX.Direct3D11.UnorderedAccessViewDescription1 : ValueType {
    public Format Format;
    public UnorderedAccessViewDimension Dimension;
    public BufferResource Buffer;
    public Texture1DResource Texture1D;
    public Texture1DArrayResource Texture1DArray;
    public Texture2DResource Texture2D;
    public Texture2DArrayResource Texture2DArray;
    public Texture3DResource Texture3D;
}
public enum SharpDX.Direct3D11.UnorderedAccessViewDimension : Enum {
    public int value__;
    public static UnorderedAccessViewDimension Unknown;
    public static UnorderedAccessViewDimension Buffer;
    public static UnorderedAccessViewDimension Texture1D;
    public static UnorderedAccessViewDimension Texture1DArray;
    public static UnorderedAccessViewDimension Texture2D;
    public static UnorderedAccessViewDimension Texture2DArray;
    public static UnorderedAccessViewDimension Texture3D;
}
[GuidAttribute("b2daad8b-03d4-4dbf-95eb-32ab4b63d0ab")]
public class SharpDX.Direct3D11.UserDefinedAnnotation : ComObject {
    public RawBool Status { get; }
    public UserDefinedAnnotation(IntPtr nativePtr);
    public static UserDefinedAnnotation op_Explicit(IntPtr nativePtr);
    public RawBool get_Status();
    public int BeginEvent(string name);
    public int EndEvent();
    public void SetMarker(string name);
    internal RawBool GetStatus();
}
public enum SharpDX.Direct3D11.VdovDimension : Enum {
    public int value__;
    public static VdovDimension Unknown;
    public static VdovDimension Texture2D;
}
public class SharpDX.Direct3D11.VertexBufferBinding : ValueType {
    private Buffer m_Buffer;
    private int m_Stride;
    private int m_Offset;
    public Buffer Buffer { get; public set; }
    public int Stride { get; public set; }
    public int Offset { get; public set; }
    public VertexBufferBinding(Buffer buffer, int stride, int offset);
    public Buffer get_Buffer();
    public void set_Buffer(Buffer value);
    public int get_Stride();
    public void set_Stride(int value);
    public int get_Offset();
    public void set_Offset(int value);
}
[GuidAttribute("3b301d64-d678-4289-8897-22f8928b72f3")]
public class SharpDX.Direct3D11.VertexShader : DeviceChild {
    public VertexShader(Device device, Byte[] shaderBytecode, ClassLinkage linkage);
    public VertexShader(IntPtr nativePtr);
    public static VertexShader op_Explicit(IntPtr nativePtr);
}
[GuidAttribute("c0bfa96c-e089-44fb-8eaf-26f8796190da")]
public class SharpDX.Direct3D11.VertexShaderStage : CommonShaderStage`1<VertexShader> {
    public VertexShaderStage(IntPtr nativePtr);
    public static VertexShaderStage op_Explicit(IntPtr nativePtr);
    internal virtual void SetConstantBuffers(int startSlot, int numBuffers, IntPtr constantBuffersOut);
    internal virtual void SetShader(VertexShader vertexShaderRef, ClassInstance[] classInstancesOut, int numClassInstances);
    internal virtual void SetShaderResources(int startSlot, int numViews, IntPtr shaderResourceViewsOut);
    internal virtual void SetSamplers(int startSlot, int numSamplers, IntPtr samplersOut);
    internal virtual void GetConstantBuffers(int startSlot, int numBuffers, Buffer[] constantBuffersOut);
    internal virtual void GetShader(VertexShader& vertexShaderOut, ClassInstance[] classInstancesOut, Int32& numClassInstancesRef);
    internal virtual void GetShaderResources(int startSlot, int numViews, ShaderResourceView[] shaderResourceViewsOut);
    internal virtual void GetSamplers(int startSlot, int numSamplers, SamplerState[] samplersOut);
    internal virtual void SetShader(VertexShader vertexShaderRef, ComArray`1<ClassInstance> classInstancesOut, int numClassInstances);
    private void SetShader(IntPtr vertexShaderRef, IntPtr classInstancesOut, int numClassInstances);
}
public class SharpDX.Direct3D11.VideoColor : ValueType {
    public VideoColorYCbCrA YCbCr;
    public VideoColorRgba Rgba;
}
public class SharpDX.Direct3D11.VideoColorRgba : ValueType {
    public float R;
    public float G;
    public float B;
    public float A;
}
public class SharpDX.Direct3D11.VideoColorYCbCrA : ValueType {
    public float Y;
    public float Cb;
    public float Cr;
    public float A;
}
public class SharpDX.Direct3D11.VideoContentProtectionCaps : ValueType {
    public int Caps;
    public int KeyExchangeTypeCount;
    public int BlockAlignmentSize;
    public long ProtectedMemorySize;
}
[GuidAttribute("61F21C45-3C0E-4a74-9CEA-67100D9AD5E4")]
public class SharpDX.Direct3D11.VideoContext : DeviceChild {
    public VideoContext(IntPtr nativePtr);
    public DataPointer GetDecoderBuffer(VideoDecoder decoder, VideoDecoderBufferType type);
    public static VideoContext op_Explicit(IntPtr nativePtr);
    internal void GetDecoderBuffer(VideoDecoder decoderRef, VideoDecoderBufferType type, Int32& bufferSizeRef, IntPtr& bufferOut);
    public void ReleaseDecoderBuffer(VideoDecoder decoderRef, VideoDecoderBufferType type);
    public void DecoderBeginFrame(VideoDecoder decoderRef, VideoDecoderOutputView viewRef, int contentKeySize, IntPtr contentKeyRef);
    public void DecoderEndFrame(VideoDecoder decoderRef);
    public void SubmitDecoderBuffers(VideoDecoder decoderRef, int numBuffers, VideoDecoderBufferDescription[] bufferDescRef);
    public void DecoderExtension(VideoDecoder decoderRef, VideoDecoderExtension& extensionDataRef);
    public void VideoProcessorSetOutputTargetRect(VideoProcessor videoProcessorRef, RawBool enable, Nullable`1<RawRectangle> rectRef);
    public void VideoProcessorSetOutputBackgroundColor(VideoProcessor videoProcessorRef, RawBool yCbCr, VideoColor colorRef);
    public void VideoProcessorSetOutputColorSpace(VideoProcessor videoProcessorRef, VideoProcessorColorSpace colorSpaceRef);
    public void VideoProcessorSetOutputAlphaFillMode(VideoProcessor videoProcessorRef, VideoProcessorAlphaFillMode alphaFillMode, int streamIndex);
    public void VideoProcessorSetOutputConstriction(VideoProcessor videoProcessorRef, RawBool enable, Size2 size);
    public void VideoProcessorSetOutputStereoMode(VideoProcessor videoProcessorRef, RawBool enable);
    public void VideoProcessorSetOutputExtension(VideoProcessor videoProcessorRef, Guid extensionGuidRef, int dataSize, IntPtr dataRef);
    public void VideoProcessorGetOutputTargetRect(VideoProcessor videoProcessorRef, RawBool& enabled, RawRectangle& rectRef);
    public void VideoProcessorGetOutputBackgroundColor(VideoProcessor videoProcessorRef, RawBool& yCbCrRef, VideoColor& colorRef);
    public void VideoProcessorGetOutputColorSpace(VideoProcessor videoProcessorRef, VideoProcessorColorSpace& colorSpaceRef);
    public void VideoProcessorGetOutputAlphaFillMode(VideoProcessor videoProcessorRef, VideoProcessorAlphaFillMode& alphaFillModeRef, Int32& streamIndexRef);
    public void VideoProcessorGetOutputConstriction(VideoProcessor videoProcessorRef, RawBool& enabledRef, Size2& sizeRef);
    public void VideoProcessorGetOutputStereoMode(VideoProcessor videoProcessorRef, RawBool& enabledRef);
    public void VideoProcessorGetOutputExtension(VideoProcessor videoProcessorRef, Guid extensionGuidRef, int dataSize, IntPtr dataRef);
    public void VideoProcessorSetStreamFrameFormat(VideoProcessor videoProcessorRef, int streamIndex, VideoFrameFormat frameFormat);
    public void VideoProcessorSetStreamColorSpace(VideoProcessor videoProcessorRef, int streamIndex, VideoProcessorColorSpace colorSpaceRef);
    public void VideoProcessorSetStreamOutputRate(VideoProcessor videoProcessorRef, int streamIndex, VideoProcessorOutputRate outputRate, RawBool repeatFrame, Nullable`1<Rational> customRateRef);
    public void VideoProcessorSetStreamSourceRect(VideoProcessor videoProcessorRef, int streamIndex, RawBool enable, Nullable`1<RawRectangle> rectRef);
    public void VideoProcessorSetStreamDestRect(VideoProcessor videoProcessorRef, int streamIndex, RawBool enable, Nullable`1<RawRectangle> rectRef);
    public void VideoProcessorSetStreamAlpha(VideoProcessor videoProcessorRef, int streamIndex, RawBool enable, float alpha);
    public void VideoProcessorSetStreamPalette(VideoProcessor videoProcessorRef, int streamIndex, int count, Int32[] entriesRef);
    public void VideoProcessorSetStreamPixelAspectRatio(VideoProcessor videoProcessorRef, int streamIndex, RawBool enable, Nullable`1<Rational> sourceAspectRatioRef, Nullable`1<Rational> destinationAspectRatioRef);
    public void VideoProcessorSetStreamLumaKey(VideoProcessor videoProcessorRef, int streamIndex, RawBool enable, float lower, float upper);
    public void VideoProcessorSetStreamStereoFormat(VideoProcessor videoProcessorRef, int streamIndex, RawBool enable, VideoProcessorStereoFormat format, RawBool leftViewFrame0, RawBool baseViewFrame0, VideoProcessorStereoFlipMode flipMode, int monoOffset);
    public void VideoProcessorSetStreamAutoProcessingMode(VideoProcessor videoProcessorRef, int streamIndex, RawBool enable);
    public void VideoProcessorSetStreamFilter(VideoProcessor videoProcessorRef, int streamIndex, VideoProcessorFilter filter, RawBool enable, int level);
    public void VideoProcessorSetStreamExtension(VideoProcessor videoProcessorRef, int streamIndex, Guid extensionGuidRef, int dataSize, IntPtr dataRef);
    public void VideoProcessorGetStreamFrameFormat(VideoProcessor videoProcessorRef, int streamIndex, VideoFrameFormat& frameFormatRef);
    public void VideoProcessorGetStreamColorSpace(VideoProcessor videoProcessorRef, int streamIndex, VideoProcessorColorSpace& colorSpaceRef);
    public void VideoProcessorGetStreamOutputRate(VideoProcessor videoProcessorRef, int streamIndex, VideoProcessorOutputRate& outputRateRef, RawBool& repeatFrameRef, Rational& customRateRef);
    public void VideoProcessorGetStreamSourceRect(VideoProcessor videoProcessorRef, int streamIndex, RawBool& enabledRef, RawRectangle& rectRef);
    public void VideoProcessorGetStreamDestRect(VideoProcessor videoProcessorRef, int streamIndex, RawBool& enabledRef, RawRectangle& rectRef);
    public void VideoProcessorGetStreamAlpha(VideoProcessor videoProcessorRef, int streamIndex, RawBool& enabledRef, Single& alphaRef);
    public void VideoProcessorGetStreamPalette(VideoProcessor videoProcessorRef, int streamIndex, int count, Int32[] entriesRef);
    public void VideoProcessorGetStreamPixelAspectRatio(VideoProcessor videoProcessorRef, int streamIndex, RawBool& enabledRef, Rational& sourceAspectRatioRef, Rational& destinationAspectRatioRef);
    public void VideoProcessorGetStreamLumaKey(VideoProcessor videoProcessorRef, int streamIndex, RawBool& enabledRef, Single& lowerRef, Single& upperRef);
    public void VideoProcessorGetStreamStereoFormat(VideoProcessor videoProcessorRef, int streamIndex, RawBool& enableRef, VideoProcessorStereoFormat& formatRef, RawBool& leftViewFrame0Ref, RawBool& baseViewFrame0Ref, VideoProcessorStereoFlipMode& flipModeRef, Int32& monoOffset);
    public void VideoProcessorGetStreamAutoProcessingMode(VideoProcessor videoProcessorRef, int streamIndex, RawBool& enabledRef);
    public void VideoProcessorGetStreamFilter(VideoProcessor videoProcessorRef, int streamIndex, VideoProcessorFilter filter, RawBool& enabledRef, Int32& levelRef);
    public void VideoProcessorGetStreamExtension(VideoProcessor videoProcessorRef, int streamIndex, Guid extensionGuidRef, int dataSize, IntPtr dataRef);
    public void VideoProcessorBlt(VideoProcessor videoProcessorRef, VideoProcessorOutputView viewRef, int outputFrame, int streamCount, VideoProcessorStream[] streamsRef);
    public void NegotiateCryptoSessionKeyExchange(CryptoSession cryptoSessionRef, int dataSize, IntPtr dataRef);
    public void EncryptionBlt(CryptoSession cryptoSessionRef, Texture2D srcSurfaceRef, Texture2D dstSurfaceRef, int iVSize, IntPtr iVRef);
    public void DecryptionBlt(CryptoSession cryptoSessionRef, Texture2D srcSurfaceRef, Texture2D dstSurfaceRef, Nullable`1<EncryptedBlockInformation> encryptedBlockInfoRef, int contentKeySize, IntPtr contentKeyRef, int iVSize, IntPtr iVRef);
    public void StartSessionKeyRefresh(CryptoSession cryptoSessionRef, int randomNumberSize, IntPtr randomNumberRef);
    public void FinishSessionKeyRefresh(CryptoSession cryptoSessionRef);
    public void GetEncryptionBltKey(CryptoSession cryptoSessionRef, int keySize, IntPtr readbackKeyRef);
    public void NegotiateAuthenticatedChannelKeyExchange(AuthenticatedChannel channelRef, int dataSize, IntPtr dataRef);
    public void QueryAuthenticatedChannel(AuthenticatedChannel channelRef, int inputSize, IntPtr inputRef, int outputSize, IntPtr outputRef);
    public void ConfigureAuthenticatedChannel(AuthenticatedChannel channelRef, int inputSize, IntPtr inputRef, AuthenticatedConfigureOutput& outputRef);
    public void VideoProcessorSetStreamRotation(VideoProcessor videoProcessorRef, int streamIndex, RawBool enable, VideoProcessorRotation rotation);
    public void VideoProcessorGetStreamRotation(VideoProcessor videoProcessorRef, int streamIndex, RawBool& enableRef, VideoProcessorRotation& rotationRef);
}
[GuidAttribute("A7F026DA-A5F8-4487-A564-15E34357651E")]
public class SharpDX.Direct3D11.VideoContext1 : VideoContext {
    public VideoContext1(IntPtr nativePtr);
    public static VideoContext1 op_Explicit(IntPtr nativePtr);
    public void SubmitDecoderBuffers1(VideoDecoder decoderRef, int numBuffers, VideoDecoderBufferDescription1[] bufferDescRef);
    public void GetDataForNewHardwareKey(CryptoSession cryptoSessionRef, int privateInputSize, IntPtr privatInputDataRef, Int64& privateOutputDataRef);
    public void CheckCryptoSessionStatus(CryptoSession cryptoSessionRef, CryptoSessionStatus& statusRef);
    public void DecoderEnableDownsampling(VideoDecoder decoderRef, ColorSpaceType inputColorSpace, VideoSampleDescription outputDescRef, int referenceFrameCount);
    public void DecoderUpdateDownsampling(VideoDecoder decoderRef, VideoSampleDescription outputDescRef);
    public void VideoProcessorSetOutputColorSpace1(VideoProcessor videoProcessorRef, ColorSpaceType colorSpace);
    public void VideoProcessorSetOutputShaderUsage(VideoProcessor videoProcessorRef, RawBool shaderUsage);
    public void VideoProcessorGetOutputColorSpace1(VideoProcessor videoProcessorRef, ColorSpaceType& colorSpaceRef);
    public void VideoProcessorGetOutputShaderUsage(VideoProcessor videoProcessorRef, RawBool& shaderUsageRef);
    public void VideoProcessorSetStreamColorSpace1(VideoProcessor videoProcessorRef, int streamIndex, ColorSpaceType colorSpace);
    public void VideoProcessorSetStreamMirror(VideoProcessor videoProcessorRef, int streamIndex, RawBool enable, RawBool flipHorizontal, RawBool flipVertical);
    public void VideoProcessorGetStreamColorSpace1(VideoProcessor videoProcessorRef, int streamIndex, ColorSpaceType& colorSpaceRef);
    public void VideoProcessorGetStreamMirror(VideoProcessor videoProcessorRef, int streamIndex, RawBool& enableRef, RawBool& flipHorizontalRef, RawBool& flipVerticalRef);
    public void VideoProcessorGetBehaviorHints(VideoProcessor videoProcessorRef, int outputWidth, int outputHeight, Format outputFormat, int streamCount, VideoProcessorStreamBehaviorHint[] streamsRef, Int32& behaviorHintsRef);
}
[GuidAttribute("C4E7374C-6243-4D1B-AE87-52B4F740E261")]
public class SharpDX.Direct3D11.VideoContext2 : VideoContext1 {
    public VideoContext2(IntPtr nativePtr);
    public static VideoContext2 op_Explicit(IntPtr nativePtr);
    public void VideoProcessorSetOutputHDRMetaData(VideoProcessor videoProcessorRef, HdrMetadataType type, int size, IntPtr hDRMetaDataRef);
    public void VideoProcessorGetOutputHDRMetaData(VideoProcessor videoProcessorRef, HdrMetadataType& typeRef, int size, IntPtr metaDataRef);
    public void VideoProcessorSetStreamHDRMetaData(VideoProcessor videoProcessorRef, int streamIndex, HdrMetadataType type, int size, IntPtr hDRMetaDataRef);
    public void VideoProcessorGetStreamHDRMetaData(VideoProcessor videoProcessorRef, int streamIndex, HdrMetadataType& typeRef, int size, IntPtr metaDataRef);
}
[GuidAttribute("3C9C5B51-995D-48d1-9B8D-FA5CAEDED65C")]
public class SharpDX.Direct3D11.VideoDecoder : DeviceChild {
    public IntPtr DriverHandle { get; }
    public VideoDecoder(IntPtr nativePtr);
    public static VideoDecoder op_Explicit(IntPtr nativePtr);
    public IntPtr get_DriverHandle();
    public void GetCreationParameters(VideoDecoderDescription& videoDescRef, VideoDecoderConfig& configRef);
    internal void GetDriverHandle(IntPtr& driverHandleRef);
}
public class SharpDX.Direct3D11.VideoDecoderBeginFrameCryptoSession : ValueType {
    public CryptoSession PCryptoSession;
    public int BlobSize;
    public IntPtr PBlob;
    public IntPtr PKeyInfoId;
    public int PrivateDataSize;
    public IntPtr PPrivateData;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.VideoDecoderBufferDescription : ValueType {
    public VideoDecoderBufferType BufferType;
    public int BufferIndex;
    public int DataOffset;
    public int DataSize;
    public int FirstMBaddress;
    public int NumMBsInBuffer;
    public int Width;
    public int Height;
    public int Stride;
    public int ReservedBits;
    public IntPtr PIV;
    public int IVSize;
    public RawBool PartialEncryption;
    public EncryptedBlockInformation EncryptedBlockInfo;
}
public class SharpDX.Direct3D11.VideoDecoderBufferDescription1 : ValueType {
    public VideoDecoderBufferType BufferType;
    public int DataOffset;
    public int DataSize;
    public IntPtr PIV;
    public int IVSize;
    public IntPtr PSubSampleMappingBlock;
    public int SubSampleMappingCount;
}
public enum SharpDX.Direct3D11.VideoDecoderBufferType : Enum {
    public int value__;
    public static VideoDecoderBufferType PictureParameters;
    public static VideoDecoderBufferType MacroblockControl;
    public static VideoDecoderBufferType ResidualDifference;
    public static VideoDecoderBufferType DeblockingControl;
    public static VideoDecoderBufferType InverseQuantizationMatrix;
    public static VideoDecoderBufferType SliceControl;
    public static VideoDecoderBufferType Bitstream;
    public static VideoDecoderBufferType MotionVector;
    public static VideoDecoderBufferType FilmGrain;
}
public enum SharpDX.Direct3D11.VideoDecoderCaps : Enum {
    public int value__;
    public static VideoDecoderCaps Downsample;
    public static VideoDecoderCaps NonRealTime;
    public static VideoDecoderCaps DownsampleDynamic;
    public static VideoDecoderCaps DownsampleRequired;
    public static VideoDecoderCaps Unsupported;
}
public class SharpDX.Direct3D11.VideoDecoderConfig : ValueType {
    public Guid GuidConfigBitstreamEncryption;
    public Guid GuidConfigMBcontrolEncryption;
    public Guid GuidConfigResidDiffEncryption;
    public int ConfigBitstreamRaw;
    public int ConfigMBcontrolRasterOrder;
    public int ConfigResidDiffHost;
    public int ConfigSpatialResid8;
    public int ConfigResid8Subtraction;
    public int ConfigSpatialHost8or9Clipping;
    public int ConfigSpatialResidInterleaved;
    public int ConfigIntraResidUnsigned;
    public int ConfigResidDiffAccelerator;
    public int ConfigHostInverseScan;
    public int ConfigSpecificIDCT;
    public int Config4GroupedCoefs;
    public short ConfigMinRenderTargetBuffCount;
    public short ConfigDecoderSpecific;
}
public class SharpDX.Direct3D11.VideoDecoderDescription : ValueType {
    public Guid Guid;
    public int SampleWidth;
    public int SampleHeight;
    public Format OutputFormat;
}
public class SharpDX.Direct3D11.VideoDecoderExtension : ValueType {
    public int Function;
    public IntPtr PPrivateInputData;
    public int PrivateInputDataSize;
    public IntPtr PPrivateOutputData;
    public int PrivateOutputDataSize;
    public int ResourceCount;
    public Resource PpResourceList;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[GuidAttribute("C2931AEA-2A85-4f20-860F-FBA1FD256E18")]
public class SharpDX.Direct3D11.VideoDecoderOutputView : ResourceView {
    public VideoDecoderOutputViewDescription Description { get; }
    public VideoDecoderOutputView(IntPtr nativePtr);
    public static VideoDecoderOutputView op_Explicit(IntPtr nativePtr);
    public VideoDecoderOutputViewDescription get_Description();
    internal void GetDescription(VideoDecoderOutputViewDescription& descRef);
}
public class SharpDX.Direct3D11.VideoDecoderOutputViewDescription : ValueType {
    public Guid DecodeProfile;
    public VdovDimension Dimension;
    public Texture2DVdov Texture2D;
}
public class SharpDX.Direct3D11.VideoDecoderSubSampleMappingBlock : ValueType {
    public int ClearSize;
    public int EncryptedSize;
}
[GuidAttribute("10EC4D5B-975A-4689-B9E4-D0AAC30FE333")]
public class SharpDX.Direct3D11.VideoDevice : ComObject {
    public int VideoDecoderProfileCount { get; }
    public VideoDevice(IntPtr nativePtr);
    public static VideoDevice op_Explicit(IntPtr nativePtr);
    public int get_VideoDecoderProfileCount();
    public void CreateVideoDecoder(VideoDecoderDescription& videoDescRef, VideoDecoderConfig& configRef, VideoDecoder& decoderOut);
    public void CreateVideoProcessor(VideoProcessorEnumerator enumRef, int rateConversionIndex, VideoProcessor& videoProcessorOut);
    public void CreateAuthenticatedChannel(AuthenticatedChannelType channelType, AuthenticatedChannel& authenticatedChannelOut);
    public void CreateCryptoSession(Guid cryptoTypeRef, Nullable`1<Guid> decoderProfileRef, Guid keyExchangeTypeRef, CryptoSession& cryptoSessionOut);
    public void CreateVideoDecoderOutputView(Resource resourceRef, VideoDecoderOutputViewDescription& descRef, VideoDecoderOutputView& vDOVViewOut);
    public void CreateVideoProcessorInputView(Resource resourceRef, VideoProcessorEnumerator enumRef, VideoProcessorInputViewDescription descRef, VideoProcessorInputView& vPIViewOut);
    public void CreateVideoProcessorOutputView(Resource resourceRef, VideoProcessorEnumerator enumRef, VideoProcessorOutputViewDescription descRef, VideoProcessorOutputView& vPOViewOut);
    public void CreateVideoProcessorEnumerator(VideoProcessorContentDescription& descRef, VideoProcessorEnumerator& enumOut);
    internal int GetVideoDecoderProfileCount();
    public void GetVideoDecoderProfile(int index, Guid& decoderProfileRef);
    public void CheckVideoDecoderFormat(Guid decoderProfileRef, Format format, RawBool& supportedRef);
    public void GetVideoDecoderConfigCount(VideoDecoderDescription& descRef, Int32& countRef);
    public void GetVideoDecoderConfig(VideoDecoderDescription& descRef, int index, VideoDecoderConfig& configRef);
    public void GetContentProtectionCaps(Nullable`1<Guid> cryptoTypeRef, Nullable`1<Guid> decoderProfileRef, VideoContentProtectionCaps& capsRef);
    public void CheckCryptoKeyExchange(Guid cryptoTypeRef, Nullable`1<Guid> decoderProfileRef, int index, Guid& keyExchangeTypeRef);
    public void SetPrivateData(Guid guid, int dataSize, IntPtr dataRef);
    public void SetPrivateDataInterface(Guid guid, IUnknown dataRef);
}
[GuidAttribute("29DA1D51-1321-4454-804B-F5FC9F861F0F")]
public class SharpDX.Direct3D11.VideoDevice1 : VideoDevice {
    public VideoDevice1(IntPtr nativePtr);
    public static VideoDevice1 op_Explicit(IntPtr nativePtr);
    public void GetCryptoSessionPrivateDataSize(Guid cryptoTypeRef, Nullable`1<Guid> decoderProfileRef, Guid keyExchangeTypeRef, Int32& privateInputSizeRef, Int32& privateOutputSizeRef);
    public void GetVideoDecoderCaps(Guid decoderProfileRef, int sampleWidth, int sampleHeight, Rational frameRateRef, int bitRate, Nullable`1<Guid> cryptoTypeRef, Int32& decoderCapsRef);
    public void CheckVideoDecoderDownsampling(VideoDecoderDescription& inputDescRef, ColorSpaceType inputColorSpace, VideoDecoderConfig& inputConfigRef, Rational frameRateRef, VideoSampleDescription outputDescRef, RawBool& supportedRef, RawBool& realTimeHintRef);
    public void RecommendVideoDecoderDownsampleParameters(VideoDecoderDescription& inputDescRef, ColorSpaceType inputColorSpace, VideoDecoderConfig& inputConfigRef, Rational frameRateRef, VideoSampleDescription& recommendedOutputDescRef);
}
public enum SharpDX.Direct3D11.VideoFrameFormat : Enum {
    public int value__;
    public static VideoFrameFormat Progressive;
    public static VideoFrameFormat InterlacedTopFieldFirst;
    public static VideoFrameFormat InterlacedBottomFieldFirst;
}
[GuidAttribute("1D7B0652-185F-41c6-85CE-0C5BE3D4AE6C")]
public class SharpDX.Direct3D11.VideoProcessor : DeviceChild {
    public VideoProcessorContentDescription ContentDescription { get; }
    public VideoProcessorRateConversionCaps RateConversionCaps { get; }
    public VideoProcessor(IntPtr nativePtr);
    public static VideoProcessor op_Explicit(IntPtr nativePtr);
    public VideoProcessorContentDescription get_ContentDescription();
    public VideoProcessorRateConversionCaps get_RateConversionCaps();
    internal void GetContentDescription(VideoProcessorContentDescription& descRef);
    internal void GetRateConversionCaps(VideoProcessorRateConversionCaps& capsRef);
}
public enum SharpDX.Direct3D11.VideoProcessorAlphaFillMode : Enum {
    public int value__;
    public static VideoProcessorAlphaFillMode Opaque;
    public static VideoProcessorAlphaFillMode Background;
    public static VideoProcessorAlphaFillMode Destination;
    public static VideoProcessorAlphaFillMode SourceStream;
}
public enum SharpDX.Direct3D11.VideoProcessorAutoStreamCaps : Enum {
    public int value__;
    public static VideoProcessorAutoStreamCaps Denoise;
    public static VideoProcessorAutoStreamCaps Deringing;
    public static VideoProcessorAutoStreamCaps EdgeEnhancement;
    public static VideoProcessorAutoStreamCaps ColorCorrection;
    public static VideoProcessorAutoStreamCaps FleshToneMapping;
    public static VideoProcessorAutoStreamCaps ImageStabilization;
    public static VideoProcessorAutoStreamCaps SuperResolution;
    public static VideoProcessorAutoStreamCaps AnamorphicScaling;
}
public enum SharpDX.Direct3D11.VideoProcessorBehaviorHints : Enum {
    public int value__;
    public static VideoProcessorBehaviorHints MultiplaneOverlayRotation;
    public static VideoProcessorBehaviorHints MultiplaneOverlayResize;
    public static VideoProcessorBehaviorHints MultiplaneOverlayColorSpaceConversion;
    public static VideoProcessorBehaviorHints TripleBufferOutput;
}
public class SharpDX.Direct3D11.VideoProcessorCaps : ValueType {
    public int DeviceCaps;
    public int FeatureCaps;
    public int FilterCaps;
    public int InputFormatCaps;
    public int AutoStreamCaps;
    public int StereoCaps;
    public int RateConversionCapsCount;
    public int MaxInputStreams;
    public int MaxStreamStates;
}
public class SharpDX.Direct3D11.VideoProcessorColorSpace : ValueType {
    internal int _Usage;
    internal int _RgbRange;
    internal int _YCbCrMatrix;
    internal int _YCbCrXvYCC;
    internal int _NominalRange;
    internal int _Reserved;
    public bool Usage { get; public set; }
    public bool RgbRange { get; public set; }
    public bool YCbCrMatrix { get; public set; }
    public bool YCbCrXvYCC { get; public set; }
    public int NominalRange { get; public set; }
    public int Reserved { get; public set; }
    public bool get_Usage();
    public void set_Usage(bool value);
    public bool get_RgbRange();
    public void set_RgbRange(bool value);
    public bool get_YCbCrMatrix();
    public void set_YCbCrMatrix(bool value);
    public bool get_YCbCrXvYCC();
    public void set_YCbCrXvYCC(bool value);
    public int get_NominalRange();
    public void set_NominalRange(int value);
    public int get_Reserved();
    public void set_Reserved(int value);
}
public class SharpDX.Direct3D11.VideoProcessorContentDescription : ValueType {
    public VideoFrameFormat InputFrameFormat;
    public Rational InputFrameRate;
    public int InputWidth;
    public int InputHeight;
    public Rational OutputFrameRate;
    public int OutputWidth;
    public int OutputHeight;
    public VideoUsage Usage;
}
public class SharpDX.Direct3D11.VideoProcessorCustomRate : ValueType {
    public Rational CustomRate;
    public int OutputFrames;
    public RawBool InputInterlaced;
    public int InputFramesOrFields;
}
public enum SharpDX.Direct3D11.VideoProcessorDeviceCaps : Enum {
    public int value__;
    public static VideoProcessorDeviceCaps LinearSpace;
    public static VideoProcessorDeviceCaps XvYCC;
    public static VideoProcessorDeviceCaps RgbRangeConversion;
    public static VideoProcessorDeviceCaps YCbCrMatrixConversion;
    public static VideoProcessorDeviceCaps NominalRange;
}
[GuidAttribute("31627037-53AB-4200-9061-05FAA9AB45F9")]
public class SharpDX.Direct3D11.VideoProcessorEnumerator : DeviceChild {
    public VideoProcessorContentDescription VideoProcessorContentDescription { get; }
    public VideoProcessorCaps VideoProcessorCaps { get; }
    public VideoProcessorEnumerator(IntPtr nativePtr);
    public static VideoProcessorEnumerator op_Explicit(IntPtr nativePtr);
    public VideoProcessorContentDescription get_VideoProcessorContentDescription();
    public VideoProcessorCaps get_VideoProcessorCaps();
    internal void GetVideoProcessorContentDescription(VideoProcessorContentDescription& contentDescRef);
    public void CheckVideoProcessorFormat(Format format, Int32& flagsRef);
    internal void GetVideoProcessorCaps(VideoProcessorCaps& capsRef);
    public void GetVideoProcessorRateConversionCaps(int typeIndex, VideoProcessorRateConversionCaps& capsRef);
    public void GetVideoProcessorCustomRate(int typeIndex, int customRateIndex, VideoProcessorCustomRate& rateRef);
    public void GetVideoProcessorFilterRange(VideoProcessorFilter filter, VideoProcessorFilterRange& rangeRef);
}
[GuidAttribute("465217F2-5568-43CF-B5B9-F61D54531CA1")]
public class SharpDX.Direct3D11.VideoProcessorEnumerator1 : VideoProcessorEnumerator {
    public VideoProcessorEnumerator1(IntPtr nativePtr);
    public static VideoProcessorEnumerator1 op_Explicit(IntPtr nativePtr);
    public void CheckVideoProcessorFormatConversion(Format inputFormat, ColorSpaceType inputColorSpace, Format outputFormat, ColorSpaceType outputColorSpace, RawBool& supportedRef);
}
public enum SharpDX.Direct3D11.VideoProcessorFeatureCaps : Enum {
    public int value__;
    public static VideoProcessorFeatureCaps AlphaFill;
    public static VideoProcessorFeatureCaps Constriction;
    public static VideoProcessorFeatureCaps LumaKey;
    public static VideoProcessorFeatureCaps AlphaPalette;
    public static VideoProcessorFeatureCaps Legacy;
    public static VideoProcessorFeatureCaps Stereo;
    public static VideoProcessorFeatureCaps Rotation;
    public static VideoProcessorFeatureCaps AlphaStream;
    public static VideoProcessorFeatureCaps PixelAspectRatio;
    public static VideoProcessorFeatureCaps Mirror;
    public static VideoProcessorFeatureCaps ShaderUsage;
    public static VideoProcessorFeatureCaps MetadataHdr10;
}
public enum SharpDX.Direct3D11.VideoProcessorFilter : Enum {
    public int value__;
    public static VideoProcessorFilter Brightness;
    public static VideoProcessorFilter Contrast;
    public static VideoProcessorFilter Hue;
    public static VideoProcessorFilter Saturation;
    public static VideoProcessorFilter NoiseReduction;
    public static VideoProcessorFilter EdgeEnhancement;
    public static VideoProcessorFilter AnamorphicScaling;
    public static VideoProcessorFilter StereoAdjustment;
}
public enum SharpDX.Direct3D11.VideoProcessorFilterCaps : Enum {
    public int value__;
    public static VideoProcessorFilterCaps Brightness;
    public static VideoProcessorFilterCaps Contrast;
    public static VideoProcessorFilterCaps Hue;
    public static VideoProcessorFilterCaps Saturation;
    public static VideoProcessorFilterCaps NoiseReduction;
    public static VideoProcessorFilterCaps EdgeEnhancement;
    public static VideoProcessorFilterCaps AnamorphicScaling;
    public static VideoProcessorFilterCaps StereoAdjustment;
}
public class SharpDX.Direct3D11.VideoProcessorFilterRange : ValueType {
    public int Minimum;
    public int Maximum;
    public int Default;
    public float Multiplier;
}
public enum SharpDX.Direct3D11.VideoProcessorFormatCaps : Enum {
    public int value__;
    public static VideoProcessorFormatCaps RgbInterlaced;
    public static VideoProcessorFormatCaps RgbProcamp;
    public static VideoProcessorFormatCaps RgbLumaKey;
    public static VideoProcessorFormatCaps PaletteInterlaced;
}
public enum SharpDX.Direct3D11.VideoProcessorFormatSupport : Enum {
    public int value__;
    public static VideoProcessorFormatSupport Input;
    public static VideoProcessorFormatSupport Output;
}
[GuidAttribute("11EC5A5F-51DC-4945-AB34-6E8C21300EA5")]
public class SharpDX.Direct3D11.VideoProcessorInputView : ResourceView {
    public VideoProcessorInputViewDescription Description { get; }
    public VideoProcessorInputView(IntPtr nativePtr);
    public static VideoProcessorInputView op_Explicit(IntPtr nativePtr);
    public VideoProcessorInputViewDescription get_Description();
    internal void GetDescription(VideoProcessorInputViewDescription& descRef);
}
public class SharpDX.Direct3D11.VideoProcessorInputViewDescription : ValueType {
    public int FourCC;
    public VpivDimension Dimension;
    public Texture2DVpiv Texture2D;
}
public enum SharpDX.Direct3D11.VideoProcessorItelecineCaps : Enum {
    public int value__;
    public static VideoProcessorItelecineCaps Value32;
    public static VideoProcessorItelecineCaps Value22;
    public static VideoProcessorItelecineCaps Value2224;
    public static VideoProcessorItelecineCaps Value2332;
    public static VideoProcessorItelecineCaps Value32322;
    public static VideoProcessorItelecineCaps Value55;
    public static VideoProcessorItelecineCaps Value64;
    public static VideoProcessorItelecineCaps Value87;
    public static VideoProcessorItelecineCaps Value222222222223;
    public static VideoProcessorItelecineCaps Other;
}
public enum SharpDX.Direct3D11.VideoProcessorNominalRange : Enum {
    public int value__;
    public static VideoProcessorNominalRange Undefined;
    public static VideoProcessorNominalRange Range_16_235;
    public static VideoProcessorNominalRange Range_0_255;
}
public enum SharpDX.Direct3D11.VideoProcessorOutputRate : Enum {
    public int value__;
    public static VideoProcessorOutputRate Normal;
    public static VideoProcessorOutputRate Half;
    public static VideoProcessorOutputRate Custom;
}
[GuidAttribute("A048285E-25A9-4527-BD93-D68B68C44254")]
public class SharpDX.Direct3D11.VideoProcessorOutputView : ResourceView {
    public VideoProcessorOutputViewDescription Description { get; }
    public VideoProcessorOutputView(IntPtr nativePtr);
    public static VideoProcessorOutputView op_Explicit(IntPtr nativePtr);
    public VideoProcessorOutputViewDescription get_Description();
    internal void GetDescription(VideoProcessorOutputViewDescription& descRef);
}
public class SharpDX.Direct3D11.VideoProcessorOutputViewDescription : ValueType {
    public VpovDimension Dimension;
    public Texture2DVpov Texture2D;
    public Texture2DArrayVpov Texture2DArray;
}
public enum SharpDX.Direct3D11.VideoProcessorProcessorCaps : Enum {
    public int value__;
    public static VideoProcessorProcessorCaps DeinterlaceBlend;
    public static VideoProcessorProcessorCaps DeinterlaceBob;
    public static VideoProcessorProcessorCaps DeinterlaceAdaptive;
    public static VideoProcessorProcessorCaps DeinterlaceMotionCompensation;
    public static VideoProcessorProcessorCaps InverseTelecine;
    public static VideoProcessorProcessorCaps FrameRateConversion;
}
public class SharpDX.Direct3D11.VideoProcessorRateConversionCaps : ValueType {
    public int PastFrames;
    public int FutureFrames;
    public int ProcessorCaps;
    public int ITelecineCaps;
    public int CustomRateCount;
}
public enum SharpDX.Direct3D11.VideoProcessorRotation : Enum {
    public int value__;
    public static VideoProcessorRotation Identity;
    public static VideoProcessorRotation Rotation90;
    public static VideoProcessorRotation Rotation180;
    public static VideoProcessorRotation Rotation270;
}
public enum SharpDX.Direct3D11.VideoProcessorStereoCaps : Enum {
    public int value__;
    public static VideoProcessorStereoCaps MonoOffset;
    public static VideoProcessorStereoCaps RowInterleaved;
    public static VideoProcessorStereoCaps ColumnInterleaved;
    public static VideoProcessorStereoCaps CheckerBoard;
    public static VideoProcessorStereoCaps FlipMode;
}
public enum SharpDX.Direct3D11.VideoProcessorStereoFlipMode : Enum {
    public int value__;
    public static VideoProcessorStereoFlipMode None;
    public static VideoProcessorStereoFlipMode Frame0;
    public static VideoProcessorStereoFlipMode Frame1;
}
public enum SharpDX.Direct3D11.VideoProcessorStereoFormat : Enum {
    public int value__;
    public static VideoProcessorStereoFormat Mono;
    public static VideoProcessorStereoFormat Horizontal;
    public static VideoProcessorStereoFormat Vertical;
    public static VideoProcessorStereoFormat Separate;
    public static VideoProcessorStereoFormat MonoOffset;
    public static VideoProcessorStereoFormat RowInterleaved;
    public static VideoProcessorStereoFormat ColumnInterleaved;
    public static VideoProcessorStereoFormat CheckerBoard;
}
public class SharpDX.Direct3D11.VideoProcessorStream : ValueType {
    public RawBool Enable;
    public int OutputIndex;
    public int InputFrameOrField;
    public int PastFrames;
    public int FutureFrames;
    public VideoProcessorInputView PpPastSurfaces;
    public VideoProcessorInputView PInputSurface;
    public VideoProcessorInputView PpFutureSurfaces;
    public VideoProcessorInputView PpPastSurfacesRight;
    public VideoProcessorInputView PInputSurfaceRight;
    public VideoProcessorInputView PpFutureSurfacesRight;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D11.VideoProcessorStreamBehaviorHint : ValueType {
    public RawBool Enable;
    public int Width;
    public int Height;
    public Format Format;
}
public class SharpDX.Direct3D11.VideoSampleDescription : ValueType {
    public int Width;
    public int Height;
    public Format Format;
    public ColorSpaceType ColorSpace;
}
public enum SharpDX.Direct3D11.VideoUsage : Enum {
    public int value__;
    public static VideoUsage PlaybackNormal;
    public static VideoUsage OptimalSpeed;
    public static VideoUsage OptimalQuality;
}
public enum SharpDX.Direct3D11.VpivDimension : Enum {
    public int value__;
    public static VpivDimension Unknown;
    public static VpivDimension Texture2D;
}
public enum SharpDX.Direct3D11.VpovDimension : Enum {
    public int value__;
    public static VpovDimension Unknown;
    public static VpovDimension Texture2D;
    public static VpovDimension Texture2DArray;
}
