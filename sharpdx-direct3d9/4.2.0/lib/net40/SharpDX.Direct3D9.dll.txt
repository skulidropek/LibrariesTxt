[DefaultMemberAttribute("Item")]
public class SharpDX.Direct3D9.AdapterCollection : ReadOnlyCollection`1<AdapterInformation> {
    internal AdapterCollection(Direct3D direct3D);
}
public class SharpDX.Direct3D9.AdapterDetails : object {
    public string Driver;
    public string Description;
    public string DeviceName;
    internal long RawDriverVersion;
    public int VendorId;
    public int DeviceId;
    public int SubsystemId;
    public int Revision;
    public Guid DeviceIdentifier;
    public int WhqlLevel;
    public bool Certified { get; }
    public Version DriverVersion { get; }
    public DateTime CertificationDate { get; }
    public bool get_Certified();
    public Version get_DriverVersion();
    public DateTime get_CertificationDate();
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[DefaultMemberAttribute("Item")]
public class SharpDX.Direct3D9.AdapterExCollection : ReadOnlyCollection`1<AdapterInformationEx> {
    internal AdapterExCollection(Direct3DEx direct3D);
}
public class SharpDX.Direct3D9.AdapterInformation : object {
    private Direct3D direct3d;
    [CompilerGeneratedAttribute]
private int <Adapter>k__BackingField;
    [CompilerGeneratedAttribute]
private AdapterDetails <Details>k__BackingField;
    public int Adapter { get; private set; }
    public DisplayMode CurrentDisplayMode { get; }
    public AdapterDetails Details { get; private set; }
    public IntPtr Monitor { get; }
    internal AdapterInformation(Direct3D direct3D, int adapter);
    public Capabilities GetCaps(DeviceType type);
    public DisplayModeCollection GetDisplayModes(Format format);
    [CompilerGeneratedAttribute]
public int get_Adapter();
    [CompilerGeneratedAttribute]
private void set_Adapter(int value);
    public DisplayMode get_CurrentDisplayMode();
    [CompilerGeneratedAttribute]
public AdapterDetails get_Details();
    [CompilerGeneratedAttribute]
private void set_Details(AdapterDetails value);
    public IntPtr get_Monitor();
}
public class SharpDX.Direct3D9.AdapterInformationEx : object {
    private Direct3DEx direct3d;
    [CompilerGeneratedAttribute]
private int <Adapter>k__BackingField;
    [CompilerGeneratedAttribute]
private AdapterDetails <Details>k__BackingField;
    public int Adapter { get; private set; }
    public DisplayModeEx CurrentDisplayMode { get; }
    public AdapterDetails Details { get; private set; }
    public IntPtr Monitor { get; }
    internal AdapterInformationEx(Direct3DEx direct3D, int adapter);
    public Capabilities GetCaps(DeviceType type);
    public DisplayModeExCollection GetDisplayModes(DisplayModeFilter filter);
    [CompilerGeneratedAttribute]
public int get_Adapter();
    [CompilerGeneratedAttribute]
private void set_Adapter(int value);
    public DisplayModeEx get_CurrentDisplayMode();
    [CompilerGeneratedAttribute]
public AdapterDetails get_Details();
    [CompilerGeneratedAttribute]
private void set_Details(AdapterDetails value);
    public IntPtr get_Monitor();
}
public class SharpDX.Direct3D9.AnimationCallbackHandler : CppObject {
    public AnimationCallbackHandler(IntPtr nativePtr);
    public static AnimationCallbackHandler op_Explicit(IntPtr nativePointer);
    public void HandleCallback(int track, IntPtr callbackDataRef);
}
[GuidAttribute("ac8948ec-f86d-43e2-96de-31fc35f96d9e")]
public class SharpDX.Direct3D9.AnimationController : ComObject {
    public int MaxNumAnimationOutputs { get; }
    public int MaxNumAnimationSets { get; }
    public int MaxNumTracks { get; }
    public int MaxNumEvents { get; }
    public int NumAnimationSets { get; }
    public double Time { get; }
    public float PriorityBlend { get; public set; }
    public int CurrentPriorityBlend { get; }
    public AnimationController(IntPtr nativePtr);
    public static AnimationController op_Explicit(IntPtr nativePointer);
    public int get_MaxNumAnimationOutputs();
    public int get_MaxNumAnimationSets();
    public int get_MaxNumTracks();
    public int get_MaxNumEvents();
    public int get_NumAnimationSets();
    public double get_Time();
    public float get_PriorityBlend();
    public void set_PriorityBlend(float value);
    public int get_CurrentPriorityBlend();
    internal int GetMaxNumAnimationOutputs();
    internal int GetMaxNumAnimationSets();
    internal int GetMaxNumTracks();
    internal int GetMaxNumEvents();
    public void RegisterAnimationOutput(string nameRef, RawMatrix& matrixRef, RawVector3 scaleRef, RawQuaternion rotationRef, RawVector3 translationRef);
    public void RegisterAnimationSet(AnimationSet animSetRef);
    public void UnregisterAnimationSet(AnimationSet animSetRef);
    internal int GetNumAnimationSets();
    public void GetAnimationSet(int index, AnimationSet& animationSetOut);
    public void GetAnimationSetByName(string szName, AnimationSet& animationSetOut);
    public void AdvanceTime(double timeDelta, AnimationCallbackHandler callbackHandlerRef);
    public void ResetTime();
    internal double GetTime();
    public void SetTrackAnimationSet(int track, AnimationSet animSetRef);
    public void GetTrackAnimationSet(int track, AnimationSet& animSetOut);
    public void SetTrackPriority(int track, TrackPriority priority);
    public void SetTrackSpeed(int track, float speed);
    public void SetTrackWeight(int track, float weight);
    public void SetTrackPosition(int track, double position);
    public void SetTrackEnable(int track, RawBool enable);
    public void SetTrackDescription(int track, TrackDescription& descRef);
    public void GetTrackDescription(int track, TrackDescription& descRef);
    internal void SetPriorityBlend(float blendWeight);
    internal float GetPriorityBlend();
    public int KeyTrackSpeed(int track, float newSpeed, double startTime, double duration, TransitionType transition);
    public int KeyTrackWeight(int track, float newWeight, double startTime, double duration, TransitionType transition);
    public int KeyTrackPosition(int track, double newPosition, double startTime);
    public int KeyTrackEnable(int track, RawBool newEnable, double startTime);
    public int KeyPriorityBlend(float newBlendWeight, double startTime, double duration, TransitionType transition);
    public void UnkeyEvent(int hEvent);
    public void UnkeyAllTrackEvents(int track);
    public void UnkeyAllPriorityBlends();
    public int GetCurrentTrackEvent(int track, EventType eventType);
    internal int GetCurrentPriorityBlend();
    public int GetUpcomingTrackEvent(int track, int hEvent);
    public int GetUpcomingPriorityBlend(int hEvent);
    public void ValidateEvent(int hEvent);
    public void GetEventDescription(int hEvent, EventDescription& descRef);
    public void CloneAnimationController(int maxNumAnimationOutputs, int maxNumAnimationSets, int maxNumTracks, int maxNumEvents, AnimationController& animControllerOut);
}
[GuidAttribute("698cfb3f-9289-4d95-9a57-33a94b5a65f9")]
public class SharpDX.Direct3D9.AnimationSet : ComObject {
    public string Name { get; }
    public double Period { get; }
    public int NumAnimations { get; }
    public AnimationSet(IntPtr nativePtr);
    public static AnimationSet op_Explicit(IntPtr nativePointer);
    public string get_Name();
    public double get_Period();
    public int get_NumAnimations();
    internal string GetName();
    internal double GetPeriod();
    public double GetPeriodicPosition(double position);
    internal int GetNumAnimations();
    public void GetAnimationNameByIndex(int index, string nameOut);
    public void GetAnimationIndexByName(string nameRef, int indexRef);
    public void GetSRT(double periodicPosition, int animation, RawVector3& scaleRef, RawQuaternion& rotationRef, RawVector3& translationRef);
    public void GetCallback(double position, int flags, Double& callbackPositionRef, IntPtr callbackDataOut);
}
[CompilerGeneratedAttribute]
internal class SharpDX.Direct3D9.AssemblyDoc : object {
}
public class SharpDX.Direct3D9.AttributeRange : ValueType {
    public int AttribId;
    public int FaceStart;
    public int FaceCount;
    public int VertexStart;
    public int VertexCount;
}
public class SharpDX.Direct3D9.AttributeWeights : ValueType {
    public float Position;
    public float Boundary;
    public float Normal;
    public float Diffuse;
    public float Specular;
    internal Single[] _TextureCoordinate;
    public float Tangent;
    public float Binormal;
    public Single[] TextureCoordinate { get; }
    public Single[] get_TextureCoordinate();
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
internal enum SharpDX.Direct3D9.BackBufferType : Enum {
    public int value__;
    public static BackBufferType Mono;
    public static BackBufferType Left;
    public static BackBufferType Right;
}
public class SharpDX.Direct3D9.BandwidthTimings : ValueType {
    public float MaxBandwidthUtilized;
    public float FrontEndUploadMemoryUtilizedPercent;
    public float VertexRateUtilizedPercent;
    public float TriangleSetupRateUtilizedPercent;
    public float FillRateUtilizedPercent;
}
[GuidAttribute("017c18ac-103f-4417-8c51-6bf6ef1e56be")]
public class SharpDX.Direct3D9.BaseEffect : ComObject {
    public EffectDescription Description { get; }
    public BaseEffect(IntPtr nativePtr);
    public string GetString(EffectHandle parameter);
    public T GetValue(EffectHandle parameter);
    public T[] GetValue(EffectHandle parameter, int count);
    public void SetValue(EffectHandle effectHandle, bool value);
    public void SetValue(EffectHandle effectHandle, float value);
    public void SetValue(EffectHandle effectHandle, int value);
    public void SetValue(EffectHandle effectHandle, RawMatrix value);
    public void SetValue(EffectHandle effectHandle, RawVector4 value);
    public void SetValue(EffectHandle effectHandle, T value);
    public void SetValue(EffectHandle effectHandle, Boolean[] values);
    public void SetValue(EffectHandle effectHandle, Single[] values);
    public void SetValue(EffectHandle effectHandle, Int32[] values);
    public void SetValue(EffectHandle effectHandle, RawMatrix[] values);
    public void SetValue(EffectHandle effectHandle, RawVector4[] values);
    public void SetValue(EffectHandle effectHandle, T[] values);
    public static BaseEffect op_Explicit(IntPtr nativePointer);
    public EffectDescription get_Description();
    internal void GetDescription(EffectDescription& descRef);
    public ParameterDescription GetParameterDescription(EffectHandle hParameter);
    public TechniqueDescription GetTechniqueDescription(EffectHandle hTechnique);
    public PassDescription GetPassDescription(EffectHandle hPass);
    public FunctionDescription GetFunctionDescription(EffectHandle hShader);
    public EffectHandle GetParameter(EffectHandle hParameter, int index);
    public EffectHandle GetParameter(EffectHandle hParameter, string nameRef);
    public EffectHandle GetParameterBySemantic(EffectHandle hParameter, string semanticRef);
    public EffectHandle GetParameterElement(EffectHandle hParameter, int index);
    public EffectHandle GetTechnique(int index);
    public EffectHandle GetTechnique(string nameRef);
    public EffectHandle GetPass(EffectHandle hTechnique, int index);
    public EffectHandle GetPass(EffectHandle hTechnique, string nameRef);
    public EffectHandle GetFunction(int index);
    public EffectHandle GetFunction(string nameRef);
    public EffectHandle GetAnnotation(EffectHandle hObject, int index);
    public EffectHandle GetAnnotation(EffectHandle hObject, string nameRef);
    internal void SetValue(EffectHandle hParameter, IntPtr dataRef, int bytes);
    internal void GetValue(EffectHandle hParameter, IntPtr dataRef, int bytes);
    internal void SetBool(EffectHandle hParameter, RawBool b);
    internal void GetBool(EffectHandle hParameter, RawBool& bRef);
    internal void SetBoolArray(EffectHandle hParameter, RawBool[] bRef, int count);
    internal void GetBoolArray(EffectHandle hParameter, RawBool[] bRef, int count);
    internal void SetInt(EffectHandle hParameter, int n);
    internal void GetInt(EffectHandle hParameter, Int32& nRef);
    internal void SetIntArray(EffectHandle hParameter, Int32[] nRef, int count);
    internal void GetIntArray(EffectHandle hParameter, Int32[] nRef, int count);
    internal void SetFloat(EffectHandle hParameter, float f);
    internal void GetFloat(EffectHandle hParameter, Single& fRef);
    internal void SetFloatArray(EffectHandle hParameter, Single[] fRef, int count);
    internal void GetFloatArray(EffectHandle hParameter, Single[] fRef, int count);
    internal void SetVector(EffectHandle hParameter, RawVector4 vectorRef);
    internal void GetVector(EffectHandle hParameter, RawVector4& vectorRef);
    internal void SetVectorArray(EffectHandle hParameter, RawVector4[] vectorRef, int count);
    internal void GetVectorArray(EffectHandle hParameter, RawVector4[] vectorRef, int count);
    internal void SetMatrix(EffectHandle hParameter, RawMatrix& matrixRef);
    internal void GetMatrix(EffectHandle hParameter, RawMatrix& matrixRef);
    internal void SetMatrixArray(EffectHandle hParameter, RawMatrix[] matrixRef, int count);
    internal void GetMatrixArray(EffectHandle hParameter, RawMatrix[] matrixRef, int count);
    internal void SetMatrixPointerArray(EffectHandle hParameter, RawMatrix& matrixOut, int count);
    internal void GetMatrixPointerArray(EffectHandle hParameter, RawMatrix& matrixOut, int count);
    internal void SetMatrixTranspose(EffectHandle hParameter, RawMatrix& matrixRef);
    internal void GetMatrixTranspose(EffectHandle hParameter, RawMatrix& matrixRef);
    internal void SetMatrixTransposeArray(EffectHandle hParameter, RawMatrix[] matrixRef, int count);
    internal void GetMatrixTransposeArray(EffectHandle hParameter, RawMatrix[] matrixRef, int count);
    public void SetMatrixTransposePointerArray(EffectHandle hParameter, RawMatrix& matrixOut, int count);
    public void GetMatrixTransposePointerArray(EffectHandle hParameter, RawMatrix& matrixOut, int count);
    public void SetString(EffectHandle hParameter, string stringRef);
    internal IntPtr GetString_(EffectHandle hParameter);
    public void SetTexture(EffectHandle hParameter, BaseTexture textureRef);
    public BaseTexture GetTexture(EffectHandle hParameter);
    public PixelShader GetPixelShader(EffectHandle hParameter);
    public VertexShader GetVertexShader(EffectHandle hParameter);
    internal void SetArrayRange(EffectHandle hParameter, int uStart, int uEnd);
}
[GuidAttribute("7ed943dd-52e8-40b5-a8d8-76685c406330")]
public class SharpDX.Direct3D9.BaseMesh : ComObject {
    public int FVF { get; }
    public int NumBytesPerVertex { get; }
    public int Options { get; }
    public Device Device { get; }
    public VertexBuffer VertexBuffer { get; }
    public IndexBuffer IndexBuffer { get; }
    public BaseMesh(IntPtr nativePtr);
    public static BaseMesh op_Explicit(IntPtr nativePointer);
    public int get_FVF();
    public int get_NumBytesPerVertex();
    public int get_Options();
    public Device get_Device();
    public VertexBuffer get_VertexBuffer();
    public IndexBuffer get_IndexBuffer();
    public void DrawSubset(int attribId);
    internal int GetNumFaces();
    internal int GetNumVertices();
    internal int GetFVF();
    public void GetDeclaration(VertexElement declaration);
    internal int GetNumBytesPerVertex();
    internal int GetOptions();
    internal void GetDevice(Device& deviceOut);
    public void CloneMeshFVF(int options, int fvf, Device d3DDeviceRef, Mesh& cloneMeshOut);
    public void CloneMesh(int options, VertexElement declarationRef, Device d3DDeviceRef, Mesh& cloneMeshOut);
    internal void GetVertexBuffer(VertexBuffer& vBOut);
    internal void GetIndexBuffer(IndexBuffer& iBOut);
    public void LockVertexBuffer(int flags, IntPtr dataOut);
    public void UnlockVertexBuffer();
    public void LockIndexBuffer(int flags, IntPtr dataOut);
    public void UnlockIndexBuffer();
    public void GetAttributeTable(AttributeRange& attribTableRef, Int32& attribTableSizeRef);
    public void ConvertPointRepsToAdjacency(int pRepRef, int adjacencyRef);
    public void ConvertAdjacencyToPointReps(int adjacencyRef, int pRepRef);
    public void GenerateAdjacency(float epsilon, int adjacencyRef);
    public void UpdateSemantics(VertexElement declaration);
}
[GuidAttribute("580CA87E-1D3C-4d54-991D-B7D3E3C298CE")]
public class SharpDX.Direct3D9.BaseTexture : Resource {
    public int LevelOfDetails { get; public set; }
    public int LevelCount { get; }
    public TextureFilter AutoMipGenerationFilter { get; public set; }
    public BaseTexture(IntPtr nativePtr);
    public void FilterTexture(int sourceLevel, Filter filter);
    public void FilterTexture(int sourceLevel, Filter filter, PaletteEntry[] palette);
    public static void ToFile(BaseTexture texture, string fileName, ImageFileFormat format);
    public static void ToFile(BaseTexture texture, string fileName, ImageFileFormat format, PaletteEntry[] palette);
    public static DataStream ToStream(BaseTexture texture, ImageFileFormat format);
    public static DataStream ToStream(BaseTexture texture, ImageFileFormat format, PaletteEntry[] palette);
    public int get_LevelOfDetails();
    public void set_LevelOfDetails(int value);
    public static BaseTexture op_Explicit(IntPtr nativePointer);
    public int get_LevelCount();
    public TextureFilter get_AutoMipGenerationFilter();
    public void set_AutoMipGenerationFilter(TextureFilter value);
    internal int SetLOD(int lODNew);
    internal int GetLOD();
    internal int GetLevelCount();
    internal void SetAutoMipGenerationFilter(TextureFilter filterType);
    internal TextureFilter GetAutoMipGenerationFilter();
    public void GenerateMipSubLevels();
}
public enum SharpDX.Direct3D9.Basis : Enum {
    public int value__;
    public static Basis Bezier;
    public static Basis BSpline;
    public static Basis CatmullRom;
}
public enum SharpDX.Direct3D9.Blend : Enum {
    public int value__;
    public static Blend Zero;
    public static Blend One;
    public static Blend SourceColor;
    public static Blend InverseSourceColor;
    public static Blend SourceAlpha;
    public static Blend InverseSourceAlpha;
    public static Blend DestinationAlpha;
    public static Blend InverseDestinationAlpha;
    public static Blend DestinationColor;
    public static Blend InverseDestinationColor;
    public static Blend SourceAlphaSaturated;
    public static Blend Bothsrcalpha;
    public static Blend BothInverseSourceAlpha;
    public static Blend BlendFactor;
    public static Blend InverseBlendFactor;
    public static Blend SourceColor2;
    public static Blend InverseSourceColor2;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.BlendCaps : Enum {
    public int value__;
    public static BlendCaps Zero;
    public static BlendCaps One;
    public static BlendCaps SourceColor;
    public static BlendCaps InverseSourceColor;
    public static BlendCaps SourceAlpha;
    public static BlendCaps InverseSourceAlpha;
    public static BlendCaps DestinationAlpha;
    public static BlendCaps InverseDestinationAlpha;
    public static BlendCaps DestinationColor;
    public static BlendCaps InverseDestinationColor;
    public static BlendCaps SourceAlphaSaturated;
    public static BlendCaps Bothsrcalpha;
    public static BlendCaps BothInverseSourceAlpha;
    public static BlendCaps BlendFactor;
    public static BlendCaps SourceColor2;
    public static BlendCaps InverseSourceColor2;
}
public enum SharpDX.Direct3D9.BlendOperation : Enum {
    public int value__;
    public static BlendOperation Add;
    public static BlendOperation Subtract;
    public static BlendOperation ReverseSubtract;
    public static BlendOperation Minimum;
    public static BlendOperation Maximum;
}
public class SharpDX.Direct3D9.BoneCombination : object {
    public Int32[] BoneIds;
    public int AttribId;
    public int FaceStart;
    public int FaceCount;
    public int VertexStart;
    public int VertexCount;
    internal IntPtr BonedIdsPointer;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D9.Box : ValueType {
    public int Left;
    public int Top;
    public int Right;
    public int Bottom;
    public int Front;
    public int Back;
}
public class SharpDX.Direct3D9.CacheUtilization : ValueType {
    public float TextureCacheHitRate;
    public float PostTransformVertexCacheHitRate;
}
public class SharpDX.Direct3D9.CallbackKey : ValueType {
    public float Time;
    public IntPtr Data;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.CallbackSearchFlags : Enum {
    public int value__;
    public static CallbackSearchFlags SearchExcludingInitialPosition;
    public static CallbackSearchFlags SearchBehindInitialPosition;
}
public class SharpDX.Direct3D9.Capabilities : ValueType {
    public DeviceType DeviceType;
    public int AdapterOrdinal;
    public Caps Caps;
    public Caps2 Caps2;
    public Caps3 Caps3;
    public PresentInterval PresentationIntervals;
    public CursorCaps CursorCaps;
    public DeviceCaps DeviceCaps;
    public PrimitiveMiscCaps PrimitiveMiscCaps;
    public RasterCaps RasterCaps;
    public CompareCaps DepthCompareCaps;
    public BlendCaps SourceBlendCaps;
    public BlendCaps DestinationBlendCaps;
    public CompareCaps AlpaCompareCaps;
    public ShadeCaps ShadeCaps;
    public TextureCaps TextureCaps;
    public FilterCaps TextureFilterCaps;
    public FilterCaps CubeTextureFilterCaps;
    public FilterCaps VolumeTextureFilterCaps;
    public TextureAddressCaps TextureAddressCaps;
    public TextureAddressCaps VolumeTextureAddressCaps;
    public LineCaps LineCaps;
    public int MaxTextureWidth;
    public int MaxTextureHeight;
    public int MaxVolumeExtent;
    public int MaxTextureRepeat;
    public int MaxTextureAspectRatio;
    public int MaxAnisotropy;
    public float MaxVertexW;
    public float GuardBandLeft;
    public float GuardBandTop;
    public float GuardBandRight;
    public float GuardBandBottom;
    public float ExtentsAdjust;
    public StencilCaps StencilCaps;
    public VertexFormatCaps FVFCaps;
    public TextureOperationCaps TextureOperationCaps;
    public int MaxTextureBlendStages;
    public int MaxSimultaneousTextures;
    public VertexProcessingCaps VertexProcessingCaps;
    public int MaxActiveLights;
    public int MaxUserClipPlanes;
    public int MaxVertexBlendMatrices;
    public int MaxVertexBlendMatrixIndex;
    public float MaxPointSize;
    public int MaxPrimitiveCount;
    public int MaxVertexIndex;
    public int MaxStreams;
    public int MaxStreamStride;
    internal int VertexShaderVersion_;
    public int MaxVertexShaderConst;
    internal int PixelShaderVersion_;
    public float PixelShader1xMaxValue;
    public DeviceCaps2 DeviceCaps2;
    public float MaxNpatchTessellationLevel;
    internal int Reserved5;
    public int MasterAdapterOrdinal;
    public int AdapterOrdinalInGroup;
    public int NumberOfAdaptersInGroup;
    public DeclarationTypeCaps DeclarationTypes;
    public int SimultaneousRTCount;
    public FilterCaps StretchRectFilterCaps;
    public VertexShader20Caps VS20Caps;
    public PixelShader20Caps PS20Caps;
    public FilterCaps VertexTextureFilterCaps;
    public int MaxVShaderInstructionsExecuted;
    public int MaxPShaderInstructionsExecuted;
    public int MaxVertexShader30InstructionSlots;
    public int MaxPixelShader30InstructionSlots;
    public Version PixelShaderVersion { get; }
    public Version VertexShaderVersion { get; }
    public Version get_PixelShaderVersion();
    public Version get_VertexShaderVersion();
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.Caps : Enum {
    public int value__;
    public static Caps Overlay;
    public static Caps ReadScanline;
    public static Caps None;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.Caps2 : Enum {
    public int value__;
    public static Caps2 FullScreenGamma;
    public static Caps2 CanCalibrateGamma;
    public static Caps2 CanManageResource;
    public static Caps2 DynamicTextures;
    public static Caps2 CanAutoGenerateMipMap;
    public static Caps2 CanShareResource;
    public static Caps2 None;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.Caps3 : Enum {
    public int value__;
    public static Caps3 AlphaFullScreenFlipOrDiscard;
    public static Caps3 LinearToSrgbPresentation;
    public static Caps3 CopyToVideoMemory;
    public static Caps3 CopyToSystemMemory;
    public static Caps3 DXVAHd;
    public static Caps3 None;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.Channel : Enum {
    public int value__;
    public static Channel Red;
    public static Channel Blue;
    public static Channel Green;
    public static Channel Alpha;
    public static Channel Luminance;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.CleanType : Enum {
    public int value__;
    public static CleanType BackFacing;
    public static CleanType Bowties;
    public static CleanType Skinning;
    public static CleanType Optimization;
    public static CleanType Simplification;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.ClearFlags : Enum {
    public int value__;
    public static ClearFlags Target;
    public static ClearFlags ZBuffer;
    public static ClearFlags Stencil;
    public static ClearFlags All;
    public static ClearFlags None;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.ClipFlags : Enum {
    public int value__;
    public static ClipFlags Left;
    public static ClipFlags Right;
    public static ClipFlags Top;
    public static ClipFlags Bottom;
    public static ClipFlags Front;
    public static ClipFlags Back;
    public static ClipFlags Plane0;
    public static ClipFlags Plane1;
    public static ClipFlags Plane2;
    public static ClipFlags Plane3;
    public static ClipFlags Plane4;
    public static ClipFlags Plane5;
    public static ClipFlags All;
}
public class SharpDX.Direct3D9.ClipStatus : ValueType {
    public int ClipUnion;
    public int ClipIntersection;
}
public enum SharpDX.Direct3D9.ColorSource : Enum {
    public int value__;
    public static ColorSource Material;
    public static ColorSource Color1;
    public static ColorSource Color2;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.ColorWriteEnable : Enum {
    public int value__;
    public static ColorWriteEnable Red;
    public static ColorWriteEnable Green;
    public static ColorWriteEnable Blue;
    public static ColorWriteEnable Alpha;
}
public enum SharpDX.Direct3D9.Compare : Enum {
    public int value__;
    public static Compare Never;
    public static Compare Less;
    public static Compare Equal;
    public static Compare LessEqual;
    public static Compare Greater;
    public static Compare NotEqual;
    public static Compare GreaterEqual;
    public static Compare Always;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.CompareCaps : Enum {
    public int value__;
    public static CompareCaps Never;
    public static CompareCaps Less;
    public static CompareCaps Equal;
    public static CompareCaps LessEqual;
    public static CompareCaps Greater;
    public static CompareCaps NotEqual;
    public static CompareCaps GreaterEqual;
    public static CompareCaps Always;
}
public class SharpDX.Direct3D9.CompilationResult : CompilationResultBase`1<ShaderBytecode> {
    public CompilationResult(ShaderBytecode bytecode, Result resultCode, string message);
    public static ShaderBytecode op_Implicit(CompilationResult input);
}
public enum SharpDX.Direct3D9.ComposeRectOperation : Enum {
    public int value__;
    public static ComposeRectOperation Copy;
    public static ComposeRectOperation Or;
    public static ComposeRectOperation And;
    public static ComposeRectOperation Negate;
}
[GuidAttribute("6cc2480d-3808-4739-9f88-de49facd8d4c")]
public class SharpDX.Direct3D9.CompressedAnimationSet : AnimationSet {
    public PlaybackType PlaybackType { get; }
    public double SourceTicksPerSecond { get; }
    public Blob CompressedData { get; }
    public int NumCallbackKeys { get; }
    public CompressedAnimationSet(IntPtr nativePtr);
    public static CompressedAnimationSet op_Explicit(IntPtr nativePointer);
    public PlaybackType get_PlaybackType();
    public double get_SourceTicksPerSecond();
    public Blob get_CompressedData();
    public int get_NumCallbackKeys();
    internal PlaybackType GetPlaybackType();
    internal double GetSourceTicksPerSecond();
    internal void GetCompressedData(Blob& compressedDataOut);
    internal int GetNumCallbackKeys();
    public void GetCallbackKeys(CallbackKey callbackKeysRef);
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.CompressionFlags : Enum {
    public int value__;
    public static CompressionFlags Default;
}
public class SharpDX.Direct3D9.ConstantDescription : ValueType {
    public string Name;
    public RegisterSet RegisterSet;
    public int RegisterIndex;
    public int RegisterCount;
    public ParameterClass Class;
    public ParameterType Type;
    public int Rows;
    public int Columns;
    public int Elements;
    public int StructMembers;
    public int Bytes;
    public IntPtr DefaultValue;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[GuidAttribute("ab3c758f-093e-4356-b762-4db18f1b3a01")]
public class SharpDX.Direct3D9.ConstantTable : ComObject {
    public DataStream Buffer { get; }
    public IntPtr BufferPointer { get; }
    public int BufferSize { get; }
    public ConstantTableDescription Description { get; }
    public ConstantTable(IntPtr nativePtr);
    public DataStream get_Buffer();
    public ConstantDescription GetConstantDescription(EffectHandle effectHandle);
    public ConstantDescription[] GetConstantDescriptionArray(EffectHandle effectHandle);
    public void SetValue(Device device, EffectHandle effectHandle, bool value);
    public void SetValue(Device device, EffectHandle effectHandle, float value);
    public void SetValue(Device device, EffectHandle effectHandle, int value);
    public void SetValue(Device device, EffectHandle effectHandle, RawMatrix value);
    public void SetValue(Device device, EffectHandle effectHandle, RawVector4 value);
    public void SetValue(Device device, EffectHandle effectHandle, T value);
    public void SetValue(Device device, EffectHandle effectHandle, Boolean[] values);
    public void SetValue(Device device, EffectHandle effectHandle, Single[] values);
    public void SetValue(Device device, EffectHandle effectHandle, Int32[] values);
    public void SetValue(Device device, EffectHandle effectHandle, RawMatrix[] values);
    public void SetValue(Device device, EffectHandle effectHandle, RawVector4[] values);
    public void SetValue(Device device, EffectHandle effectHandle, T[] values);
    public static ConstantTable op_Explicit(IntPtr nativePointer);
    public IntPtr get_BufferPointer();
    public int get_BufferSize();
    public ConstantTableDescription get_Description();
    internal IntPtr GetBufferPointer();
    internal int GetBufferSize();
    internal void GetDescription(ConstantTableDescription& descRef);
    internal void GetConstantDescription(EffectHandle effectHandle, ConstantDescription[] constantDescRef, Int32& countRef);
    public int GetSamplerIndex(EffectHandle effectHandle);
    public EffectHandle GetConstant(EffectHandle effectHandle, int index);
    public EffectHandle GetConstantByName(EffectHandle effectHandle, string nameRef);
    public EffectHandle GetConstantElement(EffectHandle effectHandle, int index);
    internal void SetDefaults(Device deviceRef);
    internal void SetValue(Device deviceRef, EffectHandle effectHandle, IntPtr dataRef, int bytes);
    internal void SetBool(Device deviceRef, EffectHandle effectHandle, RawBool b);
    internal void SetBoolArray(Device deviceRef, EffectHandle effectHandle, RawBool[] bRef, int count);
    internal void SetInt(Device deviceRef, EffectHandle effectHandle, int n);
    internal void SetIntArray(Device deviceRef, EffectHandle effectHandle, Int32[] nRef, int count);
    internal void SetFloat(Device deviceRef, EffectHandle effectHandle, float f);
    internal void SetFloatArray(Device deviceRef, EffectHandle effectHandle, Single[] fRef, int count);
    internal void SetVector(Device deviceRef, EffectHandle effectHandle, RawVector4 vectorRef);
    internal void SetVectorArray(Device deviceRef, EffectHandle effectHandle, RawVector4[] vectorRef, int count);
    internal void SetMatrix(Device deviceRef, EffectHandle effectHandle, RawMatrix& matrixRef);
    internal void SetMatrixArray(Device deviceRef, EffectHandle effectHandle, RawMatrix[] matrixRef, int count);
    internal void SetMatrixPointerArray(Device deviceRef, EffectHandle effectHandle, RawMatrix& matrixOut, int count);
    internal void SetMatrixTranspose(Device deviceRef, EffectHandle effectHandle, RawMatrix& matrixRef);
    internal void SetMatrixTransposeArray(Device deviceRef, EffectHandle effectHandle, RawMatrix[] matrixRef, int count);
    internal void SetMatrixTransposePointerArray(Device deviceRef, EffectHandle effectHandle, RawMatrix& matrixOut, int count);
}
public class SharpDX.Direct3D9.ConstantTableDescription : ValueType {
    public string Creator;
    public int Version;
    public int Constants;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.CreateFlags : Enum {
    public int value__;
    public static CreateFlags FpuPreserve;
    public static CreateFlags Multithreaded;
    public static CreateFlags PureDevice;
    public static CreateFlags SoftwareVertexProcessing;
    public static CreateFlags HardwareVertexProcessing;
    public static CreateFlags MixedVertexProcessing;
    public static CreateFlags DisableDriverManagement;
    public static CreateFlags AdapterGroupDevice;
    public static CreateFlags DisableExtendedDriverManagement;
    public static CreateFlags NoWindowChanges;
    public static CreateFlags DisablePsgpThreading;
    public static CreateFlags EnablePresentStatistics;
    public static CreateFlags DisablePrintScreen;
    public static CreateFlags AllowScreensavers;
    public static CreateFlags None;
}
public class SharpDX.Direct3D9.CreationParameters : ValueType {
    public int AdapterOrdinal;
    public DeviceType DeviceType;
    public IntPtr HFocusWindow;
    public int BehaviorFlags;
}
public enum SharpDX.Direct3D9.CubeMapFace : Enum {
    public int value__;
    public static CubeMapFace PositiveX;
    public static CubeMapFace NegativeX;
    public static CubeMapFace PositiveY;
    public static CubeMapFace NegativeY;
    public static CubeMapFace PositiveZ;
    public static CubeMapFace NegativeZ;
}
[GuidAttribute("FFF32F81-D953-473a-9223-93D652ABA93F")]
public class SharpDX.Direct3D9.CubeTexture : BaseTexture {
    public CubeTexture(Device device, int edgeLength, int levelCount, Usage usage, Format format, Pool pool);
    public CubeTexture(Device device, int edgeLength, int levelCount, Usage usage, Format format, Pool pool, IntPtr& sharedHandle);
    public CubeTexture(IntPtr nativePtr);
    public static CubeTextureRequirements CheckRequirements(Device device, int size, int mipLevelCount, Usage usage, Format format, Pool pool);
    public void Fill(Fill3DCallback callback);
    public void Fill(TextureShader shader);
    public DataRectangle LockRectangle(CubeMapFace faceType, int level, LockFlags flags);
    public DataRectangle LockRectangle(CubeMapFace faceType, int level, LockFlags flags, DataStream& stream);
    public DataRectangle LockRectangle(CubeMapFace faceType, int level, RawRectangle rectangle, LockFlags flags);
    public DataRectangle LockRectangle(CubeMapFace faceType, int level, RawRectangle rectangle, LockFlags flags, DataStream& stream);
    public void AddDirtyRectangle(CubeMapFace faceType);
    public void AddDirtyRectangle(CubeMapFace faceType, RawRectangle dirtyRectRef);
    public static CubeTexture FromFile(Device device, string filename);
    public static CubeTexture FromFile(Device device, string filename, Usage usage, Pool pool);
    public static CubeTexture FromFile(Device device, string filename, int size, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey);
    public static CubeTexture FromFile(Device device, string filename, int size, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation);
    public static CubeTexture FromFile(Device device, string filename, int size, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation, PaletteEntry[]& palette);
    public static CubeTexture FromMemory(Device device, Byte[] buffer);
    public static CubeTexture FromMemory(Device device, Byte[] buffer, Usage usage, Pool pool);
    public static CubeTexture FromMemory(Device device, Byte[] buffer, int size, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey);
    public static CubeTexture FromMemory(Device device, Byte[] buffer, int size, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation);
    public static CubeTexture FromMemory(Device device, Byte[] buffer, int size, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation, PaletteEntry[]& palette);
    public static CubeTexture FromStream(Device device, Stream stream);
    public static CubeTexture FromStream(Device device, Stream stream, Usage usage, Pool pool);
    public static CubeTexture FromStream(Device device, Stream stream, int size, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey);
    public static CubeTexture FromStream(Device device, Stream stream, int sizeBytes, int size, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey);
    public static CubeTexture FromStream(Device device, Stream stream, int sizeBytes, int size, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation);
    public static CubeTexture FromStream(Device device, Stream stream, int sizeBytes, int size, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation, PaletteEntry[]& palette);
    private static CubeTexture CreateFromMemory(Device device, Byte[] buffer, int size, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, IntPtr imageInformation, PaletteEntry[] palette);
    private static CubeTexture CreateFromStream(Device device, Stream stream, int sizeBytes, int size, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, IntPtr imageInformation, PaletteEntry[] palette);
    private static CubeTexture CreateFromPointer(Device device, IntPtr pointer, int sizeInBytes, int size, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, IntPtr imageInformation, PaletteEntry[] palette);
    private static CubeTexture CreateFromFile(Device device, string fileName, int size, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, IntPtr imageInformation, PaletteEntry[] palette);
    public static CubeTexture op_Explicit(IntPtr nativePointer);
    public SurfaceDescription GetLevelDescription(int level);
    public Surface GetCubeMapSurface(CubeMapFace faceType, int level);
    internal void LockRectangle(CubeMapFace faceType, int level, LockedRectangle& lockedRectRef, IntPtr rectRef, LockFlags flags);
    public void UnlockRectangle(CubeMapFace faceType, int level);
    internal void AddDirtyRectangle(CubeMapFace faceType, IntPtr dirtyRectRef);
}
public class SharpDX.Direct3D9.CubeTextureRequirements : ValueType {
    public int Size;
    public Format Format;
    public int MipLevelCount;
}
public enum SharpDX.Direct3D9.Cull : Enum {
    public int value__;
    public static Cull None;
    public static Cull Clockwise;
    public static Cull Counterclockwise;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.CursorCaps : Enum {
    public int value__;
    public static CursorCaps Color;
    public static CursorCaps LowResolution;
}
internal static class SharpDX.Direct3D9.D3D9 : object {
    public static int SdkVersion;
    public static void Create9Ex(int sDKVersion, Direct3DEx arg1);
    private static int Direct3DCreate9Ex_(int arg0, Void* arg1);
    public static Direct3D Create9(int sDKVersion);
    private static IntPtr Direct3DCreate9_(int arg0);
}
public static class SharpDX.Direct3D9.D3DX : object {
    public static int Default;
    public static int DefaultNonPowerOf2;
    public static int FormatFromFile;
    public static int FromFile;
    public static bool CheckVersion();
    public static bool DebugMute(bool mute);
    public static VertexElement[] DeclaratorFromFVF(VertexFormat fvf);
    public static VertexFormat FVFFromDeclarator(VertexElement[] declarator);
    public static VertexElement[] GenerateOutputDeclaration(VertexElement[] declaration);
    public static int GetDeclarationLength(VertexElement[] declaration);
    public static int GetDeclarationVertexSize(VertexElement[] elements, int stream);
    public static int GetFVFVertexSize(VertexFormat fvf);
    public static Result GetRectanglePatchSize(float segmentCount, Int32& triangleCount, Int32& vertexCount);
    public static Result GetTrianglePatchSize(float segmentCount, Int32& triangleCount, Int32& vertexCount);
    public static RawVector3[] GetVectors(DataStream stream, int vertexCount, VertexFormat format);
    public static RawVector3[] GetVectors(DataStream stream, int vertexCount, int stride);
    public static Format MakeFourCC(byte c1, byte c2, byte c3, byte c4);
    public static Int32[] OptimizeFaces(Int16[] indices, int faceCount, int vertexCount);
    public static Int32[] OptimizeFaces(Int32[] indices, int faceCount, int vertexCount);
    public static Int32[] OptimizeVertices(Int16[] indices, int faceCount, int vertexCount);
    public static Int32[] OptimizeVertices(Int32[] indices, int faceCount, int vertexCount);
}
internal static class SharpDX.Direct3D9.D3DX9 : object {
    public static int Version;
    public static int SdkVersion;
    public static void SetMarker(RawColorBGRA col, string wszName);
    private static void D3DPERF_SetMarker_(RawColorBGRA arg0, Void* arg1);
    public static void SetOptions(int dwOptions);
    private static void D3DPERF_SetOptions_(int arg0);
    public static int GetStatus();
    private static int D3DPERF_GetStatus_();
    public static void SetRegion(RawColorBGRA col, string wszName);
    private static void D3DPERF_SetRegion_(RawColorBGRA arg0, Void* arg1);
    public static int EndEvent();
    private static int D3DPERF_EndEvent_();
    public static int BeginEvent(RawColorBGRA col, string wszName);
    private static int D3DPERF_BeginEvent_(RawColorBGRA arg0, Void* arg1);
    public static RawBool QueryRepeatFrame();
    private static RawBool D3DPERF_QueryRepeatFrame_();
    public static void FrameAppendChild(Frame& frameParentRef, Frame& frameChildRef);
    private static int D3DXFrameAppendChild_(Void* arg0, Void* arg1);
    public static void LoadMeshHierarchyFromXW(string filename, int meshOptions, Device d3DDeviceRef, IAllocateHierarchy allocRef, ILoadUserData userDataLoaderRef, Frame& frameHierarchyOut, AnimationController& animControllerOut);
    private static int D3DXLoadMeshHierarchyFromXW_(Void* arg0, int arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5, Void* arg6);
    public static void FrameRegisterNamedMatrices(Frame& frameRootRef, AnimationController animControllerRef);
    private static int D3DXFrameRegisterNamedMatrices_(Void* arg0, Void* arg1);
    public static void LoadMeshHierarchyFromXInMemory(IntPtr memory, int sizeOfMemory, int meshOptions, Device d3DDeviceRef, IAllocateHierarchy allocRef, ILoadUserData userDataLoaderRef, Frame& frameHierarchyOut, AnimationController& animControllerOut);
    private static int D3DXLoadMeshHierarchyFromXInMemory_(Void* arg0, int arg1, int arg2, Void* arg3, Void* arg4, Void* arg5, Void* arg6, Void* arg7);
    public static void CreateCompressedAnimationSet(string nameRef, double ticksPerSecond, PlaybackType playback, Blob compressedDataRef, int numCallbackKeys, CallbackKey callbackKeysRef, CompressedAnimationSet& animationSetOut);
    private static int D3DXCreateCompressedAnimationSet_(Void* arg0, double arg1, int arg2, Void* arg3, int arg4, Void* arg5, Void* arg6);
    public static void SaveMeshHierarchyToFileW(string filename, int xFormat, Frame& frameRootRef, AnimationController animControllerRef, ISaveUserData userDataSaverRef);
    private static int D3DXSaveMeshHierarchyToFileW_(Void* arg0, int arg1, Void* arg2, Void* arg3, Void* arg4);
    public static void FrameCalculateBoundingSphere(Frame& frameRootRef, RawVector3 objectCenterRef, float objectRadiusRef);
    private static int D3DXFrameCalculateBoundingSphere_(Void* arg0, Void* arg1, Void* arg2);
    public static void CreateAnimationController(int maxNumMatrices, int maxNumAnimationSets, int maxNumTracks, int maxNumEvents, AnimationController& animControllerOut);
    private static int D3DXCreateAnimationController_(int arg0, int arg1, int arg2, int arg3, Void* arg4);
    public static Frame FrameFind(Frame& frameRootRef, string name);
    private static Frame D3DXFrameFind_(Void* arg0, Void* arg1);
    public static void CreateKeyframedAnimationSet(string nameRef, double ticksPerSecond, PlaybackType playback, int numAnimations, int numCallbackKeys, CallbackKey callbackKeysRef, KeyframedAnimationSet& animationSetOut);
    private static int D3DXCreateKeyframedAnimationSet_(Void* arg0, double arg1, int arg2, int arg3, int arg4, Void* arg5, Void* arg6);
    public static void FrameDestroy(Frame& frameRootRef, IAllocateHierarchy allocRef);
    private static int D3DXFrameDestroy_(Void* arg0, Void* arg1);
    public static int FrameNumNamedMatrices(Frame& frameRootRef);
    private static int D3DXFrameNumNamedMatrices_(Void* arg0);
    public static void CreateRenderToEnvMap(Device deviceRef, int size, int mipLevels, Format format, RawBool depthStencil, Format depthStencilFormat, RenderToEnvironmentMap& renderToEnvMapOut);
    private static int D3DXCreateRenderToEnvMap_(Void* arg0, int arg1, int arg2, int arg3, RawBool arg4, int arg5, Void* arg6);
    public static int GetDriverLevel(Device deviceRef);
    private static int D3DXGetDriverLevel_(Void* arg0);
    public static void CreateFont(Device deviceRef, int height, int width, int weight, int mipLevels, RawBool italic, int charSet, int outputPrecision, int quality, int pitchAndFamily, string faceNameRef, Font fontOut);
    private static int D3DXCreateFontW_(Void* arg0, int arg1, int arg2, int arg3, int arg4, RawBool arg5, int arg6, int arg7, int arg8, int arg9, Void* arg10, Void* arg11);
    public static void CreateRenderToSurface(Device deviceRef, int width, int height, Format format, RawBool depthStencil, Format depthStencilFormat, RenderToSurface renderToSurfaceOut);
    private static int D3DXCreateRenderToSurface_(Void* arg0, int arg1, int arg2, int arg3, RawBool arg4, int arg5, Void* arg6);
    public static void CreateSprite(Device deviceRef, Sprite spriteOut);
    private static int D3DXCreateSprite_(Void* arg0, Void* arg1);
    public static void CreateFontIndirect(Device deviceRef, FontDescription& descRef, Font fontOut);
    private static int D3DXCreateFontIndirectW_(Void* arg0, Void* arg1, Void* arg2);
    public static void CreateLine(Device deviceRef, Line lineOut);
    private static int D3DXCreateLine_(Void* arg0, Void* arg1);
    public static RawBool DebugMute(RawBool mute);
    private static RawBool D3DXDebugMute_(RawBool arg0);
    public static RawBool CheckVersion(int d3DSdkVersion, int d3DXSdkVersion);
    private static RawBool D3DXCheckVersion_(int arg0, int arg1);
    public static void CreateEffect(Device deviceRef, IntPtr srcDataRef, int srcDataLen, Macro[] definesRef, IntPtr includeRef, int flags, EffectPool poolRef, Effect& effectOut, Blob& compilationErrorsOut);
    private static int D3DXCreateEffect_(Void* arg0, Void* arg1, int arg2, Void* arg3, Void* arg4, int arg5, Void* arg6, Void* arg7, Void* arg8);
    public static void DisassembleEffect(Effect effectRef, RawBool enableColorCode, Blob& disassemblyOut);
    private static int D3DXDisassembleEffect_(Void* arg0, RawBool arg1, Void* arg2);
    public static void CreateEffectFromResourceExW(Device deviceRef, IntPtr hSrcModule, string srcResourceRef, Macro[] definesRef, IntPtr includeRef, string skipConstantsRef, int flags, EffectPool poolRef, Effect& effectOut, Blob& compilationErrorsOut);
    private static int D3DXCreateEffectFromResourceExW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5, int arg6, Void* arg7, Void* arg8, Void* arg9);
    public static void CreateEffectFromResourceW(Device deviceRef, IntPtr hSrcModule, string srcResourceRef, Macro[] definesRef, IntPtr includeRef, int flags, EffectPool poolRef, Effect& effectOut, Blob& compilationErrorsOut);
    private static int D3DXCreateEffectFromResourceW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4, int arg5, Void* arg6, Void* arg7, Void* arg8);
    public static void CreateEffectCompiler(IntPtr srcDataRef, int srcDataLen, Macro[] definesRef, IntPtr includeRef, int flags, EffectCompiler compilerOut, Blob& parseErrorsOut);
    private static int D3DXCreateEffectCompiler_(Void* arg0, int arg1, Void* arg2, Void* arg3, int arg4, Void* arg5, Void* arg6);
    public static void CreateEffectFromFileExW(Device deviceRef, string srcFileRef, Macro[] definesRef, IntPtr includeRef, string skipConstantsRef, int flags, EffectPool poolRef, Effect& effectOut, Blob& compilationErrorsOut);
    private static int D3DXCreateEffectFromFileExW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4, int arg5, Void* arg6, Void* arg7, Void* arg8);
    public static void CreateEffectCompilerFromFileW(string srcFileRef, Macro[] definesRef, IntPtr includeRef, int flags, EffectCompiler& compilerOut, Blob& parseErrorsOut);
    private static int D3DXCreateEffectCompilerFromFileW_(Void* arg0, Void* arg1, Void* arg2, int arg3, Void* arg4, Void* arg5);
    public static void CreateEffectCompilerFromResourceW(IntPtr hSrcModule, string srcResourceRef, Macro[] definesRef, IntPtr includeRef, int flags, EffectCompiler& compilerOut, Blob& parseErrorsOut);
    private static int D3DXCreateEffectCompilerFromResourceW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, int arg4, Void* arg5, Void* arg6);
    public static void CreateEffectFromFileW(Device deviceRef, string srcFileRef, Macro[] definesRef, IntPtr includeRef, int flags, EffectPool poolRef, Effect& effectOut, Blob& compilationErrorsOut);
    private static int D3DXCreateEffectFromFileW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, int arg4, Void* arg5, Void* arg6, Void* arg7);
    public static void CreateEffectPool(EffectPool poolOut);
    private static int D3DXCreateEffectPool_(Void* arg0);
    public static void CreateEffectEx(Device deviceRef, IntPtr srcDataRef, int srcDataLen, Macro[] definesRef, IntPtr includeRef, string skipConstantsRef, int flags, EffectPool poolRef, Effect& effectOut, Blob& compilationErrorsOut);
    private static int D3DXCreateEffectEx_(Void* arg0, Void* arg1, int arg2, Void* arg3, Void* arg4, Void* arg5, int arg6, Void* arg7, Void* arg8, Void* arg9);
    public static void SaveMeshToXW(string filenameRef, Mesh meshRef, int adjacencyRef, ExtendedMaterial& materialsRef, EffectInstance effectInstancesRef, int numMaterials, int format);
    private static int D3DXSaveMeshToXW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4, int arg5, int arg6);
    public static void CreateNPatchMesh(Mesh meshSysMemRef, PatchMesh& patchMeshRef);
    private static int D3DXCreateNPatchMesh_(Void* arg0, Void* arg1);
    public static Result DeclaratorFromFVF(VertexFormat fvf, VertexElement[] declaratorRef);
    private static int D3DXDeclaratorFromFVF_(int arg0, Void* arg1);
    public static void ComputeTangentFrame(Mesh meshRef, int dwOptions);
    private static int D3DXComputeTangentFrame_(Void* arg0, int arg1);
    public static Result OptimizeFaces(IntPtr bIndicesRef, int cFaces, int cVertices, RawBool b32BitIndices, Int32[] faceRemapRef);
    private static int D3DXOptimizeFaces_(Void* arg0, int arg1, int arg2, RawBool arg3, Void* arg4);
    public static void WeldVertices(Mesh meshRef, int flags, WeldEpsilons& epsilonsRef, int adjacencyInRef, int adjacencyOutRef, int faceRemapRef, Blob& vertexRemapOut);
    private static int D3DXWeldVertices_(Void* arg0, int arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5, Void* arg6);
    public static Result GenerateOutputDecl(VertexElement[] outputRef, VertexElement[] inputRef);
    private static int D3DXGenerateOutputDecl_(Void* arg0, Void* arg1);
    public static void CreateBuffer(int numBytes, Blob& bufferOut);
    private static int D3DXCreateBuffer_(int arg0, Void* arg1);
    public static void LoadPatchMeshFromXof(XFileData xofObjMeshRef, int options, Device d3DDeviceRef, Blob& materialsOut, Blob& effectInstancesOut, int numMaterialsRef, PatchMesh& meshOut);
    private static int D3DXLoadPatchMeshFromXof_(Void* arg0, int arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5, Void* arg6);
    public static void TessellateNPatches(Mesh meshInRef, int adjacencyInRef, float numSegs, RawBool quadraticInterpNormals, Mesh& meshOutOut, Blob& adjacencyOutOut);
    private static int D3DXTessellateNPatches_(Void* arg0, Void* arg1, float arg2, RawBool arg3, Void* arg4, Void* arg5);
    public static void ComputeIMTFromSignal(Mesh meshRef, int dwTextureIndex, int uSignalDimension, float fMaxUVDistance, int dwOptions, FunctionCallback signalCallbackRef, IntPtr userDataRef, FunctionCallback statusCallbackRef, IntPtr userContextRef, Blob& iMTDataOut);
    private static int D3DXComputeIMTFromSignal_(Void* arg0, int arg1, int arg2, float arg3, int arg4, Void* arg5, Void* arg6, Void* arg7, Void* arg8, Void* arg9);
    public static void ValidPatchMesh(PatchMesh meshRef, int dwcDegenerateVertices, int dwcDegeneratePatches, Blob& errorsAndWarningsOut);
    private static int D3DXValidPatchMesh_(Void* arg0, Void* arg1, Void* arg2, Void* arg3);
    public static void ValidMesh(Mesh meshInRef, int adjacencyRef, Blob& errorsAndWarningsOut);
    private static int D3DXValidMesh_(Void* arg0, Void* arg1, Void* arg2);
    public static void SplitMesh(Mesh meshInRef, int adjacencyInRef, int maxSize, int options, int meshesOutRef, Blob& meshArrayOutOut, Blob& adjacencyArrayOutOut, Blob& faceRemapArrayOutOut, Blob& vertRemapArrayOutOut);
    private static int D3DXSplitMesh_(Void* arg0, Void* arg1, int arg2, int arg3, Void* arg4, Void* arg5, Void* arg6, Void* arg7, Void* arg8);
    public static void ComputeTangent(Mesh mesh, int texStage, int tangentIndex, int binormIndex, int wrap, int adjacencyRef);
    private static int D3DXComputeTangent_(Void* arg0, int arg1, int arg2, int arg3, int arg4, Void* arg5);
    public static void Intersect(BaseMesh meshRef, RawVector3 rayPosRef, RawVector3 rayDirRef, RawBool hitRef, int faceIndexRef, float uRef, float vRef, float distRef, Blob& allHitsOut, int countOfHitsRef);
    private static int D3DXIntersect_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5, Void* arg6, Void* arg7, Void* arg8, Void* arg9);
    public static void UVAtlasPack(Mesh meshRef, int uWidth, int uHeight, float fGutter, int dwTextureIndex, int dwPartitionResultAdjacencyRef, FunctionCallback statusCallbackRef, float fCallbackFrequency, IntPtr userContextRef, int dwOptions, Blob facePartitioningRef);
    private static int D3DXUVAtlasPack_(Void* arg0, int arg1, int arg2, float arg3, int arg4, Void* arg5, Void* arg6, float arg7, Void* arg8, int arg9, Void* arg10);
    public static void LoadSkinMeshFromXof(XFileData xofMeshRef, int options, Device d3DDeviceRef, Blob& adjacencyOut, Blob& materialsOut, Blob& effectInstancesOut, int matOutRef, SkinInfo& skinInfoOut, Mesh& meshOut);
    private static int D3DXLoadSkinMeshFromXof_(Void* arg0, int arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5, Void* arg6, Void* arg7, Void* arg8);
    public static void CreateMesh(int numFaces, int numVertices, int options, VertexElement declarationRef, Device d3DDeviceRef, Mesh& meshOut);
    private static int D3DXCreateMesh_(int arg0, int arg1, int arg2, Void* arg3, Void* arg4, Void* arg5);
    public static void CreateSkinInfoFVF(int numVertices, VertexFormat fvf, int numBones, SkinInfo& skinInfoOut);
    private static int D3DXCreateSkinInfoFVF_(int arg0, int arg1, int arg2, Void* arg3);
    public static void IntersectSubset(BaseMesh meshRef, int attribId, RawVector3 rayPosRef, RawVector3 rayDirRef, RawBool hitRef, int faceIndexRef, float uRef, float vRef, float distRef, Blob& allHitsOut, int countOfHitsRef);
    private static int D3DXIntersectSubset_(Void* arg0, int arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5, Void* arg6, Void* arg7, Void* arg8, Void* arg9, Void* arg10);
    public static int GetFVFVertexSize(VertexFormat fvf);
    private static int D3DXGetFVFVertexSize_(int arg0);
    public static int GetDeclLength(VertexElement[] declRef);
    private static int D3DXGetDeclLength_(Void* arg0);
    public static void CleanMesh(CleanType cleanType, Mesh meshInRef, int adjacencyInRef, Mesh& meshOutOut, int adjacencyOutRef, Blob& errorsAndWarningsOut);
    private static int D3DXCleanMesh_(int arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5);
    public static RawBool IntersectTri(RawVector3 arg0Ref, RawVector3 arg1Ref, RawVector3 arg2Ref, RawVector3 rayPosRef, RawVector3 rayDirRef, float uRef, float vRef, float distRef);
    private static RawBool D3DXIntersectTri_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5, Void* arg6, Void* arg7);
    public static void ConvertMeshSubsetToSingleStrip(BaseMesh meshIn, int attribId, int iBOptions, IndexBuffer& indexBufferOut, int numIndicesRef);
    private static int D3DXConvertMeshSubsetToSingleStrip_(Void* arg0, int arg1, int arg2, Void* arg3, Void* arg4);
    public static void CreateSkinInfo(int numVertices, VertexElement declarationRef, int numBones, SkinInfo& skinInfoOut);
    private static int D3DXCreateSkinInfo_(int arg0, Void* arg1, int arg2, Void* arg3);
    public static int GetDeclVertexSize(VertexElement[] declRef, int stream);
    private static int D3DXGetDeclVertexSize_(Void* arg0, int arg1);
    public static void GeneratePMesh(Mesh meshRef, int adjacencyRef, AttributeWeights& vertexAttributeWeightsRef, float vertexWeightsRef, int minValue, int options, ProgressiveMesh& pMeshOut);
    private static int D3DXGeneratePMesh_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, int arg4, int arg5, Void* arg6);
    public static void TessellateRectPatch(VertexBuffer vBRef, float numSegsRef, VertexElement dwInDeclRef, RectanglePatchInfo& rectPatchInfoRef, Mesh meshRef);
    private static int D3DXTessellateRectPatch_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4);
    public static VertexFormat FVFFromDeclarator(VertexElement[] declaratorRef);
    private static int D3DXFVFFromDeclarator_(Void* arg0, Void* arg1);
    public static void ComputeBoundingBox(RawVector3 firstPositionRef, int numVertices, int dwStride, RawVector3 minRef, RawVector3 maxRef);
    private static int D3DXComputeBoundingBox_(Void* arg0, int arg1, int arg2, Void* arg3, Void* arg4);
    public static void CreateSkinInfoFromBlendedMesh(BaseMesh meshRef, int numBones, BoneCombination boneCombinationTableRef, SkinInfo& skinInfoOut);
    private static int D3DXCreateSkinInfoFromBlendedMesh_(Void* arg0, int arg1, Void* arg2, Void* arg3);
    public static void ComputeTangentFrameEx(Mesh meshRef, int dwTextureInSemantic, int dwTextureInIndex, int dwUPartialOutSemantic, int dwUPartialOutIndex, int dwVPartialOutSemantic, int dwVPartialOutIndex, int dwNormalOutSemantic, int dwNormalOutIndex, int dwOptions, int dwAdjacencyRef, float fPartialEdgeThreshold, float fSingularPointThreshold, float fNormalEdgeThreshold, Mesh& meshOutOut, Blob& vertexMappingOut);
    private static int D3DXComputeTangentFrameEx_(Void* arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, Void* arg10, float arg11, float arg12, float arg13, Void* arg14, Void* arg15);
    public static RawBool SphereBoundProbe(RawVector3 centerRef, float radius, RawVector3 rayPositionRef, RawVector3 rayDirectionRef);
    private static RawBool D3DXSphereBoundProbe_(Void* arg0, float arg1, Void* arg2, Void* arg3);
    public static void UVAtlasCreate(Mesh meshRef, int uMaxChartNumber, float fMaxStretch, int uWidth, int uHeight, float fGutter, int dwTextureIndex, int dwAdjacencyRef, int dwFalseEdgeAdjacencyRef, float fIMTArrayRef, FunctionCallback statusCallbackRef, float fCallbackFrequency, IntPtr userContextRef, int dwOptions, Mesh& meshOutOut, Blob& facePartitioningOut, Blob& vertexRemapArrayOut, float fMaxStretchOutRef, int uNumChartsOutRef);
    private static int D3DXUVAtlasCreate_(Void* arg0, int arg1, float arg2, int arg3, int arg4, float arg5, int arg6, Void* arg7, Void* arg8, Void* arg9, Void* arg10, float arg11, Void* arg12, int arg13, Void* arg14, Void* arg15, Void* arg16, Void* arg17, Void* arg18);
    public static void UVAtlasPartition(Mesh meshRef, int uMaxChartNumber, float fMaxStretch, int dwTextureIndex, int dwAdjacencyRef, int dwFalseEdgeAdjacencyRef, float fIMTArrayRef, FunctionCallback statusCallbackRef, float fCallbackFrequency, IntPtr userContextRef, int dwOptions, Mesh& meshOutOut, Blob& facePartitioningOut, Blob& vertexRemapArrayOut, Blob& partitionResultAdjacencyOut, float fMaxStretchOutRef, int uNumChartsOutRef);
    private static int D3DXUVAtlasPartition_(Void* arg0, int arg1, float arg2, int arg3, Void* arg4, Void* arg5, Void* arg6, Void* arg7, float arg8, Void* arg9, int arg10, Void* arg11, Void* arg12, Void* arg13, Void* arg14, Void* arg15, Void* arg16);
    public static void CreatePMeshFromStream(IntPtr streamRef, int options, Device d3DDeviceRef, Blob& materialsOut, Blob& effectInstancesOut, int numMaterialsRef, ProgressiveMesh& pMeshOut);
    private static int D3DXCreatePMeshFromStream_(Void* arg0, int arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5, Void* arg6);
    public static void ComputeIMTFromTexture(Mesh meshRef, Texture textureRef, int dwTextureIndex, int dwOptions, FunctionCallback statusCallbackRef, IntPtr userContextRef, Blob& iMTDataOut);
    private static int D3DXComputeIMTFromTexture_(Void* arg0, Void* arg1, int arg2, int arg3, Void* arg4, Void* arg5, Void* arg6);
    public static void CreateSPMesh(Mesh meshRef, int adjacencyRef, AttributeWeights& vertexAttributeWeightsRef, float vertexWeightsRef, SimplificationMesh& sMeshOut);
    private static int D3DXCreateSPMesh_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4);
    public static void ConcatenateMeshes(Mesh& meshesOut, int numMeshes, int options, RawMatrix& geomXFormsRef, RawMatrix& textureXFormsRef, VertexElement[] declRef, Device d3DDeviceRef, Mesh& meshOutOut);
    private static int D3DXConcatenateMeshes_(Void* arg0, int arg1, int arg2, Void* arg3, Void* arg4, Void* arg5, Void* arg6, Void* arg7);
    public static RawBool BoxBoundProbe(RawVector3 minRef, RawVector3 maxRef, RawVector3 rayPositionRef, RawVector3 rayDirectionRef);
    private static RawBool D3DXBoxBoundProbe_(Void* arg0, Void* arg1, Void* arg2, Void* arg3);
    public static void LoadMeshFromXResource(IntPtr module, string name, string type, int options, Device d3DDeviceRef, Blob& adjacencyOut, Blob& materialsOut, Blob& effectInstancesOut, int numMaterialsRef, Mesh& meshOut);
    private static int D3DXLoadMeshFromXResource_(Void* arg0, Void* arg1, Void* arg2, int arg3, Void* arg4, Void* arg5, Void* arg6, Void* arg7, Void* arg8, Void* arg9);
    public static void SimplifyMesh(Mesh meshRef, int adjacencyRef, AttributeWeights& vertexAttributeWeightsRef, float vertexWeightsRef, int minValue, int options, Mesh& meshOut);
    private static int D3DXSimplifyMesh_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, int arg4, int arg5, Void* arg6);
    public static void CreateMeshFVF(int numFaces, int numVertices, int options, VertexFormat fvf, Device d3DDeviceRef, Mesh& meshOut);
    private static int D3DXCreateMeshFVF_(int arg0, int arg1, int arg2, int arg3, Void* arg4, Void* arg5);
    public static void ComputeIMTFromPerVertexSignal(Mesh meshRef, float fVertexSignalRef, int uSignalDimension, int uSignalStride, int dwOptions, FunctionCallback statusCallbackRef, IntPtr userContextRef, Blob& iMTDataOut);
    private static int D3DXComputeIMTFromPerVertexSignal_(Void* arg0, Void* arg1, int arg2, int arg3, int arg4, Void* arg5, Void* arg6, Void* arg7);
    public static Result OptimizeVertices(IntPtr bIndicesRef, int cFaces, int cVertices, RawBool b32BitIndices, Int32[] vertexRemapRef);
    private static int D3DXOptimizeVertices_(Void* arg0, int arg1, int arg2, RawBool arg3, Void* arg4);
    public static void LoadMeshFromXof(XFileData xofMeshRef, int options, Device d3DDeviceRef, Blob& adjacencyOut, Blob& materialsOut, Blob& effectInstancesOut, int numMaterialsRef, Mesh& meshOut);
    private static int D3DXLoadMeshFromXof_(Void* arg0, int arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5, Void* arg6, Void* arg7);
    public static void CreatePatchMesh(PatchInfo infoRef, int dwNumPatches, int dwNumVertices, int dwOptions, VertexElement[] declRef, Device d3DDeviceRef, PatchMesh& patchMeshRef);
    private static int D3DXCreatePatchMesh_(Void* arg0, int arg1, int arg2, int arg3, Void* arg4, Void* arg5, Void* arg6);
    public static Result RectPatchSize(float fNumSegsRef, Int32& dwTrianglesRef, Int32& dwVerticesRef);
    private static int D3DXRectPatchSize_(Void* arg0, Void* arg1, Void* arg2);
    public static void TessellateTriPatch(VertexBuffer vBRef, float numSegsRef, VertexElement inDeclRef, TrianglePatchInfo triPatchInfoRef, Mesh meshRef);
    private static int D3DXTessellateTriPatch_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4);
    public static void ComputeBoundingSphere(RawVector3 firstPositionRef, int numVertices, int dwStride, RawVector3 centerRef, float radiusRef);
    private static int D3DXComputeBoundingSphere_(Void* arg0, int arg1, int arg2, Void* arg3, Void* arg4);
    public static void LoadMeshFromXW(string filenameRef, int options, Device d3DDeviceRef, Blob& adjacencyOut, Blob& materialsOut, Blob& effectInstancesOut, int numMaterialsRef, Mesh& meshOut);
    private static int D3DXLoadMeshFromXW_(Void* arg0, int arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5, Void* arg6, Void* arg7);
    public static void LoadMeshFromXInMemory(IntPtr memory, int sizeOfMemory, int options, Device d3DDeviceRef, Blob& adjacencyOut, Blob& materialsOut, Blob& effectInstancesOut, int numMaterialsRef, Mesh& meshOut);
    private static int D3DXLoadMeshFromXInMemory_(Void* arg0, int arg1, int arg2, Void* arg3, Void* arg4, Void* arg5, Void* arg6, Void* arg7, Void* arg8);
    public static void ConvertMeshSubsetToStrips(BaseMesh meshIn, int attribId, int iBOptions, IndexBuffer& indexBufferOut, int numIndicesRef, Blob& stripLengthsOut, int numStripsRef);
    private static int D3DXConvertMeshSubsetToStrips_(Void* arg0, int arg1, int arg2, Void* arg3, Void* arg4, Void* arg5, Void* arg6);
    public static void ComputeIMTFromPerTexelSignal(Mesh meshRef, int dwTextureIndex, float fTexelSignalRef, int uWidth, int uHeight, int uSignalDimension, int uComponents, int dwOptions, FunctionCallback statusCallbackRef, IntPtr userContextRef, Blob& iMTDataOut);
    private static int D3DXComputeIMTFromPerTexelSignal_(Void* arg0, int arg1, Void* arg2, int arg3, int arg4, int arg5, int arg6, int arg7, Void* arg8, Void* arg9, Void* arg10);
    public static Result TriPatchSize(float fNumSegsRef, Int32& dwTrianglesRef, Int32& dwVerticesRef);
    private static int D3DXTriPatchSize_(Void* arg0, Void* arg1, Void* arg2);
    public static void ComputeNormals(BaseMesh meshRef, int adjacencyRef);
    private static int D3DXComputeNormals_(Void* arg0, Void* arg1);
    public static void DisassembleShader(IntPtr shaderRef, RawBool enableColorCode, string commentsRef, Blob& disassemblyOut);
    private static int D3DXDisassembleShader_(Void* arg0, RawBool arg1, Void* arg2, Void* arg3);
    public static void PreprocessShader(IntPtr srcDataRef, int srcDataSize, Macro[] definesRef, IntPtr includeRef, Blob& shaderTextOut, Blob& errorMsgsOut);
    private static int D3DXPreprocessShader_(Void* arg0, int arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5);
    public static void CompileShaderFromFileW(string srcFileRef, Macro[] definesRef, IntPtr includeRef, string functionNameRef, string profileRef, int flags, Blob& shaderOut, Blob& errorMsgsOut, ConstantTable& constantTableOut);
    private static int D3DXCompileShaderFromFileW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4, int arg5, Void* arg6, Void* arg7, Void* arg8);
    public static void CreateTextureShader(int functionRef, TextureShader& textureShaderOut);
    private static int D3DXCreateTextureShader_(Void* arg0, Void* arg1);
    public static void GetShaderOutputSemantics(IntPtr functionRef, ShaderSemantic[] semanticsRef, Int32& countRef);
    private static int D3DXGetShaderOutputSemantics_(Void* arg0, Void* arg1, Void* arg2);
    public static void GetShaderInputSemantics(IntPtr functionRef, ShaderSemantic[] semanticsRef, Int32& countRef);
    private static int D3DXGetShaderInputSemantics_(Void* arg0, Void* arg1, Void* arg2);
    public static string GetPixelShaderProfile(Device deviceRef);
    private static IntPtr D3DXGetPixelShaderProfile_(Void* arg0);
    public static void FindShaderComment(IntPtr functionRef, int fourCC, IntPtr& dataOut, Int32& sizeInBytesRef);
    private static int D3DXFindShaderComment_(Void* arg0, int arg1, Void* arg2, Void* arg3);
    public static void AssembleShaderFromResourceW(IntPtr hSrcModule, string srcResourceRef, Macro[] definesRef, IntPtr includeRef, int flags, Blob& shaderOut, Blob& errorMsgsOut);
    private static int D3DXAssembleShaderFromResourceW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, int arg4, Void* arg5, Void* arg6);
    public static void AssembleShader(IntPtr srcDataRef, int srcDataLen, Macro[] definesRef, IntPtr includeRef, int flags, Blob& shaderOut, Blob& errorMsgsOut);
    private static int D3DXAssembleShader_(Void* arg0, int arg1, Void* arg2, Void* arg3, int arg4, Void* arg5, Void* arg6);
    public static void CompileShader(IntPtr srcDataRef, int srcDataLen, Macro[] definesRef, IntPtr includeRef, string functionNameRef, string profileRef, int flags, Blob& shaderOut, Blob& errorMsgsOut, ConstantTable& constantTableOut);
    private static int D3DXCompileShader_(Void* arg0, int arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5, int arg6, Void* arg7, Void* arg8, Void* arg9);
    public static void GetShaderSamplers(IntPtr functionRef, IntPtr samplersRef, Int32& countRef);
    private static int D3DXGetShaderSamplers_(Void* arg0, Void* arg1, Void* arg2);
    public static ConstantTable GetShaderConstantTable(IntPtr functionRef);
    private static int D3DXGetShaderConstantTable_(Void* arg0, Void* arg1);
    public static void AssembleShaderFromFileW(string srcFileRef, Macro[] definesRef, IntPtr includeRef, int flags, Blob& shaderOut, Blob& errorMsgsOut);
    private static int D3DXAssembleShaderFromFileW_(Void* arg0, Void* arg1, Void* arg2, int arg3, Void* arg4, Void* arg5);
    public static void GetShaderConstantTableEx(IntPtr functionRef, int flags, ConstantTable& constantTableOut);
    private static int D3DXGetShaderConstantTableEx_(Void* arg0, int arg1, Void* arg2);
    public static string GetVertexShaderProfile(Device deviceRef);
    private static IntPtr D3DXGetVertexShaderProfile_(Void* arg0);
    public static void PreprocessShaderFromResourceW(IntPtr hSrcModule, string srcResourceRef, Macro[] definesRef, IntPtr includeRef, Blob& shaderTextOut, Blob& errorMsgsOut);
    private static int D3DXPreprocessShaderFromResourceW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5);
    public static void CompileShaderFromResourceW(IntPtr hSrcModule, string srcResourceRef, Macro[] definesRef, IntPtr includeRef, string functionNameRef, string profileRef, int flags, Blob& shaderOut, Blob& errorMsgsOut, ConstantTable& constantTableOut);
    private static int D3DXCompileShaderFromResourceW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5, int arg6, Void* arg7, Void* arg8, Void* arg9);
    public static void PreprocessShaderFromFileW(string srcFileRef, Macro[] definesRef, IntPtr includeRef, Blob& shaderTextOut, Blob& errorMsgsOut);
    private static int D3DXPreprocessShaderFromFileW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4);
    public static int GetShaderSize(IntPtr functionRef);
    private static int D3DXGetShaderSize_(Void* arg0);
    public static int GetShaderVersion(IntPtr functionRef);
    private static int D3DXGetShaderVersion_(Void* arg0);
    public static void CreateCylinder(Device deviceRef, float radius1, float radius2, float length, int slices, int stacks, Mesh& meshOut, Blob& adjacencyOut);
    private static int D3DXCreateCylinder_(Void* arg0, float arg1, float arg2, float arg3, int arg4, int arg5, Void* arg6, Void* arg7);
    public static void CreateTorus(Device deviceRef, float innerRadius, float outerRadius, int sides, int rings, Mesh& meshOut, Blob& adjacencyOut);
    private static int D3DXCreateTorus_(Void* arg0, float arg1, float arg2, int arg3, int arg4, Void* arg5, Void* arg6);
    public static void CreateSphere(Device deviceRef, float radius, int slices, int stacks, Mesh& meshOut, Blob& adjacencyOut);
    private static int D3DXCreateSphere_(Void* arg0, float arg1, int arg2, int arg3, Void* arg4, Void* arg5);
    public static void CreateTeapot(Device deviceRef, Mesh& meshOut, Blob& adjacencyOut);
    private static int D3DXCreateTeapot_(Void* arg0, Void* arg1, Void* arg2);
    public static void CreateBox(Device deviceRef, float width, float height, float depth, Mesh& meshOut, Blob& adjacencyOut);
    private static int D3DXCreateBox_(Void* arg0, float arg1, float arg2, float arg3, Void* arg4, Void* arg5);
    public static void CreatePolygon(Device deviceRef, float length, int sides, Mesh& meshOut, Blob& adjacencyOut);
    private static int D3DXCreatePolygon_(Void* arg0, float arg1, int arg2, Void* arg3, Void* arg4);
    public static void CreateTextW(Device deviceRef, IntPtr hDC, string textRef, float deviation, float extrusion, Mesh& meshOut, Blob& adjacencyOut, IntPtr pGlyphMetrics);
    private static int D3DXCreateTextW_(Void* arg0, Void* arg1, Void* arg2, float arg3, float arg4, Void* arg5, Void* arg6, Void* arg7);
    public static ImageInformation GetImageInfoFromFileInMemory(IntPtr srcDataRef, int srcDataSize);
    private static int D3DXGetImageInfoFromFileInMemory_(Void* arg0, int arg1, Void* arg2);
    public static void FillVolumeTextureTX(VolumeTexture volumeTextureRef, TextureShader textureShaderRef);
    private static int D3DXFillVolumeTextureTX_(Void* arg0, Void* arg1);
    public static void CreateCubeTexture(Device deviceRef, int size, int mipLevels, int usage, Format format, Pool pool, CubeTexture& cubeTextureOut);
    private static int D3DXCreateCubeTexture_(Void* arg0, int arg1, int arg2, int arg3, int arg4, int arg5, Void* arg6);
    public static void CreateVolumeTextureFromFileInMemoryEx(Device deviceRef, IntPtr srcDataRef, int srcDataSize, int width, int height, int depth, int mipLevels, int usage, Format format, Pool pool, int filter, int mipFilter, RawColorBGRA colorKey, IntPtr srcInfoRef, PaletteEntry[] paletteRef, VolumeTexture& volumeTextureOut);
    private static int D3DXCreateVolumeTextureFromFileInMemoryEx_(Void* arg0, Void* arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, RawColorBGRA arg12, Void* arg13, Void* arg14, Void* arg15);
    public static void FillTextureTX(Texture textureRef, TextureShader textureShaderRef);
    private static int D3DXFillTextureTX_(Void* arg0, Void* arg1);
    public static void CheckCubeTextureRequirements(Device deviceRef, Int32& sizeRef, Int32& numMipLevelsRef, int usage, Format& formatRef, Pool pool);
    private static int D3DXCheckCubeTextureRequirements_(Void* arg0, Void* arg1, Void* arg2, int arg3, Void* arg4, int arg5);
    public static void CreateTextureFromFileW(Device deviceRef, string srcFileRef, Texture& textureOut);
    private static int D3DXCreateTextureFromFileW_(Void* arg0, Void* arg1, Void* arg2);
    public static void LoadSurfaceFromFileW(Surface destSurfaceRef, PaletteEntry[] destPaletteRef, IntPtr destRectRef, string srcFileRef, IntPtr srcRectRef, Filter filter, int colorKey, IntPtr srcInfoRef);
    private static int D3DXLoadSurfaceFromFileW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4, int arg5, int arg6, Void* arg7);
    public static void FillCubeTexture(CubeTexture cubeTextureRef, FunctionCallback functionRef, IntPtr dataRef);
    private static int D3DXFillCubeTexture_(Void* arg0, Void* arg1, Void* arg2);
    public static void CreateVolumeTexture(Device deviceRef, int width, int height, int depth, int mipLevels, int usage, Format format, Pool pool, VolumeTexture& volumeTextureOut);
    private static int D3DXCreateVolumeTexture_(Void* arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, Void* arg8);
    public static void LoadVolumeFromFileW(Volume destVolumeRef, PaletteEntry[] destPaletteRef, IntPtr destBoxRef, string srcFileRef, IntPtr srcBoxRef, Filter filter, int colorKey, IntPtr srcInfoRef);
    private static int D3DXLoadVolumeFromFileW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4, int arg5, int arg6, Void* arg7);
    public static void LoadSurfaceFromResourceW(Surface destSurfaceRef, PaletteEntry[] destPaletteRef, IntPtr destRectRef, IntPtr hSrcModule, string srcResourceRef, IntPtr srcRectRef, Filter filter, int colorKey, IntPtr srcInfoRef);
    private static int D3DXLoadSurfaceFromResourceW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5, int arg6, int arg7, Void* arg8);
    public static void CreateTextureFromFileExW(Device deviceRef, string srcFileRef, int width, int height, int mipLevels, int usage, Format format, Pool pool, int filter, int mipFilter, RawColorBGRA colorKey, IntPtr srcInfoRef, PaletteEntry[] paletteRef, Texture& textureOut);
    private static int D3DXCreateTextureFromFileExW_(Void* arg0, Void* arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, RawColorBGRA arg10, Void* arg11, Void* arg12, Void* arg13);
    public static void ComputeNormalMap(Texture textureRef, Texture srcTextureRef, PaletteEntry[] srcPaletteRef, int flags, int channel, float amplitude);
    private static int D3DXComputeNormalMap_(Void* arg0, Void* arg1, Void* arg2, int arg3, int arg4, float arg5);
    public static void CheckVolumeTextureRequirements(Device deviceRef, Int32& widthRef, Int32& heightRef, Int32& depthRef, Int32& numMipLevelsRef, int usage, Format& formatRef, Pool pool);
    private static int D3DXCheckVolumeTextureRequirements_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4, int arg5, Void* arg6, int arg7);
    public static void LoadSurfaceFromFileInMemory(Surface destSurfaceRef, PaletteEntry[] destPaletteRef, IntPtr destRectRef, IntPtr srcDataRef, int srcDataSize, IntPtr srcRectRef, Filter filter, int colorKey, IntPtr srcInfoRef);
    private static int D3DXLoadSurfaceFromFileInMemory_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, int arg4, Void* arg5, int arg6, int arg7, Void* arg8);
    public static void CreateTextureFromFileInMemory(Device deviceRef, IntPtr srcDataRef, int srcDataSize, Texture& textureOut);
    private static int D3DXCreateTextureFromFileInMemory_(Void* arg0, Void* arg1, int arg2, Void* arg3);
    public static void CreateCubeTextureFromResourceExW(Device deviceRef, IntPtr hSrcModule, string srcResourceRef, int size, int mipLevels, int usage, Format format, Pool pool, int filter, int mipFilter, RawColorBGRA colorKey, ImageInformation& srcInfoRef, PaletteEntry paletteRef, CubeTexture& cubeTextureOut);
    private static int D3DXCreateCubeTextureFromResourceExW_(Void* arg0, Void* arg1, Void* arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, RawColorBGRA arg10, Void* arg11, Void* arg12, Void* arg13);
    public static void CreateVolumeTextureFromFileInMemory(Device deviceRef, IntPtr srcDataRef, int srcDataSize, VolumeTexture& volumeTextureOut);
    private static int D3DXCreateVolumeTextureFromFileInMemory_(Void* arg0, Void* arg1, int arg2, Void* arg3);
    public static void LoadVolumeFromVolume(Volume destVolumeRef, PaletteEntry[] destPaletteRef, IntPtr destBoxRef, Volume srcVolumeRef, PaletteEntry[] srcPaletteRef, IntPtr srcBoxRef, Filter filter, int colorKey);
    private static int D3DXLoadVolumeFromVolume_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5, int arg6, int arg7);
    public static void SaveTextureToFileW(string destFileRef, ImageFileFormat destFormat, BaseTexture srcTextureRef, PaletteEntry[] srcPaletteRef);
    private static int D3DXSaveTextureToFileW_(Void* arg0, int arg1, Void* arg2, Void* arg3);
    public static void CreateCubeTextureFromFileW(Device deviceRef, string srcFileRef, CubeTexture& cubeTextureOut);
    private static int D3DXCreateCubeTextureFromFileW_(Void* arg0, Void* arg1, Void* arg2);
    public static void CreateCubeTextureFromFileInMemoryEx(Device deviceRef, IntPtr srcDataRef, int srcDataSize, int size, int mipLevels, int usage, Format format, Pool pool, int filter, int mipFilter, RawColorBGRA colorKey, IntPtr srcInfoRef, PaletteEntry[] paletteRef, CubeTexture& cubeTextureOut);
    private static int D3DXCreateCubeTextureFromFileInMemoryEx_(Void* arg0, Void* arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, RawColorBGRA arg10, Void* arg11, Void* arg12, Void* arg13);
    public static void CreateTextureFromResourceExW(Device deviceRef, IntPtr hSrcModule, string srcResourceRef, int width, int height, int mipLevels, int usage, Format format, Pool pool, int filter, int mipFilter, RawColorBGRA colorKey, ImageInformation& srcInfoRef, PaletteEntry paletteRef, Texture& textureOut);
    private static int D3DXCreateTextureFromResourceExW_(Void* arg0, Void* arg1, Void* arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, RawColorBGRA arg11, Void* arg12, Void* arg13, Void* arg14);
    public static ImageInformation GetImageInfoFromFileW(string srcFileRef);
    private static int D3DXGetImageInfoFromFileW_(Void* arg0, Void* arg1);
    public static void FilterTexture(BaseTexture baseTextureRef, PaletteEntry[] paletteRef, int srcLevel, Filter filter);
    private static int D3DXFilterTexture_(Void* arg0, Void* arg1, int arg2, int arg3);
    public static void LoadSurfaceFromMemory(Surface destSurfaceRef, PaletteEntry[] destPaletteRef, IntPtr destRectRef, IntPtr srcMemoryRef, Format srcFormat, int srcPitch, PaletteEntry[] srcPaletteRef, IntPtr srcRectRef, Filter filter, int colorKey);
    private static int D3DXLoadSurfaceFromMemory_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, int arg4, int arg5, Void* arg6, Void* arg7, int arg8, int arg9);
    public static Blob SaveTextureToFileInMemory(ImageFileFormat destFormat, BaseTexture srcTextureRef, PaletteEntry[] srcPaletteRef);
    private static int D3DXSaveTextureToFileInMemory_(Void* arg0, int arg1, Void* arg2, Void* arg3);
    public static void CheckTextureRequirements(Device deviceRef, Int32& widthRef, Int32& heightRef, Int32& numMipLevelsRef, int usage, Format& formatRef, Pool pool);
    private static int D3DXCheckTextureRequirements_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, int arg4, Void* arg5, int arg6);
    public static void SaveVolumeToFileW(string destFileRef, ImageFileFormat destFormat, Volume srcVolumeRef, PaletteEntry[] srcPaletteRef, IntPtr srcBoxRef);
    private static int D3DXSaveVolumeToFileW_(Void* arg0, int arg1, Void* arg2, Void* arg3, Void* arg4);
    public static void LoadVolumeFromResourceW(Volume destVolumeRef, PaletteEntry[] destPaletteRef, IntPtr destBoxRef, IntPtr hSrcModule, string srcResourceRef, IntPtr srcBoxRef, Filter filter, int colorKey, IntPtr srcInfoRef);
    private static int D3DXLoadVolumeFromResourceW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5, int arg6, int arg7, Void* arg8);
    public static void CreateVolumeTextureFromResourceExW(Device deviceRef, IntPtr hSrcModule, string srcResourceRef, int width, int height, int depth, int mipLevels, int usage, Format format, Pool pool, int filter, int mipFilter, RawColorBGRA colorKey, ImageInformation& srcInfoRef, PaletteEntry paletteRef, VolumeTexture& volumeTextureOut);
    private static int D3DXCreateVolumeTextureFromResourceExW_(Void* arg0, Void* arg1, Void* arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, RawColorBGRA arg12, Void* arg13, Void* arg14, Void* arg15);
    public static void CreateCubeTextureFromResourceW(Device deviceRef, IntPtr hSrcModule, string srcResourceRef, CubeTexture& cubeTextureOut);
    private static int D3DXCreateCubeTextureFromResourceW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3);
    public static void SaveSurfaceToFileW(string destFileRef, ImageFileFormat destFormat, Surface srcSurfaceRef, PaletteEntry[] srcPaletteRef, IntPtr srcRectRef);
    private static int D3DXSaveSurfaceToFileW_(Void* arg0, int arg1, Void* arg2, Void* arg3, Void* arg4);
    public static void CreateCubeTextureFromFileInMemory(Device deviceRef, IntPtr srcDataRef, int srcDataSize, CubeTexture& cubeTextureOut);
    private static int D3DXCreateCubeTextureFromFileInMemory_(Void* arg0, Void* arg1, int arg2, Void* arg3);
    public static void CreateCubeTextureFromFileExW(Device deviceRef, string srcFileRef, int size, int mipLevels, int usage, Format format, Pool pool, int filter, int mipFilter, RawColorBGRA colorKey, IntPtr srcInfoRef, PaletteEntry[] paletteRef, CubeTexture& cubeTextureOut);
    private static int D3DXCreateCubeTextureFromFileExW_(Void* arg0, Void* arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, RawColorBGRA arg9, Void* arg10, Void* arg11, Void* arg12);
    public static ImageInformation GetImageInfoFromResourceW(IntPtr hSrcModule, string srcResourceRef);
    private static int D3DXGetImageInfoFromResourceW_(Void* arg0, Void* arg1, Void* arg2);
    public static void FillCubeTextureTX(CubeTexture cubeTextureRef, TextureShader textureShaderRef);
    private static int D3DXFillCubeTextureTX_(Void* arg0, Void* arg1);
    public static void FillTexture(Texture textureRef, FunctionCallback functionRef, IntPtr dataRef);
    private static int D3DXFillTexture_(Void* arg0, Void* arg1, Void* arg2);
    public static void SaveSurfaceToFileInMemory(Blob& destBufOut, ImageFileFormat destFormat, Surface srcSurfaceRef, PaletteEntry[] srcPaletteRef, IntPtr srcRectRef);
    private static int D3DXSaveSurfaceToFileInMemory_(Void* arg0, int arg1, Void* arg2, Void* arg3, Void* arg4);
    public static void CreateVolumeTextureFromFileW(Device deviceRef, string srcFileRef, VolumeTexture& volumeTextureOut);
    private static int D3DXCreateVolumeTextureFromFileW_(Void* arg0, Void* arg1, Void* arg2);
    public static void CreateTextureFromResourceW(Device deviceRef, IntPtr hSrcModule, string srcResourceRef, Texture& textureOut);
    private static int D3DXCreateTextureFromResourceW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3);
    public static void LoadVolumeFromMemory(Volume destVolumeRef, PaletteEntry[] destPaletteRef, IntPtr destBoxRef, IntPtr srcMemoryRef, Format srcFormat, int srcRowPitch, int srcSlicePitch, PaletteEntry[] srcPaletteRef, IntPtr srcBoxRef, Filter filter, int colorKey);
    private static int D3DXLoadVolumeFromMemory_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, int arg4, int arg5, int arg6, Void* arg7, Void* arg8, int arg9, int arg10);
    public static void CreateVolumeTextureFromFileExW(Device deviceRef, string srcFileRef, int width, int height, int depth, int mipLevels, int usage, Format format, Pool pool, int filter, int mipFilter, RawColorBGRA colorKey, IntPtr srcInfoRef, PaletteEntry[] paletteRef, VolumeTexture& volumeTextureOut);
    private static int D3DXCreateVolumeTextureFromFileExW_(Void* arg0, Void* arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, RawColorBGRA arg11, Void* arg12, Void* arg13, Void* arg14);
    public static void CreateTextureFromFileInMemoryEx(Device deviceRef, IntPtr srcDataRef, int srcDataSize, int width, int height, int mipLevels, int usage, Format format, Pool pool, int filter, int mipFilter, RawColorBGRA colorKey, IntPtr srcInfoRef, PaletteEntry[] paletteRef, Texture& textureOut);
    private static int D3DXCreateTextureFromFileInMemoryEx_(Void* arg0, Void* arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, RawColorBGRA arg11, Void* arg12, Void* arg13, Void* arg14);
    public static void SaveVolumeToFileInMemory(Blob& destBufOut, ImageFileFormat destFormat, Volume srcVolumeRef, PaletteEntry[] srcPaletteRef, IntPtr srcBoxRef);
    private static int D3DXSaveVolumeToFileInMemory_(Void* arg0, int arg1, Void* arg2, Void* arg3, Void* arg4);
    public static void CreateVolumeTextureFromResourceW(Device deviceRef, IntPtr hSrcModule, string srcResourceRef, VolumeTexture& volumeTextureOut);
    private static int D3DXCreateVolumeTextureFromResourceW_(Void* arg0, Void* arg1, Void* arg2, Void* arg3);
    public static void CreateTexture(Device deviceRef, int width, int height, int mipLevels, int usage, Format format, Pool pool, Texture& textureOut);
    private static int D3DXCreateTexture_(Void* arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, Void* arg7);
    public static void FillVolumeTexture(VolumeTexture volumeTextureRef, FunctionCallback functionRef, IntPtr dataRef);
    private static int D3DXFillVolumeTexture_(Void* arg0, Void* arg1, Void* arg2);
    public static void LoadSurfaceFromSurface(Surface destSurfaceRef, PaletteEntry[] destPaletteRef, IntPtr destRectRef, Surface srcSurfaceRef, PaletteEntry[] srcPaletteRef, IntPtr srcRectRef, Filter filter, int colorKey);
    private static int D3DXLoadSurfaceFromSurface_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, Void* arg4, Void* arg5, int arg6, int arg7);
    public static void LoadVolumeFromFileInMemory(Volume destVolumeRef, PaletteEntry[] destPaletteRef, IntPtr destBoxRef, IntPtr srcDataRef, int srcDataSize, IntPtr srcBoxRef, Filter filter, int colorKey, IntPtr srcInfoRef);
    private static int D3DXLoadVolumeFromFileInMemory_(Void* arg0, Void* arg1, Void* arg2, Void* arg3, int arg4, Void* arg5, int arg6, int arg7, Void* arg8);
    public static void FileCreate(XFile& lplpDirectXFile);
    private static int D3DXFileCreate_(Void* arg0);
}
public enum SharpDX.Direct3D9.DebugMonitorTokens : Enum {
    public int value__;
    public static DebugMonitorTokens Enable;
    public static DebugMonitorTokens Disable;
}
public enum SharpDX.Direct3D9.DeclarationMethod : Enum {
    public byte value__;
    public static DeclarationMethod Default;
    public static DeclarationMethod PartialU;
    public static DeclarationMethod PartialV;
    public static DeclarationMethod CrossUV;
    public static DeclarationMethod UV;
    public static DeclarationMethod Lookup;
    public static DeclarationMethod LookupPresampled;
}
public enum SharpDX.Direct3D9.DeclarationType : Enum {
    public byte value__;
    public static DeclarationType Float1;
    public static DeclarationType Float2;
    public static DeclarationType Float3;
    public static DeclarationType Float4;
    public static DeclarationType Color;
    public static DeclarationType Ubyte4;
    public static DeclarationType Short2;
    public static DeclarationType Short4;
    public static DeclarationType UByte4N;
    public static DeclarationType Short2N;
    public static DeclarationType Short4N;
    public static DeclarationType UShort2N;
    public static DeclarationType UShort4N;
    public static DeclarationType UDec3;
    public static DeclarationType Dec3N;
    public static DeclarationType HalfTwo;
    public static DeclarationType HalfFour;
    public static DeclarationType Unused;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.DeclarationTypeCaps : Enum {
    public int value__;
    public static DeclarationTypeCaps UByte4;
    public static DeclarationTypeCaps UByte4N;
    public static DeclarationTypeCaps Short2N;
    public static DeclarationTypeCaps Short4N;
    public static DeclarationTypeCaps UShort2N;
    public static DeclarationTypeCaps UShort4N;
    public static DeclarationTypeCaps UDec3;
    public static DeclarationTypeCaps Dec3N;
    public static DeclarationTypeCaps HalfTwo;
    public static DeclarationTypeCaps HalfFour;
}
public enum SharpDX.Direct3D9.DeclarationUsage : Enum {
    public byte value__;
    public static DeclarationUsage Position;
    public static DeclarationUsage BlendWeight;
    public static DeclarationUsage BlendIndices;
    public static DeclarationUsage Normal;
    public static DeclarationUsage PointSize;
    public static DeclarationUsage TextureCoordinate;
    public static DeclarationUsage Tangent;
    public static DeclarationUsage Binormal;
    public static DeclarationUsage TessellateFactor;
    public static DeclarationUsage PositionTransformed;
    public static DeclarationUsage Color;
    public static DeclarationUsage Fog;
    public static DeclarationUsage Depth;
    public static DeclarationUsage Sample;
}
public enum SharpDX.Direct3D9.Degree : Enum {
    public int value__;
    public static Degree Linear;
    public static Degree Quadratic;
    public static Degree Cubic;
    public static Degree Quintic;
}
[GuidAttribute("D0223B96-BF7A-43fd-92BD-A43B0D82B9EB")]
public class SharpDX.Direct3D9.Device : ComObject {
    public long AvailableTextureMemory { get; }
    public DriverLevel DriverLevel { get; }
    public string PixelShaderProfile { get; }
    public string VertexShaderProfile { get; }
    public bool ShowCursor { get; public set; }
    public Direct3D Direct3D { get; }
    public Capabilities Capabilities { get; }
    public CreationParameters CreationParameters { get; }
    public int SwapChainCount { get; }
    unknown RawBool DialogBoxMode {public set; }
    public Surface DepthStencilSurface { get; public set; }
    public RawViewport Viewport { get; public set; }
    public Material Material { get; public set; }
    public ClipStatus ClipStatus { get; public set; }
    public int CurrentTexturePalette { get; public set; }
    public RawRectangle ScissorRect { get; public set; }
    public RawBool SoftwareVertexProcessing { get; public set; }
    public float NPatchMode { get; public set; }
    public VertexDeclaration VertexDeclaration { get; public set; }
    public VertexFormat VertexFormat { get; public set; }
    public VertexShader VertexShader { get; public set; }
    public IndexBuffer Indices { get; public set; }
    public PixelShader PixelShader { get; public set; }
    public Device(Direct3D direct3D, int adapter, DeviceType deviceType, IntPtr hFocusWindow, CreateFlags behaviorFlags, PresentParameters[] presentationParametersRef);
    public Device(IntPtr nativePtr);
    public long get_AvailableTextureMemory();
    public DriverLevel get_DriverLevel();
    public string get_PixelShaderProfile();
    public string get_VertexShaderProfile();
    public void Clear(ClearFlags clearFlags, RawColorBGRA color, float zdepth, int stencil);
    public void Clear(ClearFlags clearFlags, RawColorBGRA color, float zdepth, int stencil, RawRectangle[] rectangles);
    public void ColorFill(Surface surfaceRef, RawColorBGRA color);
    public void DrawIndexedUserPrimitives(PrimitiveType primitiveType, int minimumVertexIndex, int vertexCount, int primitiveCount, S[] indexData, Format indexDataFormat, T[] vertexData);
    public void DrawIndexedUserPrimitives(PrimitiveType primitiveType, int startIndex, int minimumVertexIndex, int vertexCount, int primitiveCount, S[] indexData, Format indexDataFormat, T[] vertexData);
    public void DrawIndexedUserPrimitives(PrimitiveType primitiveType, int startIndex, int startVertex, int minimumVertexIndex, int vertexCount, int primitiveCount, S[] indexData, Format indexDataFormat, T[] vertexData);
    public void DrawRectanglePatch(int handle, Single[] segmentCounts);
    public void DrawRectanglePatch(int handle, Single[] segmentCounts, RectanglePatchInfo info);
    public void DrawTrianglePatch(int handle, Single[] segmentCounts);
    public void DrawTrianglePatch(int handle, Single[] segmentCounts, TrianglePatchInfo info);
    public void DrawUserPrimitives(PrimitiveType primitiveType, int primitiveCount, T[] data);
    public void DrawUserPrimitives(PrimitiveType primitiveType, int startIndex, int primitiveCount, T[] data);
    public Surface GetBackBuffer(int swapChain, int backBuffer);
    public PaletteEntry[] GetPaletteEntries(int paletteNumber);
    public Boolean[] GetPixelShaderBooleanConstant(int startRegister, int count);
    public Single[] GetPixelShaderFloatConstant(int startRegister, int count);
    public Int32[] GetPixelShaderIntegerConstant(int startRegister, int count);
    public int GetRenderState(RenderState state);
    public T GetRenderState(RenderState state);
    public int GetSamplerState(int sampler, SamplerState state);
    public T GetSamplerState(int sampler, SamplerState state);
    public int GetTextureStageState(int stage, TextureStage type);
    public T GetTextureStageState(int stage, TextureStage type);
    public Boolean[] GetVertexShaderBooleanConstant(int startRegister, int count);
    public Single[] GetVertexShaderFloatConstant(int startRegister, int count);
    public Int32[] GetVertexShaderIntegerConstant(int startRegister, int count);
    public void SetCursorPosition(RawPoint point, bool flags);
    public void SetCursorPosition(int x, int y, bool flags);
    public void SetCursorProperties(RawPoint point, Surface cursorBitmapRef);
    public void SetGammaRamp(int swapChain, GammaRamp& rampRef, bool calibrate);
    public void Present();
    public void Present(RawRectangle sourceRectangle, RawRectangle destinationRectangle);
    public void Present(RawRectangle sourceRectangle, RawRectangle destinationRectangle, IntPtr windowOverride);
    public void Present(RawRectangle sourceRectangle, RawRectangle destinationRectangle, IntPtr windowOverride, IntPtr dirtyRegionRGNData);
    public void ResetStreamSourceFrequency(int stream);
    public void SetPixelShaderConstant(int startRegister, RawMatrix[] data);
    public void SetPixelShaderConstant(int startRegister, RawVector4[] data);
    public void SetPixelShaderConstant(int startRegister, Boolean[] data);
    public void SetPixelShaderConstant(int startRegister, Int32[] data);
    public void SetPixelShaderConstant(int startRegister, Single[] data);
    public void SetPixelShaderConstant(int startRegister, RawMatrix* data);
    public void SetPixelShaderConstant(int startRegister, RawMatrix data);
    public void SetPixelShaderConstant(int startRegister, RawMatrix* data, int count);
    public void SetPixelShaderConstant(int startRegister, RawMatrix[] data, int offset, int count);
    public void SetPixelShaderConstant(int startRegister, RawVector4[] data, int offset, int count);
    public void SetPixelShaderConstant(int startRegister, Boolean[] data, int offset, int count);
    public void SetPixelShaderConstant(int startRegister, Int32[] data, int offset, int count);
    public void SetPixelShaderConstant(int startRegister, Single[] data, int offset, int count);
    public void SetRenderState(RenderState renderState, bool enable);
    public void SetRenderState(RenderState renderState, float value);
    public void SetRenderState(RenderState renderState, T value);
    public void SetSamplerState(int sampler, SamplerState type, TextureFilter textureFilter);
    public void SetSamplerState(int sampler, SamplerState type, TextureAddress textureAddress);
    public void SetSamplerState(int sampler, SamplerState type, float value);
    public void SetStreamSourceFrequency(int stream, int frequency, StreamSource source);
    public void SetTextureStageState(int stage, TextureStage type, TextureArgument textureArgument);
    public void SetTextureStageState(int stage, TextureStage type, TextureOperation textureOperation);
    public void SetTextureStageState(int stage, TextureStage type, TextureTransform textureTransform);
    public void SetTextureStageState(int stage, TextureStage type, float value);
    public void SetTransform(TransformState state, RawMatrix& matrixRef);
    public void SetTransform(int index, RawMatrix& matrixRef);
    public void SetTransform(TransformState state, RawMatrix matrixRef);
    public void SetTransform(int index, RawMatrix matrixRef);
    public void SetVertexShaderConstant(int startRegister, RawMatrix[] data);
    public void SetVertexShaderConstant(int startRegister, RawVector4[] data);
    public void SetVertexShaderConstant(int startRegister, Boolean[] data);
    public void SetVertexShaderConstant(int startRegister, Int32[] data);
    public void SetVertexShaderConstant(int startRegister, Single[] data);
    public void SetVertexShaderConstant(int startRegister, RawMatrix* data);
    public void SetVertexShaderConstant(int startRegister, RawMatrix data);
    public void SetVertexShaderConstant(int startRegister, RawMatrix* data, int count);
    public void SetVertexShaderConstant(int startRegister, RawMatrix[] data, int offset, int count);
    public void SetVertexShaderConstant(int startRegister, RawVector4[] data, int offset, int count);
    public void SetVertexShaderConstant(int startRegister, Boolean[] data, int offset, int count);
    public void SetVertexShaderConstant(int startRegister, Int32[] data, int offset, int count);
    public void SetVertexShaderConstant(int startRegister, Single[] data, int offset, int count);
    public void StretchRectangle(Surface sourceSurfaceRef, Surface destSurfaceRef, TextureFilter filter);
    public bool get_ShowCursor();
    public void set_ShowCursor(bool value);
    public void UpdateSurface(Surface sourceSurfaceRef, Surface destinationSurfaceRef);
    public static Device op_Explicit(IntPtr nativePointer);
    public Direct3D get_Direct3D();
    public Capabilities get_Capabilities();
    public CreationParameters get_CreationParameters();
    public int get_SwapChainCount();
    public void set_DialogBoxMode(RawBool value);
    public Surface get_DepthStencilSurface();
    public void set_DepthStencilSurface(Surface value);
    public RawViewport get_Viewport();
    public void set_Viewport(RawViewport value);
    public Material get_Material();
    public void set_Material(Material value);
    public ClipStatus get_ClipStatus();
    public void set_ClipStatus(ClipStatus value);
    public int get_CurrentTexturePalette();
    public void set_CurrentTexturePalette(int value);
    public RawRectangle get_ScissorRect();
    public void set_ScissorRect(RawRectangle value);
    public RawBool get_SoftwareVertexProcessing();
    public void set_SoftwareVertexProcessing(RawBool value);
    public float get_NPatchMode();
    public void set_NPatchMode(float value);
    public VertexDeclaration get_VertexDeclaration();
    public void set_VertexDeclaration(VertexDeclaration value);
    public VertexFormat get_VertexFormat();
    public void set_VertexFormat(VertexFormat value);
    public VertexShader get_VertexShader();
    public void set_VertexShader(VertexShader value);
    public IndexBuffer get_Indices();
    public void set_Indices(IndexBuffer value);
    public PixelShader get_PixelShader();
    public void set_PixelShader(PixelShader value);
    public Result TestCooperativeLevel();
    internal int GetAvailableTextureMem();
    public void EvictManagedResources();
    internal void GetDirect3D(Direct3D& d3D9Out);
    internal void GetCapabilities(Capabilities& capsRef);
    public DisplayMode GetDisplayMode(int iSwapChain);
    internal void GetCreationParameters(CreationParameters& parametersRef);
    public void SetCursorProperties(int xHotSpot, int yHotSpot, Surface cursorBitmapRef);
    internal void SetCursorPosition(int x, int y, int flags);
    public RawBool GetSetShowCursor(RawBool bShow);
    internal void CreateAdditionalSwapChain(PresentParameters& presentationParametersRef, SwapChain swapChainRef);
    public SwapChain GetSwapChain(int iSwapChain);
    internal int GetSwapChainCount();
    public void Reset(PresentParameters[] presentationParametersRef);
    internal void Present(IntPtr sourceRectRef, IntPtr destRectRef, IntPtr hDestWindowOverride, IntPtr dirtyRegionRef);
    internal Surface GetBackBuffer(int iSwapChain, int iBackBuffer, BackBufferType type);
    public RasterStatus GetRasterStatus(int iSwapChain);
    internal void SetDialogBoxMode(RawBool bEnableDialogs);
    internal void SetGammaRamp(int iSwapChain, int flags, GammaRamp& rampRef);
    public GammaRamp GetGammaRamp(int iSwapChain);
    internal void CreateTexture(int width, int height, int levels, int usage, Format format, Pool pool, Texture textureOut, IntPtr sharedHandleRef);
    internal void CreateVolumeTexture(int width, int height, int depth, int levels, int usage, Format format, Pool pool, VolumeTexture volumeTextureOut, IntPtr sharedHandleRef);
    internal void CreateCubeTexture(int edgeLength, int levels, int usage, Format format, Pool pool, CubeTexture cubeTextureOut, IntPtr sharedHandleRef);
    internal void CreateVertexBuffer(int length, Usage usage, VertexFormat vertexFormat, Pool pool, VertexBuffer vertexBufferOut, IntPtr sharedHandleRef);
    internal void CreateIndexBuffer(int length, int usage, Format format, Pool pool, IndexBuffer indexBufferOut, IntPtr sharedHandleRef);
    internal Surface CreateRenderTarget(int width, int height, Format format, MultisampleType multiSample, int multisampleQuality, RawBool lockable, IntPtr sharedHandleRef);
    internal Surface CreateDepthStencilSurface(int width, int height, Format format, MultisampleType multiSample, int multisampleQuality, RawBool discard, IntPtr sharedHandleRef);
    public void UpdateSurface(Surface sourceSurfaceRef, Nullable`1<RawRectangle> sourceRectRef, Surface destinationSurfaceRef, Nullable`1<RawPoint> destPointRef);
    public void UpdateTexture(BaseTexture sourceTextureRef, BaseTexture destinationTextureRef);
    public void GetRenderTargetData(Surface renderTargetRef, Surface destSurfaceRef);
    public void GetFrontBufferData(int iSwapChain, Surface destSurfaceRef);
    public void StretchRectangle(Surface sourceSurfaceRef, Nullable`1<RawRectangle> sourceRectRef, Surface destSurfaceRef, Nullable`1<RawRectangle> destRectRef, TextureFilter filter);
    public void ColorFill(Surface surfaceRef, Nullable`1<RawRectangle> rectRef, RawColorBGRA color);
    internal Surface CreateOffscreenPlainSurface(int width, int height, Format format, Pool pool, IntPtr sharedHandleRef);
    public void SetRenderTarget(int renderTargetIndex, Surface renderTargetRef);
    public Surface GetRenderTarget(int renderTargetIndex);
    internal void SetDepthStencilSurface(Surface newZStencilRef);
    internal void GetDepthStencilSurface(Surface& zStencilSurfaceOut);
    public void BeginScene();
    public void EndScene();
    internal void Clear_(int count, RawRectangle[] rectsRef, ClearFlags flags, RawColorBGRA color, float z, int stencil);
    internal void SetTransform_(int state, RawMatrix& matrixRef);
    public RawMatrix GetTransform(TransformState state);
    public void MultiplyTransform(TransformState arg0, RawMatrix& arg1);
    internal void SetViewport(RawViewport viewportRef);
    internal void GetViewport(RawViewport& viewportRef);
    internal void SetMaterial(Material& materialRef);
    internal void GetMaterial(Material& materialRef);
    public void SetLight(int index, Light& arg1);
    public Light GetLight(int index);
    public void EnableLight(int index, RawBool enable);
    public RawBool IsLightEnabled(int index);
    public void SetClipPlane(int index, RawVector4 planeRef);
    public float GetClipPlane(int index);
    public void SetRenderState(RenderState state, int value);
    internal void GetRenderState(RenderState state, IntPtr valueRef);
    internal void CreateStateBlock(StateBlockType type, StateBlock sBOut);
    public void BeginStateBlock();
    public StateBlock EndStateBlock();
    internal void SetClipStatus(ClipStatus clipStatusRef);
    internal void GetClipStatus(ClipStatus& clipStatusRef);
    public BaseTexture GetTexture(int stage);
    public void SetTexture(int stage, BaseTexture textureRef);
    internal void GetTextureStageState(int stage, TextureStage type, IntPtr valueRef);
    public void SetTextureStageState(int stage, TextureStage type, int value);
    internal void GetSamplerState(int sampler, SamplerState type, IntPtr valueRef);
    public void SetSamplerState(int sampler, SamplerState type, int value);
    public void ValidateDevice(int numPassesRef);
    public void SetPaletteEntries(int paletteNumber, PaletteEntry[] entriesRef);
    internal void GetPaletteEntries(int paletteNumber, PaletteEntry[] entriesRef);
    internal void SetCurrentTexturePalette(int paletteNumber);
    internal void GetCurrentTexturePalette(Int32& paletteNumber);
    internal void SetScissorRect(RawRectangle rectRef);
    internal void GetScissorRect(RawRectangle& rectRef);
    internal void SetSoftwareVertexProcessing(RawBool bSoftware);
    internal RawBool GetSoftwareVertexProcessing();
    internal void SetNPatchMode(float nSegments);
    internal float GetNPatchMode();
    public void DrawPrimitives(PrimitiveType primitiveType, int startVertex, int primitiveCount);
    public void DrawIndexedPrimitive(PrimitiveType arg0, int baseVertexIndex, int minVertexIndex, int numVertices, int startIndex, int primCount);
    internal void DrawPrimitiveUP(PrimitiveType primitiveType, int primitiveCount, IntPtr vertexStreamZeroDataRef, int vertexStreamZeroStride);
    internal void DrawIndexedPrimitiveUP(PrimitiveType primitiveType, int minVertexIndex, int numVertices, int primitiveCount, IntPtr indexDataRef, Format indexDataFormat, IntPtr vertexStreamZeroDataRef, int vertexStreamZeroStride);
    public void ProcessVertices(int srcStartIndex, int destIndex, int vertexCount, VertexBuffer destBufferRef, VertexDeclaration vertexDeclRef, LockFlags flags);
    internal void CreateVertexDeclaration(VertexElement[] vertexElementsRef, VertexDeclaration declOut);
    internal void SetVertexDeclaration(VertexDeclaration declRef);
    internal void GetVertexDeclaration(VertexDeclaration& declOut);
    internal void SetVertexFormat(VertexFormat vertexFormat);
    internal void GetVertexFormat(VertexFormat& ertexFormatRef);
    internal void CreateVertexShader(IntPtr functionRef, VertexShader shaderOut);
    internal void SetVertexShader(VertexShader shaderRef);
    internal void GetVertexShader(VertexShader& shaderOut);
    internal void SetVertexShaderConstantF(int startRegister, IntPtr constantDataRef, int vector4fCount);
    internal void GetVertexShaderConstantF(int startRegister, Single[] constantDataRef, int vector4fCount);
    internal void SetVertexShaderConstantI(int startRegister, IntPtr constantDataRef, int vector4iCount);
    internal void GetVertexShaderConstantI(int startRegister, Int32[] constantDataRef, int vector4iCount);
    internal void SetVertexShaderConstantB(int startRegister, IntPtr constantDataRef, int boolCount);
    internal void GetVertexShaderConstantB(int startRegister, IntPtr constantDataRef, int boolCount);
    public void SetStreamSource(int streamNumber, VertexBuffer streamDataRef, int offsetInBytes, int stride);
    public void GetStreamSource(int streamNumber, VertexBuffer& streamDataOut, Int32& offsetInBytesRef, Int32& strideRef);
    internal void SetStreamSourceFrequency(int streamNumber, int setting);
    public void GetStreamSourceFrequency(int streamNumber, Int32& settingRef);
    internal void SetIndices(IndexBuffer indexDataRef);
    internal void GetIndices(IndexBuffer& indexDataOut);
    internal void CreatePixelShader(IntPtr functionRef, PixelShader shaderOut);
    internal void SetPixelShader(PixelShader shaderRef);
    internal void GetPixelShader(PixelShader& shaderOut);
    internal void SetPixelShaderConstantF(int startRegister, IntPtr constantDataRef, int vector4fCount);
    internal void GetPixelShaderConstantF(int startRegister, Single[] constantDataRef, int vector4fCount);
    internal void SetPixelShaderConstantI(int startRegister, IntPtr constantDataRef, int vector4iCount);
    internal void GetPixelShaderConstantI(int startRegister, Int32[] constantDataRef, int vector4iCount);
    internal void SetPixelShaderConstantB(int startRegister, IntPtr constantDataRef, int boolCount);
    internal void GetPixelShaderConstantB(int startRegister, IntPtr constantDataRef, int boolCount);
    internal void DrawRectanglePatch(int handle, Single[] numSegsRef, IntPtr rectPatchInfoRef);
    internal void DrawTrianglePatch(int handle, Single[] numSegsRef, IntPtr triPatchInfoRef);
    public void DeletePatch(int handle);
    internal void CreateQuery(QueryType type, Query queryOut);
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.DeviceCaps : Enum {
    public int value__;
    public static DeviceCaps ExecuteSystemMemory;
    public static DeviceCaps ExecuteVideoMemory;
    public static DeviceCaps TLVertexSystemMemory;
    public static DeviceCaps TLVertexVideoMemory;
    public static DeviceCaps TextureSystemMemory;
    public static DeviceCaps TextureVideoMemory;
    public static DeviceCaps DrawPrimTLVertex;
    public static DeviceCaps CanRenderAfterFlip;
    public static DeviceCaps TextureNonLocalVideoMemory;
    public static DeviceCaps DrawPrimitives2;
    public static DeviceCaps SeparateTextureMemory;
    public static DeviceCaps DrawPrimitives2Extended;
    public static DeviceCaps HWTransformAndLight;
    public static DeviceCaps CanBlitSysToNonLocal;
    public static DeviceCaps HWRasterization;
    public static DeviceCaps PureDevice;
    public static DeviceCaps QuinticRTPatches;
    public static DeviceCaps RTPatches;
    public static DeviceCaps RTPatchHandleZero;
    public static DeviceCaps NPatches;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.DeviceCaps2 : Enum {
    public int value__;
    public static DeviceCaps2 StreamOffset;
    public static DeviceCaps2 DMapNPatch;
    public static DeviceCaps2 AdaptiveTessRTPatch;
    public static DeviceCaps2 AdaptiveTessNPatch;
    public static DeviceCaps2 CanStretchRectFromTextures;
    public static DeviceCaps2 PresampledMapNPatch;
    public static DeviceCaps2 VertexElementsCanShareStreamOffset;
}
[GuidAttribute("B18B10CE-2649-405a-870F-95F777D4313A")]
public class SharpDX.Direct3D9.DeviceEx : Device {
    public int GPUThreadPriority { get; public set; }
    public int MaximumFrameLatency { get; public set; }
    public DeviceEx(Direct3DEx direct3D, int adapter, DeviceType deviceType, IntPtr controlHandle, CreateFlags createFlags, PresentParameters[] presentParameters);
    public DeviceEx(Direct3DEx direct3D, int adapter, DeviceType deviceType, IntPtr controlHandle, CreateFlags createFlags, PresentParameters presentParameters);
    public DeviceEx(Direct3DEx direct3D, int adapter, DeviceType deviceType, IntPtr controlHandle, CreateFlags createFlags, PresentParameters presentParameters, DisplayModeEx fullScreenDisplayMode);
    public DeviceEx(Direct3DEx direct3D, int adapter, DeviceType deviceType, IntPtr controlHandle, CreateFlags createFlags, PresentParameters[] presentParameters, DisplayModeEx[] fullScreenDisplayMode);
    public DeviceEx(IntPtr nativePtr);
    public DeviceState CheckDeviceState(IntPtr windowHandle);
    public ResourceResidency CheckResourceResidency(Resource[] resources);
    public DisplayModeEx GetDisplayModeEx(int swapChain);
    public DisplayModeEx GetDisplayModeEx(int swapChain, DisplayRotation& rotation);
    public void PresentEx(Present flags);
    public void PresentEx(Present flags, RawRectangle sourceRectangle, RawRectangle destinationRectangle);
    public void PresentEx(Present flags, RawRectangle sourceRectangle, RawRectangle destinationRectangle, IntPtr windowOverride);
    public void PresentEx(Present flags, RawRectangle sourceRectangle, RawRectangle destinationRectangle, IntPtr windowOverride, IntPtr dirtyRegionRGNData);
    public void ResetEx(PresentParameters& presentationParametersRef);
    public void ResetEx(PresentParameters& presentationParametersRef, DisplayModeEx fullScreenDisplayMode);
    public static DeviceEx op_Explicit(IntPtr nativePointer);
    public int get_GPUThreadPriority();
    public void set_GPUThreadPriority(int value);
    public int get_MaximumFrameLatency();
    public void set_MaximumFrameLatency(int value);
    public void SetConvolutionMonoKernel(int width, int height, Single[] rows, Single[] columns);
    public void ComposeRects(Surface srcRef, Surface dstRef, VertexBuffer srcRectDescsRef, int numRects, VertexBuffer dstRectDescsRef, ComposeRectOperation operation, int xoffset, int yoffset);
    internal void PresentEx(IntPtr sourceRectRef, IntPtr destRectRef, IntPtr hDestWindowOverride, IntPtr dirtyRegionRef, int dwFlags);
    internal void GetGPUThreadPriority(Int32& priorityRef);
    internal void SetGPUThreadPriority(int priority);
    public void WaitForVBlank(int iSwapChain);
    internal Result CheckResourceResidency(Resource[] resourceArrayRef, int numResources);
    internal Result CheckResourceResidency(ComArray`1<Resource> resourceArrayRef, int numResources);
    private Result CheckResourceResidency(IntPtr resourceArrayRef, int numResources);
    internal void SetMaximumFrameLatency(int maxLatency);
    internal void GetMaximumFrameLatency(Int32& maxLatencyRef);
    internal Result CheckDeviceState_(IntPtr hDestinationWindow);
    internal Surface CreateRenderTargetEx(int width, int height, Format format, MultisampleType multiSample, int multisampleQuality, RawBool lockable, IntPtr sharedHandleRef, int usage);
    internal Surface CreateOffscreenPlainSurfaceEx(int width, int height, Format format, Pool pool, IntPtr sharedHandleRef, int usage);
    internal Surface CreateDepthStencilSurfaceEx(int width, int height, Format format, MultisampleType multiSample, int multisampleQuality, RawBool discard, IntPtr sharedHandleRef, int usage);
    internal void ResetEx(PresentParameters& presentationParametersRef, IntPtr fullscreenDisplayModeRef);
    internal DisplayModeEx GetDisplayModeEx(int iSwapChain, IntPtr rotationRef);
}
public enum SharpDX.Direct3D9.DeviceState : Enum {
    public int value__;
    public static DeviceState DeviceHung;
    public static DeviceState DeviceLost;
    public static DeviceState DeviceRemoved;
    public static DeviceState Ok;
    public static DeviceState OutOfVideoMemory;
    public static DeviceState PresentModeChanged;
    public static DeviceState PresentOccluded;
}
public enum SharpDX.Direct3D9.DeviceType : Enum {
    public int value__;
    public static DeviceType Hardware;
    public static DeviceType Reference;
    public static DeviceType Software;
    public static DeviceType NullReference;
}
[GuidAttribute("81BDCBCA-64D4-426d-AE8D-AD0147F4275C")]
public class SharpDX.Direct3D9.Direct3D : ComObject {
    [CompilerGeneratedAttribute]
private AdapterCollection <Adapters>k__BackingField;
    public AdapterCollection Adapters { get; internal set; }
    public int AdapterCount { get; }
    public Direct3D(IntPtr nativePtr);
    public static void CheckVersion();
    [CompilerGeneratedAttribute]
public AdapterCollection get_Adapters();
    [CompilerGeneratedAttribute]
internal void set_Adapters(AdapterCollection value);
    public bool CheckDepthStencilMatch(int adapter, DeviceType deviceType, Format adapterFormat, Format renderTargetFormat, Format depthStencilFormat);
    public bool CheckDepthStencilMatch(int adapter, DeviceType deviceType, Format adapterFormat, Format renderTargetFormat, Format depthStencilFormat, Result& result);
    public bool CheckDeviceFormat(int adapter, DeviceType deviceType, Format adapterFormat, Usage usage, ResourceType resourceType, Format checkFormat);
    public bool CheckDeviceFormat(int adapter, DeviceType deviceType, Format adapterFormat, Usage usage, ResourceType resourceType, Format checkFormat, Result& result);
    public bool CheckDeviceFormatConversion(int adapter, DeviceType deviceType, Format sourceFormat, Format targetFormat);
    public bool CheckDeviceFormatConversion(int adapter, DeviceType deviceType, Format sourceFormat, Format targetFormat, Result& result);
    public bool CheckDeviceMultisampleType(int adapter, DeviceType deviceType, Format surfaceFormat, bool windowed, MultisampleType multisampleType);
    public bool CheckDeviceMultisampleType(int adapter, DeviceType deviceType, Format surfaceFormat, bool windowed, MultisampleType multisampleType, Int32& qualityLevels);
    public bool CheckDeviceMultisampleType(int adapter, DeviceType deviceType, Format surfaceFormat, bool windowed, MultisampleType multisampleType, Int32& qualityLevels, Result& result);
    public bool CheckDeviceType(int adapter, DeviceType deviceType, Format adapterFormat, Format backBufferFormat, bool windowed);
    public bool CheckDeviceType(int adapter, DeviceType deviceType, Format adapterFormat, Format backBufferFormat, bool windowed, Result& result);
    public AdapterDetails GetAdapterIdentifier(int adapter);
    public static Direct3D op_Explicit(IntPtr nativePointer);
    public int get_AdapterCount();
    public void RegisterSoftwareDevice(IntPtr initializeFunctionRef);
    internal int GetAdapterCount();
    internal AdapterDetails GetAdapterIdentifier(int adapter, int flags);
    public int GetAdapterModeCount(int adapter, Format format);
    public DisplayMode EnumAdapterModes(int adapter, Format format, int mode);
    public DisplayMode GetAdapterDisplayMode(int adapter);
    internal Result CheckDeviceType_(int adapter, DeviceType devType, Format adapterFormat, Format backBufferFormat, RawBool bWindowed);
    internal Result CheckDeviceFormat_(int adapter, DeviceType deviceType, Format adapterFormat, int usage, ResourceType rType, Format checkFormat);
    internal Result CheckDeviceMultiSampleType_(int adapter, DeviceType deviceType, Format surfaceFormat, RawBool windowed, MultisampleType multiSampleType, Int32& qualityLevelsRef);
    internal Result CheckDepthStencilMatch_(int adapter, DeviceType deviceType, Format adapterFormat, Format renderTargetFormat, Format depthStencilFormat);
    internal Result CheckDeviceFormatConversion_(int adapter, DeviceType deviceType, Format sourceFormat, Format targetFormat);
    public Capabilities GetDeviceCaps(int adapter, DeviceType deviceType);
    public IntPtr GetAdapterMonitor(int adapter);
    internal void CreateDevice(int adapter, DeviceType deviceType, IntPtr hFocusWindow, CreateFlags behaviorFlags, PresentParameters[] presentationParametersRef, Device returnedDeviceInterfaceOut);
}
[GuidAttribute("02177241-69FC-400C-8FF1-93A44DF6861D")]
public class SharpDX.Direct3D9.Direct3DEx : Direct3D {
    [CompilerGeneratedAttribute]
private AdapterExCollection <AdaptersEx>k__BackingField;
    public AdapterExCollection AdaptersEx { get; private set; }
    public Direct3DEx(IntPtr nativePtr);
    public DisplayModeEx GetAdapterDisplayModeEx(int adapter);
    [CompilerGeneratedAttribute]
public AdapterExCollection get_AdaptersEx();
    [CompilerGeneratedAttribute]
private void set_AdaptersEx(AdapterExCollection value);
    public static Direct3DEx op_Explicit(IntPtr nativePointer);
    public int GetAdapterModeCountEx(int adapter, DisplayModeFilter filterRef);
    public DisplayModeEx EnumerateAdapterModesEx(int adapter, DisplayModeFilter filterRef, int mode);
    public DisplayModeEx GetAdapterDisplayModeEx(int adapter, DisplayRotation& rotationRef);
    internal void CreateDeviceEx(int adapter, DeviceType deviceType, IntPtr hFocusWindow, int behaviorFlags, PresentParameters[] presentationParametersRef, DisplayModeEx[] fullscreenDisplayModeRef, DeviceEx returnedDeviceInterfaceOut);
    public long GetAdapterLuid(int adapter);
}
public class SharpDX.Direct3D9.DisplayMode : ValueType {
    public int Width;
    public int Height;
    public int RefreshRate;
    public Format Format;
    public float AspectRatio { get; }
    public float get_AspectRatio();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class SharpDX.Direct3D9.DisplayModeCollection : ReadOnlyCollection`1<DisplayMode> {
    internal DisplayModeCollection(Direct3D direct3D, int adapter, Format format);
}
public class SharpDX.Direct3D9.DisplayModeEx : object {
    internal int Size;
    public int Width;
    public int Height;
    public int RefreshRate;
    public Format Format;
    public ScanlineOrdering ScanLineOrdering;
    public float AspectRatio { get; }
    public float get_AspectRatio();
    public virtual string ToString();
    internal static __Native __NewNative();
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[DefaultMemberAttribute("Item")]
public class SharpDX.Direct3D9.DisplayModeExCollection : ReadOnlyCollection`1<DisplayModeEx> {
    internal DisplayModeExCollection(Direct3DEx direct3D, int adapter, DisplayModeFilter filter);
}
public class SharpDX.Direct3D9.DisplayModeFilter : ValueType {
    public int Size;
    public Format Format;
    public ScanlineOrdering ScanLineOrdering;
}
public enum SharpDX.Direct3D9.DisplayRotation : Enum {
    public int value__;
    public static DisplayRotation Identity;
    public static DisplayRotation Rotation90;
    public static DisplayRotation Rotation180;
    public static DisplayRotation Rotation270;
}
public enum SharpDX.Direct3D9.DriverLevel : Enum {
    public int value__;
    public static DriverLevel Direct3D7;
    public static DriverLevel Direct3D8;
    public static DriverLevel Direct3D9;
}
[GuidAttribute("f6ceb4b3-4e4c-40dd-b883-8d8de5ea0cd5")]
public class SharpDX.Direct3D9.Effect : BaseEffect {
    public EffectHandle Technique { get; public set; }
    public EffectPool Pool { get; }
    public Device Device { get; }
    public EffectStateManager StateManager { get; public set; }
    public Effect(IntPtr nativePtr);
    public int Begin();
    public EffectHandle get_Technique();
    public void set_Technique(EffectHandle value);
    public static Effect FromFile(Device device, string fileName, ShaderFlags flags);
    public static Effect FromFile(Device device, string fileName, Macro[] preprocessorDefines, Include includeFile, string skipConstants, ShaderFlags flags);
    public static Effect FromFile(Device device, string fileName, Macro[] preprocessorDefines, Include includeFile, string skipConstants, ShaderFlags flags, EffectPool pool);
    public static Effect FromMemory(Device device, Byte[] memory, ShaderFlags flags);
    public static Effect FromMemory(Device device, Byte[] memory, Macro[] preprocessorDefines, Include includeFile, string skipConstants, ShaderFlags flags);
    public static Effect FromMemory(Device device, Byte[] memory, Macro[] preprocessorDefines, Include includeFile, string skipConstants, ShaderFlags flags, EffectPool pool);
    public static Effect FromStream(Device device, Stream stream, ShaderFlags flags);
    public static Effect FromStream(Device device, Stream stream, Macro[] preprocessorDefines, Include includeFile, string skipConstants, ShaderFlags flags);
    public static Effect FromStream(Device device, Stream stream, Macro[] preprocessorDefines, Include includeFile, string skipConstants, ShaderFlags flags, EffectPool pool);
    public static Effect FromString(Device device, string sourceData, ShaderFlags flags);
    public static Effect FromString(Device device, string sourceData, Macro[] preprocessorDefines, Include includeFile, string skipConstants, ShaderFlags flags);
    public static Effect FromString(Device device, string sourceData, Macro[] preprocessorDefines, Include includeFile, string skipConstants, ShaderFlags flags, EffectPool pool);
    public void SetRawValue(EffectHandle handle, Single[] data);
    public void SetRawValue(EffectHandle handle, DataStream data);
    public void SetRawValue(EffectHandle handle, DataStream data, int offset, int countInBytes);
    public void SetRawValue(EffectHandle handle, Single[] data, int startIndex, int count);
    internal static Macro[] PrepareMacros(Macro[] macros);
    public static Effect op_Explicit(IntPtr nativePointer);
    public EffectPool get_Pool();
    public Device get_Device();
    public EffectStateManager get_StateManager();
    public void set_StateManager(EffectStateManager value);
    internal void GetPool(EffectPool& poolOut);
    internal void SetTechnique(EffectHandle hTechnique);
    internal EffectHandle GetCurrentTechnique();
    public void ValidateTechnique(EffectHandle hTechnique);
    public EffectHandle FindNextValidTechnique(EffectHandle hTechnique);
    public RawBool IsParameterUsed(EffectHandle hParameter, EffectHandle hTechnique);
    public int Begin(FX flags);
    public void BeginPass(int pass);
    public void CommitChanges();
    public void EndPass();
    public void End();
    internal void GetDevice(Device& deviceOut);
    public void OnLostDevice();
    public void OnResetDevice();
    internal void SetStateManager(EffectStateManager managerRef);
    internal void GetStateManager(EffectStateManager& managerOut);
    public void BeginParameterBlock();
    public EffectHandle EndParameterBlock();
    public void ApplyParameterBlock(EffectHandle hParameterBlock);
    public void DeleteParameterBlock(EffectHandle hParameterBlock);
    public Effect Clone(Device deviceRef);
    internal void SetRawValue(EffectHandle hParameter, IntPtr dataRef, int byteOffset, int bytes);
}
[GuidAttribute("51b8a949-1a31-47e6-bea0-4b30db53f1e0")]
public class SharpDX.Direct3D9.EffectCompiler : BaseEffect {
    public EffectCompiler(string data, Macro[] defines, Include includeFile, ShaderFlags flags);
    public EffectCompiler(IntPtr nativePtr);
    public DataStream CompileEffect(ShaderFlags flags);
    public ShaderBytecode CompileShader(EffectHandle functionHandle, string target, ShaderFlags flags);
    public ShaderBytecode CompileShader(EffectHandle functionHandle, string target, ShaderFlags flags, ConstantTable& constantTable);
    public static EffectCompiler FromFile(string fileName, ShaderFlags flags);
    public static EffectCompiler FromFile(string fileName, Macro[] defines, Include includeFile, ShaderFlags flags);
    public static EffectCompiler FromMemory(Byte[] data, ShaderFlags flags);
    public static EffectCompiler FromMemory(Byte[] data, Macro[] defines, Include includeFile, ShaderFlags flags);
    public static EffectCompiler FromStream(Stream stream, ShaderFlags flags);
    public static EffectCompiler FromStream(Stream stream, Macro[] defines, Include includeFile, ShaderFlags flags);
    private static void CreateEffectCompiler(IntPtr data, int length, Macro[] defines, Include includeFile, ShaderFlags flags, EffectCompiler instance);
    public static EffectCompiler op_Explicit(IntPtr nativePointer);
    public void SetLiteral(EffectHandle hParameter, RawBool literal);
    public RawBool GetLiteral(EffectHandle hParameter);
    internal void CompileEffect(int flags, Blob& effectOut, Blob& errorMsgsOut);
    internal void CompileShader(EffectHandle hFunction, string targetRef, int flags, Blob& shaderOut, Blob& errorMsgsOut, ConstantTable& constantTableOut);
}
public class SharpDX.Direct3D9.EffectDefault : ValueType {
    public string ParameterName;
    public EffectDefaultType Type;
    internal int BufferSize;
    internal IntPtr BufferPointer;
    public DataStream Value { get; }
    public DataStream get_Value();
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public enum SharpDX.Direct3D9.EffectDefaultType : Enum {
    public int value__;
    public static EffectDefaultType String;
    public static EffectDefaultType Floats;
    public static EffectDefaultType Dword;
    public static EffectDefaultType DtForcedWord;
}
public class SharpDX.Direct3D9.EffectDescription : ValueType {
    public string Creator;
    public int Parameters;
    public int Techniques;
    public int Functions;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D9.EffectHandle : DisposeBase {
    private static bool UseCacheStrings;
    private static Dictionary`2<string, IntPtr> AllocatedStrings;
    private IntPtr pointer;
    private bool isStringToRelease;
    public EffectHandle(IntPtr pointer);
    public EffectHandle(Void* pointer);
    public EffectHandle(string name);
    private static EffectHandle();
    public static void ClearCache();
    internal static void __MarshalFree(EffectHandle& __from, __Native& ref);
    internal static void __MarshalFrom(EffectHandle& __from, __Native& ref);
    internal static void __MarshalTo(EffectHandle& __from, __Native& ref);
    protected virtual void Dispose(bool disposing);
    private static IntPtr AllocateString(string name);
    public static IntPtr op_Implicit(EffectHandle value);
    public static EffectHandle op_Implicit(IntPtr value);
    public static Void* op_Implicit(EffectHandle value);
    public static EffectHandle op_Implicit(Void* value);
    public static EffectHandle op_Implicit(string name);
}
public class SharpDX.Direct3D9.EffectInstance : object {
    [CompilerGeneratedAttribute]
private EffectDefault[] <Defaults>k__BackingField;
    public string EffectFilename;
    internal int DefaultCount;
    internal IntPtr DefaultPointer;
    public EffectDefault[] Defaults { get; public set; }
    [CompilerGeneratedAttribute]
public EffectDefault[] get_Defaults();
    [CompilerGeneratedAttribute]
public void set_Defaults(EffectDefault[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[GuidAttribute("9537ab04-3250-412e-8213-fcd2f8677933")]
public class SharpDX.Direct3D9.EffectPool : ComObject {
    public EffectPool(IntPtr nativePtr);
    public static EffectPool op_Explicit(IntPtr nativePointer);
}
[GuidAttribute("79aab587-6dbc-4fa7-82de-37fa1781c5ce")]
public class SharpDX.Direct3D9.EffectStateManager : ComObject {
    unknown Material Material {public set; }
    unknown float NPatchMode {public set; }
    unknown VertexFormat VertexFormat {public set; }
    unknown VertexShader VertexShader {public set; }
    unknown PixelShader PixelShader {public set; }
    public EffectStateManager(IntPtr nativePtr);
    public static EffectStateManager op_Explicit(IntPtr nativePointer);
    public void set_Material(Material value);
    public void set_NPatchMode(float value);
    public void set_VertexFormat(VertexFormat value);
    public void set_VertexShader(VertexShader value);
    public void set_PixelShader(PixelShader value);
    public void SetTransform(TransformState state, RawMatrix& matrixRef);
    internal void SetMaterial(Material& materialRef);
    public void SetLight(int index, Light& lightRef);
    public void LightEnable(int index, RawBool enable);
    public void SetRenderState(RenderState state, int value);
    public void SetTexture(int stage, BaseTexture textureRef);
    public void SetTextureStageState(int stage, TextureStage type, int value);
    public void SetSamplerState(int sampler, SamplerState type, int value);
    internal void SetNPatchMode(float numSegments);
    internal void SetVertexFormat(VertexFormat vertexFormat);
    internal void SetVertexShader(VertexShader shaderRef);
    public void SetVertexShaderConstantF(int registerIndex, float constantDataRef, int registerCount);
    public void SetVertexShaderConstantI(int registerIndex, int constantDataRef, int registerCount);
    public void SetVertexShaderConstantB(int registerIndex, RawBool constantDataRef, int registerCount);
    internal void SetPixelShader(PixelShader shaderRef);
    public void SetPixelShaderConstantF(int registerIndex, float constantDataRef, int registerCount);
    public void SetPixelShaderConstantI(int registerIndex, int constantDataRef, int registerCount);
    public void SetPixelShaderConstantB(int registerIndex, RawBool constantDataRef, int registerCount);
}
public class SharpDX.Direct3D9.EventDescription : ValueType {
    public EventType Type;
    public int Track;
    public double StartTime;
    public double Duration;
    public TransitionType Transition;
    public float Weight;
    public float Speed;
    public double Position;
    public RawBool Enable;
}
public enum SharpDX.Direct3D9.EventType : Enum {
    public int value__;
    public static EventType TrackSpeed;
    public static EventType TrackWeight;
    public static EventType TrackPosition;
    public static EventType TrackEnable;
    public static EventType PriorityBlend;
}
public class SharpDX.Direct3D9.ExtendedMaterial : ValueType {
    public Material MaterialD3D;
    public string TextureFileName;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D9.Fill2DCallback : MulticastDelegate {
    public Fill2DCallback(object object, IntPtr method);
    public virtual RawColor4 Invoke(RawVector2 coordinate, RawVector2 texelSize);
    public virtual IAsyncResult BeginInvoke(RawVector2 coordinate, RawVector2 texelSize, AsyncCallback callback, object object);
    public virtual RawColor4 EndInvoke(IAsyncResult result);
}
public class SharpDX.Direct3D9.Fill3DCallback : MulticastDelegate {
    public Fill3DCallback(object object, IntPtr method);
    public virtual RawColor4 Invoke(RawVector3 coordinate, RawVector3 texelSize);
    public virtual IAsyncResult BeginInvoke(RawVector3 coordinate, RawVector3 texelSize, AsyncCallback callback, object object);
    public virtual RawColor4 EndInvoke(IAsyncResult result);
}
internal static class SharpDX.Direct3D9.FillCallbackHelper : object {
    private static Fill2DCallbackDelegate native2DCallback;
    private static Fill3DCallbackDelegate native3DCallback;
    public static IntPtr Native2DCallbackPtr;
    public static IntPtr Native3DCallbackPtr;
    private static FillCallbackHelper();
    private static Result Fill2DCallbackImpl(RawColor4* outVector, RawVector2* textCoord, RawVector2* textelSize, IntPtr data);
    private static Result Fill3DCallbackImpl(RawColor4* outVector, RawVector3* textCoord, RawVector3* textelSize, IntPtr data);
}
public enum SharpDX.Direct3D9.FillMode : Enum {
    public int value__;
    public static FillMode Point;
    public static FillMode Wireframe;
    public static FillMode Solid;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.Filter : Enum {
    public int value__;
    public static Filter None;
    public static Filter Point;
    public static Filter Linear;
    public static Filter Triangle;
    public static Filter Box;
    public static Filter MirrorU;
    public static Filter MirrorV;
    public static Filter MirrorW;
    public static Filter Mirror;
    public static Filter Dither;
    public static Filter DitherDiffusion;
    public static Filter SrgbIn;
    public static Filter SrgbOut;
    public static Filter Srgb;
    public static Filter Default;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.FilterCaps : Enum {
    public int value__;
    public static FilterCaps MinPoint;
    public static FilterCaps MinLinear;
    public static FilterCaps MinAnisotropic;
    public static FilterCaps MinPyramidalQuad;
    public static FilterCaps MinGaussianQuad;
    public static FilterCaps MipPoint;
    public static FilterCaps MipLinear;
    public static FilterCaps ConvolutionMono;
    public static FilterCaps MagPoint;
    public static FilterCaps MagLinear;
    public static FilterCaps MagAnisotropic;
    public static FilterCaps MagPyramidalQuad;
    public static FilterCaps MagGaussianQuad;
}
public enum SharpDX.Direct3D9.FogMode : Enum {
    public int value__;
    public static FogMode None;
    public static FogMode Exponential;
    public static FogMode ExponentialSquared;
    public static FogMode Linear;
}
[GuidAttribute("d79dbb70-5f21-4d36-bbc2-ff525c213cdc")]
public class SharpDX.Direct3D9.Font : ComObject {
    public Device Device { get; }
    public FontDescription Description { get; }
    public IntPtr DeviceContext { get; }
    public Font(Device device, FontDescription fontDescription);
    public Font(Device device, int height, int width, FontWeight weight, int mipLevels, bool isItalic, FontCharacterSet characterSet, FontPrecision precision, FontQuality quality, FontPitchAndFamily pitchAndFamily, string faceName);
    public Font(IntPtr nativePtr);
    public void PreloadText(string stringRef);
    public int DrawText(Sprite sprite, string text, RawRectangle rect, FontDrawFlags drawFlags, RawColorBGRA color);
    public int DrawText(Sprite sprite, string text, int x, int y, RawColorBGRA color);
    public RawRectangle MeasureText(Sprite sprite, string text, FontDrawFlags drawFlags);
    public RawRectangle MeasureText(Sprite sprite, string text, RawRectangle rect, FontDrawFlags drawFlags);
    public RawRectangle MeasureText(Sprite sprite, string text, RawRectangle rect, FontDrawFlags drawFlags, Int32& textHeight);
    public static Font op_Explicit(IntPtr nativePointer);
    public Device get_Device();
    public FontDescription get_Description();
    public IntPtr get_DeviceContext();
    internal void GetDevice(Device& deviceOut);
    internal void GetDescription(FontDescription& descRef);
    internal RawBool GetTextMetrics(TextMetric& textMetricsRef);
    internal IntPtr GetDeviceContext();
    public void GetGlyphData(int glyph, Texture& textureOut, RawRectangle& blackBoxRef, RawPoint& cellIncRef);
    public void PreloadCharacters(int first, int last);
    public void PreloadGlyphs(int first, int last);
    internal void PreloadText(string stringRef, int count);
    public int DrawText(Sprite spriteRef, string stringRef, int count, IntPtr rectRef, int format, RawColorBGRA color);
    public void OnLostDevice();
    public void OnResetDevice();
}
public enum SharpDX.Direct3D9.FontCharacterSet : Enum {
    public byte value__;
    public static FontCharacterSet Ansi;
    public static FontCharacterSet Arabic;
    public static FontCharacterSet Baltic;
    public static FontCharacterSet ChineseBig5;
    public static FontCharacterSet Default;
    public static FontCharacterSet EastEurope;
    public static FontCharacterSet GB2312;
    public static FontCharacterSet Greek;
    public static FontCharacterSet Hangul;
    public static FontCharacterSet Hebrew;
    public static FontCharacterSet Johab;
    public static FontCharacterSet Mac;
    public static FontCharacterSet Oem;
    public static FontCharacterSet Russian;
    public static FontCharacterSet ShiftJIS;
    public static FontCharacterSet Symbol;
    public static FontCharacterSet Thai;
    public static FontCharacterSet Turkish;
    public static FontCharacterSet Vietnamese;
}
public class SharpDX.Direct3D9.FontDescription : ValueType {
    public int Height;
    public int Width;
    public FontWeight Weight;
    public int MipLevels;
    public RawBool Italic;
    public FontCharacterSet CharacterSet;
    public FontPrecision OutputPrecision;
    public FontQuality Quality;
    public FontPitchAndFamily PitchAndFamily;
    public string FaceName;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.FontDrawFlags : Enum {
    public int value__;
    public static FontDrawFlags Bottom;
    public static FontDrawFlags Center;
    public static FontDrawFlags ExpandTabs;
    public static FontDrawFlags Left;
    public static FontDrawFlags NoClip;
    public static FontDrawFlags Right;
    public static FontDrawFlags RtlReading;
    public static FontDrawFlags SingleLine;
    public static FontDrawFlags Top;
    public static FontDrawFlags VerticalCenter;
    public static FontDrawFlags WordBreak;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.FontPitchAndFamily : Enum {
    public byte value__;
    public static FontPitchAndFamily Decorative;
    public static FontPitchAndFamily Default;
    public static FontPitchAndFamily DontCare;
    public static FontPitchAndFamily Fixed;
    public static FontPitchAndFamily Modern;
    public static FontPitchAndFamily Mono;
    public static FontPitchAndFamily Roman;
    public static FontPitchAndFamily Script;
    public static FontPitchAndFamily Swiss;
    public static FontPitchAndFamily Variable;
}
public enum SharpDX.Direct3D9.FontPrecision : Enum {
    public byte value__;
    public static FontPrecision Default;
    public static FontPrecision String;
    public static FontPrecision Character;
    public static FontPrecision Stroke;
    public static FontPrecision TrueType;
    public static FontPrecision Device;
    public static FontPrecision Raster;
    public static FontPrecision TrueTypeOnly;
    public static FontPrecision Outline;
    public static FontPrecision ScreenOutline;
    public static FontPrecision PostScriptOnly;
}
public enum SharpDX.Direct3D9.FontQuality : Enum {
    public byte value__;
    public static FontQuality Default;
    public static FontQuality Draft;
    public static FontQuality Proof;
    public static FontQuality NonAntialiased;
    public static FontQuality Antialiased;
    public static FontQuality ClearType;
    public static FontQuality ClearTypeNatural;
}
public enum SharpDX.Direct3D9.FontWeight : Enum {
    public int value__;
    public static FontWeight Black;
    public static FontWeight Bold;
    public static FontWeight DemiBold;
    public static FontWeight DoNotCare;
    public static FontWeight ExtraBold;
    public static FontWeight ExtraLight;
    public static FontWeight Heavy;
    public static FontWeight Light;
    public static FontWeight Medium;
    public static FontWeight Normal;
    public static FontWeight Regular;
    public static FontWeight SemiBold;
    public static FontWeight Thin;
    public static FontWeight UltraBold;
    public static FontWeight UltraLight;
}
public enum SharpDX.Direct3D9.Format : Enum {
    public int value__;
    public static Format Unknown;
    public static Format R8G8B8;
    public static Format A8R8G8B8;
    public static Format X8R8G8B8;
    public static Format R5G6B5;
    public static Format X1R5G5B5;
    public static Format A1R5G5B5;
    public static Format A4R4G4B4;
    public static Format R3G3B2;
    public static Format A8;
    public static Format A8R3G3B2;
    public static Format X4R4G4B4;
    public static Format A2B10G10R10;
    public static Format A8B8G8R8;
    public static Format X8B8G8R8;
    public static Format G16R16;
    public static Format A2R10G10B10;
    public static Format A16B16G16R16;
    public static Format A8P8;
    public static Format P8;
    public static Format L8;
    public static Format A8L8;
    public static Format A4L4;
    public static Format V8U8;
    public static Format L6V5U5;
    public static Format X8L8V8U8;
    public static Format Q8W8V8U8;
    public static Format V16U16;
    public static Format A2W10V10U10;
    public static Format Uyvy;
    public static Format R8G8_B8G8;
    public static Format Yuy2;
    public static Format G8R8_G8B8;
    public static Format Dxt1;
    public static Format Dxt2;
    public static Format Dxt3;
    public static Format Dxt4;
    public static Format Dxt5;
    public static Format D16Lockable;
    public static Format D32;
    public static Format D15S1;
    public static Format D24S8;
    public static Format D24X8;
    public static Format D24X4S4;
    public static Format D16;
    public static Format D32SingleLockable;
    public static Format D24SingleS8;
    public static Format D32Lockable;
    public static Format S8Lockable;
    public static Format L16;
    public static Format VertexData;
    public static Format Index16;
    public static Format Index32;
    public static Format Q16W16V16U16;
    public static Format Multi2Argb8;
    public static Format R16F;
    public static Format G16R16F;
    public static Format A16B16G16R16F;
    public static Format R32F;
    public static Format G32R32F;
    public static Format A32B32G32R32F;
    public static Format MtCxV8U8;
    public static Format A1;
    public static Format MtA2B10G10R10XrBias;
    public static Format BinaryBuffer;
}
public class SharpDX.Direct3D9.Frame : ValueType {
    public string Name;
    public RawMatrix TransformationMatrix;
    public IntPtr PMeshContainer;
    public IntPtr PFrameSibling;
    public IntPtr PFrameFirstChild;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D9.FunctionDescription : ValueType {
    public string Name;
    public int Annotations;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.FX : Enum {
    public int value__;
    public static FX DoNotSaveState;
    public static FX DoNotSaveShaderState;
    public static FX DoNotSaveSamplerState;
    public static FX NotCloneable;
    public static FX LargeAddressAware;
    public static FX None;
}
public class SharpDX.Direct3D9.GammaRamp : ValueType {
    internal Int16[] _Red;
    internal Int16[] _Green;
    internal Int16[] _Blue;
    public Int16[] Red { get; }
    public Int16[] Green { get; }
    public Int16[] Blue { get; }
    public Int16[] get_Red();
    public Int16[] get_Green();
    public Int16[] get_Blue();
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D9.IAllocateHierarchy : CppObject {
    public IAllocateHierarchy(IntPtr nativePtr);
    public static IAllocateHierarchy op_Explicit(IntPtr nativePointer);
    public void CreateFrame(string name, Frame& newFrameOut);
    public void CreateMeshContainer(string name, MeshData meshDataRef, ExtendedMaterial& materialsRef, EffectInstance effectInstancesRef, int numMaterials, int adjacencyRef, SkinInfo skinInfoRef, MeshContainer newMeshContainerOut);
    public void DestroyFrame(Frame& frameToFreeRef);
    public void DestroyMeshContainer(MeshContainer meshContainerToFreeRef);
}
public class SharpDX.Direct3D9.ILoadUserData : CppObject {
    public ILoadUserData(IntPtr nativePtr);
    public static ILoadUserData op_Explicit(IntPtr nativePointer);
    public void LoadTopLevelData(XFileData xofChildDataRef);
    public void LoadFrameChildData(Frame& frameRef, XFileData xofChildDataRef);
    public void LoadMeshChildData(MeshContainer meshContainerRef, XFileData xofChildDataRef);
}
public enum SharpDX.Direct3D9.ImageFileFormat : Enum {
    public int value__;
    public static ImageFileFormat Bmp;
    public static ImageFileFormat Jpg;
    public static ImageFileFormat Tga;
    public static ImageFileFormat Png;
    public static ImageFileFormat Dds;
    public static ImageFileFormat Ppm;
    public static ImageFileFormat Dib;
    public static ImageFileFormat Hdr;
    public static ImageFileFormat Pfm;
}
public class SharpDX.Direct3D9.ImageInformation : ValueType {
    public int Width;
    public int Height;
    public int Depth;
    public int MipLevels;
    public Format Format;
    public ResourceType ResourceType;
    public ImageFileFormat ImageFileFormat;
    public static ImageInformation FromFile(string fileName);
    public static ImageInformation FromMemory(Byte[] memory);
    public static ImageInformation FromStream(Stream stream);
    public static ImageInformation FromStream(Stream stream, bool keepPosition);
}
[ShadowAttribute("SharpDX.Direct3D9.IncludeShadow")]
public interface SharpDX.Direct3D9.Include {
    public abstract virtual Stream Open(IncludeType type, string fileName, Stream parentStream);
    public abstract virtual void Close(Stream stream);
}
internal class SharpDX.Direct3D9.IncludeShadow : CppObjectShadow {
    private static IncludeVtbl Vtbl;
    private Dictionary`2<IntPtr, Frame> frames;
    protected CppObjectVtbl GetVtbl { get; }
    private static IncludeShadow();
    public static IntPtr ToIntPtr(Include callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
public enum SharpDX.Direct3D9.IncludeType : Enum {
    public int value__;
    public static IncludeType Local;
    public static IncludeType System;
}
[GuidAttribute("7C9DD65E-D3F7-4529-ACEE-785830ACDE35")]
public class SharpDX.Direct3D9.IndexBuffer : Resource {
    public IndexBufferDescription Description { get; }
    public IndexBuffer(IntPtr nativePtr);
    public IndexBuffer(Device device, int sizeInBytes, Usage usage, Pool pool, bool sixteenBit);
    public IndexBuffer(Device device, int sizeInBytes, Usage usage, Pool pool, bool sixteenBit, IntPtr& sharedHandle);
    public static IndexBuffer op_Explicit(IntPtr nativePointer);
    public IndexBufferDescription get_Description();
    internal void Lock(int offsetToLock, int sizeToLock, IntPtr& bDataOut, LockFlags flags);
    public void Unlock();
    internal void GetDescription(IndexBufferDescription& descRef);
    public DataStream Lock(int offsetToLock, int sizeToLock, LockFlags lockFlags);
    public IntPtr LockToPointer(int offsetToLock, int sizeToLock, LockFlags lockFlags);
}
public class SharpDX.Direct3D9.IndexBufferDescription : ValueType {
    public Format Format;
    public ResourceType Type;
    public Usage Usage;
    public Pool Pool;
    public int Size;
}
public class SharpDX.Direct3D9.InterfaceTimings : ValueType {
    public float WaitingForGPUToUseApplicationResourceTimePercent;
    public float WaitingForGPUToAcceptMoreCommandsTimePercent;
    public float WaitingForGPUToStayWithinLatencyTimePercent;
    public float WaitingForGPUExclusiveResourceTimePercent;
    public float WaitingForGPUOtherTimePercent;
}
public class SharpDX.Direct3D9.ISaveUserData : CppObject {
    public ISaveUserData(IntPtr nativePtr);
    public static ISaveUserData op_Explicit(IntPtr nativePointer);
    public void AddFrameChildData(Frame& frameRef, XFileSaveObject xofSaveRef, XFileSaveData xofFrameDataRef);
    public void AddMeshChildData(MeshContainer meshContainerRef, XFileSaveObject xofSaveRef, XFileSaveData xofMeshDataRef);
    public void AddTopLevelDataObjectsPre(XFileSaveObject xofSaveRef);
    public void AddTopLevelDataObjectsPost(XFileSaveObject xofSaveRef);
    public void RegisterTemplates(XFile xFileApiRef);
    public void SaveTemplates(XFileSaveObject xofSaveRef);
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.Issue : Enum {
    public int value__;
    public static Issue End;
    public static Issue Begin;
}
[GuidAttribute("fa4e8e3a-9786-407d-8b4c-5995893764af")]
public class SharpDX.Direct3D9.KeyframedAnimationSet : AnimationSet {
    public PlaybackType PlaybackType { get; }
    public double SourceTicksPerSecond { get; }
    public int NumCallbackKeys { get; }
    public KeyframedAnimationSet(IntPtr nativePtr);
    public static KeyframedAnimationSet op_Explicit(IntPtr nativePointer);
    public PlaybackType get_PlaybackType();
    public double get_SourceTicksPerSecond();
    public int get_NumCallbackKeys();
    internal PlaybackType GetPlaybackType();
    internal double GetSourceTicksPerSecond();
    public int GetNumScaleKeys(int animation);
    public void GetScaleKeys(int animation, ScaleKey scaleKeysRef);
    public void GetScaleKey(int animation, int key, ScaleKey scaleKeyRef);
    public void SetScaleKey(int animation, int key, ScaleKey scaleKeyRef);
    public int GetNumRotationKeys(int animation);
    public void GetRotationKeys(int animation, RotationKey& rotationKeysRef);
    public void GetRotationKey(int animation, int key, RotationKey& rotationKeyRef);
    public void SetRotationKey(int animation, int key, RotationKey& rotationKeyRef);
    public int GetNumTranslationKeys(int animation);
    public void GetTranslationKeys(int animation, ScaleKey translationKeysRef);
    public void GetTranslationKey(int animation, int key, ScaleKey translationKeyRef);
    public void SetTranslationKey(int animation, int key, ScaleKey translationKeyRef);
    internal int GetNumCallbackKeys();
    public void GetCallbackKeys(CallbackKey callbackKeysRef);
    public void GetCallbackKey(int key, CallbackKey callbackKeyRef);
    public void SetCallbackKey(int key, CallbackKey callbackKeyRef);
    public void UnregisterScaleKey(int animation, int key);
    public void UnregisterRotationKey(int animation, int key);
    public void UnregisterTranslationKey(int animation, int key);
    public void RegisterAnimationSRTKeys(string nameRef, int numScaleKeys, int numRotationKeys, int numTranslationKeys, ScaleKey scaleKeysRef, RotationKey& rotationKeysRef, ScaleKey translationKeysRef, int animationIndexRef);
    public void Compress(int flags, float lossiness, Frame& hierarchyRef, Blob& compressedDataOut);
    public void UnregisterAnimation(int index);
}
public class SharpDX.Direct3D9.Light : ValueType {
    public LightType Type;
    public RawColor4 Diffuse;
    public RawColor4 Specular;
    public RawColor4 Ambient;
    public RawVector3 Position;
    public RawVector3 Direction;
    public float Range;
    public float Falloff;
    public float Attenuation0;
    public float Attenuation1;
    public float Attenuation2;
    public float Theta;
    public float Phi;
}
public enum SharpDX.Direct3D9.LightType : Enum {
    public int value__;
    public static LightType Point;
    public static LightType Spot;
    public static LightType Directional;
}
[GuidAttribute("d379ba7f-9042-4ac4-9f5e-58192a4c6bd8")]
public class SharpDX.Direct3D9.Line : ComObject {
    public Device Device { get; }
    public int Pattern { get; public set; }
    public float PatternScale { get; public set; }
    public float Width { get; public set; }
    public RawBool Antialias { get; public set; }
    public RawBool GLLines { get; public set; }
    public Line(IntPtr nativePtr);
    public Line(Device device);
    public static Line op_Explicit(IntPtr nativePointer);
    public Device get_Device();
    public int get_Pattern();
    public void set_Pattern(int value);
    public float get_PatternScale();
    public void set_PatternScale(float value);
    public float get_Width();
    public void set_Width(float value);
    public RawBool get_Antialias();
    public void set_Antialias(RawBool value);
    public RawBool get_GLLines();
    public void set_GLLines(RawBool value);
    internal void GetDevice(Device& deviceOut);
    public void Begin();
    internal void Draw(IntPtr vertexListRef, int dwVertexListCount, RawColorBGRA color);
    internal void DrawTransform(IntPtr vertexListRef, int dwVertexListCount, RawMatrix& transformRef, RawColorBGRA color);
    internal void SetPattern(int dwPattern);
    internal int GetPattern();
    internal void SetPatternScale(float fPatternScale);
    internal float GetPatternScale();
    internal void SetWidth(float fWidth);
    internal float GetWidth();
    internal void SetAntialias(RawBool bAntialias);
    internal RawBool GetAntialias();
    internal void SetGLLines(RawBool bGLLines);
    internal RawBool GetGLLines();
    public void End();
    public void OnLostDevice();
    public void OnResetDevice();
    public void Draw(RawVector2[] vertices, RawColorBGRA color);
    public void Draw(T[] vertices, RawColorBGRA color);
    public void DrawTransform(RawVector3[] vertices, RawMatrix transform, RawColorBGRA color);
    public void DrawTransform(T[] vertices, RawMatrix transform, RawColorBGRA color);
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.LineCaps : Enum {
    public int value__;
    public static LineCaps Texture;
    public static LineCaps DepthTest;
    public static LineCaps Blend;
    public static LineCaps AlphaCompare;
    public static LineCaps Fog;
    public static LineCaps Antialias;
}
internal class SharpDX.Direct3D9.LockedBox : ValueType {
    public int RowPitch;
    public int SlicePitch;
    public IntPtr PBits;
}
internal class SharpDX.Direct3D9.LockedRectangle : ValueType {
    public int Pitch;
    public IntPtr PBits;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.LockFlags : Enum {
    public int value__;
    public static LockFlags ReadOnly;
    public static LockFlags Discard;
    public static LockFlags NoOverwrite;
    public static LockFlags NoSystemLock;
    public static LockFlags DoNotWait;
    public static LockFlags NoDirtyUpdate;
    public static LockFlags DoNotCopyData;
    public static LockFlags None;
}
public class SharpDX.Direct3D9.Macro : ValueType {
    public string Name;
    public string Definition;
    public Macro(string name, string definition);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.Direct3D9.Material : ValueType {
    public RawColor4 Diffuse;
    public RawColor4 Ambient;
    public RawColor4 Specular;
    public RawColor4 Emissive;
    public float Power;
}
[GuidAttribute("4020e5c2-1403-4929-883f-e2e849fac195")]
public class SharpDX.Direct3D9.Mesh : BaseMesh {
    public Mesh(IntPtr nativePtr);
    public static Mesh op_Explicit(IntPtr nativePointer);
    public void LockAttributeBuffer(int flags, int dataOut);
    public void UnlockAttributeBuffer();
    public void Optimize(int flags, int adjacencyInRef, int adjacencyOutRef, int faceRemapRef, Blob& vertexRemapOut, Mesh& optMeshOut);
    public void OptimizeInplace(int flags, int adjacencyInRef, int adjacencyOutRef, int faceRemapRef, Blob& vertexRemapOut);
    public void SetAttributeTable(AttributeRange& attribTableRef, int cAttribTableSize);
}
public class SharpDX.Direct3D9.MeshContainer : DisposeBase {
    public string Name;
    public MeshData MeshData;
    internal IntPtr MaterialPointer;
    public IntPtr PEffects;
    internal int MaterialCount;
    public IntPtr PAdjacency;
    public IntPtr PSkinInfo;
    public IntPtr PNextMeshContainer;
    public ExtendedMaterial[] Materials { get; public set; }
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
    public ExtendedMaterial[] get_Materials();
    public void set_Materials(ExtendedMaterial[] value);
    protected virtual void Dispose(bool disposing);
    private void DisposeMaterials();
}
public class SharpDX.Direct3D9.MeshData : ValueType {
    public MeshDataType Type;
    public IntPtr PMesh;
    public IntPtr PPMesh;
    public IntPtr PPatchMesh;
}
public enum SharpDX.Direct3D9.MeshDataType : Enum {
    public int value__;
    public static MeshDataType Mesh;
    public static MeshDataType ProgressiveMesh;
    public static MeshDataType PatchMesh;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.MeshFlags : Enum {
    public int value__;
    public static MeshFlags Use32Bit;
    public static MeshFlags DoNotClip;
    public static MeshFlags Points;
    public static MeshFlags RTPatches;
    public static MeshFlags NPatches;
    public static MeshFlags VertexBufferSystemMemory;
    public static MeshFlags VertexBufferManaged;
    public static MeshFlags VertexBufferWriteOnly;
    public static MeshFlags VertexBufferDynamic;
    public static MeshFlags VertexBufferSoftware;
    public static MeshFlags IndexBufferSystemMemory;
    public static MeshFlags IndexBufferManaged;
    public static MeshFlags IndexBufferWriteOnly;
    public static MeshFlags IndexBufferDynamic;
    public static MeshFlags IndexBufferSoftware;
    public static MeshFlags VertexBufferShare;
    public static MeshFlags UseHardwareOnly;
    public static MeshFlags SystemMemory;
    public static MeshFlags Managed;
    public static MeshFlags WriteOnly;
    public static MeshFlags Dynamic;
    public static MeshFlags Software;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.MeshOptimizeFlags : Enum {
    public int value__;
    public static MeshOptimizeFlags Compact;
    public static MeshOptimizeFlags AttributeSort;
    public static MeshOptimizeFlags VertexCache;
    public static MeshOptimizeFlags StripReorder;
    public static MeshOptimizeFlags IgnoreVertices;
    public static MeshOptimizeFlags DoNotSplit;
    public static MeshOptimizeFlags DeviceIndependent;
}
public enum SharpDX.Direct3D9.MeshSimplification : Enum {
    public int value__;
    public static MeshSimplification Vertex;
    public static MeshSimplification Face;
}
internal class SharpDX.Direct3D9.ModuleInit : object {
    [TagAttribute("SharpDX.ModuleInit")]
internal static void Setup();
}
public enum SharpDX.Direct3D9.MultisampleType : Enum {
    public int value__;
    public static MultisampleType None;
    public static MultisampleType NonMaskable;
    public static MultisampleType TwoSamples;
    public static MultisampleType ThreeSamples;
    public static MultisampleType FourSamples;
    public static MultisampleType FiveSamples;
    public static MultisampleType SixSamples;
    public static MultisampleType SevenSamples;
    public static MultisampleType EightSamples;
    public static MultisampleType NineSamples;
    public static MultisampleType TenSamples;
    public static MultisampleType ElevenSamples;
    public static MultisampleType TwelveSamples;
    public static MultisampleType ThirteenSamples;
    public static MultisampleType FourteenSamples;
    public static MultisampleType FifteenSamples;
    public static MultisampleType SixteenSamples;
}
[CompilerGeneratedAttribute]
internal class SharpDX.Direct3D9.NamespaceDoc : object {
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.NormalMapFlags : Enum {
    public int value__;
    public static NormalMapFlags MirrorU;
    public static NormalMapFlags MirrorV;
    public static NormalMapFlags Mirror;
    public static NormalMapFlags InvertSign;
    public static NormalMapFlags ComputeOcclusion;
}
public class SharpDX.Direct3D9.PaletteEntry : ValueType {
    public byte Red;
    public byte Green;
    public byte Blue;
    public byte Flags;
}
public enum SharpDX.Direct3D9.ParameterClass : Enum {
    public int value__;
    public static ParameterClass Scalar;
    public static ParameterClass Vector;
    public static ParameterClass MatrixRows;
    public static ParameterClass MatrixColumns;
    public static ParameterClass Object;
    public static ParameterClass Struct;
}
public class SharpDX.Direct3D9.ParameterDescription : ValueType {
    public string Name;
    public string Semantic;
    public ParameterClass Class;
    public ParameterType Type;
    public int Rows;
    public int Columns;
    public int Elements;
    public int Annotations;
    public int StructMembers;
    public int Flags;
    public int Bytes;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.ParameterFlags : Enum {
    public int value__;
    public static ParameterFlags Shared;
    public static ParameterFlags Literal;
    public static ParameterFlags Annotation;
    public static ParameterFlags None;
}
public enum SharpDX.Direct3D9.ParameterType : Enum {
    public int value__;
    public static ParameterType Void;
    public static ParameterType Bool;
    public static ParameterType Int;
    public static ParameterType Float;
    public static ParameterType String;
    public static ParameterType Texture;
    public static ParameterType Texture1D;
    public static ParameterType Texture2D;
    public static ParameterType Texture3D;
    public static ParameterType TextureCube;
    public static ParameterType Sampler;
    public static ParameterType Sampler1D;
    public static ParameterType Sampler2D;
    public static ParameterType Sampler3D;
    public static ParameterType SamplerCube;
    public static ParameterType PixelShader;
    public static ParameterType VertexShader;
    public static ParameterType PixelFragment;
    public static ParameterType VertexFragment;
    public static ParameterType Unsupported;
}
public class SharpDX.Direct3D9.PassDescription : ValueType {
    public string Name;
    public int Annotations;
    public IntPtr PVertexShaderFunction;
    public IntPtr PPixelShaderFunction;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public enum SharpDX.Direct3D9.PatchEdgeStyle : Enum {
    public int value__;
    public static PatchEdgeStyle Discrete;
    public static PatchEdgeStyle Continuous;
}
public class SharpDX.Direct3D9.PatchInfo : ValueType {
    public PatchMeshType PatchType;
    public Degree Degree;
    public Basis Basis;
}
[GuidAttribute("3ce6cc22-dbf2-44f4-894d-f9c34a337139")]
public class SharpDX.Direct3D9.PatchMesh : ComObject {
    public int NumPatches { get; }
    public int NumVertices { get; }
    public int ControlVerticesPerPatch { get; }
    public int Options { get; }
    public Device Device { get; }
    public VertexBuffer VertexBuffer { get; }
    public IndexBuffer IndexBuffer { get; }
    public PatchMesh(IntPtr nativePtr);
    public static PatchMesh op_Explicit(IntPtr nativePointer);
    public int get_NumPatches();
    public int get_NumVertices();
    public int get_ControlVerticesPerPatch();
    public int get_Options();
    public Device get_Device();
    public VertexBuffer get_VertexBuffer();
    public IndexBuffer get_IndexBuffer();
    internal int GetNumPatches();
    internal int GetNumVertices();
    public void GetDeclaration(VertexElement declaration);
    internal int GetControlVerticesPerPatch();
    internal int GetOptions();
    internal void GetDevice(Device& deviceOut);
    public void GetPatchInfo(PatchInfo patchInfo);
    internal void GetVertexBuffer(VertexBuffer& vBOut);
    internal void GetIndexBuffer(IndexBuffer& iBOut);
    public void LockVertexBuffer(int flags, IntPtr dataOut);
    public void UnlockVertexBuffer();
    public void LockIndexBuffer(int flags, IntPtr dataOut);
    public void UnlockIndexBuffer();
    public void LockAttributeBuffer(int flags, int dataOut);
    public void UnlockAttributeBuffer();
    public void GetTessSize(float fTessLevel, int adaptive, Int32& numTriangles, Int32& numVertices);
    public void GenerateAdjacency(float tolerance);
    public void CloneMesh(int options, VertexElement declRef, PatchMesh& meshRef);
    public void Optimize(int flags);
    public void SetDisplaceParam(BaseTexture texture, TextureFilter minFilter, TextureFilter magFilter, TextureFilter mipFilter, TextureAddress wrap, int dwLODBias);
    public void GetDisplaceParam(BaseTexture& texture, TextureFilter& minFilter, TextureFilter& magFilter, TextureFilter& mipFilter, TextureAddress& wrap, Int32& dwLODBias);
    public void Tessellate(float fTessLevel, Mesh meshRef);
    public void TessellateAdaptive(RawVector4 transRef, int dwMaxTessLevel, int dwMinTessLevel, Mesh meshRef);
}
public enum SharpDX.Direct3D9.PatchMeshType : Enum {
    public int value__;
    public static PatchMeshType Rectangle;
    public static PatchMeshType Triangle;
    public static PatchMeshType NPatch;
}
public class SharpDX.Direct3D9.PipelineTimings : ValueType {
    public float VertexProcessingTimePercent;
    public float PixelProcessingTimePercent;
    public float OtherGPUProcessingTimePercent;
    public float GPUIdleTimePercent;
}
[GuidAttribute("6D3BDBDC-5B02-4415-B852-CE5E8BCCB289")]
public class SharpDX.Direct3D9.PixelShader : ComObject {
    public static int MaxDynamicFlowControlDepth;
    public static int MinDynamicFlowControlDepth;
    public static int MaxTemps;
    public static int MinTemps;
    public static int MaxStaticFlowControlDepth;
    public static int MinStaticFlowControlDepth;
    public static int MaxInstructionSlots;
    public static int MinInstructionSlots;
    private ShaderBytecode function;
    public Device Device { get; }
    public ShaderBytecode Function { get; }
    public PixelShader(IntPtr nativePtr);
    public PixelShader(Device device, ShaderBytecode function);
    public static PixelShader op_Explicit(IntPtr nativePointer);
    public Device get_Device();
    internal void GetDevice(Device& deviceOut);
    internal void GetFunction(IntPtr arg0, Int32& sizeOfDataRef);
    public ShaderBytecode get_Function();
}
public class SharpDX.Direct3D9.PixelShader20Caps : ValueType {
    public PixelShaderCaps Caps;
    public int DynamicFlowControlDepth;
    public int TempCount;
    public int StaticFlowControlDepth;
    public int InstructionSlotCount;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.PixelShaderCaps : Enum {
    public int value__;
    public static PixelShaderCaps ArbitrarySwizzle;
    public static PixelShaderCaps GradientInstructions;
    public static PixelShaderCaps Predication;
    public static PixelShaderCaps NoDependentReadLimit;
    public static PixelShaderCaps NoTextureInstructionLimit;
    public static PixelShaderCaps None;
}
public enum SharpDX.Direct3D9.PlaybackType : Enum {
    public int value__;
    public static PlaybackType Loop;
    public static PlaybackType Once;
    public static PlaybackType PingPong;
}
public enum SharpDX.Direct3D9.Pool : Enum {
    public int value__;
    public static Pool Default;
    public static Pool Managed;
    public static Pool SystemMemory;
    public static Pool Scratch;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.Present : Enum {
    public int value__;
    public static Present BackBuffersMaximum;
    public static Present BackBuffersMaximumEx;
    public static Present DoNotWait;
    public static Present LinearContent;
    public static Present DoNotFlip;
    public static Present FlipRestart;
    public static Present VideoRestrictToMonitor;
    public static Present UpdateOverlayOnly;
    public static Present HideOverlay;
    public static Present UpdateColorKey;
    public static Present ForceImmediate;
    public static Present RateDefault;
    public static Present None;
}
public class SharpDX.Direct3D9.PresentationStatistics : ValueType {
    public int PresentCount;
    public int PresentRefreshCount;
    public int SyncRefreshCount;
    public long SyncQPCTime;
    public long SyncGPUTime;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.PresentFlags : Enum {
    public int value__;
    public static PresentFlags LockableBackBuffer;
    public static PresentFlags DiscardDepthStencil;
    public static PresentFlags DeviceClip;
    public static PresentFlags Video;
    public static PresentFlags NoAutoRotate;
    public static PresentFlags UnprunedMode;
    public static PresentFlags OverlayLimitedRgb;
    public static PresentFlags OverlayYCbCrBt709;
    public static PresentFlags OverlayYCbCrXvYCC;
    public static PresentFlags RestrictedContent;
    public static PresentFlags RestrictSharedResourceDriver;
    public static PresentFlags None;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.PresentInterval : Enum {
    public int value__;
    public static PresentInterval Default;
    public static PresentInterval One;
    public static PresentInterval Two;
    public static PresentInterval Three;
    public static PresentInterval Four;
    public static PresentInterval Immediate;
}
public class SharpDX.Direct3D9.PresentParameters : ValueType {
    public int BackBufferWidth;
    public int BackBufferHeight;
    public Format BackBufferFormat;
    public int BackBufferCount;
    public MultisampleType MultiSampleType;
    public int MultiSampleQuality;
    public SwapEffect SwapEffect;
    public IntPtr DeviceWindowHandle;
    public RawBool Windowed;
    public RawBool EnableAutoDepthStencil;
    public Format AutoDepthStencilFormat;
    public PresentFlags PresentFlags;
    public int FullScreenRefreshRateInHz;
    public PresentInterval PresentationInterval;
    public PresentParameters(int backBufferWidth, int backBufferHeight);
    public PresentParameters(int backBufferWidth, int backBufferHeight, Format backBufferFormat, int backBufferCount, MultisampleType multiSampleType, int multiSampleQuality, SwapEffect swapEffect, IntPtr deviceWindowHandle, bool windowed, bool enableAutoDepthStencil, Format autoDepthStencilFormat, PresentFlags presentFlags, int fullScreenRefreshRateInHz, PresentInterval presentationInterval);
    public void InitDefaults();
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.PrimitiveMiscCaps : Enum {
    public int value__;
    public static PrimitiveMiscCaps MaskZ;
    public static PrimitiveMiscCaps CullNone;
    public static PrimitiveMiscCaps CullCW;
    public static PrimitiveMiscCaps CullCCW;
    public static PrimitiveMiscCaps ColorWriteEnable;
    public static PrimitiveMiscCaps ClipPlanesScaledPoints;
    public static PrimitiveMiscCaps ClipTLVertices;
    public static PrimitiveMiscCaps TssArgTemp;
    public static PrimitiveMiscCaps BlendOperation;
    public static PrimitiveMiscCaps NullReference;
    public static PrimitiveMiscCaps IndependentWriteMasks;
    public static PrimitiveMiscCaps PerStageConstant;
    public static PrimitiveMiscCaps FogAndSpecularAlpha;
    public static PrimitiveMiscCaps SeparateAlphaBlend;
    public static PrimitiveMiscCaps MrtIndependentBitDepths;
    public static PrimitiveMiscCaps MrtPostPixelShaderBlending;
    public static PrimitiveMiscCaps FogVertexClamped;
    public static PrimitiveMiscCaps PostBlendSrgbConvert;
}
public enum SharpDX.Direct3D9.PrimitiveType : Enum {
    public int value__;
    public static PrimitiveType PointList;
    public static PrimitiveType LineList;
    public static PrimitiveType LineStrip;
    public static PrimitiveType TriangleList;
    public static PrimitiveType TriangleStrip;
    public static PrimitiveType TriangleFan;
}
[GuidAttribute("8875769a-d579-4088-aaeb-534d1ad84e96")]
public class SharpDX.Direct3D9.ProgressiveMesh : BaseMesh {
    public int MaxFaces { get; }
    public int MinFaces { get; }
    public int MaxVertices { get; }
    public int MinVertices { get; }
    public int Adjacency { get; }
    public ProgressiveMesh(IntPtr nativePtr);
    public static ProgressiveMesh op_Explicit(IntPtr nativePointer);
    public int get_MaxFaces();
    public int get_MinFaces();
    public int get_MaxVertices();
    public int get_MinVertices();
    public int get_Adjacency();
    public void ClonePMeshFVF(int options, int fvf, Device d3DDeviceRef, ProgressiveMesh& cloneMeshOut);
    public void ClonePMesh(int options, VertexElement declarationRef, Device d3DDeviceRef, ProgressiveMesh& cloneMeshOut);
    internal void SetNumFaces(int faces);
    internal void SetNumVertices(int vertices);
    internal int GetMaxFaces();
    internal int GetMinFaces();
    internal int GetMaxVertices();
    internal int GetMinVertices();
    internal void Save_(IntPtr streamRef, ExtendedMaterial& materialsRef, EffectInstance effectInstancesRef, int numMaterials);
    public void Optimize(int flags, int adjacencyOutRef, int faceRemapRef, Blob& vertexRemapOut, Mesh& optMeshOut);
    public void OptimizeBaseLOD(int flags, int faceRemapRef);
    public void TrimByFaces(int newFacesMin, int newFacesMax, int rgiFaceRemap, int rgiVertRemap);
    public void TrimByVertices(int newVerticesMin, int newVerticesMax, int rgiFaceRemap, int rgiVertRemap);
    internal void GetAdjacency(Int32& adjacencyRef);
    public void GenerateVertexHistory(int vertexHistoryRef);
}
[GuidAttribute("d9771460-a695-4f26-bbd3-27b840b541cc")]
public class SharpDX.Direct3D9.Query : ComObject {
    public Device Device { get; }
    public int DataSize { get; }
    public QueryType Type { get; }
    public Query(IntPtr nativePtr);
    public Query(Device device, QueryType type);
    public static Query op_Explicit(IntPtr nativePointer);
    public Device get_Device();
    public int get_DataSize();
    internal void GetDevice(Device& deviceOut);
    internal QueryType GetTypeInfo();
    internal int GetDataSize();
    public void Issue(Issue dwIssueFlags);
    internal Result GetData(IntPtr dataRef, int dwSize, int dwGetDataFlags);
    public QueryType get_Type();
    public bool GetData(T& data, bool flush);
}
public enum SharpDX.Direct3D9.QueryType : Enum {
    public int value__;
    public static QueryType VCache;
    public static QueryType ResourceManager;
    public static QueryType VertexStats;
    public static QueryType Event;
    public static QueryType Occlusion;
    public static QueryType Timestamp;
    public static QueryType TimestampDisjoint;
    public static QueryType TimestampFreq;
    public static QueryType PipelineTimings;
    public static QueryType InterfaceTimings;
    public static QueryType VertexTimings;
    public static QueryType PixelTimings;
    public static QueryType BandwidthTimings;
    public static QueryType CacheUtilization;
    public static QueryType MemoryPressure;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.RasterCaps : Enum {
    public int value__;
    public static RasterCaps Dither;
    public static RasterCaps DepthTest;
    public static RasterCaps FogVertex;
    public static RasterCaps FogTable;
    public static RasterCaps MipMapLodBias;
    public static RasterCaps ZBufferLessHsr;
    public static RasterCaps FogRange;
    public static RasterCaps Anisotropy;
    public static RasterCaps WBuffer;
    public static RasterCaps WFog;
    public static RasterCaps ZFog;
    public static RasterCaps ColorPerspective;
    public static RasterCaps ScissorTest;
    public static RasterCaps SlopeScaleDepthBias;
    public static RasterCaps DepthBias;
    public static RasterCaps MultisampleToggle;
}
public class SharpDX.Direct3D9.RasterStatus : ValueType {
    public RawBool InVBlank;
    public int ScanLine;
}
public class SharpDX.Direct3D9.RectanglePatchInfo : ValueType {
    public int StartVertexOffsetWidth;
    public int StartVertexOffsetHeight;
    public int Width;
    public int Height;
    public int Stride;
    public Basis Basis;
    public Degree Degree;
}
public enum SharpDX.Direct3D9.RegisterSet : Enum {
    public int value__;
    public static RegisterSet Bool;
    public static RegisterSet Int4;
    public static RegisterSet Float4;
    public static RegisterSet Sampler;
}
public enum SharpDX.Direct3D9.RenderState : Enum {
    public int value__;
    public static RenderState ZEnable;
    public static RenderState FillMode;
    public static RenderState ShadeMode;
    public static RenderState ZWriteEnable;
    public static RenderState AlphaTestEnable;
    public static RenderState LastPixel;
    public static RenderState SourceBlend;
    public static RenderState DestinationBlend;
    public static RenderState CullMode;
    public static RenderState ZFunc;
    public static RenderState AlphaRef;
    public static RenderState AlphaFunc;
    public static RenderState DitherEnable;
    public static RenderState AlphaBlendEnable;
    public static RenderState FogEnable;
    public static RenderState SpecularEnable;
    public static RenderState FogColor;
    public static RenderState FogTableMode;
    public static RenderState FogStart;
    public static RenderState FogEnd;
    public static RenderState FogDensity;
    public static RenderState RangeFogEnable;
    public static RenderState StencilEnable;
    public static RenderState StencilFail;
    public static RenderState StencilZFail;
    public static RenderState StencilPass;
    public static RenderState StencilFunc;
    public static RenderState StencilRef;
    public static RenderState StencilMask;
    public static RenderState StencilWriteMask;
    public static RenderState TextureFactor;
    public static RenderState Wrap0;
    public static RenderState Wrap1;
    public static RenderState Wrap2;
    public static RenderState Wrap3;
    public static RenderState Wrap4;
    public static RenderState Wrap5;
    public static RenderState Wrap6;
    public static RenderState Wrap7;
    public static RenderState Clipping;
    public static RenderState Lighting;
    public static RenderState Ambient;
    public static RenderState FogVertexMode;
    public static RenderState ColorVertex;
    public static RenderState LocalViewer;
    public static RenderState NormalizeNormals;
    public static RenderState DiffuseMaterialSource;
    public static RenderState SpecularMaterialSource;
    public static RenderState AmbientMaterialSource;
    public static RenderState EmissiveMaterialSource;
    public static RenderState VertexBlend;
    public static RenderState ClipPlaneEnable;
    public static RenderState PointSize;
    public static RenderState PointSizeMin;
    public static RenderState PointSpriteEnable;
    public static RenderState PointScaleEnable;
    public static RenderState PointScaleA;
    public static RenderState PointScaleB;
    public static RenderState PointScaleC;
    public static RenderState MultisampleAntialias;
    public static RenderState MultisampleMask;
    public static RenderState PatchEdgeStyle;
    public static RenderState DebugMonitorToken;
    public static RenderState PointSizeMax;
    public static RenderState IndexedVertexBlendEnable;
    public static RenderState ColorWriteEnable;
    public static RenderState TweenFactor;
    public static RenderState BlendOperation;
    public static RenderState PositionDegree;
    public static RenderState NormalDegree;
    public static RenderState ScissorTestEnable;
    public static RenderState SlopeScaleDepthBias;
    public static RenderState AntialiasedLineEnable;
    public static RenderState MinTessellationLevel;
    public static RenderState MaxTessellationLevel;
    public static RenderState AdaptiveTessX;
    public static RenderState AdaptiveTessY;
    public static RenderState AdaptiveTessZ;
    public static RenderState AdaptiveTessW;
    public static RenderState EnableAdaptiveTessellation;
    public static RenderState TwoSidedStencilMode;
    public static RenderState CcwStencilFail;
    public static RenderState CcwStencilZFail;
    public static RenderState CcwStencilPass;
    public static RenderState CcwStencilFunc;
    public static RenderState ColorWriteEnable1;
    public static RenderState ColorWriteEnable2;
    public static RenderState ColorWriteEnable3;
    public static RenderState BlendFactor;
    public static RenderState SrgbWriteEnable;
    public static RenderState DepthBias;
    public static RenderState Wrap8;
    public static RenderState Wrap9;
    public static RenderState Wrap10;
    public static RenderState Wrap11;
    public static RenderState Wrap12;
    public static RenderState Wrap13;
    public static RenderState Wrap14;
    public static RenderState Wrap15;
    public static RenderState SeparateAlphaBlendEnable;
    public static RenderState SourceBlendAlpha;
    public static RenderState DestinationBlendAlpha;
    public static RenderState BlendOperationAlpha;
}
[GuidAttribute("313f1b4b-c7b0-4fa2-9d9d-8d380b64385e")]
public class SharpDX.Direct3D9.RenderToEnvironmentMap : ComObject {
    public Device Device { get; }
    public RenderToEnvironmentMapDescription Description { get; }
    public RenderToEnvironmentMap(IntPtr nativePtr);
    public static RenderToEnvironmentMap op_Explicit(IntPtr nativePointer);
    public Device get_Device();
    public RenderToEnvironmentMapDescription get_Description();
    internal void GetDevice(Device& deviceOut);
    internal void GetDescription(RenderToEnvironmentMapDescription& descRef);
    public void BeginCube(CubeTexture cubeTexRef);
    public void BeginSphere(Texture texRef);
    public void BeginHemisphere(Texture texZPosRef, Texture texZNegRef);
    public void BeginParabolic(Texture texZPosRef, Texture texZNegRef);
    public void Face(CubeMapFace face, int mipFilter);
    public void End(int mipFilter);
    public void OnLostDevice();
    public void OnResetDevice();
}
public class SharpDX.Direct3D9.RenderToEnvironmentMapDescription : ValueType {
    public int Size;
    public int MipLevels;
    public Format Format;
    public RawBool DepthStencil;
    public Format DepthStencilFormat;
}
[GuidAttribute("6985f346-2c3d-43b3-be8b-daae8a03d894")]
public class SharpDX.Direct3D9.RenderToSurface : ComObject {
    public Device Device { get; }
    public RenderToSurfaceDescription Description { get; }
    public RenderToSurface(IntPtr nativePtr);
    public RenderToSurface(Device device, int width, int height, Format format, bool depthStencil, Format depthStencilFormat);
    public static RenderToSurface op_Explicit(IntPtr nativePointer);
    public Device get_Device();
    public RenderToSurfaceDescription get_Description();
    internal void GetDevice(Device& deviceOut);
    internal void GetDescription(RenderToSurfaceDescription& descRef);
    public void BeginScene(Surface surfaceRef, RawViewport viewportRef);
    public void EndScene(Filter mipFilter);
    public void OnLostDevice();
    public void OnResetDevice();
}
public class SharpDX.Direct3D9.RenderToSurfaceDescription : ValueType {
    public int Width;
    public int Height;
    public Format Format;
    public RawBool DepthStencil;
    public Format DepthStencilFormat;
}
[GuidAttribute("05EEC05D-8F7D-4362-B999-D1BAF357C704")]
public class SharpDX.Direct3D9.Resource : ComObject {
    protected internal Device Device__;
    public Device Device { get; }
    public int Priority { get; }
    public ResourceType TypeInfo { get; }
    public string DebugName { get; public set; }
    public Resource(IntPtr nativePtr);
    public static Resource op_Explicit(IntPtr nativePointer);
    public Device get_Device();
    public int get_Priority();
    public ResourceType get_TypeInfo();
    internal void GetDevice(Device& deviceOut);
    public void SetPrivateData(Guid refguid, IntPtr dataRef, int sizeOfData, int flags);
    public Result GetPrivateData(Guid refguid, IntPtr dataRef, Int32& sizeOfDataRef);
    public void FreePrivateData(Guid refguid);
    public int SetPriority(int priorityNew);
    internal int GetPriority();
    public void PreLoad();
    internal ResourceType GetTypeInfo();
    public string get_DebugName();
    public void set_DebugName(string value);
    protected virtual void NativePointerUpdated(IntPtr oldNativePointer);
    protected virtual void Dispose(bool disposing);
    private void DisposeDevice();
}
public class SharpDX.Direct3D9.ResourceManager : ValueType {
    internal ResourceStats[] _Stats;
    public ResourceStats[] Stats { get; }
    public ResourceStats[] get_Stats();
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
}
public enum SharpDX.Direct3D9.ResourceResidency : Enum {
    public int value__;
    public static ResourceResidency Resident;
    public static ResourceResidency ResidentInSharedMemory;
    public static ResourceResidency NotResident;
}
public class SharpDX.Direct3D9.ResourceStats : ValueType {
    public RawBool Thrashing;
    public int ApproximateBytesDownloaded;
    public int NumberEvicted;
    public int NumberVideoCreated;
    public int LastPriority;
    public int NumberUsed;
    public int NumberUsedInVideoMemory;
    public int WorkingSet;
    public int WorkingSetBytes;
    public int TotalManaged;
    public int TotalBytes;
}
public enum SharpDX.Direct3D9.ResourceType : Enum {
    public int value__;
    public static ResourceType Surface;
    public static ResourceType Volume;
    public static ResourceType Texture;
    public static ResourceType VolumeTexture;
    public static ResourceType CubeTexture;
    public static ResourceType VertexBuffer;
    public static ResourceType IndexBuffer;
}
public class SharpDX.Direct3D9.ResultCode : object {
    public static ResultDescriptor ConflictingRenderState;
    public static ResultDescriptor ConflictingTextureFilter;
    public static ResultDescriptor ConflictingTexturePalette;
    public static ResultDescriptor DeviceHung;
    public static ResultDescriptor DeviceLost;
    public static ResultDescriptor DeviceNotReset;
    public static ResultDescriptor DeviceRemoved;
    public static ResultDescriptor DriverInternalError;
    public static ResultDescriptor InvalidCall;
    public static ResultDescriptor InvalidDevice;
    public static ResultDescriptor MoreData;
    public static ResultDescriptor NoAutomaticGeneration;
    public static ResultDescriptor NotAvailable;
    public static ResultDescriptor NotFound;
    public static ResultDescriptor OutOfVideoMemory;
    public static ResultDescriptor PresentModeChanged;
    public static ResultDescriptor PresentOccluded;
    public static ResultDescriptor ResidentInSharedMemory;
    public static ResultDescriptor Success;
    public static ResultDescriptor TooManyOperations;
    public static ResultDescriptor UnsupportedAlphaArgument;
    public static ResultDescriptor UnsupportedAlphaOperation;
    public static ResultDescriptor UnsupportedColorArgument;
    public static ResultDescriptor UnsupportedColorOperation;
    public static ResultDescriptor UnsupportedFactorValue;
    public static ResultDescriptor UnsupportedTextureFilter;
    public static ResultDescriptor WasStillDrawing;
    public static ResultDescriptor WrongTextureFormat;
    private static ResultCode();
}
public class SharpDX.Direct3D9.RotationKey : ValueType {
    public float Time;
    public RawQuaternion Value;
}
public enum SharpDX.Direct3D9.SamplerState : Enum {
    public int value__;
    public static SamplerState AddressU;
    public static SamplerState AddressV;
    public static SamplerState AddressW;
    public static SamplerState BorderColor;
    public static SamplerState MagFilter;
    public static SamplerState MinFilter;
    public static SamplerState MipFilter;
    public static SamplerState MipMapLodBias;
    public static SamplerState MaxMipLevel;
    public static SamplerState MaxAnisotropy;
    public static SamplerState SrgbTexture;
    public static SamplerState ElementIndex;
    public static SamplerState DisplacementMapOffset;
}
public enum SharpDX.Direct3D9.SamplerTextureType : Enum {
    public int value__;
    public static SamplerTextureType Unknown;
    public static SamplerTextureType Texture2D;
    public static SamplerTextureType Cube;
    public static SamplerTextureType Volume;
}
public class SharpDX.Direct3D9.ScaleKey : ValueType {
    public float Time;
    public RawVector3 Value;
}
public enum SharpDX.Direct3D9.ScanlineOrdering : Enum {
    public int value__;
    public static ScanlineOrdering Unknown;
    public static ScanlineOrdering Progressive;
    public static ScanlineOrdering Interlaced;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.ShadeCaps : Enum {
    public int value__;
    public static ShadeCaps ColorGouraudRgb;
    public static ShadeCaps SpecularGouraudRgb;
    public static ShadeCaps AlphaGouraudBlend;
    public static ShadeCaps FogGouraud;
}
public enum SharpDX.Direct3D9.ShadeMode : Enum {
    public int value__;
    public static ShadeMode Flat;
    public static ShadeMode Gouraud;
    public static ShadeMode Phong;
}
public class SharpDX.Direct3D9.ShaderBytecode : DisposeBase {
    private bool isOwner;
    private Blob blob;
    private ConstantTable constantTable;
    [CompilerGeneratedAttribute]
private IntPtr <BufferPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private PointerSize <BufferSize>k__BackingField;
    public IntPtr BufferPointer { get; private set; }
    public PointerSize BufferSize { get; public set; }
    public ConstantTable ConstantTable { get; }
    public int Version { get; }
    public DataStream Data { get; }
    public ShaderBytecode(DataStream data);
    public ShaderBytecode(Stream data);
    public ShaderBytecode(Byte[] buffer);
    public ShaderBytecode(IntPtr buffer, int sizeInBytes);
    protected internal ShaderBytecode(Blob blob);
    [CompilerGeneratedAttribute]
public IntPtr get_BufferPointer();
    [CompilerGeneratedAttribute]
private void set_BufferPointer(IntPtr value);
    [CompilerGeneratedAttribute]
public PointerSize get_BufferSize();
    [CompilerGeneratedAttribute]
public void set_BufferSize(PointerSize value);
    public ConstantTable get_ConstantTable();
    public int get_Version();
    public static int GetShaderSize(IntPtr shaderFunctionPtr);
    public static CompilationResult Assemble(Byte[] sourceData, ShaderFlags flags);
    public static CompilationResult Assemble(string sourceData, ShaderFlags flags);
    public static CompilationResult Assemble(string sourceData, Macro[] defines, Include includeFile, ShaderFlags flags);
    public static CompilationResult Assemble(Byte[] sourceData, Macro[] defines, Include includeFile, ShaderFlags flags);
    public static CompilationResult AssembleFromFile(string fileName, ShaderFlags flags);
    public static CompilationResult AssembleFromFile(string fileName, Macro[] defines, Include includeFile, ShaderFlags flags);
    public static CompilationResult Compile(string shaderSource, string profile, ShaderFlags shaderFlags);
    public static CompilationResult Compile(Byte[] shaderSource, string profile, ShaderFlags shaderFlags);
    public static CompilationResult Compile(string shaderSource, string entryPoint, string profile, ShaderFlags shaderFlags);
    public static CompilationResult Compile(Byte[] shaderSource, string entryPoint, string profile, ShaderFlags shaderFlags);
    public static CompilationResult Compile(string shaderSource, string profile, ShaderFlags shaderFlags, Macro[] defines, Include include);
    public static CompilationResult Compile(Byte[] shaderSource, string profile, ShaderFlags shaderFlags, Macro[] defines, Include include);
    public static CompilationResult Compile(string shaderSource, string entryPoint, string profile, ShaderFlags shaderFlags, Macro[] defines, Include include);
    public static CompilationResult CompileFromFile(string fileName, string profile, ShaderFlags shaderFlags, Macro[] defines, Include include);
    public static CompilationResult CompileFromFile(string fileName, string entryPoint, string profile, ShaderFlags shaderFlags, Macro[] defines, Include include);
    public static CompilationResult Compile(Byte[] shaderSource, string entryPoint, string profile, ShaderFlags shaderFlags, Macro[] defines, Include include);
    public string Disassemble();
    public string Disassemble(bool enableColorCode);
    public string Disassemble(bool enableColorCode, string comments);
    public DataStream FindComment(Format fourCC);
    public ShaderSemantic[] GetInputSemantics();
    public ShaderSemantic[] GetOutputSemantics();
    public String[] GetSamplers();
    public static int MajorVersion(int version);
    public static int MinorVersion(int version);
    public static Version ParseVersion(int version);
    public static ShaderBytecode Load(Stream stream);
    public void Save(string fileName);
    public void Save(Stream stream);
    public static ShaderBytecode FromPointer(IntPtr pointer);
    public static string Preprocess(string shaderSource, Macro[] defines, Include include);
    public static string Preprocess(Byte[] shaderSource, Macro[] defines, Include include);
    public static string Preprocess(Byte[] shaderSource, Macro[] defines, Include include, String& compilationErrors);
    public static string Preprocess(IntPtr shaderSourcePtr, int shaderSourceLength, Macro[] defines, Include include, String& compilationErrors);
    public static string Preprocess(string shaderSource, Macro[] defines, Include include, String& compilationErrors);
    public static string PreprocessFromFile(string fileName);
    public static string PreprocessFromFile(string fileName, Macro[] defines, Include include);
    public static string PreprocessFromFile(string fileName, Macro[] defines, Include include, String& compilationErrors);
    public DataStream get_Data();
    public static ShaderBytecode FromStream(Stream stream);
    public static ShaderBytecode FromFile(string fileName);
    internal static Macro[] PrepareMacros(Macro[] macros);
    protected virtual void Dispose(bool disposing);
    private void CreateFromBuffer(Byte[] buffer);
    private void CreateFromPointer(IntPtr buffer, int sizeInBytes);
}
public class SharpDX.Direct3D9.ShaderConstantInformation : ValueType {
    public int Name;
    public short RegisterSet;
    public short RegisterIndex;
    public short RegisterCount;
    public short Reserved;
    public int TypeInfo;
    public int DefaultValue;
}
public class SharpDX.Direct3D9.ShaderConstantTable : ValueType {
    public int Size;
    public int Creator;
    public int Version;
    public int Constants;
    public int ConstantInfo;
    public int Flags;
    public int Target;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.ShaderFlags : Enum {
    public int value__;
    public static ShaderFlags Debug;
    public static ShaderFlags SkipValidation;
    public static ShaderFlags SkipOptimization;
    public static ShaderFlags PackMatrixRowMajor;
    public static ShaderFlags PackMatrixColumnMajor;
    public static ShaderFlags PartialPrecision;
    public static ShaderFlags ForceVSSoftwareNoOpt;
    public static ShaderFlags ForcePSSoftwareNoOpt;
    public static ShaderFlags NoPreshader;
    public static ShaderFlags AvoidFlowControl;
    public static ShaderFlags PreferFlowControl;
    public static ShaderFlags EnableBackwardsCompatibility;
    public static ShaderFlags IeeeStrictness;
    public static ShaderFlags UseLegacyD3DX9_31Dll;
    public static ShaderFlags OptimizationLevel0;
    public static ShaderFlags OptimizationLevel1;
    public static ShaderFlags OptimizationLevel2;
    public static ShaderFlags OptimizationLevel3;
    public static ShaderFlags None;
}
public class SharpDX.Direct3D9.ShaderSemantic : ValueType {
    public DeclarationUsage Usage;
    public int UsageIndex;
}
[GuidAttribute("667ea4c7-f1cd-4386-b523-7c0290b83cc5")]
public class SharpDX.Direct3D9.SimplificationMesh : ComObject {
    public int NumFaces { get; }
    public int NumVertices { get; }
    public int FVF { get; }
    public int Options { get; }
    public Device Device { get; }
    public int MaxFaces { get; }
    public int MaxVertices { get; }
    public float VertexWeights { get; }
    public SimplificationMesh(IntPtr nativePtr);
    public static SimplificationMesh op_Explicit(IntPtr nativePointer);
    public int get_NumFaces();
    public int get_NumVertices();
    public int get_FVF();
    public int get_Options();
    public Device get_Device();
    public int get_MaxFaces();
    public int get_MaxVertices();
    public float get_VertexWeights();
    internal int GetNumFaces();
    internal int GetNumVertices();
    internal int GetFVF();
    public void GetDeclaration(VertexElement declaration);
    internal int GetOptions();
    internal void GetDevice(Device& deviceOut);
    public void CloneMeshFVF(int options, int fvf, Device d3DDeviceRef, int adjacencyOutRef, int vertexRemapOutRef, Mesh& cloneMeshOut);
    public void CloneMesh(int options, VertexElement declarationRef, Device d3DDeviceRef, int adjacencyOutRef, int vertexRemapOutRef, Mesh& cloneMeshOut);
    public void ClonePMeshFVF(int options, int fvf, Device d3DDeviceRef, int vertexRemapOutRef, float errorsByFaceRef, ProgressiveMesh& cloneMeshOut);
    public void ClonePMesh(int options, VertexElement declarationRef, Device d3DDeviceRef, int vertexRemapOutRef, float errorsbyFaceRef, ProgressiveMesh& cloneMeshOut);
    public void ReduceFaces(int faces);
    public void ReduceVertices(int vertices);
    internal int GetMaxFaces();
    internal int GetMaxVertices();
    public void GetVertexAttributeWeights(AttributeWeights& vertexAttributeWeightsRef);
    internal void GetVertexWeights(Single& vertexWeightsRef);
}
[GuidAttribute("11eaa540-f9a6-4d49-ae6a-e19221f70cc4")]
public class SharpDX.Direct3D9.SkinInfo : ComObject {
    public int MaxVertexInfluences { get; }
    public int NumBones { get; }
    public float MinBoneInfluence { get; public set; }
    public int FVF { get; public set; }
    public SkinInfo(IntPtr nativePtr);
    public static SkinInfo op_Explicit(IntPtr nativePointer);
    public int get_MaxVertexInfluences();
    public int get_NumBones();
    public float get_MinBoneInfluence();
    public void set_MinBoneInfluence(float value);
    public int get_FVF();
    public void set_FVF(int value);
    public void SetBoneInfluence(int bone, int numInfluences, int vertices, float weights);
    public void SetBoneVertexInfluence(int boneNum, int influenceNum, float weight);
    public int GetNumBoneInfluences(int bone);
    public void GetBoneInfluence(int bone, Int32& vertices, Single& weights);
    public void GetBoneVertexInfluence(int boneNum, int influenceNum, Single& weightRef, Int32& vertexNumRef);
    internal void GetMaxVertexInfluences(Int32& maxVertexInfluences);
    internal int GetNumBones();
    public void FindBoneVertexInfluenceIndex(int boneNum, int vertexNum, int influenceIndexRef);
    public void GetMaxFaceInfluences(IndexBuffer iBRef, int numFaces, Int32& maxFaceInfluences);
    internal void SetMinBoneInfluence(float minInfl);
    internal float GetMinBoneInfluence();
    public void SetBoneName(int bone, string nameRef);
    public string GetBoneName(int bone);
    public void SetBoneOffsetMatrix(int bone, RawMatrix& boneTransformRef);
    public RawMatrix GetBoneOffsetMatrix(int bone);
    public void Clone(SkinInfo& skinInfoOut);
    public void Remap(int numVertices, int vertexRemapRef);
    internal void SetFVF(int fvf);
    public void SetDeclaration(VertexElement declarationRef);
    internal int GetFVF();
    public void GetDeclaration(VertexElement declaration);
    public void UpdateSkinnedMesh(RawMatrix& boneTransformsRef, RawMatrix& boneInvTransposeTransformsRef, IntPtr verticesSrcRef, IntPtr verticesDstRef);
    public void ConvertToBlendedMesh(Mesh meshRef, int options, int adjacencyInRef, int adjacencyOutRef, int faceRemapRef, Blob& vertexRemapOut, int maxFaceInflRef, int numBoneCombinationsRef, Blob& boneCombinationTableOut, Mesh& meshOut);
    public void ConvertToIndexedBlendedMesh(Mesh meshRef, int options, int paletteSize, int adjacencyInRef, int adjacencyOutRef, int faceRemapRef, Blob& vertexRemapOut, int maxVertexInflRef, int numBoneCombinationsRef, Blob& boneCombinationTableOut, Mesh& meshOut);
}
[GuidAttribute("ba0b762d-7d28-43ec-b9dc-2f84443b0614")]
public class SharpDX.Direct3D9.Sprite : ComObject {
    public Device Device { get; }
    public RawMatrix Transform { get; public set; }
    public Sprite(IntPtr nativePtr);
    public Sprite(Device device);
    public static Sprite op_Explicit(IntPtr nativePointer);
    public Device get_Device();
    public RawMatrix get_Transform();
    public void set_Transform(RawMatrix value);
    internal void GetDevice(Device& deviceOut);
    internal void GetTransform(RawMatrix& transformRef);
    internal void SetTransform(RawMatrix& transformRef);
    public void SetWorldViewRH(RawMatrix& worldRef, RawMatrix& viewRef);
    public void SetWorldViewLH(RawMatrix& worldRef, RawMatrix& viewRef);
    public void Begin(SpriteFlags flags);
    internal void Draw(Texture textureRef, IntPtr srcRectRef, IntPtr centerRef, IntPtr positionRef, RawColorBGRA color);
    public void Flush();
    public void End();
    public void OnLostDevice();
    public void OnResetDevice();
    public void Draw(Texture textureRef, RawColorBGRA color);
    public void Draw(Texture textureRef, RawColorBGRA color, Nullable`1<RawRectangle> srcRectRef, Nullable`1<RawVector3> centerRef, Nullable`1<RawVector3> positionRef);
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.SpriteFlags : Enum {
    public int value__;
    public static SpriteFlags DoNotSaveState;
    public static SpriteFlags DoNotModifyRenderState;
    public static SpriteFlags ObjectSpace;
    public static SpriteFlags Billboard;
    public static SpriteFlags AlphaBlend;
    public static SpriteFlags SortTexture;
    public static SpriteFlags SortDepthFrontToBack;
    public static SpriteFlags SortDepthBackToFront;
    public static SpriteFlags DoNotAddRefTexture;
    public static SpriteFlags None;
}
public class SharpDX.Direct3D9.StageTimings : ValueType {
    public float MemoryProcessingPercent;
    public float ComputationProcessingPercent;
}
[GuidAttribute("B07C4FE5-310D-4ba8-A23C-4F0F206F218B")]
public class SharpDX.Direct3D9.StateBlock : ComObject {
    public Device Device { get; }
    public StateBlock(IntPtr nativePtr);
    public StateBlock(Device device, StateBlockType type);
    public static StateBlock op_Explicit(IntPtr nativePointer);
    public Device get_Device();
    internal void GetDevice(Device& deviceOut);
    public void Capture();
    public void Apply();
}
public enum SharpDX.Direct3D9.StateBlockType : Enum {
    public int value__;
    public static StateBlockType All;
    public static StateBlockType PixelState;
    public static StateBlockType VertexState;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.StencilCaps : Enum {
    public int value__;
    public static StencilCaps Keep;
    public static StencilCaps Zero;
    public static StencilCaps Replace;
    public static StencilCaps IncrementClamp;
    public static StencilCaps DecrementClamp;
    public static StencilCaps Invert;
    public static StencilCaps Increment;
    public static StencilCaps Decrement;
    public static StencilCaps TwoSided;
}
public enum SharpDX.Direct3D9.StencilOperation : Enum {
    public int value__;
    public static StencilOperation Keep;
    public static StencilOperation Zero;
    public static StencilOperation Replace;
    public static StencilOperation IncrementSaturate;
    public static StencilOperation DecrementSaturate;
    public static StencilOperation Invert;
    public static StencilOperation Increment;
    public static StencilOperation Decrement;
}
public enum SharpDX.Direct3D9.StreamSource : Enum {
    public int value__;
    public static StreamSource IndexedData;
    public static StreamSource InstanceData;
}
[GuidAttribute("0CFBAF3A-9FF6-429a-99B3-A2796AF8B89B")]
public class SharpDX.Direct3D9.Surface : Resource {
    public SurfaceDescription Description { get; }
    public Surface(IntPtr nativePtr);
    public static Surface op_Explicit(IntPtr nativePointer);
    public SurfaceDescription get_Description();
    internal void GetContainer(Guid riid, IntPtr& containerOut);
    internal void GetDescription(SurfaceDescription& descRef);
    internal void LockRectangle(LockedRectangle& lockedRectRef, IntPtr rectRef, LockFlags flags);
    public void UnlockRectangle();
    public IntPtr GetDC();
    public void ReleaseDC(IntPtr hdc);
    public static Surface CreateDepthStencil(Device device, int width, int height, Format format, MultisampleType multisampleType, int multisampleQuality, bool discard);
    public static Surface CreateDepthStencil(Device device, int width, int height, Format format, MultisampleType multisampleType, int multisampleQuality, bool discard, IntPtr& sharedHandle);
    public static Surface CreateDepthStencilEx(DeviceEx device, int width, int height, Format format, MultisampleType multisampleType, int multisampleQuality, bool discard, Usage usage);
    public static Surface CreateDepthStencilEx(DeviceEx device, int width, int height, Format format, MultisampleType multisampleType, int multisampleQuality, bool discard, Usage usage, IntPtr& sharedHandle);
    public static Surface CreateOffscreenPlain(Device device, int width, int height, Format format, Pool pool);
    public static Surface CreateOffscreenPlain(Device device, int width, int height, Format format, Pool pool, IntPtr& sharedHandle);
    public static Surface CreateOffscreenPlainEx(DeviceEx device, int width, int height, Format format, Pool pool, Usage usage);
    public static Surface CreateOffscreenPlainEx(DeviceEx device, int width, int height, Format format, Pool pool, Usage usage, IntPtr& sharedHandle);
    public static Surface CreateRenderTarget(Device device, int width, int height, Format format, MultisampleType multisampleType, int multisampleQuality, bool lockable);
    public static Surface CreateRenderTarget(Device device, int width, int height, Format format, MultisampleType multisampleType, int multisampleQuality, bool lockable, IntPtr& sharedHandle);
    public static Surface CreateRenderTargetEx(DeviceEx device, int width, int height, Format format, MultisampleType multisampleType, int multisampleQuality, bool lockable, Usage usage);
    public static Surface CreateRenderTargetEx(DeviceEx device, int width, int height, Format format, MultisampleType multisampleType, int multisampleQuality, bool lockable, Usage usage, IntPtr& sharedHandle);
    public static void FromFile(Surface surface, string fileName, Filter filter, int colorKey);
    public static void FromFile(Surface surface, string fileName, Filter filter, int colorKey, RawRectangle sourceRectangle, RawRectangle destinationRectangle);
    public static void FromFile(Surface surface, string fileName, Filter filter, int colorKey, RawRectangle sourceRectangle, RawRectangle destinationRectangle, ImageInformation& imageInformation);
    public static void FromFile(Surface surface, string fileName, Filter filter, int colorKey, RawRectangle sourceRectangle, RawRectangle destinationRectangle, PaletteEntry[] palette, ImageInformation& imageInformation);
    public static void FromFileInMemory(Surface surface, Byte[] memory, Filter filter, int colorKey);
    public static void FromFileInMemory(Surface surface, Byte[] memory, Filter filter, int colorKey, RawRectangle sourceRectangle, RawRectangle destinationRectangle);
    public static void FromFileInMemory(Surface surface, Byte[] memory, Filter filter, int colorKey, RawRectangle sourceRectangle, RawRectangle destinationRectangle, ImageInformation& imageInformation);
    public static void FromFileInMemory(Surface surface, Byte[] memory, Filter filter, int colorKey, RawRectangle sourceRectangle, RawRectangle destinationRectangle, PaletteEntry[] palette, ImageInformation& imageInformation);
    public static void FromFileInStream(Surface surface, Stream stream, Filter filter, int colorKey);
    public static void FromFileInStream(Surface surface, Stream stream, Filter filter, int colorKey, RawRectangle sourceRectangle, RawRectangle destinationRectangle);
    public static void FromFileInStream(Surface surface, Stream stream, Filter filter, int colorKey, RawRectangle sourceRectangle, RawRectangle destinationRectangle, ImageInformation& imageInformation);
    public static void FromFileInStream(Surface surface, Stream stream, Filter filter, int colorKey, RawRectangle sourceRectangle, RawRectangle destinationRectangle, PaletteEntry[] palette, ImageInformation& imageInformation);
    private static void CreateFromFileInStream(Surface surface, Stream stream, Filter filter, int colorKey, RawRectangle sourceRectangle, RawRectangle destinationRectangle, PaletteEntry[] palette, IntPtr imageInformation);
    public static void FromMemory(Surface surface, Byte[] data, Filter filter, int colorKey, Format sourceFormat, int sourcePitch, RawRectangle sourceRectangle);
    public static void FromMemory(Surface surface, Byte[] data, Filter filter, int colorKey, Format sourceFormat, int sourcePitch, RawRectangle sourceRectangle, RawRectangle destinationRectangle);
    public static void FromMemory(Surface surface, Byte[] data, Filter filter, int colorKey, Format sourceFormat, int sourcePitch, RawRectangle sourceRectangle, PaletteEntry[] sourcePalette, PaletteEntry[] destinationPalette);
    public static void FromMemory(Surface surface, Byte[] data, Filter filter, int colorKey, Format sourceFormat, int sourcePitch, RawRectangle sourceRectangle, RawRectangle destinationRectangle, PaletteEntry[] sourcePalette, PaletteEntry[] destinationPalette);
    public static void FromStream(Surface surface, Stream stream, Filter filter, int colorKey, Format sourceFormat, int sourcePitch, RawRectangle sourceRectangle);
    public static void FromStream(Surface surface, Stream stream, Filter filter, int colorKey, Format sourceFormat, int sourcePitch, RawRectangle sourceRectangle, RawRectangle destinationRectangle);
    public static void FromStream(Surface surface, Stream stream, Filter filter, int colorKey, Format sourceFormat, int sourcePitch, RawRectangle sourceRectangle, PaletteEntry[] sourcePalette, PaletteEntry[] destinationPalette);
    public static void FromStream(Surface surface, Stream stream, Filter filter, int colorKey, Format sourceFormat, int sourcePitch, RawRectangle sourceRectangle, RawRectangle destinationRectangle, PaletteEntry[] sourcePalette, PaletteEntry[] destinationPalette);
    public static void FromSurface(Surface destinationSurface, Surface sourceSurface, Filter filter, int colorKey);
    public static void FromSurface(Surface destinationSurface, Surface sourceSurface, Filter filter, int colorKey, RawRectangle sourceRectangle, RawRectangle destinationRectangle);
    public static void FromSurface(Surface destinationSurface, Surface sourceSurface, Filter filter, int colorKey, RawRectangle sourceRectangle, RawRectangle destinationRectangle, PaletteEntry[] destinationPalette, PaletteEntry[] sourcePalette);
    public T GetContainer(Guid guid);
    public DataRectangle LockRectangle(LockFlags flags);
    public DataRectangle LockRectangle(RawRectangle rect, LockFlags flags);
    public DataRectangle LockRectangle(LockFlags flags, DataStream& stream);
    public DataRectangle LockRectangle(RawRectangle rect, LockFlags flags, DataStream& stream);
    public static void ToFile(Surface surface, string fileName, ImageFileFormat format);
    public static void ToFile(Surface surface, string fileName, ImageFileFormat format, RawRectangle rectangle);
    public static void ToFile(Surface surface, string fileName, ImageFileFormat format, RawRectangle rectangle, PaletteEntry[] palette);
    public static DataStream ToStream(Surface surface, ImageFileFormat format);
    public static DataStream ToStream(Surface surface, ImageFileFormat format, RawRectangle rectangle);
    public static DataStream ToStream(Surface surface, ImageFileFormat format, RawRectangle rectangle, PaletteEntry[] palette);
}
public class SharpDX.Direct3D9.SurfaceDescription : ValueType {
    public Format Format;
    public ResourceType Type;
    public Usage Usage;
    public Pool Pool;
    public MultisampleType MultiSampleType;
    public int MultiSampleQuality;
    public int Width;
    public int Height;
}
[GuidAttribute("794950F2-ADFC-458a-905E-10A10B0B503B")]
public class SharpDX.Direct3D9.SwapChain : ComObject {
    public RasterStatus RasterStatus { get; }
    public DisplayMode DisplayMode { get; }
    public Device Device { get; }
    public PresentParameters PresentParameters { get; }
    public SwapChain(IntPtr nativePtr);
    public SwapChain(Device device, PresentParameters presentParameters);
    public static SwapChain op_Explicit(IntPtr nativePointer);
    public RasterStatus get_RasterStatus();
    public DisplayMode get_DisplayMode();
    public Device get_Device();
    public PresentParameters get_PresentParameters();
    internal void Present(IntPtr sourceRectRef, IntPtr destRectRef, IntPtr hDestWindowOverride, IntPtr dirtyRegionRef, int dwFlags);
    public void GetFrontBufferData(Surface destSurfaceRef);
    internal Surface GetBackBuffer(int iBackBuffer, BackBufferType type);
    internal void GetRasterStatus(RasterStatus& rasterStatusRef);
    internal void GetDisplayMode(DisplayMode& modeRef);
    internal void GetDevice(Device& deviceOut);
    internal void GetPresentParameters(PresentParameters& presentationParametersRef);
    public Surface GetBackBuffer(int iBackBuffer);
    public void Present(Present presentFlags);
    public void Present(Present presentFlags, RawRectangle sourceRectangle, RawRectangle destinationRectangle);
    public void Present(Present presentFlags, RawRectangle sourceRectangle, RawRectangle destinationRectangle, IntPtr windowOverride);
    public void Present(Present flags, RawRectangle sourceRectangle, RawRectangle destinationRectangle, IntPtr windowOverride, IntPtr dirtyRegionRGNData);
}
[GuidAttribute("91886CAF-1C3D-4d2e-A0AB-3E4C7D8D3303")]
public class SharpDX.Direct3D9.SwapChain9Ex : SwapChain {
    public int LastPresentCount { get; }
    public PresentationStatistics PresentStats { get; }
    public SwapChain9Ex(IntPtr nativePtr);
    public static SwapChain9Ex op_Explicit(IntPtr nativePointer);
    public int get_LastPresentCount();
    public PresentationStatistics get_PresentStats();
    internal void GetLastPresentCount(Int32& lastPresentCountRef);
    internal void GetPresentStats(PresentationStatistics& presentationStatisticsRef);
    public void GetDisplayModeEx(DisplayModeEx& modeRef, DisplayRotation& rotationRef);
}
public enum SharpDX.Direct3D9.SwapEffect : Enum {
    public int value__;
    public static SwapEffect Discard;
    public static SwapEffect Flip;
    public static SwapEffect Copy;
    public static SwapEffect Overlay;
    public static SwapEffect FlipEx;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.TangentOptions : Enum {
    public int value__;
    public static TangentOptions WrapU;
    public static TangentOptions WrapV;
    public static TangentOptions WrapUV;
    public static TangentOptions DontNormalizePartials;
    public static TangentOptions DontOrthogonalize;
    public static TangentOptions OrthogonalizeFromV;
    public static TangentOptions OrthogonalizeFromU;
    public static TangentOptions WeightByArea;
    public static TangentOptions WeightEqual;
    public static TangentOptions WindCW;
    public static TangentOptions CalculateNormals;
    public static TangentOptions GenerateInPlace;
    public static TangentOptions None;
}
public class SharpDX.Direct3D9.TechniqueDescription : ValueType {
    public string Name;
    public int Passes;
    public int Annotations;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[GuidAttribute("85C31227-3DE5-4f00-9B3A-F11AC38C18B5")]
public class SharpDX.Direct3D9.Texture : BaseTexture {
    public Texture(IntPtr nativePtr);
    public Texture(Device device, int width, int height, int levelCount, Usage usage, Format format, Pool pool);
    public Texture(Device device, int width, int height, int levelCount, Usage usage, Format format, Pool pool, IntPtr& sharedHandle);
    public static Texture op_Explicit(IntPtr nativePointer);
    public SurfaceDescription GetLevelDescription(int level);
    public Surface GetSurfaceLevel(int level);
    internal void LockRectangle(int level, LockedRectangle& lockedRectRef, IntPtr rectRef, LockFlags flags);
    public void UnlockRectangle(int level);
    internal void AddDirtyRectangle(IntPtr dirtyRectRef);
    public static TextureRequirements CheckRequirements(Device device, int width, int height, int mipLevelCount, Usage usage, Format format, Pool pool);
    public static void ComputeNormalMap(Texture texture, Texture sourceTexture, NormalMapFlags flags, Channel channel, float amplitude);
    public static void ComputeNormalMap(Texture texture, Texture sourceTexture, PaletteEntry[] palette, NormalMapFlags flags, Channel channel, float amplitude);
    public void Fill(Fill2DCallback callback);
    public void Fill(TextureShader shader);
    public DataRectangle LockRectangle(int level, LockFlags flags);
    public DataRectangle LockRectangle(int level, LockFlags flags, DataStream& stream);
    public DataRectangle LockRectangle(int level, RawRectangle rectangle, LockFlags flags);
    public DataRectangle LockRectangle(int level, RawRectangle rectangle, LockFlags flags, DataStream& stream);
    public void AddDirtyRectangle();
    public void AddDirtyRectangle(RawRectangle dirtyRectRef);
    public static Texture FromFile(Device device, string filename);
    public static Texture FromFile(Device device, string filename, Usage usage, Pool pool);
    public static Texture FromFile(Device device, string filename, int width, int height, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey);
    public static Texture FromFile(Device device, string filename, int width, int height, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation);
    public static Texture FromFile(Device device, string filename, int width, int height, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation, PaletteEntry[]& palette);
    public static Texture FromMemory(Device device, Byte[] buffer);
    public static Texture FromMemory(Device device, Byte[] buffer, Usage usage, Pool pool);
    public static Texture FromMemory(Device device, Byte[] buffer, int width, int height, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey);
    public static Texture FromMemory(Device device, Byte[] buffer, int width, int height, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation);
    public static Texture FromMemory(Device device, Byte[] buffer, int width, int height, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation, PaletteEntry[]& palette);
    public static Texture FromStream(Device device, Stream stream);
    public static Texture FromStream(Device device, Stream stream, Usage usage, Pool pool);
    public static Texture FromStream(Device device, Stream stream, int width, int height, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey);
    public static Texture FromStream(Device device, Stream stream, int sizeBytes, int width, int height, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey);
    public static Texture FromStream(Device device, Stream stream, int sizeBytes, int width, int height, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation);
    public static Texture FromStream(Device device, Stream stream, int sizeBytes, int width, int height, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation, PaletteEntry[]& palette);
    private static Texture CreateFromMemory(Device device, Byte[] buffer, int width, int height, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, IntPtr imageInformation, PaletteEntry[] palette);
    private static Texture CreateFromStream(Device device, Stream stream, int sizeBytes, int width, int height, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, IntPtr imageInformation, PaletteEntry[] palette);
    private static Texture CreateFromPointer(Device device, IntPtr pointer, int sizeInBytes, int width, int height, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, IntPtr imageInformation, PaletteEntry[] palette);
    private static Texture CreateFromFile(Device device, string fileName, int width, int height, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, IntPtr imageInformation, PaletteEntry[] palette);
}
public enum SharpDX.Direct3D9.TextureAddress : Enum {
    public int value__;
    public static TextureAddress Wrap;
    public static TextureAddress Mirror;
    public static TextureAddress Clamp;
    public static TextureAddress Border;
    public static TextureAddress MirrorOnce;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.TextureAddressCaps : Enum {
    public int value__;
    public static TextureAddressCaps Wrap;
    public static TextureAddressCaps Mirror;
    public static TextureAddressCaps Clamp;
    public static TextureAddressCaps Border;
    public static TextureAddressCaps IndependentUV;
    public static TextureAddressCaps MirrorOnce;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.TextureArgument : Enum {
    public int value__;
    public static TextureArgument SelectMask;
    public static TextureArgument Diffuse;
    public static TextureArgument Current;
    public static TextureArgument Texture;
    public static TextureArgument TFactor;
    public static TextureArgument Specular;
    public static TextureArgument Temp;
    public static TextureArgument Constant;
    public static TextureArgument Complement;
    public static TextureArgument AlphaReplicate;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.TextureCaps : Enum {
    public int value__;
    public static TextureCaps Perspective;
    public static TextureCaps Pow2;
    public static TextureCaps Alpha;
    public static TextureCaps SquareOnly;
    public static TextureCaps TextureRepeatNotScaledBySize;
    public static TextureCaps AlphaPalette;
    public static TextureCaps NonPow2Conditional;
    public static TextureCaps Projected;
    public static TextureCaps CubeMap;
    public static TextureCaps VolumeMap;
    public static TextureCaps MipMap;
    public static TextureCaps MipVolumeMap;
    public static TextureCaps MipCubeMap;
    public static TextureCaps CubeMapPow2;
    public static TextureCaps VolumeMapPow2;
    public static TextureCaps NoProjectedBumpEnvironment;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.TextureCoordIndex : Enum {
    public int value__;
    public static TextureCoordIndex PassThru;
    public static TextureCoordIndex CameraSpaceNormal;
    public static TextureCoordIndex CameraSpacePosition;
    public static TextureCoordIndex CameraSpaceReflectionVector;
    public static TextureCoordIndex SphereMap;
}
public enum SharpDX.Direct3D9.TextureFilter : Enum {
    public int value__;
    public static TextureFilter None;
    public static TextureFilter Point;
    public static TextureFilter Linear;
    public static TextureFilter Anisotropic;
    public static TextureFilter PyramidalQuad;
    public static TextureFilter GaussianQuad;
    public static TextureFilter ConvolutionMono;
}
public enum SharpDX.Direct3D9.TextureOperation : Enum {
    public int value__;
    public static TextureOperation Disable;
    public static TextureOperation SelectArg1;
    public static TextureOperation SelectArg2;
    public static TextureOperation Modulate;
    public static TextureOperation Modulate2X;
    public static TextureOperation Modulate4X;
    public static TextureOperation Add;
    public static TextureOperation AddSigned;
    public static TextureOperation AddSigned2X;
    public static TextureOperation Subtract;
    public static TextureOperation AddSmooth;
    public static TextureOperation BlendDiffuseAlpha;
    public static TextureOperation BlendTextureAlpha;
    public static TextureOperation BlendFactorAlpha;
    public static TextureOperation BlendTextureAlphaPM;
    public static TextureOperation BlendCurrentAlpha;
    public static TextureOperation Premodulate;
    public static TextureOperation ModulateAlphaAddColor;
    public static TextureOperation ModulateColorAddAlpha;
    public static TextureOperation ModulateInvAlphaAddColor;
    public static TextureOperation ModulateInvColorAddAlpha;
    public static TextureOperation BumpEnvironmentMap;
    public static TextureOperation BumpEnvironmentMapLuminance;
    public static TextureOperation DotProduct3;
    public static TextureOperation MultiplyAdd;
    public static TextureOperation Lerp;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.TextureOperationCaps : Enum {
    public int value__;
    public static TextureOperationCaps Disable;
    public static TextureOperationCaps SelectArg1;
    public static TextureOperationCaps SelectArg2;
    public static TextureOperationCaps Modulate;
    public static TextureOperationCaps Modulate2X;
    public static TextureOperationCaps Modulate4X;
    public static TextureOperationCaps Add;
    public static TextureOperationCaps AddSigned;
    public static TextureOperationCaps AddSigned2X;
    public static TextureOperationCaps Subtract;
    public static TextureOperationCaps AddSmooth;
    public static TextureOperationCaps BlendDiffuseAlpha;
    public static TextureOperationCaps BlendTextureAlpha;
    public static TextureOperationCaps BlendFactorAlpha;
    public static TextureOperationCaps BlendTextureAlphaPM;
    public static TextureOperationCaps BlendCurrentAlpha;
    public static TextureOperationCaps Premodulate;
    public static TextureOperationCaps ModulateAlphaAddColor;
    public static TextureOperationCaps ModulateColorAddAlpha;
    public static TextureOperationCaps ModulateInvAlphaAddColor;
    public static TextureOperationCaps ModulateInvColorAddAlpha;
    public static TextureOperationCaps BumpEnvironmentMap;
    public static TextureOperationCaps BumpEnvironmentMapLuminance;
    public static TextureOperationCaps DotProduct3;
    public static TextureOperationCaps MultiplyAdd;
    public static TextureOperationCaps Lerp;
}
public class SharpDX.Direct3D9.TextureRequirements : ValueType {
    public int Width;
    public int Height;
    public Format Format;
    public int MipLevelCount;
}
[GuidAttribute("3e3d67f8-aa7a-405d-a857-ba01d4758426")]
public class SharpDX.Direct3D9.TextureShader : ComObject {
    public Blob Function { get; }
    public Blob ConstantBuffer { get; }
    public ConstantTableDescription Description { get; }
    public TextureShader(IntPtr nativePtr);
    public static TextureShader op_Explicit(IntPtr nativePointer);
    public Blob get_Function();
    public Blob get_ConstantBuffer();
    public ConstantTableDescription get_Description();
    internal void GetFunction(Blob& functionOut);
    internal void GetConstantBuffer(Blob& constantBufferOut);
    internal void GetDescription(ConstantTableDescription& descRef);
    internal void GetConstantDescription(EffectHandle effectHandle, ConstantDescription[] constantDescRef, Int32& countRef);
    public EffectHandle GetConstant(EffectHandle effectHandle, int index);
    public EffectHandle GetConstantByName(EffectHandle effectHandle, string nameRef);
    public EffectHandle GetConstantElement(EffectHandle effectHandle, int index);
    public void SetDefaults();
    public void SetValue(EffectHandle effectHandle, IntPtr dataRef, int bytes);
    public void SetBool(EffectHandle effectHandle, RawBool b);
    public void SetBoolArray(EffectHandle effectHandle, RawBool bRef, int count);
    public void SetInt(EffectHandle effectHandle, int n);
    public void SetIntArray(EffectHandle effectHandle, int nRef, int count);
    public void SetFloat(EffectHandle effectHandle, float f);
    public void SetFloatArray(EffectHandle effectHandle, float fRef, int count);
    public void SetVector(EffectHandle effectHandle, RawVector4 vectorRef);
    public void SetVectorArray(EffectHandle effectHandle, RawVector4 vectorRef, int count);
    public void SetMatrix(EffectHandle effectHandle, RawMatrix& matrixRef);
    public void SetMatrixArray(EffectHandle effectHandle, RawMatrix& matrixRef, int count);
    public void SetMatrixPointerArray(EffectHandle effectHandle, RawMatrix& matrixOut, int count);
    public void SetMatrixTranspose(EffectHandle effectHandle, RawMatrix& matrixRef);
    public void SetMatrixTransposeArray(EffectHandle effectHandle, RawMatrix& matrixRef, int count);
    public void SetMatrixTransposePointerArray(EffectHandle effectHandle, RawMatrix& matrixOut, int count);
}
public enum SharpDX.Direct3D9.TextureStage : Enum {
    public int value__;
    public static TextureStage ColorOperation;
    public static TextureStage ColorArg1;
    public static TextureStage ColorArg2;
    public static TextureStage AlphaOperation;
    public static TextureStage AlphaArg1;
    public static TextureStage AlphaArg2;
    public static TextureStage BumpEnvironmentMat00;
    public static TextureStage BumpEnvironmentMat01;
    public static TextureStage BumpEnvironmentMat10;
    public static TextureStage BumpEnvironmentMat11;
    public static TextureStage TexCoordIndex;
    public static TextureStage BumpEnvironmentLScale;
    public static TextureStage BumpEnvironmentLOffset;
    public static TextureStage TextureTransformFlags;
    public static TextureStage ColorArg0;
    public static TextureStage AlphaArg0;
    public static TextureStage ResultArg;
    public static TextureStage Constant;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.TextureTransform : Enum {
    public int value__;
    public static TextureTransform Disable;
    public static TextureTransform Count1;
    public static TextureTransform Count2;
    public static TextureTransform Count3;
    public static TextureTransform Count4;
    public static TextureTransform Projected;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.TextureWrapping : Enum {
    public int value__;
    public static TextureWrapping WrapCoordinate0;
    public static TextureWrapping WrapCoordinate1;
    public static TextureWrapping WrapCoordinate2;
    public static TextureWrapping WrapCoordinate3;
    public static TextureWrapping None;
}
public class SharpDX.Direct3D9.TrackDescription : ValueType {
    public TrackPriority Priority;
    public float Weight;
    public float Speed;
    public double Position;
    public RawBool Enable;
}
public enum SharpDX.Direct3D9.TrackPriority : Enum {
    public int value__;
    public static TrackPriority Low;
    public static TrackPriority High;
}
public enum SharpDX.Direct3D9.TransformState : Enum {
    public int value__;
    public static TransformState View;
    public static TransformState Projection;
    public static TransformState World;
    public static TransformState World1;
    public static TransformState World2;
    public static TransformState World3;
    public static TransformState Texture0;
    public static TransformState Texture1;
    public static TransformState Texture2;
    public static TransformState Texture3;
    public static TransformState Texture4;
    public static TransformState Texture5;
    public static TransformState Texture6;
    public static TransformState Texture7;
}
public enum SharpDX.Direct3D9.TransitionType : Enum {
    public int value__;
    public static TransitionType Linear;
    public static TransitionType EaseInEaseOut;
}
public class SharpDX.Direct3D9.TrianglePatchInfo : ValueType {
    public int StartVertexOffset;
    public int VertexCount;
    public Basis Basis;
    public Degree Degree;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.Usage : Enum {
    public int value__;
    public static Usage RenderTarget;
    public static Usage DepthStencil;
    public static Usage Dynamic;
    public static Usage NonSecure;
    public static Usage AutoGenerateMipMap;
    public static Usage DisplacementMap;
    public static Usage QueryLegacyBumpMap;
    public static Usage QuerySrgbRead;
    public static Usage QueryFilter;
    public static Usage QuerySrgbWrite;
    public static Usage QueryPostPixelShaderBlending;
    public static Usage QueryVertexTexture;
    public static Usage QueryWrapAndMip;
    public static Usage WriteOnly;
    public static Usage SoftwareProcessing;
    public static Usage DoNotClip;
    public static Usage Points;
    public static Usage RTPatches;
    public static Usage NPatches;
    public static Usage TextApi;
    public static Usage RestrictedContent;
    public static Usage RestrictSharedResource;
    public static Usage RestrictSharedResourceDriver;
    public static Usage None;
}
public enum SharpDX.Direct3D9.UVAtlasQuality : Enum {
    public int value__;
    public static UVAtlasQuality WrapU;
    public static UVAtlasQuality WrapV;
    public static UVAtlasQuality WrapUv;
}
public class SharpDX.Direct3D9.VCache : ValueType {
    public int Pattern;
    public int OptMethod;
    public int CacheSize;
    public int MagicNumber;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.VertexBlend : Enum {
    public int value__;
    public static VertexBlend Disable;
    public static VertexBlend Weights1;
    public static VertexBlend Weights2;
    public static VertexBlend Weights3;
    public static VertexBlend Tweening;
    public static VertexBlend Weights0;
}
[GuidAttribute("B64BB1B5-FD70-4df6-BF91-19D0A12455E3")]
public class SharpDX.Direct3D9.VertexBuffer : Resource {
    public VertexBufferDescription Description { get; }
    public VertexBuffer(IntPtr nativePtr);
    public VertexBuffer(Device device, int sizeInBytes, Usage usage, VertexFormat format, Pool pool);
    public VertexBuffer(Device device, int sizeInBytes, Usage usage, VertexFormat format, Pool pool, IntPtr& sharedHandle);
    public static VertexBuffer op_Explicit(IntPtr nativePointer);
    public VertexBufferDescription get_Description();
    internal void Lock_(int offsetToLock, int sizeToLock, IntPtr& bDataOut, LockFlags lockFlags);
    public void Unlock();
    internal void GetDescription(VertexBufferDescription& descRef);
    public DataStream Lock(int offsetToLock, int sizeToLock, LockFlags lockFlags);
    public IntPtr LockToPointer(int offsetToLock, int sizeToLock, LockFlags lockFlags);
}
public class SharpDX.Direct3D9.VertexBufferDescription : ValueType {
    public Format Format;
    public ResourceType Type;
    public Usage Usage;
    public Pool Pool;
    public int SizeInBytes;
    public VertexFormat Fvf;
}
[GuidAttribute("DD13C59C-36FA-4098-A8FB-C7ED39DC8546")]
public class SharpDX.Direct3D9.VertexDeclaration : ComObject {
    public Device Device { get; }
    public VertexElement[] Elements { get; }
    public VertexDeclaration(IntPtr nativePtr);
    public VertexDeclaration(Device device, VertexElement[] elements);
    public static VertexDeclaration op_Explicit(IntPtr nativePointer);
    public Device get_Device();
    internal void GetDevice(Device& deviceOut);
    internal void GetDeclaration(VertexElement[] elementRef, Int32& numElementsRef);
    public VertexElement[] get_Elements();
}
public class SharpDX.Direct3D9.VertexElement : ValueType {
    public short Stream;
    public short Offset;
    public DeclarationType Type;
    public DeclarationMethod Method;
    public DeclarationUsage Usage;
    public byte UsageIndex;
    public static VertexElement VertexDeclarationEnd;
    private static VertexElement();
    public VertexElement(short stream, short offset, DeclarationType type, DeclarationMethod method, DeclarationUsage usage, byte usageIndex);
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.VertexFormat : Enum {
    public int value__;
    public static VertexFormat Reserved0;
    public static VertexFormat PositionMask;
    public static VertexFormat Position;
    public static VertexFormat PositionRhw;
    public static VertexFormat PositionBlend1;
    public static VertexFormat PositionBlend2;
    public static VertexFormat PositionBlend3;
    public static VertexFormat PositionBlend4;
    public static VertexFormat PositionBlend5;
    public static VertexFormat PositionW;
    public static VertexFormat Normal;
    public static VertexFormat PointSize;
    public static VertexFormat Diffuse;
    public static VertexFormat Specular;
    public static VertexFormat TextureCountMask;
    public static VertexFormat TextureCountShift;
    public static VertexFormat Texture0;
    public static VertexFormat Texture1;
    public static VertexFormat Texture2;
    public static VertexFormat Texture3;
    public static VertexFormat Texture4;
    public static VertexFormat Texture5;
    public static VertexFormat Texture6;
    public static VertexFormat Texture7;
    public static VertexFormat Texture8;
    public static VertexFormat LastBetaUByte4;
    public static VertexFormat LastBetaColor;
    public static VertexFormat None;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.VertexFormatCaps : Enum {
    public int value__;
    public static VertexFormatCaps TextureCoordCountMask;
    public static VertexFormatCaps DoNotStripElements;
    public static VertexFormatCaps PointSize;
}
internal enum SharpDX.Direct3D9.VertexFormatDeclaratorCount : Enum {
    public int value__;
    public static VertexFormatDeclaratorCount Max;
}
public class SharpDX.Direct3D9.VertexFormatHelper : object {
    public static VertexFormat TexCoordSize(int size, int coordIndex);
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.VertexProcessingCaps : Enum {
    public int value__;
    public static VertexProcessingCaps TextureGen;
    public static VertexProcessingCaps MaterialSource7;
    public static VertexProcessingCaps DirectionalLights;
    public static VertexProcessingCaps PositionalLights;
    public static VertexProcessingCaps LocalViewer;
    public static VertexProcessingCaps Tweening;
    public static VertexProcessingCaps TexGenSphereMap;
    public static VertexProcessingCaps NoTexGenNonLocalViewer;
}
[GuidAttribute("EFC5557E-6265-4613-8A94-43857889EB36")]
public class SharpDX.Direct3D9.VertexShader : ComObject {
    public static int MaxDynamicFlowControlDepth;
    public static int MinDynamicFlowControlDepth;
    public static int MaxTemps;
    public static int MinTemps;
    public static int MaxStaticFlowControlDepth;
    public static int MinStaticFlowControlDepth;
    private ShaderBytecode function;
    public Device Device { get; }
    public ShaderBytecode Function { get; }
    public VertexShader(IntPtr nativePtr);
    public VertexShader(Device device, ShaderBytecode function);
    public static VertexShader op_Explicit(IntPtr nativePointer);
    public Device get_Device();
    internal void GetDevice(Device& deviceOut);
    internal void GetFunction(IntPtr arg0, Int32& sizeOfDataRef);
    public ShaderBytecode get_Function();
}
public class SharpDX.Direct3D9.VertexShader20Caps : ValueType {
    public VertexShaderCaps Caps;
    public int DynamicFlowControlDepth;
    public int TempCount;
    public int StaticFlowControlDepth;
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.VertexShaderCaps : Enum {
    public int value__;
    public static VertexShaderCaps Predication;
    public static VertexShaderCaps None;
}
public class SharpDX.Direct3D9.VertexStats : ValueType {
    public int NumRenderedTriangles;
    public int NumExtraClippingTriangles;
}
public enum SharpDX.Direct3D9.VertexTextureSampler : Enum {
    public int value__;
    public static VertexTextureSampler Sampler0;
    public static VertexTextureSampler Sampler1;
    public static VertexTextureSampler Sampler2;
    public static VertexTextureSampler Sampler3;
    public static VertexTextureSampler DisplacementMapSampler;
}
public enum SharpDX.Direct3D9.VideoSubType : Enum {
    public int value__;
    public static VideoSubType Other;
    public static VideoSubType Pci;
    public static VideoSubType PciX;
    public static VideoSubType PciExpress;
    public static VideoSubType Agp;
    public static VideoSubType InsideOfChipset;
    public static VideoSubType TracksOnMotherBoardToChip;
    public static VideoSubType TracksOnMotherBoardToSocket;
    public static VideoSubType DaughterBoardConnector;
    public static VideoSubType DaughterBoardConnectorInsideOfNuae;
    public static VideoSubType NonStandard;
}
[GuidAttribute("24F416E6-1F67-4aa7-B88E-D33F6F3128A1")]
public class SharpDX.Direct3D9.Volume : ComObject {
    public Device Device { get; }
    public VolumeDescription Description { get; }
    public Volume(IntPtr nativePtr);
    public static Volume op_Explicit(IntPtr nativePointer);
    public Device get_Device();
    public VolumeDescription get_Description();
    internal void GetDevice(Device& deviceOut);
    public void SetPrivateData(Guid refguid, IntPtr dataRef, int sizeOfData, int flags);
    public void GetPrivateData(Guid refguid, IntPtr dataRef, Int32& sizeOfDataRef);
    public void FreePrivateData(Guid refguid);
    public void GetContainer(Guid riid, IntPtr containerOut);
    internal void GetDescription(VolumeDescription& descRef);
    internal void LockBox(LockedBox& lockedVolumeRef, IntPtr boxRef, LockFlags flags);
    public void UnlockBox();
    public void LoadFromMemory(PaletteEntry[] destPaletteRef, Nullable`1<Box> destBox, IntPtr srcMemoryPointer, Format srcFormat, int srcRowPitch, int srcSlicePitch, PaletteEntry[] srcPaletteRef, Box srcBox, Filter filter, RawColorBGRA colorKey);
    public static void FromFile(Volume volume, string fileName, Filter filter, int colorKey);
    public static void FromFile(Volume volume, string fileName, Filter filter, int colorKey, Box sourceBox, Box destinationBox);
    public static void FromFile(Volume volume, string fileName, Filter filter, int colorKey, Box sourceBox, Box destinationBox, ImageInformation& imageInformation);
    public static void FromFile(Volume volume, string fileName, Filter filter, int colorKey, Box sourceBox, Box destinationBox, PaletteEntry[] palette, ImageInformation& imageInformation);
    public static void FromFileInMemory(Volume volume, Byte[] memory, Filter filter, int colorKey);
    public static void FromFileInMemory(Volume volume, Byte[] memory, Filter filter, int colorKey, Box sourceBox, Box destinationBox);
    public static void FromFileInMemory(Volume volume, Byte[] memory, Filter filter, int colorKey, Box sourceBox, Box destinationBox, ImageInformation& imageInformation);
    public static void FromFileInMemory(Volume volume, Byte[] memory, Filter filter, int colorKey, Box sourceBox, Box destinationBox, PaletteEntry[] palette, ImageInformation& imageInformation);
    public static void FromFileInStream(Volume volume, Stream stream, Filter filter, int colorKey);
    public static void FromFileInStream(Volume volume, Stream stream, Filter filter, int colorKey, Box sourceBox, Box destinationBox);
    public static void FromFileInStream(Volume volume, Stream stream, Filter filter, int colorKey, Box sourceBox, Box destinationBox, ImageInformation& imageInformation);
    public static void FromFileInStream(Volume volume, Stream stream, Filter filter, int colorKey, Box sourceBox, Box destinationBox, PaletteEntry[] palette, ImageInformation& imageInformation);
    private static void CreateFromFileInStream(Volume volume, Stream stream, Filter filter, int colorKey, IntPtr sourceBox, IntPtr destinationBox, PaletteEntry[] palette, IntPtr imageInformation);
    public static void FromVolume(Volume destinationVolume, Volume sourceVolume, Filter filter, int colorKey);
    public static void FromVolume(Volume destinationVolume, Volume sourceVolume, Filter filter, int colorKey, Box sourceBox, Box destinationBox);
    public static void FromVolume(Volume destinationVolume, Volume sourceVolume, Filter filter, int colorKey, Box sourceBox, Box destinationBox, PaletteEntry[] destinationPalette, PaletteEntry[] sourcePalette);
    public DataBox LockBox(LockFlags flags);
    public DataBox LockBox(Box box, LockFlags flags);
    public static void ToFile(Volume volume, string fileName, ImageFileFormat format);
    public static void ToFile(Volume volume, string fileName, ImageFileFormat format, Box box);
    public static void ToFile(Volume volume, string fileName, ImageFileFormat format, Box box, PaletteEntry[] palette);
    public static DataStream ToStream(Volume volume, ImageFileFormat format);
    public static DataStream ToStream(Volume volume, ImageFileFormat format, Box box);
    public static DataStream ToStream(Volume volume, ImageFileFormat format, Box box, PaletteEntry[] palette);
}
public class SharpDX.Direct3D9.VolumeDescription : ValueType {
    public Format Format;
    public ResourceType Type;
    public Usage Usage;
    public Pool Pool;
    public int Width;
    public int Height;
    public int Depth;
}
[GuidAttribute("2518526C-E789-4111-A7B9-47EF328D13E6")]
public class SharpDX.Direct3D9.VolumeTexture : BaseTexture {
    public VolumeTexture(IntPtr nativePtr);
    public VolumeTexture(Device device, int width, int height, int depth, int levelCount, Usage usage, Format format, Pool pool);
    public VolumeTexture(Device device, int width, int height, int depth, int levelCount, Usage usage, Format format, Pool pool, IntPtr& sharedHandle);
    public static VolumeTexture op_Explicit(IntPtr nativePointer);
    public VolumeDescription GetLevelDescription(int level);
    public Volume GetVolumeLevel(int level);
    internal void LockBox(int level, LockedBox& lockedVolumeRef, IntPtr boxRef, LockFlags flags);
    public void UnlockBox(int level);
    internal void AddDirtyBox(IntPtr dirtyBoxRef);
    public static VolumeTextureRequirements CheckRequirements(Device device, int width, int height, int depth, int mipLevelCount, Usage usage, Format format, Pool pool);
    public void Fill(Fill3DCallback callback);
    public void Fill(TextureShader shader);
    public DataBox LockBox(int level, LockFlags flags);
    public DataBox LockBox(int level, Box box, LockFlags flags);
    public void AddDirtyBox();
    public void AddDirtyBox(Box directBoxRef);
    public static VolumeTexture FromFile(Device device, string filename);
    public static VolumeTexture FromFile(Device device, string filename, Usage usage, Pool pool);
    public static VolumeTexture FromFile(Device device, string filename, int width, int height, int depth, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey);
    public static VolumeTexture FromFile(Device device, string filename, int width, int height, int depth, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation);
    public static VolumeTexture FromFile(Device device, string filename, int width, int height, int depth, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation, PaletteEntry[]& palette);
    public static VolumeTexture FromMemory(Device device, Byte[] buffer);
    public static VolumeTexture FromMemory(Device device, Byte[] buffer, Usage usage, Pool pool);
    public static VolumeTexture FromMemory(Device device, Byte[] buffer, int width, int height, int depth, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey);
    public static VolumeTexture FromMemory(Device device, Byte[] buffer, int width, int height, int depth, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation);
    public static VolumeTexture FromMemory(Device device, Byte[] buffer, int width, int height, int depth, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation, PaletteEntry[]& palette);
    public static VolumeTexture FromStream(Device device, Stream stream);
    public static VolumeTexture FromStream(Device device, Stream stream, Usage usage, Pool pool);
    public static VolumeTexture FromStream(Device device, Stream stream, int width, int height, int depth, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey);
    public static VolumeTexture FromStream(Device device, Stream stream, int sizeBytes, int width, int height, int depth, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey);
    public static VolumeTexture FromStream(Device device, Stream stream, int sizeBytes, int width, int height, int depth, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation);
    public static VolumeTexture FromStream(Device device, Stream stream, int sizeBytes, int width, int height, int depth, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, ImageInformation& imageInformation, PaletteEntry[]& palette);
    private static VolumeTexture CreateFromMemory(Device device, Byte[] buffer, int width, int height, int depth, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, IntPtr imageInformation, PaletteEntry[] palette);
    private static VolumeTexture CreateFromStream(Device device, Stream stream, int sizeBytes, int width, int height, int depth, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, IntPtr imageInformation, PaletteEntry[] palette);
    private static VolumeTexture CreateFromPointer(Device device, IntPtr pointer, int sizeInBytes, int width, int height, int depth, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, IntPtr imageInformation, PaletteEntry[] palette);
    private static VolumeTexture CreateFromFile(Device device, string fileName, int width, int height, int depth, int levelCount, Usage usage, Format format, Pool pool, Filter filter, Filter mipFilter, int colorKey, IntPtr imageInformation, PaletteEntry[] palette);
}
public class SharpDX.Direct3D9.VolumeTextureRequirements : ValueType {
    public int Width;
    public int Height;
    public int Depth;
    public Format Format;
    public int MipLevelCount;
}
public class SharpDX.Direct3D9.WeldEpsilons : ValueType {
    public float Position;
    public float BlendWeights;
    public float Normal;
    public float PSize;
    public float Specular;
    public float Diffuse;
    internal Single[] _Texcoord;
    public float Tangent;
    public float Binormal;
    public float TessFactor;
    public Single[] Texcoord { get; }
    public Single[] get_Texcoord();
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.WeldFlags : Enum {
    public int value__;
    public static WeldFlags WeldAll;
    public static WeldFlags WeldPartialMatches;
    public static WeldFlags DoNotRemoveVertices;
    public static WeldFlags DoNotSplit;
}
[GuidAttribute("cef08cf9-7b4f-4429-9624-2a690a933201")]
public class SharpDX.Direct3D9.XFile : ComObject {
    public XFile(IntPtr nativePtr);
    public static XFile op_Explicit(IntPtr nativePointer);
    public void CreateEnumObject(IntPtr arg0, int arg1, XFileEnumObject& arg2);
    public void CreateSaveObject(IntPtr arg0, int arg1, int arg2, XFileSaveObject& arg3);
    public void RegisterTemplates(IntPtr arg0, PointerSize arg1);
    public void RegisterEnumTemplates(XFileEnumObject arg0);
}
public class SharpDX.Direct3D9.Xfilecompressedanimationset : ValueType {
    public int CompressedBlockSize;
    public float TicksPerSec;
    public int PlaybackType;
    public int BufferLength;
}
[GuidAttribute("cef08cfd-7b4f-4429-9624-2a690a933201")]
public class SharpDX.Direct3D9.XFileData : ComObject {
    public XFileEnumObject Enum { get; }
    public Guid TypeInfo { get; }
    public RawBool IsReference { get; }
    public PointerSize Children { get; }
    public XFileData(IntPtr nativePtr);
    public static XFileData op_Explicit(IntPtr nativePointer);
    public XFileEnumObject get_Enum();
    public Guid get_TypeInfo();
    public RawBool get_IsReference();
    public PointerSize get_Children();
    internal void GetEnum(XFileEnumObject& arg0);
    public void GetName(string arg0, PointerSize& arg1);
    public void GetId(Guid arg0);
    public void Lock(PointerSize arg0, IntPtr arg1);
    public void Unlock();
    internal void GetTypeInfo(Guid& arg0);
    internal RawBool IsReference_();
    internal void GetChildren(PointerSize& arg0);
    public void GetChild(PointerSize arg0, XFileData& arg1);
}
[GuidAttribute("cef08cfc-7b4f-4429-9624-2a690a933201")]
public class SharpDX.Direct3D9.XFileEnumObject : ComObject {
    public XFile File { get; }
    public PointerSize Children { get; }
    public XFileEnumObject(IntPtr nativePtr);
    public static XFileEnumObject op_Explicit(IntPtr nativePointer);
    public XFile get_File();
    public PointerSize get_Children();
    internal void GetFile(XFile& arg0);
    internal void GetChildren(PointerSize& arg0);
    public void GetChild(PointerSize arg0, XFileData& arg1);
    public void GetDataObjectById(Guid arg0, XFileData& arg1);
    public void GetDataObjectByName(string arg0, XFileData& arg1);
}
[FlagsAttribute]
public enum SharpDX.Direct3D9.XFileFormat : Enum {
    public int value__;
    public static XFileFormat Binary;
    public static XFileFormat Text;
    public static XFileFormat Compressed;
}
[GuidAttribute("cef08cfb-7b4f-4429-9624-2a690a933201")]
public class SharpDX.Direct3D9.XFileSaveData : ComObject {
    public XFileSaveObject Save { get; }
    public Guid TypeInfo { get; }
    public XFileSaveData(IntPtr nativePtr);
    public static XFileSaveData op_Explicit(IntPtr nativePointer);
    public XFileSaveObject get_Save();
    public Guid get_TypeInfo();
    internal void GetSave(XFileSaveObject& arg0);
    public void GetName(string arg0, PointerSize& arg1);
    public void GetId(Guid arg0);
    internal void GetTypeInfo(Guid& arg0);
    public void AddDataObject(Guid arg0, string arg1, Guid arg2, PointerSize arg3, IntPtr arg4, XFileSaveData& arg5);
    public void AddDataReference(string arg0, Guid arg1);
}
[GuidAttribute("cef08cfa-7b4f-4429-9624-2a690a933201")]
public class SharpDX.Direct3D9.XFileSaveObject : ComObject {
    public XFile File { get; }
    public XFileSaveObject(IntPtr nativePtr);
    public static XFileSaveObject op_Explicit(IntPtr nativePointer);
    public XFile get_File();
    internal void GetFile(XFile& arg0);
    public void AddDataObject(Guid arg0, string arg1, Guid arg2, PointerSize arg3, IntPtr arg4, XFileSaveData& arg5);
    public void Save();
}
public enum SharpDX.Direct3D9.ZBufferType : Enum {
    public int value__;
    public static ZBufferType DontUseZBuffer;
    public static ZBufferType UseZBuffer;
    public static ZBufferType UseWBuffer;
}
internal class SharpDX.Win32Native : object {
    internal static IntPtr Create(string fileName, NativeFileAccess desiredAccess, NativeFileShare shareMode, IntPtr securityAttributes, NativeFileMode mode, NativeFileOptions flagsAndOptions, IntPtr templateFile);
    public static int PeekMessage(NativeMessage& lpMsg, IntPtr hWnd, int wMsgFilterMin, int wMsgFilterMax, int wRemoveMsg);
    public static int GetMessage(NativeMessage& lpMsg, IntPtr hWnd, int wMsgFilterMin, int wMsgFilterMax);
    public static int TranslateMessage(NativeMessage& lpMsg);
    public static int DispatchMessage(NativeMessage& lpMsg);
    public static IntPtr GetWindowLong(IntPtr hWnd, WindowLongType index);
    public static IntPtr GetFocus();
    private static IntPtr GetWindowLong32(IntPtr hwnd, WindowLongType index);
    private static IntPtr GetWindowLong64(IntPtr hwnd, WindowLongType index);
    public static IntPtr SetWindowLong(IntPtr hwnd, WindowLongType index, IntPtr wndProcPtr);
    public static IntPtr SetParent(IntPtr hWnd, IntPtr hWndParent);
    private static IntPtr SetWindowLong32(IntPtr hwnd, WindowLongType index, IntPtr wndProc);
    public static bool ShowWindow(IntPtr hWnd, bool windowVisible);
    private static bool ShowWindow(IntPtr hWnd, int mCmdShow);
    private static IntPtr SetWindowLongPtr64(IntPtr hwnd, WindowLongType index, IntPtr wndProc);
    public static IntPtr CallWindowProc(IntPtr wndProc, IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam);
    public static bool GetClientRect(IntPtr hWnd, RawRectangle& lpRect);
    public static IntPtr GetModuleHandle(string lpModuleName);
}
