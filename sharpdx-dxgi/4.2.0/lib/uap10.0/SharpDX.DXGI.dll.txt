[GuidAttribute("2411e7e1-12ac-4ccf-bd14-9798e8534dc0")]
public class SharpDX.DXGI.Adapter : DXGIObject {
    public Output[] Outputs { get; }
    public AdapterDescription Description { get; }
    public Adapter(IntPtr nativePtr);
    public Output[] get_Outputs();
    public bool IsInterfaceSupported(Type type);
    public bool IsInterfaceSupported();
    public bool IsInterfaceSupported(Int64& userModeVersion);
    public bool IsInterfaceSupported(Type type, Int64& userModeVersion);
    public Output GetOutput(int outputIndex);
    public int GetOutputCount();
    public static Adapter op_Explicit(IntPtr nativePtr);
    public AdapterDescription get_Description();
    internal Result GetOutput(int output, Output& outputOut);
    internal void GetDescription(AdapterDescription& descRef);
    internal Result CheckInterfaceSupport(Guid interfaceName, Int64& uMDVersionRef);
}
[GuidAttribute("29038f61-3839-4626-91fd-086879011a05")]
public class SharpDX.DXGI.Adapter1 : Adapter {
    public AdapterDescription1 Description1 { get; }
    public Adapter1(IntPtr nativePtr);
    public static Adapter1 op_Explicit(IntPtr nativePtr);
    public AdapterDescription1 get_Description1();
    internal void GetDescription1(AdapterDescription1& descRef);
}
[GuidAttribute("0AA1AE0A-FA0E-4B84-8644-E05FF8E5ACB5")]
public class SharpDX.DXGI.Adapter2 : Adapter1 {
    public AdapterDescription2 Description2 { get; }
    public Adapter2(IntPtr nativePtr);
    public static Adapter2 op_Explicit(IntPtr nativePtr);
    public AdapterDescription2 get_Description2();
    internal void GetDescription2(AdapterDescription2& descRef);
}
[GuidAttribute("645967A4-1392-4310-A798-8053CE3E93FD")]
public class SharpDX.DXGI.Adapter3 : Adapter2 {
    public Adapter3(IntPtr nativePtr);
    public static Adapter3 op_Explicit(IntPtr nativePtr);
    public int RegisterHardwareContentProtectionTeardownStatusEvent(IntPtr hEvent);
    public void UnregisterHardwareContentProtectionTeardownStatus(int dwCookie);
    public QueryVideoMemoryInformation QueryVideoMemoryInfo(int nodeIndex, MemorySegmentGroup memorySegmentGroup);
    public void SetVideoMemoryReservation(int nodeIndex, MemorySegmentGroup memorySegmentGroup, long reservation);
    public int RegisterVideoMemoryBudgetChangeNotificationEvent(IntPtr hEvent);
    public void UnregisterVideoMemoryBudgetChangeNotification(int dwCookie);
}
[GuidAttribute("3c8d99d1-4fbf-4181-a82c-af66bf7bd24e")]
public class SharpDX.DXGI.Adapter4 : Adapter3 {
    public AdapterDescription3 Desc3 { get; }
    public Adapter4(IntPtr nativePtr);
    public static Adapter4 op_Explicit(IntPtr nativePtr);
    public AdapterDescription3 get_Desc3();
    internal void GetDesc3(AdapterDescription3& descRef);
}
public class SharpDX.DXGI.AdapterDescription : ValueType {
    public string Description;
    public int VendorId;
    public int DeviceId;
    public int SubsystemId;
    public int Revision;
    public PointerSize DedicatedVideoMemory;
    public PointerSize DedicatedSystemMemory;
    public PointerSize SharedSystemMemory;
    public long Luid;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.DXGI.AdapterDescription1 : ValueType {
    public string Description;
    public int VendorId;
    public int DeviceId;
    public int SubsystemId;
    public int Revision;
    public PointerSize DedicatedVideoMemory;
    public PointerSize DedicatedSystemMemory;
    public PointerSize SharedSystemMemory;
    public long Luid;
    public AdapterFlags Flags;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.DXGI.AdapterDescription2 : ValueType {
    public string Description;
    public int VendorId;
    public int DeviceId;
    public int SubsystemId;
    public int Revision;
    public PointerSize DedicatedVideoMemory;
    public PointerSize DedicatedSystemMemory;
    public PointerSize SharedSystemMemory;
    public long Luid;
    public AdapterFlags Flags;
    public GraphicsPreemptionGranularity GraphicsPreemptionGranularity;
    public ComputePreemptionGranularity ComputePreemptionGranularity;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.DXGI.AdapterDescription3 : ValueType {
    public string Description;
    public int VendorId;
    public int DeviceId;
    public int SubsystemId;
    public int Revision;
    public PointerSize DedicatedVideoMemory;
    public PointerSize DedicatedSystemMemory;
    public PointerSize SharedSystemMemory;
    public long Luid;
    public AdapterFlags3 Flags;
    public GraphicsPreemptionGranularity GraphicsPreemptionGranularity;
    public ComputePreemptionGranularity ComputePreemptionGranularity;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[FlagsAttribute]
public enum SharpDX.DXGI.AdapterFlags : Enum {
    public int value__;
    public static AdapterFlags None;
    public static AdapterFlags Remote;
    public static AdapterFlags Software;
}
public enum SharpDX.DXGI.AdapterFlags3 : Enum {
    public int value__;
    public static AdapterFlags3 None;
    public static AdapterFlags3 Remote;
    public static AdapterFlags3 Software;
    public static AdapterFlags3 AcgCompatible;
    public static AdapterFlags3 SupportMonitoredFences;
    public static AdapterFlags3 SupportNonMonitoredFences;
    public static AdapterFlags3 KeyedMutexConformance;
}
public enum SharpDX.DXGI.AlphaMode : Enum {
    public int value__;
    public static AlphaMode Unspecified;
    public static AlphaMode Premultiplied;
    public static AlphaMode Straight;
    public static AlphaMode Ignore;
}
[CompilerGeneratedAttribute]
internal class SharpDX.DXGI.AssemblyDoc : object {
}
public enum SharpDX.DXGI.ColorSpaceType : Enum {
    public int value__;
    public static ColorSpaceType RgbFullG22NoneP709;
    public static ColorSpaceType RgbFullG10NoneP709;
    public static ColorSpaceType RgbStudioG22NoneP709;
    public static ColorSpaceType RgbStudioG22NoneP2020;
    public static ColorSpaceType Reserved;
    public static ColorSpaceType YcbcrFullG22NoneP709X601;
    public static ColorSpaceType YcbcrStudioG22LeftP601;
    public static ColorSpaceType YcbcrFullG22LeftP601;
    public static ColorSpaceType YcbcrStudioG22LeftP709;
    public static ColorSpaceType YcbcrFullG22LeftP709;
    public static ColorSpaceType YcbcrStudioG22LeftP2020;
    public static ColorSpaceType YcbcrFullG22LeftP2020;
    public static ColorSpaceType RgbFullG2084NoneP2020;
    public static ColorSpaceType YcbcrStudioG2084LeftP2020;
    public static ColorSpaceType RgbStudioG2084NoneP2020;
    public static ColorSpaceType YcbcrStudioG22TopleftP2020;
    public static ColorSpaceType YcbcrStudioG2084TopleftP2020;
    public static ColorSpaceType RgbFullG22NoneP2020;
    public static ColorSpaceType YcbcrStudioGhlgTopleftP2020;
    public static ColorSpaceType YcbcrFullGhlgTopleftP2020;
    public static ColorSpaceType RgbStudioG24NoneP709;
    public static ColorSpaceType RgbStudioG24NoneP2020;
    public static ColorSpaceType YcbcrStudioG24LeftP709;
    public static ColorSpaceType YcbcrStudioG24LeftP2020;
    public static ColorSpaceType YcbcrStudioG24TopleftP2020;
    public static ColorSpaceType Custom;
}
public enum SharpDX.DXGI.ComputePreemptionGranularity : Enum {
    public int value__;
    public static ComputePreemptionGranularity DmaBufferBoundary;
    public static ComputePreemptionGranularity DispatchBoundary;
    public static ComputePreemptionGranularity ThreadGroupBoundary;
    public static ComputePreemptionGranularity ThreadBoundary;
    public static ComputePreemptionGranularity InstructionBoundary;
}
public static class SharpDX.DXGI.DebugId : object {
    public static Guid All;
    public static Guid App;
    public static Guid Dx;
    public static Guid Dxgi;
    private static DebugId();
}
internal static class SharpDX.DXGI.DebugInterface : object {
    private static GetDebugInterface getDebugInterface;
    private static DebugInterface();
    public static bool TryCreateComPtr(IntPtr& comPtr);
}
[FlagsAttribute]
public enum SharpDX.DXGI.DebugRloFlags : Enum {
    public int value__;
    public static DebugRloFlags Summary;
    public static DebugRloFlags Detail;
    public static DebugRloFlags IgnoreInternal;
    public static DebugRloFlags All;
    public static DebugRloFlags None;
}
[GuidAttribute("54ec77fa-1377-44e6-8c32-88fd5f44c84c")]
public class SharpDX.DXGI.Device : DXGIObject {
    public Adapter Adapter { get; }
    public int GPUThreadPriority { get; public set; }
    public Device(IntPtr nativePtr);
    public Residency[] QueryResourceResidency(ComObject[] comObjects);
    public static Device op_Explicit(IntPtr nativePtr);
    public Adapter get_Adapter();
    public int get_GPUThreadPriority();
    public void set_GPUThreadPriority(int value);
    internal void GetAdapter(Adapter& adapterRef);
    internal void CreateSurface(SurfaceDescription& descRef, int numSurfaces, int usage, Nullable`1<SharedResource> sharedResourceRef, Surface& surfaceOut);
    internal void QueryResourceResidency(IUnknown[] resourcesOut, Residency[] residencyStatusRef, int numResources);
    internal void SetGPUThreadPriority(int priority);
    internal void GetGPUThreadPriority(Int32& priorityRef);
}
[GuidAttribute("77db970f-6276-48ba-ba28-070143b4392c")]
public class SharpDX.DXGI.Device1 : Device {
    public int MaximumFrameLatency { get; public set; }
    public Device1(IntPtr nativePtr);
    public static Device1 op_Explicit(IntPtr nativePtr);
    public int get_MaximumFrameLatency();
    public void set_MaximumFrameLatency(int value);
    internal void SetMaximumFrameLatency(int maxLatency);
    internal void GetMaximumFrameLatency(Int32& maxLatencyRef);
}
[GuidAttribute("05008617-fbfd-4051-a790-144884b4f6a9")]
public class SharpDX.DXGI.Device2 : Device1 {
    public Device2(IntPtr nativePtr);
    public static Device2 op_Explicit(IntPtr nativePtr);
    public void OfferResources(int numResources, Resource[] resourcesOut, OfferResourcePriority priority);
    public void ReclaimResources(int numResources, Resource[] resourcesOut, RawBool[] discardedRef);
    public void EnqueueSetEvent(IntPtr hEvent);
    public void OfferResources(int numResources, ComArray`1<Resource> resourcesOut, OfferResourcePriority priority);
    private void OfferResources(int numResources, IntPtr resourcesOut, OfferResourcePriority priority);
    public void ReclaimResources(int numResources, ComArray`1<Resource> resourcesOut, RawBool[] discardedRef);
    private void ReclaimResources(int numResources, IntPtr resourcesOut, IntPtr discardedRef);
}
[GuidAttribute("6007896c-3244-4afd-bf18-a6d3beda5023")]
public class SharpDX.DXGI.Device3 : Device2 {
    public Device3(IntPtr nativePtr);
    public static Device3 op_Explicit(IntPtr nativePtr);
    public void Trim();
}
[GuidAttribute("95B4F95F-D8DA-4CA4-9EE6-3B76D5968A10")]
public class SharpDX.DXGI.Device4 : Device3 {
    public Device4(IntPtr nativePtr);
    public static Device4 op_Explicit(IntPtr nativePtr);
    public void OfferResources1(int numResources, Resource[] resourcesOut, OfferResourcePriority priority, int flags);
    public void ReclaimResources1(int numResources, Resource[] resourcesOut, ReclaimResourceResults[] resultsRef);
    public void OfferResources1(int numResources, ComArray`1<Resource> resourcesOut, OfferResourcePriority priority, int flags);
    private void OfferResources1(int numResources, IntPtr resourcesOut, OfferResourcePriority priority, int flags);
    public void ReclaimResources1(int numResources, ComArray`1<Resource> resourcesOut, ReclaimResourceResults[] resultsRef);
    private void ReclaimResources1(int numResources, IntPtr resourcesOut, IntPtr resultsRef);
}
[GuidAttribute("3d3e0379-f9de-4d58-bb6c-18d62992f1a6")]
public class SharpDX.DXGI.DeviceChild : DXGIObject {
    public string DebugName { get; public set; }
    public DeviceChild(IntPtr nativePtr);
    public T GetDevice();
    public string get_DebugName();
    public void set_DebugName(string value);
    public static DeviceChild op_Explicit(IntPtr nativePtr);
    public void GetDevice(Guid riid, IntPtr& deviceOut);
}
[FlagsAttribute]
public enum SharpDX.DXGI.DisplayModeEnumerationFlags : Enum {
    public int value__;
    public static DisplayModeEnumerationFlags Interlaced;
    public static DisplayModeEnumerationFlags Scaling;
    public static DisplayModeEnumerationFlags Stereo;
    public static DisplayModeEnumerationFlags DisabledStereo;
}
public enum SharpDX.DXGI.DisplayModeRotation : Enum {
    public int value__;
    public static DisplayModeRotation Unspecified;
    public static DisplayModeRotation Identity;
    public static DisplayModeRotation Rotate90;
    public static DisplayModeRotation Rotate180;
    public static DisplayModeRotation Rotate270;
}
public enum SharpDX.DXGI.DisplayModeScaling : Enum {
    public int value__;
    public static DisplayModeScaling Unspecified;
    public static DisplayModeScaling Centered;
    public static DisplayModeScaling Stretched;
}
public enum SharpDX.DXGI.DisplayModeScanlineOrder : Enum {
    public int value__;
    public static DisplayModeScanlineOrder Unspecified;
    public static DisplayModeScanlineOrder Progressive;
    public static DisplayModeScanlineOrder UpperFieldFirst;
    public static DisplayModeScanlineOrder LowerFieldFirst;
}
internal static class SharpDX.DXGI.DXGI : object {
    public static int CreateFactoryDebug;
    public static void CreateDXGIFactory1(Guid riid, IntPtr& factoryOut);
    private static int CreateDXGIFactory1_(Void* param0, Void* param1);
    public static void CreateDXGIFactory2(int flags, Guid riid, IntPtr& factoryOut);
    private static int CreateDXGIFactory2_(int param0, Void* param1, Void* param2);
}
[GuidAttribute("119E7452-DE9E-40fe-8806-88F90C12B441")]
public class SharpDX.DXGI.DXGIDebug : ComObject {
    public DXGIDebug(IntPtr nativePtr);
    public static DXGIDebug TryCreate();
    public static DXGIDebug op_Explicit(IntPtr nativePtr);
    public void ReportLiveObjects(Guid apiid, DebugRloFlags flags);
}
[GuidAttribute("c5a05f0c-16f2-4adf-9f4d-a8c4d58ac550")]
public class SharpDX.DXGI.DXGIDebug1 : DXGIDebug {
    public RawBool IsLeakTrackingEnabledForThread { get; }
    public DXGIDebug1(IntPtr nativePtr);
    public static DXGIDebug1 TryCreate();
    public static DXGIDebug1 op_Explicit(IntPtr nativePtr);
    public RawBool get_IsLeakTrackingEnabledForThread();
    public void EnableLeakTrackingForThread();
    public void DisableLeakTrackingForThread();
    internal RawBool IsLeakTrackingEnabledForThread_();
}
[GuidAttribute("aec22fb8-76f3-4639-9be0-28eb43a67a2e")]
public class SharpDX.DXGI.DXGIObject : ComObject {
    public DXGIObject(IntPtr nativePtr);
    public T GetParent();
    public static DXGIObject op_Explicit(IntPtr nativePtr);
    public void SetPrivateData(Guid name, int dataSize, IntPtr dataRef);
    public void SetPrivateDataInterface(Guid name, IUnknown unknownRef);
    public Result GetPrivateData(Guid name, Int32& dataSizeRef, IntPtr dataRef);
    public void GetParent(Guid riid, IntPtr& parentOut);
}
public enum SharpDX.DXGI.DXGIStatus : Enum {
    public int value__;
    public static DXGIStatus Occluded;
    public static DXGIStatus Clipped;
    public static DXGIStatus NoRedirection;
    public static DXGIStatus NoDesktopAccess;
    public static DXGIStatus GraphicsVidpnSourceInUse;
    public static DXGIStatus ModeChanged;
    public static DXGIStatus ModeChangeInProgress;
    public static DXGIStatus Unoccluded;
    public static DXGIStatus DdaWasStillDrawing;
    public static DXGIStatus PresentRequired;
}
[GuidAttribute("7b7166ec-21c7-44ae-b21a-c9ae321ae369")]
public class SharpDX.DXGI.Factory : DXGIObject {
    public Adapter[] Adapters { get; }
    public Factory(IntPtr nativePtr);
    public Adapter GetAdapter(int index);
    public Adapter[] get_Adapters();
    public int GetAdapterCount();
    public static Factory op_Explicit(IntPtr nativePtr);
    internal Result GetAdapter(int adapter, Adapter& adapterOut);
    public void MakeWindowAssociation(IntPtr windowHandle, WindowAssociationFlags flags);
    public IntPtr GetWindowAssociation();
    internal void CreateSwapChain(IUnknown deviceRef, SwapChainDescription& descRef, SwapChain swapChainOut);
    public Adapter CreateSoftwareAdapter(IntPtr module);
}
[GuidAttribute("770aae78-f26f-4dba-a829-253c83d1b387")]
public class SharpDX.DXGI.Factory1 : Factory {
    public Adapter1[] Adapters1 { get; }
    public RawBool IsCurrent { get; }
    public Factory1(IntPtr nativePtr);
    public Adapter1 GetAdapter1(int index);
    public Adapter1[] get_Adapters1();
    public int GetAdapterCount1();
    public static Factory1 op_Explicit(IntPtr nativePtr);
    public RawBool get_IsCurrent();
    internal Result GetAdapter1(int adapter, Adapter1& adapterOut);
    internal RawBool IsCurrent_();
}
[GuidAttribute("50c83a1c-e072-4c48-87b0-3630fa36a6d0")]
public class SharpDX.DXGI.Factory2 : Factory1 {
    public RawBool IsWindowedStereoEnabled { get; }
    public Factory2(bool debug);
    public Factory2(IntPtr nativePtr);
    public static Factory2 op_Explicit(IntPtr nativePtr);
    public RawBool get_IsWindowedStereoEnabled();
    internal RawBool IsWindowedStereoEnabled_();
    internal void CreateSwapChainForHwnd(IUnknown deviceRef, IntPtr hWnd, SwapChainDescription1& descRef, Nullable`1<SwapChainFullScreenDescription> fullscreenDescRef, Output restrictToOutputRef, SwapChain1 swapChainOut);
    internal void CreateSwapChainForCoreWindow(IUnknown deviceRef, IUnknown windowRef, SwapChainDescription1& descRef, Output restrictToOutputRef, SwapChain1 swapChainOut);
    public void GetSharedResourceAdapterLuid(IntPtr hResource, Int64& luidRef);
    public void RegisterStereoStatusWindow(IntPtr windowHandle, int wMsg, Int32& dwCookieRef);
    public void RegisterStereoStatusEvent(IntPtr hEvent, Int32& dwCookieRef);
    public void UnregisterStereoStatus(int dwCookie);
    public void RegisterOcclusionStatusWindow(IntPtr windowHandle, int wMsg, Int32& dwCookieRef);
    public void RegisterOcclusionStatusEvent(IntPtr hEvent, Int32& dwCookieRef);
    public void UnregisterOcclusionStatus(int dwCookie);
    internal void CreateSwapChainForComposition(IUnknown deviceRef, SwapChainDescription1& descRef, Output restrictToOutputRef, SwapChain1 swapChainOut);
}
[GuidAttribute("25483823-cd46-4c7d-86ca-47aa95b837bd")]
public class SharpDX.DXGI.Factory3 : Factory2 {
    public int CreationFlags { get; }
    public Factory3(IntPtr nativePtr);
    public static Factory3 op_Explicit(IntPtr nativePtr);
    public int get_CreationFlags();
    internal int GetCreationFlags();
}
[GuidAttribute("1bc6ea02-ef36-464f-bf0c-21ca39e5168a")]
public class SharpDX.DXGI.Factory4 : Factory3 {
    public Factory4(IntPtr nativePtr);
    public Adapter GetWarpAdapter();
    public Adapter GetAdapterByLuid(long adapterLuid);
    public static Factory4 op_Explicit(IntPtr nativePtr);
    private void EnumAdapterByLuid(long adapterLuid, Guid riid, IntPtr& vAdapterOut);
    private void EnumWarpAdapter(Guid riid, IntPtr& vAdapterOut);
}
[GuidAttribute("7632e1f5-ee65-4dca-87fd-84cd75f8838d")]
public class SharpDX.DXGI.Factory5 : Factory4 {
    public Factory5(IntPtr nativePtr);
    public static Factory5 op_Explicit(IntPtr nativePtr);
    public void CheckFeatureSupport(Feature feature, IntPtr featureSupportDataRef, int featureSupportDataSize);
}
public enum SharpDX.DXGI.Feature : Enum {
    public int value__;
    public static Feature PresentAllowTearing;
}
public enum SharpDX.DXGI.Format : Enum {
    public int value__;
    public static Format Unknown;
    public static Format R32G32B32A32_Typeless;
    public static Format R32G32B32A32_Float;
    public static Format R32G32B32A32_UInt;
    public static Format R32G32B32A32_SInt;
    public static Format R32G32B32_Typeless;
    public static Format R32G32B32_Float;
    public static Format R32G32B32_UInt;
    public static Format R32G32B32_SInt;
    public static Format R16G16B16A16_Typeless;
    public static Format R16G16B16A16_Float;
    public static Format R16G16B16A16_UNorm;
    public static Format R16G16B16A16_UInt;
    public static Format R16G16B16A16_SNorm;
    public static Format R16G16B16A16_SInt;
    public static Format R32G32_Typeless;
    public static Format R32G32_Float;
    public static Format R32G32_UInt;
    public static Format R32G32_SInt;
    public static Format R32G8X24_Typeless;
    public static Format D32_Float_S8X24_UInt;
    public static Format R32_Float_X8X24_Typeless;
    public static Format X32_Typeless_G8X24_UInt;
    public static Format R10G10B10A2_Typeless;
    public static Format R10G10B10A2_UNorm;
    public static Format R10G10B10A2_UInt;
    public static Format R11G11B10_Float;
    public static Format R8G8B8A8_Typeless;
    public static Format R8G8B8A8_UNorm;
    public static Format R8G8B8A8_UNorm_SRgb;
    public static Format R8G8B8A8_UInt;
    public static Format R8G8B8A8_SNorm;
    public static Format R8G8B8A8_SInt;
    public static Format R16G16_Typeless;
    public static Format R16G16_Float;
    public static Format R16G16_UNorm;
    public static Format R16G16_UInt;
    public static Format R16G16_SNorm;
    public static Format R16G16_SInt;
    public static Format R32_Typeless;
    public static Format D32_Float;
    public static Format R32_Float;
    public static Format R32_UInt;
    public static Format R32_SInt;
    public static Format R24G8_Typeless;
    public static Format D24_UNorm_S8_UInt;
    public static Format R24_UNorm_X8_Typeless;
    public static Format X24_Typeless_G8_UInt;
    public static Format R8G8_Typeless;
    public static Format R8G8_UNorm;
    public static Format R8G8_UInt;
    public static Format R8G8_SNorm;
    public static Format R8G8_SInt;
    public static Format R16_Typeless;
    public static Format R16_Float;
    public static Format D16_UNorm;
    public static Format R16_UNorm;
    public static Format R16_UInt;
    public static Format R16_SNorm;
    public static Format R16_SInt;
    public static Format R8_Typeless;
    public static Format R8_UNorm;
    public static Format R8_UInt;
    public static Format R8_SNorm;
    public static Format R8_SInt;
    public static Format A8_UNorm;
    public static Format R1_UNorm;
    public static Format R9G9B9E5_Sharedexp;
    public static Format R8G8_B8G8_UNorm;
    public static Format G8R8_G8B8_UNorm;
    public static Format BC1_Typeless;
    public static Format BC1_UNorm;
    public static Format BC1_UNorm_SRgb;
    public static Format BC2_Typeless;
    public static Format BC2_UNorm;
    public static Format BC2_UNorm_SRgb;
    public static Format BC3_Typeless;
    public static Format BC3_UNorm;
    public static Format BC3_UNorm_SRgb;
    public static Format BC4_Typeless;
    public static Format BC4_UNorm;
    public static Format BC4_SNorm;
    public static Format BC5_Typeless;
    public static Format BC5_UNorm;
    public static Format BC5_SNorm;
    public static Format B5G6R5_UNorm;
    public static Format B5G5R5A1_UNorm;
    public static Format B8G8R8A8_UNorm;
    public static Format B8G8R8X8_UNorm;
    public static Format R10G10B10_Xr_Bias_A2_UNorm;
    public static Format B8G8R8A8_Typeless;
    public static Format B8G8R8A8_UNorm_SRgb;
    public static Format B8G8R8X8_Typeless;
    public static Format B8G8R8X8_UNorm_SRgb;
    public static Format BC6H_Typeless;
    public static Format BC6H_Uf16;
    public static Format BC6H_Sf16;
    public static Format BC7_Typeless;
    public static Format BC7_UNorm;
    public static Format BC7_UNorm_SRgb;
    public static Format AYUV;
    public static Format Y410;
    public static Format Y416;
    public static Format NV12;
    public static Format P010;
    public static Format P016;
    public static Format Opaque420;
    public static Format YUY2;
    public static Format Y210;
    public static Format Y216;
    public static Format NV11;
    public static Format AI44;
    public static Format IA44;
    public static Format P8;
    public static Format A8P8;
    public static Format B4G4R4A4_UNorm;
    public static Format P208;
    public static Format V208;
    public static Format V408;
}
[ExtensionAttribute]
public static class SharpDX.DXGI.FormatHelper : object {
    private static Int32[] sizeOfInBits;
    private static Boolean[] compressedFormats;
    private static Boolean[] srgbFormats;
    private static Boolean[] typelessFormats;
    private static FormatHelper();
    [ExtensionAttribute]
public static int SizeOfInBytes(Format format);
    [ExtensionAttribute]
public static int SizeOfInBits(Format format);
    [ExtensionAttribute]
public static bool IsValid(Format format);
    [ExtensionAttribute]
public static bool IsCompressed(Format format);
    [ExtensionAttribute]
public static bool IsPacked(Format format);
    [ExtensionAttribute]
public static bool IsVideo(Format format);
    [ExtensionAttribute]
public static bool IsSRgb(Format format);
    [ExtensionAttribute]
public static bool IsTypeless(Format format);
    [ExtensionAttribute]
public static int ComputeScanlineCount(Format format, int height);
    private static void InitFormat(IEnumerable`1<Format> formats, int bitCount);
    private static void InitDefaults(IEnumerable`1<Format> formats, Boolean[] outputArray);
}
public class SharpDX.DXGI.FrameStatistics : ValueType {
    public int PresentCount;
    public int PresentRefreshCount;
    public int SyncRefreshCount;
    public long SyncQPCTime;
    public long SyncGPUTime;
}
public class SharpDX.DXGI.GammaControl : ValueType {
    public RawColor4 Scale;
    public RawColor4 Offset;
    internal RawColor4[] _GammaCurve;
    public RawColor4[] GammaCurve { get; private set; }
    public RawColor4[] get_GammaCurve();
    private void set_GammaCurve(RawColor4[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.DXGI.GammaControlCapabilities : ValueType {
    public RawBool IsScaleAndOffsetSupported;
    public float MaximumConvertedValue;
    public float MinimumConvertedValue;
    public int ControlPointsCount;
    internal Single[] _ControlPoints;
    public Single[] ControlPoints { get; private set; }
    public Single[] get_ControlPoints();
    private void set_ControlPoints(Single[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public enum SharpDX.DXGI.GraphicsPreemptionGranularity : Enum {
    public int value__;
    public static GraphicsPreemptionGranularity DmaBufferBoundary;
    public static GraphicsPreemptionGranularity PrimitiveBoundary;
    public static GraphicsPreemptionGranularity TriangleBoundary;
    public static GraphicsPreemptionGranularity PixelBoundary;
    public static GraphicsPreemptionGranularity InstructionBoundary;
}
[FlagsAttribute]
public enum SharpDX.DXGI.HardwareCompositionSupportFlags : Enum {
    public int value__;
    public static HardwareCompositionSupportFlags FullScreen;
    public static HardwareCompositionSupportFlags Windowed;
    public static HardwareCompositionSupportFlags CursorStretched;
    public static HardwareCompositionSupportFlags None;
}
public class SharpDX.DXGI.HdrMetadataHdr10 : ValueType {
    internal Int16[] _RedPrimary;
    internal Int16[] _GreenPrimary;
    internal Int16[] _BluePrimary;
    internal Int16[] _WhitePoint;
    public int MaxMasteringLuminance;
    public int MinMasteringLuminance;
    public short MaxContentLightLevel;
    public short MaxFrameAverageLightLevel;
    public Int16[] RedPrimary { get; private set; }
    public Int16[] GreenPrimary { get; private set; }
    public Int16[] BluePrimary { get; private set; }
    public Int16[] WhitePoint { get; private set; }
    public Int16[] get_RedPrimary();
    private void set_RedPrimary(Int16[] value);
    public Int16[] get_GreenPrimary();
    private void set_GreenPrimary(Int16[] value);
    public Int16[] get_BluePrimary();
    private void set_BluePrimary(Int16[] value);
    public Int16[] get_WhitePoint();
    private void set_WhitePoint(Int16[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public enum SharpDX.DXGI.HdrMetadataType : Enum {
    public int value__;
    public static HdrMetadataType None;
    public static HdrMetadataType Hdr10;
}
[GuidAttribute("D67441C7-672A-476f-9E82-CD55B44949CE")]
public class SharpDX.DXGI.InfoQueue : ComObject {
    public InfoQueue(IntPtr nativePtr);
    public static InfoQueue TryCreate();
    public static InfoQueue op_Explicit(IntPtr nativePtr);
    public void SetMessageCountLimit(Guid producer, long messageCountLimit);
    public void ClearStoredMessages(Guid producer);
    public void GetMessage(Guid producer, long messageIndex, InformationQueueMessage[] messageRef, PointerSize& messageByteLengthRef);
    public long GetNumStoredMessagesAllowedByRetrievalFilters(Guid producer);
    public long GetNumStoredMessages(Guid producer);
    public long GetNumMessagesDiscardedByMessageCountLimit(Guid producer);
    public long GetMessageCountLimit(Guid producer);
    public long GetNumMessagesAllowedByStorageFilter(Guid producer);
    public long GetNumMessagesDeniedByStorageFilter(Guid producer);
    public void AddStorageFilterEntries(Guid producer, InfoQueueFilter& filterRef);
    public void GetStorageFilter(Guid producer, InfoQueueFilter[] filterRef, PointerSize& filterByteLengthRef);
    public void ClearStorageFilter(Guid producer);
    public void PushEmptyStorageFilter(Guid producer);
    public void PushDenyAllStorageFilter(Guid producer);
    public void PushCopyOfStorageFilter(Guid producer);
    public void PushStorageFilter(Guid producer, InfoQueueFilter& filterRef);
    public void PopStorageFilter(Guid producer);
    public int GetStorageFilterStackSize(Guid producer);
    public void AddRetrievalFilterEntries(Guid producer, InfoQueueFilter& filterRef);
    public void GetRetrievalFilter(Guid producer, InfoQueueFilter[] filterRef, PointerSize& filterByteLengthRef);
    public void ClearRetrievalFilter(Guid producer);
    public void PushEmptyRetrievalFilter(Guid producer);
    public void PushDenyAllRetrievalFilter(Guid producer);
    public void PushCopyOfRetrievalFilter(Guid producer);
    public void PushRetrievalFilter(Guid producer, InfoQueueFilter& filterRef);
    public void PopRetrievalFilter(Guid producer);
    public int GetRetrievalFilterStackSize(Guid producer);
    public void AddMessage(Guid producer, InformationQueueMessageCategory category, InformationQueueMessageSeverity severity, int id, string descriptionRef);
    public void AddApplicationMessage(InformationQueueMessageSeverity severity, string descriptionRef);
    public void SetBreakOnCategory(Guid producer, InformationQueueMessageCategory category, RawBool bEnable);
    public void SetBreakOnSeverity(Guid producer, InformationQueueMessageSeverity severity, RawBool bEnable);
    public void SetBreakOnID(Guid producer, int id, RawBool bEnable);
    public RawBool GetBreakOnCategory(Guid producer, InformationQueueMessageCategory category);
    public RawBool GetBreakOnSeverity(Guid producer, InformationQueueMessageSeverity severity);
    public RawBool GetBreakOnID(Guid producer, int id);
    public void SetMuteDebugOutput(Guid producer, RawBool bMute);
    public RawBool GetMuteDebugOutput(Guid producer);
}
public class SharpDX.DXGI.InfoQueueFilter : ValueType {
    public InfoQueueFilterDescription AllowList;
    public InfoQueueFilterDescription DenyList;
}
public class SharpDX.DXGI.InfoQueueFilterDescription : ValueType {
    public int NumCategories;
    public IntPtr PCategoryList;
    public int NumSeverities;
    public IntPtr PSeverityList;
    public int NumIDs;
    public IntPtr PIDList;
}
public class SharpDX.DXGI.InformationQueueMessage : ValueType {
    public Guid Producer;
    public InformationQueueMessageCategory Category;
    public InformationQueueMessageSeverity Severity;
    public int Id;
    public string PDescription;
    public PointerSize DescriptionByteLength;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public enum SharpDX.DXGI.InformationQueueMessageCategory : Enum {
    public int value__;
    public static InformationQueueMessageCategory Unknown;
    public static InformationQueueMessageCategory Miscellaneous;
    public static InformationQueueMessageCategory Initialization;
    public static InformationQueueMessageCategory Cleanup;
    public static InformationQueueMessageCategory Compilation;
    public static InformationQueueMessageCategory StateCreation;
    public static InformationQueueMessageCategory StateSetting;
    public static InformationQueueMessageCategory StateGetting;
    public static InformationQueueMessageCategory ResourceManipulation;
    public static InformationQueueMessageCategory Execution;
    public static InformationQueueMessageCategory Shader;
}
public enum SharpDX.DXGI.InformationQueueMessageSeverity : Enum {
    public int value__;
    public static InformationQueueMessageSeverity Corruption;
    public static InformationQueueMessageSeverity Error;
    public static InformationQueueMessageSeverity Warning;
    public static InformationQueueMessageSeverity Information;
    public static InformationQueueMessageSeverity Message;
}
[GuidAttribute("4C8798B7-1D88-4A0F-B59B-B93F600DE8C8")]
public class SharpDX.DXGI.ISurfaceImageSourceManagerNative : ComObject {
    public ISurfaceImageSourceManagerNative(IntPtr nativePtr);
    public static ISurfaceImageSourceManagerNative op_Explicit(IntPtr nativePtr);
    public void FlushAllSurfacesWithDevice(IUnknown device);
}
[GuidAttribute("f2e9edc1-d307-4525-9886-0fafaa44163c")]
public class SharpDX.DXGI.ISurfaceImageSourceNative : ComObject {
    unknown Device Device {public set; }
    public ISurfaceImageSourceNative(IntPtr nativePtr);
    public static ISurfaceImageSourceNative op_Explicit(IntPtr nativePtr);
    public void set_Device(Device value);
    internal void SetDevice(Device device);
    public Surface BeginDraw(RawRectangle updateRect, RawPoint& offset);
    public void EndDraw();
}
[GuidAttribute("54298223-41e1-4a41-9c08-02e8256864a1")]
public class SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D : ComObject {
    unknown IUnknown Device {public set; }
    public ISurfaceImageSourceNativeWithD2D(IntPtr nativePtr);
    public static ISurfaceImageSourceNativeWithD2D op_Explicit(IntPtr nativePtr);
    public void set_Device(IUnknown value);
    internal void SetDevice(IUnknown device);
    public void BeginDraw(RawRectangle updateRect, Guid iid, IntPtr& updateObject, RawPoint& offset);
    public void EndDraw();
    public void SuspendDraw();
    public void ResumeDraw();
}
[GuidAttribute("43bebd4e-add5-4035-8f85-5608d08e9dc9")]
public class SharpDX.DXGI.ISwapChainBackgroundPanelNative : ComObject {
    unknown SwapChain SwapChain {public set; }
    public ISwapChainBackgroundPanelNative(IntPtr nativePtr);
    public static ISwapChainBackgroundPanelNative op_Explicit(IntPtr nativePtr);
    public void set_SwapChain(SwapChain value);
    internal void SetSwapChain(SwapChain swapChain);
}
[GuidAttribute("F92F19D2-3ADE-45A6-A20C-F6F1EA90554B")]
public class SharpDX.DXGI.ISwapChainPanelNative : ComObject {
    unknown SwapChain SwapChain {public set; }
    public ISwapChainPanelNative(IntPtr nativePtr);
    public static ISwapChainPanelNative op_Explicit(IntPtr nativePtr);
    public void set_SwapChain(SwapChain value);
    internal void SetSwapChain(SwapChain swapChain);
}
[GuidAttribute("D5A2F60C-37B2-44A2-937B-8D8EB9726821")]
public class SharpDX.DXGI.ISwapChainPanelNative2 : ISwapChainPanelNative {
    unknown IntPtr SwapChainHandle {public set; }
    public ISwapChainPanelNative2(IntPtr nativePtr);
    public static ISwapChainPanelNative2 op_Explicit(IntPtr nativePtr);
    public void set_SwapChainHandle(IntPtr value);
    internal void SetSwapChainHandle(IntPtr swapChainHandle);
}
[GuidAttribute("e9550983-360b-4f53-b391-afd695078691")]
public class SharpDX.DXGI.IVirtualSurfaceImageSourceNative : ISurfaceImageSourceNative {
    private IVirtualSurfaceUpdatesCallbackNative callback;
    private EventHandler`1<EventArgs> updatesNeeded;
    public RawRectangle[] UpdateRectangles { get; }
    public RawRectangle VisibleBounds { get; }
    public IVirtualSurfaceImageSourceNative(IntPtr nativePtr);
    public RawRectangle[] get_UpdateRectangles();
    public void add_UpdatesNeeded(EventHandler`1<EventArgs> value);
    public void remove_UpdatesNeeded(EventHandler`1<EventArgs> value);
    private void OnUpdatesNeeded();
    public static IVirtualSurfaceImageSourceNative op_Explicit(IntPtr nativePtr);
    public RawRectangle get_VisibleBounds();
    public void Invalidate(RawRectangle updateRect);
    internal int GetUpdateRectCount();
    internal void GetUpdateRects(RawRectangle[] updates, int count);
    internal void GetVisibleBounds(RawRectangle& bounds);
    internal void RegisterForUpdatesNeeded(IVirtualSurfaceUpdatesCallbackNative callback);
    public void Resize(int newWidth, int newHeight);
}
[GuidAttribute("dbf2e947-8e6c-4254-9eee-7738f71386c9")]
[ShadowAttribute("SharpDX.DXGI.VirtualSurfaceUpdatesCallbackNativeShadow")]
internal interface SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNative {
    public abstract virtual void UpdatesNeeded();
}
[GuidAttribute("dbf2e947-8e6c-4254-9eee-7738f71386c9")]
internal class SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNativeNative : ComObject {
    public IVirtualSurfaceUpdatesCallbackNativeNative(IntPtr nativePtr);
    public sealed virtual void UpdatesNeeded();
    public static IVirtualSurfaceUpdatesCallbackNativeNative op_Explicit(IntPtr nativePtr);
    internal void UpdatesNeeded_();
}
public class SharpDX.DXGI.JpegAcHuffmanTable : ValueType {
    internal Byte[] _CodeCounts;
    internal Byte[] _CodeValues;
    public Byte[] CodeCounts { get; private set; }
    public Byte[] CodeValues { get; private set; }
    public Byte[] get_CodeCounts();
    private void set_CodeCounts(Byte[] value);
    public Byte[] get_CodeValues();
    private void set_CodeValues(Byte[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.DXGI.JpegDeviceContextHuffmanTable : ValueType {
    internal Byte[] _CodeCounts;
    internal Byte[] _CodeValues;
    public Byte[] CodeCounts { get; private set; }
    public Byte[] CodeValues { get; private set; }
    public Byte[] get_CodeCounts();
    private void set_CodeCounts(Byte[] value);
    public Byte[] get_CodeValues();
    private void set_CodeValues(Byte[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.DXGI.JpegQuantizationTable : ValueType {
    internal Byte[] _Elements;
    public Byte[] Elements { get; private set; }
    public Byte[] get_Elements();
    private void set_Elements(Byte[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
internal static class SharpDX.DXGI.Kernel32 : object {
    public static IntPtr LoadLibraryEx(string lpFileName, IntPtr hReservedNull, LoadLibraryFlags dwFlags);
    public static IntPtr GetModuleHandle(string lpModuleName);
    public static IntPtr GetProcAddress(IntPtr hModule, string procName);
}
[GuidAttribute("9d8e1289-d7b3-465f-8126-250e349af85d")]
public class SharpDX.DXGI.KeyedMutex : DeviceChild {
    public KeyedMutex(IntPtr nativePtr);
    public static KeyedMutex op_Explicit(IntPtr nativePtr);
    public Result Acquire(long key, int dwMilliseconds);
    public void Release(long key);
}
[FlagsAttribute]
public enum SharpDX.DXGI.MapFlags : Enum {
    public int value__;
    public static MapFlags Read;
    public static MapFlags Write;
    public static MapFlags Discard;
}
internal class SharpDX.DXGI.MappedRectangle : ValueType {
    public int Pitch;
    public IntPtr PBits;
}
public enum SharpDX.DXGI.MemorySegmentGroup : Enum {
    public int value__;
    public static MemorySegmentGroup Local;
    public static MemorySegmentGroup NonLocal;
}
public class SharpDX.DXGI.ModeDescription : ValueType {
    public int Width;
    public int Height;
    public Rational RefreshRate;
    public Format Format;
    public DisplayModeScanlineOrder ScanlineOrdering;
    public DisplayModeScaling Scaling;
    public ModeDescription(int width, int height, Rational refreshRate, Format format);
    public ModeDescription(Format format);
}
public class SharpDX.DXGI.ModeDescription1 : ValueType {
    public int Width;
    public int Height;
    public Rational RefreshRate;
    public Format Format;
    public DisplayModeScanlineOrder ScanlineOrdering;
    public DisplayModeScaling Scaling;
    public RawBool Stereo;
}
internal class SharpDX.DXGI.ModuleInit : object {
    [TagAttribute("SharpDX.ModuleInit")]
internal static void Setup();
}
[CompilerGeneratedAttribute]
internal class SharpDX.DXGI.NamespaceDoc : object {
}
[FlagsAttribute]
public enum SharpDX.DXGI.OfferResourceFlags : Enum {
    public int value__;
    public static OfferResourceFlags AllowDecommit;
    public static OfferResourceFlags None;
}
public enum SharpDX.DXGI.OfferResourcePriority : Enum {
    public int value__;
    public static OfferResourcePriority Low;
    public static OfferResourcePriority Normal;
    public static OfferResourcePriority High;
}
[GuidAttribute("ae02eedb-c735-4690-8d52-5a8dc20213aa")]
public class SharpDX.DXGI.Output : DXGIObject {
    public OutputDescription Description { get; }
    public GammaControlCapabilities GammaControlCapabilities { get; }
    public GammaControl GammaControl { get; public set; }
    public FrameStatistics FrameStatistics { get; }
    public Output(IntPtr nativePtr);
    public void GetClosestMatchingMode(ComObject device, ModeDescription modeToMatch, ModeDescription& closestMatch);
    public ModeDescription[] GetDisplayModeList(Format format, DisplayModeEnumerationFlags flags);
    public static Output op_Explicit(IntPtr nativePtr);
    public OutputDescription get_Description();
    public GammaControlCapabilities get_GammaControlCapabilities();
    public GammaControl get_GammaControl();
    public void set_GammaControl(GammaControl value);
    public FrameStatistics get_FrameStatistics();
    internal void GetDescription(OutputDescription& descRef);
    internal void GetDisplayModeList(Format enumFormat, int flags, Int32& numModesRef, ModeDescription[] descRef);
    internal void FindClosestMatchingMode(ModeDescription& modeToMatchRef, ModeDescription& closestMatchRef, IUnknown concernedDeviceRef);
    public void WaitForVerticalBlank();
    public void TakeOwnership(IUnknown deviceRef, RawBool exclusive);
    public void ReleaseOwnership();
    internal void GetGammaControlCapabilities(GammaControlCapabilities& gammaCapsRef);
    internal void SetGammaControl(GammaControl& arrayRef);
    internal void GetGammaControl(GammaControl& arrayRef);
    public void SetDisplaySurface(Surface scanoutSurfaceRef);
    public void CopyDisplaySurfaceTo(Surface destinationRef);
    internal void GetFrameStatistics(FrameStatistics& statsRef);
}
[GuidAttribute("00cddea8-939b-4b83-a340-a685226666cc")]
public class SharpDX.DXGI.Output1 : Output {
    public Output1(IntPtr nativePtr);
    public ModeDescription1[] GetDisplayModeList1(Format enumFormat, DisplayModeEnumerationFlags flags);
    public static Output1 op_Explicit(IntPtr nativePtr);
    internal void GetDisplayModeList1(Format enumFormat, int flags, Int32& numModesRef, ModeDescription1[] descRef);
    public void FindClosestMatchingMode1(ModeDescription1& modeToMatchRef, ModeDescription1& closestMatchRef, IUnknown concernedDeviceRef);
    public void GetDisplaySurfaceData1(Resource destinationRef);
    internal IntPtr DuplicateOutput(IUnknown deviceRef);
}
[GuidAttribute("595e39d1-2724-4663-99b1-da969de28364")]
public class SharpDX.DXGI.Output2 : Output1 {
    public bool SupportsOverlays { get; }
    public Output2(IntPtr nativePtr);
    public bool get_SupportsOverlays();
    public static Output2 op_Explicit(IntPtr nativePtr);
    internal RawBool SupportsOverlays_();
}
[GuidAttribute("8a6bb301-7e7e-41F4-a8e0-5b32f7f99b18")]
public class SharpDX.DXGI.Output3 : Output2 {
    public Output3(IntPtr nativePtr);
    public static Output3 op_Explicit(IntPtr nativePtr);
    internal IntPtr CheckOverlaySupport(Format enumFormat, IUnknown concernedDeviceRef);
}
[GuidAttribute("dc7dca35-2196-414d-9F53-617884032a60")]
public class SharpDX.DXGI.Output4 : Output3 {
    public Output4(IntPtr nativePtr);
    public static Output4 op_Explicit(IntPtr nativePtr);
    public IntPtr CheckOverlayColorSpaceSupport(Format format, ColorSpaceType colorSpace, IUnknown concernedDeviceRef);
}
[GuidAttribute("80A07424-AB52-42EB-833C-0C42FD282D98")]
public class SharpDX.DXGI.Output5 : Output4 {
    public Output5(IntPtr nativePtr);
    public static Output5 op_Explicit(IntPtr nativePtr);
    internal IntPtr DuplicateOutput1(IUnknown deviceRef, int flags, int supportedFormatsCount, Format[] supportedFormatsRef);
}
[GuidAttribute("068346e8-aaec-4b84-add7-137f513f77a1")]
public class SharpDX.DXGI.Output6 : Output5 {
    public OutputDescription1 Description1 { get; }
    public Output6(IntPtr nativePtr);
    public static Output6 op_Explicit(IntPtr nativePtr);
    public OutputDescription1 get_Description1();
    internal void GetDescription1(OutputDescription1& descRef);
    public void CheckHardwareCompositionSupport(Int32& flagsRef);
}
public class SharpDX.DXGI.OutputDescription : ValueType {
    public string DeviceName;
    public RawRectangle DesktopBounds;
    public RawBool IsAttachedToDesktop;
    public DisplayModeRotation Rotation;
    public IntPtr MonitorHandle;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public class SharpDX.DXGI.OutputDescription1 : ValueType {
    public string DeviceName;
    public RawRectangle DesktopCoordinates;
    public RawBool AttachedToDesktop;
    public DisplayModeRotation Rotation;
    public IntPtr Monitor;
    public int BitsPerColor;
    public ColorSpaceType ColorSpace;
    internal Single[] _RedPrimary;
    internal Single[] _GreenPrimary;
    internal Single[] _BluePrimary;
    internal Single[] _WhitePoint;
    public float MinLuminance;
    public float MaxLuminance;
    public float MaxFullFrameLuminance;
    public Single[] RedPrimary { get; private set; }
    public Single[] GreenPrimary { get; private set; }
    public Single[] BluePrimary { get; private set; }
    public Single[] WhitePoint { get; private set; }
    public Single[] get_RedPrimary();
    private void set_RedPrimary(Single[] value);
    public Single[] get_GreenPrimary();
    private void set_GreenPrimary(Single[] value);
    public Single[] get_BluePrimary();
    private void set_BluePrimary(Single[] value);
    public Single[] get_WhitePoint();
    private void set_WhitePoint(Single[] value);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[FlagsAttribute]
public enum SharpDX.DXGI.OutputDuplicateFlags : Enum {
    public int value__;
    public static OutputDuplicateFlags CompositedUiCaptureOnly;
    public static OutputDuplicateFlags None;
}
public class SharpDX.DXGI.OutputDuplication : object {
}
[FlagsAttribute]
public enum SharpDX.DXGI.OverlayColorSpaceSupportFlags : Enum {
    public int value__;
    public static OverlayColorSpaceSupportFlags Present;
    public static OverlayColorSpaceSupportFlags None;
}
[FlagsAttribute]
public enum SharpDX.DXGI.PresentFlags : Enum {
    public int value__;
    public static PresentFlags Test;
    public static PresentFlags DoNotSequence;
    public static PresentFlags Restart;
    public static PresentFlags DoNotWait;
    public static PresentFlags StereoPreferRight;
    public static PresentFlags StereoTemporaryMono;
    public static PresentFlags RestrictToOutput;
    public static PresentFlags UseDuration;
    public static PresentFlags AllowTearing;
    public static PresentFlags None;
}
public class SharpDX.DXGI.PresentParameters : ValueType {
    public RawRectangle[] DirtyRectangles;
    public Nullable`1<RawRectangle> ScrollRectangle;
    public Nullable`1<RawPoint> ScrollOffset;
    internal int DirtyRectsCount;
    internal IntPtr PDirtyRects;
    internal IntPtr PScrollRect;
    internal IntPtr PScrollOffset;
}
public class SharpDX.DXGI.QueryVideoMemoryInformation : ValueType {
    public long Budget;
    public long CurrentUsage;
    public long AvailableForReservation;
    public long CurrentReservation;
}
public class SharpDX.DXGI.Rational : ValueType {
    public static Rational Empty;
    public int Numerator;
    public int Denominator;
    public Rational(int numerator, int denominator);
    private static Rational();
    public sealed virtual bool Equals(Rational other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Rational left, Rational right);
    public static bool op_Inequality(Rational left, Rational right);
    public virtual string ToString();
}
public enum SharpDX.DXGI.ReclaimResourceResults : Enum {
    public int value__;
    public static ReclaimResourceResults Ok;
    public static ReclaimResourceResults Discarded;
    public static ReclaimResourceResults NotCommitted;
}
public enum SharpDX.DXGI.Residency : Enum {
    public int value__;
    public static Residency FullyResident;
    public static Residency ResidentInSharedMemory;
    public static Residency EvictedToDisk;
}
[GuidAttribute("035f3ab4-482e-4e50-b41f-8a7f8bd8960b")]
public class SharpDX.DXGI.Resource : DeviceChild {
    public IntPtr SharedHandle { get; }
    public int EvictionPriority { get; public set; }
    public Resource(IntPtr nativePtr);
    public static Resource op_Explicit(IntPtr nativePtr);
    public IntPtr get_SharedHandle();
    public int get_EvictionPriority();
    public void set_EvictionPriority(int value);
    internal void GetSharedHandle(IntPtr& sharedHandleRef);
    public void GetUsage(int usageRef);
    internal void SetEvictionPriority(int evictionPriority);
    internal void GetEvictionPriority(Int32& evictionPriorityRef);
}
[GuidAttribute("30961379-4609-4a41-998e-54fe567ee0c1")]
public class SharpDX.DXGI.Resource1 : Resource {
    public Resource1(IntPtr nativePtr);
    public IntPtr CreateSharedHandle(string name, SharedResourceFlags dwAccess, Nullable`1<SecurityAttributes> attributesRef);
    public static Resource1 op_Explicit(IntPtr nativePtr);
    internal void CreateSubresourceSurface(int index, Surface2 surfaceOut);
    internal IntPtr CreateSharedHandle(Nullable`1<SecurityAttributes> attributesRef, SharedResourceFlags dwAccess, string lpName);
}
public enum SharpDX.DXGI.ResourcePriority : Enum {
    public int value__;
    public static ResourcePriority Minimum;
    public static ResourcePriority Low;
    public static ResourcePriority Normal;
    public static ResourcePriority High;
    public static ResourcePriority Maximum;
}
public class SharpDX.DXGI.ResultCode : object {
    public static ResultDescriptor InvalidCall;
    public static ResultDescriptor NotFound;
    public static ResultDescriptor MoreData;
    public static ResultDescriptor Unsupported;
    public static ResultDescriptor DeviceRemoved;
    public static ResultDescriptor DeviceHung;
    public static ResultDescriptor DeviceReset;
    public static ResultDescriptor WasStillDrawing;
    public static ResultDescriptor FrameStatisticsDisjoint;
    public static ResultDescriptor GraphicsVidpnSourceInUse;
    public static ResultDescriptor DriverInternalError;
    public static ResultDescriptor Nonexclusive;
    public static ResultDescriptor NotCurrentlyAvailable;
    public static ResultDescriptor RemoteClientDisconnected;
    public static ResultDescriptor RemoteOufOfMemory;
    public static ResultDescriptor AccessLost;
    public static ResultDescriptor WaitTimeout;
    public static ResultDescriptor SessionDisconnected;
    public static ResultDescriptor RestrictToOutputStale;
    public static ResultDescriptor CannotProtectContent;
    public static ResultDescriptor AccessDenied;
    public static ResultDescriptor NameAlreadyExists;
    public static ResultDescriptor SdkComponentMissing;
    public static ResultDescriptor NotCurrent;
    public static ResultDescriptor HwProtectionOufOfMemory;
    public static ResultDescriptor DynamicCodePolicyViolation;
    public static ResultDescriptor NonCompositedUi;
    public static ResultDescriptor ModeChangeInProgress;
    public static ResultDescriptor CacheCorrupt;
    public static ResultDescriptor CacheFull;
    public static ResultDescriptor CacheHashCollision;
    public static ResultDescriptor AlreadyExists;
    private static ResultCode();
}
public class SharpDX.DXGI.SampleDescription : ValueType {
    public int Count;
    public int Quality;
    public SampleDescription(int count, int quality);
    public virtual string ToString();
}
public enum SharpDX.DXGI.Scaling : Enum {
    public int value__;
    public static Scaling Stretch;
    public static Scaling None;
    public static Scaling AspectRatioStretch;
}
public class SharpDX.DXGI.SharedResource : ValueType {
    public IntPtr Handle;
}
[FlagsAttribute]
public enum SharpDX.DXGI.SharedResourceFlags : Enum {
    public int value__;
    public static SharedResourceFlags Read;
    public static SharedResourceFlags Write;
    public static SharedResourceFlags None;
}
[GuidAttribute("cafcb56c-6ac3-4889-bf47-9e23bbd260ec")]
public class SharpDX.DXGI.Surface : DeviceChild {
    public SurfaceDescription Description { get; }
    public Surface(IntPtr nativePtr);
    public DataRectangle Map(MapFlags flags);
    public DataRectangle Map(MapFlags flags, DataStream& dataStream);
    public static Surface FromSwapChain(SwapChain swapChain, int index);
    public static Surface op_Explicit(IntPtr nativePtr);
    public SurfaceDescription get_Description();
    internal void GetDescription(SurfaceDescription& descRef);
    internal void Map(MappedRectangle& lockedRectRef, int mapFlags);
    public void Unmap();
}
[GuidAttribute("4AE63092-6327-4c1b-80AE-BFE12EA32B86")]
public class SharpDX.DXGI.Surface1 : Surface {
    public Surface1(IntPtr nativePtr);
    public void ReleaseDC();
    public void ReleaseDC(RawRectangle dirtyRect);
    public static Surface1 op_Explicit(IntPtr nativePtr);
    public IntPtr GetDC(RawBool discard);
    internal void ReleaseDC_(Nullable`1<RawRectangle> dirtyRectRef);
}
[GuidAttribute("aba496dd-b617-4cb8-a866-bc44d7eb1fa2")]
public class SharpDX.DXGI.Surface2 : Surface1 {
    public Surface2(Resource1 resource, int index);
    public Surface2(IntPtr nativePtr);
    public static Surface2 op_Explicit(IntPtr nativePtr);
    public void GetResource(Guid riid, IntPtr& parentResourceOut, Int32& subresourceIndexRef);
}
public class SharpDX.DXGI.SurfaceDescription : ValueType {
    public int Width;
    public int Height;
    public Format Format;
    public SampleDescription SampleDescription;
}
[GuidAttribute("310d36a0-d2e7-4c0a-aa04-6a9d23b8886a")]
public class SharpDX.DXGI.SwapChain : DeviceChild {
    public FrameStatistics FrameStatistics { get; }
    public bool IsFullScreen { get; public set; }
    public SwapChainDescription Description { get; }
    public Output ContainingOutput { get; }
    public int LastPresentCount { get; }
    public SwapChain(Factory factory, ComObject device, SwapChainDescription description);
    public SwapChain(IntPtr nativePtr);
    public T GetBackBuffer(int index);
    public FrameStatistics get_FrameStatistics();
    public bool get_IsFullScreen();
    public void set_IsFullScreen(bool value);
    public Result Present(int syncInterval, PresentFlags flags);
    public static SwapChain op_Explicit(IntPtr nativePtr);
    public SwapChainDescription get_Description();
    public Output get_ContainingOutput();
    public int get_LastPresentCount();
    public Result TryPresent(int syncInterval, PresentFlags flags);
    internal void GetBuffer(int buffer, Guid riid, IntPtr& surfaceOut);
    public void SetFullscreenState(RawBool fullscreen, Output targetRef);
    public void GetFullscreenState(RawBool& fullscreenRef, Output& targetOut);
    internal void GetDescription(SwapChainDescription& descRef);
    public void ResizeBuffers(int bufferCount, int width, int height, Format newFormat, SwapChainFlags swapChainFlags);
    public void ResizeTarget(ModeDescription& newTargetParametersRef);
    internal void GetContainingOutput(Output& outputOut);
    public Result TryGetFrameStatistics(FrameStatistics& statsRef);
    internal void GetLastPresentCount(Int32& lastPresentCountRef);
}
[GuidAttribute("790a45f7-0d42-4876-983a-0a55cfe6f4aa")]
public class SharpDX.DXGI.SwapChain1 : SwapChain {
    public SwapChainDescription1 Description1 { get; }
    public SwapChainFullScreenDescription FullscreenDescription { get; }
    public IntPtr Hwnd { get; }
    public RawBool IsTemporaryMonoSupported { get; }
    public Output RestrictToOutput { get; }
    public RawColor4 BackgroundColor { get; public set; }
    public DisplayModeRotation Rotation { get; public set; }
    public SwapChain1(Factory2 factory, ComObject device, IntPtr hwnd, SwapChainDescription1& description, Nullable`1<SwapChainFullScreenDescription> fullScreenDescription, Output restrictToOutput);
    public SwapChain1(Factory2 factory, ComObject device, ComObject coreWindow, SwapChainDescription1& description, Output restrictToOutput);
    public SwapChain1(Factory2 factory, ComObject device, SwapChainDescription1& description, Output restrictToOutput);
    public SwapChain1(IntPtr nativePtr);
    public Result Present(int syncInterval, PresentFlags presentFlags, PresentParameters presentParameters);
    public static SwapChain1 op_Explicit(IntPtr nativePtr);
    public SwapChainDescription1 get_Description1();
    public SwapChainFullScreenDescription get_FullscreenDescription();
    public IntPtr get_Hwnd();
    public RawBool get_IsTemporaryMonoSupported();
    public Output get_RestrictToOutput();
    public RawColor4 get_BackgroundColor();
    public void set_BackgroundColor(RawColor4 value);
    public DisplayModeRotation get_Rotation();
    public void set_Rotation(DisplayModeRotation value);
    internal void GetDescription1(SwapChainDescription1& descRef);
    internal void GetFullscreenDescription(SwapChainFullScreenDescription& descRef);
    internal void GetHwnd(IntPtr& hwndRef);
    public void GetCoreWindow(Guid refiid, IntPtr& unkOut);
    internal Result Present1(int syncInterval, PresentFlags presentFlags, IntPtr presentParametersRef);
    internal RawBool IsTemporaryMonoSupported_();
    internal void GetRestrictToOutput(Output& restrictToOutputOut);
    internal void SetBackgroundColor(RawColor4 colorRef);
    internal void GetBackgroundColor(RawColor4& colorRef);
    internal void SetRotation(DisplayModeRotation rotation);
    internal void GetRotation(DisplayModeRotation& rotationRef);
}
[GuidAttribute("a8be2ac4-199f-4946-b331-79599fb98de7")]
public class SharpDX.DXGI.SwapChain2 : SwapChain1 {
    public Size2 SourceSize { get; public set; }
    public int MaximumFrameLatency { get; public set; }
    public IntPtr FrameLatencyWaitableObject { get; }
    public RawMatrix3x2 MatrixTransform { get; public set; }
    public SwapChain2(IntPtr nativePtr);
    public Size2 get_SourceSize();
    public void set_SourceSize(Size2 value);
    public static SwapChain2 op_Explicit(IntPtr nativePtr);
    public int get_MaximumFrameLatency();
    public void set_MaximumFrameLatency(int value);
    public IntPtr get_FrameLatencyWaitableObject();
    public RawMatrix3x2 get_MatrixTransform();
    public void set_MatrixTransform(RawMatrix3x2 value);
    internal void SetSourceSize(int width, int height);
    internal void GetSourceSize(Int32& widthRef, Int32& heightRef);
    internal void SetMaximumFrameLatency(int maxLatency);
    internal void GetMaximumFrameLatency(Int32& maxLatencyRef);
    internal IntPtr GetFrameLatencyWaitableObject();
    internal void SetMatrixTransform(RawMatrix3x2& matrixRef);
    internal void GetMatrixTransform(RawMatrix3x2& matrixRef);
}
[GuidAttribute("94d99bdb-f1f8-4ab0-b236-7da0170edab1")]
public class SharpDX.DXGI.SwapChain3 : SwapChain2 {
    public int CurrentBackBufferIndex { get; }
    unknown ColorSpaceType ColorSpace1 {public set; }
    public SwapChain3(IntPtr nativePtr);
    public static SwapChain3 op_Explicit(IntPtr nativePtr);
    public int get_CurrentBackBufferIndex();
    public void set_ColorSpace1(ColorSpaceType value);
    internal int GetCurrentBackBufferIndex();
    public SwapChainColorSpaceSupportFlags CheckColorSpaceSupport(ColorSpaceType colorSpace);
    internal void SetColorSpace1(ColorSpaceType colorSpace);
    public void ResizeBuffers1(int bufferCount, int width, int height, Format format, SwapChainFlags swapChainFlags, Int32[] creationNodeMaskRef, IUnknown[] presentQueueOut);
}
[GuidAttribute("3D585D5A-BD4A-489E-B1F4-3DBCB6452FFB")]
public class SharpDX.DXGI.SwapChain4 : SwapChain3 {
    public SwapChain4(IntPtr nativePtr);
    public static SwapChain4 op_Explicit(IntPtr nativePtr);
    public void SetHDRMetaData(HdrMetadataType type, int size, IntPtr metaDataRef);
}
[FlagsAttribute]
public enum SharpDX.DXGI.SwapChainColorSpaceSupportFlags : Enum {
    public int value__;
    public static SwapChainColorSpaceSupportFlags Present;
    public static SwapChainColorSpaceSupportFlags OverlayPresent;
    public static SwapChainColorSpaceSupportFlags None;
}
public class SharpDX.DXGI.SwapChainDescription : ValueType {
    public ModeDescription ModeDescription;
    public SampleDescription SampleDescription;
    public Usage Usage;
    public int BufferCount;
    public IntPtr OutputHandle;
    public RawBool IsWindowed;
    public SwapEffect SwapEffect;
    public SwapChainFlags Flags;
}
public class SharpDX.DXGI.SwapChainDescription1 : ValueType {
    public int Width;
    public int Height;
    public Format Format;
    public RawBool Stereo;
    public SampleDescription SampleDescription;
    public Usage Usage;
    public int BufferCount;
    public Scaling Scaling;
    public SwapEffect SwapEffect;
    public AlphaMode AlphaMode;
    public SwapChainFlags Flags;
}
[FlagsAttribute]
public enum SharpDX.DXGI.SwapChainFlags : Enum {
    public int value__;
    public static SwapChainFlags Nonprerotated;
    public static SwapChainFlags AllowModeSwitch;
    public static SwapChainFlags GdiCompatible;
    public static SwapChainFlags RestrictedContent;
    public static SwapChainFlags RestrictSharedResourceDriver;
    public static SwapChainFlags DisplayOnly;
    public static SwapChainFlags FrameLatencyWaitAbleObject;
    public static SwapChainFlags ForegroundLayer;
    public static SwapChainFlags FullScreenVideo;
    public static SwapChainFlags YuvVideo;
    public static SwapChainFlags HwProtected;
    public static SwapChainFlags AllowTearing;
    public static SwapChainFlags RestrictedToAllHolographicDisplayS;
    public static SwapChainFlags None;
}
public class SharpDX.DXGI.SwapChainFullScreenDescription : ValueType {
    public Rational RefreshRate;
    public DisplayModeScanlineOrder ScanlineOrdering;
    public DisplayModeScaling Scaling;
    public RawBool Windowed;
}
public enum SharpDX.DXGI.SwapEffect : Enum {
    public int value__;
    public static SwapEffect Discard;
    public static SwapEffect Sequential;
    public static SwapEffect FlipSequential;
    public static SwapEffect FlipDiscard;
}
[FlagsAttribute]
public enum SharpDX.DXGI.Usage : Enum {
    public int value__;
    public static Usage ShaderInput;
    public static Usage RenderTargetOutput;
    public static Usage BackBuffer;
    public static Usage Shared;
    public static Usage ReadOnly;
    public static Usage DiscardOnPresent;
    public static Usage UnorderedAccess;
}
internal class SharpDX.DXGI.VirtualSurfaceUpdatesCallbackNativeShadow : ComObjectShadow {
    private static VirtualSurfaceUpdatesCallbackNativeVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static VirtualSurfaceUpdatesCallbackNativeShadow();
    public static IntPtr ToIntPtr(IVirtualSurfaceUpdatesCallbackNative virtualSurfaceUpdatesCallbackNative);
    protected virtual CppObjectVtbl get_GetVtbl();
}
[FlagsAttribute]
public enum SharpDX.DXGI.WindowAssociationFlags : Enum {
    public int value__;
    public static WindowAssociationFlags IgnoreAll;
    public static WindowAssociationFlags IgnoreAltEnter;
    public static WindowAssociationFlags IgnorePrintScreen;
    public static WindowAssociationFlags Valid;
    public static WindowAssociationFlags None;
}
