[CompilerGeneratedAttribute]
internal class SharpDX.AssemblyDoc : object {
}
public abstract class SharpDX.CallbackBase : DisposeBase {
    private int refCount;
    [CompilerGeneratedAttribute]
private IDisposable <SharpDX.ICallbackable.Shadow>k__BackingField;
    private IDisposable SharpDX.ICallbackable.Shadow { get; private set; }
    protected virtual void Dispose(bool disposing);
    public sealed virtual int AddReference();
    public sealed virtual int Release();
    public sealed virtual Result QueryInterface(Guid& guid, IntPtr& comObject);
    [CompilerGeneratedAttribute]
private sealed virtual override IDisposable SharpDX.ICallbackable.get_Shadow();
    [CompilerGeneratedAttribute]
private sealed virtual override void SharpDX.ICallbackable.set_Shadow(IDisposable value);
}
internal static class SharpDX.Collections.EqualityComparer : object {
    public static IEqualityComparer`1<IntPtr> DefaultIntPtr;
    private static EqualityComparer();
}
public class SharpDX.ComArray : DisposeBase {
    protected ComObject[] values;
    private IntPtr nativeBuffer;
    public IntPtr NativePointer { get; }
    public int Length { get; }
    public ComArray(ComObject[] array);
    public ComArray(int size);
    public IntPtr get_NativePointer();
    public int get_Length();
    public ComObject Get(int index);
    internal void SetFromNative(int index, ComObject value);
    public void Set(int index, ComObject value);
    protected virtual void Dispose(bool disposing);
    public sealed virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class SharpDX.ComArray`1 : ComArray {
    public T Item { get; public set; }
    public ComArray`1(T[] array);
    public ComArray`1(int size);
    public T get_Item(int i);
    public void set_Item(int i, T value);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
}
[GuidAttribute("00000000-0000-0000-C000-000000000046")]
public class SharpDX.ComObject : CppObject {
    public static Action`1<string> LogMemoryLeakWarning;
    public ComObject(object iunknowObject);
    public ComObject(IntPtr nativePtr);
    private static ComObject();
    public virtual void QueryInterface(Guid guid, IntPtr& outPtr);
    public virtual IntPtr QueryInterfaceOrNull(Guid guid);
    public static bool EqualsComObject(T left, T right);
    public virtual T QueryInterface();
    internal virtual T QueryInterfaceUnsafe();
    public static T As(object comObject);
    public static T As(IntPtr iunknownPtr);
    internal static T AsUnsafe(IntPtr iunknownPtr);
    public static T QueryInterface(object comObject);
    public static T QueryInterfaceOrNull(IntPtr comPointer);
    public virtual T QueryInterfaceOrNull();
    protected void QueryInterfaceFrom(T fromObject);
    private sealed virtual override Result SharpDX.IUnknown.QueryInterface(Guid& guid, IntPtr& comObject);
    private sealed virtual override int SharpDX.IUnknown.AddReference();
    private sealed virtual override int SharpDX.IUnknown.Release();
    protected virtual void Dispose(bool disposing);
    protected virtual void NativePointerUpdating();
    protected virtual void NativePointerUpdated(IntPtr oldNativePointer);
    public static ComObject op_Explicit(IntPtr nativePtr);
}
internal abstract class SharpDX.ComObjectShadow : CppObjectShadow {
    public static Guid IID_IUnknown;
    private static ComObjectShadow();
    protected int QueryInterfaceImpl(Guid& guid, IntPtr& output);
    protected virtual int AddRefImpl();
    protected virtual int ReleaseImpl();
}
public class SharpDX.CompilationException : SharpDXException {
    public CompilationException(string message);
    public CompilationException(Result errorCode, string message);
}
public abstract class SharpDX.CompilationResultBase`1 : DisposeBase {
    [CompilerGeneratedAttribute]
private T <Bytecode>k__BackingField;
    [CompilerGeneratedAttribute]
private Result <ResultCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public T Bytecode { get; private set; }
    public Result ResultCode { get; private set; }
    public bool HasErrors { get; }
    public string Message { get; private set; }
    protected CompilationResultBase`1(T bytecode, Result resultCode, string message);
    [CompilerGeneratedAttribute]
public T get_Bytecode();
    [CompilerGeneratedAttribute]
private void set_Bytecode(T value);
    [CompilerGeneratedAttribute]
public Result get_ResultCode();
    [CompilerGeneratedAttribute]
private void set_ResultCode(Result value);
    public bool get_HasErrors();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    protected virtual void Dispose(bool disposing);
}
public static class SharpDX.Configuration : object {
    public static bool EnableObjectTracking;
    public static bool EnableReleaseOnFinalizer;
    public static bool EnableTrackingReleaseOnFinalizer;
    public static bool ThrowOnShaderCompileError;
    public static bool UseThreadStaticObjectTracking;
    private static Configuration();
}
public class SharpDX.CppObject : DisposeBase {
    protected internal Void* _nativePointer;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    public object Tag { get; public set; }
    public IntPtr NativePointer { get; public set; }
    private IDisposable SharpDX.ICallbackable.Shadow { get; private set; }
    public CppObject(IntPtr pointer);
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    public IntPtr get_NativePointer();
    public void set_NativePointer(IntPtr value);
    public static IntPtr op_Explicit(CppObject cppObject);
    protected void FromTemp(CppObject temp);
    protected void FromTemp(IntPtr temp);
    protected virtual void NativePointerUpdating();
    protected virtual void NativePointerUpdated(IntPtr oldNativePointer);
    protected virtual void Dispose(bool disposing);
    public static T FromPointer(IntPtr comObjectPtr);
    internal static T FromPointerUnsafe(IntPtr comObjectPtr);
    public static IntPtr ToCallbackPtr(ICallbackable callback);
    private sealed virtual override IDisposable SharpDX.ICallbackable.get_Shadow();
    private sealed virtual override void SharpDX.ICallbackable.set_Shadow(IDisposable value);
}
internal abstract class SharpDX.CppObjectShadow : CppObject {
    [CompilerGeneratedAttribute]
private ICallbackable <Callback>k__BackingField;
    public ICallbackable Callback { get; private set; }
    protected CppObjectVtbl GetVtbl { get; }
    [CompilerGeneratedAttribute]
public ICallbackable get_Callback();
    [CompilerGeneratedAttribute]
private void set_Callback(ICallbackable value);
    protected abstract virtual CppObjectVtbl get_GetVtbl();
    public virtual void Initialize(ICallbackable callbackInstance);
    protected virtual void Dispose(bool disposing);
    internal static T ToShadow(IntPtr thisPtr);
}
internal class SharpDX.CppObjectVtbl : object {
    private List`1<Delegate> methods;
    private IntPtr vtbl;
    public IntPtr Pointer { get; }
    public CppObjectVtbl(int numberOfCallbackMethods);
    public IntPtr get_Pointer();
    public void AddMethod(Delegate method);
}
public class SharpDX.DataBox : ValueType {
    public IntPtr DataPointer;
    public int RowPitch;
    public int SlicePitch;
    public bool IsEmpty { get; }
    public DataBox(IntPtr datapointer, int rowPitch, int slicePitch);
    public DataBox(IntPtr dataPointer);
    public bool get_IsEmpty();
}
public class SharpDX.DataBuffer : DisposeBase {
    private SByte* _buffer;
    private GCHandle _gCHandle;
    private bool _ownsBuffer;
    private int _size;
    private Blob _blob;
    public IntPtr DataPointer { get; }
    public int Size { get; }
    public DataBuffer(int sizeInBytes);
    public DataBuffer(DataPointer dataPointer);
    public DataBuffer(IntPtr userBuffer, int sizeInBytes);
    internal DataBuffer(Void* buffer, int sizeInBytes, GCHandle handle);
    internal DataBuffer(Void* buffer, int sizeInBytes, bool makeCopy);
    internal DataBuffer(Blob buffer);
    public static DataBuffer Create(T[] userBuffer, int index, bool pinBuffer);
    protected virtual void Dispose(bool disposing);
    public void Clear(byte value);
    public T Get(int positionInBytes);
    public void Get(int positionInBytes, T& value);
    public T[] GetRange(int positionInBytes, int count);
    public void GetRange(int positionInBytes, T[] buffer, int offset, int count);
    public void Set(int positionInBytes, T& value);
    public void Set(int positionInBytes, T value);
    public void Set(int positionInBytes, bool value);
    public void Set(int positionInBytes, T[] data);
    public void Set(int positionInBytes, IntPtr source, long count);
    public void Set(int positionInBytes, T[] data, int offset, int count);
    public IntPtr get_DataPointer();
    public int get_Size();
    public static DataPointer op_Implicit(DataBuffer from);
}
public class SharpDX.DataPointer : ValueType {
    public static DataPointer Zero;
    public IntPtr Pointer;
    public int Size;
    public bool IsEmpty { get; }
    public DataPointer(IntPtr pointer, int size);
    public DataPointer(Void* pointer, int size);
    private static DataPointer();
    public bool get_IsEmpty();
    public sealed virtual bool Equals(DataPointer other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public DataStream ToDataStream();
    public DataBuffer ToDataBuffer();
    public Byte[] ToArray();
    public T[] ToArray();
    public void CopyTo(T[] buffer, int offset, int count);
    public void CopyFrom(T[] buffer);
    public void CopyFrom(T[] buffer, int offset, int count);
    public static bool op_Equality(DataPointer left, DataPointer right);
    public static bool op_Inequality(DataPointer left, DataPointer right);
}
public class SharpDX.DataRectangle : ValueType {
    public IntPtr DataPointer;
    public int Pitch;
    public DataRectangle(IntPtr dataPointer, int pitch);
}
public class SharpDX.DataStream : Stream {
    private Byte* _buffer;
    private bool _canRead;
    private bool _canWrite;
    private GCHandle _gCHandle;
    private Blob _blob;
    private bool _ownsBuffer;
    private long _position;
    private long _size;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public IntPtr DataPointer { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public IntPtr PositionPointer { get; }
    public long RemainingLength { get; }
    public DataStream(Blob buffer);
    public DataStream(int sizeInBytes, bool canRead, bool canWrite);
    public DataStream(DataPointer dataPointer);
    public DataStream(IntPtr userBuffer, long sizeInBytes, bool canRead, bool canWrite);
    internal DataStream(Void* dataPointer, int sizeInBytes, bool canRead, bool canWrite, GCHandle handle);
    internal DataStream(Void* buffer, int sizeInBytes, bool canRead, bool canWrite, bool makeCopy);
    public static DataStream Create(T[] userBuffer, bool canRead, bool canWrite, int index, bool pinBuffer);
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public T Read();
    public virtual int ReadByte();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public void Read(IntPtr buffer, int offset, int count);
    public T[] ReadRange(int count);
    public int ReadRange(T[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public void Write(T value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public void Write(IntPtr buffer, int offset, int count);
    public void WriteRange(T[] data);
    public void WriteRange(IntPtr source, long count);
    public void WriteRange(T[] data, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public IntPtr get_DataPointer();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public IntPtr get_PositionPointer();
    public long get_RemainingLength();
    public static DataPointer op_Implicit(DataStream from);
}
public class SharpDX.Diagnostics.ComObjectEventArgs : EventArgs {
    public ComObject Object;
    public ComObjectEventArgs(ComObject o);
}
[CompilerGeneratedAttribute]
internal class SharpDX.Diagnostics.NamespaceDoc : object {
}
public class SharpDX.Diagnostics.ObjectReference : object {
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private WeakReference <Object>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    public DateTime CreationTime { get; private set; }
    public WeakReference Object { get; private set; }
    public string StackTrace { get; private set; }
    public bool IsAlive { get; }
    public ObjectReference(DateTime creationTime, ComObject comObject, string stackTrace);
    [CompilerGeneratedAttribute]
public DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
private void set_CreationTime(DateTime value);
    [CompilerGeneratedAttribute]
public WeakReference get_Object();
    [CompilerGeneratedAttribute]
private void set_Object(WeakReference value);
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
private void set_StackTrace(string value);
    public bool get_IsAlive();
    public virtual string ToString();
}
public static class SharpDX.Diagnostics.ObjectTracker : object {
    private static Dictionary`2<IntPtr, List`1<ObjectReference>> processGlobalObjectReferences;
    [ThreadStaticAttribute]
private static Dictionary`2<IntPtr, List`1<ObjectReference>> threadStaticObjectReferences;
    [CompilerGeneratedAttribute]
private static EventHandler`1<ComObjectEventArgs> Tracked;
    [CompilerGeneratedAttribute]
private static EventHandler`1<ComObjectEventArgs> UnTracked;
    public static Func`1<string> StackTraceProvider;
    private static Dictionary`2<IntPtr, List`1<ObjectReference>> ObjectReferences { get; }
    private static ObjectTracker();
    [CompilerGeneratedAttribute]
public static void add_Tracked(EventHandler`1<ComObjectEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_Tracked(EventHandler`1<ComObjectEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_UnTracked(EventHandler`1<ComObjectEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_UnTracked(EventHandler`1<ComObjectEventArgs> value);
    private static Dictionary`2<IntPtr, List`1<ObjectReference>> get_ObjectReferences();
    public static string GetStackTrace();
    public static void Track(ComObject comObject);
    public static List`1<ObjectReference> Find(IntPtr comObjectPtr);
    public static ObjectReference Find(ComObject comObject);
    public static void UnTrack(ComObject comObject);
    public static List`1<ObjectReference> FindActiveObjects();
    public static string ReportActiveObjects();
    private static void OnTracked(ComObject obj);
    private static void OnUnTracked(ComObject obj);
}
[GuidAttribute("8BA5FB08-5195-40e2-AC58-0D989C3A0102")]
public class SharpDX.Direct3D.Blob : ComObject {
    public IntPtr BufferPointer { get; }
    public PointerSize BufferSize { get; }
    public Blob(IntPtr nativePtr);
    public static DataPointer op_Implicit(Blob blob);
    public static Blob op_Explicit(IntPtr nativePtr);
    public IntPtr get_BufferPointer();
    public PointerSize get_BufferSize();
    internal IntPtr GetBufferPointer();
    internal PointerSize GetBufferSize();
}
public class SharpDX.Direct3D.CommonGuid : object {
    public static Guid DebugObjectName;
    private static CommonGuid();
}
[GuidAttribute("a06eb39a-50da-425b-8c31-4eecd6c270f3")]
public interface SharpDX.Direct3D.DestructionNotifier {
}
[GuidAttribute("9B7E4E00-342C-4106-A19F-4F2704F689F0")]
public class SharpDX.Direct3D.DeviceMultithread : ComObject {
    public DeviceMultithread(IntPtr nativePtr);
    public static DeviceMultithread op_Explicit(IntPtr nativePtr);
    public void Enter();
    public void Leave();
    public RawBool SetMultithreadProtected(RawBool bMTProtect);
    public RawBool GetMultithreadProtected();
}
public enum SharpDX.Direct3D.DriverType : Enum {
    public int value__;
    public static DriverType Unknown;
    public static DriverType Hardware;
    public static DriverType Reference;
    public static DriverType Null;
    public static DriverType Software;
    public static DriverType Warp;
}
public enum SharpDX.Direct3D.FeatureLevel : Enum {
    public int value__;
    public static FeatureLevel Level_9_1;
    public static FeatureLevel Level_9_2;
    public static FeatureLevel Level_9_3;
    public static FeatureLevel Level_10_0;
    public static FeatureLevel Level_10_1;
    public static FeatureLevel Level_11_0;
    public static FeatureLevel Level_11_1;
    public static FeatureLevel Level_12_0;
    public static FeatureLevel Level_12_1;
}
public enum SharpDX.Direct3D.InterpolationMode : Enum {
    public int value__;
    public static InterpolationMode Undefined;
    public static InterpolationMode Constant;
    public static InterpolationMode Linear;
    public static InterpolationMode LinearCentroid;
    public static InterpolationMode LinearNoperspective;
    public static InterpolationMode LinearNoperspectiveCentroid;
    public static InterpolationMode LinearSample;
    public static InterpolationMode LinearNoperspectiveSample;
}
public enum SharpDX.Direct3D.MinimumPrecision : Enum {
    public int value__;
    public static MinimumPrecision MinimumPrecisionDefault;
    public static MinimumPrecision MinimumPrecisionFloat16;
    public static MinimumPrecision MinimumPrecisionFloat28;
    public static MinimumPrecision MinimumPrecisionReserved;
    public static MinimumPrecision MinimumPrecisionSInt16;
    public static MinimumPrecision MinimumPrecisionUInt16;
    public static MinimumPrecision MinimumPrecisionAny16;
    public static MinimumPrecision MinimumPrecisionAny10;
}
[CompilerGeneratedAttribute]
internal class SharpDX.Direct3D.NamespaceDoc : object {
}
public enum SharpDX.Direct3D.PrimitiveTopology : Enum {
    public int value__;
    public static PrimitiveTopology Undefined;
    public static PrimitiveTopology PointList;
    public static PrimitiveTopology LineList;
    public static PrimitiveTopology LineStrip;
    public static PrimitiveTopology TriangleList;
    public static PrimitiveTopology TriangleStrip;
    public static PrimitiveTopology LineListWithAdjacency;
    public static PrimitiveTopology LineStripWithAdjacency;
    public static PrimitiveTopology TriangleListWithAdjacency;
    public static PrimitiveTopology TriangleStripWithAdjacency;
    public static PrimitiveTopology PatchListWith1ControlPoints;
    public static PrimitiveTopology PatchListWith2ControlPoints;
    public static PrimitiveTopology PatchListWith3ControlPoints;
    public static PrimitiveTopology PatchListWith4ControlPoints;
    public static PrimitiveTopology PatchListWith5ControlPoints;
    public static PrimitiveTopology PatchListWith6ControlPoints;
    public static PrimitiveTopology PatchListWith7ControlPoints;
    public static PrimitiveTopology PatchListWith8ControlPoints;
    public static PrimitiveTopology PatchListWith9ControlPoints;
    public static PrimitiveTopology PatchListWith10ControlPoints;
    public static PrimitiveTopology PatchListWith11ControlPoints;
    public static PrimitiveTopology PatchListWith12ControlPoints;
    public static PrimitiveTopology PatchListWith13ControlPoints;
    public static PrimitiveTopology PatchListWith14ControlPoints;
    public static PrimitiveTopology PatchListWith15ControlPoints;
    public static PrimitiveTopology PatchListWith16ControlPoints;
    public static PrimitiveTopology PatchListWith17ControlPoints;
    public static PrimitiveTopology PatchListWith18ControlPoints;
    public static PrimitiveTopology PatchListWith19ControlPoints;
    public static PrimitiveTopology PatchListWith20ControlPoints;
    public static PrimitiveTopology PatchListWith21ControlPoints;
    public static PrimitiveTopology PatchListWith22ControlPoints;
    public static PrimitiveTopology PatchListWith23ControlPoints;
    public static PrimitiveTopology PatchListWith24ControlPoints;
    public static PrimitiveTopology PatchListWith25ControlPoints;
    public static PrimitiveTopology PatchListWith26ControlPoints;
    public static PrimitiveTopology PatchListWith27ControlPoints;
    public static PrimitiveTopology PatchListWith28ControlPoints;
    public static PrimitiveTopology PatchListWith29ControlPoints;
    public static PrimitiveTopology PatchListWith30ControlPoints;
    public static PrimitiveTopology PatchListWith31ControlPoints;
    public static PrimitiveTopology PatchListWith32ControlPoints;
}
public class SharpDX.Direct3D.ShaderMacro : ValueType {
    public string Name;
    public string Definition;
    public ShaderMacro(string name, object definition);
    public sealed virtual bool Equals(ShaderMacro other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ShaderMacro left, ShaderMacro right);
    public static bool op_Inequality(ShaderMacro left, ShaderMacro right);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
public enum SharpDX.Direct3D.ShaderResourceViewDimension : Enum {
    public int value__;
    public static ShaderResourceViewDimension Unknown;
    public static ShaderResourceViewDimension Buffer;
    public static ShaderResourceViewDimension Texture1D;
    public static ShaderResourceViewDimension Texture1DArray;
    public static ShaderResourceViewDimension Texture2D;
    public static ShaderResourceViewDimension Texture2DArray;
    public static ShaderResourceViewDimension Texture2DMultisampled;
    public static ShaderResourceViewDimension Texture2DMultisampledArray;
    public static ShaderResourceViewDimension Texture3D;
    public static ShaderResourceViewDimension TextureCube;
    public static ShaderResourceViewDimension TextureCubeArray;
    public static ShaderResourceViewDimension ExtendedBuffer;
}
public abstract class SharpDX.DisposeBase : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Disposing;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Disposed;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public bool IsDisposed { get; private set; }
    [CompilerGeneratedAttribute]
public void add_Disposing(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Disposing(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Disposed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Disposed(EventHandler`1<EventArgs> value);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public sealed virtual void Dispose();
    private void CheckAndDispose(bool disposing);
    protected abstract virtual void Dispose(bool disposing);
}
public class SharpDX.DisposeCollector : DisposeBase {
    private List`1<object> disposables;
    public int Count { get; }
    public int get_Count();
    public void DisposeAndClear(bool disposeManagedResources);
    protected virtual void Dispose(bool disposeManagedResources);
    public T Collect(T toDispose);
    public void RemoveAndDispose(T& objectToDispose);
    public void Remove(T toDisposeArg);
}
public class SharpDX.DisposeEventArgs : EventArgs {
    public static DisposeEventArgs DisposingEventArgs;
    public static DisposeEventArgs NotDisposingEventArgs;
    public bool Disposing;
    private DisposeEventArgs(bool disposing);
    private static DisposeEventArgs();
    public static DisposeEventArgs Get(bool disposing);
}
internal class SharpDX.FunctionCallback : object {
    public IntPtr Pointer;
    public FunctionCallback(IntPtr pointer);
    public FunctionCallback(Void* pointer);
    public static IntPtr op_Explicit(FunctionCallback value);
    public static FunctionCallback op_Implicit(IntPtr value);
    public static Void* op_Implicit(FunctionCallback value);
    public static FunctionCallback op_Explicit(Void* value);
    public virtual string ToString();
    public string ToString(string format);
    public virtual int GetHashCode();
    public bool Equals(FunctionCallback other);
    public virtual bool Equals(object value);
}
public class SharpDX.GetValueFastDelegate`1 : MulticastDelegate {
    public GetValueFastDelegate`1(object object, IntPtr method);
    public virtual void Invoke(object obj, T& value);
    public virtual IAsyncResult BeginInvoke(object obj, T& value, AsyncCallback callback, object object);
    public virtual void EndInvoke(T& value, IAsyncResult result);
}
public interface SharpDX.ICallbackable {
    public IDisposable Shadow { get; public set; }
    public abstract virtual IDisposable get_Shadow();
    public abstract virtual void set_Shadow(IDisposable value);
}
[GuidAttribute("AF86E2E0-B12D-4c6a-9C5A-D7AA65101E90")]
[ShadowAttribute("SharpDX.InspectableShadow")]
public interface SharpDX.IInspectable {
}
internal class SharpDX.InspectableShadow : ComObjectShadow {
    private static InspectableProviderVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static InspectableShadow();
    public static IntPtr ToIntPtr(IInspectable callback);
    protected virtual CppObjectVtbl get_GetVtbl();
}
internal class SharpDX.Interop : object {
    public static Void* Fixed(T& data);
    public static Void* Fixed(T[] data);
    public static Void* Cast(T& data);
    public static Void* CastOut(T& data);
    public static TCAST[] CastArray(T[] arrayData);
    public static void memcpy(Void* pDest, Void* pSrc, int count);
    public static void memset(Void* pDest, byte value, int count);
    public static Void* Read(Void* pSrc, T& data);
    public static T ReadInline(Void* pSrc);
    public static void WriteInline(Void* pDest, T& data);
    public static void CopyInline(T& data, Void* pSrc);
    public static void CopyInline(Void* pDest, T& srcData);
    public static void CopyInlineOut(T& data, Void* pSrc);
    public static Void* ReadOut(Void* pSrc, T& data);
    public static Void* Read(Void* pSrc, T[] data, int offset, int count);
    public static Void* Read2D(Void* pSrc, T[0...,0...] data, int offset, int count);
    public static int SizeOf();
    public static Void* Write(Void* pDest, T& data);
    public static Void* Write(Void* pDest, T[] data, int offset, int count);
    public static Void* Write2D(Void* pDest, T[0...,0...] data, int offset, int count);
    [TagAttribute("SharpDX.ModuleInit")]
public static void ModuleInit();
}
[CompilerGeneratedAttribute]
internal class SharpDX.IO.NamespaceDoc : object {
}
public static class SharpDX.IO.NativeFile : object {
    private static string KERNEL_FILE;
    public static bool Exists(string filePath);
    public static Byte[] ReadAllBytes(string path);
    public static string ReadAllText(string path);
    public static string ReadAllText(string path, Encoding encoding, NativeFileShare sharing);
    public static DateTime GetLastWriteTime(string path);
    internal static bool ReadFile(IntPtr fileHandle, IntPtr buffer, int numberOfBytesToRead, Int32& numberOfBytesRead, IntPtr overlapped);
    internal static bool FlushFileBuffers(IntPtr hFile);
    internal static bool WriteFile(IntPtr fileHandle, IntPtr buffer, int numberOfBytesToRead, Int32& numberOfBytesRead, IntPtr overlapped);
    internal static bool SetFilePointerEx(IntPtr handle, long distanceToMove, Int64& distanceToMoveHigh, SeekOrigin seekOrigin);
    internal static bool SetEndOfFile(IntPtr handle);
    internal static bool GetFileAttributesEx(string name, int fileInfoLevel, WIN32_FILE_ATTRIBUTE_DATA& lpFileInformation);
    internal static IntPtr Create(string fileName, NativeFileAccess desiredAccess, NativeFileShare shareMode, IntPtr securityAttributes, NativeFileMode mode, NativeFileOptions flagsAndOptions, IntPtr templateFile);
    internal static bool GetFileSizeEx(IntPtr handle, Int64& fileSize);
}
[FlagsAttribute]
public enum SharpDX.IO.NativeFileAccess : Enum {
    public UInt32 value__;
    public static NativeFileAccess Read;
    public static NativeFileAccess Write;
    public static NativeFileAccess ReadWrite;
    public static NativeFileAccess Execute;
    public static NativeFileAccess All;
}
public enum SharpDX.IO.NativeFileMode : Enum {
    public UInt32 value__;
    public static NativeFileMode CreateNew;
    public static NativeFileMode Create;
    public static NativeFileMode Open;
    public static NativeFileMode OpenOrCreate;
    public static NativeFileMode Truncate;
}
[FlagsAttribute]
public enum SharpDX.IO.NativeFileOptions : Enum {
    public UInt32 value__;
    public static NativeFileOptions None;
    public static NativeFileOptions Readonly;
    public static NativeFileOptions Hidden;
    public static NativeFileOptions System;
    public static NativeFileOptions Directory;
    public static NativeFileOptions Archive;
    public static NativeFileOptions Device;
    public static NativeFileOptions Normal;
    public static NativeFileOptions Temporary;
    public static NativeFileOptions SparseFile;
    public static NativeFileOptions ReparsePoint;
    public static NativeFileOptions Compressed;
    public static NativeFileOptions Offline;
    public static NativeFileOptions NotContentIndexed;
    public static NativeFileOptions Encrypted;
    public static NativeFileOptions Write_Through;
    public static NativeFileOptions Overlapped;
    public static NativeFileOptions NoBuffering;
    public static NativeFileOptions RandomAccess;
    public static NativeFileOptions SequentialScan;
    public static NativeFileOptions DeleteOnClose;
    public static NativeFileOptions BackupSemantics;
    public static NativeFileOptions PosixSemantics;
    public static NativeFileOptions OpenReparsePoint;
    public static NativeFileOptions OpenNoRecall;
    public static NativeFileOptions FirstPipeInstance;
}
[FlagsAttribute]
public enum SharpDX.IO.NativeFileShare : Enum {
    public UInt32 value__;
    public static NativeFileShare None;
    public static NativeFileShare Read;
    public static NativeFileShare Write;
    public static NativeFileShare ReadWrite;
    public static NativeFileShare Delete;
}
public class SharpDX.IO.NativeFileStream : Stream {
    private bool canRead;
    private bool canWrite;
    private bool canSeek;
    private IntPtr handle;
    private long position;
    public IntPtr Handle { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public NativeFileStream(string fileName, NativeFileMode fileMode, NativeFileAccess access, NativeFileShare share);
    public IntPtr get_Handle();
    private static int MarshalGetLastWin32Error();
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public int Read(IntPtr buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public void Write(IntPtr buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
}
[GuidAttribute("00000000-0000-0000-C000-000000000046")]
public interface SharpDX.IUnknown {
    public abstract virtual Result QueryInterface(Guid& guid, IntPtr& comObject);
    public abstract virtual int AddReference();
    public abstract virtual int Release();
}
public class SharpDX.Mathematics.Interop.RawBool : ValueType {
    private int boolValue;
    public RawBool(bool boolValue);
    public sealed virtual bool Equals(RawBool other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(RawBool left, RawBool right);
    public static bool op_Inequality(RawBool left, RawBool right);
    public static bool op_Implicit(RawBool booleanValue);
    public static RawBool op_Implicit(bool boolValue);
    public virtual string ToString();
}
[DebuggerDisplayAttribute("X: {X}, Y: {Y}, Z: {Z}, W: {W}")]
public class SharpDX.Mathematics.Interop.RawBool4 : ValueType {
    public int X;
    public int Y;
    public int Z;
    public int W;
}
[DebuggerDisplayAttribute("X: {X}, Y: {Y}, Width: {Width}, Height: {Height}")]
public class SharpDX.Mathematics.Interop.RawBox : ValueType {
    public int X;
    public int Y;
    public int Width;
    public int Height;
    public RawBox(int x, int y, int width, int height);
}
[DebuggerDisplayAttribute("R: {R}, G: {G}, B: {B}")]
public class SharpDX.Mathematics.Interop.RawColor3 : ValueType {
    public float R;
    public float G;
    public float B;
    public RawColor3(float r, float g, float b);
}
[DebuggerDisplayAttribute("R:{R} G:{G} B:{B} A:{A}")]
public class SharpDX.Mathematics.Interop.RawColor4 : ValueType {
    public float R;
    public float G;
    public float B;
    public float A;
    public RawColor4(float r, float g, float b, float a);
}
[DebuggerDisplayAttribute("R:{R} G:{G} B:{B} A:{A}")]
public class SharpDX.Mathematics.Interop.RawColorBGRA : ValueType {
    public byte B;
    public byte G;
    public byte R;
    public byte A;
    public RawColorBGRA(byte b, byte g, byte r, byte a);
}
[DebuggerDisplayAttribute("X: {X}, Y: {Y}, Z: {Z}")]
public class SharpDX.Mathematics.Interop.RawInt3 : ValueType {
    public int X;
    public int Y;
    public int Z;
    public RawInt3(int x, int y, int z);
}
[DebuggerDisplayAttribute("X: {X}, Y: {Y}, Z: {Z}, W: {W}")]
public class SharpDX.Mathematics.Interop.RawInt4 : ValueType {
    public int X;
    public int Y;
    public int Z;
    public int W;
    public RawInt4(int x, int y, int z, int w);
}
public class SharpDX.Mathematics.Interop.RawMatrix : ValueType {
    public float M11;
    public float M12;
    public float M13;
    public float M14;
    public float M21;
    public float M22;
    public float M23;
    public float M24;
    public float M31;
    public float M32;
    public float M33;
    public float M34;
    public float M41;
    public float M42;
    public float M43;
    public float M44;
}
public class SharpDX.Mathematics.Interop.RawMatrix3x2 : ValueType {
    public float M11;
    public float M12;
    public float M21;
    public float M22;
    public float M31;
    public float M32;
    public RawMatrix3x2(float m11, float m12, float m21, float m22, float m31, float m32);
}
public class SharpDX.Mathematics.Interop.RawMatrix4x3 : ValueType {
    public float M11;
    public float M12;
    public float M13;
    public float M21;
    public float M22;
    public float M23;
    public float M31;
    public float M32;
    public float M33;
    public float M41;
    public float M42;
    public float M43;
}
public class SharpDX.Mathematics.Interop.RawMatrix5x4 : ValueType {
    public float M11;
    public float M12;
    public float M13;
    public float M14;
    public float M21;
    public float M22;
    public float M23;
    public float M24;
    public float M31;
    public float M32;
    public float M33;
    public float M34;
    public float M41;
    public float M42;
    public float M43;
    public float M44;
    public float M51;
    public float M52;
    public float M53;
    public float M54;
}
[DebuggerDisplayAttribute("Normal: {Normal}, D: {D}")]
public class SharpDX.Mathematics.Interop.RawPlane : ValueType {
    public RawVector3 Normal;
    public float D;
    public RawPlane(RawVector3 normal, float d);
}
[DebuggerDisplayAttribute("X: {X}, Y: {Y}")]
public class SharpDX.Mathematics.Interop.RawPoint : ValueType {
    public int X;
    public int Y;
    public RawPoint(int x, int y);
}
[DebuggerDisplayAttribute("X: {X}, Y: {Y}, Z: {Z}, W: {W}")]
public class SharpDX.Mathematics.Interop.RawQuaternion : ValueType {
    public float X;
    public float Y;
    public float Z;
    public float W;
    public RawQuaternion(float x, float y, float z, float w);
}
[DebuggerDisplayAttribute("Left: {Left}, Top: {Top}, Right: {Right}, Bottom: {Bottom}")]
public class SharpDX.Mathematics.Interop.RawRectangle : ValueType {
    public int Left;
    public int Top;
    public int Right;
    public int Bottom;
    public bool IsEmpty { get; }
    public RawRectangle(int left, int top, int right, int bottom);
    public bool get_IsEmpty();
}
[DebuggerDisplayAttribute("Left: {Left}, Top: {Top}, Right: {Right}, Bottom: {Bottom}")]
public class SharpDX.Mathematics.Interop.RawRectangleF : ValueType {
    public float Left;
    public float Top;
    public float Right;
    public float Bottom;
    public RawRectangleF(float left, float top, float right, float bottom);
}
[DebuggerDisplayAttribute("X: {X}, Y: {Y}")]
public class SharpDX.Mathematics.Interop.RawVector2 : ValueType {
    public float X;
    public float Y;
    public RawVector2(float x, float y);
}
[DebuggerDisplayAttribute("X: {X}, Y: {Y}, Z: {Z}")]
public class SharpDX.Mathematics.Interop.RawVector3 : ValueType {
    public float X;
    public float Y;
    public float Z;
    public RawVector3(float x, float y, float z);
}
[DebuggerDisplayAttribute("X: {X}, Y: {Y}, Z: {Z}, W: {W}")]
public class SharpDX.Mathematics.Interop.RawVector4 : ValueType {
    public float X;
    public float Y;
    public float Z;
    public float W;
    public RawVector4(float x, float y, float z, float w);
}
[DebuggerDisplayAttribute("X: {X}, Y: {Y}, Width: {Width}, Height: {Height}, MinDepth: {MinDepth}, MaxDepth: {MaxDepth}")]
public class SharpDX.Mathematics.Interop.RawViewport : ValueType {
    public int X;
    public int Y;
    public int Width;
    public int Height;
    public float MinDepth;
    public float MaxDepth;
}
[DebuggerDisplayAttribute("X: {X}, Y: {Y}, Width: {Width}, Height: {Height}, MinDepth: {MinDepth}, MaxDepth: {MaxDepth}")]
public class SharpDX.Mathematics.Interop.RawViewportF : ValueType {
    public float X;
    public float Y;
    public float Width;
    public float Height;
    public float MinDepth;
    public float MaxDepth;
}
internal class SharpDX.ModuleInit : object {
    [TagAttribute("SharpDX.ModuleInit")]
internal static void Setup();
}
public enum SharpDX.Multimedia.AudclntSharemode : Enum {
    public int value__;
    public static AudclntSharemode Shared;
    public static AudclntSharemode Exclusive;
}
public enum SharpDX.Multimedia.AudioEndpointRole : Enum {
    public int value__;
    public static AudioEndpointRole Console;
    public static AudioEndpointRole Multimedia;
    public static AudioEndpointRole Communications;
}
public enum SharpDX.Multimedia.AudioSessionState : Enum {
    public int value__;
    public static AudioSessionState AudioSessionStateInactive;
    public static AudioSessionState AudioSessionStateActive;
    public static AudioSessionState AudioSessionStateExpired;
}
public enum SharpDX.Multimedia.AudioStreamCategory : Enum {
    public int value__;
    public static AudioStreamCategory Other;
    public static AudioStreamCategory ForegroundOnlyMedia;
    public static AudioStreamCategory Communications;
    public static AudioStreamCategory Alerts;
    public static AudioStreamCategory SoundEffects;
    public static AudioStreamCategory GameEffects;
    public static AudioStreamCategory GameMedia;
    public static AudioStreamCategory GameChat;
    public static AudioStreamCategory Speech;
    public static AudioStreamCategory Movie;
    public static AudioStreamCategory Media;
}
public class SharpDX.Multimedia.FourCC : ValueType {
    public static FourCC Empty;
    private UInt32 value;
    public FourCC(string fourCC);
    public FourCC(char byte1, char byte2, char byte3, char byte4);
    public FourCC(UInt32 fourCC);
    public FourCC(int fourCC);
    private static FourCC();
    public static UInt32 op_Implicit(FourCC d);
    public static int op_Implicit(FourCC d);
    public static FourCC op_Implicit(UInt32 d);
    public static FourCC op_Implicit(int d);
    public static string op_Implicit(FourCC d);
    public static FourCC op_Implicit(string d);
    public virtual string ToString();
    public sealed virtual bool Equals(FourCC other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public static bool op_Equality(FourCC left, FourCC right);
    public static bool op_Inequality(FourCC left, FourCC right);
}
[CompilerGeneratedAttribute]
internal class SharpDX.Multimedia.NamespaceDoc : object {
}
public class SharpDX.Multimedia.RiffChunk : object {
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private FourCC <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DataPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsList>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHeader>k__BackingField;
    public Stream Stream { get; private set; }
    public FourCC Type { get; private set; }
    public UInt32 Size { get; private set; }
    public UInt32 DataPosition { get; private set; }
    public bool IsList { get; private set; }
    public bool IsHeader { get; private set; }
    public RiffChunk(Stream stream, FourCC type, UInt32 size, UInt32 dataPosition, bool isList, bool isHeader);
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
private void set_Stream(Stream value);
    [CompilerGeneratedAttribute]
public FourCC get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(FourCC value);
    [CompilerGeneratedAttribute]
public UInt32 get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_DataPosition();
    [CompilerGeneratedAttribute]
private void set_DataPosition(UInt32 value);
    [CompilerGeneratedAttribute]
public bool get_IsList();
    [CompilerGeneratedAttribute]
private void set_IsList(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsHeader();
    [CompilerGeneratedAttribute]
private void set_IsHeader(bool value);
    public Byte[] GetData();
    public T GetDataAs();
    public T[] GetDataAsArray();
    public virtual string ToString();
}
public class SharpDX.Multimedia.RiffParser : object {
    private Stream input;
    private long startPosition;
    private BinaryReader reader;
    private Stack`1<RiffChunk> chunckStack;
    private bool descendNext;
    private bool isEndOfRiff;
    private bool isErrorState;
    private RiffChunk current;
    public Stack`1<RiffChunk> ChunkStack { get; }
    public RiffChunk Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public RiffParser(Stream input);
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    private void CheckState();
    public Stack`1<RiffChunk> get_ChunkStack();
    public sealed virtual void Reset();
    public void Ascend();
    public void Descend();
    public IList`1<RiffChunk> GetAllChunks();
    public sealed virtual RiffChunk get_Current();
    public sealed virtual IEnumerator`1<RiffChunk> GetEnumerator();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class SharpDX.Multimedia.SoundStream : Stream {
    private Stream input;
    private long startPositionOfData;
    private long length;
    [CompilerGeneratedAttribute]
private UInt32[] <DecodedPacketsInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private WaveFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileFormatName>k__BackingField;
    public UInt32[] DecodedPacketsInfo { get; private set; }
    public WaveFormat Format { get; protected set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Position { get; public set; }
    private string FileFormatName { get; private set; }
    public long Length { get; }
    public SoundStream(Stream stream);
    private void Initialize(Stream stream);
    protected void ThrowInvalidFileFormat(Exception nestedException);
    [CompilerGeneratedAttribute]
public UInt32[] get_DecodedPacketsInfo();
    [CompilerGeneratedAttribute]
private void set_DecodedPacketsInfo(UInt32[] value);
    [CompilerGeneratedAttribute]
public WaveFormat get_Format();
    [CompilerGeneratedAttribute]
protected void set_Format(WaveFormat value);
    public DataStream ToDataStream();
    public static DataStream op_Implicit(SoundStream stream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    protected RiffChunk Chunk(IEnumerable`1<RiffChunk> chunks, string id);
    [CompilerGeneratedAttribute]
private string get_FileFormatName();
    [CompilerGeneratedAttribute]
private void set_FileFormatName(string value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long get_Length();
    public virtual void Write(Byte[] buffer, int offset, int count);
}
[FlagsAttribute]
public enum SharpDX.Multimedia.Speakers : Enum {
    public int value__;
    public static Speakers FrontLeft;
    public static Speakers FrontRight;
    public static Speakers FrontCenter;
    public static Speakers LowFrequency;
    public static Speakers BackLeft;
    public static Speakers BackRight;
    public static Speakers FrontLeftOfCenter;
    public static Speakers FrontRightOfCenter;
    public static Speakers BackCenter;
    public static Speakers SideLeft;
    public static Speakers SideRight;
    public static Speakers TopCenter;
    public static Speakers TopFrontLeft;
    public static Speakers TopFrontCenter;
    public static Speakers TopFrontRight;
    public static Speakers TopBackLeft;
    public static Speakers TopBackCenter;
    public static Speakers TopBackRight;
    public static Speakers Reserved;
    public static Speakers All;
    public static Speakers None;
}
public static class SharpDX.Multimedia.SpeakersExtensions : object {
    public static int ToChannelCount(Speakers speakers);
}
public enum SharpDX.Multimedia.UsageId : Enum {
    public short value__;
    public static UsageId GenericPointer;
    public static UsageId GenericMouse;
    public static UsageId GenericJoystick;
    public static UsageId GenericGamepad;
    public static UsageId GenericKeyboard;
    public static UsageId GenericKeypad;
    public static UsageId GenericMultiAxisController;
    public static UsageId GenericTabletPcSystemCtl;
    public static UsageId GenericPortableDeviceControl;
    public static UsageId GenericInteractiveControl;
    public static UsageId GenericCountedBuffer;
    public static UsageId GenericSystemCtl;
    public static UsageId GenericX;
    public static UsageId GenericY;
    public static UsageId GenericZ;
    public static UsageId GenericRx;
    public static UsageId GenericRy;
    public static UsageId GenericRz;
    public static UsageId GenericSlider;
    public static UsageId GenericDial;
    public static UsageId GenericWheel;
    public static UsageId GenericHatswitch;
    public static UsageId GenericByteCount;
    public static UsageId GenericMotionWakeup;
    public static UsageId GenericStart;
    public static UsageId GenericSelect;
    public static UsageId GenericVx;
    public static UsageId GenericVy;
    public static UsageId GenericVz;
    public static UsageId GenericVbrx;
    public static UsageId GenericVbry;
    public static UsageId GenericVbrz;
    public static UsageId GenericVno;
    public static UsageId GenericFeatureNotification;
    public static UsageId GenericResolutionMultiplier;
    public static UsageId GenericSysctlPower;
    public static UsageId GenericSysctlSleep;
    public static UsageId GenericSysctlWake;
    public static UsageId GenericSysctlContextMenu;
    public static UsageId GenericSysctlMainMenu;
    public static UsageId GenericSysctlAppMenu;
    public static UsageId GenericSysctlHelpMenu;
    public static UsageId GenericSysctlMenuExit;
    public static UsageId GenericSysctlMenuSelect;
    public static UsageId GenericSysctlMenuRight;
    public static UsageId GenericSysctlMenuLeft;
    public static UsageId GenericSysctlMenuUp;
    public static UsageId GenericSysctlMenuDown;
    public static UsageId GenericSysctlColdRestart;
    public static UsageId GenericSysctlWarmRestart;
    public static UsageId GenericDpadUp;
    public static UsageId GenericDpadDown;
    public static UsageId GenericDpadRight;
    public static UsageId GenericDpadLeft;
    public static UsageId GenericSysctlDock;
    public static UsageId GenericSysctlUndock;
    public static UsageId GenericSysctlSetup;
    public static UsageId GenericSysctlSysBreak;
    public static UsageId GenericSysctlSysDbgBreak;
    public static UsageId GenericSysctlAppBreak;
    public static UsageId GenericSysctlAppDbgBreak;
    public static UsageId GenericSysctlMute;
    public static UsageId GenericSysctlHibernate;
    public static UsageId GenericSysctlDispInvert;
    public static UsageId GenericSysctlDispInternal;
    public static UsageId GenericSysctlDispExternal;
    public static UsageId GenericSysctlDispBoth;
    public static UsageId GenericSysctlDispDual;
    public static UsageId GenericSysctlDispToggle;
    public static UsageId GenericSysctlDispSwap;
    public static UsageId GenericSysctlDispAutoscale;
    public static UsageId GenericSystemDisplayRotationLockButton;
    public static UsageId GenericSystemDisplayRotationLockSliderSwitch;
    public static UsageId GenericControlEnable;
    public static UsageId SimulationFlightSimulationDevice;
    public static UsageId SimulationAutomobileSimulationDevice;
    public static UsageId SimulationTankSimulationDevice;
    public static UsageId SimulationSpaceshipSimulationDevice;
    public static UsageId SimulationSubmarineSimulationDevice;
    public static UsageId SimulationSailingSimulationDevice;
    public static UsageId SimulationMotorcycleSimulationDevice;
    public static UsageId SimulationSportsSimulationDevice;
    public static UsageId SimulationAirplaneSimulationDevice;
    public static UsageId SimulationHelicopterSimulationDevice;
    public static UsageId SimulationMagicCarpetSimulationDevice;
    public static UsageId SimulationBicycleSimulationDevice;
    public static UsageId SimulationFlightControlStick;
    public static UsageId SimulationFlightStick;
    public static UsageId SimulationCyclicControl;
    public static UsageId SimulationCyclicTrim;
    public static UsageId SimulationFlightYoke;
    public static UsageId SimulationTrackControl;
    public static UsageId SimulationAileron;
    public static UsageId SimulationAileronTrim;
    public static UsageId SimulationAntiTorqueControl;
    public static UsageId SimulationAutopiolotEnable;
    public static UsageId SimulationChaffRelease;
    public static UsageId SimulationCollectiveControl;
    public static UsageId SimulationDiveBrake;
    public static UsageId SimulationElectronicCountermeasures;
    public static UsageId SimulationElevator;
    public static UsageId SimulationElevatorTrim;
    public static UsageId SimulationRudder;
    public static UsageId SimulationThrottle;
    public static UsageId SimulationFlightCommunications;
    public static UsageId SimulationFlareRelease;
    public static UsageId SimulationLandingGear;
    public static UsageId SimulationToeBrake;
    public static UsageId SimulationTrigger;
    public static UsageId SimulationWeaponsArm;
    public static UsageId SimulationWeaponsSelect;
    public static UsageId SimulationWingFlaps;
    public static UsageId SimulationAccellerator;
    public static UsageId SimulationBrake;
    public static UsageId SimulationClutch;
    public static UsageId SimulationShifter;
    public static UsageId SimulationSteering;
    public static UsageId SimulationTurretDirection;
    public static UsageId SimulationBarrelElevation;
    public static UsageId SimulationDivePlane;
    public static UsageId SimulationBallast;
    public static UsageId SimulationBicycleCrank;
    public static UsageId SimulationHandleBars;
    public static UsageId SimulationFrontBrake;
    public static UsageId SimulationRearBrake;
    public static UsageId VrBelt;
    public static UsageId VrBodySuit;
    public static UsageId VrFlexor;
    public static UsageId VrGlove;
    public static UsageId VrHeadTracker;
    public static UsageId VrHeadMountedDisplay;
    public static UsageId VrHandTracker;
    public static UsageId VrOculometer;
    public static UsageId VrVest;
    public static UsageId VrAnimatronicDevice;
    public static UsageId VrStereoEnable;
    public static UsageId VrDisplayEnable;
    public static UsageId SportBaseballBat;
    public static UsageId SportGolfClub;
    public static UsageId SportRowingMachine;
    public static UsageId SportTreadmill;
    public static UsageId SportStickType;
    public static UsageId SportOar;
    public static UsageId SportSlope;
    public static UsageId SportRate;
    public static UsageId SportStickSpeed;
    public static UsageId SportStickFaceAngle;
    public static UsageId SportHeelToe;
    public static UsageId SportFollowThrough;
    public static UsageId SportTempo;
    public static UsageId SportHeight;
    public static UsageId SportPutter;
    public static UsageId Sport1Iron;
    public static UsageId Sport2Iron;
    public static UsageId Sport3Iron;
    public static UsageId Sport4Iron;
    public static UsageId Sport5Iron;
    public static UsageId Sport6Iron;
    public static UsageId Sport7Iron;
    public static UsageId Sport8Iron;
    public static UsageId Sport9Iron;
    public static UsageId Sport10Iron;
    public static UsageId Sport11Iron;
    public static UsageId SportSandWedge;
    public static UsageId SportLoftWedge;
    public static UsageId SportPowerWedge;
    public static UsageId Sport1Wood;
    public static UsageId Sport3Wood;
    public static UsageId Sport5Wood;
    public static UsageId Sport7Wood;
    public static UsageId Sport9Wood;
    public static UsageId Game3dGameController;
    public static UsageId GamePinballDevice;
    public static UsageId GameGunDevice;
    public static UsageId GamePointOfView;
    public static UsageId GameGunSelector;
    public static UsageId GameGamepadFireJump;
    public static UsageId GameGamepadTrigger;
    public static UsageId GameTurnRightLeft;
    public static UsageId GamePitchForwardBack;
    public static UsageId GameRollRightLeft;
    public static UsageId GameMoveRightLeft;
    public static UsageId GameMoveForwardBack;
    public static UsageId GameMoveUpDown;
    public static UsageId GameLeanRightLeft;
    public static UsageId GameLeanForwardBack;
    public static UsageId GamePovHeight;
    public static UsageId GameFlipper;
    public static UsageId GameSecondaryFlipper;
    public static UsageId GameBump;
    public static UsageId GameNewGame;
    public static UsageId GameShootBall;
    public static UsageId GamePlayer;
    public static UsageId GameGunBolt;
    public static UsageId GameGunClip;
    public static UsageId GameGunSingleShot;
    public static UsageId GameGunBurst;
    public static UsageId GameGunAutomatic;
    public static UsageId GameGunSafety;
    public static UsageId GenericDeviceBatteryStrength;
    public static UsageId GenericDeviceWirelessChannel;
    public static UsageId GenericDeviceWirelessId;
    public static UsageId GenericDeviceDiscoverWirelessControl;
    public static UsageId GenericDeviceSecurityCodeCharEntered;
    public static UsageId GenericDeviceSecurityCodeCharErased;
    public static UsageId GenericDeviceSecurityCodeCleared;
    public static UsageId KeyboardNoevent;
    public static UsageId KeyboardRollover;
    public static UsageId KeyboardPostfail;
    public static UsageId KeyboardUndefined;
    public static UsageId KeyboardAA;
    public static UsageId KeyboardZZ;
    public static UsageId KeyboardOne;
    public static UsageId KeyboardZero;
    public static UsageId KeyboardLctrl;
    public static UsageId KeyboardLshft;
    public static UsageId KeyboardLalt;
    public static UsageId KeyboardLgui;
    public static UsageId KeyboardRctrl;
    public static UsageId KeyboardRshft;
    public static UsageId KeyboardRalt;
    public static UsageId KeyboardRgui;
    public static UsageId KeyboardScrollLock;
    public static UsageId KeyboardNumLock;
    public static UsageId KeyboardCapsLock;
    public static UsageId KeyboardF1;
    public static UsageId KeyboardF2;
    public static UsageId KeyboardF3;
    public static UsageId KeyboardF4;
    public static UsageId KeyboardF5;
    public static UsageId KeyboardF6;
    public static UsageId KeyboardF7;
    public static UsageId KeyboardF8;
    public static UsageId KeyboardF9;
    public static UsageId KeyboardF10;
    public static UsageId KeyboardF11;
    public static UsageId KeyboardF12;
    public static UsageId KeyboardF13;
    public static UsageId KeyboardF14;
    public static UsageId KeyboardF15;
    public static UsageId KeyboardF16;
    public static UsageId KeyboardF17;
    public static UsageId KeyboardF18;
    public static UsageId KeyboardF19;
    public static UsageId KeyboardF20;
    public static UsageId KeyboardF21;
    public static UsageId KeyboardF22;
    public static UsageId KeyboardF23;
    public static UsageId KeyboardF24;
    public static UsageId KeyboardReturn;
    public static UsageId KeyboardEscape;
    public static UsageId KeyboardDelete;
    public static UsageId KeyboardPrintScreen;
    public static UsageId KeyboardDeleteForward;
    public static UsageId LedNumLock;
    public static UsageId LedCapsLock;
    public static UsageId LedScrollLock;
    public static UsageId LedCompose;
    public static UsageId LedKana;
    public static UsageId LedPower;
    public static UsageId LedShift;
    public static UsageId LedDoNotDisturb;
    public static UsageId LedMute;
    public static UsageId LedToneEnable;
    public static UsageId LedHighCutFilter;
    public static UsageId LedLowCutFilter;
    public static UsageId LedEqualizerEnable;
    public static UsageId LedSoundFieldOn;
    public static UsageId LedSurroundFieldOn;
    public static UsageId LedRepeat;
    public static UsageId LedStereo;
    public static UsageId LedSamplingRateDetect;
    public static UsageId LedSpinning;
    public static UsageId LedCav;
    public static UsageId LedClv;
    public static UsageId LedRecordingFormatDet;
    public static UsageId LedOffHook;
    public static UsageId LedRing;
    public static UsageId LedMessageWaiting;
    public static UsageId LedDataMode;
    public static UsageId LedBatteryOperation;
    public static UsageId LedBatteryOk;
    public static UsageId LedBatteryLow;
    public static UsageId LedSpeaker;
    public static UsageId LedHeadSet;
    public static UsageId LedHold;
    public static UsageId LedMicrophone;
    public static UsageId LedCoverage;
    public static UsageId LedNightMode;
    public static UsageId LedSendCalls;
    public static UsageId LedCallPickup;
    public static UsageId LedConference;
    public static UsageId LedStandBy;
    public static UsageId LedCameraOn;
    public static UsageId LedCameraOff;
    public static UsageId LedOnLine;
    public static UsageId LedOffLine;
    public static UsageId LedBusy;
    public static UsageId LedReady;
    public static UsageId LedPaperOut;
    public static UsageId LedPaperJam;
    public static UsageId LedRemote;
    public static UsageId LedForward;
    public static UsageId LedReverse;
    public static UsageId LedStop;
    public static UsageId LedRewind;
    public static UsageId LedFastForward;
    public static UsageId LedPlay;
    public static UsageId LedPause;
    public static UsageId LedRecord;
    public static UsageId LedError;
    public static UsageId LedSelectedIndicator;
    public static UsageId LedInUseIndicator;
    public static UsageId LedMultiModeIndicator;
    public static UsageId LedIndicatorOn;
    public static UsageId LedIndicatorFlash;
    public static UsageId LedIndicatorSlowBlink;
    public static UsageId LedIndicatorFastBlink;
    public static UsageId LedIndicatorOff;
    public static UsageId LedFlashOnTime;
    public static UsageId LedSlowBlinkOnTime;
    public static UsageId LedSlowBlinkOffTime;
    public static UsageId LedFastBlinkOnTime;
    public static UsageId LedFastBlinkOffTime;
    public static UsageId LedIndicatorColor;
    public static UsageId LedRed;
    public static UsageId LedGreen;
    public static UsageId LedAmber;
    public static UsageId LedGenericIndicator;
    public static UsageId LedSystemSuspend;
    public static UsageId LedExternalPower;
    public static UsageId TelephonyPhone;
    public static UsageId TelephonyAnsweringMachine;
    public static UsageId TelephonyMessageControls;
    public static UsageId TelephonyHandset;
    public static UsageId TelephonyHeadset;
    public static UsageId TelephonyKeypad;
    public static UsageId TelephonyProgrammableButton;
    public static UsageId TelephonyRedial;
    public static UsageId TelephonyTransfer;
    public static UsageId TelephonyDrop;
    public static UsageId TelephonyLine;
    public static UsageId TelephonyRingEnable;
    public static UsageId TelephonySend;
    public static UsageId TelephonyKeypad0;
    public static UsageId TelephonyKeypadD;
    public static UsageId TelephonyHostAvailable;
    public static UsageId Consumerctrl;
    public static UsageId ConsumerChannelIncrement;
    public static UsageId ConsumerChannelDecrement;
    public static UsageId ConsumerPlay;
    public static UsageId ConsumerPause;
    public static UsageId ConsumerRecord;
    public static UsageId ConsumerFastForward;
    public static UsageId ConsumerRewind;
    public static UsageId ConsumerScanNextTrack;
    public static UsageId ConsumerScanPrevTrack;
    public static UsageId ConsumerStop;
    public static UsageId ConsumerPlayPause;
    public static UsageId ConsumerGamedvrOpenGamebar;
    public static UsageId ConsumerGamedvrToggleRecord;
    public static UsageId ConsumerGamedvrRecordClip;
    public static UsageId ConsumerGamedvrScreenshot;
    public static UsageId ConsumerGamedvrToggleIndicator;
    public static UsageId ConsumerGamedvrToggleMicrophone;
    public static UsageId ConsumerGamedvrToggleCamera;
    public static UsageId ConsumerGamedvrToggleBroadcast;
    public static UsageId ConsumerVolume;
    public static UsageId ConsumerBalance;
    public static UsageId ConsumerMute;
    public static UsageId ConsumerBass;
    public static UsageId ConsumerTreble;
    public static UsageId ConsumerBassBoost;
    public static UsageId ConsumerSurroundMode;
    public static UsageId ConsumerLoudness;
    public static UsageId ConsumerMpx;
    public static UsageId ConsumerVolumeIncrement;
    public static UsageId ConsumerVolumeDecrement;
    public static UsageId ConsumerBassIncrement;
    public static UsageId ConsumerBassDecrement;
    public static UsageId ConsumerTrebleIncrement;
    public static UsageId ConsumerTrebleDecrement;
    public static UsageId ConsumerAlConfiguration;
    public static UsageId ConsumerAlEmail;
    public static UsageId ConsumerAlCalculator;
    public static UsageId ConsumerAlBrowser;
    public static UsageId ConsumerAlSearch;
    public static UsageId ConsumerAcSearch;
    public static UsageId ConsumerAcGoto;
    public static UsageId ConsumerAcHome;
    public static UsageId ConsumerAcBack;
    public static UsageId ConsumerAcForward;
    public static UsageId ConsumerAcStop;
    public static UsageId ConsumerAcRefresh;
    public static UsageId ConsumerAcPrevious;
    public static UsageId ConsumerAcNext;
    public static UsageId ConsumerAcBookmarks;
    public static UsageId ConsumerAcPan;
    public static UsageId ConsumerExtendedKeyboardAttributesCollection;
    public static UsageId ConsumerKeyboardFormFactor;
    public static UsageId ConsumerKeyboardKeyType;
    public static UsageId ConsumerKeyboardPhysicalLayout;
    public static UsageId ConsumerVendorSpecificKeyboardPhysicalLayout;
    public static UsageId ConsumerKeyboardIetfLanguageTagIndex;
    public static UsageId ConsumerImplementedKeyboardInputAssistControls;
    public static UsageId DigitizerDigitizer;
    public static UsageId DigitizerPen;
    public static UsageId DigitizerLightPen;
    public static UsageId DigitizerTouchScreen;
    public static UsageId DigitizerTouchPad;
    public static UsageId DigitizerWhiteBoard;
    public static UsageId DigitizerCoordMeasuring;
    public static UsageId Digitizer3dDigitizer;
    public static UsageId DigitizerStereoPlotter;
    public static UsageId DigitizerArticulatedArm;
    public static UsageId DigitizerArmature;
    public static UsageId DigitizerMultiPoint;
    public static UsageId DigitizerFreeSpaceWand;
    public static UsageId DigitizerStylus;
    public static UsageId DigitizerPuck;
    public static UsageId DigitizerFinger;
    public static UsageId DigitizerTabletFuncKeys;
    public static UsageId DigitizerProgChangeKeys;
    public static UsageId DigitizerTipPressure;
    public static UsageId DigitizerBarrelPressure;
    public static UsageId DigitizerInRange;
    public static UsageId DigitizerTouch;
    public static UsageId DigitizerUntouch;
    public static UsageId DigitizerTap;
    public static UsageId DigitizerQuality;
    public static UsageId DigitizerDataValid;
    public static UsageId DigitizerTransducerIndex;
    public static UsageId DigitizerBatteryStrength;
    public static UsageId DigitizerInvert;
    public static UsageId DigitizerXTilt;
    public static UsageId DigitizerYTilt;
    public static UsageId DigitizerAzimuth;
    public static UsageId DigitizerAltitude;
    public static UsageId DigitizerTwist;
    public static UsageId DigitizerTipSwitch;
    public static UsageId DigitizerSecondaryTipSwitch;
    public static UsageId DigitizerBarrelSwitch;
    public static UsageId DigitizerEraser;
    public static UsageId DigitizerTabletPick;
    public static UsageId HapticsSimpleController;
    public static UsageId HapticsWaveformList;
    public static UsageId HapticsDurationList;
    public static UsageId HapticsAutoTrigger;
    public static UsageId HapticsManualTrigger;
    public static UsageId HapticsAutoAssociatedControl;
    public static UsageId HapticsIntensity;
    public static UsageId HapticsRepeatCount;
    public static UsageId HapticsRetriggerPeriod;
    public static UsageId HapticsWaveformVendorPage;
    public static UsageId HapticsWaveformVendorId;
    public static UsageId HapticsWaveformCutoffTime;
    public static UsageId HapticsWaveformBegin;
    public static UsageId HapticsWaveformStop;
    public static UsageId HapticsWaveformNull;
    public static UsageId HapticsWaveformClick;
    public static UsageId HapticsWaveformBuzz;
    public static UsageId HapticsWaveformRumble;
    public static UsageId HapticsWaveformPress;
    public static UsageId HapticsWaveformRelease;
    public static UsageId HapticsWaveformEnd;
    public static UsageId HapticsWaveformVendorBegin;
    public static UsageId HapticsWaveformVendorEnd;
    public static UsageId AlphanumericAlphanumericDisplay;
    public static UsageId AlphanumericBitmappedDisplay;
    public static UsageId AlphanumericDisplayAttributesReport;
    public static UsageId AlphanumericDisplayControlReport;
    public static UsageId AlphanumericCharacterReport;
    public static UsageId AlphanumericDisplayStatus;
    public static UsageId AlphanumericCursorPositionReport;
    public static UsageId AlphanumericFontReport;
    public static UsageId AlphanumericFontData;
    public static UsageId AlphanumericCharacterAttribute;
    public static UsageId AlphanumericPaletteReport;
    public static UsageId AlphanumericPaletteData;
    public static UsageId AlphanumericBlitReport;
    public static UsageId AlphanumericBlitData;
    public static UsageId AlphanumericSoftButton;
    public static UsageId AlphanumericAsciiCharacterSet;
    public static UsageId AlphanumericDataReadBack;
    public static UsageId AlphanumericFontReadBack;
    public static UsageId AlphanumericClearDisplay;
    public static UsageId AlphanumericDisplayEnable;
    public static UsageId AlphanumericScreenSaverDelay;
    public static UsageId AlphanumericScreenSaverEnable;
    public static UsageId AlphanumericVerticalScroll;
    public static UsageId AlphanumericHorizontalScroll;
    public static UsageId AlphanumericDisplayData;
    public static UsageId AlphanumericStatusNotReady;
    public static UsageId AlphanumericStatusReady;
    public static UsageId AlphanumericErrNotALoadableCharacter;
    public static UsageId AlphanumericErrFontDataCannotBeRead;
    public static UsageId AlphanumericRow;
    public static UsageId AlphanumericColumn;
    public static UsageId AlphanumericRows;
    public static UsageId AlphanumericColumns;
    public static UsageId AlphanumericCursorPixelPositioning;
    public static UsageId AlphanumericCursorMode;
    public static UsageId AlphanumericCursorEnable;
    public static UsageId AlphanumericCursorBlink;
    public static UsageId AlphanumericCharWidth;
    public static UsageId AlphanumericCharHeight;
    public static UsageId AlphanumericCharSpacingHorizontal;
    public static UsageId AlphanumericCharSpacingVertical;
    public static UsageId AlphanumericUnicodeCharSet;
    public static UsageId AlphanumericFont7Segment;
    public static UsageId Alphanumeric7SegmentDirectMap;
    public static UsageId AlphanumericFont14Segment;
    public static UsageId Alphanumeric14SegmentDirectMap;
    public static UsageId AlphanumericDisplayBrightness;
    public static UsageId AlphanumericDisplayContrast;
    public static UsageId AlphanumericAttributeReadback;
    public static UsageId AlphanumericAttributeData;
    public static UsageId AlphanumericCharAttrEnhance;
    public static UsageId AlphanumericCharAttrUnderline;
    public static UsageId AlphanumericCharAttrBlink;
    public static UsageId AlphanumericBitmapSizeX;
    public static UsageId AlphanumericBitmapSizeY;
    public static UsageId AlphanumericBitDepthFormat;
    public static UsageId AlphanumericDisplayOrientation;
    public static UsageId AlphanumericPaletteDataSize;
    public static UsageId AlphanumericPaletteDataOffset;
    public static UsageId AlphanumericBlitRectangleX1;
    public static UsageId AlphanumericBlitRectangleY1;
    public static UsageId AlphanumericBlitRectangleX2;
    public static UsageId AlphanumericBlitRectangleY2;
    public static UsageId AlphanumericSoftButtonId;
    public static UsageId AlphanumericSoftButtonSide;
    public static UsageId AlphanumericSoftButtonOffset1;
    public static UsageId AlphanumericSoftButtonOffset2;
    public static UsageId AlphanumericSoftButtonReport;
    public static UsageId CameraAutoFocus;
    public static UsageId CameraShutter;
    public static UsageId MsBthHfDialnumber;
    public static UsageId MsBthHfDialmemory;
}
public enum SharpDX.Multimedia.UsagePage : Enum {
    public short value__;
    public static UsagePage Undefined;
    public static UsagePage Generic;
    public static UsagePage Simulation;
    public static UsagePage Vr;
    public static UsagePage Sport;
    public static UsagePage Game;
    public static UsagePage GenericDevice;
    public static UsagePage Keyboard;
    public static UsagePage Led;
    public static UsagePage Button;
    public static UsagePage Ordinal;
    public static UsagePage Telephony;
    public static UsagePage Consumer;
    public static UsagePage Digitizer;
    public static UsagePage Haptics;
    public static UsagePage Pid;
    public static UsagePage Unicode;
    public static UsagePage Alphanumeric;
    public static UsagePage Sensor;
    public static UsagePage BarcodeScanner;
    public static UsagePage WeighingDevice;
    public static UsagePage MagneticStripeReader;
    public static UsagePage CameraControl;
    public static UsagePage Arcade;
    public static UsagePage MicrosoftBluetoothHandsfree;
    public static UsagePage VendorDefinedBegin;
    public static UsagePage VendorDefinedEnd;
    public static UsagePage Medical;
    public static UsagePage MonitorPage0;
    public static UsagePage MonitorPage1;
    public static UsagePage MonitorPage2;
    public static UsagePage MonitorPage3;
    public static UsagePage PowerPage0;
    public static UsagePage PowerPage1;
    public static UsagePage PowerPage2;
    public static UsagePage PowerPage3;
    public static UsagePage Barcode;
    public static UsagePage Scale;
    public static UsagePage Msr;
}
public class SharpDX.Multimedia.WaveFormat : object {
    protected WaveFormatEncoding waveFormatTag;
    protected short channels;
    protected int sampleRate;
    protected int averageBytesPerSecond;
    protected short blockAlign;
    protected short bitsPerSample;
    protected short extraSize;
    public WaveFormatEncoding Encoding { get; }
    public int Channels { get; }
    public int SampleRate { get; }
    public int AverageBytesPerSecond { get; }
    public int BlockAlign { get; }
    public int BitsPerSample { get; }
    public int ExtraSize { get; }
    public WaveFormat(int sampleRate, int channels);
    public WaveFormat(int rate, int bits, int channels);
    public WaveFormat(BinaryReader br);
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
    internal void __MarshalFree(__PcmNative& ref);
    internal void __MarshalFrom(__PcmNative& ref);
    internal void __MarshalTo(__PcmNative& ref);
    public int ConvertLatencyToByteSize(int milliseconds);
    public static WaveFormat CreateCustomFormat(WaveFormatEncoding tag, int sampleRate, int channels, int averageBytesPerSecond, int blockAlign, int bitsPerSample);
    public static WaveFormat CreateALawFormat(int sampleRate, int channels);
    public static WaveFormat CreateMuLawFormat(int sampleRate, int channels);
    public static WaveFormat CreateIeeeFloatWaveFormat(int sampleRate, int channels);
    public static WaveFormat MarshalFrom(Byte[] rawdata);
    public static WaveFormat MarshalFrom(IntPtr pointer);
    protected virtual IntPtr MarshalToPtr();
    public static IntPtr MarshalToPtr(WaveFormat format);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public WaveFormatEncoding get_Encoding();
    public int get_Channels();
    public int get_SampleRate();
    public int get_AverageBytesPerSecond();
    public int get_BlockAlign();
    public int get_BitsPerSample();
    public int get_ExtraSize();
}
public class SharpDX.Multimedia.WaveFormatAdpcm : WaveFormat {
    [CompilerGeneratedAttribute]
private ushort <SamplesPerBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private Int16[] <Coefficients1>k__BackingField;
    [CompilerGeneratedAttribute]
private Int16[] <Coefficients2>k__BackingField;
    public ushort SamplesPerBlock { get; private set; }
    public Int16[] Coefficients1 { get; public set; }
    public Int16[] Coefficients2 { get; public set; }
    public WaveFormatAdpcm(int rate, int channels, int blockAlign);
    [CompilerGeneratedAttribute]
public ushort get_SamplesPerBlock();
    [CompilerGeneratedAttribute]
private void set_SamplesPerBlock(ushort value);
    [CompilerGeneratedAttribute]
public Int16[] get_Coefficients1();
    [CompilerGeneratedAttribute]
public void set_Coefficients1(Int16[] value);
    [CompilerGeneratedAttribute]
public Int16[] get_Coefficients2();
    [CompilerGeneratedAttribute]
public void set_Coefficients2(Int16[] value);
    protected virtual IntPtr MarshalToPtr();
    internal void __MarshalFrom(__Native& ref);
    private void __MarshalTo(__Native& ref);
}
public enum SharpDX.Multimedia.WaveFormatEncoding : Enum {
    public short value__;
    public static WaveFormatEncoding Unknown;
    public static WaveFormatEncoding Adpcm;
    public static WaveFormatEncoding IeeeFloat;
    public static WaveFormatEncoding Vselp;
    public static WaveFormatEncoding IbmCvsd;
    public static WaveFormatEncoding Alaw;
    public static WaveFormatEncoding Mulaw;
    public static WaveFormatEncoding Dts;
    public static WaveFormatEncoding Drm;
    public static WaveFormatEncoding Wmavoice9;
    public static WaveFormatEncoding Wmavoice10;
    public static WaveFormatEncoding OkiAdpcm;
    public static WaveFormatEncoding DviAdpcm;
    public static WaveFormatEncoding ImaAdpcm;
    public static WaveFormatEncoding MediaspaceAdpcm;
    public static WaveFormatEncoding SierraAdpcm;
    public static WaveFormatEncoding G723Adpcm;
    public static WaveFormatEncoding Digistd;
    public static WaveFormatEncoding Digifix;
    public static WaveFormatEncoding DialogicOkiAdpcm;
    public static WaveFormatEncoding MediavisionAdpcm;
    public static WaveFormatEncoding CuCodec;
    public static WaveFormatEncoding HpDynVoice;
    public static WaveFormatEncoding YamahaAdpcm;
    public static WaveFormatEncoding Sonarc;
    public static WaveFormatEncoding DspgroupTruespeech;
    public static WaveFormatEncoding Echosc1;
    public static WaveFormatEncoding AudiofileAf36;
    public static WaveFormatEncoding Aptx;
    public static WaveFormatEncoding AudiofileAf10;
    public static WaveFormatEncoding Prosody1612;
    public static WaveFormatEncoding Lrc;
    public static WaveFormatEncoding DolbyAc2;
    public static WaveFormatEncoding DefaultGsm610;
    public static WaveFormatEncoding Msnaudio;
    public static WaveFormatEncoding AntexAdpcme;
    public static WaveFormatEncoding ControlResVqlpc;
    public static WaveFormatEncoding Digireal;
    public static WaveFormatEncoding Digiadpcm;
    public static WaveFormatEncoding ControlResCr10;
    public static WaveFormatEncoding NmsVbxadpcm;
    public static WaveFormatEncoding CsImaadpcm;
    public static WaveFormatEncoding Echosc3;
    public static WaveFormatEncoding RockwellAdpcm;
    public static WaveFormatEncoding RockwellDigitalk;
    public static WaveFormatEncoding Xebec;
    public static WaveFormatEncoding G721Adpcm;
    public static WaveFormatEncoding G728Celp;
    public static WaveFormatEncoding Msg723;
    public static WaveFormatEncoding IntelG7231;
    public static WaveFormatEncoding IntelG729;
    public static WaveFormatEncoding SharpG726;
    public static WaveFormatEncoding Mpeg;
    public static WaveFormatEncoding Rt24;
    public static WaveFormatEncoding Pac;
    public static WaveFormatEncoding Mpeglayer3;
    public static WaveFormatEncoding LucentG723;
    public static WaveFormatEncoding Cirrus;
    public static WaveFormatEncoding Espcm;
    public static WaveFormatEncoding Voxware;
    public static WaveFormatEncoding CanopusAtrac;
    public static WaveFormatEncoding G726Adpcm;
    public static WaveFormatEncoding G722Adpcm;
    public static WaveFormatEncoding Dsat;
    public static WaveFormatEncoding DsatDisplay;
    public static WaveFormatEncoding VoxwareByteAligned;
    public static WaveFormatEncoding VoxwareAc8;
    public static WaveFormatEncoding VoxwareAc10;
    public static WaveFormatEncoding VoxwareAc16;
    public static WaveFormatEncoding VoxwareAc20;
    public static WaveFormatEncoding VoxwareRt24;
    public static WaveFormatEncoding VoxwareRt29;
    public static WaveFormatEncoding VoxwareRt29hw;
    public static WaveFormatEncoding VoxwareVr12;
    public static WaveFormatEncoding VoxwareVr18;
    public static WaveFormatEncoding VoxwareTq40;
    public static WaveFormatEncoding VoxwareSc3;
    public static WaveFormatEncoding VoxwareSc31;
    public static WaveFormatEncoding Softsound;
    public static WaveFormatEncoding VoxwareTq60;
    public static WaveFormatEncoding Msrt24;
    public static WaveFormatEncoding G729A;
    public static WaveFormatEncoding MviMvi2;
    public static WaveFormatEncoding DfG726;
    public static WaveFormatEncoding DfGsm610;
    public static WaveFormatEncoding Isiaudio;
    public static WaveFormatEncoding Onlive;
    public static WaveFormatEncoding MultitudeFtSx20;
    public static WaveFormatEncoding InfocomItsG721Adpcm;
    public static WaveFormatEncoding ConvediaG729;
    public static WaveFormatEncoding Congruency;
    public static WaveFormatEncoding Sbc24;
    public static WaveFormatEncoding DolbyAc3Spdif;
    public static WaveFormatEncoding MediasonicG723;
    public static WaveFormatEncoding Prosody8kbps;
    public static WaveFormatEncoding ZyxelAdpcm;
    public static WaveFormatEncoding PhilipsLpcbb;
    public static WaveFormatEncoding Packed;
    public static WaveFormatEncoding MaldenPhonytalk;
    public static WaveFormatEncoding RacalRecorderGsm;
    public static WaveFormatEncoding RacalRecorderG720A;
    public static WaveFormatEncoding RacalRecorderG7231;
    public static WaveFormatEncoding RacalRecorderTetraAcelp;
    public static WaveFormatEncoding NecAac;
    public static WaveFormatEncoding RawAac1;
    public static WaveFormatEncoding RhetorexAdpcm;
    public static WaveFormatEncoding Irat;
    public static WaveFormatEncoding VivoG723;
    public static WaveFormatEncoding VivoSiren;
    public static WaveFormatEncoding PhilipsCelp;
    public static WaveFormatEncoding PhilipsGrundig;
    public static WaveFormatEncoding DigitalG723;
    public static WaveFormatEncoding SanyoLdAdpcm;
    public static WaveFormatEncoding SiprolabAceplnet;
    public static WaveFormatEncoding SiprolabAcelp4800;
    public static WaveFormatEncoding SiprolabAcelp8v3;
    public static WaveFormatEncoding SiprolabG729;
    public static WaveFormatEncoding SiprolabG729A;
    public static WaveFormatEncoding SiprolabKelvin;
    public static WaveFormatEncoding VoiceageAmr;
    public static WaveFormatEncoding G726ADPCM;
    public static WaveFormatEncoding DictaphoneCelp68;
    public static WaveFormatEncoding DictaphoneCelp54;
    public static WaveFormatEncoding QualcommPurevoice;
    public static WaveFormatEncoding QualcommHalfrate;
    public static WaveFormatEncoding Tubgsm;
    public static WaveFormatEncoding Msaudio1;
    public static WaveFormatEncoding Wmaudio2;
    public static WaveFormatEncoding Wmaudio3;
    public static WaveFormatEncoding WmaudioLossless;
    public static WaveFormatEncoding Wmaspdif;
    public static WaveFormatEncoding UnisysNapAdpcm;
    public static WaveFormatEncoding UnisysNapUlaw;
    public static WaveFormatEncoding UnisysNapAlaw;
    public static WaveFormatEncoding UnisysNap16k;
    public static WaveFormatEncoding SycomAcmSyc008;
    public static WaveFormatEncoding SycomAcmSyc701G726L;
    public static WaveFormatEncoding SycomAcmSyc701Celp54;
    public static WaveFormatEncoding SycomAcmSyc701Celp68;
    public static WaveFormatEncoding KnowledgeAdventureAdpcm;
    public static WaveFormatEncoding FraunhoferIisMpeg2Aac;
    public static WaveFormatEncoding DtsDs;
    public static WaveFormatEncoding CreativeAdpcm;
    public static WaveFormatEncoding CreativeFastspeech8;
    public static WaveFormatEncoding CreativeFastspeech10;
    public static WaveFormatEncoding UherAdpcm;
    public static WaveFormatEncoding UleadDvAudio;
    public static WaveFormatEncoding UleadDvAudio1;
    public static WaveFormatEncoding Quarterdeck;
    public static WaveFormatEncoding IlinkVc;
    public static WaveFormatEncoding RawSport;
    public static WaveFormatEncoding EsstAc3;
    public static WaveFormatEncoding GenericPassthru;
    public static WaveFormatEncoding IpiHsx;
    public static WaveFormatEncoding IpiRpelp;
    public static WaveFormatEncoding Cs2;
    public static WaveFormatEncoding SonyScx;
    public static WaveFormatEncoding SonyScy;
    public static WaveFormatEncoding SonyAtrac3;
    public static WaveFormatEncoding SonySpc;
    public static WaveFormatEncoding TelumAudio;
    public static WaveFormatEncoding TelumIaAudio;
    public static WaveFormatEncoding NorcomVoiceSystemsAdpcm;
    public static WaveFormatEncoding FmTownsSnd;
    public static WaveFormatEncoding Micronas;
    public static WaveFormatEncoding MicronasCelp833;
    public static WaveFormatEncoding BtvDigital;
    public static WaveFormatEncoding IntelMusicCoder;
    public static WaveFormatEncoding IndeoAudio;
    public static WaveFormatEncoding QdesignMusic;
    public static WaveFormatEncoding On2Vp7Audio;
    public static WaveFormatEncoding On2Vp6Audio;
    public static WaveFormatEncoding VmeVmpcm;
    public static WaveFormatEncoding Tpc;
    public static WaveFormatEncoding LightwaveLossless;
    public static WaveFormatEncoding Oligsm;
    public static WaveFormatEncoding Oliadpcm;
    public static WaveFormatEncoding Olicelp;
    public static WaveFormatEncoding Olisbc;
    public static WaveFormatEncoding Oliopr;
    public static WaveFormatEncoding LhCodec;
    public static WaveFormatEncoding LhCodecCelp;
    public static WaveFormatEncoding LhCodecSbc8;
    public static WaveFormatEncoding LhCodecSbc12;
    public static WaveFormatEncoding LhCodecSbc16;
    public static WaveFormatEncoding Norris;
    public static WaveFormatEncoding Isiaudio2;
    public static WaveFormatEncoding SoundspaceMusicompress;
    public static WaveFormatEncoding MpegAdtsAac;
    public static WaveFormatEncoding MpegRawAac;
    public static WaveFormatEncoding MpegLoas;
    public static WaveFormatEncoding NokiaMpegAdtsAac;
    public static WaveFormatEncoding NokiaMpegRawAac;
    public static WaveFormatEncoding VodafoneMpegAdtsAac;
    public static WaveFormatEncoding VodafoneMpegRawAac;
    public static WaveFormatEncoding MpegHeaac;
    public static WaveFormatEncoding VoxwareRt24Speech;
    public static WaveFormatEncoding SonicfoundryLossless;
    public static WaveFormatEncoding InningsTelecomAdpcm;
    public static WaveFormatEncoding LucentSx8300p;
    public static WaveFormatEncoding LucentSx5363s;
    public static WaveFormatEncoding Cuseeme;
    public static WaveFormatEncoding NtcsoftAlf2cmAcm;
    public static WaveFormatEncoding Dvm;
    public static WaveFormatEncoding Dts2;
    public static WaveFormatEncoding Makeavis;
    public static WaveFormatEncoding DivioMpeg4Aac;
    public static WaveFormatEncoding NokiaAdaptiveMultirate;
    public static WaveFormatEncoding DivioG726;
    public static WaveFormatEncoding LeadSpeech;
    public static WaveFormatEncoding LeadVorbis;
    public static WaveFormatEncoding WavpackAudio;
    public static WaveFormatEncoding Alac;
    public static WaveFormatEncoding OggVorbisMode1;
    public static WaveFormatEncoding OggVorbisMode2;
    public static WaveFormatEncoding OggVorbisMode3;
    public static WaveFormatEncoding OggVorbisMode1Plus;
    public static WaveFormatEncoding OggVorbisMode2Plus;
    public static WaveFormatEncoding OggVorbisMode3Plus;
    public static WaveFormatEncoding Tag3COMNbx;
    public static WaveFormatEncoding Opus;
    public static WaveFormatEncoding FaadAac;
    public static WaveFormatEncoding AmrNb;
    public static WaveFormatEncoding AmrWb;
    public static WaveFormatEncoding AmrWp;
    public static WaveFormatEncoding GsmAmrCbr;
    public static WaveFormatEncoding GsmAmrVbrSid;
    public static WaveFormatEncoding ComverseInfosysG7231;
    public static WaveFormatEncoding ComverseInfosysAvqsbc;
    public static WaveFormatEncoding ComverseInfosysSbc;
    public static WaveFormatEncoding SymbolG729A;
    public static WaveFormatEncoding VoiceageAmrWb;
    public static WaveFormatEncoding IngenientG726;
    public static WaveFormatEncoding Mpeg4Aac;
    public static WaveFormatEncoding EncoreG726;
    public static WaveFormatEncoding ZollAsao;
    public static WaveFormatEncoding SpeexVoice;
    public static WaveFormatEncoding VianixMasc;
    public static WaveFormatEncoding Wm9SpectrumAnalyzer;
    public static WaveFormatEncoding WmfSpectrumAnayzer;
    public static WaveFormatEncoding Gsm610;
    public static WaveFormatEncoding Gsm620;
    public static WaveFormatEncoding Gsm660;
    public static WaveFormatEncoding Gsm690;
    public static WaveFormatEncoding GsmAdaptiveMultirateWb;
    public static WaveFormatEncoding PolycomG722;
    public static WaveFormatEncoding PolycomG728;
    public static WaveFormatEncoding PolycomG729A;
    public static WaveFormatEncoding PolycomSiren;
    public static WaveFormatEncoding GlobalIpIlbc;
    public static WaveFormatEncoding RadiotimeTimeShiftRadio;
    public static WaveFormatEncoding NiceAca;
    public static WaveFormatEncoding NiceAdpcm;
    public static WaveFormatEncoding VocordG721;
    public static WaveFormatEncoding VocordG726;
    public static WaveFormatEncoding VocordG7221;
    public static WaveFormatEncoding VocordG728;
    public static WaveFormatEncoding VocordG729;
    public static WaveFormatEncoding VocordG729A;
    public static WaveFormatEncoding VocordG7231;
    public static WaveFormatEncoding VocordLbc;
    public static WaveFormatEncoding NiceG728;
    public static WaveFormatEncoding FraceTelecomG729;
    public static WaveFormatEncoding Codian;
    public static WaveFormatEncoding Flac;
    public static WaveFormatEncoding Extensible;
    public static WaveFormatEncoding Development;
    public static WaveFormatEncoding Pcm;
}
public class SharpDX.Multimedia.WaveFormatExtensible : WaveFormat {
    private short wValidBitsPerSample;
    public Guid GuidSubFormat;
    public Speakers ChannelMask;
    public WaveFormatExtensible(int rate, int bits, int channels);
    protected virtual IntPtr MarshalToPtr();
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
    internal static __Native __NewNative();
    public virtual string ToString();
}
[CompilerGeneratedAttribute]
internal class SharpDX.NamespaceDoc : object {
}
public class SharpDX.PointerSize : ValueType {
    private IntPtr _size;
    public static PointerSize Zero;
    public PointerSize(IntPtr size);
    private PointerSize(Void* size);
    public PointerSize(int size);
    public PointerSize(long size);
    private static PointerSize();
    public virtual string ToString();
    public string ToString(string format);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(PointerSize other);
    public virtual bool Equals(object value);
    public static PointerSize op_Addition(PointerSize left, PointerSize right);
    public static PointerSize op_UnaryPlus(PointerSize value);
    public static PointerSize op_Subtraction(PointerSize left, PointerSize right);
    public static PointerSize op_UnaryNegation(PointerSize value);
    public static PointerSize op_Multiply(int scale, PointerSize value);
    public static PointerSize op_Multiply(PointerSize value, int scale);
    public static PointerSize op_Division(PointerSize value, int scale);
    public static bool op_Equality(PointerSize left, PointerSize right);
    public static bool op_Inequality(PointerSize left, PointerSize right);
    public static int op_Implicit(PointerSize value);
    public static long op_Implicit(PointerSize value);
    public static PointerSize op_Implicit(int value);
    public static PointerSize op_Implicit(long value);
    public static PointerSize op_Implicit(IntPtr value);
    public static IntPtr op_Implicit(PointerSize value);
    public static PointerSize op_Implicit(Void* value);
    public static Void* op_Implicit(PointerSize value);
}
public class SharpDX.Result : ValueType {
    private int _code;
    public static Result Ok;
    public static Result False;
    public static ResultDescriptor Abort;
    public static ResultDescriptor AccessDenied;
    public static ResultDescriptor Fail;
    public static ResultDescriptor Handle;
    public static ResultDescriptor InvalidArg;
    public static ResultDescriptor NoInterface;
    public static ResultDescriptor NotImplemented;
    public static ResultDescriptor OutOfMemory;
    public static ResultDescriptor InvalidPointer;
    public static ResultDescriptor UnexpectedFailure;
    public static ResultDescriptor WaitAbandoned;
    public static ResultDescriptor WaitTimeout;
    public static ResultDescriptor Pending;
    public int Code { get; }
    public bool Success { get; }
    public bool Failure { get; }
    public Result(int code);
    public Result(UInt32 code);
    private static Result();
    public int get_Code();
    public bool get_Success();
    public bool get_Failure();
    public static int op_Explicit(Result result);
    public static UInt32 op_Explicit(Result result);
    public static Result op_Implicit(int result);
    public static Result op_Implicit(UInt32 result);
    public sealed virtual bool Equals(Result other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Result left, Result right);
    public static bool op_Inequality(Result left, Result right);
    public virtual string ToString();
    public void CheckError();
    public static Result GetResultFromException(Exception ex);
    public static Result GetResultFromWin32Error(int win32Error);
}
public class SharpDX.ResultDescriptor : object {
    private static object LockDescriptor;
    private static List`1<Type> RegisteredDescriptorProvider;
    private static Dictionary`2<Result, ResultDescriptor> Descriptors;
    private static string UnknownText;
    [CompilerGeneratedAttribute]
private Result <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NativeApiCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public Result Result { get; private set; }
    public int Code { get; }
    public string Module { get; private set; }
    public string NativeApiCode { get; private set; }
    public string ApiCode { get; private set; }
    public string Description { get; public set; }
    public ResultDescriptor(Result code, string module, string nativeApiCode, string apiCode, string description);
    private static ResultDescriptor();
    [CompilerGeneratedAttribute]
public Result get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(Result value);
    public int get_Code();
    [CompilerGeneratedAttribute]
public string get_Module();
    [CompilerGeneratedAttribute]
private void set_Module(string value);
    [CompilerGeneratedAttribute]
public string get_NativeApiCode();
    [CompilerGeneratedAttribute]
private void set_NativeApiCode(string value);
    [CompilerGeneratedAttribute]
public string get_ApiCode();
    [CompilerGeneratedAttribute]
private void set_ApiCode(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    public bool Equals(ResultDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static Result op_Implicit(ResultDescriptor result);
    public static int op_Explicit(ResultDescriptor result);
    public static UInt32 op_Explicit(ResultDescriptor result);
    public static bool op_Equality(ResultDescriptor left, Result right);
    public static bool op_Inequality(ResultDescriptor left, Result right);
    public static void RegisterProvider(Type descriptorsProviderType);
    public static ResultDescriptor Find(Result result);
    private static void AddDescriptorsFromType(Type type);
    private static string GetDescriptionFromResultCode(int resultCode);
    private static UInt32 FormatMessageW(int dwFlags, IntPtr lpSource, int dwMessageId, int dwLanguageId, IntPtr& lpBuffer, int nSize, IntPtr Arguments);
}
public class SharpDX.ServiceEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    public Type ServiceType { get; private set; }
    public object Instance { get; private set; }
    public ServiceEventArgs(Type serviceType, object serviceInstance);
    [CompilerGeneratedAttribute]
public Type get_ServiceType();
    [CompilerGeneratedAttribute]
private void set_ServiceType(Type value);
    [CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
private void set_Instance(object value);
}
public class SharpDX.SetValueFastDelegate`1 : MulticastDelegate {
    public SetValueFastDelegate`1(object object, IntPtr method);
    public virtual void Invoke(object obj, T& value);
    public virtual IAsyncResult BeginInvoke(object obj, T& value, AsyncCallback callback, object object);
    public virtual void EndInvoke(T& value, IAsyncResult result);
}
[AttributeUsageAttribute("1024")]
internal class SharpDX.ShadowAttribute : Attribute {
    private Type type;
    public Type Type { get; }
    public ShadowAttribute(Type typeOfTheAssociatedShadow);
    public Type get_Type();
    public static ShadowAttribute Get(Type type);
}
internal class SharpDX.ShadowContainer : DisposeBase {
    private Dictionary`2<Guid, CppObjectShadow> guidToShadow;
    private static Dictionary`2<Type, List`1<Type>> typeToShadowTypes;
    private IntPtr guidPtr;
    [CompilerGeneratedAttribute]
private IntPtr[] <Guids>k__BackingField;
    public IntPtr[] Guids { get; private set; }
    private static ShadowContainer();
    [CompilerGeneratedAttribute]
public IntPtr[] get_Guids();
    [CompilerGeneratedAttribute]
private void set_Guids(IntPtr[] value);
    public void Initialize(ICallbackable callbackable);
    internal IntPtr Find(Type type);
    internal IntPtr Find(Guid guidType);
    internal CppObjectShadow FindShadow(Guid guidType);
    protected virtual void Dispose(bool disposing);
}
public class SharpDX.SharpDXException : Exception {
    private ResultDescriptor descriptor;
    public Result ResultCode { get; }
    public ResultDescriptor Descriptor { get; }
    public SharpDXException(Result result);
    public SharpDXException(ResultDescriptor descriptor);
    public SharpDXException(Result result, string message);
    public SharpDXException(Result result, string message, Object[] args);
    public SharpDXException(string message, Object[] args);
    public SharpDXException(string message, Exception innerException, Object[] args);
    public Result get_ResultCode();
    public ResultDescriptor get_Descriptor();
}
public class SharpDX.Size2 : ValueType {
    public static Size2 Zero;
    public static Size2 Empty;
    public int Width;
    public int Height;
    public Size2(int width, int height);
    private static Size2();
    public sealed virtual bool Equals(Size2 other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Size2 left, Size2 right);
    public static bool op_Inequality(Size2 left, Size2 right);
    public virtual string ToString();
}
public class SharpDX.Size2F : ValueType {
    public static Size2F Zero;
    public static Size2F Empty;
    public float Width;
    public float Height;
    public Size2F(float width, float height);
    private static Size2F();
    public sealed virtual bool Equals(Size2F other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Size2F left, Size2F right);
    public static bool op_Inequality(Size2F left, Size2F right);
    public virtual string ToString();
}
[AttributeUsageAttribute("32767")]
public class SharpDX.TagAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; private set; }
    public TagAttribute(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
public abstract class SharpDX.Text.Encoding : Encoding {
}
[CompilerGeneratedAttribute]
internal class SharpDX.Text.NamespaceDoc : object {
}
public static class SharpDX.Utilities : object {
    public static void CopyMemory(IntPtr dest, IntPtr src, int sizeInBytesToCopy);
    public static bool CompareMemory(IntPtr from, IntPtr against, int sizeToCompare);
    public static void ClearMemory(IntPtr dest, byte value, int sizeInBytesToClear);
    public static int SizeOf();
    public static int SizeOf(T[] array);
    public static void Pin(T& source, Action`1<IntPtr> pinAction);
    public static void Pin(T[] source, Action`1<IntPtr> pinAction);
    public static Byte[] ToByteArray(T[] source);
    public static void Swap(T& left, T& right);
    public static T Read(IntPtr source);
    public static void Read(IntPtr source, T& data);
    public static void ReadOut(IntPtr source, T& data);
    public static IntPtr ReadAndPosition(IntPtr source, T& data);
    public static IntPtr Read(IntPtr source, T[] data, int offset, int count);
    public static void Write(IntPtr destination, T& data);
    public static IntPtr WriteAndPosition(IntPtr destination, T& data);
    public static IntPtr Write(IntPtr destination, T[] data, int offset, int count);
    public static void ConvertToIntArray(Boolean[] array, Int32* dest);
    public static RawBool[] ConvertToIntArray(Boolean[] array);
    public static Boolean[] ConvertToBoolArray(Int32* array, int length);
    public static Boolean[] ConvertToBoolArray(RawBool[] array);
    public static Guid GetGuidFromType(Type type);
    public static bool IsAssignableToGenericType(Type givenType, Type genericType);
    public static IntPtr AllocateMemory(int sizeInBytes, int align);
    public static IntPtr AllocateClearedMemory(int sizeInBytes, byte clearValue, int align);
    public static bool IsMemoryAligned(IntPtr memoryPtr, int align);
    public static void FreeMemory(IntPtr alignedBuffer);
    public static string PtrToStringAnsi(IntPtr pointer, int maxLength);
    public static string PtrToStringUni(IntPtr pointer, int maxLength);
    public static IntPtr StringToHGlobalAnsi(string s);
    public static IntPtr StringToHGlobalUni(string s);
    public static IntPtr StringToCoTaskMemUni(string s);
    private static void CopyStringToUnmanaged(IntPtr ptr, string str);
    public static IntPtr GetIUnknownForObject(object obj);
    public static object GetObjectForIUnknown(IntPtr iunknownPtr);
    public static string Join(string separator, T[] array);
    public static string Join(string separator, IEnumerable elements);
    public static string Join(string separator, IEnumerator elements);
    public static string BlobToString(Blob blob);
    public static IntPtr IntPtrAdd(IntPtr ptr, int offset);
    public static Byte[] ReadStream(Stream stream);
    public static Byte[] ReadStream(Stream stream, Int32& readLength);
    public static bool Compare(IEnumerable left, IEnumerable right);
    public static bool Compare(IEnumerator leftIt, IEnumerator rightIt);
    public static bool Compare(ICollection left, ICollection right);
    public static T GetCustomAttribute(MemberInfo memberInfo, bool inherited);
    public static IEnumerable`1<T> GetCustomAttributes(MemberInfo memberInfo, bool inherited);
    public static bool IsAssignableFrom(Type toType, Type fromType);
    public static bool IsEnum(Type typeToTest);
    public static bool IsValueType(Type typeToTest);
    private static MethodInfo GetMethod(Type type, string name, Type[] typeArgs);
    public static GetValueFastDelegate`1<T> BuildPropertyGetter(Type customEffectType, PropertyInfo propertyInfo);
    public static SetValueFastDelegate`1<T> BuildPropertySetter(Type customEffectType, PropertyInfo propertyInfo);
    private static MethodInfo FindExplicitConverstion(Type sourceType, Type targetType);
    private static Result CoCreateInstance(Guid rclsid, IntPtr pUnkOuter, CLSCTX dwClsContext, Guid riid, IntPtr& comObject);
    internal static void CreateComInstance(Guid clsid, CLSCTX clsctx, Guid riid, ComObject comObject);
    internal static bool TryCreateComInstance(Guid clsid, CLSCTX clsctx, Guid riid, ComObject comObject);
    internal static bool CloseHandle(IntPtr handle);
    public static IntPtr GetProcAddress(IntPtr handle, string dllFunctionToImport);
    private static IntPtr GetProcAddress_(IntPtr hModule, string procName);
    public static int ComputeHashFNVModified(Byte[] data);
    public static void Dispose(T& comObject);
    public static T[] ToArray(IEnumerable`1<T> source);
    public static bool Any(IEnumerable`1<T> source);
    [IteratorStateMachineAttribute("SharpDX.Utilities/<SelectMany>d__66`2")]
public static IEnumerable`1<TResult> SelectMany(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TResult>> selector);
    [IteratorStateMachineAttribute("SharpDX.Utilities/<Distinct>d__67`1")]
public static IEnumerable`1<TSource> Distinct(IEnumerable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    public static bool IsTypeInheritFrom(Type type, string parentType);
}
public class SharpDX.Win32.BitmapInfoHeader : ValueType {
    public int SizeInBytes;
    public int Width;
    public int Height;
    public short PlaneCount;
    public short BitCount;
    public int Compression;
    public int SizeImage;
    public int XPixelsPerMeter;
    public int YPixelsPerMeter;
    public int ColorUsedCount;
    public int ColorImportantCount;
}
public class SharpDX.Win32.ComBaseStreamNative : object {
    [CompilerGeneratedAttribute]
private IDisposable <Callback>k__BackingField;
    public IDisposable Callback { get; public set; }
    [CompilerGeneratedAttribute]
public IDisposable get_Callback();
    [CompilerGeneratedAttribute]
public void set_Callback(IDisposable value);
}
[FlagsAttribute]
public enum SharpDX.Win32.CommitFlags : Enum {
    public int value__;
    public static CommitFlags Default;
    public static CommitFlags Overwrite;
    public static CommitFlags OnlyCurrent;
    public static CommitFlags DangerouslyCommitMerelyToDiskCache;
    public static CommitFlags Consolidate;
}
[GuidAttribute("0000000c-0000-0000-C000-000000000046")]
public class SharpDX.Win32.ComStream : ComStreamBase {
    public ComStream(IntPtr nativePtr);
    public static ComStream op_Explicit(IntPtr nativePtr);
    public sealed virtual long Seek(long dlibMove, SeekOrigin dwOrigin);
    public sealed virtual void SetSize(long libNewSize);
    public sealed virtual long CopyTo(IStream stmRef, long cb, Int64& cbWrittenRef);
    public sealed virtual void Commit(CommitFlags grfCommitFlags);
    public sealed virtual void Revert();
    public sealed virtual void LockRegion(long libOffset, long cb, LockType dwLockType);
    public sealed virtual void UnlockRegion(long libOffset, long cb, LockType dwLockType);
    public sealed virtual StorageStatistics GetStatistics(StorageStatisticsFlags grfStatFlag);
    public sealed virtual IStream Clone();
}
[GuidAttribute("0c733a30-2a1c-11ce-ade5-00aa0044773d")]
public class SharpDX.Win32.ComStreamBase : ComObject {
    public ComStreamBase(IntPtr nativePtr);
    public static ComStreamBase op_Explicit(IntPtr nativePtr);
    public sealed virtual int Read(IntPtr vRef, int cb);
    public sealed virtual int Write(IntPtr vRef, int cb);
}
internal class SharpDX.Win32.ComStreamBaseShadow : ComObjectShadow {
    private static ComStreamBaseVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static ComStreamBaseShadow();
    protected virtual CppObjectVtbl get_GetVtbl();
}
[GuidAttribute("0000000c-0000-0000-C000-000000000046")]
internal class SharpDX.Win32.ComStreamProxy : CallbackBase {
    private Stream sourceStream;
    private Byte[] tempBuffer;
    public ComStreamProxy(Stream sourceStream);
    public sealed virtual int Read(IntPtr buffer, int numberOfBytesToRead);
    public sealed virtual int Write(IntPtr buffer, int numberOfBytesToWrite);
    public sealed virtual long Seek(long offset, SeekOrigin origin);
    public sealed virtual void SetSize(long newSize);
    public sealed virtual long CopyTo(IStream streamDest, long numberOfBytesToCopy, Int64& bytesWritten);
    public sealed virtual void Commit(CommitFlags commitFlags);
    public sealed virtual void Revert();
    public sealed virtual void LockRegion(long offset, long numberOfBytesToLock, LockType dwLockType);
    public sealed virtual void UnlockRegion(long offset, long numberOfBytesToLock, LockType dwLockType);
    public sealed virtual StorageStatistics GetStatistics(StorageStatisticsFlags storageStatisticsFlags);
    public sealed virtual IStream Clone();
    protected virtual void Dispose(bool disposing);
}
internal class SharpDX.Win32.ComStreamShadow : ComStreamBaseShadow {
    private static ComStreamVtbl Vtbl;
    protected CppObjectVtbl GetVtbl { get; }
    private static ComStreamShadow();
    protected virtual CppObjectVtbl get_GetVtbl();
    public static IntPtr ToIntPtr(IStream stream);
}
internal class SharpDX.Win32.ComStringEnumerator : object {
    private IEnumString enumString;
    private string current;
    public string Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public ComStringEnumerator(IntPtr ptrToIEnumString);
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual string get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum SharpDX.Win32.ErrorCode : Enum {
    public int value__;
    public static ErrorCode Success;
    public static ErrorCode InvalidFunction;
    public static ErrorCode FileNotFound;
    public static ErrorCode PathNotFound;
    public static ErrorCode TooManyOpenFiles;
    public static ErrorCode AccessDenied;
    public static ErrorCode InvalidHandle;
    public static ErrorCode ArenaTrashed;
    public static ErrorCode NotEnoughMemory;
    public static ErrorCode InvalidBlock;
    public static ErrorCode BadEnvironment;
    public static ErrorCode BadFormat;
    public static ErrorCode InvalidAccess;
    public static ErrorCode InvalidData;
    public static ErrorCode Outofmemory;
    public static ErrorCode InvalidDrive;
    public static ErrorCode CurrentDirectory;
    public static ErrorCode NotSameDevice;
    public static ErrorCode NoMoreFiles;
    public static ErrorCode WriteProtect;
    public static ErrorCode BadUnit;
    public static ErrorCode NotReady;
    public static ErrorCode BadCommand;
    public static ErrorCode Crc;
    public static ErrorCode BadLength;
    public static ErrorCode Seek;
    public static ErrorCode NotDosDisk;
    public static ErrorCode SectorNotFound;
    public static ErrorCode OutOfPaper;
    public static ErrorCode WriteFault;
    public static ErrorCode ReadFault;
    public static ErrorCode GenFailure;
    public static ErrorCode SharingViolation;
    public static ErrorCode LockViolation;
    public static ErrorCode WrongDisk;
    public static ErrorCode SharingBufferExceeded;
    public static ErrorCode HandleEof;
    public static ErrorCode HandleDiskFull;
    public static ErrorCode NotSupported;
    public static ErrorCode RemNotList;
    public static ErrorCode DupName;
    public static ErrorCode BadNetpath;
    public static ErrorCode NetworkBusy;
    public static ErrorCode DevNotExist;
    public static ErrorCode TooManyCmds;
    public static ErrorCode AdapHdwErr;
    public static ErrorCode BadNetResp;
    public static ErrorCode UnexpNetErr;
    public static ErrorCode BadRemAdap;
    public static ErrorCode PrintqFull;
    public static ErrorCode NoSpoolSpace;
    public static ErrorCode PrintCancelled;
    public static ErrorCode NetnameDeleted;
    public static ErrorCode NetworkAccessDenied;
    public static ErrorCode BadDevType;
    public static ErrorCode BadNetName;
    public static ErrorCode TooManyNames;
    public static ErrorCode TooManySess;
    public static ErrorCode SharingPaused;
    public static ErrorCode ReqNotAccep;
    public static ErrorCode RedirPaused;
    public static ErrorCode FileExists;
    public static ErrorCode CannotMake;
    public static ErrorCode FailI24;
    public static ErrorCode OutOfStructures;
    public static ErrorCode AlreadyAssigned;
    public static ErrorCode InvalidPassword;
    public static ErrorCode InvalidParameter;
    public static ErrorCode NetWriteFault;
    public static ErrorCode NoProcSlots;
    public static ErrorCode TooManySemaphores;
    public static ErrorCode ExclSemAlreadyOwned;
    public static ErrorCode SemIsSet;
    public static ErrorCode TooManySemRequests;
    public static ErrorCode InvalidAtInterruptTime;
    public static ErrorCode SemOwnerDied;
    public static ErrorCode SemUserLimit;
    public static ErrorCode DiskChange;
    public static ErrorCode DriveLocked;
    public static ErrorCode BrokenPipe;
    public static ErrorCode OpenFailed;
    public static ErrorCode BufferOverflow;
    public static ErrorCode DiskFull;
    public static ErrorCode NoMoreSearchHandles;
    public static ErrorCode InvalidTargetHandle;
    public static ErrorCode InvalidCategory;
    public static ErrorCode InvalidVerifySwitch;
    public static ErrorCode BadDriverLevel;
    public static ErrorCode CallNotImplemented;
    public static ErrorCode SemTimeout;
    public static ErrorCode InsufficientBuffer;
    public static ErrorCode InvalidName;
    public static ErrorCode InvalidLevel;
    public static ErrorCode NoVolumeLabel;
    public static ErrorCode ModNotFound;
    public static ErrorCode ProcNotFound;
    public static ErrorCode WaitNoChildren;
    public static ErrorCode ChildNotComplete;
    public static ErrorCode DirectAccessHandle;
    public static ErrorCode NegativeSeek;
    public static ErrorCode SeekOnDevice;
    public static ErrorCode IsJoinTarget;
    public static ErrorCode IsJoined;
    public static ErrorCode IsSubsted;
    public static ErrorCode NotJoined;
    public static ErrorCode NotSubsted;
    public static ErrorCode JoinToJoin;
    public static ErrorCode SubstToSubst;
    public static ErrorCode JoinToSubst;
    public static ErrorCode SubstToJoin;
    public static ErrorCode BusyDrive;
    public static ErrorCode SameDrive;
    public static ErrorCode DirNotRoot;
    public static ErrorCode DirNotEmpty;
    public static ErrorCode IsSubstPath;
    public static ErrorCode IsJoinPath;
    public static ErrorCode PathBusy;
    public static ErrorCode IsSubstTarget;
    public static ErrorCode SystemTrace;
    public static ErrorCode InvalidEventCount;
    public static ErrorCode TooManyMuxwaiters;
    public static ErrorCode InvalidListFormat;
    public static ErrorCode LabelTooLong;
    public static ErrorCode TooManyTcbs;
    public static ErrorCode SignalRefused;
    public static ErrorCode Discarded;
    public static ErrorCode NotLocked;
    public static ErrorCode BadThreadidAddr;
    public static ErrorCode BadArguments;
    public static ErrorCode BadPathname;
    public static ErrorCode SignalPending;
    public static ErrorCode MaxThrdsReached;
    public static ErrorCode LockFailed;
    public static ErrorCode Busy;
    public static ErrorCode DeviceSupportInProgress;
    public static ErrorCode CancelViolation;
    public static ErrorCode AtomicLocksNotSupported;
    public static ErrorCode InvalidSegmentNumber;
    public static ErrorCode InvalidOrdinal;
    public static ErrorCode AlreadyExists;
    public static ErrorCode InvalidFlagNumber;
    public static ErrorCode SemNotFound;
    public static ErrorCode InvalidStartingCodeseg;
    public static ErrorCode InvalidStackseg;
    public static ErrorCode InvalidModuletype;
    public static ErrorCode InvalidExeSignature;
    public static ErrorCode ExeMarkedInvalid;
    public static ErrorCode BadExeFormat;
    public static ErrorCode IteratedDataExceeds64k;
    public static ErrorCode InvalidMinallocsize;
    public static ErrorCode DynlinkFromInvalidRing;
    public static ErrorCode IoplNotEnabled;
    public static ErrorCode InvalidSegdpl;
    public static ErrorCode AutodatasegExceeds64k;
    public static ErrorCode Ring2segMustBeMovable;
    public static ErrorCode RelocChainXeedsSeglim;
    public static ErrorCode InfloopInRelocChain;
    public static ErrorCode EnvvarNotFound;
    public static ErrorCode NoSignalSent;
    public static ErrorCode FilenameExcedRange;
    public static ErrorCode Ring2StackInUse;
    public static ErrorCode MetaExpansionTooLong;
    public static ErrorCode InvalidSignalNumber;
    public static ErrorCode Thread1Inactive;
    public static ErrorCode Locked;
    public static ErrorCode TooManyModules;
    public static ErrorCode NestingNotAllowed;
    public static ErrorCode ExeMachineTypeMismatch;
    public static ErrorCode ExeCannotModifySignedBinary;
    public static ErrorCode ExeCannotModifyStrongSignedBinary;
    public static ErrorCode FileCheckedOut;
    public static ErrorCode CheckoutRequired;
    public static ErrorCode BadFileType;
    public static ErrorCode FileTooLarge;
    public static ErrorCode FormsAuthRequired;
    public static ErrorCode VirusInfected;
    public static ErrorCode VirusDeleted;
    public static ErrorCode PipeLocal;
    public static ErrorCode BadPipe;
    public static ErrorCode PipeBusy;
    public static ErrorCode NoData;
    public static ErrorCode PipeNotConnected;
    public static ErrorCode MoreData;
    public static ErrorCode NoWorkDone;
    public static ErrorCode VcDisconnected;
    public static ErrorCode InvalidEaName;
    public static ErrorCode EaListInconsistent;
    public static ErrorCode NoMoreItems;
    public static ErrorCode CannotCopy;
    public static ErrorCode Directory;
    public static ErrorCode EasDidntFit;
    public static ErrorCode EaFileCorrupt;
    public static ErrorCode EaTableFull;
    public static ErrorCode InvalidEaHandle;
    public static ErrorCode EasNotSupported;
    public static ErrorCode NotOwner;
    public static ErrorCode TooManyPosts;
    public static ErrorCode PartialCopy;
    public static ErrorCode OplockNotGranted;
    public static ErrorCode InvalidOplockProtocol;
    public static ErrorCode DiskTooFragmented;
    public static ErrorCode DeletePending;
    public static ErrorCode IncompatibleWithGlobalShortNameRegistrySetting;
    public static ErrorCode ShortNamesNotEnabledOnVolume;
    public static ErrorCode SecurityStreamIsInconsistent;
    public static ErrorCode InvalidLockRange;
    public static ErrorCode ImageSubsystemNotPresent;
    public static ErrorCode NotificationGuidAlreadyDefined;
    public static ErrorCode InvalidExceptionHandler;
    public static ErrorCode DuplicatePrivileges;
    public static ErrorCode NoRangesProcessed;
    public static ErrorCode NotAllowedOnSystemFile;
    public static ErrorCode DiskResourcesExhausted;
    public static ErrorCode InvalidToken;
    public static ErrorCode DeviceFeatureNotSupported;
    public static ErrorCode MrMidNotFound;
    public static ErrorCode ScopeNotFound;
    public static ErrorCode UndefinedScope;
    public static ErrorCode InvalidCap;
    public static ErrorCode DeviceUnreachable;
    public static ErrorCode DeviceNoResources;
    public static ErrorCode DataChecksumError;
    public static ErrorCode IntermixedKernelEaOperation;
    public static ErrorCode FileLevelTrimNotSupported;
    public static ErrorCode OffsetAlignmentViolation;
    public static ErrorCode InvalidFieldInParameterList;
    public static ErrorCode OperationInProgress;
    public static ErrorCode BadDevicePath;
    public static ErrorCode TooManyDescriptors;
    public static ErrorCode ScrubDataDisabled;
    public static ErrorCode NotRedundantStorage;
    public static ErrorCode ResidentFileNotSupported;
    public static ErrorCode CompressedFileNotSupported;
    public static ErrorCode DirectoryNotSupported;
    public static ErrorCode NotReadFromCopy;
    public static ErrorCode FtWriteFailure;
    public static ErrorCode FtDiScanRequired;
    public static ErrorCode InvalidKernelInfoVersion;
    public static ErrorCode InvalidPepInfoVersion;
    public static ErrorCode ObjectNotExternallyBacked;
    public static ErrorCode ExternalBackingProviderUnknown;
    public static ErrorCode CompressionNotBeneficial;
    public static ErrorCode StorageTopologyIdMismatch;
    public static ErrorCode BlockedByParentalControls;
    public static ErrorCode BlockTooManyReferences;
    public static ErrorCode MarkedToDisallowWrites;
    public static ErrorCode EnclaveFailure;
    public static ErrorCode FailNoactionReboot;
    public static ErrorCode FailShutdown;
    public static ErrorCode FailRestart;
    public static ErrorCode MaxSessionsReached;
    public static ErrorCode NetworkAccessDeniedEdp;
    public static ErrorCode DeviceHintNameBufferTooSmall;
    public static ErrorCode EdpPolicyDeniesOperation;
    public static ErrorCode EdpDplPolicyCantBeSatisfied;
    public static ErrorCode CloudFileSyncRootMetadataCorrupt;
    public static ErrorCode DeviceInMaintenance;
    public static ErrorCode NotSupportedOnDax;
    public static ErrorCode DaxMappingExists;
    public static ErrorCode CloudFileProviderNotRunning;
    public static ErrorCode CloudFileMetadataCorrupt;
    public static ErrorCode CloudFileMetadataTooLarge;
    public static ErrorCode CloudFilePropertyBlobTooLarge;
    public static ErrorCode CloudFilePropertyBlobChecksumMismatch;
    public static ErrorCode ChildProcessBlocked;
    public static ErrorCode StorageLostDataPersistence;
    public static ErrorCode FileSystemVirtualizationUnavailable;
    public static ErrorCode FileSystemVirtualizationMetadataCorrupt;
    public static ErrorCode FileSystemVirtualizationBusy;
    public static ErrorCode FileSystemVirtualizationProviderUnknown;
    public static ErrorCode GdiHandleLeak;
    public static ErrorCode CloudFileTooManyPropertyBlobs;
    public static ErrorCode CloudFilePropertyVersionNotSupported;
    public static ErrorCode NotACloudFile;
    public static ErrorCode CloudFileNotInSync;
    public static ErrorCode CloudFileAlreadyConnected;
    public static ErrorCode CloudFileNotSupported;
    public static ErrorCode CloudFileInvalidRequest;
    public static ErrorCode CloudFileReadOnlyVolume;
    public static ErrorCode CloudFileConnectedProviderOnly;
    public static ErrorCode CloudFileValidationFailed;
    public static ErrorCode Smb1NotAvailable;
    public static ErrorCode FileSystemVirtualizationInvalidOperation;
    public static ErrorCode CloudFileAuthenticationFailed;
    public static ErrorCode CloudFileInsufficientResources;
    public static ErrorCode CloudFileNetworkUnavailable;
    public static ErrorCode CloudFileUnsuccessful;
    public static ErrorCode CloudFileNotUnderSyncRoot;
    public static ErrorCode CloudFileInUse;
    public static ErrorCode CloudFilePinned;
    public static ErrorCode CloudFileRequestAborted;
    public static ErrorCode CloudFilePropertyCorrupt;
    public static ErrorCode CloudFileAccessDenied;
    public static ErrorCode CloudFileIncompatibleHardlinks;
    public static ErrorCode CloudFilePropertyLockConflict;
    public static ErrorCode CloudFileRequestCanceled;
    public static ErrorCode ExternalSyskeyNotSupported;
    public static ErrorCode ThreadModeAlreadyBackground;
    public static ErrorCode ThreadModeNotBackground;
    public static ErrorCode ProcessModeAlreadyBackground;
    public static ErrorCode ProcessModeNotBackground;
    public static ErrorCode CapauthzNotDevunlocked;
    public static ErrorCode CapauthzChangeType;
    public static ErrorCode CapauthzNotProvisioned;
    public static ErrorCode CapauthzNotAuthorized;
    public static ErrorCode CapauthzNoPolicy;
    public static ErrorCode CapauthzDbCorrupted;
    public static ErrorCode CapauthzSccdInvalidCatalog;
    public static ErrorCode CapauthzSccdNoAuthEntity;
    public static ErrorCode CapauthzSccdParseError;
    public static ErrorCode CapauthzSccdDevModeRequired;
    public static ErrorCode CapauthzSccdNoCapabilityMatch;
    public static ErrorCode PnpQueryRemoveDeviceTimeout;
    public static ErrorCode PnpQueryRemoveRelatedDeviceTimeout;
    public static ErrorCode PnpQueryRemoveUnrelatedDeviceTimeout;
    public static ErrorCode DeviceHardwareError;
    public static ErrorCode InvalidAddress;
    public static ErrorCode VrfCfgEnabled;
    public static ErrorCode PartitionTerminating;
    public static ErrorCode UserProfileLoad;
    public static ErrorCode ArithmeticOverflow;
    public static ErrorCode PipeConnected;
    public static ErrorCode PipeListening;
    public static ErrorCode VerifierStop;
    public static ErrorCode AbiosError;
    public static ErrorCode Wx86Warning;
    public static ErrorCode Wx86Error;
    public static ErrorCode TimerNotCanceled;
    public static ErrorCode Unwind;
    public static ErrorCode BadStack;
    public static ErrorCode InvalidUnwindTarget;
    public static ErrorCode InvalidPortAttributes;
    public static ErrorCode PortMessageTooLong;
    public static ErrorCode InvalidQuotaLower;
    public static ErrorCode DeviceAlreadyAttached;
    public static ErrorCode InstructionMisalignment;
    public static ErrorCode ProfilingNotStarted;
    public static ErrorCode ProfilingNotStopped;
    public static ErrorCode CouldNotInterpret;
    public static ErrorCode ProfilingAtLimit;
    public static ErrorCode CantWait;
    public static ErrorCode CantTerminateSelf;
    public static ErrorCode UnexpectedMmCreateErr;
    public static ErrorCode UnexpectedMmMapError;
    public static ErrorCode UnexpectedMmExtendErr;
    public static ErrorCode BadFunctionTable;
    public static ErrorCode NoGuidTranslation;
    public static ErrorCode InvalidLdtSize;
    public static ErrorCode InvalidLdtOffset;
    public static ErrorCode InvalidLdtDescriptor;
    public static ErrorCode TooManyThreads;
    public static ErrorCode ThreadNotInProcess;
    public static ErrorCode PagefileQuotaExceeded;
    public static ErrorCode LogonServerConflict;
    public static ErrorCode SynchronizationRequired;
    public static ErrorCode NetOpenFailed;
    public static ErrorCode IoPrivilegeFailed;
    public static ErrorCode ControlCExit;
    public static ErrorCode MissingSystemfile;
    public static ErrorCode UnhandledException;
    public static ErrorCode AppInitFailure;
    public static ErrorCode PagefileCreateFailed;
    public static ErrorCode InvalidImageHash;
    public static ErrorCode NoPagefile;
    public static ErrorCode IllegalFloatContext;
    public static ErrorCode NoEventPair;
    public static ErrorCode DomainCtrlrConfigError;
    public static ErrorCode IllegalCharacter;
    public static ErrorCode UndefinedCharacter;
    public static ErrorCode FloppyVolume;
    public static ErrorCode BiosFailedToConnectInterrupt;
    public static ErrorCode BackupController;
    public static ErrorCode MutantLimitExceeded;
    public static ErrorCode FsDriverRequired;
    public static ErrorCode CannotLoadRegistryFile;
    public static ErrorCode DebugAttachFailed;
    public static ErrorCode SystemProcessTerminated;
    public static ErrorCode DataNotAccepted;
    public static ErrorCode VdmHardError;
    public static ErrorCode DriverCancelTimeout;
    public static ErrorCode ReplyMessageMismatch;
    public static ErrorCode LostWritebehindData;
    public static ErrorCode ClientServerParametersInvalid;
    public static ErrorCode NotTinyStream;
    public static ErrorCode StackOverflowRead;
    public static ErrorCode ConvertToLarge;
    public static ErrorCode FoundOutOfScope;
    public static ErrorCode AllocateBucket;
    public static ErrorCode MarshallOverflow;
    public static ErrorCode InvalidVariant;
    public static ErrorCode BadCompressionBuffer;
    public static ErrorCode AuditFailed;
    public static ErrorCode TimerResolutionNotSet;
    public static ErrorCode InsufficientLogonInfo;
    public static ErrorCode BadDllEntrypoint;
    public static ErrorCode BadServiceEntrypoint;
    public static ErrorCode IpAddressConflict1;
    public static ErrorCode IpAddressConflict2;
    public static ErrorCode RegistryQuotaLimit;
    public static ErrorCode NoCallbackActive;
    public static ErrorCode PwdTooShort;
    public static ErrorCode PwdTooRecent;
    public static ErrorCode PwdHistoryConflict;
    public static ErrorCode UnsupportedCompression;
    public static ErrorCode InvalidHwProfile;
    public static ErrorCode InvalidPlugplayDevicePath;
    public static ErrorCode QuotaListInconsistent;
    public static ErrorCode EvaluationExpiration;
    public static ErrorCode IllegalDllRelocation;
    public static ErrorCode DllInitFailedLogoff;
    public static ErrorCode ValidateContinue;
    public static ErrorCode NoMoreMatches;
    public static ErrorCode RangeListConflict;
    public static ErrorCode ServerSidMismatch;
    public static ErrorCode CantEnableDenyOnly;
    public static ErrorCode FloatMultipleFaults;
    public static ErrorCode FloatMultipleTraps;
    public static ErrorCode Nointerface;
    public static ErrorCode DriverFailedSleep;
    public static ErrorCode CorruptSystemFile;
    public static ErrorCode CommitmentMinimum;
    public static ErrorCode PnpRestartEnumeration;
    public static ErrorCode SystemImageBadSignature;
    public static ErrorCode PnpRebootRequired;
    public static ErrorCode InsufficientPower;
    public static ErrorCode MultipleFaultViolation;
    public static ErrorCode SystemShutdown;
    public static ErrorCode PortNotSet;
    public static ErrorCode DsVersionCheckFailure;
    public static ErrorCode RangeNotFound;
    public static ErrorCode NotSafeModeDriver;
    public static ErrorCode FailedDriverEntry;
    public static ErrorCode DeviceEnumerationError;
    public static ErrorCode MountPointNotResolved;
    public static ErrorCode InvalidDeviceObjectParameter;
    public static ErrorCode McaOccured;
    public static ErrorCode DriverDatabaseError;
    public static ErrorCode SystemHiveTooLarge;
    public static ErrorCode DriverFailedPriorUnload;
    public static ErrorCode VolsnapPrepareHibernate;
    public static ErrorCode HibernationFailure;
    public static ErrorCode PwdTooLong;
    public static ErrorCode FileSystemLimitation;
    public static ErrorCode AssertionFailure;
    public static ErrorCode AcpiError;
    public static ErrorCode WowAssertion;
    public static ErrorCode PnpBadMpsTable;
    public static ErrorCode PnpTranslationFailed;
    public static ErrorCode PnpIrqTranslationFailed;
    public static ErrorCode PnpInvalidId;
    public static ErrorCode WakeSystemDebugger;
    public static ErrorCode HandlesClosed;
    public static ErrorCode ExtraneousInformation;
    public static ErrorCode RxactCommitNecessary;
    public static ErrorCode MediaCheck;
    public static ErrorCode GuidSubstitutionMade;
    public static ErrorCode StoppedOnSymlink;
    public static ErrorCode Longjump;
    public static ErrorCode PlugplayQueryVetoed;
    public static ErrorCode UnwindConsolidate;
    public static ErrorCode RegistryHiveRecovered;
    public static ErrorCode DllMightBeInsecure;
    public static ErrorCode DllMightBeIncompatible;
    public static ErrorCode DbgExceptionNotHandled;
    public static ErrorCode DbgReplyLater;
    public static ErrorCode DbgUnableToProvideHandle;
    public static ErrorCode DbgTerminateThread;
    public static ErrorCode DbgTerminateProcess;
    public static ErrorCode DbgControlC;
    public static ErrorCode DbgPrintexceptionC;
    public static ErrorCode DbgRipexception;
    public static ErrorCode DbgControlBreak;
    public static ErrorCode DbgCommandException;
    public static ErrorCode ObjectNameExists;
    public static ErrorCode ThreadWasSuspended;
    public static ErrorCode ImageNotAtBase;
    public static ErrorCode RxactStateCreated;
    public static ErrorCode SegmentNotification;
    public static ErrorCode BadCurrentDirectory;
    public static ErrorCode FtReadRecoveryFromBackup;
    public static ErrorCode FtWriteRecovery;
    public static ErrorCode ImageMachineTypeMismatch;
    public static ErrorCode ReceivePartial;
    public static ErrorCode ReceiveExpedited;
    public static ErrorCode ReceivePartialExpedited;
    public static ErrorCode EventDone;
    public static ErrorCode EventPending;
    public static ErrorCode CheckingFileSystem;
    public static ErrorCode FatalAppExit;
    public static ErrorCode PredefinedHandle;
    public static ErrorCode WasUnlocked;
    public static ErrorCode ServiceNotification;
    public static ErrorCode WasLocked;
    public static ErrorCode LogHardError;
    public static ErrorCode AlreadyWin32;
    public static ErrorCode ImageMachineTypeMismatchExe;
    public static ErrorCode NoYieldPerformed;
    public static ErrorCode TimerResumeIgnored;
    public static ErrorCode ArbitrationUnhandled;
    public static ErrorCode CardbusNotSupported;
    public static ErrorCode MpProcessorMismatch;
    public static ErrorCode Hibernated;
    public static ErrorCode ResumeHibernation;
    public static ErrorCode FirmwareUpdated;
    public static ErrorCode DriversLeakingLockedPages;
    public static ErrorCode WakeSystem;
    public static ErrorCode Wait1;
    public static ErrorCode Wait2;
    public static ErrorCode Wait3;
    public static ErrorCode Wait63;
    public static ErrorCode AbandonedWait0;
    public static ErrorCode AbandonedWait63;
    public static ErrorCode UserApc;
    public static ErrorCode KernelApc;
    public static ErrorCode Alerted;
    public static ErrorCode ElevationRequired;
    public static ErrorCode Reparse;
    public static ErrorCode OplockBreakInProgress;
    public static ErrorCode VolumeMounted;
    public static ErrorCode RxactCommitted;
    public static ErrorCode NotifyCleanup;
    public static ErrorCode PrimaryTransportConnectFailed;
    public static ErrorCode PageFaultTransition;
    public static ErrorCode PageFaultDemandZero;
    public static ErrorCode PageFaultCopyOnWrite;
    public static ErrorCode PageFaultGuardPage;
    public static ErrorCode PageFaultPagingFile;
    public static ErrorCode CachePageLocked;
    public static ErrorCode CrashDump;
    public static ErrorCode BufferAllZeros;
    public static ErrorCode ReparseObject;
    public static ErrorCode ResourceRequirementsChanged;
    public static ErrorCode TranslationComplete;
    public static ErrorCode NothingToTerminate;
    public static ErrorCode ProcessNotInJob;
    public static ErrorCode ProcessInJob;
    public static ErrorCode VolsnapHibernateReady;
    public static ErrorCode FsfilterOpCompletedSuccessfully;
    public static ErrorCode InterruptVectorAlreadyConnected;
    public static ErrorCode InterruptStillConnected;
    public static ErrorCode WaitForOplock;
    public static ErrorCode DbgExceptionHandled;
    public static ErrorCode DbgContinue;
    public static ErrorCode CallbackPopStack;
    public static ErrorCode CompressionDisabled;
    public static ErrorCode Cantfetchbackwards;
    public static ErrorCode Cantscrollbackwards;
    public static ErrorCode Rowsnotreleased;
    public static ErrorCode BadAccessorFlags;
    public static ErrorCode ErrorsEncountered;
    public static ErrorCode NotCapable;
    public static ErrorCode RequestOutOfSequence;
    public static ErrorCode VersionParseError;
    public static ErrorCode Badstartposition;
    public static ErrorCode MemoryHardware;
    public static ErrorCode DiskRepairDisabled;
    public static ErrorCode InsufficientResourceForSpecifiedSharedSectionSize;
    public static ErrorCode SystemPowerstateTransition;
    public static ErrorCode SystemPowerstateComplexTransition;
    public static ErrorCode McaException;
    public static ErrorCode AccessAuditByPolicy;
    public static ErrorCode AccessDisabledNoSaferUiByPolicy;
    public static ErrorCode AbandonHiberfile;
    public static ErrorCode LostWritebehindDataNetworkDisconnected;
    public static ErrorCode LostWritebehindDataNetworkServerError;
    public static ErrorCode LostWritebehindDataLocalDiskError;
    public static ErrorCode BadMcfgTable;
    public static ErrorCode DiskRepairRedirected;
    public static ErrorCode DiskRepairUnsuccessful;
    public static ErrorCode CorruptLogOverfull;
    public static ErrorCode CorruptLogCorrupted;
    public static ErrorCode CorruptLogUnavailable;
    public static ErrorCode CorruptLogDeletedFull;
    public static ErrorCode CorruptLogCleared;
    public static ErrorCode OrphanNameExhausted;
    public static ErrorCode OplockSwitchedToNewHandle;
    public static ErrorCode CannotGrantRequestedOplock;
    public static ErrorCode CannotBreakOplock;
    public static ErrorCode OplockHandleClosed;
    public static ErrorCode NoAceCondition;
    public static ErrorCode InvalidAceCondition;
    public static ErrorCode FileHandleRevoked;
    public static ErrorCode ImageAtDifferentBase;
    public static ErrorCode EncryptedIoNotPossible;
    public static ErrorCode FileMetadataOptimizationInProgress;
    public static ErrorCode QuotaActivity;
    public static ErrorCode HandleRevoked;
    public static ErrorCode CallbackInvokeInline;
    public static ErrorCode CpuSetInvalid;
    public static ErrorCode EnclaveNotTerminated;
    public static ErrorCode EaAccessDenied;
    public static ErrorCode OperationAborted;
    public static ErrorCode IoIncomplete;
    public static ErrorCode IoPending;
    public static ErrorCode Noaccess;
    public static ErrorCode Swaperror;
    public static ErrorCode StackOverflow;
    public static ErrorCode InvalidMessage;
    public static ErrorCode CanNotComplete;
    public static ErrorCode InvalidFlags;
    public static ErrorCode UnrecognizedVolume;
    public static ErrorCode FileInvalid;
    public static ErrorCode FullscreenMode;
    public static ErrorCode NoToken;
    public static ErrorCode Baddb;
    public static ErrorCode Badkey;
    public static ErrorCode Cantopen;
    public static ErrorCode Cantread;
    public static ErrorCode Cantwrite;
    public static ErrorCode RegistryRecovered;
    public static ErrorCode RegistryCorrupt;
    public static ErrorCode RegistryIoFailed;
    public static ErrorCode NotRegistryFile;
    public static ErrorCode KeyDeleted;
    public static ErrorCode NoLogSpace;
    public static ErrorCode KeyHasChildren;
    public static ErrorCode ChildMustBeVolatile;
    public static ErrorCode NotifyEnumDir;
    public static ErrorCode DependentServicesRunning;
    public static ErrorCode InvalidServiceControl;
    public static ErrorCode ServiceRequestTimeout;
    public static ErrorCode ServiceNoThread;
    public static ErrorCode ServiceDatabaseLocked;
    public static ErrorCode ServiceAlreadyRunning;
    public static ErrorCode InvalidServiceAccount;
    public static ErrorCode ServiceDisabled;
    public static ErrorCode CircularDependency;
    public static ErrorCode ServiceDoesNotExist;
    public static ErrorCode ServiceCannotAcceptCtrl;
    public static ErrorCode ServiceNotActive;
    public static ErrorCode FailedServiceControllerConnect;
    public static ErrorCode ExceptionInService;
    public static ErrorCode DatabaseDoesNotExist;
    public static ErrorCode ServiceSpecificError;
    public static ErrorCode ProcessAborted;
    public static ErrorCode ServiceDependencyFail;
    public static ErrorCode ServiceLogonFailed;
    public static ErrorCode ServiceStartHang;
    public static ErrorCode InvalidServiceLock;
    public static ErrorCode ServiceMarkedForDelete;
    public static ErrorCode ServiceExists;
    public static ErrorCode AlreadyRunningLkg;
    public static ErrorCode ServiceDependencyDeleted;
    public static ErrorCode BootAlreadyAccepted;
    public static ErrorCode ServiceNeverStarted;
    public static ErrorCode DuplicateServiceName;
    public static ErrorCode DifferentServiceAccount;
    public static ErrorCode CannotDetectDriverFailure;
    public static ErrorCode CannotDetectProcessAbort;
    public static ErrorCode NoRecoveryProgram;
    public static ErrorCode ServiceNotInExe;
    public static ErrorCode NotSafebootService;
    public static ErrorCode EndOfMedia;
    public static ErrorCode FilemarkDetected;
    public static ErrorCode BeginningOfMedia;
    public static ErrorCode SetmarkDetected;
    public static ErrorCode NoDataDetected;
    public static ErrorCode PartitionFailure;
    public static ErrorCode InvalidBlockLength;
    public static ErrorCode DeviceNotPartitioned;
    public static ErrorCode UnableToLockMedia;
    public static ErrorCode UnableToUnloadMedia;
    public static ErrorCode MediaChanged;
    public static ErrorCode BusReset;
    public static ErrorCode NoMediaInDrive;
    public static ErrorCode NoUnicodeTranslation;
    public static ErrorCode DllInitFailed;
    public static ErrorCode ShutdownInProgress;
    public static ErrorCode NoShutdownInProgress;
    public static ErrorCode IoDevice;
    public static ErrorCode SerialNoDevice;
    public static ErrorCode IrqBusy;
    public static ErrorCode MoreWrites;
    public static ErrorCode CounterTimeout;
    public static ErrorCode FloppyIdMarkNotFound;
    public static ErrorCode FloppyWrongCylinder;
    public static ErrorCode FloppyUnknownError;
    public static ErrorCode FloppyBadRegisters;
    public static ErrorCode DiskRecalibrateFailed;
    public static ErrorCode DiskOperationFailed;
    public static ErrorCode DiskResetFailed;
    public static ErrorCode EomOverflow;
    public static ErrorCode NotEnoughServerMemory;
    public static ErrorCode PossibleDeadlock;
    public static ErrorCode MappedAlignment;
    public static ErrorCode SetPowerStateVetoed;
    public static ErrorCode SetPowerStateFailed;
    public static ErrorCode TooManyLinks;
    public static ErrorCode OldWinVersion;
    public static ErrorCode AppWrongOs;
    public static ErrorCode SingleInstanceApp;
    public static ErrorCode RmodeApp;
    public static ErrorCode InvalidDll;
    public static ErrorCode NoAssociation;
    public static ErrorCode DdeFail;
    public static ErrorCode DllNotFound;
    public static ErrorCode NoMoreUserHandles;
    public static ErrorCode MessageSyncOnly;
    public static ErrorCode SourceElementEmpty;
    public static ErrorCode DestinationElementFull;
    public static ErrorCode IllegalElementAddress;
    public static ErrorCode MagazineNotPresent;
    public static ErrorCode DeviceReinitializationNeeded;
    public static ErrorCode DeviceRequiresCleaning;
    public static ErrorCode DeviceDoorOpen;
    public static ErrorCode DeviceNotConnected;
    public static ErrorCode NotFound;
    public static ErrorCode NoMatch;
    public static ErrorCode SetNotFound;
    public static ErrorCode PointNotFound;
    public static ErrorCode NoTrackingService;
    public static ErrorCode NoVolumeId;
    public static ErrorCode UnableToRemoveReplaced;
    public static ErrorCode UnableToMoveReplacement;
    public static ErrorCode UnableToMoveReplacement2;
    public static ErrorCode JournalDeleteInProgress;
    public static ErrorCode JournalNotActive;
    public static ErrorCode PotentialFileFound;
    public static ErrorCode JournalEntryDeleted;
    public static ErrorCode ShutdownIsScheduled;
    public static ErrorCode ShutdownUsersLoggedOn;
    public static ErrorCode BadDevice;
    public static ErrorCode ConnectionUnavail;
    public static ErrorCode DeviceAlreadyRemembered;
    public static ErrorCode NoNetOrBadPath;
    public static ErrorCode BadProvider;
    public static ErrorCode CannotOpenProfile;
    public static ErrorCode BadProfile;
    public static ErrorCode NotContainer;
    public static ErrorCode ExtendedError;
    public static ErrorCode InvalidGroupname;
    public static ErrorCode InvalidComputername;
    public static ErrorCode InvalidEventname;
    public static ErrorCode InvalidDomainname;
    public static ErrorCode InvalidServicename;
    public static ErrorCode InvalidNetname;
    public static ErrorCode InvalidSharename;
    public static ErrorCode InvalidPasswordname;
    public static ErrorCode InvalidMessagename;
    public static ErrorCode InvalidMessagedest;
    public static ErrorCode SessionCredentialConflict;
    public static ErrorCode RemoteSessionLimitExceeded;
    public static ErrorCode DupDomainname;
    public static ErrorCode NoNetwork;
    public static ErrorCode Cancelled;
    public static ErrorCode UserMappedFile;
    public static ErrorCode ConnectionRefused;
    public static ErrorCode GracefulDisconnect;
    public static ErrorCode AddressAlreadyAssociated;
    public static ErrorCode AddressNotAssociated;
    public static ErrorCode ConnectionInvalid;
    public static ErrorCode ConnectionActive;
    public static ErrorCode NetworkUnreachable;
    public static ErrorCode HostUnreachable;
    public static ErrorCode ProtocolUnreachable;
    public static ErrorCode PortUnreachable;
    public static ErrorCode RequestAborted;
    public static ErrorCode ConnectionAborted;
    public static ErrorCode Retry;
    public static ErrorCode ConnectionCountLimit;
    public static ErrorCode LoginTimeRestriction;
    public static ErrorCode LoginWkstaRestriction;
    public static ErrorCode IncorrectAddress;
    public static ErrorCode AlreadyRegistered;
    public static ErrorCode ServiceNotFound;
    public static ErrorCode NotAuthenticated;
    public static ErrorCode NotLoggedOn;
    public static ErrorCode Continue;
    public static ErrorCode AlreadyInitialized;
    public static ErrorCode NoMoreDevices;
    public static ErrorCode NoSuchSite;
    public static ErrorCode DomainControllerExists;
    public static ErrorCode OnlyIfConnected;
    public static ErrorCode OverrideNochanges;
    public static ErrorCode BadUserProfile;
    public static ErrorCode NotSupportedOnSbs;
    public static ErrorCode ServerShutdownInProgress;
    public static ErrorCode HostDown;
    public static ErrorCode NonAccountSid;
    public static ErrorCode NonDomainSid;
    public static ErrorCode ApphelpBlock;
    public static ErrorCode AccessDisabledByPolicy;
    public static ErrorCode RegNatConsumption;
    public static ErrorCode CscshareOffline;
    public static ErrorCode PkinitFailure;
    public static ErrorCode SmartcardSubsystemFailure;
    public static ErrorCode DowngradeDetected;
    public static ErrorCode MachineLocked;
    public static ErrorCode SmbGuestLogonBlocked;
    public static ErrorCode CallbackSuppliedInvalidData;
    public static ErrorCode SyncForegroundRefreshRequired;
    public static ErrorCode DriverBlocked;
    public static ErrorCode InvalidImportOfNonDll;
    public static ErrorCode AccessDisabledWebblade;
    public static ErrorCode AccessDisabledWebbladeTamper;
    public static ErrorCode RecoveryFailure;
    public static ErrorCode AlreadyFiber;
    public static ErrorCode AlreadyThread;
    public static ErrorCode StackBufferOverrun;
    public static ErrorCode ParameterQuotaExceeded;
    public static ErrorCode DebuggerInactive;
    public static ErrorCode DelayLoadFailed;
    public static ErrorCode VdmDisallowed;
    public static ErrorCode UnidentifiedError;
    public static ErrorCode InvalidCruntimeParameter;
    public static ErrorCode BeyondVdl;
    public static ErrorCode IncompatibleServiceSidType;
    public static ErrorCode DriverProcessTerminated;
    public static ErrorCode ImplementationLimit;
    public static ErrorCode ProcessIsProtected;
    public static ErrorCode ServiceNotifyClientLagging;
    public static ErrorCode DiskQuotaExceeded;
    public static ErrorCode ContentBlocked;
    public static ErrorCode IncompatibleServicePrivilege;
    public static ErrorCode AppHang;
    public static ErrorCode InvalidLabel;
    public static ErrorCode NotAllAssigned;
    public static ErrorCode SomeNotMapped;
    public static ErrorCode NoQuotasForAccount;
    public static ErrorCode LocalUserSessionKey;
    public static ErrorCode NullLmPassword;
    public static ErrorCode UnknownRevision;
    public static ErrorCode RevisionMismatch;
    public static ErrorCode InvalidOwner;
    public static ErrorCode InvalidPrimaryGroup;
    public static ErrorCode NoImpersonationToken;
    public static ErrorCode CantDisableMandatory;
    public static ErrorCode NoLogonServers;
    public static ErrorCode NoSuchLogonSession;
    public static ErrorCode NoSuchPrivilege;
    public static ErrorCode PrivilegeNotHeld;
    public static ErrorCode InvalidAccountName;
    public static ErrorCode UserExists;
    public static ErrorCode NoSuchUser;
    public static ErrorCode GroupExists;
    public static ErrorCode NoSuchGroup;
    public static ErrorCode MemberInGroup;
    public static ErrorCode MemberNotInGroup;
    public static ErrorCode LastAdmin;
    public static ErrorCode WrongPassword;
    public static ErrorCode IllFormedPassword;
    public static ErrorCode PasswordRestriction;
    public static ErrorCode LogonFailure;
    public static ErrorCode AccountRestriction;
    public static ErrorCode InvalidLogonHours;
    public static ErrorCode InvalidWorkstation;
    public static ErrorCode PasswordExpired;
    public static ErrorCode AccountDisabled;
    public static ErrorCode NoneMapped;
    public static ErrorCode TooManyLuidsRequested;
    public static ErrorCode LuidsExhausted;
    public static ErrorCode InvalidSubAuthority;
    public static ErrorCode InvalidAcl;
    public static ErrorCode InvalidSid;
    public static ErrorCode InvalidSecurityDescr;
    public static ErrorCode BadInheritanceAcl;
    public static ErrorCode ServerDisabled;
    public static ErrorCode ServerNotDisabled;
    public static ErrorCode InvalidIdAuthority;
    public static ErrorCode AllottedSpaceExceeded;
    public static ErrorCode InvalidGroupAttributes;
    public static ErrorCode BadImpersonationLevel;
    public static ErrorCode CantOpenAnonymous;
    public static ErrorCode BadValidationClass;
    public static ErrorCode BadTokenType;
    public static ErrorCode NoSecurityOnObject;
    public static ErrorCode CantAccessDomainInfo;
    public static ErrorCode InvalidServerState;
    public static ErrorCode InvalidDomainState;
    public static ErrorCode InvalidDomainRole;
    public static ErrorCode NoSuchDomain;
    public static ErrorCode DomainExists;
    public static ErrorCode DomainLimitExceeded;
    public static ErrorCode InternalDbCorruption;
    public static ErrorCode InternalError;
    public static ErrorCode GenericNotMapped;
    public static ErrorCode BadDescriptorFormat;
    public static ErrorCode NotLogonProcess;
    public static ErrorCode LogonSessionExists;
    public static ErrorCode NoSuchPackage;
    public static ErrorCode BadLogonSessionState;
    public static ErrorCode LogonSessionCollision;
    public static ErrorCode InvalidLogonType;
    public static ErrorCode CannotImpersonate;
    public static ErrorCode RxactInvalidState;
    public static ErrorCode RxactCommitFailure;
    public static ErrorCode SpecialAccount;
    public static ErrorCode SpecialGroup;
    public static ErrorCode SpecialUser;
    public static ErrorCode MembersPrimaryGroup;
    public static ErrorCode TokenAlreadyInUse;
    public static ErrorCode NoSuchAlias;
    public static ErrorCode MemberNotInAlias;
    public static ErrorCode MemberInAlias;
    public static ErrorCode AliasExists;
    public static ErrorCode LogonNotGranted;
    public static ErrorCode TooManySecrets;
    public static ErrorCode SecretTooLong;
    public static ErrorCode InternalDbError;
    public static ErrorCode TooManyContextIds;
    public static ErrorCode LogonTypeNotGranted;
    public static ErrorCode NtCrossEncryptionRequired;
    public static ErrorCode NoSuchMember;
    public static ErrorCode InvalidMember;
    public static ErrorCode TooManySids;
    public static ErrorCode LmCrossEncryptionRequired;
    public static ErrorCode NoInheritance;
    public static ErrorCode FileCorrupt;
    public static ErrorCode DiskCorrupt;
    public static ErrorCode NoUserSessionKey;
    public static ErrorCode LicenseQuotaExceeded;
    public static ErrorCode WrongTargetName;
    public static ErrorCode MutualAuthFailed;
    public static ErrorCode TimeSkew;
    public static ErrorCode CurrentDomainNotAllowed;
    public static ErrorCode InvalidWindowHandle;
    public static ErrorCode InvalidMenuHandle;
    public static ErrorCode InvalidCursorHandle;
    public static ErrorCode InvalidAccelHandle;
    public static ErrorCode InvalidHookHandle;
    public static ErrorCode InvalidDwpHandle;
    public static ErrorCode TlwWithWschild;
    public static ErrorCode CannotFindWndClass;
    public static ErrorCode WindowOfOtherThread;
    public static ErrorCode HotkeyAlreadyRegistered;
    public static ErrorCode ClassAlreadyExists;
    public static ErrorCode ClassDoesNotExist;
    public static ErrorCode ClassHasWindows;
    public static ErrorCode InvalidIndex;
    public static ErrorCode InvalidIconHandle;
    public static ErrorCode PrivateDialogIndex;
    public static ErrorCode ListboxIdNotFound;
    public static ErrorCode NoWildcardCharacters;
    public static ErrorCode ClipboardNotOpen;
    public static ErrorCode HotkeyNotRegistered;
    public static ErrorCode WindowNotDialog;
    public static ErrorCode ControlIdNotFound;
    public static ErrorCode InvalidComboboxMessage;
    public static ErrorCode WindowNotCombobox;
    public static ErrorCode InvalidEditHeight;
    public static ErrorCode DcNotFound;
    public static ErrorCode InvalidHookFilter;
    public static ErrorCode InvalidFilterProc;
    public static ErrorCode HookNeedsHmod;
    public static ErrorCode GlobalOnlyHook;
    public static ErrorCode JournalHookSet;
    public static ErrorCode HookNotInstalled;
    public static ErrorCode InvalidLbMessage;
    public static ErrorCode SetcountOnBadLb;
    public static ErrorCode LbWithoutTabstops;
    public static ErrorCode DestroyObjectOfOtherThread;
    public static ErrorCode ChildWindowMenu;
    public static ErrorCode NoSystemMenu;
    public static ErrorCode InvalidMsgboxStyle;
    public static ErrorCode InvalidSpiValue;
    public static ErrorCode ScreenAlreadyLocked;
    public static ErrorCode HwndsHaveDiffParent;
    public static ErrorCode NotChildWindow;
    public static ErrorCode InvalidGwCommand;
    public static ErrorCode InvalidThreadId;
    public static ErrorCode NonMdichildWindow;
    public static ErrorCode PopupAlreadyActive;
    public static ErrorCode NoScrollbars;
    public static ErrorCode InvalidScrollbarRange;
    public static ErrorCode InvalidShowwinCommand;
    public static ErrorCode NoSystemResources;
    public static ErrorCode NonpagedSystemResources;
    public static ErrorCode PagedSystemResources;
    public static ErrorCode WorkingSetQuota;
    public static ErrorCode PagefileQuota;
    public static ErrorCode CommitmentLimit;
    public static ErrorCode MenuItemNotFound;
    public static ErrorCode InvalidKeyboardHandle;
    public static ErrorCode HookTypeNotAllowed;
    public static ErrorCode RequiresInteractiveWindowstation;
    public static ErrorCode Timeout;
    public static ErrorCode InvalidMonitorHandle;
    public static ErrorCode IncorrectSize;
    public static ErrorCode SymlinkClassDisabled;
    public static ErrorCode SymlinkNotSupported;
    public static ErrorCode XmlParseError;
    public static ErrorCode XmldsigError;
    public static ErrorCode RestartApplication;
    public static ErrorCode WrongCompartment;
    public static ErrorCode AuthipFailure;
    public static ErrorCode NoNvramResources;
    public static ErrorCode NotGuiProcess;
    public static ErrorCode EventlogFileCorrupt;
    public static ErrorCode EventlogCantStart;
    public static ErrorCode LogFileFull;
    public static ErrorCode EventlogFileChanged;
    public static ErrorCode ContainerAssigned;
    public static ErrorCode JobNoContainer;
    public static ErrorCode InvalidTaskName;
    public static ErrorCode InvalidTaskIndex;
    public static ErrorCode ThreadAlreadyInTask;
    public static ErrorCode InstallServiceFailure;
    public static ErrorCode InstallUserexit;
    public static ErrorCode InstallFailure;
    public static ErrorCode InstallSuspend;
    public static ErrorCode UnknownProduct;
    public static ErrorCode UnknownFeature;
    public static ErrorCode UnknownComponent;
    public static ErrorCode UnknownProperty;
    public static ErrorCode InvalidHandleState;
    public static ErrorCode BadConfiguration;
    public static ErrorCode IndexAbsent;
    public static ErrorCode InstallSourceAbsent;
    public static ErrorCode InstallPackageVersion;
    public static ErrorCode ProductUninstalled;
    public static ErrorCode BadQuerySyntax;
    public static ErrorCode InvalidField;
    public static ErrorCode DeviceRemoved;
    public static ErrorCode InstallAlreadyRunning;
    public static ErrorCode InstallPackageOpenFailed;
    public static ErrorCode InstallPackageInvalid;
    public static ErrorCode InstallUiFailure;
    public static ErrorCode InstallLogFailure;
    public static ErrorCode InstallLanguageUnsupported;
    public static ErrorCode InstallTransformFailure;
    public static ErrorCode InstallPackageRejected;
    public static ErrorCode FunctionNotCalled;
    public static ErrorCode FunctionFailed;
    public static ErrorCode InvalidTable;
    public static ErrorCode DatatypeMismatch;
    public static ErrorCode UnsupportedType;
    public static ErrorCode CreateFailed;
    public static ErrorCode InstallTempUnwritable;
    public static ErrorCode InstallPlatformUnsupported;
    public static ErrorCode InstallNotused;
    public static ErrorCode PatchPackageOpenFailed;
    public static ErrorCode PatchPackageInvalid;
    public static ErrorCode PatchPackageUnsupported;
    public static ErrorCode ProductVersion;
    public static ErrorCode InvalidCommandLine;
    public static ErrorCode InstallRemoteDisallowed;
    public static ErrorCode SuccessRebootInitiated;
    public static ErrorCode PatchTargetNotFound;
    public static ErrorCode PatchPackageRejected;
    public static ErrorCode InstallTransformRejected;
    public static ErrorCode InstallRemoteProhibited;
    public static ErrorCode PatchRemovalUnsupported;
    public static ErrorCode UnknownPatch;
    public static ErrorCode PatchNoSequence;
    public static ErrorCode PatchRemovalDisallowed;
    public static ErrorCode InvalidPatchXml;
    public static ErrorCode PatchManagedAdvertisedProduct;
    public static ErrorCode InstallServiceSafeboot;
    public static ErrorCode FailFastException;
    public static ErrorCode InstallRejected;
    public static ErrorCode DynamicCodeBlocked;
    public static ErrorCode NotSameObject;
    public static ErrorCode StrictCfgViolation;
    public static ErrorCode SetContextDenied;
    public static ErrorCode CrossPartitionViolation;
    public static ErrorCode InvalidUserBuffer;
    public static ErrorCode UnrecognizedMedia;
    public static ErrorCode NoTrustLsaSecret;
    public static ErrorCode NoTrustSamAccount;
    public static ErrorCode TrustedDomainFailure;
    public static ErrorCode TrustedRelationshipFailure;
    public static ErrorCode TrustFailure;
    public static ErrorCode NetlogonNotStarted;
    public static ErrorCode AccountExpired;
    public static ErrorCode RedirectorHasOpenHandles;
    public static ErrorCode PrinterDriverAlreadyInstalled;
    public static ErrorCode UnknownPort;
    public static ErrorCode UnknownPrinterDriver;
    public static ErrorCode UnknownPrintprocessor;
    public static ErrorCode InvalidSeparatorFile;
    public static ErrorCode InvalidPriority;
    public static ErrorCode InvalidPrinterName;
    public static ErrorCode PrinterAlreadyExists;
    public static ErrorCode InvalidPrinterCommand;
    public static ErrorCode InvalidDatatype;
    public static ErrorCode InvalidEnvironment;
    public static ErrorCode NologonInterdomainTrustAccount;
    public static ErrorCode NologonWorkstationTrustAccount;
    public static ErrorCode NologonServerTrustAccount;
    public static ErrorCode DomainTrustInconsistent;
    public static ErrorCode ServerHasOpenHandles;
    public static ErrorCode ResourceDataNotFound;
    public static ErrorCode ResourceTypeNotFound;
    public static ErrorCode ResourceNameNotFound;
    public static ErrorCode ResourceLangNotFound;
    public static ErrorCode NotEnoughQuota;
    public static ErrorCode InvalidTime;
    public static ErrorCode InvalidFormName;
    public static ErrorCode InvalidFormSize;
    public static ErrorCode AlreadyWaiting;
    public static ErrorCode PrinterDeleted;
    public static ErrorCode InvalidPrinterState;
    public static ErrorCode PasswordMustChange;
    public static ErrorCode DomainControllerNotFound;
    public static ErrorCode AccountLockedOut;
    public static ErrorCode NoSitename;
    public static ErrorCode CantAccessFile;
    public static ErrorCode CantResolveFilename;
    public static ErrorCode KmDriverBlocked;
    public static ErrorCode ContextExpired;
    public static ErrorCode PerUserTrustQuotaExceeded;
    public static ErrorCode AllUserTrustQuotaExceeded;
    public static ErrorCode UserDeleteTrustQuotaExceeded;
    public static ErrorCode AuthenticationFirewallFailed;
    public static ErrorCode RemotePrintConnectionsBlocked;
    public static ErrorCode NtlmBlocked;
    public static ErrorCode PasswordChangeRequired;
    public static ErrorCode LostModeLogonRestriction;
    public static ErrorCode InvalidPixelFormat;
    public static ErrorCode BadDriver;
    public static ErrorCode InvalidWindowStyle;
    public static ErrorCode MetafileNotSupported;
    public static ErrorCode TransformNotSupported;
    public static ErrorCode ClippingNotSupported;
    public static ErrorCode InvalidCmm;
    public static ErrorCode InvalidProfile;
    public static ErrorCode TagNotFound;
    public static ErrorCode TagNotPresent;
    public static ErrorCode DuplicateTag;
    public static ErrorCode ProfileNotAssociatedWithDevice;
    public static ErrorCode ProfileNotFound;
    public static ErrorCode InvalidColorspace;
    public static ErrorCode IcmNotEnabled;
    public static ErrorCode DeletingIcmXform;
    public static ErrorCode InvalidTransform;
    public static ErrorCode ColorspaceMismatch;
    public static ErrorCode InvalidColorindex;
    public static ErrorCode ProfileDoesNotMatchDevice;
    public static ErrorCode ConnectedOtherPassword;
    public static ErrorCode ConnectedOtherPasswordDefault;
    public static ErrorCode BadUsername;
    public static ErrorCode NotConnected;
    public static ErrorCode OpenFiles;
    public static ErrorCode ActiveConnections;
    public static ErrorCode DeviceInUse;
    public static ErrorCode UnknownPrintMonitor;
    public static ErrorCode PrinterDriverInUse;
    public static ErrorCode SpoolFileNotFound;
    public static ErrorCode SplNoStartdoc;
    public static ErrorCode SplNoAddjob;
    public static ErrorCode PrintProcessorAlreadyInstalled;
    public static ErrorCode PrintMonitorAlreadyInstalled;
    public static ErrorCode InvalidPrintMonitor;
    public static ErrorCode PrintMonitorInUse;
    public static ErrorCode PrinterHasJobsQueued;
    public static ErrorCode SuccessRebootRequired;
    public static ErrorCode SuccessRestartRequired;
    public static ErrorCode PrinterNotFound;
    public static ErrorCode PrinterDriverWarned;
    public static ErrorCode PrinterDriverBlocked;
    public static ErrorCode PrinterDriverPackageInUse;
    public static ErrorCode CoreDriverPackageNotFound;
    public static ErrorCode FailRebootRequired;
    public static ErrorCode FailRebootInitiated;
    public static ErrorCode PrinterDriverDownloadNeeded;
    public static ErrorCode PrintJobRestartRequired;
    public static ErrorCode InvalidPrinterDriverManifest;
    public static ErrorCode PrinterNotShareable;
    public static ErrorCode RequestPaused;
    public static ErrorCode IoReissueAsCached;
    public static ErrorCode WinsInternal;
    public static ErrorCode CanNotDelLocalWins;
    public static ErrorCode StaticInit;
    public static ErrorCode IncBackup;
    public static ErrorCode FullBackup;
    public static ErrorCode RecNonExistent;
    public static ErrorCode RplNotAllowed;
    public static ErrorCode DhcpAddressConflict;
    public static ErrorCode WmiGuidNotFound;
    public static ErrorCode WmiInstanceNotFound;
    public static ErrorCode WmiItemidNotFound;
    public static ErrorCode WmiTryAgain;
    public static ErrorCode WmiDpNotFound;
    public static ErrorCode WmiUnresolvedInstanceRef;
    public static ErrorCode WmiAlreadyEnabled;
    public static ErrorCode WmiGuidDisconnected;
    public static ErrorCode WmiServerUnavailable;
    public static ErrorCode WmiDpFailed;
    public static ErrorCode WmiInvalidMof;
    public static ErrorCode WmiInvalidReginfo;
    public static ErrorCode WmiAlreadyDisabled;
    public static ErrorCode WmiReadOnly;
    public static ErrorCode WmiSetFailure;
    public static ErrorCode NotAppcontainer;
    public static ErrorCode AppcontainerRequired;
    public static ErrorCode NotSupportedInAppcontainer;
    public static ErrorCode InvalidPackageSidLength;
    public static ErrorCode InvalidMedia;
    public static ErrorCode InvalidLibrary;
    public static ErrorCode InvalidMediaPool;
    public static ErrorCode DriveMediaMismatch;
    public static ErrorCode MediaOffline;
    public static ErrorCode LibraryOffline;
    public static ErrorCode Empty;
    public static ErrorCode NotEmpty;
    public static ErrorCode MediaUnavailable;
    public static ErrorCode ResourceDisabled;
    public static ErrorCode InvalidCleaner;
    public static ErrorCode UnableToClean;
    public static ErrorCode ObjectNotFound;
    public static ErrorCode DatabaseFailure;
    public static ErrorCode DatabaseFull;
    public static ErrorCode MediaIncompatible;
    public static ErrorCode ResourceNotPresent;
    public static ErrorCode InvalidOperation;
    public static ErrorCode MediaNotAvailable;
    public static ErrorCode DeviceNotAvailable;
    public static ErrorCode RequestRefused;
    public static ErrorCode InvalidDriveObject;
    public static ErrorCode LibraryFull;
    public static ErrorCode MediumNotAccessible;
    public static ErrorCode UnableToLoadMedium;
    public static ErrorCode UnableToInventoryDrive;
    public static ErrorCode UnableToInventorySlot;
    public static ErrorCode UnableToInventoryTransport;
    public static ErrorCode TransportFull;
    public static ErrorCode ControllingIeport;
    public static ErrorCode UnableToEjectMountedMedia;
    public static ErrorCode CleanerSlotSet;
    public static ErrorCode CleanerSlotNotSet;
    public static ErrorCode CleanerCartridgeSpent;
    public static ErrorCode UnexpectedOmid;
    public static ErrorCode CantDeleteLastItem;
    public static ErrorCode MessageExceedsMaxSize;
    public static ErrorCode VolumeContainsSysFiles;
    public static ErrorCode IndigenousType;
    public static ErrorCode NoSupportingDrives;
    public static ErrorCode CleanerCartridgeInstalled;
    public static ErrorCode IeportFull;
    public static ErrorCode FileOffline;
    public static ErrorCode RemoteStorageNotActive;
    public static ErrorCode RemoteStorageMediaError;
    public static ErrorCode NotAReparsePoint;
    public static ErrorCode ReparseAttributeConflict;
    public static ErrorCode InvalidReparseData;
    public static ErrorCode ReparseTagInvalid;
    public static ErrorCode ReparseTagMismatch;
    public static ErrorCode ReparsePointEncountered;
    public static ErrorCode AppDataNotFound;
    public static ErrorCode AppDataExpired;
    public static ErrorCode AppDataCorrupt;
    public static ErrorCode AppDataLimitExceeded;
    public static ErrorCode AppDataRebootRequired;
    public static ErrorCode SecurebootRollbackDetected;
    public static ErrorCode SecurebootPolicyViolation;
    public static ErrorCode SecurebootInvalidPolicy;
    public static ErrorCode SecurebootPolicyPublisherNotFound;
    public static ErrorCode SecurebootPolicyNotSigned;
    public static ErrorCode SecurebootNotEnabled;
    public static ErrorCode SecurebootFileReplaced;
    public static ErrorCode SecurebootPolicyNotAuthorized;
    public static ErrorCode SecurebootPolicyUnknown;
    public static ErrorCode SecurebootPolicyMissingAntirollbackversion;
    public static ErrorCode SecurebootPlatformIdMismatch;
    public static ErrorCode SecurebootPolicyRollbackDetected;
    public static ErrorCode SecurebootPolicyUpgradeMismatch;
    public static ErrorCode SecurebootRequiredPolicyFileMissing;
    public static ErrorCode SecurebootNotBasePolicy;
    public static ErrorCode SecurebootNotSupplementalPolicy;
    public static ErrorCode OffloadReadFltNotSupported;
    public static ErrorCode OffloadWriteFltNotSupported;
    public static ErrorCode OffloadReadFileNotSupported;
    public static ErrorCode OffloadWriteFileNotSupported;
    public static ErrorCode AlreadyHasStreamId;
    public static ErrorCode SmrGarbageCollectionRequired;
    public static ErrorCode VolumeNotSisEnabled;
    public static ErrorCode SystemIntegrityRollbackDetected;
    public static ErrorCode SystemIntegrityPolicyViolation;
    public static ErrorCode SystemIntegrityInvalidPolicy;
    public static ErrorCode SystemIntegrityPolicyNotSigned;
    public static ErrorCode VsmNotInitialized;
    public static ErrorCode VsmDmaProtectionNotInUse;
    public static ErrorCode PlatformManifestNotAuthorized;
    public static ErrorCode PlatformManifestInvalid;
    public static ErrorCode PlatformManifestFileNotAuthorized;
    public static ErrorCode PlatformManifestCatalogNotAuthorized;
    public static ErrorCode PlatformManifestBinaryIdNotFound;
    public static ErrorCode PlatformManifestNotActive;
    public static ErrorCode PlatformManifestNotSigned;
    public static ErrorCode DependentResourceExists;
    public static ErrorCode DependencyNotFound;
    public static ErrorCode DependencyAlreadyExists;
    public static ErrorCode ResourceNotOnline;
    public static ErrorCode HostNodeNotAvailable;
    public static ErrorCode ResourceNotAvailable;
    public static ErrorCode ResourceNotFound;
    public static ErrorCode ShutdownCluster;
    public static ErrorCode CantEvictActiveNode;
    public static ErrorCode ObjectAlreadyExists;
    public static ErrorCode ObjectInList;
    public static ErrorCode GroupNotAvailable;
    public static ErrorCode GroupNotFound;
    public static ErrorCode GroupNotOnline;
    public static ErrorCode HostNodeNotResourceOwner;
    public static ErrorCode HostNodeNotGroupOwner;
    public static ErrorCode ResmonCreateFailed;
    public static ErrorCode ResmonOnlineFailed;
    public static ErrorCode ResourceOnline;
    public static ErrorCode QuorumResource;
    public static ErrorCode NotQuorumCapable;
    public static ErrorCode ClusterShuttingDown;
    public static ErrorCode InvalidState;
    public static ErrorCode ResourcePropertiesStored;
    public static ErrorCode NotQuorumClass;
    public static ErrorCode CoreResource;
    public static ErrorCode QuorumResourceOnlineFailed;
    public static ErrorCode QuorumlogOpenFailed;
    public static ErrorCode ClusterlogCorrupt;
    public static ErrorCode ClusterlogRecordExceedsMaxsize;
    public static ErrorCode ClusterlogExceedsMaxsize;
    public static ErrorCode ClusterlogChkpointNotFound;
    public static ErrorCode ClusterlogNotEnoughSpace;
    public static ErrorCode QuorumOwnerAlive;
    public static ErrorCode NetworkNotAvailable;
    public static ErrorCode NodeNotAvailable;
    public static ErrorCode AllNodesNotAvailable;
    public static ErrorCode ResourceFailed;
    public static ErrorCode ClusterInvalidNode;
    public static ErrorCode ClusterNodeExists;
    public static ErrorCode ClusterJoinInProgress;
    public static ErrorCode ClusterNodeNotFound;
    public static ErrorCode ClusterLocalNodeNotFound;
    public static ErrorCode ClusterNetworkExists;
    public static ErrorCode ClusterNetworkNotFound;
    public static ErrorCode ClusterNetinterfaceExists;
    public static ErrorCode ClusterNetinterfaceNotFound;
    public static ErrorCode ClusterInvalidRequest;
    public static ErrorCode ClusterInvalidNetworkProvider;
    public static ErrorCode ClusterNodeDown;
    public static ErrorCode ClusterNodeUnreachable;
    public static ErrorCode ClusterNodeNotMember;
    public static ErrorCode ClusterJoinNotInProgress;
    public static ErrorCode ClusterInvalidNetwork;
    public static ErrorCode ClusterNodeUp;
    public static ErrorCode ClusterIpaddrInUse;
    public static ErrorCode ClusterNodeNotPaused;
    public static ErrorCode ClusterNoSecurityContext;
    public static ErrorCode ClusterNetworkNotInternal;
    public static ErrorCode ClusterNodeAlreadyUp;
    public static ErrorCode ClusterNodeAlreadyDown;
    public static ErrorCode ClusterNetworkAlreadyOnline;
    public static ErrorCode ClusterNetworkAlreadyOffline;
    public static ErrorCode ClusterNodeAlreadyMember;
    public static ErrorCode ClusterLastInternalNetwork;
    public static ErrorCode ClusterNetworkHasDependents;
    public static ErrorCode InvalidOperationOnQuorum;
    public static ErrorCode DependencyNotAllowed;
    public static ErrorCode ClusterNodePaused;
    public static ErrorCode NodeCantHostResource;
    public static ErrorCode ClusterNodeNotReady;
    public static ErrorCode ClusterNodeShuttingDown;
    public static ErrorCode ClusterJoinAborted;
    public static ErrorCode ClusterIncompatibleVersions;
    public static ErrorCode ClusterMaxnumOfResourcesExceeded;
    public static ErrorCode ClusterSystemConfigChanged;
    public static ErrorCode ClusterResourceTypeNotFound;
    public static ErrorCode ClusterRestypeNotSupported;
    public static ErrorCode ClusterResnameNotFound;
    public static ErrorCode ClusterNoRpcPackagesRegistered;
    public static ErrorCode ClusterOwnerNotInPreflist;
    public static ErrorCode ClusterDatabaseSeqmismatch;
    public static ErrorCode ResmonInvalidState;
    public static ErrorCode ClusterGumNotLocker;
    public static ErrorCode QuorumDiskNotFound;
    public static ErrorCode DatabaseBackupCorrupt;
    public static ErrorCode ClusterNodeAlreadyHasDfsRoot;
    public static ErrorCode ResourcePropertyUnchangeable;
    public static ErrorCode NoAdminAccessPoint;
    public static ErrorCode ClusterMembershipInvalidState;
    public static ErrorCode ClusterQuorumlogNotFound;
    public static ErrorCode ClusterMembershipHalt;
    public static ErrorCode ClusterInstanceIdMismatch;
    public static ErrorCode ClusterNetworkNotFoundForIp;
    public static ErrorCode ClusterPropertyDataTypeMismatch;
    public static ErrorCode ClusterEvictWithoutCleanup;
    public static ErrorCode ClusterParameterMismatch;
    public static ErrorCode NodeCannotBeClustered;
    public static ErrorCode ClusterWrongOsVersion;
    public static ErrorCode ClusterCantCreateDupClusterName;
    public static ErrorCode CluscfgAlreadyCommitted;
    public static ErrorCode CluscfgRollbackFailed;
    public static ErrorCode CluscfgSystemDiskDriveLetterConflict;
    public static ErrorCode ClusterOldVersion;
    public static ErrorCode ClusterMismatchedComputerAcctName;
    public static ErrorCode ClusterNoNetAdapters;
    public static ErrorCode ClusterPoisoned;
    public static ErrorCode ClusterGroupMoving;
    public static ErrorCode ClusterResourceTypeBusy;
    public static ErrorCode ResourceCallTimedOut;
    public static ErrorCode InvalidClusterIpv6Address;
    public static ErrorCode ClusterInternalInvalidFunction;
    public static ErrorCode ClusterParameterOutOfBounds;
    public static ErrorCode ClusterPartialSend;
    public static ErrorCode ClusterRegistryInvalidFunction;
    public static ErrorCode ClusterInvalidStringTermination;
    public static ErrorCode ClusterInvalidStringFormat;
    public static ErrorCode ClusterDatabaseTransactionInProgress;
    public static ErrorCode ClusterDatabaseTransactionNotInProgress;
    public static ErrorCode ClusterNullData;
    public static ErrorCode ClusterPartialRead;
    public static ErrorCode ClusterPartialWrite;
    public static ErrorCode ClusterCantDeserializeData;
    public static ErrorCode DependentResourcePropertyConflict;
    public static ErrorCode ClusterNoQuorum;
    public static ErrorCode ClusterInvalidIpv6Network;
    public static ErrorCode ClusterInvalidIpv6TunnelNetwork;
    public static ErrorCode QuorumNotAllowedInThisGroup;
    public static ErrorCode DependencyTreeTooComplex;
    public static ErrorCode ExceptionInResourceCall;
    public static ErrorCode ClusterRhsFailedInitialization;
    public static ErrorCode ClusterNotInstalled;
    public static ErrorCode ClusterResourcesMustBeOnlineOnTheSameNode;
    public static ErrorCode ClusterMaxNodesInCluster;
    public static ErrorCode ClusterTooManyNodes;
    public static ErrorCode ClusterObjectAlreadyUsed;
    public static ErrorCode NoncoreGroupsFound;
    public static ErrorCode FileShareResourceConflict;
    public static ErrorCode ClusterEvictInvalidRequest;
    public static ErrorCode ClusterSingletonResource;
    public static ErrorCode ClusterGroupSingletonResource;
    public static ErrorCode ClusterResourceProviderFailed;
    public static ErrorCode ClusterResourceConfigurationError;
    public static ErrorCode ClusterGroupBusy;
    public static ErrorCode ClusterNotSharedVolume;
    public static ErrorCode ClusterInvalidSecurityDescriptor;
    public static ErrorCode ClusterSharedVolumesInUse;
    public static ErrorCode ClusterUseSharedVolumesApi;
    public static ErrorCode ClusterBackupInProgress;
    public static ErrorCode NonCsvPath;
    public static ErrorCode CsvVolumeNotLocal;
    public static ErrorCode ClusterWatchdogTerminating;
    public static ErrorCode ClusterResourceVetoedMoveIncompatibleNodes;
    public static ErrorCode ClusterInvalidNodeWeight;
    public static ErrorCode ClusterResourceVetoedCall;
    public static ErrorCode ResmonSystemResourcesLacking;
    public static ErrorCode ClusterResourceVetoedMoveNotEnoughResourcesOnDestination;
    public static ErrorCode ClusterResourceVetoedMoveNotEnoughResourcesOnSource;
    public static ErrorCode ClusterGroupQueued;
    public static ErrorCode ClusterResourceLockedStatus;
    public static ErrorCode ClusterSharedVolumeFailoverNotAllowed;
    public static ErrorCode ClusterNodeDrainInProgress;
    public static ErrorCode ClusterDiskNotConnected;
    public static ErrorCode DiskNotCsvCapable;
    public static ErrorCode ResourceNotInAvailableStorage;
    public static ErrorCode ClusterSharedVolumeRedirected;
    public static ErrorCode ClusterSharedVolumeNotRedirected;
    public static ErrorCode ClusterCannotReturnProperties;
    public static ErrorCode ClusterResourceContainsUnsupportedDiffAreaForSharedVolumes;
    public static ErrorCode ClusterResourceIsInMaintenanceMode;
    public static ErrorCode ClusterAffinityConflict;
    public static ErrorCode ClusterResourceIsReplicaVirtualMachine;
    public static ErrorCode ClusterUpgradeIncompatibleVersions;
    public static ErrorCode ClusterUpgradeFixQuorumNotSupported;
    public static ErrorCode ClusterUpgradeRestartRequired;
    public static ErrorCode ClusterUpgradeInProgress;
    public static ErrorCode ClusterUpgradeIncomplete;
    public static ErrorCode ClusterNodeInGracePeriod;
    public static ErrorCode ClusterCsvIoPauseTimeout;
    public static ErrorCode NodeNotActiveClusterMember;
    public static ErrorCode ClusterResourceNotMonitored;
    public static ErrorCode ClusterResourceDoesNotSupportUnmonitored;
    public static ErrorCode ClusterResourceIsReplicated;
    public static ErrorCode ClusterNodeIsolated;
    public static ErrorCode ClusterNodeQuarantined;
    public static ErrorCode ClusterDatabaseUpdateConditionFailed;
    public static ErrorCode ClusterSpaceDegraded;
    public static ErrorCode ClusterTokenDelegationNotSupported;
    public static ErrorCode ClusterCsvInvalidHandle;
    public static ErrorCode ClusterCsvSupportedOnlyOnCoordinator;
    public static ErrorCode GroupsetNotAvailable;
    public static ErrorCode GroupsetNotFound;
    public static ErrorCode GroupsetCantProvide;
    public static ErrorCode ClusterFaultDomainParentNotFound;
    public static ErrorCode ClusterFaultDomainInvalidHierarchy;
    public static ErrorCode ClusterFaultDomainFailedS2DValidation;
    public static ErrorCode ClusterFaultDomainS2DConnectivityLoss;
    public static ErrorCode ClusterInvalidInfrastructureFileserverName;
    public static ErrorCode ClustersetManagementClusterUnreachable;
    public static ErrorCode EncryptionFailed;
    public static ErrorCode DecryptionFailed;
    public static ErrorCode FileEncrypted;
    public static ErrorCode NoRecoveryPolicy;
    public static ErrorCode NoEfs;
    public static ErrorCode WrongEfs;
    public static ErrorCode NoUserKeys;
    public static ErrorCode FileNotEncrypted;
    public static ErrorCode NotExportFormat;
    public static ErrorCode FileReadOnly;
    public static ErrorCode DirEfsDisallowed;
    public static ErrorCode EfsServerNotTrusted;
    public static ErrorCode BadRecoveryPolicy;
    public static ErrorCode EfsAlgBlobTooBig;
    public static ErrorCode VolumeNotSupportEfs;
    public static ErrorCode EfsDisabled;
    public static ErrorCode EfsVersionNotSupport;
    public static ErrorCode CsEncryptionInvalidServerResponse;
    public static ErrorCode CsEncryptionUnsupportedServer;
    public static ErrorCode CsEncryptionExistingEncryptedFile;
    public static ErrorCode CsEncryptionNewEncryptedFile;
    public static ErrorCode CsEncryptionFileNotCse;
    public static ErrorCode EncryptionPolicyDeniesOperation;
    public static ErrorCode NoBrowserServersFound;
    public static ErrorCode LogSectorInvalid;
    public static ErrorCode LogSectorParityInvalid;
    public static ErrorCode LogSectorRemapped;
    public static ErrorCode LogBlockIncomplete;
    public static ErrorCode LogInvalidRange;
    public static ErrorCode LogBlocksExhausted;
    public static ErrorCode LogReadContextInvalid;
    public static ErrorCode LogRestartInvalid;
    public static ErrorCode LogBlockVersion;
    public static ErrorCode LogBlockInvalid;
    public static ErrorCode LogReadModeInvalid;
    public static ErrorCode LogNoRestart;
    public static ErrorCode LogMetadataCorrupt;
    public static ErrorCode LogMetadataInvalid;
    public static ErrorCode LogMetadataInconsistent;
    public static ErrorCode LogReservationInvalid;
    public static ErrorCode LogCantDelete;
    public static ErrorCode LogContainerLimitExceeded;
    public static ErrorCode LogStartOfLog;
    public static ErrorCode LogPolicyAlreadyInstalled;
    public static ErrorCode LogPolicyNotInstalled;
    public static ErrorCode LogPolicyInvalid;
    public static ErrorCode LogPolicyConflict;
    public static ErrorCode LogPinnedArchiveTail;
    public static ErrorCode LogRecordNonexistent;
    public static ErrorCode LogRecordsReservedInvalid;
    public static ErrorCode LogSpaceReservedInvalid;
    public static ErrorCode LogTailInvalid;
    public static ErrorCode LogFull;
    public static ErrorCode CouldNotResizeLog;
    public static ErrorCode LogMultiplexed;
    public static ErrorCode LogDedicated;
    public static ErrorCode LogArchiveNotInProgress;
    public static ErrorCode LogArchiveInProgress;
    public static ErrorCode LogEphemeral;
    public static ErrorCode LogNotEnoughContainers;
    public static ErrorCode LogClientAlreadyRegistered;
    public static ErrorCode LogClientNotRegistered;
    public static ErrorCode LogFullHandlerInProgress;
    public static ErrorCode LogContainerReadFailed;
    public static ErrorCode LogContainerWriteFailed;
    public static ErrorCode LogContainerOpenFailed;
    public static ErrorCode LogContainerStateInvalid;
    public static ErrorCode LogStateInvalid;
    public static ErrorCode LogPinned;
    public static ErrorCode LogMetadataFlushFailed;
    public static ErrorCode LogInconsistentSecurity;
    public static ErrorCode LogAppendedFlushFailed;
    public static ErrorCode LogPinnedReservation;
    public static ErrorCode InvalidTransaction;
    public static ErrorCode TransactionNotActive;
    public static ErrorCode TransactionRequestNotValid;
    public static ErrorCode TransactionNotRequested;
    public static ErrorCode TransactionAlreadyAborted;
    public static ErrorCode TransactionAlreadyCommitted;
    public static ErrorCode TmInitializationFailed;
    public static ErrorCode ResourcemanagerReadOnly;
    public static ErrorCode TransactionNotJoined;
    public static ErrorCode TransactionSuperiorExists;
    public static ErrorCode CrmProtocolAlreadyExists;
    public static ErrorCode TransactionPropagationFailed;
    public static ErrorCode CrmProtocolNotFound;
    public static ErrorCode TransactionInvalidMarshallBuffer;
    public static ErrorCode CurrentTransactionNotValid;
    public static ErrorCode TransactionNotFound;
    public static ErrorCode ResourcemanagerNotFound;
    public static ErrorCode EnlistmentNotFound;
    public static ErrorCode TransactionmanagerNotFound;
    public static ErrorCode TransactionmanagerNotOnline;
    public static ErrorCode TransactionmanagerRecoveryNameCollision;
    public static ErrorCode TransactionNotRoot;
    public static ErrorCode TransactionObjectExpired;
    public static ErrorCode TransactionResponseNotEnlisted;
    public static ErrorCode TransactionRecordTooLong;
    public static ErrorCode ImplicitTransactionNotSupported;
    public static ErrorCode TransactionIntegrityViolated;
    public static ErrorCode TransactionmanagerIdentityMismatch;
    public static ErrorCode RmCannotBeFrozenForSnapshot;
    public static ErrorCode TransactionMustWritethrough;
    public static ErrorCode TransactionNoSuperior;
    public static ErrorCode HeuristicDamagePossible;
    public static ErrorCode TransactionalConflict;
    public static ErrorCode RmNotActive;
    public static ErrorCode RmMetadataCorrupt;
    public static ErrorCode DirectoryNotRm;
    public static ErrorCode TransactionsUnsupportedRemote;
    public static ErrorCode LogResizeInvalidSize;
    public static ErrorCode ObjectNoLongerExists;
    public static ErrorCode StreamMiniversionNotFound;
    public static ErrorCode StreamMiniversionNotValid;
    public static ErrorCode MiniversionInaccessibleFromSpecifiedTransaction;
    public static ErrorCode CantOpenMiniversionWithModifyIntent;
    public static ErrorCode CantCreateMoreStreamMiniversions;
    public static ErrorCode RemoteFileVersionMismatch;
    public static ErrorCode HandleNoLongerValid;
    public static ErrorCode NoTxfMetadata;
    public static ErrorCode LogCorruptionDetected;
    public static ErrorCode CantRecoverWithHandleOpen;
    public static ErrorCode RmDisconnected;
    public static ErrorCode EnlistmentNotSuperior;
    public static ErrorCode RecoveryNotNeeded;
    public static ErrorCode RmAlreadyStarted;
    public static ErrorCode FileIdentityNotPersistent;
    public static ErrorCode CantBreakTransactionalDependency;
    public static ErrorCode CantCrossRmBoundary;
    public static ErrorCode TxfDirNotEmpty;
    public static ErrorCode IndoubtTransactionsExist;
    public static ErrorCode TmVolatile;
    public static ErrorCode RollbackTimerExpired;
    public static ErrorCode TxfAttributeCorrupt;
    public static ErrorCode EfsNotAllowedInTransaction;
    public static ErrorCode TransactionalOpenNotAllowed;
    public static ErrorCode LogGrowthFailed;
    public static ErrorCode TransactedMappingUnsupportedRemote;
    public static ErrorCode TxfMetadataAlreadyPresent;
    public static ErrorCode TransactionScopeCallbacksNotSet;
    public static ErrorCode TransactionRequiredPromotion;
    public static ErrorCode CannotExecuteFileInTransaction;
    public static ErrorCode TransactionsNotFrozen;
    public static ErrorCode TransactionFreezeInProgress;
    public static ErrorCode NotSnapshotVolume;
    public static ErrorCode NoSavepointWithOpenFiles;
    public static ErrorCode DataLostRepair;
    public static ErrorCode SparseNotAllowedInTransaction;
    public static ErrorCode TmIdentityMismatch;
    public static ErrorCode FloatedSection;
    public static ErrorCode CannotAcceptTransactedWork;
    public static ErrorCode CannotAbortTransactions;
    public static ErrorCode BadClusters;
    public static ErrorCode CompressionNotAllowedInTransaction;
    public static ErrorCode VolumeDirty;
    public static ErrorCode NoLinkTrackingInTransaction;
    public static ErrorCode OperationNotSupportedInTransaction;
    public static ErrorCode ExpiredHandle;
    public static ErrorCode TransactionNotEnlisted;
    public static ErrorCode CtxWinstationNameInvalid;
    public static ErrorCode CtxInvalidPd;
    public static ErrorCode CtxPdNotFound;
    public static ErrorCode CtxWdNotFound;
    public static ErrorCode CtxCannotMakeEventlogEntry;
    public static ErrorCode CtxServiceNameCollision;
    public static ErrorCode CtxClosePending;
    public static ErrorCode CtxNoOutbuf;
    public static ErrorCode CtxModemInfNotFound;
    public static ErrorCode CtxInvalidModemname;
    public static ErrorCode CtxModemResponseError;
    public static ErrorCode CtxModemResponseTimeout;
    public static ErrorCode CtxModemResponseNoCarrier;
    public static ErrorCode CtxModemResponseNoDialtone;
    public static ErrorCode CtxModemResponseBusy;
    public static ErrorCode CtxModemResponseVoice;
    public static ErrorCode CtxTdError;
    public static ErrorCode CtxWinstationNotFound;
    public static ErrorCode CtxWinstationAlreadyExists;
    public static ErrorCode CtxWinstationBusy;
    public static ErrorCode CtxBadVideoMode;
    public static ErrorCode CtxGraphicsInvalid;
    public static ErrorCode CtxLogonDisabled;
    public static ErrorCode CtxNotConsole;
    public static ErrorCode CtxClientQueryTimeout;
    public static ErrorCode CtxConsoleDisconnect;
    public static ErrorCode CtxConsoleConnect;
    public static ErrorCode CtxShadowDenied;
    public static ErrorCode CtxWinstationAccessDenied;
    public static ErrorCode CtxInvalidWd;
    public static ErrorCode CtxShadowInvalid;
    public static ErrorCode CtxShadowDisabled;
    public static ErrorCode CtxClientLicenseInUse;
    public static ErrorCode CtxClientLicenseNotSet;
    public static ErrorCode CtxLicenseNotAvailable;
    public static ErrorCode CtxLicenseClientInvalid;
    public static ErrorCode CtxLicenseExpired;
    public static ErrorCode CtxShadowNotRunning;
    public static ErrorCode CtxShadowEndedByModeChange;
    public static ErrorCode ActivationCountExceeded;
    public static ErrorCode CtxWinstationsDisabled;
    public static ErrorCode CtxEncryptionLevelRequired;
    public static ErrorCode CtxSessionInUse;
    public static ErrorCode CtxNoForceLogoff;
    public static ErrorCode CtxAccountRestriction;
    public static ErrorCode RdpProtocolError;
    public static ErrorCode CtxCdmConnect;
    public static ErrorCode CtxCdmDisconnect;
    public static ErrorCode CtxSecurityLayerError;
    public static ErrorCode TsIncompatibleSessions;
    public static ErrorCode TsVideoSubsystemError;
    public static ErrorCode DsNotInstalled;
    public static ErrorCode DsMembershipEvaluatedLocally;
    public static ErrorCode DsNoAttributeOrValue;
    public static ErrorCode DsInvalidAttributeSyntax;
    public static ErrorCode DsAttributeTypeUndefined;
    public static ErrorCode DsAttributeOrValueExists;
    public static ErrorCode DsBusy;
    public static ErrorCode DsUnavailable;
    public static ErrorCode DsNoRidsAllocated;
    public static ErrorCode DsNoMoreRids;
    public static ErrorCode DsIncorrectRoleOwner;
    public static ErrorCode DsRidmgrInitError;
    public static ErrorCode DsObjClassViolation;
    public static ErrorCode DsCantOnNonLeaf;
    public static ErrorCode DsCantOnRdn;
    public static ErrorCode DsCantModObjClass;
    public static ErrorCode DsCrossDomMoveError;
    public static ErrorCode DsGcNotAvailable;
    public static ErrorCode SharedPolicy;
    public static ErrorCode PolicyObjectNotFound;
    public static ErrorCode PolicyOnlyInDs;
    public static ErrorCode PromotionActive;
    public static ErrorCode NoPromotionActive;
    public static ErrorCode DsOperationsError;
    public static ErrorCode DsProtocolError;
    public static ErrorCode DsTimelimitExceeded;
    public static ErrorCode DsSizelimitExceeded;
    public static ErrorCode DsAdminLimitExceeded;
    public static ErrorCode DsCompareFalse;
    public static ErrorCode DsCompareTrue;
    public static ErrorCode DsAuthMethodNotSupported;
    public static ErrorCode DsStrongAuthRequired;
    public static ErrorCode DsInappropriateAuth;
    public static ErrorCode DsAuthUnknown;
    public static ErrorCode DsReferral;
    public static ErrorCode DsUnavailableCritExtension;
    public static ErrorCode DsConfidentialityRequired;
    public static ErrorCode DsInappropriateMatching;
    public static ErrorCode DsConstraintViolation;
    public static ErrorCode DsNoSuchObject;
    public static ErrorCode DsAliasProblem;
    public static ErrorCode DsInvalidDnSyntax;
    public static ErrorCode DsIsLeaf;
    public static ErrorCode DsAliasDerefProblem;
    public static ErrorCode DsUnwillingToPerform;
    public static ErrorCode DsLoopDetect;
    public static ErrorCode DsNamingViolation;
    public static ErrorCode DsObjectResultsTooLarge;
    public static ErrorCode DsAffectsMultipleDsas;
    public static ErrorCode DsServerDown;
    public static ErrorCode DsLocalError;
    public static ErrorCode DsEncodingError;
    public static ErrorCode DsDecodingError;
    public static ErrorCode DsFilterUnknown;
    public static ErrorCode DsParamError;
    public static ErrorCode DsNotSupported;
    public static ErrorCode DsNoResultsReturned;
    public static ErrorCode DsControlNotFound;
    public static ErrorCode DsClientLoop;
    public static ErrorCode DsReferralLimitExceeded;
    public static ErrorCode DsSortControlMissing;
    public static ErrorCode DsOffsetRangeError;
    public static ErrorCode DsRidmgrDisabled;
    public static ErrorCode DsRootMustBeNc;
    public static ErrorCode DsAddReplicaInhibited;
    public static ErrorCode DsAttNotDefInSchema;
    public static ErrorCode DsMaxObjSizeExceeded;
    public static ErrorCode DsObjStringNameExists;
    public static ErrorCode DsNoRdnDefinedInSchema;
    public static ErrorCode DsRdnDoesntMatchSchema;
    public static ErrorCode DsNoRequestedAttsFound;
    public static ErrorCode DsUserBufferToSmall;
    public static ErrorCode DsAttIsNotOnObj;
    public static ErrorCode DsIllegalModOperation;
    public static ErrorCode DsObjTooLarge;
    public static ErrorCode DsBadInstanceType;
    public static ErrorCode DsMasterdsaRequired;
    public static ErrorCode DsObjectClassRequired;
    public static ErrorCode DsMissingRequiredAtt;
    public static ErrorCode DsAttNotDefForClass;
    public static ErrorCode DsAttAlreadyExists;
    public static ErrorCode DsCantAddAttValues;
    public static ErrorCode DsSingleValueConstraint;
    public static ErrorCode DsRangeConstraint;
    public static ErrorCode DsAttValAlreadyExists;
    public static ErrorCode DsCantRemMissingAtt;
    public static ErrorCode DsCantRemMissingAttVal;
    public static ErrorCode DsRootCantBeSubref;
    public static ErrorCode DsNoChaining;
    public static ErrorCode DsNoChainedEval;
    public static ErrorCode DsNoParentObject;
    public static ErrorCode DsParentIsAnAlias;
    public static ErrorCode DsCantMixMasterAndReps;
    public static ErrorCode DsChildrenExist;
    public static ErrorCode DsObjNotFound;
    public static ErrorCode DsAliasedObjMissing;
    public static ErrorCode DsBadNameSyntax;
    public static ErrorCode DsAliasPointsToAlias;
    public static ErrorCode DsCantDerefAlias;
    public static ErrorCode DsOutOfScope;
    public static ErrorCode DsObjectBeingRemoved;
    public static ErrorCode DsCantDeleteDsaObj;
    public static ErrorCode DsGenericError;
    public static ErrorCode DsDsaMustBeIntMaster;
    public static ErrorCode DsClassNotDsa;
    public static ErrorCode DsInsuffAccessRights;
    public static ErrorCode DsIllegalSuperior;
    public static ErrorCode DsAttributeOwnedBySam;
    public static ErrorCode DsNameTooManyParts;
    public static ErrorCode DsNameTooLong;
    public static ErrorCode DsNameValueTooLong;
    public static ErrorCode DsNameUnparseable;
    public static ErrorCode DsNameTypeUnknown;
    public static ErrorCode DsNotAnObject;
    public static ErrorCode DsSecDescTooShort;
    public static ErrorCode DsSecDescInvalid;
    public static ErrorCode DsNoDeletedName;
    public static ErrorCode DsSubrefMustHaveParent;
    public static ErrorCode DsNcnameMustBeNc;
    public static ErrorCode DsCantAddSystemOnly;
    public static ErrorCode DsClassMustBeConcrete;
    public static ErrorCode DsInvalidDmd;
    public static ErrorCode DsObjGuidExists;
    public static ErrorCode DsNotOnBacklink;
    public static ErrorCode DsNoCrossrefForNc;
    public static ErrorCode DsShuttingDown;
    public static ErrorCode DsUnknownOperation;
    public static ErrorCode DsInvalidRoleOwner;
    public static ErrorCode DsCouldntContactFsmo;
    public static ErrorCode DsCrossNcDnRename;
    public static ErrorCode DsCantModSystemOnly;
    public static ErrorCode DsReplicatorOnly;
    public static ErrorCode DsObjClassNotDefined;
    public static ErrorCode DsObjClassNotSubclass;
    public static ErrorCode DsNameReferenceInvalid;
    public static ErrorCode DsCrossRefExists;
    public static ErrorCode DsCantDelMasterCrossref;
    public static ErrorCode DsSubtreeNotifyNotNcHead;
    public static ErrorCode DsNotifyFilterTooComplex;
    public static ErrorCode DsDupRdn;
    public static ErrorCode DsDupOid;
    public static ErrorCode DsDupMapiId;
    public static ErrorCode DsDupSchemaIdGuid;
    public static ErrorCode DsDupLdapDisplayName;
    public static ErrorCode DsSemanticAttTest;
    public static ErrorCode DsSyntaxMismatch;
    public static ErrorCode DsExistsInMustHave;
    public static ErrorCode DsExistsInMayHave;
    public static ErrorCode DsNonexistentMayHave;
    public static ErrorCode DsNonexistentMustHave;
    public static ErrorCode DsAuxClsTestFail;
    public static ErrorCode DsNonexistentPossSup;
    public static ErrorCode DsSubClsTestFail;
    public static ErrorCode DsBadRdnAttIdSyntax;
    public static ErrorCode DsExistsInAuxCls;
    public static ErrorCode DsExistsInSubCls;
    public static ErrorCode DsExistsInPossSup;
    public static ErrorCode DsRecalcschemaFailed;
    public static ErrorCode DsTreeDeleteNotFinished;
    public static ErrorCode DsCantDelete;
    public static ErrorCode DsAttSchemaReqId;
    public static ErrorCode DsBadAttSchemaSyntax;
    public static ErrorCode DsCantCacheAtt;
    public static ErrorCode DsCantCacheClass;
    public static ErrorCode DsCantRemoveAttCache;
    public static ErrorCode DsCantRemoveClassCache;
    public static ErrorCode DsCantRetrieveDn;
    public static ErrorCode DsMissingSupref;
    public static ErrorCode DsCantRetrieveInstance;
    public static ErrorCode DsCodeInconsistency;
    public static ErrorCode DsDatabaseError;
    public static ErrorCode DsGovernsidMissing;
    public static ErrorCode DsMissingExpectedAtt;
    public static ErrorCode DsNcnameMissingCrRef;
    public static ErrorCode DsSecurityCheckingError;
    public static ErrorCode DsSchemaNotLoaded;
    public static ErrorCode DsSchemaAllocFailed;
    public static ErrorCode DsAttSchemaReqSyntax;
    public static ErrorCode DsGcverifyError;
    public static ErrorCode DsDraSchemaMismatch;
    public static ErrorCode DsCantFindDsaObj;
    public static ErrorCode DsCantFindExpectedNc;
    public static ErrorCode DsCantFindNcInCache;
    public static ErrorCode DsCantRetrieveChild;
    public static ErrorCode DsSecurityIllegalModify;
    public static ErrorCode DsCantReplaceHiddenRec;
    public static ErrorCode DsBadHierarchyFile;
    public static ErrorCode DsBuildHierarchyTableFailed;
    public static ErrorCode DsConfigParamMissing;
    public static ErrorCode DsCountingAbIndicesFailed;
    public static ErrorCode DsHierarchyTableMallocFailed;
    public static ErrorCode DsInternalFailure;
    public static ErrorCode DsUnknownError;
    public static ErrorCode DsRootRequiresClassTop;
    public static ErrorCode DsRefusingFsmoRoles;
    public static ErrorCode DsMissingFsmoSettings;
    public static ErrorCode DsUnableToSurrenderRoles;
    public static ErrorCode DsDraGeneric;
    public static ErrorCode DsDraInvalidParameter;
    public static ErrorCode DsDraBusy;
    public static ErrorCode DsDraBadDn;
    public static ErrorCode DsDraBadNc;
    public static ErrorCode DsDraDnExists;
    public static ErrorCode DsDraInternalError;
    public static ErrorCode DsDraInconsistentDit;
    public static ErrorCode DsDraConnectionFailed;
    public static ErrorCode DsDraBadInstanceType;
    public static ErrorCode DsDraOutOfMem;
    public static ErrorCode DsDraMailProblem;
    public static ErrorCode DsDraRefAlreadyExists;
    public static ErrorCode DsDraRefNotFound;
    public static ErrorCode DsDraObjIsRepSource;
    public static ErrorCode DsDraDbError;
    public static ErrorCode DsDraNoReplica;
    public static ErrorCode DsDraAccessDenied;
    public static ErrorCode DsDraNotSupported;
    public static ErrorCode DsDraRpcCancelled;
    public static ErrorCode DsDraSourceDisabled;
    public static ErrorCode DsDraSinkDisabled;
    public static ErrorCode DsDraNameCollision;
    public static ErrorCode DsDraSourceReinstalled;
    public static ErrorCode DsDraMissingParent;
    public static ErrorCode DsDraPreempted;
    public static ErrorCode DsDraAbandonSync;
    public static ErrorCode DsDraShutdown;
    public static ErrorCode DsDraIncompatiblePartialSet;
    public static ErrorCode DsDraSourceIsPartialReplica;
    public static ErrorCode DsDraExtnConnectionFailed;
    public static ErrorCode DsInstallSchemaMismatch;
    public static ErrorCode DsDupLinkId;
    public static ErrorCode DsNameErrorResolving;
    public static ErrorCode DsNameErrorNotFound;
    public static ErrorCode DsNameErrorNotUnique;
    public static ErrorCode DsNameErrorNoMapping;
    public static ErrorCode DsNameErrorDomainOnly;
    public static ErrorCode DsNameErrorNoSyntacticalMapping;
    public static ErrorCode DsConstructedAttMod;
    public static ErrorCode DsWrongOmObjClass;
    public static ErrorCode DsDraReplPending;
    public static ErrorCode DsDsRequired;
    public static ErrorCode DsInvalidLdapDisplayName;
    public static ErrorCode DsNonBaseSearch;
    public static ErrorCode DsCantRetrieveAtts;
    public static ErrorCode DsBacklinkWithoutLink;
    public static ErrorCode DsEpochMismatch;
    public static ErrorCode DsSrcNameMismatch;
    public static ErrorCode DsSrcAndDstNcIdentical;
    public static ErrorCode DsDstNcMismatch;
    public static ErrorCode DsNotAuthoritiveForDstNc;
    public static ErrorCode DsSrcGuidMismatch;
    public static ErrorCode DsCantMoveDeletedObject;
    public static ErrorCode DsPdcOperationInProgress;
    public static ErrorCode DsCrossDomainCleanupReqd;
    public static ErrorCode DsIllegalXdomMoveOperation;
    public static ErrorCode DsCantWithAcctGroupMembershps;
    public static ErrorCode DsNcMustHaveNcParent;
    public static ErrorCode DsCrImpossibleToValidate;
    public static ErrorCode DsDstDomainNotNative;
    public static ErrorCode DsMissingInfrastructureContainer;
    public static ErrorCode DsCantMoveAccountGroup;
    public static ErrorCode DsCantMoveResourceGroup;
    public static ErrorCode DsInvalidSearchFlag;
    public static ErrorCode DsNoTreeDeleteAboveNc;
    public static ErrorCode DsCouldntLockTreeForDelete;
    public static ErrorCode DsCouldntIdentifyObjectsForTreeDelete;
    public static ErrorCode DsSamInitFailure;
    public static ErrorCode DsSensitiveGroupViolation;
    public static ErrorCode DsCantModPrimarygroupid;
    public static ErrorCode DsIllegalBaseSchemaMod;
    public static ErrorCode DsNonsafeSchemaChange;
    public static ErrorCode DsSchemaUpdateDisallowed;
    public static ErrorCode DsCantCreateUnderSchema;
    public static ErrorCode DsInstallNoSrcSchVersion;
    public static ErrorCode DsInstallNoSchVersionInInifile;
    public static ErrorCode DsInvalidGroupType;
    public static ErrorCode DsNoNestGlobalgroupInMixeddomain;
    public static ErrorCode DsNoNestLocalgroupInMixeddomain;
    public static ErrorCode DsGlobalCantHaveLocalMember;
    public static ErrorCode DsGlobalCantHaveUniversalMember;
    public static ErrorCode DsUniversalCantHaveLocalMember;
    public static ErrorCode DsGlobalCantHaveCrossdomainMember;
    public static ErrorCode DsLocalCantHaveCrossdomainLocalMember;
    public static ErrorCode DsHavePrimaryMembers;
    public static ErrorCode DsStringSdConversionFailed;
    public static ErrorCode DsNamingMasterGc;
    public static ErrorCode DsDnsLookupFailure;
    public static ErrorCode DsCouldntUpdateSpns;
    public static ErrorCode DsCantRetrieveSd;
    public static ErrorCode DsKeyNotUnique;
    public static ErrorCode DsWrongLinkedAttSyntax;
    public static ErrorCode DsSamNeedBootkeyPassword;
    public static ErrorCode DsSamNeedBootkeyFloppy;
    public static ErrorCode DsCantStart;
    public static ErrorCode DsInitFailure;
    public static ErrorCode DsNoPktPrivacyOnConnection;
    public static ErrorCode DsSourceDomainInForest;
    public static ErrorCode DsDestinationDomainNotInForest;
    public static ErrorCode DsDestinationAuditingNotEnabled;
    public static ErrorCode DsCantFindDcForSrcDomain;
    public static ErrorCode DsSrcObjNotGroupOrUser;
    public static ErrorCode DsSrcSidExistsInForest;
    public static ErrorCode DsSrcAndDstObjectClassMismatch;
    public static ErrorCode SamInitFailure;
    public static ErrorCode DsDraSchemaInfoShip;
    public static ErrorCode DsDraSchemaConflict;
    public static ErrorCode DsDraEarlierSchemaConflict;
    public static ErrorCode DsDraObjNcMismatch;
    public static ErrorCode DsNcStillHasDsas;
    public static ErrorCode DsGcRequired;
    public static ErrorCode DsLocalMemberOfLocalOnly;
    public static ErrorCode DsNoFpoInUniversalGroups;
    public static ErrorCode DsCantAddToGc;
    public static ErrorCode DsNoCheckpointWithPdc;
    public static ErrorCode DsSourceAuditingNotEnabled;
    public static ErrorCode DsCantCreateInNondomainNc;
    public static ErrorCode DsInvalidNameForSpn;
    public static ErrorCode DsFilterUsesContructedAttrs;
    public static ErrorCode DsUnicodepwdNotInQuotes;
    public static ErrorCode DsMachineAccountQuotaExceeded;
    public static ErrorCode DsMustBeRunOnDstDc;
    public static ErrorCode DsSrcDcMustBeSp4OrGreater;
    public static ErrorCode DsCantTreeDeleteCriticalObj;
    public static ErrorCode DsInitFailureConsole;
    public static ErrorCode DsSamInitFailureConsole;
    public static ErrorCode DsForestVersionTooHigh;
    public static ErrorCode DsDomainVersionTooHigh;
    public static ErrorCode DsForestVersionTooLow;
    public static ErrorCode DsDomainVersionTooLow;
    public static ErrorCode DsIncompatibleVersion;
    public static ErrorCode DsLowDsaVersion;
    public static ErrorCode DsNoBehaviorVersionInMixeddomain;
    public static ErrorCode DsNotSupportedSortOrder;
    public static ErrorCode DsNameNotUnique;
    public static ErrorCode DsMachineAccountCreatedPrent4;
    public static ErrorCode DsOutOfVersionStore;
    public static ErrorCode DsIncompatibleControlsUsed;
    public static ErrorCode DsNoRefDomain;
    public static ErrorCode DsReservedLinkId;
    public static ErrorCode DsLinkIdNotAvailable;
    public static ErrorCode DsAgCantHaveUniversalMember;
    public static ErrorCode DsModifydnDisallowedByInstanceType;
    public static ErrorCode DsNoObjectMoveInSchemaNc;
    public static ErrorCode DsModifydnDisallowedByFlag;
    public static ErrorCode DsModifydnWrongGrandparent;
    public static ErrorCode DsNameErrorTrustReferral;
    public static ErrorCode NotSupportedOnStandardServer;
    public static ErrorCode DsCantAccessRemotePartOfAd;
    public static ErrorCode DsCrImpossibleToValidateV2;
    public static ErrorCode DsThreadLimitExceeded;
    public static ErrorCode DsNotClosest;
    public static ErrorCode DsCantDeriveSpnWithoutServerRef;
    public static ErrorCode DsSingleUserModeFailed;
    public static ErrorCode DsNtdscriptSyntaxError;
    public static ErrorCode DsNtdscriptProcessError;
    public static ErrorCode DsDifferentReplEpochs;
    public static ErrorCode DsDrsExtensionsChanged;
    public static ErrorCode DsReplicaSetChangeNotAllowedOnDisabledCr;
    public static ErrorCode DsNoMsdsIntid;
    public static ErrorCode DsDupMsdsIntid;
    public static ErrorCode DsExistsInRdnattid;
    public static ErrorCode DsAuthorizationFailed;
    public static ErrorCode DsInvalidScript;
    public static ErrorCode DsRemoteCrossrefOpFailed;
    public static ErrorCode DsCrossRefBusy;
    public static ErrorCode DsCantDeriveSpnForDeletedDomain;
    public static ErrorCode DsCantDemoteWithWriteableNc;
    public static ErrorCode DsDuplicateIdFound;
    public static ErrorCode DsInsufficientAttrToCreateObject;
    public static ErrorCode DsGroupConversionError;
    public static ErrorCode DsCantMoveAppBasicGroup;
    public static ErrorCode DsCantMoveAppQueryGroup;
    public static ErrorCode DsRoleNotVerified;
    public static ErrorCode DsWkoContainerCannotBeSpecial;
    public static ErrorCode DsDomainRenameInProgress;
    public static ErrorCode DsExistingAdChildNc;
    public static ErrorCode DsReplLifetimeExceeded;
    public static ErrorCode DsDisallowedInSystemContainer;
    public static ErrorCode DsLdapSendQueueFull;
    public static ErrorCode DsDraOutScheduleWindow;
    public static ErrorCode DsPolicyNotKnown;
    public static ErrorCode NoSiteSettingsObject;
    public static ErrorCode NoSecrets;
    public static ErrorCode NoWritableDcFound;
    public static ErrorCode DsNoServerObject;
    public static ErrorCode DsNoNtdsaObject;
    public static ErrorCode DsNonAsqSearch;
    public static ErrorCode DsAuditFailure;
    public static ErrorCode DsInvalidSearchFlagSubtree;
    public static ErrorCode DsInvalidSearchFlagTuple;
    public static ErrorCode DsHierarchyTableTooDeep;
    public static ErrorCode DsDraCorruptUtdVector;
    public static ErrorCode DsDraSecretsDenied;
    public static ErrorCode DsReservedMapiId;
    public static ErrorCode DsMapiIdNotAvailable;
    public static ErrorCode DsDraMissingKrbtgtSecret;
    public static ErrorCode DsDomainNameExistsInForest;
    public static ErrorCode DsFlatNameExistsInForest;
    public static ErrorCode InvalidUserPrincipalName;
    public static ErrorCode DsOidMappedGroupCantHaveMembers;
    public static ErrorCode DsOidNotFound;
    public static ErrorCode DsDraRecycledTarget;
    public static ErrorCode DsDisallowedNcRedirect;
    public static ErrorCode DsHighAdldsFfl;
    public static ErrorCode DsHighDsaVersion;
    public static ErrorCode DsLowAdldsFfl;
    public static ErrorCode DomainSidSameAsLocalWorkstation;
    public static ErrorCode DsUndeleteSamValidationFailed;
    public static ErrorCode IncorrectAccountType;
    public static ErrorCode DsSpnValueNotUniqueInForest;
    public static ErrorCode DsUpnValueNotUniqueInForest;
    public static ErrorCode DsMissingForestTrust;
    public static ErrorCode DsValueKeyNotUnique;
    public static ErrorCode IpsecQmPolicyExists;
    public static ErrorCode IpsecQmPolicyNotFound;
    public static ErrorCode IpsecQmPolicyInUse;
    public static ErrorCode IpsecMmPolicyExists;
    public static ErrorCode IpsecMmPolicyNotFound;
    public static ErrorCode IpsecMmPolicyInUse;
    public static ErrorCode IpsecMmFilterExists;
    public static ErrorCode IpsecMmFilterNotFound;
    public static ErrorCode IpsecTransportFilterExists;
    public static ErrorCode IpsecTransportFilterNotFound;
    public static ErrorCode IpsecMmAuthExists;
    public static ErrorCode IpsecMmAuthNotFound;
    public static ErrorCode IpsecMmAuthInUse;
    public static ErrorCode IpsecDefaultMmPolicyNotFound;
    public static ErrorCode IpsecDefaultMmAuthNotFound;
    public static ErrorCode IpsecDefaultQmPolicyNotFound;
    public static ErrorCode IpsecTunnelFilterExists;
    public static ErrorCode IpsecTunnelFilterNotFound;
    public static ErrorCode IpsecMmFilterPendingDeletion;
    public static ErrorCode IpsecTransportFilterPendingDeletion;
    public static ErrorCode IpsecTunnelFilterPendingDeletion;
    public static ErrorCode IpsecMmPolicyPendingDeletion;
    public static ErrorCode IpsecMmAuthPendingDeletion;
    public static ErrorCode IpsecQmPolicyPendingDeletion;
    public static ErrorCode IpsecIkeNegStatusBegin;
    public static ErrorCode IpsecIkeAuthFail;
    public static ErrorCode IpsecIkeAttribFail;
    public static ErrorCode IpsecIkeNegotiationPending;
    public static ErrorCode IpsecIkeGeneralProcessingError;
    public static ErrorCode IpsecIkeTimedOut;
    public static ErrorCode IpsecIkeNoCert;
    public static ErrorCode IpsecIkeSaDeleted;
    public static ErrorCode IpsecIkeSaReaped;
    public static ErrorCode IpsecIkeMmAcquireDrop;
    public static ErrorCode IpsecIkeQmAcquireDrop;
    public static ErrorCode IpsecIkeQueueDropMm;
    public static ErrorCode IpsecIkeQueueDropNoMm;
    public static ErrorCode IpsecIkeDropNoResponse;
    public static ErrorCode IpsecIkeMmDelayDrop;
    public static ErrorCode IpsecIkeQmDelayDrop;
    public static ErrorCode IpsecIkeError;
    public static ErrorCode IpsecIkeCrlFailed;
    public static ErrorCode IpsecIkeInvalidKeyUsage;
    public static ErrorCode IpsecIkeInvalidCertType;
    public static ErrorCode IpsecIkeNoPrivateKey;
    public static ErrorCode IpsecIkeSimultaneousRekey;
    public static ErrorCode IpsecIkeDhFail;
    public static ErrorCode IpsecIkeCriticalPayloadNotRecognized;
    public static ErrorCode IpsecIkeInvalidHeader;
    public static ErrorCode IpsecIkeNoPolicy;
    public static ErrorCode IpsecIkeInvalidSignature;
    public static ErrorCode IpsecIkeKerberosError;
    public static ErrorCode IpsecIkeNoPublicKey;
    public static ErrorCode IpsecIkeProcessErr;
    public static ErrorCode IpsecIkeProcessErrSa;
    public static ErrorCode IpsecIkeProcessErrProp;
    public static ErrorCode IpsecIkeProcessErrTrans;
    public static ErrorCode IpsecIkeProcessErrKe;
    public static ErrorCode IpsecIkeProcessErrId;
    public static ErrorCode IpsecIkeProcessErrCert;
    public static ErrorCode IpsecIkeProcessErrCertReq;
    public static ErrorCode IpsecIkeProcessErrHash;
    public static ErrorCode IpsecIkeProcessErrSig;
    public static ErrorCode IpsecIkeProcessErrNonce;
    public static ErrorCode IpsecIkeProcessErrNotify;
    public static ErrorCode IpsecIkeProcessErrDelete;
    public static ErrorCode IpsecIkeProcessErrVendor;
    public static ErrorCode IpsecIkeInvalidPayload;
    public static ErrorCode IpsecIkeLoadSoftSa;
    public static ErrorCode IpsecIkeSoftSaTornDown;
    public static ErrorCode IpsecIkeInvalidCookie;
    public static ErrorCode IpsecIkeNoPeerCert;
    public static ErrorCode IpsecIkePeerCrlFailed;
    public static ErrorCode IpsecIkePolicyChange;
    public static ErrorCode IpsecIkeNoMmPolicy;
    public static ErrorCode IpsecIkeNotcbpriv;
    public static ErrorCode IpsecIkeSecloadfail;
    public static ErrorCode IpsecIkeFailsspinit;
    public static ErrorCode IpsecIkeFailqueryssp;
    public static ErrorCode IpsecIkeSrvacqfail;
    public static ErrorCode IpsecIkeSrvquerycred;
    public static ErrorCode IpsecIkeGetspifail;
    public static ErrorCode IpsecIkeInvalidFilter;
    public static ErrorCode IpsecIkeOutOfMemory;
    public static ErrorCode IpsecIkeAddUpdateKeyFailed;
    public static ErrorCode IpsecIkeInvalidPolicy;
    public static ErrorCode IpsecIkeUnknownDoi;
    public static ErrorCode IpsecIkeInvalidSituation;
    public static ErrorCode IpsecIkeDhFailure;
    public static ErrorCode IpsecIkeInvalidGroup;
    public static ErrorCode IpsecIkeEncrypt;
    public static ErrorCode IpsecIkeDecrypt;
    public static ErrorCode IpsecIkePolicyMatch;
    public static ErrorCode IpsecIkeUnsupportedId;
    public static ErrorCode IpsecIkeInvalidHash;
    public static ErrorCode IpsecIkeInvalidHashAlg;
    public static ErrorCode IpsecIkeInvalidHashSize;
    public static ErrorCode IpsecIkeInvalidEncryptAlg;
    public static ErrorCode IpsecIkeInvalidAuthAlg;
    public static ErrorCode IpsecIkeInvalidSig;
    public static ErrorCode IpsecIkeLoadFailed;
    public static ErrorCode IpsecIkeRpcDelete;
    public static ErrorCode IpsecIkeBenignReinit;
    public static ErrorCode IpsecIkeInvalidResponderLifetimeNotify;
    public static ErrorCode IpsecIkeInvalidMajorVersion;
    public static ErrorCode IpsecIkeInvalidCertKeylen;
    public static ErrorCode IpsecIkeMmLimit;
    public static ErrorCode IpsecIkeNegotiationDisabled;
    public static ErrorCode IpsecIkeQmLimit;
    public static ErrorCode IpsecIkeMmExpired;
    public static ErrorCode IpsecIkePeerMmAssumedInvalid;
    public static ErrorCode IpsecIkeCertChainPolicyMismatch;
    public static ErrorCode IpsecIkeUnexpectedMessageId;
    public static ErrorCode IpsecIkeInvalidAuthPayload;
    public static ErrorCode IpsecIkeDosCookieSent;
    public static ErrorCode IpsecIkeShuttingDown;
    public static ErrorCode IpsecIkeCgaAuthFailed;
    public static ErrorCode IpsecIkeProcessErrNatoa;
    public static ErrorCode IpsecIkeInvalidMmForQm;
    public static ErrorCode IpsecIkeQmExpired;
    public static ErrorCode IpsecIkeTooManyFilters;
    public static ErrorCode IpsecIkeNegStatusEnd;
    public static ErrorCode IpsecIkeKillDummyNapTunnel;
    public static ErrorCode IpsecIkeInnerIpAssignmentFailure;
    public static ErrorCode IpsecIkeRequireCpPayloadMissing;
    public static ErrorCode IpsecKeyModuleImpersonationNegotiationPending;
    public static ErrorCode IpsecIkeCoexistenceSuppress;
    public static ErrorCode IpsecIkeRatelimitDrop;
    public static ErrorCode IpsecIkePeerDoesntSupportMobike;
    public static ErrorCode IpsecIkeAuthorizationFailure;
    public static ErrorCode IpsecIkeStrongCredAuthorizationFailure;
    public static ErrorCode IpsecIkeAuthorizationFailureWithOptionalRetry;
    public static ErrorCode IpsecIkeStrongCredAuthorizationAndCertmapFailure;
    public static ErrorCode IpsecIkeNegStatusExtendedEnd;
    public static ErrorCode IpsecBadSpi;
    public static ErrorCode IpsecSaLifetimeExpired;
    public static ErrorCode IpsecWrongSa;
    public static ErrorCode IpsecReplayCheckFailed;
    public static ErrorCode IpsecInvalidPacket;
    public static ErrorCode IpsecIntegrityCheckFailed;
    public static ErrorCode IpsecClearTextDrop;
    public static ErrorCode IpsecAuthFirewallDrop;
    public static ErrorCode IpsecThrottleDrop;
    public static ErrorCode IpsecDospBlock;
    public static ErrorCode IpsecDospReceivedMulticast;
    public static ErrorCode IpsecDospInvalidPacket;
    public static ErrorCode IpsecDospStateLookupFailed;
    public static ErrorCode IpsecDospMaxEntries;
    public static ErrorCode IpsecDospKeymodNotAllowed;
    public static ErrorCode IpsecDospNotInstalled;
    public static ErrorCode IpsecDospMaxPerIpRatelimitQueues;
    public static ErrorCode SxsSectionNotFound;
    public static ErrorCode SxsCantGenActctx;
    public static ErrorCode SxsInvalidActctxdataFormat;
    public static ErrorCode SxsAssemblyNotFound;
    public static ErrorCode SxsManifestFormatError;
    public static ErrorCode SxsManifestParseError;
    public static ErrorCode SxsActivationContextDisabled;
    public static ErrorCode SxsKeyNotFound;
    public static ErrorCode SxsVersionConflict;
    public static ErrorCode SxsWrongSectionType;
    public static ErrorCode SxsThreadQueriesDisabled;
    public static ErrorCode SxsProcessDefaultAlreadySet;
    public static ErrorCode SxsUnknownEncodingGroup;
    public static ErrorCode SxsUnknownEncoding;
    public static ErrorCode SxsInvalidXmlNamespaceUri;
    public static ErrorCode SxsRootManifestDependencyNotInstalled;
    public static ErrorCode SxsLeafManifestDependencyNotInstalled;
    public static ErrorCode SxsInvalidAssemblyIdentityAttribute;
    public static ErrorCode SxsManifestMissingRequiredDefaultNamespace;
    public static ErrorCode SxsManifestInvalidRequiredDefaultNamespace;
    public static ErrorCode SxsPrivateManifestCrossPathWithReparsePoint;
    public static ErrorCode SxsDuplicateDllName;
    public static ErrorCode SxsDuplicateWindowclassName;
    public static ErrorCode SxsDuplicateClsid;
    public static ErrorCode SxsDuplicateIid;
    public static ErrorCode SxsDuplicateTlbid;
    public static ErrorCode SxsDuplicateProgid;
    public static ErrorCode SxsDuplicateAssemblyName;
    public static ErrorCode SxsFileHashMismatch;
    public static ErrorCode SxsPolicyParseError;
    public static ErrorCode SxsXmlEMissingquote;
    public static ErrorCode SxsXmlECommentsyntax;
    public static ErrorCode SxsXmlEBadstartnamechar;
    public static ErrorCode SxsXmlEBadnamechar;
    public static ErrorCode SxsXmlEBadcharinstring;
    public static ErrorCode SxsXmlEXmldeclsyntax;
    public static ErrorCode SxsXmlEBadchardata;
    public static ErrorCode SxsXmlEMissingwhitespace;
    public static ErrorCode SxsXmlEExpectingtagend;
    public static ErrorCode SxsXmlEMissingsemicolon;
    public static ErrorCode SxsXmlEUnbalancedparen;
    public static ErrorCode SxsXmlEInternalerror;
    public static ErrorCode SxsXmlEUnexpectedWhitespace;
    public static ErrorCode SxsXmlEIncompleteEncoding;
    public static ErrorCode SxsXmlEMissingParen;
    public static ErrorCode SxsXmlEExpectingclosequote;
    public static ErrorCode SxsXmlEMultipleColons;
    public static ErrorCode SxsXmlEInvalidDecimal;
    public static ErrorCode SxsXmlEInvalidHexidecimal;
    public static ErrorCode SxsXmlEInvalidUnicode;
    public static ErrorCode SxsXmlEWhitespaceorquestionmark;
    public static ErrorCode SxsXmlEUnexpectedendtag;
    public static ErrorCode SxsXmlEUnclosedtag;
    public static ErrorCode SxsXmlEDuplicateattribute;
    public static ErrorCode SxsXmlEMultipleroots;
    public static ErrorCode SxsXmlEInvalidatrootlevel;
    public static ErrorCode SxsXmlEBadxmldecl;
    public static ErrorCode SxsXmlEMissingroot;
    public static ErrorCode SxsXmlEUnexpectedeof;
    public static ErrorCode SxsXmlEBadperefinsubset;
    public static ErrorCode SxsXmlEUnclosedstarttag;
    public static ErrorCode SxsXmlEUnclosedendtag;
    public static ErrorCode SxsXmlEUnclosedstring;
    public static ErrorCode SxsXmlEUnclosedcomment;
    public static ErrorCode SxsXmlEUncloseddecl;
    public static ErrorCode SxsXmlEUnclosedcdata;
    public static ErrorCode SxsXmlEReservednamespace;
    public static ErrorCode SxsXmlEInvalidencoding;
    public static ErrorCode SxsXmlEInvalidswitch;
    public static ErrorCode SxsXmlEBadxmlcase;
    public static ErrorCode SxsXmlEInvalidStandalone;
    public static ErrorCode SxsXmlEUnexpectedStandalone;
    public static ErrorCode SxsXmlEInvalidVersion;
    public static ErrorCode SxsXmlEMissingequals;
    public static ErrorCode SxsProtectionRecoveryFailed;
    public static ErrorCode SxsProtectionPublicKeyTooShort;
    public static ErrorCode SxsProtectionCatalogNotValid;
    public static ErrorCode SxsUntranslatableHresult;
    public static ErrorCode SxsProtectionCatalogFileMissing;
    public static ErrorCode SxsMissingAssemblyIdentityAttribute;
    public static ErrorCode SxsInvalidAssemblyIdentityAttributeName;
    public static ErrorCode SxsAssemblyMissing;
    public static ErrorCode SxsCorruptActivationStack;
    public static ErrorCode SxsCorruption;
    public static ErrorCode SxsEarlyDeactivation;
    public static ErrorCode SxsInvalidDeactivation;
    public static ErrorCode SxsMultipleDeactivation;
    public static ErrorCode SxsProcessTerminationRequested;
    public static ErrorCode SxsReleaseActivationContext;
    public static ErrorCode SxsSystemDefaultActivationContextEmpty;
    public static ErrorCode SxsInvalidIdentityAttributeValue;
    public static ErrorCode SxsInvalidIdentityAttributeName;
    public static ErrorCode SxsIdentityDuplicateAttribute;
    public static ErrorCode SxsIdentityParseError;
    public static ErrorCode MalformedSubstitutionString;
    public static ErrorCode SxsIncorrectPublicKeyToken;
    public static ErrorCode UnmappedSubstitutionString;
    public static ErrorCode SxsAssemblyNotLocked;
    public static ErrorCode SxsComponentStoreCorrupt;
    public static ErrorCode AdvancedInstallerFailed;
    public static ErrorCode XmlEncodingMismatch;
    public static ErrorCode SxsManifestIdentitySameButContentsDifferent;
    public static ErrorCode SxsIdentitiesDifferent;
    public static ErrorCode SxsAssemblyIsNotADeployment;
    public static ErrorCode SxsFileNotPartOfAssembly;
    public static ErrorCode SxsManifestTooBig;
    public static ErrorCode SxsSettingNotRegistered;
    public static ErrorCode SxsTransactionClosureIncomplete;
    public static ErrorCode SmiPrimitiveInstallerFailed;
    public static ErrorCode GenericCommandFailed;
    public static ErrorCode SxsFileHashMissing;
    public static ErrorCode EvtInvalidChannelPath;
    public static ErrorCode EvtInvalidQuery;
    public static ErrorCode EvtPublisherMetadataNotFound;
    public static ErrorCode EvtEventTemplateNotFound;
    public static ErrorCode EvtInvalidPublisherName;
    public static ErrorCode EvtInvalidEventData;
    public static ErrorCode EvtChannelNotFound;
    public static ErrorCode EvtMalformedXmlText;
    public static ErrorCode EvtSubscriptionToDirectChannel;
    public static ErrorCode EvtConfigurationError;
    public static ErrorCode EvtQueryResultStale;
    public static ErrorCode EvtQueryResultInvalidPosition;
    public static ErrorCode EvtNonValidatingMsxml;
    public static ErrorCode EvtFilterAlreadyscoped;
    public static ErrorCode EvtFilterNoteltset;
    public static ErrorCode EvtFilterInvarg;
    public static ErrorCode EvtFilterInvtest;
    public static ErrorCode EvtFilterInvtype;
    public static ErrorCode EvtFilterParseerr;
    public static ErrorCode EvtFilterUnsupportedop;
    public static ErrorCode EvtFilterUnexpectedtoken;
    public static ErrorCode EvtInvalidOperationOverEnabledDirectChannel;
    public static ErrorCode EvtInvalidChannelPropertyValue;
    public static ErrorCode EvtInvalidPublisherPropertyValue;
    public static ErrorCode EvtChannelCannotActivate;
    public static ErrorCode EvtFilterTooComplex;
    public static ErrorCode EvtMessageNotFound;
    public static ErrorCode EvtMessageIdNotFound;
    public static ErrorCode EvtUnresolvedValueInsert;
    public static ErrorCode EvtUnresolvedParameterInsert;
    public static ErrorCode EvtMaxInsertsReached;
    public static ErrorCode EvtEventDefinitionNotFound;
    public static ErrorCode EvtMessageLocaleNotFound;
    public static ErrorCode EvtVersionTooOld;
    public static ErrorCode EvtVersionTooNew;
    public static ErrorCode EvtCannotOpenChannelOfQuery;
    public static ErrorCode EvtPublisherDisabled;
    public static ErrorCode EvtFilterOutOfRange;
    public static ErrorCode EcSubscriptionCannotActivate;
    public static ErrorCode EcLogDisabled;
    public static ErrorCode EcCircularForwarding;
    public static ErrorCode EcCredstoreFull;
    public static ErrorCode EcCredNotFound;
    public static ErrorCode EcNoActiveChannel;
    public static ErrorCode MuiFileNotFound;
    public static ErrorCode MuiInvalidFile;
    public static ErrorCode MuiInvalidRcConfig;
    public static ErrorCode MuiInvalidLocaleName;
    public static ErrorCode MuiInvalidUltimatefallbackName;
    public static ErrorCode MuiFileNotLoaded;
    public static ErrorCode ResourceEnumUserStop;
    public static ErrorCode MuiIntlsettingsUilangNotInstalled;
    public static ErrorCode MuiIntlsettingsInvalidLocaleName;
    public static ErrorCode MrmRuntimeNoDefaultOrNeutralResource;
    public static ErrorCode MrmInvalidPriconfig;
    public static ErrorCode MrmInvalidFileType;
    public static ErrorCode MrmUnknownQualifier;
    public static ErrorCode MrmInvalidQualifierValue;
    public static ErrorCode MrmNoCandidate;
    public static ErrorCode MrmNoMatchOrDefaultCandidate;
    public static ErrorCode MrmResourceTypeMismatch;
    public static ErrorCode MrmDuplicateMapName;
    public static ErrorCode MrmDuplicateEntry;
    public static ErrorCode MrmInvalidResourceIdentifier;
    public static ErrorCode MrmFilepathTooLong;
    public static ErrorCode MrmUnsupportedDirectoryType;
    public static ErrorCode MrmInvalidPriFile;
    public static ErrorCode MrmNamedResourceNotFound;
    public static ErrorCode MrmMapNotFound;
    public static ErrorCode MrmUnsupportedProfileType;
    public static ErrorCode MrmInvalidQualifierOperator;
    public static ErrorCode MrmIndeterminateQualifierValue;
    public static ErrorCode MrmAutomergeEnabled;
    public static ErrorCode MrmTooManyResources;
    public static ErrorCode MrmUnsupportedFileTypeForMerge;
    public static ErrorCode MrmUnsupportedFileTypeForLoadUnloadPriFile;
    public static ErrorCode MrmNoCurrentViewOnThread;
    public static ErrorCode DifferentProfileResourceManagerExist;
    public static ErrorCode OperationNotAllowedFromSystemComponent;
    public static ErrorCode MrmDirectRefToNonDefaultResource;
    public static ErrorCode MrmGenerationCountMismatch;
    public static ErrorCode PriMergeVersionMismatch;
    public static ErrorCode PriMergeMissingSchema;
    public static ErrorCode PriMergeLoadFileFailed;
    public static ErrorCode PriMergeAddFileFailed;
    public static ErrorCode PriMergeWriteFileFailed;
    public static ErrorCode PriMergeMultiplePackageFamiliesNotAllowed;
    public static ErrorCode PriMergeMultipleMainPackagesNotAllowed;
    public static ErrorCode PriMergeBundlePackagesNotAllowed;
    public static ErrorCode PriMergeMainPackageRequired;
    public static ErrorCode PriMergeResourcePackageRequired;
    public static ErrorCode PriMergeInvalidFileName;
    public static ErrorCode McaInvalidCapabilitiesString;
    public static ErrorCode McaInvalidVcpVersion;
    public static ErrorCode McaMonitorViolatesMccsSpecification;
    public static ErrorCode McaMccsVersionMismatch;
    public static ErrorCode McaUnsupportedMccsVersion;
    public static ErrorCode McaInternalError;
    public static ErrorCode McaInvalidTechnologyTypeReturned;
    public static ErrorCode McaUnsupportedColorTemperature;
    public static ErrorCode AmbiguousSystemDevice;
    public static ErrorCode SystemDeviceNotFound;
    public static ErrorCode HashNotSupported;
    public static ErrorCode HashNotPresent;
    public static ErrorCode SecondaryIcProviderNotRegistered;
    public static ErrorCode GpioClientInformationInvalid;
    public static ErrorCode GpioVersionNotSupported;
    public static ErrorCode GpioInvalidRegistrationPacket;
    public static ErrorCode GpioOperationDenied;
    public static ErrorCode GpioIncompatibleConnectMode;
    public static ErrorCode GpioInterruptAlreadyUnmasked;
    public static ErrorCode CannotSwitchRunlevel;
    public static ErrorCode InvalidRunlevelSetting;
    public static ErrorCode RunlevelSwitchTimeout;
    public static ErrorCode RunlevelSwitchAgentTimeout;
    public static ErrorCode RunlevelSwitchInProgress;
    public static ErrorCode ServicesFailedAutostart;
    public static ErrorCode ComTaskStopPending;
    public static ErrorCode InstallOpenPackageFailed;
    public static ErrorCode InstallPackageNotFound;
    public static ErrorCode InstallInvalidPackage;
    public static ErrorCode InstallResolveDependencyFailed;
    public static ErrorCode InstallOutOfDiskSpace;
    public static ErrorCode InstallNetworkFailure;
    public static ErrorCode InstallRegistrationFailure;
    public static ErrorCode InstallDeregistrationFailure;
    public static ErrorCode InstallCancel;
    public static ErrorCode InstallFailed;
    public static ErrorCode RemoveFailed;
    public static ErrorCode PackageAlreadyExists;
    public static ErrorCode NeedsRemediation;
    public static ErrorCode InstallPrerequisiteFailed;
    public static ErrorCode PackageRepositoryCorrupted;
    public static ErrorCode InstallPolicyFailure;
    public static ErrorCode PackageUpdating;
    public static ErrorCode DeploymentBlockedByPolicy;
    public static ErrorCode PackagesInUse;
    public static ErrorCode RecoveryFileCorrupt;
    public static ErrorCode InvalidStagedSignature;
    public static ErrorCode DeletingExistingApplicationdataStoreFailed;
    public static ErrorCode InstallPackageDowngrade;
    public static ErrorCode SystemNeedsRemediation;
    public static ErrorCode AppxIntegrityFailureClrNgen;
    public static ErrorCode ResiliencyFileCorrupt;
    public static ErrorCode InstallFirewallServiceNotRunning;
    public static ErrorCode PackageMoveFailed;
    public static ErrorCode InstallVolumeNotEmpty;
    public static ErrorCode InstallVolumeOffline;
    public static ErrorCode InstallVolumeCorrupt;
    public static ErrorCode NeedsRegistration;
    public static ErrorCode InstallWrongProcessorArchitecture;
    public static ErrorCode DevSideloadLimitExceeded;
    public static ErrorCode InstallOptionalPackageRequiresMainPackage;
    public static ErrorCode PackageNotSupportedOnFilesystem;
    public static ErrorCode PackageMoveBlockedByStreaming;
    public static ErrorCode InstallOptionalPackageApplicationidNotUnique;
    public static ErrorCode PackageStagingOnhold;
    public static ErrorCode InstallInvalidRelatedSetUpdate;
    public static ErrorCode InstallOptionalPackageRequiresMainPackageFulltrustCapability;
    public static ErrorCode DeploymentBlockedByUserLogOff;
    public static ErrorCode ProvisionOptionalPackageRequiresMainPackageProvisioned;
    public static ErrorCode PackagesReputationCheckFailed;
    public static ErrorCode PackagesReputationCheckTimedout;
    public static ErrorCode StateLoadStoreFailed;
    public static ErrorCode StateGetVersionFailed;
    public static ErrorCode StateSetVersionFailed;
    public static ErrorCode StateStructuredResetFailed;
    public static ErrorCode StateOpenContainerFailed;
    public static ErrorCode StateCreateContainerFailed;
    public static ErrorCode StateDeleteContainerFailed;
    public static ErrorCode StateReadSettingFailed;
    public static ErrorCode StateWriteSettingFailed;
    public static ErrorCode StateDeleteSettingFailed;
    public static ErrorCode StateQuerySettingFailed;
    public static ErrorCode StateReadCompositeSettingFailed;
    public static ErrorCode StateWriteCompositeSettingFailed;
    public static ErrorCode StateEnumerateContainerFailed;
    public static ErrorCode StateEnumerateSettingsFailed;
    public static ErrorCode StateCompositeSettingValueSizeLimitExceeded;
    public static ErrorCode StateSettingValueSizeLimitExceeded;
    public static ErrorCode StateSettingNameSizeLimitExceeded;
    public static ErrorCode StateContainerNameSizeLimitExceeded;
    public static ErrorCode ApiUnavailable;
    public static ErrorCode AuditingDisabled;
    public static ErrorCode AllSidsFiltered;
    public static ErrorCode BizrulesNotEnabled;
    public static ErrorCode CredRequiresConfirmation;
    public static ErrorCode FltIoComplete;
    public static ErrorCode FltNoHandlerDefined;
    public static ErrorCode FltContextAlreadyDefined;
    public static ErrorCode FltInvalidAsynchronousRequest;
    public static ErrorCode FltDisallowFastIo;
    public static ErrorCode FltInvalidNameRequest;
    public static ErrorCode FltNotSafeToPostOperation;
    public static ErrorCode FltNotInitialized;
    public static ErrorCode FltFilterNotReady;
    public static ErrorCode FltPostOperationCleanup;
    public static ErrorCode FltInternalError;
    public static ErrorCode FltDeletingObject;
    public static ErrorCode FltMustBeNonpagedPool;
    public static ErrorCode FltDuplicateEntry;
    public static ErrorCode FltCbdqDisabled;
    public static ErrorCode FltDoNotAttach;
    public static ErrorCode FltDoNotDetach;
    public static ErrorCode FltInstanceAltitudeCollision;
    public static ErrorCode FltInstanceNameCollision;
    public static ErrorCode FltFilterNotFound;
    public static ErrorCode FltVolumeNotFound;
    public static ErrorCode FltInstanceNotFound;
    public static ErrorCode FltContextAllocationNotFound;
    public static ErrorCode FltInvalidContextRegistration;
    public static ErrorCode FltNameCacheMiss;
    public static ErrorCode FltNoDeviceObject;
    public static ErrorCode FltVolumeAlreadyMounted;
    public static ErrorCode FltAlreadyEnlisted;
    public static ErrorCode FltContextAlreadyLinked;
    public static ErrorCode FltNoWaiterForReply;
    public static ErrorCode FltRegistrationBusy;
    public static ErrorCode HungDisplayDriverThread;
    public static ErrorCode MonitorNoDescriptor;
    public static ErrorCode MonitorUnknownDescriptorFormat;
    public static ErrorCode MonitorInvalidDescriptorChecksum;
    public static ErrorCode MonitorInvalidStandardTimingBlock;
    public static ErrorCode MonitorWmiDatablockRegistrationFailed;
    public static ErrorCode MonitorInvalidSerialNumberMondscBlock;
    public static ErrorCode MonitorInvalidUserFriendlyMondscBlock;
    public static ErrorCode MonitorNoMoreDescriptorData;
    public static ErrorCode MonitorInvalidDetailedTimingBlock;
    public static ErrorCode MonitorInvalidManufactureDate;
    public static ErrorCode GraphicsNotExclusiveModeOwner;
    public static ErrorCode GraphicsInsufficientDmaBuffer;
    public static ErrorCode GraphicsInvalidDisplayAdapter;
    public static ErrorCode GraphicsAdapterWasReset;
    public static ErrorCode GraphicsInvalidDriverModel;
    public static ErrorCode GraphicsPresentModeChanged;
    public static ErrorCode GraphicsPresentOccluded;
    public static ErrorCode GraphicsPresentDenied;
    public static ErrorCode GraphicsCannotcolorconvert;
    public static ErrorCode GraphicsDriverMismatch;
    public static ErrorCode GraphicsPartialDataPopulated;
    public static ErrorCode GraphicsPresentRedirectionDisabled;
    public static ErrorCode GraphicsPresentUnoccluded;
    public static ErrorCode GraphicsWindowdcNotAvailable;
    public static ErrorCode GraphicsWindowlessPresentDisabled;
    public static ErrorCode GraphicsNoVideoMemory;
    public static ErrorCode GraphicsCantLockMemory;
    public static ErrorCode GraphicsAllocationBusy;
    public static ErrorCode GraphicsTooManyReferences;
    public static ErrorCode GraphicsTryAgainLater;
    public static ErrorCode GraphicsTryAgainNow;
    public static ErrorCode GraphicsAllocationInvalid;
    public static ErrorCode GraphicsUnswizzlingApertureUnavailable;
    public static ErrorCode GraphicsUnswizzlingApertureUnsupported;
    public static ErrorCode GraphicsCantEvictPinnedAllocation;
    public static ErrorCode GraphicsInvalidAllocationUsage;
    public static ErrorCode GraphicsCantRenderLockedAllocation;
    public static ErrorCode GraphicsAllocationClosed;
    public static ErrorCode GraphicsInvalidAllocationInstance;
    public static ErrorCode GraphicsInvalidAllocationHandle;
    public static ErrorCode GraphicsWrongAllocationDevice;
    public static ErrorCode GraphicsAllocationContentLost;
    public static ErrorCode GraphicsGpuExceptionOnDevice;
    public static ErrorCode GraphicsSkipAllocationPreparation;
    public static ErrorCode GraphicsInvalidVidpnTopology;
    public static ErrorCode GraphicsVidpnTopologyNotSupported;
    public static ErrorCode GraphicsVidpnTopologyCurrentlyNotSupported;
    public static ErrorCode GraphicsInvalidVidpn;
    public static ErrorCode GraphicsInvalidVideoPresentSource;
    public static ErrorCode GraphicsInvalidVideoPresentTarget;
    public static ErrorCode GraphicsVidpnModalityNotSupported;
    public static ErrorCode GraphicsModeNotPinned;
    public static ErrorCode GraphicsInvalidVidpnSourcemodeset;
    public static ErrorCode GraphicsInvalidVidpnTargetmodeset;
    public static ErrorCode GraphicsInvalidFrequency;
    public static ErrorCode GraphicsInvalidActiveRegion;
    public static ErrorCode GraphicsInvalidTotalRegion;
    public static ErrorCode GraphicsInvalidVideoPresentSourceMode;
    public static ErrorCode GraphicsInvalidVideoPresentTargetMode;
    public static ErrorCode GraphicsPinnedModeMustRemainInSet;
    public static ErrorCode GraphicsPathAlreadyInTopology;
    public static ErrorCode GraphicsModeAlreadyInModeset;
    public static ErrorCode GraphicsInvalidVideopresentsourceset;
    public static ErrorCode GraphicsInvalidVideopresenttargetset;
    public static ErrorCode GraphicsSourceAlreadyInSet;
    public static ErrorCode GraphicsTargetAlreadyInSet;
    public static ErrorCode GraphicsInvalidVidpnPresentPath;
    public static ErrorCode GraphicsNoRecommendedVidpnTopology;
    public static ErrorCode GraphicsInvalidMonitorFrequencyrangeset;
    public static ErrorCode GraphicsInvalidMonitorFrequencyrange;
    public static ErrorCode GraphicsFrequencyrangeNotInSet;
    public static ErrorCode GraphicsNoPreferredMode;
    public static ErrorCode GraphicsFrequencyrangeAlreadyInSet;
    public static ErrorCode GraphicsStaleModeset;
    public static ErrorCode GraphicsInvalidMonitorSourcemodeset;
    public static ErrorCode GraphicsInvalidMonitorSourceMode;
    public static ErrorCode GraphicsNoRecommendedFunctionalVidpn;
    public static ErrorCode GraphicsModeIdMustBeUnique;
    public static ErrorCode GraphicsEmptyAdapterMonitorModeSupportIntersection;
    public static ErrorCode GraphicsVideoPresentTargetsLessThanSources;
    public static ErrorCode GraphicsPathNotInTopology;
    public static ErrorCode GraphicsAdapterMustHaveAtLeastOneSource;
    public static ErrorCode GraphicsAdapterMustHaveAtLeastOneTarget;
    public static ErrorCode GraphicsInvalidMonitordescriptorset;
    public static ErrorCode GraphicsInvalidMonitordescriptor;
    public static ErrorCode GraphicsMonitordescriptorNotInSet;
    public static ErrorCode GraphicsMonitordescriptorAlreadyInSet;
    public static ErrorCode GraphicsMonitordescriptorIdMustBeUnique;
    public static ErrorCode GraphicsInvalidVidpnTargetSubsetType;
    public static ErrorCode GraphicsResourcesNotRelated;
    public static ErrorCode GraphicsSourceIdMustBeUnique;
    public static ErrorCode GraphicsTargetIdMustBeUnique;
    public static ErrorCode GraphicsNoAvailableVidpnTarget;
    public static ErrorCode GraphicsMonitorCouldNotBeAssociatedWithAdapter;
    public static ErrorCode GraphicsNoVidpnmgr;
    public static ErrorCode GraphicsNoActiveVidpn;
    public static ErrorCode GraphicsStaleVidpnTopology;
    public static ErrorCode GraphicsMonitorNotConnected;
    public static ErrorCode GraphicsSourceNotInTopology;
    public static ErrorCode GraphicsInvalidPrimarysurfaceSize;
    public static ErrorCode GraphicsInvalidVisibleregionSize;
    public static ErrorCode GraphicsInvalidStride;
    public static ErrorCode GraphicsInvalidPixelformat;
    public static ErrorCode GraphicsInvalidColorbasis;
    public static ErrorCode GraphicsInvalidPixelvalueaccessmode;
    public static ErrorCode GraphicsTargetNotInTopology;
    public static ErrorCode GraphicsNoDisplayModeManagementSupport;
    public static ErrorCode GraphicsVidpnSourceInUse;
    public static ErrorCode GraphicsCantAccessActiveVidpn;
    public static ErrorCode GraphicsInvalidPathImportanceOrdinal;
    public static ErrorCode GraphicsInvalidPathContentGeometryTransformation;
    public static ErrorCode GraphicsPathContentGeometryTransformationNotSupported;
    public static ErrorCode GraphicsInvalidGammaRamp;
    public static ErrorCode GraphicsGammaRampNotSupported;
    public static ErrorCode GraphicsMultisamplingNotSupported;
    public static ErrorCode GraphicsModeNotInModeset;
    public static ErrorCode GraphicsDatasetIsEmpty;
    public static ErrorCode GraphicsNoMoreElementsInDataset;
    public static ErrorCode GraphicsInvalidVidpnTopologyRecommendationReason;
    public static ErrorCode GraphicsInvalidPathContentType;
    public static ErrorCode GraphicsInvalidCopyprotectionType;
    public static ErrorCode GraphicsUnassignedModesetAlreadyExists;
    public static ErrorCode GraphicsPathContentGeometryTransformationNotPinned;
    public static ErrorCode GraphicsInvalidScanlineOrdering;
    public static ErrorCode GraphicsTopologyChangesNotAllowed;
    public static ErrorCode GraphicsNoAvailableImportanceOrdinals;
    public static ErrorCode GraphicsIncompatiblePrivateFormat;
    public static ErrorCode GraphicsInvalidModePruningAlgorithm;
    public static ErrorCode GraphicsInvalidMonitorCapabilityOrigin;
    public static ErrorCode GraphicsInvalidMonitorFrequencyrangeConstraint;
    public static ErrorCode GraphicsMaxNumPathsReached;
    public static ErrorCode GraphicsCancelVidpnTopologyAugmentation;
    public static ErrorCode GraphicsInvalidClientType;
    public static ErrorCode GraphicsClientvidpnNotSet;
    public static ErrorCode GraphicsSpecifiedChildAlreadyConnected;
    public static ErrorCode GraphicsChildDescriptorNotSupported;
    public static ErrorCode GraphicsUnknownChildStatus;
    public static ErrorCode GraphicsNotALinkedAdapter;
    public static ErrorCode GraphicsLeadlinkNotEnumerated;
    public static ErrorCode GraphicsChainlinksNotEnumerated;
    public static ErrorCode GraphicsAdapterChainNotReady;
    public static ErrorCode GraphicsChainlinksNotStarted;
    public static ErrorCode GraphicsChainlinksNotPoweredOn;
    public static ErrorCode GraphicsInconsistentDeviceLinkState;
    public static ErrorCode GraphicsLeadlinkStartDeferred;
    public static ErrorCode GraphicsNotPostDeviceDriver;
    public static ErrorCode GraphicsPollingTooFrequently;
    public static ErrorCode GraphicsStartDeferred;
    public static ErrorCode GraphicsAdapterAccessNotExcluded;
    public static ErrorCode GraphicsDependableChildStatus;
    public static ErrorCode GraphicsOpmNotSupported;
    public static ErrorCode GraphicsCoppNotSupported;
    public static ErrorCode GraphicsUabNotSupported;
    public static ErrorCode GraphicsOpmInvalidEncryptedParameters;
    public static ErrorCode GraphicsOpmNoVideoOutputsExist;
    public static ErrorCode GraphicsOpmInternalError;
    public static ErrorCode GraphicsOpmInvalidHandle;
    public static ErrorCode GraphicsPvpInvalidCertificateLength;
    public static ErrorCode GraphicsOpmSpanningModeEnabled;
    public static ErrorCode GraphicsOpmTheaterModeEnabled;
    public static ErrorCode GraphicsPvpHfsFailed;
    public static ErrorCode GraphicsOpmInvalidSrm;
    public static ErrorCode GraphicsOpmOutputDoesNotSupportHdcp;
    public static ErrorCode GraphicsOpmOutputDoesNotSupportAcp;
    public static ErrorCode GraphicsOpmOutputDoesNotSupportCgmsa;
    public static ErrorCode GraphicsOpmHdcpSrmNeverSet;
    public static ErrorCode GraphicsOpmResolutionTooHigh;
    public static ErrorCode GraphicsOpmAllHdcpHardwareAlreadyInUse;
    public static ErrorCode GraphicsOpmVideoOutputNoLongerExists;
    public static ErrorCode GraphicsOpmSessionTypeChangeInProgress;
    public static ErrorCode GraphicsOpmVideoOutputDoesNotHaveCoppSemantics;
    public static ErrorCode GraphicsOpmInvalidInformationRequest;
    public static ErrorCode GraphicsOpmDriverInternalError;
    public static ErrorCode GraphicsOpmVideoOutputDoesNotHaveOpmSemantics;
    public static ErrorCode GraphicsOpmSignalingNotSupported;
    public static ErrorCode GraphicsOpmInvalidConfigurationRequest;
    public static ErrorCode GraphicsI2CNotSupported;
    public static ErrorCode GraphicsI2CDeviceDoesNotExist;
    public static ErrorCode GraphicsI2CErrorTransmittingData;
    public static ErrorCode GraphicsI2CErrorReceivingData;
    public static ErrorCode GraphicsDdcciVcpNotSupported;
    public static ErrorCode GraphicsDdcciInvalidData;
    public static ErrorCode GraphicsDdcciMonitorReturnedInvalidTimingStatusByte;
    public static ErrorCode GraphicsMcaInvalidCapabilitiesString;
    public static ErrorCode GraphicsMcaInternalError;
    public static ErrorCode GraphicsDdcciInvalidMessageCommand;
    public static ErrorCode GraphicsDdcciInvalidMessageLength;
    public static ErrorCode GraphicsDdcciInvalidMessageChecksum;
    public static ErrorCode GraphicsInvalidPhysicalMonitorHandle;
    public static ErrorCode GraphicsMonitorNoLongerExists;
    public static ErrorCode GraphicsDdcciCurrentCurrentValueGreaterThanMaximumValue;
    public static ErrorCode GraphicsMcaInvalidVcpVersion;
    public static ErrorCode GraphicsMcaMonitorViolatesMccsSpecification;
    public static ErrorCode GraphicsMcaMccsVersionMismatch;
    public static ErrorCode GraphicsMcaUnsupportedMccsVersion;
    public static ErrorCode GraphicsMcaInvalidTechnologyTypeReturned;
    public static ErrorCode GraphicsMcaUnsupportedColorTemperature;
    public static ErrorCode GraphicsOnlyConsoleSessionSupported;
    public static ErrorCode GraphicsNoDisplayDeviceCorrespondsToName;
    public static ErrorCode GraphicsDisplayDeviceNotAttachedToDesktop;
    public static ErrorCode GraphicsMirroringDevicesNotSupported;
    public static ErrorCode GraphicsInvalidPointer;
    public static ErrorCode GraphicsNoMonitorsCorrespondToDisplayDevice;
    public static ErrorCode GraphicsParameterArrayTooSmall;
    public static ErrorCode GraphicsInternalError;
    public static ErrorCode GraphicsSessionTypeChangeInProgress;
    public static ErrorCode NdisInterfaceClosing;
    public static ErrorCode NdisBadVersion;
    public static ErrorCode NdisBadCharacteristics;
    public static ErrorCode NdisAdapterNotFound;
    public static ErrorCode NdisOpenFailed;
    public static ErrorCode NdisDeviceFailed;
    public static ErrorCode NdisMulticastFull;
    public static ErrorCode NdisMulticastExists;
    public static ErrorCode NdisMulticastNotFound;
    public static ErrorCode NdisRequestAborted;
    public static ErrorCode NdisResetInProgress;
    public static ErrorCode NdisNotSupported;
    public static ErrorCode NdisInvalidPacket;
    public static ErrorCode NdisAdapterNotReady;
    public static ErrorCode NdisInvalidLength;
    public static ErrorCode NdisInvalidData;
    public static ErrorCode NdisBufferTooShort;
    public static ErrorCode NdisInvalidOid;
    public static ErrorCode NdisAdapterRemoved;
    public static ErrorCode NdisUnsupportedMedia;
    public static ErrorCode NdisGroupAddressInUse;
    public static ErrorCode NdisFileNotFound;
    public static ErrorCode NdisErrorReadingFile;
    public static ErrorCode NdisAlreadyMapped;
    public static ErrorCode NdisResourceConflict;
    public static ErrorCode NdisMediaDisconnected;
    public static ErrorCode NdisInvalidAddress;
    public static ErrorCode NdisInvalidDeviceRequest;
    public static ErrorCode NdisPaused;
    public static ErrorCode NdisInterfaceNotFound;
    public static ErrorCode NdisUnsupportedRevision;
    public static ErrorCode NdisInvalidPort;
    public static ErrorCode NdisInvalidPortState;
    public static ErrorCode NdisLowPowerState;
    public static ErrorCode NdisReinitRequired;
    public static ErrorCode NdisDot11AutoConfigEnabled;
    public static ErrorCode NdisDot11MediaInUse;
    public static ErrorCode NdisDot11PowerStateInvalid;
    public static ErrorCode NdisPmWolPatternListFull;
    public static ErrorCode NdisPmProtocolOffloadListFull;
    public static ErrorCode NdisDot11ApChannelCurrentlyNotAvailable;
    public static ErrorCode NdisDot11ApBandCurrentlyNotAvailable;
    public static ErrorCode NdisDot11ApChannelNotAllowed;
    public static ErrorCode NdisDot11ApBandNotAllowed;
    public static ErrorCode NdisIndicationRequired;
    public static ErrorCode NdisOffloadPolicy;
    public static ErrorCode NdisOffloadConnectionRejected;
    public static ErrorCode NdisOffloadPathRejected;
    public static ErrorCode HvInvalidHypercallCode;
    public static ErrorCode HvInvalidHypercallInput;
    public static ErrorCode HvInvalidAlignment;
    public static ErrorCode HvInvalidParameter;
    public static ErrorCode HvAccessDenied;
    public static ErrorCode HvInvalidPartitionState;
    public static ErrorCode HvOperationDenied;
    public static ErrorCode HvUnknownProperty;
    public static ErrorCode HvPropertyValueOutOfRange;
    public static ErrorCode HvInsufficientMemory;
    public static ErrorCode HvPartitionTooDeep;
    public static ErrorCode HvInvalidPartitionId;
    public static ErrorCode HvInvalidVpIndex;
    public static ErrorCode HvInvalidPortId;
    public static ErrorCode HvInvalidConnectionId;
    public static ErrorCode HvInsufficientBuffers;
    public static ErrorCode HvNotAcknowledged;
    public static ErrorCode HvInvalidVpState;
    public static ErrorCode HvAcknowledged;
    public static ErrorCode HvInvalidSaveRestoreState;
    public static ErrorCode HvInvalidSynicState;
    public static ErrorCode HvObjectInUse;
    public static ErrorCode HvInvalidProximityDomainInfo;
    public static ErrorCode HvNoData;
    public static ErrorCode HvInactive;
    public static ErrorCode HvNoResources;
    public static ErrorCode HvFeatureUnavailable;
    public static ErrorCode HvInsufficientBuffer;
    public static ErrorCode HvInsufficientDeviceDomains;
    public static ErrorCode HvCpuidFeatureValidation;
    public static ErrorCode HvCpuidXsaveFeatureValidation;
    public static ErrorCode HvProcessorStartupTimeout;
    public static ErrorCode HvSmxEnabled;
    public static ErrorCode HvInvalidLpIndex;
    public static ErrorCode HvInvalidRegisterValue;
    public static ErrorCode HvInvalidVtlState;
    public static ErrorCode HvNxNotDetected;
    public static ErrorCode HvInvalidDeviceId;
    public static ErrorCode HvInvalidDeviceState;
    public static ErrorCode HvPendingPageRequests;
    public static ErrorCode HvPageRequestInvalid;
    public static ErrorCode HvInvalidCpuGroupId;
    public static ErrorCode HvInvalidCpuGroupState;
    public static ErrorCode HvOperationFailed;
    public static ErrorCode HvNotAllowedWithNestedVirtActive;
    public static ErrorCode HvNotPresent;
    public static ErrorCode VidDuplicateHandler;
    public static ErrorCode VidTooManyHandlers;
    public static ErrorCode VidQueueFull;
    public static ErrorCode VidHandlerNotPresent;
    public static ErrorCode VidInvalidObjectName;
    public static ErrorCode VidPartitionNameTooLong;
    public static ErrorCode VidMessageQueueNameTooLong;
    public static ErrorCode VidPartitionAlreadyExists;
    public static ErrorCode VidPartitionDoesNotExist;
    public static ErrorCode VidPartitionNameNotFound;
    public static ErrorCode VidMessageQueueAlreadyExists;
    public static ErrorCode VidExceededMbpEntryMapLimit;
    public static ErrorCode VidMbStillReferenced;
    public static ErrorCode VidChildGpaPageSetCorrupted;
    public static ErrorCode VidInvalidNumaSettings;
    public static ErrorCode VidInvalidNumaNodeIndex;
    public static ErrorCode VidNotificationQueueAlreadyAssociated;
    public static ErrorCode VidInvalidMemoryBlockHandle;
    public static ErrorCode VidPageRangeOverflow;
    public static ErrorCode VidInvalidMessageQueueHandle;
    public static ErrorCode VidInvalidGpaRangeHandle;
    public static ErrorCode VidNoMemoryBlockNotificationQueue;
    public static ErrorCode VidMemoryBlockLockCountExceeded;
    public static ErrorCode VidInvalidPpmHandle;
    public static ErrorCode VidMbpsAreLocked;
    public static ErrorCode VidMessageQueueClosed;
    public static ErrorCode VidVirtualProcessorLimitExceeded;
    public static ErrorCode VidStopPending;
    public static ErrorCode VidInvalidProcessorState;
    public static ErrorCode VidExceededKmContextCountLimit;
    public static ErrorCode VidKmInterfaceAlreadyInitialized;
    public static ErrorCode VidMbPropertyAlreadySetReset;
    public static ErrorCode VidMmioRangeDestroyed;
    public static ErrorCode VidInvalidChildGpaPageSet;
    public static ErrorCode VidReservePageSetIsBeingUsed;
    public static ErrorCode VidReservePageSetTooSmall;
    public static ErrorCode VidMbpAlreadyLockedUsingReservedPage;
    public static ErrorCode VidMbpCountExceededLimit;
    public static ErrorCode VidSavedStateCorrupt;
    public static ErrorCode VidSavedStateUnrecognizedItem;
    public static ErrorCode VidSavedStateIncompatible;
    public static ErrorCode VidVtlAccessDenied;
    public static ErrorCode VmcomputeTerminatedDuringStart;
    public static ErrorCode VmcomputeImageMismatch;
    public static ErrorCode VmcomputeHypervNotInstalled;
    public static ErrorCode VmcomputeOperationPending;
    public static ErrorCode VmcomputeTooManyNotifications;
    public static ErrorCode VmcomputeInvalidState;
    public static ErrorCode VmcomputeUnexpectedExit;
    public static ErrorCode VmcomputeTerminated;
    public static ErrorCode VmcomputeConnectFailed;
    public static ErrorCode VmcomputeTimeout;
    public static ErrorCode VmcomputeConnectionClosed;
    public static ErrorCode VmcomputeUnknownMessage;
    public static ErrorCode VmcomputeUnsupportedProtocolVersion;
    public static ErrorCode VmcomputeInvalidJson;
    public static ErrorCode VmcomputeSystemNotFound;
    public static ErrorCode VmcomputeSystemAlreadyExists;
    public static ErrorCode VmcomputeSystemAlreadyStopped;
    public static ErrorCode VmcomputeProtocolError;
    public static ErrorCode VmcomputeInvalidLayer;
    public static ErrorCode VmcomputeWindowsInsiderRequired;
    public static ErrorCode VnetVirtualSwitchNameNotFound;
    public static ErrorCode VidRemoteNodeParentGpaPagesUsed;
    public static ErrorCode VolmgrIncompleteRegeneration;
    public static ErrorCode VolmgrIncompleteDiskMigration;
    public static ErrorCode VolmgrDatabaseFull;
    public static ErrorCode VolmgrDiskConfigurationCorrupted;
    public static ErrorCode VolmgrDiskConfigurationNotInSync;
    public static ErrorCode VolmgrPackConfigUpdateFailed;
    public static ErrorCode VolmgrDiskContainsNonSimpleVolume;
    public static ErrorCode VolmgrDiskDuplicate;
    public static ErrorCode VolmgrDiskDynamic;
    public static ErrorCode VolmgrDiskIdInvalid;
    public static ErrorCode VolmgrDiskInvalid;
    public static ErrorCode VolmgrDiskLastVoter;
    public static ErrorCode VolmgrDiskLayoutInvalid;
    public static ErrorCode VolmgrDiskLayoutNonBasicBetweenBasicPartitions;
    public static ErrorCode VolmgrDiskLayoutNotCylinderAligned;
    public static ErrorCode VolmgrDiskLayoutPartitionsTooSmall;
    public static ErrorCode VolmgrDiskLayoutPrimaryBetweenLogicalPartitions;
    public static ErrorCode VolmgrDiskLayoutTooManyPartitions;
    public static ErrorCode VolmgrDiskMissing;
    public static ErrorCode VolmgrDiskNotEmpty;
    public static ErrorCode VolmgrDiskNotEnoughSpace;
    public static ErrorCode VolmgrDiskRevectoringFailed;
    public static ErrorCode VolmgrDiskSectorSizeInvalid;
    public static ErrorCode VolmgrDiskSetNotContained;
    public static ErrorCode VolmgrDiskUsedByMultipleMembers;
    public static ErrorCode VolmgrDiskUsedByMultiplePlexes;
    public static ErrorCode VolmgrDynamicDiskNotSupported;
    public static ErrorCode VolmgrExtentAlreadyUsed;
    public static ErrorCode VolmgrExtentNotContiguous;
    public static ErrorCode VolmgrExtentNotInPublicRegion;
    public static ErrorCode VolmgrExtentNotSectorAligned;
    public static ErrorCode VolmgrExtentOverlapsEbrPartition;
    public static ErrorCode VolmgrExtentVolumeLengthsDoNotMatch;
    public static ErrorCode VolmgrFaultTolerantNotSupported;
    public static ErrorCode VolmgrInterleaveLengthInvalid;
    public static ErrorCode VolmgrMaximumRegisteredUsers;
    public static ErrorCode VolmgrMemberInSync;
    public static ErrorCode VolmgrMemberIndexDuplicate;
    public static ErrorCode VolmgrMemberIndexInvalid;
    public static ErrorCode VolmgrMemberMissing;
    public static ErrorCode VolmgrMemberNotDetached;
    public static ErrorCode VolmgrMemberRegenerating;
    public static ErrorCode VolmgrAllDisksFailed;
    public static ErrorCode VolmgrNoRegisteredUsers;
    public static ErrorCode VolmgrNoSuchUser;
    public static ErrorCode VolmgrNotificationReset;
    public static ErrorCode VolmgrNumberOfMembersInvalid;
    public static ErrorCode VolmgrNumberOfPlexesInvalid;
    public static ErrorCode VolmgrPackDuplicate;
    public static ErrorCode VolmgrPackIdInvalid;
    public static ErrorCode VolmgrPackInvalid;
    public static ErrorCode VolmgrPackNameInvalid;
    public static ErrorCode VolmgrPackOffline;
    public static ErrorCode VolmgrPackHasQuorum;
    public static ErrorCode VolmgrPackWithoutQuorum;
    public static ErrorCode VolmgrPartitionStyleInvalid;
    public static ErrorCode VolmgrPartitionUpdateFailed;
    public static ErrorCode VolmgrPlexInSync;
    public static ErrorCode VolmgrPlexIndexDuplicate;
    public static ErrorCode VolmgrPlexIndexInvalid;
    public static ErrorCode VolmgrPlexLastActive;
    public static ErrorCode VolmgrPlexMissing;
    public static ErrorCode VolmgrPlexRegenerating;
    public static ErrorCode VolmgrPlexTypeInvalid;
    public static ErrorCode VolmgrPlexNotRaid5;
    public static ErrorCode VolmgrPlexNotSimple;
    public static ErrorCode VolmgrStructureSizeInvalid;
    public static ErrorCode VolmgrTooManyNotificationRequests;
    public static ErrorCode VolmgrTransactionInProgress;
    public static ErrorCode VolmgrUnexpectedDiskLayoutChange;
    public static ErrorCode VolmgrVolumeContainsMissingDisk;
    public static ErrorCode VolmgrVolumeIdInvalid;
    public static ErrorCode VolmgrVolumeLengthInvalid;
    public static ErrorCode VolmgrVolumeLengthNotSectorSizeMultiple;
    public static ErrorCode VolmgrVolumeNotMirrored;
    public static ErrorCode VolmgrVolumeNotRetained;
    public static ErrorCode VolmgrVolumeOffline;
    public static ErrorCode VolmgrVolumeRetained;
    public static ErrorCode VolmgrNumberOfExtentsInvalid;
    public static ErrorCode VolmgrDifferentSectorSize;
    public static ErrorCode VolmgrBadBootDisk;
    public static ErrorCode VolmgrPackConfigOffline;
    public static ErrorCode VolmgrPackConfigOnline;
    public static ErrorCode VolmgrNotPrimaryPack;
    public static ErrorCode VolmgrPackLogUpdateFailed;
    public static ErrorCode VolmgrNumberOfDisksInPlexInvalid;
    public static ErrorCode VolmgrNumberOfDisksInMemberInvalid;
    public static ErrorCode VolmgrVolumeMirrored;
    public static ErrorCode VolmgrPlexNotSimpleSpanned;
    public static ErrorCode VolmgrNoValidLogCopies;
    public static ErrorCode VolmgrPrimaryPackPresent;
    public static ErrorCode VolmgrNumberOfDisksInvalid;
    public static ErrorCode VolmgrMirrorNotSupported;
    public static ErrorCode VolmgrRaid5NotSupported;
    public static ErrorCode BcdNotAllEntriesImported;
    public static ErrorCode BcdTooManyElements;
    public static ErrorCode BcdNotAllEntriesSynchronized;
    public static ErrorCode VhdDriveFooterMissing;
    public static ErrorCode VhdDriveFooterChecksumMismatch;
    public static ErrorCode VhdDriveFooterCorrupt;
    public static ErrorCode VhdFormatUnknown;
    public static ErrorCode VhdFormatUnsupportedVersion;
    public static ErrorCode VhdSparseHeaderChecksumMismatch;
    public static ErrorCode VhdSparseHeaderUnsupportedVersion;
    public static ErrorCode VhdSparseHeaderCorrupt;
    public static ErrorCode VhdBlockAllocationFailure;
    public static ErrorCode VhdBlockAllocationTableCorrupt;
    public static ErrorCode VhdInvalidBlockSize;
    public static ErrorCode VhdBitmapMismatch;
    public static ErrorCode VhdParentVhdNotFound;
    public static ErrorCode VhdChildParentIdMismatch;
    public static ErrorCode VhdChildParentTimestampMismatch;
    public static ErrorCode VhdMetadataReadFailure;
    public static ErrorCode VhdMetadataWriteFailure;
    public static ErrorCode VhdInvalidSize;
    public static ErrorCode VhdInvalidFileSize;
    public static ErrorCode VirtdiskProviderNotFound;
    public static ErrorCode VirtdiskNotVirtualDisk;
    public static ErrorCode VhdParentVhdAccessDenied;
    public static ErrorCode VhdChildParentSizeMismatch;
    public static ErrorCode VhdDifferencingChainCycleDetected;
    public static ErrorCode VhdDifferencingChainErrorInParent;
    public static ErrorCode VirtualDiskLimitation;
    public static ErrorCode VhdInvalidType;
    public static ErrorCode VhdInvalidState;
    public static ErrorCode VirtdiskUnsupportedDiskSectorSize;
    public static ErrorCode VirtdiskDiskAlreadyOwned;
    public static ErrorCode VirtdiskDiskOnlineAndWritable;
    public static ErrorCode CtlogTrackingNotInitialized;
    public static ErrorCode CtlogLogfileSizeExceededMaxsize;
    public static ErrorCode CtlogVhdChangedOffline;
    public static ErrorCode CtlogInvalidTrackingState;
    public static ErrorCode CtlogInconsistentTrackingFile;
    public static ErrorCode VhdResizeWouldTruncateData;
    public static ErrorCode VhdCouldNotComputeMinimumVirtualSize;
    public static ErrorCode VhdAlreadyAtOrBelowMinimumVirtualSize;
    public static ErrorCode VhdMetadataFull;
    public static ErrorCode VhdInvalidChangeTrackingId;
    public static ErrorCode VhdChangeTrackingDisabled;
    public static ErrorCode VhdMissingChangeTrackingInformation;
    public static ErrorCode QueryStorageError;
    public static ErrorCode SpacesPoolWasDeleted;
    public static ErrorCode SpacesFaultDomainTypeInvalid;
    public static ErrorCode SpacesInternalError;
    public static ErrorCode SpacesResiliencyTypeInvalid;
    public static ErrorCode SpacesDriveSectorSizeInvalid;
    public static ErrorCode SpacesDriveRedundancyInvalid;
    public static ErrorCode SpacesNumberOfDataCopiesInvalid;
    public static ErrorCode SpacesParityLayoutInvalid;
    public static ErrorCode SpacesInterleaveLengthInvalid;
    public static ErrorCode SpacesNumberOfColumnsInvalid;
    public static ErrorCode SpacesNotEnoughDrives;
    public static ErrorCode SpacesExtendedError;
    public static ErrorCode SpacesProvisioningTypeInvalid;
    public static ErrorCode SpacesAllocationSizeInvalid;
    public static ErrorCode SpacesEnclosureAwareInvalid;
    public static ErrorCode SpacesWriteCacheSizeInvalid;
    public static ErrorCode SpacesNumberOfGroupsInvalid;
    public static ErrorCode SpacesDriveOperationalStateInvalid;
    public static ErrorCode VolsnapBootfileNotValid;
    public static ErrorCode VolsnapActivationTimeout;
    public static ErrorCode TieringNotSupportedOnVolume;
    public static ErrorCode TieringVolumeDismountInProgress;
    public static ErrorCode TieringStorageTierNotFound;
    public static ErrorCode TieringInvalidFileId;
    public static ErrorCode TieringWrongClusterNode;
    public static ErrorCode TieringAlreadyProcessing;
    public static ErrorCode TieringCannotPinObject;
    public static ErrorCode TieringFileIsNotPinned;
    public static ErrorCode NotATieredVolume;
    public static ErrorCode AttributeNotPresent;
    public static ErrorCode SeccoreInvalidCommand;
    public static ErrorCode NoApplicableAppLicensesFound;
    public static ErrorCode ClipLicenseNotFound;
    public static ErrorCode ClipDeviceLicenseMissing;
    public static ErrorCode ClipLicenseInvalidSignature;
    public static ErrorCode ClipKeyholderLicenseMissingOrInvalid;
    public static ErrorCode ClipLicenseExpired;
    public static ErrorCode ClipLicenseSignedByUnknownSource;
    public static ErrorCode ClipLicenseNotSigned;
    public static ErrorCode ClipLicenseHardwareIdOutOfTolerance;
    public static ErrorCode ClipLicenseDeviceIdMismatch;
    public static ErrorCode DbgCreateProcessFailureLockdown;
    public static ErrorCode DbgAttachProcessFailureLockdown;
    public static ErrorCode DbgConnectServerFailureLockdown;
    public static ErrorCode DbgStartServerFailureLockdown;
    public static ErrorCode IoPreempted;
    public static ErrorCode SvhdxErrorStored;
    public static ErrorCode SvhdxErrorNotAvailable;
    public static ErrorCode SvhdxUnitAttentionAvailable;
    public static ErrorCode SvhdxUnitAttentionCapacityDataChanged;
    public static ErrorCode SvhdxUnitAttentionReservationsPreempted;
    public static ErrorCode SvhdxUnitAttentionReservationsReleased;
    public static ErrorCode SvhdxUnitAttentionRegistrationsPreempted;
    public static ErrorCode SvhdxUnitAttentionOperatingDefinitionChanged;
    public static ErrorCode SvhdxReservationConflict;
    public static ErrorCode SvhdxWrongFileType;
    public static ErrorCode SvhdxVersionMismatch;
    public static ErrorCode VhdShared;
    public static ErrorCode SvhdxNoInitiator;
    public static ErrorCode VhdsetBackingStorageNotFound;
    public static ErrorCode SmbNoPreauthIntegrityHashOverlap;
    public static ErrorCode SmbBadClusterDialect;
}
public class SharpDX.Win32.ErrorCodeHelper : object {
    public static Result ToResult(ErrorCode errorCode);
    public static Result ToResult(int errorCode);
}
[GuidAttribute("0000000c-0000-0000-C000-000000000046")]
[ShadowAttribute("SharpDX.Win32.ComStreamShadow")]
public interface SharpDX.Win32.IStream {
    public abstract virtual long Seek(long offset, SeekOrigin origin);
    public abstract virtual void SetSize(long newSize);
    public abstract virtual long CopyTo(IStream streamDest, long numberOfBytesToCopy, Int64& bytesWritten);
    public abstract virtual void Commit(CommitFlags commitFlags);
    public abstract virtual void Revert();
    public abstract virtual void LockRegion(long offset, long numberOfBytesToLock, LockType dwLockType);
    public abstract virtual void UnlockRegion(long offset, long numberOfBytesToLock, LockType dwLockType);
    public abstract virtual StorageStatistics GetStatistics(StorageStatisticsFlags storageStatisticsFlags);
    public abstract virtual IStream Clone();
}
[GuidAttribute("0c733a30-2a1c-11ce-ade5-00aa0044773d")]
[ShadowAttribute("SharpDX.Win32.ComStreamBaseShadow")]
public interface SharpDX.Win32.IStreamBase {
    public abstract virtual int Read(IntPtr buffer, int numberOfBytesToRead);
    public abstract virtual int Write(IntPtr buffer, int numberOfBytesToRead);
}
[FlagsAttribute]
public enum SharpDX.Win32.LockType : Enum {
    public int value__;
    public static LockType Write;
    public static LockType Exclusive;
    public static LockType OnlyOnce;
}
[CompilerGeneratedAttribute]
internal class SharpDX.Win32.NamespaceDoc : object {
}
public class SharpDX.Win32.NativeMessage : ValueType {
    public IntPtr handle;
    public UInt32 msg;
    public IntPtr wParam;
    public IntPtr lParam;
    public UInt32 time;
    public RawPoint p;
}
public class SharpDX.Win32.PropertyBag : ComObject {
    private IPropertyBag2 nativePropertyBag;
    public int Count { get; }
    public String[] Keys { get; }
    public PropertyBag(IntPtr propertyBagPointer);
    protected virtual void NativePointerUpdated(IntPtr oldNativePointer);
    private void CheckIfInitialized();
    public int get_Count();
    public String[] get_Keys();
    public object Get(string name);
    public T1 Get(PropertyBagKey`2<T1, T2> propertyKey);
    public void Set(string name, object value);
    public void Set(PropertyBagKey`2<T1, T2> propertyKey, T1 value);
}
public class SharpDX.Win32.PropertyBagKey`2 : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public PropertyBagKey`2(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
public class SharpDX.Win32.SecurityAttributes : ValueType {
    public int Length;
    public IntPtr Descriptor;
    private int inheritHandle;
    public bool InheritHandle { get; public set; }
    public bool get_InheritHandle();
    public void set_InheritHandle(bool value);
}
public class SharpDX.Win32.StorageStatistics : ValueType {
    public string PwcsName;
    public int Type;
    public long CbSize;
    public long Mtime;
    public long Ctime;
    public long Atime;
    public int GrfMode;
    public int GrfLocksSupported;
    public Guid Clsid;
    public int GrfStateBits;
    public int Reserved;
    internal void __MarshalFree(__Native& ref);
    internal void __MarshalFrom(__Native& ref);
    internal void __MarshalTo(__Native& ref);
}
[FlagsAttribute]
public enum SharpDX.Win32.StorageStatisticsFlags : Enum {
    public int value__;
    public static StorageStatisticsFlags Default;
    public static StorageStatisticsFlags NoName;
    public static StorageStatisticsFlags None;
}
public class SharpDX.Win32.Variant : ValueType {
    private ushort vt;
    private ushort reserved1;
    private ushort reserved2;
    private ushort reserved3;
    private VariantValue variantValue;
    public VariantElementType ElementType { get; public set; }
    public VariantType Type { get; public set; }
    public object Value { get; public set; }
    public VariantElementType get_ElementType();
    public void set_ElementType(VariantElementType value);
    public VariantType get_Type();
    public void set_Type(VariantType value);
    public object get_Value();
    public void set_Value(object value);
}
public enum SharpDX.Win32.VariantElementType : Enum {
    public ushort value__;
    public static VariantElementType Empty;
    public static VariantElementType Null;
    public static VariantElementType Short;
    public static VariantElementType Int;
    public static VariantElementType Float;
    public static VariantElementType Double;
    public static VariantElementType Currency;
    public static VariantElementType Date;
    public static VariantElementType BinaryString;
    public static VariantElementType Dispatch;
    public static VariantElementType Error;
    public static VariantElementType Bool;
    public static VariantElementType Variant;
    public static VariantElementType ComUnknown;
    public static VariantElementType Decimal;
    public static VariantElementType Byte;
    public static VariantElementType UByte;
    public static VariantElementType UShort;
    public static VariantElementType UInt;
    public static VariantElementType Long;
    public static VariantElementType ULong;
    public static VariantElementType Int1;
    public static VariantElementType UInt1;
    public static VariantElementType Void;
    public static VariantElementType Result;
    public static VariantElementType Pointer;
    public static VariantElementType SafeArray;
    public static VariantElementType ConstantArray;
    public static VariantElementType UserDefined;
    public static VariantElementType StringPointer;
    public static VariantElementType WStringPointer;
    public static VariantElementType Recor;
    public static VariantElementType IntPointer;
    public static VariantElementType UIntPointer;
    public static VariantElementType FileTime;
    public static VariantElementType Blob;
    public static VariantElementType Stream;
    public static VariantElementType Storage;
    public static VariantElementType StreamedObject;
    public static VariantElementType StoredObject;
    public static VariantElementType BlobObject;
    public static VariantElementType ClipData;
    public static VariantElementType Clsid;
    public static VariantElementType VersionedStream;
    public static VariantElementType BinaryStringBlob;
}
[FlagsAttribute]
public enum SharpDX.Win32.VariantType : Enum {
    public ushort value__;
    public static VariantType Default;
    public static VariantType Vector;
    public static VariantType Array;
    public static VariantType ByRef;
    public static VariantType Reserved;
}
