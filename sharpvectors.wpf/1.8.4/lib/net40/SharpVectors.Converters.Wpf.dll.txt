public class SharpVectors.Converters.DirectorySvgConverter : SvgConverter {
    private bool _saveImage;
    private ImageEncoderType _encoderType;
    private BitmapEncoder _bitampEncoder;
    private int _convertedCount;
    private bool _isOverwrite;
    private bool _isRecursive;
    private bool _includeHidden;
    private bool _includeSecurity;
    private bool _writerErrorOccurred;
    private bool _fallbackOnWriterError;
    private string _errorFile;
    private DirectoryInfo _sourceDir;
    private DirectoryInfo _destinationDir;
    public bool Recursive { get; public set; }
    public bool Overwrite { get; public set; }
    public bool IncludeSecurity { get; public set; }
    public bool IncludeHidden { get; public set; }
    public bool WriterErrorOccurred { get; }
    public bool FallbackOnWriterError { get; public set; }
    public DirectoryInfo SourceDir { get; }
    public DirectoryInfo DestinationDir { get; }
    public string ErrorFile { get; }
    public bool SaveImage { get; public set; }
    public ImageEncoderType EncoderType { get; public set; }
    public BitmapEncoder Encoder { get; public set; }
    public DirectorySvgConverter(WpfDrawingSettings settings);
    public bool get_Recursive();
    public void set_Recursive(bool value);
    public bool get_Overwrite();
    public void set_Overwrite(bool value);
    public bool get_IncludeSecurity();
    public void set_IncludeSecurity(bool value);
    public bool get_IncludeHidden();
    public void set_IncludeHidden(bool value);
    public bool get_WriterErrorOccurred();
    public bool get_FallbackOnWriterError();
    public void set_FallbackOnWriterError(bool value);
    public DirectoryInfo get_SourceDir();
    public DirectoryInfo get_DestinationDir();
    public string get_ErrorFile();
    public bool get_SaveImage();
    public void set_SaveImage(bool value);
    public ImageEncoderType get_EncoderType();
    public void set_EncoderType(ImageEncoderType value);
    public BitmapEncoder get_Encoder();
    public void set_Encoder(BitmapEncoder value);
    public void Convert(DirectoryInfo sourceInfo, DirectoryInfo destInfo);
    private void ProcessConversion(DirectoryInfo source, DirectoryInfo target);
    private void ConvertImages(DirectoryInfo source, DirectoryInfo target);
    private void ConvertFiles(DirectoryInfo source, DirectoryInfo target);
}
public class SharpVectors.Converters.EmbeddedImageSerializerArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <ImagePath>k__BackingField;
    [CompilerGeneratedAttribute]
private BitmapImage <Image>k__BackingField;
    public string ImagePath { get; private set; }
    public BitmapImage Image { get; private set; }
    public EmbeddedImageSerializerArgs(string imagePath, BitmapImage image);
    [CompilerGeneratedAttribute]
public string get_ImagePath();
    [CompilerGeneratedAttribute]
private void set_ImagePath(string value);
    [CompilerGeneratedAttribute]
public BitmapImage get_Image();
    [CompilerGeneratedAttribute]
private void set_Image(BitmapImage value);
}
public class SharpVectors.Converters.EmbeddedImageSerializerVisitor : WpfEmbeddedImageVisitor {
    public static string ImageExt;
    private int _imageCount;
    private bool _saveImages;
    private bool _converterFallback;
    private string _namePrefix;
    private string _saveDirectory;
    private IDictionary`2<string, ImageSource> _imageCache;
    [CompilerGeneratedAttribute]
private EventHandler`1<EmbeddedImageSerializerArgs> _imageCreated;
    public bool SaveImages { get; public set; }
    public bool ConverterFallback { get; public set; }
    public string SaveDirectory { get; public set; }
    public string ImageNamePrefix { get; public set; }
    public EmbeddedImageSerializerVisitor(bool converterFallback);
    public EmbeddedImageSerializerVisitor(string saveDirectory);
    public EmbeddedImageSerializerVisitor(bool saveImages, string saveDirectory);
    [CompilerGeneratedAttribute]
private void add__imageCreated(EventHandler`1<EmbeddedImageSerializerArgs> value);
    [CompilerGeneratedAttribute]
private void remove__imageCreated(EventHandler`1<EmbeddedImageSerializerArgs> value);
    public void add_ImageCreated(EventHandler`1<EmbeddedImageSerializerArgs> value);
    public void remove_ImageCreated(EventHandler`1<EmbeddedImageSerializerArgs> value);
    public bool get_SaveImages();
    public void set_SaveImages(bool value);
    public bool get_ConverterFallback();
    public void set_ConverterFallback(bool value);
    public string get_SaveDirectory();
    public void set_SaveDirectory(string value);
    public string get_ImageNamePrefix();
    public void set_ImageNamePrefix(string value);
    public virtual void Initialize(WpfDrawingContext context);
    public virtual void Uninitialize();
    public virtual ImageSource Visit(SvgImageElement element, WpfDrawingContext context);
    private ImageSource GetImage(SvgImageElement element, WpfDrawingContext context);
    private string GetImagePath(string savedDir);
}
public class SharpVectors.Converters.EmbeddedImageVisitor : WpfEmbeddedImageVisitor {
    private IDictionary`2<string, ImageSource> _imageCache;
    public virtual void Initialize(WpfDrawingContext context);
    public virtual void Uninitialize();
    public virtual ImageSource Visit(SvgImageElement element, WpfDrawingContext context);
    private ImageSource GetImage(SvgImageElement element, WpfDrawingContext context);
}
public class SharpVectors.Converters.FileSvgConverter : SvgConverter {
    private bool _writerErrorOccurred;
    private bool _fallbackOnWriterError;
    private string _xamlFile;
    private string _zamlFile;
    private DrawingGroup _drawing;
    public bool WriterErrorOccurred { get; }
    public bool FallbackOnWriterError { get; public set; }
    public DrawingGroup Drawing { get; }
    public string XamlFile { get; }
    public string ZamlFile { get; }
    public FileSvgConverter(WpfDrawingSettings settings);
    public FileSvgConverter(bool saveXaml, bool saveZaml, WpfDrawingSettings settings);
    public bool get_WriterErrorOccurred();
    public bool get_FallbackOnWriterError();
    public void set_FallbackOnWriterError(bool value);
    public DrawingGroup get_Drawing();
    public string get_XamlFile();
    public string get_ZamlFile();
    public bool Convert(string svgFileName);
    public bool Convert(string svgFileName, string xamlFileName);
    public bool Convert(Stream svgStream, string xamlFileName);
    public bool Convert(TextReader svgTextReader, string xamlFileName);
    public bool Convert(XmlReader svgXmlReader, string xamlFileName);
    private bool ProcessFile(string fileName, string xamlFileName);
    private bool ProcessFile(Stream svgStream, string xamlFileName);
    private bool ProcessFile(TextReader svgTextReader, string xamlFileName);
    private bool ProcessFile(XmlReader svgXmlReader, string xamlFileName);
    private bool SaveFile(Drawing drawing, string fileName, string xamlFileName);
}
public class SharpVectors.Converters.FileSvgReader : SvgConverter {
    private bool _writerErrorOccurred;
    private bool _fallbackOnWriterError;
    private string _imageFile;
    private string _xamlFile;
    private string _zamlFile;
    private DirectoryInfo _workingDir;
    private DrawingGroup _drawing;
    private WpfDrawingDocument _drawingDocument;
    public bool WriterErrorOccurred { get; }
    public bool FallbackOnWriterError { get; public set; }
    public string ImageFile { get; }
    public string XamlFile { get; }
    public string ZamlFile { get; }
    public DrawingGroup Drawing { get; public set; }
    public WpfDrawingDocument DrawingDocument { get; }
    public FileSvgReader(WpfDrawingSettings settings, bool isEmbedded);
    public FileSvgReader(bool saveXaml, bool saveZaml, DirectoryInfo workingDir, WpfDrawingSettings settings, bool isEmbedded);
    public bool get_WriterErrorOccurred();
    public bool get_FallbackOnWriterError();
    public void set_FallbackOnWriterError(bool value);
    public string get_ImageFile();
    public string get_XamlFile();
    public string get_ZamlFile();
    public DrawingGroup get_Drawing();
    public void set_Drawing(DrawingGroup value);
    public WpfDrawingDocument get_DrawingDocument();
    public DrawingGroup Read(string svgFileName);
    public DrawingGroup Read(Uri svgUri);
    public DrawingGroup Read(Stream svgStream);
    public DrawingGroup Read(TextReader svgTextReader);
    public DrawingGroup Read(XmlReader svgXmlReader);
    public DrawingGroup Read(string svgFileName, DirectoryInfo destinationDir);
    public bool Save(string fileName, bool asXaml, bool asZaml);
    public bool Save(TextWriter textWriter);
    public bool Save(Stream stream);
    public bool SaveImage(string fileName, DirectoryInfo imageFileDir, ImageEncoderType encoderType);
    public bool SaveImage(string fileName, FileInfo imageFileName, ImageEncoderType encoderType);
    private DrawingGroup LoadFile(string fileName);
    private DrawingGroup LoadFile(Stream stream);
    private DrawingGroup LoadFile(Uri svgUri);
    private DrawingGroup LoadFile(TextReader textReader);
    private DrawingGroup LoadFile(XmlReader xmlReader);
    private bool SaveFile(Stream stream);
    private bool SaveFile(TextWriter textWriter);
    private bool SaveFile(string fileName);
    private bool SaveImageFile(string fileName, string imageFileName, ImageEncoderType encoderType);
    protected virtual void Dispose(bool disposing);
}
public class SharpVectors.Converters.FontFamilyVisitor : WpfFontFamilyVisitor {
    private FontFamily _arialFamily;
    public virtual WpfFontFamilyInfo Visit(string fontName, WpfFontFamilyInfo familyInfo, WpfDrawingContext context);
}
public enum SharpVectors.Converters.ImageEncoderType : Enum {
    public int value__;
    public static ImageEncoderType BmpBitmap;
    public static ImageEncoderType GifBitmap;
    public static ImageEncoderType JpegBitmap;
    public static ImageEncoderType PngBitmap;
    public static ImageEncoderType TiffBitmap;
    public static ImageEncoderType WmpBitmap;
}
public class SharpVectors.Converters.ImageSvgConverter : SvgConverter {
    private bool _writerErrorOccurred;
    private bool _fallbackOnWriterError;
    private string _xamlFile;
    private string _zamlFile;
    private DrawingGroup _drawing;
    private ImageEncoderType _encoderType;
    private BitmapEncoder _bitampEncoder;
    public bool WriterErrorOccurred { get; }
    public bool FallbackOnWriterError { get; public set; }
    public ImageEncoderType EncoderType { get; public set; }
    public BitmapEncoder Encoder { get; public set; }
    public DrawingGroup Drawing { get; }
    public string XamlFile { get; }
    public string ZamlFile { get; }
    public ImageSvgConverter(WpfDrawingSettings settings);
    public ImageSvgConverter(bool saveXaml, bool saveZaml, WpfDrawingSettings settings);
    public bool get_WriterErrorOccurred();
    public bool get_FallbackOnWriterError();
    public void set_FallbackOnWriterError(bool value);
    public ImageEncoderType get_EncoderType();
    public void set_EncoderType(ImageEncoderType value);
    public BitmapEncoder get_Encoder();
    public void set_Encoder(BitmapEncoder value);
    public DrawingGroup get_Drawing();
    public string get_XamlFile();
    public string get_ZamlFile();
    public bool Convert(string svgFileName);
    public bool Convert(string svgFileName, string imageFileName);
    public bool Convert(Stream svgStream, string imageFileName);
    public bool Convert(TextReader svgTextReader, string imageFileName);
    public bool Convert(XmlReader svgXmlReader, string imageFileName);
    private bool ProcessFile(string fileName, string imageFileName);
    private bool ProcessFile(Stream svgStream, string imageFileName);
    private bool ProcessFile(TextReader svgTextReader, string imageFileName);
    private bool ProcessFile(XmlReader svgXmlReader, string imageFileName);
    private bool SaveImageFile(DrawingGroup drawing, string fileName, string imageFileName);
    private bool SaveSizedImage(DrawingGroup drawing, string fileName, string imageFileName);
    private bool SaveUnSizedImage(DrawingGroup drawing, string fileName, string imageFileName);
    private BitmapEncoder GetBitmapEncoder(string fileExtension);
    private string GetImageFileExtention();
    private bool SaveXamlFile(Drawing drawing, string fileName, string imageFileName);
}
public class SharpVectors.Converters.LinkVisitor : WpfLinkVisitor {
    private bool _isAggregated;
    private GeometryCollection _aggregatedGeom;
    private SvgStyleableElement _aggregatedFill;
    private Dictionary`2<string, bool> _dicLinks;
    public bool Aggregates { get; }
    public bool IsAggregate { get; }
    public string AggregatedLayerName { get; }
    public virtual bool get_Aggregates();
    public virtual bool get_IsAggregate();
    public virtual string get_AggregatedLayerName();
    public virtual bool Exists(string linkId);
    public virtual void Initialize(DrawingGroup linkGroup, WpfDrawingContext context);
    public virtual void Visit(DrawingGroup group, SvgAElement element, WpfDrawingContext context, float opacity);
    public static string GetElementName(SvgElement element);
    private void AddExtraLinkInformation(DrawingGroup group, SvgElement element);
    private void AggregateChildren(SvgAElement aElement, WpfDrawingContext context, float opacity);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class SharpVectors.Converters.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "15.8.0.0")]
internal class SharpVectors.Converters.Properties.Settings : ApplicationSettingsBase {
    private static Settings defaultInstance;
    public static Settings Default { get; }
    private static Settings();
    public static Settings get_Default();
}
public class SharpVectors.Converters.ResourceSvgConverter : SvgConverter {
    private FileSvgReader _fileReader;
    private ResourceDictionary _resourceDictionary;
    private IList`1<ResourceItem> _resourceItems;
    private WpfResourceSettings _resourceSettings;
    private WpfDrawingResources _drawingResources;
    public bool IsResolverRegistered { get; }
    public int SourceCount { get; }
    public WpfResourceSettings ResourceSettings { get; public set; }
    public ResourceSvgConverter(WpfDrawingSettings drawingSettings);
    public ResourceSvgConverter(WpfResourceSettings resourceSettings);
    public ResourceSvgConverter(WpfDrawingSettings drawingSettings, WpfResourceSettings resourceSettings);
    public bool get_IsResolverRegistered();
    public int get_SourceCount();
    public WpfResourceSettings get_ResourceSettings();
    public void set_ResourceSettings(WpfResourceSettings value);
    public void RegisterResolver(IResourceKeyResolver keyResolver);
    public void RegisterResolver(Func`1<IResourceKeyResolver> keyResolver);
    public IResourceKeyResolver RetrieveResolver();
    public bool AddSource(string sourcePath);
    public bool RemoveSource(string sourcePath);
    public void ClearSources();
    public string Convert();
    public void Convert(string outputPath);
    public void Convert(Stream outputStream);
    public void Convert(TextWriter outputWriter);
    private bool CreateResourceItems();
    private void AddResource(string svgFilePath, int resourceIndex);
    private bool CreateResourceDictionary();
}
public class SharpVectors.Converters.Shapes.ShapeRenderingVisitor : object {
    private WpfShapeRenderer renderer;
    private Canvas currentCanvas;
    public ShapeRenderingVisitor(WpfShapeRenderer renderer);
    public void BeginContainer();
    public void EndContainer();
    public sealed virtual void BeginContainer(ISvgElement element);
    public sealed virtual void EndContainer(ISvgElement element);
    public sealed virtual void Visit(ISvgCircleElement element);
    public sealed virtual void Visit(ISvgEllipseElement element);
    public sealed virtual void Visit(ISvgLineElement element);
    public sealed virtual void Visit(ISvgPathElement element);
    public sealed virtual void Visit(ISvgPolygonElement element);
    public sealed virtual void Visit(ISvgPolylineElement element);
    public sealed virtual void Visit(ISvgRectElement element);
    public sealed virtual void Visit(ISvgImageElement element);
    public sealed virtual void Visit(ISvgUseElement element);
    public sealed virtual void Visit(ISvgAElement element);
    public sealed virtual void Visit(ISvgGElement element);
    public sealed virtual void Visit(ISvgSvgElement element);
    public sealed virtual void Visit(ISvgSwitchElement element);
    public sealed virtual void Visit(ISvgSymbolElement element);
    public sealed virtual void Visit(ISvgTextElement element);
    public sealed virtual void Visit(ISvgTextPathElement element);
    public sealed virtual void Visit(ISvgTSpanElement element);
    private Path WrapGeometry(Geometry geometry, ISvgElement element);
    private void DisplayShape(Path shape, ISvgElement element, bool applyStyle);
    private Style CreateStyle(Path shape, SvgStyleableElement element);
}
public static class SharpVectors.Converters.Shapes.WpfShapeHelper : object {
    private static Regex _decimalNumber;
    private static DpiScale _dpiScale;
    private static string GenericSerifFontFamily;
    private static string GenericSansSerifFontFamily;
    private static string GenericMonospaceFontFamily;
    private static string DefaultFontFamily;
    private static WpfShapeHelper();
    public static bool TryGetStrokeWidth(SvgStyleableElement element, Double& strokeWidth);
    public static bool TryGetMiterLimit(SvgStyleableElement element, double strokeWidth, Double& miterLimit);
    public static bool TryGetFillRule(SvgStyleableElement element, FillRule& fillRule);
    public static bool TryGetSpreadMethod(SvgSpreadMethod sm, GradientSpreadMethod& spreadMethod);
    public static Matrix ToWpfMatrix(ISvgMatrix svgMatrix);
    public static bool TryGetLineJoin(SvgStyleableElement element, PenLineJoin& lineJoin);
    public static bool TryGetLineCap(SvgStyleableElement element, PenLineCap& lineCap);
    public static bool TryGetDashArray(SvgStyleableElement element, double strokeWidth, DoubleCollection& dashArray);
    public static bool TryGetDashOffset(SvgStyleableElement element, Double& offset);
    public static bool TryGetBrush(SvgStyleableElement element, string property, Rect bounds, Matrix transform, Brush& brush);
    public static LinearGradientBrush ConstructBrush(SvgLinearGradientElement gradient, Rect bounds, Matrix transform);
    public static RadialGradientBrush ConstructBrush(SvgRadialGradientElement gradient, Rect bounds, Matrix transform);
    public static ImageBrush ConstructBrush(SvgPatternElement linearGradient, Rect bounds, Matrix transform);
    public static GradientStopCollection ToGradientStops(XmlNodeList stops);
    public static bool TryConvertColor(ICssColor color, Color& wpfColor);
    public static double GetOpacity(SvgStyleableElement element, string fillOrStroke);
    public static bool TryGetTransform(ISvgTransformable element, Transform& transform);
    public static Geometry ConstructTextGeometry(SvgTextContentElement textContentElement, string text, Point position, Size& textDimensions);
    public static Point GetCurrentTextPosition(SvgTextPositioningElement posElement, Point p);
    private static FlowDirection GetTextDirection(SvgTextContentElement element);
    private static double GetComputedFontSize(SvgTextContentElement element);
    private static double GetComputedLineHeight(SvgTextContentElement element);
    private static FontFamily GetTextFontFamily(SvgTextContentElement element);
    private static FontStyle GetTextFontStyle(SvgTextContentElement element);
    private static FontStretch GetTextFontStretch(SvgTextContentElement element);
    private static TextDecorationCollection GetTextDecoration(SvgTextContentElement element);
    private static FontWeight GetTextFontWeight(SvgTextContentElement element);
}
public class SharpVectors.Converters.Shapes.WpfShapeRenderer : object {
    [CompilerGeneratedAttribute]
private Style <ItemStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private ISvgWindow <Window>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgRectF <InvalidRect>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderEvent <OnRender>k__BackingField;
    [CompilerGeneratedAttribute]
private Canvas <Canvas>k__BackingField;
    public Style ItemStyle { get; public set; }
    public ISvgWindow Window { get; public set; }
    public SvgRectF InvalidRect { get; public set; }
    public RenderEvent OnRender { get; public set; }
    public Canvas Canvas { get; public set; }
    [CompilerGeneratedAttribute]
public Style get_ItemStyle();
    [CompilerGeneratedAttribute]
public void set_ItemStyle(Style value);
    [CompilerGeneratedAttribute]
public sealed virtual ISvgWindow get_Window();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Window(ISvgWindow value);
    [CompilerGeneratedAttribute]
public sealed virtual SvgRectF get_InvalidRect();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InvalidRect(SvgRectF value);
    [CompilerGeneratedAttribute]
public sealed virtual RenderEvent get_OnRender();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnRender(RenderEvent value);
    [CompilerGeneratedAttribute]
public Canvas get_Canvas();
    [CompilerGeneratedAttribute]
public void set_Canvas(Canvas value);
    public sealed virtual ISvgRect GetRenderedBounds(ISvgElement element, float margin);
    public sealed virtual void InvalidateRect(SvgRectF rect);
    public sealed virtual void Render(ISvgElement node);
    public sealed virtual void Render(ISvgDocument node);
    private void RenderElement(ISvgElementVisitorTarget element);
}
public class SharpVectors.Converters.ShapeSvgCanvas : Canvas {
    public static DependencyProperty SourceProperty;
    public static DependencyProperty ItemStyleProperty;
    private WpfSvgWindow _wpfWindow;
    private WpfShapeRenderer _wpfRenderer;
    [CompilerGeneratedAttribute]
private Rect <Bounds>k__BackingField;
    public Canvas Drawing { get; }
    public string Source { get; public set; }
    public Style ItemStyle { get; public set; }
    public Rect Bounds { get; private set; }
    private static ShapeSvgCanvas();
    public Canvas get_Drawing();
    public string get_Source();
    public void set_Source(string value);
    public Style get_ItemStyle();
    public void set_ItemStyle(Style value);
    [CompilerGeneratedAttribute]
public Rect get_Bounds();
    [CompilerGeneratedAttribute]
private void set_Bounds(Rect value);
    public void UnloadDiagrams();
    protected virtual Size MeasureOverride(Size constraint);
    private static void OnSourcePropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static void OnItemStylePropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    public bool RenderDiagrams(string sourceUri);
    private bool Load(string uri);
    private static Rect CalculateBounds(WpfSvgWindow window);
}
public class SharpVectors.Converters.StreamSvgConverter : SvgConverter {
    private bool _writerErrorOccurred;
    private bool _fallbackOnWriterError;
    private DrawingGroup _drawing;
    private ImageEncoderType _encoderType;
    private BitmapEncoder _bitmapEncoder;
    public bool WriterErrorOccurred { get; }
    public bool FallbackOnWriterError { get; public set; }
    public ImageEncoderType EncoderType { get; public set; }
    public BitmapEncoder Encoder { get; public set; }
    public DrawingGroup Drawing { get; }
    public StreamSvgConverter(WpfDrawingSettings settings);
    public StreamSvgConverter(bool saveXaml, bool saveZaml, WpfDrawingSettings settings);
    public bool get_WriterErrorOccurred();
    public bool get_FallbackOnWriterError();
    public void set_FallbackOnWriterError(bool value);
    public ImageEncoderType get_EncoderType();
    public void set_EncoderType(ImageEncoderType value);
    public BitmapEncoder get_Encoder();
    public void set_Encoder(BitmapEncoder value);
    public DrawingGroup get_Drawing();
    public bool Convert(string svgFileName, Stream imageStream);
    public bool Convert(Stream svgStream, Stream imageStream);
    public bool Convert(TextReader svgTextReader, Stream imageStream);
    public bool Convert(XmlReader svgXmlReader, Stream imageStream);
    private bool ProcessFile(string fileName, Stream imageStream);
    private bool ProcessFile(Stream svgStream, Stream imageStream);
    private bool ProcessFile(TextReader svgTextReader, Stream imageStream);
    private bool ProcessFile(XmlReader svgXmlReader, Stream imageStream);
    private bool SaveImageFile(Drawing drawing, Stream imageStream);
    private BitmapEncoder GetBitmapEncoder(string fileExtension);
    private string GetImageFileExtention();
    private bool SaveXamlFile(Drawing drawing, string fileName, string imageFileName);
}
public class SharpVectors.Converters.SvgBitmap : Image {
    public static DependencyProperty UriSourceProperty;
    public static DependencyProperty SvgSourceProperty;
    public static DependencyProperty AppNameProperty;
    private Uri _uriSource;
    private string _svgSource;
    private DpiScale _dpiScale;
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public string AppName { get; public set; }
    public Uri UriSource { get; public set; }
    public string SvgSource { get; public set; }
    private static SvgBitmap();
    public string get_AppName();
    public void set_AppName(string value);
    public Uri get_UriSource();
    public void set_UriSource(Uri value);
    public string get_SvgSource();
    public void set_SvgSource(string value);
    protected virtual void OnLoadDrawing(DrawingGroup drawing);
    protected virtual void OnUnloadDiagram();
    protected virtual WpfDrawingSettings GetDrawingSettings();
    protected virtual void OnInitialized(EventArgs e);
    private IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    protected virtual void OnSettingsChanged();
    protected virtual DrawingGroup CreateDrawing();
    protected virtual DrawingGroup CreateDrawing(Uri svgSource, WpfDrawingSettings settings);
    protected virtual DrawingGroup CreateDrawing(string svgSource, WpfDrawingSettings settings);
    private Uri GetAbsoluteUri();
    private Uri ResolveUri(Uri svgSource);
    private static void OnUriSourceChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnSvgSourceChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private string GetAppName();
    private Assembly GetEntryAssembly();
    private Assembly GetExecutingAssembly();
}
public class SharpVectors.Converters.SvgCanvas : SvgDrawingCanvas {
    public static DependencyProperty SourceProperty;
    public static DependencyProperty UriSourceProperty;
    public static DependencyProperty SvgSourceProperty;
    public static DependencyProperty StreamSourceProperty;
    public static DependencyProperty MessageFontFamilyProperty;
    public static DependencyProperty MessageFontSizeProperty;
    public static DependencyProperty MessageOpacityProperty;
    public static DependencyProperty MessageTextProperty;
    public static DependencyProperty MessageBackgroundProperty;
    public static DependencyProperty MessageFillBrushProperty;
    public static DependencyProperty MessageStrokeBrushProperty;
    public static DependencyProperty AppNameProperty;
    private bool _isAutoSized;
    private bool _autoSize;
    private bool _textAsGeometry;
    private bool _includeRuntime;
    private bool _optimizePath;
    private bool _ensureViewboxPosition;
    private bool _ensureViewboxSize;
    private bool _ignoreRootViewbox;
    private DrawingGroup _svgDrawing;
    private CultureInfo _culture;
    private Uri _baseUri;
    private Uri _sourceUri;
    private string _sourceSvg;
    private Stream _sourceStream;
    private DpiScale _dpiScale;
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public string AppName { get; public set; }
    public Uri Source { get; public set; }
    public Uri UriSource { get; public set; }
    public string SvgSource { get; public set; }
    public Stream StreamSource { get; public set; }
    public bool AutoSize { get; public set; }
    public bool OptimizePath { get; public set; }
    public bool TextAsGeometry { get; public set; }
    public bool IncludeRuntime { get; public set; }
    public CultureInfo CultureInfo { get; public set; }
    public bool IgnoreRootViewbox { get; public set; }
    public bool EnsureViewboxSize { get; public set; }
    public bool EnsureViewboxPosition { get; public set; }
    public DrawingGroup Drawings { get; }
    public FontFamily MessageFontFamily { get; public set; }
    public double MessageFontSize { get; public set; }
    public double MessageOpacity { get; public set; }
    public string MessageText { get; public set; }
    public Brush MessageBackground { get; public set; }
    public Brush MessageFillBrush { get; public set; }
    public Brush MessageStrokeBrush { get; public set; }
    public Uri BaseUri { get; public set; }
    private int SharpVectors.Dom.Svg.ISvgControl.Width { get; }
    private int SharpVectors.Dom.Svg.ISvgControl.Height { get; }
    private static SvgCanvas();
    public string get_AppName();
    public void set_AppName(string value);
    public Uri get_Source();
    public void set_Source(Uri value);
    public Uri get_UriSource();
    public void set_UriSource(Uri value);
    public string get_SvgSource();
    public void set_SvgSource(string value);
    public Stream get_StreamSource();
    public void set_StreamSource(Stream value);
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public bool get_OptimizePath();
    public void set_OptimizePath(bool value);
    public bool get_TextAsGeometry();
    public void set_TextAsGeometry(bool value);
    public bool get_IncludeRuntime();
    public void set_IncludeRuntime(bool value);
    public CultureInfo get_CultureInfo();
    public void set_CultureInfo(CultureInfo value);
    public bool get_IgnoreRootViewbox();
    public void set_IgnoreRootViewbox(bool value);
    public bool get_EnsureViewboxSize();
    public void set_EnsureViewboxSize(bool value);
    public bool get_EnsureViewboxPosition();
    public void set_EnsureViewboxPosition(bool value);
    public DrawingGroup get_Drawings();
    public FontFamily get_MessageFontFamily();
    public void set_MessageFontFamily(FontFamily value);
    public double get_MessageFontSize();
    public void set_MessageFontSize(double value);
    public double get_MessageOpacity();
    public void set_MessageOpacity(double value);
    public string get_MessageText();
    public void set_MessageText(string value);
    public Brush get_MessageBackground();
    public void set_MessageBackground(Brush value);
    public Brush get_MessageFillBrush();
    public void set_MessageFillBrush(Brush value);
    public Brush get_MessageStrokeBrush();
    public void set_MessageStrokeBrush(Brush value);
    public bool Load(Uri uriSource, bool useAsync);
    public bool Load(string svgSource, bool useAsync);
    public bool Load(Stream streamSource, bool useCopyStream, bool useAsync);
    public Task`1<bool> LoadAsync(Uri uriSource);
    public Task`1<bool> LoadAsync(string svgSource);
    public Task`1<bool> LoadAsync(Stream streamSource, bool useCopyStream);
    public void Unload(bool displayMessage, string message);
    protected virtual void OnInitialized(EventArgs e);
    protected virtual WpfDrawingSettings GetDrawingSettings();
    protected virtual void OnSettingsChanged();
    protected virtual void OnAutoSizeChanged();
    protected virtual DrawingGroup CreateDrawing();
    protected virtual DrawingGroup CreateDrawing(Uri svgSource, WpfDrawingSettings settings);
    protected virtual DrawingGroup CreateDrawing(Stream svgStream, WpfDrawingSettings settings);
    protected virtual DrawingGroup CreateDrawing(string svgSource, WpfDrawingSettings settings);
    private void OnLoadDrawing(DrawingGroup drawing);
    private void OnUnloadDiagram();
    private Uri GetAbsoluteUri();
    private Uri ResolveUri(Uri svgSource);
    private DrawingGroup CreateMessageText(string messageText);
    private static void OnUriSourceChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnSvgSourceChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnStreamSourceChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnMessageStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private string GetAppName();
    private Assembly GetEntryAssembly();
    private Assembly GetExecutingAssembly();
    public sealed virtual Uri get_BaseUri();
    public sealed virtual void set_BaseUri(Uri value);
    private sealed virtual override int SharpVectors.Dom.Svg.ISvgControl.get_Width();
    private sealed virtual override int SharpVectors.Dom.Svg.ISvgControl.get_Height();
    private sealed virtual override void SharpVectors.Dom.Svg.ISvgControl.HandleAlert(string message);
    private sealed virtual override void SharpVectors.Dom.Svg.ISvgControl.HandleError(string message);
    private sealed virtual override void SharpVectors.Dom.Svg.ISvgControl.HandleError(Exception exception);
    private sealed virtual override void SharpVectors.Dom.Svg.ISvgControl.HandleError(string message, Exception exception);
    private sealed virtual override bool SharpVectors.Dom.Svg.ISvgControl.get_DesignMode();
}
public class SharpVectors.Converters.SvgControl : Control {
    public static DependencyProperty SourceProperty;
    public static DependencyProperty StreamSourceProperty;
    public static DependencyProperty MessageFontFamilyProperty;
    public static DependencyProperty MessageFontSizeProperty;
    public static DependencyProperty MessageOpacityProperty;
    public static DependencyProperty MessageTextProperty;
    public static DependencyProperty MessageBackgroundProperty;
    public static DependencyProperty MessageFillBrushProperty;
    public static DependencyProperty MessageStrokeBrushProperty;
    public static DependencyProperty SizeModeProperty;
    private CultureInfo _culture;
    private Uri _baseUri;
    private Uri _sourceUri;
    private Stream _sourceStream;
    private DpiScale _dpiScale;
    private bool _isAutoSized;
    private bool _autoSize;
    private bool _textAsGeometry;
    private bool _includeRuntime;
    private bool _optimizePath;
    private bool _ensureViewboxPosition;
    private bool _ensureViewboxSize;
    private bool _ignoreRootViewbox;
    private DrawingGroup _renderedDrawing;
    private ScaleTransform _renderScale;
    private TranslateTransform _renderOffset;
    public SvgControlSizeMode SizeMode { get; public set; }
    public DrawingGroup RenderedDrawing { get; protected set; }
    public Uri Source { get; public set; }
    public Stream StreamSource { get; public set; }
    public bool AutoSize { get; public set; }
    public bool OptimizePath { get; public set; }
    public bool TextAsGeometry { get; public set; }
    public bool IncludeRuntime { get; public set; }
    public CultureInfo CultureInfo { get; public set; }
    public bool IgnoreRootViewbox { get; public set; }
    public bool EnsureViewboxSize { get; public set; }
    public bool EnsureViewboxPosition { get; public set; }
    public DrawingGroup Drawings { get; }
    public FontFamily MessageFontFamily { get; public set; }
    public double MessageFontSize { get; public set; }
    public double MessageOpacity { get; public set; }
    public string MessageText { get; public set; }
    public Brush MessageBackground { get; public set; }
    public Brush MessageFillBrush { get; public set; }
    public Brush MessageStrokeBrush { get; public set; }
    public Uri BaseUri { get; public set; }
    private static SvgControl();
    private static void OnSizeTypeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public SvgControlSizeMode get_SizeMode();
    public void set_SizeMode(SvgControlSizeMode value);
    public DrawingGroup get_RenderedDrawing();
    protected void set_RenderedDrawing(DrawingGroup value);
    public Uri get_Source();
    public void set_Source(Uri value);
    public Stream get_StreamSource();
    public void set_StreamSource(Stream value);
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public bool get_OptimizePath();
    public void set_OptimizePath(bool value);
    public bool get_TextAsGeometry();
    public void set_TextAsGeometry(bool value);
    public bool get_IncludeRuntime();
    public void set_IncludeRuntime(bool value);
    public CultureInfo get_CultureInfo();
    public void set_CultureInfo(CultureInfo value);
    public bool get_IgnoreRootViewbox();
    public void set_IgnoreRootViewbox(bool value);
    public bool get_EnsureViewboxSize();
    public void set_EnsureViewboxSize(bool value);
    public bool get_EnsureViewboxPosition();
    public void set_EnsureViewboxPosition(bool value);
    public DrawingGroup get_Drawings();
    public FontFamily get_MessageFontFamily();
    public void set_MessageFontFamily(FontFamily value);
    public double get_MessageFontSize();
    public void set_MessageFontSize(double value);
    public double get_MessageOpacity();
    public void set_MessageOpacity(double value);
    public string get_MessageText();
    public void set_MessageText(string value);
    public Brush get_MessageBackground();
    public void set_MessageBackground(Brush value);
    public Brush get_MessageFillBrush();
    public void set_MessageFillBrush(Brush value);
    public Brush get_MessageStrokeBrush();
    public void set_MessageStrokeBrush(Brush value);
    public sealed virtual Uri get_BaseUri();
    public sealed virtual void set_BaseUri(Uri value);
    public void RenderDiagrams(DrawingGroup renderedGroup);
    public bool Load(Uri uriSource, bool useAsync);
    public bool Load(Stream streamSource, bool useCopyStream, bool useAsync);
    public Task`1<bool> LoadAsync(Uri uriSource);
    public Task`1<bool> LoadAsync(Stream streamSource, bool useCopyStream);
    public void Unload(bool displayMessage, string message);
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnRenderSizeChanged(SizeChangedInfo sizeInfo);
    protected virtual void OnRender(DrawingContext drawingContext);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size arrangeBounds);
    protected virtual WpfDrawingSettings GetDrawingSettings();
    protected virtual void OnSettingsChanged();
    protected virtual void OnAutoSizeChanged();
    protected virtual DrawingGroup CreateDrawing();
    protected virtual DrawingGroup CreateDrawing(Uri svgSource, WpfDrawingSettings settings);
    protected virtual DrawingGroup CreateDrawing(Stream svgStream, WpfDrawingSettings settings);
    private void RecalcImage();
    private void SizeToContentNoStretch(HorizontalAlignment hAlignment, VerticalAlignment vAlignment);
    private void OnLoadDrawing(DrawingGroup drawing);
    private void OnUnloadDiagram();
    private Uri GetAbsoluteUri();
    private Uri ResolveUri(Uri svgSource);
    private DrawingGroup CreateMessageText(string messageText);
    private static void OnSourceChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnStreamSourceChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnMessageStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public enum SharpVectors.Converters.SvgControlSizeMode : Enum {
    public int value__;
    public static SvgControlSizeMode None;
    public static SvgControlSizeMode ContentToSizeNoStretch;
    public static SvgControlSizeMode ContentToSizeStretch;
    public static SvgControlSizeMode SizeToContent;
}
public abstract class SharpVectors.Converters.SvgConverter : DependencyObject {
    public static string SvgExt;
    public static string CompressedSvgExt;
    public static string XamlExt;
    public static string CompressedXamlExt;
    public static string BackupExt;
    protected bool _saveXaml;
    protected bool _saveZaml;
    protected bool _useFrameXamlWriter;
    protected bool _isEmbedded;
    protected double _dpiX;
    protected double _dpiY;
    protected SolidColorBrush _background;
    protected WpfDrawingSettings _wpfSettings;
    protected WpfSvgWindow _wpfWindow;
    protected WpfDrawingRenderer _wpfRenderer;
    public bool SaveXaml { get; public set; }
    public bool SaveZaml { get; public set; }
    public bool UseFrameXamlWriter { get; public set; }
    public SolidColorBrush Background { get; public set; }
    public WpfDrawingSettings DrawingSettings { get; }
    public WpfSvgWindow SvgWindow { get; }
    public SvgDocument SvgDocument { get; }
    public double DpiX { get; public set; }
    public double DpiY { get; public set; }
    protected SvgConverter(WpfDrawingSettings settings);
    protected SvgConverter(bool saveXaml, bool saveZaml, WpfDrawingSettings settings);
    protected virtual override void Finalize();
    public bool get_SaveXaml();
    public void set_SaveXaml(bool value);
    public bool get_SaveZaml();
    public void set_SaveZaml(bool value);
    public bool get_UseFrameXamlWriter();
    public void set_UseFrameXamlWriter(bool value);
    public SolidColorBrush get_Background();
    public void set_Background(SolidColorBrush value);
    public WpfDrawingSettings get_DrawingSettings();
    public WpfSvgWindow get_SvgWindow();
    public SvgDocument get_SvgDocument();
    public double get_DpiX();
    public void set_DpiX(double value);
    public double get_DpiY();
    public void set_DpiY(double value);
    protected virtual void BeginProcessing(WpfDrawingDocument drawingDocument);
    protected virtual void EndProcessing();
    protected static BitmapEncoder GetBitmapEncoder(ImageEncoderType encoderType);
    protected static string GetImageFileExtention(ImageEncoderType encoderType);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class SharpVectors.Converters.SvgIcon : SvgBitmap {
    public static DependencyProperty FillProperty;
    public static DependencyProperty StrokeProperty;
    public Brush Fill { get; public set; }
    public Brush Stroke { get; public set; }
    private static SvgIcon();
    public Brush get_Fill();
    public void set_Fill(Brush value);
    public Brush get_Stroke();
    public void set_Stroke(Brush value);
    protected virtual void OnLoadDrawing(DrawingGroup drawing);
    protected virtual void OnUnloadDiagram();
    private void SetBindings(DrawingGroup group);
    private void ClearBindings(DrawingGroup group);
}
[MarkupExtensionReturnTypeAttribute("System.Windows.Media.DrawingImage")]
public abstract class SharpVectors.Converters.SvgImageBase : MarkupExtension {
    protected bool _textAsGeometry;
    protected bool _includeRuntime;
    protected bool _optimizePath;
    protected string _appName;
    protected CultureInfo _culture;
    public bool OptimizePath { get; public set; }
    public bool TextAsGeometry { get; public set; }
    public bool IncludeRuntime { get; public set; }
    public CultureInfo CultureInfo { get; public set; }
    public string AppName { get; public set; }
    public bool get_OptimizePath();
    public void set_OptimizePath(bool value);
    public bool get_TextAsGeometry();
    public void set_TextAsGeometry(bool value);
    public bool get_IncludeRuntime();
    public void set_IncludeRuntime(bool value);
    public CultureInfo get_CultureInfo();
    public void set_CultureInfo(CultureInfo value);
    public string get_AppName();
    public void set_AppName(string value);
    protected virtual DrawingGroup GetDrawing(Uri svgSource);
    protected virtual DrawingImage GetImage(Uri svgSource);
    protected void GetAppName();
    protected Assembly GetEntryAssembly();
    protected Assembly GetExecutingAssembly();
    protected bool IsDesignMode(IServiceProvider serviceProvider);
}
[MarkupExtensionReturnTypeAttribute("System.Windows.Media.DrawingImage")]
public class SharpVectors.Converters.SvgImageConverterExtension : SvgImageBase {
    private Uri _baseUri;
    private UriTypeConverter _uriConverter;
    public SvgImageConverterExtension(Uri baseUri);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private Uri ResolveUri(string inputParameter);
}
[MarkupExtensionReturnTypeAttribute("System.Windows.Media.DrawingImage")]
public class SharpVectors.Converters.SvgImageExtension : SvgImageBase {
    private string _svgPath;
    public string Source { get; public set; }
    public SvgImageExtension(string svgPath);
    public string get_Source();
    public void set_Source(string value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    private Uri ResolveUri(IServiceProvider serviceProvider);
}
public class SharpVectors.Converters.SvgViewbox : Viewbox {
    public static DependencyProperty SourceProperty;
    public static DependencyProperty UriSourceProperty;
    public static DependencyProperty SvgSourceProperty;
    public static DependencyProperty StreamSourceProperty;
    public static DependencyProperty MessageFontFamilyProperty;
    public static DependencyProperty MessageFontSizeProperty;
    public static DependencyProperty MessageOpacityProperty;
    public static DependencyProperty MessageTextProperty;
    public static DependencyProperty MessageBackgroundProperty;
    public static DependencyProperty MessageFillBrushProperty;
    public static DependencyProperty MessageStrokeBrushProperty;
    public static DependencyProperty AppNameProperty;
    private static string DefaultTitle;
    private bool _isAutoSized;
    private bool _autoSize;
    private bool _textAsGeometry;
    private bool _includeRuntime;
    private bool _optimizePath;
    private bool _ensureViewboxPosition;
    private bool _ensureViewboxSize;
    private bool _ignoreRootViewbox;
    private DrawingGroup _svgDrawing;
    private string _appTitle;
    private CultureInfo _culture;
    private Uri _baseUri;
    private Uri _sourceUri;
    private string _sourceSvg;
    private Stream _sourceStream;
    private DpiScale _dpiScale;
    private SvgDrawingCanvas _drawingCanvas;
    private SvgInteractiveModes _interactiveMode;
    [CompilerGeneratedAttribute]
private EventHandler`1<SvgAlertArgs> _svgAlerts;
    [CompilerGeneratedAttribute]
private EventHandler`1<SvgErrorArgs> _svgErrors;
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public string AppName { get; public set; }
    [DefaultValueAttribute("SharpVectors")]
[DescriptionAttribute("The title of the application, used in displaying error and alert messages.")]
public string AppTitle { get; public set; }
    public Uri Source { get; public set; }
    public Uri UriSource { get; public set; }
    public string SvgSource { get; public set; }
    public Stream StreamSource { get; public set; }
    public SvgDrawingCanvas DrawingCanvas { get; }
    public DrawingGroup Drawings { get; }
    public bool AutoSize { get; public set; }
    public bool OptimizePath { get; public set; }
    public bool TextAsGeometry { get; public set; }
    public bool IncludeRuntime { get; public set; }
    public CultureInfo CultureInfo { get; public set; }
    public bool IgnoreRootViewbox { get; public set; }
    public bool EnsureViewboxSize { get; public set; }
    public bool EnsureViewboxPosition { get; public set; }
    public FontFamily MessageFontFamily { get; public set; }
    public double MessageFontSize { get; public set; }
    public double MessageOpacity { get; public set; }
    public string MessageText { get; public set; }
    public Brush MessageBackground { get; public set; }
    public Brush MessageFillBrush { get; public set; }
    public Brush MessageStrokeBrush { get; public set; }
    public SvgInteractiveModes InteractiveMode { get; public set; }
    public Uri BaseUri { get; public set; }
    public bool DesignMode { get; }
    private int SharpVectors.Dom.Svg.ISvgControl.Width { get; }
    private int SharpVectors.Dom.Svg.ISvgControl.Height { get; }
    private static SvgViewbox();
    [CompilerGeneratedAttribute]
private void add__svgAlerts(EventHandler`1<SvgAlertArgs> value);
    [CompilerGeneratedAttribute]
private void remove__svgAlerts(EventHandler`1<SvgAlertArgs> value);
    [CompilerGeneratedAttribute]
private void add__svgErrors(EventHandler`1<SvgErrorArgs> value);
    [CompilerGeneratedAttribute]
private void remove__svgErrors(EventHandler`1<SvgErrorArgs> value);
    public void add_Alert(EventHandler`1<SvgAlertArgs> value);
    public void remove_Alert(EventHandler`1<SvgAlertArgs> value);
    public void add_Error(EventHandler`1<SvgErrorArgs> value);
    public void remove_Error(EventHandler`1<SvgErrorArgs> value);
    public string get_AppName();
    public void set_AppName(string value);
    public string get_AppTitle();
    public void set_AppTitle(string value);
    public Uri get_Source();
    public void set_Source(Uri value);
    public Uri get_UriSource();
    public void set_UriSource(Uri value);
    public string get_SvgSource();
    public void set_SvgSource(string value);
    public Stream get_StreamSource();
    public void set_StreamSource(Stream value);
    public SvgDrawingCanvas get_DrawingCanvas();
    public DrawingGroup get_Drawings();
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public bool get_OptimizePath();
    public void set_OptimizePath(bool value);
    public bool get_TextAsGeometry();
    public void set_TextAsGeometry(bool value);
    public bool get_IncludeRuntime();
    public void set_IncludeRuntime(bool value);
    public CultureInfo get_CultureInfo();
    public void set_CultureInfo(CultureInfo value);
    public bool get_IgnoreRootViewbox();
    public void set_IgnoreRootViewbox(bool value);
    public bool get_EnsureViewboxSize();
    public void set_EnsureViewboxSize(bool value);
    public bool get_EnsureViewboxPosition();
    public void set_EnsureViewboxPosition(bool value);
    public FontFamily get_MessageFontFamily();
    public void set_MessageFontFamily(FontFamily value);
    public double get_MessageFontSize();
    public void set_MessageFontSize(double value);
    public double get_MessageOpacity();
    public void set_MessageOpacity(double value);
    public string get_MessageText();
    public void set_MessageText(string value);
    public Brush get_MessageBackground();
    public void set_MessageBackground(Brush value);
    public Brush get_MessageFillBrush();
    public void set_MessageFillBrush(Brush value);
    public Brush get_MessageStrokeBrush();
    public void set_MessageStrokeBrush(Brush value);
    public SvgInteractiveModes get_InteractiveMode();
    public void set_InteractiveMode(SvgInteractiveModes value);
    public bool Load(Uri uriSource, bool useAsync);
    public bool Load(string svgSource, bool useAsync);
    public bool Load(Stream streamSource, bool useCopyStream, bool useAsync);
    public Task`1<bool> LoadAsync(Uri uriSource);
    public Task`1<bool> LoadAsync(string svgSource);
    public Task`1<bool> LoadAsync(Stream streamSource, bool useCopyStream);
    public void Unload(bool displayMessage, string message);
    protected virtual WpfDrawingSettings GetDrawingSettings();
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnSettingsChanged();
    protected virtual void OnAutoSizeChanged();
    protected virtual DrawingGroup CreateDrawing();
    protected virtual DrawingGroup CreateDrawing(Uri svgSource, WpfDrawingSettings settings);
    protected virtual DrawingGroup CreateDrawing(Stream svgStream, WpfDrawingSettings settings);
    protected virtual DrawingGroup CreateDrawing(string svgSource, WpfDrawingSettings settings);
    protected virtual void OnHandleAlert(string message);
    protected virtual void OnHandleError(string message, Exception exception);
    private void OnLoadDrawing(DrawingGroup drawing);
    private void OnUnloadDiagram();
    private Uri GetAbsoluteUri();
    private Uri ResolveUri(Uri svgSource);
    private DrawingGroup CreateMessageText(string messageText);
    private static void OnUriSourceChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnSvgSourceChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnStreamSourceChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnMessageStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private string GetAppName();
    private Assembly GetEntryAssembly();
    private Assembly GetExecutingAssembly();
    public sealed virtual Uri get_BaseUri();
    public sealed virtual void set_BaseUri(Uri value);
    public sealed virtual bool get_DesignMode();
    private sealed virtual override int SharpVectors.Dom.Svg.ISvgControl.get_Width();
    private sealed virtual override int SharpVectors.Dom.Svg.ISvgControl.get_Height();
    private sealed virtual override void SharpVectors.Dom.Svg.ISvgControl.HandleAlert(string message);
    private sealed virtual override void SharpVectors.Dom.Svg.ISvgControl.HandleError(string message);
    private sealed virtual override void SharpVectors.Dom.Svg.ISvgControl.HandleError(Exception exception);
    private sealed virtual override void SharpVectors.Dom.Svg.ISvgControl.HandleError(string message, Exception exception);
}
internal class SharpVectors.Converters.Utils.DirectoryUtils : object {
    private int _copiedCount;
    private bool _isOverwrite;
    private bool _isRecursive;
    private bool _includeHidden;
    private bool _includeSecurity;
    public bool Recursive { get; public set; }
    public bool Overwrite { get; public set; }
    public bool IncludeSecurity { get; public set; }
    public bool IncludeHidden { get; public set; }
    public DirectoryUtils(DirectoryUtils source);
    public bool get_Recursive();
    public void set_Recursive(bool value);
    public bool get_Overwrite();
    public void set_Overwrite(bool value);
    public bool get_IncludeSecurity();
    public void set_IncludeSecurity(bool value);
    public bool get_IncludeHidden();
    public void set_IncludeHidden(bool value);
    public int Copy(string sourceDir, string targetDir);
    private void Copy(DirectoryInfo source, DirectoryInfo target);
    private void CopyFiles(DirectoryInfo source, DirectoryInfo target);
}
internal static class SharpVectors.Converters.Utils.WpfResources : object {
    public static bool ResourceExists(string resourcePath);
    public static bool ResourceExists(Assembly assembly, string resourcePath);
    public static IEnumerable`1<string> GetResourcePaths(Assembly assembly);
}
public class SharpVectors.Converters.XmlXamlWriter : object {
    private bool _resourceDictionary;
    private bool _nullExtension;
    private Type _nullType;
    private string _windowsDir;
    private string _windowsPath;
    private CultureInfo _culture;
    private int _indentSpaces;
    private string _numberFormat;
    private string _resourceFormat;
    private NamespaceCache _namespaceCache;
    private WpfDrawingSettings _wpfSettings;
    private WpfDrawingResources _drawingResources;
    private Dictionary`2<Type, string> _contentProperties;
    private Dictionary`2<string, NamespaceMap> _dicNamespaceMap;
    private StringComparison _comparer;
    public bool IncludeNullExtension { get; public set; }
    public int IndentSpaces { get; public set; }
    public int NumberDecimalDigits { get; public set; }
    public XmlXamlWriter(WpfDrawingSettings settings);
    public bool get_IncludeNullExtension();
    public void set_IncludeNullExtension(bool value);
    public int get_IndentSpaces();
    public void set_IndentSpaces(int value);
    public int get_NumberDecimalDigits();
    public void set_NumberDecimalDigits(int value);
    public static string Convert(object obj);
    public string Save(object obj);
    public void Save(object obj, Stream stream);
    public void Save(object obj, TextWriter writer);
    public void Save(object obj, XmlWriter xmlWriter);
    private void SetNumberFormat(int decimalDigits);
    private void WriteObject(object key, object obj, XmlWriter writer, bool isRoot);
    private bool TryWriteAttribute(string attrName, object obj, XmlWriter writer);
    private void WriteChildren(XmlWriter writer, MarkupProperty markupProp);
    private void ResolveXmlNamespaces(object obj);
    private void ResolveChildXmlNamespaces(MarkupProperty markupProp);
}
