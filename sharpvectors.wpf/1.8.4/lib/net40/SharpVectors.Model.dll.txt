internal class SharpVectors.Compressions.Brotli.BitReader : object {
    private static int Capacity;
    private static int Slack;
    private static int IntBufferSize;
    private static int ByteReadSize;
    private static int ByteBufferSize;
    private Byte[] _byteBuffer;
    private Int32[] _intBuffer;
    private IntReader _intReader;
    private Stream _input;
    private bool _endOfStreamReached;
    internal long _accumulator;
    internal int _bitOffset;
    private int _intOffset;
    private int _tailBytes;
    internal static void ReadMoreInput(BitReader br);
    internal static void CheckHealth(BitReader br, bool endOfStream);
    internal static void FillBitWindow(BitReader br);
    internal static int ReadBits(BitReader br, int n);
    internal static void Init(BitReader br, Stream input);
    private static void Prepare(BitReader br);
    internal static void Reload(BitReader br);
    internal static void Close(BitReader br);
    internal static void JumpToByteBoundary(BitReader br);
    internal static int IntAvailable(BitReader br);
    internal static void CopyBytes(BitReader br, Byte[] data, int offset, int length);
}
internal static class SharpVectors.Compressions.Brotli.BrotliDecode : object {
    private static int DefaultCodeLength;
    private static int CodeLengthRepeatCode;
    private static int NumLiteralCodes;
    private static int NumInsertAndCopyCodes;
    private static int NumBlockLengthCodes;
    private static int LiteralContextBits;
    private static int DistanceContextBits;
    private static int HuffmanTableBits;
    private static int HuffmanTableMask;
    private static int NumDistanceShortCodes;
    private static int CodeLengthCodes;
    private static Int32[] CodeLengthCodeOrder;
    private static Int32[] DistanceShortCodeIndexOffset;
    private static Int32[] DistanceShortCodeValueOffset;
    private static Int32[] FixedTable;
    private static BrotliDecode();
    private static int DecodeVarLenUnsignedByte(BitReader br);
    private static void DecodeMetaBlockLength(BitReader br, BrotliState state);
    private static int ReadSymbol(Int32[] table, int offset, BitReader br);
    private static int ReadBlockLength(Int32[] table, int offset, BitReader br);
    private static int TranslateShortCodes(int code, Int32[] ringBuffer, int index);
    private static void MoveToFront(Int32[] v, int index);
    private static void InverseMoveToFrontTransform(Byte[] v, int vLen);
    private static void ReadHuffmanCodeLengths(Int32[] codeLengthCodeLengths, int numSymbols, Int32[] codeLengths, BitReader br);
    internal static void ReadHuffmanCode(int alphabetSize, Int32[] table, int offset, BitReader br);
    private static int DecodeContextMap(int contextMapSize, Byte[] contextMap, BitReader br);
    private static void DecodeBlockTypeAndLength(BrotliState state, int treeType);
    private static void DecodeLiteralBlockSwitch(BrotliState state);
    private static void DecodeCommandBlockSwitch(BrotliState state);
    private static void DecodeDistanceBlockSwitch(BrotliState state);
    private static void MaybeReallocateRingBuffer(BrotliState state);
    private static void ReadMetablockInfo(BrotliState state);
    private static void ReadMetablockHuffmanCodesAndContextMaps(BrotliState state);
    private static void CopyUncompressedData(BrotliState state);
    private static bool WriteRingBuffer(BrotliState state);
    internal static void SetCustomDictionary(BrotliState state, Byte[] data);
    internal static void Decompress(BrotliState state);
}
public class SharpVectors.Compressions.Brotli.BrotliInputStream : Stream {
    public static int DefaultInternalBufferSize;
    private Byte[] _buffer;
    private int _remainingBufferBytes;
    private int _bufferOffset;
    private BrotliState _state;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanWrite { get; }
    public BrotliInputStream(Stream source);
    public BrotliInputStream(Stream source, int byteReadBufferSize);
    public BrotliInputStream(Stream source, int byteReadBufferSize, Byte[] customDictionary);
    public virtual void Close();
    public virtual int ReadByte();
    public virtual int Read(Byte[] destBuffer, int destOffset, int destLen);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual bool get_CanWrite();
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Flush();
}
internal class SharpVectors.Compressions.Brotli.BrotliRuntimeException : Exception {
    internal BrotliRuntimeException(string message);
    internal BrotliRuntimeException(string message, Exception cause);
}
internal class SharpVectors.Compressions.Brotli.BrotliState : object {
    internal int runningState;
    internal int nextRunningState;
    internal BitReader br;
    internal Byte[] ringBuffer;
    internal Int32[] blockTypeTrees;
    internal Int32[] blockLenTrees;
    internal int metaBlockLength;
    internal bool inputEnd;
    internal bool isUncompressed;
    internal bool isMetadata;
    internal HuffmanTreeGroup hGroup0;
    internal HuffmanTreeGroup hGroup1;
    internal HuffmanTreeGroup hGroup2;
    internal Int32[] blockLength;
    internal Int32[] numBlockTypes;
    internal Int32[] blockTypeRb;
    internal Int32[] distRb;
    internal int pos;
    internal int maxDistance;
    internal int distRbIdx;
    internal bool trivialLiteralContext;
    internal int literalTreeIndex;
    internal int literalTree;
    internal int j;
    internal int insertLength;
    internal Byte[] contextModes;
    internal Byte[] contextMap;
    internal int contextMapSlice;
    internal int distContextMapSlice;
    internal int contextLookupOffset1;
    internal int contextLookupOffset2;
    internal int treeCommandOffset;
    internal int distanceCode;
    internal Byte[] distContextMap;
    internal int numDirectDistanceCodes;
    internal int distancePostfixMask;
    internal int distancePostfixBits;
    internal int distance;
    internal int copyLength;
    internal int copyDst;
    internal int maxBackwardDistance;
    internal int maxRingBufferSize;
    internal int ringBufferSize;
    internal long expectedTotalSize;
    internal Byte[] customDictionary;
    internal int bytesToIgnore;
    internal int outputOffset;
    internal int outputLength;
    internal int outputUsed;
    internal int bytesWritten;
    internal int bytesToWrite;
    internal Byte[] output;
    private static int DecodeWindowBits(BitReader br);
    internal static void SetInput(BrotliState state, Stream input);
    internal static void Close(BrotliState state);
}
internal class SharpVectors.Compressions.Brotli.BrotliTransform : object {
    private Byte[] _prefix;
    private int _type;
    private Byte[] _suffix;
    internal static BrotliTransform[] Transforms;
    internal BrotliTransform(string prefix, int type, string suffix);
    private static BrotliTransform();
    internal static Byte[] ReadUniBytes(string uniBytes);
    internal static int TransformDictionaryWord(Byte[] dst, int dstOffset, Byte[] word, int wordOffset, int len, BrotliTransform transform);
}
internal static class SharpVectors.Compressions.Brotli.Context : object {
    public static Int32[] Lookup;
    public static Int32[] LookupOffsets;
    private static Context();
}
internal static class SharpVectors.Compressions.Brotli.Dictionary : object {
    internal static Int32[] OffsetsByLength;
    internal static Int32[] SizeBitsByLength;
    internal static int MinWordLength;
    internal static int MaxWordLength;
    internal static int MaxTransformedWordLength;
    private static Dictionary();
    internal static Byte[] GetData();
}
internal static class SharpVectors.Compressions.Brotli.Huffman : object {
    internal static int HuffmanMaxTableSize;
    private static int MaxLength;
    private static int GetNextKey(int key, int len);
    private static void ReplicateValue(Int32[] table, int offset, int step, int end, int item);
    private static int NextTableBitSize(Int32[] count, int len, int rootBits);
    internal static void BuildHuffmanTable(Int32[] rootTable, int tableOffset, int rootBits, Int32[] codeLengths, int codeLengthsSize);
}
internal class SharpVectors.Compressions.Brotli.HuffmanTreeGroup : object {
    private int alphabetSize;
    internal Int32[] codes;
    internal Int32[] trees;
    internal static void Init(HuffmanTreeGroup group, int alphabetSize, int n);
    internal static void Decode(HuffmanTreeGroup group, BitReader br);
}
internal class SharpVectors.Compressions.Brotli.IntReader : object {
    private Byte[] byteBuffer;
    private Int32[] intBuffer;
    internal static void Init(IntReader ir, Byte[] byteBuffer, Int32[] intBuffer);
    internal static void Convert(IntReader ir, int intLen);
}
internal static class SharpVectors.Compressions.Brotli.Prefix : object {
    public static Int32[] BlockLengthOffset;
    public static Int32[] BlockLengthNBits;
    public static Int32[] InsertLengthOffset;
    public static Int32[] InsertLengthNBits;
    public static Int32[] CopyLengthOffset;
    public static Int32[] CopyLengthNBits;
    public static Int32[] InsertRangeLut;
    public static Int32[] CopyRangeLut;
    private static Prefix();
}
internal static class SharpVectors.Compressions.Brotli.RunningState : object {
    public static int Uninitialized;
    public static int BlockStart;
    public static int CompressedBlockStart;
    public static int MainLoop;
    public static int ReadMetadata;
    public static int CopyUncompressed;
    public static int InsertLoop;
    public static int CopyLoop;
    public static int CopyWrapBuffer;
    public static int Transform;
    public static int Finished;
    public static int Closed;
    public static int Write;
}
internal static class SharpVectors.Compressions.Brotli.Utils : object {
    private static Byte[] ByteZeroes;
    private static Int32[] IntZeroes;
    private static Utils();
    internal static void FillWithZeroes(Byte[] dest, int offset, int length);
    internal static void FillWithZeroes(Int32[] dest, int offset, int length);
}
internal static class SharpVectors.Compressions.Brotli.WordTransformType : object {
    internal static int Identity;
    internal static int OmitLast1;
    internal static int OmitLast2;
    internal static int OmitLast3;
    internal static int OmitLast4;
    internal static int OmitLast5;
    internal static int OmitLast6;
    internal static int OmitLast7;
    internal static int OmitLast8;
    internal static int OmitLast9;
    internal static int UppercaseFirst;
    internal static int UppercaseAll;
    internal static int OmitFirst1;
    internal static int OmitFirst2;
    internal static int OmitFirst3;
    internal static int OmitFirst4;
    internal static int OmitFirst5;
    internal static int OmitFirst6;
    internal static int OmitFirst7;
    internal static int OmitFirst8;
    internal static int OmitFirst9;
    internal static int GetOmitFirst(int type);
    internal static int GetOmitLast(int type);
}
public class SharpVectors.Compressions.ZLib.Adler32 : object {
    private static int Base;
    private static int NMax;
    private UInt32 _a;
    private UInt32 _b;
    private int _pend;
    public void Update(byte data);
    public void Update(Byte[] data);
    public void Update(Byte[] data, int offset, int length);
    public void Reset();
    public UInt32 GetValue();
    private void UpdateModulus();
}
public enum SharpVectors.Compressions.ZLib.ZLibCompressionLevel : Enum {
    public int value__;
    public static ZLibCompressionLevel Faster;
    public static ZLibCompressionLevel Fast;
    public static ZLibCompressionLevel Default;
    public static ZLibCompressionLevel Optimal;
}
public class SharpVectors.Compressions.ZLib.ZLibHeader : object {
    private bool _isZLibSupported;
    private byte _compressionMethod;
    private byte _compressionInfo;
    private byte _checkFlag;
    private bool _dictFlag;
    private ZLibCompressionLevel _compressionLevel;
    public bool IsZLibSupported { get; public set; }
    public byte CompressionMethod { get; public set; }
    public byte CompressionInfo { get; public set; }
    public byte CheckFlag { get; public set; }
    public bool DictFlag { get; public set; }
    public ZLibCompressionLevel CompressionLevel { get; public set; }
    public bool get_IsZLibSupported();
    public void set_IsZLibSupported(bool value);
    public byte get_CompressionMethod();
    public void set_CompressionMethod(byte value);
    public byte get_CompressionInfo();
    public void set_CompressionInfo(byte value);
    public byte get_CheckFlag();
    public void set_CheckFlag(byte value);
    public bool get_DictFlag();
    public void set_DictFlag(bool value);
    public ZLibCompressionLevel get_CompressionLevel();
    public void set_CompressionLevel(ZLibCompressionLevel value);
    public Byte[] EncodeZlibHeader();
    public static ZLibHeader DecodeHeader(int pCMF, int pFlag);
    private void RefreshCheckFlag();
    private byte GetCMF();
    private byte GetFLG();
}
public class SharpVectors.Compressions.ZLib.ZLibStream : Stream {
    private Byte[] _crc;
    private bool _isLeaveOpen;
    private bool _isClosed;
    private Adler32 _adler32;
    private Stream _rawStream;
    private DeflateStream _deflateStream;
    private CompressionMode _compressionMode;
    private ZLibCompressionLevel _compressionLevel;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ZLibStream(Stream stream, ZLibCompressionLevel compressionLevel);
    public ZLibStream(Stream stream, CompressionMode compressionMode);
    public ZLibStream(Stream stream, ZLibCompressionLevel compressionLevel, bool leaveOpen);
    public ZLibStream(Stream stream, CompressionMode compressionMode, bool leaveOpen);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int ReadByte();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Close();
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public static bool IsZLibStream(Stream stream);
    private void ReadCRC();
    private void InitializeStream();
    private void InitializeZLibHeader();
}
internal static class SharpVectors.Dom.Resources.Root : object {
}
public class SharpVectors.Dom.Svg.CalculatedArcValues : ValueType {
    public double CorrRx;
    public double CorrRy;
    public double Cx;
    public double Cy;
    public double AngleStart;
    public double AngleExtent;
    public CalculatedArcValues(double rx, double ry, double cx, double cy, double angleStart, double angleExtent);
}
public interface SharpVectors.Dom.Svg.ISvgPathHandler {
    public abstract virtual void StartPath();
    public abstract virtual void EndPath();
    public abstract virtual void MovetoRel(float x, float y);
    public abstract virtual void MovetoAbs(float x, float y);
    public abstract virtual void ClosePath();
    public abstract virtual void LinetoRel(float x, float y);
    public abstract virtual void LinetoAbs(float x, float y);
    public abstract virtual void LinetoHorizontalRel(float x);
    public abstract virtual void LinetoHorizontalAbs(float x);
    public abstract virtual void LinetoVerticalRel(float y);
    public abstract virtual void LinetoVerticalAbs(float y);
    public abstract virtual void CurvetoCubicRel(float x1, float y1, float x2, float y2, float x, float y);
    public abstract virtual void CurvetoCubicAbs(float x1, float y1, float x2, float y2, float x, float y);
    public abstract virtual void CurvetoCubicSmoothRel(float x2, float y2, float x, float y);
    public abstract virtual void CurvetoCubicSmoothAbs(float x2, float y2, float x, float y);
    public abstract virtual void CurvetoQuadraticRel(float x1, float y1, float x, float y);
    public abstract virtual void CurvetoQuadraticAbs(float x1, float y1, float x, float y);
    public abstract virtual void CurvetoQuadraticSmoothRel(float x, float y);
    public abstract virtual void CurvetoQuadraticSmoothAbs(float x, float y);
    public abstract virtual void ArcRel(float rx, float ry, float xAxisRotation, bool largeArcFlag, bool sweepFlag, float x, float y);
    public abstract virtual void ArcAbs(float rx, float ry, float xAxisRotation, bool largeArcFlag, bool sweepFlag, float x, float y);
}
public interface SharpVectors.Dom.Svg.ISvgPointsHandler {
    public abstract virtual void StartPoints();
    public abstract virtual void Point(float x, float y);
    public abstract virtual void EndPoints();
}
public class SharpVectors.Dom.Svg.SvgAElement : SvgTextContentElement {
    public SvgRenderingHint RenderingHint { get; }
    public SvgAElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual SvgRenderingHint get_RenderingHint();
}
public class SharpVectors.Dom.Svg.SvgAltGlyphDefElement : SvgElement {
    private Nullable`1<bool> _isSimple;
    public bool IsRenderable { get; }
    public bool IsSimple { get; }
    public SvgGlyphRefElement GlyphRef { get; }
    public SvgAltGlyphDefElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public sealed virtual bool get_IsSimple();
    public SvgGlyphRefElement get_GlyphRef();
    public sealed virtual ISvgGlyphRefElement GetGlyphRef(string name);
    public sealed virtual ISvgAltGlyphItemElement GetGlyphItem(string name);
    private void Initialize();
}
public class SharpVectors.Dom.Svg.SvgAltGlyphElement : SvgTextPositioningElement {
    private SvgUriReference _uriReference;
    public bool IsRenderable { get; }
    public string GlyphRef { get; public set; }
    public string Format { get; public set; }
    public ISvgAnimatedString Href { get; }
    public XmlElement ReferencedElement { get; }
    public SvgAltGlyphElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public sealed virtual string get_GlyphRef();
    public sealed virtual void set_GlyphRef(string value);
    public sealed virtual string get_Format();
    public sealed virtual void set_Format(string value);
    public sealed virtual ISvgAnimatedString get_Href();
    public XmlElement get_ReferencedElement();
}
public class SharpVectors.Dom.Svg.SvgAltGlyphItemElement : SvgElement {
    public bool IsRenderable { get; }
    public SvgAltGlyphItemElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public sealed virtual ISvgGlyphRefElement GetGlyphRef(string name);
}
public class SharpVectors.Dom.Svg.SvgAngle : object {
    private bool _readOnly;
    private CssPrimitiveAngleValue _cssAngle;
    public SvgAngleType UnitType { get; }
    public double Value { get; public set; }
    public double ValueInSpecifiedUnits { get; public set; }
    public string ValueAsString { get; public set; }
    public SvgAngle(string baseVal, string defaultValue, bool readOnly);
    public sealed virtual void NewValueSpecifiedUnits(SvgAngleType unitType, double valueInSpecifiedUnits);
    public sealed virtual void ConvertToSpecifiedUnits(SvgAngleType unitType);
    public sealed virtual SvgAngleType get_UnitType();
    public sealed virtual double get_Value();
    public sealed virtual void set_Value(double value);
    public sealed virtual double get_ValueInSpecifiedUnits();
    public sealed virtual void set_ValueInSpecifiedUnits(double value);
    public sealed virtual string get_ValueAsString();
    public sealed virtual void set_ValueAsString(string value);
}
public abstract class SharpVectors.Dom.Svg.SvgAnimateBaseElement : SvgAnimationElement {
    private static Regex _isImportant;
    private ISvgAnimatedString _className;
    private IDictionary`2<string, ICssValue> _presentationAttributes;
    public string AttributeName { get; public set; }
    public string AttributeType { get; public set; }
    public string By { get; public set; }
    public string CalcMode { get; public set; }
    public string From { get; public set; }
    public string KeySplines { get; public set; }
    public string KeyTimes { get; public set; }
    public string To { get; public set; }
    public string Values { get; public set; }
    public string Accumulate { get; public set; }
    public string Additive { get; public set; }
    public ISvgAnimatedString ClassName { get; }
    protected SvgAnimateBaseElement(string prefix, string localname, string ns, SvgDocument doc);
    private static SvgAnimateBaseElement();
    public sealed virtual string get_AttributeName();
    public void set_AttributeName(string value);
    public sealed virtual string get_AttributeType();
    public sealed virtual void set_AttributeType(string value);
    public sealed virtual string get_By();
    public sealed virtual void set_By(string value);
    public sealed virtual string get_CalcMode();
    public sealed virtual void set_CalcMode(string value);
    public sealed virtual string get_From();
    public sealed virtual void set_From(string value);
    public sealed virtual string get_KeySplines();
    public sealed virtual void set_KeySplines(string value);
    public sealed virtual string get_KeyTimes();
    public sealed virtual void set_KeyTimes(string value);
    public sealed virtual string get_To();
    public sealed virtual void set_To(string value);
    public sealed virtual string get_Values();
    public sealed virtual void set_Values(string value);
    public sealed virtual string get_Accumulate();
    public sealed virtual void set_Accumulate(string value);
    public sealed virtual string get_Additive();
    public sealed virtual void set_Additive(string value);
    public sealed virtual ISvgAnimatedString get_ClassName();
    public sealed virtual ICssValue GetPresentationAttribute(string name);
}
public class SharpVectors.Dom.Svg.SvgAnimateColorElement : SvgAnimateBaseElement {
    public SvgAnimateColorElement(string prefix, string localname, string ns, SvgDocument doc);
}
public class SharpVectors.Dom.Svg.SvgAnimatedAngle : object {
    private ISvgAngle _baseVal;
    private ISvgAngle _animVal;
    public ISvgAngle BaseVal { get; }
    public ISvgAngle AnimVal { get; }
    public SvgAnimatedAngle(string s, string defaultValue);
    public SvgAnimatedAngle(ISvgAngle angle);
    public sealed virtual ISvgAngle get_BaseVal();
    public sealed virtual ISvgAngle get_AnimVal();
}
public class SharpVectors.Dom.Svg.SvgAnimatedBoolean : object {
    private bool _baseVal;
    private bool _animVal;
    public bool BaseVal { get; public set; }
    public bool AnimVal { get; }
    public SvgAnimatedBoolean(string str, bool defaultValue);
    public sealed virtual bool get_BaseVal();
    public sealed virtual void set_BaseVal(bool value);
    public sealed virtual bool get_AnimVal();
}
public class SharpVectors.Dom.Svg.SvgAnimatedEnumeration : object {
    private ushort _baseVal;
    private ushort _animVal;
    public ushort BaseVal { get; public set; }
    public ushort AnimVal { get; }
    public SvgAnimatedEnumeration(ushort val);
    public sealed virtual ushort get_BaseVal();
    public sealed virtual void set_BaseVal(ushort value);
    public sealed virtual ushort get_AnimVal();
}
public class SharpVectors.Dom.Svg.SvgAnimatedInteger : object {
    private long _baseVal;
    private long _animVal;
    public long BaseVal { get; public set; }
    public long AnimVal { get; public set; }
    public SvgAnimatedInteger(string str);
    public SvgAnimatedInteger(long value);
    public SvgAnimatedInteger(ulong value);
    public SvgAnimatedInteger(double value);
    public SvgAnimatedInteger(long baseVal, long animVal);
    public sealed virtual long get_BaseVal();
    public sealed virtual void set_BaseVal(long value);
    public sealed virtual long get_AnimVal();
    public void set_AnimVal(long value);
}
public class SharpVectors.Dom.Svg.SvgAnimatedLength : object {
    private ISvgLength _baseVal;
    private ISvgLength _animVal;
    public ISvgLength BaseVal { get; public set; }
    public ISvgLength AnimVal { get; public set; }
    public SvgAnimatedLength(SvgElement ownerElement, string propertyName, SvgLengthDirection direction, string defaultValue);
    public SvgAnimatedLength(SvgElement ownerElement, string propertyName, SvgLengthDirection direction, string strValue, string defaultValue);
    public SvgAnimatedLength(ISvgLength baseVal, ISvgLength animVal);
    public sealed virtual ISvgLength get_BaseVal();
    public void set_BaseVal(ISvgLength value);
    public sealed virtual ISvgLength get_AnimVal();
    public void set_AnimVal(ISvgLength value);
}
[DefaultMemberAttribute("Item")]
public class SharpVectors.Dom.Svg.SvgAnimatedLengthList : object {
    private SvgLengthList _baseVal;
    private SvgLengthList _animVal;
    public int Count { get; }
    public ISvgAnimatedLength Item { get; }
    public ISvgLengthList BaseVal { get; }
    public ISvgLengthList AnimVal { get; }
    public SvgAnimatedLengthList(string propertyName, string str, SvgElement ownerElement, SvgLengthDirection direction);
    public sealed virtual int get_Count();
    public sealed virtual ISvgAnimatedLength get_Item(UInt32 index);
    public sealed virtual ISvgLengthList get_BaseVal();
    public sealed virtual ISvgLengthList get_AnimVal();
}
public class SharpVectors.Dom.Svg.SvgAnimatedNumber : object {
    private double _baseVal;
    private double _animVal;
    public double BaseVal { get; public set; }
    public double AnimVal { get; public set; }
    public SvgAnimatedNumber(string str);
    public SvgAnimatedNumber(double value);
    public SvgAnimatedNumber(double baseVal, double animVal);
    public sealed virtual double get_BaseVal();
    public sealed virtual void set_BaseVal(double value);
    public sealed virtual double get_AnimVal();
    public void set_AnimVal(double value);
}
[DefaultMemberAttribute("Item")]
public class SharpVectors.Dom.Svg.SvgAnimatedNumberList : object {
    public static SvgAnimatedNumberList Empty;
    private SvgNumberList _baseVal;
    private SvgNumberList _animVal;
    public int Count { get; }
    public ISvgAnimatedNumber Item { get; }
    public ISvgNumberList BaseVal { get; }
    public ISvgNumberList AnimVal { get; }
    public SvgAnimatedNumberList(string str);
    private static SvgAnimatedNumberList();
    public sealed virtual int get_Count();
    public sealed virtual ISvgAnimatedNumber get_Item(UInt32 index);
    public sealed virtual ISvgNumberList get_BaseVal();
    public sealed virtual ISvgNumberList get_AnimVal();
}
public class SharpVectors.Dom.Svg.SvgAnimatedPreserveAspectRatio : object {
    private SvgPreserveAspectRatio _baseVal;
    private SvgPreserveAspectRatio _animVal;
    public ISvgPreserveAspectRatio BaseVal { get; }
    public ISvgPreserveAspectRatio AnimVal { get; }
    public SvgAnimatedPreserveAspectRatio(string attr, SvgElement ownerElement);
    public sealed virtual ISvgPreserveAspectRatio get_BaseVal();
    public sealed virtual ISvgPreserveAspectRatio get_AnimVal();
}
public class SharpVectors.Dom.Svg.SvgAnimatedRect : object {
    private SvgRect _baseVal;
    private SvgRect _animVal;
    public ISvgRect BaseVal { get; }
    public ISvgRect AnimVal { get; }
    public SvgAnimatedRect(string str);
    public SvgAnimatedRect(SvgRect rect);
    public sealed virtual ISvgRect get_BaseVal();
    public sealed virtual ISvgRect get_AnimVal();
}
public class SharpVectors.Dom.Svg.SvgAnimatedString : object {
    private string _baseVal;
    private string _animVal;
    public string BaseVal { get; public set; }
    public string AnimVal { get; }
    public SvgAnimatedString(string str);
    public sealed virtual string get_BaseVal();
    public sealed virtual void set_BaseVal(string value);
    public sealed virtual string get_AnimVal();
}
public class SharpVectors.Dom.Svg.SvgAnimatedTransformList : object {
    private SvgTransformList _baseVal;
    private SvgTransformList _animVal;
    public ISvgTransformList BaseVal { get; }
    public ISvgTransformList AnimVal { get; }
    public SvgAnimatedTransformList(string transform);
    public sealed virtual ISvgTransformList get_BaseVal();
    public sealed virtual ISvgTransformList get_AnimVal();
}
public class SharpVectors.Dom.Svg.SvgAnimateElement : SvgAnimateBaseElement {
    public SvgAnimateElement(string prefix, string localname, string ns, SvgDocument doc);
}
public class SharpVectors.Dom.Svg.SvgAnimateMotionElement : SvgAnimationElement {
    public string CalcMode { get; public set; }
    public string From { get; public set; }
    public string To { get; public set; }
    public string By { get; public set; }
    public string KeySplines { get; public set; }
    public string KeyTimes { get; public set; }
    public string Values { get; public set; }
    public string Accumulate { get; public set; }
    public string Additive { get; public set; }
    public string Path { get; public set; }
    public string KeyPoints { get; public set; }
    public string Rotate { get; public set; }
    public string Origin { get; public set; }
    public SvgAnimateMotionElement(string prefix, string localname, string ns, SvgDocument doc);
    public sealed virtual string get_CalcMode();
    public sealed virtual void set_CalcMode(string value);
    public sealed virtual string get_From();
    public sealed virtual void set_From(string value);
    public sealed virtual string get_To();
    public sealed virtual void set_To(string value);
    public sealed virtual string get_By();
    public sealed virtual void set_By(string value);
    public sealed virtual string get_KeySplines();
    public sealed virtual void set_KeySplines(string value);
    public sealed virtual string get_KeyTimes();
    public sealed virtual void set_KeyTimes(string value);
    public sealed virtual string get_Values();
    public sealed virtual void set_Values(string value);
    public sealed virtual string get_Accumulate();
    public sealed virtual void set_Accumulate(string value);
    public sealed virtual string get_Additive();
    public sealed virtual void set_Additive(string value);
    public sealed virtual string get_Path();
    public sealed virtual void set_Path(string value);
    public sealed virtual string get_KeyPoints();
    public sealed virtual void set_KeyPoints(string value);
    public sealed virtual string get_Rotate();
    public sealed virtual void set_Rotate(string value);
    public sealed virtual string get_Origin();
    public sealed virtual void set_Origin(string value);
}
public class SharpVectors.Dom.Svg.SvgAnimateMPathElement : SvgElement {
    private SvgUriReference _uriReference;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgAnimatedString Href { get; }
    public XmlElement ReferencedElement { get; }
    public SvgAnimateMPathElement(string prefix, string localname, string ns, SvgDocument doc);
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual ISvgAnimatedString get_Href();
    public XmlElement get_ReferencedElement();
}
public class SharpVectors.Dom.Svg.SvgAnimateSetElement : SvgAnimationElement {
    public string AttributeName { get; public set; }
    public string AttributeType { get; public set; }
    public string To { get; public set; }
    public SvgAnimateSetElement(string prefix, string localname, string ns, SvgDocument doc);
    public sealed virtual string get_AttributeName();
    public void set_AttributeName(string value);
    public sealed virtual string get_AttributeType();
    public sealed virtual void set_AttributeType(string value);
    public sealed virtual string get_To();
    public sealed virtual void set_To(string value);
}
public class SharpVectors.Dom.Svg.SvgAnimateTransformElement : SvgAnimationElement {
    private SvgTransformType _type;
    public string AttributeName { get; public set; }
    public string AttributeType { get; public set; }
    public string By { get; public set; }
    public string CalcMode { get; public set; }
    public string From { get; public set; }
    public string KeySplines { get; public set; }
    public string KeyTimes { get; public set; }
    public string To { get; public set; }
    public string Values { get; public set; }
    public string Accumulate { get; public set; }
    public string Additive { get; public set; }
    public SvgTransformType Type { get; public set; }
    public SvgAnimateTransformElement(string prefix, string localname, string ns, SvgDocument doc);
    public sealed virtual string get_AttributeName();
    public void set_AttributeName(string value);
    public sealed virtual string get_AttributeType();
    public sealed virtual void set_AttributeType(string value);
    public sealed virtual string get_By();
    public sealed virtual void set_By(string value);
    public sealed virtual string get_CalcMode();
    public sealed virtual void set_CalcMode(string value);
    public sealed virtual string get_From();
    public sealed virtual void set_From(string value);
    public sealed virtual string get_KeySplines();
    public sealed virtual void set_KeySplines(string value);
    public sealed virtual string get_KeyTimes();
    public sealed virtual void set_KeyTimes(string value);
    public sealed virtual string get_To();
    public sealed virtual void set_To(string value);
    public sealed virtual string get_Values();
    public sealed virtual void set_Values(string value);
    public sealed virtual string get_Accumulate();
    public sealed virtual void set_Accumulate(string value);
    public sealed virtual string get_Additive();
    public sealed virtual void set_Additive(string value);
    public sealed virtual SvgTransformType get_Type();
    public sealed virtual void set_Type(SvgTransformType value);
}
public abstract class SharpVectors.Dom.Svg.SvgAnimationElement : SvgElement {
    protected SvgTests _svgTests;
    protected EventTarget _eventTarget;
    protected SvgExternalResourcesRequired _externalResourcesRequired;
    private SvgUriReference _uriReference;
    public bool IsRenderable { get; }
    public SvgRenderingHint RenderingHint { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgElement TargetElement { get; }
    public float CurrentTime { get; }
    public float SimpleDuration { get; }
    public float StartTime { get; }
    public string Begin { get; public set; }
    public string Duration { get; public set; }
    public string End { get; public set; }
    public string Maximum { get; public set; }
    public string Minimum { get; public set; }
    public string RepeatCount { get; public set; }
    public string RepeatDuration { get; public set; }
    public string Restart { get; public set; }
    public string Fill { get; public set; }
    public ISvgAnimatedString Href { get; }
    public XmlElement ReferencedElement { get; }
    protected SvgAnimationElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.DispatchEvent(IEvent eventObject);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture, object eventGroup);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(string namespaceUri, string type);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(string namespaceUri, string type);
    public sealed virtual ISvgElement get_TargetElement();
    public sealed virtual float get_CurrentTime();
    public sealed virtual float get_SimpleDuration();
    public sealed virtual float get_StartTime();
    public sealed virtual string get_Begin();
    public sealed virtual void set_Begin(string value);
    public sealed virtual string get_Duration();
    public sealed virtual void set_Duration(string value);
    public sealed virtual string get_End();
    public sealed virtual void set_End(string value);
    public sealed virtual string get_Maximum();
    public sealed virtual void set_Maximum(string value);
    public sealed virtual string get_Minimum();
    public sealed virtual void set_Minimum(string value);
    public sealed virtual string get_RepeatCount();
    public sealed virtual void set_RepeatCount(string value);
    public sealed virtual string get_RepeatDuration();
    public sealed virtual void set_RepeatDuration(string value);
    public sealed virtual string get_Restart();
    public sealed virtual void set_Restart(string value);
    public sealed virtual string get_Fill();
    public sealed virtual void set_Fill(string value);
    public sealed virtual ISvgAnimatedString get_Href();
    public XmlElement get_ReferencedElement();
    public sealed virtual void BeginElement();
    public sealed virtual void BeginElementAt(float offset);
    public sealed virtual void EndElement();
    public sealed virtual void EndElementAt(float offset);
}
public class SharpVectors.Dom.Svg.SvgCircleElement : SvgTransformableElement {
    private ISvgAnimatedLength _cx;
    private ISvgAnimatedLength _cy;
    private ISvgAnimatedLength _r;
    private SvgTests _svgTests;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    public SvgRenderingHint RenderingHint { get; }
    public ISvgAnimatedLength Cx { get; }
    public ISvgAnimatedLength Cy { get; }
    public ISvgAnimatedLength R { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public SvgCircleElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual ISvgAnimatedLength get_Cx();
    public sealed virtual ISvgAnimatedLength get_Cy();
    public sealed virtual ISvgAnimatedLength get_R();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual void Accept(ISvgElementVisitor visitor);
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
    public void Invalidate();
    public virtual void HandleAttributeChange(XmlAttribute attribute);
}
public class SharpVectors.Dom.Svg.SvgClipPathElement : SvgTransformableElement {
    private SvgTests _svgTests;
    private ISvgAnimatedEnumeration _clipPathUnits;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    public bool IsRenderable { get; }
    public SvgRenderingHint RenderingHint { get; }
    public ISvgAnimatedEnumeration ClipPathUnits { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public SvgClipPathElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual ISvgAnimatedEnumeration get_ClipPathUnits();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
}
public class SharpVectors.Dom.Svg.SvgColor : CssValue {
    protected CssColor _rgbColor;
    private SvgColorType _colorType;
    public string CssText { get; public set; }
    public SvgColorType ColorType { get; }
    public ICssColor RgbColor { get; }
    public ISvgIccColor IccColor { get; }
    public SvgColor(string str);
    public virtual string get_CssText();
    public virtual void set_CssText(string value);
    public sealed virtual SvgColorType get_ColorType();
    public sealed virtual ICssColor get_RgbColor();
    public sealed virtual ISvgIccColor get_IccColor();
    public sealed virtual void SetRgbColor(string rgbColor);
    public sealed virtual void SetRgbColorIccColor(string rgbColor, string iccColor);
    public sealed virtual void SetColor(SvgColorType colorType, string rgbColor, string iccColor);
    protected void ParseColor(string str);
}
public class SharpVectors.Dom.Svg.SvgColorProfileElement : SvgElement {
    private SvgUriReference _svgURIReference;
    public string Local { get; }
    public ISvgAnimatedString Href { get; }
    public SvgUriReference UriReference { get; }
    public XmlElement ReferencedElement { get; }
    public ushort RenderingIntent { get; public set; }
    private string SharpVectors.Dom.Svg.ISvgColorProfileElement.Local { get; private set; }
    private string SharpVectors.Dom.Svg.ISvgColorProfileElement.Name { get; private set; }
    public SvgColorProfileElement(string prefix, string localname, string ns, SvgDocument doc);
    public string get_Local();
    public sealed virtual ISvgAnimatedString get_Href();
    public SvgUriReference get_UriReference();
    public XmlElement get_ReferencedElement();
    public sealed virtual ushort get_RenderingIntent();
    public sealed virtual void set_RenderingIntent(ushort value);
    private sealed virtual override string SharpVectors.Dom.Svg.ISvgColorProfileElement.get_Local();
    private sealed virtual override void SharpVectors.Dom.Svg.ISvgColorProfileElement.set_Local(string value);
    private sealed virtual override string SharpVectors.Dom.Svg.ISvgColorProfileElement.get_Name();
    private sealed virtual override void SharpVectors.Dom.Svg.ISvgColorProfileElement.set_Name(string value);
}
public abstract class SharpVectors.Dom.Svg.SvgComponentTransferFunctionElement : SvgElement {
    protected static Regex _reSeparators;
    protected ISvgAnimatedEnumeration _type;
    protected ISvgAnimatedNumberList _tableValues;
    protected ISvgAnimatedNumber _slope;
    protected ISvgAnimatedNumber _intercept;
    protected ISvgAnimatedNumber _amplitude;
    protected ISvgAnimatedNumber _exponent;
    protected ISvgAnimatedNumber _offset;
    public bool IsRenderable { get; }
    public ISvgAnimatedEnumeration Type { get; }
    public ISvgAnimatedNumberList TableValues { get; }
    public ISvgAnimatedNumber Slope { get; }
    public ISvgAnimatedNumber Intercept { get; }
    public ISvgAnimatedNumber Amplitude { get; }
    public ISvgAnimatedNumber Exponent { get; }
    public ISvgAnimatedNumber Offset { get; }
    protected SvgComponentTransferFunctionElement(string prefix, string localname, string ns, SvgDocument doc);
    private static SvgComponentTransferFunctionElement();
    public virtual bool get_IsRenderable();
    public sealed virtual ISvgAnimatedEnumeration get_Type();
    public sealed virtual ISvgAnimatedNumberList get_TableValues();
    public sealed virtual ISvgAnimatedNumber get_Slope();
    public sealed virtual ISvgAnimatedNumber get_Intercept();
    public sealed virtual ISvgAnimatedNumber get_Amplitude();
    public sealed virtual ISvgAnimatedNumber get_Exponent();
    public sealed virtual ISvgAnimatedNumber get_Offset();
}
public class SharpVectors.Dom.Svg.SvgDefsElement : SvgTransformableElement {
    private SvgTests _svgTests;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    public bool IsRenderable { get; }
    public SvgRenderingHint RenderingHint { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public SvgDefsElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
}
public class SharpVectors.Dom.Svg.SvgDescElement : SvgStyleableElement {
    public bool IsRenderable { get; }
    public SvgDescElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
}
public class SharpVectors.Dom.Svg.SvgDocument : CssXmlDocument {
    public static int DotsPerInch;
    public static string SvgNamespace;
    public static string XLinkNamespace;
    public static string XmlIdUrl;
    private static XmlReaderSettings _globalSettings;
    private static IDictionary`2<string, string> _entitiesUris;
    private static object _entitiesUrisLock;
    private static Type _rootType;
    private String[] _supportedFeatures;
    private String[] _supportedExtensions;
    private bool _ignoreComments;
    private bool _ignoreProcessingInstructions;
    private bool _ignoreWhitespace;
    private string _baseURI;
    private bool _isFontsLoaded;
    private SvgWindow _window;
    private XmlReaderSettings _settings;
    private IList`1<SvgFontElement> _svgFonts;
    private ISet`1<string> _svgFontFamilies;
    private IList`1<SvgFontFamily> _fontFamilies;
    private double _dpi;
    private XmlNamespaceManager _namespaceManager;
    private IDictionary`2<string, string> _styledFontIds;
    private IDictionary`2<string, XmlElement> _xmlElementMap;
    private IDictionary`2<string, SvgElement> _svgElementMap;
    [CompilerGeneratedAttribute]
private ResolveNamespaceDelegate ResolveNamespace;
    [CompilerGeneratedAttribute]
private ResolveUriDelegate ResolvingUri;
    public bool IsFontsLoaded { get; }
    public IList`1<SvgFontFamily> FontFamilies { get; }
    public XmlReaderSettings CustomSettings { get; public set; }
    public static XmlReaderSettings GlobalSettings { get; public set; }
    public double Dpi { get; public set; }
    public XmlNamespaceManager NamespaceManager { get; }
    public string BaseURI { get; }
    public string Title { get; }
    public string Referrer { get; }
    public string Domain { get; }
    public ISvgSvgElement RootElement { get; }
    public ISvgWindow Window { get; }
    public IList`1<SvgFontElement> SvgFonts { get; }
    public ISet`1<string> SvgFontFamilies { get; }
    public SvgDocument OwnerDocument { get; }
    public IDictionary`2<string, string> StyledFontIds { get; }
    public IDictionary`2<string, XmlElement> ElementMap { get; }
    public IDictionary`2<string, SvgElement> ElementUniqueMap { get; }
    public SvgDocument(SvgWindow window);
    private static SvgDocument();
    [CompilerGeneratedAttribute]
public void add_ResolveNamespace(ResolveNamespaceDelegate value);
    [CompilerGeneratedAttribute]
public void remove_ResolveNamespace(ResolveNamespaceDelegate value);
    [CompilerGeneratedAttribute]
public void add_ResolvingUri(ResolveUriDelegate value);
    [CompilerGeneratedAttribute]
public void remove_ResolvingUri(ResolveUriDelegate value);
    public bool get_IsFontsLoaded();
    public IList`1<SvgFontFamily> get_FontFamilies();
    public XmlReaderSettings get_CustomSettings();
    public void set_CustomSettings(XmlReaderSettings value);
    public static XmlReaderSettings get_GlobalSettings();
    public static void set_GlobalSettings(XmlReaderSettings value);
    public double get_Dpi();
    public void set_Dpi(double value);
    public XmlNamespaceManager get_NamespaceManager();
    public virtual string get_BaseURI();
    public static bool IsGZipped(Stream stream);
    public virtual XmlElement CreateElement(string prefix, string localName, string ns);
    public virtual bool Supports(string feature, string version);
    private XmlReaderSettings GetXmlReaderSettings();
    public virtual void Load(string filename);
    public void Load(string baseUrl, Stream stream);
    public virtual void Load(TextReader txtReader);
    public virtual void Load(Stream inStream);
    private static string GetEntityUri(string uri);
    private object OnXmlResolverGettingEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    private static object GetEntityFromUri(string path, Type ofObjectToReturn);
    private string OnXmlResolverResolving(string relativeUri);
    private XmlParserContext GetXmlParserContext();
    private string OnResolveXmlNamespaceManager(string prefix);
    private XmlReader CreateValidatingXmlReader(string uri);
    private XmlReader CreateValidatingXmlReader(TextReader textReader);
    private XmlReader CreateValidatingXmlReader(string uri, Stream stream);
    private XmlReader CreateValidatingXmlReader(XmlReader xmlReader);
    public XmlNode GetNodeByUri(Uri absoluteUri);
    public XmlNode GetNodeByUri(string absoluteUrl);
    public Uri ResolveUri(string uri);
    public sealed virtual string get_Title();
    public sealed virtual string get_Referrer();
    public sealed virtual string get_Domain();
    public sealed virtual ISvgSvgElement get_RootElement();
    public SvgElement GetSvgById(string elementId);
    public SvgElement GetSvgByUniqueId(Guid uniqueId);
    public SvgElement GetSvgByUniqueId(string uniqueId);
    public virtual XmlElement GetElementById(string elementId);
    public sealed virtual ISvgWindow get_Window();
    public IList`1<SvgFontElement> get_SvgFonts();
    public ISet`1<string> get_SvgFontFamilies();
    public SvgDocument get_OwnerDocument();
    public void RegisterFont(SvgFontElement svgFont);
    public IList`1<SvgFontElement> GetFonts(string fontFamily);
    public IList`1<SvgFontElement> GetFonts(IList`1<string> fontFamilies);
    public IDictionary`2<string, string> get_StyledFontIds();
    public IDictionary`2<string, XmlElement> get_ElementMap();
    public IDictionary`2<string, SvgElement> get_ElementUniqueMap();
    protected virtual IList`1<Tuple`2<string, SvgFontFaceElement>> GetFontUrls();
    private static void GetFontUrl(CssStyleSheet cssSheet, IList`1<Tuple`2<string, SvgFontFaceElement>> fontUrls, IDictionary`2<string, string> styledFontIds);
    protected virtual void OnLoaded();
    private void LoadLocalFont(string fontPath, SvgWindow ownedWindow, SvgFontFaceElement fontFace);
    private void BuildElementMap();
    private void BuildElementUniqueMap();
    private sealed virtual override string SharpVectors.Dom.Svg.ISvgDocument.get_Url();
    private sealed virtual override bool SharpVectors.Dom.Svg.ISvgDocument.get_Static();
    private sealed virtual override void SharpVectors.Dom.Svg.ISvgDocument.set_Static(bool value);
}
public class SharpVectors.Dom.Svg.SvgElement : CssXmlElement {
    private ISvgElementInstance _elementInstance;
    public string UniqueId { get; }
    public SvgElement ImportNode { get; public set; }
    public SvgDocument ImportDocument { get; public set; }
    public SvgDocument OwnerDocument { get; }
    public string Id { get; public set; }
    private ISvgSvgElement SharpVectors.Dom.Svg.ISvgElement.OwnerSvgElement { get; }
    private ISvgElement SharpVectors.Dom.Svg.ISvgElement.ViewportElement { get; }
    public SvgSvgElement OwnerSvgElement { get; }
    public SvgElement ViewportElement { get; }
    public bool IsRenderable { get; }
    public SvgRenderingHint RenderingHint { get; }
    public bool IsHiddenCss { get; }
    public string XmlSpace { get; public set; }
    public string XmlLang { get; public set; }
    public ISvgElementInstance ElementInstance { get; public set; }
    public SvgElement(string prefix, string localname, string ns, SvgDocument doc);
    public string get_UniqueId();
    public SvgElement get_ImportNode();
    public void set_ImportNode(SvgElement value);
    public SvgDocument get_ImportDocument();
    public void set_ImportDocument(SvgDocument value);
    public SvgDocument get_OwnerDocument();
    public sealed virtual string get_Id();
    public sealed virtual void set_Id(string value);
    private sealed virtual override ISvgSvgElement SharpVectors.Dom.Svg.ISvgElement.get_OwnerSvgElement();
    private sealed virtual override ISvgElement SharpVectors.Dom.Svg.ISvgElement.get_ViewportElement();
    public SvgSvgElement get_OwnerSvgElement();
    public SvgElement get_ViewportElement();
    public virtual bool get_IsRenderable();
    public virtual SvgRenderingHint get_RenderingHint();
    public bool get_IsHiddenCss();
    public sealed virtual string get_XmlSpace();
    public sealed virtual void set_XmlSpace(string value);
    public sealed virtual string get_XmlLang();
    public sealed virtual void set_XmlLang(string value);
    public ISvgElementInstance get_ElementInstance();
    public void set_ElementInstance(ISvgElementInstance value);
    public string ResolveUri(string uri);
    public float GetAttribute(string name, float defValue);
    public void SetAttribute(string name, float value);
    public int GetAttribute(string name, int defValue);
    public void SetAttribute(string name, int value);
    public double GetAttribute(string name, double defValue);
    public void SetAttribute(string name, double value);
    public long GetAttribute(string name, long defValue);
    public void SetAttribute(string name, long value);
}
public static class SharpVectors.Dom.Svg.SvgElementFactory : object {
    public static XmlElement Create(string prefix, string localName, string ns, SvgDocument doc);
}
public class SharpVectors.Dom.Svg.SvgElementInstance : object {
    private EventTarget _eventTarget;
    private ISvgElement _correspondingElement;
    private ISvgUseElement _correspondingUseElement;
    private ISvgElementInstance _parentNode;
    private SvgElementInstanceList _childNodes;
    private ISvgElementInstance _previousSibling;
    private ISvgElementInstance _nextSibling;
    public ISvgElement CorrespondingElement { get; }
    public ISvgUseElement CorrespondingUseElement { get; }
    public ISvgElementInstance ParentNode { get; }
    public ISvgElementInstanceList ChildNodes { get; }
    public ISvgElementInstance FirstChild { get; }
    public ISvgElementInstance LastChild { get; }
    public ISvgElementInstance PreviousSibling { get; }
    public ISvgElementInstance NextSibling { get; }
    public SvgElementInstance(XmlNode refNode, SvgUseElement useElement, SvgElementInstance parent);
    public sealed virtual ISvgElement get_CorrespondingElement();
    public sealed virtual ISvgUseElement get_CorrespondingUseElement();
    public sealed virtual ISvgElementInstance get_ParentNode();
    public sealed virtual ISvgElementInstanceList get_ChildNodes();
    public sealed virtual ISvgElementInstance get_FirstChild();
    public sealed virtual ISvgElementInstance get_LastChild();
    public sealed virtual ISvgElementInstance get_PreviousSibling();
    public sealed virtual ISvgElementInstance get_NextSibling();
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.DispatchEvent(IEvent eventObject);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture, object eventGroup);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(string namespaceUri, string type);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(string namespaceUri, string type);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTargetSupport.FireEvent(IEvent eventObject);
    internal void SetPreviousSibling(ISvgElementInstance instance);
    internal void SetNextSibling(ISvgElementInstance instance);
}
public class SharpVectors.Dom.Svg.SvgElementInstanceList : object {
    private SvgElementInstance[] _items;
    public ulong Length { get; }
    public SvgElementInstanceList(SvgUseElement useElement, SvgElementInstance parent);
    public sealed virtual ulong get_Length();
    public sealed virtual ISvgElementInstance Item(ulong index);
}
public class SharpVectors.Dom.Svg.SvgEllipseElement : SvgTransformableElement {
    private ISvgAnimatedLength _cx;
    private ISvgAnimatedLength _cy;
    private ISvgAnimatedLength _rx;
    private ISvgAnimatedLength _ry;
    private SvgTests _svgTests;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    public SvgRenderingHint RenderingHint { get; }
    public ISvgAnimatedLength Cx { get; }
    public ISvgAnimatedLength Cy { get; }
    public ISvgAnimatedLength Rx { get; }
    public ISvgAnimatedLength Ry { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public SvgEllipseElement(string prefix, string localname, string ns, SvgDocument doc);
    public void Invalidate();
    public virtual void HandleAttributeChange(XmlAttribute attribute);
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual ISvgAnimatedLength get_Cx();
    public sealed virtual ISvgAnimatedLength get_Cy();
    public sealed virtual ISvgAnimatedLength get_Rx();
    public sealed virtual ISvgAnimatedLength get_Ry();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual void Accept(ISvgElementVisitor visitor);
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
}
public class SharpVectors.Dom.Svg.SvgException : DomException {
    private SvgExceptionType _code;
    public SvgExceptionType Code { get; }
    public SvgException(SvgExceptionType errorCode);
    public SvgException(SvgExceptionType errorCode, string message);
    public SvgException(SvgExceptionType errorCode, string message, Exception innerException);
    protected SvgException(SerializationInfo info, StreamingContext context);
    public SvgExceptionType get_Code();
}
public enum SharpVectors.Dom.Svg.SvgExceptionType : Enum {
    public int value__;
    public static SvgExceptionType SvgWrongTypeErr;
    public static SvgExceptionType SvgInvalidValueErr;
    public static SvgExceptionType SvgMatrixNotInvertable;
}
public class SharpVectors.Dom.Svg.SvgExternalResourcesRequired : object {
    private SvgElement _ownerElement;
    private ISvgAnimatedBoolean _externalResourcesRequired;
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public SvgExternalResourcesRequired(SvgElement ownerElement);
    private void OnAttributeChange(object src, XmlNodeChangedEventArgs args);
    public ISvgAnimatedBoolean get_ExternalResourcesRequired();
}
public class SharpVectors.Dom.Svg.SvgExternalResourcesRequiredException : DomException {
    protected SvgExternalResourcesRequiredException(SerializationInfo info, StreamingContext context);
}
public class SharpVectors.Dom.Svg.SvgFEBlendElement : SvgFilterPrimitiveStandardAttributes {
    private ISvgAnimatedEnumeration _mode;
    private ISvgAnimatedString _in1;
    private ISvgAnimatedString _in2;
    public ISvgAnimatedEnumeration Mode { get; }
    public ISvgAnimatedString In { get; }
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedString In2 { get; }
    public SvgFEBlendElement(string prefix, string localname, string ns, SvgDocument doc);
    public sealed virtual ISvgAnimatedEnumeration get_Mode();
    public ISvgAnimatedString get_In();
    public sealed virtual ISvgAnimatedString get_In1();
    public sealed virtual ISvgAnimatedString get_In2();
}
public class SharpVectors.Dom.Svg.SvgFEColorMatrixElement : SvgFilterPrimitiveStandardAttributes {
    private ISvgAnimatedString _in1;
    private ISvgAnimatedEnumeration _type;
    private ISvgAnimatedNumberList _values;
    public ISvgAnimatedEnumeration Type { get; }
    public ISvgAnimatedString In { get; }
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedNumberList Values { get; }
    public SvgFEColorMatrixElement(string prefix, string localname, string ns, SvgDocument doc);
    public sealed virtual ISvgAnimatedEnumeration get_Type();
    public ISvgAnimatedString get_In();
    public sealed virtual ISvgAnimatedString get_In1();
    public sealed virtual ISvgAnimatedNumberList get_Values();
}
public class SharpVectors.Dom.Svg.SvgFEComponentTransferElement : SvgFilterPrimitiveStandardAttributes {
    private ISvgAnimatedString _in1;
    public ISvgAnimatedString In { get; }
    public ISvgAnimatedString In1 { get; }
    public SvgFEComponentTransferElement(string prefix, string localname, string ns, SvgDocument doc);
    public ISvgAnimatedString get_In();
    public sealed virtual ISvgAnimatedString get_In1();
}
public class SharpVectors.Dom.Svg.SvgFECompositeElement : SvgFilterPrimitiveStandardAttributes {
    private ISvgAnimatedString _in1;
    private ISvgAnimatedString _in2;
    private ISvgAnimatedNumber _k1;
    private ISvgAnimatedNumber _k2;
    private ISvgAnimatedNumber _k3;
    private ISvgAnimatedNumber _k4;
    private ISvgAnimatedEnumeration _operator;
    public ISvgAnimatedEnumeration Operator { get; }
    public ISvgAnimatedString In { get; }
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedString In2 { get; }
    public ISvgAnimatedNumber K1 { get; }
    public ISvgAnimatedNumber K2 { get; }
    public ISvgAnimatedNumber K3 { get; }
    public ISvgAnimatedNumber K4 { get; }
    public SvgFECompositeElement(string prefix, string localname, string ns, SvgDocument doc);
    public sealed virtual ISvgAnimatedEnumeration get_Operator();
    public ISvgAnimatedString get_In();
    public sealed virtual ISvgAnimatedString get_In1();
    public sealed virtual ISvgAnimatedString get_In2();
    public sealed virtual ISvgAnimatedNumber get_K1();
    public sealed virtual ISvgAnimatedNumber get_K2();
    public sealed virtual ISvgAnimatedNumber get_K3();
    public sealed virtual ISvgAnimatedNumber get_K4();
}
public class SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement : SvgFilterPrimitiveStandardAttributes {
    private ISvgAnimatedEnumeration _edgeMode;
    private ISvgAnimatedInteger _orderX;
    private ISvgAnimatedInteger _orderY;
    private ISvgAnimatedNumberList _kernelMatrix;
    private ISvgAnimatedNumber _divisor;
    private ISvgAnimatedNumber _bias;
    private ISvgAnimatedInteger _targetX;
    private ISvgAnimatedInteger _targetY;
    private ISvgAnimatedNumber _kernelUnitLengthX;
    private ISvgAnimatedNumber _kernelUnitLengthY;
    private ISvgAnimatedBoolean _preserveAlpha;
    public ISvgAnimatedEnumeration EdgeMode { get; }
    public ISvgAnimatedNumber Bias { get; }
    public ISvgAnimatedNumber Divisor { get; }
    public ISvgAnimatedNumberList KernelMatrix { get; }
    public ISvgAnimatedNumber KernelUnitLengthX { get; }
    public ISvgAnimatedNumber KernelUnitLengthY { get; }
    public ISvgAnimatedInteger OrderX { get; }
    public ISvgAnimatedInteger OrderY { get; }
    public ISvgAnimatedInteger TargetX { get; }
    public ISvgAnimatedInteger TargetY { get; }
    public ISvgAnimatedBoolean PreserveAlpha { get; }
    public SvgFEConvolveMatrixElement(string prefix, string localname, string ns, SvgDocument doc);
    public sealed virtual ISvgAnimatedEnumeration get_EdgeMode();
    public sealed virtual ISvgAnimatedNumber get_Bias();
    public sealed virtual ISvgAnimatedNumber get_Divisor();
    public sealed virtual ISvgAnimatedNumberList get_KernelMatrix();
    public sealed virtual ISvgAnimatedNumber get_KernelUnitLengthX();
    public sealed virtual ISvgAnimatedNumber get_KernelUnitLengthY();
    public sealed virtual ISvgAnimatedInteger get_OrderX();
    public sealed virtual ISvgAnimatedInteger get_OrderY();
    public sealed virtual ISvgAnimatedInteger get_TargetX();
    public sealed virtual ISvgAnimatedInteger get_TargetY();
    public sealed virtual ISvgAnimatedBoolean get_PreserveAlpha();
    private void ParseOrder();
    private void ParseKernelUnitLength();
}
public class SharpVectors.Dom.Svg.SvgFEDiffuseLightingElement : SvgFilterPrimitiveStandardAttributes {
    private ISvgAnimatedString _in1;
    private ISvgAnimatedNumber _surfaceScale;
    private ISvgAnimatedNumber _diffuseConstant;
    private ISvgAnimatedNumber _kernelUnitLengthX;
    private ISvgAnimatedNumber _kernelUnitLengthY;
    public ISvgAnimatedString In { get; }
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedNumber SurfaceScale { get; }
    public ISvgAnimatedNumber DiffuseConstant { get; }
    public ISvgAnimatedNumber KernelUnitLengthX { get; }
    public ISvgAnimatedNumber KernelUnitLengthY { get; }
    public SvgFEDiffuseLightingElement(string prefix, string localname, string ns, SvgDocument doc);
    public ISvgAnimatedString get_In();
    public sealed virtual ISvgAnimatedString get_In1();
    public sealed virtual ISvgAnimatedNumber get_SurfaceScale();
    public sealed virtual ISvgAnimatedNumber get_DiffuseConstant();
    public sealed virtual ISvgAnimatedNumber get_KernelUnitLengthX();
    public sealed virtual ISvgAnimatedNumber get_KernelUnitLengthY();
    private void ParseKernelUnitLength();
}
public class SharpVectors.Dom.Svg.SvgFEDisplacementMapElement : SvgFilterPrimitiveStandardAttributes {
    private ISvgAnimatedString _in1;
    private ISvgAnimatedString _in2;
    private ISvgAnimatedNumber _scale;
    private ISvgAnimatedEnumeration _xChannelSelector;
    private ISvgAnimatedEnumeration _yChannelSelector;
    public ISvgAnimatedString In { get; }
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedString In2 { get; }
    public ISvgAnimatedNumber Scale { get; }
    public ISvgAnimatedEnumeration XChannelSelector { get; }
    public ISvgAnimatedEnumeration YChannelSelector { get; }
    public SvgFEDisplacementMapElement(string prefix, string localname, string ns, SvgDocument doc);
    public ISvgAnimatedString get_In();
    public sealed virtual ISvgAnimatedString get_In1();
    public sealed virtual ISvgAnimatedString get_In2();
    public sealed virtual ISvgAnimatedNumber get_Scale();
    public sealed virtual ISvgAnimatedEnumeration get_XChannelSelector();
    public sealed virtual ISvgAnimatedEnumeration get_YChannelSelector();
}
public class SharpVectors.Dom.Svg.SvgFEDistantLightElement : SvgElement {
    private ISvgAnimatedNumber _azimuth;
    private ISvgAnimatedNumber _elevation;
    public bool IsRenderable { get; }
    public ISvgAnimatedNumber Azimuth { get; }
    public ISvgAnimatedNumber Elevation { get; }
    public SvgFEDistantLightElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public sealed virtual ISvgAnimatedNumber get_Azimuth();
    public sealed virtual ISvgAnimatedNumber get_Elevation();
}
public class SharpVectors.Dom.Svg.SvgFEFloodElement : SvgFilterPrimitiveStandardAttributes {
    private ISvgAnimatedString _in1;
    public ISvgAnimatedString In { get; }
    public ISvgAnimatedString In1 { get; }
    public SvgFEFloodElement(string prefix, string localname, string ns, SvgDocument doc);
    public ISvgAnimatedString get_In();
    public sealed virtual ISvgAnimatedString get_In1();
}
public class SharpVectors.Dom.Svg.SvgFEFuncAElement : SvgComponentTransferFunctionElement {
    public SvgFEFuncAElement(string prefix, string localname, string ns, SvgDocument doc);
}
public class SharpVectors.Dom.Svg.SvgFEFuncBElement : SvgComponentTransferFunctionElement {
    public SvgFEFuncBElement(string prefix, string localname, string ns, SvgDocument doc);
}
public class SharpVectors.Dom.Svg.SvgFEFuncGElement : SvgComponentTransferFunctionElement {
    public SvgFEFuncGElement(string prefix, string localname, string ns, SvgDocument doc);
}
public class SharpVectors.Dom.Svg.SvgFEFuncRElement : SvgComponentTransferFunctionElement {
    public SvgFEFuncRElement(string prefix, string localname, string ns, SvgDocument doc);
}
public class SharpVectors.Dom.Svg.SvgFEGaussianBlurElement : SvgFilterPrimitiveStandardAttributes {
    private ISvgAnimatedString _in1;
    private ISvgAnimatedNumber _stdDeviationX;
    private ISvgAnimatedNumber _stdDeviationY;
    public ISvgAnimatedString In { get; }
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedNumber StdDeviationX { get; }
    public ISvgAnimatedNumber StdDeviationY { get; }
    public SvgFEGaussianBlurElement(string prefix, string localname, string ns, SvgDocument doc);
    public ISvgAnimatedString get_In();
    public sealed virtual ISvgAnimatedString get_In1();
    public sealed virtual ISvgAnimatedNumber get_StdDeviationX();
    public sealed virtual ISvgAnimatedNumber get_StdDeviationY();
    public sealed virtual void SetStdDeviation(float stdDeviationX, float stdDeviationY);
    private void ParseStdDeviation();
}
public class SharpVectors.Dom.Svg.SvgFEImageElement : SvgFilterPrimitiveStandardAttributes {
    private SvgUriReference _uriReference;
    private SvgExternalResourcesRequired _resourcesRequired;
    private ISvgAnimatedPreserveAspectRatio _preserveAspectRatio;
    public ISvgAnimatedString Href { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgAnimatedPreserveAspectRatio PreserveAspectRatio { get; }
    public SvgFEImageElement(string prefix, string localname, string ns, SvgDocument doc);
    public sealed virtual ISvgAnimatedString get_Href();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual ISvgAnimatedPreserveAspectRatio get_PreserveAspectRatio();
}
public class SharpVectors.Dom.Svg.SvgFEMergeElement : SvgFilterPrimitiveStandardAttributes {
    public SvgFEMergeElement(string prefix, string localname, string ns, SvgDocument doc);
}
public class SharpVectors.Dom.Svg.SvgFEMergeNodeElement : SvgElement {
    private ISvgAnimatedString _in1;
    public bool IsRenderable { get; }
    public ISvgAnimatedString In { get; }
    public ISvgAnimatedString In1 { get; }
    public SvgFEMergeNodeElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public ISvgAnimatedString get_In();
    public sealed virtual ISvgAnimatedString get_In1();
}
public class SharpVectors.Dom.Svg.SvgFEMorphologyElement : SvgFilterPrimitiveStandardAttributes {
    private ISvgAnimatedString _in1;
    private ISvgAnimatedEnumeration _operator;
    private ISvgAnimatedNumber _radiusX;
    private ISvgAnimatedNumber _radiusY;
    public ISvgAnimatedString In { get; }
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedEnumeration Operator { get; }
    public ISvgAnimatedNumber RadiusX { get; }
    public ISvgAnimatedNumber RadiusY { get; }
    public SvgFEMorphologyElement(string prefix, string localname, string ns, SvgDocument doc);
    public ISvgAnimatedString get_In();
    public sealed virtual ISvgAnimatedString get_In1();
    public sealed virtual ISvgAnimatedEnumeration get_Operator();
    public sealed virtual ISvgAnimatedNumber get_RadiusX();
    public sealed virtual ISvgAnimatedNumber get_RadiusY();
    private void ParseRadius();
}
public class SharpVectors.Dom.Svg.SvgFEOffsetElement : SvgFilterPrimitiveStandardAttributes {
    private ISvgAnimatedString _in1;
    private ISvgAnimatedNumber _dx;
    private ISvgAnimatedNumber _dy;
    public ISvgAnimatedString In { get; }
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedNumber Dx { get; }
    public ISvgAnimatedNumber Dy { get; }
    public SvgFEOffsetElement(string prefix, string localname, string ns, SvgDocument doc);
    public ISvgAnimatedString get_In();
    public sealed virtual ISvgAnimatedString get_In1();
    public sealed virtual ISvgAnimatedNumber get_Dx();
    public sealed virtual ISvgAnimatedNumber get_Dy();
}
public class SharpVectors.Dom.Svg.SvgFEPointLightElement : SvgElement {
    private ISvgAnimatedNumber _x;
    private ISvgAnimatedNumber _y;
    private ISvgAnimatedNumber _z;
    public bool IsRenderable { get; }
    public ISvgAnimatedNumber X { get; }
    public ISvgAnimatedNumber Y { get; }
    public ISvgAnimatedNumber Z { get; }
    public SvgFEPointLightElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public sealed virtual ISvgAnimatedNumber get_X();
    public sealed virtual ISvgAnimatedNumber get_Y();
    public sealed virtual ISvgAnimatedNumber get_Z();
}
public class SharpVectors.Dom.Svg.SvgFESpecularLightingElement : SvgFilterPrimitiveStandardAttributes {
    private ISvgAnimatedString _in1;
    private ISvgAnimatedNumber _specularConstant;
    private ISvgAnimatedNumber _specularExponent;
    private ISvgAnimatedNumber _surfaceScale;
    private ISvgAnimatedNumber _kernelUnitLengthX;
    private ISvgAnimatedNumber _kernelUnitLengthY;
    public ISvgAnimatedString In { get; }
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedNumber SurfaceScale { get; }
    public ISvgAnimatedNumber SpecularConstant { get; }
    public ISvgAnimatedNumber SpecularExponent { get; }
    public ISvgAnimatedNumber KernelUnitLengthX { get; }
    public ISvgAnimatedNumber KernelUnitLengthY { get; }
    public SvgFESpecularLightingElement(string prefix, string localname, string ns, SvgDocument doc);
    public ISvgAnimatedString get_In();
    public sealed virtual ISvgAnimatedString get_In1();
    public sealed virtual ISvgAnimatedNumber get_SurfaceScale();
    public sealed virtual ISvgAnimatedNumber get_SpecularConstant();
    public sealed virtual ISvgAnimatedNumber get_SpecularExponent();
    public sealed virtual ISvgAnimatedNumber get_KernelUnitLengthX();
    public sealed virtual ISvgAnimatedNumber get_KernelUnitLengthY();
    private void ParseKernelUnitLength();
}
public class SharpVectors.Dom.Svg.SvgFESpotLightElement : SvgElement {
    private ISvgAnimatedNumber _x;
    private ISvgAnimatedNumber _y;
    private ISvgAnimatedNumber _z;
    private ISvgAnimatedNumber _pointsAtX;
    private ISvgAnimatedNumber _pointsAtY;
    private ISvgAnimatedNumber _pointsAtZ;
    private ISvgAnimatedNumber _limitingConeAngle;
    private ISvgAnimatedNumber _specularExponent;
    public bool IsRenderable { get; }
    public ISvgAnimatedNumber X { get; }
    public ISvgAnimatedNumber Y { get; }
    public ISvgAnimatedNumber Z { get; }
    public ISvgAnimatedNumber PointsAtX { get; }
    public ISvgAnimatedNumber PointsAtY { get; }
    public ISvgAnimatedNumber PointsAtZ { get; }
    public ISvgAnimatedNumber SpecularExponent { get; }
    public ISvgAnimatedNumber LimitingConeAngle { get; }
    public SvgFESpotLightElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public sealed virtual ISvgAnimatedNumber get_X();
    public sealed virtual ISvgAnimatedNumber get_Y();
    public sealed virtual ISvgAnimatedNumber get_Z();
    public sealed virtual ISvgAnimatedNumber get_PointsAtX();
    public sealed virtual ISvgAnimatedNumber get_PointsAtY();
    public sealed virtual ISvgAnimatedNumber get_PointsAtZ();
    public sealed virtual ISvgAnimatedNumber get_SpecularExponent();
    public sealed virtual ISvgAnimatedNumber get_LimitingConeAngle();
}
public class SharpVectors.Dom.Svg.SvgFETileElement : SvgFilterPrimitiveStandardAttributes {
    private ISvgAnimatedString _in1;
    public ISvgAnimatedString In { get; }
    public ISvgAnimatedString In1 { get; }
    public SvgFETileElement(string prefix, string localname, string ns, SvgDocument doc);
    public ISvgAnimatedString get_In();
    public sealed virtual ISvgAnimatedString get_In1();
}
public class SharpVectors.Dom.Svg.SvgFETurbulenceElement : SvgFilterPrimitiveStandardAttributes {
    private ISvgAnimatedNumber _baseFrequencyX;
    private ISvgAnimatedNumber _baseFrequencyY;
    private ISvgAnimatedInteger _numOctaves;
    private ISvgAnimatedNumber _seed;
    private ISvgAnimatedEnumeration _stitchTiles;
    private ISvgAnimatedEnumeration _type;
    public ISvgAnimatedNumber BaseFrequencyX { get; }
    public ISvgAnimatedNumber BaseFrequencyY { get; }
    public ISvgAnimatedInteger NumOctaves { get; }
    public ISvgAnimatedNumber Seed { get; }
    public ISvgAnimatedEnumeration StitchTiles { get; }
    public ISvgAnimatedEnumeration Type { get; }
    public SvgFETurbulenceElement(string prefix, string localname, string ns, SvgDocument doc);
    public sealed virtual ISvgAnimatedNumber get_BaseFrequencyX();
    public sealed virtual ISvgAnimatedNumber get_BaseFrequencyY();
    public sealed virtual ISvgAnimatedInteger get_NumOctaves();
    public sealed virtual ISvgAnimatedNumber get_Seed();
    public sealed virtual ISvgAnimatedEnumeration get_StitchTiles();
    public sealed virtual ISvgAnimatedEnumeration get_Type();
    private void ParseBaseFrequency();
}
public class SharpVectors.Dom.Svg.SvgFilterElement : SvgStyleableElement {
    public static string SourceGraphic;
    public static string SourceAlpha;
    public static string BackgroundImage;
    public static string BackgroundAlpha;
    public static string FillPaint;
    public static string StrokePaint;
    private static Regex _reSeparators;
    private ISvgAnimatedLength _x;
    private ISvgAnimatedLength _y;
    private ISvgAnimatedLength _width;
    private ISvgAnimatedLength _height;
    private ISvgAnimatedEnumeration _filterUnits;
    private ISvgAnimatedEnumeration _primitiveUnits;
    private ISvgAnimatedInteger _filterResX;
    private ISvgAnimatedInteger _filterResY;
    private SvgUriReference _uriReference;
    private SvgExternalResourcesRequired _resourcesRequired;
    public bool IsRenderable { get; }
    public ISvgAnimatedEnumeration FilterUnits { get; }
    public ISvgAnimatedEnumeration PrimitiveUnits { get; }
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    public ISvgAnimatedLength Width { get; }
    public ISvgAnimatedLength Height { get; }
    public ISvgAnimatedInteger FilterResX { get; }
    public ISvgAnimatedInteger FilterResY { get; }
    public ISvgAnimatedString Href { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public SvgFilterElement(string prefix, string localname, string ns, SvgDocument doc);
    private static SvgFilterElement();
    public virtual bool get_IsRenderable();
    public sealed virtual ISvgAnimatedEnumeration get_FilterUnits();
    public sealed virtual ISvgAnimatedEnumeration get_PrimitiveUnits();
    public sealed virtual ISvgAnimatedLength get_X();
    public sealed virtual ISvgAnimatedLength get_Y();
    public sealed virtual ISvgAnimatedLength get_Width();
    public sealed virtual ISvgAnimatedLength get_Height();
    public sealed virtual ISvgAnimatedInteger get_FilterResX();
    public sealed virtual ISvgAnimatedInteger get_FilterResY();
    public sealed virtual void SetFilterRes(ulong filterResX, ulong filterResY);
    public sealed virtual ISvgAnimatedString get_Href();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    private void ParseFilterRes();
}
public abstract class SharpVectors.Dom.Svg.SvgFilterPrimitiveStandardAttributes : SvgStyleableElement {
    protected static Regex _reSeparators;
    protected ISvgAnimatedLength _x;
    protected ISvgAnimatedLength _y;
    protected ISvgAnimatedLength _width;
    protected ISvgAnimatedLength _height;
    protected ISvgAnimatedString _result;
    public bool IsRenderable { get; }
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    public ISvgAnimatedLength Width { get; }
    public ISvgAnimatedLength Height { get; }
    public ISvgAnimatedString Result { get; }
    protected SvgFilterPrimitiveStandardAttributes(string prefix, string localname, string ns, SvgDocument doc);
    private static SvgFilterPrimitiveStandardAttributes();
    public virtual bool get_IsRenderable();
    public sealed virtual ISvgAnimatedLength get_X();
    public sealed virtual ISvgAnimatedLength get_Y();
    public sealed virtual ISvgAnimatedLength get_Width();
    public sealed virtual ISvgAnimatedLength get_Height();
    public sealed virtual ISvgAnimatedString get_Result();
}
public class SharpVectors.Dom.Svg.SvgFitToViewBox : object {
    private ISvgAnimatedRect _viewBox;
    private ISvgAnimatedPreserveAspectRatio _preserveAspectRatio;
    protected SvgElement _ownerElement;
    public ISvgAnimatedRect ViewBox { get; }
    public ISvgAnimatedPreserveAspectRatio PreserveAspectRatio { get; }
    public SvgFitToViewBox(SvgElement ownerElement);
    public sealed virtual ISvgAnimatedRect get_ViewBox();
    public sealed virtual ISvgAnimatedPreserveAspectRatio get_PreserveAspectRatio();
    private void OnAttributeChange(object src, XmlNodeChangedEventArgs args);
}
public class SharpVectors.Dom.Svg.SvgFontElement : SvgStyleableElement {
    private string _fontFamily;
    private SvgTests _svgTests;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    public bool IsRenderable { get; }
    public string FontFamily { get; }
    public SvgFontFaceElement FontFace { get; }
    public SvgMissingGlyphElement MissingGlyph { get; }
    public IList`1<SvgGlyphElement> Glyphs { get; }
    public IList`1<SvgKernElement> Kerning { get; }
    public float HorizAdvX { get; public set; }
    public float HorizOriginX { get; public set; }
    public float HorizOriginY { get; public set; }
    public float VertAdvY { get; public set; }
    public float VertOriginX { get; public set; }
    public float VertOriginY { get; public set; }
    public string UnicodeRange { get; public set; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public SvgFontElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public string get_FontFamily();
    public SvgFontFaceElement get_FontFace();
    public SvgMissingGlyphElement get_MissingGlyph();
    public IList`1<SvgGlyphElement> get_Glyphs();
    public IList`1<SvgKernElement> get_Kerning();
    public float get_HorizAdvX();
    public void set_HorizAdvX(float value);
    public float get_HorizOriginX();
    public void set_HorizOriginX(float value);
    public float get_HorizOriginY();
    public void set_HorizOriginY(float value);
    public float get_VertAdvY();
    public void set_VertAdvY(float value);
    public float get_VertOriginX();
    public void set_VertOriginX(float value);
    public float get_VertOriginY();
    public void set_VertOriginY(float value);
    public string get_UnicodeRange();
    public void set_UnicodeRange(string value);
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public ISvgStringList get_RequiredFeatures();
    public ISvgStringList get_RequiredExtensions();
    public ISvgStringList get_SystemLanguage();
    public bool HasExtension(string extension);
}
public class SharpVectors.Dom.Svg.SvgFontFaceElement : SvgElement {
    public bool IsRenderable { get; }
    public float Alphabetic { get; public set; }
    public float Ascent { get; public set; }
    public float AscentHeight { get; public set; }
    public float Descent { get; public set; }
    public string FontFamily { get; public set; }
    public string FontSize { get; public set; }
    public string FontStyle { get; public set; }
    public string FontVariant { get; public set; }
    public string FontWeight { get; public set; }
    public string FontStretch { get; public set; }
    public string Panose1 { get; public set; }
    public string UnicodeRange { get; public set; }
    public float UnitsPerEm { get; public set; }
    public float XHeight { get; public set; }
    public float CapHeight { get; public set; }
    public float StrikethroughPosition { get; public set; }
    public float StrikethroughThickness { get; public set; }
    public float UnderlinePosition { get; public set; }
    public float UnderlineThickness { get; public set; }
    public float OverlinePosition { get; public set; }
    public float OverlineThickness { get; public set; }
    public SvgFontFaceElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public float get_Alphabetic();
    public void set_Alphabetic(float value);
    public float get_Ascent();
    public void set_Ascent(float value);
    public float get_AscentHeight();
    public void set_AscentHeight(float value);
    public float get_Descent();
    public void set_Descent(float value);
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public string get_FontSize();
    public void set_FontSize(string value);
    public string get_FontStyle();
    public void set_FontStyle(string value);
    public string get_FontVariant();
    public void set_FontVariant(string value);
    public string get_FontWeight();
    public void set_FontWeight(string value);
    public string get_FontStretch();
    public void set_FontStretch(string value);
    public string get_Panose1();
    public void set_Panose1(string value);
    public string get_UnicodeRange();
    public void set_UnicodeRange(string value);
    public float get_UnitsPerEm();
    public void set_UnitsPerEm(float value);
    public float get_XHeight();
    public void set_XHeight(float value);
    public float get_CapHeight();
    public void set_CapHeight(float value);
    public float get_StrikethroughPosition();
    public void set_StrikethroughPosition(float value);
    public float get_StrikethroughThickness();
    public void set_StrikethroughThickness(float value);
    public float get_UnderlinePosition();
    public void set_UnderlinePosition(float value);
    public float get_UnderlineThickness();
    public void set_UnderlineThickness(float value);
    public float get_OverlinePosition();
    public void set_OverlinePosition(float value);
    public float get_OverlineThickness();
    public void set_OverlineThickness(float value);
}
public class SharpVectors.Dom.Svg.SvgFontFaceFormatElement : SvgElement {
    public bool IsRenderable { get; }
    public string String { get; public set; }
    public SvgFontFaceFormatElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public string get_String();
    public void set_String(string value);
}
public class SharpVectors.Dom.Svg.SvgFontFaceNameElement : SvgElement {
    public bool IsRenderable { get; }
    public string FaceName { get; public set; }
    public SvgFontFaceNameElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public sealed virtual string get_FaceName();
    public sealed virtual void set_FaceName(string value);
}
public class SharpVectors.Dom.Svg.SvgFontFaceSrcElement : SvgElement {
    public bool IsRenderable { get; }
    public SvgFontFaceSrcElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
}
public class SharpVectors.Dom.Svg.SvgFontFaceUriElement : SvgElement {
    public bool IsRenderable { get; }
    public SvgFontFaceUriElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
}
public class SharpVectors.Dom.Svg.SvgFontFamily : object {
    private bool _isDisposable;
    private bool _isLoaded;
    private object _tag;
    private string _name;
    private string _sourceUri;
    private string _fontUri;
    public object Tag { get; public set; }
    public string Name { get; public set; }
    public bool IsLoaded { get; public set; }
    public string SourceUri { get; }
    public string FontUri { get; }
    public bool IsDisposable { get; public set; }
    public SvgFontFamily(bool isDisposable);
    public SvgFontFamily(bool isDisposable, string fontUri);
    public SvgFontFamily(bool isDisposable, string fontUri, string sourceUri);
    public object get_Tag();
    public void set_Tag(object value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_IsLoaded();
    public void set_IsLoaded(bool value);
    public string get_SourceUri();
    public string get_FontUri();
    public bool get_IsDisposable();
    public void set_IsDisposable(bool value);
}
public class SharpVectors.Dom.Svg.SvgGElement : SvgTransformableElement {
    private SvgTests _svgTests;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    public SvgRenderingHint RenderingHint { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public SvgGElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual void Accept(ISvgElementVisitor visitor);
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
}
public class SharpVectors.Dom.Svg.SvgGlyphElement : SvgStyleableElement {
    private object _tag;
    private SvgPathSegList _pathSegList;
    public bool IsRenderable { get; }
    public object Tag { get; public set; }
    public SvgPathSegList PathData { get; }
    public string D { get; public set; }
    public string GlyphName { get; public set; }
    public float HorizAdvX { get; public set; }
    public string Unicode { get; public set; }
    public float VertAdvY { get; public set; }
    public float VertOriginX { get; public set; }
    public float VertOriginY { get; public set; }
    public string ArabicForm { get; public set; }
    public string Lang { get; public set; }
    public string Orientation { get; public set; }
    public SvgGlyphElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public object get_Tag();
    public void set_Tag(object value);
    public SvgPathSegList get_PathData();
    public string get_D();
    public void set_D(string value);
    public string get_GlyphName();
    public void set_GlyphName(string value);
    public float get_HorizAdvX();
    public void set_HorizAdvX(float value);
    public string get_Unicode();
    public void set_Unicode(string value);
    public float get_VertAdvY();
    public void set_VertAdvY(float value);
    public float get_VertOriginX();
    public void set_VertOriginX(float value);
    public float get_VertOriginY();
    public void set_VertOriginY(float value);
    public string get_ArabicForm();
    public void set_ArabicForm(string value);
    public string get_Lang();
    public void set_Lang(string value);
    public string get_Orientation();
    public void set_Orientation(string value);
}
public class SharpVectors.Dom.Svg.SvgGlyphRefElement : SvgStyleableElement {
    private SvgUriReference _uriReference;
    public bool IsRenderable { get; }
    public string GlyphRef { get; public set; }
    public string Format { get; public set; }
    public float X { get; public set; }
    public float Y { get; public set; }
    public float Dx { get; public set; }
    public float Dy { get; public set; }
    public ISvgAnimatedString Href { get; }
    public XmlElement ReferencedElement { get; }
    public SvgGlyphRefElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public sealed virtual string get_GlyphRef();
    public sealed virtual void set_GlyphRef(string value);
    public sealed virtual string get_Format();
    public sealed virtual void set_Format(string value);
    public sealed virtual float get_X();
    public sealed virtual void set_X(float value);
    public sealed virtual float get_Y();
    public sealed virtual void set_Y(float value);
    public sealed virtual float get_Dx();
    public sealed virtual void set_Dx(float value);
    public sealed virtual float get_Dy();
    public sealed virtual void set_Dy(float value);
    public sealed virtual ISvgAnimatedString get_Href();
    public XmlElement get_ReferencedElement();
}
public abstract class SharpVectors.Dom.Svg.SvgGradientElement : SvgStyleableElement {
    private ISvgAnimatedEnumeration _gradientUnits;
    private ISvgAnimatedEnumeration _spreadMethod;
    private ISvgAnimatedTransformList _gradientTransform;
    private SvgUriReference _uriReference;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    public bool IsRenderable { get; }
    public ISvgAnimatedEnumeration GradientUnits { get; }
    public ISvgAnimatedTransformList GradientTransform { get; }
    public ISvgAnimatedEnumeration SpreadMethod { get; }
    public ISvgAnimatedString Href { get; }
    public SvgGradientElement ReferencedElement { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public XmlNodeList Stops { get; }
    protected SvgGradientElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public sealed virtual ISvgAnimatedEnumeration get_GradientUnits();
    public sealed virtual ISvgAnimatedTransformList get_GradientTransform();
    public sealed virtual ISvgAnimatedEnumeration get_SpreadMethod();
    public sealed virtual ISvgAnimatedString get_Href();
    public SvgGradientElement get_ReferencedElement();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public XmlNodeList get_Stops();
    public virtual void HandleAttributeChange(XmlAttribute attribute);
}
public class SharpVectors.Dom.Svg.SvgHKernElement : SvgKernElement {
    public bool IsRenderable { get; }
    public bool IsHorizontal { get; }
    public SvgHKernElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public virtual bool get_IsHorizontal();
}
public class SharpVectors.Dom.Svg.SvgImageElement : SvgTransformableElement {
    private ISvgAnimatedLength _x;
    private ISvgAnimatedLength _y;
    private ISvgAnimatedLength _width;
    private ISvgAnimatedLength _height;
    private SvgTests _svgTests;
    private SvgUriReference _uriReference;
    private SvgFitToViewBox _fitToViewBox;
    private SvgExternalResourcesRequired _resourcesRequired;
    public bool IsSvgImage { get; }
    public SvgWindow SvgWindow { get; }
    public SvgRenderingHint RenderingHint { get; }
    public ISvgAnimatedLength Width { get; }
    public ISvgAnimatedLength Height { get; }
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    public ISvgColorProfileElement ColorProfile { get; }
    public ISvgAnimatedString Href { get; }
    public SvgUriReference UriReference { get; }
    public XmlElement ReferencedElement { get; }
    public ISvgAnimatedPreserveAspectRatio PreserveAspectRatio { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public SvgImageElement(string prefix, string localname, string ns, SvgDocument doc);
    public bool get_IsSvgImage();
    public SvgWindow get_SvgWindow();
    public bool IsRootReferenced(string baseUri);
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual ISvgAnimatedLength get_Width();
    public sealed virtual ISvgAnimatedLength get_Height();
    public sealed virtual ISvgAnimatedLength get_X();
    public sealed virtual ISvgAnimatedLength get_Y();
    public sealed virtual ISvgColorProfileElement get_ColorProfile();
    public ISvgAnimatedString get_Href();
    public SvgUriReference get_UriReference();
    public XmlElement get_ReferencedElement();
    public sealed virtual ISvgAnimatedPreserveAspectRatio get_PreserveAspectRatio();
    public SvgDocument GetImageDocument();
    public sealed virtual void Accept(ISvgElementVisitor visitor);
    public virtual void HandleAttributeChange(XmlAttribute attribute);
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
}
public abstract class SharpVectors.Dom.Svg.SvgKernElement : SvgElement {
    public bool IsRenderable { get; }
    public bool IsHorizontal { get; }
    public string Glyph1 { get; public set; }
    public string Glyph2 { get; public set; }
    public string Unicode1 { get; public set; }
    public string Unicode2 { get; public set; }
    public float Kerning { get; public set; }
    protected SvgKernElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public abstract virtual bool get_IsHorizontal();
    public string get_Glyph1();
    public void set_Glyph1(string value);
    public string get_Glyph2();
    public void set_Glyph2(string value);
    public string get_Unicode1();
    public void set_Unicode1(string value);
    public string get_Unicode2();
    public void set_Unicode2(string value);
    public float get_Kerning();
    public void set_Kerning(float value);
}
public class SharpVectors.Dom.Svg.SvgLength : object {
    private static Regex ReUnit;
    private string _defaultValue;
    private string _propertyName;
    private SvgLengthSource _source;
    private SvgElement _ownerElement;
    private SvgLengthDirection _direction;
    private CssAbsPrimitiveLengthValue _cssLength;
    public string PropertyName { get; }
    public SvgLengthType UnitType { get; }
    public double Value { get; public set; }
    public double ValueInSpecifiedUnits { get; public set; }
    public string ValueAsString { get; public set; }
    public SvgLength(SvgElement ownerElement, string propertyName, SvgLengthSource source, SvgLengthDirection direction, string defaultValue);
    public SvgLength(SvgElement ownerElement, string propertyName, SvgLengthDirection direction, string baseVal);
    public SvgLength(SvgElement ownerElement, string propertyName, SvgLengthDirection direction, string baseVal, string defaultValue);
    public SvgLength(string propertyName, string baseVal, SvgElement ownerElement, SvgLengthDirection direction);
    public SvgLength(string propertyName, string baseVal, string defaultValue, SvgElement ownerElement, SvgLengthDirection direction);
    public SvgLength(string propertyName, SvgStyleableElement ownerElement, SvgLengthDirection direction, string defaultValue);
    private static SvgLength();
    public string get_PropertyName();
    public sealed virtual SvgLengthType get_UnitType();
    public sealed virtual double get_Value();
    public sealed virtual void set_Value(double value);
    public sealed virtual double get_ValueInSpecifiedUnits();
    public sealed virtual void set_ValueInSpecifiedUnits(double value);
    public sealed virtual string get_ValueAsString();
    public sealed virtual void set_ValueAsString(string value);
    public sealed virtual void NewValueSpecifiedUnits(SvgLengthType unitType, double valueInSpecifiedUnits);
    public sealed virtual void ConvertToSpecifiedUnits(SvgLengthType unitType);
    private void GetCssXmlValue();
}
public enum SharpVectors.Dom.Svg.SvgLengthAdjust : Enum {
    public int value__;
    public static SvgLengthAdjust Unknown;
    public static SvgLengthAdjust Spacing;
    public static SvgLengthAdjust SpacingAndGlyphs;
}
public enum SharpVectors.Dom.Svg.SvgLengthDirection : Enum {
    public int value__;
    public static SvgLengthDirection Vertical;
    public static SvgLengthDirection Horizontal;
    public static SvgLengthDirection Viewport;
}
public class SharpVectors.Dom.Svg.SvgLengthList : SvgList`1<ISvgLength> {
    private static Regex _reDelim;
    private string _propertyName;
    private SvgElement _ownerElement;
    private SvgLengthDirection _direction;
    public SvgLengthList(string listString);
    public SvgLengthList(string propertyName, string listString, SvgElement ownerElement, SvgLengthDirection direction);
    private static SvgLengthList();
    public sealed virtual void FromString(string listString);
}
public enum SharpVectors.Dom.Svg.SvgLengthSource : Enum {
    public int value__;
    public static SvgLengthSource Css;
    public static SvgLengthSource Xml;
    public static SvgLengthSource String;
}
public class SharpVectors.Dom.Svg.SvgLinearGradientElement : SvgGradientElement {
    private ISvgAnimatedLength _x1;
    private ISvgAnimatedLength _y1;
    private ISvgAnimatedLength _x2;
    private ISvgAnimatedLength _y2;
    public bool IsRenderable { get; }
    public ISvgAnimatedLength X1 { get; }
    public ISvgAnimatedLength Y1 { get; }
    public ISvgAnimatedLength X2 { get; }
    public ISvgAnimatedLength Y2 { get; }
    public SvgLinearGradientElement ReferencedElement { get; }
    public SvgLinearGradientElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public sealed virtual ISvgAnimatedLength get_X1();
    public sealed virtual ISvgAnimatedLength get_Y1();
    public sealed virtual ISvgAnimatedLength get_X2();
    public sealed virtual ISvgAnimatedLength get_Y2();
    public SvgLinearGradientElement get_ReferencedElement();
}
public class SharpVectors.Dom.Svg.SvgLineElement : SvgTransformableElement {
    private ISvgAnimatedLength _x1;
    private ISvgAnimatedLength _y1;
    private ISvgAnimatedLength _x2;
    private ISvgAnimatedLength _y2;
    private SvgTests _svgTests;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    public SvgRenderingHint RenderingHint { get; }
    public ISvgAnimatedLength X1 { get; }
    public ISvgAnimatedLength Y1 { get; }
    public ISvgAnimatedLength X2 { get; }
    public ISvgAnimatedLength Y2 { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public SvgPointF[] MarkerPositions { get; }
    public bool IsClosed { get; }
    public bool MayHaveCurves { get; }
    public SvgLineElement(string prefix, string localname, string ns, SvgDocument doc);
    public void Invalidate();
    public virtual void HandleAttributeChange(XmlAttribute attribute);
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual ISvgAnimatedLength get_X1();
    public sealed virtual ISvgAnimatedLength get_Y1();
    public sealed virtual ISvgAnimatedLength get_X2();
    public sealed virtual ISvgAnimatedLength get_Y2();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual void Accept(ISvgElementVisitor visitor);
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
    public sealed virtual SvgPointF[] get_MarkerPositions();
    public sealed virtual double GetStartAngle(int index);
    public sealed virtual double GetEndAngle(int index);
    public sealed virtual ISvgMarker GetMarker(int index);
    public sealed virtual bool get_IsClosed();
    public sealed virtual bool get_MayHaveCurves();
}
[DefaultMemberAttribute("Item")]
public abstract class SharpVectors.Dom.Svg.SvgList`1 : object {
    protected List`1<T> _items;
    private IDictionary`2<T, SvgList`1<T>> _itemOwnerMap;
    public int Count { get; }
    public T Item { get; }
    public UInt32 NumberOfItems { get; }
    public sealed virtual int get_Count();
    public sealed virtual T get_Item(int index);
    public sealed virtual UInt32 get_NumberOfItems();
    public sealed virtual void Clear();
    public sealed virtual T Initialize(T newItem);
    public sealed virtual T GetItem(UInt32 index);
    public sealed virtual T InsertItemBefore(T newItem, UInt32 index);
    public sealed virtual T ReplaceItem(T newItem, UInt32 index);
    public sealed virtual T RemoveItem(UInt32 index);
    public sealed virtual T AppendItem(T newItem);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void RemoveItem(T item);
}
public class SharpVectors.Dom.Svg.SvgMarkerElement : SvgStyleableElement {
    private ISvgAnimatedLength _refY;
    private ISvgAnimatedLength _refX;
    private ISvgAnimatedEnumeration _markerUnits;
    private ISvgAnimatedLength _markerWidth;
    private ISvgAnimatedLength _markerHeight;
    private ISvgAnimatedEnumeration _orientType;
    private ISvgAnimatedAngle _orientAngle;
    private SvgFitToViewBox _fitToViewBox;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    public bool IsRenderable { get; }
    public SvgRenderingHint RenderingHint { get; }
    public ISvgAnimatedLength RefX { get; }
    public ISvgAnimatedLength RefY { get; }
    public ISvgAnimatedEnumeration MarkerUnits { get; }
    public ISvgAnimatedLength MarkerWidth { get; }
    public ISvgAnimatedLength MarkerHeight { get; }
    public ISvgAnimatedEnumeration OrientType { get; }
    public ISvgAnimatedAngle OrientAngle { get; }
    public bool IsSizeDefined { get; }
    public ISvgAnimatedRect ViewBox { get; }
    public ISvgAnimatedPreserveAspectRatio PreserveAspectRatio { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public SvgMarkerElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual void SetOrientToAuto();
    public sealed virtual void SetOrientToAngle(ISvgAngle angle);
    public sealed virtual ISvgAnimatedLength get_RefX();
    public sealed virtual ISvgAnimatedLength get_RefY();
    public sealed virtual ISvgAnimatedEnumeration get_MarkerUnits();
    public sealed virtual ISvgAnimatedLength get_MarkerWidth();
    public sealed virtual ISvgAnimatedLength get_MarkerHeight();
    public sealed virtual ISvgAnimatedEnumeration get_OrientType();
    public sealed virtual ISvgAnimatedAngle get_OrientAngle();
    public bool get_IsSizeDefined();
    public sealed virtual ISvgAnimatedRect get_ViewBox();
    public sealed virtual ISvgAnimatedPreserveAspectRatio get_PreserveAspectRatio();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
}
public enum SharpVectors.Dom.Svg.SvgMarkerPosition : Enum {
    public int value__;
    public static SvgMarkerPosition Start;
    public static SvgMarkerPosition Mid;
    public static SvgMarkerPosition End;
}
public class SharpVectors.Dom.Svg.SvgMaskElement : SvgStyleableElement {
    private ISvgAnimatedLength _x;
    private ISvgAnimatedLength _y;
    private ISvgAnimatedLength _width;
    private ISvgAnimatedLength _height;
    private ISvgAnimatedEnumeration _maskUnits;
    private ISvgAnimatedEnumeration _maskContentUnits;
    private SvgTests _svgTests;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    public bool IsRenderable { get; }
    public SvgRenderingHint RenderingHint { get; }
    public ISvgAnimatedEnumeration MaskUnits { get; }
    public ISvgAnimatedEnumeration MaskContentUnits { get; }
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    public ISvgAnimatedLength Width { get; }
    public ISvgAnimatedLength Height { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public SvgMaskElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual ISvgAnimatedEnumeration get_MaskUnits();
    public sealed virtual ISvgAnimatedEnumeration get_MaskContentUnits();
    public sealed virtual ISvgAnimatedLength get_X();
    public sealed virtual ISvgAnimatedLength get_Y();
    public sealed virtual ISvgAnimatedLength get_Width();
    public sealed virtual ISvgAnimatedLength get_Height();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
}
public class SharpVectors.Dom.Svg.SvgMatrix : object {
    public static SvgMatrix Identity;
    private double _a;
    private double _b;
    private double _c;
    private double _d;
    private double _e;
    private double _f;
    private bool _isIdentity;
    public bool IsIdentity { get; }
    public double A { get; public set; }
    public double B { get; public set; }
    public double C { get; public set; }
    public double D { get; public set; }
    public double E { get; public set; }
    public double F { get; public set; }
    public SvgMatrix(double a, double b, double c, double d, double e, double f);
    private static SvgMatrix();
    public sealed virtual bool get_IsIdentity();
    public sealed virtual double get_A();
    public sealed virtual void set_A(double value);
    public sealed virtual double get_B();
    public sealed virtual void set_B(double value);
    public sealed virtual double get_C();
    public sealed virtual void set_C(double value);
    public sealed virtual double get_D();
    public sealed virtual void set_D(double value);
    public sealed virtual double get_E();
    public sealed virtual void set_E(double value);
    public sealed virtual double get_F();
    public sealed virtual void set_F(double value);
    public sealed virtual ISvgMatrix Multiply(ISvgMatrix secondMatrix);
    public sealed virtual ISvgMatrix Inverse();
    public sealed virtual ISvgMatrix Translate(double x, double y);
    public sealed virtual ISvgMatrix Scale(double scaleFactor);
    public sealed virtual ISvgMatrix ScaleNonUniform(double scaleFactorX, double scaleFactorY);
    public sealed virtual ISvgMatrix Rotate(double angle);
    public sealed virtual ISvgMatrix RotateFromVector(double x, double y);
    public sealed virtual ISvgMatrix FlipX();
    public sealed virtual ISvgMatrix FlipY();
    public sealed virtual ISvgMatrix SkewX(double angle);
    public sealed virtual ISvgMatrix SkewY(double angle);
    public static SvgMatrix op_Multiply(SvgMatrix a, SvgMatrix b);
    private bool IsIdentityMatrix();
}
public class SharpVectors.Dom.Svg.SvgMetadataElement : SvgElement {
    public bool IsRenderable { get; }
    public SvgMetadataElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
}
public class SharpVectors.Dom.Svg.SvgMissingGlyphElement : SvgGlyphElement {
    public bool IsRenderable { get; }
    public SvgMissingGlyphElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
}
public class SharpVectors.Dom.Svg.SvgNumber : object {
    private static string numberPattern;
    private static Regex reNumber;
    private static Regex reUnit;
    private static Regex DoubleRegex;
    private double _value;
    public static NumberFormatInfo Format { get; }
    public double Value { get; public set; }
    public SvgNumber(float val);
    public SvgNumber(string str);
    private static SvgNumber();
    public static NumberFormatInfo get_Format();
    public static string ScientificToDec(string sc);
    public static double Parse(string str);
    public static double TryParseNumber(string str, double defNumber);
    public static Tuple`2<double, string> ParseNumberUnit(string str, double defVal);
    public static double ParseNumber(string str);
    public static double ParseDouble(string str);
    public static Double[] ParseDoubles(string str);
    public static double CalcAngleDiff(double a1, double a2);
    public static double CalcAngleBisection(double a1, double a2);
    public static bool IsValid(double value);
    public static bool IsValid(float value);
    public sealed virtual double get_Value();
    public sealed virtual void set_Value(double value);
}
public class SharpVectors.Dom.Svg.SvgNumberList : SvgList`1<ISvgNumber> {
    private static Regex _reDelim;
    public SvgNumberList(string listString);
    private static SvgNumberList();
    public sealed virtual void FromString(string listString);
}
public abstract class SharpVectors.Dom.Svg.SvgNumberParser : SvgParser {
    private static Double[] _pow10;
    private static SvgNumberParser();
    protected virtual float ParseFloat();
    public static float BuildFloat(int mant, int exp);
}
public class SharpVectors.Dom.Svg.SvgPaint : SvgColor {
    private string _uri;
    private SvgPaintType _paintType;
    private SvgPaint _fallback;
    public SvgPaint Fallback { get; }
    public string CssText { get; public set; }
    public SvgPaintType PaintType { get; }
    public string Uri { get; }
    public SvgPaint(string str);
    public SvgPaint get_Fallback();
    private void ParsePaint(string str);
    private static int CountHexDigits(string value, int start);
    private void SetPaintType(bool hasUri, bool hasRgb, bool hasIcc, bool hasNone, bool hasCurrentColor);
    public virtual string get_CssText();
    public virtual void set_CssText(string value);
    public sealed virtual SvgPaintType get_PaintType();
    public sealed virtual string get_Uri();
    public sealed virtual void SetUri(string uri);
    public sealed virtual void SetPaint(SvgPaintType paintType, string uri, string rgbColor, string iccColor);
}
public abstract class SharpVectors.Dom.Svg.SvgParser : object {
    private bool _isSuccessful;
    protected SvgTextReader _reader;
    protected int _current;
    public int Current { get; }
    public virtual int get_Current();
    public virtual string FormatMessage(string key, Object[] args);
    public virtual bool Parse(string input);
    protected abstract virtual void DoParse();
    protected virtual void ReportError(string key, Object[] args);
    protected virtual void ReportCharacterExpectedError(char expectedChar, int currentChar);
    protected virtual void ReportUnexpectedCharacterError(int currentChar);
    protected virtual string CreateErrorMessage(string key, Object[] args);
    protected virtual void SkipSpaces();
    protected virtual void SkipCommaSpaces();
}
public class SharpVectors.Dom.Svg.SvgPathElement : SvgTransformableElement {
    private SvgTests _svgTests;
    private ISvgAnimatedNumber _pathLength;
    private SvgPathSegList _pathSegList;
    public string PathScript { get; }
    public SvgRenderingHint RenderingHint { get; }
    public SvgPointF[] MarkerPositions { get; }
    public bool IsClosed { get; }
    public bool MayHaveCurves { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    private ISvgPathSegList SharpVectors.Dom.Svg.ISvgAnimatedPathData.PathSegList { get; }
    public SvgPathSegList PathSegList { get; }
    public ISvgPathSegList NormalizedPathSegList { get; }
    public ISvgPathSegList AnimatedPathSegList { get; }
    public ISvgPathSegList AnimatedNormalizedPathSegList { get; }
    public ISvgAnimatedNumber PathLength { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public SvgPathElement(string prefix, string localname, string ns, SvgDocument doc);
    public string get_PathScript();
    public void Invalidate();
    public virtual void HandleAttributeChange(XmlAttribute attribute);
    private SvgPathSegList SegmentList();
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual SvgPointF[] get_MarkerPositions();
    public sealed virtual ISvgMarker GetMarker(int index);
    public sealed virtual bool get_IsClosed();
    public sealed virtual bool get_MayHaveCurves();
    public sealed virtual double GetStartAngle(int index);
    public sealed virtual double GetEndAngle(int index);
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    private sealed virtual override ISvgPathSegList SharpVectors.Dom.Svg.ISvgAnimatedPathData.get_PathSegList();
    public SvgPathSegList get_PathSegList();
    public sealed virtual ISvgPathSegList get_NormalizedPathSegList();
    public sealed virtual ISvgPathSegList get_AnimatedPathSegList();
    public sealed virtual ISvgPathSegList get_AnimatedNormalizedPathSegList();
    public sealed virtual ISvgAnimatedNumber get_PathLength();
    public sealed virtual double GetTotalLength();
    public sealed virtual ISvgPoint GetPointAtLength(double distance);
    public sealed virtual int GetPathSegAtLength(double distance);
    public sealed virtual ISvgPathSegClosePath CreateSvgPathSegClosePath();
    public sealed virtual ISvgPathSegMovetoAbs CreateSvgPathSegMovetoAbs(double x, double y);
    public sealed virtual ISvgPathSegMovetoRel CreateSvgPathSegMovetoRel(double x, double y);
    public sealed virtual ISvgPathSegLinetoAbs CreateSvgPathSegLinetoAbs(double x, double y);
    public sealed virtual ISvgPathSegLinetoRel CreateSvgPathSegLinetoRel(double x, double y);
    public sealed virtual ISvgPathSegCurvetoCubicAbs CreateSvgPathSegCurvetoCubicAbs(double x, double y, double x1, double y1, double x2, double y2);
    public sealed virtual ISvgPathSegCurvetoCubicRel CreateSvgPathSegCurvetoCubicRel(double x, double y, double x1, double y1, double x2, double y2);
    public sealed virtual ISvgPathSegCurvetoQuadraticAbs CreateSvgPathSegCurvetoQuadraticAbs(double x, double y, double x1, double y1);
    public sealed virtual ISvgPathSegCurvetoQuadraticRel CreateSvgPathSegCurvetoQuadraticRel(double x, double y, double x1, double y1);
    public sealed virtual ISvgPathSegArcAbs CreateSvgPathSegArcAbs(double x, double y, double r1, double r2, double angle, bool largeArcFlag, bool sweepFlag);
    public sealed virtual ISvgPathSegArcRel CreateSvgPathSegArcRel(double x, double y, double r1, double r2, double angle, bool largeArcFlag, bool sweepFlag);
    public sealed virtual ISvgPathSegLinetoHorizontalAbs CreateSvgPathSegLinetoHorizontalAbs(double x);
    public sealed virtual ISvgPathSegLinetoHorizontalRel CreateSvgPathSegLinetoHorizontalRel(double x);
    public sealed virtual ISvgPathSegLinetoVerticalAbs CreateSvgPathSegLinetoVerticalAbs(double y);
    public sealed virtual ISvgPathSegLinetoVerticalRel CreateSvgPathSegLinetoVerticalRel(double y);
    public sealed virtual ISvgPathSegCurvetoCubicSmoothAbs CreateSvgPathSegCurvetoCubicSmoothAbs(double x, double y, double x2, double y2);
    public sealed virtual ISvgPathSegCurvetoCubicSmoothRel CreateSvgPathSegCurvetoCubicSmoothRel(double x, double y, double x2, double y2);
    public sealed virtual ISvgPathSegCurvetoQuadraticSmoothAbs CreateSvgPathSegCurvetoQuadraticSmoothAbs(double x, double y);
    public sealed virtual ISvgPathSegCurvetoQuadraticSmoothRel CreateSvgPathSegCurvetoQuadraticSmoothRel(double x, double y);
    public sealed virtual void Accept(ISvgElementVisitor visitor);
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
}
public class SharpVectors.Dom.Svg.SvgPathParser : SvgNumberParser {
    protected ISvgPathHandler _pathHandler;
    public ISvgPathHandler Handler { get; public set; }
    public SvgPathParser(ISvgPathHandler handler);
    public virtual ISvgPathHandler get_Handler();
    public virtual void set_Handler(ISvgPathHandler value);
    protected virtual void DoParse();
    protected internal virtual void Parsem();
    protected internal virtual void ParseM();
    protected internal virtual void Parsel();
    protected internal virtual void _parsel(bool expectNumber);
    protected internal virtual void ParseL();
    protected internal virtual void _parseL(bool expectNumber);
    protected internal virtual void Parseh();
    protected internal virtual void ParseH();
    protected internal virtual void Parsev();
    protected internal virtual void ParseV();
    protected internal virtual void Parsec();
    protected internal virtual void ParseC();
    protected internal virtual void Parseq();
    protected internal virtual void ParseQ();
    protected internal virtual void Parses();
    protected internal virtual void ParseS();
    protected internal virtual void Parset();
    protected internal virtual void ParseT();
    protected internal virtual void Parsea();
    protected internal virtual void ParseA();
    protected internal virtual void SkipSubPath();
    protected internal virtual void ReportUnexpected(int ch);
    protected internal virtual bool SkipCommaSpaces2();
}
public abstract class SharpVectors.Dom.Svg.SvgPathSeg : object {
    internal int _index;
    internal SvgPathSegList _list;
    protected SvgPathSegType _type;
    protected SvgPointF[] _limits;
    public SvgPathType PathType { get; }
    public string PathText { get; }
    public SvgPointF AbsXY { get; }
    public double StartAngle { get; }
    public double EndAngle { get; }
    public SvgPointF[] Limits { get; public set; }
    public SvgPathSeg PreviousSeg { get; }
    public SvgPathSeg NextSeg { get; }
    public int Index { get; }
    public double Length { get; }
    public bool IsCurve { get; }
    public bool IsAbsolute { get; }
    public bool IsRelative { get; }
    public SvgPathSegType PathSegType { get; }
    public string PathSegTypeAsLetter { get; }
    private ISvgPathSeg SharpVectors.Dom.Svg.ISvgPathSeg.PreviousSeg { get; }
    private ISvgPathSeg SharpVectors.Dom.Svg.ISvgPathSeg.NextSeg { get; }
    protected SvgPathSeg(SvgPathSegType type);
    public virtual SvgPathType get_PathType();
    public abstract virtual string get_PathText();
    public abstract virtual SvgPointF get_AbsXY();
    public abstract virtual double get_StartAngle();
    public abstract virtual double get_EndAngle();
    public sealed virtual SvgPointF[] get_Limits();
    public sealed virtual void set_Limits(SvgPointF[] value);
    public SvgPathSeg get_PreviousSeg();
    public SvgPathSeg get_NextSeg();
    public int get_Index();
    public virtual double get_Length();
    public sealed virtual bool get_IsCurve();
    public bool get_IsAbsolute();
    public bool get_IsRelative();
    internal void SetList(SvgPathSegList list);
    internal void SetIndex(int index);
    internal void SetIndexWithDiff(int diff);
    public sealed virtual SvgPathSegType get_PathSegType();
    public sealed virtual string get_PathSegTypeAsLetter();
    private sealed virtual override ISvgPathSeg SharpVectors.Dom.Svg.ISvgPathSeg.get_PreviousSeg();
    private sealed virtual override ISvgPathSeg SharpVectors.Dom.Svg.ISvgPathSeg.get_NextSeg();
}
public abstract class SharpVectors.Dom.Svg.SvgPathSegArc : SvgPathSeg {
    private bool _largeArcFlag;
    private bool _sweepFlag;
    private double _x;
    private double _y;
    private double _r1;
    private double _r2;
    private double _angle;
    public SvgPathType PathType { get; }
    public double X { get; public set; }
    public double Y { get; public set; }
    public double R1 { get; public set; }
    public double R2 { get; public set; }
    public double Angle { get; public set; }
    public bool LargeArcFlag { get; public set; }
    public bool SweepFlag { get; public set; }
    public SvgPointF AbsXY { get; }
    public double StartAngle { get; }
    public double EndAngle { get; }
    public string PathText { get; }
    protected SvgPathSegArc(SvgPathSegType type, double x, double y, double r1, double r2, double angle, bool largeArcFlag, bool sweepFlag);
    public virtual SvgPathType get_PathType();
    public sealed virtual double get_X();
    public sealed virtual void set_X(double value);
    public sealed virtual double get_Y();
    public sealed virtual void set_Y(double value);
    public sealed virtual double get_R1();
    public sealed virtual void set_R1(double value);
    public sealed virtual double get_R2();
    public sealed virtual void set_R2(double value);
    public sealed virtual double get_Angle();
    public sealed virtual void set_Angle(double value);
    public sealed virtual bool get_LargeArcFlag();
    public sealed virtual void set_LargeArcFlag(bool value);
    public sealed virtual bool get_SweepFlag();
    public sealed virtual void set_SweepFlag(bool value);
    public abstract virtual SvgPointF get_AbsXY();
    public virtual double get_StartAngle();
    public virtual double get_EndAngle();
    public virtual string get_PathText();
    public CalculatedArcValues GetCalculatedArcValues();
    private double GetAngle(bool addExtent);
}
public class SharpVectors.Dom.Svg.SvgPathSegArcAbs : SvgPathSegArc {
    public SvgPointF AbsXY { get; }
    public SvgPathSegArcAbs(double x, double y, double r1, double r2, double angle, bool largeArcFlag, bool sweepFlag);
    public virtual SvgPointF get_AbsXY();
}
public class SharpVectors.Dom.Svg.SvgPathSegArcRel : SvgPathSegArc {
    public SvgPointF AbsXY { get; }
    public SvgPathSegArcRel(double x, double y, double r1, double r2, double angle, bool largeArcFlag, bool sweepFlag);
    public virtual SvgPointF get_AbsXY();
}
public class SharpVectors.Dom.Svg.SvgPathSegClosePath : SvgPathSeg {
    public SvgPathType PathType { get; }
    public SvgPointF AbsXY { get; }
    public double StartAngle { get; }
    public double EndAngle { get; }
    public string PathText { get; }
    public virtual SvgPathType get_PathType();
    public virtual SvgPointF get_AbsXY();
    public virtual double get_StartAngle();
    public virtual double get_EndAngle();
    public virtual string get_PathText();
}
public abstract class SharpVectors.Dom.Svg.SvgPathSegCurveto : SvgPathSeg {
    public SvgPathType PathType { get; }
    public SvgPointF AbsXY { get; }
    public SvgPointF CubicX1Y1 { get; }
    public SvgPointF CubicX2Y2 { get; }
    public double Length { get; }
    public double StartAngle { get; }
    public double EndAngle { get; }
    protected SvgPathSegCurveto(SvgPathSegType type);
    public virtual SvgPathType get_PathType();
    public abstract virtual SvgPointF get_AbsXY();
    public abstract virtual SvgPointF get_CubicX1Y1();
    public abstract virtual SvgPointF get_CubicX2Y2();
    public virtual double get_Length();
    public virtual double get_StartAngle();
    public virtual double get_EndAngle();
    protected abstract virtual SqrtPolynomial GetArcLengthPolynomial();
}
public abstract class SharpVectors.Dom.Svg.SvgPathSegCurvetoCubic : SvgPathSegCurveto {
    public SvgPointF AbsXY { get; }
    public SvgPointF CubicX1Y1 { get; }
    public SvgPointF CubicX2Y2 { get; }
    protected SvgPathSegCurvetoCubic(SvgPathSegType type);
    public abstract virtual SvgPointF get_AbsXY();
    public abstract virtual SvgPointF get_CubicX1Y1();
    public abstract virtual SvgPointF get_CubicX2Y2();
    protected virtual SqrtPolynomial GetArcLengthPolynomial();
}
public class SharpVectors.Dom.Svg.SvgPathSegCurvetoCubicAbs : SvgPathSegCurvetoCubic {
    private double _x;
    private double _y;
    private double _x1;
    private double _y1;
    private double _x2;
    private double _y2;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double X1 { get; public set; }
    public double Y1 { get; public set; }
    public double X2 { get; public set; }
    public double Y2 { get; public set; }
    public SvgPointF AbsXY { get; }
    public SvgPointF CubicX1Y1 { get; }
    public SvgPointF CubicX2Y2 { get; }
    public string PathText { get; }
    public SvgPathSegCurvetoCubicAbs(double x, double y, double x1, double y1, double x2, double y2);
    public sealed virtual double get_X();
    public sealed virtual void set_X(double value);
    public sealed virtual double get_Y();
    public sealed virtual void set_Y(double value);
    public sealed virtual double get_X1();
    public sealed virtual void set_X1(double value);
    public sealed virtual double get_Y1();
    public sealed virtual void set_Y1(double value);
    public sealed virtual double get_X2();
    public sealed virtual void set_X2(double value);
    public sealed virtual double get_Y2();
    public sealed virtual void set_Y2(double value);
    public virtual SvgPointF get_AbsXY();
    public virtual SvgPointF get_CubicX1Y1();
    public virtual SvgPointF get_CubicX2Y2();
    public virtual string get_PathText();
}
public class SharpVectors.Dom.Svg.SvgPathSegCurvetoCubicRel : SvgPathSegCurvetoCubic {
    private double _x;
    private double _y;
    private double _x1;
    private double _y1;
    private double _x2;
    private double _y2;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double X1 { get; public set; }
    public double Y1 { get; public set; }
    public double X2 { get; public set; }
    public double Y2 { get; public set; }
    public SvgPointF AbsXY { get; }
    public SvgPointF CubicX1Y1 { get; }
    public SvgPointF CubicX2Y2 { get; }
    public string PathText { get; }
    public SvgPathSegCurvetoCubicRel(double x, double y, double x1, double y1, double x2, double y2);
    public sealed virtual double get_X();
    public sealed virtual void set_X(double value);
    public sealed virtual double get_Y();
    public sealed virtual void set_Y(double value);
    public sealed virtual double get_X1();
    public sealed virtual void set_X1(double value);
    public sealed virtual double get_Y1();
    public sealed virtual void set_Y1(double value);
    public sealed virtual double get_X2();
    public sealed virtual void set_X2(double value);
    public sealed virtual double get_Y2();
    public sealed virtual void set_Y2(double value);
    public virtual SvgPointF get_AbsXY();
    public virtual SvgPointF get_CubicX1Y1();
    public virtual SvgPointF get_CubicX2Y2();
    public virtual string get_PathText();
}
public class SharpVectors.Dom.Svg.SvgPathSegCurvetoCubicSmoothAbs : SvgPathSegCurvetoCubic {
    private double _x;
    private double _y;
    private double _x2;
    private double _y2;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double X2 { get; public set; }
    public double Y2 { get; public set; }
    public SvgPointF AbsXY { get; }
    public SvgPointF CubicX1Y1 { get; }
    public SvgPointF CubicX2Y2 { get; }
    public string PathText { get; }
    public SvgPathSegCurvetoCubicSmoothAbs(double x, double y, double x2, double y2);
    public sealed virtual double get_X();
    public sealed virtual void set_X(double value);
    public sealed virtual double get_Y();
    public sealed virtual void set_Y(double value);
    public sealed virtual double get_X2();
    public sealed virtual void set_X2(double value);
    public sealed virtual double get_Y2();
    public sealed virtual void set_Y2(double value);
    public virtual SvgPointF get_AbsXY();
    public virtual SvgPointF get_CubicX1Y1();
    public virtual SvgPointF get_CubicX2Y2();
    public virtual string get_PathText();
}
public class SharpVectors.Dom.Svg.SvgPathSegCurvetoCubicSmoothRel : SvgPathSegCurvetoCubic {
    private double _x;
    private double _y;
    private double _x2;
    private double _y2;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double X2 { get; public set; }
    public double Y2 { get; public set; }
    public SvgPointF AbsXY { get; }
    public SvgPointF CubicX1Y1 { get; }
    public SvgPointF CubicX2Y2 { get; }
    public string PathText { get; }
    public SvgPathSegCurvetoCubicSmoothRel(double x, double y, double x2, double y2);
    public sealed virtual double get_X();
    public sealed virtual void set_X(double value);
    public sealed virtual double get_Y();
    public sealed virtual void set_Y(double value);
    public sealed virtual double get_X2();
    public sealed virtual void set_X2(double value);
    public sealed virtual double get_Y2();
    public sealed virtual void set_Y2(double value);
    public virtual SvgPointF get_AbsXY();
    public virtual SvgPointF get_CubicX1Y1();
    public virtual SvgPointF get_CubicX2Y2();
    public virtual string get_PathText();
}
public abstract class SharpVectors.Dom.Svg.SvgPathSegCurvetoQuadratic : SvgPathSegCurveto {
    public SvgPointF AbsXY { get; }
    public SvgPointF CubicX1Y1 { get; }
    public SvgPointF CubicX2Y2 { get; }
    public SvgPointF QuadraticX1Y1 { get; }
    protected SvgPathSegCurvetoQuadratic(SvgPathSegType type);
    public abstract virtual SvgPointF get_AbsXY();
    public abstract virtual SvgPointF get_CubicX1Y1();
    public abstract virtual SvgPointF get_CubicX2Y2();
    public abstract virtual SvgPointF get_QuadraticX1Y1();
    protected virtual SqrtPolynomial GetArcLengthPolynomial();
}
public class SharpVectors.Dom.Svg.SvgPathSegCurvetoQuadraticAbs : SvgPathSegCurvetoQuadratic {
    private double _x;
    private double _y;
    private double _x1;
    private double _y1;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double X1 { get; public set; }
    public double Y1 { get; public set; }
    public SvgPointF AbsXY { get; }
    public SvgPointF QuadraticX1Y1 { get; }
    public SvgPointF CubicX1Y1 { get; }
    public SvgPointF CubicX2Y2 { get; }
    public string PathText { get; }
    public SvgPathSegCurvetoQuadraticAbs(double x, double y, double x1, double y1);
    public sealed virtual double get_X();
    public sealed virtual void set_X(double value);
    public sealed virtual double get_Y();
    public sealed virtual void set_Y(double value);
    public sealed virtual double get_X1();
    public sealed virtual void set_X1(double value);
    public sealed virtual double get_Y1();
    public sealed virtual void set_Y1(double value);
    public virtual SvgPointF get_AbsXY();
    public virtual SvgPointF get_QuadraticX1Y1();
    public virtual SvgPointF get_CubicX1Y1();
    public virtual SvgPointF get_CubicX2Y2();
    public virtual string get_PathText();
}
public class SharpVectors.Dom.Svg.SvgPathSegCurvetoQuadraticRel : SvgPathSegCurvetoQuadratic {
    private double _x;
    private double _y;
    private double _x1;
    private double _y1;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double X1 { get; public set; }
    public double Y1 { get; public set; }
    public SvgPointF AbsXY { get; }
    public SvgPointF QuadraticX1Y1 { get; }
    public SvgPointF CubicX1Y1 { get; }
    public SvgPointF CubicX2Y2 { get; }
    public string PathText { get; }
    public SvgPathSegCurvetoQuadraticRel(double x, double y, double x1, double y1);
    public sealed virtual double get_X();
    public sealed virtual void set_X(double value);
    public sealed virtual double get_Y();
    public sealed virtual void set_Y(double value);
    public sealed virtual double get_X1();
    public sealed virtual void set_X1(double value);
    public sealed virtual double get_Y1();
    public sealed virtual void set_Y1(double value);
    public virtual SvgPointF get_AbsXY();
    public virtual SvgPointF get_QuadraticX1Y1();
    public virtual SvgPointF get_CubicX1Y1();
    public virtual SvgPointF get_CubicX2Y2();
    public virtual string get_PathText();
}
public class SharpVectors.Dom.Svg.SvgPathSegCurvetoQuadraticSmoothAbs : SvgPathSegCurvetoQuadratic {
    private double _x;
    private double _y;
    public double X { get; public set; }
    public double Y { get; public set; }
    public SvgPointF QuadraticX1Y1 { get; }
    public SvgPointF AbsXY { get; }
    public SvgPointF CubicX1Y1 { get; }
    public SvgPointF CubicX2Y2 { get; }
    public string PathText { get; }
    public SvgPathSegCurvetoQuadraticSmoothAbs(double x, double y);
    public sealed virtual double get_X();
    public sealed virtual void set_X(double value);
    public sealed virtual double get_Y();
    public sealed virtual void set_Y(double value);
    public virtual SvgPointF get_QuadraticX1Y1();
    public virtual SvgPointF get_AbsXY();
    public virtual SvgPointF get_CubicX1Y1();
    public virtual SvgPointF get_CubicX2Y2();
    public virtual string get_PathText();
}
public class SharpVectors.Dom.Svg.SvgPathSegCurvetoQuadraticSmoothRel : SvgPathSegCurvetoQuadratic {
    private double _x;
    private double _y;
    public double X { get; public set; }
    public double Y { get; public set; }
    public SvgPointF QuadraticX1Y1 { get; }
    public SvgPointF AbsXY { get; }
    public SvgPointF CubicX1Y1 { get; }
    public SvgPointF CubicX2Y2 { get; }
    public string PathText { get; }
    public SvgPathSegCurvetoQuadraticSmoothRel(double x, double y);
    public sealed virtual double get_X();
    public sealed virtual void set_X(double value);
    public sealed virtual double get_Y();
    public sealed virtual void set_Y(double value);
    public virtual SvgPointF get_QuadraticX1Y1();
    public virtual SvgPointF get_AbsXY();
    public virtual SvgPointF get_CubicX1Y1();
    public virtual SvgPointF get_CubicX2Y2();
    public virtual string get_PathText();
}
public class SharpVectors.Dom.Svg.SvgPathSegHandler : object {
    private bool _isClosed;
    private bool _mayHaveCurves;
    private int _closedPath;
    private SvgPointF _startPoint;
    private SvgPathSegList _pathList;
    public bool IsClosed { get; }
    public bool MayHaveCurves { get; }
    public SvgPathSegHandler(SvgPathSegList pathList);
    public bool get_IsClosed();
    public bool get_MayHaveCurves();
    public sealed virtual void StartPath();
    public sealed virtual void EndPath();
    public sealed virtual void MovetoAbs(float x, float y);
    public sealed virtual void MovetoRel(float x, float y);
    public sealed virtual void ClosePath();
    public sealed virtual void LinetoAbs(float x, float y);
    public sealed virtual void LinetoRel(float x, float y);
    public sealed virtual void LinetoHorizontalAbs(float x);
    public sealed virtual void LinetoHorizontalRel(float x);
    public sealed virtual void LinetoVerticalAbs(float y);
    public sealed virtual void LinetoVerticalRel(float y);
    public sealed virtual void CurvetoCubicAbs(float x1, float y1, float x2, float y2, float x, float y);
    public sealed virtual void CurvetoCubicRel(float x1, float y1, float x2, float y2, float x, float y);
    public sealed virtual void CurvetoCubicSmoothAbs(float x2, float y2, float x, float y);
    public sealed virtual void CurvetoCubicSmoothRel(float x2, float y2, float x, float y);
    public sealed virtual void CurvetoQuadraticAbs(float x1, float y1, float x, float y);
    public sealed virtual void CurvetoQuadraticRel(float x1, float y1, float x, float y);
    public sealed virtual void CurvetoQuadraticSmoothAbs(float x, float y);
    public sealed virtual void CurvetoQuadraticSmoothRel(float x, float y);
    public sealed virtual void ArcAbs(float rx, float ry, float xAxisRotation, bool largeArcFlag, bool sweepFlag, float x, float y);
    public sealed virtual void ArcRel(float rx, float ry, float xAxisRotation, bool largeArcFlag, bool sweepFlag, float x, float y);
}
public abstract class SharpVectors.Dom.Svg.SvgPathSegLineto : SvgPathSeg {
    public SvgPathType PathType { get; }
    public SvgPointF AbsXY { get; }
    public double StartAngle { get; }
    public double EndAngle { get; }
    public double Length { get; }
    protected SvgPathSegLineto(SvgPathSegType type);
    public virtual SvgPathType get_PathType();
    public abstract virtual SvgPointF get_AbsXY();
    public virtual double get_StartAngle();
    public virtual double get_EndAngle();
    public virtual double get_Length();
    private SvgPointF GetPrevPoint();
}
public class SharpVectors.Dom.Svg.SvgPathSegLinetoAbs : SvgPathSegLineto {
    private double _x;
    private double _y;
    public double X { get; public set; }
    public double Y { get; public set; }
    public SvgPointF AbsXY { get; }
    public string PathText { get; }
    public SvgPathSegLinetoAbs(double x, double y);
    public sealed virtual double get_X();
    public sealed virtual void set_X(double value);
    public sealed virtual double get_Y();
    public sealed virtual void set_Y(double value);
    public virtual SvgPointF get_AbsXY();
    public virtual string get_PathText();
}
public class SharpVectors.Dom.Svg.SvgPathSegLinetoHorizontalAbs : SvgPathSegLineto {
    private double _x;
    public double X { get; public set; }
    public SvgPointF AbsXY { get; }
    public string PathText { get; }
    public SvgPathSegLinetoHorizontalAbs(double x);
    public sealed virtual double get_X();
    public sealed virtual void set_X(double value);
    public virtual SvgPointF get_AbsXY();
    public virtual string get_PathText();
}
public class SharpVectors.Dom.Svg.SvgPathSegLinetoHorizontalRel : SvgPathSegLineto {
    private double _x;
    public double X { get; public set; }
    public SvgPointF AbsXY { get; }
    public string PathText { get; }
    public SvgPathSegLinetoHorizontalRel(double x);
    public sealed virtual double get_X();
    public sealed virtual void set_X(double value);
    public virtual SvgPointF get_AbsXY();
    public virtual string get_PathText();
}
public class SharpVectors.Dom.Svg.SvgPathSegLinetoRel : SvgPathSegLineto {
    private double _x;
    private double _y;
    public double X { get; public set; }
    public double Y { get; public set; }
    public SvgPointF AbsXY { get; }
    public string PathText { get; }
    public SvgPathSegLinetoRel(double x, double y);
    public sealed virtual double get_X();
    public sealed virtual void set_X(double value);
    public sealed virtual double get_Y();
    public sealed virtual void set_Y(double value);
    public virtual SvgPointF get_AbsXY();
    public virtual string get_PathText();
}
public class SharpVectors.Dom.Svg.SvgPathSegLinetoVerticalAbs : SvgPathSegLineto {
    private double _y;
    public double Y { get; public set; }
    public SvgPointF AbsXY { get; }
    public string PathText { get; }
    public SvgPathSegLinetoVerticalAbs(double y);
    public sealed virtual double get_Y();
    public sealed virtual void set_Y(double value);
    public virtual SvgPointF get_AbsXY();
    public virtual string get_PathText();
}
public class SharpVectors.Dom.Svg.SvgPathSegLinetoVerticalRel : SvgPathSegLineto {
    private double _y;
    public double Y { get; public set; }
    public SvgPointF AbsXY { get; }
    public string PathText { get; }
    public SvgPathSegLinetoVerticalRel(double y);
    public sealed virtual double get_Y();
    public sealed virtual void set_Y(double value);
    public virtual SvgPointF get_AbsXY();
    public virtual string get_PathText();
}
[DefaultMemberAttribute("Item")]
public class SharpVectors.Dom.Svg.SvgPathSegList : object {
    private bool _isClosed;
    private bool _mayHaveCurves;
    private string _pathScript;
    private bool _readOnly;
    private IList`1<SvgPathSeg> _segments;
    public string PathScript { get; }
    public bool IsClosed { get; }
    public bool MayHaveCurves { get; }
    public SvgPointF[] Points { get; }
    public string PathText { get; }
    public int NumberOfItems { get; }
    public SvgPathSeg Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private ISvgPathSeg System.Collections.Generic.IList<SharpVectors.Dom.Svg.ISvgPathSeg>.Item { get; private set; }
    public SvgPathSegList(string d, bool readOnly);
    public SvgPathSegList(ISvgPathSegList pathList);
    public string get_PathScript();
    public bool get_IsClosed();
    public bool get_MayHaveCurves();
    public SvgPointF[] get_Points();
    public string get_PathText();
    public SvgPathSeg GetPreviousSegment(SvgPathSeg seg);
    public SvgPathSeg GetNextSegment(SvgPathSeg seg);
    public double GetStartAngle(int index);
    public double GetEndAngle(int index);
    public double GetTotalLength();
    public int GetPathSegAtLength(double distance);
    public virtual string ToString();
    public sealed virtual int get_NumberOfItems();
    public sealed virtual void Clear();
    public SvgPathSeg Initialize(SvgPathSeg newItem);
    public SvgPathSeg GetItem(int index);
    public SvgPathSeg get_Item(int index);
    public void set_Item(int index, SvgPathSeg value);
    public SvgPathSeg InsertItemBefore(SvgPathSeg newItem, int index);
    public ISvgPathSeg ReplaceItem(SvgPathSeg newItem, int index);
    public SvgPathSeg RemoveItem(int index);
    public SvgPathSeg AppendItem(SvgPathSeg newItem);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public void Add(SvgPathSeg item);
    public bool Contains(SvgPathSeg item);
    public void CopyTo(SvgPathSeg[] array, int arrayIndex);
    public IEnumerator`1<SvgPathSeg> GetEnumerator();
    public int IndexOf(SvgPathSeg item);
    public void Insert(int index, SvgPathSeg item);
    public bool Remove(SvgPathSeg item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override ISvgPathSeg System.Collections.Generic.IList<SharpVectors.Dom.Svg.ISvgPathSeg>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<SharpVectors.Dom.Svg.ISvgPathSeg>.set_Item(int index, ISvgPathSeg value);
    private sealed virtual override ISvgPathSeg SharpVectors.Dom.Svg.ISvgPathSegList.Initialize(ISvgPathSeg newItem);
    private sealed virtual override ISvgPathSeg SharpVectors.Dom.Svg.ISvgPathSegList.GetItem(int index);
    private sealed virtual override ISvgPathSeg SharpVectors.Dom.Svg.ISvgPathSegList.InsertItemBefore(ISvgPathSeg newItem, int index);
    private sealed virtual override ISvgPathSeg SharpVectors.Dom.Svg.ISvgPathSegList.RemoveItem(int index);
    private sealed virtual override ISvgPathSeg SharpVectors.Dom.Svg.ISvgPathSegList.ReplaceItem(ISvgPathSeg newItem, int index);
    private sealed virtual override ISvgPathSeg SharpVectors.Dom.Svg.ISvgPathSegList.AppendItem(ISvgPathSeg newItem);
    private sealed virtual override int System.Collections.Generic.IList<SharpVectors.Dom.Svg.ISvgPathSeg>.IndexOf(ISvgPathSeg item);
    private sealed virtual override void System.Collections.Generic.IList<SharpVectors.Dom.Svg.ISvgPathSeg>.Insert(int index, ISvgPathSeg item);
    private sealed virtual override void System.Collections.Generic.ICollection<SharpVectors.Dom.Svg.ISvgPathSeg>.Add(ISvgPathSeg item);
    private sealed virtual override bool System.Collections.Generic.ICollection<SharpVectors.Dom.Svg.ISvgPathSeg>.Contains(ISvgPathSeg item);
    private sealed virtual override void System.Collections.Generic.ICollection<SharpVectors.Dom.Svg.ISvgPathSeg>.CopyTo(ISvgPathSeg[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<SharpVectors.Dom.Svg.ISvgPathSeg>.Remove(ISvgPathSeg item);
    private sealed virtual override IEnumerator`1<ISvgPathSeg> System.Collections.Generic.IEnumerable<SharpVectors.Dom.Svg.ISvgPathSeg>.GetEnumerator();
    private void SetListAndIndex(SvgPathSeg newItem, int index);
    private void ChangeIndexes(int startAt, int diff);
}
public abstract class SharpVectors.Dom.Svg.SvgPathSegMoveto : SvgPathSeg {
    protected double _x;
    protected double _y;
    public SvgPathType PathType { get; }
    public SvgPointF AbsXY { get; }
    public double StartAngle { get; }
    public double EndAngle { get; }
    public double X { get; public set; }
    public double Y { get; public set; }
    public string PathText { get; }
    protected SvgPathSegMoveto(SvgPathSegType type, double x, double y);
    public virtual SvgPathType get_PathType();
    public abstract virtual SvgPointF get_AbsXY();
    public virtual double get_StartAngle();
    public virtual double get_EndAngle();
    public sealed virtual double get_X();
    public sealed virtual void set_X(double value);
    public sealed virtual double get_Y();
    public sealed virtual void set_Y(double value);
    public virtual string get_PathText();
}
public class SharpVectors.Dom.Svg.SvgPathSegMovetoAbs : SvgPathSegMoveto {
    public SvgPointF AbsXY { get; }
    public SvgPathSegMovetoAbs(double x, double y);
    public virtual SvgPointF get_AbsXY();
}
public class SharpVectors.Dom.Svg.SvgPathSegMovetoRel : SvgPathSegMoveto {
    public SvgPointF AbsXY { get; }
    public SvgPathSegMovetoRel(double x, double y);
    public virtual SvgPointF get_AbsXY();
}
public class SharpVectors.Dom.Svg.SvgPathSegParser : object {
    private static Regex RegexPathCmd;
    private bool _isClosed;
    private bool _mayHaveCurves;
    public bool IsClosed { get; }
    public bool MayHaveCurves { get; }
    private static SvgPathSegParser();
    public bool get_IsClosed();
    public bool get_MayHaveCurves();
    public bool Parse(SvgPathSegList pathList, string pathSegs);
    private bool Parse(SvgPathSegList pathList, String[] paths);
}
public class SharpVectors.Dom.Svg.SvgPatternElement : SvgStyleableElement {
    private ISvgAnimatedEnumeration _patternUnits;
    private ISvgAnimatedEnumeration _patternContentUnits;
    private ISvgAnimatedTransformList _patternTransform;
    private ISvgAnimatedLength _x;
    private ISvgAnimatedLength _y;
    private ISvgAnimatedLength _width;
    private ISvgAnimatedLength _height;
    private SvgUriReference _uriReference;
    private SvgExternalResourcesRequired _externalResRequired;
    private SvgFitToViewBox _fitToViewBox;
    private SvgTests _svgTests;
    private ISvgViewSpec _currentView;
    private ISvgMatrix _cachedViewBoxTransform;
    private ISvgRect _patternBounds;
    public XmlNodeList Children { get; }
    public bool IsRenderable { get; }
    public SvgRenderingHint RenderingHint { get; }
    public ISvgAnimatedEnumeration PatternUnits { get; }
    public ISvgAnimatedEnumeration PatternContentUnits { get; }
    public ISvgAnimatedTransformList PatternTransform { get; }
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    public ISvgAnimatedLength Width { get; }
    public ISvgAnimatedLength Height { get; }
    public ISvgRect PatternBounds { get; public set; }
    public ISvgAnimatedString Href { get; }
    public SvgPatternElement ReferencedElement { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgAnimatedRect ViewBox { get; }
    public ISvgAnimatedPreserveAspectRatio PreserveAspectRatio { get; }
    public ISvgMatrix ViewBoxTransform { get; }
    public ISvgViewSpec CurrentView { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public SvgPatternElement(string prefix, string localname, string ns, SvgDocument doc);
    public XmlNodeList get_Children();
    public virtual bool get_IsRenderable();
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual ISvgAnimatedEnumeration get_PatternUnits();
    public sealed virtual ISvgAnimatedEnumeration get_PatternContentUnits();
    public sealed virtual ISvgAnimatedTransformList get_PatternTransform();
    public sealed virtual ISvgAnimatedLength get_X();
    public sealed virtual ISvgAnimatedLength get_Y();
    public sealed virtual ISvgAnimatedLength get_Width();
    public sealed virtual ISvgAnimatedLength get_Height();
    public sealed virtual ISvgRect get_PatternBounds();
    public sealed virtual void set_PatternBounds(ISvgRect value);
    public sealed virtual ISvgAnimatedString get_Href();
    public SvgPatternElement get_ReferencedElement();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual ISvgAnimatedRect get_ViewBox();
    public sealed virtual ISvgAnimatedPreserveAspectRatio get_PreserveAspectRatio();
    public ISvgMatrix get_ViewBoxTransform();
    public ISvgViewSpec get_CurrentView();
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
}
public class SharpVectors.Dom.Svg.SvgPoint : object {
    private double _x;
    private double _y;
    public double X { get; public set; }
    public double Y { get; public set; }
    public SvgPoint(double x, double y);
    public sealed virtual double get_X();
    public sealed virtual void set_X(double value);
    public sealed virtual double get_Y();
    public sealed virtual void set_Y(double value);
    public sealed virtual ISvgPoint MatrixTransform(ISvgMatrix matrix);
    public SvgPoint lerp(SvgPoint that, double percent);
    public static SvgPoint op_Addition(SvgPoint a, SvgPoint b);
    public static SvgPoint op_Subtraction(SvgPoint a, SvgPoint b);
    public static SvgPoint op_Multiply(SvgPoint a, double scalar);
    public static SvgPoint op_Multiply(double scalar, SvgPoint a);
    public static SvgPoint op_Division(SvgPoint a, double scalar);
    public static SvgPoint op_Division(double scalar, SvgPoint a);
}
public class SharpVectors.Dom.Svg.SvgPointList : SvgList`1<ISvgPoint> {
    public SvgPointList(string listString, bool clearOnError);
    public sealed virtual void FromString(string listString, bool clearOnError);
}
public class SharpVectors.Dom.Svg.SvgPointsParser : SvgNumberParser {
    protected ISvgPointsHandler _pointsHandler;
    protected bool _isERead;
    public ISvgPointsHandler Handler { get; public set; }
    public SvgPointsParser(ISvgPointsHandler handler);
    public virtual ISvgPointsHandler get_Handler();
    public virtual void set_Handler(ISvgPointsHandler value);
    protected virtual void DoParse();
}
public abstract class SharpVectors.Dom.Svg.SvgPolyElement : SvgTransformableElement {
    private ISvgPointList _points;
    private SvgTests _svgTests;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    public ISvgPointList AnimatedPoints { get; }
    public ISvgPointList Points { get; }
    public SvgRenderingHint RenderingHint { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public SvgPointF[] MarkerPositions { get; }
    public bool IsClosed { get; }
    public bool MayHaveCurves { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    protected SvgPolyElement(string prefix, string localname, string ns, SvgDocument doc);
    public sealed virtual ISvgPointList get_AnimatedPoints();
    public sealed virtual ISvgPointList get_Points();
    public void Invalidate();
    public virtual void HandleAttributeChange(XmlAttribute attribute);
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public virtual SvgPointF[] get_MarkerPositions();
    public sealed virtual double GetStartAngle(int index);
    public sealed virtual double GetEndAngle(int index);
    public sealed virtual ISvgMarker GetMarker(int index);
    public virtual bool get_IsClosed();
    public sealed virtual bool get_MayHaveCurves();
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
}
public class SharpVectors.Dom.Svg.SvgPolygonElement : SvgPolyElement {
    public SvgPointF[] MarkerPositions { get; }
    public SvgPolygonElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual SvgPointF[] get_MarkerPositions();
    public sealed virtual void Accept(ISvgElementVisitor visitor);
}
public class SharpVectors.Dom.Svg.SvgPolylineElement : SvgPolyElement {
    public bool IsClosed { get; }
    public SvgPolylineElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsClosed();
    public sealed virtual void Accept(ISvgElementVisitor visitor);
}
public class SharpVectors.Dom.Svg.SvgPreserveAspectRatio : object {
    private static Regex parCheck;
    private bool _isDefaultAlign;
    private SvgElement _ownerElement;
    private SvgMeetOrSlice _meetOrSlice;
    private SvgPreserveAspectRatioType _alignment;
    public bool IsDefaultAlign { get; }
    public SvgPreserveAspectRatioType Align { get; public set; }
    public SvgMeetOrSlice MeetOrSlice { get; public set; }
    public SvgPreserveAspectRatio(string attr, SvgElement ownerElement);
    private static SvgPreserveAspectRatio();
    public sealed virtual bool get_IsDefaultAlign();
    public Double[] FitToViewBox(SvgRect viewBox, SvgRect rectToFit);
    public sealed virtual SvgPreserveAspectRatioType get_Align();
    public sealed virtual void set_Align(SvgPreserveAspectRatioType value);
    public sealed virtual SvgMeetOrSlice get_MeetOrSlice();
    public sealed virtual void set_MeetOrSlice(SvgMeetOrSlice value);
}
public class SharpVectors.Dom.Svg.SvgRadialGradientElement : SvgGradientElement {
    private ISvgAnimatedLength _cx;
    private ISvgAnimatedLength _cy;
    private ISvgAnimatedLength _r;
    private ISvgAnimatedLength _fx;
    private ISvgAnimatedLength _fy;
    public bool IsRenderable { get; }
    public ISvgAnimatedLength Cx { get; }
    public ISvgAnimatedLength Cy { get; }
    public ISvgAnimatedLength R { get; }
    public ISvgAnimatedLength Fx { get; }
    public ISvgAnimatedLength Fy { get; }
    public SvgRadialGradientElement ReferencedElement { get; }
    public SvgRadialGradientElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public sealed virtual ISvgAnimatedLength get_Cx();
    public sealed virtual ISvgAnimatedLength get_Cy();
    public sealed virtual ISvgAnimatedLength get_R();
    public sealed virtual ISvgAnimatedLength get_Fx();
    public sealed virtual ISvgAnimatedLength get_Fy();
    public SvgRadialGradientElement get_ReferencedElement();
}
public class SharpVectors.Dom.Svg.SvgRect : object {
    public static SvgRect Empty;
    private double _x;
    private double _y;
    private double _width;
    private double _height;
    public bool IsEmpty { get; }
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public SvgRect(double x, double y, double width, double height);
    public SvgRect(string str);
    private static SvgRect();
    public bool get_IsEmpty();
    public static bool op_Equality(SvgRect left, SvgRect right);
    public static bool op_Inequality(SvgRect left, SvgRect right);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SvgRect other);
    public sealed virtual bool Equals(ISvgRect other);
    public bool Contains(double x, double y);
    public bool Contains(SvgPoint pt);
    public bool Contains(SvgRect rect);
    public virtual int GetHashCode();
    public void Inflate(double x, double y);
    public void Intersect(SvgRect rect);
    public void Intersection(SvgRect rect);
    public bool Intersects(SvgRect rect);
    public void Offset(double x, double y);
    public virtual string ToString();
    public static SvgRect Inflate(SvgRect rect, float x, float y);
    public static SvgRect Intersection(SvgRect a, SvgRect b);
    public static SvgRect Union(SvgRect a, SvgRect b);
    public sealed virtual double get_X();
    public sealed virtual void set_X(double value);
    public sealed virtual double get_Y();
    public sealed virtual void set_Y(double value);
    public sealed virtual double get_Width();
    public sealed virtual void set_Width(double value);
    public sealed virtual double get_Height();
    public sealed virtual void set_Height(double value);
    private Double[] GetHashValues();
}
public class SharpVectors.Dom.Svg.SvgRectElement : SvgTransformableElement {
    private ISvgAnimatedLength _x;
    private ISvgAnimatedLength _y;
    private ISvgAnimatedLength _rx;
    private ISvgAnimatedLength _ry;
    private ISvgAnimatedLength _width;
    private ISvgAnimatedLength _height;
    private SvgTests _svgTests;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    public SvgRenderingHint RenderingHint { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgAnimatedLength Width { get; }
    public ISvgAnimatedLength Height { get; }
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    public ISvgAnimatedLength Rx { get; }
    public ISvgAnimatedLength Ry { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public SvgRectElement(string prefix, string localname, string ns, SvgDocument doc);
    public void Invalidate();
    public virtual void HandleAttributeChange(XmlAttribute attribute);
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual ISvgAnimatedLength get_Width();
    public sealed virtual ISvgAnimatedLength get_Height();
    public sealed virtual ISvgAnimatedLength get_X();
    public sealed virtual ISvgAnimatedLength get_Y();
    public sealed virtual ISvgAnimatedLength get_Rx();
    public sealed virtual ISvgAnimatedLength get_Ry();
    public sealed virtual void Accept(ISvgElementVisitor visitor);
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
}
public class SharpVectors.Dom.Svg.SvgResolveNamespaceEventArgs : EventArgs {
    private string _uri;
    private string _prefix;
    public string Prefix { get; public set; }
    public string Uri { get; public set; }
    public SvgResolveNamespaceEventArgs(string prefix);
    public string get_Prefix();
    public void set_Prefix(string value);
    public string get_Uri();
    public void set_Uri(string value);
}
public class SharpVectors.Dom.Svg.SvgResolveUriEventArgs : EventArgs {
    private string _uri;
    public string Uri { get; public set; }
    public SvgResolveUriEventArgs(string uri);
    public string get_Uri();
    public void set_Uri(string value);
}
public class SharpVectors.Dom.Svg.SvgScriptElement : SvgElement {
    public static string ECMAScript;
    private string _content;
    private SvgUriReference _uriReference;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    public bool IsRenderable { get; }
    public string Type { get; public set; }
    public string CrossOrigin { get; public set; }
    public string Content { get; }
    public ISvgAnimatedString Href { get; }
    public SvgUriReference UriReference { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public SvgScriptElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public sealed virtual string get_Type();
    public sealed virtual void set_Type(string value);
    public sealed virtual string get_CrossOrigin();
    public sealed virtual void set_CrossOrigin(string value);
    public string get_Content();
    public sealed virtual ISvgAnimatedString get_Href();
    public SvgUriReference get_UriReference();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
}
public class SharpVectors.Dom.Svg.SvgSolidColorElement : SvgStyleableElement {
    private SvgUriReference _uriReference;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    private SvgTests _svgTests;
    public XmlNodeList Children { get; }
    public bool IsRenderable { get; }
    public SvgRenderingHint RenderingHint { get; }
    public ISvgAnimatedString Href { get; }
    public SvgSolidColorElement ReferencedElement { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public SvgSolidColorElement(string prefix, string localname, string ns, SvgDocument doc);
    public XmlNodeList get_Children();
    public virtual bool get_IsRenderable();
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual ISvgAnimatedString get_Href();
    public SvgSolidColorElement get_ReferencedElement();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
}
public enum SharpVectors.Dom.Svg.SvgSpreadMethod : Enum {
    public int value__;
    public static SvgSpreadMethod Pad;
    public static SvgSpreadMethod Reflect;
    public static SvgSpreadMethod Repeat;
    public static SvgSpreadMethod None;
}
public class SharpVectors.Dom.Svg.SvgStopElement : SvgStyleableElement {
    public bool IsRenderable { get; }
    public ISvgAnimatedNumber Offset { get; }
    public SvgStopElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public sealed virtual ISvgAnimatedNumber get_Offset();
}
public class SharpVectors.Dom.Svg.SvgStringList : SvgList`1<string> {
    private static Regex _reDelim;
    public SvgStringList(string listString);
    private static SvgStringList();
    public sealed virtual void FromString(string listString);
}
public class SharpVectors.Dom.Svg.SvgStringReader : SvgTextReader {
    protected string _inputText;
    protected int _textLength;
    protected int _nextIndex;
    protected int _line;
    protected int _column;
    public int Line { get; }
    public int Column { get; }
    public SvgStringReader(string input);
    public virtual int Read();
    public virtual int get_Line();
    public virtual int get_Column();
    public virtual void Close();
}
public abstract class SharpVectors.Dom.Svg.SvgStyleableElement : SvgElement {
    private static Regex _isImportant;
    private ISvgAnimatedString _className;
    private IDictionary`2<string, ICssValue> _presentationAttributes;
    public ISvgAnimatedString ClassName { get; }
    protected SvgStyleableElement(string prefix, string localname, string ns, SvgDocument doc);
    private static SvgStyleableElement();
    public sealed virtual ISvgAnimatedString get_ClassName();
    public sealed virtual ICssValue GetPresentationAttribute(string name);
    public string GetPropertyValue(string name);
    public string GetPropertyValue(string name1, string name2);
    public virtual ICssStyleDeclaration GetComputedStyle(string pseudoElt);
    public virtual void HandleAttributeChange(XmlAttribute attribute);
}
public class SharpVectors.Dom.Svg.SvgStyleElement : SvgElement {
    public bool IsRenderable { get; }
    public string Type { get; public set; }
    public string Media { get; public set; }
    public string Title { get; public set; }
    public SvgStyleElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public sealed virtual string get_Type();
    public sealed virtual void set_Type(string value);
    public sealed virtual string get_Media();
    public sealed virtual void set_Media(string value);
    public sealed virtual string get_Title();
    public sealed virtual void set_Title(string value);
}
public class SharpVectors.Dom.Svg.SvgSvgElement : SvgTransformableElement {
    private SvgTests _svgTests;
    private ISvgAnimatedLength _x;
    private ISvgAnimatedLength _y;
    private ISvgAnimatedLength _width;
    private ISvgAnimatedLength _height;
    private ISvgRect _viewport;
    private ISvgViewSpec _currentView;
    private float _currentScale;
    private ISvgMatrix _cachedViewBoxTransform;
    private ISvgPoint _currentTranslate;
    private List`1<Timer> _redrawTimers;
    private SvgFitToViewBox _svgFitToViewBox;
    private SvgExternalResourcesRequired _svgResRequired;
    public bool IsOuterMost { get; }
    public SvgRenderingHint RenderingHint { get; }
    public SvgZoomAndPanType ZoomAndPan { get; public set; }
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    private string WidthAsString { get; }
    public ISvgAnimatedLength Width { get; }
    private string HeightAsString { get; }
    public ISvgAnimatedLength Height { get; }
    public string ContentScriptType { get; public set; }
    public string ContentStyleType { get; public set; }
    public ISvgRect Viewport { get; }
    public float PixelUnitToMillimeterX { get; public set; }
    public float PixelUnitToMillimeterY { get; public set; }
    public float ScreenPixelToMillimeterX { get; public set; }
    public float ScreenPixelToMillimeterY { get; public set; }
    public bool UseCurrentView { get; public set; }
    public ISvgViewSpec CurrentView { get; }
    public float CurrentScale { get; public set; }
    public ISvgMatrix ViewBoxTransform { get; }
    public ISvgPoint CurrentTranslate { get; }
    public float CurrentTime { get; public set; }
    public ISvgAnimatedRect ViewBox { get; }
    public ISvgAnimatedPreserveAspectRatio PreserveAspectRatio { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public SvgSvgElement(string prefix, string localname, string ns, SvgDocument doc);
    public bool get_IsOuterMost();
    public void Resize();
    public SvgSizeF GetSize();
    public SvgRectF GetBounds();
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual SvgZoomAndPanType get_ZoomAndPan();
    public sealed virtual void set_ZoomAndPan(SvgZoomAndPanType value);
    public sealed virtual ISvgAnimatedLength get_X();
    public sealed virtual ISvgAnimatedLength get_Y();
    private string get_WidthAsString();
    public sealed virtual ISvgAnimatedLength get_Width();
    private string get_HeightAsString();
    public sealed virtual ISvgAnimatedLength get_Height();
    public sealed virtual string get_ContentScriptType();
    public sealed virtual void set_ContentScriptType(string value);
    public sealed virtual string get_ContentStyleType();
    public sealed virtual void set_ContentStyleType(string value);
    private double getViewportProp(string propertyName, string inValue, double calcParentVP, double defaultValue, SvgLengthDirection dir);
    public sealed virtual ISvgRect get_Viewport();
    public sealed virtual float get_PixelUnitToMillimeterX();
    public void set_PixelUnitToMillimeterX(float value);
    public sealed virtual float get_PixelUnitToMillimeterY();
    public void set_PixelUnitToMillimeterY(float value);
    public sealed virtual float get_ScreenPixelToMillimeterX();
    public void set_ScreenPixelToMillimeterX(float value);
    public sealed virtual float get_ScreenPixelToMillimeterY();
    public void set_ScreenPixelToMillimeterY(float value);
    public sealed virtual bool get_UseCurrentView();
    public sealed virtual void set_UseCurrentView(bool value);
    public sealed virtual ISvgViewSpec get_CurrentView();
    public sealed virtual float get_CurrentScale();
    public sealed virtual void set_CurrentScale(float value);
    public ISvgMatrix get_ViewBoxTransform();
    public sealed virtual ISvgPoint get_CurrentTranslate();
    public void RedrawTimerElapsed(object source, ElapsedEventArgs args);
    public sealed virtual int SuspendRedraw(int maxWaitMilliseconds);
    public sealed virtual void UnsuspendRedraw(int suspendHandleId);
    public sealed virtual void UnsuspendRedrawAll();
    public sealed virtual void ForceRedraw();
    public sealed virtual void PauseAnimations();
    public sealed virtual void UnpauseAnimations();
    public sealed virtual bool AnimationsPaused();
    public sealed virtual float get_CurrentTime();
    public sealed virtual void set_CurrentTime(float value);
    public sealed virtual XmlNodeList GetIntersectionList(ISvgRect rect, ISvgElement referenceElement);
    public sealed virtual XmlNodeList GetEnclosureList(ISvgRect rect, ISvgElement referenceElement);
    public sealed virtual bool CheckIntersection(ISvgElement element, ISvgRect rect);
    public sealed virtual bool CheckEnclosure(ISvgElement element, ISvgRect rect);
    public sealed virtual void DeselectAll();
    public sealed virtual ISvgNumber CreateSvgNumber();
    public sealed virtual ISvgLength CreateSvgLength();
    public sealed virtual ISvgAngle CreateSvgAngle();
    public sealed virtual ISvgPoint CreateSvgPoint();
    public sealed virtual ISvgMatrix CreateSvgMatrix();
    public sealed virtual ISvgRect CreateSvgRect();
    public sealed virtual ISvgTransform CreateSvgTransform();
    public sealed virtual ISvgTransform CreateSvgTransformFromMatrix(ISvgMatrix matrix);
    public sealed virtual XmlElement GetElementById(string elementId);
    public sealed virtual ISvgAnimatedRect get_ViewBox();
    public sealed virtual ISvgAnimatedPreserveAspectRatio get_PreserveAspectRatio();
    public sealed virtual void Accept(ISvgElementVisitor visitor);
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
    public virtual void HandleAttributeChange(XmlAttribute attribute);
}
public class SharpVectors.Dom.Svg.SvgSwitchElement : SvgTransformableElement {
    private SvgTests _svgTests;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    public SvgRenderingHint RenderingHint { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public SvgSwitchElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual void Accept(ISvgElementVisitor visitor);
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
}
public class SharpVectors.Dom.Svg.SvgSymbolElement : SvgStyleableElement {
    private ISvgAnimatedLength _x;
    private ISvgAnimatedLength _y;
    private ISvgAnimatedLength _width;
    private ISvgAnimatedLength _height;
    private SvgFitToViewBox _fitToViewBox;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    private string WidthAsString { get; }
    public ISvgAnimatedLength Width { get; internal set; }
    private string HeightAsString { get; }
    public ISvgAnimatedLength Height { get; internal set; }
    public bool IsRenderable { get; }
    public SvgRenderingHint RenderingHint { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgAnimatedRect ViewBox { get; }
    public ISvgAnimatedPreserveAspectRatio PreserveAspectRatio { get; }
    public SvgSymbolElement(string prefix, string localname, string ns, SvgDocument doc);
    public ISvgAnimatedLength get_X();
    public ISvgAnimatedLength get_Y();
    private string get_WidthAsString();
    public ISvgAnimatedLength get_Width();
    internal void set_Width(ISvgAnimatedLength value);
    private string get_HeightAsString();
    public ISvgAnimatedLength get_Height();
    internal void set_Height(ISvgAnimatedLength value);
    public virtual bool get_IsRenderable();
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual void Accept(ISvgElementVisitor visitor);
    public sealed virtual ISvgAnimatedRect get_ViewBox();
    public sealed virtual ISvgAnimatedPreserveAspectRatio get_PreserveAspectRatio();
}
public class SharpVectors.Dom.Svg.SvgTests : object {
    private static SvgReadOnlyStringList ReadOnlyStringList;
    private SvgElement _ownerElement;
    private ISvgStringList _requiredFeatures;
    private ISvgStringList _requiredExtensions;
    private ISvgStringList _systemLanguage;
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public SvgTests(SvgElement ownerElement);
    private static SvgTests();
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
    private void OnAttributeChange(object src, XmlNodeChangedEventArgs args);
}
public class SharpVectors.Dom.Svg.SvgTextAreaElement : SvgTextBaseElement {
    public SvgTextAreaElement(string prefix, string localname, string ns, SvgDocument doc);
}
public abstract class SharpVectors.Dom.Svg.SvgTextBaseElement : SvgTextPositioningElement {
    public ISvgAnimatedLength LetterSpacing { get; }
    public ISvgAnimatedLength TextLength { get; }
    protected SvgTextBaseElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual ISvgAnimatedLength get_LetterSpacing();
    public virtual ISvgAnimatedLength get_TextLength();
    public sealed virtual void Accept(ISvgElementVisitor visitor);
}
public abstract class SharpVectors.Dom.Svg.SvgTextContentElement : SvgTransformableElement {
    private SvgTests _svgTests;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    public SvgRenderingHint RenderingHint { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public ISvgAnimatedLength LetterSpacing { get; }
    public ISvgAnimatedLength TextLength { get; }
    public ISvgAnimatedEnumeration LengthAdjust { get; }
    protected SvgTextBaseElement OwnerTextElement { get; }
    protected SvgTextContentElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual SvgRenderingHint get_RenderingHint();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
    public virtual ISvgAnimatedLength get_LetterSpacing();
    public virtual ISvgAnimatedLength get_TextLength();
    public virtual ISvgAnimatedEnumeration get_LengthAdjust();
    protected SvgTextBaseElement get_OwnerTextElement();
    public void Invalidate();
    public virtual void HandleAttributeChange(XmlAttribute attribute);
    public virtual void ElementChange(object src, XmlNodeChangedEventArgs args);
    public sealed virtual long GetNumberOfChars();
    public sealed virtual float GetComputedTextLength();
    public sealed virtual float GetSubStringLength(long charnum, long nchars);
    public sealed virtual ISvgPoint GetStartPositionOfChar(long charnum);
    public sealed virtual ISvgPoint GetEndPositionOfChar(long charnum);
    public sealed virtual ISvgRect GetExtentOfChar(long charnum);
    public sealed virtual float GetRotationOfChar(long charnum);
    public sealed virtual long GetCharNumAtPosition(ISvgPoint point);
    public sealed virtual void SelectSubString(long charnum, long nchars);
}
public class SharpVectors.Dom.Svg.SvgTextElement : SvgTextBaseElement {
    public SvgTextElement(string prefix, string localname, string ns, SvgDocument doc);
}
public class SharpVectors.Dom.Svg.SvgTextPathElement : SvgTextContentElement {
    private SvgUriReference _uriReference;
    public ISvgAnimatedLength TextLength { get; }
    public ISvgAnimatedEnumeration LengthAdjust { get; }
    public ISvgAnimatedLength StartOffset { get; }
    public ISvgAnimatedEnumeration Method { get; }
    public ISvgAnimatedEnumeration Spacing { get; }
    public ISvgAnimatedString Href { get; }
    public XmlElement ReferencedElement { get; }
    public SvgTextPathElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual ISvgAnimatedLength get_TextLength();
    public virtual ISvgAnimatedEnumeration get_LengthAdjust();
    public sealed virtual ISvgAnimatedLength get_StartOffset();
    public sealed virtual ISvgAnimatedEnumeration get_Method();
    public sealed virtual ISvgAnimatedEnumeration get_Spacing();
    public sealed virtual void Accept(ISvgElementVisitor visitor);
    public sealed virtual ISvgAnimatedString get_Href();
    public XmlElement get_ReferencedElement();
}
public abstract class SharpVectors.Dom.Svg.SvgTextPositioningElement : SvgTextContentElement {
    public ISvgAnimatedLengthList X { get; }
    public ISvgAnimatedLengthList Y { get; }
    public ISvgAnimatedLengthList Dx { get; }
    public ISvgAnimatedLengthList Dy { get; }
    public ISvgAnimatedNumberList Rotate { get; }
    public SvgTextPositioningElement(string prefix, string localname, string ns, SvgDocument doc);
    public sealed virtual ISvgAnimatedLengthList get_X();
    public sealed virtual ISvgAnimatedLengthList get_Y();
    public sealed virtual ISvgAnimatedLengthList get_Dx();
    public sealed virtual ISvgAnimatedLengthList get_Dy();
    public sealed virtual ISvgAnimatedNumberList get_Rotate();
}
public abstract class SharpVectors.Dom.Svg.SvgTextReader : object {
    public int Line { get; }
    public int Column { get; }
    public abstract virtual int Read();
    public virtual int Read(Char[] cbuf, int off, int len);
    public abstract virtual int get_Line();
    public abstract virtual int get_Column();
}
public class SharpVectors.Dom.Svg.SvgTitleElement : SvgStyleableElement {
    public bool IsRenderable { get; }
    public SvgTitleElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
}
public class SharpVectors.Dom.Svg.SvgTransform : object {
    private static Regex _reSeparators;
    private double _angle;
    private ISvgMatrix _matrix;
    private SvgTransformType _type;
    private Double[] _values;
    public short Type { get; }
    public SvgTransformType TransformType { get; }
    public ISvgMatrix Matrix { get; }
    public double Angle { get; }
    public Double[] InputValues { get; }
    public SvgTransform(ISvgMatrix matrix);
    public SvgTransform(string str);
    private static SvgTransform();
    public sealed virtual short get_Type();
    public sealed virtual SvgTransformType get_TransformType();
    public sealed virtual ISvgMatrix get_Matrix();
    public sealed virtual double get_Angle();
    public sealed virtual Double[] get_InputValues();
    public sealed virtual void SetMatrix(ISvgMatrix matrix);
    public sealed virtual void SetTranslate(double tx, double ty);
    public sealed virtual void SetScale(double sx, double sy);
    public void SetRotate(double angle);
    public sealed virtual void SetRotate(double angle, double cx, double cy);
    public sealed virtual void SetSkewX(double angle);
    public sealed virtual void SetSkewY(double angle);
}
public class SharpVectors.Dom.Svg.SvgTransformableElement : SvgStyleableElement {
    private ISvgAnimatedTransformList _transform;
    public ISvgAnimatedTransformList Transform { get; }
    public ISvgElement NearestViewportElement { get; }
    public ISvgElement FarthestViewportElement { get; }
    public SvgTransformableElement(string prefix, string localname, string ns, SvgDocument doc);
    public sealed virtual ISvgAnimatedTransformList get_Transform();
    public sealed virtual ISvgElement get_NearestViewportElement();
    public sealed virtual ISvgElement get_FarthestViewportElement();
    public sealed virtual ISvgRect GetBBox();
    public sealed virtual ISvgMatrix GetCTM();
    public sealed virtual ISvgMatrix GetScreenCTM();
    public sealed virtual ISvgMatrix GetTransformToElement(ISvgElement element);
    public virtual void CssInvalidate();
    public virtual void HandleAttributeChange(XmlAttribute attribute);
}
public class SharpVectors.Dom.Svg.SvgTransformList : SvgList`1<ISvgTransform> {
    private static Regex _regExtract;
    public SvgMatrix TotalMatrix { get; }
    public SvgTransformList(string listString);
    private static SvgTransformList();
    public SvgMatrix get_TotalMatrix();
    public void FromString(string listString);
    public sealed virtual ISvgTransform CreateSvgTransformFromMatrix(ISvgMatrix matrix);
    public sealed virtual ISvgTransform Consolidate();
}
public class SharpVectors.Dom.Svg.SvgTRefElement : SvgTextPositioningElement {
    private SvgUriReference _uriReference;
    public ISvgAnimatedString Href { get; }
    public XmlElement ReferencedElement { get; }
    public SvgTRefElement(string prefix, string localname, string ns, SvgDocument doc);
    public sealed virtual ISvgAnimatedString get_Href();
    public XmlElement get_ReferencedElement();
}
public class SharpVectors.Dom.Svg.SvgTSpanElement : SvgTextPositioningElement {
    public SvgTSpanElement(string prefix, string localname, string ns, SvgDocument doc);
    public sealed virtual void Accept(ISvgElementVisitor visitor);
}
public class SharpVectors.Dom.Svg.SvgUriReference : object {
    private string _absoluteUri;
    private SvgElement _ownerElement;
    private ISvgAnimatedString _href;
    public bool IsEmpty { get; }
    public bool IsSupported { get; }
    public SvgElement OwnerElement { get; }
    public string AbsoluteUri { get; }
    public XmlNode ReferencedNode { get; }
    public WebResponse ReferencedResource { get; }
    public ISvgAnimatedString Href { get; }
    public SvgUriReference(SvgElement ownerElement);
    public bool get_IsEmpty();
    public bool get_IsSupported();
    public SvgElement get_OwnerElement();
    public string get_AbsoluteUri();
    public XmlNode get_ReferencedNode();
    public WebResponse get_ReferencedResource();
    private void OnAttributeChange(object src, XmlNodeChangedEventArgs args);
    public sealed virtual ISvgAnimatedString get_Href();
    private string GetBaseUrl();
}
public class SharpVectors.Dom.Svg.SvgUseElement : SvgTransformableElement {
    private ISvgAnimatedLength _x;
    private ISvgAnimatedLength _y;
    private ISvgAnimatedLength _width;
    private ISvgAnimatedLength _height;
    private ISvgElementInstance _instanceRoot;
    private SvgTests _svgTests;
    private SvgUriReference _uriReference;
    private SvgExternalResourcesRequired _externalResourcesRequired;
    private bool _transformAdded;
    private string _saveTransform;
    private string _saveWidth;
    private string _saveHeight;
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    public ISvgAnimatedLength Width { get; }
    public ISvgAnimatedLength Height { get; }
    public ISvgElementInstance InstanceRoot { get; }
    public ISvgElementInstance AnimatedInstanceRoot { get; }
    public ISvgAnimatedString Href { get; }
    public SvgUriReference UriReference { get; }
    public XmlElement ReferencedElement { get; }
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public SvgUseElement(string prefix, string localname, string ns, SvgDocument doc);
    public sealed virtual ISvgAnimatedLength get_X();
    public sealed virtual ISvgAnimatedLength get_Y();
    public sealed virtual ISvgAnimatedLength get_Width();
    public sealed virtual ISvgAnimatedLength get_Height();
    public sealed virtual ISvgElementInstance get_InstanceRoot();
    public sealed virtual ISvgElementInstance get_AnimatedInstanceRoot();
    public sealed virtual ISvgAnimatedString get_Href();
    public SvgUriReference get_UriReference();
    public XmlElement get_ReferencedElement();
    public sealed virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
    public sealed virtual void Accept(ISvgElementVisitor visitor);
    public sealed virtual ISvgStringList get_RequiredFeatures();
    public sealed virtual ISvgStringList get_RequiredExtensions();
    public sealed virtual ISvgStringList get_SystemLanguage();
    public sealed virtual bool HasExtension(string extension);
    public virtual void HandleAttributeChange(XmlAttribute attribute);
    public void OnReferencedNodeChange(object src, XmlNodeChangedEventArgs args);
    public void CopyToReferencedElement(XmlElement refEl);
    public void RestoreReferencedElement(XmlElement refEl);
}
public class SharpVectors.Dom.Svg.SvgViewSpec : SvgFitToViewBox {
    public string TransformString { get; }
    public ISvgElement ViewTarget { get; }
    public string PreserveAspectRatioString { get; }
    public string ViewBoxString { get; }
    public string ViewTargetString { get; }
    public ISvgTransformList Transform { get; }
    public SvgZoomAndPanType ZoomAndPan { get; public set; }
    public SvgViewSpec(SvgElement ownerElement);
    public sealed virtual string get_TransformString();
    public sealed virtual ISvgElement get_ViewTarget();
    public sealed virtual string get_PreserveAspectRatioString();
    public sealed virtual string get_ViewBoxString();
    public sealed virtual string get_ViewTargetString();
    public sealed virtual ISvgTransformList get_Transform();
    public sealed virtual SvgZoomAndPanType get_ZoomAndPan();
    public sealed virtual void set_ZoomAndPan(SvgZoomAndPanType value);
}
public class SharpVectors.Dom.Svg.SvgVKernElement : SvgKernElement {
    public bool IsRenderable { get; }
    public bool IsHorizontal { get; }
    public SvgVKernElement(string prefix, string localname, string ns, SvgDocument doc);
    public virtual bool get_IsRenderable();
    public virtual bool get_IsHorizontal();
}
public abstract class SharpVectors.Dom.Svg.SvgWindow : object {
    protected IDictionary`2<string, List`1<Task>> _mappedTasks;
    private bool _loadFonts;
    private long _innerWidth;
    private long _innerHeight;
    private SvgDocument _document;
    private SvgWindow _parentWindow;
    private ISvgRenderer _renderer;
    private object _synchObject;
    private ISet`1<string> _baseUrls;
    public SvgWindow ParentWindow { get; }
    public ISvgRenderer Renderer { get; public set; }
    public ISet`1<string> BaseUrls { get; public set; }
    public DirectoryInfo WorkingDir { get; }
    internal bool LoadFonts { get; internal set; }
    public long InnerWidth { get; public set; }
    public long InnerHeight { get; public set; }
    public IStyleSheet DefaultStyleSheet { get; }
    public ISvgDocument Document { get; public set; }
    public string Source { get; public set; }
    protected SvgWindow(long innerWidth, long innerHeight, ISvgRenderer renderer);
    protected SvgWindow(SvgWindow parentWindow, long innerWidth, long innerHeight);
    public SvgWindow get_ParentWindow();
    public sealed virtual ISvgRenderer get_Renderer();
    public void set_Renderer(ISvgRenderer value);
    public sealed virtual ISet`1<string> get_BaseUrls();
    public sealed virtual void set_BaseUrls(ISet`1<string> value);
    public abstract virtual DirectoryInfo get_WorkingDir();
    internal bool get_LoadFonts();
    internal void set_LoadFonts(bool value);
    public SvgDocument CreateEmptySvgDocument();
    public void AddTask(string tasksName, Task task);
    public void AwaitTasks(string tasksName);
    private void PurgeList(List`1<Task> namedTasks);
    public virtual long get_InnerWidth();
    public virtual void set_InnerWidth(long value);
    public virtual long get_InnerHeight();
    public virtual void set_InnerHeight(long value);
    public sealed virtual XmlDocumentFragment ParseXML(string source, XmlDocument document);
    public sealed virtual string PrintNode(XmlNode node);
    public sealed virtual IStyleSheet get_DefaultStyleSheet();
    public sealed virtual ISvgDocument get_Document();
    public void set_Document(ISvgDocument value);
    public abstract virtual void Alert(string message);
    public virtual SvgWindow CreateOwnedWindow();
    public virtual ISvgRenderer CreateSvgRenderer();
    public abstract virtual SvgWindow CreateOwnedWindow(long innerWidth, long innerHeight);
    public abstract virtual string get_Source();
    public abstract virtual void set_Source(string value);
    public virtual void Resize(int innerWidth, int innerHeight);
}
public class SharpVectors.Dom.Svg.SvgZoomAndPan : object {
    private SvgElement _ownerElement;
    public SvgZoomAndPanType ZoomAndPan { get; }
    public SvgZoomAndPan(SvgElement ownerElement);
    public SvgZoomAndPanType get_ZoomAndPan();
}
public interface SharpVectors.IoC.ISvgRegisteredType {
    public abstract virtual void AsSingleton();
    public abstract virtual void PerScope();
}
public interface SharpVectors.IoC.ISvgScope {
    public bool IsDisposed { get; }
    public abstract virtual bool get_IsDisposed();
}
public class SharpVectors.IoC.SvgContainer : object {
    private bool _isDisposed;
    private Dictionary`2<Type, Func`2<ILifetime, object>> _registeredTypes;
    private ContainerLifetime _lifetime;
    public bool IsDisposed { get; }
    protected virtual override void Finalize();
    public sealed virtual bool get_IsDisposed();
    public ISvgRegisteredType Register(Type anInterface, Func`1<object> factory);
    public ISvgRegisteredType Register(Type anInterface, Type implementation);
    private ISvgRegisteredType RegisterType(Type itemType, Func`2<ILifetime, object> factory);
    public sealed virtual object GetService(Type type);
    public bool HasService(Type type);
    public ISvgScope CreateScope();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private static Func`2<ILifetime, object> FactoryFromType(Type itemType);
    [CompilerGeneratedAttribute]
private Func`2<ILifetime, object> <.ctor>b__3_0(Type t);
}
[ExtensionAttribute]
public static class SharpVectors.IoC.SvgIoCContainerExtensions : object {
    [ExtensionAttribute]
public static ISvgRegisteredType Register(SvgContainer container, Type type);
    [ExtensionAttribute]
public static ISvgRegisteredType Register(SvgContainer container);
    [ExtensionAttribute]
public static ISvgRegisteredType Register(SvgContainer container, Func`1<T> factory);
    [ExtensionAttribute]
public static ISvgRegisteredType Register(SvgContainer container);
    [ExtensionAttribute]
public static T Resolve(ISvgScope scope);
}
public class SharpVectors.Scripting.JsAbstractView : JsObject`1<IAbstractView> {
    public IJsDocumentView document { get; }
    public JsAbstractView(IAbstractView baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsDocumentView get_document();
}
public class SharpVectors.Scripting.JsAttr : JsNode {
    public string name { get; }
    public bool specified { get; }
    public string value { get; public set; }
    public IJsElement ownerElement { get; }
    public JsAttr(IAttribute baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_name();
    public sealed virtual bool get_specified();
    public sealed virtual string get_value();
    public sealed virtual void set_value(string value);
    public sealed virtual IJsElement get_ownerElement();
}
public class SharpVectors.Scripting.JsCDataSection : JsCharacterData {
    public JsCDataSection(ICDataSection baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsCharacterData : JsNode {
    public string data { get; public set; }
    public ulong length { get; }
    public JsCharacterData(ICharacterData baseObject, ISvgScriptEngine engine);
    public sealed virtual string substringData(ulong offset, ulong count);
    public sealed virtual void appendData(string arg);
    public sealed virtual void insertData(ulong offset, string arg);
    public sealed virtual void deleteData(ulong offset, ulong count);
    public sealed virtual void replaceData(ulong offset, ulong count, string arg);
    public sealed virtual string get_data();
    public sealed virtual void set_data(string value);
    public sealed virtual ulong get_length();
}
public class SharpVectors.Scripting.JsComment : JsCharacterData {
    public JsComment(IComment baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsCounter : JsObject`1<ICssCounter> {
    public string identifier { get; }
    public string listStyle { get; }
    public string separator { get; }
    public JsCounter(ICssCounter baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_identifier();
    public sealed virtual string get_listStyle();
    public sealed virtual string get_separator();
}
public class SharpVectors.Scripting.JsCssCharsetRule : JsCssRule {
    public string encoding { get; public set; }
    public JsCssCharsetRule(ICssCharsetRule baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_encoding();
    public sealed virtual void set_encoding(string value);
}
public class SharpVectors.Scripting.JsCssFontFaceRule : JsCssRule {
    public IJsCssStyleDeclaration style { get; }
    public JsCssFontFaceRule(ICssFontFaceRule baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssStyleDeclaration get_style();
}
public class SharpVectors.Scripting.JsCssImportRule : JsCssRule {
    public string href { get; }
    public IJsMediaList media { get; }
    public IJsCssStyleSheet styleSheet { get; }
    public JsCssImportRule(ICssImportRule baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_href();
    public sealed virtual IJsMediaList get_media();
    public sealed virtual IJsCssStyleSheet get_styleSheet();
}
public class SharpVectors.Scripting.JsCssMediaRule : JsCssRule {
    public IJsMediaList media { get; }
    public IJsCssRuleList cssRules { get; }
    public JsCssMediaRule(ICssMediaRule baseObject, ISvgScriptEngine engine);
    public sealed virtual ulong insertRule(string rule, ulong index);
    public sealed virtual void deleteRule(ulong index);
    public sealed virtual IJsMediaList get_media();
    public sealed virtual IJsCssRuleList get_cssRules();
}
public class SharpVectors.Scripting.JsCssPageRule : JsCssRule {
    public string selectorText { get; public set; }
    public IJsCssStyleDeclaration style { get; }
    public JsCssPageRule(ICssPageRule baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_selectorText();
    public sealed virtual void set_selectorText(string value);
    public sealed virtual IJsCssStyleDeclaration get_style();
}
public class SharpVectors.Scripting.JsCssPrimitiveValue : JsCssValue {
    public ushort primitiveType { get; }
    public JsCssPrimitiveValue(ICssPrimitiveValue baseObject, ISvgScriptEngine engine);
    public sealed virtual void setFloatValue(ushort unitType, float floatValue);
    public sealed virtual float getFloatValue(ushort unitType);
    public sealed virtual void setStringValue(ushort stringType, string stringValue);
    public sealed virtual string getStringValue();
    public sealed virtual IJsCounter getCounterValue();
    public sealed virtual IJsRect getRectValue();
    public sealed virtual IJsRgbColor getRGBColorValue();
    public sealed virtual ushort get_primitiveType();
}
public class SharpVectors.Scripting.JsCssRule : JsObject`1<ICssRule> {
    public ushort type { get; }
    public string cssText { get; public set; }
    public IJsCssStyleSheet parentStyleSheet { get; }
    public IJsCssRule parentRule { get; }
    public JsCssRule(ICssRule baseObject, ISvgScriptEngine engine);
    public sealed virtual ushort get_type();
    public sealed virtual string get_cssText();
    public sealed virtual void set_cssText(string value);
    public sealed virtual IJsCssStyleSheet get_parentStyleSheet();
    public sealed virtual IJsCssRule get_parentRule();
}
public class SharpVectors.Scripting.JsCssRuleList : JsObject`1<ICssRuleList> {
    public ulong length { get; }
    public JsCssRuleList(ICssRuleList baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssRule item(ulong index);
    public sealed virtual ulong get_length();
}
public class SharpVectors.Scripting.JsCssStyleDeclaration : JsObject`1<ICssStyleDeclaration> {
    public string cssText { get; public set; }
    public ulong length { get; }
    public IJsCssRule parentRule { get; }
    public JsCssStyleDeclaration(ICssStyleDeclaration baseObject, ISvgScriptEngine engine);
    public sealed virtual string getPropertyValue(string propertyName);
    public sealed virtual IJsCssValue getPropertyCSSValue(string propertyName);
    public sealed virtual string removeProperty(string propertyName);
    public sealed virtual string getPropertyPriority(string propertyName);
    public sealed virtual void setProperty(string propertyName, string value, string priority);
    public sealed virtual string item(ulong index);
    public sealed virtual string get_cssText();
    public sealed virtual void set_cssText(string value);
    public sealed virtual ulong get_length();
    public sealed virtual IJsCssRule get_parentRule();
}
public class SharpVectors.Scripting.JsCssStyleRule : JsCssRule {
    public string selectorText { get; public set; }
    public IJsCssStyleDeclaration style { get; }
    public JsCssStyleRule(ICssStyleRule baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_selectorText();
    public sealed virtual void set_selectorText(string value);
    public sealed virtual IJsCssStyleDeclaration get_style();
}
public class SharpVectors.Scripting.JsCssStyleSheet : JsStyleSheet {
    public IJsCssRule ownerRule { get; }
    public IJsCssRuleList cssRules { get; }
    public JsCssStyleSheet(ICssStyleSheet baseObject, ISvgScriptEngine engine);
    public sealed virtual ulong insertRule(string rule, ulong index);
    public sealed virtual void deleteRule(ulong index);
    public sealed virtual IJsCssRule get_ownerRule();
    public sealed virtual IJsCssRuleList get_cssRules();
}
public class SharpVectors.Scripting.JsCssUnknownRule : JsCssRule {
    public JsCssUnknownRule(ICssUnknownRule baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsCssValue : JsObject`1<ICssValue> {
    public string cssText { get; public set; }
    public ushort cssValueType { get; }
    public JsCssValue(ICssValue baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_cssText();
    public sealed virtual void set_cssText(string value);
    public sealed virtual ushort get_cssValueType();
}
public class SharpVectors.Scripting.JsCssValueList : JsCssValue {
    public ulong length { get; }
    public JsCssValueList(ICssValueList baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue item(ulong index);
    public sealed virtual ulong get_length();
}
public class SharpVectors.Scripting.JsDocument : JsNode {
    public IJsDocumentType doctype { get; }
    public IJsDomImplementation implementation { get; }
    public IJsElement documentElement { get; }
    public JsDocument(IDocument baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsElement createElement(string tagName);
    public sealed virtual IJsDocumentFragment createDocumentFragment();
    public sealed virtual IJsText createTextNode(string data);
    public sealed virtual IJsComment createComment(string data);
    public sealed virtual IJsCDataSection createCDATASection(string data);
    public sealed virtual IJsProcessingInstruction createProcessingInstruction(string target, string data);
    public sealed virtual IJsAttr createAttribute(string name);
    public sealed virtual IJsEntityReference createEntityReference(string name);
    public sealed virtual IJsNodeList getElementsByTagName(string tagname);
    public sealed virtual IJsNode importNode(IJsNode importedNode, bool deep);
    public sealed virtual IJsElement createElementNS(string namespaceURI, string qualifiedName);
    public sealed virtual IJsAttr createAttributeNS(string namespaceURI, string qualifiedName);
    public sealed virtual IJsNodeList getElementsByTagNameNS(string namespaceURI, string localName);
    public sealed virtual IJsElement getElementById(string elementId);
    public sealed virtual IJsDocumentType get_doctype();
    public sealed virtual IJsDomImplementation get_implementation();
    public sealed virtual IJsElement get_documentElement();
}
public class SharpVectors.Scripting.JsDocumentCss : JsDocumentStyle {
    public JsDocumentCss(IDocumentCss baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssStyleDeclaration getOverrideStyle(IJsElement elt, string pseudoElt);
}
public class SharpVectors.Scripting.JsDocumentEvent : JsObject`1<IDocumentEvent> {
    public JsDocumentEvent(IDocumentEvent baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsEvent createEvent(string eventType);
}
public class SharpVectors.Scripting.JsDocumentFragment : JsNode {
    public JsDocumentFragment(IDocumentFragment baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsDocumentStyle : JsObject`1<IDocumentStyle> {
    public IJsStyleSheetList styleSheets { get; }
    public JsDocumentStyle(IDocumentStyle baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsStyleSheetList get_styleSheets();
}
public class SharpVectors.Scripting.JsDocumentType : JsNode {
    public string name { get; }
    public IJsNamedNodeMap entities { get; }
    public IJsNamedNodeMap notations { get; }
    public string publicId { get; }
    public string systemId { get; }
    public string internalSubset { get; }
    public JsDocumentType(IDocumentType baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_name();
    public sealed virtual IJsNamedNodeMap get_entities();
    public sealed virtual IJsNamedNodeMap get_notations();
    public sealed virtual string get_publicId();
    public sealed virtual string get_systemId();
    public sealed virtual string get_internalSubset();
}
public class SharpVectors.Scripting.JsDocumentView : JsObject`1<IDocumentView> {
    public IJsAbstractView defaultView { get; }
    public JsDocumentView(IDocumentView baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsAbstractView get_defaultView();
}
public class SharpVectors.Scripting.JsDomImplementation : JsObject`1<IDomImplementation> {
    public JsDomImplementation(IDomImplementation baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasFeature(string feature, string version);
    public sealed virtual IJsDocumentType createDocumentType(string qualifiedName, string publicId, string systemId);
    public sealed virtual IJsDocument createDocument(string namespaceURI, string qualifiedName, IJsDocumentType doctype);
}
public class SharpVectors.Scripting.JsDomImplementationCss : JsDomImplementation {
    public JsDomImplementationCss(IDomImplementationCss baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssStyleSheet createCSSStyleSheet(string title, string media);
}
public class SharpVectors.Scripting.JsDomTimeStamp : JsObject`1<IDomTimeStamp> {
    public JsDomTimeStamp(IDomTimeStamp baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsElement : JsNode {
    public string tagName { get; }
    public JsElement(IElement baseObject, ISvgScriptEngine engine);
    public sealed virtual string getAttribute(string name);
    public sealed virtual void setAttribute(string name, string value);
    public sealed virtual void removeAttribute(string name);
    public sealed virtual IJsAttr getAttributeNode(string name);
    public sealed virtual IJsAttr setAttributeNode(IJsAttr newAttr);
    public sealed virtual IJsAttr removeAttributeNode(IJsAttr oldAttr);
    public sealed virtual IJsNodeList getElementsByTagName(string name);
    public sealed virtual string getAttributeNS(string namespaceURI, string localName);
    public sealed virtual void setAttributeNS(string namespaceURI, string qualifiedName, string value);
    public sealed virtual void removeAttributeNS(string namespaceURI, string localName);
    public sealed virtual IJsAttr getAttributeNodeNS(string namespaceURI, string localName);
    public sealed virtual IJsAttr setAttributeNodeNS(IJsAttr newAttr);
    public sealed virtual IJsNodeList getElementsByTagNameNS(string namespaceURI, string localName);
    public sealed virtual bool hasAttribute(string name);
    public sealed virtual bool hasAttributeNS(string namespaceURI, string localName);
    public sealed virtual string get_tagName();
}
public class SharpVectors.Scripting.JsElementCssInlineStyle : JsObject`1<IElementCssInlineStyle> {
    public IJsCssStyleDeclaration style { get; }
    public JsElementCssInlineStyle(IElementCssInlineStyle baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssStyleDeclaration get_style();
}
public class SharpVectors.Scripting.JsEntity : JsNode {
    public string publicId { get; }
    public string systemId { get; }
    public string notationName { get; }
    public JsEntity(IEntity baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_publicId();
    public sealed virtual string get_systemId();
    public sealed virtual string get_notationName();
}
public class SharpVectors.Scripting.JsEntityReference : JsNode {
    public JsEntityReference(IEntityReference baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsEvent : JsObject`1<IEvent> {
    public string type { get; }
    public IJsEventTarget target { get; }
    public IJsEventTarget currentTarget { get; }
    public ushort eventPhase { get; }
    public bool bubbles { get; }
    public bool cancelable { get; }
    public IJsDomTimeStamp timeStamp { get; }
    public JsEvent(IEvent baseObject, ISvgScriptEngine engine);
    public sealed virtual void stopPropagation();
    public sealed virtual void preventDefault();
    public sealed virtual void initEvent(string eventTypeArg, bool canBubbleArg, bool cancelableArg);
    public sealed virtual string get_type();
    public sealed virtual IJsEventTarget get_target();
    public sealed virtual IJsEventTarget get_currentTarget();
    public sealed virtual ushort get_eventPhase();
    public sealed virtual bool get_bubbles();
    public sealed virtual bool get_cancelable();
    public sealed virtual IJsDomTimeStamp get_timeStamp();
}
public class SharpVectors.Scripting.JsEventListener : JsObject`1<IEventListener> {
    public JsEventListener(IEventListener baseObject, ISvgScriptEngine engine);
    public sealed virtual void handleEvent(IJsEvent evt);
}
public class SharpVectors.Scripting.JsEventTarget : JsObject`1<IEventTarget> {
    public JsEventTarget(IEventTarget baseObject, ISvgScriptEngine engine);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
}
public class SharpVectors.Scripting.JsGetSvgDocument : JsObject`1<IGetSvgDocument> {
    public JsGetSvgDocument(IGetSvgDocument baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgDocument getSVGDocument();
}
public class SharpVectors.Scripting.JsLinkStyle : JsObject`1<ILinkStyle> {
    public IJsStyleSheet sheet { get; }
    public JsLinkStyle(ILinkStyle baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsStyleSheet get_sheet();
}
public class SharpVectors.Scripting.JsMediaList : JsObject`1<IMediaList> {
    public string mediaText { get; public set; }
    public ulong length { get; }
    public JsMediaList(IMediaList baseObject, ISvgScriptEngine engine);
    public sealed virtual string item(ulong index);
    public sealed virtual void deleteMedium(string oldMedium);
    public sealed virtual void appendMedium(string newMedium);
    public sealed virtual string get_mediaText();
    public sealed virtual void set_mediaText(string value);
    public sealed virtual ulong get_length();
}
public class SharpVectors.Scripting.JsMouseEvent : JsUiEvent {
    public long screenX { get; }
    public long screenY { get; }
    public long clientX { get; }
    public long clientY { get; }
    public bool ctrlKey { get; }
    public bool shiftKey { get; }
    public bool altKey { get; }
    public bool metaKey { get; }
    public ushort button { get; }
    public IJsEventTarget relatedTarget { get; }
    public JsMouseEvent(IMouseEvent baseObject, ISvgScriptEngine engine);
    public sealed virtual void initMouseEvent(string typeArg, bool canBubbleArg, bool cancelableArg, IJsAbstractView viewArg, long detailArg, long screenXArg, long screenYArg, long clientXArg, long clientYArg, bool ctrlKeyArg, bool altKeyArg, bool shiftKeyArg, bool metaKeyArg, ushort buttonArg, IJsEventTarget relatedTargetArg);
    public sealed virtual long get_screenX();
    public sealed virtual long get_screenY();
    public sealed virtual long get_clientX();
    public sealed virtual long get_clientY();
    public sealed virtual bool get_ctrlKey();
    public sealed virtual bool get_shiftKey();
    public sealed virtual bool get_altKey();
    public sealed virtual bool get_metaKey();
    public sealed virtual ushort get_button();
    public sealed virtual IJsEventTarget get_relatedTarget();
}
public class SharpVectors.Scripting.JsMutationEvent : JsEvent {
    public IJsNode relatedNode { get; }
    public string prevValue { get; }
    public string newValue { get; }
    public string attrName { get; }
    public ushort attrChange { get; }
    public JsMutationEvent(IMutationEvent baseObject, ISvgScriptEngine engine);
    public sealed virtual void initMutationEvent(string typeArg, bool canBubbleArg, bool cancelableArg, IJsNode relatedNodeArg, string prevValueArg, string newValueArg, string attrNameArg, ushort attrChangeArg);
    public sealed virtual IJsNode get_relatedNode();
    public sealed virtual string get_prevValue();
    public sealed virtual string get_newValue();
    public sealed virtual string get_attrName();
    public sealed virtual ushort get_attrChange();
}
public class SharpVectors.Scripting.JsNamedNodeMap : JsObject`1<INamedNodeMap> {
    public ulong length { get; }
    public JsNamedNodeMap(INamedNodeMap baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsNode getNamedItem(string name);
    public sealed virtual IJsNode setNamedItem(IJsNode arg);
    public sealed virtual IJsNode removeNamedItem(string name);
    public sealed virtual IJsNode item(ulong index);
    public sealed virtual IJsNode getNamedItemNS(string namespaceURI, string localName);
    public sealed virtual IJsNode setNamedItemNS(IJsNode arg);
    public sealed virtual IJsNode removeNamedItemNS(string namespaceURI, string localName);
    public sealed virtual ulong get_length();
}
public class SharpVectors.Scripting.JsNode : JsObject`1<INode> {
    public string nodeName { get; }
    public string nodeValue { get; public set; }
    public ushort nodeType { get; }
    public IJsNode parentNode { get; }
    public IJsNodeList childNodes { get; }
    public IJsNode firstChild { get; }
    public IJsNode lastChild { get; }
    public IJsNode previousSibling { get; }
    public IJsNode nextSibling { get; }
    public IJsNamedNodeMap attributes { get; }
    public IJsDocument ownerDocument { get; }
    public string namespaceURI { get; }
    public string prefix { get; public set; }
    public string localName { get; }
    public JsNode(INode baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsNode insertBefore(IJsNode newChild, IJsNode refChild);
    public sealed virtual IJsNode replaceChild(IJsNode newChild, IJsNode oldChild);
    public sealed virtual IJsNode removeChild(IJsNode oldChild);
    public sealed virtual IJsNode appendChild(IJsNode newChild);
    public sealed virtual bool hasChildNodes();
    public sealed virtual IJsNode cloneNode(bool deep);
    public sealed virtual void normalize();
    public sealed virtual bool isSupported(string feature, string version);
    public sealed virtual bool hasAttributes();
    public sealed virtual string get_nodeName();
    public sealed virtual string get_nodeValue();
    public sealed virtual void set_nodeValue(string value);
    public sealed virtual ushort get_nodeType();
    public sealed virtual IJsNode get_parentNode();
    public sealed virtual IJsNodeList get_childNodes();
    public sealed virtual IJsNode get_firstChild();
    public sealed virtual IJsNode get_lastChild();
    public sealed virtual IJsNode get_previousSibling();
    public sealed virtual IJsNode get_nextSibling();
    public sealed virtual IJsNamedNodeMap get_attributes();
    public sealed virtual IJsDocument get_ownerDocument();
    public sealed virtual string get_namespaceURI();
    public sealed virtual string get_prefix();
    public sealed virtual void set_prefix(string value);
    public sealed virtual string get_localName();
}
public class SharpVectors.Scripting.JsNodeList : JsObject`1<INodeList> {
    public ulong length { get; }
    public JsNodeList(INodeList baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsNode item(ulong index);
    public sealed virtual ulong get_length();
}
public class SharpVectors.Scripting.JsNotation : JsNode {
    public string publicId { get; }
    public string systemId { get; }
    public JsNotation(INotation baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_publicId();
    public sealed virtual string get_systemId();
}
public abstract class SharpVectors.Scripting.JsObject : DynamicObject {
    protected bool _isDisposed;
    protected static Object[] _wrapperArgs;
    private static JsObjectTypeDictionary _jsMappedTypes;
    protected object WrappedObject { get; }
    public bool IsDisposed { get; }
    private static JsObject();
    protected abstract virtual object get_WrappedObject();
    public bool get_IsDisposed();
    public static J CreateWrapper(object wrappableObject, ISvgScriptEngine scriptEngine);
    public static void RemoveWrapper(object wrappableObject, ISvgScriptEngine scriptEngine);
    private static void InitializeWrapperTypes();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(JsObject x, JsObject y);
    public static bool op_Inequality(JsObject x, JsObject y);
}
public abstract class SharpVectors.Scripting.JsObject`1 : JsObject {
    protected T _baseObject;
    protected ISvgScriptEngine _engine;
    public T BaseObject { get; }
    protected object WrappedObject { get; }
    protected JsObject`1(T baseObject, ISvgScriptEngine engine);
    protected virtual override void Finalize();
    public sealed virtual T get_BaseObject();
    protected virtual object get_WrappedObject();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class SharpVectors.Scripting.JsObjectReferenceCache : object {
    private ConditionalWeakTable`2<object, IScriptableObject> _jsCachedTypes;
    public sealed virtual void Add(object key, IScriptableObject value);
    public sealed virtual bool Remove(object key);
    public sealed virtual bool TryGetValue(object key, IScriptableObject& value);
}
[DefaultMemberAttribute("Item")]
public class SharpVectors.Scripting.JsObjectTypeDictionary : object {
    private Dictionary`2<string, Type> _objectTypes;
    public int Count { get; }
    public Type Item { get; public set; }
    public int get_Count();
    public Type get_Item(string key);
    public void set_Item(string key, Type value);
    public object CreateInstance(string key, Object[] args, BindingFlags flags);
    public object CreateInstance(string key, Object[] args);
}
public class SharpVectors.Scripting.JsProcessingInstruction : JsNode {
    public string target { get; }
    public string data { get; public set; }
    public JsProcessingInstruction(IProcessingInstruction baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_target();
    public sealed virtual string get_data();
    public sealed virtual void set_data(string value);
}
public class SharpVectors.Scripting.JsRect : JsObject`1<ICssRect> {
    public IJsCssPrimitiveValue top { get; }
    public IJsCssPrimitiveValue right { get; }
    public IJsCssPrimitiveValue bottom { get; }
    public IJsCssPrimitiveValue left { get; }
    public JsRect(ICssRect baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssPrimitiveValue get_top();
    public sealed virtual IJsCssPrimitiveValue get_right();
    public sealed virtual IJsCssPrimitiveValue get_bottom();
    public sealed virtual IJsCssPrimitiveValue get_left();
}
public class SharpVectors.Scripting.JsRgbColor : JsObject`1<ICssColor> {
    public IJsCssPrimitiveValue red { get; }
    public IJsCssPrimitiveValue green { get; }
    public IJsCssPrimitiveValue blue { get; }
    public JsRgbColor(ICssColor baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssPrimitiveValue get_red();
    public sealed virtual IJsCssPrimitiveValue get_green();
    public sealed virtual IJsCssPrimitiveValue get_blue();
}
public class SharpVectors.Scripting.JsStyleSheet : JsObject`1<IStyleSheet> {
    public string type { get; }
    public bool disabled { get; public set; }
    public IJsNode ownerNode { get; }
    public IJsStyleSheet parentStyleSheet { get; }
    public string href { get; }
    public string title { get; }
    public IJsMediaList media { get; }
    public JsStyleSheet(IStyleSheet baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_type();
    public sealed virtual bool get_disabled();
    public sealed virtual void set_disabled(bool value);
    public sealed virtual IJsNode get_ownerNode();
    public sealed virtual IJsStyleSheet get_parentStyleSheet();
    public sealed virtual string get_href();
    public sealed virtual string get_title();
    public sealed virtual IJsMediaList get_media();
}
public class SharpVectors.Scripting.JsStyleSheetList : JsObject`1<IStyleSheetList> {
    public ulong length { get; }
    public JsStyleSheetList(IStyleSheetList baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsStyleSheet item(ulong index);
    public sealed virtual ulong get_length();
}
public class SharpVectors.Scripting.JsSvgAElement : JsSvgElement {
    public IJsSvgAnimatedString target { get; }
    public IJsSvgAnimatedString href { get; }
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedTransformList transform { get; }
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    private ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.BaseObject { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    public JsSvgAElement(ISvgAElement baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual IJsSvgAnimatedString get_target();
    public sealed virtual IJsSvgAnimatedString get_href();
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedTransformList get_transform();
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
    private sealed virtual override ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.get_BaseObject();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgAltGlyphDefElement : JsSvgElement {
    public JsSvgAltGlyphDefElement(ISvgAltGlyphDefElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgAltGlyphElement : JsSvgTextPositioningElement {
    public string glyphRef { get; public set; }
    public string format { get; public set; }
    public IJsSvgAnimatedString href { get; }
    private ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.BaseObject { get; }
    public JsSvgAltGlyphElement(ISvgAltGlyphElement baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_glyphRef();
    public sealed virtual void set_glyphRef(string value);
    public sealed virtual string get_format();
    public sealed virtual void set_format(string value);
    public sealed virtual IJsSvgAnimatedString get_href();
    private sealed virtual override ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgAltGlyphItemElement : JsSvgElement {
    public JsSvgAltGlyphItemElement(ISvgAltGlyphItemElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgAngle : JsObject`1<ISvgAngle> {
    public ushort unitType { get; }
    public float value { get; public set; }
    public float valueInSpecifiedUnits { get; public set; }
    public string valueAsString { get; public set; }
    public JsSvgAngle(ISvgAngle baseObject, ISvgScriptEngine engine);
    public sealed virtual void newValueSpecifiedUnits(ushort unitType, float valueInSpecifiedUnits);
    public sealed virtual void convertToSpecifiedUnits(ushort unitType);
    public sealed virtual ushort get_unitType();
    public sealed virtual float get_value();
    public sealed virtual void set_value(float value);
    public sealed virtual float get_valueInSpecifiedUnits();
    public sealed virtual void set_valueInSpecifiedUnits(float value);
    public sealed virtual string get_valueAsString();
    public sealed virtual void set_valueAsString(string value);
}
public class SharpVectors.Scripting.JsSvgAnimateColorElement : JsSvgAnimationElement {
    public JsSvgAnimateColorElement(ISvgAnimateColorElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgAnimatedAngle : JsObject`1<ISvgAnimatedAngle> {
    public IJsSvgAngle baseVal { get; }
    public IJsSvgAngle animVal { get; }
    public JsSvgAnimatedAngle(ISvgAnimatedAngle baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgAngle get_baseVal();
    public sealed virtual IJsSvgAngle get_animVal();
}
public class SharpVectors.Scripting.JsSvgAnimatedBoolean : JsObject`1<ISvgAnimatedBoolean> {
    public bool baseVal { get; public set; }
    public bool animVal { get; }
    public JsSvgAnimatedBoolean(ISvgAnimatedBoolean baseObject, ISvgScriptEngine engine);
    public sealed virtual bool get_baseVal();
    public sealed virtual void set_baseVal(bool value);
    public sealed virtual bool get_animVal();
}
public class SharpVectors.Scripting.JsSvgAnimatedEnumeration : JsObject`1<ISvgAnimatedEnumeration> {
    public ushort baseVal { get; public set; }
    public ushort animVal { get; }
    public JsSvgAnimatedEnumeration(ISvgAnimatedEnumeration baseObject, ISvgScriptEngine engine);
    public sealed virtual ushort get_baseVal();
    public sealed virtual void set_baseVal(ushort value);
    public sealed virtual ushort get_animVal();
}
public class SharpVectors.Scripting.JsSvgAnimatedInteger : JsObject`1<ISvgAnimatedInteger> {
    public long baseVal { get; public set; }
    public long animVal { get; }
    public JsSvgAnimatedInteger(ISvgAnimatedInteger baseObject, ISvgScriptEngine engine);
    public sealed virtual long get_baseVal();
    public sealed virtual void set_baseVal(long value);
    public sealed virtual long get_animVal();
}
public class SharpVectors.Scripting.JsSvgAnimatedLength : JsObject`1<ISvgAnimatedLength> {
    public IJsSvgLength baseVal { get; }
    public IJsSvgLength animVal { get; }
    public JsSvgAnimatedLength(ISvgAnimatedLength baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgLength get_baseVal();
    public sealed virtual IJsSvgLength get_animVal();
}
public class SharpVectors.Scripting.JsSvgAnimatedLengthList : JsObject`1<ISvgAnimatedLengthList> {
    public IJsSvgLengthList baseVal { get; }
    public IJsSvgLengthList animVal { get; }
    public JsSvgAnimatedLengthList(ISvgAnimatedLengthList baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgLengthList get_baseVal();
    public sealed virtual IJsSvgLengthList get_animVal();
}
public class SharpVectors.Scripting.JsSvgAnimatedNumber : JsObject`1<ISvgAnimatedNumber> {
    public float baseVal { get; public set; }
    public float animVal { get; }
    public JsSvgAnimatedNumber(ISvgAnimatedNumber baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_baseVal();
    public sealed virtual void set_baseVal(float value);
    public sealed virtual float get_animVal();
}
public class SharpVectors.Scripting.JsSvgAnimatedNumberList : JsObject`1<ISvgAnimatedNumberList> {
    public IJsSvgNumberList baseVal { get; }
    public IJsSvgNumberList animVal { get; }
    public JsSvgAnimatedNumberList(ISvgAnimatedNumberList baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgNumberList get_baseVal();
    public sealed virtual IJsSvgNumberList get_animVal();
}
public class SharpVectors.Scripting.JsSvgAnimatedPathData : JsObject`1<ISvgAnimatedPathData> {
    public IJsSvgPathSegList pathSegList { get; }
    public IJsSvgPathSegList normalizedPathSegList { get; }
    public IJsSvgPathSegList animatedPathSegList { get; }
    public IJsSvgPathSegList animatedNormalizedPathSegList { get; }
    public JsSvgAnimatedPathData(ISvgAnimatedPathData baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgPathSegList get_pathSegList();
    public sealed virtual IJsSvgPathSegList get_normalizedPathSegList();
    public sealed virtual IJsSvgPathSegList get_animatedPathSegList();
    public sealed virtual IJsSvgPathSegList get_animatedNormalizedPathSegList();
}
public class SharpVectors.Scripting.JsSvgAnimatedPoints : JsObject`1<ISvgAnimatedPoints> {
    public IJsSvgPointList points { get; }
    public IJsSvgPointList animatedPoints { get; }
    public JsSvgAnimatedPoints(ISvgAnimatedPoints baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgPointList get_points();
    public sealed virtual IJsSvgPointList get_animatedPoints();
}
public class SharpVectors.Scripting.JsSvgAnimatedPreserveAspectRatio : JsObject`1<ISvgAnimatedPreserveAspectRatio> {
    public IJsSvgPreserveAspectRatio baseVal { get; }
    public IJsSvgPreserveAspectRatio animVal { get; }
    public JsSvgAnimatedPreserveAspectRatio(ISvgAnimatedPreserveAspectRatio baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgPreserveAspectRatio get_baseVal();
    public sealed virtual IJsSvgPreserveAspectRatio get_animVal();
}
public class SharpVectors.Scripting.JsSvgAnimatedRect : JsObject`1<ISvgAnimatedRect> {
    public IJsSvgRect baseVal { get; }
    public IJsSvgRect animVal { get; }
    public JsSvgAnimatedRect(ISvgAnimatedRect baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgRect get_baseVal();
    public sealed virtual IJsSvgRect get_animVal();
}
public class SharpVectors.Scripting.JsSvgAnimatedString : JsObject`1<ISvgAnimatedString> {
    public string baseVal { get; public set; }
    public string animVal { get; }
    public JsSvgAnimatedString(ISvgAnimatedString baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_baseVal();
    public sealed virtual void set_baseVal(string value);
    public sealed virtual string get_animVal();
}
public class SharpVectors.Scripting.JsSvgAnimatedTransformList : JsObject`1<ISvgAnimatedTransformList> {
    public IJsSvgTransformList baseVal { get; }
    public IJsSvgTransformList animVal { get; }
    public JsSvgAnimatedTransformList(ISvgAnimatedTransformList baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgTransformList get_baseVal();
    public sealed virtual IJsSvgTransformList get_animVal();
}
public class SharpVectors.Scripting.JsSvgAnimateElement : JsSvgAnimationElement {
    public JsSvgAnimateElement(ISvgAnimateElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgAnimateMotionElement : JsSvgAnimationElement {
    public JsSvgAnimateMotionElement(ISvgAnimateMotionElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgAnimateTransformElement : JsSvgAnimationElement {
    public JsSvgAnimateTransformElement(ISvgAnimateTransformElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgAnimationElement : JsSvgElement {
    public IJsSvgElement targetElement { get; }
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public bool externalResourcesRequired { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    public JsSvgAnimationElement(ISvgAnimationElement baseObject, ISvgScriptEngine engine);
    public sealed virtual float getStartTime();
    public sealed virtual float getCurrentTime();
    public sealed virtual float getSimpleDuration();
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual void beginElement();
    public sealed virtual void beginElementAt(float offset);
    public sealed virtual void endElement();
    public sealed virtual void endElementAt(float offset);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual IJsSvgElement get_targetElement();
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual bool get_externalResourcesRequired();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgCircleElement : JsSvgElement {
    public IJsSvgAnimatedLength cx { get; }
    public IJsSvgAnimatedLength cy { get; }
    public IJsSvgAnimatedLength r { get; }
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedTransformList transform { get; }
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    public JsSvgCircleElement(ISvgCircleElement baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual IJsSvgAnimatedLength get_cx();
    public sealed virtual IJsSvgAnimatedLength get_cy();
    public sealed virtual IJsSvgAnimatedLength get_r();
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedTransformList get_transform();
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgClipPathElement : JsSvgElement {
    public IJsSvgAnimatedEnumeration clipPathUnits { get; }
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedTransformList transform { get; }
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.BaseObject { get; }
    private ISvgUnitTypes SharpVectors.Scripting.IScriptableObject<SharpVectors.Scripting.ISvgUnitTypes>.BaseObject { get; }
    public JsSvgClipPathElement(ISvgClipPathElement baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual IJsSvgAnimatedEnumeration get_clipPathUnits();
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedTransformList get_transform();
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.get_BaseObject();
    private sealed virtual override ISvgUnitTypes SharpVectors.Scripting.IScriptableObject<SharpVectors.Scripting.ISvgUnitTypes>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgColor : JsCssValue {
    public ushort colorType { get; }
    public IJsRgbColor rgbColor { get; }
    public IJsSvgIccColor iccColor { get; }
    public JsSvgColor(ISvgColor baseObject, ISvgScriptEngine engine);
    public sealed virtual void setRGBColor(string rgbColor);
    public sealed virtual void setRGBColorICCColor(string rgbColor, string iccColor);
    public sealed virtual void setColor(ushort colorType, string rgbColor, string iccColor);
    public sealed virtual ushort get_colorType();
    public sealed virtual IJsRgbColor get_rgbColor();
    public sealed virtual IJsSvgIccColor get_iccColor();
}
public class SharpVectors.Scripting.JsSvgColorProfileElement : JsSvgElement {
    public string local { get; public set; }
    public string name { get; public set; }
    public ushort renderingIntent { get; public set; }
    public IJsSvgAnimatedString href { get; }
    private ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.BaseObject { get; }
    private ISvgRenderingIntent SharpVectors.Scripting.IScriptableObject<SharpVectors.Scripting.ISvgRenderingIntent>.BaseObject { get; }
    public JsSvgColorProfileElement(ISvgColorProfileElement baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_local();
    public sealed virtual void set_local(string value);
    public sealed virtual string get_name();
    public sealed virtual void set_name(string value);
    public sealed virtual ushort get_renderingIntent();
    public sealed virtual void set_renderingIntent(ushort value);
    public sealed virtual IJsSvgAnimatedString get_href();
    private sealed virtual override ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.get_BaseObject();
    private sealed virtual override ISvgRenderingIntent SharpVectors.Scripting.IScriptableObject<SharpVectors.Scripting.ISvgRenderingIntent>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgColorProfileRule : JsSvgCssRule {
    public string src { get; public set; }
    public string name { get; public set; }
    public ushort renderingIntent { get; public set; }
    private ISvgRenderingIntent SharpVectors.Scripting.IScriptableObject<SharpVectors.Scripting.ISvgRenderingIntent>.BaseObject { get; }
    public JsSvgColorProfileRule(ISvgColorProfileRule baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_src();
    public sealed virtual void set_src(string value);
    public sealed virtual string get_name();
    public sealed virtual void set_name(string value);
    public sealed virtual ushort get_renderingIntent();
    public sealed virtual void set_renderingIntent(ushort value);
    private sealed virtual override ISvgRenderingIntent SharpVectors.Scripting.IScriptableObject<SharpVectors.Scripting.ISvgRenderingIntent>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgComponentTransferFunctionElement : JsSvgElement {
    public IJsSvgAnimatedEnumeration type { get; }
    public IJsSvgAnimatedNumberList tableValues { get; }
    public IJsSvgAnimatedNumber slope { get; }
    public IJsSvgAnimatedNumber intercept { get; }
    public IJsSvgAnimatedNumber amplitude { get; }
    public IJsSvgAnimatedNumber exponent { get; }
    public IJsSvgAnimatedNumber offset { get; }
    public JsSvgComponentTransferFunctionElement(ISvgComponentTransferFunctionElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgAnimatedEnumeration get_type();
    public sealed virtual IJsSvgAnimatedNumberList get_tableValues();
    public sealed virtual IJsSvgAnimatedNumber get_slope();
    public sealed virtual IJsSvgAnimatedNumber get_intercept();
    public sealed virtual IJsSvgAnimatedNumber get_amplitude();
    public sealed virtual IJsSvgAnimatedNumber get_exponent();
    public sealed virtual IJsSvgAnimatedNumber get_offset();
}
public class SharpVectors.Scripting.JsSvgCssRule : JsCssRule {
    public JsSvgCssRule(ICssRule baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgCursorElement : JsSvgElement {
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedString href { get; }
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public bool externalResourcesRequired { get; }
    private ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.BaseObject { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    public JsSvgCursorElement(ISvgCursorElement baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedString get_href();
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual bool get_externalResourcesRequired();
    private sealed virtual override ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.get_BaseObject();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgDefinitionSrcElement : JsSvgElement {
    public JsSvgDefinitionSrcElement(ISvgDefinitionSrcElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgDefsElement : JsSvgElement {
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedTransformList transform { get; }
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    public JsSvgDefsElement(ISvgDefsElement baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedTransformList get_transform();
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgDescElement : JsSvgElement {
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgDescElement(ISvgDescElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgDocument : JsDocument {
    public string title { get; }
    public string referrer { get; }
    public string domain { get; }
    public string URL { get; }
    public IJsSvgSvgElement rootElement { get; }
    private IDocumentEvent SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IDocumentEvent>.BaseObject { get; }
    public JsSvgDocument(ISvgDocument baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsEvent createEvent(string eventType);
    public sealed virtual string get_title();
    public sealed virtual string get_referrer();
    public sealed virtual string get_domain();
    public sealed virtual string get_URL();
    public sealed virtual IJsSvgSvgElement get_rootElement();
    private sealed virtual override IDocumentEvent SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IDocumentEvent>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgElement : JsElement {
    public string id { get; public set; }
    public string xmlbase { get; public set; }
    public IJsSvgSvgElement ownerSVGElement { get; }
    public IJsSvgElement viewportElement { get; }
    public JsSvgElement(ISvgElement baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_id();
    public sealed virtual void set_id(string value);
    public sealed virtual string get_xmlbase();
    public sealed virtual void set_xmlbase(string value);
    public sealed virtual IJsSvgSvgElement get_ownerSVGElement();
    public sealed virtual IJsSvgElement get_viewportElement();
}
public class SharpVectors.Scripting.JsSvgElementInstance : JsEventTarget {
    public IJsSvgElement correspondingElement { get; }
    public IJsSvgUseElement correspondingUseElement { get; }
    public IJsSvgElementInstance parentNode { get; }
    public IJsSvgElementInstanceList childNodes { get; }
    public IJsSvgElementInstance firstChild { get; }
    public IJsSvgElementInstance lastChild { get; }
    public IJsSvgElementInstance previousSibling { get; }
    public IJsSvgElementInstance nextSibling { get; }
    public JsSvgElementInstance(ISvgElementInstance baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgElement get_correspondingElement();
    public sealed virtual IJsSvgUseElement get_correspondingUseElement();
    public sealed virtual IJsSvgElementInstance get_parentNode();
    public sealed virtual IJsSvgElementInstanceList get_childNodes();
    public sealed virtual IJsSvgElementInstance get_firstChild();
    public sealed virtual IJsSvgElementInstance get_lastChild();
    public sealed virtual IJsSvgElementInstance get_previousSibling();
    public sealed virtual IJsSvgElementInstance get_nextSibling();
}
public class SharpVectors.Scripting.JsSvgElementInstanceList : JsObject`1<ISvgElementInstanceList> {
    public ulong length { get; }
    public JsSvgElementInstanceList(ISvgElementInstanceList baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgElementInstance item(ulong index);
    public sealed virtual ulong get_length();
}
public class SharpVectors.Scripting.JsSvgEllipseElement : JsSvgElement {
    public IJsSvgAnimatedLength cx { get; }
    public IJsSvgAnimatedLength cy { get; }
    public IJsSvgAnimatedLength rx { get; }
    public IJsSvgAnimatedLength ry { get; }
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedTransformList transform { get; }
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    public JsSvgEllipseElement(ISvgEllipseElement baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual IJsSvgAnimatedLength get_cx();
    public sealed virtual IJsSvgAnimatedLength get_cy();
    public sealed virtual IJsSvgAnimatedLength get_rx();
    public sealed virtual IJsSvgAnimatedLength get_ry();
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedTransformList get_transform();
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgEvent : JsEvent {
    public JsSvgEvent(ISvgEvent baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgExternalResourcesRequired : JsObject`1<ISvgExternalResourcesRequired> {
    public bool externalResourcesRequired { get; }
    public JsSvgExternalResourcesRequired(ISvgExternalResourcesRequired baseObject, ISvgScriptEngine engine);
    public sealed virtual bool get_externalResourcesRequired();
}
public class SharpVectors.Scripting.JsSvgFEBlendElement : JsSvgElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedString in2 { get; }
    public IJsSvgAnimatedEnumeration mode { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgFEBlendElement(ISvgFEBlendElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedString get_in1();
    public sealed virtual IJsSvgAnimatedString get_in2();
    public sealed virtual IJsSvgAnimatedEnumeration get_mode();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_result();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFEColorMatrixElement : JsSvgElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedEnumeration type { get; }
    public IJsSvgAnimatedNumberList values { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgFEColorMatrixElement(ISvgFEColorMatrixElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedString get_in1();
    public sealed virtual IJsSvgAnimatedEnumeration get_type();
    public sealed virtual IJsSvgAnimatedNumberList get_values();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_result();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFEComponentTransferElement : JsSvgElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgFEComponentTransferElement(ISvgFEComponentTransferElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedString get_in1();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_result();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFECompositeElement : JsSvgElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedString in2 { get; }
    public IJsSvgAnimatedEnumeration operator_ { get; }
    public IJsSvgAnimatedNumber k1 { get; }
    public IJsSvgAnimatedNumber k2 { get; }
    public IJsSvgAnimatedNumber k3 { get; }
    public IJsSvgAnimatedNumber k4 { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgFECompositeElement(ISvgFECompositeElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedString get_in1();
    public sealed virtual IJsSvgAnimatedString get_in2();
    public sealed virtual IJsSvgAnimatedEnumeration get_operator_();
    public sealed virtual IJsSvgAnimatedNumber get_k1();
    public sealed virtual IJsSvgAnimatedNumber get_k2();
    public sealed virtual IJsSvgAnimatedNumber get_k3();
    public sealed virtual IJsSvgAnimatedNumber get_k4();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_result();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFEConvolveMatrixElement : JsSvgElement {
    public IJsSvgAnimatedInteger orderX { get; }
    public IJsSvgAnimatedInteger orderY { get; }
    public IJsSvgAnimatedNumberList kernelMatrix { get; }
    public IJsSvgAnimatedNumber divisor { get; }
    public IJsSvgAnimatedNumber bias { get; }
    public IJsSvgAnimatedInteger targetX { get; }
    public IJsSvgAnimatedInteger targetY { get; }
    public IJsSvgAnimatedEnumeration edgeMode { get; }
    public IJsSvgAnimatedLength kernelUnitLengthX { get; }
    public IJsSvgAnimatedLength kernelUnitLengthY { get; }
    public IJsSvgAnimatedBoolean preserveAlpha { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgFEConvolveMatrixElement(ISvgFEConvolveMatrixElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedInteger get_orderX();
    public sealed virtual IJsSvgAnimatedInteger get_orderY();
    public sealed virtual IJsSvgAnimatedNumberList get_kernelMatrix();
    public sealed virtual IJsSvgAnimatedNumber get_divisor();
    public sealed virtual IJsSvgAnimatedNumber get_bias();
    public sealed virtual IJsSvgAnimatedInteger get_targetX();
    public sealed virtual IJsSvgAnimatedInteger get_targetY();
    public sealed virtual IJsSvgAnimatedEnumeration get_edgeMode();
    public sealed virtual IJsSvgAnimatedLength get_kernelUnitLengthX();
    public sealed virtual IJsSvgAnimatedLength get_kernelUnitLengthY();
    public sealed virtual IJsSvgAnimatedBoolean get_preserveAlpha();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_result();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFEDiffuseLightingElement : JsSvgElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedNumber surfaceScale { get; }
    public IJsSvgAnimatedNumber diffuseConstant { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgFEDiffuseLightingElement(ISvgFEDiffuseLightingElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedString get_in1();
    public sealed virtual IJsSvgAnimatedNumber get_surfaceScale();
    public sealed virtual IJsSvgAnimatedNumber get_diffuseConstant();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_result();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFEDisplacementMapElement : JsSvgElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedString in2 { get; }
    public IJsSvgAnimatedNumber scale { get; }
    public IJsSvgAnimatedEnumeration xChannelSelector { get; }
    public IJsSvgAnimatedEnumeration yChannelSelector { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgFEDisplacementMapElement(ISvgFEDisplacementMapElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedString get_in1();
    public sealed virtual IJsSvgAnimatedString get_in2();
    public sealed virtual IJsSvgAnimatedNumber get_scale();
    public sealed virtual IJsSvgAnimatedEnumeration get_xChannelSelector();
    public sealed virtual IJsSvgAnimatedEnumeration get_yChannelSelector();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_result();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFEDistantLightElement : JsSvgElement {
    public IJsSvgAnimatedNumber azimuth { get; }
    public IJsSvgAnimatedNumber elevation { get; }
    public JsSvgFEDistantLightElement(ISvgFEDistantLightElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgAnimatedNumber get_azimuth();
    public sealed virtual IJsSvgAnimatedNumber get_elevation();
}
public class SharpVectors.Scripting.JsSvgFEFloodElement : JsSvgElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgFEFloodElement(ISvgFEFloodElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedString get_in1();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_result();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFEFuncAElement : JsSvgComponentTransferFunctionElement {
    public JsSvgFEFuncAElement(ISvgFEFuncAElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgFEFuncBElement : JsSvgComponentTransferFunctionElement {
    public JsSvgFEFuncBElement(ISvgFEFuncBElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgFEFuncGElement : JsSvgComponentTransferFunctionElement {
    public JsSvgFEFuncGElement(ISvgFEFuncGElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgFEFuncRElement : JsSvgComponentTransferFunctionElement {
    public JsSvgFEFuncRElement(ISvgFEFuncRElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgFEGaussianBlurElement : JsSvgElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedNumber stdDeviationX { get; }
    public IJsSvgAnimatedNumber stdDeviationY { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgFEGaussianBlurElement(ISvgFEGaussianBlurElement baseObject, ISvgScriptEngine engine);
    public sealed virtual void setStdDeviation(float stdDeviationX, float stdDeviationY);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedString get_in1();
    public sealed virtual IJsSvgAnimatedNumber get_stdDeviationX();
    public sealed virtual IJsSvgAnimatedNumber get_stdDeviationY();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_result();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFEImageElement : JsSvgElement {
    public IJsSvgAnimatedString href { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgFEImageElement(ISvgFEImageElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedString get_href();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_result();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFEMergeElement : JsSvgElement {
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgFEMergeElement(ISvgFEMergeElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_result();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFEMergeNodeElement : JsSvgElement {
    public IJsSvgAnimatedString in1 { get; }
    public JsSvgFEMergeNodeElement(ISvgFEMergeNodeElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgAnimatedString get_in1();
}
public class SharpVectors.Scripting.JsSvgFEMorphologyElement : JsSvgElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedEnumeration operator_ { get; }
    public IJsSvgAnimatedLength radiusX { get; }
    public IJsSvgAnimatedLength radiusY { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgFEMorphologyElement(ISvgFEMorphologyElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedString get_in1();
    public sealed virtual IJsSvgAnimatedEnumeration get_operator_();
    public sealed virtual IJsSvgAnimatedLength get_radiusX();
    public sealed virtual IJsSvgAnimatedLength get_radiusY();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_result();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFEOffsetElement : JsSvgElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedNumber dx { get; }
    public IJsSvgAnimatedNumber dy { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgFEOffsetElement(ISvgFEOffsetElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedString get_in1();
    public sealed virtual IJsSvgAnimatedNumber get_dx();
    public sealed virtual IJsSvgAnimatedNumber get_dy();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_result();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFEPointLightElement : JsSvgElement {
    public IJsSvgAnimatedNumber x { get; }
    public IJsSvgAnimatedNumber y { get; }
    public IJsSvgAnimatedNumber z { get; }
    public JsSvgFEPointLightElement(ISvgFEPointLightElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgAnimatedNumber get_x();
    public sealed virtual IJsSvgAnimatedNumber get_y();
    public sealed virtual IJsSvgAnimatedNumber get_z();
}
public class SharpVectors.Scripting.JsSvgFESpecularLightingElement : JsSvgElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedNumber surfaceScale { get; }
    public IJsSvgAnimatedNumber specularConstant { get; }
    public IJsSvgAnimatedNumber specularExponent { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgFESpecularLightingElement(ISvgFESpecularLightingElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedString get_in1();
    public sealed virtual IJsSvgAnimatedNumber get_surfaceScale();
    public sealed virtual IJsSvgAnimatedNumber get_specularConstant();
    public sealed virtual IJsSvgAnimatedNumber get_specularExponent();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_result();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFESpotLightElement : JsSvgElement {
    public IJsSvgAnimatedNumber x { get; }
    public IJsSvgAnimatedNumber y { get; }
    public IJsSvgAnimatedNumber z { get; }
    public IJsSvgAnimatedNumber pointsAtX { get; }
    public IJsSvgAnimatedNumber pointsAtY { get; }
    public IJsSvgAnimatedNumber pointsAtZ { get; }
    public IJsSvgAnimatedNumber specularExponent { get; }
    public IJsSvgAnimatedNumber limitingConeAngle { get; }
    public JsSvgFESpotLightElement(ISvgFESpotLightElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgAnimatedNumber get_x();
    public sealed virtual IJsSvgAnimatedNumber get_y();
    public sealed virtual IJsSvgAnimatedNumber get_z();
    public sealed virtual IJsSvgAnimatedNumber get_pointsAtX();
    public sealed virtual IJsSvgAnimatedNumber get_pointsAtY();
    public sealed virtual IJsSvgAnimatedNumber get_pointsAtZ();
    public sealed virtual IJsSvgAnimatedNumber get_specularExponent();
    public sealed virtual IJsSvgAnimatedNumber get_limitingConeAngle();
}
public class SharpVectors.Scripting.JsSvgFETileElement : JsSvgElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgFETileElement(ISvgFETileElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedString get_in1();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_result();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFETurbulenceElement : JsSvgElement {
    public IJsSvgAnimatedNumber baseFrequencyX { get; }
    public IJsSvgAnimatedNumber baseFrequencyY { get; }
    public IJsSvgAnimatedInteger numOctaves { get; }
    public IJsSvgAnimatedNumber seed { get; }
    public IJsSvgAnimatedEnumeration stitchTiles { get; }
    public IJsSvgAnimatedEnumeration type { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgFETurbulenceElement(ISvgFETurbulenceElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedNumber get_baseFrequencyX();
    public sealed virtual IJsSvgAnimatedNumber get_baseFrequencyY();
    public sealed virtual IJsSvgAnimatedInteger get_numOctaves();
    public sealed virtual IJsSvgAnimatedNumber get_seed();
    public sealed virtual IJsSvgAnimatedEnumeration get_stitchTiles();
    public sealed virtual IJsSvgAnimatedEnumeration get_type();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_result();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFilterElement : JsSvgElement {
    public IJsSvgAnimatedEnumeration filterUnits { get; }
    public IJsSvgAnimatedEnumeration primitiveUnits { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedInteger filterResX { get; }
    public IJsSvgAnimatedInteger filterResY { get; }
    public IJsSvgAnimatedString href { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgUnitTypes SharpVectors.Scripting.IScriptableObject<SharpVectors.Scripting.ISvgUnitTypes>.BaseObject { get; }
    public JsSvgFilterElement(ISvgFilterElement baseObject, ISvgScriptEngine engine);
    public sealed virtual void setFilterRes(ulong filterResX, ulong filterResY);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedEnumeration get_filterUnits();
    public sealed virtual IJsSvgAnimatedEnumeration get_primitiveUnits();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedInteger get_filterResX();
    public sealed virtual IJsSvgAnimatedInteger get_filterResY();
    public sealed virtual IJsSvgAnimatedString get_href();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgUnitTypes SharpVectors.Scripting.IScriptableObject<SharpVectors.Scripting.ISvgUnitTypes>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFilterPrimitiveStandardAttributes : JsSvgStylable {
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public JsSvgFilterPrimitiveStandardAttributes(ISvgFilterPrimitiveStandardAttributes baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_result();
}
public class SharpVectors.Scripting.JsSvgFitToViewBox : JsObject`1<ISvgFitToViewBox> {
    public IJsSvgAnimatedRect viewBox { get; }
    public IJsSvgAnimatedPreserveAspectRatio preserveAspectRatio { get; }
    public JsSvgFitToViewBox(ISvgFitToViewBox baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgAnimatedRect get_viewBox();
    public sealed virtual IJsSvgAnimatedPreserveAspectRatio get_preserveAspectRatio();
}
public class SharpVectors.Scripting.JsSvgFontElement : JsSvgElement {
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgFontElement(ISvgFontElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgFontFaceElement : JsSvgElement {
    public JsSvgFontFaceElement(ISvgFontFaceElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgFontFaceFormatElement : JsSvgElement {
    public JsSvgFontFaceFormatElement(ISvgFontFaceFormatElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgFontFaceNameElement : JsSvgElement {
    public JsSvgFontFaceNameElement(ISvgFontFaceNameElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgFontFaceSrcElement : JsSvgElement {
    public JsSvgFontFaceSrcElement(ISvgFontFaceSrcElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgFontFaceUriElement : JsSvgElement {
    public JsSvgFontFaceUriElement(ISvgFontFaceUriElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgForeignObjectElement : JsSvgElement {
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedTransformList transform { get; }
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    public JsSvgForeignObjectElement(ISvgForeignObjectElement baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedTransformList get_transform();
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgGElement : JsSvgElement {
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedTransformList transform { get; }
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    public JsSvgGElement(ISvgGElement baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedTransformList get_transform();
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgGlyphElement : JsSvgElement {
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgGlyphElement(ISvgGlyphElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgGlyphRefElement : JsSvgElement {
    public string glyphRef { get; public set; }
    public string format { get; public set; }
    public float x { get; public set; }
    public float y { get; public set; }
    public float dx { get; public set; }
    public float dy { get; public set; }
    public IJsSvgAnimatedString href { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgGlyphRefElement(ISvgGlyphRefElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual string get_glyphRef();
    public sealed virtual void set_glyphRef(string value);
    public sealed virtual string get_format();
    public sealed virtual void set_format(string value);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
    public sealed virtual float get_dx();
    public sealed virtual void set_dx(float value);
    public sealed virtual float get_dy();
    public sealed virtual void set_dy(float value);
    public sealed virtual IJsSvgAnimatedString get_href();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgGradientElement : JsSvgElement {
    public IJsSvgAnimatedEnumeration gradientUnits { get; }
    public IJsSvgAnimatedTransformList gradientTransform { get; }
    public IJsSvgAnimatedEnumeration spreadMethod { get; }
    public IJsSvgAnimatedString href { get; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgUnitTypes SharpVectors.Scripting.IScriptableObject<SharpVectors.Scripting.ISvgUnitTypes>.BaseObject { get; }
    public JsSvgGradientElement(ISvgGradientElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedEnumeration get_gradientUnits();
    public sealed virtual IJsSvgAnimatedTransformList get_gradientTransform();
    public sealed virtual IJsSvgAnimatedEnumeration get_spreadMethod();
    public sealed virtual IJsSvgAnimatedString get_href();
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgUnitTypes SharpVectors.Scripting.IScriptableObject<SharpVectors.Scripting.ISvgUnitTypes>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgHKernElement : JsSvgElement {
    public JsSvgHKernElement(ISvgHKernElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgIccColor : JsObject`1<ISvgIccColor> {
    public string colorProfile { get; public set; }
    public IJsSvgNumberList colors { get; }
    public JsSvgIccColor(ISvgIccColor baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_colorProfile();
    public sealed virtual void set_colorProfile(string value);
    public sealed virtual IJsSvgNumberList get_colors();
}
public class SharpVectors.Scripting.JsSvgImageElement : JsSvgElement {
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedPreserveAspectRatio preserveAspectRatio { get; }
    public IJsSvgAnimatedString href { get; }
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedTransformList transform { get; }
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    private ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.BaseObject { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    public JsSvgImageElement(ISvgImageElement baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedPreserveAspectRatio get_preserveAspectRatio();
    public sealed virtual IJsSvgAnimatedString get_href();
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedTransformList get_transform();
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
    private sealed virtual override ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.get_BaseObject();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgLangSpace : JsObject`1<ISvgLangSpace> {
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public JsSvgLangSpace(ISvgLangSpace baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
}
public class SharpVectors.Scripting.JsSvgLength : JsObject`1<ISvgLength> {
    public ushort unitType { get; }
    public float value { get; public set; }
    public float valueInSpecifiedUnits { get; public set; }
    public string valueAsString { get; public set; }
    public JsSvgLength(ISvgLength baseObject, ISvgScriptEngine engine);
    public sealed virtual void newValueSpecifiedUnits(ushort unitType, float valueInSpecifiedUnits);
    public sealed virtual void convertToSpecifiedUnits(ushort unitType);
    public sealed virtual ushort get_unitType();
    public sealed virtual float get_value();
    public sealed virtual void set_value(float value);
    public sealed virtual float get_valueInSpecifiedUnits();
    public sealed virtual void set_valueInSpecifiedUnits(float value);
    public sealed virtual string get_valueAsString();
    public sealed virtual void set_valueAsString(string value);
}
public class SharpVectors.Scripting.JsSvgLengthList : JsObject`1<ISvgLengthList> {
    public ulong numberOfItems { get; }
    public JsSvgLengthList(ISvgLengthList baseObject, ISvgScriptEngine engine);
    public sealed virtual void clear();
    public sealed virtual IJsSvgLength initialize(IJsSvgLength newItem);
    public sealed virtual IJsSvgLength getItem(ulong index);
    public sealed virtual IJsSvgLength insertItemBefore(IJsSvgLength newItem, ulong index);
    public sealed virtual IJsSvgLength replaceItem(IJsSvgLength newItem, ulong index);
    public sealed virtual IJsSvgLength removeItem(ulong index);
    public sealed virtual IJsSvgLength appendItem(IJsSvgLength newItem);
    public sealed virtual ulong get_numberOfItems();
}
public class SharpVectors.Scripting.JsSvgLinearGradientElement : JsSvgGradientElement {
    public IJsSvgAnimatedLength x1 { get; }
    public IJsSvgAnimatedLength y1 { get; }
    public IJsSvgAnimatedLength x2 { get; }
    public IJsSvgAnimatedLength y2 { get; }
    public JsSvgLinearGradientElement(ISvgLinearGradientElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgAnimatedLength get_x1();
    public sealed virtual IJsSvgAnimatedLength get_y1();
    public sealed virtual IJsSvgAnimatedLength get_x2();
    public sealed virtual IJsSvgAnimatedLength get_y2();
}
public class SharpVectors.Scripting.JsSvgLineElement : JsSvgElement {
    public IJsSvgAnimatedLength x1 { get; }
    public IJsSvgAnimatedLength y1 { get; }
    public IJsSvgAnimatedLength x2 { get; }
    public IJsSvgAnimatedLength y2 { get; }
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedTransformList transform { get; }
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    public JsSvgLineElement(ISvgLineElement baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual IJsSvgAnimatedLength get_x1();
    public sealed virtual IJsSvgAnimatedLength get_y1();
    public sealed virtual IJsSvgAnimatedLength get_x2();
    public sealed virtual IJsSvgAnimatedLength get_y2();
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedTransformList get_transform();
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgLocatable : JsObject`1<ISvgLocatable> {
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    public JsSvgLocatable(ISvgLocatable baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
}
public class SharpVectors.Scripting.JsSvgMarkerElement : JsSvgElement {
    public IJsSvgAnimatedLength refX { get; }
    public IJsSvgAnimatedLength refY { get; }
    public IJsSvgAnimatedEnumeration markerUnits { get; }
    public IJsSvgAnimatedLength markerWidth { get; }
    public IJsSvgAnimatedLength markerHeight { get; }
    public IJsSvgAnimatedEnumeration orientType { get; }
    public IJsSvgAnimatedAngle orientAngle { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedRect viewBox { get; }
    public IJsSvgAnimatedPreserveAspectRatio preserveAspectRatio { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgFitToViewBox SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgFitToViewBox>.BaseObject { get; }
    public JsSvgMarkerElement(ISvgMarkerElement baseObject, ISvgScriptEngine engine);
    public sealed virtual void setOrientToAuto();
    public sealed virtual void setOrientToAngle(IJsSvgAngle angle);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedLength get_refX();
    public sealed virtual IJsSvgAnimatedLength get_refY();
    public sealed virtual IJsSvgAnimatedEnumeration get_markerUnits();
    public sealed virtual IJsSvgAnimatedLength get_markerWidth();
    public sealed virtual IJsSvgAnimatedLength get_markerHeight();
    public sealed virtual IJsSvgAnimatedEnumeration get_orientType();
    public sealed virtual IJsSvgAnimatedAngle get_orientAngle();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedRect get_viewBox();
    public sealed virtual IJsSvgAnimatedPreserveAspectRatio get_preserveAspectRatio();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgFitToViewBox SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgFitToViewBox>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgMaskElement : JsSvgElement {
    public IJsSvgAnimatedEnumeration maskUnits { get; }
    public IJsSvgAnimatedEnumeration maskContentUnits { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgUnitTypes SharpVectors.Scripting.IScriptableObject<SharpVectors.Scripting.ISvgUnitTypes>.BaseObject { get; }
    public JsSvgMaskElement(ISvgMaskElement baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedEnumeration get_maskUnits();
    public sealed virtual IJsSvgAnimatedEnumeration get_maskContentUnits();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgUnitTypes SharpVectors.Scripting.IScriptableObject<SharpVectors.Scripting.ISvgUnitTypes>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgMatrix : JsObject`1<ISvgMatrix> {
    public float a { get; public set; }
    public float b { get; public set; }
    public float c { get; public set; }
    public float d { get; public set; }
    public float e { get; public set; }
    public float f { get; public set; }
    public JsSvgMatrix(ISvgMatrix baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgMatrix multiply(IJsSvgMatrix secondMatrix);
    public sealed virtual IJsSvgMatrix inverse();
    public sealed virtual IJsSvgMatrix translate(float x, float y);
    public sealed virtual IJsSvgMatrix scale(float scaleFactor);
    public sealed virtual IJsSvgMatrix scaleNonUniform(float scaleFactorX, float scaleFactorY);
    public sealed virtual IJsSvgMatrix rotate(float angle);
    public sealed virtual IJsSvgMatrix rotateFromVector(float x, float y);
    public sealed virtual IJsSvgMatrix flipX();
    public sealed virtual IJsSvgMatrix flipY();
    public sealed virtual IJsSvgMatrix skewX(float angle);
    public sealed virtual IJsSvgMatrix skewY(float angle);
    public sealed virtual float get_a();
    public sealed virtual void set_a(float value);
    public sealed virtual float get_b();
    public sealed virtual void set_b(float value);
    public sealed virtual float get_c();
    public sealed virtual void set_c(float value);
    public sealed virtual float get_d();
    public sealed virtual void set_d(float value);
    public sealed virtual float get_e();
    public sealed virtual void set_e(float value);
    public sealed virtual float get_f();
    public sealed virtual void set_f(float value);
}
public class SharpVectors.Scripting.JsSvgMetadataElement : JsSvgElement {
    public JsSvgMetadataElement(ISvgMetadataElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgMissingGlyphElement : JsSvgElement {
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgMissingGlyphElement(ISvgMissingGlyphElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgMPathElement : JsSvgElement {
    public IJsSvgAnimatedString href { get; }
    public bool externalResourcesRequired { get; }
    private ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    public JsSvgMPathElement(ISvgAnimateMPathElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgAnimatedString get_href();
    public sealed virtual bool get_externalResourcesRequired();
    private sealed virtual override ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgNumber : JsObject`1<ISvgNumber> {
    public float value { get; public set; }
    public JsSvgNumber(ISvgNumber baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_value();
    public sealed virtual void set_value(float value);
}
public class SharpVectors.Scripting.JsSvgNumberList : JsObject`1<ISvgNumberList> {
    public ulong numberOfItems { get; }
    public JsSvgNumberList(ISvgNumberList baseObject, ISvgScriptEngine engine);
    public sealed virtual void clear();
    public sealed virtual IJsSvgNumber initialize(IJsSvgNumber newItem);
    public sealed virtual IJsSvgNumber getItem(ulong index);
    public sealed virtual IJsSvgNumber insertItemBefore(IJsSvgNumber newItem, ulong index);
    public sealed virtual IJsSvgNumber replaceItem(IJsSvgNumber newItem, ulong index);
    public sealed virtual IJsSvgNumber removeItem(ulong index);
    public sealed virtual IJsSvgNumber appendItem(IJsSvgNumber newItem);
    public sealed virtual ulong get_numberOfItems();
}
public class SharpVectors.Scripting.JsSvgPaint : JsSvgColor {
    public ushort paintType { get; }
    public string uri { get; }
    public JsSvgPaint(ISvgPaint baseObject, ISvgScriptEngine engine);
    public sealed virtual void setUri(string uri);
    public sealed virtual void setPaint(ushort paintType, string uri, string rgbColor, string iccColor);
    public sealed virtual ushort get_paintType();
    public sealed virtual string get_uri();
}
public class SharpVectors.Scripting.JsSvgPathElement : JsSvgElement {
    public IJsSvgAnimatedNumber pathLength { get; }
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedTransformList transform { get; }
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    public IJsSvgPathSegList pathSegList { get; }
    public IJsSvgPathSegList normalizedPathSegList { get; }
    public IJsSvgPathSegList animatedPathSegList { get; }
    public IJsSvgPathSegList animatedNormalizedPathSegList { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    private ISvgAnimatedPathData SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgAnimatedPathData>.BaseObject { get; }
    public JsSvgPathElement(ISvgPathElement baseObject, ISvgScriptEngine engine);
    public sealed virtual float getTotalLength();
    public sealed virtual IJsSvgPoint getPointAtLength(float distance);
    public sealed virtual ulong getPathSegAtLength(float distance);
    public sealed virtual IJsSvgPathSegClosePath createSVGPathSegClosePath();
    public sealed virtual IJsSvgPathSegMovetoAbs createSVGPathSegMovetoAbs(float x, float y);
    public sealed virtual IJsSvgPathSegMovetoRel createSVGPathSegMovetoRel(float x, float y);
    public sealed virtual IJsSvgPathSegLinetoAbs createSVGPathSegLinetoAbs(float x, float y);
    public sealed virtual IJsSvgPathSegLinetoRel createSVGPathSegLinetoRel(float x, float y);
    public sealed virtual IJsSvgPathSegCurvetoCubicAbs createSVGPathSegCurvetoCubicAbs(float x, float y, float x1, float y1, float x2, float y2);
    public sealed virtual IJsSvgPathSegCurvetoCubicRel createSVGPathSegCurvetoCubicRel(float x, float y, float x1, float y1, float x2, float y2);
    public sealed virtual IJsSvgPathSegCurvetoQuadraticAbs createSVGPathSegCurvetoQuadraticAbs(float x, float y, float x1, float y1);
    public sealed virtual IJsSvgPathSegCurvetoQuadraticRel createSVGPathSegCurvetoQuadraticRel(float x, float y, float x1, float y1);
    public sealed virtual IJsSvgPathSegArcAbs createSVGPathSegArcAbs(float x, float y, float r1, float r2, float angle, bool largeArcFlag, bool sweepFlag);
    public sealed virtual IJsSvgPathSegArcRel createSVGPathSegArcRel(float x, float y, float r1, float r2, float angle, bool largeArcFlag, bool sweepFlag);
    public sealed virtual IJsSvgPathSegLinetoHorizontalAbs createSVGPathSegLinetoHorizontalAbs(float x);
    public sealed virtual IJsSvgPathSegLinetoHorizontalRel createSVGPathSegLinetoHorizontalRel(float x);
    public sealed virtual IJsSvgPathSegLinetoVerticalAbs createSVGPathSegLinetoVerticalAbs(float y);
    public sealed virtual IJsSvgPathSegLinetoVerticalRel createSVGPathSegLinetoVerticalRel(float y);
    public sealed virtual IJsSvgPathSegCurvetoCubicSmoothAbs createSVGPathSegCurvetoCubicSmoothAbs(float x, float y, float x2, float y2);
    public sealed virtual IJsSvgPathSegCurvetoCubicSmoothRel createSVGPathSegCurvetoCubicSmoothRel(float x, float y, float x2, float y2);
    public sealed virtual IJsSvgPathSegCurvetoQuadraticSmoothAbs createSVGPathSegCurvetoQuadraticSmoothAbs(float x, float y);
    public sealed virtual IJsSvgPathSegCurvetoQuadraticSmoothRel createSVGPathSegCurvetoQuadraticSmoothRel(float x, float y);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual IJsSvgAnimatedNumber get_pathLength();
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedTransformList get_transform();
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
    public sealed virtual IJsSvgPathSegList get_pathSegList();
    public sealed virtual IJsSvgPathSegList get_normalizedPathSegList();
    public sealed virtual IJsSvgPathSegList get_animatedPathSegList();
    public sealed virtual IJsSvgPathSegList get_animatedNormalizedPathSegList();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
    private sealed virtual override ISvgAnimatedPathData SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgAnimatedPathData>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgPathSeg : JsObject`1<ISvgPathSeg> {
    public ushort pathSegType { get; }
    public string pathSegTypeAsLetter { get; }
    private object SharpVectors.Scripting.IJsSvgPathSeg.BasePathSeg { get; }
    public JsSvgPathSeg(ISvgPathSeg baseObject, ISvgScriptEngine engine);
    public sealed virtual ushort get_pathSegType();
    public sealed virtual string get_pathSegTypeAsLetter();
    private sealed virtual override object SharpVectors.Scripting.IJsSvgPathSeg.get_BasePathSeg();
}
public abstract class SharpVectors.Scripting.JsSvgPathSeg`1 : JsObject`1<T> {
    public ushort pathSegType { get; }
    public string pathSegTypeAsLetter { get; }
    private object SharpVectors.Scripting.IJsSvgPathSeg.BasePathSeg { get; }
    protected JsSvgPathSeg`1(T baseObject, ISvgScriptEngine engine);
    public sealed virtual ushort get_pathSegType();
    public sealed virtual string get_pathSegTypeAsLetter();
    private sealed virtual override object SharpVectors.Scripting.IJsSvgPathSeg.get_BasePathSeg();
}
public class SharpVectors.Scripting.JsSvgPathSegArcAbs : JsSvgPathSeg`1<ISvgPathSegArcAbs> {
    public float x { get; public set; }
    public float y { get; public set; }
    public float r1 { get; public set; }
    public float r2 { get; public set; }
    public float angle { get; public set; }
    public bool largeArcFlag { get; public set; }
    public bool sweepFlag { get; public set; }
    public JsSvgPathSegArcAbs(ISvgPathSegArcAbs baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
    public sealed virtual float get_r1();
    public sealed virtual void set_r1(float value);
    public sealed virtual float get_r2();
    public sealed virtual void set_r2(float value);
    public sealed virtual float get_angle();
    public sealed virtual void set_angle(float value);
    public sealed virtual bool get_largeArcFlag();
    public sealed virtual void set_largeArcFlag(bool value);
    public sealed virtual bool get_sweepFlag();
    public sealed virtual void set_sweepFlag(bool value);
}
public class SharpVectors.Scripting.JsSvgPathSegArcRel : JsSvgPathSeg`1<ISvgPathSegArcRel> {
    public float x { get; public set; }
    public float y { get; public set; }
    public float r1 { get; public set; }
    public float r2 { get; public set; }
    public float angle { get; public set; }
    public bool largeArcFlag { get; public set; }
    public bool sweepFlag { get; public set; }
    public JsSvgPathSegArcRel(ISvgPathSegArcRel baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
    public sealed virtual float get_r1();
    public sealed virtual void set_r1(float value);
    public sealed virtual float get_r2();
    public sealed virtual void set_r2(float value);
    public sealed virtual float get_angle();
    public sealed virtual void set_angle(float value);
    public sealed virtual bool get_largeArcFlag();
    public sealed virtual void set_largeArcFlag(bool value);
    public sealed virtual bool get_sweepFlag();
    public sealed virtual void set_sweepFlag(bool value);
}
public class SharpVectors.Scripting.JsSvgPathSegClosePath : JsSvgPathSeg`1<ISvgPathSegClosePath> {
    public JsSvgPathSegClosePath(ISvgPathSegClosePath baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgPathSegCurvetoCubicAbs : JsSvgPathSeg`1<ISvgPathSegCurvetoCubicAbs> {
    public float x { get; public set; }
    public float y { get; public set; }
    public float x1 { get; public set; }
    public float y1 { get; public set; }
    public float x2 { get; public set; }
    public float y2 { get; public set; }
    public JsSvgPathSegCurvetoCubicAbs(ISvgPathSegCurvetoCubicAbs baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
    public sealed virtual float get_x1();
    public sealed virtual void set_x1(float value);
    public sealed virtual float get_y1();
    public sealed virtual void set_y1(float value);
    public sealed virtual float get_x2();
    public sealed virtual void set_x2(float value);
    public sealed virtual float get_y2();
    public sealed virtual void set_y2(float value);
}
public class SharpVectors.Scripting.JsSvgPathSegCurvetoCubicRel : JsSvgPathSeg`1<ISvgPathSegCurvetoCubicRel> {
    public float x { get; public set; }
    public float y { get; public set; }
    public float x1 { get; public set; }
    public float y1 { get; public set; }
    public float x2 { get; public set; }
    public float y2 { get; public set; }
    public JsSvgPathSegCurvetoCubicRel(ISvgPathSegCurvetoCubicRel baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
    public sealed virtual float get_x1();
    public sealed virtual void set_x1(float value);
    public sealed virtual float get_y1();
    public sealed virtual void set_y1(float value);
    public sealed virtual float get_x2();
    public sealed virtual void set_x2(float value);
    public sealed virtual float get_y2();
    public sealed virtual void set_y2(float value);
}
public class SharpVectors.Scripting.JsSvgPathSegCurvetoCubicSmoothAbs : JsSvgPathSeg`1<ISvgPathSegCurvetoCubicSmoothAbs> {
    public float x { get; public set; }
    public float y { get; public set; }
    public float x2 { get; public set; }
    public float y2 { get; public set; }
    public JsSvgPathSegCurvetoCubicSmoothAbs(ISvgPathSegCurvetoCubicSmoothAbs baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
    public sealed virtual float get_x2();
    public sealed virtual void set_x2(float value);
    public sealed virtual float get_y2();
    public sealed virtual void set_y2(float value);
}
public class SharpVectors.Scripting.JsSvgPathSegCurvetoCubicSmoothRel : JsSvgPathSeg`1<ISvgPathSegCurvetoCubicSmoothRel> {
    public float x { get; public set; }
    public float y { get; public set; }
    public float x2 { get; public set; }
    public float y2 { get; public set; }
    public JsSvgPathSegCurvetoCubicSmoothRel(ISvgPathSegCurvetoCubicSmoothRel baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
    public sealed virtual float get_x2();
    public sealed virtual void set_x2(float value);
    public sealed virtual float get_y2();
    public sealed virtual void set_y2(float value);
}
public class SharpVectors.Scripting.JsSvgPathSegCurvetoQuadraticAbs : JsSvgPathSeg`1<ISvgPathSegCurvetoQuadraticAbs> {
    public float x { get; public set; }
    public float y { get; public set; }
    public float x1 { get; public set; }
    public float y1 { get; public set; }
    public JsSvgPathSegCurvetoQuadraticAbs(ISvgPathSegCurvetoQuadraticAbs baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
    public sealed virtual float get_x1();
    public sealed virtual void set_x1(float value);
    public sealed virtual float get_y1();
    public sealed virtual void set_y1(float value);
}
public class SharpVectors.Scripting.JsSvgPathSegCurvetoQuadraticRel : JsSvgPathSeg`1<ISvgPathSegCurvetoQuadraticRel> {
    public float x { get; public set; }
    public float y { get; public set; }
    public float x1 { get; public set; }
    public float y1 { get; public set; }
    public JsSvgPathSegCurvetoQuadraticRel(ISvgPathSegCurvetoQuadraticRel baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
    public sealed virtual float get_x1();
    public sealed virtual void set_x1(float value);
    public sealed virtual float get_y1();
    public sealed virtual void set_y1(float value);
}
public class SharpVectors.Scripting.JsSvgPathSegCurvetoQuadraticSmoothAbs : JsSvgPathSeg`1<ISvgPathSegCurvetoQuadraticSmoothAbs> {
    public float x { get; public set; }
    public float y { get; public set; }
    public JsSvgPathSegCurvetoQuadraticSmoothAbs(ISvgPathSegCurvetoQuadraticSmoothAbs baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
}
public class SharpVectors.Scripting.JsSvgPathSegCurvetoQuadraticSmoothRel : JsSvgPathSeg`1<ISvgPathSegCurvetoQuadraticSmoothRel> {
    public float x { get; public set; }
    public float y { get; public set; }
    public JsSvgPathSegCurvetoQuadraticSmoothRel(ISvgPathSegCurvetoQuadraticSmoothRel baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
}
public class SharpVectors.Scripting.JsSvgPathSegLinetoAbs : JsSvgPathSeg`1<ISvgPathSegLinetoAbs> {
    public float x { get; public set; }
    public float y { get; public set; }
    public JsSvgPathSegLinetoAbs(ISvgPathSegLinetoAbs baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
}
public class SharpVectors.Scripting.JsSvgPathSegLinetoHorizontalAbs : JsSvgPathSeg`1<ISvgPathSegLinetoHorizontalAbs> {
    public float x { get; public set; }
    public JsSvgPathSegLinetoHorizontalAbs(ISvgPathSegLinetoHorizontalAbs baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
}
public class SharpVectors.Scripting.JsSvgPathSegLinetoHorizontalRel : JsSvgPathSeg`1<ISvgPathSegLinetoHorizontalRel> {
    public float x { get; public set; }
    public JsSvgPathSegLinetoHorizontalRel(ISvgPathSegLinetoHorizontalRel baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
}
public class SharpVectors.Scripting.JsSvgPathSegLinetoRel : JsSvgPathSeg`1<ISvgPathSegLinetoRel> {
    public float x { get; public set; }
    public float y { get; public set; }
    public JsSvgPathSegLinetoRel(ISvgPathSegLinetoRel baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
}
public class SharpVectors.Scripting.JsSvgPathSegLinetoVerticalAbs : JsSvgPathSeg`1<ISvgPathSegLinetoVerticalAbs> {
    public float y { get; public set; }
    public JsSvgPathSegLinetoVerticalAbs(ISvgPathSegLinetoVerticalAbs baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
}
public class SharpVectors.Scripting.JsSvgPathSegLinetoVerticalRel : JsSvgPathSeg`1<ISvgPathSegLinetoVerticalRel> {
    public float y { get; public set; }
    public JsSvgPathSegLinetoVerticalRel(ISvgPathSegLinetoVerticalRel baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
}
public class SharpVectors.Scripting.JsSvgPathSegList : JsObject`1<ISvgPathSegList> {
    public ulong numberOfItems { get; }
    public JsSvgPathSegList(ISvgPathSegList baseObject, ISvgScriptEngine engine);
    public sealed virtual void clear();
    public sealed virtual IJsSvgPathSeg initialize(IJsSvgPathSeg newItem);
    public sealed virtual IJsSvgPathSeg getItem(ulong index);
    public sealed virtual IJsSvgPathSeg insertItemBefore(IJsSvgPathSeg newItem, ulong index);
    public sealed virtual IJsSvgPathSeg replaceItem(IJsSvgPathSeg newItem, ulong index);
    public sealed virtual IJsSvgPathSeg removeItem(ulong index);
    public sealed virtual IJsSvgPathSeg appendItem(IJsSvgPathSeg newItem);
    public sealed virtual ulong get_numberOfItems();
}
public class SharpVectors.Scripting.JsSvgPathSegMovetoAbs : JsSvgPathSeg`1<ISvgPathSegMovetoAbs> {
    public float x { get; public set; }
    public float y { get; public set; }
    public JsSvgPathSegMovetoAbs(ISvgPathSegMovetoAbs baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
}
public class SharpVectors.Scripting.JsSvgPathSegMovetoRel : JsSvgPathSeg`1<ISvgPathSegMovetoRel> {
    public float x { get; public set; }
    public float y { get; public set; }
    public JsSvgPathSegMovetoRel(ISvgPathSegMovetoRel baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
}
public class SharpVectors.Scripting.JsSvgPatternElement : JsSvgElement {
    public IJsSvgAnimatedEnumeration patternUnits { get; }
    public IJsSvgAnimatedEnumeration patternContentUnits { get; }
    public IJsSvgAnimatedTransformList patternTransform { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString href { get; }
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedRect viewBox { get; }
    public IJsSvgAnimatedPreserveAspectRatio preserveAspectRatio { get; }
    private ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.BaseObject { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgFitToViewBox SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgFitToViewBox>.BaseObject { get; }
    private ISvgUnitTypes SharpVectors.Scripting.IScriptableObject<SharpVectors.Scripting.ISvgUnitTypes>.BaseObject { get; }
    public JsSvgPatternElement(ISvgPatternElement baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedEnumeration get_patternUnits();
    public sealed virtual IJsSvgAnimatedEnumeration get_patternContentUnits();
    public sealed virtual IJsSvgAnimatedTransformList get_patternTransform();
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedString get_href();
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedRect get_viewBox();
    public sealed virtual IJsSvgAnimatedPreserveAspectRatio get_preserveAspectRatio();
    private sealed virtual override ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.get_BaseObject();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgFitToViewBox SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgFitToViewBox>.get_BaseObject();
    private sealed virtual override ISvgUnitTypes SharpVectors.Scripting.IScriptableObject<SharpVectors.Scripting.ISvgUnitTypes>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgPoint : JsObject`1<ISvgPoint> {
    public float x { get; public set; }
    public float y { get; public set; }
    public JsSvgPoint(ISvgPoint baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgPoint matrixTransform(IJsSvgMatrix matrix);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
}
public class SharpVectors.Scripting.JsSvgPointList : JsObject`1<ISvgPointList> {
    public ulong numberOfItems { get; }
    public JsSvgPointList(ISvgPointList baseObject, ISvgScriptEngine engine);
    public sealed virtual void clear();
    public sealed virtual IJsSvgPoint initialize(IJsSvgPoint newItem);
    public sealed virtual IJsSvgPoint getItem(ulong index);
    public sealed virtual IJsSvgPoint insertItemBefore(IJsSvgPoint newItem, ulong index);
    public sealed virtual IJsSvgPoint replaceItem(IJsSvgPoint newItem, ulong index);
    public sealed virtual IJsSvgPoint removeItem(ulong index);
    public sealed virtual IJsSvgPoint appendItem(IJsSvgPoint newItem);
    public sealed virtual ulong get_numberOfItems();
}
public class SharpVectors.Scripting.JsSvgPolygonElement : JsSvgElement {
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedTransformList transform { get; }
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    public IJsSvgPointList points { get; }
    public IJsSvgPointList animatedPoints { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    private ISvgAnimatedPoints SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgAnimatedPoints>.BaseObject { get; }
    public JsSvgPolygonElement(ISvgPolygonElement baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedTransformList get_transform();
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
    public sealed virtual IJsSvgPointList get_points();
    public sealed virtual IJsSvgPointList get_animatedPoints();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
    private sealed virtual override ISvgAnimatedPoints SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgAnimatedPoints>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgPolylineElement : JsSvgElement {
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedTransformList transform { get; }
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    public IJsSvgPointList points { get; }
    public IJsSvgPointList animatedPoints { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    private ISvgAnimatedPoints SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgAnimatedPoints>.BaseObject { get; }
    public JsSvgPolylineElement(ISvgPolylineElement baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedTransformList get_transform();
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
    public sealed virtual IJsSvgPointList get_points();
    public sealed virtual IJsSvgPointList get_animatedPoints();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
    private sealed virtual override ISvgAnimatedPoints SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgAnimatedPoints>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgPreserveAspectRatio : JsObject`1<ISvgPreserveAspectRatio> {
    public ushort align { get; public set; }
    public ushort meetOrSlice { get; public set; }
    public JsSvgPreserveAspectRatio(ISvgPreserveAspectRatio baseObject, ISvgScriptEngine engine);
    public sealed virtual ushort get_align();
    public sealed virtual void set_align(ushort value);
    public sealed virtual ushort get_meetOrSlice();
    public sealed virtual void set_meetOrSlice(ushort value);
}
public class SharpVectors.Scripting.JsSvgRadialGradientElement : JsSvgGradientElement {
    public IJsSvgAnimatedLength cx { get; }
    public IJsSvgAnimatedLength cy { get; }
    public IJsSvgAnimatedLength r { get; }
    public IJsSvgAnimatedLength fx { get; }
    public IJsSvgAnimatedLength fy { get; }
    public JsSvgRadialGradientElement(ISvgRadialGradientElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgAnimatedLength get_cx();
    public sealed virtual IJsSvgAnimatedLength get_cy();
    public sealed virtual IJsSvgAnimatedLength get_r();
    public sealed virtual IJsSvgAnimatedLength get_fx();
    public sealed virtual IJsSvgAnimatedLength get_fy();
}
public class SharpVectors.Scripting.JsSvgRect : JsObject`1<ISvgRect> {
    public float x { get; public set; }
    public float y { get; public set; }
    public float width { get; public set; }
    public float height { get; public set; }
    public JsSvgRect(ISvgRect baseObject, ISvgScriptEngine engine);
    public sealed virtual float get_x();
    public sealed virtual void set_x(float value);
    public sealed virtual float get_y();
    public sealed virtual void set_y(float value);
    public sealed virtual float get_width();
    public sealed virtual void set_width(float value);
    public sealed virtual float get_height();
    public sealed virtual void set_height(float value);
}
public class SharpVectors.Scripting.JsSvgRectElement : JsSvgElement {
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedLength rx { get; }
    public IJsSvgAnimatedLength ry { get; }
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedTransformList transform { get; }
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    public JsSvgRectElement(ISvgRectElement baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgAnimatedLength get_rx();
    public sealed virtual IJsSvgAnimatedLength get_ry();
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedTransformList get_transform();
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgRenderingIntent : JsObject`1<ISvgRenderingIntent> {
    public JsSvgRenderingIntent(ISvgRenderingIntent baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgScriptElement : JsSvgElement {
    public string type { get; public set; }
    public IJsSvgAnimatedString href { get; }
    public bool externalResourcesRequired { get; }
    private ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    public JsSvgScriptElement(ISvgScriptElement baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_type();
    public sealed virtual void set_type(string value);
    public sealed virtual IJsSvgAnimatedString get_href();
    public sealed virtual bool get_externalResourcesRequired();
    private sealed virtual override ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgSetElement : JsSvgAnimationElement {
    public JsSvgSetElement(ISvgAnimateSetElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgStopElement : JsSvgElement {
    public IJsSvgAnimatedNumber offset { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgStopElement(ISvgStopElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedNumber get_offset();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgStringList : JsObject`1<ISvgStringList> {
    public ulong numberOfItems { get; }
    public JsSvgStringList(ISvgStringList baseObject, ISvgScriptEngine engine);
    public sealed virtual void clear();
    public sealed virtual string initialize(string newItem);
    public sealed virtual string getItem(ulong index);
    public sealed virtual string insertItemBefore(string newItem, ulong index);
    public sealed virtual string replaceItem(string newItem, ulong index);
    public sealed virtual string removeItem(ulong index);
    public sealed virtual string appendItem(string newItem);
    public sealed virtual ulong get_numberOfItems();
}
public class SharpVectors.Scripting.JsSvgStylable : JsObject`1<ISvgStylable> {
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public JsSvgStylable(ISvgStylable baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
}
public class SharpVectors.Scripting.JsSvgStyleElement : JsSvgElement {
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public string type { get; public set; }
    public string media { get; public set; }
    public string title { get; public set; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    public JsSvgStyleElement(ISvgStyleElement baseObject, ISvgScriptEngine engine);
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual string get_type();
    public sealed virtual void set_type(string value);
    public sealed virtual string get_media();
    public sealed virtual void set_media(string value);
    public sealed virtual string get_title();
    public sealed virtual void set_title(string value);
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgSvgElement : JsSvgElement {
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public string contentScriptType { get; public set; }
    public string contentStyleType { get; public set; }
    public IJsSvgRect viewport { get; }
    public float pixelUnitToMillimeterX { get; }
    public float pixelUnitToMillimeterY { get; }
    public float screenPixelToMillimeterX { get; }
    public float screenPixelToMillimeterY { get; }
    public bool useCurrentView { get; public set; }
    public IJsSvgViewSpec currentView { get; }
    public float currentScale { get; public set; }
    public IJsSvgPoint currentTranslate { get; }
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    public IJsSvgAnimatedRect viewBox { get; }
    public IJsSvgAnimatedPreserveAspectRatio preserveAspectRatio { get; }
    public ushort zoomAndPan { get; public set; }
    public IJsDocumentView document { get; }
    public IJsStyleSheetList styleSheets { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.BaseObject { get; }
    private ISvgFitToViewBox SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgFitToViewBox>.BaseObject { get; }
    private ISvgZoomAndPan SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgZoomAndPan>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    private IDocumentEvent SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IDocumentEvent>.BaseObject { get; }
    private IAbstractView SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Views.IAbstractView>.BaseObject { get; }
    private IDocumentStyle SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Stylesheets.IDocumentStyle>.BaseObject { get; }
    public JsSvgSvgElement(ISvgSvgElement baseObject, ISvgScriptEngine engine);
    public sealed virtual ulong suspendRedraw(ulong max_wait_milliseconds);
    public sealed virtual void unsuspendRedraw(ulong suspend_handle_id);
    public sealed virtual void unsuspendRedrawAll();
    public sealed virtual void forceRedraw();
    public sealed virtual void pauseAnimations();
    public sealed virtual void unpauseAnimations();
    public sealed virtual bool animationsPaused();
    public sealed virtual float getCurrentTime();
    public sealed virtual void setCurrentTime(float seconds);
    public sealed virtual IJsNodeList getIntersectionList(IJsSvgRect rect, IJsSvgElement referenceElement);
    public sealed virtual IJsNodeList getEnclosureList(IJsSvgRect rect, IJsSvgElement referenceElement);
    public sealed virtual bool checkIntersection(IJsSvgElement element, IJsSvgRect rect);
    public sealed virtual bool checkEnclosure(IJsSvgElement element, IJsSvgRect rect);
    public sealed virtual void deselectAll();
    public sealed virtual IJsSvgNumber createSVGNumber();
    public sealed virtual IJsSvgLength createSVGLength();
    public sealed virtual IJsSvgAngle createSVGAngle();
    public sealed virtual IJsSvgPoint createSVGPoint();
    public sealed virtual IJsSvgMatrix createSVGMatrix();
    public sealed virtual IJsSvgRect createSVGRect();
    public sealed virtual IJsSvgTransform createSVGTransform();
    public sealed virtual IJsSvgTransform createSVGTransformFromMatrix(IJsSvgMatrix matrix);
    public sealed virtual IJsElement getElementById(string elementId);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual IJsEvent createEvent(string eventType);
    public sealed virtual IJsCssStyleDeclaration getComputedStyle(IJsElement elt, string pseudoElt);
    public sealed virtual IJsCssStyleDeclaration getOverrideStyle(IJsElement elt, string pseudoElt);
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual string get_contentScriptType();
    public sealed virtual void set_contentScriptType(string value);
    public sealed virtual string get_contentStyleType();
    public sealed virtual void set_contentStyleType(string value);
    public sealed virtual IJsSvgRect get_viewport();
    public sealed virtual float get_pixelUnitToMillimeterX();
    public sealed virtual float get_pixelUnitToMillimeterY();
    public sealed virtual float get_screenPixelToMillimeterX();
    public sealed virtual float get_screenPixelToMillimeterY();
    public sealed virtual bool get_useCurrentView();
    public sealed virtual void set_useCurrentView(bool value);
    public sealed virtual IJsSvgViewSpec get_currentView();
    public sealed virtual float get_currentScale();
    public sealed virtual void set_currentScale(float value);
    public sealed virtual IJsSvgPoint get_currentTranslate();
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
    public sealed virtual IJsSvgAnimatedRect get_viewBox();
    public sealed virtual IJsSvgAnimatedPreserveAspectRatio get_preserveAspectRatio();
    public sealed virtual ushort get_zoomAndPan();
    public sealed virtual void set_zoomAndPan(ushort value);
    public sealed virtual IJsDocumentView get_document();
    public sealed virtual IJsStyleSheetList get_styleSheets();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.get_BaseObject();
    private sealed virtual override ISvgFitToViewBox SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgFitToViewBox>.get_BaseObject();
    private sealed virtual override ISvgZoomAndPan SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgZoomAndPan>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
    private sealed virtual override IDocumentEvent SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IDocumentEvent>.get_BaseObject();
    private sealed virtual override IAbstractView SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Views.IAbstractView>.get_BaseObject();
    private sealed virtual override IDocumentStyle SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Stylesheets.IDocumentStyle>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgSwitchElement : JsSvgElement {
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedTransformList transform { get; }
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    public JsSvgSwitchElement(ISvgSwitchElement baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedTransformList get_transform();
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgSymbolElement : JsSvgElement {
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedRect viewBox { get; }
    public IJsSvgAnimatedPreserveAspectRatio preserveAspectRatio { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgFitToViewBox SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgFitToViewBox>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    public JsSvgSymbolElement(ISvgSymbolElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedRect get_viewBox();
    public sealed virtual IJsSvgAnimatedPreserveAspectRatio get_preserveAspectRatio();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgFitToViewBox SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgFitToViewBox>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgTests : JsObject`1<ISvgTests> {
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public JsSvgTests(ISvgTests baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
}
public class SharpVectors.Scripting.JsSvgTextContentElement : JsSvgElement {
    public IJsSvgAnimatedLength textLength { get; }
    public IJsSvgAnimatedEnumeration lengthAdjust { get; }
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    public JsSvgTextContentElement(ISvgTextContentElement baseObject, ISvgScriptEngine engine);
    public sealed virtual long getNumberOfChars();
    public sealed virtual float getComputedTextLength();
    public sealed virtual float getSubStringLength(ulong charnum, ulong nchars);
    public sealed virtual IJsSvgPoint getStartPositionOfChar(ulong charnum);
    public sealed virtual IJsSvgPoint getEndPositionOfChar(ulong charnum);
    public sealed virtual IJsSvgRect getExtentOfChar(ulong charnum);
    public sealed virtual float getRotationOfChar(ulong charnum);
    public sealed virtual long getCharNumAtPosition(IJsSvgPoint point);
    public sealed virtual void selectSubString(ulong charnum, ulong nchars);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual IJsSvgAnimatedLength get_textLength();
    public sealed virtual IJsSvgAnimatedEnumeration get_lengthAdjust();
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgTextElement : JsSvgTextPositioningElement {
    public IJsSvgAnimatedTransformList transform { get; }
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    private ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.BaseObject { get; }
    public JsSvgTextElement(ISvgTextElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual IJsSvgAnimatedTransformList get_transform();
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
    private sealed virtual override ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgTextPathElement : JsSvgTextContentElement {
    public IJsSvgAnimatedLength startOffset { get; }
    public IJsSvgAnimatedEnumeration method { get; }
    public IJsSvgAnimatedEnumeration spacing { get; }
    public IJsSvgAnimatedString href { get; }
    private ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.BaseObject { get; }
    public JsSvgTextPathElement(ISvgTextPathElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgAnimatedLength get_startOffset();
    public sealed virtual IJsSvgAnimatedEnumeration get_method();
    public sealed virtual IJsSvgAnimatedEnumeration get_spacing();
    public sealed virtual IJsSvgAnimatedString get_href();
    private sealed virtual override ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgTextPositioningElement : JsSvgTextContentElement {
    public IJsSvgAnimatedLengthList x { get; }
    public IJsSvgAnimatedLengthList y { get; }
    public IJsSvgAnimatedLengthList dx { get; }
    public IJsSvgAnimatedLengthList dy { get; }
    public IJsSvgAnimatedNumberList rotate { get; }
    public JsSvgTextPositioningElement(ISvgTextPositioningElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgAnimatedLengthList get_x();
    public sealed virtual IJsSvgAnimatedLengthList get_y();
    public sealed virtual IJsSvgAnimatedLengthList get_dx();
    public sealed virtual IJsSvgAnimatedLengthList get_dy();
    public sealed virtual IJsSvgAnimatedNumberList get_rotate();
}
public class SharpVectors.Scripting.JsSvgTitleElement : JsSvgElement {
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    public JsSvgTitleElement(ISvgTitleElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgTransform : JsObject`1<ISvgTransform> {
    public ushort type { get; }
    public IJsSvgMatrix matrix { get; }
    public float angle { get; }
    public JsSvgTransform(ISvgTransform baseObject, ISvgScriptEngine engine);
    public sealed virtual void setMatrix(IJsSvgMatrix matrix);
    public sealed virtual void setTranslate(float tx, float ty);
    public sealed virtual void setScale(float sx, float sy);
    public sealed virtual void setRotate(float angle, float cx, float cy);
    public sealed virtual void setSkewX(float angle);
    public sealed virtual void setSkewY(float angle);
    public sealed virtual ushort get_type();
    public sealed virtual IJsSvgMatrix get_matrix();
    public sealed virtual float get_angle();
}
public class SharpVectors.Scripting.JsSvgTransformable : JsSvgLocatable {
    public IJsSvgAnimatedTransformList transform { get; }
    public JsSvgTransformable(ISvgTransformable baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgAnimatedTransformList get_transform();
}
public class SharpVectors.Scripting.JsSvgTransformList : JsObject`1<ISvgTransformList> {
    public ulong numberOfItems { get; }
    public JsSvgTransformList(ISvgTransformList baseObject, ISvgScriptEngine engine);
    public sealed virtual void clear();
    public sealed virtual IJsSvgTransform initialize(IJsSvgTransform newItem);
    public sealed virtual IJsSvgTransform getItem(ulong index);
    public sealed virtual IJsSvgTransform insertItemBefore(IJsSvgTransform newItem, ulong index);
    public sealed virtual IJsSvgTransform replaceItem(IJsSvgTransform newItem, ulong index);
    public sealed virtual IJsSvgTransform removeItem(ulong index);
    public sealed virtual IJsSvgTransform appendItem(IJsSvgTransform newItem);
    public sealed virtual IJsSvgTransform createSVGTransformFromMatrix(IJsSvgMatrix matrix);
    public sealed virtual IJsSvgTransform consolidate();
    public sealed virtual ulong get_numberOfItems();
}
public class SharpVectors.Scripting.JsSvgTRefElement : JsSvgTextPositioningElement {
    public IJsSvgAnimatedString href { get; }
    private ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.BaseObject { get; }
    public JsSvgTRefElement(ISvgTRefElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgAnimatedString get_href();
    private sealed virtual override ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgTSpanElement : JsSvgTextPositioningElement {
    public JsSvgTSpanElement(ISvgTSpanElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgUnitTypes : JsObject`1<ISvgUnitTypes> {
    public JsSvgUnitTypes(ISvgUnitTypes baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgUriReference : JsObject`1<ISvgUriReference> {
    public IJsSvgAnimatedString href { get; }
    public JsSvgUriReference(ISvgUriReference baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgAnimatedString get_href();
}
public class SharpVectors.Scripting.JsSvgUseElement : JsSvgElement {
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgElementInstance instanceRoot { get; }
    public IJsSvgElementInstance animatedInstanceRoot { get; }
    public IJsSvgAnimatedString href { get; }
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public IJsSvgAnimatedTransformList transform { get; }
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    private ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.BaseObject { get; }
    private ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.BaseObject { get; }
    private ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.BaseObject { get; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.BaseObject { get; }
    private ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.BaseObject { get; }
    private IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.BaseObject { get; }
    public JsSvgUseElement(ISvgUseElement baseObject, ISvgScriptEngine engine);
    public sealed virtual bool hasExtension(string extension);
    public sealed virtual IJsCssValue getPresentationAttribute(string name);
    public sealed virtual IJsSvgRect getBBox();
    public sealed virtual IJsSvgMatrix getCTM();
    public sealed virtual IJsSvgMatrix getScreenCTM();
    public sealed virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
    public sealed virtual void addEventListener(string type, object listener, bool useCapture);
    public sealed virtual void removeEventListener(string type, object listener, bool useCapture);
    public sealed virtual bool dispatchEvent(IJsEvent evt);
    public sealed virtual IJsSvgAnimatedLength get_x();
    public sealed virtual IJsSvgAnimatedLength get_y();
    public sealed virtual IJsSvgAnimatedLength get_width();
    public sealed virtual IJsSvgAnimatedLength get_height();
    public sealed virtual IJsSvgElementInstance get_instanceRoot();
    public sealed virtual IJsSvgElementInstance get_animatedInstanceRoot();
    public sealed virtual IJsSvgAnimatedString get_href();
    public sealed virtual IJsSvgStringList get_requiredFeatures();
    public sealed virtual IJsSvgStringList get_requiredExtensions();
    public sealed virtual IJsSvgStringList get_systemLanguage();
    public sealed virtual string get_xmllang();
    public sealed virtual void set_xmllang(string value);
    public sealed virtual string get_xmlspace();
    public sealed virtual void set_xmlspace(string value);
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedString get_className();
    public sealed virtual IJsCssStyleDeclaration get_style();
    public sealed virtual IJsSvgAnimatedTransformList get_transform();
    public sealed virtual IJsSvgElement get_nearestViewportElement();
    public sealed virtual IJsSvgElement get_farthestViewportElement();
    private sealed virtual override ISvgUriReference SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgUriReference>.get_BaseObject();
    private sealed virtual override ISvgTests SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgTests>.get_BaseObject();
    private sealed virtual override ISvgLangSpace SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLangSpace>.get_BaseObject();
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgStylable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgStylable>.get_BaseObject();
    private sealed virtual override ISvgLocatable SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgLocatable>.get_BaseObject();
    private sealed virtual override IEventTarget SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Events.IEventTarget>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgViewElement : JsSvgElement {
    public IJsSvgStringList viewTarget { get; }
    public bool externalResourcesRequired { get; }
    public IJsSvgAnimatedRect viewBox { get; }
    public IJsSvgAnimatedPreserveAspectRatio preserveAspectRatio { get; }
    public ushort zoomAndPan { get; public set; }
    private ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.BaseObject { get; }
    private ISvgFitToViewBox SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgFitToViewBox>.BaseObject { get; }
    private ISvgZoomAndPan SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgZoomAndPan>.BaseObject { get; }
    public JsSvgViewElement(ISvgViewElement baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgStringList get_viewTarget();
    public sealed virtual bool get_externalResourcesRequired();
    public sealed virtual IJsSvgAnimatedRect get_viewBox();
    public sealed virtual IJsSvgAnimatedPreserveAspectRatio get_preserveAspectRatio();
    public sealed virtual ushort get_zoomAndPan();
    public sealed virtual void set_zoomAndPan(ushort value);
    private sealed virtual override ISvgExternalResourcesRequired SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgExternalResourcesRequired>.get_BaseObject();
    private sealed virtual override ISvgFitToViewBox SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgFitToViewBox>.get_BaseObject();
    private sealed virtual override ISvgZoomAndPan SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgZoomAndPan>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgViewSpec : JsSvgFitToViewBox {
    public ushort zoomAndPan { get; public set; }
    public IJsSvgTransformList transform { get; }
    public IJsSvgElement viewTarget { get; }
    public string viewBoxString { get; }
    public string preserveAspectRatioString { get; }
    public string transformString { get; }
    public string viewTargetString { get; }
    private ISvgZoomAndPan SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgZoomAndPan>.BaseObject { get; }
    public JsSvgViewSpec(ISvgViewSpec baseObject, ISvgScriptEngine engine);
    public sealed virtual ushort get_zoomAndPan();
    public sealed virtual void set_zoomAndPan(ushort value);
    public sealed virtual IJsSvgTransformList get_transform();
    public sealed virtual IJsSvgElement get_viewTarget();
    public sealed virtual string get_viewBoxString();
    public sealed virtual string get_preserveAspectRatioString();
    public sealed virtual string get_transformString();
    public sealed virtual string get_viewTargetString();
    private sealed virtual override ISvgZoomAndPan SharpVectors.Scripting.IScriptableObject<SharpVectors.Dom.Svg.ISvgZoomAndPan>.get_BaseObject();
}
public class SharpVectors.Scripting.JsSvgVKernElement : JsSvgElement {
    public JsSvgVKernElement(ISvgVKernElement baseObject, ISvgScriptEngine engine);
}
public class SharpVectors.Scripting.JsSvgWindow : JsObject`1<ISvgWindow> {
    public IJsSvgDocument document { get; }
    public IJsSvgDocument svgDocument { get; }
    public IJsStyleSheet defaultStyleSheet { get; }
    public long innerWidth { get; }
    public long innerHeight { get; }
    public JsSvgWindow(ISvgWindow baseObject, ISvgScriptEngine engine);
    public sealed virtual string setTimeout(object scriptOrClosure, ulong delay);
    public sealed virtual void clearTimeout(string token);
    public sealed virtual string setInterval(object scriptOrClosure, ulong delay);
    public sealed virtual void clearInterval(string token);
    public sealed virtual void alert(string message);
    public sealed virtual void setSrc(string newURL);
    public sealed virtual string getSrc();
    public sealed virtual string printNode(IJsNode node);
    public sealed virtual IJsNode parseXML(string xml, IJsDocument owner);
    public sealed virtual void registerEval(object scriptFunction);
    public sealed virtual IJsSvgDocument get_document();
    public sealed virtual IJsSvgDocument get_svgDocument();
    public sealed virtual IJsStyleSheet get_defaultStyleSheet();
    public sealed virtual long get_innerWidth();
    public sealed virtual long get_innerHeight();
}
public class SharpVectors.Scripting.JsSvgZoomAndPan : JsObject`1<ISvgZoomAndPan> {
    public ushort zoomAndPan { get; public set; }
    public JsSvgZoomAndPan(ISvgZoomAndPan baseObject, ISvgScriptEngine engine);
    public sealed virtual ushort get_zoomAndPan();
    public sealed virtual void set_zoomAndPan(ushort value);
}
public class SharpVectors.Scripting.JsSvgZoomEvent : JsUiEvent {
    public IJsSvgRect zoomRectScreen { get; }
    public float previousScale { get; }
    public IJsSvgPoint previousTranslate { get; }
    public float newScale { get; }
    public IJsSvgPoint newTranslate { get; }
    public JsSvgZoomEvent(ISvgZoomEvent baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsSvgRect get_zoomRectScreen();
    public sealed virtual float get_previousScale();
    public sealed virtual IJsSvgPoint get_previousTranslate();
    public sealed virtual float get_newScale();
    public sealed virtual IJsSvgPoint get_newTranslate();
}
public class SharpVectors.Scripting.JsText : JsCharacterData {
    public JsText(IText baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsText splitText(ulong offset);
}
public class SharpVectors.Scripting.JsTimeEvent : JsEvent {
    public IJsAbstractView view { get; }
    public long detail { get; }
    public JsTimeEvent(ITimeEvent baseObject, ISvgScriptEngine engine);
    public sealed virtual void initTimeEvent(string typeArg, IJsAbstractView viewArg, long detailArg);
    public sealed virtual IJsAbstractView get_view();
    public sealed virtual long get_detail();
}
public class SharpVectors.Scripting.JsUiEvent : JsEvent {
    public IJsAbstractView view { get; }
    public long detail { get; }
    public JsUiEvent(IUiEvent baseObject, ISvgScriptEngine engine);
    public sealed virtual void initUIEvent(string typeArg, bool canBubbleArg, bool cancelableArg, IJsAbstractView viewArg, long detailArg);
    public sealed virtual IJsAbstractView get_view();
    public sealed virtual long get_detail();
}
public class SharpVectors.Scripting.JsViewCss : JsAbstractView {
    public JsViewCss(ICssView baseObject, ISvgScriptEngine engine);
    public sealed virtual IJsCssStyleDeclaration getComputedStyle(IJsElement elt, string pseudoElt);
}
internal class SharpVectors.Woffs.SvgWoffParser : object {
    public static string DirectoryName;
    private string _fontPath;
    private WoffDecoder _woffDecoder;
    public string DefaultExportPath { get; }
    public bool Import(string fontPath);
    public bool Export(string fontPath);
    public bool Export(Stream stream);
    public string get_DefaultExportPath();
    public string GetExportPath();
}
[DefaultMemberAttribute("Item")]
public class SharpVectors.Woffs.WoffBuffer : object {
    public static byte SizeOfByte;
    public static byte SizeOfChar;
    public static byte SizeOfUShort;
    public static byte SizeOfShort;
    public static byte SizeOfUInt24;
    public static byte SizeOfUInt;
    public static byte SizeOfInt;
    public static byte SizeOfULong;
    public static byte SizeOfLong;
    public static byte SizeOfFixed;
    public static byte SizeOfFUnit;
    public static byte SizeOfFWord;
    public static byte SizeOfUFWord;
    public static byte SizeOfF2Dot14;
    public static byte SizeOfLongDatetime;
    public static byte SizeOfTag;
    public static byte SizeOfGlyphID;
    public static byte SizeOfOffset;
    public static byte OneMoreByteCode1;
    public static byte OneMoreByteCode2;
    public static byte WordCode;
    public static byte LowestUCode;
    private long _filePos;
    private UInt32 _length;
    private UInt32 _padBytesLength;
    private Byte[] _buffer;
    private UInt32 _cachedChecksum;
    private bool _isValidChecksumAvailable;
    public UInt32 PadBytesLength { get; }
    public Byte[] Buffer { get; }
    public UInt32 Length { get; }
    public byte Item { get; public set; }
    public byte Item { get; public set; }
    public byte Item { get; public set; }
    public byte Item { get; public set; }
    public WoffBuffer(UInt32 length);
    public WoffBuffer(Byte[] buffer, bool padBytes);
    public WoffBuffer(UInt32 filepos, UInt32 length);
    public UInt32 get_PadBytesLength();
    public Byte[] get_Buffer();
    public UInt32 get_Length();
    public byte get_Item(short index);
    public void set_Item(short index, byte value);
    public byte get_Item(ushort index);
    public void set_Item(ushort index, byte value);
    public byte get_Item(int index);
    public void set_Item(int index, byte value);
    public byte get_Item(UInt32 index);
    public void set_Item(UInt32 index, byte value);
    public Byte[] GetBuffer();
    public UInt32 GetLength();
    public UInt32 GetPaddedLength();
    public void Copy(Byte[] buffer);
    public sbyte GetSbyte(UInt32 offset);
    public void SetSbyte(sbyte value, UInt32 offset);
    public byte GetByte(UInt32 offset);
    public void SetByte(byte value, UInt32 offset);
    public Byte[] GetBytes(UInt32 offset, int size);
    public Byte[] GetBytes(UInt32 offset, UInt32 size);
    public short GetShort(UInt32 offset);
    public void SetShort(short value, UInt32 offset);
    public void SetShort(int value, UInt32 offset);
    public ushort GetUShort(UInt32 offset);
    public void SetUShort(ushort value, UInt32 offset);
    public int GetInt(UInt32 offset);
    public void SetInt(int value, UInt32 offset);
    public UInt32 GetUInt24(UInt32 offset);
    public UInt32 GetUInt(UInt32 offset);
    public void SetUInt(UInt32 value, UInt32 offset);
    public long GetLong(UInt32 offset);
    public void SetLong(long value, UInt32 offset);
    public ulong GetULong(UInt32 offset);
    public void SetULong(ulong value, UInt32 offset);
    public float GetFixed(UInt32 offset);
    public void SetFixed(float value, UInt32 offset);
    public float GetF2Dot14(UInt32 offset);
    public string GetTag(UInt32 offset);
    public void SetTag(string tag, UInt32 offset);
    public long GetFilePos();
    public UInt32 CalcChecksum();
    public static int CalcPadBytes(int nLength, int nByteAlignment);
    public static short GetShortBE(Byte[] buf, UInt32 offset);
    public static ushort GetUShortBE(Byte[] buf, UInt32 offset);
    public static int GetIntBE(Byte[] buf, UInt32 offset);
    public static UInt32 GetUIntBE(Byte[] buf, UInt32 offset);
    public static bool BinaryEqual(WoffBuffer buf1, WoffBuffer buf2);
    public static UInt32 TagInt(Byte[] tag);
    public static UInt32 TagInt(string tag);
    public static Byte[] TagBytes(UInt32 tag);
    public static string TagString(UInt32 tag);
    private UInt32 CalculateChecksum();
    public static int Read(Stream sourceStream, Byte[]& target, int start, int count);
    public static Byte[] ReadBytes(Stream stream, int count, Int32& bytesRead);
    public static int Read(TextReader sourceTextReader, Byte[]& target, int start, int count);
    public static bool ReadUIntBase128(Stream stream, UInt32& result);
    public static ushort Read255UInt16(Stream stream);
    public static int Skip(Stream stream, int skipBytes);
    public static long Skip(StreamReader stream, long number);
    public static void WriteBytes(string data, Stream fileStream);
    public static void WriteChars(string data, Stream fileStream);
    public static short ReadInt16LE(Byte[] buffer, int offset);
    public static short ReadInt16BE(Byte[] buffer, int offset);
    public static ushort ReadUInt16LE(Byte[] buffer, int offset);
    public static ushort ReadUInt16BE(Byte[] buffer, int offset);
    public static int ReadInt32LE(Byte[] buffer, int offset);
    public static int ReadInt32BE(Byte[] buffer, int offset);
    public static UInt32 ReadUInt32LE(Byte[] buffer, int offset);
    public static UInt32 ReadUInt32BE(Byte[] buffer, int offset);
    public static long ReadInt64LE(Byte[] buffer, int offset);
    public static long ReadInt64BE(Byte[] buffer, int offset);
    public static ulong ReadUInt64LE(Byte[] buffer, int offset);
    public static ulong ReadUInt64BE(Byte[] buffer, int offset);
    public static float ReadSingleLE(Byte[] buffer, int offset);
    public static float ReadSingleBE(Byte[] buffer, int offset);
    public static double ReadDoubleLE(Byte[] buffer, int offset);
    public static double ReadDoubleBE(Byte[] buffer, int offset);
    public static int WriteInt16LE(Byte[] buffer, int offset, int value);
    public static int WriteInt16BE(Byte[] buffer, int offset, int value);
    public static int WriteInt32LE(Byte[] buffer, int offset, int value);
    public static int WriteInt32BE(Byte[] buffer, int offset, int value);
    public static int WriteInt64LE(Byte[] buffer, int offset, long value);
    public static int WriteInt64BE(Byte[] buffer, int offset, long value);
    public static int WriteDoubleLE(Byte[] buffer, int offset, double value);
    public static int WriteDoubleBE(Byte[] buffer, int offset, double value);
    public static int WriteUInt16BE(Byte[] buffer, int offset, ushort value);
    public static int WriteUInt32BE(Byte[] buffer, int offset, UInt32 value);
    public static int WriteUInt64BE(Byte[] buffer, int offset, ulong value);
}
public class SharpVectors.Woffs.WoffDecoder : object {
    private static UInt32 HeaderSize;
    private static UInt32 TableSize;
    private bool _isTransformed;
    private byte _woffVersion;
    private WoffMetadata _metadata;
    private WoffPrivateData _privateData;
    private WoffHeader _woffHeader;
    private IList`1<WoffTableDirectory> _woffDirs;
    private IList`1<WoffFont> _woffFonts;
    private CollectionHeader _collectionHeader;
    private IList`1<CollectionFontEntry> _collectionEntries;
    public WoffMetadata Metadata { get; private set; }
    public WoffPrivateData PrivateData { get; private set; }
    public WoffHeader Header { get; private set; }
    public IList`1<WoffTableDirectory> Directories { get; private set; }
    public bool IsTransformed { get; private set; }
    public bool IsCollection { get; }
    public WoffMetadata get_Metadata();
    private void set_Metadata(WoffMetadata value);
    public WoffPrivateData get_PrivateData();
    private void set_PrivateData(WoffPrivateData value);
    public WoffHeader get_Header();
    private void set_Header(WoffHeader value);
    public IList`1<WoffTableDirectory> get_Directories();
    private void set_Directories(IList`1<WoffTableDirectory> value);
    public bool get_IsTransformed();
    private void set_IsTransformed(bool value);
    public bool get_IsCollection();
    public bool ReadFont(string filePath);
    public bool WriteFont(string filePath);
    public bool WriteFont(Stream stream);
    private bool ReadWoff1(Stream stream);
    private bool WriteWoff1(Stream stream);
    private bool ReadWoff2(Stream stream);
    private bool ReadWoff2Font(Stream stream);
    private bool ReadWoff2Fonts(Stream stream);
    private bool WriteWoff2(Stream stream);
    private bool WriteWoff2Collection(Stream stream);
}
public class SharpVectors.Woffs.WoffFont : object {
    private bool _isTransformed;
    private byte _woffVersion;
    private WoffHeader _woffHeader;
    private IList`1<WoffTable> _woffTables;
    private IList`1<WoffTableDirectory> _woffDirs;
    private CollectionHeader _collectionHeader;
    private CollectionFontEntry _collectionEntry;
    private int _headIndex;
    private int _hheaIndex;
    private int _hmtxIndex;
    private int _maxpIndex;
    private int _nameIndex;
    private int _glyfIndex;
    private int _locaIndex;
    public bool IsCollection { get; }
    public WoffHeader Header { get; private set; }
    public IList`1<WoffTableDirectory> Directories { get; private set; }
    public IList`1<WoffTable> Tables { get; private set; }
    public bool IsTransformed { get; private set; }
    public int HeadTableIndex { get; }
    public int HheaTableIndex { get; }
    public int HmtxTableIndex { get; }
    public int MaxpTableIndex { get; }
    public int NameTableIndex { get; }
    public int GlyfTableIndex { get; }
    public int LocaTableIndex { get; }
    public WoffFont(WoffHeader woffHeader);
    public WoffFont(WoffHeader woffHeader, CollectionHeader collHeader, CollectionFontEntry collEntry);
    public bool get_IsCollection();
    public WoffHeader get_Header();
    private void set_Header(WoffHeader value);
    public IList`1<WoffTableDirectory> get_Directories();
    private void set_Directories(IList`1<WoffTableDirectory> value);
    public IList`1<WoffTable> get_Tables();
    private void set_Tables(IList`1<WoffTable> value);
    public bool get_IsTransformed();
    private void set_IsTransformed(bool value);
    public int get_HeadTableIndex();
    public int get_HheaTableIndex();
    public int get_HmtxTableIndex();
    public int get_MaxpTableIndex();
    public int get_NameTableIndex();
    public int get_GlyfTableIndex();
    public int get_LocaTableIndex();
    public UInt32 ComputeTotalSfntSize();
    public void ChecksumAdjustment(Byte[] headersBuffer, UInt32 headerOffset, UInt32 headerLength, UInt32 tablesChecksum);
    public bool BeginDirectory(byte woffVersion);
    public void AddDirectory(WoffTableDirectory woffDir);
    public bool EndDirectory();
    private static UInt32 Align4(UInt32 value);
    private UInt32 GetOrigHeaderLength(IList`1<WoffTableDirectory> tableDirectories);
    private UInt32 GetOrigTablesLength(IList`1<WoffTableDirectory> tableDirectories);
}
public class SharpVectors.Woffs.WoffGlyph : object {
    private static byte ON_CURVE_POINT;
    private static byte X_SHORT_VECTOR;
    private static byte Y_SHORT_VECTOR;
    private static byte REPEAT_FLAG;
    private static byte X_IS_SAME_OR_POSITIVE;
    private static byte Y_IS_SAME_OR_POSITIVE;
    private static byte OVERLAP_SIMPLE;
    private static ushort MORE_COMPONENTS;
    private static ushort ARG_1_AND_2_ARE_WORDS;
    private static ushort ARGS_ARE_XY_VALUES;
    private static ushort WE_HAVE_INSTRUCTIONS;
    private static ushort WE_HAVE_A_SCALE;
    private static ushort WE_HAVE_AN_X_AND_Y_SCALE;
    private static ushort WE_HAVE_A_TWO_BY_TWO;
    private static ushort OVERLAP_COMPOUND;
    private static Byte[] DataEmpty;
    private static IList`1<WoffPoint> ContoursEmpty;
    private short _numContours;
    private short _xMin;
    private short _xMax;
    private short _yMin;
    private short _yMax;
    private UInt32 _glyphIndex;
    private WoffGlyphType _glyphType;
    private UInt16[] _endPtsOfContours;
    private IList`1<WoffPoint> _contours;
    private ushort _numPoints;
    private ushort _instructionLength;
    private Byte[] _instructions;
    private bool _hasInstructions;
    private ushort _componentLength;
    private Byte[] _components;
    private static int kGlyfOnCurve;
    private static int kGlyfXShort;
    private static int kGlyfYShort;
    private static int kGlyfRepeat;
    private static int kGlyfThisXIsSame;
    private static int kGlyfThisYIsSame;
    private static ushort kCheckSumAdjustmentOffset;
    private static ushort kEndPtsOfContoursOffset;
    private static ushort kCompositeGlyphBegin;
    public bool IsComposite { get; }
    public UInt32 GlyphIndex { get; private set; }
    public WoffGlyphType GlyphType { get; private set; }
    public short NumberOfContours { get; public set; }
    public ushort NumberOfPoints { get; public set; }
    public short XMin { get; public set; }
    public short XMax { get; public set; }
    public short YMin { get; public set; }
    public short YMax { get; public set; }
    public UInt16[] EndPtsOfContours { get; public set; }
    public bool HasInstructions { get; public set; }
    public ushort InstructionLength { get; public set; }
    public Byte[] Instructions { get; public set; }
    public IList`1<WoffPoint> Contours { get; private set; }
    public ushort ComponentLength { get; private set; }
    public Byte[] Components { get; private set; }
    public WoffGlyph(UInt32 glyphIndex, WoffGlyphType glyphType);
    public WoffGlyph(UInt32 glyphIndex, short numContours, WoffGlyphType glyphType);
    private static WoffGlyph();
    public bool get_IsComposite();
    public UInt32 get_GlyphIndex();
    private void set_GlyphIndex(UInt32 value);
    public WoffGlyphType get_GlyphType();
    private void set_GlyphType(WoffGlyphType value);
    public short get_NumberOfContours();
    public void set_NumberOfContours(short value);
    public ushort get_NumberOfPoints();
    public void set_NumberOfPoints(ushort value);
    public short get_XMin();
    public void set_XMin(short value);
    public short get_XMax();
    public void set_XMax(short value);
    public short get_YMin();
    public void set_YMin(short value);
    public short get_YMax();
    public void set_YMax(short value);
    public UInt16[] get_EndPtsOfContours();
    public void set_EndPtsOfContours(UInt16[] value);
    public bool get_HasInstructions();
    public void set_HasInstructions(bool value);
    public ushort get_InstructionLength();
    public void set_InstructionLength(ushort value);
    public Byte[] get_Instructions();
    public void set_Instructions(Byte[] value);
    public IList`1<WoffPoint> get_Contours();
    private void set_Contours(IList`1<WoffPoint> value);
    public ushort get_ComponentLength();
    private void set_ComponentLength(ushort value);
    public Byte[] get_Components();
    private void set_Components(Byte[] value);
    public bool SetComponents(WoffReader reader);
    public void RecalcBounds();
    public bool Serialize(WoffWriter writer, WoffIndexer pointsWriter, UInt32& glyphSize);
    private bool PackPoints(WoffIndexer writer, UInt32 pointsCapacity, UInt32& pointsLength);
}
public enum SharpVectors.Woffs.WoffGlyphType : Enum {
    public int value__;
    public static WoffGlyphType None;
    public static WoffGlyphType Simple;
    public static WoffGlyphType Composite;
}
public class SharpVectors.Woffs.WoffHeader : object {
    private UInt32 _signature;
    private UInt32 _flavor;
    private UInt32 _length;
    private ushort _numTables;
    private ushort _reserved;
    private UInt32 _totalSfntSize;
    private UInt32 _totalCompressedSize;
    private ushort _majorVersion;
    private ushort _minorVersion;
    private UInt32 _metaOffset;
    private UInt32 _metaLength;
    private UInt32 _metaOrigLength;
    private UInt32 _privateOffset;
    private UInt32 _privateLength;
    private byte _woffVersion;
    public byte WoffVersion { get; }
    public string Name { get; }
    public bool HasMetadata { get; }
    public bool HasPrivateData { get; }
    public bool IsTrueType { get; }
    public bool IsCollection { get; }
    public UInt32 Signature { get; public set; }
    public UInt32 Flavor { get; public set; }
    public UInt32 Length { get; public set; }
    public ushort NumTables { get; public set; }
    public ushort Reserved { get; public set; }
    public UInt32 TotalSfntSize { get; public set; }
    public UInt32 TotalCompressedSize { get; public set; }
    public ushort MajorVersion { get; public set; }
    public ushort MinorVersion { get; public set; }
    public UInt32 MetaOffset { get; public set; }
    public UInt32 MetaLength { get; public set; }
    public UInt32 MetaOrigLength { get; public set; }
    public UInt32 PrivateOffset { get; public set; }
    public UInt32 PrivateLength { get; public set; }
    public ushort HeaderSize { get; }
    public WoffHeader(byte woffVersion);
    public byte get_WoffVersion();
    public string get_Name();
    public bool get_HasMetadata();
    public bool get_HasPrivateData();
    public bool get_IsTrueType();
    public bool get_IsCollection();
    public UInt32 get_Signature();
    public void set_Signature(UInt32 value);
    public UInt32 get_Flavor();
    public void set_Flavor(UInt32 value);
    public UInt32 get_Length();
    public void set_Length(UInt32 value);
    public ushort get_NumTables();
    public void set_NumTables(ushort value);
    public ushort get_Reserved();
    public void set_Reserved(ushort value);
    public UInt32 get_TotalSfntSize();
    public void set_TotalSfntSize(UInt32 value);
    public UInt32 get_TotalCompressedSize();
    public void set_TotalCompressedSize(UInt32 value);
    public ushort get_MajorVersion();
    public void set_MajorVersion(ushort value);
    public ushort get_MinorVersion();
    public void set_MinorVersion(ushort value);
    public UInt32 get_MetaOffset();
    public void set_MetaOffset(UInt32 value);
    public UInt32 get_MetaLength();
    public void set_MetaLength(UInt32 value);
    public UInt32 get_MetaOrigLength();
    public void set_MetaOrigLength(UInt32 value);
    public UInt32 get_PrivateOffset();
    public void set_PrivateOffset(UInt32 value);
    public UInt32 get_PrivateLength();
    public void set_PrivateLength(UInt32 value);
    public ushort get_HeaderSize();
    public bool Read(Stream stream);
}
[DefaultMemberAttribute("Item")]
public class SharpVectors.Woffs.WoffIndexer : object {
    private WoffWriter _writer;
    private bool _isDisposed;
    public UInt32 Offset { get; public set; }
    public UInt32 Length { get; }
    public byte Item { get; public set; }
    public byte Item { get; public set; }
    public byte Item { get; public set; }
    public byte Item { get; public set; }
    public WoffIndexer(int capacity);
    public WoffIndexer(Byte[] buffer);
    public WoffIndexer(Byte[] buffer, int index, int count);
    protected virtual override void Finalize();
    public UInt32 get_Offset();
    public void set_Offset(UInt32 value);
    public UInt32 get_Length();
    public byte get_Item(ushort index);
    public void set_Item(ushort index, byte value);
    public byte get_Item(int index);
    public void set_Item(int index, byte value);
    public byte get_Item(UInt32 index);
    public void set_Item(UInt32 index, byte value);
    public byte get_Item(short index);
    public void set_Item(short index, byte value);
    public Byte[] GetBuffer();
    public bool WriteInt64(long value, UInt32& offset);
    public bool WriteUInt64(ulong value, UInt32& offset);
    public bool WriteInt32(int value, UInt32& offset);
    public bool WriteUInt32(UInt32 value, UInt32& offset);
    public bool WriteInt16(short value, UInt32& offset);
    public bool WriteInt16(int value, UInt32& offset);
    public bool WriteUInt16(ushort value, UInt32& offset);
    public bool Write(sbyte value, UInt32& offset);
    public bool Write(SByte[] buffer, UInt32& offset);
    public bool Write(SByte[] buffer, int index, int count, UInt32& offset);
    public bool Write(byte value, UInt32& offset);
    public bool Write(Byte[] buffer, UInt32& offset);
    public bool Write(Byte[] buffer, int index, int count, UInt32& offset);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public class SharpVectors.Woffs.WoffMetadata : object {
    private UInt32 _offset;
    private UInt32 _length;
    private UInt32 _origLength;
    private Byte[] _data;
    private Byte[] _origData;
    private XDocument _document;
    public UInt32 Offset { get; }
    public UInt32 Length { get; }
    public UInt32 OrigLength { get; }
    public Byte[] Data { get; public set; }
    public Byte[] OrigData { get; public set; }
    public XDocument Document { get; public set; }
    public WoffMetadata(UInt32 offset, UInt32 length, UInt32 origLength);
    public UInt32 get_Offset();
    public UInt32 get_Length();
    public UInt32 get_OrigLength();
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
    public Byte[] get_OrigData();
    public void set_OrigData(Byte[] value);
    public XDocument get_Document();
    public void set_Document(XDocument value);
}
public class SharpVectors.Woffs.WoffPoint : ValueType {
    public short X;
    public short Y;
    public bool IsOnCurve;
    public WoffPoint(short x, short y, bool onCurve);
    public WoffPoint(int x, int y, bool onCurve);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(WoffPoint obj);
}
public class SharpVectors.Woffs.WoffPrivateData : object {
    private UInt32 _offset;
    private UInt32 _length;
    private Byte[] _data;
    public UInt32 Offset { get; }
    public UInt32 Length { get; }
    public Byte[] Data { get; public set; }
    public WoffPrivateData(UInt32 offset, UInt32 length);
    public UInt32 get_Offset();
    public UInt32 get_Length();
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
}
public class SharpVectors.Woffs.WoffReader : object {
    private UInt32 _offset;
    private WoffBuffer _buffer;
    public UInt32 Offset { get; public set; }
    public UInt32 Length { get; }
    public WoffBuffer Buffer { get; }
    public WoffReader(WoffBuffer buffer);
    public WoffReader(Byte[] buffer);
    public UInt32 get_Offset();
    public void set_Offset(UInt32 value);
    public UInt32 get_Length();
    public WoffBuffer get_Buffer();
    public WoffReader GetReader(UInt32 offset);
    public byte ReadByte();
    public sbyte ReadSByte();
    public short ReadInt16();
    public ushort ReadUInt16();
    public int ReadInt32();
    public UInt32 ReadUInt32();
    public long ReadInt64();
    public ulong ReadUInt64();
    public Byte[] ReadByte(UInt32 arraySize);
    public SByte[] ReadSByte(UInt32 arraySize);
    public Int16[] ReadInt16(UInt32 arraySize);
    public UInt16[] ReadUInt16(UInt32 arraySize);
    public Int32[] ReadInt32(UInt32 arraySize);
    public UInt32[] ReadUInt32(UInt32 arraySize);
    public UInt16[] Read255UInt16(UInt32 arraySize);
    public float ReadFixed();
    public short ReadFword();
    public float ReadF2Dot14();
    public bool ReadUIntBase128(UInt32& result);
    public ushort Read255UInt16();
    public Byte[] ReadByte(UInt32 arraySize, UInt32 offset);
    public SByte[] ReadSByte(UInt32 arraySize, UInt32 offset);
    public Int16[] ReadInt16(UInt32 arraySize, UInt32 offset);
    public UInt16[] ReadUInt16(UInt32 arraySize, UInt32 offset);
    public Int32[] ReadInt32(UInt32 arraySize, UInt32 offset);
    public UInt32[] ReadUInt32(UInt32 arraySize, UInt32 offset);
    public UInt16[] Read255UInt16(UInt32 arraySize, UInt32 offset);
    public bool SkipInt16();
    public bool SkipUInt16();
    public bool SkipInt32();
    public bool SkipUInt32();
    public bool Skip();
    public bool Skip(ushort numBytes);
}
public class SharpVectors.Woffs.WoffTable : object {
    private static IList`1<string> _tableFlags;
    protected UInt32 _length;
    protected UInt32 _checksum;
    protected ushort _index;
    protected WoffFont _woffFont;
    protected WoffTableDirectory _woffDir;
    protected WoffBuffer _tableBuffer;
    protected int _headIndex;
    protected int _hheaIndex;
    protected int _hmtxIndex;
    protected int _maxpIndex;
    protected int _nameIndex;
    protected int _glyfIndex;
    protected int _locaIndex;
    public static IList`1<string> TableFlags { get; }
    public UInt32 Length { get; private set; }
    public UInt32 Checksum { get; private set; }
    public ushort Index { get; private set; }
    public WoffFont Font { get; private set; }
    public WoffTableDirectory Directory { get; private set; }
    public WoffTable(WoffFont woffFont, WoffTableDirectory woffDir);
    private static WoffTable();
    public static IList`1<string> get_TableFlags();
    public UInt32 get_Length();
    private void set_Length(UInt32 value);
    public UInt32 get_Checksum();
    private void set_Checksum(UInt32 value);
    public ushort get_Index();
    private void set_Index(ushort value);
    public WoffFont get_Font();
    private void set_Font(WoffFont value);
    public WoffTableDirectory get_Directory();
    private void set_Directory(WoffTableDirectory value);
    public virtual UInt32 CalcChecksum();
    public bool Reconstruct();
    protected virtual bool ReconstructTable();
}
public class SharpVectors.Woffs.WoffTableDirectory : object {
    private ushort _woffIndex;
    private byte _woffVersion;
    private byte _flags;
    private UInt32 _tag;
    private UInt32 _offset;
    private UInt32 _compLength;
    private UInt32 _origLength;
    private UInt32 _transformLength;
    private UInt32 _origChecksum;
    private UInt32 _padding;
    private Byte[] _compTable;
    private Byte[] _origTable;
    private WoffTableMode _tableMode;
    private WoffTableState _tableState;
    public ushort WoffIndex { get; }
    public WoffTableMode WoffMode { get; public set; }
    public WoffTableState WoffState { get; public set; }
    public byte WoffVersion { get; }
    public string Name { get; }
    public bool IsTransformed { get; }
    public UInt32 Tag { get; public set; }
    public UInt32 Offset { get; public set; }
    public UInt32 CompLength { get; public set; }
    public UInt32 OrigLength { get; public set; }
    public UInt32 OrigChecksum { get; public set; }
    public UInt32 Padding { get; private set; }
    public Byte[] CompTable { get; public set; }
    public Byte[] OrigTable { get; public set; }
    public byte Flags { get; public set; }
    public UInt32 TransformLength { get; public set; }
    public UInt32 Length { get; }
    public WoffTableDirectory(ushort woffIndex, byte woffVersion);
    public WoffTableDirectory(ushort woffIndex, byte woffVersion, UInt32 offset);
    public ushort get_WoffIndex();
    public WoffTableMode get_WoffMode();
    public void set_WoffMode(WoffTableMode value);
    public WoffTableState get_WoffState();
    public void set_WoffState(WoffTableState value);
    public byte get_WoffVersion();
    public string get_Name();
    public bool get_IsTransformed();
    public UInt32 get_Tag();
    public void set_Tag(UInt32 value);
    public UInt32 get_Offset();
    public void set_Offset(UInt32 value);
    public UInt32 get_CompLength();
    public void set_CompLength(UInt32 value);
    public UInt32 get_OrigLength();
    public void set_OrigLength(UInt32 value);
    public UInt32 get_OrigChecksum();
    public void set_OrigChecksum(UInt32 value);
    public UInt32 get_Padding();
    private void set_Padding(UInt32 value);
    public Byte[] get_CompTable();
    public void set_CompTable(Byte[] value);
    public Byte[] get_OrigTable();
    public void set_OrigTable(Byte[] value);
    public byte get_Flags();
    public void set_Flags(byte value);
    public UInt32 get_TransformLength();
    public void set_TransformLength(UInt32 value);
    public UInt32 get_Length();
    public bool Read(Stream stream, bool isTrueType);
    private bool ReadData(Stream stream);
    private bool ReadData(Stream stream, bool isTrueType);
    public UInt32 RecalculateChecksum();
    public UInt32 CalculateChecksum();
    public static IComparer`1<WoffTableDirectory> GetComparer();
}
public class SharpVectors.Woffs.WoffTableGlyf : WoffTable {
    private UInt32 _maxNumPoints;
    private ushort _indexFormat;
    private Int16[] _glyphAdvances;
    private WoffGlyph[] _glyphs;
    private IList`1<UInt32> _glyphsLocations;
    public ushort IndexFormat { get; private set; }
    public IList`1<UInt32> GlyphsLocations { get; private set; }
    public Int16[] GlyphsAdvances { get; private set; }
    public WoffGlyph[] Glyphs { get; private set; }
    public WoffTableGlyf(WoffFont woffFont, WoffTableDirectory woffDir);
    public ushort get_IndexFormat();
    private void set_IndexFormat(ushort value);
    public IList`1<UInt32> get_GlyphsLocations();
    private void set_GlyphsLocations(IList`1<UInt32> value);
    public Int16[] get_GlyphsAdvances();
    private void set_GlyphsAdvances(Int16[] value);
    public WoffGlyph[] get_Glyphs();
    private void set_Glyphs(WoffGlyph[] value);
    protected virtual bool ReconstructTable();
    private bool TransformGlyf();
    private bool SerializeGlyf(ushort indexFormat);
}
public class SharpVectors.Woffs.WoffTableHead : WoffTable {
    public static UInt32 SizeOfTable;
    public UInt32 TableVersionNumber { get; }
    public UInt32 FontRevision { get; }
    public UInt32 CheckSumAdjustment { get; public set; }
    public UInt32 MagicNumber { get; }
    public ushort Flags { get; }
    public ushort UnitsPerEm { get; }
    public long Created { get; }
    public long Modified { get; }
    public short XMin { get; }
    public short YMin { get; }
    public short XMax { get; }
    public short YMax { get; }
    public ushort MacStyle { get; }
    public ushort LowestRecPPEM { get; }
    public short FontDirectionHint { get; }
    public short IndexToLocFormat { get; }
    public short GlyphDataFormat { get; }
    public WoffTableHead(WoffFont woffFont, WoffTableDirectory woffDir);
    public UInt32 get_TableVersionNumber();
    public UInt32 get_FontRevision();
    public UInt32 get_CheckSumAdjustment();
    public void set_CheckSumAdjustment(UInt32 value);
    public UInt32 get_MagicNumber();
    public ushort get_Flags();
    public ushort get_UnitsPerEm();
    public long get_Created();
    public long get_Modified();
    public short get_XMin();
    public short get_YMin();
    public short get_XMax();
    public short get_YMax();
    public ushort get_MacStyle();
    public ushort get_LowestRecPPEM();
    public short get_FontDirectionHint();
    public short get_IndexToLocFormat();
    public short get_GlyphDataFormat();
    public virtual UInt32 CalcChecksum();
    public DateTime GetCreatedDateTime();
    public DateTime GetModifiedDateTime();
    public Byte[] Rebuild(bool checksumAdjustment);
    protected virtual bool ReconstructTable();
}
public class SharpVectors.Woffs.WoffTableHhea : WoffTable {
    public WoffTableHhea(WoffFont woffFont, WoffTableDirectory woffDir);
    protected virtual bool ReconstructTable();
}
public class SharpVectors.Woffs.WoffTableHmtx : WoffTable {
    public WoffTableHmtx(WoffFont woffFont, WoffTableDirectory woffDir);
    protected virtual bool ReconstructTable();
    private bool TransformHmtx();
    private bool SerializeHmtx(IList`1<ushort> advanceWidths, IList`1<short> lsbs, int numOfHMetrics, int numOfGlyphs);
}
public class SharpVectors.Woffs.WoffTableLoca : WoffTable {
    public WoffTableLoca(WoffFont woffFont, WoffTableDirectory woffDir);
    protected virtual bool ReconstructTable();
    private bool SerializeLoca();
}
public class SharpVectors.Woffs.WoffTableMaxp : WoffTable {
    public WoffTableMaxp(WoffFont woffFont, WoffTableDirectory woffDir);
    protected virtual bool ReconstructTable();
}
public class SharpVectors.Woffs.WoffTableName : WoffTable {
    private UnicodeEncoding _unicodeNoBOM;
    public ushort FormatSelector { get; }
    public ushort NumberNameRecords { get; }
    public ushort OffsetToStrings { get; }
    public WoffTableName(WoffFont woffFont, WoffTableDirectory woffDir);
    public ushort get_FormatSelector();
    public ushort get_NumberNameRecords();
    public ushort get_OffsetToStrings();
    public string GetNameString();
    public string GetFamilyString();
    public string GetPostScriptString();
    public string GetVersionString();
    public string GetStyleString();
    public NameRecord GetNameRecord(UInt32 i);
    public string GetString(ushort PlatID, ushort EncID, ushort LangID, ushort NameID);
    public Byte[] GetEncodedString(NameRecord nr);
    protected virtual bool ReconstructTable();
    private static int MacEncIdToCodePage(ushort macEncodingID);
    private static int MSEncIdToCodePage(ushort msEncID);
    private static string GetUnicodeStrFromCodePageBuf(Byte[] buf, int codepage);
    private static Byte[] GetCodePageBufFromUnicodeStr(string sNameString, int nCodepage);
    private string DecodeString(ushort PlatID, ushort EncID, Byte[] EncodedStringBuf);
    private Byte[] EncodeString(string s, ushort PlatID, ushort EncID);
}
public static class SharpVectors.Woffs.WoffTriplet : object {
    public static bool Decode(WoffReader flags, WoffReader glyphs, UInt32 nPoints, IList`1<WoffPoint> points);
    private static int WithSign(int flag, int baseval);
}
public static class SharpVectors.Woffs.WoffUtils : object {
    public static byte Woff1Version;
    public static byte Woff2Version;
    public static string Woff1FileExt;
    public static string Woff2FileExt;
    public static string TtfFileExt;
    public static string OtfFileExt;
    public static string TtcFileExt;
    public static string OtcFileExt;
    public static ushort Woff1HeaderSize;
    public static ushort Woff2HeaderSize;
    public static ushort Woff1DirSize;
    public static UInt32 TtfSignature;
    public static UInt32 TtcSignature;
    public static UInt32 OtfSignature;
    public static UInt32 Woff1Signature;
    public static UInt32 Woff2Signature;
    public static UInt32 PaddingSize;
    public static ushort HeadIndex;
    public static ushort HheaIndex;
    public static ushort HmtxIndex;
    public static ushort MaxpIndex;
    public static ushort NameIndex;
    public static ushort GlyfIndex;
    public static ushort LocaIndex;
    public static UInt32 CalculatePadding(UInt32 length);
    public static ushort MaxPower2LE(ushort n);
    public static ushort Log2(ushort n);
}
public class SharpVectors.Woffs.WoffWriter : object {
    private bool _isExpandable;
    private MemoryStream _buffer;
    private WoffBuffer _converter;
    private bool _isDisposed;
    public UInt32 Offset { get; public set; }
    public UInt32 Length { get; }
    public WoffWriter(int capacity);
    public WoffWriter(UInt32 capacity);
    public WoffWriter(Byte[] buffer);
    public WoffWriter(Byte[] buffer, int index, int count);
    protected virtual override void Finalize();
    public UInt32 get_Offset();
    public void set_Offset(UInt32 value);
    public UInt32 get_Length();
    public Byte[] GetBuffer();
    public bool WriteInt16(short value);
    public bool WriteUInt16(ushort value);
    public bool WriteInt16(int value);
    public bool WriteInt32(int value);
    public bool WriteUInt32(UInt32 value);
    public bool WriteInt64(long value);
    public bool WriteUInt64(ulong value);
    public bool Write(sbyte value);
    public bool Write(SByte[] buffer);
    public bool Write(SByte[] buffer, int index, int count);
    public bool Write(byte value);
    public bool Write(Byte[] buffer);
    public bool Write(Byte[] buffer, int index, int count);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
