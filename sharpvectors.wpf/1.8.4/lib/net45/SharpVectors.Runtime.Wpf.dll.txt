internal static class SharpVectors.Runtime.AuthorEx : object {
}
internal static class SharpVectors.Runtime.AuthorScreenCap : object {
    internal static int ScreenCaptureRecordingErrorHResultBase;
}
public class SharpVectors.Runtime.DpiScale : object {
    private double _dpiScaleX;
    private double _dpiScaleY;
    public double DpiScaleX { get; }
    public double DpiScaleY { get; }
    public double PixelsPerDip { get; }
    public double PixelsPerInchX { get; }
    public double PixelsPerInchY { get; }
    public DpiScale(double value);
    public DpiScale(double dpiScaleX, double dpiScaleY);
    public double get_DpiScaleX();
    public double get_DpiScaleY();
    public double get_PixelsPerDip();
    public double get_PixelsPerInchX();
    public double get_PixelsPerInchY();
    public virtual string ToString();
    public sealed virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(DpiScale other);
    public static bool op_Inequality(DpiScale dpiScaleA, DpiScale dpiScaleB);
    public static bool op_Equality(DpiScale dpiScaleA, DpiScale dpiScaleB);
    private sealed virtual override object System.ICloneable.Clone();
    public DpiScale Clone();
}
public static class SharpVectors.Runtime.DpiUtilities : object {
    public static double DefaultPixelsPerInch;
    private static UInt32 _defaultPixelsPerInch;
    private static ProcessDpiAwareness _dpiAwareness;
    public static ProcessDpiAwareness DpiAwareness { get; }
    private static DpiUtilities();
    public static ProcessDpiAwareness get_DpiAwareness();
    private static ProcessDpiAwareness GetDpiAwareness();
    private static bool IsOsGreaterOrEqualTo(int major, int minor);
    public static DpiScale CalculateScale(UInt32 dpi1X, UInt32 dpi1Y, double dpi2X, double dpi2Y);
    public static DpiScale GetSystemScale();
    public static DpiScale GetWindowScale(Window window);
    public static DpiScale GetWindowScale(Visual visual);
    public static DpiScale GetWindowScale(IntPtr hwnd);
    public static DpiScale GetVirtualPixelScale(Window window);
    public static DpiScale GetVirtualPixelScale(IntPtr hwnd);
    public static DpiScale GetVirtualPixelScaleByMonitor(IntPtr hMonitor);
    public static void GetMonitorEffectiveDpi(IntPtr hMonitor, UInt32& dpiX, UInt32& dpiY);
    public static void GetSystemEffectiveDpi(UInt32& dpiX, UInt32& dpiY);
    public static void GetWindowEffectiveDpi(Window window, UInt32& dpiX, UInt32& dpiY);
    public static void GetWindowEffectiveDpi(IntPtr hwnd, UInt32& dpiX, UInt32& dpiY);
    public static double GetScreenScalingFactor(string deviceName);
    private static IntPtr GetWindowHwnd(Window window);
    private static IntPtr GetWindowHwnd(Visual visual);
    private static IntPtr GetMonitorFromWindow(IntPtr hwnd);
}
[TypeConverterAttribute("SharpVectors.Runtime.EmbeddedBitmapDataConverter")]
public class SharpVectors.Runtime.EmbeddedBitmapData : ValueType {
    private MemoryStream _stream;
    public MemoryStream Stream { get; public set; }
    public EmbeddedBitmapData(MemoryStream stream);
    public MemoryStream get_Stream();
    public void set_Stream(MemoryStream value);
}
public class SharpVectors.Runtime.EmbeddedBitmapDataConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class SharpVectors.Runtime.EmbeddedBitmapSource : BitmapSource {
    private string _mimeType;
    private BitmapImage _bitmap;
    private MemoryStream _stream;
    [DesignerSerializationVisibilityAttribute("2")]
public EmbeddedBitmapData Data { get; public set; }
    public double DpiX { get; }
    public double DpiY { get; }
    public PixelFormat Format { get; }
    public BitmapPalette Palette { get; }
    public int PixelWidth { get; }
    public int PixelHeight { get; }
    public string MimeType { get; public set; }
    public EmbeddedBitmapSource(MemoryStream stream);
    public EmbeddedBitmapSource(MemoryStream stream, BitmapImage image);
    public EmbeddedBitmapData get_Data();
    public void set_Data(EmbeddedBitmapData value);
    public virtual double get_DpiX();
    public virtual double get_DpiY();
    public virtual PixelFormat get_Format();
    public virtual BitmapPalette get_Palette();
    public virtual int get_PixelWidth();
    public virtual int get_PixelHeight();
    public string get_MimeType();
    public void set_MimeType(string value);
    public virtual void CopyPixels(Int32Rect sourceRect, IntPtr buffer, int bufferSize, int stride);
    protected virtual void CloneCore(Freezable sourceFreezable);
    protected virtual void CloneCurrentValueCore(Freezable sourceFreezable);
    protected virtual void GetAsFrozenCore(Freezable sourceFreezable);
    protected virtual void GetCurrentValueAsFrozenCore(Freezable sourceFreezable);
    protected virtual Freezable CreateInstanceCore();
    private void BeginInit();
    private void EndInit();
    private void InitWicInfo(BitmapSource source);
    private void CopyFrom(EmbeddedBitmapSource source);
    private void EnsureStream();
}
internal static class SharpVectors.Runtime.NativeMethods : object {
    internal static int MONITORINFOF_PRIMARY;
    internal static int CCHDEVICENAME;
    internal static int WM_KEYDOWN;
    internal static int WM_KEYUP;
    internal static UInt32 STANDARD_RIGHTS_READ;
    internal static UInt32 TOKEN_QUERY;
    internal static UInt32 TOKEN_READ;
    public static int GWL_EXSTYLE;
    public static int WS_EX_TRANSPARENT;
    public static int GW_HWNDNEXT;
    public static int GW_HWNDPREV;
    private static NativeMethods();
    internal static bool EnumWindows(EnumWindowsProc enumProc, IntPtr lParam);
    internal static bool EnumChildWindows(IntPtr hwndParent, EnumWindowsProc lpEnumFunc, IntPtr lParam);
    internal static IntPtr GetDC(IntPtr hWnd);
    internal static bool GetClientRect(IntPtr hWnd, RECT& lpRect);
    internal static bool GetMonitorInfo(IntPtr hMonitor, MONITORINFO lpmi);
    internal static bool GetMonitorInfoEx(IntPtr hMonitor, MONITORINFOEX& lpmi);
    internal static IntPtr MonitorFromWindow(IntPtr handle, int flags);
    internal static IntPtr MonitorFromPoint(POINT pt, int flags);
    internal static int GetSystemMetrics(int nIndex);
    internal static bool GetWindowRect(IntPtr hWnd, RECT& lpRect);
    internal static bool GetWindowPlacement(IntPtr hWnd, WINDOWPLACEMENT& lpwndpl);
    internal static IntPtr GetAncestor(IntPtr hwnd, GaFlags flags);
    private static int GetWindowLongPtr32(IntPtr hWnd, int nIndex);
    private static IntPtr GetWindowLongPtr64(IntPtr hWnd, int nIndex);
    internal static bool RegisterHotKey(IntPtr hWnd, int id, int fsModifiers, int vk);
    internal static bool UnregisterHotKey(IntPtr hWnd, int id);
    public static IntPtr GetWindowLongPtr(IntPtr hWnd, GwlIndex nIndex);
    internal static bool GetLastInputInfo(LASTINPUTINFO& plii);
    internal static bool DestroyIcon(IntPtr hIcon);
    internal static int GetDpiForMonitor(IntPtr hMonitor, Monitor_DPI_Type dpiType, UInt32& dpiX, UInt32& dpiY);
    internal static int SetProcessDpiAwareness(int value);
    internal static int GetProcessDpiAwareness(IntPtr handle, Int32& value);
    internal static UInt32 GetCurrentThreadId();
    internal static ulong GetTickCount64();
    internal static bool CloseHandle(IntPtr handle);
    internal static bool GetTokenInformation(IntPtr tokenHandle, TokenInformationClass tokenInformationClass, IntPtr tokenInformation, UInt32 tokenInformationLength, UInt32& returnLength);
    internal static bool OpenProcessToken(IntPtr processHandle, UInt32 desiredAccess, IntPtr& tokenHandle);
    internal static void ThrowLastError();
    public static IntPtr MonitorFromPoint(POINT pt, MonitorOptions dwFlags);
    public static bool EnumDisplayMonitors(IntPtr hdc, IntPtr lprcClip, MonitorEnumDelegate lpfnEnum, IntPtr dwData);
    public static UInt32 GetWindowLong(IntPtr hWnd, int nIndex);
    internal static IntPtr GetDesktopWindow();
    internal static IntPtr GetShellWindow();
    internal static IntPtr GetWindowDC(IntPtr hwnd);
    internal static bool IsWindowVisible(IntPtr hWnd);
    internal static IntPtr GetWindow(IntPtr hWnd, int uCmd);
    internal static UInt32 GetWindowThreadProcessId(IntPtr hWnd, UInt32& processId);
    internal static bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, UInt32 uFlags);
    internal static bool ReleaseDC(IntPtr hWnd, IntPtr hDC);
    internal static int CreateDeviceDiscoveryClass(IDeviceEnumerator& enumerator, IDeviceEnumeratorCallback callback);
    internal static int CreateCaptureControlClass(ICaptureControl& control, ICaptureCallback callback);
    internal static int CreateMP4MediaTransferClass(IMP4MediaTransfer& transfer);
    internal static int VerifyEmbeddedSignature(string filename, bool mayBeOffline);
    internal static int CheckD3D(UInt32 d3dVersion);
    internal static bool Is32BitProcess();
    internal static int GetClipBox(IntPtr hdc, RECT& lprc);
    public static IntPtr CreateCompatibleBitmap(IntPtr hdc, int nWidth, int nHeight);
    public static IntPtr CreateCompatibleDC(IntPtr hdc);
    public static IntPtr SelectObject(IntPtr hdc, IntPtr bmp);
    internal static bool DeleteObject(IntPtr o);
    internal static IntPtr CreateDC(string driver, string device, string output, IntPtr initData);
    internal static bool DeleteDC(IntPtr hDc);
    internal static int GetDeviceCaps(IntPtr hdc, int nIndex);
    internal static bool BitBlt(IntPtr hDestDC, int x, int y, int nWidth, int nHeight, IntPtr hSrcDC, int xSrc, int ySrc, TernaryRasterOperations dwRop);
    public static IntPtr GetWindowHwnd(Window window);
    public static IntPtr GetWindowHwnd(Visual visual);
    public static IntPtr GetMonitorFromWindow(IntPtr hwnd);
}
internal class SharpVectors.Runtime.POINT : ValueType {
    public int X;
    public int Y;
    public POINT(int x, int y);
}
public enum SharpVectors.Runtime.ProcessDpiAwareness : Enum {
    public int value__;
    public static ProcessDpiAwareness DpiUnaware;
    public static ProcessDpiAwareness SystemDpiAware;
    public static ProcessDpiAwareness PerMonitorDpiAware;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class SharpVectors.Runtime.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "15.8.0.0")]
internal class SharpVectors.Runtime.Properties.Settings : ApplicationSettingsBase {
    private static Settings defaultInstance;
    public static Settings Default { get; }
    private static Settings();
    public static Settings get_Default();
}
public class SharpVectors.Runtime.SvgAlertArgs : EventArgs {
    private bool _isHandled;
    private string _message;
    public bool Handled { get; public set; }
    public string Message { get; private set; }
    public SvgAlertArgs(string message);
    public bool get_Handled();
    public void set_Handled(bool value);
    public string get_Message();
    private void set_Message(string value);
}
public class SharpVectors.Runtime.SvgAnimationLayer : DependencyObject {
    private Rect _bounds;
    private Color _colorText;
    private Color _colorLink;
    private Color _colorSelected;
    private Color _colorHover;
    private ToolTip _tooltip;
    private TextBlock _tooltipText;
    private Transform _displayTransform;
    private DrawingGroup _wholeDrawing;
    private DrawingGroup _linksDrawing;
    private List`1<Drawing> _linkObjects;
    private List`1<Drawing> _drawObjects;
    private Drawing _hitVisual;
    private Drawing _selectedVisual;
    private SvgAnimator _animator;
    private SvgDrawingCanvas _drawingCanvas;
    private Dictionary`2<string, Brush> _visualBrushes;
    public Transform DisplayTransform { get; public set; }
    public SvgAnimationLayer(SvgDrawingCanvas drawingCanvas);
    public Transform get_DisplayTransform();
    public void set_DisplayTransform(Transform value);
    public void LoadDiagrams(DrawingGroup linkGroups, DrawingGroup wholeGroup);
    public void UnloadDiagrams();
    public bool HandleMouseMove(MouseEventArgs e);
    public bool HandleMouseDown(MouseButtonEventArgs e);
    public bool HandleMouseLeave();
    private void ClearVisuals();
    private Drawing HitTest(Point pt);
    private void AddDrawing(DrawingGroup group);
    private void AddDrawing(DrawingGroup group, string name);
    private void AddTextDrawing(DrawingGroup group, string name);
    private void AddGeometryDrawing(GeometryDrawing drawing);
    private static bool IsValidBounds(Rect rectBounds);
    private static bool TryCast(TBase baseObj, TDerived& derivedObj);
    private void LoadLayerDiagrams(DrawingGroup layerGroup);
    private void LoadLayerGroup(DrawingGroup group);
}
public class SharpVectors.Runtime.SvgAnimator : FrameworkElement {
    private bool _isStarted;
    private string _targetName;
    private Storyboard _storyboard;
    private DoubleAnimation _opacityAnimation;
    public bool IsAnimating { get; }
    public string TargetName { get; }
    public bool get_IsAnimating();
    public string get_TargetName();
    public void Start(string targetName, object scopedElement);
    public void Stop();
}
public class SharpVectors.Runtime.SvgDrawingCanvas : Canvas {
    private static string DefaultTitle;
    private string _appTitle;
    private bool _drawForInteractivity;
    private Rect _bounds;
    private Transform _displayTransform;
    private double _offsetX;
    private double _offsetY;
    private ToolTip _tooltip;
    private TextBlock _tooltipText;
    private DrawingGroup _wholeDrawing;
    private DrawingGroup _linksDrawing;
    private DrawingGroup _mainDrawing;
    private Drawing _hitVisual;
    private DrawingVisual _hostVisual;
    private SvgInteractiveModes _interactiveMode;
    private List`1<Drawing> _drawObjects;
    private List`1<Drawing> _linkObjects;
    private SvgAnimationLayer _animationCanvas;
    [CompilerGeneratedAttribute]
private EventHandler`1<SvgAlertArgs> _svgAlerts;
    [CompilerGeneratedAttribute]
private EventHandler`1<SvgErrorArgs> _svgErrors;
    [DefaultValueAttribute("SharpVectors")]
[DescriptionAttribute("The title of the application, used in displaying error and alert messages.")]
public string AppTitle { get; public set; }
    public bool DesignMode { get; }
    public SvgAnimationLayer AnimationCanvas { get; }
    public Transform DisplayTransform { get; }
    public Rect Bounds { get; }
    public Point DisplayOffset { get; }
    public IList`1<Drawing> DrawObjects { get; }
    public IList`1<Drawing> LinkObjects { get; }
    public DrawingVisual HostVisual { get; }
    public SvgInteractiveModes InteractiveMode { get; public set; }
    protected int VisualChildrenCount { get; }
    private static SvgDrawingCanvas();
    [CompilerGeneratedAttribute]
private void add__svgAlerts(EventHandler`1<SvgAlertArgs> value);
    [CompilerGeneratedAttribute]
private void remove__svgAlerts(EventHandler`1<SvgAlertArgs> value);
    [CompilerGeneratedAttribute]
private void add__svgErrors(EventHandler`1<SvgErrorArgs> value);
    [CompilerGeneratedAttribute]
private void remove__svgErrors(EventHandler`1<SvgErrorArgs> value);
    public string get_AppTitle();
    public void set_AppTitle(string value);
    public bool get_DesignMode();
    public SvgAnimationLayer get_AnimationCanvas();
    public Transform get_DisplayTransform();
    public Rect get_Bounds();
    public Point get_DisplayOffset();
    public IList`1<Drawing> get_DrawObjects();
    public IList`1<Drawing> get_LinkObjects();
    public DrawingVisual get_HostVisual();
    public SvgInteractiveModes get_InteractiveMode();
    public void set_InteractiveMode(SvgInteractiveModes value);
    public void add_Alert(EventHandler`1<SvgAlertArgs> value);
    public void remove_Alert(EventHandler`1<SvgAlertArgs> value);
    public void add_Error(EventHandler`1<SvgErrorArgs> value);
    public void remove_Error(EventHandler`1<SvgErrorArgs> value);
    protected virtual int get_VisualChildrenCount();
    public void LoadDiagrams(string fileName);
    public void LoadDiagrams(DrawingGroup whole, DrawingGroup links, DrawingGroup main);
    public void UnloadDiagrams();
    public void RenderDiagrams(SvgImageNameScope image);
    public void RenderDiagrams(DrawingGroup renderedGroup);
    protected virtual Visual GetVisualChild(int index);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    protected virtual void OnHandleAlert(string message);
    protected virtual void OnHandleError(string message, Exception exception);
    private void AddVisual(DrawingVisual visual);
    private void RemoveVisual(DrawingVisual visual);
    private void ClearVisuals();
    private void AddDrawing(Drawing visual);
    private void RemoveDrawing(Drawing visual);
    private void ClearDrawings();
    private void Draw(DrawingGroup group, DrawingGroup main);
    private void EnumerateDrawings(DrawingGroup group);
    private void InsertTextDrawing(DrawingGroup group);
    private void InsertLinkDrawing(DrawingGroup group);
    private void InsertDrawing(Drawing drawing);
    private Drawing HitTest(Point pt);
    private bool HitTestDrawing(GlyphRunDrawing drawing, Point pt);
    private bool HitTestDrawing(GeometryDrawing drawing, Point pt);
    private bool HitTestDrawing(DrawingGroup group, Point pt);
    private static bool IsValidBounds(Rect rectBounds);
}
public class SharpVectors.Runtime.SvgErrorArgs : EventArgs {
    private bool _isHandled;
    private string _message;
    private Exception _exception;
    public bool IsException { get; }
    public bool Handled { get; public set; }
    public string Message { get; private set; }
    public Exception Exception { get; private set; }
    public SvgErrorArgs(string message);
    public SvgErrorArgs(Exception exception);
    public SvgErrorArgs(string message, Exception exception);
    public bool get_IsException();
    public bool get_Handled();
    public void set_Handled(bool value);
    public string get_Message();
    private void set_Message(string value);
    public Exception get_Exception();
    private void set_Exception(Exception value);
}
public class SharpVectors.Runtime.SvgErrorException : Exception {
    public SvgErrorException(string msg);
    public SvgErrorException(string msg, Exception innerException);
    public SvgErrorException(SvgErrorArgs errorArgs);
    protected SvgErrorException(SerializationInfo info, StreamingContext context);
}
public class SharpVectors.Runtime.SvgFontUriExtension : MarkupExtension {
    private string _inputUri;
    public SvgFontUriExtension(string inputUri);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public class SharpVectors.Runtime.SvgImageNameScope : Image {
    private Dictionary`2<string, object> _nameTable;
    private sealed virtual override object System.Windows.Markup.INameScope.FindName(string name);
    private sealed virtual override void System.Windows.Markup.INameScope.RegisterName(string name, object scopedElement);
    private sealed virtual override void System.Windows.Markup.INameScope.UnregisterName(string name);
}
public enum SharpVectors.Runtime.SvgInteractiveModes : Enum {
    public int value__;
    public static SvgInteractiveModes None;
    public static SvgInteractiveModes Standard;
    public static SvgInteractiveModes Advanced;
}
public class SharpVectors.Runtime.SvgLink : DependencyObject {
    public static DependencyProperty ColorProperty;
    public static DependencyProperty PartsIdProperty;
    public static DependencyProperty TypeProperty;
    public static DependencyProperty NumberProperty;
    public static DependencyProperty PinProperty;
    public static DependencyProperty LineIdProperty;
    public static DependencyProperty KeyProperty;
    public static DependencyProperty LocationProperty;
    public static DependencyProperty ActionProperty;
    private static SvgLink();
    public static void SetColor(DependencyObject element, string value);
    public static string GetColor(DependencyObject element);
    public static void SetPartsId(DependencyObject element, string value);
    public static string GetPartsId(DependencyObject element);
    public static void SetType(DependencyObject element, string value);
    public static string GetType(DependencyObject element);
    public static void SetNumber(DependencyObject element, string value);
    public static string GetNumber(DependencyObject element);
    public static void SetPin(DependencyObject element, string value);
    public static string GetPin(DependencyObject element);
    public static void SetLineId(DependencyObject element, string value);
    public static string GetLineId(DependencyObject element);
    public static void SetKey(DependencyObject element, string value);
    public static string GetKey(DependencyObject element);
    public static void SetLocation(DependencyObject element, string value);
    public static string GetLocation(DependencyObject element);
    public static void SetAction(DependencyObject element, SvgLinkAction value);
    public static SvgLinkAction GetAction(DependencyObject element);
}
public enum SharpVectors.Runtime.SvgLinkAction : Enum {
    public int value__;
    public static SvgLinkAction LinkNone;
    public static SvgLinkAction LinkPage;
    public static SvgLinkAction LinkHtml;
    public static SvgLinkAction LinkTooltip;
}
public static class SharpVectors.Runtime.SvgObject : object {
    public static string LinksLayer;
    public static string DrawLayer;
    public static DependencyProperty IdProperty;
    public static DependencyProperty UniqueIdProperty;
    public static DependencyProperty ClassProperty;
    public static DependencyProperty TypeProperty;
    public static DependencyProperty TitleProperty;
    public static DependencyProperty OrderProperty;
    private static SvgObject();
    public static void SetName(DependencyObject element, string name);
    public static void SetName(DrawingGroup element, string name);
    public static string GetName(DependencyObject element);
    public static void SetId(DependencyObject element, string value);
    public static string GetId(DependencyObject element);
    public static void SetUniqueId(DependencyObject element, string value);
    public static string GetUniqueId(DependencyObject element);
    public static void SetClass(DependencyObject element, string value);
    public static string GetClass(DependencyObject element);
    public static void SetType(DependencyObject element, SvgObjectType value);
    public static SvgObjectType GetType(DependencyObject element);
    public static void SetTitle(DependencyObject element, string value);
    public static string GetTitle(DependencyObject element);
    public static void SetOrder(DependencyObject element, int value);
    public static int GetOrder(DependencyObject element);
    public static bool IsValid(double value);
    public static bool IsValid(float value);
    public static bool IsEqual(double value1, double value2);
    public static string RemoveWhitespace(string str);
}
public enum SharpVectors.Runtime.SvgObjectType : Enum {
    public int value__;
    public static SvgObjectType None;
    public static SvgObjectType Link;
    public static SvgObjectType Text;
    public static SvgObjectType Circle;
    public static SvgObjectType Ellipse;
    public static SvgObjectType Rect;
    public static SvgObjectType Polyline;
    public static SvgObjectType Polygon;
    public static SvgObjectType Marker;
    public static SvgObjectType Path;
    public static SvgObjectType Image;
    public static SvgObjectType Group;
}
internal static class SharpVectors.Runtime.Utils.DynamicCast : object {
    public static bool Cast(B baseObject, D& derivedObject);
}
internal static class SharpVectors.Runtime.Utils.TryCast : object {
    public static bool Cast(B baseObject, D& derivedObject);
}
public static class SharpVectors.Runtime.ZoomPanAnimationHelper : object {
    public static void StartAnimation(UIElement animatableElement, DependencyProperty dependencyProperty, double toValue, double animationDurationSeconds, bool useAnimations);
    public static void StartAnimation(UIElement animatableElement, DependencyProperty dependencyProperty, double toValue, double animationDurationSeconds, EventHandler completedEvent, bool useAnimations);
    public static void StartAnimation(UIElement animatableElement, DependencyProperty dependencyProperty, double toValue, double animationDurationSeconds);
    public static void StartAnimation(UIElement animatableElement, DependencyProperty dependencyProperty, double toValue, double animationDurationSeconds, EventHandler completedEvent);
    public static void CancelAnimation(UIElement animatableElement, DependencyProperty dependencyProperty);
}
public class SharpVectors.Runtime.ZoomPanControl : ContentControl {
    private FrameworkElement _content;
    private ScaleTransform _contentScaleTransform;
    private TranslateTransform _contentOffsetTransform;
    private bool _enableContentOffsetUpdateFromScale;
    private bool _disableScrollOffsetSync;
    private bool _disableContentFocusSync;
    private double _constrainedContentViewportWidth;
    private double _constrainedContentViewportHeight;
    private bool _canVerticallyScroll;
    private bool _canHorizontallyScroll;
    private Size _unScaledExtent;
    private Size _viewport;
    private ScrollViewer _scrollOwner;
    public static DependencyProperty ContentScaleProperty;
    public static DependencyProperty MinContentScaleProperty;
    public static DependencyProperty MaxContentScaleProperty;
    public static DependencyProperty ContentOffsetXProperty;
    public static DependencyProperty ContentOffsetYProperty;
    public static DependencyProperty AnimationDurationProperty;
    public static DependencyProperty ContentZoomFocusXProperty;
    public static DependencyProperty ContentZoomFocusYProperty;
    public static DependencyProperty ViewportZoomFocusXProperty;
    public static DependencyProperty ViewportZoomFocusYProperty;
    public static DependencyProperty ContentViewportWidthProperty;
    public static DependencyProperty ContentViewportHeightProperty;
    public static DependencyProperty IsMouseWheelScrollingEnabledProperty;
    [CompilerGeneratedAttribute]
private EventHandler ContentOffsetXChanged;
    [CompilerGeneratedAttribute]
private EventHandler ContentOffsetYChanged;
    [CompilerGeneratedAttribute]
private EventHandler ContentScaleChanged;
    public double ContentOffsetX { get; public set; }
    public double ContentOffsetY { get; public set; }
    public double ContentScale { get; public set; }
    public double MinContentScale { get; public set; }
    public double MaxContentScale { get; public set; }
    public double ContentZoomFocusX { get; public set; }
    public double ContentZoomFocusY { get; public set; }
    public double ViewportZoomFocusX { get; public set; }
    public double ViewportZoomFocusY { get; public set; }
    public double AnimationDuration { get; public set; }
    public double ContentViewportWidth { get; public set; }
    public double ContentViewportHeight { get; public set; }
    public bool IsMouseWheelScrollingEnabled { get; public set; }
    public FrameworkElement ContentElement { get; }
    public bool CanVerticallyScroll { get; public set; }
    public bool CanHorizontallyScroll { get; public set; }
    public double ExtentWidth { get; }
    public double ExtentHeight { get; }
    public double ViewportWidth { get; }
    public double ViewportHeight { get; }
    public ScrollViewer ScrollOwner { get; public set; }
    public double HorizontalOffset { get; }
    public double VerticalOffset { get; }
    private static ZoomPanControl();
    [CompilerGeneratedAttribute]
public void add_ContentOffsetXChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ContentOffsetXChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ContentOffsetYChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ContentOffsetYChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ContentScaleChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ContentScaleChanged(EventHandler value);
    public double get_ContentOffsetX();
    public void set_ContentOffsetX(double value);
    public double get_ContentOffsetY();
    public void set_ContentOffsetY(double value);
    public double get_ContentScale();
    public void set_ContentScale(double value);
    public double get_MinContentScale();
    public void set_MinContentScale(double value);
    public double get_MaxContentScale();
    public void set_MaxContentScale(double value);
    public double get_ContentZoomFocusX();
    public void set_ContentZoomFocusX(double value);
    public double get_ContentZoomFocusY();
    public void set_ContentZoomFocusY(double value);
    public double get_ViewportZoomFocusX();
    public void set_ViewportZoomFocusX(double value);
    public double get_ViewportZoomFocusY();
    public void set_ViewportZoomFocusY(double value);
    public double get_AnimationDuration();
    public void set_AnimationDuration(double value);
    public double get_ContentViewportWidth();
    public void set_ContentViewportWidth(double value);
    public double get_ContentViewportHeight();
    public void set_ContentViewportHeight(double value);
    public bool get_IsMouseWheelScrollingEnabled();
    public void set_IsMouseWheelScrollingEnabled(bool value);
    public FrameworkElement get_ContentElement();
    public void AnimatedZoomTo(double newScale, Rect contentRect);
    public void AnimatedZoomTo(Rect contentRect);
    public void ZoomTo(Rect contentRect);
    public void SnapContentOffsetTo(Point contentOffset);
    public void SnapTo(Point contentPoint);
    public void AnimatedSnapTo(Point contentPoint);
    public void AnimatedZoomAboutPoint(double newContentScale, Point contentZoomFocus);
    public void ZoomAboutPoint(double newContentScale, Point contentZoomFocus);
    public void AnimatedZoomTo(double contentScale);
    public void ZoomTo(double contentScale);
    public void AnimatedScaleToFit();
    public void ScaleToFit();
    public virtual void OnApplyTemplate();
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size arrangeBounds);
    private void AnimatedZoomPointToViewportCenter(double newContentScale, Point contentZoomFocus, EventHandler callback);
    private void ZoomPointToViewportCenter(double newContentScale, Point contentZoomFocus);
    private static void ContentScale_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    private static object ContentScale_Coerce(DependencyObject d, object baseValue);
    private static void MinOrMaxContentScale_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    private static void ContentOffsetX_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    private static object ContentOffsetX_Coerce(DependencyObject d, object baseValue);
    private static void ContentOffsetY_PropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    private static object ContentOffsetY_Coerce(DependencyObject d, object baseValue);
    private void ResetViewportZoomFocus();
    private void UpdateViewportSize(Size newSize);
    private void UpdateContentViewportSize();
    private void UpdateTranslationX();
    private void UpdateTranslationY();
    private void UpdateContentZoomFocusX();
    private void UpdateContentZoomFocusY();
    public sealed virtual bool get_CanVerticallyScroll();
    public sealed virtual void set_CanVerticallyScroll(bool value);
    public sealed virtual bool get_CanHorizontallyScroll();
    public sealed virtual void set_CanHorizontallyScroll(bool value);
    public sealed virtual double get_ExtentWidth();
    public sealed virtual double get_ExtentHeight();
    public sealed virtual double get_ViewportWidth();
    public sealed virtual double get_ViewportHeight();
    public sealed virtual ScrollViewer get_ScrollOwner();
    public sealed virtual void set_ScrollOwner(ScrollViewer value);
    public sealed virtual double get_HorizontalOffset();
    public sealed virtual double get_VerticalOffset();
    public sealed virtual void SetHorizontalOffset(double offset);
    public sealed virtual void SetVerticalOffset(double offset);
    public sealed virtual void LineUp();
    public sealed virtual void LineDown();
    public sealed virtual void LineLeft();
    public sealed virtual void LineRight();
    public sealed virtual void PageUp();
    public sealed virtual void PageDown();
    public sealed virtual void PageLeft();
    public sealed virtual void PageRight();
    public sealed virtual void MouseWheelDown();
    public sealed virtual void MouseWheelLeft();
    public sealed virtual void MouseWheelRight();
    public sealed virtual void MouseWheelUp();
    public sealed virtual Rect MakeVisible(Visual visual, Rect rectangle);
    [CompilerGeneratedAttribute]
private void <AnimatedZoomAboutPoint>b__84_0(object sender, EventArgs e);
}
