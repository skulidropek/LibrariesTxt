public class SharpVectors.Dom.Attribute : XmlAttribute {
    private EventTarget _eventTarget;
    public Attribute(string prefix, string localName, string namespaceUri, Document document);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.DispatchEvent(IEvent eventArgs);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture, object eventGroup);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(string namespaceUri, string type);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(string namespaceUri, string type);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTargetSupport.FireEvent(IEvent eventArgs);
}
public class SharpVectors.Dom.CDataSection : XmlCDataSection {
    private EventTarget _eventTarget;
    public string Value { get; public set; }
    public CDataSection(string data, Document document);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.DispatchEvent(IEvent eventArgs);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture, object eventGroup);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(string namespaceUri, string type);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(string namespaceUri, string type);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTargetSupport.FireEvent(IEvent eventArgs);
}
public class SharpVectors.Dom.Comment : XmlComment {
    private EventTarget _eventTarget;
    public string Value { get; public set; }
    public Comment(string comment, Document document);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.DispatchEvent(IEvent eventArgs);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture, object eventGroup);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(string namespaceUri, string type);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(string namespaceUri, string type);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTargetSupport.FireEvent(IEvent eventArgs);
}
internal static class SharpVectors.Dom.Conversion : object {
    internal static INode Cast(XmlNode node);
    internal static XmlNode Cast(INode node);
}
public class SharpVectors.Dom.Declaration : XmlDeclaration {
    private EventTarget _eventTarget;
    protected internal Declaration(string version, string encoding, string standAlone, Document document);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.DispatchEvent(IEvent eventArgs);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture, object eventGroup);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(string namespaceUri, string type);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(string namespaceUri, string type);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTargetSupport.FireEvent(IEvent eventArgs);
}
public class SharpVectors.Dom.Document : XmlDocument {
    private bool _canUseBitmap;
    private bool _mutationEvents;
    private EventTarget _eventTarget;
    private ExternalResourcesAccessModes _resourcesAccessMode;
    public bool MutationEvents { get; public set; }
    public ExternalResourcesAccessModes ExternalResourcesAccessMode { get; public set; }
    public bool CanUseBitmap { get; public set; }
    private IDocumentType SharpVectors.Dom.IDocument.Doctype { get; }
    private IDomImplementation SharpVectors.Dom.IDocument.Implementation { get; }
    private IElement SharpVectors.Dom.IDocument.DocumentElement { get; }
    protected internal Document(DomImplementation domImplementation);
    public Document(XmlNameTable nameTable);
    private void InitDocument();
    public bool get_MutationEvents();
    public void set_MutationEvents(bool value);
    public ExternalResourcesAccessModes get_ExternalResourcesAccessMode();
    public void set_ExternalResourcesAccessMode(ExternalResourcesAccessModes value);
    public bool get_CanUseBitmap();
    public void set_CanUseBitmap(bool value);
    private void WhenNodeChanged(object sender, XmlNodeChangedEventArgs e);
    private void WhenNodeChanging(object sender, XmlNodeChangedEventArgs e);
    private void WhenNodeInserted(object sender, XmlNodeChangedEventArgs e);
    private void WhenNodeInserting(object sender, XmlNodeChangedEventArgs e);
    private void WhenNodeRemoved(object sender, XmlNodeChangedEventArgs e);
    private void WhenNodeRemoving(object sender, XmlNodeChangedEventArgs e);
    protected internal virtual void ReplacedText(INode node);
    protected internal virtual void DeletedText(INode node, int offset, int count);
    protected internal virtual void InsertedText(INode node, int offset, int count);
    protected internal virtual void ModifyingCharacterData(INode node);
    protected internal virtual void ModifiedCharacterData(INode node, string oldvalue, string value);
    protected internal virtual void InsertingNode(INode node, bool replace);
    protected internal virtual void InsertedNode(INode node, INode newInternal, bool replace);
    protected internal virtual void RemovingNode(INode node, INode oldChild, bool replace);
    protected internal virtual void RemovedNode(INode node, bool replace);
    protected internal virtual void replacingNode(INode node);
    protected internal virtual void ReplacedNode(INode node);
    protected internal virtual void ModifiedAttrValue(IAttribute attr, string oldvalue);
    protected internal virtual void SetAttrNode(IAttribute attribute, IAttribute previous);
    protected internal virtual void RemovedAttrNode(IAttribute attribute, INode oldOwner, string name);
    protected internal virtual void RenamedAttrNode(IAttribute oldAttribute, IAttribute newAttribute);
    protected internal virtual void RenamedElement(IElement oldElement, IElement newElement);
    public virtual XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI);
    public virtual XmlCDataSection CreateCDataSection(string data);
    public virtual XmlComment CreateComment(string data);
    public virtual XmlDocumentFragment CreateDocumentFragment();
    public virtual XmlDocumentType CreateDocumentType(string name, string publicId, string systemId, string internalSubset);
    public virtual XmlElement CreateElement(string prefix, string localName, string namespaceURI);
    public virtual XmlEntityReference CreateEntityReference(string name);
    public virtual XmlProcessingInstruction CreateProcessingInstruction(string target, string data);
    public virtual XmlSignificantWhitespace CreateSignificantWhitespace(string text);
    public virtual XmlText CreateTextNode(string text);
    public virtual XmlWhitespace CreateWhitespace(string text);
    public virtual XmlDeclaration CreateXmlDeclaration(string version, string encoding, string standalone);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.DispatchEvent(IEvent eventArgs);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture, object eventGroup);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(string namespaceUri, string type);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(string namespaceUri, string type);
    public sealed virtual bool CanAccessExternalResources(string resourcesUri);
    public sealed virtual bool CanAccessExternalResources(Uri resourcesUri);
    private sealed virtual override IDocumentType SharpVectors.Dom.IDocument.get_Doctype();
    private sealed virtual override IDomImplementation SharpVectors.Dom.IDocument.get_Implementation();
    private sealed virtual override IElement SharpVectors.Dom.IDocument.get_DocumentElement();
    private sealed virtual override IElement SharpVectors.Dom.IDocument.CreateElement(string tagName);
    private sealed virtual override IDocumentFragment SharpVectors.Dom.IDocument.CreateDocumentFragment();
    private sealed virtual override IText SharpVectors.Dom.IDocument.CreateTextNode(string data);
    private sealed virtual override IComment SharpVectors.Dom.IDocument.CreateComment(string data);
    private sealed virtual override ICDataSection SharpVectors.Dom.IDocument.CreateCDataSection(string data);
    private sealed virtual override IProcessingInstruction SharpVectors.Dom.IDocument.CreateProcessingInstruction(string target, string data);
    private sealed virtual override IAttribute SharpVectors.Dom.IDocument.CreateAttribute(string name);
    private sealed virtual override IEntityReference SharpVectors.Dom.IDocument.CreateEntityReference(string name);
    private sealed virtual override INodeList SharpVectors.Dom.IDocument.GetElementsByTagName(string tagname);
    private sealed virtual override INode SharpVectors.Dom.IDocument.ImportNode(INode importedNode, bool deep);
    private sealed virtual override IElement SharpVectors.Dom.IDocument.CreateElementNs(string namespaceUri, string qualifiedName);
    private sealed virtual override IAttribute SharpVectors.Dom.IDocument.CreateAttributeNs(string namespaceUri, string qualifiedName);
    private sealed virtual override INodeList SharpVectors.Dom.IDocument.GetElementsByTagNameNs(string namespaceUri, string localName);
    private sealed virtual override IElement SharpVectors.Dom.IDocument.GetElementById(string elementId);
    public virtual IEvent CreateEvent(string eventType);
    public virtual bool CanDispatch(string namespaceUri, string type);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTargetSupport.FireEvent(IEvent eventArgs);
}
public class SharpVectors.Dom.DocumentFragment : XmlDocumentFragment {
    private EventTarget _eventTarget;
    protected internal DocumentFragment(Document document);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.DispatchEvent(IEvent eventArgs);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture, object eventGroup);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(string namespaceUri, string type);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(string namespaceUri, string type);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTargetSupport.FireEvent(IEvent eventArgs);
}
public class SharpVectors.Dom.DocumentType : XmlDocumentType {
    private EventTarget _eventTarget;
    public DocumentType(string name, string publicId, string systemId, string internalSubset, Document document);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.DispatchEvent(IEvent eventArgs);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture, object eventGroup);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(string namespaceUri, string type);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(string namespaceUri, string type);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTargetSupport.FireEvent(IEvent eventArgs);
}
public class SharpVectors.Dom.DomImplementation : XmlImplementation {
}
public class SharpVectors.Dom.Element : XmlElement {
    private EventTarget _eventTarget;
    public Element(string prefix, string localName, string namespaceUri, Document document);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.DispatchEvent(IEvent evt);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture, object eventGroup);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(string namespaceUri, string type);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(string namespaceUri, string type);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTargetSupport.FireEvent(IEvent evt);
}
public class SharpVectors.Dom.EntityReference : XmlEntityReference {
    private EventTarget _eventTarget;
    protected internal EntityReference(string name, Document document);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.DispatchEvent(IEvent eventArgs);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture, object eventGroup);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(string namespaceUri, string type);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(string namespaceUri, string type);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTargetSupport.FireEvent(IEvent eventArgs);
}
public class SharpVectors.Dom.Events.Event : object {
    private bool _stopped;
    private IEventTarget _eventTarget;
    private IEventTarget _currentTarget;
    private EventPhase _eventPhase;
    private bool _bubbles;
    private DateTime _timeStamp;
    private bool _cancelable;
    private string _namespaceUri;
    protected string _eventType;
    internal bool Stopped { get; internal set; }
    internal IEventTarget EventTarget { get; internal set; }
    public string Type { get; }
    public IEventTarget Target { get; }
    public IEventTarget CurrentTarget { get; internal set; }
    public EventPhase EventPhase { get; internal set; }
    public bool Bubbles { get; }
    public bool Cancelable { get; }
    public DateTime TimeStamp { get; }
    public string NamespaceUri { get; }
    public bool IsCustom { get; }
    public bool IsDefaultPrevented { get; }
    public Event(string eventType, bool bubbles, bool cancelable);
    public Event(string namespaceUri, string eventType, bool bubbles, bool cancelable);
    internal bool get_Stopped();
    internal void set_Stopped(bool value);
    internal IEventTarget get_EventTarget();
    internal void set_EventTarget(IEventTarget value);
    public sealed virtual string get_Type();
    public sealed virtual IEventTarget get_Target();
    public sealed virtual IEventTarget get_CurrentTarget();
    internal void set_CurrentTarget(IEventTarget value);
    public sealed virtual EventPhase get_EventPhase();
    internal void set_EventPhase(EventPhase value);
    public sealed virtual bool get_Bubbles();
    public sealed virtual bool get_Cancelable();
    public sealed virtual DateTime get_TimeStamp();
    public sealed virtual string get_NamespaceUri();
    public sealed virtual bool get_IsCustom();
    public sealed virtual bool get_IsDefaultPrevented();
    public sealed virtual void StopPropagation();
    public sealed virtual void PreventDefault();
    public sealed virtual void InitEvent(string eventType, bool bubbles, bool cancelable);
    public sealed virtual void InitEventNs(string namespaceUri, string eventType, bool bubbles, bool cancelable);
    public sealed virtual void StopImmediatePropagation();
}
public static class SharpVectors.Dom.Events.EventClasses : object {
    public static string XmlEvents2001;
    private static EventClasses();
}
public class SharpVectors.Dom.Events.EventListenerMap : object {
    private static int GrowthBuffer;
    private static int GrowthFactor;
    private int _count;
    private bool _locked;
    private EventListenerMapEntry[] _entries;
    private EventListenerMapEntry[] GrowBy(int growth);
    public void AddEventListener(string namespaceUri, string eventType, object eventGroup, EventListener listener);
    public void RemoveEventListener(string namespaceUri, string eventType, EventListener listener);
    public void FireEvent(IEvent eventArg);
    public bool HasEventListenerNs(string namespaceUri, string eventType);
    public void Lock();
    public void Unlock();
}
public class SharpVectors.Dom.Events.EventListenerMapEntry : object {
    private bool _locked;
    private string _namespaceUri;
    private string _type;
    private object _group;
    private EventListener _listener;
    public bool Locked { get; public set; }
    public string NamespaceUri { get; public set; }
    public string Type { get; public set; }
    public object Group { get; public set; }
    public EventListener Listener { get; public set; }
    public EventListenerMapEntry(string namespaceUri, string type, object group, EventListener listener, bool locked);
    public bool get_Locked();
    public void set_Locked(bool value);
    public string get_NamespaceUri();
    public void set_NamespaceUri(string value);
    public string get_Type();
    public void set_Type(string value);
    public object get_Group();
    public void set_Group(object value);
    public EventListener get_Listener();
    public void set_Listener(EventListener value);
}
public class SharpVectors.Dom.Events.EventTarget : object {
    private IEventTargetSupport _eventTarget;
    private EventListenerMap _captureMap;
    private EventListenerMap _bubbleMap;
    private ArrayList _ancestors;
    public EventTarget(IEventTargetSupport eventTarget);
    public sealed virtual void AddEventListener(string type, EventListener listener, bool useCapture);
    public sealed virtual void RemoveEventListener(string type, EventListener listener, bool useCapture);
    public sealed virtual bool DispatchEvent(IEvent eventInfo);
    public sealed virtual void AddEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture, object evtGroup);
    public sealed virtual void RemoveEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture);
    public sealed virtual bool WillTriggerNs(string namespaceUri, string type);
    public sealed virtual bool HasEventListenerNs(string namespaceUri, string eventType);
    public sealed virtual void FireEvent(IEvent eventInfo);
    public void add_OnMouseMove(EventListener value);
    public void remove_OnMouseMove(EventListener value);
}
public class SharpVectors.Dom.Events.EventType : object {
    public static EventType DomActivate;
    public static EventType DomFocusIn;
    public static EventType DomFocusOut;
    public static EventType TextInput;
    public static EventType Click;
    public static EventType MouseDown;
    public static EventType MouseUp;
    public static EventType MouseOver;
    public static EventType MouseMove;
    public static EventType MouseOut;
    public static EventType KeyDown;
    public static EventType KeyUp;
    public static EventType DomSubtreeModified;
    public static EventType DomNodeInserted;
    public static EventType DomNodeRemoved;
    public static EventType DomNodeRemovedFromDocument;
    public static EventType DomNodeInsertedIntoDocument;
    public static EventType DomAttrModified;
    public static EventType DomCharacterDataModified;
    public static EventType DomElementNameChanged;
    public static EventType DomAttributeNameChanged;
    public static EventType Load;
    public static EventType Unload;
    public static EventType Abort;
    public static EventType Error;
    public static EventType Select;
    public static EventType Change;
    public static EventType Submit;
    public static EventType Reset;
    public static EventType Resize;
    public static EventType Scroll;
    private string _namespaceUri;
    private string _eventType;
    public string Name { get; }
    public string NamespaceUri { get; }
    private EventType(string namespaceUri, string eventType);
    private static EventType();
    public string get_Name();
    public string get_NamespaceUri();
}
public interface SharpVectors.Dom.Events.IEventTargetSupport {
    public abstract virtual void FireEvent(IEvent evt);
}
public class SharpVectors.Dom.Events.KeyboardEvent : UiEvent {
    private bool _ctrlKey;
    private bool _shiftKey;
    private bool _altKey;
    private bool _metaKey;
    private bool _altGraphKey;
    private string _keyIdentifier;
    private KeyLocationCode _keyLocation;
    public string KeyIdentifier { get; }
    public KeyLocationCode KeyLocation { get; }
    public bool CtrlKey { get; }
    public bool ShiftKey { get; }
    public bool AltKey { get; }
    public bool MetaKey { get; }
    public bool AltGraphKey { get; }
    public KeyboardEvent(string eventType, bool bubbles, bool cancelable, IAbstractView view, string keyIdentifier, KeyLocationCode keyLocation, bool ctrlKey, bool shiftKey, bool altKey, bool metaKey, bool altGraphKey);
    public KeyboardEvent(string namespaceUri, string eventType, bool bubbles, bool cancelable, IAbstractView view, string keyIdentifier, KeyLocationCode keyLocation, bool ctrlKey, bool shiftKey, bool altKey, bool metaKey, bool altGraphKey);
    public sealed virtual string get_KeyIdentifier();
    public sealed virtual KeyLocationCode get_KeyLocation();
    public sealed virtual bool get_CtrlKey();
    public sealed virtual bool get_ShiftKey();
    public sealed virtual bool get_AltKey();
    public sealed virtual bool get_MetaKey();
    public sealed virtual bool get_AltGraphKey();
    public sealed virtual void InitKeyboardEvent(string eventType, bool bubbles, bool cancelable, IAbstractView view, string keyIdentifier, KeyLocationCode keyLocation, bool ctrlKey, bool shiftKey, bool altKey, bool metaKey, bool altGraphKey);
    public sealed virtual void InitKeyboardEventNs(string namespaceUri, string eventType, bool bubbles, bool cancelable, IAbstractView view, string keyIdentifier, KeyLocationCode keyLocation, bool ctrlKey, bool shiftKey, bool altKey, bool metaKey, bool altGraphKey);
}
public class SharpVectors.Dom.Events.MouseEvent : UiEvent {
    private long _screenX;
    private long _screeny;
    private long _clientX;
    private long _clientY;
    private bool _crtlKey;
    private bool _shiftKey;
    private bool _altKey;
    private bool _metaKey;
    private ushort _button;
    private bool _altGraphKey;
    private IEventTarget _relatedTarget;
    public long ScreenX { get; }
    public long ScreenY { get; }
    public long ClientX { get; }
    public long ClientY { get; }
    public bool CtrlKey { get; }
    public bool ShiftKey { get; }
    public bool AltKey { get; }
    public bool MetaKey { get; }
    public ushort Button { get; }
    public IEventTarget RelatedTarget { get; }
    public bool AltGraphKey { get; }
    public MouseEvent(string eventType, bool bubbles, bool cancelable, IAbstractView view, long detail, long screenX, long screenY, long clientX, long clientY, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey, ushort button, IEventTarget relatedTarget);
    public MouseEvent(string namespaceUri, string eventType, bool bubbles, bool cancelable, IAbstractView view, long detail, long screenX, long screenY, long clientX, long clientY, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey, ushort button, IEventTarget relatedTarget, bool altGraphKey);
    public MouseEvent(EventType eventType, bool bubbles, bool cancelable, IAbstractView view, long detail, long screenX, long screenY, long clientX, long clientY, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey, ushort button, IEventTarget relatedTarget, bool altGraphKey);
    public sealed virtual long get_ScreenX();
    public sealed virtual long get_ScreenY();
    public sealed virtual long get_ClientX();
    public sealed virtual long get_ClientY();
    public sealed virtual bool get_CtrlKey();
    public sealed virtual bool get_ShiftKey();
    public sealed virtual bool get_AltKey();
    public sealed virtual bool get_MetaKey();
    public sealed virtual ushort get_Button();
    public sealed virtual IEventTarget get_RelatedTarget();
    public sealed virtual bool get_AltGraphKey();
    public sealed virtual void InitMouseEvent(string eventType, bool bubbles, bool cancelable, IAbstractView view, long detail, long screenX, long screenY, long clientX, long clientY, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey, ushort button, IEventTarget relatedTarget);
    public sealed virtual void InitMouseEventNs(string namespaceUri, string eventType, bool bubbles, bool cancelable, IAbstractView view, long detail, long screenX, long screenY, long clientX, long clientY, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey, ushort button, IEventTarget relatedTarget, bool altGraphKey);
}
public class SharpVectors.Dom.Events.MutationEvent : Event {
    private INode _relatedNode;
    private string _prevValue;
    private string _newValue;
    private string _attrName;
    private AttrChangeType _attrChange;
    public INode RelatedNode { get; }
    public string PrevValue { get; }
    public string NewValue { get; }
    public string AttrName { get; }
    public AttrChangeType AttrChange { get; }
    public sealed virtual INode get_RelatedNode();
    public sealed virtual string get_PrevValue();
    public sealed virtual string get_NewValue();
    public sealed virtual string get_AttrName();
    public sealed virtual AttrChangeType get_AttrChange();
    public sealed virtual void InitMutationEvent(string eventType, bool bubbles, bool cancelable, INode relatedNode, string prevValue, string newValue, string attrName, AttrChangeType attrChange);
    public sealed virtual void InitMutationEventNs(string namespaceUri, string eventType, bool bubbles, bool cancelable, INode relatedNode, string prevValue, string newValue, string attrName, AttrChangeType attrChange);
}
public class SharpVectors.Dom.Events.MutationNameEvent : MutationEvent {
    private string _prevNamespaceUri;
    private string _prevNodeName;
    public string PrevNamespaceUri { get; }
    public string PrevNodeName { get; }
    public sealed virtual string get_PrevNamespaceUri();
    public sealed virtual string get_PrevNodeName();
    public sealed virtual void InitMutationNameEvent(string eventType, bool bubbles, bool cancelable, INode relatedNode, string prevNamespaceUri, string prevNodeName);
    public sealed virtual void InitMutationNameEventNs(string namespaceUri, string eventType, bool bubbles, bool cancelable, INode relatedNode, string prevNamespaceUri, string prevNodeName);
}
public class SharpVectors.Dom.Events.TextEvent : UiEvent {
    private string _data;
    private IAbstractView _view;
    public string Data { get; }
    public TextEvent(string eventType, bool bubbles, bool cancelable, IAbstractView view, string data);
    public TextEvent(string namespaceUri, string eventType, bool bubbles, bool cancelable, IAbstractView view, string data);
    public sealed virtual string get_Data();
    public sealed virtual void InitTextEvent(string eventType, bool bubbles, bool cancelable, IAbstractView view, string data);
    public sealed virtual void InitTextEventNs(string namespaceUri, string type, bool bubbles, bool cancelable, IAbstractView view, string data);
}
public class SharpVectors.Dom.Events.UiEvent : Event {
    private long _detail;
    private IAbstractView _view;
    public IAbstractView View { get; }
    public long Detail { get; }
    public UiEvent(string eventType, bool bubbles, bool cancelable, IAbstractView view, long detail);
    public UiEvent(string namespaceUri, string eventType, bool bubbles, bool cancelable, IAbstractView view, long detail);
    public sealed virtual IAbstractView get_View();
    public sealed virtual long get_Detail();
    public sealed virtual void InitUiEvent(string eventType, bool bubbles, bool cancelable, IAbstractView view, long detail);
    public sealed virtual void InitUiEventNs(string namespaceUri, string eventType, bool bubbles, bool cancelable, IAbstractView view, long detail);
}
public enum SharpVectors.Dom.ExternalResourcesAccessModes : Enum {
    public int value__;
    public static ExternalResourcesAccessModes Allow;
    public static ExternalResourcesAccessModes Ignore;
    public static ExternalResourcesAccessModes ThrowError;
}
[DefaultMemberAttribute("Item")]
public class SharpVectors.Dom.NodeListAdapter : object {
    private XmlNodeList _nodeList;
    public INode Item { get; }
    public ulong Count { get; }
    public NodeListAdapter(XmlNodeList nodeList);
    public sealed virtual INode get_Item(ulong index);
    public sealed virtual ulong get_Count();
}
public class SharpVectors.Dom.ProcessingInstruction : XmlProcessingInstruction {
    private EventTarget _eventTarget;
    public ProcessingInstruction(string target, string data, Document document);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.DispatchEvent(IEvent eventArgs);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture, object eventGroup);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(string namespaceUri, string type);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(string namespaceUri, string type);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTargetSupport.FireEvent(IEvent eventArgs);
}
public class SharpVectors.Dom.SignificantWhitespace : XmlSignificantWhitespace {
    private EventTarget _eventTarget;
    public string Value { get; public set; }
    public SignificantWhitespace(string data, Document document);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.DispatchEvent(IEvent eventArgs);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture, object eventGroup);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(string namespaceUri, string type);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(string namespaceUri, string type);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTargetSupport.FireEvent(IEvent eventArgs);
}
public class SharpVectors.Dom.Text : XmlText {
    private EventTarget _eventTarget;
    public string Value { get; public set; }
    protected internal Text(string data, Document document);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.DispatchEvent(IEvent eventArgs);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture, object eventGroup);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(string namespaceUri, string type);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(string namespaceUri, string type);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTargetSupport.FireEvent(IEvent eventArgs);
}
public class SharpVectors.Dom.Whitespace : XmlWhitespace {
    private EventTarget _eventTarget;
    public string Value { get; public set; }
    protected internal Whitespace(string data, Document document);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.DispatchEvent(IEvent eventArgs);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture, object eventGroup);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(string namespaceUri, string type);
    private sealed virtual override bool SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(string namespaceUri, string type);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    private sealed virtual override void SharpVectors.Dom.Events.IEventTargetSupport.FireEvent(IEvent eventArgs);
}
