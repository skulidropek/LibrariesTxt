[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum SharpVectors.Dom.Css.CssPrimitiveType : Enum {
    public int value__;
    public static CssPrimitiveType Unknown;
    public static CssPrimitiveType Number;
    public static CssPrimitiveType Percentage;
    public static CssPrimitiveType Ems;
    public static CssPrimitiveType Exs;
    public static CssPrimitiveType Px;
    public static CssPrimitiveType Cm;
    public static CssPrimitiveType Mm;
    public static CssPrimitiveType In;
    public static CssPrimitiveType Pt;
    public static CssPrimitiveType Pc;
    public static CssPrimitiveType Deg;
    public static CssPrimitiveType Rad;
    public static CssPrimitiveType Grad;
    public static CssPrimitiveType Ms;
    public static CssPrimitiveType S;
    public static CssPrimitiveType Hz;
    public static CssPrimitiveType KHz;
    public static CssPrimitiveType Dimension;
    public static CssPrimitiveType String;
    public static CssPrimitiveType Uri;
    public static CssPrimitiveType Ident;
    public static CssPrimitiveType Attr;
    public static CssPrimitiveType Counter;
    public static CssPrimitiveType Rect;
    public static CssPrimitiveType RgbColor;
    public static CssPrimitiveType Vars;
}
public enum SharpVectors.Dom.Css.CssRuleType : Enum {
    public int value__;
    public static CssRuleType UnknownRule;
    public static CssRuleType StyleRule;
    public static CssRuleType CharsetRule;
    public static CssRuleType ImportRule;
    public static CssRuleType MediaRule;
    public static CssRuleType FontFaceRule;
    public static CssRuleType PageRule;
}
public enum SharpVectors.Dom.Css.CssValueType : Enum {
    public int value__;
    public static CssValueType Inherit;
    public static CssValueType PrimitiveValue;
    public static CssValueType ValueList;
    public static CssValueType Custom;
}
public interface SharpVectors.Dom.Css.ICssCharsetRule {
    public string Encoding { get; public set; }
    public abstract virtual string get_Encoding();
    public abstract virtual void set_Encoding(string value);
}
public interface SharpVectors.Dom.Css.ICssColor {
    public string Name { get; }
    public ICssPrimitiveValue Alpha { get; }
    public ICssPrimitiveValue Red { get; }
    public ICssPrimitiveValue Green { get; }
    public ICssPrimitiveValue Blue { get; }
    public bool HasAlpha { get; }
    public bool IsSystemColor { get; }
    public bool IsVarColor { get; }
    public abstract virtual string get_Name();
    public abstract virtual ICssPrimitiveValue get_Alpha();
    public abstract virtual ICssPrimitiveValue get_Red();
    public abstract virtual ICssPrimitiveValue get_Green();
    public abstract virtual ICssPrimitiveValue get_Blue();
    public abstract virtual bool get_HasAlpha();
    public abstract virtual bool get_IsSystemColor();
    public abstract virtual bool get_IsVarColor();
}
public interface SharpVectors.Dom.Css.ICssCounter {
    public string Separator { get; }
    public string ListStyle { get; }
    public string Identifier { get; }
    public abstract virtual string get_Separator();
    public abstract virtual string get_ListStyle();
    public abstract virtual string get_Identifier();
}
public interface SharpVectors.Dom.Css.ICssFontFaceRule {
    public ICssStyleDeclaration Style { get; }
    public abstract virtual ICssStyleDeclaration get_Style();
}
public interface SharpVectors.Dom.Css.ICssImportRule {
    public ICssStyleSheet StyleSheet { get; }
    public IMediaList Media { get; }
    public string Href { get; }
    public abstract virtual ICssStyleSheet get_StyleSheet();
    public abstract virtual IMediaList get_Media();
    public abstract virtual string get_Href();
}
public interface SharpVectors.Dom.Css.ICssMediaRule {
    public ICssRuleList CssRules { get; }
    public IMediaList Media { get; }
    public abstract virtual void DeleteRule(ulong index);
    public abstract virtual ulong InsertRule(string rule, ulong index);
    public abstract virtual ICssRuleList get_CssRules();
    public abstract virtual IMediaList get_Media();
}
public interface SharpVectors.Dom.Css.ICssPageRule {
    public ICssStyleDeclaration Style { get; }
    public string SelectorText { get; public set; }
    public abstract virtual ICssStyleDeclaration get_Style();
    public abstract virtual string get_SelectorText();
    public abstract virtual void set_SelectorText(string value);
}
public interface SharpVectors.Dom.Css.ICssPrimitiveValue {
    public CssPrimitiveType PrimitiveType { get; }
    public abstract virtual CssPrimitiveType get_PrimitiveType();
    public abstract virtual void SetFloatValue(CssPrimitiveType unitType, double floatValue);
    public abstract virtual double GetFloatValue(CssPrimitiveType unitType);
    public abstract virtual void SetStringValue(CssPrimitiveType stringType, string stringValue);
    public abstract virtual string GetStringValue();
    public abstract virtual ICssCounter GetCounterValue();
    public abstract virtual ICssRect GetRectValue();
    public abstract virtual ICssColor GetRgbColorValue();
}
public interface SharpVectors.Dom.Css.ICssRect {
    public ICssPrimitiveValue Left { get; }
    public ICssPrimitiveValue Bottom { get; }
    public ICssPrimitiveValue Right { get; }
    public ICssPrimitiveValue Top { get; }
    public abstract virtual ICssPrimitiveValue get_Left();
    public abstract virtual ICssPrimitiveValue get_Bottom();
    public abstract virtual ICssPrimitiveValue get_Right();
    public abstract virtual ICssPrimitiveValue get_Top();
}
public interface SharpVectors.Dom.Css.ICssRule {
    public ICssStyleSheet ParentStyleSheet { get; }
    public ICssRule ParentRule { get; }
    public CssRuleType Type { get; }
    public string CssText { get; public set; }
    public abstract virtual ICssStyleSheet get_ParentStyleSheet();
    public abstract virtual ICssRule get_ParentRule();
    public abstract virtual CssRuleType get_Type();
    public abstract virtual string get_CssText();
    public abstract virtual void set_CssText(string value);
}
[DefaultMemberAttribute("Item")]
public interface SharpVectors.Dom.Css.ICssRuleList {
    public ulong Length { get; }
    public ICssRule Item { get; }
    public bool HasFontRule { get; }
    public abstract virtual ulong get_Length();
    public abstract virtual ICssRule get_Item(ulong Item);
    public abstract virtual bool get_HasFontRule();
}
[DefaultMemberAttribute("Item")]
public interface SharpVectors.Dom.Css.ICssStyleDeclaration {
    public ICssRule ParentRule { get; }
    public ulong Length { get; }
    public string CssText { get; public set; }
    public string Item { get; }
    public abstract virtual void SetProperty(string propertyName, string value, string priority);
    public abstract virtual string GetPropertyPriority(string propertyName);
    public abstract virtual string RemoveProperty(string propertyName);
    public abstract virtual ICssValue GetPropertyCssValue(string propertyName);
    public abstract virtual string GetPropertyValue(string propertyName);
    public abstract virtual string GetPropertyValue(String[] propertyNames);
    public abstract virtual ICssRule get_ParentRule();
    public abstract virtual ulong get_Length();
    public abstract virtual string get_CssText();
    public abstract virtual void set_CssText(string value);
    public abstract virtual string get_Item(ulong index);
}
public interface SharpVectors.Dom.Css.ICssStyleRule {
    public string SelectorText { get; public set; }
    public ICssStyleDeclaration Style { get; }
    public abstract virtual string get_SelectorText();
    public abstract virtual void set_SelectorText(string value);
    public abstract virtual ICssStyleDeclaration get_Style();
}
public interface SharpVectors.Dom.Css.ICssStyleSheet {
    public ICssRuleList CssRules { get; }
    public ICssRule OwnerRule { get; }
    public abstract virtual void DeleteRule(ulong index);
    public abstract virtual ulong InsertRule(string rule, ulong index);
    public abstract virtual ICssRuleList get_CssRules();
    public abstract virtual ICssRule get_OwnerRule();
}
public interface SharpVectors.Dom.Css.ICssUnknownRule {
}
public interface SharpVectors.Dom.Css.ICssValue {
    public string CssText { get; public set; }
    public CssValueType CssValueType { get; }
    public bool IsAbsolute { get; }
    public abstract virtual string get_CssText();
    public abstract virtual void set_CssText(string value);
    public abstract virtual CssValueType get_CssValueType();
    public abstract virtual bool get_IsAbsolute();
}
[DefaultMemberAttribute("Item")]
public interface SharpVectors.Dom.Css.ICssValueList {
    public ulong Length { get; }
    public ICssValue Item { get; }
    public abstract virtual ulong get_Length();
    public abstract virtual ICssValue get_Item(ulong index);
}
public interface SharpVectors.Dom.Css.ICssView {
    public abstract virtual ICssStyleDeclaration GetComputedStyle(XmlElement elt, string pseudoElt);
}
public interface SharpVectors.Dom.Css.IDocumentCss {
    public abstract virtual ICssStyleDeclaration GetOverrideStyle(XmlElement elt, string pseudoElt);
}
public interface SharpVectors.Dom.Css.IDomImplementationCss {
    public abstract virtual ICssStyleSheet CreateCssStyleSheet(string title, string media);
}
public interface SharpVectors.Dom.Css.IElementCssInlineStyle {
    public ICssStyleDeclaration Style { get; }
    public abstract virtual ICssStyleDeclaration get_Style();
}
public static class SharpVectors.Dom.CssConstants : object {
    public static string MimeType;
    public static Char[] TrimUri;
    public static string PropAlignmentBaseline;
    public static string PropBaselineShift;
    public static string PropClip;
    public static string PropClipPath;
    public static string PropClipRule;
    public static string PropColorProfile;
    public static string PropColor;
    public static string PropColorInterpolation;
    public static string PropColorInterpolationFilters;
    public static string PropColorRendering;
    public static string PropCursor;
    public static string PropDirection;
    public static string PropDisplay;
    public static string PropDominantBaseline;
    public static string PropEnableBackground;
    public static string PropFillOpacity;
    public static string PropFill;
    public static string PropFillRule;
    public static string PropFilter;
    public static string PropFloodColor;
    public static string PropFloodOpacity;
    public static string PropFont;
    public static string PropFontFamily;
    public static string PropFontSize;
    public static string PropFontSizeAdjust;
    public static string PropFontStretch;
    public static string PropFontStyle;
    public static string PropFontVariant;
    public static string PropFontWeight;
    public static string PropGlyphOrientationHorizontal;
    public static string PropGlyphOrientationVertical;
    public static string PropImageRendering;
    public static string PropKerning;
    public static string PropLetterSpacing;
    public static string PropLightingColor;
    public static string PropLineHeight;
    public static string PropMarker;
    public static string PropMarkerEnd;
    public static string PropMarkerMid;
    public static string PropMarkerStart;
    public static string PropMask;
    public static string PropOpacity;
    public static string PropOverflow;
    public static string PropPointerEvents;
    public static string PropShapeRendering;
    public static string PropSrc;
    public static string PropStopColor;
    public static string PropStopOpacity;
    public static string PropStroke;
    public static string PropStrokeDasharray;
    public static string PropStrokeDashoffset;
    public static string PropStrokeLinecap;
    public static string PropStrokeLinejoin;
    public static string PropStrokeMiterlimit;
    public static string PropStrokeOpacity;
    public static string PropStrokeWidth;
    public static string PropTextAnchor;
    public static string PropTextDecoration;
    public static string PropTextRendering;
    public static string PropUnicodeBidi;
    public static string PropVisibility;
    public static string PropWordSpacing;
    public static string PropWritingMode;
    public static string ValAccumulate;
    public static string ValActiveborder;
    public static string ValActivecaption;
    public static string ValAfterEdge;
    public static string ValAliceblue;
    public static string ValAll;
    public static string ValAlphabetic;
    public static string ValAntiquewhite;
    public static string ValAppworkspace;
    public static string ValAquamarine;
    public static string ValAqua;
    public static string ValAutosenseScript;
    public static string ValAuto;
    public static string ValAzure;
    public static string ValBackground;
    public static string ValBaseline;
    public static string ValBeforeEdge;
    public static string ValBeige;
    public static string ValBevel;
    public static string ValBidiOverride;
    public static string ValBisque;
    public static string ValBlack;
    public static string ValBlanchedalmond;
    public static string ValBlink;
    public static string ValBlock;
    public static string ValBlueviolet;
    public static string ValBlue;
    public static string ValBolder;
    public static string ValBold;
    public static string ValBottom;
    public static string ValBrown;
    public static string ValBurlywood;
    public static string ValButtonface;
    public static string ValButtonhighlight;
    public static string ValButtonshadow;
    public static string ValButtontext;
    public static string ValButt;
    public static string ValCadetblue;
    public static string ValCaptiontext;
    public static string ValCaption;
    public static string ValCenter;
    public static string ValCentral;
    public static string ValChartreuse;
    public static string ValChocolate;
    public static string ValCollapse;
    public static string ValCompact;
    public static string ValCondensed;
    public static string ValCoral;
    public static string ValCornflowerblue;
    public static string ValCornsilk;
    public static string ValCrimson;
    public static string ValCrispedges;
    public static string ValCrosshair;
    public static string ValCurrentcolor;
    public static string ValCursive;
    public static string ValCyan;
    public static string ValDarkblue;
    public static string ValDarkcyan;
    public static string ValDarkgoldenrod;
    public static string ValDarkgray;
    public static string ValDarkgreen;
    public static string ValDarkgrey;
    public static string ValDarkkhaki;
    public static string ValDarkmagenta;
    public static string ValDarkolivegreen;
    public static string ValDarkorange;
    public static string ValDarkorchid;
    public static string ValDarkred;
    public static string ValDarksalmon;
    public static string ValDarkseagreen;
    public static string ValDarkslateblue;
    public static string ValDarkslategray;
    public static string ValDarkslategrey;
    public static string ValDarkturquoise;
    public static string ValDarkviolet;
    public static string ValDeeppink;
    public static string ValDeepskyblue;
    public static string ValDefault;
    public static string ValDimgray;
    public static string ValDimgrey;
    public static string ValDodgerblue;
    public static string ValEmbed;
    public static string ValEnd;
    public static string ValEvenodd;
    public static string ValExpanded;
    public static string ValExtraCondensed;
    public static string ValExtraExpanded;
    public static string ValEResize;
    public static string ValFantasy;
    public static string ValFillstroke;
    public static string ValFill;
    public static string ValFirebrick;
    public static string ValFloralwhite;
    public static string ValForestgreen;
    public static string ValFuchsia;
    public static string ValGainsboro;
    public static string ValGeometricprecision;
    public static string ValGhostwhite;
    public static string ValGoldenrod;
    public static string ValGold;
    public static string ValGraytext;
    public static string ValGray;
    public static string ValGreenyellow;
    public static string ValGreen;
    public static string ValGrey;
    public static string ValHanging;
    public static string ValHelp;
    public static string ValHidden;
    public static string ValHighlighttext;
    public static string ValHighlight;
    public static string ValHoneydew;
    public static string ValHotpink;
    public static string ValIcon;
    public static string ValIdeographic;
    public static string ValInactiveborder;
    public static string ValInactivecaptiontext;
    public static string ValInactivecaption;
    public static string ValIndianred;
    public static string ValIndigo;
    public static string ValInfobackground;
    public static string ValInfotext;
    public static string ValInlineTable;
    public static string ValInline;
    public static string ValItalic;
    public static string ValIvory;
    public static string ValKhaki;
    public static string ValLarger;
    public static string ValLarge;
    public static string ValLavenderblush;
    public static string ValLavender;
    public static string ValLawngreen;
    public static string ValLemonchiffon;
    public static string ValLightblue;
    public static string ValLightcoral;
    public static string ValLightcyan;
    public static string ValLighter;
    public static string ValLightgoldenrodyellow;
    public static string ValLightgray;
    public static string ValLightgreen;
    public static string ValLightgrey;
    public static string ValLightpink;
    public static string ValLightsalmon;
    public static string ValLightseagreen;
    public static string ValLightskyblue;
    public static string ValLightslategray;
    public static string ValLightslategrey;
    public static string ValLightsteelblue;
    public static string ValLightyellow;
    public static string ValLimegreen;
    public static string ValLime;
    public static string ValLinearRgb;
    public static string ValLinen;
    public static string ValLineThrough;
    public static string ValListItem;
    public static string ValLower;
    public static string ValLrTb;
    public static string ValLr;
    public static string ValLtr;
    public static string ValMagenta;
    public static string ValMarker;
    public static string ValMaroon;
    public static string ValMathematical;
    public static string ValMediumaquamarine;
    public static string ValMediumblue;
    public static string ValMediumorchid;
    public static string ValMediumpurple;
    public static string ValMediumseagreen;
    public static string ValMediumslateblue;
    public static string ValMediumspringgreen;
    public static string ValMediumturquoise;
    public static string ValMediumvioletred;
    public static string ValMedium;
    public static string ValMenu;
    public static string ValMenutext;
    public static string ValMessageBox;
    public static string ValMiddle;
    public static string ValMidnightblue;
    public static string ValMintcream;
    public static string ValMistyrose;
    public static string ValMiter;
    public static string ValMoccasin;
    public static string ValMonospace;
    public static string ValMove;
    public static string ValNarrower;
    public static string ValNavajowhite;
    public static string ValNavy;
    public static string ValNew;
    public static string ValNeResize;
    public static string ValNone;
    public static string ValNonzero;
    public static string ValNormal;
    public static string ValNoChange;
    public static string ValNwResize;
    public static string ValNResize;
    public static string ValOblique;
    public static string ValOldlace;
    public static string ValOlivedrab;
    public static string ValOlive;
    public static string ValOptimizelegibility;
    public static string ValOptimizequality;
    public static string ValOptimizespeed;
    public static string ValOrangered;
    public static string ValOrange;
    public static string ValOrchid;
    public static string ValOverline;
    public static string ValPainted;
    public static string ValPalegoldenrod;
    public static string ValPalegreen;
    public static string ValPaleturquoise;
    public static string ValPalevioletred;
    public static string ValPapayawhip;
    public static string ValPeachpuff;
    public static string ValPeru;
    public static string ValPink;
    public static string ValPlum;
    public static string ValPointer;
    public static string ValPowderblue;
    public static string ValPurple;
    public static string ValRed;
    public static string ValResetSize;
    public static string ValReset;
    public static string ValRlTb;
    public static string ValRl;
    public static string ValRosybrown;
    public static string ValRound;
    public static string ValRoyalblue;
    public static string ValRtl;
    public static string ValRunIn;
    public static string ValSaddlebrown;
    public static string ValSalmon;
    public static string ValSandybrown;
    public static string ValSansSerif;
    public static string ValScrollbar;
    public static string ValScroll;
    public static string ValSeagreen;
    public static string ValSeashell;
    public static string ValSemiCondensed;
    public static string ValSemiExpanded;
    public static string ValSerif;
    public static string ValSeResize;
    public static string ValSienna;
    public static string ValSilver;
    public static string ValSkyblue;
    public static string ValSlateblue;
    public static string ValSlategray;
    public static string ValSlategrey;
    public static string ValSmaller;
    public static string ValSmallCaps;
    public static string ValSmallCaption;
    public static string ValSmall;
    public static string ValSnow;
    public static string ValSpringgreen;
    public static string ValSquare;
    public static string ValSrgb;
    public static string ValStart;
    public static string ValStatusBar;
    public static string ValSteelblue;
    public static string ValStroke;
    public static string ValSub;
    public static string ValSuper;
    public static string ValSwResize;
    public static string ValSResize;
    public static string ValTableCaption;
    public static string ValTableCell;
    public static string ValTableColumnGroup;
    public static string ValTableColumn;
    public static string ValTableFooterGroup;
    public static string ValTableHeaderGroup;
    public static string ValTableRowGroup;
    public static string ValTableRow;
    public static string ValTable;
    public static string ValTan;
    public static string ValTbRl;
    public static string ValTb;
    public static string ValTeal;
    public static string ValTextAfterEdge;
    public static string ValTextBeforeEdge;
    public static string ValTextBottom;
    public static string ValTextTop;
    public static string ValText;
    public static string ValThistle;
    public static string ValThreeddarkshadow;
    public static string ValThreedface;
    public static string ValThreedhighlight;
    public static string ValThreedlightshadow;
    public static string ValThreedshadow;
    public static string ValTomato;
    public static string ValTop;
    public static string ValTriangle;
    public static string ValTurquoise;
    public static string ValUltraCondensed;
    public static string ValUltraExpanded;
    public static string ValUnderline;
    public static string ValUseScript;
    public static string ValViolet;
    public static string ValVisiblefillstroke;
    public static string ValVisiblefill;
    public static string ValVisiblepainted;
    public static string ValVisiblestroke;
    public static string ValVisible;
    public static string ValWait;
    public static string ValWheat;
    public static string ValWhitesmoke;
    public static string ValWhite;
    public static string ValWider;
    public static string ValWindowframe;
    public static string ValWindowtext;
    public static string ValWindow;
    public static string ValWResize;
    public static string ValXxLarge;
    public static string ValXxSmall;
    public static string ValXLarge;
    public static string ValXSmall;
    public static string ValYellowgreen;
    public static string ValYellow;
    private static CssConstants();
}
public class SharpVectors.Dom.DomException : Exception {
    private DomExceptionType _exceptionCode;
    public DomExceptionType Code { get; protected set; }
    protected DomException(string msg, Exception innerException);
    public DomException(DomExceptionType code);
    public DomException(DomExceptionType code, string msg);
    public DomException(DomExceptionType code, string msg, Exception innerException);
    protected DomException(SerializationInfo info, StreamingContext context);
    public DomExceptionType get_Code();
    protected void set_Code(DomExceptionType value);
}
public enum SharpVectors.Dom.DomExceptionType : Enum {
    public int value__;
    public static DomExceptionType UnknowError;
    public static DomExceptionType IndexSizeErr;
    public static DomExceptionType DomstringSizeErr;
    public static DomExceptionType HierarchyRequestErr;
    public static DomExceptionType WrongDocumentErr;
    public static DomExceptionType InvalidCharacterErr;
    public static DomExceptionType NoDataAllowedErr;
    public static DomExceptionType NoModificationAllowedErr;
    public static DomExceptionType NotFoundErr;
    public static DomExceptionType NotSupportedErr;
    public static DomExceptionType InuseAttributeErr;
    public static DomExceptionType InvalidStateErr;
    public static DomExceptionType SyntaxErr;
    public static DomExceptionType InvalidModificationErr;
    public static DomExceptionType NamespaceErr;
    public static DomExceptionType InvalidAccessErr;
}
public enum SharpVectors.Dom.Events.AttrChangeType : Enum {
    public ushort value__;
    public static AttrChangeType None;
    public static AttrChangeType Modification;
    public static AttrChangeType Addition;
    public static AttrChangeType Removal;
}
public class SharpVectors.Dom.Events.EventException : Exception {
    private EventExceptionCode _code;
    public EventExceptionCode Code { get; }
    public EventException(EventExceptionCode code);
    [SecuritySafeCriticalAttribute]
protected EventException(SerializationInfo info, StreamingContext context);
    public EventExceptionCode get_Code();
}
public enum SharpVectors.Dom.Events.EventExceptionCode : Enum {
    public int value__;
    public static EventExceptionCode UnspecifiedEventTypeErr;
    public static EventExceptionCode DispatchRequestErr;
}
public class SharpVectors.Dom.Events.EventListener : MulticastDelegate {
    public EventListener(object object, IntPtr method);
    public virtual void Invoke(IEvent e);
    public virtual IAsyncResult BeginInvoke(IEvent e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum SharpVectors.Dom.Events.EventPhase : Enum {
    public int value__;
    public static EventPhase CapturingPhase;
    public static EventPhase AtTarget;
    public static EventPhase BubblingPhase;
}
public interface SharpVectors.Dom.Events.ICustomEvent {
    public bool IsPropagationStopped { get; }
    public bool IsImmediatePropagationStopped { get; }
    public abstract virtual bool get_IsPropagationStopped();
    public abstract virtual bool get_IsImmediatePropagationStopped();
    public abstract virtual void SetDispatchState(IEventTarget target, ushort phase);
}
public interface SharpVectors.Dom.Events.IDocumentEvent {
    public abstract virtual IEvent CreateEvent(string eventType);
    public abstract virtual bool CanDispatch(string namespaceUri, string type);
}
public interface SharpVectors.Dom.Events.IEvent {
    public string Type { get; }
    public IEventTarget Target { get; }
    public IEventTarget CurrentTarget { get; }
    public EventPhase EventPhase { get; }
    public bool Bubbles { get; }
    public bool Cancelable { get; }
    public DateTime TimeStamp { get; }
    public string NamespaceUri { get; }
    public bool IsCustom { get; }
    public bool IsDefaultPrevented { get; }
    public abstract virtual string get_Type();
    public abstract virtual IEventTarget get_Target();
    public abstract virtual IEventTarget get_CurrentTarget();
    public abstract virtual EventPhase get_EventPhase();
    public abstract virtual bool get_Bubbles();
    public abstract virtual bool get_Cancelable();
    public abstract virtual DateTime get_TimeStamp();
    public abstract virtual string get_NamespaceUri();
    public abstract virtual bool get_IsCustom();
    public abstract virtual bool get_IsDefaultPrevented();
    public abstract virtual void StopPropagation();
    public abstract virtual void PreventDefault();
    public abstract virtual void InitEvent(string eventTypeArg, bool canBubbleArg, bool cancelableArg);
    public abstract virtual void InitEventNs(string namespaceUriArg, string eventTypeArg, bool canBubbleArg, bool cancelableArg);
    public abstract virtual void StopImmediatePropagation();
}
public interface SharpVectors.Dom.Events.IEventListener {
    public abstract virtual void HandleEvent(IEvent evt);
}
public interface SharpVectors.Dom.Events.IEventTarget {
    public abstract virtual void AddEventListener(string type, EventListener listener, bool useCapture);
    public abstract virtual void RemoveEventListener(string type, EventListener listener, bool useCapture);
    public abstract virtual bool DispatchEvent(IEvent evt);
    public abstract virtual void AddEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture, object evtGroup);
    public abstract virtual void RemoveEventListenerNs(string namespaceUri, string type, EventListener listener, bool useCapture);
    public abstract virtual bool WillTriggerNs(string namespaceUri, string type);
    public abstract virtual bool HasEventListenerNs(string namespaceUri, string type);
}
public interface SharpVectors.Dom.Events.IKeyboardEvent {
    public string KeyIdentifier { get; }
    public KeyLocationCode KeyLocation { get; }
    public bool CtrlKey { get; }
    public bool ShiftKey { get; }
    public bool AltKey { get; }
    public bool MetaKey { get; }
    public bool AltGraphKey { get; }
    public abstract virtual string get_KeyIdentifier();
    public abstract virtual KeyLocationCode get_KeyLocation();
    public abstract virtual bool get_CtrlKey();
    public abstract virtual bool get_ShiftKey();
    public abstract virtual bool get_AltKey();
    public abstract virtual bool get_MetaKey();
    public abstract virtual bool get_AltGraphKey();
    public abstract virtual void InitKeyboardEvent(string typeArg, bool canBubbleArg, bool cancelableArg, IAbstractView viewArg, string keyIdentifierArg, KeyLocationCode keyLocationArg, bool ctrlKeyArg, bool shiftKeyArg, bool altKeyArg, bool metaKeyArg, bool altGraphKeyArg);
    public abstract virtual void InitKeyboardEventNs(string namespaceUri, string type, bool canBubbleArg, bool cancelableArg, IAbstractView viewArg, string keyIdentifierArg, KeyLocationCode keyLocationArg, bool ctrlKeyArg, bool shiftKeyArg, bool altKeyArg, bool metaKeyArg, bool altGraphKeyArg);
}
public interface SharpVectors.Dom.Events.IMouseEvent {
    public long ScreenX { get; }
    public long ScreenY { get; }
    public long ClientX { get; }
    public long ClientY { get; }
    public bool CtrlKey { get; }
    public bool ShiftKey { get; }
    public bool AltKey { get; }
    public bool MetaKey { get; }
    public ushort Button { get; }
    public IEventTarget RelatedTarget { get; }
    public bool AltGraphKey { get; }
    public abstract virtual long get_ScreenX();
    public abstract virtual long get_ScreenY();
    public abstract virtual long get_ClientX();
    public abstract virtual long get_ClientY();
    public abstract virtual bool get_CtrlKey();
    public abstract virtual bool get_ShiftKey();
    public abstract virtual bool get_AltKey();
    public abstract virtual bool get_MetaKey();
    public abstract virtual ushort get_Button();
    public abstract virtual IEventTarget get_RelatedTarget();
    public abstract virtual bool get_AltGraphKey();
    public abstract virtual void InitMouseEvent(string typeArg, bool canBubbleArg, bool cancelableArg, IAbstractView viewArg, long detailArg, long screenXArg, long screenYArg, long clientXArg, long clientYArg, bool ctrlKeyArg, bool altKeyArg, bool shiftKeyArg, bool metaKeyArg, ushort buttonArg, IEventTarget relatedTargetArg);
    public abstract virtual void InitMouseEventNs(string namespaceUri, string typeArg, bool canBubbleArg, bool cancelableArg, IAbstractView viewArg, long detailArg, long screenXArg, long screenYArg, long clientXArg, long clientYArg, bool ctrlKeyArg, bool altKeyArg, bool shiftKeyArg, bool metaKeyArg, ushort buttonArg, IEventTarget relatedTargetArg, bool altGraphKeyArg);
}
public interface SharpVectors.Dom.Events.IMutationEvent {
    public INode RelatedNode { get; }
    public string PrevValue { get; }
    public string NewValue { get; }
    public string AttrName { get; }
    public AttrChangeType AttrChange { get; }
    public abstract virtual INode get_RelatedNode();
    public abstract virtual string get_PrevValue();
    public abstract virtual string get_NewValue();
    public abstract virtual string get_AttrName();
    public abstract virtual AttrChangeType get_AttrChange();
    public abstract virtual void InitMutationEvent(string typeArg, bool canBubbleArg, bool cancelableArg, INode relatedNodeArg, string prevValueArg, string newValueArg, string attrNameArg, AttrChangeType attrChangeArg);
    public abstract virtual void InitMutationEventNs(string namespaceUri, string typeArg, bool canBubbleArg, bool cancelableArg, INode relatedNodeArg, string prevValueArg, string newValueArg, string attrNameArg, AttrChangeType attrChangeArg);
}
public interface SharpVectors.Dom.Events.IMutationNameEvent {
    public string PrevNamespaceUri { get; }
    public string PrevNodeName { get; }
    public abstract virtual string get_PrevNamespaceUri();
    public abstract virtual string get_PrevNodeName();
    public abstract virtual void InitMutationNameEvent(string typeArg, bool canBubbleArg, bool cancelableArg, INode relatedNodeArg, string prevNamespaceUri, string prevNodeName);
    public abstract virtual void InitMutationNameEventNs(string namespaceUri, string typeArg, bool canBubbleArg, bool cancelableArg, INode relatedNodeArg, string prevNamespaceUri, string prevNodeName);
}
public interface SharpVectors.Dom.Events.ITextEvent {
    public string Data { get; }
    public abstract virtual string get_Data();
    public abstract virtual void InitTextEvent(string typeArg, bool canBubbleArg, bool cancelableArg, IAbstractView viewArg, string dataArg);
    public abstract virtual void InitTextEventNs(string namespaceUri, string type, bool canBubbleArg, bool cancelableArg, IAbstractView viewArg, string dataArg);
}
public interface SharpVectors.Dom.Events.ITimeEvent {
    public IAbstractView View { get; }
    public long Detail { get; }
    public abstract virtual IAbstractView get_View();
    public abstract virtual long get_Detail();
    public abstract virtual void InitTimeEvent(string typeArg, IAbstractView viewArg, long detailArg);
}
public interface SharpVectors.Dom.Events.IUiEvent {
    public IAbstractView View { get; }
    public long Detail { get; }
    public abstract virtual IAbstractView get_View();
    public abstract virtual long get_Detail();
    public abstract virtual void InitUiEvent(string typeArg, bool canBubbleArg, bool cancelableArg, IAbstractView viewArg, long detailArg);
    public abstract virtual void InitUiEventNs(string namespaceURI, string typeArg, bool canBubbleArg, bool cancelableArg, IAbstractView viewArg, long detailArg);
}
public enum SharpVectors.Dom.Events.KeyLocationCode : Enum {
    public ulong value__;
    public static KeyLocationCode Standard;
    public static KeyLocationCode Left;
    public static KeyLocationCode Right;
    public static KeyLocationCode Numpad;
    public static KeyLocationCode Unknown;
}
public interface SharpVectors.Dom.IAttribute {
    public XmlElement OwnerElement { get; }
    public bool Specified { get; }
    public abstract virtual XmlElement get_OwnerElement();
    public abstract virtual bool get_Specified();
}
public interface SharpVectors.Dom.ICDataSection {
}
public interface SharpVectors.Dom.ICharacterData {
    public string Data { get; public set; }
    public int Length { get; }
    public abstract virtual string get_Data();
    public abstract virtual void set_Data(string value);
    public abstract virtual int get_Length();
    public abstract virtual void AppendData(string strData);
    public abstract virtual void DeleteData(int offset, int count);
    public abstract virtual void InsertData(int offset, string strData);
    public abstract virtual void ReplaceData(int offset, int count, string strData);
    public abstract virtual string Substring(int offset, int count);
}
public interface SharpVectors.Dom.IComment {
}
public interface SharpVectors.Dom.IDocument {
    public IDocumentType Doctype { get; }
    public IDomImplementation Implementation { get; }
    public IElement DocumentElement { get; }
    public abstract virtual IDocumentType get_Doctype();
    public abstract virtual IDomImplementation get_Implementation();
    public abstract virtual IElement get_DocumentElement();
    public abstract virtual bool CanAccessExternalResources(string resourcesUri);
    public abstract virtual bool CanAccessExternalResources(Uri resourcesUri);
    public abstract virtual IElement CreateElement(string tagName);
    public abstract virtual IDocumentFragment CreateDocumentFragment();
    public abstract virtual IText CreateTextNode(string data);
    public abstract virtual IComment CreateComment(string data);
    public abstract virtual ICDataSection CreateCDataSection(string data);
    public abstract virtual IProcessingInstruction CreateProcessingInstruction(string target, string data);
    public abstract virtual IAttribute CreateAttribute(string name);
    public abstract virtual IEntityReference CreateEntityReference(string name);
    public abstract virtual INodeList GetElementsByTagName(string tagname);
    public abstract virtual INode ImportNode(INode importedNode, bool deep);
    public abstract virtual IElement CreateElementNs(string namespaceUri, string qualifiedName);
    public abstract virtual IAttribute CreateAttributeNs(string namespaceUri, string qualifiedName);
    public abstract virtual INodeList GetElementsByTagNameNs(string namespaceURI, string localName);
    public abstract virtual IElement GetElementById(string elementId);
}
public interface SharpVectors.Dom.IDocumentFragment {
}
public interface SharpVectors.Dom.IDocumentType {
    public XmlNamedNodeMap Entities { get; }
    public XmlNamedNodeMap Notations { get; }
    public string PublicId { get; }
    public string SystemId { get; }
    public string InternalSubset { get; }
    public abstract virtual XmlNamedNodeMap get_Entities();
    public abstract virtual XmlNamedNodeMap get_Notations();
    public abstract virtual string get_PublicId();
    public abstract virtual string get_SystemId();
    public abstract virtual string get_InternalSubset();
}
public interface SharpVectors.Dom.IDomConfiguration {
    public abstract virtual bool CanSetParameter(string name, object value);
    public abstract virtual object GetParameter(string name);
    public abstract virtual void SetParameter(string name, object value);
    public abstract virtual ICollection`1<string> GetParameterNames();
}
public interface SharpVectors.Dom.IDomImplementation {
    public abstract virtual bool HasFeature(string feature, string version);
    public abstract virtual IDocumentType CreateDocumentType(string qualifiedName, string publicId, string systemId);
    public abstract virtual IDocument CreateDocument(string namespaceURI, string qualifiedName, IDocumentType doctype);
}
public interface SharpVectors.Dom.IDomTimeStamp {
}
public interface SharpVectors.Dom.IElement {
}
public interface SharpVectors.Dom.IElementTimeControl {
    public abstract virtual void BeginElement();
    public abstract virtual void BeginElementAt(float offset);
    public abstract virtual void EndElement();
    public abstract virtual void EndElementAt(float offset);
}
public interface SharpVectors.Dom.IEntity {
    public string PublicId { get; }
    public string SystemId { get; }
    public string NotationName { get; }
    public abstract virtual string get_PublicId();
    public abstract virtual string get_SystemId();
    public abstract virtual string get_NotationName();
}
public interface SharpVectors.Dom.IEntityReference {
}
public interface SharpVectors.Dom.INamedNodeMap {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual XmlNode GetNamedItem(string name);
    public abstract virtual XmlNode GetNamedItem(string localName, string namespaceURI);
    public abstract virtual XmlNode Item(int index);
    public abstract virtual XmlNode RemoveNamedItem(string name);
    public abstract virtual XmlNode RemoveNamedItem(string localName, string namespaceURI);
    public abstract virtual XmlNode SetNamedItem(XmlNode node);
}
public interface SharpVectors.Dom.INode {
}
[DefaultMemberAttribute("Item")]
public interface SharpVectors.Dom.INodeList {
    public INode Item { get; }
    public ulong Count { get; }
    public abstract virtual INode get_Item(ulong index);
    public abstract virtual ulong get_Count();
}
public interface SharpVectors.Dom.INotation {
    public string PublicId { get; }
    public string SystemId { get; }
    public abstract virtual string get_PublicId();
    public abstract virtual string get_SystemId();
}
public interface SharpVectors.Dom.IProcessingInstruction {
    public string Target { get; }
    public string Data { get; public set; }
    public abstract virtual string get_Target();
    public abstract virtual string get_Data();
    public abstract virtual void set_Data(string value);
}
public interface SharpVectors.Dom.IText {
    public abstract virtual XmlText SplitText(int offset);
}
public interface SharpVectors.Dom.IXmlElement {
    public bool HasAttributes { get; }
    public abstract virtual bool get_HasAttributes();
    public abstract virtual string GetAttribute(string name);
    public abstract virtual string GetAttribute(string localName, string namespaceURI);
    public abstract virtual void SetAttribute(string name, string value);
    public abstract virtual string SetAttribute(string qualifiedName, string namespaceURI, string value);
    public abstract virtual void RemoveAttribute(string name);
    public abstract virtual void RemoveAttribute(string localName, string namespaceURI);
    public abstract virtual XmlAttribute GetAttributeNode(string name);
    public abstract virtual XmlAttribute GetAttributeNode(string localName, string namespaceURI);
    public abstract virtual XmlNodeList GetElementsByTagName(string name);
    public abstract virtual XmlNodeList GetElementsByTagName(string localName, string namespaceURI);
    public abstract virtual XmlAttribute SetAttributeNode(string localName, string namespaceURI);
    public abstract virtual XmlAttribute SetAttributeNode(XmlAttribute newAttr);
    public abstract virtual XmlAttribute RemoveAttributeNode(XmlAttribute oldAttr);
    public abstract virtual XmlAttribute RemoveAttributeNode(string localName, string namespaceURI);
    public abstract virtual bool HasAttribute(string name);
    public abstract virtual bool HasAttribute(string localName, string namespaceURI);
}
public interface SharpVectors.Dom.IXmlNode {
    public string Name { get; }
    public string Value { get; public set; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlNodeList ChildNodes { get; }
    public XmlNode FirstChild { get; }
    public XmlNode LastChild { get; }
    public XmlNode PreviousSibling { get; }
    public XmlNode NextSibling { get; }
    public XmlAttributeCollection Attributes { get; }
    public XmlDocument OwnerDocument { get; }
    public bool HasChildNodes { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; public set; }
    public string LocalName { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual XmlNodeType get_NodeType();
    public abstract virtual XmlNode get_ParentNode();
    public abstract virtual XmlNodeList get_ChildNodes();
    public abstract virtual XmlNode get_FirstChild();
    public abstract virtual XmlNode get_LastChild();
    public abstract virtual XmlNode get_PreviousSibling();
    public abstract virtual XmlNode get_NextSibling();
    public abstract virtual XmlAttributeCollection get_Attributes();
    public abstract virtual XmlDocument get_OwnerDocument();
    public abstract virtual bool get_HasChildNodes();
    public abstract virtual string get_NamespaceURI();
    public abstract virtual string get_Prefix();
    public abstract virtual void set_Prefix(string value);
    public abstract virtual string get_LocalName();
    public abstract virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild);
    public abstract virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild);
    public abstract virtual XmlNode RemoveChild(XmlNode oldChild);
    public abstract virtual XmlNode AppendChild(XmlNode newChild);
    public abstract virtual XmlNode CloneNode(bool deep);
    public abstract virtual void Normalize();
    public abstract virtual bool Supports(string feature, string version);
}
public interface SharpVectors.Dom.Stylesheets.IDocumentStyle {
    public IStyleSheetList StyleSheets { get; }
    public abstract virtual IStyleSheetList get_StyleSheets();
}
public interface SharpVectors.Dom.Stylesheets.ILinkStyle {
    public IStyleSheet Sheet { get; }
    public abstract virtual IStyleSheet get_Sheet();
}
[DefaultMemberAttribute("Item")]
public interface SharpVectors.Dom.Stylesheets.IMediaList {
    public ulong Length { get; }
    public string MediaText { get; public set; }
    public string Item { get; }
    public abstract virtual void AppendMedium(string newMedium);
    public abstract virtual void DeleteMedium(string oldMedium);
    public abstract virtual ulong get_Length();
    public abstract virtual string get_MediaText();
    public abstract virtual void set_MediaText(string value);
    public abstract virtual string get_Item(ulong index);
}
public interface SharpVectors.Dom.Stylesheets.IStyleSheet {
    public IMediaList Media { get; }
    public string Title { get; }
    public string Href { get; }
    public IStyleSheet ParentStyleSheet { get; }
    public XmlNode OwnerNode { get; }
    public bool Disabled { get; public set; }
    public string Type { get; }
    public abstract virtual IMediaList get_Media();
    public abstract virtual string get_Title();
    public abstract virtual string get_Href();
    public abstract virtual IStyleSheet get_ParentStyleSheet();
    public abstract virtual XmlNode get_OwnerNode();
    public abstract virtual bool get_Disabled();
    public abstract virtual void set_Disabled(bool value);
    public abstract virtual string get_Type();
}
[DefaultMemberAttribute("Item")]
public interface SharpVectors.Dom.Stylesheets.IStyleSheetList {
    public ulong Length { get; }
    public IStyleSheet Item { get; }
    public abstract virtual ulong get_Length();
    public abstract virtual IStyleSheet get_Item(ulong index);
}
public interface SharpVectors.Dom.Svg.IGetSvgDocument {
    public abstract virtual ISvgDocument GetSvgDocument();
}
public interface SharpVectors.Dom.Svg.ISharpMarkerHost {
    public SvgPointF[] MarkerPositions { get; }
    public bool IsClosed { get; }
    public bool MayHaveCurves { get; }
    public abstract virtual SvgPointF[] get_MarkerPositions();
    public abstract virtual bool get_IsClosed();
    public abstract virtual bool get_MayHaveCurves();
    public abstract virtual ISvgMarker GetMarker(int index);
    public abstract virtual double GetStartAngle(int index);
    public abstract virtual double GetEndAngle(int index);
}
public interface SharpVectors.Dom.Svg.ISvgAElement {
    public ISvgAnimatedString Target { get; }
    public abstract virtual ISvgAnimatedString get_Target();
}
public interface SharpVectors.Dom.Svg.ISvgAltGlyphDefElement {
    public bool IsSimple { get; }
    public abstract virtual bool get_IsSimple();
    public abstract virtual ISvgGlyphRefElement GetGlyphRef(string name);
    public abstract virtual ISvgAltGlyphItemElement GetGlyphItem(string name);
}
public interface SharpVectors.Dom.Svg.ISvgAltGlyphElement {
    public string GlyphRef { get; public set; }
    public string Format { get; public set; }
    public abstract virtual string get_GlyphRef();
    public abstract virtual void set_GlyphRef(string value);
    public abstract virtual string get_Format();
    public abstract virtual void set_Format(string value);
}
public interface SharpVectors.Dom.Svg.ISvgAltGlyphItemElement {
    public abstract virtual ISvgGlyphRefElement GetGlyphRef(string name);
}
public interface SharpVectors.Dom.Svg.ISvgAngle {
    public SvgAngleType UnitType { get; }
    public double Value { get; public set; }
    public double ValueInSpecifiedUnits { get; public set; }
    public string ValueAsString { get; public set; }
    public abstract virtual SvgAngleType get_UnitType();
    public abstract virtual double get_Value();
    public abstract virtual void set_Value(double value);
    public abstract virtual double get_ValueInSpecifiedUnits();
    public abstract virtual void set_ValueInSpecifiedUnits(double value);
    public abstract virtual string get_ValueAsString();
    public abstract virtual void set_ValueAsString(string value);
    public abstract virtual void NewValueSpecifiedUnits(SvgAngleType unitType, double valueInSpecifiedUnits);
    public abstract virtual void ConvertToSpecifiedUnits(SvgAngleType unitType);
}
public interface SharpVectors.Dom.Svg.ISvgAnimateColorElement {
    public string AttributeName { get; }
    public string AttributeType { get; public set; }
    public string CalcMode { get; public set; }
    public string Values { get; public set; }
    public string KeyTimes { get; public set; }
    public string KeySplines { get; public set; }
    public string From { get; public set; }
    public string To { get; public set; }
    public string By { get; public set; }
    public string Additive { get; public set; }
    public string Accumulate { get; public set; }
    public abstract virtual string get_AttributeName();
    public abstract virtual string get_AttributeType();
    public abstract virtual void set_AttributeType(string value);
    public abstract virtual string get_CalcMode();
    public abstract virtual void set_CalcMode(string value);
    public abstract virtual string get_Values();
    public abstract virtual void set_Values(string value);
    public abstract virtual string get_KeyTimes();
    public abstract virtual void set_KeyTimes(string value);
    public abstract virtual string get_KeySplines();
    public abstract virtual void set_KeySplines(string value);
    public abstract virtual string get_From();
    public abstract virtual void set_From(string value);
    public abstract virtual string get_To();
    public abstract virtual void set_To(string value);
    public abstract virtual string get_By();
    public abstract virtual void set_By(string value);
    public abstract virtual string get_Additive();
    public abstract virtual void set_Additive(string value);
    public abstract virtual string get_Accumulate();
    public abstract virtual void set_Accumulate(string value);
}
public interface SharpVectors.Dom.Svg.ISvgAnimatedAngle {
    public ISvgAngle BaseVal { get; }
    public ISvgAngle AnimVal { get; }
    public abstract virtual ISvgAngle get_BaseVal();
    public abstract virtual ISvgAngle get_AnimVal();
}
public interface SharpVectors.Dom.Svg.ISvgAnimatedBoolean {
    public bool BaseVal { get; public set; }
    public bool AnimVal { get; }
    public abstract virtual bool get_BaseVal();
    public abstract virtual void set_BaseVal(bool value);
    public abstract virtual bool get_AnimVal();
}
public interface SharpVectors.Dom.Svg.ISvgAnimatedEnumeration {
    public ushort BaseVal { get; public set; }
    public ushort AnimVal { get; }
    public abstract virtual ushort get_BaseVal();
    public abstract virtual void set_BaseVal(ushort value);
    public abstract virtual ushort get_AnimVal();
}
public interface SharpVectors.Dom.Svg.ISvgAnimatedInteger {
    public long BaseVal { get; public set; }
    public long AnimVal { get; }
    public abstract virtual long get_BaseVal();
    public abstract virtual void set_BaseVal(long value);
    public abstract virtual long get_AnimVal();
}
public interface SharpVectors.Dom.Svg.ISvgAnimatedLength {
    public ISvgLength BaseVal { get; }
    public ISvgLength AnimVal { get; }
    public abstract virtual ISvgLength get_BaseVal();
    public abstract virtual ISvgLength get_AnimVal();
}
[DefaultMemberAttribute("Item")]
public interface SharpVectors.Dom.Svg.ISvgAnimatedLengthList {
    public ISvgLengthList BaseVal { get; }
    public ISvgLengthList AnimVal { get; }
    public int Count { get; }
    public ISvgAnimatedLength Item { get; }
    public abstract virtual ISvgLengthList get_BaseVal();
    public abstract virtual ISvgLengthList get_AnimVal();
    public abstract virtual int get_Count();
    public abstract virtual ISvgAnimatedLength get_Item(UInt32 index);
}
public interface SharpVectors.Dom.Svg.ISvgAnimatedNumber {
    public double BaseVal { get; public set; }
    public double AnimVal { get; }
    public abstract virtual double get_BaseVal();
    public abstract virtual void set_BaseVal(double value);
    public abstract virtual double get_AnimVal();
}
[DefaultMemberAttribute("Item")]
public interface SharpVectors.Dom.Svg.ISvgAnimatedNumberList {
    public ISvgNumberList BaseVal { get; }
    public ISvgNumberList AnimVal { get; }
    public int Count { get; }
    public ISvgAnimatedNumber Item { get; }
    public abstract virtual ISvgNumberList get_BaseVal();
    public abstract virtual ISvgNumberList get_AnimVal();
    public abstract virtual int get_Count();
    public abstract virtual ISvgAnimatedNumber get_Item(UInt32 index);
}
public interface SharpVectors.Dom.Svg.ISvgAnimatedPathData {
    public ISvgPathSegList PathSegList { get; }
    public ISvgPathSegList NormalizedPathSegList { get; }
    public ISvgPathSegList AnimatedPathSegList { get; }
    public ISvgPathSegList AnimatedNormalizedPathSegList { get; }
    public abstract virtual ISvgPathSegList get_PathSegList();
    public abstract virtual ISvgPathSegList get_NormalizedPathSegList();
    public abstract virtual ISvgPathSegList get_AnimatedPathSegList();
    public abstract virtual ISvgPathSegList get_AnimatedNormalizedPathSegList();
}
public interface SharpVectors.Dom.Svg.ISvgAnimatedPoints {
    public ISvgPointList Points { get; }
    public ISvgPointList AnimatedPoints { get; }
    public abstract virtual ISvgPointList get_Points();
    public abstract virtual ISvgPointList get_AnimatedPoints();
}
public interface SharpVectors.Dom.Svg.ISvgAnimatedPreserveAspectRatio {
    public ISvgPreserveAspectRatio BaseVal { get; }
    public ISvgPreserveAspectRatio AnimVal { get; }
    public abstract virtual ISvgPreserveAspectRatio get_BaseVal();
    public abstract virtual ISvgPreserveAspectRatio get_AnimVal();
}
public interface SharpVectors.Dom.Svg.ISvgAnimatedRect {
    public ISvgRect BaseVal { get; }
    public ISvgRect AnimVal { get; }
    public abstract virtual ISvgRect get_BaseVal();
    public abstract virtual ISvgRect get_AnimVal();
}
public interface SharpVectors.Dom.Svg.ISvgAnimatedString {
    public string BaseVal { get; public set; }
    public string AnimVal { get; }
    public abstract virtual string get_BaseVal();
    public abstract virtual void set_BaseVal(string value);
    public abstract virtual string get_AnimVal();
}
public interface SharpVectors.Dom.Svg.ISvgAnimatedTransformList {
    public ISvgTransformList BaseVal { get; }
    public ISvgTransformList AnimVal { get; }
    public abstract virtual ISvgTransformList get_BaseVal();
    public abstract virtual ISvgTransformList get_AnimVal();
}
public interface SharpVectors.Dom.Svg.ISvgAnimateElement {
    public string AttributeName { get; }
    public string AttributeType { get; public set; }
    public string CalcMode { get; public set; }
    public string Values { get; public set; }
    public string KeyTimes { get; public set; }
    public string KeySplines { get; public set; }
    public string From { get; public set; }
    public string To { get; public set; }
    public string By { get; public set; }
    public string Additive { get; public set; }
    public string Accumulate { get; public set; }
    public abstract virtual string get_AttributeName();
    public abstract virtual string get_AttributeType();
    public abstract virtual void set_AttributeType(string value);
    public abstract virtual string get_CalcMode();
    public abstract virtual void set_CalcMode(string value);
    public abstract virtual string get_Values();
    public abstract virtual void set_Values(string value);
    public abstract virtual string get_KeyTimes();
    public abstract virtual void set_KeyTimes(string value);
    public abstract virtual string get_KeySplines();
    public abstract virtual void set_KeySplines(string value);
    public abstract virtual string get_From();
    public abstract virtual void set_From(string value);
    public abstract virtual string get_To();
    public abstract virtual void set_To(string value);
    public abstract virtual string get_By();
    public abstract virtual void set_By(string value);
    public abstract virtual string get_Additive();
    public abstract virtual void set_Additive(string value);
    public abstract virtual string get_Accumulate();
    public abstract virtual void set_Accumulate(string value);
}
public interface SharpVectors.Dom.Svg.ISvgAnimateMotionElement {
    public string CalcMode { get; public set; }
    public string Values { get; public set; }
    public string KeyTimes { get; public set; }
    public string KeySplines { get; public set; }
    public string From { get; public set; }
    public string To { get; public set; }
    public string By { get; public set; }
    public string Additive { get; public set; }
    public string Accumulate { get; public set; }
    public string Path { get; public set; }
    public string KeyPoints { get; public set; }
    public string Rotate { get; public set; }
    public string Origin { get; public set; }
    public abstract virtual string get_CalcMode();
    public abstract virtual void set_CalcMode(string value);
    public abstract virtual string get_Values();
    public abstract virtual void set_Values(string value);
    public abstract virtual string get_KeyTimes();
    public abstract virtual void set_KeyTimes(string value);
    public abstract virtual string get_KeySplines();
    public abstract virtual void set_KeySplines(string value);
    public abstract virtual string get_From();
    public abstract virtual void set_From(string value);
    public abstract virtual string get_To();
    public abstract virtual void set_To(string value);
    public abstract virtual string get_By();
    public abstract virtual void set_By(string value);
    public abstract virtual string get_Additive();
    public abstract virtual void set_Additive(string value);
    public abstract virtual string get_Accumulate();
    public abstract virtual void set_Accumulate(string value);
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
    public abstract virtual string get_KeyPoints();
    public abstract virtual void set_KeyPoints(string value);
    public abstract virtual string get_Rotate();
    public abstract virtual void set_Rotate(string value);
    public abstract virtual string get_Origin();
    public abstract virtual void set_Origin(string value);
}
public interface SharpVectors.Dom.Svg.ISvgAnimateMPathElement {
}
public interface SharpVectors.Dom.Svg.ISvgAnimateSetElement {
    public string AttributeName { get; }
    public string AttributeType { get; public set; }
    public string To { get; public set; }
    public abstract virtual string get_AttributeName();
    public abstract virtual string get_AttributeType();
    public abstract virtual void set_AttributeType(string value);
    public abstract virtual string get_To();
    public abstract virtual void set_To(string value);
}
public interface SharpVectors.Dom.Svg.ISvgAnimateTransformElement {
    public string AttributeName { get; }
    public string AttributeType { get; public set; }
    public string CalcMode { get; public set; }
    public string Values { get; public set; }
    public string KeyTimes { get; public set; }
    public string KeySplines { get; public set; }
    public string From { get; public set; }
    public string To { get; public set; }
    public string By { get; public set; }
    public string Additive { get; public set; }
    public string Accumulate { get; public set; }
    public SvgTransformType Type { get; public set; }
    public abstract virtual string get_AttributeName();
    public abstract virtual string get_AttributeType();
    public abstract virtual void set_AttributeType(string value);
    public abstract virtual string get_CalcMode();
    public abstract virtual void set_CalcMode(string value);
    public abstract virtual string get_Values();
    public abstract virtual void set_Values(string value);
    public abstract virtual string get_KeyTimes();
    public abstract virtual void set_KeyTimes(string value);
    public abstract virtual string get_KeySplines();
    public abstract virtual void set_KeySplines(string value);
    public abstract virtual string get_From();
    public abstract virtual void set_From(string value);
    public abstract virtual string get_To();
    public abstract virtual void set_To(string value);
    public abstract virtual string get_By();
    public abstract virtual void set_By(string value);
    public abstract virtual string get_Additive();
    public abstract virtual void set_Additive(string value);
    public abstract virtual string get_Accumulate();
    public abstract virtual void set_Accumulate(string value);
    public abstract virtual SvgTransformType get_Type();
    public abstract virtual void set_Type(SvgTransformType value);
}
public interface SharpVectors.Dom.Svg.ISvgAnimationElement {
    public ISvgElement TargetElement { get; }
    public float StartTime { get; }
    public float CurrentTime { get; }
    public float SimpleDuration { get; }
    public string Begin { get; public set; }
    public string Duration { get; public set; }
    public string End { get; public set; }
    public string Minimum { get; public set; }
    public string Maximum { get; public set; }
    public string Restart { get; public set; }
    public string RepeatCount { get; public set; }
    public string RepeatDuration { get; public set; }
    public string Fill { get; public set; }
    public abstract virtual ISvgElement get_TargetElement();
    public abstract virtual float get_StartTime();
    public abstract virtual float get_CurrentTime();
    public abstract virtual float get_SimpleDuration();
    public abstract virtual string get_Begin();
    public abstract virtual void set_Begin(string value);
    public abstract virtual string get_Duration();
    public abstract virtual void set_Duration(string value);
    public abstract virtual string get_End();
    public abstract virtual void set_End(string value);
    public abstract virtual string get_Minimum();
    public abstract virtual void set_Minimum(string value);
    public abstract virtual string get_Maximum();
    public abstract virtual void set_Maximum(string value);
    public abstract virtual string get_Restart();
    public abstract virtual void set_Restart(string value);
    public abstract virtual string get_RepeatCount();
    public abstract virtual void set_RepeatCount(string value);
    public abstract virtual string get_RepeatDuration();
    public abstract virtual void set_RepeatDuration(string value);
    public abstract virtual string get_Fill();
    public abstract virtual void set_Fill(string value);
}
public interface SharpVectors.Dom.Svg.ISvgCircleElement {
    public ISvgAnimatedLength Cx { get; }
    public ISvgAnimatedLength Cy { get; }
    public ISvgAnimatedLength R { get; }
    public abstract virtual ISvgAnimatedLength get_Cx();
    public abstract virtual ISvgAnimatedLength get_Cy();
    public abstract virtual ISvgAnimatedLength get_R();
}
public interface SharpVectors.Dom.Svg.ISvgClipPathElement {
    public ISvgAnimatedEnumeration ClipPathUnits { get; }
    public abstract virtual ISvgAnimatedEnumeration get_ClipPathUnits();
}
public interface SharpVectors.Dom.Svg.ISvgColor {
    public SvgColorType ColorType { get; }
    public ICssColor RgbColor { get; }
    public ISvgIccColor IccColor { get; }
    public abstract virtual SvgColorType get_ColorType();
    public abstract virtual ICssColor get_RgbColor();
    public abstract virtual ISvgIccColor get_IccColor();
    public abstract virtual void SetRgbColor(string rgbColor);
    public abstract virtual void SetRgbColorIccColor(string rgbColor, string iccColor);
    public abstract virtual void SetColor(SvgColorType colorType, string rgbColor, string iccColor);
}
public interface SharpVectors.Dom.Svg.ISvgColorProfileElement {
    public string Local { get; public set; }
    public string Name { get; public set; }
    public ushort RenderingIntent { get; public set; }
    public abstract virtual string get_Local();
    public abstract virtual void set_Local(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual ushort get_RenderingIntent();
    public abstract virtual void set_RenderingIntent(ushort value);
}
public interface SharpVectors.Dom.Svg.ISvgColorProfileRule {
    public string Src { get; public set; }
    public string Name { get; public set; }
    public ushort RenderingIntent { get; public set; }
    public abstract virtual string get_Src();
    public abstract virtual void set_Src(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual ushort get_RenderingIntent();
    public abstract virtual void set_RenderingIntent(ushort value);
}
public interface SharpVectors.Dom.Svg.ISvgComponentTransferFunctionElement {
    public ISvgAnimatedEnumeration Type { get; }
    public ISvgAnimatedNumberList TableValues { get; }
    public ISvgAnimatedNumber Slope { get; }
    public ISvgAnimatedNumber Intercept { get; }
    public ISvgAnimatedNumber Amplitude { get; }
    public ISvgAnimatedNumber Exponent { get; }
    public ISvgAnimatedNumber Offset { get; }
    public abstract virtual ISvgAnimatedEnumeration get_Type();
    public abstract virtual ISvgAnimatedNumberList get_TableValues();
    public abstract virtual ISvgAnimatedNumber get_Slope();
    public abstract virtual ISvgAnimatedNumber get_Intercept();
    public abstract virtual ISvgAnimatedNumber get_Amplitude();
    public abstract virtual ISvgAnimatedNumber get_Exponent();
    public abstract virtual ISvgAnimatedNumber get_Offset();
}
public interface SharpVectors.Dom.Svg.ISvgControl {
    public int Width { get; }
    public int Height { get; }
    public bool DesignMode { get; }
    public abstract virtual int get_Width();
    public abstract virtual int get_Height();
    public abstract virtual bool get_DesignMode();
    public abstract virtual void HandleAlert(string message);
    public abstract virtual void HandleError(string message);
    public abstract virtual void HandleError(Exception exception);
    public abstract virtual void HandleError(string message, Exception exception);
}
public interface SharpVectors.Dom.Svg.ISvgCssRule {
}
public interface SharpVectors.Dom.Svg.ISvgCursorElement {
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    public abstract virtual ISvgAnimatedLength get_X();
    public abstract virtual ISvgAnimatedLength get_Y();
}
public interface SharpVectors.Dom.Svg.ISvgDefinitionSrcElement {
}
public interface SharpVectors.Dom.Svg.ISvgDefsElement {
}
public interface SharpVectors.Dom.Svg.ISvgDescElement {
}
public interface SharpVectors.Dom.Svg.ISvgDocument {
    public string Title { get; }
    public string Referrer { get; }
    public string Domain { get; }
    public string Url { get; }
    public ISvgSvgElement RootElement { get; }
    public ISvgWindow Window { get; }
    public bool Static { get; public set; }
    public abstract virtual string get_Title();
    public abstract virtual string get_Referrer();
    public abstract virtual string get_Domain();
    public abstract virtual string get_Url();
    public abstract virtual ISvgSvgElement get_RootElement();
    public abstract virtual ISvgWindow get_Window();
    public abstract virtual bool get_Static();
    public abstract virtual void set_Static(bool value);
}
public interface SharpVectors.Dom.Svg.ISvgElement {
    public string Id { get; public set; }
    public ISvgSvgElement OwnerSvgElement { get; }
    public ISvgElement ViewportElement { get; }
    public bool IsRenderable { get; }
    public SvgRenderingHint RenderingHint { get; }
    public abstract virtual string get_Id();
    public abstract virtual void set_Id(string value);
    public abstract virtual ISvgSvgElement get_OwnerSvgElement();
    public abstract virtual ISvgElement get_ViewportElement();
    public abstract virtual bool get_IsRenderable();
    public abstract virtual SvgRenderingHint get_RenderingHint();
}
public interface SharpVectors.Dom.Svg.ISvgElementInstance {
    public ISvgElement CorrespondingElement { get; }
    public ISvgUseElement CorrespondingUseElement { get; }
    public ISvgElementInstance ParentNode { get; }
    public ISvgElementInstanceList ChildNodes { get; }
    public ISvgElementInstance FirstChild { get; }
    public ISvgElementInstance LastChild { get; }
    public ISvgElementInstance PreviousSibling { get; }
    public ISvgElementInstance NextSibling { get; }
    public abstract virtual ISvgElement get_CorrespondingElement();
    public abstract virtual ISvgUseElement get_CorrespondingUseElement();
    public abstract virtual ISvgElementInstance get_ParentNode();
    public abstract virtual ISvgElementInstanceList get_ChildNodes();
    public abstract virtual ISvgElementInstance get_FirstChild();
    public abstract virtual ISvgElementInstance get_LastChild();
    public abstract virtual ISvgElementInstance get_PreviousSibling();
    public abstract virtual ISvgElementInstance get_NextSibling();
}
public interface SharpVectors.Dom.Svg.ISvgElementInstanceList {
    public ulong Length { get; }
    public abstract virtual ulong get_Length();
    public abstract virtual ISvgElementInstance Item(ulong index);
}
public interface SharpVectors.Dom.Svg.ISvgElementVisitor {
    public abstract virtual void Visit(ISvgCircleElement element);
    public abstract virtual void Visit(ISvgEllipseElement element);
    public abstract virtual void Visit(ISvgLineElement element);
    public abstract virtual void Visit(ISvgPathElement element);
    public abstract virtual void Visit(ISvgPolygonElement element);
    public abstract virtual void Visit(ISvgPolylineElement element);
    public abstract virtual void Visit(ISvgRectElement element);
    public abstract virtual void Visit(ISvgImageElement element);
    public abstract virtual void Visit(ISvgUseElement element);
    public abstract virtual void BeginContainer(ISvgElement element);
    public abstract virtual void Visit(ISvgAElement element);
    public abstract virtual void Visit(ISvgGElement element);
    public abstract virtual void Visit(ISvgSvgElement element);
    public abstract virtual void Visit(ISvgSwitchElement element);
    public abstract virtual void Visit(ISvgSymbolElement element);
    public abstract virtual void EndContainer(ISvgElement element);
    public abstract virtual void Visit(ISvgTextElement element);
    public abstract virtual void Visit(ISvgTextPathElement element);
    public abstract virtual void Visit(ISvgTSpanElement element);
}
public interface SharpVectors.Dom.Svg.ISvgElementVisitorTarget {
    public abstract virtual void Accept(ISvgElementVisitor visitor);
}
public interface SharpVectors.Dom.Svg.ISvgEllipseElement {
    public ISvgAnimatedLength Cx { get; }
    public ISvgAnimatedLength Cy { get; }
    public ISvgAnimatedLength Rx { get; }
    public ISvgAnimatedLength Ry { get; }
    public abstract virtual ISvgAnimatedLength get_Cx();
    public abstract virtual ISvgAnimatedLength get_Cy();
    public abstract virtual ISvgAnimatedLength get_Rx();
    public abstract virtual ISvgAnimatedLength get_Ry();
}
public interface SharpVectors.Dom.Svg.ISvgEvent {
}
public interface SharpVectors.Dom.Svg.ISvgExternalResourcesRequired {
    public ISvgAnimatedBoolean ExternalResourcesRequired { get; }
    public abstract virtual ISvgAnimatedBoolean get_ExternalResourcesRequired();
}
public interface SharpVectors.Dom.Svg.ISvgFEBlendElement {
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedString In2 { get; }
    public ISvgAnimatedEnumeration Mode { get; }
    public abstract virtual ISvgAnimatedString get_In1();
    public abstract virtual ISvgAnimatedString get_In2();
    public abstract virtual ISvgAnimatedEnumeration get_Mode();
}
public interface SharpVectors.Dom.Svg.ISvgFEColorMatrixElement {
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedEnumeration Type { get; }
    public ISvgAnimatedNumberList Values { get; }
    public abstract virtual ISvgAnimatedString get_In1();
    public abstract virtual ISvgAnimatedEnumeration get_Type();
    public abstract virtual ISvgAnimatedNumberList get_Values();
}
public interface SharpVectors.Dom.Svg.ISvgFEComponentTransferElement {
    public ISvgAnimatedString In1 { get; }
    public abstract virtual ISvgAnimatedString get_In1();
}
public interface SharpVectors.Dom.Svg.ISvgFECompositeElement {
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedString In2 { get; }
    public ISvgAnimatedEnumeration Operator { get; }
    public ISvgAnimatedNumber K1 { get; }
    public ISvgAnimatedNumber K2 { get; }
    public ISvgAnimatedNumber K3 { get; }
    public ISvgAnimatedNumber K4 { get; }
    public abstract virtual ISvgAnimatedString get_In1();
    public abstract virtual ISvgAnimatedString get_In2();
    public abstract virtual ISvgAnimatedEnumeration get_Operator();
    public abstract virtual ISvgAnimatedNumber get_K1();
    public abstract virtual ISvgAnimatedNumber get_K2();
    public abstract virtual ISvgAnimatedNumber get_K3();
    public abstract virtual ISvgAnimatedNumber get_K4();
}
public interface SharpVectors.Dom.Svg.ISvgFEConvolveMatrixElement {
    public ISvgAnimatedEnumeration EdgeMode { get; }
    public ISvgAnimatedInteger OrderX { get; }
    public ISvgAnimatedInteger OrderY { get; }
    public ISvgAnimatedNumberList KernelMatrix { get; }
    public ISvgAnimatedNumber Divisor { get; }
    public ISvgAnimatedNumber Bias { get; }
    public ISvgAnimatedInteger TargetX { get; }
    public ISvgAnimatedInteger TargetY { get; }
    public ISvgAnimatedNumber KernelUnitLengthX { get; }
    public ISvgAnimatedNumber KernelUnitLengthY { get; }
    public ISvgAnimatedBoolean PreserveAlpha { get; }
    public abstract virtual ISvgAnimatedEnumeration get_EdgeMode();
    public abstract virtual ISvgAnimatedInteger get_OrderX();
    public abstract virtual ISvgAnimatedInteger get_OrderY();
    public abstract virtual ISvgAnimatedNumberList get_KernelMatrix();
    public abstract virtual ISvgAnimatedNumber get_Divisor();
    public abstract virtual ISvgAnimatedNumber get_Bias();
    public abstract virtual ISvgAnimatedInteger get_TargetX();
    public abstract virtual ISvgAnimatedInteger get_TargetY();
    public abstract virtual ISvgAnimatedNumber get_KernelUnitLengthX();
    public abstract virtual ISvgAnimatedNumber get_KernelUnitLengthY();
    public abstract virtual ISvgAnimatedBoolean get_PreserveAlpha();
}
public interface SharpVectors.Dom.Svg.ISvgFEDiffuseLightingElement {
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedNumber SurfaceScale { get; }
    public ISvgAnimatedNumber DiffuseConstant { get; }
    public ISvgAnimatedNumber KernelUnitLengthX { get; }
    public ISvgAnimatedNumber KernelUnitLengthY { get; }
    public abstract virtual ISvgAnimatedString get_In1();
    public abstract virtual ISvgAnimatedNumber get_SurfaceScale();
    public abstract virtual ISvgAnimatedNumber get_DiffuseConstant();
    public abstract virtual ISvgAnimatedNumber get_KernelUnitLengthX();
    public abstract virtual ISvgAnimatedNumber get_KernelUnitLengthY();
}
public interface SharpVectors.Dom.Svg.ISvgFEDisplacementMapElement {
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedString In2 { get; }
    public ISvgAnimatedNumber Scale { get; }
    public ISvgAnimatedEnumeration XChannelSelector { get; }
    public ISvgAnimatedEnumeration YChannelSelector { get; }
    public abstract virtual ISvgAnimatedString get_In1();
    public abstract virtual ISvgAnimatedString get_In2();
    public abstract virtual ISvgAnimatedNumber get_Scale();
    public abstract virtual ISvgAnimatedEnumeration get_XChannelSelector();
    public abstract virtual ISvgAnimatedEnumeration get_YChannelSelector();
}
public interface SharpVectors.Dom.Svg.ISvgFEDistantLightElement {
    public ISvgAnimatedNumber Azimuth { get; }
    public ISvgAnimatedNumber Elevation { get; }
    public abstract virtual ISvgAnimatedNumber get_Azimuth();
    public abstract virtual ISvgAnimatedNumber get_Elevation();
}
public interface SharpVectors.Dom.Svg.ISvgFEFloodElement {
    public ISvgAnimatedString In1 { get; }
    public abstract virtual ISvgAnimatedString get_In1();
}
public interface SharpVectors.Dom.Svg.ISvgFEFuncAElement {
}
public interface SharpVectors.Dom.Svg.ISvgFEFuncBElement {
}
public interface SharpVectors.Dom.Svg.ISvgFEFuncGElement {
}
public interface SharpVectors.Dom.Svg.ISvgFEFuncRElement {
}
public interface SharpVectors.Dom.Svg.ISvgFEGaussianBlurElement {
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedNumber StdDeviationX { get; }
    public ISvgAnimatedNumber StdDeviationY { get; }
    public abstract virtual ISvgAnimatedString get_In1();
    public abstract virtual ISvgAnimatedNumber get_StdDeviationX();
    public abstract virtual ISvgAnimatedNumber get_StdDeviationY();
    public abstract virtual void SetStdDeviation(float stdDeviationX, float stdDeviationY);
}
public interface SharpVectors.Dom.Svg.ISvgFEImageElement {
    public ISvgAnimatedPreserveAspectRatio PreserveAspectRatio { get; }
    public abstract virtual ISvgAnimatedPreserveAspectRatio get_PreserveAspectRatio();
}
public interface SharpVectors.Dom.Svg.ISvgFEMergeElement {
}
public interface SharpVectors.Dom.Svg.ISvgFEMergeNodeElement {
    public ISvgAnimatedString In1 { get; }
    public abstract virtual ISvgAnimatedString get_In1();
}
public interface SharpVectors.Dom.Svg.ISvgFEMorphologyElement {
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedEnumeration Operator { get; }
    public ISvgAnimatedNumber RadiusX { get; }
    public ISvgAnimatedNumber RadiusY { get; }
    public abstract virtual ISvgAnimatedString get_In1();
    public abstract virtual ISvgAnimatedEnumeration get_Operator();
    public abstract virtual ISvgAnimatedNumber get_RadiusX();
    public abstract virtual ISvgAnimatedNumber get_RadiusY();
}
public interface SharpVectors.Dom.Svg.ISvgFEOffsetElement {
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedNumber Dx { get; }
    public ISvgAnimatedNumber Dy { get; }
    public abstract virtual ISvgAnimatedString get_In1();
    public abstract virtual ISvgAnimatedNumber get_Dx();
    public abstract virtual ISvgAnimatedNumber get_Dy();
}
public interface SharpVectors.Dom.Svg.ISvgFEPointLightElement {
    public ISvgAnimatedNumber X { get; }
    public ISvgAnimatedNumber Y { get; }
    public ISvgAnimatedNumber Z { get; }
    public abstract virtual ISvgAnimatedNumber get_X();
    public abstract virtual ISvgAnimatedNumber get_Y();
    public abstract virtual ISvgAnimatedNumber get_Z();
}
public interface SharpVectors.Dom.Svg.ISvgFESpecularLightingElement {
    public ISvgAnimatedString In1 { get; }
    public ISvgAnimatedNumber SurfaceScale { get; }
    public ISvgAnimatedNumber SpecularConstant { get; }
    public ISvgAnimatedNumber SpecularExponent { get; }
    public ISvgAnimatedNumber KernelUnitLengthX { get; }
    public ISvgAnimatedNumber KernelUnitLengthY { get; }
    public abstract virtual ISvgAnimatedString get_In1();
    public abstract virtual ISvgAnimatedNumber get_SurfaceScale();
    public abstract virtual ISvgAnimatedNumber get_SpecularConstant();
    public abstract virtual ISvgAnimatedNumber get_SpecularExponent();
    public abstract virtual ISvgAnimatedNumber get_KernelUnitLengthX();
    public abstract virtual ISvgAnimatedNumber get_KernelUnitLengthY();
}
public interface SharpVectors.Dom.Svg.ISvgFESpotLightElement {
    public ISvgAnimatedNumber X { get; }
    public ISvgAnimatedNumber Y { get; }
    public ISvgAnimatedNumber Z { get; }
    public ISvgAnimatedNumber PointsAtX { get; }
    public ISvgAnimatedNumber PointsAtY { get; }
    public ISvgAnimatedNumber PointsAtZ { get; }
    public ISvgAnimatedNumber SpecularExponent { get; }
    public ISvgAnimatedNumber LimitingConeAngle { get; }
    public abstract virtual ISvgAnimatedNumber get_X();
    public abstract virtual ISvgAnimatedNumber get_Y();
    public abstract virtual ISvgAnimatedNumber get_Z();
    public abstract virtual ISvgAnimatedNumber get_PointsAtX();
    public abstract virtual ISvgAnimatedNumber get_PointsAtY();
    public abstract virtual ISvgAnimatedNumber get_PointsAtZ();
    public abstract virtual ISvgAnimatedNumber get_SpecularExponent();
    public abstract virtual ISvgAnimatedNumber get_LimitingConeAngle();
}
public interface SharpVectors.Dom.Svg.ISvgFETileElement {
    public ISvgAnimatedString In1 { get; }
    public abstract virtual ISvgAnimatedString get_In1();
}
public interface SharpVectors.Dom.Svg.ISvgFETurbulenceElement {
    public ISvgAnimatedNumber BaseFrequencyX { get; }
    public ISvgAnimatedNumber BaseFrequencyY { get; }
    public ISvgAnimatedInteger NumOctaves { get; }
    public ISvgAnimatedNumber Seed { get; }
    public ISvgAnimatedEnumeration StitchTiles { get; }
    public ISvgAnimatedEnumeration Type { get; }
    public abstract virtual ISvgAnimatedNumber get_BaseFrequencyX();
    public abstract virtual ISvgAnimatedNumber get_BaseFrequencyY();
    public abstract virtual ISvgAnimatedInteger get_NumOctaves();
    public abstract virtual ISvgAnimatedNumber get_Seed();
    public abstract virtual ISvgAnimatedEnumeration get_StitchTiles();
    public abstract virtual ISvgAnimatedEnumeration get_Type();
}
public interface SharpVectors.Dom.Svg.ISvgFilterElement {
    public ISvgAnimatedEnumeration FilterUnits { get; }
    public ISvgAnimatedEnumeration PrimitiveUnits { get; }
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    public ISvgAnimatedLength Width { get; }
    public ISvgAnimatedLength Height { get; }
    public ISvgAnimatedInteger FilterResX { get; }
    public ISvgAnimatedInteger FilterResY { get; }
    public abstract virtual ISvgAnimatedEnumeration get_FilterUnits();
    public abstract virtual ISvgAnimatedEnumeration get_PrimitiveUnits();
    public abstract virtual ISvgAnimatedLength get_X();
    public abstract virtual ISvgAnimatedLength get_Y();
    public abstract virtual ISvgAnimatedLength get_Width();
    public abstract virtual ISvgAnimatedLength get_Height();
    public abstract virtual ISvgAnimatedInteger get_FilterResX();
    public abstract virtual ISvgAnimatedInteger get_FilterResY();
    public abstract virtual void SetFilterRes(ulong filterResX, ulong filterResY);
}
public interface SharpVectors.Dom.Svg.ISvgFilterPrimitiveStandardAttributes {
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    public ISvgAnimatedLength Width { get; }
    public ISvgAnimatedLength Height { get; }
    public ISvgAnimatedString Result { get; }
    public abstract virtual ISvgAnimatedLength get_X();
    public abstract virtual ISvgAnimatedLength get_Y();
    public abstract virtual ISvgAnimatedLength get_Width();
    public abstract virtual ISvgAnimatedLength get_Height();
    public abstract virtual ISvgAnimatedString get_Result();
}
public interface SharpVectors.Dom.Svg.ISvgFitToViewBox {
    public ISvgAnimatedRect ViewBox { get; }
    public ISvgAnimatedPreserveAspectRatio PreserveAspectRatio { get; }
    public abstract virtual ISvgAnimatedRect get_ViewBox();
    public abstract virtual ISvgAnimatedPreserveAspectRatio get_PreserveAspectRatio();
}
public interface SharpVectors.Dom.Svg.ISvgFontElement {
}
public interface SharpVectors.Dom.Svg.ISvgFontFaceElement {
}
public interface SharpVectors.Dom.Svg.ISvgFontFaceFormatElement {
}
public interface SharpVectors.Dom.Svg.ISvgFontFaceNameElement {
    public string FaceName { get; public set; }
    public abstract virtual string get_FaceName();
    public abstract virtual void set_FaceName(string value);
}
public interface SharpVectors.Dom.Svg.ISvgFontFaceSrcElement {
}
public interface SharpVectors.Dom.Svg.ISvgFontFaceUriElement {
}
public interface SharpVectors.Dom.Svg.ISvgForeignObjectElement {
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    public ISvgAnimatedLength Width { get; }
    public ISvgAnimatedLength Height { get; }
    public abstract virtual ISvgAnimatedLength get_X();
    public abstract virtual ISvgAnimatedLength get_Y();
    public abstract virtual ISvgAnimatedLength get_Width();
    public abstract virtual ISvgAnimatedLength get_Height();
}
public interface SharpVectors.Dom.Svg.ISvgGElement {
}
public interface SharpVectors.Dom.Svg.ISvgGlyphElement {
}
public interface SharpVectors.Dom.Svg.ISvgGlyphRefElement {
    public string GlyphRef { get; public set; }
    public string Format { get; public set; }
    public float X { get; public set; }
    public float Y { get; public set; }
    public float Dx { get; public set; }
    public float Dy { get; public set; }
    public abstract virtual string get_GlyphRef();
    public abstract virtual void set_GlyphRef(string value);
    public abstract virtual string get_Format();
    public abstract virtual void set_Format(string value);
    public abstract virtual float get_X();
    public abstract virtual void set_X(float value);
    public abstract virtual float get_Y();
    public abstract virtual void set_Y(float value);
    public abstract virtual float get_Dx();
    public abstract virtual void set_Dx(float value);
    public abstract virtual float get_Dy();
    public abstract virtual void set_Dy(float value);
}
public interface SharpVectors.Dom.Svg.ISvgGradientElement {
    public ISvgAnimatedEnumeration GradientUnits { get; }
    public ISvgAnimatedTransformList GradientTransform { get; }
    public ISvgAnimatedEnumeration SpreadMethod { get; }
    public abstract virtual ISvgAnimatedEnumeration get_GradientUnits();
    public abstract virtual ISvgAnimatedTransformList get_GradientTransform();
    public abstract virtual ISvgAnimatedEnumeration get_SpreadMethod();
}
public interface SharpVectors.Dom.Svg.ISvgHKernElement {
}
public interface SharpVectors.Dom.Svg.ISvgIccColor {
    public ISvgNumberList Colors { get; }
    public string ColorProfile { get; public set; }
    public abstract virtual ISvgNumberList get_Colors();
    public abstract virtual string get_ColorProfile();
    public abstract virtual void set_ColorProfile(string value);
}
public interface SharpVectors.Dom.Svg.ISvgImageElement {
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    public ISvgAnimatedLength Width { get; }
    public ISvgAnimatedLength Height { get; }
    public ISvgAnimatedPreserveAspectRatio PreserveAspectRatio { get; }
    public ISvgColorProfileElement ColorProfile { get; }
    public abstract virtual ISvgAnimatedLength get_X();
    public abstract virtual ISvgAnimatedLength get_Y();
    public abstract virtual ISvgAnimatedLength get_Width();
    public abstract virtual ISvgAnimatedLength get_Height();
    public abstract virtual ISvgAnimatedPreserveAspectRatio get_PreserveAspectRatio();
    public abstract virtual ISvgColorProfileElement get_ColorProfile();
}
public interface SharpVectors.Dom.Svg.ISvgLangSpace {
    public string XmlLang { get; public set; }
    public string XmlSpace { get; public set; }
    public abstract virtual string get_XmlLang();
    public abstract virtual void set_XmlLang(string value);
    public abstract virtual string get_XmlSpace();
    public abstract virtual void set_XmlSpace(string value);
}
public interface SharpVectors.Dom.Svg.ISvgLength {
    public SvgLengthType UnitType { get; }
    public double Value { get; public set; }
    public double ValueInSpecifiedUnits { get; public set; }
    public string ValueAsString { get; public set; }
    public abstract virtual SvgLengthType get_UnitType();
    public abstract virtual double get_Value();
    public abstract virtual void set_Value(double value);
    public abstract virtual double get_ValueInSpecifiedUnits();
    public abstract virtual void set_ValueInSpecifiedUnits(double value);
    public abstract virtual string get_ValueAsString();
    public abstract virtual void set_ValueAsString(string value);
    public abstract virtual void NewValueSpecifiedUnits(SvgLengthType unitType, double valueInSpecifiedUnits);
    public abstract virtual void ConvertToSpecifiedUnits(SvgLengthType unitType);
}
public interface SharpVectors.Dom.Svg.ISvgLengthList {
    public UInt32 NumberOfItems { get; }
    public abstract virtual UInt32 get_NumberOfItems();
    public abstract virtual void Clear();
    public abstract virtual ISvgLength Initialize(ISvgLength newItem);
    public abstract virtual ISvgLength GetItem(UInt32 index);
    public abstract virtual ISvgLength InsertItemBefore(ISvgLength newItem, UInt32 index);
    public abstract virtual ISvgLength ReplaceItem(ISvgLength newItem, UInt32 index);
    public abstract virtual ISvgLength RemoveItem(UInt32 index);
    public abstract virtual ISvgLength AppendItem(ISvgLength newItem);
    public abstract virtual void FromString(string listString);
}
public interface SharpVectors.Dom.Svg.ISvgLinearGradientElement {
    public ISvgAnimatedLength X1 { get; }
    public ISvgAnimatedLength Y1 { get; }
    public ISvgAnimatedLength X2 { get; }
    public ISvgAnimatedLength Y2 { get; }
    public abstract virtual ISvgAnimatedLength get_X1();
    public abstract virtual ISvgAnimatedLength get_Y1();
    public abstract virtual ISvgAnimatedLength get_X2();
    public abstract virtual ISvgAnimatedLength get_Y2();
}
public interface SharpVectors.Dom.Svg.ISvgLineElement {
    public ISvgAnimatedLength X1 { get; }
    public ISvgAnimatedLength Y1 { get; }
    public ISvgAnimatedLength X2 { get; }
    public ISvgAnimatedLength Y2 { get; }
    public abstract virtual ISvgAnimatedLength get_X1();
    public abstract virtual ISvgAnimatedLength get_Y1();
    public abstract virtual ISvgAnimatedLength get_X2();
    public abstract virtual ISvgAnimatedLength get_Y2();
}
public interface SharpVectors.Dom.Svg.ISvgList {
    public ulong NumberOfItems { get; }
    public abstract virtual ulong get_NumberOfItems();
    public abstract virtual void Clear();
    public abstract virtual object Initialize(object newItem);
    public abstract virtual object GetItem(ulong index);
    public abstract virtual object InsertItemBefore(object newItem, ulong index);
    public abstract virtual object ReplaceItem(object newItem, ulong index);
    public abstract virtual object RemoveItem(ulong index);
    public abstract virtual object AppendItem(object newItem);
}
public interface SharpVectors.Dom.Svg.ISvgLocatable {
    public ISvgElement NearestViewportElement { get; }
    public ISvgElement FarthestViewportElement { get; }
    public abstract virtual ISvgElement get_NearestViewportElement();
    public abstract virtual ISvgElement get_FarthestViewportElement();
    public abstract virtual ISvgRect GetBBox();
    public abstract virtual ISvgMatrix GetCTM();
    public abstract virtual ISvgMatrix GetScreenCTM();
    public abstract virtual ISvgMatrix GetTransformToElement(ISvgElement element);
}
public interface SharpVectors.Dom.Svg.ISvgMarker {
    public int Index { get; }
    public bool IsCurve { get; }
    public SvgPointF Position { get; }
    public ISvgPathSeg Segment { get; }
    public abstract virtual int get_Index();
    public abstract virtual bool get_IsCurve();
    public abstract virtual SvgPointF get_Position();
    public abstract virtual ISvgPathSeg get_Segment();
}
public interface SharpVectors.Dom.Svg.ISvgMarkerElement {
    public ISvgAnimatedLength RefX { get; }
    public ISvgAnimatedLength RefY { get; }
    public ISvgAnimatedEnumeration MarkerUnits { get; }
    public ISvgAnimatedLength MarkerWidth { get; }
    public ISvgAnimatedLength MarkerHeight { get; }
    public ISvgAnimatedEnumeration OrientType { get; }
    public ISvgAnimatedAngle OrientAngle { get; }
    public abstract virtual ISvgAnimatedLength get_RefX();
    public abstract virtual ISvgAnimatedLength get_RefY();
    public abstract virtual ISvgAnimatedEnumeration get_MarkerUnits();
    public abstract virtual ISvgAnimatedLength get_MarkerWidth();
    public abstract virtual ISvgAnimatedLength get_MarkerHeight();
    public abstract virtual ISvgAnimatedEnumeration get_OrientType();
    public abstract virtual ISvgAnimatedAngle get_OrientAngle();
    public abstract virtual void SetOrientToAuto();
    public abstract virtual void SetOrientToAngle(ISvgAngle angle);
}
public interface SharpVectors.Dom.Svg.ISvgMaskElement {
    public ISvgAnimatedEnumeration MaskUnits { get; }
    public ISvgAnimatedEnumeration MaskContentUnits { get; }
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    public ISvgAnimatedLength Width { get; }
    public ISvgAnimatedLength Height { get; }
    public abstract virtual ISvgAnimatedEnumeration get_MaskUnits();
    public abstract virtual ISvgAnimatedEnumeration get_MaskContentUnits();
    public abstract virtual ISvgAnimatedLength get_X();
    public abstract virtual ISvgAnimatedLength get_Y();
    public abstract virtual ISvgAnimatedLength get_Width();
    public abstract virtual ISvgAnimatedLength get_Height();
}
public interface SharpVectors.Dom.Svg.ISvgMatrix {
    public double A { get; public set; }
    public double B { get; public set; }
    public double C { get; public set; }
    public double D { get; public set; }
    public double E { get; public set; }
    public double F { get; public set; }
    public bool IsIdentity { get; }
    public abstract virtual double get_A();
    public abstract virtual void set_A(double value);
    public abstract virtual double get_B();
    public abstract virtual void set_B(double value);
    public abstract virtual double get_C();
    public abstract virtual void set_C(double value);
    public abstract virtual double get_D();
    public abstract virtual void set_D(double value);
    public abstract virtual double get_E();
    public abstract virtual void set_E(double value);
    public abstract virtual double get_F();
    public abstract virtual void set_F(double value);
    public abstract virtual bool get_IsIdentity();
    public abstract virtual ISvgMatrix Multiply(ISvgMatrix secondMatrix);
    public abstract virtual ISvgMatrix Inverse();
    public abstract virtual ISvgMatrix Translate(double x, double y);
    public abstract virtual ISvgMatrix Scale(double scaleFactor);
    public abstract virtual ISvgMatrix ScaleNonUniform(double scaleFactorX, double scaleFactorY);
    public abstract virtual ISvgMatrix Rotate(double angle);
    public abstract virtual ISvgMatrix RotateFromVector(double x, double y);
    public abstract virtual ISvgMatrix FlipX();
    public abstract virtual ISvgMatrix FlipY();
    public abstract virtual ISvgMatrix SkewX(double angle);
    public abstract virtual ISvgMatrix SkewY(double angle);
}
public interface SharpVectors.Dom.Svg.ISvgMetadataElement {
}
public interface SharpVectors.Dom.Svg.ISvgMissingGlyphElement {
}
public interface SharpVectors.Dom.Svg.ISvgNumber {
    public double Value { get; public set; }
    public abstract virtual double get_Value();
    public abstract virtual void set_Value(double value);
}
[DefaultMemberAttribute("Item")]
public interface SharpVectors.Dom.Svg.ISvgNumberList {
    public int Count { get; }
    public ISvgNumber Item { get; }
    public UInt32 NumberOfItems { get; }
    public abstract virtual int get_Count();
    public abstract virtual ISvgNumber get_Item(int index);
    public abstract virtual UInt32 get_NumberOfItems();
    public abstract virtual void Clear();
    public abstract virtual ISvgNumber Initialize(ISvgNumber newItem);
    public abstract virtual ISvgNumber GetItem(UInt32 index);
    public abstract virtual ISvgNumber InsertItemBefore(ISvgNumber newItem, UInt32 index);
    public abstract virtual ISvgNumber ReplaceItem(ISvgNumber newItem, UInt32 index);
    public abstract virtual ISvgNumber RemoveItem(UInt32 index);
    public abstract virtual ISvgNumber AppendItem(ISvgNumber newItem);
    public abstract virtual void FromString(string listString);
}
public interface SharpVectors.Dom.Svg.ISvgPaint {
    public SvgPaintType PaintType { get; }
    public string Uri { get; }
    public abstract virtual SvgPaintType get_PaintType();
    public abstract virtual string get_Uri();
    public abstract virtual void SetUri(string uri);
    public abstract virtual void SetPaint(SvgPaintType paintType, string uri, string rgbColor, string iccColor);
}
public interface SharpVectors.Dom.Svg.ISvgPathElement {
    public ISvgAnimatedNumber PathLength { get; }
    public abstract virtual ISvgAnimatedNumber get_PathLength();
    public abstract virtual double GetTotalLength();
    public abstract virtual ISvgPoint GetPointAtLength(double distance);
    public abstract virtual int GetPathSegAtLength(double distance);
    public abstract virtual ISvgPathSegClosePath CreateSvgPathSegClosePath();
    public abstract virtual ISvgPathSegMovetoAbs CreateSvgPathSegMovetoAbs(double x, double y);
    public abstract virtual ISvgPathSegMovetoRel CreateSvgPathSegMovetoRel(double x, double y);
    public abstract virtual ISvgPathSegLinetoAbs CreateSvgPathSegLinetoAbs(double x, double y);
    public abstract virtual ISvgPathSegLinetoRel CreateSvgPathSegLinetoRel(double x, double y);
    public abstract virtual ISvgPathSegCurvetoCubicAbs CreateSvgPathSegCurvetoCubicAbs(double x, double y, double x1, double y1, double x2, double y2);
    public abstract virtual ISvgPathSegCurvetoCubicRel CreateSvgPathSegCurvetoCubicRel(double x, double y, double x1, double y1, double x2, double y2);
    public abstract virtual ISvgPathSegCurvetoQuadraticAbs CreateSvgPathSegCurvetoQuadraticAbs(double x, double y, double x1, double y1);
    public abstract virtual ISvgPathSegCurvetoQuadraticRel CreateSvgPathSegCurvetoQuadraticRel(double x, double y, double x1, double y1);
    public abstract virtual ISvgPathSegArcAbs CreateSvgPathSegArcAbs(double x, double y, double r1, double r2, double angle, bool largeArcFlag, bool sweepFlag);
    public abstract virtual ISvgPathSegArcRel CreateSvgPathSegArcRel(double x, double y, double r1, double r2, double angle, bool largeArcFlag, bool sweepFlag);
    public abstract virtual ISvgPathSegLinetoHorizontalAbs CreateSvgPathSegLinetoHorizontalAbs(double x);
    public abstract virtual ISvgPathSegLinetoHorizontalRel CreateSvgPathSegLinetoHorizontalRel(double x);
    public abstract virtual ISvgPathSegLinetoVerticalAbs CreateSvgPathSegLinetoVerticalAbs(double y);
    public abstract virtual ISvgPathSegLinetoVerticalRel CreateSvgPathSegLinetoVerticalRel(double y);
    public abstract virtual ISvgPathSegCurvetoCubicSmoothAbs CreateSvgPathSegCurvetoCubicSmoothAbs(double x, double y, double x2, double y2);
    public abstract virtual ISvgPathSegCurvetoCubicSmoothRel CreateSvgPathSegCurvetoCubicSmoothRel(double x, double y, double x2, double y2);
    public abstract virtual ISvgPathSegCurvetoQuadraticSmoothAbs CreateSvgPathSegCurvetoQuadraticSmoothAbs(double x, double y);
    public abstract virtual ISvgPathSegCurvetoQuadraticSmoothRel CreateSvgPathSegCurvetoQuadraticSmoothRel(double x, double y);
}
public interface SharpVectors.Dom.Svg.ISvgPathSeg {
    public SvgPathSegType PathSegType { get; }
    public SvgPathType PathType { get; }
    public string PathSegTypeAsLetter { get; }
    public SvgPointF AbsXY { get; }
    public double StartAngle { get; }
    public double EndAngle { get; }
    public string PathText { get; }
    public bool IsCurve { get; }
    public ISvgPathSeg PreviousSeg { get; }
    public ISvgPathSeg NextSeg { get; }
    public SvgPointF[] Limits { get; public set; }
    public abstract virtual SvgPathSegType get_PathSegType();
    public abstract virtual SvgPathType get_PathType();
    public abstract virtual string get_PathSegTypeAsLetter();
    public abstract virtual SvgPointF get_AbsXY();
    public abstract virtual double get_StartAngle();
    public abstract virtual double get_EndAngle();
    public abstract virtual string get_PathText();
    public abstract virtual bool get_IsCurve();
    public abstract virtual ISvgPathSeg get_PreviousSeg();
    public abstract virtual ISvgPathSeg get_NextSeg();
    public abstract virtual SvgPointF[] get_Limits();
    public abstract virtual void set_Limits(SvgPointF[] value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegArcAbs {
    public double X { get; public set; }
    public double Y { get; public set; }
    public double R1 { get; public set; }
    public double R2 { get; public set; }
    public double Angle { get; public set; }
    public bool LargeArcFlag { get; public set; }
    public bool SweepFlag { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
    public abstract virtual double get_R1();
    public abstract virtual void set_R1(double value);
    public abstract virtual double get_R2();
    public abstract virtual void set_R2(double value);
    public abstract virtual double get_Angle();
    public abstract virtual void set_Angle(double value);
    public abstract virtual bool get_LargeArcFlag();
    public abstract virtual void set_LargeArcFlag(bool value);
    public abstract virtual bool get_SweepFlag();
    public abstract virtual void set_SweepFlag(bool value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegArcRel {
    public double X { get; public set; }
    public double Y { get; public set; }
    public double R1 { get; public set; }
    public double R2 { get; public set; }
    public double Angle { get; public set; }
    public bool LargeArcFlag { get; public set; }
    public bool SweepFlag { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
    public abstract virtual double get_R1();
    public abstract virtual void set_R1(double value);
    public abstract virtual double get_R2();
    public abstract virtual void set_R2(double value);
    public abstract virtual double get_Angle();
    public abstract virtual void set_Angle(double value);
    public abstract virtual bool get_LargeArcFlag();
    public abstract virtual void set_LargeArcFlag(bool value);
    public abstract virtual bool get_SweepFlag();
    public abstract virtual void set_SweepFlag(bool value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegClosePath {
}
public interface SharpVectors.Dom.Svg.ISvgPathSegCurvetoCubicAbs {
    public double X { get; public set; }
    public double Y { get; public set; }
    public double X1 { get; public set; }
    public double Y1 { get; public set; }
    public double X2 { get; public set; }
    public double Y2 { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
    public abstract virtual double get_X1();
    public abstract virtual void set_X1(double value);
    public abstract virtual double get_Y1();
    public abstract virtual void set_Y1(double value);
    public abstract virtual double get_X2();
    public abstract virtual void set_X2(double value);
    public abstract virtual double get_Y2();
    public abstract virtual void set_Y2(double value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegCurvetoCubicRel {
    public double X { get; public set; }
    public double Y { get; public set; }
    public double X1 { get; public set; }
    public double Y1 { get; public set; }
    public double X2 { get; public set; }
    public double Y2 { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
    public abstract virtual double get_X1();
    public abstract virtual void set_X1(double value);
    public abstract virtual double get_Y1();
    public abstract virtual void set_Y1(double value);
    public abstract virtual double get_X2();
    public abstract virtual void set_X2(double value);
    public abstract virtual double get_Y2();
    public abstract virtual void set_Y2(double value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegCurvetoCubicSmoothAbs {
    public double X { get; public set; }
    public double Y { get; public set; }
    public double X2 { get; public set; }
    public double Y2 { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
    public abstract virtual double get_X2();
    public abstract virtual void set_X2(double value);
    public abstract virtual double get_Y2();
    public abstract virtual void set_Y2(double value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegCurvetoCubicSmoothRel {
    public double X { get; public set; }
    public double Y { get; public set; }
    public double X2 { get; public set; }
    public double Y2 { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
    public abstract virtual double get_X2();
    public abstract virtual void set_X2(double value);
    public abstract virtual double get_Y2();
    public abstract virtual void set_Y2(double value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegCurvetoQuadraticAbs {
    public double X { get; public set; }
    public double Y { get; public set; }
    public double X1 { get; public set; }
    public double Y1 { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
    public abstract virtual double get_X1();
    public abstract virtual void set_X1(double value);
    public abstract virtual double get_Y1();
    public abstract virtual void set_Y1(double value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegCurvetoQuadraticRel {
    public double X { get; public set; }
    public double Y { get; public set; }
    public double X1 { get; public set; }
    public double Y1 { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
    public abstract virtual double get_X1();
    public abstract virtual void set_X1(double value);
    public abstract virtual double get_Y1();
    public abstract virtual void set_Y1(double value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegCurvetoQuadraticSmoothAbs {
    public double X { get; public set; }
    public double Y { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegCurvetoQuadraticSmoothRel {
    public double X { get; public set; }
    public double Y { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegLinetoAbs {
    public double X { get; public set; }
    public double Y { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegLinetoHorizontalAbs {
    public double X { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegLinetoHorizontalRel {
    public double X { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegLinetoRel {
    public double X { get; public set; }
    public double Y { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegLinetoVerticalAbs {
    public double Y { get; public set; }
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegLinetoVerticalRel {
    public double Y { get; public set; }
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegList {
    public int NumberOfItems { get; }
    public abstract virtual int get_NumberOfItems();
    public abstract virtual ISvgPathSeg Initialize(ISvgPathSeg newItem);
    public abstract virtual ISvgPathSeg GetItem(int index);
    public abstract virtual ISvgPathSeg InsertItemBefore(ISvgPathSeg newItem, int index);
    public abstract virtual ISvgPathSeg ReplaceItem(ISvgPathSeg newItem, int index);
    public abstract virtual ISvgPathSeg RemoveItem(int index);
    public abstract virtual ISvgPathSeg AppendItem(ISvgPathSeg newItem);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegMovetoAbs {
    public double X { get; public set; }
    public double Y { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
}
public interface SharpVectors.Dom.Svg.ISvgPathSegMovetoRel {
    public double X { get; public set; }
    public double Y { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
}
public interface SharpVectors.Dom.Svg.ISvgPatternElement {
    public ISvgAnimatedEnumeration PatternUnits { get; }
    public ISvgAnimatedEnumeration PatternContentUnits { get; }
    public ISvgAnimatedTransformList PatternTransform { get; }
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    public ISvgAnimatedLength Width { get; }
    public ISvgAnimatedLength Height { get; }
    public ISvgRect PatternBounds { get; public set; }
    public abstract virtual ISvgAnimatedEnumeration get_PatternUnits();
    public abstract virtual ISvgAnimatedEnumeration get_PatternContentUnits();
    public abstract virtual ISvgAnimatedTransformList get_PatternTransform();
    public abstract virtual ISvgAnimatedLength get_X();
    public abstract virtual ISvgAnimatedLength get_Y();
    public abstract virtual ISvgAnimatedLength get_Width();
    public abstract virtual ISvgAnimatedLength get_Height();
    public abstract virtual ISvgRect get_PatternBounds();
    public abstract virtual void set_PatternBounds(ISvgRect value);
}
public interface SharpVectors.Dom.Svg.ISvgPoint {
    public double X { get; public set; }
    public double Y { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
    public abstract virtual ISvgPoint MatrixTransform(ISvgMatrix matrix);
}
public interface SharpVectors.Dom.Svg.ISvgPointList {
    public UInt32 NumberOfItems { get; }
    public abstract virtual UInt32 get_NumberOfItems();
    public abstract virtual void Clear();
    public abstract virtual ISvgPoint Initialize(ISvgPoint newItem);
    public abstract virtual ISvgPoint GetItem(UInt32 index);
    public abstract virtual ISvgPoint InsertItemBefore(ISvgPoint newItem, UInt32 index);
    public abstract virtual ISvgPoint ReplaceItem(ISvgPoint newItem, UInt32 index);
    public abstract virtual ISvgPoint RemoveItem(UInt32 index);
    public abstract virtual ISvgPoint AppendItem(ISvgPoint newItem);
    public abstract virtual void FromString(string listString, bool clearOnError);
}
public interface SharpVectors.Dom.Svg.ISvgPolygonElement {
}
public interface SharpVectors.Dom.Svg.ISvgPolylineElement {
}
public interface SharpVectors.Dom.Svg.ISvgPreserveAspectRatio {
    public bool IsDefaultAlign { get; }
    public SvgPreserveAspectRatioType Align { get; public set; }
    public SvgMeetOrSlice MeetOrSlice { get; public set; }
    public abstract virtual bool get_IsDefaultAlign();
    public abstract virtual SvgPreserveAspectRatioType get_Align();
    public abstract virtual void set_Align(SvgPreserveAspectRatioType value);
    public abstract virtual SvgMeetOrSlice get_MeetOrSlice();
    public abstract virtual void set_MeetOrSlice(SvgMeetOrSlice value);
}
public interface SharpVectors.Dom.Svg.ISvgRadialGradientElement {
    public ISvgAnimatedLength Cx { get; }
    public ISvgAnimatedLength Cy { get; }
    public ISvgAnimatedLength R { get; }
    public ISvgAnimatedLength Fx { get; }
    public ISvgAnimatedLength Fy { get; }
    public abstract virtual ISvgAnimatedLength get_Cx();
    public abstract virtual ISvgAnimatedLength get_Cy();
    public abstract virtual ISvgAnimatedLength get_R();
    public abstract virtual ISvgAnimatedLength get_Fx();
    public abstract virtual ISvgAnimatedLength get_Fy();
}
public interface SharpVectors.Dom.Svg.ISvgRect {
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
    public abstract virtual double get_Width();
    public abstract virtual void set_Width(double value);
    public abstract virtual double get_Height();
    public abstract virtual void set_Height(double value);
}
public interface SharpVectors.Dom.Svg.ISvgRectElement {
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    public ISvgAnimatedLength Rx { get; }
    public ISvgAnimatedLength Ry { get; }
    public ISvgAnimatedLength Width { get; }
    public ISvgAnimatedLength Height { get; }
    public abstract virtual ISvgAnimatedLength get_X();
    public abstract virtual ISvgAnimatedLength get_Y();
    public abstract virtual ISvgAnimatedLength get_Rx();
    public abstract virtual ISvgAnimatedLength get_Ry();
    public abstract virtual ISvgAnimatedLength get_Width();
    public abstract virtual ISvgAnimatedLength get_Height();
}
public interface SharpVectors.Dom.Svg.ISvgRenderer {
    public ISvgWindow Window { get; public set; }
    public SvgRectF InvalidRect { get; public set; }
    public RenderEvent OnRender { get; public set; }
    public abstract virtual ISvgWindow get_Window();
    public abstract virtual void set_Window(ISvgWindow value);
    public abstract virtual void Render(ISvgElement node);
    public abstract virtual void Render(ISvgDocument node);
    public abstract virtual SvgRectF get_InvalidRect();
    public abstract virtual void set_InvalidRect(SvgRectF value);
    public abstract virtual void InvalidateRect(SvgRectF rect);
    public abstract virtual RenderEvent get_OnRender();
    public abstract virtual void set_OnRender(RenderEvent value);
    public abstract virtual ISvgRect GetRenderedBounds(ISvgElement element, float margin);
}
public interface SharpVectors.Dom.Svg.ISvgScriptElement {
    public string Type { get; public set; }
    public string CrossOrigin { get; public set; }
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual string get_CrossOrigin();
    public abstract virtual void set_CrossOrigin(string value);
}
public interface SharpVectors.Dom.Svg.ISvgSolidColorElement {
}
public interface SharpVectors.Dom.Svg.ISvgStopElement {
    public ISvgAnimatedNumber Offset { get; }
    public abstract virtual ISvgAnimatedNumber get_Offset();
}
public interface SharpVectors.Dom.Svg.ISvgStringList {
    public UInt32 NumberOfItems { get; }
    public abstract virtual UInt32 get_NumberOfItems();
    public abstract virtual void Clear();
    public abstract virtual string Initialize(string newItem);
    public abstract virtual string GetItem(UInt32 index);
    public abstract virtual string InsertItemBefore(string newItem, UInt32 index);
    public abstract virtual string ReplaceItem(string newItem, UInt32 index);
    public abstract virtual string RemoveItem(UInt32 index);
    public abstract virtual string AppendItem(string newItem);
    public abstract virtual void FromString(string listString);
}
public interface SharpVectors.Dom.Svg.ISvgStylable {
    public ISvgAnimatedString ClassName { get; }
    public ICssStyleDeclaration Style { get; }
    public abstract virtual ISvgAnimatedString get_ClassName();
    public abstract virtual ICssStyleDeclaration get_Style();
    public abstract virtual ICssValue GetPresentationAttribute(string name);
}
public interface SharpVectors.Dom.Svg.ISvgStyleElement {
    public string Type { get; public set; }
    public string Media { get; public set; }
    public string Title { get; public set; }
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual string get_Media();
    public abstract virtual void set_Media(string value);
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
}
public interface SharpVectors.Dom.Svg.ISvgSvgElement {
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    public ISvgAnimatedLength Width { get; }
    public ISvgAnimatedLength Height { get; }
    public string ContentScriptType { get; public set; }
    public string ContentStyleType { get; public set; }
    public ISvgRect Viewport { get; }
    public float PixelUnitToMillimeterX { get; }
    public float PixelUnitToMillimeterY { get; }
    public float ScreenPixelToMillimeterX { get; }
    public float ScreenPixelToMillimeterY { get; }
    public bool UseCurrentView { get; public set; }
    public ISvgViewSpec CurrentView { get; }
    public float CurrentScale { get; public set; }
    public ISvgPoint CurrentTranslate { get; }
    public float CurrentTime { get; public set; }
    public abstract virtual ISvgAnimatedLength get_X();
    public abstract virtual ISvgAnimatedLength get_Y();
    public abstract virtual ISvgAnimatedLength get_Width();
    public abstract virtual ISvgAnimatedLength get_Height();
    public abstract virtual string get_ContentScriptType();
    public abstract virtual void set_ContentScriptType(string value);
    public abstract virtual string get_ContentStyleType();
    public abstract virtual void set_ContentStyleType(string value);
    public abstract virtual ISvgRect get_Viewport();
    public abstract virtual float get_PixelUnitToMillimeterX();
    public abstract virtual float get_PixelUnitToMillimeterY();
    public abstract virtual float get_ScreenPixelToMillimeterX();
    public abstract virtual float get_ScreenPixelToMillimeterY();
    public abstract virtual bool get_UseCurrentView();
    public abstract virtual void set_UseCurrentView(bool value);
    public abstract virtual ISvgViewSpec get_CurrentView();
    public abstract virtual float get_CurrentScale();
    public abstract virtual void set_CurrentScale(float value);
    public abstract virtual ISvgPoint get_CurrentTranslate();
    public abstract virtual int SuspendRedraw(int max_wait_milliseconds);
    public abstract virtual void UnsuspendRedraw(int suspend_handle_id);
    public abstract virtual void UnsuspendRedrawAll();
    public abstract virtual void ForceRedraw();
    public abstract virtual void PauseAnimations();
    public abstract virtual void UnpauseAnimations();
    public abstract virtual bool AnimationsPaused();
    public abstract virtual float get_CurrentTime();
    public abstract virtual void set_CurrentTime(float value);
    public abstract virtual XmlNodeList GetIntersectionList(ISvgRect rect, ISvgElement referenceElement);
    public abstract virtual XmlNodeList GetEnclosureList(ISvgRect rect, ISvgElement referenceElement);
    public abstract virtual bool CheckIntersection(ISvgElement element, ISvgRect rect);
    public abstract virtual bool CheckEnclosure(ISvgElement element, ISvgRect rect);
    public abstract virtual void DeselectAll();
    public abstract virtual ISvgNumber CreateSvgNumber();
    public abstract virtual ISvgLength CreateSvgLength();
    public abstract virtual ISvgAngle CreateSvgAngle();
    public abstract virtual ISvgPoint CreateSvgPoint();
    public abstract virtual ISvgMatrix CreateSvgMatrix();
    public abstract virtual ISvgRect CreateSvgRect();
    public abstract virtual ISvgTransform CreateSvgTransform();
    public abstract virtual ISvgTransform CreateSvgTransformFromMatrix(ISvgMatrix matrix);
    public abstract virtual XmlElement GetElementById(string elementId);
}
public interface SharpVectors.Dom.Svg.ISvgSwitchElement {
}
public interface SharpVectors.Dom.Svg.ISvgSymbolElement {
}
public interface SharpVectors.Dom.Svg.ISvgTests {
    public ISvgStringList RequiredFeatures { get; }
    public ISvgStringList RequiredExtensions { get; }
    public ISvgStringList SystemLanguage { get; }
    public abstract virtual ISvgStringList get_RequiredFeatures();
    public abstract virtual ISvgStringList get_RequiredExtensions();
    public abstract virtual ISvgStringList get_SystemLanguage();
    public abstract virtual bool HasExtension(string extension);
}
public interface SharpVectors.Dom.Svg.ISvgTextContentElement {
    public ISvgAnimatedLength TextLength { get; }
    public ISvgAnimatedEnumeration LengthAdjust { get; }
    public abstract virtual ISvgAnimatedLength get_TextLength();
    public abstract virtual ISvgAnimatedEnumeration get_LengthAdjust();
    public abstract virtual long GetNumberOfChars();
    public abstract virtual float GetComputedTextLength();
    public abstract virtual float GetSubStringLength(long charnum, long nchars);
    public abstract virtual ISvgPoint GetStartPositionOfChar(long charnum);
    public abstract virtual ISvgPoint GetEndPositionOfChar(long charnum);
    public abstract virtual ISvgRect GetExtentOfChar(long charnum);
    public abstract virtual float GetRotationOfChar(long charnum);
    public abstract virtual long GetCharNumAtPosition(ISvgPoint point);
    public abstract virtual void SelectSubString(long charnum, long nchars);
}
public interface SharpVectors.Dom.Svg.ISvgTextElement {
}
public interface SharpVectors.Dom.Svg.ISvgTextPathElement {
    public ISvgAnimatedLength StartOffset { get; }
    public ISvgAnimatedEnumeration Method { get; }
    public ISvgAnimatedEnumeration Spacing { get; }
    public abstract virtual ISvgAnimatedLength get_StartOffset();
    public abstract virtual ISvgAnimatedEnumeration get_Method();
    public abstract virtual ISvgAnimatedEnumeration get_Spacing();
}
public interface SharpVectors.Dom.Svg.ISvgTextPositioningElement {
    public ISvgAnimatedLengthList X { get; }
    public ISvgAnimatedLengthList Y { get; }
    public ISvgAnimatedLengthList Dx { get; }
    public ISvgAnimatedLengthList Dy { get; }
    public ISvgAnimatedNumberList Rotate { get; }
    public abstract virtual ISvgAnimatedLengthList get_X();
    public abstract virtual ISvgAnimatedLengthList get_Y();
    public abstract virtual ISvgAnimatedLengthList get_Dx();
    public abstract virtual ISvgAnimatedLengthList get_Dy();
    public abstract virtual ISvgAnimatedNumberList get_Rotate();
}
public interface SharpVectors.Dom.Svg.ISvgTitleElement {
}
public interface SharpVectors.Dom.Svg.ISvgTransform {
    public short Type { get; }
    public SvgTransformType TransformType { get; }
    public ISvgMatrix Matrix { get; }
    public double Angle { get; }
    public Double[] InputValues { get; }
    public abstract virtual short get_Type();
    public abstract virtual SvgTransformType get_TransformType();
    public abstract virtual ISvgMatrix get_Matrix();
    public abstract virtual double get_Angle();
    public abstract virtual Double[] get_InputValues();
    public abstract virtual void SetMatrix(ISvgMatrix matrix);
    public abstract virtual void SetTranslate(double tx, double ty);
    public abstract virtual void SetScale(double sx, double sy);
    public abstract virtual void SetRotate(double angle, double cx, double cy);
    public abstract virtual void SetSkewX(double angle);
    public abstract virtual void SetSkewY(double angle);
}
public interface SharpVectors.Dom.Svg.ISvgTransformable {
    public ISvgAnimatedTransformList Transform { get; }
    public abstract virtual ISvgAnimatedTransformList get_Transform();
}
public interface SharpVectors.Dom.Svg.ISvgTransformList {
    public UInt32 NumberOfItems { get; }
    public abstract virtual UInt32 get_NumberOfItems();
    public abstract virtual void Clear();
    public abstract virtual ISvgTransform Initialize(ISvgTransform newItem);
    public abstract virtual ISvgTransform GetItem(UInt32 index);
    public abstract virtual ISvgTransform InsertItemBefore(ISvgTransform newItem, UInt32 index);
    public abstract virtual ISvgTransform ReplaceItem(ISvgTransform newItem, UInt32 index);
    public abstract virtual ISvgTransform RemoveItem(UInt32 index);
    public abstract virtual ISvgTransform AppendItem(ISvgTransform newItem);
    public abstract virtual ISvgTransform CreateSvgTransformFromMatrix(ISvgMatrix matrix);
    public abstract virtual ISvgTransform Consolidate();
}
public interface SharpVectors.Dom.Svg.ISvgTRefElement {
}
public interface SharpVectors.Dom.Svg.ISvgTSpanElement {
}
public interface SharpVectors.Dom.Svg.ISvgUriReference {
    public ISvgAnimatedString Href { get; }
    public abstract virtual ISvgAnimatedString get_Href();
}
public interface SharpVectors.Dom.Svg.ISvgUseElement {
    public ISvgAnimatedLength X { get; }
    public ISvgAnimatedLength Y { get; }
    public ISvgAnimatedLength Width { get; }
    public ISvgAnimatedLength Height { get; }
    public ISvgElementInstance InstanceRoot { get; }
    public ISvgElementInstance AnimatedInstanceRoot { get; }
    public abstract virtual ISvgAnimatedLength get_X();
    public abstract virtual ISvgAnimatedLength get_Y();
    public abstract virtual ISvgAnimatedLength get_Width();
    public abstract virtual ISvgAnimatedLength get_Height();
    public abstract virtual ISvgElementInstance get_InstanceRoot();
    public abstract virtual ISvgElementInstance get_AnimatedInstanceRoot();
}
public interface SharpVectors.Dom.Svg.ISvgViewElement {
    public ISvgStringList ViewTarget { get; }
    public abstract virtual ISvgStringList get_ViewTarget();
}
public interface SharpVectors.Dom.Svg.ISvgViewSpec {
    public ISvgTransformList Transform { get; }
    public ISvgElement ViewTarget { get; }
    public string ViewBoxString { get; }
    public string PreserveAspectRatioString { get; }
    public string TransformString { get; }
    public string ViewTargetString { get; }
    public abstract virtual ISvgTransformList get_Transform();
    public abstract virtual ISvgElement get_ViewTarget();
    public abstract virtual string get_ViewBoxString();
    public abstract virtual string get_PreserveAspectRatioString();
    public abstract virtual string get_TransformString();
    public abstract virtual string get_ViewTargetString();
}
public interface SharpVectors.Dom.Svg.ISvgVKernElement {
}
public interface SharpVectors.Dom.Svg.ISvgWindow {
    public IStyleSheet DefaultStyleSheet { get; }
    public ISvgDocument Document { get; }
    public long InnerHeight { get; }
    public long InnerWidth { get; }
    public string Source { get; public set; }
    public ISet`1<string> BaseUrls { get; public set; }
    public ISvgRenderer Renderer { get; }
    public DirectoryInfo WorkingDir { get; }
    public abstract virtual IStyleSheet get_DefaultStyleSheet();
    public abstract virtual ISvgDocument get_Document();
    public abstract virtual long get_InnerHeight();
    public abstract virtual long get_InnerWidth();
    public abstract virtual string get_Source();
    public abstract virtual void set_Source(string value);
    public abstract virtual ISet`1<string> get_BaseUrls();
    public abstract virtual void set_BaseUrls(ISet`1<string> value);
    public abstract virtual XmlDocumentFragment ParseXML(string source, XmlDocument document);
    public abstract virtual string PrintNode(XmlNode node);
    public abstract virtual void Alert(string message);
    public abstract virtual ISvgRenderer get_Renderer();
    public abstract virtual DirectoryInfo get_WorkingDir();
}
public interface SharpVectors.Dom.Svg.ISvgZoomAndPan {
    public SvgZoomAndPanType ZoomAndPan { get; public set; }
    public abstract virtual SvgZoomAndPanType get_ZoomAndPan();
    public abstract virtual void set_ZoomAndPan(SvgZoomAndPanType value);
}
public interface SharpVectors.Dom.Svg.ISvgZoomEvent {
    public double PreviousScale { get; }
    public ISvgPoint PreviousTranslate { get; }
    public double NewScale { get; }
    public ISvgPoint NewTranslate { get; }
    public ISvgRect ZoomRectScreen { get; }
    public abstract virtual double get_PreviousScale();
    public abstract virtual ISvgPoint get_PreviousTranslate();
    public abstract virtual double get_NewScale();
    public abstract virtual ISvgPoint get_NewTranslate();
    public abstract virtual ISvgRect get_ZoomRectScreen();
}
public class SharpVectors.Dom.Svg.RenderEvent : MulticastDelegate {
    public RenderEvent(object object, IntPtr method);
    public virtual void Invoke(SvgRectF updatedRect);
    public virtual IAsyncResult BeginInvoke(SvgRectF updatedRect, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum SharpVectors.Dom.Svg.SvgAngleType : Enum {
    public int value__;
    public static SvgAngleType Unknown;
    public static SvgAngleType Unspecified;
    public static SvgAngleType Deg;
    public static SvgAngleType Rad;
    public static SvgAngleType Grad;
}
public enum SharpVectors.Dom.Svg.SvgColorType : Enum {
    public int value__;
    public static SvgColorType Unknown;
    public static SvgColorType RgbColor;
    public static SvgColorType RgbColorIccColor;
    public static SvgColorType CurrentColor;
    public static SvgColorType SystemColor;
}
public enum SharpVectors.Dom.Svg.SvgFilterBlendMode : Enum {
    public ushort value__;
    public static SvgFilterBlendMode Unknown;
    public static SvgFilterBlendMode Normal;
    public static SvgFilterBlendMode Multiply;
    public static SvgFilterBlendMode Screen;
    public static SvgFilterBlendMode Darken;
    public static SvgFilterBlendMode Lighten;
    public static SvgFilterBlendMode Overlay;
    public static SvgFilterBlendMode ColorDodge;
    public static SvgFilterBlendMode ColorBurn;
    public static SvgFilterBlendMode HardLight;
    public static SvgFilterBlendMode SoftLight;
    public static SvgFilterBlendMode Difference;
    public static SvgFilterBlendMode Exclusion;
    public static SvgFilterBlendMode Hue;
    public static SvgFilterBlendMode Saturation;
    public static SvgFilterBlendMode Color;
    public static SvgFilterBlendMode Luminosity;
}
public enum SharpVectors.Dom.Svg.SvgFilterChannelSelector : Enum {
    public ushort value__;
    public static SvgFilterChannelSelector Unknown;
    public static SvgFilterChannelSelector R;
    public static SvgFilterChannelSelector G;
    public static SvgFilterChannelSelector B;
    public static SvgFilterChannelSelector A;
}
public enum SharpVectors.Dom.Svg.SvgFilterColorMatrix : Enum {
    public ushort value__;
    public static SvgFilterColorMatrix Unknown;
    public static SvgFilterColorMatrix Matrix;
    public static SvgFilterColorMatrix Saturate;
    public static SvgFilterColorMatrix Huerotate;
    public static SvgFilterColorMatrix LuminanceToAlpha;
}
public enum SharpVectors.Dom.Svg.SvgFilterCompositeOperator : Enum {
    public ushort value__;
    public static SvgFilterCompositeOperator Unknown;
    public static SvgFilterCompositeOperator Over;
    public static SvgFilterCompositeOperator In;
    public static SvgFilterCompositeOperator Out;
    public static SvgFilterCompositeOperator Atop;
    public static SvgFilterCompositeOperator Xor;
    public static SvgFilterCompositeOperator Arithmetic;
}
public enum SharpVectors.Dom.Svg.SvgFilterEdgeMode : Enum {
    public ushort value__;
    public static SvgFilterEdgeMode Unknown;
    public static SvgFilterEdgeMode Duplicate;
    public static SvgFilterEdgeMode Wrap;
    public static SvgFilterEdgeMode None;
}
public enum SharpVectors.Dom.Svg.SvgFilterMorphologyOperator : Enum {
    public ushort value__;
    public static SvgFilterMorphologyOperator Unknown;
    public static SvgFilterMorphologyOperator Erode;
    public static SvgFilterMorphologyOperator Dilate;
}
public enum SharpVectors.Dom.Svg.SvgFilterStitchOption : Enum {
    public ushort value__;
    public static SvgFilterStitchOption Unknown;
    public static SvgFilterStitchOption Stitch;
    public static SvgFilterStitchOption NoStitch;
}
public enum SharpVectors.Dom.Svg.SvgFilterTransferType : Enum {
    public ushort value__;
    public static SvgFilterTransferType Unknown;
    public static SvgFilterTransferType Identity;
    public static SvgFilterTransferType Table;
    public static SvgFilterTransferType Discrete;
    public static SvgFilterTransferType Linear;
    public static SvgFilterTransferType Gamma;
}
public enum SharpVectors.Dom.Svg.SvgFilterTurbulenceType : Enum {
    public ushort value__;
    public static SvgFilterTurbulenceType Unknown;
    public static SvgFilterTurbulenceType FractalNoise;
    public static SvgFilterTurbulenceType Turbulence;
}
public enum SharpVectors.Dom.Svg.SvgLengthType : Enum {
    public int value__;
    public static SvgLengthType Unknown;
    public static SvgLengthType Number;
    public static SvgLengthType Percentage;
    public static SvgLengthType Ems;
    public static SvgLengthType Exs;
    public static SvgLengthType Px;
    public static SvgLengthType Cm;
    public static SvgLengthType Mm;
    public static SvgLengthType In;
    public static SvgLengthType Pt;
    public static SvgLengthType Pc;
}
public class SharpVectors.Dom.Svg.SvgMarker : object {
    private int _index;
    private SvgPointF _position;
    private ISvgPathSeg _segment;
    public int Index { get; }
    public SvgPointF Position { get; }
    public ISvgPathSeg Segment { get; }
    public bool IsCurve { get; }
    public SvgMarker(int index, ISvgPathSeg segment);
    public SvgMarker(int index, SvgPointF position);
    public SvgMarker(int index, SvgPointF position, ISvgPathSeg segment);
    public sealed virtual int get_Index();
    public sealed virtual SvgPointF get_Position();
    public sealed virtual ISvgPathSeg get_Segment();
    public sealed virtual bool get_IsCurve();
}
public enum SharpVectors.Dom.Svg.SvgMarkerOrient : Enum {
    public int value__;
    public static SvgMarkerOrient Unknown;
    public static SvgMarkerOrient Auto;
    public static SvgMarkerOrient Angle;
    public static SvgMarkerOrient AutoStartReverse;
}
public enum SharpVectors.Dom.Svg.SvgMarkerUnit : Enum {
    public int value__;
    public static SvgMarkerUnit Unknown;
    public static SvgMarkerUnit UserSpaceOnUse;
    public static SvgMarkerUnit StrokeWidth;
}
public enum SharpVectors.Dom.Svg.SvgMeetOrSlice : Enum {
    public int value__;
    public static SvgMeetOrSlice Unknown;
    public static SvgMeetOrSlice Meet;
    public static SvgMeetOrSlice Slice;
}
public enum SharpVectors.Dom.Svg.SvgPaintType : Enum {
    public int value__;
    public static SvgPaintType Unknown;
    public static SvgPaintType RgbColor;
    public static SvgPaintType RgbColorIccColor;
    public static SvgPaintType None;
    public static SvgPaintType CurrentColor;
    public static SvgPaintType UriNone;
    public static SvgPaintType UriCurrentColor;
    public static SvgPaintType UriRgbColor;
    public static SvgPaintType UriRgbColorIccColor;
    public static SvgPaintType Uri;
    public static SvgPaintType ContextFill;
    public static SvgPaintType ContextStroke;
}
public enum SharpVectors.Dom.Svg.SvgPathSegType : Enum {
    public ushort value__;
    public static SvgPathSegType Unknown;
    public static SvgPathSegType ClosePath;
    public static SvgPathSegType MoveToAbs;
    public static SvgPathSegType MoveToRel;
    public static SvgPathSegType LineToAbs;
    public static SvgPathSegType LineToRel;
    public static SvgPathSegType CurveToCubicAbs;
    public static SvgPathSegType CurveToCubicRel;
    public static SvgPathSegType CurveToQuadraticAbs;
    public static SvgPathSegType CurveToQuadraticRel;
    public static SvgPathSegType ArcAbs;
    public static SvgPathSegType ArcRel;
    public static SvgPathSegType LineToHorizontalAbs;
    public static SvgPathSegType LineToHorizontalRel;
    public static SvgPathSegType LineToVerticalAbs;
    public static SvgPathSegType LineToVerticalRel;
    public static SvgPathSegType CurveToCubicSmoothAbs;
    public static SvgPathSegType CurveToCubicSmoothRel;
    public static SvgPathSegType CurveToQuadraticSmoothAbs;
    public static SvgPathSegType CurveToQuadraticSmoothRel;
}
public enum SharpVectors.Dom.Svg.SvgPathType : Enum {
    public int value__;
    public static SvgPathType None;
    public static SvgPathType MoveTo;
    public static SvgPathType LineTo;
    public static SvgPathType CurveTo;
    public static SvgPathType ArcTo;
    public static SvgPathType Close;
}
public class SharpVectors.Dom.Svg.SvgPointF : ValueType {
    public static SvgPointF Empty;
    private double _x;
    private double _y;
    private bool _notEmpty;
    public bool IsEmpty { get; }
    public float X { get; }
    public float Y { get; }
    public double ValueX { get; public set; }
    public double ValueY { get; public set; }
    public SvgPointF(float x, float y);
    public SvgPointF(double x, double y);
    private static SvgPointF();
    public bool get_IsEmpty();
    public float get_X();
    public float get_Y();
    public double get_ValueX();
    public void set_ValueX(double value);
    public double get_ValueY();
    public void set_ValueY(double value);
    public static SvgPointF op_Addition(SvgPointF pt, SvgSizeF sz);
    public static SvgPointF op_Subtraction(SvgPointF pt, SvgSizeF sz);
    public static bool op_Equality(SvgPointF left, SvgPointF right);
    public static bool op_Inequality(SvgPointF left, SvgPointF right);
    public double Distance(SvgPointF point);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SvgPointF other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static SvgPointF Add(SvgPointF pt, SvgSizeF sz);
    public static SvgPointF Subtract(SvgPointF pt, SvgSizeF sz);
}
public enum SharpVectors.Dom.Svg.SvgPreserveAspectRatioType : Enum {
    public int value__;
    public static SvgPreserveAspectRatioType Unknown;
    public static SvgPreserveAspectRatioType None;
    public static SvgPreserveAspectRatioType XMinYMin;
    public static SvgPreserveAspectRatioType XMidYMin;
    public static SvgPreserveAspectRatioType XMaxYMin;
    public static SvgPreserveAspectRatioType XMinYMid;
    public static SvgPreserveAspectRatioType XMidYMid;
    public static SvgPreserveAspectRatioType XMaxYMid;
    public static SvgPreserveAspectRatioType XMinYMax;
    public static SvgPreserveAspectRatioType XMidYMax;
    public static SvgPreserveAspectRatioType XMaxYMax;
}
public class SharpVectors.Dom.Svg.SvgRectF : ValueType {
    public static SvgRectF Empty;
    private float _x;
    private float _y;
    private float _width;
    private float _height;
    public SvgPointF Location { get; public set; }
    public SvgSizeF Size { get; public set; }
    public float X { get; public set; }
    public float Y { get; public set; }
    public float Width { get; public set; }
    public float Height { get; public set; }
    public float Left { get; }
    public float Top { get; }
    public float Right { get; }
    public float Bottom { get; }
    public bool IsEmpty { get; }
    public SvgRectF(float x, float y, float width, float height);
    public SvgRectF(SvgPointF location, SvgSizeF size);
    private static SvgRectF();
    public static SvgRectF Create(float left, float top, float right, float bottom);
    public SvgPointF get_Location();
    public void set_Location(SvgPointF value);
    public SvgSizeF get_Size();
    public void set_Size(SvgSizeF value);
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    public float get_Width();
    public void set_Width(float value);
    public float get_Height();
    public void set_Height(float value);
    public float get_Left();
    public float get_Top();
    public float get_Right();
    public float get_Bottom();
    public bool get_IsEmpty();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SvgRectF other);
    public bool Contains(float x, float y);
    public bool Contains(SvgPointF pt);
    public bool Contains(SvgRectF rect);
    public virtual int GetHashCode();
    public void Inflate(float x, float y);
    public void Inflate(SvgSizeF size);
    public void Intersect(SvgRectF rect);
    public void Intersection(SvgRectF rect);
    public bool Intersects(SvgRectF rect);
    public void Offset(SvgPointF pos);
    public void Offset(float x, float y);
    public virtual string ToString();
    public static bool op_Equality(SvgRectF left, SvgRectF right);
    public static bool op_Inequality(SvgRectF left, SvgRectF right);
    public static SvgRectF Inflate(SvgRectF rect, float x, float y);
    public static SvgRectF Intersection(SvgRectF a, SvgRectF b);
    public static SvgRectF Union(SvgRectF a, SvgRectF b);
    private Single[] GetHashValues();
}
public enum SharpVectors.Dom.Svg.SvgRenderingHint : Enum {
    public int value__;
    public static SvgRenderingHint None;
    public static SvgRenderingHint Shape;
    public static SvgRenderingHint Text;
    public static SvgRenderingHint Image;
    public static SvgRenderingHint Clipping;
    public static SvgRenderingHint Masking;
    public static SvgRenderingHint Animation;
    public static SvgRenderingHint Containment;
    public static SvgRenderingHint Marker;
}
public class SharpVectors.Dom.Svg.SvgSizeF : ValueType {
    public static SvgSizeF Empty;
    private float _width;
    private float _height;
    public bool IsEmpty { get; }
    public float Width { get; public set; }
    public float Height { get; public set; }
    public SvgSizeF(float width, float height);
    public SvgSizeF(SvgSizeF size);
    public SvgSizeF(SvgPointF pt);
    private static SvgSizeF();
    public static SvgSizeF op_Addition(SvgSizeF sz1, SvgSizeF sz2);
    public static SvgSizeF op_Subtraction(SvgSizeF sz1, SvgSizeF sz2);
    public static bool op_Equality(SvgSizeF sz1, SvgSizeF sz2);
    public static bool op_Inequality(SvgSizeF sz1, SvgSizeF sz2);
    public static SvgPointF op_Explicit(SvgSizeF size);
    public bool get_IsEmpty();
    public float get_Width();
    public void set_Width(float value);
    public float get_Height();
    public void set_Height(float value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SvgSizeF other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static SvgSizeF Add(SvgSizeF sz1, SvgSizeF sz2);
    public static SvgSizeF Subtract(SvgSizeF sz1, SvgSizeF sz2);
}
public enum SharpVectors.Dom.Svg.SvgTextPathMethod : Enum {
    public int value__;
    public static SvgTextPathMethod Align;
    public static SvgTextPathMethod Stretch;
}
public enum SharpVectors.Dom.Svg.SvgTextPathSpacing : Enum {
    public int value__;
    public static SvgTextPathSpacing Exact;
    public static SvgTextPathSpacing Auto;
}
public class SharpVectors.Dom.Svg.SvgTransformF : object {
    private float m11;
    private float m12;
    private float m21;
    private float m22;
    private float dx;
    private float dy;
    public Single[] Elements { get; }
    public bool IsIdentity { get; }
    public bool IsInvertible { get; }
    public float OffsetX { get; }
    public float OffsetY { get; }
    private double SumValues { get; }
    public SvgTransformF(SvgRectF rect, SvgPointF[] plgpts);
    public SvgTransformF(Single[] elements);
    public SvgTransformF(float m11, float m12, float m21, float m22, float dx, float dy);
    public SvgTransformF(SvgTransformF source);
    public Single[] get_Elements();
    public bool get_IsIdentity();
    public bool get_IsInvertible();
    public float get_OffsetX();
    public float get_OffsetY();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Invert();
    public void Multiply(SvgTransformF matrix);
    public void Multiply(SvgTransformF matrix, SvgTransformOrder order);
    public void Reset();
    public void Rotate(float angle);
    public void Rotate(float angle, SvgTransformOrder order);
    public void RotateAt(float angle, SvgPointF point);
    public void RotateAt(float angle, SvgPointF point, SvgTransformOrder order);
    public void Scale(float scaleX, float scaleY);
    public void Scale(float scaleX, float scaleY, SvgTransformOrder order);
    public void Shear(float shearX, float shearY);
    public void Shear(float shearX, float shearY, SvgTransformOrder order);
    public void Translate(float offsetX, float offsetY);
    public void Translate(float offsetX, float offsetY, SvgTransformOrder order);
    public void Transform(float x, float y, Single& ox, Single& oy);
    public void ReverseTransform(float x, float y, Single& ox, Single& oy);
    public void TransformPoints(SvgPointF[] pts);
    public void TransformVectors(SvgPointF[] pts);
    private double get_SumValues();
    private void Multiply(SvgTransformF a, SvgTransformF b);
    private void MapRectToRect(SvgRectF rect, SvgPointF[] plgpts);
    public SvgTransformF Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
public enum SharpVectors.Dom.Svg.SvgTransformOrder : Enum {
    public int value__;
    public static SvgTransformOrder Prepend;
    public static SvgTransformOrder Append;
}
public enum SharpVectors.Dom.Svg.SvgTransformType : Enum {
    public short value__;
    public static SvgTransformType Unknown;
    public static SvgTransformType Matrix;
    public static SvgTransformType Translate;
    public static SvgTransformType Scale;
    public static SvgTransformType Rotate;
    public static SvgTransformType SkewX;
    public static SvgTransformType SkewY;
}
public enum SharpVectors.Dom.Svg.SvgUnitType : Enum {
    public ushort value__;
    public static SvgUnitType Unknown;
    public static SvgUnitType UserSpaceOnUse;
    public static SvgUnitType ObjectBoundingBox;
}
public enum SharpVectors.Dom.Svg.SvgZoomAndPanType : Enum {
    public int value__;
    public static SvgZoomAndPanType Unknown;
    public static SvgZoomAndPanType Disable;
    public static SvgZoomAndPanType Magnify;
}
public static class SharpVectors.Dom.SvgConstants : object {
    public static string FileExt;
    public static string FileExtZ;
    public static string PublicId;
    public static string SystemId;
    public static string NamespaceUri;
    public static string Version;
    public static int GZipMagic;
    public static string GZipSignature;
    public static string SvgSignature;
    public static string XmlSignature;
    public static string MouseEventsType;
    public static string UIEventsType;
    public static string SvgEventsType;
    public static string KeyEventsType;
    public static string KeydownEventType;
    public static string KeypressEventType;
    public static string KeyupEventType;
    public static string ClickEventType;
    public static string MouseupEventType;
    public static string MousedownEventType;
    public static string MousemoveEventType;
    public static string MouseoutEventType;
    public static string MouseoverEventType;
    public static string DomfocusinEventType;
    public static string DomfocusoutEventType;
    public static string DomactivateEventType;
    public static string SvgLoadEventType;
    public static string SvgUnloadEventType;
    public static string SvgAbortEventType;
    public static string SvgErrorEventType;
    public static string SvgResizeEventType;
    public static string SvgScrollEventType;
    public static string SvgZoomEventType;
    public static string OnKeyupAttribute;
    public static string OnKeydownAttribute;
    public static string OnKeypressAttribute;
    public static string OnAbortAttribute;
    public static string OnActivateAttribute;
    public static string OnBeginAttribute;
    public static string OnClickAttribute;
    public static string OnEndAttribute;
    public static string OnErrorAttribute;
    public static string OnFocusinAttribute;
    public static string OnFocusoutAttribute;
    public static string OnLoadAttribute;
    public static string OnMousedownAttribute;
    public static string OnMousemoveAttribute;
    public static string OnMouseoutAttribute;
    public static string OnMouseoverAttribute;
    public static string OnMouseupAttribute;
    public static string OnRepeatAttribute;
    public static string OnResizeAttribute;
    public static string OnScrollAttribute;
    public static string OnUnloadAttribute;
    public static string OnZoomAttribute;
    public static string FeatureOrgW3cSvg;
    public static string FeatureOrgW3cSvgStatic;
    public static string FeatureOrgW3cSvgAnimation;
    public static string FeatureOrgW3cSvgDynamic;
    public static string FeatureOrgW3cSvgAll;
    public static string FeatureOrgW3cDomSvg;
    public static string FeatureOrgW3cDomSvgStatic;
    public static string FeatureOrgW3cDomSvgAnimation;
    public static string FeatureOrgW3cDomSvgDynamic;
    public static string FeatureOrgW3cDomSvgAll;
    public static string FeatureSvg;
    public static string FeatureSvgDom;
    public static string FeatureSvgStatic;
    public static string FeatureSvgDomStatic;
    public static string FeatureSvgAnimation;
    public static string FeatureSvgDomAnimation;
    public static string FeatureSvgDynamic;
    public static string FeatureSvgDomDynamic;
    public static string FeatureCoreAttribute;
    public static string FeatureStructure;
    public static string FeatureBasicStructure;
    public static string FeatureContainerAttribute;
    public static string FeatureConditionalProcessing;
    public static string FeatureImage;
    public static string FeatureStyle;
    public static string FeatureViewportAttribute;
    public static string FeatureShape;
    public static string FeatureText;
    public static string FeatureBasicText;
    public static string FeaturePaintAttribute;
    public static string FeatureBasicPaintAttribute;
    public static string FeatureOpacityAttribute;
    public static string FeatureGraphicsAttribute;
    public static string FeatureBasicGraphicsAttribute;
    public static string FeatureMarker;
    public static string FeatureColorProfile;
    public static string FeatureGradient;
    public static string FeaturePattern;
    public static string FeatureClip;
    public static string FeatureBasicClip;
    public static string FeatureMask;
    public static string FeatureFilter;
    public static string FeatureBasicFilter;
    public static string FeatureDocumentEventsAttribute;
    public static string FeatureGraphicalEventsAttribute;
    public static string FeatureAnimationEventsAttribute;
    public static string FeatureCursor;
    public static string FeatureHyperlinking;
    public static string FeatureXlink;
    public static string FeatureExternalResourcesRequired;
    public static string FeatureView;
    public static string FeatureScript;
    public static string FeatureAnimation;
    public static string FeatureFont;
    public static string FeatureBasicFont;
    public static string FeatureExtensibility;
    public static string TagA;
    public static string TagAltGlyph;
    public static string TagAltGlyphDef;
    public static string TagAltGlyphItem;
    public static string TagAnimate;
    public static string TagAnimateColor;
    public static string TagAnimateMotion;
    public static string TagAnimateTransform;
    public static string TagCircle;
    public static string TagClipPath;
    public static string TagColorProfile;
    public static string TagCursor;
    public static string TagDefinitionSrc;
    public static string TagDefs;
    public static string TagDesc;
    public static string TagEllipse;
    public static string TagFeBlend;
    public static string TagFeColorMatrix;
    public static string TagFeComponentTransfer;
    public static string TagFeComposite;
    public static string TagFeConvolveMatrix;
    public static string TagFeDiffuseLighting;
    public static string TagFeDisplacementMap;
    public static string TagFeDistantLight;
    public static string TagFeFlood;
    public static string TagFeFuncA;
    public static string TagFeFuncB;
    public static string TagFeFuncG;
    public static string TagFeFuncR;
    public static string TagFeGaussianBlur;
    public static string TagFeImage;
    public static string TagFeMergeNode;
    public static string TagFeMerge;
    public static string TagFeMorphology;
    public static string TagFeOffset;
    public static string TagFePointLight;
    public static string TagFeSpecularLighting;
    public static string TagFeSpotLight;
    public static string TagFeTile;
    public static string TagFeTurbulence;
    public static string TagFilter;
    public static string TagFont;
    public static string TagFontFace;
    public static string TagFontFaceFormat;
    public static string TagFontFaceName;
    public static string TagFontFaceSrc;
    public static string TagFontFaceUri;
    public static string TagForeignObject;
    public static string TagG;
    public static string TagGlyph;
    public static string TagGlyphRef;
    public static string TagHkern;
    public static string TagImage;
    public static string TagLine;
    public static string TagLinearGradient;
    public static string TagMarker;
    public static string TagMask;
    public static string TagMetadata;
    public static string TagMissingGlyph;
    public static string TagMpath;
    public static string TagPath;
    public static string TagPattern;
    public static string TagPolygon;
    public static string TagPolyline;
    public static string TagRadialGradient;
    public static string TagRect;
    public static string TagScript;
    public static string TagSet;
    public static string TagSolidColor;
    public static string TagStop;
    public static string TagStyle;
    public static string TagSvg;
    public static string TagSwitch;
    public static string TagSymbol;
    public static string TagTextArea;
    public static string TagTextPath;
    public static string TagText;
    public static string TagTitle;
    public static string TagTref;
    public static string TagTspan;
    public static string TagUse;
    public static string TagView;
    public static string TagVkern;
    public static string AttrAccentHeight;
    public static string AttrAccumulate;
    public static string AttrAdditive;
    public static string AttrAmplitude;
    public static string AttrArabicForm;
    public static string AttrAscent;
    public static string AttrAzimuth;
    public static string AttrAlphabetic;
    public static string AttrAttributeName;
    public static string AttrAttributeType;
    public static string AttrBaseFrequency;
    public static string AttrBaseProfile;
    public static string AttrBegin;
    public static string AttrBbox;
    public static string AttrBias;
    public static string AttrBy;
    public static string AttrCalcMode;
    public static string AttrCapHeight;
    public static string AttrClass;
    public static string AttrClipPath;
    public static string AttrClipPathUnits;
    public static string AttrColorInterpolation;
    public static string AttrColorRendering;
    public static string AttrContentScriptType;
    public static string AttrContentStyleType;
    public static string AttrCx;
    public static string AttrCy;
    public static string AttrDescent;
    public static string AttrDiffuseConstant;
    public static string AttrDivisor;
    public static string AttrDur;
    public static string AttrDx;
    public static string AttrDy;
    public static string AttrD;
    public static string AttrEdgeMode;
    public static string AttrElevation;
    public static string AttrEnableBackground;
    public static string AttrEnd;
    public static string AttrExponent;
    public static string AttrExternalResourcesRequired;
    public static string AttrFill;
    public static string AttrFillOpacity;
    public static string AttrFillRule;
    public static string AttrFilter;
    public static string AttrFilterRes;
    public static string AttrFilterUnits;
    public static string AttrFloodColor;
    public static string AttrFloodOpacity;
    public static string AttrFormat;
    public static string AttrFontFamily;
    public static string AttrFontSize;
    public static string AttrFontStretch;
    public static string AttrFontStyle;
    public static string AttrFontVariant;
    public static string AttrFontWeight;
    public static string AttrFrom;
    public static string AttrFx;
    public static string AttrFy;
    public static string AttrG1;
    public static string AttrG2;
    public static string AttrGlyphName;
    public static string AttrGlyphRef;
    public static string AttrGradientTransform;
    public static string AttrGradientUnits;
    public static string AttrHanging;
    public static string AttrHeight;
    public static string AttrHorizAdvX;
    public static string AttrHorizOriginX;
    public static string AttrHorizOriginY;
    public static string AttrId;
    public static string AttrIdeographic;
    public static string AttrImageRendering;
    public static string AttrIn2;
    public static string AttrIntercept;
    public static string AttrIn;
    public static string AttrK;
    public static string AttrK1;
    public static string AttrK2;
    public static string AttrK3;
    public static string AttrK4;
    public static string AttrKernelMatrix;
    public static string AttrKernelUnitLength;
    public static string AttrKerning;
    public static string AttrKeyPoints;
    public static string AttrKeySplines;
    public static string AttrKeyTimes;
    public static string AttrLang;
    public static string AttrLengthAdjust;
    public static string AttrLightingColor;
    public static string AttrLimitingConeAngle;
    public static string AttrLocal;
    public static string AttrMarkerHeight;
    public static string AttrMarkerUnits;
    public static string AttrMarkerWidth;
    public static string AttrMask;
    public static string AttrMaskContentUnits;
    public static string AttrMaskUnits;
    public static string AttrMathematical;
    public static string AttrMax;
    public static string AttrMedia;
    public static string AttrMethod;
    public static string AttrMin;
    public static string AttrMode;
    public static string AttrName;
    public static string AttrNumOctaves;
    public static string AttrOffset;
    public static string AttrOpacity;
    public static string AttrOperator;
    public static string AttrOrder;
    public static string AttrOrient;
    public static string AttrOrientation;
    public static string AttrOrigin;
    public static string AttrOverlinePosition;
    public static string AttrOverlineThickness;
    public static string AttrPanose_1;
    public static string AttrPath;
    public static string AttrPathLength;
    public static string AttrPatternContentUnits;
    public static string AttrPatternTransform;
    public static string AttrPatternUnits;
    public static string AttrPoints;
    public static string AttrPointsAtX;
    public static string AttrPointsAtY;
    public static string AttrPointsAtZ;
    public static string AttrPreserveAlpha;
    public static string AttrPreserveAspectRatio;
    public static string AttrPrimitiveUnits;
    public static string AttrRadius;
    public static string AttrRefX;
    public static string AttrRefY;
    public static string AttrRenderingIntent;
    public static string AttrRepeatCount;
    public static string AttrRepeatDur;
    public static string AttrRequiredFeatures;
    public static string AttrRequiredExtensions;
    public static string AttrResult;
    public static string AttrRestart;
    public static string AttrRx;
    public static string AttrRy;
    public static string AttrR;
    public static string AttrRotate;
    public static string AttrScale;
    public static string AttrSeed;
    public static string AttrShapeRendering;
    public static string AttrSlope;
    public static string AttrSnapshotTime;
    public static string AttrSpace;
    public static string AttrSpacing;
    public static string AttrSpecularConstant;
    public static string AttrSpecularExponent;
    public static string AttrSpreadMethod;
    public static string AttrStartOffset;
    public static string AttrStdDeviation;
    public static string AttrStemh;
    public static string AttrStemv;
    public static string AttrStitchTiles;
    public static string AttrStopColor;
    public static string AttrStopOpacity;
    public static string AttrStrikethroughPosition;
    public static string AttrStrikethroughThickness;
    public static string AttrString;
    public static string AttrStroke;
    public static string AttrStrokeDasharray;
    public static string AttrStrokeDashoffset;
    public static string AttrStrokeLinecap;
    public static string AttrStrokeLinejoin;
    public static string AttrStrokeMiterlimit;
    public static string AttrStrokeOpacity;
    public static string AttrStrokeWidth;
    public static string AttrStyle;
    public static string AttrSurfaceScale;
    public static string AttrSystemLanguage;
    public static string AttrTableValues;
    public static string AttrTarget;
    public static string AttrTargetX;
    public static string AttrTargetY;
    public static string AttrTextAnchor;
    public static string AttrTextLength;
    public static string AttrTextRendering;
    public static string AttrTitle;
    public static string AttrTo;
    public static string AttrTransform;
    public static string AttrType;
    public static string AttrU1;
    public static string AttrU2;
    public static string AttrUnderlinePosition;
    public static string AttrUnderlineThickness;
    public static string AttrUnicode;
    public static string AttrUnicodeRange;
    public static string AttrUnitsPerEm;
    public static string AttrVAlphabetic;
    public static string AttrVHanging;
    public static string AttrVIdeographic;
    public static string AttrVMathematical;
    public static string AttrValues;
    public static string AttrVersion;
    public static string AttrVertAdvY;
    public static string AttrVertOriginX;
    public static string AttrVertOriginY;
    public static string AttrViewBox;
    public static string AttrViewTarget;
    public static string AttrWidth;
    public static string AttrWidths;
    public static string AttrX1;
    public static string AttrX2;
    public static string AttrX;
    public static string AttrXChannelSelector;
    public static string AttrXHeight;
    public static string AttrY1;
    public static string AttrY2;
    public static string AttrY;
    public static string AttrYChannelSelector;
    public static string AttrZ;
    public static string AttrZoomAndPan;
    public static string ValWeight100;
    public static string ValWeight200;
    public static string ValWeight300;
    public static string ValWeight400;
    public static string ValWeight500;
    public static string ValWeight600;
    public static string ValWeight700;
    public static string ValWeight800;
    public static string ValWeight900;
    public static string ValAbsoluteColorimetric;
    public static string ValAlign;
    public static string ValAll;
    public static string ValArithmetic;
    public static string ValAtop;
    public static string ValAuto;
    public static string ValA;
    public static string ValBackgroundAlpha;
    public static string ValBackgroundImage;
    public static string ValBevel;
    public static string ValBolder;
    public static string ValBold;
    public static string ValButt;
    public static string ValB;
    public static string ValComposite;
    public static string ValCrispEdges;
    public static string ValCrosshair;
    public static string ValDarken;
    public static string ValDefault;
    public static string ValDigitOne;
    public static string ValDilate;
    public static string ValDisable;
    public static string ValDiscrete;
    public static string ValDuplicate;
    public static string ValEnd;
    public static string ValErode;
    public static string ValEvenOdd;
    public static string ValExact;
    public static string ValEResize;
    public static string ValFalse;
    public static string ValFillPaint;
    public static string ValFlood;
    public static string ValFractalNoise;
    public static string ValGamma;
    public static string ValGeometricPrecision;
    public static string ValG;
    public static string ValHelp;
    public static string ValHueRotate;
    public static string ValHundredPercent;
    public static string ValH;
    public static string ValIdentity;
    public static string ValInitial;
    public static string ValIn;
    public static string ValIsolated;
    public static string ValItalic;
    public static string ValLighten;
    public static string ValLighter;
    public static string ValLinearRgb;
    public static string ValLinear;
    public static string ValLuminanceToAlpha;
    public static string ValMagnify;
    public static string ValMatrix;
    public static string ValMedial;
    public static string ValMeet;
    public static string ValMiddle;
    public static string ValMiter;
    public static string ValMove;
    public static string ValMultiply;
    public static string ValNew;
    public static string ValNeResize;
    public static string ValNinety;
    public static string ValNone;
    public static string ValNonZero;
    public static string ValNormal;
    public static string ValNoStitch;
    public static string ValNwResize;
    public static string ValNResize;
    public static string ValObjectBoundingBox;
    public static string ValOblique;
    public static string ValOne;
    public static string ValOpaque;
    public static string ValOptimizeLegibility;
    public static string ValOptimizeQuality;
    public static string ValOptimizeSpeed;
    public static string ValOut;
    public static string ValOver;
    public static string ValPaced;
    public static string ValPad;
    public static string ValPerceptual;
    public static string ValPointer;
    public static string ValPreserve;
    public static string ValReflect;
    public static string ValRelativeColorimetric;
    public static string ValRepeat;
    public static string ValRound;
    public static string ValR;
    public static string ValSaturate;
    public static string ValSaturation;
    public static string ValScreen;
    public static string ValSeResize;
    public static string ValSlice;
    public static string ValSourceAlpha;
    public static string ValSourceGraphic;
    public static string ValSpacingAndGlyphs;
    public static string ValSpacing;
    public static string ValSquare;
    public static string ValSrgb;
    public static string ValStart;
    public static string ValStitch;
    public static string ValStretch;
    public static string ValStrokePaint;
    public static string ValStrokeWidth;
    public static string ValSwResize;
    public static string ValSResize;
    public static string ValTable;
    public static string ValTerminal;
    public static string ValText;
    public static string ValTranslate;
    public static string ValTrue;
    public static string ValTurbulence;
    public static string ValUserSpaceOnUse;
    public static string ValV;
    public static string ValWait;
    public static string ValWrap;
    public static string ValWResize;
    public static string ValXmaxYmax;
    public static string ValXmaxYmid;
    public static string ValXmaxYmin;
    public static string ValXmidYmax;
    public static string ValXmidYmid;
    public static string ValXmidYmin;
    public static string ValXminYmax;
    public static string ValXminYmid;
    public static string ValXminYmin;
    public static string ValXor;
    public static string ValZeroPercent;
    public static string ValZero;
    public static string DefCircleCx;
    public static string DefCircleCy;
    public static string DefClipPathClipPathUnits;
    public static string DefComponentTransferFunctionAmplitude;
    public static string DefComponentTransferFunctionExponent;
    public static string DefComponentTransferFunctionIntercept;
    public static string DefComponentTransferFunctionOffset;
    public static string DefComponentTransferFunctionSlope;
    public static string DefComponentTransferFunctionTableValues;
    public static string DefCursorX;
    public static string DefCursorY;
    public static string DefEllipseCx;
    public static string DefEllipseCy;
    public static string DefFeCompositeK1;
    public static string DefFeCompositeK2;
    public static string DefFeCompositeK3;
    public static string DefFeCompositeK4;
    public static string DefFeCompositeOperator;
    public static string DefFeConvolveMatrixEdgeMode;
    public static string DefFeDiffuseLightingDiffuseConstant;
    public static string DefFeDiffuseLightingSurfaceScale;
    public static string DefFeDisplacementMapScale;
    public static string DefFeDistantLightAzimuth;
    public static string DefFeDistantLightElevation;
    public static string DefFePointLightX;
    public static string DefFePointLightY;
    public static string DefFePointLightZ;
    public static string DefFeSpecularLightingSpecularConstant;
    public static string DefFeSpecularLightingSpecularExponent;
    public static string DefFeSpecularLightingSurfaceScale;
    public static string DefFeSpotLightLimitingConeAngle;
    public static string DefFeSpotLightPointsAtX;
    public static string DefFeSpotLightPointsAtY;
    public static string DefFeSpotLightPointsAtZ;
    public static string DefFeSpotLightSpecularExponent;
    public static string DefFeSpotLightX;
    public static string DefFeSpotLightY;
    public static string DefFeSpotLightZ;
    public static string DefFeTurbulenceNumOctaves;
    public static string DefFeTurbulenceSeed;
    public static string DefFilterFilterUnits;
    public static string DefFilterHeight;
    public static string DefFilterPrimitiveX;
    public static string DefFilterPrimitiveY;
    public static string DefFilterPrimitiveWidth;
    public static string DefFilterPrimitiveHeight;
    public static string DefFilterPrimitiveUnits;
    public static string DefFilterWidth;
    public static string DefFilterX;
    public static string DefFilterY;
    public static string DefFontFaceFontStretch;
    public static string DefFontFaceFontStyle;
    public static string DefFontFaceFontVariant;
    public static string DefFontFaceFontWeight;
    public static string DefFontFacePanose_1;
    public static string DefFontFaceSlope;
    public static string DefFontFaceUnitsPerEm;
    public static string DefForeignObjectX;
    public static string DefForeignObjectY;
    public static string DefHorizOriginX;
    public static string DefHorizOriginY;
    public static string DefKernK;
    public static string DefImageX;
    public static string DefImageY;
    public static string DefLineX1;
    public static string DefLineX2;
    public static string DefLineY1;
    public static string DefLineY2;
    public static string DefLinearGradientX1;
    public static string DefLinearGradientX2;
    public static string DefLinearGradientY1;
    public static string DefLinearGradientY2;
    public static string DefMarkerMarkerHeight;
    public static string DefMarkerMarkerUnits;
    public static string DefMarkerMarkerWidth;
    public static string DefMarkerOrient;
    public static string DefMarkerRefX;
    public static string DefMarkerRefY;
    public static string DefMaskHeight;
    public static string DefMaskMaskUnits;
    public static string DefMaskWidth;
    public static string DefMaskX;
    public static string DefMaskY;
    public static string DefPatternX;
    public static string DefPatternY;
    public static string DefPatternWidth;
    public static string DefPatternHeight;
    public static string DefRadialGradientCx;
    public static string DefRadialGradientCy;
    public static string DefRadialGradientR;
    public static string DefRectX;
    public static string DefRectY;
    public static string DefScriptTypeEcmascript;
    public static string DefScriptTypeApplicationEcmascript;
    public static string DefScriptTypeJavascript;
    public static string DefScriptTypeApplicationJavascript;
    public static string DefScriptType;
    public static string DefScriptTypeJava;
    public static string DefSvgX;
    public static string DefSvgY;
    public static string DefSvgHeight;
    public static string DefSvgWidth;
    public static string DefTextPathStartOffset;
    public static string DefUseX;
    public static string DefUseY;
    public static string DefUseWidth;
    public static string DefUseHeight;
    public static string TransformTranslate;
    public static string TransformRotate;
    public static string TransformScale;
    public static string TransformSkewx;
    public static string TransformSkewy;
    public static string TransformMatrix;
    public static string PathArc;
    public static string PathClose;
    public static string PathCubicTo;
    public static string PathMove;
    public static string PathLineTo;
    public static string PathVerticalLineTo;
    public static string PathHorizontalLineTo;
    public static string PathQuadTo;
    public static string PathSmoothQuadTo;
    public static string EventClick;
    public static string EventKeydown;
    public static string EventKeypress;
    public static string EventKeyup;
    public static string EventMousedown;
    public static string EventMousemove;
    public static string EventMouseout;
    public static string EventMouseover;
    public static string EventMouseup;
}
public static class SharpVectors.Dom.Utils.PathUtils : object {
    public static string Combine(Assembly assembly, String[] paths);
    public static string GetAssemblyPath(Assembly assembly);
    public static string GetAssemblyFileName(Assembly assembly);
    private static string CombineInternal(string location, String[] paths);
    private static string GetAssemblyPathInternal(Assembly assembly, string location);
    private static string GetBaseDirectory();
}
public interface SharpVectors.Dom.Views.IAbstractView {
    public IDocumentView Document { get; }
    public abstract virtual IDocumentView get_Document();
}
public interface SharpVectors.Dom.Views.IDocumentView {
    public IAbstractView DefaultView { get; }
    public abstract virtual IAbstractView get_DefaultView();
}
public static class SharpVectors.Dom.XmlConstants : object {
    public static string XmlNamespaceUri;
    public static string XmlnsNamespaceUri;
    public static string XlinkNamespaceUri;
    public static string XmlEventsNamespaceUri;
    public static string XmlPrefix;
    public static string XmlnsPrefix;
    public static string XlinkPrefix;
    public static string XmlNamespacePrefix;
    public static string BaseAttribute;
    public static string IdAttribute;
    public static string LangAttribute;
    public static string SpaceAttribute;
    public static string BaseQname;
    public static string IdQname;
    public static string LangQname;
    public static string SpaceQname;
    public static string DefaultValue;
    public static string PreserveValue;
    public static string EventsEventAttribute;
    public static string XlinkHash;
    public static string XlinkHrefAttribute;
    public static string XlinkHrefQname;
    private static XmlConstants();
}
public static class SharpVectors.DynamicCast : object {
    public static bool Cast(B baseObject, D& derivedObject);
}
public class SharpVectors.Net.CacheInfo : object {
    private DateTime _expires;
    private Uri _cachedUri;
    private DateTime _lastModified;
    private string _etag;
    private string _contentType;
    public DateTime Expires { get; }
    public Uri CachedUri { get; }
    public DateTime LastModified { get; }
    public string ETag { get; }
    public string ContentType { get; }
    public CacheInfo(DateTime expires, string etag, DateTime lastModified, Uri cachedUri, string contentType);
    public DateTime get_Expires();
    public Uri get_CachedUri();
    public DateTime get_LastModified();
    public string get_ETag();
    public string get_ContentType();
}
public static class SharpVectors.Net.DataSecurityProtocols : object {
    private static bool _isIntialized;
    public static void Initialize();
}
public class SharpVectors.Net.DataWebRequest : WebRequest {
    private Uri _requestUri;
    public Uri RequestUri { get; }
    public DataWebRequest(Uri uri);
    public static bool Register();
    public sealed virtual WebRequest Create(Uri uri);
    public virtual Uri get_RequestUri();
    public virtual WebResponse GetResponse();
}
public class SharpVectors.Net.DataWebResponse : WebResponse {
    private static Regex _reData;
    private static Regex _reSpaceRemover;
    private static Regex _reCharsetFinder;
    private Encoding _contentEncoding;
    private string _contentType;
    private Uri _responseUri;
    private Byte[] _decodedData;
    public long ContentLength { get; }
    public Encoding ContentEncoding { get; }
    public string ContentType { get; }
    public Uri ResponseUri { get; }
    internal DataWebResponse(Uri uri);
    private static DataWebResponse();
    public virtual long get_ContentLength();
    public Encoding get_ContentEncoding();
    public virtual string get_ContentType();
    public virtual Uri get_ResponseUri();
    public virtual Stream GetResponseStream();
}
public class SharpVectors.Net.ExtendedHttpWebRequest : WebRequest {
    private static ICacheManager _cacheManager;
    private Uri _requestUri;
    public Uri RequestUri { get; }
    public static ICacheManager CacheManager { get; public set; }
    public ExtendedHttpWebRequest(Uri uri);
    public virtual Uri get_RequestUri();
    public static ICacheManager get_CacheManager();
    public static void set_CacheManager(ICacheManager value);
    public static bool Register();
    public virtual WebResponse GetResponse();
    private WebRequest GetRequest(CacheInfo cacheInfo);
    private WebResponse GetResponse(WebRequest request, CacheInfo cacheInfo);
    private CacheInfo ProcessResponse(WebResponse response);
    private Stream ProcessResponseStream(WebResponse response);
}
public class SharpVectors.Net.ExtendedHttpWebRequestCreator : object {
    private sealed virtual override WebRequest System.Net.IWebRequestCreate.Create(Uri uri);
    public ExtendedHttpWebRequest Create(Uri uri);
}
public class SharpVectors.Net.ExtendedHttpWebResponse : WebResponse {
    private Uri _responseUri;
    private Stream _responseStream;
    private CacheInfo _cacheInfo;
    private WebResponse _response;
    public string ContentType { get; }
    public Uri ResponseUri { get; }
    public ExtendedHttpWebResponse(Uri responseUri, WebResponse response, Stream responseStream, CacheInfo cacheInfo);
    public virtual Stream GetResponseStream();
    public virtual string get_ContentType();
    public virtual Uri get_ResponseUri();
}
public interface SharpVectors.Net.ICacheManager {
    public abstract virtual CacheInfo GetCacheInfo(Uri uri);
    public abstract virtual void SetCacheInfo(Uri uri, CacheInfo cacheInfo, Stream stream);
}
public class SharpVectors.Net.NoCacheManager : object {
    public sealed virtual CacheInfo GetCacheInfo(Uri uri);
    public sealed virtual void SetCacheInfo(Uri uri, CacheInfo cacheInfo, Stream stream);
}
[DefaultMemberAttribute("Item")]
public class SharpVectors.Polynomials.Polynomial : object {
    public static double Tolerance;
    private Double[] _coefficients;
    private double _s;
    public int Degree { get; }
    public double Item { get; }
    public Double[] Coefficients { get; }
    public Polynomial(Double[] coefficients);
    public Polynomial(Polynomial that);
    private static Polynomial();
    public int get_Degree();
    public double get_Item(int index);
    public Double[] get_Coefficients();
    public virtual double Evaluate(double x);
    public double Simpson(double min, double max);
    public double Romberg(double min, double max);
    protected double Trapezoid(double min, double max, int n);
    private static Tuple`2<double, double> Interpolate(Double[] xs, Double[] ys, int n, int offset, double x);
}
public class SharpVectors.Polynomials.SqrtPolynomial : Polynomial {
    public SqrtPolynomial(Double[] coefficients);
    public virtual double Evaluate(double t);
}
public interface SharpVectors.Scripting.IJsAbstractView {
    public IJsDocumentView document { get; }
    public abstract virtual IJsDocumentView get_document();
}
public interface SharpVectors.Scripting.IJsAttr {
    public string name { get; }
    public bool specified { get; }
    public string value { get; public set; }
    public IJsElement ownerElement { get; }
    public abstract virtual string get_name();
    public abstract virtual bool get_specified();
    public abstract virtual string get_value();
    public abstract virtual void set_value(string value);
    public abstract virtual IJsElement get_ownerElement();
}
public interface SharpVectors.Scripting.IJsCDataSection {
}
public interface SharpVectors.Scripting.IJsCharacterData {
    public string data { get; public set; }
    public ulong length { get; }
    public abstract virtual string get_data();
    public abstract virtual void set_data(string value);
    public abstract virtual ulong get_length();
    public abstract virtual string substringData(ulong offset, ulong count);
    public abstract virtual void appendData(string arg);
    public abstract virtual void insertData(ulong offset, string arg);
    public abstract virtual void deleteData(ulong offset, ulong count);
    public abstract virtual void replaceData(ulong offset, ulong count, string arg);
}
public interface SharpVectors.Scripting.IJsComment {
}
public interface SharpVectors.Scripting.IJsCounter {
    public string identifier { get; }
    public string listStyle { get; }
    public string separator { get; }
    public abstract virtual string get_identifier();
    public abstract virtual string get_listStyle();
    public abstract virtual string get_separator();
}
public interface SharpVectors.Scripting.IJsCssCharsetRule {
    public string encoding { get; public set; }
    public abstract virtual string get_encoding();
    public abstract virtual void set_encoding(string value);
}
public interface SharpVectors.Scripting.IJsCssFontFaceRule {
    public IJsCssStyleDeclaration style { get; }
    public abstract virtual IJsCssStyleDeclaration get_style();
}
public interface SharpVectors.Scripting.IJsCssImportRule {
    public string href { get; }
    public IJsMediaList media { get; }
    public IJsCssStyleSheet styleSheet { get; }
    public abstract virtual string get_href();
    public abstract virtual IJsMediaList get_media();
    public abstract virtual IJsCssStyleSheet get_styleSheet();
}
public interface SharpVectors.Scripting.IJsCssMediaRule {
    public IJsMediaList media { get; }
    public IJsCssRuleList cssRules { get; }
    public abstract virtual ulong insertRule(string rule, ulong index);
    public abstract virtual void deleteRule(ulong index);
    public abstract virtual IJsMediaList get_media();
    public abstract virtual IJsCssRuleList get_cssRules();
}
public interface SharpVectors.Scripting.IJsCssPageRule {
    public string selectorText { get; public set; }
    public IJsCssStyleDeclaration style { get; }
    public abstract virtual string get_selectorText();
    public abstract virtual void set_selectorText(string value);
    public abstract virtual IJsCssStyleDeclaration get_style();
}
public interface SharpVectors.Scripting.IJsCssPrimitiveValue {
    public ushort primitiveType { get; }
    public abstract virtual ushort get_primitiveType();
    public abstract virtual void setFloatValue(ushort unitType, float floatValue);
    public abstract virtual float getFloatValue(ushort unitType);
    public abstract virtual void setStringValue(ushort stringType, string stringValue);
    public abstract virtual string getStringValue();
    public abstract virtual IJsCounter getCounterValue();
    public abstract virtual IJsRect getRectValue();
    public abstract virtual IJsRgbColor getRGBColorValue();
}
public interface SharpVectors.Scripting.IJsCssRule {
    public ushort type { get; }
    public string cssText { get; public set; }
    public IJsCssStyleSheet parentStyleSheet { get; }
    public IJsCssRule parentRule { get; }
    public abstract virtual ushort get_type();
    public abstract virtual string get_cssText();
    public abstract virtual void set_cssText(string value);
    public abstract virtual IJsCssStyleSheet get_parentStyleSheet();
    public abstract virtual IJsCssRule get_parentRule();
}
public interface SharpVectors.Scripting.IJsCssRuleList {
    public ulong length { get; }
    public abstract virtual ulong get_length();
    public abstract virtual IJsCssRule item(ulong index);
}
public interface SharpVectors.Scripting.IJsCssStyleDeclaration {
    public string cssText { get; public set; }
    public ulong length { get; }
    public IJsCssRule parentRule { get; }
    public abstract virtual string get_cssText();
    public abstract virtual void set_cssText(string value);
    public abstract virtual ulong get_length();
    public abstract virtual IJsCssRule get_parentRule();
    public abstract virtual string item(ulong index);
    public abstract virtual string getPropertyValue(string propertyName);
    public abstract virtual IJsCssValue getPropertyCSSValue(string propertyName);
    public abstract virtual string removeProperty(string propertyName);
    public abstract virtual string getPropertyPriority(string propertyName);
    public abstract virtual void setProperty(string propertyName, string value, string priority);
}
public interface SharpVectors.Scripting.IJsCssStyleRule {
    public string selectorText { get; public set; }
    public IJsCssStyleDeclaration style { get; }
    public abstract virtual string get_selectorText();
    public abstract virtual void set_selectorText(string value);
    public abstract virtual IJsCssStyleDeclaration get_style();
}
public interface SharpVectors.Scripting.IJsCssStyleSheet {
    public IJsCssRule ownerRule { get; }
    public IJsCssRuleList cssRules { get; }
    public abstract virtual IJsCssRule get_ownerRule();
    public abstract virtual IJsCssRuleList get_cssRules();
    public abstract virtual ulong insertRule(string rule, ulong index);
    public abstract virtual void deleteRule(ulong index);
}
public interface SharpVectors.Scripting.IJsCssUnknownRule {
}
public interface SharpVectors.Scripting.IJsCssValue {
    public string cssText { get; public set; }
    public ushort cssValueType { get; }
    public abstract virtual string get_cssText();
    public abstract virtual void set_cssText(string value);
    public abstract virtual ushort get_cssValueType();
}
public interface SharpVectors.Scripting.IJsCssValueList {
    public ulong length { get; }
    public abstract virtual ulong get_length();
    public abstract virtual IJsCssValue item(ulong index);
}
public interface SharpVectors.Scripting.IJsDocument {
    public IJsDocumentType doctype { get; }
    public IJsDomImplementation implementation { get; }
    public IJsElement documentElement { get; }
    public abstract virtual IJsDocumentType get_doctype();
    public abstract virtual IJsDomImplementation get_implementation();
    public abstract virtual IJsElement get_documentElement();
    public abstract virtual IJsElement createElement(string tagName);
    public abstract virtual IJsDocumentFragment createDocumentFragment();
    public abstract virtual IJsText createTextNode(string data);
    public abstract virtual IJsComment createComment(string data);
    public abstract virtual IJsCDataSection createCDATASection(string data);
    public abstract virtual IJsProcessingInstruction createProcessingInstruction(string target, string data);
    public abstract virtual IJsAttr createAttribute(string name);
    public abstract virtual IJsEntityReference createEntityReference(string name);
    public abstract virtual IJsNodeList getElementsByTagName(string tagname);
    public abstract virtual IJsNode importNode(IJsNode importedNode, bool deep);
    public abstract virtual IJsElement createElementNS(string namespaceURI, string qualifiedName);
    public abstract virtual IJsAttr createAttributeNS(string namespaceURI, string qualifiedName);
    public abstract virtual IJsNodeList getElementsByTagNameNS(string namespaceURI, string localName);
    public abstract virtual IJsElement getElementById(string elementId);
}
public interface SharpVectors.Scripting.IJsDocumentCss {
    public abstract virtual IJsCssStyleDeclaration getOverrideStyle(IJsElement elt, string pseudoElt);
}
public interface SharpVectors.Scripting.IJsDocumentEvent {
    public abstract virtual IJsEvent createEvent(string eventType);
}
public interface SharpVectors.Scripting.IJsDocumentFragment {
}
public interface SharpVectors.Scripting.IJsDocumentStyle {
    public IJsStyleSheetList styleSheets { get; }
    public abstract virtual IJsStyleSheetList get_styleSheets();
}
public interface SharpVectors.Scripting.IJsDocumentType {
    public string name { get; }
    public IJsNamedNodeMap entities { get; }
    public IJsNamedNodeMap notations { get; }
    public string publicId { get; }
    public string systemId { get; }
    public string internalSubset { get; }
    public abstract virtual string get_name();
    public abstract virtual IJsNamedNodeMap get_entities();
    public abstract virtual IJsNamedNodeMap get_notations();
    public abstract virtual string get_publicId();
    public abstract virtual string get_systemId();
    public abstract virtual string get_internalSubset();
}
public interface SharpVectors.Scripting.IJsDocumentView {
    public IJsAbstractView defaultView { get; }
    public abstract virtual IJsAbstractView get_defaultView();
}
public interface SharpVectors.Scripting.IJsDomImplementation {
    public abstract virtual bool hasFeature(string feature, string version);
    public abstract virtual IJsDocumentType createDocumentType(string qualifiedName, string publicId, string systemId);
    public abstract virtual IJsDocument createDocument(string namespaceURI, string qualifiedName, IJsDocumentType doctype);
}
public interface SharpVectors.Scripting.IJsDomImplementationCss {
    public abstract virtual IJsCssStyleSheet createCSSStyleSheet(string title, string media);
}
public interface SharpVectors.Scripting.IJsDomTimeStamp {
}
public interface SharpVectors.Scripting.IJsElement {
    public string tagName { get; }
    public abstract virtual string get_tagName();
    public abstract virtual string getAttribute(string name);
    public abstract virtual void setAttribute(string name, string value);
    public abstract virtual void removeAttribute(string name);
    public abstract virtual IJsAttr getAttributeNode(string name);
    public abstract virtual IJsAttr setAttributeNode(IJsAttr newAttr);
    public abstract virtual IJsAttr removeAttributeNode(IJsAttr oldAttr);
    public abstract virtual IJsNodeList getElementsByTagName(string name);
    public abstract virtual string getAttributeNS(string namespaceURI, string localName);
    public abstract virtual void setAttributeNS(string namespaceURI, string qualifiedName, string value);
    public abstract virtual void removeAttributeNS(string namespaceURI, string localName);
    public abstract virtual IJsAttr getAttributeNodeNS(string namespaceURI, string localName);
    public abstract virtual IJsAttr setAttributeNodeNS(IJsAttr newAttr);
    public abstract virtual IJsNodeList getElementsByTagNameNS(string namespaceURI, string localName);
    public abstract virtual bool hasAttribute(string name);
    public abstract virtual bool hasAttributeNS(string namespaceURI, string localName);
}
public interface SharpVectors.Scripting.IJsElementCssInlineStyle {
    public IJsCssStyleDeclaration style { get; }
    public abstract virtual IJsCssStyleDeclaration get_style();
}
public interface SharpVectors.Scripting.IJsElementTimeControl {
    public abstract virtual void beginElement();
    public abstract virtual void beginElementAt(float offset);
    public abstract virtual void endElement();
    public abstract virtual void endElementAt(float offset);
}
public interface SharpVectors.Scripting.IJsEntity {
    public string publicId { get; }
    public string systemId { get; }
    public string notationName { get; }
    public abstract virtual string get_publicId();
    public abstract virtual string get_systemId();
    public abstract virtual string get_notationName();
}
public interface SharpVectors.Scripting.IJsEntityReference {
}
public interface SharpVectors.Scripting.IJsEvent {
    public string type { get; }
    public IJsEventTarget target { get; }
    public IJsEventTarget currentTarget { get; }
    public ushort eventPhase { get; }
    public bool bubbles { get; }
    public bool cancelable { get; }
    public IJsDomTimeStamp timeStamp { get; }
    public abstract virtual string get_type();
    public abstract virtual IJsEventTarget get_target();
    public abstract virtual IJsEventTarget get_currentTarget();
    public abstract virtual ushort get_eventPhase();
    public abstract virtual bool get_bubbles();
    public abstract virtual bool get_cancelable();
    public abstract virtual IJsDomTimeStamp get_timeStamp();
    public abstract virtual void stopPropagation();
    public abstract virtual void preventDefault();
    public abstract virtual void initEvent(string eventTypeArg, bool canBubbleArg, bool cancelableArg);
}
public interface SharpVectors.Scripting.IJsEventListener {
    public abstract virtual void handleEvent(IJsEvent evt);
}
public interface SharpVectors.Scripting.IJsEventTarget {
    public abstract virtual void addEventListener(string type, object listener, bool useCapture);
    public abstract virtual void removeEventListener(string type, object listener, bool useCapture);
    public abstract virtual bool dispatchEvent(IJsEvent evt);
}
public interface SharpVectors.Scripting.IJsGetSvgDocument {
    public abstract virtual IJsSvgDocument getSVGDocument();
}
public interface SharpVectors.Scripting.IJsLinkStyle {
    public IJsStyleSheet sheet { get; }
    public abstract virtual IJsStyleSheet get_sheet();
}
public interface SharpVectors.Scripting.IJsMediaList {
    public string mediaText { get; public set; }
    public ulong length { get; }
    public abstract virtual string get_mediaText();
    public abstract virtual void set_mediaText(string value);
    public abstract virtual ulong get_length();
    public abstract virtual string item(ulong index);
    public abstract virtual void deleteMedium(string oldMedium);
    public abstract virtual void appendMedium(string newMedium);
}
public interface SharpVectors.Scripting.IJsMouseEvent {
    public long screenX { get; }
    public long screenY { get; }
    public long clientX { get; }
    public long clientY { get; }
    public bool ctrlKey { get; }
    public bool shiftKey { get; }
    public bool altKey { get; }
    public bool metaKey { get; }
    public ushort button { get; }
    public IJsEventTarget relatedTarget { get; }
    public abstract virtual long get_screenX();
    public abstract virtual long get_screenY();
    public abstract virtual long get_clientX();
    public abstract virtual long get_clientY();
    public abstract virtual bool get_ctrlKey();
    public abstract virtual bool get_shiftKey();
    public abstract virtual bool get_altKey();
    public abstract virtual bool get_metaKey();
    public abstract virtual ushort get_button();
    public abstract virtual IJsEventTarget get_relatedTarget();
    public abstract virtual void initMouseEvent(string typeArg, bool canBubbleArg, bool cancelableArg, IJsAbstractView viewArg, long detailArg, long screenXArg, long screenYArg, long clientXArg, long clientYArg, bool ctrlKeyArg, bool altKeyArg, bool shiftKeyArg, bool metaKeyArg, ushort buttonArg, IJsEventTarget relatedTargetArg);
}
public interface SharpVectors.Scripting.IJsMutationEvent {
    public IJsNode relatedNode { get; }
    public string prevValue { get; }
    public string newValue { get; }
    public string attrName { get; }
    public ushort attrChange { get; }
    public abstract virtual IJsNode get_relatedNode();
    public abstract virtual string get_prevValue();
    public abstract virtual string get_newValue();
    public abstract virtual string get_attrName();
    public abstract virtual ushort get_attrChange();
    public abstract virtual void initMutationEvent(string typeArg, bool canBubbleArg, bool cancelableArg, IJsNode relatedNodeArg, string prevValueArg, string newValueArg, string attrNameArg, ushort attrChangeArg);
}
public interface SharpVectors.Scripting.IJsNamedNodeMap {
    public ulong length { get; }
    public abstract virtual ulong get_length();
    public abstract virtual IJsNode getNamedItem(string name);
    public abstract virtual IJsNode setNamedItem(IJsNode arg);
    public abstract virtual IJsNode removeNamedItem(string name);
    public abstract virtual IJsNode item(ulong index);
    public abstract virtual IJsNode getNamedItemNS(string namespaceURI, string localName);
    public abstract virtual IJsNode setNamedItemNS(IJsNode arg);
    public abstract virtual IJsNode removeNamedItemNS(string namespaceURI, string localName);
}
public interface SharpVectors.Scripting.IJsNode {
    public string nodeName { get; }
    public string nodeValue { get; public set; }
    public ushort nodeType { get; }
    public IJsNode parentNode { get; }
    public IJsNodeList childNodes { get; }
    public IJsNode firstChild { get; }
    public IJsNode lastChild { get; }
    public IJsNode previousSibling { get; }
    public IJsNode nextSibling { get; }
    public IJsNamedNodeMap attributes { get; }
    public IJsDocument ownerDocument { get; }
    public string namespaceURI { get; }
    public string prefix { get; public set; }
    public string localName { get; }
    public abstract virtual string get_nodeName();
    public abstract virtual string get_nodeValue();
    public abstract virtual void set_nodeValue(string value);
    public abstract virtual ushort get_nodeType();
    public abstract virtual IJsNode get_parentNode();
    public abstract virtual IJsNodeList get_childNodes();
    public abstract virtual IJsNode get_firstChild();
    public abstract virtual IJsNode get_lastChild();
    public abstract virtual IJsNode get_previousSibling();
    public abstract virtual IJsNode get_nextSibling();
    public abstract virtual IJsNamedNodeMap get_attributes();
    public abstract virtual IJsDocument get_ownerDocument();
    public abstract virtual string get_namespaceURI();
    public abstract virtual string get_prefix();
    public abstract virtual void set_prefix(string value);
    public abstract virtual string get_localName();
    public abstract virtual IJsNode insertBefore(IJsNode newChild, IJsNode refChild);
    public abstract virtual IJsNode replaceChild(IJsNode newChild, IJsNode oldChild);
    public abstract virtual IJsNode removeChild(IJsNode oldChild);
    public abstract virtual IJsNode appendChild(IJsNode newChild);
    public abstract virtual bool hasChildNodes();
    public abstract virtual IJsNode cloneNode(bool deep);
    public abstract virtual void normalize();
    public abstract virtual bool isSupported(string feature, string version);
    public abstract virtual bool hasAttributes();
}
public interface SharpVectors.Scripting.IJsNodeList {
    public ulong length { get; }
    public abstract virtual IJsNode item(ulong index);
    public abstract virtual ulong get_length();
}
public interface SharpVectors.Scripting.IJsNotation {
    public string publicId { get; }
    public string systemId { get; }
    public abstract virtual string get_publicId();
    public abstract virtual string get_systemId();
}
public interface SharpVectors.Scripting.IJsProcessingInstruction {
    public string target { get; }
    public string data { get; public set; }
    public abstract virtual string get_target();
    public abstract virtual string get_data();
    public abstract virtual void set_data(string value);
}
public interface SharpVectors.Scripting.IJsRect {
    public IJsCssPrimitiveValue top { get; }
    public IJsCssPrimitiveValue right { get; }
    public IJsCssPrimitiveValue bottom { get; }
    public IJsCssPrimitiveValue left { get; }
    public abstract virtual IJsCssPrimitiveValue get_top();
    public abstract virtual IJsCssPrimitiveValue get_right();
    public abstract virtual IJsCssPrimitiveValue get_bottom();
    public abstract virtual IJsCssPrimitiveValue get_left();
}
public interface SharpVectors.Scripting.IJsRgbColor {
    public IJsCssPrimitiveValue red { get; }
    public IJsCssPrimitiveValue green { get; }
    public IJsCssPrimitiveValue blue { get; }
    public abstract virtual IJsCssPrimitiveValue get_red();
    public abstract virtual IJsCssPrimitiveValue get_green();
    public abstract virtual IJsCssPrimitiveValue get_blue();
}
public interface SharpVectors.Scripting.IJsStyleSheet {
    public string type { get; }
    public bool disabled { get; public set; }
    public IJsNode ownerNode { get; }
    public IJsStyleSheet parentStyleSheet { get; }
    public string href { get; }
    public string title { get; }
    public IJsMediaList media { get; }
    public abstract virtual string get_type();
    public abstract virtual bool get_disabled();
    public abstract virtual void set_disabled(bool value);
    public abstract virtual IJsNode get_ownerNode();
    public abstract virtual IJsStyleSheet get_parentStyleSheet();
    public abstract virtual string get_href();
    public abstract virtual string get_title();
    public abstract virtual IJsMediaList get_media();
}
public interface SharpVectors.Scripting.IJsStyleSheetList {
    public ulong length { get; }
    public abstract virtual ulong get_length();
    public abstract virtual IJsStyleSheet item(ulong index);
}
public interface SharpVectors.Scripting.IJsSvgAElement {
    public IJsSvgAnimatedString target { get; }
    public abstract virtual IJsSvgAnimatedString get_target();
}
public interface SharpVectors.Scripting.IJsSvgAltGlyphDefElement {
}
public interface SharpVectors.Scripting.IJsSvgAltGlyphElement {
    public string glyphRef { get; public set; }
    public string format { get; public set; }
    public abstract virtual string get_glyphRef();
    public abstract virtual void set_glyphRef(string value);
    public abstract virtual string get_format();
    public abstract virtual void set_format(string value);
}
public interface SharpVectors.Scripting.IJsSvgAltGlyphItemElement {
}
public interface SharpVectors.Scripting.IJsSvgAngle {
    public ushort unitType { get; }
    public float value { get; public set; }
    public float valueInSpecifiedUnits { get; public set; }
    public string valueAsString { get; public set; }
    public abstract virtual ushort get_unitType();
    public abstract virtual float get_value();
    public abstract virtual void set_value(float value);
    public abstract virtual float get_valueInSpecifiedUnits();
    public abstract virtual void set_valueInSpecifiedUnits(float value);
    public abstract virtual string get_valueAsString();
    public abstract virtual void set_valueAsString(string value);
    public abstract virtual void newValueSpecifiedUnits(ushort unitType, float valueInSpecifiedUnits);
    public abstract virtual void convertToSpecifiedUnits(ushort unitType);
}
public interface SharpVectors.Scripting.IJsSvgAnimateColorElement {
}
public interface SharpVectors.Scripting.IJsSvgAnimatedAngle {
    public IJsSvgAngle baseVal { get; }
    public IJsSvgAngle animVal { get; }
    public abstract virtual IJsSvgAngle get_baseVal();
    public abstract virtual IJsSvgAngle get_animVal();
}
public interface SharpVectors.Scripting.IJsSvgAnimatedBoolean {
    public bool baseVal { get; public set; }
    public bool animVal { get; }
    public abstract virtual bool get_baseVal();
    public abstract virtual void set_baseVal(bool value);
    public abstract virtual bool get_animVal();
}
public interface SharpVectors.Scripting.IJsSvgAnimatedEnumeration {
    public ushort baseVal { get; public set; }
    public ushort animVal { get; }
    public abstract virtual ushort get_baseVal();
    public abstract virtual void set_baseVal(ushort value);
    public abstract virtual ushort get_animVal();
}
public interface SharpVectors.Scripting.IJsSvgAnimatedInteger {
    public long baseVal { get; public set; }
    public long animVal { get; }
    public abstract virtual long get_baseVal();
    public abstract virtual void set_baseVal(long value);
    public abstract virtual long get_animVal();
}
public interface SharpVectors.Scripting.IJsSvgAnimatedLength {
    public IJsSvgLength baseVal { get; }
    public IJsSvgLength animVal { get; }
    public abstract virtual IJsSvgLength get_baseVal();
    public abstract virtual IJsSvgLength get_animVal();
}
public interface SharpVectors.Scripting.IJsSvgAnimatedLengthList {
    public IJsSvgLengthList baseVal { get; }
    public IJsSvgLengthList animVal { get; }
    public abstract virtual IJsSvgLengthList get_baseVal();
    public abstract virtual IJsSvgLengthList get_animVal();
}
public interface SharpVectors.Scripting.IJsSvgAnimatedNumber {
    public float baseVal { get; public set; }
    public float animVal { get; }
    public abstract virtual float get_baseVal();
    public abstract virtual void set_baseVal(float value);
    public abstract virtual float get_animVal();
}
public interface SharpVectors.Scripting.IJsSvgAnimatedNumberList {
    public IJsSvgNumberList baseVal { get; }
    public IJsSvgNumberList animVal { get; }
    public abstract virtual IJsSvgNumberList get_baseVal();
    public abstract virtual IJsSvgNumberList get_animVal();
}
public interface SharpVectors.Scripting.IJsSvgAnimatedPathData {
    public IJsSvgPathSegList pathSegList { get; }
    public IJsSvgPathSegList normalizedPathSegList { get; }
    public IJsSvgPathSegList animatedPathSegList { get; }
    public IJsSvgPathSegList animatedNormalizedPathSegList { get; }
    public abstract virtual IJsSvgPathSegList get_pathSegList();
    public abstract virtual IJsSvgPathSegList get_normalizedPathSegList();
    public abstract virtual IJsSvgPathSegList get_animatedPathSegList();
    public abstract virtual IJsSvgPathSegList get_animatedNormalizedPathSegList();
}
public interface SharpVectors.Scripting.IJsSvgAnimatedPoints {
    public IJsSvgPointList points { get; }
    public IJsSvgPointList animatedPoints { get; }
    public abstract virtual IJsSvgPointList get_points();
    public abstract virtual IJsSvgPointList get_animatedPoints();
}
public interface SharpVectors.Scripting.IJsSvgAnimatedPreserveAspectRatio {
    public IJsSvgPreserveAspectRatio baseVal { get; }
    public IJsSvgPreserveAspectRatio animVal { get; }
    public abstract virtual IJsSvgPreserveAspectRatio get_baseVal();
    public abstract virtual IJsSvgPreserveAspectRatio get_animVal();
}
public interface SharpVectors.Scripting.IJsSvgAnimatedRect {
    public IJsSvgRect baseVal { get; }
    public IJsSvgRect animVal { get; }
    public abstract virtual IJsSvgRect get_baseVal();
    public abstract virtual IJsSvgRect get_animVal();
}
public interface SharpVectors.Scripting.IJsSvgAnimatedString {
    public string baseVal { get; public set; }
    public string animVal { get; }
    public abstract virtual string get_baseVal();
    public abstract virtual void set_baseVal(string value);
    public abstract virtual string get_animVal();
}
public interface SharpVectors.Scripting.IJsSvgAnimatedTransformList {
    public IJsSvgTransformList baseVal { get; }
    public IJsSvgTransformList animVal { get; }
    public abstract virtual IJsSvgTransformList get_baseVal();
    public abstract virtual IJsSvgTransformList get_animVal();
}
public interface SharpVectors.Scripting.IJsSvgAnimateElement {
}
public interface SharpVectors.Scripting.IJsSvgAnimateMotionElement {
}
public interface SharpVectors.Scripting.IJsSvgAnimateTransformElement {
}
public interface SharpVectors.Scripting.IJsSvgAnimationElement {
    public IJsSvgElement targetElement { get; }
    public abstract virtual float getStartTime();
    public abstract virtual float getCurrentTime();
    public abstract virtual float getSimpleDuration();
    public abstract virtual IJsSvgElement get_targetElement();
}
public interface SharpVectors.Scripting.IJsSvgCircleElement {
    public IJsSvgAnimatedLength cx { get; }
    public IJsSvgAnimatedLength cy { get; }
    public IJsSvgAnimatedLength r { get; }
    public abstract virtual IJsSvgAnimatedLength get_cx();
    public abstract virtual IJsSvgAnimatedLength get_cy();
    public abstract virtual IJsSvgAnimatedLength get_r();
}
public interface SharpVectors.Scripting.IJsSvgClipPathElement {
    public IJsSvgAnimatedEnumeration clipPathUnits { get; }
    public abstract virtual IJsSvgAnimatedEnumeration get_clipPathUnits();
}
public interface SharpVectors.Scripting.IJsSvgColor {
    public ushort colorType { get; }
    public IJsRgbColor rgbColor { get; }
    public IJsSvgIccColor iccColor { get; }
    public abstract virtual ushort get_colorType();
    public abstract virtual IJsRgbColor get_rgbColor();
    public abstract virtual IJsSvgIccColor get_iccColor();
    public abstract virtual void setRGBColor(string rgbColor);
    public abstract virtual void setRGBColorICCColor(string rgbColor, string iccColor);
    public abstract virtual void setColor(ushort colorType, string rgbColor, string iccColor);
}
public interface SharpVectors.Scripting.IJsSvgColorProfileElement {
    public string local { get; public set; }
    public string name { get; public set; }
    public ushort renderingIntent { get; public set; }
    public abstract virtual string get_local();
    public abstract virtual void set_local(string value);
    public abstract virtual string get_name();
    public abstract virtual void set_name(string value);
    public abstract virtual ushort get_renderingIntent();
    public abstract virtual void set_renderingIntent(ushort value);
}
public interface SharpVectors.Scripting.IJsSvgColorProfileRule {
    public string src { get; public set; }
    public string name { get; public set; }
    public ushort renderingIntent { get; public set; }
    public abstract virtual string get_src();
    public abstract virtual void set_src(string value);
    public abstract virtual string get_name();
    public abstract virtual void set_name(string value);
    public abstract virtual ushort get_renderingIntent();
    public abstract virtual void set_renderingIntent(ushort value);
}
public interface SharpVectors.Scripting.IJsSvgComponentTransferFunctionElement {
    public IJsSvgAnimatedEnumeration type { get; }
    public IJsSvgAnimatedNumberList tableValues { get; }
    public IJsSvgAnimatedNumber slope { get; }
    public IJsSvgAnimatedNumber intercept { get; }
    public IJsSvgAnimatedNumber amplitude { get; }
    public IJsSvgAnimatedNumber exponent { get; }
    public IJsSvgAnimatedNumber offset { get; }
    public abstract virtual IJsSvgAnimatedEnumeration get_type();
    public abstract virtual IJsSvgAnimatedNumberList get_tableValues();
    public abstract virtual IJsSvgAnimatedNumber get_slope();
    public abstract virtual IJsSvgAnimatedNumber get_intercept();
    public abstract virtual IJsSvgAnimatedNumber get_amplitude();
    public abstract virtual IJsSvgAnimatedNumber get_exponent();
    public abstract virtual IJsSvgAnimatedNumber get_offset();
}
public interface SharpVectors.Scripting.IJsSvgCssRule {
}
public interface SharpVectors.Scripting.IJsSvgCursorElement {
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public abstract virtual IJsSvgAnimatedLength get_x();
    public abstract virtual IJsSvgAnimatedLength get_y();
}
public interface SharpVectors.Scripting.IJsSvgDefinitionSrcElement {
}
public interface SharpVectors.Scripting.IJsSvgDefsElement {
}
public interface SharpVectors.Scripting.IJsSvgDescElement {
}
public interface SharpVectors.Scripting.IJsSvgDocument {
    public string title { get; }
    public string referrer { get; }
    public string domain { get; }
    public string URL { get; }
    public IJsSvgSvgElement rootElement { get; }
    public abstract virtual string get_title();
    public abstract virtual string get_referrer();
    public abstract virtual string get_domain();
    public abstract virtual string get_URL();
    public abstract virtual IJsSvgSvgElement get_rootElement();
}
public interface SharpVectors.Scripting.IJsSvgElement {
    public string id { get; public set; }
    public string xmlbase { get; public set; }
    public IJsSvgSvgElement ownerSVGElement { get; }
    public IJsSvgElement viewportElement { get; }
    public abstract virtual string get_id();
    public abstract virtual void set_id(string value);
    public abstract virtual string get_xmlbase();
    public abstract virtual void set_xmlbase(string value);
    public abstract virtual IJsSvgSvgElement get_ownerSVGElement();
    public abstract virtual IJsSvgElement get_viewportElement();
}
public interface SharpVectors.Scripting.IJsSvgElementInstance {
    public IJsSvgElement correspondingElement { get; }
    public IJsSvgUseElement correspondingUseElement { get; }
    public IJsSvgElementInstance parentNode { get; }
    public IJsSvgElementInstanceList childNodes { get; }
    public IJsSvgElementInstance firstChild { get; }
    public IJsSvgElementInstance lastChild { get; }
    public IJsSvgElementInstance previousSibling { get; }
    public IJsSvgElementInstance nextSibling { get; }
    public abstract virtual IJsSvgElement get_correspondingElement();
    public abstract virtual IJsSvgUseElement get_correspondingUseElement();
    public abstract virtual IJsSvgElementInstance get_parentNode();
    public abstract virtual IJsSvgElementInstanceList get_childNodes();
    public abstract virtual IJsSvgElementInstance get_firstChild();
    public abstract virtual IJsSvgElementInstance get_lastChild();
    public abstract virtual IJsSvgElementInstance get_previousSibling();
    public abstract virtual IJsSvgElementInstance get_nextSibling();
}
public interface SharpVectors.Scripting.IJsSvgElementInstanceList {
    public ulong length { get; }
    public abstract virtual IJsSvgElementInstance item(ulong index);
    public abstract virtual ulong get_length();
}
public interface SharpVectors.Scripting.IJsSvgEllipseElement {
    public IJsSvgAnimatedLength cx { get; }
    public IJsSvgAnimatedLength cy { get; }
    public IJsSvgAnimatedLength rx { get; }
    public IJsSvgAnimatedLength ry { get; }
    public abstract virtual IJsSvgAnimatedLength get_cx();
    public abstract virtual IJsSvgAnimatedLength get_cy();
    public abstract virtual IJsSvgAnimatedLength get_rx();
    public abstract virtual IJsSvgAnimatedLength get_ry();
}
public interface SharpVectors.Scripting.IJsSvgEvent {
}
public interface SharpVectors.Scripting.IJsSvgExternalResourcesRequired {
    public bool externalResourcesRequired { get; }
    public abstract virtual bool get_externalResourcesRequired();
}
public interface SharpVectors.Scripting.IJsSvgFEBlendElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedString in2 { get; }
    public IJsSvgAnimatedEnumeration mode { get; }
    public abstract virtual IJsSvgAnimatedString get_in1();
    public abstract virtual IJsSvgAnimatedString get_in2();
    public abstract virtual IJsSvgAnimatedEnumeration get_mode();
}
public interface SharpVectors.Scripting.IJsSvgFEColorMatrixElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedEnumeration type { get; }
    public IJsSvgAnimatedNumberList values { get; }
    public abstract virtual IJsSvgAnimatedString get_in1();
    public abstract virtual IJsSvgAnimatedEnumeration get_type();
    public abstract virtual IJsSvgAnimatedNumberList get_values();
}
public interface SharpVectors.Scripting.IJsSvgFEComponentTransferElement {
    public IJsSvgAnimatedString in1 { get; }
    public abstract virtual IJsSvgAnimatedString get_in1();
}
public interface SharpVectors.Scripting.IJsSvgFECompositeElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedString in2 { get; }
    public IJsSvgAnimatedEnumeration operator_ { get; }
    public IJsSvgAnimatedNumber k1 { get; }
    public IJsSvgAnimatedNumber k2 { get; }
    public IJsSvgAnimatedNumber k3 { get; }
    public IJsSvgAnimatedNumber k4 { get; }
    public abstract virtual IJsSvgAnimatedString get_in1();
    public abstract virtual IJsSvgAnimatedString get_in2();
    public abstract virtual IJsSvgAnimatedEnumeration get_operator_();
    public abstract virtual IJsSvgAnimatedNumber get_k1();
    public abstract virtual IJsSvgAnimatedNumber get_k2();
    public abstract virtual IJsSvgAnimatedNumber get_k3();
    public abstract virtual IJsSvgAnimatedNumber get_k4();
}
public interface SharpVectors.Scripting.IJsSvgFEConvolveMatrixElement {
    public IJsSvgAnimatedInteger orderX { get; }
    public IJsSvgAnimatedInteger orderY { get; }
    public IJsSvgAnimatedNumberList kernelMatrix { get; }
    public IJsSvgAnimatedNumber divisor { get; }
    public IJsSvgAnimatedNumber bias { get; }
    public IJsSvgAnimatedInteger targetX { get; }
    public IJsSvgAnimatedInteger targetY { get; }
    public IJsSvgAnimatedEnumeration edgeMode { get; }
    public IJsSvgAnimatedLength kernelUnitLengthX { get; }
    public IJsSvgAnimatedLength kernelUnitLengthY { get; }
    public IJsSvgAnimatedBoolean preserveAlpha { get; }
    public abstract virtual IJsSvgAnimatedInteger get_orderX();
    public abstract virtual IJsSvgAnimatedInteger get_orderY();
    public abstract virtual IJsSvgAnimatedNumberList get_kernelMatrix();
    public abstract virtual IJsSvgAnimatedNumber get_divisor();
    public abstract virtual IJsSvgAnimatedNumber get_bias();
    public abstract virtual IJsSvgAnimatedInteger get_targetX();
    public abstract virtual IJsSvgAnimatedInteger get_targetY();
    public abstract virtual IJsSvgAnimatedEnumeration get_edgeMode();
    public abstract virtual IJsSvgAnimatedLength get_kernelUnitLengthX();
    public abstract virtual IJsSvgAnimatedLength get_kernelUnitLengthY();
    public abstract virtual IJsSvgAnimatedBoolean get_preserveAlpha();
}
public interface SharpVectors.Scripting.IJsSvgFEDiffuseLightingElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedNumber surfaceScale { get; }
    public IJsSvgAnimatedNumber diffuseConstant { get; }
    public abstract virtual IJsSvgAnimatedString get_in1();
    public abstract virtual IJsSvgAnimatedNumber get_surfaceScale();
    public abstract virtual IJsSvgAnimatedNumber get_diffuseConstant();
}
public interface SharpVectors.Scripting.IJsSvgFEDisplacementMapElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedString in2 { get; }
    public IJsSvgAnimatedNumber scale { get; }
    public IJsSvgAnimatedEnumeration xChannelSelector { get; }
    public IJsSvgAnimatedEnumeration yChannelSelector { get; }
    public abstract virtual IJsSvgAnimatedString get_in1();
    public abstract virtual IJsSvgAnimatedString get_in2();
    public abstract virtual IJsSvgAnimatedNumber get_scale();
    public abstract virtual IJsSvgAnimatedEnumeration get_xChannelSelector();
    public abstract virtual IJsSvgAnimatedEnumeration get_yChannelSelector();
}
public interface SharpVectors.Scripting.IJsSvgFEDistantLightElement {
    public IJsSvgAnimatedNumber azimuth { get; }
    public IJsSvgAnimatedNumber elevation { get; }
    public abstract virtual IJsSvgAnimatedNumber get_azimuth();
    public abstract virtual IJsSvgAnimatedNumber get_elevation();
}
public interface SharpVectors.Scripting.IJsSvgFEFloodElement {
    public IJsSvgAnimatedString in1 { get; }
    public abstract virtual IJsSvgAnimatedString get_in1();
}
public interface SharpVectors.Scripting.IJsSvgFEFuncAElement {
}
public interface SharpVectors.Scripting.IJsSvgFEFuncBElement {
}
public interface SharpVectors.Scripting.IJsSvgFEFuncGElement {
}
public interface SharpVectors.Scripting.IJsSvgFEFuncRElement {
}
public interface SharpVectors.Scripting.IJsSvgFEGaussianBlurElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedNumber stdDeviationX { get; }
    public IJsSvgAnimatedNumber stdDeviationY { get; }
    public abstract virtual IJsSvgAnimatedString get_in1();
    public abstract virtual IJsSvgAnimatedNumber get_stdDeviationX();
    public abstract virtual IJsSvgAnimatedNumber get_stdDeviationY();
    public abstract virtual void setStdDeviation(float stdDeviationX, float stdDeviationY);
}
public interface SharpVectors.Scripting.IJsSvgFEImageElement {
}
public interface SharpVectors.Scripting.IJsSvgFEMergeElement {
}
public interface SharpVectors.Scripting.IJsSvgFEMergeNodeElement {
    public IJsSvgAnimatedString in1 { get; }
    public abstract virtual IJsSvgAnimatedString get_in1();
}
public interface SharpVectors.Scripting.IJsSvgFEMorphologyElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedEnumeration operator_ { get; }
    public IJsSvgAnimatedLength radiusX { get; }
    public IJsSvgAnimatedLength radiusY { get; }
    public abstract virtual IJsSvgAnimatedString get_in1();
    public abstract virtual IJsSvgAnimatedEnumeration get_operator_();
    public abstract virtual IJsSvgAnimatedLength get_radiusX();
    public abstract virtual IJsSvgAnimatedLength get_radiusY();
}
public interface SharpVectors.Scripting.IJsSvgFEOffsetElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedNumber dx { get; }
    public IJsSvgAnimatedNumber dy { get; }
    public abstract virtual IJsSvgAnimatedString get_in1();
    public abstract virtual IJsSvgAnimatedNumber get_dx();
    public abstract virtual IJsSvgAnimatedNumber get_dy();
}
public interface SharpVectors.Scripting.IJsSvgFEPointLightElement {
    public IJsSvgAnimatedNumber x { get; }
    public IJsSvgAnimatedNumber y { get; }
    public IJsSvgAnimatedNumber z { get; }
    public abstract virtual IJsSvgAnimatedNumber get_x();
    public abstract virtual IJsSvgAnimatedNumber get_y();
    public abstract virtual IJsSvgAnimatedNumber get_z();
}
public interface SharpVectors.Scripting.IJsSvgFESpecularLightingElement {
    public IJsSvgAnimatedString in1 { get; }
    public IJsSvgAnimatedNumber surfaceScale { get; }
    public IJsSvgAnimatedNumber specularConstant { get; }
    public IJsSvgAnimatedNumber specularExponent { get; }
    public abstract virtual IJsSvgAnimatedString get_in1();
    public abstract virtual IJsSvgAnimatedNumber get_surfaceScale();
    public abstract virtual IJsSvgAnimatedNumber get_specularConstant();
    public abstract virtual IJsSvgAnimatedNumber get_specularExponent();
}
public interface SharpVectors.Scripting.IJsSvgFESpotLightElement {
    public IJsSvgAnimatedNumber x { get; }
    public IJsSvgAnimatedNumber y { get; }
    public IJsSvgAnimatedNumber z { get; }
    public IJsSvgAnimatedNumber pointsAtX { get; }
    public IJsSvgAnimatedNumber pointsAtY { get; }
    public IJsSvgAnimatedNumber pointsAtZ { get; }
    public IJsSvgAnimatedNumber specularExponent { get; }
    public IJsSvgAnimatedNumber limitingConeAngle { get; }
    public abstract virtual IJsSvgAnimatedNumber get_x();
    public abstract virtual IJsSvgAnimatedNumber get_y();
    public abstract virtual IJsSvgAnimatedNumber get_z();
    public abstract virtual IJsSvgAnimatedNumber get_pointsAtX();
    public abstract virtual IJsSvgAnimatedNumber get_pointsAtY();
    public abstract virtual IJsSvgAnimatedNumber get_pointsAtZ();
    public abstract virtual IJsSvgAnimatedNumber get_specularExponent();
    public abstract virtual IJsSvgAnimatedNumber get_limitingConeAngle();
}
public interface SharpVectors.Scripting.IJsSvgFETileElement {
    public IJsSvgAnimatedString in1 { get; }
    public abstract virtual IJsSvgAnimatedString get_in1();
}
public interface SharpVectors.Scripting.IJsSvgFETurbulenceElement {
    public IJsSvgAnimatedNumber baseFrequencyX { get; }
    public IJsSvgAnimatedNumber baseFrequencyY { get; }
    public IJsSvgAnimatedInteger numOctaves { get; }
    public IJsSvgAnimatedNumber seed { get; }
    public IJsSvgAnimatedEnumeration stitchTiles { get; }
    public IJsSvgAnimatedEnumeration type { get; }
    public abstract virtual IJsSvgAnimatedNumber get_baseFrequencyX();
    public abstract virtual IJsSvgAnimatedNumber get_baseFrequencyY();
    public abstract virtual IJsSvgAnimatedInteger get_numOctaves();
    public abstract virtual IJsSvgAnimatedNumber get_seed();
    public abstract virtual IJsSvgAnimatedEnumeration get_stitchTiles();
    public abstract virtual IJsSvgAnimatedEnumeration get_type();
}
public interface SharpVectors.Scripting.IJsSvgFilterElement {
    public IJsSvgAnimatedEnumeration filterUnits { get; }
    public IJsSvgAnimatedEnumeration primitiveUnits { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedInteger filterResX { get; }
    public IJsSvgAnimatedInteger filterResY { get; }
    public abstract virtual IJsSvgAnimatedEnumeration get_filterUnits();
    public abstract virtual IJsSvgAnimatedEnumeration get_primitiveUnits();
    public abstract virtual IJsSvgAnimatedLength get_x();
    public abstract virtual IJsSvgAnimatedLength get_y();
    public abstract virtual IJsSvgAnimatedLength get_width();
    public abstract virtual IJsSvgAnimatedLength get_height();
    public abstract virtual IJsSvgAnimatedInteger get_filterResX();
    public abstract virtual IJsSvgAnimatedInteger get_filterResY();
    public abstract virtual void setFilterRes(ulong filterResX, ulong filterResY);
}
public interface SharpVectors.Scripting.IJsSvgFilterPrimitiveStandardAttributes {
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedString result { get; }
    public abstract virtual IJsSvgAnimatedLength get_x();
    public abstract virtual IJsSvgAnimatedLength get_y();
    public abstract virtual IJsSvgAnimatedLength get_width();
    public abstract virtual IJsSvgAnimatedLength get_height();
    public abstract virtual IJsSvgAnimatedString get_result();
}
public interface SharpVectors.Scripting.IJsSvgFitToViewBox {
    public IJsSvgAnimatedRect viewBox { get; }
    public IJsSvgAnimatedPreserveAspectRatio preserveAspectRatio { get; }
    public abstract virtual IJsSvgAnimatedRect get_viewBox();
    public abstract virtual IJsSvgAnimatedPreserveAspectRatio get_preserveAspectRatio();
}
public interface SharpVectors.Scripting.IJsSvgFontElement {
}
public interface SharpVectors.Scripting.IJsSvgFontFaceElement {
}
public interface SharpVectors.Scripting.IJsSvgFontFaceFormatElement {
}
public interface SharpVectors.Scripting.IJsSvgFontFaceNameElement {
}
public interface SharpVectors.Scripting.IJsSvgFontFaceSrcElement {
}
public interface SharpVectors.Scripting.IJsSvgFontFaceUriElement {
}
public interface SharpVectors.Scripting.IJsSvgForeignObjectElement {
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public abstract virtual IJsSvgAnimatedLength get_x();
    public abstract virtual IJsSvgAnimatedLength get_y();
    public abstract virtual IJsSvgAnimatedLength get_width();
    public abstract virtual IJsSvgAnimatedLength get_height();
}
public interface SharpVectors.Scripting.IJsSvgGElement {
}
public interface SharpVectors.Scripting.IJsSvgGlyphElement {
}
public interface SharpVectors.Scripting.IJsSvgGlyphRefElement {
    public string glyphRef { get; public set; }
    public string format { get; public set; }
    public float x { get; public set; }
    public float y { get; public set; }
    public float dx { get; public set; }
    public float dy { get; public set; }
    public abstract virtual string get_glyphRef();
    public abstract virtual void set_glyphRef(string value);
    public abstract virtual string get_format();
    public abstract virtual void set_format(string value);
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
    public abstract virtual float get_dx();
    public abstract virtual void set_dx(float value);
    public abstract virtual float get_dy();
    public abstract virtual void set_dy(float value);
}
public interface SharpVectors.Scripting.IJsSvgGradientElement {
    public IJsSvgAnimatedEnumeration gradientUnits { get; }
    public IJsSvgAnimatedTransformList gradientTransform { get; }
    public IJsSvgAnimatedEnumeration spreadMethod { get; }
    public abstract virtual IJsSvgAnimatedEnumeration get_gradientUnits();
    public abstract virtual IJsSvgAnimatedTransformList get_gradientTransform();
    public abstract virtual IJsSvgAnimatedEnumeration get_spreadMethod();
}
public interface SharpVectors.Scripting.IJsSvgHKernElement {
}
public interface SharpVectors.Scripting.IJsSvgIccColor {
    public string colorProfile { get; public set; }
    public IJsSvgNumberList colors { get; }
    public abstract virtual string get_colorProfile();
    public abstract virtual void set_colorProfile(string value);
    public abstract virtual IJsSvgNumberList get_colors();
}
public interface SharpVectors.Scripting.IJsSvgImageElement {
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedPreserveAspectRatio preserveAspectRatio { get; }
    public abstract virtual IJsSvgAnimatedLength get_x();
    public abstract virtual IJsSvgAnimatedLength get_y();
    public abstract virtual IJsSvgAnimatedLength get_width();
    public abstract virtual IJsSvgAnimatedLength get_height();
    public abstract virtual IJsSvgAnimatedPreserveAspectRatio get_preserveAspectRatio();
}
public interface SharpVectors.Scripting.IJsSvgLangSpace {
    public string xmllang { get; public set; }
    public string xmlspace { get; public set; }
    public abstract virtual string get_xmllang();
    public abstract virtual void set_xmllang(string value);
    public abstract virtual string get_xmlspace();
    public abstract virtual void set_xmlspace(string value);
}
public interface SharpVectors.Scripting.IJsSvgLength {
    public ushort unitType { get; }
    public float value { get; public set; }
    public float valueInSpecifiedUnits { get; public set; }
    public string valueAsString { get; public set; }
    public abstract virtual ushort get_unitType();
    public abstract virtual float get_value();
    public abstract virtual void set_value(float value);
    public abstract virtual float get_valueInSpecifiedUnits();
    public abstract virtual void set_valueInSpecifiedUnits(float value);
    public abstract virtual string get_valueAsString();
    public abstract virtual void set_valueAsString(string value);
    public abstract virtual void newValueSpecifiedUnits(ushort unitType, float valueInSpecifiedUnits);
    public abstract virtual void convertToSpecifiedUnits(ushort unitType);
}
public interface SharpVectors.Scripting.IJsSvgLengthList {
    public ulong numberOfItems { get; }
    public abstract virtual ulong get_numberOfItems();
    public abstract virtual void clear();
    public abstract virtual IJsSvgLength initialize(IJsSvgLength newItem);
    public abstract virtual IJsSvgLength getItem(ulong index);
    public abstract virtual IJsSvgLength insertItemBefore(IJsSvgLength newItem, ulong index);
    public abstract virtual IJsSvgLength replaceItem(IJsSvgLength newItem, ulong index);
    public abstract virtual IJsSvgLength removeItem(ulong index);
    public abstract virtual IJsSvgLength appendItem(IJsSvgLength newItem);
}
public interface SharpVectors.Scripting.IJsSvgLinearGradientElement {
    public IJsSvgAnimatedLength x1 { get; }
    public IJsSvgAnimatedLength y1 { get; }
    public IJsSvgAnimatedLength x2 { get; }
    public IJsSvgAnimatedLength y2 { get; }
    public abstract virtual IJsSvgAnimatedLength get_x1();
    public abstract virtual IJsSvgAnimatedLength get_y1();
    public abstract virtual IJsSvgAnimatedLength get_x2();
    public abstract virtual IJsSvgAnimatedLength get_y2();
}
public interface SharpVectors.Scripting.IJsSvgLineElement {
    public IJsSvgAnimatedLength x1 { get; }
    public IJsSvgAnimatedLength y1 { get; }
    public IJsSvgAnimatedLength x2 { get; }
    public IJsSvgAnimatedLength y2 { get; }
    public abstract virtual IJsSvgAnimatedLength get_x1();
    public abstract virtual IJsSvgAnimatedLength get_y1();
    public abstract virtual IJsSvgAnimatedLength get_x2();
    public abstract virtual IJsSvgAnimatedLength get_y2();
}
public interface SharpVectors.Scripting.IJsSvgLocatable {
    public IJsSvgElement nearestViewportElement { get; }
    public IJsSvgElement farthestViewportElement { get; }
    public abstract virtual IJsSvgElement get_nearestViewportElement();
    public abstract virtual IJsSvgElement get_farthestViewportElement();
    public abstract virtual IJsSvgRect getBBox();
    public abstract virtual IJsSvgMatrix getCTM();
    public abstract virtual IJsSvgMatrix getScreenCTM();
    public abstract virtual IJsSvgMatrix getTransformToElement(IJsSvgElement element);
}
public interface SharpVectors.Scripting.IJsSvgMarkerElement {
    public IJsSvgAnimatedLength refX { get; }
    public IJsSvgAnimatedLength refY { get; }
    public IJsSvgAnimatedEnumeration markerUnits { get; }
    public IJsSvgAnimatedLength markerWidth { get; }
    public IJsSvgAnimatedLength markerHeight { get; }
    public IJsSvgAnimatedEnumeration orientType { get; }
    public IJsSvgAnimatedAngle orientAngle { get; }
    public abstract virtual IJsSvgAnimatedLength get_refX();
    public abstract virtual IJsSvgAnimatedLength get_refY();
    public abstract virtual IJsSvgAnimatedEnumeration get_markerUnits();
    public abstract virtual IJsSvgAnimatedLength get_markerWidth();
    public abstract virtual IJsSvgAnimatedLength get_markerHeight();
    public abstract virtual IJsSvgAnimatedEnumeration get_orientType();
    public abstract virtual IJsSvgAnimatedAngle get_orientAngle();
    public abstract virtual void setOrientToAuto();
    public abstract virtual void setOrientToAngle(IJsSvgAngle angle);
}
public interface SharpVectors.Scripting.IJsSvgMaskElement {
    public IJsSvgAnimatedEnumeration maskUnits { get; }
    public IJsSvgAnimatedEnumeration maskContentUnits { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public abstract virtual IJsSvgAnimatedEnumeration get_maskUnits();
    public abstract virtual IJsSvgAnimatedEnumeration get_maskContentUnits();
    public abstract virtual IJsSvgAnimatedLength get_x();
    public abstract virtual IJsSvgAnimatedLength get_y();
    public abstract virtual IJsSvgAnimatedLength get_width();
    public abstract virtual IJsSvgAnimatedLength get_height();
}
public interface SharpVectors.Scripting.IJsSvgMatrix {
    public float a { get; public set; }
    public float b { get; public set; }
    public float c { get; public set; }
    public float d { get; public set; }
    public float e { get; public set; }
    public float f { get; public set; }
    public abstract virtual float get_a();
    public abstract virtual void set_a(float value);
    public abstract virtual float get_b();
    public abstract virtual void set_b(float value);
    public abstract virtual float get_c();
    public abstract virtual void set_c(float value);
    public abstract virtual float get_d();
    public abstract virtual void set_d(float value);
    public abstract virtual float get_e();
    public abstract virtual void set_e(float value);
    public abstract virtual float get_f();
    public abstract virtual void set_f(float value);
    public abstract virtual IJsSvgMatrix multiply(IJsSvgMatrix secondMatrix);
    public abstract virtual IJsSvgMatrix inverse();
    public abstract virtual IJsSvgMatrix translate(float x, float y);
    public abstract virtual IJsSvgMatrix scale(float scaleFactor);
    public abstract virtual IJsSvgMatrix scaleNonUniform(float scaleFactorX, float scaleFactorY);
    public abstract virtual IJsSvgMatrix rotate(float angle);
    public abstract virtual IJsSvgMatrix rotateFromVector(float x, float y);
    public abstract virtual IJsSvgMatrix flipX();
    public abstract virtual IJsSvgMatrix flipY();
    public abstract virtual IJsSvgMatrix skewX(float angle);
    public abstract virtual IJsSvgMatrix skewY(float angle);
}
public interface SharpVectors.Scripting.IJsSvgMetadataElement {
}
public interface SharpVectors.Scripting.IJsSvgMissingGlyphElement {
}
public interface SharpVectors.Scripting.IJsSvgMPathElement {
}
public interface SharpVectors.Scripting.IJsSvgNumber {
    public float value { get; public set; }
    public abstract virtual float get_value();
    public abstract virtual void set_value(float value);
}
public interface SharpVectors.Scripting.IJsSvgNumberList {
    public ulong numberOfItems { get; }
    public abstract virtual ulong get_numberOfItems();
    public abstract virtual void clear();
    public abstract virtual IJsSvgNumber initialize(IJsSvgNumber newItem);
    public abstract virtual IJsSvgNumber getItem(ulong index);
    public abstract virtual IJsSvgNumber insertItemBefore(IJsSvgNumber newItem, ulong index);
    public abstract virtual IJsSvgNumber replaceItem(IJsSvgNumber newItem, ulong index);
    public abstract virtual IJsSvgNumber removeItem(ulong index);
    public abstract virtual IJsSvgNumber appendItem(IJsSvgNumber newItem);
}
public interface SharpVectors.Scripting.IJsSvgPaint {
    public ushort paintType { get; }
    public string uri { get; }
    public abstract virtual ushort get_paintType();
    public abstract virtual string get_uri();
    public abstract virtual void setUri(string uri);
    public abstract virtual void setPaint(ushort paintType, string uri, string rgbColor, string iccColor);
}
public interface SharpVectors.Scripting.IJsSvgPathElement {
    public IJsSvgAnimatedNumber pathLength { get; }
    public abstract virtual IJsSvgAnimatedNumber get_pathLength();
    public abstract virtual float getTotalLength();
    public abstract virtual IJsSvgPoint getPointAtLength(float distance);
    public abstract virtual ulong getPathSegAtLength(float distance);
    public abstract virtual IJsSvgPathSegClosePath createSVGPathSegClosePath();
    public abstract virtual IJsSvgPathSegMovetoAbs createSVGPathSegMovetoAbs(float x, float y);
    public abstract virtual IJsSvgPathSegMovetoRel createSVGPathSegMovetoRel(float x, float y);
    public abstract virtual IJsSvgPathSegLinetoAbs createSVGPathSegLinetoAbs(float x, float y);
    public abstract virtual IJsSvgPathSegLinetoRel createSVGPathSegLinetoRel(float x, float y);
    public abstract virtual IJsSvgPathSegCurvetoCubicAbs createSVGPathSegCurvetoCubicAbs(float x, float y, float x1, float y1, float x2, float y2);
    public abstract virtual IJsSvgPathSegCurvetoCubicRel createSVGPathSegCurvetoCubicRel(float x, float y, float x1, float y1, float x2, float y2);
    public abstract virtual IJsSvgPathSegCurvetoQuadraticAbs createSVGPathSegCurvetoQuadraticAbs(float x, float y, float x1, float y1);
    public abstract virtual IJsSvgPathSegCurvetoQuadraticRel createSVGPathSegCurvetoQuadraticRel(float x, float y, float x1, float y1);
    public abstract virtual IJsSvgPathSegArcAbs createSVGPathSegArcAbs(float x, float y, float r1, float r2, float angle, bool largeArcFlag, bool sweepFlag);
    public abstract virtual IJsSvgPathSegArcRel createSVGPathSegArcRel(float x, float y, float r1, float r2, float angle, bool largeArcFlag, bool sweepFlag);
    public abstract virtual IJsSvgPathSegLinetoHorizontalAbs createSVGPathSegLinetoHorizontalAbs(float x);
    public abstract virtual IJsSvgPathSegLinetoHorizontalRel createSVGPathSegLinetoHorizontalRel(float x);
    public abstract virtual IJsSvgPathSegLinetoVerticalAbs createSVGPathSegLinetoVerticalAbs(float y);
    public abstract virtual IJsSvgPathSegLinetoVerticalRel createSVGPathSegLinetoVerticalRel(float y);
    public abstract virtual IJsSvgPathSegCurvetoCubicSmoothAbs createSVGPathSegCurvetoCubicSmoothAbs(float x, float y, float x2, float y2);
    public abstract virtual IJsSvgPathSegCurvetoCubicSmoothRel createSVGPathSegCurvetoCubicSmoothRel(float x, float y, float x2, float y2);
    public abstract virtual IJsSvgPathSegCurvetoQuadraticSmoothAbs createSVGPathSegCurvetoQuadraticSmoothAbs(float x, float y);
    public abstract virtual IJsSvgPathSegCurvetoQuadraticSmoothRel createSVGPathSegCurvetoQuadraticSmoothRel(float x, float y);
}
public interface SharpVectors.Scripting.IJsSvgPathSeg {
    public ushort pathSegType { get; }
    public string pathSegTypeAsLetter { get; }
    public object BasePathSeg { get; }
    public abstract virtual ushort get_pathSegType();
    public abstract virtual string get_pathSegTypeAsLetter();
    public abstract virtual object get_BasePathSeg();
}
public interface SharpVectors.Scripting.IJsSvgPathSeg`1 {
}
public interface SharpVectors.Scripting.IJsSvgPathSegArcAbs {
    public float x { get; public set; }
    public float y { get; public set; }
    public float r1 { get; public set; }
    public float r2 { get; public set; }
    public float angle { get; public set; }
    public bool largeArcFlag { get; public set; }
    public bool sweepFlag { get; public set; }
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
    public abstract virtual float get_r1();
    public abstract virtual void set_r1(float value);
    public abstract virtual float get_r2();
    public abstract virtual void set_r2(float value);
    public abstract virtual float get_angle();
    public abstract virtual void set_angle(float value);
    public abstract virtual bool get_largeArcFlag();
    public abstract virtual void set_largeArcFlag(bool value);
    public abstract virtual bool get_sweepFlag();
    public abstract virtual void set_sweepFlag(bool value);
}
public interface SharpVectors.Scripting.IJsSvgPathSegArcRel {
    public float x { get; public set; }
    public float y { get; public set; }
    public float r1 { get; public set; }
    public float r2 { get; public set; }
    public float angle { get; public set; }
    public bool largeArcFlag { get; public set; }
    public bool sweepFlag { get; public set; }
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
    public abstract virtual float get_r1();
    public abstract virtual void set_r1(float value);
    public abstract virtual float get_r2();
    public abstract virtual void set_r2(float value);
    public abstract virtual float get_angle();
    public abstract virtual void set_angle(float value);
    public abstract virtual bool get_largeArcFlag();
    public abstract virtual void set_largeArcFlag(bool value);
    public abstract virtual bool get_sweepFlag();
    public abstract virtual void set_sweepFlag(bool value);
}
public interface SharpVectors.Scripting.IJsSvgPathSegClosePath {
}
public interface SharpVectors.Scripting.IJsSvgPathSegCurvetoCubicAbs {
    public float x { get; public set; }
    public float y { get; public set; }
    public float x1 { get; public set; }
    public float y1 { get; public set; }
    public float x2 { get; public set; }
    public float y2 { get; public set; }
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
    public abstract virtual float get_x1();
    public abstract virtual void set_x1(float value);
    public abstract virtual float get_y1();
    public abstract virtual void set_y1(float value);
    public abstract virtual float get_x2();
    public abstract virtual void set_x2(float value);
    public abstract virtual float get_y2();
    public abstract virtual void set_y2(float value);
}
public interface SharpVectors.Scripting.IJsSvgPathSegCurvetoCubicRel {
    public float x { get; public set; }
    public float y { get; public set; }
    public float x1 { get; public set; }
    public float y1 { get; public set; }
    public float x2 { get; public set; }
    public float y2 { get; public set; }
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
    public abstract virtual float get_x1();
    public abstract virtual void set_x1(float value);
    public abstract virtual float get_y1();
    public abstract virtual void set_y1(float value);
    public abstract virtual float get_x2();
    public abstract virtual void set_x2(float value);
    public abstract virtual float get_y2();
    public abstract virtual void set_y2(float value);
}
public interface SharpVectors.Scripting.IJsSvgPathSegCurvetoCubicSmoothAbs {
    public float x { get; public set; }
    public float y { get; public set; }
    public float x2 { get; public set; }
    public float y2 { get; public set; }
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
    public abstract virtual float get_x2();
    public abstract virtual void set_x2(float value);
    public abstract virtual float get_y2();
    public abstract virtual void set_y2(float value);
}
public interface SharpVectors.Scripting.IJsSvgPathSegCurvetoCubicSmoothRel {
    public float x { get; public set; }
    public float y { get; public set; }
    public float x2 { get; public set; }
    public float y2 { get; public set; }
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
    public abstract virtual float get_x2();
    public abstract virtual void set_x2(float value);
    public abstract virtual float get_y2();
    public abstract virtual void set_y2(float value);
}
public interface SharpVectors.Scripting.IJsSvgPathSegCurvetoQuadraticAbs {
    public float x { get; public set; }
    public float y { get; public set; }
    public float x1 { get; public set; }
    public float y1 { get; public set; }
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
    public abstract virtual float get_x1();
    public abstract virtual void set_x1(float value);
    public abstract virtual float get_y1();
    public abstract virtual void set_y1(float value);
}
public interface SharpVectors.Scripting.IJsSvgPathSegCurvetoQuadraticRel {
    public float x { get; public set; }
    public float y { get; public set; }
    public float x1 { get; public set; }
    public float y1 { get; public set; }
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
    public abstract virtual float get_x1();
    public abstract virtual void set_x1(float value);
    public abstract virtual float get_y1();
    public abstract virtual void set_y1(float value);
}
public interface SharpVectors.Scripting.IJsSvgPathSegCurvetoQuadraticSmoothAbs {
    public float x { get; public set; }
    public float y { get; public set; }
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
}
public interface SharpVectors.Scripting.IJsSvgPathSegCurvetoQuadraticSmoothRel {
    public float x { get; public set; }
    public float y { get; public set; }
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
}
public interface SharpVectors.Scripting.IJsSvgPathSegLinetoAbs {
    public float x { get; public set; }
    public float y { get; public set; }
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
}
public interface SharpVectors.Scripting.IJsSvgPathSegLinetoHorizontalAbs {
    public float x { get; public set; }
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
}
public interface SharpVectors.Scripting.IJsSvgPathSegLinetoHorizontalRel {
    public float x { get; public set; }
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
}
public interface SharpVectors.Scripting.IJsSvgPathSegLinetoRel {
    public float x { get; public set; }
    public float y { get; public set; }
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
}
public interface SharpVectors.Scripting.IJsSvgPathSegLinetoVerticalAbs {
    public float y { get; public set; }
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
}
public interface SharpVectors.Scripting.IJsSvgPathSegLinetoVerticalRel {
    public float y { get; public set; }
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
}
public interface SharpVectors.Scripting.IJsSvgPathSegList {
    public ulong numberOfItems { get; }
    public abstract virtual ulong get_numberOfItems();
    public abstract virtual void clear();
    public abstract virtual IJsSvgPathSeg initialize(IJsSvgPathSeg newItem);
    public abstract virtual IJsSvgPathSeg getItem(ulong index);
    public abstract virtual IJsSvgPathSeg insertItemBefore(IJsSvgPathSeg newItem, ulong index);
    public abstract virtual IJsSvgPathSeg replaceItem(IJsSvgPathSeg newItem, ulong index);
    public abstract virtual IJsSvgPathSeg removeItem(ulong index);
    public abstract virtual IJsSvgPathSeg appendItem(IJsSvgPathSeg newItem);
}
public interface SharpVectors.Scripting.IJsSvgPathSegMovetoAbs {
    public float x { get; public set; }
    public float y { get; public set; }
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
}
public interface SharpVectors.Scripting.IJsSvgPathSegMovetoRel {
    public float x { get; public set; }
    public float y { get; public set; }
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
}
public interface SharpVectors.Scripting.IJsSvgPatternElement {
    public IJsSvgAnimatedEnumeration patternUnits { get; }
    public IJsSvgAnimatedEnumeration patternContentUnits { get; }
    public IJsSvgAnimatedTransformList patternTransform { get; }
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public abstract virtual IJsSvgAnimatedEnumeration get_patternUnits();
    public abstract virtual IJsSvgAnimatedEnumeration get_patternContentUnits();
    public abstract virtual IJsSvgAnimatedTransformList get_patternTransform();
    public abstract virtual IJsSvgAnimatedLength get_x();
    public abstract virtual IJsSvgAnimatedLength get_y();
    public abstract virtual IJsSvgAnimatedLength get_width();
    public abstract virtual IJsSvgAnimatedLength get_height();
}
public interface SharpVectors.Scripting.IJsSvgPoint {
    public float x { get; public set; }
    public float y { get; public set; }
    public abstract virtual IJsSvgPoint matrixTransform(IJsSvgMatrix matrix);
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
}
public interface SharpVectors.Scripting.IJsSvgPointList {
    public ulong numberOfItems { get; }
    public abstract virtual ulong get_numberOfItems();
    public abstract virtual void clear();
    public abstract virtual IJsSvgPoint initialize(IJsSvgPoint newItem);
    public abstract virtual IJsSvgPoint getItem(ulong index);
    public abstract virtual IJsSvgPoint insertItemBefore(IJsSvgPoint newItem, ulong index);
    public abstract virtual IJsSvgPoint replaceItem(IJsSvgPoint newItem, ulong index);
    public abstract virtual IJsSvgPoint removeItem(ulong index);
    public abstract virtual IJsSvgPoint appendItem(IJsSvgPoint newItem);
}
public interface SharpVectors.Scripting.IJsSvgPolygonElement {
}
public interface SharpVectors.Scripting.IJsSvgPolylineElement {
}
public interface SharpVectors.Scripting.IJsSvgPreserveAspectRatio {
    public ushort align { get; public set; }
    public ushort meetOrSlice { get; public set; }
    public abstract virtual ushort get_align();
    public abstract virtual void set_align(ushort value);
    public abstract virtual ushort get_meetOrSlice();
    public abstract virtual void set_meetOrSlice(ushort value);
}
public interface SharpVectors.Scripting.IJsSvgRadialGradientElement {
    public IJsSvgAnimatedLength cx { get; }
    public IJsSvgAnimatedLength cy { get; }
    public IJsSvgAnimatedLength r { get; }
    public IJsSvgAnimatedLength fx { get; }
    public IJsSvgAnimatedLength fy { get; }
    public abstract virtual IJsSvgAnimatedLength get_cx();
    public abstract virtual IJsSvgAnimatedLength get_cy();
    public abstract virtual IJsSvgAnimatedLength get_r();
    public abstract virtual IJsSvgAnimatedLength get_fx();
    public abstract virtual IJsSvgAnimatedLength get_fy();
}
public interface SharpVectors.Scripting.IJsSvgRect {
    public float x { get; public set; }
    public float y { get; public set; }
    public float width { get; public set; }
    public float height { get; public set; }
    public abstract virtual float get_x();
    public abstract virtual void set_x(float value);
    public abstract virtual float get_y();
    public abstract virtual void set_y(float value);
    public abstract virtual float get_width();
    public abstract virtual void set_width(float value);
    public abstract virtual float get_height();
    public abstract virtual void set_height(float value);
}
public interface SharpVectors.Scripting.IJsSvgRectElement {
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgAnimatedLength rx { get; }
    public IJsSvgAnimatedLength ry { get; }
    public abstract virtual IJsSvgAnimatedLength get_x();
    public abstract virtual IJsSvgAnimatedLength get_y();
    public abstract virtual IJsSvgAnimatedLength get_width();
    public abstract virtual IJsSvgAnimatedLength get_height();
    public abstract virtual IJsSvgAnimatedLength get_rx();
    public abstract virtual IJsSvgAnimatedLength get_ry();
}
public interface SharpVectors.Scripting.IJsSvgRenderingIntent {
}
public interface SharpVectors.Scripting.IJsSvgScriptElement {
    public string type { get; public set; }
    public abstract virtual string get_type();
    public abstract virtual void set_type(string value);
}
public interface SharpVectors.Scripting.IJsSvgSetElement {
}
public interface SharpVectors.Scripting.IJsSvgStopElement {
    public IJsSvgAnimatedNumber offset { get; }
    public abstract virtual IJsSvgAnimatedNumber get_offset();
}
public interface SharpVectors.Scripting.IJsSvgStringList {
    public ulong numberOfItems { get; }
    public abstract virtual ulong get_numberOfItems();
    public abstract virtual void clear();
    public abstract virtual string initialize(string newItem);
    public abstract virtual string getItem(ulong index);
    public abstract virtual string insertItemBefore(string newItem, ulong index);
    public abstract virtual string replaceItem(string newItem, ulong index);
    public abstract virtual string removeItem(ulong index);
    public abstract virtual string appendItem(string newItem);
}
public interface SharpVectors.Scripting.IJsSvgStylable {
    public IJsSvgAnimatedString className { get; }
    public IJsCssStyleDeclaration style { get; }
    public abstract virtual IJsSvgAnimatedString get_className();
    public abstract virtual IJsCssStyleDeclaration get_style();
    public abstract virtual IJsCssValue getPresentationAttribute(string name);
}
public interface SharpVectors.Scripting.IJsSvgStyleElement {
    public string type { get; public set; }
    public string media { get; public set; }
    public string title { get; public set; }
    public abstract virtual string get_type();
    public abstract virtual void set_type(string value);
    public abstract virtual string get_media();
    public abstract virtual void set_media(string value);
    public abstract virtual string get_title();
    public abstract virtual void set_title(string value);
}
public interface SharpVectors.Scripting.IJsSvgSvgElement {
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public string contentScriptType { get; public set; }
    public string contentStyleType { get; public set; }
    public IJsSvgRect viewport { get; }
    public float pixelUnitToMillimeterX { get; }
    public float pixelUnitToMillimeterY { get; }
    public float screenPixelToMillimeterX { get; }
    public float screenPixelToMillimeterY { get; }
    public bool useCurrentView { get; public set; }
    public IJsSvgViewSpec currentView { get; }
    public float currentScale { get; public set; }
    public IJsSvgPoint currentTranslate { get; }
    public abstract virtual IJsSvgAnimatedLength get_x();
    public abstract virtual IJsSvgAnimatedLength get_y();
    public abstract virtual IJsSvgAnimatedLength get_width();
    public abstract virtual IJsSvgAnimatedLength get_height();
    public abstract virtual string get_contentScriptType();
    public abstract virtual void set_contentScriptType(string value);
    public abstract virtual string get_contentStyleType();
    public abstract virtual void set_contentStyleType(string value);
    public abstract virtual IJsSvgRect get_viewport();
    public abstract virtual float get_pixelUnitToMillimeterX();
    public abstract virtual float get_pixelUnitToMillimeterY();
    public abstract virtual float get_screenPixelToMillimeterX();
    public abstract virtual float get_screenPixelToMillimeterY();
    public abstract virtual bool get_useCurrentView();
    public abstract virtual void set_useCurrentView(bool value);
    public abstract virtual IJsSvgViewSpec get_currentView();
    public abstract virtual float get_currentScale();
    public abstract virtual void set_currentScale(float value);
    public abstract virtual IJsSvgPoint get_currentTranslate();
    public abstract virtual ulong suspendRedraw(ulong max_wait_milliseconds);
    public abstract virtual void unsuspendRedraw(ulong suspend_handle_id);
    public abstract virtual void unsuspendRedrawAll();
    public abstract virtual void forceRedraw();
    public abstract virtual void pauseAnimations();
    public abstract virtual void unpauseAnimations();
    public abstract virtual bool animationsPaused();
    public abstract virtual float getCurrentTime();
    public abstract virtual void setCurrentTime(float seconds);
    public abstract virtual IJsNodeList getIntersectionList(IJsSvgRect rect, IJsSvgElement referenceElement);
    public abstract virtual IJsNodeList getEnclosureList(IJsSvgRect rect, IJsSvgElement referenceElement);
    public abstract virtual bool checkIntersection(IJsSvgElement element, IJsSvgRect rect);
    public abstract virtual bool checkEnclosure(IJsSvgElement element, IJsSvgRect rect);
    public abstract virtual void deselectAll();
    public abstract virtual IJsSvgNumber createSVGNumber();
    public abstract virtual IJsSvgLength createSVGLength();
    public abstract virtual IJsSvgAngle createSVGAngle();
    public abstract virtual IJsSvgPoint createSVGPoint();
    public abstract virtual IJsSvgMatrix createSVGMatrix();
    public abstract virtual IJsSvgRect createSVGRect();
    public abstract virtual IJsSvgTransform createSVGTransform();
    public abstract virtual IJsSvgTransform createSVGTransformFromMatrix(IJsSvgMatrix matrix);
    public abstract virtual IJsElement getElementById(string elementId);
}
public interface SharpVectors.Scripting.IJsSvgSwitchElement {
}
public interface SharpVectors.Scripting.IJsSvgSymbolElement {
}
public interface SharpVectors.Scripting.IJsSvgTests {
    public IJsSvgStringList requiredFeatures { get; }
    public IJsSvgStringList requiredExtensions { get; }
    public IJsSvgStringList systemLanguage { get; }
    public abstract virtual bool hasExtension(string extension);
    public abstract virtual IJsSvgStringList get_requiredFeatures();
    public abstract virtual IJsSvgStringList get_requiredExtensions();
    public abstract virtual IJsSvgStringList get_systemLanguage();
}
public interface SharpVectors.Scripting.IJsSvgTextContentElement {
    public IJsSvgAnimatedLength textLength { get; }
    public IJsSvgAnimatedEnumeration lengthAdjust { get; }
    public abstract virtual IJsSvgAnimatedLength get_textLength();
    public abstract virtual IJsSvgAnimatedEnumeration get_lengthAdjust();
    public abstract virtual long getNumberOfChars();
    public abstract virtual float getComputedTextLength();
    public abstract virtual float getSubStringLength(ulong charnum, ulong nchars);
    public abstract virtual IJsSvgPoint getStartPositionOfChar(ulong charnum);
    public abstract virtual IJsSvgPoint getEndPositionOfChar(ulong charnum);
    public abstract virtual IJsSvgRect getExtentOfChar(ulong charnum);
    public abstract virtual float getRotationOfChar(ulong charnum);
    public abstract virtual long getCharNumAtPosition(IJsSvgPoint point);
    public abstract virtual void selectSubString(ulong charnum, ulong nchars);
}
public interface SharpVectors.Scripting.IJsSvgTextElement {
}
public interface SharpVectors.Scripting.IJsSvgTextPathElement {
    public IJsSvgAnimatedLength startOffset { get; }
    public IJsSvgAnimatedEnumeration method { get; }
    public IJsSvgAnimatedEnumeration spacing { get; }
    public abstract virtual IJsSvgAnimatedLength get_startOffset();
    public abstract virtual IJsSvgAnimatedEnumeration get_method();
    public abstract virtual IJsSvgAnimatedEnumeration get_spacing();
}
public interface SharpVectors.Scripting.IJsSvgTextPositioningElement {
    public IJsSvgAnimatedLengthList x { get; }
    public IJsSvgAnimatedLengthList y { get; }
    public IJsSvgAnimatedLengthList dx { get; }
    public IJsSvgAnimatedLengthList dy { get; }
    public IJsSvgAnimatedNumberList rotate { get; }
    public abstract virtual IJsSvgAnimatedLengthList get_x();
    public abstract virtual IJsSvgAnimatedLengthList get_y();
    public abstract virtual IJsSvgAnimatedLengthList get_dx();
    public abstract virtual IJsSvgAnimatedLengthList get_dy();
    public abstract virtual IJsSvgAnimatedNumberList get_rotate();
}
public interface SharpVectors.Scripting.IJsSvgTitleElement {
}
public interface SharpVectors.Scripting.IJsSvgTransform {
    public ushort type { get; }
    public IJsSvgMatrix matrix { get; }
    public float angle { get; }
    public abstract virtual ushort get_type();
    public abstract virtual IJsSvgMatrix get_matrix();
    public abstract virtual float get_angle();
    public abstract virtual void setMatrix(IJsSvgMatrix matrix);
    public abstract virtual void setTranslate(float tx, float ty);
    public abstract virtual void setScale(float sx, float sy);
    public abstract virtual void setRotate(float angle, float cx, float cy);
    public abstract virtual void setSkewX(float angle);
    public abstract virtual void setSkewY(float angle);
}
public interface SharpVectors.Scripting.IJsSvgTransformable {
    public IJsSvgAnimatedTransformList transform { get; }
    public abstract virtual IJsSvgAnimatedTransformList get_transform();
}
public interface SharpVectors.Scripting.IJsSvgTransformList {
    public ulong numberOfItems { get; }
    public abstract virtual ulong get_numberOfItems();
    public abstract virtual void clear();
    public abstract virtual IJsSvgTransform initialize(IJsSvgTransform newItem);
    public abstract virtual IJsSvgTransform getItem(ulong index);
    public abstract virtual IJsSvgTransform insertItemBefore(IJsSvgTransform newItem, ulong index);
    public abstract virtual IJsSvgTransform replaceItem(IJsSvgTransform newItem, ulong index);
    public abstract virtual IJsSvgTransform removeItem(ulong index);
    public abstract virtual IJsSvgTransform appendItem(IJsSvgTransform newItem);
    public abstract virtual IJsSvgTransform createSVGTransformFromMatrix(IJsSvgMatrix matrix);
    public abstract virtual IJsSvgTransform consolidate();
}
public interface SharpVectors.Scripting.IJsSvgTRefElement {
}
public interface SharpVectors.Scripting.IJsSvgTSpanElement {
}
public interface SharpVectors.Scripting.IJsSvgUnitTypes {
}
public interface SharpVectors.Scripting.IJsSvgUriReference {
    public IJsSvgAnimatedString href { get; }
    public abstract virtual IJsSvgAnimatedString get_href();
}
public interface SharpVectors.Scripting.IJsSvgUseElement {
    public IJsSvgAnimatedLength x { get; }
    public IJsSvgAnimatedLength y { get; }
    public IJsSvgAnimatedLength width { get; }
    public IJsSvgAnimatedLength height { get; }
    public IJsSvgElementInstance instanceRoot { get; }
    public IJsSvgElementInstance animatedInstanceRoot { get; }
    public abstract virtual IJsSvgAnimatedLength get_x();
    public abstract virtual IJsSvgAnimatedLength get_y();
    public abstract virtual IJsSvgAnimatedLength get_width();
    public abstract virtual IJsSvgAnimatedLength get_height();
    public abstract virtual IJsSvgElementInstance get_instanceRoot();
    public abstract virtual IJsSvgElementInstance get_animatedInstanceRoot();
}
public interface SharpVectors.Scripting.IJsSvgViewElement {
    public IJsSvgStringList viewTarget { get; }
    public abstract virtual IJsSvgStringList get_viewTarget();
}
public interface SharpVectors.Scripting.IJsSvgViewSpec {
    public IJsSvgTransformList transform { get; }
    public IJsSvgElement viewTarget { get; }
    public string viewBoxString { get; }
    public string preserveAspectRatioString { get; }
    public string transformString { get; }
    public string viewTargetString { get; }
    public abstract virtual IJsSvgTransformList get_transform();
    public abstract virtual IJsSvgElement get_viewTarget();
    public abstract virtual string get_viewBoxString();
    public abstract virtual string get_preserveAspectRatioString();
    public abstract virtual string get_transformString();
    public abstract virtual string get_viewTargetString();
}
public interface SharpVectors.Scripting.IJsSvgVKernElement {
}
public interface SharpVectors.Scripting.IJsSvgWindow {
    public long innerWidth { get; }
    public long innerHeight { get; }
    public IJsSvgDocument document { get; }
    public IJsSvgDocument svgDocument { get; }
    public IJsStyleSheet defaultStyleSheet { get; }
    public abstract virtual long get_innerWidth();
    public abstract virtual long get_innerHeight();
    public abstract virtual IJsSvgDocument get_document();
    public abstract virtual IJsSvgDocument get_svgDocument();
    public abstract virtual IJsStyleSheet get_defaultStyleSheet();
    public abstract virtual string setTimeout(object scriptOrClosure, ulong delay);
    public abstract virtual void clearTimeout(string token);
    public abstract virtual string setInterval(object scriptOrClosure, ulong delay);
    public abstract virtual void clearInterval(string token);
    public abstract virtual void alert(string message);
    public abstract virtual void setSrc(string newURL);
    public abstract virtual string getSrc();
    public abstract virtual string printNode(IJsNode node);
    public abstract virtual IJsNode parseXML(string xml, IJsDocument owner);
    public abstract virtual void registerEval(object closure);
}
public interface SharpVectors.Scripting.IJsSvgZoomAndPan {
    public ushort zoomAndPan { get; public set; }
    public abstract virtual ushort get_zoomAndPan();
    public abstract virtual void set_zoomAndPan(ushort value);
}
public interface SharpVectors.Scripting.IJsSvgZoomEvent {
    public IJsSvgRect zoomRectScreen { get; }
    public float previousScale { get; }
    public IJsSvgPoint previousTranslate { get; }
    public float newScale { get; }
    public IJsSvgPoint newTranslate { get; }
    public abstract virtual IJsSvgRect get_zoomRectScreen();
    public abstract virtual float get_previousScale();
    public abstract virtual IJsSvgPoint get_previousTranslate();
    public abstract virtual float get_newScale();
    public abstract virtual IJsSvgPoint get_newTranslate();
}
public interface SharpVectors.Scripting.IJsText {
    public abstract virtual IJsText splitText(ulong offset);
}
public interface SharpVectors.Scripting.IJsTimeEvent {
    public IJsAbstractView view { get; }
    public long detail { get; }
    public abstract virtual IJsAbstractView get_view();
    public abstract virtual long get_detail();
    public abstract virtual void initTimeEvent(string typeArg, IJsAbstractView viewArg, long detailArg);
}
public interface SharpVectors.Scripting.IJsUiEvent {
    public IJsAbstractView view { get; }
    public long detail { get; }
    public abstract virtual IJsAbstractView get_view();
    public abstract virtual long get_detail();
    public abstract virtual void initUIEvent(string typeArg, bool canBubbleArg, bool cancelableArg, IJsAbstractView viewArg, long detailArg);
}
public interface SharpVectors.Scripting.IJsViewCss {
    public abstract virtual IJsCssStyleDeclaration getComputedStyle(IJsElement elt, string pseudoElt);
}
public interface SharpVectors.Scripting.IScriptableObject {
}
public interface SharpVectors.Scripting.IScriptableObject`1 {
    public T BaseObject { get; }
    public abstract virtual T get_BaseObject();
}
public interface SharpVectors.Scripting.ISvgRenderingIntent {
}
public interface SharpVectors.Scripting.ISvgScriptClosureHandler {
    public bool IsDisposed { get; }
    public ISvgScriptEngine ScriptEngine { get; }
    public abstract virtual bool get_IsDisposed();
    public abstract virtual ISvgScriptEngine get_ScriptEngine();
    public abstract virtual void AddListener(string type, object listener, object useCapture);
    public abstract virtual void RemoveListener(string type, object listener, object useCapture);
}
[DefaultMemberAttribute("Item")]
public interface SharpVectors.Scripting.ISvgScriptEngine {
    public string Name { get; }
    public string Item { get; }
    public bool IsDisposed { get; }
    public bool IsInitialised { get; }
    public IJsSvgWindow ScriptWindow { get; }
    public ISvgScriptReferenceCache ReferenceCache { get; public set; }
    public ISvgScriptEventHandler ScriptEvents { get; }
    public ISvgScriptClosureHandler ScriptClosures { get; }
    public ISvgScriptTimerHandler ScriptTimers { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Item(string propertyName);
    public abstract virtual bool get_IsDisposed();
    public abstract virtual bool get_IsInitialised();
    public abstract virtual IJsSvgWindow get_ScriptWindow();
    public abstract virtual ISvgScriptReferenceCache get_ReferenceCache();
    public abstract virtual void set_ReferenceCache(ISvgScriptReferenceCache value);
    public abstract virtual ISvgScriptEventHandler get_ScriptEvents();
    public abstract virtual ISvgScriptClosureHandler get_ScriptClosures();
    public abstract virtual ISvgScriptTimerHandler get_ScriptTimers();
    public abstract virtual void Execute(string code);
    public abstract virtual void Initialise();
    public abstract virtual void Close();
}
public interface SharpVectors.Scripting.ISvgScriptEngineProvider {
    public bool IsDisposed { get; }
    public abstract virtual bool get_IsDisposed();
    public abstract virtual ISvgScriptEngine Create();
}
public interface SharpVectors.Scripting.ISvgScriptEventHandler {
    public bool IsDisposed { get; }
    public ISvgScriptEngine ScriptEngine { get; }
    public abstract virtual bool get_IsDisposed();
    public abstract virtual ISvgScriptEngine get_ScriptEngine();
}
public interface SharpVectors.Scripting.ISvgScriptReferenceCache {
    public abstract virtual void Add(object key, IScriptableObject value);
    public abstract virtual bool Remove(object key);
    public abstract virtual bool TryGetValue(object key, IScriptableObject& value);
}
public interface SharpVectors.Scripting.ISvgScriptTimerHandler {
    public bool IsDisposed { get; }
    public ISvgScriptEngine ScriptEngine { get; }
    public abstract virtual bool get_IsDisposed();
    public abstract virtual ISvgScriptEngine get_ScriptEngine();
}
public interface SharpVectors.Scripting.ISvgUnitTypes {
}
public static class SharpVectors.TryCast : object {
    public static bool Cast(B baseObject, D& derivedObject);
}
public class SharpVectors.Xml.DynamicXmlNamespaceManager : XmlNamespaceManager {
    [CompilerGeneratedAttribute]
private ResolveEventHandler Resolve;
    public DynamicXmlNamespaceManager(XmlNameTable xmlNameTable);
    [CompilerGeneratedAttribute]
public void add_Resolve(ResolveEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Resolve(ResolveEventHandler value);
    public virtual string LookupNamespace(string prefix);
}
public class SharpVectors.Xml.DynamicXmlUrlResolver : XmlUrlResolver {
    [CompilerGeneratedAttribute]
private ResolveEventHandler Resolving;
    [CompilerGeneratedAttribute]
private GettingEntityEventHandler GettingEntity;
    public static UrlResolvePolicy UrlDefaultPolicy;
    private static UrlResolvePolicy _urlPolicy;
    public static UrlResolvePolicy UrlPolicy { get; public set; }
    private static DynamicXmlUrlResolver();
    [CompilerGeneratedAttribute]
public void add_Resolving(ResolveEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Resolving(ResolveEventHandler value);
    [CompilerGeneratedAttribute]
public void add_GettingEntity(GettingEntityEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_GettingEntity(GettingEntityEventHandler value);
    public static UrlResolvePolicy get_UrlPolicy();
    public static void set_UrlPolicy(UrlResolvePolicy value);
    public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual Uri ResolveUri(Uri baseUri, string relativeUri);
}
public class SharpVectors.Xml.LocalDtdXmlUrlResolver : XmlUrlResolver {
    private Dictionary`2<string, string> knownDtds;
    public void AddDtd(string publicIdentifier, string localFile);
    public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual Uri ResolveUri(Uri baseUri, string relativeUri);
}
public class SharpVectors.Xml.UrlResolveArgs : ValueType {
    private DtdProcessing _processing;
    private UrlResolveTypes _entity;
    private UrlResolveTypes _element;
    private UrlResolveTypes _document;
    private UrlResolveTypes _font;
    private UrlResolveTypes _image;
    private UrlResolveTypes _style;
    private UrlResolveTypes _script;
    public DtdProcessing Processing { get; public set; }
    public UrlResolveTypes Entity { get; public set; }
    public UrlResolveTypes Element { get; public set; }
    public UrlResolveTypes Document { get; public set; }
    public UrlResolveTypes Font { get; public set; }
    public UrlResolveTypes Image { get; public set; }
    public UrlResolveTypes Style { get; public set; }
    public UrlResolveTypes Script { get; public set; }
    public UrlResolveArgs(DtdProcessing processing);
    public UrlResolveArgs(DtdProcessing processing, UrlResolveTypes entity, UrlResolveTypes element, UrlResolveTypes document, UrlResolveTypes font, UrlResolveTypes image, UrlResolveTypes style, UrlResolveTypes script);
    public DtdProcessing get_Processing();
    public void set_Processing(DtdProcessing value);
    public UrlResolveTypes get_Entity();
    public void set_Entity(UrlResolveTypes value);
    public UrlResolveTypes get_Element();
    public void set_Element(UrlResolveTypes value);
    public UrlResolveTypes get_Document();
    public void set_Document(UrlResolveTypes value);
    public UrlResolveTypes get_Font();
    public void set_Font(UrlResolveTypes value);
    public UrlResolveTypes get_Image();
    public void set_Image(UrlResolveTypes value);
    public UrlResolveTypes get_Style();
    public void set_Style(UrlResolveTypes value);
    public UrlResolveTypes get_Script();
    public void set_Script(UrlResolveTypes value);
}
public class SharpVectors.Xml.UrlResolvePolicy : object {
    private DtdProcessing _processing;
    private UrlResolveTypes _entity;
    private UrlResolveTypes _element;
    private UrlResolveTypes _document;
    private UrlResolveTypes _font;
    private UrlResolveTypes _image;
    private UrlResolveTypes _style;
    private UrlResolveTypes _script;
    public static string UriSchemePack;
    public DtdProcessing Processing { get; }
    public UrlResolveTypes Entity { get; }
    public UrlResolveTypes Element { get; }
    public UrlResolveTypes Document { get; }
    public UrlResolveTypes Font { get; }
    public UrlResolveTypes Image { get; }
    public UrlResolveTypes Style { get; }
    public UrlResolveTypes Script { get; }
    public UrlResolvePolicy(DtdProcessing processing);
    public UrlResolvePolicy(UrlResolveArgs args);
    private static UrlResolvePolicy();
    public DtdProcessing get_Processing();
    public UrlResolveTypes get_Entity();
    public UrlResolveTypes get_Element();
    public UrlResolveTypes get_Document();
    public UrlResolveTypes get_Font();
    public UrlResolveTypes get_Image();
    public UrlResolveTypes get_Style();
    public UrlResolveTypes get_Script();
    public static UrlResolveSource GetSource(string name);
    public static bool Supports(string uriScheme);
    public virtual bool Supports(Uri uri, UrlResolveSource source);
    public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual Uri ResolveUri(Uri baseUri, string relativeUri);
}
public enum SharpVectors.Xml.UrlResolveSource : Enum {
    public int value__;
    public static UrlResolveSource None;
    public static UrlResolveSource Entity;
    public static UrlResolveSource Element;
    public static UrlResolveSource Document;
    public static UrlResolveSource Font;
    public static UrlResolveSource Image;
    public static UrlResolveSource Style;
    public static UrlResolveSource Script;
}
[FlagsAttribute]
public enum SharpVectors.Xml.UrlResolveTypes : Enum {
    public int value__;
    public static UrlResolveTypes None;
    public static UrlResolveTypes Local;
    public static UrlResolveTypes Remote;
    public static UrlResolveTypes Resource;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
