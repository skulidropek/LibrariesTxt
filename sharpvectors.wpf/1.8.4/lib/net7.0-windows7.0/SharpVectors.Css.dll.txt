[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class SharpVectors.Dom.Css.CssAbsPrimitiveLengthValue : CssPrimitiveLengthValue {
    private string _propertyName;
    private XmlElement _element;
    private CssPrimitiveValue _cssValue;
    public string PropertyName { get; }
    public bool ReadOnly { get; }
    public bool IsAbsolute { get; }
    public CssPrimitiveValue CssValue { get; }
    private XmlElement _parentElement { get; }
    private CssXmlDocument _ownerDocument { get; }
    public CssAbsPrimitiveLengthValue(CssPrimitiveValue cssValue, string propertyName, XmlElement element);
    public string get_PropertyName();
    public virtual bool get_ReadOnly();
    public virtual bool get_IsAbsolute();
    public CssPrimitiveValue get_CssValue();
    private XmlElement get__parentElement();
    private CssXmlDocument get__ownerDocument();
    private double GetFontSize();
    private double GetPxLength();
    private double GetInLength();
    public virtual double GetFloatValue(CssPrimitiveType unitType);
}
public class SharpVectors.Dom.Css.CssAbsPrimitiveValue : CssPrimitiveValue {
    private string _propertyName;
    private XmlElement _element;
    private CssPrimitiveValue _cssValue;
    public string CssText { get; }
    public CssPrimitiveType PrimitiveType { get; }
    public bool IsAbsolute { get; }
    public CssPrimitiveValue CssValue { get; }
    public CssAbsPrimitiveValue(CssPrimitiveValue cssValue, string propertyName, XmlElement element);
    public virtual string get_CssText();
    public virtual CssPrimitiveType get_PrimitiveType();
    public virtual bool get_IsAbsolute();
    public CssPrimitiveValue get_CssValue();
    public virtual double GetFloatValue(CssPrimitiveType unitType);
    public virtual string GetStringValue();
    public virtual ICssRect GetRectValue();
    public virtual ICssColor GetRgbColorValue();
}
public class SharpVectors.Dom.Css.CssAbsValue : CssValue {
    private string _propertyName;
    private CssValue _cssValue;
    private XmlElement _element;
    public bool IsAbsolute { get; }
    public string CssText { get; }
    public CssValueType CssValueType { get; }
    public CssAbsValue(CssValue cssValue, string propertyName, XmlElement element);
    public virtual bool get_IsAbsolute();
    public virtual string get_CssText();
    public virtual CssValueType get_CssValueType();
}
public class SharpVectors.Dom.Css.CssChangeHandler : MulticastDelegate {
    public CssChangeHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SharpVectors.Dom.Css.CssCharsetRule : CssRule {
    private static Regex regex;
    private string _encoding;
    public string Encoding { get; public set; }
    public CssRuleType Type { get; }
    internal CssCharsetRule(Match match, object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
    private static CssCharsetRule();
    internal static CssRule Parse(String& css, object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
    public sealed virtual string get_Encoding();
    public sealed virtual void set_Encoding(string value);
    public virtual CssRuleType get_Type();
}
public class SharpVectors.Dom.Css.CssCollectedProperty : object {
    private string _name;
    private int _specificity;
    private CssStyleSheetType _origin;
    private CssValue _cssValue;
    private string _priority;
    public string Name { get; public set; }
    public int Specificity { get; public set; }
    public CssStyleSheetType Origin { get; public set; }
    public CssValue CssValue { get; public set; }
    public string Priority { get; public set; }
    public CssCollectedProperty(string name, int specificity, CssValue cssValue, CssStyleSheetType origin, string priority);
    public string get_Name();
    public void set_Name(string value);
    public int get_Specificity();
    public void set_Specificity(int value);
    public CssStyleSheetType get_Origin();
    public void set_Origin(CssStyleSheetType value);
    public CssValue get_CssValue();
    public void set_CssValue(CssValue value);
    public string get_Priority();
    public void set_Priority(string value);
    internal bool IsBetterThen(CssCollectedProperty existing);
}
[DefaultMemberAttribute("Item")]
public class SharpVectors.Dom.Css.CssCollectedStyleDeclaration : CssStyleDeclaration {
    private XmlElement _element;
    private IDictionary`2<string, CssCollectedProperty> _collectedStyles;
    public ulong Length { get; }
    public string CssText { get; public set; }
    public string Item { get; }
    public CssCollectedStyleDeclaration(XmlElement elm);
    public void CollectProperty(string name, int specificity, CssValue cssValue, CssStyleSheetType origin, string priority);
    public CssStyleSheetType GetPropertyOrigin(string propertyName);
    public virtual string GetPropertyPriority(string propertyName);
    private ICssValue getParentStyle(string propertyName);
    public virtual ICssValue GetPropertyCssValue(string propertyName);
    public virtual string GetPropertyValue(string propertyName);
    public virtual ulong get_Length();
    public virtual string get_CssText();
    public virtual void set_CssText(string value);
    public virtual string get_Item(ulong index);
}
public class SharpVectors.Dom.Css.CssColor : object {
    private static IDictionary`2<string, string> _knownColors;
    private static ISet`1<string> _systemColorNames;
    private bool _isVarColor;
    private string _name;
    private CssPrimitiveValue _red;
    private CssPrimitiveValue _green;
    private CssPrimitiveValue _blue;
    private CssPrimitiveValue _alpha;
    private static Char[] ColorSeparators;
    public string Name { get; }
    public string CssText { get; }
    public bool IsSystemColor { get; }
    public bool IsVarColor { get; }
    public ICssPrimitiveValue Red { get; }
    public ICssPrimitiveValue Green { get; }
    public ICssPrimitiveValue Blue { get; }
    public ICssPrimitiveValue Alpha { get; }
    public bool HasAlpha { get; }
    public CssColor(int red, int green, int blue);
    public CssColor(int red, int green, int blue, int alpha);
    public CssColor(string str);
    private static CssColor();
    public sealed virtual string get_Name();
    public string get_CssText();
    public sealed virtual bool get_IsSystemColor();
    public sealed virtual bool get_IsVarColor();
    public sealed virtual ICssPrimitiveValue get_Red();
    public sealed virtual ICssPrimitiveValue get_Green();
    public sealed virtual ICssPrimitiveValue get_Blue();
    public sealed virtual ICssPrimitiveValue get_Alpha();
    public sealed virtual bool get_HasAlpha();
    private void ParseColor(string str);
    private void SetPrimitiveValues(int red, int green, int blue);
    private void SetPrimitiveValues(int red, int green, int blue, int alpha);
    private void SetPrimitiveValues(string red, string green, string blue);
    private void SetPrimitiveValues(string red, string green, string blue, string alpha);
    private void SetPrimitiveValues(ColorRGBA color);
    private void SetPrimitiveValues(ColorRGBA color, string alpha);
}
public class SharpVectors.Dom.Css.CssFontFaceRule : CssRule {
    private static Regex _reRule;
    private CssStyleDeclaration _style;
    public bool IsEmbedded { get; }
    public string EmbeddedMimeType { get; }
    public string EmbeddedData { get; }
    public string EmbeddedEncoding { get; }
    public ICssStyleDeclaration Style { get; }
    public string FontUrl { get; }
    public string FontFamily { get; public set; }
    public string Src { get; public set; }
    public string FontStyle { get; public set; }
    public string FontWeight { get; public set; }
    public string Stretch { get; public set; }
    public string UnicodeRange { get; public set; }
    public string FontVariant { get; public set; }
    public string FeatureSettings { get; public set; }
    public CssRuleType Type { get; }
    public string CssText { get; public set; }
    internal CssFontFaceRule(object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
    private static CssFontFaceRule();
    public bool get_IsEmbedded();
    public string get_EmbeddedMimeType();
    public string get_EmbeddedData();
    public string get_EmbeddedEncoding();
    public sealed virtual ICssStyleDeclaration get_Style();
    public string get_FontUrl();
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public string get_Src();
    public void set_Src(string value);
    public string get_FontStyle();
    public void set_FontStyle(string value);
    public string get_FontWeight();
    public void set_FontWeight(string value);
    public string get_Stretch();
    public void set_Stretch(string value);
    public string get_UnicodeRange();
    public void set_UnicodeRange(string value);
    public string get_FontVariant();
    public void set_FontVariant(string value);
    public string get_FeatureSettings();
    public void set_FeatureSettings(string value);
    public virtual CssRuleType get_Type();
    public virtual string get_CssText();
    public virtual void set_CssText(string value);
    internal static CssFontFaceRule Parse(String& css, object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
}
public class SharpVectors.Dom.Css.CssImportRule : CssRule {
    private static Regex _mediaRegex;
    private static Regex _urlRegex;
    private CssStyleSheet _styleSheet;
    private MediaList _media;
    private string _href;
    public ICssStyleSheet StyleSheet { get; }
    public IMediaList Media { get; }
    public string Href { get; }
    public CssRuleType Type { get; }
    internal CssImportRule(Match match, object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
    internal CssImportRule(Group group, object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
    private static CssImportRule();
    internal static CssRule Parse(String& css, object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
    protected internal virtual void GetStylesForElement(XmlElement elt, string pseudoElt, MediaList ml, CssCollectedStyleDeclaration csd);
    public sealed virtual ICssStyleSheet get_StyleSheet();
    public sealed virtual IMediaList get_Media();
    public sealed virtual string get_Href();
    public virtual CssRuleType get_Type();
}
public class SharpVectors.Dom.Css.CssMediaRule : CssRule {
    private static Regex regex;
    private MediaList _media;
    private CssRuleList _cssRules;
    public ICssRuleList CssRules { get; }
    public IMediaList Media { get; }
    public CssRuleType Type { get; }
    internal CssMediaRule(Match match, object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
    public CssMediaRule(string cssText, object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
    private static CssMediaRule();
    protected internal virtual void GetStylesForElement(XmlElement elt, string pseudoElt, MediaList ml, CssCollectedStyleDeclaration csd);
    internal static CssRule Parse(String& css, object parent, bool readOnly, String[] replacedStrings, CssStyleSheetType origin);
    internal static CssRule Parse(String& css, object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
    public sealed virtual void DeleteRule(ulong index);
    public sealed virtual ulong InsertRule(string rule, ulong index);
    public sealed virtual ICssRuleList get_CssRules();
    public sealed virtual IMediaList get_Media();
    public virtual CssRuleType get_Type();
}
public static class SharpVectors.Dom.Css.CssNumber : object {
    private static NumberFormatInfo _format;
    public static NumberFormatInfo Format { get; }
    public static NumberFormatInfo get_Format();
}
public class SharpVectors.Dom.Css.CssPageRule : CssRule {
    private static Regex regex;
    private string _selectorText;
    private CssStyleDeclaration _style;
    public string SelectorText { get; public set; }
    public ICssStyleDeclaration Style { get; }
    public CssRuleType Type { get; }
    internal CssPageRule(Match match, object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
    private static CssPageRule();
    internal static CssRule Parse(String& css, object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
    public sealed virtual string get_SelectorText();
    public sealed virtual void set_SelectorText(string value);
    public sealed virtual ICssStyleDeclaration get_Style();
    public virtual CssRuleType get_Type();
}
public class SharpVectors.Dom.Css.CssPrimitiveAngleValue : CssPrimitiveValue {
    private static Regex _reAngle;
    public string CssText { get; }
    public CssPrimitiveAngleValue(string number, string unit, bool readOnly);
    public CssPrimitiveAngleValue(string cssText, bool readOnly);
    public CssPrimitiveAngleValue(double number, string unit, bool readOnly);
    private static CssPrimitiveAngleValue();
    public virtual string get_CssText();
    public virtual double GetFloatValue(CssPrimitiveType unitType);
    protected virtual void OnSetCssText(string cssText);
    private void SetUnitType(string unit);
    private double GetDegAngle();
}
public class SharpVectors.Dom.Css.CssPrimitiveColorValue : CssPrimitiveValue {
    public string CssText { get; }
    public CssPrimitiveColorValue(int color, bool readOnly);
    public CssPrimitiveColorValue(string cssText, bool readOnly);
    public virtual string get_CssText();
    protected virtual void OnSetCssText(string cssText);
    public virtual double GetFloatValue(CssPrimitiveType unitType);
}
public class SharpVectors.Dom.Css.CssPrimitiveLengthValue : CssPrimitiveValue {
    private static Regex _reLength;
    protected static double Dpi;
    protected static double CmPerIn;
    public string CssText { get; }
    public CssPrimitiveLengthValue(string number, string unit, bool readOnly);
    public CssPrimitiveLengthValue(string cssText, bool readOnly);
    public CssPrimitiveLengthValue(double number, string unit, bool readOnly);
    private static CssPrimitiveLengthValue();
    public virtual string get_CssText();
    public virtual CssValue GetAbsoluteValue(string propertyName, XmlElement elm);
    public virtual double GetFloatValue(CssPrimitiveType unitType);
    protected virtual void OnSetCssText(string cssText);
    private void SetCssText(string cssText);
    private void SetUnitType(string unit);
    private double GetPxLength();
    private double GetInchLength();
}
public class SharpVectors.Dom.Css.CssPrimitiveRgbValue : CssPrimitiveValue {
    private static Regex _reColor;
    private static ISet`1<string> _namedColors;
    public string CssText { get; public set; }
    public CssPrimitiveRgbValue(string cssText, bool readOnly);
    private static CssPrimitiveRgbValue();
    public virtual string get_CssText();
    public virtual void set_CssText(string value);
    public static bool IsColorName(string cssText);
    protected virtual void OnSetCssText(string cssText);
}
public class SharpVectors.Dom.Css.CssPrimitiveValue : CssValue {
    private string _stringValue;
    private CssRect _rectValue;
    protected double _floatValue;
    protected CssColor _colorValue;
    private CssPrimitiveType _primitiveType;
    public string PrimitiveTypeAsString { get; }
    public string CssText { get; public set; }
    public CssPrimitiveType PrimitiveType { get; protected set; }
    private CssPrimitiveValue(Match match, bool readOnly);
    protected CssPrimitiveValue(string cssText, bool readOnly);
    public string get_PrimitiveTypeAsString();
    public virtual string get_CssText();
    public virtual void set_CssText(string value);
    public static CssPrimitiveValue Create(Match match, bool readOnly);
    public virtual CssValue GetAbsoluteValue(string propertyName, XmlElement elm);
    protected virtual void OnSetCssText(string cssText);
    public virtual void SetFloatValue(CssPrimitiveType unitType, double floatValue);
    protected void SetFloatValue(string floatValue);
    protected void SetFloatValue(double floatValue);
    public virtual double GetFloatValue(CssPrimitiveType unitType);
    public virtual void SetStringValue(CssPrimitiveType stringType, string stringValue);
    public virtual string GetStringValue();
    public virtual ICssCounter GetCounterValue();
    public virtual ICssRect GetRectValue();
    public virtual ICssColor GetRgbColorValue();
    protected void SetPrimitiveType(CssPrimitiveType type);
    public virtual CssPrimitiveType get_PrimitiveType();
    protected virtual void set_PrimitiveType(CssPrimitiveType value);
}
public class SharpVectors.Dom.Css.CssPrimitiveVarsValue : CssPrimitiveValue {
    private static Regex _reParser;
    private string _varName;
    private string _varValue;
    public string VarName { get; public set; }
    public string VarValue { get; public set; }
    public CssPrimitiveVarsValue(string cssText, bool readOnly);
    private static CssPrimitiveVarsValue();
    public string get_VarName();
    public void set_VarName(string value);
    public string get_VarValue();
    public void set_VarValue(string value);
    private void ParseString(string cssText);
}
internal class SharpVectors.Dom.Css.CssProperty : object {
    public bool IsInherited;
    public string InitialValue;
    public CssValue InitialCssValue;
    internal CssProperty(bool isInherited, string initialValue);
}
public class SharpVectors.Dom.Css.CssPropertyProfile : object {
    private static CssPropertyProfile _svgProfile;
    private IDictionary`2<string, CssProperty> _properties;
    public int Length { get; }
    public static CssPropertyProfile SvgProfile { get; }
    public int get_Length();
    public static CssPropertyProfile get_SvgProfile();
    public ICollection`1<string> GetAllPropertyNames();
    public string GetInitialValue(string propertyName);
    public CssValue GetInitialCssValue(string propertyName);
    public bool IsInheritable(string propertyName);
    public void Add(string propertyName, bool isInheritable, string initialValue);
    private void InitializeDefaults();
}
public class SharpVectors.Dom.Css.CssRect : object {
    private static Regex _delim;
    private bool readOnly;
    private CssPrimitiveValue _left;
    private CssPrimitiveValue _bottom;
    private CssPrimitiveValue _right;
    private CssPrimitiveValue _top;
    public ICssPrimitiveValue Left { get; }
    public ICssPrimitiveValue Bottom { get; }
    public ICssPrimitiveValue Right { get; }
    public ICssPrimitiveValue Top { get; }
    public CssRect(string rectString, bool readOnly);
    private static CssRect();
    public sealed virtual ICssPrimitiveValue get_Left();
    public sealed virtual ICssPrimitiveValue get_Bottom();
    public sealed virtual ICssPrimitiveValue get_Right();
    public sealed virtual ICssPrimitiveValue get_Top();
}
public abstract class SharpVectors.Dom.Css.CssRule : object {
    private static Regex _reReplace;
    protected CssStyleSheetType _origin;
    private IList`1<string> _replacedStrings;
    protected bool _isReadOnly;
    private CssStyleSheet _parentStyleSheet;
    private CssRule _parentRule;
    public ICssStyleSheet ParentStyleSheet { get; }
    public ICssRule ParentRule { get; }
    public CssRuleType Type { get; }
    public string CssText { get; public set; }
    protected CssRule(object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
    private static CssRule();
    private string StringReplaceEvaluator(Match match);
    internal string DeReplaceStrings(string s);
    protected internal virtual void GetStylesForElement(XmlElement elt, string pseudoElt, MediaList ml, CssCollectedStyleDeclaration csd);
    public XmlNode ResolveOwnerNode();
    public sealed virtual ICssStyleSheet get_ParentStyleSheet();
    public sealed virtual ICssRule get_ParentRule();
    public abstract virtual CssRuleType get_Type();
    public virtual string get_CssText();
    public virtual void set_CssText(string value);
}
[DefaultMemberAttribute("Item")]
public class SharpVectors.Dom.Css.CssRuleList : object {
    private CssStyleSheetType _origin;
    private object _parent;
    private bool _isReadOnly;
    private bool _hasFontRule;
    private IList`1<CssRule> _cssRules;
    public ulong Length { get; }
    public ICssRule Item { get; public set; }
    public bool HasFontRule { get; internal set; }
    public ICssRule Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal CssRuleList(String& cssText, object parent, IList`1<string> replacedStrings, CssStyleSheetType origin);
    public CssRuleList(String& cssText, object parent, IList`1<string> replacedStrings, bool readOnly, CssStyleSheetType origin);
    internal void GetStylesForElement(XmlElement elt, string pseudoElt, MediaList ml, CssCollectedStyleDeclaration csd);
    internal ulong InsertRule(CssRule rule, ulong index);
    internal ulong InsertRule(CssRule rule);
    internal void DeleteRule(ulong index);
    public sealed virtual ulong get_Length();
    public sealed virtual ICssRule get_Item(ulong index);
    public void set_Item(ulong index, ICssRule value);
    public sealed virtual bool get_HasFontRule();
    internal void set_HasFontRule(bool value);
    public sealed virtual ICssRule get_Item(int index);
    public sealed virtual void set_Item(int index, ICssRule value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(ICssRule item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ICssRule item);
    public sealed virtual void CopyTo(ICssRule[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<ICssRule> GetEnumerator();
    public sealed virtual int IndexOf(ICssRule item);
    public sealed virtual void Insert(int index, ICssRule item);
    public sealed virtual bool Remove(ICssRule item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void Parse(String& css, object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
    private CssRule TryParse(String& css, object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
}
internal class SharpVectors.Dom.Css.CssStyleBlock : object {
    private CssStyleSheetType _origin;
    private string _name;
    private string _value;
    private string _priority;
    private int _specificity;
    private CssValue _cssValue;
    public string CssText { get; }
    public CssStyleSheetType Origin { get; public set; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    public string Priority { get; public set; }
    public int Specificity { get; public set; }
    public CssValue CssValue { get; public set; }
    public CssStyleBlock(string name, string val, string priority, CssStyleSheetType origin);
    public CssStyleBlock(string name, string val, string priority, int specificity, CssStyleSheetType origin);
    public CssStyleBlock(CssStyleBlock style, int specificity, CssStyleSheetType origin);
    public string get_CssText();
    public CssStyleSheetType get_Origin();
    public void set_Origin(CssStyleSheetType value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    public string get_Priority();
    public void set_Priority(string value);
    public int get_Specificity();
    public void set_Specificity(int value);
    public CssValue get_CssValue();
    public void set_CssValue(CssValue value);
}
[DefaultMemberAttribute("Item")]
public class SharpVectors.Dom.Css.CssStyleDeclaration : object {
    [ThreadStaticAttribute]
private static CssStyleDeclaration _emptyCssStyle;
    internal static string UrlName;
    internal static string UrlMime;
    internal static string UrlData;
    internal static string UrlEncoding;
    private static Regex _reComment;
    private static Regex _styleRegex;
    private static Regex _reUrls;
    private static Regex _reSplitCss;
    private static Regex _reSplitCssOther;
    private static Regex _reUrlTidy;
    private static Regex _reEmbeddedUrl;
    private static ISet`1<string> _validUrlProps;
    private static Regex _reFont;
    private static Regex _reFontStretch;
    private static Regex _reFontWeight;
    private bool _readOnly;
    private CssStyleSheetType _origin;
    private IDictionary`2<string, CssStyleBlock> _styles;
    private ICssRule _parentRule;
    public bool ReadOnly { get; }
    public CssStyleSheetType Origin { get; }
    public ICssRule ParentRule { get; }
    public ulong Length { get; }
    public string CssText { get; public set; }
    public string Item { get; }
    internal static CssStyleDeclaration EmptyCssStyle { get; }
    public CssStyleDeclaration(String& css, CssRule parentRule, bool readOnly, CssStyleSheetType origin);
    public CssStyleDeclaration(string css, CssRule parentRule, bool readOnly, CssStyleSheetType origin);
    private static CssStyleDeclaration();
    public bool get_ReadOnly();
    public CssStyleSheetType get_Origin();
    public void GetStylesForElement(CssCollectedStyleDeclaration csd, int specificity);
    public static string GetValidUrlFromCSS(string cssStr, string validProperty);
    public static IList`1<string> GetValidUrlsFromCSS(string cssStr);
    private string ParseString(string cssText);
    public sealed virtual void SetProperty(string propertyName, string value, string priority);
    public void SetPropertyValue(string propertyName, string value);
    public virtual string GetPropertyPriority(string propertyName);
    public sealed virtual string RemoveProperty(string propertyName);
    public virtual ICssValue GetPropertyCssValue(string propertyName);
    public virtual string GetPropertyValue(string propertyName);
    public virtual string GetPropertyValue(String[] propertyNames);
    public sealed virtual ICssRule get_ParentRule();
    public virtual ulong get_Length();
    public virtual string get_CssText();
    public virtual void set_CssText(string value);
    public virtual string get_Item(ulong index);
    internal static CssStyleDeclaration get_EmptyCssStyle();
    internal CssStyleBlock Get(string key);
    internal string GetValue(string key);
    internal bool Contains(string key);
}
public class SharpVectors.Dom.Css.CssStyleRule : CssRule {
    internal static string NsPattern;
    internal static string AttributeValueCheck;
    internal static string RegexSelector;
    private static string StyleRule;
    private static Regex _reStyleRule;
    private CssXPathSelector[] _xPathSelectors;
    private CssStyleDeclaration _style;
    public string SelectorText { get; public set; }
    public string CssText { get; }
    public ICssStyleDeclaration Style { get; }
    public CssRuleType Type { get; }
    internal CssStyleRule(Match match, object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
    private static CssStyleRule();
    protected internal virtual void GetStylesForElement(XmlElement elt, string pseudoElt, MediaList ml, CssCollectedStyleDeclaration csd);
    internal static CssRule Parse(String& css, object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
    public sealed virtual string get_SelectorText();
    public sealed virtual void set_SelectorText(string value);
    public virtual string get_CssText();
    public sealed virtual ICssStyleDeclaration get_Style();
    public virtual CssRuleType get_Type();
}
public class SharpVectors.Dom.Css.CssStyleSheet : StyleSheet {
    private static Regex _reComment;
    private static Regex _reEscape;
    private CssStyleSheetType _origin;
    private IList`1<string> _alReplacedStrings;
    private CssRuleList _cssRules;
    private CssRule _ownerRule;
    public ICssRuleList CssRules { get; }
    public ICssRule OwnerRule { get; }
    internal CssStyleSheet(XmlProcessingInstruction pi, CssStyleSheetType origin);
    internal CssStyleSheet(XmlElement styleElement, CssStyleSheetType origin);
    public CssStyleSheet(XmlNode ownerNode, string href, string title, string media, CssRule ownerRule, CssStyleSheetType origin);
    private static CssStyleSheet();
    protected internal virtual void GetStylesForElement(XmlElement elt, string pseudoElt, MediaList ml, CssCollectedStyleDeclaration csd);
    private string StringReplaceEvaluator(Match match);
    private string PreProcessContent();
    public sealed virtual void DeleteRule(ulong index);
    public sealed virtual ulong InsertRule(string rule, ulong index);
    public sealed virtual ICssRuleList get_CssRules();
    public sealed virtual ICssRule get_OwnerRule();
}
public enum SharpVectors.Dom.Css.CssStyleSheetType : Enum {
    public int value__;
    public static CssStyleSheetType UserAgent;
    public static CssStyleSheetType Author;
    public static CssStyleSheetType User;
    public static CssStyleSheetType Inline;
    public static CssStyleSheetType NonCssPresentationalHints;
    public static CssStyleSheetType Collector;
    public static CssStyleSheetType Unknown;
}
public class SharpVectors.Dom.Css.CssUnknownRule : CssRule {
    private static Regex regex;
    public CssRuleType Type { get; }
    internal CssUnknownRule(object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
    private static CssUnknownRule();
    public virtual CssRuleType get_Type();
    internal static CssRule Parse(String& css, object parent, bool readOnly, IList`1<string> replacedStrings, CssStyleSheetType origin);
}
public class SharpVectors.Dom.Css.CssValue : object {
    private static string numberPattern;
    public static string LengthUnitPattern;
    public static string AngleUnitPattern;
    public static string LengthPattern;
    public static string AnglePattern;
    private static string cssPrimValuePattern;
    private static Regex _reCssPrimitiveValue;
    private static Regex _reCssValueList;
    private bool _readOnly;
    private string _cssText;
    protected CssValueType _cssValueType;
    public bool ReadOnly { get; }
    public string CssText { get; public set; }
    public CssValueType CssValueType { get; }
    public bool IsAbsolute { get; }
    public CssValue(CssValueType type, string cssText, bool readOnly);
    private static CssValue();
    public virtual CssValue GetAbsoluteValue(string propertyName, XmlElement elm);
    public static CssValue GetCssValue(string cssText, bool readOnly);
    public virtual bool get_ReadOnly();
    public virtual string get_CssText();
    public virtual void set_CssText(string value);
    public virtual CssValueType get_CssValueType();
    public virtual bool get_IsAbsolute();
    public virtual string ToString();
}
public class SharpVectors.Dom.Css.CssXmlDocument : Document {
    internal MediaList _currentMedia;
    internal IList`1<String[]> _styleElements;
    private bool _isStatic;
    private bool _isLoaded;
    private StyleSheetList _styleSheets;
    private CssPropertyProfile _cssPropertyProfile;
    private CssStyleSheet _userStyleSheet;
    private CssStyleSheet _userAgentStyleSheet;
    public CssStyleSheet UserAgentStyleSheet { get; public set; }
    public CssStyleSheet UserStyleSheet { get; public set; }
    public bool Static { get; public set; }
    public MediaList Media { get; public set; }
    public CssPropertyProfile CssPropertyProfile { get; public set; }
    public string Url { get; }
    public IStyleSheetList StyleSheets { get; }
    public bool IsLoaded { get; }
    public IDocumentView Document { get; }
    public CssXmlDocument(XmlNameTable nt);
    public CssStyleSheet get_UserAgentStyleSheet();
    public void set_UserAgentStyleSheet(CssStyleSheet value);
    public CssStyleSheet get_UserStyleSheet();
    public void set_UserStyleSheet(CssStyleSheet value);
    public bool get_Static();
    public void set_Static(bool value);
    public MediaList get_Media();
    public void set_Media(MediaList value);
    public CssPropertyProfile get_CssPropertyProfile();
    public void set_CssPropertyProfile(CssPropertyProfile value);
    public string get_Url();
    public sealed virtual IStyleSheetList get_StyleSheets();
    public bool get_IsLoaded();
    public sealed virtual IDocumentView get_Document();
    public virtual XmlElement CreateElement(string prefix, string localName, string ns);
    public virtual void Load(string filename);
    public virtual void LoadXml(string xml);
    public virtual void Load(XmlReader reader);
    public virtual void Load(Stream inStream);
    public void AddStyleElement(string ns, string localName);
    public void SetUserAgentStyleSheet(string href);
    public void SetUserStyleSheet(string href);
    public void AddStyleSheet(string href);
    public WebResponse GetResource(Uri absoluteUri);
    protected virtual void OnLoaded();
    public sealed virtual ICssStyleDeclaration GetOverrideStyle(XmlElement elt, string pseudoElt);
    public sealed virtual ICssStyleDeclaration GetComputedStyle(XmlElement elt, string pseudoElt);
    public void NodeChangedEvent(object src, XmlNodeChangedEventArgs args);
    private void SetupNodeChangeListeners();
}
public class SharpVectors.Dom.Css.CssXmlElement : Element {
    private static Regex _reComment;
    protected bool _isImported;
    protected CssXmlElement _importNode;
    protected CssXmlDocument _importDocument;
    protected ICssStyleDeclaration _cachedCSD;
    private ICssStyleDeclaration _style;
    [CompilerGeneratedAttribute]
private NodeChangeHandler attributeChangeHandler;
    [CompilerGeneratedAttribute]
private NodeChangeHandler elementChangeHandler;
    [CompilerGeneratedAttribute]
private NodeChangeHandler parentNodeChangeHandler;
    [CompilerGeneratedAttribute]
private NodeChangeHandler childNodeChangeHandler;
    [CompilerGeneratedAttribute]
private CssChangeHandler cssChangeHandler;
    public bool Imported { get; public set; }
    public ICssStyleDeclaration Style { get; }
    public CssXmlDocument OwnerDocument { get; }
    public CssXmlElement(string prefix, string localname, string ns, CssXmlDocument doc);
    private static CssXmlElement();
    public bool get_Imported();
    public void set_Imported(bool value);
    public sealed virtual ICssStyleDeclaration get_Style();
    public virtual ICssStyleDeclaration GetComputedStyle(string pseudoElt);
    public virtual string GetComputedStringValue(string propertyName, string pseudoElt);
    public virtual ICssValue GetComputedCssValue(string propertyName, string pseudoElt);
    public CssXmlDocument get_OwnerDocument();
    public virtual bool Supports(string feature, string version);
    public virtual void CssInvalidate();
    public virtual void ElementChange(object src, XmlNodeChangedEventArgs args);
    public virtual void ParentNodeChange(object src, XmlNodeChangedEventArgs args);
    public virtual void AttributeChange(object src, XmlNodeChangedEventArgs args);
    public virtual void HandleAttributeChange(XmlAttribute attribute);
    public virtual void ChildNodeChange(object src, XmlNodeChangedEventArgs args);
    protected void FireCssChange();
    protected void FireAttributeChange(object src, XmlNodeChangedEventArgs args);
    protected void FireElementChange(object src, XmlNodeChangedEventArgs args);
    protected void FireParentNodeChange(object src, XmlNodeChangedEventArgs args, bool fireEvent);
    protected void FireChildNodeChange(object src, XmlNodeChangedEventArgs args, bool fireEvent);
    [CompilerGeneratedAttribute]
public virtual void add_attributeChangeHandler(NodeChangeHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_attributeChangeHandler(NodeChangeHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_elementChangeHandler(NodeChangeHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_elementChangeHandler(NodeChangeHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_parentNodeChangeHandler(NodeChangeHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_parentNodeChangeHandler(NodeChangeHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_childNodeChangeHandler(NodeChangeHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_childNodeChangeHandler(NodeChangeHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_cssChangeHandler(CssChangeHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_cssChangeHandler(CssChangeHandler value);
}
public class SharpVectors.Dom.Css.CssXPathSelector : object {
    internal static Regex reSelector;
    private static Regex _reAttributeValueCheck;
    private static Regex _reLang;
    private static Regex _reContains;
    private static string Nth;
    private static Regex _reNth;
    private XPathSelectorStatus _status;
    private string _cssSelector;
    private int _specificity;
    private string _sXpath;
    private XPathExpression _xpath;
    private IDictionary`2<string, string> _nsTable;
    public string CssSelector { get; }
    public string XPath { get; }
    public int Specificity { get; }
    public CssXPathSelector(string selector);
    public CssXPathSelector(string selector, IDictionary`2<string, string> namespaceTable);
    private static CssXPathSelector();
    public string get_CssSelector();
    public string get_XPath();
    public int get_Specificity();
    private void AddSpecificity(int a, int b, int c);
    private string NsToXPath(Match match);
    private string TypeToXPath(Match match);
    private string ClassToXPath(Match match);
    private string IdToXPath(Match match);
    private string GetAttributeMatch(string attSelector);
    private string PredicatesToXPath(Match match);
    private string PseudoClassesToXPath(Match match, XPathNavigator nav);
    private void SeperatorToXPath(Match match, StringBuilder xpath, string cur);
    internal void GetXPath(XPathNavigator nav);
    private XmlNamespaceManager GetNSManager();
    internal void Compile(XPathNavigator nav);
    public bool Matches(XPathNavigator nav);
}
public class SharpVectors.Dom.Css.NodeChangeHandler : MulticastDelegate {
    public NodeChangeHandler(object object, IntPtr method);
    public virtual void Invoke(object src, XmlNodeChangedEventArgs args);
    public virtual IAsyncResult BeginInvoke(object src, XmlNodeChangedEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SharpVectors.Dom.Css.StaticSection : object {
    private bool _previousStatic;
    private CssXmlDocument _cssXmlDocument;
    private StaticSection(CssXmlDocument cssXmlDocument);
    public sealed virtual void Dispose();
    public static IDisposable Use(CssXmlDocument cssXmlDocument);
}
[DefaultMemberAttribute("Item")]
internal class SharpVectors.Dom.Css.StrSlice : ValueType {
    private int _pos;
    private int _length;
    private string _text;
    public static StrSlice Empty;
    public string Text { get; }
    public int Pos { get; }
    public int Length { get; }
    public bool IsEmpty { get; }
    public char Item { get; }
    public StrSlice(string text);
    private StrSlice(string text, int pos, int length);
    private static StrSlice();
    public string get_Text();
    public int get_Pos();
    public int get_Length();
    public bool get_IsEmpty();
    public char get_Item(int i);
    public StrSlice Substring(int pos, int len);
    public StrSlice Substring(int pos);
    public virtual string ToString();
    public static string op_Implicit(StrSlice strSlice);
    public StrSlice Trim();
}
[ExtensionAttribute]
internal static class SharpVectors.Dom.Css.StrSliceExtensions : object {
    [ExtensionAttribute]
public static StrSlice ToSlice(string text);
    [ExtensionAttribute]
public static StrSlice[] Split(StrSlice slice, Char[] separators, bool removeEmptyEntries);
    private static bool IsInArrayOfChar(Char[] separators, char charValue);
    private static int DigitBase10Value(char ch);
    private static int DigitBase16Value(char ch);
    [ExtensionAttribute]
internal static int ParseIntBase10(StrSlice strSlice);
    [ExtensionAttribute]
public static int ParseIntBase16(StrSlice strSlice);
}
internal enum SharpVectors.Dom.Css.XPathSelectorStatus : Enum {
    public int value__;
    public static XPathSelectorStatus Start;
    public static XPathSelectorStatus Parsed;
    public static XPathSelectorStatus Compiled;
    public static XPathSelectorStatus Error;
}
[DefaultMemberAttribute("Item")]
public class SharpVectors.Dom.Stylesheets.MediaList : object {
    private static Regex _splitter;
    private bool _containsAll;
    private IList`1<string> _medias;
    public ulong Length { get; }
    public string MediaText { get; public set; }
    public string Item { get; }
    public string Item { get; }
    public MediaList(string val);
    private static MediaList();
    public bool Matches(MediaList inMedia);
    private void ParseString(string mediaText);
    private void ClearMedia();
    public sealed virtual void AppendMedium(string newMedium);
    public sealed virtual void DeleteMedium(string oldMedium);
    public sealed virtual ulong get_Length();
    public sealed virtual string get_MediaText();
    public sealed virtual void set_MediaText(string value);
    public sealed virtual string get_Item(ulong index);
    public string get_Item(int index);
}
public class SharpVectors.Dom.Stylesheets.StyleSheet : object {
    private static Regex _reParser;
    private bool _triedDownload;
    private bool _succeededDownload;
    private MediaList _media;
    private string _title;
    private string _href;
    private IStyleSheet _parentStyleSheet;
    private XmlNode _ownerNode;
    private bool _disabled;
    private string _type;
    private string _sheetContent;
    public string SheetContent { get; }
    public IMediaList Media { get; }
    public string Title { get; }
    public string Href { get; }
    public Uri AbsoluteHref { get; }
    public IStyleSheet ParentStyleSheet { get; public set; }
    public XmlNode OwnerNode { get; }
    public bool Disabled { get; public set; }
    public string Type { get; }
    protected StyleSheet(string media);
    public StyleSheet(XmlProcessingInstruction pi);
    public StyleSheet(XmlElement styleElement);
    public StyleSheet(XmlNode ownerNode, string href, string type, string title, string media);
    private static StyleSheet();
    public string get_SheetContent();
    protected internal virtual void GetStylesForElement(XmlElement elt, string pseudoElt, MediaList ml, CssCollectedStyleDeclaration csd);
    internal XmlNode ResolveOwnerNode();
    internal void LoadSheet();
    public sealed virtual IMediaList get_Media();
    public sealed virtual string get_Title();
    public sealed virtual string get_Href();
    public Uri get_AbsoluteHref();
    public sealed virtual IStyleSheet get_ParentStyleSheet();
    public void set_ParentStyleSheet(IStyleSheet value);
    public sealed virtual XmlNode get_OwnerNode();
    public sealed virtual bool get_Disabled();
    public sealed virtual void set_Disabled(bool value);
    public sealed virtual string get_Type();
}
[DefaultMemberAttribute("Item")]
public class SharpVectors.Dom.Stylesheets.StyleSheetList : object {
    private IList`1<StyleSheet> _styleSheets;
    private CssXmlDocument _cssXmlDoc;
    public ulong Length { get; }
    public IStyleSheet Item { get; }
    public IStyleSheet Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal StyleSheetList(CssXmlDocument document);
    public void AddCssStyleSheet(CssStyleSheet ss);
    public void GetStylesForElement(XmlElement elt, string pseudoElt, CssCollectedStyleDeclaration csd);
    internal void GetStylesForElement(XmlElement elt, string pseudoElt, CssCollectedStyleDeclaration csd, MediaList ml);
    public sealed virtual ulong get_Length();
    public sealed virtual IStyleSheet get_Item(ulong index);
    public sealed virtual IStyleSheet get_Item(int index);
    public sealed virtual void set_Item(int index, IStyleSheet value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(IStyleSheet item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(IStyleSheet item);
    public sealed virtual void CopyTo(IStyleSheet[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<IStyleSheet> GetEnumerator();
    public sealed virtual int IndexOf(IStyleSheet item);
    public sealed virtual void Insert(int index, IStyleSheet item);
    public sealed virtual bool Remove(IStyleSheet item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
