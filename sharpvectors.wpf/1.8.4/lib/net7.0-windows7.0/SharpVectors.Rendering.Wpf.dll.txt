[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class SharpVectors.Renderers.CodeSnippetKeyResolver : WpfSettings`1<CodeSnippetKeyResolver> {
    public static string SnippetClass;
    private string _codeSnippet;
    private string _codeLangugage;
    private IResourceKeyResolver _keyResolver;
    public string CodeLangugage { get; public set; }
    public string CodeSnippet { get; public set; }
    public ResourceKeyResolverType ResolverType { get; }
    public bool IsValid { get; }
    public CodeSnippetKeyResolver(string codeSnippet, string codeLangugage);
    public string get_CodeLangugage();
    public void set_CodeLangugage(string value);
    public string get_CodeSnippet();
    public void set_CodeSnippet(string value);
    public virtual CodeSnippetKeyResolver Clone();
    public virtual void ReadXml(XmlReader reader);
    public virtual void WriteXml(XmlWriter writer);
    public sealed virtual ResourceKeyResolverType get_ResolverType();
    public sealed virtual bool get_IsValid();
    public sealed virtual void BeginResolve();
    public sealed virtual void EndResolve();
    public sealed virtual string Resolve(DependencyObject resource, int index, string fileName, string fileSource);
    public static Tuple`2<bool, string> CompileSnippet(string codeSnippet, string codeLangugage);
    public static Tuple`3<bool, CodeSnippetKeyResolver, string> CompileResolver(string codeSnippet, string codeLangugage);
    private void CreateKeyResolver();
    private CompilerResults CompileSnippets();
}
public class SharpVectors.Renderers.DictionaryKeyResolver : WpfSettings`1<DictionaryKeyResolver> {
    private IDictionary`2<string, string> _keyDictionary;
    public IDictionary`2<string, string> Dictionary { get; public set; }
    public ResourceKeyResolverType ResolverType { get; }
    public bool IsValid { get; }
    public DictionaryKeyResolver(IDictionary`2<string, string> keyDictionary);
    public IDictionary`2<string, string> get_Dictionary();
    public void set_Dictionary(IDictionary`2<string, string> value);
    public virtual DictionaryKeyResolver Clone();
    public virtual void ReadXml(XmlReader reader);
    public virtual void WriteXml(XmlWriter writer);
    public sealed virtual ResourceKeyResolverType get_ResolverType();
    public sealed virtual bool get_IsValid();
    public sealed virtual void BeginResolve();
    public sealed virtual void EndResolve();
    public sealed virtual string Resolve(DependencyObject resource, int index, string fileName, string fileSource);
}
public interface SharpVectors.Renderers.IResourceKeyResolver {
    public ResourceKeyResolverType ResolverType { get; }
    public bool IsValid { get; }
    public abstract virtual ResourceKeyResolverType get_ResolverType();
    public abstract virtual bool get_IsValid();
    public abstract virtual void BeginResolve();
    public abstract virtual void EndResolve();
    public abstract virtual string Resolve(DependencyObject resource, int index, string fileName, string fileSource);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class SharpVectors.Renderers.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "15.8.0.0")]
internal class SharpVectors.Renderers.Properties.Settings : ApplicationSettingsBase {
    private static Settings defaultInstance;
    public static Settings Default { get; }
    private static Settings();
    public static Settings get_Default();
}
public enum SharpVectors.Renderers.ResourceAccessType : Enum {
    public int value__;
    public static ResourceAccessType None;
    public static ResourceAccessType Dynamic;
    public static ResourceAccessType Static;
}
public class SharpVectors.Renderers.ResourceKeyResolver : WpfSettings`1<ResourceKeyResolver> {
    public static string TagName;
    public static string TagNumber;
    public static string XmlTagName;
    public static string DefaultPenNameFormat;
    public static string DefaultColorNameFormat;
    public static string DefaultBrushNameFormat;
    public static string DefaultResourceNameFormat;
    private string _nameFormat;
    private IDictionary`2<string, string> _nameParameters;
    public string NameFormat { get; public set; }
    public ResourceKeyResolverType ResolverType { get; }
    public bool IsValid { get; }
    public ResourceKeyResolver(string nameFormat);
    private static ResourceKeyResolver();
    public string get_NameFormat();
    public void set_NameFormat(string value);
    public virtual ResourceKeyResolver Clone();
    public virtual void ReadXml(XmlReader reader);
    public virtual void WriteXml(XmlWriter writer);
    public sealed virtual ResourceKeyResolverType get_ResolverType();
    public sealed virtual bool get_IsValid();
    public sealed virtual void BeginResolve();
    public sealed virtual void EndResolve();
    public sealed virtual string Resolve(DependencyObject resource, int index, string fileName, string fileSource);
    public static Func`1<IResourceKeyResolver> GetResolver(ResourceKeyResolverType keyResolverType);
    public static bool ValidateNameFormat(string nameFormat, bool isRequired);
    public static bool ValidateResourceNameFormat(string nameFormat);
}
public enum SharpVectors.Renderers.ResourceKeyResolverType : Enum {
    public int value__;
    public static ResourceKeyResolverType None;
    public static ResourceKeyResolverType Default;
    public static ResourceKeyResolverType Dictionary;
    public static ResourceKeyResolverType CodeSnippet;
    public static ResourceKeyResolverType Custom;
}
public enum SharpVectors.Renderers.ResourceModeType : Enum {
    public int value__;
    public static ResourceModeType None;
    public static ResourceModeType Drawing;
    public static ResourceModeType Image;
}
public class SharpVectors.Renderers.Texts.WpfFontTextBuilder : WpfTextBuilder {
    private double _textWidth;
    private Typeface _typeface;
    public WpfFontFamilyType FontFamilyType { get; }
    public double Ascent { get; }
    public bool IsBoldSimulated { get; }
    public bool IsObliqueSimulated { get; }
    public double StrikethroughPosition { get; }
    public double StrikethroughThickness { get; }
    public double UnderlinePosition { get; }
    public double UnderlineThickness { get; }
    public double OverlinePosition { get; }
    public double OverlineThickness { get; }
    public double XHeight { get; }
    public double Alphabetic { get; }
    public double Width { get; }
    public WpfFontTextBuilder(CultureInfo culture, double fontSize);
    public WpfFontTextBuilder(WpfFontFamilyInfo familyInfo, CultureInfo culture, double fontSize);
    public WpfFontTextBuilder(FontFamily fontFamily, CultureInfo culture, double fontSize);
    public WpfFontTextBuilder(FontFamily fontFamily, FontStyle fontStyle, FontWeight fontWeight, CultureInfo culture, double fontSize);
    public WpfFontTextBuilder(CultureInfo culture, string fontName, double fontSize, Uri fontUri);
    public virtual WpfFontFamilyType get_FontFamilyType();
    public virtual double get_Ascent();
    public virtual bool get_IsBoldSimulated();
    public virtual bool get_IsObliqueSimulated();
    public virtual double get_StrikethroughPosition();
    public virtual double get_StrikethroughThickness();
    public virtual double get_UnderlinePosition();
    public virtual double get_UnderlineThickness();
    public virtual double get_OverlinePosition();
    public virtual double get_OverlineThickness();
    public virtual double get_XHeight();
    public virtual double get_Alphabetic();
    public virtual double get_Width();
    public virtual Geometry Build(SvgTextContentElement element, string text, double x, double y);
    public virtual IList`1<Rect> MeasureChars(SvgTextContentElement element, string text, bool canBeWhitespace);
    public virtual Size MeasureText(SvgTextContentElement element, string text, bool canBeWhitespace);
}
public class SharpVectors.Renderers.Texts.WpfGlyphTextBuilder : WpfTextBuilder {
    private static double EmMultiplier;
    private UInt16[] _glyphIndices;
    private Double[] _advanceWidths;
    private Point[] _glyphOffsets;
    private UInt16[] _clusterMap;
    private bool _isSideways;
    private int _bidiLevel;
    private GlyphTypeface _glyphTypeface;
    private string _unicodeString;
    private string _deviceFontName;
    private double _textWidth;
    private GlyphRun _glyphRun;
    private Point _glyphRunOrigin;
    private Typeface _typeface;
    public WpfFontFamilyType FontFamilyType { get; }
    public bool IsBoldSimulated { get; }
    public bool IsObliqueSimulated { get; }
    public double StrikethroughPosition { get; }
    public double StrikethroughThickness { get; }
    public double UnderlinePosition { get; }
    public double UnderlineThickness { get; }
    public double OverlinePosition { get; }
    public double OverlineThickness { get; }
    public double XHeight { get; }
    public double Alphabetic { get; }
    public double Ascent { get; }
    public double Baseline { get; }
    public bool IsSideways { get; public set; }
    public double Width { get; }
    public int BidiLevel { get; public set; }
    public string DeviceFontName { get; public set; }
    private XmlLanguage Language { get; }
    public WpfGlyphTextBuilder(CultureInfo culture, double fontSize);
    public WpfGlyphTextBuilder(WpfFontFamilyInfo familyInfo, CultureInfo culture, double fontSize);
    public WpfGlyphTextBuilder(FontFamily fontFamily, CultureInfo culture, double fontSize);
    public WpfGlyphTextBuilder(FontFamily fontFamily, FontStyle fontStyle, FontWeight fontWeight, CultureInfo culture, double fontSize);
    public WpfGlyphTextBuilder(CultureInfo culture, string fontName, double fontSize, Uri fontUri);
    public virtual WpfFontFamilyType get_FontFamilyType();
    public virtual bool get_IsBoldSimulated();
    public virtual bool get_IsObliqueSimulated();
    public virtual double get_StrikethroughPosition();
    public virtual double get_StrikethroughThickness();
    public virtual double get_UnderlinePosition();
    public virtual double get_UnderlineThickness();
    public virtual double get_OverlinePosition();
    public virtual double get_OverlineThickness();
    public virtual double get_XHeight();
    public virtual double get_Alphabetic();
    public virtual double get_Ascent();
    public virtual double get_Baseline();
    public bool get_IsSideways();
    public void set_IsSideways(bool value);
    public virtual double get_Width();
    public int get_BidiLevel();
    public void set_BidiLevel(int value);
    public string get_DeviceFontName();
    public void set_DeviceFontName(string value);
    public virtual IList`1<Rect> MeasureChars(SvgTextContentElement element, string text, bool canBeWhitespace);
    public virtual Size MeasureText(SvgTextContentElement element, string text, bool canBeWhitespace);
    public virtual Geometry Build(SvgTextContentElement element, string text, double x, double y);
    private XmlLanguage get_Language();
    private GlyphRun CreateGlyphRun(Point origin, XmlLanguage language);
    private void ComputeMeasurement(string text, double OriginX, double OriginY);
    private void ParseGlyphRunProperties();
    private static bool IsEmpty(string s);
    private bool ReadGlyphIndex(string valueSpec, Boolean& inCluster, Int32& glyphClusterSize, Int32& characterClusterSize, UInt16& glyphIndex);
    private static double GetAdvanceWidth(GlyphTypeface glyphTypeface, ushort glyphIndex, bool sideways);
    private ushort GetGlyphFromCharacter(GlyphTypeface glyphTypeface, char character);
    private static void SetClusterMapEntry(UInt16[] clusterMap, int index, ushort value);
    private int ParseGlyphsProperty(GlyphTypeface fontFace, string unicodeString, bool sideways, List`1& parsedGlyphs, UInt16[]& clusterMap);
}
public class SharpVectors.Renderers.Texts.WpfHorzTextRenderer : WpfTextRenderer {
    public WpfHorzTextRenderer(SvgTextBaseElement textElement, WpfTextRendering textRendering);
    public virtual void RenderText(SvgTextContentElement element, Point& ctp, string text, double rotate, WpfTextPlacement placement);
    public virtual void RenderTextRun(SvgTextContentElement element, Point& ctp, string text, double rotate, WpfTextPlacement placement);
    private void RenderText(WpfTextTuple textInfo, Point& ctp, string text, double rotate, WpfTextPlacement placement);
    private void RenderTextRun(WpfTextTuple textInfo, Point& ctp, string text, double rotate, WpfTextPlacement placement);
}
public class SharpVectors.Renderers.Texts.WpfPathTextBuilder : object {
    private bool _endsWhitespace;
    private double _pathLength;
    private double _textLength;
    private IList`1<WpfPathChar> _pathChars;
    private SvgTextBaseElement _textElement;
    private SvgTextPathElement _textPathElement;
    private IList`1<WpfPathTextRun> _pathTextRuns;
    private static double EqualPointsComparer;
    public WpfPathTextBuilder(SvgTextBaseElement textElement);
    public void BeginTextPath(SvgTextPathElement svgElement);
    public void AddTextRun(WpfPathTextRun pathTextRun, string text, Point textPos, Brush textBrush, Pen textPen);
    public void EndTextPath();
    public void RenderTextPath(DrawingContext dc, PathGeometry pathGeometry, TextAlignment pathAlignment);
    private void RenderStartAlignedText(DrawingContext dc, PathGeometry svgPath, ISvgAnimatedLength startOffset, TextAlignment alignment);
    private void RenderEndAlignedText(DrawingContext dc, PathGeometry svgPath, ISvgAnimatedLength startOffset);
    private ISvgAnimatedLength GetTextLength();
    private ISvgAnimatedLength GetPathOffset();
    private static bool AreEqual(Point pt1, Point pt2);
}
public class SharpVectors.Renderers.Texts.WpfPathTextRenderer : WpfTextRenderer {
    public WpfPathTextRenderer(SvgTextBaseElement textElement, WpfTextRendering textRendering);
    public virtual void RenderText(SvgTextContentElement element, Point& ctp, string text, double rotate, WpfTextPlacement placement);
    public virtual void RenderTextRun(SvgTextContentElement element, Point& ctp, string text, double rotate, WpfTextPlacement placement);
    private void RenderTextPath(SvgTextPathElement textPath, Point& ctp, double rotate, WpfTextPlacement placement);
    private void RenderTRefPath(SvgTRefElement element, WpfPathTextBuilder pathBuilder, Point& ctp);
    private void RenderTSpanPath(SvgTSpanElement element, WpfPathTextBuilder pathBuilder, Point& ctp);
    private void RenderTextPath(SvgTextContentElement element, WpfPathTextBuilder pathBuilder, string text, Point origin, double rotate, WpfTextPlacement placement);
}
public class SharpVectors.Renderers.Texts.WpfPathTextRun : object {
    private Pen _pen;
    private Brush _brush;
    private Point _contentPos;
    private string _contentText;
    private GeometryGroup _contentGeometry;
    private WpfTextBuilder _contentBuilder;
    private SvgTextContentElement _contentElement;
    private ISvgAnimatedLength _startOffset;
    public Pen Pen { get; }
    public Brush Brush { get; }
    public Point Position { get; }
    public string Text { get; }
    public WpfTextBuilder Builder { get; }
    public SvgTextContentElement Element { get; }
    public ISvgAnimatedLength StartOffset { get; }
    public WpfPathTextRun(SvgTextContentElement textElement, WpfTextBuilder textBuilder);
    public Pen get_Pen();
    public Brush get_Brush();
    public Point get_Position();
    public string get_Text();
    public WpfTextBuilder get_Builder();
    public SvgTextContentElement get_Element();
    public ISvgAnimatedLength get_StartOffset();
    public void Initialize(string text, Brush brush, Pen pen);
    public void SetPosition(Point pos, SvgTextPathElement pathElement, SvgTextBaseElement textElement);
    public void AddRun(Geometry textPath);
    public void RenderRun(DrawingContext context);
    public void UnInitialize();
    private ISvgAnimatedLength GetStartOffset(SvgTextPathElement pathElement, SvgTextBaseElement textElement);
    private ISvgAnimatedLength GetStartOffset(SvgTextBaseElement textElement);
}
public class SharpVectors.Renderers.Texts.WpfSvgTextBuilder : WpfTextBuilder {
    private static string Whitespace;
    private static string SmallCaps;
    private static string AltGlyph;
    private static string SmallCapsFont1;
    private static string SmallCapsFont2;
    private static string SmallCapsFont3;
    private static string SmallCapsFont4;
    private static string SmallCapsFont5;
    private static string SmallCapsFont;
    private double _textWidth;
    private FontStyle _fontStyle;
    private FontFamily _fontFamily;
    private FontWeight _fontWeight;
    private int _unicodeRangeStart;
    private int _unicodeRangeEnd;
    private string _fontVariant;
    private SvgFontElement _font;
    private double _emScale;
    private SvgFontFaceElement _fontFaceElement;
    private SvgMissingGlyphElement _missingGlyph;
    private SvgKerningTable _kerningTable;
    private SvgLatinGlyphMap _latinGlyphMaps;
    private SvgArabicGlyphMap _arabicGlyphMaps;
    private WpfTextBuilder _missingFallBack;
    private WpfTextBuilder _smallCapFallBack;
    private AttributedTextIterator _textIterator;
    public bool HasUnicodeRange { get; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public FontFamily FontFamily { get; public set; }
    public string FontVariant { get; public set; }
    public WpfFontFamilyType FontFamilyType { get; }
    public bool IsBoldSimulated { get; }
    public bool IsObliqueSimulated { get; }
    public double StrikethroughPosition { get; }
    public double StrikethroughThickness { get; }
    public double UnderlinePosition { get; }
    public double UnderlineThickness { get; }
    public double OverlinePosition { get; }
    public double OverlineThickness { get; }
    public double XHeight { get; }
    public double Alphabetic { get; }
    public double Ascent { get; }
    public double Width { get; }
    public WpfSvgTextBuilder(CultureInfo culture, SvgFontElement font, double fontSize);
    public WpfSvgTextBuilder(SvgFontElement font, CultureInfo culture, string fontName, double fontSize, Uri fontUri);
    public bool get_HasUnicodeRange();
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    public string get_FontVariant();
    public void set_FontVariant(string value);
    public virtual WpfFontFamilyType get_FontFamilyType();
    public virtual bool get_IsBoldSimulated();
    public virtual bool get_IsObliqueSimulated();
    public virtual double get_StrikethroughPosition();
    public virtual double get_StrikethroughThickness();
    public virtual double get_UnderlinePosition();
    public virtual double get_UnderlineThickness();
    public virtual double get_OverlinePosition();
    public virtual double get_OverlineThickness();
    public virtual double get_XHeight();
    public virtual double get_Alphabetic();
    public virtual double get_Ascent();
    public virtual double get_Width();
    public virtual IList`1<Rect> MeasureChars(SvgTextContentElement element, string text, bool canBeWhitespace);
    public virtual Size MeasureText(SvgTextContentElement element, string text, bool canBeWhitespace);
    public virtual Geometry Build(SvgTextContentElement element, string text, double x, double y);
    private GeometryGroup Build(SvgTextContentElement element, string text, IList`1<Rect> textBounds, bool measureSpaces);
    private bool WithinUnicodeRange(string inputText);
    private bool IsVariantMatched();
    public bool IsStyleMatched();
    private bool Initialize();
    private static string GetGlyphName(SvgGlyphElement glyph);
}
public enum SharpVectors.Renderers.Texts.WpfTextAnchor : Enum {
    public int value__;
    public static WpfTextAnchor None;
    public static WpfTextAnchor Start;
    public static WpfTextAnchor Middle;
    public static WpfTextAnchor End;
}
public abstract class SharpVectors.Renderers.Texts.WpfTextBuilder : object {
    private static double DefaultDpi;
    protected string _fontName;
    protected double _fontSize;
    protected Uri _fontUri;
    protected double _dpiX;
    protected double _dpiY;
    protected bool _buildPathGeometry;
    protected CultureInfo _culture;
    protected TextDecorationCollection _textDecorations;
    [CompilerGeneratedAttribute]
private FlowDirection <FlowDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private TextAlignment <TextAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private TextTrimming <Trimming>k__BackingField;
    public CultureInfo Culture { get; }
    public string XmlLang { get; }
    public WpfFontFamilyType FontFamilyType { get; }
    public string FontName { get; }
    public double FontSize { get; }
    public double FontSizeInPoints { get; }
    public Uri FontUri { get; }
    public double PixelsPerInchX { get; }
    public double PixelsPerInchY { get; }
    public double DpiScaleX { get; }
    public double DpiScaleY { get; }
    public double PixelsPerDip { get; }
    public bool BuildPathGeometry { get; public set; }
    public double Ascent { get; }
    public bool IsBoldSimulated { get; }
    public bool IsObliqueSimulated { get; }
    public double StrikethroughPosition { get; }
    public double StrikethroughThickness { get; }
    public double UnderlinePosition { get; }
    public double UnderlineThickness { get; }
    public double OverlinePosition { get; }
    public double OverlineThickness { get; }
    public double XHeight { get; }
    public double Alphabetic { get; }
    public double Width { get; }
    public double Baseline { get; }
    public FlowDirection FlowDirection { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    public TextTrimming Trimming { get; public set; }
    public TextDecorationCollection TextDecorations { get; public set; }
    protected WpfTextBuilder(CultureInfo culture, double fontSize);
    protected WpfTextBuilder(CultureInfo culture, string fontName, double fontSize, Uri fontUri);
    public static WpfTextBuilder Create(FontFamily fontFamily, CultureInfo culture, double fontSize);
    public static WpfTextBuilder Create(FontFamily fontFamily, FontStyle fontStyle, FontWeight fontWeight, CultureInfo culture, double fontSize);
    public static WpfTextBuilder Create(string familyInfo, CultureInfo culture, double fontSize);
    public static WpfTextBuilder Create(WpfFontFamilyInfo familyInfo, CultureInfo culture, double fontSize);
    public CultureInfo get_Culture();
    public string get_XmlLang();
    public abstract virtual WpfFontFamilyType get_FontFamilyType();
    public string get_FontName();
    public double get_FontSize();
    public double get_FontSizeInPoints();
    public Uri get_FontUri();
    public double get_PixelsPerInchX();
    public double get_PixelsPerInchY();
    public double get_DpiScaleX();
    public double get_DpiScaleY();
    public double get_PixelsPerDip();
    public bool get_BuildPathGeometry();
    public void set_BuildPathGeometry(bool value);
    public abstract virtual double get_Ascent();
    public abstract virtual bool get_IsBoldSimulated();
    public abstract virtual bool get_IsObliqueSimulated();
    public abstract virtual double get_StrikethroughPosition();
    public abstract virtual double get_StrikethroughThickness();
    public abstract virtual double get_UnderlinePosition();
    public abstract virtual double get_UnderlineThickness();
    public abstract virtual double get_OverlinePosition();
    public abstract virtual double get_OverlineThickness();
    public abstract virtual double get_XHeight();
    public abstract virtual double get_Alphabetic();
    public abstract virtual double get_Width();
    public virtual double get_Baseline();
    [CompilerGeneratedAttribute]
public FlowDirection get_FlowDirection();
    [CompilerGeneratedAttribute]
public void set_FlowDirection(FlowDirection value);
    [CompilerGeneratedAttribute]
public TextAlignment get_TextAlignment();
    [CompilerGeneratedAttribute]
public void set_TextAlignment(TextAlignment value);
    [CompilerGeneratedAttribute]
public TextTrimming get_Trimming();
    [CompilerGeneratedAttribute]
public void set_Trimming(TextTrimming value);
    public TextDecorationCollection get_TextDecorations();
    public void set_TextDecorations(TextDecorationCollection value);
    public abstract virtual IList`1<Rect> MeasureChars(SvgTextContentElement element, string text, bool canBeWhitespace);
    public abstract virtual Size MeasureText(SvgTextContentElement element, string text, bool canBeWhitespace);
    public abstract virtual Geometry Build(SvgTextContentElement element, string text, double x, double y);
}
public class SharpVectors.Renderers.Texts.WpfTextContext : object {
    private bool _isVertical;
    private bool _isSingleText;
    private bool _isSingleLine;
    private bool _isTextPath;
    private Point _positioningStart;
    private Point _positioningEnd;
    private SvgTextContentElement _positioningElement;
    private SvgTextBaseElement _textElement;
    private WpfTextRendering _textRendering;
    private CultureInfo _culture;
    private IDictionary`2<double, double> _sizeMap;
    public SvgTextBaseElement TextElement { get; }
    public bool IsVertical { get; }
    public bool IsSingleText { get; }
    public bool IsTextPath { get; }
    public bool IsSingleLine { get; public set; }
    public Point PositioningStart { get; public set; }
    public Point PositioningEnd { get; public set; }
    public SvgTextContentElement PositioningElement { get; public set; }
    public CultureInfo Culture { get; }
    public WpfTextContext(SvgTextBaseElement textElement, WpfTextRendering textRendering);
    public SvgTextBaseElement get_TextElement();
    public bool get_IsVertical();
    public bool get_IsSingleText();
    public bool get_IsTextPath();
    public bool get_IsSingleLine();
    public void set_IsSingleLine(bool value);
    public Point get_PositioningStart();
    public void set_PositioningStart(Point value);
    public Point get_PositioningEnd();
    public void set_PositioningEnd(Point value);
    public SvgTextContentElement get_PositioningElement();
    public void set_PositioningElement(SvgTextContentElement value);
    public CultureInfo get_Culture();
    public void SetElement(SvgTextBaseElement textElement);
    public bool IsPositionChanged(SvgTextContentElement element);
    public void BeginMeasure(int count);
    public void AddTextSize(Point point, double size);
    public void EndMeasure();
    private void Initialize();
    public static TextDecoration Squiggly(Color color, TextDecorationLocation location);
}
public class SharpVectors.Renderers.Texts.WpfTextPlacement : object {
    private bool _isRotateOnly;
    private Point _location;
    private double _rotation;
    private IList`1<WpfTextPosition> _positions;
    public bool HasPositions { get; }
    public Point Location { get; }
    public double Rotation { get; }
    public bool IsRotateOnly { get; }
    public IList`1<WpfTextPosition> Positions { get; }
    public WpfTextPlacement(Point location, double rotation);
    public WpfTextPlacement(Point location, double rotation, IList`1<WpfTextPosition> positions, bool isRotateOnly);
    public bool get_HasPositions();
    public Point get_Location();
    public double get_Rotation();
    public bool get_IsRotateOnly();
    public IList`1<WpfTextPosition> get_Positions();
    public static WpfTextPlacement Create(SvgTextPositioningElement posElement, Point p, bool isTextPath);
    public void UpdatePositions(string targetText);
}
public class SharpVectors.Renderers.Texts.WpfTextPosition : ValueType {
    private Point _location;
    private double _rotation;
    public Point Location { get; public set; }
    public double Rotation { get; public set; }
    public WpfTextPosition(Point location, double rotation);
    public Point get_Location();
    public void set_Location(Point value);
    public double get_Rotation();
    public void set_Rotation(double value);
}
public abstract class SharpVectors.Renderers.Texts.WpfTextRenderer : WpfRendererObject {
    protected static string Whitespace;
    protected static char NonBreakingChar;
    protected static string NonBreaking;
    protected static Regex _tabNewline;
    protected static Regex _decimalNumber;
    protected static Regex _multipleSpaces;
    protected string _actualFontName;
    protected DrawingContext _drawContext;
    protected SvgTextBaseElement _textElement;
    protected WpfTextRendering _textRendering;
    private static object _fontSynch;
    private static IDictionary`2<string, FontFamily> _systemFonts;
    public bool IsInitialized { get; }
    public DrawingContext DrawContext { get; }
    public SvgTextBaseElement TextElement { get; }
    protected bool IsMeasuring { get; }
    protected bool IsTextPath { get; protected set; }
    protected double TextWidth { get; }
    protected CultureInfo TextCulture { get; }
    protected WpfTextContext TextContext { get; }
    protected WpfTextRenderer(SvgTextBaseElement textElement, WpfTextRendering textRendering);
    private static WpfTextRenderer();
    public virtual bool get_IsInitialized();
    public DrawingContext get_DrawContext();
    public SvgTextBaseElement get_TextElement();
    protected bool get_IsMeasuring();
    protected bool get_IsTextPath();
    protected void set_IsTextPath(bool value);
    protected double get_TextWidth();
    protected CultureInfo get_TextCulture();
    protected WpfTextContext get_TextContext();
    public virtual void SetElement(SvgTextBaseElement textElement);
    public virtual void Initialize(DrawingContext textContext, WpfDrawingContext drawContext);
    public virtual void Uninitialize();
    public abstract virtual void RenderText(SvgTextContentElement element, Point& ctp, string text, double rotate, WpfTextPlacement placement);
    public abstract virtual void RenderTextRun(SvgTextContentElement element, Point& ctp, string text, double rotate, WpfTextPlacement placement);
    public static string TrimText(SvgTextContentElement element, string val);
    public static string GetText(SvgTextContentElement element, XmlNode child, XmlNode spaceNode);
    public static string GetText(SvgTRefElement element);
    public static string GetText(SvgAltGlyphElement element);
    public static double GetComputedFontSize(SvgTextContentElement element);
    protected void SetTextWidth(double textWidth);
    protected void AddTextWidth(Point location, double textWidth);
    protected Brush GetBrush();
    protected Pen GetPen();
    protected static Geometry ExtractTextPathGeometry(Geometry sourceGeometry);
    protected FontWeight GetTextFontWeight(string fontWeight);
    protected FontWeight GetTextFontWeight(SvgTextContentElement element);
    protected FontWeight GetBolderFontWeight(string fontWeight);
    protected FontWeight GetLighterFontWeight(string fontWeight);
    protected FontStyle GetTextFontStyle(SvgTextContentElement element);
    protected FontStyle GetTextFontStyle(string fontStyle);
    protected FontStretch GetTextFontStretch(SvgTextContentElement element);
    protected TextDecorationCollection GetTextDecoration(SvgTextContentElement element);
    protected WpfFontFamilyInfo GetTextFontFamilyInfo(SvgTextContentElement element);
    protected FontFamily GetTextFontFamily(SvgTextContentElement element);
    protected WpfTextStringFormat GetTextStringFormat(SvgTextContentElement element);
    protected virtual void Dispose(bool disposing);
    private static FontFamily LookupFontFamily(string fontName, IDictionary`2<string, string> fontFamilyNames);
    private static void BuildSystemFonts();
}
public class SharpVectors.Renderers.Texts.WpfTextRun : object {
    private int _vertOrientation;
    private int _horzOrientation;
    private bool _isLatinGlyph;
    private string _text;
    public bool IsEmpty { get; }
    public bool IsLatin { get; public set; }
    public int VerticalOrientation { get; public set; }
    public int HorizontalOrientation { get; public set; }
    public string Text { get; public set; }
    public WpfTextRun(string text, bool isLatin, int vertOrientation, int horzOrientation);
    public bool get_IsEmpty();
    public bool get_IsLatin();
    public void set_IsLatin(bool value);
    public int get_VerticalOrientation();
    public void set_VerticalOrientation(int value);
    public int get_HorizontalOrientation();
    public void set_HorizontalOrientation(int value);
    public string get_Text();
    public void set_Text(string value);
    public static bool IsLatinGlyph(char ch);
    public static IList`1<WpfTextRun> BreakWords(string text);
    public static IList`1<WpfTextRun> BreakWords(string text, int vertOrientation, int horzOrientation);
}
public class SharpVectors.Renderers.Texts.WpfTextStringFormat : ValueType {
    public FlowDirection Direction;
    public TextTrimming Trimming;
    public WpfTextAnchor Anchor;
    public TextAlignment Alignment { get; }
    public static WpfTextStringFormat Default { get; }
    public WpfTextStringFormat(FlowDirection direction, TextTrimming trimming, WpfTextAnchor anchor);
    public TextAlignment get_Alignment();
    public static WpfTextStringFormat get_Default();
}
public class SharpVectors.Renderers.Texts.WpfVertTextRenderer : WpfTextRenderer {
    public WpfVertTextRenderer(SvgTextBaseElement textElement, WpfTextRendering textRendering);
    public virtual void RenderText(SvgTextContentElement element, Point& ctp, string text, double rotate, WpfTextPlacement placement);
    public virtual void RenderTextRun(SvgTextContentElement element, Point& ctp, string text, double rotate, WpfTextPlacement placement);
    private Size MeasureString(string text, double fontSize, Typeface typeFace);
    private string GetVerticalText(string text);
    private void DrawSingleLineText(SvgTextContentElement element, Point& ctp, WpfTextRun textRun, double rotate, WpfTextPlacement placement);
    private void DrawTextRun(SvgTextContentElement element, Point& ctp, WpfTextRun textRun, double rotate, WpfTextPlacement placement);
    private double ChangeGlyphOrientation(GlyphRunDrawing glyphDrawing, double baselineShiftX, double baselineShiftY, bool isLatin);
}
internal static class SharpVectors.Renderers.Utils.SvgConvert : object {
    public static SvgPointF ToPoint(Point pt);
    public static SvgRectF ToRect(Rect rect);
}
internal static class SharpVectors.Renderers.Utils.WpfApplicationContext : object {
    public static DirectoryInfo ExecutableDirectory { get; }
    public static DirectoryInfo DocumentDirectory { get; }
    public static Uri DocumentDirectoryUri { get; }
    public static DirectoryInfo get_ExecutableDirectory();
    public static DirectoryInfo get_DocumentDirectory();
    public static Uri get_DocumentDirectoryUri();
}
internal class SharpVectors.Renderers.Utils.WpfCacheManager : object {
    private XmlElement lastCacheElm;
    private Uri lastUri;
    private string cacheDir;
    private string cacheDocPath;
    private XmlDocument cacheDoc;
    public long Size { get; }
    public WpfCacheManager(string cacheDir);
    private void LoadDoc();
    private void SaveDoc();
    private XmlElement GetCacheElm(Uri uri);
    private Uri GetLocalPathUri(XmlElement cacheElm);
    public long get_Size();
    public void Clear();
    public sealed virtual CacheInfo GetCacheInfo(Uri uri);
    public sealed virtual void SetCacheInfo(Uri uri, CacheInfo cacheInfo, Stream stream);
}
public static class SharpVectors.Renderers.Utils.WpfConvert : object {
    private static double ArcAsBezier;
    public static Nullable`1<Color> ToColor(ICssColor color);
    public static Rect ToRect(ICssRect rect);
    public static bool Equals(Size size1, Size size2);
    public static PathGeometry ToPath(SvgRectF rect);
    public static PathGeometry ToPath(Rect rect);
    public static PathGeometry ToPath(RectangleGeometry rect);
    public static PathGeometry ToPath(EllipseGeometry ellipse);
    public static PathGeometry ToPath(LineGeometry line);
    private static bool IsRounded(double radiusX, double radiusY);
    private static Point[] GetPointList(Rect rect, double radiusX, double radiusY, bool isRounded);
    private static void GetPointList(Point[] points, Rect rect, double radiusX, double radiusY, bool isRounded);
    private static void GetPointList(Point[] points, Point center, double radiusX, double radiusY);
    private static PathFigureCollection GetFigures(RectangleGeometry geometry);
    private static PathFigureCollection GetFigures(EllipseGeometry geometry);
    private static PathFigureCollection GetFigures(LineGeometry geometry);
    public static Rect ToRect(SvgRectF rect);
    public static Rect ToRect(ISvgRect rect);
    public static GradientSpreadMethod ToSpreadMethod(SvgSpreadMethod sm);
    public static double GetPathFigureLength(PathFigure pathFigure);
    public static Transform GetTransform(SvgElement svgElement, bool _combineTransforms);
}
public class SharpVectors.Renderers.Utils.WpfSvgWindow : SvgWindow {
    private bool _preferUserSize;
    private ISvgControl _svgControl;
    private XmlReaderSettings _settings;
    public bool PreferUserSize { get; public set; }
    public XmlReaderSettings CustomSettings { get; public set; }
    public long InnerWidth { get; public set; }
    public long InnerHeight { get; public set; }
    public string Source { get; public set; }
    public DirectoryInfo WorkingDir { get; }
    public WpfSvgWindow(long innerWidth, long innerHeight, ISvgRenderer renderer);
    public WpfSvgWindow(SvgWindow parentWindow, long innerWidth, long innerHeight);
    public WpfSvgWindow(ISvgControl control, ISvgRenderer renderer);
    private WpfSvgWindow(ISvgControl control, SvgWindow parentWindow, long innerWidth, long innerHeight);
    public bool get_PreferUserSize();
    public void set_PreferUserSize(bool value);
    public XmlReaderSettings get_CustomSettings();
    public void set_CustomSettings(XmlReaderSettings value);
    public virtual long get_InnerWidth();
    public virtual void set_InnerWidth(long value);
    public virtual long get_InnerHeight();
    public virtual void set_InnerHeight(long value);
    public virtual string get_Source();
    public virtual void set_Source(string value);
    public virtual DirectoryInfo get_WorkingDir();
    public void LoadDocument(Uri documentUri, WpfDrawingSettings drawingSettings);
    public void LoadDocument(string documentSource, WpfDrawingSettings drawingSettings);
    public void LoadDocument(Stream documentStream, WpfDrawingSettings drawingSettings);
    public void LoadDocument(TextReader textReader, WpfDrawingSettings drawingSettings);
    public void LoadDocument(XmlReader xmlReader, WpfDrawingSettings drawingSettings);
    public virtual void Alert(string message);
    public virtual SvgWindow CreateOwnedWindow(long innerWidth, long innerHeight);
    public virtual void SetupStyleSheets(WpfDrawingSettings drawingSettings);
}
public class SharpVectors.Renderers.Wpf.WpfARendering : WpfRendering {
    private bool _isLayer;
    private bool _isAggregated;
    private DrawingGroup _drawGroup;
    public bool IsRecursive { get; }
    public WpfARendering(SvgElement element);
    public virtual bool get_IsRecursive();
    public virtual void BeforeRender(WpfDrawingRenderer renderer);
    public virtual void Render(WpfDrawingRenderer renderer);
    public virtual void AfterRender(WpfDrawingRenderer renderer);
    protected virtual void Initialize(SvgElement element);
}
public abstract class SharpVectors.Renderers.Wpf.WpfClassVisitor : WpfVisitor {
    public abstract virtual string Visit(SvgElement element, WpfDrawingContext context);
}
public class SharpVectors.Renderers.Wpf.WpfDrawingContext : DependencyObject {
    private static string RegisteredIdKey;
    private int _elementOrder;
    private string _name;
    private double _dpiX;
    private double _dpiY;
    private bool _renderingClip;
    private bool _isFragment;
    private bool _resourceDictionary;
    private Rect _quickBounds;
    private object _tag;
    private DrawingGroup _rootDrawing;
    private DrawingGroup _linkDrawing;
    private WpfDrawingSettings _settings;
    private WpfLinkVisitor _linkVisitor;
    private WpfFontFamilyVisitor _fontFamilyVisitor;
    private WpfEmbeddedImageVisitor _imageVisitor;
    private WpfIDVisitor _idVisitor;
    private WpfClassVisitor _classVisitor;
    private Stack`1<DrawingGroup> _drawStack;
    private HashSet`1<string> _registeredIds;
    private WpfDrawingDocument _drawingDocument;
    private WpfDrawingResources _drawingResources;
    private Dictionary`2<string, WpfSvgPaintContext> _paintContexts;
    private HashSet`1<string> _baseUrls;
    private SvgInteractiveModes _interactiveMode;
    public string Name { get; public set; }
    public int Count { get; }
    public bool RenderingClipRegion { get; public set; }
    public DrawingGroup Root { get; internal set; }
    public DrawingGroup Links { get; }
    public bool IsFragment { get; }
    public bool IsResourceDictionary { get; }
    public object Tag { get; public set; }
    public WpfDrawingSettings Settings { get; public set; }
    public WpfLinkVisitor LinkVisitor { get; public set; }
    public WpfEmbeddedImageVisitor ImageVisitor { get; public set; }
    public WpfFontFamilyVisitor FontFamilyVisitor { get; public set; }
    public WpfIDVisitor IDVisitor { get; public set; }
    public WpfClassVisitor ClassVisitor { get; public set; }
    public Rect Bounds { get; }
    public double PixelsPerInchX { get; }
    public double PixelsPerInchY { get; }
    public double DpiScaleX { get; }
    public double DpiScaleY { get; }
    public double PixelsPerDip { get; }
    public ISet`1<string> BaseUrls { get; }
    public SvgInteractiveModes InteractiveMode { get; private set; }
    internal bool OptimizePath { get; }
    internal bool TextAsGeometry { get; internal set; }
    internal bool IncludeRuntime { get; }
    internal CultureInfo CultureInfo { get; }
    internal CultureInfo EnglishCultureInfo { get; }
    internal string DefaultFontName { get; }
    public WpfDrawingContext(bool isFragment, WpfDrawingSettings settings);
    public string get_Name();
    public void set_Name(string value);
    public int get_Count();
    public bool get_RenderingClipRegion();
    public void set_RenderingClipRegion(bool value);
    public DrawingGroup get_Root();
    internal void set_Root(DrawingGroup value);
    public DrawingGroup get_Links();
    public bool get_IsFragment();
    public bool get_IsResourceDictionary();
    public object get_Tag();
    public void set_Tag(object value);
    public WpfDrawingSettings get_Settings();
    public void set_Settings(WpfDrawingSettings value);
    public WpfLinkVisitor get_LinkVisitor();
    public void set_LinkVisitor(WpfLinkVisitor value);
    public WpfEmbeddedImageVisitor get_ImageVisitor();
    public void set_ImageVisitor(WpfEmbeddedImageVisitor value);
    public WpfFontFamilyVisitor get_FontFamilyVisitor();
    public void set_FontFamilyVisitor(WpfFontFamilyVisitor value);
    public WpfIDVisitor get_IDVisitor();
    public void set_IDVisitor(WpfIDVisitor value);
    public WpfClassVisitor get_ClassVisitor();
    public void set_ClassVisitor(WpfClassVisitor value);
    public Rect get_Bounds();
    public double get_PixelsPerInchX();
    public double get_PixelsPerInchY();
    public double get_DpiScaleX();
    public double get_DpiScaleY();
    public double get_PixelsPerDip();
    public ISet`1<string> get_BaseUrls();
    public SvgInteractiveModes get_InteractiveMode();
    private void set_InteractiveMode(SvgInteractiveModes value);
    internal bool get_OptimizePath();
    internal bool get_TextAsGeometry();
    internal void set_TextAsGeometry(bool value);
    internal bool get_IncludeRuntime();
    internal CultureInfo get_CultureInfo();
    internal CultureInfo get_EnglishCultureInfo();
    internal string get_DefaultFontName();
    public void UpdateBounds(Rect bounds);
    public void Clear();
    public bool Contains(DrawingGroup item);
    public void CopyTo(DrawingGroup[] array, int arrayIndex);
    public DrawingGroup Peek();
    public DrawingGroup Pop();
    public void Push(DrawingGroup item);
    public DrawingGroup[] ToArray();
    public void TrimExcess();
    public void Initialize(WpfLinkVisitor linkVisitor, WpfFontFamilyVisitor fontFamilyVisitor, WpfEmbeddedImageVisitor imageVisitor);
    public void Uninitialize();
    public void BeginDrawing(WpfDrawingDocument drawingDocument);
    public void EndDrawing();
    public bool IsRegisteredId(string elementId);
    public void RegisterId(string elementId);
    public void UnRegisterId(string elementId);
    public bool IsPaintContext(string guidId);
    public WpfSvgPaintContext GetPaintContext(string guidId);
    public void RegisterPaintContext(WpfSvgPaintContext paintContext);
    public void UnRegisterPaintContext(string guidId);
    public void RegisterDrawing(string elementId, string uniqueId, Drawing drawing);
    public bool ContainsUrl(string baseUrl);
    public void AddUrl(string baseUrl);
    public void RemoveUrl(string baseUrl);
    public void AddResources(Brush brush);
    public void AddResources(SolidColorBrush brush);
    public void AddResources(Pen pen);
    public sealed virtual IEnumerator`1<DrawingGroup> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class SharpVectors.Renderers.Wpf.WpfDrawingDocument : DependencyObject {
    private bool _isEnumerated;
    private SvgDocument _svgDocument;
    private DrawingGroup _svgDrawing;
    private IDictionary`2<string, Drawing> _idMap;
    private IDictionary`2<string, Drawing> _guidMap;
    private WpfHitTextLevel _textLevel;
    private WpfHitPath _hitPath;
    private DrawingGroup _hitGroup;
    private SortedList`2<int, Drawing> _hitList;
    private SortedList`2<int, WpfHitPath> _hitPaths;
    private GeneralTransform _displayTransform;
    private DrawingGroup _drawingLayer;
    public WpfHitTextLevel TextLevel { get; public set; }
    public GeneralTransform DisplayTransform { get; public set; }
    public SvgDocument Document { get; }
    public DrawingGroup Drawing { get; }
    public ICollection`1<string> DrawingNames { get; }
    public ICollection`1<string> DrawingUniqueNames { get; }
    public ICollection`1<string> ElementNames { get; }
    public ICollection`1<string> ElementUniqueNames { get; }
    public IList`1<Drawing> HitList { get; }
    public IList`1<WpfHitPath> HitPaths { get; }
    public WpfHitTextLevel get_TextLevel();
    public void set_TextLevel(WpfHitTextLevel value);
    public GeneralTransform get_DisplayTransform();
    public void set_DisplayTransform(GeneralTransform value);
    public SvgDocument get_Document();
    public DrawingGroup get_Drawing();
    public ICollection`1<string> get_DrawingNames();
    public ICollection`1<string> get_DrawingUniqueNames();
    public ICollection`1<string> get_ElementNames();
    public ICollection`1<string> get_ElementUniqueNames();
    public IList`1<Drawing> get_HitList();
    public IList`1<WpfHitPath> get_HitPaths();
    public void Initialize(SvgDocument svgDocument, DrawingGroup svgDrawing);
    public void Add(string elementId, string uniqueId, Drawing drawing);
    public void AddById(string elementId, Drawing drawing);
    public void AddByUniqueId(Guid uniqueId, Drawing drawing);
    public void AddByUniqueId(string uniqueId, Drawing drawing);
    public Tuple`2<SvgElement, Drawing> Get(string elementId);
    public Drawing GetById(string elementId);
    public Drawing GetByUniqueId(Guid uniqueId);
    public Drawing GetByUniqueId(string uniqueId);
    public SvgElement GetSvgById(string elementId);
    public SvgElement GetSvgByUniqueId(Guid uniqueId);
    public SvgElement GetSvgByUniqueId(string uniqueId);
    public void EnumerateDrawing(DrawingGroup drawing);
    public WpfHitTestResult HitTest(Point point);
    public WpfHitTestResult HitTest(Rect rect, IntersectionDetail detail);
    public DrawingGroup GetDrawingLayer();
    private Drawing PerformHitTest(Point pt);
    private bool HitTestDrawing(GlyphRunDrawing drawing, Point pt);
    private bool HitTestDrawing(GeometryDrawing drawing, Point pt);
    private bool HitTestDrawing(DrawingGroup group, Point pt, Drawing& hitDrawing, bool isText);
    private bool HitTestText(DrawingGroup group, Point pt, Drawing& hitDrawing);
    private Drawing PerformHitTest(Rect rect, IntersectionDetail detail);
    private bool HitTestDrawing(GlyphRunDrawing drawing, Geometry geomDisplay, IntersectionDetail detail);
    private bool HitTestDrawing(GeometryDrawing drawing, Geometry geomDisplay, IntersectionDetail detail);
    private bool HitTestDrawing(DrawingGroup group, Geometry geomDisplay, Drawing& hitDrawing, IntersectionDetail detail);
    private DrawingGroup GetDrawingLayer(DrawingGroup drawingGroup, Boolean& isFound);
    private void EnumerateDrawing();
    private void EnumDrawingGroup(DrawingGroup drawingGroup);
    [CompilerGeneratedAttribute]
private void <EnumerateDrawing>b__47_0();
}
public class SharpVectors.Renderers.Wpf.WpfDrawingRenderer : WpfRendererObject {
    private bool _isEmbedded;
    private SvgRectF _invalidRect;
    private ISvgWindow _svgWindow;
    private WpfDrawingSettings _settings;
    private WpfRenderingHelper _svgRenderer;
    private WpfLinkVisitor _linkVisitor;
    private WpfFontFamilyVisitor _fontFamilyVisitor;
    private WpfEmbeddedImageVisitor _imageVisitor;
    private WpfDrawingDocument _drawingDocument;
    private SvgInteractiveModes _interactiveMode;
    public DrawingGroup Drawing { get; }
    public WpfLinkVisitor LinkVisitor { get; public set; }
    public WpfEmbeddedImageVisitor ImageVisitor { get; public set; }
    public WpfFontFamilyVisitor FontFamilyVisitor { get; public set; }
    public SvgInteractiveModes InteractiveMode { get; private set; }
    public ISvgWindow Window { get; public set; }
    public SvgRectF InvalidRect { get; public set; }
    public RenderEvent OnRender { get; public set; }
    public WpfDrawingRenderer(WpfDrawingSettings settings);
    public WpfDrawingRenderer(WpfDrawingSettings settings, bool isEmbedded);
    public DrawingGroup get_Drawing();
    public WpfLinkVisitor get_LinkVisitor();
    public void set_LinkVisitor(WpfLinkVisitor value);
    public WpfEmbeddedImageVisitor get_ImageVisitor();
    public void set_ImageVisitor(WpfEmbeddedImageVisitor value);
    public WpfFontFamilyVisitor get_FontFamilyVisitor();
    public void set_FontFamilyVisitor(WpfFontFamilyVisitor value);
    public SvgInteractiveModes get_InteractiveMode();
    private void set_InteractiveMode(SvgInteractiveModes value);
    public sealed virtual ISvgWindow get_Window();
    public sealed virtual void set_Window(ISvgWindow value);
    public void BeginRender(WpfDrawingDocument drawingDocument);
    public void EndRender();
    public sealed virtual void Render(ISvgElement node);
    public void Render(ISvgElement node, WpfDrawingContext context);
    public void RenderAs(SvgElement node, WpfDrawingContext context);
    public sealed virtual void Render(ISvgDocument node);
    public sealed virtual SvgRectF get_InvalidRect();
    public sealed virtual void set_InvalidRect(SvgRectF value);
    public void RenderChildren(ISvgElement node);
    public void RenderMask(ISvgElement node, WpfDrawingContext context);
    public sealed virtual void InvalidateRect(SvgRectF rect);
    public sealed virtual RenderEvent get_OnRender();
    public sealed virtual void set_OnRender(RenderEvent value);
    public sealed virtual ISvgRect GetRenderedBounds(ISvgElement element, float margin);
    protected virtual void Dispose(bool disposing);
}
[DefaultMemberAttribute("Item")]
public class SharpVectors.Renderers.Wpf.WpfDrawingResources : object {
    private bool _bindToColors;
    private bool _bindToResources;
    private bool _bindPenToBrushes;
    private string _penNameFormat;
    private string _colorNameFormat;
    private string _brushNameFormat;
    private bool _resourceFreeze;
    private bool _useResourceIndex;
    private ResourceModeType _resourceMode;
    private ResourceAccessType _resourceAccess;
    private IDictionary`2<Pen, int> _pens;
    private IDictionary`2<Color, int> _colors;
    private IDictionary`2<SolidColorBrush, int> _brushes;
    private IList`1<string> _resourceKeys;
    private IDictionary`2<Pen, string> _penKeys;
    private IDictionary`2<Color, string> _colorKeys;
    private IDictionary`2<SolidColorBrush, string> _brushKeys;
    private IDictionary`2<Color, string> _colorPalette;
    private IDictionary`2<string, object> _resourceDictionary;
    public bool BindToColors { get; public set; }
    public bool BindToResources { get; public set; }
    public bool BindPenToBrushes { get; public set; }
    public string PenNameFormat { get; public set; }
    public string ColorNameFormat { get; public set; }
    public string BrushNameFormat { get; public set; }
    public bool ResourceFreeze { get; public set; }
    public bool UseResourceIndex { get; public set; }
    public ResourceModeType ResourceMode { get; public set; }
    public ResourceAccessType ResourceAccess { get; public set; }
    public bool IsInitialized { get; }
    public bool IsReady { get; }
    public object Item { get; }
    public IList`1<string> Keys { get; }
    public ICollection`1<string> ColorKeys { get; }
    public ICollection`1<string> PenKeys { get; }
    public IDictionary`2<Color, string> ColorPalette { get; public set; }
    public ICollection`1<string> BrushKeys { get; }
    public static IEqualityComparer`1<Color> ColorComparer { get; }
    public static IEqualityComparer`1<SolidColorBrush> BrushComparer { get; }
    public static IEqualityComparer`1<Pen> PenComparer { get; }
    public bool get_BindToColors();
    public void set_BindToColors(bool value);
    public bool get_BindToResources();
    public void set_BindToResources(bool value);
    public bool get_BindPenToBrushes();
    public void set_BindPenToBrushes(bool value);
    public string get_PenNameFormat();
    public void set_PenNameFormat(string value);
    public string get_ColorNameFormat();
    public void set_ColorNameFormat(string value);
    public string get_BrushNameFormat();
    public void set_BrushNameFormat(string value);
    public bool get_ResourceFreeze();
    public void set_ResourceFreeze(bool value);
    public bool get_UseResourceIndex();
    public void set_UseResourceIndex(bool value);
    public ResourceModeType get_ResourceMode();
    public void set_ResourceMode(ResourceModeType value);
    public ResourceAccessType get_ResourceAccess();
    public void set_ResourceAccess(ResourceAccessType value);
    public bool get_IsInitialized();
    public bool get_IsReady();
    public object get_Item(string key);
    public IList`1<string> get_Keys();
    public ICollection`1<string> get_ColorKeys();
    public ICollection`1<string> get_PenKeys();
    public IDictionary`2<Color, string> get_ColorPalette();
    public void set_ColorPalette(IDictionary`2<Color, string> value);
    public ICollection`1<string> get_BrushKeys();
    public static IEqualityComparer`1<Color> get_ColorComparer();
    public static IEqualityComparer`1<SolidColorBrush> get_BrushComparer();
    public static IEqualityComparer`1<Pen> get_PenComparer();
    public bool Contains(string resourceKey);
    public void AddResource(Brush brush);
    public void AddResource(SolidColorBrush brush);
    public void AddResource(Color color);
    public void AddResource(Pen pen);
    public bool HasResource(Pen pen);
    public bool HasResource(Color color);
    public static bool TryParseColor(string colorText, Color& color);
    public bool HasResource(string colorText, Color& color);
    public bool HasResource(Brush brush);
    public bool HasResource(SolidColorBrush brush);
    public string GetResourceKey(Pen pen);
    public string GetResourceKey(Color color);
    public string GetResourceKey(Brush brush);
    public string GetResourceKey(SolidColorBrush brush);
    public void InitialiseKeys();
    internal static bool IsValid(Pen pen);
    internal static bool IsValid(Brush brush);
    internal static bool Equals(SolidColorBrush x, SolidColorBrush y);
    internal static int GetHashCode(SolidColorBrush obj);
}
[DefaultMemberAttribute("Item")]
public class SharpVectors.Renderers.Wpf.WpfDrawingSettings : WpfSettings`1<WpfDrawingSettings> {
    public static string XmlTagName;
    public static string XmlVersion;
    public static string PropertyNonePen;
    public static string PropertyNoneBrush;
    public static string PropertyIsResources;
    private bool _textAsGeometry;
    private bool _includeRuntime;
    private bool _optimizePath;
    private int _pixelWidth;
    private int _pixelHeight;
    private bool _ensureViewboxPosition;
    private bool _ensureViewboxSize;
    private bool _ignoreRootViewbox;
    private string _userCssFilePath;
    private string _userAgentCssFilePath;
    private CultureInfo _culture;
    private CultureInfo _neutralCulture;
    private string _defaultFontName;
    private static FontFamily _defaultFontFamily;
    private static FontFamily _genericSerif;
    private static FontFamily _genericSansSerif;
    private static FontFamily _genericMonospace;
    private static FontFamily _genericCursive;
    private static FontFamily _genericFantasy;
    private WpfVisitors _wpfVisitors;
    private ISet`1<string> _fontLocations;
    private IList`1<FontFamily> _fontFamilies;
    private IDictionary`2<string, string> _fontFamilyNames;
    private IDictionary`2<string, IList`1<FontFamily>> _fontFamilyMap;
    private IDictionary`2<string, object> _properties;
    private IDictionary`2<string, string> _cssVariables;
    private object _fontSynch;
    private DpiScale _dpiScale;
    private SvgInteractiveModes _interactiveMode;
    private WpfDrawingResources _drawingResources;
    private ExternalResourcesAccessModes _resourcesAccessMode;
    private bool _canUseBitmap;
    public object Item { get; public set; }
    public int PixelWidth { get; public set; }
    public int PixelHeight { get; public set; }
    public bool HasPixelSize { get; }
    public string UserCssFilePath { get; public set; }
    public string UserAgentCssFilePath { get; public set; }
    public IDictionary`2<string, string> CssVariables { get; public set; }
    public bool IgnoreRootViewbox { get; public set; }
    public bool EnsureViewboxSize { get; public set; }
    public bool EnsureViewboxPosition { get; public set; }
    public bool OptimizePath { get; public set; }
    public bool TextAsGeometry { get; public set; }
    public bool IncludeRuntime { get; public set; }
    public CultureInfo CultureInfo { get; public set; }
    public CultureInfo NeutralCultureInfo { get; }
    public string DefaultFontName { get; public set; }
    public WpfVisitors Visitors { get; }
    public static FontFamily DefaultFontFamily { get; public set; }
    public static FontFamily GenericSerif { get; public set; }
    public static FontFamily GenericSansSerif { get; public set; }
    public static FontFamily GenericMonospace { get; public set; }
    public static FontFamily GenericCursive { get; public set; }
    public static FontFamily GenericFantasy { get; public set; }
    public ExternalResourcesAccessModes ExternalResourcesAccessMode { get; public set; }
    public bool CanUseBitmap { get; public set; }
    public IEnumerable`1<string> FontLocations { get; }
    public IDictionary`2<string, string> FontFamilyNames { get; }
    public bool HasFontFamilies { get; }
    public IEnumerable`1<FontFamily> FontFamilies { get; }
    public SvgInteractiveModes InteractiveMode { get; public set; }
    public DpiScale DpiScale { get; public set; }
    public WpfDrawingResources DrawingResources { get; public set; }
    public WpfDrawingSettings(WpfDrawingSettings settings);
    public object get_Item(string name);
    public void set_Item(string name, object value);
    public int get_PixelWidth();
    public void set_PixelWidth(int value);
    public int get_PixelHeight();
    public void set_PixelHeight(int value);
    public bool get_HasPixelSize();
    public string get_UserCssFilePath();
    public void set_UserCssFilePath(string value);
    public string get_UserAgentCssFilePath();
    public void set_UserAgentCssFilePath(string value);
    public IDictionary`2<string, string> get_CssVariables();
    public void set_CssVariables(IDictionary`2<string, string> value);
    public bool get_IgnoreRootViewbox();
    public void set_IgnoreRootViewbox(bool value);
    public bool get_EnsureViewboxSize();
    public void set_EnsureViewboxSize(bool value);
    public bool get_EnsureViewboxPosition();
    public void set_EnsureViewboxPosition(bool value);
    public bool get_OptimizePath();
    public void set_OptimizePath(bool value);
    public bool get_TextAsGeometry();
    public void set_TextAsGeometry(bool value);
    public bool get_IncludeRuntime();
    public void set_IncludeRuntime(bool value);
    public CultureInfo get_CultureInfo();
    public void set_CultureInfo(CultureInfo value);
    public CultureInfo get_NeutralCultureInfo();
    public string get_DefaultFontName();
    public void set_DefaultFontName(string value);
    public WpfVisitors get_Visitors();
    public static FontFamily get_DefaultFontFamily();
    public static void set_DefaultFontFamily(FontFamily value);
    public static FontFamily get_GenericSerif();
    public static void set_GenericSerif(FontFamily value);
    public static FontFamily get_GenericSansSerif();
    public static void set_GenericSansSerif(FontFamily value);
    public static FontFamily get_GenericMonospace();
    public static void set_GenericMonospace(FontFamily value);
    public static FontFamily get_GenericCursive();
    public static void set_GenericCursive(FontFamily value);
    public static FontFamily get_GenericFantasy();
    public static void set_GenericFantasy(FontFamily value);
    public ExternalResourcesAccessModes get_ExternalResourcesAccessMode();
    public void set_ExternalResourcesAccessMode(ExternalResourcesAccessModes value);
    public bool get_CanUseBitmap();
    public void set_CanUseBitmap(bool value);
    public IEnumerable`1<string> get_FontLocations();
    public IDictionary`2<string, string> get_FontFamilyNames();
    public bool get_HasFontFamilies();
    public IEnumerable`1<FontFamily> get_FontFamilies();
    public SvgInteractiveModes get_InteractiveMode();
    public void set_InteractiveMode(SvgInteractiveModes value);
    public DpiScale get_DpiScale();
    public void set_DpiScale(DpiScale value);
    public WpfDrawingResources get_DrawingResources();
    public void set_DrawingResources(WpfDrawingResources value);
    public void AddFontFamilyName(string mappedName, string fontName);
    public void AddFontLocation(string fontLocation);
    public FontFamily LookupFontFamily(string fontName, FontWeight weight, FontStyle style, FontStretch stretch);
    public virtual void ReadXml(XmlReader reader);
    public virtual void WriteXml(XmlWriter writer);
    public virtual WpfDrawingSettings Clone();
    private FontFamily GetMatchingFontFamily(IList`1<FontFamily> fontFamilies, FontWeight weight, FontStyle style, FontStretch stretch);
    private void BuildDocumentFonts();
    private void LoadFontFamilies();
    private bool AddFontFamilies(string fontLocation);
}
public abstract class SharpVectors.Renderers.Wpf.WpfEmbeddedImageVisitor : WpfVisitor {
    public abstract virtual ImageSource Visit(SvgImageElement element, WpfDrawingContext context);
}
public abstract class SharpVectors.Renderers.Wpf.WpfFill : DependencyObject {
    public bool IsUserSpace { get; }
    public WpfFillType FillType { get; }
    public abstract virtual bool get_IsUserSpace();
    public abstract virtual WpfFillType get_FillType();
    public abstract virtual Brush GetBrush(Rect elementBounds, WpfDrawingContext context, Transform viewTransform);
    public static WpfFill CreateFill(SvgDocument document, string absoluteUri);
    public static Brush CreateViewportBrush(SvgStyleableElement svgElm);
}
public enum SharpVectors.Renderers.Wpf.WpfFillType : Enum {
    public int value__;
    public static WpfFillType None;
    public static WpfFillType Solid;
    public static WpfFillType Gradient;
    public static WpfFillType Pattern;
}
public class SharpVectors.Renderers.Wpf.WpfFontFamilyInfo : object {
    public static WpfFontFamilyInfo Empty;
    private string _fontName;
    private string _fontVariant;
    private SvgFontElement _fontElement;
    private FontStyle _style;
    private FontFamily _family;
    private FontWeight _weight;
    private FontStretch _stretch;
    private WpfFontFamilyType _familyType;
    public bool IsEmpty { get; }
    public WpfFontFamilyType FontFamilyType { get; }
    public string Name { get; }
    public string Variant { get; public set; }
    public SvgFontElement FontElement { get; }
    public FontFamily Family { get; internal set; }
    public FontWeight Weight { get; }
    public FontStyle Style { get; }
    public FontStretch Stretch { get; }
    public WpfFontFamilyInfo(FontFamily family, FontWeight weight, FontStyle style, FontStretch stretch);
    public WpfFontFamilyInfo(WpfFontFamilyType familyType, FontFamily family, FontWeight weight, FontStyle style, FontStretch stretch);
    public WpfFontFamilyInfo(WpfFontFamilyType familyType, string fontName, FontFamily family, FontWeight weight, FontStyle style, FontStretch stretch);
    public WpfFontFamilyInfo(string fontName, SvgFontElement fontElement, FontWeight weight, FontStyle style, FontStretch stretch);
    private static WpfFontFamilyInfo();
    public bool get_IsEmpty();
    public WpfFontFamilyType get_FontFamilyType();
    public string get_Name();
    public string get_Variant();
    public void set_Variant(string value);
    public SvgFontElement get_FontElement();
    public FontFamily get_Family();
    internal void set_Family(FontFamily value);
    public FontWeight get_Weight();
    public FontStyle get_Style();
    public FontStretch get_Stretch();
}
public enum SharpVectors.Renderers.Wpf.WpfFontFamilyType : Enum {
    public int value__;
    public static WpfFontFamilyType None;
    public static WpfFontFamilyType Generic;
    public static WpfFontFamilyType System;
    public static WpfFontFamilyType Private;
    public static WpfFontFamilyType Svg;
    public static WpfFontFamilyType OpenType;
    public static WpfFontFamilyType Woff;
}
public abstract class SharpVectors.Renderers.Wpf.WpfFontFamilyVisitor : WpfVisitor {
    public abstract virtual WpfFontFamilyInfo Visit(string fontName, WpfFontFamilyInfo familyInfo, WpfDrawingContext context);
}
public class SharpVectors.Renderers.Wpf.WpfGradientFill : WpfFill {
    private bool _isUserSpace;
    private SvgGradientElement _gradientElement;
    public bool IsUserSpace { get; }
    public WpfFillType FillType { get; }
    public WpfGradientFill(SvgGradientElement gradientElement);
    public virtual bool get_IsUserSpace();
    public virtual WpfFillType get_FillType();
    public virtual Brush GetBrush(Rect elementBounds, WpfDrawingContext context, Transform viewTransform);
    private Brush GetLinearGradientBrush(SvgLinearGradientElement res, Transform viewBoxTransform);
    private Brush GetRadialGradientBrush(SvgRadialGradientElement res);
    private MatrixTransform GetTransformMatrix(SvgGradientElement gradientElement);
    private GradientStopCollection GetGradientStops(XmlNodeList stops);
    private Transform FitToViewbox(SvgRect viewBox, Rect rectToFit);
    private Double[] FitToViewBox(SvgPreserveAspectRatioType alignment, SvgRect viewBox, SvgRect rectToFit);
}
public class SharpVectors.Renderers.Wpf.WpfGroupRendering : WpfRendering {
    private DrawingGroup _drawGroup;
    public WpfGroupRendering(SvgElement element);
    public virtual void BeforeRender(WpfDrawingRenderer renderer);
    public virtual void Render(WpfDrawingRenderer renderer);
    public virtual void AfterRender(WpfDrawingRenderer renderer);
    protected virtual void Initialize(SvgElement element);
}
public class SharpVectors.Renderers.Wpf.WpfHitPath : object {
    public static string RootValue;
    public static string Separator;
    public static Char[] Splitter;
    private string _value;
    private WpfHitPath _parent;
    private WpfHitPath[] _children;
    public bool IsRoot { get; }
    public WpfHitPath Root { get; }
    public bool HasChild { get; }
    public WpfHitPath FirstChild { get; }
    public WpfHitPath LastChild { get; }
    public string Path { get; }
    public String[] SplitPath { get; }
    public string Value { get; public set; }
    public WpfHitPath Parent { get; public set; }
    public WpfHitPath[] Children { get; }
    public WpfHitPath(string value);
    public WpfHitPath(WpfHitPath parent, string value);
    private static WpfHitPath();
    public bool get_IsRoot();
    public WpfHitPath get_Root();
    public bool get_HasChild();
    public WpfHitPath get_FirstChild();
    public WpfHitPath get_LastChild();
    public string get_Path();
    public String[] get_SplitPath();
    public string get_Value();
    public void set_Value(string value);
    public WpfHitPath get_Parent();
    public void set_Parent(WpfHitPath value);
    public WpfHitPath[] get_Children();
    public WpfHitPath AddChild(string value);
    public WpfHitPath AddChild(WpfHitPath child);
    public virtual string ToString();
    public virtual int GetHashCode();
    public static bool op_Equality(WpfHitPath path1, WpfHitPath path2);
    public static bool op_Inequality(WpfHitPath path1, WpfHitPath path2);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(WpfHitPath other);
    public static bool Equals(WpfHitPath path1, WpfHitPath path2);
    public Transform GetTransform(WpfDrawingDocument document, Drawing hitDrawing);
    private static bool EqualArrays(WpfHitPath[] paths1, WpfHitPath[] paths2);
}
public class SharpVectors.Renderers.Wpf.WpfHitTestResult : object {
    public static WpfHitTestResult Empty;
    private Nullable`1<Point> _point;
    private Nullable`1<Rect> _rect;
    private Drawing _drawing;
    private SvgElement _element;
    public bool IsHit { get; }
    public Nullable`1<Point> Point { get; }
    public Nullable`1<Rect> Rect { get; }
    public SvgElement Element { get; }
    public Drawing Drawing { get; }
    public WpfHitTestResult(int pointX, int pointY, SvgElement element, Drawing drawing);
    public WpfHitTestResult(Point point, SvgElement element, Drawing drawing);
    public WpfHitTestResult(Rect rect, SvgElement element, Drawing drawing);
    private static WpfHitTestResult();
    public bool get_IsHit();
    public Nullable`1<Point> get_Point();
    public Nullable`1<Rect> get_Rect();
    public SvgElement get_Element();
    public Drawing get_Drawing();
}
public enum SharpVectors.Renderers.Wpf.WpfHitTextLevel : Enum {
    public int value__;
    public static WpfHitTextLevel Bounds;
    public static WpfHitTextLevel Glyphs;
}
public abstract class SharpVectors.Renderers.Wpf.WpfIDVisitor : WpfVisitor {
    public abstract virtual string Visit(SvgElement element, WpfDrawingContext context);
}
public class SharpVectors.Renderers.Wpf.WpfImageRendering : WpfRendering {
    private bool _idAssigned;
    private WpfDrawingRenderer _embeddedRenderer;
    public WpfImageRendering(SvgElement element);
    public virtual void BeforeRender(WpfDrawingRenderer renderer);
    public virtual void Render(WpfDrawingRenderer renderer);
    public virtual void AfterRender(WpfDrawingRenderer renderer);
    protected virtual void Initialize(SvgElement element);
    private SvgWindow GetSvgWindow();
    private ImageSource GetBitmapSource(SvgImageElement element, WpfDrawingContext context);
    private ImageSource GetBitmap(SvgImageElement element, WpfDrawingContext context);
    private Rect GetBounds(Rect bounds, Size textSize, SvgPreserveAspectRatioType alignment);
    private Transform GetAspectRatioTransform(SvgPreserveAspectRatio spar, SvgRect sourceBounds, SvgRect elementBounds);
}
public abstract class SharpVectors.Renderers.Wpf.WpfLinkVisitor : WpfVisitor {
    public bool Aggregates { get; }
    public bool IsAggregate { get; }
    public string AggregatedLayerName { get; }
    public abstract virtual bool get_Aggregates();
    public abstract virtual bool get_IsAggregate();
    public abstract virtual string get_AggregatedLayerName();
    public abstract virtual bool Exists(string linkId);
    public abstract virtual void Initialize(DrawingGroup linkGroup, WpfDrawingContext context);
    public abstract virtual void Visit(DrawingGroup group, SvgAElement element, WpfDrawingContext context, float opacity);
}
public class SharpVectors.Renderers.Wpf.WpfMarkerRendering : WpfRendering {
    private Matrix _matrix;
    private DrawingGroup _drawGroup;
    private SvgMarkerElement _markerElement;
    private SvgStyleableElement _hostElement;
    private PathGeometry _hostGeometry;
    private PathFigureCollection _pathFigures;
    public WpfMarkerRendering(SvgElement element);
    public virtual void BeforeRender(WpfDrawingRenderer renderer);
    public virtual void Render(WpfDrawingRenderer renderer);
    public virtual void AfterRender(WpfDrawingRenderer renderer);
    public void RenderMarker(WpfDrawingRenderer renderer, WpfDrawingContext gr, SvgMarkerPosition markerPos, SvgStyleableElement refElement);
    protected virtual void Initialize(SvgElement element);
    private static Matrix GetTransformMatrix(SvgElement element);
    private static Matrix GetTransformMatrix(SvgElement element, TransformGroup transform);
    private double GetAngleAt(int index, double angle, SvgMarkerPosition position, ISharpMarkerHost markerHost);
}
public class SharpVectors.Renderers.Wpf.WpfPathRendering : WpfRendering {
    private bool _setBrushOpacity;
    private bool _isLineSegment;
    private DrawingGroup _drawGroup;
    public WpfPathRendering(SvgElement element);
    public virtual void BeforeRender(WpfDrawingRenderer renderer);
    public virtual void Render(WpfDrawingRenderer renderer);
    private void RenderGroup(WpfDrawingRenderer renderer);
    private void RenderPath(WpfDrawingRenderer renderer);
    public virtual void AfterRender(WpfDrawingRenderer renderer);
    private static float AlphaComposition(Color color);
    private static float AlphaComposition(Brush brush);
    private static Color ConvertColor(Color color);
    private static void ConvertColors(Brush brush);
    protected virtual void Initialize(SvgElement element);
}
public class SharpVectors.Renderers.Wpf.WpfPatternFill : WpfFill {
    private bool _isUserSpace;
    private SvgPatternElement _patternElement;
    private SvgPatternElement _renderedElement;
    public bool IsUserSpace { get; }
    public WpfFillType FillType { get; }
    public WpfPatternFill(SvgPatternElement patternElement);
    public virtual bool get_IsUserSpace();
    public virtual WpfFillType get_FillType();
    public virtual Brush GetBrush(Rect elementBounds, WpfDrawingContext context, Transform viewTransform);
    private void PrepareTargetPattern();
    private DrawingGroup GetImage(WpfDrawingContext context, Rect bounds);
    private double CalcPatternUnit(SvgLength length, SvgLengthDirection dir, Rect bounds);
    private Rect GetDestRect(Rect bounds);
    private MatrixTransform GetTransformMatrix(Rect bounds, bool isUserSpace);
}
public class SharpVectors.Renderers.Wpf.WpfPatternRendering : WpfRendering {
    private bool _isRecursive;
    private string _idElement;
    private DrawingGroup _drawGroup;
    public bool IsRecursive { get; }
    public WpfPatternRendering(SvgElement element);
    public virtual bool get_IsRecursive();
    public virtual void BeforeRender(WpfDrawingRenderer renderer);
    public virtual void Render(WpfDrawingRenderer renderer);
    public virtual void AfterRender(WpfDrawingRenderer renderer);
    protected virtual void Initialize(SvgElement element);
}
public abstract class SharpVectors.Renderers.Wpf.WpfRendererObject : DependencyObject {
    private static Regex _regFix;
    private static Regex _regExCaps;
    protected bool _isDisposed;
    protected WpfDrawingContext _context;
    protected bool _flattenClosedPath;
    protected double _flattenTolerance;
    protected ToleranceType _flattenToleranceType;
    public bool IsDisposed { get; }
    public WpfDrawingContext Context { get; }
    public bool IsInitialized { get; }
    protected WpfRendererObject(WpfDrawingContext context);
    private static WpfRendererObject();
    protected virtual override void Finalize();
    public bool get_IsDisposed();
    public virtual WpfDrawingContext get_Context();
    public virtual bool get_IsInitialized();
    public static bool IsNullOrIdentity(Transform transform);
    public static bool SplitByCaps(string input, String& output);
    public static string GetElementName(SvgElement element, WpfDrawingContext context);
    public static string GetElementClassName(SvgElement element, WpfDrawingContext context);
    public static bool IsValidIdentifier(string identifier);
    public static bool IsIdentifierStart(char c);
    public static bool IsIdentifierPart(char c);
    public static Transform Combine(Transform first, Transform second, bool groupedFormat, bool checkEquality);
    public Geometry CreateGeometry(ISvgElement element, bool optimizePath);
    public Geometry CreateGeometry(SvgEllipseElement element);
    public Geometry CreateGeometry(SvgRectElement element);
    public Geometry CreateGeometry(SvgLineElement element);
    public Geometry CreateGeometryEx(SvgPathElement element);
    public Geometry CreateGeometry(SvgPathElement element);
    public Geometry CreateGeometry(SvgCircleElement element);
    public Geometry CreateGeometry(SvgPolylineElement element);
    public Geometry CreateGeometry(SvgPolygonElement element);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class SharpVectors.Renderers.Wpf.WpfRendering : WpfRenderingBase {
    private static Regex _reUrl;
    private static object _synch;
    private static IDictionary`2<string, WpfRendering> _cacheRendering;
    private Geometry _clipGeometry;
    private Transform _transformMatrix;
    private Brush _maskBrush;
    private SvgUnitType _clipPathUnits;
    private SvgUnitType _maskUnits;
    private SvgUnitType _maskContentUnits;
    private bool _combineTransforms;
    public Transform Transform { get; public set; }
    public Geometry ClipGeometry { get; public set; }
    public SvgUnitType ClipUnits { get; }
    public Brush Masking { get; public set; }
    public SvgUnitType MaskUnits { get; }
    public SvgUnitType MaskContentUnits { get; }
    public bool CombineTransforms { get; public set; }
    public WpfRendering(SvgElement element);
    private static WpfRendering();
    public Transform get_Transform();
    public void set_Transform(Transform value);
    public Geometry get_ClipGeometry();
    public void set_ClipGeometry(Geometry value);
    public SvgUnitType get_ClipUnits();
    public Brush get_Masking();
    public void set_Masking(Brush value);
    public SvgUnitType get_MaskUnits();
    public SvgUnitType get_MaskContentUnits();
    public bool get_CombineTransforms();
    public void set_CombineTransforms(bool value);
    public virtual void BeforeRender(WpfDrawingRenderer renderer);
    public virtual void AfterRender(WpfDrawingRenderer renderer);
    public static WpfRendering Create(ISvgElement element);
    private static WpfRendering CreateRendering(SvgElement svgElement);
    public static WpfRendering CreateByUri(SvgDocument document, string baseUri, string url);
    protected virtual void Initialize(SvgElement element);
    protected SvgTitleElement GetTitleElement();
    protected void SetClip(WpfDrawingContext context);
    protected void SetMask(WpfDrawingContext context);
    private static double CalcPatternUnit(SvgMaskElement maskElement, SvgLength length, SvgLengthDirection dir, Rect bounds);
    private static Rect GetMaskDestRect(SvgMaskElement maskElement, Rect bounds);
    protected void SetQuality(WpfDrawingContext context);
    protected void SetTransform(WpfDrawingContext context);
    protected void FitToViewbox(WpfDrawingContext context, Rect elementBounds);
    protected void FitToViewbox(WpfDrawingContext context, SvgElement svgElement, Rect elementBounds);
    protected double CalcLengthUnit(SvgLength length, SvgLengthDirection dir, Rect bounds);
    private GeometryCollection CreateClippingRegion(SvgClipPathElement clipPath, WpfDrawingContext context);
    private GeometryCollection GetTextClippingRegion(SvgStyleableElement element, WpfDrawingContext context);
    private static void ExtractGeometry(DrawingGroup group, GeometryCollection geomColl);
    protected static string ExtractMarkerUrl(string propValue);
    protected static void RenderMarkers(WpfDrawingRenderer renderer, SvgStyleableElement styleElm, WpfDrawingContext gr);
    protected static bool IsPresentationMarker(SvgStyleableElement styleElm);
    protected virtual void Dispose(bool disposing);
}
public abstract class SharpVectors.Renderers.Wpf.WpfRenderingBase : WpfRendererObject {
    protected bool _isReady;
    protected string _elementId;
    protected string _uniqueId;
    protected SvgElement _svgElement;
    protected WpfSvgPaintContext _paintContext;
    public SvgElement Element { get; }
    public bool IsRecursive { get; }
    public bool IsReady { get; protected set; }
    public WpfSvgPaintContext PaintContext { get; }
    protected WpfRenderingBase(SvgElement element);
    protected WpfRenderingBase(SvgElement element, WpfDrawingContext context);
    public SvgElement get_Element();
    public virtual bool get_IsRecursive();
    public bool get_IsReady();
    protected void set_IsReady(bool value);
    public WpfSvgPaintContext get_PaintContext();
    public virtual bool NeedRender(WpfDrawingRenderer renderer);
    public virtual void BeforeRender(WpfDrawingRenderer renderer);
    public virtual void Render(WpfDrawingRenderer renderer);
    public virtual void AfterRender(WpfDrawingRenderer renderer);
    protected virtual void Initialize(SvgElement element);
    protected string GetElementName();
    protected string GetElementClass();
    protected void Rendered(Drawing drawing);
    protected virtual void Dispose(bool disposing);
}
public class SharpVectors.Renderers.Wpf.WpfRenderingHelper : DependencyObject {
    private string _currentLang;
    private string _currentLangName;
    private WpfDrawingRenderer _renderer;
    private IDictionary`2<string, WpfRendering> _rendererMap;
    private ISet`1<string> _useIdElements;
    private ISet`1<int> _useElements;
    public WpfRenderingHelper(WpfDrawingRenderer renderer);
    public void Render(ISvgDocument docElement);
    public void Render(SvgDocument docElement);
    public void Render(ISvgElement svgElement);
    public void RenderAs(SvgElement svgElement);
    public void RenderChildren(ISvgElement svgElement);
    public void RenderMask(ISvgElement svgElement);
    private bool BeginUseElement(SvgUseElement element, Int32& hashCode);
    private bool EndUseElement(SvgUseElement element, int hashCode);
    private void RenderElement(ISvgElement svgElement);
    private void RenderElementAs(SvgElement svgElement);
    private void RenderUseElement(ISvgElement svgElement);
    private void RenderElementChildren(ISvgElement svgElement);
    private void RenderSwitchChildren(ISvgElement svgElement);
    private bool PassesSwitchAllTest(ISvgTests element);
}
public class SharpVectors.Renderers.Wpf.WpfResourceSettings : WpfSettings`1<WpfResourceSettings> {
    public static string XmlTagName;
    public static string XmlVersion;
    private bool _bindToColors;
    private bool _bindToResources;
    private bool _bindPenToBrushes;
    private string _penNameFormat;
    private string _colorNameFormat;
    private string _brushNameFormat;
    private bool _resourceFreeze;
    private bool _useResourceIndex;
    private ResourceModeType _resourceMode;
    private ResourceAccessType _resourceAccess;
    private int _indentSpaces;
    private int _numericPrecision;
    private ISet`1<string> _svgSources;
    private IDictionary`2<Color, string> _colorPalette;
    private SvgContainer _resolverContainer;
    public bool BindToColors { get; public set; }
    public bool BindToResources { get; public set; }
    public bool BindPenToBrushes { get; public set; }
    public string PenNameFormat { get; public set; }
    public string ColorNameFormat { get; public set; }
    public string BrushNameFormat { get; public set; }
    public bool ResourceFreeze { get; public set; }
    public bool UseResourceIndex { get; public set; }
    public ResourceModeType ResourceMode { get; public set; }
    public ResourceAccessType ResourceAccess { get; public set; }
    public ResourceKeyResolverType ResourceResolverType { get; }
    public int IndentSpaces { get; public set; }
    public int NumericPrecision { get; public set; }
    public int SourceCount { get; }
    public IEnumerable`1<string> Sources { get; }
    public IDictionary`2<Color, string> ColorPalette { get; public set; }
    public WpfResourceSettings(WpfResourceSettings source);
    public bool get_BindToColors();
    public void set_BindToColors(bool value);
    public bool get_BindToResources();
    public void set_BindToResources(bool value);
    public bool get_BindPenToBrushes();
    public void set_BindPenToBrushes(bool value);
    public string get_PenNameFormat();
    public void set_PenNameFormat(string value);
    public string get_ColorNameFormat();
    public void set_ColorNameFormat(string value);
    public string get_BrushNameFormat();
    public void set_BrushNameFormat(string value);
    public bool get_ResourceFreeze();
    public void set_ResourceFreeze(bool value);
    public bool get_UseResourceIndex();
    public void set_UseResourceIndex(bool value);
    public ResourceModeType get_ResourceMode();
    public void set_ResourceMode(ResourceModeType value);
    public ResourceAccessType get_ResourceAccess();
    public void set_ResourceAccess(ResourceAccessType value);
    public ResourceKeyResolverType get_ResourceResolverType();
    public int get_IndentSpaces();
    public void set_IndentSpaces(int value);
    public int get_NumericPrecision();
    public void set_NumericPrecision(int value);
    public int get_SourceCount();
    public IEnumerable`1<string> get_Sources();
    public IDictionary`2<Color, string> get_ColorPalette();
    public void set_ColorPalette(IDictionary`2<Color, string> value);
    public void CopyTo(WpfDrawingResources resources);
    private void RemoveResolver();
    public void RegisterResolver(IResourceKeyResolver keyResolver);
    public void RegisterResolver(Func`1<IResourceKeyResolver> keyResolver);
    public bool IsResolverRegistered();
    public IResourceKeyResolver RetrieveResolver();
    public bool AddSource(string sourcePath);
    public bool RemoveSource(string sourcePath);
    public void ClearSources();
    private static string StripEndBackSlash(string dir);
    public void Load(string contentFile);
    public string Save();
    public void Save(string contentFile);
    public void Save(TextWriter textWriter);
    public void Save(Stream stream);
    public virtual void ReadXml(XmlReader reader);
    public virtual void WriteXml(XmlWriter writer);
    public virtual WpfResourceSettings Clone();
}
public class SharpVectors.Renderers.Wpf.WpfSolidColorFill : WpfFill {
    private bool _isUserSpace;
    private SvgSolidColorElement _solidColorElement;
    public bool IsUserSpace { get; }
    public WpfFillType FillType { get; }
    public WpfSolidColorFill(SvgSolidColorElement gradientElement);
    public virtual bool get_IsUserSpace();
    public virtual WpfFillType get_FillType();
    public virtual Brush GetBrush(Rect elementBounds, WpfDrawingContext context, Transform viewTransform);
}
public class SharpVectors.Renderers.Wpf.WpfSvgColor : SvgColor {
    private string _propertyName;
    private SvgStyleableElement _element;
    public string Name { get; }
    public Color Color { get; }
    public int Alpha { get; }
    public double Opacity { get; }
    public WpfSvgColor(SvgStyleableElement elm, string propertyName);
    public string get_Name();
    public Color get_Color();
    public int get_Alpha();
    public double get_Opacity();
}
public class SharpVectors.Renderers.Wpf.WpfSvgPaint : SvgPaint {
    private static StringComparison Comparer;
    private string _propertyName;
    private WpfFill _paintFill;
    private SvgStyleableElement _element;
    private WpfDrawingContext _context;
    public WpfFill PaintServer { get; }
    public bool IsUserSpace { get; }
    public WpfFillType FillType { get; }
    public bool IsFillTransformable { get; }
    public WpfSvgPaint WpfFallback { get; }
    public WpfSvgPaint(WpfDrawingContext context, SvgStyleableElement elm, string propName);
    private WpfSvgPaint(string str);
    private static WpfSvgPaint();
    public WpfFill get_PaintServer();
    public bool get_IsUserSpace();
    public WpfFillType get_FillType();
    public bool get_IsFillTransformable();
    public WpfSvgPaint get_WpfFallback();
    public Brush GetBrush();
    public Brush GetBrush(bool setOpacity);
    public Brush GetBrush(Geometry geometry);
    public Brush GetBrush(Geometry geometry, bool setOpacity);
    public Pen GetPen(bool setOpacity);
    public Pen GetPen(Geometry geometry, bool setOpacity);
    public WpfSvgPaint GetScopeStroke();
    internal static bool Equals(double number1, double number2);
    internal static bool Equals(GradientStop stop1, GradientStop stop2);
    internal static bool Equals(Transform transform1, Transform transform2);
    public static bool IsEqual(Brush brush1, Brush brush2);
    private WpfSvgPaintContext GetFillContext();
    private WpfSvgPaintContext GetStrokeContext();
    private double GetOpacity(string fillOrStroke);
    private PenLineCap GetLineCap();
    private PenLineJoin GetLineJoin();
    private double GetStrokeWidth();
    private double GetMiterLimit(double strokeWidth);
    private DoubleCollection GetDashArray(double strokeWidth);
    private double GetDashOffset(double strokeWidth);
    private WpfFill GetPaintFill(string uri);
    private WpfSvgPaint GetDeferredFill();
    private Brush GetBrush(Geometry geometry, string propPrefix, bool setOpacity);
    private CssPrimitiveVarsValue GetVarsValue(WpfSvgPaint fill);
}
public class SharpVectors.Renderers.Wpf.WpfSvgPaintContext : object {
    private string _id;
    private string _targetId;
    private WpfSvgPaint _fill;
    private WpfSvgPaint _stroke;
    private object _tag;
    public string Id { get; }
    public string TargetId { get; public set; }
    public bool HasTarget { get; }
    public WpfSvgPaint Fill { get; public set; }
    public WpfSvgPaint Stroke { get; public set; }
    public object Tag { get; public set; }
    public WpfSvgPaintContext(string id);
    public string get_Id();
    public string get_TargetId();
    public void set_TargetId(string value);
    public bool get_HasTarget();
    public WpfSvgPaint get_Fill();
    public void set_Fill(WpfSvgPaint value);
    public WpfSvgPaint get_Stroke();
    public void set_Stroke(WpfSvgPaint value);
    public object get_Tag();
    public void set_Tag(object value);
}
public class SharpVectors.Renderers.Wpf.WpfSvgRendering : WpfRendering {
    private bool _isRoot;
    private bool _isRecursive;
    private DrawingGroup _drawGroup;
    public bool IsRecursive { get; }
    public WpfSvgRendering(SvgElement element);
    public virtual bool get_IsRecursive();
    public virtual void BeforeRender(WpfDrawingRenderer renderer);
    public virtual void Render(WpfDrawingRenderer renderer);
    public virtual void AfterRender(WpfDrawingRenderer renderer);
    protected virtual void Initialize(SvgElement element);
    private Transform FitToViewbox(WpfDrawingContext context, ISvgFitToViewBox fitToView, Rect elementBounds);
    private Nullable`1<Rect> GetViewbox(WpfDrawingRenderer renderer);
    private void ApplyViewBox(WpfDrawingRenderer renderer);
    private void OnAfterRender(WpfDrawingRenderer renderer);
    private void AdjustViewbox();
    private DrawingGroup CreateOuterGroup();
}
public class SharpVectors.Renderers.Wpf.WpfSwitchRendering : WpfRendering {
    private DrawingGroup _drawGroup;
    public WpfSwitchRendering(SvgElement element);
    public virtual void BeforeRender(WpfDrawingRenderer renderer);
    public virtual void Render(WpfDrawingRenderer renderer);
    public virtual void AfterRender(WpfDrawingRenderer renderer);
    protected virtual void Initialize(SvgElement element);
}
public class SharpVectors.Renderers.Wpf.WpfSymbolRendering : WpfRendering {
    private bool _isRecursive;
    private DrawingGroup _drawGroup;
    public bool IsRecursive { get; }
    public WpfSymbolRendering(SvgElement element);
    public virtual bool get_IsRecursive();
    public virtual void BeforeRender(WpfDrawingRenderer renderer);
    public virtual void Render(WpfDrawingRenderer renderer);
    public virtual void AfterRender(WpfDrawingRenderer renderer);
    protected virtual void Initialize(SvgElement element);
    private void OnAfterRender(WpfDrawingRenderer renderer);
    private Transform UseFitToViewbox(SvgElement svgElement, Rect elementBounds);
    private DrawingGroup CreateOuterGroup();
    private Rect GetRootBounds();
}
public class SharpVectors.Renderers.Wpf.WpfTextRendering : WpfRendering {
    private static string Whitespace;
    private static Regex _tabNewline;
    private static Regex _decimalNumber;
    private bool _isMeasuring;
    private bool _isGroupAdded;
    private bool _isTextPath;
    private double _textWidth;
    private SvgTextBaseElement _textElement;
    private DrawingGroup _drawGroup;
    private DrawingContext _drawContext;
    private WpfTextContext _textContext;
    private WpfHorzTextRenderer _horzRenderer;
    private WpfVertTextRenderer _vertRenderer;
    private WpfPathTextRenderer _pathRenderer;
    public bool IsRecursive { get; }
    public bool IsMeasuring { get; }
    public bool IsTextPath { get; public set; }
    public double TextWidth { get; }
    public WpfTextContext TextContext { get; private set; }
    public WpfTextRendering(SvgElement element);
    private static WpfTextRendering();
    public virtual bool get_IsRecursive();
    public bool get_IsMeasuring();
    public bool get_IsTextPath();
    public void set_IsTextPath(bool value);
    public double get_TextWidth();
    public WpfTextContext get_TextContext();
    private void set_TextContext(WpfTextContext value);
    public virtual void BeforeRender(WpfDrawingRenderer renderer);
    public virtual void Render(WpfDrawingRenderer renderer);
    public void SetTextWidth(double textWidth);
    public void AddTextWidth(double textWidth);
    private void ResetGuidelineSet(DrawingGroup group);
    public virtual void AfterRender(WpfDrawingRenderer renderer);
    protected virtual void Initialize(SvgElement element);
    private void RenderHorzText(SvgTextContentElement element, Point& ctp, string text, double rotate, WpfTextPlacement placement, bool isWhitespace);
    private void RenderHorzTextRun(SvgTextContentElement element, Point& ctp, string text, double rotate, WpfTextPlacement placement, bool isWhitespace);
    private void RenderVertText(SvgTextContentElement element, Point& ctp, string text, double rotate, WpfTextPlacement placement, bool isWhitespace);
    private void RenderVertTextRun(SvgTextContentElement element, Point& ctp, string text, double rotate, WpfTextPlacement placement, bool isWhitespace);
    private void RenderTextPath(SvgTextPathElement textPath, Point& ctp, double rotate, WpfTextPlacement placement);
    private void AddAltGlyphElementRun(SvgAltGlyphElement element, Point& ctp, bool isVertical, bool isSingleLine);
    private void AddTRefElementRun(SvgTRefElement element, Point& ctp, bool isVertical, bool isSingleLine);
    private void AddTSpanElementRun(SvgTSpanElement element, Point& ctp, bool isVertical, bool isSingleLine, XmlNode spaceNode);
}
public class SharpVectors.Renderers.Wpf.WpfUseRendering : WpfRendering {
    private DrawingGroup _drawGroup;
    public WpfUseRendering(SvgElement element);
    public virtual void BeforeRender(WpfDrawingRenderer renderer);
    public virtual void Render(WpfDrawingRenderer renderer);
    public virtual void AfterRender(WpfDrawingRenderer renderer);
    protected virtual void Initialize(SvgElement element);
}
public abstract class SharpVectors.Renderers.Wpf.WpfVisitor : WpfRendererObject {
    protected bool _isInitialized;
    public bool IsInitialized { get; }
    protected WpfVisitor(WpfDrawingContext context);
    public virtual bool get_IsInitialized();
    public virtual void Initialize(WpfDrawingContext context);
    public virtual void Uninitialize();
}
public class SharpVectors.Renderers.Wpf.WpfVisitors : object {
    private WpfIDVisitor _idVisitor;
    private WpfLinkVisitor _linkVisitor;
    private WpfClassVisitor _classVisitor;
    private WpfFontFamilyVisitor _fontFamilyVisitor;
    private WpfEmbeddedImageVisitor _imageVisitor;
    public WpfLinkVisitor LinkVisitor { get; public set; }
    public WpfEmbeddedImageVisitor ImageVisitor { get; public set; }
    public WpfFontFamilyVisitor FontFamilyVisitor { get; public set; }
    public WpfIDVisitor IDVisitor { get; public set; }
    public WpfClassVisitor ClassVisitor { get; public set; }
    public WpfLinkVisitor get_LinkVisitor();
    public void set_LinkVisitor(WpfLinkVisitor value);
    public WpfEmbeddedImageVisitor get_ImageVisitor();
    public void set_ImageVisitor(WpfEmbeddedImageVisitor value);
    public WpfFontFamilyVisitor get_FontFamilyVisitor();
    public void set_FontFamilyVisitor(WpfFontFamilyVisitor value);
    public WpfIDVisitor get_IDVisitor();
    public void set_IDVisitor(WpfIDVisitor value);
    public WpfClassVisitor get_ClassVisitor();
    public void set_ClassVisitor(WpfClassVisitor value);
    public void Initialize(WpfDrawingContext context);
    public void Uninitialize();
}
public abstract class SharpVectors.Renderers.WpfObject : DependencyObject {
    public static void NotNull(object argObject, string argName);
    public static void NotNull(string argObject, string argName);
    public static void NotEmpty(string argObject, string argName);
    public static void NotNullNotEmpty(string argObject, string argName);
    public static void NotNullNotEmpty(IList`1<E> argObject, string argName);
    public static void PathMustExist(string argObject, string argName);
}
public abstract class SharpVectors.Renderers.WpfSettings`1 : WpfObject {
    protected StringComparison _comparer;
    protected WpfSettings`1(WpfSettings`1<T> source);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    public virtual void ReadXml(XmlReader reader);
    public virtual void WriteXml(XmlWriter writer);
    protected static void WriteEnum(XmlWriter writer, string name, string value);
    protected static void WriteEnum(XmlWriter writer, string name, string value, string content);
    protected static void WriteCData(XmlWriter writer, string name, string value);
    protected static void WriteCData(XmlWriter writer, string name, string value, string content);
    protected static void WriteProperty(XmlWriter writer, string name, string value);
    protected static void WriteProperty(XmlWriter writer, string name, string value, string content);
    protected static void WriteProperty(XmlWriter writer, string name, object value);
    protected static void WriteProperty(XmlWriter writer, string name, bool value);
    protected static void WriteProperty(XmlWriter writer, string name, int value);
    public abstract virtual T Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
