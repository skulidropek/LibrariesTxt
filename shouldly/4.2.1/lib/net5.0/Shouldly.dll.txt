[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ExpressionToString.ExpressionStringBuilder : ExpressionVisitor {
    private StringBuilder builder;
    private bool trimLongArgumentList;
    private bool skipDot;
    private ExpressionStringBuilder(bool trimLongArgumentList);
    public static string ToString(Expression expression, bool trimLongArgumentList);
    protected virtual Expression VisitLambda(Expression`1<T> node);
    protected virtual Expression VisitInvocation(InvocationExpression node);
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitTypeBinary(TypeBinaryExpression node);
    protected virtual Expression VisitParameter(ParameterExpression node);
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual Expression VisitConstant(ConstantExpression node);
    protected virtual Expression VisitUnary(UnaryExpression node);
    protected virtual Expression VisitNew(NewExpression node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual Expression VisitConditional(ConditionalExpression node);
    private void VisitArguments(Expression[] arguments);
    private static bool CheckIfAnonymousType(Type type);
    private static string ToString(ExpressionType type);
    [NullableContextAttribute("2")]
private void Out(string s);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
internal class JetBrains.Annotations.AspChildControlTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <ControlType>k__BackingField;
    [NotNullAttribute]
public string TagName { get; }
    [NotNullAttribute]
public Type ControlType { get; }
    public AspChildControlTypeAttribute(string tagName, Type controlType);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
public Type get_ControlType();
}
[AttributeUsageAttribute("192")]
internal class JetBrains.Annotations.AspDataFieldAttribute : Attribute {
}
[AttributeUsageAttribute("192")]
internal class JetBrains.Annotations.AspDataFieldsAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.AspMethodPropertyAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2496")]
internal class JetBrains.Annotations.AspMvcActionAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AnonymousProperty>k__BackingField;
    [CanBeNullAttribute]
public string AnonymousProperty { get; }
    [NullableContextAttribute("1")]
public AspMvcActionAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
}
[AttributeUsageAttribute("2176")]
internal class JetBrains.Annotations.AspMvcActionSelectorAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.AspMvcAreaAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AnonymousProperty>k__BackingField;
    [CanBeNullAttribute]
public string AnonymousProperty { get; }
    [NullableContextAttribute("1")]
public AspMvcAreaAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; }
    public AspMvcAreaMasterLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; }
    public AspMvcAreaPartialViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; }
    public AspMvcAreaViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2496")]
internal class JetBrains.Annotations.AspMvcControllerAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AnonymousProperty>k__BackingField;
    [CanBeNullAttribute]
public string AnonymousProperty { get; }
    [NullableContextAttribute("1")]
public AspMvcControllerAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.AspMvcDisplayTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.AspMvcEditorTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.AspMvcMasterAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcMasterLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; }
    public AspMvcMasterLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AspMvcModelTypeAttribute : Attribute {
}
[AttributeUsageAttribute("2496")]
internal class JetBrains.Annotations.AspMvcPartialViewAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; }
    public AspMvcPartialViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
}
[AttributeUsageAttribute("68")]
internal class JetBrains.Annotations.AspMvcSuppressViewErrorAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.AspMvcTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("2496")]
internal class JetBrains.Annotations.AspMvcViewAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.AspMvcViewComponentAttribute : Attribute {
}
[AttributeUsageAttribute("2496")]
internal class JetBrains.Annotations.AspMvcViewComponentViewAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; }
    public AspMvcViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
internal class JetBrains.Annotations.AspRequiredAttributeAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Attribute>k__BackingField;
    [NotNullAttribute]
public string Attribute { get; }
    public AspRequiredAttributeAttribute(string attribute);
    [CompilerGeneratedAttribute]
public string get_Attribute();
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.AspTypePropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <CreateConstructorReferences>k__BackingField;
    public bool CreateConstructorReferences { get; }
    public AspTypePropertyAttribute(bool createConstructorReferences);
    [CompilerGeneratedAttribute]
public bool get_CreateConstructorReferences();
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AssertionConditionAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AssertionConditionType <ConditionType>k__BackingField;
    public AssertionConditionType ConditionType { get; }
    public AssertionConditionAttribute(AssertionConditionType conditionType);
    [CompilerGeneratedAttribute]
public AssertionConditionType get_ConditionType();
}
internal enum JetBrains.Annotations.AssertionConditionType : Enum {
    public int value__;
    public static AssertionConditionType IS_TRUE;
    public static AssertionConditionType IS_FALSE;
    public static AssertionConditionType IS_NULL;
    public static AssertionConditionType IS_NOT_NULL;
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.AssertionMethodAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("System.Attribute")]
internal class JetBrains.Annotations.BaseTypeRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <BaseType>k__BackingField;
    [NotNullAttribute]
public Type BaseType { get; }
    public BaseTypeRequiredAttribute(Type baseType);
    [CompilerGeneratedAttribute]
public Type get_BaseType();
}
[AttributeUsageAttribute("24516")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("1036")]
internal class JetBrains.Annotations.CannotApplyEqualityOperatorAttribute : Attribute {
}
[AttributeUsageAttribute("224")]
internal class JetBrains.Annotations.CollectionAccessAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CollectionAccessType <CollectionAccessType>k__BackingField;
    public CollectionAccessType CollectionAccessType { get; }
    public CollectionAccessAttribute(CollectionAccessType collectionAccessType);
    [CompilerGeneratedAttribute]
public CollectionAccessType get_CollectionAccessType();
}
[FlagsAttribute]
internal enum JetBrains.Annotations.CollectionAccessType : Enum {
    public int value__;
    public static CollectionAccessType None;
    public static CollectionAccessType Read;
    public static CollectionAccessType ModifyExistingContent;
    public static CollectionAccessType UpdatedContent;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ForceFullStates>k__BackingField;
    [NotNullAttribute]
public string Contract { get; }
    public bool ForceFullStates { get; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.HtmlAttributeValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    public HtmlAttributeValueAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.HtmlElementAttributesAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CanBeNullAttribute]
public string Name { get; }
    [NullableContextAttribute("1")]
public HtmlElementAttributesAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithInheritors;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InstantHandleAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.ItemCanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.ItemNotNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.LinqTunnelAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.LocalizationRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Required>k__BackingField;
    public bool Required { get; }
    public LocalizationRequiredAttribute(bool required);
    [CompilerGeneratedAttribute]
public bool get_Required();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.MacroAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Editable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Target>k__BackingField;
    [CanBeNullAttribute]
public string Expression { get; public set; }
    public int Editable { get; public set; }
    [CanBeNullAttribute]
public string Target { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public int get_Editable();
    [CompilerGeneratedAttribute]
public void set_Editable(int value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
}
[AttributeUsageAttribute("18436")]
internal class JetBrains.Annotations.MeansImplicitUseAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    [UsedImplicitlyAttribute]
public ImplicitUseKindFlags UseKindFlags { get; }
    [UsedImplicitlyAttribute]
public ImplicitUseTargetFlags TargetFlags { get; }
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags);
    public MeansImplicitUseAttribute(ImplicitUseTargetFlags targetFlags);
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.MustUseReturnValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Justification>k__BackingField;
    [CanBeNullAttribute]
public string Justification { get; }
    [NullableContextAttribute("1")]
public MustUseReturnValueAttribute(string justification);
    [CompilerGeneratedAttribute]
public string get_Justification();
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.NonNegativeValueAttribute : Attribute {
}
[AttributeUsageAttribute("1052")]
internal class JetBrains.Annotations.NoReorderAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ParameterName>k__BackingField;
    [CanBeNullAttribute]
public string ParameterName { get; }
    [NullableContextAttribute("1")]
public NotifyPropertyChangedInvocatorAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("24516")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.PathReferenceAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BasePath>k__BackingField;
    [CanBeNullAttribute]
public string BasePath { get; }
    [NullableContextAttribute("1")]
public PathReferenceAttribute(string basePath);
    [CompilerGeneratedAttribute]
public string get_BasePath();
}
[AttributeUsageAttribute("19916")]
internal class JetBrains.Annotations.ProvidesContextAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[MeansImplicitUseAttribute("3")]
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.PublicAPIAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Comment>k__BackingField;
    [CanBeNullAttribute]
public string Comment { get; }
    [NullableContextAttribute("1")]
public PublicAPIAttribute(string comment);
    [CompilerGeneratedAttribute]
public string get_Comment();
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.PureAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.RazorDirectiveAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Directive>k__BackingField;
    [NotNullAttribute]
public string Directive { get; }
    public RazorDirectiveAttribute(string directive);
    [CompilerGeneratedAttribute]
public string get_Directive();
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.RazorHelperCommonAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.RazorImportNamespaceAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    public RazorImportNamespaceAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.RazorInjectionAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FieldName>k__BackingField;
    [NotNullAttribute]
public string Type { get; }
    [NotNullAttribute]
public string FieldName { get; }
    public RazorInjectionAttribute(string type, string fieldName);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public string get_FieldName();
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.RazorLayoutAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.RazorPageBaseTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BaseType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PageName>k__BackingField;
    [NotNullAttribute]
public string BaseType { get; }
    [NullableAttribute("2")]
[CanBeNullAttribute]
public string PageName { get; }
    public RazorPageBaseTypeAttribute(string baseType);
    public RazorPageBaseTypeAttribute(string baseType, string pageName);
    [CompilerGeneratedAttribute]
public string get_BaseType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_PageName();
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.RazorSectionAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.RazorWriteLiteralMethodAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.RazorWriteMethodAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.RazorWriteMethodParameterAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.RegexPatternAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.SourceTemplateAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FormatParameterName>k__BackingField;
    [NotNullAttribute]
public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
}
[ObsoleteAttribute("Use [ContractAnnotation('=> halt')] instead")]
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.TerminatesProgramAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; }
    public ImplicitUseTargetFlags TargetFlags { get; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.ValueProviderAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    public ValueProviderAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.ValueRangeAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <From>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <To>k__BackingField;
    public object From { get; }
    public object To { get; }
    public ValueRangeAttribute(long from, long to);
    public ValueRangeAttribute(ulong from, ulong to);
    public ValueRangeAttribute(long value);
    public ValueRangeAttribute(ulong value);
    [CompilerGeneratedAttribute]
public object get_From();
    [CompilerGeneratedAttribute]
public object get_To();
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
internal class JetBrains.Annotations.XamlItemsControlAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.XamlItemStyleOfItemsControlAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class NUnit.Framework.Constraints.FloatingPointNumerics : object {
    public static bool AreAlmostEqualUlps(float left, float right, int maxUlps);
    public static bool AreAlmostEqualUlps(double left, double right, long maxUlps);
    public static int ReinterpretAsInt(float value);
    public static long ReinterpretAsLong(double value);
    public static float ReinterpretAsFloat(int value);
    public static double ReinterpretAsDouble(long value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Constraints.Numerics : object {
    [NullableContextAttribute("2")]
public static bool IsNumericType(object obj);
    public static bool AreEqual(object expected, object actual, Tolerance& tolerance);
    private static bool AreEqual(double expected, double actual, Tolerance& tolerance);
    private static bool AreEqual(float expected, float actual, Tolerance& tolerance);
    private static bool AreEqual(Half expected, Half actual, Tolerance& tolerance);
    private static bool AreEqual(decimal expected, decimal actual, Tolerance tolerance);
    private static bool AreEqual(ulong expected, ulong actual, Tolerance tolerance);
    private static bool AreEqual(long expected, long actual, Tolerance tolerance);
    private static bool AreEqual(UInt32 expected, UInt32 actual, Tolerance tolerance);
    private static bool AreEqual(int expected, int actual, Tolerance tolerance);
    public static int Compare(object expected, object actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Constraints.Tolerance : object {
    private static string ModeMustFollowTolerance;
    private static string MultipleToleranceModes;
    private static string NumericToleranceRequired;
    private object amount;
    private ToleranceMode mode;
    public static Tolerance Empty { get; }
    public static Tolerance Zero { get; }
    public ToleranceMode Mode { get; }
    public object Value { get; }
    public Tolerance Percent { get; }
    public Tolerance Ulps { get; }
    public Tolerance Days { get; }
    public Tolerance Hours { get; }
    public Tolerance Minutes { get; }
    public Tolerance Seconds { get; }
    public Tolerance Milliseconds { get; }
    public Tolerance Ticks { get; }
    public bool IsEmpty { get; }
    public Tolerance(object amount);
    private Tolerance(object amount, ToleranceMode mode);
    public static Tolerance get_Empty();
    public static Tolerance get_Zero();
    public ToleranceMode get_Mode();
    public object get_Value();
    public Tolerance get_Percent();
    public Tolerance get_Ulps();
    public Tolerance get_Days();
    public Tolerance get_Hours();
    public Tolerance get_Minutes();
    public Tolerance get_Seconds();
    public Tolerance get_Milliseconds();
    public Tolerance get_Ticks();
    public bool get_IsEmpty();
    private void CheckLinearAndNumeric();
}
internal enum NUnit.Framework.Constraints.ToleranceMode : Enum {
    public int value__;
    public static ToleranceMode None;
    public static ToleranceMode Linear;
    public static ToleranceMode Percent;
    public static ToleranceMode Ulps;
}
public class Shouldly.ActualFilteredWithPredicateShouldlyMessage : ShouldlyMessage {
    [NullableContextAttribute("2")]
public ActualFilteredWithPredicateShouldlyMessage(Expression filter, object result, object actual, string customMessage, string shouldlyMethod);
}
public class Shouldly.ActualShouldlyMessage : ShouldlyMessage {
    [NullableContextAttribute("2")]
public ActualShouldlyMessage(object actual, string customMessage, string shouldlyMethod);
}
public class Shouldly.AsyncShouldlyNotThrowShouldlyMessage : ShouldlyMessage {
    [NullableContextAttribute("1")]
public AsyncShouldlyNotThrowShouldlyMessage(Type exception, string customMessage, StackTrace stackTrace, string exceptionMessage, string shouldlyMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Shouldly.AsyncShouldlyThrowShouldlyMessage : ShouldlyMessage {
    public AsyncShouldlyThrowShouldlyMessage(Type exception, string customMessage, StackTrace stackTrace, string shouldlyMethod);
    public AsyncShouldlyThrowShouldlyMessage(Type expected, Type actual, string customMessage, StackTrace stackTrace);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Shouldly.CallContext : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<string, AsyncLocal`1<object>> state;
    private static CallContext();
    public static void LogicalSetData(string name, object data);
    public static object LogicalGetData(string name);
}
public enum Shouldly.Case : Enum {
    public int value__;
    public static Case Sensitive;
    public static Case Insensitive;
}
public class Shouldly.CompleteInShouldlyMessage : ShouldlyMessage {
    [NullableContextAttribute("1")]
public CompleteInShouldlyMessage(string what, TimeSpan timeout, string customMessage, string shouldlyMethod);
}
[ObsoleteAttribute("Diff tool management is now handled by https://github.com/VerifyTests/DiffEngine. Use the following for custom diff configuration.
 * Add a custom tool using `DiffTools.AddTool()`. https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.custom.md.
 * Specify a custom order using a `DiffEngine.ToolOrder` environment variable (comma or pipe separated), or use `DiffTools.UseOrder`. https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.order.md#custom-order.
 * Disable all diffs by setting an environment variable `DiffEngine.Disabled` with the value `true`. https://github.com/VerifyTests/DiffEngine#disable-for-a-machineprocess.

Diff launching can be controlled at the test level using `ShouldMatchConfiguration.PreventDiff`.", "True")]
public class Shouldly.Configuration.DiffTool : object {
}
[ObsoleteAttribute("Diff tool management is now handled by https://github.com/VerifyTests/DiffEngine. Use the following for custom diff configuration.
 * Add a custom tool using `DiffTools.AddTool()`. https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.custom.md.
 * Specify a custom order using a `DiffEngine.ToolOrder` environment variable (comma or pipe separated), or use `DiffTools.UseOrder`. https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.order.md#custom-order.
 * Disable all diffs by setting an environment variable `DiffEngine.Disabled` with the value `true`. https://github.com/VerifyTests/DiffEngine#disable-for-a-machineprocess.

Diff launching can be controlled at the test level using `ShouldMatchConfiguration.PreventDiff`.", "True")]
public class Shouldly.Configuration.DiffToolConfig : object {
}
[ObsoleteAttribute("Diff tool management is now handled by https://github.com/VerifyTests/DiffEngine. Use the following for custom diff configuration.
 * Add a custom tool using `DiffTools.AddTool()`. https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.custom.md.
 * Specify a custom order using a `DiffEngine.ToolOrder` environment variable (comma or pipe separated), or use `DiffTools.UseOrder`. https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.order.md#custom-order.
 * Disable all diffs by setting an environment variable `DiffEngine.Disabled` with the value `true`. https://github.com/VerifyTests/DiffEngine#disable-for-a-machineprocess.

Diff launching can be controlled at the test level using `ShouldMatchConfiguration.PreventDiff`.", "True")]
public class Shouldly.Configuration.DiffToolConfiguration : object {
}
[ObsoleteAttribute("Diff tool management is now handled by https://github.com/VerifyTests/DiffEngine. Use the following for custom diff configuration.
 * Add a custom tool using `DiffTools.AddTool()`. https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.custom.md.
 * Specify a custom order using a `DiffEngine.ToolOrder` environment variable (comma or pipe separated), or use `DiffTools.UseOrder`. https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.order.md#custom-order.
 * Disable all diffs by setting an environment variable `DiffEngine.Disabled` with the value `true`. https://github.com/VerifyTests/DiffEngine#disable-for-a-machineprocess.

Diff launching can be controlled at the test level using `ShouldMatchConfiguration.PreventDiff`.", "True")]
public class Shouldly.Configuration.DoNotLaunchWhenEnvVariableIsPresent : object {
}
[ObsoleteAttribute("Diff tool management is now handled by https://github.com/VerifyTests/DiffEngine. Use the following for custom diff configuration.
 * Add a custom tool using `DiffTools.AddTool()`. https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.custom.md.
 * Specify a custom order using a `DiffEngine.ToolOrder` environment variable (comma or pipe separated), or use `DiffTools.UseOrder`. https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.order.md#custom-order.
 * Disable all diffs by setting an environment variable `DiffEngine.Disabled` with the value `true`. https://github.com/VerifyTests/DiffEngine#disable-for-a-machineprocess.

Diff launching can be controlled at the test level using `ShouldMatchConfiguration.PreventDiff`.", "True")]
public class Shouldly.Configuration.DoNotLaunchWhenPlatformIsNotWindows : object {
}
[ObsoleteAttribute("Diff tool management is now handled by https://github.com/VerifyTests/DiffEngine. Use the following for custom diff configuration.
 * Add a custom tool using `DiffTools.AddTool()`. https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.custom.md.
 * Specify a custom order using a `DiffEngine.ToolOrder` environment variable (comma or pipe separated), or use `DiffTools.UseOrder`. https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.order.md#custom-order.
 * Disable all diffs by setting an environment variable `DiffEngine.Disabled` with the value `true`. https://github.com/VerifyTests/DiffEngine#disable-for-a-machineprocess.

Diff launching can be controlled at the test level using `ShouldMatchConfiguration.PreventDiff`.", "True")]
public class Shouldly.Configuration.DoNotLaunchWhenTypeIsLoaded : object {
}
public class Shouldly.Configuration.FilenameGenerator : MulticastDelegate {
    public FilenameGenerator(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(TestMethodInfo testMethodInfo, string discriminator, string fileType, string fileExtension);
    public virtual IAsyncResult BeginInvoke(TestMethodInfo testMethodInfo, string discriminator, string fileType, string fileExtension, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class Shouldly.Configuration.FindMethodUsingAttribute`1 : object {
    [NullableContextAttribute("1")]
public sealed virtual TestMethodInfo GetTestMethodInfo(StackTrace stackTrace, int startAt);
    private static Nullable`1<OriginalMethodInfo<T>> GetOriginalMethodInfoForStateMachineMethod(MethodBase method);
    [NullableContextAttribute("1")]
private static bool ContainsAttribute(MemberInfo member, string attributeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Shouldly.Configuration.FirstNonShouldlyMethodFinder : object {
    private static Regex AnonMethod;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Offset>k__BackingField;
    public int Offset { get; public set; }
    private static FirstNonShouldlyMethodFinder();
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(int value);
    public sealed virtual TestMethodInfo GetTestMethodInfo(StackTrace stackTrace, int startAt);
    private static bool IsCompilerGenerated(MethodBase method);
}
[NullableContextAttribute("1")]
public interface Shouldly.Configuration.ITestMethodFinder {
    public abstract virtual TestMethodInfo GetTestMethodInfo(StackTrace stackTrace, int startAt);
}
[ObsoleteAttribute("Diff tool management is now handled by https://github.com/VerifyTests/DiffEngine. Use the following for custom diff configuration.
 * Add a custom tool using `DiffTools.AddTool()`. https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.custom.md.
 * Specify a custom order using a `DiffEngine.ToolOrder` environment variable (comma or pipe separated), or use `DiffTools.UseOrder`. https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.order.md#custom-order.
 * Disable all diffs by setting an environment variable `DiffEngine.Disabled` with the value `true`. https://github.com/VerifyTests/DiffEngine#disable-for-a-machineprocess.

Diff launching can be controlled at the test level using `ShouldMatchConfiguration.PreventDiff`.", "True")]
public class Shouldly.Configuration.KnownDiffTools : object {
}
[ObsoleteAttribute("Diff tool management is now handled by https://github.com/VerifyTests/DiffEngine. Use the following for custom diff configuration.
 * Add a custom tool using `DiffTools.AddTool()`. https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.custom.md.
 * Specify a custom order using a `DiffEngine.ToolOrder` environment variable (comma or pipe separated), or use `DiffTools.UseOrder`. https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.order.md#custom-order.
 * Disable all diffs by setting an environment variable `DiffEngine.Disabled` with the value `true`. https://github.com/VerifyTests/DiffEngine#disable-for-a-machineprocess.

Diff launching can be controlled at the test level using `ShouldMatchConfiguration.PreventDiff`.", "True")]
public class Shouldly.Configuration.KnownDoNotLaunchStrategies : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Shouldly.Configuration.ShouldMatchConfiguration : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private StringCompareShould <StringCompareOptions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FilenameDiscriminator>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <PreventDiff>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FileExtension>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITestMethodFinder <TestMethodFinder>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ApprovalFileSubFolder>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<string, string> <Scrubber>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FilenameGenerator <FilenameGenerator>k__BackingField;
    public StringCompareShould StringCompareOptions { get; public set; }
    [NullableAttribute("2")]
public string FilenameDiscriminator { get; public set; }
    public bool PreventDiff { get; public set; }
    public string FileExtension { get; public set; }
    public ITestMethodFinder TestMethodFinder { get; public set; }
    [NullableAttribute("2")]
public string ApprovalFileSubFolder { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, string> Scrubber { get; public set; }
    public FilenameGenerator FilenameGenerator { get; public set; }
    public ShouldMatchConfiguration(ShouldMatchConfiguration initialConfig);
    [CompilerGeneratedAttribute]
public StringCompareShould get_StringCompareOptions();
    [CompilerGeneratedAttribute]
public void set_StringCompareOptions(StringCompareShould value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_FilenameDiscriminator();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_FilenameDiscriminator(string value);
    [CompilerGeneratedAttribute]
public bool get_PreventDiff();
    [CompilerGeneratedAttribute]
public void set_PreventDiff(bool value);
    [CompilerGeneratedAttribute]
public string get_FileExtension();
    [CompilerGeneratedAttribute]
public void set_FileExtension(string value);
    [CompilerGeneratedAttribute]
public ITestMethodFinder get_TestMethodFinder();
    [CompilerGeneratedAttribute]
public void set_TestMethodFinder(ITestMethodFinder value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ApprovalFileSubFolder();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ApprovalFileSubFolder(string value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_Scrubber();
    [CompilerGeneratedAttribute]
public void set_Scrubber(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public FilenameGenerator get_FilenameGenerator();
    [CompilerGeneratedAttribute]
public void set_FilenameGenerator(FilenameGenerator value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Shouldly.Configuration.ShouldMatchConfigurationBuilder : object {
    private ShouldMatchConfiguration _config;
    public ShouldMatchConfigurationBuilder(ShouldMatchConfiguration initialConfig);
    public ShouldMatchConfigurationBuilder WithStringCompareOptions(StringCompareShould stringCompareOptions);
    public ShouldMatchConfigurationBuilder WithDiscriminator(string fileDiscriminator);
    public ShouldMatchConfigurationBuilder NoDiff();
    public ShouldMatchConfigurationBuilder WithFileExtension(string fileExtension);
    public ShouldMatchConfigurationBuilder WithFilenameGenerator(FilenameGenerator filenameGenerator);
    public ShouldMatchConfigurationBuilder DoNotIgnoreLineEndings();
    public ShouldMatchConfigurationBuilder SubFolder(string subfolder);
    public ShouldMatchConfigurationBuilder UseCallerLocation();
    public ShouldMatchConfigurationBuilder LocateTestMethodUsingAttribute();
    public ShouldMatchConfigurationBuilder WithScrubber(Func`2<string, string> scrubber);
    public ShouldMatchConfigurationBuilder Configure(Action`1<ShouldMatchConfiguration> configure);
    public ShouldMatchConfiguration Build();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Shouldly.Configuration.TestMethodInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SourceFileDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DeclaringTypeName>k__BackingField;
    public string SourceFileDirectory { get; }
    public string MethodName { get; }
    public string DeclaringTypeName { get; }
    [NullableContextAttribute("1")]
public TestMethodInfo(StackFrame callingFrame);
    private static Nullable`1<OriginalMethodInfo> GetOriginalMethodInfoForStateMachineMethod(MethodBase method);
    [NullableContextAttribute("1")]
private static bool ContainsAttribute(MemberInfo member, string attributeName);
    [CompilerGeneratedAttribute]
public string get_SourceFileDirectory();
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public string get_DeclaringTypeName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Shouldly.DifferenceHighlighting.DifferenceHighlighter : object {
    private static List`1<IDifferenceHighlighter> _differenceHighlighters;
    private static DifferenceHighlighter();
    public static string HighlightDifferences(IShouldlyAssertionContext context);
    public static bool CanHighlightDifferences(IShouldlyAssertionContext context);
    private static IDifferenceHighlighter GetDifferenceHighlighterFor(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.DifferenceHighlighting.DifferenceIndexConsolidator : object {
    private int _maxDiffLength;
    private int _maxLengthOfStrings;
    private List`1<int> _indicesOfAllDifferences;
    public DifferenceIndexConsolidator(int maxDiffLength, int maxLengthOfStrings, List`1<int> indicesOfAllDifferences);
    public List`1<int> GetConsolidatedIndices();
    private int CenterDiffIndices(List`1<int> diffIndices);
    private static List`1<KeyValuePair`2<int, int>> CalculateDistanceBetweenDiffIndices(List`1<int> diffIndices);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.DifferenceHighlighting.EnumerableDifferenceHighlighter : object {
    private static int MaxElementsToShow;
    private ItemDifferenceHighlighter _itemDifferenceHighlighter;
    public sealed virtual bool CanProcess(IShouldlyAssertionContext context);
    public sealed virtual string HighlightDifferences(IShouldlyAssertionContext context);
    private string HighlightDifferencesBetweenLists(IEnumerable`1<object> actualList, IEnumerable`1<object> expectedList, int highestListCount);
    private string GetComparedItemString(IEnumerable`1<object> actualList, IEnumerable`1<object> expectedList, int itemPosition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.DifferenceHighlighting.FormattedDetailedDifferenceString : object {
    private string _actualValue;
    private string _expectedValue;
    private Case _caseSensitivity;
    private int _indexOffset;
    private StringBuilder differenceStringLineOneBuilder;
    private StringBuilder actualCodeStringBuilder;
    private StringBuilder differenceStringLineTwoBuilder;
    private StringBuilder indexStringBuilder;
    private StringBuilder expectedValueStringBuilder;
    private StringBuilder actualValueStringBuilder;
    private StringBuilder expectedCodeStringBuilder;
    private bool _prefixWithDots;
    private bool _suffixWithDots;
    internal FormattedDetailedDifferenceString(string actualValue, string expectedValue, Nullable`1<Case> caseSensitivity, int indexOffset, bool prefixWithDots, bool suffixWithDots);
    public virtual string ToString();
    public string GenerateFormattedString();
    private void AddDots();
    private bool CheckEquality(int index, int minLengthOfStrings);
    private string GetFormattedString();
}
[NullableContextAttribute("1")]
internal interface Shouldly.DifferenceHighlighting.IDifferenceHighlighter {
    public abstract virtual bool CanProcess(IShouldlyAssertionContext context);
    public abstract virtual string HighlightDifferences(IShouldlyAssertionContext context);
}
[NullableContextAttribute("2")]
internal interface Shouldly.DifferenceHighlighting.IStringDifferenceHighlighter {
    public abstract virtual string HighlightDifferences(string expected, string actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.DifferenceHighlighting.ItemDifferenceHighlighter : object {
    public static string HighlightCharacter;
    public string HighlightItem(string item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.DifferenceHighlighting.StringDifferenceHighlighter : object {
    private static int maxDiffLength;
    private static int maxNumberOfDiffs;
    private Case _sensitivity;
    private Func`2<string, string> _transform;
    public StringDifferenceHighlighter(Case sensitivity, Func`2<string, string> transform);
    [NullableContextAttribute("2")]
public sealed virtual string HighlightDifferences(string expected, string actual);
    private static string TrimmedValue(string value, int index);
    private static List`1<int> GetIndicesOfAllDifferences(string actualValue, string expectedValue);
    private static bool CharAtIndexIsEqual(string actual, string expected, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShouldlyMethodsAttribute]
public static class Shouldly.DynamicShould : object {
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void HaveProperty(object dynamicTestObject, string propertyName, Func`1<string> customMessage);
    public static TException Throw(Action actual, string customMessage);
    public static void HaveProperty(object dynamicTestObject, string propertyName, string customMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.EqualityComparer`1 : object {
    private static IEqualityComparer DefaultInnerComparer;
    private Func`1<IEqualityComparer> _innerComparerFactory;
    [NullableContextAttribute("2")]
public EqualityComparer`1(IEqualityComparer innerComparer);
    private static EqualityComparer`1();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(T x, T y);
    public sealed virtual int GetHashCode(T obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.EqualityComparerAdapter : object {
    private IEqualityComparer`1<object> _innerComparer;
    public EqualityComparerAdapter(IEqualityComparer`1<object> innerComparer);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(object x, object y);
    public sealed virtual int GetHashCode(object obj);
}
public class Shouldly.ExpectedActualIgnoreOrderShouldlyMessage : ShouldlyMessage {
    [NullableContextAttribute("2")]
public ExpectedActualIgnoreOrderShouldlyMessage(object expected, object actual, string customMessage, string shouldlyMethod);
}
public class Shouldly.ExpectedActualKeyShouldlyMessage : ShouldlyMessage {
    [NullableContextAttribute("2")]
public ExpectedActualKeyShouldlyMessage(object expected, object actual, object key, string customMessage, string shouldlyMethod);
}
public class Shouldly.ExpectedActualShouldlyMessage : ShouldlyMessage {
    [NullableContextAttribute("2")]
public ExpectedActualShouldlyMessage(object expected, object actual, string customMessage, string shouldlyMethod);
}
public class Shouldly.ExpectedActualToleranceShouldlyMessage : ShouldlyMessage {
    [NullableContextAttribute("2")]
public ExpectedActualToleranceShouldlyMessage(object expected, object actual, object tolerance, string customMessage, string shouldlyMethod);
}
public class Shouldly.ExpectedActualWithCaseSensitivityShouldlyMessage : ShouldlyMessage {
    [NullableContextAttribute("2")]
public ExpectedActualWithCaseSensitivityShouldlyMessage(object expected, object actual, Nullable`1<Case> caseSensitivity, string customMessage, string shouldlyMethod);
}
public class Shouldly.ExpectedEquivalenceShouldlyMessage : ShouldlyMessage {
    [NullableContextAttribute("2")]
public ExpectedEquivalenceShouldlyMessage(object expected, object actual, IEnumerable`1<string> path, string customMessage, string shouldlyMethod);
}
public class Shouldly.ExpectedOrderShouldlyMessage : ShouldlyMessage {
    [NullableContextAttribute("2")]
public ExpectedOrderShouldlyMessage(object actual, SortDirection expectedDirection, int outOfOrderIndex, object outOfOrderObject, string customMessage, string shouldlyMethod);
}
public class Shouldly.ExpectedShouldlyMessage : ShouldlyMessage {
    [NullableContextAttribute("2")]
public ExpectedShouldlyMessage(object expected, string customMessage, string shouldlyMethod);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Shouldly.Internals.ActualCodeTextGetter : object {
    private bool _determinedOriginatingFrame;
    private string _shouldMethod;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ShouldlyFrameOffset>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <LineNumber>k__BackingField;
    public int ShouldlyFrameOffset { get; private set; }
    public string FileName { get; private set; }
    public int LineNumber { get; private set; }
    [CompilerGeneratedAttribute]
public int get_ShouldlyFrameOffset();
    [CompilerGeneratedAttribute]
private void set_ShouldlyFrameOffset(int value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    public sealed virtual string GetCodeText(object actual, StackTrace stackTrace);
    private void ParseStackTrace(StackTrace stackTrace);
    [NullableContextAttribute("1")]
private string GetCodePart();
    [NullableContextAttribute("1")]
private string GetCodePartFromParameter(int indexOfMethod, string codeLines, string codePart);
}
internal static class Shouldly.Internals.AssertionFactories.StringShouldBeAssertionFactory : object {
    [NullableContextAttribute("1")]
public static IAssertion Create(string expected, string actual, StringCompareShould options, string shouldlyMethod);
}
[NullableContextAttribute("2")]
internal interface Shouldly.Internals.Assertions.IAssertion {
    public abstract virtual bool IsSatisfied();
    public abstract virtual string GenerateMessage(string customMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.Internals.Assertions.StringShouldBeAssertion : object {
    [NullableAttribute("2")]
private string _expected;
    [NullableAttribute("2")]
private string _actual;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<string, string, bool> _compare;
    private ICodeTextGetter _codeTextGetter;
    private IStringDifferenceHighlighter _diffHighlighter;
    private string _options;
    private string _shouldlyMethod;
    public StringShouldBeAssertion(string expected, string actual, Func`3<string, string, bool> compare, ICodeTextGetter codeTextGetter, IStringDifferenceHighlighter diffHighlighter, string options, string shouldlyMethod);
    public sealed virtual string GenerateMessage(string customMessage);
    [NullableContextAttribute("2")]
private static string Trim(string value);
    public sealed virtual bool IsSatisfied();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Shouldly.Internals.DeterministicBuildHelpers : object {
    private static Regex DeterministicPathRegex;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<IEnumerable`1<ValueTuple`2<string, string>>> LazySourcePathMap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static IEnumerable`1<ValueTuple`2<string, string>> SourcePathMap { get; }
    private static DeterministicBuildHelpers();
    private static IEnumerable`1<ValueTuple`2<string, string>> get_SourcePathMap();
    [NullableContextAttribute("2")]
internal static string ResolveDeterministicPaths(string fileName);
    internal static bool PathAppearsToBeDeterministic(string fileName);
}
[ExtensionAttribute]
internal static class Shouldly.Internals.EnumerableExtensions : object {
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Shouldly.Internals.EnumerableExtensions/<AsIndexed>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<ValueTuple`2<int, T>> AsIndexed(IEnumerable`1<T> source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.Internals.EnumerableProxy`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<T> <ProxiedValue>k__BackingField;
    private IEnumerable`1<T> _baseReentrable;
    public IEnumerable`1<T> ProxiedValue { get; }
    private object Shouldly.Internals.IEnumerableProxy.ProxiedValue { get; }
    private EnumerableProxy`1(IEnumerable`1<T> baseEnum, IEnumerable`1<T> baseReentrable);
    public static IEnumerable`1<T> WrapNonCollection(IEnumerable`1<T> baseEnum);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_ProxiedValue();
    private sealed virtual override object Shouldly.Internals.IEnumerableProxy.get_ProxiedValue();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
internal interface Shouldly.Internals.ICodeTextGetter {
    public abstract virtual string GetCodeText(object actual, StackTrace stackTrace);
}
[NullableContextAttribute("1")]
internal interface Shouldly.Internals.IEnumerableProxy {
    public object ProxiedValue { get; }
    public abstract virtual object get_ProxiedValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Shouldly.Internals.StackTraceHelpers : object {
    public static string GetStackTrace(Exception exception, String& cachedValue);
    public static void WriteFilteredStackTrace(StringBuilder builder, StackTrace stackTrace);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Shouldly.Is : object {
    [NullableContextAttribute("1")]
public static bool InRange(T comparable, T from, T to);
    public static bool Same(object actual, object expected);
    public static bool Equal(T expected, T actual);
    public static bool Equal(T expected, T actual, IEqualityComparer`1<T> comparer);
    private static IEqualityComparer`1<T> GetEqualityComparer(IEqualityComparer innerComparer);
    public static bool Equal(IEnumerable`1<T> actual, IEnumerable`1<T> expected);
    [NullableContextAttribute("1")]
public static bool Equal(IEnumerable`1<T> actual, IEnumerable`1<T> expected, IEqualityComparer`1<T> comparer);
    public static bool EqualIgnoreOrder(IEnumerable`1<T> actual, IEnumerable`1<T> expected);
    [NullableContextAttribute("1")]
public static bool EqualIgnoreOrder(IEnumerable`1<T> actual, IEnumerable`1<T> expected, IEqualityComparer`1<T> comparer);
    [NullableContextAttribute("1")]
public static bool Equal(IEnumerable`1<decimal> actual, IEnumerable`1<decimal> expected, decimal tolerance);
    [NullableContextAttribute("1")]
public static bool Equal(IEnumerable`1<float> actual, IEnumerable`1<float> expected, double tolerance);
    [NullableContextAttribute("1")]
public static bool Equal(IEnumerable`1<double> actual, IEnumerable`1<double> expected, double tolerance);
    public static bool Equal(decimal actual, decimal expected, decimal tolerance);
    public static bool Equal(double actual, double expected, double tolerance);
    public static bool Equal(DateTime actual, DateTime expected, TimeSpan tolerance);
    public static bool Equal(DateTimeOffset actual, DateTimeOffset expected, TimeSpan tolerance);
    public static bool Equal(TimeSpan actual, TimeSpan expected, TimeSpan tolerance);
    [NullableContextAttribute("1")]
public static bool StringMatchingRegex(string actual, string regexPattern);
    [NullableContextAttribute("1")]
public static bool StringContainingIgnoreCase(string actual, string expected);
    [NullableContextAttribute("1")]
public static bool StringContainingUsingCaseSensitivity(string actual, string expected);
    [NullableContextAttribute("1")]
public static bool EndsWithUsingCaseSensitivity(string actual, string expected, Case caseSensitivity);
    [NullableContextAttribute("1")]
public static bool StringStartingWithUsingCaseSensitivity(string actual, string expected, Case caseSensitivity);
    public static bool StringEqualWithCaseSensitivity(string actual, string expected, Case caseSensitivity);
    [NullableContextAttribute("1")]
public static bool EnumerableStringEqualWithCaseSensitivity(IEnumerable`1<string> actual, IEnumerable`1<string> expected, Case caseSensitivity);
    public static bool GreaterThanOrEqualTo(T comparable, T expected);
    public static bool GreaterThanOrEqualTo(T actual, T expected, IComparer`1<T> comparer);
    public static bool LessThanOrEqualTo(T comparable, T expected);
    public static bool LessThanOrEqualTo(T actual, T expected, IComparer`1<T> comparer);
    public static bool GreaterThan(T comparable, T expected);
    public static bool GreaterThan(T actual, T expected, IComparer`1<T> comparer);
    public static bool LessThan(T comparable, T expected);
    public static bool LessThan(T actual, T expected, IComparer`1<T> comparer);
    private static decimal Compare(T actual, T expected, IComparer`1<T> comparer);
    private static decimal Compare(T comparable, T expected);
}
[NullableContextAttribute("2")]
public interface Shouldly.IShouldlyAssertionContext {
    [NullableAttribute("1")]
public string ShouldMethod { get; public set; }
    public string CodePart { get; public set; }
    public string FileName { get; public set; }
    public Nullable`1<int> LineNumber { get; public set; }
    public object Key { get; public set; }
    public object Expected { get; public set; }
    public object Actual { get; public set; }
    public object Tolerance { get; public set; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    public bool IgnoreOrder { get; public set; }
    public bool HasRelevantActual { get; public set; }
    public bool HasRelevantKey { get; public set; }
    public bool IsNegatedAssertion { get; }
    public string CustomMessage { get; public set; }
    public Nullable`1<Case> CaseSensitivity { get; public set; }
    public bool CodePartMatchesActual { get; }
    public Expression Filter { get; public set; }
    public Nullable`1<int> MatchCount { get; public set; }
    public SortDirection SortDirection { get; public set; }
    public int OutOfOrderIndex { get; public set; }
    public object OutOfOrderObject { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<string> Path { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual string get_ShouldMethod();
    [NullableContextAttribute("1")]
public abstract virtual void set_ShouldMethod(string value);
    public abstract virtual string get_CodePart();
    public abstract virtual void set_CodePart(string value);
    public abstract virtual string get_FileName();
    public abstract virtual void set_FileName(string value);
    public abstract virtual Nullable`1<int> get_LineNumber();
    public abstract virtual void set_LineNumber(Nullable`1<int> value);
    public abstract virtual object get_Key();
    public abstract virtual void set_Key(object value);
    public abstract virtual object get_Expected();
    public abstract virtual void set_Expected(object value);
    public abstract virtual object get_Actual();
    public abstract virtual void set_Actual(object value);
    public abstract virtual object get_Tolerance();
    public abstract virtual void set_Tolerance(object value);
    public abstract virtual Nullable`1<TimeSpan> get_Timeout();
    public abstract virtual void set_Timeout(Nullable`1<TimeSpan> value);
    public abstract virtual bool get_IgnoreOrder();
    public abstract virtual void set_IgnoreOrder(bool value);
    public abstract virtual bool get_HasRelevantActual();
    public abstract virtual void set_HasRelevantActual(bool value);
    public abstract virtual bool get_HasRelevantKey();
    public abstract virtual void set_HasRelevantKey(bool value);
    public abstract virtual bool get_IsNegatedAssertion();
    public abstract virtual string get_CustomMessage();
    public abstract virtual void set_CustomMessage(string value);
    public abstract virtual Nullable`1<Case> get_CaseSensitivity();
    public abstract virtual void set_CaseSensitivity(Nullable`1<Case> value);
    public abstract virtual bool get_CodePartMatchesActual();
    public abstract virtual Expression get_Filter();
    public abstract virtual void set_Filter(Expression value);
    public abstract virtual Nullable`1<int> get_MatchCount();
    public abstract virtual void set_MatchCount(Nullable`1<int> value);
    public abstract virtual SortDirection get_SortDirection();
    public abstract virtual void set_SortDirection(SortDirection value);
    public abstract virtual int get_OutOfOrderIndex();
    public abstract virtual void set_OutOfOrderIndex(int value);
    public abstract virtual object get_OutOfOrderObject();
    public abstract virtual void set_OutOfOrderObject(object value);
    public abstract virtual IEnumerable`1<string> get_Path();
    public abstract virtual void set_Path(IEnumerable`1<string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.DictionaryShouldContainKeyAndValueMessageGenerator : ShouldlyMessageGenerator {
    private static Regex Validator;
    private static DictionaryShouldContainKeyAndValueMessageGenerator();
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.DictionaryShouldNotContainValueForKeyMessageGenerator : ShouldlyMessageGenerator {
    private static Regex Validator;
    private static DictionaryShouldNotContainValueForKeyMessageGenerator();
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.DictionaryShouldOrNotContainKeyMessageGenerator : ShouldlyMessageGenerator {
    private static Regex Validator;
    private static DictionaryShouldOrNotContainKeyMessageGenerator();
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.DynamicShouldMessageGenerator : ShouldlyMessageGenerator {
    private static Regex Validator;
    private static Regex DynamicObjectNameExtractor;
    private static DynamicShouldMessageGenerator();
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldAllBeMessageGenerator : ShouldlyMessageGenerator {
    private static Regex Validator;
    private static ShouldAllBeMessageGenerator();
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldBeBooleanMessageGenerator : ShouldlyMessageGenerator {
    private static Regex Validator;
    private static ShouldBeBooleanMessageGenerator();
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldBeEmptyMessageGenerator : ShouldlyMessageGenerator {
    private static Regex Validator;
    private static ShouldBeEmptyMessageGenerator();
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldBeEnumerableCaseSensitiveMessageGenerator : ShouldlyMessageGenerator {
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldBeEquivalentToMessageGenerator : ShouldlyMessageGenerator {
    private static string DefaultRootValue;
    private static int IndentSize;
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
    private static string FormatPath(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldBeginEndWithMessageGenerator : ShouldlyMessageGenerator {
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldBeIgnoringOrderMessageGenerator : ShouldlyMessageGenerator {
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldBeInOrderMessageGenerator : ShouldlyMessageGenerator {
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldBeMessageGenerator : ShouldlyMessageGenerator {
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldBeNegativeMessageGenerator : ShouldlyMessageGenerator {
    private static Regex Validator;
    private static ShouldBeNegativeMessageGenerator();
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldBeNullMessageGenerator : ShouldlyMessageGenerator {
    private static Regex Validator;
    private static ShouldBeNullMessageGenerator();
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldBeNullOrEmptyMessageGenerator : ShouldlyMessageGenerator {
    private static Regex Validator;
    private static ShouldBeNullOrEmptyMessageGenerator();
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldBeNullOrWhiteSpaceMessageGenerator : ShouldlyMessageGenerator {
    private static Regex Validator;
    private static ShouldBeNullOrWhiteSpaceMessageGenerator();
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldBePositiveMessageGenerator : ShouldlyMessageGenerator {
    private static Regex Validator;
    private static ShouldBePositiveMessageGenerator();
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldBeSubsetOfMessageGenerator : ShouldlyMessageGenerator {
    private static Regex Validator;
    private static ShouldBeSubsetOfMessageGenerator();
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldBeUniqueMessageGenerator : ShouldlyMessageGenerator {
    private static Regex Validator;
    private static ShouldBeUniqueMessageGenerator();
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldBeWithinRangeMessageGenerator : ShouldlyMessageGenerator {
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldCompleteInMessageGenerator : ShouldlyMessageGenerator {
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldContainMessageGenerator : ShouldlyMessageGenerator {
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldContainPredicateMessageGenerator : ShouldlyMessageGenerator {
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldContainWithinRangeMessageGenerator : ShouldlyMessageGenerator {
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldHaveFlagMessageGenerator : ShouldlyMessageGenerator {
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldHaveSingleItemMessageGenerator : ShouldlyMessageGenerator {
    private static string ShouldBeAssertion;
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Shouldly.MessageGenerators.ShouldlyMessageGenerator : object {
    public abstract virtual bool CanProcess(IShouldlyAssertionContext context);
    public abstract virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldNotHaveFlagMessageGenerator : ShouldlyMessageGenerator {
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldNotMatchMessageGenerator : ShouldlyMessageGenerator {
    private static Regex Validator;
    private static ShouldNotMatchMessageGenerator();
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldNotThrowMessageGenerator : ShouldlyMessageGenerator {
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldSatisfyAllConditionsMessageGenerator : ShouldlyMessageGenerator {
    private static Regex Validator;
    private static ShouldSatisfyAllConditionsMessageGenerator();
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.MessageGenerators.ShouldThrowMessageGenerator : ShouldlyMessageGenerator {
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Shouldly.ObjectEqualityComparer`1 : EqualityComparer`1<T> {
    public virtual bool Equals(T x, T y);
    public virtual int GetHashCode(T obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[ShouldlyMethodsAttribute]
public static class Shouldly.ObjectGraphTestExtensions : object {
    private static BindingFlags DefaultBindingFlags;
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeEquivalentTo(object actual, object expected, Func`1<string> customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ShouldBeEquivalentTo(object actual, object expected, string customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
private static void CompareObjects(object actual, object expected, IList`1<string> path, IDictionary`2<object, IList`1<object>> previousComparisons, string customMessage, string shouldlyMethod);
    [NullableContextAttribute("2")]
private static bool BothValuesAreNull(object actual, object expected, IEnumerable`1<string> path, string customMessage, string shouldlyMethod);
    private static Type GetTypeToCompare(object actual, object expected, IList`1<string> path, string customMessage, string shouldlyMethod);
    private static void CompareValueTypes(ValueType actual, ValueType expected, IEnumerable`1<string> path, string customMessage, string shouldlyMethod);
    private static void CompareReferenceTypes(object actual, object expected, Type type, IList`1<string> path, IDictionary`2<object, IList`1<object>> previousComparisons, string customMessage, string shouldlyMethod);
    private static void CompareStrings(string actual, string expected, IEnumerable`1<string> path, string customMessage, string shouldlyMethod);
    private static void CompareEnumerables(IEnumerable actual, IEnumerable expected, IEnumerable`1<string> path, IDictionary`2<object, IList`1<object>> previousComparisons, string customMessage, string shouldlyMethod);
    private static void CompareFields(object actual, object expected, IEnumerable`1<FieldInfo> fields, IList`1<string> path, IDictionary`2<object, IList`1<object>> previousComparisons, string customMessage, string shouldlyMethod);
    private static void CompareProperties(object actual, object expected, IEnumerable`1<PropertyInfo> properties, IList`1<string> path, IDictionary`2<object, IList`1<object>> previousComparisons, string customMessage, string shouldlyMethod);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
private static void ThrowException(object actual, object expected, IEnumerable`1<string> path, string customMessage, string shouldlyMethod);
    [ExtensionAttribute]
private static bool Contains(IDictionary`2<object, IList`1<object>> comparisons, object actual, object expected);
    [ExtensionAttribute]
private static void Record(IDictionary`2<object, IList`1<object>> comparisons, object actual, object expected);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.ObsoleteMessages : object {
    public static string FuncCustomMessage;
    public static string DiffMessage;
}
internal static class Shouldly.On : object {
    [NullableContextAttribute("1")]
public static IDisposable Dispose(Action action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerStepThroughAttribute]
[ShouldlyMethodsAttribute]
public static class Shouldly.Should : object {
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void CompleteIn(Action action, TimeSpan timeout, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void CompleteIn(Func`1<Task> actual, TimeSpan timeout, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void CompleteIn(Task actual, TimeSpan timeout, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static T CompleteIn(Func`1<Task`1<T>> actual, TimeSpan timeout, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static T CompleteIn(Func`1<T> function, TimeSpan timeout, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static T CompleteIn(Task`1<T> actual, TimeSpan timeout, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void NotThrow(Action action, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void NotThrow(Func`1<Task> action, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void NotThrow(Task action, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void NotThrow(Func`1<Task> action, TimeSpan timeoutAfter, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void NotThrow(Task action, TimeSpan timeoutAfter, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static T NotThrow(Func`1<Task`1<T>> action, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static T NotThrow(Func`1<T> action, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static T NotThrow(Task`1<T> action, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static T NotThrow(Func`1<Task`1<T>> action, TimeSpan timeoutAfter, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static T NotThrow(Task`1<T> action, TimeSpan timeoutAfter, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Task NotThrowAsync(Func`1<Task> actual, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Task NotThrowAsync(Task task, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Exception Throw(Action actual, Func`1<string> customMessage, Type exceptionType);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Exception Throw(Func`1<Task> actual, Func`1<string> customMessage, Type exceptionType);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Exception Throw(Func`1<object> actual, Func`1<string> customMessage, Type exceptionType);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Exception Throw(Task actual, Func`1<string> customMessage, Type exceptionType);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Exception Throw(Func`1<Task> actual, TimeSpan timeoutAfter, Func`1<string> customMessage, Type exceptionType);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Exception Throw(Task actual, TimeSpan timeoutAfter, Func`1<string> customMessage, Type exceptionType);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static TException Throw(Action actual, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static TException Throw(Func`1<Task> actual, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static TException Throw(Func`1<object> actual, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static TException Throw(Task actual, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static TException Throw(Func`1<Task> actual, TimeSpan timeoutAfter, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static TException Throw(Task actual, TimeSpan timeoutAfter, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Task`1<Exception> ThrowAsync(Func`1<Task> actual, Func`1<string> customMessage, Type exceptionType);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Task`1<Exception> ThrowAsync(Task task, Func`1<string> customMessage, Type exceptionType);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Task`1<TException> ThrowAsync(Func`1<Task> actual, Func`1<string> customMessage);
    [ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Task`1<TException> ThrowAsync(Task task, Func`1<string> customMessage);
    public static void CompleteIn(Action action, TimeSpan timeout, string customMessage);
    public static T CompleteIn(Func`1<T> function, TimeSpan timeout, string customMessage);
    public static void CompleteIn(Func`1<Task> actual, TimeSpan timeout, string customMessage);
    public static T CompleteIn(Func`1<Task`1<T>> actual, TimeSpan timeout, string customMessage);
    public static void CompleteIn(Task actual, TimeSpan timeout, string customMessage);
    public static T CompleteIn(Task`1<T> actual, TimeSpan timeout, string customMessage);
    private static void CompleteIn(Task actual, TimeSpan timeout, string customMessage, string what);
    private static void PreserveStackTrace(Exception exception);
    public static TException Throw(Action actual, string customMessage);
    internal static TException ThrowInternal(Action actual, string customMessage, string shouldlyMethod);
    public static Exception Throw(Action actual, Type exceptionType, string customMessage);
    internal static Exception ThrowInternal(Action actual, string customMessage, Type exceptionType, string shouldlyMethod);
    public static TException Throw(Func`1<object> actual, string customMessage);
    internal static TException ThrowInternal(Func`1<object> actual, string customMessage, string shouldlyMethod);
    public static Exception Throw(Func`1<object> actual, Type exceptionType);
    public static Exception Throw(Func`1<object> actual, string customMessage, Type exceptionType);
    internal static Exception ThrowInternal(Func`1<object> actual, string customMessage, Type exceptionType, string shouldlyMethod);
    public static void NotThrow(Action action, string customMessage);
    internal static void NotThrowInternal(Action action, string customMessage, string shouldlyMethod);
    public static T NotThrow(Func`1<T> action, string customMessage);
    internal static T NotThrowInternal(Func`1<T> action, string customMessage, string shouldlyMethod);
    public static TException Throw(Task actual, string customMessage);
    public static Exception Throw(Task actual, Type exceptionType, string customMessage);
    public static TException Throw(Func`1<Task> actual, string customMessage);
    public static Exception Throw(Func`1<Task> actual, Type exceptionType, string customMessage);
    public static TException Throw(Task actual, TimeSpan timeoutAfter, string customMessage);
    public static Exception Throw(Task actual, TimeSpan timeoutAfter, Type exceptionType, string customMessage);
    public static TException Throw(Func`1<Task> actual, TimeSpan timeoutAfter, string customMessage);
    internal static TException ThrowInternal(Func`1<Task> actual, TimeSpan timeoutAfter, string customMessage, string shouldlyMethod);
    public static Exception Throw(Func`1<Task> actual, TimeSpan timeoutAfter, Type exceptionType);
    public static Exception Throw(Func`1<Task> actual, TimeSpan timeoutAfter, string customMessage, Type exceptionType);
    internal static Exception ThrowInternal(Func`1<Task> actual, TimeSpan timeoutAfter, string customMessage, Type exceptionType, string shouldlyMethod);
    public static void NotThrow(Task action, string customMessage);
    public static T NotThrow(Task`1<T> action, string customMessage);
    public static void NotThrow(Func`1<Task> action, string customMessage);
    public static void NotThrow(Task action, TimeSpan timeoutAfter, string customMessage);
    public static void NotThrow(Func`1<Task> action, TimeSpan timeoutAfter, string customMessage);
    internal static void NotThrowInternal(Func`1<Task> action, TimeSpan timeoutAfter, string customMessage, string shouldlyMethod);
    public static T NotThrow(Func`1<Task`1<T>> action, string customMessage);
    public static T NotThrow(Task`1<T> action, TimeSpan timeoutAfter, string customMessage);
    public static T NotThrow(Func`1<Task`1<T>> action, TimeSpan timeoutAfter, string customMessage);
    internal static T NotThrowInternal(Func`1<Task`1<T>> action, TimeSpan timeoutAfter, string customMessage, string shouldlyMethod);
    private static void RunAndWait(Func`1<Task> actual, TimeSpan timeoutAfter, string customMessage);
    private static Exception HandleTaskAggregateException(AggregateException exceptionFromTask, string customMessage, Type exceptionType);
    public static Task`1<TException> ThrowAsync(Task task, string customMessage);
    public static Task`1<Exception> ThrowAsync(Task task, Type exceptionType, string customMessage);
    public static Task`1<TException> ThrowAsync(Func`1<Task> actual, string customMessage);
    public static Task`1<Exception> ThrowAsync(Func`1<Task> actual, Type exceptionType, string customMessage);
    public static Task NotThrowAsync(Task task, string customMessage);
    public static Task NotThrowAsync(Func`1<Task> actual, string customMessage);
    internal static Task NotThrowAsyncInternal(Func`1<Task> actual, string customMessage, string shouldlyMethod);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Shouldly.ShouldAssertException : Exception {
    private string stackTrace;
    [NullableAttribute("1")]
public string StackTrace { get; }
    public ShouldAssertException(string message);
    public ShouldAssertException(string message, Exception innerException);
    [NullableContextAttribute("1")]
public virtual string get_StackTrace();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
[ShouldlyMethodsAttribute]
public static class Shouldly.ShouldBeBooleanExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeFalse(bool actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeTrue(bool actual, Func`1<string> customMessage);
    [ExtensionAttribute]
public static void ShouldBeTrue(bool actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeFalse(bool actual, string customMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
[ShouldlyMethodsAttribute]
public static class Shouldly.ShouldBeDecoratedWithExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeDecoratedWith(Type actual, Func`1<string> customMessage);
    [ExtensionAttribute]
public static void ShouldBeDecoratedWith(Type actual, string customMessage);
    [ExtensionAttribute]
private static bool HasAttribute(Type type, Type attributeType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
[ShouldlyMethodsAttribute]
public static class Shouldly.ShouldBeDictionaryTestExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldContainKey(IDictionary`2<TKey, TValue> dictionary, TKey key, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldContainKeyAndValue(IDictionary`2<TKey, TValue> dictionary, TKey key, TValue val, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotContainKey(IDictionary`2<TKey, TValue> dictionary, TKey key, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotContainValueForKey(IDictionary`2<TKey, TValue> dictionary, TKey key, TValue val, Func`1<string> customMessage);
    [ExtensionAttribute]
public static void ShouldContainKey(IDictionary`2<TKey, TValue> dictionary, TKey key, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotContainKey(IDictionary`2<TKey, TValue> dictionary, TKey key, string customMessage);
    [ExtensionAttribute]
public static void ShouldContainKeyAndValue(IDictionary`2<TKey, TValue> dictionary, TKey key, TValue val, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotContainValueForKey(IDictionary`2<TKey, TValue> dictionary, TKey key, TValue val, string customMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
[ShouldlyMethodsAttribute]
public static class Shouldly.ShouldBeEnumerableTestExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldAllBe(IEnumerable`1<T> actual, Expression`1<Func`2<T, bool>> elementPredicate, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBe(IEnumerable`1<string> actual, IEnumerable`1<string> expected, Case caseSensitivity, Func`1<string> customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeEmpty(IEnumerable`1<T> actual, Func`1<string> customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeInOrder(IEnumerable`1<T> actual, Func`1<string> customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeInOrder(IEnumerable`1<T> actual, SortDirection expectedSortDirection, Func`1<string> customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeInOrder(IEnumerable`1<T> actual, SortDirection expectedSortDirection, IComparer`1<T> customComparer, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeOfTypes(IEnumerable`1<T> actual, Type[] expected, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeSubsetOf(IEnumerable`1<T> actual, IEnumerable`1<T> expected, Func`1<string> customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeUnique(IEnumerable`1<T> actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldContain(IEnumerable`1<double> actual, double expected, double tolerance, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldContain(IEnumerable`1<float> actual, float expected, double tolerance, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldContain(IEnumerable`1<T> actual, Expression`1<Func`2<T, bool>> elementPredicate, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldContain(IEnumerable`1<T> actual, T expected, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldContain(IEnumerable`1<T> actual, Expression`1<Func`2<T, bool>> elementPredicate, int expectedCount, Func`1<string> customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static T ShouldHaveSingleItem(IEnumerable`1<T> actual, Func`1<string> customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotBeEmpty(IEnumerable`1<T> actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotContain(IEnumerable`1<T> actual, Expression`1<Func`2<T, bool>> elementPredicate, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotContain(IEnumerable`1<T> actual, T expected, Func`1<string> customMessage);
    [ExtensionAttribute]
public static void ShouldContain(IEnumerable`1<T> actual, T expected, string customMessage);
    [ExtensionAttribute]
public static void ShouldContain(IEnumerable`1<T> actual, T expected, IEqualityComparer`1<T> comparer, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotContain(IEnumerable`1<T> actual, T expected, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotContain(IEnumerable`1<T> actual, T expected, IEqualityComparer`1<T> comparer, string customMessage);
    [ExtensionAttribute]
public static void ShouldContain(IEnumerable`1<T> actual, Expression`1<Func`2<T, bool>> elementPredicate, int expectedCount, string customMessage);
    [ExtensionAttribute]
public static void ShouldContain(IEnumerable`1<T> actual, Expression`1<Func`2<T, bool>> elementPredicate, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotContain(IEnumerable`1<T> actual, Expression`1<Func`2<T, bool>> elementPredicate, string customMessage);
    [ExtensionAttribute]
public static void ShouldAllBe(IEnumerable`1<T> actual, Expression`1<Func`2<T, bool>> elementPredicate, string customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ShouldBeEmpty(IEnumerable`1<T> actual, string customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ShouldNotBeEmpty(IEnumerable`1<T> actual, string customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T ShouldHaveSingleItem(IEnumerable`1<T> actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldContain(IEnumerable`1<float> actual, float expected, double tolerance, string customMessage);
    [ExtensionAttribute]
public static void ShouldContain(IEnumerable`1<double> actual, double expected, double tolerance, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeSubsetOf(IEnumerable`1<T> actual, IEnumerable`1<T> expected, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeSubsetOf(IEnumerable`1<T> actual, IEnumerable`1<T> expected, IEqualityComparer`1<T> comparer, string customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ShouldBeUnique(IEnumerable`1<T> actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeUnique(IEnumerable`1<T> actual, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static void ShouldBeUnique(IEnumerable`1<T> actual, IEqualityComparer`1<T> comparer, string customMessage);
    [ExtensionAttribute]
public static void ShouldBe(IEnumerable`1<string> actual, IEnumerable`1<string> expected, Case caseSensitivity, string customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ShouldBeInOrder(IEnumerable`1<T> actual, string customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ShouldBeInOrder(IEnumerable`1<T> actual, SortDirection expectedSortDirection, string customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ShouldBeInOrder(IEnumerable`1<T> actual, SortDirection expectedSortDirection, IComparer`1<T> customComparer, string customMessage);
    private static HashSet`1<T> GetDuplicates(IEnumerable`1<T> items, IEqualityComparer`1<T> comparer);
    private static void ShouldBeInOrder(IEnumerable`1<T> actual, SortDirection expectedSortDirection, Func`3<T, T, bool> isOutOfOrder, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeOfTypes(IEnumerable`1<T> actual, Type[] expected);
    [ExtensionAttribute]
public static void ShouldBeOfTypes(IEnumerable`1<T> actual, Type[] expected, string customMessage);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
[ShouldlyMethodsAttribute]
public static class Shouldly.ShouldBeNullExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeNull(T actual, Func`1<string> customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotBeNull(T actual, Func`1<string> customMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ContractAnnotationAttribute("actual:notnull => halt")]
public static void ShouldBeNull(T actual, string customMessage);
    [ExtensionAttribute]
[ContractAnnotationAttribute("actual:notnull => halt")]
public static void ShouldBeNull(Nullable`1<T> actual, string customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ContractAnnotationAttribute("actual:null => halt")]
public static T ShouldNotBeNull(T actual, string customMessage);
    [ExtensionAttribute]
[ContractAnnotationAttribute("actual:null => halt")]
public static T ShouldNotBeNull(Nullable`1<T> actual, string customMessage);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
[ShouldlyMethodsAttribute]
public static class Shouldly.ShouldBeStringTestExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBe(string actual, string expected, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBe(string actual, string expected, Func`1<string> customMessage, StringCompareShould options);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeNullOrEmpty(string actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeNullOrWhiteSpace(string actual, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldContain(string actual, string expected, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldContain(string actual, string expected, Func`1<string> customMessage, Case caseSensitivity);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldContainWithoutWhitespace(string actual, object expected, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldEndWith(string actual, string expected, Func`1<string> customMessage, Case caseSensitivity);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldMatch(string actual, string regexPattern, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotBeNullOrEmpty(string actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotBeNullOrWhiteSpace(string actual, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotContain(string actual, string expected, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotContain(string actual, string expected, Func`1<string> customMessage, Case caseSensitivity);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotEndWith(string actual, string expected, Func`1<string> customMessage, Case caseSensitivity);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotMatch(string actual, string regexPattern, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotStartWith(string actual, string expected, Func`1<string> customMessage, Case caseSensitivity);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldStartWith(string actual, string expected, Func`1<string> customMessage, Case caseSensitivity);
    [ExtensionAttribute]
public static void ShouldContainWithoutWhitespace(string actual, object expected, string customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ShouldContain(string actual, string expected, Case caseSensitivity, string customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ShouldNotContain(string actual, string expected, Case caseSensitivity, string customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ShouldMatch(string actual, string regexPattern, string customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ShouldNotMatch(string actual, string regexPattern, string customMessage);
    [ExtensionAttribute]
[ContractAnnotationAttribute("actual:notnull => halt")]
public static void ShouldBeNullOrEmpty(string actual, string customMessage);
    [ExtensionAttribute]
[ContractAnnotationAttribute("actual:null => halt")]
public static void ShouldNotBeNullOrEmpty(string actual, string customMessage);
    [ExtensionAttribute]
[ContractAnnotationAttribute("actual:notnull => halt")]
public static void ShouldBeNullOrWhiteSpace(string actual, string customMessage);
    [ExtensionAttribute]
[ContractAnnotationAttribute("actual:null => halt")]
public static void ShouldNotBeNullOrWhiteSpace(string actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldBe(string actual, string expected, string customMessage);
    [ExtensionAttribute]
public static void ShouldBe(string actual, string expected, StringCompareShould options);
    [ExtensionAttribute]
public static void ShouldBe(string actual, string expected, string customMessage, StringCompareShould options);
    [NullableContextAttribute("1")]
private static void ExecuteAssertion(IAssertion assertion, string customMessage);
    [ExtensionAttribute]
public static void ShouldStartWith(string actual, string expected, Case caseSensitivity, string customMessage);
    [ExtensionAttribute]
public static void ShouldEndWith(string actual, string expected, Case caseSensitivity, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotStartWith(string actual, string expected, Case caseSensitivity, string customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ShouldNotEndWith(string actual, string expected, Case caseSensitivity);
    [ExtensionAttribute]
public static void ShouldNotEndWith(string actual, string expected, string customMessage, Case caseSensitivity);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
[ShouldlyMethodsAttribute]
public static class Shouldly.ShouldBeTestExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBe(IEnumerable`1<decimal> actual, IEnumerable`1<decimal> expected, decimal tolerance, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBe(IEnumerable`1<double> actual, IEnumerable`1<double> expected, double tolerance, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBe(IEnumerable`1<float> actual, IEnumerable`1<float> expected, double tolerance, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBe(DateTime actual, DateTime expected, TimeSpan tolerance, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBe(DateTimeOffset actual, DateTimeOffset expected, TimeSpan tolerance, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBe(TimeSpan actual, TimeSpan expected, TimeSpan tolerance, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBe(decimal actual, decimal expected, decimal tolerance, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBe(double actual, double expected, double tolerance, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBe(float actual, float expected, double tolerance, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBe(T actual, T expected, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBe(IEnumerable`1<T> actual, IEnumerable`1<T> expected, bool ignoreOrder, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeAssignableTo(object actual, Type expected, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static T ShouldBeAssignableTo(object actual, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeGreaterThan(T actual, T expected, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeGreaterThan(T actual, T expected, IComparer`1<T> comparer, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeGreaterThanOrEqualTo(T actual, T expected, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeGreaterThanOrEqualTo(T actual, T expected, IComparer`1<T> comparer, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeInRange(T actual, T from, T to, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeLessThan(T actual, T expected, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeLessThan(T actual, T expected, IComparer`1<T> comparer, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeLessThanOrEqualTo(T actual, T expected, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeLessThanOrEqualTo(T actual, T expected, IComparer`1<T> comparer, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeNegative(decimal actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeNegative(double actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeNegative(float actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeNegative(int actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeNegative(long actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeNegative(short actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeOfType(object actual, Type expected, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static T ShouldBeOfType(object actual, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeOneOf(T actual, T[] expected, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBePositive(decimal actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBePositive(double actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBePositive(float actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBePositive(int actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBePositive(long actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBePositive(short actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldBeSameAs(object actual, object expected, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotBe(DateTime actual, DateTime expected, TimeSpan tolerance, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotBe(DateTimeOffset actual, DateTimeOffset expected, TimeSpan tolerance, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotBe(TimeSpan actual, TimeSpan expected, TimeSpan tolerance, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotBe(T actual, T expected, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotBeAssignableTo(object actual, Type expected, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotBeAssignableTo(object actual, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotBeInRange(T actual, T from, T to, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotBeOfType(object actual, Type expected, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotBeOfType(object actual, Func`1<string> customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotBeOneOf(T actual, T[] expected, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotBeSameAs(object actual, object expected, Func`1<string> customMessage);
    [ExtensionAttribute]
public static void ShouldBeGreaterThan(T actual, T expected, IComparer`1<T> comparer, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeGreaterThan(T actual, T expected, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeLessThan(T actual, T expected, IComparer`1<T> comparer, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeLessThan(T actual, T expected, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeGreaterThanOrEqualTo(T actual, T expected, IComparer`1<T> comparer, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeGreaterThanOrEqualTo(T actual, T expected, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeLessThanOrEqualTo(T actual, T expected, IComparer`1<T> comparer, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeLessThanOrEqualTo(T actual, T expected, string customMessage);
    [ExtensionAttribute]
public static void ShouldBePositive(decimal actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeNegative(decimal actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldBePositive(double actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeNegative(double actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldBePositive(float actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeNegative(float actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldBePositive(int actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeNegative(int actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldBePositive(long actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeNegative(long actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldBePositive(short actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeNegative(short actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeOneOf(T actual, T[] expected);
    [ExtensionAttribute]
public static void ShouldBeOneOf(T actual, T[] expected, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeOneOf(T actual, T[] expected, IEqualityComparer`1<T> comparer, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotBeOneOf(T actual, T[] expected);
    [ExtensionAttribute]
public static void ShouldNotBeOneOf(T actual, T[] expected, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotBeOneOf(T actual, T[] expected, IEqualityComparer`1<T> comparer, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeInRange(T actual, T from, T to, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotBeInRange(T actual, T from, T to, string customMessage);
    [ExtensionAttribute]
public static T ShouldBeAssignableTo(object actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeAssignableTo(object actual, Type expected, string customMessage);
    [ExtensionAttribute]
public static T ShouldBeOfType(object actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeOfType(object actual, Type expected, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotBeAssignableTo(object actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotBeAssignableTo(object actual, Type expected, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotBeOfType(object actual, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotBeOfType(object actual, Type expected, string customMessage);
    [ExtensionAttribute]
public static void ShouldBe(DateTime actual, DateTime expected, TimeSpan tolerance, string customMessage);
    [ExtensionAttribute]
public static void ShouldBe(DateTimeOffset actual, DateTimeOffset expected, TimeSpan tolerance, string customMessage);
    [ExtensionAttribute]
public static void ShouldBe(TimeSpan actual, TimeSpan expected, TimeSpan tolerance, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotBe(DateTime actual, DateTime expected, TimeSpan tolerance, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotBe(DateTimeOffset actual, DateTimeOffset expected, TimeSpan tolerance, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotBe(TimeSpan actual, TimeSpan expected, TimeSpan tolerance, string customMessage);
    [ExtensionAttribute]
[ContractAnnotationAttribute("actual:null,expected:notnull => halt;actual:notnull,expected:null => halt")]
public static void ShouldBe(T actual, T expected, string customMessage);
    [ExtensionAttribute]
public static void ShouldBe(T actual, T expected, IEqualityComparer`1<T> comparer, string customMessage);
    [ExtensionAttribute]
[ContractAnnotationAttribute("actual:null,expected:null => halt")]
public static void ShouldNotBe(T actual, T expected, string customMessage);
    [ExtensionAttribute]
[ContractAnnotationAttribute("actual:null,expected:null => halt")]
public static void ShouldNotBe(T actual, T expected, IEqualityComparer`1<T> comparer, string customMessage);
    [ExtensionAttribute]
public static void ShouldBe(IEnumerable`1<T> actual, IEnumerable`1<T> expected, bool ignoreOrder);
    [ExtensionAttribute]
public static void ShouldBe(IEnumerable`1<T> actual, IEnumerable`1<T> expected, bool ignoreOrder, string customMessage);
    [ExtensionAttribute]
public static void ShouldBe(IEnumerable`1<T> actual, IEnumerable`1<T> expected, IEqualityComparer`1<T> comparer, bool ignoreOrder, string customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ShouldBe(IEnumerable`1<decimal> actual, IEnumerable`1<decimal> expected, decimal tolerance, string customMessage);
    [ExtensionAttribute]
public static void ShouldBeSameAs(object actual, object expected, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotBeSameAs(object actual, object expected, string customMessage);
    [ExtensionAttribute]
public static void ShouldBe(float actual, float expected, double tolerance, string customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ShouldBe(IEnumerable`1<double> actual, IEnumerable`1<double> expected, double tolerance, string customMessage);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ShouldBe(IEnumerable`1<float> actual, IEnumerable`1<float> expected, double tolerance, string customMessage);
    [ExtensionAttribute]
public static void ShouldBe(double actual, double expected, double tolerance, string customMessage);
    [ExtensionAttribute]
public static void ShouldBe(decimal actual, decimal expected, decimal tolerance, string customMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Shouldly.ShouldBeTypeMessageGenerator : ShouldlyMessageGenerator {
    private static Regex Validator;
    private static ShouldBeTypeMessageGenerator();
    public virtual bool CanProcess(IShouldlyAssertionContext context);
    public virtual string GenerateErrorMessage(IShouldlyAssertionContext context);
}
public class Shouldly.ShouldCompleteInException : ShouldlyTimeoutException {
    [NullableContextAttribute("2")]
public ShouldCompleteInException(string message, ShouldlyTimeoutException inner);
}
public class Shouldly.ShouldContainWithCountShouldlyMessage : ShouldlyMessage {
    [NullableContextAttribute("2")]
public ShouldContainWithCountShouldlyMessage(object expected, object actual, int matchCount, string customMessage, string shouldlyMethod);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Shouldly.ShouldlyAssertionContext : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ShouldMethod>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CodePart>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Key>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Expected>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Actual>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Tolerance>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<Case> <CaseSensitivity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IgnoreOrder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasRelevantActual>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasRelevantKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CustomMessage>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MatchCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SortDirection <SortDirection>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <OutOfOrderIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <OutOfOrderObject>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<string> <Path>k__BackingField;
    [NullableAttribute("1")]
public string ShouldMethod { get; public set; }
    public string CodePart { get; public set; }
    public string FileName { get; public set; }
    public Nullable`1<int> LineNumber { get; public set; }
    public object Key { get; public set; }
    public object Expected { get; public set; }
    public object Actual { get; public set; }
    public object Tolerance { get; public set; }
    public Nullable`1<Case> CaseSensitivity { get; public set; }
    public bool CodePartMatchesActual { get; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    public bool IgnoreOrder { get; public set; }
    public bool HasRelevantActual { get; public set; }
    public bool HasRelevantKey { get; public set; }
    public bool IsNegatedAssertion { get; }
    public string CustomMessage { get; public set; }
    public Expression Filter { get; public set; }
    public Nullable`1<int> MatchCount { get; public set; }
    public SortDirection SortDirection { get; public set; }
    public int OutOfOrderIndex { get; public set; }
    public object OutOfOrderObject { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<string> Path { get; public set; }
    public ShouldlyAssertionContext(string shouldlyMethod, object expected, object actual, StackTrace stackTrace);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_ShouldMethod();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual void set_ShouldMethod(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CodePart();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CodePart(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FileName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_LineNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LineNumber(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Key();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Key(object value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Expected();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expected(object value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Actual();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Actual(object value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Tolerance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tolerance(object value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Case> get_CaseSensitivity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CaseSensitivity(Nullable`1<Case> value);
    public sealed virtual bool get_CodePartMatchesActual();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Timeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IgnoreOrder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IgnoreOrder(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasRelevantActual();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasRelevantActual(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasRelevantKey();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasRelevantKey(bool value);
    public sealed virtual bool get_IsNegatedAssertion();
    [CompilerGeneratedAttribute]
public sealed virtual string get_CustomMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CustomMessage(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Filter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Filter(Expression value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_MatchCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MatchCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual SortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SortDirection(SortDirection value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_OutOfOrderIndex();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OutOfOrderIndex(int value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_OutOfOrderObject();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OutOfOrderObject(object value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Path(IEnumerable`1<string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Shouldly.ShouldlyConfiguration : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static List`1<string> <CompareAsObjectTypes>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static ShouldMatchConfigurationBuilder <ShouldMatchApprovedDefaults>k__BackingField;
    public static double DefaultFloatingPointTolerance;
    public static TimeSpan DefaultTaskTimeout;
    public static List`1<string> CompareAsObjectTypes { get; }
    public static ShouldMatchConfigurationBuilder ShouldMatchApprovedDefaults { get; }
    private static ShouldlyConfiguration();
    [CompilerGeneratedAttribute]
public static List`1<string> get_CompareAsObjectTypes();
    [CompilerGeneratedAttribute]
public static ShouldMatchConfigurationBuilder get_ShouldMatchApprovedDefaults();
    public static IDisposable DisableSourceInErrors();
    public static bool IsSourceDisabledInErrors();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Shouldly.ShouldlyCoreExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static bool IsShouldlyMethod(MethodBase method);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static bool IsSystemDynamicMachinery(MethodBase method);
    [ExtensionAttribute]
public static void AssertAwesomely(T actual, Func`2<T, bool> specifiedConstraint, object originalActual, object originalExpected, string customMessage, string shouldlyMethod);
    [ExtensionAttribute]
public static void AssertAwesomelyWithCaseSensitivity(T actual, Func`2<T, bool> specifiedConstraint, object originalActual, object originalExpected, Case caseSensitivity, string customMessage, string shouldlyMethod);
    [ExtensionAttribute]
public static void AssertAwesomelyIgnoringOrder(T actual, Func`2<T, bool> specifiedConstraint, object originalActual, object originalExpected, string customMessage, string shouldlyMethod);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void AssertAwesomely(T actual, Func`2<T, bool> specifiedConstraint, object originalActual, object originalExpected, object tolerance, string customMessage, string shouldlyMethod);
    [ExtensionAttribute]
public static void AssertAwesomely(T actual, Func`2<T, bool> specifiedConstraint, object originalActual, object originalExpected, Case caseSensitivity, string customMessage, string shouldlyMethod);
}
internal static class Shouldly.ShouldlyEnvironmentContext : object {
    public static bool IsWindows();
    public static bool IsMac();
    public static bool IsLinux();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[ShouldlyMethodsAttribute]
public static class Shouldly.ShouldlyExtensionMethods.ShouldHaveEnumExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldHaveFlag(Enum actual, Enum expectedFlag, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotHaveFlag(Enum actual, Enum expectedFlag, Func`1<string> customMessage);
    [ExtensionAttribute]
public static void ShouldHaveFlag(Enum actual, Enum expectedFlag, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotHaveFlag(Enum actual, Enum expectedFlag, string customMessage);
    private static void CheckEnumHasFlagAttribute(Enum actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Shouldly.ShouldlyMessage : object {
    private static IEnumerable`1<ShouldlyMessageGenerator> ShouldlyMessageGenerators;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IShouldlyAssertionContext <ShouldlyAssertionContext>k__BackingField;
    protected IShouldlyAssertionContext ShouldlyAssertionContext { get; protected set; }
    private static ShouldlyMessage();
    [CompilerGeneratedAttribute]
protected IShouldlyAssertionContext get_ShouldlyAssertionContext();
    [CompilerGeneratedAttribute]
protected void set_ShouldlyAssertionContext(IShouldlyAssertionContext value);
    public virtual string ToString();
    private string GenerateShouldMessage();
    private string CreateExpectedErrorMessage();
    private static string CreateActualVsExpectedMessage(IShouldlyAssertionContext context);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <GenerateShouldMessage>b__6_0(ShouldlyMessageGenerator x);
}
[AttributeUsageAttribute("4")]
public class Shouldly.ShouldlyMethodsAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Shouldly.ShouldlyThrowMessage : ShouldlyMessage {
    [NullableContextAttribute("1")]
public ShouldlyThrowMessage(object expected, string exceptionMessage, string customMessage, string shouldlyMethod);
    public ShouldlyThrowMessage(object expected, object actual, string customMessage, string shouldlyMethod);
    public ShouldlyThrowMessage(object expected, string customMessage, string shouldlyMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Shouldly.ShouldlyTimeoutException : TimeoutException {
    [NullableAttribute("2")]
private string stackTrace;
    public string StackTrace { get; }
    [NullableContextAttribute("2")]
public ShouldlyTimeoutException(string message, ShouldlyTimeoutException inner);
    public virtual string get_StackTrace();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Shouldly.ShouldMatchApprovedException : ShouldAssertException {
    public ShouldMatchApprovedException(string message, string receivedFile, string approvedFile);
    private static string GenerateMessage(string message, string receivedFile, string approvedFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[ShouldlyMethodsAttribute]
public static class Shouldly.ShouldMatchApprovedTestExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldMatchApproved(string actual, Func`1<string> customMessage, Action`1<ShouldMatchConfigurationBuilder> configureOptions);
    [ExtensionAttribute]
public static void ShouldMatchApproved(string actual, Action`1<ShouldMatchConfigurationBuilder> configureOptions, string customMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
[ShouldlyMethodsAttribute]
public static class Shouldly.ShouldNotThrowTaskAsyncExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Task ShouldNotThrowAsync(Func`1<Task> actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Task ShouldNotThrowAsync(Task task, Func`1<string> customMessage);
    [ExtensionAttribute]
public static Task ShouldNotThrowAsync(Task task, string customMessage);
    [ExtensionAttribute]
public static Task ShouldNotThrowAsync(Func`1<Task> actual, string customMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[ShouldlyMethodsAttribute]
public static class Shouldly.ShouldSatisfyAllConditionsTestExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldSatisfyAllConditions(object actual, Func`1<string> customMessage, Action[] conditions);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldSatisfyAllConditions(T actual, Func`1<string> customMessage, Action`1[] conditions);
    [ExtensionAttribute]
public static void ShouldSatisfyAllConditions(T actual, Action`1[] conditions);
    [ExtensionAttribute]
public static void ShouldSatisfyAllConditions(T actual, string customMessage, Action`1[] conditions);
    [ExtensionAttribute]
public static void ShouldSatisfyAllConditions(object actual, Action[] conditions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ShouldSatisfyAllConditions(object actual, string customMessage, Action[] conditions);
    private static Action[] CreateParameterlessActions(T parameter, Action`1[] actions);
    private static string BuildErrorMessageString(IEnumerable`1<Exception> errorMessages);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Shouldly.ShouldThrowAssertionContext : ShouldlyAssertionContext {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExceptionMessage>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAsync>k__BackingField;
    public string ExceptionMessage { get; }
    public bool IsAsync { get; }
    internal ShouldThrowAssertionContext(object expected, object actual, string exceptionMessage, bool isAsync, StackTrace stackTrace, string shouldlyMethod);
    [CompilerGeneratedAttribute]
public string get_ExceptionMessage();
    [CompilerGeneratedAttribute]
public bool get_IsAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
[ShouldlyMethodsAttribute]
public static class Shouldly.ShouldThrowAsyncExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Task`1<Exception> ShouldThrowAsync(Func`1<Task> actual, Func`1<string> customMessage, Type exceptionType);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Task`1<Exception> ShouldThrowAsync(Task task, Func`1<string> customMessage, Type exceptionType);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Task`1<TException> ShouldThrowAsync(Func`1<Task> actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Task`1<TException> ShouldThrowAsync(Task task, Func`1<string> customMessage);
    [ExtensionAttribute]
public static Task`1<TException> ShouldThrowAsync(Task task, string customMessage);
    [ExtensionAttribute]
public static Task`1<Exception> ShouldThrowAsync(Task task, Type exceptionType, string customMessage);
    [ExtensionAttribute]
public static Task`1<TException> ShouldThrowAsync(Func`1<Task> actual, string customMessage);
    [ExtensionAttribute]
public static Task`1<Exception> ShouldThrowAsync(Func`1<Task> actual, Type exceptionType, string customMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
[ShouldlyMethodsAttribute]
public static class Shouldly.ShouldThrowExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotThrow(Action action, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static T ShouldNotThrow(Func`1<T> action, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Exception ShouldThrow(Action actual, Func`1<string> customMessage, Type exceptionType);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Exception ShouldThrow(Func`1<object> actual, Func`1<string> customMessage, Type exceptionType);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static TException ShouldThrow(Action actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static TException ShouldThrow(Func`1<object> actual, Func`1<string> customMessage);
    [ExtensionAttribute]
public static TException ShouldThrow(Action actual, string customMessage);
    [ExtensionAttribute]
public static TException ShouldThrow(Func`1<object> actual, string customMessage);
    [ExtensionAttribute]
public static Exception ShouldThrow(Action actual, Type exceptionType, string customMessage);
    [ExtensionAttribute]
public static Exception ShouldThrow(Func`1<object> actual, Type exceptionType, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotThrow(Action action, string customMessage);
    [ExtensionAttribute]
public static T ShouldNotThrow(Func`1<T> action, string customMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
[ShouldlyMethodsAttribute]
public static class Shouldly.ShouldThrowTaskExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotThrow(Func`1<Task> action, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotThrow(Task action, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotThrow(Func`1<Task> action, TimeSpan timeoutAfter, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static void ShouldNotThrow(Task action, TimeSpan timeoutAfter, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static T ShouldNotThrow(Func`1<Task`1<T>> action, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static T ShouldNotThrow(Task`1<T> action, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static T ShouldNotThrow(Func`1<Task`1<T>> action, TimeSpan timeoutAfter, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static T ShouldNotThrow(Task`1<T> action, TimeSpan timeoutAfter, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Exception ShouldThrow(Func`1<Task> actual, Func`1<string> customMessage, Type exceptionType);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Exception ShouldThrow(Task actual, Func`1<string> customMessage, Type exceptionType);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Exception ShouldThrow(Func`1<Task> actual, TimeSpan timeoutAfter, Func`1<string> customMessage, Type exceptionType);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static Exception ShouldThrow(Task actual, TimeSpan timeoutAfter, Func`1<string> customMessage, Type exceptionType);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static TException ShouldThrow(Func`1<Task> actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static TException ShouldThrow(Task actual, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static TException ShouldThrow(Func`1<Task> actual, TimeSpan timeoutAfter, Func`1<string> customMessage);
    [ExtensionAttribute]
[ObsoleteAttribute("Func based customMessage overloads have been removed. Pass in a string for the customMessage.", "True")]
public static TException ShouldThrow(Task actual, TimeSpan timeoutAfter, Func`1<string> customMessage);
    [ExtensionAttribute]
public static TException ShouldThrow(Task actual, string customMessage);
    [ExtensionAttribute]
public static Exception ShouldThrow(Task actual, Type exceptionType);
    [ExtensionAttribute]
public static Exception ShouldThrow(Task actual, string customMessage, Type exceptionType);
    [ExtensionAttribute]
public static TException ShouldThrow(Func`1<Task> actual, string customMessage);
    [ExtensionAttribute]
public static Exception ShouldThrow(Func`1<Task> actual, Type exceptionType);
    [ExtensionAttribute]
public static Exception ShouldThrow(Func`1<Task> actual, string customMessage, Type exceptionType);
    [ExtensionAttribute]
public static TException ShouldThrow(Task actual, TimeSpan timeoutAfter, string customMessage);
    [ExtensionAttribute]
public static Exception ShouldThrow(Task actual, TimeSpan timeoutAfter, Type exceptionType);
    [ExtensionAttribute]
public static Exception ShouldThrow(Task actual, TimeSpan timeoutAfter, string customMessage, Type exceptionType);
    [ExtensionAttribute]
public static TException ShouldThrow(Func`1<Task> actual, TimeSpan timeoutAfter, string customMessage);
    [ExtensionAttribute]
public static Exception ShouldThrow(Func`1<Task> actual, TimeSpan timeoutAfter, Type exceptionType);
    [ExtensionAttribute]
public static Exception ShouldThrow(Func`1<Task> actual, TimeSpan timeoutAfter, string customMessage, Type exceptionType);
    [ExtensionAttribute]
public static void ShouldNotThrow(Task action, string customMessage);
    [ExtensionAttribute]
public static T ShouldNotThrow(Task`1<T> action, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotThrow(Func`1<Task> action, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotThrow(Task action, TimeSpan timeoutAfter, string customMessage);
    [ExtensionAttribute]
public static void ShouldNotThrow(Func`1<Task> action, TimeSpan timeoutAfter, string customMessage);
    [ExtensionAttribute]
public static T ShouldNotThrow(Func`1<Task`1<T>> action, string customMessage);
    [ExtensionAttribute]
public static T ShouldNotThrow(Task`1<T> action, TimeSpan timeoutAfter, string customMessage);
    [ExtensionAttribute]
public static T ShouldNotThrow(Func`1<Task`1<T>> action, TimeSpan timeoutAfter, string customMessage);
}
public enum Shouldly.SortDirection : Enum {
    public int value__;
    public static SortDirection Ascending;
    public static SortDirection Descending;
}
[FlagsAttribute]
public enum Shouldly.StringCompareShould : Enum {
    public int value__;
    public static StringCompareShould IgnoreCase;
    public static StringCompareShould IgnoreLineEndings;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Shouldly.StringHelpers : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static string ToStringAwesomely(object value);
    [ExtensionAttribute]
internal static string PascalToSpaced(string pascal);
    [ExtensionAttribute]
internal static string Quotify(string input);
    [ExtensionAttribute]
internal static string StripWhitespace(string input);
    [ExtensionAttribute]
internal static string CollapseWhitespace(string input);
    [ExtensionAttribute]
internal static string StripLambdaExpressionSyntax(string input);
    [ExtensionAttribute]
internal static string RemoveVariableAssignment(string input);
    [ExtensionAttribute]
internal static string RemoveBlock(string input);
    [ExtensionAttribute]
internal static string Clip(string stringToClip, int maximumStringLength);
    [ExtensionAttribute]
internal static string Clip(string stringToClip, int maximumStringLength, string ellipsis);
    [ExtensionAttribute]
internal static string ToSafeString(char c);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static bool IsNullOrWhiteSpace(string s);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static string NormalizeLineEndings(string s);
    [ExtensionAttribute]
private static string CommaDelimited(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
private static string DelimitWith(IEnumerable`1<T> enumerable, string separator);
    [ExtensionAttribute]
private static string ToStringAwesomely(Enum value);
    [ExtensionAttribute]
private static string ToStringAwesomely(DateTime value);
}
[ExtensionAttribute]
internal static class Shouldly.TaskExtensions : object {
    [NullableContextAttribute("1")]
private static void MarshalTaskResults(Task source, TaskCompletionSource`1<TResult> proxy);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task TimeoutAfter(Task task, TimeSpan timeout);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Shouldly.TaskShouldlyThrowMessage : ShouldlyMessage {
    [NullableContextAttribute("1")]
public TaskShouldlyThrowMessage(object expected, Exception exception, string customMessage, string shouldlyMethod);
    public TaskShouldlyThrowMessage(object expected, object actual, string customMessage, string shouldlyMethod);
    public TaskShouldlyThrowMessage(object expected, string customMessage, string shouldlyMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Shouldly.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsValueType(Type type);
    [ExtensionAttribute]
public static bool IsGenericType(Type type);
    [ExtensionAttribute]
public static bool IsDefined(Type type, Type attributeType, bool inherit);
    [ExtensionAttribute]
public static bool TryGetEnumerable(object obj, IEnumerable& enumerable);
    [ExtensionAttribute]
private static bool IsMemory(Type type, Type& elementType);
    [ExtensionAttribute]
private static bool IsReadOnlyMemory(Type type, Type& elementType);
    [ExtensionAttribute]
private static IEnumerable ToEnumerable(object readOnlyMemory, Type elementType);
    [ExtensionAttribute]
private static object ToReadOnlyMemory(object obj, Type objectType, Type genericParameterType);
}
internal static class Shouldly.Utils : object {
    [NullableContextAttribute("1")]
public static IDisposable WithSynchronizationContext(SynchronizationContext synchronizationContext);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
