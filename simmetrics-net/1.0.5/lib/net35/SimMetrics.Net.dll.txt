public abstract class SimMetrics.Net.API.AbstractAffineGapCost : object {
    public double MaxCost { get; }
    public double MinCost { get; }
    public string ShortDescriptionString { get; }
    public abstract virtual double GetCost(string textToGap, int stringIndexStartGap, int stringIndexEndGap);
    public abstract virtual double get_MaxCost();
    public abstract virtual double get_MinCost();
    public abstract virtual string get_ShortDescriptionString();
}
public abstract class SimMetrics.Net.API.AbstractStringMetric : object {
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public Double[] BatchCompareSet(String[] setRenamed, string comparator);
    public Double[] BatchCompareSets(String[] firstSet, String[] secondSet);
    public abstract virtual double GetSimilarity(string firstWord, string secondWord);
    public abstract virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public sealed virtual long GetSimilarityTimingActual(string firstWord, string secondWord);
    public abstract virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public abstract virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    public abstract virtual string get_LongDescriptionString();
    public abstract virtual string get_ShortDescriptionString();
}
public abstract class SimMetrics.Net.API.AbstractSubstitutionCost : object {
    public double MaxCost { get; }
    public double MinCost { get; }
    public string ShortDescriptionString { get; }
    public abstract virtual double GetCost(string firstWord, int firstWordIndex, string secondWord, int secondWordIndex);
    public abstract virtual double get_MaxCost();
    public abstract virtual double get_MinCost();
    public abstract virtual string get_ShortDescriptionString();
}
public abstract class SimMetrics.Net.API.AbstractTokeniserQGramN : object {
    private static string DefaultEndPadCharacter;
    private static string DefaultStartPadCharacter;
    [CompilerGeneratedAttribute]
private int <CharacterCombinationIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <QGramLength>k__BackingField;
    [CompilerGeneratedAttribute]
private ITermHandler <StopWordHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SuppliedWord>k__BackingField;
    [CompilerGeneratedAttribute]
private TokeniserUtilities`1<string> <TokenUtilities>k__BackingField;
    public int CharacterCombinationIndex { get; public set; }
    public string Delimiters { get; }
    public int QGramLength { get; public set; }
    public string ShortDescriptionString { get; }
    public ITermHandler StopWordHandler { get; public set; }
    public string SuppliedWord { get; public set; }
    public TokeniserUtilities`1<string> TokenUtilities { get; public set; }
    public abstract virtual Collection`1<string> Tokenize(string word);
    public Collection`1<string> Tokenize(string word, bool extended, int tokenLength, int characterCombinationIndexValue);
    public sealed virtual Collection`1<string> TokenizeToSet(string word);
    [CompilerGeneratedAttribute]
public int get_CharacterCombinationIndex();
    [CompilerGeneratedAttribute]
public void set_CharacterCombinationIndex(int value);
    public sealed virtual string get_Delimiters();
    [CompilerGeneratedAttribute]
public int get_QGramLength();
    [CompilerGeneratedAttribute]
public void set_QGramLength(int value);
    public abstract virtual string get_ShortDescriptionString();
    [CompilerGeneratedAttribute]
public sealed virtual ITermHandler get_StopWordHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StopWordHandler(ITermHandler value);
    [CompilerGeneratedAttribute]
public string get_SuppliedWord();
    [CompilerGeneratedAttribute]
public void set_SuppliedWord(string value);
    [CompilerGeneratedAttribute]
public TokeniserUtilities`1<string> get_TokenUtilities();
    [CompilerGeneratedAttribute]
public void set_TokenUtilities(TokeniserUtilities`1<string> value);
}
public interface SimMetrics.Net.API.IAffineGapCost {
    public double MaxCost { get; }
    public double MinCost { get; }
    public string ShortDescriptionString { get; }
    public abstract virtual double GetCost(string textToGap, int stringIndexStartGap, int stringIndexEndGap);
    public abstract virtual double get_MaxCost();
    public abstract virtual double get_MinCost();
    public abstract virtual string get_ShortDescriptionString();
}
public interface SimMetrics.Net.API.IStringMetric {
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public abstract virtual double GetSimilarity(string firstWord, string secondWord);
    public abstract virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public abstract virtual long GetSimilarityTimingActual(string firstWord, string secondWord);
    public abstract virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public abstract virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    public abstract virtual string get_LongDescriptionString();
    public abstract virtual string get_ShortDescriptionString();
}
public interface SimMetrics.Net.API.ISubstitutionCost {
    public double MaxCost { get; }
    public double MinCost { get; }
    public string ShortDescriptionString { get; }
    public abstract virtual double GetCost(string firstWord, int firstWordIndex, string secondWord, int secondWordIndex);
    public abstract virtual double get_MaxCost();
    public abstract virtual double get_MinCost();
    public abstract virtual string get_ShortDescriptionString();
}
public interface SimMetrics.Net.API.ITermHandler {
    public int NumberOfWords { get; }
    public string ShortDescriptionString { get; }
    public StringBuilder WordsAsBuffer { get; }
    public abstract virtual void AddWord(string termToAdd);
    public abstract virtual bool IsWord(string termToTest);
    public abstract virtual void RemoveWord(string termToRemove);
    public abstract virtual int get_NumberOfWords();
    public abstract virtual string get_ShortDescriptionString();
    public abstract virtual StringBuilder get_WordsAsBuffer();
}
public interface SimMetrics.Net.API.ITokeniser {
    public string Delimiters { get; }
    public string ShortDescriptionString { get; }
    public ITermHandler StopWordHandler { get; public set; }
    public abstract virtual Collection`1<string> Tokenize(string word);
    public abstract virtual Collection`1<string> TokenizeToSet(string word);
    public abstract virtual string get_Delimiters();
    public abstract virtual string get_ShortDescriptionString();
    public abstract virtual ITermHandler get_StopWordHandler();
    public abstract virtual void set_StopWordHandler(ITermHandler value);
}
[ExtensionAttribute]
public static class SimMetrics.Net.Extensions : object {
    [ExtensionAttribute]
public static List`1<string> ApproximatelyEquals(List`1<string> list, string word, double threshold, SimMetricType simMetricType);
    [ExtensionAttribute]
public static double ApproximatelyEquals(string firstWord, string secondWord, SimMetricType simMetricType);
}
public class SimMetrics.Net.Metric.BlockDistance : AbstractStringMetric {
    private double _estimatedTimingConstant;
    private ITokeniser _tokeniser;
    private TokeniserUtilities`1<string> _tokenUtilities;
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public BlockDistance(ITokeniser tokeniserToUse);
    private double GetActualSimilarity(Collection`1<string> firstTokens, Collection`1<string> secondTokens);
    public virtual double GetSimilarity(string firstWord, string secondWord);
    public virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Metric.ChapmanLengthDeviation : AbstractStringMetric {
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public virtual double GetSimilarity(string firstWord, string secondWord);
    public virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Metric.ChapmanMeanLength : AbstractStringMetric {
    private static int ChapmanMeanLengthMaxString;
    private static double DefaultMismatchScore;
    private static double DefaultPerfectScore;
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public virtual double GetSimilarity(string firstWord, string secondWord);
    public virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Metric.CosineSimilarity : AbstractStringMetric {
    private double _estimatedTimingConstant;
    private ITokeniser _tokeniser;
    private TokeniserUtilities`1<string> _tokenUtilities;
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public CosineSimilarity(ITokeniser tokeniserToUse);
    public virtual double GetSimilarity(string firstWord, string secondWord);
    public virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Metric.DiceSimilarity : AbstractStringMetric {
    private double _estimatedTimingConstant;
    private ITokeniser _tokeniser;
    private TokeniserUtilities`1<string> _tokenUtilities;
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public DiceSimilarity(ITokeniser tokeniserToUse);
    public virtual double GetSimilarity(string firstWord, string secondWord);
    public virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Metric.EuclideanDistance : AbstractStringMetric {
    private static double DefaultMismatchScore;
    private double _estimatedTimingConstant;
    private ITokeniser _tokeniser;
    private TokeniserUtilities`1<string> _tokenUtilities;
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public EuclideanDistance(ITokeniser tokeniserToUse);
    private double GetActualDistance(Collection`1<string> firstTokens, Collection`1<string> secondTokens);
    public double GetEuclidDistance(string firstWord, string secondWord);
    public virtual double GetSimilarity(string firstWord, string secondWord);
    public virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Metric.JaccardSimilarity : AbstractStringMetric {
    private static double DefaultMismatchScore;
    private double _estimatedTimingConstant;
    private ITokeniser _tokeniser;
    private TokeniserUtilities`1<string> _tokenUtilities;
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public JaccardSimilarity(ITokeniser tokeniserToUse);
    public virtual double GetSimilarity(string firstWord, string secondWord);
    public virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Metric.Jaro : AbstractStringMetric {
    private static double DefaultMismatchScore;
    private double _estimatedTimingConstant;
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    private static StringBuilder GetCommonCharacters(string firstWord, string secondWord, int distanceSep);
    public virtual double GetSimilarity(string firstWord, string secondWord);
    public virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Metric.JaroWinkler : AbstractStringMetric {
    private static double DefaultMismatchScore;
    private static double EstimatedTimingConstant;
    private AbstractStringMetric _jaroStringMetric;
    private static int MinPrefixTestLength;
    private static double PrefixAdustmentScale;
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    private static int GetPrefixLength(string firstWord, string secondWord);
    public virtual double GetSimilarity(string firstWord, string secondWord);
    public virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Metric.Levenstein : AbstractStringMetric {
    private AbstractSubstitutionCost _dCostFunction;
    private static double DefaultMismatchScore;
    private static double DefaultPerfectMatchScore;
    private double _estimatedTimingConstant;
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public virtual double GetSimilarity(string firstWord, string secondWord);
    public virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Metric.MatchingCoefficient : AbstractStringMetric {
    private static double DefaultMismatchScore;
    private double _estimatedTimingConstant;
    private ITokeniser _tokeniser;
    private TokeniserUtilities`1<string> _tokenUtilities;
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public MatchingCoefficient(ITokeniser tokeniserToUse);
    private double GetActualSimilarity(Collection`1<string> firstTokens, Collection`1<string> secondTokens);
    public virtual double GetSimilarity(string firstWord, string secondWord);
    public virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Metric.MongeElkan : AbstractStringMetric {
    private static double DefaultMismatchScore;
    private double _estimatedTimingConstant;
    private AbstractStringMetric _internalStringMetric;
    internal ITokeniser Tokeniser;
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public MongeElkan(AbstractStringMetric metricToUse);
    public MongeElkan(ITokeniser tokeniserToUse);
    public MongeElkan(ITokeniser tokeniserToUse, AbstractStringMetric metricToUse);
    public virtual double GetSimilarity(string firstWord, string secondWord);
    public virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Metric.NeedlemanWunch : AbstractStringMetric {
    private static double DefaultGapCost;
    private static double DefaultMismatchScore;
    private static double DefaultPerfectMatchScore;
    private double _estimatedTimingConstant;
    [CompilerGeneratedAttribute]
private AbstractSubstitutionCost <DCostFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private double <GapCost>k__BackingField;
    public AbstractSubstitutionCost DCostFunction { get; public set; }
    public double GapCost { get; public set; }
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public NeedlemanWunch(AbstractSubstitutionCost costFunction);
    public NeedlemanWunch(double costG);
    public NeedlemanWunch(double costG, AbstractSubstitutionCost costFunction);
    public virtual double GetSimilarity(string firstWord, string secondWord);
    public virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    [CompilerGeneratedAttribute]
public AbstractSubstitutionCost get_DCostFunction();
    [CompilerGeneratedAttribute]
public void set_DCostFunction(AbstractSubstitutionCost value);
    [CompilerGeneratedAttribute]
public double get_GapCost();
    [CompilerGeneratedAttribute]
public void set_GapCost(double value);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Metric.OverlapCoefficient : AbstractStringMetric {
    private static double DefaultMismatchScore;
    private double _estimatedTimingConstant;
    private ITokeniser _tokeniser;
    private TokeniserUtilities`1<string> _tokenUtilities;
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public OverlapCoefficient(ITokeniser tokeniserToUse);
    public virtual double GetSimilarity(string firstWord, string secondWord);
    public virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Metric.QGramsDistance : AbstractStringMetric {
    private static double DefaultMismatchScore;
    private double _estimatedTimingConstant;
    private ITokeniser _tokeniser;
    private TokeniserUtilities`1<string> _tokenUtilities;
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public QGramsDistance(ITokeniser tokeniserToUse);
    private double GetActualSimilarity(Collection`1<string> firstTokens, Collection`1<string> secondTokens);
    public virtual double GetSimilarity(string firstWord, string secondWord);
    public virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Metric.SmithWaterman : AbstractStringMetric {
    private static double DefaultGapCost;
    private static double DefaultMismatchScore;
    private static double DefaultPerfectMatchScore;
    private static double EstimatedTimingConstant;
    [CompilerGeneratedAttribute]
private AbstractSubstitutionCost <DCostFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private double <GapCost>k__BackingField;
    public AbstractSubstitutionCost DCostFunction { get; public set; }
    public double GapCost { get; public set; }
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public SmithWaterman(AbstractSubstitutionCost costFunction);
    public SmithWaterman(double costG);
    public SmithWaterman(double costG, AbstractSubstitutionCost costFunction);
    public virtual double GetSimilarity(string firstWord, string secondWord);
    public virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    [CompilerGeneratedAttribute]
public AbstractSubstitutionCost get_DCostFunction();
    [CompilerGeneratedAttribute]
public void set_DCostFunction(AbstractSubstitutionCost value);
    [CompilerGeneratedAttribute]
public double get_GapCost();
    [CompilerGeneratedAttribute]
public void set_GapCost(double value);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Metric.SmithWatermanGotoh : SmithWatermanGotohWindowedAffine {
    private static int AffineGapWindowSize;
    private static double EstimatedTimingConstant;
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public SmithWatermanGotoh(AbstractAffineGapCost gapCostFunction);
    public SmithWatermanGotoh(AbstractSubstitutionCost costFunction);
    public SmithWatermanGotoh(AbstractAffineGapCost gapCostFunction, AbstractSubstitutionCost costFunction);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Metric.SmithWatermanGotohWindowedAffine : AbstractStringMetric {
    private static double EstimatedTimingConstant;
    private static double DefaultMismatchScore;
    private static double DefaultPerfectScore;
    private static int DefaultWindowSize;
    private int _windowSize;
    [CompilerGeneratedAttribute]
private AbstractSubstitutionCost <DCostFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private AbstractAffineGapCost <GGapFunction>k__BackingField;
    public AbstractSubstitutionCost DCostFunction { get; public set; }
    public AbstractAffineGapCost GGapFunction { get; public set; }
    public string LongDescriptionString { get; }
    public string ShortDescriptionString { get; }
    public SmithWatermanGotohWindowedAffine(AbstractAffineGapCost gapCostFunction);
    public SmithWatermanGotohWindowedAffine(AbstractSubstitutionCost costFunction);
    public SmithWatermanGotohWindowedAffine(int affineGapWindowSize);
    public SmithWatermanGotohWindowedAffine(AbstractAffineGapCost gapCostFunction, int affineGapWindowSize);
    public SmithWatermanGotohWindowedAffine(AbstractSubstitutionCost costFunction, int affineGapWindowSize);
    public SmithWatermanGotohWindowedAffine(AbstractAffineGapCost gapCostFunction, AbstractSubstitutionCost costFunction, int affineGapWindowSize);
    public virtual double GetSimilarity(string firstWord, string secondWord);
    public virtual string GetSimilarityExplained(string firstWord, string secondWord);
    public virtual double GetSimilarityTimingEstimated(string firstWord, string secondWord);
    public virtual double GetUnnormalisedSimilarity(string firstWord, string secondWord);
    [CompilerGeneratedAttribute]
public AbstractSubstitutionCost get_DCostFunction();
    [CompilerGeneratedAttribute]
public void set_DCostFunction(AbstractSubstitutionCost value);
    [CompilerGeneratedAttribute]
public AbstractAffineGapCost get_GGapFunction();
    [CompilerGeneratedAttribute]
public void set_GGapFunction(AbstractAffineGapCost value);
    public virtual string get_LongDescriptionString();
    public virtual string get_ShortDescriptionString();
}
public enum SimMetrics.Net.SimMetricType : Enum {
    public int value__;
    public static SimMetricType BlockDistance;
    public static SimMetricType ChapmanLengthDeviation;
    public static SimMetricType ChapmanMeanLength;
    public static SimMetricType CosineSimilarity;
    public static SimMetricType EuclideanDistance;
    public static SimMetricType JaccardSimilarity;
    public static SimMetricType DiceSimilarity;
    public static SimMetricType Jaro;
    public static SimMetricType JaroWinkler;
    public static SimMetricType MatchingCoefficient;
    public static SimMetricType MongeElkan;
    public static SimMetricType Levenstein;
    public static SimMetricType NeedlemanWunch;
    public static SimMetricType OverlapCoefficient;
    public static SimMetricType QGramsDistance;
    public static SimMetricType SmithWaterman;
    public static SimMetricType SmithWatermanGotoh;
    public static SimMetricType SmithWatermanGotohWindowedAffine;
}
public class SimMetrics.Net.Utilities.AffineGapRange1To0Multiplier1Over3 : AbstractAffineGapCost {
    private static double CharExactMatchScore;
    private static double CharMismatchMatchScore;
    public double MaxCost { get; }
    public double MinCost { get; }
    public string ShortDescriptionString { get; }
    public virtual double GetCost(string textToGap, int stringIndexStartGap, int stringIndexEndGap);
    public virtual double get_MaxCost();
    public virtual double get_MinCost();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Utilities.AffineGapRange5To0Multiplier1 : AbstractAffineGapCost {
    private static double CharExactMatchScore;
    private static double CharMismatchMatchScore;
    public double MaxCost { get; }
    public double MinCost { get; }
    public string ShortDescriptionString { get; }
    public virtual double GetCost(string textToGap, int stringIndexStartGap, int stringIndexEndGap);
    public virtual double get_MaxCost();
    public virtual double get_MinCost();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Utilities.DummyStopTermHandler : object {
    public int NumberOfWords { get; }
    public string ShortDescriptionString { get; }
    public StringBuilder WordsAsBuffer { get; }
    public sealed virtual void AddWord(string termToAdd);
    public sealed virtual bool IsWord(string termToTest);
    public sealed virtual void RemoveWord(string termToRemove);
    public sealed virtual int get_NumberOfWords();
    public sealed virtual string get_ShortDescriptionString();
    public sealed virtual StringBuilder get_WordsAsBuffer();
}
public static class SimMetrics.Net.Utilities.MathFunctions : object {
    public static double MaxOf3(double firstNumber, double secondNumber, double thirdNumber);
    public static int MaxOf3(int firstNumber, int secondNumber, int thirdNumber);
    public static double MaxOf4(double firstNumber, double secondNumber, double thirdNumber, double fourthNumber);
    public static double MinOf3(double firstNumber, double secondNumber, double thirdNumber);
    public static int MinOf3(int firstNumber, int secondNumber, int thirdNumber);
}
public class SimMetrics.Net.Utilities.SubCostRange0To1 : AbstractSubstitutionCost {
    private static int CharExactMatchScore;
    private static double CharMismatchMatchScore;
    public double MaxCost { get; }
    public double MinCost { get; }
    public string ShortDescriptionString { get; }
    public virtual double GetCost(string firstWord, int firstWordIndex, string secondWord, int secondWordIndex);
    public virtual double get_MaxCost();
    public virtual double get_MinCost();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Utilities.SubCostRange1ToMinus2 : AbstractSubstitutionCost {
    private static int CharExactMatchScore;
    private static double CharMismatchMatchScore;
    public double MaxCost { get; }
    public double MinCost { get; }
    public string ShortDescriptionString { get; }
    public virtual double GetCost(string firstWord, int firstWordIndex, string secondWord, int secondWordIndex);
    public virtual double get_MaxCost();
    public virtual double get_MinCost();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Utilities.SubCostRange5ToMinus3 : AbstractSubstitutionCost {
    private Collection`1[] _approx;
    private static double CharApproximateMatchScore;
    private static double CharExactMatchScore;
    private static double CharMismatchMatchScore;
    public double MaxCost { get; }
    public double MinCost { get; }
    public string ShortDescriptionString { get; }
    public virtual double GetCost(string firstWord, int firstWordIndex, string secondWord, int secondWordIndex);
    public virtual double get_MaxCost();
    public virtual double get_MinCost();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Utilities.TokeniserQGram2 : AbstractTokeniserQGramN {
    public string ShortDescriptionString { get; }
    public virtual Collection`1<string> Tokenize(string word);
    public virtual string ToString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Utilities.TokeniserQGram2Extended : TokeniserQGram2 {
    public string ShortDescriptionString { get; }
    public virtual Collection`1<string> Tokenize(string word);
    public virtual string ToString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Utilities.TokeniserQGram3 : AbstractTokeniserQGramN {
    public string ShortDescriptionString { get; }
    public virtual Collection`1<string> Tokenize(string word);
    public virtual string ToString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Utilities.TokeniserQGram3Extended : TokeniserQGram3 {
    public string ShortDescriptionString { get; }
    public virtual Collection`1<string> Tokenize(string word);
    public virtual string ToString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Utilities.TokeniserSGram2 : TokeniserQGram2 {
    public string ShortDescriptionString { get; }
    public virtual string ToString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Utilities.TokeniserSGram2Extended : TokeniserQGram2Extended {
    public string ShortDescriptionString { get; }
    public virtual string ToString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Utilities.TokeniserSGram3 : TokeniserQGram3 {
    public string ShortDescriptionString { get; }
    public virtual string ToString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Utilities.TokeniserSGram3Extended : TokeniserQGram3Extended {
    public string ShortDescriptionString { get; }
    public virtual string ToString();
    public virtual string get_ShortDescriptionString();
}
public class SimMetrics.Net.Utilities.TokeniserUtilities`1 : object {
    [CompilerGeneratedAttribute]
private int <FirstSetTokenCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstTokenCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<T> <MergedTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SecondSetTokenCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SecondTokenCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<T> <TokenSet>k__BackingField;
    public int FirstSetTokenCount { get; private set; }
    public int FirstTokenCount { get; private set; }
    public Collection`1<T> MergedTokens { get; }
    public int SecondSetTokenCount { get; private set; }
    public int SecondTokenCount { get; private set; }
    public Collection`1<T> TokenSet { get; }
    private void AddTokens(Collection`1<T> tokenList);
    private void AddUniqueTokens(Collection`1<T> tokenList);
    private int CalculateUniqueTokensCount(Collection`1<T> tokenList);
    public int CommonSetTerms();
    public int CommonTerms();
    public Collection`1<T> CreateMergedList(Collection`1<T> firstTokens, Collection`1<T> secondTokens);
    public Collection`1<T> CreateMergedSet(Collection`1<T> firstTokens, Collection`1<T> secondTokens);
    public Collection`1<T> CreateSet(Collection`1<T> tokenList);
    public void MergeIntoSet(Collection`1<T> firstTokens);
    public void MergeLists(Collection`1<T> firstTokens);
    [CompilerGeneratedAttribute]
public int get_FirstSetTokenCount();
    [CompilerGeneratedAttribute]
private void set_FirstSetTokenCount(int value);
    [CompilerGeneratedAttribute]
public int get_FirstTokenCount();
    [CompilerGeneratedAttribute]
private void set_FirstTokenCount(int value);
    [CompilerGeneratedAttribute]
public Collection`1<T> get_MergedTokens();
    [CompilerGeneratedAttribute]
public int get_SecondSetTokenCount();
    [CompilerGeneratedAttribute]
private void set_SecondSetTokenCount(int value);
    [CompilerGeneratedAttribute]
public int get_SecondTokenCount();
    [CompilerGeneratedAttribute]
private void set_SecondTokenCount(int value);
    [CompilerGeneratedAttribute]
public Collection`1<T> get_TokenSet();
}
public class SimMetrics.Net.Utilities.TokeniserWhitespace : object {
    private TokeniserUtilities`1<string> _tokenUtilities;
    [CompilerGeneratedAttribute]
private string <Delimiters>k__BackingField;
    [CompilerGeneratedAttribute]
private ITermHandler <StopWordHandler>k__BackingField;
    public string Delimiters { get; }
    public string ShortDescriptionString { get; }
    public ITermHandler StopWordHandler { get; public set; }
    public sealed virtual Collection`1<string> Tokenize(string word);
    public sealed virtual Collection`1<string> TokenizeToSet(string word);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Delimiters();
    public sealed virtual string get_ShortDescriptionString();
    [CompilerGeneratedAttribute]
public sealed virtual ITermHandler get_StopWordHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StopWordHandler(ITermHandler value);
}
