[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class BytePolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-string-system-iformatprovider-system-byte@)")]
public static bool TryParse(string target, IFormatProvider provider, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-char))-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Byte& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class DoublePolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-string-system-iformatprovider-system-double@)")]
public static bool TryParse(string target, IFormatProvider provider, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-char))-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-byte))-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Double& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class EnumPolyfill : object {
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.getvalues")]
public static TEnum[] GetValues();
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.getnames")]
public static String[] GetNames();
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.parse#system-enum-parse-1(system-string-system-boolean)")]
public static TEnum Parse(string value);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.parse#system-enum-parse-1(system-string-system-boolean)")]
public static TEnum Parse(string value, bool ignoreCase);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.parse#system-enum-parse-1(system-readonlyspan((system-char)))")]
public static TEnum Parse(ReadOnlySpan`1<char> value);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.parse#system-enum-parse-1(system-readonlyspan((system-char))-system-boolean)")]
public static TEnum Parse(ReadOnlySpan`1<char> value, bool ignoreCase);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.tryparse#system-enum-tryparse-1(system-readonlyspan((system-char))-0@)")]
public static bool TryParse(ReadOnlySpan`1<char> value, TEnum& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.tryparse#system-enum-tryparse-1(system-readonlyspan((system-char))-system-boolean-0@)")]
public static bool TryParse(ReadOnlySpan`1<char> value, bool ignoreCase, TEnum& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class GuidPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.guid.tryparse#system-guid-tryparse(system-string-system-iformatprovider-system-guid@)")]
public static bool TryParse(string target, IFormatProvider provider, Guid& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Byte& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class IntPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-string-system-iformatprovider-system-int32@)")]
public static bool TryParse(string target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-char))-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Int32& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class LongPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-string-system-iformatprovider-system-int64@)")]
public static bool TryParse(string target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-char))-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Int32& result);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfill : object {
    private static long TicksPerMicrosecond;
    private static FieldInfo chunkCharsField;
    private static FieldInfo chunkPreviousField;
    private static FieldInfo chunkLengthField;
    private static UInt32 MaxSupportedTimeout;
    private static Polyfill();
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtoken.register#system-threading-cancellationtoken-register(system-action((system-object-system-threading-cancellationtoken))-system-object)")]
public static CancellationTokenRegistration Register(CancellationToken target, Action`2<object, CancellationToken> callback, object state);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtoken.unsaferegister#system-threading-cancellationtoken-unsaferegister(system-action((system-object-system-threading-cancellationtoken))-system-object)")]
public static CancellationTokenRegistration UnsafeRegister(CancellationToken target, Action`2<object, CancellationToken> callback, object state);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.cancelasync")]
public static Task CancelAsync(CancellationTokenSource target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.collectionextensions.asreadonly#system-collections-generic-collectionextensions-asreadonly-2(system-collections-generic-idictionary((-0-1)))")]
public static ReadOnlyDictionary`2<TKey, TValue> AsReadOnly(IDictionary`2<TKey, TValue> target);
    [IteratorStateMachineAttribute("Polyfill/<Index>d__4`1")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.index#system-linq-enumerable-index-1(system-collections-generic-ienumerable((-0)))")]
public static IEnumerable`1<ValueTuple`2<int, TSource>> Index(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.trygetnonenumeratedcount")]
public static bool TryGetNonEnumeratedCount(IEnumerable`1<TSource> target, Int32& count);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.aggregateby#system-linq-enumerable-aggregateby-3(system-collections-generic-ienumerable((-0))-system-func((-0-1))-system-func((-1-2))-system-func((-2-0-2))-system-collections-generic-iequalitycomparer((-1)))")]
public static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.aggregateby#system-linq-enumerable-aggregateby-3(system-collections-generic-ienumerable((-0))-system-func((-0-1))-2-system-func((-2-0-2))-system-collections-generic-iequalitycomparer((-1)))")]
public static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TKey, TAccumulate> seedSelector, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [IteratorStateMachineAttribute("Polyfill/<AggregateByIterator>d__8`3")]
private static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateByIterator(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [IteratorStateMachineAttribute("Polyfill/<AggregateByIterator>d__9`3")]
private static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateByIterator(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TKey, TAccumulate> seedSelector, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.chunk")]
public static IEnumerable`1<TSource[]> Chunk(IEnumerable`1<TSource> source, int size);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.countby")]
public static IEnumerable`1<KeyValuePair`2<TKey, int>> CountBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> keyComparer);
    [IteratorStateMachineAttribute("Polyfill/<CountByIterator>d__12`2")]
private static IEnumerable`1<KeyValuePair`2<TKey, int>> CountByIterator(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector, IEqualityComparer`1<TKey> comparer);
    private static Dictionary`2<TKey, int> BuildCountDictionary(IEnumerator`1<TSource> enumerator, Func`2<TSource, TKey> selector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.distinctby#system-linq-enumerable-distinctby-2(system-collections-generic-ienumerable((-0))-system-func((-0-1)))")]
public static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [IteratorStateMachineAttribute("Polyfill/<DistinctBy>d__15`2")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.distinctby#system-linq-enumerable-distinctby-2(system-collections-generic-ienumerable((-0))-system-func((-0-1))-system-collections-generic-iequalitycomparer((-1)))")]
public static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.elementat#system-linq-enumerable-elementat-1(system-collections-generic-ienumerable((-0))-system-index)")]
public static TSource ElementAt(IEnumerable`1<TSource> source, Index index);
    private static bool TryGetElementFromEnd(IEnumerable`1<TSource> source, int indexFromEnd, TSource& element);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.elementatordefault#system-linq-enumerable-elementatordefault-1(system-collections-generic-ienumerable((-0))-system-index)")]
public static TSource ElementAtOrDefault(IEnumerable`1<TSource> source, Index index);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource item);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource[] items);
    [IteratorStateMachineAttribute("Polyfill/<Except>d__21`1")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0))-system-collections-generic-iequalitycomparer((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource item, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0))-system-collections-generic-iequalitycomparer((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, IEqualityComparer`1<TSource> comparer, TSource[] items);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.exceptby#system-linq-enumerable-exceptby-2(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-1))-system-func((-0-1)))")]
public static IEnumerable`1<TSource> ExceptBy(IEnumerable`1<TSource> first, IEnumerable`1<TKey> second, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.exceptby#system-linq-enumerable-exceptby-2(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-1))-system-func((-0-1))-system-collections-generic-iequalitycomparer((-1)))")]
public static IEnumerable`1<TSource> ExceptBy(IEnumerable`1<TSource> first, IEnumerable`1<TKey> second, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [IteratorStateMachineAttribute("Polyfill/<ExceptByIterator>d__25`2")]
private static IEnumerable`1<TSource> ExceptByIterator(IEnumerable`1<TSource> first, IEnumerable`1<TKey> second, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.firstordefault#system-linq-enumerable-firstordefault-1(system-collections-generic-ienumerable((-0))-system-func((-0-system-boolean))-0)")]
public static TSource FirstOrDefault(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, TSource defaultValue);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.firstordefault#system-linq-enumerable-firstordefault-1(system-collections-generic-ienumerable((-0))-0)")]
public static TSource FirstOrDefault(IEnumerable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
private static TSource TryGetFirst(IEnumerable`1<TSource> source, Boolean& found);
    private static TSource TryGetFirstNonIterator(IEnumerable`1<TSource> source, Boolean& found);
    [ExtensionAttribute]
private static TSource TryGetFirst(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, Boolean& found);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.lastordefault#system-linq-enumerable-lastordefault-1(system-collections-generic-ienumerable((-0))-0)")]
public static TSource LastOrDefault(IEnumerable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.lastordefault#system-linq-enumerable-lastordefault-1(system-collections-generic-ienumerable((-0))-system-func((-0-system-boolean))-0)")]
public static TSource LastOrDefault(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, TSource defaultValue);
    [ExtensionAttribute]
private static TSource TryGetLast(IEnumerable`1<TSource> source, Boolean& found);
    private static TSource TryGetLastNonIterator(IEnumerable`1<TSource> source, Boolean& found);
    [ExtensionAttribute]
private static TSource TryGetLast(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, Boolean& found);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.maxby#system-linq-enumerable-maxby-2(system-collections-generic-ienumerable((-0))-system-func((-0-1)))")]
public static TSource MaxBy(IEnumerable`1<TSource> target, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.maxby#system-linq-enumerable-maxby-2(system-collections-generic-ienumerable((-0))-system-func((-0-1))-system-collections-generic-icomparer((-1)))")]
public static TSource MaxBy(IEnumerable`1<TSource> target, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.minby#system-linq-enumerable-minby-2(system-collections-generic-ienumerable((-0))-system-func((-0-1)))")]
public static TSource MinBy(IEnumerable`1<TSource> target, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.minby#system-linq-enumerable-minby-2(system-collections-generic-ienumerable((-0))-system-func((-0-1))-system-collections-generic-icomparer((-1)))")]
public static TSource MinBy(IEnumerable`1<TSource> target, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.singleordefault#system-linq-enumerable-singleordefault-1(system-collections-generic-ienumerable((-0))-system-func((-0-system-boolean))-0)")]
public static TSource SingleOrDefault(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, TSource defaultValue);
    [ExtensionAttribute]
private static TSource TryGetSingle(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, Boolean& found);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.singleordefault#system-linq-enumerable-singleordefault-1(system-collections-generic-ienumerable((-0))-0)")]
public static TSource SingleOrDefault(IEnumerable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
private static TSource TryGetSingle(IEnumerable`1<TSource> source, Boolean& found);
    [IteratorStateMachineAttribute("Polyfill/<Zip>d__44`3")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.zip#system-linq-enumerable-zip-3(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-1))-system-collections-generic-ienumerable((-2)))")]
public static IEnumerable`1<ValueTuple`3<TFirst, TSecond, TThird>> Zip(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, IEnumerable`1<TThird> third);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.collectionextensions.asreadonly#system-collections-generic-collectionextensions-asreadonly-1(system-collections-generic-ilist((-0)))")]
public static ReadOnlyCollection`1<T> AsReadOnly(IList`1<T> target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.collectionextensions.addrange")]
public static void AddRange(List`1<T> target, ReadOnlySpan`1<T> source);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.collectionextensions.insertrange")]
public static void InsertRange(List`1<T> target, int index, ReadOnlySpan`1<T> source);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.collectionextensions.copyto")]
public static void CopyTo(List`1<T> target, Span`1<T> destination);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.memoryextensions.enumeratelines#system-memoryextensions-enumeratelines(system-readonlyspan((system-char)))")]
public static SpanLineEnumerator EnumerateLines(ReadOnlySpan`1<char> target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.memoryextensions.enumeratelines#system-memoryextensions-enumeratelines(system-span((system-char)))")]
public static SpanLineEnumerator EnumerateLines(Span`1<char> target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timespan.nanoseconds")]
public static int Nanoseconds(TimeSpan target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.nanosecond")]
public static int Nanosecond(DateTime target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.nanosecond")]
public static int Nanosecond(DateTimeOffset target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timespan.microseconds")]
public static int Microseconds(TimeSpan target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.microsecond")]
public static int Microsecond(DateTime target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.microsecond")]
public static int Microsecond(DateTimeOffset target);
    [ExtensionAttribute]
private static long TicksComponent(TimeSpan target);
    [ExtensionAttribute]
private static long TicksComponent(DateTime target);
    [ExtensionAttribute]
private static long TicksComponent(DateTimeOffset target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.addmicroseconds")]
public static DateTime AddMicroseconds(DateTime target, double microseconds);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.addmicroseconds")]
public static DateTimeOffset AddMicroseconds(DateTimeOffset target, double microseconds);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.random.nextbytes#system-random-nextbytes(system-span((system-byte)))")]
public static void Shuffle(Random target, T[] values);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.random.nextbytes#system-random-nextbytes(system-span((system-byte)))")]
public static void Shuffle(Random target, Span`1<T> values);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedlist-2.getkeyatindex")]
public static TKey GetKeyAtIndex(SortedList`2<TKey, TValue> target, int index);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedlist-2.getvalueatindex")]
public static TValue GetValueAtIndex(SortedList`2<TKey, TValue> target, int index);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.copyto")]
public static void CopyTo(string target, Span`1<char> destination);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.trycopyto")]
public static bool TryCopyTo(string target, Span`1<char> destination);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.append#system-text-stringbuilder-append(system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder Append(StringBuilder target, AppendInterpolatedStringHandler& handler);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.append#system-text-stringbuilder-append(system-iformatprovider-system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder Append(StringBuilder target, IFormatProvider provider, AppendInterpolatedStringHandler& handler);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.appendline#system-text-stringbuilder-appendline(system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder AppendLine(StringBuilder target, AppendInterpolatedStringHandler& handler);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.appendline#system-text-stringbuilder-appendline(system-iformatprovider-system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder AppendLine(StringBuilder target, IFormatProvider provider, AppendInterpolatedStringHandler& handler);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.replace#system-text-stringbuilder-replace(system-readonlyspan((system-char))-system-readonlyspan((system-char)))")]
public static StringBuilder Replace(StringBuilder target, ReadOnlySpan`1<char> oldValue, ReadOnlySpan`1<char> newValue);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.replace#system-text-stringbuilder-replace(system-char-system-char-system-int32-system-int32)")]
public static StringBuilder Replace(StringBuilder target, ReadOnlySpan`1<char> oldValue, ReadOnlySpan`1<char> newValue, int startIndex, int count);
    private static FieldInfo GetStringBuilderField(string name);
    private static int GetChunkLength(StringBuilder stringBuilder);
    private static Char[] GetChunkChars(StringBuilder stringBuilder);
    private static StringBuilder GetChunkPrevious(StringBuilder stringBuilder);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.getchunks")]
public static ChunkEnumerator GetChunks(StringBuilder target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.waitasync#system-threading-tasks-task-waitasync(system-threading-cancellationtoken)")]
public static Task WaitAsync(Task target, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.waitasync#system-threading-tasks-task-waitasync(system-timespan)")]
public static Task WaitAsync(Task target, TimeSpan timeout);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.waitasync#system-threading-tasks-task-waitasync(system-timespan-system-threading-cancellationtoken)")]
public static Task WaitAsync(Task target, TimeSpan timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.waitasync#system-threading-tasks-task-waitasync(system-threading-cancellationtoken)")]
public static Task`1<TResult> WaitAsync(Task`1<TResult> target, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task-1.waitasync#system-threading-tasks-task-1-waitasync(system-timespan)")]
public static Task`1<TResult> WaitAsync(Task`1<TResult> target, TimeSpan timeout);
    [AsyncStateMachineAttribute("Polyfill/<WaitAsync>d__90`1")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task-1.waitasync#system-threading-tasks-task-1-waitasync(system-timespan-system-threading-cancellationtoken)")]
public static Task`1<TResult> WaitAsync(Task`1<TResult> target, TimeSpan timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.io.textreader.readtoendasync#system-io-textreader-readtoendasync(system-threading-cancellationtoken)")]
public static Task`1<string> ReadToEndAsync(TextReader target, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.io.textreader.readtoendasync#system-io-textreader-readlineasync(system-threading-cancellationtoken)")]
public static Task`1<string> ReadLineAsync(TextReader target, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.type.isgenericmethodparameter")]
public static bool IsGenericMethodParameter(Type target);
    [ExtensionAttribute]
public static bool IsAssignableTo(Type target);
    [ExtensionAttribute]
public static bool IsAssignableFrom(Type target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.type.getmemberwithsamemetadatadefinitionas")]
internal static MemberInfo GetMemberWithSameMetadataDefinitionAs(Type type, MemberInfo member);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-int32)")]
public static bool IsMatch(Regex target, ReadOnlySpan`1<char> input, int startat);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char)))")]
public static bool IsMatch(Regex target, ReadOnlySpan`1<char> input);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char)))")]
public static ValueMatchEnumerator EnumerateMatches(Regex target, ReadOnlySpan`1<char> input);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char))-system-int32)")]
public static ValueMatchEnumerator EnumerateMatches(Regex target, ReadOnlySpan`1<char> input, int startat);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<TKey, TAccumulate> <AggregateByIterator>g__PopulateDictionary|8_0(IEnumerator`1<TSource> enumerator, Func`2<TSource, TKey> keySelector, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<TKey, TAccumulate> <AggregateByIterator>g__PopulateDictionary|9_0(IEnumerator`1<TSource> enumerator, Func`2<TSource, TKey> keySelector, Func`2<TKey, TAccumulate> seedSelector, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [IteratorStateMachineAttribute("Polyfill/<<Chunk>g__ChunkIterator|10_0>d`2")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TSource[]> <Chunk>g__ChunkIterator|10_0(IEnumerable`1<TSource> source, int size);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class RegexPolyfill : object {
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions-system-timespan)")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern, RegexOptions options, TimeSpan timeout);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions)")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern, RegexOptions options);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string)")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char))-system-string)")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions-system-timespan)")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern, RegexOptions options, TimeSpan timeout);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions)")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern, RegexOptions options);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class SBytePolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-string-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(string target, IFormatProvider provider, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-char))-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, SByte& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class ShortPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-string-system-iformatprovider-system-int16@)")]
public static bool TryParse(string target, IFormatProvider provider, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-char))-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Int16& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class SimpleInfoName.TypeNameConverter : object {
    private static ConcurrentDictionary`2<ICustomAttributeProvider, string> infoCache;
    private static Dictionary`2<Type, Func`2<Type, Type>> redirects;
    private static ConcurrentDictionary`2<Type, string> cacheDictionary;
    private static TypeNameConverter();
    public static bool TryGetSimpleName(object info, String& name);
    [ExtensionAttribute]
public static bool TryGetSimpleName(ICustomAttributeProvider provider, String& name);
    [ExtensionAttribute]
public static string SimpleName(ConstructorInfo constructor);
    [ExtensionAttribute]
public static string SimpleName(FieldInfo field);
    [ExtensionAttribute]
private static string SimpleName(MemberInfo methodBase);
    [ExtensionAttribute]
public static string SimpleName(MethodInfo method);
    [ExtensionAttribute]
public static string SimpleName(ParameterInfo parameter);
    [ExtensionAttribute]
public static string SimpleName(PropertyInfo property);
    [NullableContextAttribute("2")]
public static void AddRedirect();
    public static void AddRedirect(Type from, Type to);
    public static void AddRedirect(Type from, Func`2<Type, Type> convert);
    [ExtensionAttribute]
public static string SimpleName(Type type);
    private static string Inner(Type type);
    [ExtensionAttribute]
private static bool IsAnonType(Type type);
    private static bool IsAnonType(string name);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class StringPolyfill : object {
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join(system-char-system-string())")]
public static string Join(char separator, String[] values);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join(system-char-system-object())")]
public static string Join(char separator, Object[] values);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join(system-char-system-string()-system-int32-system-int32)")]
public static string Join(char separator, String[] value, int startIndex, int count);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join-1(system-char-system-collections-generic-ienumerable((-0)))")]
public static string Join(char separator, IEnumerable`1<T> values);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2048")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.constantexpectedattribute")]
internal class System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute : Attribute {
    [CompilerGeneratedAttribute]
private object <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Max>k__BackingField;
    public object Min { get; public set; }
    public object Max { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(object value);
    [CompilerGeneratedAttribute]
public object get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.experimentalattribute")]
internal class System.Diagnostics.CodeAnalysis.ExperimentalAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DiagnosticId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UrlFormat>k__BackingField;
    public string DiagnosticId { get; }
    [NullableAttribute("2")]
public string UrlFormat { get; public set; }
    public ExperimentalAttribute(string diagnosticId);
    [CompilerGeneratedAttribute]
public string get_DiagnosticId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UrlFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UrlFormat(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("100")]
internal class System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresDynamicCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("32")]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2240")]
internal class System.Diagnostics.CodeAnalysis.UnscopedRefAttribute : Attribute {
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("108")]
internal class System.Diagnostics.StackTraceHiddenAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.UnreachableException : Exception {
    public UnreachableException(string message);
    public UnreachableException(string message, Exception innerException);
}
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.ispanformattable")]
internal interface System.ISpanFormattable {
    public abstract virtual bool TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerNonUserCodeAttribute]
[ExcludeFromCodeCoverageAttribute]
internal class System.Reflection.NullabilityInfo : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private NullabilityState <ReadState>k__BackingField;
    [CompilerGeneratedAttribute]
private NullabilityState <WriteState>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NullabilityInfo <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private NullabilityInfo[] <GenericTypeArguments>k__BackingField;
    public Type Type { get; }
    public NullabilityState ReadState { get; internal set; }
    public NullabilityState WriteState { get; internal set; }
    [NullableAttribute("2")]
public NullabilityInfo ElementType { get; }
    public NullabilityInfo[] GenericTypeArguments { get; }
    internal NullabilityInfo(Type type, NullabilityState readState, NullabilityState writeState, NullabilityInfo elementType, NullabilityInfo[] typeArguments);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public NullabilityState get_ReadState();
    [CompilerGeneratedAttribute]
internal void set_ReadState(NullabilityState value);
    [CompilerGeneratedAttribute]
public NullabilityState get_WriteState();
    [CompilerGeneratedAttribute]
internal void set_WriteState(NullabilityState value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NullabilityInfo get_ElementType();
    [CompilerGeneratedAttribute]
public NullabilityInfo[] get_GenericTypeArguments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerNonUserCodeAttribute]
[ExcludeFromCodeCoverageAttribute]
internal class System.Reflection.NullabilityInfoContext : object {
    private static string CompilerServicesNameSpace;
    private Dictionary`2<Module, NotAnnotatedStatus> _publicOnlyModules;
    private Dictionary`2<MemberInfo, NullabilityState> _context;
    [CompilerGeneratedAttribute]
private static bool <IsSupported>k__BackingField;
    internal static bool IsSupported { get; }
    private static NullabilityInfoContext();
    [CompilerGeneratedAttribute]
internal static bool get_IsSupported();
    [NullableContextAttribute("2")]
private Nullable`1<NullabilityState> GetNullableContext(MemberInfo memberInfo);
    public NullabilityInfo Create(ParameterInfo parameterInfo);
    private void CheckParameterMetadataType(ParameterInfo parameter, NullabilityInfo nullability);
    private static ParameterInfo GetMetaParameter(MethodBase metaMethod, ParameterInfo parameter);
    private static MethodInfo GetMethodMetadataDefinition(MethodInfo method);
    private static void CheckNullabilityAttributes(NullabilityInfo nullability, IList`1<CustomAttributeData> attributes);
    public NullabilityInfo Create(PropertyInfo propertyInfo);
    private bool IsPrivateOrInternalMethodAndAnnotationDisabled(MethodBase method);
    public NullabilityInfo Create(EventInfo eventInfo);
    public NullabilityInfo Create(FieldInfo fieldInfo);
    private static void EnsureIsSupported();
    private bool IsPrivateOrInternalFieldAndAnnotationDisabled(FieldInfo fieldInfo);
    private bool IsPublicOnly(bool isPrivate, bool isFamilyAndAssembly, bool isAssembly, Module module);
    private static NotAnnotatedStatus PopulateAnnotationInfo(IList`1<CustomAttributeData> customAttributes);
    private NullabilityInfo GetNullabilityInfo(MemberInfo memberInfo, Type type, NullableAttributeStateParser parser);
    private NullabilityInfo GetNullabilityInfo(MemberInfo memberInfo, Type type, NullableAttributeStateParser parser, Int32& index);
    private static NullableAttributeStateParser CreateParser(IList`1<CustomAttributeData> customAttributes);
    private void TryLoadGenericMetaTypeNullability(MemberInfo memberInfo, NullabilityInfo nullability);
    private static MemberInfo GetMemberMetadataDefinition(MemberInfo member);
    private static Type GetPropertyMetaType(PropertyInfo property);
    private void CheckGenericParameters(NullabilityInfo nullability, MemberInfo metaMember, Type metaType, Type reflectedType);
    private bool TryUpdateGenericParameterNullability(NullabilityInfo nullability, Type genericParameter, Type reflectedType);
    private bool TryUpdateGenericTypeParameterNullabilityFromReflectedType(NullabilityInfo nullability, Type genericParameter, Type context, Type reflectedType);
    private static bool TryPopulateNullabilityInfo(NullabilityInfo nullability, NullableAttributeStateParser parser, Int32& index);
    [NullableContextAttribute("2")]
private static NullabilityState TranslateByte(object value);
    private static NullabilityState TranslateByte(byte b);
    private static bool IsValueTypeOrValueTypeByRef(Type type);
    [CompilerGeneratedAttribute]
internal static int <TryUpdateGenericTypeParameterNullabilityFromReflectedType>g__CountNullabilityStates|29_0(Type type);
}
internal enum System.Reflection.NullabilityState : Enum {
    public int value__;
    public static NullabilityState Unknown;
    public static NullabilityState NotNull;
    public static NullabilityState Nullable;
}
[ExcludeFromCodeCoverageAttribute]
internal static class System.Runtime.CompilerServices.<DefaultInterpolatedStringHandler>FEC27CBDBA86A4AA8AD4C65CC37CF4F2256A5E0D8320EA4A59476E9E4A1AAC6C7__InternalMath : object {
    public static UInt32 Clamp(UInt32 value, UInt32 min, UInt32 max);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
private static void ThrowMinMaxException(T min, T max);
}
[ExcludeFromCodeCoverageAttribute]
internal static class System.Runtime.CompilerServices.<DefaultInterpolatedStringHandler>FEC27CBDBA86A4AA8AD4C65CC37CF4F2256A5E0D8320EA4A59476E9E4A1AAC6C7__SR : object {
    [NullableAttribute("1")]
public static string Argument_MinMaxValue;
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("1036")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.collectionbuilderattribute")]
internal class System.Runtime.CompilerServices.CollectionBuilderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BuilderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public Type BuilderType { get; }
    public string MethodName { get; }
    public CollectionBuilderAttribute(Type builderType, string methodName);
    [CompilerGeneratedAttribute]
public Type get_BuilderType();
    [CompilerGeneratedAttribute]
public string get_MethodName();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("32767")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.compilerfeaturerequiredattribute")]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public static string RefStructs;
    public static string RequiredMembers;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsOptional(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[InterpolatedStringHandlerAttribute]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.defaultinterpolatedstringhandler")]
internal class System.Runtime.CompilerServices.DefaultInterpolatedStringHandler : ValueType {
    private static int GuessedLengthPerHole;
    private static int MinimumArrayPoolLength;
    private static int StringMaxLength;
    private IFormatProvider _provider;
    private Char[] _arrayToReturnToPool;
    [NullableAttribute("0")]
private Span`1<char> _chars;
    private int _pos;
    private bool _hasCustomFormatter;
    [NullableAttribute("0")]
internal ReadOnlySpan`1<char> Text { get; }
    public DefaultInterpolatedStringHandler(int literalLength, int formattedCount);
    public DefaultInterpolatedStringHandler(int literalLength, int formattedCount, IFormatProvider provider);
    [NullableContextAttribute("0")]
public DefaultInterpolatedStringHandler(int literalLength, int formattedCount, IFormatProvider provider, Span`1<char> initialBuffer);
    internal static int GetDefaultLength(int literalLength, int formattedCount);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public string ToStringAndClear();
    internal void Clear();
    [NullableContextAttribute("0")]
internal ReadOnlySpan`1<char> get_Text();
    [NullableContextAttribute("1")]
public void AppendLiteral(string value);
    [NullableContextAttribute("1")]
public void AppendFormatted(T value);
    public void AppendFormatted(T value, string format);
    [NullableContextAttribute("1")]
public void AppendFormatted(T value, int alignment);
    public void AppendFormatted(T value, int alignment, string format);
    [NullableContextAttribute("0")]
public void AppendFormatted(ReadOnlySpan`1<char> value);
    [NullableContextAttribute("0")]
public void AppendFormatted(ReadOnlySpan`1<char> value, int alignment, string format);
    public void AppendFormatted(string value);
    private void AppendFormattedSlow(string value);
    public void AppendFormatted(string value, int alignment, string format);
    public void AppendFormatted(object value, int alignment, string format);
    [NullableContextAttribute("1")]
internal static bool HasCustomFormatter(IFormatProvider provider);
    private void AppendCustomFormatter(T value, string format);
    private void AppendOrInsertAlignmentIfNeeded(int startingPos, int alignment);
    private void EnsureCapacityForAdditionalChars(int additionalChars);
    [NullableContextAttribute("1")]
private void GrowThenCopyString(string value);
    [NullableContextAttribute("0")]
private void GrowThenCopySpan(ReadOnlySpan`1<char> value);
    private void Grow(int additionalChars);
    private void Grow();
    private void GrowCore(UInt32 requiredMinCapacity);
    [NullableContextAttribute("0")]
private bool TryFormatWithExtensions(T value, ReadOnlySpan`1<char> format);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("1")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.disableruntimemarshallingattribute")]
internal class System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute : Attribute {
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2048")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.interpolatedstringhandlerargumentattribute")]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    public String[] Arguments { get; }
    public InterpolatedStringHandlerArgumentAttribute(string argument);
    public InterpolatedStringHandlerArgumentAttribute(String[] arguments);
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
}
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.interpolatedstringhandlerargumentattribute")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("12")]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("396")]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.ScopedRefAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2047")]
internal class System.Runtime.Versioning.ObsoletedOSPlatformAttribute : OSPlatformAttribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    [NullableContextAttribute("1")]
public ObsoletedOSPlatformAttribute(string platformName);
    [NullableContextAttribute("1")]
public ObsoletedOSPlatformAttribute(string platformName, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal abstract class System.Runtime.Versioning.OSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PlatformName>k__BackingField;
    public string PlatformName { get; }
    protected OSPlatformAttribute(string platformName);
    [CompilerGeneratedAttribute]
public string get_PlatformName();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("448")]
internal class System.Runtime.Versioning.SupportedOSPlatformGuardAttribute : OSPlatformAttribute {
    public SupportedOSPlatformGuardAttribute(string platformName);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("448")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute : OSPlatformAttribute {
    public UnsupportedOSPlatformGuardAttribute(string platformName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
[InterpolatedStringHandlerAttribute]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Text.AppendInterpolatedStringHandler : ValueType {
    private static int StackallocCharBufferSizeLimit;
    [NullableAttribute("1")]
private StringBuilder _stringBuilder;
    private IFormatProvider _provider;
    private bool _hasCustomFormatter;
    [NullableContextAttribute("1")]
public AppendInterpolatedStringHandler(int literalLength, int formattedCount, StringBuilder stringBuilder);
    [NullableContextAttribute("1")]
public AppendInterpolatedStringHandler(int literalLength, int formattedCount, StringBuilder stringBuilder, IFormatProvider provider);
    [NullableContextAttribute("1")]
public void AppendLiteral(string value);
    [NullableContextAttribute("1")]
public void AppendFormatted(T value);
    public void AppendFormatted(T value, string format);
    [NullableContextAttribute("1")]
public void AppendFormatted(T value, int alignment);
    public void AppendFormatted(T value, int alignment, string format);
    private void AppendFormattedWithTempSpace(T value, int alignment, string format);
    [NullableContextAttribute("0")]
public void AppendFormatted(ReadOnlySpan`1<char> value);
    [NullableContextAttribute("0")]
public void AppendFormatted(ReadOnlySpan`1<char> value, int alignment, string format);
    public void AppendFormatted(string value);
    public void AppendFormatted(string value, int alignment, string format);
    public void AppendFormatted(object value, int alignment, string format);
    private void AppendCustomFormatter(T value, string format);
    [NullableContextAttribute("1")]
private static bool HasTryFormatExtension(Type type);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Text.RegularExpressions.RegexCache : object {
    private static int DefaultMaxCacheSize;
    private static int MaxExamineOnDrop;
    [NullableAttribute("2")]
private static Node modreq(System.Runtime.CompilerServices.IsVolatile) s_lastAccessed;
    private static ConcurrentDictionary`2<Key, Node> s_cacheDictionary;
    private static List`1<Node> s_cacheList;
    private static Random s_random;
    private static int s_maxCacheSize;
    private static object SyncObj { get; }
    public static int MaxCacheSize { get; public set; }
    private static RegexCache();
    private static object get_SyncObj();
    public static int get_MaxCacheSize();
    public static void set_MaxCacheSize(int value);
    public static Regex GetOrAdd(string pattern);
    public static Regex GetOrAdd(string pattern, RegexOptions options, TimeSpan matchTimeout);
    [NullableContextAttribute("2")]
private static Regex Get(Key key);
    private static void Add(Key key, Regex regex);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[IsReadOnlyAttribute]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Text.RegularExpressions.ValueMatch : ValueType {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Index { get; }
    public int Length { get; }
    internal ValueMatch(int index, int length);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public int get_Length();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Text.RegularExpressions.ValueMatchEnumerator : ValueType {
    private ReadOnlySpan`1<char> _input;
    private ValueMatch _current;
    private MatchCollection matchCollection;
    private int index;
    public ValueMatch Current { get; }
    internal ValueMatchEnumerator(Regex regex, ReadOnlySpan`1<char> input, int startAt);
    [IsReadOnlyAttribute]
public ValueMatchEnumerator GetEnumerator();
    public bool MoveNext();
    [IsReadOnlyAttribute]
public ValueMatch get_Current();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.spanlineenumerator")]
internal class System.Text.SpanLineEnumerator : ValueType {
    private ReadOnlySpan`1<char> remaining;
    private bool isActive;
    private ReadOnlySpan`1<char> newlines;
    [CompilerGeneratedAttribute]
private ReadOnlySpan`1<char> <Current>k__BackingField;
    public ReadOnlySpan`1<char> Current { get; private set; }
    internal SpanLineEnumerator(ReadOnlySpan`1<char> buffer);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ReadOnlySpan`1<char> get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(ReadOnlySpan`1<char> value);
    public SpanLineEnumerator GetEnumerator();
    public bool MoveNext();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class UIntPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-string-system-iformatprovider-system-uint32@)")]
public static bool TryParse(string target, IFormatProvider provider, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-char))-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, UInt32& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class ULongPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-string-system-iformatprovider-system-uint64@)")]
public static bool TryParse(string target, IFormatProvider provider, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-char))-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, UInt64& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class UShortPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-string-system-iformatprovider-system-uint16@)")]
public static bool TryParse(string target, IFormatProvider provider, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-char))-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, UInt16& result);
}
