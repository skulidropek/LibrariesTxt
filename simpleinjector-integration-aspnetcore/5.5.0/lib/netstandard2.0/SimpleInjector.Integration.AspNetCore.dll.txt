[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SimpleInjector.Integration.AspNetCore.OnePerNestedScopeServiceProviderAccessor : object {
    private Container container;
    private IServiceProviderAccessor decoratee;
    public IServiceProvider Current { get; }
    [NullableAttribute("2")]
private HttpContext RootScopeHttpContext { get; }
    [NullableAttribute("2")]
private Scope CurrentScope { get; }
    internal OnePerNestedScopeServiceProviderAccessor(Container container, IServiceProviderAccessor decoratee);
    public sealed virtual IServiceProvider get_Current();
    [NullableContextAttribute("2")]
private HttpContext get_RootScopeHttpContext();
    [NullableContextAttribute("2")]
private Scope get_CurrentScope();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SimpleInjector.Integration.AspNetCore.OnePerRequestServiceProviderAccessor : object {
    private IHttpContextAccessor accessor;
    private IServiceProviderAccessor decoratee;
    public IServiceProvider Current { get; }
    internal OnePerRequestServiceProviderAccessor(IHttpContextAccessor accessor, IServiceProviderAccessor decoratee);
    public sealed virtual IServiceProvider get_Current();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SimpleInjector.Integration.AspNetCore.RequestScopingStartupFilter : object {
    private Container container;
    public RequestScopingStartupFilter(Container container);
    public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
    private void ConfigureRequestScoping(IApplicationBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SimpleInjector.Integration.AspNetCore.SimpleInjectorAspNetCoreBuilder : object {
    [CompilerGeneratedAttribute]
private SimpleInjectorAddOptions <Options>k__BackingField;
    public SimpleInjectorAddOptions Options { get; }
    public IServiceCollection Services { get; }
    public Container Container { get; }
    internal SimpleInjectorAspNetCoreBuilder(SimpleInjectorAddOptions options);
    [CompilerGeneratedAttribute]
public SimpleInjectorAddOptions get_Options();
    public IServiceCollection get_Services();
    public Container get_Container();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class SimpleInjector.Integration.AspNetCore.SimpleInjectorHttpContextExtensions : object {
    private static object HttpContextKey;
    private static SimpleInjectorHttpContextExtensions();
    [ExtensionAttribute]
public static Scope GetScope(HttpContext httpContext);
    [ExtensionAttribute]
internal static HttpContext GetHttpContext(Scope scope);
    [ExtensionAttribute]
internal static void ConnectToScope(HttpContext httpContext, Scope scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SimpleInjector.Requires : object {
    internal static void IsNotNull(object instance, string paramName);
    internal static void IsNotOpenGenericType(Type type, string paramName);
    internal static void ServiceIsAssignableFromImplementation(Type service, Type implementation, string paramName);
    private static void ThrowSuppliedTypeDoesNotInheritFromOrImplement(Type service, Type implementation, string paramName);
}
public enum SimpleInjector.ServiceScopeReuseBehavior : Enum {
    public int value__;
    public static ServiceScopeReuseBehavior OnePerRequest;
    public static ServiceScopeReuseBehavior OnePerNestedScope;
    public static ServiceScopeReuseBehavior Unchanged;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class SimpleInjector.SimpleInjectorAddOptionsAspNetCoreExtensions : object {
    [ExtensionAttribute]
public static SimpleInjectorAspNetCoreBuilder AddAspNetCore(SimpleInjectorAddOptions options);
    [ExtensionAttribute]
public static SimpleInjectorAspNetCoreBuilder AddAspNetCore(SimpleInjectorAddOptions options, ServiceScopeReuseBehavior serviceScopeBehavior);
    private static IServiceProviderAccessor CreateServiceProviderAccessor(SimpleInjectorAddOptions options, ServiceScopeReuseBehavior serviceScopeBehavior);
    private static void AddContainerDisposalOnShutdown(SimpleInjectorAddOptions options, IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class SimpleInjector.SimpleInjectorAspNetCoreIntegrationExtensions : object {
    [ExtensionAttribute]
public static void UseSimpleInjectorAspNetRequestScoping(IServiceCollection services, Container container);
    [ExtensionAttribute]
public static T GetRequestService(IApplicationBuilder builder);
    [ExtensionAttribute]
public static T GetRequiredRequestService(IApplicationBuilder builder);
    [ExtensionAttribute]
public static IApplicationBuilder UseMiddleware(IApplicationBuilder app, Container container);
    [ExtensionAttribute]
public static IApplicationBuilder UseMiddleware(IApplicationBuilder app, Type middlewareType, Container container);
    private static IApplicationBuilder UseMiddlewareInternal(IApplicationBuilder app, Type middlewareType, Container container, string middlewareTypeArgName);
    [ExtensionAttribute]
private static IServiceProvider GetApplicationServices(IApplicationBuilder builder);
    private static IServiceProvider GetRequestServiceProvider(IServiceProvider appServices, Type serviceType);
    private static IHttpContextAccessor GetHttpContextAccessor(IServiceProvider appServices);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class SimpleInjector.SimpleInjectorUseOptionsAspNetCoreExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseSimpleInjector(IApplicationBuilder app, Container container);
    [ExtensionAttribute]
public static IApplicationBuilder UseSimpleInjector(IApplicationBuilder app, Container container, Action`1<SimpleInjectorUseOptions> setupAction);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
