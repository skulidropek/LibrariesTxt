[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SimpleInjector.Integration.ServiceCollection.DefaultServiceProviderAccessor : object {
    private Container container;
    [NullableAttribute("2")]
private InstanceProducer serviceScopeProducer;
    public IServiceProvider Current { get; }
    private IServiceScope CurrentServiceScope { get; }
    internal DefaultServiceProviderAccessor(Container container);
    public sealed virtual IServiceProvider get_Current();
    private IServiceScope get_CurrentServiceScope();
}
[NullableContextAttribute("1")]
public interface SimpleInjector.Integration.ServiceCollection.IServiceProviderAccessor {
    public IServiceProvider Current { get; }
    public abstract virtual IServiceProvider get_Current();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class SimpleInjector.Integration.ServiceCollection.Logger`1 : Logger`1<T> {
    public Logger`1(ILoggerFactory factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SimpleInjector.Integration.ServiceCollection.RootLogger : object {
    private ILogger logger;
    public RootLogger(ILoggerFactory factory);
    private sealed virtual override IDisposable Microsoft.Extensions.Logging.ILogger.BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class SimpleInjector.Integration.ServiceCollection.ServiceScopeProvider : object {
    [CompilerGeneratedAttribute]
private IServiceScope <ServiceScope>k__BackingField;
    public IServiceScope ServiceScope { get; public set; }
    [CompilerGeneratedAttribute]
public IServiceScope get_ServiceScope();
    [CompilerGeneratedAttribute]
public void set_ServiceScope(IServiceScope value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SimpleInjector.Integration.ServiceCollection.SimpleInjectorAddOptions : ApiObject {
    private IServiceProviderAccessor serviceProviderAccessor;
    [NullableAttribute("2")]
private IServiceScopeFactory serviceScopeFactory;
    [NullableAttribute("2")]
private IServiceProvider applicationServices;
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private Container <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoCrossWireFrameworkComponents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisposeContainerWithServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableHostedServiceResolution>k__BackingField;
    public IServiceCollection Services { get; }
    public Container Container { get; }
    public IServiceProviderAccessor ServiceProviderAccessor { get; public set; }
    public bool AutoCrossWireFrameworkComponents { get; public set; }
    public bool DisposeContainerWithServiceProvider { get; public set; }
    public bool EnableHostedServiceResolution { get; public set; }
    public IServiceScopeFactory ServiceScopeFactory { get; }
    public IServiceProvider ApplicationServices { get; }
    internal SimpleInjectorAddOptions(IServiceCollection services, Container container, IServiceProviderAccessor accessor);
    [CompilerGeneratedAttribute]
public IServiceCollection get_Services();
    [CompilerGeneratedAttribute]
public Container get_Container();
    public IServiceProviderAccessor get_ServiceProviderAccessor();
    public void set_ServiceProviderAccessor(IServiceProviderAccessor value);
    [CompilerGeneratedAttribute]
public bool get_AutoCrossWireFrameworkComponents();
    [CompilerGeneratedAttribute]
public void set_AutoCrossWireFrameworkComponents(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisposeContainerWithServiceProvider();
    [CompilerGeneratedAttribute]
public void set_DisposeContainerWithServiceProvider(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableHostedServiceResolution();
    [CompilerGeneratedAttribute]
public void set_EnableHostedServiceResolution(bool value);
    public IServiceScopeFactory get_ServiceScopeFactory();
    public IServiceProvider get_ApplicationServices();
    internal T GetRequiredFrameworkService();
    internal void SetServiceProviderIfNull(IServiceProvider provider);
    private InvalidOperationException GetServiceProviderNotSetException();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class SimpleInjector.Integration.ServiceCollection.StringLocalizer`1 : StringLocalizer`1<T> {
    public StringLocalizer`1(IStringLocalizerFactory factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class SimpleInjector.SimpleInjectorServiceCollectionExtensions : object {
    private static object AddOptionsKey;
    private static object AddLoggingKey;
    private static object AddLocalizationKey;
    private static SimpleInjectorServiceCollectionExtensions();
    [ExtensionAttribute]
public static IServiceCollection AddSimpleInjector(IServiceCollection services, Container container, Action`1<SimpleInjectorAddOptions> setupAction);
    [ExtensionAttribute]
public static IServiceProvider UseSimpleInjector(IServiceProvider provider, Container container);
    [ExtensionAttribute]
public static IServiceProvider UseSimpleInjector(IServiceProvider provider, Container container, Action`1<SimpleInjectorUseOptions> setupAction);
    [ExtensionAttribute]
public static SimpleInjectorAddOptions CrossWire(SimpleInjectorAddOptions options);
    [ExtensionAttribute]
public static SimpleInjectorAddOptions CrossWire(SimpleInjectorAddOptions options, Type serviceType);
    [ExtensionAttribute]
public static SimpleInjectorAddOptions AddLogging(SimpleInjectorAddOptions options);
    [ExtensionAttribute]
public static SimpleInjectorAddOptions AddLocalization(SimpleInjectorAddOptions options);
    private static void VerifyLoggerFactoryAvailable(IServiceCollection services);
    private static void VerifyStringLocalizerFactoryAvailable(IServiceCollection services);
    private static void RegisterServiceScope(SimpleInjectorAddOptions options);
    private static SimpleInjectorAddOptions GetOptions(Container container);
    private static void AddAutoCrossWiring(SimpleInjectorAddOptions options);
    private static void AddContainerDisposalOnShutdown(IServiceCollection services, SimpleInjectorAddOptions options);
    private static Lifestyle DetermineLifestyle(Type serviceType, IServiceCollection services);
    private static Registration CreateCrossWireRegistration(SimpleInjectorAddOptions options, IServiceProvider provider, Type serviceType, Lifestyle lifestyle);
    private static Func`1<object> BuildSingletonInstanceCreator(Type serviceType, IServiceProvider rootProvider);
    private static Func`1<object> BuildScopedInstanceCreator(Type serviceType, IServiceProviderAccessor accessor);
    private static object GetRequiredService(IServiceProvider provider, Type serviceType);
    private static ServiceDescriptor FindServiceDescriptor(IServiceCollection services, Type serviceType);
    private static Lifestyle ToLifestyle(ServiceLifetime lifetime);
    private static void AddSimpleInjectorOptions(Container container, SimpleInjectorAddOptions builder);
    private static void TrySetDefaultScopedLifestyle(Container container);
    private static void HookAspNetCoreHostHostedServiceServiceProviderInitialization(SimpleInjectorAddOptions options);
    private static void EnsureMethodOnlyCalledOnce(SimpleInjectorAddOptions options, string methodName, object key);
    private static Type GetGenericLoggerType();
    private static Type GetGenericLocalizerType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SimpleInjector.SimpleInjectorUseOptions : ApiObject {
    [CompilerGeneratedAttribute]
private IServiceProvider <ApplicationServices>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleInjectorAddOptions <Builder>k__BackingField;
    public bool AutoCrossWireFrameworkComponents { get; }
    public IServiceProvider ApplicationServices { get; }
    public Container Container { get; }
    public IServiceCollection Services { get; }
    internal SimpleInjectorAddOptions Builder { get; }
    internal SimpleInjectorUseOptions(SimpleInjectorAddOptions builder, IServiceProvider applicationServices);
    public bool get_AutoCrossWireFrameworkComponents();
    [CompilerGeneratedAttribute]
public IServiceProvider get_ApplicationServices();
    public Container get_Container();
    public IServiceCollection get_Services();
    [CompilerGeneratedAttribute]
internal SimpleInjectorAddOptions get_Builder();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
