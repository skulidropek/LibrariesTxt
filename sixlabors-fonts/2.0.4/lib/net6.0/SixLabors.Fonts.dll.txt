[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerStepThroughAttribute]
internal static class SixLabors.DebugGuard : object {
    [NullableContextAttribute("2")]
[ConditionalAttribute("DEBUG")]
public static void NotNull(TValue value, string parameterName);
    [NullableContextAttribute("2")]
[ConditionalAttribute("DEBUG")]
public static void NotNullOrWhiteSpace(string value, string paramName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeLessThan(TValue value, TValue max, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeLessThanOrEqualTo(TValue value, TValue max, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeGreaterThan(TValue value, TValue min, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeGreaterThanOrEqualTo(TValue value, TValue min, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeBetweenOrEqualTo(TValue value, TValue min, TValue max, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void IsTrue(bool target, string parameterName, string message);
    [ConditionalAttribute("DEBUG")]
public static void IsFalse(bool target, string parameterName, string message);
    [ConditionalAttribute("DEBUG")]
public static void MustBeSizedAtLeast(ReadOnlySpan`1<T> source, int minLength, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeSizedAtLeast(Span`1<T> source, int minLength, string parameterName);
    [NullableContextAttribute("2")]
[ConditionalAttribute("DEBUG")]
public static void DestinationShouldNotBeTooShort(ReadOnlySpan`1<TSource> source, Span`1<TDest> destination, string destinationParamName);
    [NullableContextAttribute("2")]
[ConditionalAttribute("DEBUG")]
public static void DestinationShouldNotBeTooShort(Span`1<TSource> source, Span`1<TDest> destination, string destinationParamName);
    private static void ThrowArgumentException(string message, string parameterName);
    private static void ThrowArgumentOutOfRangeException(string parameterName, string message);
}
[DefaultMemberAttribute("Item")]
internal class SixLabors.Fonts.ArrayBuilder`1 : ValueType {
    private static int DefaultCapacity;
    private static int MaxCoreClrArrayLength;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private T[] data;
    private int size;
    public int Length { get; public set; }
    public T& Item { get; }
    public ArrayBuilder`1(int capacity);
    [IsReadOnlyAttribute]
public int get_Length();
    public void set_Length(int value);
    [IsReadOnlyAttribute]
public T& get_Item(int index);
    public void Add(T item);
    public ArraySlice`1<T> Add(int length, bool clear);
    public ArraySlice`1<T> Add(ReadOnlyArraySlice`1& value);
    public void Clear();
    private void EnsureCapacity(int min);
    public ArraySlice`1<T> AsSlice();
    [IsReadOnlyAttribute]
public ArraySlice`1<T> AsSlice(int length);
    [IsReadOnlyAttribute]
public ArraySlice`1<T> AsSlice(int start, int length);
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class SixLabors.Fonts.ArraySlice`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private T[] data;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public static ArraySlice`1<T> Empty { get; }
    public int Start { get; }
    public int Length { get; }
    public Span`1<T> Span { get; }
    public T& Item { get; }
    public ArraySlice`1(T[] data);
    public ArraySlice`1(T[] data, int start, int length);
    public static ArraySlice`1<T> get_Empty();
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public int get_Length();
    public Span`1<T> get_Span();
    public T& get_Item(int index);
    public static ReadOnlyArraySlice`1<T> op_Implicit(ArraySlice`1<T> slice);
    public static ArraySlice`1<T> op_Implicit(T[] array);
    public void CopyTo(ArraySlice`1<T> destination);
    public void Fill(T value);
    public ArraySlice`1<T> Slice(int start, int length);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Start: {StartOfStream}, Position: {BaseStream.Position}")]
internal class SixLabors.Fonts.BigEndianBinaryReader : object {
    private Byte[] buffer;
    private bool leaveOpen;
    [CompilerGeneratedAttribute]
private long <StartOfStream>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <BaseStream>k__BackingField;
    private long StartOfStream { get; }
    public Stream BaseStream { get; }
    public BigEndianBinaryReader(Stream stream, bool leaveOpen);
    [CompilerGeneratedAttribute]
private long get_StartOfStream();
    [CompilerGeneratedAttribute]
public Stream get_BaseStream();
    public void Seek(long offset, SeekOrigin origin);
    public byte ReadByte();
    public sbyte ReadSByte();
    public float ReadF2dot14();
    public short ReadInt16();
    [NullableContextAttribute("0")]
public TEnum ReadInt16();
    public short ReadFWORD();
    public Int16[] ReadFWORDArray(int length);
    public ushort ReadUFWORD();
    public float ReadFixed();
    public int ReadInt32();
    public long ReadInt64();
    public ushort ReadUInt16();
    public ushort ReadOffset16();
    [NullableContextAttribute("0")]
public TEnum ReadUInt16();
    public UInt16[] ReadUInt16Array(int length);
    [NullableContextAttribute("0")]
public void ReadUInt16Array(Span`1<ushort> buffer);
    public UInt32[] ReadUInt32Array(int length);
    public Byte[] ReadUInt8Array(int length);
    public Int16[] ReadInt16Array(int length);
    [NullableContextAttribute("0")]
public void ReadInt16Array(Span`1<short> buffer);
    public byte ReadUInt8();
    public int ReadUInt24();
    public UInt32 ReadUInt32();
    public UInt32 ReadOffset32();
    public Byte[] ReadBytes(int count);
    public string ReadString(int bytesToRead, Encoding encoding);
    public string ReadTag();
    public int ReadOffset(int size);
    private void ReadInternal(Byte[] data, int size);
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
private static bool TryConvert(T input, TEnum& value);
}
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.Bounds : ValueType {
    public static Bounds Empty;
    [CompilerGeneratedAttribute]
private Vector2 <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector2 <Max>k__BackingField;
    public Vector2 Min { get; }
    public Vector2 Max { get; }
    public Bounds(Vector2 min, Vector2 max);
    public Bounds(float minX, float minY, float maxX, float maxY);
    [CompilerGeneratedAttribute]
public Vector2 get_Min();
    [CompilerGeneratedAttribute]
public Vector2 get_Max();
    public static bool op_Equality(Bounds left, Bounds right);
    public static bool op_Inequality(Bounds left, Bounds right);
    public Vector2 Size();
    [NullableContextAttribute("1")]
public static Bounds Load(BigEndianBinaryReader reader);
    [NullableContextAttribute("1")]
public static Bounds Load(IList`1<ControlPoint> controlPoints);
    public static Bounds Transform(Bounds& bounds, Matrix3x2 matrix);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Bounds other);
    public virtual int GetHashCode();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class SixLabors.Fonts.Buffer`1 : ValueType {
    private int length;
    [NullableAttribute("1")]
private Byte[] buffer;
    private Span`1<T> span;
    private bool isDisposed;
    [CompilerGeneratedAttribute]
private Memory`1<T> <Memory>k__BackingField;
    public Memory`1<T> Memory { get; }
    public Buffer`1(int length);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Memory`1<T> get_Memory();
    [IsReadOnlyAttribute]
public Span`1<T> GetSpan();
    public void Dispose();
    private static void ThrowObjectDisposedException();
}
internal class SixLabors.Fonts.ByteMemoryManager`1 : MemoryManager`1<T> {
    private Memory`1<byte> memory;
    public ByteMemoryManager`1(Memory`1<byte> memory);
    protected virtual void Dispose(bool disposing);
    public virtual Span`1<T> GetSpan();
    public virtual MemoryHandle Pin(int elementIndex);
    public virtual void Unpin();
}
[FlagsAttribute]
public enum SixLabors.Fonts.ColorFontSupport : Enum {
    public int value__;
    public static ColorFontSupport None;
    public static ColorFontSupport MicrosoftColrFormat;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.FileFontMetrics : FontMetrics {
    private Lazy`1<StreamFontMetrics> fontMetrics;
    [CompilerGeneratedAttribute]
private FontDescription <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public FontDescription Description { get; }
    public string Path { get; }
    public ushort UnitsPerEm { get; }
    public float ScaleFactor { get; }
    public HorizontalMetrics HorizontalMetrics { get; }
    public VerticalMetrics VerticalMetrics { get; }
    public short SubscriptXSize { get; }
    public short SubscriptYSize { get; }
    public short SubscriptXOffset { get; }
    public short SubscriptYOffset { get; }
    public short SuperscriptXSize { get; }
    public short SuperscriptYSize { get; }
    public short SuperscriptXOffset { get; }
    public short SuperscriptYOffset { get; }
    public short StrikeoutSize { get; }
    public short StrikeoutPosition { get; }
    public short UnderlinePosition { get; }
    public short UnderlineThickness { get; }
    public float ItalicAngle { get; }
    public FileFontMetrics(string path);
    public FileFontMetrics(string path, long offset);
    internal FileFontMetrics(FontDescription description, string path, long offset);
    [CompilerGeneratedAttribute]
public virtual FontDescription get_Description();
    [CompilerGeneratedAttribute]
public string get_Path();
    public virtual ushort get_UnitsPerEm();
    public virtual float get_ScaleFactor();
    public virtual HorizontalMetrics get_HorizontalMetrics();
    public virtual VerticalMetrics get_VerticalMetrics();
    public virtual short get_SubscriptXSize();
    public virtual short get_SubscriptYSize();
    public virtual short get_SubscriptXOffset();
    public virtual short get_SubscriptYOffset();
    public virtual short get_SuperscriptXSize();
    public virtual short get_SuperscriptYSize();
    public virtual short get_SuperscriptXOffset();
    public virtual short get_SuperscriptYOffset();
    public virtual short get_StrikeoutSize();
    public virtual short get_StrikeoutPosition();
    public virtual short get_UnderlinePosition();
    public virtual short get_UnderlineThickness();
    public virtual float get_ItalicAngle();
    internal virtual bool TryGetGlyphId(CodePoint codePoint, UInt16& glyphId);
    internal virtual bool TryGetGlyphId(CodePoint codePoint, Nullable`1<CodePoint> nextCodePoint, UInt16& glyphId, Boolean& skipNextCodePoint);
    internal virtual bool TryGetGlyphClass(ushort glyphId, Nullable`1& glyphClass);
    internal virtual bool TryGetMarkAttachmentClass(ushort glyphId, Nullable`1& markAttachmentClass);
    public virtual bool TryGetGlyphMetrics(CodePoint codePoint, TextAttributes textAttributes, TextDecorations textDecorations, LayoutMode layoutMode, ColorFontSupport support, IReadOnlyList`1& metrics);
    internal virtual IReadOnlyList`1<GlyphMetrics> GetGlyphMetrics(CodePoint codePoint, ushort glyphId, TextAttributes textAttributes, TextDecorations textDecorations, LayoutMode layoutMode, ColorFontSupport support);
    public virtual IReadOnlyList`1<CodePoint> GetAvailableCodePoints();
    [NullableContextAttribute("2")]
internal virtual bool TryGetGSubTable(GSubTable& gSubTable);
    internal virtual void ApplySubstitution(GlyphSubstitutionCollection collection);
    internal virtual bool TryGetKerningOffset(ushort currentId, ushort nextId, Vector2& vector);
    internal virtual void UpdatePositions(GlyphPositioningCollection collection);
    public static FileFontMetrics[] LoadFontCollection(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.Fonts.Font : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<FontMetrics> metrics;
    private Lazy`1<string> fontName;
    [CompilerGeneratedAttribute]
private FontFamily <Family>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private FontStyle <RequestedStyle>k__BackingField;
    public FontFamily Family { get; }
    public string Name { get; }
    public float Size { get; }
    public FontMetrics FontMetrics { get; }
    public bool IsBold { get; }
    public bool IsItalic { get; }
    internal FontStyle RequestedStyle { get; }
    public Font(FontFamily family, float size);
    public Font(FontFamily family, float size, FontStyle style);
    public Font(Font prototype, FontStyle style);
    public Font(Font prototype, float size, FontStyle style);
    public Font(Font prototype, float size);
    [CompilerGeneratedAttribute]
public FontFamily get_Family();
    public string get_Name();
    [CompilerGeneratedAttribute]
public float get_Size();
    public FontMetrics get_FontMetrics();
    public bool get_IsBold();
    public bool get_IsItalic();
    [CompilerGeneratedAttribute]
internal FontStyle get_RequestedStyle();
    [NullableContextAttribute("2")]
public bool TryGetPath(String& path);
    [NullableContextAttribute("2")]
public bool TryGetGlyphs(CodePoint codePoint, IReadOnlyList`1& glyphs);
    [NullableContextAttribute("2")]
public bool TryGetGlyphs(CodePoint codePoint, ColorFontSupport support, IReadOnlyList`1& glyphs);
    [NullableContextAttribute("2")]
public bool TryGetGlyphs(CodePoint codePoint, TextAttributes textAttributes, ColorFontSupport support, IReadOnlyList`1& glyphs);
    [NullableContextAttribute("2")]
public bool TryGetGlyphs(CodePoint codePoint, TextAttributes textAttributes, LayoutMode layoutMode, ColorFontSupport support, IReadOnlyList`1& glyphs);
    [NullableContextAttribute("2")]
public bool TryGetGlyphs(CodePoint codePoint, TextAttributes textAttributes, TextDecorations textDecorations, LayoutMode layoutMode, ColorFontSupport support, IReadOnlyList`1& glyphs);
    public bool TryGetKerningOffset(Glyph current, Glyph next, float dpi, Vector2& vector);
    private string LoadFontName();
    [NullableContextAttribute("2")]
private FontMetrics LoadInstanceInternal();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.Fonts.FontCollection : object {
    private HashSet`1<string> searchDirectories;
    private HashSet`1<FontMetrics> metricsCollection;
    public IEnumerable`1<FontFamily> Families { get; }
    internal FontCollection(IReadOnlyCollection`1<string> searchDirectories);
    public sealed virtual IEnumerable`1<FontFamily> get_Families();
    public sealed virtual FontFamily Add(string path);
    public sealed virtual FontFamily Add(string path, FontDescription& description);
    public sealed virtual FontFamily Add(Stream stream);
    public sealed virtual FontFamily Add(Stream stream, FontDescription& description);
    public sealed virtual IEnumerable`1<FontFamily> AddCollection(string path);
    public sealed virtual IEnumerable`1<FontFamily> AddCollection(string path, IEnumerable`1& descriptions);
    public sealed virtual IEnumerable`1<FontFamily> AddCollection(Stream stream);
    public sealed virtual IEnumerable`1<FontFamily> AddCollection(Stream stream, IEnumerable`1& descriptions);
    public sealed virtual FontFamily Get(string name);
    public sealed virtual bool TryGet(string name, FontFamily& family);
    public sealed virtual FontFamily Add(string path, CultureInfo culture);
    public sealed virtual FontFamily Add(string path, CultureInfo culture, FontDescription& description);
    public sealed virtual FontFamily Add(Stream stream, CultureInfo culture);
    public sealed virtual FontFamily Add(Stream stream, CultureInfo culture, FontDescription& description);
    public sealed virtual IEnumerable`1<FontFamily> AddCollection(string path, CultureInfo culture);
    public sealed virtual IEnumerable`1<FontFamily> AddCollection(string path, CultureInfo culture, IEnumerable`1& descriptions);
    public sealed virtual IEnumerable`1<FontFamily> AddCollection(Stream stream, CultureInfo culture);
    public sealed virtual IEnumerable`1<FontFamily> AddCollection(Stream stream, CultureInfo culture, IEnumerable`1& descriptions);
    public sealed virtual IEnumerable`1<FontFamily> GetByCulture(CultureInfo culture);
    public sealed virtual FontFamily Get(string name, CultureInfo culture);
    public sealed virtual bool TryGet(string name, CultureInfo culture, FontFamily& family);
    private sealed virtual override FontFamily SixLabors.Fonts.IFontMetricsCollection.AddMetrics(FontMetrics metrics, CultureInfo culture);
    private sealed virtual override void SixLabors.Fonts.IFontMetricsCollection.AddMetrics(FontMetrics metrics);
    private sealed virtual override bool SixLabors.Fonts.IReadOnlyFontMetricsCollection.TryGetMetrics(string name, CultureInfo culture, FontStyle style, FontMetrics& metrics);
    private sealed virtual override IEnumerable`1<FontMetrics> SixLabors.Fonts.IReadOnlyFontMetricsCollection.GetAllMetrics(string name, CultureInfo culture);
    private sealed virtual override IEnumerable`1<FontStyle> SixLabors.Fonts.IReadOnlyFontMetricsCollection.GetAllStyles(string name, CultureInfo culture);
    private sealed virtual override IEnumerator`1<FontMetrics> SixLabors.Fonts.IReadOnlyFontMetricsCollection.GetEnumerator();
    internal void AddSearchDirectories(IEnumerable`1<string> directories);
    private FontFamily AddImpl(string path, CultureInfo culture, FontDescription& description);
    private FontFamily AddImpl(Stream stream, CultureInfo culture, FontDescription& description);
    private IEnumerable`1<FontFamily> AddCollectionImpl(string path, CultureInfo culture, IEnumerable`1& descriptions);
    private IEnumerable`1<FontFamily> AddCollectionImpl(Stream stream, CultureInfo culture, IEnumerable`1& descriptions);
    private IEnumerable`1<FontFamily> FamiliesByCultureImpl(CultureInfo culture);
    private bool TryGetImpl(string name, CultureInfo culture, FontFamily& family);
    private FontFamily GetImpl(string name, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class SixLabors.Fonts.FontCollectionExtensions : object {
    [ExtensionAttribute]
public static FontCollection AddSystemFonts(FontCollection collection);
    [ExtensionAttribute]
public static FontCollection AddSystemFonts(FontCollection collection, Predicate`1<FontMetrics> match);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.Fonts.FontDescription : object {
    private NameTable nameTable;
    [CompilerGeneratedAttribute]
private FontStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontNameInvariantCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontFamilyInvariantCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontSubFamilyNameInvariantCulture>k__BackingField;
    public FontStyle Style { get; }
    public string FontNameInvariantCulture { get; }
    public string FontFamilyInvariantCulture { get; }
    public string FontSubFamilyNameInvariantCulture { get; }
    [NullableContextAttribute("2")]
internal FontDescription(NameTable nameTable, OS2Table os2, HeadTable head);
    [CompilerGeneratedAttribute]
public FontStyle get_Style();
    [CompilerGeneratedAttribute]
public string get_FontNameInvariantCulture();
    [CompilerGeneratedAttribute]
public string get_FontFamilyInvariantCulture();
    [CompilerGeneratedAttribute]
public string get_FontSubFamilyNameInvariantCulture();
    public string FontName(CultureInfo culture);
    public string FontFamily(CultureInfo culture);
    public string FontSubFamilyName(CultureInfo culture);
    public string GetNameById(CultureInfo culture, KnownNameIds nameId);
    public static FontDescription LoadDescription(string path);
    public static FontDescription LoadDescription(Stream stream);
    internal static FontDescription LoadDescription(FontReader reader);
    public static FontDescription[] LoadFontCollectionDescriptions(string path);
    public static FontDescription[] LoadFontCollectionDescriptions(Stream stream);
    [NullableContextAttribute("2")]
private static FontStyle ConvertStyle(OS2Table os2, HeadTable head);
}
public class SixLabors.Fonts.FontException : Exception {
    [NullableContextAttribute("1")]
public FontException(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.Fonts.FontFamily : ValueType {
    private IReadOnlyFontMetricsCollection collection;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    public string Name { get; }
    public CultureInfo Culture { get; }
    internal FontFamily(string name, IReadOnlyFontMetricsCollection collection, CultureInfo culture);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    public static bool op_Equality(FontFamily left, FontFamily right);
    public static bool op_Inequality(FontFamily left, FontFamily right);
    [IsReadOnlyAttribute]
public Font CreateFont(float size);
    [IsReadOnlyAttribute]
public Font CreateFont(float size, FontStyle style);
    [IsReadOnlyAttribute]
public IEnumerable`1<FontStyle> GetAvailableStyles();
    public bool TryGetPaths(IEnumerable`1& paths);
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
public bool TryGetMetrics(FontStyle style, FontMetrics& metrics);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(FontFamily other);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.Fonts.FontFamilyNotFoundException : FontException {
    [CompilerGeneratedAttribute]
private string <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <SearchDirectories>k__BackingField;
    public string FontFamily { get; }
    public IReadOnlyCollection`1<string> SearchDirectories { get; }
    public FontFamilyNotFoundException(string family);
    public FontFamilyNotFoundException(string family, IReadOnlyCollection`1<string> searchDirectories);
    [CompilerGeneratedAttribute]
public string get_FontFamily();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_SearchDirectories();
    private static string GetMessage(string family, IReadOnlyCollection`1<string> searchDirectories);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class SixLabors.Fonts.FontMetrics : object {
    public FontDescription Description { get; }
    public ushort UnitsPerEm { get; }
    public float ScaleFactor { get; }
    public HorizontalMetrics HorizontalMetrics { get; }
    public VerticalMetrics VerticalMetrics { get; }
    public short SubscriptXSize { get; }
    public short SubscriptYSize { get; }
    public short SubscriptXOffset { get; }
    public short SubscriptYOffset { get; }
    public short SuperscriptXSize { get; }
    public short SuperscriptYSize { get; }
    public short SuperscriptXOffset { get; }
    public short SuperscriptYOffset { get; }
    public short StrikeoutSize { get; }
    public short StrikeoutPosition { get; }
    public short UnderlinePosition { get; }
    public short UnderlineThickness { get; }
    public float ItalicAngle { get; }
    public abstract virtual FontDescription get_Description();
    public abstract virtual ushort get_UnitsPerEm();
    public abstract virtual float get_ScaleFactor();
    public abstract virtual HorizontalMetrics get_HorizontalMetrics();
    public abstract virtual VerticalMetrics get_VerticalMetrics();
    public abstract virtual short get_SubscriptXSize();
    public abstract virtual short get_SubscriptYSize();
    public abstract virtual short get_SubscriptXOffset();
    public abstract virtual short get_SubscriptYOffset();
    public abstract virtual short get_SuperscriptXSize();
    public abstract virtual short get_SuperscriptYSize();
    public abstract virtual short get_SuperscriptXOffset();
    public abstract virtual short get_SuperscriptYOffset();
    public abstract virtual short get_StrikeoutSize();
    public abstract virtual short get_StrikeoutPosition();
    public abstract virtual short get_UnderlinePosition();
    public abstract virtual short get_UnderlineThickness();
    public abstract virtual float get_ItalicAngle();
    internal abstract virtual bool TryGetGlyphId(CodePoint codePoint, UInt16& glyphId);
    internal abstract virtual bool TryGetGlyphId(CodePoint codePoint, Nullable`1<CodePoint> nextCodePoint, UInt16& glyphId, Boolean& skipNextCodePoint);
    internal abstract virtual bool TryGetGlyphClass(ushort glyphId, Nullable`1& glyphClass);
    internal abstract virtual bool TryGetMarkAttachmentClass(ushort glyphId, Nullable`1& markAttachmentClass);
    public abstract virtual bool TryGetGlyphMetrics(CodePoint codePoint, TextAttributes textAttributes, TextDecorations textDecorations, LayoutMode layoutMode, ColorFontSupport support, IReadOnlyList`1& metrics);
    public abstract virtual IReadOnlyList`1<CodePoint> GetAvailableCodePoints();
    internal abstract virtual IReadOnlyList`1<GlyphMetrics> GetGlyphMetrics(CodePoint codePoint, ushort glyphId, TextAttributes textAttributes, TextDecorations textDecorations, LayoutMode layoutMode, ColorFontSupport support);
    [NullableContextAttribute("2")]
internal abstract virtual bool TryGetGSubTable(GSubTable& gSubTable);
    internal abstract virtual void ApplySubstitution(GlyphSubstitutionCollection collection);
    internal abstract virtual bool TryGetKerningOffset(ushort currentId, ushort nextId, Vector2& vector);
    internal abstract virtual void UpdatePositions(GlyphPositioningCollection collection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.FontReader : object {
    private Stream stream;
    private Dictionary`2<Type, Table> loadedTables;
    private TableLoader loader;
    [CompilerGeneratedAttribute]
private TableFormat <TableFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, TableHeader> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompressedTableData>k__BackingField;
    [CompilerGeneratedAttribute]
private OutlineType <OutlineType>k__BackingField;
    public TableFormat TableFormat { get; }
    public IReadOnlyDictionary`2<string, TableHeader> Headers { get; }
    public bool CompressedTableData { get; }
    public OutlineType OutlineType { get; }
    internal FontReader(Stream stream, TableLoader loader);
    public FontReader(Stream stream);
    [CompilerGeneratedAttribute]
public TableFormat get_TableFormat();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, TableHeader> get_Headers();
    [CompilerGeneratedAttribute]
public bool get_CompressedTableData();
    [CompilerGeneratedAttribute]
public OutlineType get_OutlineType();
    [NullableContextAttribute("0")]
public TTableType TryGetTable();
    public TTableType GetTable();
    public TableHeader GetHeader(string tag);
    public BigEndianBinaryReader GetReaderAtTablePosition(string tableName);
    public bool TryGetReaderAtTablePosition(string tableName, BigEndianBinaryReader& reader);
    [NullableContextAttribute("2")]
public bool TryGetReaderAtTablePosition(string tableName, BigEndianBinaryReader& reader, TableHeader& header);
}
[IsReadOnlyAttribute]
public class SixLabors.Fonts.FontRectangle : ValueType {
    public static FontRectangle Empty;
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    public float X { get; }
    public float Y { get; }
    public float Width { get; }
    public float Height { get; }
    [EditorBrowsableAttribute("1")]
public Vector2 Location { get; }
    [EditorBrowsableAttribute("1")]
public Vector2 Size { get; }
    [EditorBrowsableAttribute("1")]
public bool IsEmpty { get; }
    public float Top { get; }
    public float Right { get; }
    public float Bottom { get; }
    public float Left { get; }
    public FontRectangle(float x, float y, float width, float height);
    public FontRectangle(Vector2 point, Vector2 size);
    [CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public float get_Width();
    [CompilerGeneratedAttribute]
public float get_Height();
    public Vector2 get_Location();
    public Vector2 get_Size();
    public bool get_IsEmpty();
    public float get_Top();
    public float get_Right();
    public float get_Bottom();
    public float get_Left();
    public static bool op_Equality(FontRectangle& left, FontRectangle& right);
    public static bool op_Inequality(FontRectangle& left, FontRectangle& right);
    public static FontRectangle FromLTRB(float left, float top, float right, float bottom);
    public static Vector2 Center(FontRectangle& rectangle);
    public static FontRectangle Intersect(FontRectangle& a, FontRectangle& b);
    public static FontRectangle Inflate(FontRectangle& rectangle, float x, float y);
    public static FontRectangle Transform(FontRectangle& rectangle, Matrix3x2 matrix);
    public static FontRectangle Union(FontRectangle& a, FontRectangle& b);
    public void Deconstruct(Single& x, Single& y, Single& width, Single& height);
    public FontRectangle Intersect(FontRectangle& rectangle);
    public FontRectangle Inflate(float width, float height);
    public FontRectangle Inflate(Vector2 size);
    public bool Contains(float x, float y);
    public bool Contains(Vector2 point);
    public bool Contains(FontRectangle& rectangle);
    public bool IntersectsWith(FontRectangle& rectangle);
    public FontRectangle Offset(Vector2 point);
    public FontRectangle Offset(float dx, float dy);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(FontRectangle other);
}
internal static class SixLabors.Fonts.FontsThrowHelper : object {
    [NullableContextAttribute("1")]
public static T ThrowGlyphMissingException(CodePoint codePoint);
    public static void ThrowDefaultInstance();
}
[FlagsAttribute]
public enum SixLabors.Fonts.FontStyle : Enum {
    public int value__;
    public static FontStyle Regular;
    public static FontStyle Bold;
    public static FontStyle Italic;
    public static FontStyle BoldItalic;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class SixLabors.Fonts.Glyph : ValueType {
    private float pointSize;
    [CompilerGeneratedAttribute]
private GlyphMetrics <GlyphMetrics>k__BackingField;
    public GlyphMetrics GlyphMetrics { get; }
    internal Glyph(GlyphMetrics glyphMetrics, float pointSize);
    [CompilerGeneratedAttribute]
public GlyphMetrics get_GlyphMetrics();
    public FontRectangle BoundingBox(GlyphLayoutMode mode, Vector2 location, float dpi);
    internal void RenderTo(IGlyphRenderer surface, Vector2 location, Vector2 offset, GlyphLayoutMode mode, TextOptions options);
}
[IsReadOnlyAttribute]
public class SixLabors.Fonts.GlyphBounds : ValueType {
    [CompilerGeneratedAttribute]
private CodePoint <Codepoint>k__BackingField;
    [CompilerGeneratedAttribute]
private FontRectangle <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GraphemeIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StringIndex>k__BackingField;
    public CodePoint Codepoint { get; }
    public FontRectangle Bounds { get; }
    public int GraphemeIndex { get; }
    public int StringIndex { get; }
    public GlyphBounds(CodePoint codePoint, FontRectangle& bounds, int graphemeIndex, int stringIndex);
    [CompilerGeneratedAttribute]
public CodePoint get_Codepoint();
    [CompilerGeneratedAttribute]
public FontRectangle get_Bounds();
    [CompilerGeneratedAttribute]
public int get_GraphemeIndex();
    [CompilerGeneratedAttribute]
public int get_StringIndex();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[IsReadOnlyAttribute]
public class SixLabors.Fonts.GlyphColor : ValueType {
    [CompilerGeneratedAttribute]
private byte <Blue>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Green>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Red>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Alpha>k__BackingField;
    public byte Blue { get; }
    public byte Green { get; }
    public byte Red { get; }
    public byte Alpha { get; }
    internal GlyphColor(byte blue, byte green, byte red, byte alpha);
    [CompilerGeneratedAttribute]
public byte get_Blue();
    [CompilerGeneratedAttribute]
public byte get_Green();
    [CompilerGeneratedAttribute]
public byte get_Red();
    [CompilerGeneratedAttribute]
public byte get_Alpha();
    public static bool op_Equality(GlyphColor left, GlyphColor right);
    public static bool op_Inequality(GlyphColor left, GlyphColor right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public bool Equals(GlyphColor other);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.GlyphLayout : ValueType {
    [CompilerGeneratedAttribute]
private Glyph <Glyph>k__BackingField;
    [CompilerGeneratedAttribute]
private CodePoint <CodePoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector2 <BoxLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector2 <PenLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector2 <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private float <AdvanceX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <AdvanceY>k__BackingField;
    [CompilerGeneratedAttribute]
private GlyphLayoutMode <LayoutMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStartOfLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GraphemeIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StringIndex>k__BackingField;
    public Glyph Glyph { get; }
    public CodePoint CodePoint { get; }
    public Vector2 BoxLocation { get; }
    public Vector2 PenLocation { get; }
    public Vector2 Offset { get; }
    public float AdvanceX { get; }
    public float AdvanceY { get; }
    public GlyphLayoutMode LayoutMode { get; }
    public bool IsStartOfLine { get; }
    public int GraphemeIndex { get; }
    public int StringIndex { get; }
    internal GlyphLayout(Glyph glyph, Vector2 boxLocation, Vector2 penLocation, Vector2 offset, float advanceWidth, float advanceHeight, GlyphLayoutMode layoutMode, bool isStartOfLine, int graphemeIndex, int stringIndex);
    [CompilerGeneratedAttribute]
public Glyph get_Glyph();
    [CompilerGeneratedAttribute]
public CodePoint get_CodePoint();
    [CompilerGeneratedAttribute]
public Vector2 get_BoxLocation();
    [CompilerGeneratedAttribute]
public Vector2 get_PenLocation();
    [CompilerGeneratedAttribute]
public Vector2 get_Offset();
    [CompilerGeneratedAttribute]
public float get_AdvanceX();
    [CompilerGeneratedAttribute]
public float get_AdvanceY();
    [CompilerGeneratedAttribute]
public GlyphLayoutMode get_LayoutMode();
    [CompilerGeneratedAttribute]
public bool get_IsStartOfLine();
    [CompilerGeneratedAttribute]
public int get_GraphemeIndex();
    [CompilerGeneratedAttribute]
public int get_StringIndex();
    public bool IsWhiteSpace();
    internal FontRectangle BoundingBox(float dpi);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public enum SixLabors.Fonts.GlyphLayoutMode : Enum {
    public int value__;
    public static GlyphLayoutMode Horizontal;
    public static GlyphLayoutMode Vertical;
    public static GlyphLayoutMode VerticalRotated;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class SixLabors.Fonts.GlyphMetrics : object {
    private static Vector2 YInverter;
    [CompilerGeneratedAttribute]
private StreamFontMetrics <FontMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private CodePoint <CodePoint>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <AdvanceWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <AdvanceHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private short <LeftSideBearing>k__BackingField;
    [CompilerGeneratedAttribute]
private short <RightSideBearing>k__BackingField;
    [CompilerGeneratedAttribute]
private short <TopSideBearing>k__BackingField;
    [CompilerGeneratedAttribute]
private short <BottomSideBearing>k__BackingField;
    [CompilerGeneratedAttribute]
private Bounds <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private GlyphType <GlyphType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<GlyphColor> <GlyphColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <UnitsPerEm>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <GlyphId>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector2 <ScaleFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector2 <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRun <TextRun>k__BackingField;
    [CompilerGeneratedAttribute]
private TextAttributes <TextAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private TextDecorations <TextDecorations>k__BackingField;
    internal StreamFontMetrics FontMetrics { get; }
    public CodePoint CodePoint { get; }
    public ushort AdvanceWidth { get; private set; }
    public ushort AdvanceHeight { get; private set; }
    public short LeftSideBearing { get; }
    public short RightSideBearing { get; }
    public short TopSideBearing { get; }
    public short BottomSideBearing { get; }
    internal Bounds Bounds { get; }
    public float Width { get; }
    public float Height { get; }
    public GlyphType GlyphType { get; }
    public Nullable`1<GlyphColor> GlyphColor { get; }
    public ushort UnitsPerEm { get; }
    public ushort GlyphId { get; }
    public Vector2 ScaleFactor { get; }
    internal Vector2 Offset { get; internal set; }
    internal TextRun TextRun { get; }
    public TextAttributes TextAttributes { get; }
    public TextDecorations TextDecorations { get; }
    internal GlyphMetrics(StreamFontMetrics font, ushort glyphId, CodePoint codePoint, Bounds bounds, ushort advanceWidth, ushort advanceHeight, short leftSideBearing, short topSideBearing, ushort unitsPerEM, TextAttributes textAttributes, TextDecorations textDecorations, GlyphType glyphType, Nullable`1<GlyphColor> glyphColor);
    internal GlyphMetrics(StreamFontMetrics font, ushort glyphId, CodePoint codePoint, Bounds bounds, ushort advanceWidth, ushort advanceHeight, short leftSideBearing, short topSideBearing, ushort unitsPerEM, Vector2 offset, Vector2 scaleFactor, TextRun textRun, GlyphType glyphType, Nullable`1<GlyphColor> glyphColor);
    private static GlyphMetrics();
    [CompilerGeneratedAttribute]
internal StreamFontMetrics get_FontMetrics();
    [CompilerGeneratedAttribute]
public CodePoint get_CodePoint();
    [CompilerGeneratedAttribute]
public ushort get_AdvanceWidth();
    [CompilerGeneratedAttribute]
private void set_AdvanceWidth(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_AdvanceHeight();
    [CompilerGeneratedAttribute]
private void set_AdvanceHeight(ushort value);
    [CompilerGeneratedAttribute]
public short get_LeftSideBearing();
    [CompilerGeneratedAttribute]
public short get_RightSideBearing();
    [CompilerGeneratedAttribute]
public short get_TopSideBearing();
    [CompilerGeneratedAttribute]
public short get_BottomSideBearing();
    [CompilerGeneratedAttribute]
internal Bounds get_Bounds();
    [CompilerGeneratedAttribute]
public float get_Width();
    [CompilerGeneratedAttribute]
public float get_Height();
    [CompilerGeneratedAttribute]
public GlyphType get_GlyphType();
    [CompilerGeneratedAttribute]
public Nullable`1<GlyphColor> get_GlyphColor();
    [CompilerGeneratedAttribute]
public ushort get_UnitsPerEm();
    [CompilerGeneratedAttribute]
public ushort get_GlyphId();
    [CompilerGeneratedAttribute]
public Vector2 get_ScaleFactor();
    [CompilerGeneratedAttribute]
internal Vector2 get_Offset();
    [CompilerGeneratedAttribute]
internal void set_Offset(Vector2 value);
    [CompilerGeneratedAttribute]
internal TextRun get_TextRun();
    [CompilerGeneratedAttribute]
public TextAttributes get_TextAttributes();
    [CompilerGeneratedAttribute]
public TextDecorations get_TextDecorations();
    internal abstract virtual GlyphMetrics CloneForRendering(TextRun textRun);
    internal void ApplyOffset(short x, short y);
    internal void ApplyAdvance(short x, short y);
    internal void SetAdvanceWidth(ushort x);
    internal void SetAdvanceHeight(ushort y);
    internal FontRectangle GetBoundingBox(GlyphLayoutMode mode, Vector2 origin, float scaledPointSize);
    internal abstract virtual void RenderTo(IGlyphRenderer renderer, Vector2 location, Vector2 offset, GlyphLayoutMode mode, TextOptions options);
    internal void RenderDecorationsTo(IGlyphRenderer renderer, Vector2 location, GlyphLayoutMode mode, Matrix3x2 transform, float scaledPPEM);
    protected internal static bool ShouldSkipGlyphRendering(CodePoint codePoint);
    internal float GetScaledSize(float pointSize, float dpi);
    internal static Matrix3x2 GetRotationMatrix(GlyphLayoutMode mode);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ValueTuple`3<Vector2, Vector2, float> <RenderDecorationsTo>g__GetEnds|73_0(TextDecorations decorations, float thickness, float decoratorPosition, <>c__DisplayClass73_0& );
    [CompilerGeneratedAttribute]
private void <RenderDecorationsTo>g__SetDecoration|73_1(TextDecorations decorations, float thickness, float position, <>c__DisplayClass73_0& );
}
public class SixLabors.Fonts.GlyphMissingException : FontException {
    public GlyphMissingException(CodePoint codePoint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class SixLabors.Fonts.GlyphPositioningCollection : object {
    private List`1<GlyphPositioningData> glyphs;
    [CompilerGeneratedAttribute]
private TextOptions <TextOptions>k__BackingField;
    public int Count { get; }
    public TextOptions TextOptions { get; }
    public GlyphShapingData Item { get; }
    public GlyphPositioningCollection(TextOptions textOptions);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual TextOptions get_TextOptions();
    public sealed virtual GlyphShapingData get_Item(int index);
    public sealed virtual void AddShapingFeature(int index, TagEntry feature);
    public sealed virtual void EnableShapingFeature(int index, Tag feature);
    public sealed virtual void DisableShapingFeature(int index, Tag feature);
    public bool TryGetGlyphMetricsAtOffset(int offset, Single& pointSize, Boolean& isDecomposed, IReadOnlyList`1& metrics);
    public bool TryUpdate(Font font, GlyphSubstitutionCollection collection);
    public bool TryAdd(Font font, GlyphSubstitutionCollection collection);
    public void UpdatePosition(FontMetrics fontMetrics, int index);
    public void Advance(FontMetrics fontMetrics, int index, ushort glyphId, short dx, short dy);
    public bool ShouldProcess(FontMetrics fontMetrics, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("GlyphId = {GlyphId}, CodePoint = {CodePoint}, PointSize = {PointSize}, Dpi = {Dpi}")]
public class SixLabors.Fonts.GlyphRendererParameters : ValueType {
    [CompilerGeneratedAttribute]
private string <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private GlyphColor <GlyphColor>k__BackingField;
    [CompilerGeneratedAttribute]
private GlyphType <GlyphType>k__BackingField;
    [CompilerGeneratedAttribute]
private FontStyle <FontStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <GlyphId>k__BackingField;
    [CompilerGeneratedAttribute]
private CodePoint <CodePoint>k__BackingField;
    [CompilerGeneratedAttribute]
private float <PointSize>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Dpi>k__BackingField;
    [CompilerGeneratedAttribute]
private GlyphLayoutMode <LayoutMode>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRun <TextRun>k__BackingField;
    public string Font { get; }
    public GlyphColor GlyphColor { get; }
    public GlyphType GlyphType { get; }
    public FontStyle FontStyle { get; }
    public ushort GlyphId { get; }
    public CodePoint CodePoint { get; }
    public float PointSize { get; }
    public float Dpi { get; }
    public GlyphLayoutMode LayoutMode { get; }
    public TextRun TextRun { get; }
    internal GlyphRendererParameters(GlyphMetrics metrics, TextRun textRun, float pointSize, float dpi, GlyphLayoutMode layoutMode);
    [CompilerGeneratedAttribute]
public string get_Font();
    [CompilerGeneratedAttribute]
public GlyphColor get_GlyphColor();
    [CompilerGeneratedAttribute]
public GlyphType get_GlyphType();
    [CompilerGeneratedAttribute]
public FontStyle get_FontStyle();
    [CompilerGeneratedAttribute]
public ushort get_GlyphId();
    [CompilerGeneratedAttribute]
public CodePoint get_CodePoint();
    [CompilerGeneratedAttribute]
public float get_PointSize();
    [CompilerGeneratedAttribute]
public float get_Dpi();
    [CompilerGeneratedAttribute]
public GlyphLayoutMode get_LayoutMode();
    [CompilerGeneratedAttribute]
public TextRun get_TextRun();
    public static bool op_Equality(GlyphRendererParameters left, GlyphRendererParameters right);
    public static bool op_Inequality(GlyphRendererParameters left, GlyphRendererParameters right);
    public sealed virtual bool Equals(GlyphRendererParameters other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
internal class SixLabors.Fonts.GlyphShapingBounds : object {
    private int x;
    private int y;
    private int width;
    private int height;
    [CompilerGeneratedAttribute]
private bool <IsDirtyXY>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDirtyWH>k__BackingField;
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public bool IsDirtyXY { get; private set; }
    public bool IsDirtyWH { get; private set; }
    private string DebuggerDisplay { get; }
    public GlyphShapingBounds(int x, int y, int width, int height);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    [CompilerGeneratedAttribute]
public bool get_IsDirtyXY();
    [CompilerGeneratedAttribute]
private void set_IsDirtyXY(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDirtyWH();
    [CompilerGeneratedAttribute]
private void set_IsDirtyWH(bool value);
    private string get_DebuggerDisplay();
}
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.GlyphShapingClass : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsMark>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLigature>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MarkAttachmentType>k__BackingField;
    public bool IsMark { get; }
    public bool IsBase { get; }
    public bool IsLigature { get; }
    public ushort MarkAttachmentType { get; }
    public GlyphShapingClass(bool isMark, bool isBase, bool isLigature, ushort markAttachmentType);
    [CompilerGeneratedAttribute]
public bool get_IsMark();
    [CompilerGeneratedAttribute]
public bool get_IsBase();
    [CompilerGeneratedAttribute]
public bool get_IsLigature();
    [CompilerGeneratedAttribute]
public ushort get_MarkAttachmentType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
internal class SixLabors.Fonts.GlyphShapingData : object {
    [CompilerGeneratedAttribute]
private ushort <GlyphId>k__BackingField;
    [CompilerGeneratedAttribute]
private CodePoint <CodePoint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CodePointCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TextDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRun <TextRun>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LigatureId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLigated>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LigatureComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MarkAttachment>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CursiveAttachment>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TagEntry> <Features>k__BackingField;
    [CompilerGeneratedAttribute]
private GlyphShapingBounds <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSubstituted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDecomposed>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private UniversalShapingEngineInfo <UniversalShapingEngineInfo>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IndicShapingEngineInfo <IndicShapingEngineInfo>k__BackingField;
    public ushort GlyphId { get; public set; }
    public CodePoint CodePoint { get; public set; }
    public int CodePointCount { get; public set; }
    public TextDirection Direction { get; public set; }
    public TextRun TextRun { get; public set; }
    public int LigatureId { get; public set; }
    public bool IsLigated { get; public set; }
    public int LigatureComponent { get; public set; }
    public int MarkAttachment { get; public set; }
    public int CursiveAttachment { get; public set; }
    public List`1<TagEntry> Features { get; public set; }
    public GlyphShapingBounds Bounds { get; public set; }
    public bool IsSubstituted { get; public set; }
    public bool IsDecomposed { get; public set; }
    [NullableAttribute("2")]
public UniversalShapingEngineInfo UniversalShapingEngineInfo { get; public set; }
    [NullableAttribute("2")]
public IndicShapingEngineInfo IndicShapingEngineInfo { get; public set; }
    private string DebuggerDisplay { get; }
    public GlyphShapingData(TextRun textRun);
    public GlyphShapingData(GlyphShapingData data, bool clearFeatures);
    [CompilerGeneratedAttribute]
public ushort get_GlyphId();
    [CompilerGeneratedAttribute]
public void set_GlyphId(ushort value);
    [CompilerGeneratedAttribute]
public CodePoint get_CodePoint();
    [CompilerGeneratedAttribute]
public void set_CodePoint(CodePoint value);
    [CompilerGeneratedAttribute]
public int get_CodePointCount();
    [CompilerGeneratedAttribute]
public void set_CodePointCount(int value);
    [CompilerGeneratedAttribute]
public TextDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(TextDirection value);
    [CompilerGeneratedAttribute]
public TextRun get_TextRun();
    [CompilerGeneratedAttribute]
public void set_TextRun(TextRun value);
    [CompilerGeneratedAttribute]
public int get_LigatureId();
    [CompilerGeneratedAttribute]
public void set_LigatureId(int value);
    [CompilerGeneratedAttribute]
public bool get_IsLigated();
    [CompilerGeneratedAttribute]
public void set_IsLigated(bool value);
    [CompilerGeneratedAttribute]
public int get_LigatureComponent();
    [CompilerGeneratedAttribute]
public void set_LigatureComponent(int value);
    [CompilerGeneratedAttribute]
public int get_MarkAttachment();
    [CompilerGeneratedAttribute]
public void set_MarkAttachment(int value);
    [CompilerGeneratedAttribute]
public int get_CursiveAttachment();
    [CompilerGeneratedAttribute]
public void set_CursiveAttachment(int value);
    [CompilerGeneratedAttribute]
public List`1<TagEntry> get_Features();
    [CompilerGeneratedAttribute]
public void set_Features(List`1<TagEntry> value);
    [CompilerGeneratedAttribute]
public GlyphShapingBounds get_Bounds();
    [CompilerGeneratedAttribute]
public void set_Bounds(GlyphShapingBounds value);
    [CompilerGeneratedAttribute]
public bool get_IsSubstituted();
    [CompilerGeneratedAttribute]
public void set_IsSubstituted(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDecomposed();
    [CompilerGeneratedAttribute]
public void set_IsDecomposed(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public UniversalShapingEngineInfo get_UniversalShapingEngineInfo();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UniversalShapingEngineInfo(UniversalShapingEngineInfo value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IndicShapingEngineInfo get_IndicShapingEngineInfo();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_IndicShapingEngineInfo(IndicShapingEngineInfo value);
    private string get_DebuggerDisplay();
    internal string ToDebuggerDisplay();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class SixLabors.Fonts.GlyphSubstitutionCollection : object {
    private List`1<OffsetGlyphDataPair> glyphs;
    [CompilerGeneratedAttribute]
private TextOptions <TextOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LigatureId>k__BackingField;
    public int Count { get; }
    public TextOptions TextOptions { get; }
    public int LigatureId { get; public set; }
    public GlyphShapingData Item { get; }
    public GlyphSubstitutionCollection(TextOptions textOptions);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual TextOptions get_TextOptions();
    [CompilerGeneratedAttribute]
public int get_LigatureId();
    [CompilerGeneratedAttribute]
public void set_LigatureId(int value);
    public sealed virtual GlyphShapingData get_Item(int index);
    internal GlyphShapingData GetGlyphShapingData(int index, Int32& offset);
    public sealed virtual void AddShapingFeature(int index, TagEntry feature);
    public sealed virtual void EnableShapingFeature(int index, Tag feature);
    public sealed virtual void DisableShapingFeature(int index, Tag feature);
    public void AddGlyph(GlyphShapingData data, int offset);
    public void AddGlyph(ushort glyphId, CodePoint codePoint, TextDirection direction, TextRun textRun, int offset);
    public void MoveGlyph(int fromIndex, int toIndex);
    public void Sort(int startIndex, int endIndex, Comparison`1<GlyphShapingData> comparer);
    public void Clear();
    public bool TryGetGlyphShapingDataAtOffset(int offset, IReadOnlyList`1& data);
    public void Replace(int index, ushort glyphId);
    [NullableContextAttribute("0")]
public void Replace(int index, ReadOnlySpan`1<int> removalIndices, ushort glyphId, int ligatureId);
    public void Replace(int index, int count, ushort glyphId);
    [NullableContextAttribute("0")]
public void Replace(int index, ReadOnlySpan`1<ushort> glyphIds);
}
public enum SixLabors.Fonts.GlyphType : Enum {
    public int value__;
    public static GlyphType Fallback;
    public static GlyphType Standard;
    public static GlyphType ColrLayer;
}
public enum SixLabors.Fonts.HintingMode : Enum {
    public int value__;
    public static HintingMode None;
    public static HintingMode Standard;
}
public enum SixLabors.Fonts.HorizontalAlignment : Enum {
    public int value__;
    public static HorizontalAlignment Left;
    public static HorizontalAlignment Right;
    public static HorizontalAlignment Center;
}
public class SixLabors.Fonts.HorizontalMetrics : object {
    [CompilerGeneratedAttribute]
private short <Ascender>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Descender>k__BackingField;
    [CompilerGeneratedAttribute]
private short <LineGap>k__BackingField;
    [CompilerGeneratedAttribute]
private short <LineHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private short <AdvanceWidthMax>k__BackingField;
    [CompilerGeneratedAttribute]
private short <AdvanceHeightMax>k__BackingField;
    public short Ascender { get; internal set; }
    public short Descender { get; internal set; }
    public short LineGap { get; internal set; }
    public short LineHeight { get; internal set; }
    public short AdvanceWidthMax { get; internal set; }
    public short AdvanceHeightMax { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual short get_Ascender();
    [CompilerGeneratedAttribute]
internal void set_Ascender(short value);
    [CompilerGeneratedAttribute]
public sealed virtual short get_Descender();
    [CompilerGeneratedAttribute]
internal void set_Descender(short value);
    [CompilerGeneratedAttribute]
public sealed virtual short get_LineGap();
    [CompilerGeneratedAttribute]
internal void set_LineGap(short value);
    [CompilerGeneratedAttribute]
public sealed virtual short get_LineHeight();
    [CompilerGeneratedAttribute]
internal void set_LineHeight(short value);
    [CompilerGeneratedAttribute]
public sealed virtual short get_AdvanceWidthMax();
    [CompilerGeneratedAttribute]
internal void set_AdvanceWidthMax(short value);
    [CompilerGeneratedAttribute]
public sealed virtual short get_AdvanceHeightMax();
    [CompilerGeneratedAttribute]
internal void set_AdvanceHeightMax(short value);
}
public interface SixLabors.Fonts.IColorGlyphRenderer {
    public abstract virtual void SetColor(GlyphColor color);
}
[NullableContextAttribute("1")]
public interface SixLabors.Fonts.IFontCollection {
    public abstract virtual FontFamily Add(string path);
    public abstract virtual FontFamily Add(string path, FontDescription& description);
    public abstract virtual FontFamily Add(Stream stream);
    public abstract virtual FontFamily Add(Stream stream, FontDescription& description);
    public abstract virtual IEnumerable`1<FontFamily> AddCollection(string path);
    public abstract virtual IEnumerable`1<FontFamily> AddCollection(string path, IEnumerable`1& descriptions);
    public abstract virtual IEnumerable`1<FontFamily> AddCollection(Stream stream);
    public abstract virtual IEnumerable`1<FontFamily> AddCollection(Stream stream, IEnumerable`1& descriptions);
    public abstract virtual FontFamily Add(string path, CultureInfo culture);
    public abstract virtual FontFamily Add(string path, CultureInfo culture, FontDescription& description);
    public abstract virtual FontFamily Add(Stream stream, CultureInfo culture);
    public abstract virtual FontFamily Add(Stream stream, CultureInfo culture, FontDescription& description);
    public abstract virtual IEnumerable`1<FontFamily> AddCollection(string path, CultureInfo culture);
    public abstract virtual IEnumerable`1<FontFamily> AddCollection(string path, CultureInfo culture, IEnumerable`1& descriptions);
    public abstract virtual IEnumerable`1<FontFamily> AddCollection(Stream stream, CultureInfo culture);
    public abstract virtual IEnumerable`1<FontFamily> AddCollection(Stream stream, CultureInfo culture, IEnumerable`1& descriptions);
}
[NullableContextAttribute("1")]
internal interface SixLabors.Fonts.IFontMetricsCollection {
    public abstract virtual FontFamily AddMetrics(FontMetrics metrics, CultureInfo culture);
    public abstract virtual void AddMetrics(FontMetrics metrics);
}
public interface SixLabors.Fonts.IGlyphRenderer {
    public abstract virtual void BeginFigure();
    public abstract virtual void MoveTo(Vector2 point);
    public abstract virtual void QuadraticBezierTo(Vector2 secondControlPoint, Vector2 point);
    public abstract virtual void CubicBezierTo(Vector2 secondControlPoint, Vector2 thirdControlPoint, Vector2 point);
    public abstract virtual void LineTo(Vector2 point);
    public abstract virtual void EndFigure();
    public abstract virtual void EndGlyph();
    public abstract virtual bool BeginGlyph(FontRectangle& modreq(System.Runtime.InteropServices.InAttribute) bounds, GlyphRendererParameters& modreq(System.Runtime.InteropServices.InAttribute) parameters);
    public abstract virtual void EndText();
    public abstract virtual void BeginText(FontRectangle& modreq(System.Runtime.InteropServices.InAttribute) bounds);
    public abstract virtual TextDecorations EnabledDecorations();
    public abstract virtual void SetDecoration(TextDecorations textDecorations, Vector2 start, Vector2 end, float thickness);
}
[ExtensionAttribute]
public static class SixLabors.Fonts.IGlyphRendererExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IGlyphRenderer Render(IGlyphRenderer renderer, ReadOnlySpan`1<char> text, TextOptions options);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
internal interface SixLabors.Fonts.IGlyphShapingCollection {
    public int Count { get; }
    public TextOptions TextOptions { get; }
    public GlyphShapingData Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual TextOptions get_TextOptions();
    public abstract virtual GlyphShapingData get_Item(int index);
    public abstract virtual void AddShapingFeature(int index, TagEntry feature);
    public abstract virtual void EnableShapingFeature(int index, Tag feature);
    public abstract virtual void DisableShapingFeature(int index, Tag feature);
}
public interface SixLabors.Fonts.IMetricsHeader {
    public short Ascender { get; }
    public short Descender { get; }
    public short LineGap { get; }
    public short LineHeight { get; }
    public short AdvanceWidthMax { get; }
    public short AdvanceHeightMax { get; }
    public abstract virtual short get_Ascender();
    public abstract virtual short get_Descender();
    public abstract virtual short get_LineGap();
    public abstract virtual short get_LineHeight();
    public abstract virtual short get_AdvanceWidthMax();
    public abstract virtual short get_AdvanceHeightMax();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.IndicShapingEngineInfo : object {
    [CompilerGeneratedAttribute]
private Categories <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private Positions <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SyllableType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Syllable>k__BackingField;
    public Categories Category { get; public set; }
    public Positions Position { get; public set; }
    public string SyllableType { get; }
    public int Syllable { get; }
    public IndicShapingEngineInfo(Categories category, Positions position, string syllableType, int syllable);
    [CompilerGeneratedAttribute]
public Categories get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(Categories value);
    [CompilerGeneratedAttribute]
public Positions get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Positions value);
    [CompilerGeneratedAttribute]
public string get_SyllableType();
    [CompilerGeneratedAttribute]
public int get_Syllable();
}
public class SixLabors.Fonts.InvalidFontFileException : Exception {
    [NullableContextAttribute("1")]
public InvalidFontFileException(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.Fonts.InvalidFontTableException : InvalidFontFileException {
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Table { get; }
    public InvalidFontTableException(string message, string table);
    [CompilerGeneratedAttribute]
public string get_Table();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.IO.ZlibInflateStream : Stream {
    private long position;
    private Stream rawStream;
    private bool isDisposed;
    [NullableAttribute("2")]
private Byte[] crcRead;
    [NullableAttribute("2")]
private DeflateStream deflateStream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ZlibInflateStream(Stream stream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
public interface SixLabors.Fonts.IReadOnlyFontCollection {
    public IEnumerable`1<FontFamily> Families { get; }
    public abstract virtual IEnumerable`1<FontFamily> get_Families();
    public abstract virtual FontFamily Get(string name);
    public abstract virtual bool TryGet(string name, FontFamily& family);
    public abstract virtual IEnumerable`1<FontFamily> GetByCulture(CultureInfo culture);
    public abstract virtual FontFamily Get(string name, CultureInfo culture);
    public abstract virtual bool TryGet(string name, CultureInfo culture, FontFamily& family);
}
[NullableContextAttribute("1")]
internal interface SixLabors.Fonts.IReadOnlyFontMetricsCollection {
    public abstract virtual bool TryGetMetrics(string name, CultureInfo culture, FontStyle style, FontMetrics& metrics);
    public abstract virtual IEnumerable`1<FontMetrics> GetAllMetrics(string name, CultureInfo culture);
    public abstract virtual IEnumerable`1<FontStyle> GetAllStyles(string name, CultureInfo culture);
    public abstract virtual IEnumerator`1<FontMetrics> GetEnumerator();
}
[NullableContextAttribute("1")]
public interface SixLabors.Fonts.IReadOnlySystemFontCollection {
    public IEnumerable`1<string> SearchDirectories { get; }
    public abstract virtual IEnumerable`1<string> get_SearchDirectories();
}
public enum SixLabors.Fonts.KerningMode : Enum {
    public int value__;
    public static KerningMode Standard;
    public static KerningMode None;
    public static KerningMode Auto;
}
[FlagsAttribute]
public enum SixLabors.Fonts.LayoutMode : Enum {
    public int value__;
    public static LayoutMode HorizontalTopBottom;
    public static LayoutMode HorizontalBottomTop;
    public static LayoutMode VerticalLeftRight;
    public static LayoutMode VerticalRightLeft;
    public static LayoutMode VerticalMixedLeftRight;
    public static LayoutMode VerticalMixedRightLeft;
}
[ExtensionAttribute]
public static class SixLabors.Fonts.LayoutModeExtensions : object {
    [ExtensionAttribute]
public static bool IsHorizontal(LayoutMode mode);
    [ExtensionAttribute]
public static bool IsVertical(LayoutMode mode);
    [ExtensionAttribute]
public static bool IsVerticalMixed(LayoutMode mode);
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class SixLabors.Fonts.MappedArraySlice`1 : ValueType {
    private ArraySlice`1<T> data;
    private ArraySlice`1<int> map;
    public int Length { get; }
    public T& Item { get; }
    public MappedArraySlice`1(ArraySlice`1& data, ArraySlice`1& map);
    public int get_Length();
    public T& get_Item(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.Fonts.MissingFontTableException : InvalidFontFileException {
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Table { get; }
    public MissingFontTableException(string message, string table);
    [CompilerGeneratedAttribute]
public string get_Table();
}
internal enum SixLabors.Fonts.Native.CFStringEncoding : Enum {
    public UInt32 value__;
    public static CFStringEncoding kCFStringEncodingUTF8;
    public static CFStringEncoding kCFStringEncodingUTF16LE;
}
internal enum SixLabors.Fonts.Native.CFURLPathStyle : Enum {
    public long value__;
    public static CFURLPathStyle kCFURLPOSIXPathStyle;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.Fonts.Native.CoreFoundation : object {
    private static string CoreFoundationFramework;
    public static long CFArrayGetCount(IntPtr theArray);
    public static ulong CFArrayGetTypeID();
    public static IntPtr CFArrayGetValueAtIndex(IntPtr theArray, long idx);
    public static ulong CFGetTypeID(IntPtr cf);
    public static long CFStringGetLength(IntPtr theString);
    public static bool CFStringGetCString(IntPtr theString, Byte[] buffer, long bufferSize, CFStringEncoding encoding);
    public static IntPtr CFStringGetCStringPtr(IntPtr theString, CFStringEncoding encoding);
    public static void CFRelease(IntPtr cf);
    public static IntPtr CFURLCopyFileSystemPath(IntPtr anURL, CFURLPathStyle pathStyle);
    public static ulong CFURLGetTypeID();
}
internal static class SixLabors.Fonts.Native.CoreText : object {
    [NullableAttribute("1")]
private static string CoreTextFramework;
    public static IntPtr CTFontManagerCopyAvailableFontURLs();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Native.MacSystemFontsEnumerator : object {
    private static ArrayPool`1<byte> BytePool;
    private IntPtr fontUrls;
    private bool releaseFontUrls;
    private int fontIndex;
    [CompilerGeneratedAttribute]
private string <Current>k__BackingField;
    public string Current { get; private set; }
    private object System.Collections.IEnumerator.Current { get; }
    private MacSystemFontsEnumerator(IntPtr fontUrls, bool releaseFontUrls, int fontIndex);
    private static MacSystemFontsEnumerator();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(string value);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal enum SixLabors.Fonts.OutlineType : Enum {
    public UInt32 value__;
    public static OutlineType TrueType;
    public static OutlineType CFF;
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class SixLabors.Fonts.ReadOnlyArraySlice`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private T[] data;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public static ReadOnlyArraySlice`1<T> Empty { get; }
    public int Start { get; }
    public int Length { get; }
    public ReadOnlySpan`1<T> Span { get; }
    public T Item { get; }
    public ReadOnlyArraySlice`1(T[] data);
    public ReadOnlyArraySlice`1(T[] data, int start, int length);
    public static ReadOnlyArraySlice`1<T> get_Empty();
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public int get_Length();
    public ReadOnlySpan`1<T> get_Span();
    public T get_Item(int index);
    public static ReadOnlyArraySlice`1<T> op_Implicit(T[] array);
    public void CopyTo(ArraySlice`1<T> destination);
    public ReadOnlyArraySlice`1<T> Slice(int start, int length);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class SixLabors.Fonts.ReadonlyMappedArraySlice`1 : ValueType {
    private ReadOnlyArraySlice`1<T> data;
    private ReadOnlyArraySlice`1<int> map;
    public int Length { get; }
    public T Item { get; }
    public ReadonlyMappedArraySlice`1(ReadOnlyArraySlice`1& data, ReadOnlyArraySlice`1& map);
    public int get_Length();
    public T get_Item(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.StreamFontMetrics : FontMetrics {
    [NullableAttribute("2")]
private TrueTypeFontTables trueTypeFontTables;
    [NullableAttribute("2")]
private CompactFontTables compactFontTables;
    private OutlineType outlineType;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<ValueTuple`4<int, ushort, TextAttributes, bool>, GlyphMetrics[]> glyphCache;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<ValueTuple`4<int, ushort, TextAttributes, bool>, GlyphMetrics[]> colorGlyphCache;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<ValueTuple`2<int, int>, ValueTuple`3<bool, ushort, bool>> glyphIdCache;
    private FontDescription description;
    private HorizontalMetrics horizontalMetrics;
    private VerticalMetrics verticalMetrics;
    private ushort unitsPerEm;
    private float scaleFactor;
    private short subscriptXSize;
    private short subscriptYSize;
    private short subscriptXOffset;
    private short subscriptYOffset;
    private short superscriptXSize;
    private short superscriptYSize;
    private short superscriptXOffset;
    private short superscriptYOffset;
    private short strikeoutSize;
    private short strikeoutPosition;
    private short underlinePosition;
    private short underlineThickness;
    private float italicAngle;
    [CompilerGeneratedAttribute]
private HeadFlags <HeadFlags>k__BackingField;
    [NullableAttribute("2")]
private TrueTypeInterpreter interpreter;
    public HeadFlags HeadFlags { get; private set; }
    public FontDescription Description { get; }
    public ushort UnitsPerEm { get; }
    public float ScaleFactor { get; }
    public HorizontalMetrics HorizontalMetrics { get; }
    public VerticalMetrics VerticalMetrics { get; }
    public short SubscriptXSize { get; }
    public short SubscriptYSize { get; }
    public short SubscriptXOffset { get; }
    public short SubscriptYOffset { get; }
    public short SuperscriptXSize { get; }
    public short SuperscriptYSize { get; }
    public short SuperscriptXOffset { get; }
    public short SuperscriptYOffset { get; }
    public short StrikeoutSize { get; }
    public short StrikeoutPosition { get; }
    public short UnderlinePosition { get; }
    public short UnderlineThickness { get; }
    public float ItalicAngle { get; }
    internal StreamFontMetrics(TrueTypeFontTables tables);
    internal StreamFontMetrics(CompactFontTables tables);
    private static StreamFontMetrics LoadCompactFont(FontReader reader);
    private GlyphMetrics CreateCffGlyphMetrics(CodePoint& codePoint, ushort glyphId, GlyphType glyphType, TextAttributes textAttributes, TextDecorations textDecorations, bool isVerticalLayout, ushort paletteIndex);
    [CompilerGeneratedAttribute]
public HeadFlags get_HeadFlags();
    [CompilerGeneratedAttribute]
private void set_HeadFlags(HeadFlags value);
    public virtual FontDescription get_Description();
    public virtual ushort get_UnitsPerEm();
    public virtual float get_ScaleFactor();
    public virtual HorizontalMetrics get_HorizontalMetrics();
    public virtual VerticalMetrics get_VerticalMetrics();
    public virtual short get_SubscriptXSize();
    public virtual short get_SubscriptYSize();
    public virtual short get_SubscriptXOffset();
    public virtual short get_SubscriptYOffset();
    public virtual short get_SuperscriptXSize();
    public virtual short get_SuperscriptYSize();
    public virtual short get_SuperscriptXOffset();
    public virtual short get_SuperscriptYOffset();
    public virtual short get_StrikeoutSize();
    public virtual short get_StrikeoutPosition();
    public virtual short get_UnderlinePosition();
    public virtual short get_UnderlineThickness();
    public virtual float get_ItalicAngle();
    internal virtual bool TryGetGlyphId(CodePoint codePoint, UInt16& glyphId);
    internal virtual bool TryGetGlyphId(CodePoint codePoint, Nullable`1<CodePoint> nextCodePoint, UInt16& glyphId, Boolean& skipNextCodePoint);
    internal virtual bool TryGetGlyphClass(ushort glyphId, Nullable`1& glyphClass);
    internal virtual bool TryGetMarkAttachmentClass(ushort glyphId, Nullable`1& markAttachmentClass);
    public virtual bool TryGetGlyphMetrics(CodePoint codePoint, TextAttributes textAttributes, TextDecorations textDecorations, LayoutMode layoutMode, ColorFontSupport support, IReadOnlyList`1& metrics);
    internal virtual IReadOnlyList`1<GlyphMetrics> GetGlyphMetrics(CodePoint codePoint, ushort glyphId, TextAttributes textAttributes, TextDecorations textDecorations, LayoutMode layoutMode, ColorFontSupport support);
    public virtual IReadOnlyList`1<CodePoint> GetAvailableCodePoints();
    [NullableContextAttribute("2")]
internal virtual bool TryGetGSubTable(GSubTable& gSubTable);
    internal virtual void ApplySubstitution(GlyphSubstitutionCollection collection);
    internal virtual bool TryGetKerningOffset(ushort currentId, ushort nextId, Vector2& vector);
    internal virtual void UpdatePositions(GlyphPositioningCollection collection);
    public static StreamFontMetrics LoadFont(string path);
    public static StreamFontMetrics LoadFont(string path, long offset);
    public static StreamFontMetrics LoadFont(Stream stream);
    internal static StreamFontMetrics LoadFont(FontReader reader);
    private ValueTuple`2<HorizontalMetrics, VerticalMetrics> Initialize(T tables);
    private static HorizontalMetrics InitializeHorizontalMetrics(HorizontalHeadTable hhea, VerticalHeadTable vhea, OS2Table os2);
    private static VerticalMetrics InitializeVerticalMetrics(HorizontalMetrics metrics, VerticalHeadTable vhea);
    public static StreamFontMetrics[] LoadFontCollection(string path);
    public static StreamFontMetrics[] LoadFontCollection(Stream stream);
    [NullableContextAttribute("0")]
private static ValueTuple`4<int, ushort, TextAttributes, bool> CreateCacheKey(CodePoint& codePoint, ushort glyphId, TextAttributes textAttributes, LayoutMode layoutMode);
    private bool TryGetColoredMetrics(CodePoint codePoint, ushort glyphId, TextAttributes textAttributes, TextDecorations textDecorations, LayoutMode layoutMode, GlyphMetrics[]& metrics);
    private GlyphMetrics CreateGlyphMetrics(CodePoint& codePoint, ushort glyphId, GlyphType glyphType, TextAttributes textAttributes, TextDecorations textDecorations, bool isVerticalLayout, ushort paletteIndex);
    internal void ApplyTrueTypeHinting(HintingMode hintingMode, GlyphMetrics metrics, GlyphVector& glyphVector, Vector2 scaleXY, float pixelSize);
    private static StreamFontMetrics LoadTrueTypeFont(FontReader reader);
    private GlyphMetrics CreateTrueTypeGlyphMetrics(CodePoint& codePoint, ushort glyphId, GlyphType glyphType, TextAttributes textAttributes, TextDecorations textDecorations, bool isVerticalLayout, ushort paletteIndex);
}
internal static class SixLabors.Fonts.StringComparerHelpers : object {
    [NullableContextAttribute("1")]
public static StringComparer GetCaseInsensitiveStringComparer(CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.SystemFontCollection : object {
    private FontCollection collection;
    private IReadOnlyCollection`1<string> searchDirectories;
    private static IReadOnlyCollection`1<string> StandardFontLocations;
    public IEnumerable`1<FontFamily> Families { get; }
    public IEnumerable`1<string> SearchDirectories { get; }
    private static SystemFontCollection();
    public sealed virtual IEnumerable`1<FontFamily> get_Families();
    public sealed virtual IEnumerable`1<string> get_SearchDirectories();
    public sealed virtual FontFamily Get(string name);
    public sealed virtual bool TryGet(string name, FontFamily& family);
    public sealed virtual IEnumerable`1<FontFamily> GetByCulture(CultureInfo culture);
    public sealed virtual FontFamily Get(string name, CultureInfo culture);
    public sealed virtual bool TryGet(string name, CultureInfo culture, FontFamily& family);
    private sealed virtual override bool SixLabors.Fonts.IReadOnlyFontMetricsCollection.TryGetMetrics(string name, CultureInfo culture, FontStyle style, FontMetrics& metrics);
    private sealed virtual override IEnumerable`1<FontMetrics> SixLabors.Fonts.IReadOnlyFontMetricsCollection.GetAllMetrics(string name, CultureInfo culture);
    private sealed virtual override IEnumerable`1<FontStyle> SixLabors.Fonts.IReadOnlyFontMetricsCollection.GetAllStyles(string name, CultureInfo culture);
    private sealed virtual override IEnumerator`1<FontMetrics> SixLabors.Fonts.IReadOnlyFontMetricsCollection.GetEnumerator();
    private static FontCollection CreateSystemFontCollection(IEnumerable`1<string> paths, IReadOnlyCollection`1<string> searchDirectories);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class SixLabors.Fonts.SystemFonts : object {
    private static Lazy`1<SystemFontCollection> LazySystemFonts;
    public static IReadOnlySystemFontCollection Collection { get; }
    public static IEnumerable`1<FontFamily> Families { get; }
    private static SystemFonts();
    public static IReadOnlySystemFontCollection get_Collection();
    public static IEnumerable`1<FontFamily> get_Families();
    public static FontFamily Get(string name);
    public static bool TryGet(string fontFamily, FontFamily& family);
    public static Font CreateFont(string name, float size);
    public static Font CreateFont(string name, float size, FontStyle style);
    public static IEnumerable`1<FontFamily> GetByCulture(CultureInfo culture);
    public static FontFamily Get(string fontFamily, CultureInfo culture);
    public static bool TryGet(string fontFamily, CultureInfo culture, FontFamily& family);
    public static Font CreateFont(string name, CultureInfo culture, float size);
    public static Font CreateFont(string name, CultureInfo culture, float size, FontStyle style);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.AdvancedTypographicUtils : object {
    public static int MaxContextLength;
    private static int MaxLengthFactor;
    private static int MaxLengthMinimum;
    private static int MaxOperationsFactor;
    private static int MaxOperationsMinimum;
    private static int MaxShapingCharsLength;
    public static bool IsVerticalGlyph(CodePoint codePoint, LayoutMode layoutMode);
    public static int GetMaxAllowableShapingCollectionCount(int length);
    public static int GetMaxAllowableShapingOperationsCount(int length);
    public static bool ApplyLookupList(FontMetrics fontMetrics, GSubTable table, Tag feature, LookupFlags lookupFlags, SequenceLookupRecord[] records, GlyphSubstitutionCollection collection, int index, int count);
    public static bool ApplyLookupList(FontMetrics fontMetrics, GPosTable table, Tag feature, LookupFlags lookupFlags, SequenceLookupRecord[] records, GlyphPositioningCollection collection, int index, int count);
    [NullableContextAttribute("0")]
public static bool MatchInputSequence(SkippingGlyphIterator iterator, Tag feature, ushort increment, UInt16[] sequence, Span`1<int> matches);
    private static bool ContainsFeatureTag(List`1<TagEntry> featureList, Tag feature);
    public static bool MatchSequence(SkippingGlyphIterator iterator, int increment, UInt16[] sequence);
    public static bool MatchClassSequence(SkippingGlyphIterator iterator, int increment, UInt16[] sequence, ClassDefinitionTable classDefinitionTable);
    public static bool MatchCoverageSequence(SkippingGlyphIterator iterator, CoverageTable[] coverageTable, int increment);
    public static bool ApplyChainedSequenceRule(SkippingGlyphIterator iterator, ChainedSequenceRuleTable rule);
    public static bool ApplyChainedClassSequenceRule(SkippingGlyphIterator iterator, ChainedClassSequenceRuleTable rule, ClassDefinitionTable inputClassDefinitionTable, ClassDefinitionTable backtrackClassDefinitionTable, ClassDefinitionTable lookaheadClassDefinitionTable);
    public static bool CheckAllCoverages(FontMetrics fontMetrics, LookupFlags lookupFlags, IGlyphShapingCollection collection, int index, int count, CoverageTable[] input, CoverageTable[] backtrack, CoverageTable[] lookahead);
    public static void ApplyAnchor(FontMetrics fontMetrics, GlyphPositioningCollection collection, int index, AnchorTable baseAnchor, MarkRecord markRecord, int baseGlyphIndex);
    public static void ApplyPosition(GlyphPositioningCollection collection, int index, ValueRecord record);
    public static bool IsMarkGlyph(FontMetrics fontMetrics, ushort glyphId, GlyphShapingData shapingData);
    public static GlyphShapingClass GetGlyphShapingClass(FontMetrics fontMetrics, ushort glyphId, GlyphShapingData shapingData);
    private static bool Match(int increment, T[] sequence, SkippingGlyphIterator iterator, Func`3<T, GlyphShapingData, bool> condition, Span`1<int> matches);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.AttachmentListTable : object {
    [CompilerGeneratedAttribute]
private CoverageTable <CoverageTable>k__BackingField;
    [CompilerGeneratedAttribute]
private AttachPoint[] <AttachPoints>k__BackingField;
    public CoverageTable CoverageTable { get; internal set; }
    public AttachPoint[] AttachPoints { get; internal set; }
    [CompilerGeneratedAttribute]
public CoverageTable get_CoverageTable();
    [CompilerGeneratedAttribute]
internal void set_CoverageTable(CoverageTable value);
    [CompilerGeneratedAttribute]
public AttachPoint[] get_AttachPoints();
    [CompilerGeneratedAttribute]
internal void set_AttachPoints(AttachPoint[] value);
    [NullableContextAttribute("1")]
public static AttachmentListTable Load(BigEndianBinaryReader reader, long offset);
}
internal class SixLabors.Fonts.Tables.AdvancedTypographic.AttachPoint : ValueType {
    [NullableAttribute("1")]
public UInt16[] PointIndices;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.ChainedClassSequenceRuleSetTable : object {
    [CompilerGeneratedAttribute]
private ChainedClassSequenceRuleTable[] <SubRules>k__BackingField;
    public ChainedClassSequenceRuleTable[] SubRules { get; }
    private ChainedClassSequenceRuleSetTable(ChainedClassSequenceRuleTable[] subRules);
    [CompilerGeneratedAttribute]
public ChainedClassSequenceRuleTable[] get_SubRules();
    public static ChainedClassSequenceRuleSetTable Load(BigEndianBinaryReader reader, long offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.ChainedClassSequenceRuleTable : object {
    [CompilerGeneratedAttribute]
private UInt16[] <BacktrackSequence>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt16[] <InputSequence>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt16[] <LookaheadSequence>k__BackingField;
    [CompilerGeneratedAttribute]
private SequenceLookupRecord[] <SequenceLookupRecords>k__BackingField;
    public UInt16[] BacktrackSequence { get; }
    public UInt16[] InputSequence { get; }
    public UInt16[] LookaheadSequence { get; }
    public SequenceLookupRecord[] SequenceLookupRecords { get; }
    private ChainedClassSequenceRuleTable(UInt16[] backtrackSequence, UInt16[] inputSequence, UInt16[] lookaheadSequence, SequenceLookupRecord[] seqLookupRecords);
    [CompilerGeneratedAttribute]
public UInt16[] get_BacktrackSequence();
    [CompilerGeneratedAttribute]
public UInt16[] get_InputSequence();
    [CompilerGeneratedAttribute]
public UInt16[] get_LookaheadSequence();
    [CompilerGeneratedAttribute]
public SequenceLookupRecord[] get_SequenceLookupRecords();
    public static ChainedClassSequenceRuleTable Load(BigEndianBinaryReader reader, long offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.ChainedSequenceRuleSetTable : object {
    [CompilerGeneratedAttribute]
private ChainedSequenceRuleTable[] <SequenceRuleTables>k__BackingField;
    public ChainedSequenceRuleTable[] SequenceRuleTables { get; }
    private ChainedSequenceRuleSetTable(ChainedSequenceRuleTable[] subRules);
    [CompilerGeneratedAttribute]
public ChainedSequenceRuleTable[] get_SequenceRuleTables();
    public static ChainedSequenceRuleSetTable Load(BigEndianBinaryReader reader, long offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.ChainedSequenceRuleTable : object {
    [CompilerGeneratedAttribute]
private UInt16[] <BacktrackSequence>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt16[] <InputSequence>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt16[] <LookaheadSequence>k__BackingField;
    [CompilerGeneratedAttribute]
private SequenceLookupRecord[] <SequenceLookupRecords>k__BackingField;
    public UInt16[] BacktrackSequence { get; }
    public UInt16[] InputSequence { get; }
    public UInt16[] LookaheadSequence { get; }
    public SequenceLookupRecord[] SequenceLookupRecords { get; }
    private ChainedSequenceRuleTable(UInt16[] backtrackSequence, UInt16[] inputSequence, UInt16[] lookaheadSequence, SequenceLookupRecord[] seqLookupRecords);
    [CompilerGeneratedAttribute]
public UInt16[] get_BacktrackSequence();
    [CompilerGeneratedAttribute]
public UInt16[] get_InputSequence();
    [CompilerGeneratedAttribute]
public UInt16[] get_LookaheadSequence();
    [CompilerGeneratedAttribute]
public SequenceLookupRecord[] get_SequenceLookupRecords();
    public static ChainedSequenceRuleTable Load(BigEndianBinaryReader reader, long offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.ClassDefinitionFormat1Table : ClassDefinitionTable {
    private ushort startGlyphId;
    private UInt16[] classValueArray;
    private ClassDefinitionFormat1Table(ushort startGlyphId, UInt16[] classValueArray);
    public static ClassDefinitionFormat1Table Load(BigEndianBinaryReader reader);
    public virtual int ClassIndexOf(ushort glyphId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.ClassDefinitionFormat2Table : ClassDefinitionTable {
    private ClassRangeRecord[] records;
    private ClassDefinitionFormat2Table(ClassRangeRecord[] records);
    public static ClassDefinitionFormat2Table Load(BigEndianBinaryReader reader);
    public virtual int ClassIndexOf(ushort glyphId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class SixLabors.Fonts.Tables.AdvancedTypographic.ClassDefinitionTable : object {
    public abstract virtual int ClassIndexOf(ushort glyphId);
    public static bool TryLoad(BigEndianBinaryReader reader, long offset, ClassDefinitionTable& table);
    public static ClassDefinitionTable Load(BigEndianBinaryReader reader, long offset);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("StartGlyphId: {StartGlyphId}, EndGlyphId: {EndGlyphId}, Class: {Class}")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.ClassRangeRecord : ValueType {
    [CompilerGeneratedAttribute]
private ushort <StartGlyphId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <EndGlyphId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Class>k__BackingField;
    public ushort StartGlyphId { get; }
    public ushort EndGlyphId { get; }
    public ushort Class { get; }
    public ClassRangeRecord(ushort startGlyphId, ushort endGlyphId, ushort glyphClass);
    [CompilerGeneratedAttribute]
public ushort get_StartGlyphId();
    [CompilerGeneratedAttribute]
public ushort get_EndGlyphId();
    [CompilerGeneratedAttribute]
public ushort get_Class();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.ClassSequenceRuleSetTable : object {
    [CompilerGeneratedAttribute]
private ClassSequenceRuleTable[] <SequenceRuleTables>k__BackingField;
    public ClassSequenceRuleTable[] SequenceRuleTables { get; }
    private ClassSequenceRuleSetTable(ClassSequenceRuleTable[] sequenceRuleTables);
    [CompilerGeneratedAttribute]
public ClassSequenceRuleTable[] get_SequenceRuleTables();
    public static ClassSequenceRuleSetTable Load(BigEndianBinaryReader reader, long offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.ClassSequenceRuleTable : object {
    [CompilerGeneratedAttribute]
private UInt16[] <InputSequence>k__BackingField;
    [CompilerGeneratedAttribute]
private SequenceLookupRecord[] <SequenceLookupRecords>k__BackingField;
    public UInt16[] InputSequence { get; }
    public SequenceLookupRecord[] SequenceLookupRecords { get; }
    private ClassSequenceRuleTable(UInt16[] inputSequence, SequenceLookupRecord[] seqLookupRecords);
    [CompilerGeneratedAttribute]
public UInt16[] get_InputSequence();
    [CompilerGeneratedAttribute]
public SequenceLookupRecord[] get_SequenceLookupRecords();
    public static ClassSequenceRuleTable Load(BigEndianBinaryReader reader, long offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.CoverageFormat1Table : CoverageTable {
    private UInt16[] glyphArray;
    private CoverageFormat1Table(UInt16[] glyphArray);
    public virtual int CoverageIndexOf(ushort glyphId);
    public static CoverageFormat1Table Load(BigEndianBinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.CoverageFormat2Table : CoverageTable {
    private CoverageRangeRecord[] records;
    private CoverageFormat2Table(CoverageRangeRecord[] records);
    public virtual int CoverageIndexOf(ushort glyphId);
    public static CoverageFormat2Table Load(BigEndianBinaryReader reader);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("StartGlyphId: {StartGlyphId}, EndGlyphId: {EndGlyphId}, Index: {Index}")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.CoverageRangeRecord : ValueType {
    [CompilerGeneratedAttribute]
private ushort <StartGlyphId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <EndGlyphId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Index>k__BackingField;
    public ushort StartGlyphId { get; }
    public ushort EndGlyphId { get; }
    public ushort Index { get; }
    public CoverageRangeRecord(ushort startGlyphId, ushort endGlyphId, ushort startCoverageIndex);
    [CompilerGeneratedAttribute]
public ushort get_StartGlyphId();
    [CompilerGeneratedAttribute]
public ushort get_EndGlyphId();
    [CompilerGeneratedAttribute]
public ushort get_Index();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class SixLabors.Fonts.Tables.AdvancedTypographic.CoverageTable : object {
    public abstract virtual int CoverageIndexOf(ushort glyphId);
    public static CoverageTable Load(BigEndianBinaryReader reader, long offset);
    public static CoverageTable[] LoadArray(BigEndianBinaryReader reader, long offset, ReadOnlySpan`1<ushort> coverageOffsets);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.FeatureListTable : object {
    [CompilerGeneratedAttribute]
private FeatureTable[] <FeatureTables>k__BackingField;
    public FeatureTable[] FeatureTables { get; }
    private FeatureListTable(FeatureTable[] featureTables);
    [CompilerGeneratedAttribute]
public FeatureTable[] get_FeatureTables();
    public static FeatureListTable Load(BigEndianBinaryReader reader, long offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Tag: {FeatureTag}")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTable : object {
    [CompilerGeneratedAttribute]
private Tag <FeatureTag>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt16[] <LookupListIndices>k__BackingField;
    public Tag FeatureTag { get; }
    public UInt16[] LookupListIndices { get; }
    private FeatureTable(Tag featureTag, UInt16[] lookupListIndices);
    [CompilerGeneratedAttribute]
public Tag get_FeatureTag();
    [CompilerGeneratedAttribute]
public UInt16[] get_LookupListIndices();
    public static FeatureTable Load(Tag featureTag, BigEndianBinaryReader reader, long offset);
}
public enum SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags : Enum {
    public UInt32 value__;
    public static FeatureTags AccessAllAlternates;
    public static FeatureTags AboveBaseForms;
    public static FeatureTags AboveBaseMarkPositioning;
    public static FeatureTags AboveBaseSubstitutions;
    public static FeatureTags AlternativeFractions;
    public static FeatureTags Akhand;
    public static FeatureTags BelowBaseForms;
    public static FeatureTags BelowBaseMarkPositioning;
    public static FeatureTags BelowBaseSubstitutions;
    public static FeatureTags ContextualAlternates;
    public static FeatureTags CaseSensitiveForms;
    public static FeatureTags GlyphCompositionDecomposition;
    public static FeatureTags ConjunctFormAfterRo;
    public static FeatureTags ConjunctForms;
    public static FeatureTags ContextualLigatures;
    public static FeatureTags CenteredCjkPunctuation;
    public static FeatureTags CapitalSpacing;
    public static FeatureTags ContextualSwash;
    public static FeatureTags CursivePositioning;
    public static FeatureTags PetiteCapitalsFromCapitals;
    public static FeatureTags SmallCapitalsFromCapitals;
    public static FeatureTags Distances;
    public static FeatureTags DiscretionaryLigatures;
    public static FeatureTags Denominators;
    public static FeatureTags DotlessForms;
    public static FeatureTags ExpertForms;
    public static FeatureTags FinalGlyphOnLineAlternates;
    public static FeatureTags TerminalForm2;
    public static FeatureTags TerminalForm3;
    public static FeatureTags TerminalForms;
    public static FeatureTags FlattenedAscentForms;
    public static FeatureTags Fractions;
    public static FeatureTags FullWidths;
    public static FeatureTags HalfForms;
    public static FeatureTags HalantForms;
    public static FeatureTags AlternateHalfWidths;
    public static FeatureTags HistoricalForms;
    public static FeatureTags HorizontalKanaAlternates;
    public static FeatureTags HistoricalLigatures;
    public static FeatureTags Hangul;
    public static FeatureTags HojoKanjiForms;
    public static FeatureTags HalfWidths;
    public static FeatureTags InitialForms;
    public static FeatureTags IsolatedForms;
    public static FeatureTags Italics;
    public static FeatureTags JustificationAlternates;
    public static FeatureTags Jis78Forms;
    public static FeatureTags Jis83Forms;
    public static FeatureTags Jis90Forms;
    public static FeatureTags Jis2004;
    public static FeatureTags Kerning;
    public static FeatureTags LeftBounds;
    public static FeatureTags Ligatures;
    public static FeatureTags LeadingJamoForms;
    public static FeatureTags LiningFigures;
    public static FeatureTags LocalizedForms;
    public static FeatureTags LeftToRightGlyphAlternates;
    public static FeatureTags LeftToRightMirroredForms;
    public static FeatureTags MarkPositioning;
    public static FeatureTags MedialForms2;
    public static FeatureTags MedialForms;
    public static FeatureTags MathematicalGreek;
    public static FeatureTags MarkToMarkPositioning;
    public static FeatureTags Mset;
    public static FeatureTags AlternateAnnotationForms;
    public static FeatureTags NlcKanjiForms;
    public static FeatureTags NuktaForms;
    public static FeatureTags Numerators;
    public static FeatureTags OldstyleFigures;
    public static FeatureTags OpticalBounds;
    public static FeatureTags Ordinals;
    public static FeatureTags Ornaments;
    public static FeatureTags ProportionalAlternateWidths;
    public static FeatureTags PetiteCapitals;
    public static FeatureTags ProportionalKana;
    public static FeatureTags ProportionalFigures;
    public static FeatureTags PreBaseForms;
    public static FeatureTags PreBaseSubstitutions;
    public static FeatureTags PostBaseForms;
    public static FeatureTags PostBaseSubstitutions;
    public static FeatureTags ProportionalWidths;
    public static FeatureTags QuarterWidths;
    public static FeatureTags Randomize;
    public static FeatureTags RequiredContextualAlternates;
    public static FeatureTags RequiredLigatures;
    public static FeatureTags RakarForms;
    public static FeatureTags RephForm;
    public static FeatureTags RightBounds;
    public static FeatureTags RightToLeftAlternates;
    public static FeatureTags RightToLeftMirroredForms;
    public static FeatureTags RubyNotationForms;
    public static FeatureTags RequiredVariationAlternates;
    public static FeatureTags StylisticAlternates;
    public static FeatureTags ScientificInferiors;
    public static FeatureTags OpticalSize;
    public static FeatureTags SmallCapitals;
    public static FeatureTags SimplifiedForms;
    public static FeatureTags MathScriptStyleAlternates;
    public static FeatureTags StretchingGlyphDecomposition;
    public static FeatureTags Subscript;
    public static FeatureTags Superscript;
    public static FeatureTags Swash;
    public static FeatureTags Titling;
    public static FeatureTags TrailingJamoForms;
    public static FeatureTags TraditionalNameForms;
    public static FeatureTags TabularFigures;
    public static FeatureTags TraditionalForms;
    public static FeatureTags ThirdWidths;
    public static FeatureTags Unicase;
    public static FeatureTags AlternateVerticalMetrics;
    public static FeatureTags VattuVariants;
    public static FeatureTags VerticalAlternates;
    public static FeatureTags AlternateVerticalHalfMetrics;
    public static FeatureTags VowelJamoForms;
    public static FeatureTags VerticalKanaAlternates;
    public static FeatureTags VerticalKerning;
    public static FeatureTags ProportionalAlternateVerticalMetrics;
    public static FeatureTags VerticalAlternatesAndRotation;
    public static FeatureTags VerticalAlternatesForRotation;
    public static FeatureTags SlashedZero;
}
public enum SixLabors.Fonts.Tables.AdvancedTypographic.GlyphClassDef : Enum {
    public int value__;
    public static GlyphClassDef BaseGlyph;
    public static GlyphClassDef LigatureGlyph;
    public static GlyphClassDef MarkGlyph;
    public static GlyphClassDef ComponentGlyph;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GlyphDefinitionTable : Table {
    [NullableAttribute("1")]
internal static string TableName;
    [CompilerGeneratedAttribute]
private ClassDefinitionTable <GlyphClassDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private AttachmentListTable <AttachmentListTable>k__BackingField;
    [CompilerGeneratedAttribute]
private LigatureCaretList <LigatureCaretList>k__BackingField;
    [CompilerGeneratedAttribute]
private ClassDefinitionTable <MarkAttachmentClassDef>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkGlyphSetsTable <MarkGlyphSetsTable>k__BackingField;
    public ClassDefinitionTable GlyphClassDefinition { get; private set; }
    public AttachmentListTable AttachmentListTable { get; private set; }
    public LigatureCaretList LigatureCaretList { get; private set; }
    public ClassDefinitionTable MarkAttachmentClassDef { get; private set; }
    public MarkGlyphSetsTable MarkGlyphSetsTable { get; private set; }
    [CompilerGeneratedAttribute]
public ClassDefinitionTable get_GlyphClassDefinition();
    [CompilerGeneratedAttribute]
private void set_GlyphClassDefinition(ClassDefinitionTable value);
    [CompilerGeneratedAttribute]
public AttachmentListTable get_AttachmentListTable();
    [CompilerGeneratedAttribute]
private void set_AttachmentListTable(AttachmentListTable value);
    [CompilerGeneratedAttribute]
public LigatureCaretList get_LigatureCaretList();
    [CompilerGeneratedAttribute]
private void set_LigatureCaretList(LigatureCaretList value);
    [CompilerGeneratedAttribute]
public ClassDefinitionTable get_MarkAttachmentClassDef();
    [CompilerGeneratedAttribute]
private void set_MarkAttachmentClassDef(ClassDefinitionTable value);
    [CompilerGeneratedAttribute]
public MarkGlyphSetsTable get_MarkGlyphSetsTable();
    [CompilerGeneratedAttribute]
private void set_MarkGlyphSetsTable(MarkGlyphSetsTable value);
    [NullableContextAttribute("1")]
public static GlyphDefinitionTable Load(FontReader reader);
    public bool TryGetGlyphClass(ushort glyphId, Nullable`1& glyphClass);
    public bool TryGetMarkAttachmentClass(ushort glyphId, Nullable`1& markAttachmentClass);
    [NullableContextAttribute("1")]
public static GlyphDefinitionTable Load(BigEndianBinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("X: {XCoordinate}, Y: {YCoordinate}")]
internal abstract class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.AnchorTable : object {
    [CompilerGeneratedAttribute]
private short <XCoordinate>k__BackingField;
    [CompilerGeneratedAttribute]
private short <YCoordinate>k__BackingField;
    protected short XCoordinate { get; }
    protected short YCoordinate { get; }
    protected AnchorTable(short xCoordinate, short yCoordinate);
    [CompilerGeneratedAttribute]
protected short get_XCoordinate();
    [CompilerGeneratedAttribute]
protected short get_YCoordinate();
    public abstract virtual AnchorXY GetAnchor(FontMetrics fontMetrics, GlyphShapingData data, GlyphPositioningCollection collection);
    public static AnchorTable Load(BigEndianBinaryReader reader, long offset);
}
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.AnchorXY : ValueType {
    [CompilerGeneratedAttribute]
private short <XCoordinate>k__BackingField;
    [CompilerGeneratedAttribute]
private short <YCoordinate>k__BackingField;
    public short XCoordinate { get; }
    public short YCoordinate { get; }
    public AnchorXY(short x, short y);
    [CompilerGeneratedAttribute]
public short get_XCoordinate();
    [CompilerGeneratedAttribute]
public short get_YCoordinate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.BaseArrayTable : object {
    [CompilerGeneratedAttribute]
private BaseRecord[] <BaseRecords>k__BackingField;
    public BaseRecord[] BaseRecords { get; }
    public BaseArrayTable(BigEndianBinaryReader reader, long offset, ushort classCount);
    [CompilerGeneratedAttribute]
public BaseRecord[] get_BaseRecords();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.BaseRecord : ValueType {
    [CompilerGeneratedAttribute]
private AnchorTable[] <BaseAnchorTables>k__BackingField;
    public AnchorTable[] BaseAnchorTables { get; }
    public BaseRecord(BigEndianBinaryReader reader, ushort classCount, long offset);
    [CompilerGeneratedAttribute]
public AnchorTable[] get_BaseAnchorTables();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.Class1Record : object {
    [CompilerGeneratedAttribute]
private Class2Record[] <Class2Records>k__BackingField;
    public Class2Record[] Class2Records { get; }
    private Class1Record(Class2Record[] class2Records);
    [CompilerGeneratedAttribute]
public Class2Record[] get_Class2Records();
    public static Class1Record Load(BigEndianBinaryReader reader, int class2Count, ValueFormat valueFormat1, ValueFormat valueFormat2);
}
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.Class2Record : ValueType {
    [CompilerGeneratedAttribute]
private ValueRecord <ValueRecord1>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueRecord <ValueRecord2>k__BackingField;
    public ValueRecord ValueRecord1 { get; }
    public ValueRecord ValueRecord2 { get; }
    [NullableContextAttribute("1")]
public Class2Record(BigEndianBinaryReader reader, ValueFormat valueFormat1, ValueFormat valueFormat2);
    [CompilerGeneratedAttribute]
public ValueRecord get_ValueRecord1();
    [CompilerGeneratedAttribute]
public ValueRecord get_ValueRecord2();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.ComponentRecord : object {
    [CompilerGeneratedAttribute]
private AnchorTable[] <LigatureAnchorTables>k__BackingField;
    public AnchorTable[] LigatureAnchorTables { get; }
    public ComponentRecord(BigEndianBinaryReader reader, ushort markClassCount, long offset);
    [CompilerGeneratedAttribute]
public AnchorTable[] get_LigatureAnchorTables();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.EntryExitAnchors : object {
    [CompilerGeneratedAttribute]
private AnchorTable <EntryAnchor>k__BackingField;
    [CompilerGeneratedAttribute]
private AnchorTable <ExitAnchor>k__BackingField;
    public AnchorTable EntryAnchor { get; }
    public AnchorTable ExitAnchor { get; }
    [NullableContextAttribute("1")]
public EntryExitAnchors(BigEndianBinaryReader reader, long offset, EntryExitRecord entryExitRecord);
    [CompilerGeneratedAttribute]
public AnchorTable get_EntryAnchor();
    [CompilerGeneratedAttribute]
public AnchorTable get_ExitAnchor();
}
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.EntryExitRecord : ValueType {
    [CompilerGeneratedAttribute]
private ushort <EntryAnchorOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <ExitAnchorOffset>k__BackingField;
    public ushort EntryAnchorOffset { get; }
    public ushort ExitAnchorOffset { get; }
    [NullableContextAttribute("1")]
public EntryExitRecord(BigEndianBinaryReader reader, long offset);
    [CompilerGeneratedAttribute]
public ushort get_EntryAnchorOffset();
    [CompilerGeneratedAttribute]
public ushort get_ExitAnchorOffset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LigatureArrayTable : object {
    [CompilerGeneratedAttribute]
private LigatureAttachTable[] <LigatureAttachTables>k__BackingField;
    public LigatureAttachTable[] LigatureAttachTables { get; }
    public LigatureArrayTable(BigEndianBinaryReader reader, long offset, ushort markClassCount);
    [CompilerGeneratedAttribute]
public LigatureAttachTable[] get_LigatureAttachTables();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LigatureAttachTable : object {
    [CompilerGeneratedAttribute]
private ComponentRecord[] <ComponentRecords>k__BackingField;
    public ComponentRecord[] ComponentRecords { get; }
    public LigatureAttachTable(BigEndianBinaryReader reader, ushort markClassCount, long offset);
    [CompilerGeneratedAttribute]
public ComponentRecord[] get_ComponentRecords();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupListTable : object {
    [CompilerGeneratedAttribute]
private ushort <LookupCount>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupTable[] <LookupTables>k__BackingField;
    public ushort LookupCount { get; }
    public LookupTable[] LookupTables { get; }
    private LookupListTable(ushort lookupCount, LookupTable[] lookupTables);
    [CompilerGeneratedAttribute]
public ushort get_LookupCount();
    [CompilerGeneratedAttribute]
public LookupTable[] get_LookupTables();
    public static LookupListTable Load(BigEndianBinaryReader reader, long offset);
}
internal abstract class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupSubTable : object {
    [CompilerGeneratedAttribute]
private LookupFlags <LookupFlags>k__BackingField;
    public LookupFlags LookupFlags { get; }
    protected LookupSubTable(LookupFlags lookupFlags);
    [CompilerGeneratedAttribute]
public LookupFlags get_LookupFlags();
    [NullableContextAttribute("1")]
public abstract virtual bool TryUpdatePosition(FontMetrics fontMetrics, GPosTable table, GlyphPositioningCollection collection, Tag feature, int index, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupTable : object {
    [CompilerGeneratedAttribute]
private ushort <LookupType>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupFlags <LookupFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MarkFilteringSet>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupSubTable[] <LookupSubTables>k__BackingField;
    public ushort LookupType { get; }
    public LookupFlags LookupFlags { get; }
    public ushort MarkFilteringSet { get; }
    public LookupSubTable[] LookupSubTables { get; }
    private LookupTable(ushort lookupType, LookupFlags lookupFlags, ushort markFilteringSet, LookupSubTable[] lookupSubTables);
    [CompilerGeneratedAttribute]
public ushort get_LookupType();
    [CompilerGeneratedAttribute]
public LookupFlags get_LookupFlags();
    [CompilerGeneratedAttribute]
public ushort get_MarkFilteringSet();
    [CompilerGeneratedAttribute]
public LookupSubTable[] get_LookupSubTables();
    public static LookupTable Load(BigEndianBinaryReader reader, long offset);
    private static LookupSubTable LoadLookupSubTable(ushort lookupType, LookupFlags lookupFlags, BigEndianBinaryReader reader, long offset);
    public bool TryUpdatePosition(FontMetrics fontMetrics, GPosTable table, GlyphPositioningCollection collection, Tag feature, int index, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType1Format1SubTable : LookupSubTable {
    private ValueRecord valueRecord;
    private CoverageTable coverageTable;
    private LookupType1Format1SubTable(ValueRecord valueRecord, CoverageTable coverageTable, LookupFlags lookupFlags);
    public static LookupType1Format1SubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
    public virtual bool TryUpdatePosition(FontMetrics fontMetrics, GPosTable table, GlyphPositioningCollection collection, Tag feature, int index, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType1Format2SubTable : LookupSubTable {
    private CoverageTable coverageTable;
    private ValueRecord[] valueRecords;
    private LookupType1Format2SubTable(ValueRecord[] valueRecords, CoverageTable coverageTable, LookupFlags lookupFlags);
    public static LookupType1Format2SubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
    public virtual bool TryUpdatePosition(FontMetrics fontMetrics, GPosTable table, GlyphPositioningCollection collection, Tag feature, int index, int count);
}
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType1SubTable : object {
    [NullableContextAttribute("1")]
public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType2SubTable : object {
    public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType3SubTable : object {
    public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType4SubTable : object {
    public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType5SubTable : object {
    public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType6SubTable : object {
    public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType7SubTable : object {
    public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType8SubTable : object {
    public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
}
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType9Format1SubTable : object {
    [NullableContextAttribute("1")]
public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags, Func`5<ushort, LookupFlags, BigEndianBinaryReader, long, LookupSubTable> subTableLoader);
}
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.LookupType9SubTable : object {
    [NullableContextAttribute("1")]
public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags, Func`5<ushort, LookupFlags, BigEndianBinaryReader, long, LookupSubTable> subTableLoader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.Mark2ArrayTable : object {
    [CompilerGeneratedAttribute]
private Mark2Record[] <Mark2Records>k__BackingField;
    public Mark2Record[] Mark2Records { get; }
    public Mark2ArrayTable(BigEndianBinaryReader reader, ushort markClassCount, long offset);
    [CompilerGeneratedAttribute]
public Mark2Record[] get_Mark2Records();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.Mark2Record : object {
    [CompilerGeneratedAttribute]
private AnchorTable[] <MarkAnchorTable>k__BackingField;
    public AnchorTable[] MarkAnchorTable { get; }
    public Mark2Record(BigEndianBinaryReader reader, ushort markClassCount, long offset);
    [CompilerGeneratedAttribute]
public AnchorTable[] get_MarkAnchorTable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.MarkArrayTable : object {
    [CompilerGeneratedAttribute]
private MarkRecord[] <MarkRecords>k__BackingField;
    public MarkRecord[] MarkRecords { get; }
    public MarkArrayTable(BigEndianBinaryReader reader, long offset);
    [CompilerGeneratedAttribute]
public MarkRecord[] get_MarkRecords();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("MarkClass: {MarkClass}, AnchorTable: {MarkAnchorTable}")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.MarkRecord : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <MarkClass>k__BackingField;
    [CompilerGeneratedAttribute]
private AnchorTable <MarkAnchorTable>k__BackingField;
    public UInt32 MarkClass { get; }
    public AnchorTable MarkAnchorTable { get; }
    public MarkRecord(BigEndianBinaryReader reader, long offset);
    [CompilerGeneratedAttribute]
public UInt32 get_MarkClass();
    [CompilerGeneratedAttribute]
public AnchorTable get_MarkAnchorTable();
}
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.NotImplementedSubTable : LookupSubTable {
    [NullableContextAttribute("1")]
public virtual bool TryUpdatePosition(FontMetrics fontMetrics, GPosTable table, GlyphPositioningCollection collection, Tag feature, int index, int count);
}
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.PairValueRecord : ValueType {
    [CompilerGeneratedAttribute]
private ushort <SecondGlyph>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueRecord <ValueRecord1>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueRecord <ValueRecord2>k__BackingField;
    public ushort SecondGlyph { get; }
    public ValueRecord ValueRecord1 { get; }
    public ValueRecord ValueRecord2 { get; }
    [NullableContextAttribute("1")]
public PairValueRecord(BigEndianBinaryReader reader, ValueFormat valueFormat1, ValueFormat valueFormat2);
    [CompilerGeneratedAttribute]
public ushort get_SecondGlyph();
    [CompilerGeneratedAttribute]
public ValueRecord get_ValueRecord1();
    [CompilerGeneratedAttribute]
public ValueRecord get_ValueRecord2();
}
[FlagsAttribute]
internal enum SixLabors.Fonts.Tables.AdvancedTypographic.GPos.ValueFormat : Enum {
    public ushort value__;
    public static ValueFormat XPlacement;
    public static ValueFormat YPlacement;
    public static ValueFormat XAdvance;
    public static ValueFormat YAdvance;
    public static ValueFormat XPlacementDevice;
    public static ValueFormat YPlacementDevice;
    public static ValueFormat XAdvanceDevice;
    public static ValueFormat YAdvanceDevice;
}
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPos.ValueRecord : ValueType {
    [CompilerGeneratedAttribute]
private short <XPlacement>k__BackingField;
    [CompilerGeneratedAttribute]
private short <YPlacement>k__BackingField;
    [CompilerGeneratedAttribute]
private short <XAdvance>k__BackingField;
    [CompilerGeneratedAttribute]
private short <YAdvance>k__BackingField;
    [CompilerGeneratedAttribute]
private short <XPlacementDeviceOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private short <YPlacementDeviceOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private short <XAdvanceDeviceOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private short <YAdvanceDeviceOffset>k__BackingField;
    public short XPlacement { get; }
    public short YPlacement { get; }
    public short XAdvance { get; }
    public short YAdvance { get; }
    public short XPlacementDeviceOffset { get; }
    public short YPlacementDeviceOffset { get; }
    public short XAdvanceDeviceOffset { get; }
    public short YAdvanceDeviceOffset { get; }
    [NullableContextAttribute("1")]
public ValueRecord(BigEndianBinaryReader reader, ValueFormat valueFormat);
    [CompilerGeneratedAttribute]
public short get_XPlacement();
    [CompilerGeneratedAttribute]
public short get_YPlacement();
    [CompilerGeneratedAttribute]
public short get_XAdvance();
    [CompilerGeneratedAttribute]
public short get_YAdvance();
    [CompilerGeneratedAttribute]
public short get_XPlacementDeviceOffset();
    [CompilerGeneratedAttribute]
public short get_YPlacementDeviceOffset();
    [CompilerGeneratedAttribute]
public short get_XAdvanceDeviceOffset();
    [CompilerGeneratedAttribute]
public short get_YAdvanceDeviceOffset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GPosTable : Table {
    private static Tag KernTag;
    private static Tag VKernTag;
    internal static string TableName;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ScriptList <ScriptList>k__BackingField;
    [CompilerGeneratedAttribute]
private FeatureListTable <FeatureList>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupListTable <LookupList>k__BackingField;
    [NullableAttribute("2")]
public ScriptList ScriptList { get; }
    public FeatureListTable FeatureList { get; }
    public LookupListTable LookupList { get; }
    public GPosTable(ScriptList scriptList, FeatureListTable featureList, LookupListTable lookupList);
    private static GPosTable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ScriptList get_ScriptList();
    [CompilerGeneratedAttribute]
public FeatureListTable get_FeatureList();
    [CompilerGeneratedAttribute]
public LookupListTable get_LookupList();
    public static GPosTable Load(FontReader fontReader);
    internal static GPosTable Load(BigEndianBinaryReader reader);
    public bool TryUpdatePositions(FontMetrics fontMetrics, GlyphPositioningCollection collection, Boolean& kerned);
    private bool TryGetFeatureLookups(Tag& stageFeature, ScriptClass script, List`1& value);
    private Tag GetUnicodeScriptTag(ScriptClass script);
    private List`1<ValueTuple`3<Tag, ushort, LookupTable>> GetFeatureLookups(Tag& stageFeature, LangSysTable[] langSysTables);
    private static bool HasFeature(List`1<TagEntry> glyphFeatures, Tag& feature);
    private static void FixCursiveAttachment(GlyphPositioningCollection collection, int index, int count);
    private static void FixMarkAttachment(GlyphPositioningCollection collection, int index, int count);
    private static void ZeroMarkAdvances(FontMetrics fontMetrics, GlyphPositioningCollection collection, int index, int count);
    private static void UpdatePositions(FontMetrics fontMetrics, GlyphPositioningCollection collection, int index, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupListTable : object {
    [CompilerGeneratedAttribute]
private ushort <LookupCount>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupTable[] <LookupTables>k__BackingField;
    public ushort LookupCount { get; }
    public LookupTable[] LookupTables { get; }
    private LookupListTable(ushort lookupCount, LookupTable[] lookupTables);
    [CompilerGeneratedAttribute]
public ushort get_LookupCount();
    [CompilerGeneratedAttribute]
public LookupTable[] get_LookupTables();
    public static LookupListTable Load(BigEndianBinaryReader reader, long offset);
}
internal abstract class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupSubTable : object {
    [CompilerGeneratedAttribute]
private LookupFlags <LookupFlags>k__BackingField;
    public LookupFlags LookupFlags { get; }
    protected LookupSubTable(LookupFlags lookupFlags);
    [CompilerGeneratedAttribute]
public LookupFlags get_LookupFlags();
    [NullableContextAttribute("1")]
public abstract virtual bool TrySubstitution(FontMetrics fontMetrics, GSubTable table, GlyphSubstitutionCollection collection, Tag feature, int index, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupTable : object {
    [CompilerGeneratedAttribute]
private ushort <LookupType>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupFlags <LookupFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MarkFilteringSet>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupSubTable[] <LookupSubTables>k__BackingField;
    public ushort LookupType { get; }
    public LookupFlags LookupFlags { get; }
    public ushort MarkFilteringSet { get; }
    public LookupSubTable[] LookupSubTables { get; }
    private LookupTable(ushort lookupType, LookupFlags lookupFlags, ushort markFilteringSet, LookupSubTable[] lookupSubTables);
    [CompilerGeneratedAttribute]
public ushort get_LookupType();
    [CompilerGeneratedAttribute]
public LookupFlags get_LookupFlags();
    [CompilerGeneratedAttribute]
public ushort get_MarkFilteringSet();
    [CompilerGeneratedAttribute]
public LookupSubTable[] get_LookupSubTables();
    public static LookupTable Load(BigEndianBinaryReader reader, long offset);
    public bool TrySubstitution(FontMetrics fontMetrics, GSubTable table, GlyphSubstitutionCollection collection, Tag feature, int index, int count);
    private static LookupSubTable LoadLookupSubTable(ushort lookupType, LookupFlags lookupFlags, BigEndianBinaryReader reader, long offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType1Format1SubTable : LookupSubTable {
    private ushort deltaGlyphId;
    private CoverageTable coverageTable;
    private LookupType1Format1SubTable(ushort deltaGlyphId, CoverageTable coverageTable, LookupFlags lookupFlags);
    public static LookupType1Format1SubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
    public virtual bool TrySubstitution(FontMetrics fontMetrics, GSubTable table, GlyphSubstitutionCollection collection, Tag feature, int index, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType1Format2SubTable : LookupSubTable {
    private CoverageTable coverageTable;
    private UInt16[] substituteGlyphs;
    private LookupType1Format2SubTable(UInt16[] substituteGlyphs, CoverageTable coverageTable, LookupFlags lookupFlags);
    public static LookupType1Format2SubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
    public virtual bool TrySubstitution(FontMetrics fontMetrics, GSubTable table, GlyphSubstitutionCollection collection, Tag feature, int index, int count);
}
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType1SubTable : object {
    [NullableContextAttribute("1")]
public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType2Format1SubTable : LookupSubTable {
    private SequenceTable[] sequenceTables;
    private CoverageTable coverageTable;
    private LookupType2Format1SubTable(SequenceTable[] sequenceTables, CoverageTable coverageTable, LookupFlags lookupFlags);
    public static LookupType2Format1SubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
    public virtual bool TrySubstitution(FontMetrics fontMetrics, GSubTable table, GlyphSubstitutionCollection collection, Tag feature, int index, int count);
}
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType2SubTable : object {
    [NullableContextAttribute("1")]
public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType3Format1SubTable : LookupSubTable {
    private AlternateSetTable[] alternateSetTables;
    private CoverageTable coverageTable;
    private LookupType3Format1SubTable(AlternateSetTable[] alternateSetTables, CoverageTable coverageTable, LookupFlags lookupFlags);
    public static LookupType3Format1SubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
    public virtual bool TrySubstitution(FontMetrics fontMetrics, GSubTable table, GlyphSubstitutionCollection collection, Tag feature, int index, int count);
}
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType3SubTable : object {
    [NullableContextAttribute("1")]
public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType4Format1SubTable : LookupSubTable {
    private LigatureSetTable[] ligatureSetTables;
    private CoverageTable coverageTable;
    private LookupType4Format1SubTable(LigatureSetTable[] ligatureSetTables, CoverageTable coverageTable, LookupFlags lookupFlags);
    public static LookupType4Format1SubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
    public virtual bool TrySubstitution(FontMetrics fontMetrics, GSubTable table, GlyphSubstitutionCollection collection, Tag feature, int index, int count);
}
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType4SubTable : object {
    [NullableContextAttribute("1")]
public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType5Format1SubTable : LookupSubTable {
    private CoverageTable coverageTable;
    private SequenceRuleSetTable[] seqRuleSetTables;
    private LookupType5Format1SubTable(CoverageTable coverageTable, SequenceRuleSetTable[] seqRuleSetTables, LookupFlags lookupFlags);
    public static LookupType5Format1SubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
    public virtual bool TrySubstitution(FontMetrics fontMetrics, GSubTable table, GlyphSubstitutionCollection collection, Tag feature, int index, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType5Format2SubTable : LookupSubTable {
    private CoverageTable coverageTable;
    private ClassDefinitionTable classDefinitionTable;
    private ClassSequenceRuleSetTable[] sequenceRuleSetTables;
    private LookupType5Format2SubTable(ClassSequenceRuleSetTable[] sequenceRuleSetTables, ClassDefinitionTable classDefinitionTable, CoverageTable coverageTable, LookupFlags lookupFlags);
    public static LookupType5Format2SubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
    public virtual bool TrySubstitution(FontMetrics fontMetrics, GSubTable table, GlyphSubstitutionCollection collection, Tag feature, int index, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType5Format3SubTable : LookupSubTable {
    private CoverageTable[] coverageTables;
    private SequenceLookupRecord[] sequenceLookupRecords;
    private LookupType5Format3SubTable(CoverageTable[] coverageTables, SequenceLookupRecord[] sequenceLookupRecords, LookupFlags lookupFlags);
    public static LookupType5Format3SubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
    public virtual bool TrySubstitution(FontMetrics fontMetrics, GSubTable table, GlyphSubstitutionCollection collection, Tag feature, int index, int count);
}
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType5SubTable : object {
    [NullableContextAttribute("1")]
public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType6Format1SubTable : LookupSubTable {
    private CoverageTable coverageTable;
    private ChainedSequenceRuleSetTable[] seqRuleSetTables;
    private LookupType6Format1SubTable(CoverageTable coverageTable, ChainedSequenceRuleSetTable[] seqRuleSetTables, LookupFlags lookupFlags);
    public static LookupType6Format1SubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
    public virtual bool TrySubstitution(FontMetrics fontMetrics, GSubTable table, GlyphSubstitutionCollection collection, Tag feature, int index, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType6Format2SubTable : LookupSubTable {
    private CoverageTable coverageTable;
    private ClassDefinitionTable inputClassDefinitionTable;
    private ClassDefinitionTable backtrackClassDefinitionTable;
    private ClassDefinitionTable lookaheadClassDefinitionTable;
    private ChainedClassSequenceRuleSetTable[] sequenceRuleSetTables;
    private LookupType6Format2SubTable(ChainedClassSequenceRuleSetTable[] sequenceRuleSetTables, ClassDefinitionTable backtrackClassDefinitionTable, ClassDefinitionTable inputClassDefinitionTable, ClassDefinitionTable lookaheadClassDefinitionTable, CoverageTable coverageTable, LookupFlags lookupFlags);
    public static LookupType6Format2SubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
    public virtual bool TrySubstitution(FontMetrics fontMetrics, GSubTable table, GlyphSubstitutionCollection collection, Tag feature, int index, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType6Format3SubTable : LookupSubTable {
    private SequenceLookupRecord[] sequenceLookupRecords;
    private CoverageTable[] backtrackCoverageTables;
    private CoverageTable[] inputCoverageTables;
    private CoverageTable[] lookaheadCoverageTables;
    private LookupType6Format3SubTable(SequenceLookupRecord[] seqLookupRecords, CoverageTable[] backtrackCoverageTables, CoverageTable[] inputCoverageTables, CoverageTable[] lookaheadCoverageTables, LookupFlags lookupFlags);
    public static LookupType6Format3SubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
    public virtual bool TrySubstitution(FontMetrics fontMetrics, GSubTable table, GlyphSubstitutionCollection collection, Tag feature, int index, int count);
}
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType6SubTable : object {
    [NullableContextAttribute("1")]
public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
}
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType7Format1SubTable : object {
    [NullableContextAttribute("1")]
public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags, Func`5<ushort, LookupFlags, BigEndianBinaryReader, long, LookupSubTable> subTableLoader);
}
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType7SubTable : object {
    [NullableContextAttribute("1")]
public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags, Func`5<ushort, LookupFlags, BigEndianBinaryReader, long, LookupSubTable> subTableLoader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType8Format1SubTable : LookupSubTable {
    private UInt16[] substituteGlyphIds;
    private CoverageTable coverageTable;
    private CoverageTable[] backtrackCoverageTables;
    private CoverageTable[] lookaheadCoverageTables;
    private LookupType8Format1SubTable(UInt16[] substituteGlyphIds, CoverageTable coverageTable, CoverageTable[] backtrackCoverageTables, CoverageTable[] lookaheadCoverageTables, LookupFlags lookupFlags);
    public static LookupType8Format1SubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
    public virtual bool TrySubstitution(FontMetrics fontMetrics, GSubTable table, GlyphSubstitutionCollection collection, Tag feature, int index, int count);
}
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.LookupType8SubTable : object {
    [NullableContextAttribute("1")]
public static LookupSubTable Load(BigEndianBinaryReader reader, long offset, LookupFlags lookupFlags);
}
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GSub.NotImplementedSubTable : LookupSubTable {
    [NullableContextAttribute("1")]
public virtual bool TrySubstitution(FontMetrics fontMetrics, GSubTable table, GlyphSubstitutionCollection collection, Tag feature, int index, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.GSubTable : Table {
    internal static string TableName;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ScriptList <ScriptList>k__BackingField;
    [CompilerGeneratedAttribute]
private FeatureListTable <FeatureList>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupListTable <LookupList>k__BackingField;
    [NullableAttribute("2")]
public ScriptList ScriptList { get; }
    public FeatureListTable FeatureList { get; }
    public LookupListTable LookupList { get; }
    public GSubTable(ScriptList scriptList, FeatureListTable featureList, LookupListTable lookupList);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ScriptList get_ScriptList();
    [CompilerGeneratedAttribute]
public FeatureListTable get_FeatureList();
    [CompilerGeneratedAttribute]
public LookupListTable get_LookupList();
    public static GSubTable Load(FontReader fontReader);
    internal static GSubTable Load(BigEndianBinaryReader reader);
    public void ApplySubstitution(FontMetrics fontMetrics, GlyphSubstitutionCollection collection);
    internal void ApplyFeature(FontMetrics fontMetrics, GlyphSubstitutionCollection collection, SkippingGlyphIterator& iterator, Tag& featureTag, ScriptClass current, int index, Int32& count, Int32& i, Int32& collectionCount, int maxCount, int maxOperationsCount, Int32& currentOperations);
    internal bool TryGetFeatureLookups(Tag& stageFeature, ScriptClass script, List`1& value);
    private Tag GetUnicodeScriptTag(ScriptClass script);
    private List`1<ValueTuple`3<Tag, ushort, LookupTable>> GetFeatureLookups(Tag& stageFeature, LangSysTable[] langSysTables);
    private static bool HasFeature(List`1<TagEntry> glyphFeatures, Tag& feature);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.LangSysTable : object {
    [CompilerGeneratedAttribute]
private UInt32 <LangSysTag>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <RequiredFeatureIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt16[] <FeatureIndices>k__BackingField;
    public UInt32 LangSysTag { get; }
    public ushort RequiredFeatureIndex { get; }
    public UInt16[] FeatureIndices { get; }
    private LangSysTable(UInt32 langSysTag, ushort requiredFeatureIndex, UInt16[] featureIndices);
    [CompilerGeneratedAttribute]
public UInt32 get_LangSysTag();
    [CompilerGeneratedAttribute]
public ushort get_RequiredFeatureIndex();
    [CompilerGeneratedAttribute]
public UInt16[] get_FeatureIndices();
    public static LangSysTable Load(UInt32 langSysTag, BigEndianBinaryReader reader, long offset);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.LigatureCaretList : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private LigatureGlyph[] <LigatureGlyphs>k__BackingField;
    [CompilerGeneratedAttribute]
private CoverageTable <CoverageTable>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public LigatureGlyph[] LigatureGlyphs { get; internal set; }
    public CoverageTable CoverageTable { get; internal set; }
    [CompilerGeneratedAttribute]
public LigatureGlyph[] get_LigatureGlyphs();
    [CompilerGeneratedAttribute]
internal void set_LigatureGlyphs(LigatureGlyph[] value);
    [CompilerGeneratedAttribute]
public CoverageTable get_CoverageTable();
    [CompilerGeneratedAttribute]
internal void set_CoverageTable(CoverageTable value);
    [NullableContextAttribute("1")]
public static LigatureCaretList Load(BigEndianBinaryReader reader, long offset);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.LigatureGlyph : object {
    [CompilerGeneratedAttribute]
private UInt16[] <CaretValueOffsets>k__BackingField;
    public UInt16[] CaretValueOffsets { get; internal set; }
    [CompilerGeneratedAttribute]
public UInt16[] get_CaretValueOffsets();
    [CompilerGeneratedAttribute]
internal void set_CaretValueOffsets(UInt16[] value);
    [NullableContextAttribute("1")]
public static LigatureGlyph Load(BigEndianBinaryReader reader, long offset);
}
[FlagsAttribute]
internal enum SixLabors.Fonts.Tables.AdvancedTypographic.LookupFlags : Enum {
    public ushort value__;
    public static LookupFlags RightToLeft;
    public static LookupFlags IgnoreBaseGlyphs;
    public static LookupFlags IgnoreLigatures;
    public static LookupFlags IgnoreMarks;
    public static LookupFlags UseMarkFilteringSet;
    public static LookupFlags Reserved;
    public static LookupFlags MarkAttachmentTypeMask;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.MarkGlyphSetsTable : object {
    [CompilerGeneratedAttribute]
private ushort <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt16[] <CoverageOffset>k__BackingField;
    public ushort Format { get; internal set; }
    public UInt16[] CoverageOffset { get; internal set; }
    [CompilerGeneratedAttribute]
public ushort get_Format();
    [CompilerGeneratedAttribute]
internal void set_Format(ushort value);
    [CompilerGeneratedAttribute]
public UInt16[] get_CoverageOffset();
    [CompilerGeneratedAttribute]
internal void set_CoverageOffset(UInt16[] value);
    [NullableContextAttribute("1")]
public static MarkGlyphSetsTable Load(BigEndianBinaryReader reader, long offset);
}
internal enum SixLabors.Fonts.Tables.AdvancedTypographic.MarkZeroingMode : Enum {
    public int value__;
    public static MarkZeroingMode PreGPos;
    public static MarkZeroingMode PostGpos;
    public static MarkZeroingMode None;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.ScriptList : Dictionary`2<Tag, ScriptListTable> {
    private Tag scriptTag;
    private ScriptList(Tag scriptTag);
    public static ScriptList Load(BigEndianBinaryReader reader, long offset);
    public ScriptListTable Default();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.ScriptListTable : object {
    [CompilerGeneratedAttribute]
private Tag <ScriptTag>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private LangSysTable <DefaultLangSysTable>k__BackingField;
    [CompilerGeneratedAttribute]
private LangSysTable[] <LangSysTables>k__BackingField;
    public Tag ScriptTag { get; }
    [NullableAttribute("2")]
public LangSysTable DefaultLangSysTable { get; }
    public LangSysTable[] LangSysTables { get; }
    private ScriptListTable(LangSysTable[] langSysTables, LangSysTable defaultLang, Tag scriptTag);
    [CompilerGeneratedAttribute]
public Tag get_ScriptTag();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public LangSysTable get_DefaultLangSysTable();
    [CompilerGeneratedAttribute]
public LangSysTable[] get_LangSysTables();
    public static ScriptListTable Load(Tag scriptTag, BigEndianBinaryReader reader, long offset);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("SequenceIndex: {SequenceIndex}, LookupListIndex: {LookupListIndex}")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.SequenceLookupRecord : ValueType {
    [CompilerGeneratedAttribute]
private ushort <SequenceIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <LookupListIndex>k__BackingField;
    public ushort SequenceIndex { get; }
    public ushort LookupListIndex { get; }
    public SequenceLookupRecord(ushort sequenceIndex, ushort lookupListIndex);
    [CompilerGeneratedAttribute]
public ushort get_SequenceIndex();
    [CompilerGeneratedAttribute]
public ushort get_LookupListIndex();
    [NullableContextAttribute("1")]
public static SequenceLookupRecord[] LoadArray(BigEndianBinaryReader reader, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.SequenceRuleSetTable : object {
    [CompilerGeneratedAttribute]
private SequenceRuleTable[] <SequenceRuleTables>k__BackingField;
    public SequenceRuleTable[] SequenceRuleTables { get; }
    private SequenceRuleSetTable(SequenceRuleTable[] sequenceRuleTables);
    [CompilerGeneratedAttribute]
public SequenceRuleTable[] get_SequenceRuleTables();
    public static SequenceRuleSetTable Load(BigEndianBinaryReader reader, long offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.SequenceRuleTable : object {
    [CompilerGeneratedAttribute]
private UInt16[] <InputSequence>k__BackingField;
    [CompilerGeneratedAttribute]
private SequenceLookupRecord[] <SequenceLookupRecords>k__BackingField;
    public UInt16[] InputSequence { get; }
    public SequenceLookupRecord[] SequenceLookupRecords { get; }
    private SequenceRuleTable(UInt16[] inputSequence, SequenceLookupRecord[] seqLookupRecords);
    [CompilerGeneratedAttribute]
public UInt16[] get_InputSequence();
    [CompilerGeneratedAttribute]
public SequenceLookupRecord[] get_SequenceLookupRecords();
    public static SequenceRuleTable Load(BigEndianBinaryReader reader, long offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.Shapers.ArabicShaper : DefaultShaper {
    private static Tag MsetTag;
    private static Tag FinaTag;
    private static Tag Fin2Tag;
    private static Tag Fin3Tag;
    private static Tag IsolTag;
    private static Tag InitTag;
    private static Tag MediTag;
    private static Tag Med2Tag;
    private static byte None;
    private static byte Isol;
    private static byte Fina;
    private static byte Fin2;
    private static byte Fin3;
    private static byte Medi;
    private static byte Med2;
    private static byte Init;
    private static Byte[][0...,0...] StateTable;
    public ArabicShaper(ScriptClass script, TextOptions textOptions);
    private static ArabicShaper();
    protected virtual void PlanFeatures(IGlyphShapingCollection collection, int index, int count);
    protected virtual void AssignFeatures(IGlyphShapingCollection collection, int index, int count);
    private static int GetShapingClassIndex(ArabicJoiningType joiningType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class SixLabors.Fonts.Tables.AdvancedTypographic.Shapers.BaseShaper : object {
    [CompilerGeneratedAttribute]
private ScriptClass <ScriptClass>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkZeroingMode <MarkZeroingMode>k__BackingField;
    public ScriptClass ScriptClass { get; protected set; }
    public MarkZeroingMode MarkZeroingMode { get; protected set; }
    [CompilerGeneratedAttribute]
public ScriptClass get_ScriptClass();
    [CompilerGeneratedAttribute]
protected void set_ScriptClass(ScriptClass value);
    [CompilerGeneratedAttribute]
public MarkZeroingMode get_MarkZeroingMode();
    [CompilerGeneratedAttribute]
protected void set_MarkZeroingMode(MarkZeroingMode value);
    public void Plan(IGlyphShapingCollection collection, int index, int count);
    protected abstract virtual void PlanFeatures(IGlyphShapingCollection collection, int index, int count);
    protected abstract virtual void PlanPreprocessingFeatures(IGlyphShapingCollection collection, int index, int count);
    protected abstract virtual void PlanPostprocessingFeatures(IGlyphShapingCollection collection, int index, int count);
    protected abstract virtual void AssignFeatures(IGlyphShapingCollection collection, int index, int count);
    public abstract virtual IEnumerable`1<ShapingStage> GetShapingStages();
    private static void RecalculateCount(IGlyphShapingCollection collection, Int32& oldCount, Int32& count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.Shapers.DefaultShaper : BaseShaper {
    protected static Tag RvnrTag;
    protected static Tag LtraTag;
    protected static Tag LtrmTag;
    protected static Tag RtlaTag;
    protected static Tag RtlmTag;
    protected static Tag FracTag;
    protected static Tag NumrTag;
    protected static Tag DnomTag;
    protected static Tag CcmpTag;
    protected static Tag LoclTag;
    protected static Tag RligTag;
    protected static Tag MarkTag;
    protected static Tag MkmkTag;
    protected static Tag CaltTag;
    protected static Tag CligTag;
    protected static Tag LigaTag;
    protected static Tag RcltTag;
    protected static Tag CursTag;
    protected static Tag KernTag;
    protected static Tag VertTag;
    protected static Tag VKernTag;
    private static CodePoint FractionSlash;
    private static CodePoint Slash;
    private HashSet`1<ShapingStage> shapingStages;
    private KerningMode kerningMode;
    private IReadOnlyList`1<Tag> featureTags;
    internal DefaultShaper(ScriptClass script, TextOptions textOptions);
    protected DefaultShaper(ScriptClass script, MarkZeroingMode markZeroingMode, TextOptions textOptions);
    private static DefaultShaper();
    protected virtual void PlanFeatures(IGlyphShapingCollection collection, int index, int count);
    protected virtual void PlanPreprocessingFeatures(IGlyphShapingCollection collection, int index, int count);
    protected virtual void PlanPostprocessingFeatures(IGlyphShapingCollection collection, int index, int count);
    protected virtual void AssignFeatures(IGlyphShapingCollection collection, int index, int count);
    protected void AddFeature(IGlyphShapingCollection collection, int index, int count, Tag feature, bool enabled, Action`3<IGlyphShapingCollection, int, int> preAction, Action`3<IGlyphShapingCollection, int, int> postAction);
    public virtual IEnumerable`1<ShapingStage> GetShapingStages();
    private void AssignFractionalFeatures(IGlyphShapingCollection collection, int index, int count);
    private bool HasFractions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.Shapers.HangulShaper : DefaultShaper {
    private static Tag LjmoTag;
    private static Tag VjmoTag;
    private static Tag TjmoTag;
    private static int HangulBase;
    private static int LBase;
    private static int VBase;
    private static int TBase;
    private static int LCount;
    private static int VCount;
    private static int TCount;
    private static int LEnd;
    private static int VEnd;
    private static int TEnd;
    private static int DottedCircle;
    private static byte X;
    private static byte L;
    private static byte V;
    private static byte T;
    private static byte LV;
    private static byte LVT;
    private static byte M;
    private static byte None;
    private static byte Decompose;
    private static byte Compose;
    private static byte ToneMark;
    private static byte Invalid;
    private static Byte[][0...,0...] StateTable;
    public HangulShaper(ScriptClass script, TextOptions textOptions);
    private static HangulShaper();
    protected virtual void PlanFeatures(IGlyphShapingCollection collection, int index, int count);
    protected virtual void AssignFeatures(IGlyphShapingCollection collection, int index, int count);
    private static int GetSyllableType(CodePoint codePoint);
    private static int GetSyllableLength(CodePoint codePoint);
    private int DecomposeGlyph(GlyphSubstitutionCollection collection, GlyphShapingData data, int index);
    private int ComposeGlyph(GlyphSubstitutionCollection collection, GlyphShapingData data, int index, int type);
    private static void ReOrderToneMark(GlyphSubstitutionCollection collection, GlyphShapingData data, int index);
    private int InsertDottedCircle(GlyphSubstitutionCollection collection, GlyphShapingData data, int index);
    private static bool IsCombiningL(CodePoint code);
    private static bool IsCombiningV(CodePoint code);
    private static bool IsCombiningT(CodePoint code);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.Shapers.IndicShaper : DefaultShaper {
    private static StateMachine StateMachine;
    private static Tag RphfTag;
    private static Tag NuktTag;
    private static Tag AkhnTag;
    private static Tag PrefTag;
    private static Tag RkrfTag;
    private static Tag AbvfTag;
    private static Tag BlwfTag;
    private static Tag HalfTag;
    private static Tag PstfTag;
    private static Tag VatuTag;
    private static Tag CjctTag;
    private static Tag CfarTag;
    private static Tag InitTag;
    private static Tag AbvsTag;
    private static Tag BlwsTag;
    private static Tag PresTag;
    private static Tag PstsTag;
    private static Tag HalnTag;
    private static Tag DistTag;
    private static Tag AbvmTag;
    private static Tag BlwmTag;
    private static int DottedCircle;
    private TextOptions textOptions;
    private ShapingConfiguration indicConfiguration;
    private bool isOldSpec;
    public IndicShaper(ScriptClass script, Tag unicodeScriptTag, TextOptions textOptions);
    private static IndicShaper();
    protected virtual void PlanFeatures(IGlyphShapingCollection collection, int index, int count);
    protected virtual void AssignFeatures(IGlyphShapingCollection collection, int index, int count);
    private static void SetupSyllables(IGlyphShapingCollection collection, int index, int count);
    private static int IndicShapingCategory(CodePoint codePoint);
    private static int IndicShapingPosition(CodePoint codePoint);
    private void InitialReorder(IGlyphShapingCollection collection, int index, int count);
    private Positions ConsonantPosition(GlyphSubstitutionCollection collection, ReadOnlySpan`1<GlyphShapingData> data);
    private bool WouldSubstitute(GlyphSubstitutionCollection collection, Tag& featureTag, ReadOnlySpan`1<GlyphShapingData> buffer);
    private static bool IsConsonant(GlyphShapingData data);
    private static bool IsJoiner(GlyphShapingData data);
    private static bool IsHalantOrCoeng(GlyphShapingData data);
    private static int NextSyllable(IGlyphShapingCollection collection, int index, int count);
    private void FinalReorder(IGlyphShapingCollection collection, int index, int count);
}
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.Shapers.ShaperFactory : object {
    [NullableContextAttribute("1")]
public static BaseShaper Create(ScriptClass script, Tag unicodeScriptTag, TextOptions textOptions);
}
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.Shapers.ShapingStage : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`3<IGlyphShapingCollection, int, int> preAction;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`3<IGlyphShapingCollection, int, int> postAction;
    [CompilerGeneratedAttribute]
private Tag <FeatureTag>k__BackingField;
    public Tag FeatureTag { get; }
    public ShapingStage(Tag featureTag, Action`3<IGlyphShapingCollection, int, int> preAction, Action`3<IGlyphShapingCollection, int, int> postAction);
    [CompilerGeneratedAttribute]
public Tag get_FeatureTag();
    [NullableContextAttribute("1")]
public void PreProcessFeature(IGlyphShapingCollection collection, int index, int count);
    [NullableContextAttribute("1")]
public void PostProcessFeature(IGlyphShapingCollection collection, int index, int count);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ShapingStage other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.Shapers.UniversalShaper : DefaultShaper {
    private static StateMachine StateMachine;
    private static Tag RphfTag;
    private static Tag NuktTag;
    private static Tag AkhnTag;
    private static Tag PrefTag;
    private static Tag RkrfTag;
    private static Tag AbvfTag;
    private static Tag BlwfTag;
    private static Tag HalfTag;
    private static Tag PstfTag;
    private static Tag VatuTag;
    private static Tag CjctTag;
    private static Tag AbvsTag;
    private static Tag BlwsTag;
    private static Tag PresTag;
    private static Tag PstsTag;
    private static Tag DistTag;
    private static Tag AbvmTag;
    private static Tag BlwmTag;
    private static int DottedCircle;
    public UniversalShaper(ScriptClass script, TextOptions textOptions);
    private static UniversalShaper();
    protected virtual void PlanFeatures(IGlyphShapingCollection collection, int index, int count);
    protected virtual void AssignFeatures(IGlyphShapingCollection collection, int index, int count);
    private static void DecomposeSplitVowels(IGlyphShapingCollection collection, int index, int count);
    private static void SetupSyllables(IGlyphShapingCollection collection, int index, int count);
    private static void ClearSubstitutionFlags(IGlyphShapingCollection collection, int index, int count);
    private static void RecordRhpf(IGlyphShapingCollection collection, int index, int count);
    private static void RecordPref(IGlyphShapingCollection collection, int index, int count);
    private static void Reorder(IGlyphShapingCollection collection, int index, int count);
    private static int NextSyllable(IGlyphShapingCollection collection, int index, int count);
    private static bool IsHalant(GlyphShapingData data);
    [NullableContextAttribute("2")]
private static bool IsBase(UniversalShapingEngineInfo info);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.SkippingGlyphIterator : ValueType {
    private FontMetrics fontMetrics;
    private bool ignoreMarks;
    private bool ignoreBaseGlyphs;
    private bool ignoreLigatures;
    private ushort markAttachmentType;
    [CompilerGeneratedAttribute]
private IGlyphShapingCollection <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public IGlyphShapingCollection Collection { get; }
    public int Index { get; public set; }
    public SkippingGlyphIterator(FontMetrics fontMetrics, IGlyphShapingCollection collection, int index, LookupFlags lookupFlags);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IGlyphShapingCollection get_Collection();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    public int Next();
    public int Increment(int count);
    public void Reset(int index, LookupFlags lookupFlags);
    private void Move(int direction);
    [IsReadOnlyAttribute]
private bool ShouldIgnore(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.Fonts.Tables.AdvancedTypographic.TableLoadingUtils : object {
    internal static SequenceRuleSetTable[] LoadSequenceContextFormat1(BigEndianBinaryReader reader, long offset, CoverageTable& coverageTable);
    internal static CoverageTable LoadSequenceContextFormat2(BigEndianBinaryReader reader, long offset, ClassDefinitionTable& classDefTable, ClassSequenceRuleSetTable[]& classSeqRuleSets);
    internal static SequenceLookupRecord[] LoadSequenceContextFormat3(BigEndianBinaryReader reader, long offset, CoverageTable[]& coverageTables);
    internal static ChainedSequenceRuleSetTable[] LoadChainedSequenceContextFormat1(BigEndianBinaryReader reader, long offset, CoverageTable& coverageTable);
    internal static ChainedClassSequenceRuleSetTable[] LoadChainedSequenceContextFormat2(BigEndianBinaryReader reader, long offset, CoverageTable& coverageTable, ClassDefinitionTable& backtrackClassDefTable, ClassDefinitionTable& inputClassDefTable, ClassDefinitionTable& lookaheadClassDefTable);
    internal static SequenceLookupRecord[] LoadChainedSequenceContextFormat3(BigEndianBinaryReader reader, long offset, CoverageTable[]& backtrackCoverageTables, CoverageTable[]& inputCoverageTables, CoverageTable[]& lookaheadCoverageTables);
}
[IsReadOnlyAttribute]
public class SixLabors.Fonts.Tables.AdvancedTypographic.Tag : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <Value>k__BackingField;
    public UInt32 Value { get; }
    public Tag(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Value();
    public static Tag op_Implicit(UInt32 value);
    public static Tag op_Implicit(FeatureTags value);
    public static bool op_Equality(Tag left, Tag right);
    public static bool op_Inequality(Tag left, Tag right);
    [NullableContextAttribute("1")]
public static Tag Parse(string value);
    private static byte GetByte(char c);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Tag other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[DebuggerDisplayAttribute("Tag: {Tag}, Enabled: {Enabled}")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.TagEntry : ValueType {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Tag <Tag>k__BackingField;
    public bool Enabled { get; public set; }
    public Tag Tag { get; }
    public TagEntry(Tag tag, bool enabled);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Tag get_Tag();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class SixLabors.Fonts.Tables.AdvancedTypographic.UnicodeScriptTagMap : Dictionary`2<ScriptClass, Tag[]> {
    private static Lazy`1<UnicodeScriptTagMap> Lazy;
    public static UnicodeScriptTagMap Instance { get; }
    private static UnicodeScriptTagMap();
    public static UnicodeScriptTagMap get_Instance();
    private static UnicodeScriptTagMap CreateMap();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.Cff.Cff1Table : Table {
    internal static string TableName;
    private CffGlyphData[] glyphs;
    public int GlyphCount { get; }
    public Cff1Table(CffFont cff1Font);
    public sealed virtual int get_GlyphCount();
    public sealed virtual CffGlyphData GetGlyph(int index);
    public static Cff1Table Load(FontReader fontReader);
    public static Cff1Table Load(BigEndianBinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.Cff.Cff2Table : Table {
    internal static string TableName;
    private CffGlyphData[] glyphs;
    public int GlyphCount { get; }
    public Cff2Table(CffFont cff1Font);
    public sealed virtual int get_GlyphCount();
    public sealed virtual CffGlyphData GetGlyph(int index);
    public static Cff2Table Load(FontReader fontReader);
    public static Cff2Table Load(BigEndianBinaryReader reader);
}
internal class SixLabors.Fonts.Tables.Cff.CffBoundsFinder : object {
    private float minX;
    private float maxX;
    private float minY;
    private float maxY;
    private Vector2 currentXY;
    private int nsteps;
    private bool open;
    private bool firstEval;
    public sealed virtual void BeginFigure();
    public bool BeginGlyph(FontRectangle& bounds, GlyphRendererParameters& parameters);
    public void BeginText(FontRectangle& bounds);
    public sealed virtual void EndFigure();
    public sealed virtual void EndGlyph();
    public sealed virtual void EndText();
    public sealed virtual void LineTo(Vector2 point);
    public sealed virtual void MoveTo(Vector2 point);
    public sealed virtual void CubicBezierTo(Vector2 secondControlPoint, Vector2 thirdControlPoint, Vector2 point);
    public sealed virtual void QuadraticBezierTo(Vector2 secondControlPoint, Vector2 point);
    public sealed virtual TextDecorations EnabledDecorations();
    public sealed virtual void SetDecoration(TextDecorations textDecorations, Vector2 start, Vector2 end, float thickness);
    private void UpdateMinMax(float x0, float y0);
    public Bounds GetBounds();
    private sealed virtual override bool SixLabors.Fonts.IGlyphRenderer.BeginGlyph(FontRectangle& modreq(System.Runtime.InteropServices.InAttribute) bounds, GlyphRendererParameters& modreq(System.Runtime.InteropServices.InAttribute) parameters);
    private sealed virtual override void SixLabors.Fonts.IGlyphRenderer.BeginText(FontRectangle& modreq(System.Runtime.InteropServices.InAttribute) bounds);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.Cff.CffDataDicEntry : object {
    [CompilerGeneratedAttribute]
private CFFOperator <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private CffOperand[] <Operands>k__BackingField;
    public CFFOperator Operator { get; }
    public CffOperand[] Operands { get; }
    public CffDataDicEntry(CFFOperator operator, CffOperand[] operands);
    [CompilerGeneratedAttribute]
public CFFOperator get_Operator();
    [CompilerGeneratedAttribute]
public CffOperand[] get_Operands();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class SixLabors.Fonts.Tables.Cff.CffEvaluationEngine : ValueType {
    [NullableAttribute("1")]
private static Random Random;
    private Nullable`1<float> width;
    private int nStems;
    private float x;
    private float y;
    private RefStack`1<float> stack;
    private ReadOnlySpan`1<byte> charStrings;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ReadOnlySpan`1<Byte[]> globalSubrBuffers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ReadOnlySpan`1<Byte[]> localSubrBuffers;
    private TransformingGlyphRenderer transforming;
    private int nominalWidthX;
    private int globalBias;
    private int localBias;
    [NullableAttribute("1")]
private Dictionary`2<int, float> trans;
    private bool isDisposed;
    public CffEvaluationEngine(ReadOnlySpan`1<byte> charStrings, ReadOnlySpan`1<Byte[]> globalSubrBuffers, ReadOnlySpan`1<Byte[]> localSubrBuffers, int nominalWidthX);
    private static CffEvaluationEngine();
    public Bounds GetBounds();
    [NullableContextAttribute("1")]
public void RenderTo(IGlyphRenderer renderer, Vector2 origin, Vector2 scale, Vector2 offset, Matrix3x2 transform);
    private void Parse(ReadOnlySpan`1<byte> buffer);
    public void Dispose();
    private static int CalculateBias(int count);
    private void ParseStems();
    private void CheckWidth();
    private void Reset();
    private static void ThrowInvalidOperator(byte operator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.Cff.CffFont : object {
    [CompilerGeneratedAttribute]
private string <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
private CffTopDictionary <Metrics>k__BackingField;
    [CompilerGeneratedAttribute]
private CffGlyphData[] <Glyphs>k__BackingField;
    public string FontName { get; public set; }
    public CffTopDictionary Metrics { get; public set; }
    public CffGlyphData[] Glyphs { get; }
    public CffFont(string name, CffTopDictionary metrics, CffGlyphData[] glyphs);
    [CompilerGeneratedAttribute]
public string get_FontName();
    [CompilerGeneratedAttribute]
public void set_FontName(string value);
    [CompilerGeneratedAttribute]
public CffTopDictionary get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(CffTopDictionary value);
    [CompilerGeneratedAttribute]
public CffGlyphData[] get_Glyphs();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.Cff.CffGlyphData : ValueType {
    private Byte[][] globalSubrBuffers;
    private Byte[][] localSubrBuffers;
    private Byte[] charStrings;
    private int nominalWidthX;
    [CompilerGeneratedAttribute]
private ushort <GlyphIndex>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <GlyphName>k__BackingField;
    public ushort GlyphIndex { get; }
    [NullableAttribute("2")]
public string GlyphName { get; public set; }
    public CffGlyphData(ushort glyphIndex, Byte[][] globalSubrBuffers, Byte[][] localSubrBuffers, int nominalWidthX, Byte[] charStrings);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ushort get_GlyphIndex();
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_GlyphName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_GlyphName(string value);
    [IsReadOnlyAttribute]
public Bounds GetBounds();
    [IsReadOnlyAttribute]
public void RenderTo(IGlyphRenderer renderer, Vector2 origin, Vector2 scale, Vector2 offset, Matrix3x2 transform);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.Cff.CffGlyphMetrics : GlyphMetrics {
    private CffGlyphData glyphData;
    internal CffGlyphMetrics(StreamFontMetrics fontMetrics, ushort glyphId, CodePoint codePoint, CffGlyphData glyphData, Bounds bounds, ushort advanceWidth, ushort advanceHeight, short leftSideBearing, short topSideBearing, ushort unitsPerEM, TextAttributes textAttributes, TextDecorations textDecorations, GlyphType glyphType, Nullable`1<GlyphColor> glyphColor);
    internal CffGlyphMetrics(StreamFontMetrics fontMetrics, ushort glyphId, CodePoint codePoint, CffGlyphData glyphData, Bounds bounds, ushort advanceWidth, ushort advanceHeight, short leftSideBearing, short topSideBearing, ushort unitsPerEM, Vector2 offset, Vector2 scaleFactor, TextRun textRun, GlyphType glyphType, Nullable`1<GlyphColor> glyphColor);
    internal virtual GlyphMetrics CloneForRendering(TextRun textRun);
    internal virtual void RenderTo(IGlyphRenderer renderer, Vector2 location, Vector2 offset, GlyphLayoutMode mode, TextOptions options);
}
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.Tables.Cff.CffIndexOffset : ValueType {
    public int Start;
    public int Length;
    public CffIndexOffset(int start, int len);
}
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.Tables.Cff.CffOperand : ValueType {
    [CompilerGeneratedAttribute]
private OperandKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RealNumValue>k__BackingField;
    public OperandKind Kind { get; }
    public double RealNumValue { get; }
    public CffOperand(double number, OperandKind kind);
    [CompilerGeneratedAttribute]
public OperandKind get_Kind();
    [CompilerGeneratedAttribute]
public double get_RealNumValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.Cff.CFFOperator : object {
    private static Lazy`1<Dictionary`2<int, CFFOperator>> RegisteredOperators;
    private byte b0;
    private byte b1;
    private OperatorOperandKind operatorOperandKind;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    private CFFOperator(string name, byte b0, byte b1, OperatorOperandKind operatorOperandKind);
    private static CFFOperator();
    [CompilerGeneratedAttribute]
public string get_Name();
    public static CFFOperator GetOperatorByKey(byte b0, byte b1);
    private static Dictionary`2<int, CFFOperator> CreateDictionary();
    private static void Register(Dictionary`2<int, CFFOperator> dictionary, byte b0, byte b1, string operatorName, OperatorOperandKind opopKind);
    private static void Register(Dictionary`2<int, CFFOperator> dictionary, byte b0, string operatorName, OperatorOperandKind opopKind);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.Cff.CffParser : object {
    private static Encoding Iso88591;
    private StringBuilder pooledStringBuilder;
    private long offset;
    private int charStringsOffset;
    private int charsetOffset;
    private int encodingOffset;
    private int privateDICTOffset;
    private int privateDICTLength;
    private static CffParser();
    public CffFont Load(BigEndianBinaryReader reader, long offset);
    private static string ReadNameIndex(BigEndianBinaryReader reader);
    private List`1<CffDataDicEntry> ReadTopDICTIndex(BigEndianBinaryReader reader);
    private static String[] ReadStringIndex(BigEndianBinaryReader reader);
    private static string GetSid(int index, String[] stringIndex);
    private CffTopDictionary ResolveTopDictInfo(List`1<CffDataDicEntry> entries, String[] stringIndex);
    private static Byte[][] ReadGlobalSubrIndex(BigEndianBinaryReader reader);
    private static Byte[][] ReadLocalSubrs(BigEndianBinaryReader reader);
    private void ReadEncodings(BigEndianBinaryReader reader);
    private void ReadCharsets(BigEndianBinaryReader reader, String[] stringIndex, CffGlyphData[] glyphs);
    private static void ReadCharsetsFormat0(BigEndianBinaryReader reader, String[] stringIndex, CffGlyphData[] glyphs);
    private static void ReadCharsetsFormat1(BigEndianBinaryReader reader, String[] stringIndex, CffGlyphData[] glyphs);
    private static void ReadCharsetsFormat2(BigEndianBinaryReader reader, String[] stringIndex, CffGlyphData[] glyphs);
    private void ReadFDSelect(BigEndianBinaryReader reader, CidFontInfo cidFontInfo);
    private FontDict[] ReadFDArray(BigEndianBinaryReader reader, CidFontInfo cidFontInfo);
    private CffGlyphData[] ReadCharStringsIndex(BigEndianBinaryReader reader, CffTopDictionary topDictionary, Byte[][] globalSubrBuffers, FontDict[] fontDicts, CffPrivateDictionary privateDictionary);
    private static void ReadFormat0Encoding(BigEndianBinaryReader reader);
    private static void ReadFormat1Encoding(BigEndianBinaryReader reader);
    private CffPrivateDictionary ReadPrivateDict(BigEndianBinaryReader reader);
    private static Byte[][] ReadSubrBuffer(BigEndianBinaryReader reader);
    private List`1<CffDataDicEntry> ReadDICTData(BigEndianBinaryReader reader, int length);
    private CffDataDicEntry ReadEntry(BigEndianBinaryReader reader);
    private static CFFOperator ReadOperator(BigEndianBinaryReader reader, byte b0);
    private double ReadRealNumber(BigEndianBinaryReader reader);
    private static int ReadIntegerNumber(BigEndianBinaryReader reader, byte b0);
    private static bool TryReadIndexDataOffsets(BigEndianBinaryReader reader, CffIndexOffset[]& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.Cff.CffPrivateDictionary : object {
    [CompilerGeneratedAttribute]
private Byte[][] <LocalSubrRawBuffers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultWidthX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NominalWidthX>k__BackingField;
    public Byte[][] LocalSubrRawBuffers { get; public set; }
    public int DefaultWidthX { get; public set; }
    public int NominalWidthX { get; public set; }
    public CffPrivateDictionary(Byte[][] localSubrRawBuffers, int defaultWidthX, int nominalWidthX);
    [CompilerGeneratedAttribute]
public Byte[][] get_LocalSubrRawBuffers();
    [CompilerGeneratedAttribute]
public void set_LocalSubrRawBuffers(Byte[][] value);
    [CompilerGeneratedAttribute]
public int get_DefaultWidthX();
    [CompilerGeneratedAttribute]
public void set_DefaultWidthX(int value);
    [CompilerGeneratedAttribute]
public int get_NominalWidthX();
    [CompilerGeneratedAttribute]
public void set_NominalWidthX(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.Fonts.Tables.Cff.CffStandardStrings : object {
    private static String[] StringIdentifierToString;
    [CompilerGeneratedAttribute]
private static int <Count>k__BackingField;
    public static int Count { get; }
    private static CffStandardStrings();
    [CompilerGeneratedAttribute]
public static int get_Count();
    public static string GetName(int sid);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.Cff.CffTopDictionary : object {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Notice>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CopyRight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FamilyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UnderlinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UnderlineThickness>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Double[] <FontBBox>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private CidFontInfo <CidFontInfo>k__BackingField;
    public string Version { get; public set; }
    public string Notice { get; public set; }
    public string CopyRight { get; public set; }
    public string FullName { get; public set; }
    public string FamilyName { get; public set; }
    public string Weight { get; public set; }
    public double UnderlinePosition { get; public set; }
    public double UnderlineThickness { get; public set; }
    [NullableAttribute("1")]
public Double[] FontBBox { get; public set; }
    [NullableAttribute("1")]
public CidFontInfo CidFontInfo { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Notice();
    [CompilerGeneratedAttribute]
public void set_Notice(string value);
    [CompilerGeneratedAttribute]
public string get_CopyRight();
    [CompilerGeneratedAttribute]
public void set_CopyRight(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    [CompilerGeneratedAttribute]
public string get_FamilyName();
    [CompilerGeneratedAttribute]
public void set_FamilyName(string value);
    [CompilerGeneratedAttribute]
public string get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(string value);
    [CompilerGeneratedAttribute]
public double get_UnderlinePosition();
    [CompilerGeneratedAttribute]
public void set_UnderlinePosition(double value);
    [CompilerGeneratedAttribute]
public double get_UnderlineThickness();
    [CompilerGeneratedAttribute]
public void set_UnderlineThickness(double value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Double[] get_FontBBox();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_FontBBox(Double[] value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public CidFontInfo get_CidFontInfo();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_CidFontInfo(CidFontInfo value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.Cff.CidFontInfo : object {
    [CompilerGeneratedAttribute]
private string <ROS_Register>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ROS_Ordering>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ROS_Supplement>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CIDFontVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CIDFountCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FDSelect>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FDArray>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FdSelectFormat>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private FDRange3[] <FdRanges>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Dictionary`2<int, byte> <FdSelectMap>k__BackingField;
    public string ROS_Register { get; public set; }
    public string ROS_Ordering { get; public set; }
    public string ROS_Supplement { get; public set; }
    public double CIDFontVersion { get; public set; }
    public int CIDFountCount { get; public set; }
    public int FDSelect { get; public set; }
    public int FDArray { get; public set; }
    public int FdSelectFormat { get; public set; }
    [NullableAttribute("1")]
public FDRange3[] FdRanges { get; public set; }
    [NullableAttribute("1")]
public Dictionary`2<int, byte> FdSelectMap { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ROS_Register();
    [CompilerGeneratedAttribute]
public void set_ROS_Register(string value);
    [CompilerGeneratedAttribute]
public string get_ROS_Ordering();
    [CompilerGeneratedAttribute]
public void set_ROS_Ordering(string value);
    [CompilerGeneratedAttribute]
public string get_ROS_Supplement();
    [CompilerGeneratedAttribute]
public void set_ROS_Supplement(string value);
    [CompilerGeneratedAttribute]
public double get_CIDFontVersion();
    [CompilerGeneratedAttribute]
public void set_CIDFontVersion(double value);
    [CompilerGeneratedAttribute]
public int get_CIDFountCount();
    [CompilerGeneratedAttribute]
public void set_CIDFountCount(int value);
    [CompilerGeneratedAttribute]
public int get_FDSelect();
    [CompilerGeneratedAttribute]
public void set_FDSelect(int value);
    [CompilerGeneratedAttribute]
public int get_FDArray();
    [CompilerGeneratedAttribute]
public void set_FDArray(int value);
    [CompilerGeneratedAttribute]
public int get_FdSelectFormat();
    [CompilerGeneratedAttribute]
public void set_FdSelectFormat(int value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public FDRange3[] get_FdRanges();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_FdRanges(FDRange3[] value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Dictionary`2<int, byte> get_FdSelectMap();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_FdSelectMap(Dictionary`2<int, byte> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.Cff.CompactFontTables : object {
    [CompilerGeneratedAttribute]
private CMapTable <Cmap>k__BackingField;
    [CompilerGeneratedAttribute]
private HeadTable <Head>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalHeadTable <Hhea>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalMetricsTable <Htmx>k__BackingField;
    [CompilerGeneratedAttribute]
private MaximumProfileTable <Maxp>k__BackingField;
    [CompilerGeneratedAttribute]
private NameTable <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private OS2Table <Os2>k__BackingField;
    [CompilerGeneratedAttribute]
private PostTable <Post>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private GlyphDefinitionTable <Gdef>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private GSubTable <GSub>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private GPosTable <GPos>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ColrTable <Colr>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CpalTable <Cpal>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private KerningTable <Kern>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private VerticalHeadTable <Vhea>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private VerticalMetricsTable <Vmtx>k__BackingField;
    [CompilerGeneratedAttribute]
private ICffTable <Cff>k__BackingField;
    public CMapTable Cmap { get; public set; }
    public HeadTable Head { get; public set; }
    public HorizontalHeadTable Hhea { get; public set; }
    public HorizontalMetricsTable Htmx { get; public set; }
    public MaximumProfileTable Maxp { get; public set; }
    public NameTable Name { get; public set; }
    public OS2Table Os2 { get; public set; }
    public PostTable Post { get; public set; }
    [NullableAttribute("2")]
public GlyphDefinitionTable Gdef { get; public set; }
    [NullableAttribute("2")]
public GSubTable GSub { get; public set; }
    [NullableAttribute("2")]
public GPosTable GPos { get; public set; }
    [NullableAttribute("2")]
public ColrTable Colr { get; public set; }
    [NullableAttribute("2")]
public CpalTable Cpal { get; public set; }
    [NullableAttribute("2")]
public KerningTable Kern { get; public set; }
    [NullableAttribute("2")]
public VerticalHeadTable Vhea { get; public set; }
    [NullableAttribute("2")]
public VerticalMetricsTable Vmtx { get; public set; }
    public ICffTable Cff { get; public set; }
    public CompactFontTables(CMapTable cmap, HeadTable head, HorizontalHeadTable hhea, HorizontalMetricsTable htmx, MaximumProfileTable maxp, NameTable name, OS2Table os2, PostTable post, ICffTable cff);
    [CompilerGeneratedAttribute]
public sealed virtual CMapTable get_Cmap();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Cmap(CMapTable value);
    [CompilerGeneratedAttribute]
public sealed virtual HeadTable get_Head();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Head(HeadTable value);
    [CompilerGeneratedAttribute]
public sealed virtual HorizontalHeadTable get_Hhea();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Hhea(HorizontalHeadTable value);
    [CompilerGeneratedAttribute]
public sealed virtual HorizontalMetricsTable get_Htmx();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Htmx(HorizontalMetricsTable value);
    [CompilerGeneratedAttribute]
public sealed virtual MaximumProfileTable get_Maxp();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Maxp(MaximumProfileTable value);
    [CompilerGeneratedAttribute]
public sealed virtual NameTable get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(NameTable value);
    [CompilerGeneratedAttribute]
public sealed virtual OS2Table get_Os2();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Os2(OS2Table value);
    [CompilerGeneratedAttribute]
public sealed virtual PostTable get_Post();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Post(PostTable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual GlyphDefinitionTable get_Gdef();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Gdef(GlyphDefinitionTable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual GSubTable get_GSub();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_GSub(GSubTable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual GPosTable get_GPos();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_GPos(GPosTable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ColrTable get_Colr();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Colr(ColrTable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual CpalTable get_Cpal();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Cpal(CpalTable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual KerningTable get_Kern();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Kern(KerningTable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual VerticalHeadTable get_Vhea();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Vhea(VerticalHeadTable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual VerticalMetricsTable get_Vmtx();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Vmtx(VerticalMetricsTable value);
    [CompilerGeneratedAttribute]
public ICffTable get_Cff();
    [CompilerGeneratedAttribute]
public void set_Cff(ICffTable value);
}
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.Tables.Cff.FDRange3 : ValueType {
    [CompilerGeneratedAttribute]
private ushort <First>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <FontDictionary>k__BackingField;
    public ushort First { get; }
    public byte FontDictionary { get; }
    public FDRange3(ushort first, byte fontDictionary);
    [CompilerGeneratedAttribute]
public ushort get_First();
    [CompilerGeneratedAttribute]
public byte get_FontDictionary();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.Cff.FDRangeProvider : ValueType {
    private int format;
    private FDRange3[] ranges;
    private Dictionary`2<int, byte> fdSelectMap;
    private ushort currentGlyphIndex;
    private ushort endGlyphIndexMax;
    private FDRange3 currentRange;
    private int currentSelectedRangeIndex;
    [CompilerGeneratedAttribute]
private byte <SelectedFDArray>k__BackingField;
    public byte SelectedFDArray { get; private set; }
    public FDRangeProvider(CidFontInfo cidFontInfo);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public byte get_SelectedFDArray();
    [CompilerGeneratedAttribute]
private void set_SelectedFDArray(byte value);
    public void SetCurrentGlyphIndex(ushort index);
}
internal class SixLabors.Fonts.Tables.Cff.FontDict : object {
    [CompilerGeneratedAttribute]
private int <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PrivateDicSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PrivateDicOffset>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Byte[][] <LocalSubr>k__BackingField;
    public int FontName { get; public set; }
    public int PrivateDicSize { get; }
    public int PrivateDicOffset { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Byte[][] LocalSubr { get; public set; }
    public FontDict(int name, int dictSize, int dictOffset);
    [CompilerGeneratedAttribute]
public int get_FontName();
    [CompilerGeneratedAttribute]
public void set_FontName(int value);
    [CompilerGeneratedAttribute]
public int get_PrivateDicSize();
    [CompilerGeneratedAttribute]
public int get_PrivateDicOffset();
    [CompilerGeneratedAttribute]
public Byte[][] get_LocalSubr();
    [CompilerGeneratedAttribute]
public void set_LocalSubr(Byte[][] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.Tables.Cff.GlyphNameMap : ValueType {
    public ushort GlyphIndex;
    public string GlyphName;
    public GlyphNameMap(ushort glyphIndex, string glyphName);
}
internal interface SixLabors.Fonts.Tables.Cff.ICffTable {
    public int GlyphCount { get; }
    public abstract virtual int get_GlyphCount();
    public abstract virtual CffGlyphData GetGlyph(int index);
}
internal enum SixLabors.Fonts.Tables.Cff.OperandKind : Enum {
    public int value__;
    public static OperandKind IntNumber;
    public static OperandKind RealNumber;
}
internal enum SixLabors.Fonts.Tables.Cff.OperatorOperandKind : Enum {
    public int value__;
    public static OperatorOperandKind SID;
    public static OperatorOperandKind Boolean;
    public static OperatorOperandKind Number;
    public static OperatorOperandKind Array;
    public static OperatorOperandKind Delta;
    public static OperatorOperandKind NumberNumber;
    public static OperatorOperandKind SID_SID_Number;
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[DefaultMemberAttribute("Item")]
internal class SixLabors.Fonts.Tables.Cff.RefStack`1 : ValueType {
    private static int MaxLength;
    private Buffer`1<T> buffer;
    private Span`1<T> stack;
    private bool isDisposed;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Length { get; private set; }
    public T Item { get; public set; }
    public RefStack`1(int capacity);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    [IsReadOnlyAttribute]
public T get_Item(int index);
    public void set_Item(int index, T value);
    public void Push(T value);
    public T Shift();
    public T Pop();
    public void Clear();
    public void Dispose();
    private static void ThrowForOutOfRange();
    private static void ThrowForEmptyStack();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class SixLabors.Fonts.Tables.Cff.SimpleBinaryReader : ValueType {
    private ReadOnlySpan`1<byte> buffer;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public int Length { get; }
    public int Position { get; public set; }
    public SimpleBinaryReader(ReadOnlySpan`1<byte> buffer);
    [IsReadOnlyAttribute]
public int get_Length();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    [IsReadOnlyAttribute]
public bool CanRead();
    public byte ReadByte();
    public int ReadInt16BE();
    public float ReadFloatFixed1616();
}
internal class SixLabors.Fonts.Tables.Cff.TransformingGlyphRenderer : ValueType {
    private static Vector2 YInverter;
    [NullableAttribute("1")]
private IGlyphRenderer renderer;
    private Vector2 origin;
    private Vector2 scale;
    private Vector2 offset;
    private Matrix3x2 transform;
    [CompilerGeneratedAttribute]
private bool <IsOpen>k__BackingField;
    public bool IsOpen { get; public set; }
    [NullableContextAttribute("1")]
public TransformingGlyphRenderer(IGlyphRenderer renderer, Vector2 origin, Vector2 scale, Vector2 offset, Matrix3x2 transform);
    private static TransformingGlyphRenderer();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsOpen();
    [CompilerGeneratedAttribute]
public void set_IsOpen(bool value);
    public sealed virtual void BeginFigure();
    public bool BeginGlyph(FontRectangle& bounds, GlyphRendererParameters& parameters);
    public void BeginText(FontRectangle& bounds);
    public sealed virtual void EndFigure();
    public sealed virtual void EndGlyph();
    public sealed virtual void EndText();
    public sealed virtual void LineTo(Vector2 point);
    public sealed virtual void MoveTo(Vector2 point);
    public sealed virtual void CubicBezierTo(Vector2 secondControlPoint, Vector2 thirdControlPoint, Vector2 point);
    public sealed virtual void QuadraticBezierTo(Vector2 secondControlPoint, Vector2 point);
    [IsReadOnlyAttribute]
public sealed virtual TextDecorations EnabledDecorations();
    public sealed virtual void SetDecoration(TextDecorations textDecorations, Vector2 start, Vector2 end, float thickness);
    [IsReadOnlyAttribute]
private Vector2 Transform(Vector2 point);
    private sealed virtual override bool SixLabors.Fonts.IGlyphRenderer.BeginGlyph(FontRectangle& modreq(System.Runtime.InteropServices.InAttribute) bounds, GlyphRendererParameters& modreq(System.Runtime.InteropServices.InAttribute) parameters);
    private sealed virtual override void SixLabors.Fonts.IGlyphRenderer.BeginText(FontRectangle& modreq(System.Runtime.InteropServices.InAttribute) bounds);
}
internal enum SixLabors.Fonts.Tables.Cff.Type2Operator1 : Enum {
    public byte value__;
    public static Type2Operator1 Reserved0_;
    public static Type2Operator1 Hstem;
    public static Type2Operator1 Reserved2_;
    public static Type2Operator1 Vstem;
    public static Type2Operator1 Vmoveto;
    public static Type2Operator1 Rlineto;
    public static Type2Operator1 Hlineto;
    public static Type2Operator1 Vlineto;
    public static Type2Operator1 Rrcurveto;
    public static Type2Operator1 Reserved9_;
    public static Type2Operator1 Callsubr;
    public static Type2Operator1 Return;
    public static Type2Operator1 Escape;
    public static Type2Operator1 Reserved13_;
    public static Type2Operator1 Endchar;
    public static Type2Operator1 Reserved15_;
    public static Type2Operator1 Reserved16_;
    public static Type2Operator1 Reserved17_;
    public static Type2Operator1 Hstemhm;
    public static Type2Operator1 Hintmask;
    public static Type2Operator1 Cntrmask;
    public static Type2Operator1 Rmoveto;
    public static Type2Operator1 Hmoveto;
    public static Type2Operator1 Vstemhm;
    public static Type2Operator1 Rcurveline;
    public static Type2Operator1 Rlinecurve;
    public static Type2Operator1 Vvcurveto;
    public static Type2Operator1 Hhcurveto;
    public static Type2Operator1 Shortint;
    public static Type2Operator1 Callgsubr;
    public static Type2Operator1 Vhcurveto;
    public static Type2Operator1 Hvcurveto;
}
internal enum SixLabors.Fonts.Tables.Cff.Type2Operator2 : Enum {
    public byte value__;
    public static Type2Operator2 Reserved0_;
    public static Type2Operator2 Reserved1_;
    public static Type2Operator2 Reserved2_;
    public static Type2Operator2 And;
    public static Type2Operator2 Or;
    public static Type2Operator2 Not;
    public static Type2Operator2 Reserved6_;
    public static Type2Operator2 Reserved7_;
    public static Type2Operator2 Reserved8_;
    public static Type2Operator2 Abs;
    public static Type2Operator2 Add;
    public static Type2Operator2 Sub;
    public static Type2Operator2 Div;
    public static Type2Operator2 Reserved13_;
    public static Type2Operator2 Neg;
    public static Type2Operator2 Eq;
    public static Type2Operator2 Reserved16_;
    public static Type2Operator2 Reserved17_;
    public static Type2Operator2 Drop;
    public static Type2Operator2 Reserved19_;
    public static Type2Operator2 Put;
    public static Type2Operator2 Get;
    public static Type2Operator2 Ifelse;
    public static Type2Operator2 Random;
    public static Type2Operator2 Mul;
    public static Type2Operator2 Reserved25_;
    public static Type2Operator2 Sqrt;
    public static Type2Operator2 Dup;
    public static Type2Operator2 Exch;
    public static Type2Operator2 Index;
    public static Type2Operator2 Roll;
    public static Type2Operator2 Reserved31_;
    public static Type2Operator2 Reserved32_;
    public static Type2Operator2 Reserved33_;
    public static Type2Operator2 Hflex;
    public static Type2Operator2 Flex;
    public static Type2Operator2 Hflex1;
    public static Type2Operator2 Flex1;
}
internal abstract class SixLabors.Fonts.Tables.General.CMap.CMapSubTable : object {
    [CompilerGeneratedAttribute]
private ushort <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private PlatformIDs <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Encoding>k__BackingField;
    public ushort Format { get; }
    public PlatformIDs Platform { get; }
    public ushort Encoding { get; }
    public CMapSubTable(PlatformIDs platform, ushort encoding, ushort format);
    [CompilerGeneratedAttribute]
public ushort get_Format();
    [CompilerGeneratedAttribute]
public PlatformIDs get_Platform();
    [CompilerGeneratedAttribute]
public ushort get_Encoding();
    public abstract virtual bool TryGetGlyphId(CodePoint codePoint, UInt16& glyphId);
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<int> GetAvailableCodePoints();
}
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.Tables.General.CMap.EncodingRecord : ValueType {
    [CompilerGeneratedAttribute]
private PlatformIDs <PlatformID>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <EncodingID>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Offset>k__BackingField;
    public PlatformIDs PlatformID { get; }
    public ushort EncodingID { get; }
    public UInt32 Offset { get; }
    public EncodingRecord(PlatformIDs platformID, ushort encodingID, UInt32 offset);
    [CompilerGeneratedAttribute]
public PlatformIDs get_PlatformID();
    [CompilerGeneratedAttribute]
public ushort get_EncodingID();
    [CompilerGeneratedAttribute]
public UInt32 get_Offset();
    [NullableContextAttribute("1")]
public static EncodingRecord Read(BigEndianBinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.CMap.Format0SubTable : CMapSubTable {
    [CompilerGeneratedAttribute]
private ushort <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <GlyphIds>k__BackingField;
    public ushort Language { get; }
    public Byte[] GlyphIds { get; }
    public Format0SubTable(ushort language, PlatformIDs platform, ushort encoding, Byte[] glyphIds);
    [CompilerGeneratedAttribute]
public ushort get_Language();
    [CompilerGeneratedAttribute]
public Byte[] get_GlyphIds();
    public virtual bool TryGetGlyphId(CodePoint codePoint, UInt16& glyphId);
    public virtual IEnumerable`1<int> GetAvailableCodePoints();
    [IteratorStateMachineAttribute("SixLabors.Fonts.Tables.General.CMap.Format0SubTable/<Load>d__9")]
public static IEnumerable`1<Format0SubTable> Load(IEnumerable`1<EncodingRecord> encodings, BigEndianBinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.CMap.Format12SubTable : CMapSubTable {
    [CompilerGeneratedAttribute]
private SequentialMapGroup[] <SequentialMapGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Language>k__BackingField;
    public SequentialMapGroup[] SequentialMapGroups { get; }
    public UInt32 Language { get; }
    public Format12SubTable(UInt32 language, PlatformIDs platform, ushort encoding, SequentialMapGroup[] groups);
    [CompilerGeneratedAttribute]
public SequentialMapGroup[] get_SequentialMapGroups();
    [CompilerGeneratedAttribute]
public UInt32 get_Language();
    public virtual bool TryGetGlyphId(CodePoint codePoint, UInt16& glyphId);
    public virtual IEnumerable`1<int> GetAvailableCodePoints();
    [IteratorStateMachineAttribute("SixLabors.Fonts.Tables.General.CMap.Format12SubTable/<Load>d__9")]
public static IEnumerable`1<Format12SubTable> Load(IEnumerable`1<EncodingRecord> encodings, BigEndianBinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.CMap.Format14SubTable : CMapSubTable {
    private Dictionary`2<int, VariationSelector> variationSelectors;
    private Format14SubTable(Dictionary`2<int, VariationSelector> variationSelectors, PlatformIDs platform, ushort encoding);
    [IteratorStateMachineAttribute("SixLabors.Fonts.Tables.General.CMap.Format14SubTable/<Load>d__2")]
public static IEnumerable`1<Format14SubTable> Load(IEnumerable`1<EncodingRecord> encodings, BigEndianBinaryReader reader, long offset);
    public virtual bool TryGetGlyphId(CodePoint codePoint, UInt16& glyphId);
    public virtual IEnumerable`1<int> GetAvailableCodePoints();
    public ushort CharacterPairToGlyphId(CodePoint codePoint, ushort defaultGlyphIndex, CodePoint nextCodePoint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.CMap.Format4SubTable : CMapSubTable {
    [CompilerGeneratedAttribute]
private Segment[] <Segments>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt16[] <GlyphIds>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Language>k__BackingField;
    public Segment[] Segments { get; }
    public UInt16[] GlyphIds { get; }
    public ushort Language { get; }
    public Format4SubTable(ushort language, PlatformIDs platform, ushort encoding, Segment[] segments, UInt16[] glyphIds);
    [CompilerGeneratedAttribute]
public Segment[] get_Segments();
    [CompilerGeneratedAttribute]
public UInt16[] get_GlyphIds();
    [CompilerGeneratedAttribute]
public ushort get_Language();
    public virtual bool TryGetGlyphId(CodePoint codePoint, UInt16& glyphId);
    public virtual IEnumerable`1<int> GetAvailableCodePoints();
    public static IEnumerable`1<Format4SubTable> Load(IEnumerable`1<EncodingRecord> encodings, BigEndianBinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.CMapTable : Table {
    internal static string TableName;
    private Format14SubTable[] format14SubTables;
    [NullableAttribute("2")]
private CodePoint[] codepoints;
    [CompilerGeneratedAttribute]
private CMapSubTable[] <Tables>k__BackingField;
    internal CMapSubTable[] Tables { get; }
    public CMapTable(IEnumerable`1<CMapSubTable> tables);
    [CompilerGeneratedAttribute]
internal CMapSubTable[] get_Tables();
    private static int GetPreferredPlatformOrder(PlatformIDs platform);
    public bool TryGetGlyphId(CodePoint codePoint, Nullable`1<CodePoint> nextCodePoint, UInt16& glyphId, Boolean& skipNextCodePoint);
    private bool TryGetGlyphId(CodePoint codePoint, UInt16& glyphId);
    public IReadOnlyList`1<CodePoint> GetAvailableCodePoints();
    public static CMapTable Load(FontReader reader);
    public static CMapTable Load(BigEndianBinaryReader reader);
}
internal class SixLabors.Fonts.Tables.General.Colr.BaseGlyphRecord : object {
    [CompilerGeneratedAttribute]
private ushort <GlyphId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <FirstLayerIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <LayerCount>k__BackingField;
    public ushort GlyphId { get; }
    public ushort FirstLayerIndex { get; }
    public ushort LayerCount { get; }
    public BaseGlyphRecord(ushort glyphId, ushort firstLayerIndex, ushort layerCount);
    [CompilerGeneratedAttribute]
public ushort get_GlyphId();
    [CompilerGeneratedAttribute]
public ushort get_FirstLayerIndex();
    [CompilerGeneratedAttribute]
public ushort get_LayerCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.Colr.ColrTable : Table {
    internal static string TableName;
    private BaseGlyphRecord[] glyphRecords;
    private LayerRecord[] layers;
    public ColrTable(BaseGlyphRecord[] glyphRecords, LayerRecord[] layers);
    public static ColrTable Load(FontReader fontReader);
    internal Span`1<LayerRecord> GetLayers(ushort glyph);
    public static ColrTable Load(BigEndianBinaryReader reader);
}
internal class SixLabors.Fonts.Tables.General.Colr.LayerRecord : object {
    [CompilerGeneratedAttribute]
private ushort <GlyphId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <PaletteIndex>k__BackingField;
    public ushort GlyphId { get; }
    public ushort PaletteIndex { get; }
    public LayerRecord(ushort glyphId, ushort paletteIndex);
    [CompilerGeneratedAttribute]
public ushort get_GlyphId();
    [CompilerGeneratedAttribute]
public ushort get_PaletteIndex();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.CpalTable : Table {
    internal static string TableName;
    private UInt16[] paletteOffsets;
    private GlyphColor[] paletteEntries;
    public CpalTable(UInt16[] paletteOffsets, GlyphColor[] paletteEntries);
    public GlyphColor GetGlyphColor(int paletteIndex, int paletteEntryIndex);
    public static CpalTable Load(FontReader fontReader);
    public static CpalTable Load(BigEndianBinaryReader reader);
}
internal class SixLabors.Fonts.Tables.General.HeadTable : Table {
    [NullableAttribute("1")]
internal static string TableName;
    [CompilerGeneratedAttribute]
private DateTime <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private HeadFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private IndexLocationFormats <IndexLocationFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <LowestRecPPEM>k__BackingField;
    [CompilerGeneratedAttribute]
private HeadMacStyle <MacStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Modified>k__BackingField;
    [CompilerGeneratedAttribute]
private Bounds <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <UnitsPerEm>k__BackingField;
    public DateTime Created { get; }
    public HeadFlags Flags { get; }
    public IndexLocationFormats IndexLocationFormat { get; }
    public ushort LowestRecPPEM { get; }
    public HeadMacStyle MacStyle { get; }
    public DateTime Modified { get; }
    public Bounds Bounds { get; }
    public ushort UnitsPerEm { get; }
    public HeadTable(HeadFlags flags, HeadMacStyle macStyle, ushort unitsPerEm, DateTime created, DateTime modified, Bounds bounds, ushort lowestRecPPEM, IndexLocationFormats indexToLocFormat);
    [CompilerGeneratedAttribute]
public DateTime get_Created();
    [CompilerGeneratedAttribute]
public HeadFlags get_Flags();
    [CompilerGeneratedAttribute]
public IndexLocationFormats get_IndexLocationFormat();
    [CompilerGeneratedAttribute]
public ushort get_LowestRecPPEM();
    [CompilerGeneratedAttribute]
public HeadMacStyle get_MacStyle();
    [CompilerGeneratedAttribute]
public DateTime get_Modified();
    [CompilerGeneratedAttribute]
public Bounds get_Bounds();
    [CompilerGeneratedAttribute]
public ushort get_UnitsPerEm();
    [NullableContextAttribute("1")]
public static HeadTable Load(FontReader fontReader);
    [NullableContextAttribute("1")]
public static HeadTable Load(BigEndianBinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.HorizontalHeadTable : Table {
    internal static string TableName;
    [CompilerGeneratedAttribute]
private ushort <AdvanceWidthMax>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Ascender>k__BackingField;
    [CompilerGeneratedAttribute]
private short <CaretOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private short <CaretSlopeRise>k__BackingField;
    [CompilerGeneratedAttribute]
private short <CaretSlopeRun>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Descender>k__BackingField;
    [CompilerGeneratedAttribute]
private short <LineGap>k__BackingField;
    [CompilerGeneratedAttribute]
private short <MinLeftSideBearing>k__BackingField;
    [CompilerGeneratedAttribute]
private short <MinRightSideBearing>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <NumberOfHMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private short <XMaxExtent>k__BackingField;
    public ushort AdvanceWidthMax { get; }
    public short Ascender { get; }
    public short CaretOffset { get; }
    public short CaretSlopeRise { get; }
    public short CaretSlopeRun { get; }
    public short Descender { get; }
    public short LineGap { get; }
    public short MinLeftSideBearing { get; }
    public short MinRightSideBearing { get; }
    public ushort NumberOfHMetrics { get; }
    public short XMaxExtent { get; }
    public HorizontalHeadTable(short ascender, short descender, short lineGap, ushort advanceWidthMax, short minLeftSideBearing, short minRightSideBearing, short xMaxExtent, short caretSlopeRise, short caretSlopeRun, short caretOffset, ushort numberOfHMetrics);
    [CompilerGeneratedAttribute]
public ushort get_AdvanceWidthMax();
    [CompilerGeneratedAttribute]
public short get_Ascender();
    [CompilerGeneratedAttribute]
public short get_CaretOffset();
    [CompilerGeneratedAttribute]
public short get_CaretSlopeRise();
    [CompilerGeneratedAttribute]
public short get_CaretSlopeRun();
    [CompilerGeneratedAttribute]
public short get_Descender();
    [CompilerGeneratedAttribute]
public short get_LineGap();
    [CompilerGeneratedAttribute]
public short get_MinLeftSideBearing();
    [CompilerGeneratedAttribute]
public short get_MinRightSideBearing();
    [CompilerGeneratedAttribute]
public ushort get_NumberOfHMetrics();
    [CompilerGeneratedAttribute]
public short get_XMaxExtent();
    public static HorizontalHeadTable Load(FontReader fontReader);
    public static HorizontalHeadTable Load(BigEndianBinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.HorizontalMetricsTable : Table {
    internal static string TableName;
    private Int16[] leftSideBearings;
    private UInt16[] advancedWidths;
    public HorizontalMetricsTable(UInt16[] advancedWidths, Int16[] leftSideBearings);
    public ushort GetAdvancedWidth(int glyphIndex);
    internal short GetLeftSideBearing(int glyphIndex);
    public static HorizontalMetricsTable Load(FontReader reader);
    public static HorizontalMetricsTable Load(BigEndianBinaryReader reader, int metricCount, int glyphCount);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.Kern.Format0SubTable : KerningSubTable {
    private KerningPair[] pairs;
    public Format0SubTable(KerningPair[] pairs, KerningCoverage coverage);
    public static Format0SubTable Load(BigEndianBinaryReader reader, KerningCoverage& coverage);
    protected virtual bool TryGetOffset(ushort index1, ushort index2, Int16& offset);
}
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.Tables.General.Kern.KerningCoverage : ValueType {
    [CompilerGeneratedAttribute]
private bool <Horizontal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CrossStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverrideAccumulator>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Format>k__BackingField;
    public bool Horizontal { get; }
    public bool HasMinimum { get; }
    public bool CrossStream { get; }
    public bool OverrideAccumulator { get; }
    public byte Format { get; }
    private KerningCoverage(bool horizontal, bool hasMinimum, bool crossStream, bool overrideAccumulator, byte format);
    [CompilerGeneratedAttribute]
public bool get_Horizontal();
    [CompilerGeneratedAttribute]
public bool get_HasMinimum();
    [CompilerGeneratedAttribute]
public bool get_CrossStream();
    [CompilerGeneratedAttribute]
public bool get_OverrideAccumulator();
    [CompilerGeneratedAttribute]
public byte get_Format();
    [NullableContextAttribute("1")]
public static KerningCoverage Read(BigEndianBinaryReader reader);
}
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.Tables.General.Kern.KerningPair : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Offset>k__BackingField;
    public UInt32 Key { get; }
    public ushort Left { get; }
    public ushort Right { get; }
    public short Offset { get; }
    internal KerningPair(ushort left, ushort right, short offset);
    [CompilerGeneratedAttribute]
public UInt32 get_Key();
    [CompilerGeneratedAttribute]
public ushort get_Left();
    [CompilerGeneratedAttribute]
public ushort get_Right();
    [CompilerGeneratedAttribute]
public short get_Offset();
    public static UInt32 CalculateKey(ushort left, ushort right);
    [NullableContextAttribute("1")]
public static KerningPair Read(BigEndianBinaryReader reader);
    public sealed virtual int CompareTo(KerningPair other);
}
internal abstract class SixLabors.Fonts.Tables.General.Kern.KerningSubTable : object {
    private KerningCoverage coverage;
    public KerningSubTable(KerningCoverage coverage);
    [NullableContextAttribute("1")]
public static KerningSubTable Load(BigEndianBinaryReader reader);
    protected abstract virtual bool TryGetOffset(ushort index1, ushort index2, Int16& offset);
    public bool TryApplyOffset(ushort index1, ushort index2, Vector2& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.Kern.KerningTable : Table {
    internal static string TableName;
    private KerningSubTable[] kerningSubTable;
    public int Count { get; }
    public KerningTable(KerningSubTable[] kerningSubTable);
    public int get_Count();
    public static KerningTable Load(FontReader fontReader);
    public static KerningTable Load(BigEndianBinaryReader reader);
    public void UpdatePositions(FontMetrics fontMetrics, GlyphPositioningCollection collection, int left, int right);
    public bool TryGetKerningOffset(ushort current, ushort next, Vector2& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.MaximumProfileTable : Table {
    internal static string TableName;
    [CompilerGeneratedAttribute]
private ushort <MaxPoints>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MaxContours>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MaxCompositePoints>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MaxCompositeContours>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MaxZones>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MaxTwilightPoints>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MaxStorage>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MaxFunctionDefs>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MaxInstructionDefs>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MaxStackElements>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MaxSizeOfInstructions>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MaxComponentElements>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MaxComponentDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <GlyphCount>k__BackingField;
    public ushort MaxPoints { get; }
    public ushort MaxContours { get; }
    public ushort MaxCompositePoints { get; }
    public ushort MaxCompositeContours { get; }
    public ushort MaxZones { get; }
    public ushort MaxTwilightPoints { get; }
    public ushort MaxStorage { get; }
    public ushort MaxFunctionDefs { get; }
    public ushort MaxInstructionDefs { get; }
    public ushort MaxStackElements { get; }
    public ushort MaxSizeOfInstructions { get; }
    public ushort MaxComponentElements { get; }
    public ushort MaxComponentDepth { get; }
    public ushort GlyphCount { get; }
    public MaximumProfileTable(ushort numGlyphs);
    public MaximumProfileTable(ushort numGlyphs, ushort maxPoints, ushort maxContours, ushort maxCompositePoints, ushort maxCompositeContours, ushort maxZones, ushort maxTwilightPoints, ushort maxStorage, ushort maxFunctionDefs, ushort maxInstructionDefs, ushort maxStackElements, ushort maxSizeOfInstructions, ushort maxComponentElements, ushort maxComponentDepth);
    [CompilerGeneratedAttribute]
public ushort get_MaxPoints();
    [CompilerGeneratedAttribute]
public ushort get_MaxContours();
    [CompilerGeneratedAttribute]
public ushort get_MaxCompositePoints();
    [CompilerGeneratedAttribute]
public ushort get_MaxCompositeContours();
    [CompilerGeneratedAttribute]
public ushort get_MaxZones();
    [CompilerGeneratedAttribute]
public ushort get_MaxTwilightPoints();
    [CompilerGeneratedAttribute]
public ushort get_MaxStorage();
    [CompilerGeneratedAttribute]
public ushort get_MaxFunctionDefs();
    [CompilerGeneratedAttribute]
public ushort get_MaxInstructionDefs();
    [CompilerGeneratedAttribute]
public ushort get_MaxStackElements();
    [CompilerGeneratedAttribute]
public ushort get_MaxSizeOfInstructions();
    [CompilerGeneratedAttribute]
public ushort get_MaxComponentElements();
    [CompilerGeneratedAttribute]
public ushort get_MaxComponentDepth();
    [CompilerGeneratedAttribute]
public ushort get_GlyphCount();
    public static MaximumProfileTable Load(FontReader reader);
    public static MaximumProfileTable Load(BigEndianBinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.Name.NameRecord : object {
    private string value;
    [CompilerGeneratedAttribute]
private PlatformIDs <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <LanguageID>k__BackingField;
    [CompilerGeneratedAttribute]
private KnownNameIds <NameID>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private StringLoader <StringReader>k__BackingField;
    public PlatformIDs Platform { get; }
    public ushort LanguageID { get; }
    public KnownNameIds NameID { get; }
    [NullableAttribute("2")]
internal StringLoader StringReader { get; private set; }
    public string Value { get; }
    public NameRecord(PlatformIDs platform, ushort languageId, KnownNameIds nameId, string value);
    [CompilerGeneratedAttribute]
public PlatformIDs get_Platform();
    [CompilerGeneratedAttribute]
public ushort get_LanguageID();
    [CompilerGeneratedAttribute]
public KnownNameIds get_NameID();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal StringLoader get_StringReader();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_StringReader(StringLoader value);
    public string get_Value();
    public static NameRecord Read(BigEndianBinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.Name.NameTable : Table {
    internal static string TableName;
    private NameRecord[] names;
    internal NameTable(NameRecord[] names, String[] languages);
    public string Id(CultureInfo culture);
    public string FontName(CultureInfo culture);
    public string FontFamilyName(CultureInfo culture);
    public string FontSubFamilyName(CultureInfo culture);
    public string GetNameById(CultureInfo culture, KnownNameIds nameId);
    public string GetNameById(CultureInfo culture, ushort nameId);
    public static NameTable Load(FontReader fontReader);
    public static NameTable Load(BigEndianBinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.OS2Table : Table {
    internal static string TableName;
    private ushort styleType;
    private Byte[] panose;
    private short capHeight;
    private short familyClass;
    private short heightX;
    private string tag;
    private ushort codePageRange1;
    private ushort codePageRange2;
    private UInt32 unicodeRange1;
    private UInt32 unicodeRange2;
    private UInt32 unicodeRange3;
    private UInt32 unicodeRange4;
    private ushort breakChar;
    private ushort defaultChar;
    private ushort firstCharIndex;
    private ushort lastCharIndex;
    private ushort lowerOpticalPointSize;
    private ushort maxContext;
    private ushort upperOpticalPointSize;
    private ushort weightClass;
    private ushort widthClass;
    private short averageCharWidth;
    [CompilerGeneratedAttribute]
private FontStyleSelection <FontStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private short <TypoAscender>k__BackingField;
    [CompilerGeneratedAttribute]
private short <TypoDescender>k__BackingField;
    [CompilerGeneratedAttribute]
private short <TypoLineGap>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <WinAscent>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <WinDescent>k__BackingField;
    [CompilerGeneratedAttribute]
private short <StrikeoutPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private short <StrikeoutSize>k__BackingField;
    [CompilerGeneratedAttribute]
private short <SubscriptXOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private short <SubscriptXSize>k__BackingField;
    [CompilerGeneratedAttribute]
private short <SubscriptYOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private short <SubscriptYSize>k__BackingField;
    [CompilerGeneratedAttribute]
private short <SuperscriptXOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private short <SuperscriptXSize>k__BackingField;
    [CompilerGeneratedAttribute]
private short <SuperscriptYOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private short <SuperscriptYSize>k__BackingField;
    public FontStyleSelection FontStyle { get; }
    public short TypoAscender { get; }
    public short TypoDescender { get; }
    public short TypoLineGap { get; }
    public ushort WinAscent { get; }
    public ushort WinDescent { get; }
    public short StrikeoutPosition { get; }
    public short StrikeoutSize { get; }
    public short SubscriptXOffset { get; }
    public short SubscriptXSize { get; }
    public short SubscriptYOffset { get; }
    public short SubscriptYSize { get; }
    public short SuperscriptXOffset { get; }
    public short SuperscriptXSize { get; }
    public short SuperscriptYOffset { get; }
    public short SuperscriptYSize { get; }
    public OS2Table(short averageCharWidth, ushort weightClass, ushort widthClass, ushort styleType, short subscriptXSize, short subscriptYSize, short subscriptXOffset, short subscriptYOffset, short superscriptXSize, short superscriptYSize, short superscriptXOffset, short superscriptYOffset, short strikeoutSize, short strikeoutPosition, short familyClass, Byte[] panose, UInt32 unicodeRange1, UInt32 unicodeRange2, UInt32 unicodeRange3, UInt32 unicodeRange4, string tag, FontStyleSelection fontStyle, ushort firstCharIndex, ushort lastCharIndex, short typoAscender, short typoDescender, short typoLineGap, ushort winAscent, ushort winDescent);
    public OS2Table(OS2Table version0Table, ushort codePageRange1, ushort codePageRange2, short heightX, short capHeight, ushort defaultChar, ushort breakChar, ushort maxContext);
    public OS2Table(OS2Table versionLessThan5Table, ushort lowerOpticalPointSize, ushort upperOpticalPointSize);
    [CompilerGeneratedAttribute]
public FontStyleSelection get_FontStyle();
    [CompilerGeneratedAttribute]
public short get_TypoAscender();
    [CompilerGeneratedAttribute]
public short get_TypoDescender();
    [CompilerGeneratedAttribute]
public short get_TypoLineGap();
    [CompilerGeneratedAttribute]
public ushort get_WinAscent();
    [CompilerGeneratedAttribute]
public ushort get_WinDescent();
    [CompilerGeneratedAttribute]
public short get_StrikeoutPosition();
    [CompilerGeneratedAttribute]
public short get_StrikeoutSize();
    [CompilerGeneratedAttribute]
public short get_SubscriptXOffset();
    [CompilerGeneratedAttribute]
public short get_SubscriptXSize();
    [CompilerGeneratedAttribute]
public short get_SubscriptYOffset();
    [CompilerGeneratedAttribute]
public short get_SubscriptYSize();
    [CompilerGeneratedAttribute]
public short get_SuperscriptXOffset();
    [CompilerGeneratedAttribute]
public short get_SuperscriptXSize();
    [CompilerGeneratedAttribute]
public short get_SuperscriptYOffset();
    [CompilerGeneratedAttribute]
public short get_SuperscriptYSize();
    public static OS2Table Load(FontReader fontReader);
    public static OS2Table Load(BigEndianBinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.Post.PostNameRecord : object {
    [CompilerGeneratedAttribute]
private ushort <NameIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public ushort NameIndex { get; }
    public string Name { get; }
    internal PostNameRecord(ushort nameIndex, string name);
    [CompilerGeneratedAttribute]
public ushort get_NameIndex();
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.Post.PostTable : Table {
    internal static string TableName;
    private static String[] AppleGlyphNameMap;
    [CompilerGeneratedAttribute]
private PostNameRecord[] <PostRecords>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <FormatMajor>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <FormatMinor>k__BackingField;
    [CompilerGeneratedAttribute]
private short <UnderlinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private short <UnderlineThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ItalicAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <IsFixedPitch>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MinMemType42>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaxMemType42>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MinMemType1>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaxMemType1>k__BackingField;
    public PostNameRecord[] PostRecords { get; }
    public ushort FormatMajor { get; }
    public ushort FormatMinor { get; }
    public short UnderlinePosition { get; }
    public short UnderlineThickness { get; }
    public float ItalicAngle { get; }
    public UInt32 IsFixedPitch { get; }
    public UInt32 MinMemType42 { get; }
    public UInt32 MaxMemType42 { get; }
    public UInt32 MinMemType1 { get; }
    public UInt32 MaxMemType1 { get; }
    public PostTable(ushort formatMajor, ushort formatMinor, short underlinePosition, short underlineThickness, float italicAngle, UInt32 isFixedPitch, UInt32 minMemType42, UInt32 maxMemType42, UInt32 minMemType1, UInt32 maxMemType1, PostNameRecord[] postRecords);
    private static PostTable();
    [CompilerGeneratedAttribute]
public PostNameRecord[] get_PostRecords();
    [CompilerGeneratedAttribute]
public ushort get_FormatMajor();
    [CompilerGeneratedAttribute]
public ushort get_FormatMinor();
    [CompilerGeneratedAttribute]
public short get_UnderlinePosition();
    [CompilerGeneratedAttribute]
public short get_UnderlineThickness();
    [CompilerGeneratedAttribute]
public float get_ItalicAngle();
    [CompilerGeneratedAttribute]
public UInt32 get_IsFixedPitch();
    [CompilerGeneratedAttribute]
public UInt32 get_MinMemType42();
    [CompilerGeneratedAttribute]
public UInt32 get_MaxMemType42();
    [CompilerGeneratedAttribute]
public UInt32 get_MinMemType1();
    [CompilerGeneratedAttribute]
public UInt32 get_MaxMemType1();
    public static PostTable Load(FontReader fontReader);
    public static PostTable Load(BigEndianBinaryReader reader);
    [NullableContextAttribute("2")]
public string GetPostScriptName(int nameIndex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.VerticalHeadTable : Table {
    internal static string TableName;
    [CompilerGeneratedAttribute]
private short <Ascender>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Descender>k__BackingField;
    [CompilerGeneratedAttribute]
private short <LineGap>k__BackingField;
    [CompilerGeneratedAttribute]
private short <AdvanceHeightMax>k__BackingField;
    [CompilerGeneratedAttribute]
private short <MinTopSideBearing>k__BackingField;
    [CompilerGeneratedAttribute]
private short <MinBottomSideBearing>k__BackingField;
    [CompilerGeneratedAttribute]
private short <YMaxExtent>k__BackingField;
    [CompilerGeneratedAttribute]
private short <CaretSlopeRise>k__BackingField;
    [CompilerGeneratedAttribute]
private short <CaretSlopeRun>k__BackingField;
    [CompilerGeneratedAttribute]
private short <CaretOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <NumberOfVMetrics>k__BackingField;
    public short Ascender { get; }
    public short Descender { get; }
    public short LineGap { get; }
    public short AdvanceHeightMax { get; }
    public short MinTopSideBearing { get; }
    public short MinBottomSideBearing { get; }
    public short YMaxExtent { get; }
    public short CaretSlopeRise { get; }
    public short CaretSlopeRun { get; }
    public short CaretOffset { get; }
    public ushort NumberOfVMetrics { get; }
    public VerticalHeadTable(short ascender, short descender, short lineGap, short advanceHeightMax, short minTopSideBearing, short minBottomSideBearing, short yMaxExtent, short caretSlopeRise, short caretSlopeRun, short caretOffset, ushort numberOfVMetrics);
    [CompilerGeneratedAttribute]
public short get_Ascender();
    [CompilerGeneratedAttribute]
public short get_Descender();
    [CompilerGeneratedAttribute]
public short get_LineGap();
    [CompilerGeneratedAttribute]
public short get_AdvanceHeightMax();
    [CompilerGeneratedAttribute]
public short get_MinTopSideBearing();
    [CompilerGeneratedAttribute]
public short get_MinBottomSideBearing();
    [CompilerGeneratedAttribute]
public short get_YMaxExtent();
    [CompilerGeneratedAttribute]
public short get_CaretSlopeRise();
    [CompilerGeneratedAttribute]
public short get_CaretSlopeRun();
    [CompilerGeneratedAttribute]
public short get_CaretOffset();
    [CompilerGeneratedAttribute]
public ushort get_NumberOfVMetrics();
    public static VerticalHeadTable Load(FontReader fontReader);
    public static VerticalHeadTable Load(BigEndianBinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.General.VerticalMetricsTable : Table {
    internal static string TableName;
    private Int16[] topSideBearings;
    private UInt16[] advancedHeights;
    public VerticalMetricsTable(UInt16[] advancedHeights, Int16[] topSideBearings);
    public ushort GetAdvancedHeight(int glyphIndex);
    internal short GetTopSideBearing(int glyphIndex);
    public static VerticalMetricsTable Load(FontReader reader);
    public static VerticalMetricsTable Load(BigEndianBinaryReader reader, int metricCount, int glyphCount);
}
[NullableContextAttribute("1")]
internal interface SixLabors.Fonts.Tables.IFontTables {
    public CMapTable Cmap { get; public set; }
    public HeadTable Head { get; public set; }
    public HorizontalHeadTable Hhea { get; public set; }
    public HorizontalMetricsTable Htmx { get; public set; }
    public MaximumProfileTable Maxp { get; public set; }
    public NameTable Name { get; public set; }
    public OS2Table Os2 { get; public set; }
    public PostTable Post { get; public set; }
    [NullableAttribute("2")]
public GlyphDefinitionTable Gdef { get; public set; }
    [NullableAttribute("2")]
public GSubTable GSub { get; public set; }
    [NullableAttribute("2")]
public GPosTable GPos { get; public set; }
    [NullableAttribute("2")]
public ColrTable Colr { get; public set; }
    [NullableAttribute("2")]
public CpalTable Cpal { get; public set; }
    [NullableAttribute("2")]
public KerningTable Kern { get; public set; }
    [NullableAttribute("2")]
public VerticalHeadTable Vhea { get; public set; }
    [NullableAttribute("2")]
public VerticalMetricsTable Vmtx { get; public set; }
    public abstract virtual CMapTable get_Cmap();
    public abstract virtual void set_Cmap(CMapTable value);
    public abstract virtual HeadTable get_Head();
    public abstract virtual void set_Head(HeadTable value);
    public abstract virtual HorizontalHeadTable get_Hhea();
    public abstract virtual void set_Hhea(HorizontalHeadTable value);
    public abstract virtual HorizontalMetricsTable get_Htmx();
    public abstract virtual void set_Htmx(HorizontalMetricsTable value);
    public abstract virtual MaximumProfileTable get_Maxp();
    public abstract virtual void set_Maxp(MaximumProfileTable value);
    public abstract virtual NameTable get_Name();
    public abstract virtual void set_Name(NameTable value);
    public abstract virtual OS2Table get_Os2();
    public abstract virtual void set_Os2(OS2Table value);
    public abstract virtual PostTable get_Post();
    public abstract virtual void set_Post(PostTable value);
    [NullableContextAttribute("2")]
public abstract virtual GlyphDefinitionTable get_Gdef();
    [NullableContextAttribute("2")]
public abstract virtual void set_Gdef(GlyphDefinitionTable value);
    [NullableContextAttribute("2")]
public abstract virtual GSubTable get_GSub();
    [NullableContextAttribute("2")]
public abstract virtual void set_GSub(GSubTable value);
    [NullableContextAttribute("2")]
public abstract virtual GPosTable get_GPos();
    [NullableContextAttribute("2")]
public abstract virtual void set_GPos(GPosTable value);
    [NullableContextAttribute("2")]
public abstract virtual ColrTable get_Colr();
    [NullableContextAttribute("2")]
public abstract virtual void set_Colr(ColrTable value);
    [NullableContextAttribute("2")]
public abstract virtual CpalTable get_Cpal();
    [NullableContextAttribute("2")]
public abstract virtual void set_Cpal(CpalTable value);
    [NullableContextAttribute("2")]
public abstract virtual KerningTable get_Kern();
    [NullableContextAttribute("2")]
public abstract virtual void set_Kern(KerningTable value);
    [NullableContextAttribute("2")]
public abstract virtual VerticalHeadTable get_Vhea();
    [NullableContextAttribute("2")]
public abstract virtual void set_Vhea(VerticalHeadTable value);
    [NullableContextAttribute("2")]
public abstract virtual VerticalMetricsTable get_Vmtx();
    [NullableContextAttribute("2")]
public abstract virtual void set_Vmtx(VerticalMetricsTable value);
}
internal abstract class SixLabors.Fonts.Tables.Table : object {
}
internal enum SixLabors.Fonts.Tables.TableFormat : Enum {
    public int value__;
    public static TableFormat Woff;
    public static TableFormat Woff2;
    public static TableFormat Otf;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.TableHeader : object {
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CheckSum>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Length>k__BackingField;
    public string Tag { get; }
    public UInt32 Offset { get; }
    public UInt32 CheckSum { get; }
    public UInt32 Length { get; }
    public TableHeader(string tag, UInt32 checkSum, UInt32 offset, UInt32 len);
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public UInt32 get_Offset();
    [CompilerGeneratedAttribute]
public UInt32 get_CheckSum();
    [CompilerGeneratedAttribute]
public UInt32 get_Length();
    public static TableHeader Read(BigEndianBinaryReader reader);
    public virtual BigEndianBinaryReader CreateReader(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.TableLoader : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, Func`2<FontReader, Table>> loaders;
    private Dictionary`2<Type, string> types;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Type, Func`2<FontReader, Table>> typesLoaders;
    [CompilerGeneratedAttribute]
private static TableLoader <Default>k__BackingField;
    public static TableLoader Default { get; }
    private static TableLoader();
    [CompilerGeneratedAttribute]
public static TableLoader get_Default();
    public string GetTag(Type type);
    public string GetTag();
    internal IEnumerable`1<Type> RegisteredTypes();
    internal IEnumerable`1<string> RegisteredTags();
    private void Register(string tag, Func`2<FontReader, T> createFunc);
    internal Table Load(string tag, FontReader reader);
    internal TTable Load(FontReader reader);
}
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.Tables.TripleEncodingRecord : ValueType {
    public byte ByteCount;
    public byte XBits;
    public byte YBits;
    public ushort DeltaX;
    public ushort DeltaY;
    public sbyte Xsign;
    public sbyte Ysign;
    public TripleEncodingRecord(byte byteCount, byte xbits, byte ybits, ushort deltaX, ushort deltaY, sbyte xsign, sbyte ysign);
    public int Tx(int orgX);
    public int Ty(int orgY);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class SixLabors.Fonts.Tables.TripleEncodingTable : object {
    public static TripleEncodingTable EncTable;
    private List`1<TripleEncodingRecord> records;
    public TripleEncodingRecord Item { get; }
    private static TripleEncodingTable();
    public TripleEncodingRecord get_Item(int i);
    private void BuildTable();
    private void BuildRecords(byte byteCount, byte xbits, byte ybits, UInt16[] deltaXs, UInt16[] deltaYs);
    private void AddRecord(byte byteCount, byte xbits, byte ybits, ushort deltaX, ushort deltaY, sbyte xsign, sbyte ysign);
}
[FlagsAttribute]
internal enum SixLabors.Fonts.Tables.TrueType.Glyphs.CompositeGlyphFlags : Enum {
    public ushort value__;
    public static CompositeGlyphFlags Args1And2AreWords;
    public static CompositeGlyphFlags ArgsAreXYValues;
    public static CompositeGlyphFlags RoundXYToGrid;
    public static CompositeGlyphFlags WeHaveAScale;
    public static CompositeGlyphFlags Reserved;
    public static CompositeGlyphFlags MoreComponents;
    public static CompositeGlyphFlags WeHaveXAndYScale;
    public static CompositeGlyphFlags WeHaveATwoByTwo;
    public static CompositeGlyphFlags WeHaveInstructions;
    public static CompositeGlyphFlags UseMyMetrics;
    public static CompositeGlyphFlags OverlapCompound;
    public static CompositeGlyphFlags ScaledComponentOffset;
    public static CompositeGlyphFlags UnscaledComponentOffset;
}
internal class SixLabors.Fonts.Tables.TrueType.Glyphs.CompositeGlyphLoader : GlyphLoader {
    private Bounds bounds;
    [NullableAttribute("1")]
private Composite[] composites;
    private ReadOnlyMemory`1<byte> instructions;
    public CompositeGlyphLoader(IEnumerable`1<Composite> composites, Bounds bounds, ReadOnlyMemory`1<byte> instructions);
    [NullableContextAttribute("1")]
public virtual GlyphVector CreateGlyph(GlyphTable table);
    [NullableContextAttribute("1")]
public static CompositeGlyphLoader LoadCompositeGlyph(BigEndianBinaryReader reader, Bounds& bounds);
    [NullableContextAttribute("1")]
public static void LoadArguments(BigEndianBinaryReader reader, CompositeGlyphFlags flags, Int32& dx, Int32& dy);
}
internal class SixLabors.Fonts.Tables.TrueType.Glyphs.ControlPoint : ValueType {
    public Vector2 Point;
    public bool OnCurve;
    public ControlPoint(Vector2 point, bool onCurve);
    public static bool op_Equality(ControlPoint left, ControlPoint right);
    public static bool op_Inequality(ControlPoint left, ControlPoint right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(ControlPoint other);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
public virtual string ToString();
}
internal class SixLabors.Fonts.Tables.TrueType.Glyphs.EmptyGlyphLoader : GlyphLoader {
    private bool loop;
    private Bounds fallbackEmptyBounds;
    private Nullable`1<GlyphVector> glyph;
    public EmptyGlyphLoader(Bounds fallbackEmptyBounds);
    [NullableContextAttribute("1")]
public virtual GlyphVector CreateGlyph(GlyphTable table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class SixLabors.Fonts.Tables.TrueType.Glyphs.GlyphLoader : object {
    public abstract virtual GlyphVector CreateGlyph(GlyphTable table);
    public static GlyphLoader Load(BigEndianBinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.TrueType.Glyphs.GlyphTable : Table {
    internal static string TableName;
    private GlyphLoader[] loaders;
    public int GlyphCount { get; }
    public GlyphTable(GlyphLoader[] glyphLoaders);
    public int get_GlyphCount();
    internal virtual GlyphVector GetGlyph(int index);
    public static GlyphTable Load(FontReader reader);
    public static GlyphTable Load(BigEndianBinaryReader reader, TableFormat format, UInt32[] locations, Bounds& fallbackEmptyBounds);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.TrueType.Glyphs.GlyphVector : ValueType {
    [CompilerGeneratedAttribute]
private IList`1<ControlPoint> <ControlPoints>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ushort> <EndPoints>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Instructions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsComposite>k__BackingField;
    [CompilerGeneratedAttribute]
private Bounds <Bounds>k__BackingField;
    public IList`1<ControlPoint> ControlPoints { get; public set; }
    public IReadOnlyList`1<ushort> EndPoints { get; public set; }
    [NullableAttribute("0")]
public ReadOnlyMemory`1<byte> Instructions { get; public set; }
    public bool IsComposite { get; public set; }
    public Bounds Bounds { get; public set; }
    internal GlyphVector(IList`1<ControlPoint> controlPoints, IReadOnlyList`1<ushort> endPoints, Bounds bounds, ReadOnlyMemory`1<byte> instructions, bool isComposite);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IList`1<ControlPoint> get_ControlPoints();
    [CompilerGeneratedAttribute]
public void set_ControlPoints(IList`1<ControlPoint> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IReadOnlyList`1<ushort> get_EndPoints();
    [CompilerGeneratedAttribute]
public void set_EndPoints(IReadOnlyList`1<ushort> value);
    [IsReadOnlyAttribute]
[NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Instructions();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_Instructions(ReadOnlyMemory`1<byte> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsComposite();
    [CompilerGeneratedAttribute]
public void set_IsComposite(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Bounds get_Bounds();
    [CompilerGeneratedAttribute]
public void set_Bounds(Bounds value);
    public static GlyphVector Empty(Bounds bounds);
    public static void TransformInPlace(GlyphVector& src, Matrix3x2 matrix);
    public static void Hint(HintingMode hintingMode, GlyphVector& glyph, TrueTypeInterpreter interpreter, Vector2 pp1, Vector2 pp2, Vector2 pp3, Vector2 pp4);
    public static GlyphVector DeepClone(GlyphVector src);
    [IsReadOnlyAttribute]
public bool HasValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.TrueType.Glyphs.SimpleGlyphLoader : GlyphLoader {
    private ControlPoint[] controlPoints;
    private UInt16[] endPoints;
    private Bounds bounds;
    private Byte[] instructions;
    public SimpleGlyphLoader(ControlPoint[] controlPoints, UInt16[] endPoints, Bounds bounds, Byte[] instructions);
    public SimpleGlyphLoader(Bounds bounds);
    public virtual GlyphVector CreateGlyph(GlyphTable table);
    public static GlyphLoader LoadSimpleGlyph(BigEndianBinaryReader reader, short count, Bounds& bounds);
    private static Flags[] ReadFlags(BigEndianBinaryReader reader, int flagCount);
    private static Int16[] ReadCoordinates(BigEndianBinaryReader reader, int pointCount, Flags[] flags, Flags isByte, Flags signOrSame);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.TrueType.Hinting.CvtTable : Table {
    internal static string TableName;
    [CompilerGeneratedAttribute]
private Int16[] <ControlValues>k__BackingField;
    public Int16[] ControlValues { get; }
    public CvtTable(Int16[] controlValues);
    [CompilerGeneratedAttribute]
public Int16[] get_ControlValues();
    public static CvtTable Load(FontReader fontReader);
    public static CvtTable Load(BigEndianBinaryReader reader, UInt32 tableLength);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.TrueType.Hinting.FpgmTable : Table {
    internal static string TableName;
    [CompilerGeneratedAttribute]
private Byte[] <Instructions>k__BackingField;
    public Byte[] Instructions { get; }
    public FpgmTable(Byte[] instructions);
    [CompilerGeneratedAttribute]
public Byte[] get_Instructions();
    public static FpgmTable Load(FontReader fontReader);
    public static FpgmTable Load(BigEndianBinaryReader reader, UInt32 tableLength);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.TrueType.Hinting.PrepTable : Table {
    internal static string TableName;
    [CompilerGeneratedAttribute]
private Byte[] <Instructions>k__BackingField;
    public Byte[] Instructions { get; }
    public PrepTable(Byte[] instructions);
    [CompilerGeneratedAttribute]
public Byte[] get_Instructions();
    public static PrepTable Load(FontReader fontReader);
    public static PrepTable Load(BigEndianBinaryReader reader, UInt32 tableLength);
}
internal class SixLabors.Fonts.Tables.TrueType.Hinting.TrueTypeInterpreter : object {
    private GraphicsState state;
    private GraphicsState cvtState;
    [NullableAttribute("1")]
private ExecutionStack stack;
    [NullableAttribute("1")]
private InstructionStream[] functions;
    [NullableAttribute("1")]
private InstructionStream[] instructionDefs;
    [NullableAttribute("1")]
private Single[] controlValueTable;
    [NullableAttribute("1")]
private Int32[] storage;
    [NullableAttribute("1")]
private IReadOnlyList`1<ushort> contours;
    private float scale;
    private int ppem;
    private int callStackSize;
    private float fdotp;
    private float roundThreshold;
    private float roundPhase;
    private float roundPeriod;
    private bool iupXCalled;
    private bool iupYCalled;
    private bool isComposite;
    private Zone zp0;
    private Zone zp1;
    private Zone zp2;
    private Zone points;
    private Zone twilight;
    private static float Sqrt2Over2;
    private static int MaxCallStack;
    private static float Epsilon;
    [NullableAttribute("1")]
private List`1<OpCode> debugList;
    public TrueTypeInterpreter(int maxStack, int maxStorage, int maxFunctions, int maxInstructionDefs, int maxTwilightPoints);
    private static TrueTypeInterpreter();
    [NullableContextAttribute("1")]
public void InitializeFunctionDefs(Byte[] instructions);
    [NullableContextAttribute("2")]
public void SetControlValueTable(Int16[] cvt, float scale, float ppem, Byte[] cvProgram);
    [NullableContextAttribute("1")]
public void HintGlyph(ControlPoint[] controlPoints, IReadOnlyList`1<ushort> endPoints, ReadOnlyMemory`1<byte> instructions, bool isComposite);
    private void Execute(StackInstructionStream stream, bool inFunction, bool allowFunctionDefs);
    private static int CheckIndex(int index, int length);
    private float ReadCvt();
    private void OnVectorsUpdated();
    private void SetFreedomVectorToAxis(int axis);
    private void SetProjectionVectorToAxis(int axis);
    private void SetVectorToLine(int mode, bool dual);
    private Zone GetZoneFromStack();
    private void SetSuperRound(float period);
    private void MoveIndirectRelative(int flags);
    private void MoveDirectRelative(int flags);
    private Vector2 ComputeDisplacement(int mode, Zone& zone, Int32& point);
    private TouchState GetTouchState();
    private void ShiftPoints(Vector2 displacement);
    private void MovePoint(Zone zone, int index, float distance);
    private float Round(float value);
    private float Project(Vector2 point);
    private float DualProject(Vector2 point);
    private static OpCode SkipNext(StackInstructionStream& stream);
    private static void InterpolatePoints(Byte* current, Byte* original, int start, int end, int ref1, int ref2);
    private static float F2Dot14ToFloat(int value);
    private static int FloatToF2Dot14(float value);
    private static float F26Dot6ToFloat(int value);
    private static int FloatToF26Dot6(float value);
    private static Single* GetPoint(Byte* data, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.TrueType.IndexLocationTable : Table {
    internal static string TableName;
    [CompilerGeneratedAttribute]
private UInt32[] <GlyphOffsets>k__BackingField;
    public UInt32[] GlyphOffsets { get; }
    public IndexLocationTable(UInt32[] convertedData);
    [CompilerGeneratedAttribute]
public UInt32[] get_GlyphOffsets();
    public static IndexLocationTable Load(FontReader fontReader);
    public static IndexLocationTable Load(BigEndianBinaryReader reader, int glyphCount, IndexLocationFormats format);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.TrueType.TrueTypeFontTables : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private CMapTable <Cmap>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private HeadTable <Head>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private HorizontalHeadTable <Hhea>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private HorizontalMetricsTable <Htmx>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private MaximumProfileTable <Maxp>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private NameTable <Name>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private OS2Table <Os2>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private PostTable <Post>k__BackingField;
    [CompilerGeneratedAttribute]
private GlyphDefinitionTable <Gdef>k__BackingField;
    [CompilerGeneratedAttribute]
private GSubTable <GSub>k__BackingField;
    [CompilerGeneratedAttribute]
private GPosTable <GPos>k__BackingField;
    [CompilerGeneratedAttribute]
private ColrTable <Colr>k__BackingField;
    [CompilerGeneratedAttribute]
private CpalTable <Cpal>k__BackingField;
    [CompilerGeneratedAttribute]
private KerningTable <Kern>k__BackingField;
    [CompilerGeneratedAttribute]
private VerticalHeadTable <Vhea>k__BackingField;
    [CompilerGeneratedAttribute]
private VerticalMetricsTable <Vmtx>k__BackingField;
    [CompilerGeneratedAttribute]
private CvtTable <Cvt>k__BackingField;
    [CompilerGeneratedAttribute]
private FpgmTable <Fpgm>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private GlyphTable <Glyf>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IndexLocationTable <Loca>k__BackingField;
    [CompilerGeneratedAttribute]
private PrepTable <Prep>k__BackingField;
    [NullableAttribute("1")]
public CMapTable Cmap { get; public set; }
    [NullableAttribute("1")]
public HeadTable Head { get; public set; }
    [NullableAttribute("1")]
public HorizontalHeadTable Hhea { get; public set; }
    [NullableAttribute("1")]
public HorizontalMetricsTable Htmx { get; public set; }
    [NullableAttribute("1")]
public MaximumProfileTable Maxp { get; public set; }
    [NullableAttribute("1")]
public NameTable Name { get; public set; }
    [NullableAttribute("1")]
public OS2Table Os2 { get; public set; }
    [NullableAttribute("1")]
public PostTable Post { get; public set; }
    public GlyphDefinitionTable Gdef { get; public set; }
    public GSubTable GSub { get; public set; }
    public GPosTable GPos { get; public set; }
    public ColrTable Colr { get; public set; }
    public CpalTable Cpal { get; public set; }
    public KerningTable Kern { get; public set; }
    public VerticalHeadTable Vhea { get; public set; }
    public VerticalMetricsTable Vmtx { get; public set; }
    public CvtTable Cvt { get; public set; }
    public FpgmTable Fpgm { get; public set; }
    [NullableAttribute("1")]
public GlyphTable Glyf { get; public set; }
    [NullableAttribute("1")]
public IndexLocationTable Loca { get; public set; }
    public PrepTable Prep { get; public set; }
    [NullableContextAttribute("1")]
public TrueTypeFontTables(CMapTable cmap, HeadTable head, HorizontalHeadTable hhea, HorizontalMetricsTable htmx, MaximumProfileTable maxp, NameTable name, OS2Table os2, PostTable post, GlyphTable glyph, IndexLocationTable loca);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual CMapTable get_Cmap();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Cmap(CMapTable value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual HeadTable get_Head();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Head(HeadTable value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual HorizontalHeadTable get_Hhea();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Hhea(HorizontalHeadTable value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual HorizontalMetricsTable get_Htmx();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Htmx(HorizontalMetricsTable value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual MaximumProfileTable get_Maxp();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Maxp(MaximumProfileTable value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual NameTable get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Name(NameTable value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual OS2Table get_Os2();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Os2(OS2Table value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual PostTable get_Post();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Post(PostTable value);
    [CompilerGeneratedAttribute]
public sealed virtual GlyphDefinitionTable get_Gdef();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Gdef(GlyphDefinitionTable value);
    [CompilerGeneratedAttribute]
public sealed virtual GSubTable get_GSub();
    [CompilerGeneratedAttribute]
public sealed virtual void set_GSub(GSubTable value);
    [CompilerGeneratedAttribute]
public sealed virtual GPosTable get_GPos();
    [CompilerGeneratedAttribute]
public sealed virtual void set_GPos(GPosTable value);
    [CompilerGeneratedAttribute]
public sealed virtual ColrTable get_Colr();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Colr(ColrTable value);
    [CompilerGeneratedAttribute]
public sealed virtual CpalTable get_Cpal();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Cpal(CpalTable value);
    [CompilerGeneratedAttribute]
public sealed virtual KerningTable get_Kern();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kern(KerningTable value);
    [CompilerGeneratedAttribute]
public sealed virtual VerticalHeadTable get_Vhea();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Vhea(VerticalHeadTable value);
    [CompilerGeneratedAttribute]
public sealed virtual VerticalMetricsTable get_Vmtx();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Vmtx(VerticalMetricsTable value);
    [CompilerGeneratedAttribute]
public CvtTable get_Cvt();
    [CompilerGeneratedAttribute]
public void set_Cvt(CvtTable value);
    [CompilerGeneratedAttribute]
public FpgmTable get_Fpgm();
    [CompilerGeneratedAttribute]
public void set_Fpgm(FpgmTable value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public GlyphTable get_Glyf();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Glyf(GlyphTable value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IndexLocationTable get_Loca();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Loca(IndexLocationTable value);
    [CompilerGeneratedAttribute]
public PrepTable get_Prep();
    [CompilerGeneratedAttribute]
public void set_Prep(PrepTable value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.Fonts.Tables.TrueType.TrueTypeGlyphMetrics : GlyphMetrics {
    private static Vector2 YInverter;
    private GlyphVector vector;
    private ConcurrentDictionary`2<float, GlyphVector> scaledVectorCache;
    internal TrueTypeGlyphMetrics(StreamFontMetrics font, ushort glyphId, CodePoint codePoint, GlyphVector vector, ushort advanceWidth, ushort advanceHeight, short leftSideBearing, short topSideBearing, ushort unitsPerEM, TextAttributes textAttributes, TextDecorations textDecorations, GlyphType glyphType, Nullable`1<GlyphColor> glyphColor);
    internal TrueTypeGlyphMetrics(StreamFontMetrics font, ushort glyphId, CodePoint codePoint, GlyphVector vector, ushort advanceWidth, ushort advanceHeight, short leftSideBearing, short topSideBearing, ushort unitsPerEM, Vector2 offset, Vector2 scaleFactor, TextRun textRun, GlyphType glyphType, Nullable`1<GlyphColor> glyphColor);
    private static TrueTypeGlyphMetrics();
    internal virtual GlyphMetrics CloneForRendering(TextRun textRun);
    internal GlyphVector GetOutline();
    internal virtual void RenderTo(IGlyphRenderer renderer, Vector2 location, Vector2 offset, GlyphLayoutMode mode, TextOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.TtcHeader : object {
    internal static string TableName;
    [CompilerGeneratedAttribute]
private string <TtcTag>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <NumFonts>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32[] <OffsetTable>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DsigTag>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DsigLength>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DsigOffset>k__BackingField;
    public string TtcTag { get; }
    public ushort MajorVersion { get; }
    public ushort MinorVersion { get; }
    public UInt32 NumFonts { get; }
    public UInt32[] OffsetTable { get; }
    public UInt32 DsigTag { get; }
    public UInt32 DsigLength { get; }
    public UInt32 DsigOffset { get; }
    public TtcHeader(string ttcTag, ushort majorVersion, ushort minorVersion, UInt32 numFonts, UInt32[] offsetTable, UInt32 dsigTag, UInt32 dsigLength, UInt32 dsigOffset);
    [CompilerGeneratedAttribute]
public string get_TtcTag();
    [CompilerGeneratedAttribute]
public ushort get_MajorVersion();
    [CompilerGeneratedAttribute]
public ushort get_MinorVersion();
    [CompilerGeneratedAttribute]
public UInt32 get_NumFonts();
    [CompilerGeneratedAttribute]
public UInt32[] get_OffsetTable();
    [CompilerGeneratedAttribute]
public UInt32 get_DsigTag();
    [CompilerGeneratedAttribute]
public UInt32 get_DsigLength();
    [CompilerGeneratedAttribute]
public UInt32 get_DsigOffset();
    public static TtcHeader Read(BigEndianBinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.UnknownTable : Table {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    internal UnknownTable(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
internal class SixLabors.Fonts.Tables.Woff.Woff2GlyphLoader : GlyphLoader {
    private GlyphVector glyphVector;
    public Woff2GlyphLoader(GlyphVector glyphVector);
    [NullableContextAttribute("1")]
public virtual GlyphVector CreateGlyph(GlyphTable table);
}
internal class SixLabors.Fonts.Tables.Woff.Woff2TableHeader : TableHeader {
    [NullableContextAttribute("1")]
public Woff2TableHeader(string tag, UInt32 checkSum, UInt32 offset, UInt32 len);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.Fonts.Tables.Woff.Woff2Utils : object {
    private static String[] KnownTableTags;
    private static byte OneMoreByteCode1;
    private static byte OneMoreByteCode2;
    private static byte WordCode;
    private static byte LowestUCode;
    private static Woff2Utils();
    public static ReadOnlyDictionary`2<string, TableHeader> ReadWoff2Headers(BigEndianBinaryReader reader, int tableCount);
    public static Woff2TableHeader Read(BigEndianBinaryReader reader, UInt32 expectedTableStartAt, UInt32& nextExpectedTableStartAt);
    public static GlyphLoader[] LoadAllGlyphs(BigEndianBinaryReader reader, EmptyGlyphLoader emptyGlyphLoader);
    private static GlyphVector ReadSimpleGlyphData(BigEndianBinaryReader reader, GlyphData& glyphData, UInt16[] pntPerContours, Int32& pntContourIndex, Byte[] flagStream, Int32& flagStreamIndex);
    private static bool CompositeHasInstructions(BigEndianBinaryReader reader);
    private static GlyphVector ReadCompositeGlyphData(GlyphVector[] createdGlyphs, BigEndianBinaryReader reader);
    private static Byte[] ExpandBitmap(Byte[] orgBBoxBitmap);
    private static bool ReadUIntBase128(BigEndianBinaryReader reader, UInt32& result);
    private static ushort Read255UInt16(BigEndianBinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Tables.Woff.WoffTableHeader : TableHeader {
    [CompilerGeneratedAttribute]
private UInt32 <CompressedLength>k__BackingField;
    public UInt32 CompressedLength { get; }
    public WoffTableHeader(string tag, UInt32 offset, UInt32 compressedLength, UInt32 origLength, UInt32 checkSum);
    [CompilerGeneratedAttribute]
public UInt32 get_CompressedLength();
    public virtual BigEndianBinaryReader CreateReader(Stream stream);
    public static WoffTableHeader Read(BigEndianBinaryReader reader);
}
public enum SixLabors.Fonts.TextAlignment : Enum {
    public int value__;
    public static TextAlignment Start;
    public static TextAlignment End;
    public static TextAlignment Center;
}
[FlagsAttribute]
public enum SixLabors.Fonts.TextAttributes : Enum {
    public int value__;
    public static TextAttributes None;
    public static TextAttributes Subscript;
    public static TextAttributes Superscript;
}
[FlagsAttribute]
public enum SixLabors.Fonts.TextDecorations : Enum {
    public int value__;
    public static TextDecorations None;
    public static TextDecorations Underline;
    public static TextDecorations Strikeout;
    public static TextDecorations Overline;
}
public enum SixLabors.Fonts.TextDirection : Enum {
    public int value__;
    public static TextDirection LeftToRight;
    public static TextDirection RightToLeft;
    public static TextDirection Auto;
}
public enum SixLabors.Fonts.TextJustification : Enum {
    public int value__;
    public static TextJustification None;
    public static TextJustification InterWord;
    public static TextJustification InterCharacter;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.Fonts.TextLayout : object {
    public static IReadOnlyList`1<GlyphLayout> GenerateLayout(ReadOnlySpan`1<char> text, TextOptions options);
    public static IReadOnlyList`1<TextRun> BuildTextRuns(ReadOnlySpan`1<char> text, TextOptions options);
    private static TextBox ProcessText(ReadOnlySpan`1<char> text, TextOptions options);
    private static IReadOnlyList`1<GlyphLayout> LayoutText(TextBox textBox, TextOptions options);
    private static IEnumerable`1<GlyphLayout> LayoutLineHorizontal(TextBox textBox, TextLine textLine, TextDirection direction, float maxScaledAdvance, TextOptions options, int index, Vector2& boxLocation, Vector2& penLocation);
    private static IEnumerable`1<GlyphLayout> LayoutLineVertical(TextBox textBox, TextLine textLine, TextDirection direction, float maxScaledAdvance, TextOptions options, int index, Vector2& boxLocation, Vector2& penLocation);
    private static IEnumerable`1<GlyphLayout> LayoutLineVerticalMixed(TextBox textBox, TextLine textLine, TextDirection direction, float maxScaledAdvance, TextOptions options, int index, Vector2& boxLocation, Vector2& penLocation);
    private static bool DoFontRun(ReadOnlySpan`1<char> text, int start, IReadOnlyList`1<TextRun> textRuns, Int32& textRunIndex, Int32& codePointIndex, Int32& bidiRunIndex, bool isFallbackRun, Font font, BidiRun[] bidiRuns, Dictionary`2<int, int> bidiMap, GlyphSubstitutionCollection substitutions, GlyphPositioningCollection positionings);
    private static void SubstituteBidiMirrors(FontMetrics fontMetrics, GlyphSubstitutionCollection collection);
    private static TextBox BreakLines(ReadOnlySpan`1<char> text, TextOptions options, BidiRun[] bidiRuns, Dictionary`2<int, int> bidiMap, GlyphPositioningCollection positionings, LayoutMode layoutMode);
}
public static class SixLabors.Fonts.TextMeasurer : object {
    [NullableContextAttribute("1")]
public static FontRectangle MeasureAdvance(string text, TextOptions options);
    public static FontRectangle MeasureAdvance(ReadOnlySpan`1<char> text, TextOptions options);
    [NullableContextAttribute("1")]
public static FontRectangle MeasureSize(string text, TextOptions options);
    public static FontRectangle MeasureSize(ReadOnlySpan`1<char> text, TextOptions options);
    [NullableContextAttribute("1")]
public static FontRectangle MeasureBounds(string text, TextOptions options);
    public static FontRectangle MeasureBounds(ReadOnlySpan`1<char> text, TextOptions options);
    [NullableContextAttribute("1")]
public static bool TryMeasureCharacterAdvances(string text, TextOptions options, ReadOnlySpan`1& advances);
    public static bool TryMeasureCharacterAdvances(ReadOnlySpan`1<char> text, TextOptions options, ReadOnlySpan`1& advances);
    [NullableContextAttribute("1")]
public static bool TryMeasureCharacterSizes(string text, TextOptions options, ReadOnlySpan`1& sizes);
    public static bool TryMeasureCharacterSizes(ReadOnlySpan`1<char> text, TextOptions options, ReadOnlySpan`1& sizes);
    [NullableContextAttribute("1")]
public static bool TryMeasureCharacterBounds(string text, TextOptions options, ReadOnlySpan`1& bounds);
    public static bool TryMeasureCharacterBounds(ReadOnlySpan`1<char> text, TextOptions options, ReadOnlySpan`1& bounds);
    [NullableContextAttribute("1")]
public static int CountLines(string text, TextOptions options);
    public static int CountLines(ReadOnlySpan`1<char> text, TextOptions options);
    [NullableContextAttribute("1")]
internal static FontRectangle GetAdvance(IReadOnlyList`1<GlyphLayout> glyphLayouts, float dpi);
    [NullableContextAttribute("1")]
internal static FontRectangle GetSize(IReadOnlyList`1<GlyphLayout> glyphLayouts, float dpi);
    [NullableContextAttribute("1")]
internal static FontRectangle GetBounds(IReadOnlyList`1<GlyphLayout> glyphLayouts, float dpi);
    internal static bool TryGetCharacterAdvances(IReadOnlyList`1<GlyphLayout> glyphLayouts, float dpi, ReadOnlySpan`1& characterBounds);
    internal static bool TryGetCharacterSizes(IReadOnlyList`1<GlyphLayout> glyphLayouts, float dpi, ReadOnlySpan`1& characterBounds);
    internal static bool TryGetCharacterBounds(IReadOnlyList`1<GlyphLayout> glyphLayouts, float dpi, ReadOnlySpan`1& characterBounds);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.Fonts.TextOptions : object {
    private float dpi;
    private float lineSpacing;
    [NullableAttribute("2")]
private Font font;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<FontFamily> <FallbackFontFamilies>k__BackingField;
    [CompilerGeneratedAttribute]
private float <TabWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private HintingMode <HintingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector2 <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private float <WrappingLength>k__BackingField;
    [CompilerGeneratedAttribute]
private WordBreaking <WordBreaking>k__BackingField;
    [CompilerGeneratedAttribute]
private TextDirection <TextDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private TextAlignment <TextAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private TextJustification <TextJustification>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalAlignment <HorizontalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private VerticalAlignment <VerticalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private LayoutMode <LayoutMode>k__BackingField;
    [CompilerGeneratedAttribute]
private KerningMode <KerningMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorFontSupport <ColorFontSupport>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Tag> <FeatureTags>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<TextRun> <TextRuns>k__BackingField;
    public Font Font { get; public set; }
    public IReadOnlyList`1<FontFamily> FallbackFontFamilies { get; public set; }
    public float Dpi { get; public set; }
    public float TabWidth { get; public set; }
    public HintingMode HintingMode { get; public set; }
    public float LineSpacing { get; public set; }
    public Vector2 Origin { get; public set; }
    public float WrappingLength { get; public set; }
    public WordBreaking WordBreaking { get; public set; }
    public TextDirection TextDirection { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    public TextJustification TextJustification { get; public set; }
    public HorizontalAlignment HorizontalAlignment { get; public set; }
    public VerticalAlignment VerticalAlignment { get; public set; }
    public LayoutMode LayoutMode { get; public set; }
    public KerningMode KerningMode { get; public set; }
    public ColorFontSupport ColorFontSupport { get; public set; }
    public IReadOnlyList`1<Tag> FeatureTags { get; public set; }
    public IReadOnlyList`1<TextRun> TextRuns { get; public set; }
    public TextOptions(Font font);
    public TextOptions(TextOptions options);
    public Font get_Font();
    public void set_Font(Font value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<FontFamily> get_FallbackFontFamilies();
    [CompilerGeneratedAttribute]
public void set_FallbackFontFamilies(IReadOnlyList`1<FontFamily> value);
    public float get_Dpi();
    public void set_Dpi(float value);
    [CompilerGeneratedAttribute]
public float get_TabWidth();
    [CompilerGeneratedAttribute]
public void set_TabWidth(float value);
    [CompilerGeneratedAttribute]
public HintingMode get_HintingMode();
    [CompilerGeneratedAttribute]
public void set_HintingMode(HintingMode value);
    public float get_LineSpacing();
    public void set_LineSpacing(float value);
    [CompilerGeneratedAttribute]
public Vector2 get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(Vector2 value);
    [CompilerGeneratedAttribute]
public float get_WrappingLength();
    [CompilerGeneratedAttribute]
public void set_WrappingLength(float value);
    [CompilerGeneratedAttribute]
public WordBreaking get_WordBreaking();
    [CompilerGeneratedAttribute]
public void set_WordBreaking(WordBreaking value);
    [CompilerGeneratedAttribute]
public TextDirection get_TextDirection();
    [CompilerGeneratedAttribute]
public void set_TextDirection(TextDirection value);
    [CompilerGeneratedAttribute]
public TextAlignment get_TextAlignment();
    [CompilerGeneratedAttribute]
public void set_TextAlignment(TextAlignment value);
    [CompilerGeneratedAttribute]
public TextJustification get_TextJustification();
    [CompilerGeneratedAttribute]
public void set_TextJustification(TextJustification value);
    [CompilerGeneratedAttribute]
public HorizontalAlignment get_HorizontalAlignment();
    [CompilerGeneratedAttribute]
public void set_HorizontalAlignment(HorizontalAlignment value);
    [CompilerGeneratedAttribute]
public VerticalAlignment get_VerticalAlignment();
    [CompilerGeneratedAttribute]
public void set_VerticalAlignment(VerticalAlignment value);
    [CompilerGeneratedAttribute]
public LayoutMode get_LayoutMode();
    [CompilerGeneratedAttribute]
public void set_LayoutMode(LayoutMode value);
    [CompilerGeneratedAttribute]
public KerningMode get_KerningMode();
    [CompilerGeneratedAttribute]
public void set_KerningMode(KerningMode value);
    [CompilerGeneratedAttribute]
public ColorFontSupport get_ColorFontSupport();
    [CompilerGeneratedAttribute]
public void set_ColorFontSupport(ColorFontSupport value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Tag> get_FeatureTags();
    [CompilerGeneratedAttribute]
public void set_FeatureTags(IReadOnlyList`1<Tag> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<TextRun> get_TextRuns();
    [CompilerGeneratedAttribute]
public void set_TextRuns(IReadOnlyList`1<TextRun> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.Fonts.TextRenderer : object {
    private IGlyphRenderer renderer;
    public TextRenderer(IGlyphRenderer renderer);
    public static void RenderTextTo(IGlyphRenderer renderer, ReadOnlySpan`1<char> text, TextOptions options);
    public static void RenderTextTo(IGlyphRenderer renderer, string text, TextOptions options);
    public void RenderText(string text, TextOptions options);
    [NullableContextAttribute("0")]
public void RenderText(ReadOnlySpan`1<char> text, TextOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class SixLabors.Fonts.TextRun : object {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    [CompilerGeneratedAttribute]
private Font <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private TextAttributes <TextAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private TextDecorations <TextDecorations>k__BackingField;
    public int Start { get; public set; }
    public int End { get; public set; }
    public Font Font { get; public set; }
    public TextAttributes TextAttributes { get; public set; }
    public TextDecorations TextDecorations { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(int value);
    [CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
public void set_End(int value);
    [CompilerGeneratedAttribute]
public Font get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(Font value);
    [CompilerGeneratedAttribute]
public TextAttributes get_TextAttributes();
    [CompilerGeneratedAttribute]
public void set_TextAttributes(TextAttributes value);
    [CompilerGeneratedAttribute]
public TextDecorations get_TextDecorations();
    [CompilerGeneratedAttribute]
public void set_TextDecorations(TextDecorations value);
    [NullableContextAttribute("0")]
public ReadOnlySpan`1<char> Slice(ReadOnlySpan`1<char> text);
    [NullableContextAttribute("1")]
public virtual string ToString();
    private static void ValidateRange(int start, int end);
}
[IsReadOnlyAttribute]
public class SixLabors.Fonts.Unicode.ArabicJoiningClass : ValueType {
    [CompilerGeneratedAttribute]
private ArabicJoiningType <JoiningType>k__BackingField;
    [CompilerGeneratedAttribute]
private ArabicJoiningGroup <JoiningGroup>k__BackingField;
    public ArabicJoiningType JoiningType { get; }
    public ArabicJoiningGroup JoiningGroup { get; }
    public ArabicJoiningClass(CodePoint codePoint);
    [CompilerGeneratedAttribute]
public ArabicJoiningType get_JoiningType();
    [CompilerGeneratedAttribute]
public ArabicJoiningGroup get_JoiningGroup();
    private static ArabicJoiningType GetJoiningType(CodePoint codePoint, UInt32 value, UnicodeCategory category);
}
public enum SixLabors.Fonts.Unicode.ArabicJoiningGroup : Enum {
    public int value__;
    public static ArabicJoiningGroup AfricanFeh;
    public static ArabicJoiningGroup AfricanNoon;
    public static ArabicJoiningGroup AfricanQaf;
    public static ArabicJoiningGroup Ain;
    public static ArabicJoiningGroup Alaph;
    public static ArabicJoiningGroup Alef;
    public static ArabicJoiningGroup Beh;
    public static ArabicJoiningGroup Beth;
    public static ArabicJoiningGroup BurushaskiYehBarree;
    public static ArabicJoiningGroup Dal;
    public static ArabicJoiningGroup DalathRish;
    public static ArabicJoiningGroup E;
    public static ArabicJoiningGroup FarsiYeh;
    public static ArabicJoiningGroup Fe;
    public static ArabicJoiningGroup Feh;
    public static ArabicJoiningGroup FinalSemkath;
    public static ArabicJoiningGroup Gaf;
    public static ArabicJoiningGroup Gamal;
    public static ArabicJoiningGroup Hah;
    public static ArabicJoiningGroup HanifiRohingyaKinnaYa;
    public static ArabicJoiningGroup HanifiRohingyaPa;
    public static ArabicJoiningGroup He;
    public static ArabicJoiningGroup Heh;
    public static ArabicJoiningGroup HehGoal;
    public static ArabicJoiningGroup Heth;
    public static ArabicJoiningGroup Kaf;
    public static ArabicJoiningGroup Kaph;
    public static ArabicJoiningGroup Khaph;
    public static ArabicJoiningGroup KnottedHeh;
    public static ArabicJoiningGroup Lam;
    public static ArabicJoiningGroup Lamadh;
    public static ArabicJoiningGroup MalayalamBha;
    public static ArabicJoiningGroup MalayalamJa;
    public static ArabicJoiningGroup MalayalamLla;
    public static ArabicJoiningGroup MalayalamLlla;
    public static ArabicJoiningGroup MalayalamNga;
    public static ArabicJoiningGroup MalayalamNna;
    public static ArabicJoiningGroup MalayalamNnna;
    public static ArabicJoiningGroup MalayalamNya;
    public static ArabicJoiningGroup MalayalamRa;
    public static ArabicJoiningGroup MalayalamSsa;
    public static ArabicJoiningGroup MalayalamTta;
    public static ArabicJoiningGroup ManichaeanAleph;
    public static ArabicJoiningGroup ManichaeanAyin;
    public static ArabicJoiningGroup ManichaeanBeth;
    public static ArabicJoiningGroup ManichaeanDaleth;
    public static ArabicJoiningGroup ManichaeanDhamedh;
    public static ArabicJoiningGroup ManichaeanFive;
    public static ArabicJoiningGroup ManichaeanGimel;
    public static ArabicJoiningGroup ManichaeanHeth;
    public static ArabicJoiningGroup ManichaeanHundred;
    public static ArabicJoiningGroup ManichaeanKaph;
    public static ArabicJoiningGroup ManichaeanLamedh;
    public static ArabicJoiningGroup ManichaeanMem;
    public static ArabicJoiningGroup ManichaeanNun;
    public static ArabicJoiningGroup ManichaeanOne;
    public static ArabicJoiningGroup ManichaeanPe;
    public static ArabicJoiningGroup ManichaeanQoph;
    public static ArabicJoiningGroup ManichaeanResh;
    public static ArabicJoiningGroup ManichaeanSadhe;
    public static ArabicJoiningGroup ManichaeanSamekh;
    public static ArabicJoiningGroup ManichaeanTaw;
    public static ArabicJoiningGroup ManichaeanTen;
    public static ArabicJoiningGroup ManichaeanTeth;
    public static ArabicJoiningGroup ManichaeanThamedh;
    public static ArabicJoiningGroup ManichaeanTwenty;
    public static ArabicJoiningGroup ManichaeanWaw;
    public static ArabicJoiningGroup ManichaeanYodh;
    public static ArabicJoiningGroup ManichaeanZayin;
    public static ArabicJoiningGroup Meem;
    public static ArabicJoiningGroup Mim;
    public static ArabicJoiningGroup NoJoiningGroup;
    public static ArabicJoiningGroup Noon;
    public static ArabicJoiningGroup Nun;
    public static ArabicJoiningGroup Nya;
    public static ArabicJoiningGroup Pe;
    public static ArabicJoiningGroup Qaf;
    public static ArabicJoiningGroup Qaph;
    public static ArabicJoiningGroup Reh;
    public static ArabicJoiningGroup ReversedPe;
    public static ArabicJoiningGroup RohingyaYeh;
    public static ArabicJoiningGroup Sad;
    public static ArabicJoiningGroup Sadhe;
    public static ArabicJoiningGroup Seen;
    public static ArabicJoiningGroup Semkath;
    public static ArabicJoiningGroup Shin;
    public static ArabicJoiningGroup StraightWaw;
    public static ArabicJoiningGroup SwashKaf;
    public static ArabicJoiningGroup SyriacWaw;
    public static ArabicJoiningGroup Tah;
    public static ArabicJoiningGroup Taw;
    public static ArabicJoiningGroup TehMarbuta;
    public static ArabicJoiningGroup TehMarbutaGoal;
    public static ArabicJoiningGroup Teth;
    public static ArabicJoiningGroup ThinYeh;
    public static ArabicJoiningGroup VerticalTail;
    public static ArabicJoiningGroup Waw;
    public static ArabicJoiningGroup Yeh;
    public static ArabicJoiningGroup YehBarree;
    public static ArabicJoiningGroup YehWithTail;
    public static ArabicJoiningGroup Yudh;
    public static ArabicJoiningGroup YudhHe;
    public static ArabicJoiningGroup Zain;
    public static ArabicJoiningGroup Zhain;
}
public enum SixLabors.Fonts.Unicode.ArabicJoiningType : Enum {
    public int value__;
    public static ArabicJoiningType RightJoining;
    public static ArabicJoiningType LeftJoining;
    public static ArabicJoiningType DualJoining;
    public static ArabicJoiningType JoinCausing;
    public static ArabicJoiningType NonJoining;
    public static ArabicJoiningType Transparent;
}
internal class SixLabors.Fonts.Unicode.BidiAlgorithm : object {
    private ReadOnlyArraySlice`1<BidiCharacterType> originalTypes;
    private ReadOnlyArraySlice`1<BidiPairedBracketType> pairedBracketTypes;
    private ReadOnlyArraySlice`1<int> pairedBracketValues;
    private bool hasBrackets;
    private bool hasEmbeddings;
    private bool hasIsolates;
    [NullableAttribute("1")]
private BidiDictionary`2<int, int> isolatePairs;
    private ArraySlice`1<BidiCharacterType> workingTypes;
    private ArrayBuilder`1<BidiCharacterType> workingTypesBuffer;
    private ArrayBuilder`1<sbyte> resolvedLevelsBuffer;
    private sbyte paragraphEmbeddingLevel;
    [NullableAttribute("1")]
private Stack`1<Status> statusStack;
    private ArrayBuilder`1<int> x9Map;
    [NullableAttribute("1")]
private List`1<LevelRun> levelRuns;
    private ArrayBuilder`1<int> isolatedRunMapping;
    [NullableAttribute("1")]
private Stack`1<int> pendingIsolateOpenings;
    private int runLevel;
    private BidiCharacterType runDirection;
    private int runLength;
    private MappedArraySlice`1<BidiCharacterType> runResolvedTypes;
    private ReadonlyMappedArraySlice`1<BidiCharacterType> runOriginalTypes;
    private MappedArraySlice`1<sbyte> runLevels;
    private ReadonlyMappedArraySlice`1<BidiPairedBracketType> runBidiPairedBracketTypes;
    private ReadonlyMappedArraySlice`1<int> runPairedBracketValues;
    private static int MaxPairedBracketDepth;
    [NullableAttribute("1")]
private List`1<int> pendingOpeningBrackets;
    [NullableAttribute("1")]
private List`1<BracketPair> pairedBrackets;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static ThreadLocal`1<BidiAlgorithm> <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private ArraySlice`1<sbyte> <ResolvedLevels>k__BackingField;
    [NullableAttribute("1")]
public static ThreadLocal`1<BidiAlgorithm> Instance { get; }
    public ArraySlice`1<sbyte> ResolvedLevels { get; private set; }
    public int ResolvedParagraphEmbeddingLevel { get; }
    private static BidiAlgorithm();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static ThreadLocal`1<BidiAlgorithm> get_Instance();
    [CompilerGeneratedAttribute]
public ArraySlice`1<sbyte> get_ResolvedLevels();
    [CompilerGeneratedAttribute]
private void set_ResolvedLevels(ArraySlice`1<sbyte> value);
    public int get_ResolvedParagraphEmbeddingLevel();
    [NullableContextAttribute("1")]
public void Process(BidiData data);
    public void Process(ReadOnlyArraySlice`1<BidiCharacterType> types, ReadOnlyArraySlice`1<BidiPairedBracketType> pairedBracketTypes, ReadOnlyArraySlice`1<int> pairedBracketValues, sbyte paragraphEmbeddingLevel, Nullable`1<bool> hasBrackets, Nullable`1<bool> hasEmbeddings, Nullable`1<bool> hasIsolates, Nullable`1<ArraySlice`1<sbyte>> outLevels);
    public sbyte ResolveEmbeddingLevel(ReadOnlyArraySlice`1<BidiCharacterType> data);
    private void FindIsolatePairs();
    private void ResolveExplicitEmbeddingLevels();
    private void BuildX9RemovalMap();
    private int MapX9(int index);
    private void AddLevelRun(int start, int length, int level);
    private void FindLevelRuns();
    private int FindRunForIndex(int index);
    private void ProcessIsolatedRunSequences();
    private void ProcessIsolatedRunSequence(BidiCharacterType sos, BidiCharacterType eos, int runLevel);
    [NullableContextAttribute("1")]
private List`1<BracketPair> LocatePairedBrackets();
    private BidiCharacterType InspectPairedBracket(BracketPair& pb);
    private BidiCharacterType InspectBeforePairedBracket(BracketPair& pb, BidiCharacterType sos);
    private void SetPairedBracketDirection(BracketPair& pb, BidiCharacterType dir);
    private void ResetWhitespaceLevels();
    private void AssignLevelsToCodePointsRemovedByX9();
    private static bool IsWhitespace(BidiCharacterType biditype);
    private static BidiCharacterType DirectionFromLevel(int level);
    public static bool IsRemovedByX9(BidiCharacterType biditype);
    private static bool IsNeutralType(BidiCharacterType dir);
    private static BidiCharacterType GetStrongTypeN0(BidiCharacterType dir);
}
public enum SixLabors.Fonts.Unicode.BidiCharacterType : Enum {
    public int value__;
    public static BidiCharacterType LeftToRight;
    public static BidiCharacterType RightToLeft;
    public static BidiCharacterType ArabicLetter;
    public static BidiCharacterType EuropeanNumber;
    public static BidiCharacterType EuropeanSeparator;
    public static BidiCharacterType EuropeanTerminator;
    public static BidiCharacterType ArabicNumber;
    public static BidiCharacterType CommonSeparator;
    public static BidiCharacterType NonspacingMark;
    public static BidiCharacterType BoundaryNeutral;
    public static BidiCharacterType ParagraphSeparator;
    public static BidiCharacterType SegmentSeparator;
    public static BidiCharacterType Whitespace;
    public static BidiCharacterType OtherNeutral;
    public static BidiCharacterType LeftToRightEmbedding;
    public static BidiCharacterType LeftToRightOverride;
    public static BidiCharacterType RightToLeftEmbedding;
    public static BidiCharacterType RightToLeftOverride;
    public static BidiCharacterType PopDirectionalFormat;
    public static BidiCharacterType LeftToRightIsolate;
    public static BidiCharacterType RightToLeftIsolate;
    public static BidiCharacterType FirstStrongIsolate;
    public static BidiCharacterType PopDirectionalIsolate;
}
[IsReadOnlyAttribute]
public class SixLabors.Fonts.Unicode.BidiClass : ValueType {
    private UInt32 bidiValue;
    public BidiCharacterType CharacterType { get; }
    public BidiPairedBracketType PairedBracketType { get; }
    public BidiClass(CodePoint codePoint);
    public BidiCharacterType get_CharacterType();
    public BidiPairedBracketType get_PairedBracketType();
    public bool TryGetPairedBracket(CodePoint& codePoint);
}
internal class SixLabors.Fonts.Unicode.BidiData : object {
    private ArrayBuilder`1<BidiCharacterType> types;
    private ArrayBuilder`1<BidiPairedBracketType> pairedBracketTypes;
    private ArrayBuilder`1<int> pairedBracketValues;
    private ArrayBuilder`1<BidiCharacterType> savedTypes;
    private ArrayBuilder`1<BidiPairedBracketType> savedPairedBracketTypes;
    private ArrayBuilder`1<sbyte> tempLevelBuffer;
    [NullableAttribute("1")]
private List`1<int> paragraphPositions;
    [CompilerGeneratedAttribute]
private sbyte <ParagraphEmbeddingLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasBrackets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasEmbeddings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasIsolates>k__BackingField;
    [CompilerGeneratedAttribute]
private ArraySlice`1<BidiCharacterType> <Types>k__BackingField;
    [CompilerGeneratedAttribute]
private ArraySlice`1<BidiPairedBracketType> <PairedBracketTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private ArraySlice`1<int> <PairedBracketValues>k__BackingField;
    public sbyte ParagraphEmbeddingLevel { get; private set; }
    public bool HasBrackets { get; private set; }
    public bool HasEmbeddings { get; private set; }
    public bool HasIsolates { get; private set; }
    public int Length { get; }
    public ArraySlice`1<BidiCharacterType> Types { get; private set; }
    public ArraySlice`1<BidiPairedBracketType> PairedBracketTypes { get; private set; }
    public ArraySlice`1<int> PairedBracketValues { get; private set; }
    [CompilerGeneratedAttribute]
public sbyte get_ParagraphEmbeddingLevel();
    [CompilerGeneratedAttribute]
private void set_ParagraphEmbeddingLevel(sbyte value);
    [CompilerGeneratedAttribute]
public bool get_HasBrackets();
    [CompilerGeneratedAttribute]
private void set_HasBrackets(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasEmbeddings();
    [CompilerGeneratedAttribute]
private void set_HasEmbeddings(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasIsolates();
    [CompilerGeneratedAttribute]
private void set_HasIsolates(bool value);
    public int get_Length();
    [CompilerGeneratedAttribute]
public ArraySlice`1<BidiCharacterType> get_Types();
    [CompilerGeneratedAttribute]
private void set_Types(ArraySlice`1<BidiCharacterType> value);
    [CompilerGeneratedAttribute]
public ArraySlice`1<BidiPairedBracketType> get_PairedBracketTypes();
    [CompilerGeneratedAttribute]
private void set_PairedBracketTypes(ArraySlice`1<BidiPairedBracketType> value);
    [CompilerGeneratedAttribute]
public ArraySlice`1<int> get_PairedBracketValues();
    [CompilerGeneratedAttribute]
private void set_PairedBracketValues(ArraySlice`1<int> value);
    public void Init(ReadOnlySpan`1<char> text, sbyte paragraphEmbeddingLevel);
    public void SaveTypes();
    public void RestoreTypes();
    public ArraySlice`1<sbyte> GetTempLevelBuffer(int length);
}
internal class SixLabors.Fonts.Unicode.BidiDictionary`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<T1, T2> <Forward>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<T2, T1> <Reverse>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<T1, T2> Forward { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<T2, T1> Reverse { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<T1, T2> get_Forward();
    [CompilerGeneratedAttribute]
public Dictionary`2<T2, T1> get_Reverse();
    public void Clear();
    public void Add(T1 key, T2 value);
    public bool TryGetValue(T1 key, T2& value);
    public bool TryGetKey(T2 value, T1& key);
    public bool ContainsKey(T1 key);
    public bool ContainsValue(T2 value);
}
public enum SixLabors.Fonts.Unicode.BidiPairedBracketType : Enum {
    public int value__;
    public static BidiPairedBracketType None;
    public static BidiPairedBracketType Open;
    public static BidiPairedBracketType Close;
}
[IsReadOnlyAttribute]
internal class SixLabors.Fonts.Unicode.BidiRun : ValueType {
    [CompilerGeneratedAttribute]
private BidiCharacterType <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public BidiCharacterType Direction { get; }
    public int Level { get; }
    public int Start { get; }
    public int Length { get; }
    public int End { get; }
    public BidiRun(BidiCharacterType direction, int level, int start, int length);
    [CompilerGeneratedAttribute]
public BidiCharacterType get_Direction();
    [CompilerGeneratedAttribute]
public int get_Level();
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public int get_Length();
    public int get_End();
    public static bool op_Equality(BidiRun left, BidiRun right);
    public static bool op_Inequality(BidiRun left, BidiRun right);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [IteratorStateMachineAttribute("SixLabors.Fonts.Unicode.BidiRun/<CoalesceLevels>d__18")]
public static IEnumerable`1<BidiRun> CoalesceLevels(ReadOnlyArraySlice`1<sbyte> levels);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(BidiRun other);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class SixLabors.Fonts.Unicode.CodePoint : ValueType {
    private static int MaxUtf16CharsPerCodePoint;
    internal static int MaxUtf8BytesPerCodePoint;
    private static byte IsWhiteSpaceFlag;
    private static byte IsLetterOrDigitFlag;
    private static byte UnicodeCategoryMask;
    private UInt32 value;
    [CompilerGeneratedAttribute]
private static CodePoint <ReplacementChar>k__BackingField;
    private static ReadOnlySpan`1<byte> AsciiCharInfo { get; }
    public bool IsAscii { get; }
    public bool IsBmp { get; }
    public int Plane { get; }
    [NullableAttribute("1")]
private string DebuggerDisplay { get; }
    public int Value { get; }
    public int Utf16SequenceLength { get; }
    public int Utf8SequenceLength { get; }
    public static CodePoint ReplacementChar { get; }
    public CodePoint(char value);
    public CodePoint(char highSurrogate, char lowSurrogate);
    public CodePoint(int value);
    public CodePoint(UInt32 value);
    private CodePoint(UInt32 scalarValue, bool unused);
    private static CodePoint();
    private static ReadOnlySpan`1<byte> get_AsciiCharInfo();
    public bool get_IsAscii();
    public bool get_IsBmp();
    public int get_Plane();
    [NullableContextAttribute("1")]
private string get_DebuggerDisplay();
    public int get_Value();
    public int get_Utf16SequenceLength();
    public int get_Utf8SequenceLength();
    [CompilerGeneratedAttribute]
public static CodePoint get_ReplacementChar();
    public static CodePoint op_Explicit(char ch);
    public static CodePoint op_Explicit(UInt32 value);
    public static CodePoint op_Explicit(int value);
    public static bool op_Equality(CodePoint left, CodePoint right);
    public static bool op_Inequality(CodePoint left, CodePoint right);
    public static bool op_LessThan(CodePoint left, CodePoint right);
    public static bool op_LessThanOrEqual(CodePoint left, CodePoint right);
    public static bool op_GreaterThan(CodePoint left, CodePoint right);
    public static bool op_GreaterThanOrEqual(CodePoint left, CodePoint right);
    public static bool IsValid(int value);
    public static bool IsValid(UInt32 value);
    public static bool IsWhiteSpace(CodePoint codePoint);
    public static bool IsNonBreakingSpace(CodePoint codePoint);
    public static bool IsZeroWidthNonJoiner(CodePoint codePoint);
    public static bool IsZeroWidthJoiner(CodePoint codePoint);
    public static bool IsVariationSelector(CodePoint codePoint);
    public static bool IsControl(CodePoint codePoint);
    public static bool IsDigit(CodePoint codePoint);
    public static bool IsLetter(CodePoint codePoint);
    public static bool IsLetterOrDigit(CodePoint codePoint);
    public static bool IsLower(CodePoint codePoint);
    public static bool IsNumber(CodePoint codePoint);
    public static bool IsPunctuation(CodePoint codePoint);
    public static bool IsSeparator(CodePoint codePoint);
    public static bool IsSymbol(CodePoint codePoint);
    public static bool IsMark(CodePoint codePoint);
    public static bool IsUpper(CodePoint codePoint);
    public static bool IsTabulation(CodePoint codePoint);
    public static bool IsNewLine(CodePoint codePoint);
    public static int GetCodePointCount(ReadOnlySpan`1<char> source);
    internal static CodePoint GetCanonicalType(CodePoint codePoint);
    public static BidiClass GetBidiClass(CodePoint codePoint);
    public static bool TryGetBidiMirror(CodePoint codePoint, CodePoint& mirror);
    public static bool TryGetVerticalMirror(CodePoint codePoint, CodePoint& mirror);
    public static LineBreakClass GetLineBreakClass(CodePoint codePoint);
    public static GraphemeClusterClass GetGraphemeClusterClass(CodePoint codePoint);
    public static VerticalOrientationType GetVerticalOrientationType(CodePoint codePoint);
    internal static ArabicJoiningClass GetArabicJoiningClass(CodePoint codePoint);
    internal static ScriptClass GetScriptClass(CodePoint codePoint);
    internal static IndicSyllabicCategory GetIndicSyllabicCategory(CodePoint codePoint);
    internal static IndicPositionalCategory GetIndicPositionalCategory(CodePoint codePoint);
    public static UnicodeCategory GetGeneralCategory(CodePoint codePoint);
    [NullableContextAttribute("1")]
internal static CodePoint ReadAt(string text, int index, Int32& charsConsumed);
    internal static CodePoint DecodeFromUtf16At(ReadOnlySpan`1<char> source, int index);
    internal static CodePoint DecodeFromUtf16At(ReadOnlySpan`1<char> source, int index, Int32& charsConsumed);
    [NullableContextAttribute("2")]
private sealed virtual override int System.IComparable.CompareTo(object obj);
    public sealed virtual int CompareTo(CodePoint other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CodePoint other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
internal string ToDebuggerDisplay();
    private static bool IsCategoryLetter(UnicodeCategory category);
    private static bool IsCategoryLetterOrDecimalDigit(UnicodeCategory category);
    private static bool IsCategoryNumber(UnicodeCategory category);
    private static bool IsCategoryPunctuation(UnicodeCategory category);
    private static bool IsCategorySeparator(UnicodeCategory category);
    private static bool IsCategorySymbol(UnicodeCategory category);
    private static bool IsCategoryMark(UnicodeCategory category);
    [NullableContextAttribute("1")]
private static void ThrowArgumentOutOfRange(UInt32 value, string paramName, string message);
}
public enum SixLabors.Fonts.Unicode.GraphemeClusterClass : Enum {
    public int value__;
    public static GraphemeClusterClass Any;
    public static GraphemeClusterClass CarriageReturn;
    public static GraphemeClusterClass LineFeed;
    public static GraphemeClusterClass Control;
    public static GraphemeClusterClass Extend;
    public static GraphemeClusterClass RegionalIndicator;
    public static GraphemeClusterClass Prepend;
    public static GraphemeClusterClass SpacingMark;
    public static GraphemeClusterClass HangulLead;
    public static GraphemeClusterClass HangulVowel;
    public static GraphemeClusterClass HangulTail;
    public static GraphemeClusterClass HangulLeadVowel;
    public static GraphemeClusterClass HangulLeadVowelTail;
    public static GraphemeClusterClass ExtendedPictographic;
    public static GraphemeClusterClass ZeroWidthJoiner;
}
public enum SixLabors.Fonts.Unicode.IndicPositionalCategory : Enum {
    public int value__;
    public static IndicPositionalCategory Bottom;
    public static IndicPositionalCategory BottomAndLeft;
    public static IndicPositionalCategory BottomAndRight;
    public static IndicPositionalCategory Left;
    public static IndicPositionalCategory LeftAndRight;
    public static IndicPositionalCategory NA;
    public static IndicPositionalCategory Overstruck;
    public static IndicPositionalCategory Right;
    public static IndicPositionalCategory Top;
    public static IndicPositionalCategory TopAndBottom;
    public static IndicPositionalCategory TopAndBottomAndLeft;
    public static IndicPositionalCategory TopAndBottomAndRight;
    public static IndicPositionalCategory TopAndLeft;
    public static IndicPositionalCategory TopAndLeftAndRight;
    public static IndicPositionalCategory TopAndRight;
    public static IndicPositionalCategory VisualOrderLeft;
}
public enum SixLabors.Fonts.Unicode.IndicSyllabicCategory : Enum {
    public int value__;
    public static IndicSyllabicCategory Avagraha;
    public static IndicSyllabicCategory Bindu;
    public static IndicSyllabicCategory BrahmiJoiningNumber;
    public static IndicSyllabicCategory CantillationMark;
    public static IndicSyllabicCategory Consonant;
    public static IndicSyllabicCategory ConsonantDead;
    public static IndicSyllabicCategory ConsonantFinal;
    public static IndicSyllabicCategory ConsonantHeadLetter;
    public static IndicSyllabicCategory ConsonantInitialPostfixed;
    public static IndicSyllabicCategory ConsonantKiller;
    public static IndicSyllabicCategory ConsonantMedial;
    public static IndicSyllabicCategory ConsonantPlaceholder;
    public static IndicSyllabicCategory ConsonantPrecedingRepha;
    public static IndicSyllabicCategory ConsonantPrefixed;
    public static IndicSyllabicCategory ConsonantSubjoined;
    public static IndicSyllabicCategory ConsonantSucceedingRepha;
    public static IndicSyllabicCategory ConsonantWithStacker;
    public static IndicSyllabicCategory GeminationMark;
    public static IndicSyllabicCategory InvisibleStacker;
    public static IndicSyllabicCategory Joiner;
    public static IndicSyllabicCategory ModifyingLetter;
    public static IndicSyllabicCategory NonJoiner;
    public static IndicSyllabicCategory Nukta;
    public static IndicSyllabicCategory Number;
    public static IndicSyllabicCategory NumberJoiner;
    public static IndicSyllabicCategory Other;
    public static IndicSyllabicCategory PureKiller;
    public static IndicSyllabicCategory RegisterShifter;
    public static IndicSyllabicCategory SyllableModifier;
    public static IndicSyllabicCategory ToneLetter;
    public static IndicSyllabicCategory ToneMark;
    public static IndicSyllabicCategory Virama;
    public static IndicSyllabicCategory Visarga;
    public static IndicSyllabicCategory Vowel;
    public static IndicSyllabicCategory VowelDependent;
    public static IndicSyllabicCategory VowelIndependent;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{PositionMeasure}/{PositionWrap} @ {Required}")]
internal class SixLabors.Fonts.Unicode.LineBreak : ValueType {
    [CompilerGeneratedAttribute]
private int <PositionMeasure>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PositionWrap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    public int PositionMeasure { get; }
    public int PositionWrap { get; }
    public bool Required { get; }
    public LineBreak(int positionMeasure, int positionWrap, bool required);
    [CompilerGeneratedAttribute]
public int get_PositionMeasure();
    [CompilerGeneratedAttribute]
public int get_PositionWrap();
    [CompilerGeneratedAttribute]
public bool get_Required();
}
public enum SixLabors.Fonts.Unicode.LineBreakClass : Enum {
    public UInt32 value__;
    public static LineBreakClass OP;
    public static LineBreakClass CL;
    public static LineBreakClass CP;
    public static LineBreakClass QU;
    public static LineBreakClass GL;
    public static LineBreakClass NS;
    public static LineBreakClass EX;
    public static LineBreakClass SY;
    public static LineBreakClass IS;
    public static LineBreakClass PR;
    public static LineBreakClass PO;
    public static LineBreakClass NU;
    public static LineBreakClass AL;
    public static LineBreakClass HL;
    public static LineBreakClass ID;
    public static LineBreakClass IN;
    public static LineBreakClass HY;
    public static LineBreakClass BA;
    public static LineBreakClass BB;
    public static LineBreakClass B2;
    public static LineBreakClass ZW;
    public static LineBreakClass CM;
    public static LineBreakClass WJ;
    public static LineBreakClass H2;
    public static LineBreakClass H3;
    public static LineBreakClass JL;
    public static LineBreakClass JV;
    public static LineBreakClass JT;
    public static LineBreakClass RI;
    public static LineBreakClass EB;
    public static LineBreakClass EM;
    public static LineBreakClass ZWJ;
    public static LineBreakClass CB;
    public static LineBreakClass AI;
    public static LineBreakClass BK;
    public static LineBreakClass CJ;
    public static LineBreakClass CR;
    public static LineBreakClass LF;
    public static LineBreakClass NL;
    public static LineBreakClass SA;
    public static LineBreakClass SG;
    public static LineBreakClass SP;
    public static LineBreakClass XX;
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class SixLabors.Fonts.Unicode.LineBreakEnumerator : ValueType {
    private ReadOnlySpan`1<char> source;
    private int charPosition;
    private int pointsLength;
    private int position;
    private int lastPosition;
    private LineBreakClass currentClass;
    private LineBreakClass nextClass;
    private bool first;
    private int alphaNumericCount;
    private bool lb8a;
    private bool lb21a;
    private bool lb22ex;
    private bool lb24ex;
    private bool lb25ex;
    private bool lb30;
    private int lb30a;
    private bool lb31;
    [CompilerGeneratedAttribute]
private LineBreak <Current>k__BackingField;
    public LineBreak Current { get; private set; }
    public LineBreakEnumerator(ReadOnlySpan`1<char> source);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public LineBreak get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(LineBreak value);
    [IsReadOnlyAttribute]
public LineBreakEnumerator GetEnumerator();
    public bool MoveNext();
    private static LineBreakClass MapClass(CodePoint cp, LineBreakClass c);
    private static LineBreakClass MapFirst(LineBreakClass c);
    private static bool IsAlphaNumeric(LineBreakClass cls);
    [IsReadOnlyAttribute]
private LineBreakClass PeekNextCharClass();
    private LineBreakClass NextCharClass();
    private Nullable`1<bool> GetSimpleBreak();
    private bool GetPairTableBreak(LineBreakClass lastClass);
    [IsReadOnlyAttribute]
private int FindPriorNonWhitespace(int from);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.Fonts.Unicode.LineBreakPairTable : object {
    public static byte DIBRK;
    public static byte INBRK;
    public static byte CIBRK;
    public static byte CPBRK;
    public static byte PRBRK;
    [CompilerGeneratedAttribute]
private static Byte[][] <Table>k__BackingField;
    public static Byte[][] Table { get; }
    private static LineBreakPairTable();
    [CompilerGeneratedAttribute]
public static Byte[][] get_Table();
}
[ExtensionAttribute]
public static class SixLabors.Fonts.Unicode.MemoryExtensions : object {
    [ExtensionAttribute]
public static SpanCodePointEnumerator EnumerateCodePoints(ReadOnlySpan`1<char> span);
    [ExtensionAttribute]
public static SpanCodePointEnumerator EnumerateCodePoints(Span`1<char> span);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static int GetCodePointCount(string text);
    [ExtensionAttribute]
public static int GetCodePointCount(ReadOnlySpan`1<char> span);
    [ExtensionAttribute]
public static int GetCodePointCount(Span`1<char> span);
    [ExtensionAttribute]
public static SpanGraphemeEnumerator EnumerateGraphemes(ReadOnlySpan`1<char> span);
    [ExtensionAttribute]
public static SpanGraphemeEnumerator EnumerateGraphemes(Span`1<char> span);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static int GetGraphemeCount(string text);
    [ExtensionAttribute]
public static int GetGraphemeCount(ReadOnlySpan`1<char> span);
    [ExtensionAttribute]
public static int GetGraphemeCount(Span`1<char> span);
}
internal static class SixLabors.Fonts.Unicode.Resources.ArabicShapingTrie : object {
    public static ReadOnlySpan`1<byte> Data { get; }
    public static ReadOnlySpan`1<byte> get_Data();
}
internal static class SixLabors.Fonts.Unicode.Resources.BidiMirrorTrie : object {
    public static ReadOnlySpan`1<byte> Data { get; }
    public static ReadOnlySpan`1<byte> get_Data();
}
internal static class SixLabors.Fonts.Unicode.Resources.BidiTrie : object {
    public static ReadOnlySpan`1<byte> Data { get; }
    public static ReadOnlySpan`1<byte> get_Data();
}
internal static class SixLabors.Fonts.Unicode.Resources.GraphemeTrie : object {
    public static ReadOnlySpan`1<byte> Data { get; }
    public static ReadOnlySpan`1<byte> get_Data();
}
internal static class SixLabors.Fonts.Unicode.Resources.IndicPositionalCategoryTrie : object {
    public static ReadOnlySpan`1<byte> Data { get; }
    public static ReadOnlySpan`1<byte> get_Data();
}
internal static class SixLabors.Fonts.Unicode.Resources.IndicShapingData : object {
    public static Categories ConsonantFlags;
    public static Categories JoinerFlags;
    public static Categories HalantOrCoengFlags;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static Dictionary`2<ScriptClass, ShapingConfiguration> <IndicConfigurations>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static Dictionary`2<int, Int32[]> <Decompositions>k__BackingField;
    [NullableAttribute("1")]
public static Dictionary`2<ScriptClass, ShapingConfiguration> IndicConfigurations { get; }
    [NullableAttribute("1")]
public static Dictionary`2<int, Int32[]> Decompositions { get; }
    public static Int32[][] StateTable { get; }
    public static Boolean[] AcceptingStates { get; }
    public static String[][] Tags { get; }
    private static IndicShapingData();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static Dictionary`2<ScriptClass, ShapingConfiguration> get_IndicConfigurations();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static Dictionary`2<int, Int32[]> get_Decompositions();
    public static Int32[][] get_StateTable();
    public static Boolean[] get_AcceptingStates();
    public static String[][] get_Tags();
}
internal static class SixLabors.Fonts.Unicode.Resources.IndicShapingTrie : object {
    public static ReadOnlySpan`1<byte> Data { get; }
    public static ReadOnlySpan`1<byte> get_Data();
}
internal static class SixLabors.Fonts.Unicode.Resources.IndicSyllabicCategoryTrie : object {
    public static ReadOnlySpan`1<byte> Data { get; }
    public static ReadOnlySpan`1<byte> get_Data();
}
internal static class SixLabors.Fonts.Unicode.Resources.LineBreakTrie : object {
    public static ReadOnlySpan`1<byte> Data { get; }
    public static ReadOnlySpan`1<byte> get_Data();
}
internal static class SixLabors.Fonts.Unicode.Resources.ScriptTrie : object {
    public static ReadOnlySpan`1<byte> Data { get; }
    public static ReadOnlySpan`1<byte> get_Data();
}
internal static class SixLabors.Fonts.Unicode.Resources.UnicodeCategoryTrie : object {
    public static ReadOnlySpan`1<byte> Data { get; }
    public static ReadOnlySpan`1<byte> get_Data();
}
internal static class SixLabors.Fonts.Unicode.Resources.UniversalShapingData : object {
    public static String[] Categories { get; }
    public static Dictionary`2<int, Int32[]> Decompositions { get; }
    public static Int32[][] StateTable { get; }
    public static Boolean[] AcceptingStates { get; }
    public static String[][] Tags { get; }
    public static String[] get_Categories();
    public static Dictionary`2<int, Int32[]> get_Decompositions();
    public static Int32[][] get_StateTable();
    public static Boolean[] get_AcceptingStates();
    public static String[][] get_Tags();
}
internal static class SixLabors.Fonts.Unicode.Resources.UniversalShapingTrie : object {
    public static ReadOnlySpan`1<byte> Data { get; }
    public static ReadOnlySpan`1<byte> get_Data();
}
internal static class SixLabors.Fonts.Unicode.Resources.VerticalOrientationTrie : object {
    public static ReadOnlySpan`1<byte> Data { get; }
    public static ReadOnlySpan`1<byte> get_Data();
}
public enum SixLabors.Fonts.Unicode.ScriptClass : Enum {
    public int value__;
    public static ScriptClass Unknown;
    public static ScriptClass Common;
    public static ScriptClass Inherited;
    public static ScriptClass Adlam;
    public static ScriptClass CaucasianAlbanian;
    public static ScriptClass Ahom;
    public static ScriptClass Arabic;
    public static ScriptClass ImperialAramaic;
    public static ScriptClass Armenian;
    public static ScriptClass Avestan;
    public static ScriptClass Balinese;
    public static ScriptClass Bamum;
    public static ScriptClass BassaVah;
    public static ScriptClass Batak;
    public static ScriptClass Bengali;
    public static ScriptClass Bhaiksuki;
    public static ScriptClass Bopomofo;
    public static ScriptClass Brahmi;
    public static ScriptClass Braille;
    public static ScriptClass Buginese;
    public static ScriptClass Buhid;
    public static ScriptClass Chakma;
    public static ScriptClass CanadianAboriginal;
    public static ScriptClass Carian;
    public static ScriptClass Cham;
    public static ScriptClass Cherokee;
    public static ScriptClass Chorasmian;
    public static ScriptClass Coptic;
    public static ScriptClass CyproMinoan;
    public static ScriptClass Cypriot;
    public static ScriptClass Cyrillic;
    public static ScriptClass Devanagari;
    public static ScriptClass DivesAkuru;
    public static ScriptClass Dogra;
    public static ScriptClass Deseret;
    public static ScriptClass Duployan;
    public static ScriptClass EgyptianHieroglyphs;
    public static ScriptClass Elbasan;
    public static ScriptClass Elymaic;
    public static ScriptClass Ethiopic;
    public static ScriptClass Georgian;
    public static ScriptClass Glagolitic;
    public static ScriptClass GunjalaGondi;
    public static ScriptClass MasaramGondi;
    public static ScriptClass Gothic;
    public static ScriptClass Grantha;
    public static ScriptClass Greek;
    public static ScriptClass Gujarati;
    public static ScriptClass Gurmukhi;
    public static ScriptClass Hangul;
    public static ScriptClass Han;
    public static ScriptClass Hanunoo;
    public static ScriptClass Hatran;
    public static ScriptClass Hebrew;
    public static ScriptClass Hiragana;
    public static ScriptClass AnatolianHieroglyphs;
    public static ScriptClass PahawhHmong;
    public static ScriptClass NyiakengPuachueHmong;
    public static ScriptClass KatakanaOrHiragana;
    public static ScriptClass OldHungarian;
    public static ScriptClass OldItalic;
    public static ScriptClass Javanese;
    public static ScriptClass KayahLi;
    public static ScriptClass Katakana;
    public static ScriptClass Kharoshthi;
    public static ScriptClass Khmer;
    public static ScriptClass Khojki;
    public static ScriptClass KhitanSmallScript;
    public static ScriptClass Kannada;
    public static ScriptClass Kaithi;
    public static ScriptClass TaiTham;
    public static ScriptClass Lao;
    public static ScriptClass Latin;
    public static ScriptClass Lepcha;
    public static ScriptClass Limbu;
    public static ScriptClass LinearA;
    public static ScriptClass LinearB;
    public static ScriptClass Lisu;
    public static ScriptClass Lycian;
    public static ScriptClass Lydian;
    public static ScriptClass Mahajani;
    public static ScriptClass Makasar;
    public static ScriptClass Mandaic;
    public static ScriptClass Manichaean;
    public static ScriptClass Marchen;
    public static ScriptClass Medefaidrin;
    public static ScriptClass MendeKikakui;
    public static ScriptClass MeroiticCursive;
    public static ScriptClass MeroiticHieroglyphs;
    public static ScriptClass Malayalam;
    public static ScriptClass Modi;
    public static ScriptClass Mongolian;
    public static ScriptClass Mro;
    public static ScriptClass MeeteiMayek;
    public static ScriptClass Multani;
    public static ScriptClass Myanmar;
    public static ScriptClass Nandinagari;
    public static ScriptClass OldNorthArabian;
    public static ScriptClass Nabataean;
    public static ScriptClass Newa;
    public static ScriptClass Nko;
    public static ScriptClass Nushu;
    public static ScriptClass Ogham;
    public static ScriptClass OlChiki;
    public static ScriptClass OldTurkic;
    public static ScriptClass Oriya;
    public static ScriptClass Osage;
    public static ScriptClass Osmanya;
    public static ScriptClass OldUyghur;
    public static ScriptClass Palmyrene;
    public static ScriptClass PauCinHau;
    public static ScriptClass OldPermic;
    public static ScriptClass PhagsPa;
    public static ScriptClass InscriptionalPahlavi;
    public static ScriptClass PsalterPahlavi;
    public static ScriptClass Phoenician;
    public static ScriptClass Miao;
    public static ScriptClass InscriptionalParthian;
    public static ScriptClass Rejang;
    public static ScriptClass HanifiRohingya;
    public static ScriptClass Runic;
    public static ScriptClass Samaritan;
    public static ScriptClass OldSouthArabian;
    public static ScriptClass Saurashtra;
    public static ScriptClass SignWriting;
    public static ScriptClass Shavian;
    public static ScriptClass Sharada;
    public static ScriptClass Siddham;
    public static ScriptClass Khudawadi;
    public static ScriptClass Sinhala;
    public static ScriptClass Sogdian;
    public static ScriptClass OldSogdian;
    public static ScriptClass SoraSompeng;
    public static ScriptClass Soyombo;
    public static ScriptClass Sundanese;
    public static ScriptClass SylotiNagri;
    public static ScriptClass Syriac;
    public static ScriptClass Tagbanwa;
    public static ScriptClass Takri;
    public static ScriptClass TaiLe;
    public static ScriptClass NewTaiLue;
    public static ScriptClass Tamil;
    public static ScriptClass Tangut;
    public static ScriptClass TaiViet;
    public static ScriptClass Telugu;
    public static ScriptClass Tifinagh;
    public static ScriptClass Tagalog;
    public static ScriptClass Thaana;
    public static ScriptClass Thai;
    public static ScriptClass Tibetan;
    public static ScriptClass Tirhuta;
    public static ScriptClass Tangsa;
    public static ScriptClass Toto;
    public static ScriptClass Ugaritic;
    public static ScriptClass Vai;
    public static ScriptClass Vithkuqi;
    public static ScriptClass WarangCiti;
    public static ScriptClass Wancho;
    public static ScriptClass OldPersian;
    public static ScriptClass Cuneiform;
    public static ScriptClass Yezidi;
    public static ScriptClass Yi;
    public static ScriptClass ZanabazarSquare;
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
public class SixLabors.Fonts.Unicode.SpanCodePointEnumerator : ValueType {
    private ReadOnlySpan`1<char> source;
    [CompilerGeneratedAttribute]
private CodePoint <Current>k__BackingField;
    public CodePoint Current { get; private set; }
    public SpanCodePointEnumerator(ReadOnlySpan`1<char> source);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public CodePoint get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(CodePoint value);
    [IsReadOnlyAttribute]
public SpanCodePointEnumerator GetEnumerator();
    public bool MoveNext();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
public class SixLabors.Fonts.Unicode.SpanGraphemeEnumerator : ValueType {
    private ReadOnlySpan`1<char> source;
    [CompilerGeneratedAttribute]
private ReadOnlySpan`1<char> <Current>k__BackingField;
    public ReadOnlySpan`1<char> Current { get; private set; }
    public SpanGraphemeEnumerator(ReadOnlySpan`1<char> source);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ReadOnlySpan`1<char> get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(ReadOnlySpan`1<char> value);
    [IsReadOnlyAttribute]
public SpanGraphemeEnumerator GetEnumerator();
    public bool MoveNext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.Fonts.Unicode.UnicodeData : object {
    private static Lazy`1<UnicodeTrie> LazyBidiTrie;
    private static Lazy`1<UnicodeTrie> LazyBidiMirrorTrie;
    private static Lazy`1<UnicodeTrie> LazyGraphemeTrie;
    private static Lazy`1<UnicodeTrie> LazyLineBreakTrie;
    private static Lazy`1<UnicodeTrie> LazyScriptTrie;
    private static Lazy`1<UnicodeTrie> LazyCategoryTrie;
    private static Lazy`1<UnicodeTrie> LazyArabicShapingTrie;
    private static Lazy`1<UnicodeTrie> LazyIndicSyllabicCategoryTrie;
    private static Lazy`1<UnicodeTrie> LazyIndicPositionalCategoryTrie;
    private static Lazy`1<UnicodeTrie> LazyVerticalOrientationTrie;
    private static Lazy`1<UnicodeTrie> LazyUniversalShapingTrie;
    private static Lazy`1<UnicodeTrie> LazyIndicShapingTrie;
    private static UnicodeData();
    public static UInt32 GetBidiData(UInt32 codePoint);
    public static UInt32 GetBidiMirror(UInt32 codePoint);
    public static GraphemeClusterClass GetGraphemeClusterClass(UInt32 codePoint);
    public static LineBreakClass GetLineBreakClass(UInt32 codePoint);
    public static ScriptClass GetScriptClass(UInt32 codePoint);
    public static UInt32 GetJoiningClass(UInt32 codePoint);
    public static UnicodeCategory GetUnicodeCategory(UInt32 codePoint);
    public static IndicSyllabicCategory GetIndicSyllabicCategory(UInt32 codePoint);
    public static IndicPositionalCategory GetIndicPositionalCategory(UInt32 codePoint);
    public static VerticalOrientationType GetVerticalOrientation(UInt32 codePoint);
    public static int GetUniversalShapingSymbolCount(UInt32 codePoint);
    public static int GetIndicShapingProperties(UInt32 codePoint);
    private static UnicodeTrie GetBidiTrie();
    private static UnicodeTrie GetBidiMirrorTrie();
    private static UnicodeTrie GetGraphemeTrie();
    private static UnicodeTrie GetLineBreakTrie();
    private static UnicodeTrie GetScriptTrie();
    private static UnicodeTrie GetCategoryTrie();
    private static UnicodeTrie GetArabicShapingTrie();
    private static UnicodeTrie GetIndicSyllabicCategoryTrie();
    private static UnicodeTrie GetIndicPositionalCategoryTrie();
    private static UnicodeTrie GetVerticalOrientationTrie();
    private static UnicodeTrie GetUniversalShapingTrie();
    private static UnicodeTrie GetIndicShapingTrie();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Unicode.UnicodeTrie : object {
    private UInt32[] data;
    private int highStart;
    private UInt32 errorValue;
    [NullableContextAttribute("0")]
public UnicodeTrie(ReadOnlySpan`1<byte> rawData);
    public UnicodeTrie(Stream stream);
    public UnicodeTrie(UInt32[] data, int highStart, UInt32 errorValue);
    public UInt32 Get(UInt32 codePoint);
    public void Save(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.Unicode.UnicodeTrieBuilder : object {
    internal static int UTRIE2_SHIFT_1;
    internal static int UTRIE2_SHIFT_2;
    private static int UTRIE2_SHIFT_1_2;
    internal static int UTRIE2_OMITTED_BMP_INDEX_1_LENGTH;
    private static int UTRIE2_CP_PER_INDEX_1_ENTRY;
    private static int INITIAL_DATA_LENGTH;
    private static int UNEWTRIE2_MEDIUM_DATA_LENGTH;
    private static int INDEX_1_LENGTH;
    private static int UTRIE2_DATA_BLOCK_LENGTH;
    internal static int UTRIE2_DATA_MASK;
    internal static int UTRIE2_INDEX_SHIFT;
    internal static int UTRIE2_DATA_GRANULARITY;
    private static int UTRIE2_INDEX_2_OFFSET;
    internal static int UTRIE2_LSCP_INDEX_2_OFFSET;
    private static int UTRIE2_LSCP_INDEX_2_LENGTH;
    private static int UTRIE2_INDEX_2_BMP_LENGTH;
    private static int UTRIE2_UTF8_2B_INDEX_2_OFFSET;
    private static int UTRIE2_UTF8_2B_INDEX_2_LENGTH;
    internal static int UTRIE2_INDEX_1_OFFSET;
    private static int UTRIE2_MAX_INDEX_1_LENGTH;
    private static int UNEWTRIE2_MAX_INDEX_2_LENGTH;
    private static int UNEWTRIE2_INDEX_1_LENGTH;
    private static int UTRIE2_INDEX_2_BLOCK_LENGTH;
    internal static int UTRIE2_INDEX_2_MASK;
    private static int UNEWTRIE2_INDEX_GAP_OFFSET;
    private static int UNEWTRIE2_INDEX_GAP_LENGTH;
    private static int UNEWTRIE2_MAX_DATA_LENGTH;
    private static int UTRIE2_BAD_UTF8_DATA_OFFSET;
    private static int UTRIE2_DATA_START_OFFSET;
    private static int UNEWTRIE2_DATA_NULL_OFFSET;
    private static int UNEWTRIE2_INDEX_2_NULL_OFFSET;
    private static int UNEWTRIE2_INDEX_2_START_OFFSET;
    private static int UNEWTRIE2_DATA_START_OFFSET;
    private static int UNEWTRIE2_DATA_0800_OFFSET;
    private static int UTRIE2_MAX_INDEX_LENGTH;
    private static int UTRIE2_MAX_DATA_LENGTH;
    private UInt32 initialValue;
    private UInt32 errorValue;
    private int highStart;
    private UInt32[] data;
    private int dataCapacity;
    private Int32[] index1;
    private Int32[] index2;
    private int firstFreeBlock;
    private bool isCompacted;
    private Int32[] map;
    private int dataNullOffset;
    private int dataLength;
    private int index2NullOffset;
    private int index2Length;
    public UnicodeTrieBuilder(UInt32 initialValue, UInt32 errorValue);
    public UInt32 Get(int c);
    public void Set(int codePoint, UInt32 value);
    public void SetRange(int start, int end, UInt32 value, bool overwrite);
    public UnicodeTrie Freeze();
    private UInt32 Get(int c, bool fromLSCP);
    private int GetDataBlock(int c, bool forLSCP);
    private int GetIndex2Block(int c, bool forLSCP);
    private static bool U_IS_LEAD(int c);
    private bool IsWritableBlock(int block);
    private bool IsInNullBlock(int c, bool forLSCP);
    private void SetIndex2Entry(int i2, int block);
    private void ReleaseDataBlock(int block);
    private int AllocDataBlock(int copyBlock);
    private int AllocIndex2Block();
    private int FindSameIndex2Block(int index2Length, int otherBlock);
    private int FindSameDataBlock(int dataLength, int otherBlock, int blockLength);
    private int FindHighStart(UInt32 highValue);
    private void FillBlock(int block, int start, int limit, UInt32 value, UInt32 initialValue, bool overwrite);
    private void WriteBlock(int block, UInt32 value);
    private void CompactTrie();
    private void CompactData();
    private void CompactIndex2();
    private static bool Equal(UInt32[] a, int s, int t, int length);
    private static bool Equal(Int32[] a, int s, int t, int length);
}
internal static class SixLabors.Fonts.Unicode.UnicodeUtility : object {
    public static bool IsAsciiCodePoint(UInt32 value);
    public static bool IsBmpCodePoint(UInt32 value);
    public static UInt32 GetVerticalMirror(UInt32 value);
    public static bool IsCJKCodePoint(UInt32 value);
    public static bool IsDefaultIgnorableCodePoint(UInt32 value);
    public static bool ShouldRenderWhiteSpaceOnly(CodePoint codePoint);
    public static int GetPlane(UInt32 codePoint);
    public static int GetUtf16SequenceLength(UInt32 codePoint);
    public static int GetUtf8SequenceLength(UInt32 codePoint);
    public static bool IsValidCodePoint(UInt32 codePoint);
    public static bool IsHighSurrogateCodePoint(UInt32 value);
    public static bool IsLowSurrogateCodePoint(UInt32 value);
    public static bool IsSurrogateCodePoint(UInt32 value);
    public static bool IsInRangeInclusive(UInt32 value, UInt32 lowerBound, UInt32 upperBound);
    public static UInt32 GetScalarFromUtf16SurrogatePair(UInt32 highSurrogateCodePoint, UInt32 lowSurrogateCodePoint);
    public static void GetUtf16SurrogatesFromSupplementaryPlaneCodePoint(UInt32 value, Char& highSurrogateCodePoint, Char& lowSurrogateCodePoint);
    [ConditionalAttribute("DEBUG")]
internal static void DebugAssertIsHighSurrogateCodePoint(UInt32 codePoint);
    [ConditionalAttribute("DEBUG")]
internal static void DebugAssertIsLowSurrogateCodePoint(UInt32 codePoint);
    [ConditionalAttribute("DEBUG")]
internal static void DebugAssertIsValidCodePoint(UInt32 codePoint);
    [ConditionalAttribute("DEBUG")]
internal static void DebugAssertIsValidSupplementaryPlaneCodePoint(UInt32 codePoint);
    [NullableContextAttribute("1")]
internal static string ToHexString(UInt32 codePoint);
}
public enum SixLabors.Fonts.Unicode.VerticalOrientationType : Enum {
    public int value__;
    public static VerticalOrientationType Upright;
    public static VerticalOrientationType Rotate;
    public static VerticalOrientationType TransformUpright;
    public static VerticalOrientationType TransformRotate;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.Fonts.UniversalShapingEngineInfo : object {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SyllableType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Syllable>k__BackingField;
    public string Category { get; public set; }
    public string SyllableType { get; }
    public int Syllable { get; }
    public UniversalShapingEngineInfo(string category, string syllableType, int syllable);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_SyllableType();
    [CompilerGeneratedAttribute]
public int get_Syllable();
}
[ExtensionAttribute]
internal static class SixLabors.Fonts.Utilities.EncodingIDExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Encoding AsEncoding(EncodingIDs id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Offset: {Offset}, Length: {Length}, Value: {Value}")]
internal class SixLabors.Fonts.Utilities.StringLoader : object {
    [CompilerGeneratedAttribute]
private ushort <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public ushort Length { get; }
    public ushort Offset { get; }
    public string Value { get; private set; }
    public Encoding Encoding { get; }
    public StringLoader(ushort length, ushort offset, Encoding encoding);
    [CompilerGeneratedAttribute]
public ushort get_Length();
    [CompilerGeneratedAttribute]
public ushort get_Offset();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    public static StringLoader Create(BigEndianBinaryReader reader);
    public static StringLoader Create(BigEndianBinaryReader reader, Encoding encoding);
    public void LoadValue(BigEndianBinaryReader reader);
}
public enum SixLabors.Fonts.VerticalAlignment : Enum {
    public int value__;
    public static VerticalAlignment Top;
    public static VerticalAlignment Center;
    public static VerticalAlignment Bottom;
}
public class SixLabors.Fonts.VerticalMetrics : object {
    [CompilerGeneratedAttribute]
private short <Ascender>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Descender>k__BackingField;
    [CompilerGeneratedAttribute]
private short <LineGap>k__BackingField;
    [CompilerGeneratedAttribute]
private short <LineHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private short <AdvanceWidthMax>k__BackingField;
    [CompilerGeneratedAttribute]
private short <AdvanceHeightMax>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Synthesized>k__BackingField;
    public short Ascender { get; internal set; }
    public short Descender { get; internal set; }
    public short LineGap { get; internal set; }
    public short LineHeight { get; internal set; }
    public short AdvanceWidthMax { get; internal set; }
    public short AdvanceHeightMax { get; internal set; }
    internal bool Synthesized { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual short get_Ascender();
    [CompilerGeneratedAttribute]
internal void set_Ascender(short value);
    [CompilerGeneratedAttribute]
public sealed virtual short get_Descender();
    [CompilerGeneratedAttribute]
internal void set_Descender(short value);
    [CompilerGeneratedAttribute]
public sealed virtual short get_LineGap();
    [CompilerGeneratedAttribute]
internal void set_LineGap(short value);
    [CompilerGeneratedAttribute]
public sealed virtual short get_LineHeight();
    [CompilerGeneratedAttribute]
internal void set_LineHeight(short value);
    [CompilerGeneratedAttribute]
public sealed virtual short get_AdvanceWidthMax();
    [CompilerGeneratedAttribute]
internal void set_AdvanceWidthMax(short value);
    [CompilerGeneratedAttribute]
public sealed virtual short get_AdvanceHeightMax();
    [CompilerGeneratedAttribute]
internal void set_AdvanceHeightMax(short value);
    [CompilerGeneratedAttribute]
internal bool get_Synthesized();
    [CompilerGeneratedAttribute]
internal void set_Synthesized(bool value);
}
internal enum SixLabors.Fonts.WellKnownIds.EncodingIDs : Enum {
    public ushort value__;
    public static EncodingIDs Unicode1;
    public static EncodingIDs Unicode11;
    public static EncodingIDs ISO10646;
    public static EncodingIDs Unicode2;
    public static EncodingIDs Unicode2Plus;
    public static EncodingIDs UnicodeVariationSequences;
    public static EncodingIDs UnicodeFull;
}
public enum SixLabors.Fonts.WellKnownIds.KnownNameIds : Enum {
    public ushort value__;
    public static KnownNameIds CopyrightNotice;
    public static KnownNameIds FontFamilyName;
    public static KnownNameIds FontSubfamilyName;
    public static KnownNameIds UniqueFontID;
    public static KnownNameIds FullFontName;
    public static KnownNameIds Version;
    public static KnownNameIds PostscriptName;
    public static KnownNameIds Trademark;
    public static KnownNameIds Manufacturer;
    public static KnownNameIds Designer;
    public static KnownNameIds Description;
    public static KnownNameIds VendorUrl;
    public static KnownNameIds DesignerUrl;
    public static KnownNameIds LicenseDescription;
    public static KnownNameIds LicenseInfoUrl;
    public static KnownNameIds TypographicFamilyName;
    public static KnownNameIds TypographicSubfamilyName;
    public static KnownNameIds SampleText;
}
internal enum SixLabors.Fonts.WellKnownIds.PlatformIDs : Enum {
    public ushort value__;
    public static PlatformIDs Unicode;
    public static PlatformIDs Macintosh;
    public static PlatformIDs ISO;
    public static PlatformIDs Windows;
    public static PlatformIDs Custom;
}
public enum SixLabors.Fonts.WordBreaking : Enum {
    public int value__;
    public static WordBreaking Standard;
    public static WordBreaking BreakAll;
    public static WordBreaking KeepAll;
    public static WordBreaking BreakWord;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerStepThroughAttribute]
internal static class SixLabors.Guard : object {
    [NullableContextAttribute("2")]
public static void NotNull(TValue value, string parameterName);
    public static void NotNullOrWhiteSpace(string value, string parameterName);
    public static void MustBeLessThan(TValue value, TValue max, string parameterName);
    public static void MustBeLessThanOrEqualTo(TValue value, TValue max, string parameterName);
    public static void MustBeGreaterThan(TValue value, TValue min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(TValue value, TValue min, string parameterName);
    public static void MustBeBetweenOrEqualTo(TValue value, TValue min, TValue max, string parameterName);
    public static void IsTrue(bool target, string parameterName, string message);
    public static void IsFalse(bool target, string parameterName, string message);
    public static void MustBeSizedAtLeast(ReadOnlySpan`1<T> source, int minLength, string parameterName);
    public static void MustBeSizedAtLeast(Span`1<T> source, int minLength, string parameterName);
    [NullableContextAttribute("2")]
public static void DestinationShouldNotBeTooShort(ReadOnlySpan`1<TSource> source, Span`1<TDest> destination, string destinationParamName);
    [NullableContextAttribute("2")]
public static void DestinationShouldNotBeTooShort(Span`1<TSource> source, Span`1<TDest> destination, string destinationParamName);
    public static void MustBeLessThan(byte value, byte max, string parameterName);
    public static void MustBeLessThanOrEqualTo(byte value, byte max, string parameterName);
    public static void MustBeGreaterThan(byte value, byte min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(byte value, byte min, string parameterName);
    public static void MustBeBetweenOrEqualTo(byte value, byte min, byte max, string parameterName);
    public static void MustBeLessThan(sbyte value, sbyte max, string parameterName);
    public static void MustBeLessThanOrEqualTo(sbyte value, sbyte max, string parameterName);
    public static void MustBeGreaterThan(sbyte value, sbyte min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(sbyte value, sbyte min, string parameterName);
    public static void MustBeBetweenOrEqualTo(sbyte value, sbyte min, sbyte max, string parameterName);
    public static void MustBeLessThan(short value, short max, string parameterName);
    public static void MustBeLessThanOrEqualTo(short value, short max, string parameterName);
    public static void MustBeGreaterThan(short value, short min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(short value, short min, string parameterName);
    public static void MustBeBetweenOrEqualTo(short value, short min, short max, string parameterName);
    public static void MustBeLessThan(ushort value, ushort max, string parameterName);
    public static void MustBeLessThanOrEqualTo(ushort value, ushort max, string parameterName);
    public static void MustBeGreaterThan(ushort value, ushort min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(ushort value, ushort min, string parameterName);
    public static void MustBeBetweenOrEqualTo(ushort value, ushort min, ushort max, string parameterName);
    public static void MustBeLessThan(char value, char max, string parameterName);
    public static void MustBeLessThanOrEqualTo(char value, char max, string parameterName);
    public static void MustBeGreaterThan(char value, char min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(char value, char min, string parameterName);
    public static void MustBeBetweenOrEqualTo(char value, char min, char max, string parameterName);
    public static void MustBeLessThan(int value, int max, string parameterName);
    public static void MustBeLessThanOrEqualTo(int value, int max, string parameterName);
    public static void MustBeGreaterThan(int value, int min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(int value, int min, string parameterName);
    public static void MustBeBetweenOrEqualTo(int value, int min, int max, string parameterName);
    public static void MustBeLessThan(UInt32 value, UInt32 max, string parameterName);
    public static void MustBeLessThanOrEqualTo(UInt32 value, UInt32 max, string parameterName);
    public static void MustBeGreaterThan(UInt32 value, UInt32 min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(UInt32 value, UInt32 min, string parameterName);
    public static void MustBeBetweenOrEqualTo(UInt32 value, UInt32 min, UInt32 max, string parameterName);
    public static void MustBeLessThan(float value, float max, string parameterName);
    public static void MustBeLessThanOrEqualTo(float value, float max, string parameterName);
    public static void MustBeGreaterThan(float value, float min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(float value, float min, string parameterName);
    public static void MustBeBetweenOrEqualTo(float value, float min, float max, string parameterName);
    public static void MustBeLessThan(long value, long max, string parameterName);
    public static void MustBeLessThanOrEqualTo(long value, long max, string parameterName);
    public static void MustBeGreaterThan(long value, long min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(long value, long min, string parameterName);
    public static void MustBeBetweenOrEqualTo(long value, long min, long max, string parameterName);
    public static void MustBeLessThan(ulong value, ulong max, string parameterName);
    public static void MustBeLessThanOrEqualTo(ulong value, ulong max, string parameterName);
    public static void MustBeGreaterThan(ulong value, ulong min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(ulong value, ulong min, string parameterName);
    public static void MustBeBetweenOrEqualTo(ulong value, ulong min, ulong max, string parameterName);
    public static void MustBeLessThan(double value, double max, string parameterName);
    public static void MustBeLessThanOrEqualTo(double value, double max, string parameterName);
    public static void MustBeGreaterThan(double value, double min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(double value, double min, string parameterName);
    public static void MustBeBetweenOrEqualTo(double value, double min, double max, string parameterName);
    public static void MustBeLessThan(decimal value, decimal max, string parameterName);
    public static void MustBeLessThanOrEqualTo(decimal value, decimal max, string parameterName);
    public static void MustBeGreaterThan(decimal value, decimal min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(decimal value, decimal min, string parameterName);
    public static void MustBeBetweenOrEqualTo(decimal value, decimal min, decimal max, string parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.ThrowHelper : object {
    [DoesNotReturnAttribute]
public static void ThrowArgumentExceptionForNotNullOrWhitespace(string value, string name);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeExceptionForMustBeLessThan(T value, T max, string name);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeExceptionForMustBeLessThanOrEqualTo(T value, T maximum, string name);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeExceptionForMustBeGreaterThan(T value, T minimum, string name);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeExceptionForMustBeGreaterThanOrEqualTo(T value, T minimum, string name);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeExceptionForMustBeBetweenOrEqualTo(T value, T minimum, T maximum, string name);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeExceptionForMustBeSizedAtLeast(int minLength, string parameterName);
    [DoesNotReturnAttribute]
public static void ThrowArgumentException(string message, string name);
    [DoesNotReturnAttribute]
public static void ThrowArgumentNullException(string name, string message);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeException(string name, string message);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UnicodeTrieGenerator.StateAutomation.Alternation : Node {
    public ILogicalNode A { get; }
    public ILogicalNode B { get; }
    public bool Nullable { get; }
    public HashSet`1<INode> FirstPos { get; }
    public HashSet`1<INode> LastPos { get; }
    public Alternation(ILogicalNode a, ILogicalNode b);
    public ILogicalNode get_A();
    public ILogicalNode get_B();
    public virtual bool get_Nullable();
    public sealed virtual HashSet`1<INode> get_FirstPos();
    public sealed virtual HashSet`1<INode> get_LastPos();
    public virtual INode Copy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UnicodeTrieGenerator.StateAutomation.Assignment : Node {
    public Variable Variable { get; }
    public ILogicalNode Expression { get; }
    public Assignment(Variable variable, ILogicalNode expression);
    public Variable get_Variable();
    public ILogicalNode get_Expression();
    public virtual INode Copy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UnicodeTrieGenerator.StateAutomation.Comment : Node {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public Comment(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    public virtual INode Copy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UnicodeTrieGenerator.StateAutomation.Concatenation : Node {
    public ILogicalNode A { get; }
    public ILogicalNode B { get; }
    public bool Nullable { get; }
    public HashSet`1<INode> FirstPos { get; }
    public HashSet`1<INode> LastPos { get; }
    public Concatenation(ILogicalNode a, ILogicalNode b);
    public ILogicalNode get_A();
    public ILogicalNode get_B();
    public virtual bool get_Nullable();
    public sealed virtual HashSet`1<INode> get_FirstPos();
    public sealed virtual HashSet`1<INode> get_LastPos();
    public virtual void CalcFollowPos();
    public virtual INode Copy();
}
internal class UnicodeTrieGenerator.StateAutomation.EndMarker : Leaf {
    [NullableContextAttribute("1")]
public virtual INode Copy();
}
[NullableContextAttribute("1")]
internal interface UnicodeTrieGenerator.StateAutomation.ILogicalNode {
    public HashSet`1<INode> FirstPos { get; }
    public HashSet`1<INode> LastPos { get; }
    public abstract virtual HashSet`1<INode> get_FirstPos();
    public abstract virtual HashSet`1<INode> get_LastPos();
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
internal interface UnicodeTrieGenerator.StateAutomation.INode {
    public HashSet`1<INode> FollowPos { get; }
    public bool Nullable { get; }
    public int Count { get; }
    public INode Item { get; public set; }
    public abstract virtual HashSet`1<INode> get_FollowPos();
    public abstract virtual bool get_Nullable();
    public abstract virtual int get_Count();
    public abstract virtual INode get_Item(int index);
    public abstract virtual void set_Item(int index, INode value);
    public abstract virtual void CalcFollowPos();
    public abstract virtual INode Copy();
}
internal abstract class UnicodeTrieGenerator.StateAutomation.Leaf : Node {
    [NullableAttribute("1")]
public HashSet`1<INode> FirstPos { get; }
    [NullableAttribute("1")]
public HashSet`1<INode> LastPos { get; }
    [NullableContextAttribute("1")]
public sealed virtual HashSet`1<INode> get_FirstPos();
    [NullableContextAttribute("1")]
public sealed virtual HashSet`1<INode> get_LastPos();
}
internal class UnicodeTrieGenerator.StateAutomation.Literal : Leaf {
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    public int Value { get; }
    public Literal(int value);
    [CompilerGeneratedAttribute]
public int get_Value();
    [NullableContextAttribute("1")]
public virtual INode Copy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal abstract class UnicodeTrieGenerator.StateAutomation.Node : object {
    [CompilerGeneratedAttribute]
private List`1<INode> <Enumerator>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<INode> <FollowPos>k__BackingField;
    protected List`1<INode> Enumerator { get; }
    public HashSet`1<INode> FollowPos { get; }
    public bool Nullable { get; }
    public int Count { get; }
    public INode Item { get; public set; }
    [CompilerGeneratedAttribute]
protected List`1<INode> get_Enumerator();
    [CompilerGeneratedAttribute]
public sealed virtual HashSet`1<INode> get_FollowPos();
    public virtual bool get_Nullable();
    public sealed virtual int get_Count();
    public sealed virtual INode get_Item(int index);
    public sealed virtual void set_Item(int index, INode value);
    public virtual void CalcFollowPos();
    public abstract virtual INode Copy();
    public sealed virtual IEnumerator`1<INode> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class UnicodeTrieGenerator.StateAutomation.NodeUtilities : object {
    public static ILogicalNode BuildRepetition(ILogicalNode expression, int min, double max);
    public static ILogicalNode Concat(ILogicalNode a, ILogicalNode b);
    public static HashSet`1<INode> Union(HashSet`1<INode> a, HashSet`1<INode> b);
    public static void AddAll(HashSet`1<INode> a, HashSet`1<INode> b);
    public static bool Equal(ICollection`1<INode> a, ICollection`1<INode> b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UnicodeTrieGenerator.StateAutomation.Repeat : Node {
    [CompilerGeneratedAttribute]
private string <Op>k__BackingField;
    public ILogicalNode Expression { get; }
    public string Op { get; }
    public bool Nullable { get; }
    public HashSet`1<INode> FirstPos { get; }
    public HashSet`1<INode> LastPos { get; }
    public Repeat(ILogicalNode expression, string op);
    public ILogicalNode get_Expression();
    [CompilerGeneratedAttribute]
public string get_Op();
    public virtual bool get_Nullable();
    public sealed virtual HashSet`1<INode> get_FirstPos();
    public sealed virtual HashSet`1<INode> get_LastPos();
    public virtual void CalcFollowPos();
    public virtual INode Copy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UnicodeTrieGenerator.StateAutomation.StateMachine : object {
    private static int InitialState;
    private static int FailState;
    [CompilerGeneratedAttribute]
private Int32[][] <StateTable>k__BackingField;
    [CompilerGeneratedAttribute]
private Boolean[] <Accepting>k__BackingField;
    [CompilerGeneratedAttribute]
private String[][] <Tags>k__BackingField;
    public Int32[][] StateTable { get; }
    public Boolean[] Accepting { get; }
    public String[][] Tags { get; }
    public StateMachine(Int32[][] stateTable, Boolean[] accepting, String[][] tags);
    [CompilerGeneratedAttribute]
public Int32[][] get_StateTable();
    [CompilerGeneratedAttribute]
public Boolean[] get_Accepting();
    [CompilerGeneratedAttribute]
public String[][] get_Tags();
    [NullableContextAttribute("0")]
public IEnumerable`1<StateMatch> Match(ReadOnlySpan`1<int> input);
    public void Apply(Int32[] input, Dictionary`2<string, Action`3<int, int, ArraySlice`1<int>>> actions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UnicodeTrieGenerator.StateAutomation.StateMatch : object {
    [CompilerGeneratedAttribute]
private int <StartIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Tags>k__BackingField;
    public int StartIndex { get; public set; }
    public int EndIndex { get; public set; }
    public IList`1<string> Tags { get; public set; }
    [CompilerGeneratedAttribute]
public int get_StartIndex();
    [CompilerGeneratedAttribute]
public void set_StartIndex(int value);
    [CompilerGeneratedAttribute]
public int get_EndIndex();
    [CompilerGeneratedAttribute]
public void set_EndIndex(int value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(IList`1<string> value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(StateMatch other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UnicodeTrieGenerator.StateAutomation.SymbolTable : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ILogicalNode> <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <Symbols>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    public Dictionary`2<string, ILogicalNode> Variables { get; public set; }
    public Dictionary`2<string, int> Symbols { get; public set; }
    public int Size { get; public set; }
    public SymbolTable(IList`1<INode> statements, Dictionary`2<string, int> externalSymbols);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ILogicalNode> get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(Dictionary`2<string, ILogicalNode> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_Symbols();
    [CompilerGeneratedAttribute]
public void set_Symbols(Dictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(int value);
    public ILogicalNode Main();
    private void AddExternalSymbols(Dictionary`2<string, int> externalSymbols);
    private void Process(IList`1<INode> statements);
    private INode ProcessExpression(INode expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UnicodeTrieGenerator.StateAutomation.Tag : Leaf {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public bool Nullable { get; }
    public Tag(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual bool get_Nullable();
    public virtual INode Copy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class UnicodeTrieGenerator.StateAutomation.Variable : Node {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<INode> <UnicodeTrieGenerator.StateAutomation.ILogicalNode.FirstPos>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<INode> <UnicodeTrieGenerator.StateAutomation.ILogicalNode.LastPos>k__BackingField;
    public string Name { get; }
    private HashSet`1<INode> UnicodeTrieGenerator.StateAutomation.ILogicalNode.FirstPos { get; }
    private HashSet`1<INode> UnicodeTrieGenerator.StateAutomation.ILogicalNode.LastPos { get; }
    public Variable(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private sealed virtual override HashSet`1<INode> UnicodeTrieGenerator.StateAutomation.ILogicalNode.get_FirstPos();
    [CompilerGeneratedAttribute]
private sealed virtual override HashSet`1<INode> UnicodeTrieGenerator.StateAutomation.ILogicalNode.get_LastPos();
    public virtual INode Copy();
}
