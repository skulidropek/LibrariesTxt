[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerStepThroughAttribute]
internal static class SixLabors.DebugGuard : object {
    [NullableContextAttribute("2")]
[ConditionalAttribute("DEBUG")]
public static void NotNull(TValue value, string parameterName);
    [NullableContextAttribute("2")]
[ConditionalAttribute("DEBUG")]
public static void NotNullOrWhiteSpace(string value, string paramName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeLessThan(TValue value, TValue max, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeLessThanOrEqualTo(TValue value, TValue max, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeGreaterThan(TValue value, TValue min, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeGreaterThanOrEqualTo(TValue value, TValue min, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeBetweenOrEqualTo(TValue value, TValue min, TValue max, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void IsTrue(bool target, string parameterName, string message);
    [ConditionalAttribute("DEBUG")]
public static void IsFalse(bool target, string parameterName, string message);
    [ConditionalAttribute("DEBUG")]
public static void MustBeSizedAtLeast(ReadOnlySpan`1<T> source, int minLength, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeSizedAtLeast(Span`1<T> source, int minLength, string parameterName);
    [NullableContextAttribute("2")]
[ConditionalAttribute("DEBUG")]
public static void DestinationShouldNotBeTooShort(ReadOnlySpan`1<TSource> source, Span`1<TDest> destination, string destinationParamName);
    [NullableContextAttribute("2")]
[ConditionalAttribute("DEBUG")]
public static void DestinationShouldNotBeTooShort(Span`1<TSource> source, Span`1<TDest> destination, string destinationParamName);
    private static void ThrowArgumentException(string message, string parameterName);
    private static void ThrowArgumentOutOfRangeException(string parameterName, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerStepThroughAttribute]
internal static class SixLabors.Guard : object {
    [NullableContextAttribute("2")]
public static void NotNull(TValue value, string parameterName);
    public static void NotNullOrWhiteSpace(string value, string parameterName);
    public static void MustBeLessThan(TValue value, TValue max, string parameterName);
    public static void MustBeLessThanOrEqualTo(TValue value, TValue max, string parameterName);
    public static void MustBeGreaterThan(TValue value, TValue min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(TValue value, TValue min, string parameterName);
    public static void MustBeBetweenOrEqualTo(TValue value, TValue min, TValue max, string parameterName);
    public static void IsTrue(bool target, string parameterName, string message);
    public static void IsFalse(bool target, string parameterName, string message);
    public static void MustBeSizedAtLeast(ReadOnlySpan`1<T> source, int minLength, string parameterName);
    public static void MustBeSizedAtLeast(Span`1<T> source, int minLength, string parameterName);
    [NullableContextAttribute("2")]
public static void DestinationShouldNotBeTooShort(ReadOnlySpan`1<TSource> source, Span`1<TDest> destination, string destinationParamName);
    [NullableContextAttribute("2")]
public static void DestinationShouldNotBeTooShort(Span`1<TSource> source, Span`1<TDest> destination, string destinationParamName);
    public static void MustBeLessThan(byte value, byte max, string parameterName);
    public static void MustBeLessThanOrEqualTo(byte value, byte max, string parameterName);
    public static void MustBeGreaterThan(byte value, byte min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(byte value, byte min, string parameterName);
    public static void MustBeBetweenOrEqualTo(byte value, byte min, byte max, string parameterName);
    public static void MustBeLessThan(sbyte value, sbyte max, string parameterName);
    public static void MustBeLessThanOrEqualTo(sbyte value, sbyte max, string parameterName);
    public static void MustBeGreaterThan(sbyte value, sbyte min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(sbyte value, sbyte min, string parameterName);
    public static void MustBeBetweenOrEqualTo(sbyte value, sbyte min, sbyte max, string parameterName);
    public static void MustBeLessThan(short value, short max, string parameterName);
    public static void MustBeLessThanOrEqualTo(short value, short max, string parameterName);
    public static void MustBeGreaterThan(short value, short min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(short value, short min, string parameterName);
    public static void MustBeBetweenOrEqualTo(short value, short min, short max, string parameterName);
    public static void MustBeLessThan(ushort value, ushort max, string parameterName);
    public static void MustBeLessThanOrEqualTo(ushort value, ushort max, string parameterName);
    public static void MustBeGreaterThan(ushort value, ushort min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(ushort value, ushort min, string parameterName);
    public static void MustBeBetweenOrEqualTo(ushort value, ushort min, ushort max, string parameterName);
    public static void MustBeLessThan(char value, char max, string parameterName);
    public static void MustBeLessThanOrEqualTo(char value, char max, string parameterName);
    public static void MustBeGreaterThan(char value, char min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(char value, char min, string parameterName);
    public static void MustBeBetweenOrEqualTo(char value, char min, char max, string parameterName);
    public static void MustBeLessThan(int value, int max, string parameterName);
    public static void MustBeLessThanOrEqualTo(int value, int max, string parameterName);
    public static void MustBeGreaterThan(int value, int min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(int value, int min, string parameterName);
    public static void MustBeBetweenOrEqualTo(int value, int min, int max, string parameterName);
    public static void MustBeLessThan(UInt32 value, UInt32 max, string parameterName);
    public static void MustBeLessThanOrEqualTo(UInt32 value, UInt32 max, string parameterName);
    public static void MustBeGreaterThan(UInt32 value, UInt32 min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(UInt32 value, UInt32 min, string parameterName);
    public static void MustBeBetweenOrEqualTo(UInt32 value, UInt32 min, UInt32 max, string parameterName);
    public static void MustBeLessThan(float value, float max, string parameterName);
    public static void MustBeLessThanOrEqualTo(float value, float max, string parameterName);
    public static void MustBeGreaterThan(float value, float min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(float value, float min, string parameterName);
    public static void MustBeBetweenOrEqualTo(float value, float min, float max, string parameterName);
    public static void MustBeLessThan(long value, long max, string parameterName);
    public static void MustBeLessThanOrEqualTo(long value, long max, string parameterName);
    public static void MustBeGreaterThan(long value, long min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(long value, long min, string parameterName);
    public static void MustBeBetweenOrEqualTo(long value, long min, long max, string parameterName);
    public static void MustBeLessThan(ulong value, ulong max, string parameterName);
    public static void MustBeLessThanOrEqualTo(ulong value, ulong max, string parameterName);
    public static void MustBeGreaterThan(ulong value, ulong min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(ulong value, ulong min, string parameterName);
    public static void MustBeBetweenOrEqualTo(ulong value, ulong min, ulong max, string parameterName);
    public static void MustBeLessThan(double value, double max, string parameterName);
    public static void MustBeLessThanOrEqualTo(double value, double max, string parameterName);
    public static void MustBeGreaterThan(double value, double min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(double value, double min, string parameterName);
    public static void MustBeBetweenOrEqualTo(double value, double min, double max, string parameterName);
    public static void MustBeLessThan(decimal value, decimal max, string parameterName);
    public static void MustBeLessThanOrEqualTo(decimal value, decimal max, string parameterName);
    public static void MustBeGreaterThan(decimal value, decimal min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(decimal value, decimal min, string parameterName);
    public static void MustBeBetweenOrEqualTo(decimal value, decimal min, decimal max, string parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.ImageSharp.Web.Caching.ConcurrentTLruCache`2 : object {
    private ConcurrentDictionary`2<TKey, LongTickCountLruItem`2<TKey, TValue>> dictionary;
    private ConcurrentQueue`1<LongTickCountLruItem`2<TKey, TValue>> hotQueue;
    private ConcurrentQueue`1<LongTickCountLruItem`2<TKey, TValue>> warmQueue;
    private ConcurrentQueue`1<LongTickCountLruItem`2<TKey, TValue>> coldQueue;
    private int hotCount;
    private int warmCount;
    private int coldCount;
    private int hotCapacity;
    private int warmCapacity;
    private int coldCapacity;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TLruLongTicksPolicy`2<TKey, TValue> policy;
    public int Count { get; }
    public int HotCount { get; }
    public int WarmCount { get; }
    public int ColdCount { get; }
    public ConcurrentTLruCache`2(int capacity, TimeSpan timeToLive);
    public ConcurrentTLruCache`2(int concurrencyLevel, int capacity, IEqualityComparer`1<TKey> comparer, TimeSpan timeToLive);
    public int get_Count();
    public int get_HotCount();
    public int get_WarmCount();
    public int get_ColdCount();
    public bool TryGet(TKey key, TValue& value);
    private bool GetOrDiscard(LongTickCountLruItem`2<TKey, TValue> item, TValue& value);
    public TValue GetOrAdd(TKey key, Func`2<TKey, TValue> valueFactory);
    [AsyncStateMachineAttribute("SixLabors.ImageSharp.Web.Caching.ConcurrentTLruCache`2/<GetOrAddAsync>d__24")]
public Task`1<TValue> GetOrAddAsync(TKey key, Func`2<TKey, Task`1<TValue>> valueFactory);
    public bool TryRemove(TKey key);
    private void Cycle();
    private void CycleHot();
    private void CycleWarm();
    private void CycleCold();
    private void Move(LongTickCountLruItem`2<TKey, TValue> item, ItemDestination where);
}
internal static class SixLabors.ImageSharp.Web.Caching.HexEncoder : object {
    [NullableAttribute("1")]
private static Char[] HexLutBase;
    [NullableAttribute("1")]
private static Char[] HexLutHi;
    [NullableAttribute("1")]
private static Char[] HexLutLo;
    private static HexEncoder();
    public static string Encode(ReadOnlySpan`1<byte> bytes);
    private static void EncodeToUtf16(ReadOnlySpan`1<byte> bytes, Span`1<char> chars);
}
[NullableContextAttribute("1")]
public interface SixLabors.ImageSharp.Web.Caching.ICacheHash {
    public abstract virtual string Create(string value, UInt32 length);
}
[NullableContextAttribute("1")]
public interface SixLabors.ImageSharp.Web.Caching.ICacheKey {
    public abstract virtual string Create(HttpContext context, CommandCollection commands);
}
[NullableContextAttribute("1")]
public interface SixLabors.ImageSharp.Web.Caching.IImageCache {
    public abstract virtual Task`1<IImageCacheResolver> GetAsync(string key);
    public abstract virtual Task SetAsync(string key, Stream stream, ImageCacheMetadata metadata);
}
internal enum SixLabors.ImageSharp.Web.Caching.ItemDestination : Enum {
    public int value__;
    public static ItemDestination Warm;
    public static ItemDestination Cold;
    public static ItemDestination Remove;
}
public class SixLabors.ImageSharp.Web.Caching.LegacyV1CacheKey : object {
    [NullableContextAttribute("1")]
public sealed virtual string Create(HttpContext context, CommandCollection commands);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.ImageSharp.Web.Caching.LongTickCountLruItem`2 : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) wasAccessed;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) wasRemoved;
    public TKey Key;
    public TValue Value;
    [CompilerGeneratedAttribute]
private long <TickCount>k__BackingField;
    public long TickCount { get; public set; }
    public bool WasAccessed { get; public set; }
    public bool WasRemoved { get; public set; }
    public LongTickCountLruItem`2(TKey k, TValue v, long tickCount);
    [CompilerGeneratedAttribute]
public long get_TickCount();
    [CompilerGeneratedAttribute]
public void set_TickCount(long value);
    public bool get_WasAccessed();
    public void set_WasAccessed(bool value);
    public bool get_WasRemoved();
    public void set_WasRemoved(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Caching.PhysicalFileSystemCache : object {
    private string cacheRootPath;
    private int cacheFolderDepth;
    private FormatUtilities formatUtilities;
    public PhysicalFileSystemCache(IOptions`1<PhysicalFileSystemCacheOptions> options, IWebHostEnvironment environment, FormatUtilities formatUtilities);
    internal static string GetCacheRoot(PhysicalFileSystemCacheOptions cacheOptions, string webRootPath, string contentRootPath);
    public sealed virtual Task`1<IImageCacheResolver> GetAsync(string key);
    [AsyncStateMachineAttribute("SixLabors.ImageSharp.Web.Caching.PhysicalFileSystemCache/<SetAsync>d__6")]
public sealed virtual Task SetAsync(string key, Stream stream, ImageCacheMetadata metadata);
    private string ToImageFilePath(string path, ImageCacheMetadata& metaData);
    private static string ToMetaDataFilePath(string path);
    internal static string ToFilePath(string key, int cacheFolderDepth);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Caching.PhysicalFileSystemCacheOptions : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CacheRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CacheFolderDepth>k__BackingField;
    [NullableAttribute("2")]
public string CacheRootPath { get; public set; }
    public string CacheFolder { get; public set; }
    public UInt32 CacheFolderDepth { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_CacheRootPath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CacheRootPath(string value);
    [CompilerGeneratedAttribute]
public string get_CacheFolder();
    [CompilerGeneratedAttribute]
public void set_CacheFolder(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_CacheFolderDepth();
    [CompilerGeneratedAttribute]
public void set_CacheFolderDepth(UInt32 value);
}
public class SixLabors.ImageSharp.Web.Caching.SHA256CacheHash : object {
    [NullableContextAttribute("1")]
public SHA256CacheHash(IOptions`1<ImageSharpMiddlewareOptions> options);
    [NullableContextAttribute("1")]
public sealed virtual string Create(string value, UInt32 length);
    private static string HashValue(ReadOnlySpan`1<char> value, UInt32 length, Span`1<byte> bufferSpan);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class SixLabors.ImageSharp.Web.Caching.TLruLongTicksPolicy`2 : ValueType {
    private long timeToLive;
    public TLruLongTicksPolicy`2(TimeSpan timeToLive);
    public static LongTickCountLruItem`2<TKey, TValue> CreateItem(TKey key, TValue value);
    public static void Touch(LongTickCountLruItem`2<TKey, TValue> item);
    public bool ShouldDiscard(LongTickCountLruItem`2<TKey, TValue> item);
    public ItemDestination RouteHot(LongTickCountLruItem`2<TKey, TValue> item);
    public ItemDestination RouteWarm(LongTickCountLruItem`2<TKey, TValue> item);
    public ItemDestination RouteCold(LongTickCountLruItem`2<TKey, TValue> item);
}
public class SixLabors.ImageSharp.Web.Caching.UriAbsoluteCacheKey : object {
    [NullableContextAttribute("1")]
public sealed virtual string Create(HttpContext context, CommandCollection commands);
}
public class SixLabors.ImageSharp.Web.Caching.UriAbsoluteLowerInvariantCacheKey : object {
    [NullableContextAttribute("1")]
public sealed virtual string Create(HttpContext context, CommandCollection commands);
}
public class SixLabors.ImageSharp.Web.Caching.UriRelativeCacheKey : object {
    [NullableContextAttribute("1")]
public sealed virtual string Create(HttpContext context, CommandCollection commands);
}
public class SixLabors.ImageSharp.Web.Caching.UriRelativeLowerInvariantCacheKey : object {
    [NullableContextAttribute("1")]
public sealed virtual string Create(HttpContext context, CommandCollection commands);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class SixLabors.ImageSharp.Web.CaseHandlingUriBuilder : object {
    private static Uri FallbackBaseUri;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static SpanAction`2<char, ValueTuple`6<bool, string, string, string, string, string>> InitializeAbsoluteUriStringSpanAction;
    private static CaseHandlingUriBuilder();
    public static string BuildRelative(CaseHandling handling, PathString pathBase, PathString path, QueryString query);
    public static string BuildAbsolute(CaseHandling handling, HostString host, PathString pathBase, PathString path, QueryString query);
    public static string BuildAbsolute(CaseHandling handling, string scheme, HostString host, PathString pathBase, PathString path, QueryString query);
    public static string Encode(CaseHandling handling, string uri);
    public static string Encode(CaseHandling handling, Uri uri);
    [NullableContextAttribute("0")]
private static int CopyTextToBuffer(Span`1<char> buffer, int index, ReadOnlySpan`1<char> text);
    [NullableContextAttribute("0")]
private static int CopyTextToBufferLowerInvariant(Span`1<char> buffer, int index, ReadOnlySpan`1<char> text);
    [NullableContextAttribute("0")]
private static void InitializeAbsoluteUriString(Span`1<char> buffer, ValueTuple`6<bool, string, string, string, string, string> uriParts);
}
public enum SixLabors.ImageSharp.Web.CommandHandling : Enum {
    public int value__;
    public static CommandHandling Sanitize;
    public static CommandHandling None;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DefaultMemberAttribute("Item")]
public class SixLabors.ImageSharp.Web.Commands.CommandCollection : KeyedCollection`2<string, KeyValuePair`2<string, string>> {
    public IEnumerable`1<string> Keys { get; }
    public string Item { get; public set; }
    private CommandCollection(IEqualityComparer`1<string> comparer);
    [IteratorStateMachineAttribute("SixLabors.ImageSharp.Web.Commands.CommandCollection/<get_Keys>d__3")]
public IEnumerable`1<string> get_Keys();
    public string get_Item(string key);
    public void set_Item(string key, string value);
    public void Add(string key, string value);
    public void Insert(int index, string key, string value);
    public bool TryGetValue(string key, String& value);
    public int FindIndex(Predicate`1<string> match);
    public int IndexOf(string key);
    protected virtual string GetKeyForItem(KeyValuePair`2<string, string> item);
    [DoesNotReturnAttribute]
private static void ThrowKeyNotFound();
}
[ExtensionAttribute]
public static class SixLabors.ImageSharp.Web.Commands.CommandCollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetValueOrDefault(CommandCollection collection, string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Commands.CommandParser : object {
    private ICommandConverter[] converters;
    public CommandParser(IEnumerable`1<ICommandConverter> converters);
    [NullableContextAttribute("2")]
public T ParseValue(string value, CultureInfo culture);
    [DoesNotReturnAttribute]
private static T ThrowNotSupported(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Commands.Converters.ArrayConverter`1 : object {
    public Type Type { get; }
    public sealed virtual Type get_Type();
    public sealed virtual T[] ConvertFrom(CommandParser parser, CultureInfo culture, string value, Type propertyType);
    private static String[] GetStringArray(string input, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Commands.Converters.ColorConverter : object {
    private static Regex HexColorRegex;
    private static Regex NumberRegex;
    private static Lazy`1<IDictionary`2<string, Color>> ColorConstantsTable;
    public Type Type { get; }
    private static ColorConverter();
    public sealed virtual Type get_Type();
    public sealed virtual Color ConvertFrom(CommandParser parser, CultureInfo culture, string value, Type propertyType);
    private static IDictionary`2<string, Color> InitializeColorConstantsTable();
}
internal static class SixLabors.ImageSharp.Web.Commands.Converters.ConverterUtility : object {
    [NullableContextAttribute("1")]
public static char GetListSeparator(CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Commands.Converters.EnumConverter : object {
    public Type Type { get; }
    public sealed virtual Type get_Type();
    public sealed virtual object ConvertFrom(CommandParser parser, CultureInfo culture, string value, Type propertyType);
    private static String[] GetStringArray(string input, char separator);
}
[NullableContextAttribute("1")]
public interface SixLabors.ImageSharp.Web.Commands.Converters.ICommandConverter {
    public Type Type { get; }
    public abstract virtual Type get_Type();
}
public interface SixLabors.ImageSharp.Web.Commands.Converters.ICommandConverter`1 {
    [NullableContextAttribute("1")]
public abstract virtual T ConvertFrom(CommandParser parser, CultureInfo culture, string value, Type propertyType);
}
public class SixLabors.ImageSharp.Web.Commands.Converters.IntegralNumberConverter`1 : object {
    [NullableAttribute("1")]
public Type Type { get; }
    [NullableContextAttribute("1")]
public sealed virtual Type get_Type();
    [NullableContextAttribute("1")]
public sealed virtual T ConvertFrom(CommandParser parser, CultureInfo culture, string value, Type propertyType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Commands.Converters.ListConverter`1 : object {
    public Type Type { get; }
    public sealed virtual Type get_Type();
    public sealed virtual List`1<T> ConvertFrom(CommandParser parser, CultureInfo culture, string value, Type propertyType);
    private static String[] GetStringArray(string input, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Commands.Converters.SimpleCommandConverter`1 : object {
    public Type Type { get; }
    public sealed virtual Type get_Type();
    public sealed virtual T ConvertFrom(CommandParser parser, CultureInfo culture, string value, Type propertyType);
}
[NullableContextAttribute("1")]
public interface SixLabors.ImageSharp.Web.Commands.IRequestParser {
    public abstract virtual CommandCollection ParseRequestCommands(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Commands.PresetOnlyQueryCollectionRequestParser : object {
    private IDictionary`2<string, CommandCollection> presets;
    public static string QueryKey;
    public PresetOnlyQueryCollectionRequestParser(IOptions`1<PresetOnlyQueryCollectionRequestParserOptions> presetOptions);
    public sealed virtual CommandCollection ParseRequestCommands(HttpContext context);
    private static IDictionary`2<string, CommandCollection> ParsePresets(IDictionary`2<string, string> unparsedPresets);
    private static CommandCollection ParsePreset(string unparsedPresetValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Commands.PresetOnlyQueryCollectionRequestParserOptions : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Presets>k__BackingField;
    public IDictionary`2<string, string> Presets { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Presets();
    [CompilerGeneratedAttribute]
public void set_Presets(IDictionary`2<string, string> value);
}
public class SixLabors.ImageSharp.Web.Commands.QueryCollectionRequestParser : object {
    [NullableContextAttribute("1")]
public sealed virtual CommandCollection ParseRequestCommands(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.ImageSharp.Web.Commands.TypeConstants : object {
    public static Type Sbyte;
    public static Type Byte;
    public static Type Short;
    public static Type UShort;
    public static Type Int;
    public static Type UInt;
    public static Type Long;
    public static Type ULong;
    public static Type[] IntegralTypes;
    private static TypeConstants();
}
[ExtensionAttribute]
public static class SixLabors.ImageSharp.Web.DependencyInjection.ApplicationBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IApplicationBuilder UseImageSharp(IApplicationBuilder app);
}
[NullableContextAttribute("1")]
public interface SixLabors.ImageSharp.Web.DependencyInjection.IImageSharpBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.ImageSharp.Web.DependencyInjection.ImageSharpBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public ImageSharpBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class SixLabors.ImageSharp.Web.DependencyInjection.ImageSharpBuilderExtensions : object {
    [ExtensionAttribute]
public static IImageSharpBuilder SetRequestParser(IImageSharpBuilder builder);
    [ExtensionAttribute]
public static IImageSharpBuilder SetRequestParser(IImageSharpBuilder builder, Func`2<IServiceProvider, IRequestParser> implementationFactory);
    [ExtensionAttribute]
public static IImageSharpBuilder SetCache(IImageSharpBuilder builder);
    [ExtensionAttribute]
public static IImageSharpBuilder SetCache(IImageSharpBuilder builder, Func`2<IServiceProvider, IImageCache> implementationFactory);
    [ExtensionAttribute]
public static IImageSharpBuilder SetCacheKey(IImageSharpBuilder builder);
    [ExtensionAttribute]
public static IImageSharpBuilder SetCacheKey(IImageSharpBuilder builder, Func`2<IServiceProvider, ICacheKey> implementationFactory);
    [ExtensionAttribute]
public static IImageSharpBuilder SetCacheHash(IImageSharpBuilder builder);
    [ExtensionAttribute]
public static IImageSharpBuilder SetCacheHash(IImageSharpBuilder builder, Func`2<IServiceProvider, ICacheHash> implementationFactory);
    [ExtensionAttribute]
public static IImageSharpBuilder AddProvider(IImageSharpBuilder builder);
    [ExtensionAttribute]
public static IImageSharpBuilder AddProvider(IImageSharpBuilder builder, Func`2<IServiceProvider, TProvider> implementationFactory);
    [ExtensionAttribute]
public static IImageSharpBuilder InsertProvider(IImageSharpBuilder builder, int index);
    [ExtensionAttribute]
public static IImageSharpBuilder InsertProvider(IImageSharpBuilder builder, int index, Func`2<IServiceProvider, TProvider> implementationFactory);
    [ExtensionAttribute]
public static IImageSharpBuilder RemoveProvider(IImageSharpBuilder builder);
    [ExtensionAttribute]
public static IImageSharpBuilder ClearProviders(IImageSharpBuilder builder);
    [ExtensionAttribute]
public static IImageSharpBuilder AddProcessor(IImageSharpBuilder builder);
    [ExtensionAttribute]
public static IImageSharpBuilder AddProcessor(IImageSharpBuilder builder, Func`2<IServiceProvider, TProcessor> implementationFactory);
    [ExtensionAttribute]
public static IImageSharpBuilder RemoveProcessor(IImageSharpBuilder builder);
    [ExtensionAttribute]
public static IImageSharpBuilder ClearProcessors(IImageSharpBuilder builder);
    [ExtensionAttribute]
public static IImageSharpBuilder AddConverter(IImageSharpBuilder builder);
    [ExtensionAttribute]
public static IImageSharpBuilder AddConverter(IImageSharpBuilder builder, Func`2<IServiceProvider, TConverter> implementationFactory);
    [ExtensionAttribute]
public static IImageSharpBuilder RemoveConverter(IImageSharpBuilder builder);
    [ExtensionAttribute]
public static IImageSharpBuilder ClearConverters(IImageSharpBuilder builder);
    [ExtensionAttribute]
public static IImageSharpBuilder Configure(IImageSharpBuilder builder, IConfiguration config);
    [ExtensionAttribute]
public static IImageSharpBuilder Configure(IImageSharpBuilder builder, Action`1<TOptions> configureOptions);
    [ExtensionAttribute]
private static Type GetImplementationType(ServiceDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class SixLabors.ImageSharp.Web.DependencyInjection.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IImageSharpBuilder AddImageSharp(IServiceCollection services);
    [ExtensionAttribute]
public static IImageSharpBuilder AddImageSharp(IServiceCollection services, Action`1<ImageSharpMiddlewareOptions> setupAction);
    private static void AddDefaultServices(IImageSharpBuilder builder, Action`1<ImageSharpMiddlewareOptions> setupAction);
}
public static class SixLabors.ImageSharp.Web.ExifOrientationUtilities : object {
    public static Vector2 Transform(Vector2 position, Vector2 min, Vector2 max, ushort orientation);
    public static Size Transform(Size size, ushort orientation);
    public static AnchorPositionMode Transform(AnchorPositionMode anchor, ushort orientation);
    public static bool IsExifOrientationRotated(ushort orientation);
    private static float Flip(float offset, float max);
}
public static class SixLabors.ImageSharp.Web.Format : object {
    [CompilerGeneratedAttribute]
private static FormatCommand <Bmp>k__BackingField;
    [CompilerGeneratedAttribute]
private static FormatCommand <Gif>k__BackingField;
    [CompilerGeneratedAttribute]
private static FormatCommand <Jpg>k__BackingField;
    [CompilerGeneratedAttribute]
private static FormatCommand <Png>k__BackingField;
    [CompilerGeneratedAttribute]
private static FormatCommand <Tga>k__BackingField;
    [CompilerGeneratedAttribute]
private static FormatCommand <WebP>k__BackingField;
    public static FormatCommand Bmp { get; }
    public static FormatCommand Gif { get; }
    public static FormatCommand Jpg { get; }
    public static FormatCommand Png { get; }
    public static FormatCommand Tga { get; }
    public static FormatCommand WebP { get; }
    private static Format();
    [CompilerGeneratedAttribute]
public static FormatCommand get_Bmp();
    [CompilerGeneratedAttribute]
public static FormatCommand get_Gif();
    [CompilerGeneratedAttribute]
public static FormatCommand get_Jpg();
    [CompilerGeneratedAttribute]
public static FormatCommand get_Png();
    [CompilerGeneratedAttribute]
public static FormatCommand get_Tga();
    [CompilerGeneratedAttribute]
public static FormatCommand get_WebP();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class SixLabors.ImageSharp.Web.FormatCommand : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public FormatCommand(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.FormattedImage : object {
    private ImageFormatManager imageFormatsManager;
    private bool keepOpen;
    private IImageFormat format;
    private IImageEncoder encoder;
    [CompilerGeneratedAttribute]
private Image <Image>k__BackingField;
    public Image Image { get; }
    public IImageFormat Format { get; public set; }
    public IImageEncoder Encoder { get; public set; }
    public FormattedImage(Image image, IImageFormat format);
    private FormattedImage(Image image, IImageFormat format, bool keepOpen);
    [CompilerGeneratedAttribute]
public Image get_Image();
    public IImageFormat get_Format();
    public void set_Format(IImageFormat value);
    public IImageEncoder get_Encoder();
    public void set_Encoder(IImageEncoder value);
    [AsyncStateMachineAttribute("SixLabors.ImageSharp.Web.FormattedImage/<LoadAsync>d__15`1")]
internal static Task`1<FormattedImage> LoadAsync(DecoderOptions options, Stream source);
    [AsyncStateMachineAttribute("SixLabors.ImageSharp.Web.FormattedImage/<LoadAsync>d__16")]
internal static Task`1<FormattedImage> LoadAsync(DecoderOptions options, Stream source);
    internal void Save(Stream destination);
    public bool TryGetExifOrientation(UInt16& value);
    public sealed virtual void Dispose();
    [DoesNotReturnAttribute]
private static void ThrowNull(string name);
    [DoesNotReturnAttribute]
private static void ThrowInvalid(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.FormatUtilities : object {
    private List`1<string> extensions;
    private Dictionary`2<string, string> extensionsByMimeType;
    public FormatUtilities(IOptions`1<ImageSharpMiddlewareOptions> options);
    public bool TryGetExtensionFromUri(string uri, String& extension);
    public string GetExtensionFromContentType(string contentType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class SixLabors.ImageSharp.Web.HMACUtilities : object {
    public static string TokenCommand;
    public static string ComputeHMACSHA256(string value, Byte[] secret);
    public static string ComputeHMACSHA384(string value, Byte[] secret);
    public static string ComputeHMACSHA512(string value, Byte[] secret);
    private static string CreateHMAC(string value, ReadOnlySpan`1<byte> secret, HashAlgorithmSizes hashSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class SixLabors.ImageSharp.Web.ImageCacheMetadata : ValueType {
    private static string ContentTypeKey;
    private static string SourceLastModifiedKey;
    private static string CacheLastModifiedKey;
    private static string CacheControlKey;
    private static string ContentLengthKey;
    [CompilerGeneratedAttribute]
private DateTime <SourceLastWriteTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CacheLastWriteTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CacheControlMaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ContentLength>k__BackingField;
    public DateTime SourceLastWriteTimeUtc { get; }
    public DateTime CacheLastWriteTimeUtc { get; }
    public string ContentType { get; }
    public TimeSpan CacheControlMaxAge { get; }
    public long ContentLength { get; }
    public ImageCacheMetadata(DateTime sourceLastWriteTimeUtc, DateTime cacheLastWriteTimeUtc, string contentType, TimeSpan cacheControlMaxAge, long contentLength);
    [CompilerGeneratedAttribute]
public DateTime get_SourceLastWriteTimeUtc();
    [CompilerGeneratedAttribute]
public DateTime get_CacheLastWriteTimeUtc();
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public TimeSpan get_CacheControlMaxAge();
    [CompilerGeneratedAttribute]
public long get_ContentLength();
    public static bool op_Equality(ImageCacheMetadata& left, ImageCacheMetadata& right);
    public static bool op_Inequality(ImageCacheMetadata& left, ImageCacheMetadata& right);
    public static ImageCacheMetadata FromDictionary(IDictionary`2<string, string> dictionary);
    [AsyncStateMachineAttribute("SixLabors.ImageSharp.Web.ImageCacheMetadata/<ReadAsync>d__24")]
public static Task`1<ImageCacheMetadata> ReadAsync(Stream stream);
    public sealed virtual bool Equals(ImageCacheMetadata other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public Dictionary`2<string, string> ToDictionary();
    public virtual string ToString();
    [AsyncStateMachineAttribute("SixLabors.ImageSharp.Web.ImageCacheMetadata/<WriteAsync>d__30")]
public Task WriteAsync(Stream stream);
}
[IsReadOnlyAttribute]
public class SixLabors.ImageSharp.Web.ImageMetadata : ValueType {
    [CompilerGeneratedAttribute]
private DateTime <LastWriteTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CacheControlMaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ContentLength>k__BackingField;
    public DateTime LastWriteTimeUtc { get; }
    public TimeSpan CacheControlMaxAge { get; }
    public long ContentLength { get; }
    public ImageMetadata(DateTime lastWriteTimeUtc, long contentLength);
    public ImageMetadata(DateTime lastWriteTimeUtc, TimeSpan cacheControlMaxAge, long contentLength);
    [CompilerGeneratedAttribute]
public DateTime get_LastWriteTimeUtc();
    [CompilerGeneratedAttribute]
public TimeSpan get_CacheControlMaxAge();
    [CompilerGeneratedAttribute]
public long get_ContentLength();
    public static bool op_Equality(ImageMetadata& left, ImageMetadata& right);
    public static bool op_Inequality(ImageMetadata& left, ImageMetadata& right);
    public sealed virtual bool Equals(ImageMetadata other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Middleware.ImageCommandContext : object {
    [CompilerGeneratedAttribute]
private HttpContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandCollection <Commands>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandParser <Parser>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    public HttpContext Context { get; }
    public CommandCollection Commands { get; }
    public CommandParser Parser { get; }
    public CultureInfo Culture { get; }
    public ImageCommandContext(HttpContext context, CommandCollection commands, CommandParser parser, CultureInfo culture);
    [CompilerGeneratedAttribute]
public HttpContext get_Context();
    [CompilerGeneratedAttribute]
public CommandCollection get_Commands();
    [CompilerGeneratedAttribute]
public CommandParser get_Parser();
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SixLabors.ImageSharp.Web.Middleware.ImageContext : ValueType {
    private ImageSharpMiddlewareOptions options;
    private HttpContext context;
    private HttpRequest request;
    private HttpResponse response;
    private RequestHeaders requestHeaders;
    private ResponseHeaders responseHeaders;
    private DateTimeOffset fileLastModified;
    private long fileLength;
    [NullableAttribute("2")]
private EntityTagHeaderValue fileEtag;
    private PreconditionState ifMatchState;
    private PreconditionState ifNoneMatchState;
    private PreconditionState ifModifiedSinceState;
    private PreconditionState ifUnmodifiedSinceState;
    public ImageContext(HttpContext context, ImageSharpMiddlewareOptions options);
    public string GetDisplayUrl();
    public void ComprehendRequestHeaders(DateTimeOffset lastModified, long length);
    public PreconditionState GetPreconditionState();
    public bool IsHeadRequest();
    public Task SendStatusAsync(int statusCode, ImageCacheMetadata& metaData);
    [AsyncStateMachineAttribute("SixLabors.ImageSharp.Web.Middleware.ImageContext/<SendAsync>d__20")]
public Task SendAsync(Stream stream, ImageCacheMetadata metaData);
    private static PreconditionState GetMaxPreconditionState(PreconditionState[] states);
    [AsyncStateMachineAttribute("SixLabors.ImageSharp.Web.Middleware.ImageContext/<ApplyResponseHeadersAsync>d__22")]
private Task ApplyResponseHeadersAsync(int statusCode, string contentType, TimeSpan maxAge);
    private void ComputeLastModified();
    private void ComputeIfMatch();
    private void ComputeIfModifiedSince();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Middleware.ImageProcessingContext : object {
    [CompilerGeneratedAttribute]
private HttpContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandCollection <Commands>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    public HttpContext Context { get; }
    public Stream Stream { get; }
    public CommandCollection Commands { get; }
    public string ContentType { get; }
    public string Extension { get; }
    public ImageProcessingContext(HttpContext context, Stream stream, CommandCollection commands, string contentType, string extension);
    [CompilerGeneratedAttribute]
public HttpContext get_Context();
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
public CommandCollection get_Commands();
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public string get_Extension();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Middleware.ImageSharpMiddleware : object {
    private static ConcurrentTLruCache`2<string, ImageMetadata> SourceMetadataLru;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentTLruCache`2<string, ValueTuple`2<IImageCacheResolver, ImageCacheMetadata>> CacheResolverLru;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentTLruCache`2<string, string> HMACTokenLru;
    private RequestDelegate next;
    private ImageSharpMiddlewareOptions options;
    private ILogger logger;
    private IRequestParser requestParser;
    private IImageProvider[] providers;
    private IImageWebProcessor[] processors;
    private ICacheKey cacheKey;
    private IImageCache cache;
    private ICacheHash cacheHash;
    private FormatUtilities formatUtilities;
    private CommandParser commandParser;
    private CultureInfo parserCulture;
    private AsyncKeyReaderWriterLock`1<string> asyncKeyLock;
    private RequestAuthorizationUtilities authorizationUtilities;
    public ImageSharpMiddleware(RequestDelegate next, IOptions`1<ImageSharpMiddlewareOptions> options, ILoggerFactory loggerFactory, IRequestParser requestParser, IEnumerable`1<IImageProvider> resolvers, IEnumerable`1<IImageWebProcessor> processors, IImageCache cache, ICacheKey cacheKey, ICacheHash cacheHash, CommandParser commandParser, FormatUtilities formatUtilities, AsyncKeyReaderWriterLock`1<string> asyncKeyLock, RequestAuthorizationUtilities requestAuthorizationUtilities);
    private static ImageSharpMiddleware();
    public Task Invoke(HttpContext httpContext);
    [AsyncStateMachineAttribute("SixLabors.ImageSharp.Web.Middleware.ImageSharpMiddleware/<Invoke>d__19")]
private Task Invoke(HttpContext httpContext, bool retry);
    private static void SetBadRequest(HttpContext httpContext);
    [AsyncStateMachineAttribute("SixLabors.ImageSharp.Web.Middleware.ImageSharpMiddleware/<ProcessRequestAsync>d__21")]
private Task ProcessRequestAsync(ImageCommandContext imageCommandContext, IImageResolver sourceImageResolver, ImageContext imageContext, bool retry);
    [NullableContextAttribute("2")]
private static ValueTask StreamDisposeAsync(Stream stream);
    [AsyncStateMachineAttribute("SixLabors.ImageSharp.Web.Middleware.ImageSharpMiddleware/<IsNewOrUpdatedAsync>d__23")]
private Task`1<ImageWorkerResult> IsNewOrUpdatedAsync(IImageResolver sourceImageResolver, string key);
    [AsyncStateMachineAttribute("SixLabors.ImageSharp.Web.Middleware.ImageSharpMiddleware/<SendResponseAsync>d__24")]
private Task SendResponseAsync(HttpContext httpContext, ImageContext imageContext, string key, ImageCacheMetadata metadata, IImageCacheResolver cacheResolver, Stream stream, bool retry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Middleware.ImageSharpMiddlewareOptions : object {
    private Func`3<ImageCommandContext, Byte[], string> onComputeHMAC;
    private Func`2<ImageCommandContext, Task> onParseCommandsAsync;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<ImageCommandContext, Configuration, Task`1<DecoderOptions>> onBeforeLoadAsync;
    private Func`2<FormattedImage, Task> onBeforeSaveAsync;
    private Func`2<ImageProcessingContext, Task> onProcessedAsync;
    private Func`2<HttpContext, Task> onPrepareResponseAsync;
    [CompilerGeneratedAttribute]
private Configuration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private RecyclableMemoryStreamManager <MemoryStreamManager>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseInvariantParsingCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <BrowserMaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CacheMaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CacheHashLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <HMACSecretKey>k__BackingField;
    public Configuration Configuration { get; public set; }
    public RecyclableMemoryStreamManager MemoryStreamManager { get; public set; }
    public bool UseInvariantParsingCulture { get; public set; }
    public TimeSpan BrowserMaxAge { get; public set; }
    public TimeSpan CacheMaxAge { get; public set; }
    public UInt32 CacheHashLength { get; public set; }
    public Byte[] HMACSecretKey { get; public set; }
    public Func`3<ImageCommandContext, Byte[], string> OnComputeHMAC { get; public set; }
    public Func`2<ImageCommandContext, Task> OnParseCommandsAsync { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<ImageCommandContext, Configuration, Task`1<DecoderOptions>> OnBeforeLoadAsync { get; public set; }
    public Func`2<FormattedImage, Task> OnBeforeSaveAsync { get; public set; }
    public Func`2<ImageProcessingContext, Task> OnProcessedAsync { get; public set; }
    public Func`2<HttpContext, Task> OnPrepareResponseAsync { get; public set; }
    [CompilerGeneratedAttribute]
public Configuration get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(Configuration value);
    [CompilerGeneratedAttribute]
public RecyclableMemoryStreamManager get_MemoryStreamManager();
    [CompilerGeneratedAttribute]
public void set_MemoryStreamManager(RecyclableMemoryStreamManager value);
    [CompilerGeneratedAttribute]
public bool get_UseInvariantParsingCulture();
    [CompilerGeneratedAttribute]
public void set_UseInvariantParsingCulture(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_BrowserMaxAge();
    [CompilerGeneratedAttribute]
public void set_BrowserMaxAge(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_CacheMaxAge();
    [CompilerGeneratedAttribute]
public void set_CacheMaxAge(TimeSpan value);
    [CompilerGeneratedAttribute]
public UInt32 get_CacheHashLength();
    [CompilerGeneratedAttribute]
public void set_CacheHashLength(UInt32 value);
    [CompilerGeneratedAttribute]
public Byte[] get_HMACSecretKey();
    [CompilerGeneratedAttribute]
public void set_HMACSecretKey(Byte[] value);
    public Func`3<ImageCommandContext, Byte[], string> get_OnComputeHMAC();
    public void set_OnComputeHMAC(Func`3<ImageCommandContext, Byte[], string> value);
    public Func`2<ImageCommandContext, Task> get_OnParseCommandsAsync();
    public void set_OnParseCommandsAsync(Func`2<ImageCommandContext, Task> value);
    public Func`3<ImageCommandContext, Configuration, Task`1<DecoderOptions>> get_OnBeforeLoadAsync();
    public void set_OnBeforeLoadAsync(Func`3<ImageCommandContext, Configuration, Task`1<DecoderOptions>> value);
    public Func`2<FormattedImage, Task> get_OnBeforeSaveAsync();
    public void set_OnBeforeSaveAsync(Func`2<FormattedImage, Task> value);
    public Func`2<ImageProcessingContext, Task> get_OnProcessedAsync();
    public void set_OnProcessedAsync(Func`2<ImageProcessingContext, Task> value);
    public Func`2<HttpContext, Task> get_OnPrepareResponseAsync();
    public void set_OnPrepareResponseAsync(Func`2<HttpContext, Task> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class SixLabors.ImageSharp.Web.Middleware.ImageWorkerResult : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsNewOrUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageMetadata <SourceImageMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageCacheMetadata <CacheImageMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private IImageCacheResolver <Resolver>k__BackingField;
    public bool IsNewOrUpdated { get; }
    public ImageMetadata SourceImageMetadata { get; }
    public ImageCacheMetadata CacheImageMetadata { get; }
    public IImageCacheResolver Resolver { get; }
    public ImageWorkerResult(ImageMetadata sourceImageMetadata);
    [NullableContextAttribute("1")]
public ImageWorkerResult(ImageMetadata sourceImageMetadata, ImageCacheMetadata cacheImageMetadata, IImageCacheResolver resolver);
    public ImageWorkerResult(ImageCacheMetadata cacheImageMetadata, IImageCacheResolver resolver);
    [CompilerGeneratedAttribute]
public bool get_IsNewOrUpdated();
    [CompilerGeneratedAttribute]
public ImageMetadata get_SourceImageMetadata();
    [CompilerGeneratedAttribute]
public ImageCacheMetadata get_CacheImageMetadata();
    [CompilerGeneratedAttribute]
public IImageCacheResolver get_Resolver();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class SixLabors.ImageSharp.Web.Middleware.LoggerExtensions : object {
    private static Action`3<ILogger, string, Exception> LogProcessingErrorAction;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, string, Exception> LogResolveFailedAction;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`4<ILogger, string, string, Exception> LogServedAction;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, string, Exception> LogPathNotModifiedAction;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, string, Exception> LogPreconditionFailedAction;
    private static LoggerExtensions();
    [ExtensionAttribute]
public static void LogImageProcessingFailed(ILogger logger, string uri, Exception exception);
    [ExtensionAttribute]
public static void LogImageResolveFailed(ILogger logger, string uri);
    [ExtensionAttribute]
public static void LogImageServed(ILogger logger, string uri, string key);
    [ExtensionAttribute]
public static void LogImageNotModified(ILogger logger, string uri);
    [ExtensionAttribute]
public static void LogImagePreconditionFailed(ILogger logger, string uri);
}
internal static class SixLabors.ImageSharp.Web.Middleware.ResponseConstants : object {
    internal static int Status200Ok;
    internal static int Status304NotModified;
    internal static int Status412PreconditionFailed;
}
internal static class SixLabors.ImageSharp.Web.PathUtilities : object {
    [NullableContextAttribute("1")]
internal static string EnsureTrailingSlash(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Processors.AutoOrientWebProcessor : object {
    public static string AutoOrient;
    private static IEnumerable`1<string> AutoOrientCommands;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Commands>k__BackingField;
    public IEnumerable`1<string> Commands { get; }
    private static AutoOrientWebProcessor();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Commands();
    public sealed virtual FormattedImage Process(FormattedImage image, ILogger logger, CommandCollection commands, CommandParser parser, CultureInfo culture);
    public sealed virtual bool RequiresTrueColorPixelFormat(CommandCollection commands, CommandParser parser, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Processors.BackgroundColorWebProcessor : object {
    public static string Color;
    private static IEnumerable`1<string> ColorCommands;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Commands>k__BackingField;
    public IEnumerable`1<string> Commands { get; }
    private static BackgroundColorWebProcessor();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Commands();
    public sealed virtual FormattedImage Process(FormattedImage image, ILogger logger, CommandCollection commands, CommandParser parser, CultureInfo culture);
    public sealed virtual bool RequiresTrueColorPixelFormat(CommandCollection commands, CommandParser parser, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Processors.FormatWebProcessor : object {
    public static string Format;
    private static IEnumerable`1<string> FormatCommands;
    private ImageSharpMiddlewareOptions options;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Commands>k__BackingField;
    public IEnumerable`1<string> Commands { get; }
    public FormatWebProcessor(IOptions`1<ImageSharpMiddlewareOptions> options);
    private static FormatWebProcessor();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Commands();
    public sealed virtual FormattedImage Process(FormattedImage image, ILogger logger, CommandCollection commands, CommandParser parser, CultureInfo culture);
    public sealed virtual bool RequiresTrueColorPixelFormat(CommandCollection commands, CommandParser parser, CultureInfo culture);
}
[NullableContextAttribute("1")]
public interface SixLabors.ImageSharp.Web.Processors.IImageWebProcessor {
    public IEnumerable`1<string> Commands { get; }
    public abstract virtual IEnumerable`1<string> get_Commands();
    public abstract virtual FormattedImage Process(FormattedImage image, ILogger logger, CommandCollection commands, CommandParser parser, CultureInfo culture);
    public abstract virtual bool RequiresTrueColorPixelFormat(CommandCollection commands, CommandParser parser, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Processors.QualityWebProcessor : object {
    public static string Quality;
    private static IEnumerable`1<string> QualityCommands;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Commands>k__BackingField;
    public IEnumerable`1<string> Commands { get; }
    private static QualityWebProcessor();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Commands();
    public sealed virtual FormattedImage Process(FormattedImage image, ILogger logger, CommandCollection commands, CommandParser parser, CultureInfo culture);
    public sealed virtual bool RequiresTrueColorPixelFormat(CommandCollection commands, CommandParser parser, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Processors.ResizeWebProcessor : object {
    public static string Width;
    public static string Height;
    public static string Xy;
    public static string Mode;
    public static string Sampler;
    public static string Anchor;
    public static string Color;
    public static string Orient;
    public static string Compand;
    private static IEnumerable`1<string> ResizeCommands;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Commands>k__BackingField;
    public IEnumerable`1<string> Commands { get; }
    private static ResizeWebProcessor();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Commands();
    public sealed virtual FormattedImage Process(FormattedImage image, ILogger logger, CommandCollection commands, CommandParser parser, CultureInfo culture);
    internal static ResizeOptions GetResizeOptions(FormattedImage image, CommandCollection commands, CommandParser parser, CultureInfo culture);
    public sealed virtual bool RequiresTrueColorPixelFormat(CommandCollection commands, CommandParser parser, CultureInfo culture);
    private static Size ParseSize(ushort orientation, CommandCollection commands, CommandParser parser, CultureInfo culture);
    private static Nullable`1<PointF> GetCenter(FormattedImage image, ushort orientation, CommandCollection commands, CommandParser parser, CultureInfo culture);
    private static ResizeMode GetMode(CommandCollection commands, CommandParser parser, CultureInfo culture);
    private static AnchorPositionMode GetAnchor(ushort orientation, CommandCollection commands, CommandParser parser, CultureInfo culture);
    private static bool GetCompandMode(CommandCollection commands, CommandParser parser, CultureInfo culture);
    private static IResampler GetSampler(CommandCollection commands);
    private static ushort GetExifOrientation(FormattedImage image, CommandCollection commands, CommandParser parser, CultureInfo culture);
    private static Vector2 Scale(Vector2 x, Vector2 min, Vector2 max);
    private static Vector2 DeScale(Vector2 x, Vector2 min, Vector2 max);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class SixLabors.ImageSharp.Web.Processors.WebProcessingExtensions : object {
    [ExtensionAttribute]
public static FormattedImage Process(FormattedImage source, ILogger logger, IReadOnlyList`1<ValueTuple`2<int, IImageWebProcessor>> processors, CommandCollection commands, CommandParser parser, CultureInfo culture);
    [ExtensionAttribute]
public static IReadOnlyList`1<ValueTuple`2<int, IImageWebProcessor>> OrderBySupportedCommands(IEnumerable`1<IImageWebProcessor> processors, CommandCollection commands);
    [ExtensionAttribute]
public static bool IsSupportedCommand(IImageWebProcessor processor, string command);
    [ExtensionAttribute]
public static bool RequiresTrueColorPixelFormat(IReadOnlyList`1<ValueTuple`2<int, IImageWebProcessor>> processors, CommandCollection commands, CommandParser parser, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class SixLabors.ImageSharp.Web.Providers.FileProviderImageProvider : object {
    private IFileProvider fileProvider;
    private FormatUtilities formatUtilities;
    [CompilerGeneratedAttribute]
private ProcessingBehavior <ProcessingBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<HttpContext, bool> <Match>k__BackingField;
    public ProcessingBehavior ProcessingBehavior { get; }
    public Func`2<HttpContext, bool> Match { get; public set; }
    protected FileProviderImageProvider(IFileProvider fileProvider, ProcessingBehavior processingBehavior, FormatUtilities formatUtilities);
    [CompilerGeneratedAttribute]
public sealed virtual ProcessingBehavior get_ProcessingBehavior();
    [CompilerGeneratedAttribute]
public virtual Func`2<HttpContext, bool> get_Match();
    [CompilerGeneratedAttribute]
public virtual void set_Match(Func`2<HttpContext, bool> value);
    public virtual bool IsValidRequest(HttpContext context);
    public sealed virtual Task`1<IImageResolver> GetAsync(HttpContext context);
}
[NullableContextAttribute("1")]
public interface SixLabors.ImageSharp.Web.Providers.IImageProvider {
    public ProcessingBehavior ProcessingBehavior { get; }
    public Func`2<HttpContext, bool> Match { get; public set; }
    public abstract virtual ProcessingBehavior get_ProcessingBehavior();
    public abstract virtual Func`2<HttpContext, bool> get_Match();
    public abstract virtual void set_Match(Func`2<HttpContext, bool> value);
    public abstract virtual bool IsValidRequest(HttpContext context);
    public abstract virtual Task`1<IImageResolver> GetAsync(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Providers.PhysicalFileSystemProvider : FileProviderImageProvider {
    public PhysicalFileSystemProvider(IOptions`1<PhysicalFileSystemProviderOptions> options, IWebHostEnvironment environment, FormatUtilities formatUtilities);
    internal static string GetProviderRoot(PhysicalFileSystemProviderOptions options, string webRootPath, string contentRootPath);
    private static PhysicalFileProvider GetProvider(IOptions`1<PhysicalFileSystemProviderOptions> options, IWebHostEnvironment environment);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Providers.PhysicalFileSystemProviderOptions : object {
    [CompilerGeneratedAttribute]
private string <ProviderRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessingBehavior <ProcessingBehavior>k__BackingField;
    public string ProviderRootPath { get; public set; }
    public ProcessingBehavior ProcessingBehavior { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProviderRootPath();
    [CompilerGeneratedAttribute]
public void set_ProviderRootPath(string value);
    [CompilerGeneratedAttribute]
public ProcessingBehavior get_ProcessingBehavior();
    [CompilerGeneratedAttribute]
public void set_ProcessingBehavior(ProcessingBehavior value);
}
public enum SixLabors.ImageSharp.Web.Providers.ProcessingBehavior : Enum {
    public int value__;
    public static ProcessingBehavior CommandOnly;
    public static ProcessingBehavior All;
}
public class SixLabors.ImageSharp.Web.Providers.WebRootImageProvider : FileProviderImageProvider {
    [NullableContextAttribute("1")]
public WebRootImageProvider(IWebHostEnvironment environment, FormatUtilities formatUtilities);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.RequestAuthorizationUtilities : object {
    public static string TokenCommand;
    private static Uri FallbackBaseUri;
    private HashSet`1<string> knownCommands;
    private ImageSharpMiddlewareOptions options;
    private CommandParser commandParser;
    private CultureInfo parserCulture;
    private IRequestParser requestParser;
    private IServiceProvider serviceProvider;
    public RequestAuthorizationUtilities(IOptions`1<ImageSharpMiddlewareOptions> options, IRequestParser requestParser, IEnumerable`1<IImageWebProcessor> processors, CommandParser commandParser, IServiceProvider serviceProvider);
    private static RequestAuthorizationUtilities();
    public void StripUnknownCommands(CommandCollection commands);
    public string ComputeHMAC(string uri, CommandHandling handling);
    public string ComputeHMAC(Uri uri, CommandHandling handling);
    [NullableContextAttribute("2")]
public string ComputeHMAC(HostString host, PathString path, QueryString queryString, CommandHandling handling);
    public string ComputeHMAC(HostString host, PathString path, QueryString queryString, QueryCollection query, CommandHandling handling);
    public string ComputeHMAC(HttpContext context, CommandHandling handling);
    internal string ComputeHMAC(ImageCommandContext context);
    private static void ToComponents(Uri uri, HostString& host, PathString& path, QueryString& queryString);
    private HttpContext ToHttpContext(HostString host, PathString path, QueryString queryString, QueryCollection query);
}
public static class SixLabors.ImageSharp.Web.Resampler : object {
    [CompilerGeneratedAttribute]
private static ResamplerCommand <Bicubic>k__BackingField;
    [CompilerGeneratedAttribute]
private static ResamplerCommand <Box>k__BackingField;
    [CompilerGeneratedAttribute]
private static ResamplerCommand <CatmullRom>k__BackingField;
    [CompilerGeneratedAttribute]
private static ResamplerCommand <Hermite>k__BackingField;
    [CompilerGeneratedAttribute]
private static ResamplerCommand <Lanczos2>k__BackingField;
    [CompilerGeneratedAttribute]
private static ResamplerCommand <Lanczos3>k__BackingField;
    [CompilerGeneratedAttribute]
private static ResamplerCommand <Lanczos5>k__BackingField;
    [CompilerGeneratedAttribute]
private static ResamplerCommand <Lanczos8>k__BackingField;
    [CompilerGeneratedAttribute]
private static ResamplerCommand <MitchellNetravali>k__BackingField;
    [CompilerGeneratedAttribute]
private static ResamplerCommand <NearestNeighbor>k__BackingField;
    [CompilerGeneratedAttribute]
private static ResamplerCommand <Robidoux>k__BackingField;
    [CompilerGeneratedAttribute]
private static ResamplerCommand <RobidouxSharp>k__BackingField;
    [CompilerGeneratedAttribute]
private static ResamplerCommand <Spline>k__BackingField;
    [CompilerGeneratedAttribute]
private static ResamplerCommand <Triangle>k__BackingField;
    [CompilerGeneratedAttribute]
private static ResamplerCommand <Welch>k__BackingField;
    public static ResamplerCommand Bicubic { get; }
    public static ResamplerCommand Box { get; }
    public static ResamplerCommand CatmullRom { get; }
    public static ResamplerCommand Hermite { get; }
    public static ResamplerCommand Lanczos2 { get; }
    public static ResamplerCommand Lanczos3 { get; }
    public static ResamplerCommand Lanczos5 { get; }
    public static ResamplerCommand Lanczos8 { get; }
    public static ResamplerCommand MitchellNetravali { get; }
    public static ResamplerCommand NearestNeighbor { get; }
    public static ResamplerCommand Robidoux { get; }
    public static ResamplerCommand RobidouxSharp { get; }
    public static ResamplerCommand Spline { get; }
    public static ResamplerCommand Triangle { get; }
    public static ResamplerCommand Welch { get; }
    private static Resampler();
    [CompilerGeneratedAttribute]
public static ResamplerCommand get_Bicubic();
    [CompilerGeneratedAttribute]
public static ResamplerCommand get_Box();
    [CompilerGeneratedAttribute]
public static ResamplerCommand get_CatmullRom();
    [CompilerGeneratedAttribute]
public static ResamplerCommand get_Hermite();
    [CompilerGeneratedAttribute]
public static ResamplerCommand get_Lanczos2();
    [CompilerGeneratedAttribute]
public static ResamplerCommand get_Lanczos3();
    [CompilerGeneratedAttribute]
public static ResamplerCommand get_Lanczos5();
    [CompilerGeneratedAttribute]
public static ResamplerCommand get_Lanczos8();
    [CompilerGeneratedAttribute]
public static ResamplerCommand get_MitchellNetravali();
    [CompilerGeneratedAttribute]
public static ResamplerCommand get_NearestNeighbor();
    [CompilerGeneratedAttribute]
public static ResamplerCommand get_Robidoux();
    [CompilerGeneratedAttribute]
public static ResamplerCommand get_RobidouxSharp();
    [CompilerGeneratedAttribute]
public static ResamplerCommand get_Spline();
    [CompilerGeneratedAttribute]
public static ResamplerCommand get_Triangle();
    [CompilerGeneratedAttribute]
public static ResamplerCommand get_Welch();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class SixLabors.ImageSharp.Web.ResamplerCommand : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ResamplerCommand(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Resolvers.FileProviderImageResolver : object {
    private IFileInfo fileInfo;
    public FileProviderImageResolver(IFileInfo fileInfo);
    public sealed virtual Task`1<ImageMetadata> GetMetaDataAsync();
    public sealed virtual Task`1<Stream> OpenReadAsync();
}
[NullableContextAttribute("1")]
public interface SixLabors.ImageSharp.Web.Resolvers.IImageCacheResolver {
    public abstract virtual Task`1<ImageCacheMetadata> GetMetaDataAsync();
    public abstract virtual Task`1<Stream> OpenReadAsync();
}
[NullableContextAttribute("1")]
public interface SixLabors.ImageSharp.Web.Resolvers.IImageResolver {
    public abstract virtual Task`1<ImageMetadata> GetMetaDataAsync();
    public abstract virtual Task`1<Stream> OpenReadAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Resolvers.PhysicalFileSystemCacheResolver : object {
    private FileInfo metaFileInfo;
    private FormatUtilities formatUtilities;
    private ImageCacheMetadata metadata;
    public PhysicalFileSystemCacheResolver(FileInfo metaFileInfo, FormatUtilities formatUtilities);
    [AsyncStateMachineAttribute("SixLabors.ImageSharp.Web.Resolvers.PhysicalFileSystemCacheResolver/<GetMetaDataAsync>d__4")]
public sealed virtual Task`1<ImageCacheMetadata> GetMetaDataAsync();
    public sealed virtual Task`1<Stream> OpenReadAsync();
    private static FileStream OpenFileStream(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Synchronization.AsyncKeyLock`1 : object {
    private RefCountedConcurrentDictionary`2<TKey, AsyncLock> activeLocks;
    private ConcurrentBag`1<AsyncLock> pool;
    private int maxPoolSize;
    public AsyncKeyLock`1(int maxPoolSize);
    public Task`1<IDisposable> LockAsync(TKey key);
    public sealed virtual void Dispose();
    private AsyncLock CreateLeasedLock(TKey key);
    private void ReturnLeasedLock(AsyncLock asyncLock);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Synchronization.AsyncKeyReaderWriterLock`1 : object {
    private RefCountedConcurrentDictionary`2<TKey, AsyncReaderWriterLock> activeLocks;
    private ConcurrentBag`1<AsyncReaderWriterLock> pool;
    private int maxPoolSize;
    public AsyncKeyReaderWriterLock`1(int maxPoolSize);
    public Task`1<IDisposable> ReaderLockAsync(TKey key);
    public Task`1<IDisposable> WriterLockAsync(TKey key);
    private AsyncReaderWriterLock CreateLeasedLock(TKey key);
    private void ReturnLeasedLock(AsyncReaderWriterLock asyncLock);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Synchronization.AsyncLock : object {
    private SemaphoreSlim semaphore;
    private IDisposable releaser;
    private Task`1<IDisposable> releaserTask;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Action <OnRelease>k__BackingField;
    [NullableAttribute("2")]
public Action OnRelease { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Action get_OnRelease();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_OnRelease(Action value);
    public Task`1<IDisposable> LockAsync();
    private void Release();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("SixLabors.ImageSharp.Web.Synchronization.AsyncLock/<<LockAsync>g__AwaitThenReturn|8_0>d")]
[CompilerGeneratedAttribute]
internal static Task`1<IDisposable> <LockAsync>g__AwaitThenReturn|8_0(Task t, IDisposable r);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Synchronization.AsyncReaderWriterLock : object {
    private object stateLock;
    private IDisposable writerReleaser;
    private IDisposable readerReleaser;
    private Task`1<IDisposable> writerReleaserTask;
    private Task`1<IDisposable> readerReleaserTask;
    private Queue`1<TaskCompletionSource`1<IDisposable>> waitingWriters;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TaskCompletionSource`1<IDisposable> waitingReaders;
    private int readersWaiting;
    private int status;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Action <OnRelease>k__BackingField;
    [NullableAttribute("2")]
public Action OnRelease { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Action get_OnRelease();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_OnRelease(Action value);
    public Task`1<IDisposable> ReaderLockAsync();
    public Task`1<IDisposable> WriterLockAsync();
    private void ReaderRelease();
    private void WriterRelease();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class SixLabors.ImageSharp.Web.Synchronization.RefCountedConcurrentDictionary`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<TKey, RefCountedValue<TKey, TValue>> dictionary;
    private Func`2<TKey, TValue> valueFactory;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<TValue> valueReleaser;
    public RefCountedConcurrentDictionary`2(Func`2<TKey, TValue> valueFactory, Action`1<TValue> valueReleaser);
    public RefCountedConcurrentDictionary`2(IEqualityComparer`1<TKey> comparer, Func`2<TKey, TValue> valueFactory, Action`1<TValue> valueReleaser);
    public RefCountedConcurrentDictionary`2(int concurrencyLevel, int capacity, Func`2<TKey, TValue> valueFactory, Action`1<TValue> valueReleaser);
    public RefCountedConcurrentDictionary`2(int concurrencyLevel, int capacity, IEqualityComparer`1<TKey> comparer, Func`2<TKey, TValue> valueFactory, Action`1<TValue> valueReleaser);
    private RefCountedConcurrentDictionary`2(ConcurrentDictionary`2<TKey, RefCountedValue<TKey, TValue>> dictionary, Func`2<TKey, TValue> valueFactory, Action`1<TValue> valueReleaser);
    public TValue Get(TKey key);
    public void Release(TKey key);
    internal IEnumerable`1<ValueTuple`3<TKey, TValue, int>> DebugGetContents();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[HtmlTargetElementAttribute]
public class SixLabors.ImageSharp.Web.TagHelpers.HmacTokenTagHelper : UrlResolutionTagHelper {
    private static string SrcAttributeName;
    private ImageSharpMiddlewareOptions options;
    private RequestAuthorizationUtilities authorizationUtilities;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Src>k__BackingField;
    public int Order { get; }
    [NullableAttribute("2")]
[HtmlAttributeNameAttribute("src")]
public string Src { get; public set; }
    public HmacTokenTagHelper(IOptions`1<ImageSharpMiddlewareOptions> options, RequestAuthorizationUtilities authorizationUtilities, IUrlHelperFactory urlHelperFactory, HtmlEncoder htmlEncoder);
    public virtual int get_Order();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Src();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Src(string value);
    public virtual void Process(TagHelperContext context, TagHelperOutput output);
    private static string AddQueryString(ReadOnlySpan`1<char> uri, string hmac);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
public class SixLabors.ImageSharp.Web.TagHelpers.ImageTagHelper : UrlResolutionTagHelper {
    private static string SrcAttributeName;
    private static string AttributePrefix;
    private static string WidthAttributeName;
    private static string HeightAttributeName;
    private static string AnchorAttributeName;
    private static string ModeAttributeName;
    private static string XyAttributeName;
    private static string ColorAttributeName;
    private static string CompandAttributeName;
    private static string OrientAttributeName;
    private static string SamplerAttributeName;
    private static string AutoOrientAttributeName;
    private static string FormatAttributeName;
    private static string BgColorAttributeName;
    private static string QualityAttributeName;
    private ImageSharpMiddlewareOptions options;
    private CultureInfo parserCulture;
    private char separator;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Src>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ResizeMode> <ResizeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<AnchorPositionMode> <AnchorPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PointF> <Center>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Color> <PadColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Compand>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Orient>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ResamplerCommand> <Sampler>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AutoOrient>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FormatCommand> <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Color> <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Quality>k__BackingField;
    public int Order { get; }
    [NullableAttribute("2")]
[HtmlAttributeNameAttribute("src")]
public string Src { get; public set; }
    [HtmlAttributeNameAttribute("imagesharp-width")]
public Nullable`1<int> Width { get; public set; }
    [HtmlAttributeNameAttribute("imagesharp-height")]
public Nullable`1<int> Height { get; public set; }
    [HtmlAttributeNameAttribute("imagesharp-rmode")]
public Nullable`1<ResizeMode> ResizeMode { get; public set; }
    [HtmlAttributeNameAttribute("imagesharp-ranchor")]
public Nullable`1<AnchorPositionMode> AnchorPosition { get; public set; }
    [HtmlAttributeNameAttribute("imagesharp-rxy")]
public Nullable`1<PointF> Center { get; public set; }
    [HtmlAttributeNameAttribute("imagesharp-rcolor")]
public Nullable`1<Color> PadColor { get; public set; }
    [HtmlAttributeNameAttribute("imagesharp-compand")]
public Nullable`1<bool> Compand { get; public set; }
    [HtmlAttributeNameAttribute("imagesharp-orient")]
public Nullable`1<bool> Orient { get; public set; }
    [HtmlAttributeNameAttribute("imagesharp-rsampler")]
public Nullable`1<ResamplerCommand> Sampler { get; public set; }
    [HtmlAttributeNameAttribute("imagesharp-autoorient")]
public Nullable`1<bool> AutoOrient { get; public set; }
    [HtmlAttributeNameAttribute("imagesharp-format")]
public Nullable`1<FormatCommand> Format { get; public set; }
    [HtmlAttributeNameAttribute("imagesharp-bgcolor")]
public Nullable`1<Color> BackgroundColor { get; public set; }
    [HtmlAttributeNameAttribute("imagesharp-quality")]
public Nullable`1<int> Quality { get; public set; }
    public ImageTagHelper(IOptions`1<ImageSharpMiddlewareOptions> options, RequestAuthorizationUtilities authorizationUtilities, IUrlHelperFactory urlHelperFactory, HtmlEncoder htmlEncoder);
    public virtual int get_Order();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Src();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Src(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ResizeMode> get_ResizeMode();
    [CompilerGeneratedAttribute]
public void set_ResizeMode(Nullable`1<ResizeMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<AnchorPositionMode> get_AnchorPosition();
    [CompilerGeneratedAttribute]
public void set_AnchorPosition(Nullable`1<AnchorPositionMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PointF> get_Center();
    [CompilerGeneratedAttribute]
public void set_Center(Nullable`1<PointF> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Color> get_PadColor();
    [CompilerGeneratedAttribute]
public void set_PadColor(Nullable`1<Color> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Compand();
    [CompilerGeneratedAttribute]
public void set_Compand(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Orient();
    [CompilerGeneratedAttribute]
public void set_Orient(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ResamplerCommand> get_Sampler();
    [CompilerGeneratedAttribute]
public void set_Sampler(Nullable`1<ResamplerCommand> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AutoOrient();
    [CompilerGeneratedAttribute]
public void set_AutoOrient(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<FormatCommand> get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(Nullable`1<FormatCommand> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Color> get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(Nullable`1<Color> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Quality();
    [CompilerGeneratedAttribute]
public void set_Quality(Nullable`1<int> value);
    public virtual void Process(TagHelperContext context, TagHelperOutput output);
    protected virtual void AddProcessingCommands(TagHelperContext context, TagHelperOutput output, CommandCollection commands, CultureInfo commandCulture);
    private void AddResizeCommands(TagHelperOutput output, CommandCollection commands);
    private void AddAutoOrientCommands(CommandCollection commands);
    private void AddFormatCommands(CommandCollection commands);
    private void AddBackgroundColorCommands(CommandCollection commands);
    private void AddQualityCommands(CommandCollection commands);
    private static string AddQueryString(ReadOnlySpan`1<char> uri, CommandCollection commands);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SixLabors.ThrowHelper : object {
    [DoesNotReturnAttribute]
public static void ThrowArgumentExceptionForNotNullOrWhitespace(string value, string name);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeExceptionForMustBeLessThan(T value, T max, string name);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeExceptionForMustBeLessThanOrEqualTo(T value, T maximum, string name);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeExceptionForMustBeGreaterThan(T value, T minimum, string name);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeExceptionForMustBeGreaterThanOrEqualTo(T value, T minimum, string name);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeExceptionForMustBeBetweenOrEqualTo(T value, T minimum, T maximum, string name);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeExceptionForMustBeSizedAtLeast(int minLength, string parameterName);
    [DoesNotReturnAttribute]
public static void ThrowArgumentException(string message, string name);
    [DoesNotReturnAttribute]
public static void ThrowArgumentNullException(string name, string message);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeException(string name, string message);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
