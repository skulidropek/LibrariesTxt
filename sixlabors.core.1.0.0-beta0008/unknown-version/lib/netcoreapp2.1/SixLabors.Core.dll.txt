internal static class SixLabors.Constants : object {
    public static float Epsilon;
    private static Constants();
}
[DebuggerStepThroughAttribute]
internal static class SixLabors.DebugGuard : object {
    [ConditionalAttribute("DEBUG")]
public static void NotNull(TValue value, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void NotNullOrWhiteSpace(string value, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeLessThan(TValue value, TValue max, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeLessThanOrEqualTo(TValue value, TValue max, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeGreaterThan(TValue value, TValue min, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeGreaterThanOrEqualTo(TValue value, TValue min, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeBetweenOrEqualTo(TValue value, TValue min, TValue max, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void IsTrue(bool target, string parameterName, string message);
    [ConditionalAttribute("DEBUG")]
public static void IsFalse(bool target, string parameterName, string message);
    [ConditionalAttribute("DEBUG")]
public static void MustBeSizedAtLeast(ReadOnlySpan`1<T> source, int minLength, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void MustBeSizedAtLeast(Span`1<T> source, int minLength, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void DestinationShouldNotBeTooShort(ReadOnlySpan`1<TSource> source, Span`1<TDest> destination, string destinationParamName);
    [ConditionalAttribute("DEBUG")]
public static void DestinationShouldNotBeTooShort(Span`1<TSource> source, Span`1<TDest> destination, string destinationParamName);
    private static void ThrowArgumentException(string message, string parameterName);
    private static void ThrowArgumentOutOfRangeException(string parameterName, string message);
    private static void ThrowArgumentNullException(string parameterName);
}
public static class SixLabors.GeometryUtilities : object {
    public static float DegreeToRadian(float degree);
    public static float RadianToDegree(float radian);
}
[DebuggerStepThroughAttribute]
internal static class SixLabors.Guard : object {
    public static void NotNull(TValue value, string parameterName);
    public static void NotNullOrWhiteSpace(string value, string parameterName);
    public static void MustBeLessThan(TValue value, TValue max, string parameterName);
    public static void MustBeLessThanOrEqualTo(TValue value, TValue max, string parameterName);
    public static void MustBeGreaterThan(TValue value, TValue min, string parameterName);
    public static void MustBeGreaterThanOrEqualTo(TValue value, TValue min, string parameterName);
    public static void MustBeBetweenOrEqualTo(TValue value, TValue min, TValue max, string parameterName);
    public static void IsTrue(bool target, string parameterName, string message);
    public static void IsFalse(bool target, string parameterName, string message);
    public static void MustBeSizedAtLeast(ReadOnlySpan`1<T> source, int minLength, string parameterName);
    public static void MustBeSizedAtLeast(Span`1<T> source, int minLength, string parameterName);
    public static void DestinationShouldNotBeTooShort(ReadOnlySpan`1<TSource> source, Span`1<TDest> destination, string destinationParamName);
    public static void DestinationShouldNotBeTooShort(Span`1<TSource> source, Span`1<TDest> destination, string destinationParamName);
    private static void ThrowArgumentException(string message, string parameterName);
    private static void ThrowArgumentOutOfRangeException(string parameterName, string message);
    private static void ThrowArgumentNullException(string parameterName);
}
public enum SixLabors.Memory.AllocationOptions : Enum {
    public int value__;
    public static AllocationOptions None;
    public static AllocationOptions Clean;
}
public class SixLabors.Memory.ArrayPoolMemoryAllocator : MemoryAllocator {
    internal static int DefaultMaxPooledBufferSizeInBytes;
    private static int DefaultBufferSelectorThresholdInBytes;
    private static int DefaultLargePoolBucketCount;
    private static int DefaultNormalPoolBucketCount;
    private int maxArraysPerBucketNormalPool;
    private int maxArraysPerBucketLargePool;
    private ArrayPool`1<byte> normalArrayPool;
    private ArrayPool`1<byte> largeArrayPool;
    [CompilerGeneratedAttribute]
private int <MaxPoolSizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PoolSelectorThresholdInBytes>k__BackingField;
    public int MaxPoolSizeInBytes { get; }
    public int PoolSelectorThresholdInBytes { get; }
    public ArrayPoolMemoryAllocator(int maxPoolSizeInBytes);
    public ArrayPoolMemoryAllocator(int maxPoolSizeInBytes, int poolSelectorThresholdInBytes);
    public ArrayPoolMemoryAllocator(int maxPoolSizeInBytes, int poolSelectorThresholdInBytes, int maxArraysPerBucketLargePool, int maxArraysPerBucketNormalPool);
    public static ArrayPoolMemoryAllocator CreateDefault();
    public static ArrayPoolMemoryAllocator CreateWithMinimalPooling();
    public static ArrayPoolMemoryAllocator CreateWithModeratePooling();
    public static ArrayPoolMemoryAllocator CreateWithAggressivePooling();
    [CompilerGeneratedAttribute]
public int get_MaxPoolSizeInBytes();
    [CompilerGeneratedAttribute]
public int get_PoolSelectorThresholdInBytes();
    public virtual void ReleaseRetainedResources();
    public virtual IMemoryOwner`1<T> Allocate(int length, AllocationOptions options);
    public virtual IManagedByteBuffer AllocateManagedByteBuffer(int length, AllocationOptions options);
    private static int GetLargeBufferThresholdInBytes(int maxPoolSizeInBytes);
    private ArrayPool`1<byte> GetArrayPool(int bufferSizeInBytes);
    private void InitArrayPools();
}
public interface SixLabors.Memory.IManagedByteBuffer {
    public Byte[] Array { get; }
    public abstract virtual Byte[] get_Array();
}
internal class SixLabors.Memory.Internals.BasicArrayBuffer`1 : ManagedBufferBase`1<T> {
    [CompilerGeneratedAttribute]
private T[] <Array>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public T[] Array { get; }
    public int Length { get; }
    public BasicArrayBuffer`1(T[] array, int length);
    public BasicArrayBuffer`1(T[] array);
    [CompilerGeneratedAttribute]
public sealed virtual T[] get_Array();
    [CompilerGeneratedAttribute]
public int get_Length();
    public virtual Span`1<T> GetSpan();
    protected virtual void Dispose(bool disposing);
    protected virtual object GetPinnableObject();
}
internal class SixLabors.Memory.Internals.BasicByteBuffer : BasicArrayBuffer`1<byte> {
    internal BasicByteBuffer(Byte[] array);
}
internal abstract class SixLabors.Memory.Internals.ManagedBufferBase`1 : MemoryManager`1<T> {
    private GCHandle pinHandle;
    public virtual MemoryHandle Pin(int elementIndex);
    public virtual void Unpin();
    protected abstract virtual object GetPinnableObject();
}
public abstract class SixLabors.Memory.MemoryAllocator : object {
    public abstract virtual IMemoryOwner`1<T> Allocate(int length, AllocationOptions options);
    public abstract virtual IManagedByteBuffer AllocateManagedByteBuffer(int length, AllocationOptions options);
    public virtual void ReleaseRetainedResources();
}
public class SixLabors.Memory.SimpleGcMemoryAllocator : MemoryAllocator {
    public virtual IMemoryOwner`1<T> Allocate(int length, AllocationOptions options);
    public virtual IManagedByteBuffer AllocateManagedByteBuffer(int length, AllocationOptions options);
}
public static class SixLabors.Primitives.Matrix3x2Extensions : object {
    public static Matrix3x2 CreateTranslation(PointF position);
    public static Matrix3x2 CreateScale(float xScale, float yScale, PointF centerPoint);
    public static Matrix3x2 CreateScale(SizeF scales);
    public static Matrix3x2 CreateScale(SizeF scales, PointF centerPoint);
    public static Matrix3x2 CreateScale(float scale, PointF centerPoint);
    public static Matrix3x2 CreateSkewDegrees(float degreesX, float degreesY);
    public static Matrix3x2 CreateSkew(float radiansX, float radiansY, PointF centerPoint);
    public static Matrix3x2 CreateSkewDegrees(float degreesX, float degreesY, PointF centerPoint);
    public static Matrix3x2 CreateRotationDegrees(float degrees);
    public static Matrix3x2 CreateRotation(float radians, PointF centerPoint);
    public static Matrix3x2 CreateRotationDegrees(float degrees, PointF centerPoint);
}
public class SixLabors.Primitives.Point : ValueType {
    public static Point Empty;
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    public int X { get; public set; }
    public int Y { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool IsEmpty { get; }
    public Point(int value);
    public Point(int x, int y);
    public Point(Size size);
    private static Point();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public void set_X(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(int value);
    public bool get_IsEmpty();
    public static PointF op_Implicit(Point point);
    public static Vector2 op_Implicit(Point point);
    public static Size op_Explicit(Point point);
    public static Point op_UnaryNegation(Point value);
    public static Point op_Addition(Point point, Size size);
    public static Point op_Subtraction(Point point, Size size);
    public static Point op_Multiply(int left, Point right);
    public static Point op_Multiply(Point left, int right);
    public static Point op_Division(Point left, int right);
    public static bool op_Equality(Point left, Point right);
    public static bool op_Inequality(Point left, Point right);
    public static Point Add(Point point, Size size);
    public static Point Multiply(Point point, int value);
    public static Point Subtract(Point point, Size size);
    public static Point Ceiling(PointF point);
    public static Point Round(PointF point);
    public static Point Round(Vector2 vector);
    public static Point Truncate(PointF point);
    public static Point Transform(Point point, Matrix3x2 matrix);
    public void Deconstruct(Int32& x, Int32& y);
    public void Offset(int dx, int dy);
    public void Offset(Point point);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Point other);
    private static short HighInt16(int n);
    private static short LowInt16(int n);
}
public class SixLabors.Primitives.PointF : ValueType {
    public static PointF Empty;
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    public float X { get; public set; }
    public float Y { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool IsEmpty { get; }
    public PointF(float x, float y);
    public PointF(SizeF size);
    private static PointF();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
    public bool get_IsEmpty();
    public static PointF op_Implicit(Vector2 vector);
    public static Vector2 op_Implicit(PointF point);
    public static Point op_Explicit(PointF point);
    public static PointF op_UnaryNegation(PointF value);
    public static PointF op_Addition(PointF point, SizeF size);
    public static PointF op_Subtraction(PointF point, PointF size);
    public static PointF op_Addition(PointF point, PointF size);
    public static PointF op_Subtraction(PointF point, SizeF size);
    public static PointF op_Multiply(float left, PointF right);
    public static PointF op_Multiply(PointF left, float right);
    public static PointF op_Division(PointF left, float right);
    public static bool op_Equality(PointF left, PointF right);
    public static bool op_Inequality(PointF left, PointF right);
    public static PointF Add(PointF point, SizeF size);
    public static PointF Add(PointF point, PointF pointb);
    public static PointF Subtract(PointF point, SizeF size);
    public static PointF Subtract(PointF point, PointF pointb);
    public static PointF Multiply(PointF point, float right);
    public static PointF Transform(PointF point, Matrix3x2 matrix);
    public void Deconstruct(Single& x, Single& y);
    public void Offset(float dx, float dy);
    public void Offset(PointF point);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(PointF other);
}
public class SixLabors.Primitives.Rectangle : ValueType {
    public static Rectangle Empty;
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    [EditorBrowsableAttribute("1")]
public Point Location { get; public set; }
    [EditorBrowsableAttribute("1")]
public Size Size { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool IsEmpty { get; }
    public int Top { get; }
    public int Right { get; }
    public int Bottom { get; }
    public int Left { get; }
    public Rectangle(int x, int y, int width, int height);
    public Rectangle(Point point, Size size);
    private static Rectangle();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public void set_X(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    public Point get_Location();
    public void set_Location(Point value);
    public Size get_Size();
    public void set_Size(Size value);
    public bool get_IsEmpty();
    public int get_Top();
    public int get_Right();
    public int get_Bottom();
    public int get_Left();
    public static RectangleF op_Implicit(Rectangle rectangle);
    public static Vector4 op_Implicit(Rectangle rectangle);
    public static bool op_Equality(Rectangle left, Rectangle right);
    public static bool op_Inequality(Rectangle left, Rectangle right);
    public static Rectangle FromLTRB(int left, int top, int right, int bottom);
    public static Point Center(Rectangle rectangle);
    public static Rectangle Intersect(Rectangle a, Rectangle b);
    public static Rectangle Inflate(Rectangle rectangle, int x, int y);
    public static Rectangle Ceiling(RectangleF rectangle);
    public static RectangleF Transform(Rectangle rectangle, Matrix3x2 matrix);
    public static Rectangle Truncate(RectangleF rectangle);
    public static Rectangle Round(RectangleF rectangle);
    public static Rectangle Union(Rectangle a, Rectangle b);
    public void Deconstruct(Int32& x, Int32& y, Int32& width, Int32& height);
    public void Intersect(Rectangle rectangle);
    public void Inflate(int width, int height);
    public void Inflate(Size size);
    public bool Contains(int x, int y);
    public bool Contains(Point point);
    public bool Contains(Rectangle rectangle);
    public bool IntersectsWith(Rectangle rectangle);
    public void Offset(Point point);
    public void Offset(int dx, int dy);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Rectangle other);
}
public class SixLabors.Primitives.RectangleF : ValueType {
    public static RectangleF Empty;
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    public float X { get; public set; }
    public float Y { get; public set; }
    public float Width { get; public set; }
    public float Height { get; public set; }
    [EditorBrowsableAttribute("1")]
public PointF Location { get; public set; }
    [EditorBrowsableAttribute("1")]
public SizeF Size { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool IsEmpty { get; }
    public float Top { get; }
    public float Right { get; }
    public float Bottom { get; }
    public float Left { get; }
    public RectangleF(float x, float y, float width, float height);
    public RectangleF(PointF point, SizeF size);
    private static RectangleF();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(float value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(float value);
    public PointF get_Location();
    public void set_Location(PointF value);
    public SizeF get_Size();
    public void set_Size(SizeF value);
    public bool get_IsEmpty();
    public float get_Top();
    public float get_Right();
    public float get_Bottom();
    public float get_Left();
    public static Rectangle op_Explicit(RectangleF rectangle);
    public static bool op_Equality(RectangleF left, RectangleF right);
    public static bool op_Inequality(RectangleF left, RectangleF right);
    public static RectangleF FromLTRB(float left, float top, float right, float bottom);
    public static PointF Center(RectangleF rectangle);
    public static RectangleF Intersect(RectangleF a, RectangleF b);
    public static RectangleF Inflate(RectangleF rectangle, float x, float y);
    public static RectangleF Transform(RectangleF rectangle, Matrix3x2 matrix);
    public static RectangleF Union(RectangleF a, RectangleF b);
    public void Deconstruct(Single& x, Single& y, Single& width, Single& height);
    public void Intersect(RectangleF rectangle);
    public void Inflate(float width, float height);
    public void Inflate(SizeF size);
    public bool Contains(float x, float y);
    public bool Contains(PointF point);
    public bool Contains(RectangleF rectangle);
    public bool IntersectsWith(RectangleF rectangle);
    public void Offset(PointF point);
    public void Offset(float dx, float dy);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RectangleF other);
}
public class SixLabors.Primitives.Size : ValueType {
    public static Size Empty;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public int Width { get; public set; }
    public int Height { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool IsEmpty { get; }
    public Size(int value);
    public Size(int width, int height);
    public Size(Size size);
    public Size(Point point);
    private static Size();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    public bool get_IsEmpty();
    public static SizeF op_Implicit(Size size);
    public static Point op_Explicit(Size size);
    public static Size op_Addition(Size left, Size right);
    public static Size op_Subtraction(Size left, Size right);
    public static Size op_Multiply(int left, Size right);
    public static Size op_Multiply(Size left, int right);
    public static Size op_Division(Size left, int right);
    public static SizeF op_Multiply(float left, Size right);
    public static SizeF op_Multiply(Size left, float right);
    public static SizeF op_Division(Size left, float right);
    public static bool op_Equality(Size left, Size right);
    public static bool op_Inequality(Size left, Size right);
    public static Size Add(Size left, Size right);
    public static Size Subtract(Size left, Size right);
    public static Size Ceiling(SizeF size);
    public static Size Round(SizeF size);
    public static SizeF Transform(Size size, Matrix3x2 matrix);
    public static Size Truncate(SizeF size);
    public void Deconstruct(Int32& width, Int32& height);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Size other);
    private static Size Multiply(Size size, int multiplier);
    private static SizeF Multiply(Size size, float multiplier);
}
public class SixLabors.Primitives.SizeF : ValueType {
    public static SizeF Empty;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    public float Width { get; public set; }
    public float Height { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool IsEmpty { get; }
    public SizeF(float width, float height);
    public SizeF(SizeF size);
    public SizeF(PointF point);
    private static SizeF();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(float value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(float value);
    public bool get_IsEmpty();
    public static Vector2 op_Implicit(SizeF point);
    public static Size op_Explicit(SizeF size);
    public static PointF op_Explicit(SizeF size);
    public static SizeF op_Addition(SizeF left, SizeF right);
    public static SizeF op_Subtraction(SizeF left, SizeF right);
    public static SizeF op_Multiply(float left, SizeF right);
    public static SizeF op_Multiply(SizeF left, float right);
    public static SizeF op_Division(SizeF left, float right);
    public static bool op_Equality(SizeF left, SizeF right);
    public static bool op_Inequality(SizeF left, SizeF right);
    public static SizeF Add(SizeF left, SizeF right);
    public static SizeF Subtract(SizeF left, SizeF right);
    public static SizeF Transform(SizeF size, Matrix3x2 matrix);
    public void Deconstruct(Single& width, Single& height);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SizeF other);
    private static SizeF Multiply(SizeF size, float multiplier);
}
