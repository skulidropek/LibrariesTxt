[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Skender.Stock.Indicators.AdlResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <MoneyFlowMultiplier>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <MoneyFlowVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Adl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <AdlSma>k__BackingField;
    public Nullable`1<double> MoneyFlowMultiplier { get; public set; }
    public Nullable`1<double> MoneyFlowVolume { get; public set; }
    public double Adl { get; public set; }
    public Nullable`1<double> AdlSma { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public AdlResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_MoneyFlowMultiplier();
    [CompilerGeneratedAttribute]
public void set_MoneyFlowMultiplier(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_MoneyFlowVolume();
    [CompilerGeneratedAttribute]
public void set_MoneyFlowVolume(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public double get_Adl();
    [CompilerGeneratedAttribute]
public void set_Adl(double value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_AdlSma();
    [CompilerGeneratedAttribute]
public void set_AdlSma(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.AdxResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Pdi>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Mdi>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Adx>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Adxr>k__BackingField;
    public Nullable`1<double> Pdi { get; public set; }
    public Nullable`1<double> Mdi { get; public set; }
    public Nullable`1<double> Adx { get; public set; }
    public Nullable`1<double> Adxr { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public AdxResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Pdi();
    [CompilerGeneratedAttribute]
public void set_Pdi(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Mdi();
    [CompilerGeneratedAttribute]
public void set_Mdi(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Adx();
    [CompilerGeneratedAttribute]
public void set_Adx(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Adxr();
    [CompilerGeneratedAttribute]
public void set_Adxr(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.AlligatorResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Jaw>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Teeth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Lips>k__BackingField;
    public Nullable`1<double> Jaw { get; public set; }
    public Nullable`1<double> Teeth { get; public set; }
    public Nullable`1<double> Lips { get; public set; }
    public AlligatorResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Jaw();
    [CompilerGeneratedAttribute]
public void set_Jaw(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Teeth();
    [CompilerGeneratedAttribute]
public void set_Teeth(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Lips();
    [CompilerGeneratedAttribute]
public void set_Lips(Nullable`1<double> value);
}
public class Skender.Stock.Indicators.AlmaResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Alma>k__BackingField;
    public Nullable`1<double> Alma { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public AlmaResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Alma();
    [CompilerGeneratedAttribute]
public void set_Alma(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.AroonResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <AroonUp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <AroonDown>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Oscillator>k__BackingField;
    public Nullable`1<double> AroonUp { get; public set; }
    public Nullable`1<double> AroonDown { get; public set; }
    public Nullable`1<double> Oscillator { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public AroonResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_AroonUp();
    [CompilerGeneratedAttribute]
public void set_AroonUp(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_AroonDown();
    [CompilerGeneratedAttribute]
public void set_AroonDown(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Oscillator();
    [CompilerGeneratedAttribute]
public void set_Oscillator(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.AtrResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Tr>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Atr>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Atrp>k__BackingField;
    public Nullable`1<double> Tr { get; public set; }
    public Nullable`1<double> Atr { get; public set; }
    public Nullable`1<double> Atrp { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public AtrResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Tr();
    [CompilerGeneratedAttribute]
public void set_Tr(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Atr();
    [CompilerGeneratedAttribute]
public void set_Atr(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Atrp();
    [CompilerGeneratedAttribute]
public void set_Atrp(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.AtrStopResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <AtrStop>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <BuyStop>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <SellStop>k__BackingField;
    public Nullable`1<decimal> AtrStop { get; public set; }
    public Nullable`1<decimal> BuyStop { get; public set; }
    public Nullable`1<decimal> SellStop { get; public set; }
    public AtrStopResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_AtrStop();
    [CompilerGeneratedAttribute]
public void set_AtrStop(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_BuyStop();
    [CompilerGeneratedAttribute]
public void set_BuyStop(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_SellStop();
    [CompilerGeneratedAttribute]
public void set_SellStop(Nullable`1<decimal> value);
}
public class Skender.Stock.Indicators.AwesomeResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Oscillator>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Normalized>k__BackingField;
    public Nullable`1<double> Oscillator { get; public set; }
    public Nullable`1<double> Normalized { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public AwesomeResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Oscillator();
    [CompilerGeneratedAttribute]
public void set_Oscillator(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Normalized();
    [CompilerGeneratedAttribute]
public void set_Normalized(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.BasicData : object {
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public DateTime Date { get; public set; }
    public double Value { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.BetaResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Beta>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <BetaUp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <BetaDown>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Ratio>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Convexity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <ReturnsEval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <ReturnsMrkt>k__BackingField;
    public Nullable`1<double> Beta { get; public set; }
    public Nullable`1<double> BetaUp { get; public set; }
    public Nullable`1<double> BetaDown { get; public set; }
    public Nullable`1<double> Ratio { get; public set; }
    public Nullable`1<double> Convexity { get; public set; }
    public Nullable`1<double> ReturnsEval { get; public set; }
    public Nullable`1<double> ReturnsMrkt { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public BetaResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Beta();
    [CompilerGeneratedAttribute]
public void set_Beta(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_BetaUp();
    [CompilerGeneratedAttribute]
public void set_BetaUp(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_BetaDown();
    [CompilerGeneratedAttribute]
public void set_BetaDown(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Ratio();
    [CompilerGeneratedAttribute]
public void set_Ratio(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Convexity();
    [CompilerGeneratedAttribute]
public void set_Convexity(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_ReturnsEval();
    [CompilerGeneratedAttribute]
public void set_ReturnsEval(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_ReturnsMrkt();
    [CompilerGeneratedAttribute]
public void set_ReturnsMrkt(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public enum Skender.Stock.Indicators.BetaType : Enum {
    public int value__;
    public static BetaType Standard;
    public static BetaType Up;
    public static BetaType Down;
    public static BetaType All;
}
public class Skender.Stock.Indicators.BollingerBandsResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Sma>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <UpperBand>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <LowerBand>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <PercentB>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <ZScore>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Width>k__BackingField;
    public Nullable`1<double> Sma { get; public set; }
    public Nullable`1<double> UpperBand { get; public set; }
    public Nullable`1<double> LowerBand { get; public set; }
    public Nullable`1<double> PercentB { get; public set; }
    public Nullable`1<double> ZScore { get; public set; }
    public Nullable`1<double> Width { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public BollingerBandsResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Sma();
    [CompilerGeneratedAttribute]
public void set_Sma(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_UpperBand();
    [CompilerGeneratedAttribute]
public void set_UpperBand(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_LowerBand();
    [CompilerGeneratedAttribute]
public void set_LowerBand(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_PercentB();
    [CompilerGeneratedAttribute]
public void set_PercentB(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_ZScore();
    [CompilerGeneratedAttribute]
public void set_ZScore(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.BopResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Bop>k__BackingField;
    public Nullable`1<double> Bop { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public BopResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Bop();
    [CompilerGeneratedAttribute]
public void set_Bop(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public enum Skender.Stock.Indicators.CandlePart : Enum {
    public int value__;
    public static CandlePart Open;
    public static CandlePart High;
    public static CandlePart Low;
    public static CandlePart Close;
    public static CandlePart Volume;
    public static CandlePart HL2;
    public static CandlePart HLC3;
    public static CandlePart OC2;
    public static CandlePart OHL3;
    public static CandlePart OHLC4;
}
public class Skender.Stock.Indicators.CandleProperties : Quote {
    public Nullable`1<decimal> Size { get; }
    public Nullable`1<decimal> Body { get; }
    public Nullable`1<decimal> UpperWick { get; }
    public Nullable`1<decimal> LowerWick { get; }
    public Nullable`1<double> BodyPct { get; }
    public Nullable`1<double> UpperWickPct { get; }
    public Nullable`1<double> LowerWickPct { get; }
    public bool IsBullish { get; }
    public bool IsBearish { get; }
    public Nullable`1<decimal> get_Size();
    public Nullable`1<decimal> get_Body();
    public Nullable`1<decimal> get_UpperWick();
    public Nullable`1<decimal> get_LowerWick();
    public Nullable`1<double> get_BodyPct();
    public Nullable`1<double> get_UpperWickPct();
    public Nullable`1<double> get_LowerWickPct();
    public bool get_IsBullish();
    public bool get_IsBearish();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Skender.Stock.Indicators.CandleResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Price>k__BackingField;
    [CompilerGeneratedAttribute]
private Match <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private CandleProperties <Candle>k__BackingField;
    public Nullable`1<decimal> Price { get; public set; }
    public Match Match { get; public set; }
    public CandleProperties Candle { get; public set; }
    public CandleResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Price();
    [CompilerGeneratedAttribute]
public void set_Price(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Match get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(Match value);
    [CompilerGeneratedAttribute]
public CandleProperties get_Candle();
    [CompilerGeneratedAttribute]
public void set_Candle(CandleProperties value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Skender.Stock.Indicators.Candlesticks : object {
    [ExtensionAttribute]
public static IEnumerable`1<CandleResult> Condense(IEnumerable`1<CandleResult> candleResults);
    [ExtensionAttribute]
public static CandleProperties ToCandle(TQuote quote);
    [ExtensionAttribute]
public static IEnumerable`1<CandleProperties> ToCandles(IEnumerable`1<TQuote> quotes);
    [ExtensionAttribute]
internal static List`1<CandleResult> ToCandleResults(IEnumerable`1<TQuote> quotes);
}
public class Skender.Stock.Indicators.CciResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Cci>k__BackingField;
    public Nullable`1<double> Cci { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public CciResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Cci();
    [CompilerGeneratedAttribute]
public void set_Cci(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.ChaikinOscResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <MoneyFlowMultiplier>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <MoneyFlowVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Adl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Oscillator>k__BackingField;
    public Nullable`1<double> MoneyFlowMultiplier { get; public set; }
    public Nullable`1<double> MoneyFlowVolume { get; public set; }
    public Nullable`1<double> Adl { get; public set; }
    public Nullable`1<double> Oscillator { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public ChaikinOscResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_MoneyFlowMultiplier();
    [CompilerGeneratedAttribute]
public void set_MoneyFlowMultiplier(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_MoneyFlowVolume();
    [CompilerGeneratedAttribute]
public void set_MoneyFlowVolume(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Adl();
    [CompilerGeneratedAttribute]
public void set_Adl(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Oscillator();
    [CompilerGeneratedAttribute]
public void set_Oscillator(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public abstract class Skender.Stock.Indicators.ChainProvider : TupleObserver {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IObserver`1<ValueTuple`2<DateTime, double>>> observers;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<DateTime, double>> <ProtectedChain>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OverflowCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Warmup>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IEnumerable`1<ValueTuple`2<DateTime, double>> Output { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<ValueTuple`2<DateTime, double>> ProtectedChain { get; internal set; }
    private int OverflowCount { get; private set; }
    private bool Warmup { get; private set; }
    internal IEnumerable`1<ValueTuple`2<DateTime, double>> get_Output();
    [CompilerGeneratedAttribute]
internal List`1<ValueTuple`2<DateTime, double>> get_ProtectedChain();
    [CompilerGeneratedAttribute]
internal void set_ProtectedChain(List`1<ValueTuple`2<DateTime, double>> value);
    [CompilerGeneratedAttribute]
private int get_OverflowCount();
    [CompilerGeneratedAttribute]
private void set_OverflowCount(int value);
    [CompilerGeneratedAttribute]
private bool get_Warmup();
    [CompilerGeneratedAttribute]
private void set_Warmup(bool value);
    [NullableContextAttribute("1")]
public sealed virtual IDisposable Subscribe(IObserver`1<ValueTuple`2<DateTime, double>> observer);
    public void EndTransmission();
    [NullableContextAttribute("1")]
internal void SendToChain(TResult result);
    [NullableContextAttribute("1")]
internal void SendToChain(IEnumerable`1<TResult> results);
    private void NotifyObservers(ValueTuple`2<DateTime, double> tuple);
}
public class Skender.Stock.Indicators.ChandelierResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <ChandelierExit>k__BackingField;
    public Nullable`1<double> ChandelierExit { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public ChandelierResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_ChandelierExit();
    [CompilerGeneratedAttribute]
public void set_ChandelierExit(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public enum Skender.Stock.Indicators.ChandelierType : Enum {
    public int value__;
    public static ChandelierType Long;
    public static ChandelierType Short;
}
public class Skender.Stock.Indicators.ChopResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Chop>k__BackingField;
    public Nullable`1<double> Chop { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public ChopResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Chop();
    [CompilerGeneratedAttribute]
public void set_Chop(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.CmfResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <MoneyFlowMultiplier>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <MoneyFlowVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Cmf>k__BackingField;
    public Nullable`1<double> MoneyFlowMultiplier { get; public set; }
    public Nullable`1<double> MoneyFlowVolume { get; public set; }
    public Nullable`1<double> Cmf { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public CmfResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_MoneyFlowMultiplier();
    [CompilerGeneratedAttribute]
public void set_MoneyFlowMultiplier(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_MoneyFlowVolume();
    [CompilerGeneratedAttribute]
public void set_MoneyFlowVolume(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Cmf();
    [CompilerGeneratedAttribute]
public void set_Cmf(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.CmoResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Cmo>k__BackingField;
    public Nullable`1<double> Cmo { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public CmoResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Cmo();
    [CompilerGeneratedAttribute]
public void set_Cmo(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.ConnorsRsiResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Rsi>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <RsiStreak>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <PercentRank>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <ConnorsRsi>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Streak>k__BackingField;
    public Nullable`1<double> Rsi { get; public set; }
    public Nullable`1<double> RsiStreak { get; public set; }
    public Nullable`1<double> PercentRank { get; public set; }
    public Nullable`1<double> ConnorsRsi { get; public set; }
    internal int Streak { get; internal set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public ConnorsRsiResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Rsi();
    [CompilerGeneratedAttribute]
public void set_Rsi(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_RsiStreak();
    [CompilerGeneratedAttribute]
public void set_RsiStreak(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_PercentRank();
    [CompilerGeneratedAttribute]
public void set_PercentRank(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_ConnorsRsi();
    [CompilerGeneratedAttribute]
public void set_ConnorsRsi(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
internal int get_Streak();
    [CompilerGeneratedAttribute]
internal void set_Streak(int value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.CorrResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <VarianceA>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <VarianceB>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Covariance>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Correlation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <RSquared>k__BackingField;
    public Nullable`1<double> VarianceA { get; public set; }
    public Nullable`1<double> VarianceB { get; public set; }
    public Nullable`1<double> Covariance { get; public set; }
    public Nullable`1<double> Correlation { get; public set; }
    public Nullable`1<double> RSquared { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public CorrResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_VarianceA();
    [CompilerGeneratedAttribute]
public void set_VarianceA(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_VarianceB();
    [CompilerGeneratedAttribute]
public void set_VarianceB(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Covariance();
    [CompilerGeneratedAttribute]
public void set_Covariance(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Correlation();
    [CompilerGeneratedAttribute]
public void set_Correlation(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_RSquared();
    [CompilerGeneratedAttribute]
public void set_RSquared(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.DemaResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Dema>k__BackingField;
    public Nullable`1<double> Dema { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public DemaResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Dema();
    [CompilerGeneratedAttribute]
public void set_Dema(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.DonchianResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <UpperBand>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Centerline>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <LowerBand>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Width>k__BackingField;
    public Nullable`1<decimal> UpperBand { get; public set; }
    public Nullable`1<decimal> Centerline { get; public set; }
    public Nullable`1<decimal> LowerBand { get; public set; }
    public Nullable`1<decimal> Width { get; public set; }
    public DonchianResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_UpperBand();
    [CompilerGeneratedAttribute]
public void set_UpperBand(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Centerline();
    [CompilerGeneratedAttribute]
public void set_Centerline(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_LowerBand();
    [CompilerGeneratedAttribute]
public void set_LowerBand(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(Nullable`1<decimal> value);
}
public class Skender.Stock.Indicators.DpoResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Sma>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Dpo>k__BackingField;
    public Nullable`1<double> Sma { get; public set; }
    public Nullable`1<double> Dpo { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public DpoResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Sma();
    [CompilerGeneratedAttribute]
public void set_Sma(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Dpo();
    [CompilerGeneratedAttribute]
public void set_Dpo(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.DynamicResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Dynamic>k__BackingField;
    public Nullable`1<double> Dynamic { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public DynamicResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Dynamic();
    [CompilerGeneratedAttribute]
public void set_Dynamic(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.ElderRayResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Ema>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <BullPower>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <BearPower>k__BackingField;
    public Nullable`1<double> Ema { get; public set; }
    public Nullable`1<double> BullPower { get; public set; }
    public Nullable`1<double> BearPower { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public ElderRayResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Ema();
    [CompilerGeneratedAttribute]
public void set_Ema(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_BullPower();
    [CompilerGeneratedAttribute]
public void set_BullPower(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_BearPower();
    [CompilerGeneratedAttribute]
public void set_BearPower(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Skender.Stock.Indicators.EmaObserver : ChainProvider {
    [CompilerGeneratedAttribute]
private List`1<EmaResult> <ProtectedResults>k__BackingField;
    [CompilerGeneratedAttribute]
private double <WarmupValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LookbackPeriods>k__BackingField;
    [CompilerGeneratedAttribute]
private double <K>k__BackingField;
    public IEnumerable`1<EmaResult> Results { get; }
    internal List`1<EmaResult> ProtectedResults { get; internal set; }
    private double WarmupValue { get; private set; }
    private int LookbackPeriods { get; private set; }
    private double K { get; private set; }
    public EmaObserver(TupleProvider provider, int lookbackPeriods);
    public IEnumerable`1<EmaResult> get_Results();
    [CompilerGeneratedAttribute]
internal List`1<EmaResult> get_ProtectedResults();
    [CompilerGeneratedAttribute]
internal void set_ProtectedResults(List`1<EmaResult> value);
    [CompilerGeneratedAttribute]
private double get_WarmupValue();
    [CompilerGeneratedAttribute]
private void set_WarmupValue(double value);
    [CompilerGeneratedAttribute]
private int get_LookbackPeriods();
    [CompilerGeneratedAttribute]
private void set_LookbackPeriods(int value);
    [CompilerGeneratedAttribute]
private double get_K();
    [CompilerGeneratedAttribute]
private void set_K(double value);
    internal static void Validate(int lookbackPeriods);
    internal static double Increment(double newValue, double lastEma, double k);
    [NullableContextAttribute("0")]
public virtual void OnNext(ValueTuple`2<DateTime, double> value);
    [NullableContextAttribute("0")]
internal void Add(ValueTuple`2<DateTime, double> tuple);
    private void Initialize();
}
public class Skender.Stock.Indicators.EmaResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Ema>k__BackingField;
    public Nullable`1<double> Ema { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public EmaResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Ema();
    [CompilerGeneratedAttribute]
public void set_Ema(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public enum Skender.Stock.Indicators.EndType : Enum {
    public int value__;
    public static EndType Close;
    public static EndType HighLow;
}
public class Skender.Stock.Indicators.EpmaResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Epma>k__BackingField;
    public Nullable`1<double> Epma { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public EpmaResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Epma();
    [CompilerGeneratedAttribute]
public void set_Epma(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.FcbResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <UpperBand>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <LowerBand>k__BackingField;
    public Nullable`1<decimal> UpperBand { get; public set; }
    public Nullable`1<decimal> LowerBand { get; public set; }
    public FcbResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_UpperBand();
    [CompilerGeneratedAttribute]
public void set_UpperBand(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_LowerBand();
    [CompilerGeneratedAttribute]
public void set_LowerBand(Nullable`1<decimal> value);
}
public class Skender.Stock.Indicators.FisherTransformResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Fisher>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Trigger>k__BackingField;
    public Nullable`1<double> Fisher { get; public set; }
    public Nullable`1<double> Trigger { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public FisherTransformResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Fisher();
    [CompilerGeneratedAttribute]
public void set_Fisher(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Trigger();
    [CompilerGeneratedAttribute]
public void set_Trigger(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.ForceIndexResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <ForceIndex>k__BackingField;
    public Nullable`1<double> ForceIndex { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public ForceIndexResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_ForceIndex();
    [CompilerGeneratedAttribute]
public void set_ForceIndex(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.FractalResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <FractalBear>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <FractalBull>k__BackingField;
    public Nullable`1<decimal> FractalBear { get; public set; }
    public Nullable`1<decimal> FractalBull { get; public set; }
    public FractalResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_FractalBear();
    [CompilerGeneratedAttribute]
public void set_FractalBear(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_FractalBull();
    [CompilerGeneratedAttribute]
public void set_FractalBull(Nullable`1<decimal> value);
}
public class Skender.Stock.Indicators.GatorResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Upper>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Lower>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UpperIsExpanding>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <LowerIsExpanding>k__BackingField;
    public Nullable`1<double> Upper { get; public set; }
    public Nullable`1<double> Lower { get; public set; }
    public Nullable`1<bool> UpperIsExpanding { get; public set; }
    public Nullable`1<bool> LowerIsExpanding { get; public set; }
    public GatorResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Upper();
    [CompilerGeneratedAttribute]
public void set_Upper(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Lower();
    [CompilerGeneratedAttribute]
public void set_Lower(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UpperIsExpanding();
    [CompilerGeneratedAttribute]
public void set_UpperIsExpanding(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_LowerIsExpanding();
    [CompilerGeneratedAttribute]
public void set_LowerIsExpanding(Nullable`1<bool> value);
}
public class Skender.Stock.Indicators.HeikinAshiResult : ResultBase {
    [CompilerGeneratedAttribute]
private decimal <Open>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <High>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Low>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Close>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Volume>k__BackingField;
    public decimal Open { get; public set; }
    public decimal High { get; public set; }
    public decimal Low { get; public set; }
    public decimal Close { get; public set; }
    public decimal Volume { get; public set; }
    public HeikinAshiResult(DateTime date);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_Open();
    [CompilerGeneratedAttribute]
public void set_Open(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_High();
    [CompilerGeneratedAttribute]
public void set_High(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_Low();
    [CompilerGeneratedAttribute]
public void set_Low(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_Close();
    [CompilerGeneratedAttribute]
public void set_Close(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_Volume();
    [CompilerGeneratedAttribute]
public void set_Volume(decimal value);
}
public class Skender.Stock.Indicators.HmaResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Hma>k__BackingField;
    public Nullable`1<double> Hma { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public HmaResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Hma();
    [CompilerGeneratedAttribute]
public void set_Hma(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.HtlResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DcPeriods>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Trendline>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <SmoothPrice>k__BackingField;
    public Nullable`1<int> DcPeriods { get; public set; }
    public Nullable`1<double> Trendline { get; public set; }
    public Nullable`1<double> SmoothPrice { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public HtlResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DcPeriods();
    [CompilerGeneratedAttribute]
public void set_DcPeriods(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Trendline();
    [CompilerGeneratedAttribute]
public void set_Trendline(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_SmoothPrice();
    [CompilerGeneratedAttribute]
public void set_SmoothPrice(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.HurstResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <HurstExponent>k__BackingField;
    public Nullable`1<double> HurstExponent { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public HurstResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_HurstExponent();
    [CompilerGeneratedAttribute]
public void set_HurstExponent(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public interface Skender.Stock.Indicators.IBasicData {
    public DateTime Date { get; }
    public double Value { get; }
    public abstract virtual DateTime get_Date();
    public abstract virtual double get_Value();
}
public class Skender.Stock.Indicators.IchimokuResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <TenkanSen>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <KijunSen>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <SenkouSpanA>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <SenkouSpanB>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <ChikouSpan>k__BackingField;
    public Nullable`1<decimal> TenkanSen { get; public set; }
    public Nullable`1<decimal> KijunSen { get; public set; }
    public Nullable`1<decimal> SenkouSpanA { get; public set; }
    public Nullable`1<decimal> SenkouSpanB { get; public set; }
    public Nullable`1<decimal> ChikouSpan { get; public set; }
    public IchimokuResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_TenkanSen();
    [CompilerGeneratedAttribute]
public void set_TenkanSen(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_KijunSen();
    [CompilerGeneratedAttribute]
public void set_KijunSen(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_SenkouSpanA();
    [CompilerGeneratedAttribute]
public void set_SenkouSpanA(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_SenkouSpanB();
    [CompilerGeneratedAttribute]
public void set_SenkouSpanB(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_ChikouSpan();
    [CompilerGeneratedAttribute]
public void set_ChikouSpan(Nullable`1<decimal> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Skender.Stock.Indicators.Indicator : object {
    private static CultureInfo EnglishCulture;
    private static Calendar EnglishCalendar;
    private static CalendarWeekRule EnglishCalendarWeekRule;
    private static DayOfWeek EnglishFirstDayOfWeek;
    private static Indicator();
    [ExtensionAttribute]
public static IEnumerable`1<AdlResult> GetAdl(IEnumerable`1<TQuote> quotes, Nullable`1<int> smaPeriods);
    [ExtensionAttribute]
internal static List`1<AdlResult> CalcAdl(List`1<QuoteD> qdList, Nullable`1<int> smaPeriods);
    private static void ValidateAdl(Nullable`1<int> smaPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<AdxResult> GetAdx(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<AdxResult> CalcAdx(List`1<QuoteD> qdList, int lookbackPeriods);
    private static void ValidateAdx(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<AdxResult> RemoveWarmupPeriods(IEnumerable`1<AdxResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<AlligatorResult> GetAlligator(IEnumerable`1<TQuote> quotes, int jawPeriods, int jawOffset, int teethPeriods, int teethOffset, int lipsPeriods, int lipsOffset);
    [ExtensionAttribute]
public static IEnumerable`1<AlligatorResult> GetAlligator(IEnumerable`1<IReusableResult> results, int jawPeriods, int jawOffset, int teethPeriods, int teethOffset, int lipsPeriods, int lipsOffset);
    [ExtensionAttribute]
public static IEnumerable`1<AlligatorResult> GetAlligator(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int jawPeriods, int jawOffset, int teethPeriods, int teethOffset, int lipsPeriods, int lipsOffset);
    [ExtensionAttribute]
internal static List`1<AlligatorResult> CalcAlligator(List`1<ValueTuple`2<DateTime, double>> tpList, int jawPeriods, int jawOffset, int teethPeriods, int teethOffset, int lipsPeriods, int lipsOffset);
    private static void ValidateAlligator(int jawPeriods, int jawOffset, int teethPeriods, int teethOffset, int lipsPeriods, int lipsOffset);
    [ExtensionAttribute]
public static IEnumerable`1<AlligatorResult> Condense(IEnumerable`1<AlligatorResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<AlligatorResult> RemoveWarmupPeriods(IEnumerable`1<AlligatorResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<AlmaResult> GetAlma(IEnumerable`1<TQuote> quotes, int lookbackPeriods, double offset, double sigma);
    [ExtensionAttribute]
public static IEnumerable`1<AlmaResult> GetAlma(IEnumerable`1<IReusableResult> results, int lookbackPeriods, double offset, double sigma);
    [ExtensionAttribute]
public static IEnumerable`1<AlmaResult> GetAlma(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods, double offset, double sigma);
    [ExtensionAttribute]
internal static List`1<AlmaResult> CalcAlma(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, double offset, double sigma);
    private static void ValidateAlma(int lookbackPeriods, double offset, double sigma);
    [ExtensionAttribute]
public static IEnumerable`1<AlmaResult> RemoveWarmupPeriods(IEnumerable`1<AlmaResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<AroonResult> GetAroon(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<AroonResult> CalcAroon(List`1<QuoteD> qdList, int lookbackPeriods);
    private static void ValidateAroon(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<AroonResult> RemoveWarmupPeriods(IEnumerable`1<AroonResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<AtrResult> GetAtr(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<AtrResult> CalcAtr(List`1<QuoteD> qdList, int lookbackPeriods);
    private static void ValidateAtr(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<AtrResult> RemoveWarmupPeriods(IEnumerable`1<AtrResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<AtrStopResult> GetAtrStop(IEnumerable`1<TQuote> quotes, int lookbackPeriods, double multiplier, EndType endType);
    [ExtensionAttribute]
internal static List`1<AtrStopResult> CalcAtrStop(List`1<QuoteD> qdList, int lookbackPeriods, double multiplier, EndType endType);
    private static void ValidateAtrStop(int lookbackPeriods, double multiplier);
    [ExtensionAttribute]
public static IEnumerable`1<AtrStopResult> Condense(IEnumerable`1<AtrStopResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<AtrStopResult> RemoveWarmupPeriods(IEnumerable`1<AtrStopResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<AwesomeResult> GetAwesome(IEnumerable`1<TQuote> quotes, int fastPeriods, int slowPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<AwesomeResult> GetAwesome(IEnumerable`1<IReusableResult> results, int fastPeriods, int slowPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<AwesomeResult> GetAwesome(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int fastPeriods, int slowPeriods);
    [ExtensionAttribute]
internal static List`1<AwesomeResult> CalcAwesome(List`1<ValueTuple`2<DateTime, double>> tpList, int fastPeriods, int slowPeriods);
    private static void ValidateAwesome(int fastPeriods, int slowPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<AwesomeResult> RemoveWarmupPeriods(IEnumerable`1<AwesomeResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<BasicData> GetBaseQuote(IEnumerable`1<TQuote> quotes, CandlePart candlePart);
    [ExtensionAttribute]
public static IEnumerable`1<BetaResult> GetBeta(IEnumerable`1<TQuote> quotesEval, IEnumerable`1<TQuote> quotesMarket, int lookbackPeriods, BetaType type);
    [ExtensionAttribute]
public static IEnumerable`1<BetaResult> GetBeta(IEnumerable`1<IReusableResult> evalResults, IEnumerable`1<IReusableResult> mrktResults, int lookbackPeriods, BetaType type);
    [ExtensionAttribute]
public static IEnumerable`1<BetaResult> GetBeta(IEnumerable`1<ValueTuple`2<DateTime, double>> evalTuple, IEnumerable`1<ValueTuple`2<DateTime, double>> mrktTuple, int lookbackPeriods, BetaType type);
    internal static List`1<BetaResult> CalcBeta(List`1<ValueTuple`2<DateTime, double>> tpListEval, List`1<ValueTuple`2<DateTime, double>> tpListMrkt, int lookbackPeriods, BetaType type);
    [ExtensionAttribute]
private static void CalcBetaWindow(BetaResult r, int i, int lookbackPeriods, Double[] mrktReturns, Double[] evalReturns, BetaType type);
    private static void ValidateBeta(List`1<ValueTuple`2<DateTime, double>> tpListEval, List`1<ValueTuple`2<DateTime, double>> tpListMrkt, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<BetaResult> RemoveWarmupPeriods(IEnumerable`1<BetaResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<BollingerBandsResult> GetBollingerBands(IEnumerable`1<TQuote> quotes, int lookbackPeriods, double standardDeviations);
    [ExtensionAttribute]
public static IEnumerable`1<BollingerBandsResult> GetBollingerBands(IEnumerable`1<IReusableResult> results, int lookbackPeriods, double standardDeviations);
    [ExtensionAttribute]
public static IEnumerable`1<BollingerBandsResult> GetBollingerBands(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods, double standardDeviations);
    [ExtensionAttribute]
internal static List`1<BollingerBandsResult> CalcBollingerBands(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, double standardDeviations);
    private static void ValidateBollingerBands(int lookbackPeriods, double standardDeviations);
    [ExtensionAttribute]
public static IEnumerable`1<BollingerBandsResult> RemoveWarmupPeriods(IEnumerable`1<BollingerBandsResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<BopResult> GetBop(IEnumerable`1<TQuote> quotes, int smoothPeriods);
    [ExtensionAttribute]
internal static List`1<BopResult> CalcBop(List`1<QuoteD> qdList, int smoothPeriods);
    private static void ValidateBop(int smoothPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<BopResult> RemoveWarmupPeriods(IEnumerable`1<BopResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<CciResult> GetCci(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<CciResult> CalcCci(List`1<QuoteD> qdList, int lookbackPeriods);
    private static void ValidateCci(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<CciResult> RemoveWarmupPeriods(IEnumerable`1<CciResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<ChaikinOscResult> GetChaikinOsc(IEnumerable`1<TQuote> quotes, int fastPeriods, int slowPeriods);
    [ExtensionAttribute]
internal static List`1<ChaikinOscResult> CalcChaikinOsc(List`1<QuoteD> qdList, int fastPeriods, int slowPeriods);
    private static void ValidateChaikinOsc(int fastPeriods, int slowPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<ChaikinOscResult> RemoveWarmupPeriods(IEnumerable`1<ChaikinOscResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<ChandelierResult> GetChandelier(IEnumerable`1<TQuote> quotes, int lookbackPeriods, double multiplier, ChandelierType type);
    [ExtensionAttribute]
internal static List`1<ChandelierResult> CalcChandelier(List`1<QuoteD> qdList, int lookbackPeriods, double multiplier, ChandelierType type);
    private static void ValidateChandelier(int lookbackPeriods, double multiplier);
    [ExtensionAttribute]
public static IEnumerable`1<ChandelierResult> RemoveWarmupPeriods(IEnumerable`1<ChandelierResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<ChopResult> GetChop(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<ChopResult> CalcChop(List`1<QuoteD> qdList, int lookbackPeriods);
    private static void ValidateChop(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<ChopResult> RemoveWarmupPeriods(IEnumerable`1<ChopResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<CmfResult> GetCmf(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<CmfResult> CalcCmf(List`1<QuoteD> qdList, int lookbackPeriods);
    private static void ValidateCmf(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<CmfResult> RemoveWarmupPeriods(IEnumerable`1<CmfResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<CmoResult> GetCmo(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<CmoResult> GetCmo(IEnumerable`1<IReusableResult> results, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<CmoResult> GetCmo(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<CmoResult> CalcCmo(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods);
    private static void ValidateCmo(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<CmoResult> RemoveWarmupPeriods(IEnumerable`1<CmoResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<ConnorsRsiResult> GetConnorsRsi(IEnumerable`1<TQuote> quotes, int rsiPeriods, int streakPeriods, int rankPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<ConnorsRsiResult> GetConnorsRsi(IEnumerable`1<IReusableResult> results, int rsiPeriods, int streakPeriods, int rankPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<ConnorsRsiResult> GetConnorsRsi(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int rsiPeriods, int streakPeriods, int rankPeriods);
    [ExtensionAttribute]
internal static List`1<ConnorsRsiResult> CalcConnorsRsi(List`1<ValueTuple`2<DateTime, double>> tpList, int rsiPeriods, int streakPeriods, int rankPeriods);
    [ExtensionAttribute]
private static List`1<ConnorsRsiResult> CalcStreak(List`1<ValueTuple`2<DateTime, double>> tpList, int rsiPeriods, int rankPeriods);
    private static void ValidateConnorsRsi(int rsiPeriods, int streakPeriods, int rankPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<ConnorsRsiResult> RemoveWarmupPeriods(IEnumerable`1<ConnorsRsiResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<CorrResult> GetCorrelation(IEnumerable`1<TQuote> quotesA, IEnumerable`1<TQuote> quotesB, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<CorrResult> GetCorrelation(IEnumerable`1<IReusableResult> quotesA, IEnumerable`1<IReusableResult> quotesB, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<CorrResult> GetCorrelation(IEnumerable`1<ValueTuple`2<DateTime, double>> tuplesA, IEnumerable`1<ValueTuple`2<DateTime, double>> tuplesB, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<CorrResult> CalcCorrelation(List`1<ValueTuple`2<DateTime, double>> tpListA, List`1<ValueTuple`2<DateTime, double>> tpListB, int lookbackPeriods);
    [ExtensionAttribute]
private static void PeriodCorrelation(CorrResult r, Double[] dataA, Double[] dataB);
    private static void ValidateCorrelation(List`1<ValueTuple`2<DateTime, double>> quotesA, List`1<ValueTuple`2<DateTime, double>> quotesB, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<CorrResult> RemoveWarmupPeriods(IEnumerable`1<CorrResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<DemaResult> GetDema(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<DemaResult> GetDema(IEnumerable`1<IReusableResult> results, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<DemaResult> GetDema(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<DemaResult> CalcDema(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods);
    private static void ValidateDema(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<DemaResult> RemoveWarmupPeriods(IEnumerable`1<DemaResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<CandleResult> GetDoji(IEnumerable`1<TQuote> quotes, double maxPriceChangePercent);
    [ExtensionAttribute]
internal static List`1<CandleResult> CalcDoji(IEnumerable`1<TQuote> quotes, double maxPriceChangePercent);
    private static void ValidateDoji(double maxPriceChangePercent);
    [ExtensionAttribute]
public static IEnumerable`1<DonchianResult> GetDonchian(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<DonchianResult> CalcDonchian(List`1<TQuote> quotesList, int lookbackPeriods);
    private static void ValidateDonchian(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<DonchianResult> Condense(IEnumerable`1<DonchianResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<DonchianResult> RemoveWarmupPeriods(IEnumerable`1<DonchianResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<DpoResult> GetDpo(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<DpoResult> GetDpo(IEnumerable`1<IReusableResult> results, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<DpoResult> GetDpo(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<DpoResult> CalcDpo(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods);
    private static void ValidateDpo(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<DynamicResult> GetDynamic(IEnumerable`1<TQuote> quotes, int lookbackPeriods, double kFactor);
    [ExtensionAttribute]
public static IEnumerable`1<DynamicResult> GetDynamic(IEnumerable`1<IReusableResult> results, int lookbackPeriods, double kFactor);
    [ExtensionAttribute]
public static IEnumerable`1<DynamicResult> GetDynamic(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods, double kFactor);
    [ExtensionAttribute]
internal static List`1<DynamicResult> CalcDynamic(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, double kFactor);
    private static void ValidateDynamic(int lookbackPeriods, double kFactor);
    [ExtensionAttribute]
public static IEnumerable`1<ElderRayResult> GetElderRay(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<ElderRayResult> CalcElderRay(List`1<QuoteD> qdList, int lookbackPeriods);
    private static void ValidateElderRay(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<ElderRayResult> RemoveWarmupPeriods(IEnumerable`1<ElderRayResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<EmaResult> GetEma(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<EmaResult> GetEma(IEnumerable`1<IReusableResult> results, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<EmaResult> GetEma(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods);
    [ExtensionAttribute]
public static EmaObserver GetEma(QuoteProvider provider, int lookbackPeriods);
    [ExtensionAttribute]
public static EmaObserver GetEma(TupleProvider tupleProvider, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<EmaResult> CalcEma(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<EmaResult> RemoveWarmupPeriods(IEnumerable`1<EmaResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<EpmaResult> GetEpma(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<EpmaResult> GetEpma(IEnumerable`1<IReusableResult> results, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<EpmaResult> GetEpma(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<EpmaResult> CalcEpma(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods);
    private static void ValidateEpma(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<EpmaResult> RemoveWarmupPeriods(IEnumerable`1<EpmaResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<FcbResult> GetFcb(IEnumerable`1<TQuote> quotes, int windowSpan);
    [ExtensionAttribute]
internal static List`1<FcbResult> CalcFcb(List`1<TQuote> quotesList, int windowSpan);
    private static void ValidateFcb(int windowSpan);
    [ExtensionAttribute]
public static IEnumerable`1<FcbResult> Condense(IEnumerable`1<FcbResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<FcbResult> RemoveWarmupPeriods(IEnumerable`1<FcbResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<FisherTransformResult> GetFisherTransform(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<FisherTransformResult> GetFisherTransform(IEnumerable`1<IReusableResult> results, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<FisherTransformResult> GetFisherTransform(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<FisherTransformResult> CalcFisherTransform(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods);
    private static void ValidateFisherTransform(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<ForceIndexResult> GetForceIndex(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<ForceIndexResult> CalcForceIndex(List`1<QuoteD> qdList, int lookbackPeriods);
    private static void ValidateForceIndex(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<ForceIndexResult> RemoveWarmupPeriods(IEnumerable`1<ForceIndexResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<FractalResult> GetFractal(IEnumerable`1<TQuote> quotes, int windowSpan, EndType endType);
    [ExtensionAttribute]
public static IEnumerable`1<FractalResult> GetFractal(IEnumerable`1<TQuote> quotes, int leftSpan, int rightSpan, EndType endType);
    [ExtensionAttribute]
internal static List`1<FractalResult> CalcFractal(List`1<TQuote> quotesList, int leftSpan, int rightSpan, EndType endType);
    private static void ValidateFractal(int windowSpan);
    [ExtensionAttribute]
public static IEnumerable`1<FractalResult> Condense(IEnumerable`1<FractalResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<GatorResult> GetGator(IEnumerable`1<TQuote> quotes);
    [ExtensionAttribute]
public static IEnumerable`1<GatorResult> GetGator(IEnumerable`1<AlligatorResult> alligator);
    [ExtensionAttribute]
public static IEnumerable`1<GatorResult> GetGator(IEnumerable`1<IReusableResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<GatorResult> GetGator(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples);
    [ExtensionAttribute]
internal static List`1<GatorResult> CalcGator(List`1<AlligatorResult> alligator);
    [ExtensionAttribute]
public static IEnumerable`1<GatorResult> Condense(IEnumerable`1<GatorResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<GatorResult> RemoveWarmupPeriods(IEnumerable`1<GatorResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<HeikinAshiResult> GetHeikinAshi(IEnumerable`1<TQuote> quotes);
    [ExtensionAttribute]
internal static List`1<HeikinAshiResult> CalcHeikinAshi(List`1<TQuote> quotesList);
    [ExtensionAttribute]
public static IEnumerable`1<Quote> ToQuotes(IEnumerable`1<HeikinAshiResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<HmaResult> GetHma(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<HmaResult> GetHma(IEnumerable`1<IReusableResult> results, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<HmaResult> GetHma(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<HmaResult> CalcHma(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods);
    private static void ValidateHma(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<HmaResult> RemoveWarmupPeriods(IEnumerable`1<HmaResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<HtlResult> GetHtTrendline(IEnumerable`1<TQuote> quotes);
    [ExtensionAttribute]
public static IEnumerable`1<HtlResult> GetHtTrendline(IEnumerable`1<IReusableResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<HtlResult> GetHtTrendline(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples);
    [ExtensionAttribute]
internal static List`1<HtlResult> CalcHtTrendline(List`1<ValueTuple`2<DateTime, double>> tpList);
    [ExtensionAttribute]
public static IEnumerable`1<HtlResult> RemoveWarmupPeriods(IEnumerable`1<HtlResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<HurstResult> GetHurst(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<HurstResult> GetHurst(IEnumerable`1<IReusableResult> results, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<HurstResult> GetHurst(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<HurstResult> CalcHurst(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods);
    private static double CalcHurstWindow(Double[] values);
    private static void ValidateHurst(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<HurstResult> RemoveWarmupPeriods(IEnumerable`1<HurstResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<IchimokuResult> GetIchimoku(IEnumerable`1<TQuote> quotes, int tenkanPeriods, int kijunPeriods, int senkouBPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<IchimokuResult> GetIchimoku(IEnumerable`1<TQuote> quotes, int tenkanPeriods, int kijunPeriods, int senkouBPeriods, int offsetPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<IchimokuResult> GetIchimoku(IEnumerable`1<TQuote> quotes, int tenkanPeriods, int kijunPeriods, int senkouBPeriods, int senkouOffset, int chikouOffset);
    [ExtensionAttribute]
internal static List`1<IchimokuResult> CalcIchimoku(List`1<TQuote> quotesList, int tenkanPeriods, int kijunPeriods, int senkouBPeriods, int senkouOffset, int chikouOffset);
    private static void CalcIchimokuTenkanSen(int i, List`1<TQuote> quotesList, IchimokuResult result, int tenkanPeriods);
    private static void CalcIchimokuKijunSen(int i, List`1<TQuote> quotesList, IchimokuResult result, int kijunPeriods);
    private static void CalcIchimokuSenkouB(int i, List`1<TQuote> quotesList, IchimokuResult result, int senkouOffset, int senkouBPeriods);
    private static void ValidateIchimoku(int tenkanPeriods, int kijunPeriods, int senkouBPeriods, int senkouOffset, int chikouOffset);
    [ExtensionAttribute]
public static IEnumerable`1<IchimokuResult> Condense(IEnumerable`1<IchimokuResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<KamaResult> GetKama(IEnumerable`1<TQuote> quotes, int erPeriods, int fastPeriods, int slowPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<KamaResult> GetKama(IEnumerable`1<IReusableResult> results, int erPeriods, int fastPeriods, int slowPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<KamaResult> GetKama(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int erPeriods, int fastPeriods, int slowPeriods);
    [ExtensionAttribute]
internal static List`1<KamaResult> CalcKama(List`1<ValueTuple`2<DateTime, double>> tpList, int erPeriods, int fastPeriods, int slowPeriods);
    private static void ValidateKama(int erPeriods, int fastPeriods, int slowPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<KamaResult> RemoveWarmupPeriods(IEnumerable`1<KamaResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<KeltnerResult> GetKeltner(IEnumerable`1<TQuote> quotes, int emaPeriods, double multiplier, int atrPeriods);
    [ExtensionAttribute]
internal static List`1<KeltnerResult> CalcKeltner(List`1<QuoteD> qdList, int emaPeriods, double multiplier, int atrPeriods);
    private static void ValidateKeltner(int emaPeriods, double multiplier, int atrPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<KeltnerResult> Condense(IEnumerable`1<KeltnerResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<KeltnerResult> RemoveWarmupPeriods(IEnumerable`1<KeltnerResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<KvoResult> GetKvo(IEnumerable`1<TQuote> quotes, int fastPeriods, int slowPeriods, int signalPeriods);
    [ExtensionAttribute]
internal static List`1<KvoResult> CalcKvo(List`1<QuoteD> qdList, int fastPeriods, int slowPeriods, int signalPeriods);
    private static void ValidateKlinger(int fastPeriods, int slowPeriods, int signalPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<KvoResult> RemoveWarmupPeriods(IEnumerable`1<KvoResult> results);
    [ExtensionAttribute]
internal static List`1<MacdResult> CalcMacd(List`1<ValueTuple`2<DateTime, double>> tpList, int fastPeriods, int slowPeriods, int signalPeriods);
    private static void ValidateMacd(int fastPeriods, int slowPeriods, int signalPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<MacdResult> RemoveWarmupPeriods(IEnumerable`1<MacdResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<MacdResult> GetMacd(IEnumerable`1<TQuote> quotes, int fastPeriods, int slowPeriods, int signalPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<MacdResult> GetMacd(IEnumerable`1<IReusableResult> results, int fastPeriods, int slowPeriods, int signalPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<MacdResult> GetMacd(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int fastPeriods, int slowPeriods, int signalPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<MaEnvelopeResult> GetMaEnvelopes(IEnumerable`1<TQuote> quotes, int lookbackPeriods, double percentOffset, MaType movingAverageType);
    [ExtensionAttribute]
public static IEnumerable`1<MaEnvelopeResult> GetMaEnvelopes(IEnumerable`1<IReusableResult> results, int lookbackPeriods, double percentOffset, MaType movingAverageType);
    [ExtensionAttribute]
public static IEnumerable`1<MaEnvelopeResult> GetMaEnvelopes(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods, double percentOffset, MaType movingAverageType);
    [ExtensionAttribute]
internal static IEnumerable`1<MaEnvelopeResult> CalcMaEnvelopes(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, double percentOffset, MaType movingAverageType);
    [ExtensionAttribute]
private static IEnumerable`1<MaEnvelopeResult> MaEnvAlma(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, double offsetRatio);
    [ExtensionAttribute]
private static IEnumerable`1<MaEnvelopeResult> MaEnvDema(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, double offsetRatio);
    [ExtensionAttribute]
private static IEnumerable`1<MaEnvelopeResult> MaEnvEma(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, double offsetRatio);
    [ExtensionAttribute]
private static IEnumerable`1<MaEnvelopeResult> MaEnvEpma(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, double offsetRatio);
    [ExtensionAttribute]
private static IEnumerable`1<MaEnvelopeResult> MaEnvHma(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, double offsetRatio);
    [ExtensionAttribute]
private static IEnumerable`1<MaEnvelopeResult> MaEnvSma(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, double offsetRatio);
    [ExtensionAttribute]
private static IEnumerable`1<MaEnvelopeResult> MaEnvSmma(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, double offsetRatio);
    [ExtensionAttribute]
private static IEnumerable`1<MaEnvelopeResult> MaEnvTema(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, double offsetRatio);
    [ExtensionAttribute]
private static IEnumerable`1<MaEnvelopeResult> MaEnvWma(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, double offsetRatio);
    private static void ValidateMaEnvelopes(double percentOffset);
    [ExtensionAttribute]
public static IEnumerable`1<MaEnvelopeResult> Condense(IEnumerable`1<MaEnvelopeResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<MamaResult> GetMama(IEnumerable`1<TQuote> quotes, double fastLimit, double slowLimit);
    [ExtensionAttribute]
public static IEnumerable`1<MamaResult> GetMama(IEnumerable`1<IReusableResult> results, double fastLimit, double slowLimit);
    [ExtensionAttribute]
public static IEnumerable`1<MamaResult> GetMama(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, double fastLimit, double slowLimit);
    [ExtensionAttribute]
internal static List`1<MamaResult> CalcMama(List`1<ValueTuple`2<DateTime, double>> tpList, double fastLimit, double slowLimit);
    private static void ValidateMama(double fastLimit, double slowLimit);
    [ExtensionAttribute]
public static IEnumerable`1<MamaResult> RemoveWarmupPeriods(IEnumerable`1<MamaResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<CandleResult> GetMarubozu(IEnumerable`1<TQuote> quotes, double minBodyPercent);
    [ExtensionAttribute]
internal static List`1<CandleResult> CalcMarubozu(IEnumerable`1<TQuote> quotes, double minBodyPercent);
    private static void ValidateMarubozu(double minBodyPercent);
    [ExtensionAttribute]
public static IEnumerable`1<MfiResult> GetMfi(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<MfiResult> CalcMfi(List`1<QuoteD> qdList, int lookbackPeriods);
    private static void ValidateMfi(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<MfiResult> RemoveWarmupPeriods(IEnumerable`1<MfiResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<ObvResult> GetObv(IEnumerable`1<TQuote> quotes, Nullable`1<int> smaPeriods);
    [ExtensionAttribute]
internal static List`1<ObvResult> CalcObv(List`1<QuoteD> qdList, Nullable`1<int> smaPeriods);
    private static void ValidateObv(Nullable`1<int> smaPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<ParabolicSarResult> GetParabolicSar(IEnumerable`1<TQuote> quotes, double accelerationStep, double maxAccelerationFactor);
    [ExtensionAttribute]
public static IEnumerable`1<ParabolicSarResult> GetParabolicSar(IEnumerable`1<TQuote> quotes, double accelerationStep, double maxAccelerationFactor, double initialFactor);
    [ExtensionAttribute]
internal static List`1<ParabolicSarResult> CalcParabolicSar(List`1<QuoteD> qdList, double accelerationStep, double maxAccelerationFactor, double initialFactor);
    private static void ValidateParabolicSar(double accelerationStep, double maxAccelerationFactor, double initialFactor);
    [ExtensionAttribute]
public static IEnumerable`1<ParabolicSarResult> RemoveWarmupPeriods(IEnumerable`1<ParabolicSarResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<PivotPointsResult> GetPivotPoints(IEnumerable`1<TQuote> quotes, PeriodSize windowSize, PivotPointType pointType);
    [ExtensionAttribute]
internal static List`1<PivotPointsResult> CalcPivotPoints(List`1<TQuote> quotesList, PeriodSize windowSize, PivotPointType pointType);
    internal static TPivotPoint GetPivotPointStandard(decimal high, decimal low, decimal close);
    internal static TPivotPoint GetPivotPointCamarilla(decimal high, decimal low, decimal close);
    internal static TPivotPoint GetPivotPointDemark(decimal open, decimal high, decimal low, decimal close);
    internal static TPivotPoint GetPivotPointFibonacci(decimal high, decimal low, decimal close);
    internal static TPivotPoint GetPivotPointWoodie(decimal currentOpen, decimal high, decimal low);
    [NullableContextAttribute("0")]
internal static TPivotPoint GetPivotPoint(PivotPointType pointType, decimal open, decimal high, decimal low, decimal close);
    private static int GetWindowNumber(DateTime d, PeriodSize windowSize);
    [ExtensionAttribute]
public static IEnumerable`1<PivotPointsResult> RemoveWarmupPeriods(IEnumerable`1<PivotPointsResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<PivotsResult> GetPivots(IEnumerable`1<TQuote> quotes, int leftSpan, int rightSpan, int maxTrendPeriods, EndType endType);
    [ExtensionAttribute]
internal static List`1<PivotsResult> CalcPivots(List`1<TQuote> quotesList, int leftSpan, int rightSpan, int maxTrendPeriods, EndType endType);
    internal static void ValidatePivots(int leftSpan, int rightSpan, int maxTrendPeriods, string caller);
    [ExtensionAttribute]
public static IEnumerable`1<PivotsResult> Condense(IEnumerable`1<PivotsResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<PmoResult> GetPmo(IEnumerable`1<TQuote> quotes, int timePeriods, int smoothPeriods, int signalPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<PmoResult> GetPmo(IEnumerable`1<IReusableResult> results, int timePeriods, int smoothPeriods, int signalPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<PmoResult> GetPmo(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int timePeriods, int smoothPeriods, int signalPeriods);
    [ExtensionAttribute]
internal static List`1<PmoResult> CalcPmo(List`1<ValueTuple`2<DateTime, double>> tpList, int timePeriods, int smoothPeriods, int signalPeriods);
    [ExtensionAttribute]
private static List`1<PmoResult> CalcPmoRocEma(List`1<ValueTuple`2<DateTime, double>> tpList, int timePeriods);
    private static void CalcPmoSignal(List`1<PmoResult> results, int timePeriods, int smoothPeriods, int signalPeriods);
    private static void ValidatePmo(int timePeriods, int smoothPeriods, int signalPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<PmoResult> RemoveWarmupPeriods(IEnumerable`1<PmoResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<PrsResult> GetPrs(IEnumerable`1<TQuote> quotesEval, IEnumerable`1<TQuote> quotesBase, Nullable`1<int> lookbackPeriods, Nullable`1<int> smaPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<PrsResult> GetPrs(IEnumerable`1<IReusableResult> quotesEval, IEnumerable`1<IReusableResult> quotesBase, Nullable`1<int> lookbackPeriods, Nullable`1<int> smaPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<PrsResult> GetPrs(IEnumerable`1<ValueTuple`2<DateTime, double>> tupleEval, IEnumerable`1<ValueTuple`2<DateTime, double>> tupleBase, Nullable`1<int> lookbackPeriods, Nullable`1<int> smaPeriods);
    internal static List`1<PrsResult> CalcPrs(List`1<ValueTuple`2<DateTime, double>> tpListEval, List`1<ValueTuple`2<DateTime, double>> tpListBase, Nullable`1<int> lookbackPeriods, Nullable`1<int> smaPeriods);
    private static void ValidatePriceRelative(List`1<ValueTuple`2<DateTime, double>> quotesEval, List`1<ValueTuple`2<DateTime, double>> quotesBase, Nullable`1<int> lookbackPeriods, Nullable`1<int> smaPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<PvoResult> GetPvo(IEnumerable`1<TQuote> quotes, int fastPeriods, int slowPeriods, int signalPeriods);
    [ExtensionAttribute]
internal static List`1<PvoResult> CalcPvo(List`1<ValueTuple`2<DateTime, double>> tpList, int fastPeriods, int slowPeriods, int signalPeriods);
    private static void ValidatePvo(int fastPeriods, int slowPeriods, int signalPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<PvoResult> RemoveWarmupPeriods(IEnumerable`1<PvoResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<RenkoResult> GetRenko(IEnumerable`1<TQuote> quotes, decimal brickSize, EndType endType);
    [ExtensionAttribute]
internal static List`1<RenkoResult> CalcRenko(List`1<TQuote> quotesList, decimal brickSize, EndType endType);
    private static int GetNewBricks(EndType endType, TQuote q, RenkoResult lastBrick, decimal brickSize);
    private static void ValidateRenko(decimal brickSize);
    [ExtensionAttribute]
public static IEnumerable`1<RenkoResult> GetRenkoAtr(IEnumerable`1<TQuote> quotes, int atrPeriods, EndType endType);
    [ExtensionAttribute]
internal static List`1<RenkoResult> CalcRenkoAtr(List`1<TQuote> quotesList, int atrPeriods, EndType endType);
    [ExtensionAttribute]
public static IEnumerable`1<RocResult> GetRoc(IEnumerable`1<TQuote> quotes, int lookbackPeriods, Nullable`1<int> smaPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<RocResult> GetRoc(IEnumerable`1<IReusableResult> results, int lookbackPeriods, Nullable`1<int> smaPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<RocResult> GetRoc(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods, Nullable`1<int> smaPeriods);
    [ExtensionAttribute]
internal static List`1<RocResult> CalcRoc(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, Nullable`1<int> smaPeriods);
    private static void ValidateRoc(int lookbackPeriods, Nullable`1<int> smaPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<RocResult> RemoveWarmupPeriods(IEnumerable`1<RocResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<RocWbResult> GetRocWb(IEnumerable`1<TQuote> quotes, int lookbackPeriods, int emaPeriods, int stdDevPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<RocWbResult> GetRocWb(IEnumerable`1<IReusableResult> results, int lookbackPeriods, int emaPeriods, int stdDevPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<RocWbResult> GetRocWb(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods, int emaPeriods, int stdDevPeriods);
    [ExtensionAttribute]
internal static List`1<RocWbResult> CalcRocWb(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, int emaPeriods, int stdDevPeriods);
    private static void ValidateRocWb(int lookbackPeriods, int emaPeriods, int stdDevPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<RocWbResult> RemoveWarmupPeriods(IEnumerable`1<RocWbResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<RollingPivotsResult> GetRollingPivots(IEnumerable`1<TQuote> quotes, int windowPeriods, int offsetPeriods, PivotPointType pointType);
    [ExtensionAttribute]
internal static List`1<RollingPivotsResult> CalcRollingPivots(List`1<TQuote> quotesList, int windowPeriods, int offsetPeriods, PivotPointType pointType);
    private static void ValidateRollingPivots(int windowPeriods, int offsetPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<RollingPivotsResult> RemoveWarmupPeriods(IEnumerable`1<RollingPivotsResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<RsiResult> GetRsi(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<RsiResult> GetRsi(IEnumerable`1<IReusableResult> results, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<RsiResult> GetRsi(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<RsiResult> CalcRsi(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods);
    private static void ValidateRsi(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<RsiResult> RemoveWarmupPeriods(IEnumerable`1<RsiResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<SlopeResult> GetSlope(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<SlopeResult> GetSlope(IEnumerable`1<IReusableResult> results, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<SlopeResult> GetSlope(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<SlopeResult> CalcSlope(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods);
    private static void ValidateSlope(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<SlopeResult> RemoveWarmupPeriods(IEnumerable`1<SlopeResult> results);
    [ExtensionAttribute]
internal static IEnumerable`1<SmaAnalysis> CalcSmaAnalysis(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<SmaResult> GetSma(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<SmaResult> GetSma(IEnumerable`1<IReusableResult> results, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<SmaResult> GetSma(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods);
    [ExtensionAttribute]
public static SmaObserver GetSma(QuoteProvider provider, int lookbackPeriods);
    [ExtensionAttribute]
public static SmaObserver GetSma(TupleProvider tupleProvider, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<SmaAnalysis> GetSmaAnalysis(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<SmaAnalysis> GetSmaAnalysis(IEnumerable`1<IReusableResult> results, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<SmaAnalysis> GetSmaAnalysis(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<SmaResult> CalcSma(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<SmaResult> RemoveWarmupPeriods(IEnumerable`1<SmaResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<SmaAnalysis> RemoveWarmupPeriods(IEnumerable`1<SmaAnalysis> results);
    [ExtensionAttribute]
public static IEnumerable`1<SmiResult> GetSmi(IEnumerable`1<TQuote> quotes, int lookbackPeriods, int firstSmoothPeriods, int secondSmoothPeriods, int signalPeriods);
    [ExtensionAttribute]
internal static List`1<SmiResult> CalcSmi(List`1<QuoteD> qdList, int lookbackPeriods, int firstSmoothPeriods, int secondSmoothPeriods, int signalPeriods);
    private static void ValidateSmi(int lookbackPeriods, int firstSmoothPeriods, int secondSmoothPeriods, int signalPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<SmiResult> RemoveWarmupPeriods(IEnumerable`1<SmiResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<SmmaResult> GetSmma(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<SmmaResult> GetSmma(IEnumerable`1<IReusableResult> results, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<SmmaResult> GetSmma(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<SmmaResult> CalcSmma(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods);
    private static void ValidateSmma(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<SmmaResult> RemoveWarmupPeriods(IEnumerable`1<SmmaResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<StarcBandsResult> GetStarcBands(IEnumerable`1<TQuote> quotes, int smaPeriods, double multiplier, int atrPeriods);
    [ExtensionAttribute]
internal static List`1<StarcBandsResult> CalcStarcBands(List`1<QuoteD> qdList, int smaPeriods, double multiplier, int atrPeriods);
    private static void ValidateStarcBands(int smaPeriods, double multiplier, int atrPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<StarcBandsResult> Condense(IEnumerable`1<StarcBandsResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<StarcBandsResult> RemoveWarmupPeriods(IEnumerable`1<StarcBandsResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<StcResult> GetStc(IEnumerable`1<TQuote> quotes, int cyclePeriods, int fastPeriods, int slowPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<StcResult> GetStc(IEnumerable`1<IReusableResult> results, int cyclePeriods, int fastPeriods, int slowPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<StcResult> GetStc(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int cyclePeriods, int fastPeriods, int slowPeriods);
    [ExtensionAttribute]
internal static List`1<StcResult> CalcStc(List`1<ValueTuple`2<DateTime, double>> tpList, int cyclePeriods, int fastPeriods, int slowPeriods);
    private static void ValidateStc(int cyclePeriods, int fastPeriods, int slowPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<StcResult> RemoveWarmupPeriods(IEnumerable`1<StcResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<StdDevResult> GetStdDev(IEnumerable`1<TQuote> quotes, int lookbackPeriods, Nullable`1<int> smaPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<StdDevResult> GetStdDev(IEnumerable`1<IReusableResult> results, int lookbackPeriods, Nullable`1<int> smaPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<StdDevResult> GetStdDev(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods, Nullable`1<int> smaPeriods);
    [ExtensionAttribute]
internal static List`1<StdDevResult> CalcStdDev(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, Nullable`1<int> smaPeriods);
    private static void ValidateStdDev(int lookbackPeriods, Nullable`1<int> smaPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<StdDevResult> RemoveWarmupPeriods(IEnumerable`1<StdDevResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<StdDevChannelsResult> GetStdDevChannels(IEnumerable`1<TQuote> quotes, Nullable`1<int> lookbackPeriods, double stdDeviations);
    [ExtensionAttribute]
public static IEnumerable`1<StdDevChannelsResult> GetStdDevChannels(IEnumerable`1<IReusableResult> results, Nullable`1<int> lookbackPeriods, double stdDeviations);
    [ExtensionAttribute]
public static IEnumerable`1<StdDevChannelsResult> GetStdDevChannels(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, Nullable`1<int> lookbackPeriods, double stdDeviations);
    [ExtensionAttribute]
internal static List`1<StdDevChannelsResult> CalcStdDevChannels(List`1<ValueTuple`2<DateTime, double>> tpList, Nullable`1<int> lookbackPeriods, double stdDeviations);
    private static void ValidateStdDevChannels(Nullable`1<int> lookbackPeriods, double stdDeviations);
    [ExtensionAttribute]
public static IEnumerable`1<StdDevChannelsResult> Condense(IEnumerable`1<StdDevChannelsResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<StdDevChannelsResult> RemoveWarmupPeriods(IEnumerable`1<StdDevChannelsResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<StochResult> GetStoch(IEnumerable`1<TQuote> quotes, int lookbackPeriods, int signalPeriods, int smoothPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<StochResult> GetStoch(IEnumerable`1<TQuote> quotes, int lookbackPeriods, int signalPeriods, int smoothPeriods, double kFactor, double dFactor, MaType movingAverageType);
    [ExtensionAttribute]
internal static List`1<StochResult> CalcStoch(List`1<QuoteD> qdList, int lookbackPeriods, int signalPeriods, int smoothPeriods, double kFactor, double dFactor, MaType movingAverageType);
    private static List`1<StochResult> SmoothOscillator(List`1<StochResult> results, int length, int lookbackPeriods, int smoothPeriods, MaType movingAverageType);
    private static void ValidateStoch(int lookbackPeriods, int signalPeriods, int smoothPeriods, double kFactor, double dFactor, MaType movingAverageType);
    [ExtensionAttribute]
public static IEnumerable`1<StochResult> RemoveWarmupPeriods(IEnumerable`1<StochResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<StochRsiResult> GetStochRsi(IEnumerable`1<TQuote> quotes, int rsiPeriods, int stochPeriods, int signalPeriods, int smoothPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<StochRsiResult> GetStochRsi(IEnumerable`1<IReusableResult> results, int rsiPeriods, int stochPeriods, int signalPeriods, int smoothPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<StochRsiResult> GetStochRsi(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int rsiPeriods, int stochPeriods, int signalPeriods, int smoothPeriods);
    [ExtensionAttribute]
internal static List`1<StochRsiResult> CalcStochRsi(List`1<ValueTuple`2<DateTime, double>> tpList, int rsiPeriods, int stochPeriods, int signalPeriods, int smoothPeriods);
    private static void ValidateStochRsi(int rsiPeriods, int stochPeriods, int signalPeriods, int smoothPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<StochRsiResult> RemoveWarmupPeriods(IEnumerable`1<StochRsiResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<SuperTrendResult> GetSuperTrend(IEnumerable`1<TQuote> quotes, int lookbackPeriods, double multiplier);
    [ExtensionAttribute]
internal static List`1<SuperTrendResult> CalcSuperTrend(List`1<QuoteD> qdList, int lookbackPeriods, double multiplier);
    private static void ValidateSuperTrend(int lookbackPeriods, double multiplier);
    [ExtensionAttribute]
public static IEnumerable`1<SuperTrendResult> Condense(IEnumerable`1<SuperTrendResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<SuperTrendResult> RemoveWarmupPeriods(IEnumerable`1<SuperTrendResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<T3Result> GetT3(IEnumerable`1<TQuote> quotes, int lookbackPeriods, double volumeFactor);
    [ExtensionAttribute]
public static IEnumerable`1<T3Result> GetT3(IEnumerable`1<IReusableResult> results, int lookbackPeriods, double volumeFactor);
    [ExtensionAttribute]
public static IEnumerable`1<T3Result> GetT3(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods, double volumeFactor);
    [ExtensionAttribute]
internal static List`1<T3Result> CalcT3(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, double volumeFactor);
    private static void ValidateT3(int lookbackPeriods, double volumeFactor);
    [ExtensionAttribute]
public static IEnumerable`1<TemaResult> GetTema(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<TemaResult> GetTema(IEnumerable`1<IReusableResult> results, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<TemaResult> GetTema(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<TemaResult> CalcTema(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods);
    private static void ValidateTema(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<TemaResult> RemoveWarmupPeriods(IEnumerable`1<TemaResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<TrResult> GetTr(IEnumerable`1<TQuote> quotes);
    [ExtensionAttribute]
internal static List`1<TrResult> CalcTr(List`1<QuoteD> qdList);
    [ExtensionAttribute]
public static IEnumerable`1<TrixResult> GetTrix(IEnumerable`1<TQuote> quotes, int lookbackPeriods, Nullable`1<int> signalPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<TrixResult> GetTrix(IEnumerable`1<IReusableResult> results, int lookbackPeriods, Nullable`1<int> signalPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<TrixResult> GetTrix(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods, Nullable`1<int> signalPeriods);
    [ExtensionAttribute]
internal static List`1<TrixResult> CalcTrix(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, Nullable`1<int> signalPeriods);
    private static void CalcTrixSignal(Nullable`1<int> signalPeriods, int i, int lookbackPeriods, List`1<TrixResult> results);
    private static void ValidateTrix(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<TrixResult> RemoveWarmupPeriods(IEnumerable`1<TrixResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<TsiResult> GetTsi(IEnumerable`1<TQuote> quotes, int lookbackPeriods, int smoothPeriods, int signalPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<TsiResult> GetTsi(IEnumerable`1<IReusableResult> results, int lookbackPeriods, int smoothPeriods, int signalPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<TsiResult> GetTsi(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods, int smoothPeriods, int signalPeriods);
    [ExtensionAttribute]
internal static List`1<TsiResult> CalcTsi(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods, int smoothPeriods, int signalPeriods);
    private static void ValidateTsi(int lookbackPeriods, int smoothPeriods, int signalPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<TsiResult> RemoveWarmupPeriods(IEnumerable`1<TsiResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<UlcerIndexResult> GetUlcerIndex(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<UlcerIndexResult> GetUlcerIndex(IEnumerable`1<IReusableResult> results, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<UlcerIndexResult> GetUlcerIndex(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<UlcerIndexResult> CalcUlcerIndex(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods);
    private static void ValidateUlcer(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<UlcerIndexResult> RemoveWarmupPeriods(IEnumerable`1<UlcerIndexResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<UltimateResult> GetUltimate(IEnumerable`1<TQuote> quotes, int shortPeriods, int middlePeriods, int longPeriods);
    [ExtensionAttribute]
internal static List`1<UltimateResult> CalcUltimate(List`1<QuoteD> qdList, int shortPeriods, int middlePeriods, int longPeriods);
    private static void ValidateUltimate(int shortPeriods, int middleAverage, int longPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<UltimateResult> RemoveWarmupPeriods(IEnumerable`1<UltimateResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<VolatilityStopResult> GetVolatilityStop(IEnumerable`1<TQuote> quotes, int lookbackPeriods, double multiplier);
    [ExtensionAttribute]
internal static List`1<VolatilityStopResult> CalcVolatilityStop(List`1<QuoteD> qdList, int lookbackPeriods, double multiplier);
    private static void ValidateVolatilityStop(int lookbackPeriods, double multiplier);
    [ExtensionAttribute]
public static IEnumerable`1<VolatilityStopResult> RemoveWarmupPeriods(IEnumerable`1<VolatilityStopResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<VortexResult> GetVortex(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<VortexResult> CalcVortex(List`1<QuoteD> qdList, int lookbackPeriods);
    private static void ValidateVortex(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<VortexResult> Condense(IEnumerable`1<VortexResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<VortexResult> RemoveWarmupPeriods(IEnumerable`1<VortexResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<VwapResult> GetVwap(IEnumerable`1<TQuote> quotes, Nullable`1<DateTime> startDate);
    [ExtensionAttribute]
internal static List`1<VwapResult> CalcVwap(List`1<QuoteD> qdList, Nullable`1<DateTime> startDate);
    private static void ValidateVwap(List`1<QuoteD> quotesList, Nullable`1<DateTime> startDate);
    [ExtensionAttribute]
public static IEnumerable`1<VwapResult> RemoveWarmupPeriods(IEnumerable`1<VwapResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<VwmaResult> GetVwma(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<VwmaResult> CalcVwma(List`1<QuoteD> qdList, int lookbackPeriods);
    private static void ValidateVwma(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<VwmaResult> RemoveWarmupPeriods(IEnumerable`1<VwmaResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<WilliamsResult> GetWilliamsR(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<WilliamsResult> CalcWilliamsR(List`1<QuoteD> qdList, int lookbackPeriods);
    private static void ValidateWilliam(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<WilliamsResult> RemoveWarmupPeriods(IEnumerable`1<WilliamsResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<WmaResult> GetWma(IEnumerable`1<TQuote> quotes, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<WmaResult> GetWma(IEnumerable`1<IReusableResult> results, int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<WmaResult> GetWma(IEnumerable`1<ValueTuple`2<DateTime, double>> priceTuples, int lookbackPeriods);
    [ExtensionAttribute]
internal static List`1<WmaResult> CalcWma(List`1<ValueTuple`2<DateTime, double>> tpList, int lookbackPeriods);
    private static void ValidateWma(int lookbackPeriods);
    [ExtensionAttribute]
public static IEnumerable`1<WmaResult> RemoveWarmupPeriods(IEnumerable`1<WmaResult> results);
    [ExtensionAttribute]
public static IEnumerable`1<ZigZagResult> GetZigZag(IEnumerable`1<TQuote> quotes, EndType endType, decimal percentChange);
    [ExtensionAttribute]
internal static List`1<ZigZagResult> CalcZigZag(List`1<TQuote> quotesList, EndType endType, decimal percentChange);
    private static ZigZagPoint EvaluateNextPoint(List`1<TQuote> quotesList, EndType endType, decimal changeThreshold, ZigZagPoint lastPoint);
    private static void DrawZigZagLine(List`1<ZigZagResult> results, List`1<TQuote> quotesList, ZigZagPoint lastPoint, ZigZagPoint nextPoint);
    private static void DrawRetraceLine(List`1<ZigZagResult> results, string lastDirection, ZigZagPoint lastLowPoint, ZigZagPoint lastHighPoint, ZigZagPoint nextPoint);
    private static ZigZagEval GetZigZagEval(EndType endType, int index, TQuote q);
    private static void ValidateZigZag(decimal percentChange);
    [ExtensionAttribute]
public static IEnumerable`1<ZigZagResult> Condense(IEnumerable`1<ZigZagResult> results);
    [ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
[ObsoleteAttribute("Rename 'ToBasicTuple(..)' to 'ToTuple(..)' to fix.", "False")]
public static List`1<ValueTuple`2<DateTime, double>> ToBasicTuple(IEnumerable`1<TQuote> quotes, CandlePart candlePart);
    [ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
[ObsoleteAttribute("Rename 'ToResultTuple(..)' to 'ToTuple(..)' to fix.", "False")]
public static List`1<ValueTuple`2<DateTime, double>> ToResultTuple(IEnumerable`1<IReusableResult> basicData);
    [ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
[ObsoleteAttribute("Rename 'ToTupleCollection(..)' to 'ToTupleChainable(..)' to fix.", "False")]
public static Collection`1<ValueTuple`2<DateTime, double>> ToTupleCollection(IEnumerable`1<IReusableResult> reusable);
    [ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
[ObsoleteAttribute("Rename 'ToTupleCollection(NullTo..)' to either 'ToTupleNaN(..)' or 'ToTupleNull(..)' to fix.", "False")]
public static Collection`1<ValueTuple`2<DateTime, Nullable`1<double>>> ToTupleCollection(IEnumerable`1<IReusableResult> reusable, NullTo nullTo);
    [ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
[ObsoleteAttribute("Change 'GetStarcBands()' to 'GetStarcBands(20)' to fix.", "False")]
public static IEnumerable`1<StarcBandsResult> GetStarcBands(IEnumerable`1<TQuote> quotes);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Skender.Stock.Indicators.InvalidQuotesException : ArgumentOutOfRangeException {
    public InvalidQuotesException(string paramName);
    public InvalidQuotesException(string message, Exception innerException);
    public InvalidQuotesException(string paramName, string message);
    public InvalidQuotesException(string paramName, object actualValue, string message);
    [NullableContextAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
protected InvalidQuotesException(SerializationInfo info, StreamingContext context);
}
internal interface Skender.Stock.Indicators.IPivotPoint {
    public Nullable`1<decimal> R4 { get; public set; }
    public Nullable`1<decimal> R3 { get; public set; }
    public Nullable`1<decimal> R2 { get; public set; }
    public Nullable`1<decimal> R1 { get; public set; }
    public Nullable`1<decimal> PP { get; public set; }
    public Nullable`1<decimal> S1 { get; public set; }
    public Nullable`1<decimal> S2 { get; public set; }
    public Nullable`1<decimal> S3 { get; public set; }
    public Nullable`1<decimal> S4 { get; public set; }
    public abstract virtual Nullable`1<decimal> get_R4();
    public abstract virtual void set_R4(Nullable`1<decimal> value);
    public abstract virtual Nullable`1<decimal> get_R3();
    public abstract virtual void set_R3(Nullable`1<decimal> value);
    public abstract virtual Nullable`1<decimal> get_R2();
    public abstract virtual void set_R2(Nullable`1<decimal> value);
    public abstract virtual Nullable`1<decimal> get_R1();
    public abstract virtual void set_R1(Nullable`1<decimal> value);
    public abstract virtual Nullable`1<decimal> get_PP();
    public abstract virtual void set_PP(Nullable`1<decimal> value);
    public abstract virtual Nullable`1<decimal> get_S1();
    public abstract virtual void set_S1(Nullable`1<decimal> value);
    public abstract virtual Nullable`1<decimal> get_S2();
    public abstract virtual void set_S2(Nullable`1<decimal> value);
    public abstract virtual Nullable`1<decimal> get_S3();
    public abstract virtual void set_S3(Nullable`1<decimal> value);
    public abstract virtual Nullable`1<decimal> get_S4();
    public abstract virtual void set_S4(Nullable`1<decimal> value);
}
public interface Skender.Stock.Indicators.IQuote {
    public decimal Open { get; }
    public decimal High { get; }
    public decimal Low { get; }
    public decimal Close { get; }
    public decimal Volume { get; }
    public abstract virtual decimal get_Open();
    public abstract virtual decimal get_High();
    public abstract virtual decimal get_Low();
    public abstract virtual decimal get_Close();
    public abstract virtual decimal get_Volume();
}
public interface Skender.Stock.Indicators.IReusableResult {
    public Nullable`1<double> Value { get; }
    public abstract virtual Nullable`1<double> get_Value();
}
public interface Skender.Stock.Indicators.ISeries {
    public DateTime Date { get; }
    public abstract virtual DateTime get_Date();
}
public class Skender.Stock.Indicators.KamaResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <ER>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Kama>k__BackingField;
    public Nullable`1<double> ER { get; public set; }
    public Nullable`1<double> Kama { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public KamaResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_ER();
    [CompilerGeneratedAttribute]
public void set_ER(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Kama();
    [CompilerGeneratedAttribute]
public void set_Kama(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.KeltnerResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <UpperBand>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Centerline>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <LowerBand>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Width>k__BackingField;
    public Nullable`1<double> UpperBand { get; public set; }
    public Nullable`1<double> Centerline { get; public set; }
    public Nullable`1<double> LowerBand { get; public set; }
    public Nullable`1<double> Width { get; public set; }
    public KeltnerResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_UpperBand();
    [CompilerGeneratedAttribute]
public void set_UpperBand(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Centerline();
    [CompilerGeneratedAttribute]
public void set_Centerline(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_LowerBand();
    [CompilerGeneratedAttribute]
public void set_LowerBand(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(Nullable`1<double> value);
}
public class Skender.Stock.Indicators.KvoResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Oscillator>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Signal>k__BackingField;
    public Nullable`1<double> Oscillator { get; public set; }
    public Nullable`1<double> Signal { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    internal KvoResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Oscillator();
    [CompilerGeneratedAttribute]
public void set_Oscillator(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Signal();
    [CompilerGeneratedAttribute]
public void set_Signal(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.MacdResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Macd>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Signal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Histogram>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <FastEma>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <SlowEma>k__BackingField;
    public Nullable`1<double> Macd { get; public set; }
    public Nullable`1<double> Signal { get; public set; }
    public Nullable`1<double> Histogram { get; public set; }
    public Nullable`1<double> FastEma { get; public set; }
    public Nullable`1<double> SlowEma { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public MacdResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Macd();
    [CompilerGeneratedAttribute]
public void set_Macd(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Signal();
    [CompilerGeneratedAttribute]
public void set_Signal(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Histogram();
    [CompilerGeneratedAttribute]
public void set_Histogram(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_FastEma();
    [CompilerGeneratedAttribute]
public void set_FastEma(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_SlowEma();
    [CompilerGeneratedAttribute]
public void set_SlowEma(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.MaEnvelopeResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Centerline>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <UpperEnvelope>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <LowerEnvelope>k__BackingField;
    public Nullable`1<double> Centerline { get; public set; }
    public Nullable`1<double> UpperEnvelope { get; public set; }
    public Nullable`1<double> LowerEnvelope { get; public set; }
    public MaEnvelopeResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Centerline();
    [CompilerGeneratedAttribute]
public void set_Centerline(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_UpperEnvelope();
    [CompilerGeneratedAttribute]
public void set_UpperEnvelope(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_LowerEnvelope();
    [CompilerGeneratedAttribute]
public void set_LowerEnvelope(Nullable`1<double> value);
}
public class Skender.Stock.Indicators.MamaResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Mama>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Fama>k__BackingField;
    public Nullable`1<double> Mama { get; public set; }
    public Nullable`1<double> Fama { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public MamaResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Mama();
    [CompilerGeneratedAttribute]
public void set_Mama(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Fama();
    [CompilerGeneratedAttribute]
public void set_Fama(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public enum Skender.Stock.Indicators.Match : Enum {
    public int value__;
    public static Match BullConfirmed;
    public static Match BullSignal;
    public static Match BullBasis;
    public static Match Neutral;
    public static Match None;
    public static Match BearBasis;
    public static Match BearSignal;
    public static Match BearConfirmed;
}
public enum Skender.Stock.Indicators.MaType : Enum {
    public int value__;
    public static MaType ALMA;
    public static MaType DEMA;
    public static MaType EPMA;
    public static MaType EMA;
    public static MaType HMA;
    public static MaType KAMA;
    public static MaType MAMA;
    public static MaType SMA;
    public static MaType SMMA;
    public static MaType TEMA;
    public static MaType WMA;
}
public class Skender.Stock.Indicators.MfiResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Mfi>k__BackingField;
    public Nullable`1<double> Mfi { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public MfiResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Mfi();
    [CompilerGeneratedAttribute]
public void set_Mfi(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
[ExtensionAttribute]
public static class Skender.Stock.Indicators.NullMath : object {
    [ExtensionAttribute]
public static Nullable`1<double> Abs(Nullable`1<double> value);
    [ExtensionAttribute]
public static Nullable`1<decimal> Round(Nullable`1<decimal> value, int digits);
    [ExtensionAttribute]
public static Nullable`1<double> Round(Nullable`1<double> value, int digits);
    [ExtensionAttribute]
public static double Round(double value, int digits);
    [ExtensionAttribute]
public static decimal Round(decimal value, int digits);
    [ExtensionAttribute]
public static double Null2NaN(Nullable`1<double> value);
    [ExtensionAttribute]
public static Nullable`1<double> NaN2Null(Nullable`1<double> value);
    [ExtensionAttribute]
public static Nullable`1<double> NaN2Null(double value);
}
public enum Skender.Stock.Indicators.NullTo : Enum {
    public int value__;
    public static NullTo NaN;
    public static NullTo Null;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Skender.Stock.Indicators.Numerix : object {
    [ExtensionAttribute]
public static double StdDev(Double[] values);
    public static double Slope(Double[] x, Double[] y);
    [ExtensionAttribute]
internal static DateTime RoundDown(DateTime dateTime, TimeSpan interval);
    [ExtensionAttribute]
internal static TimeSpan ToTimeSpan(PeriodSize periodSize);
    [ExtensionAttribute]
internal static int GetDecimalPlaces(decimal n);
}
public class Skender.Stock.Indicators.ObvResult : ResultBase {
    [CompilerGeneratedAttribute]
private double <Obv>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <ObvSma>k__BackingField;
    public double Obv { get; public set; }
    public Nullable`1<double> ObvSma { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public ObvResult(DateTime date);
    [CompilerGeneratedAttribute]
public double get_Obv();
    [CompilerGeneratedAttribute]
public void set_Obv(double value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_ObvSma();
    [CompilerGeneratedAttribute]
public void set_ObvSma(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.ParabolicSarResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Sar>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReversal>k__BackingField;
    public Nullable`1<double> Sar { get; public set; }
    public Nullable`1<bool> IsReversal { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public ParabolicSarResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Sar();
    [CompilerGeneratedAttribute]
public void set_Sar(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReversal();
    [CompilerGeneratedAttribute]
public void set_IsReversal(Nullable`1<bool> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public enum Skender.Stock.Indicators.PeriodSize : Enum {
    public int value__;
    public static PeriodSize Month;
    public static PeriodSize Week;
    public static PeriodSize Day;
    public static PeriodSize FourHours;
    public static PeriodSize TwoHours;
    public static PeriodSize OneHour;
    public static PeriodSize ThirtyMinutes;
    public static PeriodSize FifteenMinutes;
    public static PeriodSize FiveMinutes;
    public static PeriodSize ThreeMinutes;
    public static PeriodSize TwoMinutes;
    public static PeriodSize OneMinute;
}
public class Skender.Stock.Indicators.PivotPointsResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <R4>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <R3>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <R2>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <R1>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <PP>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <S1>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <S2>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <S3>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <S4>k__BackingField;
    public Nullable`1<decimal> R4 { get; public set; }
    public Nullable`1<decimal> R3 { get; public set; }
    public Nullable`1<decimal> R2 { get; public set; }
    public Nullable`1<decimal> R1 { get; public set; }
    public Nullable`1<decimal> PP { get; public set; }
    public Nullable`1<decimal> S1 { get; public set; }
    public Nullable`1<decimal> S2 { get; public set; }
    public Nullable`1<decimal> S3 { get; public set; }
    public Nullable`1<decimal> S4 { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_R4();
    [CompilerGeneratedAttribute]
public sealed virtual void set_R4(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_R3();
    [CompilerGeneratedAttribute]
public sealed virtual void set_R3(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_R2();
    [CompilerGeneratedAttribute]
public sealed virtual void set_R2(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_R1();
    [CompilerGeneratedAttribute]
public sealed virtual void set_R1(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_PP();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PP(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_S1();
    [CompilerGeneratedAttribute]
public sealed virtual void set_S1(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_S2();
    [CompilerGeneratedAttribute]
public sealed virtual void set_S2(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_S3();
    [CompilerGeneratedAttribute]
public sealed virtual void set_S3(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_S4();
    [CompilerGeneratedAttribute]
public sealed virtual void set_S4(Nullable`1<decimal> value);
}
public enum Skender.Stock.Indicators.PivotPointType : Enum {
    public int value__;
    public static PivotPointType Standard;
    public static PivotPointType Camarilla;
    public static PivotPointType Demark;
    public static PivotPointType Fibonacci;
    public static PivotPointType Woodie;
}
public class Skender.Stock.Indicators.PivotsResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <HighPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <LowPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <HighLine>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <LowLine>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PivotTrend> <HighTrend>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PivotTrend> <LowTrend>k__BackingField;
    public Nullable`1<decimal> HighPoint { get; public set; }
    public Nullable`1<decimal> LowPoint { get; public set; }
    public Nullable`1<decimal> HighLine { get; public set; }
    public Nullable`1<decimal> LowLine { get; public set; }
    public Nullable`1<PivotTrend> HighTrend { get; public set; }
    public Nullable`1<PivotTrend> LowTrend { get; public set; }
    public PivotsResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_HighPoint();
    [CompilerGeneratedAttribute]
public void set_HighPoint(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_LowPoint();
    [CompilerGeneratedAttribute]
public void set_LowPoint(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_HighLine();
    [CompilerGeneratedAttribute]
public void set_HighLine(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_LowLine();
    [CompilerGeneratedAttribute]
public void set_LowLine(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PivotTrend> get_HighTrend();
    [CompilerGeneratedAttribute]
public void set_HighTrend(Nullable`1<PivotTrend> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PivotTrend> get_LowTrend();
    [CompilerGeneratedAttribute]
public void set_LowTrend(Nullable`1<PivotTrend> value);
}
public enum Skender.Stock.Indicators.PivotTrend : Enum {
    public int value__;
    public static PivotTrend HH;
    public static PivotTrend LH;
    public static PivotTrend HL;
    public static PivotTrend LL;
}
public class Skender.Stock.Indicators.PmoResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Pmo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Signal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <RocEma>k__BackingField;
    public Nullable`1<double> Pmo { get; public set; }
    public Nullable`1<double> Signal { get; public set; }
    internal Nullable`1<double> RocEma { get; internal set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public PmoResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Pmo();
    [CompilerGeneratedAttribute]
public void set_Pmo(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Signal();
    [CompilerGeneratedAttribute]
public void set_Signal(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<double> get_RocEma();
    [CompilerGeneratedAttribute]
internal void set_RocEma(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.PrsResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Prs>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <PrsSma>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <PrsPercent>k__BackingField;
    public Nullable`1<double> Prs { get; public set; }
    public Nullable`1<double> PrsSma { get; public set; }
    public Nullable`1<double> PrsPercent { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public PrsResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Prs();
    [CompilerGeneratedAttribute]
public void set_Prs(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_PrsSma();
    [CompilerGeneratedAttribute]
public void set_PrsSma(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_PrsPercent();
    [CompilerGeneratedAttribute]
public void set_PrsPercent(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Skender.Stock.Indicators.Pruning : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> RemoveWarmupPeriods(IEnumerable`1<T> series, int removePeriods);
    [ExtensionAttribute]
internal static List`1<T> Remove(IEnumerable`1<T> series, int removePeriods);
}
public class Skender.Stock.Indicators.PvoResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Pvo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Signal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Histogram>k__BackingField;
    public Nullable`1<double> Pvo { get; public set; }
    public Nullable`1<double> Signal { get; public set; }
    public Nullable`1<double> Histogram { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public PvoResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Pvo();
    [CompilerGeneratedAttribute]
public void set_Pvo(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Signal();
    [CompilerGeneratedAttribute]
public void set_Signal(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Histogram();
    [CompilerGeneratedAttribute]
public void set_Histogram(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.Quote : object {
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Open>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <High>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Low>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Close>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Volume>k__BackingField;
    public DateTime Date { get; public set; }
    public decimal Open { get; public set; }
    public decimal High { get; public set; }
    public decimal Low { get; public set; }
    public decimal Close { get; public set; }
    public decimal Volume { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_Open();
    [CompilerGeneratedAttribute]
public void set_Open(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_High();
    [CompilerGeneratedAttribute]
public void set_High(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_Low();
    [CompilerGeneratedAttribute]
public void set_Low(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_Close();
    [CompilerGeneratedAttribute]
public void set_Close(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_Volume();
    [CompilerGeneratedAttribute]
public void set_Volume(decimal value);
}
internal class Skender.Stock.Indicators.QuoteD : object {
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Open>k__BackingField;
    [CompilerGeneratedAttribute]
private double <High>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Low>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Close>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Volume>k__BackingField;
    internal DateTime Date { get; internal set; }
    internal double Open { get; internal set; }
    internal double High { get; internal set; }
    internal double Low { get; internal set; }
    internal double Close { get; internal set; }
    internal double Volume { get; internal set; }
    [CompilerGeneratedAttribute]
internal DateTime get_Date();
    [CompilerGeneratedAttribute]
internal void set_Date(DateTime value);
    [CompilerGeneratedAttribute]
internal double get_Open();
    [CompilerGeneratedAttribute]
internal void set_Open(double value);
    [CompilerGeneratedAttribute]
internal double get_High();
    [CompilerGeneratedAttribute]
internal void set_High(double value);
    [CompilerGeneratedAttribute]
internal double get_Low();
    [CompilerGeneratedAttribute]
internal void set_Low(double value);
    [CompilerGeneratedAttribute]
internal double get_Close();
    [CompilerGeneratedAttribute]
internal void set_Close(double value);
    [CompilerGeneratedAttribute]
internal double get_Volume();
    [CompilerGeneratedAttribute]
internal void set_Volume(double value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Skender.Stock.Indicators.QuoteObserver : object {
    private IDisposable unsubscriber;
    [CompilerGeneratedAttribute]
private QuoteProvider <Supplier>k__BackingField;
    internal QuoteProvider Supplier { get; internal set; }
    [CompilerGeneratedAttribute]
internal QuoteProvider get_Supplier();
    [CompilerGeneratedAttribute]
internal void set_Supplier(QuoteProvider value);
    public virtual void Subscribe();
    public virtual void OnCompleted();
    [NullableContextAttribute("1")]
public virtual void OnError(Exception error);
    [NullableContextAttribute("1")]
public virtual void OnNext(Quote value);
    public virtual void Unsubscribe();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Skender.Stock.Indicators.QuoteProvider : object {
    private List`1<IObserver`1<Quote>> observers;
    [CompilerGeneratedAttribute]
private List`1<Quote> <ProtectedQuotes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OverflowCount>k__BackingField;
    public IEnumerable`1<Quote> Quotes { get; }
    internal List`1<Quote> ProtectedQuotes { get; private set; }
    private int OverflowCount { get; private set; }
    public IEnumerable`1<Quote> get_Quotes();
    [CompilerGeneratedAttribute]
internal List`1<Quote> get_ProtectedQuotes();
    [CompilerGeneratedAttribute]
private void set_ProtectedQuotes(List`1<Quote> value);
    [CompilerGeneratedAttribute]
private int get_OverflowCount();
    [CompilerGeneratedAttribute]
private void set_OverflowCount(int value);
    public void Add(Quote quote);
    public void Add(IEnumerable`1<Quote> quotes);
    public sealed virtual IDisposable Subscribe(IObserver`1<Quote> observer);
    public void EndTransmission();
    private void NotifyObservers(Quote quote);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Skender.Stock.Indicators.QuoteUtility : object {
    private static CultureInfo NativeCulture;
    private static QuoteUtility();
    [ExtensionAttribute]
public static IEnumerable`1<Quote> Aggregate(IEnumerable`1<TQuote> quotes, PeriodSize newSize);
    [ExtensionAttribute]
public static IEnumerable`1<Quote> Aggregate(IEnumerable`1<TQuote> quotes, TimeSpan timeSpan);
    [ExtensionAttribute]
public static Collection`1<ValueTuple`2<DateTime, double>> ToTupleCollection(IEnumerable`1<TQuote> quotes, CandlePart candlePart);
    [ExtensionAttribute]
internal static List`1<ValueTuple`2<DateTime, double>> ToTuple(IEnumerable`1<TQuote> quotes, CandlePart candlePart);
    [ExtensionAttribute]
public static Collection`1<ValueTuple`2<DateTime, double>> ToSortedCollection(IEnumerable`1<ValueTuple`2<DateTime, double>> tuples);
    [ExtensionAttribute]
internal static List`1<ValueTuple`2<DateTime, double>> ToSortedList(IEnumerable`1<ValueTuple`2<DateTime, double>> tuples);
    [ExtensionAttribute]
internal static List`1<QuoteD> ToQuoteD(IEnumerable`1<TQuote> quotes);
    [ExtensionAttribute]
internal static List`1<ValueTuple`2<DateTime, double>> ToTuple(List`1<QuoteD> qdList, CandlePart candlePart);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
internal static ValueTuple`2<DateTime, double> ToTuple(TQuote q, CandlePart candlePart);
    [ExtensionAttribute]
internal static BasicData ToBasicData(TQuote q, CandlePart candlePart);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
internal static ValueTuple`2<DateTime, double> ToTuple(QuoteD q, CandlePart candlePart);
    [ExtensionAttribute]
public static IEnumerable`1<TQuote> Validate(IEnumerable`1<TQuote> quotes);
    [ExtensionAttribute]
public static IEnumerable`1<ValueTuple`2<DateTime, double>> Use(IEnumerable`1<TQuote> quotes, CandlePart candlePart);
    [ExtensionAttribute]
public static UseObserver Use(QuoteProvider provider, CandlePart candlePart);
}
public class Skender.Stock.Indicators.RenkoResult : ResultBase {
    [CompilerGeneratedAttribute]
private decimal <Open>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <High>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Low>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Close>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Volume>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUp>k__BackingField;
    public decimal Open { get; public set; }
    public decimal High { get; public set; }
    public decimal Low { get; public set; }
    public decimal Close { get; public set; }
    public decimal Volume { get; public set; }
    public bool IsUp { get; public set; }
    public RenkoResult(DateTime date);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_Open();
    [CompilerGeneratedAttribute]
public void set_Open(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_High();
    [CompilerGeneratedAttribute]
public void set_High(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_Low();
    [CompilerGeneratedAttribute]
public void set_Low(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_Close();
    [CompilerGeneratedAttribute]
public void set_Close(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_Volume();
    [CompilerGeneratedAttribute]
public void set_Volume(decimal value);
    [CompilerGeneratedAttribute]
public bool get_IsUp();
    [CompilerGeneratedAttribute]
public void set_IsUp(bool value);
}
public abstract class Skender.Stock.Indicators.ResultBase : object {
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    public DateTime Date { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(DateTime value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Skender.Stock.Indicators.ResultUtility : object {
    [ExtensionAttribute]
public static IEnumerable`1<TResultA> SyncIndex(IEnumerable`1<TResultA> syncMe, IEnumerable`1<TResultB> toMatch, SyncType syncType);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Condense(IEnumerable`1<TResult> results);
    [ExtensionAttribute]
public static Collection`1<ValueTuple`2<DateTime, double>> ToTupleChainable(IEnumerable`1<TResult> reusable);
    [ExtensionAttribute]
internal static List`1<ValueTuple`2<DateTime, double>> ToTuple(IEnumerable`1<TResult> reusable);
    [ExtensionAttribute]
public static Collection`1<ValueTuple`2<DateTime, double>> ToTupleNaN(IEnumerable`1<TResult> reusable);
}
public class Skender.Stock.Indicators.RocResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Momentum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Roc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <RocSma>k__BackingField;
    public Nullable`1<double> Momentum { get; public set; }
    public Nullable`1<double> Roc { get; public set; }
    public Nullable`1<double> RocSma { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public RocResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Momentum();
    [CompilerGeneratedAttribute]
public void set_Momentum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Roc();
    [CompilerGeneratedAttribute]
public void set_Roc(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_RocSma();
    [CompilerGeneratedAttribute]
public void set_RocSma(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.RocWbResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Roc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <RocEma>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <UpperBand>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <LowerBand>k__BackingField;
    public Nullable`1<double> Roc { get; public set; }
    public Nullable`1<double> RocEma { get; public set; }
    public Nullable`1<double> UpperBand { get; public set; }
    public Nullable`1<double> LowerBand { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public RocWbResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Roc();
    [CompilerGeneratedAttribute]
public void set_Roc(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_RocEma();
    [CompilerGeneratedAttribute]
public void set_RocEma(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_UpperBand();
    [CompilerGeneratedAttribute]
public void set_UpperBand(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_LowerBand();
    [CompilerGeneratedAttribute]
public void set_LowerBand(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.RollingPivotsResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <R4>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <R3>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <R2>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <R1>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <PP>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <S1>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <S2>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <S3>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <S4>k__BackingField;
    public Nullable`1<decimal> R4 { get; public set; }
    public Nullable`1<decimal> R3 { get; public set; }
    public Nullable`1<decimal> R2 { get; public set; }
    public Nullable`1<decimal> R1 { get; public set; }
    public Nullable`1<decimal> PP { get; public set; }
    public Nullable`1<decimal> S1 { get; public set; }
    public Nullable`1<decimal> S2 { get; public set; }
    public Nullable`1<decimal> S3 { get; public set; }
    public Nullable`1<decimal> S4 { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_R4();
    [CompilerGeneratedAttribute]
public sealed virtual void set_R4(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_R3();
    [CompilerGeneratedAttribute]
public sealed virtual void set_R3(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_R2();
    [CompilerGeneratedAttribute]
public sealed virtual void set_R2(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_R1();
    [CompilerGeneratedAttribute]
public sealed virtual void set_R1(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_PP();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PP(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_S1();
    [CompilerGeneratedAttribute]
public sealed virtual void set_S1(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_S2();
    [CompilerGeneratedAttribute]
public sealed virtual void set_S2(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_S3();
    [CompilerGeneratedAttribute]
public sealed virtual void set_S3(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_S4();
    [CompilerGeneratedAttribute]
public sealed virtual void set_S4(Nullable`1<decimal> value);
}
public class Skender.Stock.Indicators.RsiResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Rsi>k__BackingField;
    public Nullable`1<double> Rsi { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public RsiResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Rsi();
    [CompilerGeneratedAttribute]
public void set_Rsi(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Skender.Stock.Indicators.Seeking : object {
    [ExtensionAttribute]
public static TSeries Find(IEnumerable`1<TSeries> series, DateTime lookupDate);
    [ExtensionAttribute]
public static int FindIndex(List`1<TSeries> series, DateTime lookupDate);
}
public class Skender.Stock.Indicators.SlopeResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Slope>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Intercept>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <StdDev>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <RSquared>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Line>k__BackingField;
    public Nullable`1<double> Slope { get; public set; }
    public Nullable`1<double> Intercept { get; public set; }
    public Nullable`1<double> StdDev { get; public set; }
    public Nullable`1<double> RSquared { get; public set; }
    public Nullable`1<decimal> Line { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public SlopeResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Slope();
    [CompilerGeneratedAttribute]
public void set_Slope(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Intercept();
    [CompilerGeneratedAttribute]
public void set_Intercept(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_StdDev();
    [CompilerGeneratedAttribute]
public void set_StdDev(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_RSquared();
    [CompilerGeneratedAttribute]
public void set_RSquared(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(Nullable`1<decimal> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.SmaAnalysis : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Sma>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Mad>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Mse>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Mape>k__BackingField;
    public Nullable`1<double> Sma { get; public set; }
    public Nullable`1<double> Mad { get; public set; }
    public Nullable`1<double> Mse { get; public set; }
    public Nullable`1<double> Mape { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public SmaAnalysis(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Sma();
    [CompilerGeneratedAttribute]
public void set_Sma(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Mad();
    [CompilerGeneratedAttribute]
public void set_Mad(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Mse();
    [CompilerGeneratedAttribute]
public void set_Mse(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Mape();
    [CompilerGeneratedAttribute]
public void set_Mape(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Skender.Stock.Indicators.SmaObserver : ChainProvider {
    [CompilerGeneratedAttribute]
private List`1<SmaResult> <ProtectedResults>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LookbackPeriods>k__BackingField;
    public IEnumerable`1<SmaResult> Results { get; }
    internal List`1<SmaResult> ProtectedResults { get; internal set; }
    private int LookbackPeriods { get; private set; }
    public SmaObserver(TupleProvider provider, int lookbackPeriods);
    public IEnumerable`1<SmaResult> get_Results();
    [CompilerGeneratedAttribute]
internal List`1<SmaResult> get_ProtectedResults();
    [CompilerGeneratedAttribute]
internal void set_ProtectedResults(List`1<SmaResult> value);
    [CompilerGeneratedAttribute]
private int get_LookbackPeriods();
    [CompilerGeneratedAttribute]
private void set_LookbackPeriods(int value);
    internal static void Validate(int lookbackPeriods);
    internal static double Increment(List`1<ValueTuple`2<DateTime, double>> values, int index, int lookbackPeriods);
    [NullableContextAttribute("0")]
public virtual void OnNext(ValueTuple`2<DateTime, double> value);
    [NullableContextAttribute("0")]
internal void Add(ValueTuple`2<DateTime, double> tp);
    private void Initialize();
}
public class Skender.Stock.Indicators.SmaResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Sma>k__BackingField;
    public Nullable`1<double> Sma { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public SmaResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Sma();
    [CompilerGeneratedAttribute]
public void set_Sma(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.SmiResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Smi>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Signal>k__BackingField;
    public Nullable`1<double> Smi { get; public set; }
    public Nullable`1<double> Signal { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public SmiResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Smi();
    [CompilerGeneratedAttribute]
public void set_Smi(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Signal();
    [CompilerGeneratedAttribute]
public void set_Signal(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.SmmaResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Smma>k__BackingField;
    public Nullable`1<double> Smma { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public SmmaResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Smma();
    [CompilerGeneratedAttribute]
public void set_Smma(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Skender.Stock.Indicators.Sorting : object {
    [ExtensionAttribute]
public static Collection`1<TSeries> ToSortedCollection(IEnumerable`1<TSeries> series);
    [ExtensionAttribute]
internal static List`1<TSeries> ToSortedList(IEnumerable`1<TSeries> series);
}
public class Skender.Stock.Indicators.StarcBandsResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <UpperBand>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Centerline>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <LowerBand>k__BackingField;
    public Nullable`1<double> UpperBand { get; public set; }
    public Nullable`1<double> Centerline { get; public set; }
    public Nullable`1<double> LowerBand { get; public set; }
    public StarcBandsResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_UpperBand();
    [CompilerGeneratedAttribute]
public void set_UpperBand(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Centerline();
    [CompilerGeneratedAttribute]
public void set_Centerline(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_LowerBand();
    [CompilerGeneratedAttribute]
public void set_LowerBand(Nullable`1<double> value);
}
public class Skender.Stock.Indicators.StcResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Stc>k__BackingField;
    public Nullable`1<double> Stc { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public StcResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Stc();
    [CompilerGeneratedAttribute]
public void set_Stc(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.StdDevChannelsResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Centerline>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <UpperChannel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <LowerChannel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BreakPoint>k__BackingField;
    public Nullable`1<double> Centerline { get; public set; }
    public Nullable`1<double> UpperChannel { get; public set; }
    public Nullable`1<double> LowerChannel { get; public set; }
    public bool BreakPoint { get; public set; }
    public StdDevChannelsResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Centerline();
    [CompilerGeneratedAttribute]
public void set_Centerline(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_UpperChannel();
    [CompilerGeneratedAttribute]
public void set_UpperChannel(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_LowerChannel();
    [CompilerGeneratedAttribute]
public void set_LowerChannel(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public bool get_BreakPoint();
    [CompilerGeneratedAttribute]
public void set_BreakPoint(bool value);
}
public class Skender.Stock.Indicators.StdDevResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <StdDev>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Mean>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <ZScore>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <StdDevSma>k__BackingField;
    public Nullable`1<double> StdDev { get; public set; }
    public Nullable`1<double> Mean { get; public set; }
    public Nullable`1<double> ZScore { get; public set; }
    public Nullable`1<double> StdDevSma { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public StdDevResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_StdDev();
    [CompilerGeneratedAttribute]
public void set_StdDev(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Mean();
    [CompilerGeneratedAttribute]
public void set_Mean(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_ZScore();
    [CompilerGeneratedAttribute]
public void set_ZScore(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_StdDevSma();
    [CompilerGeneratedAttribute]
public void set_StdDevSma(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.StochResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Oscillator>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Signal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <PercentJ>k__BackingField;
    public Nullable`1<double> Oscillator { get; public set; }
    public Nullable`1<double> Signal { get; public set; }
    public Nullable`1<double> PercentJ { get; public set; }
    public Nullable`1<double> K { get; }
    public Nullable`1<double> D { get; }
    public Nullable`1<double> J { get; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public StochResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Oscillator();
    [CompilerGeneratedAttribute]
public void set_Oscillator(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Signal();
    [CompilerGeneratedAttribute]
public void set_Signal(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_PercentJ();
    [CompilerGeneratedAttribute]
public void set_PercentJ(Nullable`1<double> value);
    public Nullable`1<double> get_K();
    public Nullable`1<double> get_D();
    public Nullable`1<double> get_J();
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.StochRsiResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <StochRsi>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Signal>k__BackingField;
    public Nullable`1<double> StochRsi { get; public set; }
    public Nullable`1<double> Signal { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public StochRsiResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_StochRsi();
    [CompilerGeneratedAttribute]
public void set_StochRsi(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Signal();
    [CompilerGeneratedAttribute]
public void set_Signal(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.SuperTrendResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <SuperTrend>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <UpperBand>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <LowerBand>k__BackingField;
    public Nullable`1<decimal> SuperTrend { get; public set; }
    public Nullable`1<decimal> UpperBand { get; public set; }
    public Nullable`1<decimal> LowerBand { get; public set; }
    public SuperTrendResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_SuperTrend();
    [CompilerGeneratedAttribute]
public void set_SuperTrend(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_UpperBand();
    [CompilerGeneratedAttribute]
public void set_UpperBand(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_LowerBand();
    [CompilerGeneratedAttribute]
public void set_LowerBand(Nullable`1<decimal> value);
}
public enum Skender.Stock.Indicators.SyncType : Enum {
    public int value__;
    public static SyncType Prepend;
    public static SyncType AppendOnly;
    public static SyncType RemoveOnly;
    public static SyncType FullMatch;
}
public class Skender.Stock.Indicators.T3Result : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <T3>k__BackingField;
    public Nullable`1<double> T3 { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public T3Result(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_T3();
    [CompilerGeneratedAttribute]
public void set_T3(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.TemaResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Tema>k__BackingField;
    public Nullable`1<double> Tema { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public TemaResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Tema();
    [CompilerGeneratedAttribute]
public void set_Tema(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
[ExtensionAttribute]
public static class Skender.Stock.Indicators.Transforms : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static Collection`1<T> ToCollection(IEnumerable`1<T> source);
}
public class Skender.Stock.Indicators.TrixResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Ema3>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Trix>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Signal>k__BackingField;
    public Nullable`1<double> Ema3 { get; public set; }
    public Nullable`1<double> Trix { get; public set; }
    public Nullable`1<double> Signal { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public TrixResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Ema3();
    [CompilerGeneratedAttribute]
public void set_Ema3(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Trix();
    [CompilerGeneratedAttribute]
public void set_Trix(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Signal();
    [CompilerGeneratedAttribute]
public void set_Signal(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.TrResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Tr>k__BackingField;
    public Nullable`1<double> Tr { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public TrResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Tr();
    [CompilerGeneratedAttribute]
public void set_Tr(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.TsiResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Tsi>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Signal>k__BackingField;
    public Nullable`1<double> Tsi { get; public set; }
    public Nullable`1<double> Signal { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public TsiResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Tsi();
    [CompilerGeneratedAttribute]
public void set_Tsi(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Signal();
    [CompilerGeneratedAttribute]
public void set_Signal(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Skender.Stock.Indicators.TupleObserver : object {
    private IDisposable unsubscriber;
    [CompilerGeneratedAttribute]
private TupleProvider <Supplier>k__BackingField;
    internal TupleProvider Supplier { get; internal set; }
    [CompilerGeneratedAttribute]
internal TupleProvider get_Supplier();
    [CompilerGeneratedAttribute]
internal void set_Supplier(TupleProvider value);
    public virtual void Subscribe();
    public virtual void OnCompleted();
    [NullableContextAttribute("1")]
public virtual void OnError(Exception error);
    [NullableContextAttribute("0")]
public virtual void OnNext(ValueTuple`2<DateTime, double> value);
    public virtual void Unsubscribe();
}
public abstract class Skender.Stock.Indicators.TupleProvider : QuoteObserver {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IObserver`1<ValueTuple`2<DateTime, double>>> observers;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<DateTime, double>> <ProtectedTuples>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OverflowCount>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IEnumerable`1<ValueTuple`2<DateTime, double>> Output { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<ValueTuple`2<DateTime, double>> ProtectedTuples { get; internal set; }
    private int OverflowCount { get; private set; }
    internal IEnumerable`1<ValueTuple`2<DateTime, double>> get_Output();
    [CompilerGeneratedAttribute]
internal List`1<ValueTuple`2<DateTime, double>> get_ProtectedTuples();
    [CompilerGeneratedAttribute]
internal void set_ProtectedTuples(List`1<ValueTuple`2<DateTime, double>> value);
    [CompilerGeneratedAttribute]
private int get_OverflowCount();
    [CompilerGeneratedAttribute]
private void set_OverflowCount(int value);
    [NullableContextAttribute("1")]
public sealed virtual IDisposable Subscribe(IObserver`1<ValueTuple`2<DateTime, double>> observer);
    public void EndTransmission();
    internal void AddSend(ValueTuple`2<DateTime, double> tuple);
    internal void AddSend(IEnumerable`1<ValueTuple`2<DateTime, double>> tuples);
    private void NotifyObservers(ValueTuple`2<DateTime, double> tuple);
}
public class Skender.Stock.Indicators.UlcerIndexResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <UI>k__BackingField;
    public Nullable`1<double> UI { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public UlcerIndexResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_UI();
    [CompilerGeneratedAttribute]
public void set_UI(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.UltimateResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Ultimate>k__BackingField;
    public Nullable`1<double> Ultimate { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public UltimateResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Ultimate();
    [CompilerGeneratedAttribute]
public void set_Ultimate(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Skender.Stock.Indicators.UseObserver : TupleProvider {
    [CompilerGeneratedAttribute]
private CandlePart <CandlePartSelection>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<ValueTuple`2<DateTime, double>> Results { get; }
    private CandlePart CandlePartSelection { get; private set; }
    [NullableContextAttribute("2")]
public UseObserver(QuoteProvider provider, CandlePart candlePart);
    public IEnumerable`1<ValueTuple`2<DateTime, double>> get_Results();
    [CompilerGeneratedAttribute]
private CandlePart get_CandlePartSelection();
    [CompilerGeneratedAttribute]
private void set_CandlePartSelection(CandlePart value);
    public virtual void OnNext(Quote value);
    internal void HandleArrival(Quote quote);
    private void Initialize();
}
public class Skender.Stock.Indicators.VolatilityStopResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Sar>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsStop>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <UpperBand>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <LowerBand>k__BackingField;
    public Nullable`1<double> Sar { get; public set; }
    public Nullable`1<bool> IsStop { get; public set; }
    public Nullable`1<double> UpperBand { get; public set; }
    public Nullable`1<double> LowerBand { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public VolatilityStopResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Sar();
    [CompilerGeneratedAttribute]
public void set_Sar(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsStop();
    [CompilerGeneratedAttribute]
public void set_IsStop(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_UpperBand();
    [CompilerGeneratedAttribute]
public void set_UpperBand(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_LowerBand();
    [CompilerGeneratedAttribute]
public void set_LowerBand(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.VortexResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Pvi>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Nvi>k__BackingField;
    public Nullable`1<double> Pvi { get; public set; }
    public Nullable`1<double> Nvi { get; public set; }
    public VortexResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Pvi();
    [CompilerGeneratedAttribute]
public void set_Pvi(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Nvi();
    [CompilerGeneratedAttribute]
public void set_Nvi(Nullable`1<double> value);
}
public class Skender.Stock.Indicators.VwapResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Vwap>k__BackingField;
    public Nullable`1<double> Vwap { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public VwapResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Vwap();
    [CompilerGeneratedAttribute]
public void set_Vwap(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.VwmaResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Vwma>k__BackingField;
    public Nullable`1<double> Vwma { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public VwmaResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Vwma();
    [CompilerGeneratedAttribute]
public void set_Vwma(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.WilliamsResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <WilliamsR>k__BackingField;
    public Nullable`1<double> WilliamsR { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public WilliamsResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_WilliamsR();
    [CompilerGeneratedAttribute]
public void set_WilliamsR(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
public class Skender.Stock.Indicators.WmaResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Wma>k__BackingField;
    public Nullable`1<double> Wma { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public WmaResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Wma();
    [CompilerGeneratedAttribute]
public void set_Wma(Nullable`1<double> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
internal class Skender.Stock.Indicators.ZigZagEval : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <High>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Low>k__BackingField;
    internal int Index { get; internal set; }
    internal Nullable`1<decimal> High { get; internal set; }
    internal Nullable`1<decimal> Low { get; internal set; }
    [CompilerGeneratedAttribute]
internal int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    [CompilerGeneratedAttribute]
internal Nullable`1<decimal> get_High();
    [CompilerGeneratedAttribute]
internal void set_High(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<decimal> get_Low();
    [CompilerGeneratedAttribute]
internal void set_Low(Nullable`1<decimal> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Skender.Stock.Indicators.ZigZagPoint : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PointType>k__BackingField;
    internal int Index { get; internal set; }
    internal Nullable`1<decimal> Value { get; internal set; }
    internal string PointType { get; internal set; }
    [CompilerGeneratedAttribute]
internal int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    [CompilerGeneratedAttribute]
internal Nullable`1<decimal> get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
internal string get_PointType();
    [CompilerGeneratedAttribute]
internal void set_PointType(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Skender.Stock.Indicators.ZigZagResult : ResultBase {
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <ZigZag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PointType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <RetraceHigh>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <RetraceLow>k__BackingField;
    public Nullable`1<decimal> ZigZag { get; public set; }
    public string PointType { get; public set; }
    public Nullable`1<decimal> RetraceHigh { get; public set; }
    public Nullable`1<decimal> RetraceLow { get; public set; }
    private Nullable`1<double> Skender.Stock.Indicators.IReusableResult.Value { get; }
    public ZigZagResult(DateTime date);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_ZigZag();
    [CompilerGeneratedAttribute]
public void set_ZigZag(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public string get_PointType();
    [CompilerGeneratedAttribute]
public void set_PointType(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_RetraceHigh();
    [CompilerGeneratedAttribute]
public void set_RetraceHigh(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_RetraceLow();
    [CompilerGeneratedAttribute]
public void set_RetraceLow(Nullable`1<decimal> value);
    private sealed virtual override Nullable`1<double> Skender.Stock.Indicators.IReusableResult.get_Value();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
