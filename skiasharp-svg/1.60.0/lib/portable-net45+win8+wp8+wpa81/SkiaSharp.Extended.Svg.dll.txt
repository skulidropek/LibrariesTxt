internal static class SkiaSharp.Extended.Svg.ColorHelper : object {
    private static Dictionary`2<string, string> hexValues;
    public static Dictionary`2<string, string> HexValues { get; }
    public static bool TryParse(string str, SKColor& color);
    public static Dictionary`2<string, string> get_HexValues();
}
[ExtensionAttribute]
internal static class SkiaSharp.Extended.Svg.SKCanvasExtensions : object {
    [ExtensionAttribute]
public static void DrawRoundRect(SKCanvas canvas, SKRoundedRect rect, SKPaint paint);
    [ExtensionAttribute]
public static void DrawOval(SKCanvas canvas, SKOval oval, SKPaint paint);
    [ExtensionAttribute]
public static void DrawCircle(SKCanvas canvas, SKCircle circle, SKPaint paint);
    [ExtensionAttribute]
public static void DrawLine(SKCanvas canvas, SKLine line, SKPaint paint);
    [ExtensionAttribute]
public static void DrawText(SKCanvas canvas, SKText text);
}
internal class SkiaSharp.Extended.Svg.SKCircle : ValueType {
    [CompilerGeneratedAttribute]
private SKPoint <Center>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Radius>k__BackingField;
    public SKPoint Center { get; }
    public float Radius { get; }
    public SKCircle(SKPoint center, float radius);
    [CompilerGeneratedAttribute]
public SKPoint get_Center();
    [CompilerGeneratedAttribute]
public float get_Radius();
}
internal class SkiaSharp.Extended.Svg.SKLine : ValueType {
    [CompilerGeneratedAttribute]
private SKPoint <P1>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPoint <P2>k__BackingField;
    public SKPoint P1 { get; }
    public SKPoint P2 { get; }
    public SKLine(SKPoint p1, SKPoint p2);
    [CompilerGeneratedAttribute]
public SKPoint get_P1();
    [CompilerGeneratedAttribute]
public SKPoint get_P2();
}
internal class SkiaSharp.Extended.Svg.SKOval : ValueType {
    [CompilerGeneratedAttribute]
private SKPoint <Center>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RadiusX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RadiusY>k__BackingField;
    public SKPoint Center { get; }
    public float RadiusX { get; }
    public float RadiusY { get; }
    public SKRect BoundingRect { get; }
    public SKOval(SKPoint center, float rx, float ry);
    [CompilerGeneratedAttribute]
public SKPoint get_Center();
    [CompilerGeneratedAttribute]
public float get_RadiusX();
    [CompilerGeneratedAttribute]
public float get_RadiusY();
    public SKRect get_BoundingRect();
}
internal class SkiaSharp.Extended.Svg.SKRoundedRect : ValueType {
    [CompilerGeneratedAttribute]
private SKRect <Rect>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RadiusX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RadiusY>k__BackingField;
    public SKRect Rect { get; }
    public float RadiusX { get; }
    public float RadiusY { get; }
    public bool IsRounded { get; }
    public SKRoundedRect(SKRect rect, float rx, float ry);
    [CompilerGeneratedAttribute]
public SKRect get_Rect();
    [CompilerGeneratedAttribute]
public float get_RadiusX();
    [CompilerGeneratedAttribute]
public float get_RadiusY();
    public bool get_IsRounded();
}
public class SkiaSharp.Extended.Svg.SKSvg : object {
    private static float DefaultPPI;
    private static bool DefaultThrowOnUnsupportedElement;
    private static IFormatProvider icult;
    private static XNamespace xlink;
    private static XNamespace svg;
    private static Char[] WS;
    private static Regex unitRe;
    private static Regex percRe;
    private static Regex fillUrlRe;
    private static Regex clipPathUrlRe;
    private static Regex keyValueRe;
    private static Regex WSRe;
    private Dictionary`2<string, XElement> defs;
    private XmlReaderSettings xmlReaderSettings;
    private static MethodInfo createReaderMethod;
    [CompilerGeneratedAttribute]
private float <PixelsPerInch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnUnsupportedElement>k__BackingField;
    [CompilerGeneratedAttribute]
private SKRect <ViewBox>k__BackingField;
    [CompilerGeneratedAttribute]
private SKSize <CanvasSize>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPicture <Picture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public float PixelsPerInch { get; public set; }
    public bool ThrowOnUnsupportedElement { get; public set; }
    public SKRect ViewBox { get; private set; }
    public SKSize CanvasSize { get; private set; }
    public SKPicture Picture { get; private set; }
    public string Description { get; private set; }
    public string Title { get; private set; }
    public string Version { get; private set; }
    private static SKSvg();
    public SKSvg(float pixelsPerInch);
    public SKSvg(SKSize canvasSize);
    public SKSvg(float pixelsPerInch, SKSize canvasSize);
    [CompilerGeneratedAttribute]
public float get_PixelsPerInch();
    [CompilerGeneratedAttribute]
public void set_PixelsPerInch(float value);
    [CompilerGeneratedAttribute]
public bool get_ThrowOnUnsupportedElement();
    [CompilerGeneratedAttribute]
public void set_ThrowOnUnsupportedElement(bool value);
    [CompilerGeneratedAttribute]
public SKRect get_ViewBox();
    [CompilerGeneratedAttribute]
private void set_ViewBox(SKRect value);
    [CompilerGeneratedAttribute]
public SKSize get_CanvasSize();
    [CompilerGeneratedAttribute]
private void set_CanvasSize(SKSize value);
    [CompilerGeneratedAttribute]
public SKPicture get_Picture();
    [CompilerGeneratedAttribute]
private void set_Picture(SKPicture value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
    public SKPicture Load(string filename);
    public SKPicture Load(Stream stream);
    public SKPicture Load(XmlReader reader);
    private static XmlParserContext CreateSvgXmlContext();
    private SKPicture Load(XDocument xdoc);
    private void LoadElements(IEnumerable`1<XElement> elements, SKCanvas canvas, SKPaint stroke, SKPaint fill);
    private void ReadElement(XElement e, SKCanvas canvas, SKPaint stroke, SKPaint fill);
    private SKSvgImage ReadImage(XElement e);
    private SKPath ReadElement(XElement e);
    private SKOval ReadOval(XElement e);
    private SKCircle ReadCircle(XElement e);
    private SKLine ReadLine(XElement e);
    private SKRoundedRect ReadRoundedRect(XElement e);
    private SKText ReadText(XElement e, SKPaint stroke, SKPaint fill);
    private SKText ReadTextSpans(XElement e, SKPoint xy, SKTextAlign textAlign, float baselineShift, SKPaint stroke, SKPaint fill);
    private void ReadFontAttributes(XElement e, SKPaint paint);
    private static SKFontStyleSlant ReadFontStyle(Dictionary`2<string, string> fontStyle, SKFontStyleSlant defaultStyle);
    private int ReadFontWidth(Dictionary`2<string, string> fontStyle, int defaultWidth);
    private int ReadFontWeight(Dictionary`2<string, string> fontStyle, int defaultWeight);
    private void LogOrThrow(string message);
    private string GetString(Dictionary`2<string, string> style, string name, string defaultValue);
    private Dictionary`2<string, string> ReadStyle(string style);
    private Dictionary`2<string, string> ReadStyle(XElement e);
    private static bool HasSvgNamespace(XName name);
    private Dictionary`2<string, string> ReadPaints(XElement e, SKPaint& stroke, SKPaint& fill, bool isGroup);
    private void ReadPaints(Dictionary`2<string, string> style, SKPaint& strokePaint, SKPaint& fillPaint, bool isGroup);
    private SKPaint CreatePaint(bool stroke);
    private SKMatrix ReadTransform(string raw);
    private SKPath ReadClipPath(string raw);
    private SKPath ReadClipPathDefinition(XElement e);
    private SKTextAlign ReadTextAlignment(XElement element);
    private float ReadBaselineShift(XElement element);
    private SKShader ReadGradient(XElement defE);
    private SKShader ReadRadialGradient(XElement e);
    private SKShader ReadLinearGradient(XElement e);
    private static SKShaderTileMode ReadSpreadMethod(XElement e);
    private XElement ReadDefinition(XElement e);
    private XElement ReadHref(XElement e);
    private static string ReadHrefString(XElement e);
    private SortedDictionary`2<float, SKColor> ReadStops(XElement e);
    private float ReadOpacity(Dictionary`2<string, string> style);
    private float ReadNumber(Dictionary`2<string, string> style, string key, float defaultValue);
    private Byte[] ReadUriBytes(string uri);
    private float ReadNumber(string raw);
    private float ReadNumber(XAttribute a);
    private Nullable`1<float> ReadOptionalNumber(XAttribute a);
    private SKRect ReadRectangle(string s);
}
internal class SkiaSharp.Extended.Svg.SKSvgImage : ValueType {
    [CompilerGeneratedAttribute]
private SKRect <Rect>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Bytes>k__BackingField;
    public SKRect Rect { get; }
    public string Uri { get; }
    public Byte[] Bytes { get; }
    public SKSvgImage(SKRect rect, string uri, Byte[] bytes);
    [CompilerGeneratedAttribute]
public SKRect get_Rect();
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public Byte[] get_Bytes();
}
internal class SkiaSharp.Extended.Svg.SKText : object {
    private List`1<SKTextSpan> spans;
    [CompilerGeneratedAttribute]
private SKPoint <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private SKTextAlign <TextAlign>k__BackingField;
    public SKPoint Location { get; }
    public SKTextAlign TextAlign { get; }
    public SKText(SKPoint location, SKTextAlign textAlign);
    public void Append(SKTextSpan span);
    [CompilerGeneratedAttribute]
public SKPoint get_Location();
    [CompilerGeneratedAttribute]
public SKTextAlign get_TextAlign();
    public float MeasureTextWidth();
    public sealed virtual IEnumerator`1<SKTextSpan> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class SkiaSharp.Extended.Svg.SKTextSpan : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPaint <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <X>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <BaselineShift>k__BackingField;
    public string Text { get; }
    public SKPaint Fill { get; }
    public Nullable`1<float> X { get; }
    public Nullable`1<float> Y { get; }
    public Nullable`1<float> BaselineShift { get; }
    public SKTextSpan(string text, SKPaint fill, Nullable`1<float> x, Nullable`1<float> y, Nullable`1<float> baselineShift);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public SKPaint get_Fill();
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_X();
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Y();
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_BaselineShift();
    public float MeasureTextWidth();
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use 'SkiaSharp.Extended.Svg.SKSvg' instead. This type will be removed in the future.")]
public class SkiaSharp.SKSvg : SKSvg {
    public SKSvg(float pixelsPerInch);
    public SKSvg(SKSize canvasSize);
    public SKSvg(float pixelsPerInch, SKSize canvasSize);
}
