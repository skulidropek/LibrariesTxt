[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class SkiaSharp.Views.Forms.Extensions : object {
    [ExtensionAttribute]
public static Point ToFormsPoint(SKPointI point);
    [ExtensionAttribute]
public static Point ToFormsPoint(SKPoint point);
    [ExtensionAttribute]
public static SKPoint ToSKPoint(Point point);
    [ExtensionAttribute]
public static Size ToFormsSize(SKSizeI size);
    [ExtensionAttribute]
public static Size ToFormsSize(SKSize size);
    [ExtensionAttribute]
public static SKSize ToSKSize(Size size);
    [ExtensionAttribute]
public static Rectangle ToFormsRect(SKRectI rect);
    [ExtensionAttribute]
public static Rectangle ToFormsRect(SKRect rect);
    [ExtensionAttribute]
public static SKRect ToSKRect(Rectangle rect);
    [ExtensionAttribute]
public static Color ToFormsColor(SKColor color);
    [ExtensionAttribute]
public static Color ToFormsColor(SKColorF color);
    [ExtensionAttribute]
public static SKColor ToSKColor(Color color);
    [ExtensionAttribute]
public static SKColorF ToSKColorF(Color color);
}
public class SkiaSharp.Views.Forms.GetPropertyValueEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
}
[NullableContextAttribute("1")]
public interface SkiaSharp.Views.Forms.ISKCanvasViewController {
    [CompilerGeneratedAttribute]
public abstract virtual void add_SurfaceInvalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SurfaceInvalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_GetCanvasSize(EventHandler`1<GetPropertyValueEventArgs`1<SKSize>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_GetCanvasSize(EventHandler`1<GetPropertyValueEventArgs`1<SKSize>> value);
    public abstract virtual void OnPaintSurface(SKPaintSurfaceEventArgs e);
    public abstract virtual void OnTouch(SKTouchEventArgs e);
}
[NullableContextAttribute("1")]
public interface SkiaSharp.Views.Forms.ISKGLViewController {
    [CompilerGeneratedAttribute]
public abstract virtual void add_SurfaceInvalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SurfaceInvalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_GetCanvasSize(EventHandler`1<GetPropertyValueEventArgs`1<SKSize>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_GetCanvasSize(EventHandler`1<GetPropertyValueEventArgs`1<SKSize>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_GetGRContext(EventHandler`1<GetPropertyValueEventArgs`1<GRContext>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_GetGRContext(EventHandler`1<GetPropertyValueEventArgs`1<GRContext>> value);
    public abstract virtual void OnPaintSurface(SKPaintGLSurfaceEventArgs e);
    public abstract virtual void OnTouch(SKTouchEventArgs e);
}
internal class SkiaSharp.Views.Forms.Registrar : object {
    internal static void EnsureRegistered(Type type, Type handler);
}
public class SkiaSharp.Views.Forms.SKBitmapImageSource : ImageSource {
    public static BindableProperty BitmapProperty;
    public SKBitmap Bitmap { get; public set; }
    private static SKBitmapImageSource();
    public SKBitmap get_Bitmap();
    public void set_Bitmap(SKBitmap value);
    public virtual Task`1<bool> Cancel();
    public static SKBitmapImageSource op_Implicit(SKBitmap bitmap);
    public static SKBitmap op_Implicit(SKBitmapImageSource source);
    protected virtual void OnPropertyChanged(string propertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RenderWithAttribute("SkiaSharp.Views.Forms.SKCanvasViewRenderer")]
public class SkiaSharp.Views.Forms.SKCanvasView : View {
    public static BindableProperty IgnorePixelScalingProperty;
    public static BindableProperty EnableTouchEventsProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<SKPaintSurfaceEventArgs> PaintSurface;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<SKTouchEventArgs> Touch;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler SurfaceInvalidated;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<GetPropertyValueEventArgs`1<SKSize>> GetCanvasSize;
    public SKSize CanvasSize { get; }
    public bool IgnorePixelScaling { get; public set; }
    public bool EnableTouchEvents { get; public set; }
    private static SKCanvasView();
    [CompilerGeneratedAttribute]
public void add_PaintSurface(EventHandler`1<SKPaintSurfaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PaintSurface(EventHandler`1<SKPaintSurfaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Touch(EventHandler`1<SKTouchEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Touch(EventHandler`1<SKTouchEventArgs> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void add_SurfaceInvalidated(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void remove_SurfaceInvalidated(EventHandler value);
    [CompilerGeneratedAttribute]
private void add_GetCanvasSize(EventHandler`1<GetPropertyValueEventArgs`1<SKSize>> value);
    [CompilerGeneratedAttribute]
private void remove_GetCanvasSize(EventHandler`1<GetPropertyValueEventArgs`1<SKSize>> value);
    public SKSize get_CanvasSize();
    public bool get_IgnorePixelScaling();
    public void set_IgnorePixelScaling(bool value);
    public bool get_EnableTouchEvents();
    public void set_EnableTouchEvents(bool value);
    public void InvalidateSurface();
    protected virtual void OnPaintSurface(SKPaintSurfaceEventArgs e);
    protected virtual void OnTouch(SKTouchEventArgs e);
    private sealed virtual override void SkiaSharp.Views.Forms.ISKCanvasViewController.add_SurfaceInvalidated(EventHandler value);
    private sealed virtual override void SkiaSharp.Views.Forms.ISKCanvasViewController.remove_SurfaceInvalidated(EventHandler value);
    private sealed virtual override void SkiaSharp.Views.Forms.ISKCanvasViewController.add_GetCanvasSize(EventHandler`1<GetPropertyValueEventArgs`1<SKSize>> value);
    private sealed virtual override void SkiaSharp.Views.Forms.ISKCanvasViewController.remove_GetCanvasSize(EventHandler`1<GetPropertyValueEventArgs`1<SKSize>> value);
    private sealed virtual override void SkiaSharp.Views.Forms.ISKCanvasViewController.OnPaintSurface(SKPaintSurfaceEventArgs e);
    private sealed virtual override void SkiaSharp.Views.Forms.ISKCanvasViewController.OnTouch(SKTouchEventArgs e);
    protected virtual SizeRequest OnMeasure(double widthConstraint, double heightConstraint);
}
public class SkiaSharp.Views.Forms.SKCanvasViewRenderer : SKCanvasViewRendererBase`2<SKCanvasView, SKXamlCanvas> {
    protected virtual SKXamlCanvas CreateNativeControl();
}
public abstract class SkiaSharp.Views.Forms.SKCanvasViewRendererBase`2 : ViewRenderer`2<TFormsView, TNativeView> {
    private SKTouchHandler touchHandler;
    private void Initialize();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TFormsView> e);
    protected virtual TNativeView CreateNativeControl();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private SKPoint GetScaledCoord(double x, double y);
    private void OnPaintSurface(object sender, SKPaintSurfaceEventArgs e);
    private void OnSurfaceInvalidated(object sender, EventArgs eventArgs);
    private void OnGetCanvasSize(object sender, GetPropertyValueEventArgs`1<SKSize> e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <Initialize>b__2_0(SKTouchEventArgs args);
    [CompilerGeneratedAttribute]
private SKPoint <Initialize>b__2_1(double x, double y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RenderWithAttribute("SkiaSharp.Views.Forms.SKGLViewRenderer")]
public class SkiaSharp.Views.Forms.SKGLView : View {
    public static BindableProperty HasRenderLoopProperty;
    public static BindableProperty EnableTouchEventsProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<SKPaintGLSurfaceEventArgs> PaintSurface;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<SKTouchEventArgs> Touch;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler SurfaceInvalidated;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<GetPropertyValueEventArgs`1<SKSize>> GetCanvasSize;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<GetPropertyValueEventArgs`1<GRContext>> GetGRContext;
    public bool HasRenderLoop { get; public set; }
    public bool EnableTouchEvents { get; public set; }
    public SKSize CanvasSize { get; }
    public GRContext GRContext { get; }
    private static SKGLView();
    public bool get_HasRenderLoop();
    public void set_HasRenderLoop(bool value);
    public bool get_EnableTouchEvents();
    public void set_EnableTouchEvents(bool value);
    [CompilerGeneratedAttribute]
public void add_PaintSurface(EventHandler`1<SKPaintGLSurfaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PaintSurface(EventHandler`1<SKPaintGLSurfaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Touch(EventHandler`1<SKTouchEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Touch(EventHandler`1<SKTouchEventArgs> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void add_SurfaceInvalidated(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void remove_SurfaceInvalidated(EventHandler value);
    [CompilerGeneratedAttribute]
private void add_GetCanvasSize(EventHandler`1<GetPropertyValueEventArgs`1<SKSize>> value);
    [CompilerGeneratedAttribute]
private void remove_GetCanvasSize(EventHandler`1<GetPropertyValueEventArgs`1<SKSize>> value);
    [CompilerGeneratedAttribute]
private void add_GetGRContext(EventHandler`1<GetPropertyValueEventArgs`1<GRContext>> value);
    [CompilerGeneratedAttribute]
private void remove_GetGRContext(EventHandler`1<GetPropertyValueEventArgs`1<GRContext>> value);
    public SKSize get_CanvasSize();
    public GRContext get_GRContext();
    public void InvalidateSurface();
    protected virtual void OnPaintSurface(SKPaintGLSurfaceEventArgs e);
    protected virtual void OnTouch(SKTouchEventArgs e);
    private sealed virtual override void SkiaSharp.Views.Forms.ISKGLViewController.add_SurfaceInvalidated(EventHandler value);
    private sealed virtual override void SkiaSharp.Views.Forms.ISKGLViewController.remove_SurfaceInvalidated(EventHandler value);
    private sealed virtual override void SkiaSharp.Views.Forms.ISKGLViewController.add_GetCanvasSize(EventHandler`1<GetPropertyValueEventArgs`1<SKSize>> value);
    private sealed virtual override void SkiaSharp.Views.Forms.ISKGLViewController.remove_GetCanvasSize(EventHandler`1<GetPropertyValueEventArgs`1<SKSize>> value);
    private sealed virtual override void SkiaSharp.Views.Forms.ISKGLViewController.add_GetGRContext(EventHandler`1<GetPropertyValueEventArgs`1<GRContext>> value);
    private sealed virtual override void SkiaSharp.Views.Forms.ISKGLViewController.remove_GetGRContext(EventHandler`1<GetPropertyValueEventArgs`1<GRContext>> value);
    private sealed virtual override void SkiaSharp.Views.Forms.ISKGLViewController.OnPaintSurface(SKPaintGLSurfaceEventArgs e);
    private sealed virtual override void SkiaSharp.Views.Forms.ISKGLViewController.OnTouch(SKTouchEventArgs e);
    protected virtual SizeRequest OnMeasure(double widthConstraint, double heightConstraint);
}
public class SkiaSharp.Views.Forms.SKGLViewRenderer : SKGLViewRendererBase`2<SKGLView, SKSwapChainPanel> {
    protected virtual SKSwapChainPanel CreateNativeControl();
    protected virtual void SetupRenderLoop(bool oneShot);
}
public abstract class SkiaSharp.Views.Forms.SKGLViewRendererBase`2 : ViewRenderer`2<TFormsView, TNativeView> {
    private SKTouchHandler touchHandler;
    public GRContext GRContext { get; }
    private void Initialize();
    public GRContext get_GRContext();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<TFormsView> e);
    protected virtual TNativeView CreateNativeControl();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    protected abstract virtual void SetupRenderLoop(bool oneShot);
    private SKPoint GetScaledCoord(double x, double y);
    private void OnSurfaceInvalidated(object sender, EventArgs eventArgs);
    private void OnGetCanvasSize(object sender, GetPropertyValueEventArgs`1<SKSize> e);
    private void OnGetGRContext(object sender, GetPropertyValueEventArgs`1<GRContext> e);
    private void OnPaintSurface(object sender, SKPaintGLSurfaceEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <Initialize>b__2_0(SKTouchEventArgs args);
    [CompilerGeneratedAttribute]
private SKPoint <Initialize>b__2_1(double x, double y);
}
public class SkiaSharp.Views.Forms.SKImageImageSource : ImageSource {
    public static BindableProperty ImageProperty;
    public SKImage Image { get; public set; }
    private static SKImageImageSource();
    public SKImage get_Image();
    public void set_Image(SKImage value);
    public virtual Task`1<bool> Cancel();
    public static SKImageImageSource op_Implicit(SKImage image);
    public static SKImage op_Implicit(SKImageImageSource source);
    protected virtual void OnPropertyChanged(string propertyName);
}
public class SkiaSharp.Views.Forms.SKImageSourceHandler : object {
    public sealed virtual Task`1<ImageSource> LoadImageAsync(ImageSource imagesource, CancellationToken cancelationToken);
}
public enum SkiaSharp.Views.Forms.SKMouseButton : Enum {
    public int value__;
    public static SKMouseButton Unknown;
    public static SKMouseButton Left;
    public static SKMouseButton Middle;
    public static SKMouseButton Right;
}
public class SkiaSharp.Views.Forms.SKPaintGLSurfaceEventArgs : EventArgs {
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
private Nullable`1<GRBackendRenderTargetDesc> rtDesc;
    [CompilerGeneratedAttribute]
private SKSurface <Surface>k__BackingField;
    [CompilerGeneratedAttribute]
private GRBackendRenderTarget <BackendRenderTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private SKColorType <ColorType>k__BackingField;
    [CompilerGeneratedAttribute]
private GRSurfaceOrigin <Origin>k__BackingField;
    public SKSurface Surface { get; private set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use BackendRenderTarget instead.")]
public GRBackendRenderTargetDesc RenderTarget { get; }
    public GRBackendRenderTarget BackendRenderTarget { get; private set; }
    public SKColorType ColorType { get; private set; }
    public GRSurfaceOrigin Origin { get; private set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use SKPaintGLSurfaceEventArgs(SKSurface, GRBackendRenderTarget, SKColorType, GRSurfaceOrigin) instead.")]
public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTargetDesc renderTarget);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKColorType colorType);
    [CompilerGeneratedAttribute]
public SKSurface get_Surface();
    [CompilerGeneratedAttribute]
private void set_Surface(SKSurface value);
    public GRBackendRenderTargetDesc get_RenderTarget();
    [CompilerGeneratedAttribute]
public GRBackendRenderTarget get_BackendRenderTarget();
    [CompilerGeneratedAttribute]
private void set_BackendRenderTarget(GRBackendRenderTarget value);
    [CompilerGeneratedAttribute]
public SKColorType get_ColorType();
    [CompilerGeneratedAttribute]
private void set_ColorType(SKColorType value);
    [CompilerGeneratedAttribute]
public GRSurfaceOrigin get_Origin();
    [CompilerGeneratedAttribute]
private void set_Origin(GRSurfaceOrigin value);
}
public class SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SKSurface <Surface>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <RawInfo>k__BackingField;
    public SKSurface Surface { get; }
    public SKImageInfo Info { get; }
    public SKImageInfo RawInfo { get; }
    public SKPaintSurfaceEventArgs(SKSurface surface, SKImageInfo info);
    public SKPaintSurfaceEventArgs(SKSurface surface, SKImageInfo info, SKImageInfo rawInfo);
    [CompilerGeneratedAttribute]
public SKSurface get_Surface();
    [CompilerGeneratedAttribute]
public SKImageInfo get_Info();
    [CompilerGeneratedAttribute]
public SKImageInfo get_RawInfo();
}
public class SkiaSharp.Views.Forms.SKPictureImageSource : ImageSource {
    public static BindableProperty PictureProperty;
    public static BindableProperty DimensionsProperty;
    public SKPicture Picture { get; public set; }
    public SKSizeI Dimensions { get; public set; }
    private static SKPictureImageSource();
    public SKPicture get_Picture();
    public void set_Picture(SKPicture value);
    public SKSizeI get_Dimensions();
    public void set_Dimensions(SKSizeI value);
    public virtual Task`1<bool> Cancel();
    public static SKPicture op_Explicit(SKPictureImageSource source);
    protected virtual void OnPropertyChanged(string propertyName);
}
public class SkiaSharp.Views.Forms.SKPixmapImageSource : ImageSource {
    public static BindableProperty PixmapProperty;
    public SKPixmap Pixmap { get; public set; }
    private static SKPixmapImageSource();
    public SKPixmap get_Pixmap();
    public void set_Pixmap(SKPixmap value);
    public virtual Task`1<bool> Cancel();
    public static SKPixmapImageSource op_Implicit(SKPixmap pixmap);
    public static SKPixmap op_Implicit(SKPixmapImageSource source);
    protected virtual void OnPropertyChanged(string propertyName);
}
public enum SkiaSharp.Views.Forms.SKTouchAction : Enum {
    public int value__;
    public static SKTouchAction Entered;
    public static SKTouchAction Pressed;
    public static SKTouchAction Moved;
    public static SKTouchAction Released;
    public static SKTouchAction Cancelled;
    public static SKTouchAction Exited;
    public static SKTouchAction WheelChanged;
}
public enum SkiaSharp.Views.Forms.SKTouchDeviceType : Enum {
    public int value__;
    public static SKTouchDeviceType Touch;
    public static SKTouchDeviceType Mouse;
    public static SKTouchDeviceType Pen;
}
public class SkiaSharp.Views.Forms.SKTouchEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private SKTouchAction <ActionType>k__BackingField;
    [CompilerGeneratedAttribute]
private SKTouchDeviceType <DeviceType>k__BackingField;
    [CompilerGeneratedAttribute]
private SKMouseButton <MouseButton>k__BackingField;
    [CompilerGeneratedAttribute]
private SKPoint <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InContact>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WheelDelta>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Pressure>k__BackingField;
    public bool Handled { get; public set; }
    public long Id { get; private set; }
    public SKTouchAction ActionType { get; private set; }
    public SKTouchDeviceType DeviceType { get; private set; }
    public SKMouseButton MouseButton { get; private set; }
    public SKPoint Location { get; private set; }
    public bool InContact { get; private set; }
    public int WheelDelta { get; private set; }
    public float Pressure { get; private set; }
    public SKTouchEventArgs(long id, SKTouchAction type, SKPoint location, bool inContact);
    public SKTouchEventArgs(long id, SKTouchAction type, SKMouseButton mouseButton, SKTouchDeviceType deviceType, SKPoint location, bool inContact);
    public SKTouchEventArgs(long id, SKTouchAction type, SKMouseButton mouseButton, SKTouchDeviceType deviceType, SKPoint location, bool inContact, int wheelDelta);
    public SKTouchEventArgs(long id, SKTouchAction type, SKMouseButton mouseButton, SKTouchDeviceType deviceType, SKPoint location, bool inContact, int wheelDelta, float pressure);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public SKTouchAction get_ActionType();
    [CompilerGeneratedAttribute]
private void set_ActionType(SKTouchAction value);
    [CompilerGeneratedAttribute]
public SKTouchDeviceType get_DeviceType();
    [CompilerGeneratedAttribute]
private void set_DeviceType(SKTouchDeviceType value);
    [CompilerGeneratedAttribute]
public SKMouseButton get_MouseButton();
    [CompilerGeneratedAttribute]
private void set_MouseButton(SKMouseButton value);
    [CompilerGeneratedAttribute]
public SKPoint get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(SKPoint value);
    [CompilerGeneratedAttribute]
public bool get_InContact();
    [CompilerGeneratedAttribute]
private void set_InContact(bool value);
    [CompilerGeneratedAttribute]
public int get_WheelDelta();
    [CompilerGeneratedAttribute]
private void set_WheelDelta(int value);
    [CompilerGeneratedAttribute]
public float get_Pressure();
    [CompilerGeneratedAttribute]
private void set_Pressure(float value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SkiaSharp.Views.Forms.SKTouchHandler : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<SKTouchEventArgs> onTouchAction;
    [NullableAttribute("2")]
private Func`3<double, double, SKPoint> scalePixels;
    public SKTouchHandler(Action`1<SKTouchEventArgs> onTouchAction, Func`3<double, double, SKPoint> scalePixels);
    public void SetEnabled(FrameworkElement view, bool enableTouchEvents);
    public void Detach(FrameworkElement view);
    private void OnPointerEntered(object sender, PointerRoutedEventArgs args);
    private void OnPointerExited(object sender, PointerRoutedEventArgs args);
    private void OnPointerPressed(object sender, PointerRoutedEventArgs args);
    private void OnPointerMoved(object sender, PointerRoutedEventArgs args);
    private void OnPointerReleased(object sender, PointerRoutedEventArgs args);
    private void OnPointerCancelled(object sender, PointerRoutedEventArgs args);
    private void OnPointerWheelChanged(object sender, PointerRoutedEventArgs args);
    private bool CommonHandler(object sender, SKTouchAction touchActionType, PointerRoutedEventArgs evt);
    private static SKTouchDeviceType GetTouchDevice(PointerRoutedEventArgs evt);
    private static SKMouseButton GetMouseButton(PointerPoint pointerPoint);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
internal class VersionConstants : object {
    public static string AssemblyVersion;
    public static string AssemblyFileVersion;
    public static string AssemblyInformationalVersion;
    public static string GitSha;
    public static int Milestone;
    public static int Increment;
}
