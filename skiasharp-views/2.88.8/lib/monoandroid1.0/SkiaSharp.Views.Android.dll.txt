[ExtensionAttribute]
public static class SkiaSharp.Views.Android.AndroidExtensions : object {
    [ExtensionAttribute]
public static SKPoint ToSKPoint(PointF point);
    [ExtensionAttribute]
public static SKPointI ToSKPoint(Point point);
    [ExtensionAttribute]
public static PointF ToPoint(SKPoint point);
    [ExtensionAttribute]
public static Point ToPoint(SKPointI point);
    [ExtensionAttribute]
public static SKRect ToSKRect(RectF rect);
    [ExtensionAttribute]
public static SKRectI ToSKRect(Rect rect);
    [ExtensionAttribute]
public static RectF ToRect(SKRect rect);
    [ExtensionAttribute]
public static Rect ToRect(SKRectI rect);
    [ExtensionAttribute]
public static SKColor ToSKColor(Color color);
    [ExtensionAttribute]
public static Color ToColor(SKColor color);
    [ExtensionAttribute]
public static SKMatrix ToSKMatrix(Matrix matrix);
    [ExtensionAttribute]
public static Matrix ToMatrix(SKMatrix matrix);
    private static SKImageInfo GetInfo(Bitmap bitmap);
    [ExtensionAttribute]
public static SKImage ToSKImage(Bitmap bitmap);
    [ExtensionAttribute]
public static void ToSKPixmap(Bitmap bitmap, SKPixmap pixmap);
    [ExtensionAttribute]
public static SKBitmap ToSKBitmap(Bitmap bitmap);
    [ExtensionAttribute]
public static Bitmap ToBitmap(SKBitmap skiaBitmap);
    [ExtensionAttribute]
public static Bitmap ToBitmap(SKImage skiaImage);
    [ExtensionAttribute]
public static Bitmap ToBitmap(SKPixmap skiaPixmap);
    [ExtensionAttribute]
public static Bitmap ToBitmap(SKPicture skiaPicture, SKSizeI dimensions);
}
[ExtensionAttribute]
public static class SkiaSharp.Views.Android.Extensions : object {
    private static Lazy`1<bool> isValidEnvironment;
    internal static bool IsValidEnvironment { get; }
    private static Extensions();
    internal static bool get_IsValidEnvironment();
    [ExtensionAttribute]
public static SKPoint ToSKPoint(PointF point);
    [ExtensionAttribute]
public static SKPointI ToSKPoint(Point point);
    [ExtensionAttribute]
public static PointF ToDrawingPoint(SKPoint point);
    [ExtensionAttribute]
public static Point ToDrawingPoint(SKPointI point);
    [ExtensionAttribute]
public static SKRect ToSKRect(RectangleF rect);
    [ExtensionAttribute]
public static SKRectI ToSKRect(Rectangle rect);
    [ExtensionAttribute]
public static RectangleF ToDrawingRect(SKRect rect);
    [ExtensionAttribute]
public static Rectangle ToDrawingRect(SKRectI rect);
    [ExtensionAttribute]
public static SKSize ToSKSize(SizeF size);
    [ExtensionAttribute]
public static SKSizeI ToSKSize(Size size);
    [ExtensionAttribute]
public static SizeF ToDrawingSize(SKSize size);
    [ExtensionAttribute]
public static Size ToDrawingSize(SKSizeI size);
    [ExtensionAttribute]
public static SKColor ToSKColor(Color color);
    [ExtensionAttribute]
public static Color ToDrawingColor(SKColor color);
}
public class SkiaSharp.Views.Android.GLTextureView : TextureView {
    internal static bool EnableLogging;
    private WeakReference`1<GLTextureView> thisWeakRef;
    private GLThread glThread;
    private IRenderer renderer;
    private bool detachedFromWindow;
    private IEGLConfigChooser eglConfigChooser;
    private IEGLContextFactory eglContextFactory;
    private IEGLWindowSurfaceFactory eglWindowSurfaceFactory;
    private IGLWrapper glWrapper;
    private int eglContextClientVersion;
    [CompilerGeneratedAttribute]
private bool <PreserveEGLContextOnPause>k__BackingField;
    [CompilerGeneratedAttribute]
private DebugFlags <DebugFlags>k__BackingField;
    public bool PreserveEGLContextOnPause { get; public set; }
    public DebugFlags DebugFlags { get; public set; }
    public Rendermode RenderMode { get; public set; }
    public GLTextureView(Context context);
    public GLTextureView(Context context, IAttributeSet attrs);
    private void Initialize();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public bool get_PreserveEGLContextOnPause();
    [CompilerGeneratedAttribute]
public void set_PreserveEGLContextOnPause(bool value);
    [CompilerGeneratedAttribute]
public DebugFlags get_DebugFlags();
    [CompilerGeneratedAttribute]
public void set_DebugFlags(DebugFlags value);
    public void SetGLWrapper(IGLWrapper glWrapper);
    public void SetRenderer(IRenderer renderer);
    public void SetEGLContextFactory(IEGLContextFactory factory);
    public void SetEGLWindowSurfaceFactory(IEGLWindowSurfaceFactory factory);
    public void SetEGLConfigChooser(IEGLConfigChooser configChooser);
    public void SetEGLConfigChooser(bool needDepth);
    public void SetEGLConfigChooser(int redSize, int greenSize, int blueSize, int alphaSize, int depthSize, int stencilSize);
    public void SetEGLContextClientVersion(int version);
    public Rendermode get_RenderMode();
    public void set_RenderMode(Rendermode value);
    public void RequestRender();
    public sealed virtual void OnSurfaceTextureUpdated(SurfaceTexture surface);
    public sealed virtual void OnSurfaceTextureAvailable(SurfaceTexture surface, int width, int height);
    public sealed virtual bool OnSurfaceTextureDestroyed(SurfaceTexture surface);
    public sealed virtual void OnSurfaceTextureSizeChanged(SurfaceTexture surface, int w, int h);
    public void OnPause();
    public void OnResume();
    public void QueueEvent(Action r);
    public void QueueEvent(IRunnable r);
    protected virtual void OnAttachedToWindow();
    protected virtual void OnDetachedFromWindow();
    private void CheckRenderThreadState();
    public sealed virtual void OnLayoutChange(View v, int left, int top, int right, int bottom, int oldLeft, int oldTop, int oldRight, int oldBottom);
    [ConditionalAttribute("DEBUG")]
private static void LogDebug(string message);
    [ConditionalAttribute("DEBUG")]
private static void LogError(string message);
}
[GeneratedCodeAttribute("Xamarin.Android.Build.Tasks", "13.1.0.5")]
public class SkiaSharp.Views.Android.Resource : object {
    private static Resource();
}
public class SkiaSharp.Views.Android.SKCanvasView : View {
    private bool ignorePixelScaling;
    private bool designMode;
    private SurfaceFactory surfaceFactory;
    private float density;
    [CompilerGeneratedAttribute]
private SKSize <CanvasSize>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<SKPaintSurfaceEventArgs> PaintSurface;
    public SKSize CanvasSize { get; private set; }
    public bool IgnorePixelScaling { get; public set; }
    public SKCanvasView(Context context);
    public SKCanvasView(Context context, IAttributeSet attrs);
    public SKCanvasView(Context context, IAttributeSet attrs, int defStyleAttr);
    protected SKCanvasView(IntPtr javaReference, JniHandleOwnership transfer);
    private void Initialize(IAttributeSet attrs);
    [CompilerGeneratedAttribute]
public SKSize get_CanvasSize();
    [CompilerGeneratedAttribute]
private void set_CanvasSize(SKSize value);
    public bool get_IgnorePixelScaling();
    public void set_IgnorePixelScaling(bool value);
    protected virtual void OnDraw(Canvas canvas);
    protected virtual void OnSizeChanged(int w, int h, int oldw, int oldh);
    [CompilerGeneratedAttribute]
public void add_PaintSurface(EventHandler`1<SKPaintSurfaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PaintSurface(EventHandler`1<SKPaintSurfaceEventArgs> value);
    protected virtual void OnPaintSurface(SKPaintSurfaceEventArgs e);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use OnPaintSurface(SKPaintSurfaceEventArgs) instead.")]
protected virtual void OnDraw(SKSurface surface, SKImageInfo info);
    protected virtual void OnDetachedFromWindow();
    protected virtual void OnAttachedToWindow();
    protected virtual void Dispose(bool disposing);
}
public class SkiaSharp.Views.Android.SKGLSurfaceView : GLSurfaceView {
    private SKGLSurfaceViewRenderer renderer;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
private ISKRenderer skRenderer;
    [CompilerGeneratedAttribute]
private EventHandler`1<SKPaintGLSurfaceEventArgs> PaintSurface;
    public SKSize CanvasSize { get; }
    public GRContext GRContext { get; }
    public SKGLSurfaceView(Context context);
    public SKGLSurfaceView(Context context, IAttributeSet attrs);
    private void Initialize();
    public SKSize get_CanvasSize();
    public GRContext get_GRContext();
    [CompilerGeneratedAttribute]
public void add_PaintSurface(EventHandler`1<SKPaintGLSurfaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PaintSurface(EventHandler`1<SKPaintGLSurfaceEventArgs> value);
    protected virtual void OnPaintSurface(SKPaintGLSurfaceEventArgs e);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use PaintSurface instead.")]
public virtual void SetRenderer(ISKRenderer renderer);
}
public abstract class SkiaSharp.Views.Android.SKGLSurfaceViewRenderer : Object {
    private static SKColorType colorType;
    private static GRSurfaceOrigin surfaceOrigin;
    private GRContext context;
    private GRGlFramebufferInfo glInfo;
    private GRBackendRenderTarget renderTarget;
    private SKSurface surface;
    private SKCanvas canvas;
    private SKSizeI lastSize;
    private SKSizeI newSize;
    public SKSize CanvasSize { get; }
    public GRContext GRContext { get; }
    public SKSize get_CanvasSize();
    public GRContext get_GRContext();
    protected virtual void OnPaintSurface(SKPaintGLSurfaceEventArgs e);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use OnPaintSurface(SKPaintGLSurfaceEventArgs) instead.")]
protected virtual void OnDrawFrame(SKSurface surface, GRBackendRenderTargetDesc renderTarget);
    public sealed virtual void OnDrawFrame(IGL10 gl);
    public sealed virtual void OnSurfaceChanged(IGL10 gl, int width, int height);
    public sealed virtual void OnSurfaceCreated(IGL10 gl, EGLConfig config);
    protected virtual void Dispose(bool disposing);
    private void FreeContext();
}
public class SkiaSharp.Views.Android.SKGLTextureView : GLTextureView {
    private SKGLTextureViewRenderer renderer;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
private ISKRenderer skRenderer;
    [CompilerGeneratedAttribute]
private EventHandler`1<SKPaintGLSurfaceEventArgs> PaintSurface;
    public SKSize CanvasSize { get; }
    public GRContext GRContext { get; }
    public SKGLTextureView(Context context);
    public SKGLTextureView(Context context, IAttributeSet attrs);
    private void Initialize();
    public SKSize get_CanvasSize();
    public GRContext get_GRContext();
    [CompilerGeneratedAttribute]
public void add_PaintSurface(EventHandler`1<SKPaintGLSurfaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PaintSurface(EventHandler`1<SKPaintGLSurfaceEventArgs> value);
    protected virtual void OnPaintSurface(SKPaintGLSurfaceEventArgs e);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use PaintSurface instead.")]
public virtual void SetRenderer(ISKRenderer renderer);
}
public abstract class SkiaSharp.Views.Android.SKGLTextureViewRenderer : Object {
    private static SKColorType colorType;
    private static GRSurfaceOrigin surfaceOrigin;
    private GRContext context;
    private GRGlFramebufferInfo glInfo;
    private GRBackendRenderTarget renderTarget;
    private SKSurface surface;
    private SKCanvas canvas;
    private SKSizeI lastSize;
    private SKSizeI newSize;
    public SKSize CanvasSize { get; }
    public GRContext GRContext { get; }
    public SKSize get_CanvasSize();
    public GRContext get_GRContext();
    protected virtual void OnPaintSurface(SKPaintGLSurfaceEventArgs e);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use OnPaintSurface(SKPaintGLSurfaceEventArgs) instead.")]
protected virtual void OnDrawFrame(SKSurface surface, GRBackendRenderTargetDesc renderTarget);
    public sealed virtual void OnDrawFrame(IGL10 gl);
    public sealed virtual void OnSurfaceChanged(IGL10 gl, int width, int height);
    public sealed virtual void OnSurfaceCreated(IGL10 gl, EGLConfig config);
    public sealed virtual void OnSurfaceDestroyed();
    protected virtual void Dispose(bool disposing);
    private void FreeContext();
}
public class SkiaSharp.Views.Android.SKLockedSurface : object {
    private Canvas canvas;
    private SurfaceFactory surfaceFactory;
    [CompilerGeneratedAttribute]
private SKImageInfo <ImageInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private SKSurface <Surface>k__BackingField;
    public SKImageInfo ImageInfo { get; }
    public SKSurface Surface { get; }
    public SKCanvas Canvas { get; }
    internal SKLockedSurface(Canvas canvas, SurfaceFactory surfaceFactory);
    [CompilerGeneratedAttribute]
public SKImageInfo get_ImageInfo();
    [CompilerGeneratedAttribute]
public SKSurface get_Surface();
    public SKCanvas get_Canvas();
    internal Canvas Post();
}
public class SkiaSharp.Views.Android.SKPaintGLSurfaceEventArgs : EventArgs {
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
private Nullable`1<GRBackendRenderTargetDesc> rtDesc;
    [CompilerGeneratedAttribute]
private SKSurface <Surface>k__BackingField;
    [CompilerGeneratedAttribute]
private GRBackendRenderTarget <BackendRenderTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private SKColorType <ColorType>k__BackingField;
    [CompilerGeneratedAttribute]
private GRSurfaceOrigin <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <RawInfo>k__BackingField;
    public SKSurface Surface { get; private set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use BackendRenderTarget instead.")]
public GRBackendRenderTargetDesc RenderTarget { get; }
    public GRBackendRenderTarget BackendRenderTarget { get; private set; }
    public SKColorType ColorType { get; private set; }
    public GRSurfaceOrigin Origin { get; private set; }
    public SKImageInfo Info { get; private set; }
    public SKImageInfo RawInfo { get; private set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use SKPaintGLSurfaceEventArgs(SKSurface, GRBackendRenderTarget, SKColorType, GRSurfaceOrigin) instead.")]
public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTargetDesc renderTarget);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKColorType colorType);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKImageInfo info);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKImageInfo info, SKImageInfo rawInfo);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use SKPaintGLSurfaceEventArgs(SKSurface, GRBackendRenderTarget, GRSurfaceOrigin, SKColorType) instead.")]
public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKColorType colorType, GRGlFramebufferInfo glInfo);
    [CompilerGeneratedAttribute]
public SKSurface get_Surface();
    [CompilerGeneratedAttribute]
private void set_Surface(SKSurface value);
    public GRBackendRenderTargetDesc get_RenderTarget();
    [ObsoleteAttribute]
private GRBackendRenderTargetDesc CreateDesc(GRGlFramebufferInfo glInfo);
    [CompilerGeneratedAttribute]
public GRBackendRenderTarget get_BackendRenderTarget();
    [CompilerGeneratedAttribute]
private void set_BackendRenderTarget(GRBackendRenderTarget value);
    [CompilerGeneratedAttribute]
public SKColorType get_ColorType();
    [CompilerGeneratedAttribute]
private void set_ColorType(SKColorType value);
    [CompilerGeneratedAttribute]
public GRSurfaceOrigin get_Origin();
    [CompilerGeneratedAttribute]
private void set_Origin(GRSurfaceOrigin value);
    [CompilerGeneratedAttribute]
public SKImageInfo get_Info();
    [CompilerGeneratedAttribute]
private void set_Info(SKImageInfo value);
    [CompilerGeneratedAttribute]
public SKImageInfo get_RawInfo();
    [CompilerGeneratedAttribute]
private void set_RawInfo(SKImageInfo value);
}
public class SkiaSharp.Views.Android.SKPaintSurfaceEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SKSurface <Surface>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <RawInfo>k__BackingField;
    public SKSurface Surface { get; }
    public SKImageInfo Info { get; }
    public SKImageInfo RawInfo { get; }
    public SKPaintSurfaceEventArgs(SKSurface surface, SKImageInfo info);
    public SKPaintSurfaceEventArgs(SKSurface surface, SKImageInfo info, SKImageInfo rawInfo);
    [CompilerGeneratedAttribute]
public SKSurface get_Surface();
    [CompilerGeneratedAttribute]
public SKImageInfo get_Info();
    [CompilerGeneratedAttribute]
public SKImageInfo get_RawInfo();
}
public class SkiaSharp.Views.Android.SKSurfaceView : SurfaceView {
    private SurfaceFactory surfaceFactory;
    public SKSize CanvasSize { get; }
    public SKSurfaceView(Context context);
    public SKSurfaceView(Context context, IAttributeSet attrs);
    public SKSurfaceView(Context context, IAttributeSet attrs, int defStyle);
    private void Initialize();
    public SKSize get_CanvasSize();
    public virtual void SurfaceChanged(ISurfaceHolder holder, Format format, int width, int height);
    public virtual void SurfaceCreated(ISurfaceHolder holder);
    public virtual void SurfaceDestroyed(ISurfaceHolder holder);
    public SKLockedSurface LockSurface();
    public void UnlockSurfaceAndPost(SKLockedSurface surface);
    protected virtual void Dispose(bool disposing);
}
internal class SkiaSharp.Views.Android.SurfaceFactory : object {
    private Bitmap bitmap;
    [CompilerGeneratedAttribute]
private SKImageInfo <Info>k__BackingField;
    public SKImageInfo Info { get; private set; }
    [CompilerGeneratedAttribute]
public SKImageInfo get_Info();
    [CompilerGeneratedAttribute]
private void set_Info(SKImageInfo value);
    public void UpdateCanvasSize(int w, int h, float density);
    public SKSurface CreateSurface(SKImageInfo& info);
    public void DrawSurface(SKSurface surface, Canvas canvas);
    public sealed virtual void Dispose();
    public void FreeBitmap();
    private SKImageInfo CreateInfo(int width, int height);
}
internal static class SkiaSharp.Views.GlesInterop.Gles : object {
    private static string libGLESv2;
    public static int GL_FRAMEBUFFER_BINDING;
    public static int GL_RENDERBUFFER_BINDING;
    public static int GL_BGRA8_EXT;
    public static int GL_VERSION;
    public static int GL_EXTENSIONS;
    public static int GL_SUBPIXEL_BITS;
    public static int GL_RED_BITS;
    public static int GL_GREEN_BITS;
    public static int GL_BLUE_BITS;
    public static int GL_ALPHA_BITS;
    public static int GL_DEPTH_BITS;
    public static int GL_STENCIL_BITS;
    public static int GL_SAMPLES;
    public static int GL_DEPTH_BUFFER_BIT;
    public static int GL_STENCIL_BUFFER_BIT;
    public static int GL_COLOR_BUFFER_BIT;
    public static int GL_NEAREST;
    public static int GL_READ_FRAMEBUFFER_ANGLE;
    public static int GL_DRAW_FRAMEBUFFER_ANGLE;
    public static int GL_DRAW_FRAMEBUFFER_BINDING_ANGLE;
    public static int GL_READ_FRAMEBUFFER_BINDING_ANGLE;
    public static int GL_FRAMEBUFFER;
    public static int GL_RENDERBUFFER;
    public static int GL_RENDERBUFFER_WIDTH;
    public static int GL_RENDERBUFFER_HEIGHT;
    public static int GL_RENDERBUFFER_INTERNAL_FORMAT;
    public static int GL_RENDERBUFFER_RED_SIZE;
    public static int GL_RENDERBUFFER_GREEN_SIZE;
    public static int GL_RENDERBUFFER_BLUE_SIZE;
    public static int GL_RENDERBUFFER_ALPHA_SIZE;
    public static int GL_RENDERBUFFER_DEPTH_SIZE;
    public static int GL_RENDERBUFFER_STENCIL_SIZE;
    public static int GL_COLOR_ATTACHMENT0;
    public static int GL_DEPTH_ATTACHMENT;
    public static int GL_STENCIL_ATTACHMENT;
    public static int GL_DEPTH_COMPONENT16;
    public static int GL_DEPTH_STENCIL_OES;
    public static int GL_UNSIGNED_INT_24_8_OES;
    public static int GL_DEPTH24_STENCIL8_OES;
    public static void glGetIntegerv(UInt32 pname, Int32& data);
    public static IntPtr glGetString(UInt32 value);
    public static void glViewport(int x, int y, int width, int height);
    public static void glClearColor(float red, float green, float blue, float alpha);
    public static void glClear(UInt32 mask);
    public static void glGenRenderbuffers(int n, UInt32[] buffers);
    public static void glGenRenderbuffers(int n, UInt32& buffer);
    public static void glGenFramebuffers(int n, UInt32[] buffers);
    public static void glGenFramebuffers(int n, UInt32& buffer);
    public static void glGetRenderbufferParameteriv(UInt32 target, int pname, Int32& param);
    public static void glBindRenderbuffer(UInt32 target, UInt32 buffer);
    public static void glBindFramebuffer(UInt32 target, UInt32 framebuffer);
    public static void glDeleteFramebuffers(int n, UInt32[] framebuffers);
    public static void glDeleteFramebuffers(int n, UInt32& framebuffer);
    public static void glDeleteRenderbuffers(int n, UInt32[] renderbuffers);
    public static void glDeleteRenderbuffers(int n, UInt32& renderbuffer);
    public static void glFramebufferRenderbuffer(UInt32 target, UInt32 attachment, UInt32 renderbuffertarget, UInt32 renderbuffer);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
internal class VersionConstants : object {
    public static string AssemblyVersion;
    public static string AssemblyFileVersion;
    public static string AssemblyInformationalVersion;
    public static string GitSha;
    public static int Milestone;
    public static int Increment;
}
