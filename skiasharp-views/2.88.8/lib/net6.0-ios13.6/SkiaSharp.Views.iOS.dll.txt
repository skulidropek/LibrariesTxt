internal static class SkiaSharp.Views.GlesInterop.Gles : object {
    private static string libGLESv2;
    public static int GL_FRAMEBUFFER_BINDING;
    public static int GL_RENDERBUFFER_BINDING;
    public static int GL_BGRA8_EXT;
    public static int GL_VERSION;
    public static int GL_EXTENSIONS;
    public static int GL_SUBPIXEL_BITS;
    public static int GL_RED_BITS;
    public static int GL_GREEN_BITS;
    public static int GL_BLUE_BITS;
    public static int GL_ALPHA_BITS;
    public static int GL_DEPTH_BITS;
    public static int GL_STENCIL_BITS;
    public static int GL_SAMPLES;
    public static int GL_DEPTH_BUFFER_BIT;
    public static int GL_STENCIL_BUFFER_BIT;
    public static int GL_COLOR_BUFFER_BIT;
    public static int GL_NEAREST;
    public static int GL_READ_FRAMEBUFFER_ANGLE;
    public static int GL_DRAW_FRAMEBUFFER_ANGLE;
    public static int GL_DRAW_FRAMEBUFFER_BINDING_ANGLE;
    public static int GL_READ_FRAMEBUFFER_BINDING_ANGLE;
    public static int GL_FRAMEBUFFER;
    public static int GL_RENDERBUFFER;
    public static int GL_RENDERBUFFER_WIDTH;
    public static int GL_RENDERBUFFER_HEIGHT;
    public static int GL_RENDERBUFFER_INTERNAL_FORMAT;
    public static int GL_RENDERBUFFER_RED_SIZE;
    public static int GL_RENDERBUFFER_GREEN_SIZE;
    public static int GL_RENDERBUFFER_BLUE_SIZE;
    public static int GL_RENDERBUFFER_ALPHA_SIZE;
    public static int GL_RENDERBUFFER_DEPTH_SIZE;
    public static int GL_RENDERBUFFER_STENCIL_SIZE;
    public static int GL_COLOR_ATTACHMENT0;
    public static int GL_DEPTH_ATTACHMENT;
    public static int GL_STENCIL_ATTACHMENT;
    public static int GL_DEPTH_COMPONENT16;
    public static int GL_DEPTH_STENCIL_OES;
    public static int GL_UNSIGNED_INT_24_8_OES;
    public static int GL_DEPTH24_STENCIL8_OES;
    public static void glGetIntegerv(UInt32 pname, Int32& data);
    public static IntPtr glGetString(UInt32 value);
    public static void glViewport(int x, int y, int width, int height);
    public static void glClearColor(float red, float green, float blue, float alpha);
    public static void glClear(UInt32 mask);
    public static void glGenRenderbuffers(int n, UInt32[] buffers);
    public static void glGenRenderbuffers(int n, UInt32& buffer);
    public static void glGenFramebuffers(int n, UInt32[] buffers);
    public static void glGenFramebuffers(int n, UInt32& buffer);
    public static void glGetRenderbufferParameteriv(UInt32 target, int pname, Int32& param);
    public static void glBindRenderbuffer(UInt32 target, UInt32 buffer);
    public static void glBindFramebuffer(UInt32 target, UInt32 framebuffer);
    public static void glDeleteFramebuffers(int n, UInt32[] framebuffers);
    public static void glDeleteFramebuffers(int n, UInt32& framebuffer);
    public static void glDeleteRenderbuffers(int n, UInt32[] renderbuffers);
    public static void glDeleteRenderbuffers(int n, UInt32& renderbuffer);
    public static void glFramebufferRenderbuffer(UInt32 target, UInt32 attachment, UInt32 renderbuffertarget, UInt32 renderbuffer);
}
[ExtensionAttribute]
public static class SkiaSharp.Views.iOS.AppleExtensions : object {
    [ExtensionAttribute]
public static SKPoint ToSKPoint(CGPoint point);
    [ExtensionAttribute]
public static CGPoint ToPoint(SKPoint point);
    [ExtensionAttribute]
public static SKRect ToSKRect(CGRect rect);
    [ExtensionAttribute]
public static CGRect ToRect(SKRect rect);
    [ExtensionAttribute]
public static SKSize ToSKSize(CGSize size);
    [ExtensionAttribute]
public static CGSize ToSize(SKSize size);
    [ExtensionAttribute]
public static SKColor ToSKColor(CGColor color);
    [ExtensionAttribute]
public static SKColorF ToSKColorF(CGColor color);
    [ExtensionAttribute]
public static CGColor ToCGColor(SKColor color);
    [ExtensionAttribute]
public static CGColor ToCGColor(SKColorF color);
    [ExtensionAttribute]
public static SKColor ToSKColor(CIColor color);
    [ExtensionAttribute]
public static SKColorF ToSKColorF(CIColor color);
    [ExtensionAttribute]
public static CIColor ToCIColor(SKColor color);
    [ExtensionAttribute]
public static CIColor ToCIColor(SKColorF color);
    [ExtensionAttribute]
public static void ToSKPixmap(CGImage cgImage, SKPixmap pixmap);
    [ExtensionAttribute]
public static SKImage ToSKImage(CGImage cgImage);
    [ExtensionAttribute]
public static SKBitmap ToSKBitmap(CGImage cgImage);
    [ExtensionAttribute]
public static CGImage ToCGImage(SKPicture skiaPicture, SKSizeI dimensions);
    [ExtensionAttribute]
public static CGImage ToCGImage(SKImage skiaImage);
    [ExtensionAttribute]
public static CGImage ToCGImage(SKPixmap skiaPixmap);
    [ExtensionAttribute]
public static CGImage ToCGImage(SKBitmap skiaBitmap);
    [ExtensionAttribute]
public static void ToSKPixmap(CIImage ciImage, SKPixmap pixmap);
    [ExtensionAttribute]
public static SKImage ToSKImage(CIImage ciImage);
    [ExtensionAttribute]
public static SKBitmap ToSKBitmap(CIImage ciImage);
    [ExtensionAttribute]
public static CIImage ToCIImage(SKPicture skiaPicture, SKSizeI dimensions);
    [ExtensionAttribute]
public static CIImage ToCIImage(SKImage skiaImage);
    [ExtensionAttribute]
public static CIImage ToCIImage(SKPixmap skiaPixmap);
    [ExtensionAttribute]
public static CIImage ToCIImage(SKBitmap skiaBitmap);
    [ExtensionAttribute]
public static NSData ToNSData(SKData skiaData);
    [ExtensionAttribute]
public static SKData ToSKData(NSData nsData);
}
[ExtensionAttribute]
public static class SkiaSharp.Views.iOS.Extensions : object {
    private static Lazy`1<bool> isValidEnvironment;
    internal static bool IsValidEnvironment { get; }
    private static Extensions();
    internal static bool get_IsValidEnvironment();
    [ExtensionAttribute]
public static SKPoint ToSKPoint(PointF point);
    [ExtensionAttribute]
public static SKPointI ToSKPoint(Point point);
    [ExtensionAttribute]
public static PointF ToDrawingPoint(SKPoint point);
    [ExtensionAttribute]
public static Point ToDrawingPoint(SKPointI point);
    [ExtensionAttribute]
public static SKRect ToSKRect(RectangleF rect);
    [ExtensionAttribute]
public static SKRectI ToSKRect(Rectangle rect);
    [ExtensionAttribute]
public static RectangleF ToDrawingRect(SKRect rect);
    [ExtensionAttribute]
public static Rectangle ToDrawingRect(SKRectI rect);
    [ExtensionAttribute]
public static SKSize ToSKSize(SizeF size);
    [ExtensionAttribute]
public static SKSizeI ToSKSize(Size size);
    [ExtensionAttribute]
public static SizeF ToDrawingSize(SKSize size);
    [ExtensionAttribute]
public static Size ToDrawingSize(SKSizeI size);
}
[ExtensionAttribute]
public static class SkiaSharp.Views.iOS.iOSExtensions : object {
    [ExtensionAttribute]
public static SKColor ToSKColor(UIColor color);
    [ExtensionAttribute]
public static SKColorF ToSKColorF(UIColor color);
    [ExtensionAttribute]
public static UIColor ToUIColor(SKColor color);
    [ExtensionAttribute]
public static UIColor ToUIColor(SKColorF color);
    [ExtensionAttribute]
public static SKImage ToSKImage(UIImage uiImage);
    [ExtensionAttribute]
public static SKBitmap ToSKBitmap(UIImage uiImage);
    [ExtensionAttribute]
public static bool ToSKPixmap(UIImage uiImage, SKPixmap pixmap);
    [ExtensionAttribute]
public static UIImage ToUIImage(SKPicture skiaPicture, SKSizeI dimensions, NFloat scale, UIImageOrientation orientation);
    [ExtensionAttribute]
public static UIImage ToUIImage(SKPicture skiaPicture, SKSizeI dimensions);
    [ExtensionAttribute]
public static UIImage ToUIImage(SKImage skiaImage);
    [ExtensionAttribute]
public static UIImage ToUIImage(SKPixmap skiaPixmap, NFloat scale, UIImageOrientation orientation);
    [ExtensionAttribute]
public static UIImage ToUIImage(SKPixmap skiaPixmap);
    [ExtensionAttribute]
public static UIImage ToUIImage(SKBitmap skiaBitmap, NFloat scale, UIImageOrientation orientation);
    [ExtensionAttribute]
public static UIImage ToUIImage(SKBitmap skiaBitmap);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use SKCanvasLayer.PaintSurface instead.")]
public interface SkiaSharp.Views.iOS.ISKCanvasLayerDelegate {
    public abstract virtual void DrawInSurface(SKSurface surface, SKImageInfo info);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use SKGLLayer.PaintSurface instead.")]
public interface SkiaSharp.Views.iOS.ISKGLLayerDelegate {
    public abstract virtual void DrawInSurface(SKSurface surface, GRBackendRenderTargetDesc renderTarget);
}
public class SkiaSharp.Views.iOS.SKCanvasLayer : CALayer {
    private SKCGSurfaceFactory drawable;
    private bool ignorePixelScaling;
    [CompilerGeneratedAttribute]
private ISKCanvasLayerDelegate <SKDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private SKSize <CanvasSize>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<SKPaintSurfaceEventArgs> PaintSurface;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use PaintSurface instead.")]
public ISKCanvasLayerDelegate SKDelegate { get; public set; }
    public SKSize CanvasSize { get; private set; }
    public bool IgnorePixelScaling { get; public set; }
    [CompilerGeneratedAttribute]
public ISKCanvasLayerDelegate get_SKDelegate();
    [CompilerGeneratedAttribute]
public void set_SKDelegate(ISKCanvasLayerDelegate value);
    [CompilerGeneratedAttribute]
public SKSize get_CanvasSize();
    [CompilerGeneratedAttribute]
private void set_CanvasSize(SKSize value);
    public bool get_IgnorePixelScaling();
    public void set_IgnorePixelScaling(bool value);
    public virtual void DrawInContext(CGContext ctx);
    [CompilerGeneratedAttribute]
public void add_PaintSurface(EventHandler`1<SKPaintSurfaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PaintSurface(EventHandler`1<SKPaintSurfaceEventArgs> value);
    protected virtual void OnPaintSurface(SKPaintSurfaceEventArgs e);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use OnPaintSurface(SKPaintSurfaceEventArgs) instead.")]
public virtual void DrawInSurface(SKSurface surface, SKImageInfo info);
    protected virtual void Dispose(bool disposing);
}
[RegisterAttribute("SKCanvasView")]
[DesignTimeVisibleAttribute("True")]
public class SkiaSharp.Views.iOS.SKCanvasView : UIView {
    [CompilerGeneratedAttribute]
private EventHandler DisposedInternal;
    [CompilerGeneratedAttribute]
private ISite <System.ComponentModel.IComponent.Site>k__BackingField;
    private bool designMode;
    private SKCGSurfaceFactory drawable;
    private bool ignorePixelScaling;
    [CompilerGeneratedAttribute]
private SKSize <CanvasSize>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<SKPaintSurfaceEventArgs> PaintSurface;
    private ISite System.ComponentModel.IComponent.Site { get; private set; }
    public SKSize CanvasSize { get; private set; }
    public bool IgnorePixelScaling { get; public set; }
    public SKCanvasView(CGRect frame);
    public SKCanvasView(IntPtr p);
    [CompilerGeneratedAttribute]
private void add_DisposedInternal(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove_DisposedInternal(EventHandler value);
    [CompilerGeneratedAttribute]
private sealed virtual override ISite System.ComponentModel.IComponent.get_Site();
    [CompilerGeneratedAttribute]
private sealed virtual override void System.ComponentModel.IComponent.set_Site(ISite value);
    private sealed virtual override void System.ComponentModel.IComponent.add_Disposed(EventHandler value);
    private sealed virtual override void System.ComponentModel.IComponent.remove_Disposed(EventHandler value);
    public virtual void AwakeFromNib();
    private void Initialize();
    [CompilerGeneratedAttribute]
public SKSize get_CanvasSize();
    [CompilerGeneratedAttribute]
private void set_CanvasSize(SKSize value);
    public bool get_IgnorePixelScaling();
    public void set_IgnorePixelScaling(bool value);
    public virtual void Draw(CGRect rect);
    public virtual void WillMoveToWindow(UIWindow window);
    [CompilerGeneratedAttribute]
public void add_PaintSurface(EventHandler`1<SKPaintSurfaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PaintSurface(EventHandler`1<SKPaintSurfaceEventArgs> value);
    protected virtual void OnPaintSurface(SKPaintSurfaceEventArgs e);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use OnPaintSurface(SKPaintSurfaceEventArgs) instead.")]
public virtual void DrawInSurface(SKSurface surface, SKImageInfo info);
    public virtual void LayoutSubviews();
    protected virtual void Dispose(bool disposing);
}
internal class SkiaSharp.Views.iOS.SKCGSurfaceFactory : object {
    private static int BitsPerByte;
    private static CGBitmapFlags BitmapFlags;
    private NSMutableData bitmapData;
    private CGDataProvider dataProvider;
    [CompilerGeneratedAttribute]
private SKImageInfo <Info>k__BackingField;
    public SKImageInfo Info { get; private set; }
    [CompilerGeneratedAttribute]
public SKImageInfo get_Info();
    [CompilerGeneratedAttribute]
private void set_Info(SKImageInfo value);
    public SKSurface CreateSurface(CGRect contentsBounds, NFloat scale, SKImageInfo& info);
    public void DrawSurface(CGContext ctx, CGRect viewBounds, SKImageInfo info, SKSurface surface);
    public sealed virtual void Dispose();
    private void FreeBitmap();
    private SKImageInfo CreateInfo(int width, int height);
    [CompilerGeneratedAttribute]
internal static void <CreateSurface>g__Dummy|8_0(IntPtr data);
}
public class SkiaSharp.Views.iOS.SKGLLayer : CAEAGLLayer {
    private static SKColorType colorType;
    private static GRSurfaceOrigin surfaceOrigin;
    private EAGLContext glContext;
    private UInt32 renderBuffer;
    private UInt32 framebuffer;
    private GRContext context;
    private GRGlFramebufferInfo glInfo;
    private GRBackendRenderTarget renderTarget;
    private SKSurface surface;
    private SKCanvas canvas;
    private SKSizeI lastSize;
    private bool recreateSurface;
    [CompilerGeneratedAttribute]
private ISKGLLayerDelegate <SKDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<SKPaintGLSurfaceEventArgs> PaintSurface;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use PaintSurface instead.")]
public ISKGLLayerDelegate SKDelegate { get; public set; }
    public SKSize CanvasSize { get; }
    public GRContext GRContext { get; }
    public CGRect Frame { get; public set; }
    [CompilerGeneratedAttribute]
public ISKGLLayerDelegate get_SKDelegate();
    [CompilerGeneratedAttribute]
public void set_SKDelegate(ISKGLLayerDelegate value);
    public SKSize get_CanvasSize();
    public GRContext get_GRContext();
    public virtual void Render();
    public virtual CGRect get_Frame();
    public virtual void set_Frame(CGRect value);
    [CompilerGeneratedAttribute]
public void add_PaintSurface(EventHandler`1<SKPaintGLSurfaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PaintSurface(EventHandler`1<SKPaintGLSurfaceEventArgs> value);
    protected virtual void OnPaintSurface(SKPaintGLSurfaceEventArgs e);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use OnPaintSurface(SKPaintGLSurfaceEventArgs) instead.")]
public virtual void DrawInSurface(SKSurface surface, GRBackendRenderTargetDesc renderTarget);
    private void PrepareGLContexts();
    private void ResizeGLContexts();
    protected virtual void Dispose(bool disposing);
}
[DesignTimeVisibleAttribute("True")]
[RegisterAttribute("SKGLView")]
public class SkiaSharp.Views.iOS.SKGLView : GLKView {
    private static SKColorType colorType;
    private static GRSurfaceOrigin surfaceOrigin;
    [CompilerGeneratedAttribute]
private EventHandler DisposedInternal;
    [CompilerGeneratedAttribute]
private ISite <System.ComponentModel.IComponent.Site>k__BackingField;
    private bool designMode;
    private GRContext context;
    private GRGlFramebufferInfo glInfo;
    private GRBackendRenderTarget renderTarget;
    private SKSurface surface;
    private SKCanvas canvas;
    private SKSizeI lastSize;
    [CompilerGeneratedAttribute]
private EventHandler`1<SKPaintGLSurfaceEventArgs> PaintSurface;
    private ISite System.ComponentModel.IComponent.Site { get; private set; }
    public SKSize CanvasSize { get; }
    public GRContext GRContext { get; }
    public CGRect Frame { get; public set; }
    public SKGLView(CGRect frame);
    public SKGLView(IntPtr p);
    [CompilerGeneratedAttribute]
private void add_DisposedInternal(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove_DisposedInternal(EventHandler value);
    [CompilerGeneratedAttribute]
private sealed virtual override ISite System.ComponentModel.IComponent.get_Site();
    [CompilerGeneratedAttribute]
private sealed virtual override void System.ComponentModel.IComponent.set_Site(ISite value);
    private sealed virtual override void System.ComponentModel.IComponent.add_Disposed(EventHandler value);
    private sealed virtual override void System.ComponentModel.IComponent.remove_Disposed(EventHandler value);
    public virtual void AwakeFromNib();
    private void Initialize();
    public SKSize get_CanvasSize();
    public GRContext get_GRContext();
    public sealed virtual void DrawInRect(GLKView view, CGRect rect);
    [CompilerGeneratedAttribute]
public void add_PaintSurface(EventHandler`1<SKPaintGLSurfaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PaintSurface(EventHandler`1<SKPaintGLSurfaceEventArgs> value);
    protected virtual void OnPaintSurface(SKPaintGLSurfaceEventArgs e);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use OnPaintSurface(SKPaintGLSurfaceEventArgs) instead.")]
public virtual void DrawInSurface(SKSurface surface, GRBackendRenderTargetDesc renderTarget);
    public virtual CGRect get_Frame();
    public virtual void set_Frame(CGRect value);
}
[RegisterAttribute("SKMetalView")]
[DesignTimeVisibleAttribute("True")]
public class SkiaSharp.Views.iOS.SKMetalView : MTKView {
    [CompilerGeneratedAttribute]
private EventHandler DisposedInternal;
    [CompilerGeneratedAttribute]
private ISite <System.ComponentModel.IComponent.Site>k__BackingField;
    private bool designMode;
    private GRMtlBackendContext backendContext;
    private GRContext context;
    [CompilerGeneratedAttribute]
private SKSize <CanvasSize>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<SKPaintMetalSurfaceEventArgs> PaintSurface;
    private ISite System.ComponentModel.IComponent.Site { get; private set; }
    public SKSize CanvasSize { get; private set; }
    public GRContext GRContext { get; }
    public SKMetalView(CGRect frame);
    public SKMetalView(CGRect frame, IMTLDevice device);
    public SKMetalView(IntPtr p);
    [CompilerGeneratedAttribute]
private void add_DisposedInternal(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove_DisposedInternal(EventHandler value);
    [CompilerGeneratedAttribute]
private sealed virtual override ISite System.ComponentModel.IComponent.get_Site();
    [CompilerGeneratedAttribute]
private sealed virtual override void System.ComponentModel.IComponent.set_Site(ISite value);
    private sealed virtual override void System.ComponentModel.IComponent.add_Disposed(EventHandler value);
    private sealed virtual override void System.ComponentModel.IComponent.remove_Disposed(EventHandler value);
    public virtual void AwakeFromNib();
    private void Initialize();
    [CompilerGeneratedAttribute]
public SKSize get_CanvasSize();
    [CompilerGeneratedAttribute]
private void set_CanvasSize(SKSize value);
    public GRContext get_GRContext();
    private sealed virtual override void MetalKit.IMTKViewDelegate.DrawableSizeWillChange(MTKView view, CGSize size);
    private sealed virtual override void MetalKit.IMTKViewDelegate.Draw(MTKView view);
    [CompilerGeneratedAttribute]
public void add_PaintSurface(EventHandler`1<SKPaintMetalSurfaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PaintSurface(EventHandler`1<SKPaintMetalSurfaceEventArgs> value);
    protected virtual void OnPaintSurface(SKPaintMetalSurfaceEventArgs e);
}
public class SkiaSharp.Views.iOS.SKPaintGLSurfaceEventArgs : EventArgs {
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
private Nullable`1<GRBackendRenderTargetDesc> rtDesc;
    [CompilerGeneratedAttribute]
private SKSurface <Surface>k__BackingField;
    [CompilerGeneratedAttribute]
private GRBackendRenderTarget <BackendRenderTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private SKColorType <ColorType>k__BackingField;
    [CompilerGeneratedAttribute]
private GRSurfaceOrigin <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <RawInfo>k__BackingField;
    public SKSurface Surface { get; private set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use BackendRenderTarget instead.")]
public GRBackendRenderTargetDesc RenderTarget { get; }
    public GRBackendRenderTarget BackendRenderTarget { get; private set; }
    public SKColorType ColorType { get; private set; }
    public GRSurfaceOrigin Origin { get; private set; }
    public SKImageInfo Info { get; private set; }
    public SKImageInfo RawInfo { get; private set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use SKPaintGLSurfaceEventArgs(SKSurface, GRBackendRenderTarget, SKColorType, GRSurfaceOrigin) instead.")]
public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTargetDesc renderTarget);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKColorType colorType);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKImageInfo info);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKImageInfo info, SKImageInfo rawInfo);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use SKPaintGLSurfaceEventArgs(SKSurface, GRBackendRenderTarget, GRSurfaceOrigin, SKColorType) instead.")]
public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKColorType colorType, GRGlFramebufferInfo glInfo);
    [CompilerGeneratedAttribute]
public SKSurface get_Surface();
    [CompilerGeneratedAttribute]
private void set_Surface(SKSurface value);
    public GRBackendRenderTargetDesc get_RenderTarget();
    [ObsoleteAttribute]
private GRBackendRenderTargetDesc CreateDesc(GRGlFramebufferInfo glInfo);
    [CompilerGeneratedAttribute]
public GRBackendRenderTarget get_BackendRenderTarget();
    [CompilerGeneratedAttribute]
private void set_BackendRenderTarget(GRBackendRenderTarget value);
    [CompilerGeneratedAttribute]
public SKColorType get_ColorType();
    [CompilerGeneratedAttribute]
private void set_ColorType(SKColorType value);
    [CompilerGeneratedAttribute]
public GRSurfaceOrigin get_Origin();
    [CompilerGeneratedAttribute]
private void set_Origin(GRSurfaceOrigin value);
    [CompilerGeneratedAttribute]
public SKImageInfo get_Info();
    [CompilerGeneratedAttribute]
private void set_Info(SKImageInfo value);
    [CompilerGeneratedAttribute]
public SKImageInfo get_RawInfo();
    [CompilerGeneratedAttribute]
private void set_RawInfo(SKImageInfo value);
}
public class SkiaSharp.Views.iOS.SKPaintMetalSurfaceEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SKSurface <Surface>k__BackingField;
    [CompilerGeneratedAttribute]
private GRBackendRenderTarget <BackendRenderTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private SKColorType <ColorType>k__BackingField;
    [CompilerGeneratedAttribute]
private GRSurfaceOrigin <Origin>k__BackingField;
    public SKSurface Surface { get; private set; }
    public GRBackendRenderTarget BackendRenderTarget { get; private set; }
    public SKColorType ColorType { get; private set; }
    public GRSurfaceOrigin Origin { get; private set; }
    public SKPaintMetalSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget);
    public SKPaintMetalSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKColorType colorType);
    [CompilerGeneratedAttribute]
public SKSurface get_Surface();
    [CompilerGeneratedAttribute]
private void set_Surface(SKSurface value);
    [CompilerGeneratedAttribute]
public GRBackendRenderTarget get_BackendRenderTarget();
    [CompilerGeneratedAttribute]
private void set_BackendRenderTarget(GRBackendRenderTarget value);
    [CompilerGeneratedAttribute]
public SKColorType get_ColorType();
    [CompilerGeneratedAttribute]
private void set_ColorType(SKColorType value);
    [CompilerGeneratedAttribute]
public GRSurfaceOrigin get_Origin();
    [CompilerGeneratedAttribute]
private void set_Origin(GRSurfaceOrigin value);
}
public class SkiaSharp.Views.iOS.SKPaintSurfaceEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SKSurface <Surface>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <RawInfo>k__BackingField;
    public SKSurface Surface { get; }
    public SKImageInfo Info { get; }
    public SKImageInfo RawInfo { get; }
    public SKPaintSurfaceEventArgs(SKSurface surface, SKImageInfo info);
    public SKPaintSurfaceEventArgs(SKSurface surface, SKImageInfo info, SKImageInfo rawInfo);
    [CompilerGeneratedAttribute]
public SKSurface get_Surface();
    [CompilerGeneratedAttribute]
public SKImageInfo get_Info();
    [CompilerGeneratedAttribute]
public SKImageInfo get_RawInfo();
}
internal class VersionConstants : object {
    public static string AssemblyVersion;
    public static string AssemblyFileVersion;
    public static string AssemblyInformationalVersion;
    public static string GitSha;
    public static int Milestone;
    public static int Increment;
}
