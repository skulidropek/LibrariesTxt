[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class SkiaSharp.Views.GlesInterop.Gles : object {
    private static string libGLESv2;
    public static int GL_FRAMEBUFFER_BINDING;
    public static int GL_RENDERBUFFER_BINDING;
    public static int GL_BGRA8_EXT;
    public static int GL_VERSION;
    public static int GL_EXTENSIONS;
    public static int GL_SUBPIXEL_BITS;
    public static int GL_RED_BITS;
    public static int GL_GREEN_BITS;
    public static int GL_BLUE_BITS;
    public static int GL_ALPHA_BITS;
    public static int GL_DEPTH_BITS;
    public static int GL_STENCIL_BITS;
    public static int GL_SAMPLES;
    public static int GL_DEPTH_BUFFER_BIT;
    public static int GL_STENCIL_BUFFER_BIT;
    public static int GL_COLOR_BUFFER_BIT;
    public static int GL_NEAREST;
    public static int GL_READ_FRAMEBUFFER_ANGLE;
    public static int GL_DRAW_FRAMEBUFFER_ANGLE;
    public static int GL_DRAW_FRAMEBUFFER_BINDING_ANGLE;
    public static int GL_READ_FRAMEBUFFER_BINDING_ANGLE;
    public static int GL_FRAMEBUFFER;
    public static int GL_RENDERBUFFER;
    public static int GL_RENDERBUFFER_WIDTH;
    public static int GL_RENDERBUFFER_HEIGHT;
    public static int GL_RENDERBUFFER_INTERNAL_FORMAT;
    public static int GL_RENDERBUFFER_RED_SIZE;
    public static int GL_RENDERBUFFER_GREEN_SIZE;
    public static int GL_RENDERBUFFER_BLUE_SIZE;
    public static int GL_RENDERBUFFER_ALPHA_SIZE;
    public static int GL_RENDERBUFFER_DEPTH_SIZE;
    public static int GL_RENDERBUFFER_STENCIL_SIZE;
    public static int GL_COLOR_ATTACHMENT0;
    public static int GL_DEPTH_ATTACHMENT;
    public static int GL_STENCIL_ATTACHMENT;
    public static int GL_DEPTH_COMPONENT16;
    public static int GL_DEPTH_STENCIL_OES;
    public static int GL_UNSIGNED_INT_24_8_OES;
    public static int GL_DEPTH24_STENCIL8_OES;
    public static void glGetIntegerv(UInt32 pname, Int32& data);
    public static IntPtr glGetString(UInt32 value);
    public static void glViewport(int x, int y, int width, int height);
    public static void glClearColor(float red, float green, float blue, float alpha);
    public static void glClear(UInt32 mask);
    public static void glGenRenderbuffers(int n, UInt32[] buffers);
    public static void glGenRenderbuffers(int n, UInt32& buffer);
    public static void glGenFramebuffers(int n, UInt32[] buffers);
    public static void glGenFramebuffers(int n, UInt32& buffer);
    public static void glGetRenderbufferParameteriv(UInt32 target, int pname, Int32& param);
    public static void glBindRenderbuffer(UInt32 target, UInt32 buffer);
    public static void glBindFramebuffer(UInt32 target, UInt32 framebuffer);
    public static void glDeleteFramebuffers(int n, UInt32[] framebuffers);
    public static void glDeleteFramebuffers(int n, UInt32& framebuffer);
    public static void glDeleteRenderbuffers(int n, UInt32[] renderbuffers);
    public static void glDeleteRenderbuffers(int n, UInt32& renderbuffer);
    public static void glFramebufferRenderbuffer(UInt32 target, UInt32 attachment, UInt32 renderbuffertarget, UInt32 renderbuffer);
}
public abstract class SkiaSharp.Views.Tizen.CustomRenderingView : Widget {
    private ImagePixelsSetCallback redrawCallback;
    private IntPtr animator;
    private RenderingMode renderingMode;
    protected IntPtr evasImage;
    public SKSize CanvasSize { get; }
    public RenderingMode RenderingMode { get; public set; }
    public CustomRenderingView(EvasObject parent);
    public SKSize get_CanvasSize();
    public RenderingMode get_RenderingMode();
    public void set_RenderingMode(RenderingMode value);
    public void Invalidate();
    protected virtual void CreateNativeResources(EvasObject parent);
    protected virtual void DestroyNativeResources();
    protected abstract virtual void OnDrawFrame();
    protected abstract virtual bool UpdateSurfaceSize(Rect geometry);
    protected abstract virtual SKSizeI GetSurfaceSize();
    protected virtual SKSizeI GetRawSurfaceSize();
    protected virtual void CreateDrawingSurface();
    protected virtual void DestroyDrawingSurface();
    protected sealed virtual IntPtr CreateHandle(EvasObject parent);
    protected sealed virtual void OnUnrealize();
    protected void OnResized();
    private void CreateAnimator();
    private void DestroyAnimator();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__4_0(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_1(IntPtr d, IntPtr o);
    [CompilerGeneratedAttribute]
private bool <CreateAnimator>b__22_0();
}
public static class SkiaSharp.Views.Tizen.Extensions : object {
    private static Lazy`1<bool> isValidEnvironment;
    internal static bool IsValidEnvironment { get; }
    private static Extensions();
    internal static bool get_IsValidEnvironment();
}
internal static class SkiaSharp.Views.Tizen.Interop.Elementary : object {
    internal static IntPtr elm_layout_add(IntPtr obj);
    internal static bool elm_layout_theme_set(IntPtr obj, string klass, string group, string style);
    internal static IntPtr elm_object_part_content_get(IntPtr obj, string part);
    internal static void elm_object_part_content_set(IntPtr obj, string part, IntPtr content);
    internal static IntPtr elm_image_object_get(IntPtr obj);
}
internal static class SkiaSharp.Views.Tizen.Interop.Evas : object {
    internal static IntPtr evas_object_evas_get(IntPtr obj);
    internal static IntPtr evas_gl_new(IntPtr evas);
    internal static void evas_gl_free(IntPtr evas_gl);
    internal static IntPtr evas_gl_context_create(IntPtr evas_gl, IntPtr share_ctx);
    internal static IntPtr evas_gl_context_version_create(IntPtr evas_gl, IntPtr share_ctx, GLContextVersion version);
    internal static void evas_gl_context_destroy(IntPtr evas_gl, IntPtr ctx);
    internal static IntPtr evas_gl_surface_create(IntPtr evas_gl, IntPtr config, int width, int height);
    internal static void evas_gl_surface_destroy(IntPtr evas_gl, IntPtr surf);
    internal static bool evas_gl_native_surface_get(IntPtr evas_gl, IntPtr surf, NativeSurfaceOpenGL& ns);
    internal static IntPtr evas_gl_proc_address_get(IntPtr evas_gl, string name);
    internal static IntPtr evas_gl_api_get(IntPtr evas_gl);
    internal static bool evas_gl_make_current(IntPtr evas_gl, IntPtr surf, IntPtr ctx);
    internal static IntPtr evas_object_image_add(IntPtr obj);
    internal static IntPtr evas_object_image_filled_add(IntPtr obj);
    internal static void evas_object_image_size_get(IntPtr obj, IntPtr x, Int32& y);
    internal static void evas_object_image_size_get(IntPtr obj, Int32& x, IntPtr y);
    internal static void evas_object_image_size_get(IntPtr obj, Int32& x, Int32& y);
    internal static void evas_object_image_size_set(IntPtr obj, int w, int h);
    internal static IntPtr evas_object_image_data_get(IntPtr obj, bool for_writing);
    internal static void evas_object_image_data_set(IntPtr obj, IntPtr data);
    internal static void evas_object_image_data_update_add(IntPtr obj, int x, int y, int w, int h);
    internal static void evas_object_image_colorspace_set(IntPtr obj, Colorspace cspace);
    internal static void evas_object_image_fill_set(IntPtr obj, int x, int y, int w, int h);
    internal static void evas_object_image_native_surface_set(IntPtr obj, NativeSurfaceOpenGL& surf);
    internal static void evas_object_image_native_surface_set(IntPtr obj, IntPtr zero);
    internal static void evas_object_image_pixels_dirty_set(IntPtr obj, bool dirty);
    internal static void evas_object_image_pixels_get_callback_set(IntPtr obj, ImagePixelsSetCallback func, IntPtr data);
    internal static void evas_object_image_pixels_get_callback_set(IntPtr obj, IntPtr zero, IntPtr data);
    internal static void evas_object_image_smooth_scale_set(IntPtr obj, bool smooth_scale);
    internal static void evas_object_image_alpha_set(IntPtr obj, bool has_alpha);
}
internal static class SkiaSharp.Views.Tizen.Interop.Libraries : object {
    internal static string Libc;
    internal static string Evas;
    internal static string Elementary;
    internal static string Eina;
    internal static string Ecore;
    internal static string Eo;
    internal static string Eext;
}
public abstract class SkiaSharp.Views.Tizen.NUI.CustomRenderingView : ImageView {
    private bool _redrawRequest;
    [CompilerGeneratedAttribute]
private SynchronizationContext <MainloopContext>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<SKPaintSurfaceEventArgs> PaintSurface;
    protected SynchronizationContext MainloopContext { get; }
    [CompilerGeneratedAttribute]
protected SynchronizationContext get_MainloopContext();
    [CompilerGeneratedAttribute]
public void add_PaintSurface(EventHandler`1<SKPaintSurfaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PaintSurface(EventHandler`1<SKPaintSurfaceEventArgs> value);
    public void Invalidate();
    protected abstract virtual void OnResized();
    protected abstract virtual void OnDrawFrame();
    protected void SendPaintSurface(SKPaintSurfaceEventArgs e);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <Invalidate>b__8_0(object s);
}
public class SkiaSharp.Views.Tizen.NUI.SKCanvasView : CustomRenderingView {
    private bool ignorePixelScaling;
    public bool IgnorePixelScaling { get; public set; }
    public bool get_IgnorePixelScaling();
    public void set_IgnorePixelScaling(bool value);
    protected virtual void OnDrawFrame();
    protected virtual void OnResized();
}
public class SkiaSharp.Views.Tizen.NUI.SKGLSurfaceView : CustomRenderingView {
    private static string VERTEX_SHADER;
    private static string FRAGMENT_SHADER;
    [NullableAttribute("2")]
private NativeImageQueue _nativeImageSource;
    private int _bufferWidth;
    private int _bufferHeight;
    private int _bufferStride;
    [NullableAttribute("2")]
private Renderer _renderer;
    private Geometry _geometry;
    private Shader _shader;
    [NullableAttribute("2")]
private Texture _texture;
    [NullableAttribute("2")]
private TextureSet _textureSet;
    private static SKGLSurfaceView();
    protected virtual void OnDrawFrame();
    protected virtual void OnResized();
    protected virtual void Dispose(bool disposing);
    private void UpdateSurface();
    private void UpdateTexture();
    private static Geometry CreateQuadGeometry();
    private static PropertyBuffer CreateVertextBuffer();
}
public enum SkiaSharp.Views.Tizen.RenderingMode : Enum {
    public int value__;
    public static RenderingMode Continuously;
    public static RenderingMode WhenDirty;
}
public static class SkiaSharp.Views.Tizen.ScalingInfo : object {
    private static Lazy`1<string> profile;
    private static Lazy`1<int> dpi;
    private static Lazy`1<double> scalingFactor;
    private static Nullable`1<double> scalingFactorOverride;
    public static string Profile { get; }
    public static int Dpi { get; }
    public static double ScalingFactor { get; }
    private static ScalingInfo();
    public static string get_Profile();
    public static int get_Dpi();
    public static double get_ScalingFactor();
    public static double FromPixel(double v);
    public static double ToPixel(double v);
    public static void SetScalingFactor(Nullable`1<double> scalingFactor);
}
public class SkiaSharp.Views.Tizen.SKCanvasView : CustomRenderingView {
    private bool ignorePixelScaling;
    private SKImageInfo info;
    private SKSizeI canvasSize;
    [CompilerGeneratedAttribute]
private EventHandler`1<SKPaintSurfaceEventArgs> PaintSurface;
    public bool IgnorePixelScaling { get; public set; }
    public SKCanvasView(EvasObject parent);
    public bool get_IgnorePixelScaling();
    public void set_IgnorePixelScaling(bool value);
    [CompilerGeneratedAttribute]
public void add_PaintSurface(EventHandler`1<SKPaintSurfaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PaintSurface(EventHandler`1<SKPaintSurfaceEventArgs> value);
    protected virtual SKSizeI GetSurfaceSize();
    protected virtual SKSizeI GetRawSurfaceSize();
    protected virtual void OnDrawFrame(SKPaintSurfaceEventArgs e);
    protected sealed virtual void OnDrawFrame();
    protected sealed virtual bool UpdateSurfaceSize(Rect geometry);
}
public class SkiaSharp.Views.Tizen.SKGLSurfaceView : CustomRenderingView {
    private static GRSurfaceOrigin surfaceOrigin;
    private static SKColorType colorType;
    private Config glConfig;
    private IntPtr glConfigPtr;
    private IntPtr glEvas;
    private IntPtr glContext;
    private IntPtr glSurface;
    private GRContext context;
    private GRGlFramebufferInfo glInfo;
    private GRBackendRenderTarget renderTarget;
    private SKSurface surface;
    private SKCanvas canvas;
    private SKSizeI surfaceSize;
    [CompilerGeneratedAttribute]
private EventHandler`1<SKPaintGLSurfaceEventArgs> PaintSurface;
    public GRContext GRContext { get; }
    public SKGLSurfaceView(EvasObject parent);
    private static SKGLSurfaceView();
    [CompilerGeneratedAttribute]
public void add_PaintSurface(EventHandler`1<SKPaintGLSurfaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PaintSurface(EventHandler`1<SKPaintGLSurfaceEventArgs> value);
    public GRContext get_GRContext();
    protected virtual SKSizeI GetSurfaceSize();
    protected virtual void OnDrawFrame(SKPaintGLSurfaceEventArgs e);
    protected sealed virtual void CreateNativeResources(EvasObject parent);
    protected sealed virtual void DestroyNativeResources();
    protected sealed virtual void OnDrawFrame();
    protected sealed virtual bool UpdateSurfaceSize(Rect geometry);
    protected sealed virtual void CreateDrawingSurface();
    protected sealed virtual void DestroyDrawingSurface();
}
public class SkiaSharp.Views.Tizen.SKPaintGLSurfaceEventArgs : EventArgs {
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
private Nullable`1<GRBackendRenderTargetDesc> rtDesc;
    [CompilerGeneratedAttribute]
private SKSurface <Surface>k__BackingField;
    [CompilerGeneratedAttribute]
private GRBackendRenderTarget <BackendRenderTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private SKColorType <ColorType>k__BackingField;
    [CompilerGeneratedAttribute]
private GRSurfaceOrigin <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <RawInfo>k__BackingField;
    public SKSurface Surface { get; private set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use BackendRenderTarget instead.")]
public GRBackendRenderTargetDesc RenderTarget { get; }
    public GRBackendRenderTarget BackendRenderTarget { get; private set; }
    public SKColorType ColorType { get; private set; }
    public GRSurfaceOrigin Origin { get; private set; }
    public SKImageInfo Info { get; private set; }
    public SKImageInfo RawInfo { get; private set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use SKPaintGLSurfaceEventArgs(SKSurface, GRBackendRenderTarget, SKColorType, GRSurfaceOrigin) instead.")]
public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTargetDesc renderTarget);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKColorType colorType);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKImageInfo info);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKImageInfo info, SKImageInfo rawInfo);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use SKPaintGLSurfaceEventArgs(SKSurface, GRBackendRenderTarget, GRSurfaceOrigin, SKColorType) instead.")]
public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKColorType colorType, GRGlFramebufferInfo glInfo);
    [CompilerGeneratedAttribute]
public SKSurface get_Surface();
    [CompilerGeneratedAttribute]
private void set_Surface(SKSurface value);
    public GRBackendRenderTargetDesc get_RenderTarget();
    [ObsoleteAttribute]
private GRBackendRenderTargetDesc CreateDesc(GRGlFramebufferInfo glInfo);
    [CompilerGeneratedAttribute]
public GRBackendRenderTarget get_BackendRenderTarget();
    [CompilerGeneratedAttribute]
private void set_BackendRenderTarget(GRBackendRenderTarget value);
    [CompilerGeneratedAttribute]
public SKColorType get_ColorType();
    [CompilerGeneratedAttribute]
private void set_ColorType(SKColorType value);
    [CompilerGeneratedAttribute]
public GRSurfaceOrigin get_Origin();
    [CompilerGeneratedAttribute]
private void set_Origin(GRSurfaceOrigin value);
    [CompilerGeneratedAttribute]
public SKImageInfo get_Info();
    [CompilerGeneratedAttribute]
private void set_Info(SKImageInfo value);
    [CompilerGeneratedAttribute]
public SKImageInfo get_RawInfo();
    [CompilerGeneratedAttribute]
private void set_RawInfo(SKImageInfo value);
}
public class SkiaSharp.Views.Tizen.SKPaintSurfaceEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SKSurface <Surface>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <RawInfo>k__BackingField;
    public SKSurface Surface { get; }
    public SKImageInfo Info { get; }
    public SKImageInfo RawInfo { get; }
    public SKPaintSurfaceEventArgs(SKSurface surface, SKImageInfo info);
    public SKPaintSurfaceEventArgs(SKSurface surface, SKImageInfo info, SKImageInfo rawInfo);
    [CompilerGeneratedAttribute]
public SKSurface get_Surface();
    [CompilerGeneratedAttribute]
public SKImageInfo get_Info();
    [CompilerGeneratedAttribute]
public SKImageInfo get_RawInfo();
}
[ExtensionAttribute]
public static class SkiaSharp.Views.Tizen.TizenExtensions : object {
    [ExtensionAttribute]
public static SKPoint ToSKPoint(Point point);
    [ExtensionAttribute]
public static SKPointI ToSKPointI(Point point);
    [ExtensionAttribute]
public static Point ToPoint(SKPoint point);
    [ExtensionAttribute]
public static Point ToPoint(SKPointI point);
    [ExtensionAttribute]
public static SKSize ToSKSize(Size size);
    [ExtensionAttribute]
public static SKSizeI ToSKSizeI(Size size);
    [ExtensionAttribute]
public static Size ToSize(SKSize size);
    [ExtensionAttribute]
public static Size ToSize(SKSizeI size);
    [ExtensionAttribute]
public static SKRect ToSKRect(Rect rect);
    [ExtensionAttribute]
public static SKRectI ToSKRectI(Rect rect);
    [ExtensionAttribute]
public static Rect ToRect(SKRect rect);
    [ExtensionAttribute]
public static Rect ToRect(SKRectI rect);
    [ExtensionAttribute]
public static SKColor ToSKColor(Color color);
    [ExtensionAttribute]
public static Color ToColor(SKColor color);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
internal class VersionConstants : object {
    public static string AssemblyVersion;
    public static string AssemblyFileVersion;
    public static string AssemblyInformationalVersion;
    public static string GitSha;
    public static int Milestone;
    public static int Increment;
}
