internal static class SkiaSharp.Views.GlesInterop.Egl : object {
    private static string libEGL;
    public static IntPtr EGL_DEFAULT_DISPLAY;
    public static IntPtr EGL_NO_CONFIG;
    public static IntPtr EGL_NO_DISPLAY;
    public static IntPtr EGL_NO_CONTEXT;
    public static IntPtr EGL_NO_SURFACE;
    public static int EGL_FALSE;
    public static int EGL_TRUE;
    public static int EGL_SUCCESS;
    public static int EGL_BUFFER_SIZE;
    public static int EGL_ALPHA_SIZE;
    public static int EGL_BLUE_SIZE;
    public static int EGL_GREEN_SIZE;
    public static int EGL_RED_SIZE;
    public static int EGL_DEPTH_SIZE;
    public static int EGL_STENCIL_SIZE;
    public static int EGL_HEIGHT;
    public static int EGL_WIDTH;
    public static int EGL_NONE;
    public static int EGL_CONTEXT_CLIENT_VERSION;
    public static int EGL_SWAP_BEHAVIOR;
    public static int EGL_BUFFER_PRESERVED;
    public static int EGL_BUFFER_DESTROYED;
    public static int EGL_OPENGL_ES_API;
    public static int EGL_RENDERABLE_TYPE;
    public static int EGL_OPENGL_ES2_BIT;
    public static int EGL_SURFACE_TYPE;
    public static int EGL_PBUFFER_BIT;
    public static int EGL_SWAP_BEHAVIOR_PRESERVED_BIT;
    public static int EGL_EXPERIMENTAL_PRESENT_PATH_ANGLE;
    public static int EGL_EXPERIMENTAL_PRESENT_PATH_FAST_ANGLE;
    public static int EGL_EXPERIMENTAL_PRESENT_PATH_COPY_ANGLE;
    public static int EGL_PLATFORM_ANGLE_TYPE_ANGLE;
    public static int EGL_PLATFORM_ANGLE_MAX_VERSION_MAJOR_ANGLE;
    public static int EGL_PLATFORM_ANGLE_MAX_VERSION_MINOR_ANGLE;
    public static int EGL_PLATFORM_ANGLE_TYPE_DEFAULT_ANGLE;
    public static int EGL_PLATFORM_ANGLE_ANGLE;
    public static int EGL_PLATFORM_ANGLE_TYPE_D3D9_ANGLE;
    public static int EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE;
    public static int EGL_PLATFORM_ANGLE_DEVICE_TYPE_ANGLE;
    public static int EGL_PLATFORM_ANGLE_DEVICE_TYPE_HARDWARE_ANGLE;
    public static int EGL_PLATFORM_ANGLE_DEVICE_TYPE_D3D_WARP_ANGLE;
    public static int EGL_PLATFORM_ANGLE_DEVICE_TYPE_D3D_REFERENCE_ANGLE;
    public static int EGL_PLATFORM_ANGLE_ENABLE_AUTOMATIC_TRIM_ANGLE;
    public static int EGL_FIXED_SIZE_ANGLE;
    public static string EGLNativeWindowTypeProperty;
    public static string EGLRenderSurfaceSizeProperty;
    public static string EGLRenderResolutionScaleProperty;
    private static Egl();
    private static IntPtr eglGetProcAddress(string procname);
    public static IntPtr eglGetPlatformDisplayEXT(UInt32 platform, IntPtr native_display, Int32[] attrib_list);
    public static int eglInitialize(IntPtr dpy, Int32& major, Int32& minor);
    public static int eglChooseConfig(IntPtr dpy, Int32[] attrib_list, IntPtr[] configs, int config_size, Int32& num_config);
    public static IntPtr eglCreateContext(IntPtr dpy, IntPtr config, IntPtr share_context, Int32[] attrib_list);
    public static IntPtr eglCreateWindowSurface(IntPtr dpy, IntPtr config, object win, Int32[] attrib_list);
    public static int eglQuerySurface(IntPtr dpy, IntPtr surface, int attribute, Int32& value);
    public static int eglDestroySurface(IntPtr dpy, IntPtr surface);
    public static int eglMakeCurrent(IntPtr dpy, IntPtr draw, IntPtr read, IntPtr ctx);
    public static int eglSwapBuffers(IntPtr dpy, IntPtr surface);
    public static int eglDestroyContext(IntPtr dpy, IntPtr ctx);
    public static int eglTerminate(IntPtr dpy);
    public static int eglGetError();
    public static int eglBindAPI(UInt32 api);
    public static IntPtr eglCreatePbufferSurface(IntPtr dpy, IntPtr config, Int32[] attrib_list);
    public static int eglSurfaceAttrib(IntPtr dpy, IntPtr surface, int attribute, int value);
}
internal static class SkiaSharp.Views.GlesInterop.Gles : object {
    private static string libGLESv2;
    public static int GL_FRAMEBUFFER_BINDING;
    public static int GL_RENDERBUFFER_BINDING;
    public static int GL_BGRA8_EXT;
    public static int GL_VERSION;
    public static int GL_EXTENSIONS;
    public static int GL_SUBPIXEL_BITS;
    public static int GL_RED_BITS;
    public static int GL_GREEN_BITS;
    public static int GL_BLUE_BITS;
    public static int GL_ALPHA_BITS;
    public static int GL_DEPTH_BITS;
    public static int GL_STENCIL_BITS;
    public static int GL_SAMPLES;
    public static int GL_DEPTH_BUFFER_BIT;
    public static int GL_STENCIL_BUFFER_BIT;
    public static int GL_COLOR_BUFFER_BIT;
    public static int GL_NEAREST;
    public static int GL_READ_FRAMEBUFFER_ANGLE;
    public static int GL_DRAW_FRAMEBUFFER_ANGLE;
    public static int GL_DRAW_FRAMEBUFFER_BINDING_ANGLE;
    public static int GL_READ_FRAMEBUFFER_BINDING_ANGLE;
    public static int GL_FRAMEBUFFER;
    public static int GL_RENDERBUFFER;
    public static int GL_RENDERBUFFER_WIDTH;
    public static int GL_RENDERBUFFER_HEIGHT;
    public static int GL_RENDERBUFFER_INTERNAL_FORMAT;
    public static int GL_RENDERBUFFER_RED_SIZE;
    public static int GL_RENDERBUFFER_GREEN_SIZE;
    public static int GL_RENDERBUFFER_BLUE_SIZE;
    public static int GL_RENDERBUFFER_ALPHA_SIZE;
    public static int GL_RENDERBUFFER_DEPTH_SIZE;
    public static int GL_RENDERBUFFER_STENCIL_SIZE;
    public static int GL_COLOR_ATTACHMENT0;
    public static int GL_DEPTH_ATTACHMENT;
    public static int GL_STENCIL_ATTACHMENT;
    public static int GL_DEPTH_COMPONENT16;
    public static int GL_DEPTH_STENCIL_OES;
    public static int GL_UNSIGNED_INT_24_8_OES;
    public static int GL_DEPTH24_STENCIL8_OES;
    public static void glGetIntegerv(UInt32 pname, Int32& data);
    public static IntPtr glGetString(UInt32 value);
    public static void glViewport(int x, int y, int width, int height);
    public static void glClearColor(float red, float green, float blue, float alpha);
    public static void glClear(UInt32 mask);
    public static void glGenRenderbuffers(int n, UInt32[] buffers);
    public static void glGenRenderbuffers(int n, UInt32& buffer);
    public static void glGenFramebuffers(int n, UInt32[] buffers);
    public static void glGenFramebuffers(int n, UInt32& buffer);
    public static void glGetRenderbufferParameteriv(UInt32 target, int pname, Int32& param);
    public static void glBindRenderbuffer(UInt32 target, UInt32 buffer);
    public static void glBindFramebuffer(UInt32 target, UInt32 framebuffer);
    public static void glDeleteFramebuffers(int n, UInt32[] framebuffers);
    public static void glDeleteFramebuffers(int n, UInt32& framebuffer);
    public static void glDeleteRenderbuffers(int n, UInt32[] renderbuffers);
    public static void glDeleteRenderbuffers(int n, UInt32& renderbuffer);
    public static void glFramebufferRenderbuffer(UInt32 target, UInt32 attachment, UInt32 renderbuffertarget, UInt32 renderbuffer);
}
internal class SkiaSharp.Views.GlesInterop.GlesContext : object {
    private static IntPtr eglDisplay;
    private bool isDisposed;
    private IntPtr eglContext;
    private IntPtr eglSurface;
    private IntPtr eglConfig;
    public bool HasSurface { get; }
    private static GlesContext();
    public bool get_HasSurface();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public void CreateSurface(SwapChainPanel panel, Nullable`1<Size> renderSurfaceSize, Nullable`1<float> resolutionScale);
    public void GetSurfaceDimensions(Int32& width, Int32& height);
    public void SetViewportSize(int width, int height);
    public void DestroySurface();
    public void MakeCurrent();
    public bool SwapBuffers();
    public void Reset();
    private void InitializeDisplay();
    public void Initialize();
    private void Cleanup();
}
public class SkiaSharp.Views.UWP.AngleSwapChainPanel : SwapChainPanel {
    private static DependencyProperty ProxyVisibilityProperty;
    private static bool designMode;
    private object locker;
    private bool isVisible;
    private bool isLoaded;
    private GlesContext glesContext;
    private IAsyncAction renderLoopWorker;
    private IAsyncAction renderOnceWorker;
    private bool enableRenderLoop;
    private double lastCompositionScaleX;
    private double lastCompositionScaleY;
    private bool pendingSizeChange;
    [CompilerGeneratedAttribute]
private bool <DrawInBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ContentsScale>k__BackingField;
    public bool DrawInBackground { get; public set; }
    public double ContentsScale { get; private set; }
    public bool EnableRenderLoop { get; public set; }
    private static AngleSwapChainPanel();
    [CompilerGeneratedAttribute]
public bool get_DrawInBackground();
    [CompilerGeneratedAttribute]
public void set_DrawInBackground(bool value);
    [CompilerGeneratedAttribute]
public double get_ContentsScale();
    [CompilerGeneratedAttribute]
private void set_ContentsScale(double value);
    public bool get_EnableRenderLoop();
    public void set_EnableRenderLoop(bool value);
    public void Invalidate();
    protected virtual void OnRenderFrame(Rect rect);
    protected virtual void OnDestroyingContext();
    private void OnLoaded(object sender, RoutedEventArgs e);
    private void OnUnloaded(object sender, RoutedEventArgs e);
    private static void OnVisibilityChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnCompositionChanged(SwapChainPanel sender, object args);
    private void OnSizeChanged(object sender, SizeChangedEventArgs e);
    private void EnsureRenderSurface();
    private void DestroyRenderSurface();
    private void RenderFrame();
    private void UpdateRenderLoop(bool start);
    private void RenderOnce(IAsyncAction action);
    private void RenderLoop(IAsyncAction action);
}
public static class SkiaSharp.Views.UWP.Extensions : object {
    private static Lazy`1<bool> isValidEnvironment;
    internal static bool IsValidEnvironment { get; }
    private static Extensions();
    internal static bool get_IsValidEnvironment();
}
[GuidAttribute("905a0fef-bc53-11df-8c49-001e4fc686da")]
[InterfaceTypeAttribute("1")]
internal interface SkiaSharp.Views.UWP.IBufferByteAccess {
    public abstract virtual long Buffer(IntPtr& value);
}
[ExtensionAttribute]
internal static class SkiaSharp.Views.UWP.PropertySetExtensions : object {
    private static string libInterop;
    [ExtensionAttribute]
public static void AddSingle(PropertySet properties, string key, float value);
    [ExtensionAttribute]
public static void AddSize(PropertySet properties, string key, Size size);
    [ExtensionAttribute]
public static void AddSize(PropertySet properties, string key, float width, float height);
    private static void PropertySet_AddSingle(object properties, string key, float value);
    private static void PropertySet_AddSize(object properties, string key, float width, float height);
}
public class SkiaSharp.Views.UWP.SKPaintGLSurfaceEventArgs : EventArgs {
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
private Nullable`1<GRBackendRenderTargetDesc> rtDesc;
    [CompilerGeneratedAttribute]
private SKSurface <Surface>k__BackingField;
    [CompilerGeneratedAttribute]
private GRBackendRenderTarget <BackendRenderTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private SKColorType <ColorType>k__BackingField;
    [CompilerGeneratedAttribute]
private GRSurfaceOrigin <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <RawInfo>k__BackingField;
    public SKSurface Surface { get; private set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use BackendRenderTarget instead.")]
public GRBackendRenderTargetDesc RenderTarget { get; }
    public GRBackendRenderTarget BackendRenderTarget { get; private set; }
    public SKColorType ColorType { get; private set; }
    public GRSurfaceOrigin Origin { get; private set; }
    public SKImageInfo Info { get; private set; }
    public SKImageInfo RawInfo { get; private set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use SKPaintGLSurfaceEventArgs(SKSurface, GRBackendRenderTarget, SKColorType, GRSurfaceOrigin) instead.")]
public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTargetDesc renderTarget);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKColorType colorType);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKImageInfo info);
    public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKImageInfo info, SKImageInfo rawInfo);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use SKPaintGLSurfaceEventArgs(SKSurface, GRBackendRenderTarget, GRSurfaceOrigin, SKColorType) instead.")]
public SKPaintGLSurfaceEventArgs(SKSurface surface, GRBackendRenderTarget renderTarget, GRSurfaceOrigin origin, SKColorType colorType, GRGlFramebufferInfo glInfo);
    [CompilerGeneratedAttribute]
public SKSurface get_Surface();
    [CompilerGeneratedAttribute]
private void set_Surface(SKSurface value);
    public GRBackendRenderTargetDesc get_RenderTarget();
    [ObsoleteAttribute]
private GRBackendRenderTargetDesc CreateDesc(GRGlFramebufferInfo glInfo);
    [CompilerGeneratedAttribute]
public GRBackendRenderTarget get_BackendRenderTarget();
    [CompilerGeneratedAttribute]
private void set_BackendRenderTarget(GRBackendRenderTarget value);
    [CompilerGeneratedAttribute]
public SKColorType get_ColorType();
    [CompilerGeneratedAttribute]
private void set_ColorType(SKColorType value);
    [CompilerGeneratedAttribute]
public GRSurfaceOrigin get_Origin();
    [CompilerGeneratedAttribute]
private void set_Origin(GRSurfaceOrigin value);
    [CompilerGeneratedAttribute]
public SKImageInfo get_Info();
    [CompilerGeneratedAttribute]
private void set_Info(SKImageInfo value);
    [CompilerGeneratedAttribute]
public SKImageInfo get_RawInfo();
    [CompilerGeneratedAttribute]
private void set_RawInfo(SKImageInfo value);
}
public class SkiaSharp.Views.UWP.SKPaintSurfaceEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SKSurface <Surface>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImageInfo <RawInfo>k__BackingField;
    public SKSurface Surface { get; }
    public SKImageInfo Info { get; }
    public SKImageInfo RawInfo { get; }
    public SKPaintSurfaceEventArgs(SKSurface surface, SKImageInfo info);
    public SKPaintSurfaceEventArgs(SKSurface surface, SKImageInfo info, SKImageInfo rawInfo);
    [CompilerGeneratedAttribute]
public SKSurface get_Surface();
    [CompilerGeneratedAttribute]
public SKImageInfo get_Info();
    [CompilerGeneratedAttribute]
public SKImageInfo get_RawInfo();
}
public class SkiaSharp.Views.UWP.SKSwapChainPanel : AngleSwapChainPanel {
    private static SKColorType colorType;
    private static GRSurfaceOrigin surfaceOrigin;
    private GRGlInterface glInterface;
    private GRContext context;
    private GRGlFramebufferInfo glInfo;
    private GRBackendRenderTarget renderTarget;
    private SKSurface surface;
    private SKCanvas canvas;
    private SKSizeI lastSize;
    [CompilerGeneratedAttribute]
private EventHandler`1<SKPaintGLSurfaceEventArgs> PaintSurface;
    public SKSize CanvasSize { get; }
    public GRContext GRContext { get; }
    public SKSize get_CanvasSize();
    public GRContext get_GRContext();
    [CompilerGeneratedAttribute]
public void add_PaintSurface(EventHandler`1<SKPaintGLSurfaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PaintSurface(EventHandler`1<SKPaintGLSurfaceEventArgs> value);
    protected virtual void OnPaintSurface(SKPaintGLSurfaceEventArgs e);
    protected virtual void OnRenderFrame(Rect rect);
    protected virtual void OnDestroyingContext();
}
public class SkiaSharp.Views.UWP.SKXamlCanvas : Canvas {
    private static float DpiBase;
    private static DependencyProperty ProxyVisibilityProperty;
    private static bool designMode;
    private IntPtr pixels;
    private WriteableBitmap bitmap;
    private bool ignorePixelScaling;
    private bool isVisible;
    private int loadUnloadCounter;
    [CompilerGeneratedAttribute]
private SKSize <CanvasSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Dpi>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<SKPaintSurfaceEventArgs> PaintSurface;
    public SKSize CanvasSize { get; private set; }
    public bool IgnorePixelScaling { get; public set; }
    public double Dpi { get; private set; }
    private static SKXamlCanvas();
    [CompilerGeneratedAttribute]
public SKSize get_CanvasSize();
    [CompilerGeneratedAttribute]
private void set_CanvasSize(SKSize value);
    public bool get_IgnorePixelScaling();
    public void set_IgnorePixelScaling(bool value);
    [CompilerGeneratedAttribute]
public double get_Dpi();
    [CompilerGeneratedAttribute]
private void set_Dpi(double value);
    [CompilerGeneratedAttribute]
public void add_PaintSurface(EventHandler`1<SKPaintSurfaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PaintSurface(EventHandler`1<SKPaintSurfaceEventArgs> value);
    protected virtual void OnPaintSurface(SKPaintSurfaceEventArgs e);
    private static void OnVisibilityChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnDpiChanged(DisplayInformation sender, object args);
    private void OnSizeChanged(object sender, SizeChangedEventArgs e);
    private void OnLoaded(object sender, RoutedEventArgs e);
    private void OnUnloaded(object sender, RoutedEventArgs e);
    public void Invalidate();
    private void DoInvalidate();
    private SKSizeI CreateSize(SKSizeI& unscaledSize, Single& dpi);
    private SKImageInfo CreateBitmap(SKSizeI& unscaledSize, Single& dpi);
    private void FreeBitmap();
    [CompilerGeneratedAttribute]
internal static bool <CreateSize>g__IsPositive|31_0(double value);
}
[ExtensionAttribute]
internal static class SkiaSharp.Views.UWP.Utils : object {
    [ExtensionAttribute]
internal static IntPtr GetByteBuffer(IBuffer buffer);
}
[ExtensionAttribute]
public static class SkiaSharp.Views.UWP.UWPExtensions : object {
    [ExtensionAttribute]
public static SKPoint ToSKPoint(Point point);
    [ExtensionAttribute]
public static Point ToPoint(SKPoint point);
    [ExtensionAttribute]
public static SKRect ToSKRect(Rect rect);
    [ExtensionAttribute]
public static Rect ToRect(SKRect rect);
    [ExtensionAttribute]
public static SKSize ToSKSize(Size size);
    [ExtensionAttribute]
public static Size ToSize(SKSize size);
    [ExtensionAttribute]
public static SKColor ToSKColor(Color color);
    [ExtensionAttribute]
public static Color ToColor(SKColor color);
    [ExtensionAttribute]
public static WriteableBitmap ToWriteableBitmap(SKPicture picture, SKSizeI dimensions);
    [ExtensionAttribute]
public static WriteableBitmap ToWriteableBitmap(SKImage skiaImage);
    [ExtensionAttribute]
public static WriteableBitmap ToWriteableBitmap(SKBitmap skiaBitmap);
    [ExtensionAttribute]
public static WriteableBitmap ToWriteableBitmap(SKPixmap pixmap);
    [ExtensionAttribute]
public static SKBitmap ToSKBitmap(WriteableBitmap bitmap);
    [ExtensionAttribute]
public static SKImage ToSKImage(WriteableBitmap bitmap);
    [ExtensionAttribute]
public static bool ToSKPixmap(WriteableBitmap bitmap, SKPixmap pixmap);
    [ExtensionAttribute]
internal static IntPtr GetPixels(WriteableBitmap bitmap);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
internal class VersionConstants : object {
    public static string AssemblyVersion;
    public static string AssemblyFileVersion;
    public static string AssemblyInformationalVersion;
    public static string GitSha;
    public static int Milestone;
    public static int Increment;
}
