public abstract class Microsoft.Web.XmlTransform.AttributeTransform : Transform {
    private XmlNode transformAttributeSource;
    private XmlNodeList transformAttributes;
    private XmlNode targetAttributeSource;
    private XmlNodeList targetAttributes;
    protected XmlNodeList TransformAttributes { get; }
    protected XmlNodeList TargetAttributes { get; }
    protected XmlNodeList get_TransformAttributes();
    protected XmlNodeList get_TargetAttributes();
    private XmlNodeList GetAttributesFrom(XmlNode node);
    private XmlNodeList GetAttributesFrom(XmlNode node, string argument, bool warnIfEmpty);
    private XmlNodeList GetAttributesFrom(XmlNode node, IList`1<string> arguments, bool warnIfEmpty);
}
internal static class Microsoft.Web.XmlTransform.CommonErrors : object {
    internal static void ExpectNoArguments(XmlTransformationLogger log, string transformName, string argumentString);
    internal static void WarnIfMultipleTargets(XmlTransformationLogger log, string transformName, XmlNodeList targetNodes, bool applyTransformToAllTargets);
}
public class Microsoft.Web.XmlTransform.Condition : Locator {
    protected virtual string ConstructPredicate();
}
internal class Microsoft.Web.XmlTransform.DefaultLocator : Locator {
    private static DefaultLocator instance;
    internal static DefaultLocator Instance { get; }
    private static DefaultLocator();
    internal static DefaultLocator get_Instance();
}
internal class Microsoft.Web.XmlTransform.Insert : Transform {
    protected virtual void Apply();
}
internal class Microsoft.Web.XmlTransform.InsertAfter : InsertBase {
    protected virtual void Apply();
}
internal abstract class Microsoft.Web.XmlTransform.InsertBase : Transform {
    private XmlElement siblingElement;
    protected XmlElement SiblingElement { get; }
    protected XmlElement get_SiblingElement();
}
internal class Microsoft.Web.XmlTransform.InsertBefore : InsertBase {
    protected virtual void Apply();
}
internal class Microsoft.Web.XmlTransform.InsertIfMissing : Insert {
    protected virtual void Apply();
}
internal interface Microsoft.Web.XmlTransform.IXmlFormattableAttributes {
    public string AttributeIndent { get; }
    public abstract virtual void FormatAttributes(XmlFormatter formatter);
    public abstract virtual string get_AttributeIndent();
}
public interface Microsoft.Web.XmlTransform.IXmlOriginalDocumentService {
    public abstract virtual XmlNodeList SelectNodes(string path, XmlNamespaceManager nsmgr);
}
public interface Microsoft.Web.XmlTransform.IXmlTransformationLogger {
    public abstract virtual void LogMessage(string message, Object[] messageArgs);
    public abstract virtual void LogMessage(MessageType type, string message, Object[] messageArgs);
    public abstract virtual void LogWarning(string message, Object[] messageArgs);
    public abstract virtual void LogWarning(string file, string message, Object[] messageArgs);
    public abstract virtual void LogWarning(string file, int lineNumber, int linePosition, string message, Object[] messageArgs);
    public abstract virtual void LogError(string message, Object[] messageArgs);
    public abstract virtual void LogError(string file, string message, Object[] messageArgs);
    public abstract virtual void LogError(string file, int lineNumber, int linePosition, string message, Object[] messageArgs);
    public abstract virtual void LogErrorFromException(Exception ex);
    public abstract virtual void LogErrorFromException(Exception ex, string file);
    public abstract virtual void LogErrorFromException(Exception ex, string file, int lineNumber, int linePosition);
    public abstract virtual void StartSection(string message, Object[] messageArgs);
    public abstract virtual void StartSection(MessageType type, string message, Object[] messageArgs);
    public abstract virtual void EndSection(string message, Object[] messageArgs);
    public abstract virtual void EndSection(MessageType type, string message, Object[] messageArgs);
}
public abstract class Microsoft.Web.XmlTransform.Locator : object {
    private string argumentString;
    private IList`1<string> arguments;
    private string parentPath;
    private XmlElementContext context;
    private XmlTransformationLogger logger;
    protected string ParentPath { get; }
    protected XmlNode CurrentElement { get; }
    protected string NextStepNodeTest { get; }
    protected XPathAxis NextStepAxis { get; }
    protected XmlTransformationLogger Log { get; }
    protected string ArgumentString { get; }
    protected IList`1<string> Arguments { get; }
    protected virtual string get_ParentPath();
    protected XmlNode get_CurrentElement();
    protected virtual string get_NextStepNodeTest();
    protected virtual XPathAxis get_NextStepAxis();
    protected virtual string ConstructPath();
    protected string AppendStep(string basePath, string stepNodeTest);
    protected string AppendStep(string basePath, XPathAxis stepAxis, string stepNodeTest);
    protected string AppendStep(string basePath, string stepNodeTest, string predicate);
    protected string AppendStep(string basePath, XPathAxis stepAxis, string stepNodeTest, string predicate);
    protected virtual string ConstructPredicate();
    protected XmlTransformationLogger get_Log();
    protected string get_ArgumentString();
    protected IList`1<string> get_Arguments();
    protected void EnsureArguments();
    protected void EnsureArguments(int min);
    protected void EnsureArguments(int min, int max);
    internal string ConstructPath(string parentPath, XmlElementContext context, string argumentString);
    internal string ConstructParentPath(string parentPath, XmlElementContext context, string argumentString);
    private void ReleaseLogger();
    private string GetAxisString(XPathAxis stepAxis);
    private string EnsureTrailingSlash(string basePath);
    private string EnsureBracketedPredicate(string predicate);
}
public class Microsoft.Web.XmlTransform.Match : Locator {
    protected virtual string ConstructPredicate();
}
public enum Microsoft.Web.XmlTransform.MessageType : Enum {
    public int value__;
    public static MessageType Normal;
    public static MessageType Verbose;
}
public enum Microsoft.Web.XmlTransform.MissingTargetMessage : Enum {
    public int value__;
    public static MissingTargetMessage None;
    public static MissingTargetMessage Information;
    public static MissingTargetMessage Warning;
    public static MissingTargetMessage Error;
}
internal class Microsoft.Web.XmlTransform.NamedTypeFactory : object {
    private string relativePathRoot;
    private List`1<Registration> registrations;
    internal NamedTypeFactory(string relativePathRoot);
    private void CreateDefaultRegistrations();
    internal void AddAssemblyRegistration(Assembly assembly, string nameSpace);
    internal void AddAssemblyRegistration(string assemblyName, string nameSpace);
    internal void AddPathRegistration(string path, string nameSpace);
    internal ObjectType Construct(string typeName);
    private Type GetType(string typeName);
}
internal class Microsoft.Web.XmlTransform.PositionTrackingTextReader : TextReader {
    private static int newlineCharacter;
    private TextReader internalReader;
    private int lineNumber;
    private int linePosition;
    private int characterPosition;
    public PositionTrackingTextReader(TextReader textReader);
    public virtual int Read();
    public virtual int Peek();
    public bool ReadToPosition(int lineNumber, int linePosition);
    public bool ReadToPosition(int characterPosition);
    private void UpdatePosition(int character);
}
internal class Microsoft.Web.XmlTransform.Remove : Transform {
    protected virtual void Apply();
    protected void RemoveNode();
}
internal class Microsoft.Web.XmlTransform.RemoveAll : Remove {
    protected virtual void Apply();
}
public class Microsoft.Web.XmlTransform.RemoveAttributes : AttributeTransform {
    protected virtual void Apply();
}
internal class Microsoft.Web.XmlTransform.Replace : Transform {
    protected virtual void Apply();
}
public class Microsoft.Web.XmlTransform.SetAttributes : AttributeTransform {
    protected virtual void Apply();
}
public class Microsoft.Web.XmlTransform.SetTokenizedAttributes : AttributeTransform {
    private SetTokenizedAttributeStorage storageDictionary;
    private bool fInitStorageDictionary;
    public static string Token;
    public static string TokenNumber;
    public static string XPathWithIndex;
    public static string ParameterAttribute;
    public static string XpathLocator;
    public static string XPathWithLocator;
    private XmlAttribute tokenizeValueCurrentXmlAttribute;
    private static Regex s_dirRegex;
    private static Regex s_parentAttribRegex;
    private static Regex s_tokenFormatRegex;
    protected SetTokenizedAttributeStorage TransformStorage { get; }
    internal static Regex DirRegex { get; }
    internal static Regex ParentAttributeRegex { get; }
    internal static Regex TokenFormatRegex { get; }
    private static SetTokenizedAttributes();
    protected SetTokenizedAttributeStorage get_TransformStorage();
    protected virtual void Apply();
    internal static Regex get_DirRegex();
    internal static Regex get_ParentAttributeRegex();
    internal static Regex get_TokenFormatRegex();
    protected string GetAttributeValue(string attributeName);
    protected string EscapeDirRegexSpecialCharacter(string value, bool escape);
    protected static string SubstituteKownValue(string transformValue, Regex patternRegex, string patternPrefix, GetValueCallback getValueDelegate);
    private string GetXPathToAttribute(XmlAttribute xmlAttribute);
    private string GetXPathToAttribute(XmlAttribute xmlAttribute, IList`1<string> locators);
    private string GetXPathToNode(XmlNode xmlNode);
    private string TokenizeValue(XmlAttribute targetAttribute, XmlAttribute transformAttribute, bool fTokenizeParameter, List`1<Dictionary`2<string, string>> parameters);
    [CompilerGeneratedAttribute]
private string <TokenizeValue>b__0(string key);
}
public class Microsoft.Web.XmlTransform.SetTokenizedAttributeStorage : object {
    [CompilerGeneratedAttribute]
private List`1<Dictionary`2<string, string>> <DictionaryList>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableTokenizeParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseXpathToFormParameter>k__BackingField;
    public List`1<Dictionary`2<string, string>> DictionaryList { get; public set; }
    public string TokenFormat { get; public set; }
    public bool EnableTokenizeParameters { get; public set; }
    public bool UseXpathToFormParameter { get; public set; }
    public SetTokenizedAttributeStorage(int capacity);
    [CompilerGeneratedAttribute]
public List`1<Dictionary`2<string, string>> get_DictionaryList();
    [CompilerGeneratedAttribute]
public void set_DictionaryList(List`1<Dictionary`2<string, string>> value);
    [CompilerGeneratedAttribute]
public string get_TokenFormat();
    [CompilerGeneratedAttribute]
public void set_TokenFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableTokenizeParameters();
    [CompilerGeneratedAttribute]
public void set_EnableTokenizeParameters(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseXpathToFormParameter();
    [CompilerGeneratedAttribute]
public void set_UseXpathToFormParameter(bool value);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Microsoft.Web.XmlTransform.SR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string XMLTRANSFORMATION_AmbiguousTypeMatch { get; }
    internal static string XMLTRANSFORMATION_BadAttributeValue { get; }
    internal static string XMLTRANSFORMATION_FatalTransformSyntaxError { get; }
    internal static string XMLTRANSFORMATION_ImportAttributeConflict { get; }
    internal static string XMLTRANSFORMATION_ImportMissingAssembly { get; }
    internal static string XMLTRANSFORMATION_ImportMissingNamespace { get; }
    internal static string XMLTRANSFORMATION_ImportUnknownAttribute { get; }
    internal static string XMLTRANSFORMATION_IncorrectBaseType { get; }
    internal static string XMLTRANSFORMATION_InsertBadXPath { get; }
    internal static string XMLTRANSFORMATION_InsertBadXPathResult { get; }
    internal static string XMLTRANSFORMATION_InsertMissingArgument { get; }
    internal static string XMLTRANSFORMATION_InsertTooManyArguments { get; }
    internal static string XMLTRANSFORMATION_MatchAttributeDoesNotExist { get; }
    internal static string XMLTRANSFORMATION_NoValidConstructor { get; }
    internal static string XMLTRANSFORMATION_RequiresExactArguments { get; }
    internal static string XMLTRANSFORMATION_RequiresMinimumArguments { get; }
    internal static string XMLTRANSFORMATION_TooManyArguments { get; }
    internal static string XMLTRANSFORMATION_TransformArgumentFoundNoAttributes { get; }
    internal static string XMLTRANSFORMATION_TransformBeginExecutingMessage { get; }
    internal static string XMLTRANSFORMATION_TransformDoesNotExpectArguments { get; }
    internal static string XMLTRANSFORMATION_TransformEndExecutingMessage { get; }
    internal static string XMLTRANSFORMATION_TransformErrorExecutingMessage { get; }
    internal static string XMLTRANSFORMATION_TransformMessageInsert { get; }
    internal static string XMLTRANSFORMATION_TransformMessageNoRemoveAttributes { get; }
    internal static string XMLTRANSFORMATION_TransformMessageNoSetAttributes { get; }
    internal static string XMLTRANSFORMATION_TransformMessageRemove { get; }
    internal static string XMLTRANSFORMATION_TransformMessageRemoveAttribute { get; }
    internal static string XMLTRANSFORMATION_TransformMessageRemoveAttributes { get; }
    internal static string XMLTRANSFORMATION_TransformMessageReplace { get; }
    internal static string XMLTRANSFORMATION_TransformMessageSetAttribute { get; }
    internal static string XMLTRANSFORMATION_TransformMessageSetAttributes { get; }
    internal static string XMLTRANSFORMATION_TransformNameFormatLong { get; }
    internal static string XMLTRANSFORMATION_TransformNameFormatShort { get; }
    internal static string XMLTRANSFORMATION_TransformNoMatchingTargetNodes { get; }
    internal static string XMLTRANSFORMATION_TransformNotExecutingMessage { get; }
    internal static string XMLTRANSFORMATION_TransformOnlyAppliesOnce { get; }
    internal static string XMLTRANSFORMATION_TransformSourceMatchWasRemoved { get; }
    internal static string XMLTRANSFORMATION_TransformStatusApplyTarget { get; }
    internal static string XMLTRANSFORMATION_TransformStatusApplyTargetNoLineInfo { get; }
    internal static string XMLTRANSFORMATION_TransformStatusXPath { get; }
    internal static string XMLTRANSFORMATION_UnknownTypeName { get; }
    internal static string XMLTRANSFORMATION_UnknownXdtTag { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_XMLTRANSFORMATION_AmbiguousTypeMatch();
    internal static string get_XMLTRANSFORMATION_BadAttributeValue();
    internal static string get_XMLTRANSFORMATION_FatalTransformSyntaxError();
    internal static string get_XMLTRANSFORMATION_ImportAttributeConflict();
    internal static string get_XMLTRANSFORMATION_ImportMissingAssembly();
    internal static string get_XMLTRANSFORMATION_ImportMissingNamespace();
    internal static string get_XMLTRANSFORMATION_ImportUnknownAttribute();
    internal static string get_XMLTRANSFORMATION_IncorrectBaseType();
    internal static string get_XMLTRANSFORMATION_InsertBadXPath();
    internal static string get_XMLTRANSFORMATION_InsertBadXPathResult();
    internal static string get_XMLTRANSFORMATION_InsertMissingArgument();
    internal static string get_XMLTRANSFORMATION_InsertTooManyArguments();
    internal static string get_XMLTRANSFORMATION_MatchAttributeDoesNotExist();
    internal static string get_XMLTRANSFORMATION_NoValidConstructor();
    internal static string get_XMLTRANSFORMATION_RequiresExactArguments();
    internal static string get_XMLTRANSFORMATION_RequiresMinimumArguments();
    internal static string get_XMLTRANSFORMATION_TooManyArguments();
    internal static string get_XMLTRANSFORMATION_TransformArgumentFoundNoAttributes();
    internal static string get_XMLTRANSFORMATION_TransformBeginExecutingMessage();
    internal static string get_XMLTRANSFORMATION_TransformDoesNotExpectArguments();
    internal static string get_XMLTRANSFORMATION_TransformEndExecutingMessage();
    internal static string get_XMLTRANSFORMATION_TransformErrorExecutingMessage();
    internal static string get_XMLTRANSFORMATION_TransformMessageInsert();
    internal static string get_XMLTRANSFORMATION_TransformMessageNoRemoveAttributes();
    internal static string get_XMLTRANSFORMATION_TransformMessageNoSetAttributes();
    internal static string get_XMLTRANSFORMATION_TransformMessageRemove();
    internal static string get_XMLTRANSFORMATION_TransformMessageRemoveAttribute();
    internal static string get_XMLTRANSFORMATION_TransformMessageRemoveAttributes();
    internal static string get_XMLTRANSFORMATION_TransformMessageReplace();
    internal static string get_XMLTRANSFORMATION_TransformMessageSetAttribute();
    internal static string get_XMLTRANSFORMATION_TransformMessageSetAttributes();
    internal static string get_XMLTRANSFORMATION_TransformNameFormatLong();
    internal static string get_XMLTRANSFORMATION_TransformNameFormatShort();
    internal static string get_XMLTRANSFORMATION_TransformNoMatchingTargetNodes();
    internal static string get_XMLTRANSFORMATION_TransformNotExecutingMessage();
    internal static string get_XMLTRANSFORMATION_TransformOnlyAppliesOnce();
    internal static string get_XMLTRANSFORMATION_TransformSourceMatchWasRemoved();
    internal static string get_XMLTRANSFORMATION_TransformStatusApplyTarget();
    internal static string get_XMLTRANSFORMATION_TransformStatusApplyTargetNoLineInfo();
    internal static string get_XMLTRANSFORMATION_TransformStatusXPath();
    internal static string get_XMLTRANSFORMATION_UnknownTypeName();
    internal static string get_XMLTRANSFORMATION_UnknownXdtTag();
}
public abstract class Microsoft.Web.XmlTransform.Transform : object {
    private MissingTargetMessage missingTargetMessage;
    private bool applyTransformToAllTargetNodes;
    private bool useParentAsTargetNode;
    private XmlTransformationLogger logger;
    private XmlElementContext context;
    private XmlNode currentTransformNode;
    private XmlNode currentTargetNode;
    private string argumentString;
    private IList`1<string> arguments;
    protected bool ApplyTransformToAllTargetNodes { get; protected set; }
    protected bool UseParentAsTargetNode { get; protected set; }
    protected MissingTargetMessage MissingTargetMessage { get; protected set; }
    protected XmlNode TransformNode { get; }
    protected XmlNode TargetNode { get; }
    protected XmlNodeList TargetNodes { get; }
    protected XmlNodeList TargetChildNodes { get; }
    protected XmlTransformationLogger Log { get; }
    protected string ArgumentString { get; }
    protected IList`1<string> Arguments { get; }
    private string TransformNameLong { get; }
    internal string TransformNameShort { get; }
    private string TransformName { get; }
    protected Transform(TransformFlags flags);
    protected Transform(TransformFlags flags, MissingTargetMessage message);
    protected bool get_ApplyTransformToAllTargetNodes();
    protected void set_ApplyTransformToAllTargetNodes(bool value);
    protected bool get_UseParentAsTargetNode();
    protected void set_UseParentAsTargetNode(bool value);
    protected MissingTargetMessage get_MissingTargetMessage();
    protected void set_MissingTargetMessage(MissingTargetMessage value);
    protected abstract virtual void Apply();
    protected XmlNode get_TransformNode();
    protected XmlNode get_TargetNode();
    protected XmlNodeList get_TargetNodes();
    protected XmlNodeList get_TargetChildNodes();
    protected XmlTransformationLogger get_Log();
    protected T GetService();
    protected string get_ArgumentString();
    protected IList`1<string> get_Arguments();
    private string get_TransformNameLong();
    internal string get_TransformNameShort();
    private string get_TransformName();
    internal void Execute(XmlElementContext context, string argumentString);
    private void ReleaseLogger();
    private bool ApplyOnAllTargetNodes();
    private void ApplyOnce();
    private void WriteApplyMessage(XmlNode targetNode);
    private bool ShouldExecuteTransform();
    private bool HasRequiredTarget();
    private void HandleMissingTarget(XmlElementContext matchFailureContext, bool existedInOriginal);
}
[FlagsAttribute]
public enum Microsoft.Web.XmlTransform.TransformFlags : Enum {
    public int value__;
    public static TransformFlags None;
    public static TransformFlags ApplyTransformToAllTargetNodes;
    public static TransformFlags UseParentAsTargetNode;
}
internal class Microsoft.Web.XmlTransform.WhitespaceTrackingTextReader : PositionTrackingTextReader {
    private StringBuilder precedingWhitespace;
    public string PrecedingWhitespace { get; }
    public WhitespaceTrackingTextReader(TextReader reader);
    public virtual int Read();
    public string get_PrecedingWhitespace();
    private void UpdateWhitespaceTracking(int character);
    private void AppendWhitespaceCharacter(int character);
    private void ResetWhitespaceString();
}
internal static class Microsoft.Web.XmlTransform.XmlArgumentUtility : object {
    internal static IList`1<string> SplitArguments(string argumentString);
    private static IList`1<string> RecombineArguments(IList`1<string> arguments, char separator);
    private static void TrimStrings(IList`1<string> arguments);
    private static int CountParens(string str);
}
internal class Microsoft.Web.XmlTransform.XmlAttributePreservationDict : object {
    private List`1<string> orderedAttributes;
    private Dictionary`2<string, string> leadingSpaces;
    private string attributeNewLineString;
    private bool computedOneAttributePerLine;
    private bool oneAttributePerLine;
    private bool OneAttributePerLine { get; }
    private bool get_OneAttributePerLine();
    internal void ReadPreservationInfo(string elementStartTag);
    private int EnumerateAttributes(string elementStartTag, Action`3<int, int, string> onAttributeSpotted);
    internal void WritePreservedAttributes(XmlAttributePreservingWriter writer, XmlAttributeCollection attributes);
    internal void UpdatePreservationInfo(XmlAttributeCollection updatedAttributes, XmlFormatter formatter);
    private bool ComputeOneAttributePerLine();
    private bool ContainsNewLine(string space);
    public string GetAttributeNewLineString(XmlFormatter formatter);
    private string ComputeAttributeNewLineString(XmlFormatter formatter);
    private string LookAheadForNewLineString();
    private void EnsureAttributeNewLineString(XmlFormatter formatter);
}
internal class Microsoft.Web.XmlTransform.XmlAttributePreservationProvider : object {
    private StreamReader streamReader;
    private PositionTrackingTextReader reader;
    public XmlAttributePreservationProvider(string fileName);
    public XmlAttributePreservationDict GetDictAtPosition(int lineNumber, int linePosition);
    public void Close();
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class Microsoft.Web.XmlTransform.XmlAttributePreservingWriter : XmlWriter {
    private XmlTextWriter xmlWriter;
    private AttributeTextWriter textWriter;
    public WriteState WriteState { get; }
    public XmlAttributePreservingWriter(string fileName, Encoding encoding);
    public XmlAttributePreservingWriter(Stream w, Encoding encoding);
    public XmlAttributePreservingWriter(TextWriter textWriter);
    public void WriteAttributeWhitespace(string whitespace);
    public void WriteAttributeTrailingWhitespace(string whitespace);
    public string SetAttributeNewLineString(string newLineString);
    private bool IsOnlyWhitespace(string whitespace);
    public virtual void Close();
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteCData(string text);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteComment(string text);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteEndAttribute();
    public virtual void WriteEndDocument();
    public virtual void WriteEndElement();
    public virtual void WriteEntityRef(string name);
    public virtual void WriteFullEndElement();
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteRaw(string data);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteStartDocument();
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual WriteState get_WriteState();
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
}
internal class Microsoft.Web.XmlTransform.XmlElementContext : XmlNodeContext {
    private XmlElementContext parentContext;
    private string xpath;
    private string parentXPath;
    private XmlDocument xmlTargetDoc;
    private IServiceProvider serviceProvider;
    private XmlNode transformNodes;
    private XmlNodeList targetNodes;
    private XmlNodeList targetParents;
    private XmlAttribute transformAttribute;
    private XmlAttribute locatorAttribute;
    private XmlNamespaceManager namespaceManager;
    private static Regex nameAndArgumentsRegex;
    public XmlElement Element { get; }
    public string XPath { get; }
    public string ParentXPath { get; }
    public int TransformLineNumber { get; }
    public int TransformLinePosition { get; }
    public XmlAttribute TransformAttribute { get; }
    public XmlAttribute LocatorAttribute { get; }
    internal XmlNode TransformNode { get; }
    internal XmlNodeList TargetNodes { get; }
    internal XmlNodeList TargetParents { get; }
    private XmlDocument TargetDocument { get; }
    private Regex NameAndArgumentsRegex { get; }
    public XmlElementContext(XmlElementContext parent, XmlElement element, XmlDocument xmlTargetDoc, IServiceProvider serviceProvider);
    private static XmlElementContext();
    public T GetService();
    public XmlElement get_Element();
    public string get_XPath();
    public string get_ParentXPath();
    public Transform ConstructTransform(String& argumentString);
    public int get_TransformLineNumber();
    public int get_TransformLinePosition();
    public XmlAttribute get_TransformAttribute();
    public XmlAttribute get_LocatorAttribute();
    private string ConstructXPath();
    private string ConstructParentXPath();
    private Locator CreateLocator(String& argumentString);
    internal XmlNode get_TransformNode();
    internal XmlNodeList get_TargetNodes();
    internal XmlNodeList get_TargetParents();
    private XmlDocument get_TargetDocument();
    private XmlNode CreateCloneInTargetDocument(XmlNode sourceNode);
    private void ScrubTransformAttributesAndNamespaces(XmlNode node);
    private XmlNodeList GetTargetNodes(string xpath);
    private Exception WrapException(Exception ex);
    private Exception WrapException(Exception ex, XmlNode node);
    private XmlNamespaceManager GetNamespaceManager();
    private XmlNameTable GetParentNameTable();
    private Regex get_NameAndArgumentsRegex();
    private string ParseNameAndArguments(string name, String& arguments);
    private ObjectType CreateObjectFromAttribute(String& argumentString, XmlAttribute& objectAttribute);
    internal bool HasTargetNode(XmlElementContext& failedContext, Boolean& existedInOriginal);
    internal bool HasTargetParent(XmlElementContext& failedContext, Boolean& existedInOriginal);
    private bool ExistedInOriginal(string xpath);
}
public class Microsoft.Web.XmlTransform.XmlFileInfoDocument : XmlDocument {
    private Encoding _textEncoding;
    private XmlTextReader _reader;
    private XmlAttributePreservationProvider _preservationProvider;
    private bool _firstLoad;
    private string _fileName;
    private int _lineNumberOffset;
    private int _linePositionOffset;
    internal bool HasErrorInfo { get; }
    internal string FileName { get; }
    private int CurrentLineNumber { get; }
    private int CurrentLinePosition { get; }
    private bool FirstLoad { get; }
    private XmlAttributePreservationProvider PreservationProvider { get; }
    private Encoding TextEncoding { get; }
    public virtual void Load(string filename);
    public virtual void Load(XmlReader reader);
    private void LoadFromFileName(string filename);
    private void LoadFromTextReader(TextReader textReader);
    private Encoding GetEncodingFromStream(Stream stream);
    internal XmlNode CloneNodeFromOtherDocument(XmlNode element);
    internal bool get_HasErrorInfo();
    internal string get_FileName();
    private int get_CurrentLineNumber();
    private int get_CurrentLinePosition();
    private bool get_FirstLoad();
    private XmlAttributePreservationProvider get_PreservationProvider();
    private Encoding get_TextEncoding();
    public virtual void Save(string filename);
    public virtual void Save(Stream w);
    public virtual XmlElement CreateElement(string prefix, string localName, string namespaceURI);
    public virtual XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI);
    internal bool IsNewNode(XmlNode node);
    private XmlElement FindContainingElement(XmlNode node);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class Microsoft.Web.XmlTransform.XmlFormatter : object {
    private XmlFileInfoDocument document;
    private string originalFileName;
    private LinkedList`1<string> indents;
    private LinkedList`1<string> attributeIndents;
    private string currentIndent;
    private string currentAttributeIndent;
    private string oneTab;
    private string defaultTab;
    private XmlNode currentNode;
    private XmlNode previousNode;
    private XmlNode CurrentNode { get; private set; }
    private XmlNode PreviousNode { get; }
    private string PreviousIndent { get; }
    private string CurrentIndent { get; }
    public string CurrentAttributeIndent { get; }
    private string OneTab { get; }
    public string DefaultTab { get; public set; }
    private XmlFormatter(XmlFileInfoDocument document);
    public static void Format(XmlDocument document);
    private XmlNode get_CurrentNode();
    private void set_CurrentNode(XmlNode value);
    private XmlNode get_PreviousNode();
    private string get_PreviousIndent();
    private string get_CurrentIndent();
    public string get_CurrentAttributeIndent();
    private string get_OneTab();
    public string get_DefaultTab();
    public void set_DefaultTab(string value);
    private void FormatLoop(XmlNode parentNode);
    private void FormatAttributes(XmlNode node);
    private int HandleElement(XmlNode node);
    private void ReorderNewItemsAtEnd(XmlNode node);
    private int HandleStartElement(XmlNode node);
    private int HandleEndElement(XmlNode node);
    private int HandleWhiteSpace(XmlNode node);
    private int EnsureNodeIndent(XmlNode node, bool indentBeforeEnd);
    private string GetIndentFromWhiteSpace(XmlNode node);
    private int FindLastNewLine(string whitespace);
    private void SetIndent(string indent);
    private void PushIndent();
    private void PopIndent();
    private bool NeedsIndent(XmlNode node, XmlNode previousNode);
    private bool IsWhiteSpace(XmlNode node);
    public bool IsText(XmlNode node);
    private bool IsNewNode(XmlNode node);
    private void InsertIndentBefore(XmlNode node);
    private void InsertIndentBeforeEnd(XmlNode node);
    private string ComputeCurrentIndent();
    private string LookAheadForIndent();
    private string ComputeOneTab();
    private string ConvertIndentToTab(string indent);
    private string ComputeCurrentAttributeIndent();
    private string LookForSiblingIndent(XmlNode currentNode);
}
internal class Microsoft.Web.XmlTransform.XmlNodeContext : object {
    private XmlNode node;
    public XmlNode Node { get; }
    public bool HasLineInfo { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XmlNodeContext(XmlNode node);
    public XmlNode get_Node();
    public bool get_HasLineInfo();
    public int get_LineNumber();
    public int get_LinePosition();
}
public class Microsoft.Web.XmlTransform.XmlNodeException : XmlTransformationException {
    private XmlFileInfoDocument document;
    private IXmlLineInfo lineInfo;
    public bool HasErrorInfo { get; }
    public string FileName { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XmlNodeException(Exception innerException, XmlNode node);
    public XmlNodeException(string message, XmlNode node);
    public static Exception Wrap(Exception ex, XmlNode node);
    public bool get_HasErrorInfo();
    public string get_FileName();
    public int get_LineNumber();
    public int get_LinePosition();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Web.XmlTransform.XmlTransformableDocument : XmlFileInfoDocument {
    private XmlDocument xmlOriginal;
    public bool IsChanged { get; }
    public bool get_IsChanged();
    internal void OnBeforeChange();
    internal void OnAfterChange();
    private void CloneOriginalDocument();
    private bool IsXmlEqual(XmlDocument xmlOriginal, XmlDocument xmlTransformed);
    private sealed virtual override XmlNodeList Microsoft.Web.XmlTransform.IXmlOriginalDocumentService.SelectNodes(string xpath, XmlNamespaceManager nsmgr);
}
public class Microsoft.Web.XmlTransform.XmlTransformation : object {
    internal static string TransformNamespace;
    internal static string SupressWarnings;
    private string transformFile;
    private XmlDocument xmlTransformation;
    private XmlDocument xmlTarget;
    private XmlTransformableDocument xmlTransformable;
    private XmlTransformationLogger logger;
    private NamedTypeFactory namedTypeFactory;
    private ServiceContainer transformationServiceContainer;
    private ServiceContainer documentServiceContainer;
    private bool hasTransformNamespace;
    public bool HasTransformNamespace { get; }
    public XmlTransformation(string transformFile);
    public XmlTransformation(string transform, IXmlTransformationLogger logger);
    public XmlTransformation(string transform, bool isTransformAFile, IXmlTransformationLogger logger);
    public XmlTransformation(Stream transformStream, IXmlTransformationLogger logger);
    private static XmlTransformation();
    public bool get_HasTransformNamespace();
    private void InitializeTransformationServices();
    private void InitializeDocumentServices(XmlDocument document);
    private void ReleaseDocumentServices();
    private void PreprocessTransformDocument();
    public void AddTransformationService(Type serviceType, object serviceInstance);
    public void RemoveTransformationService(Type serviceType);
    public bool Apply(XmlDocument xmlTarget);
    private void TransformLoop(XmlDocument xmlSource);
    private void TransformLoop(XmlNodeContext parentContext);
    private XmlElementContext CreateElementContext(XmlElementContext parentContext, XmlElement element);
    private void HandleException(Exception ex);
    private void HandleException(Exception ex, XmlNodeContext context);
    private Exception WrapException(Exception ex, XmlNodeContext context);
    private void HandleElement(XmlElementContext context);
    private void OnApplyingTransform();
    private void OnAppliedTransform();
    private void PreprocessImportElement(XmlElementContext context);
    public sealed virtual object GetService(Type serviceType);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
public class Microsoft.Web.XmlTransform.XmlTransformationException : Exception {
    public XmlTransformationException(string message);
    public XmlTransformationException(string message, Exception innerException);
}
public class Microsoft.Web.XmlTransform.XmlTransformationLogger : object {
    private bool hasLoggedErrors;
    private IXmlTransformationLogger externalLogger;
    private XmlNode currentReferenceNode;
    private bool fSupressWarnings;
    internal bool HasLoggedErrors { get; internal set; }
    internal XmlNode CurrentReferenceNode { get; internal set; }
    public bool SupressWarnings { get; public set; }
    internal XmlTransformationLogger(IXmlTransformationLogger logger);
    internal void LogErrorFromException(Exception ex);
    internal bool get_HasLoggedErrors();
    internal void set_HasLoggedErrors(bool value);
    internal XmlNode get_CurrentReferenceNode();
    internal void set_CurrentReferenceNode(XmlNode value);
    public bool get_SupressWarnings();
    public void set_SupressWarnings(bool value);
    public void LogMessage(string message, Object[] messageArgs);
    public void LogMessage(MessageType type, string message, Object[] messageArgs);
    public void LogWarning(string message, Object[] messageArgs);
    public void LogWarning(XmlNode referenceNode, string message, Object[] messageArgs);
    public void LogError(string message, Object[] messageArgs);
    public void LogError(XmlNode referenceNode, string message, Object[] messageArgs);
    public void StartSection(string message, Object[] messageArgs);
    public void StartSection(MessageType type, string message, Object[] messageArgs);
    public void EndSection(string message, Object[] messageArgs);
    public void EndSection(MessageType type, string message, Object[] messageArgs);
    private string ConvertUriToFileName(XmlDocument xmlDocument);
    private string ConvertUriToFileName(string fileName);
}
public class Microsoft.Web.XmlTransform.XPath : Locator {
    protected string ParentPath { get; }
    protected virtual string get_ParentPath();
    protected virtual string ConstructPath();
}
public enum Microsoft.Web.XmlTransform.XPathAxis : Enum {
    public int value__;
    public static XPathAxis Child;
    public static XPathAxis Descendant;
    public static XPathAxis Parent;
    public static XPathAxis Ancestor;
    public static XPathAxis FollowingSibling;
    public static XPathAxis PrecedingSibling;
    public static XPathAxis Following;
    public static XPathAxis Preceding;
    public static XPathAxis Self;
    public static XPathAxis DescendantOrSelf;
    public static XPathAxis AncestorOrSelf;
}
