[ExtensionAttribute]
internal static class Smidge.Nuglify.BundleContextExtensions : object {
    [ExtensionAttribute]
public static V3DeferredSourceMap GetSourceMapFromContext(BundleContext bundleContext, SourceMapType sourceMapType);
    [ExtensionAttribute]
public static string GetSourceMapFilePath(BundleContext bundleContext, string cacheBusterValue);
    [ExtensionAttribute]
public static string GetSourceMapFilePath(BundleRequestModel bundleRequest);
}
public interface Smidge.Nuglify.INuglifyCodeSettings {
    public CodeSettings CodeSettings { get; }
    public SourceMapType SourceMapType { get; }
    public abstract virtual CodeSettings get_CodeSettings();
    public abstract virtual SourceMapType get_SourceMapType();
}
public interface Smidge.Nuglify.ISourceMapDeclaration {
    public abstract virtual Task`1<string> GetDeclarationAsync(BundleContext bundleContext, V3DeferredSourceMap sourceMap);
}
public class Smidge.Nuglify.NuglifyCodeSettings : object {
    [CompilerGeneratedAttribute]
private CodeSettings <CodeSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private CssSettings <CssSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceMapType <SourceMapType>k__BackingField;
    public CodeSettings CodeSettings { get; }
    [ObsoleteAttribute("This is not used and will be removed in future versions")]
[EditorBrowsableAttribute("1")]
public CssSettings CssSettings { get; }
    public SourceMapType SourceMapType { get; public set; }
    public NuglifyCodeSettings(CodeSettings codeSettings);
    [CompilerGeneratedAttribute]
public sealed virtual CodeSettings get_CodeSettings();
    [CompilerGeneratedAttribute]
public CssSettings get_CssSettings();
    [CompilerGeneratedAttribute]
public sealed virtual SourceMapType get_SourceMapType();
    [CompilerGeneratedAttribute]
public void set_SourceMapType(SourceMapType value);
}
public class Smidge.Nuglify.NuglifyCss : object {
    private NuglifySettings _settings;
    private IRequestHelper _requestHelper;
    public NuglifyCss(NuglifySettings settings, IRequestHelper requestHelper);
    public sealed virtual Task ProcessAsync(FileProcessContext fileProcessContext, PreProcessorDelegate next);
    protected virtual UglifyResult NuglifyProcess(FileProcessContext fileProcessContext, CssSettings cssSettings);
}
public class Smidge.Nuglify.NuglifyJs : object {
    private NuglifySettings _settings;
    private ISourceMapDeclaration _sourceMapDeclaration;
    private IRequestHelper _requestHelper;
    public NuglifyJs(NuglifySettings settings, ISourceMapDeclaration sourceMapDeclaration, IRequestHelper requestHelper);
    public sealed virtual Task ProcessAsync(FileProcessContext fileProcessContext, PreProcessorDelegate next);
    protected virtual UglifyResult NuglifyProcess(FileProcessContext fileProcessContext, CodeSettings codeSettings);
    private void AddSourceMapAppenderToContextAsync(BundleContext bundleContext, SourceMapType sourceMapType);
}
public class Smidge.Nuglify.NuglifyMinifiedFilePathConvention : object {
    public sealed virtual IWebFile Apply(IWebFile file);
}
public class Smidge.Nuglify.NuglifySettings : object {
    [CompilerGeneratedAttribute]
private INuglifyCodeSettings <JsCodeSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private CssSettings <CssCodeSettings>k__BackingField;
    public INuglifyCodeSettings JsCodeSettings { get; }
    public CssSettings CssCodeSettings { get; }
    public NuglifySettings(INuglifyCodeSettings jsCodeSettings, CssSettings cssSettings);
    [CompilerGeneratedAttribute]
public INuglifyCodeSettings get_JsCodeSettings();
    [CompilerGeneratedAttribute]
public CssSettings get_CssCodeSettings();
}
public class Smidge.Nuglify.NuglifySmidgeOptionsSetup : ConfigureOptions`1<SmidgeOptions> {
    public static void ConfigureSmidge(SmidgeOptions options);
}
public class Smidge.Nuglify.NuglifySourceMapController : Controller {
    private ISmidgeFileSystem _fileSystem;
    private IBundleManager _bundleManager;
    public NuglifySourceMapController(ISmidgeFileSystem fileSystem, IBundleManager bundleManager);
    public ActionResult SourceMap(BundleRequestModel bundle);
}
[ExtensionAttribute]
public static class Smidge.Nuglify.SmidgeNuglifyStartup : object {
    [ExtensionAttribute]
public static IServiceCollection AddSmidgeNuglify(IServiceCollection services, NuglifySettings nuglifySettings);
    [ExtensionAttribute]
public static void UseSmidgeNuglify(IApplicationBuilder app, bool useEndpointRouting);
}
internal class Smidge.Nuglify.SourceMapDeclaration : object {
    private IRequestHelper _requestHelper;
    private IOptions`1<SmidgeOptions> _smidgeOptions;
    private ISmidgeFileSystem _fileSystem;
    public SourceMapDeclaration(IRequestHelper requestHelper, IOptions`1<SmidgeOptions> smidgeOptions, ISmidgeFileSystem fileSystem);
    [AsyncStateMachineAttribute("Smidge.Nuglify.SourceMapDeclaration/<GetDeclarationAsync>d__4")]
public sealed virtual Task`1<string> GetDeclarationAsync(BundleContext bundleContext, V3DeferredSourceMap sourceMap);
    private string GetSourceMapUrl(string bundleName, string fileExtension, bool debug, string cacheBusterValue);
}
public enum Smidge.Nuglify.SourceMapType : Enum {
    public int value__;
    public static SourceMapType None;
    public static SourceMapType Default;
    public static SourceMapType Inline;
}
internal class Smidge.Nuglify.Utf8StringWriter : StringWriter {
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public Encoding Encoding { get; }
    public Utf8StringWriter(StringBuilder builder);
    [CompilerGeneratedAttribute]
public virtual Encoding get_Encoding();
}
public class Smidge.Nuglify.V3DeferredSourceMap : object {
    public static string ImplementationName;
    [CompilerGeneratedAttribute]
private SourceMapType <SourceMapType>k__BackingField;
    private V3SourceMap _wrapped;
    private StringBuilder _mapBuilder;
    private string _mapPath;
    [CompilerGeneratedAttribute]
private string <SourceMapOutput>k__BackingField;
    public SourceMapType SourceMapType { get; }
    public string Name { get; }
    public string SourceRoot { get; public set; }
    public bool SafeHeader { get; public set; }
    public string SourceMapOutput { get; private set; }
    public V3DeferredSourceMap(V3SourceMap wrapped, StringBuilder mapBuilder, SourceMapType sourceSourceMapType);
    [CompilerGeneratedAttribute]
public SourceMapType get_SourceMapType();
    public sealed virtual void Dispose();
    public sealed virtual void StartPackage(string sourcePath, string mapPath);
    public sealed virtual void EndPackage();
    public sealed virtual object StartSymbol(AstNode node, int startLine, int startColumn);
    public sealed virtual void MarkSegment(AstNode node, int startLine, int startColumn, string name, SourceContext context);
    public sealed virtual void EndSymbol(object symbol, int endLine, int endColumn, string parentContext);
    public sealed virtual void EndOutputRun(int lineNumber, int columnPosition);
    public sealed virtual void EndFile(TextWriter writer, string newLine);
    public sealed virtual void NewLineInsertedInOutput();
    public sealed virtual string get_Name();
    public sealed virtual string get_SourceRoot();
    public sealed virtual void set_SourceRoot(string value);
    public sealed virtual bool get_SafeHeader();
    public sealed virtual void set_SafeHeader(bool value);
    public string GetInlineSourceMapMarkup();
    public string GetExternalFileSourceMapMarkup(string mapPath);
    [CompilerGeneratedAttribute]
public string get_SourceMapOutput();
    [CompilerGeneratedAttribute]
private void set_SourceMapOutput(string value);
}
