public class Smidge.AutoWebsiteInfo : object {
    private IHttpContextAccessor _httpContext;
    private string _basePath;
    private Uri _baseUrl;
    public AutoWebsiteInfo(IHttpContextAccessor httpContext);
    public sealed virtual string GetBasePath();
    public sealed virtual Uri GetBaseUrl();
}
public class Smidge.Controllers.AddCompressionHeaderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public bool IsReusable { get; }
    public int Order { get; public set; }
    public sealed virtual IFilterMetadata CreateInstance(IServiceProvider serviceProvider);
    public sealed virtual bool get_IsReusable();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
}
public class Smidge.Controllers.AddExpiryHeadersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public bool IsReusable { get; }
    public int Order { get; public set; }
    public sealed virtual IFilterMetadata CreateInstance(IServiceProvider serviceProvider);
    public sealed virtual bool get_IsReusable();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
}
public class Smidge.Controllers.CheckNotModifiedAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public bool IsReusable { get; }
    public int Order { get; public set; }
    public sealed virtual IFilterMetadata CreateInstance(IServiceProvider serviceProvider);
    public sealed virtual bool get_IsReusable();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
}
public class Smidge.Controllers.CompositeFileCacheFilterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public bool IsReusable { get; }
    public int Order { get; public set; }
    public sealed virtual IFilterMetadata CreateInstance(IServiceProvider serviceProvider);
    public sealed virtual bool get_IsReusable();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    internal static bool TryGetCachedCompositeFileResult(ISmidgeFileSystem fileSystem, string cacheBusterValue, string filesetKey, CompressionType type, string mime, FileResult& result, DateTime& lastWriteTime);
}
[AddCompressionHeaderAttribute]
[AddExpiryHeadersAttribute]
[CheckNotModifiedAttribute]
[CompositeFileCacheFilterAttribute]
[AllowAnonymousAttribute]
public class Smidge.Controllers.SmidgeController : Controller {
    private ISmidgeFileSystem _fileSystem;
    private IBundleManager _bundleManager;
    private IBundleFileSetGenerator _fileSetGenerator;
    private PreProcessPipelineFactory _processorFactory;
    private IPreProcessManager _preProcessManager;
    private ILogger _logger;
    public SmidgeController(ISmidgeFileSystem fileSystemHelper, IBundleManager bundleManager, IBundleFileSetGenerator fileSetGenerator, PreProcessPipelineFactory processorFactory, IPreProcessManager preProcessManager, ILogger`1<SmidgeController> logger);
    [AsyncStateMachineAttribute("Smidge.Controllers.SmidgeController/<Bundle>d__7")]
public Task`1<IActionResult> Bundle(BundleRequestModel bundleModel);
    [AsyncStateMachineAttribute("Smidge.Controllers.SmidgeController/<Composite>d__8")]
public Task`1<IActionResult> Composite(CompositeFileModel file);
    [AsyncStateMachineAttribute("Smidge.Controllers.SmidgeController/<CacheCompositeFileAsync>d__9")]
private static Task CacheCompositeFileAsync(ICacheFileSystem cacheProvider, string filePath, Stream compositeStream);
    [AsyncStateMachineAttribute("Smidge.Controllers.SmidgeController/<GetCombinedStreamAsync>d__10")]
private Task`1<Stream> GetCombinedStreamAsync(IEnumerable`1<IFileInfo> files, BundleContext bundleContext);
}
public class Smidge.DynamicallyRegisteredWebFiles : object {
    [CompilerGeneratedAttribute]
private HashSet`1<IWebFile> <Files>k__BackingField;
    internal HashSet`1<IWebFile> Files { get; private set; }
    public IEnumerable`1<IWebFile> JavaScriptFiles { get; }
    public IEnumerable`1<IWebFile> CssFiles { get; }
    [CompilerGeneratedAttribute]
internal HashSet`1<IWebFile> get_Files();
    [CompilerGeneratedAttribute]
private void set_Files(HashSet`1<IWebFile> value);
    public IEnumerable`1<IWebFile> get_JavaScriptFiles();
    public IEnumerable`1<IWebFile> get_CssFiles();
}
internal class Smidge.HttpConstants : object {
    internal static string HttpDateFormat;
}
[ExtensionAttribute]
public static class Smidge.HttpExtensions : object {
    [ExtensionAttribute]
public static bool HasETagBeenModified(HttpRequest request, string etag);
    [ExtensionAttribute]
public static bool HasRequestBeenModifiedSince(HttpRequest request, DateTime utcLastModified);
    internal static bool TryParseHttpDate(string dateString, DateTime& parsedDate);
    [ExtensionAttribute]
public static void AddLastModifiedResponseHeader(HttpResponse response, RequestModel model);
    [ExtensionAttribute]
public static void AddExpiresResponseHeader(HttpResponse response, int cacheHours);
    [ExtensionAttribute]
public static void AddCacheControlResponseHeader(HttpResponse response, int cacheHours);
    [ExtensionAttribute]
public static void AddETagResponseHeader(HttpResponse response, string etag);
    [ExtensionAttribute]
public static void AddCompressionResponseHeader(HttpResponse response, CompressionType cType);
}
internal class Smidge.Models.BundleModelBinder : object {
    public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
}
public class Smidge.Models.BundleRequestModel : RequestModel {
    [CompilerGeneratedAttribute]
private Bundle <Bundle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileKey>k__BackingField;
    public Bundle Bundle { get; }
    public string FileKey { get; }
    public BundleRequestModel(IUrlManager urlManager, IActionContextAccessor accessor, IRequestHelper requestHelper, IBundleManager bundleManager);
    [CompilerGeneratedAttribute]
public Bundle get_Bundle();
    [CompilerGeneratedAttribute]
public virtual string get_FileKey();
}
public class Smidge.Models.CompositeFileModel : RequestModel {
    [CompilerGeneratedAttribute]
private string <FileKey>k__BackingField;
    public string FileKey { get; }
    public CompositeFileModel(IHasher hasher, IUrlManager urlManager, IActionContextAccessor accessor, IRequestHelper requestHelper);
    [CompilerGeneratedAttribute]
public virtual string get_FileKey();
}
public abstract class Smidge.Models.RequestModel : object {
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private ParsedUrlPath <ParsedPath>k__BackingField;
    [CompilerGeneratedAttribute]
private CompressionType <Compression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastFileWriteTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBundleFound>k__BackingField;
    public string FileKey { get; }
    public bool Debug { get; }
    public ParsedUrlPath ParsedPath { get; }
    public CompressionType Compression { get; private set; }
    public string Extension { get; private set; }
    public string Mime { get; private set; }
    public DateTime LastFileWriteTime { get; public set; }
    public bool IsBundleFound { get; public set; }
    protected RequestModel(string valueName, IUrlManager urlManager, IActionContextAccessor accessor, IRequestHelper requestHelper);
    public abstract virtual string get_FileKey();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Debug();
    [CompilerGeneratedAttribute]
public ParsedUrlPath get_ParsedPath();
    [CompilerGeneratedAttribute]
public sealed virtual CompressionType get_Compression();
    [CompilerGeneratedAttribute]
private void set_Compression(CompressionType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Extension();
    [CompilerGeneratedAttribute]
private void set_Extension(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Mime();
    [CompilerGeneratedAttribute]
private void set_Mime(string value);
    [CompilerGeneratedAttribute]
public DateTime get_LastFileWriteTime();
    [CompilerGeneratedAttribute]
public void set_LastFileWriteTime(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_IsBundleFound();
    [CompilerGeneratedAttribute]
public void set_IsBundleFound(bool value);
}
internal class Smidge.NoopSmidgeRequire : object {
    public sealed virtual ISmidgeRequire RequiresJs(JavaScriptFile file);
    public sealed virtual ISmidgeRequire RequiresJs(String[] paths);
    public sealed virtual ISmidgeRequire RequiresCss(CssFile file);
    public sealed virtual ISmidgeRequire RequiresCss(String[] paths);
}
public class Smidge.RequestHelper : object {
    private IWebsiteInfo _siteInfo;
    public RequestHelper(IWebsiteInfo siteInfo);
    public sealed virtual bool IsExternalRequestPath(string path);
    public sealed virtual string Content(IWebFile file);
    public sealed virtual string Content(string path);
    public sealed virtual CompressionType GetClientCompression(IDictionary`2<string, StringValues> headers);
}
public class Smidge.SmidgeHelper : object {
    private DynamicallyRegisteredWebFiles _dynamicallyRegisteredWebFiles;
    private IPreProcessManager _preProcessManager;
    private ISmidgeFileSystem _fileSystem;
    private IBundleManager _bundleManager;
    private FileBatcher _fileBatcher;
    private IBundleFileSetGenerator _fileSetGenerator;
    private PreProcessPipelineFactory _processorFactory;
    private IUrlManager _urlManager;
    private IRequestHelper _requestHelper;
    private IHttpContextAccessor _httpContextAccessor;
    private CacheBusterResolver _cacheBusterResolver;
    public SmidgeHelper(IBundleFileSetGenerator fileSetGenerator, DynamicallyRegisteredWebFiles dynamicallyRegisteredWebFiles, IPreProcessManager preProcessManager, ISmidgeFileSystem fileSystem, IHasher hasher, IBundleManager bundleManager, PreProcessPipelineFactory processorFactory, IUrlManager urlManager, IRequestHelper requestHelper, IHttpContextAccessor httpContextAccessor, CacheBusterResolver cacheBusterResolver);
    [AsyncStateMachineAttribute("Smidge.SmidgeHelper/<JsHereAsync>d__12")]
public Task`1<HtmlString> JsHereAsync(string bundleName, bool debug);
    [AsyncStateMachineAttribute("Smidge.SmidgeHelper/<CssHereAsync>d__13")]
public Task`1<HtmlString> CssHereAsync(string bundleName, bool debug);
    [AsyncStateMachineAttribute("Smidge.SmidgeHelper/<JsHereAsync>d__14")]
public Task`1<HtmlString> JsHereAsync(PreProcessPipeline pipeline, bool debug);
    [AsyncStateMachineAttribute("Smidge.SmidgeHelper/<CssHereAsync>d__15")]
public Task`1<HtmlString> CssHereAsync(PreProcessPipeline pipeline, bool debug);
    [AsyncStateMachineAttribute("Smidge.SmidgeHelper/<GenerateJsUrlsAsync>d__16")]
public Task`1<IEnumerable`1<string>> GenerateJsUrlsAsync(PreProcessPipeline pipeline, bool debug);
    public Task`1<IEnumerable`1<string>> GenerateJsUrlsAsync(string bundleName, bool debug);
    [AsyncStateMachineAttribute("Smidge.SmidgeHelper/<GenerateCssUrlsAsync>d__18")]
public Task`1<IEnumerable`1<string>> GenerateCssUrlsAsync(PreProcessPipeline pipeline, bool debug);
    public Task`1<IEnumerable`1<string>> GenerateCssUrlsAsync(string bundleName, bool debug);
    private IEnumerable`1<string> GenerateBundleUrlsAsync(string bundleName, string fileExt, bool debug);
    [AsyncStateMachineAttribute("Smidge.SmidgeHelper/<GenerateUrlsAsync>d__21")]
private Task`1<IEnumerable`1<string>> GenerateUrlsAsync(IEnumerable`1<IWebFile> files, WebFileType fileType, PreProcessPipeline pipeline, bool debug);
    public sealed virtual ISmidgeRequire RequiresJs(JavaScriptFile file);
    public sealed virtual ISmidgeRequire RequiresJs(String[] paths);
    public sealed virtual ISmidgeRequire RequiresCss(CssFile file);
    public sealed virtual ISmidgeRequire RequiresCss(String[] paths);
    public ISmidgeRequire CreateJsBundle(string bundleName);
    public ISmidgeRequire CreateCssBundle(string bundleName);
}
internal class Smidge.SmidgeRequire : object {
    private string _bundleName;
    private IBundleManager _bundleManager;
    private WebFileType _type;
    private IRequestHelper _requestHelper;
    public SmidgeRequire(string bundleName, IBundleManager bundleManager, WebFileType type, IRequestHelper requestHelper);
    public sealed virtual ISmidgeRequire RequiresJs(JavaScriptFile file);
    public sealed virtual ISmidgeRequire RequiresJs(String[] paths);
    public sealed virtual ISmidgeRequire RequiresCss(CssFile file);
    public sealed virtual ISmidgeRequire RequiresCss(String[] paths);
}
[ExtensionAttribute]
public static class Smidge.SmidgeStartup : object {
    [ExtensionAttribute]
public static IServiceCollection AddSmidge(IServiceCollection services, IConfiguration smidgeConfiguration);
    [ExtensionAttribute]
public static void UseSmidge(IApplicationBuilder app, Action`1<IBundleManager> configureBundles, bool useEndpointRouting);
    private static void WireUpFileWatchEventHandlers(CacheBusterResolver cacheBusterResolver, ISmidgeFileSystem fileSystem, Bundle bundle);
    private static EventHandler`1<FileWatchEventArgs> FileWatchOptions_FileModified(CacheBusterResolver cacheBusterResolver, ISmidgeFileSystem fileSystem, string bundleName);
    [AsyncStateMachineAttribute("Smidge.SmidgeStartup/<FileWatchOptions_FileModified>d__4")]
private static void FileWatchOptions_FileModified(CacheBusterResolver cacheBusterResolver, ISmidgeFileSystem fileSystem, string bundleName, FileWatchEventArgs e);
}
[HtmlTargetElementAttribute]
public class Smidge.TagHelpers.SmidgeLinkTagHelper : TagHelper {
    private static string HrefAttributeName;
    private IBundleManager _bundleManager;
    private HtmlEncoder _encoder;
    private HashSet`1<string> _invalidAttributes;
    private SmidgeHelper _smidgeHelper;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [HtmlAttributeNameAttribute("debug")]
public bool Debug { get; public set; }
    public int Order { get; }
    [HtmlAttributeNameAttribute("href")]
public string Source { get; public set; }
    public SmidgeLinkTagHelper(SmidgeHelper smidgeHelper, IBundleManager bundleManager, HtmlEncoder encoder);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    public virtual int get_Order();
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [AsyncStateMachineAttribute("Smidge.TagHelpers.SmidgeLinkTagHelper/<ProcessAsync>d__16")]
public virtual Task ProcessAsync(TagHelperContext context, TagHelperOutput output);
    [CompilerGeneratedAttribute]
private bool <ProcessAsync>b__16_0(TagHelperAttribute x);
}
[HtmlTargetElementAttribute("script")]
public class Smidge.TagHelpers.SmidgeScriptTagHelper : TagHelper {
    private static string SrcIncludeAttributeName;
    private static string SrcExcludeAttributeName;
    private static string FallbackSrcAttributeName;
    private static string FallbackSrcIncludeAttributeName;
    private static string SuppressFallbackIntegrityAttributeName;
    private static string FallbackSrcExcludeAttributeName;
    private static string FallbackTestExpressionAttributeName;
    private static string AppendVersionAttributeName;
    private static string SrcAttributeName;
    private HashSet`1<string> _invalid;
    private SmidgeHelper _smidgeHelper;
    private IBundleManager _bundleManager;
    private HtmlEncoder _encoder;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    public int Order { get; }
    [HtmlAttributeNameAttribute("src")]
public string Source { get; public set; }
    [HtmlAttributeNameAttribute("debug")]
public bool Debug { get; public set; }
    public SmidgeScriptTagHelper(SmidgeHelper smidgeHelper, IBundleManager bundleManager, HtmlEncoder encoder);
    public virtual int get_Order();
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [AsyncStateMachineAttribute("Smidge.TagHelpers.SmidgeScriptTagHelper/<ProcessAsync>d__24")]
public virtual Task ProcessAsync(TagHelperContext context, TagHelperOutput output);
    [CompilerGeneratedAttribute]
private bool <ProcessAsync>b__24_0(TagHelperAttribute x);
}
