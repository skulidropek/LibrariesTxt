[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Snappier.Internal.ByteArrayPoolMemoryOwner : object {
    [NullableAttribute("2")]
private Byte[] _innerArray;
    [CompilerGeneratedAttribute]
private Memory`1<byte> <Memory>k__BackingField;
    public Memory`1<byte> Memory { get; private set; }
    [NullableContextAttribute("1")]
public ByteArrayPoolMemoryOwner(Byte[] innerArray, int length);
    [CompilerGeneratedAttribute]
public sealed virtual Memory`1<byte> get_Memory();
    [CompilerGeneratedAttribute]
private void set_Memory(Memory`1<byte> value);
    public sealed virtual void Dispose();
}
internal static class Snappier.Internal.Constants : object {
    public static byte Literal;
    public static byte Copy1ByteOffset;
    public static byte Copy2ByteOffset;
    public static byte Copy4ByteOffset;
    public static int MaximumTagLength;
    public static int BlockLog;
    public static long BlockSize;
    [NativeIntegerAttribute]
public static IntPtr InputMarginBytes;
    public static ReadOnlySpan`1<ushort> CharTable { get; }
    public static ReadOnlySpan`1<ushort> get_CharTable();
}
internal class Snappier.Internal.CopyHelpers : object {
    public static void IncrementalCopy(Byte& source, Byte& op, Byte& opEnd, Byte& bufferEnd);
    public static void IncrementalCopySlow(Byte& source, Byte& op, Byte& opEnd);
    public static void UnalignedCopy64(Byte& source, Byte& destination);
    public static void UnalignedCopy128(Byte& source, Byte& destination);
}
internal static class Snappier.Internal.Crc32CAlgorithm : object {
    private static UInt32 Poly;
    [NullableAttribute("1")]
private static UInt32[] Table;
    private static Crc32CAlgorithm();
    public static UInt32 Compute(ReadOnlySpan`1<byte> source);
    public static UInt32 Append(UInt32 crc, ReadOnlySpan`1<byte> source);
    public static UInt32 ApplyMask(UInt32 x);
}
internal class Snappier.Internal.HashTable : object {
    private static int MinHashTableBits;
    private static int MinHashTableSize;
    private static int MaxHashTableBits;
    private static int MaxHashTableSize;
    [NullableAttribute("2")]
private UInt16[] _buffer;
    public void EnsureCapacity(int inputSize);
    public Span`1<ushort> GetHashTable(int fragmentSize);
    private static int CalculateTableSize(int inputSize);
    public sealed virtual void Dispose();
    public static UInt16& TableEntry(UInt16& table, UInt32 bytes, UInt32 mask);
}
internal static class Snappier.Internal.Helpers : object {
    private static ReadOnlySpan`1<byte> LeftShiftOverflowsMasks { get; }
    private static ReadOnlySpan`1<byte> Log2DeBruijn { get; }
    public static int MaxCompressedLength(int sourceBytes);
    private static ReadOnlySpan`1<byte> get_LeftShiftOverflowsMasks();
    public static bool LeftShiftOverflows(byte value, int shift);
    public static UInt32 ExtractLowBytes(UInt32 value, int numBytes);
    public static UInt32 UnsafeReadUInt32(Byte& ptr);
    public static ulong UnsafeReadUInt64(Byte& ptr);
    public static void UnsafeWriteUInt32(Byte& ptr, UInt32 value);
    private static ReadOnlySpan`1<byte> get_Log2DeBruijn();
    private static int Log2SoftwareFallback(UInt32 value);
    public static int Log2Floor(UInt32 n);
    public static int Log2FloorNonZero(UInt32 n);
    public static int FindLsbSetNonZero(UInt32 n);
    public static int FindLsbSetNonZero(ulong n);
}
internal class Snappier.Internal.SnappyCompressor : object {
    [NullableAttribute("2")]
private HashTable _workingMemory;
    public int Compress(ReadOnlySpan`1<byte> input, Span`1<byte> output);
    public sealed virtual void Dispose();
    private static int WriteUncompressedLength(Span`1<byte> output, int length);
    private static int CompressFragment(ReadOnlySpan`1<byte> input, Span`1<byte> output, Span`1<ushort> tableSpan);
    private static Byte& EmitLiteralFast(Byte& op, Byte& literal, UInt32 length);
    private static Byte& EmitLiteralSlow(Byte& op, Byte& literal, UInt32 length);
    private static Byte& EmitCopyAtMost64LenLessThan12(Byte& op, long offset, long length);
    private static Byte& EmitCopyAtMost64LenGreaterThanOrEqualTo12(Byte& op, long offset, long length);
    private static Byte& EmitCopyLenLessThan12(Byte& op, long offset, long length);
    private static Byte& EmitCopyLenGreaterThanOrEqualTo12(Byte& op, long offset, long length);
    internal static ValueTuple`2<int, bool> FindMatchLength(Byte& s1, Byte& s2, Byte& s2Limit, UInt64& data);
    private static ValueTuple`2<int, bool> FindMatchLengthX64(Byte& s1, Byte& s2, Byte& s2Limit, UInt64& data);
}
internal class Snappier.Internal.SnappyDecompressor : object {
    [NullableAttribute("1")]
private Byte[] _scratch;
    private UInt32 _scratchLength;
    private int _remainingLiteral;
    private int _uncompressedLengthShift;
    private int _uncompressedLength;
    [NullableAttribute("2")]
private Byte[] _lookbackBufferArray;
    private Memory`1<byte> _lookbackBuffer;
    private int _lookbackPosition;
    private int _readPosition;
    private Nullable`1<int> _expectedLength;
    public bool NeedMoreData { get; }
    private Nullable`1<int> ExpectedLength { get; private set; }
    public int UnreadBytes { get; }
    public bool EndOfFile { get; }
    public bool AllDataDecompressed { get; }
    public bool get_NeedMoreData();
    public void Decompress(ReadOnlySpan`1<byte> input);
    public void Reset();
    private Nullable`1<int> ReadUncompressedLength(ReadOnlySpan`1& input);
    public static int ReadUncompressedLength(ReadOnlySpan`1<byte> input);
    internal void DecompressAllTags(ReadOnlySpan`1<byte> inputSpan);
    private ValueTuple`2<UInt32, UInt32> DecompressTagFromScratch(Byte& input, Byte& inputEnd, Byte& op, Byte& buffer, Byte& bufferEnd);
    private UInt32 RefillTagFromScratch(Byte& input, Byte& inputEnd);
    private UInt32 RefillTag(Byte& input, Byte& inputEnd);
    private Nullable`1<int> get_ExpectedLength();
    private void set_ExpectedLength(Nullable`1<int> value);
    public int get_UnreadBytes();
    public bool get_EndOfFile();
    public bool get_AllDataDecompressed();
    private void Append(ReadOnlySpan`1<byte> input);
    private static void Append(Byte& op, Byte& bufferEnd, Byte& input, IntPtr length);
    private static bool TryFastAppend(Byte& op, Byte& bufferEnd, Byte& input, IntPtr available, IntPtr length);
    private static void AppendFromSelf(Byte& op, Byte& buffer, Byte& bufferEnd, UInt32 copyOffset, IntPtr length);
    public int Read(Span`1<byte> destination);
    [NullableContextAttribute("1")]
public IMemoryOwner`1<byte> ExtractData();
    internal void WriteToBufferForTest(ReadOnlySpan`1<byte> toWrite);
    [NullableContextAttribute("1")]
internal void LoadScratchForTest(Byte[] newScratch, UInt32 newScratchLength);
    internal void SetExpectedLengthForTest(int expectedLength);
    public sealed virtual void Dispose();
}
internal class Snappier.Internal.SnappyStreamCompressor : object {
    [NullableAttribute("2")]
private SnappyCompressor _compressor;
    [NullableAttribute("2")]
private Byte[] _inputBuffer;
    private int _inputBufferSize;
    [NullableAttribute("2")]
private Byte[] _outputBuffer;
    private int _outputBufferSize;
    private bool _streamHeaderWritten;
    private static ReadOnlySpan`1<byte> SnappyHeader { get; }
    private static ReadOnlySpan`1<byte> get_SnappyHeader();
    public void Write(ReadOnlySpan`1<byte> input, Stream stream);
    [AsyncStateMachineAttribute("Snappier.Internal.SnappyStreamCompressor/<WriteAsync>d__9")]
public ValueTask WriteAsync(ReadOnlyMemory`1<byte> input, Stream stream, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public void Flush(Stream stream);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Snappier.Internal.SnappyStreamCompressor/<FlushAsync>d__11")]
public ValueTask FlushAsync(Stream stream, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
private void WriteOutputBuffer(Stream stream);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Snappier.Internal.SnappyStreamCompressor/<WriteOutputBufferAsync>d__13")]
private ValueTask WriteOutputBufferAsync(Stream stream, CancellationToken cancellationToken);
    private void EnsureStreamHeaderWritten();
    private int CompressInput(ReadOnlySpan`1<byte> input);
    private void CompressBlock(ReadOnlySpan`1<byte> input);
    private static void WriteCompressedBlockHeader(ReadOnlySpan`1<byte> input, Span`1<byte> output, int compressedSize);
    [MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private void EnsureBuffer();
    public sealed virtual void Dispose();
}
internal class Snappier.Internal.SnappyStreamDecompressor : object {
    private static int ScratchBufferSize;
    [NullableAttribute("1")]
private Byte[] _scratch;
    [NullableAttribute("2")]
private SnappyDecompressor _decompressor;
    private ReadOnlyMemory`1<byte> _input;
    private int _scratchLength;
    private ChunkType _chunkType;
    private int _chunkSize;
    private int _chunkBytesProcessed;
    private UInt32 _expectedChunkCrc;
    private UInt32 _chunkCrc;
    private Span`1<byte> Scratch { get; }
    private Span`1<byte> get_Scratch();
    public int Decompress(Span`1<byte> buffer);
    public void SetInput(ReadOnlyMemory`1<byte> input);
    private UInt32 ReadChunkHeader(ReadOnlySpan`1& buffer);
    private bool ReadChunkCrc(ReadOnlySpan`1& input);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Snappier.Internal.ThrowHelper : object {
    [DoesNotReturnAttribute]
public static void ThrowArgumentException(string message, string paramName);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeException(string paramName, string message);
    [DoesNotReturnAttribute]
private static void ThrowArgumentNullException(string paramName);
    public static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
public static void ThrowInvalidDataException(string message);
    [DoesNotReturnAttribute]
public static void ThrowInvalidOperationException(string message);
    [DoesNotReturnAttribute]
public static void ThrowNotSupportedException();
    [DoesNotReturnAttribute]
public static void ThrowObjectDisposedException(string objectName);
}
public static class Snappier.Snappy : object {
    public static int GetMaxCompressedLength(int inputLength);
    public static int Compress(ReadOnlySpan`1<byte> input, Span`1<byte> output);
    public static IMemoryOwner`1<byte> CompressToMemory(ReadOnlySpan`1<byte> input);
    public static Byte[] CompressToArray(ReadOnlySpan`1<byte> input);
    public static int GetUncompressedLength(ReadOnlySpan`1<byte> input);
    public static int Decompress(ReadOnlySpan`1<byte> input, Span`1<byte> output);
    public static IMemoryOwner`1<byte> DecompressToMemory(ReadOnlySpan`1<byte> input);
    public static Byte[] DecompressToArray(ReadOnlySpan`1<byte> input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Snappier.SnappyStream : Stream {
    private static int DefaultBufferSize;
    [NullableAttribute("2")]
private Stream _stream;
    private CompressionMode _mode;
    private bool _leaveOpen;
    [NullableAttribute("2")]
private SnappyStreamDecompressor _decompressor;
    [NullableAttribute("2")]
private SnappyStreamCompressor _compressor;
    [NullableAttribute("2")]
private Byte[] _buffer;
    private bool _wroteBytes;
    private int _activeAsyncOperation;
    public Stream BaseStream { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    private bool AsyncOperationIsActive { get; }
    public SnappyStream(Stream stream, CompressionMode mode);
    public SnappyStream(Stream stream, CompressionMode mode, bool leaveOpen);
    public Stream get_BaseStream();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
private int ReadCore(Span`1<byte> buffer);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
private ValueTask`1<int> ReadAsyncCore(Memory`1<byte> buffer, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Snappier.SnappyStream/<FinishReadAsyncMemory>d__31")]
private ValueTask`1<int> FinishReadAsyncMemory(ValueTask`1<int> readTask, Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
private void WriteCore(ReadOnlySpan`1<byte> buffer);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
private ValueTask WriteAsyncCore(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Snappier.SnappyStream/<WriteAsyncMemoryCore>d__36")]
private ValueTask WriteAsyncMemoryCore(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    private void PurgeBuffers();
    private ValueTask PurgeBuffersAsync();
    protected virtual void Dispose(bool disposing);
    [MemberNotNullAttribute("_stream")]
private void EnsureNotDisposed();
    private void EnsureDecompressionMode();
    private void EnsureCompressionMode();
    [MemberNotNullAttribute("_buffer")]
private void EnsureBufferInitialized();
    private bool get_AsyncOperationIsActive();
    private void EnsureNoActiveAsyncOperation();
    private void AsyncOperationStarting();
    private void AsyncOperationCompleting();
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
