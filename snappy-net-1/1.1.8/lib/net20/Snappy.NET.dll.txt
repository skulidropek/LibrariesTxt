internal class Snappy.Native32 : NativeProxy {
    public virtual SnappyStatus Compress(Byte* input, int inLength, Byte* output, Int32& outLength);
    public virtual SnappyStatus Uncompress(Byte* input, int inLength, Byte* output, Int32& outLength);
    public virtual int GetMaxCompressedLength(int inLength);
    public virtual SnappyStatus GetUncompressedLength(Byte* input, int inLength, Int32& outLength);
    public virtual SnappyStatus ValidateCompressedBuffer(Byte* input, int inLength);
    private static SnappyStatus snappy_compress(Byte* input, UInt32 input_length, Byte* output, UInt32& output_length);
    private static SnappyStatus snappy_uncompress(Byte* input, UInt32 input_length, Byte* output, UInt32& output_length);
    private static UInt32 snappy_max_compressed_length(UInt32 input_length);
    private static SnappyStatus snappy_uncompressed_length(Byte* input, UInt32 input_length, UInt32& output_length);
    private static SnappyStatus snappy_validate_compressed_buffer(Byte* input, UInt32 input_length);
}
internal class Snappy.Native64 : NativeProxy {
    public virtual SnappyStatus Compress(Byte* input, int inLength, Byte* output, Int32& outLength);
    public virtual SnappyStatus Uncompress(Byte* input, int inLength, Byte* output, Int32& outLength);
    public virtual int GetMaxCompressedLength(int inLength);
    public virtual SnappyStatus GetUncompressedLength(Byte* input, int inLength, Int32& outLength);
    public virtual SnappyStatus ValidateCompressedBuffer(Byte* input, int inLength);
    private static SnappyStatus snappy_compress(Byte* input, ulong input_length, Byte* output, UInt64& output_length);
    private static SnappyStatus snappy_uncompress(Byte* input, ulong input_length, Byte* output, UInt64& output_length);
    private static ulong snappy_max_compressed_length(ulong input_length);
    private static SnappyStatus snappy_uncompressed_length(Byte* input, ulong input_length, UInt64& output_length);
    private static SnappyStatus snappy_validate_compressed_buffer(Byte* input, ulong input_length);
}
internal abstract class Snappy.NativeProxy : object {
    public static NativeProxy Instance;
    protected NativeProxy(string name);
    private static NativeProxy();
    public abstract virtual SnappyStatus Compress(Byte* input, int inLength, Byte* output, Int32& outLength);
    public abstract virtual SnappyStatus Uncompress(Byte* input, int inLength, Byte* output, Int32& outLength);
    public abstract virtual int GetMaxCompressedLength(int inLength);
    public abstract virtual SnappyStatus GetUncompressedLength(Byte* input, int inLength, Int32& outLength);
    public abstract virtual SnappyStatus ValidateCompressedBuffer(Byte* input, int inLength);
    private static IntPtr LoadLibrary(string lpFileName);
}
public static class Snappy.SnappyCodec : object {
    public static int Compress(Byte[] input, int offset, int length, Byte[] output, int outOffset);
    public static Byte[] Compress(Byte[] input);
    public static int Uncompress(Byte[] input, int offset, int length, Byte[] output, int outOffset);
    public static Byte[] Uncompress(Byte[] input);
    public static int GetMaxCompressedLength(int inLength);
    public static int GetUncompressedLength(Byte[] input, int offset, int length);
    public static int GetUncompressedLength(Byte[] input);
    public static bool Validate(Byte[] input, int offset, int length);
    public static bool Validate(Byte[] input);
}
public class Snappy.SnappyFrame : object {
    public static int MaxFrameSize;
    public Byte[] StreamIdentifier;
    private static int MaxBufferUsage;
    private Byte[] WordBuffer;
    private Byte[] Buffer;
    private int BufferUsage;
    [CompilerGeneratedAttribute]
private SnappyFrameType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Checksum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DataLength>k__BackingField;
    public SnappyFrameType Type { get; private set; }
    public UInt32 Checksum { get; private set; }
    public int DataLength { get; private set; }
    public Byte[] Data { get; }
    private static SnappyFrame();
    [CompilerGeneratedAttribute]
public SnappyFrameType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(SnappyFrameType value);
    [CompilerGeneratedAttribute]
public UInt32 get_Checksum();
    [CompilerGeneratedAttribute]
private void set_Checksum(UInt32 value);
    [CompilerGeneratedAttribute]
public int get_DataLength();
    [CompilerGeneratedAttribute]
private void set_DataLength(int value);
    public Byte[] get_Data();
    public void SetStreamIdentifier();
    public void SetPadding(int size);
    public void SetCompressed(Byte[] data);
    public void SetCompressed(Byte[] data, int offset, int count);
    public void SetUncompressed(Byte[] data);
    public void SetUncompressed(Byte[] data, int offset, int count);
    public void GetData(Byte[] buffer);
    public void GetData(Byte[] buffer, int offset);
    public bool Read(Stream stream);
    public void Write(Stream stream);
    private void EnsureRead(Stream stream, Byte[] buffer, int offset, int count);
    private void SkipBytes(Stream stream, int count);
    private void WriteZeroes(Stream stream, int count);
    private static UInt32 ComputeMasked(Byte[] data, int offset, int count);
    private void CheckRange(Byte[] buffer, int offset, int count);
    private void CheckMaxFrameSize(int size);
    private void EnsureBuffer(int size);
}
public enum Snappy.SnappyFrameType : Enum {
    public byte value__;
    public static SnappyFrameType Compressed;
    public static SnappyFrameType Uncompressed;
    public static SnappyFrameType UnskippableFirst;
    public static SnappyFrameType UnskippableLast;
    public static SnappyFrameType SkippableFirst;
    public static SnappyFrameType SkippableLast;
    public static SnappyFrameType Padding;
    public static SnappyFrameType StreamIdentifier;
}
internal enum Snappy.SnappyStatus : Enum {
    public int value__;
    public static SnappyStatus Ok;
    public static SnappyStatus InvalidInput;
    public static SnappyStatus BufferTooSmall;
}
public class Snappy.SnappyStream : Stream {
    private Stream Stream;
    private CompressionMode Mode;
    private bool LeaveOpen;
    private SnappyFrame Frame;
    private Byte[] Buffer;
    private int BufferUsage;
    private int BufferRead;
    private bool InitializedStream;
    private bool BadStream;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public SnappyStream(Stream stream, CompressionMode mode);
    public SnappyStream(Stream stream, CompressionMode mode, bool leaveOpen);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    public virtual void Flush();
    public virtual void SetLength(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    private void InitializeStream();
    private bool EnsureAvailable();
    private void EnsureCompressionMode();
    private void EnsureDecompressionMode();
    private void CheckStream();
    private void ValidateRange(Byte[] buffer, int offset, int count);
    private void EnsureBuffer(int size);
}
internal class Snappy.Utils : object {
    public static bool BuffersEqual(Byte[] left, Byte[] right);
    public static bool BuffersEqual(Byte[] left, Byte[] right, int count);
}
