[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Snapshooter.Core.AcceptMatchOperator`1 : FieldMatchOperator {
    private string _fieldsPath;
    private bool _keepOriginalValue;
    private Dictionary`2<string, object> _fields;
    public AcceptMatchOperator`1(string fieldsPath, bool keepOriginalValue);
    public virtual bool HasFormatAction();
    public virtual void FormatFields(JToken snapshotData);
    public virtual FieldOption ExecuteMatch(JToken snapshotData, JToken expectedSnapshotData);
    private void FormatField(JToken field);
    private void VerifyFieldType(string path, object field);
    private string CreateAcceptExceptionMessage(string path, object field, string message);
    private string GetAcceptFieldValueString(object field);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Snapshooter.Core.AssertMatchOperator : FieldMatchOperator {
    private Action`1<FieldOption> _fieldOption;
    public AssertMatchOperator(Action`1<FieldOption> fieldOption);
    public virtual bool HasFormatAction();
    public virtual void FormatFields(JToken snapshotData);
    public virtual FieldOption ExecuteMatch(JToken snapshotData, JToken expectedSnapshotData);
}
public class Snapshooter.Core.ExcludeMatchOperator : FieldMatchOperator {
    private string _fieldsPath;
    public ExcludeMatchOperator(string fieldsPath);
    public virtual bool HasFormatAction();
    public virtual void FormatFields(JToken snapshotData);
    public virtual FieldOption ExecuteMatch(JToken snapshotData, JToken expectedSnapshotData);
    private static void FormatField(JToken field);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Snapshooter.Core.FieldMatchOperator : object {
    public abstract virtual bool HasFormatAction();
    public abstract virtual void FormatFields(JToken snapshotData);
    public abstract virtual FieldOption ExecuteMatch(JToken snapshotData, JToken expectedSnapshotData);
}
public class Snapshooter.Core.HashMatchOperator : FieldMatchOperator {
    private string _fieldsPath;
    public HashMatchOperator(string fieldsPath);
    public virtual bool HasFormatAction();
    public virtual void FormatFields(JToken snapshotData);
    public virtual FieldOption ExecuteMatch(JToken snapshotData, JToken expectedSnapshotData);
    private JToken FormatField(JToken field);
}
public interface Snapshooter.Core.IAssert {
    public abstract virtual void Assert(string expectedSnapshot, string actualSnapshot);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Snapshooter.Core.IgnoreMatchOperator`1 : FieldMatchOperator {
    private string _fieldPath;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<FieldOption, T> _fieldOption;
    public IgnoreMatchOperator`1(string fieldPath);
    [ObsoleteAttribute("Use the other constructor with the field path string.")]
public IgnoreMatchOperator`1(Func`2<FieldOption, T> fieldOption);
    public virtual bool HasFormatAction();
    public virtual void FormatFields(JToken snapshotData);
    public virtual FieldOption ExecuteMatch(JToken snapshotData, JToken expectedSnapshotData);
}
public class Snapshooter.Core.IncludeMatchOperator : FieldMatchOperator {
    private List`1<string> _fieldsPaths;
    public virtual bool HasFormatAction();
    public void AddFieldPath(string fieldPath);
    public virtual void FormatFields(JToken snapshotData);
    public virtual FieldOption ExecuteMatch(JToken snapshotData, JToken expectedSnapshotData);
    private static void FilterIncludedFieldsOnly(JToken snapshotField, List`1<JToken> includedFields);
    private static void RemoveField(JToken child);
}
[NullableContextAttribute("1")]
public interface Snapshooter.Core.ISnapshotComparer {
    public abstract virtual void CompareSnapshots(string expectedSnapshot, string actualSnapshot, MatchOptions matchOptions);
}
public interface Snapshooter.Core.ISnapshotEnvironmentCleaner {
    public abstract virtual void Cleanup(SnapshotFullName snapshotFullName);
}
[NullableContextAttribute("1")]
public interface Snapshooter.Core.ISnapshotFileHandler {
    public abstract virtual string SaveNewSnapshot(SnapshotFullName snapshotFullName, string snapshotData);
    public abstract virtual string SaveMismatchSnapshot(SnapshotFullName snapshotFullName, string snapshotData);
    public abstract virtual string ReadSnapshot(SnapshotFullName snapshotFullName);
    public abstract virtual bool TryReadSnapshot(SnapshotFullName snapshotFullName, String& snapshotData);
    public abstract virtual void DeleteSnapshot(SnapshotFullName snapshotFullName);
    public abstract virtual void DeleteSnapshotSubfolder(SnapshotFullName snapshotFullName, string subfolderName);
}
[NullableContextAttribute("1")]
public interface Snapshooter.Core.ISnapshotFormatter {
    public abstract virtual string FormatSnapshot(string snapshot, MatchOptions matchOptions);
}
public interface Snapshooter.Core.ISnapshotFullNameReader {
    public abstract virtual SnapshotFullName ReadSnapshotFullName();
}
public interface Snapshooter.Core.ISnapshotSerializer {
    public abstract virtual string SerializeObject(object objectToSnapshot);
    public abstract virtual string SerializeJsonToken(JToken jsonToken);
    public abstract virtual JToken Deserialize(string snapshotJson);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Snapshooter.Core.IsTypeMatchOperator`1 : FieldMatchOperator {
    private string _fieldsPath;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<FieldOption, T> _fieldOption;
    public IsTypeMatchOperator`1(string fieldsPath);
    [ObsoleteAttribute("Use the other constructor with the field path string.")]
public IsTypeMatchOperator`1(Func`2<FieldOption, T> fieldOption);
    public virtual bool HasFormatAction();
    public virtual void FormatFields(JToken snapshotData);
    public virtual FieldOption ExecuteMatch(JToken snapshotData, JToken expectedSnapshotData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Snapshooter.Core.JsonSnapshotComparer : object {
    private IAssert _snapshotAssert;
    private ISnapshotSerializer _snapshotSerializer;
    public JsonSnapshotComparer(IAssert snapshotAssert, ISnapshotSerializer snapshotSerializer);
    public sealed virtual void CompareSnapshots(string expectedSnapshot, string actualSnapshot, MatchOptions matchOptions);
    private static void ExecuteFieldMatchActions(JToken actualSnapshot, JToken expectedSnapshot, MatchOptions matchOptions);
    private static void RemoveFieldFromSnapshot(FieldOption fieldOption, JToken snapshot);
    private static void RemoveFields(IEnumerable`1<JToken> actualTokens);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Snapshooter.Core.JsonSnapshotFormatter : object {
    private ISnapshotSerializer _snapshotSerializer;
    public JsonSnapshotFormatter(ISnapshotSerializer snapshotSerializer);
    public sealed virtual string FormatSnapshot(string snapshot, MatchOptions matchOptions);
    private string FormatSnapshotFields(string actualSnapshotSerialized, MatchOptions matchOptions);
}
public class Snapshooter.Core.Serialization.GlobalSnapshotSettingsResolver : object {
    public sealed virtual IEnumerable`1<SnapshotSerializerSettings> GetConfiguration();
}
public interface Snapshooter.Core.Serialization.ISnapshotSettingsResolver {
    public abstract virtual IEnumerable`1<SnapshotSerializerSettings> GetConfiguration();
}
public class Snapshooter.Core.Serialization.MemoryStreamJsonConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Snapshooter.Core.Serialization.SnapshotSerializer : object {
    private static JsonLoadSettings JsonLoadSettings;
    private JsonSerializerSettings _jsonSerializerSettings;
    public SnapshotSerializer(ISnapshotSettingsResolver settingsResolver);
    private static SnapshotSerializer();
    public sealed virtual string SerializeObject(object objectToSnapshot);
    public sealed virtual string SerializeJsonToken(JToken jsonToken);
    public sealed virtual JToken Deserialize(string snapshotJson);
    private string SerializeToJson(object value);
    private static JsonSerializerSettings GetSettings(ISnapshotSettingsResolver snapshotSettingsResolver);
}
public abstract class Snapshooter.Core.Serialization.SnapshotSerializerSettings : object {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Active>k__BackingField;
    public int Order { get; }
    public bool Active { get; }
    public static JsonSerializerSettings DefaultJsonSerializerSettings { get; }
    [CompilerGeneratedAttribute]
public virtual int get_Order();
    [CompilerGeneratedAttribute]
public virtual bool get_Active();
    public static JsonSerializerSettings get_DefaultJsonSerializerSettings();
    public abstract virtual JsonSerializerSettings Extend(JsonSerializerSettings settings);
}
public class Snapshooter.Core.Serialization.StreamJsonConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Snapshooter.Core.SnapshotEnvironmentCleaner : object {
    private static object _lockObject;
    private static HashSet`1<string> _mismatchFolders;
    private ISnapshotFileHandler _snapshotFileHandler;
    public SnapshotEnvironmentCleaner(ISnapshotFileHandler snapshotFileHandler);
    private static SnapshotEnvironmentCleaner();
    public sealed virtual void Cleanup(SnapshotFullName snapshotFullName);
    private void CleanupMismatchFolder(SnapshotFullName snapshotFullName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Snapshooter.Core.SnapshotFileHandler : object {
    public sealed virtual string SaveNewSnapshot(SnapshotFullName snapshotFullName, string snapshotData);
    public sealed virtual string SaveMismatchSnapshot(SnapshotFullName snapshotFullName, string snapshotData);
    public sealed virtual string ReadSnapshot(SnapshotFullName snapshotFullName);
    public sealed virtual bool TryReadSnapshot(SnapshotFullName snapshotFullName, String& snapshotData);
    public sealed virtual void DeleteSnapshot(SnapshotFullName snapshotFullName);
    public sealed virtual void DeleteSnapshotSubfolder(SnapshotFullName snapshotFullName, string subfolderName);
    private string EnsureSnapshotFolder(SnapshotFullName snapshotFullName);
    private string EnsureSnapshotSubfolder(SnapshotFullName snapshotFullName, string subfolder);
    private static string GetSnapshotFolderPath(SnapshotFullName snapshotFullName);
    private static string GetSnapshotSubfolderPath(SnapshotFullName snapshotFullName, string subfolder);
    private static void CreateFolderIfNotExist(string folderPath);
    private static void DeleteFolderIfExist(string snapshotSubFolderPath);
}
internal static class Snapshooter.Core.Validators.EnvironmentValidator : object {
    public static void CheckStrictMode(bool originalSnapshotExists);
}
public class Snapshooter.Exceptions.SnapshotCompareException : SnapshotTestException {
    public SnapshotCompareException(string message);
    public SnapshotCompareException(string message, Exception inner);
}
public class Snapshooter.Exceptions.SnapshotFieldException : SnapshotTestException {
    public SnapshotFieldException(string message);
    public SnapshotFieldException(string message, Exception inner);
}
public class Snapshooter.Exceptions.SnapshotNotFoundException : SnapshotTestException {
    public SnapshotNotFoundException(string message);
    public SnapshotNotFoundException(string message, Exception inner);
}
public class Snapshooter.Exceptions.SnapshotTestException : Exception {
    public SnapshotTestException(string message);
    public SnapshotTestException(string message, Exception inner);
}
[ExtensionAttribute]
public static class Snapshooter.Extensions.HashExtensions : object {
    [ExtensionAttribute]
public static string ToSHA256(JToken jtoken);
    [ExtensionAttribute]
public static string ToSHA256(string value);
    [ExtensionAttribute]
public static string ToSHA256(Byte[] value);
}
[ExtensionAttribute]
public static class Snapshooter.Extensions.JTokenExtensions : object {
    [ExtensionAttribute]
public static string ConvertToValueString(JToken jtoken);
    [ExtensionAttribute]
public static T ConvertToType(JToken field);
}
[ExtensionAttribute]
public static class Snapshooter.Extensions.MethodBaseExtension : object {
    [ExtensionAttribute]
public static string ToName(MethodBase methodBase);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Snapshooter.Extensions.StringExtension : object {
    [ExtensionAttribute]
public static string EnsureLineEnding(string text);
    [ExtensionAttribute]
public static string NormalizeLineEndings(string text);
    [ExtensionAttribute]
public static bool IsValidJsonFormat(string input, JsonLoadSettings jsonLoadSettings);
    [ExtensionAttribute]
public static bool IsBase64String(string base64String);
    [ExtensionAttribute]
public static bool IsBase64(string base64String);
    [ExtensionAttribute]
public static bool TryFindFieldsByName(string fieldsPath, String& fieldName);
    [ExtensionAttribute]
public static string GetDirectoryName(string filenameFullPath);
    [ExtensionAttribute]
public static string RemoveFilename(string filenameFullPath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Snapshooter.Extensions.TypeExtensions : object {
    private static Dictionary`2<Type, string> _typeAlias;
    private static TypeExtensions();
    [ExtensionAttribute]
public static string GetAliasName(Type type);
    [IteratorStateMachineAttribute("Snapshooter.Extensions.TypeExtensions/<BaseTypesAndSelf>d__2")]
[ExtensionAttribute]
public static IEnumerable`1<Type> BaseTypesAndSelf(Type type);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
}
public class Snapshooter.FieldOption : object {
    private JToken _snapshotData;
    private List`1<string> _fieldPaths;
    public String[] FieldPaths { get; }
    public FieldOption(JToken snapshotData);
    public String[] get_FieldPaths();
    internal JToken[] FindFieldTokens(string fieldPath);
    public Object[] FindAllFields(string fieldPath);
    public T[] FindAllFields(string fieldPath);
    public T Field(string fieldPath);
    public T[] Fields(string fieldPath);
    public T[] GetAllFieldsByName(string name);
    private JToken[] GetTokensByName(string name);
    private JProperty[] GetPropertiesByName(string name);
    private JToken[] GetTokensByPath(string fieldPath);
}
public static class Snapshooter.FileNames : object {
    public static string SnapshotFileExtension;
    public static string SnapshotFolderName;
    public static string MismatchFolderName;
    private static FileNames();
}
public interface Snapshooter.ISnapshotAssert {
    public abstract virtual void AssertSnapshot(object currentResult, SnapshotFullName snapshotFullName, MatchOptions matchOptions);
}
public interface Snapshooter.ISnapshotFullNameResolver {
    public abstract virtual SnapshotFullName ResolveSnapshotFullName();
    public abstract virtual SnapshotFullName ResolveSnapshotFullName(string snapshotName);
    public abstract virtual SnapshotFullName ResolveSnapshotFullName(string snapshotName, string snapshotNameExtension);
}
public static class Snapshooter.LiveUnitTestingDirectoryResolver : object {
    public static SnapshotFullName TryResolveName(string testname);
    public static SnapshotFullName CheckForSession(SnapshotFullName snapshotFullName);
}
public class Snapshooter.MatchOptions : object {
    protected List`1<FieldMatchOperator> _matchOperators;
    public IReadOnlyCollection`1<FieldMatchOperator> MatchOperators { get; }
    public IReadOnlyCollection`1<FieldMatchOperator> get_MatchOperators();
    public MatchOptions AcceptField(string fieldPath);
    public MatchOptions AcceptField(string fieldPath, bool keepOriginalValue);
    public MatchOptions IgnoreField(string fieldPath);
    public MatchOptions IgnoreFields(string fieldsPath);
    public MatchOptions IgnoreField(string fieldPath);
    public MatchOptions IgnoreFields(string fieldsPath);
    public MatchOptions IgnoreAllFields(string name);
    public MatchOptions IgnoreAllFields(string name);
    [ObsoleteAttribute("Ignore method is deprecated, please use the IgnoreField method instead")]
public MatchOptions Ignore(Func`2<FieldOption, object> ignoreFieldOption);
    [ObsoleteAttribute("IsType<T> method is deprecated, please use the IsTypeField<T> method instead")]
public MatchOptions IsType(Func`2<FieldOption, T> isTypeField);
    [ObsoleteAttribute("IsType<T> method is deprecated, please use the IsTypeField<T> method instead")]
public MatchOptions IsType(Func`2<FieldOption, T[]> isTypeField);
    public MatchOptions IsTypeField(string fieldPath);
    public MatchOptions IsTypeFields(string fieldsPath);
    public MatchOptions Assert(Action`1<FieldOption> assertAction);
    public MatchOptions HashField(string fieldPath);
    public MatchOptions ExcludeField(string fieldPath);
    public MatchOptions IncludeField(string fieldPath);
    private MatchOptions AddIgnoreMatchOperator(string fieldsPath);
    private MatchOptions Accept(string fieldsPath, bool keepOriginalValue);
}
[ExtensionAttribute]
public static class Snapshooter.ObjectWrapperRemover : object {
    [ExtensionAttribute]
public static object RemoveUnwantedWrappers(object objectToRemoveWrappers);
    [ExtensionAttribute]
private static object RemoveFluentAssertionsWrapper(object objectToRemoveWrappers);
}
[AttributeUsageAttribute("1")]
public class Snapshooter.SerializeBinaryFieldsAsHashAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    public bool Value { get; private set; }
    public SerializeBinaryFieldsAsHashAttribute(bool value);
    [CompilerGeneratedAttribute]
public bool get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Snapshooter.Snapshooter : object {
    private ISnapshotAssert _snapshotAssert;
    private ISnapshotFullNameResolver _snapshotFullNameResolver;
    public Snapshooter(ISnapshotAssert snapshotAssert, ISnapshotFullNameResolver snapshotFullNameResolver);
    public void AssertSnapshot(object currentResult, SnapshotFullName snapshotFullName, Func`2<MatchOptions, MatchOptions> matchOptionsSettings);
    [NullableContextAttribute("2")]
public SnapshotFullName ResolveSnapshotFullName(string snapshotName, SnapshotNameExtension snapshotNameExtension);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Snapshooter.SnapshotAssert : object {
    private ISnapshotSerializer _snapshotSerializer;
    private ISnapshotFileHandler _snapshotFileHandler;
    private ISnapshotEnvironmentCleaner _snapshotEnvironmentCleaner;
    private ISnapshotComparer _snapshotComparer;
    private ISnapshotFormatter _snapshotFormatter;
    public SnapshotAssert(ISnapshotSerializer snapshotSerializer, ISnapshotFileHandler snapshotFileHandler, ISnapshotEnvironmentCleaner snapshotEnvironmentCleaner, ISnapshotComparer snapshotComparer, ISnapshotFormatter snapshotFormatter);
    public sealed virtual void AssertSnapshot(object currentResult, SnapshotFullName snapshotFullName, MatchOptions matchOptions);
    private void ExecuteSnapshotComparison(bool originalSnapshotExists, string actualSnapshotSerialized, string originalSnapshotSerialized, SnapshotFullName snapshotFullName, MatchOptions matchOptions);
}
public class Snapshooter.SnapshotFullName : object {
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FolderPath>k__BackingField;
    public string Filename { get; }
    public string FolderPath { get; }
    public SnapshotFullName(string fileName, string folderPath);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
public string get_FolderPath();
}
public class Snapshooter.SnapshotFullNameResolver : object {
    private ISnapshotFullNameReader _snapshotFullNameReader;
    public SnapshotFullNameResolver(ISnapshotFullNameReader snapshotFullNameReader);
    public sealed virtual SnapshotFullName ResolveSnapshotFullName();
    public sealed virtual SnapshotFullName ResolveSnapshotFullName(string snapshotName);
    public sealed virtual SnapshotFullName ResolveSnapshotFullName(string snapshotName, string snapshotNameExtension);
    private string EnsureSnapshotFileExtension(string snapshotName);
    private string AddSnapshotNameExtension(string snapshotName, string snapshotNameExtension);
}
public class Snapshooter.SnapshotNameExtension : object {
    private List`1<object> _snapshotNameExtensions;
    public SnapshotNameExtension(string snapshotNameExtension);
    public SnapshotNameExtension(String[] snapshotNameExtensions);
    public SnapshotNameExtension(Object[] snapshotNameExtensions);
    public static SnapshotNameExtension Create(string snapshotNameExtension);
    public static SnapshotNameExtension Create(String[] snapshotNameExtensions);
    public static SnapshotNameExtension Create(Object[] snapshotNameExtensions);
    public string ToParamsString();
    private static string ConvertParameter(object obj);
}
internal class Snapshooter.Wellknown : object {
    public static string FindByNamePrefix;
    public static string DateTimeISO8601Format;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
