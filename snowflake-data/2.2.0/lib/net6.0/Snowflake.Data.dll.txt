[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[DesignerCategoryAttribute("Code")]
public class Snowflake.Data.Client.SnowflakeDbCommand : DbCommand {
    private DbConnection connection;
    private SFStatement sfStatement;
    private SnowflakeDbParameterCollection parameterCollection;
    private SFLogger logger;
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private DbTransaction <DbTransaction>k__BackingField;
    public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public bool DesignTimeVisible { get; public set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    public SnowflakeDbCommand(SnowflakeDbConnection connection);
    public SnowflakeDbCommand(SnowflakeDbConnection connection, string cmdText);
    [CompilerGeneratedAttribute]
public virtual string get_CommandText();
    [CompilerGeneratedAttribute]
public virtual void set_CommandText(string value);
    [CompilerGeneratedAttribute]
public virtual int get_CommandTimeout();
    [CompilerGeneratedAttribute]
public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    [CompilerGeneratedAttribute]
protected virtual DbTransaction get_DbTransaction();
    [CompilerGeneratedAttribute]
protected virtual void set_DbTransaction(DbTransaction value);
    public virtual void Cancel();
    public virtual int ExecuteNonQuery();
    [AsyncStateMachineAttribute("Snowflake.Data.Client.SnowflakeDbCommand/<ExecuteNonQueryAsync>d__35")]
public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public virtual object ExecuteScalar();
    [AsyncStateMachineAttribute("Snowflake.Data.Client.SnowflakeDbCommand/<ExecuteScalarAsync>d__37")]
public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public virtual void Prepare();
    public string GetQueryId();
    protected virtual DbParameter CreateDbParameter();
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    [AsyncStateMachineAttribute("Snowflake.Data.Client.SnowflakeDbCommand/<ExecuteDbDataReaderAsync>d__42")]
protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    private static Dictionary`2<string, BindingDTO> convertToBindList(List`1<SnowflakeDbParameter> parameters);
    private void SetStatement();
    private SFBaseResultSet ExecuteInternal(bool describeOnly);
    private Task`1<SFBaseResultSet> ExecuteInternalAsync(CancellationToken cancellationToken, bool describeOnly);
}
public class Snowflake.Data.Client.SnowflakeDbCommandBuilder : DbCommandBuilder {
    public static string DEFAULT_QUOTE_PREFIX;
    public static string DEFAULT_QUOTE_SUFFIX;
    public string QuotePrefix { get; public set; }
    public string QuoteSuffix { get; public set; }
    public SnowflakeDbCommandBuilder(SnowflakeDbDataAdapter adapter);
    public sealed virtual string get_QuotePrefix();
    public sealed virtual void set_QuotePrefix(string value);
    public sealed virtual string get_QuoteSuffix();
    public sealed virtual void set_QuoteSuffix(string value);
    protected virtual void ApplyParameterInfo(DbParameter p, DataRow row, StatementType statementType, bool whereClause);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
}
[DesignerCategoryAttribute("Code")]
public class Snowflake.Data.Client.SnowflakeDbConnection : DbConnection {
    private SFLogger logger;
    [CompilerGeneratedAttribute]
private SFSession <SfSession>k__BackingField;
    internal ConnectionState _connectionState;
    internal int _connectionTimeout;
    private bool _disposed;
    private static Mutex _arraybindingMutex;
    private static bool _isArrayBindStageCreated;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private SecureString <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private SnowflakeDbTransaction <ExplicitTransaction>k__BackingField;
    internal SFSession SfSession { get; internal set; }
    protected DbProviderFactory DbProviderFactory { get; }
    public string ConnectionString { get; public set; }
    public SecureString Password { get; public set; }
    public string Database { get; }
    public int ConnectionTimeout { get; }
    public string DataSource { get; }
    public string ServerVersion { get; }
    public ConnectionState State { get; }
    internal SnowflakeDbTransaction ExplicitTransaction { get; internal set; }
    public SnowflakeDbConnection(string connectionString);
    private static SnowflakeDbConnection();
    [CompilerGeneratedAttribute]
internal SFSession get_SfSession();
    [CompilerGeneratedAttribute]
internal void set_SfSession(SFSession value);
    protected virtual DbProviderFactory get_DbProviderFactory();
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionString();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public SecureString get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(SecureString value);
    public bool IsOpen();
    private bool IsNonClosedWithSession();
    public virtual string get_Database();
    public virtual int get_ConnectionTimeout();
    public virtual string get_DataSource();
    public virtual string get_ServerVersion();
    public virtual ConnectionState get_State();
    [CompilerGeneratedAttribute]
internal SnowflakeDbTransaction get_ExplicitTransaction();
    [CompilerGeneratedAttribute]
internal void set_ExplicitTransaction(SnowflakeDbTransaction value);
    internal bool HasActiveExplicitTransaction();
    private TransactionRollbackStatus TerminateTransactionForDirtyConnectionReturningToPool();
    public virtual void ChangeDatabase(string databaseName);
    public virtual void Close();
    [AsyncStateMachineAttribute("Snowflake.Data.Client.SnowflakeDbConnection/<CloseAsync>d__43")]
public virtual Task CloseAsync();
    public virtual Task CloseAsync(CancellationToken cancellationToken);
    protected virtual bool CanReuseSession(TransactionRollbackStatus transactionRollbackStatus);
    public virtual void Open();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    public Mutex GetArrayBindingMutex();
    public bool IsArrayBindStageCreated();
    public void SetArrayBindStageCreated();
    private void OnSessionConnecting();
    private void OnSessionEstablished();
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    protected virtual DbCommand CreateDbCommand();
    protected virtual void Dispose(bool disposing);
    internal void registerConnectionCancellationCallback(CancellationToken externalCancellationToken);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
private void <OpenAsync>b__47_0(Task`1<SFSession> previousTask);
    [CompilerGeneratedAttribute]
private void <registerConnectionCancellationCallback>b__56_0();
}
public class Snowflake.Data.Client.SnowflakeDbConnectionPool : object {
    private static SFLogger s_logger;
    private static IConnectionManager s_connectionManager;
    private static SnowflakeDbConnectionPool();
    internal static SFSession GetSession(string connectionString, SecureString password);
    internal static Task`1<SFSession> GetSessionAsync(string connectionString, SecureString password, CancellationToken cancellationToken);
    internal static bool AddSession(SFSession session);
    public static void ClearAllPools();
    public static void SetMaxPoolSize(int maxPoolSize);
    public static int GetMaxPoolSize();
    public static void SetTimeout(long connectionTimeout);
    public static long GetTimeout();
    public static int GetCurrentPoolSize();
    public static bool SetPooling(bool isEnable);
    public static bool GetPooling();
}
public class Snowflake.Data.Client.SnowflakeDbConnectionStringBuilder : DbConnectionStringBuilder {
}
public class Snowflake.Data.Client.SnowflakeDbDataAdapter : DbDataAdapter {
    private static object EventRowUpdated;
    private static object EventRowUpdating;
    private SnowflakeDbCommand _selectCommand;
    [CompilerGeneratedAttribute]
private IDbCommand <System.Data.IDbDataAdapter.DeleteCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbCommand <System.Data.IDbDataAdapter.InsertCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbCommand <System.Data.IDbDataAdapter.UpdateCommand>k__BackingField;
    private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    public SnowflakeDbCommand SelectCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    public SnowflakeDbDataAdapter(SnowflakeDbCommand selectCommand);
    public SnowflakeDbDataAdapter(string selectCommandText, SnowflakeDbConnection selectConnection);
    private SnowflakeDbDataAdapter(SnowflakeDbDataAdapter from);
    private static SnowflakeDbDataAdapter();
    [CompilerGeneratedAttribute]
private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    [CompilerGeneratedAttribute]
private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    [CompilerGeneratedAttribute]
private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    [CompilerGeneratedAttribute]
private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    public SnowflakeDbCommand get_SelectCommand();
    public void set_SelectCommand(SnowflakeDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    [CompilerGeneratedAttribute]
private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    [CompilerGeneratedAttribute]
private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
}
[DefaultMemberAttribute("Item")]
public class Snowflake.Data.Client.SnowflakeDbDataReader : DbDataReader {
    private static SFLogger logger;
    private SnowflakeDbCommand dbCommand;
    private SFBaseResultSet resultSet;
    private bool isClosed;
    private DataTable SchemaTable;
    private int RecordsAffectedInternal;
    internal ResultFormat ResultFormat { get; }
    public object Item { get; }
    public object Item { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    internal SnowflakeDbDataReader(SnowflakeDbCommand command, SFBaseResultSet resultSet);
    private static SnowflakeDbDataReader();
    internal ResultFormat get_ResultFormat();
    public virtual object get_Item(string name);
    public virtual object get_Item(int ordinal);
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual DataTable GetSchemaTable();
    public string GetQueryId();
    private DataTable PopulateSchemaTable(SFBaseResultSet resultSet);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public TimeSpan GetTimeSpan(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual bool NextResult();
    [AsyncStateMachineAttribute("Snowflake.Data.Client.SnowflakeDbDataReader/<NextResultAsync>d__50")]
public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    public virtual bool Read();
    [AsyncStateMachineAttribute("Snowflake.Data.Client.SnowflakeDbDataReader/<ReadAsync>d__52")]
public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public virtual void Close();
}
public class Snowflake.Data.Client.SnowflakeDbException : DbException {
    internal static string CONNECTION_FAILURE_SSTATE;
    private static ResourceManager rm;
    [CompilerGeneratedAttribute]
private string <SqlState>k__BackingField;
    private int VendorCode;
    [CompilerGeneratedAttribute]
private string <QueryId>k__BackingField;
    public string SqlState { get; private set; }
    public string QueryId { get; }
    public int ErrorCode { get; }
    public SnowflakeDbException(string sqlState, int vendorCode, string errorMessage, string queryId);
    public SnowflakeDbException(SFError error, Object[] args);
    public SnowflakeDbException(string sqlState, SFError error, Object[] args);
    public SnowflakeDbException(Exception innerException, SFError error, Object[] args);
    public SnowflakeDbException(Exception innerException, string sqlState, SFError error, Object[] args);
    private static SnowflakeDbException();
    [CompilerGeneratedAttribute]
public string get_SqlState();
    [CompilerGeneratedAttribute]
private void set_SqlState(string value);
    [CompilerGeneratedAttribute]
public string get_QueryId();
    public virtual int get_ErrorCode();
    private static string FormatExceptionMessage(SFError error, Object[] args, string sqlState, string queryId);
    private static string FormatExceptionMessage(string errorMessage, int vendorCode, string sqlState, string queryId);
}
public class Snowflake.Data.Client.SnowflakeDbFactory : DbProviderFactory {
    public static SnowflakeDbFactory Instance;
    private static SnowflakeDbFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbConnection CreateConnection();
    public virtual DbParameter CreateParameter();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
}
public class Snowflake.Data.Client.SnowflakeDbParameter : DbParameter {
    [CompilerGeneratedAttribute]
private SFDataType <SFDataType>k__BackingField;
    private SFDataType OriginType;
    [CompilerGeneratedAttribute]
private DbType <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceColumnNullMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public SFDataType SFDataType { get; public set; }
    public DbType DbType { get; public set; }
    public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    public string ParameterName { get; public set; }
    public int Size { get; public set; }
    public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    public object Value { get; public set; }
    public SnowflakeDbParameter(string ParameterName, SFDataType SFDataType);
    public SnowflakeDbParameter(int ParameterIndex, SFDataType SFDataType);
    [CompilerGeneratedAttribute]
public SFDataType get_SFDataType();
    [CompilerGeneratedAttribute]
public void set_SFDataType(SFDataType value);
    [CompilerGeneratedAttribute]
public virtual DbType get_DbType();
    [CompilerGeneratedAttribute]
public virtual void set_DbType(DbType value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_ParameterName();
    [CompilerGeneratedAttribute]
public virtual void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public virtual int get_Size();
    [CompilerGeneratedAttribute]
public virtual void set_Size(int value);
    [CompilerGeneratedAttribute]
public virtual string get_SourceColumn();
    [CompilerGeneratedAttribute]
public virtual void set_SourceColumn(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_SourceColumnNullMapping();
    [CompilerGeneratedAttribute]
public virtual void set_SourceColumnNullMapping(bool value);
    [CompilerGeneratedAttribute]
public virtual object get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(object value);
    public virtual void ResetDbType();
}
public class Snowflake.Data.Client.SnowflakeDbParameterCollection : DbParameterCollection {
    internal List`1<SnowflakeDbParameter> parameterList;
    public int Count { get; }
    public object SyncRoot { get; }
    public virtual int get_Count();
    public virtual object get_SyncRoot();
    public virtual int Add(object value);
    public SnowflakeDbParameter Add(string parameterName, SFDataType dataType);
    public virtual void AddRange(Array values);
    public virtual void Clear();
    public virtual bool Contains(string value);
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    public virtual int IndexOf(string parameterName);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    public virtual void Remove(object value);
    public virtual void RemoveAt(string parameterName);
    public virtual void RemoveAt(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    protected virtual DbParameter GetParameter(int index);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    protected virtual void SetParameter(int index, DbParameter value);
    private SnowflakeDbParameter tryCast(object parameter);
    private SnowflakeDbParameter tryCastThrow(object parameter);
}
public class Snowflake.Data.Client.SnowflakeDbTransaction : DbTransaction {
    private SFLogger logger;
    private IsolationLevel isolationLevel;
    private SnowflakeDbConnection connection;
    private bool disposed;
    private bool isCommittedOrRollbacked;
    internal bool IsActive { get; }
    public IsolationLevel IsolationLevel { get; }
    protected DbConnection DbConnection { get; }
    public SnowflakeDbTransaction(IsolationLevel isolationLevel, SnowflakeDbConnection connection);
    internal bool get_IsActive();
    public virtual IsolationLevel get_IsolationLevel();
    protected virtual DbConnection get_DbConnection();
    public virtual void Commit();
    public virtual void Rollback();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class Snowflake.Data.Configuration.ClientConfig : object {
    [CompilerGeneratedAttribute]
private ClientConfigCommonProps <CommonProps>k__BackingField;
    [JsonPropertyAttribute]
public ClientConfigCommonProps CommonProps { get; public set; }
    [CompilerGeneratedAttribute]
public ClientConfigCommonProps get_CommonProps();
    [CompilerGeneratedAttribute]
public void set_CommonProps(ClientConfigCommonProps value);
}
internal class Snowflake.Data.Configuration.ClientConfigCommonProps : object {
    [CompilerGeneratedAttribute]
private string <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogPath>k__BackingField;
    [JsonPropertyAttribute]
public string LogLevel { get; public set; }
    [JsonPropertyAttribute]
public string LogPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LogLevel();
    [CompilerGeneratedAttribute]
public void set_LogLevel(string value);
    [CompilerGeneratedAttribute]
public string get_LogPath();
    [CompilerGeneratedAttribute]
public void set_LogPath(string value);
}
internal class Snowflake.Data.Configuration.EasyLoggingConfigFinder : object {
    private static SFLogger s_logger;
    internal static string ClientConfigFileName;
    internal static string ClientConfigEnvironmentName;
    private FileOperations _fileOperations;
    private EnvironmentOperations _environmentOperations;
    public static EasyLoggingConfigFinder Instance;
    internal EasyLoggingConfigFinder(FileOperations fileOperations, EnvironmentOperations environmentOperations);
    private static EasyLoggingConfigFinder();
    public virtual string FindConfigFilePath(string configFilePathFromConnectionString);
    private string GetFilePathEnvironmentVariable();
    private string GetFilePathFromTempDirectory();
    private string GetFilePathFromHomeDirectory();
    private string GetFilePathFromInputParameter(string filePath);
    private string GetHomeDirectory();
    private string GetFilePathFromDriverLocation();
    private string SearchForConfigInDirectory(Func`1<string> directoryProvider, string directoryDescription);
    private string OnlyIfFileExists(string filePath);
}
internal class Snowflake.Data.Configuration.EasyLoggingConfigParser : object {
    private static SFLogger s_logger;
    public static EasyLoggingConfigParser Instance;
    private static EasyLoggingConfigParser();
    public virtual ClientConfig Parse(string filePath);
    private string TryToReadFile(string filePath);
    private ClientConfig TryToParseFile(string fileContent);
    private void Validate(ClientConfig config);
}
internal class Snowflake.Data.Configuration.EasyLoggingConfigProvider : object {
    private EasyLoggingConfigFinder _finder;
    private EasyLoggingConfigParser _configParser;
    public static EasyLoggingConfigProvider Instance;
    internal EasyLoggingConfigProvider(EasyLoggingConfigFinder finder, EasyLoggingConfigParser configParser);
    private static EasyLoggingConfigProvider();
    public virtual ClientConfig ProvideConfig(string configFilePathFromConnectionString);
}
internal enum Snowflake.Data.Configuration.EasyLoggingLogLevel : Enum {
    public int value__;
    public static EasyLoggingLogLevel Off;
    public static EasyLoggingLogLevel Error;
    public static EasyLoggingLogLevel Warn;
    public static EasyLoggingLogLevel Info;
    public static EasyLoggingLogLevel Debug;
    public static EasyLoggingLogLevel Trace;
}
internal static class Snowflake.Data.Configuration.EasyLoggingLogLevelExtensions : object {
    public static EasyLoggingLogLevel From(string logLevel);
}
public class Snowflake.Data.Configuration.SFConfiguration : object {
    public bool UseV2JsonParser;
    public bool UseV2ChunkDownloader;
    public int ChunkDownloaderVersion;
    public int ChunkParserVersion;
    private static SFConfiguration Config;
    private static SFConfiguration();
    public static SFConfiguration Instance();
    public int GetChunkParserVersion();
    public int GetChunkDownloaderVersion();
}
public class Snowflake.Data.Configuration.SFConfigurationSectionHandler : object {
    private static SFConfigurationSectionHandler();
    private sealed virtual override object System.Configuration.IConfigurationSectionHandler.Create(object parent, object configContext, XmlNode section);
}
public class Snowflake.Data.Core.ArrowChunkParser : object {
    private Stream stream;
    internal ArrowChunkParser(Stream stream);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.ArrowChunkParser/<ParseChunk>d__2")]
public sealed virtual Task ParseChunk(IResultChunk chunk);
}
internal class Snowflake.Data.Core.ArrowResultChunk : BaseResultChunk {
    private static DateTimeOffset s_epochDate;
    private static Int64[] s_powersOf10;
    private static long TicksPerDay;
    [CompilerGeneratedAttribute]
private List`1<RecordBatch> <RecordBatch>k__BackingField;
    private SByte[][] _sbyte;
    private Int16[][] _short;
    private Int32[][] _int;
    private Int32[][] _fraction;
    private Int64[][] _long;
    private Byte[][] _byte;
    private Double[][] _double;
    private int _currentBatchIndex;
    private int _currentRecordIndex;
    internal ResultFormat ResultFormat { get; }
    public List`1<RecordBatch> RecordBatch { get; public set; }
    public ArrowResultChunk(RecordBatch recordBatch);
    public ArrowResultChunk(int columnCount);
    private static ArrowResultChunk();
    internal virtual ResultFormat get_ResultFormat();
    [CompilerGeneratedAttribute]
public List`1<RecordBatch> get_RecordBatch();
    [CompilerGeneratedAttribute]
public void set_RecordBatch(List`1<RecordBatch> value);
    private void ResetTempTables();
    public void AddRecordBatch(RecordBatch recordBatch);
    internal virtual void Reset(ExecResponseChunk chunkInfo, int chunkIndex);
    internal virtual bool Next();
    internal virtual bool Rewind();
    [ObsoleteAttribute("ExtractCell with rowIndex is deprecated", "False")]
public virtual UTF8Buffer ExtractCell(int rowIndex, int columnIndex);
    [ObsoleteAttribute("ExtractCell with columnIndex is deprecated", "False")]
public virtual UTF8Buffer ExtractCell(int columnIndex);
    public object ExtractCell(int columnIndex, SFDataType srcType, long scale);
    private long ExtractEpoch(long value, long scale);
    private long ExtractFraction(long value, long scale);
}
internal class Snowflake.Data.Core.ArrowResultSet : SFBaseResultSet {
    private static SFLogger s_logger;
    private int _totalChunkCount;
    private BaseResultChunk _currentChunk;
    private IChunkDownloader _chunkDownloader;
    internal ResultFormat ResultFormat { get; }
    public ArrowResultSet(QueryExecResponseData responseData, SFStatement sfStatement, CancellationToken cancellationToken);
    private static ArrowResultSet();
    internal virtual ResultFormat get_ResultFormat();
    private void ReadChunk(QueryExecResponseData responseData);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.ArrowResultSet/<NextAsync>d__8")]
internal virtual Task`1<bool> NextAsync();
    internal virtual bool Next();
    internal virtual bool NextResult();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.ArrowResultSet/<NextResultAsync>d__11")]
internal virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    internal virtual bool HasRows();
    internal virtual bool Rewind();
    private object GetObjectInternal(int ordinal);
    internal virtual object GetValue(int ordinal);
    internal virtual bool IsDBNull(int ordinal);
    internal virtual bool GetBoolean(int ordinal);
    internal virtual byte GetByte(int ordinal);
    internal virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    internal virtual char GetChar(int ordinal);
    internal virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    internal virtual DateTime GetDateTime(int ordinal);
    internal virtual TimeSpan GetTimeSpan(int ordinal);
    internal virtual decimal GetDecimal(int ordinal);
    internal virtual double GetDouble(int ordinal);
    internal virtual float GetFloat(int ordinal);
    internal virtual Guid GetGuid(int ordinal);
    internal virtual short GetInt16(int ordinal);
    internal virtual int GetInt32(int ordinal);
    internal virtual long GetInt64(int ordinal);
    internal virtual string GetString(int ordinal);
    private void UpdateSessionStatus(QueryExecResponseData responseData);
    private long ReadSubset(int ordinal, long dataOffset, T[] buffer, int bufferOffset, int length);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.ArrowResultSet/<<Next>b__9_0>d")]
[CompilerGeneratedAttribute]
private Task`1<BaseResultChunk> <Next>b__9_0();
}
internal class Snowflake.Data.Core.Authenticator.AuthenticatorFactory : object {
    private static SFLogger logger;
    private static AuthenticatorFactory();
    internal static IAuthenticator GetAuthenticator(SFSession session);
}
internal abstract class Snowflake.Data.Core.Authenticator.BaseAuthenticator : object {
    private static SFLogger logger;
    protected string authName;
    protected SFSession session;
    protected LoginRequestClientEnv ClientEnv;
    public BaseAuthenticator(SFSession session, string authName);
    private static BaseAuthenticator();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.Authenticator.BaseAuthenticator/<LoginAsync>d__5")]
protected Task LoginAsync(CancellationToken cancellationToken);
    protected void Login();
    protected abstract virtual void SetSpecializedAuthenticatorData(LoginRequestData& data);
    private SFRestRequest BuildLoginRequest();
}
internal class Snowflake.Data.Core.Authenticator.BasicAuthenticator : BaseAuthenticator {
    public static string AUTH_NAME;
    private static SFLogger logger;
    internal BasicAuthenticator(SFSession session);
    private static BasicAuthenticator();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.Authenticator.BasicAuthenticator/<Snowflake-Data-Core-Authenticator-IAuthenticator-AuthenticateAsync>d__3")]
private sealed virtual override Task Snowflake.Data.Core.Authenticator.IAuthenticator.AuthenticateAsync(CancellationToken cancellationToken);
    private sealed virtual override void Snowflake.Data.Core.Authenticator.IAuthenticator.Authenticate();
    protected virtual void SetSpecializedAuthenticatorData(LoginRequestData& data);
}
internal class Snowflake.Data.Core.Authenticator.ExternalBrowserAuthenticator : BaseAuthenticator {
    public static string AUTH_NAME;
    private static SFLogger logger;
    private static string TOKEN_REQUEST_PREFIX;
    private static Byte[] SUCCESS_RESPONSE;
    private string _samlResponseToken;
    private string _proofKey;
    private ManualResetEvent _successEvent;
    internal ExternalBrowserAuthenticator(SFSession session);
    private static ExternalBrowserAuthenticator();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.Authenticator.ExternalBrowserAuthenticator/<Snowflake-Data-Core-Authenticator-IAuthenticator-AuthenticateAsync>d__8")]
private sealed virtual override Task Snowflake.Data.Core.Authenticator.IAuthenticator.AuthenticateAsync(CancellationToken cancellationToken);
    private sealed virtual override void Snowflake.Data.Core.Authenticator.IAuthenticator.Authenticate();
    private void GetContextCallback(IAsyncResult result);
    private static int GetRandomUnusedPort();
    private static HttpListener GetHttpListener(int port);
    private static void StartBrowser(string url);
    private static string ValidateAndExtractToken(HttpListenerRequest request);
    private SFRestRequest BuildAuthenticatorRestRequest(int port);
    protected virtual void SetSpecializedAuthenticatorData(LoginRequestData& data);
}
internal interface Snowflake.Data.Core.Authenticator.IAuthenticator {
    public abstract virtual Task AuthenticateAsync(CancellationToken cancellationToken);
    public abstract virtual void Authenticate();
}
internal class Snowflake.Data.Core.Authenticator.IdpTokenRequest : object {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [JsonPropertyAttribute]
internal string Username { get; internal set; }
    [JsonPropertyAttribute]
internal string Password { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_Username();
    [CompilerGeneratedAttribute]
internal void set_Username(string value);
    [CompilerGeneratedAttribute]
internal string get_Password();
    [CompilerGeneratedAttribute]
internal void set_Password(string value);
}
internal class Snowflake.Data.Core.Authenticator.IdpTokenResponse : object {
    [CompilerGeneratedAttribute]
private string <CookieToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionToken>k__BackingField;
    [JsonPropertyAttribute]
internal string CookieToken { get; internal set; }
    [JsonPropertyAttribute]
internal string SessionToken { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_CookieToken();
    [CompilerGeneratedAttribute]
internal void set_CookieToken(string value);
    [CompilerGeneratedAttribute]
internal string get_SessionToken();
    [CompilerGeneratedAttribute]
internal void set_SessionToken(string value);
}
internal class Snowflake.Data.Core.Authenticator.IdpTokenRestRequest : BaseRestRequest {
    private static MediaTypeWithQualityHeaderValue jsonHeader;
    [CompilerGeneratedAttribute]
private IdpTokenRequest <JsonBody>k__BackingField;
    internal IdpTokenRequest JsonBody { get; internal set; }
    private static IdpTokenRestRequest();
    [CompilerGeneratedAttribute]
internal IdpTokenRequest get_JsonBody();
    [CompilerGeneratedAttribute]
internal void set_JsonBody(IdpTokenRequest value);
    private sealed virtual override HttpRequestMessage Snowflake.Data.Core.IRestRequest.ToRequestMessage(HttpMethod method);
}
internal class Snowflake.Data.Core.Authenticator.KeyPairAuthenticator : BaseAuthenticator {
    public static string AUTH_NAME;
    private static SFLogger logger;
    private RSACryptoServiceProvider rsaProvider;
    private string jwtToken;
    internal KeyPairAuthenticator(SFSession session);
    private static KeyPairAuthenticator();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.Authenticator.KeyPairAuthenticator/<AuthenticateAsync>d__5")]
public sealed virtual Task AuthenticateAsync(CancellationToken cancellationToken);
    public sealed virtual void Authenticate();
    protected virtual void SetSpecializedAuthenticatorData(LoginRequestData& data);
    private string GenerateJwtToken();
}
internal class Snowflake.Data.Core.Authenticator.OAuthAuthenticator : BaseAuthenticator {
    public static string AUTH_NAME;
    private static SFLogger logger;
    internal OAuthAuthenticator(SFSession session);
    private static OAuthAuthenticator();
    public sealed virtual void Authenticate();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.Authenticator.OAuthAuthenticator/<AuthenticateAsync>d__4")]
public sealed virtual Task AuthenticateAsync(CancellationToken cancellationToken);
    protected virtual void SetSpecializedAuthenticatorData(LoginRequestData& data);
}
internal class Snowflake.Data.Core.Authenticator.OktaAuthenticator : BaseAuthenticator {
    private static SFLogger logger;
    private Uri oktaUrl;
    private string samlRawHtmlString;
    internal OktaAuthenticator(SFSession session, string oktaUriString);
    private static OktaAuthenticator();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.Authenticator.OktaAuthenticator/<Snowflake-Data-Core-Authenticator-IAuthenticator-AuthenticateAsync>d__4")]
private sealed virtual override Task Snowflake.Data.Core.Authenticator.IAuthenticator.AuthenticateAsync(CancellationToken cancellationToken);
    private sealed virtual override void Snowflake.Data.Core.Authenticator.IAuthenticator.Authenticate();
    private SFRestRequest BuildAuthenticatorRestRequest();
    private IdpTokenRestRequest BuildIdpTokenRestRequest(Uri tokenUrl);
    private SAMLRestRequest BuildSAMLRestRequest(Uri ssoUrl, string onetimeToken);
    protected virtual void SetSpecializedAuthenticatorData(LoginRequestData& data);
    private void VerifyUrls(Uri tokenOrSsoUrl, Uri sessionUrl);
    private void VerifyPostbackUrl();
    private void FilterFailedResponse(BaseRestResponse response);
}
internal class Snowflake.Data.Core.Authenticator.SAMLRestRequest : BaseRestRequest {
    [CompilerGeneratedAttribute]
private string <OnetimeToken>k__BackingField;
    internal string OnetimeToken { get; internal set; }
    [CompilerGeneratedAttribute]
internal void set_OnetimeToken(string value);
    [CompilerGeneratedAttribute]
internal string get_OnetimeToken();
    private sealed virtual override HttpRequestMessage Snowflake.Data.Core.IRestRequest.ToRequestMessage(HttpMethod method);
}
internal enum Snowflake.Data.Core.Authenticator.SFAuthenticatorType : Enum {
    public int value__;
    public static SFAuthenticatorType SNOWFLAKE;
    public static SFAuthenticatorType OKTA;
}
internal class Snowflake.Data.Core.AuthenticatorRequest : object {
    [CompilerGeneratedAttribute]
private AuthenticatorRequestData <Data>k__BackingField;
    [JsonPropertyAttribute]
internal AuthenticatorRequestData Data { get; internal set; }
    [CompilerGeneratedAttribute]
internal AuthenticatorRequestData get_Data();
    [CompilerGeneratedAttribute]
internal void set_Data(AuthenticatorRequestData value);
    public virtual string ToString();
}
internal class Snowflake.Data.Core.AuthenticatorRequestData : object {
    [CompilerGeneratedAttribute]
private string <AccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Authenticator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrowserModeRedirectPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DriverName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DriverVersion>k__BackingField;
    [JsonPropertyAttribute]
internal string AccountName { get; internal set; }
    [JsonPropertyAttribute]
internal string Authenticator { get; internal set; }
    [JsonPropertyAttribute]
internal string BrowserModeRedirectPort { get; internal set; }
    [JsonPropertyAttribute]
internal string DriverName { get; internal set; }
    [JsonPropertyAttribute]
internal string DriverVersion { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_AccountName();
    [CompilerGeneratedAttribute]
internal void set_AccountName(string value);
    [CompilerGeneratedAttribute]
internal string get_Authenticator();
    [CompilerGeneratedAttribute]
internal void set_Authenticator(string value);
    [CompilerGeneratedAttribute]
internal string get_BrowserModeRedirectPort();
    [CompilerGeneratedAttribute]
internal void set_BrowserModeRedirectPort(string value);
    [CompilerGeneratedAttribute]
internal string get_DriverName();
    [CompilerGeneratedAttribute]
internal void set_DriverName(string value);
    [CompilerGeneratedAttribute]
internal string get_DriverVersion();
    [CompilerGeneratedAttribute]
internal void set_DriverVersion(string value);
    public virtual string ToString();
}
internal class Snowflake.Data.Core.AuthenticatorResponse : BaseRestResponse {
    [CompilerGeneratedAttribute]
private AuthenticatorResponseData <data>k__BackingField;
    [JsonPropertyAttribute]
internal AuthenticatorResponseData data { get; internal set; }
    [CompilerGeneratedAttribute]
internal AuthenticatorResponseData get_data();
    [CompilerGeneratedAttribute]
internal void set_data(AuthenticatorResponseData value);
}
internal class Snowflake.Data.Core.AuthenticatorResponseData : object {
    [CompilerGeneratedAttribute]
private string <tokenUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ssoUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <proofKey>k__BackingField;
    [JsonPropertyAttribute]
internal string tokenUrl { get; internal set; }
    [JsonPropertyAttribute]
internal string ssoUrl { get; internal set; }
    [JsonPropertyAttribute]
internal string proofKey { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_tokenUrl();
    [CompilerGeneratedAttribute]
internal void set_tokenUrl(string value);
    [CompilerGeneratedAttribute]
internal string get_ssoUrl();
    [CompilerGeneratedAttribute]
internal void set_ssoUrl(string value);
    [CompilerGeneratedAttribute]
internal string get_proofKey();
    [CompilerGeneratedAttribute]
internal void set_proofKey(string value);
}
internal class Snowflake.Data.Core.BaseQueryExecResponse`1 : BaseRestResponse {
    [CompilerGeneratedAttribute]
private T <data>k__BackingField;
    [JsonPropertyAttribute]
internal T data { get; internal set; }
    [CompilerGeneratedAttribute]
internal T get_data();
    [CompilerGeneratedAttribute]
internal void set_data(T value);
}
internal abstract class Snowflake.Data.Core.BaseRestRequest : object {
    internal static string HTTP_REQUEST_TIMEOUT_KEY;
    internal static string REST_REQUEST_TIMEOUT_KEY;
    public static int DEFAULT_REST_RETRY_SECONDS_TIMEOUT;
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RestTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <sid>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HttpTimeout>k__BackingField;
    internal Uri Url { get; internal set; }
    internal TimeSpan RestTimeout { get; internal set; }
    internal string sid { get; internal set; }
    internal TimeSpan HttpTimeout { get; internal set; }
    private static BaseRestRequest();
    [CompilerGeneratedAttribute]
internal Uri get_Url();
    [CompilerGeneratedAttribute]
internal void set_Url(Uri value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_RestTimeout();
    [CompilerGeneratedAttribute]
internal void set_RestTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
internal string get_sid();
    [CompilerGeneratedAttribute]
internal void set_sid(string value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_HttpTimeout();
    [CompilerGeneratedAttribute]
internal void set_HttpTimeout(TimeSpan value);
    private sealed virtual override HttpRequestMessage Snowflake.Data.Core.IRestRequest.ToRequestMessage(HttpMethod method);
    protected HttpRequestMessage newMessage(HttpMethod method, Uri url);
    private sealed virtual override TimeSpan Snowflake.Data.Core.IRestRequest.GetRestTimeout();
    private sealed virtual override string Snowflake.Data.Core.IRestRequest.getSid();
}
internal abstract class Snowflake.Data.Core.BaseRestResponse : object {
    [CompilerGeneratedAttribute]
private string <message>k__BackingField;
    [CompilerGeneratedAttribute]
private int <code>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <success>k__BackingField;
    [JsonPropertyAttribute]
internal string message { get; internal set; }
    [JsonPropertyAttribute]
internal int code { get; internal set; }
    [JsonPropertyAttribute]
internal bool success { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_message();
    [CompilerGeneratedAttribute]
internal void set_message(string value);
    [CompilerGeneratedAttribute]
internal int get_code();
    [CompilerGeneratedAttribute]
internal void set_code(int value);
    [CompilerGeneratedAttribute]
internal bool get_success();
    [CompilerGeneratedAttribute]
internal void set_success(bool value);
    internal void FilterFailedResponse();
}
public abstract class Snowflake.Data.Core.BaseResultChunk : object {
    [CompilerGeneratedAttribute]
private int <RowCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChunkIndex>k__BackingField;
    internal int CompressedSize;
    internal int UncompressedSize;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private String[0...,0...] <RowSet>k__BackingField;
    internal ResultFormat ResultFormat { get; }
    public int RowCount { get; protected set; }
    public int ColumnCount { get; protected set; }
    public int ChunkIndex { get; protected set; }
    internal string Url { get; internal set; }
    internal String[0...,0...] RowSet { get; internal set; }
    internal abstract virtual ResultFormat get_ResultFormat();
    [CompilerGeneratedAttribute]
public int get_RowCount();
    [CompilerGeneratedAttribute]
protected void set_RowCount(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnCount();
    [CompilerGeneratedAttribute]
protected void set_ColumnCount(int value);
    [CompilerGeneratedAttribute]
public int get_ChunkIndex();
    [CompilerGeneratedAttribute]
protected void set_ChunkIndex(int value);
    [CompilerGeneratedAttribute]
internal string get_Url();
    [CompilerGeneratedAttribute]
internal void set_Url(string value);
    [CompilerGeneratedAttribute]
internal String[0...,0...] get_RowSet();
    [CompilerGeneratedAttribute]
internal void set_RowSet(String[0...,0...] value);
    public sealed virtual int GetRowCount();
    public sealed virtual int GetChunkIndex();
    [ObsoleteAttribute("ExtractCell with rowIndex is deprecated", "False")]
public abstract virtual UTF8Buffer ExtractCell(int rowIndex, int columnIndex);
    public abstract virtual UTF8Buffer ExtractCell(int columnIndex);
    internal abstract virtual bool Next();
    internal abstract virtual bool Rewind();
    internal virtual void Reset(ExecResponseChunk chunkInfo, int chunkIndex);
    internal virtual void ResetForRetry();
}
public class Snowflake.Data.Core.BindingDTO : object {
    [CompilerGeneratedAttribute]
private string <type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <value>k__BackingField;
    public string type { get; public set; }
    public object value { get; public set; }
    public BindingDTO(string type, object value);
    [CompilerGeneratedAttribute]
public string get_type();
    [CompilerGeneratedAttribute]
public void set_type(string value);
    [CompilerGeneratedAttribute]
public object get_value();
    [CompilerGeneratedAttribute]
public void set_value(object value);
}
internal class Snowflake.Data.Core.ChunkDeserializer : object {
    private static JsonSerializer JsonSerializer;
    private Stream stream;
    internal ChunkDeserializer(Stream stream);
    private static ChunkDeserializer();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.ChunkDeserializer/<ParseChunk>d__3")]
public sealed virtual Task ParseChunk(IResultChunk chunk);
}
internal class Snowflake.Data.Core.ChunkDownloaderFactory : object {
    public static IChunkDownloader GetDownloader(QueryExecResponseData responseData, SFBaseResultSet resultSet, CancellationToken cancellationToken);
}
internal class Snowflake.Data.Core.ChunkParserFactory : object {
    public static IChunkParserFactory Instance;
    private static ChunkParserFactory();
    public sealed virtual IChunkParser GetParser(ResultFormat resultFormat, Stream stream);
}
internal class Snowflake.Data.Core.ChunkStreamingParser : object {
    private Stream stream;
    internal ChunkStreamingParser(Stream stream);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.ChunkStreamingParser/<ParseChunk>d__2")]
public sealed virtual Task ParseChunk(IResultChunk chunk);
}
internal class Snowflake.Data.Core.CloseResponse : BaseRestResponse {
    [CompilerGeneratedAttribute]
private object <data>k__BackingField;
    [JsonPropertyAttribute]
internal object data { get; internal set; }
    [CompilerGeneratedAttribute]
internal object get_data();
    [CompilerGeneratedAttribute]
internal void set_data(object value);
}
internal enum Snowflake.Data.Core.CommandTypes : Enum {
    public int value__;
    public static CommandTypes UPLOAD;
    public static CommandTypes DOWNLOAD;
}
internal class Snowflake.Data.Core.ConcatenatedStream : Stream {
    private Queue`1<Stream> streams;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ConcatenatedStream(IEnumerable`1<Stream> streams);
    public virtual bool get_CanRead();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class Snowflake.Data.Core.DownloadContext : object {
    [CompilerGeneratedAttribute]
private BaseResultChunk <chunk>k__BackingField;
    [CompilerGeneratedAttribute]
private int <chunkIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <qrmk>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <chunkHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <cancellationToken>k__BackingField;
    public BaseResultChunk chunk { get; public set; }
    public int chunkIndex { get; public set; }
    public string qrmk { get; public set; }
    public Dictionary`2<string, string> chunkHeaders { get; public set; }
    public CancellationToken cancellationToken { get; public set; }
    [CompilerGeneratedAttribute]
public BaseResultChunk get_chunk();
    [CompilerGeneratedAttribute]
public void set_chunk(BaseResultChunk value);
    [CompilerGeneratedAttribute]
public int get_chunkIndex();
    [CompilerGeneratedAttribute]
public void set_chunkIndex(int value);
    [CompilerGeneratedAttribute]
public string get_qrmk();
    [CompilerGeneratedAttribute]
public void set_qrmk(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_chunkHeaders();
    [CompilerGeneratedAttribute]
public void set_chunkHeaders(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public CancellationToken get_cancellationToken();
    [CompilerGeneratedAttribute]
public void set_cancellationToken(CancellationToken value);
}
internal class Snowflake.Data.Core.DownloadContextV2 : object {
    [CompilerGeneratedAttribute]
private BaseResultChunk <chunk>k__BackingField;
    [CompilerGeneratedAttribute]
private int <chunkIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <qrmk>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <chunkHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <cancellationToken>k__BackingField;
    public BaseResultChunk chunk { get; public set; }
    public int chunkIndex { get; public set; }
    public string qrmk { get; public set; }
    public Dictionary`2<string, string> chunkHeaders { get; public set; }
    public CancellationToken cancellationToken { get; public set; }
    [CompilerGeneratedAttribute]
public BaseResultChunk get_chunk();
    [CompilerGeneratedAttribute]
public void set_chunk(BaseResultChunk value);
    [CompilerGeneratedAttribute]
public int get_chunkIndex();
    [CompilerGeneratedAttribute]
public void set_chunkIndex(int value);
    [CompilerGeneratedAttribute]
public string get_qrmk();
    [CompilerGeneratedAttribute]
public void set_qrmk(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_chunkHeaders();
    [CompilerGeneratedAttribute]
public void set_chunkHeaders(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public CancellationToken get_cancellationToken();
    [CompilerGeneratedAttribute]
public void set_cancellationToken(CancellationToken value);
}
internal class Snowflake.Data.Core.DownloadContextV3 : object {
    [CompilerGeneratedAttribute]
private BaseResultChunk <chunk>k__BackingField;
    [CompilerGeneratedAttribute]
private string <qrmk>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <chunkHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <cancellationToken>k__BackingField;
    public BaseResultChunk chunk { get; public set; }
    public string qrmk { get; public set; }
    public Dictionary`2<string, string> chunkHeaders { get; public set; }
    public CancellationToken cancellationToken { get; public set; }
    [CompilerGeneratedAttribute]
public BaseResultChunk get_chunk();
    [CompilerGeneratedAttribute]
public void set_chunk(BaseResultChunk value);
    [CompilerGeneratedAttribute]
public string get_qrmk();
    [CompilerGeneratedAttribute]
public void set_qrmk(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_chunkHeaders();
    [CompilerGeneratedAttribute]
public void set_chunkHeaders(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public CancellationToken get_cancellationToken();
    [CompilerGeneratedAttribute]
public void set_cancellationToken(CancellationToken value);
}
internal class Snowflake.Data.Core.EasyLoggingInitTrialParameters : object {
    private string _configFilePathFromConnectionString;
    public EasyLoggingInitTrialParameters(string configFilePathFromConnectionString);
    public bool IsConfigFilePathGiven();
    public bool HasDifferentConfigPath(string configFilePath);
}
internal class Snowflake.Data.Core.EasyLoggingStarter : object {
    private static SFLogger s_logger;
    private EasyLoggingConfigProvider _easyLoggingConfigProvider;
    private EasyLoggerManager _easyLoggerManager;
    private DirectoryOperations _directoryOperations;
    private object _lockForExclusiveInit;
    private EasyLoggingInitTrialParameters _initTrialParameters;
    public static EasyLoggingStarter Instance;
    internal EasyLoggingStarter(EasyLoggingConfigProvider easyLoggingConfigProvider, EasyLoggerManager easyLoggerManager, DirectoryOperations directoryOperations);
    private static EasyLoggingStarter();
    public virtual void Init(string configFilePathFromConnectionString);
    private bool AllowedToInitialize(string configFilePathFromConnectionString);
    private EasyLoggingLogLevel GetLogLevel(string logLevel);
    private string GetLogPath(string logPath);
}
internal class Snowflake.Data.Core.ElementComparer : object {
    public sealed virtual int Compare(QueryContextElement x, QueryContextElement y);
}
[ExtensionAttribute]
public static class Snowflake.Data.Core.EnumExtensions : object {
    [ExtensionAttribute]
public static TAttribute GetAttribute(Enum value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Snowflake.Data.Core.ErrorMessages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string COLUMN_INDEX_OUT_OF_BOUND { get; }
    internal static string DATA_READER_ALREADY_CLOSED { get; }
    internal static string INTERNAL_ERROR { get; }
    internal static string INVALID_CONNECTION_STRING { get; }
    internal static string INVALID_CONNECTION_PARAMETER_VALUE { get; }
    internal static string INVALID_DATA_CONVERSION { get; }
    internal static string MISSING_CONNECTION_PROPERTY { get; }
    internal static string QUERY_CANCELLED { get; }
    internal static string REQUEST_TIMEOUT { get; }
    internal static string STATEMENT_ALREADY_RUNNING_QUERY { get; }
    internal static string UNSUPPORTED_FEATURE { get; }
    internal static string JWT_ERROR_READING_PK { get; }
    internal static string UNSUPPORTED_DOTNET_TYPE { get; }
    internal static string UNSUPPORTED_SNOWFLAKE_TYPE_FOR_PARAM { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_COLUMN_INDEX_OUT_OF_BOUND();
    internal static string get_DATA_READER_ALREADY_CLOSED();
    internal static string get_INTERNAL_ERROR();
    internal static string get_INVALID_CONNECTION_STRING();
    internal static string get_INVALID_CONNECTION_PARAMETER_VALUE();
    internal static string get_INVALID_DATA_CONVERSION();
    internal static string get_MISSING_CONNECTION_PROPERTY();
    internal static string get_QUERY_CANCELLED();
    internal static string get_REQUEST_TIMEOUT();
    internal static string get_STATEMENT_ALREADY_RUNNING_QUERY();
    internal static string get_UNSUPPORTED_FEATURE();
    internal static string get_JWT_ERROR_READING_PK();
    internal static string get_UNSUPPORTED_DOTNET_TYPE();
    internal static string get_UNSUPPORTED_SNOWFLAKE_TYPE_FOR_PARAM();
}
internal class Snowflake.Data.Core.ExecResponseChunk : object {
    [CompilerGeneratedAttribute]
private string <url>k__BackingField;
    [CompilerGeneratedAttribute]
private int <rowCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <uncompressedSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <compressedSize>k__BackingField;
    [JsonPropertyAttribute]
internal string url { get; internal set; }
    [JsonPropertyAttribute]
internal int rowCount { get; internal set; }
    [JsonPropertyAttribute]
internal int uncompressedSize { get; internal set; }
    [JsonPropertyAttribute]
internal int compressedSize { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_url();
    [CompilerGeneratedAttribute]
internal void set_url(string value);
    [CompilerGeneratedAttribute]
internal int get_rowCount();
    [CompilerGeneratedAttribute]
internal void set_rowCount(int value);
    [CompilerGeneratedAttribute]
internal int get_uncompressedSize();
    [CompilerGeneratedAttribute]
internal void set_uncompressedSize(int value);
    [CompilerGeneratedAttribute]
internal int get_compressedSize();
    [CompilerGeneratedAttribute]
internal void set_compressedSize(int value);
}
internal class Snowflake.Data.Core.ExecResponseRowType : object {
    [CompilerGeneratedAttribute]
private string <name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <byteLength>k__BackingField;
    [CompilerGeneratedAttribute]
private long <length>k__BackingField;
    [CompilerGeneratedAttribute]
private string <type>k__BackingField;
    [CompilerGeneratedAttribute]
private long <scale>k__BackingField;
    [CompilerGeneratedAttribute]
private long <precision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <nullable>k__BackingField;
    [JsonPropertyAttribute]
internal string name { get; internal set; }
    [JsonPropertyAttribute]
internal long byteLength { get; internal set; }
    [JsonPropertyAttribute]
internal long length { get; internal set; }
    [JsonPropertyAttribute]
internal string type { get; internal set; }
    [JsonPropertyAttribute]
internal long scale { get; internal set; }
    [JsonPropertyAttribute]
internal long precision { get; internal set; }
    [JsonPropertyAttribute]
internal bool nullable { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_name();
    [CompilerGeneratedAttribute]
internal void set_name(string value);
    [CompilerGeneratedAttribute]
internal long get_byteLength();
    [CompilerGeneratedAttribute]
internal void set_byteLength(long value);
    [CompilerGeneratedAttribute]
internal long get_length();
    [CompilerGeneratedAttribute]
internal void set_length(long value);
    [CompilerGeneratedAttribute]
internal string get_type();
    [CompilerGeneratedAttribute]
internal void set_type(string value);
    [CompilerGeneratedAttribute]
internal long get_scale();
    [CompilerGeneratedAttribute]
internal void set_scale(long value);
    [CompilerGeneratedAttribute]
internal long get_precision();
    [CompilerGeneratedAttribute]
internal void set_precision(long value);
    [CompilerGeneratedAttribute]
internal bool get_nullable();
    [CompilerGeneratedAttribute]
internal void set_nullable(bool value);
}
public class Snowflake.Data.Core.FastMemoryStream : object {
    public static int DEFAULT_BUFFER_SIZE;
    private Byte[] _buffer;
    private int _size;
    public int Length { get; }
    public void WriteByte(byte b);
    public void Clear();
    public Byte[] GetBuffer();
    public int get_Length();
    private void GrowBuffer();
}
public class Snowflake.Data.Core.FastParser : object {
    private static SFLogger Logger;
    private static FastParser();
    public static long FastParseInt64(Byte[] s, int offset, int len);
    public static int FastParseInt32(Byte[] s, int offset, int len);
    public static decimal FastParseDecimal(Byte[] s, int offset, int len);
}
public class Snowflake.Data.Core.FastStreamWrapper : object {
    private Stream wrappedStream;
    private Byte[] buffer;
    private int count;
    private int next;
    public FastStreamWrapper(Stream s);
    public int ReadByte();
    private int ReadByteSlow();
}
internal class Snowflake.Data.Core.FileTransfer.EncryptionAgentInfo : object {
    public string Protocol;
    public string EncryptionAlgorithm;
}
internal class Snowflake.Data.Core.FileTransfer.EncryptionData : object {
    public string EncryptionMode;
    public WrappedContentInfo WrappedContentKey;
    public EncryptionAgentInfo EncryptionAgent;
    public string ContentEncryptionIV;
    public KeyWrappingMetadataInfo KeyWrappingMetadata;
}
internal class Snowflake.Data.Core.FileTransfer.EncryptionProvider : object {
    private static int AES_BLOCK_SIZE;
    private static int blockSize;
    private static SFLogger Logger;
    private static EncryptionProvider();
    public static Stream EncryptFile(string inFile, PutGetEncryptionMaterial encryptionMaterial, SFEncryptionMetadata encryptionMetadata, FileTransferConfiguration transferConfiguration);
    public static Stream EncryptStream(Stream inputStream, PutGetEncryptionMaterial encryptionMaterial, SFEncryptionMetadata encryptionMetadata, FileTransferConfiguration transferConfiguration);
    private static Byte[] encryptFileKey(Byte[] masterKey, Byte[] unencryptedFileKey);
    private static Stream CreateEncryptedBytesStream(Stream inputStream, Byte[] key, Byte[] iv, FileTransferConfiguration transferConfiguration);
    public static string DecryptFile(string inFile, PutGetEncryptionMaterial encryptionMaterial, SFEncryptionMetadata encryptionMetadata, FileTransferConfiguration transferConfiguration);
    private static Byte[] decryptFileKey(Byte[] masterKey, Byte[] unencryptedFileKey);
    private static Stream CreateDecryptedBytesStream(string inFile, Byte[] key, Byte[] iv, FileTransferConfiguration transferConfiguration);
}
internal class Snowflake.Data.Core.FileTransfer.FileBackedOutputStream : Stream {
    private int _maxInMemoryBytes;
    private string _tempDirForFiles;
    private MemoryStream _memoryOutputStream;
    private string _fileName;
    private FileStream _fileOutputStream;
    private Stream _outputStream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public FileBackedOutputStream(int maxInMemoryBytes, string tempDirForFiles);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    internal string GetFileName();
    private void SwitchToFileIfTooMuchInMemory(int numberOfBytesToConsume);
    internal bool IsUsingFileOutputStream();
    private void SwitchFromMemoryToTempFile();
    private string GenerateTempFilePath();
}
internal class Snowflake.Data.Core.FileTransfer.FileHeader : object {
    [CompilerGeneratedAttribute]
private string <digest>k__BackingField;
    [CompilerGeneratedAttribute]
private long <contentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private SFEncryptionMetadata <encryptionMetadata>k__BackingField;
    public string digest { get; public set; }
    public long contentLength { get; public set; }
    public SFEncryptionMetadata encryptionMetadata { get; public set; }
    [CompilerGeneratedAttribute]
public string get_digest();
    [CompilerGeneratedAttribute]
public void set_digest(string value);
    [CompilerGeneratedAttribute]
public long get_contentLength();
    [CompilerGeneratedAttribute]
public void set_contentLength(long value);
    [CompilerGeneratedAttribute]
public SFEncryptionMetadata get_encryptionMetadata();
    [CompilerGeneratedAttribute]
public void set_encryptionMetadata(SFEncryptionMetadata value);
}
internal class Snowflake.Data.Core.FileTransfer.FileTransferConfiguration : object {
    private static int OneMegabyteInBytes;
    [CompilerGeneratedAttribute]
private string <TempDir>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxBytesInMemory>k__BackingField;
    public string TempDir { get; public set; }
    public int MaxBytesInMemory { get; public set; }
    public static int DefaultMaxBytesInMemory { get; }
    private static string DefaultTempDir { get; }
    [CompilerGeneratedAttribute]
public string get_TempDir();
    [CompilerGeneratedAttribute]
public void set_TempDir(string value);
    [CompilerGeneratedAttribute]
public int get_MaxBytesInMemory();
    [CompilerGeneratedAttribute]
public void set_MaxBytesInMemory(int value);
    public static FileTransferConfiguration FromFileMetadata(SFFileMetadata fileMetadata);
    public static int get_DefaultMaxBytesInMemory();
    private static string get_DefaultTempDir();
}
internal interface Snowflake.Data.Core.FileTransfer.ISFRemoteStorageClient {
    public abstract virtual RemoteLocation ExtractBucketNameAndPath(string stageLocation);
    public abstract virtual FileHeader GetFileHeader(SFFileMetadata fileMetadata);
    public abstract virtual Task`1<FileHeader> GetFileHeaderAsync(SFFileMetadata fileMetadata, CancellationToken cancellationToken);
    public abstract virtual void UploadFile(SFFileMetadata fileMetadata, Stream fileBytesStream, SFEncryptionMetadata encryptionMetadata);
    public abstract virtual Task UploadFileAsync(SFFileMetadata fileMetadata, Stream fileBytesStream, SFEncryptionMetadata encryptionMetadata, CancellationToken cancellationToken);
    public abstract virtual void DownloadFile(SFFileMetadata fileMetadata, string fullDstPath, int maxConcurrency);
    public abstract virtual Task DownloadFileAsync(SFFileMetadata fileMetadata, string fullDstPath, int maxConcurrency, CancellationToken cancellationToken);
}
internal class Snowflake.Data.Core.FileTransfer.KeyWrappingMetadataInfo : object {
    public string EncryptionLibrary;
}
internal class Snowflake.Data.Core.FileTransfer.MaterialDescriptor : object {
    [CompilerGeneratedAttribute]
private string <smkId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <queryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <keySize>k__BackingField;
    public string smkId { get; public set; }
    public string queryId { get; public set; }
    public string keySize { get; public set; }
    [CompilerGeneratedAttribute]
public string get_smkId();
    [CompilerGeneratedAttribute]
public void set_smkId(string value);
    [CompilerGeneratedAttribute]
public string get_queryId();
    [CompilerGeneratedAttribute]
public void set_queryId(string value);
    [CompilerGeneratedAttribute]
public string get_keySize();
    [CompilerGeneratedAttribute]
public void set_keySize(string value);
}
internal class Snowflake.Data.Core.FileTransfer.ProxyCredentials : object {
    [CompilerGeneratedAttribute]
private string <ProxyHost>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProxyPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProxyUser>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProxyPassword>k__BackingField;
    public string ProxyHost { get; public set; }
    public int ProxyPort { get; public set; }
    public string ProxyUser { get; public set; }
    public string ProxyPassword { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProxyHost();
    [CompilerGeneratedAttribute]
public void set_ProxyHost(string value);
    [CompilerGeneratedAttribute]
public int get_ProxyPort();
    [CompilerGeneratedAttribute]
public void set_ProxyPort(int value);
    [CompilerGeneratedAttribute]
public string get_ProxyUser();
    [CompilerGeneratedAttribute]
public void set_ProxyUser(string value);
    [CompilerGeneratedAttribute]
public string get_ProxyPassword();
    [CompilerGeneratedAttribute]
public void set_ProxyPassword(string value);
}
internal class Snowflake.Data.Core.FileTransfer.RemoteLocation : object {
    [CompilerGeneratedAttribute]
private string <bucket>k__BackingField;
    [CompilerGeneratedAttribute]
private string <key>k__BackingField;
    public string bucket { get; public set; }
    public string key { get; public set; }
    [CompilerGeneratedAttribute]
public string get_bucket();
    [CompilerGeneratedAttribute]
public void set_bucket(string value);
    [CompilerGeneratedAttribute]
public string get_key();
    [CompilerGeneratedAttribute]
public void set_key(string value);
}
public class Snowflake.Data.Core.FileTransfer.SFEncryptionMetadata : object {
    [CompilerGeneratedAttribute]
private string <iv>k__BackingField;
    [CompilerGeneratedAttribute]
private string <key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <matDesc>k__BackingField;
    public string iv { get; public set; }
    public string key { get; public set; }
    public string matDesc { get; public set; }
    [CompilerGeneratedAttribute]
public void set_iv(string value);
    [CompilerGeneratedAttribute]
public string get_iv();
    [CompilerGeneratedAttribute]
public void set_key(string value);
    [CompilerGeneratedAttribute]
public string get_key();
    [CompilerGeneratedAttribute]
public void set_matDesc(string value);
    [CompilerGeneratedAttribute]
public string get_matDesc();
}
internal class Snowflake.Data.Core.FileTransfer.SFFileCompressionTypes : object {
    private static byte MAX_MAGIC_BYTES;
    private static Byte[] GZIP_MAGIC;
    private static string GZIP_NAME;
    private static string GZIP_EXTENSION;
    private static Byte[] DEFLATE_MAGIC_LOW;
    private static Byte[] DEFLATE_MAGIC_DEFAULT;
    private static Byte[] DEFLATE_MAGIC_BEST;
    private static string DEFLATE_NAME;
    private static string DEFLATE_EXTENSION;
    private static string RAW_DEFLATE_NAME;
    private static string RAW_DEFLATE_EXTENSION;
    private static Byte[] BZIP2_MAGIC;
    private static string BZIP2_NAME;
    private static string BZIP2_EXTENSION;
    private static Byte[] ZSTD_MAGIC;
    private static string ZSTD_NAME;
    private static string ZSTD_EXTENSION;
    private static Byte[] BROTLI_MAGIC;
    private static string BROTLI_NAME;
    private static string BROTLI_EXTENSION;
    private static string LZIP_NAME;
    private static string LZIP_EXTENSION;
    private static string LZMA_NAME;
    private static string LZMA_EXTENSION;
    private static string LZO_NAME;
    private static string LZO_EXTENSION;
    private static string XZ_NAME;
    private static string XZ_EXTENSION;
    private static string COMPRESS_NAME;
    private static string COMPRESS_EXTENSION;
    private static Byte[] PARQUET_MAGIC;
    private static string PARQUET_NAME;
    private static string PARQUET_EXTENSION;
    private static Byte[] ORC_MAGIC;
    private static string ORC_NAME;
    private static string ORC_EXTENSION;
    private static string NONE_NAME;
    private static string NONE_EXTENSION;
    private static Byte[][] gzip_magics;
    private static Byte[][] deflate_magics;
    private static Byte[][] bzip2_magics;
    private static Byte[][] orc_magics;
    private static Byte[][] parquet_magics;
    private static Byte[][] zstd_magics;
    private static Byte[][] brotli_magics;
    public static SFFileCompressionType GZIP;
    public static SFFileCompressionType DEFLATE;
    public static SFFileCompressionType RAW_DEFLATE;
    public static SFFileCompressionType BZIP2;
    public static SFFileCompressionType ZSTD;
    public static SFFileCompressionType BROTLI;
    public static SFFileCompressionType ORC;
    public static SFFileCompressionType PARQUET;
    public static SFFileCompressionType LZIP;
    public static SFFileCompressionType LZMA;
    public static SFFileCompressionType LZO;
    public static SFFileCompressionType XZ;
    public static SFFileCompressionType COMPRESS;
    public static SFFileCompressionType NONE;
    private static IReadOnlyList`1<SFFileCompressionType> compressionTypes;
    private static SFFileCompressionTypes();
    public static SFFileCompressionType GuessCompressionType(string filePath);
    public static SFFileCompressionType LookUpByFileExtension(string fileExtension);
    public static SFFileCompressionType LookUpByName(string name);
}
internal class Snowflake.Data.Core.FileTransfer.SFFileMetadata : object {
    [CompilerGeneratedAttribute]
private string <srcFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <realSrcFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <srcFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <srcFileSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <srcFileToUpload>k__BackingField;
    [CompilerGeneratedAttribute]
private long <srcFileToUploadSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <destFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <destFileSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <destPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <localLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private long <uploadSize>k__BackingField;
    [CompilerGeneratedAttribute]
private PutGetStageInfo <stageInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <requireCompress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <overwrite>k__BackingField;
    [CompilerGeneratedAttribute]
private PutGetEncryptionMaterial <encryptionMaterial>k__BackingField;
    [CompilerGeneratedAttribute]
private SFEncryptionMetadata <encryptionMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <sha256Digest>k__BackingField;
    [CompilerGeneratedAttribute]
private SFFileCompressionType <sourceCompression>k__BackingField;
    [CompilerGeneratedAttribute]
private SFFileCompressionType <targetCompression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <presignedUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <parallel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <resultStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <tmpDir>k__BackingField;
    [CompilerGeneratedAttribute]
private ISFRemoteStorageClient <client>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <lastError>k__BackingField;
    [CompilerGeneratedAttribute]
private int <lastMaxConcurrency>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <sourceFromStream>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryStream <memoryStream>k__BackingField;
    [CompilerGeneratedAttribute]
private ProxyCredentials <proxyCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxBytesInMemory>k__BackingField;
    internal CommandTypes _operationType;
    public string srcFilePath { get; public set; }
    public string realSrcFilePath { get; public set; }
    public string srcFileName { get; public set; }
    public long srcFileSize { get; public set; }
    public string srcFileToUpload { get; public set; }
    public long srcFileToUploadSize { get; public set; }
    public string destFileName { get; public set; }
    public long destFileSize { get; public set; }
    public string destPath { get; public set; }
    public string localLocation { get; public set; }
    public long uploadSize { get; public set; }
    public PutGetStageInfo stageInfo { get; public set; }
    public bool requireCompress { get; public set; }
    public bool overwrite { get; public set; }
    public PutGetEncryptionMaterial encryptionMaterial { get; public set; }
    public SFEncryptionMetadata encryptionMetadata { get; public set; }
    public string sha256Digest { get; public set; }
    public SFFileCompressionType sourceCompression { get; public set; }
    public SFFileCompressionType targetCompression { get; public set; }
    public string presignedUrl { get; public set; }
    public int parallel { get; public set; }
    public string resultStatus { get; public set; }
    public string tmpDir { get; public set; }
    public ISFRemoteStorageClient client { get; public set; }
    public Exception lastError { get; public set; }
    public int lastMaxConcurrency { get; public set; }
    public bool sourceFromStream { get; public set; }
    public MemoryStream memoryStream { get; public set; }
    public ProxyCredentials proxyCredentials { get; public set; }
    public int MaxBytesInMemory { get; public set; }
    [CompilerGeneratedAttribute]
public void set_srcFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_srcFilePath();
    [CompilerGeneratedAttribute]
public void set_realSrcFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_realSrcFilePath();
    [CompilerGeneratedAttribute]
public void set_srcFileName(string value);
    [CompilerGeneratedAttribute]
public string get_srcFileName();
    [CompilerGeneratedAttribute]
public void set_srcFileSize(long value);
    [CompilerGeneratedAttribute]
public long get_srcFileSize();
    [CompilerGeneratedAttribute]
public void set_srcFileToUpload(string value);
    [CompilerGeneratedAttribute]
public string get_srcFileToUpload();
    [CompilerGeneratedAttribute]
public void set_srcFileToUploadSize(long value);
    [CompilerGeneratedAttribute]
public long get_srcFileToUploadSize();
    [CompilerGeneratedAttribute]
public void set_destFileName(string value);
    [CompilerGeneratedAttribute]
public string get_destFileName();
    [CompilerGeneratedAttribute]
public void set_destFileSize(long value);
    [CompilerGeneratedAttribute]
public long get_destFileSize();
    [CompilerGeneratedAttribute]
public void set_destPath(string value);
    [CompilerGeneratedAttribute]
public string get_destPath();
    [CompilerGeneratedAttribute]
public void set_localLocation(string value);
    [CompilerGeneratedAttribute]
public string get_localLocation();
    [CompilerGeneratedAttribute]
public void set_uploadSize(long value);
    [CompilerGeneratedAttribute]
public long get_uploadSize();
    [CompilerGeneratedAttribute]
public PutGetStageInfo get_stageInfo();
    [CompilerGeneratedAttribute]
public void set_stageInfo(PutGetStageInfo value);
    [CompilerGeneratedAttribute]
public void set_requireCompress(bool value);
    [CompilerGeneratedAttribute]
public bool get_requireCompress();
    [CompilerGeneratedAttribute]
public void set_overwrite(bool value);
    [CompilerGeneratedAttribute]
public bool get_overwrite();
    [CompilerGeneratedAttribute]
public void set_encryptionMaterial(PutGetEncryptionMaterial value);
    [CompilerGeneratedAttribute]
public PutGetEncryptionMaterial get_encryptionMaterial();
    [CompilerGeneratedAttribute]
public void set_encryptionMetadata(SFEncryptionMetadata value);
    [CompilerGeneratedAttribute]
public SFEncryptionMetadata get_encryptionMetadata();
    [CompilerGeneratedAttribute]
public void set_sha256Digest(string value);
    [CompilerGeneratedAttribute]
public string get_sha256Digest();
    [CompilerGeneratedAttribute]
public void set_sourceCompression(SFFileCompressionType value);
    [CompilerGeneratedAttribute]
public SFFileCompressionType get_sourceCompression();
    [CompilerGeneratedAttribute]
public void set_targetCompression(SFFileCompressionType value);
    [CompilerGeneratedAttribute]
public SFFileCompressionType get_targetCompression();
    [CompilerGeneratedAttribute]
public void set_presignedUrl(string value);
    [CompilerGeneratedAttribute]
public string get_presignedUrl();
    [CompilerGeneratedAttribute]
public int get_parallel();
    [CompilerGeneratedAttribute]
public void set_parallel(int value);
    [CompilerGeneratedAttribute]
public string get_resultStatus();
    [CompilerGeneratedAttribute]
public void set_resultStatus(string value);
    [CompilerGeneratedAttribute]
public string get_tmpDir();
    [CompilerGeneratedAttribute]
public void set_tmpDir(string value);
    [CompilerGeneratedAttribute]
public ISFRemoteStorageClient get_client();
    [CompilerGeneratedAttribute]
public void set_client(ISFRemoteStorageClient value);
    [CompilerGeneratedAttribute]
public Exception get_lastError();
    [CompilerGeneratedAttribute]
public void set_lastError(Exception value);
    [CompilerGeneratedAttribute]
public int get_lastMaxConcurrency();
    [CompilerGeneratedAttribute]
public void set_lastMaxConcurrency(int value);
    [CompilerGeneratedAttribute]
public bool get_sourceFromStream();
    [CompilerGeneratedAttribute]
public void set_sourceFromStream(bool value);
    [CompilerGeneratedAttribute]
public MemoryStream get_memoryStream();
    [CompilerGeneratedAttribute]
public void set_memoryStream(MemoryStream value);
    [CompilerGeneratedAttribute]
public ProxyCredentials get_proxyCredentials();
    [CompilerGeneratedAttribute]
public void set_proxyCredentials(ProxyCredentials value);
    [CompilerGeneratedAttribute]
public int get_MaxBytesInMemory();
    [CompilerGeneratedAttribute]
public void set_MaxBytesInMemory(int value);
    internal string RemoteFileName();
}
internal class Snowflake.Data.Core.FileTransfer.SFLocalStorageUtil : object {
    internal static void UploadOneFileWithRetry(SFFileMetadata fileMetadata);
    internal static void DownloadOneFile(SFFileMetadata fileMetadata);
}
internal class Snowflake.Data.Core.FileTransfer.SFRemoteStorageUtil : object {
    public static string S3_FS;
    public static string AZURE_FS;
    public static string GCS_FS;
    public static string LOCAL_FS;
    private static int DEFAULT_CONCURRENCY;
    private static int DEFAULT_MAX_RETRY;
    internal static ISFRemoteStorageClient GetRemoteStorage(PutGetResponseData response, ProxyCredentials proxyCredentials);
    internal static void UploadOneFile(SFFileMetadata fileMetadata);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.FileTransfer.SFRemoteStorageUtil/<UploadOneFileAsync>d__8")]
internal static Task UploadOneFileAsync(SFFileMetadata fileMetadata, CancellationToken cancellationToken);
    private static void HandleUploadResult(SFFileMetadata& fileMetadata, Int32& maxConcurrency, Exception& lastErr, int retry, int maxRetry);
    internal static void UploadOneFileWithRetry(SFFileMetadata fileMetadata);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.FileTransfer.SFRemoteStorageUtil/<UploadOneFileWithRetryAsync>d__11")]
internal static Task UploadOneFileWithRetryAsync(SFFileMetadata fileMetadata, CancellationToken cancellationToken);
    internal static void DownloadOneFile(SFFileMetadata fileMetadata);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.FileTransfer.SFRemoteStorageUtil/<DownloadOneFileAsync>d__13")]
internal static Task DownloadOneFileAsync(SFFileMetadata fileMetadata, CancellationToken cancellationToken);
    private static void HandleDownloadFileErr(SFFileMetadata& fileMetadata, Int32& maxConcurrency, Exception& lastErr, int retry, int maxRetry);
    private static Stream GetFileBytesStream(SFFileMetadata fileMetadata, SFEncryptionMetadata encryptionMetadata);
}
internal class Snowflake.Data.Core.FileTransfer.StorageClient.SFGCSClient : object {
    private static string GCS_METADATA_PREFIX;
    internal static string GCS_METADATA_SFC_DIGEST;
    internal static string GCS_METADATA_MATDESC_KEY;
    internal static string GCS_METADATA_ENCRYPTIONDATAPROP;
    internal static string GCS_FILE_HEADER_CONTENT_LENGTH;
    private string AccessToken;
    private static string GCS_ACCESS_TOKEN;
    private static SFLogger Logger;
    private StorageClient StorageClient;
    private WebRequest _customWebRequest;
    public SFGCSClient(PutGetStageInfo stageInfo);
    private static SFGCSClient();
    internal void SetCustomWebRequest(WebRequest mockWebRequest);
    public sealed virtual RemoteLocation ExtractBucketNameAndPath(string stageLocation);
    internal WebRequest FormBaseRequest(SFFileMetadata fileMetadata, string method);
    public sealed virtual FileHeader GetFileHeader(SFFileMetadata fileMetadata);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.FileTransfer.StorageClient.SFGCSClient/<GetFileHeaderAsync>d__15")]
public sealed virtual Task`1<FileHeader> GetFileHeaderAsync(SFFileMetadata fileMetadata, CancellationToken cancellationToken);
    internal string generateFileURL(string stageLocation, string fileName);
    public sealed virtual void UploadFile(SFFileMetadata fileMetadata, Stream fileBytesStream, SFEncryptionMetadata encryptionMetadata);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.FileTransfer.StorageClient.SFGCSClient/<UploadFileAsync>d__18")]
public sealed virtual Task UploadFileAsync(SFFileMetadata fileMetadata, Stream fileByteStream, SFEncryptionMetadata encryptionMetadata, CancellationToken cancellationToken);
    private WebRequest GetUploadFileRequest(SFFileMetadata fileMetadata, SFEncryptionMetadata encryptionMetadata, string encryptionData);
    private string GetUploadEncryptionData(SFEncryptionMetadata encryptionMetadata);
    public sealed virtual void DownloadFile(SFFileMetadata fileMetadata, string fullDstPath, int maxConcurrency);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.FileTransfer.StorageClient.SFGCSClient/<DownloadFileAsync>d__22")]
public sealed virtual Task DownloadFileAsync(SFFileMetadata fileMetadata, string fullDstPath, int maxConcurrency, CancellationToken cancellationToken);
    private void HandleDownloadResponse(HttpWebResponse response, SFFileMetadata fileMetadata);
    private SFFileMetadata HandleFileHeaderErrForPresignedUrls(WebException ex, SFFileMetadata fileMetadata);
    private SFFileMetadata HandleFileHeaderErrForGeneratedUrls(WebException ex, SFFileMetadata fileMetadata);
    private SFFileMetadata HandleUploadFileErr(WebException ex, SFFileMetadata fileMetadata);
    private SFFileMetadata HandleDownloadFileErr(WebException ex, SFFileMetadata fileMetadata);
}
internal class Snowflake.Data.Core.FileTransfer.StorageClient.SFS3Client : object {
    private static string AMZ_META_PREFIX;
    internal static string AMZ_IV;
    internal static string AMZ_KEY;
    internal static string AMZ_MATDESC;
    internal static string SFC_DIGEST;
    internal static string EXPIRED_TOKEN;
    internal static string NO_SUCH_KEY;
    private static string HTTP_HEADER_VALUE_OCTET_STREAM;
    private static string AWS_KEY_ID;
    private static string AWS_SECRET_KEY;
    private static string AWS_TOKEN;
    private static SFLogger Logger;
    private AmazonS3Client S3Client;
    public SFS3Client(PutGetStageInfo stageInfo, int maxRetry, int parallel, ProxyCredentials proxyCredentials);
    internal SFS3Client(PutGetStageInfo stageInfo, int maxRetry, int parallel, ProxyCredentials proxyCredentials, AmazonS3Client amazonS3ClientMock);
    private static SFS3Client();
    public sealed virtual RemoteLocation ExtractBucketNameAndPath(string stageLocation);
    public sealed virtual FileHeader GetFileHeader(SFFileMetadata fileMetadata);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.FileTransfer.StorageClient.SFS3Client/<GetFileHeaderAsync>d__18")]
public sealed virtual Task`1<FileHeader> GetFileHeaderAsync(SFFileMetadata fileMetadata, CancellationToken cancellationToken);
    private GetObjectRequest GetFileHeaderRequest(AmazonS3Client& client, SFFileMetadata fileMetadata);
    private FileHeader HandleFileHeaderResponse(SFFileMetadata& fileMetadata, GetObjectResponse response);
    private static void SetCommonClientConfig(AmazonS3Config clientConfig, string region, string endpoint, int maxRetry, int parallel);
    public sealed virtual void UploadFile(SFFileMetadata fileMetadata, Stream fileBytesStream, SFEncryptionMetadata encryptionMetadata);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.FileTransfer.StorageClient.SFS3Client/<UploadFileAsync>d__23")]
public sealed virtual Task UploadFileAsync(SFFileMetadata fileMetadata, Stream fileBytesStream, SFEncryptionMetadata encryptionMetadata, CancellationToken cancellationToken);
    private PutObjectRequest GetPutObjectRequest(AmazonS3Client& client, SFFileMetadata fileMetadata, Stream fileBytesStream, SFEncryptionMetadata encryptionMetadata);
    public sealed virtual void DownloadFile(SFFileMetadata fileMetadata, string fullDstPath, int maxConcurrency);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.FileTransfer.StorageClient.SFS3Client/<DownloadFileAsync>d__26")]
public sealed virtual Task DownloadFileAsync(SFFileMetadata fileMetadata, string fullDstPath, int maxConcurrency, CancellationToken cancellationToken);
    private GetObjectRequest GetGetObjectRequest(AmazonS3Client& client, SFFileMetadata fileMetadata);
    private SFFileMetadata HandleFileHeaderErr(Exception ex, SFFileMetadata fileMetadata);
    private SFFileMetadata HandleUploadFileErr(Exception ex, SFFileMetadata fileMetadata);
    private SFFileMetadata HandleDownloadFileErr(Exception ex, SFFileMetadata fileMetadata);
}
internal class Snowflake.Data.Core.FileTransfer.StorageClient.SFSnowflakeAzureClient : object {
    private static string AZURE_SAS_TOKEN;
    private static SFLogger Logger;
    private BlobServiceClient blobServiceClient;
    public SFSnowflakeAzureClient(PutGetStageInfo stageInfo);
    internal SFSnowflakeAzureClient(PutGetStageInfo stageInfo, BlobServiceClient blobServiceClientMock);
    private static SFSnowflakeAzureClient();
    public sealed virtual RemoteLocation ExtractBucketNameAndPath(string stageLocation);
    public sealed virtual FileHeader GetFileHeader(SFFileMetadata fileMetadata);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.FileTransfer.StorageClient.SFSnowflakeAzureClient/<GetFileHeaderAsync>d__7")]
public sealed virtual Task`1<FileHeader> GetFileHeaderAsync(SFFileMetadata fileMetadata, CancellationToken cancellationToken);
    private FileHeader HandleFileHeaderResponse(SFFileMetadata& fileMetadata, BlobProperties response);
    public sealed virtual void UploadFile(SFFileMetadata fileMetadata, Stream fileBytesStream, SFEncryptionMetadata encryptionMetadata);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.FileTransfer.StorageClient.SFSnowflakeAzureClient/<UploadFileAsync>d__10")]
public sealed virtual Task UploadFileAsync(SFFileMetadata fileMetadata, Stream fileBytesStream, SFEncryptionMetadata encryptionMetadata, CancellationToken cancellationToken);
    private BlobClient GetUploadFileBlobClient(IDictionary`2& metadata, SFFileMetadata fileMetadata, SFEncryptionMetadata encryptionMetadata);
    public sealed virtual void DownloadFile(SFFileMetadata fileMetadata, string fullDstPath, int maxConcurrency);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.FileTransfer.StorageClient.SFSnowflakeAzureClient/<DownloadFileAsync>d__13")]
public sealed virtual Task DownloadFileAsync(SFFileMetadata fileMetadata, string fullDstPath, int maxConcurrency, CancellationToken cancellationToken);
    private SFFileMetadata HandleFileHeaderErr(RequestFailedException ex, SFFileMetadata fileMetadata);
    private SFFileMetadata HandleUploadFileErr(RequestFailedException ex, SFFileMetadata fileMetadata);
    private SFFileMetadata HandleDownloadFileErr(RequestFailedException ex, SFFileMetadata fileMetadata);
}
internal class Snowflake.Data.Core.FileTransfer.WrappedContentInfo : object {
    public string KeyId;
    public string EncryptedKey;
    public string Algorithm;
}
public class Snowflake.Data.Core.HeartBeatBackground : object {
    private static HeartBeatBackground instance;
    private static object heartBeatLock;
    private static object _heartBeatLock;
    private static List`1<SFSession> heartBeatConns;
    private static Thread heartBeatThread;
    private static long masterTokenValidationTimeInSec;
    private static bool isHeartBeatEnd;
    public static HeartBeatBackground Instance { get; }
    private static HeartBeatBackground();
    protected virtual override void Finalize();
    internal static int getQueueLength();
    internal static void setValidity(long validity);
    public static HeartBeatBackground get_Instance();
    private long getHeartBeatInterval(long masterTokenValidationTime);
    public void addConnection(SFSession conn, long masterTokenValidityInSecs);
    public void removeConnection(SFSession conn);
    private void heartBeatAll();
}
public class Snowflake.Data.Core.HttpClientConfig : object {
    public bool CrlCheckEnabled;
    public string ProxyHost;
    public string ProxyPort;
    public string ProxyUser;
    public string ProxyPassword;
    public string NoProxyList;
    public bool DisableRetry;
    public bool ForceRetryOn404;
    public int MaxHttpRetries;
    public bool IncludeRetryReason;
    public string ConfKey;
    public HttpClientConfig(bool crlCheckEnabled, string proxyHost, string proxyPort, string proxyUser, string proxyPassword, string noProxyList, bool disableRetry, bool forceRetryOn404, int maxHttpRetries, bool includeRetryReason);
}
public class Snowflake.Data.Core.HttpUtil : object {
    internal static int MAX_BACKOFF;
    private static int s_baseBackOffTime;
    private static int s_exponentialFactor;
    private static SFLogger logger;
    private static List`1<string> s_supportedEndpointsForRetryPolicy;
    [CompilerGeneratedAttribute]
private static HttpUtil <Instance>k__BackingField;
    private object httpClientProviderLock;
    private Dictionary`2<string, HttpClient> _HttpClients;
    internal static HttpUtil Instance { get; }
    private static HttpUtil();
    [CompilerGeneratedAttribute]
internal static HttpUtil get_Instance();
    internal HttpClient GetHttpClient(HttpClientConfig config);
    private HttpClient RegisterNewHttpClientIfNecessary(HttpClientConfig config);
    internal HttpMessageHandler SetupCustomHttpHandler(HttpClientConfig config);
    public static bool isRetryableHTTPCode(int statusCode, bool forceRetryOn404);
    internal static double GetJitter(double curWaitTime);
    private static double ChooseRandom(double min, double max);
    internal static bool IsLoginEndpoint(string endpoint);
}
internal interface Snowflake.Data.Core.IChunkDownloader {
    public abstract virtual Task`1<BaseResultChunk> GetNextChunkAsync();
}
internal interface Snowflake.Data.Core.IChunkParser {
    public abstract virtual Task ParseChunk(IResultChunk chunk);
}
internal interface Snowflake.Data.Core.IChunkParserFactory {
    public abstract virtual IChunkParser GetParser(ResultFormat resultFormat, Stream stream);
}
internal interface Snowflake.Data.Core.IMockRestRequester {
    public abstract virtual void setHttpClient(HttpClient httpClient);
}
public interface Snowflake.Data.Core.IQueryExecResponseData {
    public string queryId { get; }
    public string sqlState { get; }
    public abstract virtual string get_queryId();
    public abstract virtual string get_sqlState();
}
internal interface Snowflake.Data.Core.IRestRequest {
    public abstract virtual HttpRequestMessage ToRequestMessage(HttpMethod method);
    public abstract virtual TimeSpan GetRestTimeout();
    public abstract virtual string getSid();
}
internal interface Snowflake.Data.Core.IRestRequester {
    public abstract virtual Task`1<T> PostAsync(IRestRequest postRequest, CancellationToken cancellationToken);
    public abstract virtual T Post(IRestRequest postRequest);
    public abstract virtual Task`1<T> GetAsync(IRestRequest request, CancellationToken cancellationToken);
    public abstract virtual T Get(IRestRequest request);
    public abstract virtual Task`1<HttpResponseMessage> GetAsync(IRestRequest request, CancellationToken cancellationToken);
    public abstract virtual HttpResponseMessage Get(IRestRequest request);
}
public interface Snowflake.Data.Core.IResultChunk {
    [ObsoleteAttribute("ExtractCell with rowIndex is deprecated", "False")]
public abstract virtual UTF8Buffer ExtractCell(int rowIndex, int columnIndex);
    public abstract virtual int GetRowCount();
    public abstract virtual int GetChunkIndex();
}
internal class Snowflake.Data.Core.JsonUtils : object {
    public static JsonSerializerSettings JsonSettings;
    private static JsonUtils();
}
internal class Snowflake.Data.Core.LoginRequest : object {
    [CompilerGeneratedAttribute]
private LoginRequestData <data>k__BackingField;
    [JsonPropertyAttribute]
internal LoginRequestData data { get; internal set; }
    [CompilerGeneratedAttribute]
internal LoginRequestData get_data();
    [CompilerGeneratedAttribute]
internal void set_data(LoginRequestData value);
    public virtual string ToString();
}
internal class Snowflake.Data.Core.LoginRequestClientEnv : object {
    [CompilerGeneratedAttribute]
private string <application>k__BackingField;
    [CompilerGeneratedAttribute]
private string <osVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <netRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <netVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <insecureMode>k__BackingField;
    [JsonPropertyAttribute]
internal string application { get; internal set; }
    [JsonPropertyAttribute]
internal string osVersion { get; internal set; }
    [JsonPropertyAttribute]
internal string netRuntime { get; internal set; }
    [JsonPropertyAttribute]
internal string netVersion { get; internal set; }
    [JsonPropertyAttribute]
internal string insecureMode { get; internal set; }
    [JsonIgnoreAttribute]
internal bool IsNetFramework { get; }
    [CompilerGeneratedAttribute]
internal string get_application();
    [CompilerGeneratedAttribute]
internal void set_application(string value);
    [CompilerGeneratedAttribute]
internal string get_osVersion();
    [CompilerGeneratedAttribute]
internal void set_osVersion(string value);
    [CompilerGeneratedAttribute]
internal string get_netRuntime();
    [CompilerGeneratedAttribute]
internal void set_netRuntime(string value);
    [CompilerGeneratedAttribute]
internal string get_netVersion();
    [CompilerGeneratedAttribute]
internal void set_netVersion(string value);
    [CompilerGeneratedAttribute]
internal string get_insecureMode();
    [CompilerGeneratedAttribute]
internal void set_insecureMode(string value);
    internal bool get_IsNetFramework();
    public virtual string ToString();
}
internal class Snowflake.Data.Core.LoginRequestData : object {
    [CompilerGeneratedAttribute]
private string <clientAppId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <clientAppVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <accountName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <loginName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Authenticator>k__BackingField;
    [CompilerGeneratedAttribute]
private LoginRequestClientEnv <clientEnv>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawSamlResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProofKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<SFSessionParameter, object> <SessionParameters>k__BackingField;
    [JsonPropertyAttribute]
internal string clientAppId { get; internal set; }
    [JsonPropertyAttribute]
internal string clientAppVersion { get; internal set; }
    [JsonPropertyAttribute]
internal string accountName { get; internal set; }
    [JsonPropertyAttribute]
internal string loginName { get; internal set; }
    [JsonPropertyAttribute]
internal string password { get; internal set; }
    [JsonPropertyAttribute]
internal string Authenticator { get; internal set; }
    [JsonPropertyAttribute]
internal LoginRequestClientEnv clientEnv { get; internal set; }
    [JsonPropertyAttribute]
internal string RawSamlResponse { get; internal set; }
    [JsonPropertyAttribute]
internal string Token { get; internal set; }
    [JsonPropertyAttribute]
internal string ProofKey { get; internal set; }
    [JsonPropertyAttribute]
internal Dictionary`2<SFSessionParameter, object> SessionParameters { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_clientAppId();
    [CompilerGeneratedAttribute]
internal void set_clientAppId(string value);
    [CompilerGeneratedAttribute]
internal string get_clientAppVersion();
    [CompilerGeneratedAttribute]
internal void set_clientAppVersion(string value);
    [CompilerGeneratedAttribute]
internal string get_accountName();
    [CompilerGeneratedAttribute]
internal void set_accountName(string value);
    [CompilerGeneratedAttribute]
internal string get_loginName();
    [CompilerGeneratedAttribute]
internal void set_loginName(string value);
    [CompilerGeneratedAttribute]
internal string get_password();
    [CompilerGeneratedAttribute]
internal void set_password(string value);
    [CompilerGeneratedAttribute]
internal string get_Authenticator();
    [CompilerGeneratedAttribute]
internal void set_Authenticator(string value);
    [CompilerGeneratedAttribute]
internal LoginRequestClientEnv get_clientEnv();
    [CompilerGeneratedAttribute]
internal void set_clientEnv(LoginRequestClientEnv value);
    [CompilerGeneratedAttribute]
internal string get_RawSamlResponse();
    [CompilerGeneratedAttribute]
internal void set_RawSamlResponse(string value);
    [CompilerGeneratedAttribute]
internal string get_Token();
    [CompilerGeneratedAttribute]
internal void set_Token(string value);
    [CompilerGeneratedAttribute]
internal string get_ProofKey();
    [CompilerGeneratedAttribute]
internal void set_ProofKey(string value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<SFSessionParameter, object> get_SessionParameters();
    [CompilerGeneratedAttribute]
internal void set_SessionParameters(Dictionary`2<SFSessionParameter, object> value);
    public virtual string ToString();
}
internal class Snowflake.Data.Core.LoginResponse : BaseRestResponse {
    [CompilerGeneratedAttribute]
private LoginResponseData <data>k__BackingField;
    [JsonPropertyAttribute]
internal LoginResponseData data { get; internal set; }
    [CompilerGeneratedAttribute]
internal LoginResponseData get_data();
    [CompilerGeneratedAttribute]
internal void set_data(LoginResponseData value);
}
internal class Snowflake.Data.Core.LoginResponseData : object {
    [CompilerGeneratedAttribute]
private string <sessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <masterToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <serverVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NameValueParameter> <nameValueParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private SessionInfo <authResponseSessionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <masterValidityInSeconds>k__BackingField;
    [JsonPropertyAttribute]
internal string sessionId { get; internal set; }
    [JsonPropertyAttribute]
internal string token { get; internal set; }
    [JsonPropertyAttribute]
internal string masterToken { get; internal set; }
    [JsonPropertyAttribute]
internal string serverVersion { get; internal set; }
    [JsonPropertyAttribute]
internal List`1<NameValueParameter> nameValueParameter { get; internal set; }
    [JsonPropertyAttribute]
internal SessionInfo authResponseSessionInfo { get; internal set; }
    [JsonPropertyAttribute]
internal int masterValidityInSeconds { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_sessionId();
    [CompilerGeneratedAttribute]
internal void set_sessionId(string value);
    [CompilerGeneratedAttribute]
internal string get_token();
    [CompilerGeneratedAttribute]
internal void set_token(string value);
    [CompilerGeneratedAttribute]
internal string get_masterToken();
    [CompilerGeneratedAttribute]
internal void set_masterToken(string value);
    [CompilerGeneratedAttribute]
internal string get_serverVersion();
    [CompilerGeneratedAttribute]
internal void set_serverVersion(string value);
    [CompilerGeneratedAttribute]
internal List`1<NameValueParameter> get_nameValueParameter();
    [CompilerGeneratedAttribute]
internal void set_nameValueParameter(List`1<NameValueParameter> value);
    [CompilerGeneratedAttribute]
internal SessionInfo get_authResponseSessionInfo();
    [CompilerGeneratedAttribute]
internal void set_authResponseSessionInfo(SessionInfo value);
    [CompilerGeneratedAttribute]
internal int get_masterValidityInSeconds();
    [CompilerGeneratedAttribute]
internal void set_masterValidityInSeconds(int value);
}
internal class Snowflake.Data.Core.NameValueParameter : object {
    [CompilerGeneratedAttribute]
private string <name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <value>k__BackingField;
    [JsonPropertyAttribute]
internal string name { get; internal set; }
    [JsonPropertyAttribute]
internal string value { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_name();
    [CompilerGeneratedAttribute]
internal void set_name(string value);
    [CompilerGeneratedAttribute]
internal string get_value();
    [CompilerGeneratedAttribute]
internal void set_value(string value);
}
internal class Snowflake.Data.Core.NullDataResponse : BaseRestResponse {
    [CompilerGeneratedAttribute]
private object <data>k__BackingField;
    [JsonPropertyAttribute]
internal object data { get; internal set; }
    [CompilerGeneratedAttribute]
internal object get_data();
    [CompilerGeneratedAttribute]
internal void set_data(object value);
}
internal class Snowflake.Data.Core.PutGetEncryptionMaterial : object {
    [CompilerGeneratedAttribute]
private string <queryStageMasterKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <queryId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <smkId>k__BackingField;
    [JsonPropertyAttribute]
internal string queryStageMasterKey { get; internal set; }
    [JsonPropertyAttribute]
internal string queryId { get; internal set; }
    [JsonPropertyAttribute]
internal long smkId { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_queryStageMasterKey();
    [CompilerGeneratedAttribute]
internal void set_queryStageMasterKey(string value);
    [CompilerGeneratedAttribute]
internal string get_queryId();
    [CompilerGeneratedAttribute]
internal void set_queryId(string value);
    [CompilerGeneratedAttribute]
internal long get_smkId();
    [CompilerGeneratedAttribute]
internal void set_smkId(long value);
}
internal class Snowflake.Data.Core.PutGetExecResponse : BaseQueryExecResponse`1<PutGetResponseData> {
}
internal class Snowflake.Data.Core.PutGetResponseData : object {
    [CompilerGeneratedAttribute]
private string <command>k__BackingField;
    [CompilerGeneratedAttribute]
private string <localLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <src_locations>k__BackingField;
    [CompilerGeneratedAttribute]
private int <parallel>k__BackingField;
    [CompilerGeneratedAttribute]
private long <threshold>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <autoCompress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <overwrite>k__BackingField;
    [CompilerGeneratedAttribute]
private string <sourceCompression>k__BackingField;
    [CompilerGeneratedAttribute]
private PutGetStageInfo <stageInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PutGetEncryptionMaterial> <encryptionMaterial>k__BackingField;
    [CompilerGeneratedAttribute]
private string <queryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <sqlState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <presignedUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <presignedUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExecResponseRowType> <rowType>k__BackingField;
    [CompilerGeneratedAttribute]
private String[0...,0...] <rowSet>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NameValueParameter> <parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private long <statementTypeId>k__BackingField;
    [JsonPropertyAttribute]
internal string command { get; internal set; }
    [JsonPropertyAttribute]
internal string localLocation { get; internal set; }
    [JsonPropertyAttribute]
internal List`1<string> src_locations { get; internal set; }
    [JsonPropertyAttribute]
internal int parallel { get; internal set; }
    [JsonPropertyAttribute]
internal long threshold { get; internal set; }
    [JsonPropertyAttribute]
internal bool autoCompress { get; internal set; }
    [JsonPropertyAttribute]
internal bool overwrite { get; internal set; }
    [JsonPropertyAttribute]
internal string sourceCompression { get; internal set; }
    [JsonPropertyAttribute]
internal PutGetStageInfo stageInfo { get; internal set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Snowflake.Data.Core.SingleOrArrayConverter`1<Snowflake.Data.Core.PutGetEncryptionMaterial>")]
internal List`1<PutGetEncryptionMaterial> encryptionMaterial { get; internal set; }
    [JsonPropertyAttribute]
public string queryId { get; public set; }
    [JsonPropertyAttribute]
public string sqlState { get; public set; }
    [JsonPropertyAttribute]
internal string presignedUrl { get; internal set; }
    [JsonPropertyAttribute]
internal List`1<string> presignedUrls { get; internal set; }
    [JsonPropertyAttribute]
internal List`1<ExecResponseRowType> rowType { get; internal set; }
    [JsonPropertyAttribute]
internal String[0...,0...] rowSet { get; internal set; }
    [JsonPropertyAttribute]
internal List`1<NameValueParameter> parameters { get; internal set; }
    [JsonPropertyAttribute]
internal long statementTypeId { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_command();
    [CompilerGeneratedAttribute]
internal void set_command(string value);
    [CompilerGeneratedAttribute]
internal string get_localLocation();
    [CompilerGeneratedAttribute]
internal void set_localLocation(string value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_src_locations();
    [CompilerGeneratedAttribute]
internal void set_src_locations(List`1<string> value);
    [CompilerGeneratedAttribute]
internal int get_parallel();
    [CompilerGeneratedAttribute]
internal void set_parallel(int value);
    [CompilerGeneratedAttribute]
internal long get_threshold();
    [CompilerGeneratedAttribute]
internal void set_threshold(long value);
    [CompilerGeneratedAttribute]
internal bool get_autoCompress();
    [CompilerGeneratedAttribute]
internal void set_autoCompress(bool value);
    [CompilerGeneratedAttribute]
internal bool get_overwrite();
    [CompilerGeneratedAttribute]
internal void set_overwrite(bool value);
    [CompilerGeneratedAttribute]
internal string get_sourceCompression();
    [CompilerGeneratedAttribute]
internal void set_sourceCompression(string value);
    [CompilerGeneratedAttribute]
internal PutGetStageInfo get_stageInfo();
    [CompilerGeneratedAttribute]
internal void set_stageInfo(PutGetStageInfo value);
    [CompilerGeneratedAttribute]
internal List`1<PutGetEncryptionMaterial> get_encryptionMaterial();
    [CompilerGeneratedAttribute]
internal void set_encryptionMaterial(List`1<PutGetEncryptionMaterial> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_queryId();
    [CompilerGeneratedAttribute]
public void set_queryId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_sqlState();
    [CompilerGeneratedAttribute]
public void set_sqlState(string value);
    [CompilerGeneratedAttribute]
internal string get_presignedUrl();
    [CompilerGeneratedAttribute]
internal void set_presignedUrl(string value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_presignedUrls();
    [CompilerGeneratedAttribute]
internal void set_presignedUrls(List`1<string> value);
    [CompilerGeneratedAttribute]
internal List`1<ExecResponseRowType> get_rowType();
    [CompilerGeneratedAttribute]
internal void set_rowType(List`1<ExecResponseRowType> value);
    [CompilerGeneratedAttribute]
internal String[0...,0...] get_rowSet();
    [CompilerGeneratedAttribute]
internal void set_rowSet(String[0...,0...] value);
    [CompilerGeneratedAttribute]
internal List`1<NameValueParameter> get_parameters();
    [CompilerGeneratedAttribute]
internal void set_parameters(List`1<NameValueParameter> value);
    [CompilerGeneratedAttribute]
internal long get_statementTypeId();
    [CompilerGeneratedAttribute]
internal void set_statementTypeId(long value);
}
internal class Snowflake.Data.Core.PutGetStageInfo : object {
    [CompilerGeneratedAttribute]
private string <locationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <region>k__BackingField;
    [CompilerGeneratedAttribute]
private string <storageAccount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <isClientSideEncrypted>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <stageCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private string <presignedUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <endPoint>k__BackingField;
    [JsonPropertyAttribute]
internal string locationType { get; internal set; }
    [JsonPropertyAttribute]
internal string location { get; internal set; }
    [JsonPropertyAttribute]
internal string path { get; internal set; }
    [JsonPropertyAttribute]
internal string region { get; internal set; }
    [JsonPropertyAttribute]
internal string storageAccount { get; internal set; }
    [JsonPropertyAttribute]
internal bool isClientSideEncrypted { get; internal set; }
    [JsonPropertyAttribute]
internal Dictionary`2<string, string> stageCredentials { get; internal set; }
    [JsonPropertyAttribute]
internal string presignedUrl { get; internal set; }
    [JsonPropertyAttribute]
internal string endPoint { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_locationType();
    [CompilerGeneratedAttribute]
internal void set_locationType(string value);
    [CompilerGeneratedAttribute]
internal string get_location();
    [CompilerGeneratedAttribute]
internal void set_location(string value);
    [CompilerGeneratedAttribute]
internal string get_path();
    [CompilerGeneratedAttribute]
internal void set_path(string value);
    [CompilerGeneratedAttribute]
internal string get_region();
    [CompilerGeneratedAttribute]
internal void set_region(string value);
    [CompilerGeneratedAttribute]
internal string get_storageAccount();
    [CompilerGeneratedAttribute]
internal void set_storageAccount(string value);
    [CompilerGeneratedAttribute]
internal bool get_isClientSideEncrypted();
    [CompilerGeneratedAttribute]
internal void set_isClientSideEncrypted(bool value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_stageCredentials();
    [CompilerGeneratedAttribute]
internal void set_stageCredentials(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal string get_presignedUrl();
    [CompilerGeneratedAttribute]
internal void set_presignedUrl(string value);
    [CompilerGeneratedAttribute]
internal string get_endPoint();
    [CompilerGeneratedAttribute]
internal void set_endPoint(string value);
}
internal class Snowflake.Data.Core.QueryCancelRequest : object {
    [CompilerGeneratedAttribute]
private string <requestId>k__BackingField;
    [JsonPropertyAttribute]
internal string requestId { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_requestId();
    [CompilerGeneratedAttribute]
internal void set_requestId(string value);
}
internal class Snowflake.Data.Core.QueryContextCache : object {
    private object _qccLock;
    private int _capacity;
    private Dictionary`2<long, QueryContextElement> _idMap;
    private Dictionary`2<long, QueryContextElement> _priorityMap;
    private Dictionary`2<long, QueryContextElement> _newPriorityMap;
    private SortedSet`1<QueryContextElement> _cacheSet;
    private SFLogger _logger;
    public QueryContextCache(int capacity);
    public void Merge(long id, long readTimestamp, long priority, string context);
    public void SyncPriorityMap();
    public void CheckCacheCapacity();
    public void ClearCache();
    public void SetCapacity(int cap);
    public SortedSet`1<QueryContextElement> getElements();
    public int GetSize();
    public void Update(ResponseQueryContext queryContext);
    public RequestQueryContext GetQueryContextRequest();
    public ResponseQueryContext GetQueryContextResponse();
    private void AddQCE(QueryContextElement qce);
    private void RemoveQCE(QueryContextElement qce);
    private void ReplaceQCE(QueryContextElement oldQCE, QueryContextElement newQCE);
    private void LogCacheEntries();
}
internal class Snowflake.Data.Core.QueryContextElement : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReadTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    public long Id { get; public set; }
    public long ReadTimestamp { get; public set; }
    public long Priority { get; public set; }
    public string Context { get; public set; }
    public QueryContextElement(long id, long timestamp, long pri, string context);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [CompilerGeneratedAttribute]
public long get_ReadTimestamp();
    [CompilerGeneratedAttribute]
public void set_ReadTimestamp(long value);
    [CompilerGeneratedAttribute]
public long get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(long value);
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Snowflake.Data.Core.QueryContextValue : object {
    [CompilerGeneratedAttribute]
private string <Base64Data>k__BackingField;
    [JsonPropertyAttribute]
public string Base64Data { get; public set; }
    public QueryContextValue(string context);
    [CompilerGeneratedAttribute]
public string get_Base64Data();
    [CompilerGeneratedAttribute]
public void set_Base64Data(string value);
}
internal class Snowflake.Data.Core.QueryContextValueEmpty : object {
}
internal class Snowflake.Data.Core.QueryExecResponse : BaseQueryExecResponse`1<QueryExecResponseData> {
}
internal class Snowflake.Data.Core.QueryExecResponseData : object {
    [CompilerGeneratedAttribute]
private List`1<NameValueParameter> <parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExecResponseRowType> <rowType>k__BackingField;
    [CompilerGeneratedAttribute]
private String[0...,0...] <rowSet>k__BackingField;
    [CompilerGeneratedAttribute]
private long <total>k__BackingField;
    [CompilerGeneratedAttribute]
private long <returned>k__BackingField;
    [CompilerGeneratedAttribute]
private string <queryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <sqlState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <databaseProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <finalDatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <finalSchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <finalWarehouseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <finalRoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <numberOfBinds>k__BackingField;
    [CompilerGeneratedAttribute]
private long <statementTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <version>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExecResponseChunk> <chunks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <qrmk>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <chunkHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <getResultUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <progressDesc>k__BackingField;
    [CompilerGeneratedAttribute]
private long <queryAbortAfterSecs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <resultIds>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultFormat <queryResultFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <rowsetBase64>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseQueryContext <QueryContext>k__BackingField;
    [JsonPropertyAttribute]
internal List`1<NameValueParameter> parameters { get; internal set; }
    [JsonPropertyAttribute]
internal List`1<ExecResponseRowType> rowType { get; internal set; }
    [JsonPropertyAttribute]
internal String[0...,0...] rowSet { get; internal set; }
    [JsonPropertyAttribute]
internal long total { get; internal set; }
    [JsonPropertyAttribute]
internal long returned { get; internal set; }
    [JsonPropertyAttribute]
public string queryId { get; public set; }
    [JsonPropertyAttribute]
public string sqlState { get; public set; }
    [JsonPropertyAttribute]
internal string databaseProvider { get; internal set; }
    [JsonPropertyAttribute]
internal string finalDatabaseName { get; internal set; }
    [JsonPropertyAttribute]
internal string finalSchemaName { get; internal set; }
    [JsonPropertyAttribute]
internal string finalWarehouseName { get; internal set; }
    [JsonPropertyAttribute]
internal string finalRoleName { get; internal set; }
    [JsonPropertyAttribute]
internal int numberOfBinds { get; internal set; }
    [JsonPropertyAttribute]
internal long statementTypeId { get; internal set; }
    [JsonPropertyAttribute]
internal int version { get; internal set; }
    [JsonPropertyAttribute]
internal List`1<ExecResponseChunk> chunks { get; internal set; }
    [JsonPropertyAttribute]
internal string qrmk { get; internal set; }
    [JsonPropertyAttribute]
internal Dictionary`2<string, string> chunkHeaders { get; internal set; }
    [JsonPropertyAttribute]
internal string getResultUrl { get; internal set; }
    [JsonPropertyAttribute]
internal string progressDesc { get; internal set; }
    [JsonPropertyAttribute]
internal long queryAbortAfterSecs { get; internal set; }
    [JsonPropertyAttribute]
internal string resultIds { get; internal set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
internal ResultFormat queryResultFormat { get; internal set; }
    [JsonPropertyAttribute]
internal string rowsetBase64 { get; internal set; }
    [JsonPropertyAttribute]
internal ResponseQueryContext QueryContext { get; internal set; }
    [CompilerGeneratedAttribute]
internal List`1<NameValueParameter> get_parameters();
    [CompilerGeneratedAttribute]
internal void set_parameters(List`1<NameValueParameter> value);
    [CompilerGeneratedAttribute]
internal List`1<ExecResponseRowType> get_rowType();
    [CompilerGeneratedAttribute]
internal void set_rowType(List`1<ExecResponseRowType> value);
    [CompilerGeneratedAttribute]
internal String[0...,0...] get_rowSet();
    [CompilerGeneratedAttribute]
internal void set_rowSet(String[0...,0...] value);
    [CompilerGeneratedAttribute]
internal long get_total();
    [CompilerGeneratedAttribute]
internal void set_total(long value);
    [CompilerGeneratedAttribute]
internal long get_returned();
    [CompilerGeneratedAttribute]
internal void set_returned(long value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_queryId();
    [CompilerGeneratedAttribute]
public void set_queryId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_sqlState();
    [CompilerGeneratedAttribute]
public void set_sqlState(string value);
    [CompilerGeneratedAttribute]
internal string get_databaseProvider();
    [CompilerGeneratedAttribute]
internal void set_databaseProvider(string value);
    [CompilerGeneratedAttribute]
internal string get_finalDatabaseName();
    [CompilerGeneratedAttribute]
internal void set_finalDatabaseName(string value);
    [CompilerGeneratedAttribute]
internal string get_finalSchemaName();
    [CompilerGeneratedAttribute]
internal void set_finalSchemaName(string value);
    [CompilerGeneratedAttribute]
internal string get_finalWarehouseName();
    [CompilerGeneratedAttribute]
internal void set_finalWarehouseName(string value);
    [CompilerGeneratedAttribute]
internal string get_finalRoleName();
    [CompilerGeneratedAttribute]
internal void set_finalRoleName(string value);
    [CompilerGeneratedAttribute]
internal int get_numberOfBinds();
    [CompilerGeneratedAttribute]
internal void set_numberOfBinds(int value);
    [CompilerGeneratedAttribute]
internal long get_statementTypeId();
    [CompilerGeneratedAttribute]
internal void set_statementTypeId(long value);
    [CompilerGeneratedAttribute]
internal int get_version();
    [CompilerGeneratedAttribute]
internal void set_version(int value);
    [CompilerGeneratedAttribute]
internal List`1<ExecResponseChunk> get_chunks();
    [CompilerGeneratedAttribute]
internal void set_chunks(List`1<ExecResponseChunk> value);
    [CompilerGeneratedAttribute]
internal string get_qrmk();
    [CompilerGeneratedAttribute]
internal void set_qrmk(string value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_chunkHeaders();
    [CompilerGeneratedAttribute]
internal void set_chunkHeaders(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal string get_getResultUrl();
    [CompilerGeneratedAttribute]
internal void set_getResultUrl(string value);
    [CompilerGeneratedAttribute]
internal string get_progressDesc();
    [CompilerGeneratedAttribute]
internal void set_progressDesc(string value);
    [CompilerGeneratedAttribute]
internal long get_queryAbortAfterSecs();
    [CompilerGeneratedAttribute]
internal void set_queryAbortAfterSecs(long value);
    [CompilerGeneratedAttribute]
internal string get_resultIds();
    [CompilerGeneratedAttribute]
internal void set_resultIds(string value);
    [CompilerGeneratedAttribute]
internal ResultFormat get_queryResultFormat();
    [CompilerGeneratedAttribute]
internal void set_queryResultFormat(ResultFormat value);
    [CompilerGeneratedAttribute]
internal string get_rowsetBase64();
    [CompilerGeneratedAttribute]
internal void set_rowsetBase64(string value);
    [CompilerGeneratedAttribute]
internal ResponseQueryContext get_QueryContext();
    [CompilerGeneratedAttribute]
internal void set_QueryContext(ResponseQueryContext value);
}
internal class Snowflake.Data.Core.QueryRequest : object {
    [CompilerGeneratedAttribute]
private string <sqlText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <describeOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, BindingDTO> <parameterBindings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <bindStage>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestQueryContext <QueryContextDTO>k__BackingField;
    [JsonPropertyAttribute]
internal string sqlText { get; internal set; }
    [JsonPropertyAttribute]
internal bool describeOnly { get; internal set; }
    [JsonPropertyAttribute]
internal Dictionary`2<string, BindingDTO> parameterBindings { get; internal set; }
    [JsonPropertyAttribute]
internal string bindStage { get; internal set; }
    [JsonPropertyAttribute]
internal Dictionary`2<string, string> parameters { get; internal set; }
    [JsonPropertyAttribute]
internal RequestQueryContext QueryContextDTO { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_sqlText();
    [CompilerGeneratedAttribute]
internal void set_sqlText(string value);
    [CompilerGeneratedAttribute]
internal bool get_describeOnly();
    [CompilerGeneratedAttribute]
internal void set_describeOnly(bool value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, BindingDTO> get_parameterBindings();
    [CompilerGeneratedAttribute]
internal void set_parameterBindings(Dictionary`2<string, BindingDTO> value);
    [CompilerGeneratedAttribute]
internal string get_bindStage();
    [CompilerGeneratedAttribute]
internal void set_bindStage(string value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_parameters();
    [CompilerGeneratedAttribute]
internal void set_parameters(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal RequestQueryContext get_QueryContextDTO();
    [CompilerGeneratedAttribute]
internal void set_QueryContextDTO(RequestQueryContext value);
}
internal class Snowflake.Data.Core.RenewSessionRequest : object {
    [CompilerGeneratedAttribute]
private string <oldSessionToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <requestType>k__BackingField;
    [JsonPropertyAttribute]
internal string oldSessionToken { get; internal set; }
    [JsonPropertyAttribute]
internal string requestType { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_oldSessionToken();
    [CompilerGeneratedAttribute]
internal void set_oldSessionToken(string value);
    [CompilerGeneratedAttribute]
internal string get_requestType();
    [CompilerGeneratedAttribute]
internal void set_requestType(string value);
}
internal class Snowflake.Data.Core.RenewSessionResponse : BaseRestResponse {
    [CompilerGeneratedAttribute]
private RenewSessionResponseData <data>k__BackingField;
    [JsonPropertyAttribute]
internal RenewSessionResponseData data { get; internal set; }
    [CompilerGeneratedAttribute]
internal RenewSessionResponseData get_data();
    [CompilerGeneratedAttribute]
internal void set_data(RenewSessionResponseData value);
}
internal class Snowflake.Data.Core.RenewSessionResponseData : object {
    [CompilerGeneratedAttribute]
private string <sessionToken>k__BackingField;
    [CompilerGeneratedAttribute]
private short <sessionTokenValidityInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <masterToken>k__BackingField;
    [CompilerGeneratedAttribute]
private short <masterTokenValidityInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private long <sessionId>k__BackingField;
    [JsonPropertyAttribute]
internal string sessionToken { get; internal set; }
    [JsonPropertyAttribute]
internal short sessionTokenValidityInSeconds { get; internal set; }
    [JsonPropertyAttribute]
internal string masterToken { get; internal set; }
    [JsonPropertyAttribute]
internal short masterTokenValidityInSeconds { get; internal set; }
    [JsonPropertyAttribute]
internal long sessionId { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_sessionToken();
    [CompilerGeneratedAttribute]
internal void set_sessionToken(string value);
    [CompilerGeneratedAttribute]
internal short get_sessionTokenValidityInSeconds();
    [CompilerGeneratedAttribute]
internal void set_sessionTokenValidityInSeconds(short value);
    [CompilerGeneratedAttribute]
internal string get_masterToken();
    [CompilerGeneratedAttribute]
internal void set_masterToken(string value);
    [CompilerGeneratedAttribute]
internal short get_masterTokenValidityInSeconds();
    [CompilerGeneratedAttribute]
internal void set_masterTokenValidityInSeconds(short value);
    [CompilerGeneratedAttribute]
internal long get_sessionId();
    [CompilerGeneratedAttribute]
internal void set_sessionId(long value);
}
internal class Snowflake.Data.Core.RequestQueryContext : object {
    [CompilerGeneratedAttribute]
private List`1<RequestQueryContextElement> <Entries>k__BackingField;
    [JsonPropertyAttribute]
internal List`1<RequestQueryContextElement> Entries { get; internal set; }
    [CompilerGeneratedAttribute]
internal List`1<RequestQueryContextElement> get_Entries();
    [CompilerGeneratedAttribute]
internal void set_Entries(List`1<RequestQueryContextElement> value);
}
internal class Snowflake.Data.Core.RequestQueryContextElement : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReadTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Context>k__BackingField;
    [JsonPropertyAttribute]
public long Id { get; public set; }
    [JsonPropertyAttribute]
public long ReadTimestamp { get; public set; }
    [JsonPropertyAttribute]
public long Priority { get; public set; }
    [JsonPropertyAttribute]
public object Context { get; public set; }
    public RequestQueryContextElement(QueryContextElement elem);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [CompilerGeneratedAttribute]
public long get_ReadTimestamp();
    [CompilerGeneratedAttribute]
public void set_ReadTimestamp(long value);
    [CompilerGeneratedAttribute]
public long get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(long value);
    [CompilerGeneratedAttribute]
public object get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(object value);
    public void SetContext(string context);
}
internal class Snowflake.Data.Core.ResponseQueryContext : object {
    [CompilerGeneratedAttribute]
private List`1<ResponseQueryContextElement> <Entries>k__BackingField;
    [JsonPropertyAttribute]
internal List`1<ResponseQueryContextElement> Entries { get; internal set; }
    [CompilerGeneratedAttribute]
internal List`1<ResponseQueryContextElement> get_Entries();
    [CompilerGeneratedAttribute]
internal void set_Entries(List`1<ResponseQueryContextElement> value);
}
internal class Snowflake.Data.Core.ResponseQueryContextElement : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReadTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    [JsonPropertyAttribute]
public long Id { get; public set; }
    [JsonPropertyAttribute]
public long ReadTimestamp { get; public set; }
    [JsonPropertyAttribute]
public long Priority { get; public set; }
    [JsonPropertyAttribute]
public string Context { get; public set; }
    public ResponseQueryContextElement(QueryContextElement elem);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [CompilerGeneratedAttribute]
public long get_ReadTimestamp();
    [CompilerGeneratedAttribute]
public void set_ReadTimestamp(long value);
    [CompilerGeneratedAttribute]
public long get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(long value);
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(string value);
}
internal static class Snowflake.Data.Core.RestParams : object {
    internal static string SF_QUERY_WAREHOUSE;
    internal static string SF_QUERY_DB;
    internal static string SF_QUERY_SCHEMA;
    internal static string SF_QUERY_ROLE;
    internal static string SF_QUERY_REQUEST_ID;
    internal static string SF_QUERY_REQUEST_GUID;
    internal static string SF_QUERY_START_TIME;
    internal static string SF_QUERY_RETRY_COUNT;
    internal static string SF_QUERY_RETRY_REASON;
    internal static string SF_QUERY_SESSION_DELETE;
}
internal static class Snowflake.Data.Core.RestPath : object {
    internal static string SF_SESSION_PATH;
    internal static string SF_LOGIN_PATH;
    internal static string SF_TOKEN_REQUEST_PATH;
    internal static string SF_AUTHENTICATOR_REQUEST_PATH;
    internal static string SF_QUERY_PATH;
    internal static string SF_SESSION_HEARTBEAT_PATH;
}
internal class Snowflake.Data.Core.RestRequester : object {
    private static SFLogger logger;
    protected HttpClient _HttpClient;
    public RestRequester(HttpClient httpClient);
    private static RestRequester();
    public sealed virtual T Post(IRestRequest request);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.RestRequester/<PostAsync>d__4`1")]
public sealed virtual Task`1<T> PostAsync(IRestRequest request, CancellationToken cancellationToken);
    public sealed virtual T Get(IRestRequest request);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.RestRequester/<GetAsync>d__6`1")]
public sealed virtual Task`1<T> GetAsync(IRestRequest request, CancellationToken cancellationToken);
    public sealed virtual Task`1<HttpResponseMessage> GetAsync(IRestRequest request, CancellationToken cancellationToken);
    public sealed virtual HttpResponseMessage Get(IRestRequest request);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.RestRequester/<SendAsync>d__9")]
private Task`1<HttpResponseMessage> SendAsync(HttpMethod method, IRestRequest request, CancellationToken externalCancellationToken);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.RestRequester/<SendAsync>d__10")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage message, TimeSpan restTimeout, CancellationToken externalCancellationToken, string sid);
}
public enum Snowflake.Data.Core.ResultFormat : Enum {
    public int value__;
    public static ResultFormat JSON;
    public static ResultFormat ARROW;
}
[ExtensionAttribute]
internal static class Snowflake.Data.Core.ResultSetUtil : object {
    [ExtensionAttribute]
internal static int CalculateUpdateCount(SFBaseResultSet resultSet);
    [ExtensionAttribute]
internal static bool HasResultSet(SFBaseResultSet resultSet);
}
internal enum Snowflake.Data.Core.ResultStatus : Enum {
    public int value__;
    public static ResultStatus ERROR;
    public static ResultStatus UPLOADED;
    public static ResultStatus DOWNLOADED;
    public static ResultStatus COLLISION;
    public static ResultStatus SKIPPED;
    public static ResultStatus RENEW_TOKEN;
    public static ResultStatus RENEW_PRESIGNED_URL;
    public static ResultStatus NOT_FOUND_FILE;
    public static ResultStatus NEED_RETRY;
    public static ResultStatus NEED_RETRY_WITH_LOWER_CONCURRENCY;
}
public class Snowflake.Data.Core.ReusableChunkParser : object {
    private Stream stream;
    internal ReusableChunkParser(Stream stream);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.ReusableChunkParser/<ParseChunk>d__2")]
public sealed virtual Task ParseChunk(IResultChunk chunk);
}
internal class Snowflake.Data.Core.S3DownloadRequest : BaseRestRequest {
    private static string SSE_C_ALGORITHM;
    private static string SSE_C_KEY;
    private static string SSE_C_AES;
    [CompilerGeneratedAttribute]
private string <qrmk>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <chunkHeaders>k__BackingField;
    internal string qrmk { get; internal set; }
    internal Dictionary`2<string, string> chunkHeaders { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_qrmk();
    [CompilerGeneratedAttribute]
internal void set_qrmk(string value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_chunkHeaders();
    [CompilerGeneratedAttribute]
internal void set_chunkHeaders(Dictionary`2<string, string> value);
    private sealed virtual override HttpRequestMessage Snowflake.Data.Core.IRestRequest.ToRequestMessage(HttpMethod method);
}
internal class Snowflake.Data.Core.Session.ConnectionCacheManager : object {
    private SessionPool _sessionPool;
    public sealed virtual SFSession GetSession(string connectionString, SecureString password);
    public sealed virtual Task`1<SFSession> GetSessionAsync(string connectionString, SecureString password, CancellationToken cancellationToken);
    public sealed virtual bool AddSession(SFSession session);
    public sealed virtual void ClearAllPools();
    public sealed virtual void SetMaxPoolSize(int maxPoolSize);
    public sealed virtual int GetMaxPoolSize();
    public sealed virtual void SetTimeout(long connectionTimeout);
    public sealed virtual long GetTimeout();
    public sealed virtual int GetCurrentPoolSize();
    public sealed virtual bool SetPooling(bool poolingEnabled);
    public sealed virtual bool GetPooling();
}
internal interface Snowflake.Data.Core.Session.IConnectionManager {
    public abstract virtual SFSession GetSession(string connectionString, SecureString password);
    public abstract virtual Task`1<SFSession> GetSessionAsync(string connectionString, SecureString password, CancellationToken cancellationToken);
    public abstract virtual bool AddSession(SFSession session);
    public abstract virtual void ClearAllPools();
    public abstract virtual void SetMaxPoolSize(int maxPoolSize);
    public abstract virtual int GetMaxPoolSize();
    public abstract virtual void SetTimeout(long connectionTimeout);
    public abstract virtual long GetTimeout();
    public abstract virtual int GetCurrentPoolSize();
    public abstract virtual bool SetPooling(bool poolingEnabled);
    public abstract virtual bool GetPooling();
}
internal class Snowflake.Data.Core.Session.SessionPool : object {
    private static SFLogger s_logger;
    private static object s_sessionPoolLock;
    private List`1<SFSession> _sessions;
    private int _maxPoolSize;
    private long _timeout;
    private static int MaxPoolSize;
    private static long Timeout;
    private bool _pooling;
    private static SessionPool();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void CleanExpiredSessions();
    internal SFSession GetSession(string connStr, SecureString password);
    internal Task`1<SFSession> GetSessionAsync(string connStr, SecureString password, CancellationToken cancellationToken);
    private SFSession GetIdleSession(string connStr);
    private SFSession NewSession(string connectionString, SecureString password);
    private Task`1<SFSession> NewSessionAsync(string connectionString, SecureString password, CancellationToken cancellationToken);
    internal bool AddSession(SFSession session);
    internal void ClearAllPools();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.Session.SessionPool/<ClearAllPoolsAsync>d__19")]
internal void ClearAllPoolsAsync();
    public void SetMaxPoolSize(int size);
    public int GetMaxPoolSize();
    public void SetTimeout(long time);
    public long GetTimeout();
    public int GetCurrentPoolSize();
    public bool SetPooling(bool isEnable);
    public bool GetPooling();
}
internal class Snowflake.Data.Core.SessionInfo : object {
    [CompilerGeneratedAttribute]
private string <databaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <schemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <warehouseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <roleName>k__BackingField;
    [JsonPropertyAttribute]
internal string databaseName { get; internal set; }
    [JsonPropertyAttribute]
internal string schemaName { get; internal set; }
    [JsonPropertyAttribute]
internal string warehouseName { get; internal set; }
    [JsonPropertyAttribute]
internal string roleName { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_databaseName();
    [CompilerGeneratedAttribute]
internal void set_databaseName(string value);
    [CompilerGeneratedAttribute]
internal string get_schemaName();
    [CompilerGeneratedAttribute]
internal void set_schemaName(string value);
    [CompilerGeneratedAttribute]
internal string get_warehouseName();
    [CompilerGeneratedAttribute]
internal void set_warehouseName(string value);
    [CompilerGeneratedAttribute]
internal string get_roleName();
    [CompilerGeneratedAttribute]
internal void set_roleName(string value);
}
internal abstract class Snowflake.Data.Core.SFBaseResultSet : object {
    internal SFStatement sfStatement;
    internal SFResultSetMetaData sfResultSetMetaData;
    internal int columnCount;
    internal bool isClosed;
    internal string queryId;
    internal ResultFormat ResultFormat { get; }
    internal abstract virtual ResultFormat get_ResultFormat();
    internal abstract virtual bool Next();
    internal abstract virtual Task`1<bool> NextAsync();
    internal abstract virtual bool NextResult();
    internal abstract virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    internal abstract virtual bool HasRows();
    internal abstract virtual bool Rewind();
    internal abstract virtual bool IsDBNull(int ordinal);
    internal abstract virtual object GetValue(int ordinal);
    internal abstract virtual bool GetBoolean(int ordinal);
    internal abstract virtual byte GetByte(int ordinal);
    internal abstract virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    internal abstract virtual char GetChar(int ordinal);
    internal abstract virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    internal abstract virtual DateTime GetDateTime(int ordinal);
    internal abstract virtual TimeSpan GetTimeSpan(int ordinal);
    internal abstract virtual decimal GetDecimal(int ordinal);
    internal abstract virtual double GetDouble(int ordinal);
    internal abstract virtual float GetFloat(int ordinal);
    internal abstract virtual Guid GetGuid(int ordinal);
    internal abstract virtual short GetInt16(int ordinal);
    internal abstract virtual int GetInt32(int ordinal);
    internal abstract virtual long GetInt64(int ordinal);
    internal abstract virtual string GetString(int ordinal);
    internal void close();
    internal void ThrowIfClosed();
    internal void ThrowIfOutOfBounds(int ordinal);
}
internal class Snowflake.Data.Core.SFBindUploader : object {
    private static string STAGE_NAME;
    private static string CREATE_STAGE_STMT;
    private static string PUT_STATEMENT;
    private static string ACCOUNT_GCP;
    private static string ACCOUNT_AZURE;
    private static string ACCOUNT_LOCAL;
    private static long inputStreamBufferSize;
    private int fileCount;
    private SFSession session;
    private string requestId;
    private SFLogger logger;
    private string stagePath;
    public SFBindUploader(SFSession session, string requestId);
    private static SFBindUploader();
    public string getStagePath();
    public void Upload(Dictionary`2<string, BindingDTO> bindings);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFBindUploader/<UploadAsync>d__15")]
internal Task UploadAsync(Dictionary`2<string, BindingDTO> bindings, CancellationToken cancellationToken);
    private void CreateDataRows(List`1& dataRows, Dictionary`2<string, BindingDTO> bindings);
    private void UploadStream(MemoryStream& stream, string destFileName);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFBindUploader/<UploadStreamAsync>d__18")]
internal Task UploadStreamAsync(MemoryStream stream, string destFileName, CancellationToken cancellationToken);
    private string GetCSVData(string sType, string sValue);
    private void CreateStage();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFBindUploader/<CreateStageAsync>d__21")]
internal Task CreateStageAsync(CancellationToken cancellationToken);
}
[ObsoleteAttribute("SFBlockingChunkDownloader is deprecated", "False")]
internal class Snowflake.Data.Core.SFBlockingChunkDownloader : object {
    private static SFLogger logger;
    private List`1<SFResultChunk> chunks;
    private string qrmk;
    private int nextChunkToDownloadIndex;
    private CancellationToken externalCancellationToken;
    private int prefetchThreads;
    private IRestRequester _RestRequester;
    private Dictionary`2<string, string> chunkHeaders;
    private SFBaseResultSet ResultSet;
    private BlockingCollection`1<Task`1<BaseResultChunk>> _downloadTasks;
    public SFBlockingChunkDownloader(int colCount, List`1<ExecResponseChunk> chunkInfos, string qrmk, Dictionary`2<string, string> chunkHeaders, CancellationToken cancellationToken, SFBaseResultSet ResultSet);
    private static SFBlockingChunkDownloader();
    private int GetPrefetchThreads(SFBaseResultSet resultSet);
    private void FillDownloads();
    public sealed virtual Task`1<BaseResultChunk> GetNextChunkAsync();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFBlockingChunkDownloader/<DownloadChunkAsync>d__14")]
private Task`1<BaseResultChunk> DownloadChunkAsync(DownloadContext downloadContext);
    private void ParseStreamIntoChunk(Stream content, BaseResultChunk resultChunk);
    [CompilerGeneratedAttribute]
private void <FillDownloads>b__12_0();
}
internal class Snowflake.Data.Core.SFBlockingChunkDownloaderV3 : object {
    private static SFLogger logger;
    private List`1<BaseResultChunk> chunkDatas;
    private string qrmk;
    private int nextChunkToDownloadIndex;
    private int nextChunkToConsumeIndex;
    private CancellationToken externalCancellationToken;
    private int prefetchSlot;
    private IRestRequester _RestRequester;
    private SFSessionProperties sessionProperies;
    private Dictionary`2<string, string> chunkHeaders;
    private SFBaseResultSet ResultSet;
    private List`1<ExecResponseChunk> chunkInfos;
    private List`1<Task`1<BaseResultChunk>> taskQueues;
    public SFBlockingChunkDownloaderV3(int colCount, List`1<ExecResponseChunk> chunkInfos, string qrmk, Dictionary`2<string, string> chunkHeaders, CancellationToken cancellationToken, SFBaseResultSet ResultSet, ResultFormat resultFormat);
    private static SFBlockingChunkDownloaderV3();
    private int GetPrefetchThreads(SFBaseResultSet resultSet);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFBlockingChunkDownloaderV3/<GetNextChunkAsync>d__15")]
public sealed virtual Task`1<BaseResultChunk> GetNextChunkAsync();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFBlockingChunkDownloaderV3/<DownloadChunkAsync>d__16")]
private Task`1<BaseResultChunk> DownloadChunkAsync(DownloadContextV3 downloadContext);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFBlockingChunkDownloaderV3/<ParseStreamIntoChunk>d__17")]
private Task ParseStreamIntoChunk(Stream content, BaseResultChunk resultChunk);
}
[ObsoleteAttribute("SFChunkDownloaderV2 is deprecated", "False")]
internal class Snowflake.Data.Core.SFChunkDownloaderV2 : object {
    private static SFLogger logger;
    private List`1<SFResultChunk> chunks;
    private string qrmk;
    private CancellationToken externalCancellationToken;
    private static int prefetchSlot;
    private IRestRequester _RestRequester;
    private Dictionary`2<string, string> chunkHeaders;
    private BlockingCollection`1<Lazy`1<Task`1<BaseResultChunk>>> _downloadTasks;
    private ConcurrentQueue`1<Lazy`1<Task`1<BaseResultChunk>>> _downloadQueue;
    public SFChunkDownloaderV2(int colCount, List`1<ExecResponseChunk> chunkInfos, string qrmk, Dictionary`2<string, string> chunkHeaders, CancellationToken cancellationToken, IRestRequester restRequester);
    private static SFChunkDownloaderV2();
    private void RunDownloads();
    private void FillDownloads();
    public sealed virtual Task`1<BaseResultChunk> GetNextChunkAsync();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFChunkDownloaderV2/<DownloadChunkAsync>d__13")]
private Task`1<BaseResultChunk> DownloadChunkAsync(DownloadContextV2 downloadContext);
    private static void ParseStreamIntoChunk(Stream content, BaseResultChunk resultChunk);
}
internal static class Snowflake.Data.Core.SFDataConverter : object {
    internal static DateTime UnixEpoch;
    private static Int32[] powersOf10;
    private static SFDataConverter();
    internal static object ConvertToCSharpVal(UTF8Buffer srcVal, SFDataType srcType, Type destType);
    private static object ConvertToTimeSpan(UTF8Buffer srcVal, SFDataType srcType);
    private static DateTime ConvertToDateTime(UTF8Buffer srcVal, SFDataType srcType);
    private static DateTimeOffset ConvertToDateTimeOffset(UTF8Buffer srcVal, SFDataType srcType);
    private static long GetTicksFromSecondAndNanosecond(UTF8Buffer srcVal);
    internal static Tuple`2<string, string> csharpTypeValToSfTypeVal(DbType srcType, object srcVal);
    private static string BytesToHex(Byte[] bytes);
    private static Byte[] HexToBytes(string hex);
    internal static string csharpValToSfVal(SFDataType sfDataType, object srcVal);
    internal static string toDateString(DateTime date, string formatter);
}
public enum Snowflake.Data.Core.SFDataType : Enum {
    public int value__;
    public static SFDataType None;
    public static SFDataType FIXED;
    public static SFDataType REAL;
    public static SFDataType TEXT;
    public static SFDataType DATE;
    public static SFDataType VARIANT;
    public static SFDataType TIMESTAMP_LTZ;
    public static SFDataType TIMESTAMP_NTZ;
    public static SFDataType TIMESTAMP_TZ;
    public static SFDataType OBJECT;
    public static SFDataType BINARY;
    public static SFDataType TIME;
    public static SFDataType BOOLEAN;
    public static SFDataType ARRAY;
}
internal class Snowflake.Data.Core.SFEnvironment : object {
    [CompilerGeneratedAttribute]
private static string <DriverName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DriverVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private static LoginRequestClientEnv <ClientEnv>k__BackingField;
    internal static string DriverName { get; internal set; }
    internal static string DriverVersion { get; internal set; }
    internal static LoginRequestClientEnv ClientEnv { get; private set; }
    private static SFEnvironment();
    [CompilerGeneratedAttribute]
internal static string get_DriverName();
    [CompilerGeneratedAttribute]
internal static void set_DriverName(string value);
    [CompilerGeneratedAttribute]
internal static string get_DriverVersion();
    [CompilerGeneratedAttribute]
internal static void set_DriverVersion(string value);
    [CompilerGeneratedAttribute]
internal static LoginRequestClientEnv get_ClientEnv();
    [CompilerGeneratedAttribute]
private static void set_ClientEnv(LoginRequestClientEnv value);
}
public enum Snowflake.Data.Core.SFError : Enum {
    public int value__;
    [SFErrorAttr]
public static SFError INTERNAL_ERROR;
    [SFErrorAttr]
public static SFError COLUMN_INDEX_OUT_OF_BOUND;
    [SFErrorAttr]
public static SFError INVALID_DATA_CONVERSION;
    [SFErrorAttr]
public static SFError STATEMENT_ALREADY_RUNNING_QUERY;
    [SFErrorAttr]
public static SFError QUERY_CANCELLED;
    [SFErrorAttr]
public static SFError MISSING_CONNECTION_PROPERTY;
    [SFErrorAttr]
public static SFError REQUEST_TIMEOUT;
    [SFErrorAttr]
public static SFError INVALID_CONNECTION_STRING;
    [SFErrorAttr]
public static SFError UNSUPPORTED_FEATURE;
    [SFErrorAttr]
public static SFError DATA_READER_ALREADY_CLOSED;
    [SFErrorAttr]
public static SFError UNKNOWN_AUTHENTICATOR;
    [SFErrorAttr]
public static SFError UNSUPPORTED_PLATFORM;
    [SFErrorAttr]
public static SFError IDP_SSO_TOKEN_URL_MISMATCH;
    [SFErrorAttr]
public static SFError IDP_SAML_POSTBACK_NOTFOUND;
    [SFErrorAttr]
public static SFError IDP_SAML_POSTBACK_INVALID;
    [SFErrorAttr]
public static SFError BROWSER_RESPONSE_WRONG_METHOD;
    [SFErrorAttr]
public static SFError BROWSER_RESPONSE_INVALID_PREFIX;
    [SFErrorAttr]
public static SFError JWT_ERROR_READING_PK;
    [SFErrorAttr]
public static SFError UNSUPPORTED_DOTNET_TYPE;
    [SFErrorAttr]
public static SFError UNSUPPORTED_SNOWFLAKE_TYPE_FOR_PARAM;
    [SFErrorAttr]
public static SFError INVALID_CONNECTION_PARAMETER_VALUE;
    [SFErrorAttr]
public static SFError INVALID_BROWSER_URL;
    [SFErrorAttr]
public static SFError BROWSER_RESPONSE_TIMEOUT;
}
internal class Snowflake.Data.Core.SFErrorAttr : Attribute {
    [CompilerGeneratedAttribute]
private int <errorCode>k__BackingField;
    public int errorCode { get; public set; }
    [CompilerGeneratedAttribute]
public int get_errorCode();
    [CompilerGeneratedAttribute]
public void set_errorCode(int value);
}
internal class Snowflake.Data.Core.SFFileTransferAgent : object {
    private static SFLogger Logger;
    private static string COMPRESSION_AUTO_DETECT;
    private string Query;
    private SFSession Session;
    private CancellationToken externalCancellationToken;
    private CommandTypes CommandType;
    private PutGetResponseData TransferMetadata;
    private string HomePath;
    private List`1<SFFileMetadata> FilesMetas;
    private List`1<SFFileMetadata> SmallFilesMetas;
    private List`1<SFFileMetadata> LargeFilesMetas;
    private List`1<SFFileMetadata> ResultsMetas;
    private List`1<PutGetEncryptionMaterial> EncryptionMaterials;
    private int INJECT_WAIT_IN_PUT;
    private static string LOCAL_FS;
    private static string STREAM_FILE_NAME;
    private MemoryStream memoryStream;
    private string streamDestFileName;
    private string destStagePath;
    private static Mutex RenewClientMutex;
    private long DATA_SIZE_THRESHOLD;
    public SFFileTransferAgent(string query, SFSession session, PutGetResponseData responseData, CancellationToken cancellationToken);
    public SFFileTransferAgent(string query, SFSession session, PutGetResponseData responseData, MemoryStream& inputStream, string filename, string stagePath, CancellationToken cancellationToken);
    private static SFFileTransferAgent();
    public void execute();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFFileTransferAgent/<executeAsync>d__24")]
public Task executeAsync(CancellationToken cancellationToken);
    public SFResultSet result();
    private void upload();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFFileTransferAgent/<uploadAsync>d__27")]
private Task uploadAsync(CancellationToken cancellationToken);
    private void download();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFFileTransferAgent/<downloadAsync>d__29")]
private Task downloadAsync(CancellationToken cancellationToken);
    private void updatePresignedUrl();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFFileTransferAgent/<updatePresignedUrlAsync>d__31")]
internal Task updatePresignedUrlAsync(CancellationToken cancellationToken);
    private string getFilePathFromPutCommand(string query);
    private void initEncryptionMaterial();
    private void initFileMetadata(List`1<string> files);
    private int GetFileTransferMaxBytesInMemory();
    private List`1<string> expandFileNames(string location);
    private static IEnumerable`1<string> ExpandDirectories(string directoryPath);
    private static string ExpandHomeDirectoryIfNeeded(string directoryPath);
    private void compressFileWithGzip(SFFileMetadata fileMetadata);
    private void getDigestAndSizeForFile(SFFileMetadata fileMetadata);
    private ISFRemoteStorageClient renewExpiredClient(ProxyCredentials proxyCredentials);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFFileTransferAgent/<renewExpiredClientAsync>d__42")]
private Task`1<ISFRemoteStorageClient> renewExpiredClientAsync(CancellationToken cancellationToken);
    private void UploadFilesInSequential(SFFileMetadata fileMetadata);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFFileTransferAgent/<UploadFilesInSequentialAsync>d__44")]
private Task UploadFilesInSequentialAsync(SFFileMetadata fileMetadata, CancellationToken cancellationToken);
    private void DownloadFilesInSequential(SFFileMetadata fileMetadata);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFFileTransferAgent/<DownloadFilesInSequentialAsync>d__46")]
private Task DownloadFilesInSequentialAsync(SFFileMetadata fileMetadata, CancellationToken cancellationToken);
    private void UploadFilesInParallel(List`1<SFFileMetadata> filesMetadata, int parallel);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFFileTransferAgent/<UploadFilesInParallelAsync>d__48")]
private Task UploadFilesInParallelAsync(List`1<SFFileMetadata> filesMetadata, int parallel, CancellationToken cancellationToken);
    private void DownloadFilesInParallel(List`1<SFFileMetadata> filesMetadata, int parallel);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFFileTransferAgent/<DownloadFilesInParallelAsync>d__50")]
private Task DownloadFilesInParallelAsync(List`1<SFFileMetadata> filesMetadata, int parallel, CancellationToken cancellationToken);
    private SFFileMetadata UploadSingleFile(SFFileMetadata fileMetadata);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFFileTransferAgent/<UploadSingleFileAsync>d__52")]
private Task`1<SFFileMetadata> UploadSingleFileAsync(SFFileMetadata fileMetadata, CancellationToken cancellationToken);
    private SFFileMetadata DownloadSingleFile(SFFileMetadata fileMetadata);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFFileTransferAgent/<DownloadSingleFileAsync>d__54")]
private Task`1<SFFileMetadata> DownloadSingleFileAsync(SFFileMetadata fileMetadata, CancellationToken cancellationToken);
    public string GetTemporaryDirectory();
    public StorageClientType GetStorageClientType(PutGetStageInfo stageInfo);
    private void initFileMetadataForUpload();
    private static bool IsDirectory(string path);
    private static bool ContainsWildcard(string str);
}
internal class Snowflake.Data.Core.SFMultiStatementsResultSet : SFBaseResultSet {
    private static SFLogger Logger;
    private String[] resultIds;
    private SFBaseResultSet curResultSet;
    private int curResultIndex;
    internal ResultFormat ResultFormat { get; }
    public SFMultiStatementsResultSet(QueryExecResponseData responseData, SFStatement sfStatement, CancellationToken cancellationToken);
    private static SFMultiStatementsResultSet();
    internal virtual ResultFormat get_ResultFormat();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFMultiStatementsResultSet/<NextAsync>d__7")]
internal virtual Task`1<bool> NextAsync();
    internal virtual bool Next();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFMultiStatementsResultSet/<NextResultAsync>d__9")]
internal virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    internal virtual bool NextResult();
    internal virtual bool HasRows();
    internal virtual bool Rewind();
    private void updateSessionStatus(QueryExecResponseData responseData);
    private void updateResultMetadata();
    internal virtual bool IsDBNull(int ordinal);
    internal virtual object GetValue(int ordinal);
    internal virtual bool GetBoolean(int ordinal);
    internal virtual byte GetByte(int ordinal);
    internal virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    internal virtual char GetChar(int ordinal);
    internal virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    internal virtual DateTime GetDateTime(int ordinal);
    internal virtual TimeSpan GetTimeSpan(int ordinal);
    internal virtual decimal GetDecimal(int ordinal);
    internal virtual double GetDouble(int ordinal);
    internal virtual float GetFloat(int ordinal);
    internal virtual Guid GetGuid(int ordinal);
    internal virtual short GetInt16(int ordinal);
    internal virtual int GetInt32(int ordinal);
    internal virtual long GetInt64(int ordinal);
    internal virtual string GetString(int ordinal);
}
internal class Snowflake.Data.Core.SFRestRequest : BaseRestRequest {
    private static MediaTypeWithQualityHeaderValue applicationSnowflake;
    private static MediaTypeWithQualityHeaderValue applicationJson;
    private static string SF_AUTHORIZATION_HEADER;
    private static string SF_SERVICE_NAME_HEADER;
    private static string ClientAppId;
    private static string ClientAppVersion;
    [CompilerGeneratedAttribute]
private object <jsonBody>k__BackingField;
    [CompilerGeneratedAttribute]
private string <authorizationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <serviceName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <isPutGet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <_isLogin>k__BackingField;
    internal object jsonBody { get; internal set; }
    internal string authorizationToken { get; internal set; }
    internal string serviceName { get; internal set; }
    internal bool isPutGet { get; internal set; }
    internal bool _isLogin { get; internal set; }
    private static SFRestRequest();
    [CompilerGeneratedAttribute]
internal object get_jsonBody();
    [CompilerGeneratedAttribute]
internal void set_jsonBody(object value);
    [CompilerGeneratedAttribute]
internal string get_authorizationToken();
    [CompilerGeneratedAttribute]
internal void set_authorizationToken(string value);
    [CompilerGeneratedAttribute]
internal string get_serviceName();
    [CompilerGeneratedAttribute]
internal void set_serviceName(string value);
    [CompilerGeneratedAttribute]
internal bool get_isPutGet();
    [CompilerGeneratedAttribute]
internal void set_isPutGet(bool value);
    [CompilerGeneratedAttribute]
internal bool get__isLogin();
    [CompilerGeneratedAttribute]
internal void set__isLogin(bool value);
    public virtual string ToString();
    private sealed virtual override HttpRequestMessage Snowflake.Data.Core.IRestRequest.ToRequestMessage(HttpMethod method);
}
internal class Snowflake.Data.Core.SFResultChunk : BaseResultChunk {
    private int _currentRowIndex;
    internal ResultFormat ResultFormat { get; }
    public SFResultChunk(String[0...,0...] rowSet);
    public SFResultChunk(string url, int rowCount, int columnCount, int index);
    internal virtual ResultFormat get_ResultFormat();
    [ObsoleteAttribute("ExtractCell with rowIndex is deprecated", "False")]
public virtual UTF8Buffer ExtractCell(int rowIndex, int columnIndex);
    public virtual UTF8Buffer ExtractCell(int columnIndex);
    internal virtual bool Next();
    internal virtual bool Rewind();
    internal virtual void Reset(ExecResponseChunk chunkInfo, int chunkIndex);
}
internal class Snowflake.Data.Core.SFResultSet : SFBaseResultSet {
    private static SFLogger s_logger;
    private int _totalChunkCount;
    private IChunkDownloader _chunkDownloader;
    private BaseResultChunk _currentChunk;
    internal ResultFormat ResultFormat { get; }
    public SFResultSet(QueryExecResponseData responseData, SFStatement sfStatement, CancellationToken cancellationToken);
    public SFResultSet(PutGetResponseData responseData, SFStatement sfStatement, CancellationToken cancellationToken);
    private static SFResultSet();
    internal virtual ResultFormat get_ResultFormat();
    public void InitializePutGetRowType(List`1<ExecResponseRowType> rowType);
    internal void ResetChunkInfo(BaseResultChunk nextChunk);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFResultSet/<NextAsync>d__11")]
internal virtual Task`1<bool> NextAsync();
    internal virtual bool Next();
    internal virtual bool NextResult();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFResultSet/<NextResultAsync>d__14")]
internal virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    internal virtual bool HasRows();
    internal virtual bool Rewind();
    internal UTF8Buffer GetObjectInternal(int ordinal);
    private void UpdateSessionStatus(QueryExecResponseData responseData);
    internal virtual bool IsDBNull(int ordinal);
    internal virtual bool GetBoolean(int ordinal);
    internal virtual byte GetByte(int ordinal);
    internal virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    internal virtual char GetChar(int ordinal);
    internal virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    internal virtual DateTime GetDateTime(int ordinal);
    internal virtual TimeSpan GetTimeSpan(int ordinal);
    internal virtual decimal GetDecimal(int ordinal);
    internal virtual double GetDouble(int ordinal);
    internal virtual float GetFloat(int ordinal);
    internal virtual Guid GetGuid(int ordinal);
    internal virtual short GetInt16(int ordinal);
    internal virtual int GetInt32(int ordinal);
    internal virtual long GetInt64(int ordinal);
    internal virtual string GetString(int ordinal);
    internal virtual object GetValue(int ordinal);
    private T GetValue(int ordinal);
    private long ReadSubset(int ordinal, long dataOffset, T[] buffer, int bufferOffset, int length);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFResultSet/<<Next>b__12_0>d")]
[CompilerGeneratedAttribute]
private Task`1<BaseResultChunk> <Next>b__12_0();
}
internal class Snowflake.Data.Core.SFResultSetMetaData : object {
    private static SFLogger logger;
    private int columnCount;
    internal string dateOutputFormat;
    internal string timeOutputFormat;
    internal string timestampeNTZOutputFormat;
    internal string timestampeLTZOutputFormat;
    internal string timestampeTZOutputFormat;
    internal List`1<ExecResponseRowType> rowTypes;
    internal SFStatementType statementType;
    internal List`1<Tuple`2<SFDataType, Type>> columnTypes;
    private Dictionary`2<string, int> columnNameToIndexCache;
    internal SFResultSetMetaData(QueryExecResponseData queryExecResponseData, SFSession session);
    internal SFResultSetMetaData(PutGetResponseData putGetResponseData);
    private static SFResultSetMetaData();
    private List`1<Tuple`2<SFDataType, Type>> InitColumnTypes();
    internal int GetColumnIndexByName(string targetColumnName);
    internal SFDataType GetColumnTypeByIndex(int targetIndex);
    internal Tuple`2<SFDataType, Type> GetTypesByIndex(int targetIndex);
    internal long GetScaleByIndex(int targetIndex);
    private SFDataType GetSFDataType(string type);
    private Type GetNativeTypeForColumn(SFDataType sfType, ExecResponseRowType col);
    internal Type GetCSharpTypeByIndex(int targetIndex);
    internal string GetColumnNameByIndex(int targetIndex);
    private SFStatementType FindStatementTypeById(long id);
}
internal class Snowflake.Data.Core.SFReusableChunk : BaseResultChunk {
    private BlockResultData data;
    private int _currentRowIndex;
    internal ResultFormat ResultFormat { get; }
    internal SFReusableChunk(int columnCount);
    internal virtual ResultFormat get_ResultFormat();
    internal virtual void Reset(ExecResponseChunk chunkInfo, int chunkIndex);
    internal virtual void ResetForRetry();
    [ObsoleteAttribute("ExtractCell with rowIndex is deprecated", "False")]
public virtual UTF8Buffer ExtractCell(int rowIndex, int columnIndex);
    public virtual UTF8Buffer ExtractCell(int columnIndex);
    public void AddCell(string val);
    public void AddCell(Byte[] bytes, int length);
    internal virtual bool Next();
    internal virtual bool Rewind();
}
public class Snowflake.Data.Core.SFSession : object {
    public static int SF_SESSION_EXPIRED_CODE;
    private static SFLogger logger;
    private static Regex APPLICATION_REGEX;
    private static string SF_AUTHORIZATION_BASIC;
    private static string SF_AUTHORIZATION_SNOWFLAKE_FMT;
    private static int _defaultQueryContextCacheSize;
    internal string sessionId;
    internal string sessionToken;
    internal string masterToken;
    [CompilerGeneratedAttribute]
private IRestRequester <restRequester>k__BackingField;
    private IAuthenticator authenticator;
    internal SFSessionProperties properties;
    internal string database;
    internal string schema;
    internal string serverVersion;
    internal TimeSpan connectionTimeout;
    internal bool InsecureMode;
    internal bool isHeartBeatEnabled;
    private HttpClient _HttpClient;
    private string arrayBindStage;
    private int arrayBindStageThreshold;
    internal int masterValidityInSeconds;
    internal static Extractor propertiesExtractor;
    private EasyLoggingStarter _easyLoggingStarter;
    private long _startTime;
    internal string connStr;
    private QueryContextCache _queryContextCache;
    private int _queryContextCacheSize;
    private bool _disableQueryContextCache;
    internal Dictionary`2<SFSessionParameter, object> ParameterMap;
    internal IRestRequester restRequester { get; private set; }
    internal SFSession(string connectionString, SecureString password);
    internal SFSession(string connectionString, SecureString password, EasyLoggingStarter easyLoggingStarter);
    internal SFSession(string connectionString, SecureString password, IMockRestRequester restRequester);
    private static SFSession();
    [CompilerGeneratedAttribute]
internal IRestRequester get_restRequester();
    [CompilerGeneratedAttribute]
private void set_restRequester(IRestRequester value);
    internal void ProcessLoginResponse(LoginResponse authnResponse);
    internal Uri BuildLoginUrl();
    private void ValidateApplicationName(SFSessionProperties properties);
    internal Uri BuildUri(string path, Dictionary`2<string, string> queryParams);
    internal void Open();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFSession/<OpenAsync>d__41")]
internal Task OpenAsync(CancellationToken cancellationToken);
    internal void close();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFSession/<CloseAsync>d__43")]
internal Task CloseAsync(CancellationToken cancellationToken);
    internal bool IsEstablished();
    internal void renewSession();
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFSession/<renewSessionAsync>d__46")]
internal Task renewSessionAsync(CancellationToken cancellationToken);
    internal SFRestRequest getRenewSessionRequest();
    internal SFRestRequest BuildTimeoutRestRequest(Uri uri, object body);
    internal void UpdateSessionParameterMap(List`1<NameValueParameter> parameterList);
    internal void UpdateQueryContextCache(ResponseQueryContext queryContext);
    internal RequestQueryContext GetQueryContextRequest();
    internal void UpdateDatabaseAndSchema(string databaseName, string schemaName);
    internal void startHeartBeatForThisSession();
    internal void stopHeartBeatForThisSession();
    public string GetArrayBindStage();
    public void SetArrayBindStage(string arrayBindStage);
    public int GetArrayBindStageThreshold();
    public void SetArrayBindStageThreshold(int arrayBindStageThreshold);
    internal void heartbeat();
    internal bool IsNotOpen();
    internal bool IsExpired(long timeoutInSeconds, long utcTimeInSeconds);
}
internal class Snowflake.Data.Core.SFSessionHttpClientProperties : object {
    internal static int s_maxHttpRetriesDefault;
    internal static int s_retryTimeoutDefault;
    private static SFLogger logger;
    internal bool validateDefaultParameters;
    internal bool clientSessionKeepAlive;
    internal int timeoutInSec;
    internal bool insecureMode;
    internal bool disableRetry;
    internal bool forceRetryOn404;
    internal int retryTimeout;
    internal int maxHttpRetries;
    internal bool includeRetryReason;
    internal SFSessionHttpClientProxyProperties proxyProperties;
    private static SFSessionHttpClientProperties();
    internal void CheckPropertiesAreValid();
    internal TimeSpan TimeoutDuration();
    internal HttpClientConfig BuildHttpClientConfig();
    internal Dictionary`2<SFSessionParameter, object> ToParameterMap();
}
internal class Snowflake.Data.Core.SFSessionHttpClientProxyProperties : object {
    internal string proxyHost;
    internal string proxyPort;
    internal string nonProxyHosts;
    internal string proxyPassword;
    internal string proxyUser;
}
internal enum Snowflake.Data.Core.SFSessionParameter : Enum {
    public int value__;
    public static SFSessionParameter CLIENT_PREFETCH_THREADS;
    public static SFSessionParameter SERVICE_NAME;
    public static SFSessionParameter CLIENT_VALIDATE_DEFAULT_PARAMETERS;
    public static SFSessionParameter CLIENT_STAGE_ARRAY_BINDING_THRESHOLD;
    public static SFSessionParameter CLIENT_SESSION_KEEP_ALIVE;
    public static SFSessionParameter QUERY_CONTEXT_CACHE_SIZE;
    public static SFSessionParameter DATE_OUTPUT_FORMAT;
    public static SFSessionParameter TIME_OUTPUT_FORMAT;
}
internal class Snowflake.Data.Core.SFSessionProperties : Dictionary`2<SFSessionProperty, string> {
    private static SFLogger logger;
    private static List`1<SFSessionProperty> secretProps;
    private static string AccountRegexString;
    private static SFSessionProperties();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal static SFSessionProperties parseConnectionString(string connectionString, SecureString password);
    private static void ValidateAccountDomain(SFSessionProperties properties);
    private static void checkSessionProperties(SFSessionProperties properties);
    private static void ValidateFileTransferMaxBytesInMemoryProperty(SFSessionProperties properties);
    private static bool IsRequired(SFSessionProperty sessionProperty, SFSessionProperties properties);
    private static bool ParseAllowUnderscoresInHost(SFSessionProperties properties);
}
internal enum Snowflake.Data.Core.SFSessionProperty : Enum {
    public int value__;
    [SFSessionPropertyAttr]
public static SFSessionProperty ACCOUNT;
    [SFSessionPropertyAttr]
public static SFSessionProperty DB;
    [SFSessionPropertyAttr]
public static SFSessionProperty HOST;
    [SFSessionPropertyAttr]
public static SFSessionProperty PASSWORD;
    [SFSessionPropertyAttr]
public static SFSessionProperty PORT;
    [SFSessionPropertyAttr]
public static SFSessionProperty ROLE;
    [SFSessionPropertyAttr]
public static SFSessionProperty SCHEMA;
    [SFSessionPropertyAttr]
public static SFSessionProperty SCHEME;
    [SFSessionPropertyAttr]
public static SFSessionProperty USER;
    [SFSessionPropertyAttr]
public static SFSessionProperty WAREHOUSE;
    [SFSessionPropertyAttr]
public static SFSessionProperty CONNECTION_TIMEOUT;
    [SFSessionPropertyAttr]
public static SFSessionProperty AUTHENTICATOR;
    [SFSessionPropertyAttr]
public static SFSessionProperty VALIDATE_DEFAULT_PARAMETERS;
    [SFSessionPropertyAttr]
public static SFSessionProperty PRIVATE_KEY_FILE;
    [SFSessionPropertyAttr]
public static SFSessionProperty PRIVATE_KEY_PWD;
    [SFSessionPropertyAttr]
public static SFSessionProperty PRIVATE_KEY;
    [SFSessionPropertyAttr]
public static SFSessionProperty TOKEN;
    [SFSessionPropertyAttr]
public static SFSessionProperty INSECUREMODE;
    [SFSessionPropertyAttr]
public static SFSessionProperty USEPROXY;
    [SFSessionPropertyAttr]
public static SFSessionProperty PROXYHOST;
    [SFSessionPropertyAttr]
public static SFSessionProperty PROXYPORT;
    [SFSessionPropertyAttr]
public static SFSessionProperty PROXYUSER;
    [SFSessionPropertyAttr]
public static SFSessionProperty PROXYPASSWORD;
    [SFSessionPropertyAttr]
public static SFSessionProperty NONPROXYHOSTS;
    [SFSessionPropertyAttr]
public static SFSessionProperty APPLICATION;
    [SFSessionPropertyAttr]
public static SFSessionProperty DISABLERETRY;
    [SFSessionPropertyAttr]
public static SFSessionProperty FORCERETRYON404;
    [SFSessionPropertyAttr]
public static SFSessionProperty CLIENT_SESSION_KEEP_ALIVE;
    [SFSessionPropertyAttr]
public static SFSessionProperty GCS_USE_DOWNSCOPED_CREDENTIAL;
    [SFSessionPropertyAttr]
public static SFSessionProperty FORCEPARSEERROR;
    [SFSessionPropertyAttr]
public static SFSessionProperty BROWSER_RESPONSE_TIMEOUT;
    [SFSessionPropertyAttr]
public static SFSessionProperty RETRY_TIMEOUT;
    [SFSessionPropertyAttr]
public static SFSessionProperty MAXHTTPRETRIES;
    [SFSessionPropertyAttr]
public static SFSessionProperty FILE_TRANSFER_MEMORY_THRESHOLD;
    [SFSessionPropertyAttr]
public static SFSessionProperty INCLUDERETRYREASON;
    [SFSessionPropertyAttr]
public static SFSessionProperty DISABLEQUERYCONTEXTCACHE;
    [SFSessionPropertyAttr]
public static SFSessionProperty CLIENT_CONFIG_FILE;
    [SFSessionPropertyAttr]
public static SFSessionProperty ALLOWUNDERSCORESINHOST;
}
internal class Snowflake.Data.Core.SFSessionPropertyAttr : Attribute {
    [CompilerGeneratedAttribute]
private bool <required>k__BackingField;
    [CompilerGeneratedAttribute]
private string <defaultValue>k__BackingField;
    public bool required { get; public set; }
    public string defaultValue { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_required();
    [CompilerGeneratedAttribute]
public void set_required(bool value);
    [CompilerGeneratedAttribute]
public string get_defaultValue();
    [CompilerGeneratedAttribute]
public void set_defaultValue(string value);
}
internal class Snowflake.Data.Core.SFStatement : object {
    private static SFLogger logger;
    [CompilerGeneratedAttribute]
private SFSession <SfSession>k__BackingField;
    private static string SF_QUERY_CANCEL_PATH;
    private static string SF_QUERY_REQUEST_ID;
    private static string SF_AUTHORIZATION_SNOWFLAKE_FMT;
    private static string SF_QUERY_RESULT_PATH;
    private static string SF_PARAM_MULTI_STATEMENT_COUNT;
    private static int SF_QUERY_IN_PROGRESS;
    private static int SF_QUERY_IN_PROGRESS_ASYNC;
    private string _requestId;
    private object _requestIdLock;
    private IRestRequester _restRequester;
    private CancellationTokenSource _timeoutTokenSource;
    private CancellationTokenSource _linkedCancellationTokenSource;
    internal bool isPutGetQuery;
    private MemoryStream _uploadStream;
    private string _destFilename;
    private string _stagePath;
    private string _bindStage;
    private string _lastQueryId;
    internal SFSession SfSession { get; internal set; }
    internal SFStatement(SFSession session);
    private static SFStatement();
    [CompilerGeneratedAttribute]
internal SFSession get_SfSession();
    [CompilerGeneratedAttribute]
internal void set_SfSession(SFSession value);
    private void AssignQueryRequestId();
    private void ClearQueryRequestId();
    private SFRestRequest BuildQueryRequest(string sql, Dictionary`2<string, BindingDTO> bindings, bool describeOnly);
    private SFRestRequest BuildResultRequest(string resultPath);
    private SFRestRequest BuildResultRequestWithId(string resultId);
    private void CleanUpCancellationTokenSources();
    private SFBaseResultSet BuildResultSet(QueryExecResponse response, CancellationToken cancellationToken);
    private void SetTimeout(int timeout);
    private void registerQueryCancellationCallback(int timeout, CancellationToken externalCancellationToken);
    private bool RequestInProgress(BaseRestResponse r);
    private bool SessionExpired(BaseRestResponse r);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFStatement/<ExecuteAsync>d__35")]
internal Task`1<SFBaseResultSet> ExecuteAsync(int timeout, string sql, Dictionary`2<string, BindingDTO> bindings, bool describeOnly, CancellationToken cancellationToken);
    internal SFBaseResultSet Execute(int timeout, string sql, Dictionary`2<string, BindingDTO> bindings, bool describeOnly);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFStatement/<GetResultWithIdAsync>d__37")]
internal Task`1<SFBaseResultSet> GetResultWithIdAsync(string resultId, CancellationToken cancellationToken);
    internal SFBaseResultSet GetResultWithId(string resultId);
    private SFRestRequest BuildCancelQueryRequest();
    internal void Cancel();
    internal T ExecuteHelper(int timeout, string sql, Dictionary`2<string, BindingDTO> bindings, bool describeOnly);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFStatement/<ExecuteAsyncHelper>d__42`2")]
internal Task`1<T> ExecuteAsyncHelper(int timeout, string sql, Dictionary`2<string, BindingDTO> bindings, bool describeOnly, CancellationToken cancellationToken);
    private string TrimSql(string originalSql);
    private bool IsPutOrGetCommand(string query);
    private static int GetBindingCount(Dictionary`2<string, BindingDTO> binding);
    private static bool IsArrayBind(Dictionary`2<string, BindingDTO> binding);
    internal void SetUploadStream(MemoryStream stream, string destFilename, string stagePath);
    internal SFBaseResultSet ExecuteTransfer(string sql);
    [AsyncStateMachineAttribute("Snowflake.Data.Core.SFStatement/<ExecuteTransferAsync>d__49")]
internal Task`1<SFBaseResultSet> ExecuteTransferAsync(string sql, CancellationToken cancellationToken);
    internal string GetQueryId();
    [CompilerGeneratedAttribute]
private void <registerQueryCancellationCallback>b__32_0();
}
internal enum Snowflake.Data.Core.SFStatementType : Enum {
    public int value__;
    [SFStatementTypeAttr]
public static SFStatementType UNKNOWN;
    [SFStatementTypeAttr]
public static SFStatementType SELECT;
    [SFStatementTypeAttr]
public static SFStatementType EXPLAIN;
    [SFStatementTypeAttr]
public static SFStatementType DML;
    [SFStatementTypeAttr]
public static SFStatementType INSERT;
    [SFStatementTypeAttr]
public static SFStatementType UPDATE;
    [SFStatementTypeAttr]
public static SFStatementType DELETE;
    [SFStatementTypeAttr]
public static SFStatementType MERGE;
    [SFStatementTypeAttr]
public static SFStatementType MULTI_INSERT;
    [SFStatementTypeAttr]
public static SFStatementType COPY;
    [SFStatementTypeAttr]
public static SFStatementType COPY_UNLOAD;
    [SFStatementTypeAttr]
public static SFStatementType SCL;
    [SFStatementTypeAttr]
public static SFStatementType ALTER_SESSION;
    [SFStatementTypeAttr]
public static SFStatementType USE;
    [SFStatementTypeAttr]
public static SFStatementType USE_DATABASE;
    [SFStatementTypeAttr]
public static SFStatementType USE_SCHEMA;
    [SFStatementTypeAttr]
public static SFStatementType USE_WAREHOUSE;
    [SFStatementTypeAttr]
public static SFStatementType SHOW;
    [SFStatementTypeAttr]
public static SFStatementType DESCRIBE;
    [SFStatementTypeAttr]
public static SFStatementType LIST_FILES;
    [SFStatementTypeAttr]
public static SFStatementType TCL;
    [SFStatementTypeAttr]
public static SFStatementType DDL;
    [SFStatementTypeAttr]
public static SFStatementType STAGE_FILE_OPERATIONS;
    [SFStatementTypeAttr]
public static SFStatementType GET_FILES;
    [SFStatementTypeAttr]
public static SFStatementType PUT_FILES;
    [SFStatementTypeAttr]
public static SFStatementType REMOVE_FILES;
    [SFStatementTypeAttr]
public static SFStatementType MISC_QUERY_TYPES;
    [SFStatementTypeAttr]
public static SFStatementType BEGIN;
    [SFStatementTypeAttr]
public static SFStatementType END;
    [SFStatementTypeAttr]
public static SFStatementType COMMIT;
    [SFStatementTypeAttr]
public static SFStatementType SET;
    [SFStatementTypeAttr]
public static SFStatementType CALL;
}
internal class Snowflake.Data.Core.SFStatementTypeAttr : Attribute {
    [CompilerGeneratedAttribute]
private long <typeId>k__BackingField;
    public long typeId { get; public set; }
    [CompilerGeneratedAttribute]
public long get_typeId();
    [CompilerGeneratedAttribute]
public void set_typeId(long value);
}
internal class Snowflake.Data.Core.SingleOrArrayConverter`1 : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool CanConvert(Type objecType);
    public virtual object ReadJson(JsonReader reader, Type objecType, object existingValue, JsonSerializer serializer);
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Snowflake.Data.Core.SqlState : object {
    public static string WARNING;
}
internal enum Snowflake.Data.Core.StorageClientType : Enum {
    public int value__;
    public static StorageClientType LOCAL;
    public static StorageClientType REMOTE;
}
internal class Snowflake.Data.Core.Tools.DirectoryOperations : object {
    public static DirectoryOperations Instance;
    private static DirectoryOperations();
    public virtual bool Exists(string path);
    public virtual DirectoryInfo CreateDirectory(string path);
}
internal class Snowflake.Data.Core.Tools.EnvironmentOperations : object {
    public static EnvironmentOperations Instance;
    private static EnvironmentOperations();
    public virtual string GetEnvironmentVariable(string variable);
    public virtual string GetFolderPath(SpecialFolder folder);
}
internal class Snowflake.Data.Core.Tools.FileOperations : object {
    public static FileOperations Instance;
    private static FileOperations();
    public virtual bool Exists(string path);
}
public class Snowflake.Data.Core.UTF8Buffer : object {
    public static Encoding UTF8;
    public Byte[] Buffer;
    public int offset;
    public int length;
    public UTF8Buffer(Byte[] Buffer, int Offset, int Length);
    public UTF8Buffer(Byte[] Buffer);
    private static UTF8Buffer();
    public virtual string ToString();
    public Byte[] GetBytes();
}
[ExtensionAttribute]
public static class Snowflake.Data.Core.UTF8BufferExtension : object {
    [ExtensionAttribute]
public static string SafeToString(UTF8Buffer v);
}
internal class Snowflake.Data.Log.EasyLoggerManager : object {
    public static EasyLoggerManager Instance;
    private object _lockForExclusiveConfigure;
    private static string AppenderPrefix;
    private EasyLoggingLevelMapper _levelMapper;
    private static EasyLoggerManager();
    public virtual void ReconfigureEasyLogging(EasyLoggingLogLevel easyLoggingLogLevel, string logsPath);
    private static void RemoveOtherEasyLoggingAppenders(Logger logger, IAppender appender);
    private static IAppender AddRollingFileAppender(Logger logger, string directoryPath);
    private static bool IsEasyLoggingAppender(IAppender appender);
    private static IAppender AddConsoleAppender(Logger logger);
    private static PatternLayout PatternLayout();
}
internal class Snowflake.Data.Log.EasyLoggingLevelMapper : object {
    public static EasyLoggingLevelMapper Instance;
    private static EasyLoggingLevelMapper();
    public Level ToLog4NetLevel(EasyLoggingLogLevel level);
}
internal class Snowflake.Data.Log.Log4NetImpl : object {
    private ILog logger;
    public Log4NetImpl(ILog logger);
    public sealed virtual bool IsDebugEnabled();
    public sealed virtual bool IsInfoEnabled();
    public sealed virtual bool IsWarnEnabled();
    public sealed virtual bool IsErrorEnabled();
    public sealed virtual bool IsFatalEnabled();
    public sealed virtual void Debug(string msg, Exception ex);
    public sealed virtual void Info(string msg, Exception ex);
    public sealed virtual void Warn(string msg, Exception ex);
    public sealed virtual void Error(string msg, Exception ex);
    public sealed virtual void Fatal(string msg, Exception ex);
}
internal enum Snowflake.Data.Log.LoggingEvent : Enum {
    public int value__;
    public static LoggingEvent DEBUG;
    public static LoggingEvent INFO;
    public static LoggingEvent WARN;
    public static LoggingEvent ERROR;
    public static LoggingEvent FATAL;
}
internal class Snowflake.Data.Log.SecretDetector : object {
    private static List`1<string> CUSTOM_PATTERNS_REGEX;
    private static List`1<string> CUSTOM_PATTERNS_MASK;
    private static int CUSTOM_PATTERNS_LENGTH;
    private static string AWS_KEY_PATTERN;
    private static string AWS_TOKEN_PATTERN;
    private static string AWS_SERVER_SIDE_PATTERN;
    private static string SAS_TOKEN_PATTERN;
    private static string PRIVATE_KEY_PATTERN;
    private static string PRIVATE_KEY_DATA_PATTERN;
    private static string CONNECTION_TOKEN_PATTERN;
    private static string PASSWORD_PATTERN;
    private static SecretDetector();
    public static void SetCustomPatterns(String[] customRegex, String[] customMask);
    public static void ClearCustomPatterns();
    private static string MaskCustomPatterns(string text);
    private static string MaskAWSKeys(string text);
    private static string MaskAWSTokens(string text);
    private static string MaskAWSServerSide(string text);
    private static string MaskSASTokens(string text);
    private static string MaskPrivateKey(string text);
    private static string MaskPrivateKeyData(string text);
    private static string MaskConnectionTokens(string text);
    private static string MaskPassword(string text);
    public static Mask MaskSecrets(string text);
}
internal interface Snowflake.Data.Log.SFLogger {
    public abstract virtual bool IsDebugEnabled();
    public abstract virtual bool IsInfoEnabled();
    public abstract virtual bool IsWarnEnabled();
    public abstract virtual bool IsErrorEnabled();
    public abstract virtual bool IsFatalEnabled();
    public abstract virtual void Debug(string msg, Exception ex);
    public abstract virtual void Info(string msg, Exception ex);
    public abstract virtual void Warn(string msg, Exception ex);
    public abstract virtual void Error(string msg, Exception ex);
    public abstract virtual void Fatal(string msg, Exception ex);
}
internal class Snowflake.Data.Log.SFLoggerEmptyImpl : object {
    public sealed virtual bool IsDebugEnabled();
    public sealed virtual bool IsInfoEnabled();
    public sealed virtual bool IsWarnEnabled();
    public sealed virtual bool IsErrorEnabled();
    public sealed virtual bool IsFatalEnabled();
    public sealed virtual void Debug(string msg, Exception ex);
    public sealed virtual void Info(string msg, Exception ex);
    public sealed virtual void Warn(string msg, Exception ex);
    public sealed virtual void Error(string msg, Exception ex);
    public sealed virtual void Fatal(string msg, Exception ex);
}
internal class Snowflake.Data.Log.SFLoggerFactory : object {
    private static bool isLoggerEnabled;
    private static SFLogger logger;
    private static SFLoggerFactory();
    public static void disableLogger();
    public static void enableLogger();
    public static void useDefaultLogger();
    public static void Instance(SFLogger customLogger);
    public static SFLogger GetLogger();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
