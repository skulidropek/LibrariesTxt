[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public static class SoapCore.CachedXmlSerializer : object {
    private static ConcurrentDictionary`2<string, XmlSerializer> CachedSerializers;
    private static CachedXmlSerializer();
    public static XmlSerializer GetXmlSerializer(Type elementType, string parameterName, string parameterNs);
}
public class SoapCore.CustomMessage : Message {
    [CompilerGeneratedAttribute]
private Message <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlNamespaceManager <NamespaceManager>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <AdditionalEnvelopeXmlnsAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <StandAloneAttribute>k__BackingField;
    public Message Message { get; internal set; }
    public XmlNamespaceManager NamespaceManager { get; internal set; }
    public Dictionary`2<string, string> AdditionalEnvelopeXmlnsAttributes { get; internal set; }
    public Nullable`1<bool> StandAloneAttribute { get; public set; }
    public MessageHeaders Headers { get; }
    public MessageProperties Properties { get; }
    public MessageVersion Version { get; }
    public bool IsEmpty { get; }
    public bool IsFault { get; }
    public CustomMessage(Message message);
    [CompilerGeneratedAttribute]
public Message get_Message();
    [CompilerGeneratedAttribute]
internal void set_Message(Message value);
    [CompilerGeneratedAttribute]
public XmlNamespaceManager get_NamespaceManager();
    [CompilerGeneratedAttribute]
internal void set_NamespaceManager(XmlNamespaceManager value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_AdditionalEnvelopeXmlnsAttributes();
    [CompilerGeneratedAttribute]
internal void set_AdditionalEnvelopeXmlnsAttributes(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_StandAloneAttribute();
    [CompilerGeneratedAttribute]
public void set_StandAloneAttribute(Nullable`1<bool> value);
    public virtual MessageHeaders get_Headers();
    public virtual MessageProperties get_Properties();
    public virtual MessageVersion get_Version();
    public virtual bool get_IsEmpty();
    public virtual bool get_IsFault();
    protected virtual void OnWriteStartEnvelope(XmlDictionaryWriter writer);
    protected virtual void OnWriteStartHeaders(XmlDictionaryWriter writer);
    protected virtual void OnWriteStartBody(XmlDictionaryWriter writer);
    protected virtual void OnWriteBodyContents(XmlDictionaryWriter writer);
    protected virtual void OnClose();
}
internal class SoapCore.DefaultEncodings : object {
    public static Encoding UTF8 { get; }
    public static Encoding Unicode { get; }
    public static Encoding BigEndianUnicode { get; }
    public static Encoding Iso88591 { get; }
    public static Encoding get_UTF8();
    public static Encoding get_Unicode();
    public static Encoding get_BigEndianUnicode();
    public static Encoding get_Iso88591();
}
public class SoapCore.DefaultFaultExceptionTransformer`1 : object {
    private ExceptionTransformer _exceptionTransformer;
    public DefaultFaultExceptionTransformer`1(ExceptionTransformer exceptionTransformer);
    public sealed virtual Message ProvideFault(Exception exception, MessageVersion messageVersion, Message requestMessage, XmlNamespaceManager xmlNamespaceManager);
}
public class SoapCore.DefaultOperationInvoker : object {
    [AsyncStateMachineAttribute("SoapCore.DefaultOperationInvoker/<InvokeAsync>d__0")]
public sealed virtual Task`1<object> InvokeAsync(MethodInfo methodInfo, object serviceInstance, Object[] arguments);
}
[XmlRootAttribute]
public class SoapCore.DocumentationWriter.SoapDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private SoapTypes <Types>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SoapMessage> <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private SoapPortType <PortType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SoapBinding> <Bindings>k__BackingField;
    [CompilerGeneratedAttribute]
private SoapService <Service>k__BackingField;
    private static XmlElementEventHandler _unknownElementHandler;
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string TargetNamespace { get; public set; }
    [XmlElementAttribute]
public SoapTypes Types { get; public set; }
    [XmlElementAttribute]
public List`1<SoapMessage> Messages { get; public set; }
    [XmlElementAttribute]
public SoapPortType PortType { get; public set; }
    [XmlElementAttribute]
public List`1<SoapBinding> Bindings { get; public set; }
    [XmlElementAttribute]
public SoapService Service { get; public set; }
    private static SoapDefinition();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_TargetNamespace();
    [CompilerGeneratedAttribute]
public void set_TargetNamespace(string value);
    [CompilerGeneratedAttribute]
public SoapTypes get_Types();
    [CompilerGeneratedAttribute]
public void set_Types(SoapTypes value);
    [CompilerGeneratedAttribute]
public List`1<SoapMessage> get_Messages();
    [CompilerGeneratedAttribute]
public void set_Messages(List`1<SoapMessage> value);
    [CompilerGeneratedAttribute]
public SoapPortType get_PortType();
    [CompilerGeneratedAttribute]
public void set_PortType(SoapPortType value);
    [CompilerGeneratedAttribute]
public List`1<SoapBinding> get_Bindings();
    [CompilerGeneratedAttribute]
public void set_Bindings(List`1<SoapBinding> value);
    [CompilerGeneratedAttribute]
public SoapService get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(SoapService value);
    public static SoapDefinition DeserializeFromFile(string xmlFile);
    public static SoapDefinition DeserializeFromString(string xml);
    public static SoapDefinition DeserializeFromStream(Stream xml);
    public string GenerateDocumentation();
}
[ExtensionAttribute]
public static class SoapCore.EnvelopeVersionExtentions : object {
    [ExtensionAttribute]
public static string Namespace(EnvelopeVersion envelopeVersion);
    [ExtensionAttribute]
public static string NamespacePrefix(EnvelopeVersion envelopeVersion, XmlNamespaceManager namespaces);
}
public class SoapCore.Extensibility.AuthorizeOperationMessageProcessor : object {
    private Dictionary`2<string, Type> _pathTypes;
    private bool _generateSoapActionWithoutContractName;
    public AuthorizeOperationMessageProcessor(Dictionary`2<string, Type> pathAndTypes, bool generateSoapActionWithoutContractName);
    [AsyncStateMachineAttribute("SoapCore.Extensibility.AuthorizeOperationMessageProcessor/<ProcessMessage>d__3")]
public sealed virtual Task`1<Message> ProcessMessage(Message requestMessage, HttpContext httpContext, Func`2<Message, Task`1<Message>> next);
    private static bool TryGetOperation(string methodName, Type serviceType, bool generateSoapActionWithoutContractName, OperationDescription& operation);
}
public class SoapCore.Extensibility.ExceptionTransformer : object {
    private Func`2<Exception, string> _transformer;
    public ExceptionTransformer(Func`2<Exception, string> transformer);
    public string Transform(Exception ex);
}
public interface SoapCore.Extensibility.IAsyncMessageFilter {
    public abstract virtual Task OnRequestExecuting(Message message);
    public abstract virtual Task OnResponseExecuting(Message message);
}
public interface SoapCore.Extensibility.IFaultExceptionTransformer {
    public abstract virtual Message ProvideFault(Exception exception, MessageVersion messageVersion, Message requestMessage, XmlNamespaceManager xmlNamespaceManager);
}
[ObsoleteAttribute]
public interface SoapCore.Extensibility.IMessageFilter {
    public abstract virtual void OnRequestExecuting(Message message);
    public abstract virtual void OnResponseExecuting(Message message);
}
[ObsoleteAttribute]
public interface SoapCore.Extensibility.IMessageInspector {
    public abstract virtual object AfterReceiveRequest(Message& message);
    public abstract virtual void BeforeSendReply(Message& reply, object correlationState);
}
public interface SoapCore.Extensibility.IMessageInspector2 {
    public abstract virtual object AfterReceiveRequest(Message& message, ServiceDescription serviceDescription);
    public abstract virtual void BeforeSendReply(Message& reply, ServiceDescription serviceDescription, object correlationState);
}
public interface SoapCore.Extensibility.IModelBindingFilter {
    public List`1<Type> ModelTypes { get; public set; }
    public abstract virtual List`1<Type> get_ModelTypes();
    public abstract virtual void set_ModelTypes(List`1<Type> value);
    public abstract virtual void OnModelBound(object model, IServiceProvider serviceProvider, Object& output);
}
public interface SoapCore.Extensibility.IOperationInvoker {
    public abstract virtual Task`1<object> InvokeAsync(MethodInfo methodInfo, object instance, Object[] inputs);
}
public interface SoapCore.Extensibility.IServiceOperationTuner {
    public abstract virtual void Tune(HttpContext httpContext, object serviceInstance, OperationDescription operation);
}
public interface SoapCore.Extensibility.ISoapMessageProcessor {
    public abstract virtual Task`1<Message> ProcessMessage(Message message, HttpContext context, Func`2<Message, Task`1<Message>> next);
}
public interface SoapCore.Extensibility.ISoapModelBounder {
    public abstract virtual void OnModelBound(MethodInfo methodInfo, Object[] prms);
}
internal class SoapCore.Extensibility.LambdaSoapMessageProcessor : object {
    private Func`4<Message, HttpContext, Func`2<Message, Task`1<Message>>, Task`1<Message>> _processMessage;
    internal LambdaSoapMessageProcessor(Func`4<Message, HttpContext, Func`2<Message, Task`1<Message>>, Task`1<Message>> processMessage);
    [AsyncStateMachineAttribute("SoapCore.Extensibility.LambdaSoapMessageProcessor/<ProcessMessage>d__2")]
public sealed virtual Task`1<Message> ProcessMessage(Message message, HttpContext context, Func`2<Message, Task`1<Message>> next);
}
public class SoapCore.FaultBodyWriter : BodyWriter {
    private MessageVersion _version;
    private Exception _exception;
    private string _faultStringOverride;
    public FaultBodyWriter(Exception exception, MessageVersion version, bool isBuffered, string faultStringOverride);
    protected virtual void OnWriteBodyContents(XmlDictionaryWriter writer);
    private void WriteSoap12Fault(XmlDictionaryWriter writer);
    private void WriteSoap11Fault(XmlDictionaryWriter writer);
    private XmlElement ExtractFaultDetailsAsXmlElement(Exception ex);
    private object ExtractFaultDetail(Exception exception);
}
internal static class SoapCore.HeadersHelper : object {
    private static Char[] ContentTypeSeparators;
    private static HeadersHelper();
    public static string GetSoapAction(HttpContext httpContext, Message& message);
    public static string GetTrimmedClearedSoapAction(string inSoapAction);
    public static string GetTrimmedSoapAction(string inSoapAction);
    private static IEnumerable`1<string> GetContentTypes(HttpContext httpContext);
}
[ObsoleteAttribute]
internal static class SoapCore.MessageEncoder.Requires : object {
    [DebuggerStepThroughAttribute]
public static T NotNull(T value, string parameterName);
}
public class SoapCore.MessageEncoder.SoapMessageEncoder : object {
    internal static string Soap11MediaType;
    internal static string Soap12MediaType;
    private static string XmlMediaType;
    private Encoding _writeEncoding;
    private bool _overwriteResponseContentType;
    private bool _optimizeWriteForUtf8;
    private bool _omitXmlDeclaration;
    private bool _checkXmlCharacters;
    private bool _normalizeNewLines;
    [CompilerGeneratedAttribute]
private string <BindingName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MediaType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CharSet>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageVersion <MessageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDictionaryReaderQuotas <ReaderQuotas>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxSoapHeaderSize>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlNamespaceManager <XmlNamespaceOverrides>k__BackingField;
    public string BindingName { get; }
    public string PortName { get; }
    public string ContentType { get; }
    public string MediaType { get; }
    public string CharSet { get; }
    public MessageVersion MessageVersion { get; }
    public XmlDictionaryReaderQuotas ReaderQuotas { get; }
    public int MaxSoapHeaderSize { get; }
    public XmlNamespaceManager XmlNamespaceOverrides { get; }
    public SoapMessageEncoder(MessageVersion version, Encoding writeEncoding, bool overwriteResponseContentType, XmlDictionaryReaderQuotas quotas, bool omitXmlDeclaration, bool checkXmlCharacters, XmlNamespaceManager xmlNamespaceOverrides, string bindingName, string portName, bool normalizeNewLines, int maxSoapHeaderSize);
    [CompilerGeneratedAttribute]
public string get_BindingName();
    [CompilerGeneratedAttribute]
public string get_PortName();
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public string get_MediaType();
    [CompilerGeneratedAttribute]
public string get_CharSet();
    [CompilerGeneratedAttribute]
public MessageVersion get_MessageVersion();
    [CompilerGeneratedAttribute]
public XmlDictionaryReaderQuotas get_ReaderQuotas();
    [CompilerGeneratedAttribute]
public int get_MaxSoapHeaderSize();
    [CompilerGeneratedAttribute]
public XmlNamespaceManager get_XmlNamespaceOverrides();
    public bool IsContentTypeSupported(string contentType, bool checkCharset);
    [AsyncStateMachineAttribute("SoapCore.MessageEncoder.SoapMessageEncoder/<ReadMessageAsync>d__38")]
public Task`1<Message> ReadMessageAsync(PipeReader pipeReader, int maxSizeOfHeaders, string contentType);
    [AsyncStateMachineAttribute("SoapCore.MessageEncoder.SoapMessageEncoder/<ReadMessageAsync>d__39")]
public Task`1<Message> ReadMessageAsync(Stream stream, int maxSizeOfHeaders, string contentType);
    [AsyncStateMachineAttribute("SoapCore.MessageEncoder.SoapMessageEncoder/<WriteMessageAsync>d__40")]
public virtual Task WriteMessageAsync(Message message, HttpContext httpContext, PipeWriter pipeWriter, bool indentXml);
    [AsyncStateMachineAttribute("SoapCore.MessageEncoder.SoapMessageEncoder/<WriteMessageAsync>d__41")]
public virtual Task WriteMessageAsync(Message message, HttpContext httpContext, Stream stream, bool indentXml);
    internal static string GetMediaType(MessageVersion version);
    internal static string GetContentType(string mediaType, string charSet);
    internal bool IsContentTypeSupported(string contentType, string supportedContentType, string supportedMediaType, bool checkCharset);
    internal virtual bool IsCharSetSupported(string charset);
    private static bool IsUtf8Encoding(Encoding encoding);
    private void ThrowIfMismatchedMessageVersion(Message message);
}
internal class SoapCore.MessageEncoder.SoapMessageEncoderDefaults : object {
    public static int MaxSoapHeaderSizeDefault;
    private static Encoding[] XmlDictionaryReaderSupportedEncodings;
    private static CharSetEncoding[] CharSetEncodings;
    private static SoapMessageEncoderDefaults();
    public static bool TryValidateEncoding(Encoding encoding, Exception& exception);
    public static Encoding ContentTypeToEncoding(string contentType);
    public static string EncodingToCharSet(Encoding encoding);
}
[ObsoleteAttribute]
internal static class SoapCore.MessageEncoder.Verify : object {
    [DebuggerStepThroughAttribute]
public static void Operation(bool condition, string message);
}
public class SoapCore.MessageFaultBodyWriter : BodyWriter {
    private MessageFault _fault;
    private MessageVersion _messageVersion;
    public MessageFaultBodyWriter(MessageFault fault, MessageVersion messageVersion, bool isBuffered);
    protected virtual void OnWriteBodyContents(XmlDictionaryWriter writer);
}
[ExtensionAttribute]
[ObsoleteAttribute]
internal static class SoapCore.Meta.BindingExtensions : object {
    [ExtensionAttribute]
public static bool HasBasicAuth(Binding binding);
    [ExtensionAttribute]
public static SoapEncoderOptions[] ToEncoderOptions(Binding binding);
}
[ExtensionAttribute]
public static class SoapCore.Meta.BodyWriterExtensions : object {
    private static bool UseXmlSchemaProvider;
    private static bool UseXmlReflectionImporter;
    private static BodyWriterExtensions();
    [ExtensionAttribute]
public static bool TryAddSchemaTypeFromXmlSchemaProviderAttribute(XmlDictionaryWriter writer, Type type, string name, SoapSerializer serializer, XmlNamespaceManager xmlNamespaceManager, bool isUnqualified);
    [ExtensionAttribute]
public static bool IsChoice(MemberInfo member);
    [ExtensionAttribute]
public static bool IsAttribute(MemberInfo member);
    [ExtensionAttribute]
public static bool IsIgnored(MemberInfo member);
    [ExtensionAttribute]
public static bool HasShouldSerializeMethod(MemberInfo member, TypeToBuild parent);
    [ExtensionAttribute]
public static bool IsEnumerableType(Type collectionType);
    [ExtensionAttribute]
public static Type GetGenericType(Type collectionType);
    [ExtensionAttribute]
public static string GetSerializedTypeName(Type type);
    private static string GetArrayTypeName(string typeName, bool isNullable);
    [ExtensionAttribute]
private static XmlSerializerNamespaces Convert(XmlNamespaceManager xmlNamespaceManager);
    [ExtensionAttribute]
private static string FirstCharToUpperOrDefault(string input);
}
public class SoapCore.Meta.ClrTypeResolver : object {
    public static string ResolveOrDefault(string typeName);
}
public class SoapCore.Meta.DefaultWsdlOperationNameGenerator : object {
    public sealed virtual string GenerateWsdlInputMessageName(OperationDescription operation, ServiceDescription service);
    public sealed virtual string GenerateWsdlOutputMessageName(OperationDescription operation, ServiceDescription service);
}
public interface SoapCore.Meta.IWsdlOperationNameGenerator {
    public abstract virtual string GenerateWsdlInputMessageName(OperationDescription operation, ServiceDescription service);
    public abstract virtual string GenerateWsdlOutputMessageName(OperationDescription operation, ServiceDescription service);
}
public class SoapCore.Meta.MetaBodyWriter : BodyWriter {
    private static string FaultSuffix;
    private static int _namespaceCounter;
    private ServiceDescription _service;
    private string _baseUrl;
    private XmlNamespaceManager _xmlNamespaceManager;
    private Queue`1<Type> _enumToBuild;
    private Queue`1<TypeToBuild> _complexTypeToBuild;
    private HashSet`1<string> _builtEnumTypes;
    private HashSet`1<string> _builtComplexTypes;
    private Dictionary`2<string, Dictionary`2<string, string>> _requestedDynamicTypes;
    private bool _buildMicrosoftGuid;
    private IWsdlOperationNameGenerator _wsdlOperationNameGenerator;
    [CompilerGeneratedAttribute]
private SoapBindingInfo[] <SoapBindings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BindingName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PortName>k__BackingField;
    private SoapBindingInfo[] SoapBindings { get; }
    private string BindingName { get; }
    private string BindingType { get; }
    private string PortName { get; }
    private string TargetNameSpace { get; }
    [ObsoleteAttribute]
public MetaBodyWriter(ServiceDescription service, string baseUrl, Binding binding, XmlNamespaceManager xmlNamespaceManager);
    public MetaBodyWriter(ServiceDescription service, string baseUrl, XmlNamespaceManager xmlNamespaceManager, string bindingName, SoapBindingInfo[] soapBindings, bool buildMicrosoftGuid, IWsdlOperationNameGenerator wsdlOperationNameGenerator);
    private static MetaBodyWriter();
    [CompilerGeneratedAttribute]
private SoapBindingInfo[] get_SoapBindings();
    [CompilerGeneratedAttribute]
private string get_BindingName();
    private string get_BindingType();
    [CompilerGeneratedAttribute]
private string get_PortName();
    private string get_TargetNameSpace();
    protected virtual void OnWriteBodyContents(XmlDictionaryWriter writer);
    private static string GetOuterInputElementName(OperationDescription operation);
    private static bool IsWrappedMessageContractType(Type type);
    private static Type GetMessageContractBodyType(Type type);
    private static string GetMessageContractBodyName(Type type);
    private static bool TryGetMessageContractBodyType(Type type, Type& bodyType);
    private static bool TryGetMessageContractBodyMemberInfo(Type type, MemberInfo& bodyType);
    private ValueTuple`4<string, string, string, string> GetSoapMetaParameters(SoapBindingInfo bindingInfo);
    private XmlQualifiedName ResolveType(Type type);
    private void WriteParameters(XmlDictionaryWriter writer, SoapMethodParameterInfo[] parameterInfos, bool isMessageContract);
    private void WriteParameterElement(XmlDictionaryWriter writer, SoapMethodParameterInfo parameterInfo);
    private void AddTypes(XmlDictionaryWriter writer);
    private Type[] GetKnownTypesFromMethod(MethodInfo methodInfo);
    private void AddMessage(XmlDictionaryWriter writer);
    private void AddMessageFaults(XmlDictionaryWriter writer, OperationDescription operation);
    private void AddPortType(XmlDictionaryWriter writer);
    private void AddOperationTypeFaults(XmlDictionaryWriter writer, OperationDescription operation);
    private string EnsureFaultNaming(string faultName);
    private void AddBinding(XmlDictionaryWriter writer);
    private void AddBindingFaults(XmlDictionaryWriter writer, OperationDescription operation, string soap, string soapNamespace);
    private void AddService(XmlDictionaryWriter writer);
    private bool HasBaseType(Type type);
    private void AddSchemaComplexType(XmlDictionaryWriter writer, TypeToBuild toBuild);
    private void AddSchemaTypePropertyOrField(XmlDictionaryWriter writer, MemberInfo member, TypeToBuild parentTypeToBuild);
    private void AddChoice(XmlDictionaryWriter writer, IEnumerable`1<ReturnChoice> returnChoices);
    private void AddSchemaType(XmlDictionaryWriter writer, Type type, string name, bool isArray, string namespace, bool isAttribute, bool isUnqualified);
    private void AddSchemaType(XmlDictionaryWriter writer, TypeToBuild toBuild, string name, bool isArray, string namespace, bool isAttribute, bool isListWithoutWrapper, bool isUnqualified, string defaultValue, bool isOptionalAttribute, bool hasSpecifiedBoolean);
    private void WriteQualification(XmlDictionaryWriter writer, bool isUnqualified);
    private void SetUniqueNameForDynamicType(TypeToBuild dynamicType);
}
public class SoapCore.Meta.MetaFromFile : object {
    [CompilerGeneratedAttribute]
private string <CurrentWebService>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentWebServer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XsdFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WSDLFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerUrl>k__BackingField;
    public string CurrentWebService { get; public set; }
    public string CurrentWebServer { get; public set; }
    public string XsdFolder { get; public set; }
    public string WSDLFolder { get; public set; }
    public string ServerUrl { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CurrentWebService();
    [CompilerGeneratedAttribute]
public void set_CurrentWebService(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentWebServer();
    [CompilerGeneratedAttribute]
public void set_CurrentWebServer(string value);
    [CompilerGeneratedAttribute]
public string get_XsdFolder();
    [CompilerGeneratedAttribute]
public void set_XsdFolder(string value);
    [CompilerGeneratedAttribute]
public string get_WSDLFolder();
    [CompilerGeneratedAttribute]
public void set_WSDLFolder(string value);
    [CompilerGeneratedAttribute]
public string get_ServerUrl();
    [CompilerGeneratedAttribute]
public void set_ServerUrl(string value);
    [ObsoleteAttribute]
public string ReadLocalFile(string path);
    [AsyncStateMachineAttribute("SoapCore.Meta.MetaFromFile/<ReadLocalFileAsync>d__21")]
public Task`1<string> ReadLocalFileAsync(string path);
    private XmlAttribute EnsureAttribute(XmlDocument xmlDoc, XmlNode node, string attributeName);
    public string ModifyWSDLAddRightSchemaPath(string xmlString);
    public string ModifyXSDAddRightSchemaPath(string xmlString);
    private string SchemaLocation();
    private string WebServiceLocation();
}
public class SoapCore.Meta.MetaMessage : Message {
    private Message _message;
    private ServiceDescription _service;
    private XmlNamespaceManager _xmlNamespaceManager;
    private string _bindingName;
    private bool _hasBasicAuthentication;
    private MessageVersion[] _soapVersions;
    public MessageHeaders Headers { get; }
    public MessageProperties Properties { get; }
    public MessageVersion Version { get; }
    public bool IsEmpty { get; }
    public bool IsFault { get; }
    [ObsoleteAttribute]
public MetaMessage(Message message, ServiceDescription service, Binding binding, XmlNamespaceManager xmlNamespaceManager);
    public MetaMessage(Message message, ServiceDescription service, XmlNamespaceManager xmlNamespaceManager, string bindingName, bool hasBasicAuthentication, MessageVersion[] soapVersions);
    public virtual MessageHeaders get_Headers();
    public virtual MessageProperties get_Properties();
    public virtual MessageVersion get_Version();
    public virtual bool get_IsEmpty();
    public virtual bool get_IsFault();
    protected virtual void OnWriteStartEnvelope(XmlDictionaryWriter writer);
    protected virtual void OnWriteStartBody(XmlDictionaryWriter writer);
    protected virtual void OnWriteBodyContents(XmlDictionaryWriter writer);
    protected virtual void OnClose();
    private void WriteXmlnsAttribute(XmlDictionaryWriter writer, string namespaceUri);
}
public class SoapCore.Meta.MetaWCFBodyWriter : BodyWriter {
    private static Dictionary`2<string, ValueTuple`2<string, string>> SysTypeDic;
    private static int _namespaceCounter;
    private ServiceDescription _service;
    private string _baseUrl;
    private String[] _numbers;
    private Dictionary`2<Type, string> _complexTypeToBuild;
    private HashSet`1<Type> _complexTypeProcessed;
    private Queue`1<Type> _arrayToBuild;
    private HashSet`1<string> _builtEnumTypes;
    private HashSet`1<string> _builtComplexTypes;
    private HashSet`1<string> _buildArrayTypes;
    private HashSet`1<string> _builtSerializationElements;
    private bool _buildDateTimeOffset;
    private bool _buildDataTable;
    private string _schemaNamespace;
    private IWsdlOperationNameGenerator _wsdlOperationNameGenerator;
    [CompilerGeneratedAttribute]
private SoapBindingInfo[] <SoapBindings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasBasicAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BindingName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BindingType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetNameSpace>k__BackingField;
    private SoapBindingInfo[] SoapBindings { get; }
    private bool HasBasicAuthentication { get; }
    private string BindingName { get; }
    private string BindingType { get; }
    private string PortName { get; }
    private string TargetNameSpace { get; }
    [ObsoleteAttribute]
public MetaWCFBodyWriter(ServiceDescription service, string baseUrl, Binding binding);
    public MetaWCFBodyWriter(ServiceDescription service, string baseUrl, string bindingName, bool hasBasicAuthentication, SoapBindingInfo[] soapBindings, IWsdlOperationNameGenerator wsdlOperationNameGenerator);
    private static MetaWCFBodyWriter();
    [CompilerGeneratedAttribute]
private SoapBindingInfo[] get_SoapBindings();
    [CompilerGeneratedAttribute]
private bool get_HasBasicAuthentication();
    [CompilerGeneratedAttribute]
private string get_BindingName();
    [CompilerGeneratedAttribute]
private string get_BindingType();
    [CompilerGeneratedAttribute]
private string get_PortName();
    [CompilerGeneratedAttribute]
private string get_TargetNameSpace();
    protected virtual void OnWriteBodyContents(XmlDictionaryWriter writer);
    private static string GetModelNamespace(string namespace);
    private static string GetDataContractNamespace(Type type);
    private static Type GetGenericType(Type collectionType);
    private static Type[] GetGenericTypes(Type collectionType);
    private string GetModelNamespace(Type type);
    private void WriteParameters(XmlDictionaryWriter writer, SoapMethodParameterInfo[] parameterInfos);
    private void EnsureServiceKnownTypes(IEnumerable`1<ServiceKnownTypeAttribute> serviceKnownTypes);
    private void AddKnownType(Type type);
    private void AddContractOperations(XmlDictionaryWriter writer, ContractDescription contract);
    private void AddFaultTypes(XmlDictionaryWriter writer, OperationDescription operation);
    private void AddTypes(XmlDictionaryWriter writer);
    private void AddSystemTypes(XmlDictionaryWriter writer);
    private void AddArrayTypes(XmlDictionaryWriter writer);
    private void AddMSSerialization(XmlDictionaryWriter writer);
    private void WriteSerializationElement(XmlDictionaryWriter writer, string name, string type, bool nillable);
    private void AddComplexTypes(XmlDictionaryWriter writer);
    private void DiscoverTypes(Type type, bool isRootType);
    private void WriteEnum(XmlDictionaryWriter writer, Type type);
    private void WriteComplexType(XmlDictionaryWriter writer, Type type);
    private void AddMessages(XmlDictionaryWriter writer);
    private void AddMessageFaults(XmlDictionaryWriter writer, OperationDescription operation);
    private void AddPortType(XmlDictionaryWriter writer);
    private void AddPortTypeFaults(XmlDictionaryWriter writer, OperationDescription operation);
    private void AddBinding(XmlDictionaryWriter writer);
    private void AddBindingFaults(XmlDictionaryWriter writer, OperationDescription operation, string soap, string soapNamespace);
    private void AddService(XmlDictionaryWriter writer);
    private void AddSchemaType(XmlDictionaryWriter writer, Type type, string name, bool isArray, string objectNamespace, bool isRequired);
    private bool TypeIsComplexForWsdl(Type type, Type& resultType);
    private void WriteComplexElementType(XmlDictionaryWriter writer, string typeName, string schemaNamespace, string objectNamespace, Type type);
    private string GetTypeName(Type type);
    private string ReplaceGenericNames(string name);
    private ValueTuple`2<string, string> ResolveSystemType(Type type);
    private bool HasBaseType(Type type);
    private ValueTuple`4<string, string, string, string> GetSoapMetaParameters(SoapBindingInfo bindingInfo);
    [CompilerGeneratedAttribute]
private string <GetTypeName>b__66_0(Type genericType);
    [CompilerGeneratedAttribute]
private string <GetTypeName>b__66_1(Type a);
}
public class SoapCore.Meta.SoapBindingInfo : object {
    [CompilerGeneratedAttribute]
private MessageVersion <MessageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BindingName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PortName>k__BackingField;
    public MessageVersion MessageVersion { get; private set; }
    public string BindingName { get; private set; }
    public string PortName { get; private set; }
    public SoapBindingInfo(MessageVersion messageVersion, string bindingName, string portName);
    [CompilerGeneratedAttribute]
public MessageVersion get_MessageVersion();
    [CompilerGeneratedAttribute]
private void set_MessageVersion(MessageVersion value);
    [CompilerGeneratedAttribute]
public string get_BindingName();
    [CompilerGeneratedAttribute]
private void set_BindingName(string value);
    [CompilerGeneratedAttribute]
public string get_PortName();
    [CompilerGeneratedAttribute]
private void set_PortName(string value);
}
public class SoapCore.Meta.TypeToBuild : object {
    [CompilerGeneratedAttribute]
private bool <IsAnonumous>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChildElementName>k__BackingField;
    public bool IsAnonumous { get; }
    public Type Type { get; }
    public string TypeName { get; public set; }
    public string ChildElementName { get; public set; }
    public TypeToBuild(Type type);
    [CompilerGeneratedAttribute]
public bool get_IsAnonumous();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ChildElementName();
    [CompilerGeneratedAttribute]
public void set_ChildElementName(string value);
}
public static class SoapCore.Namespaces : object {
    public static string XMLNS_XSD;
    public static string XMLNS_XSI;
    public static string WSDL_NS;
    public static string SOAP11_NS;
    public static string SOAP12_NS;
    public static string ARRAYS_NS;
    public static string SYSTEM_NS;
    public static string DataContractNamespace;
    public static string SERIALIZATION_NS;
    public static string WSP_NS;
    public static string WSAM_NS;
    public static string WSAW_NS;
    public static string SystemData_NS;
    public static string MSC_NS;
    public static string WSU_NS;
    public static string HTTP_NS;
    public static string TRANSPORT_SCHEMA;
    public static string SOAP11_ENVELOPE_NS;
    public static string SOAP12_ENVELOPE_NS;
    public static string MICROSOFT_TYPES;
    public static void AddDefaultNamespaces(XmlNamespaceManager xmlNamespaceManager, bool addMicrosoftTypesNamespace);
    public static string AddNamespaceIfNotAlreadyPresentAndGetPrefix(XmlNamespaceManager xmlNamespaceManager, string preferredPrefix, string uri);
    public static XmlNamespaceManager CreateDefaultXmlNamespaceManager(bool addMicrosoftTypesNamespace);
}
[ObsoleteAttribute]
internal class SoapCore.ObsoleteMessageFilter : object {
    private IMessageFilter _messageFilter;
    public ObsoleteMessageFilter(IMessageFilter messageFilter);
    public sealed virtual Task OnRequestExecuting(Message message);
    public sealed virtual Task OnResponseExecuting(Message message);
}
[ObsoleteAttribute]
internal class SoapCore.ObsoleteMessageInspector : object {
    private IMessageInspector _inner;
    public ObsoleteMessageInspector(IMessageInspector inner);
    public sealed virtual object AfterReceiveRequest(Message& message, ServiceDescription serviceDescription);
    public sealed virtual void BeforeSendReply(Message& reply, ServiceDescription serviceDescription, object correlationState);
}
[ExtensionAttribute]
internal static class SoapCore.ReflectionExtensions : object {
    [ExtensionAttribute]
internal static MethodInfo GetGenericMethod(Type type, string name, Type[] typeArguments);
    [ExtensionAttribute]
internal static IEnumerable`1<MemberInfo> GetPropertyOrFieldMembers(Type type);
    [ExtensionAttribute]
internal static Type GetPropertyOrFieldType(MemberInfo memberInfo);
    [ExtensionAttribute]
internal static void SetValueToPropertyOrField(MemberInfo memberInfo, object obj, object value);
    [ExtensionAttribute]
internal static object GetPropertyOrFieldValue(MemberInfo memberInfo, object obj);
    [ExtensionAttribute]
internal static IEnumerable`1<MemberInfo> GetMembersWithAttribute(Type type);
    [ExtensionAttribute]
internal static bool TryGetBaseTypeWithKnownTypes(Type type, Type& result);
}
public interface SoapCore.Serializer.IXmlSerializationHandler {
    public abstract virtual object DeserializeInputParameter(XmlDictionaryReader xmlReader, Type parameterType, string parameterName, string parameterNs, ICustomAttributeProvider customAttributeProvider, IEnumerable`1<Type> knownTypes);
}
public class SoapCore.Serializer.IXmlSerializationHandlerResolver : MulticastDelegate {
    public IXmlSerializationHandlerResolver(object object, IntPtr method);
    public virtual IXmlSerializationHandler Invoke(Type identifier);
    public virtual IAsyncResult BeginInvoke(Type identifier, AsyncCallback callback, object object);
    public virtual IXmlSerializationHandler EndInvoke(IAsyncResult result);
}
internal class SoapCore.Serializer.SerializerHelper : object {
    private SoapSerializer _serializer;
    public SerializerHelper(SoapSerializer serializer);
    public sealed virtual object DeserializeInputParameter(XmlDictionaryReader xmlReader, Type parameterType, string parameterName, string parameterNs, ICustomAttributeProvider customAttributeProvider, IEnumerable`1<Type> knownTypes);
    private static object DeserializeObject(XmlDictionaryReader xmlReader, Type parameterType, string parameterName, string parameterNs);
    private static object DeserializeDataContract(XmlDictionaryReader xmlReader, Type parameterType, string parameterName, string parameterNs, IEnumerable`1<Type> knownTypes);
    private XmlElementAttribute ChoiceElementToSerialize(XmlDictionaryReader xmlReader, XmlElementAttribute[] xmlElementAttributes, string parameterNs);
    private object DeserializeArrayXmlSerializer(XmlDictionaryReader xmlReader, Type parameterType, string parameterName, string parameterNs, ICustomAttributeProvider customAttributeProvider);
}
internal class SoapCore.ServiceBodyWriter : BodyWriter {
    private SoapSerializer _serializer;
    private OperationDescription _operation;
    private string _serviceNamespace;
    private string _envelopeName;
    private string _resultName;
    private object _result;
    private Dictionary`2<string, object> _outResults;
    private bool _skipResponseEnvelope;
    public ServiceBodyWriter(SoapSerializer serializer, OperationDescription operation, object result, Dictionary`2<string, object> outResults, bool skipResponseEnvelope);
    protected virtual void OnWriteBodyContents(XmlDictionaryWriter writer);
    private static void WriteStream(XmlDictionaryWriter writer, object value);
    private void OnWriteXmlSerializerBodyContents(XmlDictionaryWriter writer);
    private void OnWriteDataContractSerializerBodyContents(XmlDictionaryWriter writer);
}
public class SoapCore.ServiceModel.ContractDescription : object {
    [CompilerGeneratedAttribute]
private ServiceDescription <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ServiceKnownTypeAttribute> <ServiceKnownTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ContractType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<OperationDescription> <Operations>k__BackingField;
    public ServiceDescription Service { get; }
    public IEnumerable`1<ServiceKnownTypeAttribute> ServiceKnownTypes { get; }
    public string Name { get; }
    public string Namespace { get; }
    public Type ContractType { get; }
    public IEnumerable`1<OperationDescription> Operations { get; }
    public ContractDescription(ServiceDescription service, Type contractType, ServiceContractAttribute attribute, bool generateSoapActionWithoutContractName);
    [CompilerGeneratedAttribute]
public ServiceDescription get_Service();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ServiceKnownTypeAttribute> get_ServiceKnownTypes();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public Type get_ContractType();
    [CompilerGeneratedAttribute]
public IEnumerable`1<OperationDescription> get_Operations();
}
public class SoapCore.ServiceModel.DataMemberDescription : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequired>k__BackingField;
    public Type Type { get; public set; }
    public string Name { get; public set; }
    public Nullable`1<int> Order { get; public set; }
    public bool IsRequired { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(bool value);
}
public class SoapCore.ServiceModel.OperationDescription : object {
    [CompilerGeneratedAttribute]
private ContractDescription <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SoapAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplyAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <DispatchMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOneWay>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMessageContractResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMessageContractRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private SoapMethodParameterInfo[] <AllParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private SoapMethodParameterInfo[] <InParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private SoapMethodParameterInfo[] <OutParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <Faults>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ServiceKnownTypeAttribute> <ServiceKnownTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ReturnChoice> <ReturnChoices>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <HeaderType>k__BackingField;
    public ContractDescription Contract { get; private set; }
    public string SoapAction { get; private set; }
    public string ReplyAction { get; private set; }
    public string Name { get; private set; }
    public MethodInfo DispatchMethod { get; private set; }
    public bool IsOneWay { get; private set; }
    public bool IsMessageContractResponse { get; private set; }
    public bool IsMessageContractRequest { get; private set; }
    public SoapMethodParameterInfo[] AllParameters { get; private set; }
    public SoapMethodParameterInfo[] InParameters { get; private set; }
    public SoapMethodParameterInfo[] OutParameters { get; private set; }
    public Type[] Faults { get; private set; }
    public string ReturnName { get; private set; }
    public string ReturnElementName { get; private set; }
    public string ReturnNamespace { get; private set; }
    public Type ReturnType { get; private set; }
    public IEnumerable`1<ServiceKnownTypeAttribute> ServiceKnownTypes { get; private set; }
    public IEnumerable`1<ReturnChoice> ReturnChoices { get; private set; }
    public bool ReturnsChoice { get; }
    public Type HeaderType { get; public set; }
    public OperationDescription(ContractDescription contract, MethodInfo operationMethod, OperationContractAttribute contractAttribute, bool generateSoapActionWithoutContractName);
    [CompilerGeneratedAttribute]
public ContractDescription get_Contract();
    [CompilerGeneratedAttribute]
private void set_Contract(ContractDescription value);
    [CompilerGeneratedAttribute]
public string get_SoapAction();
    [CompilerGeneratedAttribute]
private void set_SoapAction(string value);
    [CompilerGeneratedAttribute]
public string get_ReplyAction();
    [CompilerGeneratedAttribute]
private void set_ReplyAction(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public MethodInfo get_DispatchMethod();
    [CompilerGeneratedAttribute]
private void set_DispatchMethod(MethodInfo value);
    [CompilerGeneratedAttribute]
public bool get_IsOneWay();
    [CompilerGeneratedAttribute]
private void set_IsOneWay(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMessageContractResponse();
    [CompilerGeneratedAttribute]
private void set_IsMessageContractResponse(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMessageContractRequest();
    [CompilerGeneratedAttribute]
private void set_IsMessageContractRequest(bool value);
    [CompilerGeneratedAttribute]
public SoapMethodParameterInfo[] get_AllParameters();
    [CompilerGeneratedAttribute]
private void set_AllParameters(SoapMethodParameterInfo[] value);
    [CompilerGeneratedAttribute]
public SoapMethodParameterInfo[] get_InParameters();
    [CompilerGeneratedAttribute]
private void set_InParameters(SoapMethodParameterInfo[] value);
    [CompilerGeneratedAttribute]
public SoapMethodParameterInfo[] get_OutParameters();
    [CompilerGeneratedAttribute]
private void set_OutParameters(SoapMethodParameterInfo[] value);
    [CompilerGeneratedAttribute]
public Type[] get_Faults();
    [CompilerGeneratedAttribute]
private void set_Faults(Type[] value);
    [CompilerGeneratedAttribute]
public string get_ReturnName();
    [CompilerGeneratedAttribute]
private void set_ReturnName(string value);
    [CompilerGeneratedAttribute]
public string get_ReturnElementName();
    [CompilerGeneratedAttribute]
private void set_ReturnElementName(string value);
    [CompilerGeneratedAttribute]
public string get_ReturnNamespace();
    [CompilerGeneratedAttribute]
private void set_ReturnNamespace(string value);
    [CompilerGeneratedAttribute]
public Type get_ReturnType();
    [CompilerGeneratedAttribute]
private void set_ReturnType(Type value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ServiceKnownTypeAttribute> get_ServiceKnownTypes();
    [CompilerGeneratedAttribute]
private void set_ServiceKnownTypes(IEnumerable`1<ServiceKnownTypeAttribute> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ReturnChoice> get_ReturnChoices();
    [CompilerGeneratedAttribute]
private void set_ReturnChoices(IEnumerable`1<ReturnChoice> value);
    public bool get_ReturnsChoice();
    [CompilerGeneratedAttribute]
public Type get_HeaderType();
    [CompilerGeneratedAttribute]
public void set_HeaderType(Type value);
    [IteratorStateMachineAttribute("SoapCore.ServiceModel.OperationDescription/<GetServiceKnownTypesHierarchy>d__79")]
public IEnumerable`1<ServiceKnownTypeAttribute> GetServiceKnownTypesHierarchy();
    private static SoapMethodParameterInfo CreateParameterInfo(ParameterInfo info, int index, ContractDescription contract);
    private static string GetNameByAction(string action);
    private static string GetNameByMethod(MethodInfo operationMethod);
}
public class SoapCore.ServiceModel.ReturnChoice : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    public Type Type { get; private set; }
    public string Name { get; private set; }
    public string Namespace { get; private set; }
    public ReturnChoice(Type type, string name, string namespace);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
}
public class SoapCore.ServiceModel.ServiceDescription : object {
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private ContractDescription <GeneralContract>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ServiceKnownTypeAttribute> <ServiceKnownTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ContractDescription> <Contracts>k__BackingField;
    public Type ServiceType { get; }
    public string ServiceName { get; }
    public ContractDescription GeneralContract { get; }
    public IEnumerable`1<ServiceKnownTypeAttribute> ServiceKnownTypes { get; }
    public IEnumerable`1<ContractDescription> Contracts { get; }
    public IEnumerable`1<OperationDescription> Operations { get; }
    public ServiceDescription(Type serviceType, bool generateSoapActionWithoutContractName);
    [CompilerGeneratedAttribute]
public Type get_ServiceType();
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public ContractDescription get_GeneralContract();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ServiceKnownTypeAttribute> get_ServiceKnownTypes();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ContractDescription> get_Contracts();
    public IEnumerable`1<OperationDescription> get_Operations();
}
[AttributeUsageAttribute("64")]
public class SoapCore.ServiceModel.SoapHeaderAttribute : Attribute {
}
public enum SoapCore.ServiceModel.SoapMethodParameterDirection : Enum {
    public int value__;
    public static SoapMethodParameterDirection InOnly;
    public static SoapMethodParameterDirection OutOnlyRef;
    public static SoapMethodParameterDirection InAndOutRef;
}
public class SoapCore.ServiceModel.SoapMethodParameterInfo : object {
    [CompilerGeneratedAttribute]
private ParameterInfo <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private SoapMethodParameterDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ArrayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ArrayItemName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    public ParameterInfo Parameter { get; private set; }
    public int Index { get; private set; }
    public SoapMethodParameterDirection Direction { get; private set; }
    public string Name { get; private set; }
    public string ArrayName { get; private set; }
    public string ArrayItemName { get; private set; }
    public string Namespace { get; private set; }
    public SoapMethodParameterInfo(ParameterInfo parameter, int index, string name, string arrayName, string arrayItemName, string ns);
    [CompilerGeneratedAttribute]
public ParameterInfo get_Parameter();
    [CompilerGeneratedAttribute]
private void set_Parameter(ParameterInfo value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(int value);
    [CompilerGeneratedAttribute]
public SoapMethodParameterDirection get_Direction();
    [CompilerGeneratedAttribute]
private void set_Direction(SoapMethodParameterDirection value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ArrayName();
    [CompilerGeneratedAttribute]
private void set_ArrayName(string value);
    [CompilerGeneratedAttribute]
public string get_ArrayItemName();
    [CompilerGeneratedAttribute]
private void set_ArrayItemName(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
}
internal class SoapCore.SoapCoreBufferManager : BufferManager {
    public virtual void Clear();
    public virtual void ReturnBuffer(Byte[] buffer);
    public virtual Byte[] TakeBuffer(int bufferSize);
}
public class SoapCore.SoapCoreOptions : object {
    private Nullable`1<bool> _indentWsdl;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private SoapEncoderOptions[] <EncoderOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private SoapSerializer <SoapSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseInsensitivePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ISoapModelBounder <SoapModelBounder>k__BackingField;
    [CompilerGeneratedAttribute]
private Binding <Binding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseBasicAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpGetEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpsGetEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpPostEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpsPostEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BufferThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BufferLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmitXmlDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <StandAloneAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IndentXml>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckXmlCharacters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseMicrosoftGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlNamespaceManager <XmlNamespacePrefixOverrides>k__BackingField;
    [CompilerGeneratedAttribute]
private WsdlFileOptions <WsdlFileOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SerializerIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <AdditionalEnvelopeXmlnsAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateSoapActionWithoutContractName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NormalizeNewLines>k__BackingField;
    public string Path { get; public set; }
    public SoapEncoderOptions[] EncoderOptions { get; public set; }
    public SoapSerializer SoapSerializer { get; public set; }
    public bool CaseInsensitivePath { get; public set; }
    public ISoapModelBounder SoapModelBounder { get; public set; }
    [ObsoleteAttribute]
public Binding Binding { get; public set; }
    public bool UseBasicAuthentication { get; public set; }
    public bool HttpGetEnabled { get; public set; }
    public bool HttpsGetEnabled { get; public set; }
    public bool HttpPostEnabled { get; public set; }
    public bool HttpsPostEnabled { get; public set; }
    [ObsoleteAttribute]
public int BufferThreshold { get; public set; }
    [ObsoleteAttribute]
public long BufferLimit { get; public set; }
    public bool OmitXmlDeclaration { get; public set; }
    public Nullable`1<bool> StandAloneAttribute { get; public set; }
    public bool IndentXml { get; public set; }
    public bool IndentWsdl { get; public set; }
    public bool CheckXmlCharacters { get; public set; }
    public bool UseMicrosoftGuid { get; public set; }
    public XmlNamespaceManager XmlNamespacePrefixOverrides { get; public set; }
    public WsdlFileOptions WsdlFileOptions { get; public set; }
    internal Type SerializerIdentifier { get; internal set; }
    public Dictionary`2<string, string> AdditionalEnvelopeXmlnsAttributes { get; public set; }
    public bool GenerateSoapActionWithoutContractName { get; public set; }
    public bool NormalizeNewLines { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public SoapEncoderOptions[] get_EncoderOptions();
    [CompilerGeneratedAttribute]
public void set_EncoderOptions(SoapEncoderOptions[] value);
    [CompilerGeneratedAttribute]
public SoapSerializer get_SoapSerializer();
    [CompilerGeneratedAttribute]
public void set_SoapSerializer(SoapSerializer value);
    [CompilerGeneratedAttribute]
public bool get_CaseInsensitivePath();
    [CompilerGeneratedAttribute]
public void set_CaseInsensitivePath(bool value);
    [CompilerGeneratedAttribute]
public ISoapModelBounder get_SoapModelBounder();
    [CompilerGeneratedAttribute]
public void set_SoapModelBounder(ISoapModelBounder value);
    [CompilerGeneratedAttribute]
public Binding get_Binding();
    [CompilerGeneratedAttribute]
public void set_Binding(Binding value);
    [CompilerGeneratedAttribute]
public bool get_UseBasicAuthentication();
    [CompilerGeneratedAttribute]
public void set_UseBasicAuthentication(bool value);
    [CompilerGeneratedAttribute]
public bool get_HttpGetEnabled();
    [CompilerGeneratedAttribute]
public void set_HttpGetEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_HttpsGetEnabled();
    [CompilerGeneratedAttribute]
public void set_HttpsGetEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_HttpPostEnabled();
    [CompilerGeneratedAttribute]
public void set_HttpPostEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_HttpsPostEnabled();
    [CompilerGeneratedAttribute]
public void set_HttpsPostEnabled(bool value);
    [CompilerGeneratedAttribute]
public int get_BufferThreshold();
    [CompilerGeneratedAttribute]
public void set_BufferThreshold(int value);
    [CompilerGeneratedAttribute]
public long get_BufferLimit();
    [CompilerGeneratedAttribute]
public void set_BufferLimit(long value);
    [CompilerGeneratedAttribute]
public bool get_OmitXmlDeclaration();
    [CompilerGeneratedAttribute]
public void set_OmitXmlDeclaration(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_StandAloneAttribute();
    [CompilerGeneratedAttribute]
public void set_StandAloneAttribute(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_IndentXml();
    [CompilerGeneratedAttribute]
public void set_IndentXml(bool value);
    public bool get_IndentWsdl();
    public void set_IndentWsdl(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckXmlCharacters();
    [CompilerGeneratedAttribute]
public void set_CheckXmlCharacters(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseMicrosoftGuid();
    [CompilerGeneratedAttribute]
public void set_UseMicrosoftGuid(bool value);
    [CompilerGeneratedAttribute]
public XmlNamespaceManager get_XmlNamespacePrefixOverrides();
    [CompilerGeneratedAttribute]
public void set_XmlNamespacePrefixOverrides(XmlNamespaceManager value);
    [CompilerGeneratedAttribute]
public WsdlFileOptions get_WsdlFileOptions();
    [CompilerGeneratedAttribute]
public void set_WsdlFileOptions(WsdlFileOptions value);
    [CompilerGeneratedAttribute]
internal Type get_SerializerIdentifier();
    [CompilerGeneratedAttribute]
internal void set_SerializerIdentifier(Type value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_AdditionalEnvelopeXmlnsAttributes();
    [CompilerGeneratedAttribute]
public void set_AdditionalEnvelopeXmlnsAttributes(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_GenerateSoapActionWithoutContractName();
    [CompilerGeneratedAttribute]
public void set_GenerateSoapActionWithoutContractName(bool value);
    [CompilerGeneratedAttribute]
public bool get_NormalizeNewLines();
    [CompilerGeneratedAttribute]
public void set_NormalizeNewLines(bool value);
    public void UseCustomSerializer();
}
public class SoapCore.SoapEncoderOptions : object {
    [CompilerGeneratedAttribute]
private MessageVersion <MessageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <WriteEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverwriteResponseContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDictionaryReaderQuotas <ReaderQuotas>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BindingName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PortName>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlNamespaceManager <XmlNamespaceOverrides>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxSoapHeaderSize>k__BackingField;
    public MessageVersion MessageVersion { get; public set; }
    public Encoding WriteEncoding { get; public set; }
    public bool OverwriteResponseContentType { get; public set; }
    public XmlDictionaryReaderQuotas ReaderQuotas { get; public set; }
    public string BindingName { get; public set; }
    public string PortName { get; public set; }
    public XmlNamespaceManager XmlNamespaceOverrides { get; public set; }
    public int MaxSoapHeaderSize { get; public set; }
    [CompilerGeneratedAttribute]
public MessageVersion get_MessageVersion();
    [CompilerGeneratedAttribute]
public void set_MessageVersion(MessageVersion value);
    [CompilerGeneratedAttribute]
public Encoding get_WriteEncoding();
    [CompilerGeneratedAttribute]
public void set_WriteEncoding(Encoding value);
    [CompilerGeneratedAttribute]
public bool get_OverwriteResponseContentType();
    [CompilerGeneratedAttribute]
public void set_OverwriteResponseContentType(bool value);
    [CompilerGeneratedAttribute]
public XmlDictionaryReaderQuotas get_ReaderQuotas();
    [CompilerGeneratedAttribute]
public void set_ReaderQuotas(XmlDictionaryReaderQuotas value);
    [CompilerGeneratedAttribute]
public string get_BindingName();
    [CompilerGeneratedAttribute]
public void set_BindingName(string value);
    [CompilerGeneratedAttribute]
public string get_PortName();
    [CompilerGeneratedAttribute]
public void set_PortName(string value);
    [CompilerGeneratedAttribute]
public XmlNamespaceManager get_XmlNamespaceOverrides();
    [CompilerGeneratedAttribute]
public void set_XmlNamespaceOverrides(XmlNamespaceManager value);
    [CompilerGeneratedAttribute]
public int get_MaxSoapHeaderSize();
    [CompilerGeneratedAttribute]
public void set_MaxSoapHeaderSize(int value);
    internal static SoapEncoderOptions[] ToArray(SoapEncoderOptions options);
}
[ExtensionAttribute]
public static class SoapCore.SoapEndpointExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, string path, SoapEncoderOptions encoder, SoapSerializer serializer, bool caseInsensitivePath, ISoapModelBounder soapModelBounder, WsdlFileOptions wsdlFileOptions, bool indentXml, bool omitXmlDeclaration);
    [ExtensionAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, string path, SoapEncoderOptions encoder, SoapSerializer serializer, bool caseInsensitivePath, ISoapModelBounder soapModelBounder, WsdlFileOptions wsdlFileOptions, bool indentXml, bool omitXmlDeclaration);
    [ExtensionAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, Type type, string path, SoapEncoderOptions encoder, SoapSerializer serializer, bool caseInsensitivePath, ISoapModelBounder soapModelBounder, WsdlFileOptions wsdlFileOptions, bool indentXml, bool omitXmlDeclaration);
    [ExtensionAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, Type type, string path, SoapEncoderOptions encoder, SoapSerializer serializer, bool caseInsensitivePath, ISoapModelBounder soapModelBounder, WsdlFileOptions wsdlFileOptions, bool indentXml, bool omitXmlDeclaration);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, Type type, string path, SoapEncoderOptions encoder, SoapSerializer serializer, bool caseInsensitivePath, ISoapModelBounder soapModelBounder, Binding binding, bool indentXml, bool omitXmlDeclaration);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, Type type, string path, SoapEncoderOptions encoder, SoapSerializer serializer, bool caseInsensitivePath, ISoapModelBounder soapModelBounder, Binding binding, bool indentXml, bool omitXmlDeclaration);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, string path, Binding binding, SoapSerializer serializer, bool caseInsensitivePath, ISoapModelBounder soapModelBounder, WsdlFileOptions wsdlFileOptions, bool indentXml, bool omitXmlDeclaration);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, string path, Binding binding, SoapSerializer serializer, bool caseInsensitivePath, ISoapModelBounder soapModelBounder, bool indentXml, bool omitXmlDeclaration);
    [ExtensionAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, string path, SoapEncoderOptions[] encoders, SoapSerializer serializer, bool caseInsensitivePath, ISoapModelBounder soapModelBounder, bool indentXml, bool omitXmlDeclaration);
    [ExtensionAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, string path, SoapEncoderOptions[] encoders, SoapSerializer serializer, bool caseInsensitivePath, ISoapModelBounder soapModelBounder, bool indentXml, bool omitXmlDeclaration);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, Type type, string path, SoapEncoderOptions[] encoderOptions, SoapSerializer serializer, bool caseInsensitivePath, ISoapModelBounder soapModelBounder, Binding binding, WsdlFileOptions wsdlFileOptions, bool indentXml, bool omitXmlDeclaration);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, Type type, string path, SoapEncoderOptions[] encoderOptions, SoapSerializer serializer, bool caseInsensitivePath, ISoapModelBounder soapModelBounder, Binding binding, WsdlFileOptions wsdlFileOptions, bool indentXml, bool omitXmlDeclaration);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, Type type, string path, Binding binding, SoapSerializer serializer, bool caseInsensitivePath, ISoapModelBounder soapModelBounder, WsdlFileOptions wsdlFileOptions, bool indentXml, bool omitXmlDeclaration);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, Type type, string path, Binding binding, SoapSerializer serializer, bool caseInsensitivePath, ISoapModelBounder soapModelBounder, WsdlFileOptions wsdlFileOptions, bool indentXml, bool omitXmlDeclaration);
    [ExtensionAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, Type serviceType, Action`1<SoapCoreOptions> options);
    [ExtensionAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, Action`1<SoapCoreOptions> options);
    [ExtensionAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, Action`1<SoapCoreOptions> options);
    [ExtensionAttribute]
public static IApplicationBuilder UseSoapEndpoint(IApplicationBuilder builder, Type serviceType, Action`1<SoapCoreOptions> options);
    [ExtensionAttribute]
public static IServiceCollection AddSoapCore(IServiceCollection serviceCollection);
    [ExtensionAttribute]
public static IServiceCollection AddSoapCore(IServiceCollection serviceCollection);
    [ExtensionAttribute]
public static IServiceCollection AddSoapExceptionTransformer(IServiceCollection serviceCollection, Func`2<Exception, string> transformer);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IServiceCollection AddSoapMessageInspector(IServiceCollection serviceCollection, IMessageInspector messageInspector);
    [ExtensionAttribute]
public static IServiceCollection AddSoapMessageInspector(IServiceCollection serviceCollection);
    [ExtensionAttribute]
public static IServiceCollection AddSoapMessageInspector(IServiceCollection serviceCollection, IMessageInspector2 messageInspector);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IServiceCollection AddSoapMessageFilter(IServiceCollection serviceCollection, IMessageFilter messageFilter);
    [ExtensionAttribute]
public static IServiceCollection AddSoapMessageFilter(IServiceCollection serviceCollection, IAsyncMessageFilter messageFilter);
    [ExtensionAttribute]
public static IServiceCollection AddSoapWsSecurityFilter(IServiceCollection serviceCollection, string username, string password);
    [ExtensionAttribute]
public static IServiceCollection AddSoapModelBindingFilter(IServiceCollection serviceCollection, IModelBindingFilter modelBindingFilter);
    [ExtensionAttribute]
public static IServiceCollection AddSoapServiceOperationTuner(IServiceCollection serviceCollection);
    [ExtensionAttribute]
public static IServiceCollection AddSoapServiceOperationTuner(IServiceCollection serviceCollection, IServiceOperationTuner serviceOperationTuner);
    [ExtensionAttribute]
public static IServiceCollection AddSoapMessageProcessor(IServiceCollection serviceCollection, ISoapMessageProcessor messageProcessor);
    [ExtensionAttribute]
public static IServiceCollection AddSoapMessageProcessor(IServiceCollection serviceCollection, Func`4<Message, HttpContext, Func`2<Message, Task`1<Message>>, Task`1<Message>> messageProcessor);
    [ExtensionAttribute]
public static IServiceCollection AddSoapMessageProcessor(IServiceCollection serviceCollection, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddCustomSoapMessageSerializer(IServiceCollection serviceCollection, IXmlSerializationHandler messageSerializer);
    [ExtensionAttribute]
public static IServiceCollection AddCustomSoapMessageSerializer(IServiceCollection serviceCollection, ServiceLifetime lifetime);
}
public class SoapCore.SoapEndpointMiddleware`1 : object {
    private ILogger`1<SoapEndpointMiddleware`1<T_MESSAGE>> _logger;
    private RequestDelegate _next;
    private SoapOptions _options;
    private IServiceProvider _serviceProvider;
    private ServiceDescription _service;
    private StringComparison _pathComparisonStrategy;
    private SoapMessageEncoder[] _messageEncoders;
    private IXmlSerializationHandler _serializerHandler;
    [ObsoleteAttribute]
public SoapEndpointMiddleware`1(ILogger`1<SoapEndpointMiddleware`1<T_MESSAGE>> logger, RequestDelegate next, IServiceProvider serviceProvider, Type serviceType, string path, SoapEncoderOptions[] encoderOptions, SoapSerializer serializer, bool caseInsensitivePath, ISoapModelBounder soapModelBounder, Binding binding, bool httpGetEnabled, bool httpsGetEnabled);
    public SoapEndpointMiddleware`1(ILogger`1<SoapEndpointMiddleware`1<T_MESSAGE>> logger, RequestDelegate next, SoapOptions options, IServiceProvider serviceProvider);
    [AsyncStateMachineAttribute("SoapCore.SoapEndpointMiddleware`1/<Invoke>d__10")]
public Task Invoke(HttpContext httpContext);
    private static Task WriteMessageAsync(SoapMessageEncoder messageEncoder, Message responseMessage, HttpContext httpContext, bool indentXml);
    private static string TryGetMultipartBoundary(HttpRequest request);
    [AsyncStateMachineAttribute("SoapCore.SoapEndpointMiddleware`1/<ReadMessageAsync>d__13")]
private Task`1<Message> ReadMessageAsync(HttpContext httpContext, SoapMessageEncoder messageEncoder);
    [AsyncStateMachineAttribute("SoapCore.SoapEndpointMiddleware`1/<ProcessMeta>d__14")]
private Task ProcessMeta(HttpContext httpContext, bool showDocumentation);
    [AsyncStateMachineAttribute("SoapCore.SoapEndpointMiddleware`1/<ProcessOperation>d__15")]
private Task ProcessOperation(HttpContext httpContext, IServiceProvider serviceProvider);
    [AsyncStateMachineAttribute("SoapCore.SoapEndpointMiddleware`1/<ProcessHttpOperation>d__16")]
private Task ProcessHttpOperation(HttpContext context, IServiceProvider serviceProvider, string methodName);
    private Func`2<Message, Task`1<Message>> MakeProcessorPipe(ISoapMessageProcessor[] soapMessageProcessors, HttpContext httpContext, Func`2<Message, Task`1<Message>> processMessageFunc);
    [AsyncStateMachineAttribute("SoapCore.SoapEndpointMiddleware`1/<ProcessMessage>d__18")]
private Task`1<Message> ProcessMessage(Message requestMessage, SoapMessageEncoder messageEncoder, IAsyncMessageFilter[] asyncMessageFilters, HttpContext httpContext, IServiceProvider serviceProvider);
    private bool TryGetOperation(string methodName, OperationDescription& operation);
    private Message CreateResponseMessage(OperationDescription operation, object responseObject, Dictionary`2<string, object> resultOutDictionary, string soapAction, Message requestMessage, SoapMessageEncoder soapMessageEncoder);
    private void ExecuteFiltersAndTune(HttpContext httpContext, IServiceProvider serviceProvider, OperationDescription operation, Object[] arguments, object serviceInstance);
    private void SetMessageHeadersToProperty(Message requestMessage, object serviceInstance);
    private Object[] GetRequestArguments(Message requestMessage, XmlDictionaryReader xmlReader, OperationDescription operation, HttpContext httpContext);
    private void DeserializeParameters(Message requestMessage, XmlDictionaryReader xmlReader, Type parameterType, SoapMethodParameterInfo parameterInfo, string namespace, IEnumerable`1<Type> serviceKnownTypes, MessageContractAttribute messageContractAttribute, Object[] arguments);
    private Message CreateErrorResponseMessage(Exception exception, int statusCode, IServiceProvider serviceProvider, Message requestMessage, SoapMessageEncoder messageEncoder, HttpContext httpContext);
    private void SetHttpResponse(HttpContext httpContext, Message message);
    private string GetServerUrl(WsdlFileOptions options, HttpContext httpContext);
    private MetaFromFile GetMeta(HttpContext httpContext);
    [AsyncStateMachineAttribute("SoapCore.SoapEndpointMiddleware`1/<ProcessXSD>d__29")]
private Task ProcessXSD(HttpContext httpContext);
    [AsyncStateMachineAttribute("SoapCore.SoapEndpointMiddleware`1/<ProcessWsdlImport>d__30")]
private Task ProcessWsdlImport(HttpContext httpContext);
    [AsyncStateMachineAttribute("SoapCore.SoapEndpointMiddleware`1/<ProcessMetaFromFile>d__31")]
private Task ProcessMetaFromFile(HttpContext httpContext, bool showDocumentation);
    private XmlNamespaceManager GetXmlNamespaceManager(SoapMessageEncoder messageEncoder);
    [CompilerGeneratedAttribute]
internal static bool <ProcessHttpOperation>g__TryGetRequestValue|16_0(string key, StringValues& value, <>c__DisplayClass16_0& );
}
public class SoapCore.SoapOptions : object {
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private SoapEncoderOptions[] <EncoderOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private SoapSerializer <SoapSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseInsensitivePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ISoapModelBounder <SoapModelBounder>k__BackingField;
    [CompilerGeneratedAttribute]
private Binding <Binding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseBasicAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BufferThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BufferLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpGetEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpsGetEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpPostEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpsPostEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SerializerIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmitXmlDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <StandAloneAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IndentXml>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IndentWsdl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseMicrosoftGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckXmlCharacters>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlNamespaceManager <XmlNamespacePrefixOverrides>k__BackingField;
    [CompilerGeneratedAttribute]
private WsdlFileOptions <WsdlFileOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <AdditionalEnvelopeXmlnsAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateSoapActionWithoutContractName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NormalizeNewLines>k__BackingField;
    [CompilerGeneratedAttribute]
private IWsdlOperationNameGenerator <WsdlOperationNameGenerator>k__BackingField;
    public Type ServiceType { get; public set; }
    public string Path { get; public set; }
    public SoapEncoderOptions[] EncoderOptions { get; public set; }
    public SoapSerializer SoapSerializer { get; public set; }
    public bool CaseInsensitivePath { get; public set; }
    public ISoapModelBounder SoapModelBounder { get; public set; }
    [ObsoleteAttribute]
public Binding Binding { get; public set; }
    public bool UseBasicAuthentication { get; public set; }
    [ObsoleteAttribute]
public int BufferThreshold { get; public set; }
    [ObsoleteAttribute]
public long BufferLimit { get; public set; }
    public bool HttpGetEnabled { get; public set; }
    public bool HttpsGetEnabled { get; public set; }
    public bool HttpPostEnabled { get; public set; }
    public bool HttpsPostEnabled { get; public set; }
    public Type SerializerIdentifier { get; public set; }
    public bool OmitXmlDeclaration { get; public set; }
    public Nullable`1<bool> StandAloneAttribute { get; public set; }
    public bool IndentXml { get; public set; }
    public bool IndentWsdl { get; public set; }
    public bool UseMicrosoftGuid { get; public set; }
    public bool CheckXmlCharacters { get; public set; }
    public XmlNamespaceManager XmlNamespacePrefixOverrides { get; public set; }
    public WsdlFileOptions WsdlFileOptions { get; public set; }
    public Dictionary`2<string, string> AdditionalEnvelopeXmlnsAttributes { get; public set; }
    public bool GenerateSoapActionWithoutContractName { get; public set; }
    public bool NormalizeNewLines { get; public set; }
    public IWsdlOperationNameGenerator WsdlOperationNameGenerator { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_ServiceType();
    [CompilerGeneratedAttribute]
public void set_ServiceType(Type value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public SoapEncoderOptions[] get_EncoderOptions();
    [CompilerGeneratedAttribute]
public void set_EncoderOptions(SoapEncoderOptions[] value);
    [CompilerGeneratedAttribute]
public SoapSerializer get_SoapSerializer();
    [CompilerGeneratedAttribute]
public void set_SoapSerializer(SoapSerializer value);
    [CompilerGeneratedAttribute]
public bool get_CaseInsensitivePath();
    [CompilerGeneratedAttribute]
public void set_CaseInsensitivePath(bool value);
    [CompilerGeneratedAttribute]
public ISoapModelBounder get_SoapModelBounder();
    [CompilerGeneratedAttribute]
public void set_SoapModelBounder(ISoapModelBounder value);
    [CompilerGeneratedAttribute]
public Binding get_Binding();
    [CompilerGeneratedAttribute]
public void set_Binding(Binding value);
    [CompilerGeneratedAttribute]
public bool get_UseBasicAuthentication();
    [CompilerGeneratedAttribute]
public void set_UseBasicAuthentication(bool value);
    [CompilerGeneratedAttribute]
public int get_BufferThreshold();
    [CompilerGeneratedAttribute]
public void set_BufferThreshold(int value);
    [CompilerGeneratedAttribute]
public long get_BufferLimit();
    [CompilerGeneratedAttribute]
public void set_BufferLimit(long value);
    [CompilerGeneratedAttribute]
public bool get_HttpGetEnabled();
    [CompilerGeneratedAttribute]
public void set_HttpGetEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_HttpsGetEnabled();
    [CompilerGeneratedAttribute]
public void set_HttpsGetEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_HttpPostEnabled();
    [CompilerGeneratedAttribute]
public void set_HttpPostEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_HttpsPostEnabled();
    [CompilerGeneratedAttribute]
public void set_HttpsPostEnabled(bool value);
    [CompilerGeneratedAttribute]
public Type get_SerializerIdentifier();
    [CompilerGeneratedAttribute]
public void set_SerializerIdentifier(Type value);
    [CompilerGeneratedAttribute]
public bool get_OmitXmlDeclaration();
    [CompilerGeneratedAttribute]
public void set_OmitXmlDeclaration(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_StandAloneAttribute();
    [CompilerGeneratedAttribute]
public void set_StandAloneAttribute(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_IndentXml();
    [CompilerGeneratedAttribute]
public void set_IndentXml(bool value);
    [CompilerGeneratedAttribute]
public bool get_IndentWsdl();
    [CompilerGeneratedAttribute]
public void set_IndentWsdl(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseMicrosoftGuid();
    [CompilerGeneratedAttribute]
public void set_UseMicrosoftGuid(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckXmlCharacters();
    [CompilerGeneratedAttribute]
public void set_CheckXmlCharacters(bool value);
    [CompilerGeneratedAttribute]
public XmlNamespaceManager get_XmlNamespacePrefixOverrides();
    [CompilerGeneratedAttribute]
public void set_XmlNamespacePrefixOverrides(XmlNamespaceManager value);
    [CompilerGeneratedAttribute]
public WsdlFileOptions get_WsdlFileOptions();
    [CompilerGeneratedAttribute]
public void set_WsdlFileOptions(WsdlFileOptions value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_AdditionalEnvelopeXmlnsAttributes();
    [CompilerGeneratedAttribute]
public void set_AdditionalEnvelopeXmlnsAttributes(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_GenerateSoapActionWithoutContractName();
    [CompilerGeneratedAttribute]
public void set_GenerateSoapActionWithoutContractName(bool value);
    [CompilerGeneratedAttribute]
public bool get_NormalizeNewLines();
    [CompilerGeneratedAttribute]
public void set_NormalizeNewLines(bool value);
    [CompilerGeneratedAttribute]
public IWsdlOperationNameGenerator get_WsdlOperationNameGenerator();
    [CompilerGeneratedAttribute]
public void set_WsdlOperationNameGenerator(IWsdlOperationNameGenerator value);
    [ObsoleteAttribute]
public static SoapOptions FromSoapCoreOptions(SoapCoreOptions opt);
    public static SoapOptions FromSoapCoreOptions(SoapCoreOptions opt, Type serviceType);
}
public enum SoapCore.SoapSerializer : Enum {
    public int value__;
    public static SoapSerializer XmlSerializer;
    public static SoapSerializer DataContractSerializer;
}
public class SoapCore.TrailingServicePathTuner : object {
    public virtual void ConvertPath(HttpContext httpContext);
}
internal class SoapCore.TypesComparer : object {
    private Func`2<Type, string> _getTypeNameFunc;
    public TypesComparer(Func`2<Type, string> getTypeNameFunc);
    public sealed virtual bool Equals(Type x, Type y);
    public sealed virtual int GetHashCode(Type obj);
}
public class SoapCore.WebServiceWSDLMapping : object {
    [CompilerGeneratedAttribute]
private string <UrlOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WsdlFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WSDLFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaFolder>k__BackingField;
    public string UrlOverride { get; public set; }
    public string WsdlFile { get; public set; }
    public string WSDLFolder { get; public set; }
    public string SchemaFolder { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UrlOverride();
    [CompilerGeneratedAttribute]
public void set_UrlOverride(string value);
    [CompilerGeneratedAttribute]
public string get_WsdlFile();
    [CompilerGeneratedAttribute]
public void set_WsdlFile(string value);
    [CompilerGeneratedAttribute]
public string get_WSDLFolder();
    [CompilerGeneratedAttribute]
public void set_WSDLFolder(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaFolder();
    [CompilerGeneratedAttribute]
public void set_SchemaFolder(string value);
}
public class SoapCore.WsdlFileOptions : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, WebServiceWSDLMapping> <WebServiceWSDLMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemeOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<WsdlFileOptions, HttpContext, string> <UrlOverrideFunc>k__BackingField;
    public Dictionary`2<string, WebServiceWSDLMapping> WebServiceWSDLMapping { get; public set; }
    public string UrlOverride { get; public set; }
    public string SchemeOverride { get; public set; }
    public string VirtualPath { get; public set; }
    public string AppPath { get; public set; }
    public Func`3<WsdlFileOptions, HttpContext, string> UrlOverrideFunc { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, WebServiceWSDLMapping> get_WebServiceWSDLMapping();
    [CompilerGeneratedAttribute]
public virtual void set_WebServiceWSDLMapping(Dictionary`2<string, WebServiceWSDLMapping> value);
    [CompilerGeneratedAttribute]
public string get_UrlOverride();
    [CompilerGeneratedAttribute]
public void set_UrlOverride(string value);
    [CompilerGeneratedAttribute]
public string get_SchemeOverride();
    [CompilerGeneratedAttribute]
public void set_SchemeOverride(string value);
    [CompilerGeneratedAttribute]
public string get_VirtualPath();
    [CompilerGeneratedAttribute]
public void set_VirtualPath(string value);
    [CompilerGeneratedAttribute]
public string get_AppPath();
    [CompilerGeneratedAttribute]
public void set_AppPath(string value);
    [CompilerGeneratedAttribute]
public Func`3<WsdlFileOptions, HttpContext, string> get_UrlOverrideFunc();
    [CompilerGeneratedAttribute]
public void set_UrlOverrideFunc(Func`3<WsdlFileOptions, HttpContext, string> value);
}
public class SoapCore.WsdlFileOptionsCaseInsensitive : WsdlFileOptions {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, WebServiceWSDLMapping> <WebServiceWSDLMapping>k__BackingField;
    public Dictionary`2<string, WebServiceWSDLMapping> WebServiceWSDLMapping { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, WebServiceWSDLMapping> get_WebServiceWSDLMapping();
    [CompilerGeneratedAttribute]
public virtual void set_WebServiceWSDLMapping(Dictionary`2<string, WebServiceWSDLMapping> value);
}
public class SoapCore.WsMessageFilter : object {
    private static string _passwordTextType;
    private string _username;
    private string _password;
    private string _authMissingErrorMessage;
    private string _authInvalidErrorMessage;
    public WsMessageFilter(string username, string password);
    public WsMessageFilter(string username, string password, string authMissingErrorMessage, string authInvalidErrorMessage);
    public sealed virtual Task OnRequestExecuting(Message message);
    public sealed virtual Task OnResponseExecuting(Message message);
    private WsUsernameToken GetWsUsernameToken(Message message);
    private bool IsPasswordClearText(PasswordString password);
    private void ValidateWsUsernameTokenModel(WsUsernameToken wsUsernameToken);
    private void ValidateWsUsernameToken(WsUsernameToken wsUsernameToken);
}
[XmlRootAttribute("UsernameToken")]
public class SoapCore.WsUsernameToken : object {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private PasswordString <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Created>k__BackingField;
    [XmlElementAttribute("Username")]
public string Username { get; public set; }
    [XmlElementAttribute("Password")]
public PasswordString Password { get; public set; }
    [XmlElementAttribute("Nonce")]
public string Nonce { get; public set; }
    [XmlElementAttribute("Created")]
public string Created { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public PasswordString get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(PasswordString value);
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public string get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(string value);
}
[ExtensionAttribute]
public static class SoapCore.XmlSerializerExtensions : object {
    [ExtensionAttribute]
public static T[] DeserializeArray(XmlSerializer serializer, string localname, string ns, XmlReader xmlReader);
    [ExtensionAttribute]
public static void SerializeArray(XmlSerializer serializer, XmlWriter xmlWriter, Object[] os);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
