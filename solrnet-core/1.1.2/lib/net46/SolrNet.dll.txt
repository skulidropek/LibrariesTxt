public class HttpWebAdapters.Adapters.HttpWebRequestAdapter : object {
    private HttpWebRequest request;
    public HttpWebRequestMethod Method { get; public set; }
    public bool AllowAutoRedirect { get; public set; }
    public bool AllowWriteStreamBuffering { get; public set; }
    public bool HaveResponse { get; }
    public bool KeepAlive { get; public set; }
    public bool Pipelined { get; public set; }
    public bool PreAuthenticate { get; public set; }
    public bool UnsafeAuthenticatedConnectionSharing { get; public set; }
    public bool SendChunked { get; public set; }
    public DecompressionMethods AutomaticDecompression { get; public set; }
    public int MaximumResponseHeadersLength { get; public set; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public CookieContainer CookieContainer { get; public set; }
    public Uri RequestUri { get; }
    public long ContentLength { get; public set; }
    public int Timeout { get; public set; }
    public int ReadWriteTimeout { get; public set; }
    public Uri Address { get; }
    public ServicePoint ServicePoint { get; }
    public int MaximumAutomaticRedirections { get; public set; }
    public ICredentials Credentials { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public string ConnectionGroupName { get; public set; }
    public WebHeaderCollection Headers { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public Version ProtocolVersion { get; public set; }
    public string ContentType { get; public set; }
    public string MediaType { get; public set; }
    public string TransferEncoding { get; public set; }
    public string Connection { get; public set; }
    public string Accept { get; public set; }
    public string Referer { get; public set; }
    public string UserAgent { get; public set; }
    public string Expect { get; public set; }
    public DateTime IfModifiedSince { get; public set; }
    public HttpWebRequestAdapter(HttpWebRequest request);
    public sealed virtual HttpWebRequestMethod get_Method();
    public sealed virtual void set_Method(HttpWebRequestMethod value);
    public sealed virtual IHttpWebResponse GetResponse();
    public sealed virtual IAsyncResult BeginGetResponse(AsyncCallback callback, object state);
    public sealed virtual IHttpWebResponse EndGetResponse(IAsyncResult result);
    public sealed virtual IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state);
    public sealed virtual Stream EndGetRequestStream(IAsyncResult result);
    public sealed virtual Task`1<Stream> GetRequestStreamAsync();
    public sealed virtual Task`1<WebResponse> GetResponseAsync();
    public sealed virtual Stream GetRequestStream();
    public sealed virtual void Abort();
    public sealed virtual void AddRange(int from, int to);
    public sealed virtual void AddRange(int range);
    public sealed virtual void AddRange(string rangeSpecifier, int from, int to);
    public sealed virtual void AddRange(string rangeSpecifier, int range);
    public sealed virtual bool get_AllowAutoRedirect();
    public sealed virtual void set_AllowAutoRedirect(bool value);
    public sealed virtual bool get_AllowWriteStreamBuffering();
    public sealed virtual void set_AllowWriteStreamBuffering(bool value);
    public sealed virtual bool get_HaveResponse();
    public sealed virtual bool get_KeepAlive();
    public sealed virtual void set_KeepAlive(bool value);
    public sealed virtual bool get_Pipelined();
    public sealed virtual void set_Pipelined(bool value);
    public sealed virtual bool get_PreAuthenticate();
    public sealed virtual void set_PreAuthenticate(bool value);
    public sealed virtual bool get_UnsafeAuthenticatedConnectionSharing();
    public sealed virtual void set_UnsafeAuthenticatedConnectionSharing(bool value);
    public sealed virtual bool get_SendChunked();
    public sealed virtual void set_SendChunked(bool value);
    public sealed virtual DecompressionMethods get_AutomaticDecompression();
    public sealed virtual void set_AutomaticDecompression(DecompressionMethods value);
    public sealed virtual int get_MaximumResponseHeadersLength();
    public sealed virtual void set_MaximumResponseHeadersLength(int value);
    public sealed virtual X509CertificateCollection get_ClientCertificates();
    public sealed virtual void set_ClientCertificates(X509CertificateCollection value);
    public sealed virtual CookieContainer get_CookieContainer();
    public sealed virtual void set_CookieContainer(CookieContainer value);
    public sealed virtual Uri get_RequestUri();
    public sealed virtual long get_ContentLength();
    public sealed virtual void set_ContentLength(long value);
    public sealed virtual int get_Timeout();
    public sealed virtual void set_Timeout(int value);
    public sealed virtual int get_ReadWriteTimeout();
    public sealed virtual void set_ReadWriteTimeout(int value);
    public sealed virtual Uri get_Address();
    public sealed virtual ServicePoint get_ServicePoint();
    public sealed virtual int get_MaximumAutomaticRedirections();
    public sealed virtual void set_MaximumAutomaticRedirections(int value);
    public sealed virtual ICredentials get_Credentials();
    public sealed virtual void set_Credentials(ICredentials value);
    public sealed virtual bool get_UseDefaultCredentials();
    public sealed virtual void set_UseDefaultCredentials(bool value);
    public sealed virtual string get_ConnectionGroupName();
    public sealed virtual void set_ConnectionGroupName(string value);
    public sealed virtual WebHeaderCollection get_Headers();
    public sealed virtual void set_Headers(WebHeaderCollection value);
    public sealed virtual IWebProxy get_Proxy();
    public sealed virtual void set_Proxy(IWebProxy value);
    public sealed virtual Version get_ProtocolVersion();
    public sealed virtual void set_ProtocolVersion(Version value);
    public sealed virtual string get_ContentType();
    public sealed virtual void set_ContentType(string value);
    public sealed virtual string get_MediaType();
    public sealed virtual void set_MediaType(string value);
    public sealed virtual string get_TransferEncoding();
    public sealed virtual void set_TransferEncoding(string value);
    public sealed virtual string get_Connection();
    public sealed virtual void set_Connection(string value);
    public sealed virtual string get_Accept();
    public sealed virtual void set_Accept(string value);
    public sealed virtual string get_Referer();
    public sealed virtual void set_Referer(string value);
    public sealed virtual string get_UserAgent();
    public sealed virtual void set_UserAgent(string value);
    public sealed virtual string get_Expect();
    public sealed virtual void set_Expect(string value);
    public sealed virtual DateTime get_IfModifiedSince();
    public sealed virtual void set_IfModifiedSince(DateTime value);
}
public class HttpWebAdapters.Adapters.HttpWebResponseAdapter : object {
    private WebResponse response;
    public CookieCollection Cookies { get; public set; }
    public string ContentEncoding { get; }
    public string CharacterSet { get; }
    public string Server { get; }
    public DateTime LastModified { get; }
    public HttpStatusCode StatusCode { get; }
    public string StatusDescription { get; }
    public Version ProtocolVersion { get; }
    public string Method { get; }
    public bool IsFromCache { get; }
    public bool IsMutuallyAuthenticated { get; }
    public long ContentLength { get; public set; }
    public string ContentType { get; public set; }
    public Uri ResponseUri { get; }
    public WebHeaderCollection Headers { get; }
    public HttpWebResponseAdapter(WebResponse response);
    public sealed virtual string GetResponseHeader(string headerName);
    public sealed virtual CookieCollection get_Cookies();
    public sealed virtual void set_Cookies(CookieCollection value);
    public sealed virtual string get_ContentEncoding();
    public sealed virtual string get_CharacterSet();
    public sealed virtual string get_Server();
    public sealed virtual DateTime get_LastModified();
    public sealed virtual HttpStatusCode get_StatusCode();
    public sealed virtual string get_StatusDescription();
    public sealed virtual Version get_ProtocolVersion();
    public sealed virtual string get_Method();
    public sealed virtual void Close();
    public sealed virtual Stream GetResponseStream();
    public sealed virtual bool get_IsFromCache();
    public sealed virtual bool get_IsMutuallyAuthenticated();
    public sealed virtual long get_ContentLength();
    public sealed virtual void set_ContentLength(long value);
    public sealed virtual string get_ContentType();
    public sealed virtual void set_ContentType(string value);
    public sealed virtual Uri get_ResponseUri();
    public sealed virtual WebHeaderCollection get_Headers();
    public sealed virtual void Dispose();
}
public class HttpWebAdapters.BasicAuthHttpWebRequestFactory : object {
    private string username;
    private string password;
    public BasicAuthHttpWebRequestFactory(string username, string password);
    public IHttpWebRequest Create(string url);
    public sealed virtual IHttpWebRequest Create(Uri url);
}
public class HttpWebAdapters.ClientCertificateHttpWebRequestFactory : object {
    private X509Certificate2 certificate;
    public ClientCertificateHttpWebRequestFactory(X509Certificate2 certificate);
    public sealed virtual IHttpWebRequest Create(Uri url);
    public IHttpWebRequest Create(string url);
}
public class HttpWebAdapters.HttpWebRequestFactory : object {
    public IHttpWebRequest Create(string url);
    public sealed virtual IHttpWebRequest Create(Uri url);
}
public class HttpWebAdapters.HttpWebRequestMethod : object {
    private string method;
    private static string SGET;
    private static string SPOST;
    public static HttpWebRequestMethod GET;
    public static HttpWebRequestMethod POST;
    private HttpWebRequestMethod(string m);
    private static HttpWebRequestMethod();
    public virtual string ToString();
    public static HttpWebRequestMethod Parse(string s);
}
public interface HttpWebAdapters.IHttpWebRequest {
    public HttpWebRequestMethod Method { get; public set; }
    public bool AllowAutoRedirect { get; public set; }
    public bool AllowWriteStreamBuffering { get; public set; }
    public bool HaveResponse { get; }
    public bool KeepAlive { get; public set; }
    public bool Pipelined { get; public set; }
    public bool PreAuthenticate { get; public set; }
    public bool UnsafeAuthenticatedConnectionSharing { get; public set; }
    public bool SendChunked { get; public set; }
    public DecompressionMethods AutomaticDecompression { get; public set; }
    public int MaximumResponseHeadersLength { get; public set; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public CookieContainer CookieContainer { get; public set; }
    public Uri RequestUri { get; }
    public long ContentLength { get; public set; }
    public int Timeout { get; public set; }
    public int ReadWriteTimeout { get; public set; }
    public Uri Address { get; }
    public ServicePoint ServicePoint { get; }
    public int MaximumAutomaticRedirections { get; public set; }
    public ICredentials Credentials { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public string ConnectionGroupName { get; public set; }
    public WebHeaderCollection Headers { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public Version ProtocolVersion { get; public set; }
    public string ContentType { get; public set; }
    public string MediaType { get; public set; }
    public string TransferEncoding { get; public set; }
    public string Connection { get; public set; }
    public string Accept { get; public set; }
    public string Referer { get; public set; }
    public string UserAgent { get; public set; }
    public string Expect { get; public set; }
    public DateTime IfModifiedSince { get; public set; }
    public abstract virtual HttpWebRequestMethod get_Method();
    public abstract virtual void set_Method(HttpWebRequestMethod value);
    public abstract virtual IHttpWebResponse GetResponse();
    public abstract virtual Stream GetRequestStream();
    public abstract virtual void Abort();
    public abstract virtual void AddRange(int from, int to);
    public abstract virtual void AddRange(int range);
    public abstract virtual void AddRange(string rangeSpecifier, int from, int to);
    public abstract virtual void AddRange(string rangeSpecifier, int range);
    public abstract virtual bool get_AllowAutoRedirect();
    public abstract virtual void set_AllowAutoRedirect(bool value);
    public abstract virtual bool get_AllowWriteStreamBuffering();
    public abstract virtual void set_AllowWriteStreamBuffering(bool value);
    public abstract virtual bool get_HaveResponse();
    public abstract virtual bool get_KeepAlive();
    public abstract virtual void set_KeepAlive(bool value);
    public abstract virtual bool get_Pipelined();
    public abstract virtual void set_Pipelined(bool value);
    public abstract virtual bool get_PreAuthenticate();
    public abstract virtual void set_PreAuthenticate(bool value);
    public abstract virtual bool get_UnsafeAuthenticatedConnectionSharing();
    public abstract virtual void set_UnsafeAuthenticatedConnectionSharing(bool value);
    public abstract virtual bool get_SendChunked();
    public abstract virtual void set_SendChunked(bool value);
    public abstract virtual DecompressionMethods get_AutomaticDecompression();
    public abstract virtual void set_AutomaticDecompression(DecompressionMethods value);
    public abstract virtual int get_MaximumResponseHeadersLength();
    public abstract virtual void set_MaximumResponseHeadersLength(int value);
    public abstract virtual X509CertificateCollection get_ClientCertificates();
    public abstract virtual void set_ClientCertificates(X509CertificateCollection value);
    public abstract virtual CookieContainer get_CookieContainer();
    public abstract virtual void set_CookieContainer(CookieContainer value);
    public abstract virtual Uri get_RequestUri();
    public abstract virtual long get_ContentLength();
    public abstract virtual void set_ContentLength(long value);
    public abstract virtual int get_Timeout();
    public abstract virtual void set_Timeout(int value);
    public abstract virtual int get_ReadWriteTimeout();
    public abstract virtual void set_ReadWriteTimeout(int value);
    public abstract virtual Uri get_Address();
    public abstract virtual ServicePoint get_ServicePoint();
    public abstract virtual int get_MaximumAutomaticRedirections();
    public abstract virtual void set_MaximumAutomaticRedirections(int value);
    public abstract virtual ICredentials get_Credentials();
    public abstract virtual void set_Credentials(ICredentials value);
    public abstract virtual bool get_UseDefaultCredentials();
    public abstract virtual void set_UseDefaultCredentials(bool value);
    public abstract virtual string get_ConnectionGroupName();
    public abstract virtual void set_ConnectionGroupName(string value);
    public abstract virtual WebHeaderCollection get_Headers();
    public abstract virtual void set_Headers(WebHeaderCollection value);
    public abstract virtual IWebProxy get_Proxy();
    public abstract virtual void set_Proxy(IWebProxy value);
    public abstract virtual Version get_ProtocolVersion();
    public abstract virtual void set_ProtocolVersion(Version value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual string get_MediaType();
    public abstract virtual void set_MediaType(string value);
    public abstract virtual string get_TransferEncoding();
    public abstract virtual void set_TransferEncoding(string value);
    public abstract virtual string get_Connection();
    public abstract virtual void set_Connection(string value);
    public abstract virtual string get_Accept();
    public abstract virtual void set_Accept(string value);
    public abstract virtual string get_Referer();
    public abstract virtual void set_Referer(string value);
    public abstract virtual string get_UserAgent();
    public abstract virtual void set_UserAgent(string value);
    public abstract virtual string get_Expect();
    public abstract virtual void set_Expect(string value);
    public abstract virtual DateTime get_IfModifiedSince();
    public abstract virtual void set_IfModifiedSince(DateTime value);
    public abstract virtual IAsyncResult BeginGetResponse(AsyncCallback callback, object state);
    public abstract virtual IHttpWebResponse EndGetResponse(IAsyncResult result);
    public abstract virtual IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state);
    public abstract virtual Stream EndGetRequestStream(IAsyncResult result);
    public abstract virtual Task`1<Stream> GetRequestStreamAsync();
    public abstract virtual Task`1<WebResponse> GetResponseAsync();
}
public interface HttpWebAdapters.IHttpWebRequestFactory {
    public abstract virtual IHttpWebRequest Create(Uri url);
}
public interface HttpWebAdapters.IHttpWebResponse {
    public CookieCollection Cookies { get; public set; }
    public string ContentEncoding { get; }
    public string CharacterSet { get; }
    public string Server { get; }
    public DateTime LastModified { get; }
    public HttpStatusCode StatusCode { get; }
    public string StatusDescription { get; }
    public Version ProtocolVersion { get; }
    public string Method { get; }
    public bool IsFromCache { get; }
    public bool IsMutuallyAuthenticated { get; }
    public long ContentLength { get; public set; }
    public string ContentType { get; public set; }
    public Uri ResponseUri { get; }
    public WebHeaderCollection Headers { get; }
    public abstract virtual string GetResponseHeader(string headerName);
    public abstract virtual CookieCollection get_Cookies();
    public abstract virtual void set_Cookies(CookieCollection value);
    public abstract virtual string get_ContentEncoding();
    public abstract virtual string get_CharacterSet();
    public abstract virtual string get_Server();
    public abstract virtual DateTime get_LastModified();
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual string get_StatusDescription();
    public abstract virtual Version get_ProtocolVersion();
    public abstract virtual string get_Method();
    public abstract virtual void Close();
    public abstract virtual Stream GetResponseStream();
    public abstract virtual bool get_IsFromCache();
    public abstract virtual bool get_IsMutuallyAuthenticated();
    public abstract virtual long get_ContentLength();
    public abstract virtual void set_ContentLength(long value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual Uri get_ResponseUri();
    public abstract virtual WebHeaderCollection get_Headers();
}
public class HttpWebAdapters.WebResponseStub : WebResponse {
    private CookieCollection cookies;
    private string contentEncoding;
    private string characterSet;
    private string server;
    private DateTime lastModified;
    private HttpStatusCode statusCode;
    private string statusDescription;
    private Version protocolVersion;
    private string method;
    public CookieCollection Cookies { get; public set; }
    public string ContentEncoding { get; public set; }
    public string CharacterSet { get; public set; }
    public string Server { get; public set; }
    public DateTime LastModified { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public Version ProtocolVersion { get; public set; }
    public string Method { get; public set; }
    public sealed virtual string GetResponseHeader(string headerName);
    public sealed virtual CookieCollection get_Cookies();
    public sealed virtual void set_Cookies(CookieCollection value);
    public sealed virtual string get_ContentEncoding();
    public void set_ContentEncoding(string value);
    public sealed virtual string get_CharacterSet();
    public void set_CharacterSet(string value);
    public sealed virtual string get_Server();
    public void set_Server(string value);
    public sealed virtual DateTime get_LastModified();
    public void set_LastModified(DateTime value);
    public sealed virtual HttpStatusCode get_StatusCode();
    public void set_StatusCode(HttpStatusCode value);
    public sealed virtual string get_StatusDescription();
    public void set_StatusDescription(string value);
    public sealed virtual Version get_ProtocolVersion();
    public void set_ProtocolVersion(Version value);
    public sealed virtual string get_Method();
    public void set_Method(string value);
}
public abstract class SolrNet.AbstractSolrQuery : object {
    public AbstractSolrQuery Not();
    public AbstractSolrQuery Required();
    public AbstractSolrQuery Boost(double factor);
    public static AbstractSolrQuery op_BitwiseAnd(AbstractSolrQuery a, AbstractSolrQuery b);
    public static AbstractSolrQuery op_BitwiseOr(AbstractSolrQuery a, AbstractSolrQuery b);
    public static AbstractSolrQuery op_Addition(AbstractSolrQuery a, AbstractSolrQuery b);
    public static AbstractSolrQuery op_Subtraction(AbstractSolrQuery a, AbstractSolrQuery b);
    public static bool op_False(AbstractSolrQuery a);
    public static bool op_True(AbstractSolrQuery a);
    public static AbstractSolrQuery op_LogicalNot(AbstractSolrQuery a);
}
public class SolrNet.AddParameters : UpdateParameters {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Overwrite>k__BackingField;
    public Nullable`1<bool> Overwrite { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Overwrite();
    [CompilerGeneratedAttribute]
public void set_Overwrite(Nullable`1<bool> value);
}
public class SolrNet.AtomicUpdateParameters : UpdateParameters {
}
public class SolrNet.AtomicUpdateSpec : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AtomicUpdateType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Value>k__BackingField;
    public string Field { get; private set; }
    public AtomicUpdateType Type { get; private set; }
    public object Value { get; private set; }
    public AtomicUpdateSpec(string field, AtomicUpdateType type, string value);
    public AtomicUpdateSpec(string field, AtomicUpdateType type, String[] value);
    public AtomicUpdateSpec(string field, AtomicUpdateType type, int value);
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
private void set_Field(string value);
    [CompilerGeneratedAttribute]
public AtomicUpdateType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(AtomicUpdateType value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
}
public enum SolrNet.AtomicUpdateType : Enum {
    public int value__;
    public static AtomicUpdateType Set;
    public static AtomicUpdateType Add;
    public static AtomicUpdateType Inc;
    public static AtomicUpdateType Remove;
    public static AtomicUpdateType RemoveRegex;
}
[AttributeUsageAttribute("128")]
public class SolrNet.Attributes.SolrFieldAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private float <Boost>k__BackingField;
    public string FieldName { get; public set; }
    public float Boost { get; public set; }
    public SolrFieldAttribute(string fieldName);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public float get_Boost();
    [CompilerGeneratedAttribute]
public void set_Boost(float value);
}
[AttributeUsageAttribute("128")]
public class SolrNet.Attributes.SolrUniqueKeyAttribute : SolrFieldAttribute {
    public SolrUniqueKeyAttribute(string fieldName);
}
public enum SolrNet.CalculationAccuracy : Enum {
    public int value__;
    public static CalculationAccuracy Radius;
    public static CalculationAccuracy BoundingBox;
}
public class SolrNet.Cluster : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <Score>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<string> <Documents>k__BackingField;
    public string Label { get; public set; }
    public double Score { get; public set; }
    public ICollection`1<string> Documents { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public double get_Score();
    [CompilerGeneratedAttribute]
public void set_Score(double value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Documents();
    [CompilerGeneratedAttribute]
public void set_Documents(ICollection`1<string> value);
}
public class SolrNet.ClusterResults : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<Cluster> <Clusters>k__BackingField;
    public ICollection`1<Cluster> Clusters { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<Cluster> get_Clusters();
    [CompilerGeneratedAttribute]
public void set_Clusters(ICollection`1<Cluster> value);
}
[ObsoleteAttribute("Use result grouping instead")]
public class SolrNet.CollapsedDocument : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FieldValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <CollapseCount>k__BackingField;
    public string Id { get; public set; }
    public string FieldValue { get; public set; }
    public int CollapseCount { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_FieldValue();
    [CompilerGeneratedAttribute]
public void set_FieldValue(string value);
    [CompilerGeneratedAttribute]
public int get_CollapseCount();
    [CompilerGeneratedAttribute]
public void set_CollapseCount(int value);
}
public class SolrNet.CollapseExpandResults`1 : object {
    private ICollection`1<Group`1<T>> groups;
    public ICollection`1<Group`1<T>> Groups { get; }
    public CollapseExpandResults`1(ICollection`1<Group`1<T>> groups);
    public ICollection`1<Group`1<T>> get_Groups();
}
[ObsoleteAttribute("Use result grouping instead")]
public class SolrNet.CollapseResults : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<CollapsedDocument> <CollapsedDocuments>k__BackingField;
    public string Field { get; public set; }
    public ICollection`1<CollapsedDocument> CollapsedDocuments { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<CollapsedDocument> get_CollapsedDocuments();
    [CompilerGeneratedAttribute]
public void set_CollapsedDocuments(ICollection`1<CollapsedDocument> value);
}
public class SolrNet.Commands.AddCommand`1 : object {
    private IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> documents;
    private ISolrDocumentSerializer`1<T> documentSerializer;
    private AddParameters parameters;
    public AddCommand`1(IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> documents, ISolrDocumentSerializer`1<T> serializer, AddParameters parameters);
    public string ConvertToXml();
    public sealed virtual string Execute(ISolrConnection connection);
    public sealed virtual Task`1<string> ExecuteAsync(ISolrConnection connection);
}
public class SolrNet.Commands.AtomicUpdateCommand : object {
    private string uniqueKey;
    private string id;
    private AtomicUpdateParameters parameters;
    private IEnumerable`1<AtomicUpdateSpec> updateSpecs;
    public AtomicUpdateCommand(string uniqueKey, string id, IEnumerable`1<AtomicUpdateSpec> updateSpecs, AtomicUpdateParameters parameters);
    public sealed virtual string Execute(ISolrConnection connection);
    [AsyncStateMachineAttribute("SolrNet.Commands.AtomicUpdateCommand/<ExecuteAsync>d__6")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> ExecuteAsync(ISolrConnection connection);
    private KeyValuePair`2[] GetParamsAsKvp();
    private string GetAtomicUpdateJson();
}
public class SolrNet.Commands.CommitCommand : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <WaitFlush>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <WaitSearcher>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <ExpungeDeletes>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MaxSegments>k__BackingField;
    public Nullable`1<bool> WaitFlush { get; public set; }
    public Nullable`1<bool> WaitSearcher { get; public set; }
    public Nullable`1<bool> ExpungeDeletes { get; public set; }
    public Nullable`1<int> MaxSegments { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_WaitFlush();
    [CompilerGeneratedAttribute]
public void set_WaitFlush(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_WaitSearcher();
    [CompilerGeneratedAttribute]
public void set_WaitSearcher(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExpungeDeletes();
    [CompilerGeneratedAttribute]
public void set_ExpungeDeletes(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxSegments();
    [CompilerGeneratedAttribute]
public void set_MaxSegments(Nullable`1<int> value);
    public sealed virtual string Execute(ISolrConnection connection);
    public sealed virtual Task`1<string> ExecuteAsync(ISolrConnection connection);
    private string GetCommitXml();
}
public class SolrNet.Commands.CoreCommand : object {
    protected List`1<KeyValuePair`2<string, string>> Parameters;
    public sealed virtual string Execute(ISolrConnection connection);
    public sealed virtual Task`1<string> ExecuteAsync(ISolrConnection connection);
    protected void AddParameter(string key, string value);
    public IEnumerable`1<KeyValuePair`2<string, string>> GetParameters();
}
public class SolrNet.Commands.Cores.AliasCommand : CoreCommand {
    public AliasCommand(string coreName, string aliasName);
}
public class SolrNet.Commands.Cores.CreateCommand : CoreCommand {
    public CreateCommand(string name, string instanceDir);
    public CreateCommand(string name, string instanceDir, string configFile, string schemaFile, string dataDir);
}
public class SolrNet.Commands.Cores.LoadCommand : CoreCommand {
    public LoadCommand(string coreName);
}
public class SolrNet.Commands.Cores.MergeCommand : CoreCommand {
    public MergeCommand(string destinationCore, IndexDir indexDir, IndexDir[] indexDirs);
    public MergeCommand(string destinationCore, SrcCore srcCore, SrcCore[] srcCores);
}
public class SolrNet.Commands.Cores.ReloadCommand : CoreCommand {
    public ReloadCommand(string coreName);
}
public class SolrNet.Commands.Cores.RenameCommand : CoreCommand {
    public RenameCommand(string coreName, string newName);
}
public class SolrNet.Commands.Cores.StatusCommand : CoreCommand {
    public StatusCommand(string coreName);
}
public class SolrNet.Commands.Cores.SwapCommand : CoreCommand {
    public SwapCommand(string coreName, string otherName);
}
public class SolrNet.Commands.Cores.UnloadCommand : CoreCommand {
    public UnloadCommand(string coreName, Delete delete);
}
public class SolrNet.Commands.DeleteCommand : object {
    private DeleteByIdAndOrQueryParam deleteParam;
    private DeleteParameters parameters;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <FromPending>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <FromCommitted>k__BackingField;
    public Nullable`1<bool> FromPending { get; public set; }
    public Nullable`1<bool> FromCommitted { get; public set; }
    public DeleteCommand(DeleteByIdAndOrQueryParam deleteParam, DeleteParameters parameters);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FromPending();
    [CompilerGeneratedAttribute]
public void set_FromPending(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FromCommitted();
    [CompilerGeneratedAttribute]
public void set_FromCommitted(Nullable`1<bool> value);
    public sealed virtual string Execute(ISolrConnection connection);
    public sealed virtual Task`1<string> ExecuteAsync(ISolrConnection connection);
    private string GetDeleteXml();
}
public class SolrNet.Commands.ExtractCommand : object {
    private ExtractParameters parameters;
    public ExtractCommand(ExtractParameters parameters);
    public sealed virtual string Execute(ISolrConnection connection);
    public sealed virtual Task`1<string> ExecuteAsync(ISolrConnection connection);
    private IEnumerable`1<KeyValuePair`2<string, string>> ConvertToQueryParameters();
}
public class SolrNet.Commands.OptimizeCommand : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <WaitFlush>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <WaitSearcher>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <ExpungeDeletes>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MaxSegments>k__BackingField;
    public Nullable`1<bool> WaitFlush { get; public set; }
    public Nullable`1<bool> WaitSearcher { get; public set; }
    public Nullable`1<bool> ExpungeDeletes { get; public set; }
    public Nullable`1<int> MaxSegments { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_WaitFlush();
    [CompilerGeneratedAttribute]
public void set_WaitFlush(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_WaitSearcher();
    [CompilerGeneratedAttribute]
public void set_WaitSearcher(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExpungeDeletes();
    [CompilerGeneratedAttribute]
public void set_ExpungeDeletes(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxSegments();
    [CompilerGeneratedAttribute]
public void set_MaxSegments(Nullable`1<int> value);
    public sealed virtual string Execute(ISolrConnection connection);
    public sealed virtual Task`1<string> ExecuteAsync(ISolrConnection connection);
    private string GetOptimizeXml();
}
public class SolrNet.Commands.Parameters.Algorithms : object {
    public static string Lingo;
    public static string STC;
    public static string KMeans;
}
public class SolrNet.Commands.Parameters.ClusteringParameters : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Engine>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Snippet>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <ProduceSummary>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <FragSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <NumDescriptions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <SubClusters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <LexicalResources>k__BackingField;
    public string Engine { get; public set; }
    public Nullable`1<bool> Results { get; public set; }
    public Nullable`1<bool> Collection { get; public set; }
    public string Algorithm { get; public set; }
    public string Title { get; public set; }
    public string Snippet { get; public set; }
    public string Url { get; public set; }
    public Nullable`1<bool> ProduceSummary { get; public set; }
    public Nullable`1<int> FragSize { get; public set; }
    public Nullable`1<int> NumDescriptions { get; public set; }
    public Nullable`1<bool> SubClusters { get; public set; }
    public string LexicalResources { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Engine();
    [CompilerGeneratedAttribute]
public void set_Engine(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Collection();
    [CompilerGeneratedAttribute]
public void set_Collection(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Algorithm();
    [CompilerGeneratedAttribute]
public void set_Algorithm(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Snippet();
    [CompilerGeneratedAttribute]
public void set_Snippet(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ProduceSummary();
    [CompilerGeneratedAttribute]
public void set_ProduceSummary(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FragSize();
    [CompilerGeneratedAttribute]
public void set_FragSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumDescriptions();
    [CompilerGeneratedAttribute]
public void set_NumDescriptions(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SubClusters();
    [CompilerGeneratedAttribute]
public void set_SubClusters(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_LexicalResources();
    [CompilerGeneratedAttribute]
public void set_LexicalResources(string value);
}
public class SolrNet.Commands.Parameters.CollapseExpandParameters : object {
    private string field;
    private ExpandParameters expand;
    private MinOrMax minOrMaxField;
    private NullPolicyType nullPolicy;
    public string Field { get; }
    public ExpandParameters Expand { get; }
    public MinOrMax MinOrMaxField { get; }
    public NullPolicyType NullPolicy { get; }
    public CollapseExpandParameters(string field, ExpandParameters expand, MinOrMax minOrMaxField, NullPolicyType nullPolicy);
    public string get_Field();
    public ExpandParameters get_Expand();
    public MinOrMax get_MinOrMaxField();
    public NullPolicyType get_NullPolicy();
}
public enum SolrNet.Commands.Parameters.CollapseFacetMode : Enum {
    public int value__;
    public static CollapseFacetMode Before;
    public static CollapseFacetMode After;
}
[ObsoleteAttribute("Use result grouping instead")]
public class SolrNet.Commands.Parameters.CollapseParameters : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Threshold>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MaxDocs>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CollapseFacetMode <FacetMode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CollapseType <Type>k__BackingField;
    public string Field { get; public set; }
    public Nullable`1<int> Threshold { get; public set; }
    public Nullable`1<int> MaxDocs { get; public set; }
    public CollapseFacetMode FacetMode { get; public set; }
    public CollapseType Type { get; public set; }
    public CollapseParameters(string field);
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Threshold();
    [CompilerGeneratedAttribute]
public void set_Threshold(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxDocs();
    [CompilerGeneratedAttribute]
public void set_MaxDocs(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public CollapseFacetMode get_FacetMode();
    [CompilerGeneratedAttribute]
public void set_FacetMode(CollapseFacetMode value);
    [CompilerGeneratedAttribute]
public CollapseType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(CollapseType value);
}
public enum SolrNet.Commands.Parameters.CollapseType : Enum {
    public int value__;
    public static CollapseType Normal;
    public static CollapseType Adjacent;
}
public class SolrNet.Commands.Parameters.CommitOptions : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <WaitSearcher>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <WaitFlush>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MaxSegments>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <ExpungeDeletes>k__BackingField;
    public Nullable`1<bool> WaitSearcher { get; public set; }
    public Nullable`1<bool> WaitFlush { get; public set; }
    public Nullable`1<int> MaxSegments { get; public set; }
    public Nullable`1<bool> ExpungeDeletes { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_WaitSearcher();
    [CompilerGeneratedAttribute]
public void set_WaitSearcher(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_WaitFlush();
    [CompilerGeneratedAttribute]
public void set_WaitFlush(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxSegments();
    [CompilerGeneratedAttribute]
public void set_MaxSegments(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExpungeDeletes();
    [CompilerGeneratedAttribute]
public void set_ExpungeDeletes(Nullable`1<bool> value);
}
public class SolrNet.Commands.Parameters.CommonQueryOptions : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<string> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Start>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private StartOrCursor <StartOrCursor>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FacetParameters <Facet>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<ISolrQuery> <FilterQueries>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<KeyValuePair`2<string, string>> <ExtraParams>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Debug>k__BackingField;
    public ICollection`1<string> Fields { get; public set; }
    [ObsoleteAttribute("Use StartOrCursor instead, setting StartOrCursor.Start")]
public Nullable`1<int> Start { get; public set; }
    public StartOrCursor StartOrCursor { get; public set; }
    public Nullable`1<int> Rows { get; public set; }
    public FacetParameters Facet { get; public set; }
    public ICollection`1<ISolrQuery> FilterQueries { get; public set; }
    public IEnumerable`1<KeyValuePair`2<string, string>> ExtraParams { get; public set; }
    public bool Debug { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Fields();
    [CompilerGeneratedAttribute]
public void set_Fields(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public StartOrCursor get_StartOrCursor();
    [CompilerGeneratedAttribute]
public void set_StartOrCursor(StartOrCursor value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Rows();
    [CompilerGeneratedAttribute]
public void set_Rows(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public FacetParameters get_Facet();
    [CompilerGeneratedAttribute]
public void set_Facet(FacetParameters value);
    [CompilerGeneratedAttribute]
public ICollection`1<ISolrQuery> get_FilterQueries();
    [CompilerGeneratedAttribute]
public void set_FilterQueries(ICollection`1<ISolrQuery> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_ExtraParams();
    [CompilerGeneratedAttribute]
public void set_ExtraParams(IEnumerable`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
}
public class SolrNet.Commands.Parameters.DeleteByIdAndOrQueryParam : object {
    private IEnumerable`1<string> ids;
    private ISolrQuery query;
    private ISolrQuerySerializer querySerializer;
    public DeleteByIdAndOrQueryParam(IEnumerable`1<string> ids, ISolrQuery query, ISolrQuerySerializer querySerializer);
    [IteratorStateMachineAttribute("SolrNet.Commands.Parameters.DeleteByIdAndOrQueryParam/<ToXmlNode>d__4")]
public IEnumerable`1<XElement> ToXmlNode();
}
public class SolrNet.Commands.Parameters.ExpandParameters : object {
    private SortOrder sort;
    private Nullable`1<int> rows;
    private ISolrQuery query;
    private ISolrQuery filterQuery;
    public SortOrder Sort { get; }
    public Nullable`1<int> Rows { get; }
    public ISolrQuery Query { get; }
    public ISolrQuery FilterQuery { get; }
    public ExpandParameters(SortOrder sort, Nullable`1<int> rows, ISolrQuery query, ISolrQuery filterQuery);
    public SortOrder get_Sort();
    public Nullable`1<int> get_Rows();
    public ISolrQuery get_Query();
    public ISolrQuery get_FilterQuery();
}
public class SolrNet.Commands.Parameters.FacetParameters : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<ISolrFacetQuery> <Queries>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Sort>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Limit>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MinCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Missing>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <EnumCacheMinDf>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Threads>k__BackingField;
    public ICollection`1<ISolrFacetQuery> Queries { get; public set; }
    public string Prefix { get; public set; }
    public Nullable`1<bool> Sort { get; public set; }
    public Nullable`1<int> Limit { get; public set; }
    public Nullable`1<int> Offset { get; public set; }
    public Nullable`1<int> MinCount { get; public set; }
    public Nullable`1<bool> Missing { get; public set; }
    public Nullable`1<int> EnumCacheMinDf { get; public set; }
    public Nullable`1<int> Threads { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<ISolrFacetQuery> get_Queries();
    [CompilerGeneratedAttribute]
public void set_Queries(ICollection`1<ISolrFacetQuery> value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Sort();
    [CompilerGeneratedAttribute]
public void set_Sort(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Limit();
    [CompilerGeneratedAttribute]
public void set_Limit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinCount();
    [CompilerGeneratedAttribute]
public void set_MinCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Missing();
    [CompilerGeneratedAttribute]
public void set_Missing(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_EnumCacheMinDf();
    [CompilerGeneratedAttribute]
public void set_EnumCacheMinDf(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Threads();
    [CompilerGeneratedAttribute]
public void set_Threads(Nullable`1<int> value);
}
public enum SolrNet.Commands.Parameters.GroupingFormat : Enum {
    public int value__;
    public static GroupingFormat Grouped;
    public static GroupingFormat Simple;
}
public class SolrNet.Commands.Parameters.GroupingParameters : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<string> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Limit>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<SortOrder> <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Main>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<ISolrQuery> <Query>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Func>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Ngroups>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private GroupingFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Truncate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Facet>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <CachePercent>k__BackingField;
    public ICollection`1<string> Fields { get; public set; }
    public Nullable`1<int> Limit { get; public set; }
    public Nullable`1<int> Offset { get; public set; }
    public ICollection`1<SortOrder> OrderBy { get; public set; }
    public Nullable`1<bool> Main { get; public set; }
    public ICollection`1<ISolrQuery> Query { get; public set; }
    public string Func { get; public set; }
    public Nullable`1<bool> Ngroups { get; public set; }
    public GroupingFormat Format { get; public set; }
    public Nullable`1<bool> Truncate { get; public set; }
    public Nullable`1<bool> Facet { get; public set; }
    public Nullable`1<int> CachePercent { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Fields();
    [CompilerGeneratedAttribute]
public void set_Fields(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Limit();
    [CompilerGeneratedAttribute]
public void set_Limit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public ICollection`1<SortOrder> get_OrderBy();
    [CompilerGeneratedAttribute]
public void set_OrderBy(ICollection`1<SortOrder> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Main();
    [CompilerGeneratedAttribute]
public void set_Main(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public ICollection`1<ISolrQuery> get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(ICollection`1<ISolrQuery> value);
    [CompilerGeneratedAttribute]
public string get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Ngroups();
    [CompilerGeneratedAttribute]
public void set_Ngroups(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public GroupingFormat get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(GroupingFormat value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Truncate();
    [CompilerGeneratedAttribute]
public void set_Truncate(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Facet();
    [CompilerGeneratedAttribute]
public void set_Facet(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CachePercent();
    [CompilerGeneratedAttribute]
public void set_CachePercent(Nullable`1<int> value);
}
public class SolrNet.Commands.Parameters.HighlightingParameters : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<string> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Snippets>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Fragsize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <RequireFieldMatch>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AlternateField>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BeforeTerm>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AfterTerm>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISolrQuery <Query>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<double> <RegexSlop>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RegexPattern>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <RegexMaxAnalyzedChars>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <MergeContiguous>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <UsePhraseHighlighter>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <UseFastVectorHighlighter>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <HighlightMultiTerm>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MaxAnalyzedChars>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MaxAlternateFieldLength>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<SolrHighlightFragmenter> <Fragmenter>k__BackingField;
    public ICollection`1<string> Fields { get; public set; }
    public string Method { get; public set; }
    public Nullable`1<int> Snippets { get; public set; }
    public Nullable`1<int> Fragsize { get; public set; }
    public Nullable`1<bool> RequireFieldMatch { get; public set; }
    public string AlternateField { get; public set; }
    public string BeforeTerm { get; public set; }
    public string AfterTerm { get; public set; }
    public ISolrQuery Query { get; public set; }
    public Nullable`1<double> RegexSlop { get; public set; }
    public string RegexPattern { get; public set; }
    public Nullable`1<int> RegexMaxAnalyzedChars { get; public set; }
    public Nullable`1<bool> MergeContiguous { get; public set; }
    public Nullable`1<bool> UsePhraseHighlighter { get; public set; }
    public Nullable`1<bool> UseFastVectorHighlighter { get; public set; }
    public Nullable`1<bool> HighlightMultiTerm { get; public set; }
    public Nullable`1<int> MaxAnalyzedChars { get; public set; }
    public Nullable`1<int> MaxAlternateFieldLength { get; public set; }
    public Nullable`1<SolrHighlightFragmenter> Fragmenter { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Fields();
    [CompilerGeneratedAttribute]
public void set_Fields(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Snippets();
    [CompilerGeneratedAttribute]
public void set_Snippets(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Fragsize();
    [CompilerGeneratedAttribute]
public void set_Fragsize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RequireFieldMatch();
    [CompilerGeneratedAttribute]
public void set_RequireFieldMatch(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_AlternateField();
    [CompilerGeneratedAttribute]
public void set_AlternateField(string value);
    [CompilerGeneratedAttribute]
public string get_BeforeTerm();
    [CompilerGeneratedAttribute]
public void set_BeforeTerm(string value);
    [CompilerGeneratedAttribute]
public string get_AfterTerm();
    [CompilerGeneratedAttribute]
public void set_AfterTerm(string value);
    [CompilerGeneratedAttribute]
public ISolrQuery get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(ISolrQuery value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_RegexSlop();
    [CompilerGeneratedAttribute]
public void set_RegexSlop(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public string get_RegexPattern();
    [CompilerGeneratedAttribute]
public void set_RegexPattern(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RegexMaxAnalyzedChars();
    [CompilerGeneratedAttribute]
public void set_RegexMaxAnalyzedChars(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MergeContiguous();
    [CompilerGeneratedAttribute]
public void set_MergeContiguous(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UsePhraseHighlighter();
    [CompilerGeneratedAttribute]
public void set_UsePhraseHighlighter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseFastVectorHighlighter();
    [CompilerGeneratedAttribute]
public void set_UseFastVectorHighlighter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HighlightMultiTerm();
    [CompilerGeneratedAttribute]
public void set_HighlightMultiTerm(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxAnalyzedChars();
    [CompilerGeneratedAttribute]
public void set_MaxAnalyzedChars(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxAlternateFieldLength();
    [CompilerGeneratedAttribute]
public void set_MaxAlternateFieldLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SolrHighlightFragmenter> get_Fragmenter();
    [CompilerGeneratedAttribute]
public void set_Fragmenter(Nullable`1<SolrHighlightFragmenter> value);
}
public enum SolrNet.Commands.Parameters.InterestingTerms : Enum {
    public int value__;
    public static InterestingTerms List;
    public static InterestingTerms Details;
    public static InterestingTerms None;
}
public class SolrNet.Commands.Parameters.MoreLikeThisHandlerParameters : MoreLikeThisParameters {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <MatchInclude>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MatchOffset>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<InterestingTerms> <ShowTerms>k__BackingField;
    public Nullable`1<bool> MatchInclude { get; public set; }
    public Nullable`1<int> MatchOffset { get; public set; }
    public Nullable`1<InterestingTerms> ShowTerms { get; public set; }
    public MoreLikeThisHandlerParameters(IEnumerable`1<string> fields);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MatchInclude();
    [CompilerGeneratedAttribute]
public void set_MatchInclude(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MatchOffset();
    [CompilerGeneratedAttribute]
public void set_MatchOffset(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<InterestingTerms> get_ShowTerms();
    [CompilerGeneratedAttribute]
public void set_ShowTerms(Nullable`1<InterestingTerms> value);
}
public class SolrNet.Commands.Parameters.MoreLikeThisHandlerQueryOptions : CommonQueryOptions {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MoreLikeThisHandlerParameters <Parameters>k__BackingField;
    public MoreLikeThisHandlerParameters Parameters { get; public set; }
    public MoreLikeThisHandlerQueryOptions(MoreLikeThisHandlerParameters parameters);
    [CompilerGeneratedAttribute]
public MoreLikeThisHandlerParameters get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(MoreLikeThisHandlerParameters value);
}
public class SolrNet.Commands.Parameters.MoreLikeThisParameters : object {
    private IEnumerable`1<string> fields;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MinTermFreq>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MinDocFreq>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MinWordLength>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MaxWordLength>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MaxQueryTerms>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MaxTokens>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Boost>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<string> <QueryFields>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Count>k__BackingField;
    public IEnumerable`1<string> Fields { get; }
    public Nullable`1<int> MinTermFreq { get; public set; }
    public Nullable`1<int> MinDocFreq { get; public set; }
    public Nullable`1<int> MinWordLength { get; public set; }
    public Nullable`1<int> MaxWordLength { get; public set; }
    public Nullable`1<int> MaxQueryTerms { get; public set; }
    public Nullable`1<int> MaxTokens { get; public set; }
    public Nullable`1<bool> Boost { get; public set; }
    public ICollection`1<string> QueryFields { get; public set; }
    public Nullable`1<int> Count { get; public set; }
    public MoreLikeThisParameters(IEnumerable`1<string> fields);
    public IEnumerable`1<string> get_Fields();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinTermFreq();
    [CompilerGeneratedAttribute]
public void set_MinTermFreq(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinDocFreq();
    [CompilerGeneratedAttribute]
public void set_MinDocFreq(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinWordLength();
    [CompilerGeneratedAttribute]
public void set_MinWordLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxWordLength();
    [CompilerGeneratedAttribute]
public void set_MaxWordLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxQueryTerms();
    [CompilerGeneratedAttribute]
public void set_MaxQueryTerms(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxTokens();
    [CompilerGeneratedAttribute]
public void set_MaxTokens(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Boost();
    [CompilerGeneratedAttribute]
public void set_Boost(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_QueryFields();
    [CompilerGeneratedAttribute]
public void set_QueryFields(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(Nullable`1<int> value);
}
public class SolrNet.Commands.Parameters.QueryOptions : CommonQueryOptions {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<SortOrder> <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private HighlightingParameters <Highlight>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SpellCheckingParameters <SpellCheck>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TermsParameters <Terms>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MoreLikeThisParameters <MoreLikeThis>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private StatsParameters <Stats>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CollapseParameters <Collapse>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CollapseExpandParameters <CollapseExpand>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TermVectorParameters <TermVector>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private GroupingParameters <Grouping>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ClusteringParameters <Clustering>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private RequestHandlerParameters <RequestHandler>k__BackingField;
    public ICollection`1<SortOrder> OrderBy { get; public set; }
    public HighlightingParameters Highlight { get; public set; }
    public SpellCheckingParameters SpellCheck { get; public set; }
    public TermsParameters Terms { get; public set; }
    public MoreLikeThisParameters MoreLikeThis { get; public set; }
    public StatsParameters Stats { get; public set; }
    public CollapseParameters Collapse { get; public set; }
    public CollapseExpandParameters CollapseExpand { get; public set; }
    public TermVectorParameters TermVector { get; public set; }
    public GroupingParameters Grouping { get; public set; }
    public ClusteringParameters Clustering { get; public set; }
    public RequestHandlerParameters RequestHandler { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<SortOrder> get_OrderBy();
    [CompilerGeneratedAttribute]
public void set_OrderBy(ICollection`1<SortOrder> value);
    [CompilerGeneratedAttribute]
public HighlightingParameters get_Highlight();
    [CompilerGeneratedAttribute]
public void set_Highlight(HighlightingParameters value);
    [CompilerGeneratedAttribute]
public SpellCheckingParameters get_SpellCheck();
    [CompilerGeneratedAttribute]
public void set_SpellCheck(SpellCheckingParameters value);
    [CompilerGeneratedAttribute]
public TermsParameters get_Terms();
    [CompilerGeneratedAttribute]
public void set_Terms(TermsParameters value);
    [CompilerGeneratedAttribute]
public MoreLikeThisParameters get_MoreLikeThis();
    [CompilerGeneratedAttribute]
public void set_MoreLikeThis(MoreLikeThisParameters value);
    [CompilerGeneratedAttribute]
public StatsParameters get_Stats();
    [CompilerGeneratedAttribute]
public void set_Stats(StatsParameters value);
    [CompilerGeneratedAttribute]
public CollapseParameters get_Collapse();
    [CompilerGeneratedAttribute]
public void set_Collapse(CollapseParameters value);
    [CompilerGeneratedAttribute]
public CollapseExpandParameters get_CollapseExpand();
    [CompilerGeneratedAttribute]
public void set_CollapseExpand(CollapseExpandParameters value);
    [CompilerGeneratedAttribute]
public TermVectorParameters get_TermVector();
    [CompilerGeneratedAttribute]
public void set_TermVector(TermVectorParameters value);
    [CompilerGeneratedAttribute]
public GroupingParameters get_Grouping();
    [CompilerGeneratedAttribute]
public void set_Grouping(GroupingParameters value);
    [CompilerGeneratedAttribute]
public ClusteringParameters get_Clustering();
    [CompilerGeneratedAttribute]
public void set_Clustering(ClusteringParameters value);
    [CompilerGeneratedAttribute]
public RequestHandlerParameters get_RequestHandler();
    [CompilerGeneratedAttribute]
public void set_RequestHandler(RequestHandlerParameters value);
    private static List`1<T> Add(IEnumerable`1<T> l, IEnumerable`1<T> l2);
    public QueryOptions AddFields(String[] fields);
    public QueryOptions AddOrder(SortOrder[] order);
    public QueryOptions AddFilterQueries(ISolrQuery[] queries);
    public QueryOptions AddFacets(ISolrFacetQuery[] queries);
}
public abstract class SolrNet.Commands.Parameters.RegexFlag : object {
    public static RegexFlag CaseInsensitive;
    public static RegexFlag Comments;
    public static RegexFlag MultiLine;
    public static RegexFlag Literal;
    public static RegexFlag DotAll;
    public static RegexFlag UnicodeCase;
    public static RegexFlag CanonEq;
    public static RegexFlag UnixLines;
    private static RegexFlag();
    public sealed virtual bool Equals(RegexFlag other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class SolrNet.Commands.Parameters.RequestHandlerParameters : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <HandlerUrl>k__BackingField;
    public string HandlerUrl { get; }
    public RequestHandlerParameters(string url);
    [CompilerGeneratedAttribute]
public string get_HandlerUrl();
}
public enum SolrNet.Commands.Parameters.SolrHighlightFragmenter : Enum {
    public int value__;
    public static SolrHighlightFragmenter Gap;
    public static SolrHighlightFragmenter Regex;
}
public class SolrNet.Commands.Parameters.SpellCheckingParameters : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Build>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Reload>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Count>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <OnlyMorePopular>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Collate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Dictionary>k__BackingField;
    public string Query { get; public set; }
    public Nullable`1<bool> Build { get; public set; }
    public Nullable`1<bool> Reload { get; public set; }
    public Nullable`1<int> Count { get; public set; }
    public Nullable`1<bool> OnlyMorePopular { get; public set; }
    public Nullable`1<bool> Collate { get; public set; }
    public string Dictionary { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Build();
    [CompilerGeneratedAttribute]
public void set_Build(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Reload();
    [CompilerGeneratedAttribute]
public void set_Reload(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OnlyMorePopular();
    [CompilerGeneratedAttribute]
public void set_OnlyMorePopular(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Collate();
    [CompilerGeneratedAttribute]
public void set_Collate(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Dictionary();
    [CompilerGeneratedAttribute]
public void set_Dictionary(string value);
}
public class SolrNet.Commands.Parameters.StatsParameters : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<string, ICollection`1<string>> <FieldsWithFacets>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<string> <Facets>k__BackingField;
    public IDictionary`2<string, ICollection`1<string>> FieldsWithFacets { get; public set; }
    public ICollection`1<string> Facets { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ICollection`1<string>> get_FieldsWithFacets();
    [CompilerGeneratedAttribute]
public void set_FieldsWithFacets(IDictionary`2<string, ICollection`1<string>> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Facets();
    [CompilerGeneratedAttribute]
public void set_Facets(ICollection`1<string> value);
    public StatsParameters AddFacet(string facet);
    public StatsParameters AddField(string field);
    public StatsParameters AddFieldWithFacet(string field, string facet);
    public StatsParameters AddFieldWithFacets(string field, IEnumerable`1<string> facets);
    public StatsParameters AddFieldWithFacets(string field, String[] facets);
}
public class SolrNet.Commands.Parameters.TermsParameters : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<string> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Lower>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <LowerInclude>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Upper>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <UpperInclude>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MinCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MaxCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Regex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<RegexFlag> <RegexFlag>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Limit>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Raw>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TermsSort <Sort>k__BackingField;
    public IEnumerable`1<string> Fields { get; public set; }
    public string Lower { get; public set; }
    public Nullable`1<bool> LowerInclude { get; public set; }
    public string Upper { get; public set; }
    public Nullable`1<bool> UpperInclude { get; public set; }
    public Nullable`1<int> MinCount { get; public set; }
    public Nullable`1<int> MaxCount { get; public set; }
    public string Prefix { get; public set; }
    public string Regex { get; public set; }
    public ICollection`1<RegexFlag> RegexFlag { get; public set; }
    public Nullable`1<int> Limit { get; public set; }
    public Nullable`1<bool> Raw { get; public set; }
    public TermsSort Sort { get; public set; }
    public TermsParameters(string field);
    public TermsParameters(IEnumerable`1<string> fields);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Fields();
    [CompilerGeneratedAttribute]
public void set_Fields(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Lower();
    [CompilerGeneratedAttribute]
public void set_Lower(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_LowerInclude();
    [CompilerGeneratedAttribute]
public void set_LowerInclude(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Upper();
    [CompilerGeneratedAttribute]
public void set_Upper(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UpperInclude();
    [CompilerGeneratedAttribute]
public void set_UpperInclude(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinCount();
    [CompilerGeneratedAttribute]
public void set_MinCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxCount();
    [CompilerGeneratedAttribute]
public void set_MaxCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public string get_Regex();
    [CompilerGeneratedAttribute]
public void set_Regex(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<RegexFlag> get_RegexFlag();
    [CompilerGeneratedAttribute]
public void set_RegexFlag(ICollection`1<RegexFlag> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Limit();
    [CompilerGeneratedAttribute]
public void set_Limit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Raw();
    [CompilerGeneratedAttribute]
public void set_Raw(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public TermsSort get_Sort();
    [CompilerGeneratedAttribute]
public void set_Sort(TermsSort value);
}
public abstract class SolrNet.Commands.Parameters.TermsSort : object {
    public static TermsSort Count;
    public static TermsSort Index;
    private static TermsSort();
    public sealed virtual bool Equals(TermsSort other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[FlagsAttribute]
public enum SolrNet.Commands.Parameters.TermVectorParameterOptions : Enum {
    public int value__;
    public static TermVectorParameterOptions Default;
    public static TermVectorParameterOptions TermFrequency;
    public static TermVectorParameterOptions DocumentFrequency;
    public static TermVectorParameterOptions Positions;
    public static TermVectorParameterOptions Offsets;
    public static TermVectorParameterOptions TermFrequency_InverseDocumentFrequency;
    public static TermVectorParameterOptions All;
}
public class SolrNet.Commands.Parameters.TermVectorParameters : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<string> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TermVectorParameterOptions <Options>k__BackingField;
    public IEnumerable`1<string> Fields { get; public set; }
    public TermVectorParameterOptions Options { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Fields();
    [CompilerGeneratedAttribute]
public void set_Fields(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public TermVectorParameterOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(TermVectorParameterOptions value);
}
public class SolrNet.Commands.PingCommand : object {
    public sealed virtual string Execute(ISolrConnection connection);
    public sealed virtual Task`1<string> ExecuteAsync(ISolrConnection connection);
}
public class SolrNet.Commands.Replication.AbortFetchCommand : ReplicationCommand {
}
public class SolrNet.Commands.Replication.DetailsCommand : ReplicationCommand {
}
public class SolrNet.Commands.Replication.DisablePollCommand : ReplicationCommand {
}
public class SolrNet.Commands.Replication.DisableReplicationCommand : ReplicationCommand {
}
public class SolrNet.Commands.Replication.EnablePollCommand : ReplicationCommand {
}
public class SolrNet.Commands.Replication.EnableReplicationCommand : ReplicationCommand {
}
public class SolrNet.Commands.Replication.FetchIndexCommand : ReplicationCommand {
    public FetchIndexCommand(IEnumerable`1<KeyValuePair`2<string, string>> parameters);
}
public class SolrNet.Commands.Replication.IndexVersionCommand : ReplicationCommand {
}
public class SolrNet.Commands.ReplicationCommand : object {
    protected List`1<KeyValuePair`2<string, string>> Parameters;
    public sealed virtual string Execute(ISolrConnection connection);
    public sealed virtual Task`1<string> ExecuteAsync(ISolrConnection connection);
    protected void AddParameter(string key, string value);
}
public class SolrNet.Commands.RollbackCommand : object {
    public sealed virtual string Execute(ISolrConnection connection);
    public sealed virtual Task`1<string> ExecuteAsync(ISolrConnection connection);
}
[ObsoleteAttribute("As of Solr 3.1 has been deprecated, as of Solr 6.6 unsupported.")]
public class SolrNet.DateFacetingResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Gap>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <End>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IList`1<KeyValuePair`2<DateTime, int>> <DateResults>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<FacetDateOther, int> <OtherResults>k__BackingField;
    public string Gap { get; public set; }
    public DateTime End { get; public set; }
    public IList`1<KeyValuePair`2<DateTime, int>> DateResults { get; public set; }
    public IDictionary`2<FacetDateOther, int> OtherResults { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Gap();
    [CompilerGeneratedAttribute]
public void set_Gap(string value);
    [CompilerGeneratedAttribute]
public DateTime get_End();
    [CompilerGeneratedAttribute]
public void set_End(DateTime value);
    [CompilerGeneratedAttribute]
public IList`1<KeyValuePair`2<DateTime, int>> get_DateResults();
    [CompilerGeneratedAttribute]
public void set_DateResults(IList`1<KeyValuePair`2<DateTime, int>> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<FacetDateOther, int> get_OtherResults();
    [CompilerGeneratedAttribute]
public void set_OtherResults(IDictionary`2<FacetDateOther, int> value);
}
public class SolrNet.DeleteParameters : UpdateParameters {
}
public enum SolrNet.DIHStatus : Enum {
    public int value__;
    public static DIHStatus IDLE;
    public static DIHStatus BUSY;
}
[ObsoleteAttribute("No longer thrown, catch SolrNetException or SolrConnectionException instead")]
public class SolrNet.Exceptions.InvalidFieldException : SolrNetException {
    public InvalidFieldException(Exception innerException);
    public InvalidFieldException(string message);
    public InvalidFieldException(string message, Exception innerException);
    protected InvalidFieldException(SerializationInfo info, StreamingContext context);
}
public class SolrNet.Exceptions.InvalidSortOrderException : SolrNetException {
    public InvalidSortOrderException(string message);
    public InvalidSortOrderException(string message, Exception innerException);
    public InvalidSortOrderException(Exception innerException);
    protected InvalidSortOrderException(SerializationInfo info, StreamingContext context);
}
public class SolrNet.Exceptions.InvalidURLException : SolrNetException {
    public InvalidURLException(Exception innerException);
    public InvalidURLException(string message);
    public InvalidURLException(string message, Exception innerException);
    protected InvalidURLException(SerializationInfo info, StreamingContext context);
}
public class SolrNet.Exceptions.SolrConnectionException : SolrNetException {
    private string url;
    public string Url { get; }
    public SolrConnectionException(string message);
    public SolrConnectionException(Exception innerException);
    public SolrConnectionException(Exception innerException, string url);
    public SolrConnectionException(string message, Exception innerException);
    public SolrConnectionException(string message, Exception innerException, string url);
    protected SolrConnectionException(SerializationInfo info, StreamingContext context);
    public string get_Url();
}
public class SolrNet.Exceptions.SolrNetException : ApplicationException {
    public SolrNetException(Exception innerException);
    public SolrNetException(string message);
    public SolrNetException(string message, Exception innerException);
    protected SolrNetException(SerializationInfo info, StreamingContext context);
}
public class SolrNet.Exceptions.TypeNotSupportedException : SolrNetException {
    public TypeNotSupportedException(Exception innerException);
    public TypeNotSupportedException(string message);
    public TypeNotSupportedException(string message, Exception innerException);
    protected TypeNotSupportedException(SerializationInfo info, StreamingContext context);
}
public class SolrNet.ExtractField : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Boost>k__BackingField;
    public string FieldName { get; private set; }
    public string Value { get; private set; }
    public string Boost { get; public set; }
    public ExtractField(string fieldName, string value);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
private void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Boost();
    [CompilerGeneratedAttribute]
public void set_Boost(string value);
}
public enum SolrNet.ExtractFormat : Enum {
    public int value__;
    public static ExtractFormat XML;
    public static ExtractFormat Text;
}
public class SolrNet.ExtractParameters : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <AutoCommit>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ExtractOnly>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExtractFormat <ExtractFormat>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <CaptureAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Capture>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DefaultField>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<ExtractField> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <XPath>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <LowerNames>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <StreamType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Stream <Content>k__BackingField;
    public string Id { get; private set; }
    public string ResourceName { get; private set; }
    public bool AutoCommit { get; public set; }
    public bool ExtractOnly { get; public set; }
    public ExtractFormat ExtractFormat { get; public set; }
    public bool CaptureAttributes { get; public set; }
    public string Capture { get; public set; }
    public string Prefix { get; public set; }
    public string DefaultField { get; public set; }
    public IEnumerable`1<ExtractField> Fields { get; public set; }
    public string XPath { get; public set; }
    public bool LowerNames { get; public set; }
    public string StreamType { get; public set; }
    public Stream Content { get; private set; }
    public ExtractParameters(Stream content, string id, string resourceName);
    public ExtractParameters(FileStream content, string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceName();
    [CompilerGeneratedAttribute]
private void set_ResourceName(string value);
    [CompilerGeneratedAttribute]
public bool get_AutoCommit();
    [CompilerGeneratedAttribute]
public void set_AutoCommit(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExtractOnly();
    [CompilerGeneratedAttribute]
public void set_ExtractOnly(bool value);
    [CompilerGeneratedAttribute]
public ExtractFormat get_ExtractFormat();
    [CompilerGeneratedAttribute]
public void set_ExtractFormat(ExtractFormat value);
    [CompilerGeneratedAttribute]
public bool get_CaptureAttributes();
    [CompilerGeneratedAttribute]
public void set_CaptureAttributes(bool value);
    [CompilerGeneratedAttribute]
public string get_Capture();
    [CompilerGeneratedAttribute]
public void set_Capture(string value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultField();
    [CompilerGeneratedAttribute]
public void set_DefaultField(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ExtractField> get_Fields();
    [CompilerGeneratedAttribute]
public void set_Fields(IEnumerable`1<ExtractField> value);
    [CompilerGeneratedAttribute]
public string get_XPath();
    [CompilerGeneratedAttribute]
public void set_XPath(string value);
    [CompilerGeneratedAttribute]
public bool get_LowerNames();
    [CompilerGeneratedAttribute]
public void set_LowerNames(bool value);
    [CompilerGeneratedAttribute]
public string get_StreamType();
    [CompilerGeneratedAttribute]
public void set_StreamType(string value);
    [CompilerGeneratedAttribute]
public Stream get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(Stream value);
}
public class SolrNet.ExtractResponse : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ResponseHeader <ResponseHeader>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<ExtractField> <Metadata>k__BackingField;
    public ResponseHeader ResponseHeader { get; public set; }
    public string Content { get; public set; }
    public List`1<ExtractField> Metadata { get; public set; }
    public ExtractResponse(ResponseHeader responseHeader);
    [CompilerGeneratedAttribute]
public ResponseHeader get_ResponseHeader();
    [CompilerGeneratedAttribute]
public void set_ResponseHeader(ResponseHeader value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public List`1<ExtractField> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(List`1<ExtractField> value);
}
public class SolrNet.FacetDateInclude : object {
    protected string value;
    public static FacetDateInclude Lower { get; }
    public static FacetDateInclude Upper { get; }
    public static FacetDateInclude Edge { get; }
    public static FacetDateInclude Outer { get; }
    public static FacetDateInclude All { get; }
    protected FacetDateInclude(string value);
    public static FacetDateInclude get_Lower();
    public static FacetDateInclude get_Upper();
    public static FacetDateInclude get_Edge();
    public static FacetDateInclude get_Outer();
    public static FacetDateInclude get_All();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class SolrNet.FacetDateOther : object {
    protected string value;
    public static FacetDateOther Before { get; }
    public static FacetDateOther After { get; }
    public static FacetDateOther Between { get; }
    public static FacetDateOther None { get; }
    public static FacetDateOther All { get; }
    protected FacetDateOther(string value);
    public static FacetDateOther get_Before();
    public static FacetDateOther get_After();
    public static FacetDateOther get_Between();
    public static FacetDateOther get_None();
    public static FacetDateOther get_All();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class SolrNet.FacetIntervalSet : object {
    private static Regex cleanCharacters;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FacetIntervalSetValue <Start>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FacetIntervalSetValue <End>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private LocalParams <LocalParams>k__BackingField;
    public FacetIntervalSetValue Start { get; public set; }
    public FacetIntervalSetValue End { get; public set; }
    public LocalParams LocalParams { get; public set; }
    public FacetIntervalSet(FacetIntervalSetValue start, FacetIntervalSetValue end);
    public FacetIntervalSet(FacetIntervalSetValue start, FacetIntervalSetValue end, LocalParams localParams);
    public FacetIntervalSet(FacetIntervalSetValue start, FacetIntervalSetValue end, string key);
    private static FacetIntervalSet();
    [CompilerGeneratedAttribute]
public FacetIntervalSetValue get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(FacetIntervalSetValue value);
    [CompilerGeneratedAttribute]
public FacetIntervalSetValue get_End();
    [CompilerGeneratedAttribute]
public void set_End(FacetIntervalSetValue value);
    [CompilerGeneratedAttribute]
public LocalParams get_LocalParams();
    [CompilerGeneratedAttribute]
public void set_LocalParams(LocalParams value);
    public virtual string ToString();
    private string SetValueToString(FacetIntervalSetValue value, bool isStart);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class SolrNet.FacetIntervalSetValue : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Inclusive>k__BackingField;
    public string Value { get; }
    public bool Inclusive { get; }
    public FacetIntervalSetValue(int value, bool inclusive);
    public FacetIntervalSetValue(DateTime value, bool inclusive);
    public FacetIntervalSetValue(string value, bool inclusive);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public bool get_Inclusive();
}
public class SolrNet.FacetRangeInclude : object {
    protected string value;
    public static FacetRangeInclude Lower { get; }
    public static FacetRangeInclude Upper { get; }
    public static FacetRangeInclude Edge { get; }
    public static FacetRangeInclude Outer { get; }
    public static FacetRangeInclude All { get; }
    protected FacetRangeInclude(string value);
    public static FacetRangeInclude get_Lower();
    public static FacetRangeInclude get_Upper();
    public static FacetRangeInclude get_Edge();
    public static FacetRangeInclude get_Outer();
    public static FacetRangeInclude get_All();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class SolrNet.FacetRangeMethod : object {
    protected string value;
    public static FacetRangeMethod Filter { get; }
    public static FacetRangeMethod DV { get; }
    protected FacetRangeMethod(string value);
    public static FacetRangeMethod get_Filter();
    public static FacetRangeMethod get_DV();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class SolrNet.FacetRangeOther : object {
    protected string value;
    public static FacetRangeOther Before { get; }
    public static FacetRangeOther After { get; }
    public static FacetRangeOther Between { get; }
    public static FacetRangeOther None { get; }
    public static FacetRangeOther All { get; }
    protected FacetRangeOther(string value);
    public static FacetRangeOther get_Before();
    public static FacetRangeOther get_After();
    public static FacetRangeOther get_Between();
    public static FacetRangeOther get_None();
    public static FacetRangeOther get_All();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class SolrNet.Group`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <GroupValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <NumFound>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<T> <Documents>k__BackingField;
    public string GroupValue { get; public set; }
    public long NumFound { get; public set; }
    public ICollection`1<T> Documents { get; public set; }
    [CompilerGeneratedAttribute]
public string get_GroupValue();
    [CompilerGeneratedAttribute]
public void set_GroupValue(string value);
    [CompilerGeneratedAttribute]
public long get_NumFound();
    [CompilerGeneratedAttribute]
public void set_NumFound(long value);
    [CompilerGeneratedAttribute]
public ICollection`1<T> get_Documents();
    [CompilerGeneratedAttribute]
public void set_Documents(ICollection`1<T> value);
}
public class SolrNet.GroupedResults`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Matches>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<Group`1<T>> <Groups>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Ngroups>k__BackingField;
    public int Matches { get; public set; }
    public ICollection`1<Group`1<T>> Groups { get; public set; }
    public Nullable`1<int> Ngroups { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Matches();
    [CompilerGeneratedAttribute]
public void set_Matches(int value);
    [CompilerGeneratedAttribute]
public ICollection`1<Group`1<T>> get_Groups();
    [CompilerGeneratedAttribute]
public void set_Groups(ICollection`1<Group`1<T>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Ngroups();
    [CompilerGeneratedAttribute]
public void set_Ngroups(Nullable`1<int> value);
}
public abstract class SolrNet.Impl.AbstractSolrQueryResults`1 : List`1<T> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Cursor <NextCursorMark>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <NumFound>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <Start>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<double> <MaxScore>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ResponseHeader <Header>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<string, int> <FacetQueries>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<string, ICollection`1<KeyValuePair`2<string, int>>> <FacetFields>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<string, DateFacetingResult> <FacetDates>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<string, RangeFacetingResult> <FacetRanges>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<string, ICollection`1<KeyValuePair`2<string, int>>> <FacetIntervals>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<string, IList`1<Pivot>> <FacetPivots>k__BackingField;
    public Cursor NextCursorMark { get; public set; }
    public long NumFound { get; public set; }
    public long Start { get; public set; }
    public Nullable`1<double> MaxScore { get; public set; }
    public ResponseHeader Header { get; public set; }
    public IDictionary`2<string, int> FacetQueries { get; public set; }
    public IDictionary`2<string, ICollection`1<KeyValuePair`2<string, int>>> FacetFields { get; public set; }
    [ObsoleteAttribute("As of Solr 3.1 has been deprecated, as of Solr 6.6 unsupported.")]
public IDictionary`2<string, DateFacetingResult> FacetDates { get; public set; }
    public IDictionary`2<string, RangeFacetingResult> FacetRanges { get; public set; }
    public IDictionary`2<string, ICollection`1<KeyValuePair`2<string, int>>> FacetIntervals { get; public set; }
    public IDictionary`2<string, IList`1<Pivot>> FacetPivots { get; public set; }
    [CompilerGeneratedAttribute]
public Cursor get_NextCursorMark();
    [CompilerGeneratedAttribute]
public void set_NextCursorMark(Cursor value);
    [CompilerGeneratedAttribute]
public long get_NumFound();
    [CompilerGeneratedAttribute]
public void set_NumFound(long value);
    [CompilerGeneratedAttribute]
public long get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_MaxScore();
    [CompilerGeneratedAttribute]
public void set_MaxScore(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public ResponseHeader get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(ResponseHeader value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, int> get_FacetQueries();
    [CompilerGeneratedAttribute]
public void set_FacetQueries(IDictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ICollection`1<KeyValuePair`2<string, int>>> get_FacetFields();
    [CompilerGeneratedAttribute]
public void set_FacetFields(IDictionary`2<string, ICollection`1<KeyValuePair`2<string, int>>> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, DateFacetingResult> get_FacetDates();
    [CompilerGeneratedAttribute]
public void set_FacetDates(IDictionary`2<string, DateFacetingResult> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, RangeFacetingResult> get_FacetRanges();
    [CompilerGeneratedAttribute]
public void set_FacetRanges(IDictionary`2<string, RangeFacetingResult> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ICollection`1<KeyValuePair`2<string, int>>> get_FacetIntervals();
    [CompilerGeneratedAttribute]
public void set_FacetIntervals(IDictionary`2<string, ICollection`1<KeyValuePair`2<string, int>>> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IList`1<Pivot>> get_FacetPivots();
    [CompilerGeneratedAttribute]
public void set_FacetPivots(IDictionary`2<string, IList`1<Pivot>> value);
    public abstract virtual R Switch(Func`2<SolrQueryResults`1<T>, R> query, Func`2<SolrMoreLikeThisHandlerResults`1<T>, R> moreLikeThis);
    public void Switch(Action`1<SolrQueryResults`1<T>> query, Action`1<SolrMoreLikeThisHandlerResults`1<T>> moreLikeThis);
}
public class SolrNet.Impl.AutoSolrConnection : object {
    private static string version;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PostSolrConnection <SyncFallbackConnection>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ServerURL>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private HttpClient <HttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <MaxUriLength>k__BackingField;
    private bool disposedValue;
    private PostSolrConnection SyncFallbackConnection { get; }
    public string ServerURL { get; }
    public HttpClient HttpClient { get; }
    public int MaxUriLength { get; public set; }
    public AutoSolrConnection(string serverUrl);
    public AutoSolrConnection(string serverUrl, ICredentials credentials);
    public AutoSolrConnection(string serverUrl, ICredentials credentials, IHttpWebRequestFactory httpWebRequestFactory);
    public AutoSolrConnection(string serverUrl, HttpClient httpClient);
    public AutoSolrConnection(string serverUrl, HttpClient httpClient, IHttpWebRequestFactory httpWebRequestFactory);
    [CompilerGeneratedAttribute]
private PostSolrConnection get_SyncFallbackConnection();
    [CompilerGeneratedAttribute]
public string get_ServerURL();
    [CompilerGeneratedAttribute]
public HttpClient get_HttpClient();
    [CompilerGeneratedAttribute]
public int get_MaxUriLength();
    [CompilerGeneratedAttribute]
public void set_MaxUriLength(int value);
    public sealed virtual string Get(string relativeUrl, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    [AsyncStateMachineAttribute("SolrNet.Impl.AutoSolrConnection/<GetAsync>d__20")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> GetAsync(string relativeUrl, IEnumerable`1<KeyValuePair`2<string, string>> parameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SolrNet.Impl.AutoSolrConnection/<GetAsStreamAsync>d__21")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Stream> GetAsStreamAsync(string relativeUrl, IEnumerable`1<KeyValuePair`2<string, string>> parameters, CancellationToken cancellationToken);
    public sealed virtual string Post(string relativeUrl, string s);
    public sealed virtual Task`1<string> PostAsync(string relativeUrl, string s);
    [AsyncStateMachineAttribute("SolrNet.Impl.AutoSolrConnection/<PostAsync>d__24")]
[DebuggerStepThroughAttribute]
public Task`1<string> PostAsync(string relativeUrl, string s, CancellationToken cancellationToken);
    public sealed virtual string PostStream(string relativeUrl, string contentType, Stream content, IEnumerable`1<KeyValuePair`2<string, string>> getParameters);
    [AsyncStateMachineAttribute("SolrNet.Impl.AutoSolrConnection/<PostStreamAsync>d__26")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> PostStreamAsync(string relativeUrl, string contentType, Stream content, IEnumerable`1<KeyValuePair`2<string, string>> getParameters);
    [AsyncStateMachineAttribute("SolrNet.Impl.AutoSolrConnection/<PostStreamAsStreamAsync>d__27")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Stream> PostStreamAsStreamAsync(string relativeUrl, string contentType, Stream content, IEnumerable`1<KeyValuePair`2<string, string>> getParameters, CancellationToken cancellationToken);
    private string GetQuery(IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class SolrNet.Impl.CollationResult : object {
    private long _hits;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CollationQuery>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<KeyValuePair`2<string, string>> <MisspellingsAndCorrections>k__BackingField;
    public string CollationQuery { get; internal set; }
    public long Hits { get; internal set; }
    public ICollection`1<KeyValuePair`2<string, string>> MisspellingsAndCorrections { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_CollationQuery();
    [CompilerGeneratedAttribute]
internal void set_CollationQuery(string value);
    public long get_Hits();
    internal void set_Hits(long value);
    [CompilerGeneratedAttribute]
public ICollection`1<KeyValuePair`2<string, string>> get_MisspellingsAndCorrections();
    [CompilerGeneratedAttribute]
internal void set_MisspellingsAndCorrections(ICollection`1<KeyValuePair`2<string, string>> value);
}
public class SolrNet.Impl.CoreIndexResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <SearchableDocumentCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <TotalDocumentCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <Version>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <SegmentCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsCurrent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsOptimized>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasDeletions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <LastModified>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Size>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <SizeInBytes>k__BackingField;
    public long SearchableDocumentCount { get; public set; }
    public long TotalDocumentCount { get; public set; }
    public long Version { get; public set; }
    public int SegmentCount { get; public set; }
    public bool IsCurrent { get; public set; }
    public bool IsOptimized { get; public set; }
    public bool HasDeletions { get; public set; }
    public string Directory { get; public set; }
    public DateTime LastModified { get; public set; }
    public string Size { get; public set; }
    public long SizeInBytes { get; public set; }
    [CompilerGeneratedAttribute]
public long get_SearchableDocumentCount();
    [CompilerGeneratedAttribute]
public void set_SearchableDocumentCount(long value);
    [CompilerGeneratedAttribute]
public long get_TotalDocumentCount();
    [CompilerGeneratedAttribute]
public void set_TotalDocumentCount(long value);
    [CompilerGeneratedAttribute]
public long get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(long value);
    [CompilerGeneratedAttribute]
public int get_SegmentCount();
    [CompilerGeneratedAttribute]
public void set_SegmentCount(int value);
    [CompilerGeneratedAttribute]
public bool get_IsCurrent();
    [CompilerGeneratedAttribute]
public void set_IsCurrent(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOptimized();
    [CompilerGeneratedAttribute]
public void set_IsOptimized(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasDeletions();
    [CompilerGeneratedAttribute]
public void set_HasDeletions(bool value);
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
public void set_Directory(string value);
    [CompilerGeneratedAttribute]
public DateTime get_LastModified();
    [CompilerGeneratedAttribute]
public void set_LastModified(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(string value);
    [CompilerGeneratedAttribute]
public long get_SizeInBytes();
    [CompilerGeneratedAttribute]
public void set_SizeInBytes(long value);
}
public class SolrNet.Impl.CoreResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDefaultCore>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <InstanceDir>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DataDir>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <Uptime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CoreIndexResult <Index>k__BackingField;
    public string Name { get; public set; }
    public bool IsDefaultCore { get; public set; }
    public string InstanceDir { get; public set; }
    public string DataDir { get; public set; }
    public DateTime StartTime { get; public set; }
    public long Uptime { get; public set; }
    public CoreIndexResult Index { get; public set; }
    public CoreResult(string coreName);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDefaultCore();
    [CompilerGeneratedAttribute]
public void set_IsDefaultCore(bool value);
    [CompilerGeneratedAttribute]
public string get_InstanceDir();
    [CompilerGeneratedAttribute]
public void set_InstanceDir(string value);
    [CompilerGeneratedAttribute]
public string get_DataDir();
    [CompilerGeneratedAttribute]
public void set_DataDir(string value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public long get_Uptime();
    [CompilerGeneratedAttribute]
public void set_Uptime(long value);
    [CompilerGeneratedAttribute]
public CoreIndexResult get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(CoreIndexResult value);
}
public abstract class SolrNet.Impl.DebugResults : object {
    private TimingResults timing;
    private string parsedQuery;
    private string parsedQueryString;
    private IDictionary`2<string, string> explanation;
    public TimingResults Timing { get; }
    public IDictionary`2<string, string> Explanation { get; }
    public string ParsedQuery { get; }
    public string ParsedQueryString { get; }
    private DebugResults(TimingResults timing, string parsedQuery, string parsedQueryString, IDictionary`2<string, string> explanation);
    public TimingResults get_Timing();
    public IDictionary`2<string, string> get_Explanation();
    public string get_ParsedQuery();
    public string get_ParsedQueryString();
}
public class SolrNet.Impl.DocumentPropertyVisitors.AggregateDocumentVisitor : object {
    private IEnumerable`1<ISolrDocumentPropertyVisitor> visitors;
    public AggregateDocumentVisitor(IEnumerable`1<ISolrDocumentPropertyVisitor> visitors);
    public sealed virtual void Visit(object doc, string fieldName, XElement field);
}
public class SolrNet.Impl.DocumentPropertyVisitors.DefaultDocumentVisitor : object {
    private AggregateDocumentVisitor visitor;
    public DefaultDocumentVisitor(IReadOnlyMappingManager mapper, ISolrFieldParser parser);
    public sealed virtual void Visit(object doc, string fieldName, XElement field);
}
public class SolrNet.Impl.DocumentPropertyVisitors.GenericDictionaryDocumentVisitor : object {
    private IReadOnlyMappingManager mapper;
    private ISolrFieldParser parser;
    private Converter`2<Type, bool> memoCanHandleType;
    private Func`3<Type, string, SolrFieldModel> memoGetThisField;
    public GenericDictionaryDocumentVisitor(IReadOnlyMappingManager mapper, ISolrFieldParser parser);
    public bool CanHandleType(Type t);
    private static object NewDictionary(Type[] typeArgs);
    private static void SetKV(object dict, object key, object value);
    private static object ConvertTo(string s, Type t);
    public SolrFieldModel GetThisField(Type t, string fieldName);
    private static string GetKeyToUse(string k, string fieldName);
    public sealed virtual void Visit(object doc, string fieldName, XElement field);
}
public class SolrNet.Impl.DocumentPropertyVisitors.RegularDocumentVisitor : object {
    private ISolrFieldParser parser;
    private IReadOnlyMappingManager mapper;
    public RegularDocumentVisitor(ISolrFieldParser parser, IReadOnlyMappingManager mapper);
    public sealed virtual void Visit(object doc, string fieldName, XElement field);
}
public class SolrNet.Impl.ExplanationModel : object {
    private bool match;
    private double value;
    private string description;
    private ICollection`1<ExplanationModel> details;
    public bool Match { get; }
    public double Value { get; }
    public string Description { get; }
    public ICollection`1<ExplanationModel> Details { get; }
    public ExplanationModel(bool match, double value, string description, ICollection`1<ExplanationModel> details);
    public bool get_Match();
    public double get_Value();
    public string get_Description();
    public ICollection`1<ExplanationModel> get_Details();
    public virtual string ToString();
}
public class SolrNet.Impl.FacetQuerySerializers.AggregateFacetQuerySerializer : object {
    private ISolrFacetQuerySerializer[] serializers;
    public AggregateFacetQuerySerializer(ISolrFacetQuerySerializer[] serializers);
    public sealed virtual bool CanHandleType(Type t);
    [IteratorStateMachineAttribute("SolrNet.Impl.FacetQuerySerializers.AggregateFacetQuerySerializer/<Serialize>d__3")]
public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> Serialize(object q);
}
public class SolrNet.Impl.FacetQuerySerializers.DefaultFacetQuerySerializer : object {
    private AggregateFacetQuerySerializer serializer;
    public DefaultFacetQuerySerializer(ISolrQuerySerializer querySerializer, ISolrFieldSerializer fieldSerializer);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> Serialize(object q);
}
public abstract class SolrNet.Impl.FacetQuerySerializers.SingleTypeFacetQuerySerializer`1 : object {
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> Serialize(object q);
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, string>> Serialize(T q);
}
[ObsoleteAttribute("As of Solr 3.1 has been deprecated, as of Solr 6.6 unsupported.")]
public class SolrNet.Impl.FacetQuerySerializers.SolrFacetDateQuerySerializer : SingleTypeFacetQuerySerializer`1<SolrFacetDateQuery> {
    private static Regex localParamsRx;
    private ISolrFieldSerializer fieldSerializer;
    public SolrFacetDateQuerySerializer(ISolrFieldSerializer fieldSerializer);
    private static SolrFacetDateQuerySerializer();
    public string SerializeSingle(object o);
    [IteratorStateMachineAttribute("SolrNet.Impl.FacetQuerySerializers.SolrFacetDateQuerySerializer/<Serialize>d__4")]
public virtual IEnumerable`1<KeyValuePair`2<string, string>> Serialize(SolrFacetDateQuery q);
}
public class SolrNet.Impl.FacetQuerySerializers.SolrFacetFieldQuerySerializer : SingleTypeFacetQuerySerializer`1<SolrFacetFieldQuery> {
    private static Regex localParamsRx;
    private static SolrFacetFieldQuerySerializer();
    [IteratorStateMachineAttribute("SolrNet.Impl.FacetQuerySerializers.SolrFacetFieldQuerySerializer/<Serialize>d__1")]
public virtual IEnumerable`1<KeyValuePair`2<string, string>> Serialize(SolrFacetFieldQuery q);
}
public class SolrNet.Impl.FacetQuerySerializers.SolrFacetIntervalQuerySerializer : SingleTypeFacetQuerySerializer`1<SolrFacetIntervalQuery> {
    private static Regex localParamsRx;
    private ISolrFieldSerializer fieldSerializer;
    public SolrFacetIntervalQuerySerializer(ISolrFieldSerializer fieldSerializer);
    private static SolrFacetIntervalQuerySerializer();
    public string SerializeSingle(object o);
    [IteratorStateMachineAttribute("SolrNet.Impl.FacetQuerySerializers.SolrFacetIntervalQuerySerializer/<Serialize>d__4")]
public virtual IEnumerable`1<KeyValuePair`2<string, string>> Serialize(SolrFacetIntervalQuery q);
}
public class SolrNet.Impl.FacetQuerySerializers.SolrFacetPivotQuerySerializer : SingleTypeFacetQuerySerializer`1<SolrFacetPivotQuery> {
    [IteratorStateMachineAttribute("SolrNet.Impl.FacetQuerySerializers.SolrFacetPivotQuerySerializer/<Serialize>d__0")]
public virtual IEnumerable`1<KeyValuePair`2<string, string>> Serialize(SolrFacetPivotQuery q);
}
public class SolrNet.Impl.FacetQuerySerializers.SolrFacetQuerySerializer : SingleTypeFacetQuerySerializer`1<SolrFacetQuery> {
    private ISolrQuerySerializer serializer;
    public SolrFacetQuerySerializer(ISolrQuerySerializer serializer);
    [IteratorStateMachineAttribute("SolrNet.Impl.FacetQuerySerializers.SolrFacetQuerySerializer/<Serialize>d__2")]
public virtual IEnumerable`1<KeyValuePair`2<string, string>> Serialize(SolrFacetQuery q);
}
public class SolrNet.Impl.FacetQuerySerializers.SolrFacetRangeQuerySerializer : SingleTypeFacetQuerySerializer`1<SolrFacetRangeQuery> {
    private static Regex localParamsRx;
    private ISolrFieldSerializer fieldSerializer;
    public SolrFacetRangeQuerySerializer(ISolrFieldSerializer fieldSerializer);
    private static SolrFacetRangeQuerySerializer();
    public string SerializeSingle(object o);
    [IteratorStateMachineAttribute("SolrNet.Impl.FacetQuerySerializers.SolrFacetRangeQuerySerializer/<Serialize>d__4")]
public virtual IEnumerable`1<KeyValuePair`2<string, string>> Serialize(SolrFacetRangeQuery q);
}
public class SolrNet.Impl.FieldParsers.AggregateFieldParser : object {
    private IEnumerable`1<ISolrFieldParser> parsers;
    public AggregateFieldParser(IEnumerable`1<ISolrFieldParser> parsers);
    public sealed virtual bool CanHandleSolrType(string solrType);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual object Parse(XElement field, Type t);
}
public class SolrNet.Impl.FieldParsers.CollectionFieldParser : object {
    private ISolrFieldParser valueParser;
    public CollectionFieldParser(ISolrFieldParser valueParser);
    public sealed virtual bool CanHandleSolrType(string solrType);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual object Parse(XElement field, Type t);
    public IList GetNonGenericCollectionProperty(XElement field);
    public Array GetArrayProperty(XElement field, Type t);
    public IList GetGenericCollectionProperty(XElement field, Type[] genericTypes);
}
public class SolrNet.Impl.FieldParsers.DateTimeFieldParser : object {
    public sealed virtual bool CanHandleSolrType(string solrType);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual object Parse(XElement field, Type t);
    public static DateTime ParseDate(string s);
}
public class SolrNet.Impl.FieldParsers.DateTimeOffsetFieldParser : object {
    public sealed virtual bool CanHandleSolrType(string solrType);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual object Parse(XElement field, Type t);
    public static DateTimeOffset Parse(string s);
}
public class SolrNet.Impl.FieldParsers.DecimalFieldParser : object {
    public sealed virtual bool CanHandleSolrType(string solrType);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual object Parse(XElement field, Type t);
}
public class SolrNet.Impl.FieldParsers.DefaultFieldParser : object {
    private AggregateFieldParser parser;
    public sealed virtual bool CanHandleSolrType(string solrType);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual object Parse(XElement field, Type t);
}
public class SolrNet.Impl.FieldParsers.DoubleFieldParser : object {
    public sealed virtual bool CanHandleSolrType(string solrType);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual object Parse(XElement field, Type t);
}
public class SolrNet.Impl.FieldParsers.EnumFieldParser : object {
    public sealed virtual bool CanHandleSolrType(string solrType);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual object Parse(XElement field, Type t);
}
public class SolrNet.Impl.FieldParsers.FloatFieldParser : object {
    public sealed virtual bool CanHandleSolrType(string solrType);
    public sealed virtual bool CanHandleType(Type t);
    public static float Parse(string value);
    public static float Parse(XElement field);
    public sealed virtual object Parse(XElement field, Type t);
}
public class SolrNet.Impl.FieldParsers.GuidFieldParser : object {
    public sealed virtual bool CanHandleSolrType(string solrType);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual object Parse(XElement field, Type t);
}
public class SolrNet.Impl.FieldParsers.InferringFieldParser : object {
    private ISolrFieldParser parser;
    private static IDictionary`2<string, Type> solrTypes;
    public InferringFieldParser(ISolrFieldParser parser);
    private static InferringFieldParser();
    public sealed virtual bool CanHandleSolrType(string solrType);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual object Parse(XElement field, Type t);
}
public class SolrNet.Impl.FieldParsers.IntFieldParser : object {
    public sealed virtual bool CanHandleSolrType(string solrType);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual object Parse(XElement field, Type t);
}
public class SolrNet.Impl.FieldParsers.LocationFieldParser : object {
    public sealed virtual bool CanHandleSolrType(string solrType);
    public sealed virtual bool CanHandleType(Type t);
    public static Location Parse(string v);
    public sealed virtual object Parse(XElement field, Type t);
}
public class SolrNet.Impl.FieldParsers.LongFieldParser : object {
    public sealed virtual bool CanHandleSolrType(string solrType);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual object Parse(XElement field, Type t);
}
public class SolrNet.Impl.FieldParsers.MoneyFieldParser : object {
    public sealed virtual bool CanHandleSolrType(string solrType);
    public sealed virtual bool CanHandleType(Type t);
    public static Money Parse(string v);
    public sealed virtual object Parse(XElement field, Type t);
}
public class SolrNet.Impl.FieldParsers.NullableFieldParser : object {
    private ISolrFieldParser parser;
    public NullableFieldParser(ISolrFieldParser parser);
    public sealed virtual bool CanHandleSolrType(string solrType);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual object Parse(XElement field, Type t);
}
public class SolrNet.Impl.FieldParsers.TypeConvertingFieldParser : object {
    private static IDictionary`2<string, Type> solrTypes;
    private static TypeConvertingFieldParser();
    public sealed virtual bool CanHandleSolrType(string solrType);
    public sealed virtual bool CanHandleType(Type t);
    public Type GetUnderlyingType(XElement field, Type t);
    public sealed virtual object Parse(XElement field, Type t);
}
public abstract class SolrNet.Impl.FieldSerializers.AbstractFieldSerializer`1 : object {
    public abstract virtual IEnumerable`1<PropertyNode> Parse(T obj);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual IEnumerable`1<PropertyNode> Serialize(object obj);
}
public class SolrNet.Impl.FieldSerializers.AggregateFieldSerializer : object {
    private IEnumerable`1<ISolrFieldSerializer> serializers;
    public AggregateFieldSerializer(IEnumerable`1<ISolrFieldSerializer> serializers);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual IEnumerable`1<PropertyNode> Serialize(object obj);
}
public class SolrNet.Impl.FieldSerializers.BoolFieldSerializer : AbstractFieldSerializer`1<bool> {
    public string SerializeBool(bool o);
    [IteratorStateMachineAttribute("SolrNet.Impl.FieldSerializers.BoolFieldSerializer/<Parse>d__1")]
public virtual IEnumerable`1<PropertyNode> Parse(bool obj);
}
public class SolrNet.Impl.FieldSerializers.CollectionFieldSerializer : object {
    private ISolrFieldSerializer valueSerializer;
    public CollectionFieldSerializer(ISolrFieldSerializer valueSerializer);
    public sealed virtual bool CanHandleType(Type t);
    [IteratorStateMachineAttribute("SolrNet.Impl.FieldSerializers.CollectionFieldSerializer/<Serialize>d__3")]
public sealed virtual IEnumerable`1<PropertyNode> Serialize(object obj);
}
public class SolrNet.Impl.FieldSerializers.DateTimeFieldSerializer : AbstractFieldSerializer`1<DateTime> {
    public static string DateTimeFormat;
    private static DateTimeFieldSerializer();
    public static string SerializeDate(DateTime dt);
    [IteratorStateMachineAttribute("SolrNet.Impl.FieldSerializers.DateTimeFieldSerializer/<Parse>d__2")]
public virtual IEnumerable`1<PropertyNode> Parse(DateTime obj);
}
public class SolrNet.Impl.FieldSerializers.DateTimeOffsetFieldSerializer : AbstractFieldSerializer`1<DateTimeOffset> {
    public static string Serialize(DateTimeOffset dt);
    [IteratorStateMachineAttribute("SolrNet.Impl.FieldSerializers.DateTimeOffsetFieldSerializer/<Parse>d__1")]
public virtual IEnumerable`1<PropertyNode> Parse(DateTimeOffset obj);
}
public class SolrNet.Impl.FieldSerializers.DefaultFieldSerializer : object {
    private AggregateFieldSerializer serializer;
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual IEnumerable`1<PropertyNode> Serialize(object obj);
}
public class SolrNet.Impl.FieldSerializers.FormattableFieldSerializer : object {
    public sealed virtual bool CanHandleType(Type t);
    [IteratorStateMachineAttribute("SolrNet.Impl.FieldSerializers.FormattableFieldSerializer/<Serialize>d__1")]
public sealed virtual IEnumerable`1<PropertyNode> Serialize(object obj);
}
public class SolrNet.Impl.FieldSerializers.GenericDictionaryFieldSerializer : object {
    private ISolrFieldSerializer serializer;
    public GenericDictionaryFieldSerializer(ISolrFieldSerializer serializer);
    public sealed virtual bool CanHandleType(Type t);
    public string KVKey(object kv);
    public object KVValue(object kv);
    [IteratorStateMachineAttribute("SolrNet.Impl.FieldSerializers.GenericDictionaryFieldSerializer/<Serialize>d__5")]
public sealed virtual IEnumerable`1<PropertyNode> Serialize(object obj);
}
public class SolrNet.Impl.FieldSerializers.MoneyFieldSerializer : AbstractFieldSerializer`1<Money> {
    [IteratorStateMachineAttribute("SolrNet.Impl.FieldSerializers.MoneyFieldSerializer/<Parse>d__0")]
public virtual IEnumerable`1<PropertyNode> Parse(Money obj);
}
public class SolrNet.Impl.FieldSerializers.NullableFieldSerializer : object {
    private ISolrFieldSerializer serializer;
    public NullableFieldSerializer(ISolrFieldSerializer serializer);
    public sealed virtual bool CanHandleType(Type t);
    [IteratorStateMachineAttribute("SolrNet.Impl.FieldSerializers.NullableFieldSerializer/<Serialize>d__3")]
public sealed virtual IEnumerable`1<PropertyNode> Serialize(object obj);
}
public class SolrNet.Impl.FieldSerializers.ToStringFieldSerializer : object {
    public sealed virtual bool CanHandleType(Type t);
    [IteratorStateMachineAttribute("SolrNet.Impl.FieldSerializers.ToStringFieldSerializer/<Serialize>d__1")]
public sealed virtual IEnumerable`1<PropertyNode> Serialize(object obj);
}
public class SolrNet.Impl.FieldSerializers.TypeConvertingFieldSerializer : object {
    public sealed virtual bool CanHandleType(Type t);
    [IteratorStateMachineAttribute("SolrNet.Impl.FieldSerializers.TypeConvertingFieldSerializer/<Serialize>d__1")]
public sealed virtual IEnumerable`1<PropertyNode> Serialize(object obj);
}
[DefaultMemberAttribute("Item")]
public class SolrNet.Impl.HighlightedSnippets : object {
    private IDictionary`2<string, ICollection`1<string>> fields;
    public IDictionary`2<string, ICollection`1<string>> Snippets { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ICollection`1<string> Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<ICollection`1<string>> Values { get; }
    public IDictionary`2<string, ICollection`1<string>> get_Snippets();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, ICollection`1<string>>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(KeyValuePair`2<string, ICollection`1<string>> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, ICollection`1<string>> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, ICollection`1<string>> item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void Add(string key, ICollection`1<string> value);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, ICollection`1& value);
    public sealed virtual ICollection`1<string> get_Item(string key);
    public sealed virtual void set_Item(string key, ICollection`1<string> value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<ICollection`1<string>> get_Values();
}
public interface SolrNet.Impl.ISelfSerializingQuery {
    public string Query { get; }
    public abstract virtual string get_Query();
}
public interface SolrNet.Impl.ISolrAbstractResponseParser`1 {
    public abstract virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
}
[DefaultMemberAttribute("Item")]
public interface SolrNet.Impl.ISolrCache {
    public SolrCacheEntity Item { get; }
    public abstract virtual SolrCacheEntity get_Item(string url);
    public abstract virtual void Add(SolrCacheEntity e);
}
public interface SolrNet.Impl.ISolrDIHStatusParser {
    public abstract virtual SolrDIHStatus Parse(XDocument solrDIHStatusXml);
}
public interface SolrNet.Impl.ISolrDocumentActivator`1 {
    public abstract virtual T Create();
}
public interface SolrNet.Impl.ISolrDocumentPropertyVisitor {
    public abstract virtual void Visit(object doc, string fieldName, XElement field);
}
public interface SolrNet.Impl.ISolrDocumentResponseParser`1 {
    public abstract virtual IList`1<T> ParseResults(XElement parentNode);
}
public interface SolrNet.Impl.ISolrExtractResponseParser {
    public abstract virtual ExtractResponse Parse(XDocument response);
}
public interface SolrNet.Impl.ISolrFacetQuerySerializer {
    public abstract virtual bool CanHandleType(Type t);
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, string>> Serialize(object q);
}
public interface SolrNet.Impl.ISolrFieldParser {
    public abstract virtual bool CanHandleSolrType(string solrType);
    public abstract virtual bool CanHandleType(Type t);
    public abstract virtual object Parse(XElement field, Type t);
}
public interface SolrNet.Impl.ISolrFieldSerializer {
    public abstract virtual bool CanHandleType(Type t);
    public abstract virtual IEnumerable`1<PropertyNode> Serialize(object obj);
}
public interface SolrNet.Impl.ISolrHeaderResponseParser {
    public abstract virtual ResponseHeader Parse(XDocument response);
}
public interface SolrNet.Impl.ISolrMoreLikeThisHandlerQueryResultsParser`1 {
    public abstract virtual SolrMoreLikeThisHandlerResults`1<T> Parse(string r);
}
public interface SolrNet.Impl.ISolrMoreLikeThisHandlerResponseParser`1 {
    public abstract virtual void Parse(XDocument xml, SolrMoreLikeThisHandlerResults`1<T> results);
}
public interface SolrNet.Impl.ISolrQueryBody {
    public string MimeType { get; }
    public abstract virtual string Serialize();
    public abstract virtual string get_MimeType();
}
public interface SolrNet.Impl.ISolrQueryByRange {
    public string FieldName { get; }
    public object From { get; }
    public object To { get; }
    public bool Inclusive { get; }
    public bool InclusiveFrom { get; }
    public bool InclusiveTo { get; }
    public abstract virtual string get_FieldName();
    public abstract virtual object get_From();
    public abstract virtual object get_To();
    public abstract virtual bool get_Inclusive();
    public abstract virtual bool get_InclusiveFrom();
    public abstract virtual bool get_InclusiveTo();
}
public interface SolrNet.Impl.ISolrQuerySerializer {
    public abstract virtual bool CanHandleType(Type t);
    public abstract virtual string Serialize(object q);
}
public interface SolrNet.Impl.ISolrReplicationDetailsResponseParser {
    public abstract virtual ReplicationDetailsResponse Parse(XDocument xml);
}
public interface SolrNet.Impl.ISolrReplicationIndexVersionResponseParser {
    public abstract virtual ReplicationIndexVersionResponse Parse(XDocument xml);
}
public interface SolrNet.Impl.ISolrReplicationStatusResponseParser {
    public abstract virtual ReplicationStatusResponse Parse(XDocument xml);
}
public interface SolrNet.Impl.ISolrResponseParser`1 {
    public abstract virtual void Parse(XDocument xml, SolrQueryResults`1<T> results);
}
public interface SolrNet.Impl.ISolrStatusResponseParser {
    public abstract virtual List`1<CoreResult> Parse(XDocument xml);
}
public class SolrNet.Impl.LowLevelSolrServer : object {
    protected ISolrHeaderResponseParser headerParser;
    protected ISolrConnection connection;
    public LowLevelSolrServer(ISolrConnection connection, ISolrHeaderResponseParser parser);
    public XDocument Send(string handler, IEnumerable`1<KeyValuePair`2<string, string>> solrParams);
    public sealed virtual string Send(ISolrCommand cmd);
    public sealed virtual Task`1<string> SendAsync(ISolrCommand cmd);
    public ResponseHeader SendAndParseHeader(string handler, IEnumerable`1<KeyValuePair`2<string, string>> solrParams);
    public sealed virtual ResponseHeader SendAndParseHeader(ISolrCommand cmd);
    [AsyncStateMachineAttribute("SolrNet.Impl.LowLevelSolrServer/<SendAndParseHeaderAsync>d__8")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<ResponseHeader> SendAndParseHeaderAsync(ISolrCommand cmd);
    public string SendRaw(string handler, IEnumerable`1<KeyValuePair`2<string, string>> solrParams);
}
[DefaultMemberAttribute("Item")]
public class SolrNet.Impl.NullCache : object {
    public SolrCacheEntity Item { get; }
    public sealed virtual SolrCacheEntity get_Item(string url);
    public sealed virtual void Add(SolrCacheEntity e);
}
public class SolrNet.Impl.Offset : object {
    public int Start;
    public int End;
    public Offset(int start, int end);
}
public class SolrNet.Impl.PlainTextQueryBody : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Text>k__BackingField;
    private string Text { get; }
    public string MimeType { get; }
    public PlainTextQueryBody(string text);
    [CompilerGeneratedAttribute]
private string get_Text();
    public sealed virtual string Serialize();
    public sealed virtual string get_MimeType();
}
public class SolrNet.Impl.PostSolrConnection : object {
    private ISolrConnection conn;
    private string serverUrl;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IHttpWebRequestFactory <HttpWebRequestFactory>k__BackingField;
    public IHttpWebRequestFactory HttpWebRequestFactory { get; public set; }
    public string ServerUrl { get; }
    public PostSolrConnection(ISolrConnection conn, string serverUrl);
    public PostSolrConnection(ISolrConnection conn, string serverUrl, IHttpWebRequestFactory httpWebRequestFactory);
    [CompilerGeneratedAttribute]
public IHttpWebRequestFactory get_HttpWebRequestFactory();
    [CompilerGeneratedAttribute]
public void set_HttpWebRequestFactory(IHttpWebRequestFactory value);
    public string get_ServerUrl();
    public sealed virtual string Post(string relativeUrl, string s);
    public sealed virtual Task`1<string> PostAsync(string relativeUrl, string s);
    public ValueTuple`2<IHttpWebRequest, string> PrepareGet(string relativeUrl, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    public sealed virtual string Get(string relativeUrl, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    [AsyncStateMachineAttribute("SolrNet.Impl.PostSolrConnection/<GetAsync>d__14")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> GetAsync(string relativeUrl, IEnumerable`1<KeyValuePair`2<string, string>> parameters, CancellationToken cancellationToken);
    public sealed virtual string PostStream(string relativeUrl, string contentType, Stream content, IEnumerable`1<KeyValuePair`2<string, string>> getParameters);
    public sealed virtual Task`1<string> PostStreamAsync(string relativeUrl, string contentType, Stream content, IEnumerable`1<KeyValuePair`2<string, string>> getParameters);
}
public class SolrNet.Impl.PropertyNode : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FieldValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FieldNameSuffix>k__BackingField;
    public string FieldValue { get; public set; }
    public string FieldNameSuffix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FieldValue();
    [CompilerGeneratedAttribute]
public void set_FieldValue(string value);
    [CompilerGeneratedAttribute]
public string get_FieldNameSuffix();
    [CompilerGeneratedAttribute]
public void set_FieldNameSuffix(string value);
}
public class SolrNet.Impl.QuerySerializers.AggregateQuerySerializer : object {
    private ISolrQuerySerializer[] serializers;
    public AggregateQuerySerializer(ISolrQuerySerializer[] serializers);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual string Serialize(object q);
}
public class SolrNet.Impl.QuerySerializers.BoostQuerySerializer : SingleTypeQuerySerializer`1<SolrQueryBoost> {
    private ISolrQuerySerializer serializer;
    public BoostQuerySerializer(ISolrQuerySerializer serializer);
    public virtual string Serialize(SolrQueryBoost q);
}
public class SolrNet.Impl.QuerySerializers.ConstantScoreQuerySerializer : SingleTypeQuerySerializer`1<SolrConstantScoreQuery> {
    private ISolrQuerySerializer serializer;
    public ConstantScoreQuerySerializer(ISolrQuerySerializer serializer);
    public virtual string Serialize(SolrConstantScoreQuery q);
}
public class SolrNet.Impl.QuerySerializers.DateTimeRangeQuerySerializer : SingleTypeQuerySerializer`1<SolrQueryByRange`1<DateTime>> {
    private ISolrFieldSerializer fieldSerializer;
    public DateTimeRangeQuerySerializer(ISolrFieldSerializer fieldSerializer);
    public string SerializeSingle(object o);
    public virtual string Serialize(SolrQueryByRange`1<DateTime> q);
}
public class SolrNet.Impl.QuerySerializers.DefaultQuerySerializer : object {
    private AggregateQuerySerializer serializer;
    public DefaultQuerySerializer(ISolrFieldSerializer fieldSerializer);
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual string Serialize(object q);
}
public class SolrNet.Impl.QuerySerializers.HasValueQuerySerializer : SingleTypeQuerySerializer`1<SolrHasValueQuery> {
    private ISolrQuerySerializer serializer;
    public HasValueQuerySerializer(ISolrQuerySerializer serializer);
    public virtual string Serialize(SolrHasValueQuery q);
}
public class SolrNet.Impl.QuerySerializers.LocalParamsSerializer : SingleTypeQuerySerializer`1<LocalParamsQuery> {
    private ISolrQuerySerializer serializer;
    public LocalParamsSerializer(ISolrQuerySerializer serializer);
    public virtual string Serialize(LocalParamsQuery q);
}
public class SolrNet.Impl.QuerySerializers.MultipleCriteriaQuerySerializer : SingleTypeQuerySerializer`1<SolrMultipleCriteriaQuery> {
    private ISolrQuerySerializer serializer;
    public MultipleCriteriaQuerySerializer(ISolrQuerySerializer serializer);
    public virtual string Serialize(SolrMultipleCriteriaQuery q);
}
public class SolrNet.Impl.QuerySerializers.NotQuerySerializer : SingleTypeQuerySerializer`1<SolrNotQuery> {
    private ISolrQuerySerializer serializer;
    public NotQuerySerializer(ISolrQuerySerializer serializer);
    public virtual string Serialize(SolrNotQuery q);
}
public class SolrNet.Impl.QuerySerializers.NullableDateTimeRangeQuerySerializer : SingleTypeQuerySerializer`1<SolrQueryByRange`1<Nullable`1<DateTime>>> {
    private ISolrFieldSerializer fieldSerializer;
    public NullableDateTimeRangeQuerySerializer(ISolrFieldSerializer fieldSerializer);
    public string SerializeSingle(object o);
    public virtual string Serialize(SolrQueryByRange`1<Nullable`1<DateTime>> q);
}
public class SolrNet.Impl.QuerySerializers.QueryByFieldRegexSerializer : SingleTypeQuerySerializer`1<SolrQueryByFieldRegex> {
    public virtual string Serialize(SolrQueryByFieldRegex q);
}
public class SolrNet.Impl.QuerySerializers.QueryByFieldSerializer : SingleTypeQuerySerializer`1<SolrQueryByField> {
    public static Regex SpecialCharactersRx;
    private static QueryByFieldSerializer();
    public virtual string Serialize(SolrQueryByField q);
    public static string EscapeSpaces(string value);
    public static string Quote(string value);
}
public class SolrNet.Impl.QuerySerializers.QueryInListSerializer : SingleTypeQuerySerializer`1<SolrQueryInList> {
    private ISolrQuerySerializer serializer;
    public QueryInListSerializer(ISolrQuerySerializer serializer);
    public virtual string Serialize(SolrQueryInList q);
}
public class SolrNet.Impl.QuerySerializers.RangeQuerySerializer : object {
    private ISolrFieldSerializer fieldSerializer;
    public RangeQuerySerializer(ISolrFieldSerializer fieldSerializer);
    public sealed virtual bool CanHandleType(Type t);
    public static string BuildRange(string fieldName, string from, string to, bool inclusive);
    public static string BuildRange(string fieldName, string from, string to, bool inclusiveFrom, bool inclusiveTo);
    public string SerializeValue(object o);
    public sealed virtual string Serialize(object q);
}
public class SolrNet.Impl.QuerySerializers.RequiredQuerySerializer : SingleTypeQuerySerializer`1<SolrRequiredQuery> {
    private ISolrQuerySerializer serializer;
    public RequiredQuerySerializer(ISolrQuerySerializer serializer);
    public virtual string Serialize(SolrRequiredQuery q);
}
public class SolrNet.Impl.QuerySerializers.SelfSerializingQuerySerializer : object {
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual string Serialize(object q);
}
public abstract class SolrNet.Impl.QuerySerializers.SingleTypeQuerySerializer`1 : object {
    public sealed virtual bool CanHandleType(Type t);
    public sealed virtual string Serialize(object q);
    public abstract virtual string Serialize(T q);
}
public class SolrNet.Impl.ReplicationDetailsResponse : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ResponseHeader <responseHeader>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <indexSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <indexPath>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <isMaster>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <isSlave>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <indexVersion>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <generation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <isReplicating>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <totalPercent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <timeRemaining>k__BackingField;
    public ResponseHeader responseHeader { get; private set; }
    public string indexSize { get; private set; }
    public string indexPath { get; private set; }
    public string isMaster { get; private set; }
    public string isSlave { get; private set; }
    public long indexVersion { get; private set; }
    public long generation { get; private set; }
    public string isReplicating { get; private set; }
    public string totalPercent { get; private set; }
    public string timeRemaining { get; private set; }
    public ReplicationDetailsResponse(ResponseHeader ResponseHeader, string IndexSize, string IndexPath, string IsMaster, string IsSlave, long IndexVersion, long Generation, string IsReplicating, string TotalPercent, string TimeRemaining);
    [CompilerGeneratedAttribute]
public ResponseHeader get_responseHeader();
    [CompilerGeneratedAttribute]
private void set_responseHeader(ResponseHeader value);
    [CompilerGeneratedAttribute]
public string get_indexSize();
    [CompilerGeneratedAttribute]
private void set_indexSize(string value);
    [CompilerGeneratedAttribute]
public string get_indexPath();
    [CompilerGeneratedAttribute]
private void set_indexPath(string value);
    [CompilerGeneratedAttribute]
public string get_isMaster();
    [CompilerGeneratedAttribute]
private void set_isMaster(string value);
    [CompilerGeneratedAttribute]
public string get_isSlave();
    [CompilerGeneratedAttribute]
private void set_isSlave(string value);
    [CompilerGeneratedAttribute]
public long get_indexVersion();
    [CompilerGeneratedAttribute]
private void set_indexVersion(long value);
    [CompilerGeneratedAttribute]
public long get_generation();
    [CompilerGeneratedAttribute]
private void set_generation(long value);
    [CompilerGeneratedAttribute]
public string get_isReplicating();
    [CompilerGeneratedAttribute]
private void set_isReplicating(string value);
    [CompilerGeneratedAttribute]
public string get_totalPercent();
    [CompilerGeneratedAttribute]
private void set_totalPercent(string value);
    [CompilerGeneratedAttribute]
public string get_timeRemaining();
    [CompilerGeneratedAttribute]
private void set_timeRemaining(string value);
}
public class SolrNet.Impl.ReplicationIndexVersionResponse : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ResponseHeader <responseHeader>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <indexversion>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <generation>k__BackingField;
    public ResponseHeader responseHeader { get; private set; }
    public long indexversion { get; private set; }
    public long generation { get; private set; }
    public ReplicationIndexVersionResponse(ResponseHeader ResponseHeader, long IndexVersion, long Generation);
    [CompilerGeneratedAttribute]
public ResponseHeader get_responseHeader();
    [CompilerGeneratedAttribute]
private void set_responseHeader(ResponseHeader value);
    [CompilerGeneratedAttribute]
public long get_indexversion();
    [CompilerGeneratedAttribute]
private void set_indexversion(long value);
    [CompilerGeneratedAttribute]
public long get_generation();
    [CompilerGeneratedAttribute]
private void set_generation(long value);
}
public class SolrNet.Impl.ReplicationStatusResponse : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ResponseHeader <responseHeader>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <status>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <message>k__BackingField;
    public ResponseHeader responseHeader { get; private set; }
    public string status { get; private set; }
    public string message { get; private set; }
    public ReplicationStatusResponse(ResponseHeader ResponseHeader, string Status, string Message);
    [CompilerGeneratedAttribute]
public ResponseHeader get_responseHeader();
    [CompilerGeneratedAttribute]
private void set_responseHeader(ResponseHeader value);
    [CompilerGeneratedAttribute]
public string get_status();
    [CompilerGeneratedAttribute]
private void set_status(string value);
    [CompilerGeneratedAttribute]
public string get_message();
    [CompilerGeneratedAttribute]
private void set_message(string value);
}
public class SolrNet.Impl.ResponseParsers.AggregateResponseParser`1 : object {
    private IEnumerable`1<ISolrAbstractResponseParser`1<T>> parsers;
    public AggregateResponseParser`1(IEnumerable`1<ISolrAbstractResponseParser`1<T>> parsers);
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
}
public class SolrNet.Impl.ResponseParsers.ClusterResponseParser`1 : object {
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public sealed virtual void Parse(XDocument xml, SolrQueryResults`1<T> results);
    private static ICollection`1<string> GetDocumentList(XElement node);
    public ClusterResults ParseClusterNode(XElement n);
}
public class SolrNet.Impl.ResponseParsers.CollapseExpandResponseParser`1 : object {
    private ISolrDocumentResponseParser`1<T> docParser;
    public CollapseExpandResponseParser`1(ISolrDocumentResponseParser`1<T> docParser);
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public sealed virtual void Parse(XDocument xml, SolrQueryResults`1<T> results);
    public CollapseExpandResults`1<T> ParseGroupedResults(XElement expandElement);
    public ICollection`1<Group`1<T>> ParseGroup(IEnumerable`1<XElement> nodes);
}
public class SolrNet.Impl.ResponseParsers.CollapseResponseParser`1 : object {
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public sealed virtual void Parse(XDocument xml, SolrQueryResults`1<T> results);
    public static IEnumerable`1<CollapsedDocument> ParseCollapsedResults(XElement node);
}
public class SolrNet.Impl.ResponseParsers.CoreStatusResponseParser`1 : object {
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public sealed virtual void Parse(XDocument xml, SolrQueryResults`1<T> results);
}
public class SolrNet.Impl.ResponseParsers.DebugResponseParser`1 : object {
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public sealed virtual void Parse(XDocument xml, SolrQueryResults`1<T> results);
    private static DebugResults ParseDebugResults(XDocument xml);
    private static IDictionary`2<string, string> ParseSimpleExplanations(XElement rootNode);
    private static IDictionary`2<string, ExplanationModel> TryParseStructuredExplanations(XElement rootNode);
    private static ExplanationModel ParseExplanationModel(XElement item);
    private static ExplanationModel CreateExplanationModel(XElement item, ICollection`1<ExplanationModel> details);
    private static IDictionary`2<string, double> ParseDocuments(XElement rootNode);
    private static double GetValue(XElement docNode);
}
public class SolrNet.Impl.ResponseParsers.DefaultResponseParser`1 : object {
    private AggregateResponseParser`1<T> parser;
    public DefaultResponseParser`1(ISolrDocumentResponseParser`1<T> docParser);
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
}
public class SolrNet.Impl.ResponseParsers.ExtractResponseParser : object {
    private ISolrHeaderResponseParser headerResponseParser;
    public ExtractResponseParser(ISolrHeaderResponseParser headerResponseParser);
    public sealed virtual ExtractResponse Parse(XDocument response);
    private List`1<ExtractField> ParseMetadata(XDocument response);
}
public class SolrNet.Impl.ResponseParsers.FacetsResponseParser`1 : object {
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public IDictionary`2<string, int> ParseFacetQueries(XElement node);
    public IDictionary`2<string, ICollection`1<KeyValuePair`2<string, int>>> ParseFacetFields(XElement node);
    [ObsoleteAttribute("As of Solr 3.1 has been deprecated, as of Solr 6.6 unsupported.")]
public IDictionary`2<string, DateFacetingResult> ParseFacetDates(XElement node);
    public IDictionary`2<string, RangeFacetingResult> ParseFacetRanges(XElement node);
    [ObsoleteAttribute("As of Solr 3.1 has been deprecated, as of Solr 6.6 unsupported.")]
public DateFacetingResult ParseDateFacetingNode(XElement node);
    public RangeFacetingResult ParseRangeFacetingNode(XElement node);
    public IDictionary`2<string, ICollection`1<KeyValuePair`2<string, int>>> ParseFacetIntervals(XElement node);
    public IDictionary`2<string, IList`1<Pivot>> ParseFacetPivots(XElement node);
    public Pivot ParsePivotNode(XElement node);
}
public class SolrNet.Impl.ResponseParsers.GroupingResponseParser`1 : object {
    private ISolrDocumentResponseParser`1<T> docParser;
    public GroupingResponseParser`1(ISolrDocumentResponseParser`1<T> docParser);
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public sealed virtual void Parse(XDocument xml, SolrQueryResults`1<T> results);
    public GroupedResults`1<T> ParseGroupedResults(XElement groupNode);
    public IEnumerable`1<Group`1<T>> ParseGroup(XElement node);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType1`2<<>f__AnonymousType0`2<XElement, string>, GroupedResults`1<T>> <Parse>b__3_1(<>f__AnonymousType0`2<XElement, string> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType7`2<<>f__AnonymousType6`2<<>f__AnonymousType5`2<<>f__AnonymousType4`2<<>f__AnonymousType3`2<XElement, XElement>, string>, XElement>, long>, List`1<T>> <ParseGroup>b__5_5(<>f__AnonymousType6`2<<>f__AnonymousType5`2<<>f__AnonymousType4`2<<>f__AnonymousType3`2<XElement, XElement>, string>, XElement>, long> <>h__TransparentIdentifier3);
}
public class SolrNet.Impl.ResponseParsers.HeaderResponseParser : object {
    public void Parse(XDocument xml, AbstractSolrQueryResults`1<string> results);
    public ResponseHeader ParseHeader(XElement node);
    public sealed virtual ResponseHeader Parse(XDocument response);
}
public class SolrNet.Impl.ResponseParsers.HeaderResponseParser`1 : HeaderResponseParser {
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
}
public class SolrNet.Impl.ResponseParsers.HighlightingResponseParser`1 : object {
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public sealed virtual void Parse(XDocument xml, SolrQueryResults`1<T> results);
    public static IDictionary`2<string, HighlightedSnippets> ParseHighlighting(IEnumerable`1<T> results, XElement node);
    public static HighlightedSnippets ParseHighlightingFields(IEnumerable`1<XElement> nodes);
}
public class SolrNet.Impl.ResponseParsers.InterestingTermsResponseParser`1 : object {
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public static IEnumerable`1<KeyValuePair`2<string, float>> ParseList(XDocument xml);
    public static IEnumerable`1<KeyValuePair`2<string, float>> ParseDetails(XDocument xml);
    public static IList`1<KeyValuePair`2<string, float>> ParseListOrDetails(XDocument xml);
    public sealed virtual void Parse(XDocument xml, SolrMoreLikeThisHandlerResults`1<T> results);
}
public class SolrNet.Impl.ResponseParsers.MoreLikeThisHandlerMatchResponseParser`1 : object {
    private ISolrDocumentResponseParser`1<T> docParser;
    public MoreLikeThisHandlerMatchResponseParser`1(ISolrDocumentResponseParser`1<T> docParser);
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public sealed virtual void Parse(XDocument xml, SolrMoreLikeThisHandlerResults`1<T> results);
}
public class SolrNet.Impl.ResponseParsers.MoreLikeThisResponseParser`1 : object {
    private ISolrDocumentResponseParser`1<T> docParser;
    public MoreLikeThisResponseParser`1(ISolrDocumentResponseParser`1<T> docParser);
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public sealed virtual void Parse(XDocument xml, SolrQueryResults`1<T> results);
    public IDictionary`2<string, IList`1<T>> ParseMoreLikeThis(IEnumerable`1<T> results, XElement node);
}
public class SolrNet.Impl.ResponseParsers.ReplicationDetailsResponseParser`1 : object {
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public sealed virtual ReplicationDetailsResponse Parse(XDocument response);
    public ResponseHeader ParseHeader(XElement node);
}
public class SolrNet.Impl.ResponseParsers.ReplicationIndexVersionResponseParser`1 : object {
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public sealed virtual ReplicationIndexVersionResponse Parse(XDocument response);
    public ResponseHeader ParseHeader(XElement node);
}
public class SolrNet.Impl.ResponseParsers.ReplicationStatusResponseParser`1 : object {
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public sealed virtual ReplicationStatusResponse Parse(XDocument response);
    public ResponseHeader ParseHeader(XElement node);
}
public class SolrNet.Impl.ResponseParsers.ResultsResponseParser`1 : object {
    private ISolrDocumentResponseParser`1<T> docParser;
    public ResultsResponseParser`1(ISolrDocumentResponseParser`1<T> docParser);
    private static XElement GetMainResultNode(XDocument xml);
    private static XElement GetGroupResultNode(XDocument xml);
    private static Cursor GetNextCursorMark(XDocument xml);
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
}
public class SolrNet.Impl.ResponseParsers.SpellCheckResponseParser`1 : object {
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public sealed virtual void Parse(XDocument xml, SolrQueryResults`1<T> results);
    public SpellCheckResults ParseSpellChecking(XElement node);
}
public class SolrNet.Impl.ResponseParsers.StatsResponseParser`1 : object {
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public sealed virtual void Parse(XDocument xml, SolrQueryResults`1<T> results);
    public Dictionary`2<string, StatsResult> ParseStats(XElement node, string selector);
    public IDictionary`2<string, Dictionary`2<string, StatsResult>> ParseFacetNode(XElement node);
    public IDictionary`2<double, double> ParsePercentilesNode(XElement node);
    public StatsResult ParseStatsNode(XElement node);
    private static double GetDoubleValue(XElement statNode);
}
public class SolrNet.Impl.ResponseParsers.TermsResponseParser`1 : object {
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public sealed virtual void Parse(XDocument xml, SolrQueryResults`1<T> results);
    public TermsResults ParseTerms(XElement node);
}
public class SolrNet.Impl.ResponseParsers.TermVectorResultsParser`1 : object {
    public sealed virtual void Parse(XDocument xml, AbstractSolrQueryResults`1<T> results);
    public sealed virtual void Parse(XDocument xml, SolrQueryResults`1<T> results);
    [IteratorStateMachineAttribute("SolrNet.Impl.ResponseParsers.TermVectorResultsParser`1/<ParseDocuments>d__2")]
public IEnumerable`1<TermVectorDocumentResult> ParseDocuments(XElement rootNode);
    private static TermVectorDocumentResult ParseDoc(XElement docNode);
    private static IEnumerable`1<TermVectorResult> ParseField(XElement fieldNode);
    private static TermVectorResult ParseTerm(XElement termNode, string fieldName);
    private static IEnumerable`1<int> ParsePositions(XElement valueNode);
    private static IEnumerable`1<Offset> ParseOffsets(XElement valueNode);
}
public class SolrNet.Impl.SimpleJsonQueryBody : object {
    public static string ApplicationJson;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Json>k__BackingField;
    private string Json { get; }
    public string MimeType { get; }
    public SimpleJsonQueryBody(string json);
    private static SimpleJsonQueryBody();
    [CompilerGeneratedAttribute]
private string get_Json();
    public sealed virtual string Serialize();
    public sealed virtual string get_MimeType();
}
public class SolrNet.Impl.SolrBasicServer`1 : LowLevelSolrServer {
    private ISolrConnection connection;
    private ISolrQueryExecuter`1<T> queryExecuter;
    private ISolrDocumentSerializer`1<T> documentSerializer;
    private ISolrSchemaParser schemaParser;
    private ISolrHeaderResponseParser headerParser;
    private ISolrQuerySerializer querySerializer;
    private ISolrDIHStatusParser dihStatusParser;
    private ISolrExtractResponseParser extractResponseParser;
    public SolrBasicServer`1(ISolrConnection connection, ISolrQueryExecuter`1<T> queryExecuter, ISolrDocumentSerializer`1<T> documentSerializer, ISolrSchemaParser schemaParser, ISolrHeaderResponseParser headerParser, ISolrQuerySerializer querySerializer, ISolrDIHStatusParser dihStatusParser, ISolrExtractResponseParser extractResponseParser);
    public sealed virtual ResponseHeader Commit(CommitOptions options);
    private static CommitCommand GetCommitCommand(CommitOptions options);
    public sealed virtual ResponseHeader Optimize(CommitOptions options);
    private static OptimizeCommand GetOptimizeCommand(CommitOptions options);
    public sealed virtual ResponseHeader Rollback();
    public sealed virtual ResponseHeader AddWithBoost(IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> docs, AddParameters parameters);
    public sealed virtual ExtractResponse Extract(ExtractParameters parameters);
    public sealed virtual ResponseHeader Delete(IEnumerable`1<string> ids, ISolrQuery q, DeleteParameters parameters);
    public ResponseHeader Delete(IEnumerable`1<string> ids, ISolrQuery q);
    public sealed virtual SolrQueryResults`1<T> Query(ISolrQuery query, QueryOptions options);
    public sealed virtual ExtractResponse SendAndParseExtract(ISolrCommand cmd);
    [AsyncStateMachineAttribute("SolrNet.Impl.SolrBasicServer`1/<SendAndParseExtractAsync>d__20")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<ExtractResponse> SendAndParseExtractAsync(ISolrCommand cmd);
    public sealed virtual ResponseHeader AtomicUpdate(string uniqueKey, string id, IEnumerable`1<AtomicUpdateSpec> updateSpecs, AtomicUpdateParameters parameters);
    public sealed virtual Task`1<ResponseHeader> AtomicUpdateAsync(string uniqueKey, string id, IEnumerable`1<AtomicUpdateSpec> updateSpecs, AtomicUpdateParameters parameters);
    public sealed virtual ResponseHeader Ping();
    public sealed virtual SolrSchema GetSchema(string schemaFileName);
    public sealed virtual SolrDIHStatus GetDIHStatus(KeyValuePair`2<string, string> options);
    public sealed virtual SolrMoreLikeThisHandlerResults`1<T> MoreLikeThis(SolrMLTQuery query, MoreLikeThisHandlerQueryOptions options);
    public sealed virtual Task`1<SolrQueryResults`1<T>> QueryAsync(ISolrQuery query, QueryOptions options, CancellationToken cancellationToken);
    public sealed virtual Task`1<SolrMoreLikeThisHandlerResults`1<T>> MoreLikeThisAsync(SolrMLTQuery query, MoreLikeThisHandlerQueryOptions options, CancellationToken cancellationToken);
    public sealed virtual Task`1<ResponseHeader> PingAsync();
    [AsyncStateMachineAttribute("SolrNet.Impl.SolrBasicServer`1/<GetSchemaAsync>d__30")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<SolrSchema> GetSchemaAsync(string schemaFileName);
    [AsyncStateMachineAttribute("SolrNet.Impl.SolrBasicServer`1/<GetDIHStatusAsync>d__31")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<SolrDIHStatus> GetDIHStatusAsync(KeyValuePair`2<string, string> options);
    public sealed virtual Task`1<ResponseHeader> CommitAsync(CommitOptions options);
    public sealed virtual Task`1<ResponseHeader> OptimizeAsync(CommitOptions options);
    public sealed virtual Task`1<ResponseHeader> RollbackAsync();
    public sealed virtual Task`1<ResponseHeader> AddWithBoostAsync(IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> docs, AddParameters parameters);
    public sealed virtual Task`1<ExtractResponse> ExtractAsync(ExtractParameters parameters);
    public sealed virtual Task`1<ResponseHeader> DeleteAsync(IEnumerable`1<string> ids, ISolrQuery q, DeleteParameters parameters);
}
public class SolrNet.Impl.SolrCacheEntity : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Data>k__BackingField;
    public string Url { get; private set; }
    public string ETag { get; private set; }
    public string Data { get; private set; }
    public SolrCacheEntity(string url, string eTag, string data);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
private void set_ETag(string value);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(string value);
}
public class SolrNet.Impl.SolrConnection : object {
    private string serverURL;
    private string version;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISolrCache <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IHttpWebRequestFactory <HttpWebRequestFactory>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Timeout>k__BackingField;
    public ISolrCache Cache { get; public set; }
    public IHttpWebRequestFactory HttpWebRequestFactory { get; public set; }
    public string ServerURL { get; public set; }
    public string Version { get; public set; }
    public int Timeout { get; public set; }
    public SolrConnection(string serverURL);
    public SolrConnection(string serverURL, IHttpWebRequestFactory httpWebRequestFactory);
    [CompilerGeneratedAttribute]
public ISolrCache get_Cache();
    [CompilerGeneratedAttribute]
public void set_Cache(ISolrCache value);
    [CompilerGeneratedAttribute]
public IHttpWebRequestFactory get_HttpWebRequestFactory();
    [CompilerGeneratedAttribute]
public void set_HttpWebRequestFactory(IHttpWebRequestFactory value);
    public string get_ServerURL();
    public void set_ServerURL(string value);
    public string get_Version();
    public void set_Version(string value);
    [CompilerGeneratedAttribute]
public int get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(int value);
    public sealed virtual string Post(string relativeUrl, string s);
    [AsyncStateMachineAttribute("SolrNet.Impl.SolrConnection/<PostAsync>d__23")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> PostAsync(string relativeUrl, string s);
    private IHttpWebRequest PreparePostStreamWebRequest(string relativeUrl, string contentType, Stream content, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    public sealed virtual string PostStream(string relativeUrl, string contentType, Stream content, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    [AsyncStateMachineAttribute("SolrNet.Impl.SolrConnection/<PostStreamAsync>d__26")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> PostStreamAsync(string relativeUrl, string contentType, Stream content, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    private static void CopyTo(Stream input, Stream output);
    private ValueTuple`3<IHttpWebRequest, UriBuilder, SolrCacheEntity> PrepareGetWebRequest(string relativeUrl, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    public sealed virtual string Get(string relativeUrl, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    [AsyncStateMachineAttribute("SolrNet.Impl.SolrConnection/<GetAsync>d__30")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> GetAsync(string relativeUrl, IEnumerable`1<KeyValuePair`2<string, string>> parameters, CancellationToken cancellationToken);
    private string GetQuery(IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    private SolrResponse GetResponse(IHttpWebRequest request);
    [AsyncStateMachineAttribute("SolrNet.Impl.SolrConnection/<GetResponseAsync>d__33")]
[DebuggerStepThroughAttribute]
private Task`1<SolrResponse> GetResponseAsync(IHttpWebRequest request);
    private string ReadResponseToString(IHttpWebResponse response);
    [AsyncStateMachineAttribute("SolrNet.Impl.SolrConnection/<ReadResponseToStringAsync>d__35")]
[DebuggerStepThroughAttribute]
private Task`1<string> ReadResponseToStringAsync(IHttpWebResponse response);
    private Encoding TryGetEncoding(IHttpWebResponse response);
}
public class SolrNet.Impl.SolrCoreAdmin : LowLevelSolrServer {
    private ISolrStatusResponseParser resultParser;
    private static string coreHandler;
    public SolrCoreAdmin(ISolrConnection connection, ISolrHeaderResponseParser headerParser, ISolrStatusResponseParser resultParser);
    public sealed virtual ResponseHeader Alias(string coreName, string otherName);
    public sealed virtual ResponseHeader Create(string coreName, string instanceDir);
    public sealed virtual ResponseHeader Create(string coreName, string instanceDir, string configFile, string schemaFile, string dataDir);
    public sealed virtual ResponseHeader Reload(string coreName);
    public sealed virtual ResponseHeader Rename(string coreName, string otherName);
    public sealed virtual List`1<CoreResult> Status();
    public sealed virtual CoreResult Status(string coreName);
    public sealed virtual ResponseHeader Swap(string coreName, string otherName);
    public sealed virtual ResponseHeader Unload(string coreName);
    [ObsoleteAttribute("Use Unload(string coreName, UnloadCommand.Delete delete) instead")]
public sealed virtual ResponseHeader Unload(string coreName, bool deleteIndex);
    public sealed virtual ResponseHeader Unload(string coreName, Delete delete);
    public sealed virtual ResponseHeader Merge(string destinationCore, SrcCore srcCore, SrcCore[] srcCores);
    public sealed virtual ResponseHeader Merge(string destinationCore, IndexDir indexDir, IndexDir[] indexDirs);
    protected List`1<CoreResult> ParseStatusResponse(string responseXml);
}
public class SolrNet.Impl.SolrCoreReplication : object {
    private ISolrConnection connection;
    private ISolrReplicationStatusResponseParser statusParser;
    private ISolrReplicationIndexVersionResponseParser indexversionParser;
    private ISolrReplicationDetailsResponseParser detailsParser;
    public SolrCoreReplication(ISolrConnection connection, ISolrReplicationStatusResponseParser statusParser, ISolrReplicationIndexVersionResponseParser indexversionParser, ISolrReplicationDetailsResponseParser detailsParser);
    public sealed virtual ReplicationStatusResponse EnableReplication();
    public sealed virtual ReplicationStatusResponse DisableReplication();
    public sealed virtual ReplicationIndexVersionResponse IndexVersion();
    public sealed virtual ReplicationDetailsResponse Details();
    public sealed virtual ReplicationStatusResponse EnablePoll();
    public sealed virtual ReplicationStatusResponse DisablePoll();
    public sealed virtual ReplicationStatusResponse FetchIndex();
    public sealed virtual ReplicationStatusResponse FetchIndex(IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    public sealed virtual ReplicationStatusResponse AbortFetch();
    public ReplicationStatusResponse SendAndParseStatus(ISolrCommand cmd);
    public ReplicationIndexVersionResponse SendAndParseIndexVersion(ISolrCommand cmd);
    public ReplicationDetailsResponse SendAndParseDetails(ISolrCommand cmd);
    public string Send(ISolrCommand command);
}
public class SolrNet.Impl.SolrDictionaryDocumentResponseParser : object {
    private ISolrFieldParser fieldParser;
    public SolrDictionaryDocumentResponseParser(ISolrFieldParser fieldParser);
    public sealed virtual IList`1<Dictionary`2<string, object>> ParseResults(XElement parentNode);
    public Dictionary`2<string, object> ParseDocument(XElement node);
}
public class SolrNet.Impl.SolrDictionarySerializer : object {
    private ISolrFieldSerializer serializer;
    public SolrDictionarySerializer(ISolrFieldSerializer serializer);
    public sealed virtual XElement Serialize(Dictionary`2<string, object> doc, Nullable`1<double> boost);
}
public class SolrNet.Impl.SolrDIHStatusParser : object {
    public sealed virtual SolrDIHStatus Parse(XDocument solrDIHStatusXml);
}
public class SolrNet.Impl.SolrDocumentActivator`1 : object {
    public sealed virtual T Create();
}
public class SolrNet.Impl.SolrDocumentResponseParser`1 : object {
    private IReadOnlyMappingManager mappingManager;
    private ISolrDocumentPropertyVisitor propVisitor;
    private ISolrDocumentActivator`1<T> activator;
    public SolrDocumentResponseParser`1(IReadOnlyMappingManager mappingManager, ISolrDocumentPropertyVisitor propVisitor, ISolrDocumentActivator`1<T> activator);
    public sealed virtual IList`1<T> ParseResults(XElement parentNode);
    public T ParseDocument(XElement node);
}
public class SolrNet.Impl.SolrDocumentSerializer`1 : object {
    private IReadOnlyMappingManager mappingManager;
    private ISolrFieldSerializer fieldSerializer;
    private static Regex ControlCharacters;
    public SolrDocumentSerializer`1(IReadOnlyMappingManager mappingManager, ISolrFieldSerializer fieldSerializer);
    private static SolrDocumentSerializer`1();
    public static string RemoveControlCharacters(string xml);
    public sealed virtual XElement Serialize(T doc, Nullable`1<double> boost);
}
public class SolrNet.Impl.SolrMoreLikeThisHandlerQueryResultsParser`1 : object {
    private IEnumerable`1<ISolrAbstractResponseParser`1<T>> parsers;
    public SolrMoreLikeThisHandlerQueryResultsParser`1(IEnumerable`1<ISolrAbstractResponseParser`1<T>> parsers);
    public sealed virtual SolrMoreLikeThisHandlerResults`1<T> Parse(string r);
}
public class SolrNet.Impl.SolrMoreLikeThisHandlerResults`1 : AbstractSolrQueryResults`1<T> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <Match>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IList`1<KeyValuePair`2<string, float>> <InterestingTerms>k__BackingField;
    public T Match { get; public set; }
    public IList`1<KeyValuePair`2<string, float>> InterestingTerms { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(T value);
    [CompilerGeneratedAttribute]
public IList`1<KeyValuePair`2<string, float>> get_InterestingTerms();
    [CompilerGeneratedAttribute]
public void set_InterestingTerms(IList`1<KeyValuePair`2<string, float>> value);
    public virtual R Switch(Func`2<SolrQueryResults`1<T>, R> query, Func`2<SolrMoreLikeThisHandlerResults`1<T>, R> moreLikeThis);
}
public class SolrNet.Impl.SolrParams : List`1<KeyValuePair`2<string, string>> {
    public SolrParams AddOptional(string keyPrefix, IDictionary`2<string, string> values);
    public SolrParams AddOptional(string key, object value);
    public SolrParams AddOptional(string key, string value);
    public SolrParams AddRequired(string key, string value);
}
public class SolrNet.Impl.SolrQueryExecuter`1 : object {
    private ISolrAbstractResponseParser`1<T> resultParser;
    private ISolrMoreLikeThisHandlerQueryResultsParser`1<T> mlthResultParser;
    private ISolrConnection connection;
    private ISolrQuerySerializer querySerializer;
    private ISolrFacetQuerySerializer facetQuerySerializer;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <DefaultRows>k__BackingField;
    public static int ConstDefaultRows;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DefaultHandler>k__BackingField;
    public static string DefaultMoreLikeThisHandler;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MoreLikeThisHandler>k__BackingField;
    public int DefaultRows { get; public set; }
    public string DefaultHandler { get; public set; }
    public string MoreLikeThisHandler { get; public set; }
    public SolrQueryExecuter`1(ISolrAbstractResponseParser`1<T> resultParser, ISolrConnection connection, ISolrQuerySerializer querySerializer, ISolrFacetQuerySerializer facetQuerySerializer, ISolrMoreLikeThisHandlerQueryResultsParser`1<T> mlthResultParser);
    private static SolrQueryExecuter`1();
    [CompilerGeneratedAttribute]
public int get_DefaultRows();
    [CompilerGeneratedAttribute]
public void set_DefaultRows(int value);
    [CompilerGeneratedAttribute]
public string get_DefaultHandler();
    [CompilerGeneratedAttribute]
public void set_DefaultHandler(string value);
    [CompilerGeneratedAttribute]
public string get_MoreLikeThisHandler();
    [CompilerGeneratedAttribute]
public void set_MoreLikeThisHandler(string value);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetCommonParameters>d__20")]
public IEnumerable`1<KeyValuePair`2<string, string>> GetCommonParameters(CommonQueryOptions options);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetAllParameters>d__21")]
public IEnumerable`1<KeyValuePair`2<string, string>> GetAllParameters(ISolrQuery Query, QueryOptions options);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetAllMoreLikeThisHandlerParameters>d__22")]
public IEnumerable`1<KeyValuePair`2<string, string>> GetAllMoreLikeThisHandlerParameters(SolrMLTQuery query, MoreLikeThisHandlerQueryOptions options);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetFacetFieldOptions>d__23")]
public IEnumerable`1<KeyValuePair`2<string, string>> GetFacetFieldOptions(FacetParameters fp);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetMoreLikeThisHandlerParameters>d__24")]
public IEnumerable`1<KeyValuePair`2<string, string>> GetMoreLikeThisHandlerParameters(MoreLikeThisHandlerParameters mlt);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetMoreLikeThisParameters>d__25")]
public IEnumerable`1<KeyValuePair`2<string, string>> GetMoreLikeThisParameters(MoreLikeThisParameters mlt);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetFilterQueries>d__26")]
public IEnumerable`1<KeyValuePair`2<string, string>> GetFilterQueries(ICollection`1<ISolrQuery> filterQueries);
    public IDictionary`2<string, string> GetHighlightingParameters(QueryOptions Options);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetSpellCheckingParameters>d__28")]
public IEnumerable`1<KeyValuePair`2<string, string>> GetSpellCheckingParameters(QueryOptions Options);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetStatsQueryOptions>d__29")]
public IEnumerable`1<KeyValuePair`2<string, string>> GetStatsQueryOptions(QueryOptions options);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetCollapseQueryOptions>d__30")]
public IEnumerable`1<KeyValuePair`2<string, string>> GetCollapseQueryOptions(QueryOptions options);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetTermVectorParameterOptions>d__31")]
public static IEnumerable`1<string> GetTermVectorParameterOptions(TermVectorParameterOptions o);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetTermVectorQueryOptions>d__32")]
public static IEnumerable`1<KeyValuePair`2<string, string>> GetTermVectorQueryOptions(QueryOptions options);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetGroupingQueryOptions>d__33")]
public IEnumerable`1<KeyValuePair`2<string, string>> GetGroupingQueryOptions(QueryOptions options);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetCollapseOptions>d__34")]
public static IEnumerable`1<KeyValuePair`2<string, string>> GetCollapseOptions(CollapseExpandParameters options);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetExpandOptions>d__35")]
public static IEnumerable`1<KeyValuePair`2<string, string>> GetExpandOptions(ExpandParameters parameters, Func`2<ISolrQuery, string> serializer);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetCollapseExpandOptions>d__36")]
public static IEnumerable`1<KeyValuePair`2<string, string>> GetCollapseExpandOptions(CollapseExpandParameters options, Func`2<ISolrQuery, string> serializer);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetClusteringParameters>d__37")]
public IEnumerable`1<KeyValuePair`2<string, string>> GetClusteringParameters(QueryOptions options);
    [IteratorStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<GetTermsParameters>d__38")]
public static IEnumerable`1<KeyValuePair`2<string, string>> GetTermsParameters(QueryOptions Options);
    public sealed virtual SolrQueryResults`1<T> Execute(ISolrQuery q, QueryOptions options);
    public sealed virtual SolrMoreLikeThisHandlerResults`1<T> Execute(SolrMLTQuery q, MoreLikeThisHandlerQueryOptions options);
    [AsyncStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<ExecuteAsync>d__41")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<SolrQueryResults`1<T>> ExecuteAsync(ISolrQuery q, QueryOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<ExecuteAsync>d__42")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<SolrQueryResults`1<T>> ExecuteAsync(ISolrQuery q, ISolrQueryBody body, QueryOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<ExecuteAsync>d__43")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<SolrMoreLikeThisHandlerResults`1<T>> ExecuteAsync(SolrMLTQuery q, MoreLikeThisHandlerQueryOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SolrNet.Impl.SolrQueryExecuter`1/<ExecuteAsync>d__44")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<SolrMoreLikeThisHandlerResults`1<T>> ExecuteAsync(SolrMLTQuery query, ISolrQueryBody body, MoreLikeThisHandlerQueryOptions options, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private KeyValuePair`2<string, string> <GetAllMoreLikeThisHandlerParameters>b__22_0(ISolrQuery q);
}
public class SolrNet.Impl.SolrServer`1 : object {
    private ISolrBasicOperations`1<T> basicServer;
    private IReadOnlyMappingManager mappingManager;
    private IMappingValidator _schemaMappingValidator;
    public SolrServer`1(ISolrBasicOperations`1<T> basicServer, IReadOnlyMappingManager mappingManager, IMappingValidator _schemaMappingValidator);
    public sealed virtual SolrQueryResults`1<T> Query(ISolrQuery query, QueryOptions options);
    public sealed virtual ResponseHeader Ping();
    public sealed virtual SolrQueryResults`1<T> Query(string q);
    public sealed virtual SolrQueryResults`1<T> Query(string q, ICollection`1<SortOrder> orders);
    public sealed virtual SolrQueryResults`1<T> Query(string q, QueryOptions options);
    public sealed virtual SolrQueryResults`1<T> Query(ISolrQuery q);
    public sealed virtual SolrQueryResults`1<T> Query(ISolrQuery query, ICollection`1<SortOrder> orders);
    public sealed virtual ICollection`1<KeyValuePair`2<string, int>> FacetFieldQuery(SolrFacetFieldQuery facet);
    public sealed virtual ResponseHeader BuildSpellCheckDictionary();
    public sealed virtual ResponseHeader AddWithBoost(T doc, double boost);
    public sealed virtual ResponseHeader AddWithBoost(T doc, double boost, AddParameters parameters);
    public sealed virtual ExtractResponse Extract(ExtractParameters parameters);
    [ObsoleteAttribute("Use AddRange instead")]
public sealed virtual ResponseHeader Add(IEnumerable`1<T> docs);
    public sealed virtual ResponseHeader AddRange(IEnumerable`1<T> docs);
    [ObsoleteAttribute("Use AddRange instead")]
public ResponseHeader Add(IEnumerable`1<T> docs, AddParameters parameters);
    public sealed virtual ResponseHeader AddRange(IEnumerable`1<T> docs, AddParameters parameters);
    [ObsoleteAttribute("Use AddRangeWithBoost instead")]
private sealed virtual override ResponseHeader SolrNet.ISolrOperations<T>.AddWithBoost(IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> docs);
    public sealed virtual ResponseHeader AddRangeWithBoost(IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> docs);
    [ObsoleteAttribute("Use AddRangeWithBoost instead")]
private sealed virtual override ResponseHeader SolrNet.ISolrOperations<T>.AddWithBoost(IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> docs, AddParameters parameters);
    public sealed virtual ResponseHeader AddRangeWithBoost(IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> docs, AddParameters parameters);
    public sealed virtual ResponseHeader Delete(IEnumerable`1<string> ids);
    public sealed virtual ResponseHeader Delete(IEnumerable`1<string> ids, DeleteParameters parameters);
    public sealed virtual ResponseHeader Delete(T doc);
    public sealed virtual ResponseHeader Delete(T doc, DeleteParameters parameters);
    public sealed virtual ResponseHeader Delete(IEnumerable`1<T> docs);
    public sealed virtual ResponseHeader Delete(IEnumerable`1<T> docs, DeleteParameters parameters);
    private object GetId(T doc);
    private sealed virtual override ResponseHeader SolrNet.ISolrOperations<T>.Delete(ISolrQuery q);
    public sealed virtual ResponseHeader Delete(ISolrQuery q, DeleteParameters parameters);
    public sealed virtual ResponseHeader Delete(string id);
    public sealed virtual ResponseHeader Delete(string id, DeleteParameters parameters);
    private sealed virtual override ResponseHeader SolrNet.ISolrOperations<T>.Delete(IEnumerable`1<string> ids, ISolrQuery q);
    private sealed virtual override ResponseHeader SolrNet.ISolrOperations<T>.Delete(IEnumerable`1<string> ids, ISolrQuery q, DeleteParameters parameters);
    public sealed virtual ResponseHeader Commit();
    public sealed virtual ResponseHeader Rollback();
    public sealed virtual ResponseHeader Optimize();
    public sealed virtual ResponseHeader Add(T doc);
    public sealed virtual ResponseHeader Add(T doc, AddParameters parameters);
    public SolrSchema GetSchema();
    public sealed virtual SolrSchema GetSchema(string schemaFileName);
    public sealed virtual IEnumerable`1<ValidationResult> EnumerateValidationResults();
    public sealed virtual IEnumerable`1<ValidationResult> EnumerateValidationResults(string schemaFileName);
    public sealed virtual SolrDIHStatus GetDIHStatus(KeyValuePair`2<string, string> options);
    public sealed virtual SolrMoreLikeThisHandlerResults`1<T> MoreLikeThis(SolrMLTQuery query, MoreLikeThisHandlerQueryOptions options);
    public sealed virtual ResponseHeader AtomicUpdate(T doc, IEnumerable`1<AtomicUpdateSpec> updateSpecs);
    public sealed virtual Task`1<ResponseHeader> AtomicUpdateAsync(T doc, IEnumerable`1<AtomicUpdateSpec> updateSpecs);
    public sealed virtual ResponseHeader AtomicUpdate(string id, IEnumerable`1<AtomicUpdateSpec> updateSpecs);
    public sealed virtual Task`1<ResponseHeader> AtomicUpdateAsync(string id, IEnumerable`1<AtomicUpdateSpec> updateSpecs);
    public sealed virtual ResponseHeader AtomicUpdate(T doc, IEnumerable`1<AtomicUpdateSpec> updateSpecs, AtomicUpdateParameters parameters);
    public sealed virtual Task`1<ResponseHeader> AtomicUpdateAsync(T doc, IEnumerable`1<AtomicUpdateSpec> updateSpecs, AtomicUpdateParameters parameters);
    public sealed virtual ResponseHeader AtomicUpdate(string id, IEnumerable`1<AtomicUpdateSpec> updateSpecs, AtomicUpdateParameters parameters);
    public sealed virtual Task`1<ResponseHeader> AtomicUpdateAsync(string id, IEnumerable`1<AtomicUpdateSpec> updateSpecs, AtomicUpdateParameters parameters);
    public sealed virtual Task`1<SolrQueryResults`1<T>> QueryAsync(string q, CancellationToken cancellationToken);
    public sealed virtual Task`1<SolrQueryResults`1<T>> QueryAsync(string q, ICollection`1<SortOrder> orders, CancellationToken cancellationToken);
    public sealed virtual Task`1<SolrQueryResults`1<T>> QueryAsync(string q, QueryOptions options, CancellationToken cancellationToken);
    public sealed virtual Task`1<SolrQueryResults`1<T>> QueryAsync(ISolrQuery q, CancellationToken cancellationToken);
    public sealed virtual Task`1<SolrQueryResults`1<T>> QueryAsync(ISolrQuery query, ICollection`1<SortOrder> orders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SolrNet.Impl.SolrServer`1/<FacetFieldQueryAsync>d__61")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<ICollection`1<KeyValuePair`2<string, int>>> FacetFieldQueryAsync(SolrFacetFieldQuery facet);
    public sealed virtual Task`1<SolrQueryResults`1<T>> QueryAsync(ISolrQuery query, QueryOptions options, CancellationToken cancellationToken);
    public sealed virtual Task`1<SolrMoreLikeThisHandlerResults`1<T>> MoreLikeThisAsync(SolrMLTQuery query, MoreLikeThisHandlerQueryOptions options, CancellationToken cancellationToken);
    public sealed virtual Task`1<ResponseHeader> PingAsync();
    public sealed virtual Task`1<SolrSchema> GetSchemaAsync(string schemaFileName);
    public sealed virtual Task`1<SolrDIHStatus> GetDIHStatusAsync(KeyValuePair`2<string, string> options);
    public sealed virtual Task`1<ResponseHeader> CommitAsync();
    public sealed virtual Task`1<ResponseHeader> RollbackAsync();
    public sealed virtual Task`1<ResponseHeader> OptimizeAsync();
    public sealed virtual Task`1<ResponseHeader> AddAsync(T doc);
    public sealed virtual Task`1<ResponseHeader> AddAsync(T doc, AddParameters parameters);
    public sealed virtual Task`1<ResponseHeader> AddWithBoostAsync(T doc, double boost);
    public sealed virtual Task`1<ResponseHeader> AddWithBoostAsync(T doc, double boost, AddParameters parameters);
    public sealed virtual Task`1<ExtractResponse> ExtractAsync(ExtractParameters parameters);
    public sealed virtual Task`1<ResponseHeader> AddRangeAsync(IEnumerable`1<T> docs);
    public sealed virtual Task`1<ResponseHeader> AddRangeAsync(IEnumerable`1<T> docs, AddParameters parameters);
    public sealed virtual Task`1<ResponseHeader> AddRangeWithBoostAsync(IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> docs);
    public sealed virtual Task`1<ResponseHeader> AddRangeWithBoostAsync(IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> docs, AddParameters parameters);
    public sealed virtual Task`1<ResponseHeader> DeleteAsync(T doc);
    public sealed virtual Task`1<ResponseHeader> DeleteAsync(T doc, DeleteParameters parameters);
    public sealed virtual Task`1<ResponseHeader> DeleteAsync(IEnumerable`1<T> docs);
    public sealed virtual Task`1<ResponseHeader> DeleteAsync(IEnumerable`1<T> docs, DeleteParameters parameters);
    public sealed virtual Task`1<ResponseHeader> DeleteAsync(ISolrQuery q);
    public sealed virtual Task`1<ResponseHeader> DeleteAsync(ISolrQuery q, DeleteParameters parameters);
    public sealed virtual Task`1<ResponseHeader> DeleteAsync(string id);
    public sealed virtual Task`1<ResponseHeader> DeleteAsync(string id, DeleteParameters parameters);
    public sealed virtual Task`1<ResponseHeader> DeleteAsync(IEnumerable`1<string> ids);
    public sealed virtual Task`1<ResponseHeader> DeleteAsync(IEnumerable`1<string> ids, DeleteParameters parameters);
    public sealed virtual Task`1<ResponseHeader> DeleteAsync(IEnumerable`1<string> ids, ISolrQuery q);
    public sealed virtual Task`1<ResponseHeader> DeleteAsync(IEnumerable`1<string> ids, ISolrQuery q, DeleteParameters parameters);
    [AsyncStateMachineAttribute("SolrNet.Impl.SolrServer`1/<BuildSpellCheckDictionaryAsync>d__91")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<ResponseHeader> BuildSpellCheckDictionaryAsync();
    [AsyncStateMachineAttribute("SolrNet.Impl.SolrServer`1/<EnumerateValidationResultsAsync>d__92")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IEnumerable`1<ValidationResult>> EnumerateValidationResultsAsync();
    [AsyncStateMachineAttribute("SolrNet.Impl.SolrServer`1/<EnumerateValidationResultsAsync>d__93")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IEnumerable`1<ValidationResult>> EnumerateValidationResultsAsync(string schemaFileName);
    [CompilerGeneratedAttribute]
private string <Delete>b__29_0(T d);
    [CompilerGeneratedAttribute]
private string <DeleteAsync>b__82_0(T d);
}
public class SolrNet.Impl.SolrStatusResponseParser : object {
    public sealed virtual List`1<CoreResult> Parse(XDocument xml);
    private static CoreResult ParseCore(XElement node);
    private static CoreIndexResult ParseCoreIndex(XElement node);
}
public class SolrNet.Impl.SpellCheckResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <NumFound>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <StartOffset>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <EndOffset>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<string> <Suggestions>k__BackingField;
    public string Query { get; public set; }
    public int NumFound { get; public set; }
    public int StartOffset { get; public set; }
    public int EndOffset { get; public set; }
    public ICollection`1<string> Suggestions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    [CompilerGeneratedAttribute]
public int get_NumFound();
    [CompilerGeneratedAttribute]
public void set_NumFound(int value);
    [CompilerGeneratedAttribute]
public int get_StartOffset();
    [CompilerGeneratedAttribute]
public void set_StartOffset(int value);
    [CompilerGeneratedAttribute]
public int get_EndOffset();
    [CompilerGeneratedAttribute]
public void set_EndOffset(int value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Suggestions();
    [CompilerGeneratedAttribute]
public void set_Suggestions(ICollection`1<string> value);
}
public class SolrNet.Impl.SpellCheckResults : object {
    public ICollection`1<CollationResult> Collations;
    private ICollection`1<SpellCheckResult> SpellChecks;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual IEnumerator`1<SpellCheckResult> GetEnumerator();
    public sealed virtual void Add(SpellCheckResult item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(SpellCheckResult item);
    public sealed virtual void CopyTo(SpellCheckResult[] array, int arrayIndex);
    public sealed virtual bool Remove(SpellCheckResult item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class SolrNet.Impl.TermsResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<KeyValuePair`2<string, int>> <Terms>k__BackingField;
    public string Field { get; public set; }
    public ICollection`1<KeyValuePair`2<string, int>> Terms { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<KeyValuePair`2<string, int>> get_Terms();
    [CompilerGeneratedAttribute]
public void set_Terms(ICollection`1<KeyValuePair`2<string, int>> value);
}
public class SolrNet.Impl.TermsResults : object {
    private ICollection`1<TermsResult> Terms;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual IEnumerator`1<TermsResult> GetEnumerator();
    public sealed virtual void Add(TermsResult item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TermsResult item);
    public sealed virtual void CopyTo(TermsResult[] array, int arrayIndex);
    public sealed virtual bool Remove(TermsResult item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class SolrNet.Impl.TermVectorDocumentResult : object {
    public string UniqueKey;
    public ICollection`1<TermVectorResult> TermVector;
    public TermVectorDocumentResult(string uniqueKey, ICollection`1<TermVectorResult> termVector);
}
public class SolrNet.Impl.TermVectorResult : object {
    public string Field;
    public string Term;
    public Nullable`1<int> Tf;
    public Nullable`1<int> Df;
    public Nullable`1<double> Tf_Idf;
    public ICollection`1<Offset> Offsets;
    public ICollection`1<int> Positions;
    public TermVectorResult(string field, string term, Nullable`1<int> tf, Nullable`1<int> df, Nullable`1<double> tfIdf, ICollection`1<Offset> offsets, ICollection`1<int> positions);
}
public class SolrNet.Impl.TimingResults : object {
    private double totalTime;
    private IDictionary`2<string, double> prepare;
    private IDictionary`2<string, double> process;
    public double TotalTime { get; }
    public IDictionary`2<string, double> Prepare { get; }
    public IDictionary`2<string, double> Process { get; }
    public TimingResults(double totalTime, IDictionary`2<string, double> prepare, IDictionary`2<string, double> process);
    public double get_TotalTime();
    public IDictionary`2<string, double> get_Prepare();
    public IDictionary`2<string, double> get_Process();
}
public interface SolrNet.IReadOnlyMappingManager {
    public abstract virtual IDictionary`2<string, SolrFieldModel> GetFields(Type type);
    public abstract virtual SolrFieldModel GetUniqueKey(Type type);
    public abstract virtual ICollection`1<Type> GetRegisteredTypes();
}
public interface SolrNet.ISolrBasicOperations`1 {
    public abstract virtual ResponseHeader Commit(CommitOptions options);
    public abstract virtual Task`1<ResponseHeader> CommitAsync(CommitOptions options);
    public abstract virtual ResponseHeader Optimize(CommitOptions options);
    public abstract virtual Task`1<ResponseHeader> OptimizeAsync(CommitOptions options);
    public abstract virtual ResponseHeader Rollback();
    public abstract virtual Task`1<ResponseHeader> RollbackAsync();
    public abstract virtual ResponseHeader AddWithBoost(IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> docs, AddParameters parameters);
    public abstract virtual Task`1<ResponseHeader> AddWithBoostAsync(IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> docs, AddParameters parameters);
    public abstract virtual ExtractResponse Extract(ExtractParameters parameters);
    public abstract virtual Task`1<ExtractResponse> ExtractAsync(ExtractParameters parameters);
    public abstract virtual ResponseHeader Delete(IEnumerable`1<string> ids, ISolrQuery q, DeleteParameters parameters);
    public abstract virtual Task`1<ResponseHeader> DeleteAsync(IEnumerable`1<string> ids, ISolrQuery q, DeleteParameters parameters);
    public abstract virtual string Send(ISolrCommand cmd);
    public abstract virtual Task`1<string> SendAsync(ISolrCommand cmd);
    public abstract virtual ResponseHeader SendAndParseHeader(ISolrCommand cmd);
    public abstract virtual Task`1<ResponseHeader> SendAndParseHeaderAsync(ISolrCommand cmd);
    public abstract virtual ExtractResponse SendAndParseExtract(ISolrCommand cmd);
    public abstract virtual Task`1<ExtractResponse> SendAndParseExtractAsync(ISolrCommand cmd);
    public abstract virtual ResponseHeader AtomicUpdate(string uniqueKey, string id, IEnumerable`1<AtomicUpdateSpec> updateSpecs, AtomicUpdateParameters parameters);
    public abstract virtual Task`1<ResponseHeader> AtomicUpdateAsync(string uniqueKey, string id, IEnumerable`1<AtomicUpdateSpec> updateSpecs, AtomicUpdateParameters parameters);
}
public interface SolrNet.ISolrBasicReadOnlyOperations`1 {
    public abstract virtual SolrQueryResults`1<T> Query(ISolrQuery query, QueryOptions options);
    public abstract virtual Task`1<SolrQueryResults`1<T>> QueryAsync(ISolrQuery query, QueryOptions options, CancellationToken cancellationToken);
    public abstract virtual SolrMoreLikeThisHandlerResults`1<T> MoreLikeThis(SolrMLTQuery query, MoreLikeThisHandlerQueryOptions options);
    public abstract virtual Task`1<SolrMoreLikeThisHandlerResults`1<T>> MoreLikeThisAsync(SolrMLTQuery query, MoreLikeThisHandlerQueryOptions options, CancellationToken cancellationToken);
    public abstract virtual ResponseHeader Ping();
    public abstract virtual Task`1<ResponseHeader> PingAsync();
    public abstract virtual SolrSchema GetSchema(string schemaFileName);
    public abstract virtual Task`1<SolrSchema> GetSchemaAsync(string schemaFileName);
    public abstract virtual SolrDIHStatus GetDIHStatus(KeyValuePair`2<string, string> options);
    public abstract virtual Task`1<SolrDIHStatus> GetDIHStatusAsync(KeyValuePair`2<string, string> options);
}
public interface SolrNet.ISolrCommand {
    public abstract virtual string Execute(ISolrConnection connection);
    public abstract virtual Task`1<string> ExecuteAsync(ISolrConnection connection);
}
public interface SolrNet.ISolrConnection {
    public abstract virtual string Post(string relativeUrl, string s);
    public abstract virtual Task`1<string> PostAsync(string relativeUrl, string s);
    public abstract virtual string PostStream(string relativeUrl, string contentType, Stream content, IEnumerable`1<KeyValuePair`2<string, string>> getParameters);
    public abstract virtual Task`1<string> PostStreamAsync(string relativeUrl, string contentType, Stream content, IEnumerable`1<KeyValuePair`2<string, string>> getParameters);
    public abstract virtual string Get(string relativeUrl, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    public abstract virtual Task`1<string> GetAsync(string relativeUrl, IEnumerable`1<KeyValuePair`2<string, string>> parameters, CancellationToken cancellationToken);
}
public interface SolrNet.ISolrCoreAdmin {
    public abstract virtual ResponseHeader Alias(string coreName, string otherName);
    public abstract virtual ResponseHeader Create(string coreName, string instanceDir);
    public abstract virtual ResponseHeader Create(string coreName, string instanceDir, string configFile, string schemaFile, string dataDir);
    public abstract virtual ResponseHeader Reload(string coreName);
    public abstract virtual ResponseHeader Rename(string coreName, string otherName);
    public abstract virtual List`1<CoreResult> Status();
    public abstract virtual CoreResult Status(string coreName);
    public abstract virtual ResponseHeader Swap(string coreName, string otherName);
    public abstract virtual ResponseHeader Unload(string coreName);
    [ObsoleteAttribute("Use Unload(string coreName, UnloadCommand.Delete delete) instead")]
public abstract virtual ResponseHeader Unload(string coreName, bool deleteIndex);
    public abstract virtual ResponseHeader Unload(string coreName, Delete delete);
    public abstract virtual ResponseHeader Merge(string destinationCore, SrcCore srcCore, SrcCore[] srcCores);
    public abstract virtual ResponseHeader Merge(string destinationCore, IndexDir indexDir, IndexDir[] indexDirs);
}
public interface SolrNet.ISolrCoreReplication {
    public abstract virtual ReplicationStatusResponse EnableReplication();
    public abstract virtual ReplicationStatusResponse DisableReplication();
    public abstract virtual ReplicationIndexVersionResponse IndexVersion();
    public abstract virtual ReplicationDetailsResponse Details();
    public abstract virtual ReplicationStatusResponse EnablePoll();
    public abstract virtual ReplicationStatusResponse DisablePoll();
    public abstract virtual ReplicationStatusResponse FetchIndex();
    public abstract virtual ReplicationStatusResponse FetchIndex(IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    public abstract virtual ReplicationStatusResponse AbortFetch();
}
public interface SolrNet.ISolrDocumentSerializer`1 {
    public abstract virtual XElement Serialize(T doc, Nullable`1<double> boost);
}
public interface SolrNet.ISolrFacetQuery {
}
public interface SolrNet.ISolrOperations`1 {
    public abstract virtual ResponseHeader Commit();
    public abstract virtual Task`1<ResponseHeader> CommitAsync();
    public abstract virtual ResponseHeader Rollback();
    public abstract virtual Task`1<ResponseHeader> RollbackAsync();
    public abstract virtual ResponseHeader Optimize();
    public abstract virtual Task`1<ResponseHeader> OptimizeAsync();
    public abstract virtual ResponseHeader Add(T doc);
    public abstract virtual Task`1<ResponseHeader> AddAsync(T doc);
    public abstract virtual ResponseHeader Add(T doc, AddParameters parameters);
    public abstract virtual Task`1<ResponseHeader> AddAsync(T doc, AddParameters parameters);
    public abstract virtual ResponseHeader AddWithBoost(T doc, double boost);
    public abstract virtual Task`1<ResponseHeader> AddWithBoostAsync(T doc, double boost);
    public abstract virtual ResponseHeader AddWithBoost(T doc, double boost, AddParameters parameters);
    public abstract virtual Task`1<ResponseHeader> AddWithBoostAsync(T doc, double boost, AddParameters parameters);
    public abstract virtual ExtractResponse Extract(ExtractParameters parameters);
    public abstract virtual Task`1<ExtractResponse> ExtractAsync(ExtractParameters parameters);
    [ObsoleteAttribute("Use AddRange instead")]
public abstract virtual ResponseHeader Add(IEnumerable`1<T> docs);
    public abstract virtual ResponseHeader AddRange(IEnumerable`1<T> docs);
    public abstract virtual Task`1<ResponseHeader> AddRangeAsync(IEnumerable`1<T> docs);
    public abstract virtual ResponseHeader AddRange(IEnumerable`1<T> docs, AddParameters parameters);
    public abstract virtual Task`1<ResponseHeader> AddRangeAsync(IEnumerable`1<T> docs, AddParameters parameters);
    [ObsoleteAttribute("Use AddRangeWithBoost instead")]
public abstract virtual ResponseHeader AddWithBoost(IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> docs);
    public abstract virtual ResponseHeader AddRangeWithBoost(IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> docs);
    public abstract virtual Task`1<ResponseHeader> AddRangeWithBoostAsync(IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> docs);
    [ObsoleteAttribute("Use AddRangeWithBoost instead")]
public abstract virtual ResponseHeader AddWithBoost(IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> docs, AddParameters parameters);
    public abstract virtual ResponseHeader AddRangeWithBoost(IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> docs, AddParameters parameters);
    public abstract virtual Task`1<ResponseHeader> AddRangeWithBoostAsync(IEnumerable`1<KeyValuePair`2<T, Nullable`1<double>>> docs, AddParameters parameters);
    public abstract virtual ResponseHeader Delete(T doc);
    public abstract virtual Task`1<ResponseHeader> DeleteAsync(T doc);
    public abstract virtual ResponseHeader Delete(T doc, DeleteParameters parameters);
    public abstract virtual Task`1<ResponseHeader> DeleteAsync(T doc, DeleteParameters parameters);
    public abstract virtual ResponseHeader Delete(IEnumerable`1<T> docs);
    public abstract virtual Task`1<ResponseHeader> DeleteAsync(IEnumerable`1<T> docs);
    public abstract virtual ResponseHeader Delete(IEnumerable`1<T> docs, DeleteParameters parameters);
    public abstract virtual Task`1<ResponseHeader> DeleteAsync(IEnumerable`1<T> docs, DeleteParameters parameters);
    public abstract virtual ResponseHeader Delete(ISolrQuery q);
    public abstract virtual Task`1<ResponseHeader> DeleteAsync(ISolrQuery q);
    public abstract virtual ResponseHeader Delete(ISolrQuery q, DeleteParameters parameters);
    public abstract virtual Task`1<ResponseHeader> DeleteAsync(ISolrQuery q, DeleteParameters parameters);
    public abstract virtual ResponseHeader Delete(string id);
    public abstract virtual Task`1<ResponseHeader> DeleteAsync(string id);
    public abstract virtual ResponseHeader Delete(string id, DeleteParameters parameters);
    public abstract virtual Task`1<ResponseHeader> DeleteAsync(string id, DeleteParameters parameters);
    public abstract virtual ResponseHeader Delete(IEnumerable`1<string> ids);
    public abstract virtual Task`1<ResponseHeader> DeleteAsync(IEnumerable`1<string> ids);
    public abstract virtual ResponseHeader Delete(IEnumerable`1<string> ids, DeleteParameters parameters);
    public abstract virtual Task`1<ResponseHeader> DeleteAsync(IEnumerable`1<string> ids, DeleteParameters parameters);
    public abstract virtual ResponseHeader Delete(IEnumerable`1<string> ids, ISolrQuery q);
    public abstract virtual Task`1<ResponseHeader> DeleteAsync(IEnumerable`1<string> ids, ISolrQuery q);
    public abstract virtual ResponseHeader Delete(IEnumerable`1<string> ids, ISolrQuery q, DeleteParameters parameters);
    public abstract virtual Task`1<ResponseHeader> DeleteAsync(IEnumerable`1<string> ids, ISolrQuery q, DeleteParameters parameters);
    public abstract virtual ResponseHeader BuildSpellCheckDictionary();
    public abstract virtual Task`1<ResponseHeader> BuildSpellCheckDictionaryAsync();
    public abstract virtual IEnumerable`1<ValidationResult> EnumerateValidationResults();
    public abstract virtual IEnumerable`1<ValidationResult> EnumerateValidationResults(string schemaFileName);
    public abstract virtual Task`1<IEnumerable`1<ValidationResult>> EnumerateValidationResultsAsync();
    public abstract virtual Task`1<IEnumerable`1<ValidationResult>> EnumerateValidationResultsAsync(string schemaFileName);
    public abstract virtual ResponseHeader AtomicUpdate(T doc, IEnumerable`1<AtomicUpdateSpec> updateSpecs);
    public abstract virtual Task`1<ResponseHeader> AtomicUpdateAsync(T doc, IEnumerable`1<AtomicUpdateSpec> updateSpecs);
    public abstract virtual ResponseHeader AtomicUpdate(string id, IEnumerable`1<AtomicUpdateSpec> updateSpecs);
    public abstract virtual Task`1<ResponseHeader> AtomicUpdateAsync(string id, IEnumerable`1<AtomicUpdateSpec> updateSpecs);
    public abstract virtual ResponseHeader AtomicUpdate(T doc, IEnumerable`1<AtomicUpdateSpec> updateSpecs, AtomicUpdateParameters parameters);
    public abstract virtual Task`1<ResponseHeader> AtomicUpdateAsync(T doc, IEnumerable`1<AtomicUpdateSpec> updateSpecs, AtomicUpdateParameters parameters);
    public abstract virtual ResponseHeader AtomicUpdate(string id, IEnumerable`1<AtomicUpdateSpec> updateSpecs, AtomicUpdateParameters parameters);
    public abstract virtual Task`1<ResponseHeader> AtomicUpdateAsync(string id, IEnumerable`1<AtomicUpdateSpec> updateSpecs, AtomicUpdateParameters parameters);
}
public interface SolrNet.ISolrQuery {
}
public interface SolrNet.ISolrQueryExecuter`1 {
    public abstract virtual SolrQueryResults`1<T> Execute(ISolrQuery q, QueryOptions options);
    public abstract virtual SolrMoreLikeThisHandlerResults`1<T> Execute(SolrMLTQuery query, MoreLikeThisHandlerQueryOptions options);
    public abstract virtual Task`1<SolrQueryResults`1<T>> ExecuteAsync(ISolrQuery q, QueryOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<SolrQueryResults`1<T>> ExecuteAsync(ISolrQuery q, ISolrQueryBody body, QueryOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<SolrMoreLikeThisHandlerResults`1<T>> ExecuteAsync(SolrMLTQuery query, MoreLikeThisHandlerQueryOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<SolrMoreLikeThisHandlerResults`1<T>> ExecuteAsync(SolrMLTQuery query, ISolrQueryBody body, MoreLikeThisHandlerQueryOptions options, CancellationToken cancellationToken);
}
public interface SolrNet.ISolrReadOnlyOperations`1 {
    public abstract virtual SolrQueryResults`1<T> Query(string q);
    public abstract virtual SolrQueryResults`1<T> Query(string q, ICollection`1<SortOrder> orders);
    public abstract virtual SolrQueryResults`1<T> Query(string q, QueryOptions options);
    public abstract virtual SolrQueryResults`1<T> Query(ISolrQuery q);
    public abstract virtual SolrQueryResults`1<T> Query(ISolrQuery query, ICollection`1<SortOrder> orders);
    public abstract virtual ICollection`1<KeyValuePair`2<string, int>> FacetFieldQuery(SolrFacetFieldQuery facets);
    public abstract virtual Task`1<SolrQueryResults`1<T>> QueryAsync(string q, CancellationToken cancellationToken);
    public abstract virtual Task`1<SolrQueryResults`1<T>> QueryAsync(string q, ICollection`1<SortOrder> orders, CancellationToken cancellationToken);
    public abstract virtual Task`1<SolrQueryResults`1<T>> QueryAsync(string q, QueryOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<SolrQueryResults`1<T>> QueryAsync(ISolrQuery q, CancellationToken cancellationToken);
    public abstract virtual Task`1<SolrQueryResults`1<T>> QueryAsync(ISolrQuery query, ICollection`1<SortOrder> orders, CancellationToken cancellationToken);
    public abstract virtual Task`1<ICollection`1<KeyValuePair`2<string, int>>> FacetFieldQueryAsync(SolrFacetFieldQuery facets);
}
public interface SolrNet.IStreamSolrConnection {
    public abstract virtual Task`1<Stream> PostStreamAsStreamAsync(string relativeUrl, string contentType, Stream content, IEnumerable`1<KeyValuePair`2<string, string>> getParameters, CancellationToken cancellationToken);
    public abstract virtual Task`1<Stream> GetAsStreamAsync(string relativeUrl, IEnumerable`1<KeyValuePair`2<string, string>> parameters, CancellationToken cancellationToken);
}
public interface SolrNet.ITypedStatsResult`1 {
    public T Min { get; }
    public T Max { get; }
    public T Sum { get; }
    public T SumOfSquares { get; }
    public T Mean { get; }
    public T StdDev { get; }
    public abstract virtual T get_Min();
    public abstract virtual T get_Max();
    public abstract virtual T get_Sum();
    public abstract virtual T get_SumOfSquares();
    public abstract virtual T get_Mean();
    public abstract virtual T get_StdDev();
}
public class SolrNet.LocalParams : Dictionary`2<string, string> {
    public LocalParams(IDictionary`2<string, string> dictionary);
    public virtual string ToString();
    private static string Quote(string v);
    public static ISolrQuery op_Addition(LocalParams p, ISolrQuery q);
}
public class SolrNet.Location : object {
    public double Latitude;
    public double Longitude;
    public Location(double latitude, double longitude);
    public static bool IsValidLatitude(double latitude);
    public static bool IsValidLongitude(double longitude);
    public static Location TryCreate(double latitude, double longitude);
    public virtual string ToString();
    public sealed virtual bool Equals(Location other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
}
public class SolrNet.Mapping.AllPropertiesMappingManager : object {
    private IDictionary`2<Type, PropertyInfo> uniqueKeys;
    public sealed virtual IDictionary`2<string, SolrFieldModel> GetFields(Type type);
    public sealed virtual SolrFieldModel GetUniqueKey(Type type);
    public sealed virtual ICollection`1<Type> GetRegisteredTypes();
    public void SetUniqueKey(PropertyInfo property);
}
public class SolrNet.Mapping.AttributesMappingManager : object {
    public virtual IEnumerable`1<KeyValuePair`2<PropertyInfo, T[]>> GetPropertiesWithAttribute(Type type);
    public sealed virtual IDictionary`2<string, SolrFieldModel> GetFields(Type type);
    public virtual T[] GetCustomAttributes(PropertyInfo prop);
    public sealed virtual SolrFieldModel GetUniqueKey(Type type);
    public sealed virtual ICollection`1<Type> GetRegisteredTypes();
    [CompilerGeneratedAttribute]
private KeyValuePair`2<PropertyInfo, T[]> <GetPropertiesWithAttribute>b__0_0(PropertyInfo prop);
}
public interface SolrNet.Mapping.IMappingManager {
    public abstract virtual void Add(PropertyInfo property);
    public abstract virtual void Add(PropertyInfo property, string fieldName);
    public abstract virtual void Add(PropertyInfo property, string fieldName, Nullable`1<float> boost);
    public abstract virtual void SetUniqueKey(PropertyInfo property);
}
public class SolrNet.Mapping.MappingManager : object {
    private bool _useReflectedTypeOnly;
    private IDictionary`2<Type, Dictionary`2<string, SolrFieldModel>> mappings;
    private IDictionary`2<Type, SolrFieldModel> uniqueKeys;
    public MappingManager(bool useReflectedTypeOnly);
    public sealed virtual void Add(PropertyInfo property);
    public sealed virtual void Add(PropertyInfo property, string fieldName);
    public void Add(PropertyInfo property, string fieldName, bool useReflectedTypeOnly);
    public sealed virtual void Add(PropertyInfo property, string fieldName, Nullable`1<float> boost);
    public void Add(PropertyInfo property, string fieldName, Nullable`1<float> boost, bool useReflectedTypeOnly);
    public sealed virtual IDictionary`2<string, SolrFieldModel> GetFields(Type type);
    public sealed virtual void SetUniqueKey(PropertyInfo property);
    public void SetUniqueKey(PropertyInfo property, bool useReflectedTypeOnly);
    public sealed virtual SolrFieldModel GetUniqueKey(Type type);
    public sealed virtual ICollection`1<Type> GetRegisteredTypes();
}
public class SolrNet.Mapping.MemoizingMappingManager : object {
    private Converter`2<Type, IDictionary`2<string, SolrFieldModel>> memoGetFields;
    private Converter`2<Type, SolrFieldModel> memoGetUniqueKey;
    private IReadOnlyMappingManager mapper;
    private ICollection`1<Type> registeredTypes;
    private object registeredTypesLock;
    public MemoizingMappingManager(IReadOnlyMappingManager mapper);
    public sealed virtual IDictionary`2<string, SolrFieldModel> GetFields(Type type);
    public sealed virtual SolrFieldModel GetUniqueKey(Type type);
    public sealed virtual ICollection`1<Type> GetRegisteredTypes();
}
public interface SolrNet.Mapping.Validation.IMappingValidator {
    public abstract virtual IEnumerable`1<ValidationResult> EnumerateValidationResults(Type documentType, SolrSchema schema);
}
public class SolrNet.Mapping.Validation.MappingValidator : object {
    private IReadOnlyMappingManager mappingManager;
    private IEnumerable`1<IValidationRule> rules;
    public MappingValidator(IReadOnlyMappingManager mappingManager, IEnumerable`1<IValidationRule> rules);
    [IteratorStateMachineAttribute("SolrNet.Mapping.Validation.MappingValidator/<EnumerateValidationResults>d__3")]
public sealed virtual IEnumerable`1<ValidationResult> EnumerateValidationResults(Type documentType, SolrSchema schema);
}
public abstract class SolrNet.Mapping.Validation.Rules.AbstractSolrFieldTypeChecker : object {
    protected ICollection`1<string> safeTypes;
    protected ICollection`1<string> warningTypes;
    protected AbstractSolrFieldTypeChecker(ICollection`1<string> safeTypes, ICollection`1<string> warningTypes);
    public virtual ValidationResult Validate(SolrFieldType solrFieldType, string propertyName, Type propertyType);
    public abstract virtual bool CanHandleType(Type propertyType);
}
public class SolrNet.Mapping.Validation.Rules.BoolSolrFieldTypeChecker : AbstractSolrFieldTypeChecker {
    public virtual bool CanHandleType(Type propertyType);
}
public class SolrNet.Mapping.Validation.Rules.DateTimeSolrFieldTypeChecker : AbstractSolrFieldTypeChecker {
    public virtual bool CanHandleType(Type propertyType);
}
public class SolrNet.Mapping.Validation.Rules.DecimalSolrFieldTypeChecker : object {
    public sealed virtual ValidationResult Validate(SolrFieldType solrFieldType, string propertyName, Type propertyType);
    public sealed virtual bool CanHandleType(Type propertyType);
}
public class SolrNet.Mapping.Validation.Rules.DoubleSolrFieldTypeChecker : AbstractSolrFieldTypeChecker {
    public virtual bool CanHandleType(Type propertyType);
}
public class SolrNet.Mapping.Validation.Rules.FloatSolrFieldTypeChecker : AbstractSolrFieldTypeChecker {
    public virtual bool CanHandleType(Type propertyType);
}
public class SolrNet.Mapping.Validation.Rules.IntSolrFieldTypeChecker : AbstractSolrFieldTypeChecker {
    public virtual bool CanHandleType(Type propertyType);
}
public interface SolrNet.Mapping.Validation.Rules.ISolrFieldTypeChecker {
    public abstract virtual ValidationResult Validate(SolrFieldType solrFieldType, string propertyName, Type propertyType);
    public abstract virtual bool CanHandleType(Type propertyType);
}
public interface SolrNet.Mapping.Validation.Rules.IValidationRule {
    public abstract virtual IEnumerable`1<ValidationResult> Validate(Type propertyType, SolrSchema solrSchema, IReadOnlyMappingManager mappingManager);
}
public class SolrNet.Mapping.Validation.Rules.LongSolrFieldTypeChecker : AbstractSolrFieldTypeChecker {
    public virtual bool CanHandleType(Type propertyType);
}
public class SolrNet.Mapping.Validation.Rules.MappedPropertiesIsInSolrSchemaRule : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<string> <IgnoredFieldNames>k__BackingField;
    public ICollection`1<string> IgnoredFieldNames { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_IgnoredFieldNames();
    [CompilerGeneratedAttribute]
public void set_IgnoredFieldNames(ICollection`1<string> value);
    [IteratorStateMachineAttribute("SolrNet.Mapping.Validation.Rules.MappedPropertiesIsInSolrSchemaRule/<Validate>d__5")]
public sealed virtual IEnumerable`1<ValidationResult> Validate(Type documentType, SolrSchema solrSchema, IReadOnlyMappingManager mappingManager);
    private bool IsGlobMatch(string pattern, string input);
}
public class SolrNet.Mapping.Validation.Rules.MappingTypesAreCompatibleWithSolrTypesRule : object {
    private ISolrFieldTypeChecker[] fieldTypeCheckers;
    public MappingTypesAreCompatibleWithSolrTypesRule(ISolrFieldTypeChecker[] fieldTypeCheckers);
    [IteratorStateMachineAttribute("SolrNet.Mapping.Validation.Rules.MappingTypesAreCompatibleWithSolrTypesRule/<Validate>d__2")]
public sealed virtual IEnumerable`1<ValidationResult> Validate(Type documentType, SolrSchema solrSchema, IReadOnlyMappingManager mappingManager);
}
public class SolrNet.Mapping.Validation.Rules.MultivaluedMappedToCollectionRule : object {
    [IteratorStateMachineAttribute("SolrNet.Mapping.Validation.Rules.MultivaluedMappedToCollectionRule/<Validate>d__0")]
public sealed virtual IEnumerable`1<ValidationResult> Validate(Type documentType, SolrSchema solrSchema, IReadOnlyMappingManager mappingManager);
}
public class SolrNet.Mapping.Validation.Rules.RequiredFieldsAreMappedRule : object {
    [IteratorStateMachineAttribute("SolrNet.Mapping.Validation.Rules.RequiredFieldsAreMappedRule/<Validate>d__0")]
public sealed virtual IEnumerable`1<ValidationResult> Validate(Type documentType, SolrSchema solrSchema, IReadOnlyMappingManager mappingManager);
}
public class SolrNet.Mapping.Validation.Rules.StringSolrFieldTypeChecker : AbstractSolrFieldTypeChecker {
    public virtual bool CanHandleType(Type propertyType);
}
public class SolrNet.Mapping.Validation.Rules.UniqueKeyMatchesMappingRule : object {
    [IteratorStateMachineAttribute("SolrNet.Mapping.Validation.Rules.UniqueKeyMatchesMappingRule/<Validate>d__0")]
public sealed virtual IEnumerable`1<ValidationResult> Validate(Type documentType, SolrSchema solrSchema, IReadOnlyMappingManager mappingManager);
}
public class SolrNet.Mapping.Validation.ValidationError : ValidationResult {
    public ValidationError(string message);
}
public abstract class SolrNet.Mapping.Validation.ValidationResult : object {
    private string message;
    public string Message { get; }
    protected ValidationResult(string message);
    public string get_Message();
}
public class SolrNet.Mapping.Validation.ValidationWarning : ValidationResult {
    public ValidationWarning(string message);
}
public class SolrNet.Money : object {
    public decimal Value;
    public string Currency;
    public Money(decimal value, string currency);
    public virtual string ToString();
}
public enum SolrNet.Order : Enum {
    public int value__;
    public static Order ASC;
    public static Order DESC;
}
public class SolrNet.Pivot : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<Pivot> <ChildPivots>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasChildPivots>k__BackingField;
    public string Field { get; public set; }
    public string Value { get; public set; }
    public int Count { get; public set; }
    public List`1<Pivot> ChildPivots { get; public set; }
    public bool HasChildPivots { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public List`1<Pivot> get_ChildPivots();
    [CompilerGeneratedAttribute]
public void set_ChildPivots(List`1<Pivot> value);
    [CompilerGeneratedAttribute]
public bool get_HasChildPivots();
    [CompilerGeneratedAttribute]
public void set_HasChildPivots(bool value);
}
public class SolrNet.PivotFacetingResult : object {
    public IDictionary`2<string, Pivot> Result;
}
public class SolrNet.PivotFields : object {
    public string First;
    public string Second;
    public IEnumerable`1<string> Rest;
    public PivotFields(string first, string second, String[] rest);
    [IteratorStateMachineAttribute("SolrNet.PivotFields/<GetEnumerator>d__4")]
public sealed virtual IEnumerator`1<string> GetEnumerator();
    [IteratorStateMachineAttribute("SolrNet.PivotFields/<System-Collections-IEnumerable-GetEnumerator>d__5")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class SolrNet.RandomSortOrder : SortOrder {
    private static Random rnd;
    private static string separator;
    public RandomSortOrder(string fieldName);
    public RandomSortOrder(string fieldName, Order order);
    public RandomSortOrder(string fieldName, string seed);
    public RandomSortOrder(string fieldName, string seed, Order order);
    private static RandomSortOrder();
}
public class SolrNet.RangeFacetingResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Gap>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <End>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Start>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IList`1<KeyValuePair`2<string, int>> <RangeResults>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<FacetRangeOther, int> <OtherResults>k__BackingField;
    public string Gap { get; public set; }
    public string End { get; public set; }
    public string Start { get; public set; }
    public IList`1<KeyValuePair`2<string, int>> RangeResults { get; public set; }
    public IDictionary`2<FacetRangeOther, int> OtherResults { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Gap();
    [CompilerGeneratedAttribute]
public void set_Gap(string value);
    [CompilerGeneratedAttribute]
public string get_End();
    [CompilerGeneratedAttribute]
public void set_End(string value);
    [CompilerGeneratedAttribute]
public string get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(string value);
    [CompilerGeneratedAttribute]
public IList`1<KeyValuePair`2<string, int>> get_RangeResults();
    [CompilerGeneratedAttribute]
public void set_RangeResults(IList`1<KeyValuePair`2<string, int>> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<FacetRangeOther, int> get_OtherResults();
    [CompilerGeneratedAttribute]
public void set_OtherResults(IDictionary`2<FacetRangeOther, int> value);
}
public class SolrNet.ResponseHeader : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Status>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <QTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<string, string> <Params>k__BackingField;
    public int Status { get; public set; }
    public int QTime { get; public set; }
    public IDictionary`2<string, string> Params { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(int value);
    [CompilerGeneratedAttribute]
public int get_QTime();
    [CompilerGeneratedAttribute]
public void set_QTime(int value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Params();
    [CompilerGeneratedAttribute]
public void set_Params(IDictionary`2<string, string> value);
}
public interface SolrNet.Schema.ISolrSchemaParser {
    public abstract virtual SolrSchema Parse(XDocument solrSchemaXml);
}
public class SolrNet.Schema.SolrCopyField : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Destination>k__BackingField;
    public string Source { get; private set; }
    public string Destination { get; private set; }
    public SolrCopyField(string source, string destination);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Destination();
    [CompilerGeneratedAttribute]
private void set_Destination(string value);
}
public class SolrNet.Schema.SolrDynamicField : SolrField {
    public SolrDynamicField(string name, SolrFieldType type);
}
public class SolrNet.Schema.SolrField : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsRequired>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsMultiValued>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsIndexed>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsStored>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDocValues>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SolrFieldType <Type>k__BackingField;
    public string Name { get; private set; }
    public bool IsRequired { get; public set; }
    public bool IsMultiValued { get; public set; }
    public bool IsIndexed { get; public set; }
    public bool IsStored { get; public set; }
    public bool IsDocValues { get; public set; }
    public SolrFieldType Type { get; private set; }
    public SolrField(string name, SolrFieldType type);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMultiValued();
    [CompilerGeneratedAttribute]
public void set_IsMultiValued(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsIndexed();
    [CompilerGeneratedAttribute]
public void set_IsIndexed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsStored();
    [CompilerGeneratedAttribute]
public void set_IsStored(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDocValues();
    [CompilerGeneratedAttribute]
public void set_IsDocValues(bool value);
    [CompilerGeneratedAttribute]
public SolrFieldType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(SolrFieldType value);
}
public class SolrNet.Schema.SolrFieldType : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Type>k__BackingField;
    public string Name { get; private set; }
    public string Type { get; private set; }
    public SolrFieldType(string name, string type);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(string value);
}
public class SolrNet.Schema.SolrSchema : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SolrFieldType> <SolrFieldTypes>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SolrField> <SolrFields>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SolrDynamicField> <SolrDynamicFields>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SolrCopyField> <SolrCopyFields>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UniqueKey>k__BackingField;
    public List`1<SolrFieldType> SolrFieldTypes { get; public set; }
    public List`1<SolrField> SolrFields { get; public set; }
    public List`1<SolrDynamicField> SolrDynamicFields { get; public set; }
    public List`1<SolrCopyField> SolrCopyFields { get; public set; }
    public string UniqueKey { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<SolrFieldType> get_SolrFieldTypes();
    [CompilerGeneratedAttribute]
public void set_SolrFieldTypes(List`1<SolrFieldType> value);
    [CompilerGeneratedAttribute]
public List`1<SolrField> get_SolrFields();
    [CompilerGeneratedAttribute]
public void set_SolrFields(List`1<SolrField> value);
    [CompilerGeneratedAttribute]
public List`1<SolrDynamicField> get_SolrDynamicFields();
    [CompilerGeneratedAttribute]
public void set_SolrDynamicFields(List`1<SolrDynamicField> value);
    [CompilerGeneratedAttribute]
public List`1<SolrCopyField> get_SolrCopyFields();
    [CompilerGeneratedAttribute]
public void set_SolrCopyFields(List`1<SolrCopyField> value);
    [CompilerGeneratedAttribute]
public string get_UniqueKey();
    [CompilerGeneratedAttribute]
public void set_UniqueKey(string value);
    public SolrField FindSolrFieldByName(string name);
    public SolrFieldType FindSolrFieldTypeByName(string name);
}
public class SolrNet.Schema.SolrSchemaParser : object {
    public sealed virtual SolrSchema Parse(XDocument solrSchemaXml);
    private void ParseSolrFieldAttribute(SolrField field, XElement fieldNode);
}
public class SolrNet.SolrConstantScoreQuery : AbstractSolrQuery {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <Score>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISolrQuery <Query>k__BackingField;
    public double Score { get; }
    public ISolrQuery Query { get; }
    public SolrConstantScoreQuery(ISolrQuery query, double score);
    [CompilerGeneratedAttribute]
public double get_Score();
    [CompilerGeneratedAttribute]
public ISolrQuery get_Query();
}
public class SolrNet.SolrDIHStatus : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DIHStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ImportResponse>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <TimeElapsed>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <TotalRequestToDataSource>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <TotalRowsFetched>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <TotalDocumentsProcessed>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <TotalDocumentsSkipped>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <TotalDocumentsFailed>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <FullDumpStarted>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <Committed>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <Optimized>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <TimeTaken>k__BackingField;
    public DIHStatus Status { get; public set; }
    public string ImportResponse { get; public set; }
    public TimeSpan TimeElapsed { get; public set; }
    public int TotalRequestToDataSource { get; public set; }
    public int TotalRowsFetched { get; public set; }
    public int TotalDocumentsProcessed { get; public set; }
    public int TotalDocumentsSkipped { get; public set; }
    public int TotalDocumentsFailed { get; public set; }
    public DateTime FullDumpStarted { get; public set; }
    public string Summary { get; public set; }
    public DateTime Committed { get; public set; }
    public DateTime Optimized { get; public set; }
    public TimeSpan TimeTaken { get; public set; }
    [CompilerGeneratedAttribute]
public DIHStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(DIHStatus value);
    [CompilerGeneratedAttribute]
public string get_ImportResponse();
    [CompilerGeneratedAttribute]
public void set_ImportResponse(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TimeElapsed();
    [CompilerGeneratedAttribute]
public void set_TimeElapsed(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_TotalRequestToDataSource();
    [CompilerGeneratedAttribute]
public void set_TotalRequestToDataSource(int value);
    [CompilerGeneratedAttribute]
public int get_TotalRowsFetched();
    [CompilerGeneratedAttribute]
public void set_TotalRowsFetched(int value);
    [CompilerGeneratedAttribute]
public int get_TotalDocumentsProcessed();
    [CompilerGeneratedAttribute]
public void set_TotalDocumentsProcessed(int value);
    [CompilerGeneratedAttribute]
public int get_TotalDocumentsSkipped();
    [CompilerGeneratedAttribute]
public void set_TotalDocumentsSkipped(int value);
    [CompilerGeneratedAttribute]
public int get_TotalDocumentsFailed();
    [CompilerGeneratedAttribute]
public void set_TotalDocumentsFailed(int value);
    [CompilerGeneratedAttribute]
public DateTime get_FullDumpStarted();
    [CompilerGeneratedAttribute]
public void set_FullDumpStarted(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Committed();
    [CompilerGeneratedAttribute]
public void set_Committed(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_Optimized();
    [CompilerGeneratedAttribute]
public void set_Optimized(DateTime value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TimeTaken();
    [CompilerGeneratedAttribute]
public void set_TimeTaken(TimeSpan value);
}
[ObsoleteAttribute("As of Solr 3.1 has been deprecated, as of Solr 6.6 unsupported.")]
public class SolrNet.SolrFacetDateQuery : object {
    private string field;
    private DateTime start;
    private DateTime end;
    private string gap;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <HardEnd>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<FacetDateOther> <Other>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<FacetDateInclude> <Include>k__BackingField;
    public Nullable`1<bool> HardEnd { get; public set; }
    public ICollection`1<FacetDateOther> Other { get; public set; }
    public ICollection`1<FacetDateInclude> Include { get; public set; }
    public string Field { get; }
    public DateTime Start { get; }
    public DateTime End { get; }
    public string Gap { get; }
    public SolrFacetDateQuery(string field, DateTime start, DateTime end, string gap);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HardEnd();
    [CompilerGeneratedAttribute]
public void set_HardEnd(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public ICollection`1<FacetDateOther> get_Other();
    [CompilerGeneratedAttribute]
public void set_Other(ICollection`1<FacetDateOther> value);
    [CompilerGeneratedAttribute]
public ICollection`1<FacetDateInclude> get_Include();
    [CompilerGeneratedAttribute]
public void set_Include(ICollection`1<FacetDateInclude> value);
    public string get_Field();
    public DateTime get_Start();
    public DateTime get_End();
    public string get_Gap();
}
public class SolrNet.SolrFacetFieldQuery : object {
    private string field;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Sort>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Limit>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MinCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Missing>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <EnumCacheMinDf>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Contains>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <ContainsIgnoreCase>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Exists>k__BackingField;
    public string Field { get; }
    public string Prefix { get; public set; }
    public Nullable`1<bool> Sort { get; public set; }
    public Nullable`1<int> Limit { get; public set; }
    public Nullable`1<int> Offset { get; public set; }
    public Nullable`1<int> MinCount { get; public set; }
    public Nullable`1<bool> Missing { get; public set; }
    public Nullable`1<int> EnumCacheMinDf { get; public set; }
    public string Contains { get; public set; }
    public Nullable`1<bool> ContainsIgnoreCase { get; public set; }
    public Nullable`1<bool> Exists { get; public set; }
    public SolrFacetFieldQuery(string field);
    public string get_Field();
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Sort();
    [CompilerGeneratedAttribute]
public void set_Sort(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Limit();
    [CompilerGeneratedAttribute]
public void set_Limit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinCount();
    [CompilerGeneratedAttribute]
public void set_MinCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Missing();
    [CompilerGeneratedAttribute]
public void set_Missing(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_EnumCacheMinDf();
    [CompilerGeneratedAttribute]
public void set_EnumCacheMinDf(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Contains();
    [CompilerGeneratedAttribute]
public void set_Contains(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ContainsIgnoreCase();
    [CompilerGeneratedAttribute]
public void set_ContainsIgnoreCase(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exists();
    [CompilerGeneratedAttribute]
public void set_Exists(Nullable`1<bool> value);
}
public class SolrNet.SolrFacetIntervalQuery : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<FacetIntervalSet> <Sets>k__BackingField;
    public string Field { get; }
    public ICollection`1<FacetIntervalSet> Sets { get; public set; }
    public SolrFacetIntervalQuery(string field);
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public ICollection`1<FacetIntervalSet> get_Sets();
    [CompilerGeneratedAttribute]
public void set_Sets(ICollection`1<FacetIntervalSet> value);
}
public class SolrNet.SolrFacetPivotQuery : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<PivotFields> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <MinCount>k__BackingField;
    public ICollection`1<PivotFields> Fields { get; public set; }
    public Nullable`1<int> MinCount { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<PivotFields> get_Fields();
    [CompilerGeneratedAttribute]
public void set_Fields(ICollection`1<PivotFields> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinCount();
    [CompilerGeneratedAttribute]
public void set_MinCount(Nullable`1<int> value);
}
public class SolrNet.SolrFacetQuery : object {
    private ISolrQuery query;
    public ISolrQuery Query { get; }
    public SolrFacetQuery(ISolrQuery q);
    public ISolrQuery get_Query();
}
public class SolrNet.SolrFacetRangeQuery : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <HardEnd>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<FacetRangeOther> <Other>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<FacetRangeInclude> <Include>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Start>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <End>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Gap>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FacetRangeMethod <Method>k__BackingField;
    public Nullable`1<bool> HardEnd { get; public set; }
    public ICollection`1<FacetRangeOther> Other { get; public set; }
    public ICollection`1<FacetRangeInclude> Include { get; public set; }
    public string Field { get; private set; }
    public string Start { get; private set; }
    public string End { get; private set; }
    public string Gap { get; public set; }
    public FacetRangeMethod Method { get; public set; }
    public SolrFacetRangeQuery(string field, DateTime start, DateTime end, string gap);
    public SolrFacetRangeQuery(string field, int start, int end, int gap);
    public SolrFacetRangeQuery(string field, string start, string end, string gap);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HardEnd();
    [CompilerGeneratedAttribute]
public void set_HardEnd(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public ICollection`1<FacetRangeOther> get_Other();
    [CompilerGeneratedAttribute]
public void set_Other(ICollection`1<FacetRangeOther> value);
    [CompilerGeneratedAttribute]
public ICollection`1<FacetRangeInclude> get_Include();
    [CompilerGeneratedAttribute]
public void set_Include(ICollection`1<FacetRangeInclude> value);
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
private void set_Field(string value);
    [CompilerGeneratedAttribute]
public string get_Start();
    [CompilerGeneratedAttribute]
private void set_Start(string value);
    [CompilerGeneratedAttribute]
public string get_End();
    [CompilerGeneratedAttribute]
private void set_End(string value);
    [CompilerGeneratedAttribute]
public string get_Gap();
    [CompilerGeneratedAttribute]
public void set_Gap(string value);
    [CompilerGeneratedAttribute]
public FacetRangeMethod get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(FacetRangeMethod value);
}
public class SolrNet.SolrFieldModel : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<float> <Boost>k__BackingField;
    public PropertyInfo Property { get; private set; }
    public string FieldName { get; private set; }
    public Nullable`1<float> Boost { get; private set; }
    public SolrFieldModel(PropertyInfo property, string fieldName, Nullable`1<float> boost);
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
private void set_Property(PropertyInfo value);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
private void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Boost();
    [CompilerGeneratedAttribute]
private void set_Boost(Nullable`1<float> value);
}
public class SolrNet.SolrHasValueQuery : AbstractSolrQuery {
    private string field;
    public string Field { get; }
    public SolrHasValueQuery(string field);
    public string get_Field();
}
public abstract class SolrNet.SolrMLTQuery : object {
    public static SolrMoreLikeThisHandlerStreamUrlQuery FromStreamUrl(string url);
    public static SolrMoreLikeThisHandlerStreamBodyQuery FromStreamBody(string body);
    public static SolrMoreLikeThisHandlerQuery FromQuery(ISolrQuery q);
    public abstract virtual T Switch(Func`2<ISolrQuery, T> query, Func`2<string, T> streamBody, Func`2<Uri, T> streamUrl);
}
public class SolrNet.SolrMoreLikeThisHandlerQuery : SolrMLTQuery {
    private ISolrQuery query;
    public ISolrQuery Query { get; }
    public SolrMoreLikeThisHandlerQuery(ISolrQuery query);
    public ISolrQuery get_Query();
    public virtual T Switch(Func`2<ISolrQuery, T> q, Func`2<string, T> streamBody, Func`2<Uri, T> streamUrl);
}
public class SolrNet.SolrMoreLikeThisHandlerStreamBodyQuery : SolrMLTQuery {
    private string body;
    public string Body { get; }
    public SolrMoreLikeThisHandlerStreamBodyQuery(string body);
    public string get_Body();
    public virtual T Switch(Func`2<ISolrQuery, T> query, Func`2<string, T> streamBody, Func`2<Uri, T> streamUrl);
}
public class SolrNet.SolrMoreLikeThisHandlerStreamUrlQuery : SolrMLTQuery {
    private Uri url;
    public Uri Url { get; }
    public SolrMoreLikeThisHandlerStreamUrlQuery(string url);
    public SolrMoreLikeThisHandlerStreamUrlQuery(Uri url);
    public Uri get_Url();
    public virtual T Switch(Func`2<ISolrQuery, T> query, Func`2<string, T> streamBody, Func`2<Uri, T> streamUrl);
}
public class SolrNet.SolrMultipleCriteriaQuery : AbstractSolrQuery {
    private IEnumerable`1<ISolrQuery> queries;
    private string oper;
    public IEnumerable`1<ISolrQuery> Queries { get; }
    public string Oper { get; }
    public SolrMultipleCriteriaQuery(IEnumerable`1<ISolrQuery> queries);
    public SolrMultipleCriteriaQuery(IEnumerable`1<ISolrQuery> queries, string oper);
    public IEnumerable`1<ISolrQuery> get_Queries();
    public string get_Oper();
    public static SolrMultipleCriteriaQuery Create(ISolrQuery[] queries);
    public static SolrMultipleCriteriaQuery Create(IEnumerable`1<T> queries);
}
public static class SolrNet.SolrNet : object {
    public static ISolrBasicOperations`1<T> GetBasicServer(string url, bool isPostConnection);
    public static ISolrOperations`1<T> GetServer(string url, bool isPostConnection);
    public static ISolrBasicOperations`1<T> GetBasicServer(ISolrConnection connection);
    public static ISolrOperations`1<T> GetServer(ISolrConnection connection);
}
public class SolrNet.SolrNotQuery : AbstractSolrQuery {
    private ISolrQuery query;
    public ISolrQuery Query { get; }
    public SolrNotQuery(ISolrQuery q);
    public ISolrQuery get_Query();
}
public class SolrNet.SolrQuery : AbstractSolrQuery {
    private string query;
    public static AbstractSolrQuery All;
    public string Query { get; }
    public SolrQuery(string query);
    private static SolrQuery();
    public sealed virtual string get_Query();
}
public class SolrNet.SolrQueryBoost : AbstractSolrQuery {
    private ISolrQuery query;
    private double factor;
    public double Factor { get; }
    public ISolrQuery Query { get; }
    public SolrQueryBoost(ISolrQuery query, double factor);
    public double get_Factor();
    public ISolrQuery get_Query();
}
public class SolrNet.SolrQueryByDistance : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <DistanceFromPoint>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CalculationAccuracy <Accuracy>k__BackingField;
    public string FieldName { get; private set; }
    public Location Location { get; private set; }
    [ObsoleteAttribute("Use the Location property instead")]
public double PointLatitude { get; }
    [ObsoleteAttribute("Use the Location property instead")]
public double PointLongitude { get; }
    public double DistanceFromPoint { get; private set; }
    public CalculationAccuracy Accuracy { get; private set; }
    public string Query { get; }
    [ObsoleteAttribute("Use the constructor with the Location parameter")]
public SolrQueryByDistance(string fieldName, double pointLatitude, double pointLongitude, double distance);
    public SolrQueryByDistance(string fieldName, Location location, double distance);
    public SolrQueryByDistance(string fieldName, Location location, double distance, CalculationAccuracy accuracy);
    [ObsoleteAttribute("Use the constructor with the Location parameter")]
public SolrQueryByDistance(string fieldName, double pointLatitude, double pointLongitude, double distance, CalculationAccuracy accuracy);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
private void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public Location get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(Location value);
    public double get_PointLatitude();
    public double get_PointLongitude();
    [CompilerGeneratedAttribute]
public double get_DistanceFromPoint();
    [CompilerGeneratedAttribute]
private void set_DistanceFromPoint(double value);
    [CompilerGeneratedAttribute]
public CalculationAccuracy get_Accuracy();
    [CompilerGeneratedAttribute]
private void set_Accuracy(CalculationAccuracy value);
    public sealed virtual string get_Query();
}
public class SolrNet.SolrQueryByField : AbstractSolrQuery {
    private string fieldName;
    private string fieldValue;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Quoted>k__BackingField;
    public bool Quoted { get; public set; }
    public string FieldName { get; }
    public string FieldValue { get; }
    public SolrQueryByField(string fieldName, string fieldValue);
    [CompilerGeneratedAttribute]
public bool get_Quoted();
    [CompilerGeneratedAttribute]
public void set_Quoted(bool value);
    public string get_FieldName();
    public string get_FieldValue();
}
public class SolrNet.SolrQueryByFieldRegex : AbstractSolrQuery {
    private string fieldName;
    private string expression;
    public string FieldName { get; }
    public string Expression { get; }
    public SolrQueryByFieldRegex(string fieldName, string regularExpression);
    public string get_FieldName();
    public string get_Expression();
}
public class SolrNet.SolrQueryByRange`1 : AbstractSolrQuery {
    private string fieldName;
    private RT from;
    private RT to;
    private bool inclusiveFrom;
    private bool inclusiveTo;
    public string FieldName { get; }
    public RT From { get; }
    private object SolrNet.Impl.ISolrQueryByRange.From { get; }
    public RT To { get; }
    private object SolrNet.Impl.ISolrQueryByRange.To { get; }
    public bool Inclusive { get; }
    public bool InclusiveFrom { get; }
    public bool InclusiveTo { get; }
    public SolrQueryByRange`1(string fieldName, RT from, RT to);
    public SolrQueryByRange`1(string fieldName, RT from, RT to, bool inclusive);
    public SolrQueryByRange`1(string fieldName, RT from, RT to, bool inclusiveFrom, bool inclusiveTo);
    public sealed virtual string get_FieldName();
    public RT get_From();
    private sealed virtual override object SolrNet.Impl.ISolrQueryByRange.get_From();
    public RT get_To();
    private sealed virtual override object SolrNet.Impl.ISolrQueryByRange.get_To();
    public sealed virtual bool get_Inclusive();
    public sealed virtual bool get_InclusiveFrom();
    public sealed virtual bool get_InclusiveTo();
}
public class SolrNet.SolrQueryInList : AbstractSolrQuery {
    private string fieldName;
    private IEnumerable`1<string> list;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Quoted>k__BackingField;
    public bool Quoted { get; public set; }
    public string FieldName { get; }
    public IEnumerable`1<string> List { get; }
    public SolrQueryInList(string fieldName, IEnumerable`1<string> list);
    public SolrQueryInList(string fieldName, String[] values);
    [CompilerGeneratedAttribute]
public bool get_Quoted();
    [CompilerGeneratedAttribute]
public void set_Quoted(bool value);
    public string get_FieldName();
    public IEnumerable`1<string> get_List();
}
public class SolrNet.SolrQueryResults`1 : AbstractSolrQueryResults`1<T> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<string, HighlightedSnippets> <Highlights>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SpellCheckResults <SpellChecking>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<string, IList`1<T>> <SimilarResults>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<string, StatsResult> <Stats>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CollapseResults <Collapsing>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CollapseExpandResults`1<T> <CollapseExpand>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ClusterResults <Clusters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TermsResults <Terms>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<TermVectorDocumentResult> <TermVectorResults>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<string, GroupedResults`1<T>> <Grouping>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DebugResults <Debug>k__BackingField;
    public IDictionary`2<string, HighlightedSnippets> Highlights { get; public set; }
    public SpellCheckResults SpellChecking { get; public set; }
    public IDictionary`2<string, IList`1<T>> SimilarResults { get; public set; }
    public IDictionary`2<string, StatsResult> Stats { get; public set; }
    [ObsoleteAttribute("Use result grouping instead")]
public CollapseResults Collapsing { get; public set; }
    public CollapseExpandResults`1<T> CollapseExpand { get; public set; }
    public ClusterResults Clusters { get; public set; }
    public TermsResults Terms { get; public set; }
    public ICollection`1<TermVectorDocumentResult> TermVectorResults { get; public set; }
    public IDictionary`2<string, GroupedResults`1<T>> Grouping { get; public set; }
    public DebugResults Debug { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, HighlightedSnippets> get_Highlights();
    [CompilerGeneratedAttribute]
public void set_Highlights(IDictionary`2<string, HighlightedSnippets> value);
    [CompilerGeneratedAttribute]
public SpellCheckResults get_SpellChecking();
    [CompilerGeneratedAttribute]
public void set_SpellChecking(SpellCheckResults value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IList`1<T>> get_SimilarResults();
    [CompilerGeneratedAttribute]
public void set_SimilarResults(IDictionary`2<string, IList`1<T>> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, StatsResult> get_Stats();
    [CompilerGeneratedAttribute]
public void set_Stats(IDictionary`2<string, StatsResult> value);
    [CompilerGeneratedAttribute]
public CollapseResults get_Collapsing();
    [CompilerGeneratedAttribute]
public void set_Collapsing(CollapseResults value);
    [CompilerGeneratedAttribute]
public void set_CollapseExpand(CollapseExpandResults`1<T> value);
    [CompilerGeneratedAttribute]
public CollapseExpandResults`1<T> get_CollapseExpand();
    [CompilerGeneratedAttribute]
public ClusterResults get_Clusters();
    [CompilerGeneratedAttribute]
public void set_Clusters(ClusterResults value);
    [CompilerGeneratedAttribute]
public TermsResults get_Terms();
    [CompilerGeneratedAttribute]
public void set_Terms(TermsResults value);
    [CompilerGeneratedAttribute]
public ICollection`1<TermVectorDocumentResult> get_TermVectorResults();
    [CompilerGeneratedAttribute]
public void set_TermVectorResults(ICollection`1<TermVectorDocumentResult> value);
    [CompilerGeneratedAttribute]
public void set_Grouping(IDictionary`2<string, GroupedResults`1<T>> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, GroupedResults`1<T>> get_Grouping();
    [CompilerGeneratedAttribute]
public void set_Debug(DebugResults value);
    [CompilerGeneratedAttribute]
public DebugResults get_Debug();
    public virtual R Switch(Func`2<SolrQueryResults`1<T>, R> query, Func`2<SolrMoreLikeThisHandlerResults`1<T>, R> moreLikeThis);
}
public class SolrNet.SolrRequiredQuery : AbstractSolrQuery {
    private ISolrQuery query;
    public ISolrQuery Query { get; }
    public SolrRequiredQuery(ISolrQuery q);
    public ISolrQuery get_Query();
}
public class SolrNet.SortOrder : object {
    private string fieldName;
    private Order order;
    private static Regex parseRx;
    public string FieldName { get; }
    public Order Order { get; }
    public SortOrder(string fieldName);
    public SortOrder(string fieldName, Order order);
    private static SortOrder();
    public string get_FieldName();
    public Order get_Order();
    public virtual string ToString();
    public static SortOrder Parse(string s);
    public bool Equals(SortOrder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class SolrNet.StartOrCursor : object {
    public abstract virtual T Switch(Func`2<Start, T> start, Func`2<Cursor, T> cursor);
    public sealed virtual bool Equals(StartOrCursor other);
    [CompilerGeneratedAttribute]
private bool <Equals>b__2_0(Start startOther);
    [CompilerGeneratedAttribute]
private bool <Equals>b__2_1(Cursor cursorOther);
}
public class SolrNet.StatsResult : object {
    private ITypedStatsResult`1<string> statsResult;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <Max>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <Sum>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <Count>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <Missing>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <SumOfSquares>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <Mean>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <StdDev>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<double, double> <Percentiles>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<string, Dictionary`2<string, StatsResult>> <FacetResults>k__BackingField;
    [ObsoleteAttribute("Use `AsType<double?>().Min` instead.")]
public double Min { get; public set; }
    [ObsoleteAttribute("Use `AsType<double?>().Max` instead.")]
public double Max { get; public set; }
    [ObsoleteAttribute("Use `AsType<double?>().Sum` instead.")]
public double Sum { get; public set; }
    public long Count { get; public set; }
    public long Missing { get; public set; }
    [ObsoleteAttribute("Use `AsType<double?>().SumOfSquares` instead.")]
public double SumOfSquares { get; public set; }
    [ObsoleteAttribute("Use `AsType<double?>().Mean` instead.")]
public double Mean { get; public set; }
    [ObsoleteAttribute("Use `AsType<double?>().StdDev` instead.")]
public double StdDev { get; public set; }
    public IDictionary`2<double, double> Percentiles { get; public set; }
    public IDictionary`2<string, Dictionary`2<string, StatsResult>> FacetResults { get; public set; }
    public StatsResult(ITypedStatsResult`1<string> statsResult);
    [CompilerGeneratedAttribute]
public double get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(double value);
    [CompilerGeneratedAttribute]
public double get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(double value);
    [CompilerGeneratedAttribute]
public double get_Sum();
    [CompilerGeneratedAttribute]
public void set_Sum(double value);
    [CompilerGeneratedAttribute]
public long get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(long value);
    [CompilerGeneratedAttribute]
public long get_Missing();
    [CompilerGeneratedAttribute]
public void set_Missing(long value);
    [CompilerGeneratedAttribute]
public double get_SumOfSquares();
    [CompilerGeneratedAttribute]
public void set_SumOfSquares(double value);
    [CompilerGeneratedAttribute]
public double get_Mean();
    [CompilerGeneratedAttribute]
public void set_Mean(double value);
    [CompilerGeneratedAttribute]
public double get_StdDev();
    [CompilerGeneratedAttribute]
public void set_StdDev(double value);
    [CompilerGeneratedAttribute]
public IDictionary`2<double, double> get_Percentiles();
    [CompilerGeneratedAttribute]
public void set_Percentiles(IDictionary`2<double, double> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, Dictionary`2<string, StatsResult>> get_FacetResults();
    [CompilerGeneratedAttribute]
public void set_FacetResults(IDictionary`2<string, Dictionary`2<string, StatsResult>> value);
    public ITypedStatsResult`1<T> AsType();
}
public class SolrNet.TypedStatsResult`1 : object {
    private Lazy`1<T> min;
    private Lazy`1<T> max;
    private Lazy`1<T> sum;
    private Lazy`1<T> sumOfSquares;
    private Lazy`1<T> mean;
    private Lazy`1<T> stdDev;
    private static TypeConverter Converter;
    public T Min { get; }
    public T Max { get; }
    public T Sum { get; }
    public T SumOfSquares { get; }
    public T Mean { get; }
    public T StdDev { get; }
    public TypedStatsResult`1(ITypedStatsResult`1<string> stringValues);
    private static TypedStatsResult`1();
    public sealed virtual T get_Min();
    public sealed virtual T get_Max();
    public sealed virtual T get_Sum();
    public sealed virtual T get_SumOfSquares();
    public sealed virtual T get_Mean();
    public sealed virtual T get_StdDev();
    private static T GetValue(string stringValue);
}
public abstract class SolrNet.UpdateParameters : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <CommitWithin>k__BackingField;
    public Nullable`1<int> CommitWithin { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CommitWithin();
    [CompilerGeneratedAttribute]
public void set_CommitWithin(Nullable`1<int> value);
}
[ExtensionAttribute]
public static class SolrNet.Utils.F : object {
    public static void DoNothing(T a);
    [ExtensionAttribute]
public static Func`2<T, Unit> ToFunc(Action`1<T> action);
    [ExtensionAttribute]
public static Func`3<A, B, Unit> ToFunc(Action`2<A, B> action);
    [ExtensionAttribute]
public static Action`2<A, B> ToAction(Func`3<A, B, Unit> f);
    public static Func`1<T> Func(Func`1<T> f);
}
public static class SolrNet.Utils.KV : object {
    public static KeyValuePair`2<K, V> Create(K key, V value);
}
public class SolrNet.Utils.Memoizer : object {
    public static Converter`2<TArg, TResult> Memoize(Converter`2<TArg, TResult> function);
    public static Func`3<TArg1, TArg2, TResult> Memoize2(Func`3<TArg1, TArg2, TResult> function);
}
public static class SolrNet.Utils.TypeHelper : object {
    public static Type GetUnderlyingNullableType(Type t);
    public static bool IsNullableType(Type theType);
    public static bool IsGenericAssignableFrom(Type t, Type other);
}
public abstract class SolrNet.Utils.Unit : object {
}
public static class SolrNet.Utils.UriValidator : object {
    public static string ValidateHTTP(string s);
    public static int UriLength(UriBuilder u);
}
[ExtensionAttribute]
public static class SolrNet.Utils.X : object {
    [ExtensionAttribute]
public static string ValueOrNull(XAttribute attr);
    public static Func`2<XElement, bool> AttrEq(string name, string value);
}
