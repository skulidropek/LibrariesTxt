[BindingAttribute]
public class SpecFlow.Assist.Dynamic.DynamicStepArgumentTransformations : object {
    [StepArgumentTransformationAttribute]
public IEnumerable`1<object> TransformToEnumerable(Table table);
    [StepArgumentTransformationAttribute]
public IList`1<object> TransformToList(Table table);
    [StepArgumentTransformationAttribute]
public object TransformToDynamicInstance(Table table);
}
public class TechTalk.SpecFlow.Assist.DynamicInstanceComparisonException : Exception {
    [CompilerGeneratedAttribute]
private IList`1<string> <Differences>k__BackingField;
    public IList`1<string> Differences { get; private set; }
    public DynamicInstanceComparisonException(IList`1<string> diffs);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Differences();
    [CompilerGeneratedAttribute]
private void set_Differences(IList`1<string> value);
}
public class TechTalk.SpecFlow.Assist.DynamicInstanceFromTableException : Exception {
    public DynamicInstanceFromTableException(string message);
}
public class TechTalk.SpecFlow.Assist.DynamicSetComparisonException : Exception {
    [CompilerGeneratedAttribute]
private IList`1<string> <Differences>k__BackingField;
    public IList`1<string> Differences { get; private set; }
    public DynamicSetComparisonException(string message);
    public DynamicSetComparisonException(string message, IList`1<string> differences);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Differences();
    [CompilerGeneratedAttribute]
private void set_Differences(IList`1<string> value);
}
[ExtensionAttribute]
public static class TechTalk.SpecFlow.Assist.DynamicTableHelpers : object {
    private static string ERRORMESS_PROPERTY_DIFF_SET;
    private static string ERRORMESS_INSTANCETABLE_FORMAT;
    private static string ERRORMESS_NOT_ON_TABLE;
    private static string ERRORMESS_NOT_ON_INSTANCE;
    private static string ERRORMESS_VALUE_DIFFERS;
    private static string ERRORMESS_NUMBER_OF_ROWS_DIFFERS;
    private static string ERRORMESS_SET_VALUES_DIFFERS;
    [ExtensionAttribute]
public static ExpandoObject CreateDynamicInstance(Table table, bool doTypeConversion);
    [ExtensionAttribute]
public static IEnumerable`1<object> CreateDynamicSet(Table table, bool doTypeConversion);
    [ExtensionAttribute]
public static void CompareToDynamicInstance(Table table, object instance, bool doTypeConversion);
    [ExtensionAttribute]
public static void CompareToDynamicSet(Table table, IList`1<object> set, bool doTypeConversion);
    private static List`1<string> GetSetValueDifferences(Table table, IList`1<object> set, bool doTypeConversion);
    private static object GetRowValue(int rowIndex, Table table, string memberName, String& currentHeader, bool doTypeConversion);
    private static void AssertValuesOfRowDifference(TableRow tableRow, object instance, bool doTypeConversion);
    private static IList`1<string> GetPropertyDifferences(Table table, object instance, bool doTypeConversion);
    private static void AssertEqualNumberOfRows(Table table, IList`1<object> set);
    private static IList`1<string> ValidateValuesOfRow(TableRow tableRow, object instance, bool doTypeConversion);
    private static IList`1<string> GetPropertyNameDifferences(IEnumerable`1<string> tableHeadersAsPropertyNames, IEnumerable`1<string> instanceMembers);
    private static Table CreateHorizontalTable(Table verticalFieldValueTable);
    private static ExpandoObject CreateDynamicInstance(TableRow tablerow, bool doTypeConversion);
    private static object CreateTypedValue(string valueFromTable, bool doTypeConversion);
    private static string CreatePropertyName(string header);
    private static string FixCasing(string header);
    private static string RemoveReservedChars(string orgPropertyName);
}
