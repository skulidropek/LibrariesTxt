[ExtensionAttribute]
public static class CucumberExpressions.Ast.AstExtensions : object {
    [ExtensionAttribute]
public static string GetSymbol(TokenType tokenType);
    [ExtensionAttribute]
public static string GetPurpose(TokenType tokenType);
}
public interface CucumberExpressions.Ast.ILocated {
    public int Start { get; }
    public int End { get; }
    public abstract virtual int get_Start();
    public abstract virtual int get_End();
}
public class CucumberExpressions.Ast.Node : object {
    [CompilerGeneratedAttribute]
private NodeType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Node[] <Nodes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    public NodeType Type { get; }
    public Node[] Nodes { get; }
    public string Token { get; }
    public int Start { get; }
    public int End { get; }
    public string Text { get; }
    public Node(NodeType type, int start, int end, string token);
    public Node(NodeType type, int start, int end, Node[] nodes);
    private Node(NodeType type, int start, int end, Node[] nodes, string token);
    [CompilerGeneratedAttribute]
public NodeType get_Type();
    [CompilerGeneratedAttribute]
public Node[] get_Nodes();
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Start();
    [CompilerGeneratedAttribute]
public sealed virtual int get_End();
    public string get_Text();
    public virtual string ToString();
    private StringBuilder ToString(int depth);
    private bool Equals(Node other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum CucumberExpressions.Ast.NodeType : Enum {
    public int value__;
    public static NodeType TEXT_NODE;
    public static NodeType OPTIONAL_NODE;
    public static NodeType ALTERNATION_NODE;
    public static NodeType ALTERNATIVE_NODE;
    public static NodeType PARAMETER_NODE;
    public static NodeType EXPRESSION_NODE;
}
public class CucumberExpressions.Ast.Token : object {
    public static char EscapeCharacter;
    public static char AlternationCharacter;
    public static char BeginParameterCharacter;
    public static char EndParameterCharacter;
    public static char BeginOptionalCharacter;
    public static char EndOptionalCharacter;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    public string Text { get; }
    public TokenType Type { get; }
    public int Start { get; }
    public int End { get; }
    public Token(string text, TokenType type, int start, int end);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public TokenType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Start();
    [CompilerGeneratedAttribute]
public sealed virtual int get_End();
    public static bool CanEscape(char token);
    public static TokenType TypeOf(char token);
    public static bool IsEscapeCharacter(int token);
    public virtual string ToString();
    protected bool Equals(Token other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum CucumberExpressions.Ast.TokenType : Enum {
    public int value__;
    public static TokenType UNKNOWN;
    public static TokenType START_OF_LINE;
    public static TokenType END_OF_LINE;
    public static TokenType WHITE_SPACE;
    public static TokenType BEGIN_OPTIONAL;
    public static TokenType END_OPTIONAL;
    public static TokenType BEGIN_PARAMETER;
    public static TokenType END_PARAMETER;
    public static TokenType ALTERNATION;
    public static TokenType TEXT;
}
public class CucumberExpressions.CucumberExpression : object {
    private static Regex EscapePatternRe;
    private List`1<IParameterType> _parameterTypes;
    private TreeRegexp _treeRegexp;
    private IParameterTypeRegistry _parameterTypeRegistry;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    public string Source { get; }
    public Regex Regex { get; }
    public IParameterType[] ParameterTypes { get; }
    public CucumberExpression(string expression, IParameterTypeRegistry parameterTypeRegistry);
    private static CucumberExpression();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Source();
    public sealed virtual Regex get_Regex();
    public IParameterType[] get_ParameterTypes();
    private string RewriteToRegex(Node node);
    private static string EscapeRegex(string text);
    private string RewriteOptional(Node node);
    private string RewriteAlternation(Node node);
    private string RewriteAlternative(Node node);
    protected virtual string RewriteParameter(Node node);
    protected virtual string GetGroupName(Node node, IParameterType parameterType);
    protected virtual bool HandleStringType(string name, IParameterType parameterType, String[]& regexps, Boolean& shouldWrapWithCaptureGroup);
    protected virtual String[] GetParameterTypeRegexps(string name, IParameterType parameterType, Boolean& shouldWrapWithCaptureGroup);
    private string RewriteExpression(Node node);
    private void AssertNotEmpty(Node node, Func`2<Node, CucumberExpressionException> createNodeWasNotEmptyException);
    private void AssertNoParameters(Node node, Func`2<Node, CucumberExpressionException> createNodeContainedAParameterException);
    private void AssertNoOptionals(Node node, Func`2<Node, CucumberExpressionException> createNodeContainedAnOptionalException);
    private void AssertNoNodeOfType(NodeType nodeType, Node node, Func`2<Node, CucumberExpressionException> createException);
    [CompilerGeneratedAttribute]
private CucumberExpressionException <RewriteOptional>b__14_0(Node astNode);
    [CompilerGeneratedAttribute]
private CucumberExpressionException <RewriteOptional>b__14_1(Node astNode);
    [CompilerGeneratedAttribute]
private CucumberExpressionException <RewriteOptional>b__14_2(Node astNode);
    [CompilerGeneratedAttribute]
private CucumberExpressionException <RewriteAlternation>b__15_0(Node astNode);
}
public class CucumberExpressions.CucumberExpressionException : Exception {
    public CucumberExpressionException(string message);
    public CucumberExpressionException(string message, Exception innerException);
    internal static CucumberExpressionException CreateMissingEndToken(string expression, TokenType beginToken, TokenType endToken, Token current);
    internal static CucumberExpressionException CreateAlternationNotAllowedInOptional(string expression, Token current);
    internal static CucumberExpressionException CreateTheEndOfLineCanNotBeEscaped(string expression);
    internal static CucumberExpressionException CreateAlternativeMayNotBeEmpty(Node node, string expression);
    internal static CucumberExpressionException CreateParameterIsNotAllowedInOptional(Node node, string expression);
    internal static CucumberExpressionException CreateOptionalIsNotAllowedInOptional(Node node, string expression);
    internal static CucumberExpressionException CreateOptionalMayNotBeEmpty(Node node, string expression);
    internal static CucumberExpressionException CreateAlternativeMayNotExclusivelyContainOptionals(Node node, string expression);
    private static string ThisCucumberExpressionHasAProblemAt(int index);
    internal static CucumberExpressionException CreateCantEscape(string expression, int index);
    public static CucumberExpressionException CreateInvalidParameterTypeName(string name);
    internal static CucumberExpressionException CreateInvalidParameterTypeName(Token token, string expression);
    protected static string GetMessage(int index, string expression, string pointer, string problem, string solution);
    protected static string PointAt(ILocated node);
    private static string PointAt(int index);
}
public class CucumberExpressions.ExpressionFactory : object {
    private static Regex BeginAnchorRe;
    private static Regex EndAnchorRe;
    private static Regex ScriptStyleRegexpRe;
    private static Regex ParameterPatternRe;
    private IParameterTypeRegistry _parameterTypeRegistry;
    public ExpressionFactory(IParameterTypeRegistry parameterTypeRegistry);
    private static ExpressionFactory();
    public IExpression CreateExpression(string expressionString);
    protected virtual bool IsRegularExpression(string expressionString);
    private RegularExpression createRegularExpressionWithAnchors(string expressionString);
}
internal class CucumberExpressions.Generation.CombinatorialGeneratedExpressionFactory : object {
    private static int MAX_EXPRESSIONS;
    private string _expressionTemplate;
    private List`1<List`1<IParameterType>> _parameterTypeCombinations;
    public CombinatorialGeneratedExpressionFactory(string expressionTemplate, List`1<List`1<IParameterType>> parameterTypeCombinations);
    public GeneratedExpression[] GenerateExpressions();
    private void GeneratePermutations(List`1<GeneratedExpression> generatedExpressions, Stack`1<IParameterType> permutation);
}
public class CucumberExpressions.Generation.CucumberExpressionGenerator : object {
    private IParameterTypeRegistry _parameterTypeRegistry;
    public CucumberExpressionGenerator(IParameterTypeRegistry parameterTypeRegistry);
    public GeneratedExpression[] GenerateExpressions(string text);
    private string escape(string s);
    private List`1<ParameterTypeMatcher> CreateParameterTypeMatchers(string text);
    private static List`1<ParameterTypeMatcher> CreateParameterTypeMatchers(IParameterType parameterType, string text);
}
public class CucumberExpressions.Generation.GeneratedExpression : object {
    private static String[] CSharpKeywords;
    private string _expressionTemplate;
    private IParameterType[] _parameterTypes;
    public GeneratedExpression(string expressionTemplate, IParameterType[] parameterTypes);
    private static GeneratedExpression();
    private static bool IsCSharpKeyword(string keyword);
    public string GetSource();
    private string GetParameterName(string typeName, Dictionary`2<string, int> usageByTypeName);
    public List`1<string> GetParameterNames();
    public IParameterType[] GetParameterTypes();
}
internal class CucumberExpressions.Generation.ParameterTypeMatcher : object {
    private Regex _regex;
    private string _text;
    private Match _match;
    [CompilerGeneratedAttribute]
private IParameterType <ParameterType>k__BackingField;
    public IParameterType ParameterType { get; }
    public ParameterTypeMatcher(IParameterType parameterType, Regex regex, string text);
    [CompilerGeneratedAttribute]
public IParameterType get_ParameterType();
    private static bool IsWhitespaceOrPunctuationOrSymbol(char c);
    public bool AdvanceToAndFind(int newMatchPos);
    private bool GroupHasWordBoundaryOnBothSides();
    private bool GroupHasLeftWordBoundary();
    private bool GroupHasRightWordBoundary();
    public int GetMatchStart();
    public string GetMatchValue();
    public sealed virtual int CompareTo(ParameterTypeMatcher o);
}
public interface CucumberExpressions.IExpression {
    public string Source { get; }
    public Regex Regex { get; }
    public abstract virtual string get_Source();
    public abstract virtual Regex get_Regex();
}
public interface CucumberExpressions.IParameterType {
    public String[] RegexStrings { get; }
    public string Name { get; }
    public Type ParameterType { get; }
    public int Weight { get; }
    public bool UseForSnippets { get; }
    public abstract virtual String[] get_RegexStrings();
    public abstract virtual string get_Name();
    public abstract virtual Type get_ParameterType();
    public abstract virtual int get_Weight();
    public abstract virtual bool get_UseForSnippets();
}
public interface CucumberExpressions.IParameterTypeRegistry {
    public abstract virtual IParameterType LookupByTypeName(string name);
    public abstract virtual IEnumerable`1<IParameterType> GetParameterTypes();
}
public static class CucumberExpressions.ParameterTypeConstants : object {
    public static string StringParameterName;
    public static string StringParameterRegexDoubleQuote;
    public static string StringParameterRegexApostrophe;
    public static String[] StringParameterRegexps;
    public static string IntParameterName;
    public static string IntParameterRegex;
    public static String[] IntParameterRegexps;
    public static string FloatParameterName;
    public static string DoubleParameterName;
    private static string FloatPartSign;
    private static string FloatPartMustContainNumber;
    private static string FloatPartScientificNumber;
    private static string FloatPartDecimalFraction;
    private static string FloatPartInteger;
    public static string FloatParameterRegexTemplate;
    public static string FloatParameterRegex;
    public static String[] FloatParameterRegexps;
    public static string FloatParameterRegexEn;
    public static String[] FloatParameterRegexpsEn;
    public static string WordParameterName;
    public static string WordParameterRegex;
    public static String[] WordParameterRegexps;
    public static string AnonymousParameterRegex;
    private static ParameterTypeConstants();
    public static string GetFloatParameterRegex(CultureInfo cultureInfo);
    private static string GetGenericFloatParameterRegex();
}
public class CucumberExpressions.Parsing.CucumberExpressionParser : object {
    private static ICucumberExpressionInnerParser TextParser;
    private static ICucumberExpressionInnerParser NameParser;
    private static ICucumberExpressionInnerParser ParameterParser;
    private static ICucumberExpressionInnerParser OptionalParser;
    private static ICucumberExpressionInnerParser AlternativeSeparator;
    private static List`1<ICucumberExpressionInnerParser> AlternativeParsers;
    private static ICucumberExpressionInnerParser AlternationParser;
    private static ICucumberExpressionInnerParser CucumberExpressionMainParser;
    private static CucumberExpressionParser();
    public Node Parse(string expression);
    private static ICucumberExpressionInnerParser ParseBetween(NodeType type, TokenType beginToken, TokenType endToken, ICucumberExpressionInnerParser[] parsers);
    private static ICucumberExpressionInnerParser ParseBetween(NodeType type, TokenType beginToken, TokenType endToken, Func`1<ICucumberExpressionInnerParser[]> parsersFunc);
    private static CucumberExpressionParserResult ParseTokensUntil(string expression, IEnumerable`1<ICucumberExpressionInnerParser> parsers, Token[] tokens, int startAt, TokenType[] endTokens);
    private static CucumberExpressionParserResult ParseToken(string expression, IEnumerable`1<ICucumberExpressionInnerParser> parsers, Token[] tokens, int startAt);
    private static bool LookingAtAny(Token[] tokens, int at, TokenType[] tokenTypes);
    private static bool LookingAt(Token[] tokens, int at, TokenType token);
    private static Node[] SplitAlternatives(int start, int end, IEnumerable`1<Node> alternation);
    private static Node[] CreateAlternativeNodes(int start, int end, List`1<Node> separators, List`1<List`1<Node>> alternatives);
}
public class CucumberExpressions.Parsing.CucumberExpressionParserResult : object {
    [CompilerGeneratedAttribute]
private int <Consumed>k__BackingField;
    [CompilerGeneratedAttribute]
private Node[] <Ast>k__BackingField;
    public int Consumed { get; }
    public Node[] Ast { get; }
    public CucumberExpressionParserResult(int consumed, Node[] ast);
    [CompilerGeneratedAttribute]
public int get_Consumed();
    [CompilerGeneratedAttribute]
public Node[] get_Ast();
}
public class CucumberExpressions.Parsing.CucumberExpressionTokenizer : object {
    public Token[] Tokenize(string expression);
    [IteratorStateMachineAttribute("CucumberExpressions.Parsing.CucumberExpressionTokenizer/<TokenizeInternal>d__1")]
public IEnumerable`1<Token> TokenizeInternal(string expression);
}
public class CucumberExpressions.Parsing.Group : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Group> <Children>k__BackingField;
    public string Value { get; }
    public int Start { get; }
    public int End { get; }
    public List`1<Group> Children { get; }
    public Group(string value, int start, int end, List`1<Group> children);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
public List`1<Group> get_Children();
    public String[] GetValues();
    public static Group[] Parse(Regex expression);
    private static List`1<Group> ToGroups(IEnumerable`1<GroupBuilder> children);
}
public class CucumberExpressions.Parsing.GroupBuilder : object {
    private List`1<GroupBuilder> _groupBuilders;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCapturing>k__BackingField;
    public string Source { get; public set; }
    public int StartIndex { get; }
    public int EndIndex { get; public set; }
    public bool IsCapturing { get; private set; }
    public IEnumerable`1<GroupBuilder> Children { get; }
    public GroupBuilder(int startIndex);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public int get_StartIndex();
    [CompilerGeneratedAttribute]
public int get_EndIndex();
    [CompilerGeneratedAttribute]
public void set_EndIndex(int value);
    [CompilerGeneratedAttribute]
public bool get_IsCapturing();
    [CompilerGeneratedAttribute]
private void set_IsCapturing(bool value);
    public IEnumerable`1<GroupBuilder> get_Children();
    public void Add(GroupBuilder groupBuilder);
    public Group Build(Match matcher, IEnumerator`1<int> groupIndices);
    public void SetNonCapturing();
    public void MoveChildrenTo(GroupBuilder groupBuilder);
}
internal static class CucumberExpressions.Parsing.RegexCaptureGroupRemover : object {
    public static string RemoveCaptureGroups(string regex);
    public static string RemoveInnerCaptureGroups(string regex);
    private static string RemoveCaptureGroupsInternal(string regex, int skipLevels);
    [IteratorStateMachineAttribute("CucumberExpressions.Parsing.RegexCaptureGroupRemover/<GetGroupStarts>d__3")]
private static IEnumerable`1<int> GetGroupStarts(GroupBuilder groupBuilder, int skipLevels, int level);
}
public class CucumberExpressions.Parsing.TreeRegexp : object {
    [CompilerGeneratedAttribute]
private Regex <Regex>k__BackingField;
    [CompilerGeneratedAttribute]
private GroupBuilder <GroupBuilder>k__BackingField;
    public Regex Regex { get; }
    public GroupBuilder GroupBuilder { get; }
    public TreeRegexp(string regexp);
    public TreeRegexp(Regex regex);
    [CompilerGeneratedAttribute]
public Regex get_Regex();
    [CompilerGeneratedAttribute]
public GroupBuilder get_GroupBuilder();
    public static GroupBuilder CreateGroupBuilder(Regex pattern);
    private static bool IsNonCapturingGroup(string source, int i);
    public Group Match(string s);
}
public class CucumberExpressions.RegularExpression : object {
    [CompilerGeneratedAttribute]
private Regex <Regex>k__BackingField;
    public Regex Regex { get; }
    public string Source { get; }
    public RegularExpression(Regex expressionRegexp);
    [CompilerGeneratedAttribute]
public virtual Regex get_Regex();
    public virtual string get_Source();
}
public class CucumberExpressions.UndefinedParameterTypeException : CucumberExpressionException {
    [CompilerGeneratedAttribute]
private string <UndefinedParameterTypeName>k__BackingField;
    public string UndefinedParameterTypeName { get; }
    public UndefinedParameterTypeException(string message, string undefinedParameterTypeName);
    [CompilerGeneratedAttribute]
public string get_UndefinedParameterTypeName();
    internal static CucumberExpressionException CreateUndefinedParameterType(Node node, string expression, string undefinedParameterTypeName);
}
