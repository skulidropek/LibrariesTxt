public class Microsoft.Build.Framework.AnyEventHandler : MulticastDelegate {
    public AnyEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BuildEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BuildEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.BuildEngineResult : ValueType {
    private bool buildResult;
    private List`1<IDictionary`2<string, ITaskItem[]>> targetOutputsPerProject;
    public bool Result { get; }
    public IList`1<IDictionary`2<string, ITaskItem[]>> TargetOutputsPerProject { get; }
    public BuildEngineResult(bool result, List`1<IDictionary`2<string, ITaskItem[]>> targetOutputsPerProject);
    public bool get_Result();
    public IList`1<IDictionary`2<string, ITaskItem[]>> get_TargetOutputsPerProject();
}
public class Microsoft.Build.Framework.BuildErrorEventArgs : LazyFormattedBuildEventArgs {
    private string subcategory;
    private string code;
    private string file;
    private string projectFile;
    private int lineNumber;
    private int columnNumber;
    private int endLineNumber;
    private int endColumnNumber;
    public string Subcategory { get; }
    public string Code { get; }
    public string File { get; }
    public string ProjectFile { get; public set; }
    public int LineNumber { get; }
    public int ColumnNumber { get; }
    public int EndLineNumber { get; }
    public int EndColumnNumber { get; }
    public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName);
    public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, DateTime eventTimestamp);
    public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, DateTime eventTimestamp, Object[] messageArgs);
    public string get_Subcategory();
    public string get_Code();
    public string get_File();
    public string get_ProjectFile();
    public void set_ProjectFile(string value);
    public int get_LineNumber();
    public int get_ColumnNumber();
    public int get_EndLineNumber();
    public int get_EndColumnNumber();
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader, int version);
}
public class Microsoft.Build.Framework.BuildErrorEventHandler : MulticastDelegate {
    public BuildErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BuildErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BuildErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class Microsoft.Build.Framework.BuildEventArgs : EventArgs {
    private string message;
    private string helpKeyword;
    private string senderName;
    private DateTime timestamp;
    private Nullable`1<DateTime> _localTimestamp;
    private int threadId;
    [OptionalFieldAttribute]
private BuildEventContext buildEventContext;
    public DateTime Timestamp { get; }
    public int ThreadId { get; }
    public string Message { get; protected set; }
    public string HelpKeyword { get; }
    public string SenderName { get; }
    public BuildEventContext BuildEventContext { get; public set; }
    protected BuildEventArgs(string message, string helpKeyword, string senderName);
    protected BuildEventArgs(string message, string helpKeyword, string senderName, DateTime eventTimestamp);
    public DateTime get_Timestamp();
    public int get_ThreadId();
    public virtual string get_Message();
    protected virtual void set_Message(string value);
    public string get_HelpKeyword();
    public string get_SenderName();
    public BuildEventContext get_BuildEventContext();
    public void set_BuildEventContext(BuildEventContext value);
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader, int version);
    [OnDeserializingAttribute]
private void SetBuildEventContextDefaultBeforeSerialization(StreamingContext sc);
    [OnDeserializedAttribute]
private void SetBuildEventContextDefaultAfterSerialization(StreamingContext sc);
}
public class Microsoft.Build.Framework.BuildEventContext : object {
    private int _nodeId;
    private int _targetId;
    private int _projectContextId;
    private int _taskId;
    private int _projectInstanceId;
    private int _submissionId;
    private int _evaluationId;
    public static int InvalidProjectContextId;
    public static int InvalidTaskId;
    public static int InvalidTargetId;
    public static int InvalidNodeId;
    public static int InvalidProjectInstanceId;
    public static int InvalidSubmissionId;
    public static int InvalidEvaluationId;
    public static BuildEventContext Invalid { get; }
    public int EvaluationId { get; }
    public int NodeId { get; }
    public int TargetId { get; }
    public int ProjectContextId { get; }
    public int TaskId { get; }
    public int ProjectInstanceId { get; }
    public int SubmissionId { get; }
    public long BuildRequestId { get; }
    public BuildEventContext(int nodeId, int targetId, int projectContextId, int taskId);
    public BuildEventContext(int nodeId, int projectInstanceId, int projectContextId, int targetId, int taskId);
    public BuildEventContext(int submissionId, int nodeId, int projectInstanceId, int projectContextId, int targetId, int taskId);
    public BuildEventContext(int submissionId, int nodeId, int evaluationId, int projectInstanceId, int projectContextId, int targetId, int taskId);
    public static BuildEventContext get_Invalid();
    public int get_EvaluationId();
    public int get_NodeId();
    public int get_TargetId();
    public int get_ProjectContextId();
    public int get_TaskId();
    public int get_ProjectInstanceId();
    public int get_SubmissionId();
    public long get_BuildRequestId();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(BuildEventContext left, BuildEventContext right);
    public static bool op_Inequality(BuildEventContext left, BuildEventContext right);
    private bool InternalEquals(BuildEventContext buildEventContext);
}
public class Microsoft.Build.Framework.BuildFinishedEventArgs : BuildStatusEventArgs {
    private bool succeeded;
    public bool Succeeded { get; }
    public BuildFinishedEventArgs(string message, string helpKeyword, bool succeeded);
    public BuildFinishedEventArgs(string message, string helpKeyword, bool succeeded, DateTime eventTimestamp);
    public BuildFinishedEventArgs(string message, string helpKeyword, bool succeeded, DateTime eventTimestamp, Object[] messageArgs);
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader, int version);
    public bool get_Succeeded();
}
public class Microsoft.Build.Framework.BuildFinishedEventHandler : MulticastDelegate {
    public BuildFinishedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BuildFinishedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BuildFinishedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.BuildMessageEventArgs : LazyFormattedBuildEventArgs {
    private MessageImportance importance;
    [OptionalFieldAttribute]
private string subcategory;
    [OptionalFieldAttribute]
private string code;
    [OptionalFieldAttribute]
private string file;
    [OptionalFieldAttribute]
private string projectFile;
    [OptionalFieldAttribute]
private int lineNumber;
    [OptionalFieldAttribute]
private int columnNumber;
    [OptionalFieldAttribute]
private int endLineNumber;
    [OptionalFieldAttribute]
private int endColumnNumber;
    public MessageImportance Importance { get; }
    public string Subcategory { get; }
    public string Code { get; }
    public string File { get; }
    public int LineNumber { get; }
    public int ColumnNumber { get; }
    public int EndLineNumber { get; }
    public int EndColumnNumber { get; }
    public string ProjectFile { get; public set; }
    public BuildMessageEventArgs(string message, string helpKeyword, string senderName, MessageImportance importance);
    public BuildMessageEventArgs(string message, string helpKeyword, string senderName, MessageImportance importance, DateTime eventTimestamp);
    public BuildMessageEventArgs(string message, string helpKeyword, string senderName, MessageImportance importance, DateTime eventTimestamp, Object[] messageArgs);
    public BuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, MessageImportance importance);
    public BuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, MessageImportance importance, DateTime eventTimestamp);
    public BuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, MessageImportance importance, DateTime eventTimestamp, Object[] messageArgs);
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader, int version);
    public MessageImportance get_Importance();
    public string get_Subcategory();
    public string get_Code();
    public string get_File();
    public int get_LineNumber();
    public int get_ColumnNumber();
    public int get_EndLineNumber();
    public int get_EndColumnNumber();
    public string get_ProjectFile();
    public void set_ProjectFile(string value);
}
public class Microsoft.Build.Framework.BuildMessageEventHandler : MulticastDelegate {
    public BuildMessageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BuildMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BuildMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.BuildStartedEventArgs : BuildStatusEventArgs {
    private IDictionary`2<string, string> environmentOnBuildStart;
    public IDictionary`2<string, string> BuildEnvironment { get; }
    public BuildStartedEventArgs(string message, string helpKeyword);
    public BuildStartedEventArgs(string message, string helpKeyword, IDictionary`2<string, string> environmentOfBuild);
    public BuildStartedEventArgs(string message, string helpKeyword, DateTime eventTimestamp);
    public BuildStartedEventArgs(string message, string helpKeyword, DateTime eventTimestamp, Object[] messageArgs);
    public IDictionary`2<string, string> get_BuildEnvironment();
}
public class Microsoft.Build.Framework.BuildStartedEventHandler : MulticastDelegate {
    public BuildStartedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BuildStartedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BuildStartedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class Microsoft.Build.Framework.BuildStatusEventArgs : LazyFormattedBuildEventArgs {
    protected BuildStatusEventArgs(string message, string helpKeyword, string senderName);
    protected BuildStatusEventArgs(string message, string helpKeyword, string senderName, DateTime eventTimestamp);
    protected BuildStatusEventArgs(string message, string helpKeyword, string senderName, DateTime eventTimestamp, Object[] messageArgs);
}
public class Microsoft.Build.Framework.BuildStatusEventHandler : MulticastDelegate {
    public BuildStatusEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BuildStatusEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BuildStatusEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.BuildWarningEventArgs : LazyFormattedBuildEventArgs {
    private string subcategory;
    private string code;
    private string file;
    private string projectFile;
    private int lineNumber;
    private int columnNumber;
    private int endLineNumber;
    private int endColumnNumber;
    public string Subcategory { get; }
    public string Code { get; }
    public string File { get; }
    public int LineNumber { get; }
    public int ColumnNumber { get; }
    public int EndLineNumber { get; }
    public int EndColumnNumber { get; }
    public string ProjectFile { get; public set; }
    public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName);
    public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, DateTime eventTimestamp);
    public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, DateTime eventTimestamp, Object[] messageArgs);
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader, int version);
    public string get_Subcategory();
    public string get_Code();
    public string get_File();
    public int get_LineNumber();
    public int get_ColumnNumber();
    public int get_EndLineNumber();
    public int get_EndColumnNumber();
    public string get_ProjectFile();
    public void set_ProjectFile(string value);
}
public class Microsoft.Build.Framework.BuildWarningEventHandler : MulticastDelegate {
    public BuildWarningEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BuildWarningEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BuildWarningEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.CriticalBuildMessageEventArgs : BuildMessageEventArgs {
    public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName);
    public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, DateTime eventTimestamp);
    public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, DateTime eventTimestamp, Object[] messageArgs);
}
public abstract class Microsoft.Build.Framework.CustomBuildEventArgs : LazyFormattedBuildEventArgs {
    protected CustomBuildEventArgs(string message, string helpKeyword, string senderName);
    protected CustomBuildEventArgs(string message, string helpKeyword, string senderName, DateTime eventTimestamp);
    protected CustomBuildEventArgs(string message, string helpKeyword, string senderName, DateTime eventTimestamp, Object[] messageArgs);
}
public class Microsoft.Build.Framework.CustomBuildEventHandler : MulticastDelegate {
    public CustomBuildEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CustomBuildEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CustomBuildEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.ExternalProjectFinishedEventArgs : CustomBuildEventArgs {
    private string projectFile;
    private bool succeeded;
    public string ProjectFile { get; }
    public bool Succeeded { get; }
    public ExternalProjectFinishedEventArgs(string message, string helpKeyword, string senderName, string projectFile, bool succeeded);
    public ExternalProjectFinishedEventArgs(string message, string helpKeyword, string senderName, string projectFile, bool succeeded, DateTime eventTimestamp);
    public string get_ProjectFile();
    public bool get_Succeeded();
}
public class Microsoft.Build.Framework.ExternalProjectStartedEventArgs : CustomBuildEventArgs {
    private string projectFile;
    private string targetNames;
    public string ProjectFile { get; }
    public string TargetNames { get; }
    public ExternalProjectStartedEventArgs(string message, string helpKeyword, string senderName, string projectFile, string targetNames);
    public ExternalProjectStartedEventArgs(string message, string helpKeyword, string senderName, string projectFile, string targetNames, DateTime eventTimestamp);
    public string get_ProjectFile();
    public string get_TargetNames();
}
public interface Microsoft.Build.Framework.IBuildEngine {
    public bool ContinueOnError { get; }
    public int LineNumberOfTaskNode { get; }
    public int ColumnNumberOfTaskNode { get; }
    public string ProjectFileOfTaskNode { get; }
    public abstract virtual void LogErrorEvent(BuildErrorEventArgs e);
    public abstract virtual void LogWarningEvent(BuildWarningEventArgs e);
    public abstract virtual void LogMessageEvent(BuildMessageEventArgs e);
    public abstract virtual void LogCustomEvent(CustomBuildEventArgs e);
    public abstract virtual bool get_ContinueOnError();
    public abstract virtual int get_LineNumberOfTaskNode();
    public abstract virtual int get_ColumnNumberOfTaskNode();
    public abstract virtual string get_ProjectFileOfTaskNode();
    public abstract virtual bool BuildProjectFile(string projectFileName, String[] targetNames, IDictionary globalProperties, IDictionary targetOutputs);
}
public interface Microsoft.Build.Framework.IBuildEngine2 {
    public bool IsRunningMultipleNodes { get; }
    public abstract virtual bool get_IsRunningMultipleNodes();
    public abstract virtual bool BuildProjectFile(string projectFileName, String[] targetNames, IDictionary globalProperties, IDictionary targetOutputs, string toolsVersion);
    public abstract virtual bool BuildProjectFilesInParallel(String[] projectFileNames, String[] targetNames, IDictionary[] globalProperties, IDictionary[] targetOutputsPerProject, String[] toolsVersion, bool useResultsCache, bool unloadProjectsOnCompletion);
}
public interface Microsoft.Build.Framework.IBuildEngine3 {
    public abstract virtual BuildEngineResult BuildProjectFilesInParallel(String[] projectFileNames, String[] targetNames, IDictionary[] globalProperties, IList`1[] removeGlobalProperties, String[] toolsVersion, bool returnTargetOutputs);
    public abstract virtual void Yield();
    public abstract virtual void Reacquire();
}
public interface Microsoft.Build.Framework.IBuildEngine4 {
    public abstract virtual void RegisterTaskObject(object key, object obj, RegisteredTaskObjectLifetime lifetime, bool allowEarlyCollection);
    public abstract virtual object GetRegisteredTaskObject(object key, RegisteredTaskObjectLifetime lifetime);
    public abstract virtual object UnregisterTaskObject(object key, RegisteredTaskObjectLifetime lifetime);
}
public interface Microsoft.Build.Framework.IBuildEngine5 {
    public abstract virtual void LogTelemetry(string eventName, IDictionary`2<string, string> properties);
}
public interface Microsoft.Build.Framework.ICancelableTask {
    public abstract virtual void Cancel();
}
public interface Microsoft.Build.Framework.IEventRedirector {
    public abstract virtual void ForwardEvent(BuildEventArgs buildEvent);
}
public interface Microsoft.Build.Framework.IEventSource {
    [CompilerGeneratedAttribute]
public abstract virtual void add_MessageRaised(BuildMessageEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MessageRaised(BuildMessageEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ErrorRaised(BuildErrorEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ErrorRaised(BuildErrorEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WarningRaised(BuildWarningEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WarningRaised(BuildWarningEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BuildStarted(BuildStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BuildStarted(BuildStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BuildFinished(BuildFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BuildFinished(BuildFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProjectStarted(ProjectStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProjectStarted(ProjectStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProjectFinished(ProjectFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProjectFinished(ProjectFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TargetStarted(TargetStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TargetStarted(TargetStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TargetFinished(TargetFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TargetFinished(TargetFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TaskStarted(TaskStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TaskStarted(TaskStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TaskFinished(TaskFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TaskFinished(TaskFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CustomEventRaised(CustomBuildEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CustomEventRaised(CustomBuildEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StatusEventRaised(BuildStatusEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StatusEventRaised(BuildStatusEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AnyEventRaised(AnyEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AnyEventRaised(AnyEventHandler value);
}
public interface Microsoft.Build.Framework.IEventSource2 {
    [CompilerGeneratedAttribute]
public abstract virtual void add_TelemetryLogged(TelemetryEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TelemetryLogged(TelemetryEventHandler value);
}
public interface Microsoft.Build.Framework.IEventSource3 {
    public abstract virtual void IncludeEvaluationMetaprojects();
    public abstract virtual void IncludeEvaluationProfiles();
    public abstract virtual void IncludeTaskInputs();
}
public interface Microsoft.Build.Framework.IForwardingLogger {
    public IEventRedirector BuildEventRedirector { get; public set; }
    public int NodeId { get; public set; }
    public abstract virtual IEventRedirector get_BuildEventRedirector();
    public abstract virtual void set_BuildEventRedirector(IEventRedirector value);
    public abstract virtual int get_NodeId();
    public abstract virtual void set_NodeId(int value);
}
public interface Microsoft.Build.Framework.IGeneratedTask {
    public abstract virtual void SetPropertyValue(TaskPropertyInfo property, object value);
    public abstract virtual object GetPropertyValue(TaskPropertyInfo property);
}
[ComVisibleAttribute("True")]
public interface Microsoft.Build.Framework.ILogger {
    public LoggerVerbosity Verbosity { get; public set; }
    public string Parameters { get; public set; }
    public abstract virtual LoggerVerbosity get_Verbosity();
    public abstract virtual void set_Verbosity(LoggerVerbosity value);
    public abstract virtual string get_Parameters();
    public abstract virtual void set_Parameters(string value);
    public abstract virtual void Initialize(IEventSource eventSource);
    public abstract virtual void Shutdown();
}
[ComVisibleAttribute("True")]
public interface Microsoft.Build.Framework.INodeLogger {
    public abstract virtual void Initialize(IEventSource eventSource, int nodeCount);
}
public interface Microsoft.Build.Framework.IProjectElement {
    public string ElementName { get; }
    public string OuterElement { get; }
    public abstract virtual string get_ElementName();
    public abstract virtual string get_OuterElement();
}
public interface Microsoft.Build.Framework.ITask {
    public IBuildEngine BuildEngine { get; public set; }
    public ITaskHost HostObject { get; public set; }
    public abstract virtual IBuildEngine get_BuildEngine();
    public abstract virtual void set_BuildEngine(IBuildEngine value);
    public abstract virtual ITaskHost get_HostObject();
    public abstract virtual void set_HostObject(ITaskHost value);
    public abstract virtual bool Execute();
}
public interface Microsoft.Build.Framework.ITaskFactory {
    public string FactoryName { get; }
    public Type TaskType { get; }
    public abstract virtual string get_FactoryName();
    public abstract virtual Type get_TaskType();
    public abstract virtual bool Initialize(string taskName, IDictionary`2<string, TaskPropertyInfo> parameterGroup, string taskBody, IBuildEngine taskFactoryLoggingHost);
    public abstract virtual TaskPropertyInfo[] GetTaskParameters();
    public abstract virtual ITask CreateTask(IBuildEngine taskFactoryLoggingHost);
    public abstract virtual void CleanupTask(ITask task);
}
public interface Microsoft.Build.Framework.ITaskFactory2 {
    public abstract virtual bool Initialize(string taskName, IDictionary`2<string, string> factoryIdentityParameters, IDictionary`2<string, TaskPropertyInfo> parameterGroup, string taskBody, IBuildEngine taskFactoryLoggingHost);
    public abstract virtual ITask CreateTask(IBuildEngine taskFactoryLoggingHost, IDictionary`2<string, string> taskIdentityParameters);
}
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("True")]
[GuidAttribute("9049A481-D0E9-414f-8F92-D4F67A0359A6")]
public interface Microsoft.Build.Framework.ITaskHost {
}
[ComVisibleAttribute("True")]
[GuidAttribute("8661674F-2148-4F71-A92A-49875511C528")]
public interface Microsoft.Build.Framework.ITaskItem {
    public string ItemSpec { get; public set; }
    public ICollection MetadataNames { get; }
    public int MetadataCount { get; }
    public abstract virtual string get_ItemSpec();
    public abstract virtual void set_ItemSpec(string value);
    public abstract virtual ICollection get_MetadataNames();
    public abstract virtual int get_MetadataCount();
    public abstract virtual string GetMetadata(string metadataName);
    public abstract virtual void SetMetadata(string metadataName, string metadataValue);
    public abstract virtual void RemoveMetadata(string metadataName);
    public abstract virtual void CopyMetadataTo(ITaskItem destinationItem);
    public abstract virtual IDictionary CloneCustomMetadata();
}
[ComVisibleAttribute("True")]
[GuidAttribute("ac6d5a59-f877-461b-88e3-b2f06fce0cb9")]
public interface Microsoft.Build.Framework.ITaskItem2 {
    public string EvaluatedIncludeEscaped { get; public set; }
    public abstract virtual string get_EvaluatedIncludeEscaped();
    public abstract virtual void set_EvaluatedIncludeEscaped(string value);
    public abstract virtual string GetMetadataValueEscaped(string metadataName);
    public abstract virtual void SetMetadataValueLiteral(string metadataName, string metadataValue);
    public abstract virtual IDictionary CloneCustomMetadataEscaped();
}
public class Microsoft.Build.Framework.LazyFormattedBuildEventArgs : BuildEventArgs {
    private Object[] arguments;
    private string originalCultureName;
    private CultureInfo originalCultureInfo;
    private object locker;
    public string Message { get; }
    public LazyFormattedBuildEventArgs(string message, string helpKeyword, string senderName);
    public LazyFormattedBuildEventArgs(string message, string helpKeyword, string senderName, DateTime eventTimestamp, Object[] messageArgs);
    public virtual string get_Message();
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader, int version);
    private static string FormatString(CultureInfo culture, string unformatted, Object[] args);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
}
[AttributeUsageAttribute("4")]
public class Microsoft.Build.Framework.LoadInSeparateAppDomainAttribute : Attribute {
}
public class Microsoft.Build.Framework.LoggerException : Exception {
    private string errorCode;
    private string helpKeyword;
    public string ErrorCode { get; }
    public string HelpKeyword { get; }
    public LoggerException(string message);
    public LoggerException(string message, Exception innerException);
    public LoggerException(string message, Exception innerException, string errorCode, string helpKeyword);
    protected LoggerException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_ErrorCode();
    public string get_HelpKeyword();
}
[ComVisibleAttribute("True")]
public enum Microsoft.Build.Framework.LoggerVerbosity : Enum {
    public int value__;
    public static LoggerVerbosity Quiet;
    public static LoggerVerbosity Minimal;
    public static LoggerVerbosity Normal;
    public static LoggerVerbosity Detailed;
    public static LoggerVerbosity Diagnostic;
}
public enum Microsoft.Build.Framework.MessageImportance : Enum {
    public int value__;
    public static MessageImportance High;
    public static MessageImportance Normal;
    public static MessageImportance Low;
}
public class Microsoft.Build.Framework.MetaprojectGeneratedEventArgs : BuildMessageEventArgs {
    public string metaprojectXml;
    public MetaprojectGeneratedEventArgs(string metaprojectXml, string metaprojectPath, string message);
}
[AttributeUsageAttribute("128")]
public class Microsoft.Build.Framework.OutputAttribute : Attribute {
}
internal static class Microsoft.Build.Framework.Profiler.EvaluationIdProvider : object {
    private static long _sAssignedId;
    private static long ProcessId;
    private static EvaluationIdProvider();
    public static long GetNextId();
}
public class Microsoft.Build.Framework.Profiler.EvaluationLocation : ValueType {
    private static Dictionary`2<EvaluationPass, string> PassDefaultDescription;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private EvaluationPass <EvaluationPass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EvaluationPassDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ElementDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private EvaluationLocationKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private static EvaluationLocation <EmptyLocation>k__BackingField;
    public long Id { get; }
    public Nullable`1<long> ParentId { get; }
    public EvaluationPass EvaluationPass { get; }
    public string EvaluationPassDescription { get; }
    public string File { get; }
    public Nullable`1<int> Line { get; }
    public string ElementName { get; }
    public string ElementDescription { get; }
    public EvaluationLocationKind Kind { get; }
    public bool IsEvaluationPass { get; }
    public static EvaluationLocation EmptyLocation { get; }
    public EvaluationLocation(long id, Nullable`1<long> parentId, EvaluationPass evaluationPass, string evaluationPassDescription, string file, Nullable`1<int> line, string elementName, string elementDescription, EvaluationLocationKind kind);
    public EvaluationLocation(Nullable`1<long> parentId, EvaluationPass evaluationPass, string evaluationPassDescription, string file, Nullable`1<int> line, string elementName, string elementDescription, EvaluationLocationKind kind);
    public EvaluationLocation(EvaluationPass evaluationPass, string evaluationPassDescription, string file, Nullable`1<int> line, string elementName, string elementDescription, EvaluationLocationKind kind);
    private static EvaluationLocation();
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ParentId();
    [CompilerGeneratedAttribute]
public EvaluationPass get_EvaluationPass();
    [CompilerGeneratedAttribute]
public string get_EvaluationPassDescription();
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Line();
    [CompilerGeneratedAttribute]
public string get_ElementName();
    [CompilerGeneratedAttribute]
public string get_ElementDescription();
    [CompilerGeneratedAttribute]
public EvaluationLocationKind get_Kind();
    public bool get_IsEvaluationPass();
    public static EvaluationLocation CreateLocationForCondition(Nullable`1<long> parentId, EvaluationPass evaluationPass, string evaluationDescription, string file, Nullable`1<int> line, string condition);
    public static EvaluationLocation CreateLocationForProject(Nullable`1<long> parentId, EvaluationPass evaluationPass, string evaluationDescription, string file, Nullable`1<int> line, IProjectElement element);
    public static EvaluationLocation CreateLocationForGlob(Nullable`1<long> parentId, EvaluationPass evaluationPass, string evaluationDescription, string file, Nullable`1<int> line, string globDescription);
    public static EvaluationLocation CreateLocationForAggregatedGlob();
    [CompilerGeneratedAttribute]
public static EvaluationLocation get_EmptyLocation();
    public EvaluationLocation WithEvaluationPass(EvaluationPass evaluationPass, string passDescription);
    public EvaluationLocation WithParentId(Nullable`1<long> parentId);
    public EvaluationLocation WithFile(string file);
    public EvaluationLocation WithFileLineAndElement(string file, Nullable`1<int> line, IProjectElement element);
    public EvaluationLocation WithFileLineAndCondition(string file, Nullable`1<int> line, string condition);
    public EvaluationLocation WithGlob(string globDescription);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
    private static EvaluationLocation CreateEmptyLocation();
}
public enum Microsoft.Build.Framework.Profiler.EvaluationLocationKind : Enum {
    public byte value__;
    public static EvaluationLocationKind Element;
    public static EvaluationLocationKind Condition;
    public static EvaluationLocationKind Glob;
}
public enum Microsoft.Build.Framework.Profiler.EvaluationPass : Enum {
    public byte value__;
    public static EvaluationPass TotalEvaluation;
    public static EvaluationPass TotalGlobbing;
    public static EvaluationPass InitialProperties;
    public static EvaluationPass Properties;
    public static EvaluationPass ItemDefinitionGroups;
    public static EvaluationPass Items;
    public static EvaluationPass LazyItems;
    public static EvaluationPass UsingTasks;
    public static EvaluationPass Targets;
}
public class Microsoft.Build.Framework.Profiler.ProfiledLocation : ValueType {
    [CompilerGeneratedAttribute]
private TimeSpan <InclusiveTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ExclusiveTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfHits>k__BackingField;
    public TimeSpan InclusiveTime { get; }
    public TimeSpan ExclusiveTime { get; }
    public int NumberOfHits { get; }
    public ProfiledLocation(TimeSpan inclusiveTime, TimeSpan exclusiveTime, int numberOfHits);
    [CompilerGeneratedAttribute]
public TimeSpan get_InclusiveTime();
    [CompilerGeneratedAttribute]
public TimeSpan get_ExclusiveTime();
    [CompilerGeneratedAttribute]
public int get_NumberOfHits();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Microsoft.Build.Framework.Profiler.ProfilerResult : ValueType {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<EvaluationLocation, ProfiledLocation> <ProfiledLocations>k__BackingField;
    public IReadOnlyDictionary`2<EvaluationLocation, ProfiledLocation> ProfiledLocations { get; }
    public ProfilerResult(IDictionary`2<EvaluationLocation, ProfiledLocation> profiledLocations);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<EvaluationLocation, ProfiledLocation> get_ProfiledLocations();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.Build.Framework.ProjectEvaluationFinishedEventArgs : BuildStatusEventArgs {
    [CompilerGeneratedAttribute]
private string <ProjectFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ProfilerResult> <ProfilerResult>k__BackingField;
    public string ProjectFile { get; public set; }
    public Nullable`1<ProfilerResult> ProfilerResult { get; public set; }
    public ProjectEvaluationFinishedEventArgs(string message, Object[] messageArgs);
    [CompilerGeneratedAttribute]
public string get_ProjectFile();
    [CompilerGeneratedAttribute]
public void set_ProjectFile(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ProfilerResult> get_ProfilerResult();
    [CompilerGeneratedAttribute]
public void set_ProfilerResult(Nullable`1<ProfilerResult> value);
}
public class Microsoft.Build.Framework.ProjectEvaluationStartedEventArgs : BuildStatusEventArgs {
    [CompilerGeneratedAttribute]
private string <ProjectFile>k__BackingField;
    public string ProjectFile { get; public set; }
    public ProjectEvaluationStartedEventArgs(string message, Object[] messageArgs);
    [CompilerGeneratedAttribute]
public string get_ProjectFile();
    [CompilerGeneratedAttribute]
public void set_ProjectFile(string value);
}
public class Microsoft.Build.Framework.ProjectFinishedEventArgs : BuildStatusEventArgs {
    private string projectFile;
    private bool succeeded;
    public string ProjectFile { get; }
    public bool Succeeded { get; }
    public ProjectFinishedEventArgs(string message, string helpKeyword, string projectFile, bool succeeded);
    public ProjectFinishedEventArgs(string message, string helpKeyword, string projectFile, bool succeeded, DateTime eventTimestamp);
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader, int version);
    public string get_ProjectFile();
    public bool get_Succeeded();
}
public class Microsoft.Build.Framework.ProjectFinishedEventHandler : MulticastDelegate {
    public ProjectFinishedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ProjectFinishedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ProjectFinishedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.ProjectImportedEventArgs : BuildMessageEventArgs {
    [CompilerGeneratedAttribute]
private string <UnexpandedProject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImportedProjectFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImportIgnored>k__BackingField;
    public string UnexpandedProject { get; public set; }
    public string ImportedProjectFile { get; public set; }
    public bool ImportIgnored { get; public set; }
    public ProjectImportedEventArgs(int lineNumber, int columnNumber, string message, Object[] messageArgs);
    [CompilerGeneratedAttribute]
public string get_UnexpandedProject();
    [CompilerGeneratedAttribute]
public void set_UnexpandedProject(string value);
    [CompilerGeneratedAttribute]
public string get_ImportedProjectFile();
    [CompilerGeneratedAttribute]
public void set_ImportedProjectFile(string value);
    [CompilerGeneratedAttribute]
public bool get_ImportIgnored();
    [CompilerGeneratedAttribute]
public void set_ImportIgnored(bool value);
}
public class Microsoft.Build.Framework.ProjectStartedEventArgs : BuildStatusEventArgs {
    public static int InvalidProjectId;
    [OptionalFieldAttribute]
private int projectId;
    [OptionalFieldAttribute]
private BuildEventContext parentProjectBuildEventContext;
    private string projectFile;
    private string targetNames;
    [OptionalFieldAttribute]
private IDictionary`2<string, string> globalProperties;
    [OptionalFieldAttribute]
private string toolsVersion;
    private IEnumerable properties;
    private IEnumerable items;
    public int ProjectId { get; }
    public BuildEventContext ParentProjectBuildEventContext { get; }
    public string ProjectFile { get; }
    public string TargetNames { get; }
    public IDictionary`2<string, string> GlobalProperties { get; internal set; }
    public string ToolsVersion { get; internal set; }
    public IEnumerable Properties { get; }
    public IEnumerable Items { get; }
    public ProjectStartedEventArgs(string message, string helpKeyword, string projectFile, string targetNames, IEnumerable properties, IEnumerable items);
    public ProjectStartedEventArgs(int projectId, string message, string helpKeyword, string projectFile, string targetNames, IEnumerable properties, IEnumerable items, BuildEventContext parentBuildEventContext);
    public ProjectStartedEventArgs(int projectId, string message, string helpKeyword, string projectFile, string targetNames, IEnumerable properties, IEnumerable items, BuildEventContext parentBuildEventContext, IDictionary`2<string, string> globalProperties, string toolsVersion);
    public ProjectStartedEventArgs(string message, string helpKeyword, string projectFile, string targetNames, IEnumerable properties, IEnumerable items, DateTime eventTimestamp);
    public ProjectStartedEventArgs(int projectId, string message, string helpKeyword, string projectFile, string targetNames, IEnumerable properties, IEnumerable items, BuildEventContext parentBuildEventContext, DateTime eventTimestamp);
    public int get_ProjectId();
    public BuildEventContext get_ParentProjectBuildEventContext();
    public string get_ProjectFile();
    public string get_TargetNames();
    public IDictionary`2<string, string> get_GlobalProperties();
    internal void set_GlobalProperties(IDictionary`2<string, string> value);
    public string get_ToolsVersion();
    internal void set_ToolsVersion(string value);
    public IEnumerable get_Properties();
    public IEnumerable get_Items();
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader, int version);
    [OnDeserializingAttribute]
private void SetDefaultsBeforeSerialization(StreamingContext sc);
    [OnDeserializedAttribute]
private void SetDefaultsAfterSerialization(StreamingContext sc);
}
public class Microsoft.Build.Framework.ProjectStartedEventHandler : MulticastDelegate {
    public ProjectStartedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ProjectStartedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ProjectStartedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Microsoft.Build.Framework.RegisteredTaskObjectLifetime : Enum {
    public int value__;
    public static RegisteredTaskObjectLifetime Build;
    public static RegisteredTaskObjectLifetime AppDomain;
}
[AttributeUsageAttribute("128")]
public class Microsoft.Build.Framework.RequiredAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class Microsoft.Build.Framework.RequiredRuntimeAttribute : Attribute {
    private string _runtimeVersion;
    public string RuntimeVersion { get; }
    public RequiredRuntimeAttribute(string runtimeVersion);
    public string get_RuntimeVersion();
}
[AttributeUsageAttribute("4")]
public class Microsoft.Build.Framework.RunInMTAAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class Microsoft.Build.Framework.RunInSTAAttribute : Attribute {
}
public abstract class Microsoft.Build.Framework.SdkLogger : object {
    public abstract virtual void LogMessage(string message, MessageImportance messageImportance);
}
public class Microsoft.Build.Framework.SdkReference : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinimumVersion>k__BackingField;
    public string Name { get; }
    public string Version { get; }
    public string MinimumVersion { get; }
    public SdkReference(string name, string version, string minimumVersion);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public string get_MinimumVersion();
    public sealed virtual bool Equals(SdkReference other);
    public static bool TryParse(string sdk, SdkReference& sdkReference);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public abstract class Microsoft.Build.Framework.SdkResolver : object {
    public string Name { get; }
    public int Priority { get; }
    public abstract virtual string get_Name();
    public abstract virtual int get_Priority();
    public abstract virtual SdkResult Resolve(SdkReference sdkReference, SdkResolverContext resolverContext, SdkResultFactory factory);
}
public abstract class Microsoft.Build.Framework.SdkResolverContext : object {
    [CompilerGeneratedAttribute]
private SdkLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SolutionFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <MSBuildVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private object <State>k__BackingField;
    public SdkLogger Logger { get; protected set; }
    public string ProjectFilePath { get; protected set; }
    public string SolutionFilePath { get; protected set; }
    public Version MSBuildVersion { get; protected set; }
    public object State { get; public set; }
    [CompilerGeneratedAttribute]
public virtual SdkLogger get_Logger();
    [CompilerGeneratedAttribute]
protected virtual void set_Logger(SdkLogger value);
    [CompilerGeneratedAttribute]
public virtual string get_ProjectFilePath();
    [CompilerGeneratedAttribute]
protected virtual void set_ProjectFilePath(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SolutionFilePath();
    [CompilerGeneratedAttribute]
protected virtual void set_SolutionFilePath(string value);
    [CompilerGeneratedAttribute]
public virtual Version get_MSBuildVersion();
    [CompilerGeneratedAttribute]
protected virtual void set_MSBuildVersion(Version value);
    [CompilerGeneratedAttribute]
public virtual object get_State();
    [CompilerGeneratedAttribute]
public virtual void set_State(object value);
}
public abstract class Microsoft.Build.Framework.SdkResult : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private SdkReference <SdkReference>k__BackingField;
    public bool Success { get; protected set; }
    public string Path { get; protected set; }
    public string Version { get; protected set; }
    public SdkReference SdkReference { get; protected set; }
    [CompilerGeneratedAttribute]
public virtual bool get_Success();
    [CompilerGeneratedAttribute]
protected virtual void set_Success(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_Path();
    [CompilerGeneratedAttribute]
protected virtual void set_Path(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Version();
    [CompilerGeneratedAttribute]
protected virtual void set_Version(string value);
    [CompilerGeneratedAttribute]
public virtual SdkReference get_SdkReference();
    [CompilerGeneratedAttribute]
protected virtual void set_SdkReference(SdkReference value);
}
public abstract class Microsoft.Build.Framework.SdkResultFactory : object {
    public abstract virtual SdkResult IndicateSuccess(string path, string version, IEnumerable`1<string> warnings);
    public abstract virtual SdkResult IndicateFailure(IEnumerable`1<string> errors, IEnumerable`1<string> warnings);
}
public enum Microsoft.Build.Framework.TargetBuiltReason : Enum {
    public int value__;
    public static TargetBuiltReason None;
    public static TargetBuiltReason BeforeTargets;
    public static TargetBuiltReason DependsOn;
    public static TargetBuiltReason AfterTargets;
}
public class Microsoft.Build.Framework.TargetFinishedEventArgs : BuildStatusEventArgs {
    private string projectFile;
    private string targetFile;
    private string targetName;
    private bool succeeded;
    private IEnumerable targetOutputs;
    public string TargetName { get; }
    public bool Succeeded { get; }
    public string ProjectFile { get; }
    public string TargetFile { get; }
    public IEnumerable TargetOutputs { get; public set; }
    public TargetFinishedEventArgs(string message, string helpKeyword, string targetName, string projectFile, string targetFile, bool succeeded);
    public TargetFinishedEventArgs(string message, string helpKeyword, string targetName, string projectFile, string targetFile, bool succeeded, IEnumerable targetOutputs);
    public TargetFinishedEventArgs(string message, string helpKeyword, string targetName, string projectFile, string targetFile, bool succeeded, DateTime eventTimestamp, IEnumerable targetOutputs);
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader, int version);
    public string get_TargetName();
    public bool get_Succeeded();
    public string get_ProjectFile();
    public string get_TargetFile();
    public IEnumerable get_TargetOutputs();
    public void set_TargetOutputs(IEnumerable value);
}
public class Microsoft.Build.Framework.TargetFinishedEventHandler : MulticastDelegate {
    public TargetFinishedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TargetFinishedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TargetFinishedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.TargetSkippedEventArgs : BuildMessageEventArgs {
    [CompilerGeneratedAttribute]
private string <TargetName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFile>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetBuiltReason <BuildReason>k__BackingField;
    public string TargetName { get; public set; }
    public string ParentTarget { get; public set; }
    public string TargetFile { get; public set; }
    public TargetBuiltReason BuildReason { get; public set; }
    public TargetSkippedEventArgs(string message, Object[] messageArgs);
    [CompilerGeneratedAttribute]
public string get_TargetName();
    [CompilerGeneratedAttribute]
public void set_TargetName(string value);
    [CompilerGeneratedAttribute]
public string get_ParentTarget();
    [CompilerGeneratedAttribute]
public void set_ParentTarget(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFile();
    [CompilerGeneratedAttribute]
public void set_TargetFile(string value);
    [CompilerGeneratedAttribute]
public TargetBuiltReason get_BuildReason();
    [CompilerGeneratedAttribute]
public void set_BuildReason(TargetBuiltReason value);
}
public class Microsoft.Build.Framework.TargetStartedEventArgs : BuildStatusEventArgs {
    private string targetName;
    private string projectFile;
    private string targetFile;
    private string parentTarget;
    private TargetBuiltReason buildReason;
    public string TargetName { get; }
    public string ParentTarget { get; }
    public string ProjectFile { get; }
    public string TargetFile { get; }
    public TargetBuiltReason BuildReason { get; }
    public TargetStartedEventArgs(string message, string helpKeyword, string targetName, string projectFile, string targetFile);
    public TargetStartedEventArgs(string message, string helpKeyword, string targetName, string projectFile, string targetFile, string parentTarget, DateTime eventTimestamp);
    public TargetStartedEventArgs(string message, string helpKeyword, string targetName, string projectFile, string targetFile, string parentTarget, TargetBuiltReason buildReason, DateTime eventTimestamp);
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader, int version);
    public string get_TargetName();
    public string get_ParentTarget();
    public string get_ProjectFile();
    public string get_TargetFile();
    public TargetBuiltReason get_BuildReason();
}
public class Microsoft.Build.Framework.TargetStartedEventHandler : MulticastDelegate {
    public TargetStartedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TargetStartedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TargetStartedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.TaskCommandLineEventArgs : BuildMessageEventArgs {
    public string CommandLine { get; }
    public string TaskName { get; }
    public TaskCommandLineEventArgs(string commandLine, string taskName, MessageImportance importance);
    public TaskCommandLineEventArgs(string commandLine, string taskName, MessageImportance importance, DateTime eventTimestamp);
    public string get_CommandLine();
    public string get_TaskName();
}
public class Microsoft.Build.Framework.TaskFinishedEventArgs : BuildStatusEventArgs {
    private string taskName;
    private string projectFile;
    private string taskFile;
    private bool succeeded;
    public string TaskName { get; }
    public bool Succeeded { get; }
    public string ProjectFile { get; }
    public string TaskFile { get; }
    public TaskFinishedEventArgs(string message, string helpKeyword, string projectFile, string taskFile, string taskName, bool succeeded);
    public TaskFinishedEventArgs(string message, string helpKeyword, string projectFile, string taskFile, string taskName, bool succeeded, DateTime eventTimestamp);
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader, int version);
    public string get_TaskName();
    public bool get_Succeeded();
    public string get_ProjectFile();
    public string get_TaskFile();
}
public class Microsoft.Build.Framework.TaskFinishedEventHandler : MulticastDelegate {
    public TaskFinishedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TaskFinishedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TaskFinishedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.TaskPropertyInfo : object {
    [CompilerGeneratedAttribute]
private Type <PropertyType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    public Type PropertyType { get; private set; }
    public string Name { get; private set; }
    public bool Output { get; private set; }
    public bool Required { get; private set; }
    public TaskPropertyInfo(string name, Type typeOfParameter, bool output, bool required);
    [CompilerGeneratedAttribute]
public Type get_PropertyType();
    [CompilerGeneratedAttribute]
private void set_PropertyType(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Output();
    [CompilerGeneratedAttribute]
private void set_Output(bool value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
private void set_Required(bool value);
}
public class Microsoft.Build.Framework.TaskStartedEventArgs : BuildStatusEventArgs {
    private string taskName;
    private string projectFile;
    private string taskFile;
    public string TaskName { get; }
    public string ProjectFile { get; }
    public string TaskFile { get; }
    public TaskStartedEventArgs(string message, string helpKeyword, string projectFile, string taskFile, string taskName);
    public TaskStartedEventArgs(string message, string helpKeyword, string projectFile, string taskFile, string taskName, DateTime eventTimestamp);
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader, int version);
    public string get_TaskName();
    public string get_ProjectFile();
    public string get_TaskFile();
}
public class Microsoft.Build.Framework.TaskStartedEventHandler : MulticastDelegate {
    public TaskStartedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TaskStartedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TaskStartedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.TelemetryEventArgs : BuildEventArgs {
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    public string EventName { get; public set; }
    public IDictionary`2<string, string> Properties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
public void set_EventName(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, string> value);
}
public class Microsoft.Build.Framework.TelemetryEventHandler : MulticastDelegate {
    public TelemetryEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TelemetryEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TelemetryEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Microsoft.Build.Framework.TestInfo : object {
    public static bool s_runningTests;
    private static TestInfo();
}
public class Microsoft.Build.Framework.XamlTypes.Argument : object {
    [CompilerGeneratedAttribute]
private string <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Separator>k__BackingField;
    public string Property { get; public set; }
    public bool IsRequired { get; public set; }
    public string Separator { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(bool value);
    [CompilerGeneratedAttribute]
public string get_Separator();
    [CompilerGeneratedAttribute]
public void set_Separator(string value);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
}
[ContentPropertyAttribute("Arguments")]
public abstract class Microsoft.Build.Framework.XamlTypes.BaseProperty : object {
    private string _displayName;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <F1Keyword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpFile>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HelpContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subcategory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultipleValuesAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Switch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SwitchPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Separator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeInCommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private DataSource <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NameValuePair> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Argument> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ValueEditor> <ValueEditors>k__BackingField;
    [CompilerGeneratedAttribute]
private Rule <ContainingRule>k__BackingField;
    public string Name { get; public set; }
    [LocalizableAttribute("True")]
public string DisplayName { get; public set; }
    [LocalizableAttribute("True")]
public string Description { get; public set; }
    [LocalizableAttribute("False")]
public string F1Keyword { get; public set; }
    [LocalizableAttribute("False")]
public string HelpUrl { get; public set; }
    [LocalizableAttribute("False")]
public string HelpFile { get; public set; }
    public int HelpContext { get; public set; }
    public string Category { get; public set; }
    public string Subcategory { get; public set; }
    public bool ReadOnly { get; public set; }
    public bool MultipleValuesAllowed { get; public set; }
    public string Switch { get; public set; }
    public string SwitchPrefix { get; public set; }
    public string Separator { get; public set; }
    public bool Visible { get; public set; }
    public bool IncludeInCommandLine { get; public set; }
    public bool IsRequired { get; public set; }
    [LocalizableAttribute("True")]
public string Default { get; public set; }
    public DataSource DataSource { get; public set; }
    public List`1<NameValuePair> Metadata { get; public set; }
    public List`1<Argument> Arguments { get; public set; }
    public List`1<ValueEditor> ValueEditors { get; public set; }
    public Rule ContainingRule { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_F1Keyword();
    [CompilerGeneratedAttribute]
public void set_F1Keyword(string value);
    [CompilerGeneratedAttribute]
public string get_HelpUrl();
    [CompilerGeneratedAttribute]
public void set_HelpUrl(string value);
    [CompilerGeneratedAttribute]
public string get_HelpFile();
    [CompilerGeneratedAttribute]
public void set_HelpFile(string value);
    [CompilerGeneratedAttribute]
public int get_HelpContext();
    [CompilerGeneratedAttribute]
public void set_HelpContext(int value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_Subcategory();
    [CompilerGeneratedAttribute]
public void set_Subcategory(string value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_MultipleValuesAllowed();
    [CompilerGeneratedAttribute]
public void set_MultipleValuesAllowed(bool value);
    [CompilerGeneratedAttribute]
public string get_Switch();
    [CompilerGeneratedAttribute]
public void set_Switch(string value);
    [CompilerGeneratedAttribute]
public string get_SwitchPrefix();
    [CompilerGeneratedAttribute]
public void set_SwitchPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_Separator();
    [CompilerGeneratedAttribute]
public void set_Separator(string value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeInCommandLine();
    [CompilerGeneratedAttribute]
public void set_IncludeInCommandLine(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(bool value);
    [CompilerGeneratedAttribute]
public string get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(string value);
    [CompilerGeneratedAttribute]
public DataSource get_DataSource();
    [CompilerGeneratedAttribute]
public void set_DataSource(DataSource value);
    [CompilerGeneratedAttribute]
public List`1<NameValuePair> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(List`1<NameValuePair> value);
    [CompilerGeneratedAttribute]
public List`1<Argument> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(List`1<Argument> value);
    [CompilerGeneratedAttribute]
public List`1<ValueEditor> get_ValueEditors();
    [CompilerGeneratedAttribute]
public void set_ValueEditors(List`1<ValueEditor> value);
    [CompilerGeneratedAttribute]
public Rule get_ContainingRule();
    [CompilerGeneratedAttribute]
internal void set_ContainingRule(Rule value);
    public virtual void BeginInit();
    public virtual void EndInit();
}
public class Microsoft.Build.Framework.XamlTypes.BoolProperty : BaseProperty {
    [CompilerGeneratedAttribute]
private string <ReverseSwitch>k__BackingField;
    public string ReverseSwitch { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ReverseSwitch();
    [CompilerGeneratedAttribute]
public void set_ReverseSwitch(string value);
}
public class Microsoft.Build.Framework.XamlTypes.Category : CategorySchema {
    private string _displayName;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subtype>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpString>k__BackingField;
    public string Name { get; public set; }
    [LocalizableAttribute("True")]
public string DisplayName { get; public set; }
    [LocalizableAttribute("True")]
public string Description { get; public set; }
    public string Subtype { get; public set; }
    [LocalizableAttribute("True")]
public string HelpString { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Subtype();
    [CompilerGeneratedAttribute]
public void set_Subtype(string value);
    [CompilerGeneratedAttribute]
public string get_HelpString();
    [CompilerGeneratedAttribute]
public void set_HelpString(string value);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
}
public abstract class Microsoft.Build.Framework.XamlTypes.CategorySchema : object {
}
[ContentPropertyAttribute("Metadata")]
public class Microsoft.Build.Framework.XamlTypes.ContentType : object {
    private Lazy`1<Dictionary`2<string, string>> _metadata;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DefaultContentTypeForItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemGroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NameValuePair> <Metadata>k__BackingField;
    public string Name { get; public set; }
    [LocalizableAttribute("True")]
public string DisplayName { get; public set; }
    public string ItemType { get; public set; }
    public bool DefaultContentTypeForItemType { get; public set; }
    [ObsoleteAttribute("Unused.  Use ItemType property instead.", "True")]
public string ItemGroupName { get; public set; }
    public List`1<NameValuePair> Metadata { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
public void set_ItemType(string value);
    [CompilerGeneratedAttribute]
public bool get_DefaultContentTypeForItemType();
    [CompilerGeneratedAttribute]
public void set_DefaultContentTypeForItemType(bool value);
    [CompilerGeneratedAttribute]
public string get_ItemGroupName();
    [CompilerGeneratedAttribute]
public void set_ItemGroupName(string value);
    [CompilerGeneratedAttribute]
public List`1<NameValuePair> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(List`1<NameValuePair> value);
    public string GetMetadata(string metadataName);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    [IteratorStateMachineAttribute("Microsoft.Build.Framework.XamlTypes.ContentType/<GetSchemaObjectTypes>d__29")]
public sealed virtual IEnumerable`1<Type> GetSchemaObjectTypes();
    [IteratorStateMachineAttribute("Microsoft.Build.Framework.XamlTypes.ContentType/<GetSchemaObjects>d__30")]
public sealed virtual IEnumerable`1<object> GetSchemaObjects(Type type);
    private Dictionary`2<string, string> InitializeMetadata();
}
public class Microsoft.Build.Framework.XamlTypes.DataSource : object {
    [CompilerGeneratedAttribute]
private string <Persistence>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PersistenceStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PersistedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasConfigurationCondition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSBuildTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultValueSourceLocation <SourceOfDefaultValue>k__BackingField;
    public string Persistence { get; public set; }
    public string PersistenceStyle { get; public set; }
    public string PersistedName { get; public set; }
    public string Label { get; public set; }
    public string ItemType { get; public set; }
    public bool HasConfigurationCondition { get; public set; }
    public string SourceType { get; public set; }
    public string MSBuildTarget { get; public set; }
    public DefaultValueSourceLocation SourceOfDefaultValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Persistence();
    [CompilerGeneratedAttribute]
public void set_Persistence(string value);
    [CompilerGeneratedAttribute]
public string get_PersistenceStyle();
    [CompilerGeneratedAttribute]
public void set_PersistenceStyle(string value);
    [CompilerGeneratedAttribute]
public string get_PersistedName();
    [CompilerGeneratedAttribute]
public void set_PersistedName(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
public void set_ItemType(string value);
    [CompilerGeneratedAttribute]
public bool get_HasConfigurationCondition();
    [CompilerGeneratedAttribute]
public void set_HasConfigurationCondition(bool value);
    [CompilerGeneratedAttribute]
public string get_SourceType();
    [CompilerGeneratedAttribute]
public void set_SourceType(string value);
    [CompilerGeneratedAttribute]
public string get_MSBuildTarget();
    [CompilerGeneratedAttribute]
public void set_MSBuildTarget(string value);
    [CompilerGeneratedAttribute]
public DefaultValueSourceLocation get_SourceOfDefaultValue();
    [CompilerGeneratedAttribute]
public void set_SourceOfDefaultValue(DefaultValueSourceLocation value);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
}
public enum Microsoft.Build.Framework.XamlTypes.DefaultValueSourceLocation : Enum {
    public int value__;
    public static DefaultValueSourceLocation BeforeContext;
    public static DefaultValueSourceLocation AfterContext;
}
public class Microsoft.Build.Framework.XamlTypes.DynamicEnumProperty : BaseProperty {
    [CompilerGeneratedAttribute]
private string <EnumProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NameValuePair> <ProviderSettings>k__BackingField;
    public string EnumProvider { get; public set; }
    public List`1<NameValuePair> ProviderSettings { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EnumProvider();
    [CompilerGeneratedAttribute]
public void set_EnumProvider(string value);
    [CompilerGeneratedAttribute]
public List`1<NameValuePair> get_ProviderSettings();
    [CompilerGeneratedAttribute]
public void set_ProviderSettings(List`1<NameValuePair> value);
}
[ContentPropertyAttribute("AdmissibleValues")]
public class Microsoft.Build.Framework.XamlTypes.EnumProperty : BaseProperty {
    [CompilerGeneratedAttribute]
private List`1<EnumValue> <AdmissibleValues>k__BackingField;
    public List`1<EnumValue> AdmissibleValues { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<EnumValue> get_AdmissibleValues();
    [CompilerGeneratedAttribute]
public void set_AdmissibleValues(List`1<EnumValue> value);
    public virtual void EndInit();
}
[ContentPropertyAttribute("Arguments")]
public class Microsoft.Build.Framework.XamlTypes.EnumValue : object {
    private string _displayName;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Switch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SwitchPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NameValuePair> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Argument> <Arguments>k__BackingField;
    public string Name { get; public set; }
    [LocalizableAttribute("True")]
public string DisplayName { get; public set; }
    [LocalizableAttribute("True")]
public string Description { get; public set; }
    [LocalizableAttribute("True")]
public string HelpString { get; public set; }
    public string Switch { get; public set; }
    public string SwitchPrefix { get; public set; }
    public bool IsDefault { get; public set; }
    public List`1<NameValuePair> Metadata { get; public set; }
    public List`1<Argument> Arguments { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_HelpString();
    [CompilerGeneratedAttribute]
public void set_HelpString(string value);
    [CompilerGeneratedAttribute]
public string get_Switch();
    [CompilerGeneratedAttribute]
public void set_Switch(string value);
    [CompilerGeneratedAttribute]
public string get_SwitchPrefix();
    [CompilerGeneratedAttribute]
public void set_SwitchPrefix(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public void set_IsDefault(bool value);
    [CompilerGeneratedAttribute]
public List`1<NameValuePair> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(List`1<NameValuePair> value);
    [CompilerGeneratedAttribute]
public List`1<Argument> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(List`1<Argument> value);
}
public class Microsoft.Build.Framework.XamlTypes.FileExtension : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public string Name { get; public set; }
    public string ContentType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [IteratorStateMachineAttribute("Microsoft.Build.Framework.XamlTypes.FileExtension/<GetSchemaObjectTypes>d__9")]
public sealed virtual IEnumerable`1<Type> GetSchemaObjectTypes();
    [IteratorStateMachineAttribute("Microsoft.Build.Framework.XamlTypes.FileExtension/<GetSchemaObjects>d__10")]
public sealed virtual IEnumerable`1<object> GetSchemaObjects(Type type);
}
public class Microsoft.Build.Framework.XamlTypes.IntProperty : BaseProperty {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxValue>k__BackingField;
    public Nullable`1<int> MinValue { get; public set; }
    public Nullable`1<int> MaxValue { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinValue();
    [CompilerGeneratedAttribute]
public void set_MinValue(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxValue();
    [CompilerGeneratedAttribute]
public void set_MaxValue(Nullable`1<int> value);
    public virtual void EndInit();
}
public interface Microsoft.Build.Framework.XamlTypes.IProjectSchemaNode {
    public abstract virtual IEnumerable`1<Type> GetSchemaObjectTypes();
    public abstract virtual IEnumerable`1<object> GetSchemaObjects(Type type);
}
public class Microsoft.Build.Framework.XamlTypes.ItemType : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpToDateCheckInput>k__BackingField;
    public string Name { get; public set; }
    [LocalizableAttribute("True")]
public string DisplayName { get; public set; }
    public string DefaultContentType { get; public set; }
    public bool UpToDateCheckInput { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultContentType();
    [CompilerGeneratedAttribute]
public void set_DefaultContentType(string value);
    [CompilerGeneratedAttribute]
public bool get_UpToDateCheckInput();
    [CompilerGeneratedAttribute]
public void set_UpToDateCheckInput(bool value);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    [IteratorStateMachineAttribute("Microsoft.Build.Framework.XamlTypes.ItemType/<GetSchemaObjectTypes>d__19")]
public sealed virtual IEnumerable`1<Type> GetSchemaObjectTypes();
    [IteratorStateMachineAttribute("Microsoft.Build.Framework.XamlTypes.ItemType/<GetSchemaObjects>d__20")]
public sealed virtual IEnumerable`1<object> GetSchemaObjects(Type type);
}
public class Microsoft.Build.Framework.XamlTypes.NameValuePair : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; public set; }
    [LocalizableAttribute("True")]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[ContentPropertyAttribute("Nodes")]
public class Microsoft.Build.Framework.XamlTypes.ProjectSchemaDefinitions : object {
    [CompilerGeneratedAttribute]
private List`1<IProjectSchemaNode> <Nodes>k__BackingField;
    public List`1<IProjectSchemaNode> Nodes { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<IProjectSchemaNode> get_Nodes();
    [CompilerGeneratedAttribute]
public void set_Nodes(List`1<IProjectSchemaNode> value);
    public sealed virtual IEnumerable`1<Type> GetSchemaObjectTypes();
    [IteratorStateMachineAttribute("Microsoft.Build.Framework.XamlTypes.ProjectSchemaDefinitions/<GetSchemaObjects>d__6")]
public sealed virtual IEnumerable`1<object> GetSchemaObjects(Type type);
}
[ContentPropertyAttribute("Properties")]
[DebuggerDisplayAttribute("Rule: {Name}")]
public class Microsoft.Build.Framework.XamlTypes.Rule : RuleSchema {
    private string _displayName;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SwitchPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Separator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private DataSource <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsFileBatching>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowOnlyRuleProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalInputs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Outputs>k__BackingField;
    [CompilerGeneratedAttribute]
private RuleOverrideMode <OverrideMode>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BaseProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Category> <Categories>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PropertyPagesHidden>k__BackingField;
    private object _syncObject;
    private List`1<Category> _evaluatedCategories;
    private OrderedDictionary _categoryNamePropertyListMap;
    private ReadOnlyDictionary`2<string, BaseProperty> _propertiesByNameMap;
    public string Name { get; public set; }
    [LocalizableAttribute("True")]
public string DisplayName { get; public set; }
    public string ToolName { get; public set; }
    [LocalizableAttribute("True")]
public string Description { get; public set; }
    [LocalizableAttribute("True")]
public string HelpString { get; public set; }
    public string SwitchPrefix { get; public set; }
    public string Separator { get; public set; }
    public string PageTemplate { get; public set; }
    public DataSource DataSource { get; public set; }
    public int Order { get; public set; }
    public bool SupportsFileBatching { get; public set; }
    public bool ShowOnlyRuleProperties { get; public set; }
    public string FileExtension { get; public set; }
    public string ExecutionDescription { get; public set; }
    public string CommandLine { get; public set; }
    public string AdditionalInputs { get; public set; }
    public string Outputs { get; public set; }
    public RuleOverrideMode OverrideMode { get; public set; }
    public List`1<BaseProperty> Properties { get; public set; }
    public List`1<Category> Categories { get; public set; }
    public Dictionary`2<string, object> Metadata { get; public set; }
    public bool PropertyPagesHidden { get; public set; }
    public List`1<Category> EvaluatedCategories { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_ToolName();
    [CompilerGeneratedAttribute]
public void set_ToolName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_HelpString();
    [CompilerGeneratedAttribute]
public void set_HelpString(string value);
    [CompilerGeneratedAttribute]
public string get_SwitchPrefix();
    [CompilerGeneratedAttribute]
public void set_SwitchPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_Separator();
    [CompilerGeneratedAttribute]
public void set_Separator(string value);
    [CompilerGeneratedAttribute]
public string get_PageTemplate();
    [CompilerGeneratedAttribute]
public void set_PageTemplate(string value);
    [CompilerGeneratedAttribute]
public DataSource get_DataSource();
    [CompilerGeneratedAttribute]
public void set_DataSource(DataSource value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public bool get_SupportsFileBatching();
    [CompilerGeneratedAttribute]
public void set_SupportsFileBatching(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowOnlyRuleProperties();
    [CompilerGeneratedAttribute]
public void set_ShowOnlyRuleProperties(bool value);
    [CompilerGeneratedAttribute]
public string get_FileExtension();
    [CompilerGeneratedAttribute]
public void set_FileExtension(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionDescription();
    [CompilerGeneratedAttribute]
public void set_ExecutionDescription(string value);
    [CompilerGeneratedAttribute]
public string get_CommandLine();
    [CompilerGeneratedAttribute]
public void set_CommandLine(string value);
    [CompilerGeneratedAttribute]
public string get_AdditionalInputs();
    [CompilerGeneratedAttribute]
public void set_AdditionalInputs(string value);
    [CompilerGeneratedAttribute]
public string get_Outputs();
    [CompilerGeneratedAttribute]
public void set_Outputs(string value);
    [CompilerGeneratedAttribute]
public RuleOverrideMode get_OverrideMode();
    [CompilerGeneratedAttribute]
public void set_OverrideMode(RuleOverrideMode value);
    [CompilerGeneratedAttribute]
public List`1<BaseProperty> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(List`1<BaseProperty> value);
    [CompilerGeneratedAttribute]
public List`1<Category> get_Categories();
    [CompilerGeneratedAttribute]
public void set_Categories(List`1<Category> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public bool get_PropertyPagesHidden();
    [CompilerGeneratedAttribute]
public void set_PropertyPagesHidden(bool value);
    public List`1<Category> get_EvaluatedCategories();
    public OrderedDictionary GetPropertiesByCategory();
    public IList`1<BaseProperty> GetPropertiesInCategory(string categoryName);
    public BaseProperty GetProperty(string propertyName);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    [IteratorStateMachineAttribute("Microsoft.Build.Framework.XamlTypes.Rule/<GetSchemaObjectTypes>d__100")]
public sealed virtual IEnumerable`1<Type> GetSchemaObjectTypes();
    [IteratorStateMachineAttribute("Microsoft.Build.Framework.XamlTypes.Rule/<GetSchemaObjects>d__101")]
public sealed virtual IEnumerable`1<object> GetSchemaObjects(Type type);
    private void Initialize();
    private void CreateCategoryNamePropertyListMap();
}
[ContentPropertyAttribute("Rules")]
public class Microsoft.Build.Framework.XamlTypes.RuleBag : object {
    [CompilerGeneratedAttribute]
private List`1<Rule> <Rules>k__BackingField;
    public List`1<Rule> Rules { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<Rule> get_Rules();
    [CompilerGeneratedAttribute]
public void set_Rules(List`1<Rule> value);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    [IteratorStateMachineAttribute("Microsoft.Build.Framework.XamlTypes.RuleBag/<GetSchemaObjectTypes>d__7")]
public sealed virtual IEnumerable`1<Type> GetSchemaObjectTypes();
    [IteratorStateMachineAttribute("Microsoft.Build.Framework.XamlTypes.RuleBag/<GetSchemaObjects>d__8")]
public sealed virtual IEnumerable`1<object> GetSchemaObjects(Type type);
}
public enum Microsoft.Build.Framework.XamlTypes.RuleOverrideMode : Enum {
    public int value__;
    public static RuleOverrideMode Replace;
    public static RuleOverrideMode Extend;
}
public abstract class Microsoft.Build.Framework.XamlTypes.RuleSchema : object {
}
public class Microsoft.Build.Framework.XamlTypes.StringListProperty : BaseProperty {
    [CompilerGeneratedAttribute]
private string <CommandLineValueSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RendererValueSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subtype>k__BackingField;
    public string CommandLineValueSeparator { get; public set; }
    public string RendererValueSeparator { get; public set; }
    public string Subtype { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CommandLineValueSeparator();
    [CompilerGeneratedAttribute]
public void set_CommandLineValueSeparator(string value);
    [CompilerGeneratedAttribute]
public string get_RendererValueSeparator();
    [CompilerGeneratedAttribute]
public void set_RendererValueSeparator(string value);
    [CompilerGeneratedAttribute]
public string get_Subtype();
    [CompilerGeneratedAttribute]
public void set_Subtype(string value);
}
public class Microsoft.Build.Framework.XamlTypes.StringProperty : BaseProperty {
    [CompilerGeneratedAttribute]
private string <Subtype>k__BackingField;
    public string Subtype { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Subtype();
    [CompilerGeneratedAttribute]
public void set_Subtype(string value);
}
[ContentPropertyAttribute("Metadata")]
public class Microsoft.Build.Framework.XamlTypes.ValueEditor : object {
    private string _displayName;
    [CompilerGeneratedAttribute]
private string <EditorType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NameValuePair> <Metadata>k__BackingField;
    public string EditorType { get; public set; }
    [LocalizableAttribute("True")]
public string DisplayName { get; public set; }
    public List`1<NameValuePair> Metadata { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EditorType();
    [CompilerGeneratedAttribute]
public void set_EditorType(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public List`1<NameValuePair> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(List`1<NameValuePair> value);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
}
[ExtensionAttribute]
internal static class Microsoft.Build.Shared.BinaryWriterExtensions : object {
    [ExtensionAttribute]
public static void WriteOptionalString(BinaryWriter writer, string value);
    [ExtensionAttribute]
public static void WriteTimestamp(BinaryWriter writer, DateTime timestamp);
}
internal static class Microsoft.Build.Shared.ItemMetadataNames : object {
    internal static string fusionName;
    internal static string hintPath;
    internal static string assemblyFolderKey;
    internal static string alias;
    internal static string aliases;
    internal static string parentFile;
    internal static string privateMetadata;
    internal static string copyLocal;
    internal static string isRedistRoot;
    internal static string redist;
    internal static string resolvedFrom;
    internal static string destinationSubDirectory;
    internal static string specificVersion;
    internal static string link;
    internal static string subType;
    internal static string executableExtension;
    internal static string embedInteropTypes;
    internal static string targetPath;
    internal static string dependentUpon;
    internal static string msbuildSourceProjectFile;
    internal static string msbuildSourceTargetName;
    internal static string isPrimary;
    internal static string targetFramework;
    internal static string frameworkDirectory;
    internal static string version;
    internal static string imageRuntime;
    internal static string winMDFile;
    internal static string winMDFileType;
    internal static string msbuildReferenceSourceTarget;
    internal static string msbuildReferenceGrouping;
    internal static string msbuildReferenceGroupingDisplayName;
    internal static string msbuildReferenceFromSDK;
    internal static string winmdImplmentationFile;
    internal static string projectReferenceOriginalItemSpec;
    internal static string IgnoreVersionForFrameworkReference;
    internal static string frameworkFile;
}
internal static class Microsoft.Build.Shared.MSBuildConstants : object {
    internal static string ToolsPath;
    internal static string ToolsPath64;
    internal static string SdksPath;
    internal static string TreatWarningsAsErrors;
    internal static string WarningsAsErrors;
    internal static string WarningsAsMessages;
    internal static string NuGetAssemblyPathEnvironmentVariableName;
    internal static string RestoreTargetName;
    internal static string CurrentVisualStudioVersion;
    internal static string CurrentToolsVersion;
    internal static string MSBuildDummyGlobalPropertyHeader;
    internal static Version CurrentToolsVersionAsVersion;
    internal static string CurrentAssemblyVersion;
    internal static string CurrentProductVersion { get; }
    private static MSBuildConstants();
    internal static string get_CurrentProductVersion();
}
internal class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
}
