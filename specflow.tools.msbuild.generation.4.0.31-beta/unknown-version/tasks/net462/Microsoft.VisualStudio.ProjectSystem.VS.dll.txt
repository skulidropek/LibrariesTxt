[CompilerGeneratedAttribute]
[TypeIdentifierAttribute("EC05985A-3DBD-49E4-B02A-8C111AD14285", "Microsoft.VisualStudio.Imaging.Interop.ImageMoniker")]
public class Microsoft.VisualStudio.Imaging.Interop.ImageMoniker : ValueType {
    public Guid Guid;
    public int Id;
}
[GuidAttribute("99A5A9D1-95D6-465C-A716-ACDB814EF005")]
public interface Microsoft.VisualStudio.ProjectSystem.Internal.IUnconfiguredProjectTestHookProjectSide {
    public abstract virtual void SetSourceItemsLoaded();
}
[ProjectSystemContractAttribute("0", "0")]
internal interface Microsoft.VisualStudio.ProjectSystem.IProjectReloadManager {
    public abstract virtual Task RegisterProjectAsync(IReloadableProject project);
    public abstract virtual Task UnregisterProjectAsync(IReloadableProject project);
    public abstract virtual bool HasPendingReload(ConfiguredProject configuredProject);
    public abstract virtual void QueueProjectReload(IReloadableProject project);
}
[ProjectSystemContractAttribute("1", "0")]
internal interface Microsoft.VisualStudio.ProjectSystem.IReloadableProject {
    public string ProjectFile { get; }
    public IVsHierarchy VsHierarchy { get; }
    public IProjectBuildTargetErrorList ErrorList { get; }
    public abstract virtual string get_ProjectFile();
    public abstract virtual IVsHierarchy get_VsHierarchy();
    public abstract virtual IProjectBuildTargetErrorList get_ErrorList();
    public abstract virtual void QueueReload();
    public abstract virtual Task`1<ProjectReloadResult> ReloadProjectAsync();
    public abstract virtual Task MarkDirtyAsync();
    public abstract virtual IEnumerable`1<ConfiguredProject> GetAffectedConfiguredProjects();
}
[ProjectSystemContractAttribute("1", "0")]
public interface Microsoft.VisualStudio.ProjectSystem.Properties.IVsProjectDesignerPageService {
    public bool IsProjectDesignerSupported { get; }
    public abstract virtual bool get_IsProjectDesignerSupported();
    public abstract virtual Task`1<Guid[]> GetPagesAsync(PropertyPageFilters filter);
}
[ProjectSystemContractAttribute("2", "0")]
internal interface Microsoft.VisualStudio.ProjectSystem.Properties.IVsPropertyPageService {
    public abstract virtual Task`1<Guid[]> GetPagesAsync(IProjectPropertiesContext context, PropertyPageFilters filter);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.ProjectSystem.Properties.PropertyPageFilters : Enum {
    public int value__;
    public static PropertyPageFilters None;
    public static PropertyPageFilters ConfigurationIndependent;
    public static PropertyPageFilters ConfigurationDependent;
    public static PropertyPageFilters All;
}
[GuidAttribute("CEC3E081-BF68-422A-89B0-23666F8C6047")]
public interface Microsoft.VisualStudio.ProjectSystem.TestHooks.IUnconfiguredProjectTestHook {
    public WaitHandle SourceItemsLoaded { get; }
    public abstract virtual WaitHandle get_SourceItemsLoaded();
}
public enum Microsoft.VisualStudio.ProjectSystem.VS.Build.AddMessageResult : Enum {
    public int value__;
    public static AddMessageResult NotHandled;
    public static AddMessageResult HandledAndStopProcessing;
}
public interface Microsoft.VisualStudio.ProjectSystem.VS.Build.ITextWriterWithMessageId {
    public abstract virtual void WriteLineWithId(Guid messageProviderGuid, UInt32 messageId, string value);
}
[ProjectSystemContractAttribute("1", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsErrorListProvider {
    public abstract virtual void SuspendRefresh();
    public abstract virtual void ResumeRefresh();
    public abstract virtual Task`1<AddMessageResult> AddMessageAsync(TargetGeneratedError error);
    public abstract virtual Task ClearMessageFromTargetAsync(string targetName);
    public abstract virtual Task ClearAllAsync();
}
[ProjectSystemContractAttribute("1", "0")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsLoggerProvider {
    public abstract virtual ILogger CreateLogger(IVsOutputWindowPane output, bool populateErrorList);
    public abstract virtual Task`1<ILogger> CreateLoggerAsync(IVsOutputWindowPane outputPane, bool populateErrorList, CancellationToken cancellationToken);
    public abstract virtual Task`1<ILogger> CreateLoggerAsync(TextWriter outputWriter, bool populateErrorList, CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsLoggingProjectInfo {
    public string ProjectFullPath { get; }
    public Guid ProjectGuid { get; }
    public IVsHierarchy VsHierarchy { get; }
    public abstract virtual string get_ProjectFullPath();
    public abstract virtual Guid get_ProjectGuid();
    public abstract virtual IVsHierarchy get_VsHierarchy();
}
[ProjectSystemContractAttribute("0", "0")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsOutputWindowTextWriterFactory {
    public abstract virtual ExportLifetimeContext`1<TextWriter> CreateTextWriter(IVsOutputWindowPane outputWindowPane);
}
[ProjectSystemContractAttribute("0", "0")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.Build.IVsProjectBuildLoggingService {
    public abstract virtual IVsLoggerProvider CreateProjectBuildLoggerProvider(IVsLoggingProjectInfo loggingProject);
}
internal class Microsoft.VisualStudio.ProjectSystem.VS.Build.TableDataSource : object {
    private ImmutableList`1<Subscription> subscriptions;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceTypeIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private IVsHierarchy <Hierarchy>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ProjectIdGuid>k__BackingField;
    public string DisplayName { get; }
    public string Identifier { get; }
    public string SourceTypeIdentifier { get; }
    internal IVsHierarchy Hierarchy { get; }
    internal object ProjectIdGuid { get; }
    protected IEnumerable`1<ITableDataSink> CurrentSubscribers { get; }
    internal TableDataSource(string sourceTypeIdentifier, string displayName, IVsHierarchy hierarchy, Guid projectIdGuid, string identifier);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Identifier();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceTypeIdentifier();
    [CompilerGeneratedAttribute]
internal IVsHierarchy get_Hierarchy();
    [CompilerGeneratedAttribute]
internal object get_ProjectIdGuid();
    protected IEnumerable`1<ITableDataSink> get_CurrentSubscribers();
    private sealed virtual override IDisposable Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.Subscribe(ITableDataSink sink);
    public void AddEntry(ITableEntry tableEntry);
    public void AddEntries(IReadOnlyList`1<ITableEntry> tableEntries);
    public void RemoveAllEntries();
    public void RemoveEntries(IReadOnlyList`1<ITableEntry> tableEntries);
    private void Unsubscribe(Subscription subscription);
}
internal class Microsoft.VisualStudio.ProjectSystem.VS.Build.TableEntry : WpfTableEntryBase {
    protected internal static ImmutableArray`1<string> SupportedColumnNames;
    private TableDataSource tableDataSource;
    [CompilerGeneratedAttribute]
private object <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Values>k__BackingField;
    public object Identity { get; }
    protected IReadOnlyDictionary`2<string, object> Values { get; }
    internal TableEntry(TableDataSource tableDataSource, object id, IReadOnlyDictionary`2<string, object> values);
    private static TableEntry();
    [CompilerGeneratedAttribute]
public virtual object get_Identity();
    [CompilerGeneratedAttribute]
protected IReadOnlyDictionary`2<string, object> get_Values();
    public virtual bool TryGetValue(string keyName, Object& content);
    public virtual bool CanSetValue(string keyName);
    public virtual bool TrySetValue(string keyName, object content);
}
public class Microsoft.VisualStudio.ProjectSystem.VS.Build.TargetGeneratedError : object {
    [CompilerGeneratedAttribute]
private string <GeneratingTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildEventArgs <BuildEventArgs>k__BackingField;
    public string GeneratingTarget { get; private set; }
    public BuildEventArgs BuildEventArgs { get; private set; }
    public TargetGeneratedError(string generatingTarget, BuildEventArgs buildEventArgs);
    [CompilerGeneratedAttribute]
public string get_GeneratingTarget();
    [CompilerGeneratedAttribute]
private void set_GeneratingTarget(string value);
    [CompilerGeneratedAttribute]
public BuildEventArgs get_BuildEventArgs();
    [CompilerGeneratedAttribute]
private void set_BuildEventArgs(BuildEventArgs value);
}
[AttributeUsageAttribute("388")]
[MetadataAttributeAttribute]
public class Microsoft.VisualStudio.ProjectSystem.VS.ComServiceIidAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Iid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeInherited>k__BackingField;
    public String[] Iid { get; }
    public bool IncludeInherited { get; }
    public ComServiceIidAttribute(Type comType, bool includeInherited);
    public ComServiceIidAttribute(String[] iid);
    [CompilerGeneratedAttribute]
public String[] get_Iid();
    [CompilerGeneratedAttribute]
public bool get_IncludeInherited();
}
public class Microsoft.VisualStudio.ProjectSystem.VS.ComServiceMetadataView : object {
    [CompilerGeneratedAttribute]
private string <AppliesTo>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Iid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OrderPrecedence>k__BackingField;
    public string AppliesTo { get; }
    public String[] Iid { get; }
    public int OrderPrecedence { get; }
    public ComServiceMetadataView(IDictionary`2<string, object> metadata);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AppliesTo();
    [CompilerGeneratedAttribute]
public String[] get_Iid();
    [CompilerGeneratedAttribute]
public sealed virtual int get_OrderPrecedence();
}
public static class Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebuggerProperties : object {
    public static PropertySerializer PropertySerializer { get; }
    public static PropertySerializer get_PropertySerializer();
    public static PropertyReader CreateReader(IDictionary`2<string, string> properties);
    public static void AddSymbolPath(DebugLaunchSettings info, string symbolsPath);
}
public enum Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchOperation : Enum {
    public int value__;
    public static DebugLaunchOperation AlreadyRunning;
    public static DebugLaunchOperation CreateProcess;
    public static DebugLaunchOperation Custom;
    public static DebugLaunchOperation LaunchByWebServer;
    public static DebugLaunchOperation AttachToHostingProcess;
    public static DebugLaunchOperation StartDebuggingHostingProcess;
    public static DebugLaunchOperation LaunchBrowser;
    public static DebugLaunchOperation AppPackageDebug;
    public static DebugLaunchOperation AttachToSuspendedLaunchProcess;
}
public abstract class Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase : object {
    private static Guid DeploymentPackage;
    [CompilerGeneratedAttribute]
private SVsServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectThreadingService <ThreadingService>k__BackingField;
    [CompilerGeneratedAttribute]
private ConfiguredProject <ConfiguredProject>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderPrecedenceImportCollection`1<IVsHierarchy> <VsHierarchies>k__BackingField;
    [ImportAttribute]
protected SVsServiceProvider ServiceProvider { get; private set; }
    [ImportAttribute]
protected IProjectThreadingService ThreadingService { get; private set; }
    [ImportAttribute]
protected ConfiguredProject ConfiguredProject { get; private set; }
    [ImportManyAttribute("Microsoft.VisualStudio.ProjectSystem.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy")]
private OrderPrecedenceImportCollection`1<IVsHierarchy> VsHierarchies { get; private set; }
    protected IVsHierarchy VsHierarchy { get; }
    protected DebugLaunchProviderBase(ConfiguredProject configuredProject);
    private static DebugLaunchProviderBase();
    [CompilerGeneratedAttribute]
protected SVsServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private void set_ServiceProvider(SVsServiceProvider value);
    [CompilerGeneratedAttribute]
protected IProjectThreadingService get_ThreadingService();
    [CompilerGeneratedAttribute]
private void set_ThreadingService(IProjectThreadingService value);
    [CompilerGeneratedAttribute]
protected ConfiguredProject get_ConfiguredProject();
    [CompilerGeneratedAttribute]
private void set_ConfiguredProject(ConfiguredProject value);
    [CompilerGeneratedAttribute]
private OrderPrecedenceImportCollection`1<IVsHierarchy> get_VsHierarchies();
    [CompilerGeneratedAttribute]
private void set_VsHierarchies(OrderPrecedenceImportCollection`1<IVsHierarchy> value);
    protected IVsHierarchy get_VsHierarchy();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase/<QueryDebugTargetsCountAsync>d__20")]
public virtual Task`1<int> QueryDebugTargetsCountAsync(DebugLaunchOptions launchOptions);
    public abstract virtual Task`1<IReadOnlyList`1<IDebugLaunchSettings>> QueryDebugTargetsAsync(DebugLaunchOptions launchOptions);
    public abstract virtual Task`1<bool> CanLaunchAsync(DebugLaunchOptions launchOptions);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchProviderBase/<LaunchAsync>d__23")]
public virtual Task LaunchAsync(DebugLaunchOptions launchOptions);
    internal static VsDebugTargetInfo2 GetDebuggerStruct(IDebugLaunchSettings info);
    internal static VsDebugTargetInfo4 GetDebuggerStruct4(IDebugLaunchSettings info);
    internal static void FreeDebuggerStruct(VsDebugTargetInfo2 nativeStruct);
    internal static void FreeDebuggerStruct(VsDebugTargetInfo4 nativeStruct);
    internal static void CopyStructArrayToIntPtr(T[] list, IntPtr nativeArrayPointer, Int32& initializedStructures);
    internal static void DestroyStructArray(IntPtr structArray, int arrayLength);
    protected Task`1<IReadOnlyList`1<LaunchResult>> LaunchAsync(IDebugLaunchSettings[] launchSettings);
    private static LaunchResult GetLaunchResult(VsDebugTargetProcessInfo processInfo);
    private static string GetSerializedEnvironmentString(IDictionary`2<string, string> environment);
    private static Byte[] GetGuidBytes(IList`1<Guid> guids);
    private static IntPtr GetDebugEngineBytes(IList`1<Guid> guids);
    private static IList`1<Guid> GetDebuggerGuids(IDebugLaunchSettings info);
}
public class Microsoft.VisualStudio.ProjectSystem.VS.Debug.DebugLaunchSettings : object {
    private List`1<Guid> additionalDebugEngines;
    private Dictionary`2<string, string> environment;
    [CompilerGeneratedAttribute]
private DebugLaunchOperation <LaunchOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private DebugLaunchOptions <LaunchOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private VsAppPackageLaunchInfo <AppPackageLaunchInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <LaunchDebugEngineGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PortSupplierGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteMachine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Executable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <StandardInputHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <StandardOutputHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <StandardErrorHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SendToOutputWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Unknown>k__BackingField;
    [CompilerGeneratedAttribute]
private IVsHierarchy <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProcessLanguageGuid>k__BackingField;
    public DebugLaunchOperation LaunchOperation { get; public set; }
    public DebugLaunchOptions LaunchOptions { get; public set; }
    public VsAppPackageLaunchInfo AppPackageLaunchInfo { get; public set; }
    public Guid LaunchDebugEngineGuid { get; public set; }
    public IList`1<Guid> AdditionalDebugEngines { get; }
    public Guid PortSupplierGuid { get; public set; }
    public string PortName { get; public set; }
    public string RemoteMachine { get; public set; }
    public string CurrentDirectory { get; public set; }
    public string Executable { get; public set; }
    public string Arguments { get; public set; }
    public IDictionary`2<string, string> Environment { get; }
    public string Options { get; public set; }
    public IntPtr StandardInputHandle { get; public set; }
    public IntPtr StandardOutputHandle { get; public set; }
    public IntPtr StandardErrorHandle { get; public set; }
    public bool SendToOutputWindow { get; public set; }
    public int ProcessId { get; public set; }
    public object Unknown { get; public set; }
    public IVsHierarchy Project { get; public set; }
    public Guid ProcessLanguageGuid { get; public set; }
    public DebugLaunchSettings(DebugLaunchOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual DebugLaunchOperation get_LaunchOperation();
    [CompilerGeneratedAttribute]
public void set_LaunchOperation(DebugLaunchOperation value);
    [CompilerGeneratedAttribute]
public sealed virtual DebugLaunchOptions get_LaunchOptions();
    [CompilerGeneratedAttribute]
public void set_LaunchOptions(DebugLaunchOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual VsAppPackageLaunchInfo get_AppPackageLaunchInfo();
    [CompilerGeneratedAttribute]
public void set_AppPackageLaunchInfo(VsAppPackageLaunchInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_LaunchDebugEngineGuid();
    [CompilerGeneratedAttribute]
public void set_LaunchDebugEngineGuid(Guid value);
    public sealed virtual IList`1<Guid> get_AdditionalDebugEngines();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_PortSupplierGuid();
    [CompilerGeneratedAttribute]
public void set_PortSupplierGuid(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PortName();
    [CompilerGeneratedAttribute]
public void set_PortName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RemoteMachine();
    [CompilerGeneratedAttribute]
public void set_RemoteMachine(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CurrentDirectory();
    [CompilerGeneratedAttribute]
public void set_CurrentDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Executable();
    [CompilerGeneratedAttribute]
public void set_Executable(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(string value);
    public sealed virtual IDictionary`2<string, string> get_Environment();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_StandardInputHandle();
    [CompilerGeneratedAttribute]
public void set_StandardInputHandle(IntPtr value);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_StandardOutputHandle();
    [CompilerGeneratedAttribute]
public void set_StandardOutputHandle(IntPtr value);
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_StandardErrorHandle();
    [CompilerGeneratedAttribute]
public void set_StandardErrorHandle(IntPtr value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SendToOutputWindow();
    [CompilerGeneratedAttribute]
public void set_SendToOutputWindow(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Unknown();
    [CompilerGeneratedAttribute]
public void set_Unknown(object value);
    [CompilerGeneratedAttribute]
public sealed virtual IVsHierarchy get_Project();
    [CompilerGeneratedAttribute]
public void set_Project(IVsHierarchy value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ProcessLanguageGuid();
    [CompilerGeneratedAttribute]
public void set_ProcessLanguageGuid(Guid value);
}
public interface Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings {
    public DebugLaunchOperation LaunchOperation { get; }
    public DebugLaunchOptions LaunchOptions { get; }
    public VsAppPackageLaunchInfo AppPackageLaunchInfo { get; }
    public Guid LaunchDebugEngineGuid { get; }
    public IList`1<Guid> AdditionalDebugEngines { get; }
    public Guid PortSupplierGuid { get; }
    public string PortName { get; }
    public string RemoteMachine { get; }
    public string CurrentDirectory { get; }
    public string Executable { get; }
    public string Arguments { get; }
    public IDictionary`2<string, string> Environment { get; }
    public string Options { get; }
    public IntPtr StandardInputHandle { get; }
    public IntPtr StandardOutputHandle { get; }
    public IntPtr StandardErrorHandle { get; }
    public bool SendToOutputWindow { get; }
    public int ProcessId { get; }
    public IVsHierarchy Project { get; }
    public object Unknown { get; }
    public Guid ProcessLanguageGuid { get; }
    public abstract virtual DebugLaunchOperation get_LaunchOperation();
    public abstract virtual DebugLaunchOptions get_LaunchOptions();
    public abstract virtual VsAppPackageLaunchInfo get_AppPackageLaunchInfo();
    public abstract virtual Guid get_LaunchDebugEngineGuid();
    public abstract virtual IList`1<Guid> get_AdditionalDebugEngines();
    public abstract virtual Guid get_PortSupplierGuid();
    public abstract virtual string get_PortName();
    public abstract virtual string get_RemoteMachine();
    public abstract virtual string get_CurrentDirectory();
    public abstract virtual string get_Executable();
    public abstract virtual string get_Arguments();
    public abstract virtual IDictionary`2<string, string> get_Environment();
    public abstract virtual string get_Options();
    public abstract virtual IntPtr get_StandardInputHandle();
    public abstract virtual IntPtr get_StandardOutputHandle();
    public abstract virtual IntPtr get_StandardErrorHandle();
    public abstract virtual bool get_SendToOutputWindow();
    public abstract virtual int get_ProcessId();
    public abstract virtual IVsHierarchy get_Project();
    public abstract virtual object get_Unknown();
    public abstract virtual Guid get_ProcessLanguageGuid();
}
[ProjectSystemContractAttribute("1", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugPageGuidProvider {
    public abstract virtual Task`1<Guid> GetDebugPropertyPageGuidAsync();
}
public interface Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugQueryTarget {
    public abstract virtual Task`1<int> QueryDebugTargetsCountAsync(DebugLaunchOptions launchOptions);
    public abstract virtual Task`1<IReadOnlyList`1<IDebugLaunchSettings>> QueryDebugTargetsAsync(DebugLaunchOptions launchOptions);
}
internal class Microsoft.VisualStudio.ProjectSystem.VS.HierarchyId : ValueType {
    public static HierarchyId Root;
    public static HierarchyId Selection;
    public static HierarchyId Nil;
    public static HierarchyId Empty;
    private UInt32 id;
    public UInt32 Id { get; }
    public bool IsRoot { get; }
    public bool IsSelection { get; }
    public bool IsEmpty { get; }
    public bool IsNilOrEmpty { get; }
    public bool IsNil { get; }
    public HierarchyId(UInt32 id);
    private static HierarchyId();
    public UInt32 get_Id();
    public bool get_IsRoot();
    public bool get_IsSelection();
    public bool get_IsEmpty();
    public bool get_IsNilOrEmpty();
    public bool get_IsNil();
    public static UInt32 op_Implicit(HierarchyId id);
    public static HierarchyId op_Implicit(UInt32 id);
    public static int op_Implicit(HierarchyId id);
    public static HierarchyId op_Implicit(int id);
    public static IntPtr op_Implicit(HierarchyId id);
    public static HierarchyId op_Implicit(IntPtr id);
}
[DebuggerDisplayAttribute("{hr}")]
public class Microsoft.VisualStudio.ProjectSystem.VS.HResult : ValueType {
    public static HResult OK;
    public static HResult False;
    public static HResult NotImplemented;
    public static HResult NoInterface;
    public static HResult MemberNotFound;
    public static HResult InvalidArg;
    public static HResult Unexpected;
    public static HResult Fail;
    public static HResult Pending;
    public static HResult Abort;
    public static HResult IncompatibleProject;
    public static HResult UnsupportedFlavorProject;
    public static HResult WrongThread;
    private int hr;
    private Exception exception;
    public Exception Exception { get; }
    public bool Failed { get; }
    public bool Succeeded { get; }
    public bool IsOK { get; }
    public bool IsFalse { get; }
    public bool IsNotImplemented { get; }
    public HResult(int hr);
    public HResult(Exception exception);
    private HResult(int hr, bool captureErrorInfoNow);
    private static HResult();
    public Exception get_Exception();
    public bool get_Failed();
    public bool get_Succeeded();
    public bool get_IsOK();
    public bool get_IsFalse();
    public bool get_IsNotImplemented();
    public static HResult op_Implicit(int hr);
    public static int op_Implicit(HResult result);
    public static bool op_Equality(HResult result1, HResult result2);
    public static bool op_Inequality(HResult result1, HResult result2);
    public static HResult ToHResult(int hr);
    public static int FromHResult(HResult result);
    public static HResult Invoke(Action action, IServiceProvider vsShellServiceProvider, IProjectFaultHandlerService projectFaultHandlerService, UnconfiguredProject project);
    public static HResult Invoke(Func`1<HResult> action, IServiceProvider vsShellServiceProvider, IProjectFaultHandlerService projectFaultHandlerService, UnconfiguredProject project);
    public static bool Verify(HResult hr, string unformattedErrorMessage, ErrorBehavior errorHandling);
    public static bool Verify(Func`1<int> interopInvocation, string unformattedErrorMessage, ErrorBehavior errorHandling);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Throw();
}
[ProjectSystemContractAttribute("1", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.IActiveIntellisenseProjectProvider {
    public string ActiveIntellisenseProjectContext { get; public set; }
    public abstract virtual string get_ActiveIntellisenseProjectContext();
    public abstract virtual void set_ActiveIntellisenseProjectContext(string value);
}
[ProjectSystemContractAttribute("1", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.ICodeModelProvider {
    public abstract virtual FileCodeModel GetFileCodeModel(ProjectItem fileItem);
}
[ProjectSystemContractAttribute("0", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.IFlavoredProjectCompatibilityProvider {
    public abstract virtual Task`1<bool> IsProjectCompatibleAsync(ProjectRootElement project);
    public abstract virtual Task`1<bool> IsProjectNeedBeUpgradedAsync(ProjectRootElement project);
}
[ProjectSystemContractAttribute("1", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.ILanguageFeaturesProvider {
    public abstract virtual string MakeProperIdentifier(string name);
    public abstract virtual string MakeProperNamespace(string name);
    public abstract virtual string ConcatNamespaces(String[] namespaceNames);
}
[ProjectSystemContractAttribute("0", "0")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.ILanguageServiceRegister {
    public abstract virtual Task RegisterProjectAsync(IProjectWithIntellisense project);
    public abstract virtual Task UnregisterAsync(IProjectWithIntellisense project);
    public abstract virtual bool TryGetIntellisenseProject(string projectPath, IVsIntellisenseProject& project);
}
[ProjectSystemContractAttribute("0", "0")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.ILegacyProjectSystemRegistration {
    public abstract virtual void SetLegacyProject(IVsHierarchy hierarchy, IVsUnconfiguredProjectIntegrationService integrationService);
}
[ProjectSystemContractAttribute("2", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.IProfilableProjectProvider {
    public bool LegacyWebSupportRequired { get; }
    public bool SuppressSignedAssemblyWarnings { get; }
    public abstract virtual bool get_LegacyWebSupportRequired();
    public abstract virtual bool get_SuppressSignedAssemblyWarnings();
    public abstract virtual Task AllBrowserTargetsFinishedAsync();
    public abstract virtual Task BeforeLaunchAsync(string profilingTask);
    public abstract virtual Task BeforeTargetsLaunchedAsync();
    public abstract virtual Task`1<IEnumerable`1<string>> GetSupportedProfilingTasksAsync();
    public abstract virtual Task LaunchProfilerAsync();
    public abstract virtual Task ProfilerAnalysisFinishedAsync();
    public abstract virtual Task`1<Object[]> QueryProfilerTargetInfoEnumAsync();
}
[ProjectSystemContractAttribute("1", "0")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.IProjectAsyncLoadDashboard {
    public Task ProjectLoadedInHost { get; }
    public abstract virtual Task get_ProjectLoadedInHost();
}
[ProjectSystemContractAttribute("1", "3")]
internal interface Microsoft.VisualStudio.ProjectSystem.VS.IProjectAsyncLoadDashboardInternal {
    public abstract virtual void OnProjectLoadedInHost();
}
[ProjectSystemContractAttribute("1", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.IProjectCodeModelProvider {
    public abstract virtual CodeModel GetCodeModel(Project project);
}
[ProjectSystemContractAttribute("1", "0")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.IProjectGuidService {
    public Guid ProjectGuid { get; }
    public abstract virtual Guid get_ProjectGuid();
}
public interface Microsoft.VisualStudio.ProjectSystem.VS.IProjectGuidService2 {
    public abstract virtual Task`1<Guid> GetProjectGuidAsync();
}
[ProjectSystemContractAttribute("1", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.IProjectGuidStorageProvider {
    public abstract virtual Task`1<Guid> GetProjectGuidAsync();
    public abstract virtual Task SetProjectGuidAsync(Guid guid);
}
[ProjectSystemContractAttribute("1", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.IProjectItemContextMenuProvider {
    public abstract virtual bool TryGetContextMenu(IProjectTree projectItem, Guid& menuCommandGuid, Int32& menuCommandId);
    public abstract virtual bool TryGetMixedItemsContextMenu(IEnumerable`1<IProjectTree> projectItems, Guid& menuCommandGuid, Int32& menuCommandId);
}
[ProjectSystemContractAttribute("1", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.IProjectNestingService {
    [CompilerGeneratedAttribute]
public abstract virtual void add_NestedHierarchyAdded(EventHandler`1<NestedHierarchyAddedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NestedHierarchyAdded(EventHandler`1<NestedHierarchyAddedEventArgs> value);
    public abstract virtual Task`1<IVsHierarchy> GetNestedHierarchyAsync(IProjectTree projectTree);
    public abstract virtual Task OnOpenChildrenAsync();
    public abstract virtual Task`1<IProjectTree> OnSetNestedProjectAsync(Guid nestedProjectId, UInt32 solutionProjectItemId);
    public abstract virtual Task OnRemoveNestedProjectAsync(Guid nestedProjectId);
    public abstract virtual Task OnDeleteNestedProjectAsync(Guid nestedProjectId);
    public abstract virtual Task OnNotifyOnInvalidateItemsAsync(UInt32 parentItemId, bool saveExpansionState);
    public abstract virtual Task OnNotifyOnItemAddedAsync(UInt32 parentItemId, UInt32 previousSiblingItemId, UInt32 addedItemId);
    public abstract virtual Task OnNotifyOnItemDeletedAsync(UInt32 itemId);
    public abstract virtual Task OnNotifyOnPropertyChangedAsync(UInt32 itemId, int propId, UInt32 flags);
    public abstract virtual Task OnNestedProjectReloadedAsync(Guid projectId, IVsHierarchy newHierarchy);
    public abstract virtual Task OnAfterAddedToSolutionAsync();
    public abstract virtual Task`1<IProjectTree> OnPrepareNestedProjectCreationInfoAsync(string projectFullPath, UInt32 solutionProjectItemId);
    public abstract virtual Task OnCleanupNestedProjectCreationInfoAsync(bool success, UInt32 solutionProjectItemId, UInt32 parentItemId, Guid projectId);
    public abstract virtual Task`1<bool> OnQueryRenameNestedProjectAsync(Guid projectId, string oldProjectFullPath, string newProjectFullPath);
    public abstract virtual Task OnAfterRenameNestedProjectAsync(Guid projectId, string oldProjectFullPath, string newProjectFullPath);
    public abstract virtual Task OnNestedProjectClosedAsync(UInt32 itemId);
    public abstract virtual Task OnCloseChildrenAsync();
    public abstract virtual Task OnCloseProjectAsync();
}
[ProjectSystemContractAttribute("1", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.IProjectRetargetHandler {
    public abstract virtual Task`1<IProjectTargetChange> CheckForRetargetAsync(RetargetCheckOptions options);
    public abstract virtual Task RetargetAsync(TextWriter outputLogger, RetargetOptions options, IProjectTargetChange projectTargetChange, string backupLocation);
    public abstract virtual Task`1<IImmutableList`1<string>> GetAffectedFilesAsync(IProjectTargetChange projectTargetChange);
}
public interface Microsoft.VisualStudio.ProjectSystem.VS.IProjectTargetChange {
}
public interface Microsoft.VisualStudio.ProjectSystem.VS.IProjectWithIntellisense {
    public UnconfiguredProject UnconfiguredProject { get; }
    public IVsIntellisenseProject IntellisenseProject { get; }
    public abstract virtual UnconfiguredProject get_UnconfiguredProject();
    public abstract virtual IVsIntellisenseProject get_IntellisenseProject();
    public abstract virtual Task OnProjectAddedAsync(UnconfiguredProject unconfiguredProject, IVsIntellisenseProject intellisenseProject);
    public abstract virtual Task OnProjectRemovedAsync(UnconfiguredProject unconfiguredProject, IVsIntellisenseProject intellisenseProject);
}
public class Microsoft.VisualStudio.ProjectSystem.VS.IsDocumentInProjectResult : ValueType {
    [CompilerGeneratedAttribute]
private IProjectTree <ProjectTree>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectValueVersions <ProjectTreeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private VSDOCUMENTPRIORITY <OldDocumentPriority>k__BackingField;
    [CompilerGeneratedAttribute]
private __VSDOCUMENTPRIORITY2 <DocumentPriority>k__BackingField;
    public IProjectTree ProjectTree { get; public set; }
    public IProjectValueVersions ProjectTreeVersion { get; public set; }
    public VSDOCUMENTPRIORITY OldDocumentPriority { get; public set; }
    public __VSDOCUMENTPRIORITY2 DocumentPriority { get; public set; }
    public bool IsEmpty { get; }
    [CompilerGeneratedAttribute]
public IProjectTree get_ProjectTree();
    [CompilerGeneratedAttribute]
public void set_ProjectTree(IProjectTree value);
    [CompilerGeneratedAttribute]
public IProjectValueVersions get_ProjectTreeVersion();
    [CompilerGeneratedAttribute]
public void set_ProjectTreeVersion(IProjectValueVersions value);
    [CompilerGeneratedAttribute]
public VSDOCUMENTPRIORITY get_OldDocumentPriority();
    [CompilerGeneratedAttribute]
public void set_OldDocumentPriority(VSDOCUMENTPRIORITY value);
    [CompilerGeneratedAttribute]
public __VSDOCUMENTPRIORITY2 get_DocumentPriority();
    [CompilerGeneratedAttribute]
public void set_DocumentPriority(__VSDOCUMENTPRIORITY2 value);
    public bool get_IsEmpty();
}
[ProjectSystemContractAttribute("1", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.ISharedItemContextHierarchyProvider {
    public IVsHierarchy SharedItemContextHierarchy { get; public set; }
    public abstract virtual IVsHierarchy get_SharedItemContextHierarchy();
    public abstract virtual void set_SharedItemContextHierarchy(IVsHierarchy value);
}
internal interface Microsoft.VisualStudio.ProjectSystem.VS.ITelemetryProjectGuidService {
    public abstract virtual Task`1<Guid> GetProjectGuidAsync();
}
[ProjectSystemContractAttribute("1", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.IVsIsDocumentInProjectHandler {
    public abstract virtual Task`1<IsDocumentInProjectResult> IsDocumentInProjectAsync(string documentMoniker);
}
[ProjectSystemContractAttribute("0", "0")]
internal interface Microsoft.VisualStudio.ProjectSystem.VS.IVsMefServiceProvider {
    public IAsyncServiceProvider AsyncServiceProvider { get; }
    public IAsyncServiceProvider ComAsyncServiceProvider { get; }
    public abstract virtual IAsyncServiceProvider get_AsyncServiceProvider();
    public abstract virtual IAsyncServiceProvider get_ComAsyncServiceProvider();
}
[ProjectSystemContractAttribute("0", "0")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.IVsProjectServices {
    public string SolutionDirectory { get; }
    public abstract virtual string get_SolutionDirectory();
    public abstract virtual string LookupProjectPathFromProjectGuid(Guid value);
    public abstract virtual Guid GetProjectIdentifierGuid(Project project);
    public abstract virtual Guid GetProjectIdentifierGuid(IVsHierarchy project);
    public abstract virtual Guid GetProjectIdentifierGuid(string projectName);
    public abstract virtual bool IsProjectContainedInSolution(Guid value);
    public abstract virtual bool IsProjectContainedInSolution(string evaluatedFullPath);
    public abstract virtual IVsHierarchy GetHierarchyByProjectName(string projectName);
}
[ProjectSystemContractAttribute("0", "0")]
internal interface Microsoft.VisualStudio.ProjectSystem.VS.IVsProjectServicesInternal {
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeCloseSolutionAsync(AsyncEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeCloseSolutionAsync(AsyncEventHandler value);
}
[ProjectSystemContractAttribute("1", "0")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.IVsProjectTreeService {
    public Task InitialSourceItemsPopulated { get; }
    public abstract virtual Task get_InitialSourceItemsPopulated();
    public abstract virtual Task PublishLatestReferencesAsync();
}
internal interface Microsoft.VisualStudio.ProjectSystem.VS.IVsUnconfiguredProjectTypeGuidSetter {
    unknown Guid ProjectTypeGuid {public set; }
    public abstract virtual void set_ProjectTypeGuid(Guid value);
    public abstract virtual Task SetActiveProjectConfigurationAsync(ProjectConfiguration activeProjectConfiguration, ProjectConfiguration previouslyActiveProjectConfiguration);
}
[ProjectSystemContractAttribute("1", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.IVsWizardExecutionEvents {
    public abstract virtual void OnAfterRunWizard(string wizardPath, string itemPath, wizardResult wizardResult);
}
internal class Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBox : DialogWindow {
    [CompilerGeneratedAttribute]
private MultiChoiceMessageBoxResult <SelectedAction>k__BackingField;
    internal TextBlock WarnText;
    internal Button Button4;
    internal Button Button3;
    internal Button Button2;
    internal Button Button1;
    private bool _contentLoaded;
    public MultiChoiceMessageBoxResult SelectedAction { get; private set; }
    public MultiChoiceMessageBox(string dialogTitle, string errorText, String[] buttons);
    [CompilerGeneratedAttribute]
public MultiChoiceMessageBoxResult get_SelectedAction();
    [CompilerGeneratedAttribute]
private void set_SelectedAction(MultiChoiceMessageBoxResult value);
    public MultiChoiceMessageBoxResult ShowModalAndGetResult();
    private void ViewModel_CloseDialog(object sender, MultiChoiceMessageBoxResult e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal enum Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBoxResult : Enum {
    public int value__;
    public static MultiChoiceMessageBoxResult Cancel;
    public static MultiChoiceMessageBoxResult Button1;
    public static MultiChoiceMessageBoxResult Button2;
    public static MultiChoiceMessageBoxResult Button3;
    public static MultiChoiceMessageBoxResult Button4;
}
internal class Microsoft.VisualStudio.ProjectSystem.VS.MultiChoiceMessageBoxViewModel : object {
    private String[] buttonText;
    [CompilerGeneratedAttribute]
private EventHandler`1<MultiChoiceMessageBoxResult> CloseDialog;
    [CompilerGeneratedAttribute]
private ICommand <ButtonClickCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageMoniker <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DialogTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMsgText>k__BackingField;
    public ICommand ButtonClickCommand { get; private set; }
    public ImageMoniker Icon { get; }
    public string Button1Text { get; }
    public string Button2Text { get; }
    public string Button3Text { get; }
    public string Button4Text { get; }
    public string DialogTitle { get; }
    public string ErrorMsgText { get; }
    public Visibility Button1Visibility { get; }
    public Visibility Button2Visibility { get; }
    public Visibility Button3Visibility { get; }
    public Visibility Button4Visibility { get; }
    public MultiChoiceMessageBoxViewModel(string title, string errorText, String[] buttons);
    [CompilerGeneratedAttribute]
public void add_CloseDialog(EventHandler`1<MultiChoiceMessageBoxResult> value);
    [CompilerGeneratedAttribute]
public void remove_CloseDialog(EventHandler`1<MultiChoiceMessageBoxResult> value);
    [CompilerGeneratedAttribute]
public ICommand get_ButtonClickCommand();
    [CompilerGeneratedAttribute]
private void set_ButtonClickCommand(ICommand value);
    [CompilerGeneratedAttribute]
public ImageMoniker get_Icon();
    public string get_Button1Text();
    public string get_Button2Text();
    public string get_Button3Text();
    public string get_Button4Text();
    [CompilerGeneratedAttribute]
public string get_DialogTitle();
    [CompilerGeneratedAttribute]
public string get_ErrorMsgText();
    public Visibility get_Button1Visibility();
    public Visibility get_Button2Visibility();
    public Visibility get_Button3Visibility();
    public Visibility get_Button4Visibility();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(object parameter);
}
public class Microsoft.VisualStudio.ProjectSystem.VS.NestedHierarchyAddedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private UInt32 <ItemId>k__BackingField;
    [CompilerGeneratedAttribute]
private IVsHierarchy <NestedHierarchy>k__BackingField;
    public UInt32 ItemId { get; private set; }
    public IVsHierarchy NestedHierarchy { get; private set; }
    public NestedHierarchyAddedEventArgs(UInt32 itemId, IVsHierarchy nestedHierarchy);
    [CompilerGeneratedAttribute]
public UInt32 get_ItemId();
    [CompilerGeneratedAttribute]
private void set_ItemId(UInt32 value);
    [CompilerGeneratedAttribute]
public IVsHierarchy get_NestedHierarchy();
    [CompilerGeneratedAttribute]
private void set_NestedHierarchy(IVsHierarchy value);
}
[AttributeUsageAttribute("5")]
public class Microsoft.VisualStudio.ProjectSystem.VS.ProjectTypeRegistrationAttribute : RegistrationAttribute {
    private static Guid CpsPackageGuid;
    private static Guid CpsPrefetchGuid;
    private Guid folderGuid;
    [CompilerGeneratedAttribute]
private Guid <ProjectTypeGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ResourcePackage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayProjectFileExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultProjectExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PossibleProjectExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Capabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectTemplatesDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LanguageVsTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SortPriority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NewProjectRequireNewFolderVsTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectSubTypeVsTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayProjectTypeVsTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateGroupIDsVsTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateIDsVsTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowOnlySpecifiedTemplatesVsTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAsynchronousSolutionLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAsynchronousProjectTreeLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableProjectPrefetch>k__BackingField;
    public Guid ProjectTypeGuid { get; private set; }
    public Guid ResourcePackage { get; private set; }
    public string DisplayName { get; private set; }
    public string DisplayProjectFileExtensions { get; private set; }
    public string DefaultProjectExtension { get; private set; }
    public string PossibleProjectExtensions { get; public set; }
    public string Capabilities { get; public set; }
    public string ProjectTemplatesDir { get; public set; }
    public string LanguageVsTemplate { get; public set; }
    public int SortPriority { get; public set; }
    public bool NewProjectRequireNewFolderVsTemplate { get; public set; }
    public string ProjectSubTypeVsTemplate { get; public set; }
    public string DisplayProjectTypeVsTemplate { get; public set; }
    public string TemplateGroupIDsVsTemplate { get; public set; }
    public string TemplateIDsVsTemplate { get; public set; }
    public bool ShowOnlySpecifiedTemplatesVsTemplate { get; public set; }
    public bool DisableAsynchronousSolutionLoad { get; public set; }
    public bool DisableAsynchronousProjectTreeLoad { get; public set; }
    public bool DisableProjectPrefetch { get; public set; }
    public string FolderGuid { get; public set; }
    public ProjectTypeRegistrationAttribute(string projectTypeGuid, string displayName, string displayProjectFileExtensions, string defaultProjectExtension, string language, string resourcePackageGuid);
    private static ProjectTypeRegistrationAttribute();
    [CompilerGeneratedAttribute]
public Guid get_ProjectTypeGuid();
    [CompilerGeneratedAttribute]
private void set_ProjectTypeGuid(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_ResourcePackage();
    [CompilerGeneratedAttribute]
private void set_ResourcePackage(Guid value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayProjectFileExtensions();
    [CompilerGeneratedAttribute]
private void set_DisplayProjectFileExtensions(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultProjectExtension();
    [CompilerGeneratedAttribute]
private void set_DefaultProjectExtension(string value);
    [CompilerGeneratedAttribute]
public string get_PossibleProjectExtensions();
    [CompilerGeneratedAttribute]
public void set_PossibleProjectExtensions(string value);
    [CompilerGeneratedAttribute]
public string get_Capabilities();
    [CompilerGeneratedAttribute]
public void set_Capabilities(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectTemplatesDir();
    [CompilerGeneratedAttribute]
public void set_ProjectTemplatesDir(string value);
    [CompilerGeneratedAttribute]
public string get_LanguageVsTemplate();
    [CompilerGeneratedAttribute]
public void set_LanguageVsTemplate(string value);
    [CompilerGeneratedAttribute]
public int get_SortPriority();
    [CompilerGeneratedAttribute]
public void set_SortPriority(int value);
    [CompilerGeneratedAttribute]
public bool get_NewProjectRequireNewFolderVsTemplate();
    [CompilerGeneratedAttribute]
public void set_NewProjectRequireNewFolderVsTemplate(bool value);
    [CompilerGeneratedAttribute]
public string get_ProjectSubTypeVsTemplate();
    [CompilerGeneratedAttribute]
public void set_ProjectSubTypeVsTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayProjectTypeVsTemplate();
    [CompilerGeneratedAttribute]
public void set_DisplayProjectTypeVsTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_TemplateGroupIDsVsTemplate();
    [CompilerGeneratedAttribute]
public void set_TemplateGroupIDsVsTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_TemplateIDsVsTemplate();
    [CompilerGeneratedAttribute]
public void set_TemplateIDsVsTemplate(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowOnlySpecifiedTemplatesVsTemplate();
    [CompilerGeneratedAttribute]
public void set_ShowOnlySpecifiedTemplatesVsTemplate(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableAsynchronousSolutionLoad();
    [CompilerGeneratedAttribute]
public void set_DisableAsynchronousSolutionLoad(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableAsynchronousProjectTreeLoad();
    [CompilerGeneratedAttribute]
public void set_DisableAsynchronousProjectTreeLoad(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableProjectPrefetch();
    [CompilerGeneratedAttribute]
public void set_DisableProjectPrefetch(bool value);
    public string get_FolderGuid();
    public void set_FolderGuid(string value);
    public virtual void Register(RegistrationContext context);
    public virtual void Unregister(RegistrationContext context);
    private static string MakeRootedWithMacros(RegistrationContext context, string path);
    private string RegKeyName(RegistrationContext context);
}
public enum Microsoft.VisualStudio.ProjectSystem.VS.Properties.ExtenderCATIDType : Enum {
    public int value__;
    public static ExtenderCATIDType Unknown;
    public static ExtenderCATIDType ProjectBrowseObject;
    public static ExtenderCATIDType FileBrowseObject;
    public static ExtenderCATIDType FolderBrowseObject;
    public static ExtenderCATIDType ReferenceBrowseObject;
    public static ExtenderCATIDType ProjectConfigurationBrowseObject;
    public static ExtenderCATIDType ConfigurationBrowseObject;
    public static ExtenderCATIDType AutomationProject;
    public static ExtenderCATIDType AutomationProjectItem;
    public static ExtenderCATIDType AutomationReference;
    public static ExtenderCATIDType AutomationFolderProperties;
    public static ExtenderCATIDType HierarchyBrowseObject;
    public static ExtenderCATIDType HierarchyConfigurationBrowseObject;
    public static ExtenderCATIDType HierarchyExtensionObject;
}
public interface Microsoft.VisualStudio.ProjectSystem.VS.Properties.IDynamicPropertyModifier {
    public abstract virtual bool TryGetPropertyValue(string name, String& value);
    public abstract virtual Task`1<bool> SetPropertyValueAsync(string name, string value);
}
[ProjectSystemContractAttribute("1", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.Properties.IExtenderCATIDProvider {
    public abstract virtual string GetExtenderCATID(ExtenderCATIDType extenderCATIDType, IProjectTree treeNode);
}
public interface Microsoft.VisualStudio.ProjectSystem.VS.Properties.IPageMetadata {
    public string Name { get; }
    public Guid PageGuid { get; }
    public int PageOrder { get; }
    public bool HasConfigurationCondition { get; }
    public abstract virtual string get_Name();
    public abstract virtual Guid get_PageGuid();
    public abstract virtual int get_PageOrder();
    public abstract virtual bool get_HasConfigurationCondition();
}
[ProjectSystemContractAttribute("1", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.Properties.IVsProjectDesignerPageProvider {
    public abstract virtual Task`1<IReadOnlyCollection`1<IPageMetadata>> GetPagesAsync();
}
public class Microsoft.VisualStudio.ProjectSystem.VS.Properties.PropertyPageControl : UserControl {
    private PropertyPageUIFactoryBase parent;
    private IPropertyPageUIWindow hostWindow;
    [CompilerGeneratedAttribute]
private IList`1<IVsBrowseObjectContext> <ContextObjects>k__BackingField;
    public HelpInfo HelpInfo { get; }
    protected IPropertyPageUIWindow HostWindow { get; }
    protected PropertyPageUIFactoryBase ParentFactory { get; }
    protected IList`1<IVsBrowseObjectContext> ContextObjects { get; private set; }
    public PropertyPageControl(IPropertyPageUIWindow hostWindow, PropertyPageUIFactoryBase parent);
    public virtual HelpInfo get_HelpInfo();
    protected IPropertyPageUIWindow get_HostWindow();
    protected PropertyPageUIFactoryBase get_ParentFactory();
    [CompilerGeneratedAttribute]
protected IList`1<IVsBrowseObjectContext> get_ContextObjects();
    [CompilerGeneratedAttribute]
private void set_ContextObjects(IList`1<IVsBrowseObjectContext> value);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    public virtual void Activate(IntPtr parent, RECT[] rectangleArray, int modal);
    public virtual int Apply();
    public virtual void Deactivate();
    public virtual void GetPageInfo(PROPPAGEINFO[] pageInfo);
    public virtual void Help(string helpDir);
    public virtual int IsPageDirty();
    private sealed virtual override void Microsoft.VisualStudio.OLE.Interop.IPropertyPage.Move(RECT[] arrRect);
    public virtual void SetObjects(UInt32 count, Object[] punk);
    public virtual void SetPageSite(IPropertyPageSite theSite);
    public virtual void Show(UInt32 cmd);
    public virtual int TranslateAccelerator(MSG[] arrMsg);
    protected void SetObjectsInternal(UInt32 count, Object[] punk);
    protected Font GetDialogFont();
    protected PropertyGrid CreatePropertyGrid();
}
[MetadataAttributeAttribute]
[AttributeUsageAttribute("452")]
public class Microsoft.VisualStudio.ProjectSystem.VS.References.ExportIVsReferenceManagerUserAsyncAttribute : ExportAttribute {
    [CompilerGeneratedAttribute]
private string <ProviderContextIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public string ProviderContextIdentifier { get; private set; }
    public int Position { get; }
    [EditorBrowsableAttribute("1")]
public ExportIVsReferenceManagerUserAsyncAttribute(string providerContextIdentifier);
    public ExportIVsReferenceManagerUserAsyncAttribute(string providerContextIdentifier, int position);
    [CompilerGeneratedAttribute]
public string get_ProviderContextIdentifier();
    [CompilerGeneratedAttribute]
private void set_ProviderContextIdentifier(string value);
    [CompilerGeneratedAttribute]
public int get_Position();
}
[ProjectSystemContractAttribute("2", "2")]
public interface Microsoft.VisualStudio.ProjectSystem.VS.References.IVsReferenceManagerUserAsync {
    public abstract virtual bool IsApplicable();
    public abstract virtual Task`1<ExportLifetimeContext`1<object>> CreateProviderContextAsync();
    public abstract virtual Task ChangeReferencesAsync(UInt32 operation, object changedContext);
}
public interface Microsoft.VisualStudio.ProjectSystem.VS.References.IVsReferenceManagerUserComponentMetadataView {
    public string ProviderContextIdentifier { get; }
    public int Position { get; }
    public abstract virtual string get_ProviderContextIdentifier();
    public abstract virtual int get_Position();
}
internal class Microsoft.VisualStudio.ProjectSystem.VS.RelayCommand : object {
    private Action`1<object> execute;
    private Predicate`1<object> canExecute;
    public RelayCommand(Action`1<object> execute);
    public RelayCommand(Action`1<object> execute, Predicate`1<object> canExecute);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public void RequeryCanExecute();
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.ProjectSystem.VS.RetargetCheckOptions : Enum {
    public int value__;
    public static RetargetCheckOptions None;
    public static RetargetCheckOptions NoPrompt;
    public static RetargetCheckOptions RequiredOnly;
    public static RetargetCheckOptions FirstSolutionLoad;
    public static RetargetCheckOptions ProjectLoad;
    public static RetargetCheckOptions SolutionRetarget;
    public static RetargetCheckOptions ProjectRetarget;
    public static RetargetCheckOptions ProjectReload;
}
public enum Microsoft.VisualStudio.ProjectSystem.VS.RetargetOptions : Enum {
    public int value__;
    public static RetargetOptions None;
    public static RetargetOptions Backup;
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.ProjectSystem.VS.VsHierarchyExtensions : object {
    [ExtensionAttribute]
public static T GetProperty(IVsHierarchy hierarchy, VsHierarchyPropID property, T defaultValue);
    [ExtensionAttribute]
public static HierarchyId GetProperty(IVsHierarchy hierarchy, VsHierarchyPropID property, HierarchyId defaultValue);
    [ExtensionAttribute]
public static T GetProperty(IVsHierarchy hierarchy, HierarchyId item, VsHierarchyPropID property, T defaultValue);
    [ExtensionAttribute]
public static HierarchyId GetProperty(IVsHierarchy hierarchy, HierarchyId item, VsHierarchyPropID property, HierarchyId defaultValue);
    [ExtensionAttribute]
public static int GetProperty(IVsHierarchy hierarchy, HierarchyId item, VsHierarchyPropID property, T defaultValue, T& result);
    [ExtensionAttribute]
public static int GetProperty(IVsHierarchy hierarchy, HierarchyId item, VsHierarchyPropID property, HierarchyId defaultValue, HierarchyId& result);
    [ExtensionAttribute]
private static int GetPropertyCore(IVsHierarchy hierarchy, HierarchyId item, VsHierarchyPropID property, T defaultValue, T& result);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.ProjectSystem.VS.VsUtilities : object {
    [ExtensionAttribute]
public static UnconfiguredProject AsUnconfiguredProject(Project project);
    [ExtensionAttribute]
public static UnconfiguredProject AsUnconfiguredProject(IVsHierarchy hierarchy);
    [ExtensionAttribute]
public static UnconfiguredProject AsUnconfiguredProject(IVsProject project);
    [ExtensionAttribute]
public static ConfiguredProject AsConfiguredProject(IVsProjectCfg projectConfig);
}
[CompilerGeneratedAttribute]
[TypeIdentifierAttribute("90FAB8AC-6B65-4601-8FF0-D90169219A8C", "Microsoft.VisualStudio.Shell.Interop.__VSDOCUMENTPRIORITY2")]
public enum Microsoft.VisualStudio.Shell.Interop.__VSDOCUMENTPRIORITY2 : Enum {
    public int value__;
    public static __VSDOCUMENTPRIORITY2 DP2_Intrinsic;
    public static __VSDOCUMENTPRIORITY2 DP2_Standard;
    public static __VSDOCUMENTPRIORITY2 DP2_IndirectMember;
    public static __VSDOCUMENTPRIORITY2 DP2_NonMember;
    public static __VSDOCUMENTPRIORITY2 DP2_CanAddAsNonMember;
    public static __VSDOCUMENTPRIORITY2 DP2_External;
    public static __VSDOCUMENTPRIORITY2 DP2_CanAddAsExternal;
    public static __VSDOCUMENTPRIORITY2 DP2_Unsupported;
}
[CompilerGeneratedAttribute]
[GuidAttribute("257B63FA-8388-4FEB-9DB8-3DB22F4405DE")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IAsyncServiceProvider {
}
[CompilerGeneratedAttribute]
[GuidAttribute("8548668A-F63A-46BB-A3BD-5D053229820A")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsDebugger4 {
    public abstract virtual void LaunchDebugTargets4(UInt32 DebugTargetCount, VsDebugTargetInfo4[] pDebugTargets, VsDebugTargetProcessInfo[] pLaunchResults);
}
[CompilerGeneratedAttribute]
[GuidAttribute("89C76724-F4C4-4DA1-A7E9-996667924B2C")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetChange {
    [DispIdAttribute("1610678272")]
public Guid NewTargetId { get; }
    [DispIdAttribute("1610678273")]
public Guid CurrentTargetId { get; }
    [DispIdAttribute("1610678274")]
public bool ReloadProjectOnSuccess { get; }
    [DispIdAttribute("1610678275")]
public bool UnloadOnFailure { get; }
    [DispIdAttribute("1610678276")]
public bool UnloadOnCancel { get; }
    public abstract virtual Guid get_NewTargetId();
    public abstract virtual Guid get_CurrentTargetId();
    public abstract virtual bool get_ReloadProjectOnSuccess();
    public abstract virtual bool get_UnloadOnFailure();
    public abstract virtual bool get_UnloadOnCancel();
}
[CompilerGeneratedAttribute]
[TypeIdentifierAttribute("89304C43-8901-444E-A12A-A6126883BB09", "Microsoft.VisualStudio.Shell.Interop.VsAppPackageLaunchInfo")]
public class Microsoft.VisualStudio.Shell.Interop.VsAppPackageLaunchInfo : ValueType {
    public string PackageMoniker;
    public string AppUserModelID;
    public VsAppPackagePlatform AppPlatform;
}
[CompilerGeneratedAttribute]
[TypeIdentifierAttribute("89304C43-8901-444E-A12A-A6126883BB09", "Microsoft.VisualStudio.Shell.Interop.VsAppPackagePlatform")]
public enum Microsoft.VisualStudio.Shell.Interop.VsAppPackagePlatform : Enum {
    public int value__;
    public static VsAppPackagePlatform APPPLAT_WindowsAppx;
    public static VsAppPackagePlatform APPPLAT_WindowsPhoneXAP;
}
[CompilerGeneratedAttribute]
[TypeIdentifierAttribute("2D19180A-E07A-4AB3-8E9A-D71A217CEC78", "Microsoft.VisualStudio.Shell.Interop.VsDebugStartupInfo")]
public class Microsoft.VisualStudio.Shell.Interop.VsDebugStartupInfo : ValueType {
    public string lpReserved;
    public string lpDesktop;
    public string lpTitle;
    public UInt32 dwCreationFlags;
    public UInt32 dwX;
    public UInt32 dwY;
    public UInt32 dwXSize;
    public UInt32 dwYSize;
    public UInt32 dwXCountChars;
    public UInt32 dwYCountChars;
    public UInt32 dwFillAttribute;
    public UInt32 flags;
    public ushort wShowWindow;
    public ushort cbReserved2;
    public IntPtr lpReserved2;
    public UInt32 hStdInput;
    public UInt32 hStdOutput;
    public UInt32 hStdError;
}
[CompilerGeneratedAttribute]
[TypeIdentifierAttribute("89304C43-8901-444E-A12A-A6126883BB09", "Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4")]
public class Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo4 : ValueType {
    public UInt32 dlo;
    public UInt32 LaunchFlags;
    public string bstrRemoteMachine;
    public string bstrExe;
    public string bstrArg;
    public string bstrCurDir;
    public string bstrEnv;
    public UInt32 dwProcessId;
    public IntPtr pStartupInfo;
    public Guid guidLaunchDebugEngine;
    public UInt32 dwDebugEngineCount;
    public IntPtr pDebugEngines;
    public Guid guidPortSupplier;
    public string bstrPortName;
    public string bstrOptions;
    public int fSendToOutputWindow;
    public object pUnknown;
    public Guid guidProcessLanguage;
    public VsAppPackageLaunchInfo AppPackageLaunchInfo;
    public IVsHierarchy project;
}
[CompilerGeneratedAttribute]
[TypeIdentifierAttribute("2D19180A-E07A-4AB3-8E9A-D71A217CEC78", "Microsoft.VisualStudio.Shell.Interop.VsDebugTargetProcessInfo")]
public class Microsoft.VisualStudio.Shell.Interop.VsDebugTargetProcessInfo : ValueType {
    public UInt32 dwProcessId;
    public FILETIME creationTime;
}
internal class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
}
