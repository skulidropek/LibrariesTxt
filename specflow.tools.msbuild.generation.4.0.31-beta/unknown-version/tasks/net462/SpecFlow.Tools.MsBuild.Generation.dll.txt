public class SpecFlow.Tools.MsBuild.Generation.AssemblyResolveLogger : object {
    private ITaskLoggingWrapper _taskLoggingWrapper;
    private bool _isDisposed;
    public AssemblyResolveLogger(ITaskLoggingWrapper taskLoggingWrapper);
    protected virtual override void Finalize();
    public Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public class SpecFlow.Tools.MsBuild.Generation.AssemblyResolveLoggerFactory : object {
    private ITaskLoggingWrapper _taskLoggingWrapper;
    public AssemblyResolveLoggerFactory(ITaskLoggingWrapper taskLoggingWrapper);
    public sealed virtual IAssemblyResolveLogger Build();
}
public class SpecFlow.Tools.MsBuild.Generation.CodeBehindWriter : object {
    [CompilerGeneratedAttribute]
private TaskLoggingHelper <Log>k__BackingField;
    public TaskLoggingHelper Log { get; }
    public CodeBehindWriter(TaskLoggingHelper log);
    [CompilerGeneratedAttribute]
public TaskLoggingHelper get_Log();
    public string WriteCodeBehindFile(string outputPath, string featureFile, TestFileGeneratorResult testFileGeneratorResult);
}
public class SpecFlow.Tools.MsBuild.Generation.ExceptionTaskLogger : object {
    private ITaskLoggingWrapper _taskLoggingWrapper;
    public ExceptionTaskLogger(ITaskLoggingWrapper taskLoggingWrapper);
    public sealed virtual void LogException(Exception exception);
}
public class SpecFlow.Tools.MsBuild.Generation.FeatureCodeBehindGenerator : object {
    private ITestGenerator _testGenerator;
    public FeatureCodeBehindGenerator(ITestGenerator testGenerator);
    public TestFileGeneratorResult GenerateCodeBehindFile(string featureFile);
    public sealed virtual void Dispose();
}
public class SpecFlow.Tools.MsBuild.Generation.FeatureFileCodeBehindGenerator : object {
    private FilePathGenerator _filePathGenerator;
    private FeatureCodeBehindGenerator _featureCodeBehindGenerator;
    [CompilerGeneratedAttribute]
private TaskLoggingHelper <Log>k__BackingField;
    public TaskLoggingHelper Log { get; }
    public FeatureFileCodeBehindGenerator(TaskLoggingHelper log, FeatureCodeBehindGenerator featureCodeBehindGenerator);
    [CompilerGeneratedAttribute]
public TaskLoggingHelper get_Log();
    [IteratorStateMachineAttribute("SpecFlow.Tools.MsBuild.Generation.FeatureFileCodeBehindGenerator/<GenerateFilesForProject>d__6")]
public sealed virtual IEnumerable`1<string> GenerateFilesForProject(IReadOnlyCollection`1<string> featureFiles, string projectFolder, string outputPath);
}
public class SpecFlow.Tools.MsBuild.Generation.FilePathGenerator : object {
    public string GenerateFilePath(string projectFolder, string relativeOutputPath, string featureFileName, string generatedCodeBehindFileName);
}
public class SpecFlow.Tools.MsBuild.Generation.GenerateFeatureFileCodeBehindTask : Task {
    [CompilerGeneratedAttribute]
private IFeatureFileCodeBehindGenerator <CodeBehindGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnalyticsTransmitter <AnalyticsTransmitter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FeatureFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <GeneratorPlugins>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <GeneratedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSBuildVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectGuid>k__BackingField;
    public IFeatureFileCodeBehindGenerator CodeBehindGenerator { get; public set; }
    public IAnalyticsTransmitter AnalyticsTransmitter { get; public set; }
    [RequiredAttribute]
public string ProjectPath { get; public set; }
    public string RootNamespace { get; public set; }
    public string ProjectFolder { get; }
    public string OutputPath { get; public set; }
    public ITaskItem[] FeatureFiles { get; public set; }
    public ITaskItem[] GeneratorPlugins { get; public set; }
    [OutputAttribute]
public ITaskItem[] GeneratedFiles { get; private set; }
    public string MSBuildVersion { get; public set; }
    public string AssemblyName { get; public set; }
    public string TargetFrameworks { get; public set; }
    public string TargetFramework { get; public set; }
    public string ProjectGuid { get; public set; }
    [CompilerGeneratedAttribute]
public IFeatureFileCodeBehindGenerator get_CodeBehindGenerator();
    [CompilerGeneratedAttribute]
public void set_CodeBehindGenerator(IFeatureFileCodeBehindGenerator value);
    [CompilerGeneratedAttribute]
public IAnalyticsTransmitter get_AnalyticsTransmitter();
    [CompilerGeneratedAttribute]
public void set_AnalyticsTransmitter(IAnalyticsTransmitter value);
    [CompilerGeneratedAttribute]
public string get_ProjectPath();
    [CompilerGeneratedAttribute]
public void set_ProjectPath(string value);
    [CompilerGeneratedAttribute]
public string get_RootNamespace();
    [CompilerGeneratedAttribute]
public void set_RootNamespace(string value);
    public string get_ProjectFolder();
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FeatureFiles();
    [CompilerGeneratedAttribute]
public void set_FeatureFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_GeneratorPlugins();
    [CompilerGeneratedAttribute]
public void set_GeneratorPlugins(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_GeneratedFiles();
    [CompilerGeneratedAttribute]
private void set_GeneratedFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_MSBuildVersion();
    [CompilerGeneratedAttribute]
public void set_MSBuildVersion(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworks();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworks(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectGuid();
    [CompilerGeneratedAttribute]
public void set_ProjectGuid(string value);
    public virtual bool Execute();
}
public class SpecFlow.Tools.MsBuild.Generation.GenerateFeatureFileCodeBehindTaskConfiguration : object {
    [CompilerGeneratedAttribute]
private IAnalyticsTransmitter <OverrideAnalyticsTransmitter>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureFileCodeBehindGenerator <OverrideFeatureFileCodeBehindGenerator>k__BackingField;
    public IAnalyticsTransmitter OverrideAnalyticsTransmitter { get; }
    public IFeatureFileCodeBehindGenerator OverrideFeatureFileCodeBehindGenerator { get; }
    public GenerateFeatureFileCodeBehindTaskConfiguration(IAnalyticsTransmitter overrideAnalyticsTransmitter, IFeatureFileCodeBehindGenerator overrideFeatureFileCodeBehindGenerator);
    [CompilerGeneratedAttribute]
public IAnalyticsTransmitter get_OverrideAnalyticsTransmitter();
    [CompilerGeneratedAttribute]
public IFeatureFileCodeBehindGenerator get_OverrideFeatureFileCodeBehindGenerator();
}
public class SpecFlow.Tools.MsBuild.Generation.GenerateFeatureFileCodeBehindTaskContainerBuilder : object {
    public IObjectContainer BuildRootContainer(TaskLoggingHelper taskLoggingHelper, SpecFlowProjectInfo specFlowProjectInfo, IMSBuildInformationProvider msbuildInformationProvider, GenerateFeatureFileCodeBehindTaskConfiguration generateFeatureFileCodeBehindTaskConfiguration);
}
public class SpecFlow.Tools.MsBuild.Generation.GenerateFeatureFileCodeBehindTaskExecutor : object {
    private IProcessInfoDumper _processInfoDumper;
    private ITaskLoggingWrapper _taskLoggingWrapper;
    private ISpecFlowProjectProvider _specFlowProjectProvider;
    private SpecFlowProjectInfo _specFlowProjectInfo;
    private WrappedGeneratorContainerBuilder _wrappedGeneratorContainerBuilder;
    private IObjectContainer _rootObjectContainer;
    private IMSBuildTaskAnalyticsTransmitter _msbuildTaskAnalyticsTransmitter;
    private IExceptionTaskLogger _exceptionTaskLogger;
    public GenerateFeatureFileCodeBehindTaskExecutor(IProcessInfoDumper processInfoDumper, ITaskLoggingWrapper taskLoggingWrapper, ISpecFlowProjectProvider specFlowProjectProvider, SpecFlowProjectInfo specFlowProjectInfo, WrappedGeneratorContainerBuilder wrappedGeneratorContainerBuilder, IObjectContainer rootObjectContainer, IMSBuildTaskAnalyticsTransmitter msbuildTaskAnalyticsTransmitter, IExceptionTaskLogger exceptionTaskLogger);
    public sealed virtual IResult`1<IReadOnlyCollection`1<ITaskItem>> Execute();
}
public interface SpecFlow.Tools.MsBuild.Generation.IAssemblyResolveLogger {
}
public interface SpecFlow.Tools.MsBuild.Generation.IAssemblyResolveLoggerFactory {
    public abstract virtual IAssemblyResolveLogger Build();
}
public interface SpecFlow.Tools.MsBuild.Generation.IExceptionTaskLogger {
    public abstract virtual void LogException(Exception exception);
}
public interface SpecFlow.Tools.MsBuild.Generation.IFeatureFileCodeBehindGenerator {
    public abstract virtual IEnumerable`1<string> GenerateFilesForProject(IReadOnlyCollection`1<string> featureFiles, string projectFolder, string outputPath);
}
public interface SpecFlow.Tools.MsBuild.Generation.IGenerateFeatureFileCodeBehindTaskExecutor {
    public abstract virtual IResult`1<IReadOnlyCollection`1<ITaskItem>> Execute();
}
public interface SpecFlow.Tools.MsBuild.Generation.IMSBuildInformationProvider {
    public abstract virtual string GetMSBuildVersion();
}
public interface SpecFlow.Tools.MsBuild.Generation.IMSBuildTaskAnalyticsTransmitter {
    public abstract virtual Task TryTransmitProjectCompilingEventAsync();
}
public interface SpecFlow.Tools.MsBuild.Generation.IProcessInfoDumper {
    public abstract virtual void DumpProcessInfo();
}
public interface SpecFlow.Tools.MsBuild.Generation.IProjectCodeBehindGenerator {
    public abstract virtual IReadOnlyCollection`1<ITaskItem> GenerateCodeBehindFilesForProject();
}
public interface SpecFlow.Tools.MsBuild.Generation.ISpecFlowProjectProvider {
    public abstract virtual SpecFlowProject GetSpecFlowProject();
}
public interface SpecFlow.Tools.MsBuild.Generation.ITaskLoggingWrapper {
    public abstract virtual void LogMessage(string message);
    public abstract virtual void LogMessageWithLowImportance(string message);
    public abstract virtual void LogError(string message);
    public abstract virtual bool HasLoggedErrors();
}
[ExtensionAttribute]
public static class SpecFlow.Tools.MsBuild.Generation.LogExtensions : object {
    [ExtensionAttribute]
public static void LogWithNameTag(TaskLoggingHelper loggingHelper, Action`2<string, Object[]> loggingMethod, string message, Object[] messageArgs);
}
public class SpecFlow.Tools.MsBuild.Generation.MSBuildInformationProvider : object {
    private string _msbuildVersion;
    public MSBuildInformationProvider(string msbuildVersion);
    public sealed virtual string GetMSBuildVersion();
}
public class SpecFlow.Tools.MsBuild.Generation.MSBuildTaskAnalyticsTransmitter : object {
    private IAnalyticsEventProvider _analyticsEventProvider;
    private IMSBuildInformationProvider _msBuildInformationProvider;
    private SpecFlowProjectInfo _specFlowProjectInfo;
    private IAnalyticsTransmitter _analyticsTransmitter;
    private ITaskLoggingWrapper _taskLoggingWrapper;
    public MSBuildTaskAnalyticsTransmitter(IAnalyticsEventProvider analyticsEventProvider, IMSBuildInformationProvider msBuildInformationProvider, SpecFlowProjectInfo specFlowProjectInfo, IAnalyticsTransmitter analyticsTransmitter, ITaskLoggingWrapper taskLoggingWrapper);
    [AsyncStateMachineAttribute("SpecFlow.Tools.MsBuild.Generation.MSBuildTaskAnalyticsTransmitter/<TryTransmitProjectCompilingEventAsync>d__6")]
public sealed virtual Task TryTransmitProjectCompilingEventAsync();
    [AsyncStateMachineAttribute("SpecFlow.Tools.MsBuild.Generation.MSBuildTaskAnalyticsTransmitter/<TransmitProjectCompilingEventAsync>d__7")]
public Task`1<IResult> TransmitProjectCompilingEventAsync();
}
public class SpecFlow.Tools.MsBuild.Generation.MSBuildTraceListener : object {
    private TaskLoggingHelper _taskLoggingHelper;
    public MSBuildTraceListener(TaskLoggingHelper taskLoggingHelper);
    public sealed virtual void WriteTestOutput(string message);
    public sealed virtual void WriteToolOutput(string message);
}
public class SpecFlow.Tools.MsBuild.Generation.ProcessInfoDumper : object {
    private ITaskLoggingWrapper _taskLoggingWrapper;
    public ProcessInfoDumper(ITaskLoggingWrapper taskLoggingWrapper);
    public sealed virtual void DumpProcessInfo();
}
public class SpecFlow.Tools.MsBuild.Generation.ProjectCodeBehindGenerator : object {
    private IFeatureFileCodeBehindGenerator _featureFileCodeBehindGenerator;
    private SpecFlowProjectInfo _specFlowProjectInfo;
    public ProjectCodeBehindGenerator(IFeatureFileCodeBehindGenerator featureFileCodeBehindGenerator, SpecFlowProjectInfo specFlowProjectInfo);
    public sealed virtual IReadOnlyCollection`1<ITaskItem> GenerateCodeBehindFilesForProject();
}
public class SpecFlow.Tools.MsBuild.Generation.ReplaceTokenInFileTask : Task {
    [CompilerGeneratedAttribute]
private string <InputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextToReplace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextToReplaceWith>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteOnlyWhenChanged>k__BackingField;
    [RequiredAttribute]
public string InputFile { get; public set; }
    [RequiredAttribute]
public string OutputFile { get; public set; }
    [RequiredAttribute]
public string TextToReplace { get; public set; }
    [RequiredAttribute]
public string TextToReplaceWith { get; public set; }
    public bool WriteOnlyWhenChanged { get; public set; }
    [CompilerGeneratedAttribute]
public string get_InputFile();
    [CompilerGeneratedAttribute]
public void set_InputFile(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(string value);
    [CompilerGeneratedAttribute]
public string get_TextToReplace();
    [CompilerGeneratedAttribute]
public void set_TextToReplace(string value);
    [CompilerGeneratedAttribute]
public string get_TextToReplaceWith();
    [CompilerGeneratedAttribute]
public void set_TextToReplaceWith(string value);
    [CompilerGeneratedAttribute]
public bool get_WriteOnlyWhenChanged();
    [CompilerGeneratedAttribute]
public void set_WriteOnlyWhenChanged(bool value);
    public virtual bool Execute();
}
public class SpecFlow.Tools.MsBuild.Generation.SpecFlowProjectInfo : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<GeneratorPluginInfo> <GeneratorPlugins>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <FeatureFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectAssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentTargetFramework>k__BackingField;
    public IReadOnlyCollection`1<GeneratorPluginInfo> GeneratorPlugins { get; }
    public IReadOnlyCollection`1<string> FeatureFiles { get; }
    public string ProjectPath { get; }
    public string ProjectFolder { get; }
    public string ProjectGuid { get; }
    public string ProjectAssemblyName { get; }
    public string OutputPath { get; }
    public string RootNamespace { get; }
    public string TargetFrameworks { get; }
    public string CurrentTargetFramework { get; }
    public SpecFlowProjectInfo(IReadOnlyCollection`1<GeneratorPluginInfo> generatorPlugins, IReadOnlyCollection`1<string> featureFiles, string projectPath, string projectFolder, string projectGuid, string projectAssemblyName, string outputPath, string rootNamespace, string targetFrameworks, string currentTargetFramework);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<GeneratorPluginInfo> get_GeneratorPlugins();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_FeatureFiles();
    [CompilerGeneratedAttribute]
public string get_ProjectPath();
    [CompilerGeneratedAttribute]
public string get_ProjectFolder();
    [CompilerGeneratedAttribute]
public string get_ProjectGuid();
    [CompilerGeneratedAttribute]
public string get_ProjectAssemblyName();
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public string get_RootNamespace();
    [CompilerGeneratedAttribute]
public string get_TargetFrameworks();
    [CompilerGeneratedAttribute]
public string get_CurrentTargetFramework();
}
public class SpecFlow.Tools.MsBuild.Generation.SpecFlowProjectProvider : object {
    private IMSBuildProjectReader _msbuildProjectReader;
    private SpecFlowProjectInfo _specFlowProjectInfo;
    public SpecFlowProjectProvider(IMSBuildProjectReader msbuildProjectReader, SpecFlowProjectInfo specFlowProjectInfo);
    public sealed virtual SpecFlowProject GetSpecFlowProject();
}
public class SpecFlow.Tools.MsBuild.Generation.TaskLoggingHelperWithNameTagWrapper : object {
    private TaskLoggingHelper _taskLoggingHelper;
    public TaskLoggingHelperWithNameTagWrapper(TaskLoggingHelper taskLoggingHelper);
    public sealed virtual void LogMessage(string message);
    public sealed virtual void LogMessageWithLowImportance(string message);
    public sealed virtual void LogError(string message);
    public sealed virtual bool HasLoggedErrors();
    public string GetMessageWithNameTag(string message);
}
public class SpecFlow.Tools.MsBuild.Generation.TestFileGeneratorResult : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<TestGenerationError> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUpToDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeneratedTestCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    public IEnumerable`1<TestGenerationError> Errors { get; }
    public bool IsUpToDate { get; }
    public string GeneratedTestCode { get; }
    public bool Success { get; }
    public string Filename { get; }
    public TestFileGeneratorResult(TestGeneratorResult generatorResult, string fileName);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TestGenerationError> get_Errors();
    [CompilerGeneratedAttribute]
public bool get_IsUpToDate();
    [CompilerGeneratedAttribute]
public string get_GeneratedTestCode();
    public bool get_Success();
    [CompilerGeneratedAttribute]
public string get_Filename();
}
public class SpecFlow.Tools.MsBuild.Generation.WrappedGeneratorContainerBuilder : object {
    private GeneratorContainerBuilder _generatorContainerBuilder;
    private GenerateFeatureFileCodeBehindTaskConfiguration _generateFeatureFileCodeBehindTaskConfiguration;
    public WrappedGeneratorContainerBuilder(GeneratorContainerBuilder generatorContainerBuilder, GenerateFeatureFileCodeBehindTaskConfiguration generateFeatureFileCodeBehindTaskConfiguration);
    public IObjectContainer BuildGeneratorContainer(SpecFlowConfigurationHolder specFlowConfigurationHolder, ProjectSettings projectSettings, IReadOnlyCollection`1<GeneratorPluginInfo> generatorPluginInfos, IObjectContainer rootObjectContainer);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.5.107.25444")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
