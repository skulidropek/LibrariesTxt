public interface TechTalk.SpecFlow.Parser.IGherkinParser {
    public IGherkinDialectProvider DialectProvider { get; }
    public abstract virtual SpecFlowDocument Parse(TextReader featureFileReader, SpecFlowDocumentLocation documentLocation);
    public abstract virtual IGherkinDialectProvider get_DialectProvider();
}
public interface TechTalk.SpecFlow.Parser.IGherkinParserFactory {
    public abstract virtual IGherkinParser Create(IGherkinDialectProvider dialectProvider);
    public abstract virtual IGherkinParser Create(CultureInfo cultureInfo);
}
internal interface TechTalk.SpecFlow.Parser.ISemanticValidator {
    public abstract virtual List`1<SemanticParserException> Validate(SpecFlowFeature feature);
}
[ExtensionAttribute]
public static class TechTalk.SpecFlow.Parser.ParserExtensions : object {
    [ExtensionAttribute]
public static ParserException[] GetParserExceptions(ParserException parserException);
    [ExtensionAttribute]
public static Nullable`1<ScenarioBlock> ToScenarioBlock(StepKeyword stepKeyword);
    [ExtensionAttribute]
public static string GetNameWithoutAt(Tag tag);
    [ExtensionAttribute]
public static bool HasTags(IHasTags hasTags);
    [ExtensionAttribute]
public static bool HasTags(StepsContainer scenarioDefinition);
    [ExtensionAttribute]
public static IEnumerable`1<Tag> GetTags(StepsContainer scenarioDefinition);
}
public enum TechTalk.SpecFlow.Parser.ScenarioBlock : Enum {
    public int value__;
    public static ScenarioBlock Given;
    public static ScenarioBlock When;
    public static ScenarioBlock Then;
}
public class TechTalk.SpecFlow.Parser.ScenarioOutline : Scenario {
    public ScenarioOutline(Tag[] tags, Location location, string keyword, string name, string description, Step[] steps, Examples[] examples);
}
public class TechTalk.SpecFlow.Parser.SemanticParserException : ParserException {
    public SemanticParserException(string message);
    public SemanticParserException(string message, Location location);
}
internal class TechTalk.SpecFlow.Parser.SemanticValidators.DuplicateExamplesColumnHeadersValidator : object {
    public sealed virtual List`1<SemanticParserException> Validate(SpecFlowFeature feature);
}
internal class TechTalk.SpecFlow.Parser.SemanticValidators.DuplicateExamplesValidator : object {
    public sealed virtual List`1<SemanticParserException> Validate(SpecFlowFeature feature);
}
internal class TechTalk.SpecFlow.Parser.SemanticValidators.DuplicateScenariosValidator : object {
    public sealed virtual List`1<SemanticParserException> Validate(SpecFlowFeature feature);
}
internal class TechTalk.SpecFlow.Parser.SemanticValidators.MissingExamplesValidator : object {
    public sealed virtual List`1<SemanticParserException> Validate(SpecFlowFeature feature);
    private static bool DoesntHavePopulatedExamples(ScenarioOutline scenarioOutline);
}
public class TechTalk.SpecFlow.Parser.SpecFlowDocument : GherkinDocument {
    [CompilerGeneratedAttribute]
private SpecFlowDocumentLocation <DocumentLocation>k__BackingField;
    public SpecFlowFeature SpecFlowFeature { get; }
    public SpecFlowDocumentLocation DocumentLocation { get; private set; }
    public string SourceFilePath { get; }
    public SpecFlowDocument(SpecFlowFeature feature, Comment[] comments, SpecFlowDocumentLocation documentLocation);
    public SpecFlowFeature get_SpecFlowFeature();
    [CompilerGeneratedAttribute]
public SpecFlowDocumentLocation get_DocumentLocation();
    [CompilerGeneratedAttribute]
private void set_DocumentLocation(SpecFlowDocumentLocation value);
    public string get_SourceFilePath();
}
public class TechTalk.SpecFlow.Parser.SpecFlowDocumentLocation : object {
    [CompilerGeneratedAttribute]
private string <SourceFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FeatureFolderPath>k__BackingField;
    public string SourceFilePath { get; private set; }
    public string FeatureFolderPath { get; private set; }
    public SpecFlowDocumentLocation(string sourceFilePath);
    public SpecFlowDocumentLocation(string sourceFilePath, string featureFolderPath);
    [CompilerGeneratedAttribute]
public string get_SourceFilePath();
    [CompilerGeneratedAttribute]
private void set_SourceFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_FeatureFolderPath();
    [CompilerGeneratedAttribute]
private void set_FeatureFolderPath(string value);
}
public class TechTalk.SpecFlow.Parser.SpecFlowFeature : Feature {
    [CompilerGeneratedAttribute]
private IEnumerable`1<StepsContainer> <ScenarioDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private Background <Background>k__BackingField;
    public IEnumerable`1<StepsContainer> ScenarioDefinitions { get; private set; }
    public Background Background { get; private set; }
    public SpecFlowFeature(Tag[] tags, Location location, string language, string keyword, string name, string description, IHasLocation[] children);
    [CompilerGeneratedAttribute]
public IEnumerable`1<StepsContainer> get_ScenarioDefinitions();
    [CompilerGeneratedAttribute]
private void set_ScenarioDefinitions(IEnumerable`1<StepsContainer> value);
    [CompilerGeneratedAttribute]
public Background get_Background();
    [CompilerGeneratedAttribute]
private void set_Background(Background value);
    public bool HasFeatureBackground();
}
public class TechTalk.SpecFlow.Parser.SpecFlowGherkinParser : object {
    private IGherkinDialectProvider dialectProvider;
    private List`1<ISemanticValidator> semanticValidators;
    public IGherkinDialectProvider DialectProvider { get; }
    public SpecFlowGherkinParser(IGherkinDialectProvider dialectProvider);
    public SpecFlowGherkinParser(CultureInfo defaultLanguage);
    public sealed virtual IGherkinDialectProvider get_DialectProvider();
    private static StepKeyword GetStepKeyword(GherkinDialect dialect, string stepKeyword);
    public sealed virtual SpecFlowDocument Parse(TextReader featureFileReader, SpecFlowDocumentLocation documentLocation);
    protected virtual ITokenScanner CreateTokenScanner(TextReader featureFileReader);
    protected virtual ITokenMatcher CreateTokenMatcher();
    protected virtual IAstBuilder`1<SpecFlowDocument> CreateAstBuilder(SpecFlowDocumentLocation documentLocation);
    protected virtual void CheckSemanticErrors(SpecFlowDocument specFlowDocument);
}
public class TechTalk.SpecFlow.Parser.SpecFlowGherkinParserFactory : object {
    public sealed virtual IGherkinParser Create(IGherkinDialectProvider dialectProvider);
    public sealed virtual IGherkinParser Create(CultureInfo cultureInfo);
}
public static class TechTalk.SpecFlow.Parser.SpecFlowLocation : object {
    [CompilerGeneratedAttribute]
private static Location <Empty>k__BackingField;
    public static Location Empty { get; }
    private static SpecFlowLocation();
    [CompilerGeneratedAttribute]
public static Location get_Empty();
}
public class TechTalk.SpecFlow.Parser.SpecFlowStep : Step {
    [CompilerGeneratedAttribute]
private ScenarioBlock <ScenarioBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private StepKeyword <StepKeyword>k__BackingField;
    public ScenarioBlock ScenarioBlock { get; private set; }
    public StepKeyword StepKeyword { get; private set; }
    public SpecFlowStep(Location location, string keyword, string text, StepArgument argument, StepKeyword stepKeyword, ScenarioBlock scenarioBlock);
    [CompilerGeneratedAttribute]
public ScenarioBlock get_ScenarioBlock();
    [CompilerGeneratedAttribute]
private void set_ScenarioBlock(ScenarioBlock value);
    [CompilerGeneratedAttribute]
public StepKeyword get_StepKeyword();
    [CompilerGeneratedAttribute]
private void set_StepKeyword(StepKeyword value);
}
public enum TechTalk.SpecFlow.Parser.StepKeyword : Enum {
    public int value__;
    public static StepKeyword Given;
    public static StepKeyword When;
    public static StepKeyword Then;
    public static StepKeyword And;
    public static StepKeyword But;
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.5.107.25444")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
