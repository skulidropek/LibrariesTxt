public static class TechTalk.SpecFlow.Utils.FileFilter : object {
    public static IReadOnlyCollection`1<string> GetValidFiles(IReadOnlyCollection`1<string> filePaths);
    private static bool ValidFile(string filePath);
    private static bool ValidateFileName(string filePath);
    private static bool ValidateFilePath(string filePath);
}
public class TechTalk.SpecFlow.Utils.FileSystem : object {
    public sealed virtual bool FileExists(string path);
    public sealed virtual bool DirectoryExists(string path);
    public sealed virtual String[] GetDirectories(string path);
    public sealed virtual String[] GetDirectories(string path, string searchPattern);
    public sealed virtual String[] GetDirectories(string path, string searchPattern, SearchOption searchOptions);
    public sealed virtual IEnumerable`1<string> EnumerateDirectories(string path);
    public sealed virtual IEnumerable`1<string> EnumerateDirectories(string path, string searchPattern);
    public sealed virtual IEnumerable`1<string> EnumerateDirectories(string path, string searchPattern, SearchOption searchOptions);
}
public static class TechTalk.SpecFlow.Utils.FileSystemHelper : object {
    public static void CopyFileToFolder(string filePath, string folderName);
    public static string GetRelativePath(string path, string basePath);
    public static bool FileCompare(string filePath1, string filePath2);
    public static bool FileCompareContent(string filePath1, string fileContent);
}
public interface TechTalk.SpecFlow.Utils.IFileSystem {
    public abstract virtual bool FileExists(string path);
    public abstract virtual bool DirectoryExists(string path);
    public abstract virtual String[] GetDirectories(string path);
    public abstract virtual String[] GetDirectories(string path, string searchPattern);
    public abstract virtual String[] GetDirectories(string path, string searchPattern, SearchOption searchOptions);
    public abstract virtual IEnumerable`1<string> EnumerateDirectories(string path);
    public abstract virtual IEnumerable`1<string> EnumerateDirectories(string path, string searchPattern);
    public abstract virtual IEnumerable`1<string> EnumerateDirectories(string path, string searchPattern, SearchOption searchOptions);
}
internal class TechTalk.SpecFlow.Utils.ProcessHelper : object {
    private static TimeSpan _timeout;
    private static int _timeOutInMilliseconds;
    [CompilerGeneratedAttribute]
private string <ConsoleOutput>k__BackingField;
    public string ConsoleOutput { get; private set; }
    private static ProcessHelper();
    [CompilerGeneratedAttribute]
public string get_ConsoleOutput();
    [CompilerGeneratedAttribute]
private void set_ConsoleOutput(string value);
    public int RunProcess(string executablePath, string argumentsFormat, Object[] arguments);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.5.107.25444")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
