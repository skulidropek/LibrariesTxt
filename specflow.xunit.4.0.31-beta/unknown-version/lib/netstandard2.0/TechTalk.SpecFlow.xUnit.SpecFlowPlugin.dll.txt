[AttributeUsageAttribute("1")]
public class TechTalk.SpecFlow.xUnit.SpecFlowPlugin.AssemblyFixtureAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <FixtureType>k__BackingField;
    public Type FixtureType { get; }
    public AssemblyFixtureAttribute(Type fixtureType);
    [CompilerGeneratedAttribute]
public Type get_FixtureType();
}
public class TechTalk.SpecFlow.xUnit.SpecFlowPlugin.RuntimePlugin : object {
    public sealed virtual void Initialize(RuntimePluginEvents runtimePluginEvents, RuntimePluginParameters runtimePluginParameters, UnitTestProviderConfiguration unitTestProviderConfiguration);
    private void RuntimePluginEvents_RegisterGlobalDependencies(object sender, RegisterGlobalDependenciesEventArgs e);
    private void RuntimePluginEvents_CustomizeTestThreadDependencies(object sender, CustomizeTestThreadDependenciesEventArgs e);
}
public class TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitInconclusiveException : Exception {
    public XUnitInconclusiveException(string message);
    public XUnitInconclusiveException(string message, Exception inner);
    protected XUnitInconclusiveException(SerializationInfo info, StreamingContext context);
}
public class TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker : object {
    public static XUnitParallelWorkerTracker Instance;
    private ConcurrentBag`1<string> _availableWorkers;
    private int _workerCount;
    private static XUnitParallelWorkerTracker();
    public string GetWorkerId();
    public void ReleaseWorker(string workerId);
}
public class TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitPendingStepException : SpecFlowException {
    public XUnitPendingStepException(string message);
    public XUnitPendingStepException(string message, Exception inner);
    protected XUnitPendingStepException(SerializationInfo info, StreamingContext context);
}
public class TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitRuntimeProvider : object {
    public bool DelayedFixtureTearDown { get; }
    public sealed virtual void TestPending(string message);
    public sealed virtual void TestInconclusive(string message);
    public sealed virtual void TestIgnore(string message);
    public sealed virtual bool get_DelayedFixtureTearDown();
}
public class TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XunitTestAssemblyRunnerWithAssemblyFixture : XunitTestAssemblyRunner {
    private Dictionary`2<Type, object> _assemblyFixtureMappings;
    public XunitTestAssemblyRunnerWithAssemblyFixture(ITestAssembly testAssembly, IEnumerable`1<IXunitTestCase> testCases, IMessageSink diagnosticMessageSink, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
    [AsyncStateMachineAttribute("TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XunitTestAssemblyRunnerWithAssemblyFixture/<AfterTestAssemblyStartingAsync>d__2")]
protected virtual Task AfterTestAssemblyStartingAsync();
    protected virtual Task BeforeTestAssemblyFinishedAsync();
    protected virtual Task`1<RunSummary> RunTestCollectionAsync(IMessageBus messageBus, ITestCollection testCollection, IEnumerable`1<IXunitTestCase> testCases, CancellationTokenSource cancellationTokenSource);
    [AsyncStateMachineAttribute("TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XunitTestAssemblyRunnerWithAssemblyFixture/<<AfterTestAssemblyStartingAsync>b__2_0>d")]
[CompilerGeneratedAttribute]
private Task <AfterTestAssemblyStartingAsync>b__2_0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
public class TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XunitTestCollectionRunnerWithAssemblyFixture : XunitTestCollectionRunner {
    private Dictionary`2<Type, object> _assemblyFixtureMappings;
    private IMessageSink _diagnosticMessageSink;
    public XunitTestCollectionRunnerWithAssemblyFixture(Dictionary`2<Type, object> assemblyFixtureMappings, ITestCollection testCollection, IEnumerable`1<IXunitTestCase> testCases, IMessageSink diagnosticMessageSink, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    protected virtual Task`1<RunSummary> RunTestClassAsync(ITestClass testClass, IReflectionTypeInfo class, IEnumerable`1<IXunitTestCase> testCases);
}
public class TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XunitTestFrameworkExecutorWithAssemblyFixture : XunitTestFrameworkExecutor {
    public XunitTestFrameworkExecutorWithAssemblyFixture(AssemblyName assemblyName, ISourceInformationProvider sourceInformationProvider, IMessageSink diagnosticMessageSink);
    [AsyncStateMachineAttribute("TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XunitTestFrameworkExecutorWithAssemblyFixture/<RunTestCases>d__1")]
protected virtual void RunTestCases(IEnumerable`1<IXunitTestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
}
public class TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XunitTestFrameworkWithAssemblyFixture : XunitTestFramework {
    public XunitTestFrameworkWithAssemblyFixture(IMessageSink messageSink);
    protected virtual ITestFrameworkExecutor CreateExecutor(AssemblyName assemblyName);
}
internal class TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitTraceListener : AsyncTraceListener {
    private Lazy`1<IContextManager> _contextManager;
    public XUnitTraceListener(ITraceListenerQueue traceListenerQueue, IObjectContainer container);
    private ITestOutputHelper GetTestOutputHelper();
    public virtual void WriteTestOutput(string message);
    public virtual void WriteToolOutput(string message);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.5.107.25444")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
