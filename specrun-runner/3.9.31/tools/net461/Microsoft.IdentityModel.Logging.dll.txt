[EventSourceAttribute]
public class Microsoft.IdentityModel.Logging.IdentityModelEventSource : EventSource {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static IdentityModelEventSource <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventLevel <LogLevel>k__BackingField;
    public static IdentityModelEventSource Logger { get; }
    public EventLevel LogLevel { get; public set; }
    private static IdentityModelEventSource();
    [CompilerGeneratedAttribute]
public static IdentityModelEventSource get_Logger();
    [EventAttribute("6")]
public void WriteAlways(string message);
    [NonEventAttribute]
public void WriteAlways(string message, Object[] args);
    [EventAttribute("1")]
public void WriteVerbose(string message);
    [NonEventAttribute]
public void WriteVerbose(string message, Object[] args);
    [EventAttribute("2")]
public void WriteInformation(string message);
    [NonEventAttribute]
public void WriteInformation(string message, Object[] args);
    [EventAttribute("3")]
public void WriteWarning(string message);
    [NonEventAttribute]
public void WriteWarning(string message, Object[] args);
    [EventAttribute("4")]
public void WriteError(string message);
    [NonEventAttribute]
public void WriteError(string message, Object[] args);
    [EventAttribute("5")]
public void WriteCritical(string message);
    [NonEventAttribute]
public void WriteCritical(string message, Object[] args);
    [NonEventAttribute]
public void Write(EventLevel level, Exception innerException, string message);
    [NonEventAttribute]
public void Write(EventLevel level, Exception innerException, string message, Object[] args);
    [CompilerGeneratedAttribute]
public EventLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public void set_LogLevel(EventLevel value);
    private string PrepareMessage(EventLevel level, string message, Object[] args);
}
public class Microsoft.IdentityModel.Logging.LogHelper : object {
    public static ArgumentNullException LogArgumentNullException(string argument);
    public static T LogException(string message);
    public static T LogArgumentException(string argumentName, string message);
    public static T LogException(string format, Object[] args);
    public static T LogArgumentException(string argumentName, string format, Object[] args);
    public static T LogException(Exception innerException, string message);
    public static T LogArgumentException(string argumentName, Exception innerException, string message);
    public static T LogException(Exception innerException, string format, Object[] args);
    public static T LogArgumentException(string argumentName, Exception innerException, string format, Object[] args);
    public static T LogException(EventLevel eventLevel, string message);
    public static T LogArgumentException(EventLevel eventLevel, string argumentName, string message);
    public static T LogException(EventLevel eventLevel, string format, Object[] args);
    public static T LogArgumentException(EventLevel eventLevel, string argumentName, string format, Object[] args);
    public static T LogException(EventLevel eventLevel, Exception innerException, string message);
    public static T LogArgumentException(EventLevel eventLevel, string argumentName, Exception innerException, string message);
    public static T LogException(EventLevel eventLevel, Exception innerException, string format, Object[] args);
    public static T LogArgumentException(EventLevel eventLevel, string argumentName, Exception innerException, string format, Object[] args);
    public static Exception LogExceptionMessage(Exception exception);
    public static Exception LogExceptionMessage(EventLevel eventLevel, Exception exception);
    private static T LogExceptionImpl(EventLevel eventLevel, string argumentName, Exception innerException, string format, Object[] args);
}
internal static class Microsoft.IdentityModel.Logging.LogMessages : object {
    internal static string MIML10000;
    internal static string MIML10001;
    internal static string MIML11000;
    internal static string MIML11001;
    internal static string MIML11002;
    internal static string IDX10000;
}
public class Microsoft.IdentityModel.Logging.TextWriterEventListener : EventListener {
    private StreamWriter _streamWriter;
    private bool _disposeStreamWriter;
    public static string DefaultLogFileName;
    public TextWriterEventListener(string filePath);
    public TextWriterEventListener(StreamWriter streamWriter);
    private static TextWriterEventListener();
    protected virtual void OnEventWritten(EventWrittenEventArgs eventData);
    public virtual void Dispose();
}
