internal static class AssemblyRef : object {
    internal static string EcmaPublicKey;
    internal static string EcmaPublicKeyToken;
    internal static string EcmaPublicKeyFull;
    internal static string SilverlightPublicKey;
    internal static string SilverlightPublicKeyToken;
    internal static string SilverlightPublicKeyFull;
    internal static string SilverlightPlatformPublicKey;
    internal static string SilverlightPlatformPublicKeyToken;
    internal static string SilverlightPlatformPublicKeyFull;
    internal static string PlatformPublicKey;
    internal static string PlatformPublicKeyToken;
    internal static string PlatformPublicKeyFull;
    internal static string Mscorlib;
    internal static string SystemData;
    internal static string SystemDataOracleClient;
    internal static string System;
    internal static string SystemCore;
    internal static string SystemNumerics;
    internal static string SystemRuntimeRemoting;
    internal static string SystemWindowsForms;
    internal static string SystemXml;
    internal static string MicrosoftPublicKey;
    internal static string MicrosoftPublicKeyToken;
    internal static string MicrosoftPublicKeyFull;
    internal static string SharedLibPublicKey;
    internal static string SharedLibPublicKeyToken;
    internal static string SharedLibPublicKeyFull;
    internal static string SystemComponentModelDataAnnotations;
    internal static string SystemConfiguration;
    internal static string SystemConfigurationInstall;
    internal static string SystemDeployment;
    internal static string SystemDesign;
    internal static string SystemDirectoryServices;
    internal static string SystemDrawingDesign;
    internal static string SystemDrawing;
    internal static string SystemEnterpriseServices;
    internal static string SystemManagement;
    internal static string SystemMessaging;
    internal static string SystemRuntimeSerializationFormattersSoap;
    internal static string SystemSecurity;
    internal static string SystemServiceProcess;
    internal static string SystemWeb;
    internal static string SystemWebAbstractions;
    internal static string SystemWebDynamicData;
    internal static string SystemWebDynamicDataDesign;
    internal static string SystemWebEntityDesign;
    internal static string SystemWebExtensions;
    internal static string SystemWebExtensionsDesign;
    internal static string SystemWebMobile;
    internal static string SystemWebRegularExpressions;
    internal static string SystemWebRouting;
    internal static string SystemWebServices;
    internal static string WindowsBase;
    internal static string MicrosoftVisualStudio;
    internal static string MicrosoftVisualStudioWindowsForms;
    internal static string VJSharpCodeProvider;
    internal static string ASPBrowserCapsPublicKey;
    internal static string ASPBrowserCapsFactory;
    internal static string MicrosoftVSDesigner;
    internal static string MicrosoftVisualStudioWeb;
    internal static string MicrosoftWebDesign;
    internal static string MicrosoftVSDesignerMobile;
    internal static string MicrosoftJScript;
}
internal static class FXAssembly : object {
    internal static string Version;
}
internal interface Microsoft.Web.Publishing.IVSMSDeployHost {
    public string TaskName { get; }
    public TaskLoggingHelper Log { get; }
    public IBuildEngine BuildEngine { get; }
    public abstract virtual string get_TaskName();
    public abstract virtual TaskLoggingHelper get_Log();
    public abstract virtual IBuildEngine get_BuildEngine();
    public abstract virtual void PopulateOptions(object options);
    public abstract virtual void UpdateDeploymentBaseOptions(VSMSDeployObject srcVsMsDeployobject, VSMSDeployObject destVsMsDeployobject);
    public abstract virtual void ClearDeploymentBaseOptions(VSMSDeployObject srcVsMsDeployobject, VSMSDeployObject destVsMsDeployobject);
}
internal class Microsoft.Web.Publishing.Tasks.ADSIIISResolver : object {
    private string m_strIISDirectoryServiceString;
    private int m_IisMajorVersion;
    private DirectoryEntry m_iISWebDirectoryEntry;
    private string m_strIISWebNumber;
    private string m_strIISWebServerComment;
    private UriWrapper m_uri;
    [CompilerGeneratedAttribute]
private string <AppHostConfigDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MatchScore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRunning>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppPoolName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLocalhost>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Initialized>k__BackingField;
    public string AppHostConfigDirectory { get; public set; }
    public string WebServerDirectory { get; public set; }
    public string WebServerManifest { get; public set; }
    public int MatchScore { get; public set; }
    public bool IsRunning { get; public set; }
    public string AppPoolName { get; public set; }
    public bool UseLocalhost { get; public set; }
    internal DirectoryEntry IISWebDirectoryEntry { get; }
    internal string IisDirectoryServiceString { get; }
    public int IisMajorVersion { get; }
    private bool Initialized { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_AppHostConfigDirectory();
    [CompilerGeneratedAttribute]
public void set_AppHostConfigDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WebServerDirectory();
    [CompilerGeneratedAttribute]
public void set_WebServerDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WebServerManifest();
    [CompilerGeneratedAttribute]
public void set_WebServerManifest(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MatchScore();
    [CompilerGeneratedAttribute]
public void set_MatchScore(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRunning();
    [CompilerGeneratedAttribute]
public void set_IsRunning(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AppPoolName();
    [CompilerGeneratedAttribute]
public void set_AppPoolName(string value);
    [CompilerGeneratedAttribute]
public bool get_UseLocalhost();
    [CompilerGeneratedAttribute]
public void set_UseLocalhost(bool value);
    internal DirectoryEntry get_IISWebDirectoryEntry();
    internal string get_IisDirectoryServiceString();
    public static string GetWebNumberForServer(int iisVersion, DirectoryEntry iISWebDirectoryEntry, Uri uri, string severName, IPAddress[] iPAddresses, bool bServerNameMatchesMachine, Boolean& isRunning, Int32& matchScore);
    internal static string GetIPAddressString(IPAddress iPAddress);
    internal static int GetScore(ServiceBindingMatchScore serviceBindingMatchScore);
    internal static ServiceBindingMatchScore ServerBindingMatch(int iisVersion, DirectoryEntry websiteDirectoryEntry, Uri uri, string severName, IPAddress[] iPAddresses, bool fServerNameMatchesMachine);
    public sealed virtual int get_IisMajorVersion();
    [CompilerGeneratedAttribute]
private bool get_Initialized();
    [CompilerGeneratedAttribute]
private void set_Initialized(bool value);
    public sealed virtual bool Initialize(UriWrapper uri, bool useLocalHost);
    public sealed virtual string GetSiteNumber();
    private DirectoryEntry GetClosestVirtualDirectory(DirectoryEntry entry, string webpath, Int32& currentMax);
    public sealed virtual string GetIisWebsiteFriendlyName();
    public void Cleanup();
    public sealed virtual void Dispose();
}
public class Microsoft.Web.Publishing.Tasks.AspNetMerge : ToolTask {
    private string _applicationPath;
    private string _keyFile;
    private bool _delaySign;
    private string _prefix;
    private string _singleAssemblyName;
    private bool _debug;
    private bool _nologo;
    private string _contentAssemblyName;
    private bool _errorStack;
    private string _exePath;
    private bool _removeCompiledFiles;
    private bool _mergeXmlDocs;
    private string _logErrorFile;
    private bool _copyAttributes;
    private string _assemblyInfo;
    [RequiredAttribute]
public string ExePath { get; public set; }
    [RequiredAttribute]
public string ApplicationPath { get; public set; }
    public string KeyFile { get; public set; }
    public bool DelaySign { get; public set; }
    public string Prefix { get; public set; }
    public string SingleAssemblyName { get; public set; }
    public bool Debug { get; public set; }
    public bool NoLogo { get; public set; }
    public string ContentAssemblyName { get; public set; }
    public bool ErrorStack { get; public set; }
    public bool RemoveCompiledFiles { get; public set; }
    public bool CopyAttributes { get; public set; }
    public bool MergeXmlDocs { get; public set; }
    public string ErrorLogFile { get; public set; }
    public string AssemblyInfo { get; public set; }
    protected string ToolName { get; }
    public virtual bool Execute();
    public string get_ExePath();
    public void set_ExePath(string value);
    public string get_ApplicationPath();
    public void set_ApplicationPath(string value);
    public string get_KeyFile();
    public void set_KeyFile(string value);
    public bool get_DelaySign();
    public void set_DelaySign(bool value);
    public string get_Prefix();
    public void set_Prefix(string value);
    public string get_SingleAssemblyName();
    public void set_SingleAssemblyName(string value);
    public bool get_Debug();
    public void set_Debug(bool value);
    public bool get_NoLogo();
    public void set_NoLogo(bool value);
    public string get_ContentAssemblyName();
    public void set_ContentAssemblyName(string value);
    public bool get_ErrorStack();
    public void set_ErrorStack(bool value);
    public bool get_RemoveCompiledFiles();
    public void set_RemoveCompiledFiles(bool value);
    public bool get_CopyAttributes();
    public void set_CopyAttributes(bool value);
    public bool get_MergeXmlDocs();
    public void set_MergeXmlDocs(bool value);
    public string get_ErrorLogFile();
    public void set_ErrorLogFile(string value);
    public string get_AssemblyInfo();
    public void set_AssemblyInfo(string value);
    protected virtual string GenerateCommandLineCommands();
    protected virtual string get_ToolName();
    protected virtual string GenerateFullPathToTool();
    protected virtual bool ValidateParameters();
}
public abstract class Microsoft.Web.Publishing.Tasks.AttributeTransform : Transform {
    private XmlNode transformAttributeSource;
    private XmlNodeList transformAttributes;
    private XmlNode targetAttributeSource;
    private XmlNodeList targetAttributes;
    protected XmlNodeList TransformAttributes { get; }
    protected XmlNodeList TargetAttributes { get; }
    protected XmlNodeList get_TransformAttributes();
    protected XmlNodeList get_TargetAttributes();
    private XmlNodeList GetAttributesFrom(XmlNode node);
    private XmlNodeList GetAttributesFrom(XmlNode node, string argument, bool warnIfEmpty);
    private XmlNodeList GetAttributesFrom(XmlNode node, IList`1<string> arguments, bool warnIfEmpty);
}
internal abstract class Microsoft.Web.Publishing.Tasks.BaseMSDeployDriver : object {
    protected VSMSDeployObject _dest;
    protected VSMSDeployObject _src;
    protected IVSMSDeployHost _host;
    [DynamicAttribute]
protected object _option;
    protected bool _isCancelOperation;
    protected string _cancelMessage;
    public string TaskName { get; }
    public bool IsCancelOperation { get; public set; }
    public string CancelMessage { get; public set; }
    protected BaseMSDeployDriver(VSMSDeployObject src, VSMSDeployObject dest, IVSMSDeployHost host);
    public string get_TaskName();
    public bool get_IsCancelOperation();
    public void set_IsCancelOperation(bool value);
    public string get_CancelMessage();
    public void set_CancelMessage(string value);
    private bool CancelCallback();
    protected object CreateOptionIfNeeded();
    private void TraceEventHandlerDynamic(object sender, object e);
    protected void InvokeMSdeploySync();
    public void SyncThruMSDeploy();
    protected abstract virtual void BeforeSync();
    protected abstract virtual void StartSync();
    protected abstract virtual void WaitForDone();
    protected abstract virtual void LogTrace(object e);
    protected abstract virtual void AfterSync();
    public static BaseMSDeployDriver CreateBaseMSDeployDriver(VSMSDeployObject src, VSMSDeployObject dest, IVSMSDeployHost host);
}
public class Microsoft.Web.Publishing.Tasks.CheckALinkIncluded : Task {
    private string m_linkName;
    private string m_links;
    private bool m_result;
    [RequiredAttribute]
public string LinkName { get; public set; }
    public string Links { get; public set; }
    [OutputAttribute]
public bool Result { get; }
    public string get_LinkName();
    public void set_LinkName(string value);
    public string get_Links();
    public void set_Links(string value);
    public bool get_Result();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.CheckItemsCount : Task {
    private ITaskItem[] m_items;
    private int m_count;
    [RequiredAttribute]
public ITaskItem[] Items { get; public set; }
    [OutputAttribute]
public int Count { get; }
    public ITaskItem[] get_Items();
    public void set_Items(ITaskItem[] value);
    public int get_Count();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.CheckItemsForDuplication : Task {
    private ITaskItem[] m_items;
    private string m_metaDataToVerify;
    private bool m_hasDuplicate;
    private TraceLevel m_traceLevel;
    public string MetadataToVerify { get; public set; }
    [RequiredAttribute]
public ITaskItem[] Items { get; public set; }
    [OutputAttribute]
public bool HasDuplicate { get; }
    public string TraceLevel { get; public set; }
    public string get_MetadataToVerify();
    public void set_MetadataToVerify(string value);
    public ITaskItem[] get_Items();
    public void set_Items(ITaskItem[] value);
    public bool get_HasDuplicate();
    public string get_TraceLevel();
    public void set_TraceLevel(string value);
    private void LogDuplicate(ITaskItem existingItem, ITaskItem newItem);
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.CheckPathAttributes : Task {
    private string m_path;
    private bool m_isFolder;
    private bool m_isRooted;
    private bool m_isExists;
    [RequiredAttribute]
public string Path { get; public set; }
    [OutputAttribute]
public bool IsFolder { get; }
    [OutputAttribute]
public bool IsRooted { get; }
    [OutputAttribute]
public bool IsExists { get; }
    public string get_Path();
    public void set_Path(string value);
    public bool get_IsFolder();
    public bool get_IsRooted();
    public bool get_IsExists();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.CollectFilesinFolder : Task {
    private ITaskItem[] m_fullPathMatchs;
    private ITaskItem[] m_relativePathMatchs;
    private ITaskItem[] m_excludeFullPathMatchs;
    private ITaskItem[] m_excludeRelativePathMatchs;
    private List`1<ITaskItem> m_resultITaskItem;
    private string m_rootPath;
    private bool m_recursive;
    [RequiredAttribute]
public string RootPath { get; public set; }
    public ITaskItem[] FullPathMatchs { get; public set; }
    public ITaskItem[] RelativePathMatchs { get; public set; }
    public ITaskItem[] ExcludeFullPathMatchs { get; public set; }
    public ITaskItem[] ExcludeRelativePathMatchs { get; public set; }
    public bool Recursive { get; public set; }
    [OutputAttribute]
public ITaskItem[] Result { get; }
    private bool IncludeAll { get; }
    public string get_RootPath();
    public void set_RootPath(string value);
    public ITaskItem[] get_FullPathMatchs();
    public void set_FullPathMatchs(ITaskItem[] value);
    public ITaskItem[] get_RelativePathMatchs();
    public void set_RelativePathMatchs(ITaskItem[] value);
    public ITaskItem[] get_ExcludeFullPathMatchs();
    public void set_ExcludeFullPathMatchs(ITaskItem[] value);
    public ITaskItem[] get_ExcludeRelativePathMatchs();
    public void set_ExcludeRelativePathMatchs(ITaskItem[] value);
    public bool get_Recursive();
    public void set_Recursive(bool value);
    public ITaskItem[] get_Result();
    private bool get_IncludeAll();
    private static bool ShouldPathAdded(string fullPath, string relativePath, bool defaultInclude, Regex[] fullPathMatchs, Regex[] relativePathMatchs, Regex[] excludeFullPathMatchs, Regex[] excludeRelativePathMatchs);
    private static void CollectAllFiles(string rootPath, DirectoryInfo dirinfo, bool recursive, List`1<ITaskItem> result, bool defaultInclude, Regex[] fullPathMatchs, Regex[] relativePathMatchs, Regex[] excludeFullPathMatchs, Regex[] excludeRelativePathMatchs);
    private static Regex[] CreateRegexs(ITaskItem[] items);
    public virtual bool Execute();
}
internal enum Microsoft.Web.Publishing.Tasks.Common.DeclareParameterMetadata : Enum {
    public int value__;
    public static DeclareParameterMetadata Kind;
    public static DeclareParameterMetadata Scope;
    public static DeclareParameterMetadata Match;
    public static DeclareParameterMetadata Description;
    public static DeclareParameterMetadata DefaultValue;
    public static DeclareParameterMetadata Tags;
}
internal enum Microsoft.Web.Publishing.Tasks.Common.ExistingDeclareParameterMetadata : Enum {
    public int value__;
    public static ExistingDeclareParameterMetadata Kind;
    public static ExistingDeclareParameterMetadata Scope;
    public static ExistingDeclareParameterMetadata Match;
}
internal enum Microsoft.Web.Publishing.Tasks.Common.ExistingParameterValiationMetadata : Enum {
    public int value__;
    public static ExistingParameterValiationMetadata Element;
    public static ExistingParameterValiationMetadata Kind;
    public static ExistingParameterValiationMetadata ValidationString;
}
internal enum Microsoft.Web.Publishing.Tasks.Common.ExistingSyncParameterMetadata : Enum {
    public int value__;
    public static ExistingSyncParameterMetadata Kind;
    public static ExistingSyncParameterMetadata Scope;
    public static ExistingSyncParameterMetadata Match;
    public static ExistingSyncParameterMetadata Value;
}
internal static class Microsoft.Web.Publishing.Tasks.Common.ItemFilter : object {
    public static bool ItemFilterPipelineMetadata(ITaskItem item, string metadataName, string metadataValue, bool fIgnoreCase);
    public static bool ItemFilterExcludeTrue(ITaskItem iTaskItem);
}
internal class Microsoft.Web.Publishing.Tasks.Common.ParameterInfo : object {
    public string Name;
    public string Value;
    public ParameterInfo(string parameterName, string parameterStringValue);
}
internal class Microsoft.Web.Publishing.Tasks.Common.ParameterInfoWithEntry : ParameterInfo {
    public string Kind;
    public string Scope;
    public string Match;
    public string Description;
    public string DefaultValue;
    public string Tags;
    public string Element;
    public string ValidationString;
    public ParameterInfoWithEntry(string name, string value, string kind, string scope, string matchRegularExpression, string description, string defaultValue, string tags, string element, string validationString);
}
internal enum Microsoft.Web.Publishing.Tasks.Common.PipelineMetadata : Enum {
    public int value__;
    public static PipelineMetadata DestinationRelativePath;
    public static PipelineMetadata Exclude;
    public static PipelineMetadata FromTarget;
    public static PipelineMetadata Category;
}
internal class Microsoft.Web.Publishing.Tasks.Common.ProviderOption : ParameterInfo {
    public string FactoryName;
    public ProviderOption(string factorName, string parameterName, string parameterStringValue);
}
internal enum Microsoft.Web.Publishing.Tasks.Common.ReplaceRuleMetadata : Enum {
    public int value__;
    public static ReplaceRuleMetadata ObjectName;
    public static ReplaceRuleMetadata ScopeAttributeName;
    public static ReplaceRuleMetadata ScopeAttributeValue;
    public static ReplaceRuleMetadata TargetAttributeName;
    public static ReplaceRuleMetadata Match;
    public static ReplaceRuleMetadata Replace;
}
internal enum Microsoft.Web.Publishing.Tasks.Common.SimpleSyncParameterMetadata : Enum {
    public int value__;
    public static SimpleSyncParameterMetadata Value;
}
internal enum Microsoft.Web.Publishing.Tasks.Common.SkipRuleMetadata : Enum {
    public int value__;
    public static SkipRuleMetadata SkipAction;
    public static SkipRuleMetadata ObjectName;
    public static SkipRuleMetadata AbsolutePath;
    public static SkipRuleMetadata XPath;
    public static SkipRuleMetadata KeyAttribute;
}
internal enum Microsoft.Web.Publishing.Tasks.Common.SqlCommandVariableMetaData : Enum {
    public int value__;
    public static SqlCommandVariableMetaData Value;
    public static SqlCommandVariableMetaData IsDeclared;
    public static SqlCommandVariableMetaData SourcePath;
    public static SqlCommandVariableMetaData SourcePath_RegExExcaped;
    public static SqlCommandVariableMetaData DestinationGroup;
}
internal enum Microsoft.Web.Publishing.Tasks.Common.SyncParameterMetadata : Enum {
    public int value__;
    public static SyncParameterMetadata Kind;
    public static SyncParameterMetadata Scope;
    public static SyncParameterMetadata Match;
    public static SyncParameterMetadata Value;
    public static SyncParameterMetadata Description;
    public static SyncParameterMetadata DefaultValue;
    public static SyncParameterMetadata Tags;
}
internal static class Microsoft.Web.Publishing.Tasks.Common.Utility : object {
    private static Dictionary`2<string, string> m_wellKnownNamesDict;
    private static Dictionary`2<string, string> m_wellKnownNamesMsdeployDict;
    private static StringBuilder m_stringBuilder;
    private static bool _isMSDeployInstalled;
    private static string _strErrorMessage;
    private static string s_strMinimumVersion;
    private static PriorityIndexComparer s_PriorityIndexComparer;
    private static string strMsdeployFwlink1;
    private static string strMsdeployFwlink2;
    private static string strMsdeployFwlink3;
    private static string strMsdeployFwlink4;
    private static string strMsdeployFwlink5;
    internal static string strMsdeployInstallationFwdLink;
    private static String[] strMsdeployFwlinks;
    [CompilerGeneratedAttribute]
private static Func`2<string, Version> CS$<>9__CachedAnonymousMethodDelegatead;
    private static StringBuilder StringBuilder { get; }
    public static StringBuilder CleanStringBuilder { get; }
    public static bool IsMSDeployInstalled { get; }
    internal static PriorityIndexComparer ParameterTaskComparer { get; }
    private static Utility();
    public static bool IsInternalMsdeployWellKnownItemMetadata(string name);
    public static bool IsMSBuildWellKnownItemMetadata(string name);
    public static bool IsMsDeployWellKnownLocationInfo(string name);
    private static StringBuilder get_StringBuilder();
    public static StringBuilder get_CleanStringBuilder();
    public static UInt32 GetInstalledMajorIisVersion();
    public static bool IsIis6(string verFromTarget);
    public static bool get_IsMSDeployInstalled();
    public static bool CheckMSDeploymentVersion(Task task);
    private static bool CheckMSDeploymentVersion();
    public static string GetNodeFromProjectFile(XmlDocument doc, XmlNamespaceManager xmlnsManager, string xmlPath, string defaultNamespace);
    internal static void BuildArgumentsBaseOnEnumTypeName(ITaskItem item, List`1<string> arguments, Type enumType, string valueQuote);
    internal static string AlternativeQuote(string valueQuote);
    internal static string PutValueInQuote(string value, string quote);
    public static void MsDeployEndOfExecuteMessage(bool bSuccess, string destType, string destRoot, TaskLoggingHelper Log);
    public static string ConvertAbsPhysicalPathToAbsUriPath(string physicalPath);
    public static void AddReplaceRulesToOptions(object syncConfigRules, ITaskItem[] replaceRuleItems);
    internal static void AdjsutSkipDirectives(object baseOptions, List`1<string> stringList, bool enabled, TaskLoggingHelper log);
    public static void AddSkipDirectiveToBaseOptions(object baseOptions, ITaskItem[] skipRuleItems, List`1<string> enableSkipDirectiveList, List`1<string> disableSkipDirectiveList, TaskLoggingHelper log);
    public static void AddDeclarParameterToOptions(object vSMSDeploySyncOption, ITaskItem item);
    public static void SetDynamicProperty(object thisObj, string propertyName, object value);
    public static void AddDeclareParametersToOptions(object vSMSDeploySyncOption, ITaskItem[] originalItems, bool fOptimisticPickNextDefaultValue);
    public static void AddImportDeclareParametersFileOptions(object vSMSDeploySyncOption, ITaskItem[] items);
    public static void AddSetParametersFilesToObject(object deploymentObject, IList`1<string> filenames, IVSMSDeployHost host);
    public static void AddSimpleSetParametersVsMsDeployObject(VSMSDeployObject srcVsMsDeployobject, ITaskItem[] originalItems, bool fOptimisticPickNextDefaultValue);
    public static void AddProviderOptions(object deploymentProviderOptions, IList`1<ProviderOption> providerOptions, IVSMSDeployHost host);
    public static void AddSimpleSetParametersToObject(object deploymentObject, IList`1<ParameterInfo> parameters, IVSMSDeployHost host);
    public static void AddSetParametersToObject(object deploymentObject, IList`1<ParameterInfoWithEntry> parameters, IVSMSDeployHost host);
    public static void AddSetParametersVsMsDeployObject(VSMSDeployObject srcVsMsDeployobject, ITaskItem[] originalItems, bool fOptimisticPickNextDefaultValue);
    public static void AddSetParametersFilesVsMsDeployObject(VSMSDeployObject srcVsMsDeployobject, ITaskItem[] items);
    public static string DumpITeaskItem(ITaskItem iTaskItem);
    public static bool IsDeploymentWellKnownProvider(string strProvider);
    internal static void RemoveAllEmptyDirectories(string dirPath, TaskLoggingHelper Log);
    internal static void RemoveAllEmptyDirectories(DirectoryInfo dirinfo, TaskLoggingHelper log);
    internal static PriorityIndexComparer get_ParameterTaskComparer();
    public static IList`1<ITaskItem> SortParametersTaskItems(ITaskItem[] taskItems, bool fOptimisticPickNextNonNullDefaultValue, string PropertyName);
    private static int ContainMsdeployFwlink(string errorMessage, String& provider);
    internal static bool IsType(Type type, Type checkType);
    internal static string EnsureTrailingSlash(string str);
    internal static string EnsureTrailingBackSlash(string str);
    internal static void LogVsMsDeployException(TaskLoggingHelper Log, Exception e);
    public static IList`1<ITaskItem> SortTaskItemsByPriority(ITaskItem[] taskItems);
    public static string StripOffTrailingSlashes(string str);
    public static string EnsureTrailingSlashes(string rootPath, char slash);
    public static string GetFilePathResolution(string source, string sourceRootPath);
    internal static string GetIPAddressString(IPAddress iPAddress);
    internal static bool MatchOneOfIPAddress(string IISBindingIPString, IPAddress[] iPAddresses);
    internal static void SetupMSWebDeployDynamicAssemblies(string strVersionsToTry, Task task);
    [CompilerGeneratedAttribute]
private static Version <SetupMSWebDeployDynamicAssemblies>b__ac(string p);
}
internal static class Microsoft.Web.Publishing.Tasks.CommonErrors : object {
    internal static void ExpectNoArguments(XmlTransformationLogger log, string transformName, string argumentString);
    internal static void WarnIfMultipleTargets(XmlTransformationLogger log, string transformName, XmlNodeList targetNodes, bool applyTransformToAllTargets);
}
public class Microsoft.Web.Publishing.Tasks.ConcatFullServiceUrlWithSiteName : Task {
    private string m_serviceUrl;
    private string m_siteAppName;
    private string m_resultUrl;
    [RequiredAttribute]
public string ServiceUrl { get; public set; }
    [RequiredAttribute]
public string SiteAppName { get; public set; }
    [OutputAttribute]
public string ResultUrl { get; }
    public string get_ServiceUrl();
    public void set_ServiceUrl(string value);
    public string get_SiteAppName();
    public void set_SiteAppName(string value);
    public string get_ResultUrl();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.Condition : Locator {
    protected virtual string ConstructPredicate();
}
public class Microsoft.Web.Publishing.Tasks.CopyPipelineFiles : Task {
    private ITaskItem[] m_pipeLineItemsITaskItem;
    private List`1<ITaskItem> m_updateItemsITaskItem;
    private bool m_updateItemSpec;
    private bool m_skipMetadataExcludeTrueItems;
    private bool m_deleteItemsMarkAsExcludeTrue;
    private int m_maxRetries;
    private int m_retryDelay;
    [CompilerGeneratedAttribute]
private string <TargetDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceDirectory>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] PipelineItems { get; public set; }
    [OutputAttribute]
public ITaskItem[] ResultPipelineItems { get; }
    [OutputAttribute]
public ITaskItem[] UpdatedPipelineItems { get; }
    [RequiredAttribute]
public string TargetDirectory { get; public set; }
    [RequiredAttribute]
public string SourceDirectory { get; public set; }
    public bool SkipMetadataExcludeTrueItems { get; public set; }
    public bool DeleteItemsMarkAsExcludeTrue { get; public set; }
    public int MaxRetries { get; public set; }
    public int RetryDelay { get; public set; }
    public bool UpdateItemSpec { get; public set; }
    public ITaskItem[] get_PipelineItems();
    public void set_PipelineItems(ITaskItem[] value);
    public ITaskItem[] get_ResultPipelineItems();
    public ITaskItem[] get_UpdatedPipelineItems();
    [CompilerGeneratedAttribute]
public string get_TargetDirectory();
    [CompilerGeneratedAttribute]
public void set_TargetDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_SourceDirectory();
    [CompilerGeneratedAttribute]
public void set_SourceDirectory(string value);
    public bool get_SkipMetadataExcludeTrueItems();
    public void set_SkipMetadataExcludeTrueItems(bool value);
    public bool get_DeleteItemsMarkAsExcludeTrue();
    public void set_DeleteItemsMarkAsExcludeTrue(bool value);
    public int get_MaxRetries();
    public void set_MaxRetries(int value);
    public int get_RetryDelay();
    public void set_RetryDelay(int value);
    public bool get_UpdateItemSpec();
    public void set_UpdateItemSpec(bool value);
    public virtual bool Execute();
    internal static bool CopyPipelineFilesToFolder(TaskLoggingHelper log, ITaskItem[] allpipeLineItems, string sourceFolderName, string targetFolderName, ItemMetadataFilter itemMetadataSkipFilter, bool fUpdateItemSpec, bool deleteItemsMarkAsExcludeTrue, List`1<ITaskItem> updatedPipeLineItems, List`1<ITaskItem> failedPipeLineItems);
    internal static bool CreateDirectoryInNeeded(TaskLoggingHelper log, string folderName);
}
public class Microsoft.Web.Publishing.Tasks.CreateProviderList : Task {
    private static string TypeAttribute;
    private static string PathAttribute;
    private static string NameAttribute;
    private static string OrderAttribute;
    private static string DescriptionAttribute;
    private static string EnabledAttribute;
    private static string PreSource;
    private static string SourceManifestTag;
    private static string DestinationManifestTag;
    private static string ObjectGroupTag;
    private static string ObjectTag;
    private static string IncludeTag;
    private ITaskItem _providersFile;
    private ITaskItem[] _list;
    private ITaskItem[] _sourceManifest;
    private string _providersXml;
    [CompilerGeneratedAttribute]
private string <IntermediateOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSDeployVersionsToTry>k__BackingField;
    public ITaskItem ProvidersFile { get; public set; }
    public string ProvidersXml { get; public set; }
    [RequiredAttribute]
public string IntermediateOutputPath { get; public set; }
    [OutputAttribute]
public ITaskItem[] List { get; }
    [OutputAttribute]
public ITaskItem[] SourceManifest { get; }
    public string MSDeployVersionsToTry { get; public set; }
    private string Microsoft.Web.Publishing.IVSMSDeployHost.TaskName { get; }
    private TaskLoggingHelper Microsoft.Web.Publishing.IVSMSDeployHost.Log { get; }
    private IBuildEngine Microsoft.Web.Publishing.IVSMSDeployHost.BuildEngine { get; }
    public ITaskItem get_ProvidersFile();
    public void set_ProvidersFile(ITaskItem value);
    public string get_ProvidersXml();
    public void set_ProvidersXml(string value);
    [CompilerGeneratedAttribute]
public string get_IntermediateOutputPath();
    [CompilerGeneratedAttribute]
public void set_IntermediateOutputPath(string value);
    public ITaskItem[] get_List();
    public ITaskItem[] get_SourceManifest();
    [CompilerGeneratedAttribute]
public string get_MSDeployVersionsToTry();
    [CompilerGeneratedAttribute]
public void set_MSDeployVersionsToTry(string value);
    public virtual bool Execute();
    private sealed virtual override string Microsoft.Web.Publishing.IVSMSDeployHost.get_TaskName();
    private sealed virtual override TaskLoggingHelper Microsoft.Web.Publishing.IVSMSDeployHost.get_Log();
    private sealed virtual override IBuildEngine Microsoft.Web.Publishing.IVSMSDeployHost.get_BuildEngine();
    private sealed virtual override void Microsoft.Web.Publishing.IVSMSDeployHost.PopulateOptions(object options);
    private sealed virtual override void Microsoft.Web.Publishing.IVSMSDeployHost.UpdateDeploymentBaseOptions(VSMSDeployObject srcVsMsDeployobject, VSMSDeployObject destVsMsDeployobject);
    private sealed virtual override void Microsoft.Web.Publishing.IVSMSDeployHost.ClearDeploymentBaseOptions(VSMSDeployObject srcVsMsDeployobject, VSMSDeployObject destVsMsDeployobject);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Web.Publishing.Tasks.CustomBuildWithPropertiesEventArgs : CustomBuildEventArgs {
    private HybridDictionary m_hybridDictionary;
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public CustomBuildWithPropertiesEventArgs(string msg, string keyword, string senderName);
    public sealed virtual void Add(object key, object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object key);
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection get_Keys();
    public sealed virtual void Remove(object key);
    public sealed virtual ICollection get_Values();
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.Web.Publishing.Tasks.DefaultLocator : Locator {
    private static DefaultLocator instance;
    internal static DefaultLocator Instance { get; }
    private static DefaultLocator();
    internal static DefaultLocator get_Instance();
}
internal enum Microsoft.Web.Publishing.Tasks.DeployStatus : Enum {
    public int value__;
    public static DeployStatus ReadyToDeploy;
    public static DeployStatus Deploying;
    public static DeployStatus DeployFinished;
    public static DeployStatus DeployAbandoned;
    public static DeployStatus DeployFailed;
}
internal class Microsoft.Web.Publishing.Tasks.DynamicAssembly : object {
    [CompilerGeneratedAttribute]
private string <AssemblyFullName>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<object, Type> CS$<>9__CachedAnonymousMethodDelegate1;
    public string AssemblyFullName { get; public set; }
    public Version Version { get; public set; }
    public Assembly Assembly { get; public set; }
    public DynamicAssembly(string assemblyName, Version verToLoad, string publicKeyToken);
    [CompilerGeneratedAttribute]
public string get_AssemblyFullName();
    [CompilerGeneratedAttribute]
public void set_AssemblyFullName(string value);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(Version value);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
public void set_Assembly(Assembly value);
    public Type GetType(string typeName);
    public object GetEnumValue(string enumName, string enumValue);
    public object GetEnumValueIgnoreCase(string enumName, string enumValue);
    public bool TryGetEnumValue(string enumTypeName, string enumStrValue, Object& retValue);
    public object CreateObject(string typeName);
    public object CreateObject(string typeName, Object[] arguments);
    public object CallStaticMethod(string typeName, string methodName, Object[] arguments);
    internal static Delegate CreateEventHandlerDelegate(EventInfo evt, TDelegate d);
    public static Delegate AddEventDeferHandler(object obj, string eventName, Delegate deferEventHandler);
    public static void AddEventHandler(object obj, string eventName, Delegate eventHandler);
    public static void RemoveEventHandler(object obj, string eventName, Delegate eventHandler);
    [CompilerGeneratedAttribute]
private static Type <CreateObject>b__0(object p);
    [CompilerGeneratedAttribute]
private static ParameterExpression <CreateEventHandlerDelegate>b__2(ParameterInfo p);
}
public class Microsoft.Web.Publishing.Tasks.EscapeTextForRegularExpressions : Task {
    private string m_text;
    private string m_resultRegularExpression;
    [RequiredAttribute]
public string Text { get; public set; }
    [OutputAttribute]
public string Result { get; }
    public string get_Text();
    public void set_Text(string value);
    public string get_Result();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.ExportManifestFile : Task {
    private ITaskItem[] m_manifests;
    private string m_manifestFile;
    private bool m_generateFileEvenIfEmpty;
    [RequiredAttribute]
public ITaskItem[] Manifests { get; public set; }
    [RequiredAttribute]
public string ManifestFile { get; public set; }
    public bool GenerateFileEvenIfEmpty { get; public set; }
    public ITaskItem[] get_Manifests();
    public void set_Manifests(ITaskItem[] value);
    public string get_ManifestFile();
    public void set_ManifestFile(string value);
    public bool get_GenerateFileEvenIfEmpty();
    public void set_GenerateFileEvenIfEmpty(bool value);
    private static void SaveDocument(XmlDocument document, string outputFileName, Encoding encode);
    private static void WriteManifestsToFile(TaskLoggingHelper loggingHelper, ITaskItem[] items, string outputFileName);
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.ExportParametersFile : Task {
    private ITaskItem[] m_parameters;
    private string m_declareParametersFile;
    private string m_declareSetParametersFile;
    private string m_setParametersFile;
    private bool m_generateFileEvenIfEmpty;
    private static String[] s_parameterAttributes;
    private static String[] s_setParameterAttributes;
    private static String[] s_parameterEntryIdentities;
    private static String[] s_parameterValidationIdentities;
    [CompilerGeneratedAttribute]
private bool <OptimisticParameterDefaultValue>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] Parameters { get; public set; }
    public string DeclareParameterFile { get; public set; }
    public string DeclareSetParameterFile { get; public set; }
    public string SetParameterFile { get; public set; }
    public bool OptimisticParameterDefaultValue { get; public set; }
    public bool GenerateFileEvenIfEmpty { get; public set; }
    private static ExportParametersFile();
    public ITaskItem[] get_Parameters();
    public void set_Parameters(ITaskItem[] value);
    public string get_DeclareParameterFile();
    public void set_DeclareParameterFile(string value);
    public string get_DeclareSetParameterFile();
    public void set_DeclareSetParameterFile(string value);
    public string get_SetParameterFile();
    public void set_SetParameterFile(string value);
    [CompilerGeneratedAttribute]
public bool get_OptimisticParameterDefaultValue();
    [CompilerGeneratedAttribute]
public void set_OptimisticParameterDefaultValue(bool value);
    public bool get_GenerateFileEvenIfEmpty();
    public void set_GenerateFileEvenIfEmpty(bool value);
    private static void SaveDocument(XmlDocument document, string outputFileName, Encoding encode);
    private static void WriteDeclareParametersToFile(TaskLoggingHelper loggingHelper, ITaskItem[] parameters, string outputFileName, bool foptimisticParameterDefaultValue);
    private static void WriteDeclareSetParametersToFile(TaskLoggingHelper loggingHelper, ITaskItem[] parameters, string outputFileName, bool foptimisticParameterDefaultValue);
    private static void WriteDeclareParametersToFile(TaskLoggingHelper loggingHelper, ITaskItem[] parameters, String[] parameterAttributes, string outputFileName, bool foptimisticParameterDefaultValue, string optimisticParameterMetadata);
    private static void WriteSetParametersToFile(TaskLoggingHelper loggingHelper, ITaskItem[] parameters, string outputFileName, bool foptimisticParameterDefaultValue);
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.FilterByItems : Task {
    private ITaskItem[] m_pipeLineItemsITaskItem;
    private ITaskItem[] m_filterITaskItem;
    private List`1<ITaskItem> m_inFilterITaskItem;
    private List`1<ITaskItem> m_outFilterITaskItem;
    private string m_metadataName;
    private string m_filterMetadataName;
    [CompilerGeneratedAttribute]
private string <FilterRootFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FilterBaseOnRelativePath>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] PipelineItems { get; public set; }
    [RequiredAttribute]
public ITaskItem[] Filter { get; public set; }
    public string FilterRootFolder { get; public set; }
    public bool FilterBaseOnRelativePath { get; public set; }
    public string SourceMetadataName { get; public set; }
    public string FilterMetadataName { get; public set; }
    [OutputAttribute]
public ITaskItem[] InFilter { get; }
    [OutputAttribute]
public ITaskItem[] OutFilter { get; }
    public ITaskItem[] get_PipelineItems();
    public void set_PipelineItems(ITaskItem[] value);
    public ITaskItem[] get_Filter();
    public void set_Filter(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_FilterRootFolder();
    [CompilerGeneratedAttribute]
public void set_FilterRootFolder(string value);
    [CompilerGeneratedAttribute]
public bool get_FilterBaseOnRelativePath();
    [CompilerGeneratedAttribute]
public void set_FilterBaseOnRelativePath(bool value);
    public string get_SourceMetadataName();
    public void set_SourceMetadataName(string value);
    public string get_FilterMetadataName();
    public void set_FilterMetadataName(string value);
    public ITaskItem[] get_InFilter();
    public ITaskItem[] get_OutFilter();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.GatherLinkExtensionsToBeExposedInVS : Task {
    private string m_linkInfoFilePath;
    private string m_linksHiddenFromVS;
    private string m_linksDisabledByVS;
    [RequiredAttribute]
public string LinkInfoFilePath { get; public set; }
    public string LinksHiddenFromVS { get; public set; }
    public string LinksDisabledByVS { get; public set; }
    public string get_LinkInfoFilePath();
    public void set_LinkInfoFilePath(string value);
    public string get_LinksHiddenFromVS();
    public void set_LinksHiddenFromVS(string value);
    public string get_LinksDisabledByVS();
    public void set_LinksDisabledByVS(string value);
    private XmlElement SaveToXml(XmlElement xmlNodeRoot, object extension);
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.GetDeployManagedRuntimeVersion : Task {
    private string m_targetFrameworkVersion;
    private string m_version;
    [RequiredAttribute]
public string TargetFrameworkVersion { get; public set; }
    [OutputAttribute]
public string Result { get; }
    [OutputAttribute]
public string Version { get; }
    public string get_TargetFrameworkVersion();
    public void set_TargetFrameworkVersion(string value);
    public string get_Result();
    public string get_Version();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.GetPipelineDestinationFileNameMatch : Task {
    private ITaskItem[] m_pipeLineItemsITaskItem;
    private LinkedList`1<ITaskItem> m_retPipelineItemsITaskItem;
    private string m_fileSpec;
    private string m_startingDestinationPath;
    private bool m_isRecursive;
    private bool m_ignoreCase;
    private string m_metadatToMatch;
    private Regex m_regex;
    [RequiredAttribute]
public ITaskItem[] PipelineItems { get; public set; }
    [OutputAttribute]
public ITaskItem[] ResultPipelineItems { get; }
    [RequiredAttribute]
public string DestinationFileSpec { get; public set; }
    public string StartingDestinationPath { get; public set; }
    public bool IsRecursive { get; public set; }
    public bool IgnoreCase { get; public set; }
    private Regex Regex { get; }
    public ITaskItem[] get_PipelineItems();
    public void set_PipelineItems(ITaskItem[] value);
    public ITaskItem[] get_ResultPipelineItems();
    public string get_DestinationFileSpec();
    public void set_DestinationFileSpec(string value);
    public string get_StartingDestinationPath();
    public void set_StartingDestinationPath(string value);
    public bool get_IsRecursive();
    public void set_IsRecursive(bool value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    private Regex get_Regex();
    public virtual bool Execute();
    private static bool IsMatchItemSpec(ITaskItem iTaskItem, string startingPath, string fileSpec, Regex fileSpecRegex, bool isRecursive);
}
public class Microsoft.Web.Publishing.Tasks.GetProjectProperties : Task {
    private string m_projectFileFullPath;
    private bool m_useIis;
    private string m_IisUrl;
    [RequiredAttribute]
public string ProjectFileFullPath { get; public set; }
    [OutputAttribute]
public bool UseIis { get; }
    [OutputAttribute]
public string IisUrl { get; }
    public string get_ProjectFileFullPath();
    public void set_ProjectFileFullPath(string value);
    public bool get_UseIis();
    public string get_IisUrl();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.GetPublishingLocalizedString : Task {
    private string m_strResult;
    private MessageImportance m_importance;
    private PublishingLocalizedStringLogType m_publishingLocalizedStringLogType;
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ArgumentCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogMessage>k__BackingField;
    [RequiredAttribute]
public string ID { get; public set; }
    public int ArgumentCount { get; public set; }
    public ITaskItem[] Arguments { get; public set; }
    public bool LogMessage { get; public set; }
    public string LogType { get; public set; }
    public string Importance { get; public set; }
    [OutputAttribute]
public string Result { get; }
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public int get_ArgumentCount();
    [CompilerGeneratedAttribute]
public void set_ArgumentCount(int value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_LogMessage();
    [CompilerGeneratedAttribute]
public void set_LogMessage(bool value);
    public string get_LogType();
    public void set_LogType(string value);
    public string get_Importance();
    public void set_Importance(string value);
    public string get_Result();
    public virtual bool Execute();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("15BDF676-788F-4D82-88F3-FDB3ADAB3D3A")]
internal interface Microsoft.Web.Publishing.Tasks.IIISUserData {
    [DispIdAttribute("1610678272")]
public string IISDirectory { get; }
    public abstract virtual string get_IISDirectory();
    public abstract virtual void SetupIISDirectory(int fOverride);
    public abstract virtual void ClearIISDirectory();
}
[GuidAttribute("1B036F99-B240-4116-A6A0-B54EC5B2438E")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Publishing.Tasks.IIISVersion {
    public abstract virtual object GetPropertyValue(string bstrName);
    public abstract virtual object CreateObjectFromProgId(string bstrObjectName);
    public abstract virtual object CreateObjectFromCLSID(Guid clsidObject);
    public abstract virtual void ApplyIISEnvironmentVariables();
    public abstract virtual void ClearIISEnvironmentVariables();
    public abstract virtual void ApplyManifestContext();
    public abstract virtual void ClearManifestContext();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9CDA0717-2EB5-42b3-B5B0-16F4941B2029")]
internal interface Microsoft.Web.Publishing.Tasks.IIISVersionManager {
    public abstract virtual IIISVersion GetVersionObject(string bstrVersion, int productType);
    public abstract virtual IIISVersion[] GetAllVersionObjects();
}
internal class Microsoft.Web.Publishing.Tasks.Iis7WebServer : object {
    protected int m_IisMajorVersion;
    protected string m_strIISWebNumber;
    protected string m_strIISWebServerComment;
    protected UriWrapper m_uri;
    [CompilerGeneratedAttribute]
private string <AppHostConfigDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MatchScore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRunning>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppPoolName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Initialized>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLocalhost>k__BackingField;
    public string AppHostConfigDirectory { get; public set; }
    public string WebServerDirectory { get; public set; }
    public string WebServerManifest { get; public set; }
    public int MatchScore { get; public set; }
    public bool IsRunning { get; public set; }
    public string AppPoolName { get; public set; }
    protected bool Initialized { get; protected set; }
    protected bool UseLocalhost { get; protected set; }
    public int IisMajorVersion { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_AppHostConfigDirectory();
    [CompilerGeneratedAttribute]
public void set_AppHostConfigDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WebServerDirectory();
    [CompilerGeneratedAttribute]
public void set_WebServerDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WebServerManifest();
    [CompilerGeneratedAttribute]
public void set_WebServerManifest(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MatchScore();
    [CompilerGeneratedAttribute]
public void set_MatchScore(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRunning();
    [CompilerGeneratedAttribute]
public void set_IsRunning(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AppPoolName();
    [CompilerGeneratedAttribute]
public void set_AppPoolName(string value);
    [CompilerGeneratedAttribute]
protected bool get_Initialized();
    [CompilerGeneratedAttribute]
protected void set_Initialized(bool value);
    [CompilerGeneratedAttribute]
protected bool get_UseLocalhost();
    [CompilerGeneratedAttribute]
protected void set_UseLocalhost(bool value);
    protected virtual Assembly GetWebAdministrationAssembly();
    protected virtual object GetServerManager();
    public virtual bool Initialize(UriWrapper uri, bool useLocalHost);
    public sealed virtual string GetSiteNumber();
    public sealed virtual string GetIisWebsiteFriendlyName();
    public sealed virtual int get_IisMajorVersion();
    public sealed virtual void Dispose();
    public object GetSiteForServer(object serverManager, Uri uri, string severName, IPAddress[] iPAddresses, bool bServerNameMatchesMachine, Boolean& isRunning, Int32& matchScore);
    protected virtual object GetSiteState(object site);
    internal static int GetScore(ServiceBindingMatchScore serviceBindingMatchScore);
    internal ServiceBindingMatchScore ServerBindingMatch(object site, Uri uri, string severName, IPAddress[] iPAddresses, bool fServerNameMatchesMachine);
}
internal class Microsoft.Web.Publishing.Tasks.IisExpressWebServer : Iis7WebServer {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IISExpressInstallPath>k__BackingField;
    protected string Version { get; protected set; }
    protected string IISExpressInstallPath { get; protected set; }
    public IisExpressWebServer(string version);
    [CompilerGeneratedAttribute]
protected string get_Version();
    [CompilerGeneratedAttribute]
protected void set_Version(string value);
    internal static bool IsExpressInstalled(string version);
    internal static bool IsExpressInstalled(string version, String& installPath);
    [CompilerGeneratedAttribute]
protected string get_IISExpressInstallPath();
    [CompilerGeneratedAttribute]
protected void set_IISExpressInstallPath(string value);
    protected virtual Assembly GetWebAdministrationAssembly();
    public virtual bool Initialize(UriWrapper uri, bool useLocalHost);
    protected virtual object GetSiteState(object site);
    private sealed virtual override void System.IDisposable.Dispose();
}
internal enum Microsoft.Web.Publishing.Tasks.IisProductType : Enum {
    public int value__;
    public static IisProductType OsService;
    public static IisProductType Deprecated;
    public static IisProductType Express;
}
public class Microsoft.Web.Publishing.Tasks.ImportParametersFile : Task {
    private ITaskItem[] m_sourceFiles;
    private List`1<ITaskItem> m_parametersList;
    [RequiredAttribute]
public ITaskItem[] Files { get; public set; }
    [OutputAttribute]
public ITaskItem[] Result { get; }
    public ITaskItem[] get_Files();
    public void set_Files(ITaskItem[] value);
    public ITaskItem[] get_Result();
    private void ReadParametersElement(XmlElement element);
    private void ReadParameterElement(XmlElement element);
    private TaskItem ReadParameterEntryElement(XmlElement element, TaskItem parentItem);
    public virtual bool Execute();
}
internal class Microsoft.Web.Publishing.Tasks.Insert : Transform {
    protected virtual void Apply();
}
internal class Microsoft.Web.Publishing.Tasks.InsertAfter : InsertBase {
    protected virtual void Apply();
}
internal abstract class Microsoft.Web.Publishing.Tasks.InsertBase : Transform {
    private XmlElement siblingElement;
    protected XmlElement SiblingElement { get; }
    protected XmlElement get_SiblingElement();
}
internal class Microsoft.Web.Publishing.Tasks.InsertBefore : InsertBase {
    protected virtual void Apply();
}
public class Microsoft.Web.Publishing.Tasks.IsCleanMSDeployPackageNeeded : Task {
    private bool m_isCleanMsDeployPackageNeeded;
    private bool m_packageAsSingleFile;
    private string m_packageLocation;
    private string m_currentSourceManifestPath;
    private string Provider_Key_Attribute;
    [CompilerGeneratedAttribute]
private string <MSDeployVersionsToTry>k__BackingField;
    [RequiredAttribute]
public string PackageLocation { get; public set; }
    [RequiredAttribute]
public bool PackageAsSingleFile { get; public set; }
    [RequiredAttribute]
public string CurrentSourceManifestPath { get; public set; }
    [OutputAttribute]
public bool Result { get; }
    public string MSDeployVersionsToTry { get; public set; }
    public string get_PackageLocation();
    public void set_PackageLocation(string value);
    public bool get_PackageAsSingleFile();
    public void set_PackageAsSingleFile(bool value);
    public string get_CurrentSourceManifestPath();
    public void set_CurrentSourceManifestPath(string value);
    public bool get_Result();
    [CompilerGeneratedAttribute]
public string get_MSDeployVersionsToTry();
    [CompilerGeneratedAttribute]
public void set_MSDeployVersionsToTry(string value);
    public virtual bool Execute();
    private void DisposeDeploymentObject(object deploymentObject);
    private Dictionary`2<string, ProviderOption[]> RetrieveOptionsFromSrcManifest(XPathNavigator xPathNavigator, string provider);
    private bool CheckExist(string path, bool fFile);
    private int CheckXPathNavigatorContainIisSetting(XPathNavigator xPathNavigator, String& iisMSDeployProviderName);
    private int CheckMSDeployDumpContainIisSetting(object deploymentObject, String& iisMSDeployProviderName);
    private bool IsIisRelatedProvider(string providerName);
    private bool VerifyProviderOptionValuesInSync(string provider, object deploymentObject, Dictionary`2<string, ProviderOption[]> optionsFromSrcManifest);
    private Dictionary`2<string, ProviderOption[]> RetrieveProviderOptionsFromExistingDeployPackage(object deploymentObject, string provider, Dictionary`2<string, ProviderOption[]> optionsToLoadFromPackage);
}
internal interface Microsoft.Web.Publishing.Tasks.IxIisWebServer {
    public int IisMajorVersion { get; }
    public int MatchScore { get; }
    public bool IsRunning { get; }
    public string AppHostConfigDirectory { get; }
    public string WebServerDirectory { get; }
    public string WebServerManifest { get; }
    public string AppPoolName { get; }
    public abstract virtual bool Initialize(UriWrapper uri, bool useLocalHost);
    public abstract virtual string GetSiteNumber();
    public abstract virtual string GetIisWebsiteFriendlyName();
    public abstract virtual int get_IisMajorVersion();
    public abstract virtual int get_MatchScore();
    public abstract virtual bool get_IsRunning();
    public abstract virtual string get_AppHostConfigDirectory();
    public abstract virtual string get_WebServerDirectory();
    public abstract virtual string get_WebServerManifest();
    public abstract virtual string get_AppPoolName();
}
internal interface Microsoft.Web.Publishing.Tasks.IXmlFormattableAttributes {
    public string AttributeIndent { get; }
    public abstract virtual void FormatAttributes(XmlFormatter formatter);
    public abstract virtual string get_AttributeIndent();
}
public interface Microsoft.Web.Publishing.Tasks.IXmlOriginalDocumentService {
    public abstract virtual XmlNodeList SelectNodes(string path, XmlNamespaceManager nsmgr);
}
public interface Microsoft.Web.Publishing.Tasks.IXmlTransformationLogger {
    public abstract virtual void LogMessage(string message, Object[] messageArgs);
    public abstract virtual void LogMessage(MessageType type, string message, Object[] messageArgs);
    public abstract virtual void LogWarning(string message, Object[] messageArgs);
    public abstract virtual void LogWarning(string file, string message, Object[] messageArgs);
    public abstract virtual void LogWarning(string file, int lineNumber, int linePosition, string message, Object[] messageArgs);
    public abstract virtual void LogError(string message, Object[] messageArgs);
    public abstract virtual void LogError(string file, string message, Object[] messageArgs);
    public abstract virtual void LogError(string file, int lineNumber, int linePosition, string message, Object[] messageArgs);
    public abstract virtual void LogErrorFromException(Exception ex);
    public abstract virtual void LogErrorFromException(Exception ex, string file);
    public abstract virtual void LogErrorFromException(Exception ex, string file, int lineNumber, int linePosition);
    public abstract virtual void StartSection(string message, Object[] messageArgs);
    public abstract virtual void StartSection(MessageType type, string message, Object[] messageArgs);
    public abstract virtual void EndSection(string message, Object[] messageArgs);
    public abstract virtual void EndSection(MessageType type, string message, Object[] messageArgs);
}
public abstract class Microsoft.Web.Publishing.Tasks.Locator : object {
    private string argumentString;
    private IList`1<string> arguments;
    private string parentPath;
    private XmlElementContext context;
    private XmlTransformationLogger logger;
    protected string ParentPath { get; }
    protected XmlNode CurrentElement { get; }
    protected string NextStepNodeTest { get; }
    protected XPathAxis NextStepAxis { get; }
    protected XmlTransformationLogger Log { get; }
    protected string ArgumentString { get; }
    protected IList`1<string> Arguments { get; }
    protected virtual string get_ParentPath();
    protected XmlNode get_CurrentElement();
    protected virtual string get_NextStepNodeTest();
    protected virtual XPathAxis get_NextStepAxis();
    protected virtual string ConstructPath();
    protected string AppendStep(string basePath, string stepNodeTest);
    protected string AppendStep(string basePath, XPathAxis stepAxis, string stepNodeTest);
    protected string AppendStep(string basePath, string stepNodeTest, string predicate);
    protected string AppendStep(string basePath, XPathAxis stepAxis, string stepNodeTest, string predicate);
    protected virtual string ConstructPredicate();
    protected XmlTransformationLogger get_Log();
    protected string get_ArgumentString();
    protected IList`1<string> get_Arguments();
    protected void EnsureArguments();
    protected void EnsureArguments(int min);
    protected void EnsureArguments(int min, int max);
    internal string ConstructPath(string parentPath, XmlElementContext context, string argumentString);
    internal string ConstructParentPath(string parentPath, XmlElementContext context, string argumentString);
    private void ReleaseLogger();
    private string GetAxisString(XPathAxis stepAxis);
    private string EnsureTrailingSlash(string basePath);
    private string EnsureBracketedPredicate(string predicate);
}
public class Microsoft.Web.Publishing.Tasks.MapUriToIisWebServer : Task {
    private string m_projectIisURL;
    private bool m_fUseLocalhost;
    private UriWrapper m_uri;
    [CompilerGeneratedAttribute]
private string <IisWebsiteId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IisWebsiteFriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerAppHostConfigDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationPoolName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MatchScore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRunning>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseIisExpressHintFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IisMajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalIisVersionString>k__BackingField;
    [RequiredAttribute]
public string ProjectIisUrl { get; public set; }
    public bool UseLocalhost { get; public set; }
    [OutputAttribute]
public string IisWebsiteId { get; public set; }
    [OutputAttribute]
public string IisWebsiteFriendlyName { get; public set; }
    [OutputAttribute]
public string WebServerAppHostConfigDirectory { get; public set; }
    [OutputAttribute]
public string WebServerDirectory { get; public set; }
    [OutputAttribute]
public string WebServerManifest { get; public set; }
    [OutputAttribute]
public string ApplicationPoolName { get; public set; }
    [OutputAttribute]
public int MatchScore { get; public set; }
    [OutputAttribute]
public bool IsRunning { get; public set; }
    [OutputAttribute]
public string MetakeyPath { get; }
    [OutputAttribute]
public string MetakeyPathUsingSiteName { get; }
    [OutputAttribute]
public string AppHostConfigPath { get; }
    [OutputAttribute]
public string SiteRelativePath { get; }
    [OutputAttribute]
public bool IsLocalMachine { get; }
    public bool UseIisExpressHintFlag { get; public set; }
    [OutputAttribute]
public int IisMajorVersion { get; public set; }
    public string LocalIisVersionString { get; public set; }
    public string get_ProjectIisUrl();
    public void set_ProjectIisUrl(string value);
    public bool get_UseLocalhost();
    public void set_UseLocalhost(bool value);
    [CompilerGeneratedAttribute]
public string get_IisWebsiteId();
    [CompilerGeneratedAttribute]
public void set_IisWebsiteId(string value);
    [CompilerGeneratedAttribute]
public string get_IisWebsiteFriendlyName();
    [CompilerGeneratedAttribute]
public void set_IisWebsiteFriendlyName(string value);
    [CompilerGeneratedAttribute]
public string get_WebServerAppHostConfigDirectory();
    [CompilerGeneratedAttribute]
public void set_WebServerAppHostConfigDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_WebServerDirectory();
    [CompilerGeneratedAttribute]
public void set_WebServerDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_WebServerManifest();
    [CompilerGeneratedAttribute]
public void set_WebServerManifest(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationPoolName();
    [CompilerGeneratedAttribute]
public void set_ApplicationPoolName(string value);
    [CompilerGeneratedAttribute]
public int get_MatchScore();
    [CompilerGeneratedAttribute]
public void set_MatchScore(int value);
    [CompilerGeneratedAttribute]
public bool get_IsRunning();
    [CompilerGeneratedAttribute]
public void set_IsRunning(bool value);
    public string get_MetakeyPath();
    public string get_MetakeyPathUsingSiteName();
    public string get_AppHostConfigPath();
    public string get_SiteRelativePath();
    public bool get_IsLocalMachine();
    [CompilerGeneratedAttribute]
public bool get_UseIisExpressHintFlag();
    [CompilerGeneratedAttribute]
public void set_UseIisExpressHintFlag(bool value);
    [CompilerGeneratedAttribute]
public int get_IisMajorVersion();
    [CompilerGeneratedAttribute]
public void set_IisMajorVersion(int value);
    [CompilerGeneratedAttribute]
public string get_LocalIisVersionString();
    [CompilerGeneratedAttribute]
public void set_LocalIisVersionString(string value);
    private bool DetectingInIISExpress(Exception& eLastError);
    private bool DetectingInIIS7(bool isAdmin, Exception& eLastError);
    private bool DetectingUsingADSI(bool isAdmin, Exception& eLastError);
    private bool UpdateInfoBaseOnWebServer(IxIisWebServer iisWebServer);
    public virtual bool Execute();
    public void Cleanup();
    public sealed virtual void Dispose();
}
public class Microsoft.Web.Publishing.Tasks.Match : Locator {
    protected virtual string ConstructPredicate();
}
public enum Microsoft.Web.Publishing.Tasks.MessageType : Enum {
    public int value__;
    public static MessageType Normal;
    public static MessageType Verbose;
}
public enum Microsoft.Web.Publishing.Tasks.MissingTargetMessage : Enum {
    public int value__;
    public static MissingTargetMessage None;
    public static MissingTargetMessage Information;
    public static MissingTargetMessage Warning;
    public static MissingTargetMessage Error;
}
public class Microsoft.Web.Publishing.Tasks.MSDeploy : ToolTask {
    private string m_exePath;
    private string m_disableRule;
    private string m_verb;
    private string m_failureLevel;
    private string m_xpath;
    private string m_enableRule;
    private string m_replace;
    private string m_skip;
    private string m_disableLink;
    private string m_enableLink;
    private string m_disableSkipDirective;
    private string m_enableSkipDirective;
    private string m_lastCommandLine;
    private bool m_xml;
    private bool m_whatif;
    private bool m_useChecksum;
    private bool m_verbose;
    private bool m_allowUntrusted;
    private bool m_enableTransaction;
    private int m_retryAttempts;
    private int m_retryInterval;
    private bool m_useDoubleQuoteForValue;
    private string m_strValueQuote;
    private ITaskItem[] m_sourceITaskItem;
    private ITaskItem[] m_destITaskItem;
    private ITaskItem[] m_replaceRuleItemsITaskItem;
    private ITaskItem[] m_skipRuleItemsITaskItem;
    private ITaskItem[] m_declareParameterItems;
    private ITaskItem[] m_importDeclareParametersItems;
    private ITaskItem[] m_simpleSetParamterItems;
    private ITaskItem[] m_importSetParametersItems;
    private ITaskItem[] m_setParamterItems;
    private bool m_previewOnly;
    [CompilerGeneratedAttribute]
private string <WebServerAppHostConfigDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OptimisticParameterDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSDeployVersionsToTry>k__BackingField;
    public string WebServerAppHostConfigDirectory { get; public set; }
    public string WebServerDirectory { get; public set; }
    public string WebServerManifest { get; public set; }
    public string ExePath { get; public set; }
    public string DisableRule { get; public set; }
    [RequiredAttribute]
public string Verb { get; public set; }
    [RequiredAttribute]
public ITaskItem[] Source { get; public set; }
    public ITaskItem[] Destination { get; public set; }
    public bool WhatIf { get; public set; }
    public bool OptimisticParameterDefaultValue { get; public set; }
    public bool UseChecksum { get; public set; }
    public bool AllowUntrusted { get; public set; }
    public bool Verbose { get; public set; }
    public string FailureLevel { get; public set; }
    public bool Xml { get; public set; }
    public string XPath { get; public set; }
    public string EnableRule { get; public set; }
    public string Replace { get; public set; }
    public string Skip { get; public set; }
    public string DisableLink { get; public set; }
    public string EnableLink { get; public set; }
    public bool EnableTransaction { get; public set; }
    public int RetryAttempts { get; public set; }
    public int RetryInterval { get; public set; }
    public bool UseDoubleQuoteForValue { get; public set; }
    public ITaskItem[] ReplaceRuleItems { get; public set; }
    public ITaskItem[] SkipRuleItems { get; public set; }
    public string DisableSkipDirective { get; public set; }
    public string EnableSkipDirective { get; public set; }
    public ITaskItem[] DeclareParameterItems { get; public set; }
    public ITaskItem[] ImportDeclareParametersItems { get; public set; }
    public ITaskItem[] ImportSetParametersItems { get; public set; }
    public ITaskItem[] SimpleSetParameterItems { get; public set; }
    public ITaskItem[] SetParameterItems { get; public set; }
    [OutputAttribute]
public string CommandLine { get; }
    public bool PreviewCommandLineOnly { get; public set; }
    protected MessageImportance StandardOutputLoggingImportance { get; }
    public string MSDeployVersionsToTry { get; public set; }
    protected string ToolName { get; }
    [CompilerGeneratedAttribute]
public string get_WebServerAppHostConfigDirectory();
    [CompilerGeneratedAttribute]
public void set_WebServerAppHostConfigDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_WebServerDirectory();
    [CompilerGeneratedAttribute]
public void set_WebServerDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_WebServerManifest();
    [CompilerGeneratedAttribute]
public void set_WebServerManifest(string value);
    public string get_ExePath();
    public void set_ExePath(string value);
    public string get_DisableRule();
    public void set_DisableRule(string value);
    public string get_Verb();
    public void set_Verb(string value);
    public ITaskItem[] get_Source();
    public void set_Source(ITaskItem[] value);
    public ITaskItem[] get_Destination();
    public void set_Destination(ITaskItem[] value);
    public bool get_WhatIf();
    public void set_WhatIf(bool value);
    [CompilerGeneratedAttribute]
public bool get_OptimisticParameterDefaultValue();
    [CompilerGeneratedAttribute]
public void set_OptimisticParameterDefaultValue(bool value);
    public bool get_UseChecksum();
    public void set_UseChecksum(bool value);
    public bool get_AllowUntrusted();
    public void set_AllowUntrusted(bool value);
    public bool get_Verbose();
    public void set_Verbose(bool value);
    public string get_FailureLevel();
    public void set_FailureLevel(string value);
    public bool get_Xml();
    public void set_Xml(bool value);
    public string get_XPath();
    public void set_XPath(string value);
    public string get_EnableRule();
    public void set_EnableRule(string value);
    public string get_Replace();
    public void set_Replace(string value);
    public string get_Skip();
    public void set_Skip(string value);
    public string get_DisableLink();
    public void set_DisableLink(string value);
    public string get_EnableLink();
    public void set_EnableLink(string value);
    public bool get_EnableTransaction();
    public void set_EnableTransaction(bool value);
    public int get_RetryAttempts();
    public void set_RetryAttempts(int value);
    public int get_RetryInterval();
    public void set_RetryInterval(int value);
    public bool get_UseDoubleQuoteForValue();
    public void set_UseDoubleQuoteForValue(bool value);
    public ITaskItem[] get_ReplaceRuleItems();
    public void set_ReplaceRuleItems(ITaskItem[] value);
    public ITaskItem[] get_SkipRuleItems();
    public void set_SkipRuleItems(ITaskItem[] value);
    public string get_DisableSkipDirective();
    public void set_DisableSkipDirective(string value);
    public string get_EnableSkipDirective();
    public void set_EnableSkipDirective(string value);
    public ITaskItem[] get_DeclareParameterItems();
    public void set_DeclareParameterItems(ITaskItem[] value);
    public ITaskItem[] get_ImportDeclareParametersItems();
    public void set_ImportDeclareParametersItems(ITaskItem[] value);
    public ITaskItem[] get_ImportSetParametersItems();
    public void set_ImportSetParametersItems(ITaskItem[] value);
    public ITaskItem[] get_SimpleSetParameterItems();
    public void set_SimpleSetParameterItems(ITaskItem[] value);
    public ITaskItem[] get_SetParameterItems();
    public void set_SetParameterItems(ITaskItem[] value);
    public string get_CommandLine();
    public bool get_PreviewCommandLineOnly();
    public void set_PreviewCommandLineOnly(bool value);
    protected virtual bool SkipTaskExecution();
    protected virtual MessageImportance get_StandardOutputLoggingImportance();
    [CompilerGeneratedAttribute]
public string get_MSDeployVersionsToTry();
    [CompilerGeneratedAttribute]
public void set_MSDeployVersionsToTry(string value);
    public virtual bool Execute();
    public static void AddReplaceRulesToOptions(CommandLineBuilder commandLineBuilder, ITaskItem[] replaceRuleItems, string valueQuoteChar);
    public static void AddSkipDirectiveToBaseOptions(CommandLineBuilder commandLineBuilder, ITaskItem[] skipRuleItems, string valueQuoteChar);
    public static void AddDeclareParameterToCommandArgument(List`1<string> arguments, ITaskItem item, string valueQuote, Dictionary`2<string, string> lookupDictionary);
    public static void AddDeclareParametersOptions(CommandLineBuilder commandLineBuilder, ITaskItem[] originalItems, string valueQuote, bool foptimisticParameterDefaultValue);
    public static void AddImportDeclareParametersFilesOptions(CommandLineBuilder commandLineBuilder, ITaskItem[] items);
    public static void AddImportSetParametersFilesOptions(CommandLineBuilder commandLineBuilder, ITaskItem[] items);
    internal static void AddImportParametersFilesOptions(CommandLineBuilder commandLineBuilder, string parameterFlag, ITaskItem[] items);
    public static void AddSimpleSetParametersToObject(CommandLineBuilder commandLineBuilder, ITaskItem[] originalItems, string valueQuoteChar, bool foptimisticParameterDefaultValue);
    public static void AddSetParametersToObject(CommandLineBuilder commandLineBuilder, ITaskItem[] originalItems, string valueQuote, bool foptimisticParameterDefaultValue);
    public static void AddDestinationProviderSettingToObject(CommandLineBuilder commandLineBuilder, string dest, ITaskItem[] items, string valueQuoteChar, MSDeploy msdeploy);
    private static void GenerateSwitchPerItem(CommandLineBuilder commandLine, string strSwitch, string args);
    protected virtual string GenerateCommandLineCommands();
    protected virtual string get_ToolName();
    protected virtual string GenerateFullPathToTool();
    protected virtual bool ValidateParameters();
}
internal static class Microsoft.Web.Publishing.Tasks.MSDeployUtility : object {
    public static object CreateBaseOptions(VSMSDeployObject vSMSDeployObject);
    internal static List`1<string> ConvertStringIntoList(string linkExtensionsString);
    internal static bool LinkContainedInTheCollection(string link, List`1<string> linkCollection);
    public static void ChangeLinkExtensionEnableStatue(object baseOptions, string listOfLinkExtensions, bool enable);
    public static void ChangeLinkExtensionEnableStatue(object baseOptions, List`1<string> linkExtensions, bool enable);
}
internal class Microsoft.Web.Publishing.Tasks.MSWebDelegationAssembly : DynamicAssembly {
    [CompilerGeneratedAttribute]
private static MSWebDelegationAssembly <DynamicAssembly>k__BackingField;
    public static string AssemblyName { get; }
    public static MSWebDelegationAssembly DynamicAssembly { get; public set; }
    public MSWebDelegationAssembly(Version verToLoad);
    public static string get_AssemblyName();
    [CompilerGeneratedAttribute]
public static MSWebDelegationAssembly get_DynamicAssembly();
    [CompilerGeneratedAttribute]
public static void set_DynamicAssembly(MSWebDelegationAssembly value);
    public static void SetVersion(Version version);
}
internal class Microsoft.Web.Publishing.Tasks.MSWebDeploymentAssembly : DynamicAssembly {
    [CompilerGeneratedAttribute]
private static MSWebDeploymentAssembly <DynamicAssembly>k__BackingField;
    public static string AssemblyName { get; }
    public static MSWebDeploymentAssembly DynamicAssembly { get; public set; }
    public MSWebDeploymentAssembly(Version verToLoad);
    public static string get_AssemblyName();
    [CompilerGeneratedAttribute]
public static MSWebDeploymentAssembly get_DynamicAssembly();
    [CompilerGeneratedAttribute]
public static void set_DynamicAssembly(MSWebDeploymentAssembly value);
    public static void SetVersion(Version version);
    public static bool DeploymentTryGetValueForEach(object deploymentCollection, string name, Object& foundObject);
    public static bool DeploymentTryGetValueContains(object deploymentCollection, string name, Object& foundObject);
}
internal class Microsoft.Web.Publishing.Tasks.NamedTypeFactory : object {
    private string relativePathRoot;
    private List`1<Registration> registrations;
    internal NamedTypeFactory(string relativePathRoot);
    private void CreateDefaultRegistrations();
    internal void AddAssemblyRegistration(Assembly assembly, string nameSpace);
    internal void AddAssemblyRegistration(string assemblyName, string nameSpace);
    internal void AddPathRegistration(string path, string nameSpace);
    internal ObjectType Construct(string typeName);
    private Type GetType(string typeName);
}
public class Microsoft.Web.Publishing.Tasks.NormalizeServiceUrl : Task {
    private string m_serviceUrl;
    private string m_resultUrl;
    private bool m_useWMSVC;
    private bool m_useRemoteAgent;
    [RequiredAttribute]
public string ServiceUrl { get; public set; }
    [RequiredAttribute]
public bool UseWMSVC { get; public set; }
    [RequiredAttribute]
public bool UseRemoteAgent { get; public set; }
    [OutputAttribute]
public string ResultUrl { get; }
    public string get_ServiceUrl();
    public void set_ServiceUrl(string value);
    public bool get_UseWMSVC();
    public void set_UseWMSVC(bool value);
    public bool get_UseRemoteAgent();
    public void set_UseRemoteAgent(bool value);
    public string get_ResultUrl();
    private static string ConstructServiceUrlForDeployThruWMSVC(string serviceUrl);
    private static string ConstructServiceUrlForDeployThruAgentService(string serviceUrl);
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.ParameterizeTransformXml : Task {
    private string _sourceFile;
    private string _transformFile;
    private string _destinationFile;
    private string resultXml;
    private bool sourceIsFile;
    private bool transformIsFile;
    private bool destinationIsFile;
    private bool _useXpathToFormParameter;
    private SetTokenizedAttributeStorage storageDictionary;
    private List`1<ITaskItem> retParameters;
    private string strParameterNamePrefix;
    private string strScope;
    private string strTokenFormat;
    private string _sourceRootPath;
    private string _transformRootPath;
    private bool stackTrace;
    [RequiredAttribute]
public string Source { get; public set; }
    public string SourceRootPath { get; public set; }
    public bool IsSourceAFile { get; public set; }
    [RequiredAttribute]
public string Transform { get; public set; }
    public string TransformRootPath { get; public set; }
    public bool UseXpathToFormParameter { get; public set; }
    public bool IsTransformAFile { get; public set; }
    public string Destination { get; public set; }
    public bool IsDestinationAFile { get; public set; }
    public bool StackTrace { get; public set; }
    [OutputAttribute]
public string DestinationXml { get; }
    [OutputAttribute]
public ITaskItem[] DeclareParameters { get; }
    public bool EnableTokenizeParameters { get; public set; }
    public string ParameterNamePrefix { get; public set; }
    public string Scope { get; public set; }
    public string TokenFormat { get; public set; }
    protected SetTokenizedAttributeStorage Storage { get; }
    public string get_Source();
    public void set_Source(string value);
    public string get_SourceRootPath();
    public void set_SourceRootPath(string value);
    public bool get_IsSourceAFile();
    public void set_IsSourceAFile(bool value);
    public string get_Transform();
    public void set_Transform(string value);
    public string get_TransformRootPath();
    public void set_TransformRootPath(string value);
    public bool get_UseXpathToFormParameter();
    public void set_UseXpathToFormParameter(bool value);
    public bool get_IsTransformAFile();
    public void set_IsTransformAFile(bool value);
    public string get_Destination();
    public void set_Destination(string value);
    public bool get_IsDestinationAFile();
    public void set_IsDestinationAFile(bool value);
    public bool get_StackTrace();
    public void set_StackTrace(bool value);
    public string get_DestinationXml();
    public ITaskItem[] get_DeclareParameters();
    public bool get_EnableTokenizeParameters();
    public void set_EnableTokenizeParameters(bool value);
    public string get_ParameterNamePrefix();
    public void set_ParameterNamePrefix(string value);
    public string get_Scope();
    public void set_Scope(string value);
    public string get_TokenFormat();
    public void set_TokenFormat(string value);
    protected SetTokenizedAttributeStorage get_Storage();
    public virtual bool Execute();
    private static string SaveTransformedFile(XmlTransformableDocument document, string destination, bool isDestinationAFile);
    private static XmlTransformableDocument OpenSourceFile(string sourceFile, bool isSourceFile);
    private static XmlTransformation OpenTransformFile(string transformFile, bool isTranformAFile, IXmlTransformationLogger logger);
}
internal class Microsoft.Web.Publishing.Tasks.PositionTrackingTextReader : TextReader {
    private static int newlineCharacter;
    private TextReader internalReader;
    private int lineNumber;
    private int linePosition;
    private int characterPosition;
    public PositionTrackingTextReader(TextReader textReader);
    public virtual int Read();
    public virtual int Peek();
    public bool ReadToPosition(int lineNumber, int linePosition);
    public bool ReadToPosition(int characterPosition);
    private void UpdatePosition(int character);
}
public enum Microsoft.Web.Publishing.Tasks.PublishingLocalizedStringLogType : Enum {
    public int value__;
    public static PublishingLocalizedStringLogType None;
    public static PublishingLocalizedStringLogType Message;
    public static PublishingLocalizedStringLogType Warning;
    public static PublishingLocalizedStringLogType Error;
}
internal class Microsoft.Web.Publishing.Tasks.Remove : Transform {
    protected virtual void Apply();
    protected void RemoveNode();
}
internal class Microsoft.Web.Publishing.Tasks.RemoveAll : Remove {
    protected virtual void Apply();
}
public class Microsoft.Web.Publishing.Tasks.RemoveAttributes : AttributeTransform {
    protected virtual void Apply();
}
public class Microsoft.Web.Publishing.Tasks.RemoveEmptyDirectories : Task {
    private ITaskItem[] m_directoryITaskItem;
    private int m_maxRetries;
    private int m_retryDelay;
    private bool m_LogErrorAsWarning;
    [RequiredAttribute]
public ITaskItem[] Directories { get; public set; }
    public int MaxRetries { get; public set; }
    public int RetryDelay { get; public set; }
    public bool LogErrorAsWarning { get; public set; }
    public ITaskItem[] get_Directories();
    public void set_Directories(ITaskItem[] value);
    public int get_MaxRetries();
    public void set_MaxRetries(int value);
    public int get_RetryDelay();
    public void set_RetryDelay(int value);
    public bool get_LogErrorAsWarning();
    public void set_LogErrorAsWarning(bool value);
    private bool RemoveAllEmptyDirectories(ITaskItem[] items, List`1<ITaskItem> failedPipeLineItems);
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.RemoveTrailingSlash : Task {
    private string m_Path;
    private string m_resultPath;
    [RequiredAttribute]
public string Path { get; public set; }
    [OutputAttribute]
public string Result { get; }
    public string get_Path();
    public void set_Path(string value);
    public string get_Result();
    public virtual bool Execute();
}
internal class Microsoft.Web.Publishing.Tasks.Replace : Transform {
    protected virtual void Apply();
}
internal enum Microsoft.Web.Publishing.Tasks.ServiceBindingMatchScore : Enum {
    public int value__;
    public static ServiceBindingMatchScore None;
    public static ServiceBindingMatchScore Port;
    public static ServiceBindingMatchScore HostHeader_IIS5;
    public static ServiceBindingMatchScore IPAddress_IIS5;
    public static ServiceBindingMatchScore IPAddress;
    public static ServiceBindingMatchScore HostHeader;
    public static ServiceBindingMatchScore All;
}
public class Microsoft.Web.Publishing.Tasks.SetAttributes : AttributeTransform {
    protected virtual void Apply();
}
public class Microsoft.Web.Publishing.Tasks.SetTokenizedAttributes : AttributeTransform {
    private SetTokenizedAttributeStorage storageDictionary;
    private bool fInitStorageDictionary;
    public static string Token;
    public static string TokenNumber;
    public static string XPathWithIndex;
    public static string ParameterAttribute;
    public static string XpathLocator;
    public static string XPathWithLocator;
    private XmlAttribute tokenizeValueCurrentXmlAttribute;
    private static Regex s_dirRegex;
    private static Regex s_parentAttribRegex;
    private static Regex s_tokenFormatRegex;
    protected SetTokenizedAttributeStorage TransformStorage { get; }
    internal static Regex DirRegex { get; }
    internal static Regex ParentAttributeRegex { get; }
    internal static Regex TokenFormatRegex { get; }
    private static SetTokenizedAttributes();
    protected SetTokenizedAttributeStorage get_TransformStorage();
    protected virtual void Apply();
    internal static Regex get_DirRegex();
    internal static Regex get_ParentAttributeRegex();
    internal static Regex get_TokenFormatRegex();
    protected string GetAttributeValue(string attributeName);
    protected string EscapeDirRegexSpecialCharacter(string value, bool escape);
    protected static string SubstituteKownValue(string transformValue, Regex patternRegex, string patternPrefix, GetValueCallback getValueDelegate);
    private string GetXPathToAttribute(XmlAttribute xmlAttribute);
    private string GetXPathToAttribute(XmlAttribute xmlAttribute, IList`1<string> locators);
    private string GetXPathToNode(XmlNode xmlNode);
    private string TokenizeValue(XmlAttribute targetAttribute, XmlAttribute transformAttribute, bool fTokenizeParameter, List`1<Dictionary`2<string, string>> parameters);
    [CompilerGeneratedAttribute]
private string <TokenizeValue>b__0(string key);
}
public class Microsoft.Web.Publishing.Tasks.SetTokenizedAttributeStorage : object {
    [CompilerGeneratedAttribute]
private List`1<Dictionary`2<string, string>> <DictionaryList>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableTokenizeParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseXpathToFormParameter>k__BackingField;
    public List`1<Dictionary`2<string, string>> DictionaryList { get; public set; }
    public string TokenFormat { get; public set; }
    public bool EnableTokenizeParameters { get; public set; }
    public bool UseXpathToFormParameter { get; public set; }
    public SetTokenizedAttributeStorage(int capacity);
    [CompilerGeneratedAttribute]
public List`1<Dictionary`2<string, string>> get_DictionaryList();
    [CompilerGeneratedAttribute]
public void set_DictionaryList(List`1<Dictionary`2<string, string>> value);
    [CompilerGeneratedAttribute]
public string get_TokenFormat();
    [CompilerGeneratedAttribute]
public void set_TokenFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableTokenizeParameters();
    [CompilerGeneratedAttribute]
public void set_EnableTokenizeParameters(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseXpathToFormParameter();
    [CompilerGeneratedAttribute]
public void set_UseXpathToFormParameter(bool value);
}
public class Microsoft.Web.Publishing.Tasks.SortParametrsByPriority : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OptimisticParameterDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OptimisticParameterMetadataName>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] Parameters { get; public set; }
    [OutputAttribute]
public ITaskItem[] Result { get; public set; }
    public bool OptimisticParameterDefaultValue { get; public set; }
    public string OptimisticParameterMetadataName { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_OptimisticParameterDefaultValue();
    [CompilerGeneratedAttribute]
public void set_OptimisticParameterDefaultValue(bool value);
    [CompilerGeneratedAttribute]
public string get_OptimisticParameterMetadataName();
    [CompilerGeneratedAttribute]
public void set_OptimisticParameterMetadataName(string value);
    public virtual bool Execute();
}
internal class Microsoft.Web.Publishing.Tasks.SqlScriptPreprocessor.SqlBatchSourceFile : object {
    private static int maxBufferSize;
    private static string c_strSetVar;
    private static string c_strCmdVarPrefix;
    private string m_fileName;
    private StreamReader m_streamReader;
    private static string s_newLine;
    private string m_strDelimiter;
    private StringBuilder m_strBuilder;
    private bool m_stopParserNextRun;
    private static Regex s_keywordRegex;
    private Regex KeywordRegex { get; }
    public bool EndOfFile { get; }
    public SqlBatchSourceFile(string fileName, string strDelimitor);
    private static SqlBatchSourceFile();
    private Regex get_KeywordRegex();
    public bool get_EndOfFile();
    public ParserAction GetMoreData(String& str);
    public sealed virtual void Dispose();
    private sealed virtual override ParserAction ManagedBatchParser.IBatchSource.GetMoreData(String& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) );
}
internal class Microsoft.Web.Publishing.Tasks.SqlScriptPreprocessor.SqlCommandExecuter : object {
    private List`1<SqlBatchSourceFile> m_sqlSourceFiles;
    private string m_batchDelimiter;
    private String[] m_strnsupportedKeywords;
    private Dictionary`2<string, bool> UnsupportedKeywordsDictionary;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <UnsupportedKeywordsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResolveIncludes>k__BackingField;
    public Dictionary`2<string, int> UnsupportedKeywordsCount { get; public set; }
    public bool ResolveIncludes { get; public set; }
    public SqlCommandExecuter(string batchDelimiter, String[] unsupportedKeywords);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_UnsupportedKeywordsCount();
    [CompilerGeneratedAttribute]
public void set_UnsupportedKeywordsCount(Dictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public bool get_ResolveIncludes();
    [CompilerGeneratedAttribute]
public void set_ResolveIncludes(bool value);
    private void AddKeywordCount(string keyword);
    public ParserAction Ed(string batch, IBatchSource& pIBatchSource);
    public sealed virtual ParserAction Help();
    public sealed virtual ParserAction Quit();
    public sealed virtual ParserAction ProcessBatch(string str, int num);
    public sealed virtual ParserAction Exit(string batch, string exitBatch);
    public ParserAction IncludeFileName(string fileName, IBatchSource& ppIBatchSource);
    public sealed virtual ParserAction Connect(int timeout, string server, string user, string password);
    public sealed virtual ParserAction Error(OutputDestination od, string fileName);
    public sealed virtual ParserAction ExecuteShellCommand(string command);
    public sealed virtual ParserAction List(string batch);
    public sealed virtual ParserAction ListVar(string varList);
    public sealed virtual ParserAction OnError(ErrorAction ea);
    public sealed virtual ParserAction Out(OutputDestination od, string fileName);
    public sealed virtual ParserAction PerfTrace(OutputDestination od, string fileName);
    public sealed virtual ParserAction Reset();
    public sealed virtual ParserAction ServerList();
    public sealed virtual ParserAction Xml(XmlStatus xs);
    public sealed virtual void Dispose();
    private sealed virtual override ParserAction ManagedBatchParser.ICommandExecuter.Ed(string , IBatchSource& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) );
    private sealed virtual override ParserAction ManagedBatchParser.ICommandExecuter.IncludeFileName(string , IBatchSource& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) );
}
public class Microsoft.Web.Publishing.Tasks.SqlScriptPreprocessor.SqlScriptPreprocessSqlVariables : Task {
    private Dictionary`2<string, KeyValuePair`2<string, bool>> m_setVariables;
    private Dictionary`2<string, string> m_existingVariables;
    private ITaskItem[] _list;
    [CompilerGeneratedAttribute]
private string <SqlScriptFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResolveIncludes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BatchDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParseResult>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckForUnsupportCommands>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TreadSqlScriptUnsupportedCommandsAsWarning>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <UnsupportedCommandsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <UnsupportedKeywords>k__BackingField;
    [RequiredAttribute]
public string SqlScriptFile { get; public set; }
    public string DestinationGroup { get; public set; }
    public bool ResolveIncludes { get; public set; }
    public string BatchDelimiter { get; public set; }
    public bool ParseResult { get; public set; }
    public bool CheckForUnsupportCommands { get; public set; }
    public bool TreadSqlScriptUnsupportedCommandsAsWarning { get; public set; }
    public Dictionary`2<string, int> UnsupportedCommandsCount { get; public set; }
    public ITaskItem[] ExistingVariables { get; public set; }
    public ITaskItem[] UnsupportedKeywords { get; public set; }
    [OutputAttribute]
public ITaskItem[] List { get; }
    [CompilerGeneratedAttribute]
public string get_SqlScriptFile();
    [CompilerGeneratedAttribute]
public void set_SqlScriptFile(string value);
    [CompilerGeneratedAttribute]
public string get_DestinationGroup();
    [CompilerGeneratedAttribute]
public void set_DestinationGroup(string value);
    [CompilerGeneratedAttribute]
public bool get_ResolveIncludes();
    [CompilerGeneratedAttribute]
public void set_ResolveIncludes(bool value);
    [CompilerGeneratedAttribute]
public string get_BatchDelimiter();
    [CompilerGeneratedAttribute]
public void set_BatchDelimiter(string value);
    [CompilerGeneratedAttribute]
public bool get_ParseResult();
    [CompilerGeneratedAttribute]
public void set_ParseResult(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckForUnsupportCommands();
    [CompilerGeneratedAttribute]
public void set_CheckForUnsupportCommands(bool value);
    [CompilerGeneratedAttribute]
public bool get_TreadSqlScriptUnsupportedCommandsAsWarning();
    [CompilerGeneratedAttribute]
public void set_TreadSqlScriptUnsupportedCommandsAsWarning(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_UnsupportedCommandsCount();
    [CompilerGeneratedAttribute]
public void set_UnsupportedCommandsCount(Dictionary`2<string, int> value);
    public ITaskItem[] get_ExistingVariables();
    public void set_ExistingVariables(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_UnsupportedKeywords();
    [CompilerGeneratedAttribute]
public void set_UnsupportedKeywords(ITaskItem[] value);
    public ITaskItem[] get_List();
    public virtual bool Execute();
}
internal class Microsoft.Web.Publishing.Tasks.SqlScriptPreprocessor.SqlVariableResoler : object {
    private Dictionary`2<string, KeyValuePair`2<string, bool>> m_setVariables;
    private Dictionary`2<string, bool> m_deletedVariables;
    private Dictionary`2<string, string> m_existingVariables;
    public Dictionary`2<string, KeyValuePair`2<string, bool>> Variables { get; }
    public SqlVariableResoler(IEnumerable`1<KeyValuePair`2<string, string>> existingVariables);
    private bool TryGetValue(string name, String& value);
    private void SetValue(string name, string value);
    private void SetValue(string name, string value, bool isDeclared);
    public Dictionary`2<string, KeyValuePair`2<string, bool>> get_Variables();
    public sealed virtual ParserAction DeleteVariable(string varName);
    public ParserAction ResolveVariable(string varName, String& varValue);
    public ParserAction ResolveVariableOwnership(string varName, string varValue, Boolean& bTakeOwmership);
    private sealed virtual override ParserAction ManagedBatchParser.IVariableResolver.ResolveVariable(string , String& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) );
    private sealed virtual override ParserAction ManagedBatchParser.IVariableResolver.ResolveVariableOwnership(string , string , Boolean& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) );
}
internal class Microsoft.Web.Publishing.Tasks.SR : object {
    internal static string MSDEPLOY_EXE_Start;
    internal static string MSDEPLOY_EXE_Succeeded;
    internal static string MSDEPLOY_EXE_Failed;
    internal static string MSDEPLOY_EXE_PreviewOnly;
    internal static string BUILDTASK_CopyFilesToFolders_CopyFailed;
    internal static string BUILDTASK_CopyFilesToFolders_DeleteFailed;
    internal static string BUILDTASK_CopyFilesToFolders_Copying;
    internal static string BUILDTASK_CopyFilesToFolders_Deleting;
    internal static string BUILDTASK_RemoveEmptyDirectories_Deleting;
    internal static string BUILDTASK_CopyFilesToFolders_UpToDate;
    internal static string BUILDTASK_CopyFilesToFolders_RetryDelayOutOfRange;
    internal static string BUILDTASK_CreateFolder_Failed;
    internal static string BUILDTASK_ManifestFile_IISSettingNotInFirst;
    internal static string BUILDTASK_IISSetting_RequireWebAdminDLL;
    internal static string BUILDTASK_MapURIToIisWebServer_AdminRequired;
    internal static string BUILDTASK_SqlScriptPreprocessFile;
    internal static string BUILDTASK_SqlScriptPreprocessFileDone;
    internal static string BUILDTASK_SqlScriptPreprocessFoundMsDeployUnsupportedCommands;
    internal static string BUILDTASK_SqlScriptPreprocessInvalidSqlScript;
    internal static string BUILDTASK_SqlScriptPreprocessFileFailed;
    internal static string BUILDTASK_IsCleanMSDeployPackageNeeded_PackageByDifferentVersion;
    internal static string BUILDTASK_FailedToLoadThisVersionMsDeployTryingTheNext;
    internal static string VSMSDEPLOY_Start;
    internal static string VSMSDEPLOY_Succeeded;
    internal static string VSMSDEPLOY_Canceled;
    internal static string VSMSDEPLOY_FailedWithException;
    internal static string VSMSDEPLOY_FailedWithExceptionWithDetail;
    internal static string VSMSDEPLOY_MSDEPLOYLOADFAIL;
    internal static string VSMSDEPLOY_MSDEPLOYVERSIONLOAD;
    internal static string VSMSDEPLOY_MSDEPLOYMinVersion;
    internal static string VSMSDEPLOY_MSDEPLOY32bit;
    internal static string VSMSDEPLOY_MSDEPLOY64bit;
    internal static string VSMSDEPLOY_InvalidOperation;
    internal static string VSMSDEPLOY_SucceedPackage;
    internal static string VSMSDEPLOY_SucceedArchiveDir;
    internal static string VSMSDEPLOY_SucceedDeploy;
    internal static string VSMSDEPLOY_FailedPackage;
    internal static string VSMSDEPLOY_FailedDeploy;
    internal static string VSMSDEPLOY_WebPackageHelpLinkMessage;
    internal static string VSMSDEPLOY_WebPackageHelpLink;
    internal static string VSMSDEPLOY_InvalidProviderName;
    internal static string VSMSDEPLOY_InvalidProviderOption;
    internal static string VSMSDEPLOY_AddParameterIntoObject;
    internal static string VSMSDEPLOY_UnknownParameter;
    internal static string VSMSDEPLOY_DuplicateItemMetadata;
    internal static string VSMSDEPLOY_ObjectIdentity;
    internal static string VSMSDEPLOY_SkipDirectiveSetEnable;
    internal static string VSMSDEPLOY_UnknownSkipDirective;
    internal static string VSMSDEPLOY_EncryptionExceptionMessage;
    internal static string VSMSDEPLOY_WebException401Message;
    internal static string VSMSDEPLOY_WebException404Message;
    internal static string VSMSDEPLOY_WebException502Message;
    internal static string VSMSDEPLOY_WebException550Message;
    internal static string VSMSDEPLOY_WebException551Message;
    internal static string VSMSDEPLOY_WebExceptionConnectFailureMessage;
    internal static string VSMSDEPLOY_MsDeployExceptionFwlink1SiteMessage;
    internal static string VSMSDEPLOY_MsDeployExceptionFwlink1SQLMessage;
    internal static string VSMSDEPLOY_MsDeployExceptionFwlink1Message;
    internal static string VSMSDEPLOY_MsDeployExceptionFwlink2Message;
    internal static string VSMSDEPLOY_MsDeployExceptionFwlink3Message;
    internal static string VSMSDEPLOY_MsDeployExceptionFwlink4Message;
    internal static string VSMSDEPLOY_SQLCEMigrationNeedLatestMSDeploy;
    internal static string BUILDTASK_MapProjectURLToIisWeb_InvalidProjectURL;
    internal static string BUILDTASK_MapProjectURLToIisWeb_UnsupportedProjectURL;
    internal static string BUILDTASK_ColectFilesInFolder_RootIsNotValid;
    internal static string MSDEPLOY_InvalidSourceCount;
    internal static string MSDEPLOY_InvalidDestinationCount;
    internal static string MSDEPLOY_InvalidVerbForTheInput;
    internal static string BUILDTASK_TransformXml_DestinationWriteFailed;
    internal static string BUILDTASK_TransformXml_SourceLoadFailed;
    internal static string BUILDTASK_TransformXml_TransformationApply;
    internal static string BUILDTASK_TransformXml_TransformationFailed;
    internal static string BUILDTASK_TransformXml_TransformationNoChange;
    internal static string BUILDTASK_TransformXml_TransformationStart;
    internal static string BUILDTASK_TransformXml_TransformationSucceeded;
    internal static string BUILDTASK_TransformXml_TransformLoadFailed;
    internal static string BUILDTASK_TransformXml_TransformOutput;
    internal static string WEBDEPLOY_MERGE_Start;
    internal static string WEBDEPLOY_MERGE_Succeeded;
    internal static string WEBDEPLOY_MERGE_Failed;
    internal static string WEBDEPLOY_MERGE_ApplicationPath;
    internal static string WEBDEPLOY_MERGE_SingleAssemblyName;
    internal static string WEBDEPLOY_MERGE_ContentAssemblyName;
    internal static string XMLTRANSFORMATION_AmbiguousTypeMatch;
    internal static string XMLTRANSFORMATION_BadAttributeValue;
    internal static string XMLTRANSFORMATION_FatalTransformSyntaxError;
    internal static string XMLTRANSFORMATION_ImportAttributeConflict;
    internal static string XMLTRANSFORMATION_ImportMissingAssembly;
    internal static string XMLTRANSFORMATION_ImportMissingNamespace;
    internal static string XMLTRANSFORMATION_ImportUnknownAttribute;
    internal static string XMLTRANSFORMATION_IncorrectBaseType;
    internal static string XMLTRANSFORMATION_InsertBadXPath;
    internal static string XMLTRANSFORMATION_InsertBadXPathResult;
    internal static string XMLTRANSFORMATION_InsertMissingArgument;
    internal static string XMLTRANSFORMATION_InsertTooManyArguments;
    internal static string XMLTRANSFORMATION_MatchAttributeDoesNotExist;
    internal static string XMLTRANSFORMATION_NoValidConstructor;
    internal static string XMLTRANSFORMATION_RequiresMinimumArguments;
    internal static string XMLTRANSFORMATION_RequiresExactArguments;
    internal static string XMLTRANSFORMATION_TooManyArguments;
    internal static string XMLTRANSFORMATION_TransformArgumentFoundNoAttributes;
    internal static string XMLTRANSFORMATION_TransformBeginExecutingMessage;
    internal static string XMLTRANSFORMATION_TransformDoesNotExpectArguments;
    internal static string XMLTRANSFORMATION_TransformEndExecutingMessage;
    internal static string XMLTRANSFORMATION_TransformErrorExecutingMessage;
    internal static string XMLTRANSFORMATION_TransformMessageInsert;
    internal static string XMLTRANSFORMATION_TransformMessageNoRemoveAttributes;
    internal static string XMLTRANSFORMATION_TransformMessageNoSetAttributes;
    internal static string XMLTRANSFORMATION_TransformMessageRemove;
    internal static string XMLTRANSFORMATION_TransformMessageRemoveAttribute;
    internal static string XMLTRANSFORMATION_TransformMessageRemoveAttributes;
    internal static string XMLTRANSFORMATION_TransformMessageReplace;
    internal static string XMLTRANSFORMATION_TransformMessageSetAttribute;
    internal static string XMLTRANSFORMATION_TransformMessageSetAttributes;
    internal static string XMLTRANSFORMATION_TransformNameFormatLong;
    internal static string XMLTRANSFORMATION_TransformNameFormatShort;
    internal static string XMLTRANSFORMATION_TransformNoMatchingTargetNodes;
    internal static string XMLTRANSFORMATION_TransformNotExecutingMessage;
    internal static string XMLTRANSFORMATION_TransformOnlyAppliesOnce;
    internal static string XMLTRANSFORMATION_TransformSourceMatchWasRemoved;
    internal static string XMLTRANSFORMATION_TransformStatusApplyTarget;
    internal static string XMLTRANSFORMATION_TransformStatusApplyTargetNoLineInfo;
    internal static string XMLTRANSFORMATION_TransformStatusXPath;
    internal static string XMLTRANSFORMATION_UnknownTypeName;
    internal static string XMLTRANSFORMATION_UnknownXdtTag;
    internal static string PublishArgumentError_InvalidRemoteServiceUrl;
    internal static string PublishArgumentError_InvalidSiteAppName;
    internal static string CREATEPROVIDERLIST_NotSupportBothProvidersXMLAndProvidersFile;
    internal static string CREATEPROVIDERLIST_MustProviderProvidersXMLorProvidersFile;
    internal static string PublishLocalizedString_InvalidArgument;
    internal static string PublishLocalizedString_IISAppParameterDescription;
    internal static string PublishLocalizedString_IISAppPhysicalPathDescription;
    internal static string PublishLocalizedString_DatabaseConnectionStringParameterDescription;
    internal static string PublishLocalizedString_WebConfigConnectionStringParameterDescription;
    internal static string PublishLocalizedString_SqlCommandVariableParameterDescription;
    internal static string PublishLocalizedString_DefaultExcludeIntermediateOutputFolderMessage;
    internal static string PublishLocalizedString_DefaultExcludeFileExtentionOutMessage;
    internal static string PublishLocalizedString_DefaultExcludeSourceControlItems;
    internal static string PublishLocalizedString_GatherAllFilesInProjectFolderExceptExclusion;
    internal static string PublishLocalizedString_GatherSpecificItemsFromProject;
    internal static string PublishLocalizedString_GatherSpecificItemsFromProjectNoDetail;
    internal static string PublishLocalizedString_GatherSpecificOutputsFromProject;
    internal static string PublishLocalizedString_ExcludeAllFilesUnderFolder;
    internal static string PublishLocalizedString_ExcludeAllDebugSymbols;
    internal static string PublishLocalizedString_MsBuildPropertySettingValue;
    internal static string PublishLocalizedString_CheckingForValidMsBuildPropertyValue;
    internal static string PublishLocalizedString_FoundApplicationConfigForTransformation;
    internal static string PublishLocalizedString_TransformConfigUsingTransformFileToTransformOutputFile;
    internal static string PublishLocalizedString_AutoConnectionStringTransformConfigToTransformOutputFile;
    internal static string PublishLocalizedString_WebPublishPipelineCollectFilesPhase;
    internal static string PublishLocalizedString_WebPublishPipelineTransformPhase;
    internal static string PublishLocalizedString_WebPublishPipelineDeployPhase;
    internal static string PublishLocalizedString_WebPublishPipelineCopyWebApplication;
    internal static string PublishLocalizedString_WebPublishPipelineDeployPhaseStage1;
    internal static string PublishLocalizedString_WebPublishPipelineMSDeploySettings;
    internal static string PublishLocalizedString_WebPublishPipelineMaterializeAllFilesToTempDir;
    internal static string PublishLocalizedString_GenerateMsdeploySourceManifestFile;
    internal static string PublishLocalizedString_PackagingIntoLocation;
    internal static string PublishLocalizedString_GenerateSampleMsdeployBatchScript;
    internal static string PublishLocalizedString_FinishGenerateSampleMsDeployBatchScript;
    internal static string PublishLocalizedString_TestDeployPackageOnCurrentMachine;
    internal static string PublishLocalizedString_ValidatingMsDeployPublishSettings;
    internal static string PublishLocalizedString_ValidateErrorMsDeployPublishSetting;
    internal static string PublishLocalizedString_WarningOnSettingRemoteSitePhysicalPathWhenIISSettingIsNotInclude;
    internal static string PublishLocalizedString_WarningOnSettingBothIncludeIisSettingsOnPublishAndDeployAsIisApp;
    internal static string PublishLocalizedString_StartMsDeployPublishToRemote;
    internal static string PublishLocalizedString_ErrorPackageAsFilePointToAnExistingFolder;
    internal static string PublishLocalizedString_ErrorPackageAsFolderPointToAnExistingFile;
    internal static string PublishLocalizedString_ErrorCannotDeployFromIIS7AboveToLowerIIS;
    internal static string PublishLocalizedString_ErrorUseWPP_CopyWebApplicationAndPipelineDependsOnBuildBothTrue;
    internal static string PublishLocalizedString_ErrorUseIisIsTrueButIisUrlIsEmpty;
    internal static string PublishLocalizedString_ErrorInvalidPropertyWhenSettingPropertyIsTrue;
    internal static string PublishLocalizedString_ErrorInvalidMSBuildItemCollectionCount;
    internal static string PublishLocalizedString_SampleScriptHelpSection1;
    internal static string PublishLocalizedString_SampleScriptHelpRequired;
    internal static string PublishLocalizedString_SampleScriptHelpRequiredExplainedFlagT;
    internal static string PublishLocalizedString_SampleScriptHelpRequiredExplainedFlagY;
    internal static string PublishLocalizedString_SampleScriptHelpOptional;
    internal static string PublishLocalizedString_SampleScriptHelpOptionalExplainedFlagM;
    internal static string PublishLocalizedString_SampleScriptHelpOptionalExplainedFlagUP;
    internal static string PublishLocalizedString_SampleScriptHelpOptionalExplainedFlagG;
    internal static string PublishLocalizedString_SampleScriptHelpOptionalExplainedFlagA;
    internal static string PublishLocalizedString_SampleScriptHelpOptionalExplainedFlagL;
    internal static string PublishLocalizedString_SampleScriptHelpOptionalExplainedAdditionalFlags;
    internal static string PublishLocalizedString_SampleScriptHelpEnviroment;
    internal static string PublishLocalizedString_SampleScriptHelpEnviromentExplained;
    internal static string PublishLocalizedString_SampleScriptHelpMoreInfo;
    private static SR loader;
    private ResourceManager resources;
    private static CultureInfo Culture { get; }
    public static ResourceManager Resources { get; }
    private static SR();
    private static SR GetLoader();
    private static CultureInfo get_Culture();
    public static ResourceManager get_Resources();
    public static string GetString(string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Boolean& usedFallback);
    public static object GetObject(string name);
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.Web.Publishing.Tasks.SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.Web.Publishing.Tasks.SRDescriptionAttribute : DescriptionAttribute {
    private bool replaced;
    public string Description { get; }
    public SRDescriptionAttribute(string description);
    public virtual string get_Description();
}
internal class Microsoft.Web.Publishing.Tasks.TaskTransformationLogger : object {
    private TaskLoggingHelper loggingHelper;
    private int indentLevel;
    private string indentStringPiece;
    private string indentString;
    private bool stackTrace;
    private string IndentString { get; }
    private int IndentLevel { get; private set; }
    public TaskTransformationLogger(TaskLoggingHelper loggingHelper);
    public TaskTransformationLogger(TaskLoggingHelper loggingHelper, bool stackTrace);
    private string get_IndentString();
    private int get_IndentLevel();
    private void set_IndentLevel(int value);
    private sealed virtual override void Microsoft.Web.Publishing.Tasks.IXmlTransformationLogger.LogMessage(string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.Publishing.Tasks.IXmlTransformationLogger.LogMessage(MessageType type, string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.Publishing.Tasks.IXmlTransformationLogger.LogWarning(string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.Publishing.Tasks.IXmlTransformationLogger.LogWarning(string file, string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.Publishing.Tasks.IXmlTransformationLogger.LogWarning(string file, int lineNumber, int linePosition, string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.Publishing.Tasks.IXmlTransformationLogger.LogError(string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.Publishing.Tasks.IXmlTransformationLogger.LogError(string file, string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.Publishing.Tasks.IXmlTransformationLogger.LogError(string file, int lineNumber, int linePosition, string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.Publishing.Tasks.IXmlTransformationLogger.LogErrorFromException(Exception ex);
    private sealed virtual override void Microsoft.Web.Publishing.Tasks.IXmlTransformationLogger.LogErrorFromException(Exception ex, string file);
    private sealed virtual override void Microsoft.Web.Publishing.Tasks.IXmlTransformationLogger.LogErrorFromException(Exception ex, string file, int lineNumber, int linePosition);
    private sealed virtual override void Microsoft.Web.Publishing.Tasks.IXmlTransformationLogger.StartSection(string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.Publishing.Tasks.IXmlTransformationLogger.StartSection(MessageType type, string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.Publishing.Tasks.IXmlTransformationLogger.EndSection(string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.Publishing.Tasks.IXmlTransformationLogger.EndSection(MessageType type, string message, Object[] messageArgs);
}
public abstract class Microsoft.Web.Publishing.Tasks.Transform : object {
    private MissingTargetMessage missingTargetMessage;
    private bool applyTransformToAllTargetNodes;
    private bool useParentAsTargetNode;
    private XmlTransformationLogger logger;
    private XmlElementContext context;
    private XmlNode currentTransformNode;
    private XmlNode currentTargetNode;
    private string argumentString;
    private IList`1<string> arguments;
    protected bool ApplyTransformToAllTargetNodes { get; protected set; }
    protected bool UseParentAsTargetNode { get; protected set; }
    protected MissingTargetMessage MissingTargetMessage { get; protected set; }
    protected XmlNode TransformNode { get; }
    protected XmlNode TargetNode { get; }
    protected XmlNodeList TargetNodes { get; }
    protected XmlTransformationLogger Log { get; }
    protected string ArgumentString { get; }
    protected IList`1<string> Arguments { get; }
    private string TransformNameLong { get; }
    internal string TransformNameShort { get; }
    private string TransformName { get; }
    protected Transform(TransformFlags flags);
    protected Transform(TransformFlags flags, MissingTargetMessage message);
    protected bool get_ApplyTransformToAllTargetNodes();
    protected void set_ApplyTransformToAllTargetNodes(bool value);
    protected bool get_UseParentAsTargetNode();
    protected void set_UseParentAsTargetNode(bool value);
    protected MissingTargetMessage get_MissingTargetMessage();
    protected void set_MissingTargetMessage(MissingTargetMessage value);
    protected abstract virtual void Apply();
    protected XmlNode get_TransformNode();
    protected XmlNode get_TargetNode();
    protected XmlNodeList get_TargetNodes();
    protected XmlTransformationLogger get_Log();
    protected T GetService();
    protected string get_ArgumentString();
    protected IList`1<string> get_Arguments();
    private string get_TransformNameLong();
    internal string get_TransformNameShort();
    private string get_TransformName();
    internal void Execute(XmlElementContext context, string argumentString);
    private void ReleaseLogger();
    private bool ApplyOnAllTargetNodes();
    private void ApplyOnce();
    private void WriteApplyMessage(XmlNode targetNode);
    private bool ShouldExecuteTransform();
    private bool HasRequiredTarget();
    private void HandleMissingTarget(XmlElementContext matchFailureContext, bool existedInOriginal);
}
[FlagsAttribute]
public enum Microsoft.Web.Publishing.Tasks.TransformFlags : Enum {
    public int value__;
    public static TransformFlags None;
    public static TransformFlags ApplyTransformToAllTargetNodes;
    public static TransformFlags UseParentAsTargetNode;
}
public class Microsoft.Web.Publishing.Tasks.TransformXml : Task {
    private string _sourceFile;
    private string _transformFile;
    private string _destinationFile;
    private string _sourceRootPath;
    private string _transformRootPath;
    private bool stackTrace;
    [RequiredAttribute]
public string Source { get; public set; }
    public string SourceRootPath { get; public set; }
    [RequiredAttribute]
public string Transform { get; public set; }
    public string TransformRootPath { get; public set; }
    [RequiredAttribute]
public string Destination { get; public set; }
    public bool StackTrace { get; public set; }
    public string get_Source();
    public void set_Source(string value);
    public string get_SourceRootPath();
    public void set_SourceRootPath(string value);
    public string get_Transform();
    public void set_Transform(string value);
    public string get_TransformRootPath();
    public void set_TransformRootPath(string value);
    public string get_Destination();
    public void set_Destination(string value);
    public bool get_StackTrace();
    public void set_StackTrace(bool value);
    public virtual bool Execute();
    private void SaveTransformedFile(XmlTransformableDocument document, string destinationFile);
    private XmlTransformableDocument OpenSourceFile(string sourceFile);
    private XmlTransformation OpenTransformFile(string transformFile, IXmlTransformationLogger logger);
}
internal class Microsoft.Web.Publishing.Tasks.UriWrapper : object {
    private string m_projectIisURL;
    private Uri m_uri;
    private IPAddress[] m_iPAddresses;
    private IPHostEntry m_iPHostEntry;
    private bool m_isLocalMachine;
    [CompilerGeneratedAttribute]
private bool <Initialized>k__BackingField;
    public Uri Uri { get; }
    public IPAddress[] IPAddresses { get; }
    public IPHostEntry IPHostEntry { get; }
    public bool IsLocalMachine { get; }
    public bool Initialized { get; public set; }
    public UriWrapper(string projectIIsUrl);
    public Uri get_Uri();
    public IPAddress[] get_IPAddresses();
    public IPHostEntry get_IPHostEntry();
    public bool get_IsLocalMachine();
    [CompilerGeneratedAttribute]
public bool get_Initialized();
    [CompilerGeneratedAttribute]
public void set_Initialized(bool value);
    public bool Initialize(String& errorString);
    private bool InitUri(String& errorString);
}
public class Microsoft.Web.Publishing.Tasks.VSMSDeploy : Task {
    private string _disableLink;
    private string _enableLink;
    private string _disableSkipDirective;
    private string _enableSkipDirective;
    private bool _result;
    private bool _whatIf;
    private string _deploymentTraceLevel;
    private bool _useCheckSum;
    private int m_retryAttempts;
    private int m_retryInterval;
    private bool _invokedByPublish;
    private bool _allowUntrustedCert;
    private bool _skipExtraFilesOnServer;
    private bool _regIISUntrustedCertCallback;
    private ITaskItem[] m_sourceITaskItem;
    private ITaskItem[] m_destITaskItem;
    private ITaskItem[] m_replaceRuleItemsITaskItem;
    private ITaskItem[] m_skipRuleItemsITaskItem;
    private ITaskItem[] m_declareParameterItems;
    private ITaskItem[] m_importDeclareParametersItems;
    private ITaskItem[] m_simpleSetParamterItems;
    private ITaskItem[] m_importSetParametersItems;
    private ITaskItem[] m_setParamterItems;
    private BaseMSDeployDriver m_msdeployDriver;
    [CompilerGeneratedAttribute]
private bool <OptimisticParameterDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSDeployVersionsToTry>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] Source { get; public set; }
    public ITaskItem[] Destination { get; public set; }
    public bool AllowUntrustedCertificate { get; public set; }
    public bool SkipExtraFilesOnServer { get; public set; }
    public bool InvokedByPublish { get; public set; }
    public bool WhatIf { get; public set; }
    public string DeploymentTraceLevel { get; public set; }
    public bool UseChecksum { get; public set; }
    [OutputAttribute]
public bool Result { get; public set; }
    public string DisableLink { get; public set; }
    public string EnableLink { get; public set; }
    public string DisableSkipDirective { get; public set; }
    public string EnableSkipDirective { get; public set; }
    public int RetryAttempts { get; public set; }
    public int RetryInterval { get; public set; }
    public ITaskItem[] ReplaceRuleItems { get; public set; }
    public ITaskItem[] SkipRuleItems { get; public set; }
    public ITaskItem[] DeclareParameterItems { get; public set; }
    public bool OptimisticParameterDefaultValue { get; public set; }
    public ITaskItem[] ImportDeclareParametersItems { get; public set; }
    public ITaskItem[] SimpleSetParameterItems { get; public set; }
    public ITaskItem[] ImportSetParametersItems { get; public set; }
    public ITaskItem[] SetParameterItems { get; public set; }
    public string MSDeployVersionsToTry { get; public set; }
    private string Microsoft.Web.Publishing.IVSMSDeployHost.TaskName { get; }
    private TaskLoggingHelper Microsoft.Web.Publishing.IVSMSDeployHost.Log { get; }
    private IBuildEngine Microsoft.Web.Publishing.IVSMSDeployHost.BuildEngine { get; }
    public ITaskItem[] get_Source();
    public void set_Source(ITaskItem[] value);
    public ITaskItem[] get_Destination();
    public void set_Destination(ITaskItem[] value);
    public bool get_AllowUntrustedCertificate();
    public void set_AllowUntrustedCertificate(bool value);
    public bool get_SkipExtraFilesOnServer();
    public void set_SkipExtraFilesOnServer(bool value);
    public bool get_InvokedByPublish();
    public void set_InvokedByPublish(bool value);
    public bool get_WhatIf();
    public void set_WhatIf(bool value);
    public string get_DeploymentTraceLevel();
    public void set_DeploymentTraceLevel(string value);
    public bool get_UseChecksum();
    public void set_UseChecksum(bool value);
    public bool get_Result();
    public void set_Result(bool value);
    public string get_DisableLink();
    public void set_DisableLink(string value);
    public string get_EnableLink();
    public void set_EnableLink(string value);
    public string get_DisableSkipDirective();
    public void set_DisableSkipDirective(string value);
    public string get_EnableSkipDirective();
    public void set_EnableSkipDirective(string value);
    public int get_RetryAttempts();
    public void set_RetryAttempts(int value);
    public int get_RetryInterval();
    public void set_RetryInterval(int value);
    public ITaskItem[] get_ReplaceRuleItems();
    public void set_ReplaceRuleItems(ITaskItem[] value);
    public ITaskItem[] get_SkipRuleItems();
    public void set_SkipRuleItems(ITaskItem[] value);
    public ITaskItem[] get_DeclareParameterItems();
    public void set_DeclareParameterItems(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_OptimisticParameterDefaultValue();
    [CompilerGeneratedAttribute]
public void set_OptimisticParameterDefaultValue(bool value);
    public ITaskItem[] get_ImportDeclareParametersItems();
    public void set_ImportDeclareParametersItems(ITaskItem[] value);
    public ITaskItem[] get_SimpleSetParameterItems();
    public void set_SimpleSetParameterItems(ITaskItem[] value);
    public ITaskItem[] get_ImportSetParametersItems();
    public void set_ImportSetParametersItems(ITaskItem[] value);
    public ITaskItem[] get_SetParameterItems();
    public void set_SetParameterItems(ITaskItem[] value);
    private bool AllowUntrustedCertCallback(object sp, X509Certificate cert, X509Chain chain, SslPolicyErrors problem);
    private void SetupPublishRelatedProperties(VSMSDeployObject& dest);
    [CompilerGeneratedAttribute]
public string get_MSDeployVersionsToTry();
    [CompilerGeneratedAttribute]
public void set_MSDeployVersionsToTry(string value);
    public virtual bool Execute();
    private sealed virtual override string Microsoft.Web.Publishing.IVSMSDeployHost.get_TaskName();
    private sealed virtual override TaskLoggingHelper Microsoft.Web.Publishing.IVSMSDeployHost.get_Log();
    private sealed virtual override IBuildEngine Microsoft.Web.Publishing.IVSMSDeployHost.get_BuildEngine();
    private sealed virtual override void Microsoft.Web.Publishing.IVSMSDeployHost.UpdateDeploymentBaseOptions(VSMSDeployObject srcVsMsDeployobject, VSMSDeployObject destVsMsDeployobject);
    private sealed virtual override void Microsoft.Web.Publishing.IVSMSDeployHost.ClearDeploymentBaseOptions(VSMSDeployObject srcVsMsDeployobject, VSMSDeployObject destVsMsDeployobject);
    private sealed virtual override void Microsoft.Web.Publishing.IVSMSDeployHost.PopulateOptions(object option);
    public sealed virtual void Cancel();
}
internal class Microsoft.Web.Publishing.Tasks.VSMSDeployDriverInCmd : BaseMSDeployDriver {
    internal VSMSDeployDriverInCmd(VSMSDeployObject src, VSMSDeployObject dest, IVSMSDeployHost host);
    protected virtual void BeforeSync();
    private static void AddAllPropertiesToCustomBuildWithPropertyEventArgs(CustomBuildWithPropertiesEventArgs cbpEventArg, object obj);
    protected virtual void LogTrace(object args);
    protected virtual void StartSync();
    protected virtual void WaitForDone();
    protected virtual void AfterSync();
}
internal class Microsoft.Web.Publishing.Tasks.VSMSDeployObject : object {
    protected string m_root;
    protected string m_disableLinks;
    protected string m_enableLinks;
    protected string m_provider;
    protected bool m_fNoDisplayRoot;
    protected int m_retryInterval;
    protected int m_retryAttempts;
    private IList`1<ParameterInfo> m_iListParameter;
    private IList`1<ProviderOption> m_iListProviderOption;
    private IList`1<ParameterInfoWithEntry> m_iListParameterWithEntry;
    private IList`1<string> m_iListSetParametersFiles;
    private Dictionary`2<string, string> m_NameValueDictionary;
    [DynamicAttribute]
protected object m_deploymentBaseOptions;
    public string Root { get; public set; }
    public string Provider { get; public set; }
    public bool IsLocal { get; }
    public bool UseSeparatedCredential { get; }
    public string DisableLinks { get; public set; }
    public string EnableLinks { get; public set; }
    public string ComputerName { get; public set; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public string MSDeployServiceUrl { get; public set; }
    public string AuthenticationType { get; public set; }
    public string EncryptPassword { get; public set; }
    public bool IncludeAcls { get; public set; }
    public bool PrefetchPayload { get; public set; }
    public string WebServerAppHostConfigDirectory { get; public set; }
    public string WebServerDirectory { get; public set; }
    public string WebServerManifest { get; public set; }
    public int RetryAttempts { get; public set; }
    public int RetryInterval { get; public set; }
    public IList`1<ParameterInfo> Parameters { get; }
    public IList`1<ProviderOption> ProviderOptions { get; }
    public IList`1<ParameterInfoWithEntry> EntryParameters { get; }
    public IList`1<string> SetParametersFiles { get; }
    [DynamicAttribute]
public object BaseOptions { get; }
    public VSMSDeployObject(string provider, string root);
    public VSMSDeployObject(ITaskItem taskItem);
    public VSMSDeployObject(ITaskItem taskItem, bool fNoDisplayRoot);
    private string GetDictionaryValue(string name);
    private void SetDictionaryValue(string name, string value);
    public virtual string ToString();
    public virtual string get_Root();
    public virtual void set_Root(string value);
    public virtual string get_Provider();
    public virtual void set_Provider(string value);
    public virtual bool get_IsLocal();
    public virtual bool get_UseSeparatedCredential();
    public virtual string get_DisableLinks();
    public virtual void set_DisableLinks(string value);
    public virtual string get_EnableLinks();
    public virtual void set_EnableLinks(string value);
    public virtual string get_ComputerName();
    public virtual void set_ComputerName(string value);
    public virtual string get_UserName();
    public virtual void set_UserName(string value);
    public virtual string get_Password();
    public virtual void set_Password(string value);
    public string get_MSDeployServiceUrl();
    public void set_MSDeployServiceUrl(string value);
    public string get_AuthenticationType();
    public void set_AuthenticationType(string value);
    public string get_EncryptPassword();
    public void set_EncryptPassword(string value);
    public bool get_IncludeAcls();
    public void set_IncludeAcls(bool value);
    public bool get_PrefetchPayload();
    public void set_PrefetchPayload(bool value);
    public string get_WebServerAppHostConfigDirectory();
    public void set_WebServerAppHostConfigDirectory(string value);
    public string get_WebServerDirectory();
    public void set_WebServerDirectory(string value);
    public string get_WebServerManifest();
    public void set_WebServerManifest(string value);
    public int get_RetryAttempts();
    public void set_RetryAttempts(int value);
    public int get_RetryInterval();
    public void set_RetryInterval(int value);
    public IList`1<ParameterInfo> get_Parameters();
    public IList`1<ProviderOption> get_ProviderOptions();
    public void SetProviderOption(string factoryName, string parameterName, string parameterStringValue);
    public void SyncParameter(string parameterName, string parameterStringValue);
    public IList`1<ParameterInfoWithEntry> get_EntryParameters();
    public IList`1<string> get_SetParametersFiles();
    public void SyncParameter(string name, string value, string type, string scope, string matchRegularExpression, string description, string defaultValue, string tags, string element, string validationString);
    public void SyncParameterFile(string filename);
    public void ResetBaseOptions();
    public object get_BaseOptions();
    public void SyncTo(VSMSDeployObject destObject, object syncOptions, IVSMSDeployHost _host);
}
internal static class Microsoft.Web.Publishing.Tasks.VSMSDeployObjectFactory : object {
    public static VSMSDeployObject CreateVSMSDeployObject(ITaskItem taskItem);
    public static VSMSDeployObject CreateVSMSDeployObject(string provider, string path);
}
internal class Microsoft.Web.Publishing.Tasks.WhitespaceTrackingTextReader : PositionTrackingTextReader {
    private StringBuilder precedingWhitespace;
    public string PrecedingWhitespace { get; }
    public WhitespaceTrackingTextReader(TextReader reader);
    public virtual int Read();
    public string get_PrecedingWhitespace();
    private void UpdateWhitespaceTracking(int character);
    private void AppendWhitespaceCharacter(int character);
    private void ResetWhitespaceString();
}
internal static class Microsoft.Web.Publishing.Tasks.XmlArgumentUtility : object {
    internal static IList`1<string> SplitArguments(string argumentString);
    private static IList`1<string> RecombineArguments(IList`1<string> arguments, char separator);
    private static void TrimStrings(IList`1<string> arguments);
    private static int CountParens(string str);
}
internal class Microsoft.Web.Publishing.Tasks.XmlAttributePreservationDict : object {
    private List`1<string> orderedAttributes;
    private Dictionary`2<string, string> leadingSpaces;
    private string attributeNewLineString;
    private bool computedOneAttributePerLine;
    private bool oneAttributePerLine;
    private bool OneAttributePerLine { get; }
    private bool get_OneAttributePerLine();
    internal void ReadPreservationInfo(string elementStartTag);
    internal void WritePreservedAttributes(XmlAttributePreservingWriter writer, XmlAttributeCollection attributes);
    internal void UpdatePreservationInfo(XmlAttributeCollection updatedAttributes, XmlFormatter formatter);
    private bool ComputeOneAttributePerLine();
    private bool ContainsNewLine(string space);
    public string GetAttributeNewLineString(XmlFormatter formatter);
    private string ComputeAttributeNewLineString(XmlFormatter formatter);
    private string LookAheadForNewLineString();
    private void EnsureAttributeNewLineString(XmlFormatter formatter);
}
internal class Microsoft.Web.Publishing.Tasks.XmlAttributePreservationProvider : object {
    private PositionTrackingTextReader reader;
    public XmlAttributePreservationProvider(string fileName);
    public XmlAttributePreservationDict GetDictAtPosition(int lineNumber, int linePosition);
}
internal class Microsoft.Web.Publishing.Tasks.XmlAttributePreservingWriter : XmlWriter {
    private XmlTextWriter xmlWriter;
    private AttributeTextWriter textWriter;
    public WriteState WriteState { get; }
    public XmlAttributePreservingWriter(string fileName, Encoding encoding);
    public XmlAttributePreservingWriter(TextWriter textWriter);
    public void WriteAttributeWhitespace(string whitespace);
    public void WriteAttributeTrailingWhitespace(string whitespace);
    public string SetAttributeNewLineString(string newLineString);
    private bool IsOnlyWhitespace(string whitespace);
    public virtual void Close();
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteCData(string text);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteComment(string text);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteEndAttribute();
    public virtual void WriteEndDocument();
    public virtual void WriteEndElement();
    public virtual void WriteEntityRef(string name);
    public virtual void WriteFullEndElement();
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteRaw(string data);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteStartDocument();
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual WriteState get_WriteState();
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
}
internal class Microsoft.Web.Publishing.Tasks.XmlElementContext : XmlNodeContext {
    private XmlElementContext parentContext;
    private string xpath;
    private string parentXPath;
    private XmlDocument xmlTargetDoc;
    private IServiceProvider serviceProvider;
    private XmlNode transformNodes;
    private XmlNodeList targetNodes;
    private XmlNodeList targetParents;
    private XmlAttribute transformAttribute;
    private XmlAttribute locatorAttribute;
    private XmlNamespaceManager namespaceManager;
    private static Regex nameAndArgumentsRegex;
    public XmlElement Element { get; }
    public string XPath { get; }
    public string ParentXPath { get; }
    public int TransformLineNumber { get; }
    public int TransformLinePosition { get; }
    public XmlAttribute TransformAttribute { get; }
    public XmlAttribute LocatorAttribute { get; }
    internal XmlNode TransformNode { get; }
    internal XmlNodeList TargetNodes { get; }
    internal XmlNodeList TargetParents { get; }
    private XmlDocument TargetDocument { get; }
    private Regex NameAndArgumentsRegex { get; }
    public XmlElementContext(XmlElementContext parent, XmlElement element, XmlDocument xmlTargetDoc, IServiceProvider serviceProvider);
    private static XmlElementContext();
    public T GetService();
    public XmlElement get_Element();
    public string get_XPath();
    public string get_ParentXPath();
    public Transform ConstructTransform(String& argumentString);
    public int get_TransformLineNumber();
    public int get_TransformLinePosition();
    public XmlAttribute get_TransformAttribute();
    public XmlAttribute get_LocatorAttribute();
    private string ConstructXPath();
    private string ConstructParentXPath();
    private Locator CreateLocator(String& argumentString);
    internal XmlNode get_TransformNode();
    internal XmlNodeList get_TargetNodes();
    internal XmlNodeList get_TargetParents();
    private XmlDocument get_TargetDocument();
    private XmlNode CreateCloneInTargetDocument(XmlNode sourceNode);
    private void ScrubTransformAttributesAndNamespaces(XmlNode node);
    private XmlNodeList GetTargetNodes(string xpath);
    private Exception WrapException(Exception ex);
    private Exception WrapException(Exception ex, XmlNode node);
    private XmlNamespaceManager GetNamespaceManager();
    private XmlNameTable GetParentNameTable();
    private Regex get_NameAndArgumentsRegex();
    private string ParseNameAndArguments(string name, String& arguments);
    private ObjectType CreateObjectFromAttribute(String& argumentString, XmlAttribute& objectAttribute);
    internal bool HasTargetNode(XmlElementContext& failedContext, Boolean& existedInOriginal);
    internal bool HasTargetParent(XmlElementContext& failedContext, Boolean& existedInOriginal);
    private bool ExistedInOriginal(string xpath);
}
public class Microsoft.Web.Publishing.Tasks.XmlFileInfoDocument : XmlDocument {
    private Encoding _textEncoding;
    private XmlTextReader _reader;
    private XmlAttributePreservationProvider _preservationProvider;
    private bool _firstLoad;
    private string _fileName;
    private int _lineNumberOffset;
    private int _linePositionOffset;
    internal bool HasErrorInfo { get; }
    internal string FileName { get; }
    private int CurrentLineNumber { get; }
    private int CurrentLinePosition { get; }
    private bool FirstLoad { get; }
    private XmlAttributePreservationProvider PreservationProvider { get; }
    private Encoding TextEncoding { get; }
    public virtual void Load(string filename);
    public virtual void Load(Stream inStream);
    public virtual void Load(TextReader txtReader);
    public virtual void Load(XmlReader reader);
    private void LoadFromFileName(string filename);
    private void LoadFromTextReader(TextReader textReader);
    private Encoding GetEncodingFromStream(Stream stream);
    internal XmlNode CloneNodeFromOtherDocument(XmlNode element);
    internal bool get_HasErrorInfo();
    internal string get_FileName();
    private int get_CurrentLineNumber();
    private int get_CurrentLinePosition();
    private bool get_FirstLoad();
    private XmlAttributePreservationProvider get_PreservationProvider();
    private Encoding get_TextEncoding();
    public virtual void Save(string filename);
    public virtual XmlElement CreateElement(string prefix, string localName, string namespaceURI);
    public virtual XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI);
    internal bool IsNewNode(XmlNode node);
    private XmlElement FindContainingElement(XmlNode node);
}
internal class Microsoft.Web.Publishing.Tasks.XmlFormatter : object {
    private XmlFileInfoDocument document;
    private string originalFileName;
    private LinkedList`1<string> indents;
    private LinkedList`1<string> attributeIndents;
    private string currentIndent;
    private string currentAttributeIndent;
    private string oneTab;
    private string defaultTab;
    private XmlNode currentNode;
    private XmlNode previousNode;
    private XmlNode CurrentNode { get; private set; }
    private XmlNode PreviousNode { get; }
    private string PreviousIndent { get; }
    private string CurrentIndent { get; }
    public string CurrentAttributeIndent { get; }
    private string OneTab { get; }
    public string DefaultTab { get; public set; }
    private XmlFormatter(XmlFileInfoDocument document);
    public static void Format(XmlDocument document);
    private XmlNode get_CurrentNode();
    private void set_CurrentNode(XmlNode value);
    private XmlNode get_PreviousNode();
    private string get_PreviousIndent();
    private string get_CurrentIndent();
    public string get_CurrentAttributeIndent();
    private string get_OneTab();
    public string get_DefaultTab();
    public void set_DefaultTab(string value);
    private void FormatLoop(XmlNode parentNode);
    private void FormatAttributes(XmlNode node);
    private int HandleElement(XmlNode node);
    private void ReorderNewItemsAtEnd(XmlNode node);
    private int HandleStartElement(XmlNode node);
    private int HandleEndElement(XmlNode node);
    private int HandleWhiteSpace(XmlNode node);
    private int EnsureNodeIndent(XmlNode node, bool indentBeforeEnd);
    private string GetIndentFromWhiteSpace(XmlNode node);
    private int FindLastNewLine(string whitespace);
    private void SetIndent(string indent);
    private void PushIndent();
    private void PopIndent();
    private bool NeedsIndent(XmlNode node, XmlNode previousNode);
    private bool IsWhiteSpace(XmlNode node);
    public bool IsText(XmlNode node);
    private bool IsNewNode(XmlNode node);
    private void InsertIndentBefore(XmlNode node);
    private void InsertIndentBeforeEnd(XmlNode node);
    private string ComputeCurrentIndent();
    private string LookAheadForIndent();
    private string ComputeOneTab();
    private string ConvertIndentToTab(string indent);
    private string ComputeCurrentAttributeIndent();
    private string LookForSiblingIndent(XmlNode currentNode);
}
internal class Microsoft.Web.Publishing.Tasks.XmlNodeContext : object {
    private XmlNode node;
    public XmlNode Node { get; }
    public bool HasLineInfo { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XmlNodeContext(XmlNode node);
    public XmlNode get_Node();
    public bool get_HasLineInfo();
    public int get_LineNumber();
    public int get_LinePosition();
}
public class Microsoft.Web.Publishing.Tasks.XmlNodeException : XmlTransformationException {
    private XmlFileInfoDocument document;
    private IXmlLineInfo lineInfo;
    public bool HasErrorInfo { get; }
    public string FileName { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XmlNodeException(Exception innerException, XmlNode node);
    public XmlNodeException(string message, XmlNode node);
    public static Exception Wrap(Exception ex, XmlNode node);
    public bool get_HasErrorInfo();
    public string get_FileName();
    public int get_LineNumber();
    public int get_LinePosition();
}
public class Microsoft.Web.Publishing.Tasks.XmlTransformableDocument : XmlFileInfoDocument {
    private XmlDocument xmlOriginal;
    public bool IsChanged { get; }
    public bool get_IsChanged();
    internal void OnBeforeChange();
    internal void OnAfterChange();
    private void CloneOriginalDocument();
    private bool IsXmlEqual(XmlDocument xmlOriginal, XmlDocument xmlTransformed);
    private sealed virtual override XmlNodeList Microsoft.Web.Publishing.Tasks.IXmlOriginalDocumentService.SelectNodes(string xpath, XmlNamespaceManager nsmgr);
}
public class Microsoft.Web.Publishing.Tasks.XmlTransformation : object {
    internal static string TransformNamespace;
    internal static string SupressWarnings;
    private string transformFile;
    private XmlDocument xmlTransformation;
    private XmlDocument xmlTarget;
    private XmlTransformableDocument xmlTransformable;
    private XmlTransformationLogger logger;
    private NamedTypeFactory namedTypeFactory;
    private ServiceContainer transformationServiceContainer;
    private ServiceContainer documentServiceContainer;
    private bool hasTransformNamespace;
    public XmlTransformation(string transformFile);
    public XmlTransformation(string transform, IXmlTransformationLogger logger);
    public XmlTransformation(string transform, bool isTransformAFile, IXmlTransformationLogger logger);
    private static XmlTransformation();
    private void InitializeTransformationServices();
    private void InitializeDocumentServices(XmlDocument document);
    private void ReleaseDocumentServices();
    private void PreprocessTransformDocument();
    public void AddTransformationService(Type serviceType, object serviceInstance);
    public void RemoveTransformationService(Type serviceType);
    public bool Apply(XmlDocument xmlTarget);
    private void TransformLoop(XmlDocument xmlSource);
    private void TransformLoop(XmlNodeContext parentContext);
    private XmlElementContext CreateElementContext(XmlElementContext parentContext, XmlElement element);
    private void HandleException(Exception ex);
    private void HandleException(Exception ex, XmlNodeContext context);
    private Exception WrapException(Exception ex, XmlNodeContext context);
    private void HandleElement(XmlElementContext context);
    private void OnApplyingTransform();
    private void OnAppliedTransform();
    private void PreprocessImportElement(XmlElementContext context);
    public sealed virtual object GetService(Type serviceType);
}
public class Microsoft.Web.Publishing.Tasks.XmlTransformationException : Exception {
    internal XmlTransformationException(string message);
    internal XmlTransformationException(string message, Exception innerException);
}
public class Microsoft.Web.Publishing.Tasks.XmlTransformationLogger : object {
    private bool hasLoggedErrors;
    private IXmlTransformationLogger externalLogger;
    private XmlNode currentReferenceNode;
    private bool fSupressWarnings;
    internal bool HasLoggedErrors { get; internal set; }
    internal XmlNode CurrentReferenceNode { get; internal set; }
    public bool SupressWarnings { get; public set; }
    internal XmlTransformationLogger(IXmlTransformationLogger logger);
    internal void LogErrorFromException(Exception ex);
    internal bool get_HasLoggedErrors();
    internal void set_HasLoggedErrors(bool value);
    internal XmlNode get_CurrentReferenceNode();
    internal void set_CurrentReferenceNode(XmlNode value);
    public bool get_SupressWarnings();
    public void set_SupressWarnings(bool value);
    public void LogMessage(string message, Object[] messageArgs);
    public void LogMessage(MessageType type, string message, Object[] messageArgs);
    public void LogWarning(string message, Object[] messageArgs);
    public void LogWarning(XmlNode referenceNode, string message, Object[] messageArgs);
    public void LogError(string message, Object[] messageArgs);
    public void LogError(XmlNode referenceNode, string message, Object[] messageArgs);
    public void StartSection(string message, Object[] messageArgs);
    public void StartSection(MessageType type, string message, Object[] messageArgs);
    public void EndSection(string message, Object[] messageArgs);
    public void EndSection(MessageType type, string message, Object[] messageArgs);
    private string ConvertUriToFileName(XmlDocument xmlDocument);
    private string ConvertUriToFileName(string fileName);
}
public class Microsoft.Web.Publishing.Tasks.XPath : Locator {
    protected string ParentPath { get; }
    protected virtual string get_ParentPath();
    protected virtual string ConstructPath();
}
public enum Microsoft.Web.Publishing.Tasks.XPathAxis : Enum {
    public int value__;
    public static XPathAxis Child;
    public static XPathAxis Descendant;
    public static XPathAxis Parent;
    public static XPathAxis Ancestor;
    public static XPathAxis FollowingSibling;
    public static XPathAxis PrecedingSibling;
    public static XPathAxis Following;
    public static XPathAxis Preceding;
    public static XPathAxis Self;
    public static XPathAxis DescendantOrSelf;
    public static XPathAxis AncestorOrSelf;
}
internal static class ThisAssembly : object {
    internal static string Title;
    internal static string Description;
    internal static string DefaultAlias;
    internal static string Copyright;
    internal static string Version;
    internal static string InformationalVersion;
    internal static string DailyBuildNumberStr;
    internal static string BuildRevisionStr;
    internal static int DailyBuildNumber;
}
