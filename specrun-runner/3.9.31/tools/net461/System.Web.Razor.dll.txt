internal static class Justifications : object {
    internal static string SymbolTypeNames;
}
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Microsoft.Internal.Web.Utils.CommonResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Argument_Cannot_Be_Null_Or_Empty { get; }
    internal static string Argument_Must_Be_Between { get; }
    internal static string Argument_Must_Be_Enum_Member { get; }
    internal static string Argument_Must_Be_GreaterThan { get; }
    internal static string Argument_Must_Be_GreaterThanOrEqualTo { get; }
    internal static string Argument_Must_Be_LessThan { get; }
    internal static string Argument_Must_Be_LessThanOrEqualTo { get; }
    internal static string Argument_Must_Be_Null_Or_Non_Empty { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Argument_Cannot_Be_Null_Or_Empty();
    internal static string get_Argument_Must_Be_Between();
    internal static string get_Argument_Must_Be_Enum_Member();
    internal static string get_Argument_Must_Be_GreaterThan();
    internal static string get_Argument_Must_Be_GreaterThanOrEqualTo();
    internal static string get_Argument_Must_Be_LessThan();
    internal static string get_Argument_Must_Be_LessThanOrEqualTo();
    internal static string get_Argument_Must_Be_Null_Or_Non_Empty();
    [CompilerGeneratedAttribute]
private static bool <get_ResourceManager>b__0(string s);
}
internal class Microsoft.Internal.Web.Utils.HashCodeCombiner : object {
    private long _combinedHash64;
    public int CombinedHash { get; }
    public int get_CombinedHash();
    public HashCodeCombiner Add(IEnumerable e);
    public HashCodeCombiner Add(int i);
    public HashCodeCombiner Add(object o);
    public static HashCodeCombiner Start();
}
public class System.Web.Razor.CSharpRazorCodeLanguage : RazorCodeLanguage {
    private static string CSharpLanguageName;
    public string LanguageName { get; }
    public Type CodeDomProviderType { get; }
    public virtual string get_LanguageName();
    public virtual Type get_CodeDomProviderType();
    public virtual ParserBase CreateCodeParser();
    public virtual RazorCodeGenerator CreateCodeGenerator(string className, string rootNamespaceName, string sourceFileName, RazorEngineHost host);
}
public class System.Web.Razor.DocumentParseCompleteEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <TreeStructureChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private GeneratorResults <GeneratorResults>k__BackingField;
    [CompilerGeneratedAttribute]
private TextChange <SourceChange>k__BackingField;
    public bool TreeStructureChanged { get; public set; }
    public GeneratorResults GeneratorResults { get; public set; }
    public TextChange SourceChange { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_TreeStructureChanged();
    [CompilerGeneratedAttribute]
public void set_TreeStructureChanged(bool value);
    [CompilerGeneratedAttribute]
public GeneratorResults get_GeneratorResults();
    [CompilerGeneratedAttribute]
public void set_GeneratorResults(GeneratorResults value);
    [CompilerGeneratedAttribute]
public TextChange get_SourceChange();
    [CompilerGeneratedAttribute]
public void set_SourceChange(TextChange value);
}
internal class System.Web.Razor.Editor.BackgroundParser : object {
    private MainThreadState _main;
    private BackgroundThread _bg;
    private EventHandler`1<DocumentParseCompleteEventArgs> ResultsReady;
    public bool IsIdle { get; }
    public BackgroundParser(RazorEngineHost host, string fileName);
    public void add_ResultsReady(EventHandler`1<DocumentParseCompleteEventArgs> value);
    public void remove_ResultsReady(EventHandler`1<DocumentParseCompleteEventArgs> value);
    public bool get_IsIdle();
    public void Start();
    public void Cancel();
    public void QueueChange(TextChange change);
    public sealed virtual void Dispose();
    public IDisposable SynchronizeMainThreadState();
    protected virtual void OnResultsReady(DocumentParseCompleteEventArgs args);
    internal static bool TreesAreDifferent(Block leftTree, Block rightTree, IEnumerable`1<TextChange> changes);
    internal static bool TreesAreDifferent(Block leftTree, Block rightTree, IEnumerable`1<TextChange> changes, CancellationToken cancelToken);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, DocumentParseCompleteEventArgs args);
}
[FlagsAttribute]
public enum System.Web.Razor.Editor.EditorHints : Enum {
    public int value__;
    public static EditorHints None;
    public static EditorHints VirtualPath;
    public static EditorHints LayoutPage;
}
public class System.Web.Razor.Editor.EditResult : object {
    [CompilerGeneratedAttribute]
private PartialParseResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private SpanBuilder <EditedSpan>k__BackingField;
    public PartialParseResult Result { get; public set; }
    public SpanBuilder EditedSpan { get; public set; }
    public EditResult(PartialParseResult result, SpanBuilder editedSpan);
    [CompilerGeneratedAttribute]
public PartialParseResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(PartialParseResult value);
    [CompilerGeneratedAttribute]
public SpanBuilder get_EditedSpan();
    [CompilerGeneratedAttribute]
public void set_EditedSpan(SpanBuilder value);
}
public class System.Web.Razor.Editor.ImplicitExpressionEditHandler : SpanEditHandler {
    [CompilerGeneratedAttribute]
private bool <AcceptTrailingDot>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Keywords>k__BackingField;
    public bool AcceptTrailingDot { get; private set; }
    public ISet`1<string> Keywords { get; private set; }
    public ImplicitExpressionEditHandler(Func`2<string, IEnumerable`1<ISymbol>> tokenizer, ISet`1<string> keywords, bool acceptTrailingDot);
    [CompilerGeneratedAttribute]
public bool get_AcceptTrailingDot();
    [CompilerGeneratedAttribute]
private void set_AcceptTrailingDot(bool value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Keywords();
    [CompilerGeneratedAttribute]
private void set_Keywords(ISet`1<string> value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual PartialParseResult CanAcceptChange(Span target, TextChange normalizedChange);
    private void Initialize(ISet`1<string> keywords, bool acceptTrailingDot);
    private static bool IsAcceptableReplace(Span target, TextChange change);
    private static bool IsAcceptableDeletion(Span target, TextChange change);
    private static bool IsAcceptableInsertion(Span target, TextChange change);
    private static bool RemainingIsWhitespace(Span target, TextChange change);
    private PartialParseResult HandleReplacement(Span target, TextChange change);
    private PartialParseResult HandleDeletion(Span target, char previousChar, TextChange change);
    private PartialParseResult HandleInsertion(Span target, char previousChar, TextChange change);
    private PartialParseResult HandleInsertionAfterIdPart(Span target, TextChange change);
    private static bool EndsWithDot(string content);
    private PartialParseResult HandleInsertionAfterDot(Span target, TextChange change);
    private PartialParseResult TryAcceptChange(Span target, TextChange change, PartialParseResult acceptResult);
    private bool StartsWithKeyword(string newContent);
}
internal static class System.Web.Razor.Editor.RazorEditorTrace : object {
    private static Nullable`1<bool> _enabled;
    private static bool IsEnabled();
    [ConditionalAttribute("EDITOR_TRACING")]
public static void TraceLine(string format, Object[] args);
}
public class System.Web.Razor.Editor.SingleLineMarkupEditHandler : SpanEditHandler {
    public SingleLineMarkupEditHandler(Func`2<string, IEnumerable`1<ISymbol>> tokenizer);
    public SingleLineMarkupEditHandler(Func`2<string, IEnumerable`1<ISymbol>> tokenizer, AcceptedCharacters accepted);
}
public class System.Web.Razor.Editor.SpanEditHandler : object {
    [CompilerGeneratedAttribute]
private AcceptedCharacters <AcceptedCharacters>k__BackingField;
    [CompilerGeneratedAttribute]
private EditorHints <EditorHints>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, IEnumerable`1<ISymbol>> <Tokenizer>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, IEnumerable`1<ISymbol>> CS$<>9__CachedAnonymousMethodDelegate1;
    public AcceptedCharacters AcceptedCharacters { get; public set; }
    public EditorHints EditorHints { get; public set; }
    public Func`2<string, IEnumerable`1<ISymbol>> Tokenizer { get; public set; }
    public SpanEditHandler(Func`2<string, IEnumerable`1<ISymbol>> tokenizer);
    public SpanEditHandler(Func`2<string, IEnumerable`1<ISymbol>> tokenizer, AcceptedCharacters accepted);
    [CompilerGeneratedAttribute]
public AcceptedCharacters get_AcceptedCharacters();
    [CompilerGeneratedAttribute]
public void set_AcceptedCharacters(AcceptedCharacters value);
    [CompilerGeneratedAttribute]
public EditorHints get_EditorHints();
    [CompilerGeneratedAttribute]
public void set_EditorHints(EditorHints value);
    [CompilerGeneratedAttribute]
public Func`2<string, IEnumerable`1<ISymbol>> get_Tokenizer();
    [CompilerGeneratedAttribute]
public void set_Tokenizer(Func`2<string, IEnumerable`1<ISymbol>> value);
    public static SpanEditHandler CreateDefault();
    public static SpanEditHandler CreateDefault(Func`2<string, IEnumerable`1<ISymbol>> tokenizer);
    public virtual EditResult ApplyChange(Span target, TextChange change);
    public virtual EditResult ApplyChange(Span target, TextChange change, bool force);
    public virtual bool OwnsChange(Span target, TextChange change);
    protected virtual PartialParseResult CanAcceptChange(Span target, TextChange normalizedChange);
    protected virtual SpanBuilder UpdateSpan(Span target, TextChange normalizedChange);
    protected internal static bool IsAtEndOfFirstLine(Span target, TextChange change);
    protected internal static bool IsEndInsertion(Span target, TextChange change);
    protected internal static bool IsEndDeletion(Span target, TextChange change);
    protected internal static bool IsEndReplace(Span target, TextChange change);
    protected internal static bool IsAtEndOfSpan(Span target, TextChange change);
    protected internal static string GetOldText(Span target, TextChange change);
    internal static bool IsAdjacentOnRight(Span target, Span other);
    internal static bool IsAdjacentOnLeft(Span target, Span other);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ISymbol> <CreateDefault>b__0(string s);
}
public class System.Web.Razor.Generator.AddImportCodeGenerator : SpanCodeGenerator {
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NamespaceKeywordLength>k__BackingField;
    public string Namespace { get; private set; }
    public int NamespaceKeywordLength { get; public set; }
    public AddImportCodeGenerator(string ns, int namespaceKeywordLength);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public int get_NamespaceKeywordLength();
    [CompilerGeneratedAttribute]
public void set_NamespaceKeywordLength(int value);
    public virtual void GenerateCode(Span target, CodeGeneratorContext context);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Web.Razor.Generator.AttributeBlockCodeGenerator : BlockCodeGenerator {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private LocationTagged`1<string> <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private LocationTagged`1<string> <Suffix>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<CodeWriter> CS$<>9__CachedAnonymousMethodDelegate4;
    public string Name { get; private set; }
    public LocationTagged`1<string> Prefix { get; private set; }
    public LocationTagged`1<string> Suffix { get; private set; }
    public AttributeBlockCodeGenerator(string name, LocationTagged`1<string> prefix, LocationTagged`1<string> suffix);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public LocationTagged`1<string> get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(LocationTagged`1<string> value);
    [CompilerGeneratedAttribute]
public LocationTagged`1<string> get_Suffix();
    [CompilerGeneratedAttribute]
private void set_Suffix(LocationTagged`1<string> value);
    public virtual void GenerateStartBlockCode(Block target, CodeGeneratorContext context);
    public virtual void GenerateEndBlockCode(Block target, CodeGeneratorContext context);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private static void <GenerateEndBlockCode>b__3(CodeWriter cw);
}
internal abstract class System.Web.Razor.Generator.BaseCodeWriter : CodeWriter {
    public virtual void WriteSnippet(string snippet);
    protected internal virtual void EmitStartMethodInvoke(string methodName);
    protected internal virtual void EmitStartMethodInvoke(string methodName, String[] genericArguments);
    protected internal virtual void EmitEndMethodInvoke();
    protected internal virtual void EmitEndConstructor();
    protected internal virtual void EmitEndLambdaExpression();
    public virtual void WriteParameterSeparator();
    protected internal void WriteCommaSeparatedList(T[] items, Action`1<T> writeItemAction);
    protected internal virtual void WriteStartGenerics();
    protected internal virtual void WriteEndGenerics();
}
public abstract class System.Web.Razor.Generator.BlockCodeGenerator : object {
    public static IBlockCodeGenerator Null;
    private static BlockCodeGenerator();
    public virtual void GenerateStartBlockCode(Block target, CodeGeneratorContext context);
    public virtual void GenerateEndBlockCode(Block target, CodeGeneratorContext context);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Web.Razor.Generator.CodeGenerationCompleteEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private CodeCompileUnit <GeneratedCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhysicalPath>k__BackingField;
    public CodeCompileUnit GeneratedCode { get; private set; }
    public string VirtualPath { get; private set; }
    public string PhysicalPath { get; private set; }
    public CodeGenerationCompleteEventArgs(string virtualPath, string physicalPath, CodeCompileUnit generatedCode);
    [CompilerGeneratedAttribute]
public CodeCompileUnit get_GeneratedCode();
    [CompilerGeneratedAttribute]
private void set_GeneratedCode(CodeCompileUnit value);
    [CompilerGeneratedAttribute]
public string get_VirtualPath();
    [CompilerGeneratedAttribute]
private void set_VirtualPath(string value);
    [CompilerGeneratedAttribute]
public string get_PhysicalPath();
    [CompilerGeneratedAttribute]
private void set_PhysicalPath(string value);
}
public class System.Web.Razor.Generator.CodeGeneratorContext : object {
    private static string DesignTimeHelperMethodName;
    private int _nextDesignTimePragmaId;
    private bool _expressionHelperVariableWriten;
    private CodeMemberMethod _designTimeHelperMethod;
    private StatementBuffer _currentBuffer;
    [CompilerGeneratedAttribute]
private ExpressionRenderingMode <ExpressionRenderingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<string, CodeLinePragma> <StatementCollector>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<CodeWriter> <CodeWriterFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCompileUnit <CompileUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeNamespace <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeTypeDeclaration <GeneratedClass>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorEngineHost <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<int, GeneratedCodeMapping> <CodeMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetWriterName>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeMemberMethod <TargetMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, CodeNamespaceImport> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Action`1<CodeWriter> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Action`1<CodeWriter> CS$<>9__CachedAnonymousMethodDelegate9;
    internal ExpressionRenderingMode ExpressionRenderingMode { get; internal set; }
    private Action`2<string, CodeLinePragma> StatementCollector { get; private set; }
    private Func`1<CodeWriter> CodeWriterFactory { get; private set; }
    public string SourceFile { get; internal set; }
    public CodeCompileUnit CompileUnit { get; internal set; }
    public CodeNamespace Namespace { get; internal set; }
    public CodeTypeDeclaration GeneratedClass { get; internal set; }
    public RazorEngineHost Host { get; private set; }
    public IDictionary`2<int, GeneratedCodeMapping> CodeMappings { get; private set; }
    public string TargetWriterName { get; public set; }
    public CodeMemberMethod TargetMethod { get; public set; }
    public string CurrentBufferedStatement { get; }
    [CompilerGeneratedAttribute]
internal ExpressionRenderingMode get_ExpressionRenderingMode();
    [CompilerGeneratedAttribute]
internal void set_ExpressionRenderingMode(ExpressionRenderingMode value);
    [CompilerGeneratedAttribute]
private Action`2<string, CodeLinePragma> get_StatementCollector();
    [CompilerGeneratedAttribute]
private void set_StatementCollector(Action`2<string, CodeLinePragma> value);
    [CompilerGeneratedAttribute]
private Func`1<CodeWriter> get_CodeWriterFactory();
    [CompilerGeneratedAttribute]
private void set_CodeWriterFactory(Func`1<CodeWriter> value);
    [CompilerGeneratedAttribute]
public string get_SourceFile();
    [CompilerGeneratedAttribute]
internal void set_SourceFile(string value);
    [CompilerGeneratedAttribute]
public CodeCompileUnit get_CompileUnit();
    [CompilerGeneratedAttribute]
internal void set_CompileUnit(CodeCompileUnit value);
    [CompilerGeneratedAttribute]
public CodeNamespace get_Namespace();
    [CompilerGeneratedAttribute]
internal void set_Namespace(CodeNamespace value);
    [CompilerGeneratedAttribute]
public CodeTypeDeclaration get_GeneratedClass();
    [CompilerGeneratedAttribute]
internal void set_GeneratedClass(CodeTypeDeclaration value);
    [CompilerGeneratedAttribute]
public RazorEngineHost get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(RazorEngineHost value);
    [CompilerGeneratedAttribute]
public IDictionary`2<int, GeneratedCodeMapping> get_CodeMappings();
    [CompilerGeneratedAttribute]
private void set_CodeMappings(IDictionary`2<int, GeneratedCodeMapping> value);
    [CompilerGeneratedAttribute]
public string get_TargetWriterName();
    [CompilerGeneratedAttribute]
public void set_TargetWriterName(string value);
    [CompilerGeneratedAttribute]
public CodeMemberMethod get_TargetMethod();
    [CompilerGeneratedAttribute]
public void set_TargetMethod(CodeMemberMethod value);
    public string get_CurrentBufferedStatement();
    public static CodeGeneratorContext Create(RazorEngineHost host, string className, string rootNamespace, string sourceFile, bool shouldGenerateLinePragmas);
    internal static CodeGeneratorContext Create(RazorEngineHost host, Func`1<CodeWriter> writerFactory, string className, string rootNamespace, string sourceFile, bool shouldGenerateLinePragmas);
    public void AddDesignTimeHelperStatement(CodeSnippetStatement statement);
    public int AddCodeMapping(SourceLocation sourceLocation, int generatedCodeStart, int generatedCodeLength);
    public CodeLinePragma GenerateLinePragma(Span target);
    public CodeLinePragma GenerateLinePragma(Span target, int generatedCodeStart);
    public CodeLinePragma GenerateLinePragma(Span target, int generatedCodeStart, int codeLength);
    public CodeLinePragma GenerateLinePragma(SourceLocation start, int generatedCodeStart, int codeLength);
    public void BufferStatementFragment(Span sourceSpan);
    public void BufferStatementFragment(string fragment);
    public void BufferStatementFragment(string fragment, Span sourceSpan);
    public void MarkStartOfGeneratedCode();
    public void MarkEndOfGeneratedCode();
    public void FlushBufferedStatement();
    public void AddStatement(string generatedCode);
    public void AddStatement(string body, CodeLinePragma pragma);
    public void EnsureExpressionHelperVariable();
    public IDisposable ChangeStatementCollector(Action`2<string, CodeLinePragma> collector);
    public void AddContextCall(Span contentSpan, string methodName, bool isLiteral);
    internal CodeWriter CreateCodeWriter();
    internal string BuildCodeString(Action`1<CodeWriter> action);
    [CompilerGeneratedAttribute]
private static CodeNamespaceImport <Create>b__3(string s);
    [CompilerGeneratedAttribute]
private static void <AddDesignTimeHelperStatement>b__6(CodeWriter cw);
    [CompilerGeneratedAttribute]
private static void <AddDesignTimeHelperStatement>b__7(CodeWriter cw);
}
internal static class System.Web.Razor.Generator.CodeGeneratorPaddingHelper : object {
    private static Char[] _newLineChars;
    private static CodeGeneratorPaddingHelper();
    public static int PaddingCharCount(RazorEngineHost host, Span target, int generatedStart);
    public static string PadStatement(RazorEngineHost host, string code, Span target, Int32& startGeneratedCode, Int32& paddingCharCount);
    public static string Pad(RazorEngineHost host, string code, Span target, Int32& paddingCharCount);
    public static string Pad(RazorEngineHost host, string code, Span target, int generatedStart, Int32& paddingCharCount);
    internal static int CalculatePadding(RazorEngineHost host, Span target, int generatedStart);
    private static string PadInternal(RazorEngineHost host, string code, int padding, Int32& paddingCharCount);
    private static int CollectSpacesAndTabs(Span target, int tabSize);
}
internal abstract class System.Web.Razor.Generator.CodeWriter : object {
    private StringWriter _writer;
    public string Content { get; }
    public StringWriter InnerWriter { get; }
    public bool SupportsMidStatementLinePragmas { get; }
    public string get_Content();
    public StringWriter get_InnerWriter();
    public virtual bool get_SupportsMidStatementLinePragmas();
    public abstract virtual void WriteParameterSeparator();
    public abstract virtual void WriteReturn();
    public abstract virtual void WriteLinePragma(Nullable`1<int> lineNumber, string fileName);
    public abstract virtual void WriteHelperHeaderPrefix(string templateTypeName, bool isStatic);
    public abstract virtual void WriteSnippet(string snippet);
    public abstract virtual void WriteStringLiteral(string literal);
    public abstract virtual int WriteVariableDeclaration(string type, string name, string value);
    public virtual void WriteLinePragma();
    public virtual void WriteLinePragma(CodeLinePragma pragma);
    public virtual void WriteHiddenLinePragma();
    public virtual void WriteDisableUnusedFieldWarningPragma();
    public virtual void WriteRestoreUnusedFieldWarningPragma();
    public virtual void WriteIdentifier(string identifier);
    public virtual void WriteHelperHeaderSuffix(string templateTypeName);
    public virtual void WriteHelperTrailer();
    public void WriteStartMethodInvoke(string methodName);
    public void WriteStartMethodInvoke(string methodName, String[] genericArguments);
    public void WriteEndMethodInvoke();
    public virtual void WriteEndStatement();
    public virtual void WriteStartAssignment(string variableName);
    public void WriteStartLambdaExpression(String[] parameterNames);
    public void WriteStartConstructor(string typeName);
    public void WriteStartLambdaDelegate(String[] parameterNames);
    public void WriteEndLambdaExpression();
    public void WriteEndConstructor();
    public void WriteEndLambdaDelegate();
    public virtual void WriteLineContinuation();
    public virtual void WriteBooleanLiteral(bool value);
    public sealed virtual void Dispose();
    public void Clear();
    public CodeSnippetStatement ToStatement();
    public CodeSnippetTypeMember ToTypeMember();
    protected internal abstract virtual void EmitStartLambdaDelegate(String[] parameterNames);
    protected internal abstract virtual void EmitStartLambdaExpression(String[] parameterNames);
    protected internal abstract virtual void EmitStartConstructor(string typeName);
    protected internal abstract virtual void EmitStartMethodInvoke(string methodName);
    protected internal virtual void EmitStartMethodInvoke(string methodName, String[] genericArguments);
    protected internal abstract virtual void EmitEndLambdaDelegate();
    protected internal abstract virtual void EmitEndLambdaExpression();
    protected internal abstract virtual void EmitEndConstructor();
    protected internal abstract virtual void EmitEndMethodInvoke();
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
internal static class System.Web.Razor.Generator.CodeWriterExtensions : object {
    [ExtensionAttribute]
public static void WriteLocationTaggedString(CodeWriter writer, LocationTagged`1<string> value);
}
internal class System.Web.Razor.Generator.CSharpCodeWriter : BaseCodeWriter {
    protected internal virtual void WriteStartGenerics();
    protected internal virtual void WriteEndGenerics();
    public virtual int WriteVariableDeclaration(string type, string name, string value);
    public virtual void WriteDisableUnusedFieldWarningPragma();
    public virtual void WriteRestoreUnusedFieldWarningPragma();
    public virtual void WriteStringLiteral(string literal);
    private void WriteVerbatimStringLiteral(string literal);
    private void WriteCStyleStringLiteral(string literal);
    public virtual void WriteEndStatement();
    public virtual void WriteIdentifier(string identifier);
    public virtual void WriteBooleanLiteral(bool value);
    protected internal virtual void EmitStartLambdaExpression(String[] parameterNames);
    protected internal virtual void EmitStartLambdaDelegate(String[] parameterNames);
    protected internal virtual void EmitEndLambdaDelegate();
    protected internal virtual void EmitStartConstructor(string typeName);
    public virtual void WriteReturn();
    public virtual void WriteLinePragma(Nullable`1<int> lineNumber, string fileName);
    public virtual void WriteHiddenLinePragma();
    public virtual void WriteHelperHeaderPrefix(string templateTypeName, bool isStatic);
}
public class System.Web.Razor.Generator.CSharpRazorCodeGenerator : RazorCodeGenerator {
    private static string HiddenLinePragma;
    [CompilerGeneratedAttribute]
private static Func`1<CodeWriter> CS$<>9__CachedAnonymousMethodDelegate1;
    internal Func`1<CodeWriter> CodeWriterFactory { get; }
    public CSharpRazorCodeGenerator(string className, string rootNamespaceName, string sourceFileName, RazorEngineHost host);
    internal virtual Func`1<CodeWriter> get_CodeWriterFactory();
    protected virtual void Initialize(CodeGeneratorContext context);
    [CompilerGeneratedAttribute]
private static CodeWriter <get_CodeWriterFactory>b__0();
}
public class System.Web.Razor.Generator.DynamicAttributeBlockCodeGenerator : BlockCodeGenerator {
    private static string ValueWriterName;
    private string _oldTargetWriter;
    private bool _isExpression;
    private ExpressionRenderingMode _oldRenderingMode;
    [CompilerGeneratedAttribute]
private LocationTagged`1<string> <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLocation <ValueStart>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<SyntaxTreeNode, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public LocationTagged`1<string> Prefix { get; private set; }
    public SourceLocation ValueStart { get; private set; }
    public DynamicAttributeBlockCodeGenerator(LocationTagged`1<string> prefix, int offset, int line, int col);
    public DynamicAttributeBlockCodeGenerator(LocationTagged`1<string> prefix, SourceLocation valueStart);
    [CompilerGeneratedAttribute]
public LocationTagged`1<string> get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(LocationTagged`1<string> value);
    [CompilerGeneratedAttribute]
public SourceLocation get_ValueStart();
    [CompilerGeneratedAttribute]
private void set_ValueStart(SourceLocation value);
    public virtual void GenerateStartBlockCode(Block target, CodeGeneratorContext context);
    public virtual void GenerateEndBlockCode(Block target, CodeGeneratorContext context);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private static bool <GenerateStartBlockCode>b__0(SyntaxTreeNode n);
    [CompilerGeneratedAttribute]
private void <GenerateStartBlockCode>b__1(CodeWriter cw);
    [CompilerGeneratedAttribute]
private void <GenerateEndBlockCode>b__8(CodeWriter cw);
    [CompilerGeneratedAttribute]
private void <GenerateEndBlockCode>b__9(CodeWriter cw);
}
public class System.Web.Razor.Generator.ExpressionCodeGenerator : HybridCodeGenerator {
    [CompilerGeneratedAttribute]
private static Func`2<Span, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Span, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    public virtual void GenerateStartBlockCode(Block target, CodeGeneratorContext context);
    public virtual void GenerateEndBlockCode(Block target, CodeGeneratorContext context);
    public virtual void GenerateCode(Span target, CodeGeneratorContext context);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private static bool <GenerateStartBlockCode>b__0(Span s);
    [CompilerGeneratedAttribute]
private static bool <GenerateEndBlockCode>b__6(Span s);
}
public enum System.Web.Razor.Generator.ExpressionRenderingMode : Enum {
    public int value__;
    public static ExpressionRenderingMode WriteToOutput;
    public static ExpressionRenderingMode InjectCode;
}
public class System.Web.Razor.Generator.GeneratedClassContext : ValueType {
    public static string DefaultWriteMethodName;
    public static string DefaultWriteLiteralMethodName;
    public static string DefaultExecuteMethodName;
    public static string DefaultLayoutPropertyName;
    public static string DefaultWriteAttributeMethodName;
    public static string DefaultWriteAttributeToMethodName;
    public static GeneratedClassContext Default;
    [CompilerGeneratedAttribute]
private string <WriteMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WriteLiteralMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WriteToMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WriteLiteralToMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecuteMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BeginContextMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndContextMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LayoutPropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefineSectionMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WriteAttributeMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WriteAttributeToMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResolveUrlMethodName>k__BackingField;
    public string WriteMethodName { get; private set; }
    public string WriteLiteralMethodName { get; private set; }
    public string WriteToMethodName { get; private set; }
    public string WriteLiteralToMethodName { get; private set; }
    public string ExecuteMethodName { get; private set; }
    public string BeginContextMethodName { get; public set; }
    public string EndContextMethodName { get; public set; }
    public string LayoutPropertyName { get; public set; }
    public string DefineSectionMethodName { get; public set; }
    public string TemplateTypeName { get; public set; }
    public string WriteAttributeMethodName { get; public set; }
    public string WriteAttributeToMethodName { get; public set; }
    public string ResolveUrlMethodName { get; public set; }
    public bool AllowSections { get; }
    public bool AllowTemplates { get; }
    public bool SupportsInstrumentation { get; }
    public GeneratedClassContext(string executeMethodName, string writeMethodName, string writeLiteralMethodName);
    public GeneratedClassContext(string executeMethodName, string writeMethodName, string writeLiteralMethodName, string writeToMethodName, string writeLiteralToMethodName, string templateTypeName);
    public GeneratedClassContext(string executeMethodName, string writeMethodName, string writeLiteralMethodName, string writeToMethodName, string writeLiteralToMethodName, string templateTypeName, string defineSectionMethodName);
    public GeneratedClassContext(string executeMethodName, string writeMethodName, string writeLiteralMethodName, string writeToMethodName, string writeLiteralToMethodName, string templateTypeName, string defineSectionMethodName, string beginContextMethodName, string endContextMethodName);
    private static GeneratedClassContext();
    [CompilerGeneratedAttribute]
public string get_WriteMethodName();
    [CompilerGeneratedAttribute]
private void set_WriteMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_WriteLiteralMethodName();
    [CompilerGeneratedAttribute]
private void set_WriteLiteralMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_WriteToMethodName();
    [CompilerGeneratedAttribute]
private void set_WriteToMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_WriteLiteralToMethodName();
    [CompilerGeneratedAttribute]
private void set_WriteLiteralToMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_ExecuteMethodName();
    [CompilerGeneratedAttribute]
private void set_ExecuteMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_BeginContextMethodName();
    [CompilerGeneratedAttribute]
public void set_BeginContextMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_EndContextMethodName();
    [CompilerGeneratedAttribute]
public void set_EndContextMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_LayoutPropertyName();
    [CompilerGeneratedAttribute]
public void set_LayoutPropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_DefineSectionMethodName();
    [CompilerGeneratedAttribute]
public void set_DefineSectionMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_TemplateTypeName();
    [CompilerGeneratedAttribute]
public void set_TemplateTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_WriteAttributeMethodName();
    [CompilerGeneratedAttribute]
public void set_WriteAttributeMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_WriteAttributeToMethodName();
    [CompilerGeneratedAttribute]
public void set_WriteAttributeToMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_ResolveUrlMethodName();
    [CompilerGeneratedAttribute]
public void set_ResolveUrlMethodName(string value);
    public bool get_AllowSections();
    public bool get_AllowTemplates();
    public bool get_SupportsInstrumentation();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(GeneratedClassContext left, GeneratedClassContext right);
    public static bool op_Inequality(GeneratedClassContext left, GeneratedClassContext right);
}
public class System.Web.Razor.Generator.GeneratedCodeMapping : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StartOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CodeLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartGeneratedColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    public Nullable`1<int> StartOffset { get; public set; }
    public int CodeLength { get; public set; }
    public int StartColumn { get; public set; }
    public int StartGeneratedColumn { get; public set; }
    public int StartLine { get; public set; }
    public GeneratedCodeMapping(int startLine, int startColumn, int startGeneratedColumn, int codeLength);
    public GeneratedCodeMapping(int startOffset, int startLine, int startColumn, int startGeneratedColumn, int codeLength);
    private GeneratedCodeMapping(Nullable`1<int> startOffset, int startLine, int startColumn, int startGeneratedColumn, int codeLength);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StartOffset();
    [CompilerGeneratedAttribute]
public void set_StartOffset(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_CodeLength();
    [CompilerGeneratedAttribute]
public void set_CodeLength(int value);
    [CompilerGeneratedAttribute]
public int get_StartColumn();
    [CompilerGeneratedAttribute]
public void set_StartColumn(int value);
    [CompilerGeneratedAttribute]
public int get_StartGeneratedColumn();
    [CompilerGeneratedAttribute]
public void set_StartGeneratedColumn(int value);
    [CompilerGeneratedAttribute]
public int get_StartLine();
    [CompilerGeneratedAttribute]
public void set_StartLine(int value);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
    public static bool op_Equality(GeneratedCodeMapping left, GeneratedCodeMapping right);
    public static bool op_Inequality(GeneratedCodeMapping left, GeneratedCodeMapping right);
}
public class System.Web.Razor.Generator.HelperCodeGenerator : BlockCodeGenerator {
    private static string HelperWriterName;
    private CodeWriter _writer;
    private string _oldWriter;
    private IDisposable _statementCollectorToken;
    [CompilerGeneratedAttribute]
private LocationTagged`1<string> <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private LocationTagged`1<string> <Footer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HeaderComplete>k__BackingField;
    public LocationTagged`1<string> Signature { get; private set; }
    public LocationTagged`1<string> Footer { get; public set; }
    public bool HeaderComplete { get; private set; }
    public HelperCodeGenerator(LocationTagged`1<string> signature, bool headerComplete);
    [CompilerGeneratedAttribute]
public LocationTagged`1<string> get_Signature();
    [CompilerGeneratedAttribute]
private void set_Signature(LocationTagged`1<string> value);
    [CompilerGeneratedAttribute]
public LocationTagged`1<string> get_Footer();
    [CompilerGeneratedAttribute]
public void set_Footer(LocationTagged`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_HeaderComplete();
    [CompilerGeneratedAttribute]
private void set_HeaderComplete(bool value);
    public virtual void GenerateStartBlockCode(Block target, CodeGeneratorContext context);
    public virtual void GenerateEndBlockCode(Block target, CodeGeneratorContext context);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private void AddStatementToHelper(string statement, CodeLinePragma pragma);
}
public abstract class System.Web.Razor.Generator.HybridCodeGenerator : object {
    public virtual void GenerateStartBlockCode(Block target, CodeGeneratorContext context);
    public virtual void GenerateEndBlockCode(Block target, CodeGeneratorContext context);
    public virtual void GenerateCode(Span target, CodeGeneratorContext context);
}
public interface System.Web.Razor.Generator.IBlockCodeGenerator {
    public abstract virtual void GenerateStartBlockCode(Block target, CodeGeneratorContext context);
    public abstract virtual void GenerateEndBlockCode(Block target, CodeGeneratorContext context);
}
public interface System.Web.Razor.Generator.ISpanCodeGenerator {
    public abstract virtual void GenerateCode(Span target, CodeGeneratorContext context);
}
public class System.Web.Razor.Generator.LiteralAttributeCodeGenerator : SpanCodeGenerator {
    [CompilerGeneratedAttribute]
private LocationTagged`1<string> <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private LocationTagged`1<string> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private LocationTagged`1<SpanCodeGenerator> <ValueGenerator>k__BackingField;
    public LocationTagged`1<string> Prefix { get; private set; }
    public LocationTagged`1<string> Value { get; private set; }
    public LocationTagged`1<SpanCodeGenerator> ValueGenerator { get; private set; }
    public LiteralAttributeCodeGenerator(LocationTagged`1<string> prefix, LocationTagged`1<SpanCodeGenerator> valueGenerator);
    public LiteralAttributeCodeGenerator(LocationTagged`1<string> prefix, LocationTagged`1<string> value);
    [CompilerGeneratedAttribute]
public LocationTagged`1<string> get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(LocationTagged`1<string> value);
    [CompilerGeneratedAttribute]
public LocationTagged`1<string> get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(LocationTagged`1<string> value);
    [CompilerGeneratedAttribute]
public LocationTagged`1<SpanCodeGenerator> get_ValueGenerator();
    [CompilerGeneratedAttribute]
private void set_ValueGenerator(LocationTagged`1<SpanCodeGenerator> value);
    public virtual void GenerateCode(Span target, CodeGeneratorContext context);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private void <GenerateCode>b__1(CodeWriter cw);
}
public class System.Web.Razor.Generator.MarkupCodeGenerator : SpanCodeGenerator {
    public virtual void GenerateCode(Span target, CodeGeneratorContext context);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class System.Web.Razor.Generator.RazorCodeGenerator : ParserVisitor {
    private CodeGeneratorContext _context;
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootNamespaceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorEngineHost <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateLinePragmas>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, CodeNamespaceImport> CS$<>9__CachedAnonymousMethodDelegate2;
    public string ClassName { get; private set; }
    public string RootNamespaceName { get; private set; }
    public string SourceFileName { get; private set; }
    public RazorEngineHost Host { get; private set; }
    public bool GenerateLinePragmas { get; public set; }
    public bool DesignTimeMode { get; public set; }
    public CodeGeneratorContext Context { get; }
    internal Func`1<CodeWriter> CodeWriterFactory { get; }
    protected RazorCodeGenerator(string className, string rootNamespaceName, string sourceFileName, RazorEngineHost host);
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
private void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public string get_RootNamespaceName();
    [CompilerGeneratedAttribute]
private void set_RootNamespaceName(string value);
    [CompilerGeneratedAttribute]
public string get_SourceFileName();
    [CompilerGeneratedAttribute]
private void set_SourceFileName(string value);
    [CompilerGeneratedAttribute]
public RazorEngineHost get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(RazorEngineHost value);
    [CompilerGeneratedAttribute]
public bool get_GenerateLinePragmas();
    [CompilerGeneratedAttribute]
public void set_GenerateLinePragmas(bool value);
    [CompilerGeneratedAttribute]
public bool get_DesignTimeMode();
    [CompilerGeneratedAttribute]
public void set_DesignTimeMode(bool value);
    public CodeGeneratorContext get_Context();
    internal virtual Func`1<CodeWriter> get_CodeWriterFactory();
    public virtual void VisitStartBlock(Block block);
    public virtual void VisitEndBlock(Block block);
    public virtual void VisitSpan(Span span);
    public virtual void OnComplete();
    private void EnsureContextInitialized();
    protected virtual void Initialize(CodeGeneratorContext context);
    [CompilerGeneratedAttribute]
private static CodeNamespaceImport <Initialize>b__1(string s);
}
public class System.Web.Razor.Generator.RazorCommentCodeGenerator : BlockCodeGenerator {
    [CompilerGeneratedAttribute]
private static Action`1<CodeWriter> CS$<>9__CachedAnonymousMethodDelegate1;
    public virtual void GenerateStartBlockCode(Block target, CodeGeneratorContext context);
    [CompilerGeneratedAttribute]
private static void <GenerateStartBlockCode>b__0(CodeWriter cw);
}
public class System.Web.Razor.Generator.RazorDirectiveAttributeCodeGenerator : SpanCodeGenerator {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; private set; }
    public string Value { get; private set; }
    public RazorDirectiveAttributeCodeGenerator(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    public virtual void GenerateCode(Span target, CodeGeneratorContext context);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Web.Razor.Generator.ResolveUrlCodeGenerator : SpanCodeGenerator {
    public virtual void GenerateCode(Span target, CodeGeneratorContext context);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Web.Razor.Generator.SectionCodeGenerator : BlockCodeGenerator {
    [CompilerGeneratedAttribute]
private string <SectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<CodeWriter> CS$<>9__CachedAnonymousMethodDelegate4;
    public string SectionName { get; private set; }
    public SectionCodeGenerator(string sectionName);
    [CompilerGeneratedAttribute]
public string get_SectionName();
    [CompilerGeneratedAttribute]
private void set_SectionName(string value);
    public virtual void GenerateStartBlockCode(Block target, CodeGeneratorContext context);
    public virtual void GenerateEndBlockCode(Block target, CodeGeneratorContext context);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static void <GenerateEndBlockCode>b__3(CodeWriter cw);
}
public class System.Web.Razor.Generator.SetBaseTypeCodeGenerator : SpanCodeGenerator {
    [CompilerGeneratedAttribute]
private string <BaseType>k__BackingField;
    public string BaseType { get; private set; }
    public SetBaseTypeCodeGenerator(string baseType);
    [CompilerGeneratedAttribute]
public string get_BaseType();
    [CompilerGeneratedAttribute]
private void set_BaseType(string value);
    public virtual void GenerateCode(Span target, CodeGeneratorContext context);
    protected virtual string ResolveType(CodeGeneratorContext context, string baseType);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Web.Razor.Generator.SetLayoutCodeGenerator : SpanCodeGenerator {
    [CompilerGeneratedAttribute]
private string <LayoutPath>k__BackingField;
    public string LayoutPath { get; public set; }
    public SetLayoutCodeGenerator(string layoutPath);
    [CompilerGeneratedAttribute]
public string get_LayoutPath();
    [CompilerGeneratedAttribute]
public void set_LayoutPath(string value);
    public virtual void GenerateCode(Span target, CodeGeneratorContext context);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Web.Razor.Generator.SetVBOptionCodeGenerator : SpanCodeGenerator {
    public static string StrictCodeDomOptionName;
    public static string ExplicitCodeDomOptionName;
    [CompilerGeneratedAttribute]
private string <OptionName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    public string OptionName { get; private set; }
    public bool Value { get; private set; }
    public SetVBOptionCodeGenerator(string optionName, bool value);
    private static SetVBOptionCodeGenerator();
    [CompilerGeneratedAttribute]
public string get_OptionName();
    [CompilerGeneratedAttribute]
private void set_OptionName(string value);
    [CompilerGeneratedAttribute]
public bool get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(bool value);
    public static SetVBOptionCodeGenerator Strict(bool onOffValue);
    public static SetVBOptionCodeGenerator Explicit(bool onOffValue);
    public virtual void GenerateCode(Span target, CodeGeneratorContext context);
    public virtual string ToString();
}
public abstract class System.Web.Razor.Generator.SpanCodeGenerator : object {
    public static ISpanCodeGenerator Null;
    private static SpanCodeGenerator();
    public virtual void GenerateCode(Span target, CodeGeneratorContext context);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Web.Razor.Generator.StatementCodeGenerator : SpanCodeGenerator {
    public virtual void GenerateCode(Span target, CodeGeneratorContext context);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Web.Razor.Generator.TemplateBlockCodeGenerator : BlockCodeGenerator {
    private static string TemplateWriterName;
    private static string ItemParameterName;
    private string _oldTargetWriter;
    [CompilerGeneratedAttribute]
private static Action`1<CodeWriter> CS$<>9__CachedAnonymousMethodDelegate4;
    public virtual void GenerateStartBlockCode(Block target, CodeGeneratorContext context);
    public virtual void GenerateEndBlockCode(Block target, CodeGeneratorContext context);
    [CompilerGeneratedAttribute]
private static void <GenerateEndBlockCode>b__3(CodeWriter cw);
}
public class System.Web.Razor.Generator.TypeMemberCodeGenerator : SpanCodeGenerator {
    public virtual void GenerateCode(Span target, CodeGeneratorContext context);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Web.Razor.Generator.VBCodeWriter : BaseCodeWriter {
    public bool SupportsMidStatementLinePragmas { get; }
    public virtual bool get_SupportsMidStatementLinePragmas();
    protected internal virtual void WriteStartGenerics();
    protected internal virtual void WriteEndGenerics();
    public virtual void WriteLineContinuation();
    public virtual int WriteVariableDeclaration(string type, string name, string value);
    public virtual void WriteStringLiteral(string literal);
    protected internal virtual void EmitStartLambdaExpression(String[] parameterNames);
    protected internal virtual void EmitStartConstructor(string typeName);
    protected internal virtual void EmitStartLambdaDelegate(String[] parameterNames);
    protected internal virtual void EmitEndLambdaDelegate();
    private void WriteCharLiteral(char literal);
    private void EnsureInQuotes(Boolean& inQuotes);
    private void EnsureOutOfQuotes(Boolean& inQuotes);
    public virtual void WriteReturn();
    public virtual void WriteLinePragma(Nullable`1<int> lineNumber, string fileName);
    public virtual void WriteHelperHeaderPrefix(string templateTypeName, bool isStatic);
    public virtual void WriteHelperHeaderSuffix(string templateTypeName);
    public virtual void WriteHelperTrailer();
    public virtual void WriteEndStatement();
}
public class System.Web.Razor.Generator.VBRazorCodeGenerator : RazorCodeGenerator {
    [CompilerGeneratedAttribute]
private static Func`1<CodeWriter> CS$<>9__CachedAnonymousMethodDelegate1;
    internal Func`1<CodeWriter> CodeWriterFactory { get; }
    public VBRazorCodeGenerator(string className, string rootNamespaceName, string sourceFileName, RazorEngineHost host);
    internal virtual Func`1<CodeWriter> get_CodeWriterFactory();
    [CompilerGeneratedAttribute]
private static CodeWriter <get_CodeWriterFactory>b__0();
}
public class System.Web.Razor.GeneratorResults : ParserResults {
    [CompilerGeneratedAttribute]
private CodeCompileUnit <GeneratedCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<int, GeneratedCodeMapping> <DesignTimeLineMappings>k__BackingField;
    public CodeCompileUnit GeneratedCode { get; private set; }
    public IDictionary`2<int, GeneratedCodeMapping> DesignTimeLineMappings { get; private set; }
    public GeneratorResults(ParserResults parserResults, CodeCompileUnit generatedCode, IDictionary`2<int, GeneratedCodeMapping> designTimeLineMappings);
    public GeneratorResults(Block document, IList`1<RazorError> parserErrors, CodeCompileUnit generatedCode, IDictionary`2<int, GeneratedCodeMapping> designTimeLineMappings);
    protected GeneratorResults(bool success, Block document, IList`1<RazorError> parserErrors, CodeCompileUnit generatedCode, IDictionary`2<int, GeneratedCodeMapping> designTimeLineMappings);
    [CompilerGeneratedAttribute]
public CodeCompileUnit get_GeneratedCode();
    [CompilerGeneratedAttribute]
private void set_GeneratedCode(CodeCompileUnit value);
    [CompilerGeneratedAttribute]
public IDictionary`2<int, GeneratedCodeMapping> get_DesignTimeLineMappings();
    [CompilerGeneratedAttribute]
private void set_DesignTimeLineMappings(IDictionary`2<int, GeneratedCodeMapping> value);
}
[FlagsAttribute]
public enum System.Web.Razor.Parser.BalancingModes : Enum {
    public int value__;
    public static BalancingModes None;
    public static BalancingModes BacktrackOnFailure;
    public static BalancingModes NoErrorOnFailure;
    public static BalancingModes AllowCommentsAndTemplates;
    public static BalancingModes AllowEmbeddedTransitions;
}
public class System.Web.Razor.Parser.CallbackVisitor : ParserVisitor {
    private Action`1<Span> _spanCallback;
    private Action`1<RazorError> _errorCallback;
    private Action`1<BlockType> _endBlockCallback;
    private Action`1<BlockType> _startBlockCallback;
    private Action _completeCallback;
    [CompilerGeneratedAttribute]
private SynchronizationContext <SynchronizationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<RazorError> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Action`1<BlockType> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Action`1<BlockType> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate7;
    public SynchronizationContext SynchronizationContext { get; public set; }
    public CallbackVisitor(Action`1<Span> spanCallback);
    public CallbackVisitor(Action`1<Span> spanCallback, Action`1<RazorError> errorCallback);
    public CallbackVisitor(Action`1<Span> spanCallback, Action`1<RazorError> errorCallback, Action`1<BlockType> startBlockCallback, Action`1<BlockType> endBlockCallback);
    public CallbackVisitor(Action`1<Span> spanCallback, Action`1<RazorError> errorCallback, Action`1<BlockType> startBlockCallback, Action`1<BlockType> endBlockCallback, Action completeCallback);
    [CompilerGeneratedAttribute]
public SynchronizationContext get_SynchronizationContext();
    [CompilerGeneratedAttribute]
public void set_SynchronizationContext(SynchronizationContext value);
    public virtual void VisitStartBlock(Block block);
    public virtual void VisitSpan(Span span);
    public virtual void VisitEndBlock(Block block);
    public virtual void VisitError(RazorError err);
    public virtual void OnComplete();
    private static void RaiseCallback(SynchronizationContext syncContext, T param, Action`1<T> callback);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(RazorError _);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__2(BlockType _);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__3(BlockType _);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__6();
    [CompilerGeneratedAttribute]
private void <OnComplete>b__8(object _);
}
internal class System.Web.Razor.Parser.ConditionalAttributeCollapser : MarkupRewriter {
    [CompilerGeneratedAttribute]
private static Func`2<Span, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public ConditionalAttributeCollapser(Action`3<SpanBuilder, SourceLocation, string> markupSpanFactory);
    protected virtual bool CanRewrite(Block block);
    protected virtual SyntaxTreeNode RewriteBlock(BlockBuilder parent, Block block);
    private bool IsLiteralAttributeValue(SyntaxTreeNode node);
    [CompilerGeneratedAttribute]
private static string <RewriteBlock>b__0(Span s);
}
public class System.Web.Razor.Parser.CSharpCodeParser : TokenizerBackedParser`3<CSharpTokenizer, CSharpSymbol, CSharpSymbolType> {
    internal static int UsingKeywordLength;
    internal static ISet`1<string> DefaultKeywords;
    private Dictionary`2<string, Action> _directiveParsers;
    private Dictionary`2<CSharpKeyword, Action`1<bool>> _keywordParsers;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Keywords>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNested>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`3<string, string, SpanCodeGenerator> CS$<>9__CachedAnonymousMethodDelegate35;
    [CompilerGeneratedAttribute]
private static Func`2<CSharpSymbol, string> CS$<>9__CachedAnonymousMethodDelegate37;
    [CompilerGeneratedAttribute]
private static Func`2<string, SpanCodeGenerator> CS$<>9__CachedAnonymousMethodDelegate3a;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<ISymbol>, IEnumerable`1<ISymbol>> CS$<>9__CachedAnonymousMethodDelegate3d;
    [CompilerGeneratedAttribute]
private static Func`2<CSharpSymbol, bool> CS$<>9__CachedAnonymousMethodDelegate3f;
    [CompilerGeneratedAttribute]
private static Action`2<SpanBuilder, Action`1<SpanBuilder>> CS$<>9__CachedAnonymousMethodDelegate47;
    [CompilerGeneratedAttribute]
private static Func`2<CSharpSymbol, bool> CS$<>9__CachedAnonymousMethodDelegate49;
    [CompilerGeneratedAttribute]
private static Action`1<ParserBase> CS$<>9__CachedAnonymousMethodDelegate4b;
    protected internal ISet`1<string> Keywords { get; private set; }
    public bool IsNested { get; public set; }
    protected ParserBase OtherParser { get; }
    protected LanguageCharacteristics`3<CSharpTokenizer, CSharpSymbol, CSharpSymbolType> Language { get; }
    private static CSharpCodeParser();
    private void SetupDirectives();
    protected virtual void LayoutDirective();
    protected virtual void SessionStateDirective();
    protected void SessionStateDirectiveCore();
    protected void SessionStateTypeDirective(string noValueError, Func`3<string, string, SpanCodeGenerator> createCodeGenerator);
    protected virtual bool ValidSessionStateValue();
    protected virtual void HelperDirective();
    protected virtual void SectionDirective();
    protected virtual void FunctionsDirective();
    protected virtual void InheritsDirective();
    [ConditionalAttribute("DEBUG")]
protected void AssertDirective(string directive);
    protected void InheritsDirectiveCore();
    protected void BaseTypeDirective(string noTypeNameError, Func`2<string, SpanCodeGenerator> createCodeGenerator);
    private void SetUpKeywords();
    protected virtual void ReservedDirective(bool topLevel);
    private void KeywordBlock(bool topLevel);
    private void CaseStatement(bool topLevel);
    private void DoStatement(bool topLevel);
    private void WhileClause();
    private void UsingKeyword(bool topLevel);
    private void UsingDeclaration();
    private bool NamespaceOrTypeName();
    private void TypeArgumentList();
    private void UsingStatement(Block block);
    private void TryStatement(bool topLevel);
    private void IfStatement(bool topLevel);
    private void AfterTryClause();
    private void AfterIfClause();
    private void ElseClause();
    private void ExpectCodeBlock(Block block);
    private void UnconditionalBlock();
    private void ConditionalBlock(bool topLevel);
    private void ConditionalBlock(Block block);
    private bool AcceptCondition();
    private void Statement();
    private void Statement(Block block);
    private void HandleStatement(Block block, CSharpSymbolType type);
    private void EmbeddedExpression();
    private void StandardStatement();
    private void CodeBlock(Block block);
    private void CodeBlock(bool acceptTerminatingBrace, Block block);
    private void HandleKeyword(bool topLevel, Action fallback);
    private IEnumerable`1<CSharpSymbol> SkipToNextImportantToken();
    protected virtual void OutputSpanBeforeRazorComment();
    [CompilerGeneratedAttribute]
protected internal ISet`1<string> get_Keywords();
    [CompilerGeneratedAttribute]
private void set_Keywords(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IsNested();
    [CompilerGeneratedAttribute]
public void set_IsNested(bool value);
    protected virtual ParserBase get_OtherParser();
    protected virtual LanguageCharacteristics`3<CSharpTokenizer, CSharpSymbol, CSharpSymbolType> get_Language();
    protected void MapDirectives(Action handler, String[] directives);
    protected bool TryGetDirectiveHandler(string directive, Action& handler);
    private void MapKeywords(Action`1<bool> handler, CSharpKeyword[] keywords);
    private void MapKeywords(Action`1<bool> handler, bool topLevel, CSharpKeyword[] keywords);
    [ConditionalAttribute("DEBUG")]
internal void Assert(CSharpKeyword expectedKeyword);
    protected internal bool At(CSharpKeyword keyword);
    protected internal bool AcceptIf(CSharpKeyword keyword);
    protected static Func`2<CSharpSymbol, bool> IsSpacingToken(bool includeNewLines, bool includeComments);
    public virtual void ParseBlock();
    private void DefaultSpanConfig(SpanBuilder span);
    private void AtTransition(CSharpSymbol current);
    private void AfterTransition();
    private void VerbatimBlock();
    private void ImplicitExpression();
    private bool MethodCallOrArrayIndex();
    private void CompleteBlock();
    private void CompleteBlock(bool insertMarkerIfNecessary);
    private void CompleteBlock(bool insertMarkerIfNecessary, bool captureWhitespaceToEndOfLine);
    private void CaptureWhitespaceAtEndOfCodeOnlyLine();
    private void ConfigureExplicitExpressionSpan(SpanBuilder sb);
    private void ExplicitExpression();
    private void Template();
    private void OtherParserBlock();
    private void SectionBlock(string left, string right, bool caseSensitive);
    private void NestedBlock();
    protected virtual bool IsAtEmbeddedTransition(bool allowTemplatesAndComments, bool allowTransitions);
    protected virtual void HandleEmbeddedTransition();
    private void ParseWithOtherParser(Action`1<ParserBase> parseAction);
    [CompilerGeneratedAttribute]
private static SpanCodeGenerator <SessionStateDirectiveCore>b__34(string key, string value);
    [CompilerGeneratedAttribute]
private static string <SessionStateTypeDirective>b__36(CSharpSymbol sym);
    [CompilerGeneratedAttribute]
private static SpanCodeGenerator <InheritsDirectiveCore>b__39(string baseType);
    [CompilerGeneratedAttribute]
private void <KeywordBlock>b__3b();
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ISymbol> <UsingDeclaration>b__3c(IEnumerable`1<ISymbol> syms);
    [CompilerGeneratedAttribute]
private static bool <StandardStatement>b__3e(CSharpSymbol sym);
    [CompilerGeneratedAttribute]
private void <ImplicitExpression>b__44(SpanBuilder span);
    [CompilerGeneratedAttribute]
private static void <MethodCallOrArrayIndex>b__46(SpanBuilder span, Action`1<SpanBuilder> prev);
    [CompilerGeneratedAttribute]
private static bool <CaptureWhitespaceAtEndOfCodeOnlyLine>b__48(CSharpSymbol sym);
    [CompilerGeneratedAttribute]
private static void <OtherParserBlock>b__4a(ParserBase p);
}
public class System.Web.Razor.Parser.CSharpLanguageCharacteristics : LanguageCharacteristics`3<CSharpTokenizer, CSharpSymbol, CSharpSymbolType> {
    private static CSharpLanguageCharacteristics _instance;
    private static Dictionary`2<CSharpSymbolType, string> _symbolSamples;
    public static CSharpLanguageCharacteristics Instance { get; }
    private static CSharpLanguageCharacteristics();
    public static CSharpLanguageCharacteristics get_Instance();
    public virtual CSharpTokenizer CreateTokenizer(ITextDocument source);
    protected virtual CSharpSymbol CreateSymbol(SourceLocation location, string content, CSharpSymbolType type, IEnumerable`1<RazorError> errors);
    public virtual string GetSample(CSharpSymbolType type);
    public virtual CSharpSymbol CreateMarkerSymbol(SourceLocation location);
    public virtual CSharpSymbolType GetKnownSymbolType(KnownSymbolType type);
    public virtual CSharpSymbolType FlipBracket(CSharpSymbolType bracket);
    public static string GetKeyword(CSharpKeyword keyword);
    public static string GetSymbolSample(CSharpSymbolType type);
}
public class System.Web.Razor.Parser.HtmlLanguageCharacteristics : LanguageCharacteristics`3<HtmlTokenizer, HtmlSymbol, HtmlSymbolType> {
    private static HtmlLanguageCharacteristics _instance;
    public static HtmlLanguageCharacteristics Instance { get; }
    private static HtmlLanguageCharacteristics();
    public static HtmlLanguageCharacteristics get_Instance();
    public virtual string GetSample(HtmlSymbolType type);
    public virtual HtmlTokenizer CreateTokenizer(ITextDocument source);
    public virtual HtmlSymbolType FlipBracket(HtmlSymbolType bracket);
    public virtual HtmlSymbol CreateMarkerSymbol(SourceLocation location);
    public virtual HtmlSymbolType GetKnownSymbolType(KnownSymbolType type);
    protected virtual HtmlSymbol CreateSymbol(SourceLocation location, string content, HtmlSymbolType type, IEnumerable`1<RazorError> errors);
}
public class System.Web.Razor.Parser.HtmlMarkupParser : TokenizerBackedParser`3<HtmlTokenizer, HtmlSymbol, HtmlSymbolType> {
    private SourceLocation _lastTagStart;
    private HtmlSymbol _bufferedOpenAngle;
    private ISet`1<string> _voidElements;
    [CompilerGeneratedAttribute]
private bool <CaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<HtmlSymbol, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<HtmlSymbol, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<HtmlSymbol, bool> CS$<>9__CachedAnonymousMethodDelegate19;
    public ISet`1<string> VoidElements { get; }
    protected ParserBase OtherParser { get; }
    protected LanguageCharacteristics`3<HtmlTokenizer, HtmlSymbol, HtmlSymbolType> Language { get; }
    private bool CaseSensitive { get; private set; }
    private StringComparison Comparison { get; }
    public virtual void ParseBlock();
    private void DefaultMarkupSpan(SpanBuilder span);
    private void AfterTransition();
    private void SingleLineMarkup();
    private void TagBlock(Stack`1<Tuple`2<HtmlSymbol, SourceLocation>> tags);
    private bool AfterTagStart(SourceLocation tagStart, Stack`1<Tuple`2<HtmlSymbol, SourceLocation>> tags);
    private bool XmlPI();
    private bool BangTag();
    private bool CData();
    private bool EndTag(SourceLocation tagStart, Stack`1<Tuple`2<HtmlSymbol, SourceLocation>> tags);
    private bool EndTextTag(HtmlSymbol solidus);
    private bool IsTagRecoveryStopPoint(HtmlSymbol sym);
    private void TagContent();
    private bool IsEndOfTag();
    private void BeforeAttribute();
    private void AttributePrefix(IEnumerable`1<HtmlSymbol> whitespace, IEnumerable`1<HtmlSymbol> nameSymbols);
    private void AttributeValue(HtmlSymbolType quote);
    private bool IsEndOfAttributeValue(HtmlSymbolType quote, HtmlSymbol sym);
    private bool IsUnquotedEndOfAttributeValue(HtmlSymbol sym);
    private void VirtualPath();
    private void RecoverToEndOfTag();
    private void ParseQuoted();
    private void ParseQuoted(HtmlSymbolType type);
    private bool StartTag(Stack`1<Tuple`2<HtmlSymbol, SourceLocation>> tags);
    private bool RestOfTag(Tuple`2<HtmlSymbol, SourceLocation> tag, Stack`1<Tuple`2<HtmlSymbol, SourceLocation>> tags);
    private void SkipToEndScriptAndParseCode();
    private bool AcceptUntilAll(HtmlSymbolType[] endSequence);
    private bool RemoveTag(Stack`1<Tuple`2<HtmlSymbol, SourceLocation>> tags, string tagName, SourceLocation tagStart);
    private void EndTagBlock(Stack`1<Tuple`2<HtmlSymbol, SourceLocation>> tags, bool complete);
    public virtual void ParseDocument();
    private bool ScanTagInDocumentContext();
    public ISet`1<string> get_VoidElements();
    protected virtual ParserBase get_OtherParser();
    protected virtual LanguageCharacteristics`3<HtmlTokenizer, HtmlSymbol, HtmlSymbolType> get_Language();
    public virtual void BuildSpan(SpanBuilder span, SourceLocation start, string content);
    protected virtual void OutputSpanBeforeRazorComment();
    protected void SkipToAndParseCode(HtmlSymbolType type);
    protected void SkipToAndParseCode(Func`2<HtmlSymbol, bool> condition);
    protected static Func`2<HtmlSymbol, bool> IsSpacingToken(bool includeNewLines);
    private void OtherParserBlock();
    [CompilerGeneratedAttribute]
private bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
private void set_CaseSensitive(bool value);
    private StringComparison get_Comparison();
    public virtual void ParseSection(Tuple`2<string, string> nestingSequences, bool caseSensitive);
    private void NonNestingSection(String[] nestingSequenceComponents);
    private void NestingSection(Tuple`2<string, string> nestingSequences);
    private bool AtEnd(String[] nestingSequenceComponents);
    private int ProcessTextToken(Tuple`2<string, string> nestingSequences, int currentNesting);
    private int HandleNestingSequence(string sequence, int position, int currentNesting, int retIfMatched);
    [CompilerGeneratedAttribute]
private static bool <BeforeAttribute>b__0(HtmlSymbol sym);
    [CompilerGeneratedAttribute]
private bool <BeforeAttribute>b__1(HtmlSymbol sym);
    [CompilerGeneratedAttribute]
private static bool <AttributeValue>b__8(HtmlSymbol sym);
    [CompilerGeneratedAttribute]
private static bool <NestingSection>b__18(HtmlSymbol sym);
}
internal interface System.Web.Razor.Parser.ISyntaxTreeRewriter {
    public abstract virtual Block Rewrite(Block input);
}
public abstract class System.Web.Razor.Parser.LanguageCharacteristics`3 : object {
    public abstract virtual string GetSample(TSymbolType type);
    public abstract virtual TTokenizer CreateTokenizer(ITextDocument source);
    public abstract virtual TSymbolType FlipBracket(TSymbolType bracket);
    public abstract virtual TSymbol CreateMarkerSymbol(SourceLocation location);
    public virtual IEnumerable`1<TSymbol> TokenizeString(string content);
    public virtual IEnumerable`1<TSymbol> TokenizeString(SourceLocation start, string input);
    public virtual bool IsWhiteSpace(TSymbol symbol);
    public virtual bool IsNewLine(TSymbol symbol);
    public virtual bool IsIdentifier(TSymbol symbol);
    public virtual bool IsKeyword(TSymbol symbol);
    public virtual bool IsTransition(TSymbol symbol);
    public virtual bool IsCommentStart(TSymbol symbol);
    public virtual bool IsCommentStar(TSymbol symbol);
    public virtual bool IsCommentBody(TSymbol symbol);
    public virtual bool IsUnknown(TSymbol symbol);
    public virtual bool IsKnownSymbolType(TSymbol symbol, KnownSymbolType type);
    public virtual Tuple`2<TSymbol, TSymbol> SplitSymbol(TSymbol symbol, int splitAt, TSymbolType leftType);
    public abstract virtual TSymbolType GetKnownSymbolType(KnownSymbolType type);
    public virtual bool KnowsSymbolType(KnownSymbolType type);
    protected abstract virtual TSymbol CreateSymbol(SourceLocation location, string content, TSymbolType type, IEnumerable`1<RazorError> errors);
}
internal class System.Web.Razor.Parser.MarkupCollapser : MarkupRewriter {
    public MarkupCollapser(Action`3<SpanBuilder, SourceLocation, string> markupSpanFactory);
    protected virtual bool CanRewrite(Span span);
    protected virtual SyntaxTreeNode RewriteSpan(BlockBuilder parent, Span span);
}
internal abstract class System.Web.Razor.Parser.MarkupRewriter : ParserVisitor {
    private Stack`1<BlockBuilder> _blocks;
    private Action`3<SpanBuilder, SourceLocation, string> _markupSpanFactory;
    protected BlockBuilder Parent { get; }
    protected MarkupRewriter(Action`3<SpanBuilder, SourceLocation, string> markupSpanFactory);
    protected BlockBuilder get_Parent();
    public virtual Block Rewrite(Block input);
    public virtual void VisitBlock(Block block);
    public virtual void VisitSpan(Span span);
    protected virtual bool CanRewrite(Block block);
    protected virtual bool CanRewrite(Span span);
    protected virtual SyntaxTreeNode RewriteBlock(BlockBuilder parent, Block block);
    protected virtual SyntaxTreeNode RewriteSpan(BlockBuilder parent, Span span);
    protected void FillSpan(SpanBuilder builder, SourceLocation start, string content);
}
public abstract class System.Web.Razor.Parser.ParserBase : object {
    private ParserContext _context;
    public ParserContext Context { get; public set; }
    public bool IsMarkupParser { get; }
    protected ParserBase OtherParser { get; }
    public virtual ParserContext get_Context();
    public virtual void set_Context(ParserContext value);
    public virtual bool get_IsMarkupParser();
    protected abstract virtual ParserBase get_OtherParser();
    public abstract virtual void BuildSpan(SpanBuilder span, SourceLocation start, string content);
    public abstract virtual void ParseBlock();
    public virtual void ParseDocument();
    public virtual void ParseSection(Tuple`2<string, string> nestingSequences, bool caseSensitive);
}
public class System.Web.Razor.Parser.ParserContext : object {
    private Nullable`1<int> _ownerTaskId;
    private bool _terminated;
    private Stack`1<BlockBuilder> _blockStack;
    [CompilerGeneratedAttribute]
private IList`1<RazorError> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private TextDocumentReader <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private ParserBase <CodeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private ParserBase <MarkupParser>k__BackingField;
    [CompilerGeneratedAttribute]
private ParserBase <ActiveParser>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Span <LastSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WhiteSpaceIsSignificantToAncestorBlock>k__BackingField;
    public IList`1<RazorError> Errors { get; private set; }
    public TextDocumentReader Source { get; public set; }
    public ParserBase CodeParser { get; private set; }
    public ParserBase MarkupParser { get; private set; }
    public ParserBase ActiveParser { get; private set; }
    public bool DesignTimeMode { get; public set; }
    public BlockBuilder CurrentBlock { get; }
    public Span LastSpan { get; private set; }
    public bool WhiteSpaceIsSignificantToAncestorBlock { get; public set; }
    public AcceptedCharacters LastAcceptedCharacters { get; }
    internal Stack`1<BlockBuilder> BlockStack { get; }
    public char CurrentCharacter { get; }
    public bool EndOfFile { get; }
    public ParserContext(ITextDocument source, ParserBase codeParser, ParserBase markupParser, ParserBase activeParser);
    [CompilerGeneratedAttribute]
public IList`1<RazorError> get_Errors();
    [CompilerGeneratedAttribute]
private void set_Errors(IList`1<RazorError> value);
    [CompilerGeneratedAttribute]
public TextDocumentReader get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(TextDocumentReader value);
    [CompilerGeneratedAttribute]
public ParserBase get_CodeParser();
    [CompilerGeneratedAttribute]
private void set_CodeParser(ParserBase value);
    [CompilerGeneratedAttribute]
public ParserBase get_MarkupParser();
    [CompilerGeneratedAttribute]
private void set_MarkupParser(ParserBase value);
    [CompilerGeneratedAttribute]
public ParserBase get_ActiveParser();
    [CompilerGeneratedAttribute]
private void set_ActiveParser(ParserBase value);
    [CompilerGeneratedAttribute]
public bool get_DesignTimeMode();
    [CompilerGeneratedAttribute]
public void set_DesignTimeMode(bool value);
    public BlockBuilder get_CurrentBlock();
    [CompilerGeneratedAttribute]
public Span get_LastSpan();
    [CompilerGeneratedAttribute]
private void set_LastSpan(Span value);
    [CompilerGeneratedAttribute]
public bool get_WhiteSpaceIsSignificantToAncestorBlock();
    [CompilerGeneratedAttribute]
public void set_WhiteSpaceIsSignificantToAncestorBlock(bool value);
    public AcceptedCharacters get_LastAcceptedCharacters();
    internal Stack`1<BlockBuilder> get_BlockStack();
    public char get_CurrentCharacter();
    public bool get_EndOfFile();
    public void AddSpan(Span span);
    public IDisposable StartBlock(BlockType blockType);
    public IDisposable StartBlock();
    public void EndBlock();
    public bool IsWithin(BlockType type);
    public void SwitchActiveParser();
    public void OnError(SourceLocation location, string message);
    public void OnError(SourceLocation location, string message, Object[] args);
    public ParserResults CompleteParse();
    [ConditionalAttribute("DEBUG")]
internal void CaptureOwnerTask();
    [ConditionalAttribute("DEBUG")]
internal void AssertOnOwnerTask();
    [ConditionalAttribute("DEBUG")]
internal void AssertCurrent(char expected);
    private void EnusreNotTerminated();
}
public static class System.Web.Razor.Parser.ParserHelpers : object {
    [CompilerGeneratedAttribute]
private static Func`2<char, char> CS$<>9__CachedAnonymousMethodDelegate1;
    public static bool IsNewLine(char value);
    public static bool IsNewLine(string value);
    public static bool IsWhitespace(char value);
    public static bool IsWhitespaceOrNewLine(char value);
    public static bool IsIdentifier(string value);
    public static bool IsIdentifier(string value, bool requireIdentifierStart);
    public static bool IsHexDigit(char value);
    public static bool IsIdentifierStart(char value);
    public static bool IsIdentifierPart(char value);
    public static bool IsTerminatingCharToken(char value);
    public static bool IsTerminatingQuotedStringToken(char value);
    public static bool IsDecimalDigit(char value);
    public static bool IsLetterOrDecimalDigit(char value);
    public static bool IsLetter(char value);
    public static bool IsFormatting(char value);
    public static bool IsCombining(char value);
    public static bool IsConnecting(char value);
    public static string SanitizeClassName(string inputName);
    public static bool IsEmailPart(char character);
    [CompilerGeneratedAttribute]
private static char <SanitizeClassName>b__0(char value);
}
public abstract class System.Web.Razor.Parser.ParserVisitor : object {
    [CompilerGeneratedAttribute]
private Nullable`1<CancellationToken> <CancelToken>k__BackingField;
    public Nullable`1<CancellationToken> CancelToken { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<CancellationToken> get_CancelToken();
    [CompilerGeneratedAttribute]
public void set_CancelToken(Nullable`1<CancellationToken> value);
    public virtual void VisitBlock(Block block);
    public virtual void VisitStartBlock(Block block);
    public virtual void VisitSpan(Span span);
    public virtual void VisitEndBlock(Block block);
    public virtual void VisitError(RazorError err);
    public virtual void OnComplete();
    public virtual void ThrowIfCanceled();
}
[ExtensionAttribute]
public static class System.Web.Razor.Parser.ParserVisitorExtensions : object {
    [ExtensionAttribute]
public static void Visit(ParserVisitor self, ParserResults result);
}
public class System.Web.Razor.Parser.RazorParser : object {
    [CompilerGeneratedAttribute]
private ParserBase <CodeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private ParserBase <MarkupParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ISyntaxTreeRewriter> <Optimizers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeMode>k__BackingField;
    internal ParserBase CodeParser { get; private set; }
    internal ParserBase MarkupParser { get; private set; }
    internal IList`1<ISyntaxTreeRewriter> Optimizers { get; private set; }
    public bool DesignTimeMode { get; public set; }
    public RazorParser(ParserBase codeParser, ParserBase markupParser);
    [CompilerGeneratedAttribute]
internal ParserBase get_CodeParser();
    [CompilerGeneratedAttribute]
private void set_CodeParser(ParserBase value);
    [CompilerGeneratedAttribute]
internal ParserBase get_MarkupParser();
    [CompilerGeneratedAttribute]
private void set_MarkupParser(ParserBase value);
    [CompilerGeneratedAttribute]
internal IList`1<ISyntaxTreeRewriter> get_Optimizers();
    [CompilerGeneratedAttribute]
private void set_Optimizers(IList`1<ISyntaxTreeRewriter> value);
    [CompilerGeneratedAttribute]
public bool get_DesignTimeMode();
    [CompilerGeneratedAttribute]
public void set_DesignTimeMode(bool value);
    public virtual void Parse(TextReader input, ParserVisitor visitor);
    public virtual ParserResults Parse(TextReader input);
    public virtual ParserResults Parse(ITextDocument input);
    [ObsoleteAttribute("Lookahead-based readers have been deprecated, use overrides which accept a TextReader or ITextDocument instead")]
public virtual void Parse(LookaheadTextReader input, ParserVisitor visitor);
    [ObsoleteAttribute("Lookahead-based readers have been deprecated, use overrides which accept a TextReader or ITextDocument instead")]
public virtual ParserResults Parse(LookaheadTextReader input);
    public virtual Task CreateParseTask(TextReader input, Action`1<Span> spanCallback, Action`1<RazorError> errorCallback);
    public virtual Task CreateParseTask(TextReader input, Action`1<Span> spanCallback, Action`1<RazorError> errorCallback, SynchronizationContext context);
    public virtual Task CreateParseTask(TextReader input, Action`1<Span> spanCallback, Action`1<RazorError> errorCallback, CancellationToken cancelToken);
    public virtual Task CreateParseTask(TextReader input, Action`1<Span> spanCallback, Action`1<RazorError> errorCallback, SynchronizationContext context, CancellationToken cancelToken);
    public virtual Task CreateParseTask(TextReader input, ParserVisitor consumer);
    private ParserResults ParseCore(ITextDocument input);
}
public static class System.Web.Razor.Parser.SyntaxConstants : object {
    public static string TextTagName;
    public static char TransitionCharacter;
    public static string TransitionString;
    public static string StartCommentSequence;
    public static string EndCommentSequence;
    private static SyntaxConstants();
}
[FlagsAttribute]
public enum System.Web.Razor.Parser.SyntaxTree.AcceptedCharacters : Enum {
    public int value__;
    public static AcceptedCharacters None;
    public static AcceptedCharacters NewLine;
    public static AcceptedCharacters WhiteSpace;
    public static AcceptedCharacters NonWhiteSpace;
    public static AcceptedCharacters AllWhiteSpace;
    public static AcceptedCharacters Any;
    public static AcceptedCharacters AnyExceptNewline;
}
public class System.Web.Razor.Parser.SyntaxTree.AutoCompleteEditHandler : SpanEditHandler {
    [CompilerGeneratedAttribute]
private bool <AutoCompleteAtEndOfSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AutoCompleteString>k__BackingField;
    public bool AutoCompleteAtEndOfSpan { get; public set; }
    public string AutoCompleteString { get; public set; }
    public AutoCompleteEditHandler(Func`2<string, IEnumerable`1<ISymbol>> tokenizer);
    public AutoCompleteEditHandler(Func`2<string, IEnumerable`1<ISymbol>> tokenizer, AcceptedCharacters accepted);
    [CompilerGeneratedAttribute]
public bool get_AutoCompleteAtEndOfSpan();
    [CompilerGeneratedAttribute]
public void set_AutoCompleteAtEndOfSpan(bool value);
    [CompilerGeneratedAttribute]
public string get_AutoCompleteString();
    [CompilerGeneratedAttribute]
public void set_AutoCompleteString(string value);
    protected virtual PartialParseResult CanAcceptChange(Span target, TextChange normalizedChange);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Web.Razor.Parser.SyntaxTree.Block : SyntaxTreeNode {
    [CompilerGeneratedAttribute]
private BlockType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SyntaxTreeNode> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IBlockCodeGenerator <CodeGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<SyntaxTreeNode, int> CS$<>9__CachedAnonymousMethodDelegate1;
    public BlockType Type { get; private set; }
    public IEnumerable`1<SyntaxTreeNode> Children { get; private set; }
    public string Name { get; private set; }
    public IBlockCodeGenerator CodeGenerator { get; private set; }
    public bool IsBlock { get; }
    public SourceLocation Start { get; }
    public int Length { get; }
    public Block(BlockBuilder source);
    internal Block(BlockType type, IEnumerable`1<SyntaxTreeNode> contents, IBlockCodeGenerator generator);
    [CompilerGeneratedAttribute]
public BlockType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(BlockType value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SyntaxTreeNode> get_Children();
    [CompilerGeneratedAttribute]
private void set_Children(IEnumerable`1<SyntaxTreeNode> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public IBlockCodeGenerator get_CodeGenerator();
    [CompilerGeneratedAttribute]
private void set_CodeGenerator(IBlockCodeGenerator value);
    public virtual bool get_IsBlock();
    public virtual SourceLocation get_Start();
    public virtual int get_Length();
    public Span FindFirstDescendentSpan();
    public Span FindLastDescendentSpan();
    public virtual void Accept(ParserVisitor visitor);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public IEnumerable`1<Span> Flatten();
    public Span LocateOwner(TextChange change);
    private static bool ChildrenEqual(IEnumerable`1<SyntaxTreeNode> left, IEnumerable`1<SyntaxTreeNode> right);
    public virtual bool EquivalentTo(SyntaxTreeNode node);
    [CompilerGeneratedAttribute]
private static int <get_Length>b__0(SyntaxTreeNode child);
}
public class System.Web.Razor.Parser.SyntaxTree.BlockBuilder : object {
    [CompilerGeneratedAttribute]
private Nullable`1<BlockType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SyntaxTreeNode> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IBlockCodeGenerator <CodeGenerator>k__BackingField;
    public Nullable`1<BlockType> Type { get; public set; }
    public IList`1<SyntaxTreeNode> Children { get; private set; }
    public string Name { get; public set; }
    public IBlockCodeGenerator CodeGenerator { get; public set; }
    public BlockBuilder(Block original);
    [CompilerGeneratedAttribute]
public Nullable`1<BlockType> get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Nullable`1<BlockType> value);
    [CompilerGeneratedAttribute]
public IList`1<SyntaxTreeNode> get_Children();
    [CompilerGeneratedAttribute]
private void set_Children(IList`1<SyntaxTreeNode> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IBlockCodeGenerator get_CodeGenerator();
    [CompilerGeneratedAttribute]
public void set_CodeGenerator(IBlockCodeGenerator value);
    public Block Build();
    public void Reset();
}
public enum System.Web.Razor.Parser.SyntaxTree.BlockType : Enum {
    public int value__;
    public static BlockType Statement;
    public static BlockType Directive;
    public static BlockType Functions;
    public static BlockType Expression;
    public static BlockType Helper;
    public static BlockType Markup;
    public static BlockType Section;
    public static BlockType Template;
    public static BlockType Comment;
}
internal class System.Web.Razor.Parser.SyntaxTree.EquivalenceComparer : object {
    public sealed virtual bool Equals(SyntaxTreeNode x, SyntaxTreeNode y);
    public sealed virtual int GetHashCode(SyntaxTreeNode obj);
}
public class System.Web.Razor.Parser.SyntaxTree.RazorError : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public string Message { get; private set; }
    public SourceLocation Location { get; private set; }
    public int Length { get; private set; }
    public RazorError(string message, SourceLocation location);
    public RazorError(string message, int absoluteIndex, int lineIndex, int columnIndex);
    public RazorError(string message, SourceLocation location, int length);
    public RazorError(string message, int absoluteIndex, int lineIndex, int columnIndex, int length);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public SourceLocation get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(SourceLocation value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(RazorError other);
}
public class System.Web.Razor.Parser.SyntaxTree.Span : SyntaxTreeNode {
    private SourceLocation _start;
    [CompilerGeneratedAttribute]
private SpanKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISymbol> <Symbols>k__BackingField;
    [CompilerGeneratedAttribute]
private Span <Previous>k__BackingField;
    [CompilerGeneratedAttribute]
private Span <Next>k__BackingField;
    [CompilerGeneratedAttribute]
private SpanEditHandler <EditHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private ISpanCodeGenerator <CodeGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`3<StringBuilder, ISymbol, StringBuilder> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<StringBuilder, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<ISymbol, Type> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<Type, ISymbol>, string> CS$<>9__CachedAnonymousMethodDelegate7;
    public SpanKind Kind { get; protected set; }
    public IEnumerable`1<ISymbol> Symbols { get; protected set; }
    public Span Previous { get; protected internal set; }
    public Span Next { get; protected internal set; }
    public SpanEditHandler EditHandler { get; protected set; }
    public ISpanCodeGenerator CodeGenerator { get; protected set; }
    public bool IsBlock { get; }
    public int Length { get; }
    public SourceLocation Start { get; }
    public string Content { get; private set; }
    public Span(SpanBuilder builder);
    [CompilerGeneratedAttribute]
public SpanKind get_Kind();
    [CompilerGeneratedAttribute]
protected void set_Kind(SpanKind value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ISymbol> get_Symbols();
    [CompilerGeneratedAttribute]
protected void set_Symbols(IEnumerable`1<ISymbol> value);
    [CompilerGeneratedAttribute]
public Span get_Previous();
    [CompilerGeneratedAttribute]
protected internal void set_Previous(Span value);
    [CompilerGeneratedAttribute]
public Span get_Next();
    [CompilerGeneratedAttribute]
protected internal void set_Next(Span value);
    [CompilerGeneratedAttribute]
public SpanEditHandler get_EditHandler();
    [CompilerGeneratedAttribute]
protected void set_EditHandler(SpanEditHandler value);
    [CompilerGeneratedAttribute]
public ISpanCodeGenerator get_CodeGenerator();
    [CompilerGeneratedAttribute]
protected void set_CodeGenerator(ISpanCodeGenerator value);
    public virtual bool get_IsBlock();
    public virtual int get_Length();
    public virtual SourceLocation get_Start();
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(string value);
    public void Change(Action`1<SpanBuilder> changes);
    public void ReplaceWith(SpanBuilder builder);
    public virtual void Accept(ParserVisitor visitor);
    public virtual string ToString();
    public void ChangeStart(SourceLocation newStart);
    internal void SetStart(SourceLocation newStart);
    public virtual bool EquivalentTo(SyntaxTreeNode node);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private static StringBuilder <ReplaceWith>b__0(StringBuilder sb, ISymbol sym);
    [CompilerGeneratedAttribute]
private static string <ReplaceWith>b__1(StringBuilder sb);
    [CompilerGeneratedAttribute]
private static Type <ToString>b__4(ISymbol sym);
    [CompilerGeneratedAttribute]
private static string <ToString>b__5(IGrouping`2<Type, ISymbol> grp);
}
public class System.Web.Razor.Parser.SyntaxTree.SpanBuilder : object {
    private IList`1<ISymbol> _symbols;
    private SourceLocationTracker _tracker;
    [CompilerGeneratedAttribute]
private SourceLocation <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private SpanKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private SpanEditHandler <EditHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private ISpanCodeGenerator <CodeGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, IEnumerable`1<ISymbol>> CS$<>9__CachedAnonymousMethodDelegate1;
    public SourceLocation Start { get; public set; }
    public SpanKind Kind { get; public set; }
    public ReadOnlyCollection`1<ISymbol> Symbols { get; }
    public SpanEditHandler EditHandler { get; public set; }
    public ISpanCodeGenerator CodeGenerator { get; public set; }
    public SpanBuilder(Span original);
    [CompilerGeneratedAttribute]
public SourceLocation get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(SourceLocation value);
    [CompilerGeneratedAttribute]
public SpanKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(SpanKind value);
    public ReadOnlyCollection`1<ISymbol> get_Symbols();
    [CompilerGeneratedAttribute]
public SpanEditHandler get_EditHandler();
    [CompilerGeneratedAttribute]
public void set_EditHandler(SpanEditHandler value);
    [CompilerGeneratedAttribute]
public ISpanCodeGenerator get_CodeGenerator();
    [CompilerGeneratedAttribute]
public void set_CodeGenerator(ISpanCodeGenerator value);
    public void Reset();
    public Span Build();
    public void ClearSymbols();
    public void Accept(ISymbol symbol);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ISymbol> <Reset>b__0(string s);
}
public enum System.Web.Razor.Parser.SyntaxTree.SpanKind : Enum {
    public int value__;
    public static SpanKind Transition;
    public static SpanKind MetaCode;
    public static SpanKind Comment;
    public static SpanKind Code;
    public static SpanKind Markup;
}
public abstract class System.Web.Razor.Parser.SyntaxTree.SyntaxTreeNode : object {
    [CompilerGeneratedAttribute]
private Block <Parent>k__BackingField;
    public Block Parent { get; internal set; }
    public bool IsBlock { get; }
    public int Length { get; }
    public SourceLocation Start { get; }
    [CompilerGeneratedAttribute]
public Block get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(Block value);
    public abstract virtual bool get_IsBlock();
    public abstract virtual int get_Length();
    public abstract virtual SourceLocation get_Start();
    public abstract virtual void Accept(ParserVisitor visitor);
    public abstract virtual bool EquivalentTo(SyntaxTreeNode node);
}
[ExtensionAttribute]
internal static class System.Web.Razor.Parser.TextReaderExtensions : object {
    [CompilerGeneratedAttribute]
private static Predicate`1<char> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Predicate`1<char> CS$<>9__CachedAnonymousMethodDelegatef;
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, char terminator);
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, char terminator, bool inclusive);
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, Char[] terminators);
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, bool inclusive, Char[] terminators);
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, Predicate`1<char> condition);
    [ExtensionAttribute]
public static string ReadUntil(TextReader reader, Predicate`1<char> condition, bool inclusive);
    [ExtensionAttribute]
public static string ReadWhile(TextReader reader, Predicate`1<char> condition);
    [ExtensionAttribute]
public static string ReadWhile(TextReader reader, Predicate`1<char> condition, bool inclusive);
    [ExtensionAttribute]
public static string ReadWhiteSpace(TextReader reader);
    [ExtensionAttribute]
public static string ReadUntilWhiteSpace(TextReader reader);
    [CompilerGeneratedAttribute]
private static bool <ReadWhiteSpace>b__c(char c);
    [CompilerGeneratedAttribute]
private static bool <ReadUntilWhiteSpace>b__e(char c);
}
public abstract class System.Web.Razor.Parser.TokenizerBackedParser`3 : ParserBase {
    private TokenizerView`3<TTokenizer, TSymbol, TSymbolType> _tokenizer;
    [CompilerGeneratedAttribute]
private SpanBuilder <Span>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<SpanBuilder> <SpanConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private TSymbol <PreviousSymbol>k__BackingField;
    protected SpanBuilder Span { get; protected set; }
    protected TokenizerView`3<TTokenizer, TSymbol, TSymbolType> Tokenizer { get; }
    protected Action`1<SpanBuilder> SpanConfig { get; protected set; }
    protected TSymbol CurrentSymbol { get; }
    protected TSymbol PreviousSymbol { get; private set; }
    protected SourceLocation CurrentLocation { get; }
    protected bool EndOfFile { get; }
    protected LanguageCharacteristics`3<TTokenizer, TSymbol, TSymbolType> Language { get; }
    [CompilerGeneratedAttribute]
protected SpanBuilder get_Span();
    [CompilerGeneratedAttribute]
protected void set_Span(SpanBuilder value);
    protected TokenizerView`3<TTokenizer, TSymbol, TSymbolType> get_Tokenizer();
    [CompilerGeneratedAttribute]
protected Action`1<SpanBuilder> get_SpanConfig();
    [CompilerGeneratedAttribute]
protected void set_SpanConfig(Action`1<SpanBuilder> value);
    protected TSymbol get_CurrentSymbol();
    [CompilerGeneratedAttribute]
protected TSymbol get_PreviousSymbol();
    [CompilerGeneratedAttribute]
private void set_PreviousSymbol(TSymbol value);
    protected SourceLocation get_CurrentLocation();
    protected bool get_EndOfFile();
    protected abstract virtual LanguageCharacteristics`3<TTokenizer, TSymbol, TSymbolType> get_Language();
    protected virtual void HandleEmbeddedTransition();
    protected virtual bool IsAtEmbeddedTransition(bool allowTemplatesAndComments, bool allowTransitions);
    public virtual void BuildSpan(SpanBuilder span, SourceLocation start, string content);
    protected void Initialize(SpanBuilder span);
    protected internal bool NextToken();
    private TokenizerView`3<TTokenizer, TSymbol, TSymbolType> InitTokenizer();
    [ConditionalAttribute("DEBUG")]
internal void Assert(TSymbolType expectedType);
    protected internal void PutBack(TSymbol symbol);
    protected internal void PutBack(IEnumerable`1<TSymbol> symbols);
    protected internal void PutCurrentBack();
    protected internal bool Balance(BalancingModes mode);
    protected internal bool Balance(BalancingModes mode, TSymbolType left, TSymbolType right, SourceLocation start);
    protected internal bool NextIs(TSymbolType type);
    protected internal bool NextIs(TSymbolType[] types);
    protected internal bool NextIs(Func`2<TSymbol, bool> condition);
    protected internal bool Was(TSymbolType type);
    protected internal bool At(TSymbolType type);
    protected internal bool AcceptAndMoveNext();
    protected TSymbol AcceptSingleWhiteSpaceCharacter();
    protected internal void Accept(IEnumerable`1<TSymbol> symbols);
    protected internal void Accept(TSymbol symbol);
    protected internal bool AcceptAll(TSymbolType[] types);
    protected internal void AddMarkerSymbolIfNecessary();
    protected internal void AddMarkerSymbolIfNecessary(SourceLocation location);
    protected internal void Output(SpanKind kind);
    protected internal void Output(SpanKind kind, AcceptedCharacters accepts);
    protected internal void Output(AcceptedCharacters accepts);
    private void Output();
    protected IDisposable PushSpanConfig();
    protected IDisposable PushSpanConfig(Action`1<SpanBuilder> newConfig);
    protected IDisposable PushSpanConfig(Action`2<SpanBuilder, Action`1<SpanBuilder>> newConfig);
    protected void ConfigureSpan(Action`1<SpanBuilder> config);
    protected void ConfigureSpan(Action`2<SpanBuilder, Action`1<SpanBuilder>> config);
    protected internal void Expected(KnownSymbolType type);
    protected internal void Expected(TSymbolType[] types);
    protected internal bool Optional(KnownSymbolType type);
    protected internal bool Optional(TSymbolType type);
    protected internal bool Required(TSymbolType expected, bool errorIfNotFound, string errorBase);
    protected bool EnsureCurrent();
    protected internal void AcceptWhile(TSymbolType type);
    protected internal void AcceptWhile(TSymbolType type1, TSymbolType type2);
    protected internal void AcceptWhile(TSymbolType type1, TSymbolType type2, TSymbolType type3);
    protected internal void AcceptWhile(TSymbolType[] types);
    protected internal void AcceptUntil(TSymbolType type);
    protected internal void AcceptUntil(TSymbolType type1, TSymbolType type2);
    protected internal void AcceptUntil(TSymbolType type1, TSymbolType type2, TSymbolType type3);
    protected internal void AcceptUntil(TSymbolType[] types);
    protected internal void AcceptWhile(Func`2<TSymbol, bool> condition);
    protected internal IEnumerable`1<TSymbol> ReadWhile(Func`2<TSymbol, bool> condition);
    protected TSymbol AcceptWhiteSpaceInLines();
    protected bool AtIdentifier(bool allowKeywords);
    internal IEnumerable`1<TSymbol> ReadWhileLazy(Func`2<TSymbol, bool> condition);
    private void Configure(Nullable`1<SpanKind> kind, Nullable`1<AcceptedCharacters> accepts);
    protected virtual void OutputSpanBeforeRazorComment();
    private void CommentSpanConfig(SpanBuilder span);
    protected void RazorComment();
}
public class System.Web.Razor.Parser.VBCodeParser : TokenizerBackedParser`3<VBTokenizer, VBSymbol, VBSymbolType> {
    internal static ISet`1<string> DefaultKeywords;
    private Dictionary`2<VBKeyword, Func`1<bool>> _keywordHandlers;
    private Dictionary`2<string, Func`1<bool>> _directiveHandlers;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Keywords>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNested>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DirectParentIsCode>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<VBSymbol, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Action`1<SpanBuilder> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<VBSymbol, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<ISymbol, string> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<ISymbol, string> CS$<>9__CachedAnonymousMethodDelegate1f;
    protected internal ISet`1<string> Keywords { get; private set; }
    protected LanguageCharacteristics`3<VBTokenizer, VBSymbol, VBSymbolType> Language { get; }
    protected ParserBase OtherParser { get; }
    private bool IsNested { get; private set; }
    private bool DirectParentIsCode { get; private set; }
    private static VBCodeParser();
    [CompilerGeneratedAttribute]
protected internal ISet`1<string> get_Keywords();
    [CompilerGeneratedAttribute]
private void set_Keywords(ISet`1<string> value);
    protected virtual LanguageCharacteristics`3<VBTokenizer, VBSymbol, VBSymbolType> get_Language();
    protected virtual ParserBase get_OtherParser();
    [CompilerGeneratedAttribute]
private bool get_IsNested();
    [CompilerGeneratedAttribute]
private void set_IsNested(bool value);
    [CompilerGeneratedAttribute]
private bool get_DirectParentIsCode();
    [CompilerGeneratedAttribute]
private void set_DirectParentIsCode(bool value);
    protected virtual bool IsAtEmbeddedTransition(bool allowTemplatesAndComments, bool allowTransitions);
    protected virtual void HandleEmbeddedTransition();
    protected void HandleEmbeddedTransition(VBSymbol lastWhiteSpace);
    public virtual void ParseBlock();
    private void ImplictExpressionSpanConfig(SpanBuilder span);
    private Action`1<SpanBuilder> StatementBlockSpanConfiguration(SpanCodeGenerator codeGenerator);
    private bool TryDirectiveBlock(Boolean& complete);
    private bool KeywordBlock();
    private bool ExplicitExpression();
    private void ImplicitExpression();
    protected void MapKeyword(VBKeyword keyword, Func`1<bool> action);
    protected void MapDirective(string directive, Func`1<bool> action);
    [ConditionalAttribute("DEBUG")]
protected void Assert(VBKeyword keyword);
    protected bool At(VBKeyword keyword);
    protected void OtherParserBlock();
    protected void OtherParserBlock(string startSequence, string endSequence);
    protected void HandleTransition(VBSymbol lastWhiteSpace);
    protected virtual void OutputSpanBeforeRazorComment();
    protected bool ReservedWord();
    protected void NestedBlock();
    protected bool Required(VBSymbolType expected, string errorBase);
    protected bool Optional(VBKeyword keyword);
    protected void AcceptVBSpaces();
    protected IEnumerable`1<VBSymbol> ReadVBSpaces();
    public bool IsDirectiveDefined(string directive);
    private IEnumerable`1<VBSymbol> ReadVBSpacesLazy();
    private void SetUpDirectives();
    protected virtual bool LayoutDirective();
    protected virtual bool SessionStateDirective();
    protected virtual bool HelperDirective();
    protected virtual bool SectionDirective();
    protected virtual Func`1<bool> EndTerminatedDirective(string directive, BlockType blockType, SpanCodeGenerator codeGenerator, bool allowMarkup);
    protected virtual bool EndTerminatedDirectiveBody(string directive, SourceLocation blockStart, bool allowAllTransitions);
    protected bool At(string directive);
    [ConditionalAttribute("DEBUG")]
protected void AssertDirective(string directive);
    private string GetCurrentSymbolDisplay();
    private void SetUpKeywords();
    protected virtual bool InheritsStatement();
    protected virtual bool OptionStatement();
    protected virtual bool ImportsStatement();
    protected virtual Func`1<bool> EndTerminatedStatement(VBKeyword keyword, bool supportsExit, bool supportsContinue);
    protected virtual Func`1<bool> EndTerminatedStatement(VBKeyword keyword, bool supportsExit, bool supportsContinue, string blockName);
    protected virtual Func`1<bool> KeywordTerminatedStatement(VBKeyword start, VBKeyword terminator, bool supportsExit, bool supportsContinue);
    protected void HandleExitOrContinue(VBKeyword keyword);
    [CompilerGeneratedAttribute]
private static bool <ParseBlock>b__0(VBSymbol sym);
    [CompilerGeneratedAttribute]
private static void <ExplicitExpression>b__6(SpanBuilder span);
    [CompilerGeneratedAttribute]
private static bool <ReadVBSpacesLazy>b__c(VBSymbol sym);
    [CompilerGeneratedAttribute]
private static string <SessionStateDirective>b__19(ISymbol sym);
    [CompilerGeneratedAttribute]
private static string <ImportsStatement>b__1e(ISymbol s);
}
public class System.Web.Razor.Parser.VBLanguageCharacteristics : LanguageCharacteristics`3<VBTokenizer, VBSymbol, VBSymbolType> {
    private static VBLanguageCharacteristics _instance;
    public static VBLanguageCharacteristics Instance { get; }
    private static VBLanguageCharacteristics();
    public static VBLanguageCharacteristics get_Instance();
    public virtual VBTokenizer CreateTokenizer(ITextDocument source);
    public virtual string GetSample(VBSymbolType type);
    public virtual VBSymbolType FlipBracket(VBSymbolType bracket);
    public virtual VBSymbol CreateMarkerSymbol(SourceLocation location);
    public virtual VBSymbolType GetKnownSymbolType(KnownSymbolType type);
    protected virtual VBSymbol CreateSymbol(SourceLocation location, string content, VBSymbolType type, IEnumerable`1<RazorError> errors);
}
internal class System.Web.Razor.Parser.WhiteSpaceRewriter : MarkupRewriter {
    public WhiteSpaceRewriter(Action`3<SpanBuilder, SourceLocation, string> markupSpanFactory);
    protected virtual bool CanRewrite(Block block);
    protected virtual SyntaxTreeNode RewriteBlock(BlockBuilder parent, Block block);
}
public class System.Web.Razor.ParserResults : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private Block <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<RazorError> <ParserErrors>k__BackingField;
    public bool Success { get; private set; }
    public Block Document { get; private set; }
    public IList`1<RazorError> ParserErrors { get; private set; }
    public ParserResults(Block document, IList`1<RazorError> parserErrors);
    protected ParserResults(bool success, Block document, IList`1<RazorError> errors);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
private void set_Success(bool value);
    [CompilerGeneratedAttribute]
public Block get_Document();
    [CompilerGeneratedAttribute]
private void set_Document(Block value);
    [CompilerGeneratedAttribute]
public IList`1<RazorError> get_ParserErrors();
    [CompilerGeneratedAttribute]
private void set_ParserErrors(IList`1<RazorError> value);
}
[FlagsAttribute]
public enum System.Web.Razor.PartialParseResult : Enum {
    public int value__;
    public static PartialParseResult Rejected;
    public static PartialParseResult Accepted;
    public static PartialParseResult Provisional;
    public static PartialParseResult SpanContextChanged;
    public static PartialParseResult AutoCompleteBlock;
}
public abstract class System.Web.Razor.RazorCodeLanguage : object {
    private static IDictionary`2<string, RazorCodeLanguage> _services;
    public static IDictionary`2<string, RazorCodeLanguage> Languages { get; }
    public string LanguageName { get; }
    public Type CodeDomProviderType { get; }
    private static RazorCodeLanguage();
    public static IDictionary`2<string, RazorCodeLanguage> get_Languages();
    public abstract virtual string get_LanguageName();
    public abstract virtual Type get_CodeDomProviderType();
    public static RazorCodeLanguage GetLanguageByExtension(string fileExtension);
    public abstract virtual ParserBase CreateCodeParser();
    public abstract virtual RazorCodeGenerator CreateCodeGenerator(string className, string rootNamespaceName, string sourceFileName, RazorEngineHost host);
}
[AttributeUsageAttribute("4")]
public class System.Web.Razor.RazorDirectiveAttribute : Attribute {
    private object _typeId;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public object TypeId { get; }
    public string Name { get; private set; }
    public string Value { get; private set; }
    public RazorDirectiveAttribute(string name, string value);
    public virtual object get_TypeId();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Web.Razor.RazorEditorParser : object {
    private Span _lastChangeOwner;
    private Span _lastAutoCompleteSpan;
    private BackgroundParser _parser;
    private Block _currentParseTree;
    private EventHandler`1<DocumentParseCompleteEventArgs> DocumentParseComplete;
    [CompilerGeneratedAttribute]
private RazorEngineHost <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LastResultProvisional>k__BackingField;
    public RazorEngineHost Host { get; private set; }
    public string FileName { get; private set; }
    public bool LastResultProvisional { get; private set; }
    public Block CurrentParseTree { get; }
    public RazorEditorParser(RazorEngineHost host, string sourceFileName);
    public void add_DocumentParseComplete(EventHandler`1<DocumentParseCompleteEventArgs> value);
    public void remove_DocumentParseComplete(EventHandler`1<DocumentParseCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public RazorEngineHost get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(RazorEngineHost value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public bool get_LastResultProvisional();
    [CompilerGeneratedAttribute]
private void set_LastResultProvisional(bool value);
    public Block get_CurrentParseTree();
    public virtual string GetAutoCompleteString();
    public virtual PartialParseResult CheckForStructureChanges(TextChange change);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private PartialParseResult TryPartialParse(TextChange change);
    private void OnDocumentParseComplete(DocumentParseCompleteEventArgs args);
    [ConditionalAttribute("DEBUG")]
private static void VerifyFlagsAreValid(PartialParseResult result);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, DocumentParseCompleteEventArgs args);
}
public class System.Web.Razor.RazorEngineHost : object {
    internal static string InternalDefaultClassName;
    internal static string InternalDefaultNamespace;
    private bool _instrumentationActive;
    private Func`1<ParserBase> _markupParserFactory;
    private int _tabSize;
    [CompilerGeneratedAttribute]
private GeneratedClassContext <GeneratedClassContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <NamespaceImports>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultBaseClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StaticHelpers>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorCodeLanguage <CodeLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndentingWithTabs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstrumentedSourceFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<ParserBase> CS$<>9__CachedAnonymousMethodDelegate1;
    public GeneratedClassContext GeneratedClassContext { get; public set; }
    public ISet`1<string> NamespaceImports { get; private set; }
    public string DefaultBaseClass { get; public set; }
    public bool DesignTimeMode { get; public set; }
    public string DefaultClassName { get; public set; }
    public string DefaultNamespace { get; public set; }
    public bool StaticHelpers { get; public set; }
    public RazorCodeLanguage CodeLanguage { get; protected set; }
    public bool EnableInstrumentation { get; public set; }
    public bool IsIndentingWithTabs { get; public set; }
    public int TabSize { get; public set; }
    public string InstrumentedSourceFilePath { get; public set; }
    public RazorEngineHost(RazorCodeLanguage codeLanguage);
    public RazorEngineHost(RazorCodeLanguage codeLanguage, Func`1<ParserBase> markupParserFactory);
    [CompilerGeneratedAttribute]
public virtual GeneratedClassContext get_GeneratedClassContext();
    [CompilerGeneratedAttribute]
public virtual void set_GeneratedClassContext(GeneratedClassContext value);
    [CompilerGeneratedAttribute]
public virtual ISet`1<string> get_NamespaceImports();
    [CompilerGeneratedAttribute]
private void set_NamespaceImports(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultBaseClass();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultBaseClass(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_DesignTimeMode();
    [CompilerGeneratedAttribute]
public virtual void set_DesignTimeMode(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultClassName();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultClassName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultNamespace();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultNamespace(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_StaticHelpers();
    [CompilerGeneratedAttribute]
public virtual void set_StaticHelpers(bool value);
    [CompilerGeneratedAttribute]
public virtual RazorCodeLanguage get_CodeLanguage();
    [CompilerGeneratedAttribute]
protected virtual void set_CodeLanguage(RazorCodeLanguage value);
    public virtual bool get_EnableInstrumentation();
    public virtual void set_EnableInstrumentation(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsIndentingWithTabs();
    [CompilerGeneratedAttribute]
public virtual void set_IsIndentingWithTabs(bool value);
    public virtual int get_TabSize();
    public virtual void set_TabSize(int value);
    [CompilerGeneratedAttribute]
public virtual string get_InstrumentedSourceFilePath();
    [CompilerGeneratedAttribute]
public virtual void set_InstrumentedSourceFilePath(string value);
    public virtual ParserBase CreateMarkupParser();
    public virtual ParserBase DecorateCodeParser(ParserBase incomingCodeParser);
    public virtual ParserBase DecorateMarkupParser(ParserBase incomingMarkupParser);
    public virtual RazorCodeGenerator DecorateCodeGenerator(RazorCodeGenerator incomingCodeGenerator);
    public virtual void PostProcessGeneratedCode(CodeGeneratorContext context);
    [ObsoleteAttribute("This method is obsolete, use the override which takes a CodeGeneratorContext instead")]
public virtual void PostProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeNamespace generatedNamespace, CodeTypeDeclaration generatedClass, CodeMemberMethod executeMethod);
    [CompilerGeneratedAttribute]
private static ParserBase <.ctor>b__0();
}
public class System.Web.Razor.RazorTemplateEngine : object {
    public static string DefaultClassName;
    public static string DefaultNamespace;
    [CompilerGeneratedAttribute]
private RazorEngineHost <Host>k__BackingField;
    public RazorEngineHost Host { get; private set; }
    public RazorTemplateEngine(RazorEngineHost host);
    private static RazorTemplateEngine();
    [CompilerGeneratedAttribute]
public RazorEngineHost get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(RazorEngineHost value);
    public ParserResults ParseTemplate(ITextBuffer input);
    public ParserResults ParseTemplate(ITextBuffer input, Nullable`1<CancellationToken> cancelToken);
    public ParserResults ParseTemplate(TextReader input);
    public ParserResults ParseTemplate(TextReader input, Nullable`1<CancellationToken> cancelToken);
    protected internal virtual ParserResults ParseTemplateCore(ITextDocument input, Nullable`1<CancellationToken> cancelToken);
    public GeneratorResults GenerateCode(ITextBuffer input);
    public GeneratorResults GenerateCode(ITextBuffer input, Nullable`1<CancellationToken> cancelToken);
    public GeneratorResults GenerateCode(ITextBuffer input, string className, string rootNamespace, string sourceFileName);
    public GeneratorResults GenerateCode(ITextBuffer input, string className, string rootNamespace, string sourceFileName, Nullable`1<CancellationToken> cancelToken);
    public GeneratorResults GenerateCode(TextReader input);
    public GeneratorResults GenerateCode(TextReader input, Nullable`1<CancellationToken> cancelToken);
    public GeneratorResults GenerateCode(TextReader input, string className, string rootNamespace, string sourceFileName);
    public GeneratorResults GenerateCode(TextReader input, string className, string rootNamespace, string sourceFileName, Nullable`1<CancellationToken> cancelToken);
    protected internal virtual GeneratorResults GenerateCodeCore(ITextDocument input, string className, string rootNamespace, string sourceFileName, Nullable`1<CancellationToken> cancelToken);
    protected internal virtual RazorCodeGenerator CreateCodeGenerator(string className, string rootNamespace, string sourceFileName);
    protected internal virtual RazorParser CreateParser();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Web.Razor.Resources.RazorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActiveParser_Must_Be_Code_Or_Markup_Parser { get; }
    internal static string Block_Type_Not_Specified { get; }
    internal static string BlockName_Code { get; }
    internal static string BlockName_ExplicitExpression { get; }
    internal static string CancelBacktrack_Must_Be_Called_Within_Lookahead { get; }
    internal static string CreateCodeWriter_NoCodeWriter { get; }
    internal static string CSharpSymbol_CharacterLiteral { get; }
    internal static string CSharpSymbol_Comment { get; }
    internal static string CSharpSymbol_Identifier { get; }
    internal static string CSharpSymbol_IntegerLiteral { get; }
    internal static string CSharpSymbol_Keyword { get; }
    internal static string CSharpSymbol_Newline { get; }
    internal static string CSharpSymbol_RealLiteral { get; }
    internal static string CSharpSymbol_StringLiteral { get; }
    internal static string CSharpSymbol_Whitespace { get; }
    internal static string EndBlock_Called_Without_Matching_StartBlock { get; }
    internal static string ErrorComponent_Character { get; }
    internal static string ErrorComponent_EndOfFile { get; }
    internal static string ErrorComponent_Newline { get; }
    internal static string ErrorComponent_Whitespace { get; }
    internal static string HtmlSymbol_NewLine { get; }
    internal static string HtmlSymbol_RazorComment { get; }
    internal static string HtmlSymbol_Text { get; }
    internal static string HtmlSymbol_WhiteSpace { get; }
    internal static string Language_Does_Not_Support_RazorComment { get; }
    internal static string ParseError_AtInCode_Must_Be_Followed_By_Colon_Paren_Or_Identifier_Start { get; }
    internal static string ParseError_BlockComment_Not_Terminated { get; }
    internal static string ParseError_BlockNotTerminated { get; }
    internal static string ParseError_Expected_CloseBracket_Before_EOF { get; }
    internal static string ParseError_Expected_EndOfBlock_Before_EOF { get; }
    internal static string ParseError_Expected_X { get; }
    internal static string ParseError_Helpers_Cannot_Be_Nested { get; }
    internal static string ParseError_InheritsKeyword_Must_Be_Followed_By_TypeName { get; }
    internal static string ParseError_InlineMarkup_Blocks_Cannot_Be_Nested { get; }
    internal static string ParseError_InvalidOptionValue { get; }
    internal static string ParseError_MarkupBlock_Must_Start_With_Tag { get; }
    internal static string ParseError_MissingCharAfterHelperName { get; }
    internal static string ParseError_MissingCharAfterHelperParameters { get; }
    internal static string ParseError_MissingEndTag { get; }
    internal static string ParseError_MissingOpenBraceAfterSection { get; }
    internal static string ParseError_NamespaceImportAndTypeAlias_Cannot_Exist_Within_CodeBlock { get; }
    internal static string ParseError_NamespaceOrTypeAliasExpected { get; }
    internal static string ParseError_OuterTagMissingName { get; }
    internal static string ParseError_RazorComment_Not_Terminated { get; }
    internal static string ParseError_ReservedWord { get; }
    internal static string ParseError_Sections_Cannot_Be_Nested { get; }
    internal static string ParseError_SingleLine_ControlFlowStatements_Not_Allowed { get; }
    internal static string ParseError_TextTagCannotContainAttributes { get; }
    internal static string ParseError_Unexpected { get; }
    internal static string ParseError_Unexpected_Character_At_Helper_Name_Start { get; }
    internal static string ParseError_Unexpected_Character_At_Section_Name_Start { get; }
    internal static string ParseError_Unexpected_Character_At_Start_Of_CodeBlock_CS { get; }
    internal static string ParseError_Unexpected_Character_At_Start_Of_CodeBlock_VB { get; }
    internal static string ParseError_Unexpected_EndOfFile_At_Start_Of_CodeBlock { get; }
    internal static string ParseError_Unexpected_Keyword_After_At { get; }
    internal static string ParseError_Unexpected_Nested_CodeBlock { get; }
    internal static string ParseError_Unexpected_WhiteSpace_At_Start_Of_CodeBlock_CS { get; }
    internal static string ParseError_Unexpected_WhiteSpace_At_Start_Of_CodeBlock_VB { get; }
    internal static string ParseError_UnexpectedEndTag { get; }
    internal static string ParseError_UnfinishedTag { get; }
    internal static string ParseError_UnknownOption { get; }
    internal static string ParseError_Unterminated_String_Literal { get; }
    internal static string ParseError_UnterminatedHelperParameterList { get; }
    internal static string Parser_Context_Not_Set { get; }
    internal static string ParserContext_CannotCompleteTree_NoRootBlock { get; }
    internal static string ParserContext_CannotCompleteTree_OutstandingBlocks { get; }
    internal static string ParserContext_NoCurrentBlock { get; }
    internal static string ParserContext_ParseComplete { get; }
    internal static string ParserEror_SessionDirectiveMissingValue { get; }
    internal static string ParserIsNotAMarkupParser { get; }
    internal static string SectionExample_CS { get; }
    internal static string SectionExample_VB { get; }
    internal static string Structure_Member_CannotBeNull { get; }
    internal static string Symbol_Unknown { get; }
    internal static string Tokenizer_CannotResumeSymbolUnlessIsPrevious { get; }
    internal static string TokenizerView_CannotPutBack { get; }
    internal static string Trace_BackgroundThreadShutdown { get; }
    internal static string Trace_BackgroundThreadStart { get; }
    internal static string Trace_ChangesArrived { get; }
    internal static string Trace_ChangesDiscarded { get; }
    internal static string Trace_CollectedDiscardedChanges { get; }
    internal static string Trace_Disabled { get; }
    internal static string Trace_EditorProcessedChange { get; }
    internal static string Trace_EditorReceivedChange { get; }
    internal static string Trace_Enabled { get; }
    internal static string Trace_Format { get; }
    internal static string Trace_NoChangesArrived { get; }
    internal static string Trace_ParseComplete { get; }
    internal static string Trace_QueuingParse { get; }
    internal static string Trace_Startup { get; }
    internal static string Trace_TreesCompared { get; }
    internal static string VBSymbol_CharacterLiteral { get; }
    internal static string VBSymbol_Comment { get; }
    internal static string VBSymbol_DateLiteral { get; }
    internal static string VBSymbol_FloatingPointLiteral { get; }
    internal static string VBSymbol_Identifier { get; }
    internal static string VBSymbol_IntegerLiteral { get; }
    internal static string VBSymbol_Keyword { get; }
    internal static string VBSymbol_NewLine { get; }
    internal static string VBSymbol_RazorComment { get; }
    internal static string VBSymbol_StringLiteral { get; }
    internal static string VBSymbol_WhiteSpace { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActiveParser_Must_Be_Code_Or_Markup_Parser();
    internal static string get_Block_Type_Not_Specified();
    internal static string get_BlockName_Code();
    internal static string get_BlockName_ExplicitExpression();
    internal static string get_CancelBacktrack_Must_Be_Called_Within_Lookahead();
    internal static string get_CreateCodeWriter_NoCodeWriter();
    internal static string get_CSharpSymbol_CharacterLiteral();
    internal static string get_CSharpSymbol_Comment();
    internal static string get_CSharpSymbol_Identifier();
    internal static string get_CSharpSymbol_IntegerLiteral();
    internal static string get_CSharpSymbol_Keyword();
    internal static string get_CSharpSymbol_Newline();
    internal static string get_CSharpSymbol_RealLiteral();
    internal static string get_CSharpSymbol_StringLiteral();
    internal static string get_CSharpSymbol_Whitespace();
    internal static string get_EndBlock_Called_Without_Matching_StartBlock();
    internal static string get_ErrorComponent_Character();
    internal static string get_ErrorComponent_EndOfFile();
    internal static string get_ErrorComponent_Newline();
    internal static string get_ErrorComponent_Whitespace();
    internal static string get_HtmlSymbol_NewLine();
    internal static string get_HtmlSymbol_RazorComment();
    internal static string get_HtmlSymbol_Text();
    internal static string get_HtmlSymbol_WhiteSpace();
    internal static string get_Language_Does_Not_Support_RazorComment();
    internal static string get_ParseError_AtInCode_Must_Be_Followed_By_Colon_Paren_Or_Identifier_Start();
    internal static string get_ParseError_BlockComment_Not_Terminated();
    internal static string get_ParseError_BlockNotTerminated();
    internal static string get_ParseError_Expected_CloseBracket_Before_EOF();
    internal static string get_ParseError_Expected_EndOfBlock_Before_EOF();
    internal static string get_ParseError_Expected_X();
    internal static string get_ParseError_Helpers_Cannot_Be_Nested();
    internal static string get_ParseError_InheritsKeyword_Must_Be_Followed_By_TypeName();
    internal static string get_ParseError_InlineMarkup_Blocks_Cannot_Be_Nested();
    internal static string get_ParseError_InvalidOptionValue();
    internal static string get_ParseError_MarkupBlock_Must_Start_With_Tag();
    internal static string get_ParseError_MissingCharAfterHelperName();
    internal static string get_ParseError_MissingCharAfterHelperParameters();
    internal static string get_ParseError_MissingEndTag();
    internal static string get_ParseError_MissingOpenBraceAfterSection();
    internal static string get_ParseError_NamespaceImportAndTypeAlias_Cannot_Exist_Within_CodeBlock();
    internal static string get_ParseError_NamespaceOrTypeAliasExpected();
    internal static string get_ParseError_OuterTagMissingName();
    internal static string get_ParseError_RazorComment_Not_Terminated();
    internal static string get_ParseError_ReservedWord();
    internal static string get_ParseError_Sections_Cannot_Be_Nested();
    internal static string get_ParseError_SingleLine_ControlFlowStatements_Not_Allowed();
    internal static string get_ParseError_TextTagCannotContainAttributes();
    internal static string get_ParseError_Unexpected();
    internal static string get_ParseError_Unexpected_Character_At_Helper_Name_Start();
    internal static string get_ParseError_Unexpected_Character_At_Section_Name_Start();
    internal static string get_ParseError_Unexpected_Character_At_Start_Of_CodeBlock_CS();
    internal static string get_ParseError_Unexpected_Character_At_Start_Of_CodeBlock_VB();
    internal static string get_ParseError_Unexpected_EndOfFile_At_Start_Of_CodeBlock();
    internal static string get_ParseError_Unexpected_Keyword_After_At();
    internal static string get_ParseError_Unexpected_Nested_CodeBlock();
    internal static string get_ParseError_Unexpected_WhiteSpace_At_Start_Of_CodeBlock_CS();
    internal static string get_ParseError_Unexpected_WhiteSpace_At_Start_Of_CodeBlock_VB();
    internal static string get_ParseError_UnexpectedEndTag();
    internal static string get_ParseError_UnfinishedTag();
    internal static string get_ParseError_UnknownOption();
    internal static string get_ParseError_Unterminated_String_Literal();
    internal static string get_ParseError_UnterminatedHelperParameterList();
    internal static string get_Parser_Context_Not_Set();
    internal static string get_ParserContext_CannotCompleteTree_NoRootBlock();
    internal static string get_ParserContext_CannotCompleteTree_OutstandingBlocks();
    internal static string get_ParserContext_NoCurrentBlock();
    internal static string get_ParserContext_ParseComplete();
    internal static string get_ParserEror_SessionDirectiveMissingValue();
    internal static string get_ParserIsNotAMarkupParser();
    internal static string get_SectionExample_CS();
    internal static string get_SectionExample_VB();
    internal static string get_Structure_Member_CannotBeNull();
    internal static string get_Symbol_Unknown();
    internal static string get_Tokenizer_CannotResumeSymbolUnlessIsPrevious();
    internal static string get_TokenizerView_CannotPutBack();
    internal static string get_Trace_BackgroundThreadShutdown();
    internal static string get_Trace_BackgroundThreadStart();
    internal static string get_Trace_ChangesArrived();
    internal static string get_Trace_ChangesDiscarded();
    internal static string get_Trace_CollectedDiscardedChanges();
    internal static string get_Trace_Disabled();
    internal static string get_Trace_EditorProcessedChange();
    internal static string get_Trace_EditorReceivedChange();
    internal static string get_Trace_Enabled();
    internal static string get_Trace_Format();
    internal static string get_Trace_NoChangesArrived();
    internal static string get_Trace_ParseComplete();
    internal static string get_Trace_QueuingParse();
    internal static string get_Trace_Startup();
    internal static string get_Trace_TreesCompared();
    internal static string get_VBSymbol_CharacterLiteral();
    internal static string get_VBSymbol_Comment();
    internal static string get_VBSymbol_DateLiteral();
    internal static string get_VBSymbol_FloatingPointLiteral();
    internal static string get_VBSymbol_Identifier();
    internal static string get_VBSymbol_IntegerLiteral();
    internal static string get_VBSymbol_Keyword();
    internal static string get_VBSymbol_NewLine();
    internal static string get_VBSymbol_RazorComment();
    internal static string get_VBSymbol_StringLiteral();
    internal static string get_VBSymbol_WhiteSpace();
}
public abstract class System.Web.Razor.StateMachine`1 : object {
    [CompilerGeneratedAttribute]
private State<TReturn> <CurrentState>k__BackingField;
    protected State<TReturn> StartState { get; }
    protected State<TReturn> CurrentState { get; protected set; }
    protected abstract virtual State<TReturn> get_StartState();
    [CompilerGeneratedAttribute]
protected State<TReturn> get_CurrentState();
    [CompilerGeneratedAttribute]
protected void set_CurrentState(State<TReturn> value);
    protected virtual TReturn Turn();
    protected StateResult<TReturn> Stop();
    protected StateResult<TReturn> Transition(State<TReturn> newState);
    protected StateResult<TReturn> Transition(TReturn output, State<TReturn> newState);
    protected StateResult<TReturn> Stay();
    protected StateResult<TReturn> Stay(TReturn output);
}
public class System.Web.Razor.Text.BufferingTextReader : LookaheadTextReader {
    private Stack`1<BacktrackContext> _backtrackStack;
    private int _currentBufferPosition;
    private int _currentCharacter;
    private SourceLocationTracker _locationTracker;
    [CompilerGeneratedAttribute]
private StringBuilder <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Buffering>k__BackingField;
    [CompilerGeneratedAttribute]
private TextReader <InnerReader>k__BackingField;
    internal StringBuilder Buffer { get; internal set; }
    internal bool Buffering { get; internal set; }
    internal TextReader InnerReader { get; private set; }
    public SourceLocation CurrentLocation { get; }
    protected int CurrentCharacter { get; }
    public BufferingTextReader(TextReader source);
    [CompilerGeneratedAttribute]
internal StringBuilder get_Buffer();
    [CompilerGeneratedAttribute]
internal void set_Buffer(StringBuilder value);
    [CompilerGeneratedAttribute]
internal bool get_Buffering();
    [CompilerGeneratedAttribute]
internal void set_Buffering(bool value);
    [CompilerGeneratedAttribute]
internal TextReader get_InnerReader();
    [CompilerGeneratedAttribute]
private void set_InnerReader(TextReader value);
    public virtual SourceLocation get_CurrentLocation();
    protected virtual int get_CurrentCharacter();
    public virtual int Read();
    public virtual int Peek();
    protected virtual void Dispose(bool disposing);
    public virtual IDisposable BeginLookahead();
    public virtual void CancelBacktrack();
    private void EndLookahead(BacktrackContext context);
    protected virtual void NextCharacter();
    protected bool ExpandBuffer();
    private void UpdateCurrentCharacter();
}
public interface System.Web.Razor.Text.ITextBuffer {
    public int Length { get; }
    public int Position { get; public set; }
    public abstract virtual int get_Length();
    public abstract virtual int get_Position();
    public abstract virtual void set_Position(int value);
    public abstract virtual int Read();
    public abstract virtual int Peek();
}
public interface System.Web.Razor.Text.ITextDocument {
    public SourceLocation Location { get; }
    public abstract virtual SourceLocation get_Location();
}
internal class System.Web.Razor.Text.LineTrackingStringBuffer : object {
    private TextLine _currentLine;
    private TextLine _endLine;
    private IList`1<TextLine> _lines;
    public int Length { get; }
    public SourceLocation EndLocation { get; }
    public int get_Length();
    public SourceLocation get_EndLocation();
    public void Append(string content);
    public CharacterReference CharAt(int absoluteIndex);
    private void PushNewLine();
    private void AppendCore(char chr);
    private TextLine FindLine(int absoluteIndex);
    private TextLine ScanLines(int absoluteIndex, int startPos);
}
[DebuggerDisplayAttribute("({Location})"{Value}"")]
public class System.Web.Razor.Text.LocationTagged`1 : object {
    [CompilerGeneratedAttribute]
private SourceLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public SourceLocation Location { get; private set; }
    public T Value { get; private set; }
    public LocationTagged`1(T value, int offset, int line, int col);
    public LocationTagged`1(T value, SourceLocation location);
    [CompilerGeneratedAttribute]
public SourceLocation get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(SourceLocation value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(T value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public static T op_Implicit(LocationTagged`1<T> value);
    public static bool op_Equality(LocationTagged`1<T> left, LocationTagged`1<T> right);
    public static bool op_Inequality(LocationTagged`1<T> left, LocationTagged`1<T> right);
}
public abstract class System.Web.Razor.Text.LookaheadTextReader : TextReader {
    public SourceLocation CurrentLocation { get; }
    public abstract virtual SourceLocation get_CurrentLocation();
    public abstract virtual IDisposable BeginLookahead();
    public abstract virtual void CancelBacktrack();
}
public class System.Web.Razor.Text.LookaheadToken : object {
    private Action _cancelAction;
    private bool _accepted;
    public LookaheadToken(Action cancelAction);
    public void Accept();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class System.Web.Razor.Text.SeekableTextReader : TextReader {
    private int _position;
    private LineTrackingStringBuffer _buffer;
    private SourceLocation _location;
    private Nullable`1<char> _current;
    public SourceLocation Location { get; }
    public int Length { get; }
    public int Position { get; public set; }
    internal LineTrackingStringBuffer Buffer { get; }
    public SeekableTextReader(string content);
    public SeekableTextReader(TextReader source);
    public SeekableTextReader(ITextBuffer buffer);
    public sealed virtual SourceLocation get_Location();
    public sealed virtual int get_Length();
    public sealed virtual int get_Position();
    public sealed virtual void set_Position(int value);
    internal LineTrackingStringBuffer get_Buffer();
    public virtual int Read();
    public virtual int Peek();
    private void UpdateState();
}
public class System.Web.Razor.Text.SourceLocation : ValueType {
    public static SourceLocation Undefined;
    public static SourceLocation Zero;
    private int _absoluteIndex;
    private int _lineIndex;
    private int _characterIndex;
    public int AbsoluteIndex { get; }
    public int LineIndex { get; }
    public int CharacterIndex { get; }
    public SourceLocation(int absoluteIndex, int lineIndex, int characterIndex);
    private static SourceLocation();
    public int get_AbsoluteIndex();
    public int get_LineIndex();
    public int get_CharacterIndex();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(SourceLocation other);
    public sealed virtual int CompareTo(SourceLocation other);
    public static SourceLocation Advance(SourceLocation left, string text);
    public static SourceLocation Add(SourceLocation left, SourceLocation right);
    public static SourceLocation Subtract(SourceLocation left, SourceLocation right);
    private static SourceLocation CreateUndefined();
    public static bool op_LessThan(SourceLocation left, SourceLocation right);
    public static bool op_GreaterThan(SourceLocation left, SourceLocation right);
    public static bool op_Equality(SourceLocation left, SourceLocation right);
    public static bool op_Inequality(SourceLocation left, SourceLocation right);
    public static SourceLocation op_Addition(SourceLocation left, SourceLocation right);
    public static SourceLocation op_Subtraction(SourceLocation left, SourceLocation right);
}
public class System.Web.Razor.Text.SourceLocationTracker : object {
    private int _absoluteIndex;
    private int _characterIndex;
    private int _lineIndex;
    private SourceLocation _currentLocation;
    public SourceLocation CurrentLocation { get; public set; }
    public SourceLocationTracker(SourceLocation currentLocation);
    public SourceLocation get_CurrentLocation();
    public void set_CurrentLocation(SourceLocation value);
    public void UpdateLocation(char characterRead, char nextCharacter);
    public SourceLocationTracker UpdateLocation(string content);
    private void UpdateCharacterCore(char characterRead, char nextCharacter);
    private void UpdateInternalState();
    private void RecalculateSourceLocation();
    public static SourceLocation CalculateNewLocation(SourceLocation lastPosition, string newContent);
}
public class System.Web.Razor.Text.TextBufferReader : LookaheadTextReader {
    private Stack`1<BacktrackContext> _bookmarks;
    private SourceLocationTracker _tracker;
    [CompilerGeneratedAttribute]
private ITextBuffer <InnerBuffer>k__BackingField;
    internal ITextBuffer InnerBuffer { get; private set; }
    public SourceLocation CurrentLocation { get; }
    public TextBufferReader(ITextBuffer buffer);
    [CompilerGeneratedAttribute]
internal ITextBuffer get_InnerBuffer();
    [CompilerGeneratedAttribute]
private void set_InnerBuffer(ITextBuffer value);
    public virtual SourceLocation get_CurrentLocation();
    public virtual int Peek();
    public virtual int Read();
    protected virtual void Dispose(bool disposing);
    public virtual IDisposable BeginLookahead();
    public virtual void CancelBacktrack();
    private void EndLookahead(BacktrackContext context);
}
public class System.Web.Razor.Text.TextChange : ValueType {
    private string _newText;
    private string _oldText;
    [CompilerGeneratedAttribute]
private int <OldPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OldLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewLength>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextBuffer <NewBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextBuffer <OldBuffer>k__BackingField;
    public int OldPosition { get; private set; }
    public int NewPosition { get; private set; }
    public int OldLength { get; private set; }
    public int NewLength { get; private set; }
    public ITextBuffer NewBuffer { get; private set; }
    public ITextBuffer OldBuffer { get; private set; }
    public string OldText { get; }
    public string NewText { get; }
    public bool IsInsert { get; }
    public bool IsDelete { get; }
    public bool IsReplace { get; }
    internal TextChange(int position, int oldLength, ITextBuffer oldBuffer, int newLength, ITextBuffer newBuffer);
    public TextChange(int oldPosition, int oldLength, ITextBuffer oldBuffer, int newPosition, int newLength, ITextBuffer newBuffer);
    [CompilerGeneratedAttribute]
public int get_OldPosition();
    [CompilerGeneratedAttribute]
private void set_OldPosition(int value);
    [CompilerGeneratedAttribute]
public int get_NewPosition();
    [CompilerGeneratedAttribute]
private void set_NewPosition(int value);
    [CompilerGeneratedAttribute]
public int get_OldLength();
    [CompilerGeneratedAttribute]
private void set_OldLength(int value);
    [CompilerGeneratedAttribute]
public int get_NewLength();
    [CompilerGeneratedAttribute]
private void set_NewLength(int value);
    [CompilerGeneratedAttribute]
public ITextBuffer get_NewBuffer();
    [CompilerGeneratedAttribute]
private void set_NewBuffer(ITextBuffer value);
    [CompilerGeneratedAttribute]
public ITextBuffer get_OldBuffer();
    [CompilerGeneratedAttribute]
private void set_OldBuffer(ITextBuffer value);
    public string get_OldText();
    public string get_NewText();
    public bool get_IsInsert();
    public bool get_IsDelete();
    public bool get_IsReplace();
    public virtual bool Equals(object obj);
    public string ApplyChange(string content, int changeOffset);
    public string ApplyChange(Span span);
    public virtual int GetHashCode();
    public virtual string ToString();
    public TextChange Normalize();
    private string GetText(ITextBuffer buffer, int position, int length);
    public static bool op_Equality(TextChange left, TextChange right);
    public static bool op_Inequality(TextChange left, TextChange right);
}
public enum System.Web.Razor.Text.TextChangeType : Enum {
    public int value__;
    public static TextChangeType Insert;
    public static TextChangeType Remove;
}
public class System.Web.Razor.Text.TextDocumentReader : TextReader {
    [CompilerGeneratedAttribute]
private ITextDocument <Document>k__BackingField;
    internal ITextDocument Document { get; private set; }
    public SourceLocation Location { get; }
    public int Length { get; }
    public int Position { get; public set; }
    public TextDocumentReader(ITextDocument source);
    [CompilerGeneratedAttribute]
internal ITextDocument get_Document();
    [CompilerGeneratedAttribute]
private void set_Document(ITextDocument value);
    public sealed virtual SourceLocation get_Location();
    public sealed virtual int get_Length();
    public sealed virtual int get_Position();
    public sealed virtual void set_Position(int value);
    public virtual int Read();
    public virtual int Peek();
}
[ExtensionAttribute]
internal static class System.Web.Razor.Text.TextExtensions : object {
    [ExtensionAttribute]
public static void Seek(ITextBuffer self, int characters);
    [ExtensionAttribute]
public static ITextDocument ToDocument(ITextBuffer self);
    [ExtensionAttribute]
public static LookaheadToken BeginLookahead(ITextBuffer self);
    [ExtensionAttribute]
public static string ReadToEnd(ITextBuffer self);
}
public static class System.Web.Razor.Tokenizer.CSharpHelpers : object {
    public static bool IsIdentifierStart(char character);
    public static bool IsIdentifierPart(char character);
    public static bool IsRealLiteralSuffix(char character);
    private static bool IsIdentifierPartByUnicodeCategory(char character);
}
internal static class System.Web.Razor.Tokenizer.CSharpKeywordDetector : object {
    private static Dictionary`2<string, CSharpKeyword> _keywords;
    private static CSharpKeywordDetector();
    public static Nullable`1<CSharpKeyword> SymbolTypeForIdentifier(string id);
}
public class System.Web.Razor.Tokenizer.CSharpTokenizer : Tokenizer`2<CSharpSymbol, CSharpSymbolType> {
    private Dictionary`2<char, Func`1<CSharpSymbolType>> _operatorHandlers;
    [CompilerGeneratedAttribute]
private static Func`1<CSharpSymbolType> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`1<CSharpSymbolType> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`1<CSharpSymbolType> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`1<CSharpSymbolType> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`1<CSharpSymbolType> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`1<CSharpSymbolType> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`1<CSharpSymbolType> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`1<CSharpSymbolType> CS$<>9__CachedAnonymousMethodDelegate20;
    [CompilerGeneratedAttribute]
private static Func`1<CSharpSymbolType> CS$<>9__CachedAnonymousMethodDelegate21;
    [CompilerGeneratedAttribute]
private static Func`1<CSharpSymbolType> CS$<>9__CachedAnonymousMethodDelegate22;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate26;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate32;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate37;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate39;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate3b;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate3d;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate3f;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate41;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate44;
    protected State<CSharpSymbol> StartState { get; }
    public CSharpSymbolType RazorCommentType { get; }
    public CSharpSymbolType RazorCommentTransitionType { get; }
    public CSharpSymbolType RazorCommentStarType { get; }
    public CSharpTokenizer(ITextDocument source);
    protected virtual State<CSharpSymbol> get_StartState();
    public virtual CSharpSymbolType get_RazorCommentType();
    public virtual CSharpSymbolType get_RazorCommentTransitionType();
    public virtual CSharpSymbolType get_RazorCommentStarType();
    protected virtual CSharpSymbol CreateSymbol(SourceLocation start, string content, CSharpSymbolType type, IEnumerable`1<RazorError> errors);
    private StateResult<CSharpSymbol> Data();
    private StateResult<CSharpSymbol> AtSymbol();
    private CSharpSymbolType Operator();
    private CSharpSymbolType LessThanOperator();
    private CSharpSymbolType GreaterThanOperator();
    private CSharpSymbolType MinusOperator();
    private Func`1<CSharpSymbolType> CreateTwoCharOperatorHandler(CSharpSymbolType typeIfOnlyFirst, char second, CSharpSymbolType typeIfBoth);
    private Func`1<CSharpSymbolType> CreateTwoCharOperatorHandler(CSharpSymbolType typeIfOnlyFirst, char option1, CSharpSymbolType typeIfOption1, char option2, CSharpSymbolType typeIfOption2);
    private StateResult<CSharpSymbol> VerbatimStringLiteral();
    private StateResult<CSharpSymbol> QuotedLiteral(char quote, CSharpSymbolType literalType);
    private StateResult<CSharpSymbol> BlockComment();
    private StateResult<CSharpSymbol> SingleLineComment();
    private StateResult<CSharpSymbol> NumericLiteral();
    private StateResult<CSharpSymbol> HexLiteral();
    private StateResult<CSharpSymbol> DecimalLiteral();
    private StateResult<CSharpSymbol> RealLiteralExponentPart();
    private StateResult<CSharpSymbol> RealLiteral();
    private void TakeIntegerSuffix();
    private StateResult<CSharpSymbol> Identifier();
    [CompilerGeneratedAttribute]
private static CSharpSymbolType <.ctor>b__f();
    [CompilerGeneratedAttribute]
private static CSharpSymbolType <.ctor>b__10();
    [CompilerGeneratedAttribute]
private static CSharpSymbolType <.ctor>b__11();
    [CompilerGeneratedAttribute]
private static CSharpSymbolType <.ctor>b__12();
    [CompilerGeneratedAttribute]
private static CSharpSymbolType <.ctor>b__13();
    [CompilerGeneratedAttribute]
private static CSharpSymbolType <.ctor>b__14();
    [CompilerGeneratedAttribute]
private static CSharpSymbolType <.ctor>b__15();
    [CompilerGeneratedAttribute]
private static CSharpSymbolType <.ctor>b__16();
    [CompilerGeneratedAttribute]
private static CSharpSymbolType <.ctor>b__17();
    [CompilerGeneratedAttribute]
private static CSharpSymbolType <.ctor>b__18();
    [CompilerGeneratedAttribute]
private static bool <Data>b__23(char c);
    [CompilerGeneratedAttribute]
private StateResult<CSharpSymbol> <Data>b__24();
    [CompilerGeneratedAttribute]
private StateResult<CSharpSymbol> <Data>b__25();
    [CompilerGeneratedAttribute]
private StateResult<CSharpSymbol> <AtSymbol>b__29();
    [CompilerGeneratedAttribute]
private static bool <VerbatimStringLiteral>b__31(char c);
    [CompilerGeneratedAttribute]
private static bool <BlockComment>b__36(char c);
    [CompilerGeneratedAttribute]
private static bool <SingleLineComment>b__38(char c);
    [CompilerGeneratedAttribute]
private static bool <HexLiteral>b__3a(char c);
    [CompilerGeneratedAttribute]
private static bool <DecimalLiteral>b__3c(char c);
    [CompilerGeneratedAttribute]
private static bool <RealLiteralExponentPart>b__3e(char c);
    [CompilerGeneratedAttribute]
private static bool <RealLiteral>b__40(char c);
    [CompilerGeneratedAttribute]
private static bool <Identifier>b__43(char c);
}
public class System.Web.Razor.Tokenizer.HtmlTokenizer : Tokenizer`2<HtmlSymbol, HtmlSymbolType> {
    private static char TransitionChar;
    protected State<HtmlSymbol> StartState { get; }
    public HtmlSymbolType RazorCommentType { get; }
    public HtmlSymbolType RazorCommentTransitionType { get; }
    public HtmlSymbolType RazorCommentStarType { get; }
    public HtmlTokenizer(ITextDocument source);
    protected virtual State<HtmlSymbol> get_StartState();
    public virtual HtmlSymbolType get_RazorCommentType();
    public virtual HtmlSymbolType get_RazorCommentTransitionType();
    public virtual HtmlSymbolType get_RazorCommentStarType();
    internal static IEnumerable`1<HtmlSymbol> Tokenize(string content);
    protected virtual HtmlSymbol CreateSymbol(SourceLocation start, string content, HtmlSymbolType type, IEnumerable`1<RazorError> errors);
    private StateResult<HtmlSymbol> Data();
    private StateResult<HtmlSymbol> Text();
    private HtmlSymbol Symbol();
    private HtmlSymbol Whitespace();
    private HtmlSymbol Newline();
    private bool AtSymbol();
    [CompilerGeneratedAttribute]
private StateResult<HtmlSymbol> <Data>b__7();
}
public interface System.Web.Razor.Tokenizer.ITokenizer {
    public abstract virtual ISymbol NextSymbol();
}
public enum System.Web.Razor.Tokenizer.Symbols.CSharpKeyword : Enum {
    public int value__;
    public static CSharpKeyword Abstract;
    public static CSharpKeyword Byte;
    public static CSharpKeyword Class;
    public static CSharpKeyword Delegate;
    public static CSharpKeyword Event;
    public static CSharpKeyword Fixed;
    public static CSharpKeyword If;
    public static CSharpKeyword Internal;
    public static CSharpKeyword New;
    public static CSharpKeyword Override;
    public static CSharpKeyword Readonly;
    public static CSharpKeyword Short;
    public static CSharpKeyword Struct;
    public static CSharpKeyword Try;
    public static CSharpKeyword Unsafe;
    public static CSharpKeyword Volatile;
    public static CSharpKeyword As;
    public static CSharpKeyword Do;
    public static CSharpKeyword Is;
    public static CSharpKeyword Params;
    public static CSharpKeyword Ref;
    public static CSharpKeyword Switch;
    public static CSharpKeyword Ushort;
    public static CSharpKeyword While;
    public static CSharpKeyword Case;
    public static CSharpKeyword Const;
    public static CSharpKeyword Explicit;
    public static CSharpKeyword Float;
    public static CSharpKeyword Null;
    public static CSharpKeyword Sizeof;
    public static CSharpKeyword Typeof;
    public static CSharpKeyword Implicit;
    public static CSharpKeyword Private;
    public static CSharpKeyword This;
    public static CSharpKeyword Using;
    public static CSharpKeyword Extern;
    public static CSharpKeyword Return;
    public static CSharpKeyword Stackalloc;
    public static CSharpKeyword Uint;
    public static CSharpKeyword Base;
    public static CSharpKeyword Catch;
    public static CSharpKeyword Continue;
    public static CSharpKeyword Double;
    public static CSharpKeyword For;
    public static CSharpKeyword In;
    public static CSharpKeyword Lock;
    public static CSharpKeyword Object;
    public static CSharpKeyword Protected;
    public static CSharpKeyword Static;
    public static CSharpKeyword False;
    public static CSharpKeyword Public;
    public static CSharpKeyword Sbyte;
    public static CSharpKeyword Throw;
    public static CSharpKeyword Virtual;
    public static CSharpKeyword Decimal;
    public static CSharpKeyword Else;
    public static CSharpKeyword Operator;
    public static CSharpKeyword String;
    public static CSharpKeyword Ulong;
    public static CSharpKeyword Bool;
    public static CSharpKeyword Char;
    public static CSharpKeyword Default;
    public static CSharpKeyword Foreach;
    public static CSharpKeyword Long;
    public static CSharpKeyword Void;
    public static CSharpKeyword Enum;
    public static CSharpKeyword Finally;
    public static CSharpKeyword Int;
    public static CSharpKeyword Out;
    public static CSharpKeyword Sealed;
    public static CSharpKeyword True;
    public static CSharpKeyword Goto;
    public static CSharpKeyword Unchecked;
    public static CSharpKeyword Interface;
    public static CSharpKeyword Break;
    public static CSharpKeyword Checked;
    public static CSharpKeyword Namespace;
}
public class System.Web.Razor.Tokenizer.Symbols.CSharpSymbol : SymbolBase`1<CSharpSymbolType> {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EscapedIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CSharpKeyword> <Keyword>k__BackingField;
    public Nullable`1<bool> EscapedIdentifier { get; public set; }
    public Nullable`1<CSharpKeyword> Keyword { get; public set; }
    public CSharpSymbol(int offset, int line, int column, string content, CSharpSymbolType type);
    public CSharpSymbol(SourceLocation start, string content, CSharpSymbolType type);
    public CSharpSymbol(int offset, int line, int column, string content, CSharpSymbolType type, IEnumerable`1<RazorError> errors);
    public CSharpSymbol(SourceLocation start, string content, CSharpSymbolType type, IEnumerable`1<RazorError> errors);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EscapedIdentifier();
    [CompilerGeneratedAttribute]
public void set_EscapedIdentifier(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CSharpKeyword> get_Keyword();
    [CompilerGeneratedAttribute]
public void set_Keyword(Nullable`1<CSharpKeyword> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum System.Web.Razor.Tokenizer.Symbols.CSharpSymbolType : Enum {
    public int value__;
    public static CSharpSymbolType Unknown;
    public static CSharpSymbolType Identifier;
    public static CSharpSymbolType Keyword;
    public static CSharpSymbolType IntegerLiteral;
    public static CSharpSymbolType NewLine;
    public static CSharpSymbolType WhiteSpace;
    public static CSharpSymbolType Comment;
    public static CSharpSymbolType RealLiteral;
    public static CSharpSymbolType CharacterLiteral;
    public static CSharpSymbolType StringLiteral;
    public static CSharpSymbolType Arrow;
    public static CSharpSymbolType Minus;
    public static CSharpSymbolType Decrement;
    public static CSharpSymbolType MinusAssign;
    public static CSharpSymbolType NotEqual;
    public static CSharpSymbolType Not;
    public static CSharpSymbolType Modulo;
    public static CSharpSymbolType ModuloAssign;
    public static CSharpSymbolType AndAssign;
    public static CSharpSymbolType And;
    public static CSharpSymbolType DoubleAnd;
    public static CSharpSymbolType LeftParenthesis;
    public static CSharpSymbolType RightParenthesis;
    public static CSharpSymbolType Star;
    public static CSharpSymbolType MultiplyAssign;
    public static CSharpSymbolType Comma;
    public static CSharpSymbolType Dot;
    public static CSharpSymbolType Slash;
    public static CSharpSymbolType DivideAssign;
    public static CSharpSymbolType DoubleColon;
    public static CSharpSymbolType Colon;
    public static CSharpSymbolType Semicolon;
    public static CSharpSymbolType QuestionMark;
    public static CSharpSymbolType NullCoalesce;
    public static CSharpSymbolType RightBracket;
    public static CSharpSymbolType LeftBracket;
    public static CSharpSymbolType XorAssign;
    public static CSharpSymbolType Xor;
    public static CSharpSymbolType LeftBrace;
    public static CSharpSymbolType OrAssign;
    public static CSharpSymbolType DoubleOr;
    public static CSharpSymbolType Or;
    public static CSharpSymbolType RightBrace;
    public static CSharpSymbolType Tilde;
    public static CSharpSymbolType Plus;
    public static CSharpSymbolType PlusAssign;
    public static CSharpSymbolType Increment;
    public static CSharpSymbolType LessThan;
    public static CSharpSymbolType LessThanEqual;
    public static CSharpSymbolType LeftShift;
    public static CSharpSymbolType LeftShiftAssign;
    public static CSharpSymbolType Assign;
    public static CSharpSymbolType Equals;
    public static CSharpSymbolType GreaterThan;
    public static CSharpSymbolType GreaterThanEqual;
    public static CSharpSymbolType RightShift;
    public static CSharpSymbolType RightShiftAssign;
    public static CSharpSymbolType Hash;
    public static CSharpSymbolType Transition;
    public static CSharpSymbolType RazorCommentTransition;
    public static CSharpSymbolType RazorCommentStar;
    public static CSharpSymbolType RazorComment;
}
public class System.Web.Razor.Tokenizer.Symbols.HtmlSymbol : SymbolBase`1<HtmlSymbolType> {
    public HtmlSymbol(int offset, int line, int column, string content, HtmlSymbolType type);
    public HtmlSymbol(SourceLocation start, string content, HtmlSymbolType type);
    public HtmlSymbol(int offset, int line, int column, string content, HtmlSymbolType type, IEnumerable`1<RazorError> errors);
    public HtmlSymbol(SourceLocation start, string content, HtmlSymbolType type, IEnumerable`1<RazorError> errors);
}
public enum System.Web.Razor.Tokenizer.Symbols.HtmlSymbolType : Enum {
    public int value__;
    public static HtmlSymbolType Unknown;
    public static HtmlSymbolType Text;
    public static HtmlSymbolType WhiteSpace;
    public static HtmlSymbolType NewLine;
    public static HtmlSymbolType OpenAngle;
    public static HtmlSymbolType Bang;
    public static HtmlSymbolType Solidus;
    public static HtmlSymbolType QuestionMark;
    public static HtmlSymbolType DoubleHyphen;
    public static HtmlSymbolType LeftBracket;
    public static HtmlSymbolType CloseAngle;
    public static HtmlSymbolType RightBracket;
    public static HtmlSymbolType Equals;
    public static HtmlSymbolType DoubleQuote;
    public static HtmlSymbolType SingleQuote;
    public static HtmlSymbolType Transition;
    public static HtmlSymbolType Colon;
    public static HtmlSymbolType RazorComment;
    public static HtmlSymbolType RazorCommentStar;
    public static HtmlSymbolType RazorCommentTransition;
}
public interface System.Web.Razor.Tokenizer.Symbols.ISymbol {
    public SourceLocation Start { get; }
    public string Content { get; }
    public abstract virtual SourceLocation get_Start();
    public abstract virtual string get_Content();
    public abstract virtual void OffsetStart(SourceLocation documentStart);
    public abstract virtual void ChangeStart(SourceLocation newStart);
}
public enum System.Web.Razor.Tokenizer.Symbols.KnownSymbolType : Enum {
    public int value__;
    public static KnownSymbolType WhiteSpace;
    public static KnownSymbolType NewLine;
    public static KnownSymbolType Identifier;
    public static KnownSymbolType Keyword;
    public static KnownSymbolType Transition;
    public static KnownSymbolType Unknown;
    public static KnownSymbolType CommentStart;
    public static KnownSymbolType CommentStar;
    public static KnownSymbolType CommentBody;
}
public abstract class System.Web.Razor.Tokenizer.Symbols.SymbolBase`1 : object {
    [CompilerGeneratedAttribute]
private SourceLocation <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<RazorError> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private TType <Type>k__BackingField;
    public SourceLocation Start { get; private set; }
    public string Content { get; private set; }
    public IEnumerable`1<RazorError> Errors { get; private set; }
    public TType Type { get; private set; }
    protected SymbolBase`1(SourceLocation start, string content, TType type, IEnumerable`1<RazorError> errors);
    [CompilerGeneratedAttribute]
public sealed virtual SourceLocation get_Start();
    [CompilerGeneratedAttribute]
private void set_Start(SourceLocation value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<RazorError> get_Errors();
    [CompilerGeneratedAttribute]
private void set_Errors(IEnumerable`1<RazorError> value);
    [CompilerGeneratedAttribute]
public TType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(TType value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual void OffsetStart(SourceLocation documentStart);
    public sealed virtual void ChangeStart(SourceLocation newStart);
}
[ExtensionAttribute]
public static class System.Web.Razor.Tokenizer.Symbols.SymbolExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<ISymbol>, IEnumerable`1<ISymbol>> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ISymbol, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [ExtensionAttribute]
public static LocationTagged`1<string> GetContent(SpanBuilder span);
    [ExtensionAttribute]
public static LocationTagged`1<string> GetContent(SpanBuilder span, Func`2<IEnumerable`1<ISymbol>, IEnumerable`1<ISymbol>> filter);
    [ExtensionAttribute]
public static LocationTagged`1<string> GetContent(IEnumerable`1<ISymbol> symbols, SourceLocation spanStart);
    [ExtensionAttribute]
public static LocationTagged`1<string> GetContent(ISymbol symbol);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ISymbol> <GetContent>b__0(IEnumerable`1<ISymbol> e);
    [CompilerGeneratedAttribute]
private static string <GetContent>b__2(ISymbol s);
}
public enum System.Web.Razor.Tokenizer.Symbols.VBKeyword : Enum {
    public int value__;
    public static VBKeyword AddHandler;
    public static VBKeyword AndAlso;
    public static VBKeyword Byte;
    public static VBKeyword Catch;
    public static VBKeyword CDate;
    public static VBKeyword CInt;
    public static VBKeyword Const;
    public static VBKeyword CSng;
    public static VBKeyword CULng;
    public static VBKeyword Declare;
    public static VBKeyword DirectCast;
    public static VBKeyword Else;
    public static VBKeyword Enum;
    public static VBKeyword Exit;
    public static VBKeyword Friend;
    public static VBKeyword GetXmlNamespace;
    public static VBKeyword Handles;
    public static VBKeyword In;
    public static VBKeyword Is;
    public static VBKeyword Like;
    public static VBKeyword Mod;
    public static VBKeyword MyBase;
    public static VBKeyword New;
    public static VBKeyword AddressOf;
    public static VBKeyword As;
    public static VBKeyword ByVal;
    public static VBKeyword CBool;
    public static VBKeyword CDbl;
    public static VBKeyword Class;
    public static VBKeyword Continue;
    public static VBKeyword CStr;
    public static VBKeyword CUShort;
    public static VBKeyword Default;
    public static VBKeyword Do;
    public static VBKeyword ElseIf;
    public static VBKeyword Erase;
    public static VBKeyword False;
    public static VBKeyword Function;
    public static VBKeyword Global;
    public static VBKeyword If;
    public static VBKeyword Inherits;
    public static VBKeyword IsNot;
    public static VBKeyword Long;
    public static VBKeyword Module;
    public static VBKeyword MyClass;
    public static VBKeyword Next;
    public static VBKeyword Alias;
    public static VBKeyword Boolean;
    public static VBKeyword Call;
    public static VBKeyword CByte;
    public static VBKeyword CDec;
    public static VBKeyword CLng;
    public static VBKeyword CSByte;
    public static VBKeyword CType;
    public static VBKeyword Date;
    public static VBKeyword Delegate;
    public static VBKeyword Double;
    public static VBKeyword End;
    public static VBKeyword Error;
    public static VBKeyword Finally;
    public static VBKeyword Get;
    public static VBKeyword GoSub;
    public static VBKeyword Implements;
    public static VBKeyword Integer;
    public static VBKeyword Let;
    public static VBKeyword Loop;
    public static VBKeyword MustInherit;
    public static VBKeyword Namespace;
    public static VBKeyword Not;
    public static VBKeyword And;
    public static VBKeyword ByRef;
    public static VBKeyword Case;
    public static VBKeyword CChar;
    public static VBKeyword Char;
    public static VBKeyword CObj;
    public static VBKeyword CShort;
    public static VBKeyword CUInt;
    public static VBKeyword Decimal;
    public static VBKeyword Dim;
    public static VBKeyword Each;
    public static VBKeyword EndIf;
    public static VBKeyword Event;
    public static VBKeyword For;
    public static VBKeyword GetType;
    public static VBKeyword GoTo;
    public static VBKeyword Imports;
    public static VBKeyword Interface;
    public static VBKeyword Lib;
    public static VBKeyword Me;
    public static VBKeyword MustOverride;
    public static VBKeyword Narrowing;
    public static VBKeyword Nothing;
    public static VBKeyword NotInheritable;
    public static VBKeyword On;
    public static VBKeyword Or;
    public static VBKeyword Overrides;
    public static VBKeyword Property;
    public static VBKeyword ReadOnly;
    public static VBKeyword Resume;
    public static VBKeyword Set;
    public static VBKeyword Single;
    public static VBKeyword String;
    public static VBKeyword Then;
    public static VBKeyword Try;
    public static VBKeyword ULong;
    public static VBKeyword Wend;
    public static VBKeyword With;
    public static VBKeyword NotOverridable;
    public static VBKeyword Operator;
    public static VBKeyword OrElse;
    public static VBKeyword ParamArray;
    public static VBKeyword Protected;
    public static VBKeyword ReDim;
    public static VBKeyword Return;
    public static VBKeyword Shadows;
    public static VBKeyword Static;
    public static VBKeyword Structure;
    public static VBKeyword Throw;
    public static VBKeyword TryCast;
    public static VBKeyword UShort;
    public static VBKeyword When;
    public static VBKeyword WithEvents;
    public static VBKeyword Object;
    public static VBKeyword Option;
    public static VBKeyword Overloads;
    public static VBKeyword Partial;
    public static VBKeyword Public;
    public static VBKeyword Rem;
    public static VBKeyword SByte;
    public static VBKeyword Shared;
    public static VBKeyword Step;
    public static VBKeyword Sub;
    public static VBKeyword To;
    public static VBKeyword TypeOf;
    public static VBKeyword Using;
    public static VBKeyword While;
    public static VBKeyword WriteOnly;
    public static VBKeyword Of;
    public static VBKeyword Optional;
    public static VBKeyword Overridable;
    public static VBKeyword Private;
    public static VBKeyword RaiseEvent;
    public static VBKeyword RemoveHandler;
    public static VBKeyword Select;
    public static VBKeyword Short;
    public static VBKeyword Stop;
    public static VBKeyword SyncLock;
    public static VBKeyword True;
    public static VBKeyword UInteger;
    public static VBKeyword Variant;
    public static VBKeyword Widening;
    public static VBKeyword Xor;
}
public class System.Web.Razor.Tokenizer.Symbols.VBSymbol : SymbolBase`1<VBSymbolType> {
    private static Dictionary`2<VBSymbolType, string> _symbolSamples;
    [CompilerGeneratedAttribute]
private Nullable`1<VBKeyword> <Keyword>k__BackingField;
    public Nullable`1<VBKeyword> Keyword { get; public set; }
    public VBSymbol(int offset, int line, int column, string content, VBSymbolType type);
    public VBSymbol(SourceLocation start, string content, VBSymbolType type);
    public VBSymbol(int offset, int line, int column, string content, VBSymbolType type, IEnumerable`1<RazorError> errors);
    public VBSymbol(SourceLocation start, string content, VBSymbolType type, IEnumerable`1<RazorError> errors);
    private static VBSymbol();
    [CompilerGeneratedAttribute]
public Nullable`1<VBKeyword> get_Keyword();
    [CompilerGeneratedAttribute]
public void set_Keyword(Nullable`1<VBKeyword> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static string GetSample(VBSymbolType type);
}
public enum System.Web.Razor.Tokenizer.Symbols.VBSymbolType : Enum {
    public int value__;
    public static VBSymbolType Unknown;
    public static VBSymbolType WhiteSpace;
    public static VBSymbolType NewLine;
    public static VBSymbolType LineContinuation;
    public static VBSymbolType Comment;
    public static VBSymbolType Identifier;
    public static VBSymbolType Keyword;
    public static VBSymbolType IntegerLiteral;
    public static VBSymbolType FloatingPointLiteral;
    public static VBSymbolType StringLiteral;
    public static VBSymbolType CharacterLiteral;
    public static VBSymbolType DateLiteral;
    public static VBSymbolType LeftParenthesis;
    public static VBSymbolType RightBrace;
    public static VBSymbolType LeftBrace;
    public static VBSymbolType RightParenthesis;
    public static VBSymbolType Hash;
    public static VBSymbolType Bang;
    public static VBSymbolType Comma;
    public static VBSymbolType Dot;
    public static VBSymbolType Colon;
    public static VBSymbolType Concatenation;
    public static VBSymbolType QuestionMark;
    public static VBSymbolType Subtract;
    public static VBSymbolType Multiply;
    public static VBSymbolType Add;
    public static VBSymbolType Divide;
    public static VBSymbolType IntegerDivide;
    public static VBSymbolType Exponentiation;
    public static VBSymbolType LessThan;
    public static VBSymbolType GreaterThan;
    public static VBSymbolType Equal;
    public static VBSymbolType RightBracket;
    public static VBSymbolType LeftBracket;
    public static VBSymbolType Dollar;
    public static VBSymbolType Transition;
    public static VBSymbolType RazorCommentTransition;
    public static VBSymbolType RazorCommentStar;
    public static VBSymbolType RazorComment;
}
public abstract class System.Web.Razor.Tokenizer.Tokenizer`2 : StateMachine`1<TSymbol> {
    [CompilerGeneratedAttribute]
private TextDocumentReader <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private StringBuilder <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<RazorError> <CurrentErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLocation <CurrentStart>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<char, char> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<char, char> CS$<>9__CachedAnonymousMethodDelegated;
    public TextDocumentReader Source { get; private set; }
    protected StringBuilder Buffer { get; private set; }
    protected bool EndOfFile { get; }
    protected IList`1<RazorError> CurrentErrors { get; private set; }
    public TSymbolType RazorCommentStarType { get; }
    public TSymbolType RazorCommentType { get; }
    public TSymbolType RazorCommentTransitionType { get; }
    protected bool HaveContent { get; }
    protected char CurrentCharacter { get; }
    protected SourceLocation CurrentLocation { get; }
    protected SourceLocation CurrentStart { get; private set; }
    protected Tokenizer`2(ITextDocument source);
    [CompilerGeneratedAttribute]
public TextDocumentReader get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(TextDocumentReader value);
    [CompilerGeneratedAttribute]
protected StringBuilder get_Buffer();
    [CompilerGeneratedAttribute]
private void set_Buffer(StringBuilder value);
    protected bool get_EndOfFile();
    [CompilerGeneratedAttribute]
protected IList`1<RazorError> get_CurrentErrors();
    [CompilerGeneratedAttribute]
private void set_CurrentErrors(IList`1<RazorError> value);
    public abstract virtual TSymbolType get_RazorCommentStarType();
    public abstract virtual TSymbolType get_RazorCommentType();
    public abstract virtual TSymbolType get_RazorCommentTransitionType();
    protected bool get_HaveContent();
    protected char get_CurrentCharacter();
    protected SourceLocation get_CurrentLocation();
    [CompilerGeneratedAttribute]
protected SourceLocation get_CurrentStart();
    [CompilerGeneratedAttribute]
private void set_CurrentStart(SourceLocation value);
    public virtual TSymbol NextSymbol();
    public void Reset();
    protected abstract virtual TSymbol CreateSymbol(SourceLocation start, string content, TSymbolType type, IEnumerable`1<RazorError> errors);
    protected TSymbol Single(TSymbolType type);
    protected bool TakeString(string input, bool caseSensitive);
    protected void StartSymbol();
    protected TSymbol EndSymbol(TSymbolType type);
    protected TSymbol EndSymbol(SourceLocation start, TSymbolType type);
    protected void ResumeSymbol(TSymbol previous);
    protected bool TakeUntil(Func`2<char, bool> predicate);
    protected Func`2<char, bool> CharOrWhiteSpace(char character);
    protected void TakeCurrent();
    protected void MoveNext();
    protected bool TakeAll(string expected, bool caseSensitive);
    protected bool At(string expected, bool caseSensitive);
    protected char Peek();
    protected StateResult<TSymbol> AfterRazorCommentTransition();
    protected StateResult<TSymbol> RazorCommentBody();
    private bool Lookahead(string expected, bool takeIfMatch, bool caseSensitive);
    [ConditionalAttribute("DEBUG")]
internal void AssertCurrent(char current);
    private sealed virtual override ISymbol System.Web.Razor.Tokenizer.ITokenizer.NextSymbol();
    [CompilerGeneratedAttribute]
private static char <TakeString>b__0(char c);
    [CompilerGeneratedAttribute]
private static bool <RazorCommentBody>b__5(char c);
    [CompilerGeneratedAttribute]
private static char <Lookahead>b__c(char c);
}
public class System.Web.Razor.Tokenizer.TokenizerView`3 : object {
    [CompilerGeneratedAttribute]
private TTokenizer <Tokenizer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EndOfFile>k__BackingField;
    [CompilerGeneratedAttribute]
private TSymbol <Current>k__BackingField;
    public TTokenizer Tokenizer { get; private set; }
    public bool EndOfFile { get; private set; }
    public TSymbol Current { get; private set; }
    public ITextDocument Source { get; }
    public TokenizerView`3(TTokenizer tokenizer);
    [CompilerGeneratedAttribute]
public TTokenizer get_Tokenizer();
    [CompilerGeneratedAttribute]
private void set_Tokenizer(TTokenizer value);
    [CompilerGeneratedAttribute]
public bool get_EndOfFile();
    [CompilerGeneratedAttribute]
private void set_EndOfFile(bool value);
    [CompilerGeneratedAttribute]
public TSymbol get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(TSymbol value);
    public ITextDocument get_Source();
    public bool Next();
    public void PutBack(TSymbol symbol);
}
public static class System.Web.Razor.Tokenizer.VBHelpers : object {
    public static bool IsSingleQuote(char character);
    public static bool IsDoubleQuote(char character);
    public static bool IsOctalDigit(char character);
}
internal static class System.Web.Razor.Tokenizer.VBKeywordDetector : object {
    private static Dictionary`2<string, VBKeyword> _keywords;
    private static VBKeywordDetector();
    public static Nullable`1<VBKeyword> GetKeyword(string id);
}
public class System.Web.Razor.Tokenizer.VBTokenizer : Tokenizer`2<VBSymbol, VBSymbolType> {
    private static Dictionary`2<char, VBSymbolType> _operatorTable;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate1b;
    protected State<VBSymbol> StartState { get; }
    public VBSymbolType RazorCommentType { get; }
    public VBSymbolType RazorCommentTransitionType { get; }
    public VBSymbolType RazorCommentStarType { get; }
    public VBTokenizer(ITextDocument source);
    private static VBTokenizer();
    protected virtual State<VBSymbol> get_StartState();
    public virtual VBSymbolType get_RazorCommentType();
    public virtual VBSymbolType get_RazorCommentTransitionType();
    public virtual VBSymbolType get_RazorCommentStarType();
    internal static IEnumerable`1<VBSymbol> Tokenize(string content);
    protected virtual VBSymbol CreateSymbol(SourceLocation start, string content, VBSymbolType type, IEnumerable`1<RazorError> errors);
    private StateResult<VBSymbol> Data();
    private StateResult<VBSymbol> DateLiteral();
    private bool AtDateLiteral();
    private StateResult<VBSymbol> QuotedLiteral();
    private StateResult<VBSymbol> DecimalLiteral();
    private static bool IsFloatTypeSuffix(char chr);
    private StateResult<VBSymbol> FloatingPointLiteralEnd();
    private StateResult<VBSymbol> HexLiteral();
    private StateResult<VBSymbol> OctLiteral();
    private VBSymbolType Operator();
    private void TakeIntTypeSuffix();
    private static bool IsIntegerSuffix(char chr);
    private StateResult<VBSymbol> CommentBody();
    private StateResult<VBSymbol> Identifier();
    private bool IsIdentifierStart();
    [CompilerGeneratedAttribute]
private static bool <Data>b__7(char c);
    [CompilerGeneratedAttribute]
private StateResult<VBSymbol> <Data>b__8();
    [CompilerGeneratedAttribute]
private static bool <DateLiteral>b__b(char c);
    [CompilerGeneratedAttribute]
private static bool <QuotedLiteral>b__d(char c);
    [CompilerGeneratedAttribute]
private static bool <DecimalLiteral>b__f(char c);
    [CompilerGeneratedAttribute]
private static bool <FloatingPointLiteralEnd>b__11(char c);
    [CompilerGeneratedAttribute]
private static bool <FloatingPointLiteralEnd>b__12(char c);
    [CompilerGeneratedAttribute]
private static bool <HexLiteral>b__15(char c);
    [CompilerGeneratedAttribute]
private static bool <OctLiteral>b__17(char c);
    [CompilerGeneratedAttribute]
private static bool <Identifier>b__1a(char c);
}
internal static class System.Web.Razor.Tokenizer.XmlHelpers : object {
    public static bool IsXmlNameStartChar(char chr);
    public static bool IsXmlNameChar(char chr);
    public static bool IsInRange(char chr, int low, int high);
}
internal static class System.Web.Razor.Utils.CharUtils : object {
    internal static bool IsNonNewLineWhitespace(char c);
    internal static bool IsNewLine(char c);
}
internal class System.Web.Razor.Utils.DisposableAction : object {
    private Action _action;
    public DisposableAction(Action action);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
internal static class System.Web.Razor.Utils.EnumeratorExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> Flatten(IEnumerable`1<IEnumerable`1<T>> source);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<T> <Flatten>b__0(IEnumerable`1<T> e);
}
internal static class System.Web.Razor.Utils.EnumUtil : object {
    public static IEnumerable`1<T> Single(T item);
    public static IEnumerable`1<T> Prepend(T item, IEnumerable`1<T> enumerable);
}
public class System.Web.Razor.VBRazorCodeLanguage : RazorCodeLanguage {
    private static string VBLanguageName;
    public string LanguageName { get; }
    public Type CodeDomProviderType { get; }
    public virtual string get_LanguageName();
    public virtual Type get_CodeDomProviderType();
    public virtual ParserBase CreateCodeParser();
    public virtual RazorCodeGenerator CreateCodeGenerator(string className, string rootNamespaceName, string sourceFileName, RazorEngineHost host);
}
