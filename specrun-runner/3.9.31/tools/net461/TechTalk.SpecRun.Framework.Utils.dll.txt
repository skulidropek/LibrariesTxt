public static class TechTalk.SpecRun.Framework.AssemblyResolver : object {
    internal static void Hook(String[] folders);
    private static bool IsGeneratedXmlSerializersFile(string assemblyName);
    private static bool IsResourcesFile(string assemblyName);
    private static bool IsNoDotNetAssemblyFile(string assemblyName);
    private static string GetAssemblyFileOrDefault(string directory, AssemblyName assemblyName);
    private static bool IsDemandedAssemblyFile(AssemblyName assemblyName, string file);
}
public static class TechTalk.SpecRun.Framework.Constants : object {
    public static string Version;
}
public class TechTalk.SpecRun.Framework.CurrentExecutionModelSettings : object {
    private IEnvironment _environment;
    public CurrentExecutionModelSettings(IEnvironment environment);
    public sealed virtual ExecutionModelSettings GetCurrent();
}
public static class TechTalk.SpecRun.Framework.DebuggerUtils : object {
    public static bool WaitForDebuggerToAttach();
}
public class TechTalk.SpecRun.Framework.Execution.ExecutorMainLoopMutex : object {
    private AutoResetEvent _appCloseEvent;
    public void BlockAtMutex();
    public void ReleaseMutex();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(object sender, ConsoleCancelEventArgs eventArgs);
}
public class TechTalk.SpecRun.Framework.Execution.InProcess.InProcAppDomainTestAssemblyExecutorHost : object {
    private IAppDomainManager _appDomainManager;
    private ILoadedAssemblyReference _appDomainRef;
    private ITestAssemblyExecutor _executor;
    private RemotableTestExecutionManagerHost _executionManagerHost;
    private RemotableLoggerHost _loggerHost;
    public InProcAppDomainTestAssemblyExecutorHost(IAppDomainManager appDomainManager);
    public virtual void Initialize(int threadId, ITestExecutionManager executionManager, IAssemblyReference testAssembly, ITestLogger logger, string testAssemblyFullPath, string testAssemblyConfigFilePath, TestExecutionConfiguration testExecutionConfiguration, string target);
    public virtual TestThreadState RunTests(TestThreadState testThreadState);
    public sealed virtual void DeInitialize();
    public virtual void Dispose();
}
public class TechTalk.SpecRun.Framework.Execution.OutOfProcess.ExecutorProcessStartInfo : object {
    [CompilerGeneratedAttribute]
private ClrVersion <ClrVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <CallbackPort>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <LoggerPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpecRunUniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuGetProbingDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDebugMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResolveExecutorFullPath>k__BackingField;
    public ClrVersion ClrVersion { get; public set; }
    public Platform Platform { get; public set; }
    public ushort CallbackPort { get; public set; }
    public ushort LoggerPort { get; public set; }
    public string SpecRunUniqueId { get; public set; }
    public string NuGetProbingDirectories { get; public set; }
    public string WorkingDirectory { get; public set; }
    public bool IsDebugMode { get; public set; }
    public bool ResolveExecutorFullPath { get; public set; }
    [CompilerGeneratedAttribute]
public ClrVersion get_ClrVersion();
    [CompilerGeneratedAttribute]
public void set_ClrVersion(ClrVersion value);
    [CompilerGeneratedAttribute]
public Platform get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(Platform value);
    [CompilerGeneratedAttribute]
public ushort get_CallbackPort();
    [CompilerGeneratedAttribute]
public void set_CallbackPort(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_LoggerPort();
    [CompilerGeneratedAttribute]
public void set_LoggerPort(ushort value);
    [CompilerGeneratedAttribute]
public string get_SpecRunUniqueId();
    [CompilerGeneratedAttribute]
public void set_SpecRunUniqueId(string value);
    [CompilerGeneratedAttribute]
public string get_NuGetProbingDirectories();
    [CompilerGeneratedAttribute]
public void set_NuGetProbingDirectories(string value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDebugMode();
    [CompilerGeneratedAttribute]
public void set_IsDebugMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_ResolveExecutorFullPath();
    [CompilerGeneratedAttribute]
public void set_ResolveExecutorFullPath(bool value);
}
public class TechTalk.SpecRun.Framework.Execution.OutOfProcess.ExternalExecutorPortInfo : object {
    [CompilerGeneratedAttribute]
private ushort <LoggerPort>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <CallbackPort>k__BackingField;
    public ushort LoggerPort { get; }
    public ushort CallbackPort { get; }
    public ExternalExecutorPortInfo(ushort loggerPort, ushort callbackPort);
    [CompilerGeneratedAttribute]
public ushort get_LoggerPort();
    [CompilerGeneratedAttribute]
public ushort get_CallbackPort();
}
public interface TechTalk.SpecRun.Framework.Execution.OutOfProcess.IClientFactory {
    public abstract virtual IRpcClient CreateClientToOutOfProcessExecutor(ushort serverPort, Action`1<string> logAction);
    public abstract virtual IRpcClient CreateCallbackClient(ushort serverPort, Action`1<string> logAction);
    public abstract virtual IRpcClient CreateLoggerClient(ushort serverPort, Action`1<string> logAction);
}
public interface TechTalk.SpecRun.Framework.Execution.OutOfProcess.IRunnerPortInfoProvider {
    public ushort CallbackPort { get; }
    public ushort LoggerPort { get; }
    public abstract virtual ushort get_CallbackPort();
    public abstract virtual ushort get_LoggerPort();
}
public interface TechTalk.SpecRun.Framework.Execution.OutOfProcess.IServerFactory {
    public abstract virtual IRpcServer CreateLoggerServer(ITestLogger currentLogger, UInt16& port);
    public abstract virtual IRpcServer CreateCallbackServer(IOutOfProcessTestAssemblyExecutorCallback outOfProcessTestAssemblyExecutorCallback, UInt16& port);
    public abstract virtual IRpcServer CreateExecutorServer(OutOfProcessTestAssemblyExecutorReceiver outOfProcessTestAssemblyExecutorReceiver, UInt16& serverPort);
}
public class TechTalk.SpecRun.Framework.Execution.OutOfProcess.OutOfProcessLoggerClient : TestLogger {
    private IRpcClient _rpcClient;
    public OutOfProcessLoggerClient(IRpcClient rpcClient, ITimeService timeService);
    public virtual void LogInternal(string message);
}
public class TechTalk.SpecRun.Framework.Execution.OutOfProcess.OutOfProcessLoggerReceiver : object {
    private ITestLogger _testLogger;
    public OutOfProcessLoggerReceiver(ITestLogger testLogger);
    public sealed virtual void Log(string message);
}
public class TechTalk.SpecRun.Framework.Execution.OutOfProcess.OutOfProcessTestAssemblyExecutor : object {
    private ITestExecutionManager _executionManager;
    private ITestLogger _logger;
    private ITestAssemblyExecutorFactory _testAssemblyExecutorFactory;
    private IThreadFactory _threadFactory;
    private ExecutorMainLoopMutex _executorMainLoopMutex;
    private ApartmentState _apartmentStateForRun;
    private ITestAssemblyExecutor _outProcExecutor;
    private bool _isDisposed;
    public OutOfProcessTestAssemblyExecutor(ITestExecutionManager executionManager, ITestLogger logger, ITestAssemblyExecutorFactory testAssemblyExecutorFactory, IThreadFactory threadFactory, ExecutorMainLoopMutex executorMainLoopMutex);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Initialize(int threadId, RemoteAssemblyReference assemblyReference, string testAssemblyFullPath, string testAssemblyConfigFilePath, ApartmentState apartmentState, TestExecutionConfiguration testExecutionConfiguration, string target);
    public sealed virtual TestThreadState RunTests(TestThreadState testThreadState);
    public sealed virtual void DeInitialize();
    protected virtual ITestAssemblyExecutor CreateTestAssemblyExecutor(ITestLogger logger, string testAssemblyFullPath);
}
public class TechTalk.SpecRun.Framework.Execution.OutOfProcess.OutOfProcessTestAssemblyExecutorCallback : object {
    private ITestExecutionManager _executionManager;
    private Action`1<ushort> _executorPortReceivedCallback;
    public OutOfProcessTestAssemblyExecutorCallback(ITestExecutionManager executionManager, Action`1<ushort> executorPortReceivedCallback);
    public sealed virtual TestExecutionId GetNextTest(int threadId);
    public sealed virtual TestSuite GetTestSuite();
    public sealed virtual void PostExecutorPort(ushort port);
    public sealed virtual void RegisterTestItemStart(TestExecutionId testExecutionId, int threadId);
    public sealed virtual void RegisterTestItemPreliminaryResult(TestExecutionId testExecutionId, int threadId, TestNodeResultType preliminaryTestResult);
    public sealed virtual void RegisterThreadStart(int threadId, string machineName);
    public sealed virtual void RegisterTestItemResult(TestExecutionId testExecutionId, TestNodeResult testNodeResult);
    public sealed virtual void RegisterThreadFinish(int threadId);
    public sealed virtual void ThreadCancelled(int threadId);
    public sealed virtual bool GetIsCancelled();
    public void Dispose();
}
public class TechTalk.SpecRun.Framework.Execution.OutOfProcess.OutOfProcessTestAssemblyExecutorCallbackClient : object {
    private IRpcClient _rpcClient;
    public OutOfProcessTestAssemblyExecutorCallbackClient(IRpcClient rpcClient);
    public void Log(string message);
    public sealed virtual TestExecutionId GetNextTest(int threadId);
    public sealed virtual TestSuite GetTestSuite();
    public sealed virtual void PostExecutorPort(ushort port);
    public sealed virtual void RegisterTestItemStart(TestExecutionId testExecutionId, int threadId);
    public sealed virtual void RegisterTestItemPreliminaryResult(TestExecutionId testExecutionId, int threadId, TestNodeResultType preliminaryTestResult);
    public sealed virtual void RegisterTestItemResult(TestExecutionId testExecutionId, TestNodeResult testNodeResult);
    public sealed virtual void RegisterThreadStart(int threadId, string machineName);
    public sealed virtual void RegisterThreadFinish(int threadId);
    public sealed virtual void ThreadCancelled(int threadId);
    public sealed virtual bool GetIsCancelled();
    [CompilerGeneratedAttribute]
private Task`1<TestSuite> <GetTestSuite>b__4_0();
    [CompilerGeneratedAttribute]
private Task`1<bool> <GetIsCancelled>b__12_0();
}
public class TechTalk.SpecRun.Framework.Execution.OutOfProcess.OutOfProcessTestAssemblyExecutorReceiver : object {
    private OutOfProcessTestAssemblyExecutor _outOfProcessTestAssemblyExecutor;
    private OutOfProcessLoggerClient _outOfProcessLoggerClient;
    private ITestAssemblyExecutorFactory _testAssemblyExecutorFactory;
    private IThreadFactory _threadFactory;
    private TestAssemblyExecutorCallbackSink _callbackSink;
    private ExecutorMainLoopMutex _executorMainLoopMutex;
    public OutOfProcessTestAssemblyExecutorReceiver(OutOfProcessLoggerClient outOfProcessLoggerClient, ITestAssemblyExecutorFactory testAssemblyExecutorFactory, IThreadFactory threadFactory, TestAssemblyExecutorCallbackSink callbackSink, ExecutorMainLoopMutex executorMainLoopMutex);
    public sealed virtual void Initialize(int threadId, RemoteAssemblyReference assemblyReference, string testAssemblyFullPath, string testAssemblyConfigFilePath, ApartmentState apartmentState, TestExecutionConfiguration testExecutionConfiguration, string target);
    public sealed virtual TestThreadState RunTests(TestThreadState testThreadState);
    public sealed virtual void DeInitialize();
    public sealed virtual void Dispose();
}
public class TechTalk.SpecRun.Framework.Execution.OutOfProcess.TcpClientFactory : object {
    private IRpcClientFactory _rpcClientFactory;
    public TcpClientFactory(IRpcClientFactory rpcClientFactory);
    public sealed virtual IRpcClient CreateClientToOutOfProcessExecutor(ushort serverPort, Action`1<string> logAction);
    public sealed virtual IRpcClient CreateCallbackClient(ushort serverPort, Action`1<string> logAction);
    public sealed virtual IRpcClient CreateLoggerClient(ushort serverPort, Action`1<string> logAction);
}
public class TechTalk.SpecRun.Framework.Execution.OutOfProcess.TcpServerFactory : object {
    private static ushort MinPortToSearch;
    private static ushort MaxPortToSearch;
    private static int Retries;
    private IRpcServerFactory _rpcServerFactory;
    private IPortFinder _portFinder;
    private ITestLogger _testLogger;
    public TcpServerFactory(IRpcServerFactory rpcServerFactory, IPortFinder portFinder, ITestLogger testLogger);
    public ushort GetFirstFreePort();
    public IResult`1<TResult> UntilSuccessOrRetryLimit(Func`1<IResult`1<TResult>> func, int retries);
    public IResult`1<IRpcServer> TryCreateTcpRpcServerFor(object target, Action`1<string> logAction, UInt16& port);
    public sealed virtual IRpcServer CreateLoggerServer(ITestLogger currentLogger, UInt16& port);
    public sealed virtual IRpcServer CreateCallbackServer(IOutOfProcessTestAssemblyExecutorCallback outOfProcessTestAssemblyExecutorCallback, UInt16& port);
    public sealed virtual IRpcServer CreateExecutorServer(OutOfProcessTestAssemblyExecutorReceiver outOfProcessTestAssemblyExecutorReceiver, UInt16& serverPort);
}
public interface TechTalk.SpecRun.Framework.Execution.SharedAppDomain.ISharedAppDomainHolder {
    public abstract virtual ILoadedAssemblyReference GetAppDomain(IAppDomainManager appDomainManager, string testAssemblyFullPath, string testAsseblyConfigFilePath);
    public abstract virtual void ReleaseAppDomainForThread();
    public abstract virtual void ReleaseAppDomain();
}
public class TechTalk.SpecRun.Framework.Execution.SharedAppDomain.SharedAppDomainHolder : object {
    private ILoadedAssemblyReference _appDomainRef;
    private object _appDomainLock;
    private int _refCount;
    public sealed virtual ILoadedAssemblyReference GetAppDomain(IAppDomainManager appDomainManager, string testAssemblyFullPath, string testAsseblyConfigFilePath);
    public sealed virtual void ReleaseAppDomainForThread();
    public sealed virtual void ReleaseAppDomain();
}
public class TechTalk.SpecRun.Framework.Execution.SharedAppDomain.SharedAppDomainTestAssemblyExecutorHost : object {
    private IAppDomainManager _appDomainManager;
    private ISharedAppDomainHolder _sharedAppDomainHolder;
    private ITestAssemblyExecutor _executor;
    private RemotableTestExecutionManagerHost _executionManagerHost;
    private RemotableLoggerHost _loggerHost;
    public SharedAppDomainTestAssemblyExecutorHost(IAppDomainManager appDomainManager, ISharedAppDomainHolder sharedAppDomainHolder);
    public virtual void Initialize(int threadId, ITestExecutionManager executionManager, IAssemblyReference testAssembly, ITestLogger logger, string testAssemblyFullPath, string testAssemblyConfigFilePath, TestExecutionConfiguration testExecutionConfiguration, string target);
    public virtual TestThreadState RunTests(TestThreadState testThreadState);
    public sealed virtual void DeInitialize();
    public virtual void Dispose();
}
public interface TechTalk.SpecRun.Framework.FrameworkDependent.ITestAssemblyExecutorFactory {
    public abstract virtual ITestAssemblyExecutor Create(ITestLogger logger, string testAssemblyFullPath);
}
public class TechTalk.SpecRun.Framework.FrameworkDependent.TestAssemblyExecutorFactory : object {
    public sealed virtual ITestAssemblyExecutor Create(ITestLogger logger, string testAssemblyFullPath);
}
public static class TechTalk.SpecRun.Framework.JsonConverters : object {
    public static void AttachUsedConverters(JsonRpc jsonRpc);
}
[ExtensionAttribute]
public static class TechTalk.SpecRun.Framework.Logging.LoggerExtensions : object {
    [ExtensionAttribute]
public static void Log(ITestLogger logger, string messageFormat, object arg0, Object[] restArgs);
}
public class TechTalk.SpecRun.Framework.ProcessHelper : object {
    private static TimeSpan _timeout;
    private static int _timeOutInMilliseconds;
    [CompilerGeneratedAttribute]
private string <ConsoleOutput>k__BackingField;
    public string ConsoleOutput { get; private set; }
    private static ProcessHelper();
    [CompilerGeneratedAttribute]
public string get_ConsoleOutput();
    [CompilerGeneratedAttribute]
private void set_ConsoleOutput(string value);
    public string GetParametersString(String[] arguments);
    public ProcessResult RunProcess(ProcessStartInfo processStartInfo);
    public ProcessResult RunProcess(string workingDirectory, string executablePath, String[] arguments);
    private ProcessStartInfo CreateProcessStartInfo(string workingDirectory, string executablePath, string parameters);
}
public class TechTalk.SpecRun.Framework.ProcessResult : object {
    [CompilerGeneratedAttribute]
private string <StdOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StdError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CombinedOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    public string StdOutput { get; }
    public string StdError { get; }
    public string CombinedOutput { get; }
    public int ExitCode { get; }
    public ProcessResult(int exitCode, string stdOutput, string stdError, string combinedOutput);
    [CompilerGeneratedAttribute]
public string get_StdOutput();
    [CompilerGeneratedAttribute]
public string get_StdError();
    [CompilerGeneratedAttribute]
public string get_CombinedOutput();
    [CompilerGeneratedAttribute]
public int get_ExitCode();
}
public class TechTalk.SpecRun.Framework.Remoting.AppDomainManager : object {
    private ITestLogger logger;
    public AppDomainManager(ITestLogger logger);
    public virtual ILoadedAssemblyReference CreateAppDomainFor(string assemblyPath, bool useConfig, string customConfigFilePath);
    protected virtual AppDomainSetup CreateAppDomainSetup(string assemblyPath, bool useConfig, string customConfigFilePath);
}
public class TechTalk.SpecRun.Framework.Remoting.AppDomainReference : object {
    private AppDomain _appDomain;
    private ITestLogger _logger;
    public AppDomainReference(AppDomain appDomain, ITestLogger logger);
    public sealed virtual T CreateObjectFromAssembly(Object[] args);
    [DebuggerStepThroughAttribute]
public sealed virtual T CreateObject();
    [DebuggerStepThroughAttribute]
public virtual T CreateObject(Object[] args);
    public sealed virtual object CreateObjectOfTypeFromAssembly(string assemblyName, string typeFullName);
    [DebuggerStepThroughAttribute]
public sealed virtual T CreateObjectOfType(string assemblyName, string typeFullName);
    public sealed virtual void Dispose();
}
public interface TechTalk.SpecRun.Framework.Remoting.IAppDomainManager {
    public abstract virtual ILoadedAssemblyReference CreateAppDomainFor(string assemblyPath, bool useConfig, string customConfigFilePath);
}
public interface TechTalk.SpecRun.Framework.Remoting.ILoadedAssemblyReference {
    public abstract virtual T CreateObjectFromAssembly(Object[] args);
    public abstract virtual T CreateObject();
    public abstract virtual T CreateObject(Object[] args);
    public abstract virtual object CreateObjectOfTypeFromAssembly(string assemblyName, string typeFullName);
    public abstract virtual T CreateObjectOfType(string assemblyName, string typeFullName);
}
public class TechTalk.SpecRun.Framework.Remoting.RemoteDomainInitializer : object {
    private static List`1<Type> Types;
    private static RemoteDomainInitializer();
    [RunsInTestAssemblyAppDomainAttribute]
private static Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args);
    private static Assembly GetAssembly(ResolveEventArgs args, Type type);
}
public class TechTalk.SpecRun.Framework.Services.EnvironmentPreparer : object {
    private IFileSystemService _fileSystemService;
    private IEnvironment _environment;
    private ILogger _logger;
    public EnvironmentPreparer(IFileSystemService fileSystemService, IEnvironment environment, ILogger logger);
    public sealed virtual void InitializeEnvironment(string outputFolder, string uniqueId);
}
public interface TechTalk.SpecRun.Framework.Services.IEnvironmentPreparer {
    public abstract virtual void InitializeEnvironment(string outputFolder, string uniqueId);
}
public static class TechTalk.SpecRun.Framework.Services.KnownEnvironmentVariableNames : object {
    public static string SpecRunOutputFolder;
    public static string SpecRunUniqueId;
}
public static class TechTalk.SpecRun.Framework.SpecRunMessageUtils : object {
    private static void SendMessage(string command, string argsFormat, Object[] argsArgs);
    public static void SendInfoVersionMessage();
    public static void SendDebugProcessMessage(int pid);
    public static void SendDebugReadyMessage();
    public static void SendDebugSkipMessage();
}
public class TechTalk.SpecRun.Framework.SubfolderAssemblyResolver : object {
    public static void Enable();
    public static string GetTestAdapterSubFolder(ClrVersion clrVersion);
}
public class TechTalk.SpecRun.Framework.TestAssemblyExecutorCallbackSink : object {
    private IOutOfProcessTestAssemblyExecutorCallback _callback;
    public TestAssemblyExecutorCallbackSink(IOutOfProcessTestAssemblyExecutorCallback callback);
    public sealed virtual TestExecutionId GetNextTest(int threadId);
    public sealed virtual void RegisterTestItemStart(TestExecutionId testExecutionId, int threadId);
    public sealed virtual void RegisterTestItemPreliminaryResult(TestExecutionId testExecutionId, int threadId, TestNodeResultType preliminaryTestResult);
    public sealed virtual void RegisterTestItemResult(TestExecutionId testExecutionId, TestNodeResult testNodeResult);
    public sealed virtual void RegisterThreadStart(int threadId, string machineName);
    public sealed virtual void RegisterThreadFinish(int threadId, Exception testThreadError);
    public sealed virtual void ThreadCancelled(int threadId);
    public sealed virtual bool GetIsCancelled();
    public sealed virtual TestSuite GetTestSuite();
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
