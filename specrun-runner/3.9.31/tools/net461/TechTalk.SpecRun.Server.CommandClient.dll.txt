public class TechTalk.SpecRun.Server.CommandClient.CommandGateway : object {
    private ILogger _logger;
    private RestClient restClient;
    public CommandGateway(ILogger logger, string serverUrl);
    public sealed virtual void Dispose();
    public bool RegisterTestRunResult(RegisterTestRunResultCommand command);
}
internal class TechTalk.SpecRun.Server.CommandClient.TracingHttp : object {
    private IHttp baseHttp;
    public ICredentials Credentials { get; public set; }
    public string UserAgent { get; public set; }
    public int Timeout { get; public set; }
    public bool FollowRedirects { get; public set; }
    public Nullable`1<int> MaxRedirects { get; public set; }
    public IList`1<HttpHeader> Headers { get; }
    public IList`1<HttpParameter> Parameters { get; }
    public IList`1<HttpFile> Files { get; }
    public IList`1<HttpCookie> Cookies { get; }
    public string RequestBody { get; public set; }
    public string RequestContentType { get; public set; }
    public Uri Url { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public sealed virtual void DeleteAsync(Action`1<HttpResponse> action);
    public sealed virtual void GetAsync(Action`1<HttpResponse> action);
    public sealed virtual void HeadAsync(Action`1<HttpResponse> action);
    public sealed virtual void OptionsAsync(Action`1<HttpResponse> action);
    public sealed virtual void PostAsync(Action`1<HttpResponse> action);
    public sealed virtual void PutAsync(Action`1<HttpResponse> action);
    public sealed virtual HttpResponse Delete();
    public sealed virtual HttpResponse Get();
    public sealed virtual HttpResponse Head();
    public sealed virtual HttpResponse Options();
    public sealed virtual HttpResponse Post();
    public sealed virtual HttpResponse Put();
    public sealed virtual ICredentials get_Credentials();
    public sealed virtual void set_Credentials(ICredentials value);
    public sealed virtual string get_UserAgent();
    public sealed virtual void set_UserAgent(string value);
    public sealed virtual int get_Timeout();
    public sealed virtual void set_Timeout(int value);
    public sealed virtual bool get_FollowRedirects();
    public sealed virtual void set_FollowRedirects(bool value);
    public sealed virtual Nullable`1<int> get_MaxRedirects();
    public sealed virtual void set_MaxRedirects(Nullable`1<int> value);
    public sealed virtual IList`1<HttpHeader> get_Headers();
    public sealed virtual IList`1<HttpParameter> get_Parameters();
    public sealed virtual IList`1<HttpFile> get_Files();
    public sealed virtual IList`1<HttpCookie> get_Cookies();
    public sealed virtual string get_RequestBody();
    public sealed virtual void set_RequestBody(string value);
    public sealed virtual string get_RequestContentType();
    public sealed virtual void set_RequestContentType(string value);
    public sealed virtual Uri get_Url();
    public sealed virtual void set_Url(Uri value);
    public sealed virtual IWebProxy get_Proxy();
    public sealed virtual void set_Proxy(IWebProxy value);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
