public class TechTalk.SpecRun.Server.Commands.RegisterTestRunResultCommand : object {
    [CompilerGeneratedAttribute]
private Guid <CommandId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ResultId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TestStartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Machine>k__BackingField;
    [CompilerGeneratedAttribute]
private TestItemResult[] <TestItems>k__BackingField;
    public Guid CommandId { get; public set; }
    public Guid ResultId { get; public set; }
    public Guid ProjectId { get; public set; }
    public DateTime TestStartTime { get; public set; }
    public string Configuration { get; public set; }
    public string Machine { get; public set; }
    public TestItemResult[] TestItems { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_CommandId();
    [CompilerGeneratedAttribute]
public void set_CommandId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_ResultId();
    [CompilerGeneratedAttribute]
public void set_ResultId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_ProjectId();
    [CompilerGeneratedAttribute]
public void set_ProjectId(Guid value);
    [CompilerGeneratedAttribute]
public DateTime get_TestStartTime();
    [CompilerGeneratedAttribute]
public void set_TestStartTime(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_Machine();
    [CompilerGeneratedAttribute]
public void set_Machine(string value);
    [CompilerGeneratedAttribute]
public TestItemResult[] get_TestItems();
    [CompilerGeneratedAttribute]
public void set_TestItems(TestItemResult[] value);
}
public class TechTalk.SpecRun.Server.Commands.RegisterTestRunResultCommandResult : object {
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    public bool Succeeded { get; public set; }
    public RegisterTestRunResultCommandResult(bool succeeded);
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
public void set_Succeeded(bool value);
}
public class TechTalk.SpecRun.Server.Commands.TestItemResult : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private TestItemResultType <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ExecutionTime>k__BackingField;
    public string Path { get; public set; }
    [JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public TestItemResultType Result { get; public set; }
    public TimeSpan ExecutionTime { get; public set; }
    public TestItemResult(string path, TestItemResultType resultType, TimeSpan executionTime);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public TestItemResultType get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(TestItemResultType value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ExecutionTime();
    [CompilerGeneratedAttribute]
public void set_ExecutionTime(TimeSpan value);
}
public enum TechTalk.SpecRun.Server.Commands.TestItemResultType : Enum {
    public int value__;
    public static TestItemResultType Unknown;
    public static TestItemResultType Succeeded;
    public static TestItemResultType Ignored;
    public static TestItemResultType Pending;
    public static TestItemResultType RandomlyFailed;
    public static TestItemResultType Failed;
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
