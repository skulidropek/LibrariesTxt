public static class TechTalk.SpecFlow.Plus.RPC.AsyncHelper : object {
    private static TaskFactory _myTaskFactory;
    private static AsyncHelper();
    public static TResult RunSync(Func`1<Task`1<TResult>> func);
    public static void RunSync(Func`1<Task> func);
}
public interface TechTalk.SpecFlow.Plus.RPC.IIPPropertiesProvider {
    public abstract virtual IEnumerable`1<IPEndPoint> GetLocalEndPointsOfActiveTcpConnections();
    public abstract virtual IEnumerable`1<IPEndPoint> GetActiveTcpListeners();
    public abstract virtual IEnumerable`1<IPEndPoint> GetActiveUdpListeners();
}
public interface TechTalk.SpecFlow.Plus.RPC.IJsonRpcFactory {
    public abstract virtual JsonRpc FromStreamAndImplementation(Stream stream, object implementation);
}
public interface TechTalk.SpecFlow.Plus.RPC.IPortFinder {
    public abstract virtual IEnumerable`1<ushort> GetFreePorts(ushort fromInclusive, ushort toInclusive);
}
public class TechTalk.SpecFlow.Plus.RPC.IPPropertiesProvider : object {
    public sealed virtual IEnumerable`1<IPEndPoint> GetLocalEndPointsOfActiveTcpConnections();
    public sealed virtual IEnumerable`1<IPEndPoint> GetActiveTcpListeners();
    public sealed virtual IEnumerable`1<IPEndPoint> GetActiveUdpListeners();
}
public interface TechTalk.SpecFlow.Plus.RPC.IRemoteRpcConnection {
    public JsonRpc JsonRpc { get; }
    public Stream Stream { get; }
    public object Implementation { get; }
    public abstract virtual JsonRpc get_JsonRpc();
    public abstract virtual Stream get_Stream();
    public abstract virtual object get_Implementation();
}
public interface TechTalk.SpecFlow.Plus.RPC.IRemoteRpcConnectionFactory {
    public abstract virtual IRemoteRpcConnection SetupRemoteClient(Stream stream, object implementation, Action`1<JsonRpc> afterAttachAction, Action`1<string> logAction);
}
public interface TechTalk.SpecFlow.Plus.RPC.IRpcClient {
    public abstract virtual void Connect(Action`1<JsonRpc> afterAttachAction);
    public abstract virtual Task Invoke(string methodName, Object[] parameters);
    public abstract virtual Task`1<T> Invoke(string methodName, Object[] parameters);
}
public interface TechTalk.SpecFlow.Plus.RPC.IRpcClientFactory {
    public abstract virtual IRpcClient CreateTcpClient(ushort serverPort, Action`1<string> logAction);
}
public interface TechTalk.SpecFlow.Plus.RPC.IRpcServer {
    public abstract virtual void Start(Action`1<JsonRpc> afterAttachAction);
    public abstract virtual void StartInBackground(Action`1<JsonRpc> afterAttachAction);
}
public interface TechTalk.SpecFlow.Plus.RPC.IRpcServerFactory {
    public abstract virtual IResult`1<IRpcServer> TryCreateTcpRpcServer(ushort port, object implementation, Action`1<string> logAction);
}
public interface TechTalk.SpecFlow.Plus.RPC.ITcpClient {
    public abstract virtual Stream GetStream();
    public abstract virtual void Connect(IPAddress address, ushort port);
}
public interface TechTalk.SpecFlow.Plus.RPC.ITcpListener {
    public bool IsListening { get; }
    public IPEndPoint LocalEndPoint { get; }
    public abstract virtual bool get_IsListening();
    public abstract virtual ITcpClient AcceptTcpClient();
    public abstract virtual IPEndPoint get_LocalEndPoint();
    public abstract virtual void Start();
    public abstract virtual void Stop();
}
public class TechTalk.SpecFlow.Plus.RPC.JsonRpcFactory : object {
    public sealed virtual JsonRpc FromStreamAndImplementation(Stream stream, object implementation);
}
public class TechTalk.SpecFlow.Plus.RPC.PortFinder : object {
    private IIPPropertiesProvider _ipPropertiesProvider;
    public PortFinder(IIPPropertiesProvider ipPropertiesProvider);
    public sealed virtual IEnumerable`1<ushort> GetFreePorts(ushort fromInclusive, ushort toInclusive);
    [IteratorStateMachineAttribute("TechTalk.SpecFlow.Plus.RPC.PortFinder/<GetUsedPorts>d__3")]
public IEnumerable`1<ushort> GetUsedPorts();
}
public class TechTalk.SpecFlow.Plus.RPC.RemoteRpcConnection : object {
    private Action`1<string> _logAction;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private JsonRpc <JsonRpc>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Implementation>k__BackingField;
    public JsonRpc JsonRpc { get; }
    public Stream Stream { get; }
    public object Implementation { get; }
    public RemoteRpcConnection(JsonRpc jsonRpc, Stream stream, object implementation, Action`1<string> logAction);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public sealed virtual JsonRpc get_JsonRpc();
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_Stream();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Implementation();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private void OnJsonRpcOnDisconnected(object sender, JsonRpcDisconnectedEventArgs e);
}
public class TechTalk.SpecFlow.Plus.RPC.RemoteRpcConnectionFactory : object {
    private IJsonRpcFactory _jsonRpcFactory;
    public RemoteRpcConnectionFactory(IJsonRpcFactory jsonRpcFactory);
    public sealed virtual IRemoteRpcConnection SetupRemoteClient(Stream stream, object implementation, Action`1<JsonRpc> afterAttachAction, Action`1<string> logAction);
}
public class TechTalk.SpecFlow.Plus.RPC.RpcClientFactory : object {
    public sealed virtual IRpcClient CreateTcpClient(ushort serverPort, Action`1<string> logAction);
}
public class TechTalk.SpecFlow.Plus.RPC.RpcServerFactory : object {
    private IRemoteRpcConnectionFactory _remoteRpcConnectionFactory;
    public RpcServerFactory(IRemoteRpcConnectionFactory remoteRpcConnectionFactory);
    public sealed virtual IResult`1<IRpcServer> TryCreateTcpRpcServer(ushort port, object implementation, Action`1<string> logAction);
}
public class TechTalk.SpecFlow.Plus.RPC.TcpClientWrapper : object {
    private TcpClient _tcpClient;
    private bool _isDisposed;
    public TcpClientWrapper(TcpClient tcpClient);
    protected virtual override void Finalize();
    public sealed virtual Stream GetStream();
    public sealed virtual void Connect(IPAddress address, ushort port);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public class TechTalk.SpecFlow.Plus.RPC.TcpListenerWrapper : object {
    private TcpListener _tcpListener;
    [CompilerGeneratedAttribute]
private bool <IsListening>k__BackingField;
    public bool IsListening { get; private set; }
    public IPEndPoint LocalEndPoint { get; }
    public TcpListenerWrapper(TcpListener tcpListener);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsListening();
    [CompilerGeneratedAttribute]
private void set_IsListening(bool value);
    public sealed virtual IPEndPoint get_LocalEndPoint();
    public sealed virtual ITcpClient AcceptTcpClient();
    public sealed virtual void Start();
    public sealed virtual void Stop();
}
public class TechTalk.SpecFlow.Plus.RPC.TcpRpcClient : object {
    private ITcpClient _client;
    private ushort _serverPort;
    private Action`1<string> _logAction;
    private bool _isDisposed;
    private JsonRpc _jsonRpc;
    public TcpRpcClient(ITcpClient client, ushort serverPort, Action`1<string> logAction);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Connect(Action`1<JsonRpc> afterAttachAction);
    private void jsonRpc_Disconnected(object sender, JsonRpcDisconnectedEventArgs e);
    [AsyncStateMachineAttribute("TechTalk.SpecFlow.Plus.RPC.TcpRpcClient/<Invoke>d__11")]
public sealed virtual Task Invoke(string methodName, Object[] parameters);
    [AsyncStateMachineAttribute("TechTalk.SpecFlow.Plus.RPC.TcpRpcClient/<Invoke>d__12`1")]
public sealed virtual Task`1<T> Invoke(string methodName, Object[] parameters);
}
public class TechTalk.SpecFlow.Plus.RPC.TcpRpcServer : object {
    private ITcpListener _tcpListener;
    private object _implementation;
    private Action`1<string> _logAction;
    private IRemoteRpcConnectionFactory _remoteRpcConnectionFactory;
    private bool _isDisposed;
    private bool _isStarted;
    private ITcpClient _remoteTcpClient;
    private IRemoteRpcConnection _remoteRpcConnection;
    public TcpRpcServer(ITcpListener tcpListener, object implementation, Action`1<string> logAction, IRemoteRpcConnectionFactory remoteRpcConnectionFactory);
    protected virtual override void Finalize();
    public sealed virtual void Start(Action`1<JsonRpc> afterAttachAction);
    public sealed virtual void StartInBackground(Action`1<JsonRpc> afterAttachAction);
    public void StartServer(Action`1<JsonRpc> afterAttachAction);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
