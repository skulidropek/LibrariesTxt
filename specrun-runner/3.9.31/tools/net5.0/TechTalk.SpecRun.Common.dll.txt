public class TechTalk.SpecRun.Common.AttributeInformation : object {
    [CompilerGeneratedAttribute]
private string <Regex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    public string Regex { get; public set; }
    public string Culture { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Regex();
    [CompilerGeneratedAttribute]
public void set_Regex(string value);
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
}
public enum TechTalk.SpecRun.Common.GherkinKeyWord : Enum {
    public int value__;
    public static GherkinKeyWord Feature;
    public static GherkinKeyWord Background;
    public static GherkinKeyWord Scenario;
    public static GherkinKeyWord ScenarioOutline;
    public static GherkinKeyWord Examples;
    public static GherkinKeyWord GivenStep;
    public static GherkinKeyWord WhenStep;
    public static GherkinKeyWord ThenStep;
    public static GherkinKeyWord AndStep;
    public static GherkinKeyWord ButStep;
    public static GherkinKeyWord Step;
}
[ExtensionAttribute]
public static class TechTalk.SpecRun.Common.Helper.StringExtensions : object {
    [ExtensionAttribute]
public static bool IsNullOrEmpty(string value);
    [ExtensionAttribute]
public static bool IsNotNullOrEmpty(string value);
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
    [ExtensionAttribute]
public static bool IsNotNullOrWhiteSpace(string value);
    [ExtensionAttribute]
public static string StripWhitespaces(string value);
    [ExtensionAttribute]
public static String[] SplitByString(string value, string separator, StringSplitOptions options);
}
public class TechTalk.SpecRun.Common.Helper.StringHelper : object {
    public static string PreFixLineWithTab(string text, int countOfTabs);
}
public enum TechTalk.SpecRun.Common.StepDefinitionType : Enum {
    public int value__;
    public static StepDefinitionType Given;
    public static StepDefinitionType When;
    public static StepDefinitionType Then;
}
public class TechTalk.SpecRun.Common.StepInstanceInformation : object {
    [CompilerGeneratedAttribute]
private StepDefinitionType <StepDefinitionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MultilineTextArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Keyword>k__BackingField;
    public StepDefinitionType StepDefinitionType { get; public set; }
    public string Text { get; public set; }
    public string MultilineTextArgument { get; public set; }
    public string TableArgument { get; public set; }
    public string Keyword { get; public set; }
    public StepInstanceInformation(StepDefinitionType stepDefinitionType, string text, string multilineTextArgument, string tableArgument, string keyword);
    [CompilerGeneratedAttribute]
public StepDefinitionType get_StepDefinitionType();
    [CompilerGeneratedAttribute]
public void set_StepDefinitionType(StepDefinitionType value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_MultilineTextArgument();
    [CompilerGeneratedAttribute]
public void set_MultilineTextArgument(string value);
    [CompilerGeneratedAttribute]
public string get_TableArgument();
    [CompilerGeneratedAttribute]
public void set_TableArgument(string value);
    [CompilerGeneratedAttribute]
public string get_Keyword();
    [CompilerGeneratedAttribute]
public void set_Keyword(string value);
}
public enum TechTalk.SpecRun.Common.StepKeyword : Enum {
    public int value__;
    public static StepKeyword Given;
    public static StepKeyword When;
    public static StepKeyword Then;
    public static StepKeyword And;
    public static StepKeyword But;
}
public class TechTalk.SpecRun.Common.SupportedAdditionalUnitTestProviders : object {
    public static String[] ListBefore19;
    public static String[] List;
    private static SupportedAdditionalUnitTestProviders();
}
public class TechTalk.SpecRun.Common.TraceEventStepBindingInformation : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AttributeInformation> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private StepInstanceInformation <StepInstanceInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FeatureCulture>k__BackingField;
    public string Text { get; public set; }
    public string MethodName { get; public set; }
    public string OriginalRegex { get; public set; }
    public List`1<AttributeInformation> Attributes { get; public set; }
    public StepInstanceInformation StepInstanceInformation { get; public set; }
    public string FeatureCulture { get; public set; }
    public TraceEventStepBindingInformation(string text, string methodName, string originalRegex, StepInstanceInformation stepInstanceInformation, string featureCulture);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalRegex();
    [CompilerGeneratedAttribute]
public void set_OriginalRegex(string value);
    [CompilerGeneratedAttribute]
public List`1<AttributeInformation> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(List`1<AttributeInformation> value);
    [CompilerGeneratedAttribute]
public StepInstanceInformation get_StepInstanceInformation();
    [CompilerGeneratedAttribute]
public void set_StepInstanceInformation(StepInstanceInformation value);
    [CompilerGeneratedAttribute]
public string get_FeatureCulture();
    [CompilerGeneratedAttribute]
public void set_FeatureCulture(string value);
}
public enum TechTalk.SpecRun.Framework.Results.TestNodeResultTypeGroup : Enum {
    public int value__;
    public static TestNodeResultTypeGroup Unknown;
    public static TestNodeResultTypeGroup Success;
    public static TestNodeResultTypeGroup Ignored;
    public static TestNodeResultTypeGroup Pending;
    public static TestNodeResultTypeGroup Warning;
    public static TestNodeResultTypeGroup Failure;
    public static TestNodeResultTypeGroup FrameworkError;
    public static TestNodeResultTypeGroup LicensingError;
}
public class TechTalk.SpecRun.Framework.SpecRunException : Exception {
    public SpecRunException(string message);
    public SpecRunException(string messageFormat, Object[] arguments);
    public SpecRunException(string message, Exception inner);
    protected SpecRunException(SerializationInfo info, StreamingContext context);
}
public static class TechTalk.SpecRun.Framework.Utils.FileSystemHelper : object {
    public static void CopyFileToFolder(string filePath, string folderName);
    public static string GetRelativePath(string path, string basePath);
    public static bool FileCompare(string filePath1, string filePath2);
    public static void CopyDirectory(string sourcePath, string destPath, bool cleanDestination);
    public static void EnsureEmptyFolder(string folderName);
    public static void EnsureFolderOfFile(string filePath);
    private static void Retry(int number, Action action);
    public static void DeleteFolderContent(string folderName);
    public static void DeleteFolder(string path);
    public static Uri CreateFileUri(string filePath);
    public static string CreateFileUriString(string filePath);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
