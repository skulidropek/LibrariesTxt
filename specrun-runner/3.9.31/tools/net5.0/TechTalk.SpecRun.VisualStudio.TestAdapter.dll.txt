public class TechTalk.SpecRun.VisualStudio.TestAdapter.AttachmentRecorder : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Attachments>k__BackingField;
    private IFrameworkHandle _frameworkHandle;
    private ILogger _logger;
    internal Dictionary`2<string, string> Attachments { get; }
    public AttachmentRecorder(IFrameworkHandle frameworkHandle, ILogger logger);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_Attachments();
    private UriDataAttachment SaveAttachment(string filePath, string label, string tmpFolder);
    public void AddFile(string name, string filePath);
    public void SendToVSTest(string attachmentSetName);
}
public static class TechTalk.SpecRun.VisualStudio.TestAdapter.Constants : object {
    public static string ExecutorUriString;
    public static string AssemblyExtension;
    public static string SettingsName;
    private static string TestCategoryLabel;
    public static Uri ExecutorUri;
    internal static TestProperty TestCategoryProperty;
    private static Constants();
}
public interface TechTalk.SpecRun.VisualStudio.TestAdapter.Discovery.ITestCaseCollector {
    public abstract virtual void SendTestCase(TestItem testItem, string source);
    public abstract virtual void SendEvaluationTestCase(string source);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.Discovery.MultiSourceTestDiscoverer : object {
    private IObjectContainer _objectContainer;
    private ILogger _logger;
    public MultiSourceTestDiscoverer(IObjectContainer objectContainer, ILogger logger);
    public void Discover(IEnumerable`1<string> sources);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.Discovery.SingleSourceTestDiscoverer : object {
    private TestDiscoveryContext _testDiscoveryContext;
    private ILogger _logger;
    private ITestProfilePreparer _testProfilePreparer;
    private ITestCaseCollector _testCaseCollector;
    private ITestSuiteProvider _testSuiteProvider;
    private ISpecFlowPlusRunnerSourceValidator _specFlowPlusRunnerSourceValidator;
    public SingleSourceTestDiscoverer(TestDiscoveryContext testDiscoveryContext, ILogger logger, ITestProfilePreparer testProfilePreparer, ITestCaseCollector testCaseCollector, ITestSuiteProvider testSuiteProvider, ISpecFlowPlusRunnerSourceValidator specFlowPlusRunnerSourceValidator);
    public void Discover(string source);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.Discovery.VsTestTestCaseCollector : object {
    private TestDiscoveryContext _testDiscoveryContext;
    private ITestCaseDiscoverySink _testCaseDiscoverySink;
    public VsTestTestCaseCollector(TestDiscoveryContext testDiscoveryContext, ITestCaseDiscoverySink testCaseDiscoverySink);
    public sealed virtual void SendTestCase(TestItem testItem, string source);
    public sealed virtual void SendEvaluationTestCase(string source);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.Execution.CommonTestExecutionWrapper : object {
    private IMultiSourceTestExecutor _multiSourceTestExecutor;
    private ICurrentExecutionModelSettings _currentExecutionModelSettings;
    private ICurrentThreadService _currentThreadService;
    private IEnvironment _environment;
    private ILogger _logger;
    private MessageLoggerWrapper _messageLoggerWrapper;
    public CommonTestExecutionWrapper(IMultiSourceTestExecutor multiSourceTestExecutor, ICurrentExecutionModelSettings currentExecutionModelSettings, ICurrentThreadService currentThreadService, IEnvironment environment, ILogger logger, MessageLoggerWrapper messageLoggerWrapper);
    public void Run();
    public void Cancel();
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.Execution.MultiAssemblyTestExecutor : object {
    private TestingContext _testingContext;
    private ISingleSourceTestExecutor _singleSourceTestExecutor;
    private ILogger _logger;
    private MultiAssemblyTestExecutorConfiguration _configuration;
    public MultiAssemblyTestExecutor(ILogger logger, MultiAssemblyTestExecutorConfiguration configuration, TestingContext testingContext, ISingleSourceTestExecutor singleSourceTestExecutor);
    public sealed virtual void Run();
    public sealed virtual void Cancel();
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.Execution.MultiTestCaseTestExecutor : object {
    private ILogger _logger;
    private MultiTestCaseTestExecutorConfiguration _configuration;
    private ISingleSourceTestExecutor _singleSourceTestExecutor;
    public MultiTestCaseTestExecutor(ILogger logger, MultiTestCaseTestExecutorConfiguration configuration, ISingleSourceTestExecutor singleSourceTestExecutor);
    public sealed virtual void Run();
    public sealed virtual void Cancel();
    public FilterItem CreateFilter(IEnumerable`1<string> testPaths);
    public FilterItem CreateTestPathFilter(string path);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.Execution.SingleSourceTestExecutor : object {
    private IFileSystemService _fileSystemService;
    private IFrameworkHandle _frameworkHandle;
    private ILogger _logger;
    private ITestingContext _testingContext;
    private IRunContext _runContext;
    private ReportOutputPath _reportOutputPath;
    private VsExecutionContainerBuilder _vsExecutionContainerBuilder;
    private ICombineTestResultFactory _combineTestResultFactory;
    private AttachmentRecorder _attachmentRecorder;
    private ITestProfileProvider _testProfileProvider;
    private ITestLoggerFactory _testLoggerFactory;
    private ITestProfilePreparer _testProfilePreparer;
    private IEnvironmentPreparer _environmentPreparer;
    private ISpecFlowPlusRunnerSourceValidator _specFlowPlusRunnerSourceValidator;
    private ISingleSourceTestExecutorContainerBuilder _singleSourceTestExecutorContainerBuilder;
    private IThreadFactory _threadFactory;
    private IExecutionEnvironment _executionEnvironment;
    private VsTestTracer _testRunTracer;
    public SingleSourceTestExecutor(IFileSystemService fileSystemService, IFrameworkHandle frameworkHandle, ILogger logger, ITestingContext testingContext, IRunContext runContext, ReportOutputPath reportOutputPath, VsExecutionContainerBuilder vsExecutionContainerBuilder, ICombineTestResultFactory combineTestResultFactory, AttachmentRecorder attachmentRecorder, IObjectContainer parentObjectContainer, ITestProfileProvider testProfileProvider, ITestLoggerFactory testLoggerFactory, ITestProfilePreparer testProfilePreparer, IEnvironmentPreparer environmentPreparer, ISpecFlowPlusRunnerSourceValidator specFlowPlusRunnerSourceValidator, ISingleSourceTestExecutorContainerBuilder singleSourceTestExecutorContainerBuilder, IThreadFactory threadFactory, IExecutionEnvironment executionEnvironment);
    public sealed virtual void Run(string source, FilterItem filter);
    public TestRunResult CreateExecutionErrorResult(TestProfile testProfile);
    public sealed virtual void Cancel();
    public TestRunResult ExecuteTestSuiteSync(IExecutionEngine executionEngine, TestProfile profile, TestRunExecutionConfiguration testRunExecutionConfiguration, IObjectContainer parentObjectContainer);
    public TestRunResult ExecuteTestSuite(IExecutionEngine executionEngine, TestProfile profile, TestRunExecutionConfiguration testRunExecutionConfiguration, IObjectContainer parentObjectContainer);
}
public interface TechTalk.SpecRun.VisualStudio.TestAdapter.IMultiSourceTestExecutor {
    public abstract virtual void Run();
    public abstract virtual void Cancel();
}
public interface TechTalk.SpecRun.VisualStudio.TestAdapter.Infrastructure.ISingleSourceTestExecutorContainerBuilder {
    public abstract virtual IObjectContainer Build(ITestRunTracer testRunTracer);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.Infrastructure.MultiAssemblyContainerBuilder : MultiSourceContainerBuilder`3<string, MultiAssemblyTestExecutor, MultiAssemblyTestExecutorConfiguration> {
    public MultiAssemblyContainerBuilder(IRunContext runContext, IFrameworkHandle frameworkHandle);
    public virtual MultiAssemblyTestExecutorConfiguration GetExecutorConfiguration(IEnumerable`1<string> sources);
}
public abstract class TechTalk.SpecRun.VisualStudio.TestAdapter.Infrastructure.MultiSourceContainerBuilder`3 : object {
    private IRunContext _runContext;
    private IFrameworkHandle _frameworkHandle;
    protected MultiSourceContainerBuilder`3(IRunContext runContext, IFrameworkHandle frameworkHandle);
    public IObjectContainer Build(IEnumerable`1<TSource> sources);
    public abstract virtual TConfiguration GetExecutorConfiguration(IEnumerable`1<TSource> sources);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.Infrastructure.MultiTestCaseContainerBuilder : MultiSourceContainerBuilder`3<TestCase, MultiTestCaseTestExecutor, MultiTestCaseTestExecutorConfiguration> {
    public MultiTestCaseContainerBuilder(IRunContext runContext, IFrameworkHandle frameworkHandle);
    public virtual MultiTestCaseTestExecutorConfiguration GetExecutorConfiguration(IEnumerable`1<TestCase> sources);
}
[ExtensionAttribute]
public static class TechTalk.SpecRun.VisualStudio.TestAdapter.Infrastructure.ObjectContainerExtensions : object {
    [ExtensionAttribute]
public static IObjectContainer RegisterSpecFlowPlusRunnerVsTestSourceValidator(IObjectContainer objectContainer);
    [ExtensionAttribute]
public static IObjectContainer RegisterCustomFileLoggerTextWriterFactoryConfiguration(IObjectContainer objectContainer, string pathToLogFile);
    [ExtensionAttribute]
public static IObjectContainer RegisterVsExecutionEngine(IObjectContainer objectContainer);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.Infrastructure.SingleSourceTestExecutorContainerBuilder : object {
    private IObjectContainer _parentObjectContainer;
    public SingleSourceTestExecutorContainerBuilder(IObjectContainer parentObjectContainer);
    public sealed virtual IObjectContainer Build(ITestRunTracer testRunTracer);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.Infrastructure.VsTestDiscoveryContainerBuilder : object {
    public IObjectContainer Build(IDiscoveryContext discoveryContext, IMessageLogger messageLogger, ITestCaseDiscoverySink discoverySink, ILoggingConfig loggingConfig);
}
public interface TechTalk.SpecRun.VisualStudio.TestAdapter.ISingleSourceTestExecutor {
    public abstract virtual void Run(string source, FilterItem filter);
    public abstract virtual void Cancel();
}
public interface TechTalk.SpecRun.VisualStudio.TestAdapter.ITestingContext {
    public SpecRunVsTestAdapterSettings Settings { get; }
    public IVsTestCaseProvider TestCaseProvider { get; }
    public TfsTestFilterProvider TfsTestFilterProvider { get; }
    public bool IsCalledFromVisualStudio { get; }
    public abstract virtual SpecRunVsTestAdapterSettings get_Settings();
    public abstract virtual IVsTestCaseProvider get_TestCaseProvider();
    public abstract virtual TfsTestFilterProvider get_TfsTestFilterProvider();
    public abstract virtual bool get_IsCalledFromVisualStudio();
    public abstract virtual string GetEvalMessage();
    public abstract virtual string GetFullEvalMessage();
}
public interface TechTalk.SpecRun.VisualStudio.TestAdapter.IVsTestCaseProvider {
    public abstract virtual TestCase CreateEvaluationTestCase(string source);
    public abstract virtual string GetEvalFullyQualifiedTestCaseName(string assemblyName);
    public abstract virtual TestCase CreateVsTestCase(TestItem testItem, string source);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.MessageLoggerOutputService : object {
    private IMessageLogger _messageLogger;
    public MessageLoggerOutputService(IMessageLogger messageLogger);
    public sealed virtual void Write(string value);
    public sealed virtual void WriteLine();
    public sealed virtual void WriteLine(string value);
    public sealed virtual void WriteErrorLine(string value);
    public sealed virtual void WriteWarningLine(string value);
    public sealed virtual void WriteInfoLine(string value);
    private void SendLine(string value, TestMessageLevel testMessageLevel);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.MessageLoggerWrapper : TestLogger {
    private IMessageLogger _messageLogger;
    public MessageLoggerWrapper(IMessageLogger messageLogger, ITimeService timeService);
    public virtual void LogInternal(string message);
    public virtual void Log(LogEntry logEntry, string threadName);
    public void LogInternal(LogEntry logEntry);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.MultiAssemblyTestExecutorConfiguration : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AssembliesToTest>k__BackingField;
    public IEnumerable`1<string> AssembliesToTest { get; }
    public MultiAssemblyTestExecutorConfiguration(IEnumerable`1<string> assembliesToTest);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AssembliesToTest();
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.MultiTestCaseTestExecutorConfiguration : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<TestCase> <TestCasesToTest>k__BackingField;
    public IEnumerable`1<TestCase> TestCasesToTest { get; }
    public MultiTestCaseTestExecutorConfiguration(IEnumerable`1<TestCase> testCasesToTest);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TestCase> get_TestCasesToTest();
}
internal class TechTalk.SpecRun.VisualStudio.TestAdapter.NodeWalker : object {
    public static TestNode GetParentNodeOf(TestItem testItem, TestNodeType nodeType);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.ParentProcessUtilities : ValueType {
    internal IntPtr Reserved1;
    internal IntPtr PebBaseAddress;
    internal IntPtr Reserved2_0;
    internal IntPtr Reserved2_1;
    internal IntPtr UniqueProcessId;
    internal IntPtr InheritedFromUniqueProcessId;
    private static int NtQueryInformationProcess(IntPtr processHandle, int processInformationClass, ParentProcessUtilities& processInformation, int processInformationLength, Int32& returnLength);
    public static Process GetParentProcess();
    public static Process GetParentProcess(int id);
    public static Process GetParentProcess(IntPtr handle);
}
public interface TechTalk.SpecRun.VisualStudio.TestAdapter.Services.IProcessInfoService {
    public abstract virtual FSharpOption`1<Process> GetParentProcess();
    public abstract virtual bool IsCalledByParentProcess(string parentProcessName);
    public abstract virtual bool IsCalledByTestAgent();
}
public interface TechTalk.SpecRun.VisualStudio.TestAdapter.Services.ISpecFlowPlusRunnerSourceValidator {
    public abstract virtual bool IsSpecFlowPlusTestCaseSource(string source, SpecRunVsTestAdapterSettings settings);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.Services.ProcessInfoService : object {
    private static string TestAgentParentProcessName;
    public sealed virtual FSharpOption`1<Process> GetParentProcess();
    public sealed virtual bool IsCalledByParentProcess(string parentProcessName);
    public sealed virtual bool IsCalledByTestAgent();
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.Services.SpecFlowPlusRunnerVsTestSourceValidator : object {
    public static string SpecRunRuntimeSpecFlowPluginDllName;
    public static string TechTalkSpecRunDllName;
    private ILogger _logger;
    private IFileSystemService _fileSystemService;
    private IFileNameService _fileNameService;
    public SpecFlowPlusRunnerVsTestSourceValidator(ILogger logger, IFileSystemService fileSystemService, IFileNameService fileNameService);
    public sealed virtual bool IsSpecFlowPlusTestCaseSource(string source, SpecRunVsTestAdapterSettings settings);
}
public interface TechTalk.SpecRun.VisualStudio.TestAdapter.Settings.ITestProfileProvider {
    public abstract virtual SpecRunVsTestAdapterSettings GetSettings(IDiscoveryContext discoveryContext);
    public abstract virtual TestProfile GetTestProfile(string testAssemblyPath, ITestingContext testingContext);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.Settings.ReportOutputPath : object {
    private IFileSystemService _fileSystemService;
    private ITimeService _timeService;
    public ReportOutputPath(IFileSystemService fileSystemService, ITimeService timeService);
    public string GetOutputFilePath(string outputFolder, TestProfile testProfile, SpecRunVsTestAdapterSettings settings, string extension);
    public string GetNumberedFileNameIfFileExists(string fileName, string fileNamePattern, int startNumber, int maxCount);
    public IEnumerable`1<string> GetFileNamesWithCount(string fileNamePattern, int start, int count);
    public string GetReportFileName(TestProfile testProfile, string extension);
    public string RemoveFilenameCount(string filename);
    [CompilerGeneratedAttribute]
private bool <GetNumberedFileNameIfFileExists>b__4_0(string filePath);
}
[XmlTypeAttribute("SpecRun")]
public class TechTalk.SpecRun.VisualStudio.TestAdapter.Settings.SpecRunVsTestAdapterSettings : TestRunSettings {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Profile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateSpecRunTrait>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateFeatureTrait>k__BackingField;
    public bool Enabled { get; public set; }
    public string Profile { get; public set; }
    public string ReportFile { get; public set; }
    public bool GenerateSpecRunTrait { get; public set; }
    public bool GenerateFeatureTrait { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_Profile();
    [CompilerGeneratedAttribute]
public void set_Profile(string value);
    [CompilerGeneratedAttribute]
public string get_ReportFile();
    [CompilerGeneratedAttribute]
public void set_ReportFile(string value);
    [CompilerGeneratedAttribute]
public bool get_GenerateSpecRunTrait();
    [CompilerGeneratedAttribute]
public void set_GenerateSpecRunTrait(bool value);
    [CompilerGeneratedAttribute]
public bool get_GenerateFeatureTrait();
    [CompilerGeneratedAttribute]
public void set_GenerateFeatureTrait(bool value);
    public virtual XmlElement ToXml();
    public static SpecRunVsTestAdapterSettings FromXml(XmlReader reader);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.Settings.TestProfileProvider : object {
    private static List`1<string> TfsProfilePriorityList;
    private static List`1<string> NormalProfilePriorityList;
    private ITestProfileLoader _testProfileLoader;
    private IFileNameService _fileNameService;
    public TestProfileProvider(ITestProfileLoader testProfileLoader, IFileNameService fileNameService);
    private static TestProfileProvider();
    public sealed virtual TestProfile GetTestProfile(string testAssemblyPath, ITestingContext testingContext);
    public void FilterTestAssembliesByName(TestProfile testProfile, string testAssemblyPath);
    public void SetTestAssemblyPathIfNoneSpecified(TestProfile testProfile, string testAssemblyPath);
    public List`1<string> GetProfilePriorityList(string testAssemblyPath, ITestingContext testingContext);
    public sealed virtual SpecRunVsTestAdapterSettings GetSettings(IDiscoveryContext discoveryContext);
    public string GetAbsoluteProfileFile(string fileName, string source);
}
[FileExtensionAttribute(".dll")]
[DefaultExecutorUriAttribute("executor://specrun/executorV3.9.31")]
public class TechTalk.SpecRun.VisualStudio.TestAdapter.SpecRunTestDiscoverer : object {
    public sealed virtual void DiscoverTests(IEnumerable`1<string> sources, IDiscoveryContext discoveryContext, IMessageLogger messageLogger, ITestCaseDiscoverySink discoverySink);
}
[ExtensionUriAttribute("executor://specrun/executorV3.9.31")]
public class TechTalk.SpecRun.VisualStudio.TestAdapter.SpecRunTestExecutor : object {
    private CommonTestExecutionWrapper _commonTestExecutionWrapper;
    public sealed virtual void RunTests(IEnumerable`1<TestCase> tests, IRunContext runContext, IFrameworkHandle frameworkHandle);
    public sealed virtual void RunTests(IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle);
    public void RunTests(IObjectContainer container);
    public sealed virtual void Cancel();
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.TestDiscoveryContext : TestingContext {
    public TestDiscoveryContext(IDiscoveryContext discoveryContext, ILogger logger, ProfileLicenseManager profileLicenseManager, ITestProfileProvider testProfileProvider, IExecutionEnvironment executionEnvironment);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.TestExecutionContext : TestingContext {
    public TestExecutionContext(IRunContext runContext, IFrameworkHandle frameworkHandle, ILogger logger, ProfileLicenseManager profileLicenseManager, ITestProfileProvider testProfileProvider, IExecutionEnvironment executionEnvironment);
}
public abstract class TechTalk.SpecRun.VisualStudio.TestAdapter.TestingContext : object {
    private bool _isCalledFromTestAgent;
    private ITestProfileProvider _testProfileProvider;
    private IExecutionEnvironment _executionEnvironment;
    private Lazy`1<SpecRunVsTestAdapterSettings> _lazySettings;
    protected IDiscoveryContext _discoveryContext;
    private ILogger _logger;
    private TestProfile _testProfile;
    [CompilerGeneratedAttribute]
private IVsTestCaseProvider <TestCaseProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private TfsTestFilterProvider <TfsTestFilterProvider>k__BackingField;
    public SpecRunVsTestAdapterSettings Settings { get; }
    public IVsTestCaseProvider TestCaseProvider { get; }
    public TfsTestFilterProvider TfsTestFilterProvider { get; protected set; }
    public TestProfile TestProfile { get; private set; }
    public bool IsCalledFromVisualStudio { get; }
    protected TestingContext(IDiscoveryContext discoveryContext, ILogger logger, ITestProfileProvider testProfileProvider, IExecutionEnvironment executionEnvironment);
    public sealed virtual SpecRunVsTestAdapterSettings get_Settings();
    [CompilerGeneratedAttribute]
public sealed virtual IVsTestCaseProvider get_TestCaseProvider();
    [CompilerGeneratedAttribute]
public sealed virtual TfsTestFilterProvider get_TfsTestFilterProvider();
    [CompilerGeneratedAttribute]
protected void set_TfsTestFilterProvider(TfsTestFilterProvider value);
    public TestProfile get_TestProfile();
    private void set_TestProfile(TestProfile value);
    public sealed virtual bool get_IsCalledFromVisualStudio();
    public sealed virtual string GetEvalMessage();
    public sealed virtual string GetFullEvalMessage();
    public void LoadTestProfile(string source);
    public static bool IsCalledFromParent(string processName);
    [CompilerGeneratedAttribute]
private SpecRunVsTestAdapterSettings <.ctor>b__7_0();
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.TestProcess : object {
    public static void DumpProcessInfo(ILogger logger);
    public static bool ShouldLog();
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.TestTracer.CombineAbsoluteTestResult : CombineTestResult {
    [CompilerGeneratedAttribute]
private int <PassRate>k__BackingField;
    public int PassRate { get; }
    public CombineAbsoluteTestResult(int passRateAbsolute);
    [CompilerGeneratedAttribute]
public int get_PassRate();
    public virtual TestOutcome Combine(TestOutcome[] testOutcomes);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.TestTracer.CombinedTestTracer : TestTracerBase {
    private Dictionary`2<string, Storage> _testCases;
    private CombineTestResult _combineTestResult;
    public CombinedTestTracer(ITestingContext testingContext, string source, IFrameworkHandle frameworkHandle, IVsTestCaseProvider vsTestCaseProvider, TestProfile testProfile, ICombineTestResultFactory combineFactory);
    public virtual void TestStarted(TestItemExecutionResult testItemExecutionResult);
    public virtual void TestFinished(TestItemExecutionResult testItemExecutionResult);
    private int GetMaxNumberOfExecutions();
    private int GetExecutionCount(Storage storage);
    private void SendResult(TestItemExecutionResult testItemExecutionResult, TestCase vsTestCase, TestOutcome testOutcome);
    private bool RetryIsActivated();
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.TestTracer.CombineRelativeTestResult : CombineTestResult {
    [CompilerGeneratedAttribute]
private decimal <PassRate>k__BackingField;
    public decimal PassRate { get; }
    public CombineRelativeTestResult(decimal passRateRelative);
    [CompilerGeneratedAttribute]
public decimal get_PassRate();
    public virtual TestOutcome Combine(TestOutcome[] testOutcomes);
}
public abstract class TechTalk.SpecRun.VisualStudio.TestAdapter.TestTracer.CombineTestResult : object {
    public abstract virtual TestOutcome Combine(TestOutcome[] testOutcomes);
    protected int GetNumberOfPassedTests(TestOutcome[] testOutcomes);
    protected bool AllTestOutcomesArePassedOrFailed(TestOutcome[] testOutcomes);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.TestTracer.CombineTestResultFactory : object {
    public sealed virtual CombineTestResult NewFromTestSettings(VSTestSettings settings);
}
public interface TechTalk.SpecRun.VisualStudio.TestAdapter.TestTracer.ICombineTestResultFactory {
    public abstract virtual CombineTestResult NewFromTestSettings(VSTestSettings settings);
}
internal class TechTalk.SpecRun.VisualStudio.TestAdapter.TestTracer.SeparateTestTracer : TestTracerBase {
    public SeparateTestTracer(ITestingContext testingContext, string source, IFrameworkHandle frameworkHandle, IVsTestCaseProvider vsTestCaseProvider, TestProfile testProfile);
    public virtual void TestFinished(TestItemExecutionResult testItemExecutionResult);
    public virtual void TestStarted(TestItemExecutionResult testItemExecutionResult);
}
public abstract class TechTalk.SpecRun.VisualStudio.TestAdapter.TestTracer.TestTracerBase : object {
    protected IFrameworkHandle _frameworkHandle;
    protected IVsTestCaseProvider _vsTestCaseProvider;
    protected TestProfile _testProfile;
    protected string _source;
    protected ITestingContext _testingContext;
    protected TestTracerBase(ITestingContext testingContext, string source, IFrameworkHandle frameworkHandle, IVsTestCaseProvider vsTestCaseProvider, TestProfile testProfile);
    protected TestOutcome GetVsOutcome(TestItemExecutionResult testItemExecutionResult);
    protected TestResult GetVsResult(TestItemExecutionResult testItemExecutionResult, TestCase vsTestCase, TestOutcome testOutcome);
    public abstract virtual void TestFinished(TestItemExecutionResult testItemExecutionResult);
    public abstract virtual void TestStarted(TestItemExecutionResult testItemExecutionResult);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.TfsTestFilterProvider : object {
    private static Dictionary`2<string, TestProperty> supportedPropertiesCache;
    private IFrameworkHandle _frameworkHandle;
    [CompilerGeneratedAttribute]
private ITestCaseFilterExpression <FilterExpression>k__BackingField;
    public ITestCaseFilterExpression FilterExpression { get; }
    public bool HasFilter { get; }
    private static TfsTestFilterProvider();
    public TfsTestFilterProvider(IRunContext runContext, IFrameworkHandle frameworkHandle);
    [CompilerGeneratedAttribute]
public ITestCaseFilterExpression get_FilterExpression();
    public bool get_HasFilter();
    private TestProperty PropertyProvider(string propertyName);
    public FilterItem GetFilter(string source, TestingContext testingContext);
    private bool TfsTestItemMatcher(TestItem testItem, string source, TestingContext testingContext);
    private object PropertyValueProvider(TestItem testItem, TestCase vsTestCase, string propertyName);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.VsExecutionContainerBuilder : DefaultExecutionContainerBuilder {
    private IFrameworkHandle _frameworkHandle;
    public VsExecutionContainerBuilder(IFrameworkHandle frameworkHandle);
    public virtual IObjectContainer CreateContainer(TestProfile testProfile, TestRunExecutionConfiguration executionConfiguration, IObjectContainer parentObjectContainer);
}
internal class TechTalk.SpecRun.VisualStudio.TestAdapter.VsOutProcExecutorManager : OutProcExecutorManager {
    private ILogger _logger;
    private IFrameworkHandle _frameworkHandle;
    private static bool IsDebugging { get; }
    public VsOutProcExecutorManager(ITestLogger testLogger, TestRunExecutionConfiguration executionConfiguration, IOutProcExecutorProcessInfoProvider outProcExecutorProcessInfoProvider, ILogger logger, IFrameworkHandle frameworkHandle);
    private static bool get_IsDebugging();
    protected virtual ExecutorProcessStartInfo GetExecutorProcessStartInfo(ExecutionModelSettings executionModelSettings, ushort callbackPort, ushort loggerPort);
    public virtual void StartProcess(ExecutorProcessInfo executorProcessInfo);
    public ExecutorProcessInfo StartProcessWithDebugger(ExecutorProcessInfo executorProcessInfo);
}
internal class TechTalk.SpecRun.VisualStudio.TestAdapter.VsTestCaseProvider : object {
    private static string separator;
    private static string cachedProjectFolderSource;
    private static string cachedProjectFolder;
    private static Action`3<TestCase, string, string> addTraitThunk;
    private TestingContext _testingContext;
    public VsTestCaseProvider(TestingContext testingContext);
    private static VsTestCaseProvider();
    public sealed virtual TestCase CreateEvaluationTestCase(string source);
    public sealed virtual string GetEvalFullyQualifiedTestCaseName(string assemblyName);
    public sealed virtual TestCase CreateVsTestCase(TestItem testItem, string source);
    private static string GetAbsolutePath(string codeFilePath, string source);
    private static string GetDisplayName(TestItem testItem, string target);
    private static Action`3<TestCase, string, string> GetAddTraitThunk();
    public static string GetTestPath(TestCase testCase);
}
public class TechTalk.SpecRun.VisualStudio.TestAdapter.VsTestFullQualifiedNameGenerator : object {
    private static string separator;
    public static string GetFullyQualifiedVsTestName(TestItem testItem);
}
internal class TechTalk.SpecRun.VisualStudio.TestAdapter.VsTestTracer : object {
    private IFrameworkHandle _frameworkHandle;
    private string _source;
    private ITestingContext _testingContext;
    private TestProfile _testProfile;
    private bool _cancel;
    private CombinedTestTracer _combinedTestTracer;
    private SeparateTestTracer _separateTestTracer;
    private bool _stopReportingCancellations;
    public VsTestTracer(IFrameworkHandle frameworkHandle, string source, ITestingContext testingContext, TestProfile testProfile, ICombineTestResultFactory combineTestResultFactory);
    public sealed virtual void TestRunStarted(TestSuite testSuite, TestProfile testProfile);
    public sealed virtual void TestRunFinished(TestRunResult testRunResult);
    public sealed virtual void TestThreadStarted(TestThreadResult testThreadId);
    public sealed virtual void TestThreadFinished(TestThreadResult testThreadId);
    public sealed virtual void TestStarted(TestItemExecutionResult testItemExecutionResult);
    public sealed virtual void TestFinished(TestItemExecutionResult testItemExecutionResult);
    public sealed virtual void StopReportingCancellations();
    public sealed virtual void add_OnClientCancel(Action value);
    public sealed virtual void remove_OnClientCancel(Action value);
    public sealed virtual void TraceMessage(int testThreadId, string message);
    public sealed virtual void TraceError(int testThreadId, string message);
    private void EvaluateCancelled();
    private string FormatTestThreadMessage(int testThreadId, string message);
    public void Cancel();
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
