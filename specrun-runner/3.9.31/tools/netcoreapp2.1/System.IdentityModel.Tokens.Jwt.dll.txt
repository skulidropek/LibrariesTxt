internal static class System.IdentityModel.Tokens.Jwt.ClaimTypeMapping : object {
    private static Dictionary`2<string, string> shortToLongClaimTypeMapping;
    private static IDictionary`2<string, string> longToShortClaimTypeMapping;
    private static HashSet`1<string> inboundClaimFilter;
    public static IDictionary`2<string, string> InboundClaimTypeMap { get; }
    public static IDictionary`2<string, string> OutboundClaimTypeMap { get; }
    public static ISet`1<string> InboundClaimFilter { get; }
    private static ClaimTypeMapping();
    public static IDictionary`2<string, string> get_InboundClaimTypeMap();
    public static IDictionary`2<string, string> get_OutboundClaimTypeMap();
    public static ISet`1<string> get_InboundClaimFilter();
}
public class System.IdentityModel.Tokens.Jwt.Deserializer : MulticastDelegate {
    public Deserializer(object object, IntPtr method);
    public virtual object Invoke(string obj, Type targetType);
    public virtual IAsyncResult BeginInvoke(string obj, Type targetType, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public static class System.IdentityModel.Tokens.Jwt.JsonClaimValueTypes : object {
    public static string Json;
    public static string JsonArray;
    public static string JsonNull;
}
public static class System.IdentityModel.Tokens.Jwt.JsonExtensions : object {
    private static Serializer _serializer;
    private static Deserializer _deserializer;
    public static Serializer Serializer { get; public set; }
    public static Deserializer Deserializer { get; public set; }
    private static JsonExtensions();
    public static Serializer get_Serializer();
    public static void set_Serializer(Serializer value);
    public static Deserializer get_Deserializer();
    public static void set_Deserializer(Deserializer value);
    public static string SerializeToJson(object value);
    public static T DeserializeFromJson(string jsonString);
    public static JwtHeader DeserializeJwtHeader(string jsonString);
    public static JwtPayload DeserializeJwtPayload(string jsonString);
}
public static class System.IdentityModel.Tokens.Jwt.JwtConstants : object {
    public static string HeaderType;
    public static string HeaderTypeAlt;
    public static string TokenType;
    public static string TokenTypeAlt;
    public static string JsonCompactSerializationRegex;
    public static string JweCompactSerializationRegex;
    internal static int JweSegmentCount;
    internal static int JwsSegmentCount;
    internal static int MaxJwtSegmentCount;
    public static string DirectKeyUseAlg;
}
public class System.IdentityModel.Tokens.Jwt.JwtHeader : Dictionary`2<string, object> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EncryptingCredentials <EncryptingCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SigningCredentials <SigningCredentials>k__BackingField;
    public string Alg { get; private set; }
    public string Cty { get; private set; }
    public string Enc { get; private set; }
    public EncryptingCredentials EncryptingCredentials { get; private set; }
    public string IV { get; }
    public string Kid { get; private set; }
    public SigningCredentials SigningCredentials { get; private set; }
    public string Typ { get; private set; }
    public string X5t { get; }
    public JwtHeader(SigningCredentials signingCredentials);
    public JwtHeader(EncryptingCredentials encryptingCredentials);
    public JwtHeader(SigningCredentials signingCredentials, IDictionary`2<string, string> outboundAlgorithmMap);
    public JwtHeader(EncryptingCredentials encryptingCredentials, IDictionary`2<string, string> outboundAlgorithmMap);
    public string get_Alg();
    private void set_Alg(string value);
    public string get_Cty();
    private void set_Cty(string value);
    public string get_Enc();
    private void set_Enc(string value);
    [CompilerGeneratedAttribute]
public EncryptingCredentials get_EncryptingCredentials();
    [CompilerGeneratedAttribute]
private void set_EncryptingCredentials(EncryptingCredentials value);
    public string get_IV();
    public string get_Kid();
    private void set_Kid(string value);
    [CompilerGeneratedAttribute]
public SigningCredentials get_SigningCredentials();
    [CompilerGeneratedAttribute]
private void set_SigningCredentials(SigningCredentials value);
    public string get_Typ();
    private void set_Typ(string value);
    public string get_X5t();
    public static JwtHeader Base64UrlDeserialize(string base64UrlEncodedJsonString);
    public virtual string Base64UrlEncode();
    public static JwtHeader Deserialize(string jsonString);
    internal string GetStandardClaim(string claimType);
    public virtual string SerializeToJson();
}
public class System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames : ValueType {
    public static string Alg;
    public static string Cty;
    public static string Enc;
    public static string IV;
    public static string Jku;
    public static string Jwk;
    public static string Kid;
    public static string Typ;
    public static string X5c;
    public static string X5t;
    public static string X5u;
    public static string Zip;
}
public class System.IdentityModel.Tokens.Jwt.JwtPayload : Dictionary`2<string, object> {
    public string Actort { get; }
    public string Acr { get; }
    public IList`1<string> Amr { get; }
    public Nullable`1<int> AuthTime { get; }
    public IList`1<string> Aud { get; }
    public string Azp { get; }
    public string CHash { get; }
    public Nullable`1<int> Exp { get; }
    public string Jti { get; }
    public Nullable`1<int> Iat { get; }
    public string Iss { get; }
    public Nullable`1<int> Nbf { get; }
    public string Nonce { get; }
    public string Sub { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public IEnumerable`1<Claim> Claims { get; }
    public JwtPayload(IEnumerable`1<Claim> claims);
    public JwtPayload(string issuer, string audience, IEnumerable`1<Claim> claims, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires);
    public JwtPayload(string issuer, string audience, IEnumerable`1<Claim> claims, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, Nullable`1<DateTime> issuedAt);
    public string get_Actort();
    public string get_Acr();
    public IList`1<string> get_Amr();
    public Nullable`1<int> get_AuthTime();
    public IList`1<string> get_Aud();
    public string get_Azp();
    public string get_CHash();
    public Nullable`1<int> get_Exp();
    public string get_Jti();
    public Nullable`1<int> get_Iat();
    public string get_Iss();
    public Nullable`1<int> get_Nbf();
    public string get_Nonce();
    public string get_Sub();
    public DateTime get_ValidFrom();
    public DateTime get_ValidTo();
    public virtual IEnumerable`1<Claim> get_Claims();
    private void AddClaimsFromJToken(List`1<Claim> claims, string claimType, JToken jtoken, string issuer);
    private void AddDefaultClaimFromJToken(List`1<Claim> claims, string claimType, JToken jtoken, string issuer);
    public void AddClaim(Claim claim);
    public void AddClaims(IEnumerable`1<Claim> claims);
    internal static object GetClaimValueUsingValueType(Claim claim);
    internal static string GetClaimValueType(object obj);
    internal string GetStandardClaim(string claimType);
    internal Nullable`1<int> GetIntClaim(string claimType);
    internal IList`1<string> GetIListClaims(string claimType);
    private DateTime GetDateTime(string key);
    public virtual string SerializeToJson();
    public virtual string Base64UrlEncode();
    public static JwtPayload Base64UrlDeserialize(string base64UrlEncodedJsonString);
    public static JwtPayload Deserialize(string jsonString);
}
public class System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames : ValueType {
    public static string Actort;
    public static string Acr;
    public static string Amr;
    public static string Aud;
    public static string AuthTime;
    public static string Azp;
    public static string Birthdate;
    public static string CHash;
    public static string AtHash;
    public static string Email;
    public static string Exp;
    public static string Gender;
    public static string FamilyName;
    public static string GivenName;
    public static string Iat;
    public static string Iss;
    public static string Jti;
    public static string NameId;
    public static string Nonce;
    public static string Nbf;
    public static string Prn;
    public static string Sid;
    public static string Sub;
    public static string Typ;
    public static string UniqueName;
    public static string Website;
}
public class System.IdentityModel.Tokens.Jwt.JwtSecurityToken : SecurityToken {
    private JwtPayload _payload;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private JwtHeader <Header>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private JwtSecurityToken <InnerToken>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RawAuthenticationTag>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RawCiphertext>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RawData>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RawEncryptedKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RawInitializationVector>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RawHeader>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RawPayload>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RawSignature>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SecurityKey <SigningKey>k__BackingField;
    public string Actor { get; }
    public IEnumerable`1<string> Audiences { get; }
    public IEnumerable`1<Claim> Claims { get; }
    public string EncodedHeader { get; }
    public string EncodedPayload { get; }
    public JwtHeader Header { get; internal set; }
    public string Id { get; }
    public string Issuer { get; }
    public JwtPayload Payload { get; internal set; }
    public JwtSecurityToken InnerToken { get; internal set; }
    public string RawAuthenticationTag { get; private set; }
    public string RawCiphertext { get; private set; }
    public string RawData { get; private set; }
    public string RawEncryptedKey { get; private set; }
    public string RawInitializationVector { get; private set; }
    public string RawHeader { get; internal set; }
    public string RawPayload { get; internal set; }
    public string RawSignature { get; internal set; }
    public SecurityKey SecurityKey { get; }
    public string SignatureAlgorithm { get; }
    public SigningCredentials SigningCredentials { get; }
    public EncryptingCredentials EncryptingCredentials { get; }
    public SecurityKey SigningKey { get; public set; }
    public string Subject { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public JwtSecurityToken(string jwtEncodedString);
    public JwtSecurityToken(JwtHeader header, JwtPayload payload, string rawHeader, string rawPayload, string rawSignature);
    public JwtSecurityToken(JwtHeader header, JwtSecurityToken innerToken, string rawHeader, string rawEncryptedKey, string rawInitializationVector, string rawCiphertext, string rawAuthenticationTag);
    public JwtSecurityToken(JwtHeader header, JwtPayload payload);
    public JwtSecurityToken(string issuer, string audience, IEnumerable`1<Claim> claims, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, SigningCredentials signingCredentials);
    public string get_Actor();
    public IEnumerable`1<string> get_Audiences();
    public IEnumerable`1<Claim> get_Claims();
    public virtual string get_EncodedHeader();
    public virtual string get_EncodedPayload();
    [CompilerGeneratedAttribute]
public JwtHeader get_Header();
    [CompilerGeneratedAttribute]
internal void set_Header(JwtHeader value);
    public virtual string get_Id();
    public virtual string get_Issuer();
    public JwtPayload get_Payload();
    internal void set_Payload(JwtPayload value);
    [CompilerGeneratedAttribute]
public JwtSecurityToken get_InnerToken();
    [CompilerGeneratedAttribute]
internal void set_InnerToken(JwtSecurityToken value);
    [CompilerGeneratedAttribute]
public string get_RawAuthenticationTag();
    [CompilerGeneratedAttribute]
private void set_RawAuthenticationTag(string value);
    [CompilerGeneratedAttribute]
public string get_RawCiphertext();
    [CompilerGeneratedAttribute]
private void set_RawCiphertext(string value);
    [CompilerGeneratedAttribute]
public string get_RawData();
    [CompilerGeneratedAttribute]
private void set_RawData(string value);
    [CompilerGeneratedAttribute]
public string get_RawEncryptedKey();
    [CompilerGeneratedAttribute]
private void set_RawEncryptedKey(string value);
    [CompilerGeneratedAttribute]
public string get_RawInitializationVector();
    [CompilerGeneratedAttribute]
private void set_RawInitializationVector(string value);
    [CompilerGeneratedAttribute]
public string get_RawHeader();
    [CompilerGeneratedAttribute]
internal void set_RawHeader(string value);
    [CompilerGeneratedAttribute]
public string get_RawPayload();
    [CompilerGeneratedAttribute]
internal void set_RawPayload(string value);
    [CompilerGeneratedAttribute]
public string get_RawSignature();
    [CompilerGeneratedAttribute]
internal void set_RawSignature(string value);
    public virtual SecurityKey get_SecurityKey();
    public string get_SignatureAlgorithm();
    public SigningCredentials get_SigningCredentials();
    public EncryptingCredentials get_EncryptingCredentials();
    [CompilerGeneratedAttribute]
public virtual SecurityKey get_SigningKey();
    [CompilerGeneratedAttribute]
public virtual void set_SigningKey(SecurityKey value);
    public string get_Subject();
    public virtual DateTime get_ValidFrom();
    public virtual DateTime get_ValidTo();
    public virtual string ToString();
    internal void Decode(String[] tokenParts, string rawData);
    private void DecodeJws(String[] tokenParts);
    private void DecodeJwe(String[] tokenParts);
}
public class System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler : SecurityTokenHandler {
    internal static Regex RegexJws;
    internal static Regex RegexJwe;
    private int _defaultTokenLifetimeInMinutes;
    private ISet`1<string> _inboundClaimFilter;
    private IDictionary`2<string, string> _inboundClaimTypeMap;
    private static string _jsonClaimTypeProperty;
    private int _maximumTokenSizeInBytes;
    private static string _namespace;
    private IDictionary`2<string, string> _outboundClaimTypeMap;
    private IDictionary`2<string, string> _outboundAlgorithmMap;
    private static string _shortClaimTypeProperty;
    public static int DefaultTokenLifetimeInMinutes;
    public static IDictionary`2<string, string> DefaultInboundClaimTypeMap;
    public static IDictionary`2<string, string> DefaultOutboundClaimTypeMap;
    public static ISet`1<string> DefaultInboundClaimFilter;
    public static IDictionary`2<string, string> DefaultOutboundAlgorithmMap;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <SetDefaultTimesOnTokenCreation>k__BackingField;
    public IDictionary`2<string, string> InboundClaimTypeMap { get; public set; }
    public IDictionary`2<string, string> OutboundClaimTypeMap { get; public set; }
    public IDictionary`2<string, string> OutboundAlgorithmMap { get; }
    public ISet`1<string> InboundClaimFilter { get; public set; }
    public static string ShortClaimTypeProperty { get; public set; }
    public static string JsonClaimTypeProperty { get; public set; }
    public bool CanValidateToken { get; }
    public bool CanWriteToken { get; }
    public int TokenLifetimeInMinutes { get; public set; }
    public Type TokenType { get; }
    public int MaximumTokenSizeInBytes { get; public set; }
    [DefaultValueAttribute("True")]
public bool SetDefaultTimesOnTokenCreation { get; public set; }
    private static JwtSecurityTokenHandler();
    public IDictionary`2<string, string> get_InboundClaimTypeMap();
    public void set_InboundClaimTypeMap(IDictionary`2<string, string> value);
    public IDictionary`2<string, string> get_OutboundClaimTypeMap();
    public void set_OutboundClaimTypeMap(IDictionary`2<string, string> value);
    public IDictionary`2<string, string> get_OutboundAlgorithmMap();
    public ISet`1<string> get_InboundClaimFilter();
    public void set_InboundClaimFilter(ISet`1<string> value);
    public static string get_ShortClaimTypeProperty();
    public static void set_ShortClaimTypeProperty(string value);
    public static string get_JsonClaimTypeProperty();
    public static void set_JsonClaimTypeProperty(string value);
    public virtual bool get_CanValidateToken();
    public virtual bool get_CanWriteToken();
    public int get_TokenLifetimeInMinutes();
    public void set_TokenLifetimeInMinutes(int value);
    public virtual Type get_TokenType();
    public sealed virtual int get_MaximumTokenSizeInBytes();
    public sealed virtual void set_MaximumTokenSizeInBytes(int value);
    public virtual bool CanReadToken(string tokenString);
    public virtual string CreateEncodedJwt(SecurityTokenDescriptor tokenDescriptor);
    public virtual string CreateEncodedJwt(string issuer, string audience, ClaimsIdentity subject, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, Nullable`1<DateTime> issuedAt, SigningCredentials signingCredentials);
    public virtual string CreateEncodedJwt(string issuer, string audience, ClaimsIdentity subject, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, Nullable`1<DateTime> issuedAt, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials);
    public virtual JwtSecurityToken CreateJwtSecurityToken(SecurityTokenDescriptor tokenDescriptor);
    public virtual JwtSecurityToken CreateJwtSecurityToken(string issuer, string audience, ClaimsIdentity subject, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, Nullable`1<DateTime> issuedAt, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials);
    public virtual JwtSecurityToken CreateJwtSecurityToken(string issuer, string audience, ClaimsIdentity subject, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, Nullable`1<DateTime> issuedAt, SigningCredentials signingCredentials);
    public virtual SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor);
    private JwtSecurityToken CreateJwtSecurityTokenPrivate(string issuer, string audience, ClaimsIdentity subject, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, Nullable`1<DateTime> issuedAt, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials);
    private JwtSecurityToken EncryptToken(JwtSecurityToken innerJwt, EncryptingCredentials encryptingCredentials);
    private static Byte[] GenerateKeyBytes(int size);
    [IteratorStateMachineAttribute("System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler/<OutboundClaimTypeTransform>d__59")]
private IEnumerable`1<Claim> OutboundClaimTypeTransform(IEnumerable`1<Claim> claims);
    public JwtSecurityToken ReadJwtToken(string token);
    public virtual SecurityToken ReadToken(string token);
    public virtual SecurityToken ReadToken(XmlReader reader, TokenValidationParameters validationParameters);
    public virtual ClaimsPrincipal ValidateToken(string token, TokenValidationParameters validationParameters, SecurityToken& validatedToken);
    protected ClaimsPrincipal ValidateTokenPayload(JwtSecurityToken jwt, TokenValidationParameters validationParameters);
    public virtual string WriteToken(SecurityToken token);
    internal static string CreateEncodedSignature(string input, SigningCredentials signingCredentials);
    private bool ValidateSignature(Byte[] encodedBytes, Byte[] signature, SecurityKey key, string algorithm, TokenValidationParameters validationParameters);
    protected virtual JwtSecurityToken ValidateSignature(string token, TokenValidationParameters validationParameters);
    [IteratorStateMachineAttribute("System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler/<GetAllKeys>d__69")]
private IEnumerable`1<SecurityKey> GetAllKeys(string token, JwtSecurityToken securityToken, string kid, TokenValidationParameters validationParameters);
    [IteratorStateMachineAttribute("System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler/<GetAllDecryptionKeys>d__70")]
private IEnumerable`1<SecurityKey> GetAllDecryptionKeys(TokenValidationParameters validationParameters);
    protected virtual ClaimsIdentity CreateClaimsIdentity(JwtSecurityToken jwt, string issuer, TokenValidationParameters validationParameters);
    protected virtual string CreateActorValue(ClaimsIdentity actor);
    protected virtual void ValidateAudience(IEnumerable`1<string> audiences, JwtSecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual void ValidateLifetime(Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, JwtSecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual string ValidateIssuer(string issuer, JwtSecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual SecurityKey ResolveIssuerSigningKey(string token, JwtSecurityToken jwtToken, TokenValidationParameters validationParameters);
    protected virtual SecurityKey ResolveTokenDecryptionKey(string token, JwtSecurityToken jwtToken, TokenValidationParameters validationParameters);
    private string DecryptToken(JwtSecurityToken jwtToken, CryptoProviderFactory cryptoProviderFactory, SecurityKey key);
    protected string DecryptToken(JwtSecurityToken jwtToken, TokenValidationParameters validationParameters);
    private IEnumerable`1<SecurityKey> GetContentEncryptionKeys(JwtSecurityToken jwtToken, TokenValidationParameters validationParameters);
    private Byte[] GetSymmetricSecurityKey(SecurityKey key);
    [CompilerGeneratedAttribute]
public bool get_SetDefaultTimesOnTokenCreation();
    [CompilerGeneratedAttribute]
public void set_SetDefaultTimesOnTokenCreation(bool value);
    protected virtual void ValidateIssuerSecurityKey(SecurityKey securityKey, JwtSecurityToken securityToken, TokenValidationParameters validationParameters);
    public virtual void WriteToken(XmlWriter writer, SecurityToken token);
}
internal static class System.IdentityModel.Tokens.Jwt.LogMessages : object {
    internal static string IDX10000;
    internal static string IDX10101;
    internal static string IDX10104;
    internal static string IDX10209;
    internal static string IDX10230;
    internal static string IDX10231;
    internal static string IDX10232;
    internal static string IDX10241;
    internal static string IDX10242;
    internal static string IDX10243;
    internal static string IDX10244;
    internal static string IDX10401;
    internal static string IDX10500;
    internal static string IDX10501;
    internal static string IDX10503;
    internal static string IDX10504;
    internal static string IDX10505;
    internal static string IDX10506;
    internal static string IDX10507;
    internal static string IDX10508;
    internal static string IDX10600;
    internal static string IDX10601;
    internal static string IDX10603;
    internal static string IDX10604;
    internal static string IDX10605;
    internal static string IDX10606;
    internal static string IDX10607;
    internal static string IDX10608;
    internal static string IDX10609;
    internal static string IDX10610;
    internal static string IDX10611;
    internal static string IDX10612;
    internal static string IDX10613;
    internal static string IDX10614;
    internal static string IDX10615;
    internal static string IDX10616;
    internal static string IDX10617;
    internal static string IDX10635;
    internal static string IDX10636;
    internal static string IDX10644;
    internal static string IDX10645;
    internal static string IDX10646;
    internal static string IDX10700;
    internal static string IDX10701;
    internal static string IDX10706;
    internal static string IDX10709;
    internal static string IDX10710;
    internal static string IDX10711;
    internal static string IDX10712;
    internal static string IDX10713;
    internal static string IDX10714;
    internal static string IDX10715;
    internal static string IDX10716;
    internal static string IDX10717;
    internal static string IDX10718;
    internal static string IDX10720;
    internal static string IDX10721;
    internal static string IDX10722;
    internal static string IDX10723;
    internal static string IDX10724;
    internal static string IDX10725;
    internal static string IDX10726;
    internal static string IDX10727;
    internal static string IDX10728;
    internal static string IDX10729;
    internal static string IDX10730;
    internal static string IDX10731;
    internal static string IDX10733;
    internal static string IDX10734;
    internal static string IDX10735;
    internal static string IDX10736;
    internal static string IDX10737;
    internal static string IDX10738;
}
public class System.IdentityModel.Tokens.Jwt.Serializer : MulticastDelegate {
    public Serializer(object object, IntPtr method);
    public virtual string Invoke(object obj);
    public virtual IAsyncResult BeginInvoke(object obj, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
