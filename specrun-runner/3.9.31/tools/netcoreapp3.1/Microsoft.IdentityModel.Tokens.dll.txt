public abstract class Microsoft.IdentityModel.Tokens.AsymmetricSecurityKey : SecurityKey {
    public bool HasPrivateKey { get; }
    public abstract virtual bool get_HasPrivateKey();
}
public class Microsoft.IdentityModel.Tokens.AsymmetricSignatureProvider : SignatureProvider {
    private ECDsa _ecdsa;
    private HashAlgorithmName _hashAlgorithm;
    private RSA _rsa;
    private bool _disposeRsa;
    private bool _disposeEcdsa;
    private bool _disposed;
    private IReadOnlyDictionary`2<string, int> _minimumAsymmetricKeySizeInBitsForSigningMap;
    private IReadOnlyDictionary`2<string, int> _minimumAsymmetricKeySizeInBitsForVerifyingMap;
    public static Dictionary`2<string, int> DefaultMinimumAsymmetricKeySizeInBitsForSigningMap;
    public static Dictionary`2<string, int> DefaultMinimumAsymmetricKeySizeInBitsForVerifyingMap;
    public IReadOnlyDictionary`2<string, int> MinimumAsymmetricKeySizeInBitsForSigningMap { get; }
    public IReadOnlyDictionary`2<string, int> MinimumAsymmetricKeySizeInBitsForVerifyingMap { get; }
    public AsymmetricSignatureProvider(SecurityKey key, string algorithm);
    public AsymmetricSignatureProvider(SecurityKey key, string algorithm, bool willCreateSignatures);
    private static AsymmetricSignatureProvider();
    public IReadOnlyDictionary`2<string, int> get_MinimumAsymmetricKeySizeInBitsForSigningMap();
    public IReadOnlyDictionary`2<string, int> get_MinimumAsymmetricKeySizeInBitsForVerifyingMap();
    private bool HasPrivateKey(SecurityKey key);
    protected virtual HashAlgorithmName GetHashAlgorithmName(string algorithm);
    private void ResolveAsymmetricAlgorithm(SecurityKey key, string algorithm, bool willCreateSignatures);
    public virtual Byte[] Sign(Byte[] input);
    public virtual bool Verify(Byte[] input, Byte[] signature);
    public virtual void ValidateAsymmetricSecurityKeySize(SecurityKey key, string algorithm, bool willCreateSignatures);
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.IdentityModel.Tokens.AudienceValidator : MulticastDelegate {
    public AudienceValidator(object object, IntPtr method);
    public virtual bool Invoke(IEnumerable`1<string> audiences, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(IEnumerable`1<string> audiences, SecurityToken securityToken, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider : object {
    private AuthenticatedKeys _authenticatedkeys;
    private string _hashAlgorithm;
    private SymmetricSignatureProvider _symmetricSignatureProvider;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SecurityKey <Key>k__BackingField;
    public string Algorithm { get; private set; }
    public string Context { get; public set; }
    public SecurityKey Key { get; private set; }
    public AuthenticatedEncryptionProvider(SecurityKey key, string algorithm);
    [CompilerGeneratedAttribute]
public string get_Algorithm();
    [CompilerGeneratedAttribute]
private void set_Algorithm(string value);
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(string value);
    [CompilerGeneratedAttribute]
public SecurityKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(SecurityKey value);
    public virtual AuthenticatedEncryptionResult Encrypt(Byte[] plaintext, Byte[] authenticatedData);
    public virtual AuthenticatedEncryptionResult Encrypt(Byte[] plaintext, Byte[] authenticatedData, Byte[] iv);
    public virtual Byte[] Decrypt(Byte[] ciphertext, Byte[] authenticatedData, Byte[] iv, Byte[] authenticationTag);
    protected virtual bool IsSupportedAlgorithm(SecurityKey key, string algorithm);
    private AuthenticatedKeys GetAlgorithmParameters(SecurityKey key, string algorithm);
    private string GetHashAlgorithm(string algorithm);
    protected virtual Byte[] GetKeyBytes(SecurityKey key);
    protected virtual void ValidateKeySize(SecurityKey key, string algorithm);
}
public class Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SecurityKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Byte[] <Ciphertext>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Byte[] <IV>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Byte[] <AuthenticationTag>k__BackingField;
    public SecurityKey Key { get; private set; }
    public Byte[] Ciphertext { get; private set; }
    public Byte[] IV { get; private set; }
    public Byte[] AuthenticationTag { get; private set; }
    public AuthenticatedEncryptionResult(SecurityKey key, Byte[] ciphertext, Byte[] iv, Byte[] authenticationTag);
    [CompilerGeneratedAttribute]
public SecurityKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(SecurityKey value);
    [CompilerGeneratedAttribute]
public Byte[] get_Ciphertext();
    [CompilerGeneratedAttribute]
private void set_Ciphertext(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_IV();
    [CompilerGeneratedAttribute]
private void set_IV(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_AuthenticationTag();
    [CompilerGeneratedAttribute]
private void set_AuthenticationTag(Byte[] value);
}
public static class Microsoft.IdentityModel.Tokens.Base64UrlEncoder : object {
    private static char base64PadCharacter;
    private static string doubleBase64PadCharacter;
    private static char base64Character62;
    private static char base64Character63;
    private static char base64UrlCharacter62;
    private static char _base64UrlCharacter63;
    private static Base64UrlEncoder();
    public static string Encode(string arg);
    public static string Encode(Byte[] inArray, int offset, int length);
    public static string Encode(Byte[] inArray);
    public static Byte[] DecodeBytes(string str);
    public static string Decode(string arg);
}
public class Microsoft.IdentityModel.Tokens.CryptoProviderFactory : object {
    private static CryptoProviderFactory _default;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICryptoProvider <CustomCryptoProvider>k__BackingField;
    public static CryptoProviderFactory Default { get; public set; }
    public ICryptoProvider CustomCryptoProvider { get; public set; }
    private static CryptoProviderFactory();
    public CryptoProviderFactory(CryptoProviderFactory other);
    public static CryptoProviderFactory get_Default();
    public static void set_Default(CryptoProviderFactory value);
    [CompilerGeneratedAttribute]
public ICryptoProvider get_CustomCryptoProvider();
    [CompilerGeneratedAttribute]
public void set_CustomCryptoProvider(ICryptoProvider value);
    public virtual bool IsSupportedAlgorithm(string algorithm);
    private bool IsSupportedAuthenticatedEncryptionAlgorithm(string algorithm, SecurityKey key);
    private bool IsSupportedKeyWrapAlgorithm(string algorithm, SecurityKey key);
    public virtual bool IsSupportedAlgorithm(string algorithm, SecurityKey key);
    private bool IsEcdsaAlgorithmSupported(string algorithm);
    private bool IsRsaAlgorithmSupported(string algorithm);
    private bool IsSymmetricAlgorithmSupported(string algorithm);
    public virtual AuthenticatedEncryptionProvider CreateAuthenticatedEncryptionProvider(SecurityKey key, string algorithm);
    public virtual KeyWrapProvider CreateKeyWrapProvider(SecurityKey key, string algorithm);
    private KeyWrapProvider CreateKeyWrapProvider(SecurityKey key, string algorithm, bool willUnwrap);
    public virtual SignatureProvider CreateForSigning(SecurityKey key, string algorithm);
    public virtual SignatureProvider CreateForVerifying(SecurityKey key, string algorithm);
    public virtual void ReleaseSignatureProvider(SignatureProvider signatureProvider);
    public virtual void ReleaseHashAlgorithm(HashAlgorithm hashAlgorithm);
    public virtual void ReleaseKeyWrapProvider(KeyWrapProvider provider);
    public virtual void ReleaseRsaKeyWrapProvider(RsaKeyWrapProvider provider);
    public virtual HashAlgorithm CreateHashAlgorithm(string algorithm);
    public virtual KeyedHashAlgorithm CreateKeyedHashAlgorithm(Byte[] keyBytes, string algorithm);
    private SignatureProvider CreateSignatureProvider(SecurityKey key, string algorithm, bool willCreateSignatures);
    private bool IsSupportedHashAlgorithm(string algorithm);
}
public static class Microsoft.IdentityModel.Tokens.DateTimeUtil : object {
    public static DateTime Add(DateTime time, TimeSpan timespan);
    public static DateTime GetMaxValue(DateTimeKind kind);
    public static DateTime GetMinValue(DateTimeKind kind);
}
internal class Microsoft.IdentityModel.Tokens.ECDsaAlgorithm : object {
    public ECDsa ecdsa;
    public bool dispose;
    public static Dictionary`2<string, int> DefaultECDsaKeySizeInBitsMap;
    private static ECDsaAlgorithm();
}
public class Microsoft.IdentityModel.Tokens.ECDsaSecurityKey : AsymmetricSecurityKey {
    private Nullable`1<bool> _hasPrivateKey;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ECDsa <ECDsa>k__BackingField;
    public ECDsa ECDsa { get; private set; }
    public bool HasPrivateKey { get; }
    public int KeySize { get; }
    public ECDsaSecurityKey(ECDsa ecdsa);
    [CompilerGeneratedAttribute]
public ECDsa get_ECDsa();
    [CompilerGeneratedAttribute]
private void set_ECDsa(ECDsa value);
    public virtual bool get_HasPrivateKey();
    public virtual int get_KeySize();
}
public class Microsoft.IdentityModel.Tokens.EncryptingCredentials : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Alg>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Enc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CryptoProviderFactory <CryptoProviderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SecurityKey <Key>k__BackingField;
    public string Alg { get; private set; }
    public string Enc { get; private set; }
    public CryptoProviderFactory CryptoProviderFactory { get; public set; }
    public SecurityKey Key { get; private set; }
    public EncryptingCredentials(SecurityKey key, string alg, string enc);
    [CompilerGeneratedAttribute]
public string get_Alg();
    [CompilerGeneratedAttribute]
private void set_Alg(string value);
    [CompilerGeneratedAttribute]
public string get_Enc();
    [CompilerGeneratedAttribute]
private void set_Enc(string value);
    [CompilerGeneratedAttribute]
public CryptoProviderFactory get_CryptoProviderFactory();
    [CompilerGeneratedAttribute]
public void set_CryptoProviderFactory(CryptoProviderFactory value);
    [CompilerGeneratedAttribute]
public SecurityKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(SecurityKey value);
}
public static class Microsoft.IdentityModel.Tokens.EpochTime : object {
    public static DateTime UnixEpoch;
    private static EpochTime();
    public static long GetIntDate(DateTime datetime);
    public static DateTime DateTime(long secondsSinceUnixEpoch);
}
public interface Microsoft.IdentityModel.Tokens.ICryptoProvider {
    public abstract virtual bool IsSupportedAlgorithm(string algorithm, Object[] args);
    public abstract virtual object Create(string algorithm, Object[] args);
    public abstract virtual void Release(object cryptoInstance);
}
public interface Microsoft.IdentityModel.Tokens.ISecurityTokenValidator {
    public bool CanValidateToken { get; }
    public int MaximumTokenSizeInBytes { get; public set; }
    public abstract virtual bool CanReadToken(string securityToken);
    public abstract virtual bool get_CanValidateToken();
    public abstract virtual int get_MaximumTokenSizeInBytes();
    public abstract virtual void set_MaximumTokenSizeInBytes(int value);
    public abstract virtual ClaimsPrincipal ValidateToken(string securityToken, TokenValidationParameters validationParameters, SecurityToken& validatedToken);
}
public class Microsoft.IdentityModel.Tokens.IssuerSigningKeyResolver : MulticastDelegate {
    public IssuerSigningKeyResolver(object object, IntPtr method);
    public virtual IEnumerable`1<SecurityKey> Invoke(string token, SecurityToken securityToken, string kid, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(string token, SecurityToken securityToken, string kid, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual IEnumerable`1<SecurityKey> EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.IssuerSigningKeyValidator : MulticastDelegate {
    public IssuerSigningKeyValidator(object object, IntPtr method);
    public virtual bool Invoke(SecurityKey securityKey, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(SecurityKey securityKey, SecurityToken securityToken, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.IssuerValidator : MulticastDelegate {
    public IssuerValidator(object object, IntPtr method);
    public virtual string Invoke(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public interface Microsoft.IdentityModel.Tokens.ITokenReplayCache {
    public abstract virtual bool TryAdd(string securityToken, DateTime expiresOn);
    public abstract virtual bool TryFind(string securityToken);
}
public static class Microsoft.IdentityModel.Tokens.JsonWebAlgorithmsKeyTypes : object {
    public static string EllipticCurve;
    public static string RSA;
    public static string Octet;
}
[JsonObjectAttribute]
public class Microsoft.IdentityModel.Tokens.JsonWebKey : SecurityKey {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<string, object> <AdditionalData>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Alg>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Crv>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <D>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DP>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DQ>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <E>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <K>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IList`1<string> <KeyOps>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Kid>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Kty>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <N>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IList`1<string> <Oth>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <P>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Q>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <QI>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Use>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <X>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IList`1<string> <X5c>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <X5t>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <X5tS256>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <X5u>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Y>k__BackingField;
    [JsonExtensionDataAttribute]
public IDictionary`2<string, object> AdditionalData { get; }
    [JsonPropertyAttribute]
public string Alg { get; public set; }
    [JsonPropertyAttribute]
public string Crv { get; public set; }
    [JsonPropertyAttribute]
public string D { get; public set; }
    [JsonPropertyAttribute]
public string DP { get; public set; }
    [JsonPropertyAttribute]
public string DQ { get; public set; }
    [JsonPropertyAttribute]
public string E { get; public set; }
    [JsonPropertyAttribute]
public string K { get; public set; }
    [JsonPropertyAttribute]
public IList`1<string> KeyOps { get; private set; }
    [JsonPropertyAttribute]
public string Kid { get; public set; }
    [JsonPropertyAttribute]
public string Kty { get; public set; }
    [JsonPropertyAttribute]
public string N { get; public set; }
    [JsonPropertyAttribute]
public IList`1<string> Oth { get; public set; }
    [JsonPropertyAttribute]
public string P { get; public set; }
    [JsonPropertyAttribute]
public string Q { get; public set; }
    [JsonPropertyAttribute]
public string QI { get; public set; }
    [JsonPropertyAttribute]
public string Use { get; public set; }
    [JsonPropertyAttribute]
public string X { get; public set; }
    [JsonPropertyAttribute]
public IList`1<string> X5c { get; private set; }
    [JsonPropertyAttribute]
public string X5t { get; public set; }
    [JsonPropertyAttribute]
public string X5tS256 { get; public set; }
    [JsonPropertyAttribute]
public string X5u { get; public set; }
    [JsonPropertyAttribute]
public string Y { get; public set; }
    public int KeySize { get; }
    public bool HasPrivateKey { get; }
    public JsonWebKey(string json);
    public static JsonWebKey Create(string json);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
public string get_Alg();
    [CompilerGeneratedAttribute]
public void set_Alg(string value);
    [CompilerGeneratedAttribute]
public string get_Crv();
    [CompilerGeneratedAttribute]
public void set_Crv(string value);
    [CompilerGeneratedAttribute]
public string get_D();
    [CompilerGeneratedAttribute]
public void set_D(string value);
    [CompilerGeneratedAttribute]
public string get_DP();
    [CompilerGeneratedAttribute]
public void set_DP(string value);
    [CompilerGeneratedAttribute]
public string get_DQ();
    [CompilerGeneratedAttribute]
public void set_DQ(string value);
    [CompilerGeneratedAttribute]
public string get_E();
    [CompilerGeneratedAttribute]
public void set_E(string value);
    [CompilerGeneratedAttribute]
public string get_K();
    [CompilerGeneratedAttribute]
public void set_K(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_KeyOps();
    [CompilerGeneratedAttribute]
private void set_KeyOps(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Kid();
    [CompilerGeneratedAttribute]
public void set_Kid(string value);
    [CompilerGeneratedAttribute]
public string get_Kty();
    [CompilerGeneratedAttribute]
public void set_Kty(string value);
    [CompilerGeneratedAttribute]
public string get_N();
    [CompilerGeneratedAttribute]
public void set_N(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Oth();
    [CompilerGeneratedAttribute]
public void set_Oth(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_P();
    [CompilerGeneratedAttribute]
public void set_P(string value);
    [CompilerGeneratedAttribute]
public string get_Q();
    [CompilerGeneratedAttribute]
public void set_Q(string value);
    [CompilerGeneratedAttribute]
public string get_QI();
    [CompilerGeneratedAttribute]
public void set_QI(string value);
    [CompilerGeneratedAttribute]
public string get_Use();
    [CompilerGeneratedAttribute]
public void set_Use(string value);
    [CompilerGeneratedAttribute]
public string get_X();
    [CompilerGeneratedAttribute]
public void set_X(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_X5c();
    [CompilerGeneratedAttribute]
private void set_X5c(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_X5t();
    [CompilerGeneratedAttribute]
public void set_X5t(string value);
    [CompilerGeneratedAttribute]
public string get_X5tS256();
    [CompilerGeneratedAttribute]
public void set_X5tS256(string value);
    [CompilerGeneratedAttribute]
public string get_X5u();
    [CompilerGeneratedAttribute]
public void set_X5u(string value);
    [CompilerGeneratedAttribute]
public string get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(string value);
    public virtual int get_KeySize();
    public bool get_HasPrivateKey();
    internal ECDsaCng CreateECDsa(string algorithm, bool usePrivateKey);
    internal RSAParameters CreateRsaParameters();
    private UInt32 GetKeyByteCount(string curveId);
    private UInt32 GetMagicValue(string curveId, bool willCreateSignatures);
}
public static class Microsoft.IdentityModel.Tokens.JsonWebKeyECTypes : object {
    public static string P256;
    public static string P384;
    public static string P512;
    public static string P521;
}
public static class Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames : object {
    public static string Alg;
    public static string Crv;
    public static string D;
    public static string DP;
    public static string DQ;
    public static string E;
    public static string K;
    public static string KeyOps;
    public static string Keys;
    public static string Kid;
    public static string Kty;
    public static string N;
    public static string Oth;
    public static string P;
    public static string Q;
    public static string R;
    public static string T;
    public static string QI;
    public static string Use;
    public static string X5c;
    public static string X5t;
    public static string X5tS256;
    public static string X5u;
    public static string X;
    public static string Y;
}
[JsonObjectAttribute]
public class Microsoft.IdentityModel.Tokens.JsonWebKeySet : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDictionary`2<string, object> <AdditionalData>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IList`1<JsonWebKey> <Keys>k__BackingField;
    [JsonExtensionDataAttribute]
public IDictionary`2<string, object> AdditionalData { get; }
    [JsonPropertyAttribute]
public IList`1<JsonWebKey> Keys { get; }
    public JsonWebKeySet(string json);
    public static JsonWebKeySet Create(string json);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
public IList`1<JsonWebKey> get_Keys();
    public IList`1<SecurityKey> GetSigningKeys();
}
public static class Microsoft.IdentityModel.Tokens.JsonWebKeySetParameterNames : object {
    public static string Keys;
}
public static class Microsoft.IdentityModel.Tokens.JsonWebKeyUseNames : object {
    public static string Sig;
    public static string Enc;
}
public abstract class Microsoft.IdentityModel.Tokens.KeyWrapProvider : object {
    public string Algorithm { get; }
    public string Context { get; public set; }
    public SecurityKey Key { get; }
    public abstract virtual string get_Algorithm();
    public abstract virtual string get_Context();
    public abstract virtual void set_Context(string value);
    public abstract virtual SecurityKey get_Key();
    public sealed virtual void Dispose();
    protected abstract virtual void Dispose(bool disposing);
    public abstract virtual Byte[] UnwrapKey(Byte[] keyBytes);
    public abstract virtual Byte[] WrapKey(Byte[] keyBytes);
}
public class Microsoft.IdentityModel.Tokens.LifetimeValidator : MulticastDelegate {
    public LifetimeValidator(object object, IntPtr method);
    public virtual bool Invoke(Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, SecurityToken securityToken, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal static class Microsoft.IdentityModel.Tokens.LogMessages : object {
    internal static string IDX10000;
    internal static string IDX10100;
    internal static string IDX10102;
    internal static string IDX10103;
    internal static string IDX10204;
    internal static string IDX10205;
    internal static string IDX10207;
    internal static string IDX10208;
    internal static string IDX10211;
    internal static string IDX10214;
    internal static string IDX10222;
    internal static string IDX10223;
    internal static string IDX10224;
    internal static string IDX10225;
    internal static string IDX10227;
    internal static string IDX10228;
    internal static string IDX10229;
    internal static string IDX10233;
    internal static string IDX10234;
    internal static string IDX10235;
    internal static string IDX10236;
    internal static string IDX10237;
    internal static string IDX10238;
    internal static string IDX10239;
    internal static string IDX10240;
    internal static string IDX10245;
    internal static string IDX14700;
    internal static string IDX10600;
    internal static string IDX10603;
    internal static string IDX10613;
    internal static string IDX10623;
    internal static string IDX10624;
    internal static string IDX10627;
    internal static string IDX10628;
    internal static string IDX10630;
    internal static string IDX10631;
    internal static string IDX10634;
    internal static string IDX10638;
    internal static string IDX10640;
    internal static string IDX10641;
    internal static string IDX10642;
    internal static string IDX10643;
    internal static string IDX10644;
    internal static string IDX10645;
    internal static string IDX10646;
    internal static string IDX10647;
    internal static string IDX10648;
    internal static string IDX10649;
    internal static string IDX10650;
    internal static string IDX10651;
    internal static string IDX10652;
    internal static string IDX10653;
    internal static string IDX10654;
    internal static string IDX10655;
    internal static string IDX10656;
    internal static string IDX10657;
    internal static string IDX10658;
    internal static string IDX10659;
    internal static string IDX10660;
    internal static string IDX10661;
    internal static string IDX10662;
    internal static string IDX10663;
    internal static string IDX10664;
    internal static string IDX10665;
    internal static string IDX10666;
    internal static string IDX10667;
    internal static string IDX10668;
    internal static string IDX10669;
    internal static string IDX10670;
    internal static string IDX10671;
    internal static string IDX10700;
    internal static string IDX10701;
    internal static string IDX10702;
    internal static string IDX10703;
    internal static string IDX10801;
    internal static string IDX10802;
    internal static string IDX10804;
    internal static string IDX10805;
    internal static string IDX10806;
}
internal class Microsoft.IdentityModel.Tokens.RsaAlgorithm : object {
    public RSA rsa;
    public bool dispose;
}
public class Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider : KeyWrapProvider {
    private RSA _rsa;
    private bool _disposeRsa;
    private bool _disposed;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SecurityKey <Key>k__BackingField;
    public string Algorithm { get; }
    public string Context { get; public set; }
    public SecurityKey Key { get; }
    public RsaKeyWrapProvider(SecurityKey key, string algorithm, bool willUnwrap);
    [CompilerGeneratedAttribute]
public virtual string get_Algorithm();
    [CompilerGeneratedAttribute]
public virtual string get_Context();
    [CompilerGeneratedAttribute]
public virtual void set_Context(string value);
    [CompilerGeneratedAttribute]
public virtual SecurityKey get_Key();
    protected virtual void Dispose(bool disposing);
    protected virtual bool IsSupportedAlgorithm(SecurityKey key, string algorithm);
    public virtual Byte[] UnwrapKey(Byte[] keyBytes);
    public virtual Byte[] WrapKey(Byte[] keyBytes);
}
public class Microsoft.IdentityModel.Tokens.RsaSecurityKey : AsymmetricSecurityKey {
    private Nullable`1<bool> _hasPrivateKey;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private RSAParameters <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private RSA <Rsa>k__BackingField;
    public bool HasPrivateKey { get; }
    public int KeySize { get; }
    public RSAParameters Parameters { get; private set; }
    public RSA Rsa { get; private set; }
    public RsaSecurityKey(RSAParameters rsaParameters);
    public RsaSecurityKey(RSA rsa);
    public virtual bool get_HasPrivateKey();
    public virtual int get_KeySize();
    [CompilerGeneratedAttribute]
public RSAParameters get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(RSAParameters value);
    [CompilerGeneratedAttribute]
public RSA get_Rsa();
    [CompilerGeneratedAttribute]
private void set_Rsa(RSA value);
}
public static class Microsoft.IdentityModel.Tokens.SecurityAlgorithms : object {
    public static string Aes128Encryption;
    public static string Aes128KeyWrap;
    public static string Aes192Encryption;
    public static string Aes192KeyWrap;
    public static string Aes256Encryption;
    public static string Aes256KeyWrap;
    public static string DesEncryption;
    public static string ExclusiveC14n;
    public static string ExclusiveC14nWithComments;
    public static string HmacSha256Signature;
    public static string HmacSha384Signature;
    public static string HmacSha512Signature;
    public static string Ripemd160Digest;
    public static string RsaOaepKeyWrap;
    public static string RsaSha256Signature;
    public static string RsaSha384Signature;
    public static string RsaSha512Signature;
    public static string RsaV15KeyWrap;
    public static string Sha256Digest;
    public static string Sha384Digest;
    public static string Sha512Digest;
    public static string EcdsaSha256Signature;
    public static string EcdsaSha384Signature;
    public static string EcdsaSha512Signature;
    public static string RsaSsaPssSha256Signature;
    public static string RsaSsaPssSha384Signature;
    public static string RsaSsaPssSha512Signature;
    public static string EcdsaSha256;
    public static string EcdsaSha384;
    public static string EcdsaSha512;
    public static string HmacSha256;
    public static string HmacSha384;
    public static string HmacSha512;
    public static string None;
    public static string RsaSha256;
    public static string RsaSha384;
    public static string RsaSha512;
    public static string RsaSsaPssSha256;
    public static string RsaSsaPssSha384;
    public static string RsaSsaPssSha512;
    public static string Sha256;
    public static string Sha384;
    public static string Sha512;
    public static string Aes128KW;
    public static string Aes256KW;
    public static string RsaPKCS1;
    public static string RsaOAEP;
    public static string Aes128CbcHmacSha256;
    public static string Aes192CbcHmacSha384;
    public static string Aes256CbcHmacSha512;
}
public abstract class Microsoft.IdentityModel.Tokens.SecurityKey : object {
    private CryptoProviderFactory _cryptoProviderFactory;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <KeyId>k__BackingField;
    public int KeySize { get; }
    public string KeyId { get; public set; }
    public CryptoProviderFactory CryptoProviderFactory { get; public set; }
    public abstract virtual int get_KeySize();
    [CompilerGeneratedAttribute]
public string get_KeyId();
    [CompilerGeneratedAttribute]
public void set_KeyId(string value);
    public CryptoProviderFactory get_CryptoProviderFactory();
    public void set_CryptoProviderFactory(CryptoProviderFactory value);
}
public class Microsoft.IdentityModel.Tokens.SecurityKeyIdentifierClause : object {
}
public abstract class Microsoft.IdentityModel.Tokens.SecurityToken : object {
    public string Id { get; }
    public string Issuer { get; }
    public SecurityKey SecurityKey { get; }
    public SecurityKey SigningKey { get; public set; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_Issuer();
    public abstract virtual SecurityKey get_SecurityKey();
    public abstract virtual SecurityKey get_SigningKey();
    public abstract virtual void set_SigningKey(SecurityKey value);
    public abstract virtual DateTime get_ValidFrom();
    public abstract virtual DateTime get_ValidTo();
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenDecryptionFailedException : SecurityTokenException {
    public SecurityTokenDecryptionFailedException(string message);
    public SecurityTokenDecryptionFailedException(string message, Exception innerException);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Audience>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EncryptingCredentials <EncryptingCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTime> <Expires>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTime> <IssuedAt>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTime> <NotBefore>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SigningCredentials <SigningCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ClaimsIdentity <Subject>k__BackingField;
    public string Audience { get; public set; }
    public EncryptingCredentials EncryptingCredentials { get; public set; }
    public Nullable`1<DateTime> Expires { get; public set; }
    public string Issuer { get; public set; }
    public Nullable`1<DateTime> IssuedAt { get; public set; }
    public Nullable`1<DateTime> NotBefore { get; public set; }
    public SigningCredentials SigningCredentials { get; public set; }
    public ClaimsIdentity Subject { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Audience();
    [CompilerGeneratedAttribute]
public void set_Audience(string value);
    [CompilerGeneratedAttribute]
public EncryptingCredentials get_EncryptingCredentials();
    [CompilerGeneratedAttribute]
public void set_EncryptingCredentials(EncryptingCredentials value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
public void set_Issuer(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_IssuedAt();
    [CompilerGeneratedAttribute]
public void set_IssuedAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_NotBefore();
    [CompilerGeneratedAttribute]
public void set_NotBefore(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public SigningCredentials get_SigningCredentials();
    [CompilerGeneratedAttribute]
public void set_SigningCredentials(SigningCredentials value);
    [CompilerGeneratedAttribute]
public ClaimsIdentity get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(ClaimsIdentity value);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionFailedException : SecurityTokenException {
    public SecurityTokenEncryptionFailedException(string message);
    public SecurityTokenEncryptionFailedException(string message, Exception innerException);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionKeyNotFoundException : SecurityTokenDecryptionFailedException {
    public SecurityTokenEncryptionKeyNotFoundException(string message);
    public SecurityTokenEncryptionKeyNotFoundException(string message, Exception innerException);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenException : Exception {
    public SecurityTokenException(string message);
    public SecurityTokenException(string message, Exception innerException);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException : SecurityTokenValidationException {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <Expires>k__BackingField;
    public DateTime Expires { get; public set; }
    public SecurityTokenExpiredException(string message);
    public SecurityTokenExpiredException(string message, Exception inner);
    [CompilerGeneratedAttribute]
public DateTime get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(DateTime value);
}
public abstract class Microsoft.IdentityModel.Tokens.SecurityTokenHandler : object {
    public bool CanValidateToken { get; }
    public bool CanWriteToken { get; }
    public Type TokenType { get; }
    public virtual SecurityKeyIdentifierClause CreateSecurityTokenReference(SecurityToken token, bool attached);
    public virtual SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor);
    public virtual bool get_CanValidateToken();
    public virtual bool get_CanWriteToken();
    public abstract virtual Type get_TokenType();
    public virtual bool CanReadToken(string tokenString);
    public virtual SecurityToken ReadToken(string tokenString);
    public virtual SecurityToken ReadToken(XmlReader reader);
    public virtual string WriteToken(SecurityToken token);
    public abstract virtual void WriteToken(XmlWriter writer, SecurityToken token);
    public abstract virtual SecurityToken ReadToken(XmlReader reader, TokenValidationParameters validationParameters);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenInvalidAudienceException : SecurityTokenValidationException {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <InvalidAudience>k__BackingField;
    public string InvalidAudience { get; public set; }
    public SecurityTokenInvalidAudienceException(string message);
    public SecurityTokenInvalidAudienceException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_InvalidAudience();
    [CompilerGeneratedAttribute]
public void set_InvalidAudience(string value);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenInvalidIssuerException : SecurityTokenValidationException {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <InvalidIssuer>k__BackingField;
    public string InvalidIssuer { get; public set; }
    public SecurityTokenInvalidIssuerException(string message);
    public SecurityTokenInvalidIssuerException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_InvalidIssuer();
    [CompilerGeneratedAttribute]
public void set_InvalidIssuer(string value);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenInvalidLifetimeException : SecurityTokenValidationException {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTime> <NotBefore>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTime> <Expires>k__BackingField;
    public Nullable`1<DateTime> NotBefore { get; public set; }
    public Nullable`1<DateTime> Expires { get; public set; }
    public SecurityTokenInvalidLifetimeException(string message);
    public SecurityTokenInvalidLifetimeException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_NotBefore();
    [CompilerGeneratedAttribute]
public void set_NotBefore(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(Nullable`1<DateTime> value);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenInvalidSignatureException : SecurityTokenValidationException {
    public SecurityTokenInvalidSignatureException(string message);
    public SecurityTokenInvalidSignatureException(string message, Exception innerException);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenInvalidSigningKeyException : SecurityTokenValidationException {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SecurityKey <SigningKey>k__BackingField;
    public SecurityKey SigningKey { get; public set; }
    public SecurityTokenInvalidSigningKeyException(string message);
    public SecurityTokenInvalidSigningKeyException(string message, Exception inner);
    [CompilerGeneratedAttribute]
public SecurityKey get_SigningKey();
    [CompilerGeneratedAttribute]
public void set_SigningKey(SecurityKey value);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenKeyWrapException : SecurityTokenException {
    public SecurityTokenKeyWrapException(string message);
    public SecurityTokenKeyWrapException(string message, Exception innerException);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenNoExpirationException : SecurityTokenValidationException {
    public SecurityTokenNoExpirationException(string message);
    public SecurityTokenNoExpirationException(string message, Exception innerException);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenNotYetValidException : SecurityTokenValidationException {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <NotBefore>k__BackingField;
    public DateTime NotBefore { get; public set; }
    public SecurityTokenNotYetValidException(string message);
    public SecurityTokenNotYetValidException(string message, Exception inner);
    [CompilerGeneratedAttribute]
public DateTime get_NotBefore();
    [CompilerGeneratedAttribute]
public void set_NotBefore(DateTime value);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenReplayAddFailedException : SecurityTokenValidationException {
    public SecurityTokenReplayAddFailedException(string message);
    public SecurityTokenReplayAddFailedException(string message, Exception innerException);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenReplayDetectedException : SecurityTokenValidationException {
    public SecurityTokenReplayDetectedException(string message);
    public SecurityTokenReplayDetectedException(string message, Exception inner);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenSignatureKeyNotFoundException : SecurityTokenInvalidSignatureException {
    public SecurityTokenSignatureKeyNotFoundException(string message);
    public SecurityTokenSignatureKeyNotFoundException(string message, Exception innerException);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenValidationException : SecurityTokenException {
    public SecurityTokenValidationException(string message);
    public SecurityTokenValidationException(string message, Exception innerException);
}
public abstract class Microsoft.IdentityModel.Tokens.SignatureProvider : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SecurityKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Algorithm>k__BackingField;
    public string Context { get; public set; }
    public SecurityKey Key { get; private set; }
    public string Algorithm { get; private set; }
    protected SignatureProvider(SecurityKey key, string algorithm);
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(string value);
    [CompilerGeneratedAttribute]
public SecurityKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(SecurityKey value);
    [CompilerGeneratedAttribute]
public string get_Algorithm();
    [CompilerGeneratedAttribute]
private void set_Algorithm(string value);
    public abstract virtual Byte[] Sign(Byte[] input);
    public abstract virtual bool Verify(Byte[] input, Byte[] signature);
    public sealed virtual void Dispose();
    protected abstract virtual void Dispose(bool disposing);
}
public class Microsoft.IdentityModel.Tokens.SignatureValidator : MulticastDelegate {
    public SignatureValidator(object object, IntPtr method);
    public virtual SecurityToken Invoke(string token, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(string token, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual SecurityToken EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.SigningCredentials : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CryptoProviderFactory <CryptoProviderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SecurityKey <Key>k__BackingField;
    public string Algorithm { get; private set; }
    public CryptoProviderFactory CryptoProviderFactory { get; public set; }
    public SecurityKey Key { get; private set; }
    public string Kid { get; }
    public SigningCredentials(SecurityKey key, string algorithm);
    [CompilerGeneratedAttribute]
public string get_Algorithm();
    [CompilerGeneratedAttribute]
private void set_Algorithm(string value);
    [CompilerGeneratedAttribute]
public CryptoProviderFactory get_CryptoProviderFactory();
    [CompilerGeneratedAttribute]
public void set_CryptoProviderFactory(CryptoProviderFactory value);
    [CompilerGeneratedAttribute]
public SecurityKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(SecurityKey value);
    public string get_Kid();
}
public class Microsoft.IdentityModel.Tokens.SymmetricKeyWrapProvider : KeyWrapProvider {
    private static Byte[] _defaultIV;
    private static int _blockSizeInBits;
    private static int _blockSizeInBytes;
    private static object _encryptorLock;
    private static object _decryptorLock;
    private SymmetricAlgorithm _symmetricAlgorithm;
    private ICryptoTransform _symmetricAlgorithmEncryptor;
    private ICryptoTransform _symmetricAlgorithmDecryptor;
    private bool _disposed;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SecurityKey <Key>k__BackingField;
    public string Algorithm { get; }
    public string Context { get; public set; }
    public SecurityKey Key { get; }
    public SymmetricKeyWrapProvider(SecurityKey key, string algorithm);
    private static SymmetricKeyWrapProvider();
    [CompilerGeneratedAttribute]
public virtual string get_Algorithm();
    [CompilerGeneratedAttribute]
public virtual string get_Context();
    [CompilerGeneratedAttribute]
public virtual void set_Context(string value);
    [CompilerGeneratedAttribute]
public virtual SecurityKey get_Key();
    protected virtual void Dispose(bool disposing);
    private static Byte[] GetBytes(ulong i);
    protected virtual SymmetricAlgorithm GetSymmetricAlgorithm(SecurityKey key, string algorithm);
    protected virtual bool IsSupportedAlgorithm(SecurityKey key, string algorithm);
    public virtual Byte[] UnwrapKey(Byte[] keyBytes);
    private Byte[] UnwrapKeyPrivate(Byte[] inputBuffer, int inputOffset, int inputCount);
    private void ValidateKeySize(Byte[] key, string algorithm);
    public virtual Byte[] WrapKey(Byte[] keyBytes);
    private Byte[] WrapKeyPrivate(Byte[] inputBuffer, int inputOffset, int inputCount);
}
public class Microsoft.IdentityModel.Tokens.SymmetricSecurityKey : SecurityKey {
    private int _keySize;
    private Byte[] _key;
    public int KeySize { get; }
    public Byte[] Key { get; }
    public SymmetricSecurityKey(Byte[] key);
    public virtual int get_KeySize();
    public virtual Byte[] get_Key();
}
public class Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider : SignatureProvider {
    private bool _disposed;
    private KeyedHashAlgorithm _keyedHash;
    public static int DefaultMinimumSymmetricKeySizeInBits;
    private int _minimumSymmetricKeySizeInBits;
    public int MinimumSymmetricKeySizeInBits { get; public set; }
    public SymmetricSignatureProvider(SecurityKey key, string algorithm);
    private static SymmetricSignatureProvider();
    public int get_MinimumSymmetricKeySizeInBits();
    public void set_MinimumSymmetricKeySizeInBits(int value);
    protected virtual Byte[] GetKeyBytes(SecurityKey key);
    protected virtual KeyedHashAlgorithm GetKeyedHashAlgorithm(Byte[] keyBytes, string algorithm);
    public virtual Byte[] Sign(Byte[] input);
    public virtual bool Verify(Byte[] input, Byte[] signature);
    public bool Verify(Byte[] input, Byte[] signature, int length);
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.IdentityModel.Tokens.TokenDecryptionKeyResolver : MulticastDelegate {
    public TokenDecryptionKeyResolver(object object, IntPtr method);
    public virtual IEnumerable`1<SecurityKey> Invoke(string token, SecurityToken securityToken, string kid, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(string token, SecurityToken securityToken, string kid, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual IEnumerable`1<SecurityKey> EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Tokens.TokenValidationParameters : object {
    private string _authenticationType;
    private TimeSpan _clockSkew;
    private string _nameClaimType;
    private string _roleClaimType;
    public static string DefaultAuthenticationType;
    public static TimeSpan DefaultClockSkew;
    public static int DefaultMaximumTokenSizeInBytes;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TokenValidationParameters <ActorValidationParameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AudienceValidator <AudienceValidator>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CryptoProviderFactory <CryptoProviderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SecurityKey <TokenDecryptionKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TokenDecryptionKeyResolver <TokenDecryptionKeyResolver>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IssuerSigningKeyValidator <IssuerSigningKeyValidator>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SecurityKey <IssuerSigningKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IssuerSigningKeyResolver <IssuerSigningKeyResolver>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<SecurityKey> <IssuerSigningKeys>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IssuerValidator <IssuerValidator>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private LifetimeValidator <LifetimeValidator>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`3<SecurityToken, string, string> <NameClaimTypeRetriever>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <RequireExpirationTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <RequireSignedTokens>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`3<SecurityToken, string, string> <RoleClaimTypeRetriever>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <SaveSigninToken>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SignatureValidator <SignatureValidator>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<SecurityKey> <TokenDecryptionKeys>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITokenReplayCache <TokenReplayCache>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ValidateActor>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ValidateAudience>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ValidateIssuer>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ValidateLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ValidateIssuerSigningKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ValidAudience>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<string> <ValidAudiences>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ValidIssuer>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<string> <ValidIssuers>k__BackingField;
    public TokenValidationParameters ActorValidationParameters { get; public set; }
    public AudienceValidator AudienceValidator { get; public set; }
    public string AuthenticationType { get; public set; }
    [DefaultValueAttribute("300")]
public TimeSpan ClockSkew { get; public set; }
    public CryptoProviderFactory CryptoProviderFactory { get; public set; }
    public SecurityKey TokenDecryptionKey { get; public set; }
    public TokenDecryptionKeyResolver TokenDecryptionKeyResolver { get; public set; }
    public IssuerSigningKeyValidator IssuerSigningKeyValidator { get; public set; }
    public SecurityKey IssuerSigningKey { get; public set; }
    public IssuerSigningKeyResolver IssuerSigningKeyResolver { get; public set; }
    public IEnumerable`1<SecurityKey> IssuerSigningKeys { get; public set; }
    public IssuerValidator IssuerValidator { get; public set; }
    public LifetimeValidator LifetimeValidator { get; public set; }
    public string NameClaimType { get; public set; }
    public string RoleClaimType { get; public set; }
    public Func`3<SecurityToken, string, string> NameClaimTypeRetriever { get; public set; }
    [DefaultValueAttribute("True")]
public bool RequireExpirationTime { get; public set; }
    [DefaultValueAttribute("True")]
public bool RequireSignedTokens { get; public set; }
    public Func`3<SecurityToken, string, string> RoleClaimTypeRetriever { get; public set; }
    [DefaultValueAttribute("False")]
public bool SaveSigninToken { get; public set; }
    public SignatureValidator SignatureValidator { get; public set; }
    public IEnumerable`1<SecurityKey> TokenDecryptionKeys { get; public set; }
    public ITokenReplayCache TokenReplayCache { get; public set; }
    [DefaultValueAttribute("False")]
public bool ValidateActor { get; public set; }
    [DefaultValueAttribute("True")]
public bool ValidateAudience { get; public set; }
    [DefaultValueAttribute("True")]
public bool ValidateIssuer { get; public set; }
    [DefaultValueAttribute("True")]
public bool ValidateLifetime { get; public set; }
    [DefaultValueAttribute("False")]
public bool ValidateIssuerSigningKey { get; public set; }
    public string ValidAudience { get; public set; }
    public IEnumerable`1<string> ValidAudiences { get; public set; }
    public string ValidIssuer { get; public set; }
    public IEnumerable`1<string> ValidIssuers { get; public set; }
    protected TokenValidationParameters(TokenValidationParameters other);
    private static TokenValidationParameters();
    [CompilerGeneratedAttribute]
public TokenValidationParameters get_ActorValidationParameters();
    [CompilerGeneratedAttribute]
public void set_ActorValidationParameters(TokenValidationParameters value);
    [CompilerGeneratedAttribute]
public AudienceValidator get_AudienceValidator();
    [CompilerGeneratedAttribute]
public void set_AudienceValidator(AudienceValidator value);
    public string get_AuthenticationType();
    public void set_AuthenticationType(string value);
    public TimeSpan get_ClockSkew();
    public void set_ClockSkew(TimeSpan value);
    public virtual TokenValidationParameters Clone();
    public virtual ClaimsIdentity CreateClaimsIdentity(SecurityToken securityToken, string issuer);
    [CompilerGeneratedAttribute]
public CryptoProviderFactory get_CryptoProviderFactory();
    [CompilerGeneratedAttribute]
public void set_CryptoProviderFactory(CryptoProviderFactory value);
    [CompilerGeneratedAttribute]
public SecurityKey get_TokenDecryptionKey();
    [CompilerGeneratedAttribute]
public void set_TokenDecryptionKey(SecurityKey value);
    [CompilerGeneratedAttribute]
public TokenDecryptionKeyResolver get_TokenDecryptionKeyResolver();
    [CompilerGeneratedAttribute]
public void set_TokenDecryptionKeyResolver(TokenDecryptionKeyResolver value);
    [CompilerGeneratedAttribute]
public IssuerSigningKeyValidator get_IssuerSigningKeyValidator();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningKeyValidator(IssuerSigningKeyValidator value);
    [CompilerGeneratedAttribute]
public SecurityKey get_IssuerSigningKey();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningKey(SecurityKey value);
    [CompilerGeneratedAttribute]
public IssuerSigningKeyResolver get_IssuerSigningKeyResolver();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningKeyResolver(IssuerSigningKeyResolver value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SecurityKey> get_IssuerSigningKeys();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningKeys(IEnumerable`1<SecurityKey> value);
    [CompilerGeneratedAttribute]
public IssuerValidator get_IssuerValidator();
    [CompilerGeneratedAttribute]
public void set_IssuerValidator(IssuerValidator value);
    [CompilerGeneratedAttribute]
public LifetimeValidator get_LifetimeValidator();
    [CompilerGeneratedAttribute]
public void set_LifetimeValidator(LifetimeValidator value);
    public string get_NameClaimType();
    public void set_NameClaimType(string value);
    public string get_RoleClaimType();
    public void set_RoleClaimType(string value);
    [CompilerGeneratedAttribute]
public Func`3<SecurityToken, string, string> get_NameClaimTypeRetriever();
    [CompilerGeneratedAttribute]
public void set_NameClaimTypeRetriever(Func`3<SecurityToken, string, string> value);
    [CompilerGeneratedAttribute]
public bool get_RequireExpirationTime();
    [CompilerGeneratedAttribute]
public void set_RequireExpirationTime(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireSignedTokens();
    [CompilerGeneratedAttribute]
public void set_RequireSignedTokens(bool value);
    [CompilerGeneratedAttribute]
public Func`3<SecurityToken, string, string> get_RoleClaimTypeRetriever();
    [CompilerGeneratedAttribute]
public void set_RoleClaimTypeRetriever(Func`3<SecurityToken, string, string> value);
    [CompilerGeneratedAttribute]
public bool get_SaveSigninToken();
    [CompilerGeneratedAttribute]
public void set_SaveSigninToken(bool value);
    [CompilerGeneratedAttribute]
public SignatureValidator get_SignatureValidator();
    [CompilerGeneratedAttribute]
public void set_SignatureValidator(SignatureValidator value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SecurityKey> get_TokenDecryptionKeys();
    [CompilerGeneratedAttribute]
public void set_TokenDecryptionKeys(IEnumerable`1<SecurityKey> value);
    [CompilerGeneratedAttribute]
public ITokenReplayCache get_TokenReplayCache();
    [CompilerGeneratedAttribute]
public void set_TokenReplayCache(ITokenReplayCache value);
    [CompilerGeneratedAttribute]
public bool get_ValidateActor();
    [CompilerGeneratedAttribute]
public void set_ValidateActor(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateAudience();
    [CompilerGeneratedAttribute]
public void set_ValidateAudience(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateIssuer();
    [CompilerGeneratedAttribute]
public void set_ValidateIssuer(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateLifetime();
    [CompilerGeneratedAttribute]
public void set_ValidateLifetime(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateIssuerSigningKey();
    [CompilerGeneratedAttribute]
public void set_ValidateIssuerSigningKey(bool value);
    [CompilerGeneratedAttribute]
public string get_ValidAudience();
    [CompilerGeneratedAttribute]
public void set_ValidAudience(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ValidAudiences();
    [CompilerGeneratedAttribute]
public void set_ValidAudiences(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ValidIssuer();
    [CompilerGeneratedAttribute]
public void set_ValidIssuer(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ValidIssuers();
    [CompilerGeneratedAttribute]
public void set_ValidIssuers(IEnumerable`1<string> value);
}
[ExtensionAttribute]
public static class Microsoft.IdentityModel.Tokens.Utility : object {
    public static string Empty;
    public static string Null;
    internal static Byte[] Transform(ICryptoTransform transform, Byte[] input, int inputOffset, int inputLength);
    [ExtensionAttribute]
public static Byte[] CloneByteArray(Byte[] src);
    internal static string SerializeAsSingleCommaDelimitedString(IEnumerable`1<string> strings);
    public static bool IsHttps(string address);
    public static bool IsHttps(Uri uri);
    public static bool AreEqual(Byte[] a, Byte[] b);
    internal static bool AreEqual(Byte[] a, Byte[] b, int length);
    internal static Byte[] ConvertToBigEndian(long i);
    internal static Byte[] Xor(Byte[] a, Byte[] b, int offset, bool inPlace);
    internal static ECDsaAlgorithm ResolveECDsaAlgorithm(SecurityKey key, string algorithm, bool usePrivateKey);
    internal static RsaAlgorithm ResolveRsaAlgorithm(SecurityKey key, string algorithm, bool requirePrivateKey);
    internal static bool ValidateECDSAKeySize(int keySize, string algorithm);
    internal static void Zero(Byte[] byteArray);
}
public static class Microsoft.IdentityModel.Tokens.Validators : object {
    public static void ValidateAudience(IEnumerable`1<string> audiences, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public static string ValidateIssuer(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public static void ValidateIssuerSecurityKey(SecurityKey securityKey, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public static void ValidateLifetime(Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public static void ValidateTokenReplay(string securityToken, Nullable`1<DateTime> expirationTime, TokenValidationParameters validationParameters);
}
public class Microsoft.IdentityModel.Tokens.X509SecurityKey : AsymmetricSecurityKey {
    private X509Certificate2 _certificate;
    private AsymmetricAlgorithm _privateKey;
    private bool _privateKeyAvailabilityDetermined;
    private AsymmetricAlgorithm _publicKey;
    private object _thisLock;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <X5t>k__BackingField;
    public int KeySize { get; }
    public string X5t { get; }
    public AsymmetricAlgorithm PrivateKey { get; }
    public AsymmetricAlgorithm PublicKey { get; }
    private object ThisLock { get; }
    public bool HasPrivateKey { get; }
    public X509Certificate2 Certificate { get; }
    public X509SecurityKey(X509Certificate2 certificate);
    public virtual int get_KeySize();
    [CompilerGeneratedAttribute]
public string get_X5t();
    public AsymmetricAlgorithm get_PrivateKey();
    public AsymmetricAlgorithm get_PublicKey();
    private object get_ThisLock();
    public virtual bool get_HasPrivateKey();
    public X509Certificate2 get_Certificate();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
