[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[VerbAttribute("execute")]
public class TechTalk.SpecRun.Framework.CommandLineInterface.ExecuteParameters : object {
    [CompilerGeneratedAttribute]
private int <RemoteRunnerPid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldWaitForDebuggerToAttach>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <CallbackPort>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <LoggerPort>k__BackingField;
    [OptionAttribute("remoteRunnerPid")]
public int RemoteRunnerPid { get; public set; }
    [OptionAttribute("uniqueId")]
public string UniqueId { get; public set; }
    [OptionAttribute("outputFolder")]
public string OutputFolder { get; public set; }
    [OptionAttribute("debug")]
public bool ShouldWaitForDebuggerToAttach { get; public set; }
    [OptionAttribute("callbackPort")]
public ushort CallbackPort { get; public set; }
    [OptionAttribute("loggerPort")]
public ushort LoggerPort { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RemoteRunnerPid();
    [CompilerGeneratedAttribute]
public void set_RemoteRunnerPid(int value);
    [CompilerGeneratedAttribute]
public string get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFolder();
    [CompilerGeneratedAttribute]
public void set_OutputFolder(string value);
    [CompilerGeneratedAttribute]
public bool get_ShouldWaitForDebuggerToAttach();
    [CompilerGeneratedAttribute]
public void set_ShouldWaitForDebuggerToAttach(bool value);
    [CompilerGeneratedAttribute]
public ushort get_CallbackPort();
    [CompilerGeneratedAttribute]
public void set_CallbackPort(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_LoggerPort();
    [CompilerGeneratedAttribute]
public void set_LoggerPort(ushort value);
}
internal static class TechTalk.SpecRun.Framework.Executor.OutProc.Program : object {
    private static void Main(String[] args);
}
public class TechTalk.SpecRun.Framework.ExecutorMainLoop : object {
    private ITestLogger _testLogger;
    private ExecutorMainLoopMutex _executorMainLoopMutex;
    public int Execute(ExecuteParameters parameters);
    private void CurrentDomainOnUnhandledException(object sender, UnhandledExceptionEventArgs e);
    private void ParentProcessExited();
}
public interface TechTalk.SpecRun.Framework.IParentProcessWatchDog {
    public abstract virtual void Start(Action onParentProcessExited);
}
public interface TechTalk.SpecRun.Framework.IRemoteRunnerInstance {
    public abstract virtual IResult ConnectTo(RemoteRunnerInfo remoteRunnerInfo);
}
internal interface TechTalk.SpecRun.Framework.ISpecFlowCustomizations {
    public abstract virtual void ApplyTestRunCustomizations();
    public abstract virtual void ApplyTestCustomizations();
}
public interface TechTalk.SpecRun.Framework.ITestAssemblyExecutorsProvider {
    public abstract virtual IEnumerable`1<ITaskExecutor> GetTestAssemblyInitializeExecutors();
    public abstract virtual IEnumerable`1<ITaskExecutor> GetTestAssemblyCleanupExecutors();
}
public interface TechTalk.SpecRun.Framework.ITestAssemblyExecutorState {
    public TestSuite TestSuite { get; }
    public TestExecutionReference CurrentTestExecutionReference { get; }
    public ITestThreadExecutionContext TestThreadExecutionContext { get; }
    public TestThreadState TestThreadState { get; }
    public abstract virtual TestSuite get_TestSuite();
    public abstract virtual TestExecutionReference get_CurrentTestExecutionReference();
    public abstract virtual ITestThreadExecutionContext get_TestThreadExecutionContext();
    public abstract virtual TestThreadState get_TestThreadState();
    public abstract virtual TestNode GetCurrentlyInitializedNode();
    public abstract virtual TestExecutionReference FetchNextTestExecutionReference();
    public abstract virtual bool ProceedToFirstOrNextTest();
    public abstract virtual bool CanContinueWithThisExecutor();
}
public interface TechTalk.SpecRun.Framework.ITestCollectionsProvider {
    public abstract virtual IEnumerable`1<TestCollection> GetTestCollections();
}
public interface TechTalk.SpecRun.Framework.ITestExecutionReferenceFactory {
    public abstract virtual TestExecutionReference FromTestExecutionId(TestSuite testSuite, TestExecutionId testExecutionId);
    public abstract virtual TestExecutionReference BuildNullTestExecutionReference();
}
public interface TechTalk.SpecRun.Framework.ITestNodeTaskFactory {
    public abstract virtual TestNodeTask BuildInitializationTask(TestNode testNode, ITestThreadExecutionContext testThreadExecutionContext);
    public abstract virtual TestNodeTask BuildCleanupTask(TestNode testNode, ITestThreadExecutionContext testThreadExecutionContext);
    public abstract virtual TestNodeTask BuildExecutionTask(TestNode testNode, ITaskExecutor taskExecutor, ITestThreadExecutionContext testThreadExecutionContext);
}
public interface TechTalk.SpecRun.Framework.ITestSuiteNodeSequenceProvider {
    public abstract virtual IEnumerable`1<TestNode> GetNodeSequence(TestSuite testSuite);
    public abstract virtual IResult`1<TestNode> GetTestNode(TestSuite testSuite, int nodeId);
}
public interface TechTalk.SpecRun.Framework.ITestSuiteTestSequenceProvider {
    public abstract virtual IEnumerable`1<TestItem> GetTestSequence(TestSuite testSuite);
    public abstract virtual IResult`1<TestItem> GetTestItem(TestSuite testSuite, int testItem);
}
public class TechTalk.SpecRun.Framework.OutOfProcessConsoleApp : object {
    public static void Run(String[] args);
}
public class TechTalk.SpecRun.Framework.OutOfProcessConsoleAppContainerBuilder : object {
    public IObjectContainer BuildContainer(RemoteRunnerInfo remoteRunnerInfo, ExecutorMainLoopMutex executorMainLoopMutex);
}
public class TechTalk.SpecRun.Framework.OutOfProcessExecutorServer : object {
    private IRpcServer _rpcServer;
    public OutOfProcessExecutorServer(IRpcServer rpcServer);
    public sealed virtual void Dispose();
    public void Open();
}
public class TechTalk.SpecRun.Framework.ParentProcessWatchDog : object {
    private RemoteRunnerInfo _remoteRunnerInfo;
    private Action _onParentProcessExited;
    private Timer _timer;
    public ParentProcessWatchDog(RemoteRunnerInfo remoteRunnerInfo);
    public sealed virtual void Dispose();
    public sealed virtual void Start(Action onParentProcessExited);
    private Timer GetProcessWatchDogTimer(RemoteRunnerInfo remoteRunnerInfo);
    private bool IsProcessExited(int processId);
}
public class TechTalk.SpecRun.Framework.RemoteRunnerInfo : object {
    [CompilerGeneratedAttribute]
private int <Pid>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <CallbackPort>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <LoggerPort>k__BackingField;
    public int Pid { get; }
    public ushort CallbackPort { get; }
    public ushort LoggerPort { get; }
    public RemoteRunnerInfo(int pid, ushort callbackPort, ushort loggerPort);
    [CompilerGeneratedAttribute]
public int get_Pid();
    [CompilerGeneratedAttribute]
public ushort get_CallbackPort();
    [CompilerGeneratedAttribute]
public ushort get_LoggerPort();
}
public class TechTalk.SpecRun.Framework.RemoteRunnerInstance : object {
    private IClientFactory _clientFactory;
    private IServerFactory _serverFactory;
    private ITestLogger _testLogger;
    private ILogger _logger;
    private ITimeService _timeService;
    private IObjectContainer _objectContainer;
    private bool _isDisposed;
    private IRpcClient _loggerRpcClient;
    private IRpcClient _callbackRpcClient;
    private IRpcServer _executorRpcServer;
    private OutOfProcessTestAssemblyExecutorCallbackClient _callbackClient;
    private TestAssemblyExecutorCallbackSink _callbackSink;
    private OutOfProcessLoggerClient _loggerClient;
    private Timer _watchDogTimer;
    public RemoteRunnerInstance(IClientFactory clientFactory, IServerFactory serverFactory, ITestLogger testLogger, ILogger logger, ITimeService timeService, IObjectContainer objectContainer);
    protected virtual override void Finalize();
    public sealed virtual IResult ConnectTo(RemoteRunnerInfo remoteRunnerInfo);
    private IResult`1<IRpcClient> ConnectToRemoteServer(ushort callbackPort, string type);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal class TechTalk.SpecRun.Framework.SpecFlowCustomizations : object {
    private SpecFlowRunnerConnector _specFlowRunnerConnector;
    private TestExecutionConfiguration _testProfile;
    private string _testAssemblyFullPath;
    public SpecFlowCustomizations(SpecFlowRunnerConnector specFlowRunnerConnector, TestExecutionConfiguration testProfile, string testAssemblyFullPath);
    public sealed virtual void ApplyTestRunCustomizations();
    public sealed virtual void ApplyTestCustomizations();
}
internal class TechTalk.SpecRun.Framework.TaskExecutors.CultureSetter : object {
    private CultureInfo _oldCulture;
    private CultureInfo _oldUiCulture;
    public CultureSetter(CultureInfo cultureInfo);
    public sealed virtual void Dispose();
}
[RunsInTestAssemblyAppDomainAttribute]
public class TechTalk.SpecRun.Framework.TestAssemblyExecutor : RemotableObject {
    private ITraceEventCollector _traceEventCollector;
    private SpecFlowRunnerConnector _connector;
    private ITestNodeTaskFactory _testNodeTaskFactory;
    private ISpecFlowCustomizations _specFlowCustomizations;
    private IAssemblyReference _assemblyReference;
    private TestNode _currentlyInitializedNode;
    private ITestExecutionManager _executionManager;
    private int _threadId;
    private TestExecutionConfiguration _testProfile;
    private string _target;
    private TestThreadExecutionContext _testThreadExecutionContext;
    private TestSuiteNodeSequenceProvider _testSuiteNodeSequenceProvider;
    private TestExecutionReferenceFactory _testExecutionReferenceFactory;
    private static Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _testRunCounter;
    private static object _testRunCounterLock;
    private static TestAssemblyExecutor();
    public sealed virtual void Initialize(int threadId, ITestExecutionManager executionManager, IAssemblyReference assemblyReference, ITestLogger logger, string testAssemblyFullPath, string testAssemblyConfigFilePath, TestExecutionConfiguration testExecutionConfiguration, string target);
    public sealed virtual TestThreadState RunTests(TestThreadState testThreadState);
    private void SetCustomEnvironmentVariables();
    public sealed virtual void DeInitialize();
    internal TestThreadState RunTests(ITestAssemblyExecutorState executorState, ITestAssemblyExecutorsProvider testAssemblyExecutorsProvider, ITestThreadExecutionContext testThreadExecutionContext);
    internal void RunAssemblyInitializeExecutors(ITestAssemblyExecutorsProvider testAssemblyExecutorsProvider, ITestThreadExecutionContext testThreadExecutionContext);
    internal void RunAssemblyCleanupExecutors(ITestAssemblyExecutorsProvider testAssemblyExecutorsProvider, ITestThreadExecutionContext testThreadExecutionContext);
    internal IResult InitializeSingleTest(ITestAssemblyExecutorState testAssemblyExecutorState);
    internal IResult`1<TestNodeResultType> CleanupSingleTest(IResult`1<TestNodeResultType> testResult, ITestAssemblyExecutorState testAssemblyExecutorState);
    internal void RegisterPreliminaryResult(IResult`1<TestNodeResultType> testRunResult, TestExecutionReference referenceToTestItem);
    internal void RegisterResult(IResult`1<TestNodeResultType> testRunResult, TestExecutionReference referenceToTestItem);
    internal IResult`1<TestNodeResultType> RunSingleTest(IResult initializationResult, ITestThreadExecutionContext testThreadExecutionContext, TestExecutionReference referenceToTestItem);
    internal void RegisterPreliminaryResult(TestNodeResultType testResult, TestExecutionReference referenceToTestItem);
    internal void RegisterTestRunResult(TestNodeResultType testResult, TestExecutionReference referenceToTestItem);
    internal void RegisterTestRunCancellation(TestExecutionReference referenceToTestItem);
    internal void RegisterFrameworkError(TestExecutionReference referenceToTestItem);
    internal ISpecRunner InitSpecRunner(TestAssemblyExecutorState testAssemblyExecutorState);
    public sealed virtual void Dispose();
    internal void ForwardTechMessage(string message);
    internal void MakeConnectionToSpecFlow(ISpecRunner specRunner);
    internal TestNodeResultType PerformInitializations(TestNode commonRoot, TestItem nextTestItem, ITestThreadExecutionContext testThreadExecutionContext);
    internal TestNodeResultType PerformCleanups(TestNode commonRoot, ITestThreadExecutionContext testThreadExecutionContext);
    internal TestNodeResultType PerformInitialize(TestNode testNode, ITestThreadExecutionContext testThreadExecutionContext);
    internal TestNodeResultType PerformTest(TestNode testNode, TestExecutionReference referenceToTestItem, ITestThreadExecutionContext testThreadExecutionContext);
    internal TestNodeResultType PerformCleanup(TestNode testNode, ITestThreadExecutionContext testThreadExecutionContext);
}
public class TechTalk.SpecRun.Framework.TestAssemblyExecutorsProvider : object {
    private ITestCollectionsProvider _testCollectionsProvider;
    public TestAssemblyExecutorsProvider(ITestCollectionsProvider testCollectionsProvider);
    public sealed virtual IEnumerable`1<ITaskExecutor> GetTestAssemblyInitializeExecutors();
    public sealed virtual IEnumerable`1<ITaskExecutor> GetTestAssemblyCleanupExecutors();
}
public class TechTalk.SpecRun.Framework.TestAssemblyExecutorState : object {
    private ITestExecutionManager _testExecutionManager;
    private ITestSuiteNodeSequenceProvider _testSuiteNodeSequenceProvider;
    private ITestExecutionReferenceFactory _testExecutionReferenceFactory;
    private int _threadId;
    private IAssemblyReference _testAssemblyReference;
    private Lazy`1<TestSuite> _testSuiteLazy;
    private IResult`1<TestExecutionReference> _nextTestExecutionReference;
    [CompilerGeneratedAttribute]
private TestExecutionReference <CurrentTestExecutionReference>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestThreadExecutionContext <TestThreadExecutionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private TestThreadState <TestThreadState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    public TestSuite TestSuite { get; }
    public TestExecutionReference CurrentTestExecutionReference { get; private set; }
    public ITestThreadExecutionContext TestThreadExecutionContext { get; }
    public TestThreadState TestThreadState { get; }
    public string Target { get; }
    public TestAssemblyExecutorState(ITestExecutionManager testExecutionManager, ITestSuiteNodeSequenceProvider testSuiteNodeSequenceProvider, ITestExecutionReferenceFactory testExecutionReferenceFactory, ITestThreadExecutionContext testThreadExecutionContext, IAssemblyReference testAssemblyReference, TestThreadState testThreadState, int threadId, string target);
    public sealed virtual TestSuite get_TestSuite();
    [CompilerGeneratedAttribute]
public sealed virtual TestExecutionReference get_CurrentTestExecutionReference();
    [CompilerGeneratedAttribute]
private void set_CurrentTestExecutionReference(TestExecutionReference value);
    [CompilerGeneratedAttribute]
public sealed virtual ITestThreadExecutionContext get_TestThreadExecutionContext();
    [CompilerGeneratedAttribute]
public sealed virtual TestThreadState get_TestThreadState();
    [CompilerGeneratedAttribute]
public string get_Target();
    public sealed virtual TestNode GetCurrentlyInitializedNode();
    public sealed virtual bool CanContinueWithThisExecutor();
    public sealed virtual TestExecutionReference FetchNextTestExecutionReference();
    public sealed virtual bool ProceedToFirstOrNextTest();
}
public class TechTalk.SpecRun.Framework.TestCollectionsProvider : object {
    private TestAssemblyExecutorState _testAssemblyExecutorState;
    public TestCollectionsProvider(TestAssemblyExecutorState testAssemblyExecutorState);
    public sealed virtual IEnumerable`1<TestCollection> GetTestCollections();
    [CompilerGeneratedAttribute]
private bool <GetTestCollections>b__2_0(TestCollection tc);
}
public class TechTalk.SpecRun.Framework.TestExecutionReference : object {
    [CompilerGeneratedAttribute]
private TestExecutionId <TestExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private TestItem <TestItem>k__BackingField;
    public TestExecutionId TestExecutionId { get; }
    public TestItem TestItem { get; }
    public bool IsNull { get; }
    public int TestId { get; }
    public TestExecutionReference(TestExecutionId testExecutionId, TestItem testItem);
    [CompilerGeneratedAttribute]
public TestExecutionId get_TestExecutionId();
    [CompilerGeneratedAttribute]
public TestItem get_TestItem();
    public bool get_IsNull();
    public int get_TestId();
}
public class TechTalk.SpecRun.Framework.TestExecutionReferenceFactory : object {
    private ITestSuiteTestSequenceProvider _testSuiteTestSequenceProvider;
    public TestExecutionReferenceFactory(ITestSuiteTestSequenceProvider testSuiteTestSequenceProvider);
    public sealed virtual TestExecutionReference FromTestExecutionId(TestSuite testSuite, TestExecutionId testExecutionId);
    public sealed virtual TestExecutionReference BuildNullTestExecutionReference();
}
public class TechTalk.SpecRun.Framework.TestNodeTask : object {
    private ITaskExecutor _taskExecutor;
    private ITraceEventCollector _traceEventCollector;
    private ITestThreadExecutionContext _testThreadExecutionContext;
    [CompilerGeneratedAttribute]
private TestNode <TestNode>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceEventType <TraceEventType>k__BackingField;
    public TestNode TestNode { get; }
    public TraceEventType TraceEventType { get; }
    public TestNodeTask(TestNode testNode, ITaskExecutor taskExecutor, TraceEventType traceEventType, ITraceEventCollector traceEventCollector, ITestThreadExecutionContext testThreadExecutionContext);
    [CompilerGeneratedAttribute]
public TestNode get_TestNode();
    [CompilerGeneratedAttribute]
public TraceEventType get_TraceEventType();
    public TestNodeResultType Execute();
}
public class TechTalk.SpecRun.Framework.TestNodeTaskFactory : object {
    private ITraceEventCollector _traceEventCollector;
    public TestNodeTaskFactory(ITraceEventCollector traceEventCollector);
    public sealed virtual TestNodeTask BuildInitializationTask(TestNode testNode, ITestThreadExecutionContext testThreadExecutionContext);
    public sealed virtual TestNodeTask BuildCleanupTask(TestNode testNode, ITestThreadExecutionContext testThreadExecutionContext);
    public sealed virtual TestNodeTask BuildExecutionTask(TestNode testNode, ITaskExecutor taskExecutor, ITestThreadExecutionContext testThreadExecutionContext);
}
public class TechTalk.SpecRun.Framework.TestSuiteNodeSequenceProvider : object {
    public sealed virtual IEnumerable`1<TestNode> GetNodeSequence(TestSuite testSuite);
    public sealed virtual IResult`1<TestNode> GetTestNode(TestSuite testSuite, int nodeId);
}
public class TechTalk.SpecRun.Framework.TestSuiteTestSequenceProvider : object {
    public sealed virtual IEnumerable`1<TestItem> GetTestSequence(TestSuite testSuite);
    public sealed virtual IResult`1<TestItem> GetTestItem(TestSuite testSuite, int testId);
}
[RunsInTestAssemblyAppDomainAttribute]
public class TechTalk.SpecRun.Framework.TestThreadExecutionContext : object {
    [CompilerGeneratedAttribute]
private object <TestInstance>k__BackingField;
    public object TestInstance { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual object get_TestInstance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TestInstance(object value);
}
public interface TechTalk.SpecRun.Framework.Tracing.ITraceEventCollector {
    public abstract virtual void Initialize(ITestLogger logger, int threadId);
    public abstract virtual void StartEvent(int testNodeId, TraceEventType type);
    public abstract virtual void StopEvent(TestNodeResultType resultType);
    public abstract virtual void WriteBusinessMessage(string message, bool appendNewLine);
    public abstract virtual void WriteTechMessage(string message, bool appendNewLine);
    public abstract virtual void WriteError(Exception exception);
    public abstract virtual void SetEventResult(TestNodeResultType resultType);
    public abstract virtual List`1<TraceEvent> ReadResult();
    public abstract virtual void LogStepBindingInformation(TraceEventStepBindingInformation stepBindingInformation);
}
[ExtensionAttribute]
internal static class TechTalk.SpecRun.Framework.Tracing.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static void Clear(StringBuilder stringBuilder);
}
public class TechTalk.SpecRun.Framework.Tracing.TraceConsoleRedirector : object {
    private TextWriter oldConsoleOut;
    private TextWriter oldConsoleError;
    private TraceTextWriter stdOutTraceWriter;
    private TraceTextWriter stdErrTraceWriter;
    public TraceConsoleRedirector(ITraceEventCollector traceEventCollector);
    public sealed virtual void Dispose();
}
public class TechTalk.SpecRun.Framework.Tracing.TraceEventCollector : object {
    private ITimeService timeService;
    private ITestLogger _logger;
    private int _threadId;
    private List`1<TraceEvent> events;
    private TraceEvent currentEvent;
    private StringBuilder currentTechMessagesBuilder;
    private StringBuilder currentBusinessMessagesBuilder;
    private object eventWriterSync;
    private TraceEventStepBindingInformation _currentTraceEventStepBindingInformation;
    public sealed virtual void Initialize(ITestLogger logger, int threadId);
    public sealed virtual void StartEvent(int testNodeId, TraceEventType type);
    private bool IsStepType(TraceEventType type);
    private bool IsCurrentEventEmpty();
    private void EnsureClosed();
    public sealed virtual void StopEvent(TestNodeResultType resultType);
    private void WriteMessage(string message, bool appendNewLine, StringBuilder stringBuilder, string logPrefix);
    public sealed virtual void WriteBusinessMessage(string message, bool appendNewLine);
    public sealed virtual void WriteTechMessage(string message, bool appendNewLine);
    private string GetErrorMessage(Exception exception);
    public sealed virtual void WriteError(Exception exception);
    private void WriteError(TraceEvent traceEvent, Exception exception);
    public sealed virtual void SetEventResult(TestNodeResultType resultType);
    private bool WriteErrorToLastErrorStep(Exception exception);
    public sealed virtual List`1<TraceEvent> ReadResult();
    public sealed virtual void LogStepBindingInformation(TraceEventStepBindingInformation stepBindingInformation);
}
internal class TechTalk.SpecRun.Framework.Tracing.TraceTextWriter : TextWriter {
    private ITraceEventCollector traceEventCollector;
    private string linePrefix;
    private bool atNewLine;
    public Encoding Encoding { get; }
    public TraceTextWriter(ITraceEventCollector traceEventCollector, string linePrefix);
    public virtual Encoding get_Encoding();
    public virtual void Write(string value);
    public virtual void WriteLine();
    public virtual void WriteLine(string value);
    public virtual void Write(char value);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
