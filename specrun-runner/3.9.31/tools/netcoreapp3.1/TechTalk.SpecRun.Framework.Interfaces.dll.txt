public enum TechTalk.SpecRun.Framework.ClrVersion : Enum {
    public int value__;
    public static ClrVersion Default;
    public static ClrVersion clr20;
    public static ClrVersion clr40;
    public static ClrVersion netcore21;
    public static ClrVersion netcore31;
    public static ClrVersion net50;
}
public class TechTalk.SpecRun.Framework.Configuration.DeploymentTransformation : object {
    [CompilerGeneratedAttribute]
private DeploymentTransformationSteps <Steps>k__BackingField;
    [CompilerGeneratedAttribute]
private DeploymentTransformationSteps <GlobalSteps>k__BackingField;
    [XmlElementAttribute("Steps")]
public DeploymentTransformationSteps Steps { get; public set; }
    [XmlElementAttribute("GlobalSteps")]
public DeploymentTransformationSteps GlobalSteps { get; public set; }
    [CompilerGeneratedAttribute]
public DeploymentTransformationSteps get_Steps();
    [CompilerGeneratedAttribute]
public void set_Steps(DeploymentTransformationSteps value);
    [CompilerGeneratedAttribute]
public DeploymentTransformationSteps get_GlobalSteps();
    [CompilerGeneratedAttribute]
public void set_GlobalSteps(DeploymentTransformationSteps value);
}
[KnownTypeAttribute("GetKnownTypes")]
public class TechTalk.SpecRun.Framework.Configuration.DeploymentTransformationSteps : object {
    [CompilerGeneratedAttribute]
private List`1<DeploymentTransformationStepConfiguration> <Steps>k__BackingField;
    [XmlElementAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.ConfigFileTransformationStepConfiguration")]
[XmlElementAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.RelocateStepConfiguration")]
[XmlElementAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.RelocateConfigurationFileStepConfiguration")]
[XmlElementAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.CopyFolderStepConfiguration")]
[XmlElementAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.CustomDeploymentStepConfiguration")]
[XmlElementAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.IISExpressStepConfiguration")]
[XmlElementAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.CopyFileStepConfiguration")]
[XmlElementAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.CopyFilesStepConfiguration")]
[XmlElementAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.DeleteFolderStepConfiguration")]
[XmlElementAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.EnvironmentVariableStepConfiguration")]
[JsonConverterAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.DeploymentTransformationStepConfigurationJsonConverter")]
public List`1<DeploymentTransformationStepConfiguration> Steps { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<DeploymentTransformationStepConfiguration> get_Steps();
    [CompilerGeneratedAttribute]
public void set_Steps(List`1<DeploymentTransformationStepConfiguration> value);
    public void Add(DeploymentTransformationStepConfiguration deploymentTransformationStep);
    public static Type[] GetKnownTypes();
}
public class TechTalk.SpecRun.Framework.Configuration.ExecutionSettings : object {
    [CompilerGeneratedAttribute]
private int <StopAfterFailures>k__BackingField;
    [CompilerGeneratedAttribute]
private TestSchedulingMode <TestSchedulingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestThreadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestThreadCountString>k__BackingField;
    [CompilerGeneratedAttribute]
private RetryMode <RetryMode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ApartmentState <ApartmentState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDryRun>k__BackingField;
    [XmlAttributeAttribute("stopAfterFailures")]
public int StopAfterFailures { get; public set; }
    [XmlAttributeAttribute("testSchedulingMode")]
public TestSchedulingMode TestSchedulingMode { get; public set; }
    [XmlIgnoreAttribute]
public int TestThreadCount { get; public set; }
    [XmlAttributeAttribute("testThreadCount")]
[JsonIgnoreAttribute]
public string TestThreadCountString { get; public set; }
    [XmlAttributeAttribute("retryFor")]
public RetryMode RetryMode { get; public set; }
    [XmlAttributeAttribute("retryCount")]
public int RetryCount { get; public set; }
    [XmlAttributeAttribute("apartmentState")]
public ApartmentState ApartmentState { get; public set; }
    [XmlAttributeAttribute("isDryRun")]
public bool IsDryRun { get; public set; }
    [CompilerGeneratedAttribute]
public int get_StopAfterFailures();
    [CompilerGeneratedAttribute]
public void set_StopAfterFailures(int value);
    [CompilerGeneratedAttribute]
public TestSchedulingMode get_TestSchedulingMode();
    [CompilerGeneratedAttribute]
public void set_TestSchedulingMode(TestSchedulingMode value);
    [CompilerGeneratedAttribute]
public int get_TestThreadCount();
    [CompilerGeneratedAttribute]
public void set_TestThreadCount(int value);
    [CompilerGeneratedAttribute]
public string get_TestThreadCountString();
    [CompilerGeneratedAttribute]
public void set_TestThreadCountString(string value);
    [CompilerGeneratedAttribute]
public RetryMode get_RetryMode();
    [CompilerGeneratedAttribute]
public void set_RetryMode(RetryMode value);
    [CompilerGeneratedAttribute]
public int get_RetryCount();
    [CompilerGeneratedAttribute]
public void set_RetryCount(int value);
    [CompilerGeneratedAttribute]
public ApartmentState get_ApartmentState();
    [CompilerGeneratedAttribute]
public void set_ApartmentState(ApartmentState value);
    [CompilerGeneratedAttribute]
public bool get_IsDryRun();
    [CompilerGeneratedAttribute]
public void set_IsDryRun(bool value);
}
public enum TechTalk.SpecRun.Framework.Configuration.ExistingFileHandlingStrategy : Enum {
    public int value__;
    public static ExistingFileHandlingStrategy Default;
    public static ExistingFileHandlingStrategy Overwrite;
    public static ExistingFileHandlingStrategy IncrementFilename;
}
public class TechTalk.SpecRun.Framework.Configuration.FilterConfiguration : object {
    [CompilerGeneratedAttribute]
private string <FilterExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterItem <Filter>k__BackingField;
    [XmlTextAttribute]
public string FilterExpression { get; public set; }
    [XmlIgnoreAttribute]
[JsonConverterAttribute("TechTalk.SpecRun.Framework.Filtering.FilterItemJsonConverter")]
public FilterItem Filter { get; public set; }
    [JsonIgnoreAttribute]
public bool IsSpecified { get; }
    [CompilerGeneratedAttribute]
public string get_FilterExpression();
    [CompilerGeneratedAttribute]
public void set_FilterExpression(string value);
    [CompilerGeneratedAttribute]
public FilterItem get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(FilterItem value);
    public bool get_IsSpecified();
    public void Resolve(IFilterExpressionParser filterExpressionParser);
    public bool Match(TestItem testItem, bool matchUnspecified);
    public bool Match(TestItem testItem);
}
public enum TechTalk.SpecRun.Framework.Configuration.FrameworkVersion : Enum {
    public int value__;
    public static FrameworkVersion Default;
    public static FrameworkVersion Net40;
    public static FrameworkVersion Net461;
    [XmlEnumAttribute("Netcoreapp2.1")]
public static FrameworkVersion Netcoreapp21;
    [XmlEnumAttribute("Netcoreapp3.1")]
public static FrameworkVersion Netcoreapp31;
    [XmlEnumAttribute("Net5.0")]
public static FrameworkVersion Net50;
}
public class TechTalk.SpecRun.Framework.Configuration.HostSettings : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [XmlAttributeAttribute("url")]
public string Url { get; public set; }
    [XmlIgnoreAttribute]
[JsonIgnoreAttribute]
internal bool IsLocal { get; }
    [XmlIgnoreAttribute]
[JsonIgnoreAttribute]
internal bool IsRemote { get; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    internal bool get_IsLocal();
    internal bool get_IsRemote();
    protected bool Equals(HostSettings other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal HostSettings CreateSpecific(HostSettings host);
}
public interface TechTalk.SpecRun.Framework.Configuration.ITestProfileLoader {
    public abstract virtual TestProfile LoadTestProfileFromFile(string filePath);
    public abstract virtual TestProfile LoadTestProfileFromFirstExistingFile(IEnumerable`1<string> filePaths);
    public abstract virtual TestProfile LoadDefaultTestProfile();
}
public static class TechTalk.SpecRun.Framework.Configuration.Percentage : object {
    public static string PercentageRegexString;
    public static Regex PercentageRegex;
    private static Percentage();
    public static bool FromString(string percentageString, Decimal& result);
    public static decimal FromString(string percentageString);
}
public enum TechTalk.SpecRun.Framework.Configuration.Platform : Enum {
    public int value__;
    public static Platform Default;
    public static Platform x86;
    public static Platform x64;
}
public class TechTalk.SpecRun.Framework.Configuration.ReportSettings : object {
    [CompilerGeneratedAttribute]
private bool <CopyAlsoToBaseFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableGeneration>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ReportTemplate> <Templates>k__BackingField;
    [XmlAttributeAttribute("copyAlsoToBaseFolder")]
public bool CopyAlsoToBaseFolder { get; public set; }
    [XmlAttributeAttribute("disable")]
public bool DisableGeneration { get; public set; }
    [XmlElementAttribute("Template")]
public List`1<ReportTemplate> Templates { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CopyAlsoToBaseFolder();
    [CompilerGeneratedAttribute]
public void set_CopyAlsoToBaseFolder(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableGeneration();
    [CompilerGeneratedAttribute]
public void set_DisableGeneration(bool value);
    [CompilerGeneratedAttribute]
public List`1<ReportTemplate> get_Templates();
    [CompilerGeneratedAttribute]
public void set_Templates(List`1<ReportTemplate> value);
}
[XmlRootAttribute]
public class TechTalk.SpecRun.Framework.Configuration.ReportTemplate : object {
    [CompilerGeneratedAttribute]
private string <InputName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputName>k__BackingField;
    [CompilerGeneratedAttribute]
private ExistingFileHandlingStrategy <ExistingFileHandlingStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputCulture>k__BackingField;
    [XmlAttributeAttribute("name")]
public string InputName { get; public set; }
    [XmlAttributeAttribute("outputName")]
public string OutputName { get; public set; }
    [XmlAttributeAttribute("existingFileHandlingStrategy")]
public ExistingFileHandlingStrategy ExistingFileHandlingStrategy { get; public set; }
    [XmlAttributeAttribute("outputCulture")]
public string OutputCulture { get; public set; }
    [CompilerGeneratedAttribute]
public string get_InputName();
    [CompilerGeneratedAttribute]
public void set_InputName(string value);
    [CompilerGeneratedAttribute]
public string get_OutputName();
    [CompilerGeneratedAttribute]
public void set_OutputName(string value);
    [CompilerGeneratedAttribute]
public ExistingFileHandlingStrategy get_ExistingFileHandlingStrategy();
    [CompilerGeneratedAttribute]
public void set_ExistingFileHandlingStrategy(ExistingFileHandlingStrategy value);
    [CompilerGeneratedAttribute]
public string get_OutputCulture();
    [CompilerGeneratedAttribute]
public void set_OutputCulture(string value);
    public sealed virtual bool Equals(ReportTemplate other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum TechTalk.SpecRun.Framework.Configuration.RetryMode : Enum {
    public int value__;
    public static RetryMode None;
    public static RetryMode Failing;
    public static RetryMode All;
}
public class TechTalk.SpecRun.Framework.Configuration.ServerSettings : object {
    [CompilerGeneratedAttribute]
private bool <PublishResults>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerUrl>k__BackingField;
    [XmlAttributeAttribute("publishResults")]
public bool PublishResults { get; public set; }
    [XmlAttributeAttribute("serverUrl")]
public string ServerUrl { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_PublishResults();
    [CompilerGeneratedAttribute]
public void set_PublishResults(bool value);
    [CompilerGeneratedAttribute]
public string get_ServerUrl();
    [CompilerGeneratedAttribute]
public void set_ServerUrl(string value);
}
[XmlTypeAttribute("Target")]
public class TechTalk.SpecRun.Framework.Configuration.TargetConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TestEnvironmentSettings <TestEnvironmentSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private DeploymentTransformationSteps <DeploymentTransformationSteps>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterConfiguration <FilterConfiguration>k__BackingField;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlElementAttribute("Environment")]
public TestEnvironmentSettings TestEnvironmentSettings { get; public set; }
    [XmlElementAttribute("DeploymentTransformationSteps")]
public DeploymentTransformationSteps DeploymentTransformationSteps { get; public set; }
    [XmlElementAttribute("Filter")]
public FilterConfiguration FilterConfiguration { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public TestEnvironmentSettings get_TestEnvironmentSettings();
    [CompilerGeneratedAttribute]
public void set_TestEnvironmentSettings(TestEnvironmentSettings value);
    [CompilerGeneratedAttribute]
public DeploymentTransformationSteps get_DeploymentTransformationSteps();
    [CompilerGeneratedAttribute]
public void set_DeploymentTransformationSteps(DeploymentTransformationSteps value);
    [CompilerGeneratedAttribute]
public FilterConfiguration get_FilterConfiguration();
    [CompilerGeneratedAttribute]
public void set_FilterConfiguration(FilterConfiguration value);
}
public class TechTalk.SpecRun.Framework.Configuration.TestEnvironmentSettings : object {
    [CompilerGeneratedAttribute]
private FrameworkVersion <FrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private ApartmentState <ApartmentState>k__BackingField;
    [CompilerGeneratedAttribute]
private TestThreadIsolation <TestThreadIsolation>k__BackingField;
    [XmlAttributeAttribute("framework")]
public FrameworkVersion FrameworkVersion { get; public set; }
    [XmlAttributeAttribute("platform")]
public Platform Platform { get; public set; }
    [XmlAttributeAttribute("apartmentState")]
public ApartmentState ApartmentState { get; public set; }
    [XmlAttributeAttribute("testThreadIsolation")]
public TestThreadIsolation TestThreadIsolation { get; public set; }
    [XmlIgnoreAttribute]
[JsonIgnoreAttribute]
internal ClrVersion ClrVersion { get; }
    [CompilerGeneratedAttribute]
public FrameworkVersion get_FrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_FrameworkVersion(FrameworkVersion value);
    [CompilerGeneratedAttribute]
public Platform get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(Platform value);
    [CompilerGeneratedAttribute]
public ApartmentState get_ApartmentState();
    [CompilerGeneratedAttribute]
public void set_ApartmentState(ApartmentState value);
    [CompilerGeneratedAttribute]
public TestThreadIsolation get_TestThreadIsolation();
    [CompilerGeneratedAttribute]
public void set_TestThreadIsolation(TestThreadIsolation value);
    internal ClrVersion get_ClrVersion();
    public TestEnvironmentSettings CreateSpecific(TestEnvironmentSettings testEnvironmentSettings);
}
public class TechTalk.SpecRun.Framework.Configuration.TestProfile : object {
    [CompilerGeneratedAttribute]
private TestProfileSettings <TestProfileSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ServerSettings <ServerSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionSettings <ExecutionSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportSettings <ReportSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private TestEnvironmentSettings <TestEnvironmentSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private VSTestSettings <VsTestSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private HostSettings <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TestAssemblyPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TargetConfiguration> <Targets>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterConfiguration <FilterConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private DeploymentTransformation <DeploymentTransformation>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TestThreadConfiguration> <TestThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TestThreadConfiguration> <ResolvedTestThreads>k__BackingField;
    [XmlIgnoreAttribute]
[JsonIgnoreAttribute]
public string Name { get; }
    [XmlIgnoreAttribute]
[JsonIgnoreAttribute]
public string ProjectName { get; }
    [XmlElementAttribute("Settings")]
public TestProfileSettings TestProfileSettings { get; public set; }
    [XmlElementAttribute("Server")]
public ServerSettings ServerSettings { get; public set; }
    [XmlElementAttribute("Execution")]
public ExecutionSettings ExecutionSettings { get; public set; }
    [XmlElementAttribute("Report")]
public ReportSettings ReportSettings { get; public set; }
    [XmlElementAttribute("Environment")]
public TestEnvironmentSettings TestEnvironmentSettings { get; public set; }
    [XmlElementAttribute("VSTest")]
public VSTestSettings VsTestSettings { get; public set; }
    [XmlElementAttribute("Host")]
public HostSettings Host { get; public set; }
    [XmlArrayItemAttribute("TestAssemblyPath")]
public List`1<string> TestAssemblyPaths { get; public set; }
    public List`1<TargetConfiguration> Targets { get; public set; }
    [XmlElementAttribute("Filter")]
public FilterConfiguration FilterConfiguration { get; public set; }
    public DeploymentTransformation DeploymentTransformation { get; public set; }
    public List`1<TestThreadConfiguration> TestThreads { get; public set; }
    [XmlIgnoreAttribute]
public List`1<TestThreadConfiguration> ResolvedTestThreads { get; public set; }
    public string get_Name();
    public string get_ProjectName();
    [CompilerGeneratedAttribute]
public TestProfileSettings get_TestProfileSettings();
    [CompilerGeneratedAttribute]
public void set_TestProfileSettings(TestProfileSettings value);
    [CompilerGeneratedAttribute]
public ServerSettings get_ServerSettings();
    [CompilerGeneratedAttribute]
public void set_ServerSettings(ServerSettings value);
    [CompilerGeneratedAttribute]
public ExecutionSettings get_ExecutionSettings();
    [CompilerGeneratedAttribute]
public void set_ExecutionSettings(ExecutionSettings value);
    [CompilerGeneratedAttribute]
public ReportSettings get_ReportSettings();
    [CompilerGeneratedAttribute]
public void set_ReportSettings(ReportSettings value);
    [CompilerGeneratedAttribute]
public TestEnvironmentSettings get_TestEnvironmentSettings();
    [CompilerGeneratedAttribute]
public void set_TestEnvironmentSettings(TestEnvironmentSettings value);
    [CompilerGeneratedAttribute]
public VSTestSettings get_VsTestSettings();
    [CompilerGeneratedAttribute]
public void set_VsTestSettings(VSTestSettings value);
    [CompilerGeneratedAttribute]
public HostSettings get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(HostSettings value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TestAssemblyPaths();
    [CompilerGeneratedAttribute]
public void set_TestAssemblyPaths(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<TargetConfiguration> get_Targets();
    [CompilerGeneratedAttribute]
public void set_Targets(List`1<TargetConfiguration> value);
    [CompilerGeneratedAttribute]
public FilterConfiguration get_FilterConfiguration();
    [CompilerGeneratedAttribute]
public void set_FilterConfiguration(FilterConfiguration value);
    [CompilerGeneratedAttribute]
public DeploymentTransformation get_DeploymentTransformation();
    [CompilerGeneratedAttribute]
public void set_DeploymentTransformation(DeploymentTransformation value);
    [CompilerGeneratedAttribute]
public List`1<TestThreadConfiguration> get_TestThreads();
    [CompilerGeneratedAttribute]
public void set_TestThreads(List`1<TestThreadConfiguration> value);
    [CompilerGeneratedAttribute]
public List`1<TestThreadConfiguration> get_ResolvedTestThreads();
    [CompilerGeneratedAttribute]
public void set_ResolvedTestThreads(List`1<TestThreadConfiguration> value);
    public TestProfile Clone();
}
public class TechTalk.SpecRun.Framework.Configuration.TestProfileLoader : object {
    private IProcessorCount _processorCount;
    private VsTestSettingsValidator _vsTestSettingsValidator;
    public TestProfileLoader(IProcessorCount processorCount);
    public sealed virtual TestProfile LoadTestProfileFromFile(string filePath);
    public TestProfile LoadTestProfileFromXml(string xml);
    private TestProfile LoadProfileWithDefaultNamespace(TextReader reader);
    private int CalculateTestThreadCount(ExecutionSettings profileExecutionSettings);
    private TestProfile LoadProfileWithDefaultNamespace(string content, string defaultNamespace);
    public sealed virtual TestProfile LoadTestProfileFromFirstExistingFile(IEnumerable`1<string> filePaths);
    public sealed virtual TestProfile LoadDefaultTestProfile();
    private string GetMessage(Exception exception);
}
public class TechTalk.SpecRun.Framework.Configuration.TestProfileSettings : object {
    [CompilerGeneratedAttribute]
private string <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectIdGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFolderSetting>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalBaseFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFolder>k__BackingField;
    [XmlIgnoreAttribute]
[JsonIgnoreAttribute]
public string UniqueId { get; }
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("projectName")]
public string ProjectName { get; public set; }
    [XmlAttributeAttribute("licenseKey")]
public string LicenseKey { get; public set; }
    public Guid ProjectIdGuid { get; public set; }
    [XmlAttributeAttribute("projectId")]
public string ProjectId { get; public set; }
    [XmlAttributeAttribute("baseFolder")]
public string BaseFolder { get; public set; }
    [XmlAttributeAttribute("outputFolder")]
public string OutputFolderSetting { get; public set; }
    [XmlAttributeAttribute("reportTemplate")]
public string ReportTemplate { get; public set; }
    [XmlIgnoreAttribute]
public string OriginalBaseFolder { get; public set; }
    [XmlIgnoreAttribute]
public string OutputFolder { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UniqueId();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public string get_LicenseKey();
    [CompilerGeneratedAttribute]
public void set_LicenseKey(string value);
    [CompilerGeneratedAttribute]
public Guid get_ProjectIdGuid();
    [CompilerGeneratedAttribute]
public void set_ProjectIdGuid(Guid value);
    public string get_ProjectId();
    public void set_ProjectId(string value);
    [CompilerGeneratedAttribute]
public string get_BaseFolder();
    [CompilerGeneratedAttribute]
public void set_BaseFolder(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFolderSetting();
    [CompilerGeneratedAttribute]
public void set_OutputFolderSetting(string value);
    [CompilerGeneratedAttribute]
public string get_ReportTemplate();
    [CompilerGeneratedAttribute]
public void set_ReportTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalBaseFolder();
    [CompilerGeneratedAttribute]
public void set_OriginalBaseFolder(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFolder();
    [CompilerGeneratedAttribute]
public void set_OutputFolder(string value);
}
public enum TechTalk.SpecRun.Framework.Configuration.TestRetryResult : Enum {
    public int value__;
    public static TestRetryResult Separate;
    public static TestRetryResult Unified;
}
public enum TechTalk.SpecRun.Framework.Configuration.TestSchedulingMode : Enum {
    public int value__;
    public static TestSchedulingMode Sequential;
    public static TestSchedulingMode Random;
    public static TestSchedulingMode Adaptive;
}
[XmlTypeAttribute("TestThread")]
public class TechTalk.SpecRun.Framework.Configuration.TestThreadConfiguration : object {
    [CompilerGeneratedAttribute]
private int <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterConfiguration <TestAffinity>k__BackingField;
    [CompilerGeneratedAttribute]
private HostSettings <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetExecutionModelSettings <ExecutionModelSettings>k__BackingField;
    [XmlAttributeAttribute("id")]
public int ThreadId { get; public set; }
    [XmlElementAttribute("TestAffinity")]
public FilterConfiguration TestAffinity { get; public set; }
    [XmlElementAttribute("Host")]
public HostSettings Host { get; public set; }
    [XmlIgnoreAttribute]
public TargetExecutionModelSettings ExecutionModelSettings { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ThreadId();
    [CompilerGeneratedAttribute]
public void set_ThreadId(int value);
    [CompilerGeneratedAttribute]
public FilterConfiguration get_TestAffinity();
    [CompilerGeneratedAttribute]
public void set_TestAffinity(FilterConfiguration value);
    [CompilerGeneratedAttribute]
public HostSettings get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(HostSettings value);
    [CompilerGeneratedAttribute]
public TargetExecutionModelSettings get_ExecutionModelSettings();
    [CompilerGeneratedAttribute]
public void set_ExecutionModelSettings(TargetExecutionModelSettings value);
}
public enum TechTalk.SpecRun.Framework.Configuration.TestThreadIsolation : Enum {
    public int value__;
    public static TestThreadIsolation Default;
    public static TestThreadIsolation AppDomain;
    public static TestThreadIsolation Process;
    public static TestThreadIsolation SharedAppDomain;
}
public class TechTalk.SpecRun.Framework.Configuration.VSTestSettings : object {
    [XmlIgnoreAttribute]
private string _passRateRelativeString;
    [XmlIgnoreAttribute]
private string _passRateAbsoluteString;
    [XmlIgnoreAttribute]
private Nullable`1<decimal> _passRateRelative;
    [XmlIgnoreAttribute]
private Nullable`1<int> _passRateAbsolute;
    private CultureInfo _englishCulture;
    [CompilerGeneratedAttribute]
private TestRetryResult <TestRetryResults>k__BackingField;
    [XmlAttributeAttribute("testRetryResults")]
public TestRetryResult TestRetryResults { get; public set; }
    [XmlIgnoreAttribute]
public Nullable`1<decimal> PassRateRelative { get; public set; }
    [XmlIgnoreAttribute]
public Nullable`1<int> PassRateAbsolute { get; public set; }
    [XmlAttributeAttribute("passRateRelative")]
[JsonIgnoreAttribute]
public string PassRateRelativeString { get; public set; }
    [XmlAttributeAttribute("passRateAbsolute")]
[JsonIgnoreAttribute]
public string PassRateAbsoluteString { get; public set; }
    [CompilerGeneratedAttribute]
public TestRetryResult get_TestRetryResults();
    [CompilerGeneratedAttribute]
public void set_TestRetryResults(TestRetryResult value);
    public Nullable`1<decimal> get_PassRateRelative();
    public void set_PassRateRelative(Nullable`1<decimal> value);
    public Nullable`1<int> get_PassRateAbsolute();
    public void set_PassRateAbsolute(Nullable`1<int> value);
    public string get_PassRateRelativeString();
    public void set_PassRateRelativeString(string value);
    public string get_PassRateAbsoluteString();
    public void set_PassRateAbsoluteString(string value);
}
public class TechTalk.SpecRun.Framework.Configuration.VsTestSettingsValidator : object {
    public void Validate(VSTestSettings settings);
}
[XmlTypeAttribute("ConfigFileTransformation")]
public class TechTalk.SpecRun.Framework.DeploymentSteps.ConfigFileTransformationStepConfiguration : DeploymentTransformationStepConfiguration {
    [CompilerGeneratedAttribute]
private string <ConfigFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TransformationFileContent>k__BackingField;
    [XmlAttributeAttribute("configFile")]
public string ConfigFilePath { get; public set; }
    [XmlElementAttribute("Transformation")]
public string TransformationFileContent { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ConfigFilePath();
    [CompilerGeneratedAttribute]
public void set_ConfigFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_TransformationFileContent();
    [CompilerGeneratedAttribute]
public void set_TransformationFileContent(string value);
}
[XmlTypeAttribute("CopyFiles")]
public class TechTalk.SpecRun.Framework.DeploymentSteps.CopyFilesStepConfiguration : DeploymentTransformationStepConfiguration {
}
[XmlTypeAttribute("CopyFile")]
public class TechTalk.SpecRun.Framework.DeploymentSteps.CopyFileStepConfiguration : DeploymentTransformationStepConfiguration {
    [CompilerGeneratedAttribute]
private string <SourceFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeleteOnRestore>k__BackingField;
    [XmlAttributeAttribute("source")]
public string SourceFileName { get; public set; }
    [XmlAttributeAttribute("target")]
public string TargetFileName { get; public set; }
    [XmlAttributeAttribute("targetFolder")]
public string TargetFolder { get; public set; }
    [XmlAttributeAttribute("deleteOnRestore")]
public bool DeleteOnRestore { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourceFileName();
    [CompilerGeneratedAttribute]
public void set_SourceFileName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFileName();
    [CompilerGeneratedAttribute]
public void set_TargetFileName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFolder();
    [CompilerGeneratedAttribute]
public void set_TargetFolder(string value);
    [CompilerGeneratedAttribute]
public bool get_DeleteOnRestore();
    [CompilerGeneratedAttribute]
public void set_DeleteOnRestore(bool value);
}
[XmlTypeAttribute("CopyFolder")]
public class TechTalk.SpecRun.Framework.DeploymentSteps.CopyFolderStepConfiguration : DeploymentTransformationStepConfiguration {
    [CompilerGeneratedAttribute]
private string <SourceFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeleteFolderOnRestore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeleteFolderOnApply>k__BackingField;
    [XmlAttributeAttribute("source")]
public string SourceFolder { get; public set; }
    [XmlAttributeAttribute("target")]
public string TargetFolder { get; public set; }
    [XmlAttributeAttribute("deleteFolderOnRestore")]
public bool DeleteFolderOnRestore { get; public set; }
    [XmlAttributeAttribute("deleteFolderOnApply")]
public bool DeleteFolderOnApply { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourceFolder();
    [CompilerGeneratedAttribute]
public void set_SourceFolder(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFolder();
    [CompilerGeneratedAttribute]
public void set_TargetFolder(string value);
    [CompilerGeneratedAttribute]
public bool get_DeleteFolderOnRestore();
    [CompilerGeneratedAttribute]
public void set_DeleteFolderOnRestore(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeleteFolderOnApply();
    [CompilerGeneratedAttribute]
public void set_DeleteFolderOnApply(bool value);
}
[XmlTypeAttribute("Custom")]
public class TechTalk.SpecRun.Framework.DeploymentSteps.CustomDeploymentStepConfiguration : DeploymentTransformationStepConfiguration {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [XmlAttributeAttribute("type")]
public string TypeName { get; public set; }
    [XmlAttributeAttribute("arguments")]
public string Arguments { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(string value);
}
[XmlTypeAttribute("DeleteFolder")]
public class TechTalk.SpecRun.Framework.DeploymentSteps.DeleteFolderStepConfiguration : DeploymentTransformationStepConfiguration {
    [CompilerGeneratedAttribute]
private bool <ThrowExceptionIfFolderDoesNotExist>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [XmlAttributeAttribute("throwExceptionIfFolderDoesNotExist")]
public bool ThrowExceptionIfFolderDoesNotExist { get; public set; }
    [XmlAttributeAttribute("path")]
public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ThrowExceptionIfFolderDoesNotExist();
    [CompilerGeneratedAttribute]
public void set_ThrowExceptionIfFolderDoesNotExist(bool value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.ConfigFileTransformationStepConfiguration")]
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.RelocateStepConfiguration")]
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.RelocateConfigurationFileStepConfiguration")]
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.CopyFolderStepConfiguration")]
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.CustomDeploymentStepConfiguration")]
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.IISExpressStepConfiguration")]
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.CopyFileStepConfiguration")]
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.CopyFilesStepConfiguration")]
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.DeleteFolderStepConfiguration")]
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.DeploymentSteps.EnvironmentVariableStepConfiguration")]
public abstract class TechTalk.SpecRun.Framework.DeploymentSteps.DeploymentTransformationStepConfiguration : object {
    public virtual string ToString();
}
public class TechTalk.SpecRun.Framework.DeploymentSteps.DeploymentTransformationStepConfigurationJsonConverter : JsonConverter {
    public bool CanWrite { get; }
    public bool CanRead { get; }
    public virtual bool get_CanWrite();
    public virtual bool get_CanRead();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[XmlTypeAttribute("EnvironmentVariable")]
public class TechTalk.SpecRun.Framework.DeploymentSteps.EnvironmentVariableStepConfiguration : DeploymentTransformationStepConfiguration {
    [CompilerGeneratedAttribute]
private string <Variable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [XmlAttributeAttribute("variable")]
public string Variable { get; public set; }
    [XmlAttributeAttribute("value")]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Variable();
    [CompilerGeneratedAttribute]
public void set_Variable(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[XmlTypeAttribute("IISExpress")]
public class TechTalk.SpecRun.Framework.DeploymentSteps.IISExpressStepConfiguration : DeploymentTransformationStepConfiguration {
    [CompilerGeneratedAttribute]
private string <IISExpressPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebAppFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseShellExecute>k__BackingField;
    [XmlAttributeAttribute("iisExpressPath")]
public string IISExpressPath { get; public set; }
    [XmlAttributeAttribute("webAppFolder")]
public string WebAppFolder { get; public set; }
    [XmlAttributeAttribute("port")]
public string Port { get; public set; }
    [XmlAttributeAttribute("useShellExecute")]
public bool UseShellExecute { get; public set; }
    [CompilerGeneratedAttribute]
public string get_IISExpressPath();
    [CompilerGeneratedAttribute]
public void set_IISExpressPath(string value);
    [CompilerGeneratedAttribute]
public string get_WebAppFolder();
    [CompilerGeneratedAttribute]
public void set_WebAppFolder(string value);
    [CompilerGeneratedAttribute]
public string get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(string value);
    [CompilerGeneratedAttribute]
public bool get_UseShellExecute();
    [CompilerGeneratedAttribute]
public void set_UseShellExecute(bool value);
}
[XmlTypeAttribute("RelocateConfigurationFile")]
public class TechTalk.SpecRun.Framework.DeploymentSteps.RelocateConfigurationFileStepConfiguration : DeploymentTransformationStepConfiguration {
    [CompilerGeneratedAttribute]
private string <TargetFileName>k__BackingField;
    [XmlAttributeAttribute("target")]
public string TargetFileName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TargetFileName();
    [CompilerGeneratedAttribute]
public void set_TargetFileName(string value);
}
[XmlTypeAttribute("Relocate")]
public class TechTalk.SpecRun.Framework.DeploymentSteps.RelocateStepConfiguration : DeploymentTransformationStepConfiguration {
    private CopyFolderStepConfiguration copyFolderStep;
    [XmlAttributeAttribute("targetFolder")]
public string TargetFolder { get; public set; }
    [XmlAttributeAttribute("deleteFolderOnRestore")]
public bool DeleteFolderOnRestore { get; public set; }
    public string get_TargetFolder();
    public void set_TargetFolder(string value);
    public bool get_DeleteFolderOnRestore();
    public void set_DeleteFolderOnRestore(bool value);
}
public class TechTalk.SpecRun.Framework.ExecutionModelSettings : object {
    [CompilerGeneratedAttribute]
private TestExecutionModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private ClrVersion <ClrVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private ApartmentState <ApartmentState>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ExecutorUniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private HostSettings <Host>k__BackingField;
    public TestExecutionModel Model { get; public set; }
    public ClrVersion ClrVersion { get; public set; }
    public Platform Platform { get; public set; }
    public ApartmentState ApartmentState { get; public set; }
    public Guid ExecutorUniqueId { get; public set; }
    public HostSettings Host { get; public set; }
    public bool IsInProcModel { get; }
    [CompilerGeneratedAttribute]
public TestExecutionModel get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(TestExecutionModel value);
    [CompilerGeneratedAttribute]
public ClrVersion get_ClrVersion();
    [CompilerGeneratedAttribute]
public void set_ClrVersion(ClrVersion value);
    [CompilerGeneratedAttribute]
public Platform get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(Platform value);
    [CompilerGeneratedAttribute]
public ApartmentState get_ApartmentState();
    [CompilerGeneratedAttribute]
public void set_ApartmentState(ApartmentState value);
    [CompilerGeneratedAttribute]
public Guid get_ExecutorUniqueId();
    [CompilerGeneratedAttribute]
public void set_ExecutorUniqueId(Guid value);
    [CompilerGeneratedAttribute]
public HostSettings get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(HostSettings value);
    public bool get_IsInProcModel();
    public static ClrVersion GetClrVersion(FrameworkVersion frameworkVersion);
    protected bool Equals(ExecutionModelSettings other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class TechTalk.SpecRun.Framework.Filtering.AndFilter : FilterItem {
    public FilterItem LeftArg;
    public FilterItem RightArg;
    public AndFilter(FilterItem leftArg, FilterItem rightArg);
    public virtual bool Match(TestItem testItem);
    public virtual string ToString();
}
public class TechTalk.SpecRun.Framework.Filtering.FastTestPathFilter : FilterItem {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Feature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scenario>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [XmlTextAttribute]
public string Path { get; public set; }
    public string Assembly { get; public set; }
    public string Feature { get; public set; }
    public string Scenario { get; public set; }
    public string Target { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Assembly();
    [CompilerGeneratedAttribute]
public void set_Assembly(string value);
    [CompilerGeneratedAttribute]
public string get_Feature();
    [CompilerGeneratedAttribute]
public void set_Feature(string value);
    [CompilerGeneratedAttribute]
public string get_Scenario();
    [CompilerGeneratedAttribute]
public void set_Scenario(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    public virtual bool Match(TestItem testItem);
    public virtual string ToString();
}
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.Filtering.AndFilter")]
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.Filtering.OrFilter")]
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.Filtering.NotFilter")]
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.Filtering.TagFilter")]
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.Filtering.TagMatchFilter")]
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.Filtering.RemoteFilterItem")]
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.Filtering.TestPathFilter")]
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.Filtering.FastTestPathFilter")]
[XmlIncludeAttribute("TechTalk.SpecRun.Framework.Filtering.MultipleOrFilter")]
[KnownTypeAttribute("GetKnownTypes")]
public abstract class TechTalk.SpecRun.Framework.Filtering.FilterItem : object {
    public abstract virtual bool Match(TestItem testItem);
    public static FilterItem Combine(FilterItem filter1, FilterItem filter2);
    public static Type[] GetKnownTypes();
}
public class TechTalk.SpecRun.Framework.Filtering.FilterItemJsonConverter : JsonConverter {
    public bool CanWrite { get; }
    public bool CanRead { get; }
    public virtual bool get_CanWrite();
    public virtual bool get_CanRead();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public interface TechTalk.SpecRun.Framework.Filtering.IFilterExpressionParser {
    public abstract virtual FilterItem Parse(string filterExpression);
}
public interface TechTalk.SpecRun.Framework.Filtering.ITestPathFilter {
    public string Path { get; public set; }
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
    public abstract virtual bool Match(TestItem testItem);
}
public class TechTalk.SpecRun.Framework.Filtering.MultipleOrFilter : FilterItem {
    private List`1<FilterItem> _filterItems;
    public MultipleOrFilter(List`1<FilterItem> filterItems);
    public virtual bool Match(TestItem testItem);
    public virtual string ToString();
}
public class TechTalk.SpecRun.Framework.Filtering.NotFilter : FilterItem {
    public FilterItem Arg;
    public NotFilter(FilterItem arg);
    public virtual bool Match(TestItem testItem);
    public virtual string ToString();
}
public class TechTalk.SpecRun.Framework.Filtering.OrFilter : FilterItem {
    public FilterItem LeftArg;
    public FilterItem RightArg;
    public OrFilter(FilterItem leftArg, FilterItem rightArg);
    public virtual bool Match(TestItem testItem);
    public virtual string ToString();
}
public class TechTalk.SpecRun.Framework.Filtering.RemoteFilterItem : FilterItem {
    private RemoteFilterItemWrapper remoteFilterItemWrapper;
    public RemoteFilterItem(Func`2<TestItem, bool> matcher);
    public virtual bool Match(TestItem testItem);
}
public class TechTalk.SpecRun.Framework.Filtering.TagFilter : FilterItem {
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [XmlTextAttribute]
public string Tag { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(string value);
    public virtual bool Match(TestItem testItem);
    public virtual string ToString();
}
public class TechTalk.SpecRun.Framework.Filtering.TagMatchFilter : FilterItem {
    private Regex regex;
    private string tagRegex;
    [XmlTextAttribute]
public string TagRegex { get; public set; }
    public string get_TagRegex();
    public void set_TagRegex(string value);
    public virtual bool Match(TestItem testItem);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool <Match>b__5_0(string t);
}
public class TechTalk.SpecRun.Framework.Filtering.TestPathFilter : FilterItem {
    private string _path;
    [XmlTextAttribute]
public string Path { get; public set; }
    public sealed virtual string get_Path();
    public sealed virtual void set_Path(string value);
    private string NormalizeValue(string value);
    private string UrlEncodeDecode(string match);
    private Regex CreateMatchRe();
    public virtual bool Match(TestItem testItem);
    public virtual string ToString();
}
public interface TechTalk.SpecRun.Framework.ICurrentExecutionModelSettings {
    public abstract virtual ExecutionModelSettings GetCurrent();
}
public interface TechTalk.SpecRun.Framework.IOutOfProcessLogger {
    public abstract virtual void Log(string message);
}
public interface TechTalk.SpecRun.Framework.IOutOfProcessTestAssemblyExecutor {
    public abstract virtual void Initialize(int threadId, RemoteAssemblyReference assemblyReference, string testAssemblyFullPath, string testAssemblyConfigFilePath, ApartmentState apartmentState, TestExecutionConfiguration testExecutionConfiguration, string target);
    public abstract virtual TestThreadState RunTests(TestThreadState testThreadState);
    public abstract virtual void DeInitialize();
}
public interface TechTalk.SpecRun.Framework.IOutOfProcessTestAssemblyExecutorCallback {
    public abstract virtual TestExecutionId GetNextTest(int threadId);
    public abstract virtual TestSuite GetTestSuite();
    public abstract virtual void PostExecutorPort(ushort port);
    public abstract virtual void RegisterTestItemStart(TestExecutionId testExecutionId, int threadId);
    public abstract virtual void RegisterTestItemPreliminaryResult(TestExecutionId testExecutionId, int threadId, TestNodeResultType preliminaryTestResult);
    public abstract virtual void RegisterTestItemResult(TestExecutionId testExecutionId, TestNodeResult testNodeResult);
    public abstract virtual void RegisterThreadStart(int threadId, string machineName);
    public abstract virtual void RegisterThreadFinish(int threadId);
    public abstract virtual void ThreadCancelled(int threadId);
    public abstract virtual bool GetIsCancelled();
}
public interface TechTalk.SpecRun.Framework.IProcessorCount {
    public int Value { get; }
    public abstract virtual int get_Value();
}
public interface TechTalk.SpecRun.Framework.ITestAssemblyExecutor {
    public abstract virtual void Initialize(int threadId, ITestExecutionManager executionManager, IAssemblyReference assemblyReference, ITestLogger logger, string testAssemblyFullPath, string testAssemblyConfigFilePath, TestExecutionConfiguration testExecutionConfiguration, string target);
    public abstract virtual TestThreadState RunTests(TestThreadState testThreadState);
    public abstract virtual void DeInitialize();
}
public interface TechTalk.SpecRun.Framework.ITestExecutionManager {
    public abstract virtual TestExecutionId GetNextTest(int threadId);
    public abstract virtual void RegisterTestItemStart(TestExecutionId testExecutionId, int threadId);
    public abstract virtual void RegisterTestItemPreliminaryResult(TestExecutionId testExecutionId, int threadId, TestNodeResultType preliminaryTestResult);
    public abstract virtual void RegisterTestItemResult(TestExecutionId testExecutionId, TestNodeResult testNodeResult);
    public abstract virtual void RegisterThreadStart(int threadId, string machineName);
    public abstract virtual void RegisterThreadFinish(int threadId, Exception testThreadError);
    public abstract virtual void ThreadCancelled(int threadId);
    public abstract virtual bool GetIsCancelled();
    public abstract virtual TestSuite GetTestSuite();
}
public interface TechTalk.SpecRun.Framework.ITestThreadExecutionContext {
    public object TestInstance { get; public set; }
    public abstract virtual object get_TestInstance();
    public abstract virtual void set_TestInstance(object value);
}
[ExtensionAttribute]
public static class TechTalk.SpecRun.Framework.JsonConverterExtensions : object {
    [ExtensionAttribute]
public static void Serialize(JsonWriter writer, object value);
    private static JArray CreateJArrayFromValue(object value);
    public static JArray CreateJArrayFromList(object value);
    public static JObject CreateJObjectFromValue(Type type, object value);
    public static JObject CreateJObjectFromTestNode(Type type, object value);
    public static JObject CreateJObjectFromDeploymentTransformationStepConfiguration(Type type, object value);
    public static JObject CreateJObjectFromFilterItem(Type type, object value);
    [ExtensionAttribute]
public static JToken GetJsonValue(PropertyInfo prop, object instance);
    [ExtensionAttribute]
public static bool IsDeploymentTransformationStepConfigurationType(Type type);
    [ExtensionAttribute]
public static bool IsFilterItemType(Type type);
    [ExtensionAttribute]
public static bool IsTestNodeType(Type type);
    [ExtensionAttribute]
public static object Deserialize(JsonReader reader, JsonSerializer serializer);
    [ExtensionAttribute]
public static bool IsFilterItemObject(JObject jsonObject);
    [ExtensionAttribute]
public static bool IsDeploymentTransformationStepConfigurationObject(JObject jsonObject);
    [ExtensionAttribute]
public static bool IsTestNodeObject(JObject jsonObject);
    [ExtensionAttribute]
public static bool IsExecutorObject(JObject jsonObject);
    private static TestNode DeserializeToTestNode(JsonReader reader, JsonSerializer serializer, JObject jsonObject);
    public static ITaskExecutor DeserializeToExecutor(JObject jsonObject);
    public static DeploymentTransformationStepConfiguration DeserializeToDeploymentConfiguration(JObject jsonObject);
    public static FilterItem DeserializeToFilterItem(JObject jsonObject);
    public static JsonReader CopyReader(JsonReader reader, JObject jObject);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(JToken token);
}
public class TechTalk.SpecRun.Framework.Logging.RemotableLoggerHost : RemotableObjectHost {
    private ITestLogger _logger;
    public RemotableLoggerHost(ITestLogger logger);
    public sealed virtual void Log(string message);
    public sealed virtual void Log(LogEntry logEntry, string threadName);
    public sealed virtual void Flush();
    public sealed virtual void Dispose();
}
public class TechTalk.SpecRun.Framework.ProcessorCount : object {
    public int Value { get; }
    public sealed virtual int get_Value();
}
public class TechTalk.SpecRun.Framework.RemotableTestExecutionManagerHost : RemotableObjectHost {
    private ITestExecutionManager _testExecutionManager;
    public RemotableTestExecutionManagerHost(ITestExecutionManager testExecutionManager);
    public sealed virtual TestExecutionId GetNextTest(int threadId);
    public sealed virtual void RegisterTestItemStart(TestExecutionId testExecutionId, int threadId);
    public sealed virtual void RegisterTestItemPreliminaryResult(TestExecutionId testExecutionId, int threadId, TestNodeResultType preliminaryTestResult);
    public sealed virtual void RegisterTestItemResult(TestExecutionId testExecutionId, TestNodeResult testNodeResult);
    public sealed virtual void RegisterThreadStart(int threadId, string machineName);
    public sealed virtual void RegisterThreadFinish(int threadId, Exception testThreadError);
    public sealed virtual void ThreadCancelled(int threadId);
    public sealed virtual bool GetIsCancelled();
    public sealed virtual TestSuite GetTestSuite();
}
public class TechTalk.SpecRun.Framework.Remoting.AssemblyReferenceConverter : JsonConverter {
    public bool CanWrite { get; }
    public bool CanRead { get; }
    public virtual bool get_CanWrite();
    public virtual bool get_CanRead();
    public virtual bool CanConvert(Type objectType);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
public interface TechTalk.SpecRun.Framework.Remoting.IAssemblyReference {
    public string Location { get; }
    public string FullName { get; }
    public abstract virtual string get_Location();
    public abstract virtual string get_FullName();
    public abstract virtual Assembly Resolve();
}
public interface TechTalk.SpecRun.Framework.Remoting.IMethodReference {
    public ITypeReference Type { get; }
    public string Name { get; }
    public IEnumerable`1<ITypeReference> Signature { get; }
    public abstract virtual ITypeReference get_Type();
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<ITypeReference> get_Signature();
    public abstract virtual MethodInfo Resolve();
}
public interface TechTalk.SpecRun.Framework.Remoting.ITypeReference {
    [JsonConverterAttribute("TechTalk.SpecRun.Framework.Remoting.AssemblyReferenceConverter")]
public IAssemblyReference Assembly { get; }
    public string FullName { get; }
    public abstract virtual IAssemblyReference get_Assembly();
    public abstract virtual string get_FullName();
    public abstract virtual Type Resolve();
}
public abstract class TechTalk.SpecRun.Framework.Remoting.RemotableObject : MarshalByRefObject {
    public virtual object InitializeLifetimeService();
}
public abstract class TechTalk.SpecRun.Framework.Remoting.RemotableObjectHost : RemotableObject {
}
public class TechTalk.SpecRun.Framework.Remoting.RemoteAssemblyReference : object {
    private Assembly resolvedAssembly;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    public string Location { get; public set; }
    public string FullName { get; public set; }
    public RemoteAssemblyReference(string fullName, string location);
    [RunsInTestAssemblyAppDomainAttribute]
public RemoteAssemblyReference(Assembly assembly);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    [RunsInTestAssemblyAppDomainAttribute]
public sealed virtual Assembly Resolve();
    public bool Equals(RemoteAssemblyReference other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class TechTalk.SpecRun.Framework.Remoting.RemoteMethodReference : object {
    private MethodInfo resolvedMethodInfo;
    [CompilerGeneratedAttribute]
private ITypeReference <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ITypeReference> <Signature>k__BackingField;
    public ITypeReference Type { get; private set; }
    public string Name { get; private set; }
    public IEnumerable`1<ITypeReference> Signature { get; private set; }
    [JsonConstructorAttribute]
public RemoteMethodReference(RemoteTypeReference type, string name, IEnumerable`1<RemoteTypeReference> signature);
    public RemoteMethodReference(ITypeReference type, string name, IEnumerable`1<ITypeReference> signature);
    public RemoteMethodReference(ITypeReference type, MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
public sealed virtual ITypeReference get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(ITypeReference value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ITypeReference> get_Signature();
    [CompilerGeneratedAttribute]
private void set_Signature(IEnumerable`1<ITypeReference> value);
    private static IEnumerable`1<ITypeReference> GetSignature(MethodInfo methodInfo);
    [RunsInTestAssemblyAppDomainAttribute]
public sealed virtual MethodInfo Resolve();
    public bool Equals(RemoteMethodReference other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class TechTalk.SpecRun.Framework.Remoting.RemoteTypeReference : object {
    private Type resolvedType;
    [CompilerGeneratedAttribute]
private IAssemblyReference <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [JsonConverterAttribute("TechTalk.SpecRun.Framework.Remoting.AssemblyReferenceConverter")]
public IAssemblyReference Assembly { get; private set; }
    public string FullName { get; private set; }
    public string Name { get; }
    [JsonConstructorAttribute]
public RemoteTypeReference(IAssemblyReference assembly, string fullName);
    [RunsInTestAssemblyAppDomainAttribute]
public RemoteTypeReference(IAssemblyReference assembly, Type type);
    [CompilerGeneratedAttribute]
public sealed virtual IAssemblyReference get_Assembly();
    [CompilerGeneratedAttribute]
private void set_Assembly(IAssemblyReference value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FullName();
    [CompilerGeneratedAttribute]
private void set_FullName(string value);
    public string get_Name();
    [RunsInTestAssemblyAppDomainAttribute]
public sealed virtual Type Resolve();
    public bool Equals(RemoteTypeReference other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("100")]
public class TechTalk.SpecRun.Framework.Remoting.RunsInTestAssemblyAppDomainAttribute : Attribute {
}
public class TechTalk.SpecRun.Framework.Remoting.SimpleAssemblyReference : object {
    private Assembly assembly;
    public string Location { get; }
    public string FullName { get; }
    public SimpleAssemblyReference(Assembly assembly);
    public sealed virtual string get_Location();
    public sealed virtual string get_FullName();
    public sealed virtual Assembly Resolve();
    public bool Equals(SimpleAssemblyReference other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class TechTalk.SpecRun.Framework.Remoting.SimpleTypeReference : object {
    private Type type;
    public IAssemblyReference Assembly { get; }
    public string FullName { get; }
    public SimpleTypeReference(Type type);
    public sealed virtual IAssemblyReference get_Assembly();
    public sealed virtual string get_FullName();
    public sealed virtual Type Resolve();
}
public class TechTalk.SpecRun.Framework.Remoting.TypeReferenceConverter : JsonConverter {
    public bool CanWrite { get; }
    public bool CanRead { get; }
    public virtual bool get_CanWrite();
    public virtual bool get_CanRead();
    public virtual bool CanConvert(Type objectType);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
public static class TechTalk.SpecRun.Framework.Remoting.TypeReferenceFactory : object {
    public static ITypeReference Create(Type type);
    private static bool IsSimpleType(Type type);
}
[KnownTypeAttribute("GetKnownTypes")]
public class TechTalk.SpecRun.Framework.Results.TestNodeResult : object {
    [CompilerGeneratedAttribute]
private TestNodeResultType <ResultType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TraceEvent> <TraceEvents>k__BackingField;
    public TestNodeResultType ResultType { get; public set; }
    public List`1<TraceEvent> TraceEvents { get; public set; }
    public string Error { get; }
    public string StackTrace { get; }
    public string BusinessMessages { get; }
    public string TechMessages { get; }
    public string Messages { get; }
    public TestNodeResult(TestNodeResultType resultType, List`1<TraceEvent> traceEvents);
    [CompilerGeneratedAttribute]
public TestNodeResultType get_ResultType();
    [CompilerGeneratedAttribute]
public void set_ResultType(TestNodeResultType value);
    [CompilerGeneratedAttribute]
public List`1<TraceEvent> get_TraceEvents();
    [CompilerGeneratedAttribute]
public void set_TraceEvents(List`1<TraceEvent> value);
    public string get_Error();
    public string get_StackTrace();
    public string get_BusinessMessages();
    public string get_TechMessages();
    public string get_Messages();
    public string GetError();
    public string GetStackTrace();
    public string FormatTechMessages(string techMessages);
    public static Type[] GetKnownTypes();
    public TraceEvent GetFirstErrorOrDefault();
    [CompilerGeneratedAttribute]
private string <get_Messages>b__18_1(TraceEvent te);
}
public enum TechTalk.SpecRun.Framework.Results.TestNodeResultType : Enum {
    public int value__;
    public static TestNodeResultType Unknown;
    public static TestNodeResultType Succeeded;
    public static TestNodeResultType Ignored;
    public static TestNodeResultType Pending;
    public static TestNodeResultType NothingToRun;
    public static TestNodeResultType Skipped;
    public static TestNodeResultType Inconclusive;
    public static TestNodeResultType CleanupFailed;
    public static TestNodeResultType RandomlyFailed;
    public static TestNodeResultType Failed;
    public static TestNodeResultType InitializationFailed;
    public static TestNodeResultType FrameworkError;
    public static TestNodeResultType ConfigurationError;
    public static TestNodeResultType InvalidLicense;
}
public class TechTalk.SpecRun.Framework.Services.JsonNetSerializer : object {
    private JsonSerializer _jsonSerializer;
    private ILogger _logger;
    public JsonNetSerializer(JsonSerializer jsonSerializer, ILogger logger);
    public sealed virtual FSharpOption`1<T> Deserialize(FSharpOption`1<TextReader> source);
    public sealed virtual bool Serialize(T value, FSharpOption`1<TextWriter> target);
}
public class TechTalk.SpecRun.Framework.SpecRunConfigurationException : Exception {
    public SpecRunConfigurationException(string message);
    public SpecRunConfigurationException(string messageFormat, Object[] arguments);
    public SpecRunConfigurationException(string message, Exception inner);
    protected SpecRunConfigurationException(SerializationInfo info, StreamingContext context);
}
public class TechTalk.SpecRun.Framework.TargetExecutionModelSettings : Dictionary`2<string, ExecutionModelSettings> {
    protected TargetExecutionModelSettings(SerializationInfo info, StreamingContext context);
}
public class TechTalk.SpecRun.Framework.TaskExecutors.ChainedTaskExecutor : object {
    [CompilerGeneratedAttribute]
private ITaskExecutor[] <InnerExecutors>k__BackingField;
    [JsonConverterAttribute("TechTalk.SpecRun.Framework.TaskExecutors.JsonConverters.TaskExecutorJsonConverter")]
public ITaskExecutor[] InnerExecutors { get; private set; }
    public ChainedTaskExecutor(ITaskExecutor[] innerExecutors);
    [CompilerGeneratedAttribute]
public ITaskExecutor[] get_InnerExecutors();
    [CompilerGeneratedAttribute]
private void set_InnerExecutors(ITaskExecutor[] value);
    public sealed virtual void Execute(ITestThreadExecutionContext testThreadExecutionContext);
    public bool Equals(ChainedTaskExecutor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class TechTalk.SpecRun.Framework.TaskExecutors.ExceptionHelper : object {
    [ExtensionAttribute]
public static Exception PreserveStackTrace(Exception ex, string methodInfo);
}
public class TechTalk.SpecRun.Framework.TaskExecutors.InstanceMethodExecutor : StaticOrInstanceMethodExecutor {
    [JsonConstructorAttribute]
public InstanceMethodExecutor(RemoteMethodReference method, Object[] arguments);
    public InstanceMethodExecutor(IMethodReference method);
    protected virtual object InvokeStatic(MethodInfo methodInfo);
    public bool Equals(InstanceMethodExecutor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface TechTalk.SpecRun.Framework.TaskExecutors.ITaskExecutor {
    public abstract virtual void Execute(ITestThreadExecutionContext testThreadExecutionContext);
}
public class TechTalk.SpecRun.Framework.TaskExecutors.JsonConverters.TaskExecutorJsonConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public class TechTalk.SpecRun.Framework.TaskExecutors.JsonConverters.TaskExecutorsJsonConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public JArray CreateTaskExecutorsJsonArray(IEnumerable`1<ITaskExecutor> taskExecutors);
    public JObject CreateTaskExecutorJsonObject(ITaskExecutor taskExecutor);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private object PackTaskExecutorsInCorrectType(Type objectType, IEnumerable`1<ITaskExecutor> taskExecutors);
    [IteratorStateMachineAttribute("TechTalk.SpecRun.Framework.TaskExecutors.JsonConverters.TaskExecutorsJsonConverter/<CreateTaskExecutorsFromJsonArray>d__5")]
public IEnumerable`1<ITaskExecutor> CreateTaskExecutorsFromJsonArray(JArray jsonArray);
    public ITaskExecutor CreateTaskExecutorFromJsonObject(JObject jsonObject);
    public virtual bool CanConvert(Type objectType);
}
public class TechTalk.SpecRun.Framework.TaskExecutors.StaticOrInstanceMethodExecutor : object {
    [CompilerGeneratedAttribute]
private IMethodReference <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public IMethodReference Method { get; private set; }
    public Object[] Arguments { get; private set; }
    [JsonConstructorAttribute]
public StaticOrInstanceMethodExecutor(RemoteMethodReference method, Object[] arguments);
    public StaticOrInstanceMethodExecutor(IMethodReference method, Object[] arguments);
    [CompilerGeneratedAttribute]
public IMethodReference get_Method();
    [CompilerGeneratedAttribute]
private void set_Method(IMethodReference value);
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
    [CompilerGeneratedAttribute]
private void set_Arguments(Object[] value);
    public sealed virtual void Execute(ITestThreadExecutionContext testThreadExecutionContext);
    public virtual object ExecuteInternal(ITestThreadExecutionContext testThreadExecutionContext);
    protected virtual object InvokeInstance(MethodInfo methodInfo, object instance);
    protected virtual object InvokeStatic(MethodInfo methodInfo);
}
[ExtensionAttribute]
public static class TechTalk.SpecRun.Framework.TaskExecutors.TaskExecutorExtensions : object {
    [ExtensionAttribute]
public static ITaskExecutor Append(ITaskExecutor testExecutor, ITaskExecutor newTestExecutor);
}
public class TechTalk.SpecRun.Framework.TaskExecutors.TestInstanceInitializer : object {
    [CompilerGeneratedAttribute]
private ITypeReference <TestType>k__BackingField;
    [JsonConverterAttribute("TechTalk.SpecRun.Framework.Remoting.TypeReferenceConverter")]
public ITypeReference TestType { get; private set; }
    public TestInstanceInitializer(ITypeReference testType);
    [CompilerGeneratedAttribute]
public ITypeReference get_TestType();
    [CompilerGeneratedAttribute]
private void set_TestType(ITypeReference value);
    [RunsInTestAssemblyAppDomainAttribute]
public sealed virtual void Execute(ITestThreadExecutionContext testThreadExecutionContext);
    public bool Equals(TestInstanceInitializer other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class TechTalk.SpecRun.Framework.TestExecutionConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <IsDryRun>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <CustomEnvironmentVariables>k__BackingField;
    public bool IsDryRun { get; public set; }
    public Dictionary`2<string, string> CustomEnvironmentVariables { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsDryRun();
    [CompilerGeneratedAttribute]
public void set_IsDryRun(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CustomEnvironmentVariables();
    [CompilerGeneratedAttribute]
public void set_CustomEnvironmentVariables(Dictionary`2<string, string> value);
}
public class TechTalk.SpecRun.Framework.TestExecutionId : object {
    public int TestId;
    public int ExecutionIndex;
    public TestExecutionId(int testId, int executionIndex);
    public virtual string ToString();
}
public enum TechTalk.SpecRun.Framework.TestExecutionModel : Enum {
    public int value__;
    public static TestExecutionModel Unknown;
    public static TestExecutionModel AppDomain;
    public static TestExecutionModel OutProc;
    public static TestExecutionModel Remote;
    public static TestExecutionModel SharedAppDomain;
}
public class TechTalk.SpecRun.Framework.TestInitializationFailedException : Exception {
    protected TestInitializationFailedException(SerializationInfo info, StreamingContext context);
}
public class TechTalk.SpecRun.Framework.TestPathProvider : object {
    public string CalculatePath(TestItem testItem, bool excludeDefaultTarget);
    public string GetPathElement(TestNode testNode);
}
public static class TechTalk.SpecRun.Framework.TestSuiteKnownTypeProvider : object {
    private static List`1<Type> knownTypes;
    private static void EnsureInitialized();
    public static IEnumerable`1<Type> GetKnownTypes(ICustomAttributeProvider provider);
    public static void RegisterKnownType(Type type);
}
public class TechTalk.SpecRun.Framework.TestSuiteStructure.NodeSource : object {
    public string SourceFile;
    public int SourceLine;
    public NodeSource(string sourceFile, int sourceLine);
}
[JsonConverterAttribute("TechTalk.SpecRun.Framework.TestSuiteStructure.TestNodeJsonConverter")]
public class TechTalk.SpecRun.Framework.TestSuiteStructure.TestAssemblyCollection : TestCollection {
    [CompilerGeneratedAttribute]
private List`1<ITaskExecutor> <AssemblyInitializeExecutors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ITaskExecutor> <AssemblyCleanupExecutors>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyReference <AssemblyReference>k__BackingField;
    [JsonConverterAttribute("TechTalk.SpecRun.Framework.TaskExecutors.JsonConverters.TaskExecutorsJsonConverter")]
public List`1<ITaskExecutor> AssemblyInitializeExecutors { get; public set; }
    [JsonConverterAttribute("TechTalk.SpecRun.Framework.TaskExecutors.JsonConverters.TaskExecutorsJsonConverter")]
public List`1<ITaskExecutor> AssemblyCleanupExecutors { get; public set; }
    [JsonConverterAttribute("TechTalk.SpecRun.Framework.Remoting.AssemblyReferenceConverter")]
public IAssemblyReference AssemblyReference { get; public set; }
    public TestAssemblyCollection(int id, TestCollection parent);
    public void Attach(TestCollection testCollection);
    [CompilerGeneratedAttribute]
public List`1<ITaskExecutor> get_AssemblyInitializeExecutors();
    [CompilerGeneratedAttribute]
public void set_AssemblyInitializeExecutors(List`1<ITaskExecutor> value);
    [CompilerGeneratedAttribute]
public List`1<ITaskExecutor> get_AssemblyCleanupExecutors();
    [CompilerGeneratedAttribute]
public void set_AssemblyCleanupExecutors(List`1<ITaskExecutor> value);
    [CompilerGeneratedAttribute]
public IAssemblyReference get_AssemblyReference();
    [CompilerGeneratedAttribute]
public void set_AssemblyReference(IAssemblyReference value);
}
[JsonConverterAttribute("TechTalk.SpecRun.Framework.TestSuiteStructure.TestNodeJsonConverter")]
public class TechTalk.SpecRun.Framework.TestSuiteStructure.TestCollection : TestNode {
    [CompilerGeneratedAttribute]
private List`1<TestNode> <SubNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIgnored>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IgnoreReason>k__BackingField;
    public List`1<TestNode> SubNodes { get; public set; }
    public bool IsIgnored { get; public set; }
    public bool IsEmpty { get; }
    public string IgnoreReason { get; public set; }
    public TestCollection(int id, TestNode parent, TestNodeType type);
    [CompilerGeneratedAttribute]
public List`1<TestNode> get_SubNodes();
    [CompilerGeneratedAttribute]
public void set_SubNodes(List`1<TestNode> value);
    [CompilerGeneratedAttribute]
public bool get_IsIgnored();
    [CompilerGeneratedAttribute]
public void set_IsIgnored(bool value);
    public bool get_IsEmpty();
    [CompilerGeneratedAttribute]
public string get_IgnoreReason();
    [CompilerGeneratedAttribute]
public void set_IgnoreReason(string value);
    public sealed virtual void OnDeserialization(object sender);
}
[JsonConverterAttribute("TechTalk.SpecRun.Framework.TestSuiteStructure.TestNodeJsonConverter")]
public class TechTalk.SpecRun.Framework.TestSuiteStructure.TestItem : TestNode {
    [CompilerGeneratedAttribute]
private IAssemblyReference <TestAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskExecutor <Executor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIgnored>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IgnoreReason>k__BackingField;
    [JsonConverterAttribute("TechTalk.SpecRun.Framework.Remoting.AssemblyReferenceConverter")]
public IAssemblyReference TestAssembly { get; public set; }
    [JsonConverterAttribute("TechTalk.SpecRun.Framework.TaskExecutors.JsonConverters.TaskExecutorJsonConverter")]
public ITaskExecutor Executor { get; public set; }
    public bool IsIgnored { get; public set; }
    public string IgnoreReason { get; public set; }
    public TestItem(int id, TestNode parent, TestNodeType type);
    [CompilerGeneratedAttribute]
public IAssemblyReference get_TestAssembly();
    [CompilerGeneratedAttribute]
public void set_TestAssembly(IAssemblyReference value);
    [CompilerGeneratedAttribute]
public ITaskExecutor get_Executor();
    [CompilerGeneratedAttribute]
public void set_Executor(ITaskExecutor value);
    [CompilerGeneratedAttribute]
public bool get_IsIgnored();
    [CompilerGeneratedAttribute]
public void set_IsIgnored(bool value);
    [CompilerGeneratedAttribute]
public string get_IgnoreReason();
    [CompilerGeneratedAttribute]
public void set_IgnoreReason(string value);
}
[JsonConverterAttribute("TechTalk.SpecRun.Framework.TestSuiteStructure.TestNodeJsonConverter")]
public abstract class TechTalk.SpecRun.Framework.TestSuiteStructure.TestNode : object {
    public static string DEFAULT_TARGET;
    private TestNode _parent;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private TestNodeType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskExecutor <Initializer>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskExecutor <Cleanup>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <ExecutionCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeSource <Source>k__BackingField;
    public int Id { get; public set; }
    public TestNodeType Type { get; public set; }
    [JsonConverterAttribute("TechTalk.SpecRun.Framework.TestSuiteStructure.TestNodeJsonConverter")]
public TestNode Parent { get; public set; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    [JsonConverterAttribute("TechTalk.SpecRun.Framework.TaskExecutors.JsonConverters.TaskExecutorJsonConverter")]
public ITaskExecutor Initializer { get; public set; }
    [JsonConverterAttribute("TechTalk.SpecRun.Framework.TaskExecutors.JsonConverters.TaskExecutorJsonConverter")]
public ITaskExecutor Cleanup { get; public set; }
    public CultureInfo ExecutionCulture { get; public set; }
    public List`1<string> Tags { get; public set; }
    public NodeSource Source { get; public set; }
    public string TestTarget { get; }
    public bool IsDefaultTestTarget { get; }
    protected TestNode(int id, TestNode parent, TestNodeType type);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public TestNodeType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TestNodeType value);
    public TestNode get_Parent();
    public void set_Parent(TestNode value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public ITaskExecutor get_Initializer();
    [CompilerGeneratedAttribute]
public void set_Initializer(ITaskExecutor value);
    [CompilerGeneratedAttribute]
public ITaskExecutor get_Cleanup();
    [CompilerGeneratedAttribute]
public void set_Cleanup(ITaskExecutor value);
    [CompilerGeneratedAttribute]
public CultureInfo get_ExecutionCulture();
    [CompilerGeneratedAttribute]
public void set_ExecutionCulture(CultureInfo value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(List`1<string> value);
    [CompilerGeneratedAttribute]
public NodeSource get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(NodeSource value);
    public string get_TestTarget();
    public bool get_IsDefaultTestTarget();
}
[ExtensionAttribute]
public static class TechTalk.SpecRun.Framework.TestSuiteStructure.TestNodeExtensions : object {
    [ExtensionAttribute]
public static TestItem GetTestItem(TestNode testNode, int testId);
    [ExtensionAttribute]
public static TestNode GetTestNode(TestNode testNode, int testNodeId);
    [ExtensionAttribute]
public static IEnumerable`1<TestNode> GetMostRootChildNodesOf(TestNode testNode, TestNodeType nodeType);
    [ExtensionAttribute]
public static IEnumerable`1<TestItem> GetTestSequence(TestNode testNode);
    [ExtensionAttribute]
public static IEnumerable`1<TestNode> GetNodeSequence(TestNode testNode);
    [IteratorStateMachineAttribute("TechTalk.SpecRun.Framework.TestSuiteStructure.TestNodeExtensions/<GetNodes>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<TestNode> GetNodes(TestNode testNode, Predicate`1<TestNode> predicate, bool visitSubNodesOfFound);
    [ExtensionAttribute]
public static TestNode CalculateCommonRoot(TestNode testNode1, TestNode testNode2);
    [ExtensionAttribute]
public static List`1<TestNode> GetParentChain(TestNode testNode, bool includeCurrent);
}
public class TechTalk.SpecRun.Framework.TestSuiteStructure.TestNodeJsonConverter : JsonConverter {
    public bool CanWrite { get; }
    public bool CanRead { get; }
    public virtual bool get_CanWrite();
    public virtual bool get_CanRead();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public enum TechTalk.SpecRun.Framework.TestSuiteStructure.TestNodeType : Enum {
    public int value__;
    public static TestNodeType Unknown;
    public static TestNodeType TestSuite;
    public static TestNodeType Target;
    public static TestNodeType TestAssembly;
    public static TestNodeType Feature;
    public static TestNodeType Scenario;
    public static TestNodeType ScenarioOutline;
    public static TestNodeType ScenarioOutlineExampleSet;
    public static TestNodeType ScenarioOutlineExample;
    public static TestNodeType TestClass;
    public static TestNodeType TestMethod;
    public static TestNodeType ParameterizedTest;
}
[JsonConverterAttribute("TechTalk.SpecRun.Framework.TestSuiteStructure.TestNodeJsonConverter")]
public class TechTalk.SpecRun.Framework.TestSuiteStructure.TestSuite : TestCollection {
    public TestSuite(int id, string title);
}
public class TechTalk.SpecRun.Framework.TestThreadState : object {
    [CompilerGeneratedAttribute]
private TestExecutionId <NextTestId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CurrentlyInitializedNodeId>k__BackingField;
    public TestExecutionId NextTestId { get; }
    public Nullable`1<int> CurrentlyInitializedNodeId { get; }
    public TestThreadState(TestExecutionId nextTestId, Nullable`1<int> currentlyInitializedNodeId);
    [CompilerGeneratedAttribute]
public TestExecutionId get_NextTestId();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CurrentlyInitializedNodeId();
}
public class TechTalk.SpecRun.Framework.Tracing.TraceEvent : object {
    [CompilerGeneratedAttribute]
private int <TestNodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceEventType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private TestNodeResultType <ResultType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BusinessMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TechMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceEventStepBindingInformation <StepBindingInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    public int TestNodeId { get; public set; }
    public TraceEventType Type { get; public set; }
    public TestNodeResultType ResultType { get; public set; }
    public DateTime StartTime { get; public set; }
    public DateTime EndTime { get; public set; }
    [JsonIgnoreAttribute]
public TimeSpan Duration { get; }
    public string BusinessMessages { get; public set; }
    public string TechMessages { get; public set; }
    public TraceEventStepBindingInformation StepBindingInformation { get; public set; }
    public string Error { get; public set; }
    public string StackTrace { get; public set; }
    [JsonIgnoreAttribute]
public bool HasMessages { get; }
    [CompilerGeneratedAttribute]
public int get_TestNodeId();
    [CompilerGeneratedAttribute]
public void set_TestNodeId(int value);
    [CompilerGeneratedAttribute]
public TraceEventType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TraceEventType value);
    [CompilerGeneratedAttribute]
public TestNodeResultType get_ResultType();
    [CompilerGeneratedAttribute]
public void set_ResultType(TestNodeResultType value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(DateTime value);
    public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public string get_BusinessMessages();
    [CompilerGeneratedAttribute]
public void set_BusinessMessages(string value);
    [CompilerGeneratedAttribute]
public string get_TechMessages();
    [CompilerGeneratedAttribute]
public void set_TechMessages(string value);
    [CompilerGeneratedAttribute]
public TraceEventStepBindingInformation get_StepBindingInformation();
    [CompilerGeneratedAttribute]
public void set_StepBindingInformation(TraceEventStepBindingInformation value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
public void set_StackTrace(string value);
    public bool get_HasMessages();
}
public enum TechTalk.SpecRun.Framework.Tracing.TraceEventType : Enum {
    public int value__;
    public static TraceEventType TestArrange;
    public static TraceEventType TestAct;
    public static TraceEventType TestAssert;
    public static TraceEventType Initialization;
    public static TraceEventType Cleanup;
    public static TraceEventType Test;
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
