[AttributeUsageAttribute("64")]
public class TechTalk.SpecRun.AssemblyCleanupAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class TechTalk.SpecRun.AssemblyInitializeAttribute : Attribute {
}
public class TechTalk.SpecRun.EventsClass : object {
    [CompilerGeneratedAttribute]
private Action`1<string> BusinessMessageProvided;
    [CompilerGeneratedAttribute]
private Action`1<string> TechMessageProvided;
    [CompilerGeneratedAttribute]
private Action`1<StepType> StartStep;
    [CompilerGeneratedAttribute]
private Action`1<TraceEventStepBindingInformation> StepBindingInformationProvided;
    [CompilerGeneratedAttribute]
public void add_BusinessMessageProvided(Action`1<string> value);
    [CompilerGeneratedAttribute]
public void remove_BusinessMessageProvided(Action`1<string> value);
    [CompilerGeneratedAttribute]
public void add_TechMessageProvided(Action`1<string> value);
    [CompilerGeneratedAttribute]
public void remove_TechMessageProvided(Action`1<string> value);
    [CompilerGeneratedAttribute]
public void add_StartStep(Action`1<StepType> value);
    [CompilerGeneratedAttribute]
public void remove_StartStep(Action`1<StepType> value);
    [CompilerGeneratedAttribute]
public void add_StepBindingInformationProvided(Action`1<TraceEventStepBindingInformation> value);
    [CompilerGeneratedAttribute]
public void remove_StepBindingInformationProvided(Action`1<TraceEventStepBindingInformation> value);
    internal void RaiseBusinessMessageProvided(string message);
    internal void RaiseTechMessageProvided(string message);
    internal void RaiseStartStep(StepType stepType);
    internal void RaiseStepBindingInformationProvided(TraceEventStepBindingInformation obj);
}
[AttributeUsageAttribute("4")]
public class TechTalk.SpecRun.FeatureAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceLine>k__BackingField;
    public string Title { get; private set; }
    public String[] Tags { get; private set; }
    public string Description { get; public set; }
    public string SourceFile { get; public set; }
    public int SourceLine { get; public set; }
    public FeatureAttribute(string title, String[] tags);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
private void set_Tags(String[] value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_SourceFile();
    [CompilerGeneratedAttribute]
public void set_SourceFile(string value);
    [CompilerGeneratedAttribute]
public int get_SourceLine();
    [CompilerGeneratedAttribute]
public void set_SourceLine(int value);
}
[AttributeUsageAttribute("64")]
public class TechTalk.SpecRun.FeatureCleanupAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class TechTalk.SpecRun.FeatureInitializeAttribute : Attribute {
}
public interface TechTalk.SpecRun.Framework.IDeploymentContext {
    public int TestThreadId { get; }
    public string BaseFolder { get; public set; }
    public string BaseFolderRelativeTestAssemblyPath { get; }
    public Dictionary`2<object, object> CustomData { get; }
    public abstract virtual int get_TestThreadId();
    public abstract virtual string get_BaseFolder();
    public abstract virtual void set_BaseFolder(string value);
    public abstract virtual string get_BaseFolderRelativeTestAssemblyPath();
    public abstract virtual Dictionary`2<object, object> get_CustomData();
    public abstract virtual string ResolveParameters(string text);
    public abstract virtual string GetFullPath(string path);
}
public interface TechTalk.SpecRun.Framework.IDeploymentTransformationStep {
    public abstract virtual void Apply(IDeploymentContext deploymentContext);
    public abstract virtual void Restore(IDeploymentContext deploymentContext);
}
public enum TechTalk.SpecRun.Framework.StepType : Enum {
    public int value__;
    public static StepType Arrange;
    public static StepType Act;
    public static StepType Assert;
}
[AttributeUsageAttribute("68")]
public class TechTalk.SpecRun.IgnoreAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    public string Reason { get; private set; }
    public IgnoreAttribute(string reason);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(string value);
}
public class TechTalk.SpecRun.IgnoredTestException : Exception {
    public IgnoredTestException(string message);
    protected IgnoredTestException(SerializationInfo info, StreamingContext context);
}
public class TechTalk.SpecRun.InconclusiveTestException : Exception {
    public InconclusiveTestException(string message);
    protected InconclusiveTestException(SerializationInfo info, StreamingContext context);
}
public interface TechTalk.SpecRun.ISpecRunner {
    public EventsClass Events { get; }
    public bool IsInitialized { get; }
    public abstract virtual EventsClass get_Events();
    public abstract virtual bool get_IsInitialized();
    public abstract virtual void WriteBusinessMessage(string message);
    public abstract virtual void WriteTechMessage(string message);
    public abstract virtual IDisposable StartArrangeStep();
    public abstract virtual IDisposable StartActStep();
    public abstract virtual IDisposable StartAssertStep();
    public abstract virtual void Initialize(Action`1<string> businessMessageProvided, Action`1<string> techMessageProvided, Action`1<StepType> startStep, Action`1<TraceEventStepBindingInformation> stepBindingInformationProvided);
    public abstract virtual void LogStepBinding(TraceEventStepBindingInformation traceEventStepBindingInformation);
}
public interface TechTalk.SpecRun.ITestAssemblyFullPathProvider {
    public abstract virtual string GetTestAssemblyFullPath();
}
public class TechTalk.SpecRun.PendingTestException : Exception {
    public PendingTestException(string message);
    protected PendingTestException(SerializationInfo info, StreamingContext context);
}
[AttributeUsageAttribute("64")]
public class TechTalk.SpecRun.ScenarioAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceLine>k__BackingField;
    public string Title { get; private set; }
    public String[] Tags { get; private set; }
    public string Description { get; public set; }
    public int SourceLine { get; public set; }
    public ScenarioAttribute(string title, String[] tags);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
private void set_Tags(String[] value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public int get_SourceLine();
    [CompilerGeneratedAttribute]
public void set_SourceLine(int value);
}
[AttributeUsageAttribute("64")]
public class TechTalk.SpecRun.ScenarioCleanupAttribute : Attribute {
}
public class TechTalk.SpecRun.SpecFlowRunnerConnector : object {
    [ThreadStaticAttribute]
private static ISpecRunner _specRunner;
    private static bool _isDryRun;
    private static string _testSourcePath;
    public ISpecRunner SpecRunner { get; public set; }
    public bool IsDryRun { get; public set; }
    public string TestSourcePath { get; public set; }
    public ISpecRunner get_SpecRunner();
    public void set_SpecRunner(ISpecRunner value);
    public bool get_IsDryRun();
    public void set_IsDryRun(bool value);
    public string get_TestSourcePath();
    public void set_TestSourcePath(string value);
}
public class TechTalk.SpecRun.SpecRunner : object {
    [CompilerGeneratedAttribute]
private EventsClass <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    private Action`1<string> _businessMessageProvided;
    private Action`1<string> _techMessageProvided;
    private Action`1<StepType> _startStep;
    private Action`1<TraceEventStepBindingInformation> _stepBindingInformationProvided;
    public EventsClass Events { get; private set; }
    public bool IsInitialized { get; private set; }
    public SpecRunner(Action`1<string> businessMessageProvided, Action`1<string> techMessageProvided, Action`1<StepType> startStep, Action`1<TraceEventStepBindingInformation> stepBindingInformationProvided);
    [CompilerGeneratedAttribute]
public sealed virtual EventsClass get_Events();
    [CompilerGeneratedAttribute]
private void set_Events(EventsClass value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    public sealed virtual void Initialize(Action`1<string> businessMessageProvided, Action`1<string> techMessageProvided, Action`1<StepType> startStep, Action`1<TraceEventStepBindingInformation> stepBindingInformationProvided);
    public sealed virtual void LogStepBinding(TraceEventStepBindingInformation traceEventStepBindingInformation);
    public sealed virtual void Dispose();
    private void DeInitialize();
    public sealed virtual void WriteBusinessMessage(string message);
    public sealed virtual void WriteTechMessage(string message);
    public sealed virtual IDisposable StartArrangeStep();
    public sealed virtual IDisposable StartActStep();
    public sealed virtual IDisposable StartAssertStep();
    public static void TestIgnored(string reason);
    public static void TestInconclusive(string reason);
    public static void TestPending(string reason);
    public static void CancelTestRun();
}
public class TechTalk.SpecRun.TestAssemblyFullPathProvider : object {
    private string _testSource;
    public TestAssemblyFullPathProvider(string testSource);
    public sealed virtual string GetTestAssemblyFullPath();
}
public class TechTalk.SpecRun.TestRunCancelledException : Exception {
    protected TestRunCancelledException(SerializationInfo info, StreamingContext context);
}
[AttributeUsageAttribute("64")]
public class TechTalk.SpecRun.TestRunCleanupAttribute : Attribute {
}
public class TechTalk.SpecRun.TestRunContext : object {
    private ITestAssemblyFullPathProvider _testAssemblyFullPathProvider;
    private string _testDirectory;
    public string TestDirectory { get; }
    public TestRunContext(ITestAssemblyFullPathProvider testAssemblyFullPathProvider);
    public string get_TestDirectory();
    private string GetTestDirectory();
}
public class TechTalk.SpecRun.VersionInfo : object {
    public static string AssemblyVersion { get; }
    public static string AssemblyFileVersion { get; }
    public static string AssemblyInformationalVersion { get; }
    public static string NuGetVersion { get; }
    public static string get_AssemblyVersion();
    public static string get_AssemblyFileVersion();
    public static string get_AssemblyInformationalVersion();
    public static string get_NuGetVersion();
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
