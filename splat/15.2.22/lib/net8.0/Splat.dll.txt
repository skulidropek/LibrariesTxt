[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Splat.ActionDisposable : object {
    private Action _block;
    public static IDisposable Empty { get; }
    public ActionDisposable(Action block);
    public static IDisposable get_Empty();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Splat.ActionLogger : object {
    private Action`2<string, LogLevel> _writeNoType;
    private Action`3<Exception, string, LogLevel> _writeNoTypeWithException;
    private Action`3<string, Type, LogLevel> _writeWithType;
    private Action`4<Exception, string, Type, LogLevel> _writeWithTypeAndException;
    [CompilerGeneratedAttribute]
private LogLevel <Level>k__BackingField;
    public LogLevel Level { get; public set; }
    public ActionLogger(Action`2<string, LogLevel> writeNoType, Action`3<string, Type, LogLevel> writeWithType, Action`3<Exception, string, LogLevel> writeNoTypeWithException, Action`4<Exception, string, Type, LogLevel> writeWithTypeAndException);
    [CompilerGeneratedAttribute]
public sealed virtual LogLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(LogLevel value);
    public sealed virtual void Write(string message, LogLevel logLevel);
    public sealed virtual void Write(Exception exception, string message, LogLevel logLevel);
    public sealed virtual void Write(string message, Type type, LogLevel logLevel);
    public sealed virtual void Write(Exception exception, string message, Type type, LogLevel logLevel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Splat.AllocationFreeLoggerBase : object {
    [CompilerGeneratedAttribute]
private ILogger <inner>P;
    public LogLevel Level { get; }
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public bool IsErrorEnabled { get; }
    public bool IsFatalEnabled { get; }
    protected AllocationFreeLoggerBase(ILogger inner);
    public sealed virtual LogLevel get_Level();
    public sealed virtual bool get_IsDebugEnabled();
    public sealed virtual bool get_IsInfoEnabled();
    public sealed virtual bool get_IsWarnEnabled();
    public sealed virtual bool get_IsErrorEnabled();
    public sealed virtual bool get_IsFatalEnabled();
    public virtual void Debug(string messageFormat, TArgument argument);
    public virtual void Debug(Exception exception, string messageFormat, TArgument argument);
    public virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public sealed virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public sealed virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public sealed virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public sealed virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public sealed virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public sealed virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public sealed virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public sealed virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public sealed virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public virtual void Info(string messageFormat, TArgument argument);
    public sealed virtual void Info(Exception exception, string messageFormat, TArgument argument);
    public virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public sealed virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public sealed virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public sealed virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public sealed virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public sealed virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public sealed virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public sealed virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public sealed virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public sealed virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public virtual void Warn(string messageFormat, TArgument argument);
    public sealed virtual void Warn(Exception exception, string messageFormat, TArgument argument);
    public virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public sealed virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public sealed virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public sealed virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public sealed virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public sealed virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public sealed virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public sealed virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public sealed virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public sealed virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public virtual void Error(string messageFormat, TArgument argument);
    public sealed virtual void Error(Exception exception, string messageFormat, TArgument argument);
    public virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public sealed virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public sealed virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public sealed virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public sealed virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public sealed virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public sealed virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public sealed virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public sealed virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public sealed virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public virtual void Fatal(string messageFormat, TArgument argument);
    public sealed virtual void Fatal(Exception exception, string messageFormat, TArgument argument);
    public virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public sealed virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public sealed virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public sealed virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public sealed virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public sealed virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public sealed virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public sealed virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public sealed virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public sealed virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public sealed virtual void Write(string message, LogLevel logLevel);
    public sealed virtual void Write(Exception exception, string message, LogLevel logLevel);
    public sealed virtual void Write(string message, Type type, LogLevel logLevel);
    public sealed virtual void Write(Exception exception, string message, Type type, LogLevel logLevel);
}
public class Splat.ApplicationPerformanceMonitoring.DefaultFeatureUsageTrackingManager : FuncFeatureUsageTrackingManager {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Splat.ApplicationPerformanceMonitoring.DefaultFeatureUsageTrackingSession : object {
    [CompilerGeneratedAttribute]
private Guid <ParentReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <FeatureReference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    public Guid ParentReference { get; }
    public Guid FeatureReference { get; }
    public string FeatureName { get; }
    public DefaultFeatureUsageTrackingSession(string featureName);
    internal DefaultFeatureUsageTrackingSession(string featureName, Guid parentReference);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ParentReference();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_FeatureReference();
    [CompilerGeneratedAttribute]
public sealed virtual string get_FeatureName();
    public sealed virtual IFeatureUsageTrackingSession SubFeature(string description);
    public sealed virtual void OnException(Exception exception);
    public sealed virtual void Dispose();
    private string GetSessionStartLogMessage();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <Dispose>b__13_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Splat.ApplicationPerformanceMonitoring.EnableFeatureUsageTrackingExtensions : object {
    [ExtensionAttribute]
public static IFeatureUsageTrackingSession FeatureUsageTrackingSession(IEnableFeatureUsageTracking instance, string featureName);
    [ExtensionAttribute]
public static void WithFeatureUsageTrackingSession(IEnableFeatureUsageTracking instance, string featureName, Action`1<IFeatureUsageTrackingSession> action);
    [ExtensionAttribute]
public static void WithSubFeatureUsageTrackingSession(IFeatureUsageTrackingSession instance, string featureName, Action`1<IFeatureUsageTrackingSession> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Splat.ApplicationPerformanceMonitoring.FuncFeatureUsageTrackingManager : object {
    private Func`2<string, IFeatureUsageTrackingSession> _featureUsageTrackingSessionFunc;
    public FuncFeatureUsageTrackingManager(Func`2<string, IFeatureUsageTrackingSession> featureUsageTrackingSessionFunc);
    public sealed virtual IFeatureUsageTrackingSession GetFeatureUsageTrackingSession(string featureName);
}
[ComVisibleAttribute("False")]
public interface Splat.ApplicationPerformanceMonitoring.IEnableFeatureUsageTracking {
}
[NullableContextAttribute("1")]
public interface Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager {
    public abstract virtual IFeatureUsageTrackingSession GetFeatureUsageTrackingSession(string featureName);
}
[NullableContextAttribute("1")]
public interface Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession {
    public string FeatureName { get; }
    public abstract virtual string get_FeatureName();
    public abstract virtual IFeatureUsageTrackingSession SubFeature(string description);
    public abstract virtual void OnException(Exception exception);
}
[NullableContextAttribute("1")]
public interface Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession`1 {
    public TReferenceType FeatureReference { get; }
    public TReferenceType ParentReference { get; }
    public abstract virtual TReferenceType get_FeatureReference();
    public abstract virtual TReferenceType get_ParentReference();
}
[NullableContextAttribute("1")]
public interface Splat.ApplicationPerformanceMonitoring.IViewTracking {
    public abstract virtual void OnViewNavigation(string name);
}
internal static class Splat.AssemblyFinder : object {
    [NullableContextAttribute("2")]
public static T AttemptToLoadType(string fullTypeName);
}
internal class Splat.BooleanDisposable : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isDisposed;
    public bool IsDisposed { get; }
    public bool get_IsDisposed();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Splat.CompositeDisposable : object {
    private static int DefaultCapacity;
    private bool _disposed;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IDisposable> _disposables;
    private int _count;
    public CompositeDisposable(int capacity);
    public CompositeDisposable(IDisposable[] disposables);
    public CompositeDisposable(IEnumerable`1<IDisposable> disposables);
    public sealed virtual void Dispose();
    private void Init(IEnumerable`1<IDisposable> disposables);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Splat.ConsoleLogger : object {
    [CompilerGeneratedAttribute]
private string <ExceptionMessageFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <Level>k__BackingField;
    public string ExceptionMessageFormat { get; public set; }
    public LogLevel Level { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ExceptionMessageFormat();
    [CompilerGeneratedAttribute]
public void set_ExceptionMessageFormat(string value);
    [CompilerGeneratedAttribute]
public sealed virtual LogLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(LogLevel value);
    public sealed virtual void Write(string message, LogLevel logLevel);
    public sealed virtual void Write(Exception exception, string message, LogLevel logLevel);
    public sealed virtual void Write(string message, Type type, LogLevel logLevel);
    public sealed virtual void Write(Exception exception, string message, Type type, LogLevel logLevel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Splat.DebugLogger : object {
    [CompilerGeneratedAttribute]
private LogLevel <Level>k__BackingField;
    public LogLevel Level { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual LogLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(LogLevel value);
    public sealed virtual void Write(string message, LogLevel logLevel);
    public sealed virtual void Write(Exception exception, string message, LogLevel logLevel);
    public sealed virtual void Write(string message, Type type, LogLevel logLevel);
    public sealed virtual void Write(Exception exception, string message, Type type, LogLevel logLevel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Splat.DefaultLogManager : object {
    private static IFullLogger _nullLogger;
    private MemoizingMRUCache`2<Type, IFullLogger> _loggerCache;
    [NullableContextAttribute("2")]
public DefaultLogManager(IReadonlyDependencyResolver dependencyResolver);
    private static DefaultLogManager();
    public sealed virtual IFullLogger GetLogger(Type type);
}
public class Splat.DefaultModeDetector : object {
    public sealed virtual Nullable`1<bool> InUnitTestRunner();
    [NullableContextAttribute("1")]
private static bool SearchForAssembly(IEnumerable`1<string> assemblyList);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Splat.DependencyResolverMixins : object {
    [ExtensionAttribute]
public static T GetService(IReadonlyDependencyResolver resolver, string contract);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<T> GetServices(IReadonlyDependencyResolver resolver, string contract);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable ServiceRegistrationCallback(IMutableDependencyResolver resolver, Type serviceType, Action`1<IDisposable> callback);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable WithResolver(IDependencyResolver resolver, bool suppressResolverCallback);
    [ExtensionAttribute]
public static void Register(IMutableDependencyResolver resolver, Func`1<T> factory, string contract);
    [ExtensionAttribute]
public static void Register(IMutableDependencyResolver resolver, string contract);
    [ExtensionAttribute]
public static void RegisterConstant(IMutableDependencyResolver resolver, object value, Type serviceType, string contract);
    [ExtensionAttribute]
public static void RegisterConstant(IMutableDependencyResolver resolver, T value, string contract);
    [ExtensionAttribute]
public static void RegisterLazySingleton(IMutableDependencyResolver resolver, Func`1<object> valueFactory, Type serviceType, string contract);
    [ExtensionAttribute]
public static void RegisterLazySingleton(IMutableDependencyResolver resolver, Func`1<T> valueFactory, string contract);
    [ExtensionAttribute]
public static void UnregisterCurrent(IMutableDependencyResolver resolver, string contract);
    [ExtensionAttribute]
public static void UnregisterAll(IMutableDependencyResolver resolver, string contract);
}
[ExtensionAttribute]
internal static class Splat.ExceptionMixins : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ThrowArgumentNullExceptionIfNull(T value, string name);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ThrowArgumentNullExceptionIfNull(T value, string name, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Splat.FullLoggerExtensions : object {
    [ExtensionAttribute]
public static void Debug(IFullLogger logger, Func`1<string> function);
    [ExtensionAttribute]
public static void Debug(IFullLogger logger, Func`1<string> function);
    [ExtensionAttribute]
public static void DebugException(IFullLogger logger, Func`1<string> function, Exception exception);
    [ExtensionAttribute]
public static void Info(IFullLogger logger, Func`1<string> function);
    [ExtensionAttribute]
public static void Info(IFullLogger logger, Func`1<string> function);
    [ExtensionAttribute]
public static void InfoException(IFullLogger logger, Func`1<string> function, Exception exception);
    [ExtensionAttribute]
public static void Warn(IFullLogger logger, Func`1<string> function);
    [ExtensionAttribute]
public static void Warn(IFullLogger logger, Func`1<string> function);
    [ExtensionAttribute]
public static void WarnException(IFullLogger logger, Func`1<string> function, Exception exception);
    [ExtensionAttribute]
public static void Error(IFullLogger logger, Func`1<string> function);
    [ExtensionAttribute]
public static void Error(IFullLogger logger, Func`1<string> function);
    [ExtensionAttribute]
public static void ErrorException(IFullLogger logger, Func`1<string> function, Exception exception);
    [ExtensionAttribute]
public static void Fatal(IFullLogger logger, Func`1<string> function);
    [ExtensionAttribute]
public static void Fatal(IFullLogger logger, Func`1<string> function);
    [ExtensionAttribute]
public static void FatalException(IFullLogger logger, Func`1<string> function, Exception exception);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Splat.FuncDependencyResolver : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<Type, string, IEnumerable`1<object>> _innerGetServices;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`3<Func`1<object>, Type, string> _innerRegister;
    private Action`2<Type, string> _unregisterCurrent;
    private Action`2<Type, string> _unregisterAll;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<Type, string>, List`1<Action`1<IDisposable>>> _callbackRegistry;
    [NullableAttribute("1")]
private IDisposable _inner;
    private bool _isDisposed;
    public FuncDependencyResolver(Func`3<Type, string, IEnumerable`1<object>> getAllServices, Action`3<Func`1<object>, Type, string> register, Action`2<Type, string> unregisterCurrent, Action`2<Type, string> unregisterAll, IDisposable toDispose);
    public sealed virtual object GetService(Type serviceType, string contract);
    public sealed virtual IEnumerable`1<object> GetServices(Type serviceType, string contract);
    public sealed virtual bool HasRegistration(Type serviceType, string contract);
    public sealed virtual void Register(Func`1<object> factory, Type serviceType, string contract);
    public sealed virtual void UnregisterCurrent(Type serviceType, string contract);
    public sealed virtual void UnregisterAll(Type serviceType, string contract);
    [NullableContextAttribute("1")]
public sealed virtual IDisposable ServiceRegistrationCallback(Type serviceType, string contract, Action`1<IDisposable> callback);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Splat.FuncLogManager : object {
    private Func`2<Type, IFullLogger> _inner;
    public FuncLogManager(Func`2<Type, IFullLogger> getLoggerFunc);
    public sealed virtual IFullLogger GetLogger(Type type);
}
[NullableContextAttribute("1")]
public interface Splat.IAllocationFreeErrorLogger {
    public abstract virtual void Debug(Exception exception, string messageFormat, TArgument argument);
    public abstract virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public abstract virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public abstract virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public abstract virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public abstract virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public abstract virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public abstract virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public abstract virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public abstract virtual void Debug(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public abstract virtual void Info(Exception exception, string messageFormat, TArgument argument);
    public abstract virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public abstract virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public abstract virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public abstract virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public abstract virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public abstract virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public abstract virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public abstract virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public abstract virtual void Info(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public abstract virtual void Warn(Exception exception, string messageFormat, TArgument argument);
    public abstract virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public abstract virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public abstract virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public abstract virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public abstract virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public abstract virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public abstract virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public abstract virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public abstract virtual void Warn(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public abstract virtual void Error(Exception exception, string messageFormat, TArgument argument);
    public abstract virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public abstract virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public abstract virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public abstract virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public abstract virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public abstract virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public abstract virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public abstract virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public abstract virtual void Error(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public abstract virtual void Fatal(Exception exception, string messageFormat, TArgument argument);
    public abstract virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public abstract virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public abstract virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public abstract virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public abstract virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public abstract virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public abstract virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public abstract virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public abstract virtual void Fatal(Exception exception, string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
}
[NullableContextAttribute("1")]
public interface Splat.IAllocationFreeLogger {
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public bool IsErrorEnabled { get; }
    public bool IsFatalEnabled { get; }
    public abstract virtual bool get_IsDebugEnabled();
    public abstract virtual bool get_IsInfoEnabled();
    public abstract virtual bool get_IsWarnEnabled();
    public abstract virtual bool get_IsErrorEnabled();
    public abstract virtual bool get_IsFatalEnabled();
    public abstract virtual void Debug(string messageFormat, TArgument argument);
    public abstract virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public abstract virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public abstract virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public abstract virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public abstract virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public abstract virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public abstract virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public abstract virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public abstract virtual void Debug(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public abstract virtual void Info(string messageFormat, TArgument argument);
    public abstract virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public abstract virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public abstract virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public abstract virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public abstract virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public abstract virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public abstract virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public abstract virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public abstract virtual void Info(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public abstract virtual void Warn(string messageFormat, TArgument argument);
    public abstract virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public abstract virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public abstract virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public abstract virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public abstract virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public abstract virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public abstract virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public abstract virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public abstract virtual void Warn(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public abstract virtual void Error(string messageFormat, TArgument argument);
    public abstract virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public abstract virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public abstract virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public abstract virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public abstract virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public abstract virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public abstract virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public abstract virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public abstract virtual void Error(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
    public abstract virtual void Fatal(string messageFormat, TArgument argument);
    public abstract virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2);
    public abstract virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public abstract virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4);
    public abstract virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5);
    public abstract virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6);
    public abstract virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7);
    public abstract virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8);
    public abstract virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9);
    public abstract virtual void Fatal(string messageFormat, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, TArgument4 argument4, TArgument5 argument5, TArgument6 argument6, TArgument7 argument7, TArgument8 argument8, TArgument9 argument9, TArgument10 argument10);
}
public interface Splat.IDependencyResolver {
}
[ComVisibleAttribute("False")]
public interface Splat.IEnableLogger {
}
[NullableContextAttribute("1")]
public interface Splat.IFullLogger {
    public abstract virtual void Debug(T value);
    public abstract virtual void Debug(IFormatProvider formatProvider, T value);
    [ObsoleteAttribute("Use void Debug(Exception exception, [Localizable(false)] string? message)")]
public abstract virtual void DebugException(string message, Exception exception);
    public abstract virtual void Debug(Exception exception, string message);
    public abstract virtual void Debug(IFormatProvider formatProvider, string message, Object[] args);
    [NullableContextAttribute("2")]
public abstract virtual void Debug(string message);
    [NullableContextAttribute("2")]
public abstract virtual void Debug(string message);
    public abstract virtual void Debug(string message, Object[] args);
    public abstract virtual void Debug(string message, Object[] args);
    public abstract virtual void Debug(IFormatProvider formatProvider, string message, TArgument argument);
    public abstract virtual void Debug(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2);
    public abstract virtual void Debug(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public abstract virtual void Info(T value);
    public abstract virtual void Info(IFormatProvider formatProvider, T value);
    [ObsoleteAttribute("Use void Info(Exception exception, [Localizable(false)] string? message)")]
public abstract virtual void InfoException(string message, Exception exception);
    public abstract virtual void Info(Exception exception, string message);
    public abstract virtual void Info(IFormatProvider formatProvider, string message, Object[] args);
    [NullableContextAttribute("2")]
public abstract virtual void Info(string message);
    [NullableContextAttribute("2")]
public abstract virtual void Info(string message);
    public abstract virtual void Info(string message, Object[] args);
    public abstract virtual void Info(string message, Object[] args);
    public abstract virtual void Info(IFormatProvider formatProvider, string message, TArgument argument);
    public abstract virtual void Info(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2);
    public abstract virtual void Info(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public abstract virtual void Warn(T value);
    public abstract virtual void Warn(IFormatProvider formatProvider, T value);
    [ObsoleteAttribute("Use void Warn(Exception exception, [Localizable(false)] string? message)")]
public abstract virtual void WarnException(string message, Exception exception);
    public abstract virtual void Warn(Exception exception, string message);
    public abstract virtual void Warn(IFormatProvider formatProvider, string message, Object[] args);
    [NullableContextAttribute("2")]
public abstract virtual void Warn(string message);
    [NullableContextAttribute("2")]
public abstract virtual void Warn(string message);
    public abstract virtual void Warn(string message, Object[] args);
    public abstract virtual void Warn(string message, Object[] args);
    public abstract virtual void Warn(IFormatProvider formatProvider, string message, TArgument argument);
    public abstract virtual void Warn(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2);
    public abstract virtual void Warn(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public abstract virtual void Error(T value);
    public abstract virtual void Error(IFormatProvider formatProvider, T value);
    [ObsoleteAttribute("Use void Error(Exception exception, [Localizable(false)] string? message)")]
public abstract virtual void ErrorException(string message, Exception exception);
    public abstract virtual void Error(Exception exception, string message);
    public abstract virtual void Error(IFormatProvider formatProvider, string message, Object[] args);
    [NullableContextAttribute("2")]
public abstract virtual void Error(string message);
    [NullableContextAttribute("2")]
public abstract virtual void Error(string message);
    public abstract virtual void Error(string message, Object[] args);
    public abstract virtual void Error(string message, Object[] args);
    public abstract virtual void Error(IFormatProvider formatProvider, string message, TArgument argument);
    public abstract virtual void Error(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2);
    public abstract virtual void Error(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public abstract virtual void Fatal(T value);
    public abstract virtual void Fatal(IFormatProvider formatProvider, T value);
    [ObsoleteAttribute("Use void Fatal(Exception exception, [Localizable(false)] string? message)")]
public abstract virtual void FatalException(string message, Exception exception);
    public abstract virtual void Fatal(Exception exception, string message);
    public abstract virtual void Fatal(IFormatProvider formatProvider, string message, Object[] args);
    [NullableContextAttribute("2")]
public abstract virtual void Fatal(string message);
    [NullableContextAttribute("2")]
public abstract virtual void Fatal(string message);
    public abstract virtual void Fatal(string message, Object[] args);
    public abstract virtual void Fatal(string message, Object[] args);
    public abstract virtual void Fatal(IFormatProvider formatProvider, string message, TArgument argument);
    public abstract virtual void Fatal(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2);
    public abstract virtual void Fatal(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
}
[NullableContextAttribute("1")]
public interface Splat.ILogger {
    public LogLevel Level { get; }
    public abstract virtual LogLevel get_Level();
    public abstract virtual void Write(string message, LogLevel logLevel);
    public abstract virtual void Write(Exception exception, string message, LogLevel logLevel);
    public abstract virtual void Write(string message, Type type, LogLevel logLevel);
    public abstract virtual void Write(Exception exception, string message, Type type, LogLevel logLevel);
}
[NullableContextAttribute("1")]
public interface Splat.ILogManager {
    public abstract virtual IFullLogger GetLogger(Type type);
}
public interface Splat.IModeDetector {
    public abstract virtual Nullable`1<bool> InUnitTestRunner();
}
[NullableContextAttribute("2")]
public interface Splat.IMutableDependencyResolver {
    public abstract virtual bool HasRegistration(Type serviceType, string contract);
    public abstract virtual void Register(Func`1<object> factory, Type serviceType, string contract);
    public abstract virtual void UnregisterCurrent(Type serviceType, string contract);
    public abstract virtual void UnregisterAll(Type serviceType, string contract);
    [NullableContextAttribute("1")]
public abstract virtual IDisposable ServiceRegistrationCallback(Type serviceType, string contract, Action`1<IDisposable> callback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Splat.InternalLocator : object {
    private List`1<Action> _resolverChanged;
    private IDisposable _resolverChangedNotification;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _resolverChangedNotificationSuspendCount;
    private bool _disposedValue;
    [CompilerGeneratedAttribute]
private IDependencyResolver <Internal>k__BackingField;
    public IReadonlyDependencyResolver Current { get; }
    public IMutableDependencyResolver CurrentMutable { get; }
    internal IDependencyResolver Internal { get; private set; }
    public IReadonlyDependencyResolver get_Current();
    public IMutableDependencyResolver get_CurrentMutable();
    [CompilerGeneratedAttribute]
internal IDependencyResolver get_Internal();
    [CompilerGeneratedAttribute]
private void set_Internal(IDependencyResolver value);
    public sealed virtual void Dispose();
    public void SetLocator(IDependencyResolver dependencyResolver);
    public IDisposable RegisterResolverCallbackChanged(Action callback);
    public IDisposable SuppressResolverCallbackChangedNotifications();
    public bool AreResolverCallbackChangedNotificationsEnabled();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0();
    [CompilerGeneratedAttribute]
private void <SuppressResolverCallbackChangedNotifications>b__16_0();
}
[NullableContextAttribute("2")]
public interface Splat.IReadonlyDependencyResolver {
    public abstract virtual object GetService(Type serviceType, string contract);
    public abstract virtual IEnumerable`1<object> GetServices(Type serviceType, string contract);
}
[NullableContextAttribute("1")]
public interface Splat.IStaticFullLogger {
    public LogLevel Level { get; }
    public abstract virtual LogLevel get_Level();
    public abstract virtual void Debug(Exception exception, string message, string callerMemberName);
    public abstract virtual void Debug(string message, string callerMemberName);
    [NullableContextAttribute("2")]
public abstract virtual void Debug(string message, string callerMemberName);
    public abstract virtual void Debug(IFormatProvider formatProvider, string message, TArgument argument, string callerMemberName);
    public abstract virtual void Debug(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, string callerMemberName);
    public abstract virtual void Debug(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, string callerMemberName);
    public abstract virtual void Info(Exception exception, string message, string callerMemberName);
    public abstract virtual void Info(string message, string callerMemberName);
    [NullableContextAttribute("2")]
public abstract virtual void Info(string message, string callerMemberName);
    public abstract virtual void Info(IFormatProvider formatProvider, string message, TArgument argument, string callerMemberName);
    public abstract virtual void Info(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, string callerMemberName);
    public abstract virtual void Info(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, string callerMemberName);
    public abstract virtual void Warn(Exception exception, string message, string callerMemberName);
    public abstract virtual void Warn(string message, string callerMemberName);
    [NullableContextAttribute("2")]
public abstract virtual void Warn(string message, string callerMemberName);
    public abstract virtual void Warn(IFormatProvider formatProvider, string message, TArgument argument, string callerMemberName);
    public abstract virtual void Warn(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, string callerMemberName);
    public abstract virtual void Warn(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, string callerMemberName);
    public abstract virtual void Error(Exception exception, string message, string callerMemberName);
    public abstract virtual void Error(string message, string callerMemberName);
    [NullableContextAttribute("2")]
public abstract virtual void Error(string message, string callerMemberName);
    public abstract virtual void Error(IFormatProvider formatProvider, string message, TArgument argument, string callerMemberName);
    public abstract virtual void Error(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, string callerMemberName);
    public abstract virtual void Error(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, string callerMemberName);
    public abstract virtual void Fatal(Exception exception, string message, string callerMemberName);
    public abstract virtual void Fatal(string message, string callerMemberName);
    [NullableContextAttribute("2")]
public abstract virtual void Fatal(string message, string callerMemberName);
    public abstract virtual void Fatal(IFormatProvider formatProvider, string message, TArgument argument, string callerMemberName);
    public abstract virtual void Fatal(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, string callerMemberName);
    public abstract virtual void Fatal(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, string callerMemberName);
    public abstract virtual void Write(string message, LogLevel logLevel, string callerMemberName);
    public abstract virtual void Write(Exception exception, string message, LogLevel logLevel, string callerMemberName);
    public abstract virtual void Write(string message, Type type, LogLevel logLevel, string callerMemberName);
    public abstract virtual void Write(Exception exception, string message, Type type, LogLevel logLevel, string callerMemberName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Splat.Locator : object {
    [CompilerGeneratedAttribute]
private static InternalLocator <InternalLocator>k__BackingField;
    public static IReadonlyDependencyResolver Current { get; }
    public static IMutableDependencyResolver CurrentMutable { get; }
    internal static InternalLocator InternalLocator { get; internal set; }
    private static Locator();
    public static IReadonlyDependencyResolver get_Current();
    public static IMutableDependencyResolver get_CurrentMutable();
    [CompilerGeneratedAttribute]
internal static InternalLocator get_InternalLocator();
    [CompilerGeneratedAttribute]
internal static void set_InternalLocator(InternalLocator value);
    public static void SetLocator(IDependencyResolver dependencyResolver);
    public static IDependencyResolver GetLocator();
    public static IDisposable RegisterResolverCallbackChanged(Action callback);
    public static IDisposable SuppressResolverCallbackChangedNotifications();
    public static bool AreResolverCallbackChangedNotificationsEnabled();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Splat.LoggingException : Exception {
    public LoggingException(string message);
    public LoggingException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Splat.LogHost : object {
    public static IStaticFullLogger Default { get; }
    public static IStaticFullLogger get_Default();
    [ExtensionAttribute]
public static IFullLogger Log(T logClassInstance);
}
public enum Splat.LogLevel : Enum {
    public int value__;
    public static LogLevel Debug;
    public static LogLevel Info;
    public static LogLevel Warn;
    public static LogLevel Error;
    public static LogLevel Fatal;
}
[ExtensionAttribute]
public static class Splat.LogManagerMixin : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IFullLogger GetLogger(ILogManager logManager);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Splat.MemoizingMRUCache`2 : object {
    private object _lockObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<TParam, object, TVal> _calculationFunction;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<TVal> _releaseFunction;
    private int _maxCacheSize;
    private IEqualityComparer`1<TParam> _comparer;
    private LinkedList`1<TParam> _cacheMRUList;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<TParam, ValueTuple`2<LinkedListNode`1<TParam>, TVal>> _cacheEntries;
    public MemoizingMRUCache`2(Func`3<TParam, object, TVal> calculationFunc, int maxSize);
    public MemoizingMRUCache`2(Func`3<TParam, object, TVal> calculationFunc, int maxSize, Action`1<TVal> onRelease);
    public MemoizingMRUCache`2(Func`3<TParam, object, TVal> calculationFunc, int maxSize, IEqualityComparer`1<TParam> paramComparer);
    public MemoizingMRUCache`2(Func`3<TParam, object, TVal> calculationFunc, int maxSize, Action`1<TVal> onRelease, IEqualityComparer`1<TParam> paramComparer);
    public TVal Get(TParam key);
    public TVal Get(TParam key, object context);
    public bool TryGet(TParam key, TVal& result);
    public void Invalidate(TParam key);
    public void InvalidateAll(bool aggregateReleaseExceptions);
    public IEnumerable`1<TVal> CachedValues();
    private void MaintainCache();
    private void RefreshEntry(LinkedListNode`1<TParam> item);
    private void Invariants();
}
public class Splat.ModeDetection.Mode : object {
    [NullableAttribute("1")]
public static Mode Run;
    [NullableAttribute("1")]
public static Mode Test;
    private bool _inUnitTestRunner;
    private Mode(bool inUnitTestRunner);
    private static Mode();
    public sealed virtual Nullable`1<bool> InUnitTestRunner();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Splat.ModeDetector : object {
    private static Nullable`1<bool> _cachedInUnitTestRunnerResult;
    [CompilerGeneratedAttribute]
private static IModeDetector <Current>k__BackingField;
    private static IModeDetector Current { get; private set; }
    private static ModeDetector();
    [CompilerGeneratedAttribute]
private static IModeDetector get_Current();
    [CompilerGeneratedAttribute]
private static void set_Current(IModeDetector value);
    public static void OverrideModeDetector(IModeDetector modeDetector);
    public static bool InUnitTestRunner();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Splat.ModernDependencyResolver : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<Type, string>, List`1<Action`1<IDisposable>>> _callbackRegistry;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<Type, string>, List`1<Func`1<object>>> _registry;
    private bool _isDisposed;
    protected ModernDependencyResolver(Dictionary`2<ValueTuple`2<Type, string>, List`1<Func`1<object>>> registry);
    public sealed virtual bool HasRegistration(Type serviceType, string contract);
    public sealed virtual void Register(Func`1<object> factory, Type serviceType, string contract);
    public sealed virtual object GetService(Type serviceType, string contract);
    public sealed virtual IEnumerable`1<object> GetServices(Type serviceType, string contract);
    public sealed virtual void UnregisterCurrent(Type serviceType, string contract);
    public sealed virtual void UnregisterAll(Type serviceType, string contract);
    [NullableContextAttribute("1")]
public sealed virtual IDisposable ServiceRegistrationCallback(Type serviceType, string contract, Action`1<IDisposable> callback);
    [NullableContextAttribute("1")]
public ModernDependencyResolver Duplicate();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
    private static ValueTuple`2<Type, string> GetKey(Type serviceType, string contract);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Splat.NullLogger : object {
    [CompilerGeneratedAttribute]
private LogLevel <Level>k__BackingField;
    public LogLevel Level { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual LogLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(LogLevel value);
    public sealed virtual void Write(string message, LogLevel logLevel);
    public sealed virtual void Write(Exception exception, string message, LogLevel logLevel);
    public sealed virtual void Write(string message, Type type, LogLevel logLevel);
    public sealed virtual void Write(Exception exception, string message, Type type, LogLevel logLevel);
}
public class Splat.NullServiceType : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`1<object> <Factory>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<object> Factory { get; }
    public NullServiceType(Func`1<object> factory);
    [CompilerGeneratedAttribute]
public Func`1<object> get_Factory();
}
[ExtensionAttribute]
public static class Splat.PointMathExtensions : object {
    [ExtensionAttribute]
public static PointF Floor(Point value);
    [ExtensionAttribute]
public static bool WithinEpsilonOf(PointF value, PointF other, float epsilon);
    [ExtensionAttribute]
public static float DotProduct(PointF value, PointF other);
    [ExtensionAttribute]
public static PointF ScaledBy(PointF value, float factor);
    [ExtensionAttribute]
public static float Length(PointF value);
    [ExtensionAttribute]
public static PointF Normalize(PointF value);
    [ExtensionAttribute]
public static float AngleInDegrees(PointF value);
    [ExtensionAttribute]
public static PointF ProjectAlong(PointF value, PointF direction);
    [ExtensionAttribute]
public static PointF ProjectAlongAngle(PointF value, float angleInDegrees);
    [ExtensionAttribute]
public static float DistanceTo(PointF value, PointF other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Splat.RectangleMathExtensions : object {
    [ExtensionAttribute]
public static PointF Center(RectangleF value);
    [ExtensionAttribute]
public static Tuple`2<RectangleF, RectangleF> Divide(RectangleF value, float amount, RectEdge fromEdge);
    [ExtensionAttribute]
public static Tuple`2<RectangleF, RectangleF> DivideWithPadding(RectangleF value, float sliceAmount, float padding, RectEdge fromEdge);
    [ExtensionAttribute]
public static RectangleF InvertWithin(RectangleF value, RectangleF containingRect);
    [ExtensionAttribute]
public static RectangleF Copy(RectangleF value, Nullable`1<float> x, Nullable`1<float> y, Nullable`1<float> width, Nullable`1<float> height, Nullable`1<float> top, Nullable`1<float> bottom);
}
public enum Splat.RectEdge : Enum {
    public int value__;
    public static RectEdge Left;
    public static RectEdge Top;
    public static RectEdge Right;
    public static RectEdge Bottom;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Splat.ResolverMixins : object {
    [ExtensionAttribute]
public static IMutableDependencyResolver RegisterAnd(IMutableDependencyResolver resolver, string contract);
    [ExtensionAttribute]
public static IMutableDependencyResolver RegisterAnd(IMutableDependencyResolver resolver, Func`1<T> factory, string contract);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IMutableDependencyResolver RegisterAnd(IMutableDependencyResolver resolver, string contract);
    [ExtensionAttribute]
public static IMutableDependencyResolver RegisterAnd(IMutableDependencyResolver resolver, Func`1<T> factory, string contract);
    [ExtensionAttribute]
public static IMutableDependencyResolver RegisterConstantAnd(IMutableDependencyResolver resolver, object value, Type serviceType, string contract);
    [ExtensionAttribute]
public static IMutableDependencyResolver RegisterConstantAnd(IMutableDependencyResolver resolver, string contract);
    [ExtensionAttribute]
public static IMutableDependencyResolver RegisterConstantAnd(IMutableDependencyResolver resolver, T value, string contract);
    [ExtensionAttribute]
public static IMutableDependencyResolver RegisterLazySingletonAnd(IMutableDependencyResolver resolver, Func`1<object> valueFactory, Type serviceType, string contract);
    [ExtensionAttribute]
public static IMutableDependencyResolver RegisterLazySingletonAnd(IMutableDependencyResolver resolver, string contract);
    [ExtensionAttribute]
public static IMutableDependencyResolver RegisterLazySingletonAnd(IMutableDependencyResolver resolver, Func`1<T> valueFactory, string contract);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Splat.ServiceLocationInitialization : object {
    [ExtensionAttribute]
public static void InitializeSplat(IMutableDependencyResolver resolver);
    private static void RegisterApplicationPerformanceMonitoring(IMutableDependencyResolver resolver);
    private static void RegisterDefaultLogManager(IMutableDependencyResolver resolver);
    private static void RegisterLogger(IMutableDependencyResolver resolver);
}
[ExtensionAttribute]
public static class Splat.SizeMathExtensions : object {
    [ExtensionAttribute]
public static bool WithinEpsilonOf(SizeF value, SizeF other, float epsilon);
    [ExtensionAttribute]
public static SizeF ScaledBy(SizeF value, float factor);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Splat.StaticFullLogger : object {
    [NullableAttribute("1")]
private IFullLogger _fullLogger;
    public LogLevel Level { get; }
    [NullableContextAttribute("1")]
public StaticFullLogger(IFullLogger fullLogger);
    public sealed virtual LogLevel get_Level();
    public sealed virtual void Debug(Exception exception, string message, string callerMemberName);
    public sealed virtual void Debug(string message, string callerMemberName);
    public sealed virtual void Debug(string message, string callerMemberName);
    [NullableContextAttribute("1")]
public sealed virtual void Debug(IFormatProvider formatProvider, string message, TArgument argument, string callerMemberName);
    public sealed virtual void Debug(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, string callerMemberName);
    public sealed virtual void Debug(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, string callerMemberName);
    public sealed virtual void Info(Exception exception, string message, string callerMemberName);
    public sealed virtual void Info(string message, string callerMemberName);
    public sealed virtual void Info(string message, string callerMemberName);
    [NullableContextAttribute("1")]
public sealed virtual void Info(IFormatProvider formatProvider, string message, TArgument argument, string callerMemberName);
    public sealed virtual void Info(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, string callerMemberName);
    public sealed virtual void Info(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, string callerMemberName);
    public sealed virtual void Warn(Exception exception, string message, string callerMemberName);
    public sealed virtual void Warn(string message, string callerMemberName);
    public sealed virtual void Warn(string message, string callerMemberName);
    [NullableContextAttribute("1")]
public sealed virtual void Warn(IFormatProvider formatProvider, string message, TArgument argument, string callerMemberName);
    public sealed virtual void Warn(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, string callerMemberName);
    public sealed virtual void Warn(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, string callerMemberName);
    public sealed virtual void Error(Exception exception, string message, string callerMemberName);
    public sealed virtual void Error(string message, string callerMemberName);
    public sealed virtual void Error(string message, string callerMemberName);
    [NullableContextAttribute("1")]
public sealed virtual void Error(IFormatProvider formatProvider, string message, TArgument argument, string callerMemberName);
    public sealed virtual void Error(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, string callerMemberName);
    public sealed virtual void Error(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, string callerMemberName);
    public sealed virtual void Fatal(Exception exception, string message, string callerMemberName);
    public sealed virtual void Fatal(string message, string callerMemberName);
    public sealed virtual void Fatal(string message, string callerMemberName);
    [NullableContextAttribute("1")]
public sealed virtual void Fatal(IFormatProvider formatProvider, string message, TArgument argument, string callerMemberName);
    public sealed virtual void Fatal(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, string callerMemberName);
    public sealed virtual void Fatal(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3, string callerMemberName);
    public sealed virtual void Write(string message, LogLevel logLevel, string callerMemberName);
    public sealed virtual void Write(Exception exception, string message, LogLevel logLevel, string callerMemberName);
    public sealed virtual void Write(string message, Type type, LogLevel logLevel, string callerMemberName);
    [NullableContextAttribute("1")]
public sealed virtual void Write(Exception exception, string message, Type type, LogLevel logLevel, string callerMemberName);
    private static string GetSuffixedCallerData(string message, string callerMemberName);
}
[ExtensionAttribute]
public static class Splat.TargetFrameworkExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetTargetFrameworkName(Assembly assembly);
    [NullableContextAttribute("2")]
internal static string GetTargetFrameworkName(string frameworkName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Splat.WrappingFullLogger : AllocationFreeLoggerBase {
    private ILogger _inner;
    private MethodInfo _stringFormat;
    public WrappingFullLogger(ILogger inner);
    public sealed virtual void Debug(T value);
    public sealed virtual void Debug(IFormatProvider formatProvider, T value);
    public sealed virtual void DebugException(string message, Exception exception);
    public sealed virtual void Debug(Exception exception, string message);
    public sealed virtual void Debug(IFormatProvider formatProvider, string message, Object[] args);
    [NullableContextAttribute("2")]
public sealed virtual void Debug(string message);
    [NullableContextAttribute("2")]
public sealed virtual void Debug(string message);
    public sealed virtual void Debug(string message, Object[] args);
    public sealed virtual void Debug(string message, Object[] args);
    public sealed virtual void Debug(IFormatProvider formatProvider, string message, TArgument argument);
    public sealed virtual void Debug(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2);
    public sealed virtual void Debug(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public sealed virtual void Info(T value);
    public sealed virtual void Info(IFormatProvider formatProvider, T value);
    public sealed virtual void InfoException(string message, Exception exception);
    public sealed virtual void Info(Exception exception, string message);
    public sealed virtual void Info(IFormatProvider formatProvider, string message, Object[] args);
    [NullableContextAttribute("2")]
public sealed virtual void Info(string message);
    [NullableContextAttribute("2")]
public sealed virtual void Info(string message);
    public sealed virtual void Info(string message, Object[] args);
    public sealed virtual void Info(string message, Object[] args);
    public sealed virtual void Info(IFormatProvider formatProvider, string message, TArgument argument);
    public sealed virtual void Info(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2);
    public sealed virtual void Info(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public sealed virtual void Warn(T value);
    public sealed virtual void Warn(IFormatProvider formatProvider, T value);
    public sealed virtual void WarnException(string message, Exception exception);
    public sealed virtual void Warn(Exception exception, string message);
    public sealed virtual void Warn(IFormatProvider formatProvider, string message, Object[] args);
    [NullableContextAttribute("2")]
public sealed virtual void Warn(string message);
    [NullableContextAttribute("2")]
public sealed virtual void Warn(string message);
    public sealed virtual void Warn(string message, Object[] args);
    public sealed virtual void Warn(string message, Object[] args);
    public sealed virtual void Warn(IFormatProvider formatProvider, string message, TArgument argument);
    public sealed virtual void Warn(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2);
    public sealed virtual void Warn(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public sealed virtual void Error(T value);
    public sealed virtual void Error(IFormatProvider formatProvider, T value);
    public sealed virtual void ErrorException(string message, Exception exception);
    public sealed virtual void Error(Exception exception, string message);
    public sealed virtual void Error(IFormatProvider formatProvider, string message, Object[] args);
    [NullableContextAttribute("2")]
public sealed virtual void Error(string message);
    [NullableContextAttribute("2")]
public sealed virtual void Error(string message);
    public sealed virtual void Error(string message, Object[] args);
    public sealed virtual void Error(string message, Object[] args);
    public sealed virtual void Error(IFormatProvider formatProvider, string message, TArgument argument);
    public sealed virtual void Error(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2);
    public sealed virtual void Error(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    public sealed virtual void Fatal(T value);
    public sealed virtual void Fatal(IFormatProvider formatProvider, T value);
    public sealed virtual void FatalException(string message, Exception exception);
    public sealed virtual void Fatal(Exception exception, string message);
    public sealed virtual void Fatal(IFormatProvider formatProvider, string message, Object[] args);
    [NullableContextAttribute("2")]
public sealed virtual void Fatal(string message);
    [NullableContextAttribute("2")]
public sealed virtual void Fatal(string message);
    public sealed virtual void Fatal(string message, Object[] args);
    public sealed virtual void Fatal(string message, Object[] args);
    public sealed virtual void Fatal(IFormatProvider formatProvider, string message, TArgument argument);
    public sealed virtual void Fatal(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2);
    public sealed virtual void Fatal(IFormatProvider formatProvider, string message, TArgument1 argument1, TArgument2 argument2, TArgument3 argument3);
    private string InvokeStringFormat(IFormatProvider formatProvider, string message, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Splat.WrappingLogLevelLogger : object {
    private ILogger _inner;
    public LogLevel Level { get; }
    public WrappingLogLevelLogger(ILogger inner);
    public sealed virtual LogLevel get_Level();
    public sealed virtual void Write(string message, LogLevel logLevel);
    public sealed virtual void Write(Exception exception, string message, LogLevel logLevel);
    public sealed virtual void Write(string message, Type type, LogLevel logLevel);
    public sealed virtual void Write(Exception exception, string message, Type type, LogLevel logLevel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Splat.WrappingPrefixLogger : object {
    private ILogger _inner;
    private string _prefix;
    public LogLevel Level { get; }
    public WrappingPrefixLogger(ILogger inner, Type callingType);
    public sealed virtual LogLevel get_Level();
    public sealed virtual void Write(string message, LogLevel logLevel);
    public sealed virtual void Write(Exception exception, string message, LogLevel logLevel);
    public sealed virtual void Write(string message, Type type, LogLevel logLevel);
    public sealed virtual void Write(Exception exception, string message, Type type, LogLevel logLevel);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.143.54359")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string RootNamespace;
    private static ThisAssembly();
}
