public class SQLite.AsyncTableQuery`1 : object {
    private TableQuery`1<T> _innerQuery;
    public AsyncTableQuery`1(TableQuery`1<T> innerQuery);
    private Task`1<U> ReadAsync(Func`2<SQLiteConnectionWithLock, U> read);
    private Task`1<U> WriteAsync(Func`2<SQLiteConnectionWithLock, U> write);
    public AsyncTableQuery`1<T> Where(Expression`1<Func`2<T, bool>> predExpr);
    public AsyncTableQuery`1<T> Skip(int n);
    public AsyncTableQuery`1<T> Take(int n);
    public AsyncTableQuery`1<T> OrderBy(Expression`1<Func`2<T, U>> orderExpr);
    public AsyncTableQuery`1<T> OrderByDescending(Expression`1<Func`2<T, U>> orderExpr);
    public AsyncTableQuery`1<T> ThenBy(Expression`1<Func`2<T, U>> orderExpr);
    public AsyncTableQuery`1<T> ThenByDescending(Expression`1<Func`2<T, U>> orderExpr);
    public Task`1<List`1<T>> ToListAsync();
    public Task`1<T[]> ToArrayAsync();
    public Task`1<int> CountAsync();
    public Task`1<int> CountAsync(Expression`1<Func`2<T, bool>> predExpr);
    public Task`1<T> ElementAtAsync(int index);
    public Task`1<T> FirstAsync();
    public Task`1<T> FirstOrDefaultAsync();
    public Task`1<T> FirstAsync(Expression`1<Func`2<T, bool>> predExpr);
    public Task`1<T> FirstOrDefaultAsync(Expression`1<Func`2<T, bool>> predExpr);
    public Task`1<int> DeleteAsync(Expression`1<Func`2<T, bool>> predExpr);
    public Task`1<int> DeleteAsync();
    [CompilerGeneratedAttribute]
private List`1<T> <ToListAsync>b__11_0(SQLiteConnectionWithLock conn);
    [CompilerGeneratedAttribute]
private T[] <ToArrayAsync>b__12_0(SQLiteConnectionWithLock conn);
    [CompilerGeneratedAttribute]
private int <CountAsync>b__13_0(SQLiteConnectionWithLock conn);
    [CompilerGeneratedAttribute]
private T <FirstAsync>b__16_0(SQLiteConnectionWithLock conn);
    [CompilerGeneratedAttribute]
private T <FirstOrDefaultAsync>b__17_0(SQLiteConnectionWithLock conn);
    [CompilerGeneratedAttribute]
private int <DeleteAsync>b__21_0(SQLiteConnectionWithLock conn);
}
[AttributeUsageAttribute("128")]
public class SQLite.AutoIncrementAttribute : Attribute {
}
public abstract class SQLite.BaseTableQuery : object {
}
[AttributeUsageAttribute("128")]
public class SQLite.CollationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; private set; }
    public CollationAttribute(string collation);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
[AttributeUsageAttribute("128")]
public class SQLite.ColumnAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public ColumnAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[FlagsAttribute]
public enum SQLite.CreateFlags : Enum {
    public int value__;
    public static CreateFlags None;
    public static CreateFlags ImplicitPK;
    public static CreateFlags ImplicitIndex;
    public static CreateFlags AllImplicit;
    public static CreateFlags AutoIncPK;
    public static CreateFlags FullTextSearch3;
    public static CreateFlags FullTextSearch4;
}
public enum SQLite.CreateTableResult : Enum {
    public int value__;
    public static CreateTableResult Created;
    public static CreateTableResult Migrated;
}
public class SQLite.CreateTablesResult : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, CreateTableResult> <Results>k__BackingField;
    public Dictionary`2<Type, CreateTableResult> Results { get; private set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, CreateTableResult> get_Results();
    [CompilerGeneratedAttribute]
private void set_Results(Dictionary`2<Type, CreateTableResult> value);
}
internal static class SQLite.EnumCache : object {
    private static Dictionary`2<Type, EnumCacheInfo> Cache;
    private static EnumCache();
    public static EnumCacheInfo GetInfo();
    public static EnumCacheInfo GetInfo(Type type);
}
internal class SQLite.EnumCacheInfo : object {
    [CompilerGeneratedAttribute]
private bool <IsEnum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StoreAsText>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, string> <EnumValues>k__BackingField;
    public bool IsEnum { get; private set; }
    public bool StoreAsText { get; private set; }
    public Dictionary`2<int, string> EnumValues { get; private set; }
    public EnumCacheInfo(Type type);
    [CompilerGeneratedAttribute]
public bool get_IsEnum();
    [CompilerGeneratedAttribute]
private void set_IsEnum(bool value);
    [CompilerGeneratedAttribute]
public bool get_StoreAsText();
    [CompilerGeneratedAttribute]
private void set_StoreAsText(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<int, string> get_EnumValues();
    [CompilerGeneratedAttribute]
private void set_EnumValues(Dictionary`2<int, string> value);
}
internal class SQLite.FastColumnSetter : object {
    internal static Action`3<object, sqlite3_stmt, int> GetFastSetter(SQLiteConnection conn, Column column);
    private static Action`3<object, sqlite3_stmt, int> CreateNullableTypedSetterDelegate(Column column, Func`3<sqlite3_stmt, int, ColumnMemberType> getColumnValue);
    private static Action`3<object, sqlite3_stmt, int> CreateTypedSetterDelegate(Column column, Func`3<sqlite3_stmt, int, ColumnMemberType> getColumnValue);
}
[AttributeUsageAttribute("128")]
public class SQLite.IgnoreAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class SQLite.IndexedAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Unique>k__BackingField;
    public string Name { get; public set; }
    public int Order { get; public set; }
    public bool Unique { get; public set; }
    public IndexedAttribute(string name, int order);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_Unique();
    [CompilerGeneratedAttribute]
public virtual void set_Unique(bool value);
}
public interface SQLite.ISQLiteAsyncConnection {
    public string DatabasePath { get; }
    public int LibVersionNumber { get; }
    public string DateTimeStringFormat { get; }
    public bool StoreDateTimeAsTicks { get; }
    public bool StoreTimeSpanAsTicks { get; }
    public bool Trace { get; public set; }
    public Action`1<string> Tracer { get; public set; }
    public bool TimeExecution { get; public set; }
    public IEnumerable`1<TableMapping> TableMappings { get; }
    public abstract virtual string get_DatabasePath();
    public abstract virtual int get_LibVersionNumber();
    public abstract virtual string get_DateTimeStringFormat();
    public abstract virtual bool get_StoreDateTimeAsTicks();
    public abstract virtual bool get_StoreTimeSpanAsTicks();
    public abstract virtual bool get_Trace();
    public abstract virtual void set_Trace(bool value);
    public abstract virtual Action`1<string> get_Tracer();
    public abstract virtual void set_Tracer(Action`1<string> value);
    public abstract virtual bool get_TimeExecution();
    public abstract virtual void set_TimeExecution(bool value);
    public abstract virtual IEnumerable`1<TableMapping> get_TableMappings();
    public abstract virtual Task BackupAsync(string destinationDatabasePath, string databaseName);
    public abstract virtual Task CloseAsync();
    public abstract virtual Task`1<int> CreateIndexAsync(string tableName, string columnName, bool unique);
    public abstract virtual Task`1<int> CreateIndexAsync(string indexName, string tableName, string columnName, bool unique);
    public abstract virtual Task`1<int> CreateIndexAsync(string tableName, String[] columnNames, bool unique);
    public abstract virtual Task`1<int> CreateIndexAsync(string indexName, string tableName, String[] columnNames, bool unique);
    public abstract virtual Task`1<int> CreateIndexAsync(Expression`1<Func`2<T, object>> property, bool unique);
    public abstract virtual Task`1<CreateTableResult> CreateTableAsync(CreateFlags createFlags);
    public abstract virtual Task`1<CreateTableResult> CreateTableAsync(Type ty, CreateFlags createFlags);
    public abstract virtual Task`1<CreateTablesResult> CreateTablesAsync(CreateFlags createFlags);
    public abstract virtual Task`1<CreateTablesResult> CreateTablesAsync(CreateFlags createFlags);
    public abstract virtual Task`1<CreateTablesResult> CreateTablesAsync(CreateFlags createFlags);
    public abstract virtual Task`1<CreateTablesResult> CreateTablesAsync(CreateFlags createFlags);
    public abstract virtual Task`1<CreateTablesResult> CreateTablesAsync(CreateFlags createFlags, Type[] types);
    public abstract virtual Task`1<IEnumerable`1<T>> DeferredQueryAsync(string query, Object[] args);
    public abstract virtual Task`1<IEnumerable`1<object>> DeferredQueryAsync(TableMapping map, string query, Object[] args);
    public abstract virtual Task`1<int> DeleteAllAsync();
    public abstract virtual Task`1<int> DeleteAllAsync(TableMapping map);
    public abstract virtual Task`1<int> DeleteAsync(object objectToDelete);
    public abstract virtual Task`1<int> DeleteAsync(object primaryKey);
    public abstract virtual Task`1<int> DeleteAsync(object primaryKey, TableMapping map);
    public abstract virtual Task`1<int> DropTableAsync();
    public abstract virtual Task`1<int> DropTableAsync(TableMapping map);
    public abstract virtual Task EnableLoadExtensionAsync(bool enabled);
    public abstract virtual Task EnableWriteAheadLoggingAsync();
    public abstract virtual Task`1<int> ExecuteAsync(string query, Object[] args);
    public abstract virtual Task`1<T> ExecuteScalarAsync(string query, Object[] args);
    public abstract virtual Task`1<T> FindAsync(object pk);
    public abstract virtual Task`1<object> FindAsync(object pk, TableMapping map);
    public abstract virtual Task`1<T> FindAsync(Expression`1<Func`2<T, bool>> predicate);
    public abstract virtual Task`1<T> FindWithQueryAsync(string query, Object[] args);
    public abstract virtual Task`1<object> FindWithQueryAsync(TableMapping map, string query, Object[] args);
    public abstract virtual Task`1<T> GetAsync(object pk);
    public abstract virtual Task`1<object> GetAsync(object pk, TableMapping map);
    public abstract virtual Task`1<T> GetAsync(Expression`1<Func`2<T, bool>> predicate);
    public abstract virtual TimeSpan GetBusyTimeout();
    public abstract virtual SQLiteConnectionWithLock GetConnection();
    public abstract virtual Task`1<TableMapping> GetMappingAsync(Type type, CreateFlags createFlags);
    public abstract virtual Task`1<TableMapping> GetMappingAsync(CreateFlags createFlags);
    public abstract virtual Task`1<List`1<ColumnInfo>> GetTableInfoAsync(string tableName);
    public abstract virtual Task`1<int> InsertAllAsync(IEnumerable objects, bool runInTransaction);
    public abstract virtual Task`1<int> InsertAllAsync(IEnumerable objects, string extra, bool runInTransaction);
    public abstract virtual Task`1<int> InsertAllAsync(IEnumerable objects, Type objType, bool runInTransaction);
    public abstract virtual Task`1<int> InsertAsync(object obj);
    public abstract virtual Task`1<int> InsertAsync(object obj, Type objType);
    public abstract virtual Task`1<int> InsertAsync(object obj, string extra);
    public abstract virtual Task`1<int> InsertAsync(object obj, string extra, Type objType);
    public abstract virtual Task`1<int> InsertOrReplaceAsync(object obj);
    public abstract virtual Task`1<int> InsertOrReplaceAsync(object obj, Type objType);
    public abstract virtual Task`1<List`1<T>> QueryAsync(string query, Object[] args);
    public abstract virtual Task`1<List`1<object>> QueryAsync(TableMapping map, string query, Object[] args);
    public abstract virtual Task`1<List`1<T>> QueryScalarsAsync(string query, Object[] args);
    public abstract virtual Task ReKeyAsync(string key);
    public abstract virtual Task ReKeyAsync(Byte[] key);
    public abstract virtual Task RunInTransactionAsync(Action`1<SQLiteConnection> action);
    public abstract virtual Task SetBusyTimeoutAsync(TimeSpan value);
    public abstract virtual AsyncTableQuery`1<T> Table();
    public abstract virtual Task`1<int> UpdateAllAsync(IEnumerable objects, bool runInTransaction);
    public abstract virtual Task`1<int> UpdateAsync(object obj);
    public abstract virtual Task`1<int> UpdateAsync(object obj, Type objType);
}
public interface SQLite.ISQLiteConnection {
    public sqlite3 Handle { get; }
    public string DatabasePath { get; }
    public int LibVersionNumber { get; }
    public bool TimeExecution { get; public set; }
    public bool Trace { get; public set; }
    public Action`1<string> Tracer { get; public set; }
    public bool StoreDateTimeAsTicks { get; }
    public bool StoreTimeSpanAsTicks { get; }
    public string DateTimeStringFormat { get; }
    public TimeSpan BusyTimeout { get; public set; }
    public IEnumerable`1<TableMapping> TableMappings { get; }
    public bool IsInTransaction { get; }
    public abstract virtual sqlite3 get_Handle();
    public abstract virtual string get_DatabasePath();
    public abstract virtual int get_LibVersionNumber();
    public abstract virtual bool get_TimeExecution();
    public abstract virtual void set_TimeExecution(bool value);
    public abstract virtual bool get_Trace();
    public abstract virtual void set_Trace(bool value);
    public abstract virtual Action`1<string> get_Tracer();
    public abstract virtual void set_Tracer(Action`1<string> value);
    public abstract virtual bool get_StoreDateTimeAsTicks();
    public abstract virtual bool get_StoreTimeSpanAsTicks();
    public abstract virtual string get_DateTimeStringFormat();
    public abstract virtual TimeSpan get_BusyTimeout();
    public abstract virtual void set_BusyTimeout(TimeSpan value);
    public abstract virtual IEnumerable`1<TableMapping> get_TableMappings();
    public abstract virtual bool get_IsInTransaction();
    [CompilerGeneratedAttribute]
public abstract virtual void add_TableChanged(EventHandler`1<NotifyTableChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TableChanged(EventHandler`1<NotifyTableChangedEventArgs> value);
    public abstract virtual void Backup(string destinationDatabasePath, string databaseName);
    public abstract virtual void BeginTransaction();
    public abstract virtual void Close();
    public abstract virtual void Commit();
    public abstract virtual SQLiteCommand CreateCommand(string cmdText, Object[] ps);
    public abstract virtual SQLiteCommand CreateCommand(string cmdText, Dictionary`2<string, object> args);
    public abstract virtual int CreateIndex(string indexName, string tableName, String[] columnNames, bool unique);
    public abstract virtual int CreateIndex(string indexName, string tableName, string columnName, bool unique);
    public abstract virtual int CreateIndex(string tableName, string columnName, bool unique);
    public abstract virtual int CreateIndex(string tableName, String[] columnNames, bool unique);
    public abstract virtual int CreateIndex(Expression`1<Func`2<T, object>> property, bool unique);
    public abstract virtual CreateTableResult CreateTable(CreateFlags createFlags);
    public abstract virtual CreateTableResult CreateTable(Type ty, CreateFlags createFlags);
    public abstract virtual CreateTablesResult CreateTables(CreateFlags createFlags);
    public abstract virtual CreateTablesResult CreateTables(CreateFlags createFlags);
    public abstract virtual CreateTablesResult CreateTables(CreateFlags createFlags);
    public abstract virtual CreateTablesResult CreateTables(CreateFlags createFlags);
    public abstract virtual CreateTablesResult CreateTables(CreateFlags createFlags, Type[] types);
    public abstract virtual IEnumerable`1<T> DeferredQuery(string query, Object[] args);
    public abstract virtual IEnumerable`1<object> DeferredQuery(TableMapping map, string query, Object[] args);
    public abstract virtual int Delete(object objectToDelete);
    public abstract virtual int Delete(object primaryKey);
    public abstract virtual int Delete(object primaryKey, TableMapping map);
    public abstract virtual int DeleteAll();
    public abstract virtual int DeleteAll(TableMapping map);
    public abstract virtual int DropTable();
    public abstract virtual int DropTable(TableMapping map);
    public abstract virtual void EnableLoadExtension(bool enabled);
    public abstract virtual void EnableWriteAheadLogging();
    public abstract virtual int Execute(string query, Object[] args);
    public abstract virtual T ExecuteScalar(string query, Object[] args);
    public abstract virtual T Find(object pk);
    public abstract virtual object Find(object pk, TableMapping map);
    public abstract virtual T Find(Expression`1<Func`2<T, bool>> predicate);
    public abstract virtual T FindWithQuery(string query, Object[] args);
    public abstract virtual object FindWithQuery(TableMapping map, string query, Object[] args);
    public abstract virtual T Get(object pk);
    public abstract virtual object Get(object pk, TableMapping map);
    public abstract virtual T Get(Expression`1<Func`2<T, bool>> predicate);
    public abstract virtual TableMapping GetMapping(Type type, CreateFlags createFlags);
    public abstract virtual TableMapping GetMapping(CreateFlags createFlags);
    public abstract virtual List`1<ColumnInfo> GetTableInfo(string tableName);
    public abstract virtual int Insert(object obj);
    public abstract virtual int Insert(object obj, Type objType);
    public abstract virtual int Insert(object obj, string extra);
    public abstract virtual int Insert(object obj, string extra, Type objType);
    public abstract virtual int InsertAll(IEnumerable objects, bool runInTransaction);
    public abstract virtual int InsertAll(IEnumerable objects, string extra, bool runInTransaction);
    public abstract virtual int InsertAll(IEnumerable objects, Type objType, bool runInTransaction);
    public abstract virtual int InsertOrReplace(object obj);
    public abstract virtual int InsertOrReplace(object obj, Type objType);
    public abstract virtual List`1<T> Query(string query, Object[] args);
    public abstract virtual List`1<object> Query(TableMapping map, string query, Object[] args);
    public abstract virtual List`1<T> QueryScalars(string query, Object[] args);
    public abstract virtual void ReKey(string key);
    public abstract virtual void ReKey(Byte[] key);
    public abstract virtual void Release(string savepoint);
    public abstract virtual void Rollback();
    public abstract virtual void RollbackTo(string savepoint);
    public abstract virtual void RunInTransaction(Action action);
    public abstract virtual string SaveTransactionPoint();
    public abstract virtual TableQuery`1<T> Table();
    public abstract virtual int Update(object obj);
    public abstract virtual int Update(object obj, Type objType);
    public abstract virtual int UpdateAll(IEnumerable objects, bool runInTransaction);
}
[AttributeUsageAttribute("128")]
public class SQLite.MaxLengthAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    public int Value { get; private set; }
    public MaxLengthAttribute(int length);
    [CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(int value);
}
public enum SQLite.NotifyTableChangedAction : Enum {
    public int value__;
    public static NotifyTableChangedAction Insert;
    public static NotifyTableChangedAction Update;
    public static NotifyTableChangedAction Delete;
}
public class SQLite.NotifyTableChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TableMapping <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private NotifyTableChangedAction <Action>k__BackingField;
    public TableMapping Table { get; private set; }
    public NotifyTableChangedAction Action { get; private set; }
    public NotifyTableChangedEventArgs(TableMapping table, NotifyTableChangedAction action);
    [CompilerGeneratedAttribute]
public TableMapping get_Table();
    [CompilerGeneratedAttribute]
private void set_Table(TableMapping value);
    [CompilerGeneratedAttribute]
public NotifyTableChangedAction get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(NotifyTableChangedAction value);
}
[AttributeUsageAttribute("128")]
public class SQLite.NotNullAttribute : Attribute {
}
public class SQLite.NotNullConstraintViolationException : SQLiteException {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Column> <Columns>k__BackingField;
    public IEnumerable`1<Column> Columns { get; protected set; }
    protected NotNullConstraintViolationException(Result r, string message);
    protected NotNullConstraintViolationException(Result r, string message, TableMapping mapping, object obj);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Column> get_Columns();
    [CompilerGeneratedAttribute]
protected void set_Columns(IEnumerable`1<Column> value);
    public static NotNullConstraintViolationException New(Result r, string message);
    public static NotNullConstraintViolationException New(Result r, string message, TableMapping mapping, object obj);
    public static NotNullConstraintViolationException New(SQLiteException exception, TableMapping mapping, object obj);
}
public static class SQLite.Orm : object {
    public static int DefaultMaxStringLength;
    public static string ImplicitPkName;
    public static string ImplicitIndexSuffix;
    public static Type GetType(object obj);
    public static string SqlDecl(Column p, bool storeDateTimeAsTicks, bool storeTimeSpanAsTicks);
    public static string SqlType(Column p, bool storeDateTimeAsTicks, bool storeTimeSpanAsTicks);
    public static bool IsPK(MemberInfo p);
    public static string Collation(MemberInfo p);
    public static bool IsAutoInc(MemberInfo p);
    public static FieldInfo GetField(TypeInfo t, string name);
    public static PropertyInfo GetProperty(TypeInfo t, string name);
    public static object InflateAttribute(CustomAttributeData x);
    public static IEnumerable`1<IndexedAttribute> GetIndices(MemberInfo p);
    public static Nullable`1<int> MaxStringLength(MemberInfo p);
    public static Nullable`1<int> MaxStringLength(PropertyInfo p);
    public static bool IsMarkedNotNull(MemberInfo p);
}
internal class SQLite.PreparedSqlLiteInsertCommand : object {
    private bool Initialized;
    private SQLiteConnection Connection;
    private string CommandText;
    private sqlite3_stmt Statement;
    private static sqlite3_stmt NullStatement;
    public PreparedSqlLiteInsertCommand(SQLiteConnection conn, string commandText);
    public int ExecuteNonQuery(Object[] source);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class SQLite.PreserveAttribute : Attribute {
    public bool AllMembers;
    public bool Conditional;
}
[AttributeUsageAttribute("128")]
public class SQLite.PrimaryKeyAttribute : Attribute {
}
public static class SQLite.SQLite3 : object {
    private static string LibraryPath;
    public static Result Open(string filename, sqlite3& db);
    public static Result Open(string filename, sqlite3& db, int flags, string vfsName);
    public static Result Close(sqlite3 db);
    public static Result Close2(sqlite3 db);
    public static Result BusyTimeout(sqlite3 db, int milliseconds);
    public static int Changes(sqlite3 db);
    public static sqlite3_stmt Prepare2(sqlite3 db, string query);
    public static Result Step(sqlite3_stmt stmt);
    public static Result Reset(sqlite3_stmt stmt);
    public static Result Finalize(sqlite3_stmt stmt);
    public static long LastInsertRowid(sqlite3 db);
    public static string GetErrmsg(sqlite3 db);
    public static int BindParameterIndex(sqlite3_stmt stmt, string name);
    public static int BindNull(sqlite3_stmt stmt, int index);
    public static int BindInt(sqlite3_stmt stmt, int index, int val);
    public static int BindInt64(sqlite3_stmt stmt, int index, long val);
    public static int BindDouble(sqlite3_stmt stmt, int index, double val);
    public static int BindText(sqlite3_stmt stmt, int index, string val, int n, IntPtr free);
    public static int BindBlob(sqlite3_stmt stmt, int index, Byte[] val, int n, IntPtr free);
    public static int ColumnCount(sqlite3_stmt stmt);
    public static string ColumnName(sqlite3_stmt stmt, int index);
    public static string ColumnName16(sqlite3_stmt stmt, int index);
    public static ColType ColumnType(sqlite3_stmt stmt, int index);
    public static int ColumnInt(sqlite3_stmt stmt, int index);
    public static long ColumnInt64(sqlite3_stmt stmt, int index);
    public static double ColumnDouble(sqlite3_stmt stmt, int index);
    public static string ColumnText(sqlite3_stmt stmt, int index);
    public static string ColumnText16(sqlite3_stmt stmt, int index);
    public static Byte[] ColumnBlob(sqlite3_stmt stmt, int index);
    public static int ColumnBytes(sqlite3_stmt stmt, int index);
    public static string ColumnString(sqlite3_stmt stmt, int index);
    public static Byte[] ColumnByteArray(sqlite3_stmt stmt, int index);
    public static Result EnableLoadExtension(sqlite3 db, int onoff);
    public static int LibVersionNumber();
    public static Result GetResult(sqlite3 db);
    public static ExtendedResult ExtendedErrCode(sqlite3 db);
    public static sqlite3_backup BackupInit(sqlite3 destDb, string destName, sqlite3 sourceDb, string sourceName);
    public static Result BackupStep(sqlite3_backup backup, int numPages);
    public static Result BackupFinish(sqlite3_backup backup);
}
public class SQLite.SQLiteAsyncConnection : object {
    private SQLiteConnectionString _connectionString;
    public string DatabasePath { get; }
    public int LibVersionNumber { get; }
    public string DateTimeStringFormat { get; }
    public bool StoreDateTimeAsTicks { get; }
    public bool StoreTimeSpanAsTicks { get; }
    public bool Trace { get; public set; }
    public Action`1<string> Tracer { get; public set; }
    public bool TimeExecution { get; public set; }
    public IEnumerable`1<TableMapping> TableMappings { get; }
    public SQLiteAsyncConnection(string databasePath, bool storeDateTimeAsTicks);
    public SQLiteAsyncConnection(string databasePath, SQLiteOpenFlags openFlags, bool storeDateTimeAsTicks);
    public SQLiteAsyncConnection(SQLiteConnectionString connectionString);
    public sealed virtual string get_DatabasePath();
    public sealed virtual int get_LibVersionNumber();
    public sealed virtual string get_DateTimeStringFormat();
    public sealed virtual TimeSpan GetBusyTimeout();
    public sealed virtual Task SetBusyTimeoutAsync(TimeSpan value);
    public sealed virtual Task EnableWriteAheadLoggingAsync();
    public sealed virtual bool get_StoreDateTimeAsTicks();
    public sealed virtual bool get_StoreTimeSpanAsTicks();
    public sealed virtual bool get_Trace();
    public sealed virtual void set_Trace(bool value);
    public sealed virtual Action`1<string> get_Tracer();
    public sealed virtual void set_Tracer(Action`1<string> value);
    public sealed virtual bool get_TimeExecution();
    public sealed virtual void set_TimeExecution(bool value);
    public sealed virtual IEnumerable`1<TableMapping> get_TableMappings();
    public static void ResetPool();
    public sealed virtual SQLiteConnectionWithLock GetConnection();
    private SQLiteConnectionWithLock GetConnectionAndTransactionLock(Object& transactionLock);
    public sealed virtual Task CloseAsync();
    private Task`1<T> ReadAsync(Func`2<SQLiteConnectionWithLock, T> read);
    private Task`1<T> WriteAsync(Func`2<SQLiteConnectionWithLock, T> write);
    private Task`1<T> TransactAsync(Func`2<SQLiteConnectionWithLock, T> transact);
    public sealed virtual Task EnableLoadExtensionAsync(bool enabled);
    public sealed virtual Task`1<CreateTableResult> CreateTableAsync(CreateFlags createFlags);
    public sealed virtual Task`1<CreateTableResult> CreateTableAsync(Type ty, CreateFlags createFlags);
    public sealed virtual Task`1<CreateTablesResult> CreateTablesAsync(CreateFlags createFlags);
    public sealed virtual Task`1<CreateTablesResult> CreateTablesAsync(CreateFlags createFlags);
    public sealed virtual Task`1<CreateTablesResult> CreateTablesAsync(CreateFlags createFlags);
    public sealed virtual Task`1<CreateTablesResult> CreateTablesAsync(CreateFlags createFlags);
    public sealed virtual Task`1<CreateTablesResult> CreateTablesAsync(CreateFlags createFlags, Type[] types);
    public sealed virtual Task`1<int> DropTableAsync();
    public sealed virtual Task`1<int> DropTableAsync(TableMapping map);
    public sealed virtual Task`1<int> CreateIndexAsync(string tableName, string columnName, bool unique);
    public sealed virtual Task`1<int> CreateIndexAsync(string indexName, string tableName, string columnName, bool unique);
    public sealed virtual Task`1<int> CreateIndexAsync(string tableName, String[] columnNames, bool unique);
    public sealed virtual Task`1<int> CreateIndexAsync(string indexName, string tableName, String[] columnNames, bool unique);
    public sealed virtual Task`1<int> CreateIndexAsync(Expression`1<Func`2<T, object>> property, bool unique);
    public sealed virtual Task`1<int> InsertAsync(object obj);
    public sealed virtual Task`1<int> InsertAsync(object obj, Type objType);
    public sealed virtual Task`1<int> InsertAsync(object obj, string extra);
    public sealed virtual Task`1<int> InsertAsync(object obj, string extra, Type objType);
    public sealed virtual Task`1<int> InsertOrReplaceAsync(object obj);
    public sealed virtual Task`1<int> InsertOrReplaceAsync(object obj, Type objType);
    public sealed virtual Task`1<int> UpdateAsync(object obj);
    public sealed virtual Task`1<int> UpdateAsync(object obj, Type objType);
    public sealed virtual Task`1<int> UpdateAllAsync(IEnumerable objects, bool runInTransaction);
    public sealed virtual Task`1<int> DeleteAsync(object objectToDelete);
    public sealed virtual Task`1<int> DeleteAsync(object primaryKey);
    public sealed virtual Task`1<int> DeleteAsync(object primaryKey, TableMapping map);
    public sealed virtual Task`1<int> DeleteAllAsync();
    public sealed virtual Task`1<int> DeleteAllAsync(TableMapping map);
    public sealed virtual Task BackupAsync(string destinationDatabasePath, string databaseName);
    public sealed virtual Task`1<T> GetAsync(object pk);
    public sealed virtual Task`1<object> GetAsync(object pk, TableMapping map);
    public sealed virtual Task`1<T> GetAsync(Expression`1<Func`2<T, bool>> predicate);
    public sealed virtual Task`1<T> FindAsync(object pk);
    public sealed virtual Task`1<object> FindAsync(object pk, TableMapping map);
    public sealed virtual Task`1<T> FindAsync(Expression`1<Func`2<T, bool>> predicate);
    public sealed virtual Task`1<T> FindWithQueryAsync(string query, Object[] args);
    public sealed virtual Task`1<object> FindWithQueryAsync(TableMapping map, string query, Object[] args);
    public sealed virtual Task`1<TableMapping> GetMappingAsync(Type type, CreateFlags createFlags);
    public sealed virtual Task`1<TableMapping> GetMappingAsync(CreateFlags createFlags);
    public sealed virtual Task`1<List`1<ColumnInfo>> GetTableInfoAsync(string tableName);
    public sealed virtual Task`1<int> ExecuteAsync(string query, Object[] args);
    public sealed virtual Task`1<int> InsertAllAsync(IEnumerable objects, bool runInTransaction);
    public sealed virtual Task`1<int> InsertAllAsync(IEnumerable objects, string extra, bool runInTransaction);
    public sealed virtual Task`1<int> InsertAllAsync(IEnumerable objects, Type objType, bool runInTransaction);
    public sealed virtual Task RunInTransactionAsync(Action`1<SQLiteConnection> action);
    public sealed virtual AsyncTableQuery`1<T> Table();
    public sealed virtual Task`1<T> ExecuteScalarAsync(string query, Object[] args);
    public sealed virtual Task`1<List`1<T>> QueryAsync(string query, Object[] args);
    public sealed virtual Task`1<List`1<T>> QueryScalarsAsync(string query, Object[] args);
    public sealed virtual Task`1<List`1<object>> QueryAsync(TableMapping map, string query, Object[] args);
    public sealed virtual Task`1<IEnumerable`1<T>> DeferredQueryAsync(string query, Object[] args);
    public sealed virtual Task`1<IEnumerable`1<object>> DeferredQueryAsync(TableMapping map, string query, Object[] args);
    public sealed virtual Task ReKeyAsync(string key);
    public sealed virtual Task ReKeyAsync(Byte[] key);
    [CompilerGeneratedAttribute]
private void <CloseAsync>b__31_0();
}
public class SQLite.SQLiteCommand : object {
    private SQLiteConnection _conn;
    private List`1<Binding> _bindings;
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    private static IntPtr NegativePointer;
    public string CommandText { get; public set; }
    public SQLiteCommand(SQLiteConnection conn);
    private static SQLiteCommand();
    [CompilerGeneratedAttribute]
public string get_CommandText();
    [CompilerGeneratedAttribute]
public void set_CommandText(string value);
    public int ExecuteNonQuery();
    public IEnumerable`1<T> ExecuteDeferredQuery();
    public List`1<T> ExecuteQuery();
    public List`1<T> ExecuteQuery(TableMapping map);
    protected virtual void OnInstanceCreated(object obj);
    [IteratorStateMachineAttribute("SQLite.SQLiteCommand/<ExecuteDeferredQuery>d__12`1")]
public IEnumerable`1<T> ExecuteDeferredQuery(TableMapping map);
    public T ExecuteScalar();
    [IteratorStateMachineAttribute("SQLite.SQLiteCommand/<ExecuteQueryScalars>d__14`1")]
public IEnumerable`1<T> ExecuteQueryScalars();
    public void Bind(string name, object val);
    public void Bind(object val);
    public virtual string ToString();
    private sqlite3_stmt Prepare();
    private void Finalize(sqlite3_stmt stmt);
    private void BindAll(sqlite3_stmt stmt);
    internal static void BindParameter(sqlite3_stmt stmt, int index, object value, bool storeDateTimeAsTicks, string dateTimeStringFormat, bool storeTimeSpanAsTicks);
    private object ReadCol(sqlite3_stmt stmt, int index, ColType type, Type clrType);
}
[PreserveAttribute]
public class SQLite.SQLiteConnection : object {
    private bool _open;
    private TimeSpan _busyTimeout;
    private static Dictionary`2<string, TableMapping> _mappings;
    private Stopwatch _sw;
    private long _elapsedMilliseconds;
    private int _transactionDepth;
    private Random _rand;
    [CompilerGeneratedAttribute]
private sqlite3 <Handle>k__BackingField;
    private static sqlite3 NullHandle;
    private static sqlite3_backup NullBackupHandle;
    [CompilerGeneratedAttribute]
private string <DatabasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LibVersionNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TimeExecution>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Trace>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <Tracer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StoreDateTimeAsTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StoreTimeSpanAsTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DateTimeStringFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeStyles <DateTimeStyle>k__BackingField;
    private Dictionary`2<Tuple`2<string, string>, PreparedSqlLiteInsertCommand> _insertCommandMap;
    [CompilerGeneratedAttribute]
private EventHandler`1<NotifyTableChangedEventArgs> TableChanged;
    public sqlite3 Handle { get; private set; }
    public string DatabasePath { get; private set; }
    public int LibVersionNumber { get; private set; }
    public bool TimeExecution { get; public set; }
    public bool Trace { get; public set; }
    public Action`1<string> Tracer { get; public set; }
    public bool StoreDateTimeAsTicks { get; private set; }
    public bool StoreTimeSpanAsTicks { get; private set; }
    public string DateTimeStringFormat { get; private set; }
    internal DateTimeStyles DateTimeStyle { get; private set; }
    public TimeSpan BusyTimeout { get; public set; }
    public IEnumerable`1<TableMapping> TableMappings { get; }
    public bool IsInTransaction { get; }
    private static SQLiteConnection();
    public SQLiteConnection(string databasePath, bool storeDateTimeAsTicks);
    public SQLiteConnection(string databasePath, SQLiteOpenFlags openFlags, bool storeDateTimeAsTicks);
    public SQLiteConnection(SQLiteConnectionString connectionString);
    [CompilerGeneratedAttribute]
public sealed virtual sqlite3 get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(sqlite3 value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DatabasePath();
    [CompilerGeneratedAttribute]
private void set_DatabasePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LibVersionNumber();
    [CompilerGeneratedAttribute]
private void set_LibVersionNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_TimeExecution();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TimeExecution(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Trace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Trace(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<string> get_Tracer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tracer(Action`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_StoreDateTimeAsTicks();
    [CompilerGeneratedAttribute]
private void set_StoreDateTimeAsTicks(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_StoreTimeSpanAsTicks();
    [CompilerGeneratedAttribute]
private void set_StoreTimeSpanAsTicks(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DateTimeStringFormat();
    [CompilerGeneratedAttribute]
private void set_DateTimeStringFormat(string value);
    [CompilerGeneratedAttribute]
internal DateTimeStyles get_DateTimeStyle();
    [CompilerGeneratedAttribute]
private void set_DateTimeStyle(DateTimeStyles value);
    public sealed virtual void EnableWriteAheadLogging();
    private static string Quote(string unsafeString);
    private void SetKey(string key);
    private void SetKey(Byte[] key);
    public sealed virtual void ReKey(string key);
    public sealed virtual void ReKey(Byte[] key);
    public sealed virtual void EnableLoadExtension(bool enabled);
    public sealed virtual TimeSpan get_BusyTimeout();
    public sealed virtual void set_BusyTimeout(TimeSpan value);
    public sealed virtual IEnumerable`1<TableMapping> get_TableMappings();
    public sealed virtual TableMapping GetMapping(Type type, CreateFlags createFlags);
    public sealed virtual TableMapping GetMapping(CreateFlags createFlags);
    public sealed virtual int DropTable();
    public sealed virtual int DropTable(TableMapping map);
    public sealed virtual CreateTableResult CreateTable(CreateFlags createFlags);
    public sealed virtual CreateTableResult CreateTable(Type ty, CreateFlags createFlags);
    public sealed virtual CreateTablesResult CreateTables(CreateFlags createFlags);
    public sealed virtual CreateTablesResult CreateTables(CreateFlags createFlags);
    public sealed virtual CreateTablesResult CreateTables(CreateFlags createFlags);
    public sealed virtual CreateTablesResult CreateTables(CreateFlags createFlags);
    public sealed virtual CreateTablesResult CreateTables(CreateFlags createFlags, Type[] types);
    public sealed virtual int CreateIndex(string indexName, string tableName, String[] columnNames, bool unique);
    public sealed virtual int CreateIndex(string indexName, string tableName, string columnName, bool unique);
    public sealed virtual int CreateIndex(string tableName, string columnName, bool unique);
    public sealed virtual int CreateIndex(string tableName, String[] columnNames, bool unique);
    public sealed virtual int CreateIndex(Expression`1<Func`2<T, object>> property, bool unique);
    public sealed virtual List`1<ColumnInfo> GetTableInfo(string tableName);
    private void MigrateTable(TableMapping map, List`1<ColumnInfo> existingCols);
    protected virtual SQLiteCommand NewCommand();
    public sealed virtual SQLiteCommand CreateCommand(string cmdText, Object[] ps);
    public sealed virtual SQLiteCommand CreateCommand(string cmdText, Dictionary`2<string, object> args);
    public sealed virtual int Execute(string query, Object[] args);
    public sealed virtual T ExecuteScalar(string query, Object[] args);
    public sealed virtual List`1<T> Query(string query, Object[] args);
    public sealed virtual List`1<T> QueryScalars(string query, Object[] args);
    public sealed virtual IEnumerable`1<T> DeferredQuery(string query, Object[] args);
    public sealed virtual List`1<object> Query(TableMapping map, string query, Object[] args);
    public sealed virtual IEnumerable`1<object> DeferredQuery(TableMapping map, string query, Object[] args);
    public sealed virtual TableQuery`1<T> Table();
    public sealed virtual T Get(object pk);
    public sealed virtual object Get(object pk, TableMapping map);
    public sealed virtual T Get(Expression`1<Func`2<T, bool>> predicate);
    public sealed virtual T Find(object pk);
    public sealed virtual object Find(object pk, TableMapping map);
    public sealed virtual T Find(Expression`1<Func`2<T, bool>> predicate);
    public sealed virtual T FindWithQuery(string query, Object[] args);
    public sealed virtual object FindWithQuery(TableMapping map, string query, Object[] args);
    public sealed virtual bool get_IsInTransaction();
    public sealed virtual void BeginTransaction();
    public sealed virtual string SaveTransactionPoint();
    public sealed virtual void Rollback();
    public sealed virtual void RollbackTo(string savepoint);
    private void RollbackTo(string savepoint, bool noThrow);
    public sealed virtual void Release(string savepoint);
    private void DoSavePointExecute(string savepoint, string cmd);
    public sealed virtual void Commit();
    public sealed virtual void RunInTransaction(Action action);
    public sealed virtual int InsertAll(IEnumerable objects, bool runInTransaction);
    public sealed virtual int InsertAll(IEnumerable objects, string extra, bool runInTransaction);
    public sealed virtual int InsertAll(IEnumerable objects, Type objType, bool runInTransaction);
    public sealed virtual int Insert(object obj);
    public sealed virtual int InsertOrReplace(object obj);
    public sealed virtual int Insert(object obj, Type objType);
    public sealed virtual int InsertOrReplace(object obj, Type objType);
    public sealed virtual int Insert(object obj, string extra);
    public sealed virtual int Insert(object obj, string extra, Type objType);
    private PreparedSqlLiteInsertCommand GetInsertCommand(TableMapping map, string extra);
    private PreparedSqlLiteInsertCommand CreateInsertCommand(TableMapping map, string extra);
    public sealed virtual int Update(object obj);
    public sealed virtual int Update(object obj, Type objType);
    public sealed virtual int UpdateAll(IEnumerable objects, bool runInTransaction);
    public sealed virtual int Delete(object objectToDelete);
    public sealed virtual int Delete(object primaryKey);
    public sealed virtual int Delete(object primaryKey, TableMapping map);
    public sealed virtual int DeleteAll();
    public sealed virtual int DeleteAll(TableMapping map);
    public sealed virtual void Backup(string destinationDatabasePath, string databaseName);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public sealed virtual void Close();
    protected virtual void Dispose(bool disposing);
    private void OnTableChanged(TableMapping table, NotifyTableChangedAction action);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TableChanged(EventHandler`1<NotifyTableChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TableChanged(EventHandler`1<NotifyTableChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private string <CreateTable>b__72_0(Column p);
}
internal class SQLite.SQLiteConnectionPool : object {
    private Dictionary`2<string, Entry> _entries;
    private object _entriesLock;
    private static SQLiteConnectionPool _shared;
    public static SQLiteConnectionPool Shared { get; }
    private static SQLiteConnectionPool();
    public static SQLiteConnectionPool get_Shared();
    public SQLiteConnectionWithLock GetConnection(SQLiteConnectionString connectionString);
    public SQLiteConnectionWithLock GetConnectionAndTransactionLock(SQLiteConnectionString connectionString, Object& transactionLock);
    public void CloseConnection(SQLiteConnectionString connectionString);
    public void Reset();
}
public class SQLite.SQLiteConnectionString : object {
    private static string DateTimeSqliteDefaultFormat;
    [CompilerGeneratedAttribute]
private string <UniqueKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StoreDateTimeAsTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StoreTimeSpanAsTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DateTimeStringFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeStyles <DateTimeStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private SQLiteOpenFlags <OpenFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<SQLiteConnection> <PreKeyAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<SQLiteConnection> <PostKeyAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VfsName>k__BackingField;
    public string UniqueKey { get; }
    public string DatabasePath { get; }
    public bool StoreDateTimeAsTicks { get; }
    public bool StoreTimeSpanAsTicks { get; }
    public string DateTimeStringFormat { get; }
    public DateTimeStyles DateTimeStyle { get; }
    public object Key { get; }
    public SQLiteOpenFlags OpenFlags { get; }
    public Action`1<SQLiteConnection> PreKeyAction { get; }
    public Action`1<SQLiteConnection> PostKeyAction { get; }
    public string VfsName { get; }
    public SQLiteConnectionString(string databasePath, bool storeDateTimeAsTicks);
    public SQLiteConnectionString(string databasePath, bool storeDateTimeAsTicks, object key, Action`1<SQLiteConnection> preKeyAction, Action`1<SQLiteConnection> postKeyAction, string vfsName);
    public SQLiteConnectionString(string databasePath, SQLiteOpenFlags openFlags, bool storeDateTimeAsTicks, object key, Action`1<SQLiteConnection> preKeyAction, Action`1<SQLiteConnection> postKeyAction, string vfsName, string dateTimeStringFormat, bool storeTimeSpanAsTicks);
    [CompilerGeneratedAttribute]
public string get_UniqueKey();
    [CompilerGeneratedAttribute]
public string get_DatabasePath();
    [CompilerGeneratedAttribute]
public bool get_StoreDateTimeAsTicks();
    [CompilerGeneratedAttribute]
public bool get_StoreTimeSpanAsTicks();
    [CompilerGeneratedAttribute]
public string get_DateTimeStringFormat();
    [CompilerGeneratedAttribute]
public DateTimeStyles get_DateTimeStyle();
    [CompilerGeneratedAttribute]
public object get_Key();
    [CompilerGeneratedAttribute]
public SQLiteOpenFlags get_OpenFlags();
    [CompilerGeneratedAttribute]
public Action`1<SQLiteConnection> get_PreKeyAction();
    [CompilerGeneratedAttribute]
public Action`1<SQLiteConnection> get_PostKeyAction();
    [CompilerGeneratedAttribute]
public string get_VfsName();
}
public class SQLite.SQLiteConnectionWithLock : SQLiteConnection {
    private object _lockPoint;
    [CompilerGeneratedAttribute]
private bool <SkipLock>k__BackingField;
    public bool SkipLock { get; public set; }
    public SQLiteConnectionWithLock(SQLiteConnectionString connectionString);
    [CompilerGeneratedAttribute]
public bool get_SkipLock();
    [CompilerGeneratedAttribute]
public void set_SkipLock(bool value);
    public IDisposable Lock();
}
public class SQLite.SQLiteException : Exception {
    [CompilerGeneratedAttribute]
private Result <Result>k__BackingField;
    public Result Result { get; private set; }
    protected SQLiteException(Result r, string message);
    [CompilerGeneratedAttribute]
public Result get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(Result value);
    public static SQLiteException New(Result r, string message);
}
[FlagsAttribute]
public enum SQLite.SQLiteOpenFlags : Enum {
    public int value__;
    public static SQLiteOpenFlags ReadOnly;
    public static SQLiteOpenFlags ReadWrite;
    public static SQLiteOpenFlags Create;
    public static SQLiteOpenFlags Uri;
    public static SQLiteOpenFlags Memory;
    public static SQLiteOpenFlags NoMutex;
    public static SQLiteOpenFlags FullMutex;
    public static SQLiteOpenFlags SharedCache;
    public static SQLiteOpenFlags PrivateCache;
    public static SQLiteOpenFlags ProtectionComplete;
    public static SQLiteOpenFlags ProtectionCompleteUnlessOpen;
    public static SQLiteOpenFlags ProtectionCompleteUntilFirstUserAuthentication;
    public static SQLiteOpenFlags ProtectionNone;
}
[AttributeUsageAttribute("16")]
public class SQLite.StoreAsTextAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class SQLite.TableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithoutRowId>k__BackingField;
    public string Name { get; public set; }
    public bool WithoutRowId { get; public set; }
    public TableAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_WithoutRowId();
    [CompilerGeneratedAttribute]
public void set_WithoutRowId(bool value);
}
public class SQLite.TableMapping : object {
    [CompilerGeneratedAttribute]
private Type <MappedType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithoutRowId>k__BackingField;
    [CompilerGeneratedAttribute]
private Column[] <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private Column <PK>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetByPrimaryKeySql>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateFlags <CreateFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private MapMethod <Method>k__BackingField;
    private Column _autoPk;
    private Column[] _insertColumns;
    private Column[] _insertOrReplaceColumns;
    [CompilerGeneratedAttribute]
private bool <HasAutoIncPK>k__BackingField;
    public Type MappedType { get; private set; }
    public string TableName { get; private set; }
    public bool WithoutRowId { get; private set; }
    public Column[] Columns { get; private set; }
    public Column PK { get; private set; }
    public string GetByPrimaryKeySql { get; private set; }
    public CreateFlags CreateFlags { get; private set; }
    internal MapMethod Method { get; private set; }
    public bool HasAutoIncPK { get; private set; }
    public Column[] InsertColumns { get; }
    public Column[] InsertOrReplaceColumns { get; }
    public TableMapping(Type type, CreateFlags createFlags);
    [CompilerGeneratedAttribute]
public Type get_MappedType();
    [CompilerGeneratedAttribute]
private void set_MappedType(Type value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
private void set_TableName(string value);
    [CompilerGeneratedAttribute]
public bool get_WithoutRowId();
    [CompilerGeneratedAttribute]
private void set_WithoutRowId(bool value);
    [CompilerGeneratedAttribute]
public Column[] get_Columns();
    [CompilerGeneratedAttribute]
private void set_Columns(Column[] value);
    [CompilerGeneratedAttribute]
public Column get_PK();
    [CompilerGeneratedAttribute]
private void set_PK(Column value);
    [CompilerGeneratedAttribute]
public string get_GetByPrimaryKeySql();
    [CompilerGeneratedAttribute]
private void set_GetByPrimaryKeySql(string value);
    [CompilerGeneratedAttribute]
public CreateFlags get_CreateFlags();
    [CompilerGeneratedAttribute]
private void set_CreateFlags(CreateFlags value);
    [CompilerGeneratedAttribute]
internal MapMethod get_Method();
    [CompilerGeneratedAttribute]
private void set_Method(MapMethod value);
    private IReadOnlyCollection`1<MemberInfo> GetPublicMembers(Type type);
    private IReadOnlyCollection`1<MemberInfo> GetFieldsFromValueTuple(Type type);
    [CompilerGeneratedAttribute]
public bool get_HasAutoIncPK();
    [CompilerGeneratedAttribute]
private void set_HasAutoIncPK(bool value);
    public void SetAutoIncPK(object obj, long id);
    public Column[] get_InsertColumns();
    public Column[] get_InsertOrReplaceColumns();
    public Column FindColumnWithPropertyName(string propertyName);
    public Column FindColumn(string columnName);
}
public class SQLite.TableQuery`1 : BaseTableQuery {
    [CompilerGeneratedAttribute]
private SQLiteConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private TableMapping <Table>k__BackingField;
    private Expression _where;
    private List`1<Ordering> _orderBys;
    private Nullable`1<int> _limit;
    private Nullable`1<int> _offset;
    private BaseTableQuery _joinInner;
    private Expression _joinInnerKeySelector;
    private BaseTableQuery _joinOuter;
    private Expression _joinOuterKeySelector;
    private Expression _joinSelector;
    private Expression _selector;
    private bool _deferred;
    public SQLiteConnection Connection { get; private set; }
    public TableMapping Table { get; private set; }
    private TableQuery`1(SQLiteConnection conn, TableMapping table);
    public TableQuery`1(SQLiteConnection conn);
    [CompilerGeneratedAttribute]
public SQLiteConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(SQLiteConnection value);
    [CompilerGeneratedAttribute]
public TableMapping get_Table();
    [CompilerGeneratedAttribute]
private void set_Table(TableMapping value);
    public TableQuery`1<U> Clone();
    public TableQuery`1<T> Where(Expression`1<Func`2<T, bool>> predExpr);
    public int Delete();
    public int Delete(Expression`1<Func`2<T, bool>> predExpr);
    public TableQuery`1<T> Take(int n);
    public TableQuery`1<T> Skip(int n);
    public T ElementAt(int index);
    public TableQuery`1<T> Deferred();
    public TableQuery`1<T> OrderBy(Expression`1<Func`2<T, U>> orderExpr);
    public TableQuery`1<T> OrderByDescending(Expression`1<Func`2<T, U>> orderExpr);
    public TableQuery`1<T> ThenBy(Expression`1<Func`2<T, U>> orderExpr);
    public TableQuery`1<T> ThenByDescending(Expression`1<Func`2<T, U>> orderExpr);
    private TableQuery`1<T> AddOrderBy(Expression`1<Func`2<T, U>> orderExpr, bool asc);
    private void AddWhere(Expression pred);
    private SQLiteCommand GenerateCommand(string selectionList);
    private CompileResult<T> CompileExpr(Expression expr, List`1<object> queryArgs);
    private static object ConvertTo(object obj, Type t);
    private string CompileNullBinaryExpression(BinaryExpression expression, CompileResult<T> parameter);
    private string GetSqlName(Expression expr);
    public int Count();
    public int Count(Expression`1<Func`2<T, bool>> predExpr);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public List`1<T> ToList();
    public T[] ToArray();
    public T First();
    public T FirstOrDefault();
    public T First(Expression`1<Func`2<T, bool>> predExpr);
    public T FirstOrDefault(Expression`1<Func`2<T, bool>> predExpr);
}
[AttributeUsageAttribute("128")]
public class SQLite.UniqueAttribute : IndexedAttribute {
    public bool Unique { get; public set; }
    public virtual bool get_Unique();
    public virtual void set_Unique(bool value);
}
