[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class SQLitePCL.authorizer_hook_info : object {
    private delegate_authorizer _func;
    private object _user_data;
    public authorizer_hook_info(delegate_authorizer func, object v);
    public static authorizer_hook_info from_ptr(IntPtr p);
    public int call(int action_code, utf8z param0, utf8z param1, utf8z dbName, utf8z inner_most_trigger_or_view);
}
public class SQLitePCL.collation_hook_info : object {
    private delegate_collation _func;
    private object _user_data;
    public collation_hook_info(delegate_collation func, object v);
    public static collation_hook_info from_ptr(IntPtr p);
    public int call(ReadOnlySpan`1<byte> s1, ReadOnlySpan`1<byte> s2);
}
public class SQLitePCL.commit_hook_info : object {
    [CompilerGeneratedAttribute]
private delegate_commit <_func>k__BackingField;
    [CompilerGeneratedAttribute]
private object <_user_data>k__BackingField;
    public delegate_commit _func { get; private set; }
    public object _user_data { get; private set; }
    public commit_hook_info(delegate_commit func, object v);
    [CompilerGeneratedAttribute]
public delegate_commit get__func();
    [CompilerGeneratedAttribute]
private void set__func(delegate_commit value);
    [CompilerGeneratedAttribute]
public object get__user_data();
    [CompilerGeneratedAttribute]
private void set__user_data(object value);
    public int call();
    public static commit_hook_info from_ptr(IntPtr p);
}
internal class SQLitePCL.CompareBuf : EqualityComparer`1<Byte[]> {
    private Func`4<IntPtr, IntPtr, int, bool> _f;
    public CompareBuf(Func`4<IntPtr, IntPtr, int, bool> f);
    public virtual bool Equals(Byte[] p1, Byte[] p2);
    public virtual int GetHashCode(Byte[] p);
}
internal class SQLitePCL.CompareFuncName : EqualityComparer`1<FuncName> {
    private IEqualityComparer`1<Byte[]> _ptrlencmp;
    public CompareFuncName(IEqualityComparer`1<Byte[]> ptrlencmp);
    public virtual bool Equals(FuncName p1, FuncName p2);
    public virtual int GetHashCode(FuncName p);
}
public class SQLitePCL.delegate_authorizer : MulticastDelegate {
    public delegate_authorizer(object object, IntPtr method);
    public virtual int Invoke(object user_data, int action_code, utf8z param0, utf8z param1, utf8z dbName, utf8z inner_most_trigger_or_view);
    public virtual IAsyncResult BeginInvoke(object user_data, int action_code, utf8z param0, utf8z param1, utf8z dbName, utf8z inner_most_trigger_or_view, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_collation : MulticastDelegate {
    public delegate_collation(object object, IntPtr method);
    public virtual int Invoke(object user_data, ReadOnlySpan`1<byte> s1, ReadOnlySpan`1<byte> s2);
    public virtual IAsyncResult BeginInvoke(object user_data, ReadOnlySpan`1<byte> s1, ReadOnlySpan`1<byte> s2, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_commit : MulticastDelegate {
    public delegate_commit(object object, IntPtr method);
    public virtual int Invoke(object user_data);
    public virtual IAsyncResult BeginInvoke(object user_data, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_exec : MulticastDelegate {
    public delegate_exec(object object, IntPtr method);
    public virtual int Invoke(object user_data, IntPtr[] values, IntPtr[] names);
    public virtual IAsyncResult BeginInvoke(object user_data, IntPtr[] values, IntPtr[] names, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_function_aggregate_final : MulticastDelegate {
    public delegate_function_aggregate_final(object object, IntPtr method);
    public virtual void Invoke(sqlite3_context ctx, object user_data);
    public virtual IAsyncResult BeginInvoke(sqlite3_context ctx, object user_data, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_function_aggregate_step : MulticastDelegate {
    public delegate_function_aggregate_step(object object, IntPtr method);
    public virtual void Invoke(sqlite3_context ctx, object user_data, sqlite3_value[] args);
    public virtual IAsyncResult BeginInvoke(sqlite3_context ctx, object user_data, sqlite3_value[] args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_function_scalar : MulticastDelegate {
    public delegate_function_scalar(object object, IntPtr method);
    public virtual void Invoke(sqlite3_context ctx, object user_data, sqlite3_value[] args);
    public virtual IAsyncResult BeginInvoke(sqlite3_context ctx, object user_data, sqlite3_value[] args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_log : MulticastDelegate {
    public delegate_log(object object, IntPtr method);
    public virtual void Invoke(object user_data, int errorCode, utf8z msg);
    public virtual IAsyncResult BeginInvoke(object user_data, int errorCode, utf8z msg, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_profile : MulticastDelegate {
    public delegate_profile(object object, IntPtr method);
    public virtual void Invoke(object user_data, utf8z statement, long ns);
    public virtual IAsyncResult BeginInvoke(object user_data, utf8z statement, long ns, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_progress : MulticastDelegate {
    public delegate_progress(object object, IntPtr method);
    public virtual int Invoke(object user_data);
    public virtual IAsyncResult BeginInvoke(object user_data, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_rollback : MulticastDelegate {
    public delegate_rollback(object object, IntPtr method);
    public virtual void Invoke(object user_data);
    public virtual IAsyncResult BeginInvoke(object user_data, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_trace : MulticastDelegate {
    public delegate_trace(object object, IntPtr method);
    public virtual void Invoke(object user_data, utf8z statement);
    public virtual IAsyncResult BeginInvoke(object user_data, utf8z statement, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_update : MulticastDelegate {
    public delegate_update(object object, IntPtr method);
    public virtual void Invoke(object user_data, int type, utf8z database, utf8z table, long rowid);
    public virtual IAsyncResult BeginInvoke(object user_data, int type, utf8z database, utf8z table, long rowid, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.EntryPointAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public EntryPointAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
public class SQLitePCL.exec_hook_info : object {
    private delegate_exec _func;
    private object _user_data;
    public exec_hook_info(delegate_exec func, object v);
    public static exec_hook_info from_ptr(IntPtr p);
    public int call(int n, IntPtr values_ptr, IntPtr names_ptr);
}
internal class SQLitePCL.FuncName : object {
    [CompilerGeneratedAttribute]
private Byte[] <name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <n>k__BackingField;
    public Byte[] name { get; private set; }
    public int n { get; private set; }
    public FuncName(Byte[] _name, int _n);
    [CompilerGeneratedAttribute]
public Byte[] get_name();
    [CompilerGeneratedAttribute]
private void set_name(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_n();
    [CompilerGeneratedAttribute]
private void set_n(int value);
}
public class SQLitePCL.function_hook_info : object {
    private delegate_function_scalar _func_scalar;
    private delegate_function_aggregate_step _func_step;
    private delegate_function_aggregate_final _func_final;
    private object _user_data;
    public function_hook_info(delegate_function_scalar func_scalar, object user_data);
    public function_hook_info(delegate_function_aggregate_step func_step, delegate_function_aggregate_final func_final, object user_data);
    public static function_hook_info from_ptr(IntPtr p);
    private sqlite3_context get_context(IntPtr context, IntPtr agg_context);
    public void call_scalar(IntPtr context, int num_args, IntPtr argsptr);
    public void call_step(IntPtr context, IntPtr agg_context, int num_args, IntPtr argsptr);
    public void call_final(IntPtr context, IntPtr agg_context);
}
public class SQLitePCL.hook_handle : SafeGCHandle {
    public hook_handle(object target);
    public IDisposable ForDispose();
}
public class SQLitePCL.hook_handles : object {
    private ConcurrentDictionary`2<Byte[], IDisposable> collation;
    private ConcurrentDictionary`2<FuncName, IDisposable> scalar;
    private ConcurrentDictionary`2<FuncName, IDisposable> agg;
    public IDisposable update;
    public IDisposable rollback;
    public IDisposable commit;
    public IDisposable trace;
    public IDisposable profile;
    public IDisposable progress;
    public IDisposable authorizer;
    public hook_handles(Func`4<IntPtr, IntPtr, int, bool> f);
    public bool RemoveScalarFunction(Byte[] name, int nargs);
    public void AddScalarFunction(Byte[] name, int nargs, IDisposable d);
    public bool RemoveAggFunction(Byte[] name, int nargs);
    public void AddAggFunction(Byte[] name, int nargs, IDisposable d);
    public bool RemoveCollation(Byte[] name);
    public void AddCollation(Byte[] name, IDisposable d);
    public sealed virtual void Dispose();
}
public interface SQLitePCL.IGetFunctionPointer {
    public abstract virtual IntPtr GetFunctionPointer(string name);
}
public interface SQLitePCL.ISQLite3Provider {
    public abstract virtual string GetNativeLibraryName();
    public abstract virtual int sqlite3_open(utf8z filename, IntPtr& db);
    public abstract virtual int sqlite3_open_v2(utf8z filename, IntPtr& db, int flags, utf8z vfs);
    public abstract virtual int sqlite3_close_v2(IntPtr db);
    public abstract virtual int sqlite3_close(IntPtr db);
    public abstract virtual int sqlite3_enable_shared_cache(int enable);
    public abstract virtual void sqlite3_interrupt(sqlite3 db);
    public abstract virtual int sqlite3__vfs__delete(utf8z vfs, utf8z pathname, int syncDir);
    public abstract virtual int sqlite3_threadsafe();
    public abstract virtual utf8z sqlite3_libversion();
    public abstract virtual int sqlite3_libversion_number();
    public abstract virtual utf8z sqlite3_sourceid();
    public abstract virtual long sqlite3_memory_used();
    public abstract virtual long sqlite3_memory_highwater(int resetFlag);
    public abstract virtual long sqlite3_soft_heap_limit64(long n);
    public abstract virtual long sqlite3_hard_heap_limit64(long n);
    public abstract virtual int sqlite3_status(int op, Int32& current, Int32& highwater, int resetFlag);
    public abstract virtual int sqlite3_db_readonly(sqlite3 db, utf8z dbName);
    public abstract virtual utf8z sqlite3_db_filename(sqlite3 db, utf8z att);
    public abstract virtual utf8z sqlite3_errmsg(sqlite3 db);
    public abstract virtual long sqlite3_last_insert_rowid(sqlite3 db);
    public abstract virtual int sqlite3_changes(sqlite3 db);
    public abstract virtual int sqlite3_total_changes(sqlite3 db);
    public abstract virtual int sqlite3_get_autocommit(sqlite3 db);
    public abstract virtual int sqlite3_busy_timeout(sqlite3 db, int ms);
    public abstract virtual int sqlite3_extended_result_codes(sqlite3 db, int onoff);
    public abstract virtual int sqlite3_errcode(sqlite3 db);
    public abstract virtual int sqlite3_extended_errcode(sqlite3 db);
    public abstract virtual utf8z sqlite3_errstr(int rc);
    public abstract virtual int sqlite3_prepare_v2(sqlite3 db, ReadOnlySpan`1<byte> sql, IntPtr& stmt, ReadOnlySpan`1& remain);
    public abstract virtual int sqlite3_prepare_v3(sqlite3 db, ReadOnlySpan`1<byte> sql, UInt32 flags, IntPtr& stmt, ReadOnlySpan`1& remain);
    [ObsoleteAttribute]
public abstract virtual int sqlite3_prepare_v2(sqlite3 db, utf8z sql, IntPtr& stmt, utf8z& remain);
    [ObsoleteAttribute]
public abstract virtual int sqlite3_prepare_v3(sqlite3 db, utf8z sql, UInt32 flags, IntPtr& stmt, utf8z& remain);
    public abstract virtual int sqlite3_step(sqlite3_stmt stmt);
    public abstract virtual int sqlite3_finalize(IntPtr stmt);
    public abstract virtual int sqlite3_reset(sqlite3_stmt stmt);
    public abstract virtual int sqlite3_clear_bindings(sqlite3_stmt stmt);
    public abstract virtual int sqlite3_stmt_status(sqlite3_stmt stmt, int op, int resetFlg);
    public abstract virtual utf8z sqlite3_sql(sqlite3_stmt stmt);
    public abstract virtual IntPtr sqlite3_db_handle(IntPtr stmt);
    public abstract virtual IntPtr sqlite3_next_stmt(sqlite3 db, IntPtr stmt);
    public abstract virtual int sqlite3_bind_zeroblob(sqlite3_stmt stmt, int index, int size);
    public abstract virtual utf8z sqlite3_bind_parameter_name(sqlite3_stmt stmt, int index);
    public abstract virtual int sqlite3_bind_blob(sqlite3_stmt stmt, int index, ReadOnlySpan`1<byte> blob);
    public abstract virtual int sqlite3_bind_double(sqlite3_stmt stmt, int index, double val);
    public abstract virtual int sqlite3_bind_int(sqlite3_stmt stmt, int index, int val);
    public abstract virtual int sqlite3_bind_int64(sqlite3_stmt stmt, int index, long val);
    public abstract virtual int sqlite3_bind_null(sqlite3_stmt stmt, int index);
    public abstract virtual int sqlite3_bind_text(sqlite3_stmt stmt, int index, ReadOnlySpan`1<byte> text);
    public abstract virtual int sqlite3_bind_text16(sqlite3_stmt stmt, int index, ReadOnlySpan`1<char> text);
    public abstract virtual int sqlite3_bind_text(sqlite3_stmt stmt, int index, utf8z text);
    public abstract virtual int sqlite3_bind_parameter_count(sqlite3_stmt stmt);
    public abstract virtual int sqlite3_bind_parameter_index(sqlite3_stmt stmt, utf8z strName);
    public abstract virtual utf8z sqlite3_column_database_name(sqlite3_stmt stmt, int index);
    public abstract virtual utf8z sqlite3_column_name(sqlite3_stmt stmt, int index);
    public abstract virtual utf8z sqlite3_column_origin_name(sqlite3_stmt stmt, int index);
    public abstract virtual utf8z sqlite3_column_table_name(sqlite3_stmt stmt, int index);
    public abstract virtual utf8z sqlite3_column_text(sqlite3_stmt stmt, int index);
    public abstract virtual int sqlite3_data_count(sqlite3_stmt stmt);
    public abstract virtual int sqlite3_column_count(sqlite3_stmt stmt);
    public abstract virtual double sqlite3_column_double(sqlite3_stmt stmt, int index);
    public abstract virtual int sqlite3_column_int(sqlite3_stmt stmt, int index);
    public abstract virtual long sqlite3_column_int64(sqlite3_stmt stmt, int index);
    public abstract virtual ReadOnlySpan`1<byte> sqlite3_column_blob(sqlite3_stmt stmt, int index);
    public abstract virtual int sqlite3_column_bytes(sqlite3_stmt stmt, int index);
    public abstract virtual int sqlite3_column_type(sqlite3_stmt stmt, int index);
    public abstract virtual utf8z sqlite3_column_decltype(sqlite3_stmt stmt, int index);
    public abstract virtual int sqlite3_snapshot_get(sqlite3 db, utf8z schema, IntPtr& snap);
    public abstract virtual int sqlite3_snapshot_cmp(sqlite3_snapshot p1, sqlite3_snapshot p2);
    public abstract virtual int sqlite3_snapshot_open(sqlite3 db, utf8z schema, sqlite3_snapshot snap);
    public abstract virtual int sqlite3_snapshot_recover(sqlite3 db, utf8z name);
    public abstract virtual void sqlite3_snapshot_free(IntPtr snap);
    public abstract virtual sqlite3_backup sqlite3_backup_init(sqlite3 destDb, utf8z destName, sqlite3 sourceDb, utf8z sourceName);
    public abstract virtual int sqlite3_backup_step(sqlite3_backup backup, int nPage);
    public abstract virtual int sqlite3_backup_remaining(sqlite3_backup backup);
    public abstract virtual int sqlite3_backup_pagecount(sqlite3_backup backup);
    public abstract virtual int sqlite3_backup_finish(IntPtr backup);
    public abstract virtual int sqlite3_blob_open(sqlite3 db, utf8z db_utf8, utf8z table_utf8, utf8z col_utf8, long rowid, int flags, sqlite3_blob& blob);
    public abstract virtual int sqlite3_blob_bytes(sqlite3_blob blob);
    public abstract virtual int sqlite3_blob_reopen(sqlite3_blob blob, long rowid);
    public abstract virtual int sqlite3_blob_write(sqlite3_blob blob, ReadOnlySpan`1<byte> b, int offset);
    public abstract virtual int sqlite3_blob_read(sqlite3_blob blob, Span`1<byte> b, int offset);
    public abstract virtual int sqlite3_blob_close(IntPtr blob);
    public abstract virtual int sqlite3_config_log(delegate_log func, object v);
    public abstract virtual void sqlite3_log(int errcode, utf8z s);
    public abstract virtual void sqlite3_commit_hook(sqlite3 db, delegate_commit func, object v);
    public abstract virtual void sqlite3_rollback_hook(sqlite3 db, delegate_rollback func, object v);
    public abstract virtual void sqlite3_trace(sqlite3 db, delegate_trace func, object v);
    public abstract virtual void sqlite3_profile(sqlite3 db, delegate_profile func, object v);
    public abstract virtual void sqlite3_progress_handler(sqlite3 db, int instructions, delegate_progress func, object v);
    public abstract virtual void sqlite3_update_hook(sqlite3 db, delegate_update func, object v);
    public abstract virtual int sqlite3_create_collation(sqlite3 db, Byte[] name, object v, delegate_collation func);
    public abstract virtual int sqlite3_create_function(sqlite3 db, Byte[] name, int nArg, int flags, object v, delegate_function_scalar func);
    public abstract virtual int sqlite3_create_function(sqlite3 db, Byte[] name, int nArg, int flags, object v, delegate_function_aggregate_step func_step, delegate_function_aggregate_final func_final);
    public abstract virtual int sqlite3_db_status(sqlite3 db, int op, Int32& current, Int32& highest, int resetFlg);
    public abstract virtual void sqlite3_result_blob(IntPtr context, ReadOnlySpan`1<byte> val);
    public abstract virtual void sqlite3_result_double(IntPtr context, double val);
    public abstract virtual void sqlite3_result_error(IntPtr context, ReadOnlySpan`1<byte> strErr);
    public abstract virtual void sqlite3_result_error(IntPtr context, utf8z strErr);
    public abstract virtual void sqlite3_result_int(IntPtr context, int val);
    public abstract virtual void sqlite3_result_int64(IntPtr context, long val);
    public abstract virtual void sqlite3_result_null(IntPtr context);
    public abstract virtual void sqlite3_result_text(IntPtr context, ReadOnlySpan`1<byte> val);
    public abstract virtual void sqlite3_result_text(IntPtr context, utf8z val);
    public abstract virtual void sqlite3_result_zeroblob(IntPtr context, int n);
    public abstract virtual void sqlite3_result_error_toobig(IntPtr context);
    public abstract virtual void sqlite3_result_error_nomem(IntPtr context);
    public abstract virtual void sqlite3_result_error_code(IntPtr context, int code);
    public abstract virtual ReadOnlySpan`1<byte> sqlite3_value_blob(IntPtr p);
    public abstract virtual int sqlite3_value_bytes(IntPtr p);
    public abstract virtual double sqlite3_value_double(IntPtr p);
    public abstract virtual int sqlite3_value_int(IntPtr p);
    public abstract virtual long sqlite3_value_int64(IntPtr p);
    public abstract virtual int sqlite3_value_type(IntPtr p);
    public abstract virtual utf8z sqlite3_value_text(IntPtr p);
    public abstract virtual int sqlite3_stmt_isexplain(sqlite3_stmt stmt);
    public abstract virtual int sqlite3_stmt_busy(sqlite3_stmt stmt);
    public abstract virtual int sqlite3_stmt_readonly(sqlite3_stmt stmt);
    public abstract virtual int sqlite3_exec(sqlite3 db, utf8z sql, delegate_exec callback, object user_data, IntPtr& errMsg);
    public abstract virtual int sqlite3_complete(utf8z sql);
    public abstract virtual int sqlite3_compileoption_used(utf8z sql);
    public abstract virtual utf8z sqlite3_compileoption_get(int n);
    public abstract virtual int sqlite3_wal_autocheckpoint(sqlite3 db, int n);
    public abstract virtual int sqlite3_wal_checkpoint(sqlite3 db, utf8z dbName);
    public abstract virtual int sqlite3_wal_checkpoint_v2(sqlite3 db, utf8z dbName, int eMode, Int32& logSize, Int32& framesCheckPointed);
    public abstract virtual int sqlite3_table_column_metadata(sqlite3 db, utf8z dbName, utf8z tblName, utf8z colName, utf8z& dataType, utf8z& collSeq, Int32& notNull, Int32& primaryKey, Int32& autoInc);
    public abstract virtual int sqlite3_set_authorizer(sqlite3 db, delegate_authorizer authorizer, object user_data);
    public abstract virtual int sqlite3_stricmp(IntPtr p, IntPtr q);
    public abstract virtual int sqlite3_strnicmp(IntPtr p, IntPtr q, int n);
    public abstract virtual IntPtr sqlite3_malloc(int n);
    public abstract virtual IntPtr sqlite3_malloc64(long n);
    public abstract virtual void sqlite3_free(IntPtr p);
    public abstract virtual int sqlite3_key(sqlite3 db, ReadOnlySpan`1<byte> key);
    public abstract virtual int sqlite3_key_v2(sqlite3 db, utf8z dbname, ReadOnlySpan`1<byte> key);
    public abstract virtual int sqlite3_rekey(sqlite3 db, ReadOnlySpan`1<byte> key);
    public abstract virtual int sqlite3_rekey_v2(sqlite3 db, utf8z dbname, ReadOnlySpan`1<byte> key);
    public abstract virtual int sqlite3_load_extension(sqlite3 db, utf8z zFile, utf8z zProc, utf8z& pzErrMsg);
    public abstract virtual int sqlite3_initialize();
    public abstract virtual int sqlite3_shutdown();
    public abstract virtual int sqlite3_limit(sqlite3 db, int id, int newVal);
    public abstract virtual int sqlite3_config(int op);
    public abstract virtual int sqlite3_config(int op, int val);
    public abstract virtual int sqlite3_db_config(sqlite3 db, int op, utf8z val);
    public abstract virtual int sqlite3_db_config(sqlite3 db, int op, int val, Int32& result);
    public abstract virtual int sqlite3_db_config(sqlite3 db, int op, IntPtr ptr, int int0, int int1);
    public abstract virtual int sqlite3_enable_load_extension(sqlite3 db, int enable);
    public abstract virtual int sqlite3_win32_set_directory(int typ, utf8z path);
    public abstract virtual int sqlite3_keyword_count();
    public abstract virtual int sqlite3_keyword_name(int i, String& name);
    public abstract virtual IntPtr sqlite3_serialize(sqlite3 db, utf8z schema, Int64& size, int flags);
    public abstract virtual int sqlite3_deserialize(sqlite3 db, utf8z schema, IntPtr data, long szDb, long szBuf, int flags);
}
public class SQLitePCL.log_hook_info : object {
    private delegate_log _func;
    private object _user_data;
    public log_hook_info(delegate_log func, object v);
    public static log_hook_info from_ptr(IntPtr p);
    public void call(int rc, utf8z msg);
}
public class SQLitePCL.MonoPInvokeCallbackAttribute : Attribute {
    public MonoPInvokeCallbackAttribute(Type t);
}
public class SQLitePCL.PreserveAttribute : Attribute {
    public bool AllMembers;
    public bool Conditional;
}
public class SQLitePCL.profile_hook_info : object {
    private delegate_profile _func;
    private object _user_data;
    public profile_hook_info(delegate_profile func, object v);
    public static profile_hook_info from_ptr(IntPtr p);
    public void call(utf8z s, long elapsed);
}
public class SQLitePCL.progress_hook_info : object {
    private delegate_progress _func;
    private object _user_data;
    public progress_hook_info(delegate_progress func, object v);
    public static progress_hook_info from_ptr(IntPtr p);
    public int call();
}
[ExtensionAttribute]
public static class SQLitePCL.raw : object {
    private static ISQLite3Provider _imp;
    private static bool _frozen;
    public static int SQLITE_UTF8;
    public static int SQLITE_UTF16LE;
    public static int SQLITE_UTF16BE;
    public static int SQLITE_UTF16;
    public static int SQLITE_ANY;
    public static int SQLITE_UTF16_ALIGNED;
    public static int SQLITE_DETERMINISTIC;
    public static int SQLITE_LIMIT_LENGTH;
    public static int SQLITE_LIMIT_SQL_LENGTH;
    public static int SQLITE_LIMIT_COLUMN;
    public static int SQLITE_LIMIT_EXPR_DEPTH;
    public static int SQLITE_LIMIT_COMPOUND_SELECT;
    public static int SQLITE_LIMIT_VDBE_OP;
    public static int SQLITE_LIMIT_FUNCTION_ARG;
    public static int SQLITE_LIMIT_ATTACHED;
    public static int SQLITE_LIMIT_LIKE_PATTERN_LENGTH;
    public static int SQLITE_LIMIT_VARIABLE_NUMBER;
    public static int SQLITE_LIMIT_TRIGGER_DEPTH;
    public static int SQLITE_LIMIT_WORKER_THREADS;
    public static int SQLITE_CONFIG_SINGLETHREAD;
    public static int SQLITE_CONFIG_MULTITHREAD;
    public static int SQLITE_CONFIG_SERIALIZED;
    public static int SQLITE_CONFIG_MALLOC;
    public static int SQLITE_CONFIG_GETMALLOC;
    public static int SQLITE_CONFIG_SCRATCH;
    public static int SQLITE_CONFIG_PAGECACHE;
    public static int SQLITE_CONFIG_HEAP;
    public static int SQLITE_CONFIG_MEMSTATUS;
    public static int SQLITE_CONFIG_MUTEX;
    public static int SQLITE_CONFIG_GETMUTEX;
    public static int SQLITE_CONFIG_LOOKASIDE;
    public static int SQLITE_CONFIG_PCACHE;
    public static int SQLITE_CONFIG_GETPCACHE;
    public static int SQLITE_CONFIG_LOG;
    public static int SQLITE_CONFIG_URI;
    public static int SQLITE_CONFIG_PCACHE2;
    public static int SQLITE_CONFIG_GETPCACHE2;
    public static int SQLITE_CONFIG_COVERING_INDEX_SCAN;
    public static int SQLITE_CONFIG_SQLLOG;
    public static int SQLITE_DBCONFIG_MAINDBNAME;
    public static int SQLITE_DBCONFIG_LOOKASIDE;
    public static int SQLITE_DBCONFIG_ENABLE_FKEY;
    public static int SQLITE_DBCONFIG_ENABLE_TRIGGER;
    public static int SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER;
    public static int SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION;
    public static int SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE;
    public static int SQLITE_DBCONFIG_ENABLE_QPSG;
    public static int SQLITE_DBCONFIG_TRIGGER_EQP;
    public static int SQLITE_DBCONFIG_RESET_DATABASE;
    public static int SQLITE_DBCONFIG_DEFENSIVE;
    public static int SQLITE_DBCONFIG_WRITABLE_SCHEMA;
    public static int SQLITE_DBCONFIG_LEGACY_ALTER_TABLE;
    public static int SQLITE_DBCONFIG_DQS_DML;
    public static int SQLITE_DBCONFIG_DQS_DDL;
    public static int SQLITE_DBCONFIG_ENABLE_VIEW;
    public static int SQLITE_DBCONFIG_LEGACY_FILE_FORMAT;
    public static int SQLITE_DBCONFIG_TRUSTED_SCHEMA;
    public static int SQLITE_DBCONFIG_MAX;
    public static int SQLITE_OPEN_READONLY;
    public static int SQLITE_OPEN_READWRITE;
    public static int SQLITE_OPEN_CREATE;
    public static int SQLITE_OPEN_DELETEONCLOSE;
    public static int SQLITE_OPEN_EXCLUSIVE;
    public static int SQLITE_OPEN_AUTOPROXY;
    public static int SQLITE_OPEN_URI;
    public static int SQLITE_OPEN_MEMORY;
    public static int SQLITE_OPEN_MAIN_DB;
    public static int SQLITE_OPEN_TEMP_DB;
    public static int SQLITE_OPEN_TRANSIENT_DB;
    public static int SQLITE_OPEN_MAIN_JOURNAL;
    public static int SQLITE_OPEN_TEMP_JOURNAL;
    public static int SQLITE_OPEN_SUBJOURNAL;
    public static int SQLITE_OPEN_MASTER_JOURNAL;
    public static int SQLITE_OPEN_NOMUTEX;
    public static int SQLITE_OPEN_FULLMUTEX;
    public static int SQLITE_OPEN_SHAREDCACHE;
    public static int SQLITE_OPEN_PRIVATECACHE;
    public static int SQLITE_OPEN_WAL;
    public static int SQLITE_PREPARE_PERSISTENT;
    public static int SQLITE_PREPARE_NORMALIZE;
    public static int SQLITE_PREPARE_NO_VTAB;
    public static int SQLITE_INTEGER;
    public static int SQLITE_FLOAT;
    public static int SQLITE_TEXT;
    public static int SQLITE_BLOB;
    public static int SQLITE_NULL;
    public static int SQLITE_OK;
    public static int SQLITE_ERROR;
    public static int SQLITE_INTERNAL;
    public static int SQLITE_PERM;
    public static int SQLITE_ABORT;
    public static int SQLITE_BUSY;
    public static int SQLITE_LOCKED;
    public static int SQLITE_NOMEM;
    public static int SQLITE_READONLY;
    public static int SQLITE_INTERRUPT;
    public static int SQLITE_IOERR;
    public static int SQLITE_CORRUPT;
    public static int SQLITE_NOTFOUND;
    public static int SQLITE_FULL;
    public static int SQLITE_CANTOPEN;
    public static int SQLITE_PROTOCOL;
    public static int SQLITE_EMPTY;
    public static int SQLITE_SCHEMA;
    public static int SQLITE_TOOBIG;
    public static int SQLITE_CONSTRAINT;
    public static int SQLITE_MISMATCH;
    public static int SQLITE_MISUSE;
    public static int SQLITE_NOLFS;
    public static int SQLITE_AUTH;
    public static int SQLITE_FORMAT;
    public static int SQLITE_RANGE;
    public static int SQLITE_NOTADB;
    public static int SQLITE_NOTICE;
    public static int SQLITE_WARNING;
    public static int SQLITE_ROW;
    public static int SQLITE_DONE;
    public static int SQLITE_IOERR_READ;
    public static int SQLITE_IOERR_SHORT_READ;
    public static int SQLITE_IOERR_WRITE;
    public static int SQLITE_IOERR_FSYNC;
    public static int SQLITE_IOERR_DIR_FSYNC;
    public static int SQLITE_IOERR_TRUNCATE;
    public static int SQLITE_IOERR_FSTAT;
    public static int SQLITE_IOERR_UNLOCK;
    public static int SQLITE_IOERR_RDLOCK;
    public static int SQLITE_IOERR_DELETE;
    public static int SQLITE_IOERR_BLOCKED;
    public static int SQLITE_IOERR_NOMEM;
    public static int SQLITE_IOERR_ACCESS;
    public static int SQLITE_IOERR_CHECKRESERVEDLOCK;
    public static int SQLITE_IOERR_LOCK;
    public static int SQLITE_IOERR_CLOSE;
    public static int SQLITE_IOERR_DIR_CLOSE;
    public static int SQLITE_IOERR_SHMOPEN;
    public static int SQLITE_IOERR_SHMSIZE;
    public static int SQLITE_IOERR_SHMLOCK;
    public static int SQLITE_IOERR_SHMMAP;
    public static int SQLITE_IOERR_SEEK;
    public static int SQLITE_IOERR_DELETE_NOENT;
    public static int SQLITE_IOERR_MMAP;
    public static int SQLITE_IOERR_GETTEMPPATH;
    public static int SQLITE_IOERR_CONVPATH;
    public static int SQLITE_LOCKED_SHAREDCACHE;
    public static int SQLITE_BUSY_RECOVERY;
    public static int SQLITE_BUSY_SNAPSHOT;
    public static int SQLITE_CANTOPEN_NOTEMPDIR;
    public static int SQLITE_CANTOPEN_ISDIR;
    public static int SQLITE_CANTOPEN_FULLPATH;
    public static int SQLITE_CANTOPEN_CONVPATH;
    public static int SQLITE_CORRUPT_VTAB;
    public static int SQLITE_READONLY_RECOVERY;
    public static int SQLITE_READONLY_CANTLOCK;
    public static int SQLITE_READONLY_ROLLBACK;
    public static int SQLITE_READONLY_DBMOVED;
    public static int SQLITE_ABORT_ROLLBACK;
    public static int SQLITE_CONSTRAINT_CHECK;
    public static int SQLITE_CONSTRAINT_COMMITHOOK;
    public static int SQLITE_CONSTRAINT_FOREIGNKEY;
    public static int SQLITE_CONSTRAINT_FUNCTION;
    public static int SQLITE_CONSTRAINT_NOTNULL;
    public static int SQLITE_CONSTRAINT_PRIMARYKEY;
    public static int SQLITE_CONSTRAINT_TRIGGER;
    public static int SQLITE_CONSTRAINT_UNIQUE;
    public static int SQLITE_CONSTRAINT_VTAB;
    public static int SQLITE_CONSTRAINT_ROWID;
    public static int SQLITE_NOTICE_RECOVER_WAL;
    public static int SQLITE_NOTICE_RECOVER_ROLLBACK;
    public static int SQLITE_WARNING_AUTOINDEX;
    public static int SQLITE_CREATE_INDEX;
    public static int SQLITE_CREATE_TABLE;
    public static int SQLITE_CREATE_TEMP_INDEX;
    public static int SQLITE_CREATE_TEMP_TABLE;
    public static int SQLITE_CREATE_TEMP_TRIGGER;
    public static int SQLITE_CREATE_TEMP_VIEW;
    public static int SQLITE_CREATE_TRIGGER;
    public static int SQLITE_CREATE_VIEW;
    public static int SQLITE_DELETE;
    public static int SQLITE_DROP_INDEX;
    public static int SQLITE_DROP_TABLE;
    public static int SQLITE_DROP_TEMP_INDEX;
    public static int SQLITE_DROP_TEMP_TABLE;
    public static int SQLITE_DROP_TEMP_TRIGGER;
    public static int SQLITE_DROP_TEMP_VIEW;
    public static int SQLITE_DROP_TRIGGER;
    public static int SQLITE_DROP_VIEW;
    public static int SQLITE_INSERT;
    public static int SQLITE_PRAGMA;
    public static int SQLITE_READ;
    public static int SQLITE_SELECT;
    public static int SQLITE_TRANSACTION;
    public static int SQLITE_UPDATE;
    public static int SQLITE_ATTACH;
    public static int SQLITE_DETACH;
    public static int SQLITE_ALTER_TABLE;
    public static int SQLITE_REINDEX;
    public static int SQLITE_ANALYZE;
    public static int SQLITE_CREATE_VTABLE;
    public static int SQLITE_DROP_VTABLE;
    public static int SQLITE_FUNCTION;
    public static int SQLITE_SAVEPOINT;
    public static int SQLITE_COPY;
    public static int SQLITE_RECURSIVE;
    public static int SQLITE_CHECKPOINT_PASSIVE;
    public static int SQLITE_CHECKPOINT_FULL;
    public static int SQLITE_CHECKPOINT_RESTART;
    public static int SQLITE_CHECKPOINT_TRUNCATE;
    public static int SQLITE_DBSTATUS_LOOKASIDE_USED;
    public static int SQLITE_DBSTATUS_CACHE_USED;
    public static int SQLITE_DBSTATUS_SCHEMA_USED;
    public static int SQLITE_DBSTATUS_STMT_USED;
    public static int SQLITE_DBSTATUS_LOOKASIDE_HIT;
    public static int SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE;
    public static int SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL;
    public static int SQLITE_DBSTATUS_CACHE_HIT;
    public static int SQLITE_DBSTATUS_CACHE_MISS;
    public static int SQLITE_DBSTATUS_CACHE_WRITE;
    public static int SQLITE_DBSTATUS_DEFERRED_FKS;
    public static int SQLITE_STATUS_MEMORY_USED;
    public static int SQLITE_STATUS_PAGECACHE_USED;
    public static int SQLITE_STATUS_PAGECACHE_OVERFLOW;
    public static int SQLITE_STATUS_SCRATCH_USED;
    public static int SQLITE_STATUS_SCRATCH_OVERFLOW;
    public static int SQLITE_STATUS_MALLOC_SIZE;
    public static int SQLITE_STATUS_PARSER_STACK;
    public static int SQLITE_STATUS_PAGECACHE_SIZE;
    public static int SQLITE_STATUS_SCRATCH_SIZE;
    public static int SQLITE_STATUS_MALLOC_COUNT;
    public static int SQLITE_STMTSTATUS_FULLSCAN_STEP;
    public static int SQLITE_STMTSTATUS_SORT;
    public static int SQLITE_STMTSTATUS_AUTOINDEX;
    public static int SQLITE_STMTSTATUS_VM_STEP;
    public static int SQLITE_DENY;
    public static int SQLITE_IGNORE;
    public static int SQLITE_TRACE_STMT;
    public static int SQLITE_TRACE_PROFILE;
    public static int SQLITE_TRACE_ROW;
    public static int SQLITE_TRACE_CLOSE;
    public static int SQLITE_SERIALIZE_NOCOPY;
    public static int SQLITE_DESERIALIZE_FREEONCLOSE;
    public static int SQLITE_DESERIALIZE_RESIZEABLE;
    public static int SQLITE_DESERIALIZE_READONLY;
    private static ISQLite3Provider Provider { get; }
    private static raw();
    public static void SetProvider(ISQLite3Provider imp);
    public static void FreezeProvider(bool b);
    private static ISQLite3Provider get_Provider();
    public static string GetNativeLibraryName();
    public static int sqlite3_open(utf8z filename, sqlite3& db);
    public static int sqlite3_open(string filename, sqlite3& db);
    public static int sqlite3_open_v2(utf8z filename, sqlite3& db, int flags, utf8z vfs);
    public static int sqlite3_open_v2(string filename, sqlite3& db, int flags, string vfs);
    public static int sqlite3__vfs__delete(utf8z vfs, utf8z pathname, int syncdir);
    public static int sqlite3__vfs__delete(string vfs, string pathname, int syncdir);
    internal static int internal_sqlite3_close_v2(IntPtr p);
    internal static int internal_sqlite3_close(IntPtr p);
    public static int sqlite3_close_v2(sqlite3 db);
    public static int sqlite3_close(sqlite3 db);
    public static int sqlite3_enable_shared_cache(int enable);
    public static void sqlite3_interrupt(sqlite3 db);
    public static int sqlite3_config_log(delegate_log f, object v);
    public static int sqlite3_config_log(strdelegate_log f, object v);
    public static void sqlite3_log(int errcode, utf8z s);
    public static void sqlite3_log(int errcode, string s);
    public static void sqlite3_commit_hook(sqlite3 db, delegate_commit f, object v);
    public static void sqlite3_rollback_hook(sqlite3 db, delegate_rollback f, object v);
    public static void sqlite3_trace(sqlite3 db, delegate_trace f, object v);
    public static void sqlite3_trace(sqlite3 db, strdelegate_trace f, object v);
    public static void sqlite3_profile(sqlite3 db, delegate_profile f, object v);
    public static void sqlite3_profile(sqlite3 db, strdelegate_profile f, object v);
    public static void sqlite3_progress_handler(sqlite3 db, int instructions, delegate_progress func, object v);
    public static void sqlite3_update_hook(sqlite3 db, delegate_update f, object v);
    public static void sqlite3_update_hook(sqlite3 db, strdelegate_update f, object v);
    public static int sqlite3_create_collation(sqlite3 db, string name, object v, strdelegate_collation f);
    public static int sqlite3__create_collation_utf8(sqlite3 db, string name, object v, delegate_collation f);
    public static int sqlite3_create_function(sqlite3 db, string name, int nArg, int flags, object v, delegate_function_scalar func);
    public static int sqlite3_create_function(sqlite3 db, string name, int nArg, int flags, object v, delegate_function_aggregate_step func_step, delegate_function_aggregate_final func_final);
    public static int sqlite3_create_function(sqlite3 db, string name, int nArg, object v, delegate_function_scalar func);
    public static int sqlite3_create_function(sqlite3 db, string name, int nArg, object v, delegate_function_aggregate_step func_step, delegate_function_aggregate_final func_final);
    public static int sqlite3_db_status(sqlite3 db, int op, Int32& current, Int32& highest, int resetFlg);
    [ExtensionAttribute]
public static string utf8_span_to_string(ReadOnlySpan`1<byte> p);
    public static int sqlite3_key(sqlite3 db, ReadOnlySpan`1<byte> k);
    public static int sqlite3_key_v2(sqlite3 db, utf8z name, ReadOnlySpan`1<byte> k);
    public static int sqlite3_rekey(sqlite3 db, ReadOnlySpan`1<byte> k);
    public static int sqlite3_rekey_v2(sqlite3 db, utf8z name, ReadOnlySpan`1<byte> k);
    public static utf8z sqlite3_libversion();
    public static int sqlite3_libversion_number();
    public static int sqlite3_threadsafe();
    public static int sqlite3_initialize();
    public static int sqlite3_shutdown();
    public static int sqlite3_limit(sqlite3 db, int id, int newVal);
    public static int sqlite3_config(int op);
    public static int sqlite3_config(int op, int val);
    public static int sqlite3_db_config(sqlite3 db, int op, utf8z val);
    public static int sqlite3_db_config(sqlite3 db, int op, int val, Int32& result);
    public static int sqlite3_db_config(sqlite3 db, int op, IntPtr ptr, int int0, int int1);
    public static int sqlite3_enable_load_extension(sqlite3 db, int onoff);
    public static int sqlite3_load_extension(sqlite3 db, utf8z file, utf8z proc, utf8z& errmsg);
    public static utf8z sqlite3_sourceid();
    public static long sqlite3_memory_used();
    public static long sqlite3_memory_highwater(int resetFlag);
    public static long sqlite3_soft_heap_limit64(long n);
    public static long sqlite3_hard_heap_limit64(long n);
    public static int sqlite3_status(int op, Int32& current, Int32& highwater, int resetFlag);
    public static utf8z sqlite3_errmsg(sqlite3 db);
    public static int sqlite3_db_readonly(sqlite3 db, utf8z dbName);
    public static int sqlite3_db_readonly(sqlite3 db, string dbName);
    public static utf8z sqlite3_db_filename(sqlite3 db, utf8z att);
    public static utf8z sqlite3_db_filename(sqlite3 db, string att);
    public static long sqlite3_last_insert_rowid(sqlite3 db);
    public static int sqlite3_changes(sqlite3 db);
    public static int sqlite3_total_changes(sqlite3 db);
    public static int sqlite3_get_autocommit(sqlite3 db);
    public static int sqlite3_busy_timeout(sqlite3 db, int ms);
    public static int sqlite3_extended_result_codes(sqlite3 db, int onoff);
    public static int sqlite3_errcode(sqlite3 db);
    public static int sqlite3_extended_errcode(sqlite3 db);
    public static utf8z sqlite3_errstr(int rc);
    public static int sqlite3_prepare_v2(sqlite3 db, ReadOnlySpan`1<byte> sql, sqlite3_stmt& stmt);
    public static int sqlite3_prepare_v2(sqlite3 db, utf8z sql, sqlite3_stmt& stmt);
    public static int sqlite3_prepare_v2(sqlite3 db, string sql, sqlite3_stmt& stmt);
    public static int sqlite3_prepare_v2(sqlite3 db, ReadOnlySpan`1<byte> sql, sqlite3_stmt& stmt, ReadOnlySpan`1& tail);
    public static int sqlite3_prepare_v2(sqlite3 db, utf8z sql, sqlite3_stmt& stmt, utf8z& tail);
    public static int sqlite3_prepare_v2(sqlite3 db, string sql, sqlite3_stmt& stmt, String& tail);
    public static int sqlite3_prepare_v3(sqlite3 db, ReadOnlySpan`1<byte> sql, UInt32 flags, sqlite3_stmt& stmt);
    public static int sqlite3_prepare_v3(sqlite3 db, utf8z sql, UInt32 flags, sqlite3_stmt& stmt);
    public static int sqlite3_prepare_v3(sqlite3 db, string sql, UInt32 flags, sqlite3_stmt& stmt);
    public static int sqlite3_prepare_v3(sqlite3 db, ReadOnlySpan`1<byte> sql, UInt32 flags, sqlite3_stmt& stmt, ReadOnlySpan`1& tail);
    public static int sqlite3_prepare_v3(sqlite3 db, utf8z sql, UInt32 flags, sqlite3_stmt& stmt, utf8z& tail);
    public static int sqlite3_prepare_v3(sqlite3 db, string sql, UInt32 flags, sqlite3_stmt& stmt, String& tail);
    public static int sqlite3_exec(sqlite3 db, string sql, strdelegate_exec callback, object user_data, String& errMsg);
    public static int sqlite3_exec(sqlite3 db, string sql, String& errMsg);
    public static int sqlite3_exec(sqlite3 db, string sql);
    public static int sqlite3_step(sqlite3_stmt stmt);
    public static int sqlite3_finalize(sqlite3_stmt stmt);
    public static int internal_sqlite3_finalize(IntPtr stmt);
    public static int sqlite3_reset(sqlite3_stmt stmt);
    public static int sqlite3_clear_bindings(sqlite3_stmt stmt);
    public static int sqlite3_stmt_status(sqlite3_stmt stmt, int op, int resetFlg);
    public static int sqlite3_complete(utf8z sql);
    public static int sqlite3_complete(string sql);
    public static int sqlite3_compileoption_used(utf8z s);
    public static int sqlite3_compileoption_used(string s);
    public static utf8z sqlite3_compileoption_get(int n);
    public static int sqlite3_table_column_metadata(sqlite3 db, utf8z dbName, utf8z tblName, utf8z colName, utf8z& dataType, utf8z& collSeq, Int32& notNull, Int32& primaryKey, Int32& autoInc);
    public static int sqlite3_table_column_metadata(sqlite3 db, string dbName, string tblName, string colName, String& dataType, String& collSeq, Int32& notNull, Int32& primaryKey, Int32& autoInc);
    public static utf8z sqlite3_sql(sqlite3_stmt stmt);
    public static sqlite3 sqlite3_db_handle(sqlite3_stmt stmt);
    public static sqlite3_stmt sqlite3_next_stmt(sqlite3 db, sqlite3_stmt stmt);
    public static int sqlite3_bind_zeroblob(sqlite3_stmt stmt, int index, int size);
    public static utf8z sqlite3_bind_parameter_name(sqlite3_stmt stmt, int index);
    public static object sqlite3_user_data(sqlite3_context context);
    public static void sqlite3_result_null(sqlite3_context context);
    public static void sqlite3_result_blob(sqlite3_context context, ReadOnlySpan`1<byte> val);
    public static void sqlite3_result_error(sqlite3_context context, ReadOnlySpan`1<byte> val);
    public static void sqlite3_result_error(sqlite3_context context, utf8z val);
    public static void sqlite3_result_error(sqlite3_context context, string val);
    public static void sqlite3_result_text(sqlite3_context context, ReadOnlySpan`1<byte> val);
    public static void sqlite3_result_text(sqlite3_context context, utf8z val);
    public static void sqlite3_result_text(sqlite3_context context, string val);
    public static void sqlite3_result_double(sqlite3_context context, double val);
    public static void sqlite3_result_int(sqlite3_context context, int val);
    public static void sqlite3_result_int64(sqlite3_context context, long val);
    public static void sqlite3_result_zeroblob(sqlite3_context context, int n);
    public static void sqlite3_result_error_toobig(sqlite3_context context);
    public static void sqlite3_result_error_nomem(sqlite3_context context);
    public static void sqlite3_result_error_code(sqlite3_context context, int code);
    public static ReadOnlySpan`1<byte> sqlite3_value_blob(sqlite3_value val);
    public static int sqlite3_value_bytes(sqlite3_value val);
    public static double sqlite3_value_double(sqlite3_value val);
    public static int sqlite3_value_int(sqlite3_value val);
    public static long sqlite3_value_int64(sqlite3_value val);
    public static int sqlite3_value_type(sqlite3_value val);
    public static utf8z sqlite3_value_text(sqlite3_value val);
    public static int sqlite3_bind_blob(sqlite3_stmt stmt, int index, ReadOnlySpan`1<byte> blob);
    public static int sqlite3_bind_double(sqlite3_stmt stmt, int index, double val);
    public static int sqlite3_bind_int(sqlite3_stmt stmt, int index, int val);
    public static int sqlite3_bind_int64(sqlite3_stmt stmt, int index, long val);
    public static int sqlite3_bind_null(sqlite3_stmt stmt, int index);
    public static int sqlite3_bind_text(sqlite3_stmt stmt, int index, ReadOnlySpan`1<byte> val);
    public static int sqlite3_bind_text16(sqlite3_stmt stmt, int index, ReadOnlySpan`1<char> val);
    public static int sqlite3_bind_text(sqlite3_stmt stmt, int index, utf8z val);
    public static int sqlite3_bind_text(sqlite3_stmt stmt, int index, string val);
    public static int sqlite3_bind_parameter_count(sqlite3_stmt stmt);
    public static int sqlite3_bind_parameter_index(sqlite3_stmt stmt, utf8z strName);
    public static int sqlite3_bind_parameter_index(sqlite3_stmt stmt, string strName);
    public static int sqlite3_stmt_isexplain(sqlite3_stmt stmt);
    public static int sqlite3_stmt_busy(sqlite3_stmt stmt);
    public static int sqlite3_stmt_readonly(sqlite3_stmt stmt);
    public static utf8z sqlite3_column_database_name(sqlite3_stmt stmt, int index);
    public static utf8z sqlite3_column_name(sqlite3_stmt stmt, int index);
    public static utf8z sqlite3_column_origin_name(sqlite3_stmt stmt, int index);
    public static utf8z sqlite3_column_table_name(sqlite3_stmt stmt, int index);
    public static utf8z sqlite3_column_text(sqlite3_stmt stmt, int index);
    public static int sqlite3_column_count(sqlite3_stmt stmt);
    public static int sqlite3_data_count(sqlite3_stmt stmt);
    public static double sqlite3_column_double(sqlite3_stmt stmt, int index);
    public static int sqlite3_column_int(sqlite3_stmt stmt, int index);
    public static long sqlite3_column_int64(sqlite3_stmt stmt, int index);
    public static ReadOnlySpan`1<byte> sqlite3_column_blob(sqlite3_stmt stmt, int index);
    public static int sqlite3_column_bytes(sqlite3_stmt stmt, int index);
    public static int sqlite3_column_type(sqlite3_stmt stmt, int index);
    public static utf8z sqlite3_column_decltype(sqlite3_stmt stmt, int index);
    public static sqlite3_backup sqlite3_backup_init(sqlite3 destDb, string destName, sqlite3 sourceDb, string sourceName);
    public static int sqlite3_backup_step(sqlite3_backup backup, int nPage);
    public static int sqlite3_backup_remaining(sqlite3_backup backup);
    public static int sqlite3_backup_pagecount(sqlite3_backup backup);
    public static int sqlite3_backup_finish(sqlite3_backup backup);
    internal static int internal_sqlite3_backup_finish(IntPtr p);
    public static int sqlite3_snapshot_get(sqlite3 db, string schema, sqlite3_snapshot& snap);
    public static int sqlite3_snapshot_cmp(sqlite3_snapshot p1, sqlite3_snapshot p2);
    public static int sqlite3_snapshot_open(sqlite3 db, string schema, sqlite3_snapshot snap);
    public static int sqlite3_snapshot_recover(sqlite3 db, string name);
    public static void sqlite3_snapshot_free(sqlite3_snapshot snap);
    internal static void internal_sqlite3_snapshot_free(IntPtr p);
    public static int sqlite3_blob_open(sqlite3 db, utf8z db_utf8, utf8z table_utf8, utf8z col_utf8, long rowid, int flags, sqlite3_blob& blob);
    public static int sqlite3_blob_open(sqlite3 db, string sdb, string table, string col, long rowid, int flags, sqlite3_blob& blob);
    public static int sqlite3_blob_bytes(sqlite3_blob blob);
    public static int sqlite3_blob_reopen(sqlite3_blob blob, long rowid);
    public static int sqlite3_blob_write(sqlite3_blob blob, ReadOnlySpan`1<byte> b, int offset);
    public static int sqlite3_blob_read(sqlite3_blob blob, Span`1<byte> b, int offset);
    public static int sqlite3_blob_close(sqlite3_blob blob);
    internal static int internal_sqlite3_blob_close(IntPtr blob);
    public static int sqlite3_wal_autocheckpoint(sqlite3 db, int n);
    public static int sqlite3_wal_checkpoint(sqlite3 db, string dbName);
    public static int sqlite3_wal_checkpoint_v2(sqlite3 db, string dbName, int eMode, Int32& logSize, Int32& framesCheckPointed);
    public static int sqlite3_set_authorizer(sqlite3 db, delegate_authorizer f, object user_data);
    public static int sqlite3_set_authorizer(sqlite3 db, strdelegate_authorizer f, object user_data);
    public static int sqlite3_win32_set_directory(int typ, string path);
    public static int sqlite3_keyword_count();
    public static int sqlite3_keyword_name(int i, String& name);
    public static IntPtr sqlite3_malloc(int n);
    public static IntPtr sqlite3_malloc64(long n);
    public static void sqlite3_free(IntPtr p);
    public static IntPtr sqlite3_serialize(sqlite3 db, string schema, Int64& size, int flags);
    public static int sqlite3_deserialize(sqlite3 db, string schema, IntPtr data, long deserializedDataSize, long maxDataSize, int flags);
}
public class SQLitePCL.rollback_hook_info : object {
    private delegate_rollback _func;
    private object _user_data;
    public rollback_hook_info(delegate_rollback func, object v);
    public static rollback_hook_info from_ptr(IntPtr p);
    public void call();
}
public class SQLitePCL.SafeGCHandle : SafeHandle {
    public bool IsInvalid { get; }
    public SafeGCHandle(object v, GCHandleType typ);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
public class SQLitePCL.sqlite3 : SafeHandle {
    private ConcurrentDictionary`2<IntPtr, sqlite3_stmt> _stmts;
    private IDisposable extra;
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    public int manual_close_v2();
    public int manual_close();
    internal static sqlite3 New(IntPtr p);
    public void enable_sqlite3_next_stmt(bool enabled);
    internal void add_stmt(sqlite3_stmt stmt);
    internal sqlite3_stmt find_stmt(IntPtr p);
    internal void remove_stmt(sqlite3_stmt s);
    public T GetOrCreateExtra(Func`1<T> f);
    private void dispose_extra();
}
public class SQLitePCL.sqlite3_backup : SafeHandle {
    public bool IsInvalid { get; }
    public static sqlite3_backup From(IntPtr p);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    public int manual_close();
}
public class SQLitePCL.sqlite3_blob : SafeHandle {
    public bool IsInvalid { get; }
    internal static sqlite3_blob From(IntPtr p);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    public int manual_close();
}
public class SQLitePCL.sqlite3_context : object {
    private IntPtr _p;
    private object _user_data;
    public object state;
    internal object user_data { get; }
    internal IntPtr ptr { get; }
    protected sqlite3_context(object user_data);
    internal object get_user_data();
    internal IntPtr get_ptr();
    protected void set_context_ptr(IntPtr p);
}
public class SQLitePCL.sqlite3_snapshot : SafeHandle {
    public bool IsInvalid { get; }
    internal static sqlite3_snapshot From(IntPtr p);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    public void manual_close();
}
public class SQLitePCL.sqlite3_stmt : SafeHandle {
    private sqlite3 _db;
    public bool IsInvalid { get; }
    internal IntPtr ptr { get; }
    internal sqlite3 db { get; }
    internal static sqlite3_stmt From(IntPtr p, sqlite3 db);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    public int manual_close();
    internal IntPtr get_ptr();
    internal sqlite3 get_db();
}
public class SQLitePCL.sqlite3_value : object {
    private IntPtr _p;
    internal IntPtr ptr { get; }
    public sqlite3_value(IntPtr p);
    internal IntPtr get_ptr();
}
public class SQLitePCL.strdelegate_authorizer : MulticastDelegate {
    public strdelegate_authorizer(object object, IntPtr method);
    public virtual int Invoke(object user_data, int action_code, string param0, string param1, string dbName, string inner_most_trigger_or_view);
    public virtual IAsyncResult BeginInvoke(object user_data, int action_code, string param0, string param1, string dbName, string inner_most_trigger_or_view, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class SQLitePCL.strdelegate_collation : MulticastDelegate {
    public strdelegate_collation(object object, IntPtr method);
    public virtual int Invoke(object user_data, string s1, string s2);
    public virtual IAsyncResult BeginInvoke(object user_data, string s1, string s2, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class SQLitePCL.strdelegate_exec : MulticastDelegate {
    public strdelegate_exec(object object, IntPtr method);
    public virtual int Invoke(object user_data, String[] values, String[] names);
    public virtual IAsyncResult BeginInvoke(object user_data, String[] values, String[] names, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class SQLitePCL.strdelegate_log : MulticastDelegate {
    public strdelegate_log(object object, IntPtr method);
    public virtual void Invoke(object user_data, int errorCode, string msg);
    public virtual IAsyncResult BeginInvoke(object user_data, int errorCode, string msg, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.strdelegate_profile : MulticastDelegate {
    public strdelegate_profile(object object, IntPtr method);
    public virtual void Invoke(object user_data, string statement, long ns);
    public virtual IAsyncResult BeginInvoke(object user_data, string statement, long ns, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.strdelegate_trace : MulticastDelegate {
    public strdelegate_trace(object object, IntPtr method);
    public virtual void Invoke(object user_data, string s);
    public virtual IAsyncResult BeginInvoke(object user_data, string s, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.strdelegate_update : MulticastDelegate {
    public strdelegate_update(object object, IntPtr method);
    public virtual void Invoke(object user_data, int type, string database, string table, long rowid);
    public virtual IAsyncResult BeginInvoke(object user_data, int type, string database, string table, long rowid, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.trace_hook_info : object {
    private delegate_trace _func;
    private object _user_data;
    public trace_hook_info(delegate_trace func, object v);
    public static trace_hook_info from_ptr(IntPtr p);
    public void call(utf8z s);
}
public class SQLitePCL.update_hook_info : object {
    private delegate_update _func;
    private object _user_data;
    public update_hook_info(delegate_update func, object v);
    public static update_hook_info from_ptr(IntPtr p);
    public void call(int typ, utf8z db, utf8z tbl, long rowid);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
public class SQLitePCL.utf8z : ValueType {
    private ReadOnlySpan`1<byte> sp;
    private utf8z(ReadOnlySpan`1<byte> a);
    public Byte& modreq(System.Runtime.InteropServices.InAttribute) GetPinnableReference();
    public static utf8z FromSpan(ReadOnlySpan`1<byte> span);
    public static utf8z FromString(string s);
    private static long my_strlen(Byte* p);
    private static ReadOnlySpan`1<byte> find_zero_terminator(Byte* p);
    public static utf8z FromPtr(Byte* p);
    public static utf8z FromPtrLen(Byte* p, int len);
    public static utf8z FromIntPtr(IntPtr p);
    public string utf8_to_string();
    public static Byte[] GetZeroTerminatedUTF8Bytes(string value);
}
[ExtensionAttribute]
internal static class SQLitePCL.util : object {
    [ExtensionAttribute]
public static utf8z to_utf8z(string s);
    [ExtensionAttribute]
public static Byte[] to_utf8_with_z(string sourceText);
    private static int my_strlen(IntPtr nativeString);
    public static string from_utf8_z(IntPtr nativeString);
    public static string from_utf8(IntPtr nativeString, int size);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
