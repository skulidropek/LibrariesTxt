internal class SQLitePCL.agg_function_hook_info : object {
    private delegate_function_aggregate_step _func_step;
    private delegate_function_aggregate_final _func_final;
    private object _user_data;
    private GCHandle _h;
    internal IntPtr ptr { get; }
    internal agg_function_hook_info(delegate_function_aggregate_step func_step, delegate_function_aggregate_final func_final, object user_data);
    internal IntPtr get_ptr();
    internal static agg_function_hook_info from_ptr(IntPtr p);
    private sqlite3_context get_context(IntPtr context, IntPtr agg_context);
    internal void call_step(IntPtr context, IntPtr agg_context, int num_args, IntPtr argsptr);
    internal void call_final(IntPtr context, IntPtr agg_context);
    internal void free();
}
internal class SQLitePCL.authorizer_hook_info : object {
    private delegate_authorizer _func;
    private object _user_data;
    private GCHandle _h;
    internal IntPtr ptr { get; }
    internal authorizer_hook_info(delegate_authorizer func, object v);
    internal IntPtr get_ptr();
    internal static authorizer_hook_info from_ptr(IntPtr p);
    internal int call(int action_code, string param0, string param1, string dbName, string inner_most_trigger_or_view);
    internal void free();
}
internal class SQLitePCL.collation_hook_info : object {
    private delegate_collation _func;
    private object _user_data;
    private GCHandle _h;
    internal IntPtr ptr { get; }
    internal collation_hook_info(delegate_collation func, object v);
    internal IntPtr get_ptr();
    internal static collation_hook_info from_ptr(IntPtr p);
    internal int call(string s1, string s2);
    internal void free();
}
internal class SQLitePCL.commit_hook_info : object {
    private delegate_commit _func;
    private object _user_data;
    private GCHandle _h;
    internal IntPtr ptr { get; }
    internal commit_hook_info(delegate_commit func, object v);
    internal IntPtr get_ptr();
    internal static commit_hook_info from_ptr(IntPtr p);
    internal int call();
    internal void free();
}
internal class SQLitePCL.exec_hook_info : object {
    private delegate_exec _func;
    private object _user_data;
    private GCHandle _h;
    internal IntPtr ptr { get; }
    internal exec_hook_info(delegate_exec func, object v);
    internal IntPtr get_ptr();
    internal static exec_hook_info from_ptr(IntPtr p);
    internal int call(int n, IntPtr values_ptr, IntPtr names_ptr);
    internal void free();
}
internal static class SQLitePCL.hooks : object {
    internal static log_hook_info log;
    private static ConcurrentDictionary`2<IntPtr, info> _hooks_by_db;
    private static hooks();
    internal static info getOrCreateFor(IntPtr db);
    internal static void removeFor(IntPtr db);
}
internal class SQLitePCL.log_hook_info : object {
    private delegate_log _func;
    private object _user_data;
    private GCHandle _h;
    internal IntPtr ptr { get; }
    internal log_hook_info(delegate_log func, object v);
    internal IntPtr get_ptr();
    internal static log_hook_info from_ptr(IntPtr p);
    internal void call(int rc, string msg);
    internal void free();
}
internal class SQLitePCL.profile_hook_info : object {
    private delegate_profile _func;
    private object _user_data;
    private GCHandle _h;
    internal IntPtr ptr { get; }
    internal profile_hook_info(delegate_profile func, object v);
    internal IntPtr get_ptr();
    internal static profile_hook_info from_ptr(IntPtr p);
    internal void call(string s, long elapsed);
    internal void free();
}
internal class SQLitePCL.progress_handler_hook_info : object {
    private delegate_progress_handler _func;
    private object _user_data;
    private GCHandle _h;
    internal IntPtr ptr { get; }
    internal progress_handler_hook_info(delegate_progress_handler func, object v);
    internal IntPtr get_ptr();
    internal static progress_handler_hook_info from_ptr(IntPtr p);
    internal int call();
    internal void free();
}
internal class SQLitePCL.rollback_hook_info : object {
    private delegate_rollback _func;
    private object _user_data;
    private GCHandle _h;
    internal IntPtr ptr { get; }
    internal rollback_hook_info(delegate_rollback func, object v);
    internal IntPtr get_ptr();
    internal static rollback_hook_info from_ptr(IntPtr p);
    internal void call();
    internal void free();
}
internal class SQLitePCL.scalar_function_hook_info : object {
    private delegate_function_scalar _func;
    private object _user_data;
    private GCHandle _h;
    internal IntPtr ptr { get; }
    internal scalar_function_hook_info(delegate_function_scalar func, object v);
    internal IntPtr get_ptr();
    internal static scalar_function_hook_info from_ptr(IntPtr p);
    internal void call(IntPtr context, int num_args, IntPtr argsptr);
    internal void free();
}
public static class SQLitePCL.Settings : object {
    public static string BaseDirectoryForDynamicLoadNativeLibrary;
    private static Settings();
}
public class SQLitePCL.SQLite3Provider_e_sqlite3 : object {
    private callback_commit commit_hook_bridge;
    private callback_scalar_function scalar_function_hook_bridge;
    private callback_log log_hook_bridge;
    private callback_agg_function_step agg_function_hook_bridge_step;
    private callback_agg_function_final agg_function_hook_bridge_final;
    private callback_collation collation_hook_bridge;
    private callback_update update_hook_bridge;
    private callback_rollback rollback_hook_bridge;
    private callback_trace trace_hook_bridge;
    private callback_profile profile_hook_bridge;
    private callback_progress_handler progress_handler_hook_bridge;
    private callback_authorizer authorizer_hook_bridge;
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_win32_set_directory(int typ, string path);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_open(string filename, IntPtr& db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_open_v2(string filename, IntPtr& db, int flags, string vfs);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3__vfs__delete(string vfs, string filename, int syncDir);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_close_v2(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_close(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_enable_shared_cache(int enable);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_interrupt(IntPtr db);
    private static int exec_hook_bridge(IntPtr p, int n, IntPtr values_ptr, IntPtr names_ptr);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_exec(IntPtr db, string sql, delegate_exec func, object user_data, String& errMsg);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_complete(string sql);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_compileoption_get(int n);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_compileoption_used(string s);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_table_column_metadata(IntPtr db, string dbName, string tblName, string colName, String& dataType, String& collSeq, Int32& notNull, Int32& primaryKey, Int32& autoInc);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_prepare_v2(IntPtr db, string sql, IntPtr& stm, String& remain);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_db_status(IntPtr db, int op, Int32& current, Int32& highest, int resetFlg);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_sql(IntPtr stmt);
    private sealed virtual override IntPtr SQLitePCL.ISQLite3Provider.sqlite3_db_handle(IntPtr stmt);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_open(IntPtr db, Byte[] db_utf8, Byte[] table_utf8, Byte[] col_utf8, long rowid, int flags, IntPtr& blob);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_open(IntPtr db, string sdb, string table, string col, long rowid, int flags, IntPtr& blob);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_bytes(IntPtr blob);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_close(IntPtr blob);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_read(IntPtr blob, Byte[] b, int n, int offset);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_write(IntPtr blob, Byte[] b, int n, int offset);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_read(IntPtr blob, Byte[] b, int bOffset, int n, int offset);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_write(IntPtr blob, Byte[] b, int bOffset, int n, int offset);
    private sealed virtual override IntPtr SQLitePCL.ISQLite3Provider.sqlite3_backup_init(IntPtr destDb, string destName, IntPtr sourceDb, string sourceName);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_backup_step(IntPtr backup, int nPage);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_backup_finish(IntPtr backup);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_backup_remaining(IntPtr backup);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_backup_pagecount(IntPtr backup);
    private sealed virtual override IntPtr SQLitePCL.ISQLite3Provider.sqlite3_next_stmt(IntPtr db, IntPtr stmt);
    private sealed virtual override long SQLitePCL.ISQLite3Provider.sqlite3_last_insert_rowid(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_changes(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_total_changes(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_extended_result_codes(IntPtr db, int onoff);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_errstr(int rc);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_errcode(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_extended_errcode(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_busy_timeout(IntPtr db, int ms);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_get_autocommit(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_db_readonly(IntPtr db, string dbName);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_db_filename(IntPtr db, string att);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_errmsg(IntPtr db);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_libversion();
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_libversion_number();
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_threadsafe();
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_config(int op);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_config(int op, int val);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_initialize();
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_shutdown();
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_enable_load_extension(IntPtr db, int onoff);
    private static int commit_hook_bridge_impl(IntPtr p);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_commit_hook(IntPtr db, delegate_commit func, object v);
    private static void scalar_function_hook_bridge_impl(IntPtr context, int num_args, IntPtr argsptr);
    private int my_sqlite3_create_function(IntPtr db, string name, int nargs, int flags, object v, delegate_function_scalar func);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_create_function(IntPtr db, string name, int nargs, object v, delegate_function_scalar func);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_create_function(IntPtr db, string name, int nargs, int flags, object v, delegate_function_scalar func);
    private static void log_hook_bridge_impl(IntPtr p, int rc, IntPtr s);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_config_log(delegate_log func, object v);
    private static void agg_function_hook_bridge_step_impl(IntPtr context, int num_args, IntPtr argsptr);
    private static void agg_function_hook_bridge_final_impl(IntPtr context);
    private int my_sqlite3_create_function(IntPtr db, string name, int nargs, int flags, object v, delegate_function_aggregate_step func_step, delegate_function_aggregate_final func_final);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_create_function(IntPtr db, string name, int nargs, object v, delegate_function_aggregate_step func_step, delegate_function_aggregate_final func_final);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_create_function(IntPtr db, string name, int nargs, int flags, object v, delegate_function_aggregate_step func_step, delegate_function_aggregate_final func_final);
    private static int collation_hook_bridge_impl(IntPtr p, int len1, IntPtr pv1, int len2, IntPtr pv2);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_create_collation(IntPtr db, string name, object v, delegate_collation func);
    private static void update_hook_bridge_impl(IntPtr p, int typ, IntPtr db, IntPtr tbl, long rowid);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_update_hook(IntPtr db, delegate_update func, object v);
    private static void rollback_hook_bridge_impl(IntPtr p);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_rollback_hook(IntPtr db, delegate_rollback func, object v);
    private static void trace_hook_bridge_impl(IntPtr p, IntPtr s);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_trace(IntPtr db, delegate_trace func, object v);
    private static void profile_hook_bridge_impl(IntPtr p, IntPtr s, long elapsed);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_profile(IntPtr db, delegate_profile func, object v);
    private static int progress_handler_hook_bridge_impl(IntPtr p);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_progress_handler(IntPtr db, int instructions, delegate_progress_handler func, object v);
    private static int authorizer_hook_bridge_impl(IntPtr p, int action_code, IntPtr param0, IntPtr param1, IntPtr dbName, IntPtr inner_most_trigger_or_view);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_set_authorizer(IntPtr db, delegate_authorizer func, object v);
    private sealed virtual override long SQLitePCL.ISQLite3Provider.sqlite3_memory_used();
    private sealed virtual override long SQLitePCL.ISQLite3Provider.sqlite3_memory_highwater(int resetFlag);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_status(int op, Int32& current, Int32& highwater, int resetFlag);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_sourceid();
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_int64(IntPtr ctx, long val);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_int(IntPtr ctx, int val);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_double(IntPtr ctx, double val);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_null(IntPtr stm);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_error(IntPtr ctx, string val);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_text(IntPtr ctx, string val);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_blob(IntPtr ctx, Byte[] blob);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_zeroblob(IntPtr ctx, int n);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_error_toobig(IntPtr ctx);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_error_nomem(IntPtr ctx);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_error_code(IntPtr ctx, int code);
    private sealed virtual override Byte[] SQLitePCL.ISQLite3Provider.sqlite3_value_blob(IntPtr p);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_value_bytes(IntPtr p);
    private sealed virtual override double SQLitePCL.ISQLite3Provider.sqlite3_value_double(IntPtr p);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_value_int(IntPtr p);
    private sealed virtual override long SQLitePCL.ISQLite3Provider.sqlite3_value_int64(IntPtr p);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_value_type(IntPtr p);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_value_text(IntPtr p);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_int(IntPtr stm, int paramIndex, int val);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_int64(IntPtr stm, int paramIndex, long val);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_text(IntPtr stm, int paramIndex, string t);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_double(IntPtr stm, int paramIndex, double val);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_blob(IntPtr stm, int paramIndex, Byte[] blob);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_blob(IntPtr stm, int paramIndex, Byte[] blob, int nSize);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_zeroblob(IntPtr stm, int paramIndex, int size);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_null(IntPtr stm, int paramIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_parameter_count(IntPtr stm);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_bind_parameter_name(IntPtr stm, int paramIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_parameter_index(IntPtr stm, string paramName);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_step(IntPtr stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_stmt_busy(IntPtr stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_stmt_readonly(IntPtr stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_column_int(IntPtr stm, int columnIndex);
    private sealed virtual override long SQLitePCL.ISQLite3Provider.sqlite3_column_int64(IntPtr stm, int columnIndex);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_column_text(IntPtr stm, int columnIndex);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_column_decltype(IntPtr stm, int columnIndex);
    private sealed virtual override double SQLitePCL.ISQLite3Provider.sqlite3_column_double(IntPtr stm, int columnIndex);
    private sealed virtual override Byte[] SQLitePCL.ISQLite3Provider.sqlite3_column_blob(IntPtr stm, int columnIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_column_blob(IntPtr stm, int columnIndex, Byte[] result, int offset);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_column_type(IntPtr stm, int columnIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_column_bytes(IntPtr stm, int columnIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_column_count(IntPtr stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_data_count(IntPtr stm);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_column_name(IntPtr stm, int columnIndex);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_column_origin_name(IntPtr stm, int columnIndex);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_column_table_name(IntPtr stm, int columnIndex);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_column_database_name(IntPtr stm, int columnIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_reset(IntPtr stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_clear_bindings(IntPtr stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_stmt_status(IntPtr stm, int op, int resetFlg);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_finalize(IntPtr stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_wal_autocheckpoint(IntPtr db, int n);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_wal_checkpoint(IntPtr db, string dbName);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_wal_checkpoint_v2(IntPtr db, string dbName, int eMode, Int32& logSize, Int32& framesCheckPointed);
}
internal class SQLitePCL.trace_hook_info : object {
    private delegate_trace _func;
    private object _user_data;
    private GCHandle _h;
    internal IntPtr ptr { get; }
    internal trace_hook_info(delegate_trace func, object v);
    internal IntPtr get_ptr();
    internal static trace_hook_info from_ptr(IntPtr p);
    internal void call(string s);
    internal void free();
}
internal class SQLitePCL.update_hook_info : object {
    private delegate_update _func;
    private object _user_data;
    private GCHandle _h;
    internal IntPtr ptr { get; }
    internal update_hook_info(delegate_update func, object v);
    internal IntPtr get_ptr();
    internal static update_hook_info from_ptr(IntPtr p);
    internal void call(int typ, string db, string tbl, long rowid);
    internal void free();
}
internal class SQLitePCL.util : object {
    internal static Byte[] to_utf8(string sourceText);
    private static int GetNativeUTF8Size(IntPtr nativeString);
    internal static string from_utf8(IntPtr nativeString);
    internal static string from_utf8(IntPtr nativeString, int size);
}
