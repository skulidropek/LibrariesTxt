[PreserveAttribute]
public class SQLitePCL.SQLite3Provider_e_sqlite3 : object {
    private static CallingConvention CALLING_CONVENTION;
    private static bool IsArm64cc;
    private callback_commit commit_hook_bridge;
    private callback_scalar_function scalar_function_hook_bridge;
    private static hook_handle disp_log_hook_handle;
    private callback_log log_hook_bridge;
    private callback_agg_function_step agg_function_step_hook_bridge;
    private callback_agg_function_final agg_function_final_hook_bridge;
    private callback_collation collation_hook_bridge;
    private callback_update update_hook_bridge;
    private callback_rollback rollback_hook_bridge;
    private callback_trace trace_hook_bridge;
    private callback_profile profile_hook_bridge;
    private callback_progress_handler progress_handler_hook_bridge;
    private callback_authorizer authorizer_hook_bridge;
    private static SQLite3Provider_e_sqlite3();
    private sealed virtual override string SQLitePCL.ISQLite3Provider.GetNativeLibraryName();
    private bool my_streq(IntPtr p, IntPtr q, int len);
    private hook_handles get_hooks(sqlite3 db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_win32_set_directory(int typ, utf8z path);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_open(utf8z filename, IntPtr& db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_open_v2(utf8z filename, IntPtr& db, int flags, utf8z vfs);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3__vfs__delete(utf8z vfs, utf8z filename, int syncDir);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_close_v2(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_close(IntPtr db);
    private sealed virtual override IntPtr SQLitePCL.ISQLite3Provider.sqlite3_malloc(int n);
    private sealed virtual override IntPtr SQLitePCL.ISQLite3Provider.sqlite3_malloc64(long n);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_free(IntPtr p);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_stricmp(IntPtr p, IntPtr q);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_strnicmp(IntPtr p, IntPtr q, int n);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_enable_shared_cache(int enable);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_interrupt(sqlite3 db);
    [MonoPInvokeCallbackAttribute("SQLitePCL.SQLite3Provider_e_sqlite3/NativeMethods/callback_exec")]
private static int exec_hook_bridge_impl(IntPtr p, int n, IntPtr values_ptr, IntPtr names_ptr);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_exec(sqlite3 db, utf8z sql, delegate_exec func, object user_data, IntPtr& errMsg);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_complete(utf8z sql);
    private sealed virtual override utf8z SQLitePCL.ISQLite3Provider.sqlite3_compileoption_get(int n);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_compileoption_used(utf8z s);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_table_column_metadata(sqlite3 db, utf8z dbName, utf8z tblName, utf8z colName, utf8z& dataType, utf8z& collSeq, Int32& notNull, Int32& primaryKey, Int32& autoInc);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_key(sqlite3 db, ReadOnlySpan`1<byte> k);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_key_v2(sqlite3 db, utf8z name, ReadOnlySpan`1<byte> k);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_rekey(sqlite3 db, ReadOnlySpan`1<byte> k);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_rekey_v2(sqlite3 db, utf8z name, ReadOnlySpan`1<byte> k);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_prepare_v2(sqlite3 db, ReadOnlySpan`1<byte> sql, IntPtr& stm, ReadOnlySpan`1& tail);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_prepare_v2(sqlite3 db, utf8z sql, IntPtr& stm, utf8z& tail);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_prepare_v3(sqlite3 db, ReadOnlySpan`1<byte> sql, UInt32 flags, IntPtr& stm, ReadOnlySpan`1& tail);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_prepare_v3(sqlite3 db, utf8z sql, UInt32 flags, IntPtr& stm, utf8z& tail);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_db_status(sqlite3 db, int op, Int32& current, Int32& highest, int resetFlg);
    private sealed virtual override utf8z SQLitePCL.ISQLite3Provider.sqlite3_sql(sqlite3_stmt stmt);
    private sealed virtual override IntPtr SQLitePCL.ISQLite3Provider.sqlite3_db_handle(IntPtr stmt);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_open(sqlite3 db, utf8z db_utf8, utf8z table_utf8, utf8z col_utf8, long rowid, int flags, sqlite3_blob& blob);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_bytes(sqlite3_blob blob);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_reopen(sqlite3_blob blob, long rowid);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_read(sqlite3_blob blob, Span`1<byte> b, int offset);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_write(sqlite3_blob blob, ReadOnlySpan`1<byte> b, int offset);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_close(IntPtr blob);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_snapshot_get(sqlite3 db, utf8z schema, IntPtr& snap);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_snapshot_cmp(sqlite3_snapshot p1, sqlite3_snapshot p2);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_snapshot_open(sqlite3 db, utf8z schema, sqlite3_snapshot snap);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_snapshot_recover(sqlite3 db, utf8z name);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_snapshot_free(IntPtr snap);
    private sealed virtual override sqlite3_backup SQLitePCL.ISQLite3Provider.sqlite3_backup_init(sqlite3 destDb, utf8z destName, sqlite3 sourceDb, utf8z sourceName);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_backup_step(sqlite3_backup backup, int nPage);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_backup_remaining(sqlite3_backup backup);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_backup_pagecount(sqlite3_backup backup);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_backup_finish(IntPtr backup);
    private sealed virtual override IntPtr SQLitePCL.ISQLite3Provider.sqlite3_next_stmt(sqlite3 db, IntPtr stmt);
    private sealed virtual override long SQLitePCL.ISQLite3Provider.sqlite3_last_insert_rowid(sqlite3 db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_changes(sqlite3 db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_total_changes(sqlite3 db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_extended_result_codes(sqlite3 db, int onoff);
    private sealed virtual override utf8z SQLitePCL.ISQLite3Provider.sqlite3_errstr(int rc);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_errcode(sqlite3 db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_extended_errcode(sqlite3 db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_busy_timeout(sqlite3 db, int ms);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_get_autocommit(sqlite3 db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_db_readonly(sqlite3 db, utf8z dbName);
    private sealed virtual override utf8z SQLitePCL.ISQLite3Provider.sqlite3_db_filename(sqlite3 db, utf8z att);
    private sealed virtual override utf8z SQLitePCL.ISQLite3Provider.sqlite3_errmsg(sqlite3 db);
    private sealed virtual override utf8z SQLitePCL.ISQLite3Provider.sqlite3_libversion();
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_libversion_number();
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_threadsafe();
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_config(int op);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_config(int op, int val);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_db_config(sqlite3 db, int op, utf8z val);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_db_config(sqlite3 db, int op, int val, Int32& result);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_db_config(sqlite3 db, int op, IntPtr ptr, int int0, int int1);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_limit(sqlite3 db, int id, int newVal);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_initialize();
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_shutdown();
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_enable_load_extension(sqlite3 db, int onoff);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_load_extension(sqlite3 db, utf8z zFile, utf8z zProc, utf8z& pzErrMsg);
    [MonoPInvokeCallbackAttribute("SQLitePCL.SQLite3Provider_e_sqlite3/NativeMethods/callback_commit")]
private static int commit_hook_bridge_impl(IntPtr p);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_commit_hook(sqlite3 db, delegate_commit func, object v);
    [MonoPInvokeCallbackAttribute("SQLitePCL.SQLite3Provider_e_sqlite3/NativeMethods/callback_scalar_function")]
private static void scalar_function_hook_bridge_impl(IntPtr context, int num_args, IntPtr argsptr);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_create_function(sqlite3 db, Byte[] name, int nargs, int flags, object v, delegate_function_scalar func);
    [MonoPInvokeCallbackAttribute("SQLitePCL.SQLite3Provider_e_sqlite3/NativeMethods/callback_log")]
private static void log_hook_bridge_impl(IntPtr p, int rc, IntPtr s);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_config_log(delegate_log func, object v);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_log(int errcode, utf8z s);
    [MonoPInvokeCallbackAttribute("SQLitePCL.SQLite3Provider_e_sqlite3/NativeMethods/callback_agg_function_step")]
private static void agg_function_step_hook_bridge_impl(IntPtr context, int num_args, IntPtr argsptr);
    [MonoPInvokeCallbackAttribute("SQLitePCL.SQLite3Provider_e_sqlite3/NativeMethods/callback_agg_function_final")]
private static void agg_function_final_hook_bridge_impl(IntPtr context);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_create_function(sqlite3 db, Byte[] name, int nargs, int flags, object v, delegate_function_aggregate_step func_step, delegate_function_aggregate_final func_final);
    [MonoPInvokeCallbackAttribute("SQLitePCL.SQLite3Provider_e_sqlite3/NativeMethods/callback_collation")]
private static int collation_hook_bridge_impl(IntPtr p, int len1, IntPtr pv1, int len2, IntPtr pv2);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_create_collation(sqlite3 db, Byte[] name, object v, delegate_collation func);
    [MonoPInvokeCallbackAttribute("SQLitePCL.SQLite3Provider_e_sqlite3/NativeMethods/callback_update")]
private static void update_hook_bridge_impl(IntPtr p, int typ, IntPtr db, IntPtr tbl, long rowid);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_update_hook(sqlite3 db, delegate_update func, object v);
    [MonoPInvokeCallbackAttribute("SQLitePCL.SQLite3Provider_e_sqlite3/NativeMethods/callback_rollback")]
private static void rollback_hook_bridge_impl(IntPtr p);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_rollback_hook(sqlite3 db, delegate_rollback func, object v);
    [MonoPInvokeCallbackAttribute("SQLitePCL.SQLite3Provider_e_sqlite3/NativeMethods/callback_trace")]
private static void trace_hook_bridge_impl(IntPtr p, IntPtr s);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_trace(sqlite3 db, delegate_trace func, object v);
    [MonoPInvokeCallbackAttribute("SQLitePCL.SQLite3Provider_e_sqlite3/NativeMethods/callback_profile")]
private static void profile_hook_bridge_impl(IntPtr p, IntPtr s, long elapsed);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_profile(sqlite3 db, delegate_profile func, object v);
    [MonoPInvokeCallbackAttribute("SQLitePCL.SQLite3Provider_e_sqlite3/NativeMethods/callback_progress_handler")]
private static int progress_handler_hook_bridge_impl(IntPtr p);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_progress_handler(sqlite3 db, int instructions, delegate_progress func, object v);
    [MonoPInvokeCallbackAttribute("SQLitePCL.SQLite3Provider_e_sqlite3/NativeMethods/callback_authorizer")]
private static int authorizer_hook_bridge_impl(IntPtr p, int action_code, IntPtr param0, IntPtr param1, IntPtr dbName, IntPtr inner_most_trigger_or_view);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_set_authorizer(sqlite3 db, delegate_authorizer func, object v);
    private sealed virtual override long SQLitePCL.ISQLite3Provider.sqlite3_memory_used();
    private sealed virtual override long SQLitePCL.ISQLite3Provider.sqlite3_memory_highwater(int resetFlag);
    private sealed virtual override long SQLitePCL.ISQLite3Provider.sqlite3_soft_heap_limit64(long n);
    private sealed virtual override long SQLitePCL.ISQLite3Provider.sqlite3_hard_heap_limit64(long n);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_status(int op, Int32& current, Int32& highwater, int resetFlag);
    private sealed virtual override utf8z SQLitePCL.ISQLite3Provider.sqlite3_sourceid();
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_int64(IntPtr ctx, long val);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_int(IntPtr ctx, int val);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_double(IntPtr ctx, double val);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_null(IntPtr stm);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_error(IntPtr ctx, ReadOnlySpan`1<byte> val);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_error(IntPtr ctx, utf8z val);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_text(IntPtr ctx, ReadOnlySpan`1<byte> val);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_text(IntPtr ctx, utf8z val);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_blob(IntPtr ctx, ReadOnlySpan`1<byte> blob);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_zeroblob(IntPtr ctx, int n);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_error_toobig(IntPtr ctx);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_error_nomem(IntPtr ctx);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_error_code(IntPtr ctx, int code);
    private sealed virtual override ReadOnlySpan`1<byte> SQLitePCL.ISQLite3Provider.sqlite3_value_blob(IntPtr p);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_value_bytes(IntPtr p);
    private sealed virtual override double SQLitePCL.ISQLite3Provider.sqlite3_value_double(IntPtr p);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_value_int(IntPtr p);
    private sealed virtual override long SQLitePCL.ISQLite3Provider.sqlite3_value_int64(IntPtr p);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_value_type(IntPtr p);
    private sealed virtual override utf8z SQLitePCL.ISQLite3Provider.sqlite3_value_text(IntPtr p);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_int(sqlite3_stmt stm, int paramIndex, int val);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_int64(sqlite3_stmt stm, int paramIndex, long val);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_text(sqlite3_stmt stm, int paramIndex, ReadOnlySpan`1<byte> t);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_text16(sqlite3_stmt stm, int paramIndex, ReadOnlySpan`1<char> t);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_text(sqlite3_stmt stm, int paramIndex, utf8z t);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_double(sqlite3_stmt stm, int paramIndex, double val);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_blob(sqlite3_stmt stm, int paramIndex, ReadOnlySpan`1<byte> blob);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_zeroblob(sqlite3_stmt stm, int paramIndex, int size);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_null(sqlite3_stmt stm, int paramIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_parameter_count(sqlite3_stmt stm);
    private sealed virtual override utf8z SQLitePCL.ISQLite3Provider.sqlite3_bind_parameter_name(sqlite3_stmt stm, int paramIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_parameter_index(sqlite3_stmt stm, utf8z paramName);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_step(sqlite3_stmt stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_stmt_isexplain(sqlite3_stmt stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_stmt_busy(sqlite3_stmt stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_stmt_readonly(sqlite3_stmt stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_column_int(sqlite3_stmt stm, int columnIndex);
    private sealed virtual override long SQLitePCL.ISQLite3Provider.sqlite3_column_int64(sqlite3_stmt stm, int columnIndex);
    private sealed virtual override utf8z SQLitePCL.ISQLite3Provider.sqlite3_column_text(sqlite3_stmt stm, int columnIndex);
    private sealed virtual override utf8z SQLitePCL.ISQLite3Provider.sqlite3_column_decltype(sqlite3_stmt stm, int columnIndex);
    private sealed virtual override double SQLitePCL.ISQLite3Provider.sqlite3_column_double(sqlite3_stmt stm, int columnIndex);
    private sealed virtual override ReadOnlySpan`1<byte> SQLitePCL.ISQLite3Provider.sqlite3_column_blob(sqlite3_stmt stm, int columnIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_column_type(sqlite3_stmt stm, int columnIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_column_bytes(sqlite3_stmt stm, int columnIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_column_count(sqlite3_stmt stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_data_count(sqlite3_stmt stm);
    private sealed virtual override utf8z SQLitePCL.ISQLite3Provider.sqlite3_column_name(sqlite3_stmt stm, int columnIndex);
    private sealed virtual override utf8z SQLitePCL.ISQLite3Provider.sqlite3_column_origin_name(sqlite3_stmt stm, int columnIndex);
    private sealed virtual override utf8z SQLitePCL.ISQLite3Provider.sqlite3_column_table_name(sqlite3_stmt stm, int columnIndex);
    private sealed virtual override utf8z SQLitePCL.ISQLite3Provider.sqlite3_column_database_name(sqlite3_stmt stm, int columnIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_reset(sqlite3_stmt stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_clear_bindings(sqlite3_stmt stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_stmt_status(sqlite3_stmt stm, int op, int resetFlg);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_finalize(IntPtr stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_wal_autocheckpoint(sqlite3 db, int n);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_wal_checkpoint(sqlite3 db, utf8z dbName);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_wal_checkpoint_v2(sqlite3 db, utf8z dbName, int eMode, Int32& logSize, Int32& framesCheckPointed);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_keyword_count();
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_keyword_name(int i, String& name);
    private sealed virtual override IntPtr SQLitePCL.ISQLite3Provider.sqlite3_serialize(sqlite3 db, utf8z schema, Int64& size, int flags);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_deserialize(sqlite3 db, utf8z schema, IntPtr data, long szDb, long szBuf, int flags);
    [CompilerGeneratedAttribute]
private hook_handles <get_hooks>b__4_0();
}
