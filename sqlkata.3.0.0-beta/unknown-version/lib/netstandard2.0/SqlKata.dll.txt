public abstract class SqlKata.AbstractClause : object {
    [CompilerGeneratedAttribute]
private string <Engine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Component>k__BackingField;
    public string Engine { get; public set; }
    public string Component { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Engine();
    [CompilerGeneratedAttribute]
public void set_Engine(string value);
    [CompilerGeneratedAttribute]
public string get_Component();
    [CompilerGeneratedAttribute]
public void set_Component(string value);
    public abstract virtual AbstractClause Clone();
}
public abstract class SqlKata.AbstractColumn : AbstractClause {
}
public abstract class SqlKata.AbstractCombine : AbstractClause {
}
public abstract class SqlKata.AbstractCondition : AbstractClause {
    [CompilerGeneratedAttribute]
private bool <IsOr>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNot>k__BackingField;
    public bool IsOr { get; public set; }
    public bool IsNot { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsOr();
    [CompilerGeneratedAttribute]
public void set_IsOr(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNot();
    [CompilerGeneratedAttribute]
public void set_IsNot(bool value);
}
public abstract class SqlKata.AbstractFrom : AbstractClause {
    protected string _alias;
    public string Alias { get; public set; }
    public virtual string get_Alias();
    public virtual void set_Alias(string value);
}
public abstract class SqlKata.AbstractInsertClause : AbstractClause {
}
public abstract class SqlKata.AbstractJoin : AbstractClause {
}
public abstract class SqlKata.AbstractOrderBy : AbstractClause {
}
public abstract class SqlKata.AbstractQuery : object {
    public AbstractQuery Parent;
}
public class SqlKata.AdHocTableFromClause : AbstractFrom {
    [CompilerGeneratedAttribute]
private List`1<string> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <Values>k__BackingField;
    public List`1<string> Columns { get; public set; }
    public List`1<object> Values { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<object> get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(List`1<object> value);
    public virtual AbstractClause Clone();
}
public class SqlKata.AggregateClause : AbstractClause {
    [CompilerGeneratedAttribute]
private List`1<string> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public List`1<string> Columns { get; public set; }
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    public virtual AbstractClause Clone();
}
public class SqlKata.AggregatedColumn : AbstractColumn {
    [CompilerGeneratedAttribute]
private Query <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Aggregate>k__BackingField;
    [CompilerGeneratedAttribute]
private AbstractColumn <Column>k__BackingField;
    public Query Filter { get; public set; }
    public string Aggregate { get; public set; }
    public AbstractColumn Column { get; public set; }
    [CompilerGeneratedAttribute]
public Query get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Query value);
    [CompilerGeneratedAttribute]
public string get_Aggregate();
    [CompilerGeneratedAttribute]
public void set_Aggregate(string value);
    [CompilerGeneratedAttribute]
public AbstractColumn get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(AbstractColumn value);
    public virtual AbstractClause Clone();
}
public class SqlKata.BaseJoin : AbstractJoin {
    [CompilerGeneratedAttribute]
private Join <Join>k__BackingField;
    public Join Join { get; public set; }
    [CompilerGeneratedAttribute]
public Join get_Join();
    [CompilerGeneratedAttribute]
public void set_Join(Join value);
    public virtual AbstractClause Clone();
}
public abstract class SqlKata.BaseQuery`1 : AbstractQuery {
    [CompilerGeneratedAttribute]
private List`1<AbstractClause> <Clauses>k__BackingField;
    private bool orFlag;
    private bool notFlag;
    public string EngineScope;
    public List`1<AbstractClause> Clauses { get; public set; }
    public Q Where(string column, string op, object value);
    public Q WhereNot(string column, string op, object value);
    public Q OrWhere(string column, string op, object value);
    public Q OrWhereNot(string column, string op, object value);
    public Q Where(string column, object value);
    public Q WhereNot(string column, object value);
    public Q OrWhere(string column, object value);
    public Q OrWhereNot(string column, object value);
    public Q Where(object constraints);
    public Q Where(IEnumerable`1<KeyValuePair`2<string, object>> values);
    public Q WhereRaw(string sql, Object[] bindings);
    public Q OrWhereRaw(string sql, Object[] bindings);
    public Q Where(Func`2<Q, Q> callback);
    public Q WhereNot(Func`2<Q, Q> callback);
    public Q OrWhere(Func`2<Q, Q> callback);
    public Q OrWhereNot(Func`2<Q, Q> callback);
    public Q WhereColumns(string first, string op, string second);
    public Q OrWhereColumns(string first, string op, string second);
    public Q WhereNull(string column);
    public Q WhereNotNull(string column);
    public Q OrWhereNull(string column);
    public Q OrWhereNotNull(string column);
    public Q WhereTrue(string column);
    public Q OrWhereTrue(string column);
    public Q WhereFalse(string column);
    public Q OrWhereFalse(string column);
    public Q WhereLike(string column, object value, bool caseSensitive, string escapeCharacter);
    public Q WhereNotLike(string column, object value, bool caseSensitive, string escapeCharacter);
    public Q OrWhereLike(string column, object value, bool caseSensitive, string escapeCharacter);
    public Q OrWhereNotLike(string column, object value, bool caseSensitive, string escapeCharacter);
    public Q WhereStarts(string column, object value, bool caseSensitive, string escapeCharacter);
    public Q WhereNotStarts(string column, object value, bool caseSensitive, string escapeCharacter);
    public Q OrWhereStarts(string column, object value, bool caseSensitive, string escapeCharacter);
    public Q OrWhereNotStarts(string column, object value, bool caseSensitive, string escapeCharacter);
    public Q WhereEnds(string column, object value, bool caseSensitive, string escapeCharacter);
    public Q WhereNotEnds(string column, object value, bool caseSensitive, string escapeCharacter);
    public Q OrWhereEnds(string column, object value, bool caseSensitive, string escapeCharacter);
    public Q OrWhereNotEnds(string column, object value, bool caseSensitive, string escapeCharacter);
    public Q WhereContains(string column, object value, bool caseSensitive, string escapeCharacter);
    public Q WhereNotContains(string column, object value, bool caseSensitive, string escapeCharacter);
    public Q OrWhereContains(string column, object value, bool caseSensitive, string escapeCharacter);
    public Q OrWhereNotContains(string column, object value, bool caseSensitive, string escapeCharacter);
    public Q WhereBetween(string column, T lower, T higher);
    public Q OrWhereBetween(string column, T lower, T higher);
    public Q WhereNotBetween(string column, T lower, T higher);
    public Q OrWhereNotBetween(string column, T lower, T higher);
    public Q WhereIn(string column, IEnumerable`1<T> values);
    public Q OrWhereIn(string column, IEnumerable`1<T> values);
    public Q WhereNotIn(string column, IEnumerable`1<T> values);
    public Q OrWhereNotIn(string column, IEnumerable`1<T> values);
    public Q WhereIn(string column, Query query);
    public Q WhereIn(string column, Func`2<Query, Query> callback);
    public Q OrWhereIn(string column, Query query);
    public Q OrWhereIn(string column, Func`2<Query, Query> callback);
    public Q WhereNotIn(string column, Query query);
    public Q WhereNotIn(string column, Func`2<Query, Query> callback);
    public Q OrWhereNotIn(string column, Query query);
    public Q OrWhereNotIn(string column, Func`2<Query, Query> callback);
    public Q Where(string column, string op, Func`2<Q, Q> callback);
    public Q Where(string column, string op, Query query);
    public Q WhereSub(Query query, object value);
    public Q WhereSub(Query query, string op, object value);
    public Q OrWhereSub(Query query, object value);
    public Q OrWhereSub(Query query, string op, object value);
    public Q OrWhere(string column, string op, Query query);
    public Q OrWhere(string column, string op, Func`2<Query, Query> callback);
    public Q WhereExists(Query query);
    public Q WhereExists(Func`2<Query, Query> callback);
    public Q WhereNotExists(Query query);
    public Q WhereNotExists(Func`2<Query, Query> callback);
    public Q OrWhereExists(Query query);
    public Q OrWhereExists(Func`2<Query, Query> callback);
    public Q OrWhereNotExists(Query query);
    public Q OrWhereNotExists(Func`2<Query, Query> callback);
    public Q WhereDatePart(string part, string column, string op, object value);
    public Q WhereNotDatePart(string part, string column, string op, object value);
    public Q OrWhereDatePart(string part, string column, string op, object value);
    public Q OrWhereNotDatePart(string part, string column, string op, object value);
    public Q WhereDate(string column, string op, object value);
    public Q WhereNotDate(string column, string op, object value);
    public Q OrWhereDate(string column, string op, object value);
    public Q OrWhereNotDate(string column, string op, object value);
    public Q WhereTime(string column, string op, object value);
    public Q WhereNotTime(string column, string op, object value);
    public Q OrWhereTime(string column, string op, object value);
    public Q OrWhereNotTime(string column, string op, object value);
    public Q WhereDatePart(string part, string column, object value);
    public Q WhereNotDatePart(string part, string column, object value);
    public Q OrWhereDatePart(string part, string column, object value);
    public Q OrWhereNotDatePart(string part, string column, object value);
    public Q WhereDate(string column, object value);
    public Q WhereNotDate(string column, object value);
    public Q OrWhereDate(string column, object value);
    public Q OrWhereNotDate(string column, object value);
    public Q WhereTime(string column, object value);
    public Q WhereNotTime(string column, object value);
    public Q OrWhereTime(string column, object value);
    public Q OrWhereNotTime(string column, object value);
    [CompilerGeneratedAttribute]
public List`1<AbstractClause> get_Clauses();
    [CompilerGeneratedAttribute]
public void set_Clauses(List`1<AbstractClause> value);
    public Q SetEngineScope(string engine);
    public virtual Q Clone();
    public Q SetParent(AbstractQuery parent);
    public abstract virtual Q NewQuery();
    public Q NewChild();
    public Q AddComponent(string component, AbstractClause clause, string engineCode);
    public Q AddOrReplaceComponent(string component, AbstractClause clause, string engineCode);
    public List`1<C> GetComponents(string component, string engineCode);
    public List`1<AbstractClause> GetComponents(string component, string engineCode);
    public C GetOneComponent(string component, string engineCode);
    public AbstractClause GetOneComponent(string component, string engineCode);
    public bool HasComponent(string component, string engineCode);
    public Q ClearComponent(string component, string engineCode);
    protected Q And();
    public Q Or();
    public Q Not(bool flag);
    protected bool GetOr();
    protected bool GetNot();
    public Q From(string table);
    public Q From(Query query, string alias);
    public Q FromRaw(string sql, Object[] bindings);
    public Q From(Func`2<Query, Query> callback, string alias);
}
public class SqlKata.BasicCondition : AbstractCondition {
    [CompilerGeneratedAttribute]
private string <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Column { get; public set; }
    public string Operator { get; public set; }
    public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(string value);
    [CompilerGeneratedAttribute]
public string get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(string value);
    [CompilerGeneratedAttribute]
public virtual object get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(object value);
    public virtual AbstractClause Clone();
}
public class SqlKata.BasicDateCondition : BasicCondition {
    [CompilerGeneratedAttribute]
private string <Part>k__BackingField;
    public string Part { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Part();
    [CompilerGeneratedAttribute]
public void set_Part(string value);
    public virtual AbstractClause Clone();
}
public class SqlKata.BasicStringCondition : BasicCondition {
    [CompilerGeneratedAttribute]
private bool <CaseSensitive>k__BackingField;
    private string escapeCharacter;
    public bool CaseSensitive { get; public set; }
    public string EscapeCharacter { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
public void set_CaseSensitive(bool value);
    public string get_EscapeCharacter();
    public void set_EscapeCharacter(string value);
    public virtual AbstractClause Clone();
}
public class SqlKata.BetweenCondition`1 : AbstractCondition {
    [CompilerGeneratedAttribute]
private string <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Higher>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Lower>k__BackingField;
    public string Column { get; public set; }
    public T Higher { get; public set; }
    public T Lower { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(string value);
    [CompilerGeneratedAttribute]
public T get_Higher();
    [CompilerGeneratedAttribute]
public void set_Higher(T value);
    [CompilerGeneratedAttribute]
public T get_Lower();
    [CompilerGeneratedAttribute]
public void set_Lower(T value);
    public virtual AbstractClause Clone();
}
public class SqlKata.BooleanCondition : AbstractCondition {
    [CompilerGeneratedAttribute]
private string <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    public string Column { get; public set; }
    public bool Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(string value);
    [CompilerGeneratedAttribute]
public bool get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(bool value);
    public virtual AbstractClause Clone();
}
public class SqlKata.Column : AbstractColumn {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual AbstractClause Clone();
}
public class SqlKata.ColumnAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public ColumnAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
public class SqlKata.Combine : AbstractCombine {
    [CompilerGeneratedAttribute]
private Query <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <All>k__BackingField;
    public Query Query { get; public set; }
    public string Operation { get; public set; }
    public bool All { get; public set; }
    [CompilerGeneratedAttribute]
public Query get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(Query value);
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public bool get_All();
    [CompilerGeneratedAttribute]
public void set_All(bool value);
    public virtual AbstractClause Clone();
}
public class SqlKata.Compilers.Compiler : object {
    private ConditionsCompilerProvider _compileConditionMethodsProvider;
    [CompilerGeneratedAttribute]
private string <parameterPlaceholder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <parameterPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OpeningIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClosingIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnAsKeyword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableAsKeyword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EscapeCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SingleInsertStartClause>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MultiInsertStartClause>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EngineCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsFilterClause>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmitSelectInsideExists>k__BackingField;
    protected HashSet`1<string> operators;
    protected HashSet`1<string> userOperators;
    protected string parameterPlaceholder { get; protected set; }
    protected string parameterPrefix { get; protected set; }
    protected string OpeningIdentifier { get; protected set; }
    protected string ClosingIdentifier { get; protected set; }
    protected string ColumnAsKeyword { get; protected set; }
    protected string TableAsKeyword { get; protected set; }
    protected string LastId { get; protected set; }
    protected string EscapeCharacter { get; protected set; }
    protected string SingleInsertStartClause { get; protected set; }
    protected string MultiInsertStartClause { get; protected set; }
    public string EngineCode { get; }
    public bool SupportsFilterClause { get; public set; }
    public bool OmitSelectInsideExists { get; public set; }
    protected string SingleRowDummyTableName { get; }
    protected virtual MethodInfo FindCompilerMethodInfo(Type clauseType, string methodName);
    protected virtual string CompileCondition(SqlResult ctx, AbstractCondition clause);
    protected virtual string CompileConditions(SqlResult ctx, List`1<AbstractCondition> conditions);
    protected virtual string CompileRawCondition(SqlResult ctx, RawCondition x);
    protected virtual string CompileQueryCondition(SqlResult ctx, QueryCondition`1<T> x);
    protected virtual string CompileSubQueryCondition(SqlResult ctx, SubQueryCondition`1<T> x);
    protected virtual string CompileBasicCondition(SqlResult ctx, BasicCondition x);
    protected virtual string CompileBasicStringCondition(SqlResult ctx, BasicStringCondition x);
    protected virtual string CompileBasicDateCondition(SqlResult ctx, BasicDateCondition x);
    protected virtual string CompileNestedCondition(SqlResult ctx, NestedCondition`1<Q> x);
    protected string CompileTwoColumnsCondition(SqlResult ctx, TwoColumnsCondition clause);
    protected virtual string CompileBetweenCondition(SqlResult ctx, BetweenCondition`1<T> item);
    protected virtual string CompileInCondition(SqlResult ctx, InCondition`1<T> item);
    protected virtual string CompileInQueryCondition(SqlResult ctx, InQueryCondition item);
    protected virtual string CompileNullCondition(SqlResult ctx, NullCondition item);
    protected virtual string CompileBooleanCondition(SqlResult ctx, BooleanCondition item);
    protected virtual string CompileExistsCondition(SqlResult ctx, ExistsCondition item);
    [CompilerGeneratedAttribute]
protected virtual string get_parameterPlaceholder();
    [CompilerGeneratedAttribute]
protected virtual void set_parameterPlaceholder(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_parameterPrefix();
    [CompilerGeneratedAttribute]
protected virtual void set_parameterPrefix(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_OpeningIdentifier();
    [CompilerGeneratedAttribute]
protected virtual void set_OpeningIdentifier(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_ClosingIdentifier();
    [CompilerGeneratedAttribute]
protected virtual void set_ClosingIdentifier(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_ColumnAsKeyword();
    [CompilerGeneratedAttribute]
protected virtual void set_ColumnAsKeyword(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_TableAsKeyword();
    [CompilerGeneratedAttribute]
protected virtual void set_TableAsKeyword(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_LastId();
    [CompilerGeneratedAttribute]
protected virtual void set_LastId(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_EscapeCharacter();
    [CompilerGeneratedAttribute]
protected virtual void set_EscapeCharacter(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_SingleInsertStartClause();
    [CompilerGeneratedAttribute]
protected virtual void set_SingleInsertStartClause(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_MultiInsertStartClause();
    [CompilerGeneratedAttribute]
protected virtual void set_MultiInsertStartClause(string value);
    [CompilerGeneratedAttribute]
public virtual string get_EngineCode();
    [CompilerGeneratedAttribute]
public virtual bool get_SupportsFilterClause();
    [CompilerGeneratedAttribute]
public virtual void set_SupportsFilterClause(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_OmitSelectInsideExists();
    [CompilerGeneratedAttribute]
public virtual void set_OmitSelectInsideExists(bool value);
    protected virtual string get_SingleRowDummyTableName();
    protected Dictionary`2<string, object> generateNamedBindings(Object[] bindings);
    protected SqlResult PrepareResult(SqlResult ctx);
    private Query TransformAggregateQuery(Query query);
    protected virtual SqlResult CompileRaw(Query query);
    public Compiler Whitelist(String[] operators);
    public virtual SqlResult Compile(Query query);
    public virtual SqlResult Compile(IEnumerable`1<Query> queries);
    protected virtual SqlResult CompileSelectQuery(Query query);
    protected virtual SqlResult CompileAdHocQuery(AdHocTableFromClause adHoc);
    protected virtual SqlResult CompileDeleteQuery(Query query);
    protected virtual SqlResult CompileUpdateQuery(Query query);
    protected virtual SqlResult CompileInsertQuery(Query query);
    protected virtual SqlResult CompileInsertQueryClause(SqlResult ctx, string table, InsertQueryClause clause);
    protected virtual SqlResult CompileValueInsertClauses(SqlResult ctx, string table, IEnumerable`1<InsertClause> insertClauses);
    protected virtual SqlResult CompileRemainingInsertClauses(SqlResult ctx, string table, IEnumerable`1<InsertClause> inserts);
    protected string GetInsertColumnsList(List`1<string> columnList);
    protected virtual SqlResult CompileCteQuery(SqlResult ctx, Query query);
    public virtual string CompileColumn(SqlResult ctx, AbstractColumn column);
    protected virtual string CompileFilterConditions(SqlResult ctx, AggregatedColumn aggregatedColumn);
    public virtual SqlResult CompileCte(AbstractFrom cte);
    protected virtual SqlResult OnBeforeSelect(SqlResult ctx);
    protected virtual string CompileColumns(SqlResult ctx);
    public virtual string CompileUnion(SqlResult ctx);
    public virtual string CompileTableExpression(SqlResult ctx, AbstractFrom from);
    public virtual string CompileFrom(SqlResult ctx);
    public virtual string CompileJoins(SqlResult ctx);
    public virtual string CompileJoin(SqlResult ctx, Join join, bool isNested);
    public virtual string CompileWheres(SqlResult ctx);
    public virtual string CompileGroups(SqlResult ctx);
    public virtual string CompileOrders(SqlResult ctx);
    public virtual string CompileHaving(SqlResult ctx);
    public virtual string CompileLimit(SqlResult ctx);
    public virtual string CompileRandom(string seed);
    public virtual string CompileLower(string value);
    public virtual string CompileUpper(string value);
    public virtual string CompileTrue();
    public virtual string CompileFalse();
    private InvalidCastException InvalidClauseException(string section, AbstractClause clause);
    protected string checkOperator(string op);
    public virtual string Wrap(string value);
    public virtual ValueTuple`2<string, string> SplitAlias(string value);
    public virtual string WrapValue(string value);
    public virtual object Resolve(SqlResult ctx, object parameter);
    public virtual string Parameter(SqlResult ctx, object parameter);
    public virtual string Parameterize(SqlResult ctx, IEnumerable`1<T> values);
    public virtual List`1<string> WrapArray(List`1<string> values);
    public virtual string WrapIdentifiers(string input);
    [CompilerGeneratedAttribute]
private string <generateNamedBindings>b__74_1(<>f__AnonymousType0`2<int, object> x);
    [CompilerGeneratedAttribute]
private string <PrepareResult>b__75_0(int i);
    [CompilerGeneratedAttribute]
private string <CompileAdHocQuery>b__82_0(string col);
    [CompilerGeneratedAttribute]
private string <Wrap>b__113_0(string x, int index);
    [CompilerGeneratedAttribute]
private string <WrapArray>b__119_0(string x);
}
internal class SqlKata.Compilers.ConditionsCompilerProvider : object {
    private Type compilerType;
    private Dictionary`2<string, MethodInfo> methodsCache;
    private object syncRoot;
    public ConditionsCompilerProvider(Compiler compiler);
    public MethodInfo GetMethodInfo(Type clauseType, string methodName);
    private MethodInfo FindMethodInfo(Type clauseType, string methodName);
}
public class SqlKata.Compilers.CteFinder : object {
    private Query query;
    private string engineCode;
    private HashSet`1<string> namesOfPreviousCtes;
    private List`1<AbstractFrom> orderedCteList;
    public CteFinder(Query query, string engineCode);
    public List`1<AbstractFrom> Find();
    private List`1<AbstractFrom> findInternal(Query queryToSearch);
}
public static class SqlKata.Compilers.EngineCodes : object {
    public static string Firebird;
    public static string Generic;
    public static string MySql;
    public static string Oracle;
    public static string PostgreSql;
    public static string Sqlite;
    public static string SqlServer;
}
public class SqlKata.Compilers.FirebirdCompiler : Compiler {
    [CompilerGeneratedAttribute]
private string <EngineCode>k__BackingField;
    public string EngineCode { get; }
    protected string SingleRowDummyTableName { get; }
    [CompilerGeneratedAttribute]
public virtual string get_EngineCode();
    protected virtual string get_SingleRowDummyTableName();
    protected virtual SqlResult CompileInsertQuery(Query query);
    public virtual string CompileLimit(SqlResult ctx);
    protected virtual string CompileColumns(SqlResult ctx);
    protected virtual string CompileBasicDateCondition(SqlResult ctx, BasicDateCondition condition);
    public virtual string WrapValue(string value);
    public virtual string CompileTrue();
    public virtual string CompileFalse();
}
public class SqlKata.Compilers.MySqlCompiler : Compiler {
    [CompilerGeneratedAttribute]
private string <EngineCode>k__BackingField;
    public string EngineCode { get; }
    [CompilerGeneratedAttribute]
public virtual string get_EngineCode();
    public virtual string CompileLimit(SqlResult ctx);
}
public class SqlKata.Compilers.OracleCompiler : Compiler {
    [CompilerGeneratedAttribute]
private string <EngineCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLegacyPagination>k__BackingField;
    public string EngineCode { get; }
    public bool UseLegacyPagination { get; public set; }
    protected string SingleRowDummyTableName { get; }
    [CompilerGeneratedAttribute]
public virtual string get_EngineCode();
    [CompilerGeneratedAttribute]
public bool get_UseLegacyPagination();
    [CompilerGeneratedAttribute]
public void set_UseLegacyPagination(bool value);
    protected virtual string get_SingleRowDummyTableName();
    protected virtual SqlResult CompileSelectQuery(Query query);
    public virtual string CompileLimit(SqlResult ctx);
    internal void ApplyLegacyLimit(SqlResult ctx);
    protected virtual string CompileBasicDateCondition(SqlResult ctx, BasicDateCondition condition);
    protected virtual SqlResult CompileRemainingInsertClauses(SqlResult ctx, string table, IEnumerable`1<InsertClause> inserts);
}
public class SqlKata.Compilers.PostgresCompiler : Compiler {
    [CompilerGeneratedAttribute]
private string <EngineCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsFilterClause>k__BackingField;
    public string EngineCode { get; }
    public bool SupportsFilterClause { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_EngineCode();
    [CompilerGeneratedAttribute]
public virtual bool get_SupportsFilterClause();
    [CompilerGeneratedAttribute]
public virtual void set_SupportsFilterClause(bool value);
    protected virtual string CompileBasicStringCondition(SqlResult ctx, BasicStringCondition x);
    protected virtual string CompileBasicDateCondition(SqlResult ctx, BasicDateCondition condition);
}
public class SqlKata.Compilers.SqliteCompiler : Compiler {
    [CompilerGeneratedAttribute]
private string <EngineCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OpeningIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClosingIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsFilterClause>k__BackingField;
    public string EngineCode { get; }
    protected string OpeningIdentifier { get; protected set; }
    protected string ClosingIdentifier { get; protected set; }
    protected string LastId { get; protected set; }
    public bool SupportsFilterClause { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_EngineCode();
    [CompilerGeneratedAttribute]
protected virtual string get_OpeningIdentifier();
    [CompilerGeneratedAttribute]
protected virtual void set_OpeningIdentifier(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_ClosingIdentifier();
    [CompilerGeneratedAttribute]
protected virtual void set_ClosingIdentifier(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_LastId();
    [CompilerGeneratedAttribute]
protected virtual void set_LastId(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_SupportsFilterClause();
    [CompilerGeneratedAttribute]
public virtual void set_SupportsFilterClause(bool value);
    public virtual string CompileTrue();
    public virtual string CompileFalse();
    public virtual string CompileLimit(SqlResult ctx);
    protected virtual string CompileBasicDateCondition(SqlResult ctx, BasicDateCondition condition);
}
public class SqlKata.Compilers.SqlServerCompiler : Compiler {
    [CompilerGeneratedAttribute]
private string <EngineCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLegacyPagination>k__BackingField;
    public string EngineCode { get; }
    public bool UseLegacyPagination { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_EngineCode();
    [CompilerGeneratedAttribute]
public bool get_UseLegacyPagination();
    [CompilerGeneratedAttribute]
public void set_UseLegacyPagination(bool value);
    protected virtual SqlResult CompileSelectQuery(Query query);
    protected virtual string CompileColumns(SqlResult ctx);
    public virtual string CompileLimit(SqlResult ctx);
    public virtual string CompileRandom(string seed);
    public virtual string CompileTrue();
    public virtual string CompileFalse();
    protected virtual string CompileBasicDateCondition(SqlResult ctx, BasicDateCondition condition);
    protected virtual SqlResult CompileAdHocQuery(AdHocTableFromClause adHoc);
}
public class SqlKata.DeepJoin : AbstractJoin {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceKeySuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <SourceKeyGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <TargetKeyGenerator>k__BackingField;
    public string Type { get; public set; }
    public string Expression { get; public set; }
    public string SourceKeySuffix { get; public set; }
    public string TargetKey { get; public set; }
    public Func`2<string, string> SourceKeyGenerator { get; public set; }
    public Func`2<string, string> TargetKeyGenerator { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public string get_SourceKeySuffix();
    [CompilerGeneratedAttribute]
public void set_SourceKeySuffix(string value);
    [CompilerGeneratedAttribute]
public string get_TargetKey();
    [CompilerGeneratedAttribute]
public void set_TargetKey(string value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_SourceKeyGenerator();
    [CompilerGeneratedAttribute]
public void set_SourceKeyGenerator(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_TargetKeyGenerator();
    [CompilerGeneratedAttribute]
public void set_TargetKeyGenerator(Func`2<string, string> value);
    public virtual AbstractClause Clone();
}
public class SqlKata.ExistsCondition : AbstractCondition {
    [CompilerGeneratedAttribute]
private Query <Query>k__BackingField;
    public Query Query { get; public set; }
    [CompilerGeneratedAttribute]
public Query get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(Query value);
    public virtual AbstractClause Clone();
}
public static class SqlKata.Expressions : object {
    public static Variable Variable(string name);
    public static UnsafeLiteral UnsafeLiteral(string value, bool replaceQuotes);
}
[ExtensionAttribute]
public static class SqlKata.Extensions.QueryForExtensions : object {
    [ExtensionAttribute]
public static Query ForFirebird(Query src, Func`2<Query, Query> fn);
    [ExtensionAttribute]
public static Query ForMySql(Query src, Func`2<Query, Query> fn);
    [ExtensionAttribute]
public static Query ForOracle(Query src, Func`2<Query, Query> fn);
    [ExtensionAttribute]
public static Query ForPostgreSql(Query src, Func`2<Query, Query> fn);
    [ExtensionAttribute]
public static Query ForSqlite(Query src, Func`2<Query, Query> fn);
    [ExtensionAttribute]
public static Query ForSqlServer(Query src, Func`2<Query, Query> fn);
}
public class SqlKata.FromClause : AbstractFrom {
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    public string Table { get; public set; }
    public string Alias { get; }
    [CompilerGeneratedAttribute]
public string get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(string value);
    public virtual string get_Alias();
    public virtual AbstractClause Clone();
}
[ExtensionAttribute]
public static class SqlKata.Helper : object {
    public static bool IsArray(object value);
    [IteratorStateMachineAttribute("SqlKata.Helper/<Flatten>d__1")]
public static IEnumerable`1<object> Flatten(IEnumerable`1<object> array);
    public static IEnumerable`1<object> FlattenDeep(IEnumerable`1<object> array);
    [IteratorStateMachineAttribute("SqlKata.Helper/<AllIndexesOf>d__3")]
public static IEnumerable`1<int> AllIndexesOf(string str, string value);
    public static string ReplaceAll(string subject, string match, Func`2<int, string> callback);
    public static string JoinArray(string glue, IEnumerable array);
    public static string ExpandParameters(string sql, string placeholder, Object[] bindings);
    public static int EnumerableCount(IEnumerable obj);
    public static List`1<string> ExpandExpression(string expression);
    [ExtensionAttribute]
public static IEnumerable`1<string> Repeat(string str, int count);
    [ExtensionAttribute]
public static string ReplaceIdentifierUnlessEscaped(string input, string escapeCharacter, string identifier, string newIdentifier);
}
public class SqlKata.IgnoreAttribute : Attribute {
}
public class SqlKata.Include : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Query <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForeignKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMany>k__BackingField;
    public string Name { get; public set; }
    public Query Query { get; public set; }
    public string ForeignKey { get; public set; }
    public string LocalKey { get; public set; }
    public bool IsMany { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Query get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(Query value);
    [CompilerGeneratedAttribute]
public string get_ForeignKey();
    [CompilerGeneratedAttribute]
public void set_ForeignKey(string value);
    [CompilerGeneratedAttribute]
public string get_LocalKey();
    [CompilerGeneratedAttribute]
public void set_LocalKey(string value);
    [CompilerGeneratedAttribute]
public bool get_IsMany();
    [CompilerGeneratedAttribute]
public void set_IsMany(bool value);
}
public class SqlKata.InCondition`1 : AbstractCondition {
    [CompilerGeneratedAttribute]
private string <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Values>k__BackingField;
    public string Column { get; public set; }
    public IEnumerable`1<T> Values { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(IEnumerable`1<T> value);
    public virtual AbstractClause Clone();
}
public class SqlKata.IncrementClause : InsertClause {
    [CompilerGeneratedAttribute]
private string <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    public string Column { get; public set; }
    public int Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(string value);
    [CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(int value);
    public virtual AbstractClause Clone();
}
public class SqlKata.InQueryCondition : AbstractCondition {
    [CompilerGeneratedAttribute]
private Query <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Column>k__BackingField;
    public Query Query { get; public set; }
    public string Column { get; public set; }
    [CompilerGeneratedAttribute]
public Query get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(Query value);
    [CompilerGeneratedAttribute]
public string get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(string value);
    public virtual AbstractClause Clone();
}
public class SqlKata.InsertClause : AbstractInsertClause {
    [CompilerGeneratedAttribute]
private List`1<string> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnId>k__BackingField;
    public List`1<string> Columns { get; public set; }
    public List`1<object> Values { get; public set; }
    public bool ReturnId { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<object> get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(List`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_ReturnId();
    [CompilerGeneratedAttribute]
public void set_ReturnId(bool value);
    public virtual AbstractClause Clone();
}
public class SqlKata.InsertQueryClause : AbstractInsertClause {
    [CompilerGeneratedAttribute]
private List`1<string> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private Query <Query>k__BackingField;
    public List`1<string> Columns { get; public set; }
    public Query Query { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(List`1<string> value);
    [CompilerGeneratedAttribute]
public Query get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(Query value);
    public virtual AbstractClause Clone();
}
public class SqlKata.Join : BaseQuery`1<Join> {
    protected string _type;
    public string Type { get; public set; }
    public string get_Type();
    public void set_Type(string value);
    public virtual Join Clone();
    public Join AsType(string type);
    public Join JoinWith(string table);
    public Join JoinWith(Query query);
    public Join JoinWith(Func`2<Query, Query> callback);
    public Join AsInner();
    public Join AsOuter();
    public Join AsLeft();
    public Join AsRight();
    public Join AsCross();
    public Join On(string first, string second, string op);
    public Join OrOn(string first, string second, string op);
    public virtual Join NewQuery();
}
public class SqlKata.KeyAttribute : ColumnAttribute {
    public KeyAttribute(string name);
}
public class SqlKata.LimitClause : AbstractClause {
    private int _limit;
    public int Limit { get; public set; }
    public int get_Limit();
    public void set_Limit(int value);
    public bool HasLimit();
    public LimitClause Clear();
    public virtual AbstractClause Clone();
}
public class SqlKata.NestedCondition`1 : AbstractCondition {
    [CompilerGeneratedAttribute]
private T <Query>k__BackingField;
    public T Query { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(T value);
    public virtual AbstractClause Clone();
}
public class SqlKata.NullCondition : AbstractCondition {
    [CompilerGeneratedAttribute]
private string <Column>k__BackingField;
    public string Column { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(string value);
    public virtual AbstractClause Clone();
}
public class SqlKata.OffsetClause : AbstractClause {
    private long _offset;
    public long Offset { get; public set; }
    public long get_Offset();
    public void set_Offset(long value);
    public bool HasOffset();
    public OffsetClause Clear();
    public virtual AbstractClause Clone();
}
public class SqlKata.OrderBy : AbstractOrderBy {
    [CompilerGeneratedAttribute]
private string <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ascending>k__BackingField;
    public string Column { get; public set; }
    public bool Ascending { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(string value);
    [CompilerGeneratedAttribute]
public bool get_Ascending();
    [CompilerGeneratedAttribute]
public void set_Ascending(bool value);
    public virtual AbstractClause Clone();
}
public class SqlKata.OrderByRandom : AbstractOrderBy {
    public virtual AbstractClause Clone();
}
public class SqlKata.Query : BaseQuery`1<Query> {
    private string comment;
    [CompilerGeneratedAttribute]
private bool <IsDistinct>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    public List`1<Include> Includes;
    public Dictionary`2<string, object> Variables;
    private static ConcurrentDictionary`2<Type, PropertyInfo[]> CacheDictionaryProperties;
    public bool IsDistinct { get; public set; }
    public string QueryAlias { get; public set; }
    public string Method { get; public set; }
    public Query(string table, string comment);
    private static Query();
    public Query AsAggregate(string type, String[] columns);
    public Query AsCount(String[] columns);
    public Query AsAvg(string column);
    public Query AsAverage(string column);
    public Query AsSum(string column);
    public Query AsMax(string column);
    public Query AsMin(string column);
    public Query Combine(string operation, bool all, Query query);
    public Query CombineRaw(string sql, Object[] bindings);
    public Query Union(Query query, bool all);
    public Query UnionAll(Query query);
    public Query Union(Func`2<Query, Query> callback, bool all);
    public Query UnionAll(Func`2<Query, Query> callback);
    public Query UnionRaw(string sql, Object[] bindings);
    public Query Except(Query query, bool all);
    public Query ExceptAll(Query query);
    public Query Except(Func`2<Query, Query> callback, bool all);
    public Query ExceptAll(Func`2<Query, Query> callback);
    public Query ExceptRaw(string sql, Object[] bindings);
    public Query Intersect(Query query, bool all);
    public Query IntersectAll(Query query);
    public Query Intersect(Func`2<Query, Query> callback, bool all);
    public Query IntersectAll(Func`2<Query, Query> callback);
    public Query IntersectRaw(string sql, Object[] bindings);
    [CompilerGeneratedAttribute]
public bool get_IsDistinct();
    [CompilerGeneratedAttribute]
public void set_IsDistinct(bool value);
    [CompilerGeneratedAttribute]
public string get_QueryAlias();
    [CompilerGeneratedAttribute]
public void set_QueryAlias(string value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    public string GetComment();
    public bool HasOffset(string engineCode);
    public bool HasLimit(string engineCode);
    internal long GetOffset(string engineCode);
    internal int GetLimit(string engineCode);
    public virtual Query Clone();
    public Query As(string alias);
    public Query Comment(string comment);
    public Query For(string engine, Func`2<Query, Query> fn);
    public Query With(Query query);
    public Query With(Func`2<Query, Query> fn);
    public Query With(string alias, Query query);
    public Query With(string alias, Func`2<Query, Query> fn);
    public Query With(string alias, IEnumerable`1<string> columns, IEnumerable`1<IEnumerable`1<object>> valuesCollection);
    public Query WithRaw(string alias, string sql, Object[] bindings);
    public Query Limit(int value);
    public Query Offset(long value);
    public Query Offset(int value);
    public Query Take(int limit);
    public Query Skip(int offset);
    public Query ForPage(int page, int perPage);
    public Query Distinct();
    public Query When(bool condition, Func`2<Query, Query> whenTrue, Func`2<Query, Query> whenFalse);
    public Query WhenNot(bool condition, Func`2<Query, Query> callback);
    public Query OrderBy(String[] columns);
    public Query OrderByDesc(String[] columns);
    public Query OrderByRaw(string expression, Object[] bindings);
    public Query OrderByRandom(string seed);
    public Query GroupBy(String[] columns);
    public Query GroupByRaw(string expression, Object[] bindings);
    public virtual Query NewQuery();
    public Query Include(string relationName, Query query, string foreignKey, string localKey, bool isMany);
    public Query IncludeMany(string relationName, Query query, string foreignKey, string localKey);
    public Query Define(string variable, object value);
    public object FindVariable(string variable);
    private IEnumerable`1<KeyValuePair`2<string, object>> BuildKeyValuePairsFromObject(object data, bool considerKeys);
    public Query AsDelete();
    public Query Having(string column, string op, object value);
    public Query HavingNot(string column, string op, object value);
    public Query OrHaving(string column, string op, object value);
    public Query OrHavingNot(string column, string op, object value);
    public Query Having(string column, object value);
    public Query HavingNot(string column, object value);
    public Query OrHaving(string column, object value);
    public Query OrHavingNot(string column, object value);
    public Query Having(object constraints);
    public Query Having(IEnumerable`1<KeyValuePair`2<string, object>> values);
    public Query HavingRaw(string sql, Object[] bindings);
    public Query OrHavingRaw(string sql, Object[] bindings);
    public Query Having(Func`2<Query, Query> callback);
    public Query HavingNot(Func`2<Query, Query> callback);
    public Query OrHaving(Func`2<Query, Query> callback);
    public Query OrHavingNot(Func`2<Query, Query> callback);
    public Query HavingColumns(string first, string op, string second);
    public Query OrHavingColumns(string first, string op, string second);
    public Query HavingNull(string column);
    public Query HavingNotNull(string column);
    public Query OrHavingNull(string column);
    public Query OrHavingNotNull(string column);
    public Query HavingTrue(string column);
    public Query OrHavingTrue(string column);
    public Query HavingFalse(string column);
    public Query OrHavingFalse(string column);
    public Query HavingLike(string column, object value, bool caseSensitive, string escapeCharacter);
    public Query HavingNotLike(string column, object value, bool caseSensitive, string escapeCharacter);
    public Query OrHavingLike(string column, object value, bool caseSensitive, string escapeCharacter);
    public Query OrHavingNotLike(string column, object value, bool caseSensitive, string escapeCharacter);
    public Query HavingStarts(string column, object value, bool caseSensitive, string escapeCharacter);
    public Query HavingNotStarts(string column, object value, bool caseSensitive, string escapeCharacter);
    public Query OrHavingStarts(string column, object value, bool caseSensitive, string escapeCharacter);
    public Query OrHavingNotStarts(string column, object value, bool caseSensitive, string escapeCharacter);
    public Query HavingEnds(string column, object value, bool caseSensitive, string escapeCharacter);
    public Query HavingNotEnds(string column, object value, bool caseSensitive, string escapeCharacter);
    public Query OrHavingEnds(string column, object value, bool caseSensitive, string escapeCharacter);
    public Query OrHavingNotEnds(string column, object value, bool caseSensitive, string escapeCharacter);
    public Query HavingContains(string column, object value, bool caseSensitive, string escapeCharacter);
    public Query HavingNotContains(string column, object value, bool caseSensitive, string escapeCharacter);
    public Query OrHavingContains(string column, object value, bool caseSensitive, string escapeCharacter);
    public Query OrHavingNotContains(string column, object value, bool caseSensitive, string escapeCharacter);
    public Query HavingBetween(string column, T lower, T higher);
    public Query OrHavingBetween(string column, T lower, T higher);
    public Query HavingNotBetween(string column, T lower, T higher);
    public Query OrHavingNotBetween(string column, T lower, T higher);
    public Query HavingIn(string column, IEnumerable`1<T> values);
    public Query OrHavingIn(string column, IEnumerable`1<T> values);
    public Query HavingNotIn(string column, IEnumerable`1<T> values);
    public Query OrHavingNotIn(string column, IEnumerable`1<T> values);
    public Query HavingIn(string column, Query query);
    public Query HavingIn(string column, Func`2<Query, Query> callback);
    public Query OrHavingIn(string column, Query query);
    public Query OrHavingIn(string column, Func`2<Query, Query> callback);
    public Query HavingNotIn(string column, Query query);
    public Query HavingNotIn(string column, Func`2<Query, Query> callback);
    public Query OrHavingNotIn(string column, Query query);
    public Query OrHavingNotIn(string column, Func`2<Query, Query> callback);
    public Query Having(string column, string op, Func`2<Query, Query> callback);
    public Query Having(string column, string op, Query query);
    public Query OrHaving(string column, string op, Query query);
    public Query OrHaving(string column, string op, Func`2<Query, Query> callback);
    public Query HavingExists(Query query);
    public Query HavingExists(Func`2<Query, Query> callback);
    public Query HavingNotExists(Query query);
    public Query HavingNotExists(Func`2<Query, Query> callback);
    public Query OrHavingExists(Query query);
    public Query OrHavingExists(Func`2<Query, Query> callback);
    public Query OrHavingNotExists(Query query);
    public Query OrHavingNotExists(Func`2<Query, Query> callback);
    public Query HavingDatePart(string part, string column, string op, object value);
    public Query HavingNotDatePart(string part, string column, string op, object value);
    public Query OrHavingDatePart(string part, string column, string op, object value);
    public Query OrHavingNotDatePart(string part, string column, string op, object value);
    public Query HavingDate(string column, string op, object value);
    public Query HavingNotDate(string column, string op, object value);
    public Query OrHavingDate(string column, string op, object value);
    public Query OrHavingNotDate(string column, string op, object value);
    public Query HavingTime(string column, string op, object value);
    public Query HavingNotTime(string column, string op, object value);
    public Query OrHavingTime(string column, string op, object value);
    public Query OrHavingNotTime(string column, string op, object value);
    public Query HavingDatePart(string part, string column, object value);
    public Query HavingNotDatePart(string part, string column, object value);
    public Query OrHavingDatePart(string part, string column, object value);
    public Query OrHavingNotDatePart(string part, string column, object value);
    public Query HavingDate(string column, object value);
    public Query HavingNotDate(string column, object value);
    public Query OrHavingDate(string column, object value);
    public Query OrHavingNotDate(string column, object value);
    public Query HavingTime(string column, object value);
    public Query HavingNotTime(string column, object value);
    public Query OrHavingTime(string column, object value);
    public Query OrHavingNotTime(string column, object value);
    public Query AsInsert(object data, bool returnId);
    public Query AsInsert(IEnumerable`1<string> columns, IEnumerable`1<object> values);
    public Query AsInsert(IEnumerable`1<KeyValuePair`2<string, object>> values, bool returnId);
    public Query AsInsert(IEnumerable`1<string> columns, IEnumerable`1<IEnumerable`1<object>> rowsValues);
    public Query AsInsert(IEnumerable`1<string> columns, Query query);
    private Query Join(Func`2<Join, Join> callback);
    public Query Join(string table, string first, string second, string op, string type);
    public Query Join(string table, Func`2<Join, Join> callback, string type);
    public Query Join(Query query, Func`2<Join, Join> onCallback, string type);
    public Query LeftJoin(string table, string first, string second, string op);
    public Query LeftJoin(string table, Func`2<Join, Join> callback);
    public Query LeftJoin(Query query, Func`2<Join, Join> onCallback);
    public Query RightJoin(string table, string first, string second, string op);
    public Query RightJoin(string table, Func`2<Join, Join> callback);
    public Query RightJoin(Query query, Func`2<Join, Join> onCallback);
    public Query CrossJoin(string table);
    public Query Select(String[] columns);
    public Query Select(IEnumerable`1<string> columns);
    public Query SelectRaw(string sql, Object[] bindings);
    public Query Select(Query query, string alias);
    public Query Select(Func`2<Query, Query> callback, string alias);
    public Query SelectAggregate(string aggregate, string column, Query filter);
    public Query SelectAggregate(string aggregate, string column, Func`2<Query, Query> filter);
    public Query SelectSum(string column, Func`2<Query, Query> filter);
    public Query SelectCount(string column, Func`2<Query, Query> filter);
    public Query SelectAvg(string column, Func`2<Query, Query> filter);
    public Query SelectMin(string column, Func`2<Query, Query> filter);
    public Query SelectMax(string column, Func`2<Query, Query> filter);
    public Query AsUpdate(object data);
    public Query AsUpdate(IEnumerable`1<string> columns, IEnumerable`1<object> values);
    public Query AsUpdate(IEnumerable`1<KeyValuePair`2<string, object>> values);
    public Query AsIncrement(string column, int value);
    public Query AsDecrement(string column, int value);
}
public class SqlKata.QueryColumn : AbstractColumn {
    [CompilerGeneratedAttribute]
private Query <Query>k__BackingField;
    public Query Query { get; public set; }
    [CompilerGeneratedAttribute]
public Query get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(Query value);
    public virtual AbstractClause Clone();
}
public class SqlKata.QueryCondition`1 : AbstractCondition {
    [CompilerGeneratedAttribute]
private string <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private Query <Query>k__BackingField;
    public string Column { get; public set; }
    public string Operator { get; public set; }
    public Query Query { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(string value);
    [CompilerGeneratedAttribute]
public string get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(string value);
    [CompilerGeneratedAttribute]
public Query get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(Query value);
    public virtual AbstractClause Clone();
}
public class SqlKata.QueryFromClause : AbstractFrom {
    [CompilerGeneratedAttribute]
private Query <Query>k__BackingField;
    public Query Query { get; public set; }
    public string Alias { get; }
    [CompilerGeneratedAttribute]
public Query get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(Query value);
    public virtual string get_Alias();
    public virtual AbstractClause Clone();
}
public class SqlKata.RawColumn : AbstractColumn {
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Bindings>k__BackingField;
    public string Expression { get; public set; }
    public Object[] Bindings { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public void set_Bindings(Object[] value);
    [CompilerGeneratedAttribute]
public Object[] get_Bindings();
    public virtual AbstractClause Clone();
}
public class SqlKata.RawCombine : AbstractCombine {
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Bindings>k__BackingField;
    public string Expression { get; public set; }
    public Object[] Bindings { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public Object[] get_Bindings();
    [CompilerGeneratedAttribute]
public void set_Bindings(Object[] value);
    public virtual AbstractClause Clone();
}
public class SqlKata.RawCondition : AbstractCondition {
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Bindings>k__BackingField;
    public string Expression { get; public set; }
    public Object[] Bindings { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public void set_Bindings(Object[] value);
    [CompilerGeneratedAttribute]
public Object[] get_Bindings();
    public virtual AbstractClause Clone();
}
public class SqlKata.RawFromClause : AbstractFrom {
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Bindings>k__BackingField;
    public string Expression { get; public set; }
    public Object[] Bindings { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public void set_Bindings(Object[] value);
    [CompilerGeneratedAttribute]
public Object[] get_Bindings();
    public virtual AbstractClause Clone();
}
public class SqlKata.RawOrderBy : AbstractOrderBy {
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Bindings>k__BackingField;
    public string Expression { get; public set; }
    public Object[] Bindings { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public void set_Bindings(Object[] value);
    [CompilerGeneratedAttribute]
public Object[] get_Bindings();
    public virtual AbstractClause Clone();
}
public class SqlKata.SqlResult : object {
    [CompilerGeneratedAttribute]
private Query <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawSql>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <Bindings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    public Dictionary`2<string, object> NamedBindings;
    private static Type[] NumberTypes;
    public Query Query { get; public set; }
    public string RawSql { get; public set; }
    public List`1<object> Bindings { get; public set; }
    public string Sql { get; public set; }
    private static SqlResult();
    [CompilerGeneratedAttribute]
public Query get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(Query value);
    [CompilerGeneratedAttribute]
public string get_RawSql();
    [CompilerGeneratedAttribute]
public void set_RawSql(string value);
    [CompilerGeneratedAttribute]
public List`1<object> get_Bindings();
    [CompilerGeneratedAttribute]
public void set_Bindings(List`1<object> value);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
    public virtual string ToString();
    private string ChangeToSqlValue(object value);
}
public class SqlKata.SubQueryCondition`1 : AbstractCondition {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private Query <Query>k__BackingField;
    public object Value { get; public set; }
    public string Operator { get; public set; }
    public Query Query { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public string get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(string value);
    [CompilerGeneratedAttribute]
public Query get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(Query value);
    public virtual AbstractClause Clone();
}
public class SqlKata.TwoColumnsCondition : AbstractCondition {
    [CompilerGeneratedAttribute]
private string <First>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Second>k__BackingField;
    public string First { get; public set; }
    public string Operator { get; public set; }
    public string Second { get; public set; }
    [CompilerGeneratedAttribute]
public string get_First();
    [CompilerGeneratedAttribute]
public void set_First(string value);
    [CompilerGeneratedAttribute]
public string get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(string value);
    [CompilerGeneratedAttribute]
public string get_Second();
    [CompilerGeneratedAttribute]
public void set_Second(string value);
    public virtual AbstractClause Clone();
}
public class SqlKata.UnsafeLiteral : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; public set; }
    public UnsafeLiteral(string value, bool replaceQuotes);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class SqlKata.Variable : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public Variable(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
