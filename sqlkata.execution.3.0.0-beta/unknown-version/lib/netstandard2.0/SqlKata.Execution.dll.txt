public class SqlKata.Execution.InsertGetIdRow`1 : object {
    [CompilerGeneratedAttribute]
private T <Id>k__BackingField;
    public T Id { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(T value);
}
public class SqlKata.Execution.PaginationIterator`1 : object {
    [CompilerGeneratedAttribute]
private PaginationResult`1<T> <FirstPage>k__BackingField;
    [CompilerGeneratedAttribute]
private PaginationResult`1<T> <CurrentPage>k__BackingField;
    public PaginationResult`1<T> FirstPage { get; public set; }
    public PaginationResult`1<T> CurrentPage { get; public set; }
    [CompilerGeneratedAttribute]
public PaginationResult`1<T> get_FirstPage();
    [CompilerGeneratedAttribute]
public void set_FirstPage(PaginationResult`1<T> value);
    [CompilerGeneratedAttribute]
public PaginationResult`1<T> get_CurrentPage();
    [CompilerGeneratedAttribute]
public void set_CurrentPage(PaginationResult`1<T> value);
    [IteratorStateMachineAttribute("SqlKata.Execution.PaginationIterator`1/<GetEnumerator>d__8")]
public sealed virtual IEnumerator`1<PaginationResult`1<T>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class SqlKata.Execution.PaginationResult`1 : object {
    [CompilerGeneratedAttribute]
private Query <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <List>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PerPage>k__BackingField;
    public Query Query { get; public set; }
    public long Count { get; public set; }
    public IEnumerable`1<T> List { get; public set; }
    public int Page { get; public set; }
    public int PerPage { get; public set; }
    public int TotalPages { get; }
    public bool IsFirst { get; }
    public bool IsLast { get; }
    public bool HasNext { get; }
    public bool HasPrevious { get; }
    public PaginationIterator`1<T> Each { get; }
    [CompilerGeneratedAttribute]
public Query get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(Query value);
    [CompilerGeneratedAttribute]
public long get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(long value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_List();
    [CompilerGeneratedAttribute]
public void set_List(IEnumerable`1<T> value);
    [CompilerGeneratedAttribute]
public int get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(int value);
    [CompilerGeneratedAttribute]
public int get_PerPage();
    [CompilerGeneratedAttribute]
public void set_PerPage(int value);
    public int get_TotalPages();
    public bool get_IsFirst();
    public bool get_IsLast();
    public bool get_HasNext();
    public bool get_HasPrevious();
    public Query NextQuery();
    public PaginationResult`1<T> Next(IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.PaginationResult`1/<NextAsync>d__32")]
public Task`1<PaginationResult`1<T>> NextAsync(IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public Query PreviousQuery();
    public PaginationResult`1<T> Previous(IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.PaginationResult`1/<PreviousAsync>d__35")]
public Task`1<PaginationResult`1<T>> PreviousAsync(IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public PaginationIterator`1<T> get_Each();
}
[ExtensionAttribute]
public static class SqlKata.Execution.QueryExtensions : object {
    [ExtensionAttribute]
public static bool Exists(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<ExistsAsync>d__1")]
[ExtensionAttribute]
public static Task`1<bool> ExistsAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool NotExist(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<NotExistAsync>d__3")]
[ExtensionAttribute]
public static Task`1<bool> NotExistAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IEnumerable`1<T> Get(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<GetAsync>d__5`1")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> GetAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IEnumerable`1<object> Get(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<GetAsync>d__7")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> GetAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static T FirstOrDefault(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<FirstOrDefaultAsync>d__9`1")]
[ExtensionAttribute]
public static Task`1<T> FirstOrDefaultAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static object FirstOrDefault(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<FirstOrDefaultAsync>d__11")]
[ExtensionAttribute]
public static Task`1<object> FirstOrDefaultAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static T First(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<FirstAsync>d__13`1")]
[ExtensionAttribute]
public static Task`1<T> FirstAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static object First(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<FirstAsync>d__15")]
[ExtensionAttribute]
public static Task`1<object> FirstAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static PaginationResult`1<T> Paginate(Query query, int page, int perPage, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<PaginateAsync>d__17`1")]
[ExtensionAttribute]
public static Task`1<PaginationResult`1<T>> PaginateAsync(Query query, int page, int perPage, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static PaginationResult`1<object> Paginate(Query query, int page, int perPage, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<PaginateAsync>d__19")]
[ExtensionAttribute]
public static Task`1<PaginationResult`1<object>> PaginateAsync(Query query, int page, int perPage, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Chunk(Query query, int chunkSize, Func`3<IEnumerable`1<T>, int, bool> func, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<ChunkAsync>d__21`1")]
[ExtensionAttribute]
public static Task ChunkAsync(Query query, int chunkSize, Func`3<IEnumerable`1<T>, int, bool> func, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Chunk(Query query, int chunkSize, Func`3<IEnumerable`1<object>, int, bool> func, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<ChunkAsync>d__23")]
[ExtensionAttribute]
public static Task ChunkAsync(Query query, int chunkSize, Func`3<IEnumerable`1<object>, int, bool> func, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Chunk(Query query, int chunkSize, Action`2<IEnumerable`1<T>, int> action, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<ChunkAsync>d__25`1")]
[ExtensionAttribute]
public static Task ChunkAsync(Query query, int chunkSize, Action`2<IEnumerable`1<T>, int> action, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void Chunk(Query query, int chunkSize, Action`2<IEnumerable`1<object>, int> action, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<ChunkAsync>d__27")]
[ExtensionAttribute]
public static Task ChunkAsync(Query query, int chunkSize, Action`2<IEnumerable`1<object>, int> action, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int Insert(Query query, IEnumerable`1<KeyValuePair`2<string, object>> values, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<InsertAsync>d__29")]
[ExtensionAttribute]
public static Task`1<int> InsertAsync(Query query, IEnumerable`1<KeyValuePair`2<string, object>> values, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int Insert(Query query, IEnumerable`1<string> columns, IEnumerable`1<IEnumerable`1<object>> valuesCollection, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<InsertAsync>d__31")]
[ExtensionAttribute]
public static Task`1<int> InsertAsync(Query query, IEnumerable`1<string> columns, IEnumerable`1<IEnumerable`1<object>> valuesCollection, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int Insert(Query query, IEnumerable`1<string> columns, Query fromQuery, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<InsertAsync>d__33")]
[ExtensionAttribute]
public static Task`1<int> InsertAsync(Query query, IEnumerable`1<string> columns, Query fromQuery, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int Insert(Query query, object data, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<InsertAsync>d__35")]
[ExtensionAttribute]
public static Task`1<int> InsertAsync(Query query, object data, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static T InsertGetId(Query query, object data, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<InsertGetIdAsync>d__37`1")]
[ExtensionAttribute]
public static Task`1<T> InsertGetIdAsync(Query query, object data, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static T InsertGetId(Query query, IEnumerable`1<KeyValuePair`2<string, object>> data, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<InsertGetIdAsync>d__39`1")]
[ExtensionAttribute]
public static Task`1<T> InsertGetIdAsync(Query query, IEnumerable`1<KeyValuePair`2<string, object>> data, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int Update(Query query, IEnumerable`1<KeyValuePair`2<string, object>> values, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<UpdateAsync>d__41")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(Query query, IEnumerable`1<KeyValuePair`2<string, object>> values, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int Update(Query query, object data, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<UpdateAsync>d__43")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(Query query, object data, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int Increment(Query query, string column, int value, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<IncrementAsync>d__45")]
[ExtensionAttribute]
public static Task`1<int> IncrementAsync(Query query, string column, int value, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int Decrement(Query query, string column, int value, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<DecrementAsync>d__47")]
[ExtensionAttribute]
public static Task`1<int> DecrementAsync(Query query, string column, int value, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int Delete(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<DeleteAsync>d__49")]
[ExtensionAttribute]
public static Task`1<int> DeleteAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static T Aggregate(Query query, string aggregateOperation, String[] columns, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<AggregateAsync>d__51`1")]
[ExtensionAttribute]
public static Task`1<T> AggregateAsync(Query query, string aggregateOperation, String[] columns, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static T Count(Query query, String[] columns, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<CountAsync>d__53`1")]
[ExtensionAttribute]
public static Task`1<T> CountAsync(Query query, String[] columns, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static T Average(Query query, string column, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<AverageAsync>d__55`1")]
[ExtensionAttribute]
public static Task`1<T> AverageAsync(Query query, string column, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static T Sum(Query query, string column, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<SumAsync>d__57`1")]
[ExtensionAttribute]
public static Task`1<T> SumAsync(Query query, string column, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static T Min(Query query, string column, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<MinAsync>d__59`1")]
[ExtensionAttribute]
public static Task`1<T> MinAsync(Query query, string column, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static T Max(Query query, string column, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryExtensions/<MaxAsync>d__61`1")]
[ExtensionAttribute]
public static Task`1<T> MaxAsync(Query query, string column, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    internal static XQuery CastToXQuery(Query query, string method);
    internal static QueryFactory CreateQueryFactory(XQuery xQuery);
    internal static QueryFactory CreateQueryFactory(Query query);
}
public class SqlKata.Execution.QueryFactory : object {
    [CompilerGeneratedAttribute]
private IDbConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private Compiler <Compiler>k__BackingField;
    public Action`1<SqlResult> Logger;
    private bool disposedValue;
    [CompilerGeneratedAttribute]
private int <QueryTimeout>k__BackingField;
    public IDbConnection Connection { get; public set; }
    public Compiler Compiler { get; public set; }
    public int QueryTimeout { get; public set; }
    public QueryFactory(IDbConnection connection, Compiler compiler, int timeout);
    [CompilerGeneratedAttribute]
public IDbConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(IDbConnection value);
    [CompilerGeneratedAttribute]
public Compiler get_Compiler();
    [CompilerGeneratedAttribute]
public void set_Compiler(Compiler value);
    [CompilerGeneratedAttribute]
public int get_QueryTimeout();
    [CompilerGeneratedAttribute]
public void set_QueryTimeout(int value);
    public Query Query();
    public Query Query(string table);
    public Query FromQuery(Query query);
    public IEnumerable`1<T> Get(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<GetAsync>d__20`1")]
public Task`1<IEnumerable`1<T>> GetAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public IEnumerable`1<IDictionary`2<string, object>> GetDictionary(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<GetDictionaryAsync>d__22")]
public Task`1<IEnumerable`1<IDictionary`2<string, object>>> GetDictionaryAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public IEnumerable`1<object> Get(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<GetAsync>d__24")]
public Task`1<IEnumerable`1<object>> GetAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public T FirstOrDefault(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<FirstOrDefaultAsync>d__26`1")]
public Task`1<T> FirstOrDefaultAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public object FirstOrDefault(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<FirstOrDefaultAsync>d__28")]
public Task`1<object> FirstOrDefaultAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public T First(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<FirstAsync>d__30`1")]
public Task`1<T> FirstAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public object First(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<FirstAsync>d__32")]
public Task`1<object> FirstAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public int Execute(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<ExecuteAsync>d__34")]
public Task`1<int> ExecuteAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public T ExecuteScalar(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<ExecuteScalarAsync>d__36`1")]
public Task`1<T> ExecuteScalarAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public GridReader GetMultiple(Query[] queries, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<GetMultipleAsync>d__38`1")]
public Task`1<GridReader> GetMultipleAsync(Query[] queries, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("SqlKata.Execution.QueryFactory/<Get>d__39`1")]
public IEnumerable`1<IEnumerable`1<T>> Get(Query[] queries, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<GetAsync>d__40`1")]
public Task`1<IEnumerable`1<IEnumerable`1<T>>> GetAsync(Query[] queries, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public bool Exists(Query query, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<ExistsAsync>d__42")]
public Task`1<bool> ExistsAsync(Query query, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public T Aggregate(Query query, string aggregateOperation, String[] columns, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<AggregateAsync>d__44`1")]
public Task`1<T> AggregateAsync(Query query, string aggregateOperation, String[] columns, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public T Count(Query query, String[] columns, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<CountAsync>d__46`1")]
public Task`1<T> CountAsync(Query query, String[] columns, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public T Average(Query query, string column, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<AverageAsync>d__48`1")]
public Task`1<T> AverageAsync(Query query, string column, CancellationToken cancellationToken);
    public T Sum(Query query, string column);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<SumAsync>d__50`1")]
public Task`1<T> SumAsync(Query query, string column, CancellationToken cancellationToken);
    public T Min(Query query, string column);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<MinAsync>d__52`1")]
public Task`1<T> MinAsync(Query query, string column, CancellationToken cancellationToken);
    public T Max(Query query, string column);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<MaxAsync>d__54`1")]
public Task`1<T> MaxAsync(Query query, string column, CancellationToken cancellationToken);
    public PaginationResult`1<T> Paginate(Query query, int page, int perPage, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<PaginateAsync>d__56`1")]
public Task`1<PaginationResult`1<T>> PaginateAsync(Query query, int page, int perPage, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public void Chunk(Query query, int chunkSize, Func`3<IEnumerable`1<T>, int, bool> func, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<ChunkAsync>d__58`1")]
public Task ChunkAsync(Query query, int chunkSize, Func`3<IEnumerable`1<T>, int, bool> func, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public void Chunk(Query query, int chunkSize, Action`2<IEnumerable`1<T>, int> action, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<ChunkAsync>d__60`1")]
public Task ChunkAsync(Query query, int chunkSize, Action`2<IEnumerable`1<T>, int> action, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public IEnumerable`1<T> Select(string sql, object param, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<SelectAsync>d__62`1")]
public Task`1<IEnumerable`1<T>> SelectAsync(string sql, object param, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public IEnumerable`1<object> Select(string sql, object param, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<SelectAsync>d__64")]
public Task`1<IEnumerable`1<object>> SelectAsync(string sql, object param, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    public int Statement(string sql, object param, IDbTransaction transaction, Nullable`1<int> timeout);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<StatementAsync>d__66")]
public Task`1<int> StatementAsync(string sql, object param, IDbTransaction transaction, Nullable`1<int> timeout, CancellationToken cancellationToken);
    private static IEnumerable`1<T> handleIncludes(Query query, IEnumerable`1<T> result);
    [AsyncStateMachineAttribute("SqlKata.Execution.QueryFactory/<handleIncludesAsync>d__68`1")]
private static Task`1<IEnumerable`1<T>> handleIncludesAsync(Query query, IEnumerable`1<T> result, CancellationToken cancellationToken);
    internal SqlResult CompileAndLog(Query query);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class SqlKata.Execution.XQuery : Query {
    [CompilerGeneratedAttribute]
private IDbConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private Compiler <Compiler>k__BackingField;
    public Action`1<SqlResult> Logger;
    [CompilerGeneratedAttribute]
private QueryFactory <QueryFactory>k__BackingField;
    public IDbConnection Connection { get; public set; }
    public Compiler Compiler { get; public set; }
    public QueryFactory QueryFactory { get; public set; }
    public XQuery(IDbConnection connection, Compiler compiler);
    [CompilerGeneratedAttribute]
public IDbConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(IDbConnection value);
    [CompilerGeneratedAttribute]
public Compiler get_Compiler();
    [CompilerGeneratedAttribute]
public void set_Compiler(Compiler value);
    [CompilerGeneratedAttribute]
public QueryFactory get_QueryFactory();
    [CompilerGeneratedAttribute]
public void set_QueryFactory(QueryFactory value);
    public virtual Query Clone();
}
