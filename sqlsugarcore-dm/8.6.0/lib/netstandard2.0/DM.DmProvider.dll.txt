internal class A.a : object {
    internal virtual void A(b , int , bool , bool );
    internal virtual b a(b , int , bool , bool );
}
internal class A.A : object {
    private int A;
    private DmConnInstance A;
    private B A;
    internal b A;
    internal b a;
    private DmInfo A;
    private DmResultSetCache A;
    internal DmDataReader A;
    private string A;
    private string a;
    private bool A;
    private string B;
    private bool a;
    private byte A;
    private bool B;
    internal bool b;
    private bool C;
    private DmCommand A;
    private long A;
    private bool c;
    private bool D;
    private bool d;
    private bool E;
    private int a;
    public A(DmConnInstance , DmCommand );
    internal int A();
    internal void A(int );
    internal string a();
    internal void A(string );
    internal string B();
    internal void a(string );
    public bool b();
    public void A(bool );
    public string C();
    public void B(string );
    internal bool c();
    internal void a(bool );
    public byte D();
    public void A(byte );
    public void B(bool );
    public bool d();
    internal bool E();
    internal void b(bool );
    internal bool e();
    internal void C(bool );
    internal DmInfo F();
    internal void A(DmInfo );
    internal DmCommand f();
    internal void A(DmCommand );
    internal DmConnInstance G();
    internal int g();
    internal void a(int );
    internal DmInfo H();
    internal B h();
    internal int I();
    internal void B(int );
    internal bool i();
    internal void c(bool );
    internal bool J();
    internal void D(bool );
    public bool j();
    public void d(bool );
    internal void K();
    internal void b(int );
    private void k();
    internal void b(string );
    internal string L();
    internal void A(CommandBehavior );
    public DmResultSetCache l();
    public void A(DmResultSetCache );
    public DmDataReader A(string , CommandBehavior );
    public int C(string );
    public void c(string );
    public DmDataReader a(CommandBehavior );
    public int M();
    internal DmInfo m();
    private void N();
    public void n();
    public void O();
    public void o();
    public bool P();
    public void p();
    public void A(bool , bool );
    private void Q();
    internal void D(string );
    internal string q();
    internal long R();
}
internal class A.b : object {
    private Byte[] A;
    private int A;
    private int a;
    internal b(Byte[] );
    internal Byte[] A();
    internal int a();
    internal void A(int );
    private static void A(String[] );
    internal void a(int );
    internal void B(int );
    internal byte b(int );
    internal short C(int );
    internal int c(int );
    internal int D(int );
    internal long d(int );
    internal long E(int );
    internal Byte[] A(int , int );
    internal string A(int , int , string );
    internal byte B();
    internal short b();
    internal int C();
    internal long c();
    internal long D();
    internal Byte[] e(int );
    internal string A(int , string );
    internal string A(string );
    internal string a(string );
    internal string B(string );
    internal void F(int );
    internal void f(int );
    public void A(byte , int );
    public void a(int , int );
    public void B(int , int );
    public void b(int , int );
    public void A(long , int );
    public void A(int , Byte[] , int );
    public void A(int , Byte[] , int , int );
    internal void A(byte );
    internal void A(short );
    internal void G(int );
    internal void A(long );
    internal void A(Byte[] , int , int );
    internal void A(Byte[] , int );
    internal void A(Byte[] );
    internal void a(Byte[] );
    internal void B(Byte[] );
    internal void A(string , string );
    internal void a(string , string );
    public byte d();
    public bool E();
    public short g(int );
    public bool H(int );
    public short h(int );
    public short I(int );
    public short i(int );
    public short J(int );
    public short j(int );
    public int K(int );
    public int k(int );
    public int L(int );
    public void C(int , int );
    public void A(int , Byte[] );
    public void A(DmError , string );
    public void l(int );
    public void a(short );
    public short e();
    public void F();
    public int f();
    public void a(byte );
    public int G();
    public short g();
    public int H();
    public void M(int );
    public int h();
    public int I();
    public byte i();
    public void m(int );
    public void N(int );
    public void B(byte );
    public void b(byte );
    public void C(byte );
    public void n(int );
    public int J();
    public int j();
    public int K();
    public int k();
    public int L();
    public byte l();
    public byte M();
    public byte m();
    public byte N();
    public short n();
    public void O(int );
    public void o(int );
    public void P(int );
    public void c(byte );
    public void D(byte );
    public void B(short );
    public void p(int );
    public void d(byte );
    public void E(byte );
    public void e(byte );
    public void F(byte );
    public void f(byte );
    public int O();
    public int o();
    public byte P();
    public int p();
    public byte Q();
    public byte q();
    public byte R();
    public short r();
    public byte S();
    public byte s();
    public int T();
    public byte t();
    public byte U();
    public byte u();
    public int V();
    public int v();
    public void G(byte );
    public byte W();
    public void g(byte );
    public void H(byte );
    public void h(byte );
    public void I(byte );
    public void i(byte );
    public void b(short );
    public void a(long );
    public void J(byte );
    public void C(short );
    public void Q(int );
    public short w();
    public int X();
    public short x();
    public int Y();
    public void j(byte );
    public void q(int );
    public void K(byte );
    public void B(long );
    public void b(long );
    public void C(long );
    public void A(bool );
    public void R(int );
    public void r(int );
    public short y();
    public short Z();
    public long z();
    public int aA();
    public byte aa();
    public int aB();
    public int ab();
    public long aC();
    public byte ac();
    public short aD();
    public int ad();
    public int aE();
    public int ae();
    public void c(short );
    public void D(short );
    public void c(long );
    public void D(long );
    public void d(short );
    public void S(int );
    public long aF();
    public int af();
    public void E(short );
    public void s(int );
    public void T(int );
    public void t(int );
    public void U(int );
    public void u(int );
    public void V(int );
    public void e(short );
    public short aG();
}
internal class A.B : object {
    private ILogger A;
    private DmConnInstance A;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) A;
    private int A;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) a;
    private object A;
    private bool A;
    private DmConnProperty A;
    private D A;
    internal B(b , b , DmConnInstance );
    public D A();
    public void A(D );
    public DmConnProperty a();
    public void A(DmConnProperty );
    public bool B();
    public void A(bool );
    internal bool b();
    internal void C();
    private void c();
    private b A(b , b , int );
    internal void A(b , b );
    public b a(b , b );
    internal void A(string );
    public void A(A , b , b , Boolean& );
    public void A(b , b , A );
    public void A(b , b , A , string , bool , int );
    public void A(b , b , A , string , bool , int , bool );
    public void A(A , DmInfo );
    public void A(int , A , DmParameterInternal[] );
    public bool A(A , DmResultSetCache , short , long , long );
    public void B(b , b );
    public void b(b , b );
    public void A(A );
    public void A(b , b , A , string );
    public void A(b , b , A , short , Byte[] , int , int );
    public Byte[] A(b , b , A , short , Byte[] , int , int , Byte[] );
    public long A(DmLob );
    public int A(DmLob , byte , int , Byte[] , int , int , byte );
    public void A(DmLob , byte , int );
    public Byte[] A(DmLob , long , int );
    public void A(A , short );
    public Int64[] A(DmResultSetCache );
    private void A(b , A , b , int , long , int );
    public DmInfo A(A , DmInfo , short );
    public bool D();
    internal void d();
    public void E();
    public void A(A , int , DmParameterInternal );
    public Byte[] a(A , int , DmParameterInternal );
    public void B(A , int , DmParameterInternal );
    public Byte[] b(A , int , DmParameterInternal );
    public string a(DmLob , long , int );
    private bool A(int , b , A );
    private void A(b );
    public int a(DmLob , byte , int );
    public Byte[] A(DmLob , byte , int , int );
    public int a(DmLob , byte , int , Byte[] , int , int , byte );
    public int A(DmLob , byte );
    public void A(A , List`1<Parameter> );
    public void a(b , b , int );
}
internal class A.c : object {
    public static void A(b , DmConnProperty );
    public static void a(b , DmConnProperty );
    public static void B(b , DmConnProperty );
    private static int A(long , bool , long );
    private static long a(long , bool , long );
    private static int A(int , bool , long );
    public static int A(b , DmConnProperty , Boolean& );
    private static void A(b , int , DmInfo& );
    internal static void A(b , int , DmInfo , DmConnInstance , bool );
    public static void A(b , A );
    private static void a(b , A );
    public static Byte[] A(b );
    public static void A(b , A , DmConnProperty );
    public static bool A(b , long , DmResultSetCache );
    public static Byte[] A(b , DmLob , DmConnInstance );
    public static long A(b , DmLob , DmConnProperty );
    public static int a(b , DmLob , DmConnProperty );
    public static void B(b , DmLob , DmConnProperty );
    public static Byte[] b(b , DmLob , DmConnProperty );
    public static void a(b , A , DmConnProperty );
    public static Int64[] b(b , DmConnProperty );
    private static int A(string );
    private static int a(string );
    private static void A(b , string , bool );
    private static void A(b , string , bool , string );
    private static string A(A );
}
internal class A.C : object {
    public static void A(b , short , int );
    public static void a(b , short , int );
    public static void A(b , DmConnProperty , D );
    public static void a(b , DmConnProperty , D );
    public static void A(b , int );
    public static void A(b , int , DmConnProperty , string , bool , int , byte , int );
    private static void A(int , b , DmParameterInternal[] );
    private static void A(DmParameterInternal , Int32& , Int32& , Int32& );
    internal static void a(DmParameterInternal , Int32& , Int32& , Int32& );
    private static void A(int , b , DmParameterInternal[] , A , int );
    public static void A(b , A , DmInfo , DmConnProperty );
    public static void A(int , b , int , DmParameterInternal[] );
    public static void A(b , int , long , short , long , int );
    public static void a(b , int );
    public static void A(b , A , string , DmConnProperty );
    public static void A(b , int , short , Byte[] , int , DmConnProperty , int );
    public static void A(b , int , short , Byte[] , int , DmConnProperty , int , Byte[] );
    public static Byte[] A();
    public static void A(b , DmLob );
    public static void A(b , DmLob , byte , int , Byte[] , int , int , byte );
    public static void A(b , DmLob , byte , int );
    public static void A(b , DmLob , long , int );
    public static void A(b , int , short );
    public static void A(b , A , List`1<Parameter> , DmConnProperty );
    public static void B(b , int );
    public static void A(b , Int32[] );
}
internal class A.D : a {
    private Socket A;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) A;
    private TcpClient A;
    private SslStream A;
    [CompilerGeneratedAttribute]
private string A;
    [CompilerGeneratedAttribute]
private string a;
    internal DHKey A;
    internal Cipher A;
    private static ManualResetEvent A;
    public Int64[][] A;
    public static int A;
    public D(string , int );
    public D(string , int , int );
    private static D();
    [CompilerGeneratedAttribute]
public void A(string );
    [CompilerGeneratedAttribute]
public string A();
    [CompilerGeneratedAttribute]
public void a(string );
    [CompilerGeneratedAttribute]
public string a();
    private void A(string , int , int );
    public void A(string , bool );
    private static bool A(object , X509Certificate , X509Chain , SslPolicyErrors );
    private void A(IAsyncResult );
    private void A(object , SocketAsyncEventArgs );
    internal Byte[] B();
    internal DHKey b();
    internal void A(int , Byte[] , string , int );
    internal virtual void A(b , int , bool , bool );
    internal virtual b a(b , int , bool , bool );
    private int A(Byte[] , int , int );
    private int a(Byte[] , int , int );
    public void C();
    public bool c();
    public bool D();
    protected virtual override void Finalize();
    public int A(b , int , int );
}
internal class Dm.BatchedCommand : object {
    private string m_Text;
    private ArrayList m_Parameters;
    public string Text { get; public set; }
    public ArrayList Parameters { get; }
    public BatchedCommand(DmCommand cmd);
    public string get_Text();
    public void set_Text(string value);
    public ArrayList get_Parameters();
    public void AddParameters(DmCommand cmd);
}
internal interface Dm.Cipher {
    public abstract virtual Byte[] Encrypt(Byte[] plaintext, bool genDigest);
    public abstract virtual Byte[] Decrypt(Byte[] ciphertext, bool checkDigest);
}
public class Dm.ColumnInfo : object {
    public int ColumnId;
    public string ColumnName;
    public int ColumnTypeCode;
    public Type ColumnType;
    public ColumnInfo(int columnId, string columnName, int columnTypeCode, Type columnType);
}
public class Dm.ComplexTypeData : object {
    internal static int ARRAY_TYPE_SHORT;
    internal static int ARRAY_TYPE_INTEGER;
    internal static int ARRAY_TYPE_LONG;
    internal static int ARRAY_TYPE_FLOAT;
    internal static int ARRAY_TYPE_DOUBLE;
    internal object m_dumyData;
    internal int m_offset;
    internal int m_bufLen;
    internal Byte[] m_dataBuf;
    internal Byte[] m_objBlobDescBuf;
    internal bool m_isFromBlob;
    internal int m_packid;
    internal List`1<object> m_objRefArr;
    protected ComplexTypeData(object val, Byte[] dataBuf);
    internal static ComplexTypeData[] toStruct(Object[] objArr, ComplexTypeDesc desc);
    internal static ComplexTypeData[] toArray(Array objArr, ComplexTypeDesc desc);
    private static Object[] makeupObjToArr(object obj, ComplexTypeDesc objDesc);
    private static ComplexTypeData toMemberObj(object mem, ComplexTypeDesc desc);
    private static Byte[] TypeDataToBytes(ComplexTypeData data, ComplexTypeDesc desc);
    private static Byte[] convertLobToBytes(object value, int dtype, string serverEncoding);
    internal static Byte[] sarrayToBytes(DmArray data, ComplexTypeDesc desc);
    internal static Byte[] cltnToBytes(ComplexTypeData[] m_arrData, ComplexTypeDesc desc);
    internal static Byte[] IndexTableToBytes(DmStruct data, ComplexTypeDesc desc);
    internal static void KeyToBytes(string key, ComplexTypeDesc keyDesc, string serverEncoding, Byte[]& keyBytes);
    internal static void ValueToBytes(object value, ComplexTypeDesc valueDesc, Byte[]& valueBytes);
    internal static void PairBytesToResult(Byte[][] results, Int32& count, Byte[] keyBytes, Byte[] valueBytes, Int32& totalLen);
    public static Byte[] arrayToBytes(DmArray data, ComplexTypeDesc desc);
    public static Byte[] objToBytes(object data, ComplexTypeDesc desc);
    public static Byte[] structToBytes(DmStruct data, ComplexTypeDesc desc);
    public static Byte[] recordToBytes(DmStruct data, ComplexTypeDesc desc);
    private static ComplexTypeData bytesToBlob(Byte[] val, ComplexTypeData outVal, ComplexTypeDesc desc);
    private static ComplexTypeData bytesToClob(Byte[] val, ComplexTypeData outVal, ComplexTypeDesc desc, string serverEncoding);
    private static ComplexTypeData bytesToTypeData(Byte[] val, ComplexTypeData outVal, ComplexTypeDesc desc);
    private static bool checkObjExist(Byte[] val, ComplexTypeData outVal);
    private static DmStruct findObjByPackId(Byte[] val, ComplexTypeData outVal);
    private static void addObjToRefArr(ComplexTypeData outVal, object objToAdd);
    private static bool checkObjCltn(ComplexTypeDesc desc);
    private static DmStruct bytesToObj_EXACT(Byte[] val, ComplexTypeData outVal, ComplexTypeDesc desc);
    private static DmArray bytesToNestTab(Byte[] val, ComplexTypeData outVal, ComplexTypeDesc desc);
    private static DmStruct bytesToIndexTab(Byte[] val, ComplexTypeData outVal, ComplexTypeDesc desc);
    private static string bytesToKey(Byte[] val, ComplexTypeData outVal, ComplexTypeDesc keyDesc, string serverEncoding);
    private static object bytesToValue(Byte[] val, ComplexTypeData outVal, ComplexTypeDesc valueDesc);
    private static object bytesToCltn(Byte[] val, ComplexTypeData outVal, ComplexTypeDesc desc);
    public static object bytesToObj(Byte[] val, ComplexTypeData outVal, ComplexTypeDesc desc);
    public static DmArray bytesToArray(Byte[] val, ComplexTypeData outVal, ComplexTypeDesc desc);
    public static DmArray bytesToSArray(Byte[] val, ComplexTypeData outVal, ComplexTypeDesc desc);
    public static DmStruct bytesToRecord(Byte[] val, ComplexTypeData outVal, ComplexTypeDesc desc);
    private static void objBlob_GetChkBuf(Byte[] buf, ComplexTypeData complexTypeData);
    internal static object objBlobToObj(DmBlob lob, ComplexTypeDesc desc);
    public static Byte[] objBlobToBytes(Byte[] lobBuf, ComplexTypeDesc desc);
    private static Byte[] realocBuffer(Byte[] oldBuf, int offset, int needLen);
    private static ComplexTypeData convertBytes2BaseData(Byte[] val, ComplexTypeData outVal, ComplexTypeDesc desc);
    public object toJavaArray(DmArray arr, int len, int dType);
    public object toJavaArray(DmArray arr, long index, int len, int dType);
    public object toNumericArray(DmArray arr, long index, int len, int flag);
    public Object[] toJavaArray(DmStruct dmStruct);
    public static Byte[] toBytes(ComplexTypeData x, ComplexTypeDesc complexTypeDesc);
}
public class Dm.ComplexTypeDesc : object {
    internal static int OBJ_BLOB_MAGIC;
    internal static int CLTN_TYPE_IND_TABLE;
    internal static int CLTN_TYPE_NST_TABLE;
    internal static int CLTN_TYPE_VARRAY;
    internal DmField column;
    internal SQLName m_sqlName;
    internal int m_objId;
    internal int m_objVersion;
    internal int m_outerId;
    internal int m_outerVer;
    internal int m_subId;
    internal int m_cltnType;
    internal int m_maxCnt;
    internal int m_length;
    internal int m_size;
    internal DmConnection m_conn;
    internal string m_serverEncoding;
    internal ComplexTypeDesc m_arrObj;
    internal ComplexTypeDesc[] m_fieldsObj;
    internal Byte[] m_descBuf;
    internal ComplexTypeDesc m_keyDesc;
    internal ComplexTypeDesc m_valueDesc;
    internal ComplexTypeDesc(string fulName, DmConnection conn);
    internal ComplexTypeDesc(DmConnection conn);
    internal void ParseDescByName();
    internal string GetFulName();
    internal int GetDType();
    public int GetPrec();
    public int GetScale();
    public string GetServerEncoding();
    public int GetObjId();
    public int GetStaticArrayLength();
    public int GetOuterId();
    public int GetCltnType();
    public int GetMaxCnt();
    private static int GetPackSize(ComplexTypeDesc complexTypeDesc);
    private static void Pack(ComplexTypeDesc complexTypeDesc, b msg);
    internal static int GetPackArraySize(ComplexTypeDesc arrDesc);
    internal static void PackArray(ComplexTypeDesc arrDesc, b msg);
    internal static void PackRecord(ComplexTypeDesc strctDesc, b msg);
    internal static int GetPackRecordSize(ComplexTypeDesc strctDesc);
    internal static int GetPackClassSize(ComplexTypeDesc strctDesc);
    internal static void PackClass(ComplexTypeDesc strctDesc, b msg);
    internal void Unpack(b msg);
    private void UnpackArray(b msg);
    private void UnpackRecord(b msg);
    private void UnpackCltn_nestTab(b msg);
    private void UnpackCltn_indexTab(b msg);
    private void UnpackCltn(b msg);
    private void UnpackClass(b msg);
    internal int CalcChkDescLen_array(ComplexTypeDesc desc);
    private int CalcChkDescLen_record(ComplexTypeDesc desc);
    internal int CalcChkDescLen_class_normal(ComplexTypeDesc desc);
    private int CalcChkDescLen_class_cnlt(ComplexTypeDesc desc);
    private int CalcChkDescLen_class(ComplexTypeDesc desc);
    private int CalcChkDescLen_buildin();
    private int CalcChkDescLen(ComplexTypeDesc desc);
    private int MakeChkDesc_array(int offset, ComplexTypeDesc desc);
    private int MakeChkDesc_record(int offset, ComplexTypeDesc desc);
    private int MakeChkDesc_buildin(int offset, ComplexTypeDesc desc);
    private int MakeChkDesc_class_normal(int offset, ComplexTypeDesc desc);
    private int MakeChkDesc_class_cltn(int offset, ComplexTypeDesc desc);
    private int MakeChkDesc_class(int offset, ComplexTypeDesc desc);
    private int MakeChkDesc(int offset, ComplexTypeDesc subDesc);
    internal Byte[] GetClassDescChkInfo();
    public int GetSize();
}
public enum Dm.Config.CLUSTER : Enum {
    public int value__;
    public static CLUSTER NORMAL;
    public static CLUSTER RW;
    public static CLUSTER DW;
    public static CLUSTER DSC;
    public static CLUSTER MPP;
}
public enum Dm.Config.ColumnNameCase : Enum {
    public int value__;
    public static ColumnNameCase OFF;
    public static ColumnNameCase UPPER;
    public static ColumnNameCase LOWER;
}
public enum Dm.Config.CompatibleMode : Enum {
    public int value__;
    public static CompatibleMode OFF;
    public static CompatibleMode ORACLE;
    public static CompatibleMode MYSQL;
}
internal class Dm.Config.DmOption : object {
    private static Dictionary`2<string, EPGroup> epGroupMap;
    private static object epGroupMapLock;
    [CompilerGeneratedAttribute]
private string <Keyword>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Synonym>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <BaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Defaultvalue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Maxvalue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Minvalue>k__BackingField;
    internal string Keyword { get; private set; }
    internal String[] Synonym { get; private set; }
    internal Type BaseType { get; private set; }
    internal object Defaultvalue { get; private set; }
    internal Nullable`1<long> Maxvalue { get; private set; }
    internal Nullable`1<long> Minvalue { get; private set; }
    internal DmOption(string key, Type basetype, object defaultvalue, string syn, Nullable`1<long> maxvalue, Nullable`1<long> minvalue);
    private static DmOption();
    [CompilerGeneratedAttribute]
internal string get_Keyword();
    [CompilerGeneratedAttribute]
private void set_Keyword(string value);
    [CompilerGeneratedAttribute]
internal String[] get_Synonym();
    [CompilerGeneratedAttribute]
private void set_Synonym(String[] value);
    [CompilerGeneratedAttribute]
internal Type get_BaseType();
    [CompilerGeneratedAttribute]
private void set_BaseType(Type value);
    [CompilerGeneratedAttribute]
internal object get_Defaultvalue();
    [CompilerGeneratedAttribute]
private void set_Defaultvalue(object value);
    [CompilerGeneratedAttribute]
internal Nullable`1<long> get_Maxvalue();
    [CompilerGeneratedAttribute]
private void set_Maxvalue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<long> get_Minvalue();
    [CompilerGeneratedAttribute]
private void set_Minvalue(Nullable`1<long> value);
    internal bool HasKey(string key);
    internal object ValidateValue(object value);
    internal static EPGroup ParseEPGroup(String[] servers);
}
internal class Dm.Config.DmOptionHelper : object {
    internal static SetDefaultDelegate localtimezone;
    internal static SetDefaultDelegate defaultsvc_conf;
    internal static string serverDef;
    internal static string userDef;
    internal static string passwordDef;
    internal static int portDef;
    internal static string encodingDef;
    internal static bool enlistDef;
    internal static int connectionTimeoutDef;
    internal static int commandTimeoutDef;
    internal static int poolSizeDef;
    internal static bool connPoolingDef;
    internal static bool stmtPoolingDef;
    internal static bool preparePoolingDef;
    internal static int preparePoolSizeDef;
    internal static int connPoolSizeDef;
    internal static bool connPoolCheckDef;
    internal static int connPoolTimeoutDef;
    internal static int connPoolExpiredTimeDef;
    internal static int connPoolClearIntervalDef;
    internal static bool escapeProcessDef;
    internal static string keyWordsDef;
    internal static string schemaDef;
    internal static bool schemaSensitiveDef;
    internal static string appnameDef;
    internal static string osDef;
    internal static string initialCatalogDef;
    internal static string databaseDef;
    internal static string hostDef;
    internal static bool loginEncryptDef;
    internal static string cipherPathDef;
    internal static bool directDef;
    internal static bool enableRsCacheDef;
    internal static int rsCacheSizeDef;
    internal static int rsRefreshFreqDef;
    internal static int rwSeparateDef;
    internal static int rwPercentDef;
    internal static int compressDef;
    internal static int compressIdDef;
    internal static LoginModeFlag login_modedef;
    internal static TraceFlag tracedef;
    internal static SupportedLanguage languagedef;
    internal static int timezonedef;
    internal static string dm_svc_confdef;
    internal static LogLevel logleveldef;
    internal static string logdirdef;
    internal static int logFlushFreqdef;
    internal static int logSizedef;
    internal static int lobModeDef;
    internal static bool autoCommitDef;
    internal static bool alwaysAllowCommitDef;
    internal static int batchTypeDef;
    internal static int batchAllowMaxErrorsDef;
    internal static bool batchContinueOnErrorDef;
    internal static bool batchNotOnCallDef;
    internal static int bufPrefetchDef;
    internal static bool clobAsStringDef;
    internal static bool columnNameUpperCaseDef;
    internal static ColumnNameCase columnNameCaseDef;
    internal static string databaseProductNameDef;
    internal static CompatibleMode compatibleModeDef;
    internal static bool ignoreCaseDef;
    internal static bool isBdtaRsDef;
    internal static int maxRowsDef;
    internal static int socketTimeoutDef;
    internal static string addressRemapDef;
    internal static string userRemapDef;
    internal static EpSelector epSelectorDef;
    internal static int switchTimesDef;
    internal static int switchIntervalDef;
    internal static LoginStatus loginStatusDef;
    internal static bool loginDscCtrlDef;
    internal static int rwStandbyRecoverTimeDef;
    internal static bool rwHADef;
    internal static bool rwAutoDistributeDef;
    internal static int rwFilterTypeDef;
    internal static DoSwitch doSwitchDef;
    internal static CLUSTER clusterDef;
    internal static int dbAliveCheckFreqDef;
    internal static int dbAliveCheckTimeoutDef;
    internal static int maxLobDataLenPerMsgDef;
    internal static bool dbTimeToTimeSpanDef;
    internal static bool caseSensitiveDef;
    internal static bool varchar36ToGuidDef;
    internal static bool useSkyWalkingDef;
    internal static IntervalMode intervalModeDef;
    internal static string sslKeyPass;
    internal static string sslFilePath;
    private static DmOptionHelper();
    internal static DmOption GetOption(string keyword, List`1<DmOption> options);
    internal static void SetProperty(DmOption option, object value, Dictionary`2<string, object> property);
}
internal class Dm.Config.DmSvcConfig : object {
    internal static LogLevel logLevel;
    internal static string logDir;
    internal static int logSize;
    internal static int dbAliveCheckFreq;
    internal static int dbAliveCheckTimeout;
    private static List`1<DmOption> defaultOptions;
    public Dictionary`2<string, Dictionary`2<string, object>> propertyDictionary;
    private Dictionary`2<string, object> defaultProperty;
    private static DmSvcConfig();
    internal DmSvcConfig(string filename);
    private void UpdateOptionsDictionary(string key, object value, Dictionary`2<string, object> property);
    private void ParseConfigFile(string filename);
    internal static String[] Parse(string s);
}
public enum Dm.Config.DoSwitch : Enum {
    public int value__;
    public static DoSwitch OFF;
    public static DoSwitch CONN_ERROR;
    public static DoSwitch EP_RECOVER;
}
public enum Dm.Config.EpSelector : Enum {
    public int value__;
    public static EpSelector WELL_DISTRIBUTE;
    public static EpSelector HEAD_FIRST;
}
public enum Dm.Config.IntervalMode : Enum {
    public int value__;
    public static IntervalMode OFF;
    public static IntervalMode YM;
    public static IntervalMode DT;
    public static IntervalMode ALL;
}
public enum Dm.Config.LoginModeFlag : Enum {
    public int value__;
    public static LoginModeFlag primaryfirst;
    public static LoginModeFlag onlyprimary;
    public static LoginModeFlag onlystandby;
    public static LoginModeFlag standbyfirst;
    public static LoginModeFlag normalfirst;
}
public enum Dm.Config.LoginStatus : Enum {
    public int value__;
    public static LoginStatus OFF;
    public static LoginStatus OPEN;
    public static LoginStatus MOUNT;
    public static LoginStatus SUSPEND;
}
public enum Dm.Config.LogLevel : Enum {
    public int value__;
    public static LogLevel OFF;
    public static LogLevel ERROR;
    public static LogLevel SQL;
    public static LogLevel INFO;
}
internal enum Dm.Config.SupportedLanguage : Enum {
    public int value__;
    public static SupportedLanguage cn;
    public static SupportedLanguage en;
    public static SupportedLanguage cn_hk;
    public static SupportedLanguage cn_tw;
}
public enum Dm.Config.TraceFlag : Enum {
    public int value__;
    public static TraceFlag none;
    public static TraceFlag debug;
    public static TraceFlag trace;
    public static TraceFlag normal;
    public static TraceFlag thread;
}
internal class Dm.DBAliveCheckThread : object {
    private static object obj;
    private static DBAliveCheckThread _dbAliveCheckThread;
    private BlockingQueue`1<DmConnInstance> _queue;
    private ILogger log;
    internal static DBAliveCheckThread CheckThread { get; }
    private static DBAliveCheckThread();
    internal static DBAliveCheckThread get_CheckThread();
    public void AddConnInstance(DmConnInstance connInstance);
    private void run();
    private bool checkDbAlive(string host, int port);
}
internal class Dm.DHGroup : object {
    private BigInteger p;
    private BigInteger g;
    internal BigInteger P { get; }
    internal BigInteger G { get; }
    internal DHGroup(BigInteger p, BigInteger g);
    internal BigInteger get_P();
    internal BigInteger get_G();
    internal DHKey GenerateKeyPair();
    internal DHKey ComputeKey(DHKey pubKey, DHKey privKey);
}
internal class Dm.DHKey : object {
    private BigInteger x;
    private BigInteger y;
    private DHGroup group;
    internal BigInteger X { get; internal set; }
    internal BigInteger Y { get; internal set; }
    internal DHGroup Group { get; internal set; }
    internal DHKey(Byte[] s);
    internal BigInteger get_X();
    internal void set_X(BigInteger value);
    internal BigInteger get_Y();
    internal void set_Y(BigInteger value);
    internal DHGroup get_Group();
    internal void set_Group(DHGroup value);
}
public class Dm.DmArray : ComplexTypeData {
    internal ComplexTypeDesc m_arrDesc;
    internal ComplexTypeData[] m_arrData;
    internal object m_objArray;
    internal int m_itemCount;
    internal int m_itemSize;
    internal int m_objCount;
    internal int m_strCount;
    internal Int32[] m_objStrOffs;
    public DmArray(ComplexTypeData[] atData, ComplexTypeDesc desc);
    internal DmArray(ComplexTypeDesc arrDesc, DmConnection conn, Array objArr);
    internal DmArray(ComplexTypeDesc arrDesc, DmConnection conn, Object[] objArr);
    private void initData();
    internal ComplexTypeDesc GetItemDesc();
    internal int GetLength();
}
public class Dm.DmBcpLoaderParameter : object {
    private DbType m_Dbtype;
    private string m_DestColumnName;
    private int m_DestColumnOrdinal;
    private object m_Data;
    public DbType DbType { get; public set; }
    public string DestColumnName { get; public set; }
    public int DestColumnOrdinal { get; public set; }
    public object DataValue { get; public set; }
    public DmBcpLoaderParameter(DbType dbtype, string destColumnName, object data);
    public DmBcpLoaderParameter(DbType dbtype, int destColumnOrdinal, object data);
    public DbType get_DbType();
    public void set_DbType(DbType value);
    public string get_DestColumnName();
    public void set_DestColumnName(string value);
    public int get_DestColumnOrdinal();
    public void set_DestColumnOrdinal(int value);
    public object get_DataValue();
    public void set_DataValue(object value);
}
[DefaultMemberAttribute("Item")]
public class Dm.DmBcpLoaderParameterCollection : object {
    private List`1<DmBcpLoaderParameter> _items;
    private static Type ItemType;
    public int Count { get; }
    private List`1<DmBcpLoaderParameter> InnerList { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public DmBcpLoaderParameter Item { get; public set; }
    public object SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    private static DmBcpLoaderParameterCollection();
    public DmBcpLoaderParameter Add(DmBcpLoaderParameter value);
    public sealed virtual int Add(object value);
    public void AddRange(DmBcpLoaderParameter[] values);
    public void AddRange(Array values);
    public sealed virtual void Clear();
    public bool Contains(DmBcpLoaderParameter value);
    public sealed virtual bool Contains(object value);
    public void CopyTo(DmBcpLoaderParameter[] array, int index);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(DmBcpLoaderParameter value);
    public sealed virtual int IndexOf(object value);
    public void Insert(int index, DmBcpLoaderParameter value);
    public sealed virtual void Insert(int index, object value);
    private void RangeCheck(int index);
    public void Remove(DmBcpLoaderParameter value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    private void RemoveIndex(int index);
    private void Replace(int index, object newValue);
    private void ValidateType(object value);
    public sealed virtual int get_Count();
    private List`1<DmBcpLoaderParameter> get_InnerList();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public DmBcpLoaderParameter get_Item(int index);
    public void set_Item(int index, DmBcpLoaderParameter value);
    public sealed virtual object get_SyncRoot();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
}
public class Dm.DmBlob : object {
    private DmLob base_lob;
    private bool fetchAll;
    private Byte[] m_BlobBytes;
    internal DmLob BaseLob { get; }
    internal DmBlob(A stmt, Byte[] val, short colIndex, bool fetchAll);
    internal DmBlob(Byte[] val);
    internal void SetBLobRowid(Byte[] rowid);
    internal DmLob get_BaseLob();
    public void FetchAllData();
    public long Length();
    public int SetBytes(long pos, Byte[]& bytes, int offset, int len);
    public Byte[] GetBytes(long pos, int length);
    public void Truncate(long len);
    public Stream GetStream();
    private void SetLocalData(long pos, Byte[]& bytes, int offset, int len);
    private Byte[] GetBytesOffRow(long pos, int length);
    internal static DmBlob NewInstanceFromDb(A stmt, Byte[] val, short colIndex, bool fetchAll);
    public static DmBlob NewInstanceOfLocal(Byte[] val);
}
public class Dm.DmBLobStream : Stream {
    private DmBlob m_BLob;
    private bool m_CanRead;
    private bool m_CanSeek;
    private bool m_CanTimeOut;
    private bool m_CanWrite;
    private bool m_Closed;
    private long m_CurPos;
    private int m_ReadTimeout;
    private int m_WriteTimeout;
    private static int STREAM_CLOSED;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public DmBLobStream(DmBlob bLob);
    public bool StreamCheck();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
public class Dm.DmBulkCopy : object {
    private int m_BatchSize;
    private string m_DestSchema;
    private string m_DestTable;
    private DmBulkCopyOptions m_CopyOpt;
    private int m_timeout;
    private DmBulkCopyColumnMappingCollection m_columnMappings;
    private int m_notifyAfter;
    private DmConnection m_Conn;
    private bool closed;
    [CompilerGeneratedAttribute]
private DmRowsCopiedEventHandler DmRowsCopied;
    public int BatchSize { get; public set; }
    public int BulkCopyTimeout { get; public set; }
    public DmBulkCopyColumnMappingCollection ColumnMappings { get; }
    public string DestinationSchemaName { get; public set; }
    public string DestinationTableName { get; public set; }
    public int NotifyAfter { get; public set; }
    public DmBulkCopy(DmConnection conn);
    public DmBulkCopy(string connectionString);
    public DmBulkCopy(string connectionString, DmBulkCopyOptions copyOptions);
    public DmBulkCopy(DmConnection conn, DmBulkCopyOptions copyOptions, DmTransaction externalTran);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public int get_BulkCopyTimeout();
    public void set_BulkCopyTimeout(int value);
    public DmBulkCopyColumnMappingCollection get_ColumnMappings();
    public string get_DestinationSchemaName();
    public void set_DestinationSchemaName(string value);
    public string get_DestinationTableName();
    public void set_DestinationTableName(string value);
    public int get_NotifyAfter();
    public void set_NotifyAfter(int value);
    public void WriteToServer(DataRow[] rows);
    public void WriteToServer(DataRow[] rows, DataColumnCollection columns);
    public void WriteToServer(DataTable table, DataRowState rowState);
    private Dictionary`2<string, bool> getDestColNames();
    private Dictionary`2<string, string> getcolumnMappingMap();
    private string getCaseSensitiveName(string name);
    private StringComparer getCaseSensitiveComparer();
    protected void insert(Dictionary`2<string, List`1<object>> srcColValueMap);
    public void WriteToServer(DbDataReader reader);
    public static int GetLenFromType(Type type);
    public Int32[] GetMaxColLen(DataTable table);
    public void WriteToServer(DataTable table);
    public void Close();
    private void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
    [CompilerGeneratedAttribute]
public void add_DmRowsCopied(DmRowsCopiedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DmRowsCopied(DmRowsCopiedEventHandler value);
    protected void OnRowCopied(DmRowsCopiedEventArgs arg);
}
public class Dm.DmBulkCopy2 : object {
    private int m_BatchSize;
    private string m_DestTable;
    private DmBulkCopyOptions m_CopyOpt;
    private int m_timeout;
    private DmBulkCopyColumnMappingCollection m_columnMappings;
    private int m_notifyAfter;
    private DmFldr m_Fldr;
    private DmConnection m_Conn;
    private bool closed;
    [CompilerGeneratedAttribute]
private DmRowsCopiedEventHandler2 DmRowsCopied;
    public int BatchSize { get; public set; }
    public int BulkCopyTimeout { get; public set; }
    public DmBulkCopyColumnMappingCollection ColumnMappings { get; }
    public string DestinationTableName { get; public set; }
    public int NotifyAfter { get; public set; }
    public DmBulkCopy2(DmConnection conn);
    public DmBulkCopy2(string connectionString);
    public DmBulkCopy2(string connectionString, DmBulkCopyOptions copyOptions);
    public DmBulkCopy2(DmConnection conn, DmBulkCopyOptions copyOptions, DmTransaction externalTran);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public int get_BulkCopyTimeout();
    public void set_BulkCopyTimeout(int value);
    public DmBulkCopyColumnMappingCollection get_ColumnMappings();
    public string get_DestinationTableName();
    public void set_DestinationTableName(string value);
    public int get_NotifyAfter();
    public void set_NotifyAfter(int value);
    public void WriteToServer(DataRow[] rows);
    public void WriteToServer(DataTable table, DataRowState rowState);
    private void SetValueInner(Object& obj, Type type, int nth_row, short dst_col, int src_col);
    internal void SetValueInner(Object& obj, Type type, int nth_row, string dst_col, int src_col);
    private void SetValueInner(DataTable table, Type type, int batch_row, string dst_col, int src_col, int i);
    private void SetValueInner(DataTable table, Type type, int batch_row, short dst_col, int src_col, int i);
    public void WriteToServer(DmDataReader reader);
    public static int GetLenFromType(Type type);
    public Int32[] GetMaxColLen(DataTable srcTable, List`1<ColumnInfo> columnInfos, Dictionary`2<string, int> srcNameIdMap);
    public void WriteToServer(DataTable table);
    private List`1<ColumnInfo> getDestColInfo();
    public void Close();
    private void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
    [CompilerGeneratedAttribute]
public void add_DmRowsCopied(DmRowsCopiedEventHandler2 value);
    [CompilerGeneratedAttribute]
public void remove_DmRowsCopied(DmRowsCopiedEventHandler2 value);
    protected void OnRowCopied(DmRowsCopiedEventArgs2 arg);
}
public class Dm.DmBulkCopyColumnMapping : object {
    internal int m_sourceColumnOrdinal;
    internal string m_sourceColumnName;
    internal int m_destColumnOrdinal;
    internal string m_destColumnName;
    internal int m_internalSourceColumnOrdinal;
    internal int m_internalDestColumnOrdinal;
    public string DestinationColumn { get; public set; }
    public int DestinationOrdinal { get; public set; }
    public string SourceColumn { get; public set; }
    public int SourceOrdinal { get; public set; }
    public DmBulkCopyColumnMapping(int sourceColumnOrdinal, int destColumnOrdinal);
    public DmBulkCopyColumnMapping(int sourceColumnOrdinal, string destColumnName);
    public DmBulkCopyColumnMapping(string sourceColumnName, int destColumnOrdinal);
    public DmBulkCopyColumnMapping(string sourceColumnName, string destColumnName);
    public string get_DestinationColumn();
    public void set_DestinationColumn(string value);
    public int get_DestinationOrdinal();
    public void set_DestinationOrdinal(int value);
    public string get_SourceColumn();
    public void set_SourceColumn(string value);
    public int get_SourceOrdinal();
    public void set_SourceOrdinal(int value);
}
[DefaultMemberAttribute("Item")]
public class Dm.DmBulkCopyColumnMappingCollection : CollectionBase {
    public DmBulkCopyColumnMapping Item { get; }
    public DmBulkCopyColumnMapping Add(DmBulkCopyColumnMapping bulkCopyMapping);
    public DmBulkCopyColumnMapping Add(int sourceColumnIndex, int destColumnIndex);
    public DmBulkCopyColumnMapping Add(int sourceColumnIndex, string destColumnName);
    public DmBulkCopyColumnMapping Add(string sourceColumnName, int destColumnIndex);
    public DmBulkCopyColumnMapping Add(string sourceColumnName, string destColumnName);
    internal DmBulkCopyColumnMappingCollection CreateDefaultColumnMappingCollection(int fieldCount);
    public void Clear();
    public bool Contains(DmBulkCopyColumnMapping bulkCopyMapping);
    public void CopyTo(DmBulkCopyColumnMapping[] array, int index);
    public int IndexOf(DmBulkCopyColumnMapping value);
    public void Insert(int index, DmBulkCopyColumnMapping value);
    public void Remove(DmBulkCopyColumnMapping value);
    public void RemoveAt(int index);
    public DmBulkCopyColumnMapping get_Item(int index);
}
public enum Dm.DmBulkCopyOptions : Enum {
    public int value__;
    public static DmBulkCopyOptions Default;
}
public enum Dm.DmBulkCopyTypeLen : Enum {
    public int value__;
    public static DmBulkCopyTypeLen StringLen;
    public static DmBulkCopyTypeLen BytesLen;
    public static DmBulkCopyTypeLen ObjetLen;
}
public class Dm.DmClientFactory : DbProviderFactory {
    public static DmClientFactory Instance;
    public bool CanCreateDataSourceEnumerator { get; }
    private static DmClientFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    public virtual bool get_CanCreateDataSourceEnumerator();
}
internal class Dm.DmClientLexCall : object {
    public static int clex_for_provider_init(IntPtr& clexProvider);
    public static void clex_for_provider_deinit(IntPtr handle);
    public static int clex_for_provider(IntPtr handle, string sql_txt);
    public static int clex_for_provider_get_next_node(IntPtr handle, String& data, IntPtr& flag);
    public static int clex_for_provider_get_first_node(IntPtr handle, String& data, IntPtr& flag);
    public static int version_to_number_for_provider(string version);
}
internal class Dm.DmClientPermission : object {
}
public class Dm.DmClob : object {
    private DmLob m_BaseLob;
    private string m_ServerEncoding;
    private string m_ClobStr;
    private int m_ByteOffset;
    private int m_CharOffset;
    private bool fetchAll;
    internal DmClob(A stmt, Byte[] val, short colIndex, bool fetchAll);
    internal void SetBLobRowid(Byte[] rowid);
    internal void SetCurFileid(Byte[] fileid);
    internal void SetCurPageno(Byte[] pageno);
    internal void SetTotalOffset(Byte[] totalOffset);
    internal Stream GetStream();
    internal Byte[] GetBytes();
    public void FetchAllData();
    public string GetString(long pos, int length);
    public long Length();
    public int SetString(long pos, string str, int offset, int len);
    public void Truncate(long len);
    public string GetSubString(long pos, int length);
    private void SetLocalData(int pos, string str);
}
internal class Dm.DmColumn : DmField {
    internal DmColumn(DmConnInstance conn);
    public static int GetMaxTupleLen(DmColumn[] cols, int maxRowSize);
}
public class Dm.DmCommand : DbCommand {
    internal long id;
    internal static long idGenerator;
    [CompilerGeneratedAttribute]
private BaseFilter <FilterHead>k__BackingField;
    [CompilerGeneratedAttribute]
private LogInfo <LogInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RWInfo <RWInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RecoverInfo <RecoverInfo>k__BackingField;
    private static string ClassName;
    private string m_CommandText;
    private CommandType m_CommandType;
    private DmConnection m_Conn;
    private int m_CommandTimeout;
    private DmTransaction m_Trx;
    private A m_Stmt;
    private ArrayList m_refCursorStmt_arr;
    private int m_refCursorStmtArr_cur;
    private A m_RetRefCursorStmt;
    private DmSetValue m_SetValue;
    private DmParameterCollection m_Paras;
    private UpdateRowSource m_UpdateRowSource;
    private bool m_AlreadyDisposed;
    private bool m_DesignTimeVisible;
    private DmDataReader rd;
    private bool m_StmtSerial;
    private long executeId;
    private int batchErrorsCount;
    private bool running;
    [CompilerGeneratedAttribute]
private int <RetCmdType>k__BackingField;
    [CompilerGeneratedAttribute]
private DmResultSetCache <CurResultSetCache>k__BackingField;
    public long ID { get; }
    public BaseFilter FilterHead { get; public set; }
    public LogInfo LogInfo { get; public set; }
    public RWInfo RWInfo { get; public set; }
    public RecoverInfo RecoverInfo { get; public set; }
    internal bool do_DesignTimeVisible { get; internal set; }
    internal CommandType do_CommandType { get; internal set; }
    internal int do_CommandTimeout { get; internal set; }
    internal string do_CommandText { get; internal set; }
    internal UpdateRowSource do_UpdatedRowSource { get; internal set; }
    internal DmConnection do_DbConnection { get; internal set; }
    internal DmParameterCollection do_DbParameterCollection { get; }
    internal DmTransaction do_DbTransaction { get; internal set; }
    public bool DesignTimeVisible { get; public set; }
    public CommandType CommandType { get; public set; }
    public int CommandTimeout { get; public set; }
    public string CommandText { get; public set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    internal int RetCmdType { get; internal set; }
    internal DmResultSetCache CurResultSetCache { get; internal set; }
    internal A Statement { get; internal set; }
    internal ArrayList RefCursorStmtArr { get; internal set; }
    internal int RefCursorStmtArr_cur { get; internal set; }
    internal A RetRefCursorStmt { get; internal set; }
    public DmCommand(string cmdText);
    public DmCommand(string cmdText, DmConnection connection);
    public DmCommand(string cmdText, DmConnection connection, DmTransaction tran);
    private static DmCommand();
    public sealed virtual long get_ID();
    [CompilerGeneratedAttribute]
public sealed virtual BaseFilter get_FilterHead();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterHead(BaseFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual LogInfo get_LogInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LogInfo(LogInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RWInfo get_RWInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RWInfo(RWInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RecoverInfo get_RecoverInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RecoverInfo(RecoverInfo value);
    internal bool get_do_DesignTimeVisible();
    internal void set_do_DesignTimeVisible(bool value);
    internal CommandType get_do_CommandType();
    internal void set_do_CommandType(CommandType value);
    internal int get_do_CommandTimeout();
    internal void set_do_CommandTimeout(int value);
    internal string get_do_CommandText();
    internal void set_do_CommandText(string value);
    internal UpdateRowSource get_do_UpdatedRowSource();
    internal void set_do_UpdatedRowSource(UpdateRowSource value);
    internal DmConnection get_do_DbConnection();
    internal void set_do_DbConnection(DmConnection value);
    internal DmParameterCollection get_do_DbParameterCollection();
    internal DmTransaction get_do_DbTransaction();
    internal void set_do_DbTransaction(DmTransaction value);
    internal void do_Cancel();
    internal virtual int do_ExecuteNonQuery();
    internal virtual object do_ExecuteScalar();
    internal void do_Prepare();
    internal DmParameter do_CreateDbParameter();
    internal virtual DmDataReader do_ExecuteDbDataReader(CommandBehavior behavior);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public virtual void Cancel();
    public virtual int ExecuteNonQuery();
    public virtual object ExecuteScalar();
    public virtual void Prepare();
    protected virtual DbParameter CreateDbParameter();
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    internal void ResetSqlAndParameters(DmCommand cmd);
    [CompilerGeneratedAttribute]
internal int get_RetCmdType();
    [CompilerGeneratedAttribute]
internal void set_RetCmdType(int value);
    [CompilerGeneratedAttribute]
internal DmResultSetCache get_CurResultSetCache();
    [CompilerGeneratedAttribute]
internal void set_CurResultSetCache(DmResultSetCache value);
    protected virtual override void Finalize();
    public void Close();
    private void CheckDisposed();
    private void ReleaseManagedResource();
    private void ReleaseUnmanagedResource();
    protected virtual void Dispose(bool disposing);
    public void Dispose();
    internal A get_Statement();
    internal void set_Statement(A value);
    internal ArrayList get_RefCursorStmtArr();
    internal void set_RefCursorStmtArr(ArrayList value);
    internal void IncRefCur();
    internal int get_RefCursorStmtArr_cur();
    internal void set_RefCursorStmtArr_cur(int value);
    internal A get_RetRefCursorStmt();
    internal void set_RetRefCursorStmt(A value);
    internal void SetStmtSerial(int level);
    public bool GetStmtSerial();
    private void CheckCommandBehavior(CommandBehavior behavior);
    public XmlReader ExecuteXmlReader();
    private bool StatementInvalid();
    public void PrepareInternal(bool checkCommandText);
    private DmDataReader ExecutePreparedQuery(CommandBehavior behavior);
    private int ExecutePreparedUpdate();
    private bool BindParameters(Int32& rowCount, DmDataReader rd, CommandBehavior behavior);
    internal string GetCommandText();
    private sealed virtual override object System.ICloneable.Clone();
    public DmCommand Clone();
    public string GetExplain();
    public string GetCursorName();
    public void SetCursorName(string name);
    public void ChangeCursorType(byte cursorType);
    public long GetExecuteId();
    internal long do_GetExecuteId();
    internal static string modifyDateTime(Match match);
    internal void BeforeExecute();
    internal void AfterExecute();
}
public class Dm.DmCommandBuilder : DbCommandBuilder {
    internal long id;
    internal static long idGenerator;
    [CompilerGeneratedAttribute]
private BaseFilter <FilterHead>k__BackingField;
    [CompilerGeneratedAttribute]
private LogInfo <LogInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RWInfo <RWInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RecoverInfo <RecoverInfo>k__BackingField;
    private static string m_QuotePrefix;
    private static string m_QuoteSuffix;
    public long ID { get; }
    public BaseFilter FilterHead { get; public set; }
    public LogInfo LogInfo { get; public set; }
    public RWInfo RWInfo { get; public set; }
    public RecoverInfo RecoverInfo { get; public set; }
    internal string do_QuotePrefix { get; internal set; }
    internal string do_QuoteSuffix { get; internal set; }
    internal string do_CatalogSeparator { get; internal set; }
    internal CatalogLocation do_CatalogLocation { get; internal set; }
    internal ConflictOption do_ConflictOption { get; internal set; }
    internal string do_SchemaSeparator { get; internal set; }
    public string QuotePrefix { get; public set; }
    public string QuoteSuffix { get; public set; }
    public string CatalogSeparator { get; public set; }
    public CatalogLocation CatalogLocation { get; public set; }
    public ConflictOption ConflictOption { get; public set; }
    public string SchemaSeparator { get; public set; }
    public DmCommandBuilder(DmDataAdapter adapter);
    private static DmCommandBuilder();
    public sealed virtual long get_ID();
    [CompilerGeneratedAttribute]
public sealed virtual BaseFilter get_FilterHead();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterHead(BaseFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual LogInfo get_LogInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LogInfo(LogInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RWInfo get_RWInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RWInfo(RWInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RecoverInfo get_RecoverInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RecoverInfo(RecoverInfo value);
    internal string get_do_QuotePrefix();
    internal void set_do_QuotePrefix(string value);
    internal string get_do_QuoteSuffix();
    internal void set_do_QuoteSuffix(string value);
    internal string get_do_CatalogSeparator();
    internal void set_do_CatalogSeparator(string value);
    internal CatalogLocation get_do_CatalogLocation();
    internal void set_do_CatalogLocation(CatalogLocation value);
    internal ConflictOption get_do_ConflictOption();
    internal void set_do_ConflictOption(ConflictOption value);
    internal string get_do_SchemaSeparator();
    internal void set_do_SchemaSeparator(string value);
    internal string do_QuoteIdentifier(string org_str);
    internal void do_RefreshSchema();
    internal string do_UnquoteIdentifier(string org_str);
    internal void do_ApplyParameterInfo(DmParameter parameter, DataRow datarow, StatementType statementType, bool whereClause);
    internal string do_GetParameterName(string parameterName);
    internal string do_GetParameterName(int parameterOrdinal);
    internal string do_GetParameterPlaceholder(int parameterOrdinal);
    internal DataTable do_GetSchemaTable(DmCommand sourceCommand);
    internal DmCommand do_InitializeCommand(DmCommand command);
    internal void do_SetRowUpdatingHandler(DmDataAdapter adapter);
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public virtual string get_CatalogSeparator();
    public virtual void set_CatalogSeparator(string value);
    public virtual CatalogLocation get_CatalogLocation();
    public virtual void set_CatalogLocation(CatalogLocation value);
    public virtual ConflictOption get_ConflictOption();
    public virtual void set_ConflictOption(ConflictOption value);
    public virtual string get_SchemaSeparator();
    public virtual void set_SchemaSeparator(string value);
    public virtual string QuoteIdentifier(string org_str);
    public virtual void RefreshSchema();
    public virtual string UnquoteIdentifier(string org_str);
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow datarow, StatementType statementType, bool whereClause);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual DataTable GetSchemaTable(DbCommand sourceCommand);
    protected virtual DbCommand InitializeCommand(DbCommand command);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    public DbCommand GetUpdateCommand(bool useColumnsForParameterNames);
    protected virtual void Dispose(bool disposing);
    public static void DeriveParameters(DmCommand command);
    private void RowUpdatingHandler(object sender, DmSqlRowUpdatingEventArgs e);
    private static void ParameterNew(DmParameter dmp, string name, string dbtype, ParameterDirection paramterType, DmCommand command);
}
internal class Dm.DmCommandSet : object {
    private static string ClassName;
    private BatchedCommand m_NowBatchCmd;
    private ArrayList m_BatchCommands;
    private DmConnection m_Conn;
    public ArrayList BatchCommands { get; }
    private static DmCommandSet();
    public ArrayList get_BatchCommands();
    public void Append(DmCommand cmd);
    public int ExecuteNonQuery();
    public void Clear();
}
public class Dm.DmConnection : DbConnection {
    internal long id;
    internal static long idGenerator;
    [CompilerGeneratedAttribute]
private BaseFilter <FilterHead>k__BackingField;
    [CompilerGeneratedAttribute]
private LogInfo <LogInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RWInfo <RWInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RecoverInfo <RecoverInfo>k__BackingField;
    private static string ClassName;
    internal DmConnInstance m_ConnInst;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_AlreadyDisposed;
    private DmSchema m_Schema;
    private bool forEFCore;
    private ConnectionState connectionState;
    internal static RsLRUCache rsLRUCache;
    internal static object obj;
    public static Assembly DmSkyWalkingAgentAssembly;
    [CompilerGeneratedAttribute]
private DmConnProperty <ConnProperty>k__BackingField;
    public long ID { get; }
    public BaseFilter FilterHead { get; public set; }
    public LogInfo LogInfo { get; public set; }
    public RWInfo RWInfo { get; public set; }
    public RecoverInfo RecoverInfo { get; public set; }
    internal string do_ServerVersion { get; }
    internal string do_DataSource { get; }
    internal string do_Database { get; }
    internal int do_ConnectionTimeout { get; }
    internal string do_ConnectionString { get; internal set; }
    internal ConnectionState do_State { get; internal set; }
    internal DbProviderFactory do_DbProviderFactory { get; }
    public string ServerVersion { get; }
    public string DataSource { get; }
    public string Database { get; }
    public int ConnectionTimeout { get; }
    public string ConnectionString { get; public set; }
    protected DbProviderFactory DbProviderFactory { get; }
    public ConnectionState State { get; }
    public DmMppType MppType { get; public set; }
    public string User { get; }
    public string Password { get; }
    internal DmConnProperty ConnProperty { get; internal set; }
    public string Schema { get; public set; }
    public bool ForEFCore { get; public set; }
    public DmConnection(bool forEF);
    public DmConnection(string connectionString);
    public DmConnection(string connectionString, bool forEFCore);
    private static DmConnection();
    public sealed virtual long get_ID();
    [CompilerGeneratedAttribute]
public sealed virtual BaseFilter get_FilterHead();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterHead(BaseFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual LogInfo get_LogInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LogInfo(LogInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RWInfo get_RWInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RWInfo(RWInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RecoverInfo get_RecoverInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RecoverInfo(RecoverInfo value);
    public string getConnPoolKey();
    internal string get_do_ServerVersion();
    internal string get_do_DataSource();
    internal string get_do_Database();
    internal int get_do_ConnectionTimeout();
    internal string get_do_ConnectionString();
    internal void set_do_ConnectionString(string value);
    internal ConnectionState get_do_State();
    internal void set_do_State(ConnectionState value);
    internal DbProviderFactory get_do_DbProviderFactory();
    internal DmTransaction do_BeginDbTransaction(IsolationLevel isolationLevel);
    internal void do_ChangeDatabase(string databaseName);
    internal void do_Close();
    internal DmCommand do_CreateDbCommand();
    internal void Reconnect();
    internal void do_EnlistTransaction(Transaction transaction);
    internal void do_EnlistTransaction2(Transaction transaction);
    internal DataTable do_GetSchema();
    internal DataTable do_GetSchema(string collectionName);
    internal DataTable do_GetSchema(string collectionName, String[] restrictionValues);
    internal void do_Open();
    internal DmStruct do_CreateStruct(string typeName, Object[] attributes);
    internal DmArray do_CreateArray(string typeName, Object[] elements);
    internal DmStruct do_CreateIndexTable(string typeName, Dictionary`2<string, object> dictionary);
    public virtual string get_ServerVersion();
    public virtual string get_DataSource();
    public virtual string get_Database();
    public virtual int get_ConnectionTimeout();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    protected virtual DbProviderFactory get_DbProviderFactory();
    public virtual ConnectionState get_State();
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public virtual void ChangeDatabase(string databaseName);
    public virtual void Close();
    protected virtual DbCommand CreateDbCommand();
    public DmCommand CreateCommand(string cmdText);
    public virtual void EnlistTransaction(Transaction transaction);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    public virtual void Open();
    internal void Connect();
    internal int getIndexOnDBGroup();
    public DmMppType get_MppType();
    public void set_MppType(DmMppType value);
    public string get_User();
    public string get_Password();
    [CompilerGeneratedAttribute]
internal DmConnProperty get_ConnProperty();
    [CompilerGeneratedAttribute]
internal void set_ConnProperty(DmConnProperty value);
    public string get_Schema();
    public void set_Schema(string value);
    public bool get_ForEFCore();
    public void set_ForEFCore(bool value);
    protected virtual override void Finalize();
    public void ClearAllPools(bool pooled);
    internal void ReleaseUnmanagedResource(bool pooled);
    protected virtual void Dispose(bool disposing);
    internal void SetState(ConnectionState newConnectionState);
    public void SetDatabase(string db);
    public DmTransaction BeginTransaction(IsolationLevel il, bool for_ef);
    internal DmConnInstance GetConnInstance();
    internal void CheckProperty();
    private sealed virtual override object System.ICloneable.Clone();
    public DmConnection Clone();
    public bool CompatibleOracle();
    public void CheckClosed();
    public DmStruct CreateStruct(string typeName, Object[] attributes);
    public DmArray CreateArray(string typeName, Object[] elements);
    public DmStruct CreateIndexTable(string typeName, Dictionary`2<string, object> dictionary);
    public static DmCommand CreateDmTracingCommand(DmConnection conn);
}
[DefaultMemberAttribute("Item")]
public class Dm.DmConnectionStringBuilder : DbConnectionStringBuilder {
    internal long id;
    internal static long idGenerator;
    [CompilerGeneratedAttribute]
private BaseFilter <FilterHead>k__BackingField;
    [CompilerGeneratedAttribute]
private LogInfo <LogInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RWInfo <RWInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RecoverInfo <RecoverInfo>k__BackingField;
    private static List`1<DmOption> options;
    internal Dictionary`2<string, object> property;
    internal Dictionary`2<string, object> setProperty;
    public long ID { get; }
    public BaseFilter FilterHead { get; public set; }
    public LogInfo LogInfo { get; public set; }
    public RWInfo RWInfo { get; public set; }
    public RecoverInfo RecoverInfo { get; public set; }
    public string Server { get; public set; }
    public string User { get; public set; }
    public string Password { get; public set; }
    public int Port { get; public set; }
    public string Encoding { get; public set; }
    public bool Enlist { get; public set; }
    public int ConnectionTimeout { get; public set; }
    public int CommandTimeout { get; public set; }
    public int PoolSize { get; public set; }
    public bool ConnPooling { get; public set; }
    public int ConnPoolSize { get; public set; }
    public bool ConnPoolCheck { get; public set; }
    public int ConnPoolTimeout { get; public set; }
    public int ConnPoolIdleExpiredTime { get; public set; }
    public int ConnPoolIdleClearInterval { get; public set; }
    public bool EscapeProcess { get; public set; }
    public bool StmtPooling { get; public set; }
    public bool PreparePooling { get; public set; }
    public int PreparePoolSize { get; public set; }
    public short Time_Zone { get; public set; }
    public String[] Keywords { get; public set; }
    public object Login_Mode { get; public set; }
    public string Schema { get; public set; }
    public bool SchemaSensitive { get; public set; }
    public string AppName { get; public set; }
    public string Host { get; public set; }
    public string OS { get; public set; }
    public string Database { get; public set; }
    unknown string InitialCatalog {public set; }
    public string Dm_svc_conf { get; public set; }
    public object LogLevel { get; public set; }
    public int Compress { get; public set; }
    public int CompressId { get; public set; }
    public bool DbTimeToTimeSpan { get; public set; }
    public bool CaseSensitive { get; public set; }
    public bool Varchar36ToGuid { get; public set; }
    internal bool do_IsFixedSize { get; }
    internal int do_Count { get; }
    internal ICollection do_Keys { get; }
    internal ICollection do_Values { get; }
    public object Item { get; public set; }
    public bool IsFixedSize { get; }
    public int Count { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    private static DmConnectionStringBuilder();
    public DmConnectionStringBuilder(string connectionstring);
    public sealed virtual long get_ID();
    [CompilerGeneratedAttribute]
public sealed virtual BaseFilter get_FilterHead();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterHead(BaseFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual LogInfo get_LogInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LogInfo(LogInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RWInfo get_RWInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RWInfo(RWInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RecoverInfo get_RecoverInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RecoverInfo(RecoverInfo value);
    private void ParseServer(string keyword, string value);
    public string get_Server();
    public void set_Server(string value);
    public string get_User();
    public void set_User(string value);
    public string get_Password();
    public void set_Password(string value);
    public int get_Port();
    public void set_Port(int value);
    public string get_Encoding();
    public void set_Encoding(string value);
    public bool get_Enlist();
    public void set_Enlist(bool value);
    public int get_ConnectionTimeout();
    public void set_ConnectionTimeout(int value);
    public int get_CommandTimeout();
    public void set_CommandTimeout(int value);
    public int get_PoolSize();
    public void set_PoolSize(int value);
    public bool get_ConnPooling();
    public void set_ConnPooling(bool value);
    public int get_ConnPoolSize();
    public void set_ConnPoolSize(int value);
    public bool get_ConnPoolCheck();
    public void set_ConnPoolCheck(bool value);
    public int get_ConnPoolTimeout();
    public void set_ConnPoolTimeout(int value);
    public int get_ConnPoolIdleExpiredTime();
    public void set_ConnPoolIdleExpiredTime(int value);
    public int get_ConnPoolIdleClearInterval();
    public void set_ConnPoolIdleClearInterval(int value);
    public bool get_EscapeProcess();
    public void set_EscapeProcess(bool value);
    public bool get_StmtPooling();
    public void set_StmtPooling(bool value);
    public bool get_PreparePooling();
    public void set_PreparePooling(bool value);
    public int get_PreparePoolSize();
    public void set_PreparePoolSize(int value);
    public short get_Time_Zone();
    public void set_Time_Zone(short value);
    public String[] get_Keywords();
    public void set_Keywords(String[] value);
    public object get_Login_Mode();
    public void set_Login_Mode(object value);
    public string get_Schema();
    public void set_Schema(string value);
    public bool get_SchemaSensitive();
    public void set_SchemaSensitive(bool value);
    public string get_AppName();
    public void set_AppName(string value);
    public string get_Host();
    public void set_Host(string value);
    public string get_OS();
    public void set_OS(string value);
    public string get_Database();
    public void set_Database(string value);
    public void set_InitialCatalog(string value);
    public string get_Dm_svc_conf();
    public void set_Dm_svc_conf(string value);
    public object get_LogLevel();
    public void set_LogLevel(object value);
    public int get_Compress();
    public void set_Compress(int value);
    public int get_CompressId();
    public void set_CompressId(int value);
    public bool get_DbTimeToTimeSpan();
    public void set_DbTimeToTimeSpan(bool value);
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    public bool get_Varchar36ToGuid();
    public void set_Varchar36ToGuid(bool value);
    internal object do_getThis(string keyword);
    internal void do_setThis(string keyword, object value);
    internal bool get_do_IsFixedSize();
    internal int get_do_Count();
    internal ICollection get_do_Keys();
    internal ICollection get_do_Values();
    internal void do_Clear();
    internal bool do_ContainsKey(string keyword);
    internal bool do_Remove(string keyword);
    internal bool do_EquivalentTo(DmConnectionStringBuilder connectionStringBuilder);
    internal bool do_ShouldSerialize(string keyword);
    internal bool do_TryGetValue(string keyword, Object& value);
    internal void do_GetProperties(Hashtable propertyDescriptors);
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public virtual bool get_IsFixedSize();
    public virtual int get_Count();
    public virtual ICollection get_Keys();
    public virtual ICollection get_Values();
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    public virtual bool Remove(string keyword);
    public virtual bool EquivalentTo(DbConnectionStringBuilder connectionStringBuilder);
    public virtual bool ShouldSerialize(string keyword);
    public virtual bool TryGetValue(string keyword, Object& value);
    protected virtual void GetProperties(Hashtable propertyDescriptors);
}
internal class Dm.DmConnInstance : object {
    private DmTransaction m_Tran;
    private B m_Csi;
    private DmConnection m_Conn;
    private List`1<A> m_Stmts;
    private b m_SendMsg;
    private b m_RecvMsg;
    private DmConnProperty m_ConnPro;
    private Queue stmt_queue;
    private LRUCache`2<string, A> pstmtCache;
    private DmPromotableTransaction currentTransaction;
    private object _aliveCheckLockObj;
    private bool _aliveCheck;
    private object _stmtLock;
    [CompilerGeneratedAttribute]
private RWInfo <RWInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RecoverInfo <RecoverInfo>k__BackingField;
    internal DateTime connPoolPutTime;
    internal RWInfo RWInfo { get; internal set; }
    internal RecoverInfo RecoverInfo { get; internal set; }
    internal bool AliveCheck { get; internal set; }
    public DmConnProperty ConnProperty { get; }
    public DmTransaction Transaction { get; public set; }
    public DmConnection Conn { get; public set; }
    public List`1<A> Stmts { get; }
    internal DmPromotableTransaction CurrentTransaction { get; internal set; }
    public DmConnInstance(DmConnection conn);
    [CompilerGeneratedAttribute]
internal RWInfo get_RWInfo();
    [CompilerGeneratedAttribute]
internal void set_RWInfo(RWInfo value);
    [CompilerGeneratedAttribute]
internal RecoverInfo get_RecoverInfo();
    [CompilerGeneratedAttribute]
internal void set_RecoverInfo(RecoverInfo value);
    internal bool ReUsedStmt(A stmt);
    internal bool get_AliveCheck();
    internal void set_AliveCheck(bool value);
    public DmConnProperty get_ConnProperty();
    public DmTransaction get_Transaction();
    public void set_Transaction(DmTransaction value);
    public DmConnection get_Conn();
    public void set_Conn(DmConnection value);
    public List`1<A> get_Stmts();
    internal DmPromotableTransaction get_CurrentTransaction();
    internal void set_CurrentTransaction(DmPromotableTransaction value);
    internal B GetCsi();
    public bool GetAutoCommit();
    internal A GetStmtFromPool(DmCommand cmd);
    public void SetAutoCommit(bool autoCommit);
    public void CheckClosed();
    public void Switched();
    private void Cleanup(bool keep_tcp);
    public void Close(bool keep_tcp);
    private void SetTransactionIsolation(DmTransaction m_Tran, IsolationLevel level);
    public void SetTrxISO(IsolationLevel level);
    public DmTransaction BeginTrx(IsolationLevel il);
    public void Commit(bool for_new_tran);
    public void Rollback();
    public DmSavePoint Save(string savepointName);
    public void Rollback(string savepointName);
    public void Release(string savepointName);
    private void ClearTrx();
    public void AddStmt(A stmt);
    public void RemoveStmt(A stmt);
    public void CloseAllStmts(bool keep_tcp);
    public void ClearAllStmts();
    public void RestAllStmt();
}
internal class Dm.DmConnInstancePool : object {
    private static int m_ConnectionNumber;
    public static int Number { get; }
    public static DmConnInstance GetConnInstance(DmConnProperty property);
    public static void DestroyAll();
    public static int get_Number();
}
internal class Dm.DmConnInstanceTransactionManager : object {
    private static Hashtable _dmConnInstanceInUse;
    private static DmConnInstanceTransactionManager();
    public static DmConnInstance GetDmConnInstanceInTransaction(Transaction transaction);
    public static void SetDmConnInstanceInTransaction(DmConnInstance connInstance);
    public static void RemoveDmConnInstanceInTransaction(Transaction transaction);
}
internal class Dm.DmConnProperty : object {
    private byte m_MppType;
    private byte m_NewLobFlag;
    private bool m_LongLobFlag;
    private int m_HeartBeatTimeout;
    private Nullable`1<bool> m_AutoCommit;
    private int m_MaxRowSize;
    private int m_DDLAutoCommit;
    private bool m_CaseSensitive;
    private byte m_backslashEsc;
    private int m_FailedAttempts;
    private string m_LastLoginIP;
    private string m_LastLoginTime;
    private int m_LoginWarningID;
    private int m_GracetimeRemainder;
    private string m_guid;
    private string m_CurSchema;
    private IsolationLevel m_ISOlvl;
    private int m_encrypt;
    private int m_serials;
    private short m_DbTimeZone;
    private int m_sessClt;
    private byte m_accessMode;
    private int m_MaxSession;
    private byte m_c2p;
    private bool m_commited;
    private string m_serverVersion;
    private int m_verNum;
    private bool m_DbrwSeparate;
    private string m_standbyIp;
    private int m_standbyPort;
    private int m_standbyNum;
    private long _sessId;
    private bool rwStandby;
    private int svrMode;
    private int svrStat;
    private bool dscControl;
    internal string oracleDateFormat;
    internal string oracleTimestampFormat;
    internal string oracleTimestampTZFormat;
    internal string oracleTimeFormat;
    internal string oracleTimeTZFormat;
    internal string formatNumericChars;
    internal string proxyClient;
    private string serverEncoding;
    internal int nlsDateLang;
    internal int msgVersion;
    internal int lobOffRowLen;
    internal int rowidNBitsEpno;
    internal long rowidMaxHpno;
    internal int rowidMaxEpno;
    internal Byte[] serverPubKey;
    internal int encryptType;
    internal int hashType;
    internal bool encryptPwd;
    internal bool encryptMsg;
    private DmSvcConfig config;
    private DmConnectionStringBuilder builder;
    internal Dictionary`2<string, object> property;
    internal static Dictionary`2<string, Encoding> encodingMap;
    [CompilerGeneratedAttribute]
private string <ServName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerActual>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PortActual>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CrcBody>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PropertyHashCode>k__BackingField;
    internal string ConnectionString { get; internal set; }
    internal string ServName { get; internal set; }
    internal string ServerActual { get; internal set; }
    internal int PortActual { get; internal set; }
    internal EPGroup EPGroup { get; internal set; }
    internal string Server { get; internal set; }
    internal string User { get; internal set; }
    internal string Pwd { get; internal set; }
    internal int Port { get; internal set; }
    internal string ServerEncoding { get; internal set; }
    internal bool Enlist { get; }
    internal int ConnectionTimeout { get; }
    internal int SocketTimeout { get; }
    internal int CommandTimeout { get; }
    internal int PoolSize { get; }
    internal bool ConnPooling { get; internal set; }
    internal int ConnPoolSize { get; internal set; }
    internal bool ConnPoolCheck { get; internal set; }
    internal int ConnPoolTimeout { get; internal set; }
    internal int ConnPoolIdleExpiredTime { get; internal set; }
    internal int ConnPoolIdleClearInterval { get; internal set; }
    internal bool EscapeProcess { get; internal set; }
    internal bool StmtPooling { get; }
    internal bool PreparePooling { get; }
    internal int PreparePoolSize { get; }
    internal short TimeZone { get; internal set; }
    internal String[] ResveredList { get; }
    internal Nullable`1<LoginModeFlag> LoginPrimary { get; internal set; }
    internal Nullable`1<EpSelector> EpSelector { get; }
    internal int SwitchTimes { get; internal set; }
    internal int SwitchInterval { get; }
    internal Nullable`1<LoginStatus> LoginStatus { get; }
    internal bool LoginDscCtrl { get; }
    internal int RwStandbyRecoverTime { get; }
    internal bool RWHA { get; }
    internal Nullable`1<DoSwitch> DoSwitch { get; }
    internal Nullable`1<CLUSTER> Cluster { get; }
    internal string Schema { get; internal set; }
    internal bool SchemaSensitive { get; internal set; }
    internal string AppName { get; }
    internal string Host { get; }
    internal string OS { get; }
    internal string Database { get; internal set; }
    internal int RwPercent { get; }
    internal int RwSeparate { get; internal set; }
    internal int StmtPoolSize { get; }
    internal int Language { get; }
    internal int Compress { get; internal set; }
    internal int CompressId { get; }
    internal int LobMode { get; }
    internal CompatibleMode CompatibleMode { get; }
    internal bool IgnoreCase { get; }
    internal bool IsBdtaRs { get; internal set; }
    internal bool CrcBody { get; internal set; }
    internal bool EnRsCache { get; }
    internal int RsCacheSize { get; }
    internal int RsRefreshFreq { get; }
    internal int DbAliveCheckFreq { get; }
    internal int DbAliveCheckTimeout { get; }
    internal int MaxLobDataLenPerMsg { get; }
    internal IntervalMode IntervalMode { get; }
    internal int StandbyNum { get; internal set; }
    internal string StandbyIp { get; internal set; }
    internal int StandbyPort { get; internal set; }
    internal long SessId { get; internal set; }
    internal bool DbrwSeparate { get; internal set; }
    internal byte MppType { get; internal set; }
    internal byte NewLobFlag { get; internal set; }
    internal bool LongLobFlag { get; internal set; }
    internal int HeartBeatTimeout { get; internal set; }
    internal int VerNum { get; internal set; }
    internal string ServerVersion { get; internal set; }
    internal int Serials { get; internal set; }
    internal int Encrypt { get; internal set; }
    internal bool Commited { get; internal set; }
    internal byte C2p { get; internal set; }
    internal byte BackslashEsc { get; internal set; }
    internal int MaxSession { get; internal set; }
    internal byte AccessMode { get; internal set; }
    internal int SessClt { get; }
    internal IsolationLevel IsolationLevel { get; internal set; }
    internal bool AutoCommit { get; internal set; }
    internal bool AlwaysAllowAutoCommit { get; }
    internal int BatchType { get; }
    internal int BatchAllowMaxErrors { get; }
    internal bool BatchContinueOnError { get; }
    internal bool BatchNotOnCall { get; }
    internal int BufPrefetch { get; internal set; }
    internal bool ClobAsString { get; }
    internal bool ColumnNameUpperCase { get; }
    internal ColumnNameCase ColumnNameCase { get; }
    internal string DatabaseProductName { get; }
    internal long MaxRows { get; }
    internal bool LoginEncrypt { get; }
    internal string CipherPath { get; }
    internal bool DbTimeToTimeSpan { get; }
    internal bool caseSensitive { get; }
    internal bool Varchar36ToGuid { get; }
    internal string CurrentSchema { get; internal set; }
    internal short DbTimeZone { get; internal set; }
    internal int MaxRowSize { get; internal set; }
    internal int DDLAutoCommit { get; internal set; }
    internal bool CaseSensitive { get; internal set; }
    internal int FailedAttempts { get; internal set; }
    internal string LastLoginIP { get; internal set; }
    internal string LastLoginTime { get; internal set; }
    internal int LoginWarningID { get; internal set; }
    internal int GracetimeRemainder { get; internal set; }
    internal string Guid { get; internal set; }
    internal bool RWStandby { get; internal set; }
    internal int SvrMode { get; internal set; }
    internal int SvrStat { get; internal set; }
    internal bool DscControl { get; internal set; }
    internal int PropertyHashCode { get; internal set; }
    private static DmConnProperty();
    internal DmConnProperty(string connectionstring);
    private void AdjustProperty();
    internal string get_ConnectionString();
    internal void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
internal string get_ServName();
    [CompilerGeneratedAttribute]
internal void set_ServName(string value);
    [CompilerGeneratedAttribute]
internal string get_ServerActual();
    [CompilerGeneratedAttribute]
internal void set_ServerActual(string value);
    [CompilerGeneratedAttribute]
internal int get_PortActual();
    [CompilerGeneratedAttribute]
internal void set_PortActual(int value);
    internal EPGroup get_EPGroup();
    internal void set_EPGroup(EPGroup value);
    internal string get_Server();
    internal void set_Server(string value);
    internal string get_User();
    internal void set_User(string value);
    internal string get_Pwd();
    internal void set_Pwd(string value);
    internal int get_Port();
    internal void set_Port(int value);
    internal string get_ServerEncoding();
    internal void set_ServerEncoding(string value);
    internal bool get_Enlist();
    internal int get_ConnectionTimeout();
    internal int get_SocketTimeout();
    internal int get_CommandTimeout();
    internal int get_PoolSize();
    internal bool get_ConnPooling();
    internal void set_ConnPooling(bool value);
    internal int get_ConnPoolSize();
    internal void set_ConnPoolSize(int value);
    internal bool get_ConnPoolCheck();
    internal void set_ConnPoolCheck(bool value);
    internal int get_ConnPoolTimeout();
    internal void set_ConnPoolTimeout(int value);
    internal int get_ConnPoolIdleExpiredTime();
    internal void set_ConnPoolIdleExpiredTime(int value);
    internal int get_ConnPoolIdleClearInterval();
    internal void set_ConnPoolIdleClearInterval(int value);
    internal bool get_EscapeProcess();
    internal void set_EscapeProcess(bool value);
    internal bool get_StmtPooling();
    internal bool get_PreparePooling();
    internal int get_PreparePoolSize();
    internal short get_TimeZone();
    internal void set_TimeZone(short value);
    internal String[] get_ResveredList();
    internal Nullable`1<LoginModeFlag> get_LoginPrimary();
    internal void set_LoginPrimary(Nullable`1<LoginModeFlag> value);
    internal Nullable`1<EpSelector> get_EpSelector();
    internal int get_SwitchTimes();
    internal void set_SwitchTimes(int value);
    internal int get_SwitchInterval();
    internal Nullable`1<LoginStatus> get_LoginStatus();
    internal bool get_LoginDscCtrl();
    internal int get_RwStandbyRecoverTime();
    internal bool get_RWHA();
    internal Nullable`1<DoSwitch> get_DoSwitch();
    internal Nullable`1<CLUSTER> get_Cluster();
    internal string get_Schema();
    internal void set_Schema(string value);
    internal bool get_SchemaSensitive();
    internal void set_SchemaSensitive(bool value);
    internal string get_AppName();
    internal string get_Host();
    internal string get_OS();
    internal string get_Database();
    internal void set_Database(string value);
    internal int get_RwPercent();
    internal int get_RwSeparate();
    internal void set_RwSeparate(int value);
    internal int get_StmtPoolSize();
    internal int get_Language();
    internal int get_Compress();
    internal void set_Compress(int value);
    internal int get_CompressId();
    internal int get_LobMode();
    internal CompatibleMode get_CompatibleMode();
    internal bool get_IgnoreCase();
    internal bool get_IsBdtaRs();
    internal void set_IsBdtaRs(bool value);
    [CompilerGeneratedAttribute]
internal bool get_CrcBody();
    [CompilerGeneratedAttribute]
internal void set_CrcBody(bool value);
    internal bool get_EnRsCache();
    internal int get_RsCacheSize();
    internal int get_RsRefreshFreq();
    internal int get_DbAliveCheckFreq();
    internal int get_DbAliveCheckTimeout();
    internal int get_MaxLobDataLenPerMsg();
    internal IntervalMode get_IntervalMode();
    internal int get_StandbyNum();
    internal void set_StandbyNum(int value);
    internal string get_StandbyIp();
    internal void set_StandbyIp(string value);
    internal int get_StandbyPort();
    internal void set_StandbyPort(int value);
    internal long get_SessId();
    internal void set_SessId(long value);
    internal bool get_DbrwSeparate();
    internal void set_DbrwSeparate(bool value);
    internal byte get_MppType();
    internal void set_MppType(byte value);
    internal byte get_NewLobFlag();
    internal void set_NewLobFlag(byte value);
    internal bool get_LongLobFlag();
    internal void set_LongLobFlag(bool value);
    internal int get_HeartBeatTimeout();
    internal void set_HeartBeatTimeout(int value);
    internal int get_VerNum();
    internal void set_VerNum(int value);
    internal string get_ServerVersion();
    internal void set_ServerVersion(string value);
    internal int get_Serials();
    internal void set_Serials(int value);
    internal int get_Encrypt();
    internal void set_Encrypt(int value);
    internal bool get_Commited();
    internal void set_Commited(bool value);
    internal byte get_C2p();
    internal void set_C2p(byte value);
    internal byte get_BackslashEsc();
    internal void set_BackslashEsc(byte value);
    internal int get_MaxSession();
    internal void set_MaxSession(int value);
    internal byte get_AccessMode();
    internal void set_AccessMode(byte value);
    internal int get_SessClt();
    internal IsolationLevel get_IsolationLevel();
    internal void set_IsolationLevel(IsolationLevel value);
    internal bool get_AutoCommit();
    internal void set_AutoCommit(bool value);
    internal void ClearAutoCommit();
    internal bool get_AlwaysAllowAutoCommit();
    internal int get_BatchType();
    internal int get_BatchAllowMaxErrors();
    internal bool get_BatchContinueOnError();
    internal bool get_BatchNotOnCall();
    internal int get_BufPrefetch();
    internal void set_BufPrefetch(int value);
    internal bool get_ClobAsString();
    internal bool get_ColumnNameUpperCase();
    internal ColumnNameCase get_ColumnNameCase();
    internal string get_DatabaseProductName();
    internal long get_MaxRows();
    internal bool get_LoginEncrypt();
    internal string get_CipherPath();
    internal bool get_DbTimeToTimeSpan();
    internal bool get_caseSensitive();
    internal bool get_Varchar36ToGuid();
    internal string get_CurrentSchema();
    internal void set_CurrentSchema(string value);
    internal short get_DbTimeZone();
    internal void set_DbTimeZone(short value);
    internal int get_MaxRowSize();
    internal void set_MaxRowSize(int value);
    internal int get_DDLAutoCommit();
    internal void set_DDLAutoCommit(int value);
    internal bool get_CaseSensitive();
    internal void set_CaseSensitive(bool value);
    internal int get_FailedAttempts();
    internal void set_FailedAttempts(int value);
    internal string get_LastLoginIP();
    internal void set_LastLoginIP(string value);
    internal string get_LastLoginTime();
    internal void set_LastLoginTime(string value);
    internal int get_LoginWarningID();
    internal void set_LoginWarningID(int value);
    internal int get_GracetimeRemainder();
    internal void set_GracetimeRemainder(int value);
    internal string get_Guid();
    internal void set_Guid(string value);
    internal bool get_RWStandby();
    internal void set_RWStandby(bool value);
    internal int get_SvrMode();
    internal void set_SvrMode(int value);
    internal int get_SvrStat();
    internal void set_SvrStat(int value);
    internal bool get_DscControl();
    internal void set_DscControl(bool value);
    [CompilerGeneratedAttribute]
internal int get_PropertyHashCode();
    [CompilerGeneratedAttribute]
internal void set_PropertyHashCode(int value);
}
internal class Dm.DmConst : object {
    internal static string PROP_KEY_EP_GROUP;
    internal static string PROP_KEY_SERVER;
    internal static string PROP_KEYSYN_SERVER;
    internal static string PROP_KEY_USER;
    internal static string PROP_KEYSYN_USER;
    internal static string PROP_KEY_PASSWORD;
    internal static string PROP_KEYSYN_PASSWORD;
    internal static string PROP_KEY_PORT;
    internal static string PROP_KEY_ENCODING;
    internal static string PROP_KEYSYN_ENCODING;
    internal static string PROP_KEY_ENLIST;
    internal static string PROP_KEYSYN_ENLIST;
    internal static string PROP_KEY_CONNECTION_TIMEOUT;
    internal static string PROP_KEYSYN_CONNECTION_TIMEOUT;
    internal static string PROP_KEY_COMMAND_TIMEOUT;
    internal static string PROP_KEYSYN_COMMAND_TIMEOUT;
    internal static string PROP_KEY_STMT_POOL_SIZE;
    internal static string PROP_KEYSYN_STMT_POOL_SIZE;
    internal static string PROP_KEY_STMT_POOLING;
    internal static string PROP_KEYSYN_STMT_POOLING;
    internal static string PROP_KEY_PSTMT_POOLING;
    internal static string PROP_KEYSYN_PSTMT_POOLING;
    internal static string PROP_KEY_PSTMT_POOL_SIZE;
    internal static string PROP_KEYSYN_PSTMT_POOL_SIZE;
    internal static string PROP_KEY_CONN_POOLING;
    internal static string PROP_KEYSYN_CONN_POOLING;
    internal static string PROP_KEY_CONN_POOL_SIZE;
    internal static string PROP_KEYSYN_CONN_POOL_SIZE;
    internal static string PROP_KEY_CONN_POOL_CHECK;
    internal static string PROP_KEYSYN_CONN_POOL_CHECK;
    internal static string PROP_KEY_CONN_POOL_TIMEOUT;
    internal static string PROP_KEYSYN_CONN_POOL_TIMEOUT;
    internal static string PROP_KEY_CONN_POOL_IDLE_EXPIRED_TIME;
    internal static string PROP_KEYSYN_CONN_POOL_IDLE_EXPIRED_TIME;
    internal static string PROP_KEY_CONN_POOL_IDLE_CLEAR_INTERVAL;
    internal static string PROP_KEYSYN_CONN_POOL_IDLE_CLEAR_INTERVAL;
    internal static string PROP_KEY_ESCAPE_PROCESS;
    internal static string PROP_KEYSYN_ESCAPE_PROCESS;
    internal static string PROP_KEY_TIMEZONE;
    internal static string PROP_KEY_LANGUAGE;
    internal static string PROP_KEY_KEYWORDS;
    internal static string PROP_KEYSYN_KEYWORDS;
    internal static string PROP_KEY_LOGIN_MODE;
    internal static string PROP_KEYSYN_LOGIN_MODE;
    internal static string PROP_KEY_SCHEMA;
    internal static string PROP_KEY_SCHEMA_SENSITIVE;
    internal static string PROP_KEY_APPNAME;
    internal static string PROP_KEYSYN_APPNAME;
    internal static string PROP_KEY_DATABASE;
    internal static string PROP_KEY_HOST;
    internal static string PROP_KEY_OS;
    internal static string PROP_KEYSYN_OS;
    internal static string PROP_KEY_DM_SVC_PATH;
    internal static string PROP_KEYSYN_DM_SVC_PATH;
    internal static string PROP_KEY_LOG_LEVEL;
    internal static string PROP_KEYSYN_LOG_LEVEL;
    internal static string PROP_KEY_LOG_DIR;
    internal static string PROP_KEYSYN_LOG_DIR;
    internal static string PROP_KEY_LOG_SIZE;
    internal static string PROP_KEYSYN_LOG_SIZE;
    internal static string PROP_KEY_RW_SEPARATE;
    internal static string PROP_KEYSYN_RW_SEPARATE;
    internal static string PROP_KEY_RW_PERCENT;
    internal static string PROP_KEYSYN_RW_PERCENT;
    internal static string PROP_KEY_COMPRESS;
    internal static string PROP_KEYSYN_COMPRESS;
    internal static string PROP_KEY_COMPRESS_ID;
    internal static string PROP_KEYSYN_COMPRESS_ID;
    internal static string PROP_KEY_LOGIN_ENCRYPT;
    internal static string PROP_KEYSYN_LOGIN_ENCRYPT;
    internal static string PROP_KEY_CIPHER_PATH;
    internal static string PROP_KEYSYN_CIPHER_PATH;
    internal static string PROP_KEY_DIRECT;
    internal static string PROP_KEY_ENABLE_RS_CACHE;
    internal static string PROP_KEYSYN_ENABLE_RS_CACHE;
    internal static string PROP_KEY_RS_CACHE_SIZE;
    internal static string PROP_KEYSYN_RS_CACHE_SIZE;
    internal static string PROP_KEY_RS_REFRESH_FREQ;
    internal static string PROP_KEYSYN_RS_REFRESH_FREQ;
    internal static string PROP_KEY_LOB_MODE;
    internal static string PROP_KEYSYN_LOB_MODE;
    internal static string PROP_KEY_AUTO_COMMIT;
    internal static string PROP_KEYSYN_AUTO_COMMIT;
    internal static string PROP_KEY_ALWAYS_ALLOW_COMMIT;
    internal static string PROP_KEYSYN_ALWAYS_ALLOW_COMMIT;
    internal static string PROP_KEY_BATCH_TYPE;
    internal static string PROP_KEYSYN_BATCH_TYPE;
    internal static string PROP_KEY_BATCH_CONTINUE_ON_ERROR;
    internal static string PROP_KEYSYN_BATCH_CONTINUE_ON_ERROR;
    internal static string PROP_KEY_BATCH_NOT_ON_CALL;
    internal static string PROP_KEYSYN_BATCH_NOT_ON_CALL;
    internal static string PROP_KEY_BATCH_ALLOW_MAX_ERRORS;
    internal static string PROP_KEYSYN_BATCH_ALLOW_MAX_ERRORS;
    internal static string PROP_KEY_BUF_PREFETCH;
    internal static string PROP_KEYSYN_BUF_PREFETCH;
    internal static string PROP_KEY_CLOB_AS_STRING;
    internal static string PROP_KEYSYN_CLOB_AS_STRING;
    internal static string PROP_KEY_COLUMN_NAME_UPPERCASE;
    internal static string PROP_KEYSYN_COLUMN_NAME_UPPERCASE;
    internal static string PROP_KEY_COLUMN_NAME_CASE;
    internal static string PROP_KEYSYN_COLUMN_NAME_CASE;
    internal static string PROP_KEY_DATABASE_PRODUCT_NAME;
    internal static string PROP_KEYSYN_DATABASE_PRODUCT_NAME;
    internal static string PROP_KEY_COMPATIBLE_MODE;
    internal static string PROP_KEYSYN_COMPATIBLE_MODE;
    internal static string PROP_KEY_IGNORE_CASE;
    internal static string PROP_KEYSYN_IGNORE_CASE;
    internal static string PROP_KEY_IS_BDTA_RS;
    internal static string PROP_KEYSYN_IS_BDTA_RS;
    internal static string PROP_KEY_MAX_ROWS;
    internal static string PROP_KEYSYN_MAX_ROWS;
    internal static string PROP_KEY_SOCKET_TIMEOUT;
    internal static string PROP_KEYSYN_SOCKET_TIMEOUT;
    internal static string PROP_KEY_ADDRESS_REMAP;
    internal static string PROP_KEYSYN_ADDRESS_REMAP;
    internal static string PROP_KEY_USER_REMAP;
    internal static string PROP_KEYSYN_USER_REMAP;
    internal static string PROP_KEY_EP_SELECTOR;
    internal static string PROP_KEYSYN_EP_SELECTOR;
    internal static string PROP_KEY_SWITCH_TIMES;
    internal static string PROP_KEYSYN_SWITCH_TIMES;
    internal static string PROP_KEY_SWITCH_INTERVAL;
    internal static string PROP_KEYSYN_SWITCH_INTERVAL;
    internal static string PROP_KEY_LOGIN_STATUS;
    internal static string PROP_KEYSYN_LOGIN_STATUS;
    internal static string PROP_KEY_LOGIN_DSC_CTRL;
    internal static string PROP_KEYSYN_LOGIN_DSC_CTRL;
    internal static string PROP_KEY_RW_STANDBY_RECOVER_TIME;
    internal static string PROP_KEYSYN_RW_STANDBY_RECOVER_TIME;
    internal static string PROP_KEY_RW_HA;
    internal static string PROP_KEYSYN_RW_HA;
    internal static string PROP_KEY_RW_AUTO_DISTRIBUTE;
    internal static string PROP_KEYSYN_RW_AUTO_DISTRIBUTE;
    internal static string PROP_KEY_RW_FILTER_TYPE;
    internal static string PROP_KEYSYN_RW_FILTER_TYPE;
    internal static string PROP_KEY_DO_SWITCH;
    internal static string PROP_KEYSYN_DO_SWITCH;
    internal static string PROP_KEY_CLUSTER;
    internal static string PROP_KEY_DB_ALIVE_CHECK_FREQ;
    internal static string PROP_KEYSYN_DB_ALIVE_CHECK_FREQ;
    internal static string PROP_KEY_DB_ALIVE_CHECK_TIMEOUT;
    internal static string PROP_KEYSYN_DB_ALIVE_CHECK_TIMEOUT;
    internal static string PROP_KEY_MAX_LOB_DATA_LEN_PER_MSG;
    internal static string PROP_KEYSYN_MAX_LOB_DATA_LEN_PER_MSG;
    internal static string PROP_KEY_DBTIME_TO_TIMESPAN;
    internal static string PROP_KEYSYN_DBTIME_TO_TIMESPAN;
    internal static string PROP_KEY_CASE_SENSITIVE;
    internal static string PROP_KEY_VARCHAR36_TO_GUID;
    internal static string PROP_KEY_USE_SKYWALKING;
    internal static string PROP_KEY_INTERVAL_MODE;
    internal static string PROP_KEY_SSL_FILE_PATH;
    internal static string PROP_KEY_SSL_KEY_PASS;
    internal static int SERVER_MODE_NORMAL;
    internal static int SERVER_MODE_PRIMARY;
    internal static int SERVER_MODE_STANDBY;
    internal static int SERVER_STATUS_MOUNT;
    internal static int SERVER_STATUS_OPEN;
    internal static int SERVER_STATUS_SUSPEND;
    internal static int MSG_COMPRESS_THRESHOLD;
    internal static int MSG_COMPRESS_NO;
    internal static int MSG_COMPRESS_SIMPLE;
    internal static int MSG_COMPRESS_AUTO;
    internal static int MSG_CPR_FUN_ID_ZIP;
    internal static int MSG_CPR_FUN_ID_SNAPPY;
    internal static int MSG_CPR_FUN_ID_NONE;
    public static int version_exec2;
    public static int PROVIDER_ERROR;
    public static int PROVIDER_SUCCESS;
    public static int TRUE;
    public static int FALSE;
    public static int CONNECTION_DEFAULT_TIMEOUT;
    public static int SESS_NETP;
    public static int LOGIN_MPP_GLOBAL;
    public static int LOGIN_MPP_LOCAL;
    public static int LOGIN_NEW_LOB_FLAG;
    public static int XDEC_STORE_LEN;
    public static int PLTYPE_CLASS_PREC_MAGIC;
    public static int EXEC_DIRECT_SQL_TYPE_UNDEF;
    public static int EXEC_DIRECT_SQL_TYPE_INSERT;
    public static int EXEC_DIRECT_SQL_TYPE_UPDATE;
    public static int EXEC_DIRECT_SQL_TYPE_SELECT;
    public static int EXEC_DIRECT_SQL_TYPE_DELETE;
    public static int EXEC_DIRECT_OPT_MAX_PARAM;
    public static int DMTIME_FUN_DATE_YEAR;
    public static int DMTIME_FUN_DATE_MONTH;
    public static int DMTIME_FUN_DATE_DAY;
    public static int DMTIME_FUN_DATE_HOUR;
    public static int DMTIME_FUN_DATE_MIN;
    public static int DMTIME_FUN_DATE_SEC;
    public static int DMTIME_FUN_DATE_MSEC;
    public static int DMTIME_FUN_DATE_QUARTER;
    public static int DMTIME_FUN_DATE_DAYOFY;
    public static int DMTIME_FUN_DATE_WEEK;
    public static int DMTIME_FUN_DATE_WEEKDAY;
    public static int DMTIME_FUN_TZ_HOUR;
    public static int DMTIME_FUN_TZ_MIN;
    public static int DMTIME_FUN_DATE_NULL;
    public static int CLEX_TYPE_NORMAL;
    public static int CLEX_TYPE_INT;
    public static int CLEX_TYPE_BINT;
    public static int CLEX_TYPE_REAL;
    public static int CLEX_TYPE_DECIMAL;
    public static int CLEX_TYPE_CHAR;
    public static int EXEC_DIRECT_SQL_BUF_INC_SZ;
    public static int EXEC_DIRECT_SQL_BUF_SZ;
    public static int CHAR_DEFAULT;
    public static int DEFAULTPORT;
    public static int NAMELEN;
    public static int DM_PAGE_SIZE;
    public static int TUPLE_BUF_LEN;
    public static int MSG_MAX_LEN;
    public static int NET_PACKET_SIZE;
    public static int MAX_METADATA_LEN;
    public static int MAX_STMT_NUM;
    public static int MAX_CONNECT_NUM;
    public static int DES_MSG_MAX_ERR_LEN;
    public static int MAXCOLUMNINORDERBY;
    public static int MAXCOLUMNSINGROUPBY;
    public static int DM_MAX_BLOB_LEN_PER_MSG;
    public static int FLD_TEXT_INROW_MAX_SIZE;
    public static int MAX_PARAM_DATA_LEN;
    public static int VERSION_SCHEMA;
    public static int VERSION_ORACLE_FLOAT;
    public static int VERSION_GENERATE_KEY;
    public static int VERSION_ORACLE_DATE;
    public static int VERSION_PREPARE_OPTIMIZE;
    public static int VERSION_PARAMETER_DATA_LEN_4;
    public static int VERSION_MSEC_9;
    public static int VERSION_ROWID_B12;
    public static int VERSION_PUT_DATA2;
    public static int VERSION_FULL_ENCRYPT;
    public static int VERSION;
    public static int CMD_LOGIN;
    public static int CMD_LOGOUT;
    public static int CMD_STMT_ALLOCATE;
    public static int CMD_STMT_FREE;
    public static int CMD_PREPARE;
    public static int CMD_EXECUTE;
    public static int CMD_FETCH;
    public static int CMD_COMMIT;
    public static int CMD_ROLLBACK;
    public static int CMD_GET_SQLSATE;
    public static int CMD_CANCLE;
    public static int CMD_POSITION;
    public static int CMD_EXECUTE2;
    public static int CMD_PUT_DATA;
    public static int CMD_GET_DATA;
    public static int CMD_CREATE_BLOB;
    public static int CMD_CLOSE_STMT;
    public static int CMD_TIME_OUT;
    public static int CMD_CURSOR_PREPARE;
    public static int CMD_CURSOR_EXECUTE;
    public static int CMD_EXPLAIN;
    public static int CMD_PUT_DATA2;
    public static int CMD_CURSOR_SET_NAME;
    public static int CMD_GET_LOB_LEN;
    public static int CMD_SET_LOB_DATA;
    public static int CMD_LOB_TRUNCATE;
    public static int CMD_GET_LOB_DATA;
    public static int CMD_MORE_RESULT;
    public static int CMD_PRE_EXEC;
    public static int CMD_EXEC_DIRECT;
    public static int CMD_SESS_ISO;
    public static int CMD_TABLE_TS;
    public static int CMD_STARTUP;
    public static int CMD_HEART_TIME_OUT;
    public static int RET_BASE;
    public static int RET_DDL_CDB;
    public static int RET_DDL_CTAB;
    public static int RET_DDL_DTAB;
    public static int RET_DDL_CVIEW;
    public static int RET_DDL_DVIEW;
    public static int RET_DDL_CIND;
    public static int RET_DDL_DIND;
    public static int RET_DDL_CUSR;
    public static int RET_DDL_DUSR;
    public static int RET_DDL_CROL;
    public static int RET_DDL_DROL;
    public static int RET_DDL_DROP;
    public static int RET_DDL_ALTDB;
    public static int RET_DDL_ALTUSR;
    public static int RET_DDL_CFUNC;
    public static int RET_DDL_CPROC;
    public static int RET_DDL_GRANT;
    public static int RET_DDL_REVOKE;
    public static int RET_DDL_ALTTAB;
    public static int RET_COMMIT;
    public static int RET_ROLLBACK;
    public static int RET_EXPLAIN;
    public static int RET_SET_TRAN;
    public static int RET_SAVEPNT;
    public static int RET_SET_CURDB;
    public static int RET_SET_CURSCH;
    public static int RET_LOCK_TAB;
    public static int RET_DDL_AUDIT;
    public static int RET_DML_INSERT;
    public static int RET_DML_DELETE;
    public static int RET_DML_UPDATE;
    public static int RET_DML_SELECT;
    public static int RET_DML_SELECT_INTO;
    public static int RET_DML_CALL;
    public static int RET_LOGIN;
    public static int RET_DML_MERGE;
    public static int RET_SET_TIME_ZONE;
    public static int RET_SET_SESS_TRAN;
    public static int RET_FETCH_NOT_OVER;
    public static int RET_EXEC_PROC;
    public static int RET_SIMPLE;
    public static int RET_DDL_CSCHEMA;
    public static int RET_PLAN_ERRCODE;
    public static int RET_DDL_ALTTRIG;
    public static int RET_DDL_DROP_TABLE;
    public static int RET_DDL_DROP_INDEX;
    public static int RET_DDL_DROP_VIEW;
    public static int RET_DML_TRCT;
    public static int RET_SET_IDENTINS;
    public static int RET_DDL_CSEQ;
    public static int RET_DML_CURSOR_DECLARE;
    public static int RET_DML_CURSOR_OPEN;
    public static int RET_DML_CURSOR_CLOSE;
    public static int RET_DML_CURSOR_UPDATE;
    public static int RET_DML_CURSOR_DELETE;
    public static int RET_DML_CURSOR_FETCH;
    public static int RET_DML_CURSOR_SEEK;
    public static int RET_DDL_CLGN;
    public static int RET_DDL_ALTLGN;
    public static int RET_DDL_CCONIND;
    public static int RET_DDL_DCONIND;
    public static int RET_DDL_ALTCONIND;
    public static int RET_DDL_CLNK;
    public static int RET_SYNC_DATA;
    public static int RET_SYNC_COMMIT;
    public static int RET_SYNC_ROLLBACK;
    public static int RET_SYNC_RECV_COMMIT;
    public static int RET_SYNC_RECV_ROLLBACK;
    public static int RET_DDL_CPLY;
    public static int RET_DDL_ALTPLY;
    public static int RET_DDL_ALTUSRPLY;
    public static int RET_DDL_ALTTABPLY;
    public static int RET_DDL_CRULE;
    public static int RET_DDL_COPTR;
    public static int RET_DDL_CALT;
    public static int RET_DDL_CJOB;
    public static int RET_DDL_ALTOPTR;
    public static int RET_DDL_ALTALT;
    public static int RET_DDL_ALTJOB;
    public static int RET_DDL_BAKDB;
    public static int RET_DDL_RESDB;
    public static int RET_STARTUP;
    public static int RET_XA_RECV;
    public static int RET_SYNC_SUSP_TRX;
    public static int RET_SYNC_HEUR_COMMIT;
    public static int RET_SYNC_HEUR_ROLLBACK;
    public static int RET_DDL_CPKG;
    public static int RET_DDL_CPKG_BODY;
    public static int RET_DDL_CTYPE;
    public static int RET_DDL_CTYPE_BODY;
    public static int RET_DDL_CSYNONYM;
    public static int RET_DDL_CCRY;
    public static int RET_DDL_ALTCRY;
    public static int RET_DDL_CTS;
    public static int RET_DDL_ALTTS;
    public static int RET_DDL_COMMENT;
    public static int RET_FLDR_CLR;
    public static int RET_DDL_ALTSESS;
    public static int RET_DDL_CDMN;
    public static int RET_DDL_CCHARSET;
    public static int RET_DDL_CLLT;
    public static int RET_DDL_ALTIND;
    public static int RET_DDL_CCONTEXT;
    public static int RET_DDL_STATON;
    public static int RET_DDL_ALTSESS_DATEFMT;
    public static int RET_DDL_ALTSESS_TIMEFMT;
    public static int RET_DDL_ALTSESS_DTFMT;
    public static int RET_DDL_ALTSESS_DTTZFMT;
    public static int RET_DDL_ALTSESS_TIMETZFMT;
    public static int RET_DDL_ALTSESS_DATE_LANG;
    public static int SQL_TYPE_NLS_NUMERIC_CHARACTERS;
    public static int USINT_UNDEFINED;
    public static int BYTE_SIZE;
    public static int USINT_SIZE;
    public static int ULINT_SIZE;
    public static int DMBOOL_SIZE;
    public static int DDWORD_SIZE;
    public static int TIME_SIZE;
    public static int LINT64_SIZE;
    public static int ROWID_SIZE;
    public static int DEC_SIZE;
    public static int IYM_SIZE;
    public static int IDT_SIZE;
    public static int DATA_BLOB_LEN;
    public static int DATA_TEXT_LEN;
    public static long RESULTSET_ROW_NUMBER_UNKNONW;
    public static int SESS3_CLT_UNKNOWN;
    public static int SESS3_CLT_ODBC;
    public static int SESS3_CLT_SQL3;
    public static int SESS3_CLT_JDBC;
    public static int MSG_LOGIN_USERNANE;
    public static int MSG_LOGIN_PSWD;
    public static int MSG_LOGIN_FLAG;
    public static int MSG_LOGIN_SIZE;
    public static int MSG_POSITION_SIZE;
    public static int MSG_DSE_ITEM_TYPE_DTYPE;
    public static int MSG_DSE_ITEM_TYPE_PREC;
    public static int MSG_DSE_ITEM_TYPE_SCALE;
    public static int MSG_DES_ITEM_NULLABLE;
    public static int MSG_DES_ITEM_FLAGS;
    public static int MSG_DES_ITEM_UNNAMED;
    public static int MSG_DES_ITEM_IO_TYPE;
    public static int MSG_DES_ITEM_NAME_LEN;
    public static int MSG_DES_ITEM_TYPE_NAME_LEN;
    public static int MSG_DES_ITEM_TABLE_NAME_LEN;
    public static int MSG_DES_ITEM_SCHEMA_NAME_LEN;
    public static int MSG_DES_ITEM_FIX_SIZE;
    public static int REC3_FLD_LEN;
    public static int REC3_FLD_FLAG;
    public static int REC3_FLD_N_FIELDS;
    public static int REC3_EXTRA_SIZE;
    public static int REC3_DELETE_MASK;
    public static int REC3_ROWID;
    public static int MSG_PARA_TAG;
    public static int MSG_OVER;
    public static int MSG_BEGIN;
    public static int DATA_NULL_LEN;
    public static int DATA_FULL_LEN;
    public static int LEN_PUT_DATA2;
    public static int DM_PARA_IO_IN;
    public static int DM_PARA_IO_OUT;
    public static int DM_PARA_IO_INOUT;
    public static int MSG_SELBUF_COLNUM;
    public static int MSG_SELBUF_SIZE;
    public static int REC3_HEADER_SIZE;
    public static int REC3_1BYTE_HIGHEST;
    public static int REC3_HIGHEST_OFFSET;
    public static int REC3_SQL_NULL;
    public static int REC3_1BYTE_LEN_MASK;
    public static int DM_FETCH_TYPE_CUR_SET_END;
    public static int DM_FETCH_TYPE_CUR_SET_START;
    public static int DM_FETCH_TYPE_CUR_SET_MID;
    public static int NORMAL_TYPE;
    public static int INPUT_STREAM_TYPE;
    public static int READER_TYPE;
    public static int BLOB_TYPE;
    public static int CLOB_TYPE;
    public static int IS_BLOB;
    public static int IS_CLOB;
    public static int IS_STRING;
    public static int IS_BYTE;
    public static int LOCK_TABLE_X;
    public static int LOCK_TABLE_S;
    public static int ISO_LEVEL_READ_UNCOMMITTED;
    public static int ISO_LEVEL_READ_COMMITTED;
    public static int ISO_LEVEL_SERIALIZABLE;
    public static byte FLD_TEXT_IN_ROW;
    public static byte FLD_TEXT_OFF_ROW;
    public static byte FLD_TEXT_LONG_ROW;
    public static ResourceManager res;
    public static CultureInfo ci;
    public static CultureInfo invariantCulture;
    public static int MSG_PREPARE_ANY;
    public static int MSG_PREPARE_QUERY;
    public static int MSG_PREPARE_UPDATE;
    public static int MSG_PREPARE_CALL;
    public static int MSG_PREPARE_SET_DB;
    public static int MAX_ERR_LEN;
    public static short MSG_HEAD_CMD_MSK;
    public static short MSG_ENCRYPT_NONE;
    public static short MSG_ENCRYPT_SIMPLE;
    public static int NET_COMM_ENCRYPT_NONE_TYPE;
    public static int NET_COMM_ENCRYPT_SIMPLE_TYPE;
    public static int NET_COMM_ENCRYPT_SSL_TYPE;
    public static int DH_KEY_LENGTH;
    public static int ENCRYPT_MODE_SSL;
    public static int ENCRYPT_MODE_SSL_AUTH_ONLY;
    public static int ENCRYPT_MODE_GMSSL;
    public static int ENCRYPT_MODE_WITHOUT_AUTH;
    public static string SCH_TABLE_COLUMN_NAME;
    public static string SCH_TABLE_COLUMN_ORDINALE;
    public static string SCH_TABLE_COLUMN_SIZE;
    public static string SCH_TABLE_COLUMN_NUMERIC_PREC;
    public static string SCH_TABLE_COLUMN_NUMERIC_SCALE;
    public static string SCH_TABLE_COLUMN_ISUNIQUE;
    public static string SCH_TABLE_COLUMN_ISKEYCOLUMN;
    public static string SCH_TABLE_COLUMN_BASESERVERNAME;
    public static string SCH_TABLE_COLUMN_BASECATALOGNAME;
    public static string SCH_TABLE_COLUMN_BASESCHEMANAME;
    public static string SCH_TABLE_COLUMN_BASETABLENAME;
    public static string SCH_TABLE_COLUMN_BASECOLUMNNAME;
    public static string SCH_TABLE_COLUMN_DATATYPE;
    public static string SCH_TABLE_COLUMN_ALLOWDBNULL;
    public static string SCH_TABLE_COLUMN_PROVIDERTYPE;
    public static string SCH_TABLE_COLUMN_ISALIASED;
    public static string SCH_TABLE_COLUMN_ISEXPRESSION;
    public static string SCH_TABLE_COLUMN_ISIDENTITY;
    public static string SCH_TABLE_COLUMN_ISAUTOINCREMENT;
    public static string SCH_TABLE_COLUMN_ISROWVERSION;
    public static string SCH_TABLE_COLUMN_ISHIDDEN;
    public static string SCH_TABLE_COLUMN_ISLONG;
    public static string SCH_TABLE_COLUMN_ISREADONLY;
    public static int MAX_LOB_LEN;
    public static byte MSG_PRE_RETURN_RSET;
    public static long LINT64_MAX;
    public static int LINT_MAX;
    public static int BulkBatchSize;
    public static int EC_SUCCESS;
    public static int EC_EMPTY;
    public static int EC_JUMP_STMT;
    public static int EC_RESULT_SET_EMPTY;
    public static int EC_SET_CURDB_SUCCESS;
    public static int EC_SET_TRAN_SUCCESS;
    public static int EC_INVALID_MSG;
    public static int EC_RN_EXCEED_ROWSET_SIZE;
    public static int EC_RN_STMT_TIMEOUT;
    public static short REC4_SQL_NULL;
    public static byte PARAM_TYPE_UNKNOWN;
    public static byte PARAM_TYPE_EXACT;
    public static byte PARAM_TYPE_RECOMMEND;
    public static int ITEM_FLAG_MASK_AUTO_INCREASEMENT;
    public static int ITEM_FLAG_MASK_BLOB_DATA;
    public static int ITEM_FLAG_MASK_READONLY;
    public static int ITEM_FLAG_MASK_RECOMMEND;
    public static int NBLOB_HDR_IN_ROW_FLAG;
    public static int NBLOB_HDR_BLOBID;
    public static int NBLOB_HDR_BLOB_LEN;
    public static int NBLOB_HDR_GROUPID;
    public static int NBLOB_HDR_OUTROW_FILEID;
    public static int NBLOB_HDR_OUTROW_PAGENO;
    public static int NBLOB_EX_HDR_TABLE_ID;
    public static int NBLOB_EX_HDR_COL_ID;
    public static int NBLOB_EX_HDR_ROW_ID;
    public static int NBLOB_HEAD_LONGROW_LEN;
    public static int NBLOB_EX_HDR_FPA_GRPID;
    public static int NBLOB_EX_HDR_FPA_FILEID;
    public static int NBLOB_EX_HDR_FPA_PAGENO;
    public static int NBLOB_EX_HDR_SIZE;
    public static int NBLOB_OUTROW_HDR_SIZE;
    public static int NBLOB_INROW_HDR_SIZE;
    public static byte BYTE_FLAG;
    public static byte CHAR_FLAG;
    public static int MSG_HEAD_FIX_LEN;
    public static int MSG_LIMIT_LEN;
    public static int MSG_REQ_HEAD_RESV_LEN;
    public static int MSG_REQ_HEAD_STMTID;
    public static int MSG_REQ_HEAD_CMD;
    public static int MSG_REQ_HEAD_LEN;
    public static int MSG_REQ_HEAD_RESERVED;
    public static int MSG_REQ_HEAD_CRC;
    public static int MSG_REQ_HEAD_SIZE;
    public static int MSG_RES_HEAD_RESV_LEN;
    public static int MSG_RES_HEAD_STMTID;
    public static int MSG_RES_HEAD_RET;
    public static int MSG_RES_HEAD_LEN;
    public static int MSG_RES_HEAD_SQLCODE;
    public static int MSG_RES_HEAD_SVR_MODE;
    public static int MSG_RES_HEAD_RESERVED;
    public static int MSG_RES_HEAD_COMPRESS;
    public static int MSG_RES_HEAD_CRC;
    public static int MSG_RES_HEAD_SIZE;
    public static int MSG_REQ_ALLOC_STMT_NEW_COL_DESC;
    public static int MSG_RES_ALLOC_STMT_NEW_COL_DESC;
    public static int MSG_REQ_STARTUP_ENCRYPT_TYPE;
    public static int MSG_REQ_STARTUP_CMPRS_MSG;
    public static int MSG_REQ_STARTUP_GEN_KEYPAIR_FLAG;
    public static int MSG_REQ_STARTUP_COMM_ENC_FLAG;
    public static int MSG_REQ_STARTUP_RS_BDTA_FLAG;
    public static int MSG_REQ_STARTUP_MSGCPR_FUN_ID;
    public static int MSG_REQ_STARTUP_FORCE_CERT_ENC;
    public static int MSG_REQ_STARTUP_MARK_NETWORK;
    public static int MSG_REQ_STARTUP_COMM_CRC_FLAG;
    public static int MSG_REQ_STARTUP_PROTOCOL_VERSION;
    public static int MSG_RES_STARTUP_ENCRYPT_TYPE;
    public static int MSG_RES_STARTUP_SERIAL;
    public static int MSG_RES_STARTUP_ENCODING;
    public static int MSG_RES_STARTUP_CMPRS_MSG;
    public static int MSG_RES_STARTUP_SC_FLAG;
    public static int MSG_RES_STARTUP_GEN_KEYPAIR_FLAG;
    public static int MSG_RES_STARTUP_COMM_ENC_FLAG;
    public static int MSG_RES_STARTUP_RS_BDTA_FLAG;
    public static int MSG_RES_STARTUP_MSGCPR_FUN_ID;
    public static int MSG_RES_STARTUP_MARK_NETWORK;
    public static int MSG_RES_STARTUP_COMM_CRC_FLAG;
    public static int MSG_RES_STARTUP_NAME_BIND;
    public static int MSG_RES_STARTUP_PROTOCOL_VERSION;
    public static int MSG_REQ_LOGIN_ENV;
    public static int MSG_REQ_LOGIN_ISO_LEVEL;
    public static int MSG_REQ_LOGIN_LANGUAGE;
    public static int MSG_REQ_LOGIN_READ_ONLY;
    public static int MSG_REQ_LOGIN_TIME_ZONE;
    public static int MSG_REQ_LOGIN_SESS_TIMEOUT;
    public static int MSG_REQ_LOGIN_MPP_TYPE;
    public static int MSG_REQ_LOGIN_REQ_STANDBY;
    public static int MSG_REQ_LOGIN_NEW_LOB_FLAG;
    public static int MSG_REQ_LOGIN_OSAUTH_TYPE;
    public static int MSG_REQ_LOGIN_LONG_LOB_FLAG;
    public static int MSG_REQ_LOGIN_HEART_BEAT;
    public static int MSG_RES_LOGIN_MAX_DATA_LEN;
    public static int MSG_RES_LOGIN_MAX_SESSION;
    public static int MSG_RES_LOGIN_DDL_AUTO_CMT;
    public static int MSG_RES_LOGIN_ISO_LEVEL;
    public static int MSG_RES_LOGIN_STR_CASE_SENSITIVE;
    public static int MSG_RES_LOGIN_BACK_SLASH;
    public static int MSG_RES_LOGIN_SVR_MODE;
    public static int MSG_RES_LOGIN_SVR_STAT;
    public static int MSG_RES_LOGIN_C2P;
    public static int MSG_RES_LOGIN_DbTimeZone;
    public static int MSG_RES_LOGIN_RESP_STANDBY;
    public static int MSG_RES_LOGIN_NEW_LOB_FLAG;
    public static int MSG_RES_LOGIN_FETCH_PACK_SZ;
    public static int MSG_RES_LOGIN_LIFETIME_REMAINDER;
    public static int MSG_RES_LOGIN_DSC_CONTROL;
    public static int MSG_RES_LOGIN_LONG_LOB_FLAG;
    public static int MSG_RES_LOGIN_STDBY_RSTAT;
    public static int MSG_RES_LOGIN_HEART_BEAT_TIMEOUT;
    public static int MSG_REQ_PREPARE_AUTO_CMT;
    public static int MSG_REQ_PREPARE_EXEC_DIRECT;
    public static int MSG_REQ_PREPARE_PARAM_SEQU;
    public static int MSG_REQ_PREPARE_CUR_FORWARD_ONLY;
    public static int MSG_REQ_PREPARE_CHECK_TYPE;
    public static int MSG_REQ_PREPARE_SQL_TYPE;
    public static int MSG_REQ_PREPARE_MAX_ROW_NUM;
    public static int MSG_REQ_PREPARE_RS_BDTA_FLAG;
    public static int MSG_REQ_PREPARE_RS_BDTA_LEN;
    public static int MSG_REQ_PREPARE_RET_ID_FLAG;
    public static int MSG_REQ_PREPARE_DCP_PROBE_MODE;
    public static int MSG_REQ_PREPARE_COLUMN_NEW_DESC;
    public static int MSG_REQ_PREPARE_EXEC_TIMEOUT;
    public static int MSG_RES_PREPARE_RET_TYPE;
    public static int MSG_RES_PREPARE_PARAM_NUM;
    public static int MSG_RES_PREPARE_COL_NUM;
    public static int MSG_RES_PREPARE_TRA_STATUS;
    public static int MSG_REQ_EXECUTE_AUTO_CMT;
    public static int MSG_REQ_EXECUTE_PARAM_NUM;
    public static int MSG_REQ_EXECUTE_CUR_FORWARD_ONLY;
    public static int MSG_REQ_EXECUTE_ROW_NUM;
    public static int MSG_REQ_EXECUTE_CUR_POS;
    public static int MSG_REQ_EXECUTE_MAX_ROWS;
    public static int MSG_REQ_EXECUTE_RET_ID_FLAG;
    public static int MSG_REQ_EXECUTE_IGNORE_BATCH_ERROR;
    public static int MSG_REQ_EXECUTE_DCP_PROBE_MODE;
    public static int MSG_REQ_EXECUTE_COLUMN_NEW_DESC;
    public static int MSG_REQ_EXECUTE_EXEC_TIMEOUT;
    public static int MSG_REQ_EXECUTE_BATCH_MAX_ERRORS;
    public static int MSG_REQ_EXECUTE_EXEC_INNER;
    public static int MSG_RES_EXECUTE_RET_TYPE;
    public static int MSG_RES_EXECUTE_COL_NUM;
    public static int MSG_RES_EXECUTE_ROW_NUM;
    public static int MSG_RES_EXECUTE_PARAM_NUM;
    public static int MSG_RES_EXECUTE_RS_UPDATABLE;
    public static int MSG_RES_EXECUTE_FETCHED_ROWS;
    public static int MSG_RES_EXECUTE_PRINT_OFFSET;
    public static int MSG_RES_EXECUTE_ROWID;
    public static int MSG_RES_EXECUTE_RS_BDTA_FLAG;
    public static int MSG_RES_EXECUTE_RS_ROWID_COLINDEX;
    public static int MSG_RES_EXECUTE_EXECID;
    public static int MSG_RES_RSCACHE_OFFSET;
    public static int MSG_RES_EXECUTE_RET_FLAG;
    public static int MSG_RES_EXECUTE_TRANS_STATUS;
    public static int MSG_REQ_PREEXEC_PARAM_NUM;
    public static int MSG_REQ_PUTDATA_PARA_INDEX;
    public static int MSG_REQ_GET_LOB_LONG_FLAG;
    public static int MSG_REQ_FETCH_CUR_POS;
    public static int MSG_REQ_FETCH_ROW_COUNT;
    public static int MSG_REQ_FETCH_RES_ID;
    public static int MSG_REQ_FETCH_MAX_MSG_SZ;
    public static int MSG_RES_FETCH_ROW_COUNT;
    public static int MSG_RES_FETCH_RET_COUNT;
    public static int MSG_REQ_MORERES_RES_ID;
    public static int MSG_REQ_BCPSET_IDENTITY;
    public static int MSG_REQ_BCPSET_CHK_CON;
    public static int MSG_REQ_BCPSET_GEN_LOG;
    public static int MSG_REQ_BCPSET_ISORDER;
    public static int MSG_REQ_BCPCLR_WITH_CMT;
    public static int MSG_REQ_SETSESSISO_ISO;
    public static int MSG_REQ_TableTs_ID_COUNT;
    public static int MSG_RES_TableTs_ID_COUNT;
    public static int FLDR_TYPE_BIND;
    public static int FLDR_ATTR_PORT;
    public static int FLDR_ATTR_BAD_FILE;
    public static int FLDR_ATTR_DATA_CHAR_SET;
    public static int FLDR_ATTR_ERRORS_PERMIT;
    public static int FLDR_ATTR_MPP_LOCAL_FLAG;
    public static int FLDR_UNINITILIAZE_COMMIT;
    public static int TRX4_NOT_START;
    public static int TRX4_COMMITTED;
    public static int TRX4_ROLLBACKED;
    public static int TRX4_STATE_MASK;
    public static int PG_INVALID_CODE;
    public static int PG_UTF8;
    public static int PG_GBK;
    public static int PG_BIG5;
    public static int PG_ISO_8859_9;
    public static int PG_EUC_JP;
    public static int PG_EUC_KR;
    public static int PG_KOI8R;
    public static int PG_ISO_8859_1;
    public static int PG_SQL_ASCII;
    public static int PG_GB18030;
    public static int PG_ISO_8859_11;
    private static DmConst();
}
internal static class Dm.DmConvertion : object {
    public static double GetDouble(Byte[] b);
    public static float GetSingle(Byte[] b);
    public static Byte[] ByteToByteArray(byte b);
    public static Byte[] DoubleToByteArray(double d);
    public static Byte[] FloatToByteArray(float f);
    public static Byte[] ShortToByteArray(int i);
    public static Byte[] IntToByteArray(long i);
    public static Byte[] LongToByteArray(long i);
    public static Byte[] DecimalToByteArray(decimal x);
    public static sbyte OneByteToSByte(Byte[] byte1);
    public static short TwoByteToShort(Byte[] byte1);
    public static int FourByteToInt(Byte[] byte1);
    public static long EightByteToLong(Byte[] byte1);
    public static byte GetByte(Byte[] buf, int off);
    public static void SetByte(Byte[] buf, int off, byte val);
    public static short GetShort(Byte[] buf, int off);
    public static ushort GetUB2(Byte[] buf, int off);
    public static void SetShort(Byte[] buf, int off, short val);
    public static int GetInt(Byte[] buf, int off);
    public static void SetInt(Byte[] buf, int off, int val);
    public static long GetLong(Byte[] buf, int off);
    public static void SetLong(Byte[] buf, int off, int val);
    public static Byte[] GetBytes(string str, string charsetName);
    public static Byte[] GetBytesWithNTS(string str, string charsetName);
    public static string GetString(Byte[] buffer, int offset, int byteLen, string charsetName);
    internal static Byte[] GetBytes(Byte[] buffer, int offset, int len);
    internal static void SetBytes(Byte[] buffer, int offset, Byte[] data, int dataOffset, int dataLen);
    internal static void SetBytes(Byte[] buffer, int offset, Byte[] data);
    public static Byte[] GetBytes(string str, int offset, int len, string charsetName, string destCharsetName);
    public static string BytesToHexString(Byte[] bs);
    public static string IntToHex(int num);
    public static int BitMoveToRight(long val, int size);
    public static void ArrayMemSet(Byte[] x, byte b);
    public static void ArrayMemSet(Byte[] x, byte b, int startindex, int endindex);
    public static int GetBit(Byte[] x, int start, int len);
    public static void SetBit(Byte[] x, int start, int len, int data);
}
public class Dm.DmDataAdapter : DbDataAdapter {
    internal long id;
    internal static long idGenerator;
    [CompilerGeneratedAttribute]
private BaseFilter <FilterHead>k__BackingField;
    [CompilerGeneratedAttribute]
private LogInfo <LogInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RWInfo <RWInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RecoverInfo <RecoverInfo>k__BackingField;
    private static string ClassName;
    private DmCommand m_SelectCommand;
    private DmCommand m_UpdateCommand;
    private DmCommand m_DeleteCommand;
    private DmCommand m_InsertCommand;
    private int m_UpdateBatchSize;
    private List`1<DmCommand> m_CommandBatch;
    [CompilerGeneratedAttribute]
private DmRowUpdatedEventHandler RowUpdated;
    [CompilerGeneratedAttribute]
private DmRowUpdatingEventHandler RowUpdating;
    public long ID { get; }
    public BaseFilter FilterHead { get; public set; }
    public LogInfo LogInfo { get; public set; }
    public RWInfo RWInfo { get; public set; }
    public RecoverInfo RecoverInfo { get; public set; }
    internal int do_UpdateBatchSize { get; internal set; }
    public int UpdateBatchSize { get; public set; }
    private ITableMappingCollection System.Data.IDataAdapter.TableMappings { get; }
    private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    public DmCommand DeleteCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    public DmCommand SelectCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    public DmCommand UpdateCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    public DmCommand InsertCommand { get; public set; }
    public DmDataAdapter(DmCommand selectCommand);
    public DmDataAdapter(string selectCommandText, DmConnection selectConnection);
    public DmDataAdapter(string selectCommandText, string selectConnectionString);
    private static DmDataAdapter();
    public sealed virtual long get_ID();
    [CompilerGeneratedAttribute]
public sealed virtual BaseFilter get_FilterHead();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterHead(BaseFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual LogInfo get_LogInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LogInfo(LogInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RWInfo get_RWInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RWInfo(RWInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RecoverInfo get_RecoverInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RecoverInfo(RecoverInfo value);
    [CompilerGeneratedAttribute]
public void add_RowUpdated(DmRowUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowUpdated(DmRowUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_RowUpdating(DmRowUpdatingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowUpdating(DmRowUpdatingEventHandler value);
    internal int get_do_UpdateBatchSize();
    internal void set_do_UpdateBatchSize(int value);
    internal int do_AddToBatch(DmCommand command);
    internal void do_ClearBatch();
    internal RowUpdatedEventArgs do_CreateRowUpdatedEvent(DataRow dataRow, DmCommand command, StatementType statementType, DataTableMapping tableMapping);
    internal RowUpdatingEventArgs do_CreateRowUpdatingEvent(DataRow dataRow, DmCommand command, StatementType statementType, DataTableMapping tableMapping);
    internal int do_ExecuteBatch();
    internal int do_Fill(DataTable[] dataTables, int startRecord, int maxRecords, DmCommand command, CommandBehavior behavior);
    internal int do_Fill(DataTable dataTable, DmCommand command, CommandBehavior behavior);
    internal int do_Fill(DataSet dataSet, int startRecord, int maxRecords, string srcTable, DmCommand command, CommandBehavior behavior);
    internal int do_Fill(DataTable dataTable, IDataReader dataReader);
    internal DataTable do_FillSchema(DataTable dataTable, SchemaType schemaType, DmCommand command, CommandBehavior behavior);
    internal DataTable[] do_FillSchema(DataSet dataSet, SchemaType schemaType, DmCommand command, string srcTable, CommandBehavior behavior);
    internal IDataParameter do_GetBatchedParameter(int commandIdentifier, int parameterIndex);
    internal bool do_GetBatchedRecordsAffected(int commandIdentifier, Int32& recordsAffected, Exception& error);
    internal void do_InitializeBatching();
    internal void do_OnRowUpdated(RowUpdatedEventArgs value);
    internal void do_OnRowUpdating(RowUpdatingEventArgs value);
    internal void do_TerminateBatching();
    internal int do_Update(DataRow[] dataRows, DataTableMapping tableMapping);
    public virtual int get_UpdateBatchSize();
    public virtual void set_UpdateBatchSize(int value);
    protected virtual int AddToBatch(IDbCommand command);
    protected virtual void ClearBatch();
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual int ExecuteBatch();
    protected virtual int Fill(DataTable[] dataTables, int startRecord, int maxRecords, IDbCommand command, CommandBehavior behavior);
    protected virtual int Fill(DataTable dataTable, IDbCommand command, CommandBehavior behavior);
    protected virtual int Fill(DataSet dataSet, int startRecord, int maxRecords, string srcTable, IDbCommand command, CommandBehavior behavior);
    protected virtual DataTable FillSchema(DataTable dataTable, SchemaType schemaType, IDbCommand command, CommandBehavior behavior);
    protected virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, IDbCommand command, string srcTable, CommandBehavior behavior);
    protected virtual IDataParameter GetBatchedParameter(int commandIdentifier, int parameterIndex);
    protected virtual bool GetBatchedRecordsAffected(int commandIdentifier, Int32& recordsAffected, Exception& error);
    protected virtual void InitializeBatching();
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    protected virtual void TerminateBatching();
    protected virtual int Update(DataRow[] dataRows, DataTableMapping tableMapping);
    private sealed virtual override ITableMappingCollection System.Data.IDataAdapter.get_TableMappings();
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    public DmCommand get_DeleteCommand();
    public void set_DeleteCommand(DmCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    public DmCommand get_SelectCommand();
    public void set_SelectCommand(DmCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
    public DmCommand get_UpdateCommand();
    public void set_UpdateCommand(DmCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    public DmCommand get_InsertCommand();
    public void set_InsertCommand(DmCommand value);
}
[DefaultMemberAttribute("Item")]
public class Dm.DmDataReader : DbDataReader {
    internal long id;
    internal static long idGenerator;
    [CompilerGeneratedAttribute]
private BaseFilter <FilterHead>k__BackingField;
    [CompilerGeneratedAttribute]
private LogInfo <LogInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RWInfo <RWInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RecoverInfo <RecoverInfo>k__BackingField;
    private static string ClassName;
    private DmConnInstance m_Conn;
    private DmResultSetCache m_RsCache;
    internal A m_Statement;
    private DmInfo m_DbInfo;
    private DmColumn[] m_ColInfo;
    private DmGetValue m_GetVal;
    internal long m_RowCount;
    private CommandBehavior m_Behavior;
    private int m_is_single_row;
    internal long m_StartRow;
    protected long m_CurrentRow;
    private long m_RecordsAffected;
    protected bool m_IsClosed;
    private bool is_SequentialAccess;
    private int m_SequentialSeq;
    private long m_StreamPos;
    private bool skipCol;
    private ArrayList m_Clobs;
    public long ID { get; }
    public BaseFilter FilterHead { get; public set; }
    public LogInfo LogInfo { get; public set; }
    public RWInfo RWInfo { get; public set; }
    public RecoverInfo RecoverInfo { get; public set; }
    internal long RowCount { get; }
    internal int do_Depth { get; }
    internal bool do_HasRows { get; }
    internal int do_VisibleFieldCount { get; }
    internal int do_RecordsAffected { get; }
    internal bool do_IsClosed { get; }
    internal int do_FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public int Depth { get; }
    public bool HasRows { get; }
    public int VisibleFieldCount { get; }
    public int RecordsAffected { get; }
    public bool IsClosed { get; }
    public int FieldCount { get; }
    internal DmDataReader(DmResultSetCache cache, DmInfo info, CommandBehavior behavior);
    internal DmDataReader(DmInfo info, CommandBehavior behavior, A stmt);
    private static DmDataReader();
    public sealed virtual long get_ID();
    [CompilerGeneratedAttribute]
public sealed virtual BaseFilter get_FilterHead();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterHead(BaseFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual LogInfo get_LogInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LogInfo(LogInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RWInfo get_RWInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RWInfo(RWInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RecoverInfo get_RecoverInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RecoverInfo(RecoverInfo value);
    internal long get_RowCount();
    internal object do_this(int number);
    internal object do_this(string name);
    internal int get_do_Depth();
    internal bool get_do_HasRows();
    internal int get_do_VisibleFieldCount();
    internal int get_do_RecordsAffected();
    internal bool get_do_IsClosed();
    internal int get_do_FieldCount();
    internal void do_Close();
    internal bool do_GetBoolean(int i);
    internal byte do_GetByte(int i);
    internal long do_GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    internal char do_GetChar(int i);
    internal long do_GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    internal string do_GetDataTypeName(int i);
    internal DateTime do_GetDateTime(int i);
    internal decimal do_GetDecimal(int i);
    internal double do_GetDouble(int i);
    internal IEnumerator do_GetEnumerator();
    internal Type do_GetFieldType(int i);
    internal float do_GetFloat(int i);
    internal Guid do_GetGuid(int i);
    internal short do_GetInt16(int i);
    internal int do_GetInt32(int i);
    internal long do_GetInt64(int i);
    internal string do_GetName(int i);
    internal int do_GetOrdinal(string name);
    internal Type do_GetProviderSpecificFieldType(int ordinal);
    internal object do_GetProviderSpecificValue(int ordinal);
    internal int do_GetProviderSpecificValues(Object[] values);
    internal DataTable do_GetSchemaTable();
    internal DataTable do_GetDataTable();
    internal string do_GetString(int i);
    internal object do_GetValue(int i);
    internal int do_GetValues(Object[] values);
    internal bool do_IsDBNull(int i);
    internal bool do_NextResult();
    internal bool do_Read();
    internal void do_Dispose(bool disposing);
    internal DmDataReader do_GetDbDataReader(int ordinal);
    public virtual object get_Item(int number);
    public virtual object get_Item(string name);
    public virtual int get_Depth();
    public virtual bool get_HasRows();
    public virtual int get_VisibleFieldCount();
    public virtual int get_RecordsAffected();
    public virtual bool get_IsClosed();
    public virtual int get_FieldCount();
    public virtual void Close();
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public virtual string GetDataTypeName(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int i);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string name);
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual object GetProviderSpecificValue(int ordinal);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual DataTable GetSchemaTable();
    public virtual string GetString(int i);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int i);
    public virtual bool NextResult();
    public virtual bool Read();
    protected virtual void Dispose(bool disposing);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public void Dispose();
    private void BuildSchemaColumns(DataTable schTbl);
    private void FillSchemaColumn(DataRow row, DmColumn dmCol, int i);
    private void FillSchemaTable(DataTable schTbl);
    public DmDataReader GetKeyCols(string schema, string table);
    public DmDataReader GetUniqueCols(string schema, string table);
    public bool Previous();
    public bool First();
    public bool Last();
    public bool Absolute(long pos);
    public bool Relative(long pos);
    public DbDataReader GetData(int i);
    public DateTimeOffset GetDateTimeOffset(int i);
    public DmXDec GetDmDecimal(int i);
    internal Type GetFieldTypeInner(int i);
    public DmBlob GetBlob(short i);
    public DmClob GetClob(short i);
    private void GetByteArrayValue(int columnIndex, Byte[]& value);
    private Byte[] GetByteArrayValue(int columnIndex);
    private void CheckIndex(int i);
    private void CheckClose();
    private void ClearClobs();
}
public class Dm.DmDataTypeMetaData : object {
    public string GetClassName(int i);
    public string GetTypeName(int i, Type j, int scale);
    public bool Signed(int i);
}
public class Dm.DmDateTime : object {
    private static Int32[] global_day_by_month;
    private static Int32[] global_days_befor_month;
    private static int DMDT_YEAR_POS;
    private static int DMDT_YEAR_LEN;
    private static int DMDT_MONTH_POS;
    private static int DMDT_MONTH_LEN;
    private static int DMDT_DAY_POS;
    private static int DMDT_DAY_LEN;
    private static int DMDT_DATE_SIZE;
    private static int DMDT_HOUR_POS;
    private static int DMDT_HOUR_LEN;
    private static int DMDT_MIN_POS;
    private static int DMDT_MIN_LEN;
    private static int DMDT_SEC_POS;
    private static int DMDT_SEC_LEN;
    private static int DMDT_MSEC_POS;
    private static int DMDT_MSEC_LEN;
    private static int DMDT_TZ_POS;
    private static int DMDT_TZ_LEN;
    private static int LOCAL_TIME_ZONE_MASK;
    private Byte[] dateTime;
    public static int DMDT_DATE;
    public static int DMDT_TIME;
    public static int DMDT_TIMESTAMP;
    public static int DMDT_TIMESTAMP_TZ;
    public static int DMDT_TIME_TZ;
    private int prec;
    public DmDateTime(Byte[] dt, int prec);
    public DmDateTime(string str, int prec, int flag);
    public DmDateTime(DateTime dt, int prec, int scale, int flag, short mTimeZone);
    private static DmDateTime();
    public static int LTZ_GET_REAL_PREC(int prec);
    public static bool NTYPE_IS_LOCAL_TIME_ZONE(int sql_pl_type, int prec);
    public static void DmTimeGetDateByNdaysFromZero(int ndays, Int32& ret_year, Int32& ret_month, Int32& ret_day);
    public static int DmtimeCalcNDaysFromZero(int year, int month, int day);
    public static void DmTimeDdateAdd(Int32& year, Int32& month, Int32& day, int n);
    public static DateTime DmtimeAddByFmt(int prec, DmDateTime dt_new, int fmt, int n);
    public static bool DmTimeIsLeapYear(int year);
    public static bool DmTimeDataValidate(int year, int month, int day);
    public static bool DmTimeTzValidate(short tz);
    public static bool DmTimeTimeValidate(int hour, int min, int sec, int msec);
    public static DateTime DmTimeEncodeTz(int prec, int year, int month, int day, int hour, int min, int sec, int msec, short tz);
    internal static int GetMicroSecond(DateTime dt);
    internal static int GetNanoSecond(DateTime dt);
    public Byte[] GetByteArrayValue();
    public void GetByteArrayValue(Byte[]& ret);
    private short GetYear();
    private byte GetMonth();
    private byte GetDay();
    private byte GetHour(int offset);
    private byte GetMinute(int offset);
    private byte GetSecond(int offset);
    private short GetTZ(int offset);
    private int GetNano(int offset);
    public DateTime GetDate();
    public DateTime GetTime();
    public DateTimeOffset GetTimeTZ();
    public string GetDateInString();
    public string GetDateInString(string oraclefmt, int datelang, string formatNumericChars);
    public string GetDateTimeInString(string oraclefmt, int datelang, string formatNumericChars);
    public string GetDateTimeTzInString();
    public string GetDateTimeTzInString(string oraclefmt, int datelang, string formatNumericChars);
    public string GetTimeInString();
    public string GetTimeInString(string oraclefmt, int datelang, string formatNumericChars);
    public string GetTimeTZInString();
    public string GetTimeTZInString(string oraclefmt, int datelang, string formatNumericChars);
    public string GetTimeOfTimestamp();
    public DateTime GetTimestamp();
    public DateTimeOffset GetTimestampTZ();
    public static DateTime GetDateByString(string s);
    public static bool DmdtIsLeapYear(int year);
    public static bool CheckDate(int year, int month, int day);
    public static DateTime GetTimestampByString(string s);
    public static string GetTimeFromTimestamp(DateTime ts);
    private int GetBit(Byte[] x, int start, int len);
    public static Byte[] DmDateDecodeFast(Byte[] val);
    public static Byte[] DmTimeDecodeFast(Byte[] val);
    public static Byte[] DmDtDecodeFast(Byte[] value);
    public static Byte[] DmTimeFromRec4(Byte[] dateTime, int CType);
    public static Byte[] DmdtEncodeFast(Byte[] dateTime);
    public static Byte[] DmdtEncodeFast(Int32[] dt);
    public static void DmdtEncodeFast(Byte[]& ret, Byte[]& dateTime);
    public static void DmdtEncodeFast2(Byte[]& ret, DateTime x);
    public static Byte[] DmdttzEncodeFast(Byte[] dateTime);
    public static Byte[] DmdttzEncodeFast(Int32[] dt);
    public static Byte[] DateEncodeFast(Byte[] dateTime);
    public static Byte[] DateEncodeFast(Int32[] dt);
}
public enum Dm.DmDbType : Enum {
    public int value__;
    public static DmDbType Blob;
    public static DmDbType Binary;
    public static DmDbType Bit;
    public static DmDbType Byte;
    public static DmDbType Char;
    public static DmDbType Clob;
    public static DmDbType Date;
    public static DmDbType DateTime;
    public static DmDbType Decimal;
    public static DmDbType XDEC;
    public static DmDbType Double;
    public static DmDbType Float;
    public static DmDbType Int16;
    public static DmDbType Int32;
    public static DmDbType Int64;
    public static DmDbType IntervalDayToSecond;
    public static DmDbType IntervalYearToMonth;
    public static DmDbType SByte;
    public static DmDbType Text;
    public static DmDbType Time;
    public static DmDbType UInt16;
    public static DmDbType UInt32;
    public static DmDbType UInt64;
    public static DmDbType VarBinary;
    public static DmDbType VarChar;
    public static DmDbType Cursor;
    public static DmDbType RefCursor;
    public static DmDbType DateTimeOffset;
    public static DmDbType TimeOffset;
    public static DmDbType ARRAY;
    public static DmDbType Class;
}
public interface Dm.DmDocBase {
    public abstract virtual void ToHtml();
}
public class Dm.DmError : object {
    private string m_Schema;
    private string m_Table;
    private string m_Col;
    private string m_ErrInfo;
    private int m_SqlCode;
    public string Schema { get; public set; }
    public string Table { get; public set; }
    public string Col { get; public set; }
    public string Message { get; public set; }
    public int State { get; public set; }
    internal DmError(int sqlcode);
    internal DmError(int sqlcode, string errInfo);
    public string get_Schema();
    public void set_Schema(string value);
    public string get_Table();
    public void set_Table(string value);
    public string get_Col();
    public void set_Col(string value);
    public string get_Message();
    public void set_Message(string value);
    public int get_State();
    public void set_State(int value);
    public virtual string ToString();
    public string ToStringOnlyInfo();
    private string GetSQLStateByErrorCode(int sqlcode);
    private string GetErrorInfoByErrorCode(int sqlcode);
    internal static void ThrowDmException(DmError err);
    internal static void ThrowDmException(string errInfo, int code);
    internal static void ThrowDmException(string errInfo);
    internal static void ThrowDmException(Exception ex);
    internal static void ThrowDmException(Exception ex, string extraInfo);
    internal static void ThrowDmException(int code);
    internal static void ThrowDmException(int code, string extraInfo);
    internal static void ThrowUnsupportedException();
}
[DefaultMemberAttribute("Item")]
public class Dm.DmErrorCollection : object {
    private ArrayList errors;
    public int Count { get; }
    public DmError Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal void Add(DmError error);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(DmError[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int get_Count();
    public DmError get_Item(int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
public class Dm.DmErrorDefinition : object {
    public static int EC_EMPTY;
    public static int EC_STR_TRUNC_WARN;
    public static int EC_NULL_IN_SFUN;
    public static int EC_INVALID_TABLE_NAME_WARN;
    public static int EC_EMPTY_DEL;
    public static int EC_EMPTY_INS;
    public static int EC_EMPTY_UPD;
    public static int EC_JUMP_STMT;
    public static int EC_REVOKE_NONE_WARN;
    public static int EC_EMPTY_CHAR_CAST;
    public static int EC_BUILD_NOT_COMPLETE;
    public static int EC_RESULT_SET_EMPTY;
    public static int EC_UTF8_CODE_NOT_INTEGRATED;
    public static int EC_RS_CACHE_FULL;
    public static int EC_PREC_TRUNC_WARN;
    public static int EC_SET_CURDB_SUCCESS;
    public static int EC_SET_TRAN_SUCCESS;
    public static int EC_EXPLAIN;
    public static int EC_RN_FIND_SEARCH_EMPTY;
    public static int EC_SUCCESS;
    public static int EC_FAIL;
    public static int EC_USER_DEFINE_EXCEPT;
    public static int EC_CREATE_MUTEX;
    public static int EC_SERVER_ALREADY_RUN;
    public static int EC_INVALID_USAGE;
    public static int EC_INI_FILE_ERROR;
    public static int EC_CTL_FILE_ERROR;
    public static int EC_MEM_POOL_INIT;
    public static int EC_BUF_POOL_INIT;
    public static int EC_FAIL_OPEN_RLOG;
    public static int EC_DB_VERSION_MISMATCH;
    public static int EC_DB_CODE_MISMATCH;
    public static int EC_LIC_FILE_ERROR;
    public static int EC_LIC_EXPIRED;
    public static int EC_DB_INIT_FAIL;
    public static int EC_OUT_OF_SPACE;
    public static int EC_OUT_OF_USEG_SPACE;
    public static int EC_OUT_OF_TEMP_SPACE;
    public static int EC_OUT_OF_MEMORY;
    public static int EC_OUT_OF_TABLE_SPACE;
    public static int EC_COMMENT_IN_PREPARE;
    public static int EC_NOT_PREPARED;
    public static int EC_STMT_TYPE_MISMATCH;
    public static int EC_NOT_SUPPORTED;
    public static int EC_PARSE_ERROR_EXPLAIN;
    public static int EC_PARSE_ERROR_ORG;
    public static int EC_PARSE_ERROR;
    public static int EC_PARSE_ERROR_TRACE;
    public static int EC_NOT_SUPPORTED_CASCADE;
    public static int EC_PRIMARY_NOT_SUPPORTED;
    public static int EC_CHAR_CODE_NOT_SUPPORTED;
    public static int EC_MPP_NOT_SUPPORTED;
    public static int EC_WITH_COUNT_NOT_SUPPORTED;
    public static int EC_STANDBY_NOT_SUPPORTED_HUGE;
    public static int EC_STANDBY_NOT_SUPPORTED;
    public static int EC_NOT_SUPPORTED_FOR_RLOG_APPEND;
    public static int EC_RAC_NOT_SUPPORTED_HUGE;
    public static int EC_STANDBY_IDU_NOT_SUPPORTED;
    public static int EC_RAC_NOT_SUPPORTED_SPACE_LIMIT;
    public static int EC_RAC_NOT_SUPPORTED;
    public static int EC_RAC_SLAVE_EP_NOT_SUPPORTED;
    public static int EC_INVALID_DB_NAME;
    public static int EC_SAME_DB_NAME;
    public static int EC_INVALID_LOGIN_NAME;
    public static int EC_INVALID_USER_NAME;
    public static int EC_INVALID_OS_USER;
    public static int EC_INVALID_ROLE_NAME;
    public static int EC_INVALID_SCHEMA_NAME;
    public static int EC_INVALID_TABLE_NAME;
    public static int EC_INVALID_VIEW_NAME;
    public static int EC_INVALID_TV_NAME;
    public static int EC_INVALID_TEMPORARY_TABLE_NAME;
    public static int EC_INVALID_INDEX_NAME;
    public static int EC_INVALID_CONS_NAME;
    public static int EC_INVALID_TRIG_NAME;
    public static int EC_PSE_REC_NAME_OUT_OF_LENGTH;
    public static int EC_INVALID_COL_NAME;
    public static int EC_AMBIGUOUS_COL_NAME;
    public static int EC_INVALID_ALIAS_NAME;
    public static int EC_NO_COL_NAME_FOR_TEMP_TABLE;
    public static int EC_DUP_COL_NAME;
    public static int EC_COLUMN_NOT_EXIST;
    public static int EC_COLUMN_ALREADY_EXIST;
    public static int EC_INVALID_SEQUENCE_NAME;
    public static int EC_INVALID_PROC_NAME;
    public static int EC_INVALID_FUNC_NAME;
    public static int EC_INVALID_VAR_NAME;
    public static int EC_INVALID_EXCEPT_NAME;
    public static int EC_DUP_EXCEPT_HANDLER;
    public static int EC_INVALID_SAVEPOINT_NAME;
    public static int EC_INVALID_LABEL;
    public static int EC_INVALID_CURSOR_NAME;
    public static int EC_OBJ_ALREADY_EXISTS;
    public static int EC_EXPLICT_DMBLOB_TV_NAME;
    public static int EC_TOO_MANY_QUALIFIES;
    public static int EC_INVALID_DB_OBJECT;
    public static int EC_INVALID_SERVER_NAME;
    public static int EC_INVALID_PORT;
    public static int EC_INVALID_COL_NAME_WITH_TV;
    public static int EC_INVALID_DBLINK_NAME;
    public static int EC_INVALID_CONNECT_STR;
    public static int EC_INVALID_PUBLIC_FLAG;
    public static int EC_LINK_OBJ_CHANGED;
    public static int EC_SAME_MASTER_SLAVE_SERVER;
    public static int EC_INVALID_DUP_TYPE;
    public static int EC_INVALID_POLICY_NAME;
    public static int EC_INVALID_LEVEL_ID;
    public static int EC_INVALID_LEVEL_NAME;
    public static int EC_INVALID_CATEGORY_NAME;
    public static int EC_TRY_TO_MODIFY_LABEL_COL;
    public static int EC_TRY_TO_DROP_LABEL_COL;
    public static int EC_POLICY_HAS_NO_LEVEL;
    public static int EC_LABEL_MISMATCH;
    public static int EC_CAN_NOT_APPLY_POLICY;
    public static int EC_ALTER_USER_ACTIONS;
    public static int EC_ACROSS_DB_ACTION;
    public static int EC_INVALID_SYSROLE_NAME;
    public static int EC_INVALID_RES_LIMIT_VALUE;
    public static int EC_INVALID_PASSWD_REUSE_COND;
    public static int EC_PASSWORD_EXPIRED_BUT_IN_GRACE_TIME;
    public static int EC_HAS_NOT_ALTER_ITEM;
    public static int EC_INVALID_RULE_NAME;
    public static int EC_INVALID_IP;
    public static int EC_INVALID_FREQUENCY;
    public static int EC_PASSWORD_CHECK_LOGIN_NAME;
    public static int EC_INVALID_PASSWORD_POLICY;
    public static int EC_POLICY_MISMATCH;
    public static int EC_INVALID_LIMIT_SPACE;
    public static int EC_INVALID_ENCRYPT_ALGORITHM;
    public static int EC_ENCRYPT_FUN_FORBID;
    public static int EC_DECRYPT_FUN_FORBID;
    public static int EC_TOO_MANY_CONTEXT_INDEX;
    public static int EC_READONLY_TRANS;
    public static int EC_SUSPEND_TRANS;
    public static int EC_TRY_TO_DROP_CURRENT_DB;
    public static int EC_TRY_TO_DROP_SYSTEM_DB;
    public static int EC_INVALID_DATAFILE_SIZE;
    public static int EC_DISABLE_SYS_DB;
    public static int EC_DB_OFFLINE;
    public static int EC_INVALID_DB_TYPE;
    public static int EC_SET_CURRENT_DB_ON_TMP;
    public static int EC_INVALID_PATHNAME;
    public static int EC_INVALID_DATA_FILE_NAME;
    public static int EC_INVALID_LOGFILE_NUM;
    public static int EC_INVALID_LOGFILE_TRUNCSIZE;
    public static int EC_INVALID_FILEGROUP_NAME;
    public static int EC_DB_ONLINE;
    public static int EC_FILE_GROUP_MISMATCH;
    public static int EC_UNAUTHORIZED_USER;
    public static int EC_INVALID_PASSWORD;
    public static int EC_PASSWORD_CHECK_COMBIN;
    public static int EC_ASSIGN_LOGIN_TO_TMP_DB;
    public static int EC_CREATE_USER_ON_TMP_DB;
    public static int EC_CREATE_AUDIT_USER_IN_OTHER_DB;
    public static int EC_ALTER_AUDTI_LOGIN;
    public static int EC_ALTER_NORMAL_LOGIN;
    public static int EC_ALTER_AUDTI_USER;
    public static int EC_ALTER_NORMAL_USER;
    public static int EC_USER_LOCKED;
    public static int EC_PASSWORD_EXPIRED;
    public static int EC_PASSWORD_CHECK_LEN;
    public static int EC_INVALID_DEFAULT_DB;
    public static int EC_CREATE_OTHER_DB_OBJ_IN_CRT_SCHEMA;
    public static int EC_TEMPORARY_TABLE_IN_SCHEMA;
    public static int EC_USER_HAS_RELATED_LOGIN;
    public static int EC_ALTER_TEMPORARY_TABLE;
    public static int EC_ALTER_SYS_TABLE;
    public static int EC_ALTER_TABLE_ACTIONS;
    public static int EC_ALTER_PART_TABLE;
    public static int EC_ALTER_BLOB_TABLE;
    public static int EC_DROP_SYS_TABLE;
    public static int EC_DROP_SYS_VIEW;
    public static int EC_DROP_OBJ_WITH_DEPENDS;
    public static int EC_DROP_PART_TABLE;
    public static int EC_USE_TEMP_TABLE_IN_OTHER_DB;
    public static int EC_USE_TEMP_TABLE_BY_OTHER_SCH;
    public static int EC_CREATE_DUP_ON_PART_TABLE;
    public static int EC_FAIL_CRT_TABLE_WITH_QRY;
    public static int EC_TABLE_BUSY;
    public static int EC_VIEW_ON_TEMPORARY_TABLE;
    public static int EC_VIEW_DEPEND_BEYOND_DB;
    public static int EC_VIEW_VALID;
    public static int EC_TRY_TO_INSERT_VIEW;
    public static int EC_TRY_TO_DELETE_VIEW;
    public static int EC_TRY_TO_UPDATE_VIEW;
    public static int EC_NOT_UPDATE_VIEW;
    public static int EC_TOO_MANY_COLS_IN_TABLE;
    public static int EC_TOO_MANY_IDENTITY;
    public static int EC_DROP_ONLY_COL;
    public static int EC_TOO_MANY_COLS;
    public static int EC_INVALID_COLUMN_LEVEL_CHECK;
    public static int EC_TRY_TO_DROP_MANY_COLS;
    public static int EC_FAIL_TO_BUILD_COL_WITH_BLOB;
    public static int EC_INVALID_RENAME;
    public static int EC_TRY_TO_DROP_DEPENDED_COLUMN;
    public static int EC_INVALID_COLNUM;
    public static int EC_INVALID_COLUMN_TYPE;
    public static int EC_TRY_TO_MODIFY_IDENT_COL;
    public static int EC_REC_OUT_OF_MAX_SIZE;
    public static int EC_COLUMNS_DEFINED_LEN_OVER_LENGTH;
    public static int EC_INVALID_PK_SPEC;
    public static int EC_INVALID_TAB_CONSTRAINT;
    public static int EC_INVALID_KEY_COL_NAME;
    public static int EC_ERR_IN_DEFAULT_CON;
    public static int EC_INVALID_DEFAULT_VALUE_ARG;
    public static int EC_REFERENCED_CONSTRAINT;
    public static int EC_CHK_CONS_IN_TEMP_TABLE;
    public static int EC_CHK_CONS_IN_PART_TABLE;
    public static int EC_REF_CONS_IN_PART_TABLE;
    public static int EC_REF_CONS_IN_TEMP_TABLE;
    public static int EC_REF_BEYOND_DB;
    public static int EC_ALTER_AUTO_CONS_FOR_PART_TABLE;
    public static int EC_TRIG_ON_TEMPORARY_TABLE;
    public static int EC_WHEN_COND_IN_TRIG_OF_STMT;
    public static int EC_OLD_ROW_REF_ASSGIN_VALUE;
    public static int EC_CHG_NEW_ROW_REF_IN_WRONG_TRG;
    public static int EC_INVALID_TRIGGER_ACTION;
    public static int EC_INVALID_REF_NAME_IN_TRIG;
    public static int EC_INVALID_PSEUDO_REC_IN_TRIG;
    public static int EC_REPLACE_TRIG_ERR;
    public static int EC_TRY_UPDATE_MUTATING_TABLE;
    public static int EC_CREATE_TRIG_ON_PART_TABLE;
    public static int EC_COMMIT_IN_TRIGGER_BODY;
    public static int EC_ROLLBACK_IN_TRIGGER_BODY;
    public static int EC_TOO_MANY_KEYS_IN_INDEX;
    public static int EC_INVALID_INDEX_COLUMN;
    public static int EC_NO_CONTEXT_INDEX;
    public static int EC_NO_CONTEXT_INDEX_ALTERED;
    public static int EC_INEFFICACY_INDEX_DEFINE;
    public static int EC_CREATE_INDEX_ON_BLOB_COL;
    public static int EC_TRY_TO_DROP_REFED_INDEX;
    public static int EC_INVALID_STORAGE_PARAM;
    public static int EC_INDEX_DEFINE_SIZE_EXCEED;
    public static int EC_TRY_TO_DROP_CLUSTER_INDEX;
    public static int EC_TRY_TO_DROP_REF_INDEX;
    public static int EC_TABLE_HAS_CLUTER_INDEX;
    public static int EC_CREATE_CLUSTER_INDEX_ON_TMP;
    public static int EC_CREATE_INDEX_ON_PART_TABLE;
    public static int EC_COLS_IN_DIFF_PART_TABLE;
    public static int EC_CREATE_INDEX_ON_BLOB_TABLE;
    public static int EC_DROP_INDEX_ON_BLOB_TABLE;
    public static int EC_TRY_TO_ALTER_SYS_PROC;
    public static int EC_ASSIGN_VALUE_TO_IN_ARG;
    public static int EC_DROP_SYS_FUNC;
    public static int EC_INVALID_FUNC_PARA;
    public static int EC_TOO_MANY_ARGS_IN_PF;
    public static int EC_INVALID_FUNCTION;
    public static int EC_INVALID_PARAM_DEFINE;
    public static int EC_TOO_MANY_ROWS_IN_FUNCTION;
    public static int EC_RETURN_VALUE_IN_PROC;
    public static int EC_RETURN_NO_VALUE;
    public static int EC_INVALID_EXCEPT_CODE;
    public static int EC_INVALID_OTHERS_EXCPT_HNDLR;
    public static int EC_DDL_IN_PLBLOCK;
    public static int EC_UNSUPPORTED_SQL_IN_PLBLOCK;
    public static int EC_DEFAULT_TOO_MANY_VARS;
    public static int EC_INVALID_EXTERN_FUNC_PATH;
    public static int EC_INVALID_EXTERN_FUNC_NAME;
    public static int EC_INVALID_SEQUENCE_PROPERTY;
    public static int EC_CRT_LINK_FAIL;
    public static int EC_LINK_LOGIN_FAIL;
    public static int EC_LINK_ALLOC_ENV_FAIL;
    public static int EC_LINK_ALLOC_CON_FAIL;
    public static int EC_LINK_ALLOC_STMT_FAIL;
    public static int EC_LINK_EXEC_SQL_ERROR;
    public static int EC_LINK_TRY_TO_UPDATE_VIEW;
    public static int EC_INVALID_RETURN_STMT;
    public static int EC_INVALID_EXPRESSION;
    public static int EC_INVALID_CONST_EXP;
    public static int EC_MUST_BE_QUERY_EXP;
    public static int EC_SUBQERY_EXISTS;
    public static int EC_INVALID_OP;
    public static int EC_COL_REF_NOT_EXISTS;
    public static int EC_INVALID_OP_IN_CURSOR;
    public static int EC_DELETE_READONLY_CURSOR;
    public static int EC_MAKE_RD_CURSOR_UPD;
    public static int EC_UPDATE_READONLY_CURSOR;
    public static int EC_INVALID_OPEN_CUR_VAR;
    public static int EC_TOO_MANY_COLS_IN_GROUP;
    public static int EC_TOO_MANY_COLS_IN_ORDER;
    public static int EC_TOO_MANY_COLS_IN_SELECT;
    public static int EC_TOO_MANY_TABLES_IN_SELECT;
    public static int EC_INVALID_ORDERBY;
    public static int EC_INVALID_SUB_EXPR;
    public static int EC_INVALID_SEL_ITEM;
    public static int EC_SET_FUN_EXISTS;
    public static int EC_TOO_MANY_SELECT_ITEMS;
    public static int EC_INVALID_SUBQUERY;
    public static int EC_TOO_MANY_TABLES;
    public static int EC_WITH_TIES_NO_ORDER_BY;
    public static int EC_INTO_WITH_ORDER_BY;
    public static int EC_LISTS_NOT_MATCH;
    public static int EC_INSERT_TABLE_WITH_UNION;
    public static int EC_NUM_MISMATCH;
    public static int EC_OBJECT_BUSY;
    public static int EC_SET_IDENTINS_NOT_EXIST;
    public static int EC_SELECT_WITH_INTO;
    public static int EC_INVALID_GROUP_BY_NO_COL;
    public static int EC_UPDATE_FROM_USELESS;
    public static int EC_INVALID_HAVING_ITEM;
    public static int EC_SCHEMA_IS_NOT_EMPTY;
    public static int EC_ORDER_ITEM_BEYOND_DISTINCT;
    public static int EC_INDENT_NOT_IN_LIST;
    public static int EC_INVALID_GROUP_BY_HAS_SFUN_OR_SUBQUERY;
    public static int EC_NO_INS_PRIVILEGE;
    public static int EC_NO_DEL_PRIVILEGE;
    public static int EC_NO_UPD_PRIVILEGE;
    public static int EC_NO_SEL_PRIVILEGE;
    public static int EC_NO_EXECUTE_PRIVILEGE;
    public static int EC_NO_REF_PRIVILEGE;
    public static int EC_NO_INS_COL_PRIVILEGE;
    public static int EC_NO_SEL_COL_PRIVILEGE;
    public static int EC_NO_ACC_PRIVILEGE;
    public static int EC_NO_CRT_DB_PRIVILEGE;
    public static int EC_NO_CRT_LOGIN_PRIVILEGE;
    public static int EC_NO_CRT_SCH_PRIVILEGE;
    public static int EC_NO_CRT_USER_PRIVILEGE;
    public static int EC_NO_CRT_ROLE_PRIVILEGE;
    public static int EC_NO_CRT_TAB_PRIVILEGE;
    public static int EC_NO_CRT_VIEW_PRIVILEGE;
    public static int EC_NO_CRT_PROC_PRIVILEGE;
    public static int EC_NO_CRT_FUNC_PRIVILEGE;
    public static int EC_NO_CRT_SEQ_PRIVILEGE;
    public static int EC_NO_CRT_INDEX_PRIVILEGE;
    public static int EC_NO_CRT_TRIG_PRIVILEGE;
    public static int EC_NO_CRT_PLY_PRIVILEGE;
    public static int EC_NO_CRT_RULE_PRIVILEGE;
    public static int EC_NO_CRT_DBLINK_PRIVILEGE;
    public static int EC_NO_CRT_DUP_PRIVILEGE;
    public static int EC_NO_CRT_ETRIG_PRIVILEGE;
    public static int EC_NO_CRT_ETRIG_FOR_OTHER_PRIVILEGE;
    public static int EC_NO_DRP_DB_PRIVILEGE;
    public static int EC_NO_DRP_LOGIN_PRIVILEGE;
    public static int EC_NO_DRP_SCH_PRIVILEGE;
    public static int EC_NO_DRP_USER_PRIVILEGE;
    public static int EC_NO_DRP_ROLE_PRIVILEGE;
    public static int EC_NO_DRP_TAB_PRIVILEGE;
    public static int EC_NO_DRP_VIEW_PRIVILEGE;
    public static int EC_NO_DRP_PROC_PRIVILEGE;
    public static int EC_NO_DRP_FUNC_PRIVILEGE;
    public static int EC_NO_DRP_SEQ_PRIVILEGE;
    public static int EC_NO_DRP_INDEX_PRIVILEGE;
    public static int EC_NO_DRP_TRIG_PRIVILEGE;
    public static int EC_NO_DRP_PLY_PRIVILEGE;
    public static int EC_NO_DRP_RULE_PRIVILEGE;
    public static int EC_NO_DRP_DBLINK_PRIVILEGE;
    public static int EC_NO_DRP_DUP_PRIVILEGE;
    public static int EC_NO_ALT_DB_PRIVILEGE;
    public static int EC_NO_ALT_LOGIN_PRIVILEGE;
    public static int EC_NO_ALT_USER_PRIVILEGE;
    public static int EC_NO_ALT_TAB_PRIVILEGE;
    public static int EC_NO_ALT_VIEW_PRIVILEGE;
    public static int EC_NO_ALT_PROC_PRIVILEGE;
    public static int EC_NO_ALT_FUNC_PRIVILEGE;
    public static int EC_NO_ALT_SEQ_PRIVILEGE;
    public static int EC_NO_ALT_INDEX_PRIVILEGE;
    public static int EC_NO_ALT_TRIG_PRIVILEGE;
    public static int EC_NO_ALT_POLICY_PRIVILEGE;
    public static int EC_NO_ALT_USRPLY_PRIVILEGE;
    public static int EC_NO_ALT_TABPLY_PRIVILEGE;
    public static int EC_NO_GNT_PRIVILEGE;
    public static int EC_NO_GNT_ALL_PRIVILEGE;
    public static int EC_GNT_TO_OBJ_OWNER;
    public static int EC_GNT_TO_SYS_UR;
    public static int EC_NO_RVK_PRIVILEGE;
    public static int EC_NO_RVK_ALL_PRIVILEGE;
    public static int EC_RVK_FROM_AUDIT;
    public static int EC_RVK_FROM_SELF;
    public static int EC_RVK_FROM_SYS_UR;
    public static int EC_RVK_FROM_OWNER;
    public static int EC_RVK_FROM_NULL;
    public static int EC_NO_ADT_PRIVILEGE;
    public static int EC_GRANT_ROLE_TO_SELF;
    public static int EC_LOOP_GRANT;
    public static int EC_INVALID_GRANT;
    public static int EC_INVALID_REVOKE;
    public static int EC_INVALID_PRIV_NAME;
    public static int EC_NO_SESS_INFO_PRIVILEGE;
    public static int EC_NO_TRACE_PRIVILEGE;
    public static int EC_NO_AGENT_PRIVILEGE;
    public static int EC_NO_CHECK_LOGIN_PRIVILEGE;
    public static int EC_NO_UNLOCK_LOGIN_PRIVILEGE;
    public static int EC_INVALID_AUDIT_TYPE;
    public static int EC_AUDIT_OFF;
    public static int EC_TABLE_COUNT_LIMIT;
    public static int EC_VIEW_COUNT_LIMIT;
    public static int EC_USER_COUNT_LIMIT;
    public static int EC_ROLE_COUNT_LIMIT;
    public static int EC_PROC_COUNT_LIMIT;
    public static int EC_SEQUENCE_COUNT_LIMIT;
    public static int EC_LOGIN_COUNT_LIMIT;
    public static int EC_FILE_COUNT_LIMIT;
    public static int EC_OBJ_COUNT_LIMIT;
    public static int EC_TOO_MANY_NESTED_LEVEL;
    public static int EC_DBLINK_COUNT_LIMIT;
    public static int EC_POLICY_COUNT_LIMIT;
    public static int EC_RULE_COUNT_LIMIT;
    public static int EC_OPERATOR_COUNT_LIMIT;
    public static int EC_ALERT_COUNT_LIMIT;
    public static int EC_JOB_COUNT_LIMIT;
    public static int EC_TOO_MANY_SESS;
    public static int EC_CATEGORY_COUNT_LIMIT;
    public static int EC_TABLE_POLICY_COUNT_LIMIT;
    public static int EC_DATA_LOSE_WARN;
    public static int EC_DATA_CNV_FAIL;
    public static int EC_DATA_OVERFLOW;
    public static int EC_DATA_DIV_ZERO;
    public static int EC_DATA_ILLEGAL_CHAR;
    public static int EC_DATATYPE_NOT_MATCH;
    public static int EC_INVALID_ESC_CHAR;
    public static int EC_INVALID_ESC_SEQ;
    public static int EC_STR_TRUNC;
    public static int EC_STR_TRIM;
    public static int EC_STR_SUBSTR;
    public static int EC_STR_CAST;
    public static int EC_DATETIME_OVERFLOW;
    public static int EC_CAST_LOST_IMFO;
    public static int EC_CAST_LOST_PREC;
    public static int EC_INVALID_INTERVAL;
    public static int EC_UNKNOWN_PARAM_DATATYPE;
    public static int EC_CMP_FAIL;
    public static int EC_INTERVAL_OVERFLOW;
    public static int EC_INVALID_DATETIME;
    public static int EC_INVALID_DATA_TYPE;
    public static int EC_INVALID_DATATYPE;
    public static int EC_PREC_OUT_OF_LENGTH;
    public static int EC_DEC_OUT_OF_LENGTH;
    public static int EC_INVALID_DATE;
    public static int EC_STR_TOO_LONG;
    public static int EC_INTERVAL_YEAR_MONTH_LEADING_PREC_OVERFLOW;
    public static int EC_INTERVAL_DAY_SECOND_LEADING_PREC_OVERFLOW;
    public static int EC_RN_LOCK_WAIT;
    public static int EC_RN_WAIT_SUCCESS;
    public static int EC_RN_WAIT_RANGE;
    public static int EC_RN_LOCK_FAIL;
    public static int EC_RN_DEADLOCK;
    public static int EC_RN_SET_TRANS;
    public static int EC_RN_INVALID_SAVEPNT_NAME;
    public static int EC_RN_TRANS_ACTIVE;
    public static int EC_RN_OBJECT_BUSY;
    public static int EC_RN_PLAN_ALREADY_EXIST;
    public static int EC_RN_DUP_KEY;
    public static int EC_RN_INSERT_NULL_PK_VALUE;
    public static int EC_RN_VIOLATE_UNIQUE_CONSTRAINT;
    public static int EC_RN_WITH_CHECK_OPTION;
    public static int EC_RN_VIOLATE_CHECK_CONSTRAINT;
    public static int EC_RN_CHECK_CONSTRAINT;
    public static int EC_RN_REFERENCED_CONSTRAINT;
    public static int EC_RN_FK_REFERENCE_CONSTRAINT;
    public static int EC_RN_VIOLATE_PRI_KEY_CONSTRAINT;
    public static int EC_RN_VIOLATE_NOT_NULL_CONSTAINT;
    public static int EC_RN_NO_PARAM_VALUE;
    public static int EC_RN_INVALID_DATA;
    public static int EC_RN_REC_OUT_OF_MAX_SIZE;
    public static int EC_RN_INVALID_ARG_DATA;
    public static int EC_RN_NEED_MORE_PARAMS;
    public static int EC_RN_PARAM_NUM_MISMATCH;
    public static int EC_RN_ERROR_IN_USING_EXPR_LIST;
    public static int EC_RN_NUM_MISMATCH;
    public static int EC_PARAM_IO_TYPE_MISMATCH;
    public static int EC_RN_OBJ_NOT_EXISTS;
    public static int EC_RN_INVALID_DB_OBJECT;
    public static int EC_RN_DB_OFFLINE;
    public static int EC_RN_INVALID_STMT_ID;
    public static int EC_RN_INVALID_DATA_FILE_NAME;
    public static int EC_RN_INVALID_CONTROL_FILE;
    public static int EC_RN_INVALID_CURSOR_STATE;
    public static int EC_RN_INVALID_OP_IN_CURSOR;
    public static int EC_RN_TEMPORARY_TABLE_NOT_EXIST;
    public static int EC_RN_OBJECT_MODIFIED;
    public static int EC_RN_CURDB_NOT_SYSTEM;
    public static int EC_RN_DB_CORRUPT;
    public static int EC_RN_CTL_FILE_CREATE_FAIL;
    public static int EC_RN_LOG_FILE_CREATE_FAIL;
    public static int EC_RN_DTA_FILE_CREATE_FAIL;
    public static int EC_RN_INVALID_DB_NAME;
    public static int EC_RN_INVALID_LOGIN_NAME;
    public static int EC_RN_INVALID_USER_NAME;
    public static int EC_RN_INVALID_SCHEMA_NAME;
    public static int EC_RN_INVALID_TABLE_NAME;
    public static int EC_RN_INVALID_TV_NAME;
    public static int EC_RN_INVALID_INDEX_NAME;
    public static int EC_RN_INVALID_COL_NAME;
    public static int EC_RN_TABLE_NO_CLUSTER_PK;
    public static int EC_RN_TABLE_NO_DUPLICATE;
    public static int EC_RN_TABLE_SAME_DUPLICATE;
    public static int EC_RN_INVALID_CURSOR_STMT;
    public static int EC_RN_OBJ_ALREADY_EXISTS;
    public static int EC_RN_INVALID_VALUE_QUERY;
    public static int EC_RN_TOO_MANY_SEL_INTO_ROWS;
    public static int EC_RN_FAIL_TO_BUILD_COL_WITH_BLOB;
    public static int EC_RN_TOO_MANY_PATTERNS;
    public static int EC_RN_STMT_TIMEOUT;
    public static int EC_RN_INVALID_EXEC_STMT_IN_PLBLK;
    public static int EC_RN_CONTEXTINDEX_RUNTIME_ERROR;
    public static int EC_RN_DEL_NONE;
    public static int EC_RN_TRY_TO_MODIFY_IDENT_COL;
    public static int EC_RN_SET_IDENTINS_ALREADY_SET;
    public static int EC_RN_SET_IDENTINS_NOT_SET;
    public static int EC_RN_SET_IDENTINS_OTHER_SET;
    public static int EC_RN_TOO_MANY_NESTED_LEVEL;
    public static int EC_RN_FUNC_NOT_RET_VAL;
    public static int EC_RN_NOT_ENOUGH_CTX_STACK_SIZE;
    public static int EC_RN_NO_ACC_PRIVILEGE;
    public static int EC_BAK_BASE;
    public static int EC_BAK_UNKNOWN;
    public static int EC_BAK_NO_REDO;
    public static int EC_BAK_NO_ARCH;
    public static int EC_BAK_CTL_READ;
    public static int EC_BAK_BASE_INFO;
    public static int EC_BAK_FILE_LIST;
    public static int EC_BAK_FILE_CREATE;
    public static int EC_BAK_LOG_FILE;
    public static int EC_BAK_CTL_FILE;
    public static int EC_BAK_INFO_WRITE;
    public static int EC_BAK_SYS_STATUS;
    public static int EC_BAK_DATA_FILE;
    public static int EC_BAK_PARAMENT;
    public static int EC_BAK_DUP;
    public static int EC_BAK_FILE_EXISTS;
    public static int EC_BAK_DB_STATUS;
    public static int EC_BAK_BAK_LST_ADD;
    public static int EC_BAK_PATHNAME;
    public static int EC_BAK_NO_PRIVILEGE;
    public static int EC_BAK_BASE_DB_VERSION;
    public static int EC_BAK_DB_OFFLINE;
    public static int EC_BAK_INVALID_MAXSIZE;
    public static int EC_RES_UNKNOWN;
    public static int EC_RES_NO_DB;
    public static int EC_RES_CTL_FILE;
    public static int EC_RES_SYS_DB;
    public static int EC_RES_BASE_BACKUP;
    public static int EC_RES_BAK_FILE_LIST;
    public static int EC_RES_BAK_FILE;
    public static int EC_RES_DATA_FILE;
    public static int EC_RES_LOG_FILE;
    public static int EC_RES_BACKUP;
    public static int EC_RES_PAGE_SIZE;
    public static int EC_RES_EXTENT_SIZE;
    public static int EC_RES_CASE_SENSITIVE;
    public static int EC_RES_ROWID_SIZE;
    public static int EC_RES_LOG_PAGE_SIZE;
    public static int EC_RES_UNICODE_FLAG;
    public static int EC_RES_NO_PRIVILEGE;
    public static int EC_RES_DB_VERSION;
    public static int EC_RES_FILE_VER;
    public static int EC_RES_FILE_LOST;
    public static int EC_RES_ENABLE_POLICY;
    public static int EC_RES_SET_CTL_FILE_PATH;
    public static int EC_RES_IDENTICAL_FILE_ID;
    public static int EC_RES_INVALID_FILE_ID;
    public static int EC_RES_ARCH_PATH_NUM;
    public static int EC_RES_DATA_FILE_RW;
    public static int EC_RES_DEC_INT64_FLAG;
    public static int EC_RES_DB_NAME;
    public static int EC_SESS_INFO_NOT_ACTIVE;
    public static int EC_TRACE_ALREADY_EXISTS;
    public static int EC_INVALID_TRACE_EVT_NAME;
    public static int EC_TRACE_NOT_EXISTS;
    public static int EC_TRACE_FILE_ALREADY_EXISTS;
    public static int EC_OPERATOR_NOT_EXISTS;
    public static int EC_OPERATOR_ALREADY_EXISTS;
    public static int EC_OPERATOR_IS_USED;
    public static int EC_ALERT_NOT_EXISTS;
    public static int EC_ALERT_ALREADY_EXISTS;
    public static int EC_ALERT_IS_USED;
    public static int EC_ALERT_OPERATOR_NOT_EXISTS;
    public static int EC_ALERT_OPERATOR_ALREADY_EXISTS;
    public static int EC_JOB_NOT_EXISTS;
    public static int EC_JOB_ALREADY_EXISTS;
    public static int EC_JOB_STEP_NOT_EXISTS;
    public static int EC_JOB_STEP_ALREADY_EXISTS;
    public static int EC_JOB_SCHEDULE_NOT_EXISTS;
    public static int EC_JOB_SCHEDULE_ALREADY_EXISTS;
    public static int EC_JOB_ALERT_NOT_EXISTS;
    public static int EC_JOB_ALERT_ALREADY_EXISTS;
    public static int EC_EXCEDD_MAX_SESSION_LIMIT;
    public static int EC_EXCEED_MAX_SESSION_PER_USER;
    public static int EC_CONNECT_CAN_NOT_ESTABLISHED;
    public static int EC_SNET_FAIL;
    public static int EC_SYSASYNCTRXNUM_NO_SUCH_RECORD;
    public static int EC_INVALID_MSG;
    public static int EC_RECV_OOB;
    public static int EC_MSG_UNCOMPRESS_ERR;
    public static int EC_MSG_COMPRESS_ERR;
    public static int EC_CONNECT_LOST;
    public static int EC_HOST_IS_UNKNOWN;
    public static int EC_ACCESS_IS_DENYED;
    public static int EC_INVALID_LINK;
    public static int EC_SEND_MAIL_FAIL;
    public static int EC_AUTH_FAIL;
    public static int EC_INVALID_NET_ADDRESS;
    public static int EC_USER_NOT_EXIST;
    public static int EC_OUT_OF_MSG_BUFFER;
    public static int EC_SERVER_NOT_SECURITY;
    public static int EC_CLIENT_SCHEDUAL_ERR;
    public static int EC_MAL_LINK_LOST;
    public static int EC_MSG_LEN_TOO_LONG;
    public static int ECNET_COMMUNITION_ERROR;
    public static int ECNET_MSG_CHECK_ERROR;
    public static int ECNET_SQL_IS_EMPTY;
    public static int ECNET_OVER_FLOW;
    public static int ECNET_INVALID_TIME_INTERVAL;
    public static int ECNET_UNSUPPORTED_TYPE;
    public static int ECNET_DATA_CONVERTION_ERROR;
    public static int ECNET_READ_ONLY_CONNECTION;
    public static int ECNET_INVALID_SQL_TYPE;
    public static int ECNET_INVALID_SEQUENCE;
    public static int ECNET_INVALID_DB_NAME;
    public static int ECNET_INVALID_DIGITAL_FORMAT;
    public static int ECNET_INVALID_DATA_FORMAT;
    public static int ECNET_INVALID_TIME_FORMAT;
    public static int ECNET_INVALID_DATETIME_FORMAT;
    public static int ECNET_INVALID_COLUMN_TYPE;
    public static int ECNET_INVALID_COLUMN_NAME;
    public static int ECNET_INVALID_BIGDIGITAL_FORMAT;
    public static int ECNET_INVALID_RESULTSET_TYPE;
    public static int ECNET_INVALUID_ROW_NUMBER;
    public static int ECNET_EMPTY_RESULTSET;
    public static int ECNET_INVALID_CURSOR_MOVE_DIRECTION;
    public static int ECNET_FORWORD_ONLY_RESULTSET;
    public static int ECNET_NOT_ALLOW_NULL;
    public static int ECNET_INVALID_CATALOG;
    public static int ECNET_RESULTSET_NOT_IN_INSERT_STATUS;
    public static int ECNET_NO_SOCKET_DATA;
    public static int ECNET_RESULTSET_IS_READ_ONLY;
    public static int ECNET_UNSUPPORED_INTERFACE;
    public static int ECNET_INVALID_SEQUENCE_NUMBER;
    public static int ECNET_INVALID_RETURN_VALUE;
    public static int ECNET_RESULTSET_CLOSED;
    public static int ECNET_STATEMENT_HANDLE_CLOSED;
    public static int ECNET_INVALID_PARAMETER_VALUE;
    public static int ECNET_INVALID_TRAN_ISOLATION;
    public static int ECNET_SAVEPOINT_IN_AUTOCOMMIT_MODE;
    public static int ECNET_ROLLBACK_TO_SAVEPOINT_IN_AUTOCOMMIT_MODE;
    public static int ECNET_RELEASE_SAVEPOINT_IN_AUTOCOMMIT_MODE;
    public static int ECNET_COMMIT_IN_AUTOCOMMIT_MODE;
    public static int ECNET_ROLLBACK_IN_AUTOCOMMIT_MODE;
    public static int ECNET_INVALID_INPUT_PARAMETER_VALUE;
    public static int ECNET_INVALID_OUTPUT_PARAMETER_VALUE;
    public static int ECNET_CANNOT_GET_SAVEPOINT_ID;
    public static int ECNET_CANNOT_GET_SAVEPOINT_NAME;
    public static int ECNET_UNKNOWN_PARAMETER_TYPE;
    public static int ECNET_INVALID_SCALE;
    public static int ECNET_INVALID_PARAMETER_NAME;
    public static int ECNET_INVALID_SAVEPOINT_NAME;
    public static int ECNET_PARAMETER_PREC_TOO_BIG;
    public static int ECNET_SAVEPOINT_RELEASED;
    public static int ECNET_UNBINDED_PARAMETER;
    public static int ECNET_INVALID_CURSOR_VALUE;
    public static int ECNET_INVALID_LENGTH_OR_OFFSET;
    public static int ECNET_CONNECTION_CLOSED;
    public static int ECNET_NEGOTIATE_FAIL;
    public static int ECNET_KERBEROS_FAIL;
    public static int ECNET_GET_FQDN_FAIL;
    public static int ECNET_INVALID_HEX;
    public static int ECNET_LOB_LENGTH_ERROR;
    public static int ECNET_INVALID_COMMAND_TYPE;
    public static int ECNET_INVALID_CONNECT_PROPERTY;
    public static int ECNET_INVALID_SCHEMA_RESTRICTIONS;
    public static int ECNET_TRX_NOLONGER_USABLE;
    public static int ECNET_CONNCTION_NOT_OPENED;
    public static int ECNET_DO_NOT_SUPPORT_CATALOG;
    public static int ECNET_CRC_CHECK_FAIL_;
    public static int ECNET_OPT_FAIL;
    public static int ECNET_SVR_VERSION_WRONG;
    public static int ECNET_NULL_VALUE;
    public static int ECNET_MUL_REFCURSOR;
    public static int ECNET_NOT_FUNCTION;
    public static int ECNET_INVALID_ENUM_VALUE;
    public static int ECNET_READ_NO_DATA;
    public static int ECNET_INVALID_COL_NUMBER;
    public static int ECNET_NAME_TOO_LONG;
    public static int ECNET_COMMAND_TIME_OUT;
    public static int ECNET_NO_COMMAND_TEXT;
    public static int ECNET_INVALID_INDEXCOL_RESTRICTIONS;
    public static int ECNET_DATAREADER_ALREADY_OPENED;
    public static int ECNET_CONNECTION_SWITCHED;
    public static int ECNET_CONNECTION_SWITCH_FAILED;
    public static int ECNET_STR_CUT;
    public static int ECNET_ONLY_DMPARAMETER;
    public static int ECNET_SEQUENTIALACCESS_ERROR;
    public static int ECNET_INVALID_DAY;
    public static int ECNET_INVALID_MONTH;
    public static int ECNET_INVALID_YEAR;
    public static int ECNET_INVALID_HOUR24;
    public static int ECNET_INVALID_HOUR12;
    public static int ECNET_INVALID_MINUTE;
    public static int ECNET_INVALID_SECOND;
    public static int ECNET_INVALID_MILLSECOND;
    public static int ECNET_INVALID_AM;
    public static int ECNET_INVALID_TZH;
    public static int ECNET_INVALID_TZM;
    public static int ECNET_INVALID_TZ;
    public static int ECNET_DATEFORMAT_STR_TOO_SHORT;
    public static int ECNET_DATEFORMAT_STR_NOT_MATCH;
    public static int ECNET_DATEFORMAT_NOT_DIGIT_CHAR;
    public static int ECNET_INVALID_PARAMETER_DmDbTYPE;
    public static int ECNET_INVALID_COMPLEX_TYPE_NAME;
    public static int ECNET_INVALID_SERVER_MODE;
    public static int ECNET_DATA_TOO_LONG;
    public static int ECNET_MSG_LEN_TOO_LONG;
    public static int ECNET_NOT_SUPPORT_ENCRYPT;
    public static int ECNET_ENCRYPT_FAIL;
    public static int ECNET_DECRYPT_FAIL;
    public static int ECNET_DIGEST_FAIL;
    public static int ECNET_CHECK_DIGEST_FAIL;
    public static int ECNET_CONNPOOL_TIMEOUT;
    public static int ECNET_STRUCT_MEM_NOT_MATCH;
    public static int ERROR_MASTER_SLAVE_SWITCHED;
    public static int ERROR_FOR_LOG;
    private static DmErrorDefinition();
}
public class Dm.DmException : DbException {
    private DmErrorCollection m_ErrorCollection;
    public int Number { get; }
    public string Schema { get; }
    public string Table { get; }
    public string Col { get; }
    internal DmException(string message);
    internal DmException(DmError err);
    internal DmException(string message, DmError err);
    internal DmException(SerializationInfo info, StreamingContext context);
    public int get_Number();
    public string get_Schema();
    public string get_Table();
    public string get_Col();
    public DmException CreateCopy();
}
internal class Dm.DmExecDirectOp : object {
    private UInt32 type;
    private string sql_buf;
    private int sql_len;
    private short param_num;
    private Byte[] values;
    private int val_len;
    private Byte[] types;
    private int types_len;
    public short GetParameterCount();
    public string GetSql();
    public Byte[] GetTypes();
    public int GetTypeLen();
    public Byte[] GetValues();
    public int GetValueLen();
    public int GetExecOpt(string sql, A stmt);
    private void ExecDirectOptAddWord(string word, int word_len);
    private int ExecDirectOptAddVal(UInt32 type, string word, A stmt);
    public void InitExecDirectOpt();
    public void DeinitExecDirectOpt();
}
internal class Dm.DmField : object {
    private string m_SchName;
    private Byte[] m_SchNameForSet;
    private string m_TabName;
    private Byte[] m_TabNameForSet;
    private string m_Name;
    private Byte[] m_NameForSet;
    private string m_TypeName;
    private Byte[] m_TypeNameForSet;
    private byte m_TypeFlag;
    private int m_CType;
    private short m_InOutType;
    private int m_Precision;
    private int m_Size;
    private int m_Scale;
    private bool m_Nullable;
    private bool m_Identity;
    private bool m_IsLob;
    private short m_Dbid;
    private int m_Schid;
    private int m_Tabid;
    private short m_Colid;
    private string m_BaseCatalog;
    private Byte[] m_BaseCataLogForSet;
    private string m_BaseSchema;
    private Byte[] m_BaseSchemaForSet;
    private string m_BaseTable;
    private Byte[] m_BaseTableForSet;
    private string m_BaseColumn;
    private Byte[] m_BaseColumnForSet;
    private string m_ServerEncoding;
    public ComplexTypeDesc typeDescriptor;
    internal ComplexTypeDesc ComplexTypeDesc { get; internal set; }
    public DmField(DmConnInstance conn);
    public DmField(string ServerEncoding);
    internal ComplexTypeDesc get_ComplexTypeDesc();
    internal void set_ComplexTypeDesc(ComplexTypeDesc value);
    public void SetCType(int type);
    public void SetTypeFlag(byte typeFlag);
    public void SetPrecision(int precision);
    public void SetSize(int size);
    public void SetScale(int colnumscale);
    public void SetInOutType(short type);
    public void SetNullable(bool nullable);
    public void SetIdentity(bool identity);
    public void SetIsLob(bool isLob);
    public void SetDbID(short dbid);
    public void SetSchemaID(int schid);
    public void SetTableID(int tabid);
    public void SetColID(short colid);
    public string GetName();
    public int GetCType();
    public byte GetTypeFlag();
    public int GetPrecision();
    public int GetSize();
    public int GetScale();
    public short GetInOutType();
    public bool GetNullable();
    public bool GetIdentity();
    public bool GetIsLob();
    public short GetDbID();
    public string GetBaseCatalog();
    public int GetSchemaID();
    public string GetBaseSchema();
    public int GetTableID();
    public string GetBaseTable();
    public short GetColID();
    public string GetBaseColumn();
    public void SetTypeName(b msg, int len);
    public void SetBaseColumn(b msg, int len);
    public void SetName(b msg, int len);
    public void SetSchema(b msg, int len);
    public void SetTable(b msg, int len);
    public string GetSchema();
    public string GetTable();
    public string GetTypeName();
}
internal class Dm.DmFldr : object {
    private DmConnProperty m_ConProps;
    private IntPtr m_Sinstance;
    private IntPtr m_Pinstance;
    public void SetAttrNecessary(IDataReader reader, DataTable dt, int count);
    internal int GetTypeCode(Type type);
    public void SetAttrNecessary(Int32[] len, List`1<ColumnInfo> columnInfos);
    private int getCharset(string serverEncoding);
    public void Initilize(DmConnProperty props, string desttable, DmBulkCopyOptions op, int rows);
    public void SetValue(int rowid, string colname, object value);
    public void SetValue(int rowid, short colid, object value);
    public void SetBytes(int rowid, short colid, Byte[] value, int len);
    public void SetBytes(int rowid, string colname, Byte[] value, int len);
    public void SetSingle(int rowid, short colid, float value);
    public void SetSingle(int rowid, string colname, float value);
    public void SetDouble(int rowid, short colid, double value);
    public void SetDouble(int rowid, string colname, double value);
    public void SetInt64(int rowid, short colid, long value);
    public void SetInt64(int rowid, string colname, long value);
    public void SetUInt64(int rowid, short colid, ulong value);
    public void SetUInt64(int rowid, string colname, ulong value);
    public void SetInt32(int rowid, short colid, int value);
    public void SetInt32(int rowid, string colname, int value);
    public void SetUInt32(int rowid, short colid, UInt32 value);
    public void SetUInt32(int rowid, string colname, UInt32 value);
    public void SetInt16(int rowid, short colid, short value);
    public void SetInt16(int rowid, string colname, short value);
    public void SetUInt16(int rowid, short colid, ushort value);
    public void SetUInt16(int rowid, string colname, ushort value);
    public void SetInt8(int rowid, short colid, sbyte value);
    public void SetInt8(int rowid, string colname, sbyte value);
    public void SetUInt8(int rowid, short colid, byte value);
    public void SetUInt8(int rowid, string colname, byte value);
    public void SendRow(int rows);
    public void SendRow();
    public void ResetBind();
    public void Batch();
    public void Finish();
    public void UnInitilize();
}
internal class Dm.DmFldrDllCall : object {
    private static int FLDR_SUCCESS;
    private static bool FLDR_SUCCEEDED(int ret);
    public static int fldr_alloc(IntPtr& fsinst);
    public static void AllocSinst(IntPtr& fsinst);
    public static int fldr_provider_alloc(IntPtr fsinst, IntPtr& fpinst, int Rows);
    public static void AllocPinst(IntPtr fsinst, IntPtr& fpinst, int Rows);
    public static int check_table(IntPtr fsinst, int cols);
    public static void CheckTable(IntPtr fsinst, int cols);
    public static int fldr_provider_alloc_info(IntPtr fpinst);
    public static void AllocPinstInfo(IntPtr fpinst);
    public static int fldr_set_col_max_len(IntPtr fpinst, int colid, int type, int max_len);
    public static void FldrSetColMaxLen(IntPtr fpinst, int colid, int type, int max_len);
    public static int fldr_set_col_max_len_by_name(IntPtr fpinst, string col_name, int type, int max_len);
    public static void FldrSetColMaxLenByName(IntPtr fpinst, string col_name, int type, int max_len);
    public static int fldr_free(IntPtr fsinst);
    public static void FreeSinst(IntPtr fsinst);
    public static int fldr_provider_free(IntPtr fpinst);
    public static void FreePinst(IntPtr fpinst);
    public static int fldr_provider_reset_bind(IntPtr fpinst);
    public static void ResetBind(IntPtr fpinst);
    public static int fldr_set_value_by_name(IntPtr fpinst, int rowid, string colname, string val, int val_len);
    public static void SetVal(IntPtr fsinst, IntPtr fpinst, int rowid, string colname, string val, int val_len);
    public static int fldr_set_value_by_colid(IntPtr fpinst, int rowid, short colid, string val, int val_len);
    public static void SetVal(IntPtr fsinst, IntPtr fpinst, int rowid, short colid, string val, int val_len);
    public static int fldr_set_value_by_colid_bytes(IntPtr fpinst, int rowid, short colid, Byte[] val, int val_len);
    public static void SetValBytes(IntPtr fsinst, IntPtr fpinst, int rowid, short colid, Byte[] val, int val_len);
    public static int fldr_set_value_by_name_bytes(IntPtr fpinst, int rowid, string colname, Byte[] val, int val_len);
    public static void SetValBytes(IntPtr fsinst, IntPtr fpinst, int rowid, string colname, Byte[] val, int val_len);
    public static int fldr_set_value_by_name_float(IntPtr fpinst, int rowid, string colname, float val, int val_len);
    public static void SetValSingle(IntPtr fsinst, IntPtr fpinst, int rowid, string colname, float val, int val_len);
    public static int fldr_set_value_by_colid_float(IntPtr fpinst, int rowid, short colid, float val, int val_len);
    public static void SetValSingle(IntPtr fsinst, IntPtr fpinst, int rowid, short colid, float val, int val_len);
    public static int fldr_set_value_by_name_double(IntPtr fpinst, int rowid, string colname, double val, int val_len);
    public static void SetValDouble(IntPtr fsinst, IntPtr fpinst, int rowid, string colname, double val, int val_len);
    public static int fldr_set_value_by_colid_double(IntPtr fpinst, int rowid, short colid, double val, int val_len);
    public static void SetValDouble(IntPtr fsinst, IntPtr fpinst, int rowid, short colid, double val, int val_len);
    public static int fldr_set_value_by_name_int64(IntPtr fpinst, int rowid, string colname, long val, int val_len);
    public static void SetValInt64(IntPtr fsinst, IntPtr fpinst, int rowid, string colname, long val, int val_len);
    public static int fldr_set_value_by_colid_int64(IntPtr fpinst, int rowid, short colid, long val, int val_len);
    public static void SetValInt64(IntPtr fsinst, IntPtr fpinst, int rowid, short colid, long val, int val_len);
    public static int fldr_set_value_by_name_uint64(IntPtr fpinst, int rowid, string colname, ulong val, int val_len);
    public static void SetValUInt64(IntPtr fsinst, IntPtr fpinst, int rowid, string colname, ulong val, int val_len);
    public static int fldr_set_value_by_colid_uint64(IntPtr fpinst, int rowid, short colid, ulong val, int val_len);
    public static void SetValUInt64(IntPtr fsinst, IntPtr fpinst, int rowid, short colid, ulong val, int val_len);
    public static int fldr_set_value_by_name_int32(IntPtr fpinst, int rowid, string colname, int val, int val_len);
    public static void SetValInt32(IntPtr fsinst, IntPtr fpinst, int rowid, string colname, int val, int val_len);
    public static int fldr_set_value_by_colid_int32(IntPtr fpinst, int rowid, short colid, int val, int val_len);
    public static void SetValInt32(IntPtr fsinst, IntPtr fpinst, int rowid, short colid, int val, int val_len);
    public static int fldr_set_value_by_name_uint32(IntPtr fpinst, int rowid, string colname, UInt32 val, int val_len);
    public static void SetValUInt32(IntPtr fsinst, IntPtr fpinst, int rowid, string colname, UInt32 val, int val_len);
    public static int fldr_set_value_by_colid_uint32(IntPtr fpinst, int rowid, short colid, UInt32 val, int val_len);
    public static void SetValUInt32(IntPtr fsinst, IntPtr fpinst, int rowid, short colid, UInt32 val, int val_len);
    public static int fldr_set_value_by_name_int16(IntPtr fpinst, int rowid, string colname, short val, int val_len);
    public static void SetValInt16(IntPtr fsinst, IntPtr fpinst, int rowid, string colname, short val, int val_len);
    public static int fldr_set_value_by_colid_int16(IntPtr fpinst, int rowid, short colid, short val, int val_len);
    public static void SetValInt16(IntPtr fsinst, IntPtr fpinst, int rowid, short colid, short val, int val_len);
    public static int fldr_set_value_by_name_uint16(IntPtr fpinst, int rowid, string colname, ushort val, int val_len);
    public static void SetValUInt16(IntPtr fsinst, IntPtr fpinst, int rowid, string colname, ushort val, int val_len);
    public static int fldr_set_value_by_colid_uint16(IntPtr fpinst, int rowid, short colid, ushort val, int val_len);
    public static void SetValUInt16(IntPtr fsinst, IntPtr fpinst, int rowid, short colid, ushort val, int val_len);
    public static int fldr_set_value_by_name_int8(IntPtr fpinst, int rowid, string colname, sbyte val, int val_len);
    public static void SetValInt8(IntPtr fsinst, IntPtr fpinst, int rowid, string colname, sbyte val, int val_len);
    public static int fldr_set_value_by_colid_int8(IntPtr fpinst, int rowid, short colid, sbyte val, int val_len);
    public static void SetValInt8(IntPtr fsinst, IntPtr fpinst, int rowid, short colid, sbyte val, int val_len);
    public static int fldr_set_value_by_name_uint8(IntPtr fpinst, int rowid, string colname, byte val, int val_len);
    public static void SetValUInt8(IntPtr fsinst, IntPtr fpinst, int rowid, string colname, byte val, int val_len);
    public static int fldr_set_value_by_colid_uint8(IntPtr fpinst, int rowid, short colid, byte val, int val_len);
    public static void SetValUInt8(IntPtr fsinst, IntPtr fpinst, int rowid, short colid, byte val, int val_len);
    public static int fldr_set_attr_1(IntPtr fsinst, int attr, IntPtr value, int length);
    public static int fldr_set_attr_2(IntPtr fsinst, int attr, string value, int length);
    public static void SetAttr(IntPtr fsinst, int attr, object value, int length);
    public static int fldr_initialize(IntPtr fsinst, int type, IntPtr conn, string server, string uid, string pwd, string tab);
    public static void Initialize(IntPtr fsinst, int type, string server, string uid, string pwd, string tab);
    public static int fldr_sendrows(IntPtr fsinst, int rows);
    public static void SendRows(IntPtr fsinst, int rows);
    public static int fldr_batch(IntPtr fsinst, Int64& rows);
    public static void Batch(IntPtr fsinst, Int64& rows);
    public static int fldr_finish(IntPtr fsinst);
    public static void Finish(IntPtr fsinst);
    public static int fldr_uninitialize(IntPtr fsinst, int flag);
    public static void UnInitilize(IntPtr fsinst);
    public static int fldr_provider_get_err(IntPtr fsinst, int nth_rec, Int32& errcode, IntPtr& errmsg);
    public static void GetError(IntPtr fsinst, Int32& errcode, String& errmsg);
}
internal class Dm.DmGetValue : object {
    private string m_ServerEncoding;
    private A m_Statement;
    private byte m_NewLobFlag;
    internal DmConnProperty connProperty { get; }
    public DmGetValue(string servEncoding, A stmt, byte newLobFlag);
    internal DmConnProperty get_connProperty();
    private void CheckRangeSByte(object tmp_object);
    private void CheckRangeInt16(object tmp_object);
    private void CheckRangeInt32(object tmp_object);
    private void CheckRangeInt64(object tmp_object);
    private void CheckRangeSingle(object tmp_object);
    private void CheckRangeDecimal(object tmp_object);
    private void CheckRange(object tmp_object, TypeCode typecode);
    private void CheckNetDecimal(string decstring);
    internal int GetInt(int i, Byte[] val, int CType, int prec, int scale);
    internal byte GetByte(int i, Byte[] val, int CType, int prec, int scale);
    internal short GetShort(int i, Byte[] val, int CType, int prec, int scale);
    internal long GetLong(int i, Byte[] val, int CType, int prec, int scale);
    internal float GetFloat(int i, Byte[] val, int CType, int prec, int scale);
    internal double GetDouble(int i, Byte[] val, int CType, int prec, int scale);
    internal string GetString(int i, Byte[] val, int CType, int prec, int scale);
    internal string ReplaceNumPoint(string x);
    internal bool GetBoolean(int i, Byte[] val, int CType, int prec, int scale);
    internal DmXDec GetDmDecimal(int i, Byte[] val, int CType, int prec, int scale);
    internal decimal GetBigDecimal(int i, Byte[] val, int CType, int prec, int scale);
    internal sbyte GetSByte(int i, Byte[] val, int CType, int prec, int scale);
    internal ushort GetUshort(int i, Byte[] val, int CType, int prec, int scale);
    internal UInt32 GetUint(int i, Byte[] val, int CType, int prec, int scale);
    internal ulong GetUlong(int i, Byte[] val, int CType, int prec, int scale);
    public DateTimeOffset GetTimeTZ(int i, Byte[] val, int CType, int prec, int scale);
    public DateTimeOffset GetTimestampTZ(int i, Byte[] val, int CType, int prec, int scale);
    public DateTime GetTimestamp(int i, Byte[] val, int CType, int prec, int scale);
    public DateTime GetDate(int i, Byte[] val, int CType, int prec, int scale);
    public DateTime GetTime(int i, Byte[] val, int CType, int prec, int scale);
    public DmIntervalDT GetINTERVALDT(int i, Byte[] val, int CType, int prec, int scale);
    public DmIntervalYM GetINTERVALYM(int i, Byte[] val, int CType, int prec, int scale);
    internal object GetIntervalDtByMode(int i, Byte[] val, int CType, int prec, int scale);
    internal object GetIntervalYmByMode(int i, Byte[] val, int CType, int prec, int scale);
    internal object GetObject(int i, Byte[] val, int CType, int prec, int scale);
    internal Byte[] GetBytes(int i, Byte[] val, int CType, int prec, int scale);
    private bool IsRealData(Byte[] bs);
    internal object ToComplexType(Byte[] bytes, DmField column, DmConnection connection);
}
internal class Dm.DmInfo : object {
    private DmColumn[] m_ColumnsInfo;
    private DmParameterInternal[] m_ParamsInfo;
    private long m_RowCount;
    private DmRowId m_Rowid;
    private bool m_HasResultSet;
    private bool m_Updatable;
    private string m_PrintMsg;
    private int m_RefHandle;
    private int m_RetStmtType;
    private int m_OutParamNum;
    private int m_Execid;
    private long m_RecordsAffected;
    private int m_ParamNum;
    private int m_ParamCount;
    private string m_ServerEncoding;
    private DmConnInstance conn;
    internal DmConnInstance ConnInstance { get; }
    internal int Execid { get; internal set; }
    public DmInfo(DmConnInstance conn);
    internal DmConnInstance get_ConnInstance();
    internal void SetParaNum(int ParamNum);
    internal void GetParamsInfo(DmParameterInternal[]& ParamsInfo);
    public void SetColumnsInfo(DmColumn[] columnsInfo);
    public DmColumn[] GetColumnsInfo();
    internal void SetParamsInfo(DmParameterInternal[] paramsInfo);
    internal DmParameterInternal[] GetParamsInfo();
    public int GetColumnCount();
    public int GetParameterCount();
    internal int GetOutParamCount();
    public void SetRowCount(long rowCount);
    public void SetRecordsAffected(long RecordsAffected);
    public long GetRecordsAffected();
    public long GetRowCount();
    public bool GetHasResultSet();
    public void SetHasResultSet(bool hasResultSet);
    public void SetRowId(DmRowId rowid);
    public DmRowId GetRowId();
    public void SetPrintMsg(string PrintMsg);
    public string GetPrintMsg();
    public void SetRefHandle(int refHandle);
    public int GetRefHandle();
    public bool GetUpdatable();
    public void SetUpdatable(bool val);
    public int GetRetStmtType();
    public void SetRetStmtType(int stmtType);
    public int GetOutParamNum();
    public void SetOutParamNum(int outParamNum);
    internal int get_Execid();
    internal void set_Execid(int value);
}
public class Dm.DmIntervalDT : object {
    public static byte QUA_Y;
    public static byte QUA_YM;
    public static byte QUA_MO;
    public static byte QUA_D;
    public static byte QUA_DH;
    public static byte QUA_DHM;
    public static byte QUA_DHMS;
    public static byte QUA_H;
    public static byte QUA_HM;
    public static byte QUA_HMS;
    public static byte QUA_M;
    public static byte QUA_MS;
    public static byte QUA_S;
    public static int LEADSCALE_MAX;
    private byte type;
    private int leadScale;
    private int secScale;
    private bool negative;
    public int days;
    public int hours;
    public int minutes;
    public int seconds;
    public int fraction;
    private int scaleForSvr;
    public DmIntervalDT(int days, int hours, int minutes, int seconds, int millseconds);
    private DmIntervalDT(byte type, bool negative, int days, int hours, int minutes, int seconds, int fraction, int scale);
    public DmIntervalDT(TimeSpan timeSpan, int scale);
    public DmIntervalDT(Byte[] interval, int leadScale, int secScale);
    public DmIntervalDT(string str, byte type, int leadScale, int secScale);
    private void checkSignAndReset();
    public int getScaleForSvr();
    private static void checkStrHead(string str);
    public void reset(Byte[] interval);
    private void SetDay(string value);
    private void SetHour(string value);
    private void SetMinute(string value);
    private void SetSecond(string value);
    private void SetHourToSecond(string value);
    private void SetHourToMinute(string value);
    private void SetMinuteToSecond(string value);
    private void SetDayToHour(string value);
    private void SetDayToMinute(string value);
    private void SetDayToSecond(string value);
    private void checkStrValue(string str, int maxNum, Char[] seperators);
    private string getAbsValue(string value);
    public int GetDay();
    public int GetHour();
    public int GetMinute();
    public int GetSecond();
    public int GetNano();
    public int GetDTType();
    public string GetDTString();
    private string formatStrByScale(string str, int scale);
    private string formatStrByDefault(string str);
    public virtual string ToString();
    public Byte[] ConvertStrToBs(int scale);
    public DmIntervalDT convertTo(int scale);
    private void convertMSecond(int destType, Int64[] destDT, int destSecScale);
    private void incrementDay(int destType, Int64[] dt);
    private void incrementHour(int destType, Int64[] dt);
    private void incrementMinute(int destType, Int64[] dt);
    private void incrementSecond(int destType, Int64[] dt);
    private void checkScale(int leadScale);
    public void ToHours();
    public void ToMinutes();
    public void ToSeconds();
    public void Clear();
    public string GetTimeSpanFormatString();
}
public class Dm.DmIntervalYM : object {
    public static byte QUA_Y;
    public static byte QUA_YM;
    public static byte QUA_MO;
    private int leadScale;
    private bool negative;
    private byte type;
    private int years;
    private int months;
    private int scaleForSvr;
    public DmIntervalYM(byte type, bool negative, int year, int month, int scaleForSvr);
    public DmIntervalYM(long months, int leadScale);
    public DmIntervalYM(Byte[] bs, int leadScale);
    public DmIntervalYM(Byte[] bs);
    public DmIntervalYM(string str);
    public DmIntervalYM(string str, int scale);
    private void reset(Byte[] ym);
    private void checkSignAndReset();
    public int GetYear();
    public int GetMonth();
    public byte GetYMType();
    public int GetScaleForSvr();
    public string GetYMString();
    private string formatStrByScale(string str, int scale);
    private string formatStrByDefault(string str);
    public virtual string ToString();
    private void parseStr(string str, int type);
    public Byte[] ConvertStrToBs(int scale);
    private string getAbsValue(string value);
    private void checkScale(int prec);
    public DmIntervalYM convertTo(int scale);
}
internal class Dm.DmLob : object {
    public bool m_inRow;
    public int m_tabid;
    public short m_colid;
    public Byte[] m_rowid;
    public short m_colIndex;
    private long m_bytesLength;
    private long m_length;
    public long m_lobid;
    public short m_data_grpid;
    public short m_data_fileid;
    public int m_data_pageno;
    public short m_rec_grpid;
    public short m_rec_fileid;
    public int m_rec_pageno;
    public bool new_lob_flag;
    public bool long_lob_flag;
    public Byte[] m_Value;
    public Byte[] cur_fileid;
    public Byte[] cur_pageno;
    public Byte[] cur_offset;
    public Byte[] m_totalOffset;
    public bool fromRowSetFlag;
    public bool isUpdated;
    public long offRowLen;
    public bool readOver;
    public bool paramFlag;
    public bool updatAble;
    public byte flag;
    public A Stmt;
    public bool local;
    internal long BytesLength { get; internal set; }
    internal long Length { get; internal set; }
    public DmLob(A statement, Byte[] val, short columnIndex);
    public DmLob(A statement, Byte[] val);
    public DmLob(Byte[] val);
    public void InitLobInfo(A stmt);
    public int getHeadSize();
    public bool IsValueInRow();
    internal long get_BytesLength();
    internal void set_BytesLength(long value);
    internal long get_Length();
    internal void set_Length(long value);
    public void setBlobid(long blobid);
    public void setReadOver(bool readOver);
    public void setGroupid(short groupid);
    public void setFileid(short fileid);
    public void setPageno(int pageno);
    public void setCurFileid(Byte[] fileid);
    public void setCurPageno(Byte[] pageno);
    public void setTotalOffset(Byte[] totalOffset);
}
public enum Dm.DmMppType : Enum {
    public int value__;
    public static DmMppType LOGIN_MPP_LOCAL;
    public static DmMppType LOGIN_MPP_GLOBAL;
}
internal class Dm.DmNotificationTransaction : object {
    internal static Guid RMID;
    internal static Dictionary2`3<string, long, DmConnInstance> TransactionMap;
    private Transaction transaction;
    internal DmNotificationTransaction(Transaction transaction);
    private static DmNotificationTransaction();
    public sealed virtual void Commit(Enlistment enlistment);
    public sealed virtual void InDoubt(Enlistment enlistment);
    public sealed virtual void Prepare(PreparingEnlistment preparingEnlistment);
    public sealed virtual void Rollback(Enlistment enlistment);
}
public class Dm.DmOutLine : object {
    public static void OutLine();
}
public class Dm.DmParameter : DbParameter {
    internal long id;
    internal static long idGenerator;
    [CompilerGeneratedAttribute]
private BaseFilter <FilterHead>k__BackingField;
    [CompilerGeneratedAttribute]
private LogInfo <LogInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RWInfo <RWInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RecoverInfo <RecoverInfo>k__BackingField;
    private static string ClassName;
    private byte m_Prec;
    private byte m_Scale;
    private int m_Size;
    private string m_Name;
    private DbType m_DbType;
    private DmDbType m_DmSqlType;
    private string m_DmSqlTypeName;
    private bool m_IsNullable;
    private string m_SourceCol;
    private string m_pre;
    private object m_value;
    private DataRowVersion m_DataRowVer;
    private ParameterDirection m_Direct;
    private bool m_SourceColumnNullMapping;
    private A m_refCursorStmt;
    private int m_EFParaKind;
    internal bool m_SetDbTypeFlag;
    internal bool m_SetSizeFlag;
    internal bool m_SetPrecFlag;
    internal bool m_SetScaleFlag;
    [CompilerGeneratedAttribute]
private DmParameterCollection <parameterCollection>k__BackingField;
    public long ID { get; }
    public BaseFilter FilterHead { get; public set; }
    public LogInfo LogInfo { get; public set; }
    public RWInfo RWInfo { get; public set; }
    public RecoverInfo RecoverInfo { get; public set; }
    internal DbType do_DbType { get; internal set; }
    internal ParameterDirection do_Direction { get; internal set; }
    internal bool do_IsNullable { get; internal set; }
    internal string do_ParameterName { get; internal set; }
    internal int do_Size { get; internal set; }
    internal string do_SourceColumn { get; internal set; }
    internal bool do_SourceColumnNullMapping { get; internal set; }
    internal DataRowVersion do_SourceVersion { get; internal set; }
    internal object do_Value { get; internal set; }
    internal byte do_Precision { get; internal set; }
    internal byte do_Scale { get; internal set; }
    public DbType DbType { get; public set; }
    public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    public string ParameterName { get; public set; }
    public int Size { get; public set; }
    public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    public DataRowVersion SourceVersion { get; public set; }
    public object Value { get; public set; }
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    internal DmParameterCollection parameterCollection { get; internal set; }
    internal string Pre { get; internal set; }
    internal A refCursorStmt { get; internal set; }
    public int EFParaKind { get; public set; }
    public DmDbType DmSqlType { get; public set; }
    public string DmSqlTypeName { get; public set; }
    public DmParameter(string parameterName, DmDbType parameterType);
    public DmParameter(string parameterName, DmDbType parameterType, ParameterDirection direction);
    public DmParameter(string parameterName, DmDbType parameterType, int size);
    public DmParameter(string parameterName, DmDbType parameterType, int size, string sourceColumn);
    public DmParameter(string parameterName, DmDbType parameterType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    public DmParameter(string parameterName, DmDbType parameterType, int size, string sourceColumn, ParameterDirection direction, bool isNullable, byte precision, byte scale, DataRowVersion sourceVersion, object value);
    public DmParameter(string parameterName, object value);
    private static DmParameter();
    public sealed virtual long get_ID();
    [CompilerGeneratedAttribute]
public sealed virtual BaseFilter get_FilterHead();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterHead(BaseFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual LogInfo get_LogInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LogInfo(LogInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RWInfo get_RWInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RWInfo(RWInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RecoverInfo get_RecoverInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RecoverInfo(RecoverInfo value);
    internal DbType get_do_DbType();
    internal void set_do_DbType(DbType value);
    internal ParameterDirection get_do_Direction();
    internal void set_do_Direction(ParameterDirection value);
    internal bool get_do_IsNullable();
    internal void set_do_IsNullable(bool value);
    internal string get_do_ParameterName();
    internal void set_do_ParameterName(string value);
    internal int get_do_Size();
    internal void set_do_Size(int value);
    internal string get_do_SourceColumn();
    internal void set_do_SourceColumn(string value);
    internal bool get_do_SourceColumnNullMapping();
    internal void set_do_SourceColumnNullMapping(bool value);
    internal DataRowVersion get_do_SourceVersion();
    internal void set_do_SourceVersion(DataRowVersion value);
    internal object get_do_Value();
    internal void set_do_Value(object value);
    internal void do_ResetDbType();
    internal byte get_do_Precision();
    internal void set_do_Precision(byte value);
    internal byte get_do_Scale();
    internal void set_do_Scale(byte value);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual void ResetDbType();
    public virtual byte get_Precision();
    public virtual void set_Precision(byte value);
    public virtual byte get_Scale();
    public virtual void set_Scale(byte value);
    [CompilerGeneratedAttribute]
internal DmParameterCollection get_parameterCollection();
    [CompilerGeneratedAttribute]
internal void set_parameterCollection(DmParameterCollection value);
    internal string get_Pre();
    internal void set_Pre(string value);
    internal A get_refCursorStmt();
    internal void set_refCursorStmt(A value);
    public int get_EFParaKind();
    public void set_EFParaKind(int value);
    public DmDbType get_DmSqlType();
    public void set_DmSqlType(DmDbType value);
    public string get_DmSqlTypeName();
    public void set_DmSqlTypeName(string value);
    private void SetDbTypeFromValue(object value);
    internal string GetParameterName(string name);
    private void CheckSourceVersion(DataRowVersion datarowversion);
    private void CheckParameterDirection(ParameterDirection direction);
    private void CheckParameterDbType(DmDbType parameterType);
    private sealed virtual override object System.ICloneable.Clone();
    public DmParameter Clone();
}
[DefaultMemberAttribute("Item")]
public class Dm.DmParameterCollection : DbParameterCollection {
    internal long id;
    internal static long idGenerator;
    [CompilerGeneratedAttribute]
private BaseFilter <FilterHead>k__BackingField;
    [CompilerGeneratedAttribute]
private LogInfo <LogInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RWInfo <RWInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RecoverInfo <RecoverInfo>k__BackingField;
    private static string ClassName;
    private List`1<DmParameter> InternalList;
    private Dictionary`2<string, int> parameterNameDictionary;
    [CompilerGeneratedAttribute]
private DmCommand <Command>k__BackingField;
    public long ID { get; }
    public BaseFilter FilterHead { get; public set; }
    public LogInfo LogInfo { get; public set; }
    public RWInfo RWInfo { get; public set; }
    public RecoverInfo RecoverInfo { get; public set; }
    internal object do_SyncRoot { get; }
    internal bool do_IsSynchronized { get; }
    internal bool do_IsReadOnly { get; }
    internal bool do_IsFixedSize { get; }
    internal int do_Count { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public int Count { get; }
    internal DmCommand Command { get; internal set; }
    public DbParameter Item { get; public set; }
    public DbParameter Item { get; public set; }
    private static DmParameterCollection();
    public sealed virtual long get_ID();
    [CompilerGeneratedAttribute]
public sealed virtual BaseFilter get_FilterHead();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterHead(BaseFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual LogInfo get_LogInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LogInfo(LogInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RWInfo get_RWInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RWInfo(RWInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RecoverInfo get_RecoverInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RecoverInfo(RecoverInfo value);
    internal object get_do_SyncRoot();
    internal bool get_do_IsSynchronized();
    internal bool get_do_IsReadOnly();
    internal bool get_do_IsFixedSize();
    internal int get_do_Count();
    internal int do_Add(object value);
    internal void do_AddRange(Array values);
    internal void do_Clear();
    internal bool do_Contains(string value);
    internal bool do_Contains(object value);
    internal void do_CopyTo(Array array, int index);
    internal IEnumerator do_GetEnumerator();
    internal int do_IndexOf(object value);
    internal int do_IndexOf(string parameterName);
    internal void do_Insert(int index, object value);
    internal void do_RemoveAt(int index);
    internal void do_Remove(object value);
    internal void do_RemoveAt(string parameterName);
    internal DmParameter do_GetParameter(int index);
    internal DmParameter do_GetParameter(string parameterName);
    internal void do_SetParameter(int index, DmParameter value);
    internal void do_SetParameter(string parameterName, DmParameter value);
    public virtual object get_SyncRoot();
    public virtual bool get_IsSynchronized();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsFixedSize();
    public virtual int get_Count();
    public virtual int Add(object value);
    public virtual void AddRange(Array values);
    public virtual void Clear();
    public virtual bool Contains(string value);
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    public virtual int IndexOf(object value);
    public virtual int IndexOf(string parameterName);
    public virtual void Insert(int index, object value);
    public virtual void RemoveAt(int index);
    public virtual void Remove(object value);
    public virtual void RemoveAt(string parameterName);
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    [CompilerGeneratedAttribute]
internal DmCommand get_Command();
    [CompilerGeneratedAttribute]
internal void set_Command(DmCommand value);
    public DbParameter get_Item(int index);
    public void set_Item(int index, DbParameter value);
    public DbParameter get_Item(string parameterName);
    public void set_Item(string parameterName, DbParameter value);
    private int CheckIndex(int index);
    private object CheckArgument(object value);
    private DmParameter ConvertType(object value);
    private int GetNextIndex();
    private string GetBasename(string name);
    public void ChangeName(DmParameter parameter, string oldname, string newname);
    private void CheckDmDbType(DmDbType dbtype);
    public DmParameter Add(string parameterName, object value);
    public DmParameter Add(string parameterName, DmDbType parameterType);
    public DmParameter Add(string parameterName, DmDbType parameterType, int size);
    public DmParameter Add(string parameterName, DmDbType parameterType, int size, string sourceColumn);
}
internal class Dm.DmParameterInternal : DmField {
    private List`1<DmParamValue> m_Val;
    public int maxValueLen;
    public DmParameterInternal(DmConnInstance conn);
    public bool IsNullable();
    public ParameterDirection GetParameterMode();
    public bool GetInDataBound();
    public void SetInDataBound(bool inDataBound);
    public bool GetOutDataBound();
    public void SetOutDataBound(bool outDataBound);
    public bool GetIsInDataNull(int i);
    public void SetInNull(int i);
    public bool GetIsOutDataNull();
    public void SetOutNull();
    public Byte[] GetInValue(int i);
    public void GetInValue(Byte[]& InValue, int i);
    public void SetInValue(Byte[] inValue, int i);
    public Byte[] GetOutValue();
    public void SetOutValue(Byte[] outValue);
    public void ClearInParam(int i);
    public void ClearOutParam();
    public void SetRegisterParamType(int type);
    public int GetRegisterParamType();
    public bool HasRegisterType();
    public void SetRegisterParamScale(int scale);
    public int GetRegisterParamScale();
    public bool HasRegisterScale();
    public int GetStreamLen(int i);
    public int GetBytes(Byte[]& val, int val_off, int off, int len, int i);
    public List`1<DmParamValue> GetParamValue();
    public int GetSqlType();
    public void SetSqlType(int sqlType);
    public int GetPrec();
    public int GetBindScale();
}
internal class Dm.DmParamValue : object {
    private bool m_InDataBound;
    private bool m_OutDataBound;
    private bool m_IsInDataNull;
    private bool m_IsOutDataNull;
    internal Byte[] m_InValue;
    private Byte[] m_OutValue;
    private bool m_HasRegisterType;
    private int m_RegisterType;
    private bool m_HasRegisterScale;
    private int m_RegisterScale;
    private int m_RowSetType;
    private int m_Length;
    private int m_SqlType;
    private int m_Prec;
    private int m_Scale;
    public bool GetInDataBound();
    public void SetInDataBound(bool inDataBound);
    public bool GetOutDataBound();
    public void SetOutDataBound(bool outDataBound);
    public bool GetIsInDataNull();
    public void SetInNull();
    public bool GetIsOutDataNull();
    public void SetOutNull();
    public Byte[] GetInValue();
    public void GetInValue(Byte[]& InValue);
    public void SetInValue(Byte[] inValue);
    public void SetInValue(Byte[]& inValue);
    public void SetInValue();
    public Byte[] GetOutValue();
    public void SetOutValue(Byte[] outValue);
    public void ClearInParam();
    public void ClearOutParam();
    public void SetRegisterParamType(int type);
    public int GetRegisterParamType();
    public bool HasRegisterType();
    public void SetRegisterParamScale(int scale);
    public int GetRegisterParamScale();
    public bool HasRegisterScale();
    public int GetStreamLen();
    public int GetBytes(Byte[]& val, int val_off, int off, int len);
    public void SetRowsetType(int type);
    public int GetRowSetType();
    public void SetSqlType(int sqlType);
    public int GetSqlType();
    public void SetPrec(int prec);
    public int GetPrec();
    public void SetScale(int scale);
    public int GetScale();
}
internal class Dm.DmPromotableTransaction : object {
    [ThreadStaticAttribute]
private static Stack`1<DmTransactionScope> globalScopeStack;
    private DmConnection connection;
    private Transaction baseTransaction;
    private Stack`1<DmTransactionScope> scopeStack;
    public bool inCommitOrRollback;
    public DmConnection Connection { get; public set; }
    public Transaction BaseTransaction { get; }
    public bool InRollback { get; }
    internal Stack`1<DmTransactionScope> ScopeStack { get; internal set; }
    public DmPromotableTransaction(DmConnection connection, Transaction transaction);
    public DmConnection get_Connection();
    public void set_Connection(DmConnection value);
    public Transaction get_BaseTransaction();
    public bool get_InRollback();
    internal Stack`1<DmTransactionScope> get_ScopeStack();
    internal void set_ScopeStack(Stack`1<DmTransactionScope> value);
    private sealed virtual override void System.Transactions.IPromotableSinglePhaseNotification.Initialize();
    private sealed virtual override Byte[] System.Transactions.ITransactionPromoter.Promote();
    private sealed virtual override void System.Transactions.IPromotableSinglePhaseNotification.Rollback(SinglePhaseEnlistment singlePhaseEnlistment);
    private sealed virtual override void System.Transactions.IPromotableSinglePhaseNotification.SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment);
}
internal class Dm.DmResultSetCache : object {
    private static long CURSOR_BEFORE_ANY;
    private static long CURSOR_AFTER_ANY;
    private A m_Statement;
    private long m_TotalRows;
    private int m_colNum;
    private long m_RowsetPos;
    private long m_Start;
    private long m_RowsNum;
    private int m_Off;
    private Byte[] m_Rows;
    internal bool isRsBdta;
    internal short rsBdtaRowidCol;
    private bool rsBdtaDataRowNext;
    private Int32[] rsBdtaDataRowOffNext;
    private Int32[] rsBdtaDataRowOffCurrent;
    internal Int32[] ids;
    internal Int64[] tss;
    internal DateTime lastCheckDt;
    internal long RowsNum { get; }
    internal long RowsetPos { get; internal set; }
    internal long TotalRows { get; internal set; }
    internal int ColNum { get; internal set; }
    internal A Statement { get; internal set; }
    internal int BytesCount { get; }
    public DmResultSetCache(A stmt, int colNum, long rowCount);
    internal long get_RowsNum();
    internal long get_RowsetPos();
    internal void set_RowsetPos(long value);
    internal long get_TotalRows();
    internal void set_TotalRows(long value);
    internal int get_ColNum();
    internal void set_ColNum(int value);
    internal A get_Statement();
    internal void set_Statement(A value);
    internal int get_BytesCount();
    private void CheckColID(short columnNo);
    public void SetCols(int colNum);
    public void GetBytes(short columnNo, Byte[]& val_buf);
    public Byte[] GetBytes(short columnNo);
    private int getBdtaDataLength(int dtype);
    private int RecGetNthFldAddr(Byte[] rec, int off, short n, Byte[] alen);
    private short RecGetLen(Byte[] rec, int off);
    public void Reset();
    private void ClearLastFetch();
    internal bool FetchNext();
    internal bool FetchPrevious();
    internal bool FetchAbsolute(long npos);
    internal bool FetchRelative(long offset);
    internal bool FetchLast();
    internal bool FetchFirst();
    public void FillRows(long rowPos, int rowNum, Byte[] rowsBuf, bool isRsBdta, short rsBdtaRowidCol);
    public Byte[] GetRecRowid();
    internal long CursorUpdateRow();
}
internal class Dm.DmRowId : object {
    private static Char[] toBase64;
    private static Byte[] fromBase64;
    private static byte BASE64_DECODE_UNDEFINED;
    private static int BYTE_LEN_OLD;
    private static int CHAR_LEN;
    private static int BYTE_LEN_NEW;
    private Byte[] value;
    internal DmRowId(Byte[] bytesValue);
    private static DmRowId();
    public static DmRowId valueOf(Byte[] bytesValue);
    public static DmRowId valueOf(string strValue);
    public static DmRowId valueOf(long longValue);
    public Byte[] getBytes();
    public string toString();
    private static Byte[] parse(string strValue);
    public long longValue(DmConnection conn);
    public Byte[] encode(DmConnection conn);
}
public class Dm.DmRowsCopiedEventArgs : EventArgs {
    private long m_rowsCopied;
    private bool m_abort;
    public long RowsCopied { get; }
    public bool Abort { get; public set; }
    public DmRowsCopiedEventArgs(long rowsCopied);
    public long get_RowsCopied();
    public bool get_Abort();
    public void set_Abort(bool value);
}
public class Dm.DmRowsCopiedEventArgs2 : EventArgs {
    private long m_rowsCopied;
    private bool m_abort;
    public long RowsCopied { get; }
    public bool Abort { get; public set; }
    public DmRowsCopiedEventArgs2(long rowsCopied);
    public long get_RowsCopied();
    public bool get_Abort();
    public void set_Abort(bool value);
}
public class Dm.DmRowsCopiedEventHandler : MulticastDelegate {
    public DmRowsCopiedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DmRowsCopiedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DmRowsCopiedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dm.DmRowsCopiedEventHandler2 : MulticastDelegate {
    public DmRowsCopiedEventHandler2(object object, IntPtr method);
    public virtual void Invoke(object sender, DmRowsCopiedEventArgs2 e);
    public virtual IAsyncResult BeginInvoke(object sender, DmRowsCopiedEventArgs2 e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dm.DmRowUpdatedEventHandler : MulticastDelegate {
    public DmRowUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DmSqlRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DmSqlRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dm.DmRowUpdatingEventHandler : MulticastDelegate {
    public DmRowUpdatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DmSqlRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DmSqlRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dm.DmSavePoint : object {
    public DmSavePoint standby;
    private static string NAME_PREFIX_DEFAULT;
    private static int SEED;
    private int id;
    public string name;
    public bool released;
    private DmConnection conn;
    public DmSavePoint(DmConnection conn, string name);
    public int getSavepointId();
    public string getSavepointName();
    public void release();
}
internal class Dm.DmSchema : object {
    private DmConnection m_Conn;
    public static string MetaCollection;
    public static string DataSourceInfo;
    public static string Databases;
    public DmSchema(DmConnection conn);
    public DataTable GetSchema(string collection, String[] restrictionValues);
    private string dup_chr_QUOTATION_MARK(string srcsource);
    public virtual DataTable GetTables(String[] restrictions);
    public virtual DataTable GetProcedures(String[] restrictions);
    public virtual DataTable GetParameters(String[] restrictions);
    private void LoadProcedureParameters(DataTable dt, string schema, string procedureName, string parameterRestriction);
    protected virtual DataTable GetCollections();
    private DataTable GetDataSourceInformation();
    private static void DataTypesGenCols(DataTable dt);
    private static void DataTypesAddRow(DataTable dt, string TypeName, int ProviderDbType, long ColumnSize, string CreateFormat, string CreateParameters, string DataType, bool IsAutoincrementable, bool IsBestMatch, bool IsCaseSensitive, bool IsFixedLength, bool IsFixedPrecisionScale, bool IsLong, bool IsNullable, bool IsSearchable, bool IsSearchableWithLike, object IsUnsigned, object MaximumScale, object MinimumScale, bool IsConcurrencyType, object IsLiteralsSupported, string LiteralPrefix, string LiteralSuffix, string NativeDataType);
    private static DataTable GetDataTypes();
    protected virtual DataTable GetRestrictions();
    private DataTable GetReservedWords();
    public virtual DataTable GetSchemas(String[] restrictions);
    public virtual DataTable GetForeignKeys(String[] restrictions);
    public void LoadTableForeignkeys(DataTable dt, string schname, string tabname, string fkname);
    public virtual DataTable GetUsers(String[] restrictions);
    public virtual DataTable GetColumns(String[] restrictions);
    private void LoadTableColumns(DataTable dt, string schema, string tableName, string columnRestriction);
    public virtual DataTable GetIndexes(String[] restrictions);
    public virtual DataTable GetPrimaryKeys(String[] restrictions);
    public virtual DataTable GetIndexColumns(String[] restrictions);
    private DataTable GetSchemaInner(string collection, String[] restrictions);
    private static String[] CleanRestrictions(String[] restrictionValues);
    private static string GetString(DmDataReader reader, int index);
    private static void FillTable(DataTable dt, Object[][] data);
    private static bool IsEscape(string str);
}
internal class Dm.DmSetValue : object {
    private string m_ServerEncoding;
    private A m_Statement;
    internal DmConnProperty ConnProperty { get; }
    public DmSetValue(string servEncoding);
    public DmSetValue(string servEncoding, A stmt);
    internal DmConnProperty get_ConnProperty();
    public void ChangeSetValue(string servEncoding, A stmt);
    public void SetNull(DmParamValue paraVal);
    private void SetBoolean(DmParamValue paraVal, bool x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetByte(DmParamValue paraVal, sbyte x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetShort(DmParamValue paraVal, short x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetInt(DmParamValue paraVal, int x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetLong(DmParamValue paraVal, long x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetUShort(DmParamValue paraVal, ushort x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetUByte(DmParamValue paraVal, byte x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetUInt(DmParamValue paraVal, UInt32 x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetULong(DmParamValue paraVal, ulong x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetFloat(DmParamValue paraVal, float x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetDouble(DmParamValue paraVal, double x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetDmDecimal(DmParamValue paraVal, DmXDec x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetBigDecimal(DmParamValue paraVal, Nullable`1<decimal> x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetString(DmParamValue paraVal, string x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    internal string ReplaceNumPoint(string x);
    public void SetINTERVALYM(DmParamValue paraVal, DmIntervalYM ym, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    public void SetINTERVALDT(DmParamValue paraVal, DmIntervalDT dt, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetBytes(DmParamValue paraVal, Byte[] x, int cType, int prec, int scale, byte typeFlag);
    private void SetDate(DmParamValue paraVal, DateTime x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetTime(DmParamValue paraVal, DateTime x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    public void SetTime(DmParamValue paraVal, DmTime t, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetTimestamp(DmParamValue paraVal, DateTime x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetTimeTZ(DmParamValue paraVal, DateTimeOffset x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetTimestampTZ(DmParamValue paraVal, DateTimeOffset x, int cType, int prec, int scale, byte typeFlag, DmParameterInternal paraInternal);
    private void SetArray(DmParamValue paraVal, Array x, DmConnection conn, string typeName, int cType, DmParameterInternal paraInternal);
    public void SetObject(DmParamValue paraVal, object x, DmConnection conn, string typeName, int cType, DmParameterInternal paraInternal);
    private string fixDecString(string val, int prec, int scale, int signNum);
    private Byte[] decStringToBcd(string decString);
    internal void ResetCTypeIfUnknown(DmParameterInternal paraInternal);
}
internal class Dm.DmSqlType : object {
    internal static string VERSION;
    internal static string BUILD_TIME;
    internal static string DATABASE_PRODUCT_VERSION;
    internal static int CHAR;
    internal static int VARCHAR2;
    internal static int VARCHAR;
    internal static int BIT;
    internal static int TINYINT;
    internal static int SMALLINT;
    internal static int INT;
    internal static int BIGINT;
    internal static int DECIMAL;
    internal static int REAL;
    internal static int DOUBLE;
    internal static int BLOB;
    internal static int BOOLEAN;
    internal static int DATE;
    internal static int TIME;
    internal static int DATETIME;
    internal static int BINARY;
    internal static int VARBINARY;
    internal static int CLOB;
    internal static int INTERVAL_YM;
    internal static int INTERVAL_DT;
    internal static int TIME_TZ;
    internal static int DATETIME_TZ;
    internal static int DEC_INT64;
    internal static int NULL;
    internal static int DATETIME2;
    internal static int DATETIME2_TZ;
    internal static int ROWID;
    internal static int ANY;
    internal static int STAR_ALL;
    internal static int STAR;
    internal static int RECORD;
    internal static int TYPE;
    internal static int TYPE_REF;
    internal static int UNKNOWN;
    internal static int INTERVAL_YEAR;
    internal static int INTERVAL_YEAR_TO_MONTH;
    internal static int INTERVAL_MONTH;
    internal static int INTERVAL_DAY;
    internal static int INTERVAL_DAY_TO_HOUR;
    internal static int INTERVAL_DAY_TO_MIMUTE;
    internal static int INTERVAL_DAY_TO_SECOND;
    internal static int INTERVAL_HOUR;
    internal static int INTERVAL_HOUR_TO_MIMUTE;
    internal static int INTERVAL_HOUR_TO_SECOND;
    internal static int INTERVAL_MIMUTE;
    internal static int INTERVAL_MIMUTE_TO_SECOND;
    internal static int INTERVAL_SECOND;
    internal static int ARRAY;
    internal static int CLASS;
    internal static int PCURSOR;
    internal static int PLTYPE_RECORD;
    internal static int SARRAY;
    internal static int CURSOR_ORACLE;
    internal static int MAX_STRING_LEN;
    internal static int BIT_PREC;
    internal static int TINYINT_PREC;
    internal static int SMALLINT_PREC;
    internal static int INT_PREC;
    internal static int BIGINT_PREC;
    internal static int REAL_PREC;
    internal static int DOUBLE_PREC;
    internal static int DATE_PREC;
    internal static int TIME_PREC;
    internal static int DATETIME_PREC;
    internal static int DATETIME2_PREC;
    internal static int TIME_TZ_PREC;
    internal static int DATETIME_TZ_PREC;
    internal static int DATETIME2_TZ_PREC;
    internal static int INTERVAL_YM_PREC;
    internal static int INTERVAL_DT_PREC;
    internal static int DEC_INT64_PREC;
    internal static int VARCHAR_PREC;
    internal static int VARBINARY_PREC;
    internal static int BLOB_PREC;
    internal static int CLOB_PREC;
    internal static int CLASS_PREC;
    internal static int CURSOR_PREC;
    internal static int NULL_PREC;
    internal static int BFILE_PREC;
    internal static int CURRENCY_PREC;
    internal static int ROWID_PREC;
    internal static int BFILE_SCALE;
    internal static int COMPLEX_SCALE;
    internal static int CURRENCY_SCALE;
    internal static int LOCAL_DATETIME_SCALE_MASK;
    internal static int FLOAT_SCALE_MASK;
    internal static int ORACLE_FLOAT_SCALE_MASK;
    internal static int ORACLE_DATE_SCALE_MASK;
    internal static bool IsComplexType(int type, int scale);
    internal static bool isFloat(int type, int scale);
    public static int getFloatPrec(int type, int prec);
    public static int getFloatScale(int type, int scale);
    internal static int TypeNameToCType(string typeName);
    internal static Type CTypeToSystemType(int cType, int prec, DmConnProperty connProperty);
    internal static Type CTypeToSystemType(int cType, int prec, int scale, DmConnProperty connProperty);
    internal static Type CTypeToSystemTypeInner(int cType);
    internal static DbType DmSqlTypeToDbType(DmDbType sqlType);
    internal static DmDbType DbTypeToDmSqlType(DbType dbType);
    internal static Type DbTypeToType(DbType dbType);
    internal static DbType DbTypeFromObject(object x);
    internal static DmDbType CTypeToDmDbType(int cType);
    internal static int GetSizeByCType(int cType, int cPrec);
    internal static string IntervalDTtypeToName(int scale);
    internal static bool DtypeIsFixedLow(int dtype);
    internal static int DtypeGetInternalLenLow(int dtype, int len);
}
internal class Dm.DmSqlTypeInfo : object {
    internal int _cType;
    public DmSqlTypeInfo(int cType, string Name, DmDbType DmDbType, DbType DbType, Type Type);
}
public class Dm.DmStringUtil : object {
    public static string GetEscObjName(string name);
    public static string GetEscStringName(string name);
    public static string ReplaceReservedWords(string src, String[] ResveredList);
}
public class Dm.DmStruct : ComplexTypeData {
    internal ComplexTypeDesc m_strctDesc;
    internal ComplexTypeData[] m_attribs;
    internal int m_objCount;
    internal int m_strCount;
    internal Dictionary`2<string, object> Dict;
    public DmStruct(ComplexTypeData[] atData, ComplexTypeDesc desc);
    public DmStruct(ComplexTypeDesc desc, DmConnection conn, Object[] objArr);
    public DmStruct(ComplexTypeDesc desc, DmConnection conn, Dictionary`2<string, object> dict);
    public ComplexTypeData[] getAttribsTypeData();
    public string getSQLTypeName();
    public Object[] getAttributes();
    public Dictionary`2<string, object> GetIndexTable();
    public ComplexTypeDesc getDesc();
    public static DmStruct newInstanceOfLocal(ComplexTypeDesc desc, Object[] objArr);
}
internal class Dm.DmSysTypeConvertion : object {
    internal static string StringConvertion(string val, DmParameter param);
    internal static decimal DecimalConvertion(decimal dec, DmParameter param);
    internal static object TypeConvertion(DmParameter param);
}
public class Dm.DmTime : object {
    public static int DMDT_HOUR_POS;
    public static int DMDT_HOUR_LEN;
    public static int DMDT_MIN_POS;
    public static int DMDT_MIN_LEN;
    public static int DMDT_SEC_POS;
    public static int DMDT_SEC_LEN;
    public static int DMDT_MSEC_POS;
    public static int DMDT_MSEC_LEN;
    private Byte[] m_Times;
    private int prec;
    public DmTime(Byte[] bt);
    public DmTime(DateTime dt, int prec, int scale, short mTimeZone);
    public Byte[] GetByteArrayValue();
    public Byte[] GetTzByteArrayValue();
    public byte GetHour();
    public byte GetMinute();
    public byte GetSecond();
    public int GetNano();
    public short GetTZ();
    public string GetTimeWithoutNano();
    public string GetTimeWithNano();
    public virtual string ToString();
    public static Byte[] TimeTzEncodeFast(Byte[] dt);
    public static Byte[] TimeTzEncodeFast(Int32[] dt);
    public static Byte[] TimeTzEncodeFast(DateTime dt, short mTimeZone);
    public static Byte[] TimeEncodeFast(Int32[] dt);
    public static Byte[] TimeEncodeFast(Byte[] dt);
    public static Byte[] TimeEncodeFast(DateTime dt);
}
public class Dm.DmTrace : object {
    private static string ClassName;
    private static TraceLevel level;
    private static bool to_file;
    private static string path;
    private static string pathBase;
    private static object fileused;
    public static bool To_file { get; public set; }
    public static TraceLevel Level { get; public set; }
    private static DmTrace();
    public static bool get_To_file();
    public static void set_To_file(bool value);
    public static TraceLevel get_Level();
    public static void set_Level(TraceLevel value);
    protected static void WriteIntoFile(Byte[] info);
    protected static void WriteIntoFile(Byte[] info, int thd);
    internal static void TracePropertySet(TraceLevel lev, string ClassName, string PropertyName);
    internal static void TracePropertyGet(TraceLevel lev, string ClassName, string PropertyName);
    internal static void TraceMethodEnter(TraceLevel lev, string ClassName, string MethodName);
    public static void TracePrint(string str);
    public static void TracePrintStack(string usrString);
    public static void TracePrintStack();
}
public class Dm.DmTransaction : DbTransaction {
    internal long id;
    internal static long idGenerator;
    [CompilerGeneratedAttribute]
private BaseFilter <FilterHead>k__BackingField;
    [CompilerGeneratedAttribute]
private LogInfo <LogInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RWInfo <RWInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RecoverInfo <RecoverInfo>k__BackingField;
    private A m_stmt;
    private DmConnInstance m_ConnInst;
    private bool m_AlreadyDisposed;
    private bool m_StmtSerial;
    private IsolationLevel m_il;
    private bool m_Valid;
    public long ID { get; }
    public BaseFilter FilterHead { get; public set; }
    public LogInfo LogInfo { get; public set; }
    public RWInfo RWInfo { get; public set; }
    public RecoverInfo RecoverInfo { get; public set; }
    internal IsolationLevel do_IsolationLevel { get; }
    internal DmConnection do_DbConnection { get; }
    public IsolationLevel IsolationLevel { get; }
    protected DbConnection DbConnection { get; }
    internal A Stmt { get; internal set; }
    public bool Valid { get; public set; }
    internal DmTransaction(DmConnInstance connInst);
    internal DmTransaction(DmConnInstance connInst, IsolationLevel il);
    public sealed virtual long get_ID();
    [CompilerGeneratedAttribute]
public sealed virtual BaseFilter get_FilterHead();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterHead(BaseFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual LogInfo get_LogInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LogInfo(LogInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RWInfo get_RWInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RWInfo(RWInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RecoverInfo get_RecoverInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RecoverInfo(RecoverInfo value);
    internal IsolationLevel get_do_IsolationLevel();
    internal DmConnection get_do_DbConnection();
    internal void do_Commit();
    internal void do_Rollback();
    internal void do_Dispose(bool disposing);
    internal DmSavePoint do_Save(string savepointName);
    internal void do_Rollback(string savepointName);
    internal void do_Release(string savepointName);
    public virtual IsolationLevel get_IsolationLevel();
    protected virtual DbConnection get_DbConnection();
    public virtual void Commit();
    public virtual void Rollback();
    protected virtual void Dispose(bool disposing);
    public void Dispose(bool disposing, bool for_ef);
    public void Dispose();
    internal void SetStmtSerial(int level);
    public bool GetStmtSerial();
    internal A get_Stmt();
    internal void set_Stmt(A value);
    public void set_Valid(bool value);
    public bool get_Valid();
    private void CheckValid();
    private void CheckTransactionStatus();
    public void Clear();
}
internal class Dm.DmTransactionScope : object {
    private DmConnection conn;
    private Transaction baseTransaction;
    private DmTransaction simpleTransaction;
    private int rollbackThreadId;
    internal DmConnInstance enListConnInst;
    public DmConnection Conn { get; public set; }
    public Transaction BaseTransaction { get; public set; }
    public DmTransaction SimpleTransaction { get; public set; }
    public int RollbackThreadId { get; public set; }
    public DmTransactionScope(DmConnection connection, Transaction transaction, DmTransaction simpleTransaction);
    public DmConnection get_Conn();
    public void set_Conn(DmConnection value);
    public Transaction get_BaseTransaction();
    public void set_BaseTransaction(Transaction value);
    public DmTransaction get_SimpleTransaction();
    public void set_SimpleTransaction(DmTransaction value);
    public int get_RollbackThreadId();
    public void set_RollbackThreadId(int value);
    public void Rollback(SinglePhaseEnlistment singlePhaseEnlistment);
    public void SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment);
}
internal class Dm.Dmxdec : object {
    private byte sign;
    private byte ndigits;
    private byte rscale;
    private short weight;
    private byte len;
    private Byte[] value;
    public Byte[] GetValue();
    public byte GetLen();
    public static int xdec_from_char(IntPtr xdec, string str, UInt32 len);
}
public class Dm.DmXDec : object {
    private static int XDEC_TEMPBUF_SIZE;
    private static int XDEC_POSITIVE;
    private static int XDEC_NEGTIVE;
    private static int XDEC_NEGTIVE_NUM;
    private static int XDEC_SIGN_POSITIVE;
    private static int XDEC_SIGN_NEGTIVE;
    private static int XDEC_MAX_LEN;
    private int n;
    private int m;
    private int m_sign;
    private int m_exp;
    private string m_strInt;
    private string m_strDec;
    private int m_max_len;
    private Byte[] m_b;
    internal DmXDec(Byte[] b);
    private string checkStr(string strOrg, int prec, int scale);
    private string setSign(string strOrg);
    private string rmvUnnecessaryZeros(string strOrg);
    private void setDecInt(string strRet);
    private bool checkZero(string strRet);
    private bool checkZero2(string strRet);
    private int cntZeroEnd(string strInt);
    private int cntZeroStart(string strDec);
    private Byte[] processStrInt();
    private Byte[] processStrDec();
    private byte fixFlag();
    private Byte[] fixDec(byte flag, Byte[] btBefore, Byte[] btAfter);
    private Byte[] fixDec(Byte[]& Ret, byte flag, Byte[] btBefore, Byte[] btAfter);
    private Byte[] fixZero();
    private void fixZero(Byte[]& ret);
    private string setExp(string strOrg);
    private void checkOverFlow();
    private void processExp();
    private void setMN();
    private void checkMaxLen();
    internal Byte[] StrToDec(string str, int prec, int scal, bool dmxdec_direct);
    internal void StrToDec(Byte[]& ret, string str, int prec, int scal, bool dmxdec_direct);
    internal string decToString(Byte[] arr);
    public DmXDec Parse(string s);
    public virtual string ToString();
}
public class Dm.DocClass : object {
    private string m_Name;
    private string m_Syntax;
    private string m_Note;
    private Dictionary`2<MethodInfo, List`1<string>> m_Method;
    public string Name { get; public set; }
    unknown string Syntax {public set; }
    unknown string Note {public set; }
    public Dictionary`2<MethodInfo, List`1<string>> Method { get; }
    public string get_Name();
    public void set_Name(string value);
    public void set_Syntax(string value);
    public void set_Note(string value);
    public Dictionary`2<MethodInfo, List`1<string>> get_Method();
    public sealed virtual void ToHtml();
}
public class Dm.DocDelegate : object {
    private string m_DeleName;
    private string m_Syntax;
    private string m_Parameter;
    private string m_Note;
    unknown string DeleName {public set; }
    unknown string Syntax {public set; }
    unknown string Parameter {public set; }
    unknown string Note {public set; }
    public void set_DeleName(string value);
    public void set_Syntax(string value);
    public void set_Parameter(string value);
    public void set_Note(string value);
    public sealed virtual void ToHtml();
}
public class Dm.DocEntry : object {
    private string m_MainDesc;
    private Dictionary`2<Type, List`1<string>> m_Class;
    private Dictionary`2<Type, List`1<string>> m_Delegates;
    private Dictionary`2<Type, List`1<string>> m_Enum;
    unknown string MainDesc {public set; }
    public Dictionary`2<Type, List`1<string>> Class { get; }
    public Dictionary`2<Type, List`1<string>> Delegate { get; }
    public Dictionary`2<Type, List`1<string>> Enum { get; }
    public void set_MainDesc(string value);
    public Dictionary`2<Type, List`1<string>> get_Class();
    public Dictionary`2<Type, List`1<string>> get_Delegate();
    public Dictionary`2<Type, List`1<string>> get_Enum();
    public sealed virtual void ToHtml();
}
public class Dm.DocEnum : object {
    private string m_EnumName;
    private string m_Syntax;
    private string m_Member;
    unknown string EnumName {public set; }
    unknown string Syntax {public set; }
    unknown string Member {public set; }
    public void set_EnumName(string value);
    public void set_Syntax(string value);
    public void set_Member(string value);
    public sealed virtual void ToHtml();
}
public class Dm.DocMethod : object {
    private string m_MethodName;
    private string m_Syntax;
    private string m_Exception;
    private string m_Note;
    unknown string MethodName {public set; }
    unknown string Syntax {public set; }
    unknown string ExceptionInfo {public set; }
    unknown string Note {public set; }
    public void set_MethodName(string value);
    public void set_Syntax(string value);
    public void set_ExceptionInfo(string value);
    public void set_Note(string value);
    public sealed virtual void ToHtml();
}
internal class Dm.EP : object {
    internal string host;
    internal int port;
    internal bool alive;
    internal DateTime statusRefreshTs;
    internal int serverMode;
    internal int serverStatus;
    internal bool dscControl;
    internal int sort;
    internal static TimeSpan STATUS_VALID_TIME;
    internal static int SORT_SERVER_MODE_INVALID;
    internal static int SORT_SERVER_NOT_ALIVE;
    internal static int SORT_UNKNOWN;
    internal static int SORT_NORMAL;
    internal static int SORT_PRIMARY;
    internal static int SORT_STANDBY;
    internal static int SORT_OPEN;
    internal static int SORT_MOUNT;
    internal static int SORT_SUSPEND;
    internal int epSeqno;
    internal static int EP_STATUS_OK;
    internal static int EP_STATUS_ERROR;
    internal int epStatus;
    public EP(string host, int port);
    private static EP();
    internal int getSort(bool checkTime);
    private int calcSort(int loginMode);
    private void refreshStatus(bool alive, DmConnection conn);
    public void connect(DmConnection conn);
    public static string getServerStatusDesc(int serverStatus);
    public static string getServerModeDesc(int serverMode);
    public virtual string ToString();
}
internal class Dm.EPGroup : object {
    private ILogger LOG;
    internal string name;
    internal List`1<EP> epList;
    private WellDistributeSelector wellSelection;
    private HeadFirstSelector headFirstSelection;
    internal static int CLUSTER_TYPE_NORMAL;
    internal static int CLUSTER_TYPE_RW;
    internal static int CLUSTER_TYPE_DW;
    internal static int CLUSTER_TYPE_DSC;
    internal static int CLUSTER_TYPE_MPP;
    internal string Name { get; internal set; }
    internal EPGroup(List`1<EP> serverList);
    internal string get_Name();
    internal void set_Name(string value);
    public EPSelector getDbSelection(DmConnection conn);
    public void connect(DmConnection conn);
    private void traverseServerList(EP[] epList, DmConnection conn, bool firstTime, bool lastTime);
}
internal abstract class Dm.EPSelector : object {
    protected EP[] dbs;
    internal EPSelector(List`1<EP> serverList);
    public abstract virtual EP[] sortDBList(bool firstTime);
    public abstract virtual bool checkServerMode(bool lastTime, DmConnection conn);
}
public class Dm.filter.BaseFilter : object {
    public BaseFilter Next;
    internal static void CreateFilterChain(IFilterInfo filterInfo, DmConnProperty connProperty);
    public virtual string getServerVersion(DmConnection conn);
    public virtual string getDataSource(DmConnection conn);
    public virtual string getDatabase(DmConnection conn);
    public virtual int getConnectionTimeout(DmConnection conn);
    public virtual string getConnectionString(DmConnection conn);
    public virtual DbProviderFactory getDbProviderFactory(DmConnection conn);
    public virtual ConnectionState getState(DmConnection conn);
    public virtual void ChangeDatabase(DmConnection conn, string databaseName);
    public virtual DmTransaction BeginDbTransaction(DmConnection conn, IsolationLevel isolationLevel);
    public virtual DmCommand CreateDbCommand(DmConnection conn);
    public virtual void Close(DmConnection conn);
    public virtual void EnlistTransaction(DmConnection conn, Transaction transaction);
    public virtual DataTable GetSchema(DmConnection conn);
    public virtual DataTable GetSchema(DmConnection conn, string collectionName, String[] restrictionValues);
    public virtual DataTable GetSchema(DmConnection conn, string collectionName);
    public virtual void Open(DmConnection conn);
    public virtual DmStruct CreateStruct(DmConnection conn, string typeName, Object[] attributes);
    public virtual DmArray CreateArray(DmConnection conn, string typeName, Object[] elements);
    public virtual DmStruct CreateIndexTable(DmConnection conn, string typeName, Dictionary`2<string, object> dictionary);
    public virtual bool getDesignTimeVisible(DmCommand command);
    public virtual void setDesignTimeVisible(DmCommand command, bool value);
    public virtual CommandType getCommandType(DmCommand command);
    public virtual void setCommandType(DmCommand command, CommandType value);
    public virtual int getCommandTimeout(DmCommand command);
    public virtual void setCommandTimeout(DmCommand command, int value);
    public virtual string getCommandText(DmCommand command);
    public virtual void setCommandText(DmCommand command, string value);
    public virtual UpdateRowSource getUpdatedRowSource(DmCommand command);
    public virtual void setUpdatedRowSource(DmCommand command, UpdateRowSource value);
    public virtual DmConnection getDbConnection(DmCommand command);
    public virtual void setDbConnection(DmCommand command, DmConnection value);
    public virtual DmParameterCollection getDbParameterCollection(DmCommand command);
    public virtual DmTransaction getDbTransaction(DmCommand command);
    public virtual void setDbTransaction(DmCommand command, DmTransaction value);
    public virtual void Cancel(DmCommand command);
    public virtual int ExecuteNonQuery(DmCommand command);
    public virtual object ExecuteScalar(DmCommand command);
    public virtual void Prepare(DmCommand command);
    public virtual DmParameter CreateDbParameter(DmCommand command);
    public virtual DmDataReader ExecuteDbDataReader(DmCommand command, CommandBehavior behavior);
    public virtual long getExecuteId(DmCommand command);
    public virtual IsolationLevel getIsolationLevel(DmTransaction transaction);
    public virtual DmConnection getDbConnection(DmTransaction transaction);
    public virtual void Commit(DmTransaction transaction);
    public virtual void Rollback(DmTransaction transaction);
    public virtual void Dispose(DmTransaction transaction, bool disposing);
    public virtual void Save(DmTransaction transaction, string savepointName);
    public virtual void Rollback(DmTransaction transaction, string savepointName);
    public virtual void Release(DmTransaction transaction, string savepointName);
    public virtual object getThis(DmDataReader dataReader, int index);
    public virtual object getThis(DmDataReader dataReader, string name);
    public virtual int getDepth(DmDataReader dataReader);
    public virtual bool getHasRows(DmDataReader dataReader);
    public virtual int getVisibleFieldCount(DmDataReader dataReader);
    public virtual int getRecordsAffected(DmDataReader dataReader);
    public virtual bool getIsClosed(DmDataReader dataReader);
    public virtual int getFieldCount(DmDataReader dataReader);
    public virtual void Close(DmDataReader dataReader);
    public virtual bool GetBoolean(DmDataReader dataReader, int ordinal);
    public virtual byte GetByte(DmDataReader dataReader, int ordinal);
    public virtual long GetBytes(DmDataReader dataReader, int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(DmDataReader dataReader, int ordinal);
    public virtual long GetChars(DmDataReader dataReader, int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetDataTypeName(DmDataReader dataReader, int ordinal);
    public virtual DateTime GetDateTime(DmDataReader dataReader, int ordinal);
    public virtual decimal GetDecimal(DmDataReader dataReader, int ordinal);
    public virtual double GetDouble(DmDataReader dataReader, int ordinal);
    public virtual IEnumerator GetEnumerator(DmDataReader dataReader);
    public virtual Type GetFieldType(DmDataReader dataReader, int ordinal);
    public virtual float GetFloat(DmDataReader dataReader, int ordinal);
    public virtual Guid GetGuid(DmDataReader dataReader, int ordinal);
    public virtual short GetInt16(DmDataReader dataReader, int ordinal);
    public virtual int GetInt32(DmDataReader dataReader, int ordinal);
    public virtual long GetInt64(DmDataReader dataReader, int ordinal);
    public virtual string GetName(DmDataReader dataReader, int ordinal);
    public virtual int GetOrdinal(DmDataReader dataReader, string name);
    public virtual Type GetProviderSpecificFieldType(DmDataReader dataReader, int ordinal);
    public virtual object GetProviderSpecificValue(DmDataReader dataReader, int ordinal);
    public virtual int GetProviderSpecificValues(DmDataReader dataReader, Object[] values);
    public virtual DataTable GetSchemaTable(DmDataReader dataReader);
    public virtual string GetString(DmDataReader dataReader, int ordinal);
    public virtual object GetValue(DmDataReader dataReader, int ordinal);
    public virtual int GetValues(DmDataReader dataReader, Object[] values);
    public virtual bool IsDBNull(DmDataReader dataReader, int ordinal);
    public virtual bool NextResult(DmDataReader dataReader);
    public virtual bool Read(DmDataReader dataReader);
    public virtual void Dispose(DmDataReader dataReader, bool disposing);
    public virtual DmDataReader GetDbDataReader(DmDataReader dataReader, int ordinal);
    public virtual object getSyncRoot(DmParameterCollection parameterCollection);
    public virtual bool getIsSynchronized(DmParameterCollection parameterCollection);
    public virtual bool getIsReadOnly(DmParameterCollection parameterCollection);
    public virtual bool getIsFixedSize(DmParameterCollection parameterCollection);
    public virtual int getCount(DmParameterCollection parameterCollection);
    public virtual int Add(DmParameterCollection parameterCollection, object value);
    public virtual void AddRange(DmParameterCollection parameterCollection, Array values);
    public virtual void Clear(DmParameterCollection parameterCollection);
    public virtual bool Contains(DmParameterCollection parameterCollection, object value);
    public virtual bool Contains(DmParameterCollection parameterCollection, string value);
    public virtual void CopyTo(DmParameterCollection parameterCollection, Array array, int index);
    public virtual IEnumerator GetEnumerator(DmParameterCollection parameterCollection);
    public virtual int IndexOf(DmParameterCollection parameterCollection, object value);
    public virtual int IndexOf(DmParameterCollection parameterCollection, string parameterName);
    public virtual void Insert(DmParameterCollection parameterCollection, int index, object value);
    public virtual void Remove(DmParameterCollection parameterCollection, object value);
    public virtual void RemoveAt(DmParameterCollection parameterCollection, string parameterName);
    public virtual void RemoveAt(DmParameterCollection parameterCollection, int index);
    public virtual DmParameter GetParameter(DmParameterCollection parameterCollection, string parameterName);
    public virtual DmParameter GetParameter(DmParameterCollection parameterCollection, int index);
    public virtual void SetParameter(DmParameterCollection parameterCollection, int index, DmParameter value);
    public virtual void SetParameter(DmParameterCollection parameterCollection, string parameterName, DmParameter value);
    public virtual DbType getDbType(DmParameter parameter);
    public virtual void setDbType(DmParameter parameter, DbType value);
    public virtual ParameterDirection getDirection(DmParameter parameter);
    public virtual void setDirection(DmParameter parameter, ParameterDirection value);
    public virtual bool getIsNullable(DmParameter parameter);
    public virtual void setIsNullable(DmParameter parameter, bool value);
    public virtual string getParameterName(DmParameter parameter);
    public virtual void setParameterName(DmParameter parameter, string value);
    public virtual byte getPrecision(DmParameter parameter);
    public virtual void setPrecision(DmParameter parameter, byte value);
    public virtual byte getScale(DmParameter parameter);
    public virtual void setScale(DmParameter parameter, byte value);
    public virtual int getSize(DmParameter parameter);
    public virtual void setSize(DmParameter parameter, int value);
    public virtual string getSourceColumn(DmParameter parameter);
    public virtual void setSourceColumn(DmParameter parameter, string value);
    public virtual bool getSourceColumnNullMapping(DmParameter parameter);
    public virtual void setSourceColumnNullMapping(DmParameter parameter, bool value);
    public virtual DataRowVersion getSourceVersion(DmParameter parameter);
    public virtual void setSourceVersion(DmParameter parameter, DataRowVersion value);
    public virtual object getValue(DmParameter parameter);
    public virtual void setValue(DmParameter parameter, object value);
    public virtual void ResetDbType(DmParameter parameter);
    public virtual int getUpdateBatchSize(DmDataAdapter dataAdapter);
    public virtual void setUpdateBatchSize(DmDataAdapter dataAdapter, int value);
    public virtual int AddToBatch(DmDataAdapter dataAdapter, DmCommand command);
    public virtual void ClearBatch(DmDataAdapter dataAdapter);
    public virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DmDataAdapter dataAdapter, DataRow dataRow, DmCommand command, StatementType statementType, DataTableMapping tableMapping);
    public virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DmDataAdapter dataAdapter, DataRow dataRow, DmCommand command, StatementType statementType, DataTableMapping tableMapping);
    public virtual int ExecuteBatch(DmDataAdapter dataAdapter);
    public virtual int Fill(DmDataAdapter dataAdapter, DataTable[] dataTables, int startRecord, int maxRecords, DmCommand command, CommandBehavior behavior);
    public virtual int Fill(DmDataAdapter dataAdapter, DataTable dataTable, DmCommand command, CommandBehavior behavior);
    public virtual int Fill(DmDataAdapter dataAdapter, DataSet dataSet, int startRecord, int maxRecords, string srcTable, DmCommand command, CommandBehavior behavior);
    public virtual DataTable FillSchema(DmDataAdapter dataAdapter, DataTable dataTable, SchemaType schemaType, DmCommand command, CommandBehavior behavior);
    public virtual DataTable[] FillSchema(DmDataAdapter dataAdapter, DataSet dataSet, SchemaType schemaType, DmCommand command, string srcTable, CommandBehavior behavior);
    public virtual IDataParameter GetBatchedParameter(DmDataAdapter dataAdapter, int commandIdentifier, int parameterIndex);
    public virtual bool GetBatchedRecordsAffected(DmDataAdapter dataAdapter, int commandIdentifier, Int32& recordsAffected, Exception& error);
    public virtual void InitializeBatching(DmDataAdapter dataAdapter);
    public virtual void OnRowUpdated(DmDataAdapter dataAdapter, RowUpdatedEventArgs value);
    public virtual void OnRowUpdating(DmDataAdapter dataAdapter, RowUpdatingEventArgs value);
    public virtual void TerminateBatching(DmDataAdapter dataAdapter);
    public virtual int Update(DmDataAdapter dataAdapter, DataRow[] dataRows, DataTableMapping tableMapping);
    public virtual string getQuoteSuffix(DmCommandBuilder commandBuilder);
    public virtual void setQuoteSuffix(DmCommandBuilder commandBuilder, string value);
    public virtual string getQuotePrefix(DmCommandBuilder commandBuilder);
    public virtual void setQuotePrefix(DmCommandBuilder commandBuilder, string value);
    public virtual string getCatalogSeparator(DmCommandBuilder commandBuilder);
    public virtual void setCatalogSeparator(DmCommandBuilder commandBuilder, string value);
    public virtual CatalogLocation getCatalogLocation(DmCommandBuilder commandBuilder);
    public virtual void setCatalogLocation(DmCommandBuilder commandBuilder, CatalogLocation value);
    public virtual ConflictOption getConflictOption(DmCommandBuilder commandBuilder);
    public virtual void setConflictOption(DmCommandBuilder commandBuilder, ConflictOption value);
    public virtual string getSchemaSeparator(DmCommandBuilder commandBuilder);
    public virtual void setSchemaSeparator(DmCommandBuilder commandBuilder, string value);
    public virtual string QuoteIdentifier(DmCommandBuilder commandBuilder, string unquotedIdentifier);
    public virtual void RefreshSchema(DmCommandBuilder commandBuilder);
    public virtual string UnquoteIdentifier(DmCommandBuilder commandBuilder, string quotedIdentifier);
    public virtual void ApplyParameterInfo(DmCommandBuilder commandBuilder, DmParameter parameter, DataRow row, StatementType statementType, bool whereClause);
    public virtual string GetParameterName(DmCommandBuilder commandBuilder, int parameterOrdinal);
    public virtual string GetParameterName(DmCommandBuilder commandBuilder, string parameterName);
    public virtual string GetParameterPlaceholder(DmCommandBuilder commandBuilder, int parameterOrdinal);
    public virtual DataTable GetSchemaTable(DmCommandBuilder commandBuilder, DmCommand sourceCommand);
    public virtual DmCommand InitializeCommand(DmCommandBuilder commandBuilder, DmCommand command);
    public virtual void SetRowUpdatingHandler(DmCommandBuilder commandBuilder, DmDataAdapter adapter);
    public virtual object getThis(DmConnectionStringBuilder connectionStringBuilder, string keyword);
    public virtual void setThis(DmConnectionStringBuilder connectionStringBuilder, string keyword, object value);
    public virtual bool getIsFixedSize(DmConnectionStringBuilder connectionStringBuilder);
    public virtual int getCount(DmConnectionStringBuilder connectionStringBuilder);
    public virtual ICollection getKeys(DmConnectionStringBuilder connectionStringBuilder);
    public virtual ICollection getValues(DmConnectionStringBuilder connectionStringBuilder);
    public virtual void Clear(DmConnectionStringBuilder connectionStringBuilder);
    public virtual bool ContainsKey(DmConnectionStringBuilder connectionStringBuilder, string keyword);
    public virtual bool EquivalentTo(DmConnectionStringBuilder sourceConnectionStringBuilder, DmConnectionStringBuilder destConnectionStringBuilder);
    public virtual bool Remove(DmConnectionStringBuilder connectionStringBuilder, string keyword);
    public virtual bool ShouldSerialize(DmConnectionStringBuilder connectionStringBuilder, string keyword);
    public virtual bool TryGetValue(DmConnectionStringBuilder connectionStringBuilder, string keyword, Object& value);
    public virtual void GetProperties(DmConnectionStringBuilder connectionStringBuilder, Hashtable propertyDescriptors);
}
internal class Dm.filter.ConnPoolFilter : BaseFilter {
    private ILogger LOG;
    private ConnPoolCache _connPoolCache;
    internal static ConnPoolFilter Instance;
    private ConnPoolCache PoolCache { get; }
    unknown int ConnPoolSize {internal set; }
    unknown int ConnPoolTimeout {internal set; }
    unknown int ConnPoolIdleExpiredTime {internal set; }
    unknown int ConnPoolIdleClearInterval {internal set; }
    private static ConnPoolFilter();
    private ConnPoolCache get_PoolCache();
    internal void set_ConnPoolSize(int value);
    internal void set_ConnPoolTimeout(int value);
    internal void set_ConnPoolIdleExpiredTime(int value);
    internal void set_ConnPoolIdleClearInterval(int value);
    public virtual void Open(DmConnection conn);
    public virtual void Close(DmConnection conn);
}
internal interface Dm.filter.IFilter {
    public abstract virtual string getServerVersion(DmConnection conn);
    public abstract virtual string getDataSource(DmConnection conn);
    public abstract virtual string getDatabase(DmConnection conn);
    public abstract virtual int getConnectionTimeout(DmConnection conn);
    public abstract virtual string getConnectionString(DmConnection conn);
    public abstract virtual DbProviderFactory getDbProviderFactory(DmConnection conn);
    public abstract virtual ConnectionState getState(DmConnection conn);
    public abstract virtual DmTransaction BeginDbTransaction(DmConnection conn, IsolationLevel isolationLevel);
    public abstract virtual void ChangeDatabase(DmConnection conn, string databaseName);
    public abstract virtual void Close(DmConnection conn);
    public abstract virtual DmCommand CreateDbCommand(DmConnection conn);
    public abstract virtual void EnlistTransaction(DmConnection conn, Transaction transaction);
    public abstract virtual DataTable GetSchema(DmConnection conn);
    public abstract virtual DataTable GetSchema(DmConnection conn, string collectionName, String[] restrictionValues);
    public abstract virtual DataTable GetSchema(DmConnection conn, string collectionName);
    public abstract virtual void Open(DmConnection conn);
    public abstract virtual bool getDesignTimeVisible(DmCommand command);
    public abstract virtual void setDesignTimeVisible(DmCommand command, bool value);
    public abstract virtual CommandType getCommandType(DmCommand command);
    public abstract virtual void setCommandType(DmCommand command, CommandType value);
    public abstract virtual int getCommandTimeout(DmCommand command);
    public abstract virtual void setCommandTimeout(DmCommand command, int value);
    public abstract virtual string getCommandText(DmCommand command);
    public abstract virtual void setCommandText(DmCommand command, string value);
    public abstract virtual UpdateRowSource getUpdatedRowSource(DmCommand command);
    public abstract virtual void setUpdatedRowSource(DmCommand command, UpdateRowSource value);
    public abstract virtual DmConnection getDbConnection(DmCommand command);
    public abstract virtual void setDbConnection(DmCommand command, DmConnection value);
    public abstract virtual DmParameterCollection getDbParameterCollection(DmCommand command);
    public abstract virtual DmTransaction getDbTransaction(DmCommand command);
    public abstract virtual void setDbTransaction(DmCommand command, DmTransaction value);
    public abstract virtual void Cancel(DmCommand command);
    public abstract virtual int ExecuteNonQuery(DmCommand command);
    public abstract virtual object ExecuteScalar(DmCommand command);
    public abstract virtual void Prepare(DmCommand command);
    public abstract virtual DmParameter CreateDbParameter(DmCommand command);
    public abstract virtual DmDataReader ExecuteDbDataReader(DmCommand command, CommandBehavior behavior);
    public abstract virtual long getExecuteId(DmCommand command);
    public abstract virtual IsolationLevel getIsolationLevel(DmTransaction transaction);
    public abstract virtual DmConnection getDbConnection(DmTransaction transaction);
    public abstract virtual void Commit(DmTransaction transaction);
    public abstract virtual void Rollback(DmTransaction transaction);
    public abstract virtual void Dispose(DmTransaction transaction, bool disposing);
    public abstract virtual object getThis(DmDataReader dataReader, int index);
    public abstract virtual object getThis(DmDataReader dataReader, string name);
    public abstract virtual int getDepth(DmDataReader dataReader);
    public abstract virtual bool getHasRows(DmDataReader dataReader);
    public abstract virtual int getVisibleFieldCount(DmDataReader dataReader);
    public abstract virtual int getRecordsAffected(DmDataReader dataReader);
    public abstract virtual bool getIsClosed(DmDataReader dataReader);
    public abstract virtual int getFieldCount(DmDataReader dataReader);
    public abstract virtual void Close(DmDataReader dataReader);
    public abstract virtual bool GetBoolean(DmDataReader dataReader, int ordinal);
    public abstract virtual byte GetByte(DmDataReader dataReader, int ordinal);
    public abstract virtual long GetBytes(DmDataReader dataReader, int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual char GetChar(DmDataReader dataReader, int ordinal);
    public abstract virtual long GetChars(DmDataReader dataReader, int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public abstract virtual string GetDataTypeName(DmDataReader dataReader, int ordinal);
    public abstract virtual DateTime GetDateTime(DmDataReader dataReader, int ordinal);
    public abstract virtual decimal GetDecimal(DmDataReader dataReader, int ordinal);
    public abstract virtual double GetDouble(DmDataReader dataReader, int ordinal);
    public abstract virtual IEnumerator GetEnumerator(DmDataReader dataReader);
    public abstract virtual Type GetFieldType(DmDataReader dataReader, int ordinal);
    public abstract virtual float GetFloat(DmDataReader dataReader, int ordinal);
    public abstract virtual Guid GetGuid(DmDataReader dataReader, int ordinal);
    public abstract virtual short GetInt16(DmDataReader dataReader, int ordinal);
    public abstract virtual int GetInt32(DmDataReader dataReader, int ordinal);
    public abstract virtual long GetInt64(DmDataReader dataReader, int ordinal);
    public abstract virtual string GetName(DmDataReader dataReader, int ordinal);
    public abstract virtual int GetOrdinal(DmDataReader dataReader, string name);
    public abstract virtual Type GetProviderSpecificFieldType(DmDataReader dataReader, int ordinal);
    public abstract virtual object GetProviderSpecificValue(DmDataReader dataReader, int ordinal);
    public abstract virtual int GetProviderSpecificValues(DmDataReader dataReader, Object[] values);
    public abstract virtual DataTable GetSchemaTable(DmDataReader dataReader);
    public abstract virtual string GetString(DmDataReader dataReader, int ordinal);
    public abstract virtual object GetValue(DmDataReader dataReader, int ordinal);
    public abstract virtual int GetValues(DmDataReader dataReader, Object[] values);
    public abstract virtual bool IsDBNull(DmDataReader dataReader, int ordinal);
    public abstract virtual bool NextResult(DmDataReader dataReader);
    public abstract virtual bool Read(DmDataReader dataReader);
    public abstract virtual void Dispose(DmDataReader dataReader, bool disposing);
    public abstract virtual DmDataReader GetDbDataReader(DmDataReader dataReader, int ordinal);
    public abstract virtual object getSyncRoot(DmParameterCollection parameterCollection);
    public abstract virtual bool getIsSynchronized(DmParameterCollection parameterCollection);
    public abstract virtual bool getIsReadOnly(DmParameterCollection parameterCollection);
    public abstract virtual bool getIsFixedSize(DmParameterCollection parameterCollection);
    public abstract virtual int getCount(DmParameterCollection parameterCollection);
    public abstract virtual int Add(DmParameterCollection parameterCollection, object value);
    public abstract virtual void AddRange(DmParameterCollection parameterCollection, Array values);
    public abstract virtual void Clear(DmParameterCollection parameterCollection);
    public abstract virtual bool Contains(DmParameterCollection parameterCollection, object value);
    public abstract virtual bool Contains(DmParameterCollection parameterCollection, string value);
    public abstract virtual void CopyTo(DmParameterCollection parameterCollection, Array array, int index);
    public abstract virtual IEnumerator GetEnumerator(DmParameterCollection parameterCollection);
    public abstract virtual int IndexOf(DmParameterCollection parameterCollection, object value);
    public abstract virtual int IndexOf(DmParameterCollection parameterCollection, string parameterName);
    public abstract virtual void Insert(DmParameterCollection parameterCollection, int index, object value);
    public abstract virtual void Remove(DmParameterCollection parameterCollection, object value);
    public abstract virtual void RemoveAt(DmParameterCollection parameterCollection, string parameterName);
    public abstract virtual void RemoveAt(DmParameterCollection parameterCollection, int index);
    public abstract virtual DmParameter GetParameter(DmParameterCollection parameterCollection, string parameterName);
    public abstract virtual DmParameter GetParameter(DmParameterCollection parameterCollection, int index);
    public abstract virtual void SetParameter(DmParameterCollection parameterCollection, int index, DmParameter value);
    public abstract virtual void SetParameter(DmParameterCollection parameterCollection, string parameterName, DmParameter value);
    public abstract virtual DbType getDbType(DmParameter parameter);
    public abstract virtual void setDbType(DmParameter parameter, DbType value);
    public abstract virtual ParameterDirection getDirection(DmParameter parameter);
    public abstract virtual void setDirection(DmParameter parameter, ParameterDirection value);
    public abstract virtual bool getIsNullable(DmParameter parameter);
    public abstract virtual void setIsNullable(DmParameter parameter, bool value);
    public abstract virtual string getParameterName(DmParameter parameter);
    public abstract virtual void setParameterName(DmParameter parameter, string value);
    public abstract virtual byte getPrecision(DmParameter parameter);
    public abstract virtual void setPrecision(DmParameter parameter, byte value);
    public abstract virtual byte getScale(DmParameter parameter);
    public abstract virtual void setScale(DmParameter parameter, byte value);
    public abstract virtual int getSize(DmParameter parameter);
    public abstract virtual void setSize(DmParameter parameter, int value);
    public abstract virtual string getSourceColumn(DmParameter parameter);
    public abstract virtual void setSourceColumn(DmParameter parameter, string value);
    public abstract virtual bool getSourceColumnNullMapping(DmParameter parameter);
    public abstract virtual void setSourceColumnNullMapping(DmParameter parameter, bool value);
    public abstract virtual DataRowVersion getSourceVersion(DmParameter parameter);
    public abstract virtual void setSourceVersion(DmParameter parameter, DataRowVersion value);
    public abstract virtual object getValue(DmParameter parameter);
    public abstract virtual void setValue(DmParameter parameter, object value);
    public abstract virtual void ResetDbType(DmParameter parameter);
    public abstract virtual int getUpdateBatchSize(DmDataAdapter dataAdapter);
    public abstract virtual void setUpdateBatchSize(DmDataAdapter dataAdapter, int value);
    public abstract virtual int AddToBatch(DmDataAdapter dataAdapter, DmCommand command);
    public abstract virtual void ClearBatch(DmDataAdapter dataAdapter);
    public abstract virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DmDataAdapter dataAdapter, DataRow dataRow, DmCommand command, StatementType statementType, DataTableMapping tableMapping);
    public abstract virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DmDataAdapter dataAdapter, DataRow dataRow, DmCommand command, StatementType statementType, DataTableMapping tableMapping);
    public abstract virtual int ExecuteBatch(DmDataAdapter dataAdapter);
    public abstract virtual int Fill(DmDataAdapter dataAdapter, DataTable[] dataTables, int startRecord, int maxRecords, DmCommand command, CommandBehavior behavior);
    public abstract virtual int Fill(DmDataAdapter dataAdapter, DataTable dataTable, DmCommand command, CommandBehavior behavior);
    public abstract virtual int Fill(DmDataAdapter dataAdapter, DataSet dataSet, int startRecord, int maxRecords, string srcTable, DmCommand command, CommandBehavior behavior);
    public abstract virtual DataTable FillSchema(DmDataAdapter dataAdapter, DataTable dataTable, SchemaType schemaType, DmCommand command, CommandBehavior behavior);
    public abstract virtual DataTable[] FillSchema(DmDataAdapter dataAdapter, DataSet dataSet, SchemaType schemaType, DmCommand command, string srcTable, CommandBehavior behavior);
    public abstract virtual IDataParameter GetBatchedParameter(DmDataAdapter dataAdapter, int commandIdentifier, int parameterIndex);
    public abstract virtual bool GetBatchedRecordsAffected(DmDataAdapter dataAdapter, int commandIdentifier, Int32& recordsAffected, Exception& error);
    public abstract virtual void InitializeBatching(DmDataAdapter dataAdapter);
    public abstract virtual void OnRowUpdated(DmDataAdapter dataAdapter, RowUpdatedEventArgs value);
    public abstract virtual void OnRowUpdating(DmDataAdapter dataAdapter, RowUpdatingEventArgs value);
    public abstract virtual void TerminateBatching(DmDataAdapter dataAdapter);
    public abstract virtual int Update(DmDataAdapter dataAdapter, DataRow[] dataRows, DataTableMapping tableMapping);
    public abstract virtual string getQuoteSuffix(DmCommandBuilder commandBuilder);
    public abstract virtual void setQuoteSuffix(DmCommandBuilder commandBuilder, string value);
    public abstract virtual string getQuotePrefix(DmCommandBuilder commandBuilder);
    public abstract virtual void setQuotePrefix(DmCommandBuilder commandBuilder, string value);
    public abstract virtual string getCatalogSeparator(DmCommandBuilder commandBuilder);
    public abstract virtual void setCatalogSeparator(DmCommandBuilder commandBuilder, string value);
    public abstract virtual CatalogLocation getCatalogLocation(DmCommandBuilder commandBuilder);
    public abstract virtual void setCatalogLocation(DmCommandBuilder commandBuilder, CatalogLocation value);
    public abstract virtual ConflictOption getConflictOption(DmCommandBuilder commandBuilder);
    public abstract virtual void setConflictOption(DmCommandBuilder commandBuilder, ConflictOption value);
    public abstract virtual string getSchemaSeparator(DmCommandBuilder commandBuilder);
    public abstract virtual void setSchemaSeparator(DmCommandBuilder commandBuilder, string value);
    public abstract virtual string QuoteIdentifier(DmCommandBuilder commandBuilder, string unquotedIdentifier);
    public abstract virtual void RefreshSchema(DmCommandBuilder commandBuilder);
    public abstract virtual string UnquoteIdentifier(DmCommandBuilder commandBuilder, string quotedIdentifier);
    public abstract virtual void ApplyParameterInfo(DmCommandBuilder commandBuilder, DmParameter parameter, DataRow row, StatementType statementType, bool whereClause);
    public abstract virtual string GetParameterName(DmCommandBuilder commandBuilder, int parameterOrdinal);
    public abstract virtual string GetParameterName(DmCommandBuilder commandBuilder, string parameterName);
    public abstract virtual string GetParameterPlaceholder(DmCommandBuilder commandBuilder, int parameterOrdinal);
    public abstract virtual DataTable GetSchemaTable(DmCommandBuilder commandBuilder, DmCommand sourceCommand);
    public abstract virtual DmCommand InitializeCommand(DmCommandBuilder commandBuilder, DmCommand command);
    public abstract virtual void SetRowUpdatingHandler(DmCommandBuilder commandBuilder, DmDataAdapter adapter);
    public abstract virtual object getThis(DmConnectionStringBuilder connectionStringBuilder, string keyword);
    public abstract virtual void setThis(DmConnectionStringBuilder connectionStringBuilder, string keyword, object value);
    public abstract virtual bool getIsFixedSize(DmConnectionStringBuilder connectionStringBuilder);
    public abstract virtual int getCount(DmConnectionStringBuilder connectionStringBuilder);
    public abstract virtual ICollection getKeys(DmConnectionStringBuilder connectionStringBuilder);
    public abstract virtual ICollection getValues(DmConnectionStringBuilder connectionStringBuilder);
    public abstract virtual void Clear(DmConnectionStringBuilder connectionStringBuilder);
    public abstract virtual bool ContainsKey(DmConnectionStringBuilder connectionStringBuilder, string keyword);
    public abstract virtual bool EquivalentTo(DmConnectionStringBuilder sourceConnectionStringBuilder, DmConnectionStringBuilder destConnectionStringBuilder);
    public abstract virtual bool Remove(DmConnectionStringBuilder connectionStringBuilder, string keyword);
    public abstract virtual bool ShouldSerialize(DmConnectionStringBuilder connectionStringBuilder, string keyword);
    public abstract virtual bool TryGetValue(DmConnectionStringBuilder connectionStringBuilder, string keyword, Object& value);
    public abstract virtual void GetProperties(DmConnectionStringBuilder connectionStringBuilder, Hashtable propertyDescriptors);
}
internal interface Dm.filter.IFilterInfo {
    public long ID { get; }
    public BaseFilter FilterHead { get; public set; }
    public LogInfo LogInfo { get; public set; }
    public RWInfo RWInfo { get; public set; }
    public RecoverInfo RecoverInfo { get; public set; }
    public abstract virtual long get_ID();
    public abstract virtual BaseFilter get_FilterHead();
    public abstract virtual void set_FilterHead(BaseFilter value);
    public abstract virtual LogInfo get_LogInfo();
    public abstract virtual void set_LogInfo(LogInfo value);
    public abstract virtual RWInfo get_RWInfo();
    public abstract virtual void set_RWInfo(RWInfo value);
    public abstract virtual RecoverInfo get_RecoverInfo();
    public abstract virtual void set_RecoverInfo(RecoverInfo value);
}
internal interface Dm.filter.log.ILogger {
    public bool ErrorEnabled { get; }
    public bool SqlEnabled { get; }
    public bool InfoEnabled { get; }
    public abstract virtual bool get_ErrorEnabled();
    public abstract virtual bool get_SqlEnabled();
    public abstract virtual bool get_InfoEnabled();
    public abstract virtual void Error(string message);
    public abstract virtual void Error(string message, Exception t);
    public abstract virtual void Sql(string message);
    public abstract virtual void Info(string message);
    public abstract virtual void Info(object source, string method, string info);
    public abstract virtual void Info(object source, string method, Object[] params);
}
internal class Dm.filter.log.LogFactory : object {
    private static Dictionary`2<object, Logger> instances;
    private static LogFactory();
    public static ILogger getLog(Type clazz);
    public static ILogger getLog(string name);
    public virtual void releaseAll();
}
internal class Dm.filter.log.LogFilter : BaseFilter {
    private ILogger LOG;
    internal static LogFilter Instance;
    private static LogFilter();
    private void doLog(LogRecord logRecord);
    public virtual string getServerVersion(DmConnection conn);
    public virtual string getDataSource(DmConnection conn);
    public virtual string getDatabase(DmConnection conn);
    public virtual int getConnectionTimeout(DmConnection conn);
    public virtual string getConnectionString(DmConnection conn);
    public virtual DbProviderFactory getDbProviderFactory(DmConnection conn);
    public virtual ConnectionState getState(DmConnection conn);
    public virtual DmTransaction BeginDbTransaction(DmConnection conn, IsolationLevel isolationLevel);
    public virtual void ChangeDatabase(DmConnection conn, string databaseName);
    public virtual void Close(DmConnection conn);
    public virtual DmCommand CreateDbCommand(DmConnection conn);
    public virtual void EnlistTransaction(DmConnection conn, Transaction transaction);
    public virtual DataTable GetSchema(DmConnection conn);
    public virtual DataTable GetSchema(DmConnection conn, string collectionName, String[] restrictionValues);
    public virtual DataTable GetSchema(DmConnection conn, string collectionName);
    public virtual void Open(DmConnection conn);
    public virtual bool getDesignTimeVisible(DmCommand command);
    public virtual void setDesignTimeVisible(DmCommand command, bool value);
    public virtual CommandType getCommandType(DmCommand command);
    public virtual void setCommandType(DmCommand command, CommandType value);
    public virtual int getCommandTimeout(DmCommand command);
    public virtual void setCommandTimeout(DmCommand command, int value);
    public virtual string getCommandText(DmCommand command);
    public virtual void setCommandText(DmCommand command, string value);
    public virtual UpdateRowSource getUpdatedRowSource(DmCommand command);
    public virtual void setUpdatedRowSource(DmCommand command, UpdateRowSource value);
    public virtual DmConnection getDbConnection(DmCommand command);
    public virtual void setDbConnection(DmCommand command, DmConnection value);
    public virtual DmParameterCollection getDbParameterCollection(DmCommand command);
    public virtual DmTransaction getDbTransaction(DmCommand command);
    public virtual void setDbTransaction(DmCommand command, DmTransaction value);
    public virtual void Cancel(DmCommand command);
    public virtual int ExecuteNonQuery(DmCommand command);
    public virtual object ExecuteScalar(DmCommand command);
    public virtual void Prepare(DmCommand command);
    public virtual DmParameter CreateDbParameter(DmCommand command);
    public virtual DmDataReader ExecuteDbDataReader(DmCommand command, CommandBehavior behavior);
    private void ExecuteBefore(DmCommand command, string method);
    private void ExecuteAfter(DmCommand command, LogRecord logRecord);
    private void SetExecuteId(DmCommand command, LogRecord logRecord);
    public virtual long getExecuteId(DmCommand command);
    public virtual IsolationLevel getIsolationLevel(DmTransaction transaction);
    public virtual DmConnection getDbConnection(DmTransaction transaction);
    public virtual void Commit(DmTransaction transaction);
    public virtual void Rollback(DmTransaction transaction);
    public virtual void Dispose(DmTransaction transaction, bool disposing);
    public virtual void Save(DmTransaction transaction, string savepointName);
    public virtual void Rollback(DmTransaction transaction, string savepointName);
    public virtual void Release(DmTransaction transaction, string savepointName);
    public virtual object getThis(DmDataReader dataReader, int index);
    public virtual object getThis(DmDataReader dataReader, string name);
    public virtual int getDepth(DmDataReader dataReader);
    public virtual bool getHasRows(DmDataReader dataReader);
    public virtual int getVisibleFieldCount(DmDataReader dataReader);
    public virtual int getRecordsAffected(DmDataReader dataReader);
    public virtual bool getIsClosed(DmDataReader dataReader);
    public virtual int getFieldCount(DmDataReader dataReader);
    public virtual void Close(DmDataReader dataReader);
    public virtual bool GetBoolean(DmDataReader dataReader, int ordinal);
    public virtual byte GetByte(DmDataReader dataReader, int ordinal);
    public virtual long GetBytes(DmDataReader dataReader, int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(DmDataReader dataReader, int ordinal);
    public virtual long GetChars(DmDataReader dataReader, int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetDataTypeName(DmDataReader dataReader, int ordinal);
    public virtual DateTime GetDateTime(DmDataReader dataReader, int ordinal);
    public virtual decimal GetDecimal(DmDataReader dataReader, int ordinal);
    public virtual double GetDouble(DmDataReader dataReader, int ordinal);
    public virtual IEnumerator GetEnumerator(DmDataReader dataReader);
    public virtual Type GetFieldType(DmDataReader dataReader, int ordinal);
    public virtual float GetFloat(DmDataReader dataReader, int ordinal);
    public virtual Guid GetGuid(DmDataReader dataReader, int ordinal);
    public virtual short GetInt16(DmDataReader dataReader, int ordinal);
    public virtual int GetInt32(DmDataReader dataReader, int ordinal);
    public virtual long GetInt64(DmDataReader dataReader, int ordinal);
    public virtual string GetName(DmDataReader dataReader, int ordinal);
    public virtual int GetOrdinal(DmDataReader dataReader, string name);
    public virtual Type GetProviderSpecificFieldType(DmDataReader dataReader, int ordinal);
    public virtual object GetProviderSpecificValue(DmDataReader dataReader, int ordinal);
    public virtual int GetProviderSpecificValues(DmDataReader dataReader, Object[] values);
    public virtual DataTable GetSchemaTable(DmDataReader dataReader);
    public virtual string GetString(DmDataReader dataReader, int ordinal);
    public virtual object GetValue(DmDataReader dataReader, int ordinal);
    public virtual int GetValues(DmDataReader dataReader, Object[] values);
    public virtual bool IsDBNull(DmDataReader dataReader, int ordinal);
    public virtual bool NextResult(DmDataReader dataReader);
    public virtual bool Read(DmDataReader dataReader);
    public virtual void Dispose(DmDataReader dataReader, bool disposing);
    public virtual DmDataReader GetDbDataReader(DmDataReader dataReader, int ordinal);
    public virtual object getSyncRoot(DmParameterCollection parameterCollection);
    public virtual bool getIsSynchronized(DmParameterCollection parameterCollection);
    public virtual bool getIsReadOnly(DmParameterCollection parameterCollection);
    public virtual bool getIsFixedSize(DmParameterCollection parameterCollection);
    public virtual int getCount(DmParameterCollection parameterCollection);
    public virtual int Add(DmParameterCollection parameterCollection, object value);
    public virtual void AddRange(DmParameterCollection parameterCollection, Array values);
    public virtual void Clear(DmParameterCollection parameterCollection);
    public virtual bool Contains(DmParameterCollection parameterCollection, object value);
    public virtual bool Contains(DmParameterCollection parameterCollection, string value);
    public virtual void CopyTo(DmParameterCollection parameterCollection, Array array, int index);
    public virtual IEnumerator GetEnumerator(DmParameterCollection parameterCollection);
    public virtual int IndexOf(DmParameterCollection parameterCollection, object value);
    public virtual int IndexOf(DmParameterCollection parameterCollection, string parameterName);
    public virtual void Insert(DmParameterCollection parameterCollection, int index, object value);
    public virtual void Remove(DmParameterCollection parameterCollection, object value);
    public virtual void RemoveAt(DmParameterCollection parameterCollection, string parameterName);
    public virtual void RemoveAt(DmParameterCollection parameterCollection, int index);
    public virtual DmParameter GetParameter(DmParameterCollection parameterCollection, string parameterName);
    public virtual DmParameter GetParameter(DmParameterCollection parameterCollection, int index);
    public virtual void SetParameter(DmParameterCollection parameterCollection, int index, DmParameter value);
    public virtual void SetParameter(DmParameterCollection parameterCollection, string parameterName, DmParameter value);
    public virtual DbType getDbType(DmParameter parameter);
    public virtual void setDbType(DmParameter parameter, DbType value);
    public virtual ParameterDirection getDirection(DmParameter parameter);
    public virtual void setDirection(DmParameter parameter, ParameterDirection value);
    public virtual bool getIsNullable(DmParameter parameter);
    public virtual void setIsNullable(DmParameter parameter, bool value);
    public virtual string getParameterName(DmParameter parameter);
    public virtual void setParameterName(DmParameter parameter, string value);
    public virtual byte getPrecision(DmParameter parameter);
    public virtual void setPrecision(DmParameter parameter, byte value);
    public virtual byte getScale(DmParameter parameter);
    public virtual void setScale(DmParameter parameter, byte value);
    public virtual int getSize(DmParameter parameter);
    public virtual void setSize(DmParameter parameter, int value);
    public virtual string getSourceColumn(DmParameter parameter);
    public virtual void setSourceColumn(DmParameter parameter, string value);
    public virtual bool getSourceColumnNullMapping(DmParameter parameter);
    public virtual void setSourceColumnNullMapping(DmParameter parameter, bool value);
    public virtual DataRowVersion getSourceVersion(DmParameter parameter);
    public virtual void setSourceVersion(DmParameter parameter, DataRowVersion value);
    public virtual object getValue(DmParameter parameter);
    public virtual void setValue(DmParameter parameter, object value);
    public virtual void ResetDbType(DmParameter parameter);
    public virtual int getUpdateBatchSize(DmDataAdapter dataAdapter);
    public virtual void setUpdateBatchSize(DmDataAdapter dataAdapter, int value);
    public virtual int AddToBatch(DmDataAdapter dataAdapter, DmCommand command);
    public virtual void ClearBatch(DmDataAdapter dataAdapter);
    public virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DmDataAdapter dataAdapter, DataRow dataRow, DmCommand command, StatementType statementType, DataTableMapping tableMapping);
    public virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DmDataAdapter dataAdapter, DataRow dataRow, DmCommand command, StatementType statementType, DataTableMapping tableMapping);
    public virtual int ExecuteBatch(DmDataAdapter dataAdapter);
    public virtual int Fill(DmDataAdapter dataAdapter, DataTable[] dataTables, int startRecord, int maxRecords, DmCommand command, CommandBehavior behavior);
    public virtual int Fill(DmDataAdapter dataAdapter, DataTable dataTable, DmCommand command, CommandBehavior behavior);
    public virtual int Fill(DmDataAdapter dataAdapter, DataSet dataSet, int startRecord, int maxRecords, string srcTable, DmCommand command, CommandBehavior behavior);
    public virtual DataTable FillSchema(DmDataAdapter dataAdapter, DataTable dataTable, SchemaType schemaType, DmCommand command, CommandBehavior behavior);
    public virtual DataTable[] FillSchema(DmDataAdapter dataAdapter, DataSet dataSet, SchemaType schemaType, DmCommand command, string srcTable, CommandBehavior behavior);
    public virtual IDataParameter GetBatchedParameter(DmDataAdapter dataAdapter, int commandIdentifier, int parameterIndex);
    public virtual bool GetBatchedRecordsAffected(DmDataAdapter dataAdapter, int commandIdentifier, Int32& recordsAffected, Exception& error);
    public virtual void InitializeBatching(DmDataAdapter dataAdapter);
    public virtual void OnRowUpdated(DmDataAdapter dataAdapter, RowUpdatedEventArgs value);
    public virtual void OnRowUpdating(DmDataAdapter dataAdapter, RowUpdatingEventArgs value);
    public virtual void TerminateBatching(DmDataAdapter dataAdapter);
    public virtual int Update(DmDataAdapter dataAdapter, DataRow[] dataRows, DataTableMapping tableMapping);
    public virtual string getQuoteSuffix(DmCommandBuilder commandBuilder);
    public virtual void setQuoteSuffix(DmCommandBuilder commandBuilder, string value);
    public virtual string getQuotePrefix(DmCommandBuilder commandBuilder);
    public virtual void setQuotePrefix(DmCommandBuilder commandBuilder, string value);
    public virtual string getCatalogSeparator(DmCommandBuilder commandBuilder);
    public virtual void setCatalogSeparator(DmCommandBuilder commandBuilder, string value);
    public virtual CatalogLocation getCatalogLocation(DmCommandBuilder commandBuilder);
    public virtual void setCatalogLocation(DmCommandBuilder commandBuilder, CatalogLocation value);
    public virtual ConflictOption getConflictOption(DmCommandBuilder commandBuilder);
    public virtual void setConflictOption(DmCommandBuilder commandBuilder, ConflictOption value);
    public virtual string getSchemaSeparator(DmCommandBuilder commandBuilder);
    public virtual void setSchemaSeparator(DmCommandBuilder commandBuilder, string value);
    public virtual string QuoteIdentifier(DmCommandBuilder commandBuilder, string unquotedIdentifier);
    public virtual void RefreshSchema(DmCommandBuilder commandBuilder);
    public virtual string UnquoteIdentifier(DmCommandBuilder commandBuilder, string quotedIdentifier);
    public virtual void ApplyParameterInfo(DmCommandBuilder commandBuilder, DmParameter parameter, DataRow row, StatementType statementType, bool whereClause);
    public virtual string GetParameterName(DmCommandBuilder commandBuilder, int parameterOrdinal);
    public virtual string GetParameterName(DmCommandBuilder commandBuilder, string parameterName);
    public virtual string GetParameterPlaceholder(DmCommandBuilder commandBuilder, int parameterOrdinal);
    public virtual DataTable GetSchemaTable(DmCommandBuilder commandBuilder, DmCommand sourceCommand);
    public virtual DmCommand InitializeCommand(DmCommandBuilder commandBuilder, DmCommand command);
    public virtual void SetRowUpdatingHandler(DmCommandBuilder commandBuilder, DmDataAdapter adapter);
    public virtual object getThis(DmConnectionStringBuilder connectionStringBuilder, string keyword);
    public virtual void setThis(DmConnectionStringBuilder connectionStringBuilder, string keyword, object value);
    public virtual bool getIsFixedSize(DmConnectionStringBuilder connectionStringBuilder);
    public virtual int getCount(DmConnectionStringBuilder connectionStringBuilder);
    public virtual ICollection getKeys(DmConnectionStringBuilder connectionStringBuilder);
    public virtual ICollection getValues(DmConnectionStringBuilder connectionStringBuilder);
    public virtual void Clear(DmConnectionStringBuilder connectionStringBuilder);
    public virtual bool ContainsKey(DmConnectionStringBuilder connectionStringBuilder, string keyword);
    public virtual bool EquivalentTo(DmConnectionStringBuilder sourceConnectionStringBuilder, DmConnectionStringBuilder destConnectionStringBuilder);
    public virtual bool Remove(DmConnectionStringBuilder connectionStringBuilder, string keyword);
    public virtual bool ShouldSerialize(DmConnectionStringBuilder connectionStringBuilder, string keyword);
    public virtual bool TryGetValue(DmConnectionStringBuilder connectionStringBuilder, string keyword, Object& value);
    public virtual void GetProperties(DmConnectionStringBuilder connectionStringBuilder, Hashtable propertyDescriptors);
}
internal class Dm.filter.log.Logger : object {
    public bool ErrorEnabled { get; }
    public bool InfoEnabled { get; }
    public bool SqlEnabled { get; }
    public Logger(string name);
    public sealed virtual bool get_ErrorEnabled();
    public sealed virtual bool get_InfoEnabled();
    public sealed virtual bool get_SqlEnabled();
    public sealed virtual void Info(string message);
    public sealed virtual void Info(object source, string method, string info);
    public sealed virtual void Info(object source, string method, Object[] params);
    public sealed virtual void Sql(string message);
    public sealed virtual void Error(string message);
    public sealed virtual void Error(string message, Exception t);
    private string FormatHead(string head);
    private void Println(string msg);
    internal static string GetStackTrace(Exception t);
    internal static string FormatTrace(object source, string method, string info);
    internal static string FormatTrace(object source, string method, Object[] params);
    internal static string FormatTrace(object source, string method, object returnValue, Object[] params);
    internal static string FormatSource(object source);
    internal static string FormatReturn(object returnObject);
    internal static string FormatConn(DmConnection connection);
    internal static string FormatCommand(DmCommand command);
    internal static string FormatTransaction(DmTransaction transaction);
    internal static string FormatParameterCollection(DmParameterCollection parameterCollection);
    internal static string FormatParameter(DmParameter parameter);
    internal static string FormatDataReader(DmDataReader dateReader);
    internal static string FormatDataAdapter(DmDataAdapter dataAdapter);
}
internal class Dm.filter.log.LogRecord : object {
    public static NullData NULL;
    private string source;
    private string method;
    private Object[] params;
    private object returnValue;
    private Exception e;
    private long usedTime;
    private string sql;
    private long executeId;
    public Exception Throwable { get; public set; }
    public object ReturnValue { get; public set; }
    public long UsedTime { get; public set; }
    public string Sql { get; public set; }
    public long ExecuteId { get; public set; }
    public LogRecord(object source, string method, Object[] params);
    private static LogRecord();
    public virtual string ToString();
    private string formatUsedTime(long nanosecond);
    private string formatSql(string sql);
    private string formatExecuteId(long executeId);
    public virtual void set_Throwable(Exception value);
    public virtual Exception get_Throwable();
    public virtual void set_ReturnValue(object value);
    public virtual object get_ReturnValue();
    public virtual void set_UsedTime(long value);
    public virtual long get_UsedTime();
    public virtual string get_Sql();
    public virtual void set_Sql(string value);
    public virtual void set_ExecuteId(long value);
    public virtual long get_ExecuteId();
}
internal class Dm.filter.log.LogWriter : object {
    private static int BATCH_SIZE;
    private static string FILE_PREFIX;
    private BlockingQueue`1<Byte[]> _flushQueue;
    private Thread _baseThread;
    private FileInfo _logFile;
    private BufferedStream _output;
    private string _fileDir;
    private int _curFileLength;
    internal static LogWriter Instance { get; }
    private string Now { get; }
    internal static LogWriter get_Instance();
    private string get_Now();
    private void Run();
    private void Flush(List`1<Byte[]> list);
    private BufferedStream CreateNewFile();
    private void CloseCurrentFile();
    internal void WriteLine(string msg);
}
public class Dm.filter.LogInfo : object {
    internal DateTime lastExecuteStartNano;
}
public class Dm.filter.reconnect.ReconnectFilter : BaseFilter {
    internal static ReconnectFilter Instance;
    private static ReconnectFilter();
    private void autoReconnect(DmConnection connection, DbException e);
    public static void reconnect(DmConnection connection, string reasons);
    public void checkAndRecover(DmConnection connection, DmTransaction transaction);
    public virtual void Open(DmConnection conn);
    public virtual void Close(DmConnection conn);
    public virtual string getServerVersion(DmConnection conn);
    public virtual string getDataSource(DmConnection conn);
    public virtual string getDatabase(DmConnection conn);
    public virtual int getConnectionTimeout(DmConnection conn);
    public virtual string getConnectionString(DmConnection conn);
    public virtual DbProviderFactory getDbProviderFactory(DmConnection conn);
    public virtual ConnectionState getState(DmConnection conn);
    public virtual DmTransaction BeginDbTransaction(DmConnection conn, IsolationLevel isolationLevel);
    public virtual void ChangeDatabase(DmConnection conn, string databaseName);
    public virtual DmCommand CreateDbCommand(DmConnection conn);
    public virtual void EnlistTransaction(DmConnection conn, Transaction transaction);
    public virtual DataTable GetSchema(DmConnection conn);
    public virtual DataTable GetSchema(DmConnection conn, string collectionName, String[] restrictionValues);
    public virtual DataTable GetSchema(DmConnection conn, string collectionName);
    public virtual bool getDesignTimeVisible(DmCommand command);
    public virtual void setDesignTimeVisible(DmCommand command, bool value);
    public virtual CommandType getCommandType(DmCommand command);
    public virtual void setCommandType(DmCommand command, CommandType value);
    public virtual int getCommandTimeout(DmCommand command);
    public virtual void setCommandTimeout(DmCommand command, int value);
    public virtual string getCommandText(DmCommand command);
    public virtual void setCommandText(DmCommand command, string value);
    public virtual UpdateRowSource getUpdatedRowSource(DmCommand command);
    public virtual void setUpdatedRowSource(DmCommand command, UpdateRowSource value);
    public virtual DmConnection getDbConnection(DmCommand command);
    public virtual void setDbConnection(DmCommand command, DmConnection value);
    public virtual DmParameterCollection getDbParameterCollection(DmCommand command);
    public virtual DmTransaction getDbTransaction(DmCommand command);
    public virtual void setDbTransaction(DmCommand command, DmTransaction value);
    public virtual void Cancel(DmCommand command);
    public virtual int ExecuteNonQuery(DmCommand command);
    public virtual object ExecuteScalar(DmCommand command);
    public virtual void Prepare(DmCommand command);
    public virtual DmDataReader ExecuteDbDataReader(DmCommand command, CommandBehavior behavior);
    public virtual IsolationLevel getIsolationLevel(DmTransaction transaction);
    public virtual void Commit(DmTransaction transaction);
    public virtual void Rollback(DmTransaction transaction);
    public virtual void Dispose(DmTransaction transaction, bool disposing);
    public virtual void Save(DmTransaction transaction, string savepointName);
    public virtual void Rollback(DmTransaction transaction, string savepointName);
    public virtual void Release(DmTransaction transaction, string savepointName);
}
public class Dm.filter.RecoverInfo : object {
    public DateTime checkEpRecoverTs;
}
internal class Dm.filter.rw.closeDmDataReader`1 : MulticastDelegate {
    public closeDmDataReader`1(object object, IntPtr method);
    public virtual void Invoke(T dmDataReader);
    public virtual IAsyncResult BeginInvoke(T dmDataReader, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Dm.filter.rw.execute`1 : MulticastDelegate {
    public execute`1(object object, IntPtr method);
    public virtual T Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
internal class Dm.filter.rw.executeByOther`1 : MulticastDelegate {
    public executeByOther`1(object object, IntPtr method);
    public virtual T Invoke(DmCommand otherCmd);
    public virtual IAsyncResult BeginInvoke(DmCommand otherCmd, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
internal class Dm.filter.rw.RWCounter : object {
    private static object obj;
    private static Dictionary`2<string, RWCounter> rwMap;
    private long NTRX_PRIMARY;
    private long NTRX_TOTAL;
    private double primaryPercent;
    private double standbyPercent;
    private Dictionary`2<string, long> standbyNTrxMap;
    private Dictionary`2<string, int> standbyIdMap;
    private int standbyCount;
    private Random random;
    private Int32[] flag;
    private Int32[] increments;
    private RWCounter(int primaryPercent, int standbyCount);
    private static RWCounter();
    private void reset(int primaryPercent, int standbyCount);
    public static RWCounter getInstance(DmConnection connection);
    public RWSite countPrimary();
    public RWSite count(RWSite dest, DmConnection standby);
    private void adjustNtrx();
    private void incrementPrimaryNtrx();
    private long getStandbyNtrx(DmConnection standby);
    private int getStandbyId(DmConnection standby);
    private void incrementStandbyNtrx(DmConnection standby);
    public int Random(int rowCount);
    public virtual string ToString();
    private Int32[] divis(Int32[] nums);
    private long sum(Int32[] vals, int startOff, int endOff);
    private Int32[] sum(Int32[] vals, Int32[] increments);
}
internal class Dm.filter.rw.RWFilter2 : BaseFilter {
    internal static RWFilter2 Instance;
    private static RWFilter2();
    public virtual void Open(DmConnection conn);
    public virtual void Close(DmConnection conn);
    public virtual DmCommand CreateDbCommand(DmConnection conn);
    public virtual void setDesignTimeVisible(DmCommand command, bool value);
    public virtual void setCommandType(DmCommand command, CommandType value);
    public virtual void setCommandTimeout(DmCommand command, int value);
    public virtual void setCommandText(DmCommand command, string value);
    public virtual void setUpdatedRowSource(DmCommand command, UpdateRowSource value);
    public virtual void setDbConnection(DmCommand command, DmConnection value);
    public virtual void setDbTransaction(DmCommand command, DmTransaction value);
    public virtual void Cancel(DmCommand command);
    public virtual int ExecuteNonQuery(DmCommand command);
    public virtual object ExecuteScalar(DmCommand command);
    public virtual void Prepare(DmCommand command);
    public virtual DmParameter CreateDbParameter(DmCommand command);
    public virtual DmDataReader ExecuteDbDataReader(DmCommand command, CommandBehavior behavior);
    public virtual void Save(DmTransaction transaction, string savepointName);
    public virtual void Rollback(DmTransaction transaction, string savepointName);
    public virtual void Release(DmTransaction transaction, string savepointName);
}
public enum Dm.filter.rw.RWSite : Enum {
    public int value__;
    public static RWSite PRIMARY;
    public static RWSite STANDBY;
    public static RWSite ANY;
}
internal class Dm.filter.rw.RWUtil2 : object {
    private static ILogger log;
    internal static string SQL_SELECT_STANDBY;
    internal static string SQL_SELECT_STANDBY2;
    private static RWUtil2();
    public static void reconnect(DmConnection connection);
    public static void recoverStandby(DmConnection connection);
    internal static void connectStandby(DmConnection connection);
    private static EP chooseValidStandby(DmConnection connection);
    public static void afterExceptionOnStandby(DmConnection connection, DbException e);
    private static void removeStandby(DmConnection connection);
    public static bool isCreateStandbyStmt(DmCommand stmt);
    public static T execute(DmCommand cmd, execute`1<T> exec, closeDmDataReader`1<T> closeDmDataReader, executeByOther`1<T> execOther);
    public static bool checkReadonly(DmCommand cmd, string sql);
    public static RWSite distribute(DmCommand cmd, string sql);
    public static bool isStandbyAlive(DmConnection connection);
    public static bool isStandbyCmdValid(DmCommand cmd);
}
public class Dm.filter.RWInfo : object {
    internal RWSite distribute;
    internal RWCounter rwCounter;
    internal DmConnection connStandby;
    internal DateTime tryRecoverTs;
    internal DmTransaction transStandby;
    internal DmCommand cmdStandby;
    internal DmCommand cmdCurrent;
    internal bool readOnly;
    public DmCommand getStmtStandby();
    public DmCommand getStmtCurrent();
    public void cleanup();
    public RWInfo init();
    public RWSite toPrimary();
    public RWSite toAny();
}
internal class Dm.HeadFirstSelector : WellDistributeSelector {
    public HeadFirstSelector(List`1<EP> serverList);
    public virtual EP[] sortDBList(bool firstTime);
}
internal class Dm.MsgSecurity : object {
    internal static int DH_KEY_LENGTH;
    internal static int WORK_MODE_MASK;
    internal static int ECB_MODE;
    internal static int CBC_MODE;
    internal static int CFB_MODE;
    internal static int OFB_MODE;
    internal static int ALGO_MASK;
    internal static int DES;
    internal static int DES3;
    internal static int AES128;
    internal static int AES192;
    internal static int AES256;
    internal static int RC4;
    public static int MD5;
    internal static int DES_CFB;
    internal static int MD5_DIGEST_SIZE;
    internal static int MIN_EXTERNAL_CIPHER_ID;
    private static Byte[] DEFAULT_IV;
    private static BigInteger p;
    private static BigInteger g;
    private static MsgSecurity();
    internal static DHKey getClientKeyPair();
    internal static Byte[] ComputeSessionKey(DHKey clientPrivKey, Byte[] serverPubKey);
    internal static BigInteger bytes2Bn(Byte[] src);
    internal static Byte[] Bn2Bytes(BigInteger bn, int bnLen);
    internal static ICryptoTransform newCipher(bool encrypt, SymmCipherDesc cipherDesc, Byte[] sessionKey);
    private static Byte[] getIV(int ivLength);
}
internal static class Dm.net.buffer.Arrays : object {
    internal static T[] CopyOf(T[] original, int newLength);
    internal static T[] CopyOfRange(T[] original, int fromIndex, int toIndex);
    internal static void Fill(T[] array, T value);
    internal static void Fill(T[] array, int fromIndex, int toIndex, T value);
}
public abstract class Dm.net.buffer.Buffer : object {
    public static Buffer wrap(SByte[] bytes);
    public static Buffer allocateBytes(int capacity);
    public abstract virtual void clear();
    public abstract virtual void truncate(int offset);
    public abstract virtual int length();
    public abstract virtual void flip();
    public abstract virtual void fill(int len);
    public abstract virtual void skip(int len);
    public abstract virtual long offset();
    public abstract virtual int writeByte(sbyte b);
    public abstract virtual int writeShort(short s);
    public abstract virtual int writeInt(int i);
    public abstract virtual int writeUB1(int i);
    public abstract virtual int writeUB2(int i);
    public abstract virtual int writeUB3(int i);
    public abstract virtual int writeUB4(long l);
    public abstract virtual int writeLong(long l);
    public abstract virtual int writeFloat(float f);
    public abstract virtual int writeDouble(double d);
    public abstract virtual int writeBytes(SByte[] srcBytes);
    public abstract virtual int writeBytes(SByte[] srcBytes, int srcOffset, int len);
    public abstract virtual int writeBytesWithLength(SByte[] srcBytes, int srcOffset, int len);
    public abstract virtual int writeBytesWithLength2(SByte[] srcBytes, int srcOffset, int len);
    public abstract virtual int writeStringWithLength(string str, string encoding);
    public abstract virtual int writeStringWithLength2(string str, string encoding);
    public abstract virtual int writeStringWithNTS(string str, string encoding);
    public abstract virtual sbyte readByte();
    public abstract virtual short readShort();
    public abstract virtual int readInt();
    public abstract virtual long readLong();
    public abstract virtual float readFloat();
    public abstract virtual double readDouble();
    public abstract virtual int readUB1();
    public abstract virtual int readUB2();
    public abstract virtual int readUB3();
    public abstract virtual long readUB4();
    public abstract virtual SByte[] readBytes(int len);
    public abstract virtual void readBytes(SByte[] destBytes, int off, int len);
    public abstract virtual SByte[] readBytesWithLength();
    public abstract virtual SByte[] readBytesWithLength2();
    public abstract virtual string readString(int len, string encoding);
    public abstract virtual string readStringWithLength(string encoding);
    public abstract virtual string readStringWithLength2(string encoding);
    public abstract virtual int setByte(int offset, sbyte b);
    public abstract virtual int setShort(int offset, short s);
    public abstract virtual int setInt(int offset, int i);
    public abstract virtual int setLong(int offset, long l);
    public abstract virtual int setFloat(int offset, float f);
    public abstract virtual int setDouble(int offset, double d);
    public abstract virtual int setUB1(int offset, int i);
    public abstract virtual int setUB2(int offset, int i);
    public abstract virtual int setUB3(int offset, int i);
    public abstract virtual int setUB4(int offset, long l);
    public abstract virtual int setBytes(int offset, SByte[] srcBytes);
    public abstract virtual int setBytes(int offset, SByte[] srcBytes, int srcOffset, int len);
    public abstract virtual int setBytesWithLength(int offset, SByte[] srcBytes);
    public abstract virtual int setBytesWithLength(int offset, SByte[] srcBytes, int srcOffset, int len);
    public abstract virtual int setBytesWithLength2(int offset, SByte[] srcBytes);
    public abstract virtual int setBytesWithLength2(int offset, SByte[] srcBytes, int srcOffset, int len);
    public abstract virtual int setStringWithLength(int offset, string str, string encoding);
    public abstract virtual int setStringWithLength2(int offset, string str, string encoding);
    public abstract virtual int setStringWithNTS(int offset, string str, string encoding);
    public abstract virtual sbyte getByte(int offset);
    public abstract virtual short getShort(int offset);
    public abstract virtual int getInt(int offset);
    public abstract virtual long getLong(int offset);
    public abstract virtual float getFloat(int offset);
    public abstract virtual double getDouble(int offset);
    public abstract virtual int getUB1(int offset);
    public abstract virtual int getUB2(int offset);
    public abstract virtual int getUB3(int offset);
    public abstract virtual long getUB4(int offset);
    public abstract virtual SByte[] getBytes(int offset, int len);
    public abstract virtual SByte[] getBytesWithLength(int offset);
    public abstract virtual SByte[] getBytesWithLength2(int offset);
    public abstract virtual string getStringWithLength(int offset, string encoding);
    public abstract virtual string getStringWithLength2(int offset, string encoding);
    public abstract virtual string getStringWithNTS(int offset, string encoding);
    public abstract virtual int load(Stream is, int len);
    public abstract virtual void flush(Stream os);
    public abstract virtual void flush(Stream os, int off, int len);
}
public class Dm.net.buffer.ByteArrayBuffer : Buffer {
    public Node firstNode;
    public Node lastNode;
    public Node currentNode;
    public int count;
    internal ByteArrayBuffer(int capacity);
    internal ByteArrayBuffer(SByte[] bytes, int offset, int length);
    public virtual string ToString();
    public virtual void clear();
    public virtual void truncate(int offset);
    public virtual int length();
    public virtual void flip();
    public virtual void fill(int len);
    public virtual void skip(int len);
    public virtual long offset();
    public virtual Node locate(int offset);
    private void extend(int len);
    private int write(long val, int len);
    public virtual int writeByte(sbyte b);
    public virtual int writeShort(short s);
    public virtual int writeInt(int i);
    public virtual int writeUB1(int i);
    public virtual int writeUB2(int i);
    public virtual int writeUB3(int i);
    public virtual int writeUB4(long l);
    public virtual int writeLong(long l);
    public virtual int writeFloat(float f);
    public virtual int writeDouble(double d);
    public virtual int writeBytes(SByte[] srcBytes);
    public virtual int writeBytes(SByte[] srcBytes, int srcOffset, int len);
    public virtual int writeBytesWithLength(SByte[] srcBytes, int srcOffset, int len);
    public virtual int writeBytesWithLength2(SByte[] srcBytes, int srcOffset, int len);
    public virtual int writeStringWithLength(string str, string encoding);
    public virtual int writeStringWithLength2(string str, string encoding);
    public virtual int writeStringWithNTS(string str, string encoding);
    private long read(int len);
    public virtual sbyte readByte();
    public virtual short readShort();
    public virtual int readInt();
    public virtual long readLong();
    public virtual float readFloat();
    public virtual double readDouble();
    public virtual int readUB1();
    public virtual int readUB2();
    public virtual int readUB3();
    public virtual long readUB4();
    public virtual SByte[] readBytes(int len);
    public virtual void readBytes(SByte[] destBytes, int off, int len);
    public virtual SByte[] readBytesWithLength();
    public virtual SByte[] readBytesWithLength2();
    public virtual string readString(int len, string encoding);
    public virtual string readStringWithLength(string encoding);
    public virtual string readStringWithLength2(string encoding);
    private int set(Node node, int offset, long val, int len);
    public virtual int setByte(int offset, sbyte b);
    public virtual int setShort(int offset, short s);
    public virtual int setInt(int offset, int i);
    public virtual int setLong(int offset, long l);
    public virtual int setFloat(int offset, float f);
    public virtual int setDouble(int offset, double d);
    public virtual int setUB1(int offset, int i);
    public virtual int setUB2(int offset, int i);
    public virtual int setUB3(int offset, int i);
    public virtual int setUB4(int offset, long l);
    public virtual int setBytes(int offset, SByte[] srcBytes);
    public virtual int setBytes(int offset, SByte[] srcBytes, int srcOffset, int len);
    public virtual int setBytesWithLength(int offset, SByte[] srcBytes);
    public virtual int setBytesWithLength(int offset, SByte[] srcBytes, int srcOffset, int len);
    public virtual int setBytesWithLength2(int offset, SByte[] srcBytes);
    public virtual int setBytesWithLength2(int offset, SByte[] srcBytes, int srcOffset, int len);
    public virtual int setStringWithLength(int offset, string str, string encoding);
    public virtual int setStringWithLength2(int offset, string str, string encoding);
    public virtual int setStringWithNTS(int offset, string str, string encoding);
    private long get(Node node, int offset, int len);
    public virtual sbyte getByte(int offset);
    public virtual short getShort(int offset);
    public virtual int getInt(int offset);
    public virtual long getLong(int offset);
    public virtual float getFloat(int offset);
    public virtual double getDouble(int offset);
    public virtual int getUB1(int offset);
    public virtual int getUB2(int offset);
    public virtual int getUB3(int offset);
    public virtual long getUB4(int offset);
    public virtual SByte[] getBytes(int offset, int len);
    public virtual SByte[] getBytesWithLength(int offset);
    public virtual SByte[] getBytesWithLength2(int offset);
    public virtual string getStringWithLength(int offset, string encoding);
    public virtual string getStringWithLength2(int offset, string encoding);
    public virtual string getStringWithNTS(int offset, string encoding);
    public virtual int load(Stream is, int len);
    public virtual void flush(Stream os);
    public virtual void flush(Stream os, int off, int len);
}
public enum Dm.NlsDateLang : Enum {
    public int value__;
    public static NlsDateLang SIMPLIFIED_CHINESE;
    public static NlsDateLang ENGLISH;
}
public class Dm.parser.Lexer : object {
    public static int YYEOF;
    private static int ZZ_BUFFERSIZE;
    public static int YYINITIAL;
    public static int xc;
    public static int xq;
    public static int xdq;
    public static int xsb;
    public static int xbin;
    public static int xhex;
    public static int xhint;
    public static int xq2;
    public static int xq2_2;
    private static Int32[] ZZ_LEXSTATE;
    private static string ZZ_CMAP_PACKED;
    private static Char[] ZZ_CMAP;
    private static Int32[] ZZ_ACTION;
    private static string ZZ_ACTION_PACKED_0;
    private static Int32[] ZZ_ROWMAP;
    private static string ZZ_ROWMAP_PACKED_0;
    private static Int32[] ZZ_TRANS;
    private static string ZZ_TRANS_PACKED_0;
    private static int ZZ_UNKNOWN_ERROR;
    private static int ZZ_NO_MATCH;
    private static int ZZ_PUSHBACK_2BIG;
    private static String[] ZZ_ERROR_MSG;
    private static Int32[] ZZ_ATTRIBUTE;
    private static string ZZ_ATTRIBUTE_PACKED_0;
    private TextReader zzReader;
    private int zzState;
    private int zzLexicalState;
    private Char[] zzBuffer;
    private int zzMarkedPos;
    private int zzCurrentPos;
    private int zzStartRead;
    private int zzEndRead;
    private int yyline;
    private int yychar;
    private int yycolumn;
    private bool zzAtBOL;
    private bool zzAtEOF;
    private bool zzEOFDone;
    private int zzFinalHighSurrogate;
    private string ltstr;
    private bool debug_Renamed;
    public static char MIN_HIGH_SURROGATE;
    public static char MAX_HIGH_SURROGATE;
    public static char MIN_LOW_SURROGATE;
    public static char MAX_LOW_SURROGATE;
    public static int MIN_SUPPLEMENTARY_CODE_POINT;
    public Lexer(TextReader in, bool debug);
    private static Lexer();
    private static Int32[] zzUnpackAction();
    private static int zzUnpackAction(string packed, int offset, Int32[] result);
    private static Int32[] zzUnpackRowMap();
    private static int zzUnpackRowMap(string packed, int offset, Int32[] result);
    private static Int32[] zzUnpackTrans();
    private static int zzUnpackTrans(string packed, int offset, Int32[] result);
    private static Int32[] zzUnpackAttribute();
    private static int zzUnpackAttribute(string packed, int offset, Int32[] result);
    private void debug(string info);
    public virtual void yyerror(string msg);
    private static Char[] zzUnpackCMap(string packed);
    private bool zzRefill();
    public void yyclose();
    public void yyreset(TextReader reader);
    public int yystate();
    public void yybegin(int newState);
    public string yytext();
    public char yycharat(int pos);
    public int yylength();
    private void zzScanError(int errorCode);
    public virtual void yypushback(int number);
    public virtual LVal yylex();
    public static bool isHighSurrogate(char ch);
    public static bool isLowSurrogate(char ch);
    public static int toCodePoint(char high, char low);
    private static int codePointAtImpl(Char[] a, int index, int limit);
    public static int codePointAt(Char[] a, int index, int limit);
    public static int charCount(int codePoint);
}
public class Dm.parser.LVal : object {
    public static int MAX_DEC_LEN;
    public string value;
    public Type type;
    public int position;
    public LVal(string value, Type type);
    public virtual void reset();
    public virtual string ToString();
}
public class Dm.parser.SQLProcessor : object {
    public static IList`1<LVal> lex(string sql);
    public static IList`1<LVal> lexSkipWhitespace(string sql, int n);
    public static string escape(string sql, String[] keywords);
    private static LVal next(IList`1<LVal> lvalList, int start);
    public static string execOpt(string sql, IList`1<Parameter> paramList, string serverEncoding);
    public static bool hasConst(string sql);
}
internal class Dm.RsKey : object {
    internal string dbGuid;
    internal string currentSchema;
    internal string sql;
    internal int paramCount;
    internal DmParameterCollection parameters;
    internal RsKey(string dbGuid, string currentSchema, string sql, int paramCount, DmParameterCollection parameters);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class Dm.RsLRUCache : object {
    private LinkedList`1<KeyValuePair`2<RsKey, DmResultSetCache>> list;
    private Dictionary`2<RsKey, LinkedListNode`1<KeyValuePair`2<RsKey, DmResultSetCache>>> map;
    private int capacity;
    private int count;
    internal RsLRUCache(int capacity);
    internal bool Add(RsKey key, DmResultSetCache value);
    internal DmResultSetCache Find(RsKey key);
}
[AttributeUsageAttribute("4")]
internal class Dm.ShowClassAttribute : Attribute {
    private string m_Describe;
    private string m_Syntax;
    private string m_Note;
    public string Describe { get; }
    public string Syntax { get; }
    public string Note { get; }
    public ShowClassAttribute(string describe, string syntax, string note);
    public string get_Describe();
    public string get_Syntax();
    public string get_Note();
}
[AttributeUsageAttribute("4096")]
public class Dm.ShowDelegateAttribute : Attribute {
    private string m_Describe;
    private string m_Syntax;
    private string m_Parameter;
    private string m_Note;
    public string Describe { get; }
    public string Syntax { get; }
    public string Parameter { get; }
    public string Note { get; }
    public ShowDelegateAttribute(string describe, string syntax, string paramter, string note);
    public string get_Describe();
    public string get_Syntax();
    public string get_Parameter();
    public string get_Note();
}
[AttributeUsageAttribute("16")]
public class Dm.ShowEnumAttribute : Attribute {
    private string m_Describe;
    private string m_Syntax;
    private string m_Member;
    public string Describe { get; }
    public string Syntax { get; }
    public string Member { get; }
    public ShowEnumAttribute(string describe, string syntax, string member);
    public string get_Describe();
    public string get_Syntax();
    public string get_Member();
}
[AttributeUsageAttribute("64")]
public class Dm.ShowMethodAttribute : Attribute {
    private string m_Describe;
    private string m_Syntax;
    private string m_Exception;
    private string m_Note;
    public string Describe { get; }
    public string Syntax { get; }
    public string ExceptionInfo { get; }
    public string Note { get; }
    public ShowMethodAttribute(string describe, string syntax, string exception, string note);
    public string get_Describe();
    public string get_Syntax();
    public string get_ExceptionInfo();
    public string get_Note();
}
internal class Dm.SQLName : object {
    internal string m_name;
    internal string m_pkgName;
    internal string m_schName;
    internal string m_fulName;
    internal int m_schId;
    internal int m_packId;
    internal DmConnection m_conn;
    internal SQLName(string fulName);
    internal SQLName(DmConnection conn);
    internal string GetFulName();
}
internal class Dm.SQLStateMapping : object {
    private int m_Err;
    private string m_SQLState;
    private string m_ErrInfo;
    public static SQLStateMapping[] mappings;
    public int GetErr { get; }
    public string GetSQLState { get; }
    public string GetErrInfo { get; }
    internal SQLStateMapping(int i, string state, string info);
    private static SQLStateMapping();
    public int get_GetErr();
    public string get_GetSQLState();
    public string get_GetErrInfo();
}
internal class Dm.SQLStateRange : object {
    private int m_Low;
    private int m_High;
    private string m_SQLState;
    public static SQLStateRange[] ranges;
    public int GetLow { get; }
    public int GetHigh { get; }
    public string GetSQLState { get; }
    internal SQLStateRange(int i, int j, string s);
    private static SQLStateRange();
    public int get_GetLow();
    public int get_GetHigh();
    public string get_GetSQLState();
}
internal class Dm.SymmCipher : object {
    private ICryptoTransform encryptCipher;
    private ICryptoTransform decryptCipher;
    private int hashType;
    private int hashSize;
    public SymmCipher(int cipherType, Byte[] key);
    public sealed virtual Byte[] Encrypt(Byte[] src, bool genDigest);
    private Byte[] genMessageDigest(int algorithm, Byte[] msg_text);
    public sealed virtual Byte[] Decrypt(Byte[] byteSource, bool checkDigest);
}
internal class Dm.SymmCipher2 : object {
    private int cipherType;
    private Byte[] sessionKey;
    private static int HASH_TYPE;
    private static int HASH_SIZE;
    public SymmCipher2(int cipherType, Byte[] key);
    internal static int cyt_sys_init(IntPtr env);
    internal static int cyt_get_cipher_text_size(int id, int plain_text_size);
    internal static int cyt_do_encrypt(IntPtr env, int id, Byte[] key, int key_size, Byte[] plain_text, int plain_text_size, Byte[] cipher_text, int cipher_buf_size);
    internal static int cyt_hash_gen_digest(int id, Byte[] msg, int msg_size, Byte[] digest_buf, int digest_buf_size);
    internal static int cyt_do_decrypt(IntPtr env, int id, Byte[] key, int key_size, Byte[] cipher_text, int cipher_text_size, Byte[] plain_text, int plain_text_buf_size);
    internal static int dm_dh_gen_common_key(Byte[] clientKeyY, Byte[] clientKeyX, Byte[] serverPubKey, Byte[] sessionKey);
    internal static int cyt_load_ssl_lib();
    public sealed virtual Byte[] Encrypt(Byte[] src, bool genDigest);
    private Byte[] genDigestText(Byte[] text);
    public sealed virtual Byte[] Decrypt(Byte[] byteSource, bool checkDigest);
}
internal class Dm.SymmCipherDesc : object {
    private static string DEFAULT_PADDING_TYPE;
    private static string NO_PADDING_TYPE;
    private int algorithmType;
    private CipherMode cipherMode;
    private PaddingMode paddingMode;
    private string algorithmName;
    private int keyLength;
    private int ivLength;
    public SymmCipherDesc(int algorithmID);
    internal string getAlgorithmName();
    internal int getIvLength();
    internal int getKeyLength();
    internal CipherMode getWorkMode();
    internal PaddingMode getPaddingMode();
    internal int getAlgorithmType();
}
internal class Dm.ThirdPartCipher : object {
    internal int encryptType;
    internal int hashType;
    internal Byte[] key;
    internal int hashSize;
    internal static ThirdPartCipherDLL thirdPartCipherDLL;
    internal ThirdPartCipher(int encryptType, Byte[] key, string cipherPath, int hashType);
    internal int getHashSize();
    public sealed virtual Byte[] Encrypt(Byte[] plaintext, bool genDigest);
    private Byte[] genMessageDigest(int algorithm, Byte[] msg_text);
    public sealed virtual Byte[] Decrypt(Byte[] ciphertext, bool checkDigest);
    internal Byte[] Decrypt(Byte[] ciphertext);
}
internal class Dm.ThirdPartCipherDLL : object {
    internal cipher_get_count getCount;
    internal cipher_get_info getInfo;
    internal cipher_encrypt_init encryptInit;
    internal cipher_get_cipher_text_size getCipherTextSize;
    internal cipher_encrypt encrypt;
    internal cipher_cleanup cleanup;
    internal cipher_decrypt_init decryptInit;
    internal cipher_decrypt decrypt;
    internal cipher_hash_init hashInit;
    internal cipher_hash_update hashUpdate;
    internal cipher_hash_final hashFinal;
    internal ThirdPartCipherDLL(string cipherPath);
    internal static IntPtr LoadLibrary(string cipherPath);
    internal static IntPtr GetProcAddress(IntPtr hModule, string procName);
    internal static IntPtr FreeLibrary(IntPtr hModule);
    internal Delegate GetAddress(IntPtr hModule, string procName, Type t);
    public sealed virtual void Dispose();
}
public enum Dm.TraceLevel : Enum {
    public int value__;
    public static TraceLevel None;
    public static TraceLevel Normal;
    public static TraceLevel Debug;
    public static TraceLevel Trace;
    public static TraceLevel Thread;
}
internal class Dm.util.ArrayUtil : object {
    internal static bool IsAllMatch(DbParameterCollection collection, DmParameterInternal[] parasInternal);
}
internal class Dm.util.BEByteUtil : object {
    public static Byte[] fromLong(long l);
    public static int setUB1(Byte[] bytes, int offset, int i);
    public static int setUB2(Byte[] bytes, int offset, int i);
    public static int setUB3(Byte[] bytes, int offset, int i);
    public static int setUB4(Byte[] bytes, int offset, long l);
    public static int setBytes(Byte[] bytes, int offset, Byte[] srcBytes);
    public static int setBytes(Byte[] bytes, int offset, Byte[] srcBytes, int srcOffset, int len);
    public static long getLong(Byte[] bytes, int offset);
    public static int getUB1(Byte[] bytes, int offset);
    public static int getUB2(Byte[] bytes, int offset);
    public static int getUB3(Byte[] bytes, int offset);
    public static long getUB4(Byte[] bytes, int offset);
    public static Byte[] getBytes(Byte[] bytes, int offset, int len);
    public static int getBytes(Byte[] bytes, int offset, Byte[] objBytes);
    public static int getBytes(Byte[] bytes, int offset, Byte[] objBytes, int objOffset, int len);
    public static long toLong(Byte[] bytes);
}
internal class Dm.util.BlockingQueue`1 : object {
    private Queue`1<T> _queue;
    private int _limit;
    internal int Count { get; }
    internal BlockingQueue`1(int limit);
    internal int get_Count();
    internal void Enqueue(T item);
    internal List`1<T> Dequeue(int batchSize);
    internal void Enqueue(T item, Boolean& succ);
    internal T Dequeue();
    internal T DequeueTimeout(int timeout);
    internal virtual void AfterDequeueTimeout(T item);
}
internal class Dm.util.ByteArray : object {
    private LinkedList`1<Element> byteArrayList;
    private Element current;
    private int length_Renamed;
    public virtual int length();
    public virtual void putBytes(SByte[] bytes, int offset, int len);
    public virtual int writeBytes(Buffer buffer, int len);
    public virtual int writeBytes(Stream out, int len);
    public virtual int writeBytes(SByte[] buffer, int offset, int len);
    public virtual sbyte getByte(int offset);
    public virtual void append(ByteArray buffer);
    private void addElement(Element e);
    private void next();
    public virtual SByte[] toBytes();
}
public class Dm.util.ByteUtil : object {
    public static int setByte(SByte[] bytes, int offset, sbyte b);
    public static int setByte(Byte[] bytes, int offset, byte b);
    public static int setShort(SByte[] bytes, int offset, short s);
    public static int setShort(Byte[] bytes, int offset, short s);
    public static int setInt(SByte[] bytes, int offset, int i);
    public static int setInt(Byte[] bytes, int offset, int i);
    public static int setLong(SByte[] bytes, int offset, long l);
    public static int setLong(Byte[] bytes, int offset, long l);
    public static int setFloat(SByte[] bytes, int offset, float f);
    public static int setDouble(SByte[] bytes, int offset, double d);
    public static int setUB1(SByte[] bytes, int offset, int i);
    public static int setUB2(SByte[] bytes, int offset, int i);
    public static int setUB3(SByte[] bytes, int offset, int i);
    public static int setUB4(SByte[] bytes, int offset, long l);
    public static int setBytes(SByte[] bytes, int offset, SByte[] srcBytes);
    public static int setBytes(SByte[] bytes, int offset, SByte[] srcBytes, int srcOffset, int len);
    public static void setStringWithLength4(Byte[] bytes, int offset, string str, string encoding);
    public static sbyte getByte(SByte[] bytes, int offset);
    public static short getShort(SByte[] bytes, int offset);
    public static int getInt(SByte[] bytes, int offset);
    public static int getInt(Byte[] bytes, int offset);
    public static long getLong(SByte[] bytes, int offset);
    public static float getFloat(SByte[] bytes, int offset);
    public static double getDouble(SByte[] bytes, int offset);
    public static int getUB1(SByte[] bytes, int offset);
    public static int getUB2(SByte[] bytes, int offset);
    public static int getUB3(SByte[] bytes, int offset);
    public static long getUB4(SByte[] bytes, int offset);
    public static SByte[] getBytesWithLength(SByte[] bytes, int offset);
    public static SByte[] getBytesWithLength2(SByte[] bytes, int offset);
    public static SByte[] getBytes(SByte[] bytes, int offset, int len);
    public static SByte[] getBytes(string str, string encoding);
    public static Byte[] getBytes(string str, string encoding, bool isSbyte);
    public static string getString(SByte[] bytes, string encoding);
    public static string getString(SByte[] bytes, int offset, int len, string encoding);
    public static string getStringWithLength(SByte[] bytes, int offset, string encoding);
    public static string getStringWithLength2(SByte[] bytes, int offset, string encoding);
    public static Byte[] fromString(string str, string encoding);
    public static int indexOf(SByte[] subByteArray, SByte[] totalByteArray);
}
internal class Dm.util.ConnPoolCache : object {
    private Dictionary`2<string, ConnPool> _connPoolMap;
    private int _limit;
    private int _timeout;
    private int _expiredTime;
    private int _clearInterval;
    private Thread clearThread;
    unknown int Limit {internal set; }
    unknown int Timeout {internal set; }
    unknown int IdleExpiredTime {internal set; }
    unknown int IdleClearInterval {internal set; }
    internal void set_Limit(int value);
    internal void set_Timeout(int value);
    internal void set_IdleExpiredTime(int value);
    internal void set_IdleClearInterval(int value);
    internal DmConnInstance Get(BaseFilter filter, DmConnection conn);
    internal void Put(DmConnInstance connInstance, string key, bool pool);
    private void Clear();
    internal static bool CheckConnectionSurvival(DmConnInstance connInstance);
}
public class Dm.util.ConvertUtil : object {
    public static string TypeToDmSqlType(Type type);
    public static DbType TypeToDbType(Type type);
}
internal class Dm.util.DB2N : object {
    internal static object toSQLData(DmStruct dmStruct);
    internal static object toComplexType(Byte[] bytes, DmColumn column, A statement, short colIndex);
    private static Byte[] processVarchar2(Byte[] bytes, int prec);
}
internal class Dm.util.Dictionary2`3 : object {
    private Dictionary`2<TKey1, Dictionary`2<TKey2, TValue>> map1;
    internal void Add(TKey1 key1, TKey2 key2, TValue value);
    internal bool ContainsKey(TKey1 key1, TKey2 key2);
    internal bool Remove(TKey1 key1, TKey2 key2);
    public bool TryGetValue(TKey1 key1, TKey2 key2, TValue& value);
}
internal static class Dm.util.DriverUtil : object {
    public static ILogger log;
    internal static string SQL_GET_DSC_EP_SITE;
    private static DriverUtil();
    internal static bool isLocalHost(string host);
    internal static void executeNonQuery(DmConnection conn, string sql, DmParameter[] parameters);
    internal static DmDataReader executeQuery(DmConnection conn, string sql, DmParameter[] parameters);
    internal static List`1<EP> loadDscEpSites(DmConnection connection);
    public static string FormatDir(string dir);
}
public class Dm.util.geoUtil.ByteReader : object {
    private MemoryStream reader;
    private int readerByteOrder;
    private int outByteOrder;
    private long markPosition;
    public ByteReader(Byte[] buf);
    public void SetReaderByteOrder(int byteOrder);
    public void SetOutByteOrder(int byteOrder);
    public int GetReaderByteOrder();
    public void Mark();
    public void Reset();
    public Byte[] ReadPart(int len);
    public Byte[] ReadPart(int len, int endian);
    public int Read();
    public void Skip(int offset);
    public int ReadSrid();
    public int ReadInt();
    public double ReadDouble();
    public int GetRepPartValue(int len);
}
public class Dm.util.geoUtil.ByteWriter : object {
    private MemoryStream writer;
    private int byteOrder;
    public ByteWriter(int byteOrder);
    public int Size();
    public void SetByteOrder(int byteOrder);
    public int GetByteOrder();
    public void Write(int value);
    public void WritePart(Byte[] buf);
    public void WritePart(Byte[] buf, int endian);
    public void WriteSrid(int srid);
    public void WriteInt(int value);
    public Byte[] ToByteArray();
}
public class Dm.util.geoUtil.DmGeo2Util : object {
    public static string NDR;
    public static string XDR;
    public static int SridFromGser(Byte[] gserialized);
    public static Byte[] WkbFromGser(Byte[] gserialized, string endian);
    public static Byte[] EWkbFromGser(Byte[] gserialized, string endian);
    public static Byte[] WkbToGserGeom(Byte[] wkb);
    public static Byte[] WkbToGserGeom(Byte[] wkb, int srid);
    public static Byte[] WkbToGserGeog(Byte[] wkb);
    public static Byte[] WkbToGserGeog(Byte[] wkb, int srid);
    public static Byte[] EWkbToGserGeom(Byte[] eWKb);
    public static Byte[] EWkbToGserGeog(Byte[] eWKb);
}
public class Dm.util.geoUtil.NtsBinaryParser : object {
    public static int POINT_TYPE;
    public static int LINE_TYPE;
    public static int POLYGON_TYPE;
    public static int MULTIPOINT_TYPE;
    public static int MULTILINE_TYPE;
    public static int MULTIPOLYGON_TYPE;
    public static int COLLECTION_TYPE;
    public static int CIRCSTRING_TYPE;
    public static int COMPOUND_TYPE;
    public static int CURVEPOLY_TYPE;
    public static int MULTICURVE_TYPE;
    public static int MULTISURFACE_TYPE;
    public static int POLYHEDRALSURFACE_TYPE;
    public static int TRIANGLE_TYPE;
    public static int TIN_TYPE;
    public static int WKB_POINT_TYPE;
    public static int WKB_LINE_TYPE;
    public static int WKB_POLYGON_TYPE;
    public static int WKB_MULTIPOINT_TYPE;
    public static int WKB_MULTILINE_TYPE;
    public static int WKB_MULTIPOLYGON_TYPE;
    public static int WKB_COLLECTION_TYPE;
    public static int WKB_CIRCSTRING_TYPE;
    public static int WKB_COMPOUND_TYPE;
    public static int WKB_CURVEPOLY_TYPE;
    public static int WKB_MULTICURVE_TYPE;
    public static int WKB_MULTISURFACE_TYPE;
    public static int WKB_POLYHEDRALSURFACE_TYPE;
    public static int WKB_TIN_TYPE;
    public static int WKB_TRIANGLE_TYPE;
    private static int WKB_BYTE_SIZE;
    private static int WKB_INT_SIZE;
    private static int WKB_DOUBLE_SIZE;
    private static int EWKBZOFFSET;
    private static int EWKBMOFFSET;
    private static int EWKBSRIDFLAG;
    private static double EPSILON_SQLMM;
    private static double FLT_MAX;
    private static double M_PI;
    private static int GEOGRAPHY_SRID_DEFAULT;
    private static double FP_TOLERANCE;
    private static Byte[] NAN;
    private static NtsBinaryParser();
    private void PtarrayToWriter(ByteReader reader, ByteWriter writer, int dimension, int points);
    public int SridFromGserialized(Byte[] gserialized);
    internal Byte[] GserToWKb(Byte[] gserialized, string endian, string variant);
    private int GeometryWkbType(int type, bool hasZ, bool hasM, bool hasS, string variant);
    private void ParsePointWkb(ByteReader gserReader, ByteWriter wkbWriter, int dimension);
    private void ParseLineStringWkb(ByteReader gserReader, ByteWriter wkbWriter, int dimension);
    private void ParsePolygonWkb(ByteReader gserReader, ByteWriter wkbWriter, int dimension);
    private void ParseCollectionWkb(ByteReader gserReader, ByteWriter wkbWriter, bool hasZ, bool hasM, int dimension, string variant);
    private void ParseTriangleWkb(ByteReader gserReader, ByteWriter wkbWriter, int dimension);
    private bool GserIsneedBox(ByteReader wkbReader, int type, int dimension);
    private bool IsCollectionNeedBox(ByteReader wkbReader, int dimension);
    private bool IsEmptyPoint(ByteReader wkbReader, int dimension);
    private bool IsEmptyLineString(ByteReader wkbReader, int dimension);
    private bool IsEmptyPolygon(ByteReader wkbReader, int dimension);
    private bool IsEmptyTriangle(ByteReader wkbReader, int dimension);
    private bool IsEmptyCollection(ByteReader wkbReader, int dimension);
    private void CalculateBoxGeodetic(ByteReader wkbReader, int type, bool hasZ, bool hasM, Double[] box);
    private void CalculateGboxGeodetic(ByteReader wkbReader, bool hasZ, bool hasM, int pointNumber, Double[] box);
    private void Ll2Cart(Point4d g, Point4d p);
    private void EdgeCalculateGbox(Point4d A1, Point4d A2, Double[] box);
    private void GboxMergePoint3d(Point4d p, Double[] box);
    private void UnitNormal(Point4d P1, Point4d P2, Point4d normal);
    private double DotProduct(Point4d p1, Point4d p2);
    private void Normalize(Point4d P3);
    private void Normalize2d(Point4d P3);
    private void MergePoint3d(Point4d p, Double[] gbox);
    private void PolygonCalculateGboxGeodetic(ByteReader wkbReader, bool hasZ, bool hasM, Double[] box);
    private void GboxCheckPoles(Double[] gbox);
    private void CollectionCalculateGboxGeodetic(ByteReader wkbReader, bool hasZ, bool hasM, Double[] box);
    private void CalculateBoxCartesian(ByteReader wkbReader, int type, bool hasZ, bool hasM, Double[] box);
    private void CircstringCalculateGboxCartesian(ByteReader wkbReader, bool hasZ, bool hasM, int pointNumber, Double[] box);
    private void GetPoint4d(ByteReader wkbReader, bool hasZ, bool hasM, Point4d p);
    private int ArcCalculateGboxCartesian(Point4d p1, Point4d p2, Point4d p3, Double[] gbox, bool hasZ, bool hasM);
    private int SegmentSide(Point4d p1, Point4d p2, Point4d q);
    private double ArcCenter(Point4d p1, Point4d p2, Point4d p3, Point4d result, bool hasZ, bool hasM);
    private void CalculateGboxCartesian(ByteReader wkbReader, bool hasZ, bool hasM, int pointNumber, Double[] box);
    private void CollectionCalculateGboxCartesian(ByteReader wkbReader, bool hasZ, bool hasM, Double[] box);
    private void gbox_merge(Double[] newBox, Double[] mergeBox, bool hasZ, bool hasM);
    private Byte[] GserAddSize(ByteWriter gserWriter);
    internal Byte[] WkbTogser(Byte[] wkb, int srid, string variant, bool isGeog);
    private static float NextAfter(float start, double direction);
    private void ParsePointGser(ByteReader wkbReader, ByteWriter gserWriter, int dimension);
    private void ParseLineStringGser(ByteReader wkbReader, ByteWriter gserWriter, int dimension);
    private static void ParsePolygonGser(ByteReader wkbReader, ByteWriter gserWriter, int dimension);
    private void ParseTriangleGser(ByteReader wkbReader, ByteWriter gserWriter, int dimension);
    private void ParseCollectionGser(ByteReader wkbReader, ByteWriter gserWriter, int dimension);
}
public class Dm.util.geoUtil.Point4d : object {
    public double x;
    public double y;
    public double z;
    public double m;
}
internal static class Dm.util.ListUtil : object {
    internal static IFilter[] toArray(IList`1<IFilter> filterList);
}
internal class Dm.util.LRUCache`2 : object {
    private LinkedList`1<KeyValuePair`2<TKey, TValue>> _linkedList;
    private Dictionary`2<TKey, LinkedListNode`1<KeyValuePair`2<TKey, TValue>>> _map;
    private int _capacity;
    internal LRUCache`2(int capacity);
    internal TValue Add(TKey key, TValue value);
    internal TValue FindValue(TKey key);
}
internal class Dm.util.MathUtil : object {
    internal static DateTime Round(DateTime dt, int scale);
    public static long pow(int a, int b);
}
internal class Dm.util.N2DB : object {
    public static double MAX_REAL;
    public static double MIN_REAL;
    public static long THIRTEEN_TIMESTAMP_BOUND;
    public static Byte[] fromBoolean(bool val, DmField paraInternal, DmConnection connection);
    public static Byte[] fromLong(long val, DmField paraInternal, DmConnection connection);
    public static Byte[] fromULong(ulong val, DmField paraInternal, DmConnection connection);
    public static Byte[] fromFloat(float val, DmField paraInternal, DmConnection connection);
    public static bool isFloatEqualsZero(double val);
    public static Byte[] fromDouble(double val, DmField paraInternal, DmConnection connection);
    public static Byte[] fromString(string val, DmField paraInternal, DmConnection connection);
    public static Int32[] toDt(string val, DmConnection connection, int scale);
    public static Byte[] toVarBinaryOrBlob(string val, int cType, int scale, int prec);
    public static Byte[] toBinary(string val, int prec);
    public static Byte[] fromStringBytes(string val, Byte[] valBytes, DmField paraInternal, DmConnection connection);
    public static Byte[] fromBytes(Byte[] val, DmField paraInternal, DmConnection connection);
    public static Byte[] fromDate(DateTime val, DmField paraInternal, DmConnection connection);
    public static Byte[] fromTime(DateTime val, DmField paraInternal, DmConnection connection);
    public static Byte[] fromTime(DmTime val, DmField paraInternal, DmConnection connection);
    public static Byte[] fromTimestamp(DateTime val, DmField paraInternal, DmConnection connection);
    public static Byte[] fromTimeTZ(DateTimeOffset val, DmField paraInternal, DmConnection connection);
    public static Byte[] fromTimestampTZ(DateTimeOffset val, DmField paraInternal, DmConnection connection);
    public static Byte[] fromDmIntervalYM(DmIntervalYM val, DmField paraInternal, DmConnection connection);
    public static Byte[] fromDmIntervalDT(DmIntervalDT val, DmField paraInternal, DmConnection connection);
    public static Byte[] fromBlob(DmBlob x, DmField paraInternal, DmConnection connection);
    public static Byte[] fromClob(DmClob x, DmField paraInternal, DmConnection connection);
    public static Byte[] fromArray(DmArray x, DmField paraInternal, DmConnection connection);
    public static Byte[] fromStruct(DmStruct x, DmField paraInternal, DmConnection connection);
    public static Byte[] fromObject(object val, DmField paraInternal, DmConnection connection);
    public static Byte[] fromDmDecimal(DmXDec val, DmField paraInternal, DmConnection connection);
    public static Byte[] fromBigDecimal(Nullable`1<decimal> val, DmField paraInternal, DmConnection connection);
    public static Byte[] toBit(long val);
    public static Byte[] toTinyint(long val);
    public static Byte[] toSmallint(long val);
    public static Byte[] toInt(long val);
    public static Byte[] toBigint(long val);
    public static Byte[] toReal(float val);
    public static int FloatToIntBits(float value);
    public static Byte[] toDouble(double val);
    public static Byte[] toDecimal(string val, int prec, int scale, bool direct);
    public static Byte[] toVarchar(string val, string serverEncoding);
    public static Byte[] toVarchar(Byte[] bsArr);
    public static Byte[] toChar(byte bt);
    public static byte getCharByNumVal(int val);
    public static Byte[] toBinary(long x, int prec);
    public static Byte[] toBlob(DmBlob x, DmField paraInternal, DmConnection connection);
    public static Byte[] toBlob(Byte[] bytes, DmField paraInternal, DmConnection connection);
    public static Byte[] toClob(DmClob x, DmField paraInternal, DmConnection connection);
    public static Byte[] toClob(string val, DmField paraInternal, DmConnection connection);
    public static Byte[] toClob(Byte[] bytes, DmField paraInternal, DmConnection connection);
    public static Byte[] toVarbinary(Byte[] bs);
    public static SByte[] toVarbinary(string str);
    public static bool isOffRow(int dtype, long len, DmConnection conn);
    public static Byte[] changeOffRowData(DmField para, Byte[] paramData, DmConnection conn);
    public static void checkReal(double val);
    public static void checkBigint(double val);
    public static void checkInt(double val);
    public static void checkSmallint(double val);
    public static void checkTinyint(double val);
    public static void checkBit(long val);
}
internal class Dm.util.OracleDateFormat : object {
    internal static int OFFSET_YEAR;
    internal static int OFFSET_MONTH;
    internal static int OFFSET_DAY;
    internal static int OFFSET_HOUR;
    internal static int OFFSET_MINUTE;
    internal static int OFFSET_SECOND;
    internal static int OFFSET_MILLISECOND;
    internal static int OFFSET_TIMEZONE;
    internal static int DT_LEN;
    internal static int INVALID_VALUE;
    internal static int LEN_MM;
    internal static int LEN_DD;
    internal static int LEN_YEAR;
    internal static int LEN_HH;
    internal static int LEN_MI;
    internal static int LEN_SS;
    internal static int LEN_FF;
    internal static int LEN_AM;
    internal static int LEN_TZH;
    internal static int LEN_TZM;
    internal static int LEN_SPECIAL;
    internal int Count;
    internal YearElement Y;
    internal SYearElement SY;
    internal HH12Element HH12;
    internal HH24Element HH24;
    internal MIElement MI;
    internal SSElement SS;
    internal AMElement AM;
    internal MonthElement Month;
    internal MonElement Mon;
    internal MMElement MM;
    internal DDElement DD;
    internal TZHElement TZH;
    internal TZMElement TZM;
    internal FElement F;
    internal XElement X;
    public List`1<object> formatElementList;
    public static int OFFSET_TIMEZONE_SIGN;
    public static int OFFSET_PM;
    public static int OFFSET_TIMEZONE_DEFAULT;
    public string pattern;
    public int datelang;
    public OracleDateFormat(int datelang);
    private static OracleDateFormat();
    internal Int32[] Parse(string str);
    private Int32[] AdjustDateTime(Int32[] dt);
    private static OracleDateFormat GetFormat(int datelang);
    internal static Int32[] Round(Int32[] dt, int scale);
    public static Int32[] Parse(string str, string pattern, int datelang);
    public static string Format(Int32[] dt, string pattern, int datelang, string formatNumericChars);
    internal string Format(Int32[] dt, string formatNumericChars);
    public void SetPattern(string pattern);
    private List`1<object> AnalysePattern(string pattern);
    private static string FormatInt(int value, int len);
    private string FormatMilliSecond(int ms, int len);
}
internal static class Dm.util.StreamUtil : object {
    internal static string readString(TextReader reader, int len);
    internal static string readString(TextReader reader);
    public static Byte[] readBytes(Stream stream, int length);
    public static Byte[] readBytes(Stream stream);
}
internal static class Dm.util.StringUtil : object {
    public static string EMPTY;
    public static string LINE_SEPARATOR;
    public static string LINUX_LINE_SEPARATOR;
    public static string INVISIBLE_USERNAME;
    public static int yyyy_MM_dd_HH_mm_ss;
    private static StringUtil();
    public static string trim(string str);
    public static string rightTrim(string str);
    public static string trimToEmpty(string str);
    public static bool isEmpty(string str);
    public static bool isNotEmpty(string str);
    public static string substringBetween(string str, string tag);
    public static string substringBetween(string str, string open, string close);
    public static bool Equals(string str1, string str2);
    public static bool equalsIgnoreCase(string str1, string str2);
    public static bool isDigit(string str);
    public static bool isNumerical(string str);
    public static bool isInteger(string str);
    public static bool isLong(string str);
    public static bool isDouble(string str);
    public static string join(Object[] array);
    public static string join(Object[] array, string separator);
    public static string replace(string text, string repl, string with, int maximum);
    public static string replaceAll(string text, string regex, string replacement, bool caseSensitive);
    public static bool isValidIP(string ip);
    public static bool isValidMac(string mac);
    public static bool isValidEmail(string email);
    public static string bytesToHexString(SByte[] bs);
    public static string bytesToHexString(SByte[] bs, bool pre);
    public static SByte[] hexStringToBytes(string s);
    private static sbyte convertHex(char chr);
    public static bool startWithIgnoreCase(string str1, string str2);
    public static bool containsIgnoreCase(string str1, string str2);
    public static string formatCharset(string s, string srcCharset, string desCharset);
    public static int ipToInt(string ip);
    public static string intToIp(int ip);
    public static string toPersent(double radio);
    public static string upperFirstChar(string str);
    public static string getAlignNumString(int num, int maxNum);
    public static bool isValidTimeZone(string timeZoneStr);
    public static string removeEndSeparatorOfPath(string path, bool isWin);
    public static string addEndSeparatorOfPath(string path, bool isWin);
    public static string processDoubleQuoteOfName(string name);
    public static string processDoubleQuoteOfNameForLink(string name);
    public static string processSingleQuoteOfName(string name);
    public static string processQuoteOfName(string name, string quote);
    public static string ToString(object obj);
    public static bool checkPwdComplexity(string pwdStr);
    private static int min(int one, int two, int three);
    public static string format2Table(IList`1<IDictionary> objList, String[] titles, String[] fields, int maxColLen, bool showAll);
    private static void formateLine(StringBuilder output, IDictionary obj, String[] fields, Int32[] colLens, bool showAll);
    private static void sepLine(StringBuilder output, Int32[] colLens);
    private static void blanks(StringBuilder output, int count);
    public static void appendLine(StringBuilder sb);
    public static string replaceSpecialCharFromShell(string str);
    public static long getSizeWithoutUnit(string spaceStr);
    public static string getSizeWithUnit(long size);
    public static string getSizeWithUnit(long size, string unitStr);
    public static IList`1<string> lex(string str, bool ignoreLineSeparator, bool ignoreComment, bool ltWithQuote);
    public static IList`1<string> lex(string str, bool ignoreLineSeparator, bool ignoreComment, bool ltWithQuote, bool isSql);
    private static void decodeWord(Stack`1<Nullable`1<char>> chrStack, IList`1<string> wordList, bool emptyValid);
    public static string formatDir(string dir);
    public static String[] split(string s, string seperators);
    private static string getStrFromInt(int i);
    public static void append(StringBuilder sf, String[] objs);
    public static void append(StringBuilder sf, String[] objs, string separate);
    public static void append(StringBuilder sf, string str, int count);
    public static void append(StringBuilder sf, string str, int count, string separate);
    public static string formatTime();
    public static string formatTime(string prefix, string suffix);
    public static string subString(string src, string start, string to);
    public static long murmurhash2_64(string text);
    public static string getStackTrace(Exception ex);
    public static SByte[] getBytes(string str, string encoding);
    public static Byte[] getBytes(string str, string encoding, bool isSbyte);
}
internal class Dm.WellDistributeSelector : EPSelector {
    private int curServerPos;
    private object obj;
    internal WellDistributeSelector(List`1<EP> serverList);
    public virtual EP[] sortDBList(bool firstTime);
    protected void sortByServerMode(EP[] sortEps, bool firstTime);
    public virtual bool checkServerMode(bool lastTime, DmConnection conn);
}
public class DmSqlRowUpdatedEventArgs : RowUpdatedEventArgs {
    public DmSqlRowUpdatedEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
}
public class DmSqlRowUpdatingEventArgs : RowUpdatingEventArgs {
    public DmSqlRowUpdatingEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
}
public class NetTaste.Buffer : object {
    public static int EOF;
    private static int MIN_BUFFER_LENGTH;
    private static int MAX_BUFFER_LENGTH;
    private Byte[] buf;
    private int bufStart;
    private int bufLen;
    private int fileLen;
    private int bufPos;
    private Stream stream;
    private bool isUserStream;
    public int Pos { get; public set; }
    public Buffer(Stream s, bool isUserStream);
    protected Buffer(Buffer b);
    protected virtual override void Finalize();
    protected void Close();
    public virtual int Read();
    public int Peek();
    public string GetString(int beg, int end);
    public int get_Pos();
    public void set_Pos(int value);
    private int ReadNextStreamChunk();
}
public class NetTaste.Errors : object {
    public int count;
    public TextWriter errorStream;
    public string errMsgFormat;
    public virtual void SynErr(int line, int col, int n);
    public virtual void SemErr(int line, int col, string s);
    public virtual void SemErr(string s);
    public virtual void Warning(int line, int col, string s);
    public virtual void Warning(string s);
}
public class NetTaste.FatalError : Exception {
    public FatalError(string m);
}
public class NetTaste.Obj : object {
    public string name;
    public Obj next;
    public int kind;
    public int adr;
    public Obj locals;
    public int nextAdr;
}
public class NetTaste.Parser : object {
    public static int _EOF;
    public static int _integer;
    public static int _identifier;
    public static int _binteger;
    public static int _decimal;
    public static int _real;
    public static int _op;
    public static int _one_vard;
    public static int _one_varq;
    public static int _one_var;
    public static int _end_word;
    public static int maxT;
    private static bool T;
    private static bool x;
    private static int minErrDist;
    public Scanner scanner;
    public Errors errors;
    public Token t;
    public Token la;
    private int errDist;
    private static int words;
    private static int identifier;
    public SymbolTable tab;
    private static Boolean[0...,0...] set;
    public Parser(Scanner scanner);
    private static Parser();
    private void SynErr(int n);
    public void SemErr(string msg);
    private void Get();
    private void Expect(int n);
    private bool StartOf(int s);
    private void ExpectWeak(int n, int follow);
    private bool WeakSeparator(int n, int syFol, int repFol);
    private void NetTaste();
    public void Parse();
}
public class NetTaste.Scanner : object {
    private static char EOL;
    private static int eofSym;
    private static int maxT;
    private static int noSym;
    public Buffer buffer;
    private Token t;
    private int ch;
    private int pos;
    private int charPos;
    private int col;
    private int line;
    private int oldEols;
    private static Hashtable start;
    private Token tokens;
    private Token pt;
    private Char[] tval;
    private int tlen;
    private static Scanner();
    public Scanner(string fileName);
    public Scanner(Stream s);
    private void Init();
    private void NextCh();
    private void AddCh();
    private bool Comment0();
    private bool Comment1();
    private void CheckLiteral();
    private Token NextToken();
    private void SetScannerBehindT();
    public Token Scan();
    public Token Peek();
    public void ResetPeek();
}
public class NetTaste.SymbolTable : object {
    private static int words;
    private static int identifier;
    public Obj topScope;
    public SymbolTable(Parser parser);
    public Obj NewObj(string name, int kind);
    public bool Replace(string name);
    public void Print();
    public string GetString();
}
public class NetTaste.Token : object {
    public int kind;
    public int pos;
    public int charPos;
    public int col;
    public int line;
    public string val;
    public Token next;
}
public class NetTaste.UTF8Buffer : Buffer {
    public UTF8Buffer(Buffer b);
    public virtual int Read();
}
