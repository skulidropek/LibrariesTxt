public class SqlSugar.AdoAccessory : object {
    protected IDbBind _DbBind;
    protected IDbFirst _DbFirst;
    protected ICodeFirst _CodeFirst;
    protected IDbMaintenance _DbMaintenance;
    protected IDbConnection _DbConnection;
    protected virtual SugarParameter[] GetParameters(object parameters, PropertyInfo[] propertyInfo, string sqlParameterKeyWord);
    protected void ProperyToParameter(object parameters, PropertyInfo[] propertyInfo, string sqlParameterKeyWord, List`1<SugarParameter> listParams, Type entityType);
    protected void DictionaryToParameters(object parameters, string sqlParameterKeyWord, List`1<SugarParameter> listParams, Type entityType);
}
public abstract class SqlSugar.AdoProvider : AdoAccessory {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<IDataParameter> <OutputParameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDbTransaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CommandType <OldCommandType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <OldClearParameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDataParameterCollection <DataReaderParameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <SqlExecuteCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDisableMasterSlaveSeparation>k__BackingField;
    internal DateTime BeforeTime;
    internal DateTime AfterTime;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <CommandTimeOut>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CommandType <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsEnableLogEvent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsClearParameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<string, string> <FormatSql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<IDbConnection> <SlaveConnections>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDbConnection <MasterConnection>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MasterConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<CancellationToken> <CancellationToken>k__BackingField;
    protected List`1<IDataParameter> OutputParameters { get; protected set; }
    public string SqlParameterKeyWord { get; }
    public IDbTransaction Transaction { get; public set; }
    public SqlSugarProvider Context { get; public set; }
    internal CommandType OldCommandType { get; internal set; }
    internal bool OldClearParameters { get; internal set; }
    public IDataParameterCollection DataReaderParameters { get; public set; }
    public TimeSpan SqlExecutionTime { get; }
    public int SqlExecuteCount { get; private set; }
    public StackTraceInfo SqlStackTrace { get; }
    public bool IsDisableMasterSlaveSeparation { get; public set; }
    public IDbBind DbBind { get; }
    public int CommandTimeOut { get; public set; }
    public CommandType CommandType { get; public set; }
    public bool IsEnableLogEvent { get; public set; }
    public bool IsClearParameters { get; public set; }
    public Action`2<string, SugarParameter[]> LogEventStarting { get; }
    public Action`2<string, SugarParameter[]> LogEventCompleted { get; }
    public Func`3<string, SugarParameter[], KeyValuePair`2<string, SugarParameter[]>> ProcessingEventStartingSQL { get; }
    protected Func`2<string, string> FormatSql { get; protected set; }
    public Action`1<SqlSugarException> ErrorEvent { get; }
    public Action`1<DiffLogModel> DiffLogEvent { get; }
    public List`1<IDbConnection> SlaveConnections { get; public set; }
    public IDbConnection MasterConnection { get; public set; }
    public string MasterConnectionString { get; public set; }
    public Nullable`1<CancellationToken> CancellationToken { get; public set; }
    public IDbConnection Connection { get; public set; }
    protected bool IsMasterSlaveSeparation { get; }
    [CompilerGeneratedAttribute]
protected List`1<IDataParameter> get_OutputParameters();
    [CompilerGeneratedAttribute]
protected void set_OutputParameters(List`1<IDataParameter> value);
    public virtual string get_SqlParameterKeyWord();
    [CompilerGeneratedAttribute]
public sealed virtual IDbTransaction get_Transaction();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Transaction(IDbTransaction value);
    [CompilerGeneratedAttribute]
public virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public virtual void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal CommandType get_OldCommandType();
    [CompilerGeneratedAttribute]
internal void set_OldCommandType(CommandType value);
    [CompilerGeneratedAttribute]
internal bool get_OldClearParameters();
    [CompilerGeneratedAttribute]
internal void set_OldClearParameters(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IDataParameterCollection get_DataReaderParameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DataReaderParameters(IDataParameterCollection value);
    public sealed virtual TimeSpan get_SqlExecutionTime();
    [CompilerGeneratedAttribute]
public sealed virtual int get_SqlExecuteCount();
    [CompilerGeneratedAttribute]
private void set_SqlExecuteCount(int value);
    public sealed virtual StackTraceInfo get_SqlStackTrace();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDisableMasterSlaveSeparation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsDisableMasterSlaveSeparation(bool value);
    public virtual IDbBind get_DbBind();
    [CompilerGeneratedAttribute]
public virtual int get_CommandTimeOut();
    [CompilerGeneratedAttribute]
public virtual void set_CommandTimeOut(int value);
    [CompilerGeneratedAttribute]
public virtual CommandType get_CommandType();
    [CompilerGeneratedAttribute]
public virtual void set_CommandType(CommandType value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsEnableLogEvent();
    [CompilerGeneratedAttribute]
public virtual void set_IsEnableLogEvent(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsClearParameters();
    [CompilerGeneratedAttribute]
public virtual void set_IsClearParameters(bool value);
    public virtual Action`2<string, SugarParameter[]> get_LogEventStarting();
    public virtual Action`2<string, SugarParameter[]> get_LogEventCompleted();
    public virtual Func`3<string, SugarParameter[], KeyValuePair`2<string, SugarParameter[]>> get_ProcessingEventStartingSQL();
    [CompilerGeneratedAttribute]
protected virtual Func`2<string, string> get_FormatSql();
    [CompilerGeneratedAttribute]
protected virtual void set_FormatSql(Func`2<string, string> value);
    public virtual Action`1<SqlSugarException> get_ErrorEvent();
    public virtual Action`1<DiffLogModel> get_DiffLogEvent();
    [CompilerGeneratedAttribute]
public virtual List`1<IDbConnection> get_SlaveConnections();
    [CompilerGeneratedAttribute]
public virtual void set_SlaveConnections(List`1<IDbConnection> value);
    [CompilerGeneratedAttribute]
public virtual IDbConnection get_MasterConnection();
    [CompilerGeneratedAttribute]
public virtual void set_MasterConnection(IDbConnection value);
    [CompilerGeneratedAttribute]
public virtual string get_MasterConnectionString();
    [CompilerGeneratedAttribute]
public virtual void set_MasterConnectionString(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<CancellationToken> get_CancellationToken();
    [CompilerGeneratedAttribute]
public virtual void set_CancellationToken(Nullable`1<CancellationToken> value);
    public virtual bool IsValidConnection();
    public virtual bool IsValidConnectionNoClose();
    public virtual void Open();
    public sealed virtual SugarConnection OpenAlways();
    public virtual void Close();
    public virtual void Dispose();
    public virtual void CheckConnection();
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<CheckConnectionAsync>d__96")]
[DebuggerStepThroughAttribute]
public virtual Task CheckConnectionAsync();
    public virtual bool IsAnyTran();
    public virtual bool IsNoTran();
    public virtual void BeginTran();
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<BeginTranAsync>d__100")]
[DebuggerStepThroughAttribute]
public virtual Task BeginTranAsync();
    public virtual void BeginTran(IsolationLevel iso);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<BeginTranAsync>d__102")]
[DebuggerStepThroughAttribute]
public virtual Task BeginTranAsync(IsolationLevel iso);
    public virtual void RollbackTran();
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<RollbackTranAsync>d__104")]
[DebuggerStepThroughAttribute]
public virtual Task RollbackTranAsync();
    public virtual void CommitTran();
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<CommitTranAsync>d__106")]
[DebuggerStepThroughAttribute]
public virtual Task CommitTranAsync();
    public abstract virtual IDataParameter[] ToIDbDataParameter(SugarParameter[] pars);
    public abstract virtual void SetCommandToAdapter(IDataAdapter adapter, DbCommand command);
    public abstract virtual IDataAdapter GetAdapter();
    public abstract virtual DbCommand GetCommand(string sql, SugarParameter[] pars);
    public abstract virtual IDbConnection get_Connection();
    public abstract virtual void set_Connection(IDbConnection value);
    public abstract virtual void BeginTran(string transactionName);
    public abstract virtual void BeginTran(IsolationLevel iso, string transactionName);
    public sealed virtual SqlSugarTransactionAdo UseTran();
    public sealed virtual DbResult`1<bool> UseTran(Action action, Action`1<Exception> errorCallBack);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<UseTranAsync>d__118")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<DbResult`1<bool>> UseTranAsync(Func`1<Task> action, Action`1<Exception> errorCallBack);
    public sealed virtual DbResult`1<T> UseTran(Func`1<T> action, Action`1<Exception> errorCallBack);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<UseTranAsync>d__120`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<DbResult`1<T>> UseTranAsync(Func`1<Task`1<T>> action, Action`1<Exception> errorCallBack);
    public sealed virtual IAdo UseStoredProcedure();
    public virtual int ExecuteCommandWithGo(string sql, SugarParameter[] parameters);
    public virtual int ExecuteCommand(string sql, SugarParameter[] parameters);
    public virtual IDataReader GetDataReader(string sql, SugarParameter[] parameters);
    public virtual DataSet GetDataSetAll(string sql, SugarParameter[] parameters);
    public virtual object GetScalar(string sql, SugarParameter[] parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<ExecuteCommandAsync>d__127")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> ExecuteCommandAsync(string sql, SugarParameter[] parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<GetDataReaderAsync>d__128")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IDataReader> GetDataReaderAsync(string sql, SugarParameter[] parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<GetScalarAsync>d__129")]
[DebuggerStepThroughAttribute]
public virtual Task`1<object> GetScalarAsync(string sql, SugarParameter[] parameters);
    public virtual Task`1<DataSet> GetDataSetAllAsync(string sql, SugarParameter[] parameters);
    public virtual string GetString(string sql, object parameters);
    public virtual string GetString(string sql, SugarParameter[] parameters);
    public virtual string GetString(string sql, List`1<SugarParameter> parameters);
    public virtual Task`1<string> GetStringAsync(string sql, object parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<GetStringAsync>d__135")]
[DebuggerStepThroughAttribute]
public virtual Task`1<string> GetStringAsync(string sql, SugarParameter[] parameters);
    public virtual Task`1<string> GetStringAsync(string sql, List`1<SugarParameter> parameters);
    public virtual long GetLong(string sql, object parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<GetLongAsync>d__138")]
[DebuggerStepThroughAttribute]
public virtual Task`1<long> GetLongAsync(string sql, object parameters);
    public virtual int GetInt(string sql, object parameters);
    public virtual int GetInt(string sql, List`1<SugarParameter> parameters);
    public virtual int GetInt(string sql, SugarParameter[] parameters);
    public virtual Task`1<int> GetIntAsync(string sql, object parameters);
    public virtual Task`1<int> GetIntAsync(string sql, List`1<SugarParameter> parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<GetIntAsync>d__144")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> GetIntAsync(string sql, SugarParameter[] parameters);
    public virtual double GetDouble(string sql, object parameters);
    public virtual double GetDouble(string sql, SugarParameter[] parameters);
    public virtual double GetDouble(string sql, List`1<SugarParameter> parameters);
    public virtual Task`1<double> GetDoubleAsync(string sql, object parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<GetDoubleAsync>d__149")]
[DebuggerStepThroughAttribute]
public virtual Task`1<double> GetDoubleAsync(string sql, SugarParameter[] parameters);
    public virtual Task`1<double> GetDoubleAsync(string sql, List`1<SugarParameter> parameters);
    public virtual decimal GetDecimal(string sql, object parameters);
    public virtual decimal GetDecimal(string sql, SugarParameter[] parameters);
    public virtual decimal GetDecimal(string sql, List`1<SugarParameter> parameters);
    public virtual Task`1<decimal> GetDecimalAsync(string sql, object parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<GetDecimalAsync>d__155")]
[DebuggerStepThroughAttribute]
public virtual Task`1<decimal> GetDecimalAsync(string sql, SugarParameter[] parameters);
    public virtual Task`1<decimal> GetDecimalAsync(string sql, List`1<SugarParameter> parameters);
    public virtual DateTime GetDateTime(string sql, object parameters);
    public virtual DateTime GetDateTime(string sql, SugarParameter[] parameters);
    public virtual DateTime GetDateTime(string sql, List`1<SugarParameter> parameters);
    public virtual Task`1<DateTime> GetDateTimeAsync(string sql, object parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<GetDateTimeAsync>d__161")]
[DebuggerStepThroughAttribute]
public virtual Task`1<DateTime> GetDateTimeAsync(string sql, SugarParameter[] parameters);
    public virtual Task`1<DateTime> GetDateTimeAsync(string sql, List`1<SugarParameter> parameters);
    public virtual List`1<T> SqlQuery(string sql, object parameters);
    public virtual List`1<T> SqlQuery(string sql, SugarParameter[] parameters);
    public sealed virtual List`1<T> MasterSqlQuery(string sql, object parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<MasterSqlQueryAasync>d__166`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> MasterSqlQueryAasync(string sql, object parameters);
    public virtual List`1<T> SqlQuery(string sql, List`1<SugarParameter> parameters);
    public sealed virtual Tuple`2<List`1<T>, List`1<T2>> SqlQuery(string sql, object parameters);
    public sealed virtual Tuple`3<List`1<T>, List`1<T2>, List`1<T3>> SqlQuery(string sql, object parameters);
    public sealed virtual Tuple`4<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>> SqlQuery(string sql, object parameters);
    public sealed virtual Tuple`5<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> SqlQuery(string sql, object parameters);
    public sealed virtual Tuple`6<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>> SqlQuery(string sql, object parameters);
    public sealed virtual Tuple`7<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>, List`1<T7>> SqlQuery(string sql, object parameters);
    public sealed virtual Task`1<List`1<T>> SqlQueryAsync(string sql, object parameters, CancellationToken token);
    public virtual Task`1<List`1<T>> SqlQueryAsync(string sql, object parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<SqlQueryAsync>d__176`1")]
[DebuggerStepThroughAttribute]
public virtual Task`1<List`1<T>> SqlQueryAsync(string sql, SugarParameter[] parameters);
    public virtual Task`1<List`1<T>> SqlQueryAsync(string sql, List`1<SugarParameter> parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<SqlQueryAsync>d__178`2")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Tuple`2<List`1<T>, List`1<T2>>> SqlQueryAsync(string sql, object parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<SqlQueryAsync>d__179`3")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Tuple`3<List`1<T>, List`1<T2>, List`1<T3>>> SqlQueryAsync(string sql, object parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<SqlQueryAsync>d__180`4")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Tuple`4<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>>> SqlQueryAsync(string sql, object parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<SqlQueryAsync>d__181`5")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Tuple`5<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> SqlQueryAsync(string sql, object parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<SqlQueryAsync>d__182`6")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Tuple`6<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>>> SqlQueryAsync(string sql, object parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<SqlQueryAsync>d__183`7")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Tuple`7<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>, List`1<T7>>> SqlQueryAsync(string sql, object parameters);
    public virtual T SqlQuerySingle(string sql, object parameters);
    public virtual T SqlQuerySingle(string sql, SugarParameter[] parameters);
    public virtual T SqlQuerySingle(string sql, List`1<SugarParameter> parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<SqlQuerySingleAsync>d__187`1")]
[DebuggerStepThroughAttribute]
public virtual Task`1<T> SqlQuerySingleAsync(string sql, object parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<SqlQuerySingleAsync>d__188`1")]
[DebuggerStepThroughAttribute]
public virtual Task`1<T> SqlQuerySingleAsync(string sql, SugarParameter[] parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<SqlQuerySingleAsync>d__189`1")]
[DebuggerStepThroughAttribute]
public virtual Task`1<T> SqlQuerySingleAsync(string sql, List`1<SugarParameter> parameters);
    public virtual DataTable GetDataTable(string sql, SugarParameter[] parameters);
    public virtual DataTable GetDataTable(string sql, object parameters);
    public virtual DataTable GetDataTable(string sql, List`1<SugarParameter> parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<GetDataTableAsync>d__193")]
[DebuggerStepThroughAttribute]
public virtual Task`1<DataTable> GetDataTableAsync(string sql, SugarParameter[] parameters);
    public virtual Task`1<DataTable> GetDataTableAsync(string sql, object parameters);
    public virtual Task`1<DataTable> GetDataTableAsync(string sql, List`1<SugarParameter> parameters);
    public virtual DataSet GetDataSetAll(string sql, object parameters);
    public virtual DataSet GetDataSetAll(string sql, List`1<SugarParameter> parameters);
    public virtual Task`1<DataSet> GetDataSetAllAsync(string sql, object parameters);
    public virtual Task`1<DataSet> GetDataSetAllAsync(string sql, List`1<SugarParameter> parameters);
    public virtual IDataReader GetDataReader(string sql, object parameters);
    public virtual IDataReader GetDataReader(string sql, List`1<SugarParameter> parameters);
    public virtual Task`1<IDataReader> GetDataReaderAsync(string sql, object parameters);
    public virtual Task`1<IDataReader> GetDataReaderAsync(string sql, List`1<SugarParameter> parameters);
    public virtual object GetScalar(string sql, object parameters);
    public virtual object GetScalar(string sql, List`1<SugarParameter> parameters);
    public virtual Task`1<object> GetScalarAsync(string sql, object parameters);
    public virtual Task`1<object> GetScalarAsync(string sql, List`1<SugarParameter> parameters);
    public virtual int ExecuteCommand(string sql, object parameters);
    public virtual int ExecuteCommand(string sql, List`1<SugarParameter> parameters);
    public sealed virtual Task`1<int> ExecuteCommandAsync(string sql, object parameters, CancellationToken cancellationToken);
    public virtual Task`1<int> ExecuteCommandAsync(string sql, object parameters);
    public virtual Task`1<int> ExecuteCommandAsync(string sql, List`1<SugarParameter> parameters);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<CloseAsync>d__213")]
[DebuggerStepThroughAttribute]
public Task CloseAsync();
    protected virtual void SugarCatch(Exception ex, string sql, SugarParameter[] parameters);
    public virtual void RemoveCancellationToken();
    protected void Async();
    private static bool NextResult(IDataReader dataReader);
    protected void ExecuteProcessingSQL(String& sql, SugarParameter[]& parameters);
    public virtual void ExecuteBefore(string sql, SugarParameter[] parameters);
    public virtual void ExecuteAfter(string sql, SugarParameter[] parameters);
    public virtual SugarParameter[] GetParameters(object parameters, PropertyInfo[] propertyInfo);
    protected bool IsAutoClose();
    protected bool get_IsMasterSlaveSeparation();
    protected void SetConnectionStart(string sql);
    private bool EqualsConnectionString(string connectionString1, string connectionString2);
    private bool IsFormat(SugarParameter[] parameters);
    protected void SetConnectionEnd(string sql);
    private bool IsRead(string sql);
    protected void ExecuteErrorEvent(string sql, SugarParameter[] parameters, Exception ex);
    protected void InitParameters(String& sql, SugarParameter[] parameters);
    private List`1<TResult> GetData(Type entityType, IDataReader dataReader);
    [AsyncStateMachineAttribute("SqlSugar.AdoProvider/<GetDataAsync>d__233`1")]
[DebuggerStepThroughAttribute]
private Task`1<List`1<TResult>> GetDataAsync(Type entityType, IDataReader dataReader);
    [CompilerGeneratedAttribute]
private bool <SetConnectionStart>b__225_3(IDbConnection it);
}
public class SqlSugar.AopEvents : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<DiffLogModel> <OnDiffLogEvent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<SqlSugarException> <OnError>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`2<string, SugarParameter[]> <OnLogExecuting>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`2<string, SugarParameter[]> <OnLogExecuted>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`3<string, SugarParameter[], KeyValuePair`2<string, SugarParameter[]>> <OnExecutingChangeSql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`2<object, DataFilterModel> <DataExecuting>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`2<object, DataFilterModel> <DataChangesExecuted>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`2<object, DataAfterModel> <DataExecuted>k__BackingField;
    public Action`1<DiffLogModel> OnDiffLogEvent { get; public set; }
    public Action`1<SqlSugarException> OnError { get; public set; }
    public Action`2<string, SugarParameter[]> OnLogExecuting { get; public set; }
    public Action`2<string, SugarParameter[]> OnLogExecuted { get; public set; }
    public Func`3<string, SugarParameter[], KeyValuePair`2<string, SugarParameter[]>> OnExecutingChangeSql { get; public set; }
    public Action`2<object, DataFilterModel> DataExecuting { get; public set; }
    public Action`2<object, DataFilterModel> DataChangesExecuted { get; public set; }
    public Action`2<object, DataAfterModel> DataExecuted { get; public set; }
    [CompilerGeneratedAttribute]
public Action`1<DiffLogModel> get_OnDiffLogEvent();
    [CompilerGeneratedAttribute]
public void set_OnDiffLogEvent(Action`1<DiffLogModel> value);
    [CompilerGeneratedAttribute]
public Action`1<SqlSugarException> get_OnError();
    [CompilerGeneratedAttribute]
public void set_OnError(Action`1<SqlSugarException> value);
    [CompilerGeneratedAttribute]
public Action`2<string, SugarParameter[]> get_OnLogExecuting();
    [CompilerGeneratedAttribute]
public void set_OnLogExecuting(Action`2<string, SugarParameter[]> value);
    [CompilerGeneratedAttribute]
public Action`2<string, SugarParameter[]> get_OnLogExecuted();
    [CompilerGeneratedAttribute]
public void set_OnLogExecuted(Action`2<string, SugarParameter[]> value);
    [CompilerGeneratedAttribute]
public Func`3<string, SugarParameter[], KeyValuePair`2<string, SugarParameter[]>> get_OnExecutingChangeSql();
    [CompilerGeneratedAttribute]
public void set_OnExecutingChangeSql(Func`3<string, SugarParameter[], KeyValuePair`2<string, SugarParameter[]>> value);
    [CompilerGeneratedAttribute]
public Action`2<object, DataFilterModel> get_DataExecuting();
    [CompilerGeneratedAttribute]
public void set_DataExecuting(Action`2<object, DataFilterModel> value);
    [CompilerGeneratedAttribute]
public Action`2<object, DataFilterModel> get_DataChangesExecuted();
    [CompilerGeneratedAttribute]
public void set_DataChangesExecuted(Action`2<object, DataFilterModel> value);
    [CompilerGeneratedAttribute]
public Action`2<object, DataAfterModel> get_DataExecuted();
    [CompilerGeneratedAttribute]
public void set_DataExecuted(Action`2<object, DataAfterModel> value);
}
public class SqlSugar.AopProvider : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    private SqlSugarProvider Context { get; private set; }
    unknown Action`1<DiffLogModel> OnDiffLogEvent {public set; }
    unknown Action`1<SqlSugarException> OnError {public set; }
    unknown Action`2<string, SugarParameter[]> OnLogExecuting {public set; }
    unknown Action`2<string, SugarParameter[]> OnLogExecuted {public set; }
    unknown Func`3<string, SugarParameter[], KeyValuePair`2<string, SugarParameter[]>> OnExecutingChangeSql {public set; }
    unknown Action`2<object, DataFilterModel> DataExecuting {public set; }
    unknown Action`2<object, DataFilterModel> DataChangesExecuted {public set; }
    unknown Action`2<object, DataAfterModel> DataExecuted {public set; }
    public AopProvider(SqlSugarProvider context);
    [CompilerGeneratedAttribute]
private SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(SqlSugarProvider value);
    public void set_OnDiffLogEvent(Action`1<DiffLogModel> value);
    public void set_OnError(Action`1<SqlSugarException> value);
    public void set_OnLogExecuting(Action`2<string, SugarParameter[]> value);
    public void set_OnLogExecuted(Action`2<string, SugarParameter[]> value);
    public void set_OnExecutingChangeSql(Func`3<string, SugarParameter[], KeyValuePair`2<string, SugarParameter[]>> value);
    public virtual void set_DataExecuting(Action`2<object, DataFilterModel> value);
    public void set_DataChangesExecuted(Action`2<object, DataFilterModel> value);
    public virtual void set_DataExecuted(Action`2<object, DataAfterModel> value);
}
internal class SqlSugar.AppendNavInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, MappingNavColumnInfo> <MappingNavProperties>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, string> <AppendProperties>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<AppendNavResult> <Result>k__BackingField;
    public Dictionary`2<string, MappingNavColumnInfo> MappingNavProperties { get; public set; }
    public Dictionary`2<string, string> AppendProperties { get; public set; }
    public List`1<AppendNavResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, MappingNavColumnInfo> get_MappingNavProperties();
    [CompilerGeneratedAttribute]
public void set_MappingNavProperties(Dictionary`2<string, MappingNavColumnInfo> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_AppendProperties();
    [CompilerGeneratedAttribute]
public void set_AppendProperties(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<AppendNavResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(List`1<AppendNavResult> value);
}
internal class SqlSugar.AppendNavResult : object {
    public Dictionary`2<string, object> result;
}
public enum SqlSugar.ApplyType : Enum {
    public int value__;
    public static ApplyType Cross;
    public static ApplyType Outer;
}
public class SqlSugar.ArrayFuncModel : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<object> <Objects>k__BackingField;
    public List`1<object> Objects { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<object> get_Objects();
    [CompilerGeneratedAttribute]
public void set_Objects(List`1<object> value);
}
public enum SqlSugar.AsNameFormatType : Enum {
    public int value__;
    public static AsNameFormatType Default;
    public static AsNameFormatType NoConvert;
}
public class SqlSugar.BaseResolve : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <ExactExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <IsLeft>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionParameter <BaseParameter>k__BackingField;
    protected static Dictionary`2<string, string> MethodMapping;
    protected static Dictionary`2<string, DateType> MethodTimeMapping;
    protected Expression Expression { get; protected set; }
    protected Expression ExactExpression { get; protected set; }
    public ExpressionContext Context { get; public set; }
    public Nullable`1<bool> IsLeft { get; public set; }
    public int ContentIndex { get; }
    public int Index { get; public set; }
    public ExpressionParameter BaseParameter { get; public set; }
    public BaseResolve(ExpressionParameter parameter);
    private static BaseResolve();
    public BaseResolve Start();
    protected void AppendMember(ExpressionParameter parameter, Nullable`1<bool> isLeft, object appendValue);
    protected void AppendValue(ExpressionParameter parameter, Nullable`1<bool> isLeft, object value);
    private object AppendOther(ExpressionParameter parameter, Nullable`1<bool> isLeft, object value);
    private object AppendUnaryExp(ExpressionParameter parameter, Nullable`1<bool> isLeft, object value, Expression oppoSiteExpression);
    private void AppendMember(ExpressionParameter parameter, Nullable`1<bool> isLeft, object value, Expression oppoSiteExpression);
    private void AppendMethod(ExpressionParameter parameter, Nullable`1<bool> isLeft, object value);
    private void ApppendMapperSql(ExpressionParameter parameter, Nullable`1<bool> isLeft, object value);
    protected void AppendOpreator(ExpressionParameter parameter, Nullable`1<bool> isLeft);
    protected string AppendParameter(object paramterValue);
    protected string AppendParameter(SugarParameter p);
    protected void AppendNot(object Value);
    protected void AppendNegate(object Value);
    private void AppendOnlyInSelectConvertToString(ExpressionParameter parameter, Expression item, string asName);
    protected void SetNavigateResult();
    private void SetParameter(Expression& expression, ExpressionParameter& parameter);
    protected object GetMemberValue(object value, Expression exp);
    private string GetAsName(Expression item, object shortName, PropertyInfo property);
    private string GetAsNameAndShortName(Expression item, object shortName, PropertyInfo property);
    private EntityColumnInfo GetColumnInfo(Expression oppoSiteExpression);
    protected MethodCallExpressionArgs GetMethodCallArgs(ExpressionParameter parameter, Expression item, string name);
    private string GetAsNameResolveAnObject(ExpressionParameter parameter, Expression item, string asName, bool isSameType);
    public object GetAsNamePackIfElse(object methodValue);
    private void ResloveOtherMUC(ExpressionParameter parameter, Expression item, string asName);
    private void ResloveCountAny(ExpressionParameter parameter, Expression item, string asName);
    private void ResloveNot(ExpressionParameter parameter, Expression item, string asName);
    private void ResloveBoolMethod(ExpressionParameter parameter, Expression item, string asName);
    private string ResolveClass(ExpressionParameter parameter, Expression item, string asName);
    private void ResolveBinary(Expression item, string asName);
    private void ResolveUnaryExpConst(ExpressionParameter parameter, Expression item, string asName);
    private void ResolveUnaryExpMem(ExpressionParameter parameter, Expression item, string asName);
    private void ResolveMemberOther(ExpressionParameter parameter, Expression item, string asName);
    private void ResolveMemberConst(ExpressionParameter parameter, Expression item, string asName);
    private void ResolveMember(ExpressionParameter parameter, Expression item, string asName);
    private void ResolveConst(ExpressionParameter parameter, Expression item, string asName);
    public string GetNewExpressionValue(Expression item);
    public string GetNewExpressionValue(Expression item, ResolveExpressType type);
    protected void ResolveNewExpressions(ExpressionParameter parameter, Expression item, string asName);
    [CompilerGeneratedAttribute]
protected Expression get_Expression();
    [CompilerGeneratedAttribute]
protected void set_Expression(Expression value);
    [CompilerGeneratedAttribute]
protected Expression get_ExactExpression();
    [CompilerGeneratedAttribute]
protected void set_ExactExpression(Expression value);
    [CompilerGeneratedAttribute]
public ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(ExpressionContext value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsLeft();
    [CompilerGeneratedAttribute]
public void set_IsLeft(Nullable`1<bool> value);
    public int get_ContentIndex();
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public ExpressionParameter get_BaseParameter();
    [CompilerGeneratedAttribute]
public void set_BaseParameter(ExpressionParameter value);
    private Dictionary`2<string, string> GetMappingColumns(Expression currentExpression);
    private static bool IsSubToList(Expression item);
    private static bool IsSubquery(Expression item);
    private bool IsExtSqlFuncObj(Expression item);
    private bool IsNullValue(ExpressionParameter parameter, object value);
    private static bool IsNotCaseExpression(Expression item);
    private static bool IsBoolValue(Expression item);
    protected static bool IsConvert(Expression item);
    protected static bool IsNotMember(Expression item);
    protected static bool IsNotParameter(Expression item);
    protected bool IsSubMethod(MethodCallExpression express);
}
public class SqlSugar.BinaryExpressionInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsLeft>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <ExpressionType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Value>k__BackingField;
    public bool IsLeft { get; public set; }
    public Type ExpressionType { get; public set; }
    public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsLeft();
    [CompilerGeneratedAttribute]
public void set_IsLeft(bool value);
    [CompilerGeneratedAttribute]
public Type get_ExpressionType();
    [CompilerGeneratedAttribute]
public void set_ExpressionType(Type value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
public class SqlSugar.BinaryExpressionResolve : BaseResolve {
    public BinaryExpressionResolve(ExpressionParameter parameter);
    private void Other(ExpressionParameter parameter);
    private bool IsBinaryGroup(string operatorValue, BinaryExpression expression);
    private bool IsUpdateArray(ExpressionParameter parameter, BinaryExpression expression, string operatorValue);
    private bool IsUpdateJson(ExpressionParameter parameter, BinaryExpression expression, string operatorValue);
    private void JoinString(ExpressionParameter parameter, BinaryExpression expression);
    private void DefaultBinary(ExpressionParameter parameter, BinaryExpression expression, string operatorValue);
    private void SubGroup(BinaryExpression expression, string operatorValue);
    private void ConvertExpression(Expression& leftExpression, Expression& rightExpression, bool isAppend);
    private void Right(ExpressionParameter parameter, string operatorValue, bool isEqual, Expression rightExpression, bool lsbs);
    private void Left(BinaryExpression expression, Expression leftExpression);
    private void InSubGroupByConvertExpress(BinaryExpression expression);
    private void InSubGroupBy(BinaryExpression expression, string not);
    private bool IsGroupSubquery(Expression rightExpression, string operatorValue);
    private static bool IsJoinString(BinaryExpression expression, string operatorValue);
    private static bool RightIsHasValue(Expression leftExpression, Expression rightExpression, bool isLogic);
}
public class SqlSugar.BlockExpressionResolve : BaseResolve {
    public BlockExpressionResolve(ExpressionParameter parameter);
}
public class SqlSugar.CacheKey : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AppendKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Database>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <Tables>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <IdentificationList>k__BackingField;
    public string AppendKey { get; public set; }
    public string Database { get; public set; }
    public List`1<string> Tables { get; public set; }
    public List`1<string> IdentificationList { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AppendKey();
    [CompilerGeneratedAttribute]
public void set_AppendKey(string value);
    [CompilerGeneratedAttribute]
public string get_Database();
    [CompilerGeneratedAttribute]
public void set_Database(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Tables();
    [CompilerGeneratedAttribute]
public void set_Tables(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_IdentificationList();
    [CompilerGeneratedAttribute]
public void set_IdentificationList(List`1<string> value);
    public string ToString();
}
internal class SqlSugar.CacheKeyBuider : object {
    public static CacheKey GetKey(SqlSugarProvider context, QueryBuilder queryBuilder);
    private static void AddIdentificationList(QueryBuilder queryBuilder, CacheKey result);
    private static void AddTables(ISqlSugarClient context, QueryBuilder queryBuilder, CacheKey result);
}
internal class SqlSugar.CacheSchemeMain : object {
    public static T GetOrCreate(ICacheService cacheService, QueryBuilder queryBuilder, Func`1<T> getData, int cacheDurationInSeconds, SqlSugarProvider context, string cacheKey);
    public static void RemoveCache(ICacheService cacheService, string tableName);
    public static void RemoveCacheByLike(ICacheService cacheService, string likeString);
}
internal class SqlSugar.CallContext : object {
    public static ThreadLocal`1<List`1<SqlSugarProvider>> ContextList;
    public static ThreadLocal`1<List`1<MapperExpression>> MapperExpression;
    private static CallContext();
}
public class SqlSugar.CallContextAsync`1 : object {
    private static ConcurrentDictionary`2<string, AsyncLocal`1<T>> state;
    private static CallContextAsync`1();
    public static void SetData(string name, T data);
    public static T GetData(string name);
}
public class SqlSugar.CallContextThread`1 : object {
    private static ConcurrentDictionary`2<string, ThreadLocal`1<T>> state;
    private static CallContextThread`1();
    public static void SetData(string name, T data);
    public static T GetData(string name);
}
public class SqlSugar.CaseThen : object {
    public CaseWhen Return(T result);
}
public class SqlSugar.CaseWhen : object {
    public CaseThen ElseIF(bool condition);
    public T End(T defaultValue);
    public T End();
}
public class SqlSugar.CaseWhenResolve : object {
    private List`1<MethodCallExpression> allMethods;
    private ExpressionContext context;
    public CaseWhenResolve(MethodCallExpression expression, ExpressionContext context, Expression oppsiteExpression);
    public string GetSql();
}
public class SqlSugar.Check : object {
    public static void ThrowNotSupportedException(string message);
    public static void ArgumentNullException(object checkObj, string message);
    public static void ArgumentNullException(Object[] checkObj, string message);
    public static void Exception(bool isException, string message, String[] args);
    public static void ExceptionEasy(string enMessage, string cnMessage);
    public static void ExceptionEasy(bool isException, string enMessage, string cnMessage);
}
public class SqlSugar.CoalesceResolveItems : MethodCallExpressionResolve {
    public CoalesceResolveItems(ExpressionParameter parameter);
}
public class SqlSugar.CodeFirstProvider : object {
    internal static object LockObject;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsBackupTable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <MaxBackupDataRows>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <DefultLength>k__BackingField;
    protected Dictionary`2<Type, string> MappingTables;
    public SqlSugarProvider Context { get; public set; }
    protected bool IsBackupTable { get; protected set; }
    protected int MaxBackupDataRows { get; protected set; }
    protected int DefultLength { get; protected set; }
    private static CodeFirstProvider();
    [CompilerGeneratedAttribute]
public virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public virtual void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
protected bool get_IsBackupTable();
    [CompilerGeneratedAttribute]
protected void set_IsBackupTable(bool value);
    [CompilerGeneratedAttribute]
protected int get_MaxBackupDataRows();
    [CompilerGeneratedAttribute]
protected void set_MaxBackupDataRows(int value);
    [CompilerGeneratedAttribute]
protected virtual int get_DefultLength();
    [CompilerGeneratedAttribute]
protected virtual void set_DefultLength(int value);
    public sealed virtual SplitCodeFirstProvider SplitTables();
    public virtual ICodeFirst BackupTable(int maxBackupDataRows);
    public virtual ICodeFirst SetStringDefaultLength(int length);
    public sealed virtual void InitTablesWithAttr(Type[] entityTypes);
    public virtual void InitTables(Type entityType);
    public sealed virtual void InitTables();
    public sealed virtual void InitTables();
    public sealed virtual void InitTables();
    public sealed virtual void InitTables();
    public sealed virtual void InitTables();
    public virtual void InitTables(Type[] entityTypes);
    public sealed virtual ICodeFirst As(Type type, string newTableName);
    public sealed virtual ICodeFirst As(string newTableName);
    public virtual void InitTables(string entitiesNamespace);
    public virtual void InitTables(String[] entitiesNamespaces);
    public sealed virtual TableDifferenceProvider GetDifferenceTables();
    public sealed virtual TableDifferenceProvider GetDifferenceTables(Type[] types);
    private void GetDifferenceTables(TableDifferenceProvider result, Type type);
    protected virtual void Execute(Type entityType, EntityInfo entityInfo);
    private void CreateIndex(EntityInfo entityInfo);
    public virtual void NoExistLogic(EntityInfo entityInfo);
    public virtual void ExistLogic(EntityInfo entityInfo);
    private bool IsNoSamePrecision(EntityColumnInfo ec, DbColumnInfo dc);
    protected virtual void KeyAction(EntityColumnInfo item, DbColumnInfo dbColumn, Boolean& pkDiff, Boolean& idEntityDiff);
    protected virtual void ChangeKey(EntityInfo entityInfo, string tableName, EntityColumnInfo item);
    protected virtual void ExistLogicEnd(List`1<EntityColumnInfo> dbColumns);
    protected virtual void ConvertColumns(List`1<DbColumnInfo> dbColumns);
    private void RestMappingTables(MappingTableList oldTableList);
    private MappingTableList CopyMappingTalbe();
    public virtual string GetCreateTableString(EntityInfo entityInfo);
    public virtual string GetCreateColumnsString(EntityInfo entityInfo);
    protected virtual string GetTableName(EntityInfo entityInfo);
    protected virtual DbColumnInfo EntityColumnToDbColumn(EntityInfo entityInfo, string tableName, EntityColumnInfo item);
    protected virtual void GetDbType(EntityColumnInfo item, Type propertyType, DbColumnInfo result);
    protected virtual bool IsNoSamgeType(EntityColumnInfo ec, DbColumnInfo dc);
    protected string GetType(string name);
}
[ExtensionAttribute]
public static class SqlSugar.CommonExtensions : object {
    [ExtensionAttribute]
public static string GetNonNegativeHashCodeString(string input);
    [ExtensionAttribute]
public static string SafeSubstring(string str, int startIndex, int length);
    [ExtensionAttribute]
public static Dictionary`2<string, object> ToDictionary(List`1<T> list, string keyPropertyName, string valuePropertyName);
    [ExtensionAttribute]
public static MethodInfo GetMyMethod(Type type, string name, int argCount);
    [ExtensionAttribute]
public static MethodInfo GetMyMethod(Type type, string name, int argCount, Type parameterType);
    [ExtensionAttribute]
public static MethodInfo GetMyMethod(Type type, string name, int argCount, bool isList);
    [ExtensionAttribute]
public static MethodInfo GetMyMethod(Type type, string name, int argCount, Type parameterType, Type parameterType2);
    [ExtensionAttribute]
public static MethodInfo GetMyMethodNoGen(Type type, string name, int argCount, Type parameterType, Type parameterType2);
    [ExtensionAttribute]
public static MethodInfo GetMyMethod(Type type, string name, int argCount, Type parameterType, Type parameterType2, Type parameterType3);
    [ExtensionAttribute]
public static MethodInfo GetMyMethod(Type type, string name, int argCount, Type parameterType, Type parameterType2, Type parameterType3, Type parameterType4);
    [ExtensionAttribute]
public static MethodInfo GetMyMethod(Type type, string name, int argCount, Type parameterType, Type parameterType2, Type parameterType3, Type parameterType4, Type parameterType5);
    [ExtensionAttribute]
public static List`1<T> ToList(T thisValue, Func`2<T, T> action);
    [ExtensionAttribute]
public static List`1<T> ToList(IEnumerable`1<T> thisValue, Func`2<T, T> action);
    [ExtensionAttribute]
public static IEnumerable`1<T> WhereIF(IEnumerable`1<T> thisValue, bool isOk, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<T> MappingField(IEnumerable`1<T> thisValue, Func`2<T, object> leftField, Func`1<object> rightField);
    [ExtensionAttribute]
public static List`1<T> MappingField(T thisValue, Func`2<T, object> leftField, Func`1<object> rightField);
    [ExtensionAttribute]
public static bool Any(IEnumerable`1<T> thisValue, List`1<IConditionalModel> conditionalModels);
    [ExtensionAttribute]
public static IEnumerable`1<T> Where(IEnumerable`1<T> thisValue, List`1<IConditionalModel> conditionalModels);
}
public class SqlSugar.CommonMethodInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Context>k__BackingField;
    internal object Context { get; internal set; }
    [CompilerGeneratedAttribute]
internal object get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(object value);
    public int ExecuteReturnIdentity();
    [AsyncStateMachineAttribute("SqlSugar.CommonMethodInfo/<ExecuteReturnIdentityAsync>d__5")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteReturnIdentityAsync();
    public int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.CommonMethodInfo/<ExecuteCommandAsync>d__7")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
}
public enum SqlSugar.CommonTempDataType : Enum {
    public int value__;
    public static CommonTempDataType Default;
    public static CommonTempDataType Result;
    public static CommonTempDataType Append;
    public static CommonTempDataType Simple;
}
public class SqlSugar.ConditionalCollections : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<KeyValuePair`2<WhereType, ConditionalModel>> <ConditionalList>k__BackingField;
    public List`1<KeyValuePair`2<WhereType, ConditionalModel>> ConditionalList { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<KeyValuePair`2<WhereType, ConditionalModel>> get_ConditionalList();
    [CompilerGeneratedAttribute]
public void set_ConditionalList(List`1<KeyValuePair`2<WhereType, ConditionalModel>> value);
}
public class SqlSugar.ConditionalExpressionResolve : MethodCallExpressionResolve {
    public ConditionalExpressionResolve(ExpressionParameter parameter);
    private static bool IsBoolMember(ConditionalExpression express);
}
public class SqlSugar.ConditionalModel : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FieldValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CSharpTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICustomConditionalFunc <CustomConditionalFunc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <CustomParameterValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConditionalType <ConditionalType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<string, object> <FieldValueConvertFunc>k__BackingField;
    public string FieldName { get; public set; }
    public string FieldValue { get; public set; }
    public string CSharpTypeName { get; public set; }
    public ICustomConditionalFunc CustomConditionalFunc { get; public set; }
    public object CustomParameterValue { get; public set; }
    public ConditionalType ConditionalType { get; public set; }
    [JsonIgnoreAttribute]
public Func`2<string, object> FieldValueConvertFunc { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public string get_FieldValue();
    [CompilerGeneratedAttribute]
public void set_FieldValue(string value);
    [CompilerGeneratedAttribute]
public string get_CSharpTypeName();
    [CompilerGeneratedAttribute]
public void set_CSharpTypeName(string value);
    [CompilerGeneratedAttribute]
public ICustomConditionalFunc get_CustomConditionalFunc();
    [CompilerGeneratedAttribute]
public void set_CustomConditionalFunc(ICustomConditionalFunc value);
    [CompilerGeneratedAttribute]
public object get_CustomParameterValue();
    [CompilerGeneratedAttribute]
public void set_CustomParameterValue(object value);
    [CompilerGeneratedAttribute]
public ConditionalType get_ConditionalType();
    [CompilerGeneratedAttribute]
public void set_ConditionalType(ConditionalType value);
    [CompilerGeneratedAttribute]
public Func`2<string, object> get_FieldValueConvertFunc();
    [CompilerGeneratedAttribute]
public void set_FieldValueConvertFunc(Func`2<string, object> value);
    public static List`1<IConditionalModel> Create(IConditionalModel[] conditionalModel);
}
public class SqlSugar.ConditionalTree : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<KeyValuePair`2<WhereType, IConditionalModel>> <ConditionalList>k__BackingField;
    public List`1<KeyValuePair`2<WhereType, IConditionalModel>> ConditionalList { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<KeyValuePair`2<WhereType, IConditionalModel>> get_ConditionalList();
    [CompilerGeneratedAttribute]
public void set_ConditionalList(List`1<KeyValuePair`2<WhereType, IConditionalModel>> value);
}
public enum SqlSugar.ConditionalType : Enum {
    public int value__;
    public static ConditionalType Equal;
    public static ConditionalType Like;
    public static ConditionalType GreaterThan;
    public static ConditionalType GreaterThanOrEqual;
    public static ConditionalType LessThan;
    public static ConditionalType LessThanOrEqual;
    public static ConditionalType In;
    public static ConditionalType NotIn;
    public static ConditionalType LikeLeft;
    public static ConditionalType LikeRight;
    public static ConditionalType NoEqual;
    public static ConditionalType IsNullOrEmpty;
    public static ConditionalType IsNot;
    public static ConditionalType NoLike;
    public static ConditionalType EqualNull;
    public static ConditionalType InLike;
    public static ConditionalType Range;
}
public class SqlSugar.ConfigQuery : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    public void SetTable(Expression`1<Func`2<T, object>> keyExpression, Expression`1<Func`2<T, object>> valueTextExpression, string uniqueCode, Expression`1<Func`2<T, object>> whereExpression);
    public void SetTable(Expression`1<Func`2<T, object>> key, Expression`1<Func`2<T, object>> value);
    public bool Any();
}
public class SqlSugar.ConfigTableInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Where>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SugarParameter> <Parameter>k__BackingField;
    public string Code { get; public set; }
    public Type Type { get; public set; }
    public string TableName { get; public set; }
    public string Key { get; public set; }
    public string Value { get; public set; }
    public string Where { get; public set; }
    public List`1<SugarParameter> Parameter { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Where();
    [CompilerGeneratedAttribute]
public void set_Where(string value);
    [CompilerGeneratedAttribute]
public List`1<SugarParameter> get_Parameter();
    [CompilerGeneratedAttribute]
public void set_Parameter(List`1<SugarParameter> value);
}
public class SqlSugar.ConfigureExternalServices : object {
    private ISerializeService _SerializeService;
    private ICacheService _ReflectionInoCache;
    private ICacheService _DataInfoCache;
    private IRazorService _RazorService;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISplitTableService <SplitTableService>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SqlFuncExternal> <SqlFuncServices>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<KeyValuePair`2<string, CSharpDataType>> <AppendDataReaderTypeMappings>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`2<PropertyInfo, EntityColumnInfo> <EntityService>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`2<Type, EntityInfo> <EntityNameService>k__BackingField;
    public ISplitTableService SplitTableService { get; public set; }
    public IRazorService RazorService { get; public set; }
    public ISerializeService SerializeService { get; public set; }
    public ICacheService ReflectionInoCacheService { get; public set; }
    public ICacheService DataInfoCacheService { get; public set; }
    public List`1<SqlFuncExternal> SqlFuncServices { get; public set; }
    public List`1<KeyValuePair`2<string, CSharpDataType>> AppendDataReaderTypeMappings { get; public set; }
    public Action`2<PropertyInfo, EntityColumnInfo> EntityService { get; public set; }
    public Action`2<Type, EntityInfo> EntityNameService { get; public set; }
    [CompilerGeneratedAttribute]
public ISplitTableService get_SplitTableService();
    [CompilerGeneratedAttribute]
public void set_SplitTableService(ISplitTableService value);
    public IRazorService get_RazorService();
    public void set_RazorService(IRazorService value);
    public ISerializeService get_SerializeService();
    public void set_SerializeService(ISerializeService value);
    public ICacheService get_ReflectionInoCacheService();
    public void set_ReflectionInoCacheService(ICacheService value);
    public ICacheService get_DataInfoCacheService();
    public void set_DataInfoCacheService(ICacheService value);
    [CompilerGeneratedAttribute]
public List`1<SqlFuncExternal> get_SqlFuncServices();
    [CompilerGeneratedAttribute]
public void set_SqlFuncServices(List`1<SqlFuncExternal> value);
    [CompilerGeneratedAttribute]
public List`1<KeyValuePair`2<string, CSharpDataType>> get_AppendDataReaderTypeMappings();
    [CompilerGeneratedAttribute]
public void set_AppendDataReaderTypeMappings(List`1<KeyValuePair`2<string, CSharpDataType>> value);
    [CompilerGeneratedAttribute]
public Action`2<PropertyInfo, EntityColumnInfo> get_EntityService();
    [CompilerGeneratedAttribute]
public void set_EntityService(Action`2<PropertyInfo, EntityColumnInfo> value);
    [CompilerGeneratedAttribute]
public Action`2<Type, EntityInfo> get_EntityNameService();
    [CompilerGeneratedAttribute]
public void set_EntityNameService(Action`2<Type, EntityInfo> value);
}
public class SqlSugar.ConnectionConfig : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <ConfigId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbType <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbLinkName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAutoCloseConnection>k__BackingField;
    public InitKeyType InitKeyType;
    [JsonIgnoreAttribute]
public ConfigureExternalServices ConfigureExternalServices;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SlaveConnectionConfig> <SlaveConnectionConfigs>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConnMoreSettings <MoreSettings>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <IndexSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AopEvents <AopEvents>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlMiddle <SqlMiddle>k__BackingField;
    public object ConfigId { get; public set; }
    public DbType DbType { get; public set; }
    public string ConnectionString { get; public set; }
    public string DbLinkName { get; public set; }
    public bool IsAutoCloseConnection { get; public set; }
    public LanguageType LanguageType { get; public set; }
    public List`1<SlaveConnectionConfig> SlaveConnectionConfigs { get; public set; }
    public ConnMoreSettings MoreSettings { get; public set; }
    public string IndexSuffix { get; public set; }
    [JsonIgnoreAttribute]
public AopEvents AopEvents { get; public set; }
    public SqlMiddle SqlMiddle { get; public set; }
    [CompilerGeneratedAttribute]
public object get_ConfigId();
    [CompilerGeneratedAttribute]
public void set_ConfigId(object value);
    [CompilerGeneratedAttribute]
public DbType get_DbType();
    [CompilerGeneratedAttribute]
public void set_DbType(DbType value);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public string get_DbLinkName();
    [CompilerGeneratedAttribute]
public void set_DbLinkName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAutoCloseConnection();
    [CompilerGeneratedAttribute]
public void set_IsAutoCloseConnection(bool value);
    public LanguageType get_LanguageType();
    public void set_LanguageType(LanguageType value);
    [CompilerGeneratedAttribute]
public List`1<SlaveConnectionConfig> get_SlaveConnectionConfigs();
    [CompilerGeneratedAttribute]
public void set_SlaveConnectionConfigs(List`1<SlaveConnectionConfig> value);
    [CompilerGeneratedAttribute]
public ConnMoreSettings get_MoreSettings();
    [CompilerGeneratedAttribute]
public void set_MoreSettings(ConnMoreSettings value);
    [CompilerGeneratedAttribute]
public string get_IndexSuffix();
    [CompilerGeneratedAttribute]
public void set_IndexSuffix(string value);
    [CompilerGeneratedAttribute]
public AopEvents get_AopEvents();
    [CompilerGeneratedAttribute]
public void set_AopEvents(AopEvents value);
    [CompilerGeneratedAttribute]
public SqlMiddle get_SqlMiddle();
    [CompilerGeneratedAttribute]
public void set_SqlMiddle(SqlMiddle value);
}
public class SqlSugar.ConnMoreSettings : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAutoRemoveDataCache>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsWithNoLockQuery>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DisableWithNoLockWithTran>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsWithNoLockSubquery>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DisableNvarchar>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DisableMillisecond>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <PgSqlIsAutoToLower>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <PgSqlIsAutoToLowerCodeFirst>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <EnableILike>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAutoToUpper>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <DefaultCacheDurationInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <TableEnumIsString>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTime> <DbMinDate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNoReadXmlDescription>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <SqlServerCodeFirstNvarchar>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <OracleCodeFirstNvarchar2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <SqliteCodeFirstEnableDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <SqliteCodeFirstEnableDescription>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAutoUpdateQueryFilter>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAutoDeleteQueryFilter>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <EnableModelFuncMappingColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <EnableOracleIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <EnableCodeFirstUpdatePrecision>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <SqliteCodeFirstEnableDropColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsCorrectErrorSqlParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <MaxParameterNameLength>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DisableQueryWhereColumnRemoveTrim>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DbType> <DatabaseModel>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ClickHouseEnableFinal>k__BackingField;
    public bool IsAutoRemoveDataCache { get; public set; }
    public bool IsWithNoLockQuery { get; public set; }
    public bool DisableWithNoLockWithTran { get; public set; }
    public bool IsWithNoLockSubquery { get; public set; }
    public bool DisableNvarchar { get; public set; }
    public bool DisableMillisecond { get; public set; }
    public bool PgSqlIsAutoToLower { get; public set; }
    public bool PgSqlIsAutoToLowerCodeFirst { get; public set; }
    public bool EnableILike { get; public set; }
    public bool IsAutoToUpper { get; public set; }
    public int DefaultCacheDurationInSeconds { get; public set; }
    public Nullable`1<bool> TableEnumIsString { get; public set; }
    public Nullable`1<DateTime> DbMinDate { get; public set; }
    public bool IsNoReadXmlDescription { get; public set; }
    public bool SqlServerCodeFirstNvarchar { get; public set; }
    public bool OracleCodeFirstNvarchar2 { get; public set; }
    public bool SqliteCodeFirstEnableDefaultValue { get; public set; }
    public bool SqliteCodeFirstEnableDescription { get; public set; }
    public bool IsAutoUpdateQueryFilter { get; public set; }
    public bool IsAutoDeleteQueryFilter { get; public set; }
    public bool EnableModelFuncMappingColumn { get; public set; }
    public bool EnableOracleIdentity { get; public set; }
    public bool EnableCodeFirstUpdatePrecision { get; public set; }
    public bool SqliteCodeFirstEnableDropColumn { get; public set; }
    public bool IsCorrectErrorSqlParameterName { get; public set; }
    public int MaxParameterNameLength { get; public set; }
    public bool DisableQueryWhereColumnRemoveTrim { get; public set; }
    public Nullable`1<DbType> DatabaseModel { get; public set; }
    public bool ClickHouseEnableFinal { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsAutoRemoveDataCache();
    [CompilerGeneratedAttribute]
public void set_IsAutoRemoveDataCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsWithNoLockQuery();
    [CompilerGeneratedAttribute]
public void set_IsWithNoLockQuery(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableWithNoLockWithTran();
    [CompilerGeneratedAttribute]
public void set_DisableWithNoLockWithTran(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsWithNoLockSubquery();
    [CompilerGeneratedAttribute]
public void set_IsWithNoLockSubquery(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableNvarchar();
    [CompilerGeneratedAttribute]
public void set_DisableNvarchar(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableMillisecond();
    [CompilerGeneratedAttribute]
public void set_DisableMillisecond(bool value);
    [CompilerGeneratedAttribute]
public bool get_PgSqlIsAutoToLower();
    [CompilerGeneratedAttribute]
public void set_PgSqlIsAutoToLower(bool value);
    [CompilerGeneratedAttribute]
public bool get_PgSqlIsAutoToLowerCodeFirst();
    [CompilerGeneratedAttribute]
public void set_PgSqlIsAutoToLowerCodeFirst(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableILike();
    [CompilerGeneratedAttribute]
public void set_EnableILike(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAutoToUpper();
    [CompilerGeneratedAttribute]
public void set_IsAutoToUpper(bool value);
    [CompilerGeneratedAttribute]
public int get_DefaultCacheDurationInSeconds();
    [CompilerGeneratedAttribute]
public void set_DefaultCacheDurationInSeconds(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TableEnumIsString();
    [CompilerGeneratedAttribute]
public void set_TableEnumIsString(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_DbMinDate();
    [CompilerGeneratedAttribute]
public void set_DbMinDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public bool get_IsNoReadXmlDescription();
    [CompilerGeneratedAttribute]
public void set_IsNoReadXmlDescription(bool value);
    [CompilerGeneratedAttribute]
public bool get_SqlServerCodeFirstNvarchar();
    [CompilerGeneratedAttribute]
public void set_SqlServerCodeFirstNvarchar(bool value);
    [CompilerGeneratedAttribute]
public bool get_OracleCodeFirstNvarchar2();
    [CompilerGeneratedAttribute]
public void set_OracleCodeFirstNvarchar2(bool value);
    [CompilerGeneratedAttribute]
public bool get_SqliteCodeFirstEnableDefaultValue();
    [CompilerGeneratedAttribute]
public void set_SqliteCodeFirstEnableDefaultValue(bool value);
    [CompilerGeneratedAttribute]
public bool get_SqliteCodeFirstEnableDescription();
    [CompilerGeneratedAttribute]
public void set_SqliteCodeFirstEnableDescription(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAutoUpdateQueryFilter();
    [CompilerGeneratedAttribute]
public void set_IsAutoUpdateQueryFilter(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAutoDeleteQueryFilter();
    [CompilerGeneratedAttribute]
public void set_IsAutoDeleteQueryFilter(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableModelFuncMappingColumn();
    [CompilerGeneratedAttribute]
public void set_EnableModelFuncMappingColumn(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableOracleIdentity();
    [CompilerGeneratedAttribute]
public void set_EnableOracleIdentity(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableCodeFirstUpdatePrecision();
    [CompilerGeneratedAttribute]
public void set_EnableCodeFirstUpdatePrecision(bool value);
    [CompilerGeneratedAttribute]
public bool get_SqliteCodeFirstEnableDropColumn();
    [CompilerGeneratedAttribute]
public void set_SqliteCodeFirstEnableDropColumn(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCorrectErrorSqlParameterName();
    [CompilerGeneratedAttribute]
public void set_IsCorrectErrorSqlParameterName(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxParameterNameLength();
    [CompilerGeneratedAttribute]
public void set_MaxParameterNameLength(int value);
    [CompilerGeneratedAttribute]
public bool get_DisableQueryWhereColumnRemoveTrim();
    [CompilerGeneratedAttribute]
public void set_DisableQueryWhereColumnRemoveTrim(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DbType> get_DatabaseModel();
    [CompilerGeneratedAttribute]
public void set_DatabaseModel(Nullable`1<DbType> value);
    [CompilerGeneratedAttribute]
public bool get_ClickHouseEnableFinal();
    [CompilerGeneratedAttribute]
public void set_ClickHouseEnableFinal(bool value);
}
public class SqlSugar.ConstantExpressionResolve : BaseResolve {
    public ConstantExpressionResolve(ExpressionParameter parameter);
    private void CustomConstant(ExpressionParameter parameter, string customParameter);
    private string GetCustomParameter(ExpressionParameter parameter, ConstantExpression expression);
    private void DefaultConstant(ExpressionParameter parameter, ConstantExpression expression);
    private object ConvetValue(ExpressionParameter parameter, ConstantExpression expression, object value);
    private object ConvertEnum(object value);
    private bool IsEnumString(object value);
}
public class SqlSugar.ContextMethods : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private QueryBuilder <QueryBuilder>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public QueryBuilder QueryBuilder { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual QueryBuilder get_QueryBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QueryBuilder(QueryBuilder value);
    public sealed virtual List`1<T> DataReaderToValueTupleType(IDataReader reader);
    [AsyncStateMachineAttribute("SqlSugar.ContextMethods/<DataReaderToValueTupleTypeAsync>d__9`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> DataReaderToValueTupleTypeAsync(IDataReader reader);
    public sealed virtual ExpandoObject DataReaderToExpandoObject(IDataReader reader);
    public sealed virtual List`1<ExpandoObject> DataReaderToExpandoObjectList(IDataReader reader);
    [AsyncStateMachineAttribute("SqlSugar.ContextMethods/<DataReaderToExpandoObjectListAsync>d__12")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<ExpandoObject>> DataReaderToExpandoObjectListAsync(IDataReader reader);
    public sealed virtual List`1<ExpandoObject> DataReaderToExpandoObjectListNoUsing(IDataReader reader);
    [AsyncStateMachineAttribute("SqlSugar.ContextMethods/<DataReaderToExpandoObjectListAsyncNoUsing>d__14")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<ExpandoObject>> DataReaderToExpandoObjectListAsyncNoUsing(IDataReader reader);
    public Dictionary`2<string, object> DataReaderToDictionary(IDataReader reader);
    public Dictionary`2<string, object> DataReaderToDictionary(IDataReader reader, Type type);
    public sealed virtual List`1<T> DataReaderToList(IDataReader reader);
    public sealed virtual List`1<T> DataReaderToSelectJsonList(IDataReader dataReader);
    public sealed virtual List`1<T> DataReaderToSelectArrayList(IDataReader dataReader);
    public sealed virtual List`1<T> DataReaderToListNoUsing(IDataReader reader);
    [AsyncStateMachineAttribute("SqlSugar.ContextMethods/<DataReaderToListAsync>d__21`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> DataReaderToListAsync(IDataReader reader);
    [AsyncStateMachineAttribute("SqlSugar.ContextMethods/<DataReaderToSelectJsonListAsync>d__22`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> DataReaderToSelectJsonListAsync(IDataReader dataReader);
    [AsyncStateMachineAttribute("SqlSugar.ContextMethods/<DataReaderToSelectArrayListAsync>d__23`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> DataReaderToSelectArrayListAsync(IDataReader dataReader);
    [AsyncStateMachineAttribute("SqlSugar.ContextMethods/<DataReaderToListAsyncNoUsing>d__24`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> DataReaderToListAsyncNoUsing(IDataReader reader);
    private Dictionary`2<string, object> DataReaderToList(IDataReader reader, Type tType, List`1<PropertyInfo> classProperties, List`1<T> reval);
    private void SetAppendColumns(IDataReader dataReader);
    private static bool IsBytes(Dictionary`2<string, object> readerValues, PropertyInfo item);
    private static bool IsJsonItem(Dictionary`2<string, object> readerValuesOld, string name);
    private static bool IsArrayItem(Dictionary`2<string, object> readerValues, PropertyInfo item);
    private static bool IsJsonList(Dictionary`2<string, object> readerValues, PropertyInfo item);
    private Dictionary`2<string, object> DataReaderToDynamicList_Part(Dictionary`2<string, object> readerValues, PropertyInfo item, List`1<T> reval, Dictionary`2<string, string> mappingKeys);
    private void Json(Dictionary`2<string, object> readerValues, Dictionary`2<string, object> result, string name, string typeName, string shortName, PropertyInfo item);
    private void Json(Dictionary`2<string, object> readerValues, Dictionary`2<string, object> result, string name, string typeName, PropertyInfo item);
    private void AddJson(Dictionary`2<string, object> result, string name, object jsonString);
    public sealed virtual string SerializeObject(object value);
    public sealed virtual string SerializeObject(object value, Type type);
    public sealed virtual T DeserializeObject(string value);
    public sealed virtual T TranslateCopy(T sourceObject);
    public sealed virtual SqlSugarProvider CopyContext(bool isCopyEvents);
    public sealed virtual DataTable DictionaryListToDataTable(List`1<Dictionary`2<string, object>> list);
    public sealed virtual object DataTableToDynamic(DataTable table);
    public sealed virtual List`1<T> DataTableToList(DataTable table);
    public sealed virtual DataTable ListToDataTable(List`1<T> list);
    public sealed virtual DataTable ListToDataTableWithAttr(List`1<T> list);
    public sealed virtual Dictionary`2<string, object> DataTableToDictionary(DataTable table);
    public sealed virtual List`1<Dictionary`2<string, object>> DataTableToDictionaryList(DataTable dt);
    public sealed virtual ICacheService GetReflectionInoCacheInstance();
    public sealed virtual void RemoveCacheAll();
    public sealed virtual void RemoveCacheAll();
    public sealed virtual void RemoveCache(string key);
    public sealed virtual void RemoveCacheByLikeKey(string key);
    public sealed virtual void PageEach(IEnumerable`1<T> pageItems, int pageSize, Action`1<List`1<T>> action);
    [AsyncStateMachineAttribute("SqlSugar.ContextMethods/<PageEachAsync>d__53`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task PageEachAsync(IEnumerable`1<T> pageItems, int pageSize, Func`2<List`1<T>, Task> action);
    [AsyncStateMachineAttribute("SqlSugar.ContextMethods/<PageEachAsync>d__54`2")]
[DebuggerStepThroughAttribute]
public sealed virtual Task PageEachAsync(IEnumerable`1<T> pageItems, int pageSize, Func`2<List`1<T>, Task`1<ResultType>> action);
    public sealed virtual KeyValuePair`2<string, SugarParameter[]> ConditionalModelsToSql(List`1<IConditionalModel> conditionalModels, int beginIndex);
    public sealed virtual List`1<IConditionalModel> JsonToConditionalModels(string json);
    private static List`1<KeyValuePair`2<WhereType, IConditionalModel>> GetConditionalList(JToken item);
    private static ConditionalType GetConditionalType(JToken value);
    public sealed virtual List`1<T> ToTree(List`1<T> list, Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, Expression`1<Func`2<T, object>> pkExpression, object rootValue);
    private bool IsObjct(JToken sqlfunc);
    private bool IsArray(string sqlfunc);
    public static bool IsSqlFunc(JToken item, string fileName);
    private bool IsObject(JToken parameters);
    private bool IsArray(JToken parameters);
    private bool IsString(JToken parameters);
    private bool IsFieldName(JToken item);
    private bool IsArraySingleItem(JToken item);
    public ObjectFuncModel JsonToSqlFuncModels(JToken sqlfunc);
    public sealed virtual IFuncModel JsonToSqlFuncModels(string sqlfunc);
    private ObjectFuncModel GetFuncModelByArray(JToken sqlfunc);
    private ObjectFuncModel GetFuncModelByObject(JToken key);
    private IFuncModel GetFuncModelByObject(string sqlfunc);
    private IFuncModel GetFuncModelByArray(string sqlfunc);
    public List`1<object> GetParameter(JToken parameters);
    private static List`1<object> GetObjectErrorParameters(JToken parameters);
    public List`1<object> GetArrayParameters(JToken parameters);
    public object GetObjectParameters(JToken parameters);
    public object GetStringParameters(JToken parameters);
    public sealed virtual List`1<Dictionary`2<string, object>> JsonToColumnsModels(string json);
    private List`1<Dictionary`2<string, object>> GetColumnsByObject(string json);
    private List`1<Dictionary`2<string, object>> GetColumnsByArray(string json);
    private Dictionary`2<string, object> GetColumns(Dictionary`2<string, object> dictionary);
    private static object GetValue(KeyValuePair`2<string, object> item);
    public sealed virtual List`1<GroupByModel> JsonToGroupByModels(string json);
    public sealed virtual JoinModel JsonToJoinModels(string json);
    public sealed virtual List`1<OrderByModel> JsonToOrderByModels(string json);
    public sealed virtual List`1<SelectModel> JsonToSelectModels(string json);
}
public enum SqlSugar.CSharpDataType : Enum {
    public int value__;
    public static CSharpDataType int;
    public static CSharpDataType bool;
    public static CSharpDataType string;
    public static CSharpDataType DateTime;
    public static CSharpDataType decimal;
    public static CSharpDataType double;
    public static CSharpDataType Guid;
    public static CSharpDataType byte;
    public static CSharpDataType sbyte;
    public static CSharpDataType enum;
    public static CSharpDataType short;
    public static CSharpDataType long;
    public static CSharpDataType object;
    public static CSharpDataType other;
    public static CSharpDataType byteArray;
    public static CSharpDataType float;
    public static CSharpDataType time;
    public static CSharpDataType DateTimeOffset;
    public static CSharpDataType Single;
    public static CSharpDataType TimeSpan;
    public static CSharpDataType char;
}
public class SqlSugar.DataAfterModel : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<EntityColumnInfo> <EntityColumnInfos>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <EntityValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <Entity>k__BackingField;
    public List`1<EntityColumnInfo> EntityColumnInfos { get; public set; }
    public object EntityValue { get; public set; }
    public EntityInfo Entity { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<EntityColumnInfo> get_EntityColumnInfos();
    [CompilerGeneratedAttribute]
public void set_EntityColumnInfos(List`1<EntityColumnInfo> value);
    [CompilerGeneratedAttribute]
public object get_EntityValue();
    [CompilerGeneratedAttribute]
public void set_EntityValue(object value);
    [CompilerGeneratedAttribute]
public EntityInfo get_Entity();
    [CompilerGeneratedAttribute]
public void set_Entity(EntityInfo value);
    public object GetValue(string propertyName);
    public void SetValue(string propertyName, object value);
}
public class SqlSugar.DataFilterModel : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DataFilterType <OperationType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityColumnInfo <EntityColumnInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <EntityValue>k__BackingField;
    public DataFilterType OperationType { get; public set; }
    public EntityColumnInfo EntityColumnInfo { get; public set; }
    public object EntityValue { get; public set; }
    public string PropertyName { get; }
    public string EntityName { get; }
    [CompilerGeneratedAttribute]
public DataFilterType get_OperationType();
    [CompilerGeneratedAttribute]
public void set_OperationType(DataFilterType value);
    [CompilerGeneratedAttribute]
public EntityColumnInfo get_EntityColumnInfo();
    [CompilerGeneratedAttribute]
public void set_EntityColumnInfo(EntityColumnInfo value);
    [CompilerGeneratedAttribute]
public object get_EntityValue();
    [CompilerGeneratedAttribute]
public void set_EntityValue(object value);
    public string get_PropertyName();
    public string get_EntityName();
    public void SetValue(object value);
    public bool IsAnyAttribute();
    public T GetAttribute();
}
public enum SqlSugar.DataFilterType : Enum {
    public int value__;
    public static DataFilterType UpdateByObject;
    public static DataFilterType InsertByObject;
    public static DataFilterType DeleteByObject;
}
[ExtensionAttribute]
internal static class SqlSugar.DataTableExtensions : object {
    [ExtensionAttribute]
public static DataTable ToPivotTable(IEnumerable`1<T> source, Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
    [ExtensionAttribute]
public static IEnumerable`1<object> ToPivotList(IEnumerable`1<T> source, Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
}
public class SqlSugar.DataTableGroups : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DataTable <DataTable>k__BackingField;
    public string Type { get; public set; }
    public DataTable DataTable { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public DataTable get_DataTable();
    [CompilerGeneratedAttribute]
public void set_DataTable(DataTable value);
}
public class SqlSugar.DataTableResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DataTableGroups> <DataTableGroups>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IUpdateable`1<Dictionary`2<string, object>> <AsUpdateable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDeleteable`1<object> <AsDeleteable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IInsertable`1<Dictionary`2<string, object>> <AsInsertable>k__BackingField;
    public List`1<DataTableGroups> DataTableGroups { get; public set; }
    public IUpdateable`1<Dictionary`2<string, object>> AsUpdateable { get; public set; }
    public IDeleteable`1<object> AsDeleteable { get; public set; }
    public IInsertable`1<Dictionary`2<string, object>> AsInsertable { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<DataTableGroups> get_DataTableGroups();
    [CompilerGeneratedAttribute]
public void set_DataTableGroups(List`1<DataTableGroups> value);
    [CompilerGeneratedAttribute]
public IUpdateable`1<Dictionary`2<string, object>> get_AsUpdateable();
    [CompilerGeneratedAttribute]
public void set_AsUpdateable(IUpdateable`1<Dictionary`2<string, object>> value);
    [CompilerGeneratedAttribute]
public IDeleteable`1<object> get_AsDeleteable();
    [CompilerGeneratedAttribute]
public void set_AsDeleteable(IDeleteable`1<object> value);
    [CompilerGeneratedAttribute]
public IInsertable`1<Dictionary`2<string, object>> get_AsInsertable();
    [CompilerGeneratedAttribute]
public void set_AsInsertable(IInsertable`1<Dictionary`2<string, object>> value);
}
public class SqlSugar.DateSplitTableService : object {
    public virtual List`1<SplitTableInfo> GetAllTables(ISqlSugarClient db, EntityInfo EntityInfo, List`1<DbTableInfo> tableInfos);
    public virtual string GetTableName(ISqlSugarClient db, EntityInfo EntityInfo);
    public virtual string GetTableName(ISqlSugarClient db, EntityInfo EntityInfo, SplitType splitType);
    public virtual string GetTableName(ISqlSugarClient db, EntityInfo entityInfo, SplitType splitType, object fieldValue);
    public virtual object GetFieldValue(ISqlSugarClient db, EntityInfo entityInfo, SplitType splitType, object entityValue);
    public void VerifySplitType(SplitType splitType);
    private string GetTableNameByDate(EntityInfo EntityInfo, SplitType splitType, DateTime date);
    private DateTime GetDate(string group1, string group2, string group3, string dbTableName);
    private string PadLeft2(string str);
    private static void CheckTableName(string dbTableName);
    private DateTime ConvertDateBySplitType(DateTime time, SplitType type);
    private DateTime GetMondayDate();
    private DateTime GetSundayDate();
    private DateTime GetMondayDate(DateTime someDate);
    private DateTime GetSundayDate(DateTime someDate);
}
public enum SqlSugar.DateType : Enum {
    public int value__;
    public static DateType Year;
    public static DateType Month;
    public static DateType Day;
    public static DateType Hour;
    public static DateType Second;
    public static DateType Minute;
    public static DateType Millisecond;
    public static DateType Weekday;
    public static DateType Quarter;
}
public class SqlSugar.DbBindAccessory : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private QueryBuilder <QueryBuilder>k__BackingField;
    public QueryBuilder QueryBuilder { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual QueryBuilder get_QueryBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QueryBuilder(QueryBuilder value);
    protected List`1<T> GetEntityList(SqlSugarProvider context, IDataReader dataReader);
    [AsyncStateMachineAttribute("SqlSugar.DbBindAccessory/<GetEntityListAsync>d__5`1")]
[DebuggerStepThroughAttribute]
protected Task`1<List`1<T>> GetEntityListAsync(SqlSugarProvider context, IDataReader dataReader);
    private Task`1<bool> GetReadAsync(IDataReader dataReader, SqlSugarProvider context);
    private void SetOwnsOne(object addItem, bool isOwnsOne, EntityInfo entityInfo, IDataReader dataReader);
    private void FormatT(T addItem);
    private static void ExecuteDataAfterFun(SqlSugarProvider context, Action`2<object, DataAfterModel> dataAfterFunc, List`1<T> result);
    private string GetCacheKey(Type type, List`1<string> keys);
    private void SetAppendColumns(IDataReader dataReader);
    private List`1<string> GetDataReaderNames(IDataReader dataReader, String& types);
    protected List`1<T> GetKeyValueList(Type type, IDataReader dataReader);
    [AsyncStateMachineAttribute("SqlSugar.DbBindAccessory/<GetKeyValueListAsync>d__14`1")]
[DebuggerStepThroughAttribute]
protected Task`1<List`1<T>> GetKeyValueListAsync(Type type, IDataReader dataReader);
    private static void GetKeyValueList(Type type, IDataReader dataReader, List`1<T> result);
    [AsyncStateMachineAttribute("SqlSugar.DbBindAccessory/<GetArrayListAsync>d__16`1")]
[DebuggerStepThroughAttribute]
protected Task`1<List`1<T>> GetArrayListAsync(Type type, IDataReader dataReader);
    protected List`1<T> GetArrayList(Type type, IDataReader dataReader);
    private static void GetArrayList(Type type, IDataReader dataReader, List`1<T> result, int count, Type childType);
    protected List`1<T> GetValueTypeList(Type type, IDataReader dataReader);
    [AsyncStateMachineAttribute("SqlSugar.DbBindAccessory/<GetValueTypeListAsync>d__20`1")]
[DebuggerStepThroughAttribute]
protected Task`1<List`1<T>> GetValueTypeListAsync(Type type, IDataReader dataReader);
    private static void GetValueTypeList(Type type, IDataReader dataReader, List`1<T> result);
}
public abstract class SqlSugar.DbBindProvider : DbBindAccessory {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypes { get; }
    public List`1<string> IntThrow { get; }
    public List`1<string> ShortThrow { get; }
    public List`1<string> DecimalThrow { get; }
    public List`1<string> DoubleThrow { get; }
    public List`1<string> DateThrow { get; }
    public List`1<string> GuidThrow { get; }
    public List`1<string> StringThrow { get; }
    [CompilerGeneratedAttribute]
public virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public virtual void set_Context(SqlSugarProvider value);
    public abstract virtual List`1<KeyValuePair`2<string, CSharpDataType>> get_MappingTypes();
    public virtual string GetDbTypeName(string csharpTypeName);
    public sealed virtual string GetCsharpTypeName(string dbTypeName);
    public sealed virtual string GetCsharpTypeNameByDbTypeName(string dbTypeName);
    public virtual string GetConvertString(string dbTypeName);
    public virtual string GetPropertyTypeName(string dbTypeName);
    public virtual List`1<T> DataReaderToList(Type type, IDataReader dataReader);
    [AsyncStateMachineAttribute("SqlSugar.DbBindProvider/<DataReaderToListAsync>d__12`1")]
[DebuggerStepThroughAttribute]
public virtual Task`1<List`1<T>> DataReaderToListAsync(Type type, IDataReader dataReader);
    public virtual List`1<T> DataReaderToListNoUsing(Type type, IDataReader dataReader);
    public virtual Task`1<List`1<T>> DataReaderToListNoUsingAsync(Type type, IDataReader dataReader);
    public virtual List`1<string> get_IntThrow();
    public virtual List`1<string> get_ShortThrow();
    public virtual List`1<string> get_DecimalThrow();
    public virtual List`1<string> get_DoubleThrow();
    public virtual List`1<string> get_DateThrow();
    public virtual List`1<string> get_GuidThrow();
    public virtual List`1<string> get_StringThrow();
}
public class SqlSugar.DbColumnInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <TableId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <OracleDataType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <PropertyType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ColumnDescription>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsPrimarykey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <DecimalDigits>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsArray>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsJson>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <IsUnsigned>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <CreateTableFieldSort>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <InsertServerTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <InsertSql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UpdateServerTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UpdateSql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <SqlParameterDbType>k__BackingField;
    public string TableName { get; public set; }
    public int TableId { get; public set; }
    public string DbColumnName { get; public set; }
    public string PropertyName { get; public set; }
    public string DataType { get; public set; }
    public string OracleDataType { get; public set; }
    public Type PropertyType { get; public set; }
    public int Length { get; public set; }
    public string ColumnDescription { get; public set; }
    public string DefaultValue { get; public set; }
    public bool IsNullable { get; public set; }
    public bool IsIdentity { get; public set; }
    public bool IsPrimarykey { get; public set; }
    public object Value { get; public set; }
    public int DecimalDigits { get; public set; }
    public int Scale { get; public set; }
    public bool IsArray { get; public set; }
    public bool IsJson { get; public set; }
    public Nullable`1<bool> IsUnsigned { get; public set; }
    public int CreateTableFieldSort { get; public set; }
    public bool InsertServerTime { get; public set; }
    public string InsertSql { get; public set; }
    public bool UpdateServerTime { get; public set; }
    public string UpdateSql { get; public set; }
    public object SqlParameterDbType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public int get_TableId();
    [CompilerGeneratedAttribute]
public void set_TableId(int value);
    [CompilerGeneratedAttribute]
public string get_DbColumnName();
    [CompilerGeneratedAttribute]
public void set_DbColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(string value);
    [CompilerGeneratedAttribute]
public string get_OracleDataType();
    [CompilerGeneratedAttribute]
public void set_OracleDataType(string value);
    [CompilerGeneratedAttribute]
public Type get_PropertyType();
    [CompilerGeneratedAttribute]
public void set_PropertyType(Type value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    [CompilerGeneratedAttribute]
public string get_ColumnDescription();
    [CompilerGeneratedAttribute]
public void set_ColumnDescription(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsIdentity();
    [CompilerGeneratedAttribute]
public void set_IsIdentity(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPrimarykey();
    [CompilerGeneratedAttribute]
public void set_IsPrimarykey(bool value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public int get_DecimalDigits();
    [CompilerGeneratedAttribute]
public void set_DecimalDigits(int value);
    [CompilerGeneratedAttribute]
public int get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(int value);
    [CompilerGeneratedAttribute]
public bool get_IsArray();
    [CompilerGeneratedAttribute]
public void set_IsArray(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsJson();
    [CompilerGeneratedAttribute]
public void set_IsJson(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsUnsigned();
    [CompilerGeneratedAttribute]
public void set_IsUnsigned(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public int get_CreateTableFieldSort();
    [CompilerGeneratedAttribute]
public void set_CreateTableFieldSort(int value);
    [CompilerGeneratedAttribute]
public bool get_InsertServerTime();
    [CompilerGeneratedAttribute]
public void set_InsertServerTime(bool value);
    [CompilerGeneratedAttribute]
public string get_InsertSql();
    [CompilerGeneratedAttribute]
public void set_InsertSql(string value);
    [CompilerGeneratedAttribute]
public bool get_UpdateServerTime();
    [CompilerGeneratedAttribute]
public void set_UpdateServerTime(bool value);
    [CompilerGeneratedAttribute]
public string get_UpdateSql();
    [CompilerGeneratedAttribute]
public void set_UpdateSql(string value);
    [CompilerGeneratedAttribute]
public object get_SqlParameterDbType();
    [CompilerGeneratedAttribute]
public void set_SqlParameterDbType(object value);
}
public class SqlSugar.DbConvert.CommonPropertyConvert : object {
    public sealed virtual SugarParameter ParameterConverter(object columnValue, int columnIndex);
    public sealed virtual T QueryConverter(IDataRecord dr, int i);
}
public class SqlSugar.DbConvert.EnumToStringConvert : object {
    public sealed virtual SugarParameter ParameterConverter(object columnValue, int columnIndex);
    public sealed virtual T QueryConverter(IDataRecord dr, int i);
}
public class SqlSugar.DbConvert.NClobPropertyConvert : object {
    public sealed virtual SugarParameter ParameterConverter(object columnValue, int columnIndex);
    public sealed virtual T QueryConverter(IDataRecord dr, int i);
}
public class SqlSugar.DbConvert.NoParameterCommonPropertyConvert : object {
    public sealed virtual SugarParameter ParameterConverter(object columnValue, int columnIndex);
    public sealed virtual T QueryConverter(IDataRecord dr, int i);
}
public class SqlSugar.DbConvert.Nvarchar2PropertyConvert : object {
    public sealed virtual SugarParameter ParameterConverter(object columnValue, int columnIndex);
    public sealed virtual T QueryConverter(IDataRecord dr, int i);
}
[ExtensionAttribute]
public static class SqlSugar.DbExtensions : object {
    [ExtensionAttribute]
public static string ToJoinSqlInVals(T[] array);
    [ExtensionAttribute]
public static string ToJoinSqlInValsN(T[] array);
    [ExtensionAttribute]
public static string ToSqlValue(object value);
    [ExtensionAttribute]
public static string ToSqlValue(string value);
    [ExtensionAttribute]
public static string ToSqlFilter(string value);
    [ExtensionAttribute]
public static string ToCheckField(string value);
    private static bool IsUpdateSql(string value, string left, string right);
    public static bool ContainsChinese(string input);
    [ExtensionAttribute]
public static bool IsRegexWNoContainsChinese(string value);
    [ExtensionAttribute]
public static string ToCheckRegexW(string value);
    [ExtensionAttribute]
internal static string ToLower(string value, bool isAutoToLower);
    [ExtensionAttribute]
internal static string ToUpper(string value, bool isAutoToUpper);
}
public class SqlSugar.DbFastestProperties : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasOffsetTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <WhereColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsOffIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsMerge>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNoCopyDataTable>k__BackingField;
    public bool HasOffsetTime { get; public set; }
    public String[] WhereColumns { get; public set; }
    public bool IsOffIdentity { get; public set; }
    public bool IsMerge { get; public set; }
    public bool IsNoCopyDataTable { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HasOffsetTime();
    [CompilerGeneratedAttribute]
public void set_HasOffsetTime(bool value);
    [CompilerGeneratedAttribute]
public String[] get_WhereColumns();
    [CompilerGeneratedAttribute]
public void set_WhereColumns(String[] value);
    [CompilerGeneratedAttribute]
public bool get_IsOffIdentity();
    [CompilerGeneratedAttribute]
public void set_IsOffIdentity(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMerge();
    [CompilerGeneratedAttribute]
public void set_IsMerge(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNoCopyDataTable();
    [CompilerGeneratedAttribute]
public void set_IsNoCopyDataTable(bool value);
}
public abstract class SqlSugar.DbFirstProvider : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlSugarClient <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ClassTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ClassDescriptionTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyDescriptionTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ConstructorTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UsingTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDefaultValue>k__BackingField;
    private Func`2<string, bool> WhereColumnsfunc;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<string, string> <FormatFileNameFunc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<string, string> <FormatClassNameFunc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<string, string> <FormatPropertyNameFunc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsStringNullable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`4<DbColumnInfo, string, string, string> <PropertyTextTemplateFunc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<string, string> <ReplaceClassStringFunc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DbTableInfo> <TableInfoList>k__BackingField;
    public ISqlSugarClient Context { get; public set; }
    private string ClassTemplate { get; private set; }
    private string ClassDescriptionTemplate { get; private set; }
    private string PropertyTemplate { get; private set; }
    private string PropertyDescriptionTemplate { get; private set; }
    private string ConstructorTemplate { get; private set; }
    private string UsingTemplate { get; private set; }
    private string Namespace { get; private set; }
    private bool IsAttribute { get; private set; }
    private bool IsDefaultValue { get; private set; }
    private Func`2<string, string> FormatFileNameFunc { get; private set; }
    private Func`2<string, string> FormatClassNameFunc { get; private set; }
    private Func`2<string, string> FormatPropertyNameFunc { get; private set; }
    private bool IsStringNullable { get; private set; }
    private Func`4<DbColumnInfo, string, string, string> PropertyTextTemplateFunc { get; private set; }
    private Func`2<string, string> ReplaceClassStringFunc { get; private set; }
    private ISqlBuilder SqlBuilder { get; }
    private List`1<DbTableInfo> TableInfoList { get; private set; }
    [CompilerGeneratedAttribute]
public virtual ISqlSugarClient get_Context();
    [CompilerGeneratedAttribute]
public virtual void set_Context(ISqlSugarClient value);
    [CompilerGeneratedAttribute]
private string get_ClassTemplate();
    [CompilerGeneratedAttribute]
private void set_ClassTemplate(string value);
    [CompilerGeneratedAttribute]
private string get_ClassDescriptionTemplate();
    [CompilerGeneratedAttribute]
private void set_ClassDescriptionTemplate(string value);
    [CompilerGeneratedAttribute]
private string get_PropertyTemplate();
    [CompilerGeneratedAttribute]
private void set_PropertyTemplate(string value);
    [CompilerGeneratedAttribute]
private string get_PropertyDescriptionTemplate();
    [CompilerGeneratedAttribute]
private void set_PropertyDescriptionTemplate(string value);
    [CompilerGeneratedAttribute]
private string get_ConstructorTemplate();
    [CompilerGeneratedAttribute]
private void set_ConstructorTemplate(string value);
    [CompilerGeneratedAttribute]
private string get_UsingTemplate();
    [CompilerGeneratedAttribute]
private void set_UsingTemplate(string value);
    [CompilerGeneratedAttribute]
private string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
    [CompilerGeneratedAttribute]
private bool get_IsAttribute();
    [CompilerGeneratedAttribute]
private void set_IsAttribute(bool value);
    [CompilerGeneratedAttribute]
private bool get_IsDefaultValue();
    [CompilerGeneratedAttribute]
private void set_IsDefaultValue(bool value);
    [CompilerGeneratedAttribute]
private Func`2<string, string> get_FormatFileNameFunc();
    [CompilerGeneratedAttribute]
private void set_FormatFileNameFunc(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
private Func`2<string, string> get_FormatClassNameFunc();
    [CompilerGeneratedAttribute]
private void set_FormatClassNameFunc(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
private Func`2<string, string> get_FormatPropertyNameFunc();
    [CompilerGeneratedAttribute]
private void set_FormatPropertyNameFunc(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
private bool get_IsStringNullable();
    [CompilerGeneratedAttribute]
private void set_IsStringNullable(bool value);
    [CompilerGeneratedAttribute]
private Func`4<DbColumnInfo, string, string, string> get_PropertyTextTemplateFunc();
    [CompilerGeneratedAttribute]
private void set_PropertyTextTemplateFunc(Func`4<DbColumnInfo, string, string, string> value);
    [CompilerGeneratedAttribute]
private Func`2<string, string> get_ReplaceClassStringFunc();
    [CompilerGeneratedAttribute]
private void set_ReplaceClassStringFunc(Func`2<string, string> value);
    private ISqlBuilder get_SqlBuilder();
    [CompilerGeneratedAttribute]
private List`1<DbTableInfo> get_TableInfoList();
    [CompilerGeneratedAttribute]
private void set_TableInfoList(List`1<DbTableInfo> value);
    public sealed virtual void Init();
    public sealed virtual IDbFirst StringNullable();
    public sealed virtual IDbFirst SettingClassDescriptionTemplate(Func`2<string, string> func);
    public sealed virtual IDbFirst SettingClassTemplate(Func`2<string, string> func);
    public sealed virtual IDbFirst SettingConstructorTemplate(Func`2<string, string> func);
    public sealed virtual IDbFirst SettingPropertyDescriptionTemplate(Func`2<string, string> func);
    public sealed virtual IDbFirst SettingNamespaceTemplate(Func`2<string, string> func);
    public sealed virtual IDbFirst SettingPropertyTemplate(Func`2<string, string> func);
    public sealed virtual IDbFirst SettingPropertyTemplate(Func`4<DbColumnInfo, string, string, string> func);
    public sealed virtual RazorFirst UseRazorAnalysis(string razorClassTemplate, string classNamespace);
    public sealed virtual IDbFirst IsCreateAttribute(bool isCreateAttribute);
    public sealed virtual IDbFirst FormatFileName(Func`2<string, string> formatFileNameFunc);
    public sealed virtual IDbFirst FormatClassName(Func`2<string, string> formatClassNameFunc);
    public sealed virtual IDbFirst FormatPropertyName(Func`2<string, string> formatPropertyNameFunc);
    public sealed virtual IDbFirst CreatedReplaceClassString(Func`2<string, string> replaceClassStringFunc);
    public sealed virtual IDbFirst IsCreateDefaultValue(bool isCreateDefaultValue);
    public sealed virtual IDbFirst Where(DbObjectType dbObjectType);
    public sealed virtual IDbFirst Where(Func`2<string, bool> func);
    public sealed virtual IDbFirst WhereColumns(Func`2<string, bool> func);
    public sealed virtual IDbFirst Where(String[] objectNames);
    public sealed virtual Dictionary`2<string, string> ToClassStringList(string nameSpace);
    internal string GetClassString(DbTableInfo tableInfo, String& className);
    internal string GetClassString(List`1<DbColumnInfo> columns, String& className);
    public sealed virtual void CreateClassFile(string directoryPath, string nameSpace);
    private string GetProertypeDefaultValue(DbColumnInfo item);
    private string GetPropertyText(DbColumnInfo item, string PropertyText);
    private string GetEnityName(DbColumnInfo item);
    private string GetPropertyName(DbColumnInfo item);
    protected virtual string GetPropertyTypeName(DbColumnInfo item);
    private string GetPropertyTypeConvert(DbColumnInfo item);
    private string GetPropertyDescriptionText(DbColumnInfo item, string propertyDescriptionText);
    private string GetColumnDescription(string columnDescription);
    [CompilerGeneratedAttribute]
private bool <UseRazorAnalysis>b__81_0(DbColumnInfo it);
}
public class SqlSugar.DbFirstTemplate : object {
    public static string ClassTemplate;
    public static string ClassDescriptionTemplate;
    public static string PropertyTemplate;
    public static string PropertyDescriptionTemplate;
    public static string ConstructorTemplate;
    public static string UsingTemplate;
    public static string KeyUsing;
    public static string KeyNamespace;
    public static string KeyClassName;
    public static string KeyIsNullable;
    public static string KeySugarTable;
    public static string KeyConstructor;
    public static string KeySugarColumn;
    public static string KeyPropertyType;
    public static string KeyPropertyName;
    public static string KeyDefaultValue;
    public static string KeyClassDescription;
    public static string KeyPropertyDescription;
    public static string ValueSugarTable;
    public static string ValueSugarCoulmn;
    public static string PropertySpace;
    public static string ClassSpace;
    private static DbFirstTemplate();
}
public enum SqlSugar.DbLockType : Enum {
    public int value__;
    public static DbLockType Wait;
    public static DbLockType Error;
}
public abstract class SqlSugar.DbMaintenanceProvider : object {
    private ISqlBuilder _SqlBuilder;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <IsAnyProcedureSql>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public ISqlBuilder SqlBuilder { get; }
    protected string GetViewInfoListSql { get; }
    protected string GetDataBaseSql { get; }
    protected string GetTableInfoListSql { get; }
    protected string GetColumnInfosByTableNameSql { get; }
    protected string CreateIndexSql { get; }
    protected string IsAnyIndexSql { get; }
    protected string AddDefaultValueSql { get; }
    protected string CreateDataBaseSql { get; }
    protected string AddColumnToTableSql { get; }
    protected string AlterColumnToTableSql { get; }
    protected string BackupDataBaseSql { get; }
    protected string CreateTableSql { get; }
    protected string CreateTableColumn { get; }
    protected string BackupTableSql { get; }
    protected string TruncateTableSql { get; }
    protected string DropTableSql { get; }
    protected string DropColumnToTableSql { get; }
    protected string DropConstraintSql { get; }
    protected string AddPrimaryKeySql { get; }
    protected string RenameColumnSql { get; }
    protected string AddColumnRemarkSql { get; }
    protected string DeleteColumnRemarkSql { get; }
    protected string IsAnyColumnRemarkSql { get; }
    protected string AddTableRemarkSql { get; }
    protected string DeleteTableRemarkSql { get; }
    protected string IsAnyTableRemarkSql { get; }
    protected string RenameTableSql { get; }
    protected string IsAnyProcedureSql { get; }
    protected string CheckSystemTablePermissionsSql { get; }
    protected string CreateTableNull { get; }
    protected string CreateTableNotNull { get; }
    protected string CreateTablePirmaryKey { get; }
    protected string CreateTableIdentity { get; }
    public sealed virtual List`1<string> GetProcList();
    public virtual List`1<string> GetProcList(string dbName);
    public virtual List`1<string> GetDataBaseList(SqlSugarClient db);
    public virtual List`1<string> GetDataBaseList();
    public virtual List`1<DbTableInfo> GetViewInfoList(bool isCache);
    public sealed virtual List`1<DbTableInfo> GetTableInfoList(Func`3<DbType, string, string> getChangeSqlFunc);
    public virtual List`1<DbTableInfo> GetTableInfoList(bool isCache);
    public sealed virtual List`1<DbColumnInfo> GetColumnInfosByTableName(string tableName, Func`3<DbType, string, string> getChangeSqlFunc);
    public virtual List`1<DbColumnInfo> GetColumnInfosByTableName(string tableName, bool isCache);
    public virtual List`1<string> GetIsIdentities(string tableName);
    public virtual List`1<string> GetPrimaries(string tableName);
    public virtual List`1<string> GetIndexList(string tableName);
    public virtual List`1<string> GetFuncList();
    public virtual List`1<string> GetTriggerNames(string tableName);
    public virtual List`1<string> GetDbTypes();
    public virtual bool IsAnyTable(string tableName, bool isCache);
    public virtual bool IsAnyColumn(string tableName, string columnName, bool isCache);
    public virtual bool IsPrimaryKey(string tableName, string columnName);
    public virtual bool IsPrimaryKey(string tableName, string columnName, bool isCache);
    public virtual bool IsIdentity(string tableName, string columnName);
    public virtual bool IsAnyConstraint(string constraintName);
    public virtual bool IsAnySystemTablePermissions();
    public virtual bool SetAutoIncrementInitialValue(string tableName, int initialValue);
    public virtual bool SetAutoIncrementInitialValue(Type entityType, int initialValue);
    public virtual bool DropIndex(string indexName);
    public virtual bool DropIndex(string indexName, string tableName);
    public virtual bool DropView(string viewName);
    public virtual bool DropFunction(string funcName);
    public virtual bool DropProc(string procName);
    public virtual bool CreateDatabase(string databaseDirectory);
    public virtual bool CreateDatabase(string databaseName, string databaseDirectory);
    public virtual bool AddPrimaryKey(string tableName, string columnName);
    public sealed virtual bool AddPrimaryKeys(string tableName, String[] columnNames);
    public sealed virtual bool AddPrimaryKeys(string tableName, String[] columnNames, string pkName);
    public virtual bool AddColumn(string tableName, DbColumnInfo columnInfo);
    public virtual object GetDefaultValue(DbColumnInfo columnInfo, object value);
    public virtual bool UpdateColumn(string tableName, DbColumnInfo column);
    public abstract virtual bool CreateTable(string tableName, List`1<DbColumnInfo> columns, bool isCreatePrimaryKey);
    public virtual bool DropTable(string tableName);
    public virtual bool DropTable(String[] tableName);
    public virtual bool DropTable(Type[] tableEnittyTypes);
    public virtual bool DropTable();
    public virtual bool DropTable();
    public virtual bool DropTable();
    public virtual bool DropTable();
    public virtual bool TruncateTable();
    public virtual bool TruncateTable();
    public virtual bool TruncateTable();
    public virtual bool TruncateTable();
    public virtual bool TruncateTable();
    public virtual bool DropColumn(string tableName, string columnName);
    public virtual bool DropConstraint(string tableName, string constraintName);
    public virtual bool TruncateTable(string tableName);
    public sealed virtual bool TruncateTable(String[] tableNames);
    public sealed virtual bool TruncateTable(Type[] tableEnittyTypes);
    public virtual bool BackupDataBase(string databaseName, string fullFileName);
    public virtual bool BackupTable(string oldTableName, string newTableName, int maxBackupDataRows);
    public virtual bool RenameColumn(string tableName, string oldColumnName, string newColumnName);
    public virtual bool AddColumnRemark(string columnName, string tableName, string description);
    public virtual bool DeleteColumnRemark(string columnName, string tableName);
    public virtual bool IsAnyColumnRemark(string columnName, string tableName);
    public virtual bool AddTableRemark(string tableName, string description);
    public virtual bool DeleteTableRemark(string tableName);
    public virtual bool IsAnyTableRemark(string tableName);
    public virtual bool AddDefaultValue(string tableName, string columnName, string defaultValue);
    public virtual bool CreateIndex(string tableName, String[] columnNames, bool isUnique);
    public virtual bool CreateUniqueIndex(string tableName, String[] columnNames);
    public virtual bool CreateIndex(string tableName, String[] columnNames, string IndexName, bool isUnique);
    public virtual bool IsAnyIndex(string indexName);
    public virtual bool AddRemark(EntityInfo entity);
    public virtual void AddIndex(EntityInfo entityInfo);
    protected virtual bool IsAnyDefaultValue(string tableName, string columnName, List`1<DbColumnInfo> columns);
    public virtual bool IsAnyDefaultValue(string tableName, string columnName);
    public virtual void AddDefaultValue(EntityInfo entityInfo);
    public virtual bool RenameTable(string oldTableName, string newTableName);
    public virtual bool IsAnyProcedure(string procName);
    public virtual List`1<DbTableInfo> GetSchemaTables(EntityInfo entityInfo);
    protected List`1<T> GetListOrCache(string cacheKey, string sql);
    protected virtual string GetCreateTableSql(string tableName, List`1<DbColumnInfo> columns);
    protected virtual string GetAddColumnSql(string tableName, DbColumnInfo columnInfo);
    protected virtual string GetUpdateColumnSql(string tableName, DbColumnInfo columnInfo);
    protected virtual string GetCacheKey(string cacheKey);
    protected virtual string GetSize(DbColumnInfo item);
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    public ISqlBuilder get_SqlBuilder();
    protected abstract virtual string get_GetViewInfoListSql();
    protected abstract virtual string get_GetDataBaseSql();
    protected abstract virtual string get_GetTableInfoListSql();
    protected abstract virtual string get_GetColumnInfosByTableNameSql();
    protected abstract virtual string get_CreateIndexSql();
    protected abstract virtual string get_IsAnyIndexSql();
    protected abstract virtual string get_AddDefaultValueSql();
    protected abstract virtual string get_CreateDataBaseSql();
    protected abstract virtual string get_AddColumnToTableSql();
    protected abstract virtual string get_AlterColumnToTableSql();
    protected abstract virtual string get_BackupDataBaseSql();
    protected abstract virtual string get_CreateTableSql();
    protected abstract virtual string get_CreateTableColumn();
    protected abstract virtual string get_BackupTableSql();
    protected abstract virtual string get_TruncateTableSql();
    protected abstract virtual string get_DropTableSql();
    protected abstract virtual string get_DropColumnToTableSql();
    protected abstract virtual string get_DropConstraintSql();
    protected abstract virtual string get_AddPrimaryKeySql();
    protected abstract virtual string get_RenameColumnSql();
    protected abstract virtual string get_AddColumnRemarkSql();
    protected abstract virtual string get_DeleteColumnRemarkSql();
    protected abstract virtual string get_IsAnyColumnRemarkSql();
    protected abstract virtual string get_AddTableRemarkSql();
    protected abstract virtual string get_DeleteTableRemarkSql();
    protected abstract virtual string get_IsAnyTableRemarkSql();
    protected abstract virtual string get_RenameTableSql();
    [CompilerGeneratedAttribute]
protected virtual string get_IsAnyProcedureSql();
    protected abstract virtual string get_CheckSystemTablePermissionsSql();
    protected abstract virtual string get_CreateTableNull();
    protected abstract virtual string get_CreateTableNotNull();
    protected abstract virtual string get_CreateTablePirmaryKey();
    protected abstract virtual string get_CreateTableIdentity();
    [CompilerGeneratedAttribute]
private string <AddPrimaryKeys>b__32_0(string it);
    [CompilerGeneratedAttribute]
private string <CreateIndex>b__65_0(string it);
    [CompilerGeneratedAttribute]
private string <CreateUniqueIndex>b__66_0(string it);
}
public enum SqlSugar.DbObjectType : Enum {
    public int value__;
    public static DbObjectType Table;
    public static DbObjectType View;
    public static DbObjectType All;
}
public class SqlSugar.DbResult`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Exception <ErrorException>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <Data>k__BackingField;
    public bool IsSuccess { get; public set; }
    public Exception ErrorException { get; public set; }
    public string ErrorMessage { get; public set; }
    public T Data { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public void set_IsSuccess(bool value);
    [CompilerGeneratedAttribute]
public Exception get_ErrorException();
    [CompilerGeneratedAttribute]
public void set_ErrorException(Exception value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public T get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(T value);
}
public class SqlSugar.DbTableInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbObjectType <DbObjectType>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public DbObjectType DbObjectType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public DbObjectType get_DbObjectType();
    [CompilerGeneratedAttribute]
public void set_DbObjectType(DbObjectType value);
}
public enum SqlSugar.DbType : Enum {
    public int value__;
    public static DbType MySql;
    public static DbType SqlServer;
    public static DbType Sqlite;
    public static DbType Oracle;
    public static DbType PostgreSQL;
    public static DbType Dm;
    public static DbType Kdbndp;
    public static DbType Oscar;
    public static DbType MySqlConnector;
    public static DbType Access;
    public static DbType OpenGauss;
    public static DbType QuestDB;
    public static DbType HG;
    public static DbType ClickHouse;
    public static DbType GBase;
    public static DbType Odbc;
    public static DbType OceanBaseForOracle;
    public static DbType TDengine;
    public static DbType GaussDB;
    public static DbType OceanBase;
    public static DbType Tidb;
    public static DbType Vastbase;
    public static DbType PolarDB;
    public static DbType Doris;
    public static DbType Xugu;
    public static DbType GoldenDB;
    public static DbType TDSQLForPGODBC;
    public static DbType TDSQL;
    public static DbType Custom;
}
public class SqlSugar.DefaultDbMethod : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ParameterKeyWord>k__BackingField;
    public string ParameterKeyWord { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_ParameterKeyWord();
    [CompilerGeneratedAttribute]
public virtual void set_ParameterKeyWord(string value);
    public virtual string RowNumber(MethodCallExpressionModel model);
    public virtual string RowCount(MethodCallExpressionModel model);
    public sealed virtual string RowSum(MethodCallExpressionModel model);
    public sealed virtual string RowAvg(MethodCallExpressionModel model);
    public sealed virtual string RowMin(MethodCallExpressionModel model);
    public sealed virtual string RowMax(MethodCallExpressionModel model);
    public virtual string IIF(MethodCallExpressionModel model);
    public virtual string IsNullOrEmpty(MethodCallExpressionModel model);
    public virtual string HasValue(MethodCallExpressionModel model);
    public virtual string HasNumber(MethodCallExpressionModel model);
    public virtual string ToUpper(MethodCallExpressionModel model);
    public virtual string ToLower(MethodCallExpressionModel model);
    public virtual string Trim(MethodCallExpressionModel model);
    public virtual string Contains(MethodCallExpressionModel model);
    public virtual string ContainsArray(MethodCallExpressionModel model);
    public virtual string ContainsArrayUseSqlParameters(MethodCallExpressionModel model);
    public virtual string Equals(MethodCallExpressionModel model);
    public virtual string EqualsNull(MethodCallExpressionModel model);
    public virtual string DateIsSameDay(MethodCallExpressionModel model);
    public virtual string DateIsSameByType(MethodCallExpressionModel model);
    public virtual string DateAddByType(MethodCallExpressionModel model);
    public virtual string DateAddDay(MethodCallExpressionModel model);
    public virtual string Between(MethodCallExpressionModel model);
    public virtual string StartsWith(MethodCallExpressionModel model);
    public virtual string EndsWith(MethodCallExpressionModel model);
    public virtual string DateValue(MethodCallExpressionModel model);
    public virtual string GetStringJoinSelector(string result, string separator);
    public virtual string ToInt32(MethodCallExpressionModel model);
    public virtual string ToInt64(MethodCallExpressionModel model);
    public virtual string ToString(MethodCallExpressionModel model);
    public virtual string ToGuid(MethodCallExpressionModel model);
    public virtual string ToDouble(MethodCallExpressionModel model);
    public virtual string ToBool(MethodCallExpressionModel model);
    public virtual string ToDate(MethodCallExpressionModel model);
    public virtual string ToDateShort(MethodCallExpressionModel model);
    public virtual string ToTime(MethodCallExpressionModel model);
    public virtual string ToDecimal(MethodCallExpressionModel model);
    public virtual string Substring(MethodCallExpressionModel model);
    public virtual string Length(MethodCallExpressionModel model);
    public virtual string Replace(MethodCallExpressionModel model);
    public virtual string AggregateSum(MethodCallExpressionModel model);
    public virtual string AggregateAvg(MethodCallExpressionModel model);
    public virtual string AggregateMin(MethodCallExpressionModel model);
    public virtual string AggregateMax(MethodCallExpressionModel model);
    public virtual string AggregateCount(MethodCallExpressionModel model);
    public virtual string AggregateDistinctCount(MethodCallExpressionModel model);
    public virtual string MappingColumn(MethodCallExpressionModel model);
    public virtual string IsNull(MethodCallExpressionModel model);
    public virtual string True();
    public virtual string False();
    public virtual string TrueValue();
    public virtual string FalseValue();
    public sealed virtual string GuidNew();
    public sealed virtual string GetSelfAndAutoFill(string shortName, bool isSingle);
    public virtual string MergeString(String[] strings);
    public virtual string Pack(string sql);
    public virtual string EqualTrue(string fieldName);
    public virtual string Null();
    public virtual string GetDate();
    public virtual string GetRandom();
    public virtual string CaseWhen(List`1<KeyValuePair`2<string, string>> sqls);
    public virtual string CharIndex(MethodCallExpressionModel model);
    public virtual string CharIndexNew(MethodCallExpressionModel model);
    public virtual string ToVarchar(MethodCallExpressionModel model);
    public virtual string BitwiseAnd(MethodCallExpressionModel model);
    public virtual string BitwiseInclusiveOR(MethodCallExpressionModel model);
    public sealed virtual string Oracle_ToDate(MethodCallExpressionModel model);
    public sealed virtual string Oracle_ToChar(MethodCallExpressionModel model);
    public sealed virtual string SqlServer_DateDiff(MethodCallExpressionModel model);
    public virtual string FormatRowNumber(MethodCallExpressionModel model);
    public virtual string Format(MethodCallExpressionModel model);
    private string FormatConcat(MethodCallExpressionModel model);
    public virtual string Abs(MethodCallExpressionModel model);
    public virtual string Round(MethodCallExpressionModel model);
    public virtual string DateDiff(MethodCallExpressionModel model);
    public virtual string GreaterThan(MethodCallExpressionModel model);
    public virtual string GreaterThanOrEqual(MethodCallExpressionModel model);
    public virtual string LessThan(MethodCallExpressionModel model);
    public virtual string LessThanOrEqual(MethodCallExpressionModel model);
    public virtual string Asc(MethodCallExpressionModel model);
    public virtual string Desc(MethodCallExpressionModel model);
    public virtual string Stuff(MethodCallExpressionModel model);
    public virtual string Exists(MethodCallExpressionModel model);
    public virtual string GetDateString(string dateValue, string format);
    public virtual string GetForXmlPath();
    public virtual string JsonIndex(MethodCallExpressionModel model);
    public virtual string JsonField(MethodCallExpressionModel model);
    public virtual string JsonContainsFieldName(MethodCallExpressionModel model);
    public virtual string JsonArrayLength(MethodCallExpressionModel model);
    public virtual string JsonParse(MethodCallExpressionModel model);
    public virtual string JsonLike(MethodCallExpressionModel model);
    public virtual string Collate(MethodCallExpressionModel model);
    public virtual string AggregateSumNoNull(MethodCallExpressionModel model);
    public virtual string AggregateAvgNoNull(MethodCallExpressionModel model);
    public virtual string JsonListObjectAny(MethodCallExpressionModel model);
    public virtual string JsonArrayAny(MethodCallExpressionModel model);
    public virtual string CompareTo(MethodCallExpressionModel model);
    public virtual string SplitIn(MethodCallExpressionModel model);
    public sealed virtual string Like(MethodCallExpressionModel model);
    public sealed virtual string ToSingle(MethodCallExpressionModel model);
    public sealed virtual string ListAny(MethodCallExpressionModel model);
    public sealed virtual string ListAll(MethodCallExpressionModel model);
    public virtual string GetTableWithDataBase(string dataBaseName, string tableName);
    public virtual string Modulo(MethodCallExpressionModel model);
    private static bool IsArrayAnyParameter(MethodCallExpressionModel model);
    private string ListArrayAny(MethodCallExpressionModel model);
    private static List`1<MethodCallExpressionArgs> GetStringFormatArgs(string str, object array);
    public virtual string WeekOfYear(MethodCallExpressionModel mode);
    public virtual string TrimEnd(MethodCallExpressionModel mode);
    public virtual string TrimStart(MethodCallExpressionModel mode);
    public virtual string Left(MethodCallExpressionModel mode);
    public virtual string Right(MethodCallExpressionModel mode);
    public virtual string PadLeft(MethodCallExpressionModel mode);
    public virtual string Floor(MethodCallExpressionModel mode);
    public virtual string Ceil(MethodCallExpressionModel mode);
    public virtual string NewUid(MethodCallExpressionModel mode);
    public virtual string FullTextContains(MethodCallExpressionModel mode);
    public virtual string PgsqlArrayContains(MethodCallExpressionModel model);
    public virtual string SelectFields(MethodCallExpressionModel model);
    [CompilerGeneratedAttribute]
private string <Format>b__74_1(object it);
    [CompilerGeneratedAttribute]
private string <FormatConcat>b__75_1(object it);
}
public class SqlSugar.DefaultServices : object {
    public static ICacheService ReflectionInoCache;
    public static ICacheService DataInoCache;
    public static ISerializeService Serialize;
    private static DefaultServices();
}
public class SqlSugar.DeleteablePage`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T[] <DataList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlSugarClient <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsEnableDiffLogEvent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DiffLogModel <DiffModel>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <UpdateColumns>k__BackingField;
    public T[] DataList { get; public set; }
    public ISqlSugarClient Context { get; public set; }
    public int PageSize { get; internal set; }
    public string TableName { get; internal set; }
    public bool IsEnableDiffLogEvent { get; internal set; }
    public DiffLogModel DiffModel { get; internal set; }
    public List`1<string> UpdateColumns { get; internal set; }
    [CompilerGeneratedAttribute]
public T[] get_DataList();
    [CompilerGeneratedAttribute]
public void set_DataList(T[] value);
    [CompilerGeneratedAttribute]
public ISqlSugarClient get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(ISqlSugarClient value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
internal void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
internal void set_TableName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsEnableDiffLogEvent();
    [CompilerGeneratedAttribute]
internal void set_IsEnableDiffLogEvent(bool value);
    [CompilerGeneratedAttribute]
public DiffLogModel get_DiffModel();
    [CompilerGeneratedAttribute]
internal void set_DiffModel(DiffLogModel value);
    [CompilerGeneratedAttribute]
public List`1<string> get_UpdateColumns();
    [CompilerGeneratedAttribute]
internal void set_UpdateColumns(List`1<string> value);
    public int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.DeleteablePage`1/<ExecuteCommandAsync>d__29")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
}
public class SqlSugar.DeleteableProvider`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlSugarClient <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlBuilder <SqlBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DeleteBuilder <DeleteBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MappingTableList <OldMappingTableList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAs>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsEnableDiffLogEvent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DiffLogModel <diffModel>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <tempPrimaryKeys>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action <RemoveCacheFunc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<T> <DeleteObjects>k__BackingField;
    public ISqlSugarClient Context { get; public set; }
    public IAdo Db { get; }
    public ISqlBuilder SqlBuilder { get; public set; }
    public DeleteBuilder DeleteBuilder { get; public set; }
    public MappingTableList OldMappingTableList { get; public set; }
    public bool IsAs { get; public set; }
    public bool IsEnableDiffLogEvent { get; public set; }
    public DiffLogModel diffModel { get; public set; }
    public List`1<string> tempPrimaryKeys { get; public set; }
    internal Action RemoveCacheFunc { get; internal set; }
    public List`1<T> DeleteObjects { get; public set; }
    public EntityInfo EntityInfo { get; }
    [CompilerGeneratedAttribute]
public ISqlSugarClient get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(ISqlSugarClient value);
    public IAdo get_Db();
    [CompilerGeneratedAttribute]
public ISqlBuilder get_SqlBuilder();
    [CompilerGeneratedAttribute]
public void set_SqlBuilder(ISqlBuilder value);
    [CompilerGeneratedAttribute]
public sealed virtual DeleteBuilder get_DeleteBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeleteBuilder(DeleteBuilder value);
    [CompilerGeneratedAttribute]
public MappingTableList get_OldMappingTableList();
    [CompilerGeneratedAttribute]
public void set_OldMappingTableList(MappingTableList value);
    [CompilerGeneratedAttribute]
public bool get_IsAs();
    [CompilerGeneratedAttribute]
public void set_IsAs(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEnableDiffLogEvent();
    [CompilerGeneratedAttribute]
public void set_IsEnableDiffLogEvent(bool value);
    [CompilerGeneratedAttribute]
public DiffLogModel get_diffModel();
    [CompilerGeneratedAttribute]
public void set_diffModel(DiffLogModel value);
    [CompilerGeneratedAttribute]
public List`1<string> get_tempPrimaryKeys();
    [CompilerGeneratedAttribute]
public void set_tempPrimaryKeys(List`1<string> value);
    [CompilerGeneratedAttribute]
internal Action get_RemoveCacheFunc();
    [CompilerGeneratedAttribute]
internal void set_RemoveCacheFunc(Action value);
    [CompilerGeneratedAttribute]
public List`1<T> get_DeleteObjects();
    [CompilerGeneratedAttribute]
public void set_DeleteObjects(List`1<T> value);
    public EntityInfo get_EntityInfo();
    public sealed virtual void AddQueue();
    public sealed virtual int ExecuteCommand();
    public sealed virtual bool ExecuteCommandHasChange();
    public sealed virtual Task`1<int> ExecuteCommandAsync(CancellationToken token);
    [AsyncStateMachineAttribute("SqlSugar.DeleteableProvider`1/<ExecuteCommandAsync>d__48")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> ExecuteCommandAsync();
    [AsyncStateMachineAttribute("SqlSugar.DeleteableProvider`1/<ExecuteCommandHasChangeAsync>d__49")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<bool> ExecuteCommandHasChangeAsync();
    public sealed virtual IDeleteable`1<T> AsType(Type tableNameType);
    public sealed virtual IDeleteable`1<T> AS(string tableName);
    public sealed virtual IDeleteable`1<T> EnableDiffLogEventIF(bool isEnableDiffLogEvent, object businessData);
    public sealed virtual IDeleteable`1<T> EnableDiffLogEvent(object businessData);
    public sealed virtual IDeleteable`1<T> Where(List`1<T> deleteObjs);
    public sealed virtual IDeleteable`1<T> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public sealed virtual IDeleteable`1<T> Where(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual IDeleteable`1<T> Where(T deleteObj);
    public sealed virtual IDeleteable`1<T> Where(string whereString, object parameters);
    public sealed virtual IDeleteable`1<T> Where(string whereString, SugarParameter parameter);
    public sealed virtual IDeleteable`1<T> Where(string whereString, SugarParameter[] parameters);
    public sealed virtual IDeleteable`1<T> Where(string whereString, List`1<SugarParameter> parameters);
    public sealed virtual IDeleteable`1<T> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public sealed virtual IDeleteable`1<T> Where(List`1<IConditionalModel> conditionalModels);
    public sealed virtual IDeleteable`1<T> WhereColumns(T data, Expression`1<Func`2<T, object>> columns);
    public sealed virtual IDeleteable`1<T> WhereColumns(List`1<T> list, Expression`1<Func`2<T, object>> columns);
    public sealed virtual IDeleteable`1<T> WhereColumns(List`1<Dictionary`2<string, object>> list);
    public sealed virtual IDeleteable`1<T> RemoveDataCache();
    public sealed virtual IDeleteable`1<T> EnableQueryFilter();
    public sealed virtual IDeleteable`1<T> EnableQueryFilter(Type type);
    public sealed virtual SplitTableDeleteProvider`1<T> SplitTable(Func`2<List`1<SplitTableInfo>, IEnumerable`1<SplitTableInfo>> getTableNamesFunc);
    public sealed virtual SplitTableDeleteByObjectProvider`1<T> SplitTable();
    public sealed virtual LogicDeleteProvider`1<T> IsLogic();
    public sealed virtual IDeleteable`1<T> RemoveDataCache(string likeString);
    public sealed virtual IDeleteable`1<T> In(List`1<PkType> primaryKeyValues);
    public sealed virtual IDeleteable`1<T> In(PkType[] primaryKeyValues);
    public sealed virtual IDeleteable`1<T> In(PkType primaryKeyValue);
    public sealed virtual IDeleteable`1<T> In(Expression`1<Func`2<T, object>> inField, PkType primaryKeyValue);
    public sealed virtual IDeleteable`1<T> In(Expression`1<Func`2<T, object>> inField, PkType[] primaryKeyValues);
    public sealed virtual IDeleteable`1<T> In(Expression`1<Func`2<T, object>> inField, List`1<PkType> primaryKeyValues);
    public sealed virtual IDeleteable`1<T> In(Expression`1<Func`2<T, object>> inField, ISugarQueryable`1<PkType> childQueryExpression);
    public sealed virtual IDeleteable`1<T> In(string inField, List`1<PkType> primaryKeyValues);
    public sealed virtual DeleteablePage`1<T> PageSize(int pageSize);
    public sealed virtual IDeleteable`1<T> With(string lockString);
    public virtual string ToSqlString();
    public sealed virtual KeyValuePair`2<string, List`1<SugarParameter>> ToSql();
    private List`1<string> GetPrimaryKeys();
    private void _ExecuteCommand(String& sql, SugarParameter[]& paramters);
    protected virtual List`1<string> GetIdentityKeys();
    private void RestoreMapping();
    private void AutoRemoveDataCache();
    protected virtual void After(string sql);
    protected virtual void Before(string sql);
    protected virtual List`1<DiffLogTableInfo> GetDiffTable(string sql, List`1<SugarParameter> parameters);
    protected virtual void DataAop(object deleteObj);
    protected virtual void DataChangesAop(List`1<T> deleteObjs);
    [CompilerGeneratedAttribute]
private string <WhereColumns>b__65_0(string it);
    [CompilerGeneratedAttribute]
private void <RemoveDataCache>b__67_0();
}
public class SqlSugar.DeleteBuilder : object {
    private List`1<string> _WhereInfos;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <EntityInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ILambdaExpressions <LambdaExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SugarParameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private StringBuilder <sql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableWithString>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AsName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<object> <BigDataInValues>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BigDataFiled>k__BackingField;
    public EntityInfo EntityInfo { get; public set; }
    public SqlSugarProvider Context { get; public set; }
    public ILambdaExpressions LambdaExpressions { get; public set; }
    public List`1<SugarParameter> Parameters { get; public set; }
    public StringBuilder sql { get; public set; }
    public ISqlBuilder Builder { get; public set; }
    public string TableWithString { get; public set; }
    public string AsName { get; public set; }
    public List`1<string> WhereInfos { get; public set; }
    public List`1<object> BigDataInValues { get; public set; }
    public string BigDataFiled { get; public set; }
    public string SqlTemplate { get; }
    public string WhereInTemplate { get; }
    public string WhereInOrTemplate { get; }
    public string WhereInAndTemplate { get; }
    public string WhereInEqualTemplate { get; }
    public string WhereInAreaTemplate { get; }
    public string GetTableNameString { get; }
    public string GetWhereString { get; }
    [CompilerGeneratedAttribute]
public EntityInfo get_EntityInfo();
    [CompilerGeneratedAttribute]
public void set_EntityInfo(EntityInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public ILambdaExpressions get_LambdaExpressions();
    [CompilerGeneratedAttribute]
public void set_LambdaExpressions(ILambdaExpressions value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<SugarParameter> get_Parameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parameters(List`1<SugarParameter> value);
    [CompilerGeneratedAttribute]
public sealed virtual StringBuilder get_sql();
    [CompilerGeneratedAttribute]
public sealed virtual void set_sql(StringBuilder value);
    [CompilerGeneratedAttribute]
public ISqlBuilder get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(ISqlBuilder value);
    [CompilerGeneratedAttribute]
public string get_TableWithString();
    [CompilerGeneratedAttribute]
public void set_TableWithString(string value);
    [CompilerGeneratedAttribute]
public string get_AsName();
    [CompilerGeneratedAttribute]
public void set_AsName(string value);
    public virtual List`1<string> get_WhereInfos();
    public virtual void set_WhereInfos(List`1<string> value);
    [CompilerGeneratedAttribute]
public virtual List`1<object> get_BigDataInValues();
    [CompilerGeneratedAttribute]
public virtual void set_BigDataInValues(List`1<object> value);
    [CompilerGeneratedAttribute]
public virtual string get_BigDataFiled();
    [CompilerGeneratedAttribute]
public virtual void set_BigDataFiled(string value);
    public virtual string get_SqlTemplate();
    public string get_WhereInTemplate();
    public string get_WhereInOrTemplate();
    public string get_WhereInAndTemplate();
    public string get_WhereInEqualTemplate();
    public string get_WhereInAreaTemplate();
    public virtual string get_GetTableNameString();
    public virtual string get_GetWhereString();
    public virtual void Clear();
    public virtual string ToSqlString();
    public virtual ExpressionResult GetExpressionValue(Expression expression, ResolveExpressType resolveType);
}
public class SqlSugar.DeleteMethodInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <objectValue>k__BackingField;
    internal SqlSugarProvider Context { get; internal set; }
    internal MethodInfo MethodInfo { get; internal set; }
    internal object objectValue { get; internal set; }
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
internal void set_MethodInfo(MethodInfo value);
    [CompilerGeneratedAttribute]
internal object get_objectValue();
    [CompilerGeneratedAttribute]
internal void set_objectValue(object value);
    public int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.DeleteMethodInfo/<ExecuteCommandAsync>d__13")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
    public CommonMethodInfo AS(string tableName);
    public CommonMethodInfo EnableDiffLogEvent(object businessData);
    public CommonMethodInfo SplitTable();
}
public class SqlSugar.DeleteNavMethodInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <MethodInfos>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    internal object MethodInfos { get; internal set; }
    internal SqlSugarProvider Context { get; internal set; }
    [CompilerGeneratedAttribute]
internal object get_MethodInfos();
    [CompilerGeneratedAttribute]
internal void set_MethodInfos(object value);
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    public DeleteNavMethodInfo IncludeByNameString(string navMemberName, DeleteNavOptions updateNavOptions);
    public DeleteNavMethodInfo ThenIncludeByNameString(string navMemberName, DeleteNavOptions updateNavOptions);
    [AsyncStateMachineAttribute("SqlSugar.DeleteNavMethodInfo/<ExecuteCommandAsync>d__10")]
[DebuggerStepThroughAttribute]
public Task`1<bool> ExecuteCommandAsync();
    public bool ExecuteCommand();
}
public class SqlSugar.DeleteNavOptions : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ManyToManyIsDeleteA>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ManyToManyIsDeleteB>k__BackingField;
    public bool ManyToManyIsDeleteA { get; public set; }
    public bool ManyToManyIsDeleteB { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ManyToManyIsDeleteA();
    [CompilerGeneratedAttribute]
public void set_ManyToManyIsDeleteA(bool value);
    [CompilerGeneratedAttribute]
public bool get_ManyToManyIsDeleteB();
    [CompilerGeneratedAttribute]
public void set_ManyToManyIsDeleteB(bool value);
}
public class SqlSugar.DeleteNavProvider`2 : object {
    internal DeleteNavOptions deleteNavOptions;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<Root> <_Roots>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<object> <_ParentList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<object> <_RootList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <_ParentEntity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityColumnInfo <_ParentPkColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <_Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DeleteNavRootOptions <_RootOptions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <_IsDeletedParant>k__BackingField;
    public List`1<string> _WhereList;
    public List`1<SugarParameter> _Parameters;
    public List`1<Root> _Roots { get; public set; }
    public List`1<object> _ParentList { get; public set; }
    public List`1<object> _RootList { get; public set; }
    public EntityInfo _ParentEntity { get; public set; }
    public EntityColumnInfo _ParentPkColumn { get; public set; }
    public SqlSugarProvider _Context { get; public set; }
    internal DeleteNavRootOptions _RootOptions { get; internal set; }
    public bool _IsDeletedParant { get; public set; }
    private void DeleteManyToMany(string name, EntityColumnInfo nav);
    private bool IsDeleteA();
    private bool IsDeleteB();
    private void DeleteOneToMany(string name, EntityColumnInfo nav);
    private ISugarQueryable`1<TChild> GetChildList();
    private void SetContext(Action action);
    private EntityColumnInfo GetParentPkColumn();
    private EntityColumnInfo GetParentPkNavColumn(EntityColumnInfo nav);
    private EntityColumnInfo GetPkColumnByNav(EntityInfo entity, EntityColumnInfo nav);
    private EntityColumnInfo GetFKColumnByNav(EntityInfo entity, EntityColumnInfo nav);
    private void DeleteOneToOne(string name, EntityColumnInfo nav);
    [CompilerGeneratedAttribute]
public List`1<Root> get__Roots();
    [CompilerGeneratedAttribute]
public void set__Roots(List`1<Root> value);
    [CompilerGeneratedAttribute]
public List`1<object> get__ParentList();
    [CompilerGeneratedAttribute]
public void set__ParentList(List`1<object> value);
    [CompilerGeneratedAttribute]
public List`1<object> get__RootList();
    [CompilerGeneratedAttribute]
public void set__RootList(List`1<object> value);
    [CompilerGeneratedAttribute]
public EntityInfo get__ParentEntity();
    [CompilerGeneratedAttribute]
public void set__ParentEntity(EntityInfo value);
    [CompilerGeneratedAttribute]
public EntityColumnInfo get__ParentPkColumn();
    [CompilerGeneratedAttribute]
public void set__ParentPkColumn(EntityColumnInfo value);
    [CompilerGeneratedAttribute]
public SqlSugarProvider get__Context();
    [CompilerGeneratedAttribute]
public void set__Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal DeleteNavRootOptions get__RootOptions();
    [CompilerGeneratedAttribute]
internal void set__RootOptions(DeleteNavRootOptions value);
    [CompilerGeneratedAttribute]
public bool get__IsDeletedParant();
    [CompilerGeneratedAttribute]
public void set__IsDeletedParant(bool value);
    public DeleteNavProvider`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, TChild>> expression);
    public DeleteNavProvider`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, List`1<TChild>>> expression);
    private Expression GetMamber(Expression expression);
    private void ActionMethodCallExpression(MethodCallExpression method);
    private QueryBuilder GetQueryBuilder();
    private DeleteNavProvider`2<Root, TChild> GetResult();
    public DeleteNavProvider`2<Root, Root> AsNav();
    private void InitParentList();
}
public class SqlSugar.DeleteNavRootOptions : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDiffLogEvent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <DiffLogBizData>k__BackingField;
    public bool IsDiffLogEvent { get; public set; }
    public object DiffLogBizData { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsDiffLogEvent();
    [CompilerGeneratedAttribute]
public void set_IsDiffLogEvent(bool value);
    [CompilerGeneratedAttribute]
public object get_DiffLogBizData();
    [CompilerGeneratedAttribute]
public void set_DiffLogBizData(object value);
}
public class SqlSugar.DeleteNavTask`2 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`1<DeleteNavProvider`2<Root, T>> <PreFunc>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public Func`1<DeleteNavProvider`2<Root, T>> PreFunc { get; public set; }
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public Func`1<DeleteNavProvider`2<Root, T>> get_PreFunc();
    [CompilerGeneratedAttribute]
public void set_PreFunc(Func`1<DeleteNavProvider`2<Root, T>> value);
    public DeleteNavTask`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, TChild>> expression);
    public DeleteNavTask`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, TChild>> expression, DeleteNavOptions deleteNavOptions);
    public DeleteNavTask`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, List`1<TChild>>> expression);
    public DeleteNavTask`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, List`1<TChild>>> expression, DeleteNavOptions deleteNavOptions);
    public DeleteNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, TChild>> expression);
    public DeleteNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, TChild>> expression, DeleteNavOptions options);
    public DeleteNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, List`1<TChild>>> expression);
    public DeleteNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, List`1<TChild>>> expression, DeleteNavOptions options);
    public bool ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.DeleteNavTask`2/<ExecuteCommandAsync>d__17")]
[DebuggerStepThroughAttribute]
public Task`1<bool> ExecuteCommandAsync();
    private DeleteNavTask`2<Root, Root> AsNav();
    private void ExecTasks();
    [CompilerGeneratedAttribute]
private void <ExecuteCommand>b__16_0();
    [AsyncStateMachineAttribute("SqlSugar.DeleteNavTask`2/<<ExecuteCommandAsync>b__17_0>d")]
[DebuggerStepThroughAttribute]
[CompilerGeneratedAttribute]
private Task <ExecuteCommandAsync>b__17_0();
    [CompilerGeneratedAttribute]
private DeleteNavProvider`2<Root, Root> <AsNav>b__18_0();
}
public class SqlSugar.DeleteNavTaskInit`2 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<T> <Roots>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DeleteNavProvider`2<Root, Root> <deleteNavProvider>k__BackingField;
    internal List`1<T> Roots { get; internal set; }
    internal SqlSugarProvider Context { get; internal set; }
    internal DeleteNavProvider`2<Root, Root> deleteNavProvider { get; internal set; }
    [CompilerGeneratedAttribute]
internal List`1<T> get_Roots();
    [CompilerGeneratedAttribute]
internal void set_Roots(List`1<T> value);
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal DeleteNavProvider`2<Root, Root> get_deleteNavProvider();
    [CompilerGeneratedAttribute]
internal void set_deleteNavProvider(DeleteNavProvider`2<Root, Root> value);
    public DeleteNavMethodInfo IncludesAllFirstLayer(String[] ignoreColumns);
    public DeleteNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, TChild>> expression);
    public DeleteNavMethodInfo IncludeByNameString(string navMemberName, UpdateNavOptions updateNavOptions);
    public DeleteNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, List`1<TChild>>> expression);
    public DeleteNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, List`1<TChild>>> expression, DeleteNavOptions deleteNavOptions);
}
internal class SqlSugar.DependencyManagement : object {
    private static bool IsTryJsonNet;
    private static bool IsTryMySqlData;
    private static bool IsTrySqlite;
    private static bool IsTryOracle;
    private static bool IsTryPgSql;
    private static bool IsTryDm;
    private static bool IsTryKd;
    private static bool IsTryOscar;
    public static void TryJsonNet();
    public static void TryMySqlData();
    public static void TryPostgreSQL();
    public static void TryOracle();
    public static void TrySqlite();
    public static void TryKdbndb();
    public static void TryDm();
    public static void TryOscar();
}
public class SqlSugar.DiffColumsInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SqlTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Message>k__BackingField;
    public string SqlTemplate { get; public set; }
    public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SqlTemplate();
    [CompilerGeneratedAttribute]
public void set_SqlTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
public class SqlSugar.DiffLogColumnInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ColumnDescription>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsPrimaryKey>k__BackingField;
    public string ColumnName { get; public set; }
    public string ColumnDescription { get; public set; }
    public object Value { get; public set; }
    public bool IsPrimaryKey { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnDescription();
    [CompilerGeneratedAttribute]
public void set_ColumnDescription(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public bool get_IsPrimaryKey();
    [CompilerGeneratedAttribute]
public void set_IsPrimaryKey(bool value);
}
public class SqlSugar.DiffLogModel : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DiffLogTableInfo> <AfterData>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DiffLogTableInfo> <BeforeData>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SugarParameter[] <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<TimeSpan> <Time>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <BusinessData>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DiffType <DiffType>k__BackingField;
    public List`1<DiffLogTableInfo> AfterData { get; public set; }
    public List`1<DiffLogTableInfo> BeforeData { get; public set; }
    public SugarParameter[] Parameters { get; public set; }
    public string Sql { get; public set; }
    public Nullable`1<TimeSpan> Time { get; public set; }
    public object BusinessData { get; public set; }
    public DiffType DiffType { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<DiffLogTableInfo> get_AfterData();
    [CompilerGeneratedAttribute]
public void set_AfterData(List`1<DiffLogTableInfo> value);
    [CompilerGeneratedAttribute]
public List`1<DiffLogTableInfo> get_BeforeData();
    [CompilerGeneratedAttribute]
public void set_BeforeData(List`1<DiffLogTableInfo> value);
    [CompilerGeneratedAttribute]
public SugarParameter[] get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(SugarParameter[] value);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Time();
    [CompilerGeneratedAttribute]
public void set_Time(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public object get_BusinessData();
    [CompilerGeneratedAttribute]
public void set_BusinessData(object value);
    [CompilerGeneratedAttribute]
public DiffType get_DiffType();
    [CompilerGeneratedAttribute]
public void set_DiffType(DiffType value);
}
public class SqlSugar.DiffLogTableInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableDescription>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DiffLogColumnInfo> <Columns>k__BackingField;
    public string TableName { get; public set; }
    public string TableDescription { get; public set; }
    public List`1<DiffLogColumnInfo> Columns { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_TableDescription();
    [CompilerGeneratedAttribute]
public void set_TableDescription(string value);
    [CompilerGeneratedAttribute]
public List`1<DiffLogColumnInfo> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(List`1<DiffLogColumnInfo> value);
}
public class SqlSugar.DiffTableInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbTableInfo <OldTableInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbTableInfo <NewTableInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DbColumnInfo> <OldColumnInfos>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DbColumnInfo> <NewColumnInfos>k__BackingField;
    public DbTableInfo OldTableInfo { get; public set; }
    public DbTableInfo NewTableInfo { get; public set; }
    public List`1<DbColumnInfo> OldColumnInfos { get; public set; }
    public List`1<DbColumnInfo> NewColumnInfos { get; public set; }
    [CompilerGeneratedAttribute]
public DbTableInfo get_OldTableInfo();
    [CompilerGeneratedAttribute]
public void set_OldTableInfo(DbTableInfo value);
    [CompilerGeneratedAttribute]
public DbTableInfo get_NewTableInfo();
    [CompilerGeneratedAttribute]
public void set_NewTableInfo(DbTableInfo value);
    [CompilerGeneratedAttribute]
public List`1<DbColumnInfo> get_OldColumnInfos();
    [CompilerGeneratedAttribute]
public void set_OldColumnInfos(List`1<DbColumnInfo> value);
    [CompilerGeneratedAttribute]
public List`1<DbColumnInfo> get_NewColumnInfos();
    [CompilerGeneratedAttribute]
public void set_NewColumnInfos(List`1<DbColumnInfo> value);
}
public enum SqlSugar.DiffType : Enum {
    public int value__;
    public static DiffType insert;
    public static DiffType update;
    public static DiffType delete;
}
public class SqlSugar.DiscriminatorObject : ValueType {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FieldValue>k__BackingField;
    public string FieldName { get; public set; }
    public string FieldValue { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_FieldValue();
    [CompilerGeneratedAttribute]
public void set_FieldValue(string value);
}
public class SqlSugar.DistributedSystem.Snowflake.DisposableAction : object {
    private Action _action;
    public DisposableAction(Action action);
    public sealed virtual void Dispose();
}
public class SqlSugar.DistributedSystem.Snowflake.IdWorker : object {
    public static long Twepoch;
    private static int WorkerIdBits;
    private static int DatacenterIdBits;
    private static int SequenceBits;
    private static long MaxWorkerId;
    private static long MaxDatacenterId;
    private static int WorkerIdShift;
    private static int DatacenterIdShift;
    public static int TimestampLeftShift;
    private static long SequenceMask;
    private long _sequence;
    private long _lastTimestamp;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <WorkerId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <DatacenterId>k__BackingField;
    private object _lock;
    public long WorkerId { get; protected set; }
    public long DatacenterId { get; protected set; }
    public long Sequence { get; internal set; }
    public IdWorker(long workerId, long datacenterId, long sequence);
    [CompilerGeneratedAttribute]
public long get_WorkerId();
    [CompilerGeneratedAttribute]
protected void set_WorkerId(long value);
    [CompilerGeneratedAttribute]
public long get_DatacenterId();
    [CompilerGeneratedAttribute]
protected void set_DatacenterId(long value);
    public long get_Sequence();
    internal void set_Sequence(long value);
    public long getID();
    public virtual long NextId();
    protected virtual long TilNextMillis(long lastTimestamp);
    protected virtual long TimeGen();
}
public class SqlSugar.DistributedSystem.Snowflake.InvalidSystemClock : Exception {
    public InvalidSystemClock(string message);
}
public static class SqlSugar.DistributedSystem.Snowflake.System : object {
    public static Func`1<long> currentTimeFunc;
    private static DateTime Jan1st1970;
    private static System();
    public static long CurrentTimeMillis();
    public static IDisposable StubCurrentTime(Func`1<long> func);
    public static IDisposable StubCurrentTime(long millis);
    private static long InternalCurrentTimeMillis();
}
public class SqlSugar.DmBlukCopy : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<IGrouping`2<int, DbColumnInfo>> <DbColumnInfoList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private InsertBuilder <InsertBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Object[] <Inserts>k__BackingField;
    internal List`1<IGrouping`2<int, DbColumnInfo>> DbColumnInfoList { get; internal set; }
    internal SqlSugarProvider Context { get; internal set; }
    internal ISqlBuilder Builder { get; internal set; }
    internal InsertBuilder InsertBuilder { get; internal set; }
    internal Object[] Inserts { get; internal set; }
    [CompilerGeneratedAttribute]
internal List`1<IGrouping`2<int, DbColumnInfo>> get_DbColumnInfoList();
    [CompilerGeneratedAttribute]
internal void set_DbColumnInfoList(List`1<IGrouping`2<int, DbColumnInfo>> value);
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal ISqlBuilder get_Builder();
    [CompilerGeneratedAttribute]
internal void set_Builder(ISqlBuilder value);
    [CompilerGeneratedAttribute]
internal InsertBuilder get_InsertBuilder();
    [CompilerGeneratedAttribute]
internal void set_InsertBuilder(InsertBuilder value);
    [CompilerGeneratedAttribute]
internal Object[] get_Inserts();
    [CompilerGeneratedAttribute]
internal void set_Inserts(Object[] value);
    public int ExecuteBulkCopy();
    [AsyncStateMachineAttribute("SqlSugar.DmBlukCopy/<ExecuteBulkCopyAsync>d__21")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteBulkCopyAsync();
    private int WriteToServer();
    private DataTable GetCopyWriteDataTable(DataTable dt);
    private DmBulkCopy GetBulkCopyInstance();
    private DataTable GetCopyData();
    private void CloseDb();
}
public class SqlSugar.DmBuilder : SqlBuilderProvider {
    public string SqlParameterKeyWord { get; }
    public string SqlDateNow { get; }
    public string FullSqlDateNow { get; }
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    public bool IsUppper { get; }
    public virtual string get_SqlParameterKeyWord();
    public virtual string get_SqlDateNow();
    public virtual string get_FullSqlDateNow();
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
    public virtual string GetTranslationTableName(string name);
    public virtual string GetTranslationColumnName(string entityName, string propertyName);
    public virtual string GetTranslationColumnName(string propertyName);
    public bool get_IsUppper();
}
public class SqlSugar.DmCodeFirst : CodeFirstProvider {
    public virtual void NoExistLogic(EntityInfo entityInfo);
    protected virtual DbColumnInfo EntityColumnToDbColumn(EntityInfo entityInfo, string tableName, EntityColumnInfo item);
    protected virtual void GetDbType(EntityColumnInfo item, Type propertyType, DbColumnInfo result);
    protected virtual void ConvertColumns(List`1<DbColumnInfo> dbColumns);
    protected virtual void ChangeKey(EntityInfo entityInfo, string tableName, EntityColumnInfo item);
}
public class SqlSugar.DmDbBind : DbBindProvider {
    public static List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypesConst;
    public List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypes { get; }
    public List`1<string> StringThrow { get; }
    private static DmDbBind();
    public virtual string GetDbTypeName(string csharpTypeName);
    public virtual string GetPropertyTypeName(string dbTypeName);
    public virtual List`1<KeyValuePair`2<string, CSharpDataType>> get_MappingTypes();
    public virtual List`1<string> get_StringThrow();
}
public class SqlSugar.DmDbFirst : DbFirstProvider {
}
public class SqlSugar.DmDbMaintenance : DbMaintenanceProvider {
    protected string GetDataBaseSql { get; }
    protected string GetColumnInfosByTableNameSql { get; }
    protected string GetTableInfoListSql { get; }
    protected string GetViewInfoListSql { get; }
    protected string IsAnyIndexSql { get; }
    protected string CreateIndexSql { get; }
    protected string AddDefaultValueSql { get; }
    protected string CreateDataBaseSql { get; }
    protected string AddPrimaryKeySql { get; }
    protected string AddColumnToTableSql { get; }
    protected string AlterColumnToTableSql { get; }
    protected string BackupDataBaseSql { get; }
    protected string CreateTableSql { get; }
    protected string CreateTableColumn { get; }
    protected string TruncateTableSql { get; }
    protected string BackupTableSql { get; }
    protected string DropTableSql { get; }
    protected string DropColumnToTableSql { get; }
    protected string DropConstraintSql { get; }
    protected string RenameColumnSql { get; }
    protected string AddColumnRemarkSql { get; }
    protected string DeleteColumnRemarkSql { get; }
    protected string IsAnyColumnRemarkSql { get; }
    protected string AddTableRemarkSql { get; }
    protected string DeleteTableRemarkSql { get; }
    protected string IsAnyTableRemarkSql { get; }
    protected string RenameTableSql { get; }
    protected string IsAnyProcedureSql { get; }
    protected string CheckSystemTablePermissionsSql { get; }
    protected string CreateTableNull { get; }
    protected string CreateTableNotNull { get; }
    protected string CreateTablePirmaryKey { get; }
    protected string CreateTableIdentity { get; }
    public bool IsUppper { get; }
    protected virtual string get_GetDataBaseSql();
    protected virtual string get_GetColumnInfosByTableNameSql();
    protected virtual string get_GetTableInfoListSql();
    protected virtual string get_GetViewInfoListSql();
    protected virtual string get_IsAnyIndexSql();
    protected virtual string get_CreateIndexSql();
    protected virtual string get_AddDefaultValueSql();
    protected virtual string get_CreateDataBaseSql();
    protected virtual string get_AddPrimaryKeySql();
    protected virtual string get_AddColumnToTableSql();
    protected virtual string get_AlterColumnToTableSql();
    protected virtual string get_BackupDataBaseSql();
    protected virtual string get_CreateTableSql();
    protected virtual string get_CreateTableColumn();
    protected virtual string get_TruncateTableSql();
    protected virtual string get_BackupTableSql();
    protected virtual string get_DropTableSql();
    protected virtual string get_DropColumnToTableSql();
    protected virtual string get_DropConstraintSql();
    protected virtual string get_RenameColumnSql();
    protected virtual string get_AddColumnRemarkSql();
    protected virtual string get_DeleteColumnRemarkSql();
    protected virtual string get_IsAnyColumnRemarkSql();
    protected virtual string get_AddTableRemarkSql();
    protected virtual string get_DeleteTableRemarkSql();
    protected virtual string get_IsAnyTableRemarkSql();
    protected virtual string get_RenameTableSql();
    protected virtual string get_IsAnyProcedureSql();
    protected virtual string get_CheckSystemTablePermissionsSql();
    protected virtual string get_CreateTableNull();
    protected virtual string get_CreateTableNotNull();
    protected virtual string get_CreateTablePirmaryKey();
    protected virtual string get_CreateTableIdentity();
    public virtual bool UpdateColumn(string tableName, DbColumnInfo column);
    protected virtual string GetUpdateColumnSqlOnlyType(string tableName, DbColumnInfo columnInfo);
    public virtual List`1<string> GetDbTypes();
    public virtual List`1<string> GetTriggerNames(string tableName);
    public virtual List`1<string> GetFuncList();
    public virtual bool RenameTable(string oldTableName, string newTableName);
    public virtual List`1<string> GetIndexList(string tableName);
    public virtual bool AddColumn(string tableName, DbColumnInfo columnInfo);
    public virtual bool CreateIndex(string tableName, String[] columnNames, bool isUnique);
    public virtual bool AddDefaultValue(string tableName, string columnName, string defaultValue);
    public virtual bool CreateDatabase(string databaseDirectory);
    public virtual bool CreateDatabase(string databaseName, string databaseDirectory);
    public virtual bool AddRemark(EntityInfo entity);
    public virtual bool AddTableRemark(string tableName, string description);
    public virtual bool AddColumnRemark(string columnName, string tableName, string description);
    public virtual List`1<DbColumnInfo> GetColumnInfosByTableName(string tableName, bool isCache);
    private List`1<DbColumnInfo> GetColumnInfosByTableName(string tableName);
    private List`1<DbColumnInfo> GetOracleDbType(string tableName);
    private List`1<string> GetPrimaryKeyByTableNames(string tableName);
    public string GetTableComment(string tableName);
    public string GetFieldComment(string tableName, string filedName);
    public virtual bool CreateTable(string tableName, List`1<DbColumnInfo> columns, bool isCreatePrimaryKey);
    public static string ExtractSchema(string connectionString);
    public virtual bool IsAnyTable(string tableName, bool isCache);
    public bool get_IsUppper();
    private static void ConvertCreateColumnInfo(DbColumnInfo x);
    [CompilerGeneratedAttribute]
private string <CreateTable>b__87_1(DbColumnInfo it);
}
public class SqlSugar.DmDeleteBuilder : DeleteBuilder {
}
public class SqlSugar.DmExpressionContext : ExpressionContext {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public string SqlParameterKeyWord { get; }
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    public bool IsUppper { get; }
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    public virtual string get_SqlParameterKeyWord();
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
    public virtual string GetTranslationTableName(string entityName, bool isMapping);
    public virtual string GetTranslationColumnName(string columnName);
    public virtual string GetDbColumnName(string entityName, string propertyName);
    public bool get_IsUppper();
}
public class SqlSugar.DmFastBuilder : FastBuilder {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsActionUpdateColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbFastestProperties <DbFastestProperties>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UpdateSql>k__BackingField;
    public bool IsActionUpdateColumns { get; public set; }
    public DbFastestProperties DbFastestProperties { get; public set; }
    public string UpdateSql { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_IsActionUpdateColumns();
    [CompilerGeneratedAttribute]
public virtual void set_IsActionUpdateColumns(bool value);
    [CompilerGeneratedAttribute]
public virtual DbFastestProperties get_DbFastestProperties();
    [CompilerGeneratedAttribute]
public virtual void set_DbFastestProperties(DbFastestProperties value);
    [AsyncStateMachineAttribute("SqlSugar.DmFastBuilder/<ExecuteBulkCopyAsync>d__8")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> ExecuteBulkCopyAsync(DataTable dt);
    [AsyncStateMachineAttribute("SqlSugar.DmFastBuilder/<CreateTempAsync>d__9`1")]
[DebuggerStepThroughAttribute]
public virtual Task CreateTempAsync(DataTable dt);
    [CompilerGeneratedAttribute]
public virtual string get_UpdateSql();
    [CompilerGeneratedAttribute]
public virtual void set_UpdateSql(string value);
    [AsyncStateMachineAttribute("SqlSugar.DmFastBuilder/<_Execute>d__14")]
[DebuggerStepThroughAttribute]
private Task`1<int> _Execute(DataTable dt);
    public DmBulkCopy GetBulkCopyInstance();
}
public class SqlSugar.DmInsertBuilder : InsertBuilder {
    public string SqlTemplate { get; }
    public string SqlTemplateBatchUnion { get; }
    public string SqlTemplateBatch { get; }
    public string SqlTemplateBatchSelect { get; }
    public virtual string get_SqlTemplate();
    public virtual string get_SqlTemplateBatchUnion();
    public virtual string get_SqlTemplateBatch();
    public virtual string get_SqlTemplateBatchSelect();
    public virtual string FormatDateTimeOffset(object value);
    public virtual string ToSqlString();
    public virtual object FormatValue(object value);
}
public class SqlSugar.DmInserttable`1 : InsertableProvider`1<T> {
}
public class SqlSugar.DmMethod : DefaultDbMethod {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ParameterKeyWord>k__BackingField;
    public string ParameterKeyWord { get; public set; }
    public virtual string WeekOfYear(MethodCallExpressionModel mode);
    [CompilerGeneratedAttribute]
public virtual string get_ParameterKeyWord();
    [CompilerGeneratedAttribute]
public virtual void set_ParameterKeyWord(string value);
    public virtual string GetStringJoinSelector(string result, string separator);
    public virtual string ToInt64(MethodCallExpressionModel model);
    public virtual string ToTime(MethodCallExpressionModel model);
    public virtual string Substring(MethodCallExpressionModel model);
    public virtual string DateValue(MethodCallExpressionModel model);
    public virtual string DateAddDay(MethodCallExpressionModel model);
    public virtual string ToString(MethodCallExpressionModel model);
    public virtual string ToDate(MethodCallExpressionModel model);
    public virtual string Contains(MethodCallExpressionModel model);
    public virtual string StartsWith(MethodCallExpressionModel model);
    public virtual string EndsWith(MethodCallExpressionModel model);
    public virtual string Trim(MethodCallExpressionModel model);
    public virtual string DateIsSameDay(MethodCallExpressionModel model);
    public virtual string DateIsSameByType(MethodCallExpressionModel model);
    public virtual string Length(MethodCallExpressionModel model);
    public virtual string IsNull(MethodCallExpressionModel model);
    public virtual string MergeString(String[] strings);
    public virtual string GetDate();
    public virtual string GetRandom();
    public virtual string CharIndex(MethodCallExpressionModel model);
    public virtual string ToDecimal(MethodCallExpressionModel model);
    public virtual string TrimEnd(MethodCallExpressionModel mode);
    public virtual string TrimStart(MethodCallExpressionModel mode);
    public virtual string Left(MethodCallExpressionModel mode);
    public virtual string Right(MethodCallExpressionModel mode);
    public virtual string Ceil(MethodCallExpressionModel mode);
    public virtual string NewUid(MethodCallExpressionModel mode);
    public virtual string JsonField(MethodCallExpressionModel model);
    public virtual string FullTextContains(MethodCallExpressionModel mode);
}
public class SqlSugar.DmProvider : AdoProvider {
    private static String[] KeyWord;
    public string SqlParameterKeyWord { get; }
    public IDbConnection Connection { get; public set; }
    public Action`1<SqlSugarException> ErrorEvent { get; }
    private static DmProvider();
    public virtual string get_SqlParameterKeyWord();
    public virtual IDbConnection get_Connection();
    public virtual void set_Connection(IDbConnection value);
    public virtual void BeginTran(string transactionName);
    public virtual void BeginTran(IsolationLevel iso, string transactionName);
    public virtual IDataAdapter GetAdapter();
    public virtual DbCommand GetCommand(string sql, SugarParameter[] parameters);
    public virtual void SetCommandToAdapter(IDataAdapter dataAdapter, DbCommand command);
    public virtual IDataParameter[] ToIDbDataParameter(SugarParameter[] parameters);
    private static string ReplaceKeyWordParameterName(string sql, SugarParameter[] parameters);
    private static string ReplaceKeyWordWithAd(string sql, SugarParameter[] parameters);
    public virtual Action`1<SqlSugarException> get_ErrorEvent();
    [CompilerGeneratedAttribute]
private void <get_ErrorEvent>b__16_0(SqlSugarException it);
}
public class SqlSugar.DmQueryable`1 : QueryableProvider`1<T> {
    public virtual ISugarQueryable`1<T> With(string withString);
    public virtual ISugarQueryable`1<T> PartitionBy(string groupFileds);
}
public class SqlSugar.DmQueryable`10 : QueryableProvider`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> {
}
public class SqlSugar.DmQueryable`11 : QueryableProvider`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> {
}
public class SqlSugar.DmQueryable`12 : QueryableProvider`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> {
}
public class SqlSugar.DmQueryable`2 : QueryableProvider`2<T, T2> {
    public ISugarQueryable`2<T, T2> With(string withString);
}
public class SqlSugar.DmQueryable`3 : QueryableProvider`3<T, T2, T3> {
}
public class SqlSugar.DmQueryable`4 : QueryableProvider`4<T, T2, T3, T4> {
}
public class SqlSugar.DmQueryable`5 : QueryableProvider`5<T, T2, T3, T4, T5> {
}
public class SqlSugar.DmQueryable`6 : QueryableProvider`6<T, T2, T3, T4, T5, T6> {
}
public class SqlSugar.DmQueryable`7 : QueryableProvider`7<T, T2, T3, T4, T5, T6, T7> {
}
public class SqlSugar.DmQueryable`8 : QueryableProvider`8<T, T2, T3, T4, T5, T6, T7, T8> {
}
public class SqlSugar.DmQueryable`9 : QueryableProvider`9<T, T2, T3, T4, T5, T6, T7, T8, T9> {
}
public class SqlSugar.DmQueryBuilder : QueryBuilder {
    public string SqlTemplate { get; }
    public string GetMySelectValue { get; }
    public string MySqlTemplate { get; }
    public virtual bool IsComplexModel(string sql);
    public virtual string get_SqlTemplate();
    public virtual string ToSqlString();
    public string MySqlToSqlString();
    public string get_GetMySelectValue();
    public string get_MySqlTemplate();
    private string OffsetPage();
    public virtual string ToPageSql(string sql, Nullable`1<int> take, Nullable`1<int> skip, bool isExternal);
    public virtual string ToPageSql2(string sql, Nullable`1<int> pageIndex, Nullable`1<int> pageSize, bool isExternal);
}
public class SqlSugar.DmUpdateBuilder : UpdateBuilder {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ReSetValueBySqlExpListType>k__BackingField;
    public string ReSetValueBySqlExpListType { get; public set; }
    public bool IsUppper { get; }
    [CompilerGeneratedAttribute]
public virtual string get_ReSetValueBySqlExpListType();
    [CompilerGeneratedAttribute]
public virtual void set_ReSetValueBySqlExpListType(string value);
    protected virtual string GetJoinUpdate(string columnsString, String& whereString);
    protected virtual string TomultipleSqlString(List`1<IGrouping`2<int, DbColumnInfo>> groupList);
    private string GetOracleUpdateColums(int i, DbColumnInfo m);
    public bool get_IsUppper();
    public virtual string FormatDateTimeOffset(object value);
    public object FormatValue(int i, string name, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private string <>n__0();
}
internal class SqlSugar.DorisHelper : object {
    public static void UpdateDateParameter(MySqlParameter sqlParameter);
    public static List`1<DbColumnInfo> GetColumns(List`1<DbColumnInfo> colums);
    public static bool IsDoris(ISqlSugarClient context);
    public static string UpdateDorisSql(ISqlBuilder sqlBuilder, List`1<DbColumnInfo> columns, string sql);
}
public class SqlSugar.DynamicBuilder : object {
    internal List`1<PropertyMetadata> propertyAttr;
    internal List`1<CustomAttributeBuilder> entityAttr;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <entityName>k__BackingField;
    internal Type baseType;
    internal Type[] interfaces;
    internal SqlSugarProvider context;
    internal string entityName { get; internal set; }
    public DynamicBuilder(SqlSugarProvider context);
    internal CustomAttributeBuilder GetSplitEntityAttr(SplitTableAttribute sugarTable);
    internal CustomAttributeBuilder GetSplitFieldAttr(SplitFieldAttribute fieldAttribute);
    internal CustomAttributeBuilder GetEntity(SugarTable sugarTable);
    internal CustomAttributeBuilder GetProperty(SugarColumn sugarTable);
    [CompilerGeneratedAttribute]
internal string get_entityName();
    [CompilerGeneratedAttribute]
internal void set_entityName(string value);
    public DynamicProperyBuilder CreateClass(string entityName, SugarTable table, Type baseType, Type[] interfaces, SplitTableAttribute splitTableAttribute);
    public object CreateObjectByType(Type type, Dictionary`2<string, object> dict);
    public List`1<object> CreateObjectByType(Type type, List`1<Dictionary`2<string, object>> dictList);
}
public static class SqlSugar.DynamicBuilderHelper : object {
    public static Type CreateDynamicClass(string className, List`1<PropertyMetadata> properties, TypeAttributes attributes, List`1<CustomAttributeBuilder> classCustomAttributes, Type baseType, Type[] interfaces);
    public static Type CreateDynamicClass(TypeBuilder typeBuilder, TypeBuilder typeBuilderChild, List`1<PropertyMetadata> properties, List`1<CustomAttributeBuilder> classCustomAttributes);
}
public class SqlSugar.DynamicCoreHelper : object {
    public static Expression`1<Func`2<T, bool>> GetWhere(string shortName, FormattableString whereSql);
    public static LambdaExpression GetWhere(Type entityType, string shortName, FormattableString whereSql);
    private static string CompatibleDynamicLinqCoreBug(string sql);
    public static LambdaExpression GetObject(Type entityType, string shortName, FormattableString whereSql);
    public static LambdaExpression GetWhere(Dictionary`2<string, Type> parameterDictionary, FormattableString whereSql);
    public static LambdaExpression GetMember(Dictionary`2<string, Type> parameterDictionary, Type propertyType, FormattableString memberSql);
    public static LambdaExpression GetMember(Type entityType, Type propertyType, string shortName, FormattableString memberSql);
    private static string ReplaceFormatParameters(string format);
}
public class SqlSugar.DynamicOneselfType : object {
}
public class SqlSugar.DynamicOneselfTypeList : object {
}
public class SqlSugar.DynamicParameters : object {
    public static Dictionary`2<string, Type> Create(string parameterName, Type parameterType1, string parameterName2, Type parameterType2);
    public static Dictionary`2<string, Type> Create(string parameterName, Type parameterType1, string parameterName2, Type parameterType2, string parameterName3, Type parameterType3);
    public static Dictionary`2<string, Type> Create(string parameterName, Type parameterType1, string parameterName2, Type parameterType2, string parameterName3, Type parameterType3, string parameterName4, Type parameterType4);
    public static Dictionary`2<string, Type> Create(string parameterName, Type parameterType1, string parameterName2, Type parameterType2, string parameterName3, Type parameterType3, string parameterName4, Type parameterType4, string parameterName5, Type parameterType5);
    public static Dictionary`2<string, Type> Create(string parameterName, Type parameterType1, string parameterName2, Type parameterType2, string parameterName3, Type parameterType3, string parameterName4, Type parameterType4, string parameterName5, Type parameterType5, string parameterName6, Type parameterType6);
    public static Dictionary`2<string, Type> Create(string parameterName, Type parameterType1, string parameterName2, Type parameterType2, string parameterName3, Type parameterType3, string parameterName4, Type parameterType4, string parameterName5, Type parameterType5, string parameterName6, Type parameterType6, string parameterName7, Type parameterType7);
    public static Dictionary`2<string, Type> Create(string parameterName, Type parameterType1, string parameterName2, Type parameterType2, string parameterName3, Type parameterType3, string parameterName4, Type parameterType4, string parameterName5, Type parameterType5, string parameterName6, Type parameterType6, string parameterName7, Type parameterType7, string parameterName8, Type parameterType8);
    public static Dictionary`2<string, Type> Create(string parameterName, Type parameterType1, string parameterName2, Type parameterType2, string parameterName3, Type parameterType3, string parameterName4, Type parameterType4, string parameterName5, Type parameterType5, string parameterName6, Type parameterType6, string parameterName7, Type parameterType7, string parameterName8, Type parameterType8, string parameterName9, Type parameterType9);
    public static Dictionary`2<string, Type> Create(string parameterName, Type parameterType1, string parameterName2, Type parameterType2, string parameterName3, Type parameterType3, string parameterName4, Type parameterType4, string parameterName5, Type parameterType5, string parameterName6, Type parameterType6, string parameterName7, Type parameterType7, string parameterName8, Type parameterType8, string parameterName9, Type parameterType9, string parameterName10, Type parameterType10);
}
public class SqlSugar.DynamicProperyBuilder : object {
    private bool IsCache;
    public DynamicBuilder baseBuilder;
    public static DynamicProperyBuilder CopyNew();
    public DynamicProperyBuilder CreateProperty(string propertyName, Type properyType, SugarColumn column, bool isSplitField, Navigate navigate);
    public DynamicProperyBuilder WithCache(bool isCache);
    public Type BuilderType();
    public Tuple`2<Type, Type> BuilderTypes(DynamicProperyBuilder dynamicBuilderB);
    private Tuple`2<Type, Type> GetBuilderTypes(DynamicProperyBuilder dynamicBuilderB);
    public CustomAttributeBuilder BuildNavigateAttribute(Navigate navigate);
    [CompilerGeneratedAttribute]
private Type <BuilderType>b__5_1();
}
internal class SqlSugar.EmitTool : object {
    internal static ModuleBuilder CreateModuleBuilder();
    internal static AssemblyBuilder CreateAssembly();
    internal static TypeBuilder CreateTypeBuilder(string className, TypeAttributes attributes, Type baseType, Type[] interfaces);
    internal static PropertyBuilder CreateProperty(TypeBuilder typeBuilder, string propertyName, Type propertyType, IEnumerable`1<CustomAttributeBuilder> propertyCustomAttributes);
}
public class SqlSugar.EntityColumnable`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityColumnInfo <entityColumnInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsTable>k__BackingField;
    public EntityColumnInfo entityColumnInfo { get; public set; }
    public bool IsTable { get; public set; }
    [CompilerGeneratedAttribute]
public EntityColumnInfo get_entityColumnInfo();
    [CompilerGeneratedAttribute]
public void set_entityColumnInfo(EntityColumnInfo value);
    [CompilerGeneratedAttribute]
public bool get_IsTable();
    [CompilerGeneratedAttribute]
public void set_IsTable(bool value);
    public EntityColumnable`1<T> UpdateProperty(Expression`1<Func`2<T, object>> propertyExpression, Action`1<EntityColumnInfo> updateAction);
    public EntityColumnable`1<T> OneToOne(Expression`1<Func`2<T, object>> propertyExpression, string firstName, string lastName);
    public EntityColumnable`1<T> OneToMany(Expression`1<Func`2<T, object>> propertyExpression, string firstName, string lastName);
    public EntityColumnable`1<T> ManyToMany(Expression`1<Func`2<T, object>> propertyExpression, Type mapppingType, string mapppingTypeAid, string mapppingTypeBid);
}
[ExtensionAttribute]
public static class SqlSugar.EntityColumnExtension : object {
    [ExtensionAttribute]
public static EntityColumnable`1<T> IfTable(EntityColumnInfo entityColumnInfo);
}
public class SqlSugar.EntityColumnInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyInfo <PropertyInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <OldDbColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ColumnDescription>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsPrimarykey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsTreeKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsEnableUpdateVersionValidation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <SqlParameterDbType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <EntityName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbTableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsIgnore>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <DecimalDigits>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <OracleSequenceName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsOnlyIgnoreInsert>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsOnlyIgnoreUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsTranscoding>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SerializeDateTimeFormat>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsJson>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <NoSerialize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <IndexGroupNameList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <UIndexGroupNameList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsArray>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <UnderType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Navigate <Navigat>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <CreateTableFieldSort>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <SqlParameterSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <InsertSql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <InsertServerTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UpdateServerTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UpdateSql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <ExtendedAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDisabledAlterColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <QuerySql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsOwnsOne>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyInfo <ForOwnsOnePropertyInfo>k__BackingField;
    public PropertyInfo PropertyInfo { get; public set; }
    public string PropertyName { get; public set; }
    public string DbColumnName { get; public set; }
    public string OldDbColumnName { get; public set; }
    public int Length { get; public set; }
    public string ColumnDescription { get; public set; }
    public string DefaultValue { get; public set; }
    public bool IsNullable { get; public set; }
    public bool IsIdentity { get; public set; }
    public bool IsPrimarykey { get; public set; }
    public bool IsTreeKey { get; public set; }
    public bool IsEnableUpdateVersionValidation { get; public set; }
    public object SqlParameterDbType { get; public set; }
    public string EntityName { get; public set; }
    public string DbTableName { get; public set; }
    public bool IsIgnore { get; public set; }
    public string DataType { get; public set; }
    public int DecimalDigits { get; public set; }
    public string OracleSequenceName { get; public set; }
    public bool IsOnlyIgnoreInsert { get; public set; }
    public bool IsOnlyIgnoreUpdate { get; public set; }
    public bool IsTranscoding { get; public set; }
    public string SerializeDateTimeFormat { get; public set; }
    public bool IsJson { get; public set; }
    public bool NoSerialize { get; public set; }
    public String[] IndexGroupNameList { get; public set; }
    public String[] UIndexGroupNameList { get; public set; }
    public bool IsArray { get; public set; }
    public Type UnderType { get; public set; }
    public Navigate Navigat { get; public set; }
    public int CreateTableFieldSort { get; public set; }
    public object SqlParameterSize { get; public set; }
    public string InsertSql { get; public set; }
    public bool InsertServerTime { get; public set; }
    public bool UpdateServerTime { get; public set; }
    public string UpdateSql { get; public set; }
    public object ExtendedAttribute { get; public set; }
    public bool IsDisabledAlterColumn { get; public set; }
    public string QuerySql { get; public set; }
    public bool IsOwnsOne { get; public set; }
    public PropertyInfo ForOwnsOnePropertyInfo { get; public set; }
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
    [CompilerGeneratedAttribute]
public void set_PropertyInfo(PropertyInfo value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_DbColumnName();
    [CompilerGeneratedAttribute]
public void set_DbColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_OldDbColumnName();
    [CompilerGeneratedAttribute]
public void set_OldDbColumnName(string value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    [CompilerGeneratedAttribute]
public string get_ColumnDescription();
    [CompilerGeneratedAttribute]
public void set_ColumnDescription(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsIdentity();
    [CompilerGeneratedAttribute]
public void set_IsIdentity(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPrimarykey();
    [CompilerGeneratedAttribute]
public void set_IsPrimarykey(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTreeKey();
    [CompilerGeneratedAttribute]
public void set_IsTreeKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEnableUpdateVersionValidation();
    [CompilerGeneratedAttribute]
public void set_IsEnableUpdateVersionValidation(bool value);
    [CompilerGeneratedAttribute]
public object get_SqlParameterDbType();
    [CompilerGeneratedAttribute]
public void set_SqlParameterDbType(object value);
    [CompilerGeneratedAttribute]
public string get_EntityName();
    [CompilerGeneratedAttribute]
public void set_EntityName(string value);
    [CompilerGeneratedAttribute]
public string get_DbTableName();
    [CompilerGeneratedAttribute]
public void set_DbTableName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsIgnore();
    [CompilerGeneratedAttribute]
public void set_IsIgnore(bool value);
    [CompilerGeneratedAttribute]
public string get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(string value);
    [CompilerGeneratedAttribute]
public int get_DecimalDigits();
    [CompilerGeneratedAttribute]
public void set_DecimalDigits(int value);
    [CompilerGeneratedAttribute]
public string get_OracleSequenceName();
    [CompilerGeneratedAttribute]
public void set_OracleSequenceName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsOnlyIgnoreInsert();
    [CompilerGeneratedAttribute]
public void set_IsOnlyIgnoreInsert(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOnlyIgnoreUpdate();
    [CompilerGeneratedAttribute]
public void set_IsOnlyIgnoreUpdate(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTranscoding();
    [CompilerGeneratedAttribute]
public void set_IsTranscoding(bool value);
    [CompilerGeneratedAttribute]
public string get_SerializeDateTimeFormat();
    [CompilerGeneratedAttribute]
public void set_SerializeDateTimeFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_IsJson();
    [CompilerGeneratedAttribute]
public void set_IsJson(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoSerialize();
    [CompilerGeneratedAttribute]
public void set_NoSerialize(bool value);
    [CompilerGeneratedAttribute]
public String[] get_IndexGroupNameList();
    [CompilerGeneratedAttribute]
public void set_IndexGroupNameList(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_UIndexGroupNameList();
    [CompilerGeneratedAttribute]
public void set_UIndexGroupNameList(String[] value);
    [CompilerGeneratedAttribute]
public bool get_IsArray();
    [CompilerGeneratedAttribute]
public void set_IsArray(bool value);
    [CompilerGeneratedAttribute]
public Type get_UnderType();
    [CompilerGeneratedAttribute]
public void set_UnderType(Type value);
    [CompilerGeneratedAttribute]
public Navigate get_Navigat();
    [CompilerGeneratedAttribute]
public void set_Navigat(Navigate value);
    [CompilerGeneratedAttribute]
public int get_CreateTableFieldSort();
    [CompilerGeneratedAttribute]
public void set_CreateTableFieldSort(int value);
    [CompilerGeneratedAttribute]
public object get_SqlParameterSize();
    [CompilerGeneratedAttribute]
public void set_SqlParameterSize(object value);
    [CompilerGeneratedAttribute]
public string get_InsertSql();
    [CompilerGeneratedAttribute]
public void set_InsertSql(string value);
    [CompilerGeneratedAttribute]
public bool get_InsertServerTime();
    [CompilerGeneratedAttribute]
public void set_InsertServerTime(bool value);
    [CompilerGeneratedAttribute]
public bool get_UpdateServerTime();
    [CompilerGeneratedAttribute]
public void set_UpdateServerTime(bool value);
    [CompilerGeneratedAttribute]
public string get_UpdateSql();
    [CompilerGeneratedAttribute]
public void set_UpdateSql(string value);
    [CompilerGeneratedAttribute]
public object get_ExtendedAttribute();
    [CompilerGeneratedAttribute]
public void set_ExtendedAttribute(object value);
    [CompilerGeneratedAttribute]
public bool get_IsDisabledAlterColumn();
    [CompilerGeneratedAttribute]
public void set_IsDisabledAlterColumn(bool value);
    [CompilerGeneratedAttribute]
public string get_QuerySql();
    [CompilerGeneratedAttribute]
public void set_QuerySql(string value);
    [CompilerGeneratedAttribute]
public bool get_IsOwnsOne();
    [CompilerGeneratedAttribute]
public void set_IsOwnsOne(bool value);
    [CompilerGeneratedAttribute]
public PropertyInfo get_ForOwnsOnePropertyInfo();
    [CompilerGeneratedAttribute]
public void set_ForOwnsOnePropertyInfo(PropertyInfo value);
}
public class SqlSugar.EntityInfo : object {
    private string _DbTableName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <EntityName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableDescription>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<EntityColumnInfo> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDisabledDelete>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDisabledUpdateAll>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SugarIndexAttribute> <Indexs>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsCreateTableFiledSort>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Discrimator>k__BackingField;
    public string EntityName { get; public set; }
    public string DbTableName { get; public set; }
    public string TableDescription { get; public set; }
    public Type Type { get; public set; }
    public List`1<EntityColumnInfo> Columns { get; public set; }
    public bool IsDisabledDelete { get; public set; }
    public bool IsDisabledUpdateAll { get; public set; }
    public List`1<SugarIndexAttribute> Indexs { get; public set; }
    public bool IsCreateTableFiledSort { get; public set; }
    public string Discrimator { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EntityName();
    [CompilerGeneratedAttribute]
public void set_EntityName(string value);
    public string get_DbTableName();
    public void set_DbTableName(string value);
    [CompilerGeneratedAttribute]
public string get_TableDescription();
    [CompilerGeneratedAttribute]
public void set_TableDescription(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public List`1<EntityColumnInfo> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(List`1<EntityColumnInfo> value);
    [CompilerGeneratedAttribute]
public bool get_IsDisabledDelete();
    [CompilerGeneratedAttribute]
public void set_IsDisabledDelete(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDisabledUpdateAll();
    [CompilerGeneratedAttribute]
public void set_IsDisabledUpdateAll(bool value);
    [CompilerGeneratedAttribute]
public List`1<SugarIndexAttribute> get_Indexs();
    [CompilerGeneratedAttribute]
public void set_Indexs(List`1<SugarIndexAttribute> value);
    [CompilerGeneratedAttribute]
public bool get_IsCreateTableFiledSort();
    [CompilerGeneratedAttribute]
public void set_IsCreateTableFiledSort(bool value);
    [CompilerGeneratedAttribute]
public string get_Discrimator();
    [CompilerGeneratedAttribute]
public void set_Discrimator(string value);
}
public class SqlSugar.EntityMaintenance : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    public EntityInfo GetEntityInfo();
    public EntityInfo GetEntityInfoWithAttr(Type type);
    public EntityInfo GetEntityInfo(Type type);
    private EntityInfo _GetEntityInfo(Type type);
    public EntityInfo GetEntityInfoNoCache(Type type);
    public string GetTableName();
    public string GetTableName(Type entityType);
    public string GetTableName(string entityName);
    public string GetEntityName(string tableName);
    public string GetEntityName();
    public string GetEntityName(Type type);
    public string GetDbColumnName(string propertyName);
    public string GetDbColumnName(string propertyName, Type entityType);
    public string GetPropertyName(string dbColumnName);
    public string GetPropertyName(string dbColumnName, Type entityType);
    public PropertyInfo GetProperty(string dbColumnName);
    public string GetXElementNodeValue(Type entityType, string nodeAttributeName);
    public string GetTableAnnotation(Type entityType);
    public string GetPropertyAnnotation(Type entityType, string dbColumnName);
    private void SetColumns(EntityInfo result);
    private void SetValueObjectColumns(EntityInfo result, PropertyInfo property, EntityColumnInfo column);
}
internal static class SqlSugar.ErrorMessage : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static LanguageType <SugarLanguageType>k__BackingField;
    internal static string OperatorError { get; }
    internal static string ExpFileldError { get; }
    internal static string MethodError { get; }
    public static string ConnnectionOpen { get; }
    public static string ExpressionCheck { get; }
    public static string WhereIFCheck { get; }
    internal static LanguageType SugarLanguageType { get; internal set; }
    internal static string ObjNotExist { get; }
    internal static string EntityMappingError { get; }
    public static string NotSupportedDictionary { get; }
    public static string NotSupportedArray { get; }
    internal static string get_OperatorError();
    internal static string get_ExpFileldError();
    internal static string get_MethodError();
    public static string get_ConnnectionOpen();
    public static string get_ExpressionCheck();
    public static string get_WhereIFCheck();
    [CompilerGeneratedAttribute]
internal static LanguageType get_SugarLanguageType();
    [CompilerGeneratedAttribute]
internal static void set_SugarLanguageType(LanguageType value);
    internal static string get_ObjNotExist();
    internal static string get_EntityMappingError();
    public static string get_NotSupportedDictionary();
    public static string get_NotSupportedArray();
    internal static string GetThrowMessage(string enMessage, string cnMessage, String[] args);
}
public class SqlSugar.ExpResolveAccessory : object {
    protected List`1<SugarParameter> _Parameters;
    protected ExpressionResult _Result;
}
public class SqlSugar.Expressionable : object {
    public static Expressionable`1<T> Create();
    public static Expressionable`2<T, T2> Create();
    public static Expressionable`3<T, T2, T3> Create();
    public static Expressionable`4<T, T2, T3, T4> Create();
    public static Expressionable`5<T, T2, T3, T4, T5> Create();
    public static Expressionable`6<T, T2, T3, T4, T5, T6> Create();
    public static Expressionable`7<T, T2, T3, T4, T5, T6, T7> Create();
    public static Expressionable`8<T, T2, T3, T4, T5, T6, T7, T8> Create();
    public static Expressionable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Create();
    public static Expressionable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Create();
    public static Expressionable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Create();
    public static Expressionable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Create();
}
public class SqlSugar.Expressionable`1 : object {
    private Expression`1<Func`2<T, bool>> _exp;
    public Expressionable`1<T> And(Expression`1<Func`2<T, bool>> exp);
    public Expressionable`1<T> AndIF(bool isAnd, Expression`1<Func`2<T, bool>> exp);
    public Expressionable`1<T> Or(Expression`1<Func`2<T, bool>> exp);
    public Expressionable`1<T> OrIF(bool isOr, Expression`1<Func`2<T, bool>> exp);
    public Expression`1<Func`2<T, bool>> ToExpression();
}
public class SqlSugar.Expressionable`10 : object {
    private Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> _exp;
    public Expressionable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> And(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp);
    public Expressionable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> AndIF(bool isAnd, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp);
    public Expressionable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Or(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp);
    public Expressionable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrIF(bool isOr, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp);
    public Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> ToExpression();
}
public class SqlSugar.Expressionable`11 : object {
    private Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> _exp;
    public Expressionable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> And(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp);
    public Expressionable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> AndIF(bool isAnd, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp);
    public Expressionable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Or(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp);
    public Expressionable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrIF(bool isOr, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp);
    public Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> ToExpression();
}
public class SqlSugar.Expressionable`12 : object {
    private Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> _exp;
    public Expressionable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> And(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp);
    public Expressionable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> AndIF(bool isAnd, Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp);
    public Expressionable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Or(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp);
    public Expressionable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrIF(bool isOr, Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp);
    public Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> ToExpression();
}
public class SqlSugar.Expressionable`2 : object {
    private Expression`1<Func`3<T, T2, bool>> _exp;
    public Expressionable`2<T, T2> And(Expression`1<Func`3<T, T2, bool>> exp);
    public Expressionable`2<T, T2> AndIF(bool isAnd, Expression`1<Func`3<T, T2, bool>> exp);
    public Expressionable`2<T, T2> Or(Expression`1<Func`3<T, T2, bool>> exp);
    public Expressionable`2<T, T2> OrIF(bool isOr, Expression`1<Func`3<T, T2, bool>> exp);
    public Expression`1<Func`3<T, T2, bool>> ToExpression();
}
public class SqlSugar.Expressionable`3 : object {
    private Expression`1<Func`4<T, T2, T3, bool>> _exp;
    public Expressionable`3<T, T2, T3> And(Expression`1<Func`4<T, T2, T3, bool>> exp);
    public Expressionable`3<T, T2, T3> AndIF(bool isAnd, Expression`1<Func`4<T, T2, T3, bool>> exp);
    public Expressionable`3<T, T2, T3> Or(Expression`1<Func`4<T, T2, T3, bool>> exp);
    public Expressionable`3<T, T2, T3> OrIF(bool isOr, Expression`1<Func`4<T, T2, T3, bool>> exp);
    public Expression`1<Func`4<T, T2, T3, bool>> ToExpression();
}
public class SqlSugar.Expressionable`4 : object {
    private Expression`1<Func`5<T, T2, T3, T4, bool>> _exp;
    public Expressionable`4<T, T2, T3, T4> And(Expression`1<Func`5<T, T2, T3, T4, bool>> exp);
    public Expressionable`4<T, T2, T3, T4> AndIF(bool isAnd, Expression`1<Func`5<T, T2, T3, T4, bool>> exp);
    public Expressionable`4<T, T2, T3, T4> Or(Expression`1<Func`5<T, T2, T3, T4, bool>> exp);
    public Expressionable`4<T, T2, T3, T4> OrIF(bool isOr, Expression`1<Func`5<T, T2, T3, T4, bool>> exp);
    public Expression`1<Func`5<T, T2, T3, T4, bool>> ToExpression();
}
public class SqlSugar.Expressionable`5 : object {
    private Expression`1<Func`6<T, T2, T3, T4, T5, bool>> _exp;
    public Expressionable`5<T, T2, T3, T4, T5> And(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> exp);
    public Expressionable`5<T, T2, T3, T4, T5> AndIF(bool isAnd, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> exp);
    public Expressionable`5<T, T2, T3, T4, T5> Or(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> exp);
    public Expressionable`5<T, T2, T3, T4, T5> OrIF(bool isOr, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> exp);
    public Expression`1<Func`6<T, T2, T3, T4, T5, bool>> ToExpression();
}
public class SqlSugar.Expressionable`6 : object {
    private Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> _exp;
    public Expressionable`6<T, T2, T3, T4, T5, T6> And(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> exp);
    public Expressionable`6<T, T2, T3, T4, T5, T6> AndIF(bool isAnd, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> exp);
    public Expressionable`6<T, T2, T3, T4, T5, T6> Or(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> exp);
    public Expressionable`6<T, T2, T3, T4, T5, T6> OrIF(bool isOr, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> exp);
    public Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> ToExpression();
}
public class SqlSugar.Expressionable`7 : object {
    private Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> _exp;
    public Expressionable`7<T, T2, T3, T4, T5, T6, T7> And(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> exp);
    public Expressionable`7<T, T2, T3, T4, T5, T6, T7> AndIF(bool isAnd, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> exp);
    public Expressionable`7<T, T2, T3, T4, T5, T6, T7> Or(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> exp);
    public Expressionable`7<T, T2, T3, T4, T5, T6, T7> OrIF(bool isOr, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> exp);
    public Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> ToExpression();
}
public class SqlSugar.Expressionable`8 : object {
    private Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> _exp;
    public Expressionable`8<T, T2, T3, T4, T5, T6, T7, T8> And(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> exp);
    public Expressionable`8<T, T2, T3, T4, T5, T6, T7, T8> AndIF(bool isAnd, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> exp);
    public Expressionable`8<T, T2, T3, T4, T5, T6, T7, T8> Or(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> exp);
    public Expressionable`8<T, T2, T3, T4, T5, T6, T7, T8> OrIF(bool isOr, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> exp);
    public Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> ToExpression();
}
public class SqlSugar.Expressionable`9 : object {
    private Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> _exp;
    public Expressionable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> And(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp);
    public Expressionable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> AndIF(bool isAnd, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp);
    public Expressionable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Or(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp);
    public Expressionable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrIF(bool isOr, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp);
    public Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> ToExpression();
}
public class SqlSugar.ExpressionBuilderHelper : object {
    public static object CallFunc(Type type, Object[] param, object methodData, string methodName);
    public static T CallFunc(object param, object methodData, string methodName);
    public static T CallStaticFunc(object param, Type methodType, string methodName);
    public static Expression CreateExpression(Expression left, Expression value, ExpressionType type);
    public static Expression CreateExpressionLike(Type entityType, string propertyName, List`1<ColumnType> list);
    public static Expression`1<Func`2<T, object>> CreateNewFields(EntityInfo entity, List`1<string> propertyNames);
    public static Expression CreateExpressionSelectField(Type classType, string propertyName, Type propertyType);
    public static Expression CreateExpressionSelectFieldObject(Type classType, string propertyName);
}
internal class SqlSugar.ExpressionConst : object {
    public static string Const;
    public static string FormatSymbol;
    public static string RightParenthesis;
    public static string LeftParenthesis;
    public static string MethodConst;
    public static string SqlFuncFullName;
    public static string BinaryFormatString;
    public static string ExpressionReplace;
}
public class SqlSugar.ExpressionContext : ExpResolveAccessory {
    private bool _IsSingle;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDbMethods <_DbMehtods>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContextCase <Case>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionOutParameter <SugarContext>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <SubQueryIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <JoinIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAsAttr>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ParameterIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SingleTableNameSubqueryShortName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CurrentShortName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MappingColumnList <MappingColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MappingTableList <MappingTables>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IgnoreColumnList <IgnoreComumnList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <PgSqlIsAutoToLower>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <TableEnumIsString>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SqlFuncExternal> <SqlFuncServices>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <RootExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<JoinQueryInfo> <JoinQueryInfos>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ResolveExpressType <ResolveType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<Type> <InitMappingInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action <RefreshMapping>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <SubTableType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MethodName>k__BackingField;
    private IDbMethods _DbMehtods { get; private set; }
    public ExpressionContextCase Case { get; public set; }
    public ExpressionOutParameter SugarContext { get; public set; }
    public IDbMethods DbMehtods { get; public set; }
    public int SubQueryIndex { get; public set; }
    public int JoinIndex { get; public set; }
    public bool IsAsAttr { get; public set; }
    public int Index { get; public set; }
    public int ParameterIndex { get; public set; }
    public string SingleTableNameSubqueryShortName { get; public set; }
    public string CurrentShortName { get; public set; }
    public MappingColumnList MappingColumns { get; public set; }
    public MappingTableList MappingTables { get; public set; }
    public IgnoreColumnList IgnoreComumnList { get; public set; }
    public bool PgSqlIsAutoToLower { get; public set; }
    public Nullable`1<bool> TableEnumIsString { get; public set; }
    public List`1<SqlFuncExternal> SqlFuncServices { get; public set; }
    public Expression RootExpression { get; public set; }
    public bool IsSingle { get; public set; }
    public bool IsJoin { get; }
    public List`1<JoinQueryInfo> JoinQueryInfos { get; public set; }
    public ResolveExpressType ResolveType { get; public set; }
    public Expression Expression { get; public set; }
    public ExpressionResult Result { get; public set; }
    public List`1<SugarParameter> Parameters { get; public set; }
    public string SqlParameterKeyWord { get; }
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    public Action`1<Type> InitMappingInfo { get; public set; }
    public Action RefreshMapping { get; public set; }
    public Type SubTableType { get; public set; }
    public string MethodName { get; public set; }
    [CompilerGeneratedAttribute]
private IDbMethods get__DbMehtods();
    [CompilerGeneratedAttribute]
private void set__DbMehtods(IDbMethods value);
    [CompilerGeneratedAttribute]
public virtual ExpressionContextCase get_Case();
    [CompilerGeneratedAttribute]
public virtual void set_Case(ExpressionContextCase value);
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionOutParameter get_SugarContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SugarContext(ExpressionOutParameter value);
    public sealed virtual IDbMethods get_DbMehtods();
    public sealed virtual void set_DbMehtods(IDbMethods value);
    [CompilerGeneratedAttribute]
public int get_SubQueryIndex();
    [CompilerGeneratedAttribute]
public void set_SubQueryIndex(int value);
    [CompilerGeneratedAttribute]
public int get_JoinIndex();
    [CompilerGeneratedAttribute]
public void set_JoinIndex(int value);
    [CompilerGeneratedAttribute]
public bool get_IsAsAttr();
    [CompilerGeneratedAttribute]
public void set_IsAsAttr(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Index();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Index(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ParameterIndex();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ParameterIndex(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SingleTableNameSubqueryShortName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SingleTableNameSubqueryShortName(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentShortName();
    [CompilerGeneratedAttribute]
public void set_CurrentShortName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual MappingColumnList get_MappingColumns();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MappingColumns(MappingColumnList value);
    [CompilerGeneratedAttribute]
public sealed virtual MappingTableList get_MappingTables();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MappingTables(MappingTableList value);
    [CompilerGeneratedAttribute]
public sealed virtual IgnoreColumnList get_IgnoreComumnList();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IgnoreComumnList(IgnoreColumnList value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PgSqlIsAutoToLower();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PgSqlIsAutoToLower(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_TableEnumIsString();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TableEnumIsString(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<SqlFuncExternal> get_SqlFuncServices();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SqlFuncServices(List`1<SqlFuncExternal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_RootExpression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RootExpression(Expression value);
    public sealed virtual bool get_IsSingle();
    public sealed virtual void set_IsSingle(bool value);
    public bool get_IsJoin();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<JoinQueryInfo> get_JoinQueryInfos();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JoinQueryInfos(List`1<JoinQueryInfo> value);
    [CompilerGeneratedAttribute]
public ResolveExpressType get_ResolveType();
    [CompilerGeneratedAttribute]
public void set_ResolveType(ResolveExpressType value);
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual ExpressionResult get_Result();
    public sealed virtual void set_Result(ExpressionResult value);
    public sealed virtual List`1<SugarParameter> get_Parameters();
    public sealed virtual void set_Parameters(List`1<SugarParameter> value);
    public virtual string get_SqlParameterKeyWord();
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
    [CompilerGeneratedAttribute]
public virtual Action`1<Type> get_InitMappingInfo();
    [CompilerGeneratedAttribute]
public virtual void set_InitMappingInfo(Action`1<Type> value);
    [CompilerGeneratedAttribute]
public virtual Action get_RefreshMapping();
    [CompilerGeneratedAttribute]
public virtual void set_RefreshMapping(Action value);
    [CompilerGeneratedAttribute]
public virtual Type get_SubTableType();
    [CompilerGeneratedAttribute]
public virtual void set_SubTableType(Type value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    public sealed virtual void Resolve(Expression expression, ResolveExpressType resolveType);
    public sealed virtual void Clear();
    public ExpressionContext GetCopyContext();
    public ExpressionContext GetCopyContextWithMapping();
    public virtual string GetLimit();
    public virtual string GetTranslationTableName(string entityName, bool isMapping);
    public virtual string GetTranslationColumnName(string columnName);
    public virtual string GetDbColumnName(string entityName, string propertyName);
    public virtual bool IsTranslationText(string name);
    public virtual string GetTranslationText(string name);
    public virtual string GetAsString(string asName, string fieldValue);
    public virtual string GetAsString2(string asName, string fieldValue);
    public virtual string GetEqString(string eqName, string fieldValue);
    public virtual string GetAsString(string asName, string fieldValue, string fieldShortName);
    [CompilerGeneratedAttribute]
private string <GetTranslationColumnName>b__123_0(string it);
}
public class SqlSugar.ExpressionContextCase : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDateString>k__BackingField;
    public bool IsDateString { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsDateString();
    [CompilerGeneratedAttribute]
public void set_IsDateString(bool value);
}
internal class SqlSugar.ExpressionItems : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <ParentEntityInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <ThisEntityInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    public int Type { get; public set; }
    public EntityInfo ParentEntityInfo { get; public set; }
    public EntityInfo ThisEntityInfo { get; public set; }
    public Expression Expression { get; public set; }
    public Navigate Nav { get; }
    [CompilerGeneratedAttribute]
public int get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(int value);
    [CompilerGeneratedAttribute]
public EntityInfo get_ParentEntityInfo();
    [CompilerGeneratedAttribute]
public void set_ParentEntityInfo(EntityInfo value);
    [CompilerGeneratedAttribute]
public EntityInfo get_ThisEntityInfo();
    [CompilerGeneratedAttribute]
public void set_ThisEntityInfo(EntityInfo value);
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(Expression value);
    public Navigate get_Nav();
}
public class SqlSugar.ExpressionOutParameter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private QueryBuilder <QueryBuilder>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public QueryBuilder QueryBuilder { get; public set; }
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public QueryBuilder get_QueryBuilder();
    [CompilerGeneratedAttribute]
public void set_QueryBuilder(QueryBuilder value);
}
public class SqlSugar.ExpressionParameter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionParameter <BaseParameter>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <BaseExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <ChildExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <LeftExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <RightExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <CurrentExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <OperatorValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <IsLeft>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ValueIsNull>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <CommonTempData>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionResultAppendType <AppendType>k__BackingField;
    public ExpressionContext Context { get; public set; }
    public ExpressionParameter BaseParameter { get; public set; }
    public Expression BaseExpression { get; public set; }
    public Expression ChildExpression { get; public set; }
    public Expression LeftExpression { get; public set; }
    public Expression RightExpression { get; public set; }
    public Expression CurrentExpression { get; public set; }
    public string OperatorValue { get; public set; }
    public Nullable`1<bool> IsLeft { get; public set; }
    public int Index { get; public set; }
    public bool ValueIsNull { get; public set; }
    public object CommonTempData { get; public set; }
    public ExpressionResultAppendType AppendType { get; public set; }
    public Expression OppsiteExpression { get; }
    public bool IsSetTempData { get; }
    [CompilerGeneratedAttribute]
public ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(ExpressionContext value);
    [CompilerGeneratedAttribute]
public ExpressionParameter get_BaseParameter();
    [CompilerGeneratedAttribute]
public void set_BaseParameter(ExpressionParameter value);
    [CompilerGeneratedAttribute]
public Expression get_BaseExpression();
    [CompilerGeneratedAttribute]
public void set_BaseExpression(Expression value);
    [CompilerGeneratedAttribute]
public Expression get_ChildExpression();
    [CompilerGeneratedAttribute]
public void set_ChildExpression(Expression value);
    [CompilerGeneratedAttribute]
public Expression get_LeftExpression();
    [CompilerGeneratedAttribute]
public void set_LeftExpression(Expression value);
    [CompilerGeneratedAttribute]
public Expression get_RightExpression();
    [CompilerGeneratedAttribute]
public void set_RightExpression(Expression value);
    [CompilerGeneratedAttribute]
public Expression get_CurrentExpression();
    [CompilerGeneratedAttribute]
public void set_CurrentExpression(Expression value);
    [CompilerGeneratedAttribute]
public string get_OperatorValue();
    [CompilerGeneratedAttribute]
public void set_OperatorValue(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsLeft();
    [CompilerGeneratedAttribute]
public void set_IsLeft(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public bool get_ValueIsNull();
    [CompilerGeneratedAttribute]
public void set_ValueIsNull(bool value);
    [CompilerGeneratedAttribute]
public object get_CommonTempData();
    [CompilerGeneratedAttribute]
public void set_CommonTempData(object value);
    [CompilerGeneratedAttribute]
public ExpressionResultAppendType get_AppendType();
    [CompilerGeneratedAttribute]
public void set_AppendType(ExpressionResultAppendType value);
    public void IsAppendResult();
    public void IsAppendTempDate();
    public Expression get_OppsiteExpression();
    public bool get_IsSetTempData();
}
public class SqlSugar.ExpressionResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsLockCurrentParameter>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsUpper>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNavicate>k__BackingField;
    private ExpressionParameter _CurrentParameter;
    private ResolveExpressType _ResolveExpressType;
    private StringBuilder _Result;
    public bool IsLockCurrentParameter { get; public set; }
    public bool IsUpper { get; public set; }
    public bool IsNavicate { get; public set; }
    public ExpressionParameter CurrentParameter { get; public set; }
    private StringBuilder Result { get; private set; }
    public bool LastCharIsSpace { get; }
    public ExpressionResult(ResolveExpressType resolveExpressType);
    [CompilerGeneratedAttribute]
public bool get_IsLockCurrentParameter();
    [CompilerGeneratedAttribute]
public void set_IsLockCurrentParameter(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsUpper();
    [CompilerGeneratedAttribute]
public void set_IsUpper(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNavicate();
    [CompilerGeneratedAttribute]
public void set_IsNavicate(bool value);
    public ExpressionParameter get_CurrentParameter();
    public void set_CurrentParameter(ExpressionParameter value);
    private StringBuilder get_Result();
    private void set_Result(StringBuilder value);
    public bool get_LastCharIsSpace();
    public string GetString();
    public String[] GetResultArray();
    public string GetResultString();
    public void TrimEnd();
    public bool Contains(string value);
    internal void Insert(int index, string value);
    public void Append(object parameter);
    public void AppendFormat(string parameter, Object[] orgs);
    public void Replace(string parameter, string newValue);
}
public enum SqlSugar.ExpressionResultAppendType : Enum {
    public int value__;
    public static ExpressionResultAppendType AppendResult;
    public static ExpressionResultAppendType AppendTempDate;
}
public class SqlSugar.ExpressionTool : object {
    internal static string ResolveMemberValue(ExpressionContext context, Expression item, string value);
    internal static Expression GetConditionalExpression(Expression item);
    internal static bool IsOwnsOne(ExpressionContext context, Expression member);
    internal static EntityColumnInfo GetOwnsOneColumnInfo(ExpressionContext context, Expression member);
    internal static bool IsNavMember(ExpressionContext context, Expression member);
    internal static bool IsNavMember(ISqlSugarClient context, Expression member);
    internal static bool IsSqlParameterDbType(ExpressionContext context, Expression member);
    internal static SugarParameter GetParameterBySqlParameterDbType(int index, object value, ExpressionContext context, Expression member);
    public static List`1<string> ExtractMemberNames(Expression expression);
    public static Expression`1<Func`2<T, bool>> ChangeLambdaExpression(Expression`1<Func`2<T, bool>> exp, string replaceParameterName, string newParameterName);
    public static Expression ChangeLambdaExpression(Expression exp, Type targetType, string replaceParameterName, string newParameterName);
    public static List`1<string> GetNewArrayMembers(NewArrayExpression newArrayExpression);
    public static List`1<string> GetTopLevelMethodCalls(Expression expression);
    public static void GetTopLevelMethodCalls(Expression expression, List`1<string> methodCalls);
    public static Dictionary`2<string, Expression> GetNewExpressionItemList(Expression lamExp);
    public static Dictionary`2<string, Expression> GetMemberBindingItemList(ReadOnlyCollection`1<MemberBinding> exp);
    public static bool ContainsMethodName(BinaryExpression expression, string name);
    public static bool IsVariable(Expression expr);
    public static List`1<ParameterExpression> GetParameters(Expression expr);
    public static bool IsComparisonOperatorBool(BinaryExpression binaryExp);
    public static string GetOperator(ExpressionType expressiontype);
    public static void GetOneToOneInfo(SqlSugarProvider context, Expression`1<Func`2<T, object>> LeftObject, MemberExpression& memberExpression, String& navObjectName, EntityColumnInfo& navColumn, EntityInfo& navEntityInfo, EntityColumnInfo& navPkColumn);
    public static List`1<ParameterExpression> ExpressionParameters(Expression expression);
    public static object GetValue(object value, ExpressionContext context);
    public static Expression GetLambdaExpressionBody(Expression expression);
    public static string GetFirstTypeNameFromExpression(Expression expression);
    public static string GetMethodName(Expression expression);
    public static Type GetMemberInfoType(MemberInfo member);
    public static bool IsLogicOperator(string operatorValue);
    public static bool IsLogicOperator(Expression expression);
    public static bool IsComparisonOperator(Expression expression);
    public static bool IsEqualOrLtOrGt(Expression expression);
    public static object GetMemberValue(MemberInfo member, Expression expression);
    internal static Expression RemoveConvert(Expression item);
    internal static Expression RemoveConvertThanOne(Expression item);
    public static string GetMemberName(Expression expression);
    internal static object GetExpressionValue(Expression expression);
    public static object GetFiledValue(MemberExpression memberExpr);
    public static bool IsConstExpression(MemberExpression memberExpr);
    public static object GetPropertyValue(MemberExpression memberExpr);
    public static object DynamicInvoke(Expression expression, MemberExpression memberExpression);
    public static Type GetPropertyOrFieldType(MemberInfo propertyOrField);
    public static bool IsEntity(Type type);
    public static bool IsValueType(Type type);
    public static bool IsUnConvertExpress(Expression item);
    internal static List`1<NewExpressionInfo> GetNewexpressionInfos(Expression item, ExpressionContext context, BaseResolve baseResolve);
    internal static List`1<NewExpressionInfo> GetNewDynamicexpressionInfos(Expression item, ExpressionContext context, BaseResolve baseResolve);
    internal static bool IsSubQuery(Expression it);
    internal static bool IsIsNullSubQuery(Expression it);
    internal static bool IsMemberInit(object selectValue);
    internal static MemberInitExpression GetMemberInit(object selectValue);
    public static bool IsNegate(Expression exp);
    public static bool GetIsLength(Expression item);
}
internal class SqlSugar.ExpressionTreeVisitor : ExpressionVisitor {
    private List`1<Expression> _nodes;
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    public List`1<Expression> GetExpressions(Expression expression);
}
[ExtensionAttribute]
public static class SqlSugar.Extensions.UtilExtensions : object {
    [ExtensionAttribute]
public static int ObjToInt(object thisValue);
    [ExtensionAttribute]
public static int ObjToInt(object thisValue, int errorValue);
    [ExtensionAttribute]
public static double ObjToMoney(object thisValue);
    [ExtensionAttribute]
public static double ObjToMoney(object thisValue, double errorValue);
    [ExtensionAttribute]
public static string ObjToString(object thisValue);
    [ExtensionAttribute]
public static string ObjToString(object thisValue, string errorValue);
    [ExtensionAttribute]
public static decimal ObjToDecimal(object thisValue);
    [ExtensionAttribute]
public static decimal ObjToDecimal(object thisValue, decimal errorValue);
    [ExtensionAttribute]
public static DateTime ObjToDate(object thisValue);
    [ExtensionAttribute]
public static DateTime ObjToDate(object thisValue, DateTime errorValue);
    [ExtensionAttribute]
public static bool ObjToBool(object thisValue);
}
public class SqlSugar.FastBuilder : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <FastEntityInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsActionUpdateColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbFastestProperties <DbFastestProperties>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CharacterSet>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UpdateSql>k__BackingField;
    public EntityInfo FastEntityInfo { get; public set; }
    public bool IsActionUpdateColumns { get; public set; }
    public DbFastestProperties DbFastestProperties { get; public set; }
    public SqlSugarProvider Context { get; public set; }
    public string CharacterSet { get; public set; }
    public string UpdateSql { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual EntityInfo get_FastEntityInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FastEntityInfo(EntityInfo value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsActionUpdateColumns();
    [CompilerGeneratedAttribute]
public virtual void set_IsActionUpdateColumns(bool value);
    [CompilerGeneratedAttribute]
public virtual DbFastestProperties get_DbFastestProperties();
    [CompilerGeneratedAttribute]
public virtual void set_DbFastestProperties(DbFastestProperties value);
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public virtual string get_CharacterSet();
    [CompilerGeneratedAttribute]
public virtual void set_CharacterSet(string value);
    [CompilerGeneratedAttribute]
public virtual string get_UpdateSql();
    [CompilerGeneratedAttribute]
public virtual void set_UpdateSql(string value);
    public virtual void CloseDb();
    [AsyncStateMachineAttribute("SqlSugar.FastBuilder/<UpdateByTempAsync>d__25")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> UpdateByTempAsync(string tableName, string tempName, String[] updateColumns, String[] whereColumns);
    [AsyncStateMachineAttribute("SqlSugar.FastBuilder/<CreateTempAsync>d__26`1")]
[DebuggerStepThroughAttribute]
public virtual Task CreateTempAsync(DataTable dt);
    [AsyncStateMachineAttribute("SqlSugar.FastBuilder/<Merge>d__27`1")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> Merge(string tableName, DataTable dt, EntityInfo entityInfo, String[] whereColumns, String[] updateColumns, List`1<T> datas);
}
internal static class SqlSugar.FastCopy : object {
    private static ConcurrentDictionary`2<string, object> copiers;
    private static FastCopy();
    public static void Copy(S source, T target, bool copyNull);
    private static Action`2<S, T> CreateCopier(bool copyNull);
    internal static List`1<string> GetDiff(T item, T trackingData);
}
public class SqlSugar.FastestProvider`1 : object {
    internal SqlSugarProvider context;
    private ISugarQueryable`1<T> queryable;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <entityInfo>k__BackingField;
    public bool isLog;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AsName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CacheKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CacheKeyLike>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CharacterSet>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDataAop>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsOffIdentity>k__BackingField;
    private EntityInfo entityInfo { get; private set; }
    private string AsName { get; private set; }
    private int Size { get; private set; }
    private string CacheKey { get; private set; }
    private string CacheKeyLike { get; private set; }
    private string CharacterSet { get; private set; }
    private bool IsDataAop { get; private set; }
    private bool IsOffIdentity { get; private set; }
    public FastestProvider`1(SqlSugarProvider sqlSugarProvider);
    [CompilerGeneratedAttribute]
private EntityInfo get_entityInfo();
    [CompilerGeneratedAttribute]
private void set_entityInfo(EntityInfo value);
    public sealed virtual int BulkCopy(string tableName, DataTable dt);
    public sealed virtual int BulkCopy(DataTable dt);
    public sealed virtual Task`1<int> BulkCopyAsync(DataTable dt);
    [AsyncStateMachineAttribute("SqlSugar.FastestProvider`1/<BulkCopyAsync>d__11")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> BulkCopyAsync(string tableName, DataTable dt);
    public sealed virtual int BulkCopy(List`1<T> datas);
    [AsyncStateMachineAttribute("SqlSugar.FastestProvider`1/<BulkCopyAsync>d__13")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> BulkCopyAsync(List`1<T> datas);
    public sealed virtual int BulkUpdate(List`1<T> datas);
    [AsyncStateMachineAttribute("SqlSugar.FastestProvider`1/<BulkUpdateAsync>d__15")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> BulkUpdateAsync(List`1<T> datas);
    public sealed virtual int BulkUpdate(List`1<T> datas, String[] whereColumns, String[] updateColumns);
    public sealed virtual int BulkUpdate(List`1<T> datas, String[] whereColumns);
    [AsyncStateMachineAttribute("SqlSugar.FastestProvider`1/<BulkUpdateAsync>d__18")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> BulkUpdateAsync(List`1<T> datas, String[] whereColumns);
    [AsyncStateMachineAttribute("SqlSugar.FastestProvider`1/<BulkUpdateAsync>d__19")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> BulkUpdateAsync(List`1<T> datas, String[] whereColumns, String[] updateColumns);
    public sealed virtual int BulkUpdate(string tableName, DataTable dataTable, String[] whereColumns, String[] updateColumns);
    public sealed virtual int BulkUpdate(DataTable dataTable, String[] whereColumns, String[] updateColumns);
    public sealed virtual int BulkUpdate(DataTable dataTable, String[] whereColumns);
    public sealed virtual Task`1<int> BulkUpdateAsync(DataTable dataTable, String[] whereColumns);
    [AsyncStateMachineAttribute("SqlSugar.FastestProvider`1/<BulkUpdateAsync>d__24")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> BulkUpdateAsync(string tableName, DataTable dataTable, String[] whereColumns, String[] updateColumns);
    public sealed virtual Task`1<int> BulkMergeAsync(List`1<T> datas);
    public sealed virtual int BulkMerge(List`1<T> datas);
    public sealed virtual int BulkMerge(DataTable dataTable, String[] whereColumns, bool isIdentity);
    public sealed virtual Task`1<int> BulkMergeAsync(DataTable dataTable, String[] whereColumns, bool isIdentity);
    public sealed virtual Task`1<int> BulkMergeAsync(List`1<T> datas, String[] whereColumns);
    public sealed virtual int BulkMerge(List`1<T> datas, String[] whereColumns);
    [AsyncStateMachineAttribute("SqlSugar.FastestProvider`1/<BulkMergeAsync>d__31")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> BulkMergeAsync(List`1<T> datas, String[] whereColumns, String[] updateColumns);
    public sealed virtual int BulkMerge(List`1<T> datas, String[] whereColumns, String[] updateColumns);
    [AsyncStateMachineAttribute("SqlSugar.FastestProvider`1/<_BulkMerge>d__33")]
[DebuggerStepThroughAttribute]
private Task`1<int> _BulkMerge(List`1<T> datas, String[] updateColumns, String[] whereColumns);
    private void _BulkMerge(DataTable dataTable, String[] whereColumns, Object& newValue, Object& fastestMethod, MethodInfo& bulkCopyMethod, bool isAsync, bool isIdentity);
    [AsyncStateMachineAttribute("SqlSugar.FastestProvider`1/<_BulkUpdate>d__35")]
[DebuggerStepThroughAttribute]
private Task`1<int> _BulkUpdate(List`1<T> datas, String[] whereColumns, String[] updateColumns);
    private void ActionIgnoreColums(String[] whereColumns, String[] updateColumns, DataTable dt, bool IsActionUpdateColumns);
    [AsyncStateMachineAttribute("SqlSugar.FastestProvider`1/<_BulkUpdate>d__37")]
[DebuggerStepThroughAttribute]
private Task`1<int> _BulkUpdate(string tableName, DataTable dataTable, String[] whereColumns, String[] updateColumns);
    [AsyncStateMachineAttribute("SqlSugar.FastestProvider`1/<_BulkCopy>d__38")]
[DebuggerStepThroughAttribute]
private Task`1<int> _BulkCopy(List`1<T> datas);
    [AsyncStateMachineAttribute("SqlSugar.FastestProvider`1/<_BulkCopy>d__39")]
[DebuggerStepThroughAttribute]
private Task`1<int> _BulkCopy(string tableName, DataTable dataTable);
    private void End(List`1<Type> datas, bool isAdd, bool isMerge);
    private void Begin(List`1<Type> datas, bool isAdd, bool isMerge);
    private void DataAop(Type item, DataFilterType type, EntityInfo entity);
    private IFastBuilder GetBuider();
    private DataTable ToDdateTable(List`1<T> datas);
    private static object GetValue(T item, EntityColumnInfo column);
    private string GetTableName();
    private object ValueConverter(EntityColumnInfo columnInfo, object value);
    private DataTable GetCopyWriteDataTable(DataTable dt);
    private DataTable GetCopyWriteDataTableUpdate(DataTable dt);
    private void RemoveCache();
    [CompilerGeneratedAttribute]
private string get_AsName();
    [CompilerGeneratedAttribute]
private void set_AsName(string value);
    [CompilerGeneratedAttribute]
private int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    [CompilerGeneratedAttribute]
private string get_CacheKey();
    [CompilerGeneratedAttribute]
private void set_CacheKey(string value);
    [CompilerGeneratedAttribute]
private string get_CacheKeyLike();
    [CompilerGeneratedAttribute]
private void set_CacheKeyLike(string value);
    [CompilerGeneratedAttribute]
private string get_CharacterSet();
    [CompilerGeneratedAttribute]
private void set_CharacterSet(string value);
    [CompilerGeneratedAttribute]
private bool get_IsDataAop();
    [CompilerGeneratedAttribute]
private void set_IsDataAop(bool value);
    [CompilerGeneratedAttribute]
private bool get_IsOffIdentity();
    [CompilerGeneratedAttribute]
private void set_IsOffIdentity(bool value);
    public sealed virtual IFastest`1<T> SetCharacterSet(string CharacterSet);
    public sealed virtual IFastest`1<T> EnableDataAop();
    public sealed virtual IFastest`1<T> RemoveDataCache();
    public sealed virtual IFastest`1<T> RemoveDataCache(string cacheKey);
    public sealed virtual IFastest`1<T> AS(string tableName);
    public sealed virtual IFastest`1<T> PageSize(int size);
    public sealed virtual IFastest`1<T> OffIdentity();
    public sealed virtual SplitFastest`1<T> SplitTable();
    [CompilerGeneratedAttribute]
private string <BulkUpdate>b__16_0(string x);
    [CompilerGeneratedAttribute]
private string <BulkUpdate>b__16_1(string x);
    [CompilerGeneratedAttribute]
private DataTable <ToDdateTable>b__44_0();
}
internal class SqlSugar.FileHelper : object {
    public static void CreateFile(string filePath, string text, Encoding encoding);
    public static bool IsExistDirectory(string directoryPath);
    public static void CreateDirectory(string directoryPath);
    public static void DeleteFile(string filePath);
    public static string GetDirectoryFromFilePath(string filePath);
    public static bool IsExistFile(string filePath);
}
public class SqlSugar.GridSaveProvider`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<T> <OldList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<T> <SaveList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsIncluesFirstAll>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <IgnoreColumnsSaveInclues>k__BackingField;
    internal SqlSugarProvider Context { get; internal set; }
    internal List`1<T> OldList { get; internal set; }
    internal List`1<T> SaveList { get; internal set; }
    internal bool IsIncluesFirstAll { get; internal set; }
    internal String[] IgnoreColumnsSaveInclues { get; internal set; }
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal List`1<T> get_OldList();
    [CompilerGeneratedAttribute]
internal void set_OldList(List`1<T> value);
    [CompilerGeneratedAttribute]
internal List`1<T> get_SaveList();
    [CompilerGeneratedAttribute]
internal void set_SaveList(List`1<T> value);
    [CompilerGeneratedAttribute]
internal bool get_IsIncluesFirstAll();
    [CompilerGeneratedAttribute]
internal void set_IsIncluesFirstAll(bool value);
    [CompilerGeneratedAttribute]
internal String[] get_IgnoreColumnsSaveInclues();
    [CompilerGeneratedAttribute]
internal void set_IgnoreColumnsSaveInclues(String[] value);
    public bool ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.GridSaveProvider`1/<ExecuteCommandAsync>d__21")]
[DebuggerStepThroughAttribute]
public Task`1<bool> ExecuteCommandAsync();
    public List`1<T> GetDeleteList();
    public GridSaveProvider`1<T> IncludesAllFirstLayer(String[] ignoreColumns);
    private bool IsIncludesSave();
    private string CreateCompositeKey(String[] propertyNames, object obj);
    private object GetPropertyValue(object obj, string propertyName);
    [CompilerGeneratedAttribute]
private void <ExecuteCommand>b__20_0(List`1<T> pageList);
    [AsyncStateMachineAttribute("SqlSugar.GridSaveProvider`1/<<ExecuteCommandAsync>b__21_0>d")]
[DebuggerStepThroughAttribute]
[CompilerGeneratedAttribute]
private Task <ExecuteCommandAsync>b__21_0(List`1<T> pageList);
}
public class SqlSugar.GroupByModel : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <FieldName>k__BackingField;
    public object FieldName { get; public set; }
    [CompilerGeneratedAttribute]
public object get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(object value);
    public static List`1<GroupByModel> Create(GroupByModel[] groupModels);
}
public interface SqlSugar.IAdo {
    public string SqlParameterKeyWord { get; }
    public IDbConnection Connection { get; public set; }
    public IDbTransaction Transaction { get; public set; }
    public SqlSugarProvider Context { get; public set; }
    public bool IsEnableLogEvent { get; public set; }
    public StackTraceInfo SqlStackTrace { get; }
    public IDataParameterCollection DataReaderParameters { get; public set; }
    public CommandType CommandType { get; public set; }
    public Nullable`1<CancellationToken> CancellationToken { get; public set; }
    public bool IsDisableMasterSlaveSeparation { get; public set; }
    public bool IsClearParameters { get; public set; }
    public int CommandTimeOut { get; public set; }
    public TimeSpan SqlExecutionTime { get; }
    public int SqlExecuteCount { get; }
    public IDbBind DbBind { get; }
    public abstract virtual string get_SqlParameterKeyWord();
    public abstract virtual IDbConnection get_Connection();
    public abstract virtual void set_Connection(IDbConnection value);
    public abstract virtual IDbTransaction get_Transaction();
    public abstract virtual void set_Transaction(IDbTransaction value);
    public abstract virtual IDataParameter[] ToIDbDataParameter(SugarParameter[] pars);
    public abstract virtual SugarParameter[] GetParameters(object obj, PropertyInfo[] propertyInfo);
    public abstract virtual SqlSugarProvider get_Context();
    public abstract virtual void set_Context(SqlSugarProvider value);
    public abstract virtual void ExecuteBefore(string sql, SugarParameter[] pars);
    public abstract virtual void ExecuteAfter(string sql, SugarParameter[] pars);
    public abstract virtual bool IsAnyTran();
    public abstract virtual bool IsNoTran();
    public abstract virtual bool get_IsEnableLogEvent();
    public abstract virtual void set_IsEnableLogEvent(bool value);
    public abstract virtual StackTraceInfo get_SqlStackTrace();
    public abstract virtual IDataParameterCollection get_DataReaderParameters();
    public abstract virtual void set_DataReaderParameters(IDataParameterCollection value);
    public abstract virtual CommandType get_CommandType();
    public abstract virtual void set_CommandType(CommandType value);
    public abstract virtual Nullable`1<CancellationToken> get_CancellationToken();
    public abstract virtual void set_CancellationToken(Nullable`1<CancellationToken> value);
    public abstract virtual bool get_IsDisableMasterSlaveSeparation();
    public abstract virtual void set_IsDisableMasterSlaveSeparation(bool value);
    public abstract virtual bool get_IsClearParameters();
    public abstract virtual void set_IsClearParameters(bool value);
    public abstract virtual int get_CommandTimeOut();
    public abstract virtual void set_CommandTimeOut(int value);
    public abstract virtual TimeSpan get_SqlExecutionTime();
    public abstract virtual int get_SqlExecuteCount();
    public abstract virtual IDbBind get_DbBind();
    public abstract virtual void SetCommandToAdapter(IDataAdapter adapter, DbCommand command);
    public abstract virtual IDataAdapter GetAdapter();
    public abstract virtual DbCommand GetCommand(string sql, SugarParameter[] parameters);
    public abstract virtual DataTable GetDataTable(string sql, object parameters);
    public abstract virtual DataTable GetDataTable(string sql, SugarParameter[] parameters);
    public abstract virtual DataTable GetDataTable(string sql, List`1<SugarParameter> parameters);
    public abstract virtual Task`1<DataTable> GetDataTableAsync(string sql, object parameters);
    public abstract virtual Task`1<DataTable> GetDataTableAsync(string sql, SugarParameter[] parameters);
    public abstract virtual Task`1<DataTable> GetDataTableAsync(string sql, List`1<SugarParameter> parameters);
    public abstract virtual DataSet GetDataSetAll(string sql, object parameters);
    public abstract virtual DataSet GetDataSetAll(string sql, SugarParameter[] parameters);
    public abstract virtual DataSet GetDataSetAll(string sql, List`1<SugarParameter> parameters);
    public abstract virtual Task`1<DataSet> GetDataSetAllAsync(string sql, object parameters);
    public abstract virtual Task`1<DataSet> GetDataSetAllAsync(string sql, SugarParameter[] parameters);
    public abstract virtual Task`1<DataSet> GetDataSetAllAsync(string sql, List`1<SugarParameter> parameters);
    public abstract virtual IDataReader GetDataReader(string sql, object parameters);
    public abstract virtual IDataReader GetDataReader(string sql, SugarParameter[] parameters);
    public abstract virtual IDataReader GetDataReader(string sql, List`1<SugarParameter> parameters);
    public abstract virtual Task`1<IDataReader> GetDataReaderAsync(string sql, object parameters);
    public abstract virtual Task`1<IDataReader> GetDataReaderAsync(string sql, SugarParameter[] parameters);
    public abstract virtual Task`1<IDataReader> GetDataReaderAsync(string sql, List`1<SugarParameter> parameters);
    public abstract virtual object GetScalar(string sql, object parameters);
    public abstract virtual object GetScalar(string sql, SugarParameter[] parameters);
    public abstract virtual object GetScalar(string sql, List`1<SugarParameter> parameters);
    public abstract virtual Task`1<object> GetScalarAsync(string sql, object parameters);
    public abstract virtual Task`1<object> GetScalarAsync(string sql, SugarParameter[] parameters);
    public abstract virtual Task`1<object> GetScalarAsync(string sql, List`1<SugarParameter> parameters);
    public abstract virtual int ExecuteCommandWithGo(string sql, SugarParameter[] parameters);
    public abstract virtual int ExecuteCommand(string sql, object parameters);
    public abstract virtual int ExecuteCommand(string sql, SugarParameter[] parameters);
    public abstract virtual int ExecuteCommand(string sql, List`1<SugarParameter> parameters);
    public abstract virtual Task`1<int> ExecuteCommandAsync(string sql, SugarParameter[] parameters);
    public abstract virtual Task`1<int> ExecuteCommandAsync(string sql, object parameters);
    public abstract virtual Task`1<int> ExecuteCommandAsync(string sql, object parameters, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> ExecuteCommandAsync(string sql, List`1<SugarParameter> parameters);
    public abstract virtual string GetString(string sql, object parameters);
    public abstract virtual string GetString(string sql, SugarParameter[] parameters);
    public abstract virtual string GetString(string sql, List`1<SugarParameter> parameters);
    public abstract virtual Task`1<string> GetStringAsync(string sql, object parameters);
    public abstract virtual Task`1<string> GetStringAsync(string sql, SugarParameter[] parameters);
    public abstract virtual Task`1<string> GetStringAsync(string sql, List`1<SugarParameter> parameters);
    public abstract virtual int GetInt(string sql, object pars);
    public abstract virtual int GetInt(string sql, SugarParameter[] parameters);
    public abstract virtual int GetInt(string sql, List`1<SugarParameter> parameters);
    public abstract virtual Task`1<int> GetIntAsync(string sql, object pars);
    public abstract virtual Task`1<int> GetIntAsync(string sql, SugarParameter[] parameters);
    public abstract virtual Task`1<int> GetIntAsync(string sql, List`1<SugarParameter> parameters);
    public abstract virtual long GetLong(string sql, object pars);
    public abstract virtual Task`1<long> GetLongAsync(string sql, object pars);
    public abstract virtual double GetDouble(string sql, object parameters);
    public abstract virtual double GetDouble(string sql, SugarParameter[] parameters);
    public abstract virtual double GetDouble(string sql, List`1<SugarParameter> parameters);
    public abstract virtual Task`1<double> GetDoubleAsync(string sql, object parameters);
    public abstract virtual Task`1<double> GetDoubleAsync(string sql, SugarParameter[] parameters);
    public abstract virtual Task`1<double> GetDoubleAsync(string sql, List`1<SugarParameter> parameters);
    public abstract virtual decimal GetDecimal(string sql, object parameters);
    public abstract virtual decimal GetDecimal(string sql, SugarParameter[] parameters);
    public abstract virtual decimal GetDecimal(string sql, List`1<SugarParameter> parameters);
    public abstract virtual Task`1<decimal> GetDecimalAsync(string sql, object parameters);
    public abstract virtual Task`1<decimal> GetDecimalAsync(string sql, SugarParameter[] parameters);
    public abstract virtual Task`1<decimal> GetDecimalAsync(string sql, List`1<SugarParameter> parameters);
    public abstract virtual DateTime GetDateTime(string sql, object parameters);
    public abstract virtual DateTime GetDateTime(string sql, SugarParameter[] parameters);
    public abstract virtual DateTime GetDateTime(string sql, List`1<SugarParameter> parameters);
    public abstract virtual Task`1<DateTime> GetDateTimeAsync(string sql, object parameters);
    public abstract virtual Task`1<DateTime> GetDateTimeAsync(string sql, SugarParameter[] parameters);
    public abstract virtual Task`1<DateTime> GetDateTimeAsync(string sql, List`1<SugarParameter> parameters);
    public abstract virtual Tuple`2<List`1<T>, List`1<T2>> SqlQuery(string sql, object parameters);
    public abstract virtual Tuple`3<List`1<T>, List`1<T2>, List`1<T3>> SqlQuery(string sql, object parameters);
    public abstract virtual Tuple`4<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>> SqlQuery(string sql, object parameters);
    public abstract virtual Tuple`5<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> SqlQuery(string sql, object parameters);
    public abstract virtual Tuple`6<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>> SqlQuery(string sql, object parameters);
    public abstract virtual Tuple`7<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>, List`1<T7>> SqlQuery(string sql, object parameters);
    public abstract virtual Task`1<Tuple`2<List`1<T>, List`1<T2>>> SqlQueryAsync(string sql, object parameters);
    public abstract virtual Task`1<Tuple`3<List`1<T>, List`1<T2>, List`1<T3>>> SqlQueryAsync(string sql, object parameters);
    public abstract virtual Task`1<Tuple`4<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>>> SqlQueryAsync(string sql, object parameters);
    public abstract virtual Task`1<Tuple`5<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> SqlQueryAsync(string sql, object parameters);
    public abstract virtual Task`1<Tuple`6<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>>> SqlQueryAsync(string sql, object parameters);
    public abstract virtual Task`1<Tuple`7<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>, List`1<T7>>> SqlQueryAsync(string sql, object parameters);
    public abstract virtual List`1<T> SqlQuery(string sql, object parameters);
    public abstract virtual List`1<T> SqlQuery(string sql, SugarParameter[] parameters);
    public abstract virtual List`1<T> SqlQuery(string sql, List`1<SugarParameter> parameters);
    public abstract virtual Task`1<List`1<T>> MasterSqlQueryAasync(string sql, object parameters);
    public abstract virtual List`1<T> MasterSqlQuery(string sql, object parameters);
    public abstract virtual Task`1<List`1<T>> SqlQueryAsync(string sql, object parameters);
    public abstract virtual Task`1<List`1<T>> SqlQueryAsync(string sql, object parameters, CancellationToken token);
    public abstract virtual Task`1<List`1<T>> SqlQueryAsync(string sql, List`1<SugarParameter> parameters);
    public abstract virtual Task`1<List`1<T>> SqlQueryAsync(string sql, SugarParameter[] parameters);
    public abstract virtual T SqlQuerySingle(string sql, object whereObj);
    public abstract virtual T SqlQuerySingle(string sql, SugarParameter[] parameters);
    public abstract virtual T SqlQuerySingle(string sql, List`1<SugarParameter> parameters);
    public abstract virtual Task`1<T> SqlQuerySingleAsync(string sql, object whereObj);
    public abstract virtual Task`1<T> SqlQuerySingleAsync(string sql, SugarParameter[] parameters);
    public abstract virtual Task`1<T> SqlQuerySingleAsync(string sql, List`1<SugarParameter> parameters);
    public abstract virtual void RemoveCancellationToken();
    public abstract virtual void Dispose();
    public abstract virtual void Close();
    public abstract virtual void Open();
    public abstract virtual SugarConnection OpenAlways();
    public abstract virtual bool IsValidConnection();
    public abstract virtual bool IsValidConnectionNoClose();
    public abstract virtual void CheckConnection();
    public abstract virtual void BeginTran();
    public abstract virtual Task BeginTranAsync();
    public abstract virtual Task BeginTranAsync(IsolationLevel iso);
    public abstract virtual void BeginTran(IsolationLevel iso);
    public abstract virtual void BeginTran(string transactionName);
    public abstract virtual void BeginTran(IsolationLevel iso, string transactionName);
    public abstract virtual void RollbackTran();
    public abstract virtual Task RollbackTranAsync();
    public abstract virtual void CommitTran();
    public abstract virtual Task CommitTranAsync();
    public abstract virtual SqlSugarTransactionAdo UseTran();
    public abstract virtual DbResult`1<bool> UseTran(Action action, Action`1<Exception> errorCallBack);
    public abstract virtual DbResult`1<T> UseTran(Func`1<T> action, Action`1<Exception> errorCallBack);
    public abstract virtual Task`1<DbResult`1<bool>> UseTranAsync(Func`1<Task> action, Action`1<Exception> errorCallBack);
    public abstract virtual Task`1<DbResult`1<T>> UseTranAsync(Func`1<Task`1<T>> action, Action`1<Exception> errorCallBack);
    public abstract virtual IAdo UseStoredProcedure();
}
public interface SqlSugar.ICacheService {
    public abstract virtual void Add(string key, V value);
    public abstract virtual void Add(string key, V value, int cacheDurationInSeconds);
    public abstract virtual bool ContainsKey(string key);
    public abstract virtual V Get(string key);
    public abstract virtual IEnumerable`1<string> GetAllKey();
    public abstract virtual void Remove(string key);
    public abstract virtual V GetOrCreate(string cacheKey, Func`1<V> create, int cacheDurationInSeconds);
}
public interface SqlSugar.ICodeFirst {
    public SqlSugarProvider Context { get; public set; }
    public abstract virtual SqlSugarProvider get_Context();
    public abstract virtual void set_Context(SqlSugarProvider value);
    public abstract virtual ICodeFirst BackupTable(int maxBackupDataRows);
    public abstract virtual ICodeFirst SetStringDefaultLength(int length);
    public abstract virtual ICodeFirst As(Type type, string newTableName);
    public abstract virtual ICodeFirst As(string newTableName);
    public abstract virtual void InitTables(string entitiesNamespace);
    public abstract virtual void InitTables(String[] entitiesNamespaces);
    public abstract virtual void InitTables(Type[] entityTypes);
    public abstract virtual void InitTablesWithAttr(Type[] entityTypes);
    public abstract virtual void InitTables(Type entityType);
    public abstract virtual void InitTables();
    public abstract virtual void InitTables();
    public abstract virtual void InitTables();
    public abstract virtual void InitTables();
    public abstract virtual void InitTables();
    public abstract virtual SplitCodeFirstProvider SplitTables();
    public abstract virtual TableDifferenceProvider GetDifferenceTables();
    public abstract virtual TableDifferenceProvider GetDifferenceTables(Type[] types);
}
public interface SqlSugar.IConditionalModel {
}
public interface SqlSugar.IContextMethods {
    public SqlSugarProvider Context { get; public set; }
    public QueryBuilder QueryBuilder { get; public set; }
    public abstract virtual SqlSugarProvider get_Context();
    public abstract virtual void set_Context(SqlSugarProvider value);
    public abstract virtual QueryBuilder get_QueryBuilder();
    public abstract virtual void set_QueryBuilder(QueryBuilder value);
    public abstract virtual List`1<T> DataReaderToValueTupleType(IDataReader reader);
    public abstract virtual Task`1<List`1<T>> DataReaderToValueTupleTypeAsync(IDataReader reader);
    public abstract virtual ExpandoObject DataReaderToExpandoObject(IDataReader reader);
    public abstract virtual List`1<ExpandoObject> DataReaderToExpandoObjectList(IDataReader reader);
    public abstract virtual Task`1<List`1<ExpandoObject>> DataReaderToExpandoObjectListAsync(IDataReader dataReader);
    public abstract virtual List`1<ExpandoObject> DataReaderToExpandoObjectListNoUsing(IDataReader reader);
    public abstract virtual Task`1<List`1<ExpandoObject>> DataReaderToExpandoObjectListAsyncNoUsing(IDataReader dataReader);
    public abstract virtual List`1<T> DataReaderToList(IDataReader reader);
    public abstract virtual List`1<T> DataReaderToSelectJsonList(IDataReader reader);
    public abstract virtual List`1<T> DataReaderToSelectArrayList(IDataReader reader);
    public abstract virtual Task`1<List`1<T>> DataReaderToSelectArrayListAsync(IDataReader reader);
    public abstract virtual Task`1<List`1<T>> DataReaderToSelectJsonListAsync(IDataReader reader);
    public abstract virtual List`1<T> DataReaderToListNoUsing(IDataReader reader);
    public abstract virtual Task`1<List`1<T>> DataReaderToListAsync(IDataReader dataReader);
    public abstract virtual Task`1<List`1<T>> DataReaderToListAsyncNoUsing(IDataReader dataReader);
    public abstract virtual string SerializeObject(object value);
    public abstract virtual string SerializeObject(object value, Type type);
    public abstract virtual T DeserializeObject(string value);
    public abstract virtual T TranslateCopy(T sourceObject);
    public abstract virtual SqlSugarProvider CopyContext(bool isCopyEvents);
    public abstract virtual object DataTableToDynamic(DataTable table);
    public abstract virtual List`1<T> DataTableToList(DataTable table);
    public abstract virtual DataTable ListToDataTable(List`1<T> list);
    public abstract virtual DataTable ListToDataTableWithAttr(List`1<T> list);
    public abstract virtual Dictionary`2<string, object> DataTableToDictionary(DataTable table);
    public abstract virtual List`1<Dictionary`2<string, object>> DataTableToDictionaryList(DataTable table);
    public abstract virtual ICacheService GetReflectionInoCacheInstance();
    public abstract virtual void RemoveCacheAll();
    public abstract virtual void RemoveCacheAll();
    public abstract virtual void RemoveCacheByLikeKey(string key);
    public abstract virtual void RemoveCache(string key);
    public abstract virtual void PageEach(IEnumerable`1<T> pageItems, int pageSize, Action`1<List`1<T>> action);
    public abstract virtual Task PageEachAsync(IEnumerable`1<T> pageItems, int pageSize, Func`2<List`1<T>, Task> action);
    public abstract virtual Task PageEachAsync(IEnumerable`1<T> pageItems, int pageSize, Func`2<List`1<T>, Task`1<ResultType>> action);
    public abstract virtual List`1<IConditionalModel> JsonToConditionalModels(string json);
    public abstract virtual DataTable DictionaryListToDataTable(List`1<Dictionary`2<string, object>> dictionaryList);
    public abstract virtual List`1<T> ToTree(List`1<T> list, Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, Expression`1<Func`2<T, object>> pkExpression, object rootValue);
    public abstract virtual KeyValuePair`2<string, SugarParameter[]> ConditionalModelsToSql(List`1<IConditionalModel> conditionalModels, int beginIndex);
    public abstract virtual List`1<OrderByModel> JsonToOrderByModels(string json);
    public abstract virtual List`1<GroupByModel> JsonToGroupByModels(string json);
    public abstract virtual List`1<Dictionary`2<string, object>> JsonToColumnsModels(string json);
    public abstract virtual List`1<SelectModel> JsonToSelectModels(string json);
    public abstract virtual IFuncModel JsonToSqlFuncModels(string json);
    public abstract virtual JoinModel JsonToJoinModels(string json);
}
public interface SqlSugar.ICustomConditionalFunc {
    public abstract virtual KeyValuePair`2<string, SugarParameter[]> GetConditionalSql(ConditionalModel json, int index);
}
public interface SqlSugar.IDataAdapter {
    public abstract virtual void Fill(DataSet ds);
}
public class SqlSugar.IDataReaderEntityBuilder`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <ReaderKeys>k__BackingField;
    private SqlSugarProvider Context;
    private IDataReaderEntityBuilder`1<T> DynamicBuilder;
    private IDataRecord DataRecord;
    private static MethodInfo isDBNullMethod;
    private static MethodInfo getBoolean;
    private static MethodInfo getByte;
    private static MethodInfo getDateTime;
    private static MethodInfo getDecimal;
    private static MethodInfo getDouble;
    private static MethodInfo getFloat;
    private static MethodInfo getGuid;
    private static MethodInfo getInt16;
    private static MethodInfo getInt32;
    private static MethodInfo getInt64;
    private static MethodInfo getString;
    private static MethodInfo getdatetimeoffset;
    private static MethodInfo getdatetimeoffsetDate;
    private static MethodInfo getStringGuid;
    private static MethodInfo getXelement;
    private static MethodInfo getConvertStringGuid;
    private static MethodInfo getEnum;
    private static MethodInfo getConvertString;
    private static MethodInfo getConvertFloat;
    private static MethodInfo getConvertBoolean;
    private static MethodInfo getConvertByte;
    private static MethodInfo getConvertChar;
    private static MethodInfo getConvertDateTime;
    private static MethodInfo getConvertTime;
    private static MethodInfo getTime;
    private static MethodInfo getConvertDecimal;
    private static MethodInfo getConvertDouble;
    private static MethodInfo getConvertDoubleToFloat;
    private static MethodInfo getConvertGuid;
    private static MethodInfo getConvertInt16;
    private static MethodInfo getConvertInt32;
    private static MethodInfo getConvertInt64;
    private static MethodInfo getConvertEnum_Null;
    private static MethodInfo getConvertdatetimeoffset;
    private static MethodInfo getConvertdatetimeoffsetDate;
    private static MethodInfo getOtherNull;
    private static MethodInfo getOther;
    private static MethodInfo getJson;
    private static MethodInfo getArray;
    private static MethodInfo getEntity;
    private static MethodInfo getMyIntNull;
    private static MethodInfo getMyInt;
    private Load<T> handler;
    private List`1<string> ReaderKeys { get; private set; }
    public IDataReaderEntityBuilder`1(SqlSugarProvider context, IDataRecord dataRecord, List`1<string> fieldNames);
    private static IDataReaderEntityBuilder`1();
    [CompilerGeneratedAttribute]
private List`1<string> get_ReaderKeys();
    [CompilerGeneratedAttribute]
private void set_ReaderKeys(List`1<string> value);
    public T Build(IDataRecord dataRecord);
    public IDataReaderEntityBuilder`1<T> CreateBuilder(Type type);
    private void BindCustomFunc(ILGenerator generator, LocalBuilder result, EntityColumnInfo columnInfo, string fieldName);
    private void BindClass(ILGenerator generator, LocalBuilder result, EntityColumnInfo columnInfo, string fieldName);
    private void BindField(ILGenerator generator, LocalBuilder result, EntityColumnInfo columnInfo, string fieldName);
    private void BindMethod(ILGenerator generator, EntityColumnInfo columnInfo, int ordinal);
    private void CheckType(List`1<string> invalidTypes, string bindProperyTypeName, string validPropertyType, string propertyName);
}
[ExtensionAttribute]
public static class SqlSugar.IDataRecordExtensions : object {
    [ExtensionAttribute]
public static XElement GetXelement(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Guid GetStringGuid(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<Guid> GetConvertStringGuid(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<bool> GetConvertBoolean(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<byte> GetConvertByte(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<char> GetConvertChar(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<DateTime> GetConvertDateTime(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<DateTime> GetConvertTime(IDataRecord dr, int i);
    [ExtensionAttribute]
public static DateTime GetTime(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<decimal> GetConvertDecimal(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<double> GetConvertDouble(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<float> GetConvertDoubleToFloat(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<Guid> GetConvertGuid(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<short> GetConvertInt16(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<int> GetMyIntNull(IDataRecord dr, int i);
    [ExtensionAttribute]
public static int GetMyInt(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<int> GetConvertInt32(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<long> GetConvetInt64(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<float> GetConvertFloat(IDataRecord dr, int i);
    [ExtensionAttribute]
public static DateTime GetdatetimeoffsetDate(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<DateTime> GetConvertdatetimeoffsetDate(IDataRecord dr, int i);
    [ExtensionAttribute]
public static DateTimeOffset Getdatetimeoffset(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<DateTimeOffset> GetConvertdatetimeoffset(IDataRecord dr, int i);
    [ExtensionAttribute]
public static string GetConvertString(IDataRecord dr, int i);
    [ExtensionAttribute]
public static Nullable`1<T> GetOtherNull(IDataReader dr, int i);
    [ExtensionAttribute]
public static T GetOther(IDataReader dr, int i);
    [ExtensionAttribute]
public static T GetJson(IDataReader dr, int i);
    [ExtensionAttribute]
public static T GetArray(IDataReader dr, int i);
    [ExtensionAttribute]
public static Nullable`1<T> GetConvertEnum_Null(IDataReader dr, int i);
    [ExtensionAttribute]
public static T GetEnum(IDataReader dr, int i);
    [ExtensionAttribute]
public static object GetEntity(IDataReader dr, SqlSugarProvider context);
    private static T OtherException(IDataRecord dr, int i, Exception ex);
}
public interface SqlSugar.IDbBind {
    public QueryBuilder QueryBuilder { get; public set; }
    public SqlSugarProvider Context { get; public set; }
    public List`1<string> GuidThrow { get; }
    public List`1<string> IntThrow { get; }
    public List`1<string> StringThrow { get; }
    public List`1<string> DecimalThrow { get; }
    public List`1<string> DoubleThrow { get; }
    public List`1<string> DateThrow { get; }
    public List`1<string> ShortThrow { get; }
    public List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypes { get; }
    public abstract virtual QueryBuilder get_QueryBuilder();
    public abstract virtual void set_QueryBuilder(QueryBuilder value);
    public abstract virtual SqlSugarProvider get_Context();
    public abstract virtual void set_Context(SqlSugarProvider value);
    public abstract virtual List`1<string> get_GuidThrow();
    public abstract virtual List`1<string> get_IntThrow();
    public abstract virtual List`1<string> get_StringThrow();
    public abstract virtual List`1<string> get_DecimalThrow();
    public abstract virtual List`1<string> get_DoubleThrow();
    public abstract virtual List`1<string> get_DateThrow();
    public abstract virtual List`1<string> get_ShortThrow();
    public abstract virtual string GetPropertyTypeName(string dbTypeName);
    public abstract virtual string GetConvertString(string dbTypeName);
    public abstract virtual string GetDbTypeName(string csharpTypeName);
    public abstract virtual string GetCsharpTypeName(string dbTypeName);
    public abstract virtual string GetCsharpTypeNameByDbTypeName(string dbTypeName);
    public abstract virtual List`1<KeyValuePair`2<string, CSharpDataType>> get_MappingTypes();
    public abstract virtual List`1<T> DataReaderToList(Type type, IDataReader reader);
    public abstract virtual Task`1<List`1<T>> DataReaderToListAsync(Type entityType, IDataReader dataReader);
    public abstract virtual List`1<T> DataReaderToListNoUsing(Type type, IDataReader reader);
    public abstract virtual Task`1<List`1<T>> DataReaderToListNoUsingAsync(Type type, IDataReader reader);
}
public interface SqlSugar.IDbFirst {
    public ISqlSugarClient Context { get; public set; }
    public abstract virtual ISqlSugarClient get_Context();
    public abstract virtual void set_Context(ISqlSugarClient value);
    public abstract virtual IDbFirst SettingClassTemplate(Func`2<string, string> func);
    public abstract virtual IDbFirst SettingClassDescriptionTemplate(Func`2<string, string> func);
    public abstract virtual IDbFirst SettingPropertyTemplate(Func`2<string, string> func);
    public abstract virtual IDbFirst SettingPropertyTemplate(Func`4<DbColumnInfo, string, string, string> func);
    public abstract virtual IDbFirst SettingPropertyDescriptionTemplate(Func`2<string, string> func);
    public abstract virtual IDbFirst SettingConstructorTemplate(Func`2<string, string> func);
    public abstract virtual IDbFirst SettingNamespaceTemplate(Func`2<string, string> func);
    public abstract virtual RazorFirst UseRazorAnalysis(string razorClassString, string classNamespace);
    public abstract virtual IDbFirst IsCreateAttribute(bool isCreateAttribute);
    public abstract virtual IDbFirst IsCreateDefaultValue(bool isCreateDefaultValue);
    public abstract virtual IDbFirst Where(String[] objectNames);
    public abstract virtual IDbFirst Where(Func`2<string, bool> func);
    public abstract virtual IDbFirst WhereColumns(Func`2<string, bool> func);
    public abstract virtual IDbFirst Where(DbObjectType dbObjectType);
    public abstract virtual void CreateClassFile(string directoryPath, string nameSpace);
    public abstract virtual Dictionary`2<string, string> ToClassStringList(string nameSpace);
    public abstract virtual void Init();
    public abstract virtual IDbFirst FormatFileName(Func`2<string, string> formatFileNameFunc);
    public abstract virtual IDbFirst FormatClassName(Func`2<string, string> formatClassNameFunc);
    public abstract virtual IDbFirst FormatPropertyName(Func`2<string, string> formatPropertyNameFunc);
    public abstract virtual IDbFirst StringNullable();
    public abstract virtual IDbFirst CreatedReplaceClassString(Func`2<string, string> replaceClassStringFunc);
}
public interface SqlSugar.IDbMaintenance {
    public SqlSugarProvider Context { get; public set; }
    public abstract virtual SqlSugarProvider get_Context();
    public abstract virtual void set_Context(SqlSugarProvider value);
    public abstract virtual List`1<string> GetDataBaseList(SqlSugarClient db);
    public abstract virtual List`1<string> GetDataBaseList();
    public abstract virtual List`1<DbTableInfo> GetViewInfoList(bool isCache);
    public abstract virtual List`1<DbTableInfo> GetTableInfoList(bool isCache);
    public abstract virtual List`1<DbTableInfo> GetTableInfoList(Func`3<DbType, string, string> getChangeSqlFunc);
    public abstract virtual List`1<DbColumnInfo> GetColumnInfosByTableName(string tableName, bool isCache);
    public abstract virtual List`1<DbColumnInfo> GetColumnInfosByTableName(string tableName, Func`3<DbType, string, string> getChangeSqlFunc);
    public abstract virtual List`1<string> GetIsIdentities(string tableName);
    public abstract virtual List`1<string> GetPrimaries(string tableName);
    public abstract virtual List`1<string> GetProcList(string dbName);
    public abstract virtual List`1<string> GetProcList();
    public abstract virtual List`1<string> GetIndexList(string tableName);
    public abstract virtual List`1<string> GetFuncList();
    public abstract virtual List`1<string> GetTriggerNames(string tableName);
    public abstract virtual List`1<string> GetDbTypes();
    public abstract virtual bool IsAnyTable(string tableName, bool isCache);
    public abstract virtual bool IsAnyColumn(string tableName, string column, bool isCache);
    public abstract virtual bool IsPrimaryKey(string tableName, string column);
    public abstract virtual bool IsPrimaryKey(string tableName, string column, bool isCache);
    public abstract virtual bool IsIdentity(string tableName, string column);
    public abstract virtual bool IsAnyConstraint(string ConstraintName);
    public abstract virtual bool IsAnySystemTablePermissions();
    public abstract virtual bool IsAnyProcedure(string procName);
    public abstract virtual bool AddDefaultValue(string tableName, string columnName, string defaultValue);
    public abstract virtual bool CreateIndex(string tableName, String[] columnNames, bool isUnique);
    public abstract virtual bool CreateIndex(string tableName, String[] columnNames, string IndexName, bool isUnique);
    public abstract virtual bool DropTable(string tableName);
    public abstract virtual bool DropView(string viewName);
    public abstract virtual bool DropIndex(string indexName);
    public abstract virtual bool DropIndex(string indexName, string tableName);
    public abstract virtual bool DropFunction(string funcName);
    public abstract virtual bool DropProc(string procName);
    public abstract virtual bool DropTable(String[] tableName);
    public abstract virtual bool DropTable(Type[] tableEntityTypes);
    public abstract virtual bool DropTable();
    public abstract virtual bool DropTable();
    public abstract virtual bool DropTable();
    public abstract virtual bool DropTable();
    public abstract virtual bool TruncateTable(string tableName);
    public abstract virtual bool TruncateTable(String[] tableName);
    public abstract virtual bool TruncateTable(Type[] tableEntityType);
    public abstract virtual bool TruncateTable();
    public abstract virtual bool TruncateTable();
    public abstract virtual bool TruncateTable();
    public abstract virtual bool TruncateTable();
    public abstract virtual bool TruncateTable();
    public abstract virtual bool CreateTable(string tableName, List`1<DbColumnInfo> columns, bool isCreatePrimaryKey);
    public abstract virtual bool AddColumn(string tableName, DbColumnInfo column);
    public abstract virtual bool UpdateColumn(string tableName, DbColumnInfo column);
    public abstract virtual bool AddPrimaryKey(string tableName, string columnName);
    public abstract virtual bool AddPrimaryKeys(string tableName, String[] columnNames);
    public abstract virtual bool AddPrimaryKeys(string tableName, String[] columnNames, string pkName);
    public abstract virtual bool DropConstraint(string tableName, string constraintName);
    public abstract virtual bool BackupDataBase(string databaseName, string fullFileName);
    public abstract virtual bool BackupTable(string oldTableName, string newTableName, int maxBackupDataRows);
    public abstract virtual bool DropColumn(string tableName, string columnName);
    public abstract virtual bool RenameColumn(string tableName, string oldColumnName, string newColumnName);
    public abstract virtual bool AddRemark(EntityInfo entity);
    public abstract virtual void AddIndex(EntityInfo entityInfo);
    public abstract virtual void AddDefaultValue(EntityInfo entityInfo);
    public abstract virtual bool IsAnyDefaultValue(string tableName, string columnName);
    public abstract virtual bool IsAnyIndex(string indexName);
    public abstract virtual bool AddColumnRemark(string columnName, string tableName, string description);
    public abstract virtual bool DeleteColumnRemark(string columnName, string tableName);
    public abstract virtual bool IsAnyColumnRemark(string columnName, string tableName);
    public abstract virtual bool AddTableRemark(string tableName, string description);
    public abstract virtual bool DeleteTableRemark(string tableName);
    public abstract virtual bool IsAnyTableRemark(string tableName);
    public abstract virtual bool RenameTable(string oldTableName, string newTableName);
    public abstract virtual bool CreateDatabase(string databaseDirectory);
    public abstract virtual bool CreateDatabase(string databaseName, string databaseDirectory);
    public abstract virtual bool SetAutoIncrementInitialValue(Type type, int initialValue);
    public abstract virtual bool SetAutoIncrementInitialValue(string tableName, int initialValue);
}
public interface SqlSugar.IDbMethods {
    public abstract virtual string IIF(MethodCallExpressionModel model);
    public abstract virtual string HasNumber(MethodCallExpressionModel model);
    public abstract virtual string HasValue(MethodCallExpressionModel model);
    public abstract virtual string IsNullOrEmpty(MethodCallExpressionModel model);
    public abstract virtual string ToLower(MethodCallExpressionModel model);
    public abstract virtual string ToUpper(MethodCallExpressionModel model);
    public abstract virtual string Trim(MethodCallExpressionModel model);
    public abstract virtual string Contains(MethodCallExpressionModel model);
    public abstract virtual string ContainsArray(MethodCallExpressionModel model);
    public abstract virtual string ContainsArrayUseSqlParameters(MethodCallExpressionModel model);
    public abstract virtual string Equals(MethodCallExpressionModel model);
    public abstract virtual string EqualsNull(MethodCallExpressionModel model);
    public abstract virtual string DateIsSameDay(MethodCallExpressionModel model);
    public abstract virtual string DateIsSameByType(MethodCallExpressionModel model);
    public abstract virtual string DateAddByType(MethodCallExpressionModel model);
    public abstract virtual string DateValue(MethodCallExpressionModel model);
    public abstract virtual string DateAddDay(MethodCallExpressionModel model);
    public abstract virtual string Between(MethodCallExpressionModel model);
    public abstract virtual string StartsWith(MethodCallExpressionModel model);
    public abstract virtual string EndsWith(MethodCallExpressionModel model);
    public abstract virtual string ToInt32(MethodCallExpressionModel model);
    public abstract virtual string GetStringJoinSelector(string result, string separator);
    public abstract virtual string ToInt64(MethodCallExpressionModel model);
    public abstract virtual string ToString(MethodCallExpressionModel model);
    public abstract virtual string ToVarchar(MethodCallExpressionModel model);
    public abstract virtual string ToGuid(MethodCallExpressionModel model);
    public abstract virtual string ToDouble(MethodCallExpressionModel model);
    public abstract virtual string ToBool(MethodCallExpressionModel model);
    public abstract virtual string CaseWhen(List`1<KeyValuePair`2<string, string>> sqls);
    public abstract virtual string Substring(MethodCallExpressionModel model);
    public abstract virtual string ToDate(MethodCallExpressionModel model);
    public abstract virtual string ToDateShort(MethodCallExpressionModel model);
    public abstract virtual string ToTime(MethodCallExpressionModel model);
    public abstract virtual string ToDecimal(MethodCallExpressionModel model);
    public abstract virtual string Length(MethodCallExpressionModel model);
    public abstract virtual string Replace(MethodCallExpressionModel model);
    public abstract virtual string AggregateSum(MethodCallExpressionModel model);
    public abstract virtual string AggregateAvg(MethodCallExpressionModel model);
    public abstract virtual string AggregateMin(MethodCallExpressionModel model);
    public abstract virtual string AggregateMax(MethodCallExpressionModel model);
    public abstract virtual string AggregateCount(MethodCallExpressionModel model);
    public abstract virtual string AggregateDistinctCount(MethodCallExpressionModel model);
    public abstract virtual string MappingColumn(MethodCallExpressionModel model);
    public abstract virtual string IsNull(MethodCallExpressionModel model);
    public abstract virtual string GetSelfAndAutoFill(string shortName, bool isSingle);
    public abstract virtual string True();
    public abstract virtual string False();
    public abstract virtual string TrueValue();
    public abstract virtual string FalseValue();
    public abstract virtual string GuidNew();
    public abstract virtual string MergeString(String[] strings);
    public abstract virtual string EqualTrue(string value);
    public abstract virtual string Pack(string sql);
    public abstract virtual string Null();
    public abstract virtual string GetDate();
    public abstract virtual string GetRandom();
    public abstract virtual string CharIndex(MethodCallExpressionModel model);
    public abstract virtual string CharIndexNew(MethodCallExpressionModel model);
    public abstract virtual string BitwiseAnd(MethodCallExpressionModel model);
    public abstract virtual string BitwiseInclusiveOR(MethodCallExpressionModel model);
    public abstract virtual string Oracle_ToDate(MethodCallExpressionModel model);
    public abstract virtual string Oracle_ToChar(MethodCallExpressionModel model);
    public abstract virtual string SqlServer_DateDiff(MethodCallExpressionModel model);
    public abstract virtual string Format(MethodCallExpressionModel model);
    public abstract virtual string FormatRowNumber(MethodCallExpressionModel model);
    public abstract virtual string Abs(MethodCallExpressionModel model);
    public abstract virtual string Round(MethodCallExpressionModel model);
    public abstract virtual string DateDiff(MethodCallExpressionModel model);
    public abstract virtual string GreaterThan(MethodCallExpressionModel model);
    public abstract virtual string GreaterThanOrEqual(MethodCallExpressionModel model);
    public abstract virtual string LessThan(MethodCallExpressionModel model);
    public abstract virtual string LessThanOrEqual(MethodCallExpressionModel model);
    public abstract virtual string Asc(MethodCallExpressionModel model);
    public abstract virtual string Desc(MethodCallExpressionModel model);
    public abstract virtual string Stuff(MethodCallExpressionModel model);
    public abstract virtual string RowNumber(MethodCallExpressionModel model);
    public abstract virtual string RowCount(MethodCallExpressionModel model);
    public abstract virtual string RowSum(MethodCallExpressionModel model);
    public abstract virtual string RowMin(MethodCallExpressionModel model);
    public abstract virtual string RowMax(MethodCallExpressionModel model);
    public abstract virtual string RowAvg(MethodCallExpressionModel model);
    public abstract virtual string Exists(MethodCallExpressionModel model);
    public abstract virtual string GetDateString(string dateValue, string format);
    public abstract virtual string GetForXmlPath();
    public abstract virtual string JsonIndex(MethodCallExpressionModel model);
    public abstract virtual string JsonField(MethodCallExpressionModel model);
    public abstract virtual string JsonContainsFieldName(MethodCallExpressionModel model);
    public abstract virtual string JsonArrayLength(MethodCallExpressionModel model);
    public abstract virtual string JsonParse(MethodCallExpressionModel model);
    public abstract virtual string JsonLike(MethodCallExpressionModel model);
    public abstract virtual string Collate(MethodCallExpressionModel model);
    public abstract virtual string AggregateSumNoNull(MethodCallExpressionModel model);
    public abstract virtual string AggregateAvgNoNull(MethodCallExpressionModel model);
    public abstract virtual string JsonListObjectAny(MethodCallExpressionModel model);
    public abstract virtual string JsonArrayAny(MethodCallExpressionModel model);
    public abstract virtual string CompareTo(MethodCallExpressionModel model);
    public abstract virtual string SplitIn(MethodCallExpressionModel model);
    public abstract virtual string ListAny(MethodCallExpressionModel model);
    public abstract virtual string ListAll(MethodCallExpressionModel model);
    public abstract virtual string GetTableWithDataBase(string databaseName, string tableName);
    public abstract virtual string Modulo(MethodCallExpressionModel mode);
    public abstract virtual string Like(MethodCallExpressionModel mode);
    public abstract virtual string ToSingle(MethodCallExpressionModel mode);
    public abstract virtual string WeekOfYear(MethodCallExpressionModel mode);
    public abstract virtual string TrimEnd(MethodCallExpressionModel mode);
    public abstract virtual string TrimStart(MethodCallExpressionModel mode);
    public abstract virtual string Left(MethodCallExpressionModel mode);
    public abstract virtual string Right(MethodCallExpressionModel mode);
    public abstract virtual string PadLeft(MethodCallExpressionModel mode);
    public abstract virtual string Floor(MethodCallExpressionModel mode);
    public abstract virtual string Ceil(MethodCallExpressionModel mode);
    public abstract virtual string NewUid(MethodCallExpressionModel mode);
    public abstract virtual string FullTextContains(MethodCallExpressionModel mode);
    public abstract virtual string PgsqlArrayContains(MethodCallExpressionModel model);
    public abstract virtual string SelectFields(MethodCallExpressionModel model);
}
public interface SqlSugar.IDeleteable`1 {
    public DeleteBuilder DeleteBuilder { get; public set; }
    public abstract virtual DeleteBuilder get_DeleteBuilder();
    public abstract virtual void set_DeleteBuilder(DeleteBuilder value);
    public abstract virtual int ExecuteCommand();
    public abstract virtual bool ExecuteCommandHasChange();
    public abstract virtual Task`1<int> ExecuteCommandAsync();
    public abstract virtual Task`1<int> ExecuteCommandAsync(CancellationToken token);
    public abstract virtual Task`1<bool> ExecuteCommandHasChangeAsync();
    public abstract virtual IDeleteable`1<T> AS(string tableName);
    public abstract virtual IDeleteable`1<T> AsType(Type tableNameType);
    public abstract virtual IDeleteable`1<T> With(string lockString);
    public abstract virtual IDeleteable`1<T> Where(T deleteObj);
    public abstract virtual IDeleteable`1<T> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual IDeleteable`1<T> Where(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual IDeleteable`1<T> Where(List`1<T> deleteObjs);
    public abstract virtual DeleteablePage`1<T> PageSize(int pageSize);
    public abstract virtual IDeleteable`1<T> In(PkType primaryKeyValue);
    public abstract virtual IDeleteable`1<T> In(PkType[] primaryKeyValues);
    public abstract virtual IDeleteable`1<T> In(List`1<PkType> primaryKeyValues);
    public abstract virtual IDeleteable`1<T> In(Expression`1<Func`2<T, object>> inField, PkType primaryKeyValue);
    public abstract virtual IDeleteable`1<T> In(Expression`1<Func`2<T, object>> inField, PkType[] primaryKeyValues);
    public abstract virtual IDeleteable`1<T> In(Expression`1<Func`2<T, object>> inField, List`1<PkType> primaryKeyValues);
    public abstract virtual IDeleteable`1<T> In(Expression`1<Func`2<T, object>> inField, ISugarQueryable`1<PkType> childQueryExpression);
    public abstract virtual IDeleteable`1<T> In(string inField, List`1<PkType> primaryKeyValues);
    public abstract virtual IDeleteable`1<T> Where(string whereString, object parameters);
    public abstract virtual IDeleteable`1<T> Where(string whereString, SugarParameter parameter);
    public abstract virtual IDeleteable`1<T> Where(string whereString, SugarParameter[] parameters);
    public abstract virtual IDeleteable`1<T> Where(string whereString, List`1<SugarParameter> parameters);
    public abstract virtual IDeleteable`1<T> WhereColumns(T data, Expression`1<Func`2<T, object>> columns);
    public abstract virtual IDeleteable`1<T> WhereColumns(List`1<T> list, Expression`1<Func`2<T, object>> columns);
    public abstract virtual IDeleteable`1<T> WhereColumns(List`1<Dictionary`2<string, object>> columns);
    public abstract virtual IDeleteable`1<T> Where(List`1<IConditionalModel> conditionalModels);
    public abstract virtual IDeleteable`1<T> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public abstract virtual IDeleteable`1<T> EnableDiffLogEventIF(bool isEnableDiffLogEvent, object businessData);
    public abstract virtual IDeleteable`1<T> EnableDiffLogEvent(object businessData);
    public abstract virtual IDeleteable`1<T> RemoveDataCache();
    public abstract virtual IDeleteable`1<T> RemoveDataCache(string likeString);
    public abstract virtual KeyValuePair`2<string, List`1<SugarParameter>> ToSql();
    public abstract virtual string ToSqlString();
    public abstract virtual IDeleteable`1<T> EnableQueryFilter();
    public abstract virtual IDeleteable`1<T> EnableQueryFilter(Type type);
    public abstract virtual SplitTableDeleteProvider`1<T> SplitTable(Func`2<List`1<SplitTableInfo>, IEnumerable`1<SplitTableInfo>> getTableNamesFunc);
    public abstract virtual SplitTableDeleteByObjectProvider`1<T> SplitTable();
    public abstract virtual LogicDeleteProvider`1<T> IsLogic();
    public abstract virtual void AddQueue();
}
public interface SqlSugar.IDMLBuilder {
    public string SqlTemplate { get; }
    public List`1<SugarParameter> Parameters { get; public set; }
    public SqlSugarProvider Context { get; public set; }
    public StringBuilder sql { get; public set; }
    public abstract virtual string get_SqlTemplate();
    public abstract virtual List`1<SugarParameter> get_Parameters();
    public abstract virtual void set_Parameters(List`1<SugarParameter> value);
    public abstract virtual SqlSugarProvider get_Context();
    public abstract virtual void set_Context(SqlSugarProvider value);
    public abstract virtual StringBuilder get_sql();
    public abstract virtual void set_sql(StringBuilder value);
    public abstract virtual string ToSqlString();
    public abstract virtual void Clear();
}
public interface SqlSugar.IFastBuilder {
    public EntityInfo FastEntityInfo { get; public set; }
    public bool IsActionUpdateColumns { get; public set; }
    public DbFastestProperties DbFastestProperties { get; public set; }
    public SqlSugarProvider Context { get; public set; }
    public string CharacterSet { get; public set; }
    public abstract virtual EntityInfo get_FastEntityInfo();
    public abstract virtual void set_FastEntityInfo(EntityInfo value);
    public abstract virtual bool get_IsActionUpdateColumns();
    public abstract virtual void set_IsActionUpdateColumns(bool value);
    public abstract virtual DbFastestProperties get_DbFastestProperties();
    public abstract virtual void set_DbFastestProperties(DbFastestProperties value);
    public abstract virtual SqlSugarProvider get_Context();
    public abstract virtual void set_Context(SqlSugarProvider value);
    public abstract virtual string get_CharacterSet();
    public abstract virtual void set_CharacterSet(string value);
    public abstract virtual Task`1<int> UpdateByTempAsync(string tableName, string tempName, String[] updateColumns, String[] whereColumns);
    public abstract virtual Task`1<int> ExecuteBulkCopyAsync(DataTable dt);
    public abstract virtual Task CreateTempAsync(DataTable dt);
    public abstract virtual void CloseDb();
    public abstract virtual Task`1<int> Merge(string tableName, DataTable dt, EntityInfo entityInfo, String[] whereColumns, String[] updateColumns, List`1<T> datas);
}
public interface SqlSugar.IFastest`1 {
    public abstract virtual IFastest`1<T> RemoveDataCache();
    public abstract virtual IFastest`1<T> RemoveDataCache(string cacheKey);
    public abstract virtual IFastest`1<T> AS(string tableName);
    public abstract virtual IFastest`1<T> PageSize(int Size);
    public abstract virtual IFastest`1<T> OffIdentity();
    public abstract virtual IFastest`1<T> SetCharacterSet(string CharacterSet);
    public abstract virtual IFastest`1<T> EnableDataAop();
    public abstract virtual int BulkCopy(List`1<T> datas);
    public abstract virtual Task`1<int> BulkCopyAsync(List`1<T> datas);
    public abstract virtual int BulkCopy(string tableName, DataTable dataTable);
    public abstract virtual int BulkCopy(DataTable dataTable);
    public abstract virtual Task`1<int> BulkCopyAsync(string tableName, DataTable dataTable);
    public abstract virtual Task`1<int> BulkCopyAsync(DataTable dataTable);
    public abstract virtual int BulkUpdate(List`1<T> datas);
    public abstract virtual Task`1<int> BulkUpdateAsync(List`1<T> datas);
    public abstract virtual int BulkUpdate(List`1<T> datas, String[] whereColumns, String[] updateColumns);
    public abstract virtual int BulkUpdate(List`1<T> datas, String[] whereColumns);
    public abstract virtual Task`1<int> BulkUpdateAsync(List`1<T> datas, String[] whereColumns);
    public abstract virtual Task`1<int> BulkUpdateAsync(List`1<T> datas, String[] whereColumns, String[] updateColumns);
    public abstract virtual int BulkUpdate(string tableName, DataTable dataTable, String[] whereColumns, String[] updateColumns);
    public abstract virtual int BulkUpdate(DataTable dataTable, String[] whereColumns, String[] updateColumns);
    public abstract virtual int BulkUpdate(DataTable dataTable, String[] whereColumns);
    public abstract virtual Task`1<int> BulkUpdateAsync(string tableName, DataTable dataTable, String[] whereColumns, String[] updateColumns);
    public abstract virtual Task`1<int> BulkUpdateAsync(DataTable dataTable, String[] whereColumns);
    public abstract virtual SplitFastest`1<T> SplitTable();
    public abstract virtual Task`1<int> BulkMergeAsync(List`1<T> datas);
    public abstract virtual int BulkMerge(List`1<T> datas);
    public abstract virtual int BulkMerge(DataTable dataTable, String[] whereColumns, bool isIdentity);
    public abstract virtual Task`1<int> BulkMergeAsync(DataTable dataTable, String[] whereColumns, bool isIdentity);
    public abstract virtual Task`1<int> BulkMergeAsync(List`1<T> datas, String[] whereColumns);
    public abstract virtual int BulkMerge(List`1<T> datas, String[] whereColumns);
    public abstract virtual Task`1<int> BulkMergeAsync(List`1<T> datas, String[] whereColumns, String[] updateColumns);
    public abstract virtual int BulkMerge(List`1<T> datas, String[] whereColumns, String[] updateColumns);
}
public interface SqlSugar.IFilter {
    public List`1<SqlFilterItem> GeFilterList { get; }
    public abstract virtual IFilter Add(SqlFilterItem filter);
    public abstract virtual void Remove(string filterName);
    public abstract virtual List`1<SqlFilterItem> get_GeFilterList();
}
public interface SqlSugar.IFuncModel {
}
public class SqlSugar.IgnoreColumn : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <EntityName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyName>k__BackingField;
    public string EntityName { get; public set; }
    public string PropertyName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EntityName();
    [CompilerGeneratedAttribute]
public void set_EntityName(string value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
}
public class SqlSugar.IgnoreColumnList : List`1<IgnoreColumn> {
    public void Add(string propertyName, string EntityName);
    public void Clear();
}
public interface SqlSugar.IInsertable`1 {
    public InsertBuilder InsertBuilder { get; public set; }
    public abstract virtual InsertBuilder get_InsertBuilder();
    public abstract virtual void set_InsertBuilder(InsertBuilder value);
    public abstract virtual int ExecuteCommand();
    public abstract virtual Task`1<int> ExecuteCommandAsync();
    public abstract virtual Task`1<int> ExecuteCommandAsync(CancellationToken token);
    public abstract virtual List`1<Type> ExecuteReturnPkList();
    public abstract virtual Task`1<List`1<Type>> ExecuteReturnPkListAsync();
    public abstract virtual long ExecuteReturnSnowflakeId();
    public abstract virtual List`1<long> ExecuteReturnSnowflakeIdList();
    public abstract virtual Task`1<long> ExecuteReturnSnowflakeIdAsync();
    public abstract virtual Task`1<long> ExecuteReturnSnowflakeIdAsync(CancellationToken token);
    public abstract virtual Task`1<List`1<long>> ExecuteReturnSnowflakeIdListAsync();
    public abstract virtual Task`1<List`1<long>> ExecuteReturnSnowflakeIdListAsync(CancellationToken token);
    public abstract virtual int ExecuteReturnIdentity();
    public abstract virtual Task`1<int> ExecuteReturnIdentityAsync();
    public abstract virtual Task`1<int> ExecuteReturnIdentityAsync(CancellationToken token);
    public abstract virtual T ExecuteReturnEntity();
    public abstract virtual T ExecuteReturnEntity(bool isIncludesAllFirstLayer);
    public abstract virtual Task`1<T> ExecuteReturnEntityAsync();
    public abstract virtual Task`1<T> ExecuteReturnEntityAsync(bool isIncludesAllFirstLayer);
    public abstract virtual bool ExecuteCommandIdentityIntoEntity();
    public abstract virtual Task`1<bool> ExecuteCommandIdentityIntoEntityAsync();
    public abstract virtual long ExecuteReturnBigIdentity();
    public abstract virtual Task`1<long> ExecuteReturnBigIdentityAsync();
    public abstract virtual Task`1<long> ExecuteReturnBigIdentityAsync(CancellationToken token);
    public abstract virtual IInsertable`1<T> AS(string tableName);
    public abstract virtual IInsertable`1<T> AsType(Type tableNameType);
    public abstract virtual IInsertable`1<T> With(string lockString);
    public abstract virtual IInsertable`1<T> InsertColumns(Expression`1<Func`2<T, object>> columns);
    public abstract virtual IInsertable`1<T> InsertColumns(String[] columns);
    public abstract virtual IInsertable`1<T> IgnoreColumns(Expression`1<Func`2<T, object>> columns);
    public abstract virtual IInsertable`1<T> IgnoreColumns(String[] columns);
    public abstract virtual IInsertable`1<T> IgnoreColumns(bool ignoreNullColumn, bool isOffIdentity);
    public abstract virtual IInsertable`1<T> IgnoreColumnsNull(bool isIgnoreNull);
    public abstract virtual ISubInsertable`1<T> AddSubList(Expression`1<Func`2<T, object>> subForeignKey);
    public abstract virtual ISubInsertable`1<T> AddSubList(Expression`1<Func`2<T, SubInsertTree>> tree);
    public abstract virtual IParameterInsertable`1<T> UseParameter();
    public abstract virtual IInsertable`1<T> CallEntityMethod(Expression`1<Action`1<T>> method);
    public abstract virtual IInsertable`1<T> EnableDiffLogEvent(object businessData);
    public abstract virtual IInsertable`1<T> EnableDiffLogEventIF(bool isDiffLogEvent, object businessData);
    public abstract virtual IInsertable`1<T> RemoveDataCache();
    public abstract virtual IInsertable`1<T> RemoveDataCache(string likeString);
    public abstract virtual KeyValuePair`2<string, List`1<SugarParameter>> ToSql();
    public abstract virtual string ToSqlString();
    public abstract virtual SqlServerBlukCopy UseSqlServer();
    public abstract virtual MySqlBlukCopy`1<T> UseMySql();
    public abstract virtual OracleBlukCopy UseOracle();
    public abstract virtual SplitInsertable`1<T> SplitTable();
    public abstract virtual SplitInsertable`1<T> SplitTable(SplitType splitType);
    public abstract virtual void AddQueue();
    public abstract virtual IInsertable`1<T> MySqlIgnore();
    public abstract virtual IInsertable`1<T> PostgreSQLConflictNothing(String[] columns);
    public abstract virtual IInsertable`1<T> OffIdentity();
    public abstract virtual IInsertable`1<T> OffIdentity(bool isSetOn);
    public abstract virtual InsertablePage`1<T> PageSize(int pageSize);
}
public interface SqlSugar.IJsonClient {
    public ISqlSugarClient Context { get; public set; }
    public abstract virtual ISqlSugarClient get_Context();
    public abstract virtual void set_Context(ISqlSugarClient value);
    public abstract virtual IJsonProvider`1<JsonDeleteResult> Deleteable(string json);
    public abstract virtual List`1<string> GetTableNameList(string json);
    public abstract virtual IJsonProvider`1<JsonInsertResult> Insertable(string json);
    public abstract virtual IJsonQueryableProvider`1<JsonQueryResult> Queryable(string json);
    public abstract virtual IJsonProvider`1<JsonUpdateResult> Updateable(string json);
}
public interface SqlSugar.IJsonDeleteableProvider`1 {
}
public interface SqlSugar.IJsonInsertableProvider`1 {
}
public interface SqlSugar.IJsonProvider`1 {
    public abstract virtual List`1<SqlObjectResult> ToSqlList();
    public abstract virtual SqlObjectResult ToSql();
    public abstract virtual List`1<string> ToSqlString();
    public abstract virtual T ToResult();
}
public interface SqlSugar.IJsonQueryableProvider`1 {
    public abstract virtual IJsonQueryableProvider`1<JsonQueryResult> ShowDesciption();
    public abstract virtual IJsonQueryableProvider`1<JsonQueryResult> UseAuthentication(JsonTableConfig config);
    public abstract virtual IJsonQueryableProvider`1<JsonQueryResult> UseAuthentication(List`1<JsonTableConfig> config);
}
public interface SqlSugar.IJsonUpdateableProvider`1 {
}
public interface SqlSugar.ILambdaExpressions {
    public MappingColumnList MappingColumns { get; public set; }
    public MappingTableList MappingTables { get; public set; }
    public IgnoreColumnList IgnoreComumnList { get; public set; }
    public List`1<SqlFuncExternal> SqlFuncServices { get; public set; }
    public List`1<JoinQueryInfo> JoinQueryInfos { get; public set; }
    public bool IsSingle { get; public set; }
    public SqlSugarProvider Context { get; public set; }
    public IDbMethods DbMehtods { get; public set; }
    public Expression Expression { get; public set; }
    public int Index { get; public set; }
    public int ParameterIndex { get; public set; }
    public List`1<SugarParameter> Parameters { get; public set; }
    public ExpressionResult Result { get; public set; }
    public string SqlParameterKeyWord { get; }
    public string SingleTableNameSubqueryShortName { get; public set; }
    public Action`1<Type> InitMappingInfo { get; public set; }
    public Action RefreshMapping { get; public set; }
    public bool PgSqlIsAutoToLower { get; public set; }
    public Expression RootExpression { get; public set; }
    public ExpressionOutParameter SugarContext { get; public set; }
    public Nullable`1<bool> TableEnumIsString { get; public set; }
    public abstract virtual MappingColumnList get_MappingColumns();
    public abstract virtual void set_MappingColumns(MappingColumnList value);
    public abstract virtual MappingTableList get_MappingTables();
    public abstract virtual void set_MappingTables(MappingTableList value);
    public abstract virtual IgnoreColumnList get_IgnoreComumnList();
    public abstract virtual void set_IgnoreComumnList(IgnoreColumnList value);
    public abstract virtual List`1<SqlFuncExternal> get_SqlFuncServices();
    public abstract virtual void set_SqlFuncServices(List`1<SqlFuncExternal> value);
    public abstract virtual List`1<JoinQueryInfo> get_JoinQueryInfos();
    public abstract virtual void set_JoinQueryInfos(List`1<JoinQueryInfo> value);
    public abstract virtual bool get_IsSingle();
    public abstract virtual void set_IsSingle(bool value);
    public abstract virtual SqlSugarProvider get_Context();
    public abstract virtual void set_Context(SqlSugarProvider value);
    public abstract virtual IDbMethods get_DbMehtods();
    public abstract virtual void set_DbMehtods(IDbMethods value);
    public abstract virtual Expression get_Expression();
    public abstract virtual void set_Expression(Expression value);
    public abstract virtual int get_Index();
    public abstract virtual void set_Index(int value);
    public abstract virtual int get_ParameterIndex();
    public abstract virtual void set_ParameterIndex(int value);
    public abstract virtual List`1<SugarParameter> get_Parameters();
    public abstract virtual void set_Parameters(List`1<SugarParameter> value);
    public abstract virtual ExpressionResult get_Result();
    public abstract virtual void set_Result(ExpressionResult value);
    public abstract virtual string get_SqlParameterKeyWord();
    public abstract virtual string get_SingleTableNameSubqueryShortName();
    public abstract virtual void set_SingleTableNameSubqueryShortName(string value);
    public abstract virtual Action`1<Type> get_InitMappingInfo();
    public abstract virtual void set_InitMappingInfo(Action`1<Type> value);
    public abstract virtual Action get_RefreshMapping();
    public abstract virtual void set_RefreshMapping(Action value);
    public abstract virtual bool get_PgSqlIsAutoToLower();
    public abstract virtual void set_PgSqlIsAutoToLower(bool value);
    public abstract virtual Expression get_RootExpression();
    public abstract virtual void set_RootExpression(Expression value);
    public abstract virtual ExpressionOutParameter get_SugarContext();
    public abstract virtual void set_SugarContext(ExpressionOutParameter value);
    public abstract virtual Nullable`1<bool> get_TableEnumIsString();
    public abstract virtual void set_TableEnumIsString(Nullable`1<bool> value);
    public abstract virtual string GetAsString(string fieldName, string fieldValue);
    public abstract virtual void Resolve(Expression expression, ResolveExpressType resolveType);
    public abstract virtual void Clear();
}
public enum SqlSugar.InitKeyType : Enum {
    public int value__;
    [ObsoleteAttribute("Look at the sqlsugar document entity configuration,This method relies on the database and is abandoned")]
public static InitKeyType SystemTable;
    public static InitKeyType Attribute;
}
public class SqlSugar.InsertablePage`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T[] <DataList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <InsertColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsEnableDiffLogEvent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DiffLogModel <DiffModel>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsOffIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsInsertColumnsNull>k__BackingField;
    public int PageSize { get; public set; }
    public SqlSugarProvider Context { get; public set; }
    public T[] DataList { get; public set; }
    public string TableName { get; internal set; }
    public List`1<string> InsertColumns { get; internal set; }
    public bool IsEnableDiffLogEvent { get; internal set; }
    public DiffLogModel DiffModel { get; internal set; }
    public bool IsOffIdentity { get; internal set; }
    public bool IsInsertColumnsNull { get; internal set; }
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public T[] get_DataList();
    [CompilerGeneratedAttribute]
public void set_DataList(T[] value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
internal void set_TableName(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_InsertColumns();
    [CompilerGeneratedAttribute]
internal void set_InsertColumns(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IsEnableDiffLogEvent();
    [CompilerGeneratedAttribute]
internal void set_IsEnableDiffLogEvent(bool value);
    [CompilerGeneratedAttribute]
public DiffLogModel get_DiffModel();
    [CompilerGeneratedAttribute]
internal void set_DiffModel(DiffLogModel value);
    [CompilerGeneratedAttribute]
public bool get_IsOffIdentity();
    [CompilerGeneratedAttribute]
internal void set_IsOffIdentity(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInsertColumnsNull();
    [CompilerGeneratedAttribute]
internal void set_IsInsertColumnsNull(bool value);
    public int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.InsertablePage`1/<ExecuteCommandAsync>d__37")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
    public List`1<long> ExecuteReturnSnowflakeIdList();
    [AsyncStateMachineAttribute("SqlSugar.InsertablePage`1/<ExecuteReturnSnowflakeIdListAsync>d__39")]
[DebuggerStepThroughAttribute]
public Task`1<List`1<long>> ExecuteReturnSnowflakeIdListAsync();
    public InsertablePage`1<T> IgnoreColumnsNull(bool isIgnoreNull);
}
public class SqlSugar.InsertableProvider`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlBuilder <SqlBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private InsertBuilder <InsertBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <EntityInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<MappingColumn> <MappingColumnList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <IgnoreColumnNameList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsOffIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T[] <InsertObjs>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MappingTableList <OldMappingTableList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAs>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsEnableDiffLogEvent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DiffLogModel <diffModel>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action <RemoveCacheFunc>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public IAdo Ado { get; }
    public ISqlBuilder SqlBuilder { get; public set; }
    public InsertBuilder InsertBuilder { get; public set; }
    public bool IsMappingTable { get; }
    public bool IsMappingColumns { get; }
    public bool IsSingle { get; }
    public EntityInfo EntityInfo { get; public set; }
    public List`1<MappingColumn> MappingColumnList { get; public set; }
    private List`1<string> IgnoreColumnNameList { get; private set; }
    internal bool IsOffIdentity { get; internal set; }
    public T[] InsertObjs { get; public set; }
    public MappingTableList OldMappingTableList { get; public set; }
    public bool IsAs { get; public set; }
    public bool IsEnableDiffLogEvent { get; public set; }
    public DiffLogModel diffModel { get; public set; }
    internal Action RemoveCacheFunc { get; internal set; }
    private string _ExecuteReturnBigIdentity();
    private string _ExecuteReturnIdentity();
    private string _ExecuteCommand();
    protected void AutoRemoveDataCache();
    protected virtual void PreToSql();
    private static void ArrayNull(DbColumnInfo item, SugarParameter parameter);
    internal void Init();
    private void DataAop(T item);
    private void DataChangeAop(T[] items);
    private void SetInsertItemByDic(int i, T item, List`1<DbColumnInfo> insertItem);
    private void SetInsertItemByEntity(int i, T item, List`1<DbColumnInfo> insertItem);
    private static object GetValue(T item, EntityColumnInfo column);
    private string GetDbColumnName(string propertyName);
    protected virtual List`1<string> GetPrimaryKeys();
    protected virtual List`1<string> GetIdentityKeys();
    protected void RestoreMapping();
    protected void After(string sql, Nullable`1<long> result);
    protected void Before(string sql);
    private List`1<DiffLogTableInfo> GetDiffTable(string sql, Nullable`1<long> identity);
    private List`1<DiffLogTableInfo> GetDiffTableByEntity();
    private List`1<DiffLogTableInfo> GetDiffTableBySql(Nullable`1<long> identity);
    public sealed virtual IInsertable`1<T> CallEntityMethod(Expression`1<Action`1<T>> method);
    private List`1<Type> InsertPkListWithFunc(EntityColumnInfo pkInfo);
    private List`1<Type> InsertPkListNoFunc(EntityColumnInfo pkInfo);
    private List`1<Type> InsertPkListIdentityCount1(EntityColumnInfo pkInfo);
    private List`1<Type> InsertPkListLong();
    private List`1<Type> InsertPkListGuid(EntityColumnInfo pkInfo);
    private List`1<Type> ReturnDefaultIdentity(EntityColumnInfo pkInfo);
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    public IAdo get_Ado();
    [CompilerGeneratedAttribute]
public ISqlBuilder get_SqlBuilder();
    [CompilerGeneratedAttribute]
public void set_SqlBuilder(ISqlBuilder value);
    [CompilerGeneratedAttribute]
public sealed virtual InsertBuilder get_InsertBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InsertBuilder(InsertBuilder value);
    public bool get_IsMappingTable();
    public bool get_IsMappingColumns();
    public bool get_IsSingle();
    [CompilerGeneratedAttribute]
public EntityInfo get_EntityInfo();
    [CompilerGeneratedAttribute]
public void set_EntityInfo(EntityInfo value);
    [CompilerGeneratedAttribute]
public List`1<MappingColumn> get_MappingColumnList();
    [CompilerGeneratedAttribute]
public void set_MappingColumnList(List`1<MappingColumn> value);
    [CompilerGeneratedAttribute]
private List`1<string> get_IgnoreColumnNameList();
    [CompilerGeneratedAttribute]
private void set_IgnoreColumnNameList(List`1<string> value);
    [CompilerGeneratedAttribute]
internal bool get_IsOffIdentity();
    [CompilerGeneratedAttribute]
internal void set_IsOffIdentity(bool value);
    [CompilerGeneratedAttribute]
public T[] get_InsertObjs();
    [CompilerGeneratedAttribute]
public void set_InsertObjs(T[] value);
    [CompilerGeneratedAttribute]
public MappingTableList get_OldMappingTableList();
    [CompilerGeneratedAttribute]
public void set_OldMappingTableList(MappingTableList value);
    [CompilerGeneratedAttribute]
public bool get_IsAs();
    [CompilerGeneratedAttribute]
public void set_IsAs(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEnableDiffLogEvent();
    [CompilerGeneratedAttribute]
public void set_IsEnableDiffLogEvent(bool value);
    [CompilerGeneratedAttribute]
public DiffLogModel get_diffModel();
    [CompilerGeneratedAttribute]
public void set_diffModel(DiffLogModel value);
    [CompilerGeneratedAttribute]
internal Action get_RemoveCacheFunc();
    [CompilerGeneratedAttribute]
internal void set_RemoveCacheFunc(Action value);
    public sealed virtual void AddQueue();
    public virtual int ExecuteCommand();
    public virtual string ToSqlString();
    public virtual KeyValuePair`2<string, List`1<SugarParameter>> ToSql();
    [AsyncStateMachineAttribute("SqlSugar.InsertableProvider`1/<ExecuteReturnPkListAsync>d__92`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<Type>> ExecuteReturnPkListAsync();
    public virtual List`1<Type> ExecuteReturnPkList();
    public virtual int ExecuteReturnIdentity();
    public virtual long ExecuteReturnBigIdentity();
    public virtual long ExecuteReturnSnowflakeId();
    public sealed virtual List`1<long> ExecuteReturnSnowflakeIdList();
    public sealed virtual Task`1<long> ExecuteReturnSnowflakeIdAsync(CancellationToken token);
    [AsyncStateMachineAttribute("SqlSugar.InsertableProvider`1/<ExecuteReturnSnowflakeIdAsync>d__99")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<long> ExecuteReturnSnowflakeIdAsync();
    [AsyncStateMachineAttribute("SqlSugar.InsertableProvider`1/<ExecuteReturnSnowflakeIdListAsync>d__100")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<long>> ExecuteReturnSnowflakeIdListAsync();
    public sealed virtual Task`1<List`1<long>> ExecuteReturnSnowflakeIdListAsync(CancellationToken token);
    public virtual T ExecuteReturnEntity();
    public virtual bool ExecuteCommandIdentityIntoEntity();
    public sealed virtual Task`1<int> ExecuteCommandAsync(CancellationToken token);
    [AsyncStateMachineAttribute("SqlSugar.InsertableProvider`1/<ExecuteCommandAsync>d__105")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> ExecuteCommandAsync();
    public sealed virtual Task`1<int> ExecuteReturnIdentityAsync(CancellationToken token);
    [AsyncStateMachineAttribute("SqlSugar.InsertableProvider`1/<ExecuteReturnIdentityAsync>d__107")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> ExecuteReturnIdentityAsync();
    public sealed virtual T ExecuteReturnEntity(bool isIncludesAllFirstLayer);
    [AsyncStateMachineAttribute("SqlSugar.InsertableProvider`1/<ExecuteReturnEntityAsync>d__109")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<T> ExecuteReturnEntityAsync();
    [AsyncStateMachineAttribute("SqlSugar.InsertableProvider`1/<ExecuteReturnEntityAsync>d__110")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<T> ExecuteReturnEntityAsync(bool isIncludesAllFirstLayer);
    [AsyncStateMachineAttribute("SqlSugar.InsertableProvider`1/<ExecuteCommandIdentityIntoEntityAsync>d__111")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<bool> ExecuteCommandIdentityIntoEntityAsync();
    public sealed virtual Task`1<long> ExecuteReturnBigIdentityAsync(CancellationToken token);
    [AsyncStateMachineAttribute("SqlSugar.InsertableProvider`1/<ExecuteReturnBigIdentityAsync>d__113")]
[DebuggerStepThroughAttribute]
public virtual Task`1<long> ExecuteReturnBigIdentityAsync();
    public sealed virtual InsertablePage`1<T> PageSize(int pageSize);
    public sealed virtual IParameterInsertable`1<T> UseParameter();
    public sealed virtual IInsertable`1<T> AsType(Type tableNameType);
    public sealed virtual IInsertable`1<T> AS(string tableName);
    public sealed virtual IInsertable`1<T> IgnoreColumns(Expression`1<Func`2<T, object>> columns);
    public sealed virtual IInsertable`1<T> IgnoreColumns(String[] columns);
    public sealed virtual IInsertable`1<T> IgnoreColumnsNull(bool isIgnoreNull);
    public sealed virtual IInsertable`1<T> PostgreSQLConflictNothing(String[] columns);
    public sealed virtual IInsertable`1<T> MySqlIgnore();
    public sealed virtual IInsertable`1<T> InsertColumns(Expression`1<Func`2<T, object>> columns);
    public sealed virtual IInsertable`1<T> InsertColumns(String[] columns);
    public sealed virtual IInsertable`1<T> With(string lockString);
    public sealed virtual IInsertable`1<T> OffIdentity(bool isSetOn);
    public sealed virtual IInsertable`1<T> OffIdentity();
    public sealed virtual IInsertable`1<T> IgnoreColumns(bool ignoreNullColumn, bool isOffIdentity);
    public sealed virtual IInsertable`1<T> RemoveDataCache();
    public sealed virtual IInsertable`1<T> RemoveDataCache(string likeString);
    public sealed virtual MySqlBlukCopy`1<T> UseMySql();
    public sealed virtual SqlServerBlukCopy UseSqlServer();
    public sealed virtual OracleBlukCopy UseOracle();
    public sealed virtual IInsertable`1<T> EnableDiffLogEventIF(bool isDiffLogEvent, object diffLogBizData);
    public sealed virtual IInsertable`1<T> EnableDiffLogEvent(object businessData);
    public sealed virtual ISubInsertable`1<T> AddSubList(Expression`1<Func`2<T, object>> items);
    public sealed virtual ISubInsertable`1<T> AddSubList(Expression`1<Func`2<T, SubInsertTree>> tree);
    public sealed virtual SplitInsertable`1<T> SplitTable(SplitType splitType);
    public sealed virtual SplitInsertable`1<T> SplitTable();
    [CompilerGeneratedAttribute]
private bool <PreToSql>b__4_2(IgnoreColumn it);
    [CompilerGeneratedAttribute]
private bool <PreToSql>b__4_5(IgnoreColumn it);
    [CompilerGeneratedAttribute]
private bool <GetDiffTableBySql>b__20_2(EntityColumnInfo it);
    [CompilerGeneratedAttribute]
private DiffLogColumnInfo <GetDiffTableBySql>b__20_9(EntityColumnInfo it);
    [CompilerGeneratedAttribute]
private List`1<Type> <ExecuteReturnPkListAsync>b__92_0();
    [CompilerGeneratedAttribute]
private void <RemoveDataCache>b__129_0();
}
public class SqlSugar.InsertBuilder : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ILambdaExpressions <LambdaExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private StringBuilder <sql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SugarParameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableWithString>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DbColumnInfo> <DbColumnInfoList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNoInsertNull>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsReturnIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <EntityInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, int> <OracleSeqInfoList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsBlukCopy>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsOleDb>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`3<string, string, string> <ConvertInsertReturnIdFunc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNoPage>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsReturnPkList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AsName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsOffIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <MySqlIgnore>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsWithAttr>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <ConflictNothing>k__BackingField;
    private int GetDbColumnIndex;
    public SqlSugarProvider Context { get; public set; }
    public ILambdaExpressions LambdaExpressions { get; public set; }
    public ISqlBuilder Builder { get; public set; }
    public StringBuilder sql { get; public set; }
    public List`1<SugarParameter> Parameters { get; public set; }
    public string TableWithString { get; public set; }
    public List`1<DbColumnInfo> DbColumnInfoList { get; public set; }
    public bool IsNoInsertNull { get; public set; }
    public bool IsReturnIdentity { get; public set; }
    public EntityInfo EntityInfo { get; public set; }
    public Dictionary`2<string, int> OracleSeqInfoList { get; public set; }
    public bool IsBlukCopy { get; public set; }
    public bool IsOleDb { get; public set; }
    public Func`3<string, string, string> ConvertInsertReturnIdFunc { get; public set; }
    public bool IsNoPage { get; public set; }
    public bool IsReturnPkList { get; public set; }
    public string AsName { get; public set; }
    public bool IsOffIdentity { get; public set; }
    public string SqlTemplate { get; }
    public string SqlTemplateBatch { get; }
    public string SqlTemplateBatchSelect { get; }
    public string SqlTemplateBatchUnion { get; }
    public string GetTableNameString { get; }
    public bool MySqlIgnore { get; internal set; }
    public bool IsWithAttr { get; internal set; }
    public String[] ConflictNothing { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public ILambdaExpressions get_LambdaExpressions();
    [CompilerGeneratedAttribute]
public void set_LambdaExpressions(ILambdaExpressions value);
    [CompilerGeneratedAttribute]
public ISqlBuilder get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(ISqlBuilder value);
    [CompilerGeneratedAttribute]
public sealed virtual StringBuilder get_sql();
    [CompilerGeneratedAttribute]
public sealed virtual void set_sql(StringBuilder value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<SugarParameter> get_Parameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parameters(List`1<SugarParameter> value);
    [CompilerGeneratedAttribute]
public string get_TableWithString();
    [CompilerGeneratedAttribute]
public void set_TableWithString(string value);
    [CompilerGeneratedAttribute]
public List`1<DbColumnInfo> get_DbColumnInfoList();
    [CompilerGeneratedAttribute]
public void set_DbColumnInfoList(List`1<DbColumnInfo> value);
    [CompilerGeneratedAttribute]
public bool get_IsNoInsertNull();
    [CompilerGeneratedAttribute]
public void set_IsNoInsertNull(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsReturnIdentity();
    [CompilerGeneratedAttribute]
public void set_IsReturnIdentity(bool value);
    [CompilerGeneratedAttribute]
public EntityInfo get_EntityInfo();
    [CompilerGeneratedAttribute]
public void set_EntityInfo(EntityInfo value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_OracleSeqInfoList();
    [CompilerGeneratedAttribute]
public void set_OracleSeqInfoList(Dictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public bool get_IsBlukCopy();
    [CompilerGeneratedAttribute]
public void set_IsBlukCopy(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsOleDb();
    [CompilerGeneratedAttribute]
public virtual void set_IsOleDb(bool value);
    [CompilerGeneratedAttribute]
public virtual Func`3<string, string, string> get_ConvertInsertReturnIdFunc();
    [CompilerGeneratedAttribute]
public virtual void set_ConvertInsertReturnIdFunc(Func`3<string, string, string> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNoPage();
    [CompilerGeneratedAttribute]
public virtual void set_IsNoPage(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsReturnPkList();
    [CompilerGeneratedAttribute]
public virtual void set_IsReturnPkList(bool value);
    [CompilerGeneratedAttribute]
public string get_AsName();
    [CompilerGeneratedAttribute]
public void set_AsName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsOffIdentity();
    [CompilerGeneratedAttribute]
public void set_IsOffIdentity(bool value);
    public virtual string get_SqlTemplate();
    public virtual string get_SqlTemplateBatch();
    public virtual string get_SqlTemplateBatchSelect();
    public virtual string get_SqlTemplateBatchUnion();
    public virtual void ActionMinDate();
    public virtual void Clear();
    public virtual string get_GetTableNameString();
    [CompilerGeneratedAttribute]
public bool get_MySqlIgnore();
    [CompilerGeneratedAttribute]
internal void set_MySqlIgnore(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsWithAttr();
    [CompilerGeneratedAttribute]
internal void set_IsWithAttr(bool value);
    [CompilerGeneratedAttribute]
public String[] get_ConflictNothing();
    [CompilerGeneratedAttribute]
public void set_ConflictNothing(String[] value);
    public virtual ExpressionResult GetExpressionValue(Expression expression, ResolveExpressType resolveType);
    public virtual string ToSqlString();
    public virtual object FormatValue(object value);
    public virtual string FormatDateTimeOffset(object value);
    public virtual string GetDbColumn(DbColumnInfo columnInfo, object name);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__98_2(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__98_3(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__98_4(DbColumnInfo it);
}
public class SqlSugar.InsertMethodInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <objectValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <pageSize>k__BackingField;
    internal SqlSugarProvider Context { get; internal set; }
    internal MethodInfo MethodInfo { get; internal set; }
    internal object objectValue { get; internal set; }
    internal int pageSize { get; internal set; }
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
internal void set_MethodInfo(MethodInfo value);
    [CompilerGeneratedAttribute]
internal object get_objectValue();
    [CompilerGeneratedAttribute]
internal void set_objectValue(object value);
    [CompilerGeneratedAttribute]
internal int get_pageSize();
    [CompilerGeneratedAttribute]
internal void set_pageSize(int value);
    public int ExecuteCommand();
    public InsertMethodInfo PageSize(int pageSize);
    [AsyncStateMachineAttribute("SqlSugar.InsertMethodInfo/<ExecuteCommandAsync>d__18")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
    public int ExecuteReturnIdentity();
    [AsyncStateMachineAttribute("SqlSugar.InsertMethodInfo/<ExecuteReturnIdentityAsync>d__20")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteReturnIdentityAsync();
    public CommonMethodInfo AS(string tableName);
    public CommonMethodInfo EnableDiffLogEvent(object businessData);
    public CommonMethodInfo IgnoreColumns(String[] ignoreColumns);
    public CommonMethodInfo IgnoreColumns(bool ignoreNullColumn);
    public SplitMethodInfo SplitTable();
    public long ExecuteReturnSnowflakeId();
    [AsyncStateMachineAttribute("SqlSugar.InsertMethodInfo/<ExecuteReturnSnowflakeIdAsync>d__27")]
[DebuggerStepThroughAttribute]
public Task`1<long> ExecuteReturnSnowflakeIdAsync();
    private object GetPageInsertable(object inertable);
}
public class SqlSugar.InsertNavMethodInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <MethodInfos>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    internal object MethodInfos { get; internal set; }
    internal SqlSugarProvider Context { get; internal set; }
    [CompilerGeneratedAttribute]
internal object get_MethodInfos();
    [CompilerGeneratedAttribute]
internal void set_MethodInfos(object value);
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    public InsertNavMethodInfo IncludeByNameString(string navMemberName, InsertNavOptions insertNavOptions);
    public InsertNavMethodInfo ThenIncludeByNameString(string navMemberName, InsertNavOptions insertNavOptions);
    [AsyncStateMachineAttribute("SqlSugar.InsertNavMethodInfo/<ExecuteCommandAsync>d__10")]
[DebuggerStepThroughAttribute]
public Task`1<bool> ExecuteCommandAsync();
    public bool ExecuteCommand();
}
public class SqlSugar.InsertNavOptions : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <OneToManyIfExistsNoInsert>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ManyToManyNoDeleteMap>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <ManyToManySaveMappingTemplate>k__BackingField;
    public bool OneToManyIfExistsNoInsert { get; public set; }
    public bool ManyToManyNoDeleteMap { get; public set; }
    public object ManyToManySaveMappingTemplate { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_OneToManyIfExistsNoInsert();
    [CompilerGeneratedAttribute]
public void set_OneToManyIfExistsNoInsert(bool value);
    [CompilerGeneratedAttribute]
public bool get_ManyToManyNoDeleteMap();
    [CompilerGeneratedAttribute]
public void set_ManyToManyNoDeleteMap(bool value);
    [CompilerGeneratedAttribute]
public object get_ManyToManySaveMappingTemplate();
    [CompilerGeneratedAttribute]
public void set_ManyToManySaveMappingTemplate(object value);
}
public class SqlSugar.InsertNavProvider`2 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private InsertNavRootOptions <_RootOptions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<Root> <_Roots>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<object> <_ParentList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<object> <_RootList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <_ParentEntity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityColumnInfo <_ParentPkColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <_Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<NavigateType> <_NavigateType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsFirst>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private InsertNavOptions <_navOptions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNav>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NavContext <NavContext>k__BackingField;
    public InsertNavRootOptions _RootOptions { get; public set; }
    public List`1<Root> _Roots { get; public set; }
    public List`1<object> _ParentList { get; public set; }
    public List`1<object> _RootList { get; public set; }
    public EntityInfo _ParentEntity { get; public set; }
    public EntityColumnInfo _ParentPkColumn { get; public set; }
    public SqlSugarProvider _Context { get; public set; }
    public Nullable`1<NavigateType> _NavigateType { get; public set; }
    public bool IsFirst { get; public set; }
    public InsertNavOptions _navOptions { get; public set; }
    public bool IsNav { get; internal set; }
    internal NavContext NavContext { get; internal set; }
    [CompilerGeneratedAttribute]
public InsertNavRootOptions get__RootOptions();
    [CompilerGeneratedAttribute]
public void set__RootOptions(InsertNavRootOptions value);
    [CompilerGeneratedAttribute]
public List`1<Root> get__Roots();
    [CompilerGeneratedAttribute]
public void set__Roots(List`1<Root> value);
    [CompilerGeneratedAttribute]
public List`1<object> get__ParentList();
    [CompilerGeneratedAttribute]
public void set__ParentList(List`1<object> value);
    [CompilerGeneratedAttribute]
public List`1<object> get__RootList();
    [CompilerGeneratedAttribute]
public void set__RootList(List`1<object> value);
    [CompilerGeneratedAttribute]
public EntityInfo get__ParentEntity();
    [CompilerGeneratedAttribute]
public void set__ParentEntity(EntityInfo value);
    [CompilerGeneratedAttribute]
public EntityColumnInfo get__ParentPkColumn();
    [CompilerGeneratedAttribute]
public void set__ParentPkColumn(EntityColumnInfo value);
    [CompilerGeneratedAttribute]
public SqlSugarProvider get__Context();
    [CompilerGeneratedAttribute]
public void set__Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public Nullable`1<NavigateType> get__NavigateType();
    [CompilerGeneratedAttribute]
public void set__NavigateType(Nullable`1<NavigateType> value);
    [CompilerGeneratedAttribute]
public bool get_IsFirst();
    [CompilerGeneratedAttribute]
public void set_IsFirst(bool value);
    [CompilerGeneratedAttribute]
public InsertNavOptions get__navOptions();
    [CompilerGeneratedAttribute]
public void set__navOptions(InsertNavOptions value);
    [CompilerGeneratedAttribute]
public bool get_IsNav();
    [CompilerGeneratedAttribute]
internal void set_IsNav(bool value);
    [CompilerGeneratedAttribute]
internal NavContext get_NavContext();
    [CompilerGeneratedAttribute]
internal void set_NavContext(NavContext value);
    public InsertNavProvider`2<Root, Root> AsNav();
    public InsertNavProvider`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, TChild>> expression, InsertNavOptions options);
    public InsertNavProvider`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, List`1<TChild>>> expression, InsertNavOptions options);
    public InsertNavProvider`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, TChild>> expression);
    public InsertNavProvider`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, List`1<TChild>>> expression);
    private InsertNavProvider`2<Root, TChild> _ThenInclude(Expression`1<Func`2<T, TChild>> expression);
    private InsertNavProvider`2<Root, TChild> _ThenInclude(Expression`1<Func`2<T, List`1<TChild>>> expression);
    private void AddContextInfo(string name, bool isRoot);
    private bool NotAny(string name);
    private static bool IsDefaultValue(object pvValue);
    private void InitParentList();
    private InsertNavProvider`2<Root, TChild> GetResult();
    private List`1<Type> GetRootList(List`1<Type> datas);
    private void InsertIdentity(List`1<Type> datas);
    private EntityColumnInfo GetPkColumnByNav(EntityInfo entity, EntityColumnInfo nav);
    private EntityColumnInfo GetPkColumnByNav2(EntityInfo entity, EntityColumnInfo nav);
    private EntityColumnInfo GetFKColumnByNav(EntityInfo entity, EntityColumnInfo nav);
    private void InsertDatas(List`1<TChild> children, EntityColumnInfo pkColumn, EntityColumnInfo NavColumn);
    private void ClearPk(List`1<TChild> updateData, EntityColumnInfo pkColumn);
    private void InitData(EntityColumnInfo pkColumn, List`1<TChild> insertData);
    private void SetValue(EntityColumnInfo pkColumn, List`1<TChild> insertData, Func`1<object> value);
    private void SetError(EntityColumnInfo pkColumn, List`1<TChild> insertData);
    private void InsertManyToMany(string name, EntityColumnInfo nav);
    private void InertMappingWithTemplate(EntityInfo mappingEntity, EntityColumnInfo mappingA, EntityColumnInfo mappingB, List`1<Dictionary`2<string, object>> mappgingTables);
    private bool HasMappingTemplate(EntityInfo mappingEntity);
    private void SetMappingTableDefaultValue(EntityColumnInfo mappingPk, Dictionary`2<string, object> keyValuePairs);
    private void InsertOneToMany(string name, EntityColumnInfo nav);
    private bool GetIsTreeChild(EntityInfo parentEntity, EntityInfo thisEntity);
    private static bool ParentIsPk(EntityColumnInfo parentNavigateProperty);
    private EntityColumnInfo GetParentPkColumn();
    private EntityColumnInfo GetParentPkNavColumn(EntityColumnInfo nav);
    private void SetNewParent(EntityInfo entityInfo, EntityColumnInfo entityColumnInfo);
    private void InsertOneToOne(string name, EntityColumnInfo nav);
}
public class SqlSugar.InsertNavRootOptions : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <IgnoreColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <InsertColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDiffLogEvent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <DiffLogBizData>k__BackingField;
    public String[] IgnoreColumns { get; public set; }
    public String[] InsertColumns { get; public set; }
    public bool IsDiffLogEvent { get; public set; }
    public object DiffLogBizData { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_IgnoreColumns();
    [CompilerGeneratedAttribute]
public void set_IgnoreColumns(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_InsertColumns();
    [CompilerGeneratedAttribute]
public void set_InsertColumns(String[] value);
    [CompilerGeneratedAttribute]
public bool get_IsDiffLogEvent();
    [CompilerGeneratedAttribute]
public void set_IsDiffLogEvent(bool value);
    [CompilerGeneratedAttribute]
public object get_DiffLogBizData();
    [CompilerGeneratedAttribute]
public void set_DiffLogBizData(object value);
}
public class SqlSugar.InsertNavTask`2 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`1<InsertNavProvider`2<Root, T>> <PreFunc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NavContext <NavContext>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public Func`1<InsertNavProvider`2<Root, T>> PreFunc { get; public set; }
    internal NavContext NavContext { get; internal set; }
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public Func`1<InsertNavProvider`2<Root, T>> get_PreFunc();
    [CompilerGeneratedAttribute]
public void set_PreFunc(Func`1<InsertNavProvider`2<Root, T>> value);
    [CompilerGeneratedAttribute]
internal NavContext get_NavContext();
    [CompilerGeneratedAttribute]
internal void set_NavContext(NavContext value);
    public InsertNavTask`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, TChild>> expression);
    public InsertNavTask`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, List`1<TChild>>> expression);
    public InsertNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, TChild>> expression);
    public InsertNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, List`1<TChild>>> expression);
    public InsertNavTask`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, TChild>> expression, InsertNavOptions options);
    public InsertNavTask`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, List`1<TChild>>> expression, InsertNavOptions options);
    public InsertNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, TChild>> expression, InsertNavOptions options);
    public InsertNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, List`1<TChild>>> expression, InsertNavOptions options);
    public Root ExecuteReturnEntity();
    [AsyncStateMachineAttribute("SqlSugar.InsertNavTask`2/<ExecuteReturnEntityAsync>d__21")]
[DebuggerStepThroughAttribute]
public Task`1<Root> ExecuteReturnEntityAsync();
    public bool ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.InsertNavTask`2/<ExecuteCommandAsync>d__23")]
[DebuggerStepThroughAttribute]
public Task`1<bool> ExecuteCommandAsync();
    private InsertNavTask`2<Root, Root> AsNav();
    [CompilerGeneratedAttribute]
private void <ExecuteCommand>b__22_0();
    [AsyncStateMachineAttribute("SqlSugar.InsertNavTask`2/<<ExecuteCommandAsync>b__23_0>d")]
[DebuggerStepThroughAttribute]
[CompilerGeneratedAttribute]
private Task <ExecuteCommandAsync>b__23_0();
    [CompilerGeneratedAttribute]
private InsertNavProvider`2<Root, Root> <AsNav>b__24_0();
}
public class SqlSugar.InsertNavTaskInit`2 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private InsertNavProvider`2<Root, Root> <insertNavProvider>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NavContext <NavContext>k__BackingField;
    internal SqlSugarProvider Context { get; internal set; }
    internal InsertNavProvider`2<Root, Root> insertNavProvider { get; internal set; }
    internal NavContext NavContext { get; internal set; }
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal InsertNavProvider`2<Root, Root> get_insertNavProvider();
    [CompilerGeneratedAttribute]
internal void set_insertNavProvider(InsertNavProvider`2<Root, Root> value);
    [CompilerGeneratedAttribute]
internal NavContext get_NavContext();
    [CompilerGeneratedAttribute]
internal void set_NavContext(NavContext value);
    public InsertNavMethodInfo IncludeByNameString(string navMemberName, UpdateNavOptions updateNavOptions);
    public InsertNavMethodInfo IncludesAllFirstLayer(String[] ignoreColumns);
    public InsertNavMethodInfo IncludesAllFirstLayer(InsertNavOptions insertNavOptions, String[] ignoreColumns);
    public InsertNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, TChild>> expression);
    public InsertNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, List`1<TChild>>> expression);
    public InsertNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, TChild>> expression, InsertNavOptions options);
    public InsertNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, List`1<TChild>>> expression, InsertNavOptions options);
}
public class SqlSugar.InstanceFactory : object {
    private static Assembly assembly;
    private static Dictionary`2<string, Type> typeCache;
    private static string _CustomDllName;
    private static List`1<string> CustomDlls;
    public static Assembly[] CustomAssemblies;
    public static string CustomDbName;
    public static string CustomNamespace;
    public static bool NoCache;
    public static bool IsWebFrom;
    public static string CustomDllName { get; public set; }
    private static InstanceFactory();
    public static string get_CustomDllName();
    public static void set_CustomDllName(string value);
    public static void RemoveCache();
    public static ISugarQueryable`1<T> GetQueryable(ConnectionConfig currentConnectionConfig);
    public static ISugarQueryable`2<T, T2> GetQueryable(ConnectionConfig currentConnectionConfig);
    public static ISugarQueryable`3<T, T2, T3> GetQueryable(ConnectionConfig currentConnectionConfig);
    public static ISugarQueryable`4<T, T2, T3, T4> GetQueryable(ConnectionConfig currentConnectionConfig);
    public static ISugarQueryable`5<T, T2, T3, T4, T5> GetQueryable(ConnectionConfig currentConnectionConfig);
    public static ISugarQueryable`6<T, T2, T3, T4, T5, T6> GetQueryable(ConnectionConfig currentConnectionConfig);
    public static ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GetQueryable(ConnectionConfig currentConnectionConfig);
    public static ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> GetQueryable(ConnectionConfig currentConnectionConfig);
    public static ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GetQueryable(ConnectionConfig currentConnectionConfig);
    public static ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GetQueryable(ConnectionConfig currentConnectionConfig);
    public static ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GetQueryable(ConnectionConfig currentConnectionConfig);
    public static ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GetQueryable(ConnectionConfig currentConnectionConfig);
    public static QueryBuilder GetQueryBuilderWithContext(ISqlSugarClient db);
    public static QueryBuilder GetQueryBuilder(ConnectionConfig currentConnectionConfig);
    public static InsertBuilder GetInsertBuilder(ConnectionConfig currentConnectionConfig);
    public static UpdateBuilder GetUpdateBuilder(ConnectionConfig currentConnectionConfig);
    public static DeleteBuilder GetDeleteBuilder(ConnectionConfig currentConnectionConfig);
    public static ILambdaExpressions GetLambdaExpressions(ConnectionConfig currentConnectionConfig);
    public static ISqlBuilder GetSqlBuilderWithContext(ISqlSugarClient db);
    public static ISqlBuilder GetSqlbuilder(ConnectionConfig currentConnectionConfig);
    public static UpdateableProvider`1<T> GetUpdateableProvider(ConnectionConfig currentConnectionConfig);
    public static DeleteableProvider`1<T> GetDeleteableProvider(ConnectionConfig currentConnectionConfig);
    public static InsertableProvider`1<T> GetInsertableProvider(ConnectionConfig currentConnectionConfig);
    private static bool IsCustomDb(ConnectionConfig currentConnectionConfig);
    public static IDbBind GetDbBind(ConnectionConfig currentConnectionConfig);
    public static IDbMaintenance GetDbMaintenance(ConnectionConfig currentConnectionConfig);
    public static IDbFirst GetDbFirst(ConnectionConfig currentConnectionConfig);
    public static ICodeFirst GetCodeFirst(ConnectionConfig currentConnectionConfig);
    public static IAdo GetAdo(ConnectionConfig currentConnectionConfig);
    private static string GetClassName(string type, string name);
    private static Restult CreateInstance(string className);
    private static Restult CreateInstance(string className);
    private static Restult CreateInstance(string className);
    private static Restult CreateInstance(string className);
    private static Restult CreateInstance(string className);
    private static Restult CreateInstance(string className);
    private static Restult CreateInstance(string className);
    private static Restult CreateInstance(string className);
    private static Restult CreateInstance(string className);
    private static Restult CreateInstance(string className);
    private static Restult CreateInstance(string className);
    private static Restult CreateInstance(string className);
    private static Restult CreateInstance(string className, Type[] types);
    private static Restult GetCacheInstance(string className, Type[] types);
    private static Restult NoCacheGetCacheInstance(string className, Type[] types);
    public static T CreateInstance(string className);
    private static T GetCacheInstance(string className);
    private static T NoCacheGetCacheInstance(string className);
    private static Type GetCustomDbType(string className, Type type);
    internal static Type GetCustomTypeByClass(string className);
    internal static Type GetCustomTypeByClass(string className, string customDllName);
    internal static Type GetCustomTypeByClass(string className);
    internal static Type GetCustomTypeByClass(string className, string customDllName);
}
public interface SqlSugar.IParameterInsertable`1 {
    public abstract virtual int ExecuteCommand();
    public abstract virtual Task`1<int> ExecuteCommandAsync();
}
public interface SqlSugar.IPropertyCallAdapter`1 {
    public abstract virtual object InvokeGet(TThis this);
}
public interface SqlSugar.IRazorService {
    public abstract virtual List`1<KeyValuePair`2<string, string>> GetClassStringList(string razorTemplate, List`1<RazorTableInfo> model);
}
public interface SqlSugar.IReportable`1 {
    public abstract virtual ISugarQueryable`1<T> ToQueryable();
    public abstract virtual ISugarQueryable`1<SingleColumnEntity`1<Y>> ToQueryable();
    public abstract virtual ISugarQueryable`1<SingleColumnEntity`1<Y>> ToQueryable(bool onlySelectEntity);
}
public interface SqlSugar.ISaveable`1 {
    public abstract virtual Task`1<int> ExecuteCommandAsync();
    public abstract virtual Task`1<T> ExecuteReturnEntityAsync();
    public abstract virtual Task`1<List`1<T>> ExecuteReturnListAsync();
    public abstract virtual int ExecuteCommand();
    public abstract virtual T ExecuteReturnEntity();
    public abstract virtual List`1<T> ExecuteReturnList();
    public abstract virtual ISaveable`1<T> InsertColumns(Expression`1<Func`2<T, object>> columns);
    public abstract virtual ISaveable`1<T> InsertIgnoreColumns(Expression`1<Func`2<T, object>> columns);
    public abstract virtual ISaveable`1<T> UpdateColumns(Expression`1<Func`2<T, object>> columns);
    public abstract virtual ISaveable`1<T> UpdateIgnoreColumns(Expression`1<Func`2<T, object>> columns);
    public abstract virtual ISaveable`1<T> UpdateWhereColumns(Expression`1<Func`2<T, object>> columns);
    public abstract virtual ISaveable`1<T> EnableDiffLogEvent(object businessData);
    public abstract virtual ISaveable`1<T> RemoveDataCache();
}
public interface SqlSugar.ISerializeService {
    public abstract virtual string SerializeObject(object value);
    public abstract virtual string SugarSerializeObject(object value);
    public abstract virtual T DeserializeObject(string value);
}
public interface SqlSugar.ISimpleClient`1 {
    public abstract virtual SimpleClient`1<T> CopyNew();
    public abstract virtual RepositoryType CopyNew(IServiceProvider serviceProvider);
    public abstract virtual RepositoryType CopyNew();
    public abstract virtual SimpleClient`1<ChangeType> Change();
    public abstract virtual RepositoryType ChangeRepository();
    public abstract virtual RepositoryType ChangeRepository(IServiceProvider serviceProvider);
    public abstract virtual IDeleteable`1<T> AsDeleteable();
    public abstract virtual IInsertable`1<T> AsInsertable(List`1<T> insertObjs);
    public abstract virtual IInsertable`1<T> AsInsertable(T insertObj);
    public abstract virtual IInsertable`1<T> AsInsertable(T[] insertObjs);
    public abstract virtual ISugarQueryable`1<T> AsQueryable();
    public abstract virtual ISqlSugarClient AsSugarClient();
    public abstract virtual ITenant AsTenant();
    public abstract virtual IUpdateable`1<T> AsUpdateable(List`1<T> updateObjs);
    public abstract virtual IUpdateable`1<T> AsUpdateable(T updateObj);
    public abstract virtual IUpdateable`1<T> AsUpdateable();
    public abstract virtual IUpdateable`1<T> AsUpdateable(T[] updateObjs);
    public abstract virtual int Count(Expression`1<Func`2<T, bool>> whereExpression);
    public abstract virtual int Count(List`1<IConditionalModel> conditionalModels);
    public abstract virtual bool Delete(Expression`1<Func`2<T, bool>> whereExpression);
    public abstract virtual bool Delete(List`1<IConditionalModel> conditionalModels);
    public abstract virtual bool Delete(T deleteObj);
    public abstract virtual bool Delete(List`1<T> deleteObjs);
    public abstract virtual bool DeleteById(object id);
    public abstract virtual bool DeleteByIds(Object[] ids);
    public abstract virtual T GetById(object id);
    public abstract virtual List`1<T> GetList();
    public abstract virtual List`1<T> GetList(Expression`1<Func`2<T, bool>> whereExpression);
    public abstract virtual List`1<T> GetList(List`1<IConditionalModel> conditionalList);
    public abstract virtual List`1<T> GetList(Expression`1<Func`2<T, bool>> whereExpression, List`1<OrderByModel> orderByModels);
    public abstract virtual List`1<T> GetList(List`1<IConditionalModel> conditionalList, List`1<OrderByModel> orderByModels);
    public abstract virtual List`1<T> GetPageList(Expression`1<Func`2<T, bool>> whereExpression, PageModel page);
    public abstract virtual List`1<T> GetPageList(Expression`1<Func`2<T, bool>> whereExpression, PageModel page, List`1<OrderByModel> orderByModels);
    public abstract virtual List`1<T> GetPageList(Expression`1<Func`2<T, bool>> whereExpression, PageModel page, Expression`1<Func`2<T, object>> orderByExpression, OrderByType orderByType);
    public abstract virtual List`1<T> GetPageList(List`1<IConditionalModel> conditionalList, PageModel page);
    public abstract virtual List`1<T> GetPageList(List`1<IConditionalModel> conditionalList, PageModel page, List`1<OrderByModel> orderByModels);
    public abstract virtual List`1<T> GetPageList(List`1<IConditionalModel> conditionalList, PageModel page, Expression`1<Func`2<T, object>> orderByExpression, OrderByType orderByType);
    public abstract virtual T GetSingle(Expression`1<Func`2<T, bool>> whereExpression);
    public abstract virtual T GetSingle(List`1<IConditionalModel> conditionalModels);
    public abstract virtual T GetFirst(Expression`1<Func`2<T, bool>> whereExpression);
    public abstract virtual T GetFirst(List`1<IConditionalModel> conditionalModels);
    public abstract virtual T GetFirst(List`1<IConditionalModel> conditionalModels, List`1<OrderByModel> orderByModels);
    public abstract virtual bool Insert(T insertObj);
    public abstract virtual bool InsertOrUpdate(T data);
    public abstract virtual bool InsertOrUpdate(List`1<T> datas);
    public abstract virtual bool InsertRange(List`1<T> insertObjs);
    public abstract virtual bool InsertRange(T[] insertObjs);
    public abstract virtual int InsertReturnIdentity(T insertObj);
    public abstract virtual long InsertReturnBigIdentity(T insertObj);
    public abstract virtual long InsertReturnSnowflakeId(T insertObj);
    public abstract virtual List`1<long> InsertReturnSnowflakeId(List`1<T> insertObjs);
    public abstract virtual T InsertReturnEntity(T insertObj);
    public abstract virtual bool IsAny(Expression`1<Func`2<T, bool>> whereExpression);
    public abstract virtual bool IsAny(List`1<IConditionalModel> conditionalModels);
    public abstract virtual bool Update(Expression`1<Func`2<T, T>> columns, Expression`1<Func`2<T, bool>> whereExpression);
    public abstract virtual bool UpdateSetColumnsTrue(Expression`1<Func`2<T, T>> columns, Expression`1<Func`2<T, bool>> whereExpression);
    public abstract virtual bool Update(T updateObj);
    public abstract virtual bool UpdateRange(List`1<T> updateObjs);
    public abstract virtual bool UpdateRange(T[] updateObjs);
    public abstract virtual Task`1<int> CountAsync(Expression`1<Func`2<T, bool>> whereExpression);
    public abstract virtual Task`1<bool> DeleteAsync(Expression`1<Func`2<T, bool>> whereExpression);
    public abstract virtual Task`1<bool> DeleteAsync(T deleteObj);
    public abstract virtual Task`1<bool> DeleteAsync(List`1<T> deleteObjs);
    public abstract virtual Task`1<bool> DeleteByIdAsync(object id);
    public abstract virtual Task`1<bool> DeleteByIdsAsync(Object[] ids);
    public abstract virtual Task`1<T> GetByIdAsync(object id);
    public abstract virtual Task`1<List`1<T>> GetListAsync();
    public abstract virtual Task`1<List`1<T>> GetListAsync(Expression`1<Func`2<T, bool>> whereExpression);
    public abstract virtual Task`1<List`1<T>> GetPageListAsync(Expression`1<Func`2<T, bool>> whereExpression, PageModel page);
    public abstract virtual Task`1<List`1<T>> GetPageListAsync(Expression`1<Func`2<T, bool>> whereExpression, PageModel page, Expression`1<Func`2<T, object>> orderByExpression, OrderByType orderByType);
    public abstract virtual Task`1<List`1<T>> GetPageListAsync(List`1<IConditionalModel> conditionalList, PageModel page);
    public abstract virtual Task`1<List`1<T>> GetPageListAsync(List`1<IConditionalModel> conditionalList, PageModel page, Expression`1<Func`2<T, object>> orderByExpression, OrderByType orderByType);
    public abstract virtual Task`1<T> GetSingleAsync(Expression`1<Func`2<T, bool>> whereExpression);
    public abstract virtual Task`1<T> GetFirstAsync(Expression`1<Func`2<T, bool>> whereExpression);
    public abstract virtual Task`1<bool> InsertAsync(T insertObj);
    public abstract virtual Task`1<bool> InsertOrUpdateAsync(T data);
    public abstract virtual Task`1<bool> InsertOrUpdateAsync(List`1<T> datas);
    public abstract virtual Task`1<bool> InsertRangeAsync(List`1<T> insertObjs);
    public abstract virtual Task`1<bool> InsertRangeAsync(T[] insertObjs);
    public abstract virtual Task`1<int> InsertReturnIdentityAsync(T insertObj);
    public abstract virtual Task`1<long> InsertReturnBigIdentityAsync(T insertObj);
    public abstract virtual Task`1<long> InsertReturnSnowflakeIdAsync(T insertObj);
    public abstract virtual Task`1<List`1<long>> InsertReturnSnowflakeIdAsync(List`1<T> insertObjs);
    public abstract virtual Task`1<T> InsertReturnEntityAsync(T insertObj);
    public abstract virtual Task`1<bool> IsAnyAsync(Expression`1<Func`2<T, bool>> whereExpression);
    public abstract virtual Task`1<bool> UpdateSetColumnsTrueAsync(Expression`1<Func`2<T, T>> columns, Expression`1<Func`2<T, bool>> whereExpression);
    public abstract virtual Task`1<bool> UpdateAsync(Expression`1<Func`2<T, T>> columns, Expression`1<Func`2<T, bool>> whereExpression);
    public abstract virtual Task`1<bool> UpdateAsync(T updateObj);
    public abstract virtual Task`1<bool> UpdateRangeAsync(List`1<T> updateObjs);
    public abstract virtual Task`1<bool> UpdateRangeAsync(T[] updateObjs);
    public abstract virtual Task`1<int> CountAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> DeleteAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> DeleteAsync(T deleteObj, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> DeleteAsync(List`1<T> deleteObjs, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> DeleteByIdAsync(object id, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> DeleteByIdsAsync(Object[] ids, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> GetByIdAsync(object id, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T>> GetListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T>> GetListAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T>> GetPageListAsync(Expression`1<Func`2<T, bool>> whereExpression, PageModel page, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T>> GetPageListAsync(Expression`1<Func`2<T, bool>> whereExpression, PageModel page, Expression`1<Func`2<T, object>> orderByExpression, OrderByType orderByType, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T>> GetPageListAsync(List`1<IConditionalModel> conditionalList, PageModel page, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T>> GetPageListAsync(List`1<IConditionalModel> conditionalList, PageModel page, Expression`1<Func`2<T, object>> orderByExpression, OrderByType orderByType, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> GetSingleAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> GetFirstAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> InsertAsync(T insertObj, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> InsertOrUpdateAsync(T data, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> InsertOrUpdateAsync(List`1<T> datas, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> InsertRangeAsync(List`1<T> insertObjs, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> InsertRangeAsync(T[] insertObjs, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertReturnIdentityAsync(T insertObj, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> InsertReturnBigIdentityAsync(T insertObj, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> InsertReturnSnowflakeIdAsync(T insertObj, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<long>> InsertReturnSnowflakeIdAsync(List`1<T> insertObjs, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> InsertReturnEntityAsync(T insertObj, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> IsAnyAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> UpdateSetColumnsTrueAsync(Expression`1<Func`2<T, T>> columns, Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> UpdateAsync(Expression`1<Func`2<T, T>> columns, Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> UpdateAsync(T updateObj, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> UpdateRangeAsync(List`1<T> updateObjs, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> UpdateRangeAsync(T[] updateObjs, CancellationToken cancellationToken);
}
public interface SqlSugar.ISplitTableService {
    public abstract virtual List`1<SplitTableInfo> GetAllTables(ISqlSugarClient db, EntityInfo EntityInfo, List`1<DbTableInfo> tableInfos);
    public abstract virtual string GetTableName(ISqlSugarClient db, EntityInfo EntityInfo);
    public abstract virtual string GetTableName(ISqlSugarClient db, EntityInfo EntityInfo, SplitType type);
    public abstract virtual string GetTableName(ISqlSugarClient db, EntityInfo entityInfo, SplitType splitType, object fieldValue);
    public abstract virtual object GetFieldValue(ISqlSugarClient db, EntityInfo entityInfo, SplitType splitType, object entityValue);
}
public interface SqlSugar.ISqlBuilder {
    public SqlSugarProvider Context { get; public set; }
    public CommandType CommandType { get; public set; }
    public SqlQueryBuilder SqlQueryBuilder { get; public set; }
    public QueryBuilder QueryBuilder { get; public set; }
    public InsertBuilder InsertBuilder { get; public set; }
    public DeleteBuilder DeleteBuilder { get; public set; }
    public UpdateBuilder UpdateBuilder { get; public set; }
    public string SqlParameterKeyWord { get; }
    public string SqlFalse { get; }
    public string SqlDateNow { get; }
    public string FullSqlDateNow { get; }
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    public string SqlSelectAll { get; }
    public bool SupportReadToken { get; public set; }
    public abstract virtual SqlSugarProvider get_Context();
    public abstract virtual void set_Context(SqlSugarProvider value);
    public abstract virtual CommandType get_CommandType();
    public abstract virtual void set_CommandType(CommandType value);
    public abstract virtual string AppendWhereOrAnd(bool isWhere, string sqlString);
    public abstract virtual string AppendHaving(string sqlString);
    public abstract virtual SqlQueryBuilder get_SqlQueryBuilder();
    public abstract virtual void set_SqlQueryBuilder(SqlQueryBuilder value);
    public abstract virtual QueryBuilder get_QueryBuilder();
    public abstract virtual void set_QueryBuilder(QueryBuilder value);
    public abstract virtual InsertBuilder get_InsertBuilder();
    public abstract virtual void set_InsertBuilder(InsertBuilder value);
    public abstract virtual DeleteBuilder get_DeleteBuilder();
    public abstract virtual void set_DeleteBuilder(DeleteBuilder value);
    public abstract virtual UpdateBuilder get_UpdateBuilder();
    public abstract virtual void set_UpdateBuilder(UpdateBuilder value);
    public abstract virtual string get_SqlParameterKeyWord();
    public abstract virtual string get_SqlFalse();
    public abstract virtual string get_SqlDateNow();
    public abstract virtual string get_FullSqlDateNow();
    public abstract virtual string get_SqlTranslationLeft();
    public abstract virtual string get_SqlTranslationRight();
    public abstract virtual string get_SqlSelectAll();
    public abstract virtual void ChangeJsonType(SugarParameter paramter);
    public abstract virtual string GetTranslationTableName(string name);
    public abstract virtual string GetTranslationColumnName(string entityName, string propertyName);
    public abstract virtual string GetTranslationColumnName(string propertyName);
    public abstract virtual string GetNoTranslationColumnName(string name);
    public abstract virtual string GetPackTable(string sql, string shortName);
    public abstract virtual string GetDefaultShortName();
    public abstract virtual string GetWhere(string fieldName, string conditionalType, Nullable`1<int> parameterIndex);
    public abstract virtual string GetUnionAllSql(List`1<string> sqlList);
    public abstract virtual string GetUnionSql(List`1<string> sqlList);
    public abstract virtual void RepairReplicationParameters(String& appendSql, SugarParameter[] parameters, int addIndex);
    public abstract virtual KeyValuePair`2<string, SugarParameter[]> ConditionalModelToSql(List`1<IConditionalModel> models, int beginIndex);
    public abstract virtual string GetUnionFomatSql(string sql);
    public abstract virtual Type GetNullType(string tableName, string columnName);
    public abstract virtual string RemoveParentheses(string sql);
    public abstract virtual string RemoveN(string sql);
    public abstract virtual void FormatSaveQueueSql(StringBuilder sqlBuilder);
    public abstract virtual bool get_SupportReadToken();
    public abstract virtual void set_SupportReadToken(bool value);
    public abstract virtual Task`1<bool> GetReaderByToken(IDataReader dataReader, CancellationToken cancellationToken);
    public abstract virtual KeyValuePair`2<string, SugarParameter[]> OrderByModelToSql(List`1<OrderByModel> models);
    public abstract virtual KeyValuePair`2<string, SugarParameter[]> GroupByModelToSql(List`1<GroupByModel> models);
    public abstract virtual KeyValuePair`2<string, SugarParameter[]> SelectModelToSql(List`1<SelectModel> models);
    public abstract virtual KeyValuePair`2<string, SugarParameter[]> FuncModelToSql(IFuncModel model);
}
public interface SqlSugar.ISqlSugarClient {
    public MappingTableList MappingTables { get; public set; }
    public MappingColumnList MappingColumns { get; public set; }
    public IgnoreColumnList IgnoreColumns { get; public set; }
    public IgnoreColumnList IgnoreInsertColumns { get; public set; }
    public Dictionary`2<string, object> TempItems { get; public set; }
    public ConfigQuery ConfigQuery { get; public set; }
    public bool IsSystemTablesConfig { get; }
    public Guid ContextID { get; public set; }
    public ConnectionConfig CurrentConnectionConfig { get; public set; }
    public IAdo Ado { get; }
    public AopProvider Aop { get; }
    public ICodeFirst CodeFirst { get; }
    public IDbFirst DbFirst { get; }
    public IDbMaintenance DbMaintenance { get; }
    public EntityMaintenance EntityMaintenance { get; public set; }
    public QueryFilterProvider QueryFilter { get; public set; }
    public IContextMethods Utilities { get; public set; }
    public SugarActionType SugarActionType { get; public set; }
    public QueueList Queues { get; public set; }
    public SugarCacheProvider DataCache { get; }
    public abstract virtual MappingTableList get_MappingTables();
    public abstract virtual void set_MappingTables(MappingTableList value);
    public abstract virtual MappingColumnList get_MappingColumns();
    public abstract virtual void set_MappingColumns(MappingColumnList value);
    public abstract virtual IgnoreColumnList get_IgnoreColumns();
    public abstract virtual void set_IgnoreColumns(IgnoreColumnList value);
    public abstract virtual IgnoreColumnList get_IgnoreInsertColumns();
    public abstract virtual void set_IgnoreInsertColumns(IgnoreColumnList value);
    public abstract virtual Dictionary`2<string, object> get_TempItems();
    public abstract virtual void set_TempItems(Dictionary`2<string, object> value);
    public abstract virtual ConfigQuery get_ConfigQuery();
    public abstract virtual void set_ConfigQuery(ConfigQuery value);
    public abstract virtual bool get_IsSystemTablesConfig();
    public abstract virtual Guid get_ContextID();
    public abstract virtual void set_ContextID(Guid value);
    public abstract virtual ConnectionConfig get_CurrentConnectionConfig();
    public abstract virtual void set_CurrentConnectionConfig(ConnectionConfig value);
    public abstract virtual IAdo get_Ado();
    public abstract virtual AopProvider get_Aop();
    public abstract virtual ICodeFirst get_CodeFirst();
    public abstract virtual IDbFirst get_DbFirst();
    public abstract virtual IDbMaintenance get_DbMaintenance();
    public abstract virtual EntityMaintenance get_EntityMaintenance();
    public abstract virtual void set_EntityMaintenance(EntityMaintenance value);
    public abstract virtual QueryFilterProvider get_QueryFilter();
    public abstract virtual void set_QueryFilter(QueryFilterProvider value);
    public abstract virtual IContextMethods get_Utilities();
    public abstract virtual void set_Utilities(IContextMethods value);
    public abstract virtual SugarActionType get_SugarActionType();
    public abstract virtual void set_SugarActionType(SugarActionType value);
    public abstract virtual DeleteMethodInfo DeleteableByObject(object singleEntityObjectOrListObject);
    public abstract virtual IDeleteable`1<T> Deleteable();
    public abstract virtual IDeleteable`1<T> Deleteable(object primaryKeyValue);
    public abstract virtual IDeleteable`1<T> Deleteable(Object[] primaryKeyValues);
    public abstract virtual IDeleteable`1<T> Deleteable(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual IDeleteable`1<T> Deleteable(List`1<object> pkValue);
    public abstract virtual IDeleteable`1<T> Deleteable(List`1<T> deleteObjs);
    public abstract virtual IDeleteable`1<T> Deleteable(T deleteObj);
    public abstract virtual Task`1<SugarAsyncLock> AsyncLock(int timeOutSeconds);
    public abstract virtual DynamicBuilder DynamicBuilder();
    public abstract virtual void ClearTracking();
    public abstract virtual void Tracking(T data);
    public abstract virtual void Tracking(List`1<T> data);
    public abstract virtual SqlSugarClient CopyNew();
    public abstract virtual T CreateContext(bool isTran);
    public abstract virtual SugarUnitOfWork CreateContext(bool isTran);
    public abstract virtual SplitTableContext SplitHelper(Type entityType);
    public abstract virtual SplitTableContext SplitHelper();
    public abstract virtual SplitTableContextResult`1<T> SplitHelper(T data);
    public abstract virtual SplitTableContextResult`1<T> SplitHelper(List`1<T> data);
    public abstract virtual DateTime GetDate();
    public abstract virtual SimpleClient`1<T> GetSimpleClient();
    public abstract virtual RepositoryType GetRepository();
    public abstract virtual void InitMappingInfo(Type type);
    public abstract virtual void InitMappingInfo();
    public abstract virtual void Open();
    public abstract virtual void Close();
    public abstract virtual ITenant AsTenant();
    public abstract virtual IInsertable`1<T> Insertable(Dictionary`2<string, object> columnDictionary);
    public abstract virtual IInsertable`1<T> Insertable(object insertDynamicObject);
    public abstract virtual IInsertable`1<T> Insertable(List`1<T> insertObjs);
    public abstract virtual IInsertable`1<T> Insertable(T insertObj);
    public abstract virtual IInsertable`1<T> Insertable(T[] insertObjs);
    public abstract virtual InsertMethodInfo InsertableByObject(object singleEntityObjectOrListObject);
    public abstract virtual IInsertable`1<Dictionary`2<string, object>> InsertableByDynamic(object insertDynamicObject);
    public abstract virtual QueryMethodInfo QueryableByObject(Type entityType, string shortName);
    public abstract virtual QueryMethodInfo QueryableByObject(Type entityType);
    public abstract virtual ISugarQueryable`1<T> MasterQueryable();
    public abstract virtual ISugarQueryable`1<T> SlaveQueryable();
    public abstract virtual ISugarQueryable`1<T> SqlQueryable(string sql);
    public abstract virtual ISugarQueryable`1<ExpandoObject> Queryable(string tableName, string shortName);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Queryable(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Queryable(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, JoinQueryInfos>> joinExpression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Queryable(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Object[]>> joinExpression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Queryable(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Queryable(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, JoinQueryInfos>> joinExpression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Queryable(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Object[]>> joinExpression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Queryable(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Queryable(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, JoinQueryInfos>> joinExpression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Queryable(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, Object[]>> joinExpression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Queryable(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Queryable(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, JoinQueryInfos>> joinExpression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Queryable(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, Object[]>> joinExpression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Queryable(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Queryable(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, JoinQueryInfos>> joinExpression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Queryable(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, Object[]>> joinExpression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Queryable(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Queryable(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, JoinQueryInfos>> joinExpression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Queryable(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, Object[]>> joinExpression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Queryable(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Queryable(Expression`1<Func`7<T, T2, T3, T4, T5, T6, JoinQueryInfos>> joinExpression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Queryable(Expression`1<Func`7<T, T2, T3, T4, T5, T6, Object[]>> joinExpression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Queryable(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Queryable(Expression`1<Func`6<T, T2, T3, T4, T5, JoinQueryInfos>> joinExpression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Queryable(Expression`1<Func`6<T, T2, T3, T4, T5, Object[]>> joinExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(Expression`1<Func`5<T, T2, T3, T4, JoinQueryInfos>> joinExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(Expression`1<Func`5<T, T2, T3, T4, Object[]>> joinExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Queryable(Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Queryable(Expression`1<Func`4<T, T2, T3, JoinQueryInfos>> joinExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Queryable(Expression`1<Func`4<T, T2, T3, Object[]>> joinExpression);
    public abstract virtual ISugarQueryable`2<T, T2> Queryable(Expression`1<Func`3<T, T2, bool>> joinExpression);
    public abstract virtual ISugarQueryable`2<T, T2> Queryable(Expression`1<Func`3<T, T2, JoinQueryInfos>> joinExpression);
    public abstract virtual ISugarQueryable`2<T, T2> Queryable(Expression`1<Func`3<T, T2, Object[]>> joinExpression);
    public abstract virtual ISugarQueryable`2<T, T2> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public abstract virtual ISugarQueryable`2<T, T2> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, JoinType joinType, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, ISugarQueryable`1<T3> joinQueryable3, JoinType joinType1, Expression`1<Func`4<T, T2, T3, bool>> joinExpression1, JoinType joinType2, Expression`1<Func`4<T, T2, T3, bool>> joinExpression2);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, ISugarQueryable`1<T3> joinQueryable3, ISugarQueryable`1<T4> joinQueryable4, JoinType joinType1, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression1, JoinType joinType2, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression2, JoinType joinType3, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression4);
    public abstract virtual ISugarQueryable`1<T> Queryable();
    public abstract virtual ISugarQueryable`1<T> Queryable(ISugarQueryable`1<T> queryable);
    public abstract virtual ISugarQueryable`1<T> Queryable(ISugarQueryable`1<T> queryable, string shortName);
    public abstract virtual ISugarQueryable`1<T> Queryable(string shortName);
    public abstract virtual GridSaveProvider`1<T> GridSave(List`1<T> saveList);
    public abstract virtual GridSaveProvider`1<T> GridSave(List`1<T> oldList, List`1<T> saveList);
    public abstract virtual IStorageable`1<T> Storageable(T[] dataList);
    public abstract virtual IStorageable`1<T> Storageable(IList`1<T> dataList);
    public abstract virtual StorageableDataTable Storageable(List`1<Dictionary`2<string, object>> dictionaryList, string tableName);
    public abstract virtual StorageableDataTable Storageable(Dictionary`2<string, object> dictionary, string tableName);
    public abstract virtual IStorageable`1<T> Storageable(List`1<T> dataList);
    public abstract virtual IStorageable`1<T> Storageable(T data);
    public abstract virtual StorageableDataTable Storageable(DataTable data);
    [ObsoleteAttribute("use Storageable")]
public abstract virtual ISaveable`1<T> Saveable(List`1<T> saveObjects);
    [ObsoleteAttribute("use Storageable")]
public abstract virtual ISaveable`1<T> Saveable(T saveObject);
    public abstract virtual StorageableMethodInfo StorageableByObject(object singleEntityObjectOrListObject);
    public abstract virtual QueueList get_Queues();
    public abstract virtual void set_Queues(QueueList value);
    public abstract virtual void AddQueue(string sql, object parsmeters);
    public abstract virtual void AddQueue(string sql, List`1<SugarParameter> parsmeters);
    public abstract virtual void AddQueue(string sql, SugarParameter parsmeter);
    public abstract virtual int SaveQueues(bool isTran);
    public abstract virtual Tuple`7<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>, List`1<T7>> SaveQueues(bool isTran);
    public abstract virtual Tuple`6<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>> SaveQueues(bool isTran);
    public abstract virtual Tuple`5<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> SaveQueues(bool isTran);
    public abstract virtual Tuple`4<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>> SaveQueues(bool isTran);
    public abstract virtual Tuple`3<List`1<T>, List`1<T2>, List`1<T3>> SaveQueues(bool isTran);
    public abstract virtual Tuple`2<List`1<T>, List`1<T2>> SaveQueues(bool isTran);
    public abstract virtual List`1<T> SaveQueues(bool isTran);
    public abstract virtual Task`1<int> SaveQueuesAsync(bool isTran);
    public abstract virtual Task`1<Tuple`7<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>, List`1<T7>>> SaveQueuesAsync(bool isTran);
    public abstract virtual Task`1<Tuple`6<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>>> SaveQueuesAsync(bool isTran);
    public abstract virtual Task`1<Tuple`5<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> SaveQueuesAsync(bool isTran);
    public abstract virtual Task`1<Tuple`4<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>>> SaveQueuesAsync(bool isTran);
    public abstract virtual Task`1<Tuple`3<List`1<T>, List`1<T2>, List`1<T3>>> SaveQueuesAsync(bool isTran);
    public abstract virtual Task`1<Tuple`2<List`1<T>, List`1<T2>>> SaveQueuesAsync(bool isTran);
    public abstract virtual Task`1<List`1<T>> SaveQueuesAsync(bool isTran);
    public abstract virtual ISugarQueryable`1<T> Union(List`1<ISugarQueryable`1<T>> queryables);
    public abstract virtual ISugarQueryable`1<T> Union(ISugarQueryable`1[] queryables);
    public abstract virtual ISugarQueryable`1<T> UnionAll(List`1<ISugarQueryable`1<T>> queryables);
    public abstract virtual ISugarQueryable`1<T> UnionAll(ISugarQueryable`1[] queryables);
    public abstract virtual UpdateMethodInfo UpdateableByObject(object singleEntityObjectOrListObject);
    public abstract virtual UpdateExpressionMethodInfo UpdateableByObject(Type entityType);
    public abstract virtual IUpdateable`1<T> Updateable();
    public abstract virtual IUpdateable`1<T> Updateable(Dictionary`2<string, object> columnDictionary);
    public abstract virtual IUpdateable`1<T> Updateable(object updateDynamicObject);
    public abstract virtual IUpdateable`1<T> Updateable(Expression`1<Func`2<T, bool>> columns);
    public abstract virtual IUpdateable`1<T> Updateable(Expression`1<Func`2<T, T>> columns);
    public abstract virtual IUpdateable`1<T> Updateable(List`1<T> UpdateObjs);
    public abstract virtual IUpdateable`1<T> Updateable(T UpdateObj);
    public abstract virtual IUpdateable`1<T> Updateable(T[] UpdateObjs);
    public abstract virtual IUpdateable`1<Dictionary`2<string, object>> UpdateableByDynamic(object updateDynamicObject);
    public abstract virtual IReportable`1<T> Reportable(T data);
    public abstract virtual IReportable`1<T> Reportable(List`1<T> list);
    public abstract virtual IReportable`1<T> Reportable(T[] array);
    public abstract virtual SugarCacheProvider get_DataCache();
    public abstract virtual IFastest`1<T> Fastest();
    public abstract virtual void ThenMapper(IEnumerable`1<T> list, Action`1<T> action);
    public abstract virtual Task ThenMapperAsync(IEnumerable`1<T> list, Func`2<T, Task> action);
    public abstract virtual InsertNavTaskInit`2<T, T> InsertNav(T data);
    public abstract virtual InsertNavTaskInit`2<T, T> InsertNav(List`1<T> datas);
    public abstract virtual InsertNavTaskInit`2<T, T> InsertNav(T data, InsertNavRootOptions rootOptions);
    public abstract virtual InsertNavTaskInit`2<T, T> InsertNav(List`1<T> datas, InsertNavRootOptions rootOptions);
    public abstract virtual DeleteNavTaskInit`2<T, T> DeleteNav(T data);
    public abstract virtual DeleteNavTaskInit`2<T, T> DeleteNav(List`1<T> datas);
    public abstract virtual DeleteNavTaskInit`2<T, T> DeleteNav(Expression`1<Func`2<T, bool>> whereExpression);
    public abstract virtual DeleteNavTaskInit`2<T, T> DeleteNav(T data, DeleteNavRootOptions options);
    public abstract virtual DeleteNavTaskInit`2<T, T> DeleteNav(List`1<T> datas, DeleteNavRootOptions options);
    public abstract virtual DeleteNavTaskInit`2<T, T> DeleteNav(Expression`1<Func`2<T, bool>> whereExpression, DeleteNavRootOptions options);
    public abstract virtual UpdateNavTaskInit`2<T, T> UpdateNav(T data);
    public abstract virtual UpdateNavTaskInit`2<T, T> UpdateNav(List`1<T> datas);
    public abstract virtual UpdateNavTaskInit`2<T, T> UpdateNav(T data, UpdateNavRootOptions rootOptions);
    public abstract virtual UpdateNavTaskInit`2<T, T> UpdateNav(List`1<T> datas, UpdateNavRootOptions rootOptions);
}
public interface SqlSugar.IStorageable`1 {
    public abstract virtual IStorageable`1<T> TableDataRange(Expression`1<Func`2<T, bool>> exp);
    public abstract virtual IStorageable`1<T> WhereColumns(Expression`1<Func`2<T, object>> columns);
    public abstract virtual IStorageable`1<T> WhereColumns(Expression`1<Func`2<T, object>> columns, Func`2<DateTime, string> formatTime);
    public abstract virtual IStorageable`1<T> WhereColumns(String[] columns);
    public abstract virtual IStorageable`1<T> WhereColumns(String[] columns, Func`2<DateTime, string> formatTime);
    public abstract virtual IStorageable`1<T> SplitInsert(Func`2<StorageableInfo`1<T>, bool> conditions, string message);
    public abstract virtual IStorageable`1<T> SplitUpdate(Func`2<StorageableInfo`1<T>, bool> conditions, string message);
    public abstract virtual IStorageable`1<T> Saveable(string inserMessage, string updateMessage);
    public abstract virtual IStorageable`1<T> SplitError(Func`2<StorageableInfo`1<T>, bool> conditions, string message);
    public abstract virtual IStorageable`1<T> SplitIgnore(Func`2<StorageableInfo`1<T>, bool> conditions, string message);
    public abstract virtual IStorageable`1<T> DisableFilters();
    public abstract virtual IStorageable`1<T> TranLock(DbLockType LockType);
    public abstract virtual IStorageable`1<T> TranLock(Nullable`1<DbLockType> LockType);
    public abstract virtual IStorageable`1<T> SplitDelete(Func`2<StorageableInfo`1<T>, bool> conditions, string message);
    public abstract virtual IStorageable`1<T> SplitOther(Func`2<StorageableInfo`1<T>, bool> conditions, string message);
    public abstract virtual StorageableResult`1<T> ToStorage();
    public abstract virtual StorageableResult`1<T> GetStorageableResult();
    public abstract virtual Task`1<StorageableResult`1<T>> ToStorageAsync();
    public abstract virtual IStorageable`1<T> As(string tableName);
    public abstract virtual int ExecuteCommand();
    public abstract virtual T ExecuteReturnEntity();
    public abstract virtual Task`1<T> ExecuteReturnEntityAsync();
    public abstract virtual Task`1<int> ExecuteCommandAsync();
    public abstract virtual Task`1<int> ExecuteCommandAsync(CancellationToken cancellationToken);
    public abstract virtual int ExecuteSqlBulkCopy();
    public abstract virtual Task`1<int> ExecuteSqlBulkCopyAsync();
    public abstract virtual IStorageable`1<T> DefaultAddElseUpdate();
    public abstract virtual StorageableSplitProvider`1<T> SplitTable();
    public abstract virtual StorageablePage`1<T> PageSize(int PaegSize, Action`1<int> ActionCallBack);
}
public interface SqlSugar.ISubInsertable`1 {
    public abstract virtual ISubInsertable`1<T> AddSubList(Expression`1<Func`2<T, object>> items);
    public abstract virtual ISubInsertable`1<T> AddSubList(Expression`1<Func`2<T, SubInsertTree>> tree);
    [ObsoleteAttribute("use ExecuteCommand")]
public abstract virtual object ExecuteReturnPrimaryKey();
    public abstract virtual object ExecuteCommand();
    public abstract virtual Task`1<object> ExecuteCommandAsync();
}
public interface SqlSugar.ISubOperation {
    public ExpressionContext Context { get; public set; }
    public string Name { get; }
    public int Sort { get; }
    public Expression Expression { get; public set; }
    public bool HasWhere { get; public set; }
    public abstract virtual ExpressionContext get_Context();
    public abstract virtual void set_Context(ExpressionContext value);
    public abstract virtual string get_Name();
    public abstract virtual string GetValue(Expression expression);
    public abstract virtual int get_Sort();
    public abstract virtual Expression get_Expression();
    public abstract virtual void set_Expression(Expression value);
    public abstract virtual bool get_HasWhere();
    public abstract virtual void set_HasWhere(bool value);
}
public interface SqlSugar.ISugarDataConverter {
    public abstract virtual SugarParameter ParameterConverter(object columnValue, int columnIndex);
    public abstract virtual T QueryConverter(IDataRecord dataRecord, int dataRecordIndex);
}
public interface SqlSugar.ISugarQueryable`1 {
    public SqlSugarProvider Context { get; public set; }
    public ISqlBuilder SqlBuilder { get; public set; }
    public QueryBuilder QueryBuilder { get; public set; }
    public bool IsCache { get; public set; }
    public int CacheTime { get; public set; }
    public abstract virtual NavISugarQueryable`1<T> AsNavQueryable();
    public abstract virtual ISugarQueryable`1<T> IncludesByExpression2(Expression include1, Expression include2);
    public abstract virtual ISugarQueryable`1<T> IncludesByExpression(Expression include1);
    public abstract virtual ISugarQueryable`1<T> IncludesByNameString(string navMemberName);
    public abstract virtual ISugarQueryable`1<T> IncludesByNameString(string navMemberName, string thenNavMemberName2);
    public abstract virtual ISugarQueryable`1<T> IncludesByNameString(string navMemberName, string thenNavMemberName2, string thenNavMemberName3);
    public abstract virtual ISugarQueryable`1<T> IncludesByNameString(string navMemberName, string thenNavMemberName2, string thenNavMemberName3, string thenNavMemberName4);
    public abstract virtual ISugarQueryable`1<T> IncludesByNameString(string navMemberName, string thenNavMemberName2, string thenNavMemberName3, string thenNavMemberName4, string thenNavMemberName5);
    public abstract virtual ISugarQueryable`1<T> IncludesAllFirstLayer(String[] ignoreProperyNameList);
    public abstract virtual ISugarQueryable`1<T> IncludesAllSecondLayer(Expression`1<Func`2<T, TReturn1>> expression, String[] ignoreProperyNameList);
    public abstract virtual ISugarQueryable`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1);
    public abstract virtual ISugarQueryable`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1);
    public abstract virtual ISugarQueryable`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2);
    public abstract virtual ISugarQueryable`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2);
    public abstract virtual ISugarQueryable`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2);
    public abstract virtual ISugarQueryable`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2);
    public abstract virtual NavISugarQueryable`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3);
    public abstract virtual NavISugarQueryable`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3);
    public abstract virtual NavISugarQueryable`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3);
    public abstract virtual NavISugarQueryable`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3);
    public abstract virtual NavISugarQueryable`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3);
    public abstract virtual NavISugarQueryable`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3);
    public abstract virtual NavISugarQueryable`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3);
    public abstract virtual NavISugarQueryable`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3);
    public abstract virtual SqlSugarProvider get_Context();
    public abstract virtual void set_Context(SqlSugarProvider value);
    public abstract virtual ISqlBuilder get_SqlBuilder();
    public abstract virtual void set_SqlBuilder(ISqlBuilder value);
    public abstract virtual QueryBuilder get_QueryBuilder();
    public abstract virtual void set_QueryBuilder(QueryBuilder value);
    public abstract virtual bool get_IsCache();
    public abstract virtual void set_IsCache(bool value);
    public abstract virtual int get_CacheTime();
    public abstract virtual void set_CacheTime(int value);
    public abstract virtual ISugarQueryable`1<T> Clone();
    public abstract virtual ISugarQueryable`1<T> Hints(string hints);
    public abstract virtual ISugarQueryable`1<T> AS(string tableName);
    public abstract virtual ISugarQueryable`1<T> AS(string tableName);
    public abstract virtual ISugarQueryable`1<T> AsWithAttr();
    public abstract virtual ISugarQueryable`1<T> AsType(Type tableNameType);
    public abstract virtual ISugarQueryable`1<T> With(string withString);
    public abstract virtual ISugarQueryable`1<T> CrossQuery(string configId);
    public abstract virtual ISugarQueryable`1<T> CrossQuery(Type type, string configId);
    public abstract virtual ISugarQueryable`1<T> IncludeLeftJoin(Expression`1<Func`2<T, object>> leftObjectExp);
    public abstract virtual ISugarQueryable`1<T> IncludeInnerJoin(Expression`1<Func`2<T, object>> innerObjectExp);
    public abstract virtual ISugarQueryable`1<T> IncludeRightJoin(Expression`1<Func`2<T, object>> rightObjectExp);
    public abstract virtual ISugarQueryable`1<T> IncludeFullJoin(Expression`1<Func`2<T, object>> fullObjectExp);
    public abstract virtual ISugarQueryable`2<T, T2> LeftJoin(ISugarQueryable`1<T2> joinQueryable, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public abstract virtual ISugarQueryable`2<T, T2> LeftJoinIF(bool isJoin, ISugarQueryable`1<T2> joinQueryable, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public abstract virtual ISugarQueryable`2<T, T2> InnerJoinIF(bool isJoin, ISugarQueryable`1<T2> joinQueryable, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public abstract virtual ISugarQueryable`2<T, T2> InnerJoin(ISugarQueryable`1<T2> joinQueryable, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public abstract virtual ISugarQueryable`2<T, T2> RightJoin(ISugarQueryable`1<T2> joinQueryable, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public abstract virtual ISugarQueryable`2<T, T2> FullJoin(ISugarQueryable`1<T2> joinQueryable, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public abstract virtual ISugarQueryable`2<T, T2> LeftJoin(Expression`1<Func`3<T, T2, bool>> joinExpression);
    public abstract virtual ISugarQueryable`2<T, T2> LeftJoinIF(bool isLeftJoin, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public abstract virtual ISugarQueryable`2<T, T2> InnerJoinIF(bool isJoin, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public abstract virtual ISugarQueryable`2<T, T2> LeftJoin(Expression`1<Func`3<T, T2, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`2<T, T2> FullJoin(Expression`1<Func`3<T, T2, bool>> joinExpression);
    public abstract virtual ISugarQueryable`2<T, T2> FullJoin(Expression`1<Func`3<T, T2, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`2<T, T2> InnerJoin(Expression`1<Func`3<T, T2, bool>> joinExpression);
    public abstract virtual ISugarQueryable`2<T, T2> InnerJoin(Expression`1<Func`3<T, T2, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`2<T, T2> RightJoin(Expression`1<Func`3<T, T2, bool>> joinExpression);
    public abstract virtual ISugarQueryable`2<T, T2> RightJoin(Expression`1<Func`3<T, T2, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`1<T> Filter(string FilterName, bool isDisabledGobalFilter);
    public abstract virtual ISugarQueryable`1<T> ClearFilter(Type[] types);
    public abstract virtual ISugarQueryable`1<T> ClearFilter();
    public abstract virtual ISugarQueryable`1<T> ClearFilter();
    public abstract virtual ISugarQueryable`1<T> ClearFilter();
    public abstract virtual ISugarQueryable`1<T> ClearFilter();
    public abstract virtual ISugarQueryable`1<T> Filter(Type type);
    public abstract virtual ISugarQueryable`1<T> Mapper(Action`1<T> mapperAction);
    public abstract virtual ISugarQueryable`1<T> Mapper(Expression`1<Func`2<MappingType, ManyToMany>> expression);
    public abstract virtual ISugarQueryable`1<T> Mapper(Action`2<T, MapperCache`1<T>> mapperAction);
    public abstract virtual ISugarQueryable`1<T> Mapper(Expression`1<Func`2<T, TObject>> mapperObject, Expression`1<Func`2<T, object>> mainField, Expression`1<Func`2<T, object>> childField);
    public abstract virtual ISugarQueryable`1<T> Mapper(Expression`1<Func`2<T, List`1<TObject>>> mapperObject, Expression`1<Func`2<T, object>> mainField, Expression`1<Func`2<T, object>> childField);
    public abstract virtual ISugarQueryable`1<T> Mapper(Expression`1<Func`2<T, TObject>> mapperObject, Expression`1<Func`2<T, object>> mapperField);
    public abstract virtual ISugarQueryable`1<T> Mapper(Expression`1<Func`2<T, List`1<TObject>>> mapperObject, Expression`1<Func`2<T, object>> mapperField);
    public abstract virtual ISugarQueryable`1<T> AddParameters(object parameters);
    public abstract virtual ISugarQueryable`1<T> AddParameters(SugarParameter[] parameters);
    public abstract virtual ISugarQueryable`1<T> AddParameters(List`1<SugarParameter> parameters);
    public abstract virtual ISugarQueryable`1<T> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public abstract virtual ISugarQueryable`1<T> AddJoinInfo(Type JoinEntityType, string shortName, string joinWhere, JoinType type);
    public abstract virtual ISugarQueryable`1<T> AddJoinInfo(Type JoinEntityType, Dictionary`2<string, Type> keyIsShortName_ValueIsType_Dictionary, FormattableString onExpString, JoinType type);
    public abstract virtual ISugarQueryable`1<T> WhereClass(ClassType whereClass, bool ignoreDefaultValue);
    public abstract virtual ISugarQueryable`1<T> WhereClass(List`1<ClassType> whereClassList, bool ignoreDefaultValue);
    public abstract virtual ISugarQueryable`1<T> WhereClassByPrimaryKey(List`1<T> list);
    public abstract virtual ISugarQueryable`1<T> WhereClassByWhereColumns(List`1<T> list, String[] whereColumns);
    public abstract virtual ISugarQueryable`1<T> WhereClassByPrimaryKey(T data);
    public abstract virtual ISugarQueryable`1<T> WhereColumns(List`1<Dictionary`2<string, object>> columns);
    public abstract virtual ISugarQueryable`1<T> WhereColumns(Dictionary`2<string, object> columns, bool ignoreDefaultValue);
    public abstract virtual ISugarQueryable`1<T> WhereColumns(Dictionary`2<string, object> columns);
    public abstract virtual ISugarQueryable`1<T> TranLock(Nullable`1<DbLockType> LockType);
    public abstract virtual ISugarQueryable`1<T> Where(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`1<T> Where(string expShortName, FormattableString expressionString);
    public abstract virtual ISugarQueryable`1<T> Where(Dictionary`2<string, Type> keyIsShortName_ValueIsType_Dictionary, FormattableString expressionString);
    public abstract virtual ISugarQueryable`1<T> Where(string whereString, object parameters);
    public abstract virtual ISugarQueryable`1<T> Where(IFuncModel funcModel);
    public abstract virtual ISugarQueryable`1<T> Where(List`1<IConditionalModel> conditionalModels);
    public abstract virtual ISugarQueryable`1<T> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public abstract virtual ISugarQueryable`1<T> Where(string fieldName, string conditionalType, object fieldValue);
    public abstract virtual ISugarQueryable`1<T> Having(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`1<T> HavingIF(bool isHaving, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`1<T> Having(string whereString, object parameters);
    public abstract virtual ISugarQueryable`1<T> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`1<T> WhereIF(bool isWhere, string whereString, object parameters);
    public abstract virtual T InSingle(object pkValue);
    public abstract virtual Task`1<T> InSingleAsync(object pkValue);
    public abstract virtual ISugarQueryable`1<T> In(TParamter[] pkValues);
    public abstract virtual ISugarQueryable`1<T> InIF(bool isIn, string fieldName, TParamter[] pkValues);
    public abstract virtual ISugarQueryable`1<T> InIF(bool isIn, TParamter[] pkValues);
    public abstract virtual ISugarQueryable`1<T> In(string InFieldName, FieldType[] inValues);
    public abstract virtual ISugarQueryable`1<T> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`1<T> In(List`1<TParamter> pkValues);
    public abstract virtual ISugarQueryable`1<T> In(string InFieldName, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`1<T> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`1<T> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`1<T> InIF(bool isWhere, Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`1<T> OrderBy(string orderByFields);
    public abstract virtual ISugarQueryable`1<T> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`1<T> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`1<T> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`1<T> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`1<T> OrderByIF(bool isOrderBy, string orderByFields);
    public abstract virtual ISugarQueryable`1<T> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`1<T> SampleBy(int timeNumber, SampleByUnit timeType);
    public abstract virtual ISugarQueryable`1<T> SampleBy(int timeNumber, string timeType);
    public abstract virtual ISugarQueryable`1<T> GroupBy(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`1<T> GroupBy(string groupFileds);
    public abstract virtual ISugarQueryable`1<T> GroupByIF(bool isGroupBy, Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`1<T> GroupByIF(bool isGroupBy, string groupFields);
    public abstract virtual ISugarQueryable`1<T> PartitionBy(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`1<T> PartitionBy(string groupFileds);
    public abstract virtual ISugarQueryable`1<T> Skip(int index);
    public abstract virtual ISugarQueryable`1<T> Take(int num);
    public abstract virtual ISugarQueryable`1<T> Distinct();
    public abstract virtual T Single();
    public abstract virtual Task`1<T> SingleAsync();
    public abstract virtual T Single(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual Task`1<T> SingleAsync(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual T First();
    public abstract virtual Task`1<T> FirstAsync();
    public abstract virtual Task`1<T> FirstAsync(CancellationToken token);
    public abstract virtual T First(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual Task`1<T> FirstAsync(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual Task`1<T> FirstAsync(Expression`1<Func`2<T, bool>> expression, CancellationToken token);
    public abstract virtual bool Any(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<T, bool>> expression, CancellationToken token);
    public abstract virtual bool Any();
    public abstract virtual Task`1<bool> AnyAsync();
    public abstract virtual ISugarQueryable`1<TResult> Select(string expShortName, FormattableString expSelect, Type resultType);
    public abstract virtual ISugarQueryable`1<TResult> Select(Dictionary`2<string, Type> keyIsShortName_ValueIsType_Dictionary, FormattableString expSelect, Type resultType);
    public abstract virtual ISugarQueryable`1<TResult> Select(string expShortName, FormattableString expSelect, Type EntityType, Type resultType);
    public abstract virtual ISugarQueryable`1<T> Select(string expShortName, FormattableString expSelect, Type resultType);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`2<T, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`2<T, TResult>> expression, bool isAutoFill);
    public abstract virtual ISugarQueryable`1<TResult> Select();
    public abstract virtual ISugarQueryable`1<TResult> Select(string select);
    public abstract virtual ISugarQueryable`1<T> Select(string select);
    public abstract virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`2<T, TResult>> expression);
    public abstract virtual ISugarQueryable`1<T> MergeTable();
    public abstract virtual void ForEachDataReader(Action`1<T> action);
    public abstract virtual Task ForEachDataReaderAsync(Action`1<T> action);
    public abstract virtual void ForEach(Action`1<T> action, int singleMaxReads, CancellationTokenSource cancellationTokenSource);
    public abstract virtual Task ForEachAsync(Action`1<T> action, int singleMaxReads, CancellationTokenSource cancellationTokenSource);
    public abstract virtual void ForEachByPage(Action`1<T> action, int pageIndex, int pageSize, Int32& totalNumber, int singleMaxReads, CancellationTokenSource cancellationTokenSource);
    public abstract virtual Task ForEachByPageAsync(Action`1<T> action, int pageIndex, int pageSize, RefAsync`1<int> totalNumber, int singleMaxReads, CancellationTokenSource cancellationTokenSource);
    public abstract virtual int Count();
    public abstract virtual Task`1<int> CountAsync();
    public abstract virtual Task`1<int> CountAsync(CancellationToken token);
    public abstract virtual int Count(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual Task`1<int> CountAsync(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual Task`1<int> CountAsync(Expression`1<Func`2<T, bool>> expression, CancellationToken token);
    public abstract virtual TResult Max(string maxField);
    public abstract virtual Task`1<TResult> MaxAsync(string maxField);
    public abstract virtual Task`1<TResult> MaxAsync(string maxField, CancellationToken token);
    public abstract virtual TResult Max(Expression`1<Func`2<T, TResult>> expression);
    public abstract virtual Task`1<TResult> MaxAsync(Expression`1<Func`2<T, TResult>> expression);
    public abstract virtual Task`1<TResult> MaxAsync(Expression`1<Func`2<T, TResult>> expression, CancellationToken token);
    public abstract virtual TResult Min(string minField);
    public abstract virtual Task`1<TResult> MinAsync(string minField);
    public abstract virtual TResult Min(Expression`1<Func`2<T, TResult>> expression);
    public abstract virtual Task`1<TResult> MinAsync(Expression`1<Func`2<T, TResult>> expression);
    public abstract virtual TResult Sum(string sumField);
    public abstract virtual Task`1<TResult> SumAsync(string sumField);
    public abstract virtual TResult Sum(Expression`1<Func`2<T, TResult>> expression);
    public abstract virtual Task`1<TResult> SumAsync(Expression`1<Func`2<T, TResult>> expression);
    public abstract virtual TResult Avg(string avgField);
    public abstract virtual Task`1<TResult> AvgAsync(string avgField);
    public abstract virtual TResult Avg(Expression`1<Func`2<T, TResult>> expression);
    public abstract virtual Task`1<TResult> AvgAsync(Expression`1<Func`2<T, TResult>> expression);
    public abstract virtual List`1<TResult> ToList(Expression`1<Func`2<T, TResult>> expression);
    public abstract virtual Task`1<List`1<TResult>> ToListAsync(Expression`1<Func`2<T, TResult>> expression);
    public abstract virtual List`1<T> ToList();
    public abstract virtual int IntoTable();
    public abstract virtual int IntoTable(Type TableEntityType);
    public abstract virtual int IntoTable(string tableName);
    public abstract virtual int IntoTable(Type TableEntityType, string tableName);
    public abstract virtual Task`1<int> IntoTableAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<int> IntoTableAsync(Type TableEntityType, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> IntoTableAsync(string tableName, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> IntoTableAsync(Type TableEntityType, string tableName, CancellationToken cancellationToken);
    public abstract virtual List`1<T> SetContext(Expression`1<Func`2<T, bool>> whereExpression, ParameterT parameter);
    public abstract virtual List`1<T> SetContext(Expression`1<Func`2<T, object>> thisFiled, Expression`1<Func`1<object>> mappingFiled, ParameterT parameter);
    public abstract virtual List`1<T> SetContext(Expression`1<Func`2<T, object>> thisFiled1, Expression`1<Func`1<object>> mappingFiled1, Expression`1<Func`2<T, object>> thisFiled2, Expression`1<Func`1<object>> mappingFiled2, ParameterT parameter);
    public abstract virtual Task`1<List`1<T>> SetContextAsync(Expression`1<Func`2<T, object>> thisFiled, Expression`1<Func`1<object>> mappingFiled, ParameterT parameter);
    public abstract virtual Task`1<List`1<T>> SetContextAsync(Expression`1<Func`2<T, object>> thisFiled1, Expression`1<Func`1<object>> mappingFiled1, Expression`1<Func`2<T, object>> thisFiled2, Expression`1<Func`1<object>> mappingFiled2, ParameterT parameter);
    public abstract virtual Dictionary`2<string, ValueType> ToDictionary(Expression`1<Func`2<T, object>> key, Expression`1<Func`2<T, object>> value);
    public abstract virtual Dictionary`2<string, object> ToDictionary(Expression`1<Func`2<T, object>> key, Expression`1<Func`2<T, object>> value);
    public abstract virtual Task`1<Dictionary`2<string, object>> ToDictionaryAsync(Expression`1<Func`2<T, object>> key, Expression`1<Func`2<T, object>> value);
    public abstract virtual Task`1<Dictionary`2<string, ValueType>> ToDictionaryAsync(Expression`1<Func`2<T, object>> key, Expression`1<Func`2<T, object>> value);
    public abstract virtual List`1<Dictionary`2<string, object>> ToDictionaryList();
    public abstract virtual Task`1<List`1<Dictionary`2<string, object>>> ToDictionaryListAsync();
    public abstract virtual T[] ToArray();
    public abstract virtual Task`1<T[]> ToArrayAsync();
    public abstract virtual Task`1<List`1<T>> ToListAsync();
    public abstract virtual Task`1<List`1<T>> ToListAsync(CancellationToken token);
    public abstract virtual string ToJson();
    public abstract virtual Task`1<string> ToJsonAsync();
    public abstract virtual string ToJsonPage(int pageIndex, int pageSize);
    public abstract virtual Task`1<string> ToJsonPageAsync(int pageIndex, int pageSize);
    public abstract virtual string ToJsonPage(int pageIndex, int pageSize, Int32& totalNumber);
    public abstract virtual Task`1<string> ToJsonPageAsync(int pageIndex, int pageSize, RefAsync`1<int> totalNumber);
    public abstract virtual KeyValuePair`2<string, List`1<SugarParameter>> ToSql();
    public abstract virtual string ToSqlString();
    public abstract virtual List`1<T> ToChildList(Expression`1<Func`2<T, object>> parentIdExpression, object primaryKeyValue, bool isContainOneself);
    public abstract virtual List`1<T> ToChildList(Expression`1<Func`2<T, object>> parentIdExpression, Object[] primaryKeyValues, bool isContainOneself);
    public abstract virtual Task`1<List`1<T>> ToChildListAsync(Expression`1<Func`2<T, object>> parentIdExpression, object primaryKeyValue, bool isContainOneself);
    public abstract virtual Task`1<List`1<T>> ToChildListAsync(Expression`1<Func`2<T, object>> parentIdExpression, Object[] primaryKeyValues, bool isContainOneself);
    public abstract virtual List`1<T> ToParentList(Expression`1<Func`2<T, object>> parentIdExpression, object primaryKeyValue);
    public abstract virtual List`1<T> ToParentList(Expression`1<Func`2<T, object>> parentIdExpression, object primaryKeyValue, Expression`1<Func`2<T, bool>> parentWhereExpression);
    public abstract virtual Task`1<List`1<T>> ToParentListAsync(Expression`1<Func`2<T, object>> parentIdExpression, object primaryKeyValue);
    public abstract virtual Task`1<List`1<T>> ToParentListAsync(Expression`1<Func`2<T, object>> parentIdExpression, object primaryKeyValue, Expression`1<Func`2<T, bool>> parentWhereExpression);
    public abstract virtual List`1<T> ToTree(string childPropertyName, string parentIdPropertyName, object rootValue, string primaryKeyPropertyName);
    public abstract virtual List`1<T> ToTree(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, object rootValue);
    public abstract virtual List`1<T> ToTree(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, object rootValue, Expression`1<Func`2<T, object>> primaryKeyExpression);
    public abstract virtual Task`1<List`1<T>> ToTreeAsync(string childPropertyName, string parentIdPropertyName, object rootValue, string primaryKeyPropertyName);
    public abstract virtual Task`1<List`1<T>> ToTreeAsync(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, object rootValue);
    public abstract virtual Task`1<List`1<T>> ToTreeAsync(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, object rootValue, Expression`1<Func`2<T, object>> primaryKeyExpression);
    public abstract virtual List`1<T> ToTree(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, object rootValue, Object[] childIds);
    public abstract virtual List`1<T> ToTree(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, object rootValue, Object[] childIds, Expression`1<Func`2<T, object>> primaryKeyExpression);
    public abstract virtual Task`1<List`1<T>> ToTreeAsync(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, object rootValue, Object[] childIds);
    public abstract virtual Task`1<List`1<T>> ToTreeAsync(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, object rootValue, Object[] childIds, Expression`1<Func`2<T, object>> primaryKeyExpression);
    public abstract virtual DataTable ToDataTable();
    public abstract virtual DataTable ToDataTableByEntity();
    public abstract virtual Task`1<DataTable> ToDataTableAsync();
    public abstract virtual Task`1<DataTable> ToDataTableByEntityAsync();
    public abstract virtual DataTable ToDataTablePage(int pageNumber, int pageSize);
    public abstract virtual Task`1<DataTable> ToDataTablePageAsync(int pageNumber, int pageSize);
    public abstract virtual DataTable ToDataTablePage(int pageNumber, int pageSize, Int32& totalNumber);
    public abstract virtual DataTable ToDataTableByEntityPage(int pageNumber, int pageSize, Int32& totalNumber);
    public abstract virtual DataTable ToDataTablePage(int pageNumber, int pageSize, Int32& totalNumber, Int32& totalPage);
    public abstract virtual Task`1<DataTable> ToDataTablePageAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber);
    public abstract virtual Task`1<DataTable> ToDataTableByEntityPageAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber);
    public abstract virtual List`1<T> ToOffsetPage(int pageNumber, int pageSize);
    public abstract virtual List`1<T> ToOffsetPage(int pageNumber, int pageSize, Int32& totalNumber);
    public abstract virtual List`1<T> ToOffsetPage(int pageNumber, int pageSize, Int32& totalNumber, Int32& totalPage);
    public abstract virtual Task`1<List`1<T>> ToOffsetPageAsync(int pageNumber, int pageSize);
    public abstract virtual Task`1<List`1<T>> ToOffsetPageAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber);
    public abstract virtual Task`1<List`1<T>> ToOffsetPageAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber, RefAsync`1<int> totalPage);
    public abstract virtual Task`1<List`1<T>> ToOffsetPageAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber, CancellationToken token);
    public abstract virtual Task`1<List`1<T>> ToOffsetPageAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber, RefAsync`1<int> totalPage, CancellationToken token);
    public abstract virtual List`1<T> ToPageList(int pageNumber, int pageSize);
    public abstract virtual Task`1<List`1<T>> ToPageListAsync(int pageNumber, int pageSize);
    public abstract virtual Task`1<List`1<T>> ToPageListAsync(int pageNumber, int pageSize, CancellationToken token);
    public abstract virtual List`1<T> ToPageList(int pageNumber, int pageSize, Int32& totalNumber);
    public abstract virtual List`1<TResult> ToPageList(int pageNumber, int pageSize, Int32& totalNumber, Expression`1<Func`2<T, TResult>> expression);
    public abstract virtual List`1<T> ToPageList(int pageNumber, int pageSize, Int32& totalNumber, Int32& totalPage);
    public abstract virtual Task`1<List`1<T>> ToPageListAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber);
    public abstract virtual Task`1<List`1<T>> ToPageListAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber, CancellationToken token);
    public abstract virtual Task`1<List`1<TResult>> ToPageListAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber, Expression`1<Func`2<T, TResult>> expression);
    public abstract virtual Task`1<List`1<T>> ToPageListAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber, RefAsync`1<int> totalPage);
    public abstract virtual Task`1<List`1<T>> ToPageListAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber, RefAsync`1<int> totalPage, CancellationToken token);
    public abstract virtual ISugarQueryable`1<T> WithCache(string cacheKey, int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`1<T> WithCache(int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`1<T> WithCacheIF(bool isCache, int cacheDurationInSeconds);
    public abstract virtual string ToClassString(string className);
    public abstract virtual void Clear();
    public abstract virtual void AddQueue();
    public abstract virtual ISugarQueryable`1<T> IgnoreColumns(Expression`1<Func`2<T, object>> columns);
    public abstract virtual ISugarQueryable`1<T> IgnoreColumns(String[] columns);
    public abstract virtual DataTable ToPivotTable(Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
    public abstract virtual List`1<object> ToPivotList(Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
    public abstract virtual IEnumerable`1<object> ToPivotEnumerable(Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
    public abstract virtual string ToPivotJson(Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
    public abstract virtual Task`1<DataTable> ToPivotTableAsync(Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
    public abstract virtual Task`1<List`1<object>> ToPivotListAsync(Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
    public abstract virtual Task`1<IEnumerable`1<object>> ToPivotEnumerableAsync(Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
    public abstract virtual Task`1<string> ToPivotJsonAsync(Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
    public abstract virtual ISugarQueryable`1<T> SplitTable(Func`2<List`1<SplitTableInfo>, IEnumerable`1<SplitTableInfo>> getTableNamesFunc);
    public abstract virtual ISugarQueryable`1<T> SplitTable(DateTime beginTime, DateTime endTime);
    public abstract virtual ISugarQueryable`1<T> SplitTable();
    public abstract virtual ISugarQueryable`1<T> Having(IFuncModel model);
    public abstract virtual ISugarQueryable`1<T> OrderBy(List`1<OrderByModel> models);
    public abstract virtual ISugarQueryable`1<T> GroupBy(List`1<GroupByModel> models);
    public abstract virtual ISugarQueryable`1<T> Select(List`1<SelectModel> models);
    public abstract virtual ISugarQueryable`1<TResult> Select(List`1<SelectModel> models);
    public abstract virtual ISugarQueryable`1<T> Select(List`1<SelectModel> models, AsNameFormatType type);
    public abstract virtual ISugarQueryable`1<T> AS(string tableName, string shortName);
    public abstract virtual ISugarQueryable`1<T> AddJoinInfo(string tableName, string shortName, IFuncModel models, JoinType type);
    public abstract virtual ISugarQueryable`1<T> AddJoinInfo(List`1<JoinInfoParameter> joinInfoParameters);
}
public interface SqlSugar.ISugarQueryable`10 {
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Hints(string hints);
    public abstract virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> LeftJoinIF(bool isLeftJoin, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> InnerJoinIF(bool isJoin, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> LeftJoin(ISugarQueryable`1<T11> joinQueryable, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> InnerJoin(ISugarQueryable`1<T11> joinQueryable, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> RightJoin(ISugarQueryable`1<T11> joinQueryable, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> LeftJoin(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FullJoin(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> InnerJoin(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> RightJoin(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> LeftJoin(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FullJoin(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> InnerJoin(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> RightJoin(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(string expShortName, FormattableString expressionString);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(List`1<IConditionalModel> conditionalModels);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(string whereString, object parameters);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, string whereString, object parameters);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression, bool isAutoFill);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(List`1<OrderByModel> models);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(string orderByFields);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression);
    public abstract virtual TResult Max(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression);
    public abstract virtual TResult Min(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression);
    public abstract virtual TResult Sum(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression);
    public abstract virtual TResult Avg(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Take(int num);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Clone();
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> AS(string tableName);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> AS(string tableName);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> ClearFilter();
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Filter(string FilterName, bool isDisabledGobalFilter);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> ClearFilter(Type[] types);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> ClearFilter();
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> ClearFilter();
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> ClearFilter();
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> AddParameters(object parameters);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> AddParameters(SugarParameter[] parameters);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> AddParameters(List`1<SugarParameter> parameters);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> With(string withString);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithCache(int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithCacheIF(bool isCache, int cacheDurationInSeconds);
}
public interface SqlSugar.ISugarQueryable`11 {
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Hints(string hints);
    public abstract virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> LeftJoinIF(bool isLeftJoin, Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> InnerJoinIF(bool isJoin, Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> LeftJoin(ISugarQueryable`1<T12> joinQueryable, Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> InnerJoin(ISugarQueryable`1<T12> joinQueryable, Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> RightJoin(ISugarQueryable`1<T12> joinQueryable, Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> LeftJoin(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FullJoin(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> InnerJoin(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> RightJoin(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> LeftJoin(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FullJoin(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> InnerJoin(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> RightJoin(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(string expShortName, FormattableString expressionString);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(List`1<IConditionalModel> conditionalModels);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(string whereString, object parameters);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, string whereString, object parameters);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression, bool isAutoFill);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(List`1<OrderByModel> models);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(string orderByFields);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, object>> expression);
    public abstract virtual TResult Max(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression);
    public abstract virtual TResult Min(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression);
    public abstract virtual TResult Sum(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression);
    public abstract virtual TResult Avg(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Take(int num);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Clone();
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> AS(string tableName);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> AS(string tableName);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ClearFilter();
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Filter(string FilterName, bool isDisabledGobalFilter);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ClearFilter(Type[] types);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ClearFilter();
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ClearFilter();
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ClearFilter();
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> AddParameters(object parameters);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> AddParameters(SugarParameter[] parameters);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> AddParameters(List`1<SugarParameter> parameters);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> With(string withString);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithCache(int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithCacheIF(bool isCache, int cacheDurationInSeconds);
}
public interface SqlSugar.ISugarQueryable`12 {
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Hints(string hints);
    public abstract virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(string expShortName, FormattableString expressionString);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(List`1<IConditionalModel> conditionalModels);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(string whereString, object parameters);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, string whereString, object parameters);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> expression, bool isAutoFill);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(List`1<OrderByModel> models);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(string orderByFields);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, object>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, object>> expression);
    public abstract virtual TResult Max(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> expression);
    public abstract virtual TResult Min(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> expression);
    public abstract virtual TResult Sum(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> expression);
    public abstract virtual TResult Avg(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> expression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Take(int num);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Clone();
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> AS(string tableName);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> AS(string tableName);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ClearFilter();
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Filter(string FilterName, bool isDisabledGobalFilter);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ClearFilter(Type[] types);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ClearFilter();
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ClearFilter();
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ClearFilter();
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> AddParameters(object parameters);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> AddParameters(SugarParameter[] parameters);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> AddParameters(List`1<SugarParameter> parameters);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> With(string withString);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithCache(int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithCacheIF(bool isCache, int cacheDurationInSeconds);
}
public interface SqlSugar.ISugarQueryable`2 {
    public abstract virtual ISugarQueryable`2<T, T2> Hints(string hints);
    public abstract virtual ISugarQueryable`2<T, T2> SampleBy(int timeNumber, SampleByUnit timeType);
    public abstract virtual ISugarQueryable`2<T, T2> SampleBy(int timeNumber, string timeType);
    public abstract virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> LeftJoinIF(bool isLeftJoin, Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> InnerJoinIF(bool isJoin, Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> LeftJoin(ISugarQueryable`1<T3> joinQueryable, Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> LeftJoinIF(bool isJoin, ISugarQueryable`1<T3> joinQueryable, Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> InnerJoinIF(bool isJoin, ISugarQueryable`1<T3> joinQueryable, Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> InnerJoin(ISugarQueryable`1<T3> joinQueryable, Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> RightJoin(ISugarQueryable`1<T3> joinQueryable, Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> FullJoin(ISugarQueryable`1<T3> joinQueryable, Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> LeftJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> FullJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> InnerJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> RightJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> LeftJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`3<T, T2, T3> FullJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`3<T, T2, T3> InnerJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`3<T, T2, T3> RightJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`2<T, T2> Where(string expShortName, FormattableString expressionString);
    public abstract virtual ISugarQueryable`2<T, T2> Where(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`2<T, T2> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`2<T, T2> Where(List`1<IConditionalModel> conditionalModels);
    public abstract virtual ISugarQueryable`2<T, T2> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public abstract virtual ISugarQueryable`2<T, T2> Where(IFuncModel funcModel);
    public abstract virtual ISugarQueryable`2<T, T2> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`2<T, T2> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`2<T, T2> Where(string whereString, object whereObj);
    public abstract virtual ISugarQueryable`2<T, T2> WhereIF(bool isWhere, string whereString, object whereObj);
    public abstract virtual ISugarQueryable`2<T, T2> WhereClass(ClassType whereClass, bool ignoreDefaultValue);
    public abstract virtual ISugarQueryable`2<T, T2> WhereClass(List`1<ClassType> whereClassList, bool ignoreDefaultValue);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression, bool isAutoFill);
    public abstract virtual ISugarQueryable`2<T, T2> OrderBy(List`1<OrderByModel> models);
    public abstract virtual ISugarQueryable`2<T, T2> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`2<T, T2> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`2<T, T2> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`2<T, T2> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`2<T, T2> OrderBy(string orderByFields);
    public abstract virtual ISugarQueryable`2<T, T2> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`2<T, T2> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`2<T, T2> OrderByIF(bool isOrderBy, string orderByFields);
    public abstract virtual ISugarQueryable`2<T, T2> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`2<T, T2> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`2<T, T2> PartitionBy(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`2<T, T2> PartitionBy(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`2<T, T2> PartitionBy(string groupFileds);
    public abstract virtual ISugarQueryable`2<T, T2> GroupBy(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`2<T, T2> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`2<T, T2> GroupByIF(bool isGroupBy, Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`2<T, T2> GroupByIF(bool isGroupBy, Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`2<T, T2> GroupByIF(bool isGroupBy, string groupFields);
    public abstract virtual ISugarQueryable`2<T, T2> Having(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`2<T, T2> Having(Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`2<T, T2> Having(string whereString, object whereObj);
    public abstract virtual ISugarQueryable`2<T, T2> HavingIF(bool isHaving, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`2<T, T2> HavingIF(bool isHaving, Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual TResult Max(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual TResult Min(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual TResult Sum(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual TResult Avg(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual Task`1<TResult> MaxAsync(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual Task`1<TResult> MinAsync(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual Task`1<TResult> SumAsync(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual Task`1<TResult> AvgAsync(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual ISugarQueryable`2<T, T2> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`2<T, T2> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`2<T, T2> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`2<T, T2> In(Expression`1<Func`3<T, T2, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`2<T, T2> In(Expression`1<Func`3<T, T2, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`2<T, T2> In(Expression`1<Func`3<T, T2, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`2<T, T2> InIF(bool isIn, TParamter[] pkValues);
    public abstract virtual ISugarQueryable`2<T, T2> InIF(bool isIn, string fieldName, TParamter[] pkValues);
    public abstract virtual ISugarQueryable`2<T, T2> Take(int num);
    public abstract virtual ISugarQueryable`2<T, T2> Clone();
    public abstract virtual ISugarQueryable`2<T, T2> AS(string tableName);
    public abstract virtual ISugarQueryable`2<T, T2> AS(string tableName);
    public abstract virtual ISugarQueryable`2<T, T2> ClearFilter();
    public abstract virtual ISugarQueryable`2<T, T2> ClearFilter(Type[] types);
    public abstract virtual ISugarQueryable`2<T, T2> ClearFilter();
    public abstract virtual ISugarQueryable`2<T, T2> ClearFilter();
    public abstract virtual ISugarQueryable`2<T, T2> ClearFilter();
    public abstract virtual ISugarQueryable`2<T, T2> Filter(string FilterName, bool isDisabledGobalFilter);
    public abstract virtual ISugarQueryable`2<T, T2> AddParameters(object parameters);
    public abstract virtual ISugarQueryable`2<T, T2> AddParameters(SugarParameter[] parameters);
    public abstract virtual ISugarQueryable`2<T, T2> AddParameters(List`1<SugarParameter> parameters);
    public abstract virtual ISugarQueryable`2<T, T2> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public abstract virtual ISugarQueryable`2<T, T2> With(string withString);
    public abstract virtual ISugarQueryable`2<T, T2> WithCache(int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`2<T, T2> WithCacheIF(bool isCache, int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`2<T, T2> Distinct();
    public abstract virtual bool Any(Expression`1<Func`3<T, T2, bool>> expression);
}
public interface SqlSugar.ISugarQueryable`3 {
    public abstract virtual ISugarQueryable`3<T, T2, T3> Hints(string hints);
    public abstract virtual ISugarQueryable`3<T, T2, T3> SampleBy(int timeNumber, SampleByUnit timeType);
    public abstract virtual ISugarQueryable`3<T, T2, T3> SampleBy(int timeNumber, string timeType);
    public abstract virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> LeftJoinIF(bool isLeftJoin, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> InnerJoinIF(bool isJoin, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> LeftJoin(ISugarQueryable`1<T4> joinQueryable, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> LeftJoinIF(bool isJoin, ISugarQueryable`1<T4> joinQueryable, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> InnerJoinIF(bool isJoin, ISugarQueryable`1<T4> joinQueryable, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> InnerJoin(ISugarQueryable`1<T4> joinQueryable, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> RightJoin(ISugarQueryable`1<T4> joinQueryable, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> FullJoin(ISugarQueryable`1<T4> joinQueryable, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> LeftJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> FullJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> InnerJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> RightJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> LeftJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> FullJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> InnerJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> RightJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Where(string expShortName, FormattableString expressionString);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Where(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Where(List`1<IConditionalModel> conditionalModels);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Where(IFuncModel funcModel);
    public abstract virtual ISugarQueryable`3<T, T2, T3> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Where(string whereString, object parameters);
    public abstract virtual ISugarQueryable`3<T, T2, T3> WhereIF(bool isWhere, string whereString, object parameters);
    public abstract virtual ISugarQueryable`3<T, T2, T3> WhereClass(ClassType whereClass, bool ignoreDefaultValue);
    public abstract virtual ISugarQueryable`3<T, T2, T3> WhereClass(List`1<ClassType> whereClassList, bool ignoreDefaultValue);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression, bool isAutoFill);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> OrderBy(List`1<OrderByModel> models);
    public abstract virtual ISugarQueryable`3<T, T2, T3> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`3<T, T2, T3> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`3<T, T2, T3> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> OrderByDescending(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> OrderBy(string orderByFields);
    public abstract virtual ISugarQueryable`3<T, T2, T3> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`3<T, T2, T3> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`3<T, T2, T3> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`3<T, T2, T3> OrderByIF(bool isOrderBy, string orderByFields);
    public abstract virtual ISugarQueryable`3<T, T2, T3> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`3<T, T2, T3> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`3<T, T2, T3> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`3<T, T2, T3> PartitionBy(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> PartitionBy(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> PartitionBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> PartitionBy(string groupFileds);
    public abstract virtual ISugarQueryable`3<T, T2, T3> GroupBy(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> GroupByIF(bool isGroupBy, Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> GroupByIF(bool isGroupBy, Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> GroupByIF(bool isGroupBy, Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> GroupByIF(bool isGroupBy, string groupFields);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Having(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Having(Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Having(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Having(string whereString, object parameters);
    public abstract virtual ISugarQueryable`3<T, T2, T3> HavingIF(bool isHaving, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> HavingIF(bool isHaving, Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> HavingIF(bool isHaving, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual TResult Max(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual TResult Min(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual TResult Sum(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual TResult Avg(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual Task`1<TResult> MaxAsync(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual Task`1<TResult> MinAsync(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual Task`1<TResult> SumAsync(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual Task`1<TResult> AvgAsync(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`3<T, T2, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`3<T, T2, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`3<T, T2, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`4<T, T2, T3, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`4<T, T2, T3, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`4<T, T2, T3, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`3<T, T2, T3> InIF(bool isIn, TParamter[] pkValues);
    public abstract virtual ISugarQueryable`3<T, T2, T3> InIF(bool isIn, string fieldName, TParamter[] pkValues);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Take(int num);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Clone();
    public abstract virtual ISugarQueryable`3<T, T2, T3> AS(string tableName);
    public abstract virtual ISugarQueryable`3<T, T2, T3> AS(string tableName);
    public abstract virtual ISugarQueryable`3<T, T2, T3> ClearFilter();
    public abstract virtual ISugarQueryable`3<T, T2, T3> Filter(string FilterName, bool isDisabledGobalFilter);
    public abstract virtual ISugarQueryable`3<T, T2, T3> ClearFilter(Type[] types);
    public abstract virtual ISugarQueryable`3<T, T2, T3> ClearFilter();
    public abstract virtual ISugarQueryable`3<T, T2, T3> ClearFilter();
    public abstract virtual ISugarQueryable`3<T, T2, T3> ClearFilter();
    public abstract virtual ISugarQueryable`3<T, T2, T3> AddParameters(object parameters);
    public abstract virtual ISugarQueryable`3<T, T2, T3> AddParameters(SugarParameter[] parameters);
    public abstract virtual ISugarQueryable`3<T, T2, T3> AddParameters(List`1<SugarParameter> parameters);
    public abstract virtual ISugarQueryable`3<T, T2, T3> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public abstract virtual ISugarQueryable`3<T, T2, T3> With(string withString);
    public abstract virtual ISugarQueryable`3<T, T2, T3> WithCache(int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`3<T, T2, T3> WithCacheIF(bool isCache, int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`3<T, T2, T3> Distinct();
    public abstract virtual bool Any(Expression`1<Func`4<T, T2, T3, bool>> expression);
}
public interface SqlSugar.ISugarQueryable`4 {
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Hints(string hints);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> SampleBy(int timeNumber, SampleByUnit timeType);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> SampleBy(int timeNumber, string timeType);
    public abstract virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> LeftJoinIF(bool isLeftJoin, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> InnerJoinIF(bool isJoin, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> LeftJoin(ISugarQueryable`1<T5> joinQueryable, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> LeftJoinIF(bool isJoin, ISugarQueryable`1<T5> joinQueryable, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> InnerJoinIF(bool isJoin, ISugarQueryable`1<T5> joinQueryable, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> InnerJoin(ISugarQueryable`1<T5> joinQueryable, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> RightJoin(ISugarQueryable`1<T5> joinQueryable, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> LeftJoin(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> FullJoin(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> InnerJoin(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> RightJoin(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> LeftJoin(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> FullJoin(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> InnerJoin(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> RightJoin(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Where(string expShortName, FormattableString expressionString);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Where(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Where(List`1<IConditionalModel> conditionalModels);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Where(IFuncModel funcModel);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Where(string whereString, object parameters);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> WhereIF(bool isWhere, string whereString, object parameters);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> WhereClass(ClassType whereClass, bool ignoreDefaultValue);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> WhereClass(List`1<ClassType> whereClassList, bool ignoreDefaultValue);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression, bool isAutoFill);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> OrderBy(List`1<OrderByModel> models);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> OrderByDescending(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> OrderByDescending(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> OrderBy(string orderByFields);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> OrderByIF(bool isOrderBy, string orderByFields);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> GroupBy(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> GroupByIF(bool isGroupBy, Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> GroupByIF(bool isGroupBy, Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> GroupByIF(bool isGroupBy, Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> GroupByIF(bool isGroupBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> GroupByIF(bool isGroupBy, string groupFields);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Having(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Having(Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Having(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Having(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Having(string whereString, object parameters);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> HavingIF(bool isHaving, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> HavingIF(bool isHaving, Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> HavingIF(bool isHaving, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> HavingIF(bool isHaving, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual TResult Max(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public abstract virtual TResult Min(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public abstract virtual TResult Sum(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public abstract virtual TResult Avg(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`3<T, T2, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`3<T, T2, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`3<T, T2, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`4<T, T2, T3, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`4<T, T2, T3, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`4<T, T2, T3, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`5<T, T2, T3, T4, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`5<T, T2, T3, T4, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`5<T, T2, T3, T4, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> InIF(bool isIn, TParamter[] pkValues);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> InIF(bool isIn, string fieldName, TParamter[] pkValues);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Take(int num);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Clone();
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> AS(string tableName);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> AS(string tableName);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> ClearFilter();
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Filter(string FilterName, bool isDisabledGobalFilter);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> ClearFilter(Type[] types);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> ClearFilter();
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> ClearFilter();
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> ClearFilter();
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> AddParameters(object parameters);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> AddParameters(SugarParameter[] parameters);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> AddParameters(List`1<SugarParameter> parameters);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> With(string withString);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> WithCache(int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> WithCacheIF(bool isCache, int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`4<T, T2, T3, T4> Distinct();
    public abstract virtual bool Any(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
}
public interface SqlSugar.ISugarQueryable`5 {
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Hints(string hints);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> SampleBy(int timeNumber, SampleByUnit timeType);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> SampleBy(int timeNumber, string timeType);
    public abstract virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> LeftJoinIF(bool isLeftJoin, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> InnerJoinIF(bool isJoin, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> LeftJoin(ISugarQueryable`1<T6> joinQueryable, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> LeftJoinIF(bool isJoin, ISugarQueryable`1<T6> joinQueryable, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> InnerJoinIF(bool isJoin, ISugarQueryable`1<T6> joinQueryable, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> InnerJoin(ISugarQueryable`1<T6> joinQueryable, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> RightJoin(ISugarQueryable`1<T6> joinQueryable, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> LeftJoin(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> FullJoin(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> InnerJoin(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> RightJoin(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> LeftJoin(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> FullJoin(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> InnerJoin(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> RightJoin(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(string expShortName, FormattableString expressionString);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(List`1<IConditionalModel> conditionalModels);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(IFuncModel funcModel);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> WhereIF(bool isWhere, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(string whereString, object parameters);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> WhereIF(bool isWhere, string whereString, object parameters);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> WhereClass(ClassType whereClass, bool ignoreDefaultValue);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> WhereClass(List`1<ClassType> whereClassList, bool ignoreDefaultValue);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression, bool isAutoFill);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderBy(List`1<OrderByModel> models);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByDescending(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByDescending(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByDescending(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderBy(string orderByFields);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByIF(bool isOrderBy, string orderByFields);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByIF(bool isOrderBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupByIF(bool isGroupBy, Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupByIF(bool isGroupBy, Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupByIF(bool isGroupBy, Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupByIF(bool isGroupBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupByIF(bool isGroupBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupByIF(bool isGroupBy, string groupFields);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupBy(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Having(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Having(Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Having(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Having(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Having(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Having(string whereString, object parameters);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> HavingIF(bool isHaving, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> HavingIF(bool isHaving, Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> HavingIF(bool isHaving, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> HavingIF(bool isHaving, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> HavingIF(bool isHaving, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual TResult Max(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public abstract virtual TResult Min(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public abstract virtual TResult Sum(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public abstract virtual TResult Avg(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Take(int num);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Clone();
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> AS(string tableName);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> AS(string tableName);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> ClearFilter();
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Filter(string FilterName, bool isDisabledGobalFilter);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> ClearFilter(Type[] types);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> ClearFilter();
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> ClearFilter();
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> ClearFilter();
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> AddParameters(object parameters);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> AddParameters(SugarParameter[] parameters);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> AddParameters(List`1<SugarParameter> parameters);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> With(string withString);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> WithCache(int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> WithCacheIF(bool isCache, int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`5<T, T2, T3, T4, T5> Distinct();
    public abstract virtual bool Any(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
}
public interface SqlSugar.ISugarQueryable`6 {
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Hints(string hints);
    public abstract virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> LeftJoinIF(bool isLeftJoin, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> InnerJoinIF(bool isJoin, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> LeftJoin(ISugarQueryable`1<T7> joinQueryable, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> InnerJoin(ISugarQueryable`1<T7> joinQueryable, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> RightJoin(ISugarQueryable`1<T7> joinQueryable, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> LeftJoin(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> FullJoin(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> InnerJoin(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> RightJoin(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> LeftJoin(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> FullJoin(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> InnerJoin(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> RightJoin(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(string expShortName, FormattableString expressionString);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(List`1<IConditionalModel> conditionalModels);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(IFuncModel funcModel);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereIF(bool isWhere, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereIF(bool isWhere, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(string whereString, object parameters);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereIF(bool isWhere, string whereString, object parameters);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereClass(ClassType whereClass, bool ignoreDefaultValue);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereClass(List`1<ClassType> whereClassList, bool ignoreDefaultValue);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression, bool isAutoFill);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderBy(List`1<OrderByModel> models);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByDescending(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByDescending(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByDescending(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByDescending(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderBy(string orderByFields);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByIF(bool isOrderBy, string orderByFields);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByIF(bool isOrderBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByIF(bool isOrderBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupByIF(bool isGroupBy, string groupFields);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupByIF(bool isGroupBy, Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupByIF(bool isGroupBy, Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupByIF(bool isGroupBy, Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupByIF(bool isGroupBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupByIF(bool isGroupBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupByIF(bool isGroupBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupBy(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Having(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Having(Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Having(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Having(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Having(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Having(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Having(string whereString, object parameters);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> HavingIF(bool isHaving, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> HavingIF(bool isHaving, Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> HavingIF(bool isHaving, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> HavingIF(bool isHaving, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> HavingIF(bool isHaving, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> HavingIF(bool isHaving, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public abstract virtual TResult Max(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public abstract virtual TResult Min(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public abstract virtual TResult Sum(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public abstract virtual TResult Avg(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Take(int num);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Clone();
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> AS(string tableName);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> AS(string tableName);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> ClearFilter();
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Filter(string FilterName, bool isDisabledGobalFilter);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> ClearFilter(Type[] types);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> ClearFilter();
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> ClearFilter();
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> ClearFilter();
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> AddParameters(object parameters);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> AddParameters(SugarParameter[] parameters);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> AddParameters(List`1<SugarParameter> parameters);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> With(string withString);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WithCache(int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WithCacheIF(bool isCache, int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Distinct();
    public abstract virtual bool Any(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
}
public interface SqlSugar.ISugarQueryable`7 {
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Hints(string hints);
    public abstract virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> LeftJoinIF(bool isLeftJoin, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> InnerJoinIF(bool isJoin, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> LeftJoin(ISugarQueryable`1<T8> joinQueryable, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> InnerJoin(ISugarQueryable`1<T8> joinQueryable, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> RightJoin(ISugarQueryable`1<T8> joinQueryable, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> LeftJoin(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> FullJoin(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> InnerJoin(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> RightJoin(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> LeftJoin(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> FullJoin(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> InnerJoin(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> RightJoin(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(string expShortName, FormattableString expressionString);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(List`1<IConditionalModel> conditionalModels);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereIF(bool isWhere, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereIF(bool isWhere, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereIF(bool isWhere, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(string whereString, object parameters);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereIF(bool isWhere, string whereString, object parameters);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereClass(ClassType whereClass, bool ignoreDefaultValue);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereClass(List`1<ClassType> whereClassList, bool ignoreDefaultValue);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression, bool isAutoFill);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(List`1<OrderByModel> models);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByDescending(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByDescending(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByDescending(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByDescending(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByDescending(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(string orderByFields);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByIF(bool isOrderBy, string orderByFields);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByIF(bool isOrderBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByIF(bool isOrderBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByIF(bool isOrderBy, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupByIF(bool isGroupBy, string groupFields);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupByIF(bool isGroupBy, Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupByIF(bool isGroupBy, Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupByIF(bool isGroupBy, Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupByIF(bool isGroupBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupByIF(bool isGroupBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupByIF(bool isGroupBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupByIF(bool isGroupBy, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupBy(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public abstract virtual TResult Max(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public abstract virtual TResult Min(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public abstract virtual TResult Sum(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public abstract virtual TResult Avg(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Take(int num);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Clone();
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> AS(string tableName);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> AS(string tableName);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> ClearFilter();
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Filter(string FilterName, bool isDisabledGobalFilter);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> ClearFilter(Type[] types);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> ClearFilter();
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> ClearFilter();
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> ClearFilter();
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> AddParameters(object parameters);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> AddParameters(SugarParameter[] parameters);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> AddParameters(List`1<SugarParameter> parameters);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> With(string withString);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WithCache(int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WithCacheIF(bool isCache, int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Distinct();
    public abstract virtual bool Any(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
}
public interface SqlSugar.ISugarQueryable`8 {
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Hints(string hints);
    public abstract virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> LeftJoinIF(bool isLeftJoin, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> InnerJoinIF(bool isJoin, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> LeftJoin(ISugarQueryable`1<T9> joinQueryable, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> InnerJoin(ISugarQueryable`1<T9> joinQueryable, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> RightJoin(ISugarQueryable`1<T9> joinQueryable, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> LeftJoin(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> FullJoin(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> InnerJoin(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> RightJoin(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> LeftJoin(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> FullJoin(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> InnerJoin(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> RightJoin(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(string expShortName, FormattableString expressionString);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(List`1<IConditionalModel> conditionalModels);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(string whereString, object parameters);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, string whereString, object parameters);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereClass(ClassType whereClass, bool ignoreDefaultValue);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereClass(List`1<ClassType> whereClassList, bool ignoreDefaultValue);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression, bool isAutoFill);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(List`1<OrderByModel> models);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(string orderByFields);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, string orderByFields);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> GroupBy(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> GroupBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> GroupBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> GroupBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> GroupBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression);
    public abstract virtual TResult Max(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public abstract virtual TResult Min(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public abstract virtual TResult Sum(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public abstract virtual TResult Avg(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Take(int num);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Clone();
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> AS(string tableName);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> AS(string tableName);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> ClearFilter();
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Filter(string FilterName, bool isDisabledGobalFilter);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> ClearFilter(Type[] types);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> ClearFilter();
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> ClearFilter();
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> ClearFilter();
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> AddParameters(object parameters);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> AddParameters(SugarParameter[] parameters);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> AddParameters(List`1<SugarParameter> parameters);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> With(string withString);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WithCache(int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WithCacheIF(bool isCache, int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Distinct();
    public abstract virtual bool Any(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
}
public interface SqlSugar.ISugarQueryable`9 {
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Hints(string hints);
    public abstract virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> LeftJoinIF(bool isLeftJoin, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> InnerJoinIF(bool isJoin, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> LeftJoin(ISugarQueryable`1<T10> joinQueryable, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> InnerJoin(ISugarQueryable`1<T10> joinQueryable, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> RightJoin(ISugarQueryable`1<T10> joinQueryable, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> LeftJoin(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> FullJoin(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> InnerJoin(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> RightJoin(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> LeftJoin(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> FullJoin(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> InnerJoin(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> RightJoin(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression, string tableName);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(string expShortName, FormattableString expressionString);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(List`1<IConditionalModel> conditionalModels);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(string whereString, object parameters);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, string whereString, object parameters);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public abstract virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression, bool isAutoFill);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(List`1<OrderByModel> models);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(string orderByFields);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression, OrderByType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`2<T, object>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression);
    public abstract virtual TResult Max(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public abstract virtual TResult Min(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public abstract virtual TResult Sum(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public abstract virtual TResult Avg(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Take(int num);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Clone();
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> AS(string tableName);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> AS(string tableName);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> ClearFilter();
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Filter(string FilterName, bool isDisabledGobalFilter);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> ClearFilter(Type[] types);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> ClearFilter();
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> ClearFilter();
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> ClearFilter();
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> AddParameters(object parameters);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> AddParameters(SugarParameter[] parameters);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> AddParameters(List`1<SugarParameter> parameters);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> With(string withString);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WithCache(int cacheDurationInSeconds);
    public abstract virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WithCacheIF(bool isCache, int cacheDurationInSeconds);
}
public interface SqlSugar.ISugarRepository {
    public ISqlSugarClient Context { get; public set; }
    public abstract virtual ISqlSugarClient get_Context();
    public abstract virtual void set_Context(ISqlSugarClient value);
}
public interface SqlSugar.ISugarUnitOfWork {
    public ISqlSugarClient Db { get; }
    public ITenant Tenant { get; }
    public abstract virtual ISqlSugarClient get_Db();
    public abstract virtual ITenant get_Tenant();
    public abstract virtual SimpleClient`1<T> GetRepository();
}
public interface SqlSugar.ISugarUnitOfWork`1 {
    public ISqlSugarClient Db { get; public set; }
    public abstract virtual ISqlSugarClient get_Db();
    public abstract virtual void set_Db(ISqlSugarClient value);
    public abstract virtual T CreateContext(bool isTran);
}
public interface SqlSugar.ISugarUnitOfWorkClear {
    public abstract virtual RepositoryType GetMyRepository();
    public abstract virtual bool Commit();
}
public interface SqlSugar.ITenant {
    public abstract virtual String[] GetCurrentConfigIds();
    public abstract virtual void BeginTran();
    public abstract virtual void BeginTran(IsolationLevel iso);
    public abstract virtual void CommitTran();
    public abstract virtual void RollbackTran();
    public abstract virtual Task BeginTranAsync();
    public abstract virtual Task BeginTranAsync(IsolationLevel iso);
    public abstract virtual Task CommitTranAsync();
    public abstract virtual Task RollbackTranAsync();
    public abstract virtual void ChangeDatabase(object configId);
    public abstract virtual void ChangeDatabase(Func`2<ConnectionConfig, bool> changeExpression);
    public abstract virtual SqlSugarTransaction UseTran();
    public abstract virtual DbResult`1<bool> UseTran(Action action, Action`1<Exception> errorCallBack);
    public abstract virtual Task`1<DbResult`1<bool>> UseTranAsync(Func`1<Task> action, Action`1<Exception> errorCallBack);
    public abstract virtual DbResult`1<T> UseTran(Func`1<T> action, Action`1<Exception> errorCallBack);
    public abstract virtual Task`1<DbResult`1<T>> UseTranAsync(Func`1<Task`1<T>> action, Action`1<Exception> errorCallBack);
    public abstract virtual void AddConnection(ConnectionConfig connection);
    public abstract virtual SqlSugarProvider GetConnection(object configId);
    public abstract virtual void RemoveConnection(object configId);
    public abstract virtual SqlSugarScopeProvider GetConnectionScope(object configId);
    public abstract virtual SqlSugarProvider GetConnectionWithAttr();
    public abstract virtual SqlSugarScopeProvider GetConnectionScopeWithAttr();
    public abstract virtual ISugarQueryable`1<T> QueryableWithAttr();
    public abstract virtual IInsertable`1<T> InsertableWithAttr(T insertObj);
    public abstract virtual IInsertable`1<T> InsertableWithAttr(List`1<T> insertObjs);
    public abstract virtual IUpdateable`1<T> UpdateableWithAttr(T updateObj);
    public abstract virtual IUpdateable`1<T> UpdateableWithAttr();
    public abstract virtual IUpdateable`1<T> UpdateableWithAttr(List`1<T> updateObjs);
    public abstract virtual IDeleteable`1<T> DeleteableWithAttr(T deleteObjs);
    public abstract virtual IDeleteable`1<T> DeleteableWithAttr(List`1<T> deleteObjs);
    public abstract virtual IDeleteable`1<T> DeleteableWithAttr();
    public abstract virtual bool IsAnyConnection(object configId);
    public abstract virtual void Close();
    public abstract virtual void Open();
}
public interface SqlSugar.IUpdateable`1 {
    public UpdateBuilder UpdateBuilder { get; public set; }
    public bool UpdateParameterIsNull { get; public set; }
    public abstract virtual UpdateBuilder get_UpdateBuilder();
    public abstract virtual void set_UpdateBuilder(UpdateBuilder value);
    public abstract virtual bool get_UpdateParameterIsNull();
    public abstract virtual void set_UpdateParameterIsNull(bool value);
    public abstract virtual int ExecuteCommandWithOptLock(bool isThrowError);
    public abstract virtual int ExecuteCommandWithOptLockIF(Nullable`1<bool> IsVersionValidation, Nullable`1<bool> IsOptLock);
    public abstract virtual Task`1<int> ExecuteCommandWithOptLockAsync(bool isThrowError);
    public abstract virtual int ExecuteCommand();
    public abstract virtual bool ExecuteCommandHasChange();
    public abstract virtual Task`1<int> ExecuteCommandAsync();
    public abstract virtual Task`1<int> ExecuteCommandAsync(CancellationToken token);
    public abstract virtual Task`1<bool> ExecuteCommandHasChangeAsync();
    public abstract virtual Task`1<bool> ExecuteCommandHasChangeAsync(CancellationToken token);
    public abstract virtual IUpdateable`1<T> AS(string tableName);
    public abstract virtual IUpdateable`1<T> AsType(Type tableNameType);
    public abstract virtual IUpdateable`1<T> With(string lockString);
    public abstract virtual IUpdateable`1<T> In(Expression`1<Func`2<T, object>> inField, ISugarQueryable`1<PkType> childQueryExpression);
    public abstract virtual IUpdateable`1<T> Where(Expression`1<Func`2<T, bool>> expression);
    public abstract virtual IUpdateable`1<T> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public abstract virtual IUpdateable`1<T> Where(string whereSql, object parameters);
    public abstract virtual IUpdateable`1<T> Where(string fieldName, string conditionalType, object fieldValue);
    public abstract virtual IUpdateable`1<T> WhereColumns(Expression`1<Func`2<T, object>> columns);
    public abstract virtual IUpdateable`1<T> WhereColumns(string columnName);
    public abstract virtual IUpdateable`1<T> WhereColumns(String[] columnNames);
    public abstract virtual IUpdateable`1<T> Where(List`1<IConditionalModel> conditionalModels);
    public abstract virtual IUpdateable`1<T> UpdateColumns(Expression`1<Func`2<T, object>> columns);
    public abstract virtual IUpdateable`1<T> UpdateColumns(Expression`1<Func`2<T, object>> columns, bool appendColumnsByDataFilter);
    public abstract virtual IUpdateable`1<T> UpdateColumns(String[] columns);
    public abstract virtual IUpdateable`1<T> UpdateColumns(String[] columns, bool appendColumnsByDataFilter);
    public abstract virtual IUpdateable`1<T> SetColumns(Expression`1<Func`2<T, bool>> columns);
    public abstract virtual IUpdateable`1<T> SetColumns(Expression`1<Func`2<T, T>> columns);
    public abstract virtual IUpdateable`1<T> SetColumns(Expression`1<Func`2<T, T>> columns, bool appendColumnsByDataFilter);
    public abstract virtual IUpdateable`1<T> SetColumns(string fieldName, object fieldValue);
    public abstract virtual IUpdateable`1<T> SetColumns(Expression`1<Func`2<T, object>> filedNameExpression, object fieldValue);
    public abstract virtual IUpdateable`1<T> SetColumns(Expression`1<Func`2<T, object>> filedNameExpression, Expression`1<Func`2<T, object>> valueExpression);
    public abstract virtual IUpdateable`1<T> SetColumnsIF(bool isUpdateColumns, Expression`1<Func`2<T, object>> filedNameExpression, object fieldValue);
    public abstract virtual IUpdateable`1<T> UpdateColumnsIF(bool isUpdateColumns, Expression`1<Func`2<T, object>> columns);
    public abstract virtual IUpdateable`1<T> UpdateColumnsIF(bool isUpdateColumns, String[] columns);
    public abstract virtual IUpdateable`1<T> SetColumnsIF(bool isUpdateColumns, Expression`1<Func`2<T, T>> columns);
    public abstract virtual IUpdateable`1<T> SetColumnsIF(bool isUpdateColumns, Expression`1<Func`2<T, bool>> columns);
    public abstract virtual IUpdateable`1<T> IgnoreColumns(bool ignoreAllNullColumns, bool isOffIdentity, bool ignoreAllDefaultValue);
    public abstract virtual IUpdateable`1<T> IgnoreColumns(Expression`1<Func`2<T, object>> columns);
    public abstract virtual IUpdateable`1<T> IgnoreColumnsIF(bool isIgnore, Expression`1<Func`2<T, object>> columns);
    public abstract virtual IUpdateable`1<T> IgnoreColumns(String[] columns);
    public abstract virtual IUpdateable`1<T> IgnoreNullColumns(bool isIgnoreNull);
    public abstract virtual IUpdateable`1<T> IsEnableUpdateVersionValidation();
    public abstract virtual IUpdateable`1<T> EnableDiffLogEvent(object businessData);
    public abstract virtual IUpdateable`1<T> EnableDiffLogEventIF(bool isEnableDiffLog, object businessData);
    public abstract virtual IUpdateable`1<T> ReSetValue(Action`1<T> setValueExpression);
    public abstract virtual IUpdateable`1<T> PublicSetColumns(Expression`1<Func`2<T, object>> filedNameExpression, string computationalSymbol);
    public abstract virtual IUpdateable`1<T> PublicSetColumns(Expression`1<Func`2<T, object>> filedNameExpression, Expression`1<Func`2<T, object>> ValueExpExpression);
    public abstract virtual IUpdateable`1<T> RemoveDataCache();
    public abstract virtual IUpdateable`1<T> RemoveDataCache(string likeString);
    public abstract virtual IUpdateable`1<T> CallEntityMethod(Expression`1<Action`1<T>> method);
    public abstract virtual KeyValuePair`2<string, List`1<SugarParameter>> ToSql();
    public abstract virtual string ToSqlString();
    public abstract virtual void AddQueue();
    public abstract virtual SplitTableUpdateProvider`1<T> SplitTable(Func`2<List`1<SplitTableInfo>, IEnumerable`1<SplitTableInfo>> getTableNamesFunc);
    public abstract virtual SplitTableUpdateByObjectProvider`1<T> SplitTable();
    public abstract virtual IUpdateable`1<T> EnableQueryFilter();
    public abstract virtual IUpdateable`1<T> Clone();
    public abstract virtual IUpdateable`2<T, T2> InnerJoin(Expression`1<Func`3<T, T2, bool>> joinExpress);
    public abstract virtual IUpdateable`2<T, T2> InnerJoin(Expression`1<Func`3<T, T2, bool>> joinExpress, string tableName);
    public abstract virtual IUpdateable`2<T, T2> InnerJoin(ISugarQueryable`1<T> queryable, Expression`1<Func`3<T, T2, bool>> joinExpress);
    public abstract virtual UpdateablePage`1<T> PageSize(int pageSize);
    public abstract virtual IUpdateable`1<T> In(Object[] ids);
    public abstract virtual ParameterUpdateable`1<T> UseParameter();
}
public interface SqlSugar.IUpdateable`2 {
    public abstract virtual int ExecuteCommand();
    public abstract virtual Task`1<int> ExecuteCommandAsync();
    public abstract virtual IUpdateable`3<T, T2, T3> InnerJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpress);
    public abstract virtual IUpdateable`2<T, T2> SetColumns(Expression`1<Func`3<T, T2, T>> columns);
    public abstract virtual IUpdateable`2<T, T2> Where(Expression`1<Func`3<T, T2, bool>> whereExpression);
}
public interface SqlSugar.IUpdateable`3 {
    public abstract virtual IUpdateable`4<T, T2, T3, T4> InnerJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpress);
    public abstract virtual int ExecuteCommand();
    public abstract virtual Task`1<int> ExecuteCommandAsync();
    public abstract virtual IUpdateable`3<T, T2, T3> SetColumns(Expression`1<Func`4<T, T2, T3, T>> columns);
    public abstract virtual IUpdateable`3<T, T2, T3> Where(Expression`1<Func`4<T, T2, T3, bool>> whereExpression);
}
public interface SqlSugar.IUpdateable`4 {
    public abstract virtual int ExecuteCommand();
    public abstract virtual Task`1<int> ExecuteCommandAsync();
    public abstract virtual IUpdateable`4<T, T2, T3, T4> SetColumns(Expression`1<Func`5<T, T2, T3, T4, T>> columns);
    public abstract virtual IUpdateable`4<T, T2, T3, T4> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> whereExpression);
}
public class SqlSugar.JoinInfoParameter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IFuncModel <Models>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private JoinType <Type>k__BackingField;
    public string TableName { get; public set; }
    public string ShortName { get; public set; }
    public IFuncModel Models { get; public set; }
    public JoinType Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public IFuncModel get_Models();
    [CompilerGeneratedAttribute]
public void set_Models(IFuncModel value);
    [CompilerGeneratedAttribute]
public JoinType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(JoinType value);
}
public class SqlSugar.JoinMapper : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AsName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbName>k__BackingField;
    public string AsName { get; public set; }
    public string DbName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AsName();
    [CompilerGeneratedAttribute]
public void set_AsName(string value);
    [CompilerGeneratedAttribute]
public string get_DbName();
    [CompilerGeneratedAttribute]
public void set_DbName(string value);
}
public class SqlSugar.JoinModel : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ObjectFuncModel <OnWhereList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private JoinType <JoinType>k__BackingField;
    public string TableName { get; public set; }
    public string ShortName { get; public set; }
    public ObjectFuncModel OnWhereList { get; public set; }
    public JoinType JoinType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public ObjectFuncModel get_OnWhereList();
    [CompilerGeneratedAttribute]
public void set_OnWhereList(ObjectFuncModel value);
    [CompilerGeneratedAttribute]
public JoinType get_JoinType();
    [CompilerGeneratedAttribute]
public void set_JoinType(JoinType value);
}
public class SqlSugar.JoinQueryInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private JoinType <JoinType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <JoinIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <JoinWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <EntityType>k__BackingField;
    public JoinType JoinType { get; public set; }
    public string TableName { get; public set; }
    public string ShortName { get; public set; }
    public int JoinIndex { get; public set; }
    public string JoinWhere { get; public set; }
    public Type EntityType { get; public set; }
    [CompilerGeneratedAttribute]
public JoinType get_JoinType();
    [CompilerGeneratedAttribute]
public void set_JoinType(JoinType value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public int get_JoinIndex();
    [CompilerGeneratedAttribute]
public void set_JoinIndex(int value);
    [CompilerGeneratedAttribute]
public string get_JoinWhere();
    [CompilerGeneratedAttribute]
public void set_JoinWhere(string value);
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(Type value);
}
public class SqlSugar.JoinQueryInfos : object {
    public JoinQueryInfos(JoinType joinType, bool whereExpress);
    public JoinQueryInfos(JoinType joinType, bool whereExpress, JoinType joinType2, bool whereExpress2);
    public JoinQueryInfos(JoinType joinType, bool whereExpress, JoinType joinType2, bool whereExpress2, JoinType joinType3, bool whereExpress3);
    public JoinQueryInfos(JoinType joinType, bool whereExpress, JoinType joinType2, bool whereExpress2, JoinType joinType3, bool whereExpress3, JoinType joinType4, bool whereExpress4);
    public JoinQueryInfos(JoinType joinType, bool whereExpress, JoinType joinType2, bool whereExpress2, JoinType joinType3, bool whereExpress3, JoinType joinType4, bool whereExpress4, JoinType joinType5, bool whereExpress5);
    public JoinQueryInfos(JoinType joinType, bool whereExpress, JoinType joinType2, bool whereExpress2, JoinType joinType3, bool whereExpress3, JoinType joinType4, bool whereExpress4, JoinType joinType5, bool whereExpress5, JoinType joinType6, bool whereExpress6);
    public JoinQueryInfos(JoinType joinType, bool whereExpress, JoinType joinType2, bool whereExpress2, JoinType joinType3, bool whereExpress3, JoinType joinType4, bool whereExpress4, JoinType joinType5, bool whereExpress5, JoinType joinType6, bool whereExpress6, JoinType joinType7, bool whereExpress7);
    public JoinQueryInfos(JoinType joinType, bool whereExpress, JoinType joinType2, bool whereExpress2, JoinType joinType3, bool whereExpress3, JoinType joinType4, bool whereExpress4, JoinType joinType5, bool whereExpress5, JoinType joinType6, bool whereExpress6, JoinType joinType7, bool whereExpress7, JoinType joinType8, bool whereExpress8);
    public JoinQueryInfos(JoinType joinType, bool whereExpress, JoinType joinType2, bool whereExpress2, JoinType joinType3, bool whereExpress3, JoinType joinType4, bool whereExpress4, JoinType joinType5, bool whereExpress5, JoinType joinType6, bool whereExpress6, JoinType joinType7, bool whereExpress7, JoinType joinType8, bool whereExpress8, JoinType joinType9, bool whereExpress9);
    public JoinQueryInfos(JoinType joinType, bool whereExpress, JoinType joinType2, bool whereExpress2, JoinType joinType3, bool whereExpress3, JoinType joinType4, bool whereExpress4, JoinType joinType5, bool whereExpress5, JoinType joinType6, bool whereExpress6, JoinType joinType7, bool whereExpress7, JoinType joinType8, bool whereExpress8, JoinType joinType9, bool whereExpress9, JoinType joinType10, bool whereExpress10);
    public JoinQueryInfos(JoinType joinType, bool whereExpress, JoinType joinType2, bool whereExpress2, JoinType joinType3, bool whereExpress3, JoinType joinType4, bool whereExpress4, JoinType joinType5, bool whereExpress5, JoinType joinType6, bool whereExpress6, JoinType joinType7, bool whereExpress7, JoinType joinType8, bool whereExpress8, JoinType joinType9, bool whereExpress9, JoinType joinType10, bool whereExpress10, JoinType joinType11, bool whereExpress11);
}
public enum SqlSugar.JoinType : Enum {
    public int value__;
    public static JoinType Inner;
    public static JoinType Left;
    public static JoinType Right;
    public static JoinType Full;
    public static JoinType Cross;
}
internal class SqlSugar.Json2SqlHelper : object {
    public static bool IsSqlValue(string valueString);
    public static string GetType(string valueString);
    public static string GetValue(string valueString);
    public static List`1<string> GetTableNames(string json);
}
public class SqlSugar.JsonClient : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlSugarClient <Context>k__BackingField;
    public ISqlSugarClient Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ISqlSugarClient get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ISqlSugarClient value);
    public sealed virtual IJsonQueryableProvider`1<JsonQueryResult> Queryable(string json);
    public sealed virtual IJsonProvider`1<JsonInsertResult> Insertable(string json);
    public sealed virtual IJsonProvider`1<JsonUpdateResult> Updateable(string json);
    public sealed virtual IJsonProvider`1<JsonDeleteResult> Deleteable(string json);
    public sealed virtual List`1<string> GetTableNameList(string json);
}
public class SqlSugar.JsonColumnConfig : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ValidateMessage>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Validate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <AllowEdit>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public string ValidateMessage { get; public set; }
    public object Validate { get; public set; }
    private Nullable`1<bool> AllowEdit { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_ValidateMessage();
    [CompilerGeneratedAttribute]
public void set_ValidateMessage(string value);
    [CompilerGeneratedAttribute]
public object get_Validate();
    [CompilerGeneratedAttribute]
public void set_Validate(object value);
    [CompilerGeneratedAttribute]
private Nullable`1<bool> get_AllowEdit();
    [CompilerGeneratedAttribute]
private void set_AllowEdit(Nullable`1<bool> value);
}
internal class SqlSugar.JsonCommonProvider : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlBuilder <sqlBuilder>k__BackingField;
    public ISqlBuilder sqlBuilder { get; public set; }
    public int ParameterIndex { get; }
    public JsonCommonProvider(ISqlSugarClient context);
    [CompilerGeneratedAttribute]
public ISqlBuilder get_sqlBuilder();
    [CompilerGeneratedAttribute]
public void set_sqlBuilder(ISqlBuilder value);
    public int get_ParameterIndex();
    public JsonTableNameInfo GetTableName(JToken item);
    public KeyValuePair`2<string, SugarParameter[]> GetWhere(string item, SqlSugarProvider context);
    public KeyValuePair`2<string, SugarParameter[]> GetWhere(JToken item, SqlSugarProvider context);
    private static bool IsConditionalModel(string value);
}
public class SqlSugar.JsonDeleteableProvider : object {
    private ISqlSugarClient context;
    private JObject jObject;
    private JsonCommonProvider jsonCommonProvider;
    private IDeleteable`1<object> sugarDeleteable;
    public JsonDeleteableProvider(ISqlSugarClient context, JObject jObject);
    public sealed virtual SqlObjectResult ToSql();
    public sealed virtual List`1<SqlObjectResult> ToSqlList();
    private void AppendAll(JsonQueryParameter jsonQueryParameter, JToken item);
    private void AppendTable(JToken item);
    private void AppendWhere(JToken item);
    private static bool IsTable(string name);
    private static bool IsWhere(string name);
    public string ToSqlString();
    public sealed virtual JsonDeleteResult ToResult();
    private sealed virtual override List`1<string> SqlSugar.IJsonProvider<SqlSugar.JsonDeleteResult>.ToSqlString();
}
public class SqlSugar.JsonDeleteResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <UpdateRows>k__BackingField;
    public int UpdateRows { get; public set; }
    [CompilerGeneratedAttribute]
public int get_UpdateRows();
    [CompilerGeneratedAttribute]
public void set_UpdateRows(int value);
}
public class SqlSugar.JsonInsertableProvider : object {
    private ISqlSugarClient context;
    private JObject jObject;
    private JsonCommonProvider jsonCommonProvider;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <IdentityId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Count>k__BackingField;
    private IInsertable`1<Dictionary`2<string, object>> sugarInsertable;
    private string TableName { get; private set; }
    private string IdentityId { get; private set; }
    private int Count { get; private set; }
    public JsonInsertableProvider(ISqlSugarClient context, JObject jObject);
    private void AppendIdentity(JToken item);
    private void AppendName(JToken item);
    private void AppendRow(JToken item);
    private static bool IsColumns(string name);
    private static bool IsName(string name);
    private static bool IsIdentity(string name);
    private List`1<SqlObjectResult> ToSqlHelper();
    public sealed virtual SqlObjectResult ToSql();
    public sealed virtual JsonInsertResult ToResult();
    public sealed virtual List`1<SqlObjectResult> ToSqlList();
    private void AppendAll(JsonQueryParameter jsonQueryParameter, JToken item);
    public sealed virtual List`1<string> ToSqlString();
    [CompilerGeneratedAttribute]
private string get_TableName();
    [CompilerGeneratedAttribute]
private void set_TableName(string value);
    [CompilerGeneratedAttribute]
private string get_IdentityId();
    [CompilerGeneratedAttribute]
private void set_IdentityId(string value);
    [CompilerGeneratedAttribute]
private int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
}
public class SqlSugar.JsonInsertResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <IdentityValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <InsertCount>k__BackingField;
    public int IdentityValue { get; public set; }
    public int InsertCount { get; public set; }
    [CompilerGeneratedAttribute]
public int get_IdentityValue();
    [CompilerGeneratedAttribute]
public void set_IdentityValue(int value);
    [CompilerGeneratedAttribute]
public int get_InsertCount();
    [CompilerGeneratedAttribute]
public void set_InsertCount(int value);
}
[ExtensionAttribute]
public static class SqlSugar.JsonProviderConfig : object {
    public static string KeyInsertable;
    public static string KeyUpdateable;
    public static string KeyQueryable;
    public static string KeyDeleteable;
    private static Dictionary`2<string, string> words;
    private static JsonProviderConfig();
    public static string Rename(string key, string name);
    [ExtensionAttribute]
internal static string Get(string value);
    internal static string GetWord(string key);
}
public enum SqlSugar.JsonProviderType : Enum {
    public int value__;
    public static JsonProviderType Queryable;
    public static JsonProviderType QueryableCount;
    public static JsonProviderType Insertable;
    public static JsonProviderType InsertableIdentity;
    public static JsonProviderType Updateable;
    public static JsonProviderType Deleteable;
}
public class SqlSugar.JsonQueryableProvider : object {
    private int appendIndex;
    private List`1<JToken> appendTypeNames;
    private JObject jobject;
    private ISqlSugarClient context;
    private ISugarQueryable`1<object> sugarQueryable;
    private JsonCommonProvider jsonCommonProvider;
    private List`1<JsonTableConfig> jsonTableConfigs;
    private bool IsDescription;
    private List`1<JsonQueryableProvider_TableInfo> TableInfos;
    private bool IsExecutedBeforeWhereFunc;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action <BeforeWhereFunc>k__BackingField;
    private Action BeforeWhereFunc { get; private set; }
    public JsonQueryableProvider(ISqlSugarClient context, JObject jobject);
    private void ApendJoinLastAfter(JToken item);
    private bool IsAppendSelect();
    private void AppendFrom(JToken item);
    private void AppendGroupBy(JToken item);
    private void AppendHaving(JToken item);
    private bool AppendJoin(JToken item);
    private static JoinType GetJoinType(JToken obj);
    private void AfterJoin();
    private void BeforeJoin();
    private void AppendOrderBy(JToken item);
    private int AppendPageSize(JToken item);
    private int AppendPageNumber(JToken item);
    private bool AppendSelect(JToken item);
    private List`1<SelectModel> FilterSelect(List`1<SelectModel> obj);
    private bool IsMyColums(string tableName, string columnName);
    private string GetColumnName(string filedName);
    private string GetTableName(string filedName);
    private void AppendWhere(JToken item);
    private void AfterWhere();
    private void BeforeWhere();
    private static bool IsJoin(string name);
    private static bool IsJoinLastAfter(string name);
    private static bool IsPageSize(string name);
    private static bool IsPageNumber(string name);
    private static bool IsSelect(string name);
    private static bool IsHaving(string name);
    private static bool IsGroupBy(string name);
    private static bool IsOrderBy(string name);
    private static bool IsWhere(string name);
    private static bool IsForm(string name);
    private static bool IsAnySelect(List`1<JToken> appendTypeNames);
    private static bool IsAnyJoin(List`1<JToken> appendTypeNames);
    private int GetSort(string name);
    private void AddMasterTableInfos(JsonTableNameInfo tableNameInfo);
    private void AddTableInfos(string tableName, string shortName, bool isMaster);
    private JsonQueryableProvider_TableInfo GetMasterTable();
    public sealed virtual IJsonQueryableProvider`1<JsonQueryResult> ShowDesciption();
    public sealed virtual IJsonQueryableProvider`1<JsonQueryResult> UseAuthentication(JsonTableConfig config);
    public sealed virtual IJsonQueryableProvider`1<JsonQueryResult> UseAuthentication(List`1<JsonTableConfig> configs);
    public sealed virtual SqlObjectResult ToSql();
    public sealed virtual JsonQueryResult ToResult();
    public sealed virtual List`1<SqlObjectResult> ToSqlList();
    public sealed virtual List`1<string> ToSqlString();
    private void AppendQueryableAll(JsonQueryParameter jsonQueryParameter, JToken item);
    private void SetQueryableParameterIndex();
    [CompilerGeneratedAttribute]
private Action get_BeforeWhereFunc();
    [CompilerGeneratedAttribute]
private void set_BeforeWhereFunc(Action value);
    private void RegisterAop();
    private List`1<IConditionalModel> GetConvertConditions(List`1<IConditionalModel> conditions);
    private List`1<SqlObjectResult> ToSqlDefault();
    private List`1<JToken> GetTypeNames();
    private JsonQueryResult ToResultDefault();
    private List`1<SqlObjectResult> ToPageDefault(List`1<SqlObjectResult> result, JsonQueryParameter jsonQueryParameter);
    private void AddDefaultSql(List`1<SqlObjectResult> result);
    private void AddPageSql(List`1<SqlObjectResult> result, JsonQueryParameter jsonQueryParameter);
    private void AddDescription();
    private void AddList(JsonQueryResult result, SqlObjectResult SqlList);
    private void AddCount(JsonQueryResult result, SqlObjectResult SqlCount);
    [CompilerGeneratedAttribute]
private void <RegisterAop>b__60_0();
    [CompilerGeneratedAttribute]
private int <GetTypeNames>b__63_0(JToken it);
}
internal class SqlSugar.JsonQueryableProvider_TableInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsMaster>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsJoin>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Index>k__BackingField;
    public string Table { get; public set; }
    public string ShortName { get; public set; }
    public bool IsMaster { get; public set; }
    public bool IsJoin { get; public set; }
    public int Index { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(string value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsMaster();
    [CompilerGeneratedAttribute]
public void set_IsMaster(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsJoin();
    [CompilerGeneratedAttribute]
public void set_IsJoin(bool value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
}
internal class SqlSugar.JsonQueryParameter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSelect>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsJoin>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <PageIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <PageSize>k__BackingField;
    public bool IsSelect { get; public set; }
    public bool IsJoin { get; public set; }
    public Nullable`1<int> PageIndex { get; public set; }
    public Nullable`1<int> PageSize { get; public set; }
    public bool JoinNoSelect { get; }
    public bool IsPage { get; }
    [CompilerGeneratedAttribute]
public bool get_IsSelect();
    [CompilerGeneratedAttribute]
public void set_IsSelect(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsJoin();
    [CompilerGeneratedAttribute]
public void set_IsJoin(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageIndex();
    [CompilerGeneratedAttribute]
public void set_PageIndex(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(Nullable`1<int> value);
    public bool get_JoinNoSelect();
    public bool get_IsPage();
}
public class SqlSugar.JsonQueryResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, string> <TableInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ToTalRows>k__BackingField;
    public object Data { get; public set; }
    public Dictionary`2<string, string> TableInfo { get; public set; }
    public int ToTalRows { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(object value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_TableInfo();
    [CompilerGeneratedAttribute]
public void set_TableInfo(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public int get_ToTalRows();
    [CompilerGeneratedAttribute]
public void set_ToTalRows(int value);
}
public class SqlSugar.JsonTableConfig : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableDescription>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<IConditionalModel> <Conditionals>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <AllowQuery>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <AllowUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <AllowDelete>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <AllowInsert>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<JsonColumnConfig> <Columns>k__BackingField;
    public string TableName { get; public set; }
    public string TableDescription { get; public set; }
    public List`1<IConditionalModel> Conditionals { get; public set; }
    public Nullable`1<bool> AllowQuery { get; public set; }
    public Nullable`1<bool> AllowUpdate { get; public set; }
    public Nullable`1<bool> AllowDelete { get; public set; }
    public Nullable`1<bool> AllowInsert { get; public set; }
    public List`1<JsonColumnConfig> Columns { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_TableDescription();
    [CompilerGeneratedAttribute]
public void set_TableDescription(string value);
    [CompilerGeneratedAttribute]
public List`1<IConditionalModel> get_Conditionals();
    [CompilerGeneratedAttribute]
public void set_Conditionals(List`1<IConditionalModel> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowQuery();
    [CompilerGeneratedAttribute]
public void set_AllowQuery(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowUpdate();
    [CompilerGeneratedAttribute]
public void set_AllowUpdate(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowDelete();
    [CompilerGeneratedAttribute]
public void set_AllowDelete(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowInsert();
    [CompilerGeneratedAttribute]
public void set_AllowInsert(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public List`1<JsonColumnConfig> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(List`1<JsonColumnConfig> value);
}
public class SqlSugar.JsonTableNameInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Scheme>k__BackingField;
    public string TableName { get; public set; }
    public string ShortName { get; public set; }
    public string Scheme { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public string get_Scheme();
    [CompilerGeneratedAttribute]
public void set_Scheme(string value);
}
public class SqlSugar.JsonUpdateableProvider : object {
    private ISqlSugarClient context;
    private JObject jObject;
    private JsonCommonProvider jsonCommonProvider;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <isList>k__BackingField;
    private IUpdateable`1<Dictionary`2<string, object>> sugarUpdateable;
    private string TableName { get; private set; }
    private bool isList { get; private set; }
    public JsonUpdateableProvider(ISqlSugarClient context, JObject jObject);
    private void AppendRow(JToken item);
    private void AppendTable(JToken item);
    private void AppendWhere(JToken item);
    private void AppendWhereColumns(JToken item);
    private static bool IsColumns(string name);
    private static bool IsWhere(string name);
    private static bool IsWhereColumns(string name);
    private static bool IsTable(string name);
    [CompilerGeneratedAttribute]
private string get_TableName();
    [CompilerGeneratedAttribute]
private void set_TableName(string value);
    [CompilerGeneratedAttribute]
private bool get_isList();
    [CompilerGeneratedAttribute]
private void set_isList(bool value);
    public sealed virtual JsonUpdateResult ToResult();
    public sealed virtual SqlObjectResult ToSql();
    public sealed virtual List`1<SqlObjectResult> ToSqlList();
    private List`1<JToken> GetAppendTypes();
    private void AppendAll(JsonQueryParameter jsonQueryParameter, JToken item);
    public sealed virtual List`1<string> ToSqlString();
}
public class SqlSugar.JsonUpdateResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <UpdateRows>k__BackingField;
    public int UpdateRows { get; public set; }
    [CompilerGeneratedAttribute]
public int get_UpdateRows();
    [CompilerGeneratedAttribute]
public void set_UpdateRows(int value);
}
public class SqlSugar.KdbndpBuilder : SqlBuilderProvider {
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    public string SqlDateNow { get; }
    public string FullSqlDateNow { get; }
    public bool IsUpper { get; }
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
    public virtual string get_SqlDateNow();
    public virtual string get_FullSqlDateNow();
    public virtual string GetTranslationColumnName(string propertyName);
    public virtual string GetTranslationColumnName(string entityName, string propertyName);
    public virtual string GetTranslationTableName(string name);
    public virtual string GetUnionFomatSql(string sql);
    public bool get_IsUpper();
    [CompilerGeneratedAttribute]
private string <GetTranslationColumnName>b__8_0(string it);
}
public class SqlSugar.KdbndpCodeFirst : CodeFirstProvider {
    public virtual void NoExistLogic(EntityInfo entityInfo);
    protected virtual DbColumnInfo EntityColumnToDbColumn(EntityInfo entityInfo, string tableName, EntityColumnInfo item);
    protected virtual void ConvertColumns(List`1<DbColumnInfo> dbColumns);
    protected virtual void ChangeKey(EntityInfo entityInfo, string tableName, EntityColumnInfo item);
}
public class SqlSugar.KdbndpDataAdapter : object {
    private KdbndpCommand command;
    private string sql;
    private KdbndpConnection _sqlConnection;
    public KdbndpCommand SelectCommand { get; public set; }
    public KdbndpDataAdapter(KdbndpCommand command);
    public KdbndpDataAdapter(string sql, KdbndpConnection _sqlConnection);
    public KdbndpCommand get_SelectCommand();
    public void set_SelectCommand(KdbndpCommand value);
    public void Fill(DataTable dt);
    public sealed virtual void Fill(DataSet ds);
}
public class SqlSugar.KdbndpDbBind : DbBindProvider {
    public static List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypesConst;
    public List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypes { get; }
    public List`1<string> StringThrow { get; }
    private static KdbndpDbBind();
    public virtual string GetDbTypeName(string csharpTypeName);
    public virtual string GetPropertyTypeName(string dbTypeName);
    public virtual List`1<KeyValuePair`2<string, CSharpDataType>> get_MappingTypes();
    public virtual List`1<string> get_StringThrow();
}
public class SqlSugar.KdbndpDbFirst : DbFirstProvider {
}
public class SqlSugar.KdbndpDbMaintenance : DbMaintenanceProvider {
    protected string GetDataBaseSql { get; }
    protected string GetColumnInfosByTableNameSql { get; }
    protected string GetTableInfoListSql { get; }
    protected string GetViewInfoListSql { get; }
    protected string CreateDataBaseSql { get; }
    protected string AddPrimaryKeySql { get; }
    protected string AddColumnToTableSql { get; }
    protected string AlterColumnToTableSql { get; }
    protected string BackupDataBaseSql { get; }
    protected string CreateTableSql { get; }
    protected string CreateTableColumn { get; }
    protected string TruncateTableSql { get; }
    protected string BackupTableSql { get; }
    protected string DropTableSql { get; }
    protected string DropColumnToTableSql { get; }
    protected string DropConstraintSql { get; }
    protected string RenameColumnSql { get; }
    protected string AddColumnRemarkSql { get; }
    protected string DeleteColumnRemarkSql { get; }
    protected string IsAnyColumnRemarkSql { get; }
    protected string AddTableRemarkSql { get; }
    protected string DeleteTableRemarkSql { get; }
    protected string IsAnyTableRemarkSql { get; }
    protected string RenameTableSql { get; }
    protected string CreateIndexSql { get; }
    protected string AddDefaultValueSql { get; }
    protected string IsAnyIndexSql { get; }
    protected string IsAnyProcedureSql { get; }
    protected string CheckSystemTablePermissionsSql { get; }
    protected string CreateTableNull { get; }
    protected string CreateTableNotNull { get; }
    protected string CreateTablePirmaryKey { get; }
    protected string CreateTableIdentity { get; }
    public bool IsUpper { get; }
    protected virtual string get_GetDataBaseSql();
    protected virtual string get_GetColumnInfosByTableNameSql();
    protected virtual string get_GetTableInfoListSql();
    protected virtual string get_GetViewInfoListSql();
    protected virtual string get_CreateDataBaseSql();
    protected virtual string get_AddPrimaryKeySql();
    protected virtual string get_AddColumnToTableSql();
    protected virtual string get_AlterColumnToTableSql();
    protected virtual string get_BackupDataBaseSql();
    protected virtual string get_CreateTableSql();
    protected virtual string get_CreateTableColumn();
    protected virtual string get_TruncateTableSql();
    protected virtual string get_BackupTableSql();
    protected virtual string get_DropTableSql();
    protected virtual string get_DropColumnToTableSql();
    protected virtual string get_DropConstraintSql();
    protected virtual string get_RenameColumnSql();
    protected virtual string get_AddColumnRemarkSql();
    protected virtual string get_DeleteColumnRemarkSql();
    protected virtual string get_IsAnyColumnRemarkSql();
    protected virtual string get_AddTableRemarkSql();
    protected virtual string get_DeleteTableRemarkSql();
    protected virtual string get_IsAnyTableRemarkSql();
    protected virtual string get_RenameTableSql();
    protected virtual string get_CreateIndexSql();
    protected virtual string get_AddDefaultValueSql();
    protected virtual string get_IsAnyIndexSql();
    protected virtual string get_IsAnyProcedureSql();
    protected virtual string get_CheckSystemTablePermissionsSql();
    protected virtual string get_CreateTableNull();
    protected virtual string get_CreateTableNotNull();
    protected virtual string get_CreateTablePirmaryKey();
    protected virtual string get_CreateTableIdentity();
    public virtual List`1<string> GetDbTypes();
    public virtual List`1<string> GetTriggerNames(string tableName);
    public virtual List`1<string> GetFuncList();
    public virtual bool AddDefaultValue(string tableName, string columnName, string defaultValue);
    public virtual List`1<string> GetIndexList(string tableName);
    public virtual List`1<string> GetProcList(string dbName);
    private string GetSchema();
    public virtual bool UpdateColumn(string tableName, DbColumnInfo columnInfo);
    protected string GetType(string tableName, DbColumnInfo columnInfo);
    public virtual bool IsAnyTable(string tableName, bool isCache);
    public virtual bool CreateDatabase(string databaseName, string databaseDirectory);
    public virtual bool AddRemark(EntityInfo entity);
    public virtual bool RenameTable(string oldTableName, string newTableName);
    public virtual bool CreateTable(string tableName, List`1<DbColumnInfo> columns, bool isCreatePrimaryKey);
    protected virtual string GetCreateTableSql(string tableName, List`1<DbColumnInfo> columns);
    protected virtual bool IsAnyDefaultValue(string tableName, string columnName, List`1<DbColumnInfo> columns);
    public virtual bool IsAnyConstraint(string constraintName);
    public virtual bool BackupDataBase(string databaseName, string fullFileName);
    public virtual List`1<DbColumnInfo> GetColumnInfosByTableName(string tableName, bool isCache);
    public bool get_IsUpper();
    private static void ConvertCreateColumnInfo(DbColumnInfo x);
    private bool IsPgModel();
    private bool IsSqlServerModel();
    [CompilerGeneratedAttribute]
private string <CreateTable>b__79_1(DbColumnInfo it);
}
public class SqlSugar.KdbndpDeleteBuilder : DeleteBuilder {
}
public class SqlSugar.KdbndpExpressionContext : ExpressionContext {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    public bool IsUpper { get; }
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
    public virtual string GetTranslationText(string name);
    public virtual string GetTranslationTableName(string entityName, bool isMapping);
    public virtual string GetTranslationColumnName(string columnName);
    public virtual string GetDbColumnName(string entityName, string propertyName);
    public bool get_IsUpper();
    [CompilerGeneratedAttribute]
private string <GetTranslationColumnName>b__11_0(string it);
}
public class SqlSugar.KdbndpFastBuilder : FastBuilder {
    public static Dictionary`2<string, NpgsqlDbType> PgSqlType;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UpdateSql>k__BackingField;
    public string UpdateSql { get; public set; }
    private static KdbndpFastBuilder();
    [CompilerGeneratedAttribute]
public virtual string get_UpdateSql();
    [CompilerGeneratedAttribute]
public virtual void set_UpdateSql(string value);
    [AsyncStateMachineAttribute("SqlSugar.KdbndpFastBuilder/<ExecuteBulkCopyAsync>d__6")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> ExecuteBulkCopyAsync(DataTable dt);
    private void BulkCopy(DataTable dt, string copyString, KdbndpConnection conn, List`1<DbColumnInfo> columns);
    [AsyncStateMachineAttribute("SqlSugar.KdbndpFastBuilder/<UpdateByTempAsync>d__8")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> UpdateByTempAsync(string tableName, string tempName, String[] updateColumns, String[] whereColumns);
    [AsyncStateMachineAttribute("SqlSugar.KdbndpFastBuilder/<CreateTempAsync>d__9`1")]
[DebuggerStepThroughAttribute]
public virtual Task CreateTempAsync(DataTable dt);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0();
}
public class SqlSugar.KdbndpInsertBuilder : InsertBuilder {
    public string SqlTemplate { get; }
    public string SqlTemplateBatch { get; }
    public string SqlTemplateBatchUnion { get; }
    public string SqlTemplateBatchSelect { get; }
    public virtual string get_SqlTemplate();
    public virtual string get_SqlTemplateBatch();
    public virtual string get_SqlTemplateBatchUnion();
    public virtual string get_SqlTemplateBatchSelect();
    public virtual string ToSqlString();
    private bool IsSqlServerModel();
    public virtual string FormatDateTimeOffset(object value);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__8_2(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__8_3(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__8_4(DbColumnInfo it);
}
public class SqlSugar.KdbndpInserttable`1 : InsertableProvider`1<T> {
    public virtual int ExecuteReturnIdentity();
    [AsyncStateMachineAttribute("SqlSugar.KdbndpInserttable`1/<ExecuteReturnIdentityAsync>d__1")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> ExecuteReturnIdentityAsync();
    public virtual KeyValuePair`2<string, List`1<SugarParameter>> ToSql();
    public virtual long ExecuteReturnBigIdentity();
    [AsyncStateMachineAttribute("SqlSugar.KdbndpInserttable`1/<ExecuteReturnBigIdentityAsync>d__4")]
[DebuggerStepThroughAttribute]
public virtual Task`1<long> ExecuteReturnBigIdentityAsync();
    public virtual bool ExecuteCommandIdentityIntoEntity();
    private string GetSql(string sql);
}
public class SqlSugar.KdbndpMethod : DefaultDbMethod {
    public virtual string CharIndexNew(MethodCallExpressionModel model);
    public virtual string CharIndex(MethodCallExpressionModel model);
    public virtual string TrueValue();
    public virtual string FalseValue();
    public virtual string DateDiff(MethodCallExpressionModel model);
    public virtual string IIF(MethodCallExpressionModel model);
    public virtual string Substring(MethodCallExpressionModel model);
    public virtual string DateValue(MethodCallExpressionModel model);
    public virtual string Contains(MethodCallExpressionModel model);
    public virtual string StartsWith(MethodCallExpressionModel model);
    public virtual string EndsWith(MethodCallExpressionModel model);
    public virtual string DateIsSameDay(MethodCallExpressionModel model);
    public virtual string HasValue(MethodCallExpressionModel model);
    public virtual string DateIsSameByType(MethodCallExpressionModel model);
    public virtual string ToDate(MethodCallExpressionModel model);
    public virtual string DateAddByType(MethodCallExpressionModel model);
    public virtual string DateAddDay(MethodCallExpressionModel model);
    public virtual string ToInt32(MethodCallExpressionModel model);
    public virtual string ToInt64(MethodCallExpressionModel model);
    public virtual string ToString(MethodCallExpressionModel model);
    public virtual string ToGuid(MethodCallExpressionModel model);
    public virtual string ToDouble(MethodCallExpressionModel model);
    public virtual string ToBool(MethodCallExpressionModel model);
    public virtual string ToDecimal(MethodCallExpressionModel model);
    public virtual string Length(MethodCallExpressionModel model);
    public virtual string MergeString(String[] strings);
    public virtual string IsNull(MethodCallExpressionModel model);
    public virtual string GetDate();
    public virtual string GetRandom();
    public virtual string EqualTrue(string fieldName);
    public virtual string JsonField(MethodCallExpressionModel model);
    public virtual string JsonContainsFieldName(MethodCallExpressionModel model);
    private string GetJson(object memberName1, object memberName2, bool isLast);
    public virtual string JsonArrayLength(MethodCallExpressionModel model);
    public virtual string JsonParse(MethodCallExpressionModel model);
    public virtual string JsonArrayAny(MethodCallExpressionModel model);
    public virtual string Format(MethodCallExpressionModel model);
    public virtual string JsonListObjectAny(MethodCallExpressionModel model);
    public virtual string GetDateString(string dateValue, string formatString);
    private static bool IsSqlServerModel(MethodCallExpressionModel model);
}
public class SqlSugar.KdbndpProvider : AdoProvider {
    private static Dictionary`2<Type, KdbndpDbType> ArrayMapping;
    public IDbConnection Connection { get; public set; }
    public Action`1<SqlSugarException> ErrorEvent { get; }
    private static KdbndpProvider();
    public virtual IDbConnection get_Connection();
    public virtual void set_Connection(IDbConnection value);
    public virtual void CheckConnection();
    public virtual void BeginTran(string transactionName);
    public virtual void BeginTran(IsolationLevel iso, string transactionName);
    public virtual IDataAdapter GetAdapter();
    public virtual DbCommand GetCommand(string sql, SugarParameter[] parameters);
    public virtual void SetCommandToAdapter(IDataAdapter dataAdapter, DbCommand command);
    public virtual IDataParameter[] ToIDbDataParameter(SugarParameter[] parameters);
    public virtual Action`1<SqlSugarException> get_ErrorEvent();
    [CompilerGeneratedAttribute]
private void <get_ErrorEvent>b__12_0(SqlSugarException it);
}
public class SqlSugar.KdbndpQueryable`1 : QueryableProvider`1<T> {
    public virtual ISugarQueryable`1<T> With(string withString);
}
public class SqlSugar.KdbndpQueryable`10 : QueryableProvider`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> {
}
public class SqlSugar.KdbndpQueryable`11 : QueryableProvider`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> {
}
public class SqlSugar.KdbndpQueryable`12 : QueryableProvider`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> {
}
public class SqlSugar.KdbndpQueryable`2 : QueryableProvider`2<T, T2> {
    public ISugarQueryable`2<T, T2> With(string withString);
}
public class SqlSugar.KdbndpQueryable`3 : QueryableProvider`3<T, T2, T3> {
}
public class SqlSugar.KdbndpQueryable`4 : QueryableProvider`4<T, T2, T3, T4> {
}
public class SqlSugar.KdbndpQueryable`5 : QueryableProvider`5<T, T2, T3, T4, T5> {
}
public class SqlSugar.KdbndpQueryable`6 : QueryableProvider`6<T, T2, T3, T4, T5, T6> {
}
public class SqlSugar.KdbndpQueryable`7 : QueryableProvider`7<T, T2, T3, T4, T5, T6, T7> {
}
public class SqlSugar.KdbndpQueryable`8 : QueryableProvider`8<T, T2, T3, T4, T5, T6, T7, T8> {
}
public class SqlSugar.KdbndpQueryable`9 : QueryableProvider`9<T, T2, T3, T4, T5, T6, T7, T8, T9> {
}
public class SqlSugar.KdbndpQueryBuilder : QueryBuilder {
    public string SqlTemplate { get; }
    public string PageTempalte { get; }
    public string DefaultOrderByTemplate { get; }
    public string GetSelectValue { get; }
    public virtual string get_SqlTemplate();
    public virtual string get_PageTempalte();
    public virtual string get_DefaultOrderByTemplate();
    public virtual bool IsComplexModel(string sql);
    public virtual string ToSqlString();
    public virtual string get_GetSelectValue();
}
public class SqlSugar.KdbndpUpdateBuilder : UpdateBuilder {
    public string SqlTemplateBatch { get; }
    public string SqlTemplateJoin { get; }
    public string SqlTemplateBatchUnion { get; }
    public virtual string get_SqlTemplateBatch();
    public virtual string get_SqlTemplateJoin();
    public virtual string get_SqlTemplateBatchUnion();
    public virtual object FormatValue(object value);
    protected virtual string TomultipleSqlString(List`1<IGrouping`2<int, DbColumnInfo>> groupList);
    private bool IsSqlServerModel();
    private bool IsMySqlModel();
    private StringBuilder GetBatchUpdateSql(StringBuilder batchUpdateSql);
    protected virtual string GetJoinUpdate(string columnsString, String& whereString);
    public virtual string FormatDateTimeOffset(object value);
    [CompilerGeneratedAttribute]
private bool <TomultipleSqlString>b__7_0(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <TomultipleSqlString>b__7_1(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <TomultipleSqlString>b__7_2(DbColumnInfo it);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private string <>n__0(DbColumnInfo columnInfo, object name);
}
internal class SqlSugar.KeyValuePair`3 : ValueType {
    public TKey key;
    public TValue value1;
    public TValue2 value2;
    public KeyValuePair`3(TKey key, TValue value1, TValue2 value2);
}
public class SqlSugar.LambdaExpressionResolve : BaseResolve {
    public LambdaExpressionResolve(ExpressionParameter parameter);
}
public enum SqlSugar.LanguageType : Enum {
    public int value__;
    public static LanguageType Default;
    public static LanguageType Chinese;
    public static LanguageType English;
}
internal static class SqlSugar.LinqRuntimeTypeBuilder : object {
    private static AssemblyName AssemblyName;
    private static ModuleBuilder ModuleBuilder;
    private static Dictionary`2<string, Type> BuiltTypes;
    private static MethodAttributes RuntimeGetSetAttrs;
    private static LinqRuntimeTypeBuilder();
    private static string GetTypeKey(Dictionary`2<string, Type> properties);
    public static Type BuildDynamicType(Dictionary`2<string, Type> properties);
    private static string GetTypeKey(IEnumerable`1<PropertyInfo> properties);
    public static Type GetDynamicType(IEnumerable`1<PropertyInfo> properties);
}
internal class SqlSugar.ListAnyParameter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<EntityColumnInfo> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<string, string> <ConvetColumnFunc>k__BackingField;
    public string Name { get; internal set; }
    public string Sql { get; internal set; }
    public List`1<EntityColumnInfo> Columns { get; internal set; }
    public Func`2<string, string> ConvetColumnFunc { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
internal void set_Sql(string value);
    [CompilerGeneratedAttribute]
public List`1<EntityColumnInfo> get_Columns();
    [CompilerGeneratedAttribute]
internal void set_Columns(List`1<EntityColumnInfo> value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_ConvetColumnFunc();
    [CompilerGeneratedAttribute]
internal void set_ConvetColumnFunc(Func`2<string, string> value);
}
public class SqlSugar.LogicDeleteProvider`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DeleteableProvider`1<T> <Deleteable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DeleteBuilder <DeleteBuilder>k__BackingField;
    public DeleteableProvider`1<T> Deleteable { get; public set; }
    public DeleteBuilder DeleteBuilder { get; public set; }
    [CompilerGeneratedAttribute]
public DeleteableProvider`1<T> get_Deleteable();
    [CompilerGeneratedAttribute]
public void set_Deleteable(DeleteableProvider`1<T> value);
    [CompilerGeneratedAttribute]
public DeleteBuilder get_DeleteBuilder();
    [CompilerGeneratedAttribute]
public void set_DeleteBuilder(DeleteBuilder value);
    public int ExecuteCommand(string LogicFieldName, object deleteValue, string deleteTimeFieldName);
    public int ExecuteCommand(string LogicFieldName, object deleteValue, string deleteTimeFieldName, string userNameFieldName, object userNameValue);
    [AsyncStateMachineAttribute("SqlSugar.LogicDeleteProvider`1/<ExecuteCommandAsync>d__10")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync(string LogicFieldName, object deleteValue, string deleteTimeFieldName, string userNameFieldName, object userNameValue);
    [AsyncStateMachineAttribute("SqlSugar.LogicDeleteProvider`1/<ExecuteCommandAsync>d__11")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync(string LogicFieldName, object deleteValue, string deleteTimeFieldName);
    private void Convert(UpdateableProvider`1<T> updateable);
    private string _ExecuteCommand(string LogicFieldName, ISqlSugarClient& db, String& where, List`1& pars);
}
public class SqlSugar.ManyToMany : object {
    public static ManyToMany Config(AField aField, BField bField);
}
public class SqlSugar.MapperCache`1 : object {
    private Dictionary`2<string, object> caches;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<T> <_list>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlSugarClient <_context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <GetIndex>k__BackingField;
    private List`1<T> _list { get; private set; }
    private ISqlSugarClient _context { get; private set; }
    public int GetIndex { get; public set; }
    public MapperCache`1(List`1<T> list, ISqlSugarClient context);
    [CompilerGeneratedAttribute]
private List`1<T> get__list();
    [CompilerGeneratedAttribute]
private void set__list(List`1<T> value);
    [CompilerGeneratedAttribute]
private ISqlSugarClient get__context();
    [CompilerGeneratedAttribute]
private void set__context(ISqlSugarClient value);
    [CompilerGeneratedAttribute]
public int get_GetIndex();
    [CompilerGeneratedAttribute]
public void set_GetIndex(int value);
    public Result Get(Func`2<List`1<T>, Result> action);
    public Result Get(Func`2<List`1<T>, Result> action, string cachekey);
    public List`1<Result> GetListByPrimaryKeys(Func`2<T, Nullable`1<double>> action);
    public List`1<Result> GetListByPrimaryKeys(Func`2<T, double> action);
    public List`1<Result> GetListByPrimaryKeys(Func`2<T, Nullable`1<decimal>> action);
    public List`1<Result> GetListByPrimaryKeys(Func`2<T, decimal> action);
    public List`1<Result> GetListByPrimaryKeys(Func`2<T, Nullable`1<int>> action);
    public List`1<Result> GetListByPrimaryKeys(Func`2<T, int> action);
    public List`1<Result> GetListByPrimaryKeys(Func`2<T, Nullable`1<long>> action);
    public List`1<Result> GetListByPrimaryKeys(Func`2<T, long> action);
    public List`1<Result> GetListByPrimaryKeys(Func`2<T, string> action);
    public List`1<Result> GetListByPrimaryKeys(Func`2<T, Guid> action);
    public List`1<Result> GetListByPrimaryKeys(Func`2<T, Nullable`1<Guid>> action);
    public List`1<Result> GetListByPrimaryKeys(Func`2<T, DateTime> action);
    public List`1<Result> GetListByPrimaryKeys(Func`2<T, Nullable`1<DateTime>> action);
    private List`1<Result> GetListByPrimaryKeys(Func`2<T, FieldType> action, string key);
}
public class SqlSugar.MapperContext`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlSugarClient <context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<T> <list>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, object> <TempChildLists>k__BackingField;
    public ISqlSugarClient context { get; public set; }
    public List`1<T> list { get; public set; }
    public Dictionary`2<string, object> TempChildLists { get; public set; }
    [CompilerGeneratedAttribute]
public ISqlSugarClient get_context();
    [CompilerGeneratedAttribute]
public void set_context(ISqlSugarClient value);
    [CompilerGeneratedAttribute]
public List`1<T> get_list();
    [CompilerGeneratedAttribute]
public void set_list(List`1<T> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_TempChildLists();
    [CompilerGeneratedAttribute]
public void set_TempChildLists(Dictionary`2<string, object> value);
}
public class SqlSugar.MapperExpression : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MapperExpressionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <FillExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <MappingField1Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <MappingField2Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private QueryBuilder <QueryBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlBuilder <SqlBuilder>k__BackingField;
    public MapperExpressionType Type { get; public set; }
    public Expression FillExpression { get; public set; }
    public Expression MappingField1Expression { get; public set; }
    public Expression MappingField2Expression { get; public set; }
    public SqlSugarProvider Context { get; public set; }
    public QueryBuilder QueryBuilder { get; public set; }
    public ISqlBuilder SqlBuilder { get; public set; }
    [CompilerGeneratedAttribute]
public MapperExpressionType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(MapperExpressionType value);
    [CompilerGeneratedAttribute]
public Expression get_FillExpression();
    [CompilerGeneratedAttribute]
public void set_FillExpression(Expression value);
    [CompilerGeneratedAttribute]
public Expression get_MappingField1Expression();
    [CompilerGeneratedAttribute]
public void set_MappingField1Expression(Expression value);
    [CompilerGeneratedAttribute]
public Expression get_MappingField2Expression();
    [CompilerGeneratedAttribute]
public void set_MappingField2Expression(Expression value);
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public QueryBuilder get_QueryBuilder();
    [CompilerGeneratedAttribute]
public void set_QueryBuilder(QueryBuilder value);
    [CompilerGeneratedAttribute]
public ISqlBuilder get_SqlBuilder();
    [CompilerGeneratedAttribute]
public void set_SqlBuilder(ISqlBuilder value);
}
public class SqlSugar.MapperExpressionInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <EntityInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FieldString>k__BackingField;
    public Type Type { get; public set; }
    public EntityInfo EntityInfo { get; public set; }
    public string FieldName { get; public set; }
    public string FieldString { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public EntityInfo get_EntityInfo();
    [CompilerGeneratedAttribute]
public void set_EntityInfo(EntityInfo value);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public string get_FieldString();
    [CompilerGeneratedAttribute]
public void set_FieldString(string value);
}
public class SqlSugar.MapperExpressionResolve : object {
    private Expression expression;
    private List`1<MapperExpression> mappers;
    private InvalidOperationException ex;
    private SqlSugarProvider context;
    private QueryBuilder querybuiler;
    private ISqlBuilder sqlBuilder;
    private string sql;
    public MapperExpressionResolve(Expression expression, InvalidOperationException ex);
    private void ResolveList();
    private void ResolveMember();
    private void oneToOne(MapperExpressionInfo fillInfo, MapperExpressionInfo mappingFild1Info, MapperExpressionInfo mappingFild1Info2, MapperExpressionInfo selectInfo);
    private void oneToMany(MethodCallExpression methodCallExpression, string methodName, EntityInfo mainEntity, string shortName, MapperExpressionInfo fillInfo, MapperExpressionInfo mappingFild1Info, MapperExpressionInfo mappingFild1Info2);
    private string GetWhereExpression(MethodCallExpression methodCallExpression);
    private MapperExpressionInfo GetSelectInfo(Expression expression);
    private MapperExpressionInfo GetMappingFild2Info(Expression childExpression, MapperExpression mapper);
    private MapperExpressionInfo GetMappingFild1Info(Expression childExpression, MapperExpression mapper);
    private MapperExpressionInfo GetFillInfo(Expression childExpression, MapperExpression mapper);
    private MapperExpression GetMapper(MemberExpression exp);
    public string GetMemberName(MemberExpression memberExpression);
    private void ExtMapper(MapperExpressionInfo fillInfo, MapperExpressionInfo mappingFild1Info, MapperExpressionInfo mappingFild1Info2, MapperExpressionInfo selectInfo);
    public MapperSql GetSql();
    private MapperExpression GetMapperMany(MemberExpression exp);
    private MapperExpressionInfo GetFillInfoMany(Expression childExpression, MapperExpression mapper);
    private MapperExpressionInfo GetMappingFild1ManyInfo(Expression childExpression, MapperExpression mapper);
    private void Error01();
    private void ThrowTrue(bool isError);
}
public enum SqlSugar.MapperExpressionType : Enum {
    public int value__;
    public static MapperExpressionType oneToOne;
    public static MapperExpressionType oneToN;
}
public class SqlSugar.MapperSql : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Sql>k__BackingField;
    public string Sql { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
}
public class SqlSugar.MappingColumn : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <EntityName>k__BackingField;
    public string PropertyName { get; public set; }
    public string DbColumnName { get; public set; }
    public string EntityName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_DbColumnName();
    [CompilerGeneratedAttribute]
public void set_DbColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_EntityName();
    [CompilerGeneratedAttribute]
public void set_EntityName(string value);
}
public class SqlSugar.MappingColumnList : List`1<MappingColumn> {
    public void Add(string propertyName, string dbColumnName, string entityName);
    public void Clear();
}
public class SqlSugar.MappingFieldsExpression : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <LeftColumnExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <RightColumnExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityColumnInfo <LeftEntityColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityColumnInfo <RightEntityColumn>k__BackingField;
    private string _LeftName;
    private string _RightName;
    public Expression LeftColumnExpression { get; public set; }
    public Expression RightColumnExpression { get; public set; }
    public EntityColumnInfo LeftEntityColumn { get; public set; }
    public EntityColumnInfo RightEntityColumn { get; public set; }
    public string LeftName { get; }
    public string RightName { get; }
    [CompilerGeneratedAttribute]
public Expression get_LeftColumnExpression();
    [CompilerGeneratedAttribute]
public void set_LeftColumnExpression(Expression value);
    [CompilerGeneratedAttribute]
public Expression get_RightColumnExpression();
    [CompilerGeneratedAttribute]
public void set_RightColumnExpression(Expression value);
    [CompilerGeneratedAttribute]
public EntityColumnInfo get_LeftEntityColumn();
    [CompilerGeneratedAttribute]
public void set_LeftEntityColumn(EntityColumnInfo value);
    [CompilerGeneratedAttribute]
public EntityColumnInfo get_RightEntityColumn();
    [CompilerGeneratedAttribute]
public void set_RightEntityColumn(EntityColumnInfo value);
    public string get_LeftName();
    public string get_RightName();
}
internal class SqlSugar.MappingFieldsHelper`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <NavEntity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <RootEntity>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public EntityInfo NavEntity { get; public set; }
    public EntityInfo RootEntity { get; public set; }
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public EntityInfo get_NavEntity();
    [CompilerGeneratedAttribute]
public void set_NavEntity(EntityInfo value);
    [CompilerGeneratedAttribute]
public EntityInfo get_RootEntity();
    [CompilerGeneratedAttribute]
public void set_RootEntity(EntityInfo value);
    public MappingFieldsInfo GetMappings(Expression thisFiled, Expression mappingFiled);
    public List`1<IConditionalModel> GetMppingSql(List`1<object> list, List`1<MappingFieldsExpression> mappingFieldsExpressions);
    public void SetChildList(EntityColumnInfo navColumnInfo, object item, List`1<object> list, List`1<MappingFieldsExpression> mappingFieldsExpressions);
    public void SetChildItem(EntityColumnInfo navColumnInfo, object item, List`1<object> list, List`1<MappingFieldsExpression> mappingFieldsExpressions);
    public List`1<object> GetSetList(object item, List`1<object> list, List`1<MappingFieldsExpression> mappingFieldsExpressions);
    private static bool GetWhereByIndex(object item, List`1<MappingFieldsExpression> mappingFieldsExpressions, object it, int index);
    private void InitMappingFieldsExpression(MappingFieldsExpression item);
}
public class SqlSugar.MappingFieldsInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbColumnInfo <LeftColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbColumnInfo <RightColumn>k__BackingField;
    public DbColumnInfo LeftColumn { get; public set; }
    public DbColumnInfo RightColumn { get; public set; }
    [CompilerGeneratedAttribute]
public DbColumnInfo get_LeftColumn();
    [CompilerGeneratedAttribute]
public void set_LeftColumn(DbColumnInfo value);
    [CompilerGeneratedAttribute]
public DbColumnInfo get_RightColumn();
    [CompilerGeneratedAttribute]
public void set_RightColumn(DbColumnInfo value);
}
internal class SqlSugar.MappingNavColumnInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<Expression> <ExpressionList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ParentName>k__BackingField;
    public List`1<Expression> ExpressionList { get; public set; }
    public string Name { get; public set; }
    public string ParentName { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<Expression> get_ExpressionList();
    [CompilerGeneratedAttribute]
public void set_ExpressionList(List`1<Expression> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ParentName();
    [CompilerGeneratedAttribute]
public void set_ParentName(string value);
}
public class SqlSugar.MappingTable : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <EntityName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbTableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbShortTaleName>k__BackingField;
    public string EntityName { get; public set; }
    public string DbTableName { get; public set; }
    public string DbShortTaleName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EntityName();
    [CompilerGeneratedAttribute]
public void set_EntityName(string value);
    [CompilerGeneratedAttribute]
public string get_DbTableName();
    [CompilerGeneratedAttribute]
public void set_DbTableName(string value);
    [CompilerGeneratedAttribute]
public string get_DbShortTaleName();
    [CompilerGeneratedAttribute]
public void set_DbShortTaleName(string value);
}
public class SqlSugar.MappingTableList : List`1<MappingTable> {
    public void Add(string entityName, string dbTableName);
    public void Add(string entityName, string dbTableName, string dbTableShortName);
    public void Clear();
}
public class SqlSugar.MemberConstExpressionResolve : BaseResolve {
    public MemberConstExpressionResolve(ExpressionParameter parameter);
    private void Where(ExpressionParameter parameter, Nullable`1<bool> isLeft, object value, ExpressionParameter baseParameter, bool isSetTempData);
    private object Select(ExpressionParameter parameter, object value);
}
public class SqlSugar.MemberExpressionResolve : BaseResolve {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionParameter <Parameter>k__BackingField;
    public ExpressionParameter Parameter { get; public set; }
    public MemberExpressionResolve(ExpressionParameter parameter);
    [CompilerGeneratedAttribute]
public ExpressionParameter get_Parameter();
    [CompilerGeneratedAttribute]
public void set_Parameter(ExpressionParameter value);
    private void ProcessNavigationMemberAndUpdateExpression(MemberExpression& expression, Boolean& isValue);
    private static bool IsNavValue(MemberExpression expression);
    private void DefaultOneToOneN(ExpressionParameter parameter, ExpressionParameter baseParameter, Nullable`1<bool> isLeft, bool isSetTempData, OneToOneNavgateExpressionN navN);
    private void DefaultOneToOne(ExpressionParameter parameter, ExpressionParameter baseParameter, Nullable`1<bool> isLeft, bool isSetTempData, OneToOneNavgateExpression nav);
    private void ResolveDefault(ExpressionParameter parameter, ExpressionParameter baseParameter, MemberExpression expression, Nullable`1<bool> isLeft, bool isSetTempData, bool isSingle);
    private bool IsFieldIsCommonTemp(bool isSetTempData, ExpressionParameter parameter);
    private void ResolveBoolLogic(ExpressionParameter parameter, ExpressionParameter baseParameter, MemberExpression expression, Nullable`1<bool> isLeft, bool isSetTempData, bool isSingle);
    private void ResolveWhereLogic(ExpressionParameter parameter, ExpressionParameter baseParameter, MemberExpression expression, Nullable`1<bool> isLeft, bool isSetTempData, bool isSingle);
    private void ResolveMemberValue(ExpressionParameter parameter, ExpressionParameter baseParameter, MemberExpression expression, Nullable`1<bool> isLeft, bool isSetTempData);
    private void ResolveConvertMemberName(ExpressionParameter parameter, MemberExpression expression, Nullable`1<bool> isLeft);
    private void ResolveDayOfWeek(ExpressionParameter parameter, Nullable`1<bool> isLeft, MemberExpression expression);
    private void ResolveDateDiff(ExpressionParameter parameter, Nullable`1<bool> isLeft, MemberExpression expression);
    private void ResolveDateDateByCall(ExpressionParameter parameter, Nullable`1<bool> isLeft, MemberExpression expression);
    private void ResolveCallValue(ExpressionParameter parameter, ExpressionParameter baseParameter, MemberExpression expression, Nullable`1<bool> isLeft, bool isSetTempData, bool isSingle);
    private MemberExpression ResolveValue(ExpressionParameter parameter, ExpressionParameter baseParameter, MemberExpression expression, Nullable`1<bool> isLeft, bool isSetTempData, bool isSingle);
    private void ResolveValueBool(ExpressionParameter parameter, ExpressionParameter baseParameter, MemberExpression expression, Nullable`1<bool> isLeft, bool isSingle);
    private void ResolveMemberValue(ExpressionParameter parameter, ExpressionParameter baseParameter, Nullable`1<bool> isLeft, bool isSetTempData, MemberExpression expression);
    private void ResolvefieldIsBool(ExpressionParameter parameter, ExpressionParameter baseParameter, Nullable`1<bool> isLeft, bool isSetTempData, MemberExpression expression, bool isSingle);
    private void ResolveDateDate(ExpressionParameter parameter, Nullable`1<bool> isLeft, MemberExpression expression);
    private void ResolveDateValue(ExpressionParameter parameter, Nullable`1<bool> isLeft, MemberExpression expression);
    private void ResolveHasValue(ExpressionParameter parameter, MemberExpression expression);
    private void ResolveLength(ExpressionParameter parameter, Nullable`1<bool> isLeft, MemberExpression expression);
    private static bool IsConvertMemberName(MemberExpression expression);
    private static bool IsDateDiff(MemberExpression expression);
    private string AppendMember(ExpressionParameter parameter, Nullable`1<bool> isLeft, string fieldName);
    private string GetName(ExpressionParameter parameter, MemberExpression expression, Nullable`1<bool> isLeft, bool isSingle);
    private string GetMultipleName(ExpressionParameter parameter, MemberExpression expression, Nullable`1<bool> isLeft);
    private string GetSingleName(ExpressionParameter parameter, MemberExpression expression, Nullable`1<bool> isLeft);
    private string GetDateValue(object value, DateType type);
    private string GetToDateShort(string value);
    private void SettingParameters(ExpressionParameter parameter, ExpressionParameter& baseParameter, MemberExpression& expression, Nullable`1& isLeft, Boolean& isSetTempData, Boolean& isValue, Boolean& isValueBool, Boolean& isLength, Boolean& isDateValue, Boolean& isHasValue, Boolean& isDateDate, Boolean& isMemberValue, Boolean& isSingle, Boolean& fieldIsBool, Boolean& isSelectField, Boolean& isField);
}
public class SqlSugar.MemberInitExpressionResolve : BaseResolve {
    public MemberInitExpressionResolve(ExpressionParameter parameter);
    private void Update(MemberInitExpression expression, ExpressionParameter parameter);
    private static void ConvertParameterTypeByType(Expression item, SugarParameter addItem);
    private static bool IsConst(Expression item);
    private static bool IsConstNew(Expression item);
    private static bool IsMethod(Expression item);
    private void MethodCall(ExpressionParameter parameter, string memberName, Expression item);
    private void Select(MemberInitExpression expression, ExpressionParameter parameter, bool isSingle);
    private static bool IsNullable(Type memtype);
    private static bool IsNullable(Expression item);
    private bool IsExtMethod(string methodName);
    private bool CheckMethod(MethodCallExpression expression);
}
public class SqlSugar.MemberNewExpressionResolve : BaseResolve {
    public MemberNewExpressionResolve(ExpressionParameter parameter);
}
public class SqlSugar.MemberNoExpressionResolve : BaseResolve {
    public MemberNoExpressionResolve(ExpressionParameter parameter);
    private void Update(ExpressionParameter parameter, Nullable`1<bool> isLeft, ExpressionParameter baseParameter, bool isSetTempData, object value);
    private static object GetValue(MemberExpression expression, bool isField, bool isProperty);
}
public class SqlSugar.MethodCallExpressionArgs : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsMember>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <MemberValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <Type>k__BackingField;
    public bool IsMember { get; public set; }
    public object MemberName { get; public set; }
    public object MemberValue { get; public set; }
    public Type Type { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsMember();
    [CompilerGeneratedAttribute]
public void set_IsMember(bool value);
    [CompilerGeneratedAttribute]
public object get_MemberName();
    [CompilerGeneratedAttribute]
public void set_MemberName(object value);
    [CompilerGeneratedAttribute]
public object get_MemberValue();
    [CompilerGeneratedAttribute]
public void set_MemberValue(object value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
}
public class SqlSugar.MethodCallExpressionModel : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<MethodCallExpressionArgs> <Args>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [DynamicAttribute]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <BaseExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SugarParameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Conext>k__BackingField;
    public List`1<MethodCallExpressionArgs> Args { get; public set; }
    public string Name { get; public set; }
    [DynamicAttribute]
public object Data { get; public set; }
    public Expression Expression { get; public set; }
    public Expression BaseExpression { get; public set; }
    public List`1<SugarParameter> Parameters { get; public set; }
    public ExpressionContext Conext { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<MethodCallExpressionArgs> get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(List`1<MethodCallExpressionArgs> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(object value);
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(Expression value);
    [CompilerGeneratedAttribute]
public Expression get_BaseExpression();
    [CompilerGeneratedAttribute]
public void set_BaseExpression(Expression value);
    [CompilerGeneratedAttribute]
public List`1<SugarParameter> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(List`1<SugarParameter> value);
    [CompilerGeneratedAttribute]
public ExpressionContext get_Conext();
    [CompilerGeneratedAttribute]
public void set_Conext(ExpressionContext value);
}
public class SqlSugar.MethodCallExpressionResolve : BaseResolve {
    private int contextIndex;
    private Type TempParseType;
    public MethodCallExpressionResolve(ExpressionParameter parameter);
    private void NativeExtensionMethod(ExpressionParameter parameter, MethodCallExpression express, Nullable`1<bool> isLeft, string name, List`1<MethodCallExpressionArgs> appendArgs);
    protected void SqlFuncMethod(ExpressionParameter parameter, MethodCallExpression express, Nullable`1<bool> isLeft);
    protected void Field(ExpressionParameter parameter, Nullable`1<bool> isLeft, string name, IEnumerable`1<Expression> args, MethodCallExpressionModel model, List`1<MethodCallExpressionArgs> appendArgs);
    protected void Select(ExpressionParameter parameter, Nullable`1<bool> isLeft, string name, IEnumerable`1<Expression> args, MethodCallExpressionModel model, List`1<MethodCallExpressionArgs> appendArgs);
    protected void Where(ExpressionParameter parameter, Nullable`1<bool> isLeft, string name, IEnumerable`1<Expression> args, MethodCallExpressionModel model, List`1<MethodCallExpressionArgs> appendArgs);
    public string GeDateFormat(string formatString, string value);
    private bool IsSqlServer();
    private bool IsMySql();
    private bool IsSqlite();
    private bool IsPg();
    private bool IsOracle();
    private void CusMethod(ExpressionParameter parameter, MethodCallExpression express, Nullable`1<bool> isLeft);
    private static bool MethodValueIsTrue(object methodValue);
    private object packIfElse(object methodValue);
    private void SetShortName(Expression exp);
    private void AppendItem(ExpressionParameter parameter, string name, IEnumerable`1<Expression> args, MethodCallExpressionModel model, Expression item);
    private void AppendModelByIIFMember(ExpressionParameter parameter, MethodCallExpressionModel model, Expression item);
    private void AppendModelByIIFBinary(ExpressionParameter parameter, MethodCallExpressionModel model, Expression item);
    private void AppendModelByIIFMethod(ExpressionParameter parameter, MethodCallExpressionModel model, Expression item);
    private void AppendModel(ExpressionParameter parameter, MethodCallExpressionModel model, Expression item, string name, IEnumerable`1<Expression> args);
    private void GetConfigValue(MethodCallExpression express, ExpressionParameter parameter);
    private object GetMethodValue(string name, MethodCallExpressionModel model);
    private bool IsSqlServerModel();
    private string GetLike(string result, bool iLike);
    private DbType GetType(string name);
    private bool IsContainsArray(MethodCallExpression express, string methodName, bool isValidNativeMethod);
    private bool IsSubMethod(MethodCallExpression express, string methodName);
    private bool CheckMethod(MethodCallExpression expression);
    public bool IsParseMethod(MethodCallExpression expression);
    private static bool IsNot(Expression item);
    private bool IsDateItemValue(Expression item);
    private static bool IsDateDate(Expression item);
    private static bool IsDateValue(Expression item);
    private bool IsValidNativeMethod(MethodCallExpression express, string methodName);
    private bool IsExtMethod(string methodName);
    private bool IsIfElse(MethodCallExpression express, string methodName);
    [CompilerGeneratedAttribute]
private string <AppendModel>b__21_0(Expression it);
    [CompilerGeneratedAttribute]
private string <AppendModel>b__21_1(string it);
}
internal class SqlSugar.MethodCallExpressionVisitor : ExpressionVisitor {
    private string _methodName;
    private bool _hasMethodCallWithName;
    public MethodCallExpressionVisitor(string methodName);
    public bool HasMethodCallWithName(Expression expression);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
}
public class SqlSugar.ModelContext : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [SugarColumn]
[JsonIgnoreAttribute]
public SqlSugarProvider Context { get; public set; }
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    public ISugarQueryable`1<T> CreateMapping();
}
public class SqlSugar.MyContractResolver : DefaultContractResolver {
    protected virtual IList`1<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization);
    private static void CreateDateProperty(Type type, JsonProperty item);
    [CompilerGeneratedAttribute]
private JsonProperty <CreateProperties>b__1_1(PropertyInfo p);
}
public class SqlSugar.MyDmDataAdapter : object {
    private DmCommand command;
    private string sql;
    private DmConnection _sqlConnection;
    public DmCommand SelectCommand { get; public set; }
    public MyDmDataAdapter(DmCommand command);
    public MyDmDataAdapter(string sql, DmConnection _sqlConnection);
    public DmCommand get_SelectCommand();
    public void set_SelectCommand(DmCommand value);
    public void Fill(DataTable dt);
    public sealed virtual void Fill(DataSet ds);
}
public class SqlSugar.MyOracleDataAdapter : object {
    private OracleCommand command;
    private string sql;
    private OracleConnection _sqlConnection;
    public OracleCommand SelectCommand { get; public set; }
    public MyOracleDataAdapter(OracleCommand command);
    public MyOracleDataAdapter(string sql, OracleConnection _sqlConnection);
    public OracleCommand get_SelectCommand();
    public void set_SelectCommand(OracleCommand value);
    public void Fill(DataTable dt);
    public sealed virtual void Fill(DataSet ds);
}
public class SqlSugar.MySqlBlukCopy`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T[] <Entitys>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Chara>k__BackingField;
    internal SqlSugarProvider Context { get; internal set; }
    internal ISqlBuilder Builder { get; internal set; }
    internal T[] Entitys { get; internal set; }
    internal string Chara { get; internal set; }
    public MySqlBlukCopy`1(SqlSugarProvider context, ISqlBuilder builder, T[] entitys);
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal ISqlBuilder get_Builder();
    [CompilerGeneratedAttribute]
internal void set_Builder(ISqlBuilder value);
    [CompilerGeneratedAttribute]
internal T[] get_Entitys();
    [CompilerGeneratedAttribute]
internal void set_Entitys(T[] value);
    [CompilerGeneratedAttribute]
internal string get_Chara();
    [CompilerGeneratedAttribute]
internal void set_Chara(string value);
    public bool ExecuteBulkCopy(string characterSet);
    public bool ExecuteBulkCopy();
    public Task`1<bool> ExecuteBulkCopyAsync();
    public Task`1<bool> ExecuteBulkCopyAsync(string characterSet);
    private string GetChara();
    private void CloseDb();
    public string DataTableToCsvString(DataTable table);
    private static object GetValue(PropertyInfo p, T item);
}
public class SqlSugar.MySqlBuilder : SqlBuilderProvider {
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    public string SqlDateNow { get; }
    public string FullSqlDateNow { get; }
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
    public virtual string get_SqlDateNow();
    public virtual string get_FullSqlDateNow();
    public virtual string GetUnionFomatSql(string sql);
}
public class SqlSugar.MySqlCodeFirst : CodeFirstProvider {
    public virtual void NoExistLogic(EntityInfo entityInfo);
    protected virtual DbColumnInfo EntityColumnToDbColumn(EntityInfo entityInfo, string tableName, EntityColumnInfo item);
    protected virtual void ConvertColumns(List`1<DbColumnInfo> dbColumns);
    protected virtual void ChangeKey(EntityInfo entityInfo, string tableName, EntityColumnInfo item);
    internal DbColumnInfo GetEntityColumnToDbColumn(EntityInfo entity, string dbTableName, EntityColumnInfo item);
    protected virtual void GetDbType(EntityColumnInfo item, Type propertyType, DbColumnInfo result);
    protected virtual bool IsNoSamgeType(EntityColumnInfo ec, DbColumnInfo dc);
}
public class SqlSugar.MySqlDataAdapter : object {
    private MySqlCommand command;
    private string sql;
    private MySqlConnection _sqlConnection;
    public MySqlCommand SelectCommand { get; public set; }
    public MySqlDataAdapter(MySqlCommand command);
    public MySqlDataAdapter(string sql, MySqlConnection _sqlConnection);
    public MySqlCommand get_SelectCommand();
    public void set_SelectCommand(MySqlCommand value);
    public void Fill(DataTable dt);
    public sealed virtual void Fill(DataSet ds);
}
public class SqlSugar.MySqlDbBind : DbBindProvider {
    public static List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypesConst;
    public List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypes { get; }
    public List`1<string> StringThrow { get; }
    private static MySqlDbBind();
    public virtual string GetDbTypeName(string csharpTypeName);
    public virtual List`1<KeyValuePair`2<string, CSharpDataType>> get_MappingTypes();
    public virtual List`1<string> get_StringThrow();
}
public class SqlSugar.MySqlDbFirst : DbFirstProvider {
    protected virtual string GetPropertyTypeName(DbColumnInfo item);
}
public class SqlSugar.MySqlDbMaintenance : DbMaintenanceProvider {
    protected string GetDataBaseSql { get; }
    protected string GetColumnInfosByTableNameSql { get; }
    protected string GetTableInfoListSql { get; }
    protected string GetViewInfoListSql { get; }
    protected string CreateDataBaseSql { get; }
    protected string AddPrimaryKeySql { get; }
    protected string AddColumnToTableSql { get; }
    protected string AlterColumnToTableSql { get; }
    protected string BackupDataBaseSql { get; }
    protected string CreateTableSql { get; }
    protected string CreateTableColumn { get; }
    protected string TruncateTableSql { get; }
    protected string BackupTableSql { get; }
    protected string DropTableSql { get; }
    protected string DropColumnToTableSql { get; }
    protected string DropConstraintSql { get; }
    protected string RenameColumnSql { get; }
    protected string IsAnyProcedureSql { get; }
    protected string CheckSystemTablePermissionsSql { get; }
    protected string CreateTableNull { get; }
    protected string CreateTableNotNull { get; }
    protected string CreateTablePirmaryKey { get; }
    protected string CreateTableIdentity { get; }
    protected string AddColumnRemarkSql { get; }
    protected string DeleteColumnRemarkSql { get; }
    protected string IsAnyColumnRemarkSql { get; }
    protected string AddTableRemarkSql { get; }
    protected string DeleteTableRemarkSql { get; }
    protected string IsAnyTableRemarkSql { get; }
    protected string RenameTableSql { get; }
    protected string CreateIndexSql { get; }
    protected string AddDefaultValueSql { get; }
    protected string IsAnyIndexSql { get; }
    protected virtual string get_GetDataBaseSql();
    protected virtual string get_GetColumnInfosByTableNameSql();
    protected virtual string get_GetTableInfoListSql();
    protected virtual string get_GetViewInfoListSql();
    protected virtual string get_CreateDataBaseSql();
    protected virtual string get_AddPrimaryKeySql();
    protected virtual string get_AddColumnToTableSql();
    protected virtual string get_AlterColumnToTableSql();
    protected virtual string get_BackupDataBaseSql();
    protected virtual string get_CreateTableSql();
    protected virtual string get_CreateTableColumn();
    protected virtual string get_TruncateTableSql();
    protected virtual string get_BackupTableSql();
    protected virtual string get_DropTableSql();
    protected virtual string get_DropColumnToTableSql();
    protected virtual string get_DropConstraintSql();
    protected virtual string get_RenameColumnSql();
    protected virtual string get_IsAnyProcedureSql();
    protected virtual string get_CheckSystemTablePermissionsSql();
    protected virtual string get_CreateTableNull();
    protected virtual string get_CreateTableNotNull();
    protected virtual string get_CreateTablePirmaryKey();
    protected virtual string get_CreateTableIdentity();
    protected virtual string get_AddColumnRemarkSql();
    protected virtual string get_DeleteColumnRemarkSql();
    protected virtual string get_IsAnyColumnRemarkSql();
    protected virtual string get_AddTableRemarkSql();
    protected virtual string get_DeleteTableRemarkSql();
    protected virtual string get_IsAnyTableRemarkSql();
    protected virtual string get_RenameTableSql();
    protected virtual string get_CreateIndexSql();
    protected virtual string get_AddDefaultValueSql();
    protected virtual string get_IsAnyIndexSql();
    public virtual List`1<DbColumnInfo> GetColumnInfosByTableName(string tableName, bool isCache);
    public virtual bool SetAutoIncrementInitialValue(string tableName, int initialValue);
    public virtual bool SetAutoIncrementInitialValue(Type entityType, int initialValue);
    public virtual List`1<string> GetDbTypes();
    public virtual List`1<string> GetTriggerNames(string tableName);
    public virtual List`1<string> GetFuncList();
    public virtual List`1<string> GetIndexList(string tableName);
    public virtual List`1<string> GetProcList(string dbName);
    public virtual bool IsAnyTable(string tableName, bool isCache);
    public virtual bool IsAnyColumnRemark(string columnName, string tableName);
    public virtual bool AddColumnRemark(string columnName, string tableName, string description);
    public virtual bool CreateDatabase(string databaseName, string databaseDirectory);
    public virtual bool AddTableRemark(string tableName, string description);
    public virtual bool CreateTable(string tableName, List`1<DbColumnInfo> columns, bool isCreatePrimaryKey);
    public virtual bool AddRemark(EntityInfo entity);
    protected virtual string GetCreateTableSql(string tableName, List`1<DbColumnInfo> columns);
    public virtual bool AddPrimaryKey(string tableName, string columnName);
    public virtual bool AddColumn(string tableName, DbColumnInfo columnInfo);
    public virtual bool UpdateColumn(string tableName, DbColumnInfo column);
    protected virtual string GetSize(DbColumnInfo item);
    public virtual bool RenameColumn(string tableName, string oldColumnName, string newColumnName);
    public virtual bool AddDefaultValue(string tableName, string columnName, string defaultValue);
    public virtual bool IsAnyConstraint(string constraintName);
    public virtual bool BackupDataBase(string databaseName, string fullFileName);
    private bool DorisUpadteColumns(String& tableName, DbColumnInfo column);
    private bool ContainsCharSet(string charset);
    private static void ConvertCreateColumnInfo(DbColumnInfo x);
    [CompilerGeneratedAttribute]
private string <CreateTable>b__79_1(DbColumnInfo it);
}
public class SqlSugar.MySqlDeleteBuilder : DeleteBuilder {
}
public class SqlSugar.MySqlExpressionContext : ExpressionContext {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
}
public class SqlSugar.MySqlFastBuilder : FastBuilder {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UpdateSql>k__BackingField;
    public string UpdateSql { get; public set; }
    [AsyncStateMachineAttribute("SqlSugar.MySqlFastBuilder/<MySqlConnectorBulkCopy>d__0")]
[DebuggerStepThroughAttribute]
private Task`1<int> MySqlConnectorBulkCopy(DataTable dt);
    [CompilerGeneratedAttribute]
public virtual string get_UpdateSql();
    [CompilerGeneratedAttribute]
public virtual void set_UpdateSql(string value);
    [AsyncStateMachineAttribute("SqlSugar.MySqlFastBuilder/<ExecuteBulkCopyAsync>d__5")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> ExecuteBulkCopyAsync(DataTable dt);
    [AsyncStateMachineAttribute("SqlSugar.MySqlFastBuilder/<CreateTempAsync>d__6`1")]
[DebuggerStepThroughAttribute]
public virtual Task CreateTempAsync(DataTable dt);
}
public class SqlSugar.MySqlInsertBuilder : InsertBuilder {
    private int i;
    public string SqlTemplate { get; }
    public virtual string get_SqlTemplate();
    public object FormatValue(object value, string name);
    private object GetDateTimeOffsetString(object value);
    private object GetDateTimeString(object value);
    private string GetString(object value);
    public virtual string ToSqlString();
    private string GetMySqlIgnore(string result);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__7_2(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__7_3(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__7_4(DbColumnInfo it);
}
public class SqlSugar.MySqlMethod : DefaultDbMethod {
    public virtual string JsonArrayLength(MethodCallExpressionModel model);
    public virtual string JsonIndex(MethodCallExpressionModel model);
    public virtual string WeekOfYear(MethodCallExpressionModel mode);
    public virtual string GetStringJoinSelector(string result, string separator);
    public virtual string DateDiff(MethodCallExpressionModel model);
    public virtual string DateValue(MethodCallExpressionModel model);
    public virtual string Contains(MethodCallExpressionModel model);
    public virtual string StartsWith(MethodCallExpressionModel model);
    public virtual string EndsWith(MethodCallExpressionModel model);
    public virtual string DateIsSameDay(MethodCallExpressionModel model);
    public virtual string DateIsSameByType(MethodCallExpressionModel model);
    public virtual string DateAddByType(MethodCallExpressionModel model);
    public virtual string DateAddDay(MethodCallExpressionModel model);
    public virtual string ToInt32(MethodCallExpressionModel model);
    public virtual string ToInt64(MethodCallExpressionModel model);
    public virtual string ToString(MethodCallExpressionModel model);
    public virtual string ToGuid(MethodCallExpressionModel model);
    public virtual string ToDouble(MethodCallExpressionModel model);
    public virtual string ToBool(MethodCallExpressionModel model);
    public virtual string ToDecimal(MethodCallExpressionModel model);
    public virtual string Length(MethodCallExpressionModel model);
    public virtual string MergeString(String[] strings);
    public virtual string IsNull(MethodCallExpressionModel model);
    public virtual string GetDate();
    public virtual string GetRandom();
    public virtual string Collate(MethodCallExpressionModel model);
    public virtual string CharIndex(MethodCallExpressionModel model);
    public virtual string JsonField(MethodCallExpressionModel model);
    private string GetJson(object memberName1, object memberName2, bool isLast);
    public virtual string JsonArrayAny(MethodCallExpressionModel model);
    public virtual string JsonListObjectAny(MethodCallExpressionModel model);
    public virtual string NewUid(MethodCallExpressionModel mode);
    public virtual string FullTextContains(MethodCallExpressionModel mode);
}
public class SqlSugar.MySqlProvider : AdoProvider {
    public IDbConnection Connection { get; public set; }
    public virtual IDbConnection get_Connection();
    public virtual void set_Connection(IDbConnection value);
    public virtual void BeginTran(string transactionName);
    public virtual void BeginTran(IsolationLevel iso, string transactionName);
    public virtual IDataAdapter GetAdapter();
    public virtual DbCommand GetCommand(string sql, SugarParameter[] parameters);
    public virtual void SetCommandToAdapter(IDataAdapter dataAdapter, DbCommand command);
    public virtual IDataParameter[] ToIDbDataParameter(SugarParameter[] parameters);
    protected virtual void SugarCatch(Exception ex, string sql, SugarParameter[] parameters);
    [AsyncStateMachineAttribute("SqlSugar.MySqlProvider/<GetCommandAsync>d__11")]
[DebuggerStepThroughAttribute]
public Task`1<DbCommand> GetCommandAsync(string sql, SugarParameter[] parameters);
    [AsyncStateMachineAttribute("SqlSugar.MySqlProvider/<ExecuteCommandAsync>d__12")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> ExecuteCommandAsync(string sql, SugarParameter[] parameters);
    [AsyncStateMachineAttribute("SqlSugar.MySqlProvider/<GetDataReaderAsync>d__13")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IDataReader> GetDataReaderAsync(string sql, SugarParameter[] parameters);
    [AsyncStateMachineAttribute("SqlSugar.MySqlProvider/<GetScalarAsync>d__14")]
[DebuggerStepThroughAttribute]
public virtual Task`1<object> GetScalarAsync(string sql, SugarParameter[] parameters);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__0(string sql, SugarParameter[] parameters);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IDataReader> <>n__1(string sql, SugarParameter[] parameters);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<object> <>n__2(string sql, SugarParameter[] parameters);
}
public class SqlSugar.MySqlQueryable`1 : QueryableProvider`1<T> {
    public virtual ISugarQueryable`1<T> With(string withString);
    public virtual ISugarQueryable`1<T> PartitionBy(string groupFileds);
}
public class SqlSugar.MySqlQueryable`10 : QueryableProvider`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> {
}
public class SqlSugar.MySqlQueryable`11 : QueryableProvider`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> {
}
public class SqlSugar.MySqlQueryable`12 : QueryableProvider`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> {
}
public class SqlSugar.MySqlQueryable`2 : QueryableProvider`2<T, T2> {
}
public class SqlSugar.MySqlQueryable`3 : QueryableProvider`3<T, T2, T3> {
}
public class SqlSugar.MySqlQueryable`4 : QueryableProvider`4<T, T2, T3, T4> {
}
public class SqlSugar.MySqlQueryable`5 : QueryableProvider`5<T, T2, T3, T4, T5> {
}
public class SqlSugar.MySqlQueryable`6 : QueryableProvider`6<T, T2, T3, T4, T5, T6> {
}
public class SqlSugar.MySqlQueryable`7 : QueryableProvider`7<T, T2, T3, T4, T5, T6, T7> {
}
public class SqlSugar.MySqlQueryable`8 : QueryableProvider`8<T, T2, T3, T4, T5, T6, T7, T8> {
}
public class SqlSugar.MySqlQueryable`9 : QueryableProvider`9<T, T2, T3, T4, T5, T6, T7, T8, T9> {
}
public class SqlSugar.MySqlQueryBuilder : QueryBuilder {
    public string PageTempalte { get; }
    public string DefaultOrderByTemplate { get; }
    public string GetSelectValue { get; }
    public virtual string get_PageTempalte();
    public virtual string get_DefaultOrderByTemplate();
    public virtual bool IsComplexModel(string sql);
    public virtual string ToSqlString();
    private string ToCountSqlString();
    public virtual string ToCountSql(string sql);
    public virtual string get_GetSelectValue();
}
public class SqlSugar.MySqlUpdateBuilder : UpdateBuilder {
    private int i;
    public string SqlTemplateBatch { get; }
    public string SqlTemplateJoin { get; }
    public virtual string get_SqlTemplateBatch();
    public virtual string get_SqlTemplateJoin();
    protected virtual string GetJoinUpdate(string columnsString, String& whereString);
    protected virtual string TomultipleSqlString(List`1<IGrouping`2<int, DbColumnInfo>> groupList);
    private StringBuilder GetBatchUpdateSql(StringBuilder batchUpdateSql);
    public object FormatValue(object value, string name);
    private object GetDateTimeString(object value);
    private object GetDateTimeOffsetString(object value);
    private string GetString(object value);
    [CompilerGeneratedAttribute]
private bool <TomultipleSqlString>b__5_0(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <TomultipleSqlString>b__5_1(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <TomultipleSqlString>b__5_3(DbColumnInfo it);
}
internal class SqlSugar.NavContext : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<NavContextItem> <Items>k__BackingField;
    public List`1<NavContextItem> Items { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<NavContextItem> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<NavContextItem> value);
}
internal class SqlSugar.NavContextItem : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RootName>k__BackingField;
    public int Level { get; public set; }
    public string RootName { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(int value);
    [CompilerGeneratedAttribute]
public string get_RootName();
    [CompilerGeneratedAttribute]
public void set_RootName(string value);
}
[AttributeUsageAttribute("128")]
public class SqlSugar.Navigate : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <MappingType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MappingAId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MappingBId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NavigateType <NavigatType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <WhereSql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AClassId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BClassId>k__BackingField;
    internal string Name { get; internal set; }
    internal string Name2 { get; internal set; }
    internal Type MappingType { get; internal set; }
    internal string MappingAId { get; internal set; }
    internal string MappingBId { get; internal set; }
    internal NavigateType NavigatType { get; internal set; }
    internal string WhereSql { get; internal set; }
    internal string AClassId { get; internal set; }
    internal string BClassId { get; internal set; }
    public Navigate(NavigateType navigatType, string ifSingleMasterTableColumn_IfListChildTableColumn);
    public Navigate(NavigateType navigatType, string ifSingleMasterTableColumn_IfListChildTableColumn, string ifSingleChildTableColumn_IfListMasterTableColumn);
    public Navigate(NavigateType navigatType, string ifSingleMasterTableColumn_IfListChildTableColumn, string ifSingleChildTableColumn_IfListMasterTableColumn, string whereSql);
    public Navigate(Type MappingTableType, string typeAId, string typeBId);
    public Navigate(Type MappingTableType, string mappingAId, string mappingBId, string aClassId, string bClassId);
    public Navigate(Type MappingTableType, string typeAiD, string typeBId, string mappingSql);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
internal string get_Name2();
    [CompilerGeneratedAttribute]
internal void set_Name2(string value);
    [CompilerGeneratedAttribute]
internal Type get_MappingType();
    [CompilerGeneratedAttribute]
internal void set_MappingType(Type value);
    [CompilerGeneratedAttribute]
internal string get_MappingAId();
    [CompilerGeneratedAttribute]
internal void set_MappingAId(string value);
    [CompilerGeneratedAttribute]
internal string get_MappingBId();
    [CompilerGeneratedAttribute]
internal void set_MappingBId(string value);
    [CompilerGeneratedAttribute]
internal NavigateType get_NavigatType();
    [CompilerGeneratedAttribute]
internal void set_NavigatType(NavigateType value);
    [CompilerGeneratedAttribute]
internal string get_WhereSql();
    [CompilerGeneratedAttribute]
internal void set_WhereSql(string value);
    [CompilerGeneratedAttribute]
internal string get_AClassId();
    [CompilerGeneratedAttribute]
internal void set_AClassId(string value);
    [CompilerGeneratedAttribute]
internal string get_BClassId();
    [CompilerGeneratedAttribute]
internal void set_BClassId(string value);
    public string GetName();
    public string GetName2();
    public Type GetMappingType();
    public string GetMappingAId();
    public string GetMappingBId();
    public NavigateType GetNavigateType();
    public string GetWhereSql();
}
public enum SqlSugar.NavigateType : Enum {
    public int value__;
    public static NavigateType OneToOne;
    public static NavigateType OneToMany;
    public static NavigateType ManyToOne;
    public static NavigateType ManyToMany;
    public static NavigateType Dynamic;
}
public class SqlSugar.NavigatManager`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsCrossQueryWithAttr>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, string> <CrossQueryItems>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<ISugarQueryable`1<object>, List`1<object>> <SelectR1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<ISugarQueryable`1<object>, List`1<object>> <SelectR2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<ISugarQueryable`1<object>, List`1<object>> <SelectR3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<ISugarQueryable`1<object>, List`1<object>> <SelectR4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<ISugarQueryable`1<object>, List`1<object>> <SelectR5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<ISugarQueryable`1<object>, List`1<object>> <SelectR6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<ISugarQueryable`1<object>, List`1<object>> <SelectR7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<ISugarQueryable`1<object>, List`1<object>> <SelectR8>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression[] <Expressions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<T> <RootList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private QueryBuilder <QueryBuilder>k__BackingField;
    private List`1<Expression> _preExpressionList;
    private List`1<object> _preList;
    private List`1<Expression> _ListCallFunc;
    public SqlSugarProvider Context { get; public set; }
    public bool IsCrossQueryWithAttr { get; public set; }
    public Dictionary`2<string, string> CrossQueryItems { get; public set; }
    public Func`2<ISugarQueryable`1<object>, List`1<object>> SelectR1 { get; public set; }
    public Func`2<ISugarQueryable`1<object>, List`1<object>> SelectR2 { get; public set; }
    public Func`2<ISugarQueryable`1<object>, List`1<object>> SelectR3 { get; public set; }
    public Func`2<ISugarQueryable`1<object>, List`1<object>> SelectR4 { get; public set; }
    public Func`2<ISugarQueryable`1<object>, List`1<object>> SelectR5 { get; public set; }
    public Func`2<ISugarQueryable`1<object>, List`1<object>> SelectR6 { get; public set; }
    public Func`2<ISugarQueryable`1<object>, List`1<object>> SelectR7 { get; public set; }
    public Func`2<ISugarQueryable`1<object>, List`1<object>> SelectR8 { get; public set; }
    public Expression[] Expressions { get; public set; }
    public List`1<T> RootList { get; public set; }
    public QueryBuilder QueryBuilder { get; public set; }
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public bool get_IsCrossQueryWithAttr();
    [CompilerGeneratedAttribute]
public void set_IsCrossQueryWithAttr(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CrossQueryItems();
    [CompilerGeneratedAttribute]
public void set_CrossQueryItems(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Func`2<ISugarQueryable`1<object>, List`1<object>> get_SelectR1();
    [CompilerGeneratedAttribute]
public void set_SelectR1(Func`2<ISugarQueryable`1<object>, List`1<object>> value);
    [CompilerGeneratedAttribute]
public Func`2<ISugarQueryable`1<object>, List`1<object>> get_SelectR2();
    [CompilerGeneratedAttribute]
public void set_SelectR2(Func`2<ISugarQueryable`1<object>, List`1<object>> value);
    [CompilerGeneratedAttribute]
public Func`2<ISugarQueryable`1<object>, List`1<object>> get_SelectR3();
    [CompilerGeneratedAttribute]
public void set_SelectR3(Func`2<ISugarQueryable`1<object>, List`1<object>> value);
    [CompilerGeneratedAttribute]
public Func`2<ISugarQueryable`1<object>, List`1<object>> get_SelectR4();
    [CompilerGeneratedAttribute]
public void set_SelectR4(Func`2<ISugarQueryable`1<object>, List`1<object>> value);
    [CompilerGeneratedAttribute]
public Func`2<ISugarQueryable`1<object>, List`1<object>> get_SelectR5();
    [CompilerGeneratedAttribute]
public void set_SelectR5(Func`2<ISugarQueryable`1<object>, List`1<object>> value);
    [CompilerGeneratedAttribute]
public Func`2<ISugarQueryable`1<object>, List`1<object>> get_SelectR6();
    [CompilerGeneratedAttribute]
public void set_SelectR6(Func`2<ISugarQueryable`1<object>, List`1<object>> value);
    [CompilerGeneratedAttribute]
public Func`2<ISugarQueryable`1<object>, List`1<object>> get_SelectR7();
    [CompilerGeneratedAttribute]
public void set_SelectR7(Func`2<ISugarQueryable`1<object>, List`1<object>> value);
    [CompilerGeneratedAttribute]
public Func`2<ISugarQueryable`1<object>, List`1<object>> get_SelectR8();
    [CompilerGeneratedAttribute]
public void set_SelectR8(Func`2<ISugarQueryable`1<object>, List`1<object>> value);
    [CompilerGeneratedAttribute]
public Expression[] get_Expressions();
    [CompilerGeneratedAttribute]
public void set_Expressions(Expression[] value);
    [CompilerGeneratedAttribute]
public List`1<T> get_RootList();
    [CompilerGeneratedAttribute]
public void set_RootList(List`1<T> value);
    [CompilerGeneratedAttribute]
public QueryBuilder get_QueryBuilder();
    [CompilerGeneratedAttribute]
public void set_QueryBuilder(QueryBuilder value);
    public void Execute();
    private void ExecuteByLay(int i, Expression item);
    private List`1<object> ExecuteByLay(List`1<object> currentList);
    private void ExecuteByLay(Expression expression, List`1<object> list, Func`2<ISugarQueryable`1<object>, List`1<object>> selector);
    private List`1<Expression> GetWhereExpression(Expression& expression);
    private void ManyToMany(List`1<object> list, Func`2<ISugarQueryable`1<object>, List`1<object>> selector, EntityInfo listItemEntity, PropertyInfo navObjectNamePropety, EntityColumnInfo navObjectNameColumnInfo);
    private static void SkipTakeIList(SqlInfo sql, IList instanceCast, IList newinstance);
    private void OneToOne(List`1<object> list, Func`2<ISugarQueryable`1<object>, List`1<object>> selector, EntityInfo listItemEntity, PropertyInfo navObjectNamePropety, EntityColumnInfo navObjectNameColumnInfo);
    private void OneToMany(List`1<object> list, Func`2<ISugarQueryable`1<object>, List`1<object>> selector, EntityInfo listItemEntity, PropertyInfo navObjectNamePropety, EntityColumnInfo navObjectNameColumnInfo);
    private void Dynamic(List`1<object> list, Func`2<ISugarQueryable`1<object>, List`1<object>> selector, EntityInfo listItemEntity, PropertyInfo navObjectNamePropety, EntityColumnInfo navObjectNameColumnInfo, Expression expression);
    private void DynamicOneToOne(List`1<object> list, Func`2<ISugarQueryable`1<object>, List`1<object>> selector, EntityInfo listItemEntity, PropertyInfo navObjectNamePropety, EntityColumnInfo navObjectNameColumnInfo, Expression expression);
    private SqlInfo GetWhereSql(ISqlSugarClient db, string properyName);
    private void Select(string properyName, SqlInfo result, MethodCallExpression method, ISugarQueryable`1<object> queryable);
    private static void SetTableShortName(SqlInfo result, ISugarQueryable`1<object> queryable);
    private SqlSugarProvider GetCrossDatabase(SqlSugarProvider db, Type type);
    private static void AppColumns(SqlInfo result, ISugarQueryable`1<object> queryable, string columnName);
    public void CheckHasRootShortName(Expression rootExpression, Expression childExpression);
    private static string GetShortName(Expression expression1);
    private string GetDbTableName(EntityInfo navEntityInfo, SqlInfo sqlInfo);
    private void InitMappingtType(Expression exp);
    private bool IsEnumNumber(EntityColumnInfo navPkColumn);
    private static bool IsJsonMapping(EntityColumnInfo navObjectNameColumnInfo, SqlInfo sqlObj);
    private void CreateDynamicMappingExpression(SqlInfo sqlObj, string name, EntityInfo navEntityInfo, EntityInfo listItemEntity);
    private string GetOneToManySelectByColumnInfo(EntityColumnInfo it, ISqlSugarClient db);
    private string GetOneToOneSelectByColumnInfo(EntityColumnInfo it, ISqlSugarClient db);
}
public interface SqlSugar.NavISugarQueryable`1 {
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public abstract virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
}
public class SqlSugar.NavQueryableProvider`1 : QueryableProvider`1<T> {
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, List`1<TReturn5>>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, TReturn4>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, List`1<TReturn6>>> include6, Expression`1<Func`2<TReturn6, List`1<TReturn7>>> include7);
    public sealed virtual NavQueryableProvider`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3, Expression`1<Func`2<TReturn3, List`1<TReturn4>>> include4, Expression`1<Func`2<TReturn4, TReturn5>> include5, Expression`1<Func`2<TReturn5, TReturn6>> include6, Expression`1<Func`2<TReturn6, TReturn7>> include7);
    private void _Includes(SqlSugarProvider context, Expression[] expressions);
    private void _Includes(SqlSugarProvider context, Expression[] expressions);
    private void _Includes(SqlSugarProvider context, Expression[] expressions);
    private void _Includes(SqlSugarProvider context, Expression[] expressions);
    private void _Includes(SqlSugarProvider context, Expression[] expressions);
    private void _Includes(SqlSugarProvider context, Expression[] expressions);
    private void _Includes(SqlSugarProvider context, Expression[] expressions);
}
internal class SqlSugar.NavSelectHelper : object {
    internal static List`1<TResult> GetList(Expression`1<Func`2<T, TResult>> expression, QueryableProvider`1<T> queryableProvider);
    private static List`1<TResult> Action(Expression`1<Func`2<T, TResult>> expression, QueryableProvider`1<T> queryableProvider);
    private static List`1<TResult> SqlFunc(Expression`1<Func`2<T, TResult>> expression, QueryableProvider`1<T> queryableProvider);
    private static String[] GetIgnoreColumns(List`1<EntityColumnInfo> dtoEntity, List`1<EntityColumnInfo> tableEntity);
    [AsyncStateMachineAttribute("SqlSugar.NavSelectHelper/<GetListAsync>d__4`2")]
[DebuggerStepThroughAttribute]
internal static Task`1<List`1<TResult>> GetListAsync(Expression`1<Func`2<T, TResult>> expression, QueryableProvider`1<T> queryableProvider);
    private static string GetGroupSelect(Type type, SqlSugarProvider context, QueryBuilder queryBuilder);
    private static string GetDefaultSelector(EntityInfo entityInfo, QueryBuilder queryBuilder);
    private static List`1<EntityColumnInfo> GetListNavColumns(EntityInfo entityInfo);
    private static void MegerList(List`1<TResult> result, List`1<T> includeList, SqlSugarProvider context, List`1<NavMappingColumn> navMappingColumns);
    private static bool IsClass(Expression`1<Func`2<T, TResult>> expression, QueryableProvider`1<T> queryableProvider);
    private static bool IsSqlFunc(Expression`1<Func`2<T, TResult>> expression, QueryableProvider`1<T> queryableProvider);
    private static List`1<NavMappingColumn> GetMappingColumn(Expression expression);
    private static void AddCallError(List`1<NavMappingColumn> result, Expression item, string parameterName);
    private static bool isGroup(Expression`1<Func`2<T, TResult>> expression, QueryableProvider`1<T> queryableProvider);
}
public class SqlSugar.NestedObjectType : object {
}
public class SqlSugar.NestedObjectTypeList : object {
}
public class SqlSugar.NewArrayExpessionResolve : BaseResolve {
    public NewArrayExpessionResolve(ExpressionParameter parameter);
    private void Join(ExpressionParameter parameter, NewArrayExpression expression);
    private void ArraySingle(NewArrayExpression expression);
}
internal class SqlSugar.NewExpressionInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <LeftNameName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RightName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RightDbName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Type>k__BackingField;
    public string LeftNameName { get; public set; }
    public string RightName { get; public set; }
    public string RightDbName { get; public set; }
    public string ShortName { get; public set; }
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LeftNameName();
    [CompilerGeneratedAttribute]
public void set_LeftNameName(string value);
    [CompilerGeneratedAttribute]
public string get_RightName();
    [CompilerGeneratedAttribute]
public void set_RightName(string value);
    [CompilerGeneratedAttribute]
public string get_RightDbName();
    [CompilerGeneratedAttribute]
public void set_RightDbName(string value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class SqlSugar.NewExpressionResolve : BaseResolve {
    public NewExpressionResolve(ExpressionParameter parameter);
    private void Join(NewExpression expression);
    private void ArraySingle(NewExpression expression);
    private bool IsDateValue(Expression item);
    private void NewValueType(ExpressionParameter parameter, NewExpression expression);
    private void Select(NewExpression expression, ExpressionParameter parameter, bool isSingle);
}
public class SqlSugar.NpgsqlDataAdapter : object {
    private NpgsqlCommand command;
    private string sql;
    private NpgsqlConnection _sqlConnection;
    public NpgsqlCommand SelectCommand { get; public set; }
    public NpgsqlDataAdapter(NpgsqlCommand command);
    public NpgsqlDataAdapter(string sql, NpgsqlConnection _sqlConnection);
    public NpgsqlCommand get_SelectCommand();
    public void set_SelectCommand(NpgsqlCommand value);
    public void Fill(DataTable dt);
    public sealed virtual void Fill(DataSet ds);
}
public class SqlSugar.ObjectFuncModel : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FuncName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<object> <Parameters>k__BackingField;
    public string FuncName { get; public set; }
    public List`1<object> Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FuncName();
    [CompilerGeneratedAttribute]
public void set_FuncName(string value);
    [CompilerGeneratedAttribute]
public List`1<object> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(List`1<object> value);
    public static ObjectFuncModel Create(string FuncName, Object[] Parameters);
}
internal class SqlSugar.OneToManyNavgateExpression : object {
    private SqlSugarProvider context;
    private EntityInfo EntityInfo;
    private EntityInfo ProPertyEntity;
    private Navigate Navigat;
    public string ShorName;
    public string PropertyShortName;
    private string MemberName;
    private string MethodName;
    private string whereSql;
    public int ParameterIndex;
    private MethodCallExpressionResolve methodCallExpressionResolve;
    public OneToManyNavgateExpression(SqlSugarProvider context, MethodCallExpressionResolve methodCallExpressionResolve);
    internal bool IsNavgate(Expression expression);
    private string GetWhereSql(MethodCallExpression memberExp);
    private void InitType(Expression whereExp);
    private bool ValidateNav(bool result, MemberExpression memberExp, Expression childExpression);
    internal MapperSql GetSql();
    private MapperSql GetDynamicSql();
    private MapperSql GetManyToManySql();
    private MapperSql GetOneToManySql();
    private string GetMethodSql(string sql);
    [CompilerGeneratedAttribute]
private bool <IsNavgate>b__12_1(ParameterExpression z);
    [CompilerGeneratedAttribute]
private bool <IsNavgate>b__12_0(ParameterExpression z);
    [CompilerGeneratedAttribute]
private bool <GetManyToManySql>b__18_2(EntityColumnInfo it);
    [CompilerGeneratedAttribute]
private bool <GetManyToManySql>b__18_3(EntityColumnInfo it);
    [CompilerGeneratedAttribute]
private bool <GetManyToManySql>b__18_4(EntityColumnInfo it);
    [CompilerGeneratedAttribute]
private bool <GetManyToManySql>b__18_5(EntityColumnInfo it);
    [CompilerGeneratedAttribute]
private bool <GetOneToManySql>b__19_1(EntityColumnInfo it);
    [CompilerGeneratedAttribute]
private bool <GetOneToManySql>b__19_2(EntityColumnInfo it);
}
internal class SqlSugar.OneToManyNavgateExpressionN : object {
    public SqlSugarProvider context;
    public string shorName;
    public EntityInfo entityInfo;
    public List`1<ExpressionItems> items;
    public string whereSql;
    public MethodCallExpressionResolve methodCallExpressionResolve;
    public OneToManyNavgateExpressionN(SqlSugarProvider context, MethodCallExpressionResolve methodCallExpressionResolve);
    internal bool IsNavgate(Expression expression);
    private bool ValiteOneManyCall(bool result, MethodCallExpression callExpression, MemberExpression memberExp, Expression childExpression);
    public object GetSql();
    private static EntityColumnInfo GetFirstPkColumn(ExpressionItems last, EntityColumnInfo FirstPkColumn);
    private static string OneToMany(ExpressionItems& formInfo, Int32& i, ISugarQueryable`1<object> queryable, Int32& index, ExpressionItems item);
    private static string OneToOne(ExpressionItems& formInfo, Int32& i, ISugarQueryable`1<object> queryable, Int32& index, ExpressionItems item);
    private string ManyToMany(ExpressionItems& formInfo, Int32& i, ISugarQueryable`1<object> queryable, Int32& index, ExpressionItems item);
    private string GetWhereSql1(string wheresql, string lastShortName, List`1<ExpressionItems> joinInfos, ISqlBuilder sqlBuilder);
    private string GetWhereSql(MethodCallExpression memberExp);
    private static bool IsParameter(Expression child2Expression);
    private static Expression GetMemberExpression(Expression child2Expression);
    private static bool IsClass(Expression child2Expression);
}
internal class SqlSugar.OneToOneNavgateExpression : object {
    public ExpressionContext ExpContext;
    private SqlSugarProvider context;
    internal EntityInfo EntityInfo;
    internal EntityInfo ProPertyEntity;
    private Navigate Navigat;
    public string ShorName;
    internal string MemberName;
    private MemberExpressionResolve _memberExpressionResolve;
    public OneToOneNavgateExpression(SqlSugarProvider context, MemberExpressionResolve memberExpressionResolve);
    internal bool IsNavgate(Expression expression);
    private bool ValidateNav(bool result, MemberExpression memberExp, Expression childExpression);
    internal MapperSql GetSql();
    private MapperSql NavigatDynamicSql();
    [CompilerGeneratedAttribute]
private bool <GetSql>b__11_1(EntityColumnInfo it);
    [CompilerGeneratedAttribute]
private bool <GetSql>b__11_2(EntityColumnInfo it);
    [CompilerGeneratedAttribute]
private bool <GetSql>b__11_3(EntityColumnInfo it);
    [CompilerGeneratedAttribute]
private bool <NavigatDynamicSql>b__12_0(EntityColumnInfo it);
}
internal class SqlSugar.OneToOneNavgateExpressionN : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <shorName>k__BackingField;
    public EntityInfo entityInfo;
    public List`1<ExpressionItems> items;
    public SqlSugarProvider context;
    public ISqlBuilder builder;
    public string shorName { get; public set; }
    public OneToOneNavgateExpressionN(SqlSugarProvider context);
    [CompilerGeneratedAttribute]
public string get_shorName();
    [CompilerGeneratedAttribute]
public void set_shorName(string value);
    public bool IsNavgate(Expression expression);
    public MapperSql GetMemberSql();
    private bool ValidateIsJoinMember(bool result, MemberExpression memberExp, Expression childExpression);
    private string ToShortName(string name);
    private static bool IsParameter(Expression child2Expression);
    private static Expression GetMemberExpression(Expression child2Expression);
    private static bool IsClass(Expression child2Expression);
}
public class SqlSugar.OracleBlukCopy : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<IGrouping`2<int, DbColumnInfo>> <DbColumnInfoList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private InsertBuilder <InsertBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Object[] <Inserts>k__BackingField;
    internal List`1<IGrouping`2<int, DbColumnInfo>> DbColumnInfoList { get; internal set; }
    internal SqlSugarProvider Context { get; internal set; }
    internal ISqlBuilder Builder { get; internal set; }
    internal InsertBuilder InsertBuilder { get; internal set; }
    internal Object[] Inserts { get; internal set; }
    [CompilerGeneratedAttribute]
internal List`1<IGrouping`2<int, DbColumnInfo>> get_DbColumnInfoList();
    [CompilerGeneratedAttribute]
internal void set_DbColumnInfoList(List`1<IGrouping`2<int, DbColumnInfo>> value);
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal ISqlBuilder get_Builder();
    [CompilerGeneratedAttribute]
internal void set_Builder(ISqlBuilder value);
    [CompilerGeneratedAttribute]
internal InsertBuilder get_InsertBuilder();
    [CompilerGeneratedAttribute]
internal void set_InsertBuilder(InsertBuilder value);
    [CompilerGeneratedAttribute]
internal Object[] get_Inserts();
    [CompilerGeneratedAttribute]
internal void set_Inserts(Object[] value);
    public int ExecuteBulkCopy();
    [AsyncStateMachineAttribute("SqlSugar.OracleBlukCopy/<ExecuteBulkCopyAsync>d__21")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteBulkCopyAsync();
    private int WriteToServer();
    private DataTable GetCopyWriteDataTable(DataTable dt);
    private OracleBulkCopy GetBulkCopyInstance();
    private DataTable GetCopyData();
    private void CloseDb();
}
public class SqlSugar.OracleBuilder : SqlBuilderProvider {
    public string SqlParameterKeyWord { get; }
    public string SqlDateNow { get; }
    public string FullSqlDateNow { get; }
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    public bool IsUppper { get; }
    public virtual string get_SqlParameterKeyWord();
    public virtual string get_SqlDateNow();
    public virtual string get_FullSqlDateNow();
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
    public virtual string GetTranslationTableName(string name);
    public virtual string GetTranslationColumnName(string entityName, string propertyName);
    public virtual string GetTranslationColumnName(string propertyName);
    public virtual string RemoveParentheses(string sql);
    public virtual void FormatSaveQueueSql(StringBuilder sqlBuilder);
    public bool get_IsUppper();
}
public class SqlSugar.OracleCodeFirst : CodeFirstProvider {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <DefultLength>k__BackingField;
    protected int DefultLength { get; protected set; }
    [CompilerGeneratedAttribute]
protected virtual int get_DefultLength();
    [CompilerGeneratedAttribute]
protected virtual void set_DefultLength(int value);
    protected virtual void GetDbType(EntityColumnInfo item, Type propertyType, DbColumnInfo result);
    protected virtual void KeyAction(EntityColumnInfo item, DbColumnInfo dbColumn, Boolean& pkDiff, Boolean& idEntityDiff);
}
public class SqlSugar.OracleDbBind : DbBindProvider {
    public static List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypesConst;
    public List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypes { get; }
    public List`1<string> StringThrow { get; }
    private static OracleDbBind();
    public virtual string GetDbTypeName(string csharpTypeName);
    public virtual string GetPropertyTypeName(string dbTypeName);
    public virtual List`1<KeyValuePair`2<string, CSharpDataType>> get_MappingTypes();
    public virtual List`1<string> get_StringThrow();
}
public class SqlSugar.OracleDbFirst : DbFirstProvider {
}
public class SqlSugar.OracleDbMaintenance : DbMaintenanceProvider {
    protected string GetDataBaseSql { get; }
    protected string GetColumnInfosByTableNameSql { get; }
    protected string GetTableInfoListSql { get; }
    protected string GetViewInfoListSql { get; }
    protected string IsAnyIndexSql { get; }
    protected string CreateIndexSql { get; }
    protected string AddDefaultValueSql { get; }
    protected string CreateDataBaseSql { get; }
    protected string AddPrimaryKeySql { get; }
    protected string AddColumnToTableSql { get; }
    protected string AlterColumnToTableSql { get; }
    protected string BackupDataBaseSql { get; }
    protected string CreateTableSql { get; }
    protected string CreateTableColumn { get; }
    protected string TruncateTableSql { get; }
    protected string BackupTableSql { get; }
    protected string DropTableSql { get; }
    protected string DropColumnToTableSql { get; }
    protected string DropConstraintSql { get; }
    protected string RenameColumnSql { get; }
    protected string AddColumnRemarkSql { get; }
    protected string DeleteColumnRemarkSql { get; }
    protected string IsAnyColumnRemarkSql { get; }
    protected string AddTableRemarkSql { get; }
    protected string DeleteTableRemarkSql { get; }
    protected string IsAnyTableRemarkSql { get; }
    protected string RenameTableSql { get; }
    protected string IsAnyProcedureSql { get; }
    protected string CheckSystemTablePermissionsSql { get; }
    protected string CreateTableNull { get; }
    protected string CreateTableNotNull { get; }
    protected string CreateTablePirmaryKey { get; }
    protected string CreateTableIdentity { get; }
    public bool IsUppper { get; }
    protected virtual string get_GetDataBaseSql();
    protected virtual string get_GetColumnInfosByTableNameSql();
    protected virtual string get_GetTableInfoListSql();
    protected virtual string get_GetViewInfoListSql();
    protected virtual string get_IsAnyIndexSql();
    protected virtual string get_CreateIndexSql();
    protected virtual string get_AddDefaultValueSql();
    protected virtual string get_CreateDataBaseSql();
    protected virtual string get_AddPrimaryKeySql();
    protected virtual string get_AddColumnToTableSql();
    protected virtual string get_AlterColumnToTableSql();
    protected virtual string get_BackupDataBaseSql();
    protected virtual string get_CreateTableSql();
    protected virtual string get_CreateTableColumn();
    protected virtual string get_TruncateTableSql();
    protected virtual string get_BackupTableSql();
    protected virtual string get_DropTableSql();
    protected virtual string get_DropColumnToTableSql();
    protected virtual string get_DropConstraintSql();
    protected virtual string get_RenameColumnSql();
    protected virtual string get_AddColumnRemarkSql();
    protected virtual string get_DeleteColumnRemarkSql();
    protected virtual string get_IsAnyColumnRemarkSql();
    protected virtual string get_AddTableRemarkSql();
    protected virtual string get_DeleteTableRemarkSql();
    protected virtual string get_IsAnyTableRemarkSql();
    protected virtual string get_RenameTableSql();
    protected virtual string get_IsAnyProcedureSql();
    protected virtual string get_CheckSystemTablePermissionsSql();
    protected virtual string get_CreateTableNull();
    protected virtual string get_CreateTableNotNull();
    protected virtual string get_CreateTablePirmaryKey();
    protected virtual string get_CreateTableIdentity();
    public virtual bool IsAnyTable(string tableName, bool isCache);
    public virtual bool UpdateColumn(string tableName, DbColumnInfo column);
    protected virtual string GetUpdateColumnSqlOnlyType(string tableName, DbColumnInfo columnInfo);
    public virtual bool RenameTable(string oldTableName, string newTableName);
    public virtual List`1<string> GetDbTypes();
    public virtual List`1<string> GetTriggerNames(string tableName);
    public virtual List`1<string> GetFuncList();
    public virtual List`1<string> GetIndexList(string tableName);
    public virtual List`1<string> GetProcList(string dbName);
    public virtual bool AddColumn(string tableName, DbColumnInfo columnInfo);
    public virtual bool CreateIndex(string tableName, String[] columnNames, bool isUnique);
    public virtual bool AddDefaultValue(string tableName, string columnName, string defaultValue);
    public virtual bool CreateDatabase(string databaseDirectory);
    public virtual bool CreateDatabase(string databaseName, string databaseDirectory);
    public virtual bool AddRemark(EntityInfo entity);
    public virtual List`1<DbColumnInfo> GetColumnInfosByTableName(string tableName, bool isCache);
    private List`1<DbColumnInfo> GetColumnInfosByTableName(string tableName);
    private List`1<DbColumnInfo> GetOracleDbType(string tableName);
    private List`1<string> GetPrimaryKeyByTableNames(string tableName);
    public string GetTableComment(string tableName);
    public string GetFieldComment(string tableName, string filedName);
    public virtual bool CreateTable(string tableName, List`1<DbColumnInfo> columns, bool isCreatePrimaryKey);
    public virtual bool IsAnyIndex(string indexName);
    public virtual bool IsAnyConstraint(string constraintName);
    public virtual bool DropIndex(string indexName, string tableName);
    public bool get_IsUppper();
    private static void ConvertCreateColumnInfo(DbColumnInfo x);
}
public class SqlSugar.OracleDeleteable`1 : DeleteableProvider`1<T> {
    protected virtual List`1<string> GetIdentityKeys();
}
public class SqlSugar.OracleDeleteBuilder : DeleteBuilder {
}
public class SqlSugar.OracleExpressionContext : ExpressionContext {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public string SqlParameterKeyWord { get; }
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    public bool IsUppper { get; }
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    public virtual string get_SqlParameterKeyWord();
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
    public virtual string GetTranslationTableName(string entityName, bool isMapping);
    public virtual string GetTranslationColumnName(string columnName);
    public virtual string GetDbColumnName(string entityName, string propertyName);
    public virtual bool IsTranslationText(string name);
    public bool get_IsUppper();
}
public class SqlSugar.OracleFastBuilder : FastBuilder {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsActionUpdateColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbFastestProperties <DbFastestProperties>k__BackingField;
    private EntityInfo entityInfo;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UpdateSql>k__BackingField;
    public bool IsActionUpdateColumns { get; public set; }
    public DbFastestProperties DbFastestProperties { get; public set; }
    public string UpdateSql { get; public set; }
    public OracleFastBuilder(EntityInfo entityInfo);
    [CompilerGeneratedAttribute]
public virtual bool get_IsActionUpdateColumns();
    [CompilerGeneratedAttribute]
public virtual void set_IsActionUpdateColumns(bool value);
    [CompilerGeneratedAttribute]
public virtual DbFastestProperties get_DbFastestProperties();
    [CompilerGeneratedAttribute]
public virtual void set_DbFastestProperties(DbFastestProperties value);
    [CompilerGeneratedAttribute]
public virtual string get_UpdateSql();
    [CompilerGeneratedAttribute]
public virtual void set_UpdateSql(string value);
    [AsyncStateMachineAttribute("SqlSugar.OracleFastBuilder/<CreateTempAsync>d__14`1")]
[DebuggerStepThroughAttribute]
public virtual Task CreateTempAsync(DataTable dt);
    [AsyncStateMachineAttribute("SqlSugar.OracleFastBuilder/<UpdateByTempAsync>d__15")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> UpdateByTempAsync(string tableName, string tempName, String[] updateColumns, String[] whereColumns);
    private OracleBulkCopy GetBulkCopyInstance();
    public virtual Task`1<int> Merge(string tableName, DataTable dt, EntityInfo entityInfo, String[] whereColumns, String[] updateColumns, List`1<T> datas);
    public sealed virtual Task`1<int> ExecuteBulkCopyAsync(DataTable dt);
}
public class SqlSugar.OracleInsertable`1 : InsertableProvider`1<T> {
    protected virtual List`1<string> GetIdentityKeys();
    protected string GetSeqName();
    protected List`1<string> GetSeqNames();
    public virtual int ExecuteReturnIdentity();
    private bool isIdEntityEnable();
    public virtual long ExecuteReturnBigIdentity();
    [AsyncStateMachineAttribute("SqlSugar.OracleInsertable`1/<ExecuteReturnIdentityAsync>d__6")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> ExecuteReturnIdentityAsync();
    [AsyncStateMachineAttribute("SqlSugar.OracleInsertable`1/<ExecuteReturnBigIdentityAsync>d__7")]
[DebuggerStepThroughAttribute]
public virtual Task`1<long> ExecuteReturnBigIdentityAsync();
    private void AutoEnd(bool oldIsAuto);
    private bool AutoBegin();
    private object GetSeqValue(string seqName);
    protected virtual void PreToSql();
}
public class SqlSugar.OracleInsertBuilder : InsertBuilder {
    private int i;
    public string SqlTemplate { get; }
    public string SqlTemplateBatch { get; }
    public virtual string get_SqlTemplate();
    public virtual string get_SqlTemplateBatch();
    public virtual string ToSqlString();
    private string Big(List`1<EntityColumnInfo> identities, List`1<IGrouping`2<int, DbColumnInfo>> groupList, string columnsString);
    private string Small(List`1<EntityColumnInfo> identities, List`1<IGrouping`2<int, DbColumnInfo>> groupList, string columnsString);
    public object FormatValue(object value, string name);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__4_4(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__4_5(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__4_6(EntityColumnInfo it);
    [CompilerGeneratedAttribute]
private string <Small>b__6_0(EntityColumnInfo it);
    [CompilerGeneratedAttribute]
private string <Small>b__6_1(DbColumnInfo it);
}
public class SqlSugar.OracleMethod : DefaultDbMethod {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ParameterKeyWord>k__BackingField;
    public string ParameterKeyWord { get; public set; }
    public virtual string IsNullOrEmpty(MethodCallExpressionModel model);
    public virtual string WeekOfYear(MethodCallExpressionModel mode);
    public virtual string BitwiseAnd(MethodCallExpressionModel model);
    public virtual string BitwiseInclusiveOR(MethodCallExpressionModel model);
    [CompilerGeneratedAttribute]
public virtual string get_ParameterKeyWord();
    [CompilerGeneratedAttribute]
public virtual void set_ParameterKeyWord(string value);
    public virtual string Modulo(MethodCallExpressionModel model);
    public virtual string GetStringJoinSelector(string result, string separator);
    public virtual string HasValue(MethodCallExpressionModel model);
    public virtual string DateDiff(MethodCallExpressionModel model);
    private void PageEach(IEnumerable`1<T> pageItems, int pageSize, Action`1<List`1<T>> action);
    public virtual string ContainsArray(MethodCallExpressionModel model);
    public virtual string ToInt64(MethodCallExpressionModel model);
    public virtual string ToTime(MethodCallExpressionModel model);
    public virtual string Substring(MethodCallExpressionModel model);
    public virtual string DateValue(MethodCallExpressionModel model);
    public virtual string DateAddByType(MethodCallExpressionModel model);
    public virtual string DateAddDay(MethodCallExpressionModel model);
    public virtual string ToString(MethodCallExpressionModel model);
    public virtual string ToDecimal(MethodCallExpressionModel model);
    public virtual string ToDate(MethodCallExpressionModel model);
    public virtual string ToDateShort(MethodCallExpressionModel model);
    public virtual string Contains(MethodCallExpressionModel model);
    public virtual string StartsWith(MethodCallExpressionModel model);
    public virtual string EndsWith(MethodCallExpressionModel model);
    public virtual string Trim(MethodCallExpressionModel model);
    public virtual string DateIsSameDay(MethodCallExpressionModel model);
    public virtual string DateIsSameByType(MethodCallExpressionModel model);
    public virtual string Length(MethodCallExpressionModel model);
    public virtual string IsNull(MethodCallExpressionModel model);
    public virtual string MergeString(String[] strings);
    public virtual string GetDate();
    public virtual string GetRandom();
    public virtual string Collate(MethodCallExpressionModel model);
    public virtual string JsonField(MethodCallExpressionModel model);
    public virtual string CharIndex(MethodCallExpressionModel model);
    public virtual string TrimEnd(MethodCallExpressionModel mode);
    public virtual string TrimStart(MethodCallExpressionModel mode);
    public virtual string Left(MethodCallExpressionModel mode);
    public virtual string Right(MethodCallExpressionModel mode);
    public virtual string Ceil(MethodCallExpressionModel mode);
    public virtual string NewUid(MethodCallExpressionModel mode);
    public virtual string FullTextContains(MethodCallExpressionModel mode);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private string <>n__0(MethodCallExpressionModel model);
}
public class SqlSugar.OracleProvider : AdoProvider {
    private static String[] KeyWord;
    public string SqlParameterKeyWord { get; }
    public IDbConnection Connection { get; public set; }
    public Func`3<string, SugarParameter[], KeyValuePair`2<string, SugarParameter[]>> ProcessingEventStartingSQL { get; }
    public Action`1<SqlSugarException> ErrorEvent { get; }
    private static OracleProvider();
    public virtual string get_SqlParameterKeyWord();
    public virtual IDbConnection get_Connection();
    public virtual void set_Connection(IDbConnection value);
    public virtual void BeginTran(string transactionName);
    public virtual void BeginTran(IsolationLevel iso, string transactionName);
    public virtual Func`3<string, SugarParameter[], KeyValuePair`2<string, SugarParameter[]>> get_ProcessingEventStartingSQL();
    public virtual IDataAdapter GetAdapter();
    public virtual DbCommand GetCommand(string sql, SugarParameter[] parameters);
    private static string ReplaceKeyWordParameterName(string sql, SugarParameter[] parameters);
    private static string ReplaceKeyWordWithAd(string sql, SugarParameter[] parameters);
    public virtual Action`1<SqlSugarException> get_ErrorEvent();
    public virtual void SetCommandToAdapter(IDataAdapter dataAdapter, DbCommand command);
    public virtual IDataParameter[] ToIDbDataParameter(SugarParameter[] parameters);
    [CompilerGeneratedAttribute]
private KeyValuePair`2<string, SugarParameter[]> <get_ProcessingEventStartingSQL>b__9_0(string sql, SugarParameter[] parameter);
    [CompilerGeneratedAttribute]
private void <get_ErrorEvent>b__16_0(SqlSugarException it);
}
public class SqlSugar.OracleQueryable`1 : QueryableProvider`1<T> {
    public virtual ISugarQueryable`1<T> With(string withString);
    protected virtual List`1<string> GetIdentityKeys();
}
public class SqlSugar.OracleQueryable`10 : QueryableProvider`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> {
}
public class SqlSugar.OracleQueryable`11 : QueryableProvider`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> {
}
public class SqlSugar.OracleQueryable`12 : QueryableProvider`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> {
}
public class SqlSugar.OracleQueryable`2 : QueryableProvider`2<T, T2> {
}
public class SqlSugar.OracleQueryable`3 : QueryableProvider`3<T, T2, T3> {
}
public class SqlSugar.OracleQueryable`4 : QueryableProvider`4<T, T2, T3, T4> {
}
public class SqlSugar.OracleQueryable`5 : QueryableProvider`5<T, T2, T3, T4, T5> {
}
public class SqlSugar.OracleQueryable`6 : QueryableProvider`6<T, T2, T3, T4, T5, T6> {
}
public class SqlSugar.OracleQueryable`7 : QueryableProvider`7<T, T2, T3, T4, T5, T6, T7> {
}
public class SqlSugar.OracleQueryable`8 : QueryableProvider`8<T, T2, T3, T4, T5, T6, T7, T8> {
}
public class SqlSugar.OracleQueryable`9 : QueryableProvider`9<T, T2, T3, T4, T5, T6, T7, T8, T9> {
}
public class SqlSugar.OracleQueryBuilder : QueryBuilder {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSelectNoAll>k__BackingField;
    public bool IsSelectNoAll { get; public set; }
    public string SqlTemplate { get; }
    [CompilerGeneratedAttribute]
public virtual bool get_IsSelectNoAll();
    [CompilerGeneratedAttribute]
public virtual void set_IsSelectNoAll(bool value);
    public virtual bool IsComplexModel(string sql);
    public virtual string get_SqlTemplate();
    public virtual string ToSqlString();
    private string OffsetPage();
    public string _ToSqlString();
    public virtual string ToPageSql(string sql, Nullable`1<int> take, Nullable`1<int> skip, bool isExternal);
    public virtual string ToPageSql2(string sql, Nullable`1<int> pageIndex, Nullable`1<int> pageSize, bool isExternal);
}
public class SqlSugar.OracleUpdateable`1 : UpdateableProvider`1<T> {
    protected virtual List`1<string> GetIdentityKeys();
    public virtual int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.OracleUpdateable`1/<ExecuteCommandAsync>d__2")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> ExecuteCommandAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__0();
}
public class SqlSugar.OracleUpdateBuilder : UpdateBuilder {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ReSetValueBySqlExpListType>k__BackingField;
    private int i;
    public string ReSetValueBySqlExpListType { get; public set; }
    public bool IsUppper { get; }
    [CompilerGeneratedAttribute]
public virtual string get_ReSetValueBySqlExpListType();
    [CompilerGeneratedAttribute]
public virtual void set_ReSetValueBySqlExpListType(string value);
    protected virtual string TomultipleSqlString(List`1<IGrouping`2<int, DbColumnInfo>> groupList);
    private string GetOracleUpdateColums(DbColumnInfo m);
    public object FormatValue(object value, bool isPrimaryKey, string name);
    protected virtual string GetJoinUpdate(string columnsString, String& whereString);
    public bool get_IsUppper();
    [CompilerGeneratedAttribute]
private string <TomultipleSqlString>b__4_0(IGrouping`2<int, DbColumnInfo> t);
    [CompilerGeneratedAttribute]
private bool <TomultipleSqlString>b__4_2(DbColumnInfo s);
    [CompilerGeneratedAttribute]
private string <TomultipleSqlString>b__4_3(DbColumnInfo m);
}
public class SqlSugar.OrderByModel : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private OrderByType <OrderByType>k__BackingField;
    public object FieldName { get; public set; }
    public OrderByType OrderByType { get; public set; }
    [CompilerGeneratedAttribute]
public object get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(object value);
    [CompilerGeneratedAttribute]
public OrderByType get_OrderByType();
    [CompilerGeneratedAttribute]
public void set_OrderByType(OrderByType value);
    public static List`1<OrderByModel> Create(OrderByModel[] orderByModel);
}
public enum SqlSugar.OrderByType : Enum {
    public int value__;
    public static OrderByType Asc;
    public static OrderByType Desc;
}
public class SqlSugar.OscarBuilder : SqlBuilderProvider {
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    public string SqlDateNow { get; }
    public string FullSqlDateNow { get; }
    public bool isAutoToLower { get; }
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
    public virtual string get_SqlDateNow();
    public virtual string get_FullSqlDateNow();
    public bool get_isAutoToLower();
    public virtual string GetTranslationColumnName(string propertyName);
    public virtual string GetTranslationColumnName(string entityName, string propertyName);
    public virtual string GetTranslationTableName(string name);
    [CompilerGeneratedAttribute]
private string <GetTranslationColumnName>b__10_0(string it);
}
public class SqlSugar.OscarCodeFirst : CodeFirstProvider {
    public virtual void NoExistLogic(EntityInfo entityInfo);
    protected virtual DbColumnInfo EntityColumnToDbColumn(EntityInfo entityInfo, string tableName, EntityColumnInfo item);
    protected virtual void ConvertColumns(List`1<DbColumnInfo> dbColumns);
    protected virtual void ChangeKey(EntityInfo entityInfo, string tableName, EntityColumnInfo item);
}
public class SqlSugar.OscarDataAdapter : object {
    private OscarCommand command;
    private string sql;
    private OscarConnection _sqlConnection;
    public OscarCommand SelectCommand { get; public set; }
    public OscarDataAdapter(OscarCommand command);
    public OscarDataAdapter(string sql, OscarConnection _sqlConnection);
    public OscarCommand get_SelectCommand();
    public void set_SelectCommand(OscarCommand value);
    public void Fill(DataTable dt);
    public sealed virtual void Fill(DataSet ds);
}
public class SqlSugar.OscarDbBind : DbBindProvider {
    public static List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypesConst;
    public List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypes { get; }
    public List`1<string> StringThrow { get; }
    private static OscarDbBind();
    public virtual string GetDbTypeName(string csharpTypeName);
    public virtual string GetPropertyTypeName(string dbTypeName);
    public virtual List`1<KeyValuePair`2<string, CSharpDataType>> get_MappingTypes();
    public virtual List`1<string> get_StringThrow();
}
public class SqlSugar.OscarDbFirst : DbFirstProvider {
}
public class SqlSugar.OscarDbMaintenance : DbMaintenanceProvider {
    protected string GetDataBaseSql { get; }
    protected string GetColumnInfosByTableNameSql { get; }
    protected string GetTableInfoListSql { get; }
    protected string GetViewInfoListSql { get; }
    protected string CreateDataBaseSql { get; }
    protected string AddPrimaryKeySql { get; }
    protected string AddColumnToTableSql { get; }
    protected string AlterColumnToTableSql { get; }
    protected string BackupDataBaseSql { get; }
    protected string CreateTableSql { get; }
    protected string CreateTableColumn { get; }
    protected string TruncateTableSql { get; }
    protected string BackupTableSql { get; }
    protected string DropTableSql { get; }
    protected string DropColumnToTableSql { get; }
    protected string DropConstraintSql { get; }
    protected string RenameColumnSql { get; }
    protected string AddColumnRemarkSql { get; }
    protected string DeleteColumnRemarkSql { get; }
    protected string IsAnyColumnRemarkSql { get; }
    protected string AddTableRemarkSql { get; }
    protected string DeleteTableRemarkSql { get; }
    protected string IsAnyTableRemarkSql { get; }
    protected string RenameTableSql { get; }
    protected string CreateIndexSql { get; }
    protected string AddDefaultValueSql { get; }
    protected string IsAnyIndexSql { get; }
    protected string IsAnyProcedureSql { get; }
    protected string CheckSystemTablePermissionsSql { get; }
    protected string CreateTableNull { get; }
    protected string CreateTableNotNull { get; }
    protected string CreateTablePirmaryKey { get; }
    protected string CreateTableIdentity { get; }
    protected virtual string get_GetDataBaseSql();
    protected virtual string get_GetColumnInfosByTableNameSql();
    protected virtual string get_GetTableInfoListSql();
    protected virtual string get_GetViewInfoListSql();
    protected virtual string get_CreateDataBaseSql();
    protected virtual string get_AddPrimaryKeySql();
    protected virtual string get_AddColumnToTableSql();
    protected virtual string get_AlterColumnToTableSql();
    protected virtual string get_BackupDataBaseSql();
    protected virtual string get_CreateTableSql();
    protected virtual string get_CreateTableColumn();
    protected virtual string get_TruncateTableSql();
    protected virtual string get_BackupTableSql();
    protected virtual string get_DropTableSql();
    protected virtual string get_DropColumnToTableSql();
    protected virtual string get_DropConstraintSql();
    protected virtual string get_RenameColumnSql();
    protected virtual string get_AddColumnRemarkSql();
    protected virtual string get_DeleteColumnRemarkSql();
    protected virtual string get_IsAnyColumnRemarkSql();
    protected virtual string get_AddTableRemarkSql();
    protected virtual string get_DeleteTableRemarkSql();
    protected virtual string get_IsAnyTableRemarkSql();
    protected virtual string get_RenameTableSql();
    protected virtual string get_CreateIndexSql();
    protected virtual string get_AddDefaultValueSql();
    protected virtual string get_IsAnyIndexSql();
    protected virtual string get_IsAnyProcedureSql();
    protected virtual string get_CheckSystemTablePermissionsSql();
    protected virtual string get_CreateTableNull();
    protected virtual string get_CreateTableNotNull();
    protected virtual string get_CreateTablePirmaryKey();
    protected virtual string get_CreateTableIdentity();
    public virtual bool UpdateColumn(string tableName, DbColumnInfo columnInfo);
    protected string GetType(string tableName, DbColumnInfo columnInfo);
    protected virtual string GetUpdateColumnSql(string tableName, DbColumnInfo columnInfo);
    public virtual bool CreateDatabase(string databaseName, string databaseDirectory);
    public virtual bool AddRemark(EntityInfo entity);
    public virtual bool CreateTable(string tableName, List`1<DbColumnInfo> columns, bool isCreatePrimaryKey);
    protected virtual string GetCreateTableSql(string tableName, List`1<DbColumnInfo> columns);
    public virtual bool IsAnyConstraint(string constraintName);
    public virtual bool BackupDataBase(string databaseName, string fullFileName);
    public virtual List`1<DbColumnInfo> GetColumnInfosByTableName(string tableName, bool isCache);
    [CompilerGeneratedAttribute]
private string <CreateTable>b__71_1(DbColumnInfo it);
}
public class SqlSugar.OscarDeleteBuilder : DeleteBuilder {
}
public class SqlSugar.OscarExpressionContext : ExpressionContext {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
    public virtual string GetTranslationText(string name);
    public virtual string GetTranslationTableName(string entityName, bool isMapping);
    public virtual string GetTranslationColumnName(string columnName);
    public virtual string GetDbColumnName(string entityName, string propertyName);
    [CompilerGeneratedAttribute]
private string <GetTranslationColumnName>b__11_0(string it);
}
public class SqlSugar.OscarInsertBuilder : InsertBuilder {
    public string SqlTemplate { get; }
    public string SqlTemplateBatch { get; }
    public string SqlTemplateBatchUnion { get; }
    public string SqlTemplateBatchSelect { get; }
    public virtual string get_SqlTemplate();
    public virtual string get_SqlTemplateBatch();
    public virtual string get_SqlTemplateBatchUnion();
    public virtual string get_SqlTemplateBatchSelect();
    public virtual string ToSqlString();
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__8_2(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__8_3(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__8_4(DbColumnInfo it);
}
public class SqlSugar.OscarInserttable`1 : InsertableProvider`1<T> {
    public virtual int ExecuteReturnIdentity();
    [AsyncStateMachineAttribute("SqlSugar.OscarInserttable`1/<ExecuteReturnIdentityAsync>d__1")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> ExecuteReturnIdentityAsync();
    public virtual KeyValuePair`2<string, List`1<SugarParameter>> ToSql();
    public virtual long ExecuteReturnBigIdentity();
    [AsyncStateMachineAttribute("SqlSugar.OscarInserttable`1/<ExecuteReturnBigIdentityAsync>d__4")]
[DebuggerStepThroughAttribute]
public virtual Task`1<long> ExecuteReturnBigIdentityAsync();
    public virtual bool ExecuteCommandIdentityIntoEntity();
}
public class SqlSugar.OscarLMethod : DefaultDbMethod {
    public virtual string CharIndex(MethodCallExpressionModel model);
    public virtual string IIF(MethodCallExpressionModel model);
    public virtual string DateValue(MethodCallExpressionModel model);
    public virtual string Contains(MethodCallExpressionModel model);
    public virtual string StartsWith(MethodCallExpressionModel model);
    public virtual string EndsWith(MethodCallExpressionModel model);
    public virtual string DateIsSameDay(MethodCallExpressionModel model);
    public virtual string DateIsSameByType(MethodCallExpressionModel model);
    public virtual string ToDate(MethodCallExpressionModel model);
    public virtual string ToInt32(MethodCallExpressionModel model);
    public virtual string ToInt64(MethodCallExpressionModel model);
    public virtual string ToString(MethodCallExpressionModel model);
    public virtual string ToGuid(MethodCallExpressionModel model);
    public virtual string ToDouble(MethodCallExpressionModel model);
    public virtual string ToBool(MethodCallExpressionModel model);
    public virtual string ToDecimal(MethodCallExpressionModel model);
    public virtual string Length(MethodCallExpressionModel model);
    public virtual string MergeString(String[] strings);
    public virtual string IsNull(MethodCallExpressionModel model);
    public virtual string GetDate();
    public virtual string GetRandom();
    public virtual string EqualTrue(string fieldName);
    public virtual string DateDiff(MethodCallExpressionModel model);
}
public class SqlSugar.OscarProvider : AdoProvider {
    private static Dictionary`2<Type, OscarDbType> ArrayMapping;
    public IDbConnection Connection { get; public set; }
    private static OscarProvider();
    public virtual IDbConnection get_Connection();
    public virtual void set_Connection(IDbConnection value);
    public virtual void BeginTran(string transactionName);
    public virtual void BeginTran(IsolationLevel iso, string transactionName);
    public virtual IDataAdapter GetAdapter();
    public virtual DbCommand GetCommand(string sql, SugarParameter[] parameters);
    public virtual void SetCommandToAdapter(IDataAdapter dataAdapter, DbCommand command);
    public virtual IDataParameter[] ToIDbDataParameter(SugarParameter[] parameters);
}
public class SqlSugar.OscarQueryable`1 : QueryableProvider`1<T> {
    public virtual ISugarQueryable`1<T> With(string withString);
    public virtual ISugarQueryable`1<T> PartitionBy(string groupFileds);
}
public class SqlSugar.OscarQueryable`10 : QueryableProvider`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> {
}
public class SqlSugar.OscarQueryable`11 : QueryableProvider`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> {
}
public class SqlSugar.OscarQueryable`12 : QueryableProvider`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> {
}
public class SqlSugar.OscarQueryable`2 : QueryableProvider`2<T, T2> {
    public ISugarQueryable`2<T, T2> With(string withString);
}
public class SqlSugar.OscarQueryable`3 : QueryableProvider`3<T, T2, T3> {
}
public class SqlSugar.OscarQueryable`4 : QueryableProvider`4<T, T2, T3, T4> {
}
public class SqlSugar.OscarQueryable`5 : QueryableProvider`5<T, T2, T3, T4, T5> {
}
public class SqlSugar.OscarQueryable`6 : QueryableProvider`6<T, T2, T3, T4, T5, T6> {
}
public class SqlSugar.OscarQueryable`7 : QueryableProvider`7<T, T2, T3, T4, T5, T6, T7> {
}
public class SqlSugar.OscarQueryable`8 : QueryableProvider`8<T, T2, T3, T4, T5, T6, T7, T8> {
}
public class SqlSugar.OscarQueryable`9 : QueryableProvider`9<T, T2, T3, T4, T5, T6, T7, T8, T9> {
}
public class SqlSugar.OscarQueryBuilder : QueryBuilder {
    public string PageTempalte { get; }
    public string DefaultOrderByTemplate { get; }
    public string GetSelectValue { get; }
    public virtual string get_PageTempalte();
    public virtual string get_DefaultOrderByTemplate();
    public virtual bool IsComplexModel(string sql);
    public virtual string ToSqlString();
    public virtual string get_GetSelectValue();
}
public class SqlSugar.OscarUpdateBuilder : UpdateBuilder {
    public string SqlTemplateBatch { get; }
    public string SqlTemplateJoin { get; }
    public string SqlTemplateBatchUnion { get; }
    public virtual string get_SqlTemplateBatch();
    public virtual string get_SqlTemplateJoin();
    public virtual string get_SqlTemplateBatchUnion();
    public virtual object FormatValue(object value);
    protected virtual string TomultipleSqlString(List`1<IGrouping`2<int, DbColumnInfo>> groupList);
    private string GetOracleUpdateColums(int i, DbColumnInfo m);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private string <>n__0();
}
public class SqlSugar.PageModel : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <PageIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <TotalCount>k__BackingField;
    public int PageIndex { get; public set; }
    public int PageSize { get; public set; }
    public int TotalCount { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PageIndex();
    [CompilerGeneratedAttribute]
public void set_PageIndex(int value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
public void set_TotalCount(int value);
}
internal class SqlSugar.ParameterExpressionVisitor : ExpressionVisitor {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<ParameterExpression> <Parameters>k__BackingField;
    public List`1<ParameterExpression> Parameters { get; }
    [CompilerGeneratedAttribute]
public List`1<ParameterExpression> get_Parameters();
    protected virtual Expression VisitParameter(ParameterExpression node);
}
public class SqlSugar.ParameterInsertable`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IInsertable`1<T> <Inserable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    internal IInsertable`1<T> Inserable { get; internal set; }
    internal SqlSugarProvider Context { get; internal set; }
    [CompilerGeneratedAttribute]
internal IInsertable`1<T> get_Inserable();
    [CompilerGeneratedAttribute]
internal void set_Inserable(IInsertable`1<T> value);
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    public sealed virtual int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.ParameterInsertable`1/<ExecuteCommandAsync>d__9")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> ExecuteCommandAsync();
    public int DefaultExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.ParameterInsertable`1/<DefaultExecuteCommandAsync>d__11")]
[DebuggerStepThroughAttribute]
public Task`1<int> DefaultExecuteCommandAsync();
    public int ValuesExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.ParameterInsertable`1/<ValuesExecuteCommandAsync>d__13")]
[DebuggerStepThroughAttribute]
public Task`1<int> ValuesExecuteCommandAsync();
    private static int GetPageSize(int pageSize, int count);
    private void GetInsertValues(String[] identitys, List`1<string> columns, string tableWithString, Action removeCacheFunc, List`1<T> items, StringBuilder& batchInsetrSql, List`1<SugarParameter> allParamter);
    private string FormatValue(Type type, string name, object value, List`1<SugarParameter> allParamter, string keyword);
}
internal class SqlSugar.ParameterReplacer : ExpressionVisitor {
    private string _oldParameterName;
    private ParameterExpression _newParameter;
    public ParameterReplacer(string oldParameterName, ParameterExpression newParameter);
    protected virtual Expression VisitParameter(ParameterExpression node);
}
public class SqlSugar.ParameterUpdateable`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UpdateableProvider`1<T> <Updateable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    internal UpdateableProvider`1<T> Updateable { get; internal set; }
    internal SqlSugarProvider Context { get; internal set; }
    [CompilerGeneratedAttribute]
internal UpdateableProvider`1<T> get_Updateable();
    [CompilerGeneratedAttribute]
internal void set_Updateable(UpdateableProvider`1<T> value);
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    public int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.ParameterUpdateable`1/<ExecuteCommandAsync>d__9")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
    private void Before(List`1<T> updateObjects);
    protected void After(List`1<T> updateObjects);
    private List`1<DiffLogTableInfo> GetDiffTable(List`1<T> updateObjects);
    public KeyValuePair`2<string, SugarParameter[]> GetSql(List`1<T> updateObjects);
    private int GetPageSize(int pageSize, int count);
    private string FormatValue(Type type, string name, object value, List`1<SugarParameter> allParamter);
}
public class SqlSugar.PostgreSQLBuilder : SqlBuilderProvider {
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    public string SqlDateNow { get; }
    public string FullSqlDateNow { get; }
    public bool isAutoToLower { get; }
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
    public virtual string get_SqlDateNow();
    public virtual string get_FullSqlDateNow();
    public bool get_isAutoToLower();
    public virtual string GetTranslationColumnName(string propertyName);
    public virtual string GetTranslationColumnName(string entityName, string propertyName);
    public virtual string GetTranslationTableName(string name);
    public virtual string GetUnionFomatSql(string sql);
    public virtual Type GetNullType(string tableName, string columnName);
    [CompilerGeneratedAttribute]
private string <GetTranslationColumnName>b__10_0(string it);
}
public class SqlSugar.PostgreSQLCodeFirst : CodeFirstProvider {
    protected virtual void ExistLogicEnd(List`1<EntityColumnInfo> dbColumns);
    public virtual void NoExistLogic(EntityInfo entityInfo);
    protected virtual DbColumnInfo EntityColumnToDbColumn(EntityInfo entityInfo, string tableName, EntityColumnInfo item);
    protected virtual void ConvertColumns(List`1<DbColumnInfo> dbColumns);
    protected virtual void ChangeKey(EntityInfo entityInfo, string tableName, EntityColumnInfo item);
}
public class SqlSugar.PostgreSQLDbBind : DbBindProvider {
    public static List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypesConst;
    public List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypes { get; }
    public List`1<string> StringThrow { get; }
    private static PostgreSQLDbBind();
    public virtual string GetDbTypeName(string csharpTypeName);
    public virtual string GetPropertyTypeName(string dbTypeName);
    public virtual List`1<KeyValuePair`2<string, CSharpDataType>> get_MappingTypes();
    public virtual List`1<string> get_StringThrow();
}
public class SqlSugar.PostgreSQLDbFirst : DbFirstProvider {
}
public class SqlSugar.PostgreSQLDbMaintenance : DbMaintenanceProvider {
    protected string GetDataBaseSql { get; }
    protected string GetColumnInfosByTableNameSql { get; }
    protected string GetTableInfoListSql { get; }
    protected string GetViewInfoListSql { get; }
    protected string CreateDataBaseSql { get; }
    protected string AddPrimaryKeySql { get; }
    protected string AddColumnToTableSql { get; }
    protected string AlterColumnToTableSql { get; }
    protected string BackupDataBaseSql { get; }
    protected string CreateTableSql { get; }
    protected string CreateTableColumn { get; }
    protected string TruncateTableSql { get; }
    protected string BackupTableSql { get; }
    protected string DropTableSql { get; }
    protected string DropColumnToTableSql { get; }
    protected string DropConstraintSql { get; }
    protected string RenameColumnSql { get; }
    protected string AddColumnRemarkSql { get; }
    protected string DeleteColumnRemarkSql { get; }
    protected string IsAnyColumnRemarkSql { get; }
    protected string AddTableRemarkSql { get; }
    protected string DeleteTableRemarkSql { get; }
    protected string IsAnyTableRemarkSql { get; }
    protected string RenameTableSql { get; }
    protected string CreateIndexSql { get; }
    protected string AddDefaultValueSql { get; }
    protected string IsAnyIndexSql { get; }
    protected string IsAnyProcedureSql { get; }
    protected string CheckSystemTablePermissionsSql { get; }
    protected string CreateTableNull { get; }
    protected string CreateTableNotNull { get; }
    protected string CreateTablePirmaryKey { get; }
    protected string CreateTableIdentity { get; }
    private bool isAutoToLowerCodeFirst { get; }
    protected virtual string get_GetDataBaseSql();
    protected virtual string get_GetColumnInfosByTableNameSql();
    protected virtual string get_GetTableInfoListSql();
    protected virtual string get_GetViewInfoListSql();
    protected virtual string get_CreateDataBaseSql();
    protected virtual string get_AddPrimaryKeySql();
    protected virtual string get_AddColumnToTableSql();
    protected virtual string get_AlterColumnToTableSql();
    protected virtual string get_BackupDataBaseSql();
    protected virtual string get_CreateTableSql();
    protected virtual string get_CreateTableColumn();
    protected virtual string get_TruncateTableSql();
    protected virtual string get_BackupTableSql();
    protected virtual string get_DropTableSql();
    protected virtual string get_DropColumnToTableSql();
    protected virtual string get_DropConstraintSql();
    protected virtual string get_RenameColumnSql();
    protected virtual string get_AddColumnRemarkSql();
    protected virtual string get_DeleteColumnRemarkSql();
    protected virtual string get_IsAnyColumnRemarkSql();
    protected virtual string get_AddTableRemarkSql();
    protected virtual string get_DeleteTableRemarkSql();
    protected virtual string get_IsAnyTableRemarkSql();
    protected virtual string get_RenameTableSql();
    protected virtual string get_CreateIndexSql();
    protected virtual string get_AddDefaultValueSql();
    protected virtual string get_IsAnyIndexSql();
    protected virtual string get_IsAnyProcedureSql();
    protected virtual string get_CheckSystemTablePermissionsSql();
    protected virtual string get_CreateTableNull();
    protected virtual string get_CreateTableNotNull();
    protected virtual string get_CreateTablePirmaryKey();
    protected virtual string get_CreateTableIdentity();
    public virtual List`1<string> GetDbTypes();
    public virtual List`1<string> GetTriggerNames(string tableName);
    public virtual List`1<string> GetFuncList();
    public virtual List`1<string> GetIndexList(string tableName);
    public virtual List`1<string> GetProcList(string dbName);
    public virtual bool AddDefaultValue(string tableName, string columnName, string defaultValue);
    public virtual bool RenameTable(string oldTableName, string newTableName);
    public virtual bool AddColumnRemark(string columnName, string tableName, string description);
    public virtual bool AddTableRemark(string tableName, string description);
    public virtual bool UpdateColumn(string tableName, DbColumnInfo columnInfo);
    protected virtual string GetUpdateColumnSql(string tableName, DbColumnInfo columnInfo);
    public virtual bool CreateDatabase(string databaseName, string databaseDirectory);
    public virtual bool AddRemark(EntityInfo entity);
    public virtual bool CreateTable(string tableName, List`1<DbColumnInfo> columns, bool isCreatePrimaryKey);
    protected virtual bool IsAnyDefaultValue(string tableName, string columnName, List`1<DbColumnInfo> columns);
    protected virtual string GetCreateTableSql(string tableName, List`1<DbColumnInfo> columns);
    public virtual bool IsAnyConstraint(string constraintName);
    public virtual bool BackupDataBase(string databaseName, string fullFileName);
    public virtual List`1<DbColumnInfo> GetColumnInfosByTableName(string tableName, bool isCache);
    private bool get_isAutoToLowerCodeFirst();
    private string GetSchema();
    private static void ConvertCreateColumnInfo(DbColumnInfo x);
    [CompilerGeneratedAttribute]
private string <CreateTable>b__79_1(DbColumnInfo it);
}
public class SqlSugar.PostgreSQLDeleteBuilder : DeleteBuilder {
}
public class SqlSugar.PostgreSQLExpressionContext : ExpressionContext {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    public bool isAutoToLower { get; }
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
    public virtual string GetTranslationText(string name);
    public bool get_isAutoToLower();
    public virtual string GetTranslationTableName(string entityName, bool isMapping);
    public virtual string GetTranslationColumnName(string columnName);
    public virtual string GetDbColumnName(string entityName, string propertyName);
    public string GetValue(object entityValue);
    [CompilerGeneratedAttribute]
private string <GetTranslationColumnName>b__13_0(string it);
}
public class SqlSugar.PostgreSQLFastBuilder : FastBuilder {
    public static Dictionary`2<string, NpgsqlDbType> PgSqlType;
    private EntityInfo entityInfo;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UpdateSql>k__BackingField;
    public string UpdateSql { get; public set; }
    public PostgreSQLFastBuilder(EntityInfo entityInfo);
    private static PostgreSQLFastBuilder();
    [CompilerGeneratedAttribute]
public virtual string get_UpdateSql();
    [CompilerGeneratedAttribute]
public virtual void set_UpdateSql(string value);
    [AsyncStateMachineAttribute("SqlSugar.PostgreSQLFastBuilder/<ExecuteBulkCopyAsync>d__7")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> ExecuteBulkCopyAsync(DataTable dt);
    private void BulkCopy(DataTable dt, string copyString, NpgsqlConnection conn, List`1<DbColumnInfo> columns);
    [AsyncStateMachineAttribute("SqlSugar.PostgreSQLFastBuilder/<UpdateByTempAsync>d__9")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> UpdateByTempAsync(string tableName, string tempName, String[] updateColumns, String[] whereColumns);
    [AsyncStateMachineAttribute("SqlSugar.PostgreSQLFastBuilder/<CreateTempAsync>d__10`1")]
[DebuggerStepThroughAttribute]
public virtual Task CreateTempAsync(DataTable dt);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0();
}
public class SqlSugar.PostgreSQLInsertBuilder : InsertBuilder {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`3<string, string, string> <ConvertInsertReturnIdFunc>k__BackingField;
    public string SqlTemplate { get; }
    public string SqlTemplateBatch { get; }
    public string SqlTemplateBatchUnion { get; }
    public string SqlTemplateBatchSelect { get; }
    public Func`3<string, string, string> ConvertInsertReturnIdFunc { get; public set; }
    public virtual string get_SqlTemplate();
    public virtual string get_SqlTemplateBatch();
    public virtual string get_SqlTemplateBatchUnion();
    public virtual string get_SqlTemplateBatchSelect();
    [CompilerGeneratedAttribute]
public virtual Func`3<string, string, string> get_ConvertInsertReturnIdFunc();
    [CompilerGeneratedAttribute]
public virtual void set_ConvertInsertReturnIdFunc(Func`3<string, string, string> value);
    public virtual string ToSqlString();
    public object FormatValue(object value, string name, int i, DbColumnInfo columnInfo);
    public virtual string FormatDateTimeOffset(object value);
    private string GetIgnoreSql(string sql);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__12_2(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__12_3(DbColumnInfo it);
}
public class SqlSugar.PostgreSQLInserttable`1 : InsertableProvider`1<T> {
    public virtual int ExecuteReturnIdentity();
    [AsyncStateMachineAttribute("SqlSugar.PostgreSQLInserttable`1/<ExecuteReturnIdentityAsync>d__1")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> ExecuteReturnIdentityAsync();
    public virtual KeyValuePair`2<string, List`1<SugarParameter>> ToSql();
    public virtual long ExecuteReturnBigIdentity();
    [AsyncStateMachineAttribute("SqlSugar.PostgreSQLInserttable`1/<ExecuteReturnBigIdentityAsync>d__4")]
[DebuggerStepThroughAttribute]
public virtual Task`1<long> ExecuteReturnBigIdentityAsync();
    public virtual bool ExecuteCommandIdentityIntoEntity();
    private string GetIdentityColumn();
}
public class SqlSugar.PostgreSQLMethod : DefaultDbMethod {
    public virtual string CharIndex(MethodCallExpressionModel model);
    public virtual string CharIndexNew(MethodCallExpressionModel model);
    public virtual string TrueValue();
    public virtual string FalseValue();
    public virtual string DateDiff(MethodCallExpressionModel model);
    public virtual string IIF(MethodCallExpressionModel model);
    public virtual string DateValue(MethodCallExpressionModel model);
    public virtual string Contains(MethodCallExpressionModel model);
    public virtual string StartsWith(MethodCallExpressionModel model);
    public virtual string EndsWith(MethodCallExpressionModel model);
    public virtual string DateIsSameDay(MethodCallExpressionModel model);
    public virtual string HasValue(MethodCallExpressionModel model);
    public virtual string DateIsSameByType(MethodCallExpressionModel model);
    public virtual string ToDate(MethodCallExpressionModel model);
    public virtual string DateAddByType(MethodCallExpressionModel model);
    public virtual string DateAddDay(MethodCallExpressionModel model);
    public virtual string ToInt32(MethodCallExpressionModel model);
    public virtual string ToInt64(MethodCallExpressionModel model);
    public virtual string ToString(MethodCallExpressionModel model);
    public virtual string ToGuid(MethodCallExpressionModel model);
    public virtual string ToDouble(MethodCallExpressionModel model);
    public virtual string ToBool(MethodCallExpressionModel model);
    public virtual string ToDecimal(MethodCallExpressionModel model);
    public virtual string Length(MethodCallExpressionModel model);
    public virtual string IsNullOrEmpty(MethodCallExpressionModel model);
    public virtual string MergeString(String[] strings);
    public virtual string IsNull(MethodCallExpressionModel model);
    public virtual string GetDate();
    public virtual string GetRandom();
    public virtual string EqualTrue(string fieldName);
    public virtual string JsonField(MethodCallExpressionModel model);
    public virtual string JsonContainsFieldName(MethodCallExpressionModel model);
    private string GetJson(object memberName1, object memberName2, bool isLast);
    public virtual string JsonArrayLength(MethodCallExpressionModel model);
    public virtual string JsonParse(MethodCallExpressionModel model);
    public virtual string JsonArrayAny(MethodCallExpressionModel model);
    public virtual string JsonListObjectAny(MethodCallExpressionModel model);
}
public class SqlSugar.PostgreSQLProvider : AdoProvider {
    private static Dictionary`2<Type, NpgsqlDbType> ArrayMapping;
    public IDbConnection Connection { get; public set; }
    public Action`1<SqlSugarException> ErrorEvent { get; }
    private static PostgreSQLProvider();
    public virtual IDbConnection get_Connection();
    public virtual void set_Connection(IDbConnection value);
    public virtual void BeginTran(string transactionName);
    public virtual void BeginTran(IsolationLevel iso, string transactionName);
    public virtual IDataAdapter GetAdapter();
    public virtual DbCommand GetCommand(string sql, SugarParameter[] parameters);
    public virtual void SetCommandToAdapter(IDataAdapter dataAdapter, DbCommand command);
    public virtual IDataParameter[] ToIDbDataParameter(SugarParameter[] parameters);
    private static void Array(SugarParameter parameter, NpgsqlParameter sqlParameter);
    private static void DbNullParametrerArray(SugarParameter parameter, NpgsqlParameter sqlParameter);
    private static void UNumber(SugarParameter parameter);
    public virtual Action`1<SqlSugarException> get_ErrorEvent();
    [CompilerGeneratedAttribute]
private void <get_ErrorEvent>b__14_0(SqlSugarException it);
}
public class SqlSugar.PostgreSQLQueryable`1 : QueryableProvider`1<T> {
    public virtual ISugarQueryable`1<T> With(string withString);
    public virtual ISugarQueryable`1<T> PartitionBy(string groupFileds);
}
public class SqlSugar.PostgreSQLQueryable`10 : QueryableProvider`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> {
}
public class SqlSugar.PostgreSQLQueryable`11 : QueryableProvider`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> {
}
public class SqlSugar.PostgreSQLQueryable`12 : QueryableProvider`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> {
}
public class SqlSugar.PostgreSQLQueryable`2 : QueryableProvider`2<T, T2> {
    public ISugarQueryable`2<T, T2> With(string withString);
}
public class SqlSugar.PostgreSQLQueryable`3 : QueryableProvider`3<T, T2, T3> {
}
public class SqlSugar.PostgreSQLQueryable`4 : QueryableProvider`4<T, T2, T3, T4> {
}
public class SqlSugar.PostgreSQLQueryable`5 : QueryableProvider`5<T, T2, T3, T4, T5> {
}
public class SqlSugar.PostgreSQLQueryable`6 : QueryableProvider`6<T, T2, T3, T4, T5, T6> {
}
public class SqlSugar.PostgreSQLQueryable`7 : QueryableProvider`7<T, T2, T3, T4, T5, T6, T7> {
}
public class SqlSugar.PostgreSQLQueryable`8 : QueryableProvider`8<T, T2, T3, T4, T5, T6, T7, T8> {
}
public class SqlSugar.PostgreSQLQueryable`9 : QueryableProvider`9<T, T2, T3, T4, T5, T6, T7, T8, T9> {
}
public class SqlSugar.PostgreSQLQueryBuilder : QueryBuilder {
    public string PageTempalte { get; }
    public string DefaultOrderByTemplate { get; }
    public string GetTableNameString { get; }
    public string GetSelectValue { get; }
    public virtual string get_PageTempalte();
    public virtual string get_DefaultOrderByTemplate();
    public virtual string get_GetTableNameString();
    public virtual bool IsComplexModel(string sql);
    public virtual string ToSqlString();
    public virtual string get_GetSelectValue();
}
public class SqlSugar.PostgreSQLUpdateBuilder : UpdateBuilder {
    public string SqlTemplateBatch { get; }
    public string SqlTemplateJoin { get; }
    public string SqlTemplateBatchUnion { get; }
    public virtual string get_SqlTemplateBatch();
    public virtual string get_SqlTemplateJoin();
    public virtual string get_SqlTemplateBatchUnion();
    public object FormatValue(object value, string name, int i, DbColumnInfo columnInfo);
    protected virtual string TomultipleSqlString(List`1<IGrouping`2<int, DbColumnInfo>> groupList);
    private StringBuilder GetBatchUpdateSql(StringBuilder batchUpdateSql);
    protected virtual string GetJoinUpdate(string columnsString, String& whereString);
    private string GetJoinUpdateMany(string columnsString, string where);
    public virtual string FormatDateTimeOffset(object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private string <>n__0(DbColumnInfo columnInfo, object name);
}
public class SqlSugar.PropertyCallAdapter`2 : object {
    private Func`2<TThis, TResult> _getterInvocation;
    public PropertyCallAdapter`2(Func`2<TThis, TResult> getterInvocation);
    public sealed virtual object InvokeGet(TThis this);
}
public class SqlSugar.PropertyCallAdapterProvider`1 : object {
    private static ConcurrentDictionary`2<string, IPropertyCallAdapter`1<TThis>> _instances;
    private static PropertyCallAdapterProvider`1();
    public static IPropertyCallAdapter`1<TThis> GetInstance(string forPropertyName);
}
public class SqlSugar.PropertyMetadata : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<CustomAttributeBuilder> <CustomAttributes>k__BackingField;
    public string Name { get; public set; }
    public Type Type { get; public set; }
    public List`1<CustomAttributeBuilder> CustomAttributes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public List`1<CustomAttributeBuilder> get_CustomAttributes();
    [CompilerGeneratedAttribute]
public void set_CustomAttributes(List`1<CustomAttributeBuilder> value);
}
public class SqlSugar.QueryableAccessory : object {
    protected ILambdaExpressions _LambdaExpressions;
    protected bool _RestoreMapping;
    protected int _InQueryableIndex;
}
internal class SqlSugar.QueryableAppendColumn : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AsName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    public string AsName { get; public set; }
    public int Index { get; public set; }
    public object Value { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AsName();
    [CompilerGeneratedAttribute]
public void set_AsName(string value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal class SqlSugar.QueryableFormat : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TypeString>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MethodInfo <MethodInfo>k__BackingField;
    public Type Type { get; public set; }
    public string TypeString { get; public set; }
    public string Format { get; public set; }
    public string PropertyName { get; public set; }
    public string MethodName { get; public set; }
    public MethodInfo MethodInfo { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_TypeString();
    [CompilerGeneratedAttribute]
public void set_TypeString(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public void set_MethodInfo(MethodInfo value);
}
public class SqlSugar.QueryableProvider`1 : QueryableAccessory {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlBuilder <SqlBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MappingTableList <OldMappingTableList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MappingTableList <QueryableMappingTableList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<Action`1<T>> <MapperAction>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`2<T, MapperCache`1<T>> <MapperActionWithCache>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<Action`1<List`1<T>>> <Mappers>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsCache>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <CacheTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CacheKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAs>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public IAdo Db { get; }
    public IDbBind Bind { get; }
    public ISqlBuilder SqlBuilder { get; public set; }
    public MappingTableList OldMappingTableList { get; public set; }
    public MappingTableList QueryableMappingTableList { get; public set; }
    public List`1<Action`1<T>> MapperAction { get; public set; }
    public Action`2<T, MapperCache`1<T>> MapperActionWithCache { get; public set; }
    public List`1<Action`1<List`1<T>>> Mappers { get; public set; }
    public bool IsCache { get; public set; }
    public int CacheTime { get; public set; }
    public string CacheKey { get; public set; }
    public bool IsAs { get; public set; }
    public QueryBuilder QueryBuilder { get; public set; }
    public EntityInfo EntityInfo { get; }
    public sealed virtual ISugarQueryable`1<T> IncludesByExpression2(Expression include1, Expression include2);
    public ISugarQueryable`1<T> IncludesByExpression3(Expression include1, Expression include2, Expression include3);
    public ISugarQueryable`1<T> IncludesByExpression4(Expression include1, Expression include2, Expression include3, Expression include4);
    public ISugarQueryable`1<T> IncludesByExpression5(Expression include1, Expression include2, Expression include3, Expression include4, Expression include5);
    public sealed virtual ISugarQueryable`1<T> IncludesByExpression(Expression include1);
    public sealed virtual ISugarQueryable`1<T> IncludesByNameString(string navMemberName, string thenNavMemberName2);
    public sealed virtual ISugarQueryable`1<T> IncludesByNameString(string navMemberName, string thenNavMemberName2, string thenNavMemberName3);
    public sealed virtual ISugarQueryable`1<T> IncludesByNameString(string navMemberName, string thenNavMemberName2, string thenNavMemberName3, string thenNavMemberName4);
    public sealed virtual ISugarQueryable`1<T> IncludesByNameString(string navMemberName, string thenNavMemberName2, string thenNavMemberName3, string thenNavMemberName4, string thenNavMemberName5);
    private static MethodInfo GetIncludesByNameStringMethod(List`1<Type> types, string navMemberName, MethodInfo method, List`1<Expression> parametres, EntityInfo entityInfo);
    private static EntityColumnInfo GetNavColumnInfo(string navMemberName, EntityInfo entityInfo);
    private static List`1<Expression> GetIncludesByNameStringParameters(Type type, EntityColumnInfo item);
    public sealed virtual ISugarQueryable`1<T> IncludesByNameString(string navMemberName);
    public sealed virtual ISugarQueryable`1<T> IncludesAllFirstLayer(String[] ignoreProperyNameList);
    public sealed virtual ISugarQueryable`1<T> IncludesAllSecondLayer(Expression`1<Func`2<T, TReturn1>> expression, String[] ignoreProperyNameList);
    public sealed virtual ISugarQueryable`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1);
    public sealed virtual ISugarQueryable`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1);
    public sealed virtual ISugarQueryable`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2);
    public sealed virtual ISugarQueryable`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2);
    public sealed virtual ISugarQueryable`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2);
    public sealed virtual ISugarQueryable`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2);
    public sealed virtual NavISugarQueryable`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3);
    public sealed virtual NavISugarQueryable`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3);
    public sealed virtual NavISugarQueryable`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3);
    public sealed virtual NavISugarQueryable`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3);
    public sealed virtual NavISugarQueryable`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3);
    public sealed virtual NavISugarQueryable`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, List`1<TReturn3>>> include3);
    public sealed virtual NavISugarQueryable`1<T> Includes(Expression`1<Func`2<T, TReturn1>> include1, Expression`1<Func`2<TReturn1, List`1<TReturn2>>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3);
    public sealed virtual NavISugarQueryable`1<T> Includes(Expression`1<Func`2<T, List`1<TReturn1>>> include1, Expression`1<Func`2<TReturn1, TReturn2>> include2, Expression`1<Func`2<TReturn2, TReturn3>> include3);
    private void _Includes(SqlSugarProvider context, Expression[] expressions);
    private void _Includes(SqlSugarProvider context, Expression[] expressions);
    private void _Includes(SqlSugarProvider context, Expression[] expressions);
    private void _Includes(SqlSugarProvider context, Expression[] expressions);
    private void _Includes(SqlSugarProvider context, Expression[] expressions);
    public sealed virtual NavISugarQueryable`1<T> AsNavQueryable();
    private NavISugarQueryable`1<T> GetNavSugarQueryable();
    private ISugarQueryable`1<T> GetManyQueryable(Expression`1<Func`2<T, TReturn1>> include1);
    private static bool IsMembers(Expression`1<Func`2<T, TReturn1>> include1);
    public virtual T Single();
    public virtual T Single(Expression`1<Func`2<T, bool>> expression);
    public virtual T First();
    public virtual T First(Expression`1<Func`2<T, bool>> expression);
    public virtual bool Any(Expression`1<Func`2<T, bool>> expression);
    public virtual bool Any();
    public virtual List`1<TResult> ToList(Expression`1<Func`2<T, TResult>> expression);
    public virtual int Count();
    public virtual int Count(Expression`1<Func`2<T, bool>> expression);
    public virtual TResult Max(string maxField);
    public virtual TResult Max(Expression`1<Func`2<T, TResult>> expression);
    public virtual TResult Min(string minField);
    public virtual TResult Min(Expression`1<Func`2<T, TResult>> expression);
    public virtual TResult Sum(string sumField);
    public virtual TResult Sum(Expression`1<Func`2<T, TResult>> expression);
    public virtual TResult Avg(string avgField);
    public virtual TResult Avg(Expression`1<Func`2<T, TResult>> expression);
    public virtual T[] ToArray();
    public virtual string ToJson();
    public virtual string ToJsonPage(int pageIndex, int pageSize);
    public virtual string ToJsonPage(int pageIndex, int pageSize, Int32& totalNumber);
    public virtual DataTable ToPivotTable(Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
    public virtual List`1<object> ToPivotList(Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
    public virtual IEnumerable`1<object> ToPivotEnumerable(Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
    public virtual string ToPivotJson(Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToPivotTableAsync>d__63`3")]
[DebuggerStepThroughAttribute]
public virtual Task`1<DataTable> ToPivotTableAsync(Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToPivotListAsync>d__64`3")]
[DebuggerStepThroughAttribute]
public virtual Task`1<List`1<object>> ToPivotListAsync(Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToPivotEnumerableAsync>d__65`3")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IEnumerable`1<object>> ToPivotEnumerableAsync(Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToPivotJsonAsync>d__66`3")]
[DebuggerStepThroughAttribute]
public virtual Task`1<string> ToPivotJsonAsync(Func`2<T, TColumn> columnSelector, Expression`1<Func`2<T, TRow>> rowSelector, Func`2<IEnumerable`1<T>, TData> dataSelector);
    public sealed virtual List`1<T> ToChildList(Expression`1<Func`2<T, object>> parentIdExpression, object primaryKeyValue, bool isContainOneself);
    public sealed virtual List`1<T> ToChildList(Expression`1<Func`2<T, object>> parentIdExpression, Object[] primaryKeyValues, bool isContainOneself);
    public sealed virtual List`1<T> ToParentList(Expression`1<Func`2<T, object>> parentIdExpression, object primaryKeyValue);
    public sealed virtual List`1<T> ToParentList(Expression`1<Func`2<T, object>> parentIdExpression, object primaryKeyValue, Expression`1<Func`2<T, bool>> parentWhereExpression);
    public sealed virtual List`1<T> ToTree(string childPropertyName, string parentIdPropertyName, object rootValue, string primaryKeyPropertyName);
    public sealed virtual List`1<T> ToTree(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, object rootValue, Expression`1<Func`2<T, object>> primaryKeyExpression);
    public sealed virtual List`1<T> ToTree(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, object rootValue);
    public sealed virtual List`1<T> ToTree(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, object rootValue, Object[] childIds);
    public sealed virtual List`1<T> ToTree(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, object rootValue, Object[] childIds, Expression`1<Func`2<T, object>> primaryKeyExpression);
    public virtual DataTable ToDataTableByEntity();
    public virtual DataTable ToDataTable();
    public virtual DataTable ToDataTablePage(int pageIndex, int pageSize);
    public sealed virtual DataTable ToDataTableByEntityPage(int pageNumber, int pageSize, Int32& totalNumber);
    public virtual DataTable ToDataTablePage(int pageIndex, int pageSize, Int32& totalNumber);
    public virtual DataTable ToDataTablePage(int pageIndex, int pageSize, Int32& totalNumber, Int32& totalPage);
    public sealed virtual Dictionary`2<string, ValueType> ToDictionary(Expression`1<Func`2<T, object>> key, Expression`1<Func`2<T, object>> value);
    public sealed virtual Dictionary`2<string, object> ToDictionary(Expression`1<Func`2<T, object>> key, Expression`1<Func`2<T, object>> value);
    public sealed virtual List`1<Dictionary`2<string, object>> ToDictionaryList();
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToDictionaryListAsync>d__85")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<Dictionary`2<string, object>>> ToDictionaryListAsync();
    public virtual List`1<T> ToList();
    public sealed virtual List`1<T> SetContext(Expression`1<Func`2<T, bool>> whereExpression, ParameterT parameter);
    public sealed virtual List`1<T> SetContext(Expression`1<Func`2<T, object>> thisFiled, Expression`1<Func`1<object>> mappingFiled, ParameterT parameter);
    public sealed virtual List`1<T> SetContext(Expression`1<Func`2<T, object>> thisFiled1, Expression`1<Func`1<object>> mappingFiled1, Expression`1<Func`2<T, object>> thisFiled2, Expression`1<Func`1<object>> mappingFiled2, ParameterT parameter);
    public sealed virtual void ForEachDataReader(Action`1<T> action);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ForEachDataReaderAsync>d__91")]
[DebuggerStepThroughAttribute]
public sealed virtual Task ForEachDataReaderAsync(Action`1<T> action);
    public virtual void ForEach(Action`1<T> action, int singleMaxReads, CancellationTokenSource cancellationTokenSource);
    public virtual void ForEachByPage(Action`1<T> action, int pageIndex, int pageSize, Int32& totalNumber, int singleMaxReads, CancellationTokenSource cancellationTokenSource);
    public sealed virtual List`1<T> ToOffsetPage(int pageIndex, int pageSize);
    public virtual List`1<T> ToOffsetPage(int pageIndex, int pageSize, Int32& totalNumber, Int32& totalPage);
    public sealed virtual List`1<T> ToOffsetPage(int pageIndex, int pageSize, Int32& totalNumber);
    public sealed virtual Task`1<List`1<T>> ToOffsetPageAsync(int pageIndex, int pageSize);
    public virtual List`1<T> ToPageList(int pageIndex, int pageSize);
    public virtual List`1<TResult> ToPageList(int pageIndex, int pageSize, Int32& totalNumber, Expression`1<Func`2<T, TResult>> expression);
    public virtual List`1<T> ToPageList(int pageIndex, int pageSize, Int32& totalNumber);
    public virtual List`1<T> ToPageList(int pageIndex, int pageSize, Int32& totalNumber, Int32& totalPage);
    public virtual string ToSqlString();
    public virtual KeyValuePair`2<string, List`1<SugarParameter>> ToSql();
    public sealed virtual string ToClassString(string className);
    public sealed virtual int IntoTable();
    public sealed virtual int IntoTable(string TableName);
    public sealed virtual int IntoTable(Type TableEntityType);
    public sealed virtual int IntoTable(Type TableEntityType, string TableName);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToArrayAsync>d__109")]
[DebuggerStepThroughAttribute]
public virtual Task`1<T[]> ToArrayAsync();
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<InSingleAsync>d__110")]
[DebuggerStepThroughAttribute]
public virtual Task`1<T> InSingleAsync(object pkValue);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<SingleAsync>d__111")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<T> SingleAsync();
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<SingleAsync>d__112")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<T> SingleAsync(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual Task`1<T> FirstAsync(CancellationToken token);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<FirstAsync>d__114")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<T> FirstAsync();
    public sealed virtual Task`1<T> FirstAsync(Expression`1<Func`2<T, bool>> expression, CancellationToken token);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<FirstAsync>d__116")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<T> FirstAsync(Expression`1<Func`2<T, bool>> expression);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<AnyAsync>d__117")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<bool> AnyAsync(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual Task`1<bool> AnyAsync(Expression`1<Func`2<T, bool>> expression, CancellationToken token);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<AnyAsync>d__119")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<bool> AnyAsync();
    public sealed virtual Task`1<int> CountAsync(CancellationToken token);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<CountAsync>d__121")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> CountAsync();
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<CountAsync>d__122")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> CountAsync(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual Task`1<int> CountAsync(Expression`1<Func`2<T, bool>> expression, CancellationToken token);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<MaxAsync>d__124`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> MaxAsync(string maxField);
    public sealed virtual Task`1<TResult> MaxAsync(string maxField, CancellationToken token);
    public sealed virtual Task`1<TResult> MaxAsync(Expression`1<Func`2<T, TResult>> expression);
    public sealed virtual Task`1<TResult> MaxAsync(Expression`1<Func`2<T, TResult>> expression, CancellationToken token);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<MinAsync>d__128`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> MinAsync(string minField);
    public sealed virtual Task`1<TResult> MinAsync(Expression`1<Func`2<T, TResult>> expression);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<SumAsync>d__130`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> SumAsync(string sumField);
    public sealed virtual Task`1<TResult> SumAsync(Expression`1<Func`2<T, TResult>> expression);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<AvgAsync>d__132`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<TResult> AvgAsync(string avgField);
    public sealed virtual Task`1<TResult> AvgAsync(Expression`1<Func`2<T, TResult>> expression);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToListAsync>d__134`1")]
[DebuggerStepThroughAttribute]
public virtual Task`1<List`1<TResult>> ToListAsync(Expression`1<Func`2<T, TResult>> expression);
    public sealed virtual Task`1<List`1<T>> ToListAsync();
    public sealed virtual Task`1<List`1<T>> ToListAsync(CancellationToken token);
    public sealed virtual Task`1<List`1<T>> ToPageListAsync(int pageNumber, int pageSize, CancellationToken token);
    public sealed virtual Task`1<List`1<T>> ToPageListAsync(int pageIndex, int pageSize);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToPageListAsync>d__139`1")]
[DebuggerStepThroughAttribute]
public virtual Task`1<List`1<TResult>> ToPageListAsync(int pageIndex, int pageSize, RefAsync`1<int> totalNumber, Expression`1<Func`2<T, TResult>> expression);
    public sealed virtual Task`1<List`1<T>> ToPageListAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber, CancellationToken token);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToPageListAsync>d__141")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> ToPageListAsync(int pageIndex, int pageSize, RefAsync`1<int> totalNumber);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToPageListAsync>d__142")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> ToPageListAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber, RefAsync`1<int> totalPage);
    public sealed virtual Task`1<List`1<T>> ToPageListAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber, RefAsync`1<int> totalPage, CancellationToken token);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToJsonAsync>d__144")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> ToJsonAsync();
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToJsonPageAsync>d__145")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> ToJsonPageAsync(int pageIndex, int pageSize);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToJsonPageAsync>d__146")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> ToJsonPageAsync(int pageIndex, int pageSize, RefAsync`1<int> totalNumber);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToDataTableByEntityAsync>d__147")]
[DebuggerStepThroughAttribute]
public virtual Task`1<DataTable> ToDataTableByEntityAsync();
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToDataTableAsync>d__148")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<DataTable> ToDataTableAsync();
    public sealed virtual Task`1<DataTable> ToDataTablePageAsync(int pageIndex, int pageSize);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToDataTablePageAsync>d__150")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<DataTable> ToDataTablePageAsync(int pageIndex, int pageSize, RefAsync`1<int> totalNumber);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToDataTableByEntityPageAsync>d__151")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<DataTable> ToDataTableByEntityPageAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber);
    public sealed virtual Task`1<List`1<T>> ToOffsetPageAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber, CancellationToken token);
    public sealed virtual Task`1<List`1<T>> ToOffsetPageAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber, RefAsync`1<int> totalPage, CancellationToken token);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToOffsetPageAsync>d__154")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> ToOffsetPageAsync(int pageNumber, int pageSize, RefAsync`1<int> totalNumber, RefAsync`1<int> totalPage);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToOffsetPageAsync>d__155")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> ToOffsetPageAsync(int pageIndex, int pageSize, RefAsync`1<int> totalNumber);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ForEachAsync>d__156")]
[DebuggerStepThroughAttribute]
public virtual Task ForEachAsync(Action`1<T> action, int singleMaxReads, CancellationTokenSource cancellationTokenSource);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ForEachByPageAsync>d__157")]
[DebuggerStepThroughAttribute]
public virtual Task ForEachByPageAsync(Action`1<T> action, int pageIndex, int pageSize, RefAsync`1<int> totalNumber, int singleMaxReads, CancellationTokenSource cancellationTokenSource);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<SetContextAsync>d__158`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> SetContextAsync(Expression`1<Func`2<T, object>> thisFiled1, Expression`1<Func`1<object>> mappingFiled1, Expression`1<Func`2<T, object>> thisFiled2, Expression`1<Func`1<object>> mappingFiled2, ParameterT parameter);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<SetContextAsync>d__159`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> SetContextAsync(Expression`1<Func`2<T, object>> thisFiled, Expression`1<Func`1<object>> mappingFiled, ParameterT parameter);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToDictionaryAsync>d__160`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Dictionary`2<string, ValueType>> ToDictionaryAsync(Expression`1<Func`2<T, object>> key, Expression`1<Func`2<T, object>> value);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToDictionaryAsync>d__161")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Dictionary`2<string, object>> ToDictionaryAsync(Expression`1<Func`2<T, object>> key, Expression`1<Func`2<T, object>> value);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToTreeAsync>d__162")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> ToTreeAsync(string childPropertyName, string parentIdPropertyName, object rootValue, string primaryKeyPropertyName);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToTreeAsync>d__163")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> ToTreeAsync(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, object rootValue, Object[] childIds);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToTreeAsync>d__164")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> ToTreeAsync(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, object rootValue, Object[] childIds, Expression`1<Func`2<T, object>> primaryKeyExpression);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToTreeAsync>d__165")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> ToTreeAsync(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, object rootValue);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToTreeAsync>d__166")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> ToTreeAsync(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, object rootValue, Expression`1<Func`2<T, object>> primaryKeyExpression);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToParentListAsync>d__167")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> ToParentListAsync(Expression`1<Func`2<T, object>> parentIdExpression, object primaryKeyValue);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToParentListAsync>d__168")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> ToParentListAsync(Expression`1<Func`2<T, object>> parentIdExpression, object primaryKeyValue, Expression`1<Func`2<T, bool>> parentWhereExpression);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToChildListAsync>d__169")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> ToChildListAsync(Expression`1<Func`2<T, object>> parentIdExpression, object primaryKeyValue, bool isContainOneself);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<ToChildListAsync>d__170")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> ToChildListAsync(Expression`1<Func`2<T, object>> parentIdExpression, Object[] primaryKeyValues, bool isContainOneself);
    public sealed virtual Task`1<int> IntoTableAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<int> IntoTableAsync(string TableName, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> IntoTableAsync(Type TableEntityType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<IntoTableAsync>d__174")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> IntoTableAsync(Type TableEntityType, string TableName, CancellationToken cancellationToken);
    private List`1<T> _ToParentListByTreeKey(Expression`1<Func`2<T, object>> parentIdExpression, object primaryKeyValue);
    private List`1<T> _ToParentListByTreeKey(Expression`1<Func`2<T, object>> parentIdExpression, object primaryKeyValue, Expression`1<Func`2<T, bool>> parentWhereExpression);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<_ToParentListByTreeKeyAsync>d__177")]
[DebuggerStepThroughAttribute]
private Task`1<List`1<T>> _ToParentListByTreeKeyAsync(Expression`1<Func`2<T, object>> parentIdExpression, object primaryKeyValue);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<_ToParentListByTreeKeyAsync>d__178")]
[DebuggerStepThroughAttribute]
private Task`1<List`1<T>> _ToParentListByTreeKeyAsync(Expression`1<Func`2<T, object>> parentIdExpression, object primaryKeyValue, Expression`1<Func`2<T, bool>> parentWhereExpression);
    private List`1<T> GetChildList(Expression`1<Func`2<T, object>> parentIdExpression, string pkName, List`1<T> list, object rootValue, bool isContainOneself);
    private static List`1<T> BuildChildList(List`1<T> list, string idName, string pIdName, object rootValue, bool isContainOneself);
    private List`1<object> GetPrentIds(List`1<T> list, object id, EntityColumnInfo pkName, EntityColumnInfo parentName);
    private List`1<T> TreeAndFilterIds(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, object rootValue, Object[] childIds, List`1& list);
    private List`1<T> TreeAndFilterIds(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, Expression`1<Func`2<T, object>> primaryKeyExpresion, object rootValue, Object[] childIds, List`1& list);
    internal List`1<T> GetTreeRoot(Expression`1<Func`2<T, IEnumerable`1<object>>> childListExpression, Expression`1<Func`2<T, object>> parentIdExpression, string pk, List`1<T> list, object rootValue);
    private static string GetParentName(Expression`1<Func`2<T, object>> parentIdExpression);
    public List`1<T> GetTreeChildList(List`1<T> alllist, object pkValue, string pkName, string childName, string parentIdName);
    private static string GetTreeKey(EntityInfo entity);
    protected int GetCount();
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<GetCountAsync>d__189")]
[DebuggerStepThroughAttribute]
protected Task`1<int> GetCountAsync();
    private void _CountEnd(MappingTableList expMapping);
    private void _CountBegin(MappingTableList& expMapping, Int32& result);
    protected TResult _Min(Expression expression);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<_MinAsync>d__193`1")]
[DebuggerStepThroughAttribute]
protected Task`1<TResult> _MinAsync(Expression expression);
    protected TResult _Avg(Expression expression);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<_AvgAsync>d__195`1")]
[DebuggerStepThroughAttribute]
protected Task`1<TResult> _AvgAsync(Expression expression);
    protected TResult _Max(Expression expression);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<_MaxAsync>d__197`1")]
[DebuggerStepThroughAttribute]
protected Task`1<TResult> _MaxAsync(Expression expression);
    protected TResult _Sum(Expression expression);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<_SumAsync>d__199`1")]
[DebuggerStepThroughAttribute]
protected Task`1<TResult> _SumAsync(Expression expression);
    private void RestChangeMasterQuery(bool isChangeQueryableMasterSlave);
    private bool GetIsMasterQuery();
    private void RestChangeSlaveQuery(bool isChangeQueryableSlaveSlave);
    private bool GetIsSlaveQuery();
    internal bool IsAppendNavColumns();
    internal void SetAppendNavColumns(Expression expression);
    private void AddMappingNavProperties(Dictionary`2<string, Expression> dic, AppendNavInfo navInfo, List`1<EntityColumnInfo> entityColumns);
    private static void AddAppendProperties(IEnumerable`1<NavigatManager`1<T>> navManages, AppendNavInfo navInfo, List`1<EntityColumnInfo> entityColumns, IEnumerable`1<EntityColumnInfo> pkColumns);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<_InitNavigatAsync>d__208`1")]
[DebuggerStepThroughAttribute]
private Task _InitNavigatAsync(List`1<TResult> result);
    private void _InitNavigat(List`1<TResult> result);
    private void SelectNavQuery(List`1<TResult> result, List`1<object> managers);
    private void SelectNavQuery_MappingList(object it, List`1<TResult> result, IList outList, List`1<EntityColumnInfo> columnInfos);
    private IList SelectNavQuery_SetList(List`1<TResult> result, object it, PropertyInfo p, Type tType, List`1<EntityColumnInfo> columns, Type listType);
    private bool IsSelectNavQuery();
    protected void _Mapper(List`1<TResult> result);
    private ISugarQueryable`1<T> _Mapper(Expression mapperObject, Expression mapperField);
    private ISugarQueryable`1<T> _Mapper(Expression mapperObject, Expression mainField, Expression childField);
    private void SetContextModel(List`1<TResult> result, Type entityType);
    protected void RestoreMapping();
    protected void InitMapping();
    private bool IsSingleWithChildTableQuery();
    private Expression`1<Func`2<T, bool>> ReplaceMasterTableParameters(Expression`1<Func`2<T, bool>> expression);
    private void orderPropertyNameByJoin(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    private void OutIntoTableSql(string TableName, KeyValuePair`2& sqlInfo, String& sql, Type tableInfo);
    internal string GetTableName(EntityInfo entity, string tableName);
    protected string AppendSelect(List`1<EntityColumnInfo> entityColumnInfos, string sql, ReadOnlyCollection`1<ParameterExpression> parameters, List`1<EntityColumnInfo> columnsResult, int parameterIndex1);
    private string AppendSelectWithSubQuery(List`1<EntityColumnInfo> entityColumnInfos, string sql, ReadOnlyCollection`1<ParameterExpression> parameters, List`1<EntityColumnInfo> columnsResult, int parameterIndex1, string parameterName);
    private string AppendSelectWithSubQuery(List`1<EntityColumnInfo> entityColumnInfos, string sql, ReadOnlyCollection`1<ParameterExpression> parameters, List`1<EntityColumnInfo> columnsResult, int parameterIndex1);
    protected string AppendSelect(string sql, ReadOnlyCollection`1<ParameterExpression> parameters, List`1<EntityColumnInfo> columnsResult, int parameterIndex1);
    internal JoinQueryInfo GetJoinInfo(Expression joinExpression, JoinType joinType);
    protected ISugarQueryable`1<TResult> _Select(Expression expression);
    protected void _Where(Expression expression);
    protected ISugarQueryable`1<T> _OrderBy(Expression expression, OrderByType type);
    private void _ToOffsetPage(int pageIndex, int pageSize);
    private int _PageList(int pageIndex, int pageSize);
    protected ISugarQueryable`1<T> _GroupBy(Expression expression);
    protected ISugarQueryable`1<T> _As(string tableName, string entityName);
    protected void _Filter(string FilterName, bool isDisabledGobalFilter);
    public ISugarQueryable`1<T> _PartitionBy(Expression expression);
    protected ISugarQueryable`1<T> _Having(Expression expression);
    protected List`1<TResult> _ToList();
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<_ToListAsync>d__241`1")]
[DebuggerStepThroughAttribute]
protected Task`1<List`1<TResult>> _ToListAsync();
    private void ToSqlBefore();
    protected List`1<TResult> GetData(KeyValuePair`2<string, List`1<SugarParameter>> sqlObj);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<GetDataAsync>d__244`1")]
[DebuggerStepThroughAttribute]
protected Task`1<List`1<TResult>> GetDataAsync(KeyValuePair`2<string, List`1<SugarParameter>> sqlObj);
    private List`1<TResult> GetData(bool isComplexModel, Type entityType, IDataReader dataReader);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<GetDataAsync>d__246`1")]
[DebuggerStepThroughAttribute]
private Task`1<List`1<TResult>> GetDataAsync(bool isComplexModel, Type entityType, IDataReader dataReader);
    private void ResetNavigationPropertiesForAot(List`1<TResult> result);
    protected void _InQueryable(Expression expression, KeyValuePair`2<string, List`1<SugarParameter>> sqlObj);
    protected List`1<string> GetPrimaryKeys();
    protected virtual List`1<string> GetIdentityKeys();
    protected void CopyQueryBuilder(QueryBuilder asyncQueryableBuilder);
    private static JoinQueryInfo CopyJoinInfo(JoinQueryInfo it);
    protected int SetCacheTime(int cacheDurationInSeconds);
    public virtual KeyValuePair`2<string, List`1<SugarParameter>> _ToSql();
    private bool IsSubToList();
    public virtual ISugarQueryable`1<T> MergeTableWithSubToListJoin();
    public virtual ISugarQueryable`1<T> MergeTableWithSubToList();
    private void _SubQuery(List`1<TResult> result);
    private void AppendSubToList(List`1<TResult> result, List`1<List`1<QueryableAppendColumn>> appendValues, KeyValuePair`2<string, object> subPara);
    private void AppendSubWhereToList(List`1<TResult> result, List`1<List`1<QueryableAppendColumn>> appendValues, KeyValuePair`2<string, object> subPara);
    private static int SetSubListWithAnonymousType(List`1<TResult> result, PropertyInfo itemProperty, List`1<List`1<QueryableAppendColumn>> appendValue, List`1<object> list, int resIndex);
    private static int SetSubListWithAnonymousTypeFirst(List`1<TResult> result, PropertyInfo itemProperty, List`1<List`1<QueryableAppendColumn>> appendValue, List`1<object> list, int resIndex);
    private static int SetSubListWithClassFirst(List`1<TResult> result, PropertyInfo itemProperty, List`1<List`1<QueryableAppendColumn>> appendValue, List`1<object> list, int resIndex);
    private static int SetSubListWithClass(List`1<TResult> result, PropertyInfo itemProperty, List`1<List`1<QueryableAppendColumn>> appendValue, List`1<object> list, int resIndex);
    [AsyncStateMachineAttribute("SqlSugar.QueryableProvider`1/<_SubQueryAsync>d__265`1")]
[DebuggerStepThroughAttribute]
private Task _SubQueryAsync(List`1<TResult> result);
    public List`1<Type> SubQueryList(string sql, object parameters);
    private bool MasterHasWhereFirstJoin();
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    public IAdo get_Db();
    public IDbBind get_Bind();
    [CompilerGeneratedAttribute]
public sealed virtual ISqlBuilder get_SqlBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SqlBuilder(ISqlBuilder value);
    [CompilerGeneratedAttribute]
public MappingTableList get_OldMappingTableList();
    [CompilerGeneratedAttribute]
public void set_OldMappingTableList(MappingTableList value);
    [CompilerGeneratedAttribute]
public MappingTableList get_QueryableMappingTableList();
    [CompilerGeneratedAttribute]
public void set_QueryableMappingTableList(MappingTableList value);
    [CompilerGeneratedAttribute]
public List`1<Action`1<T>> get_MapperAction();
    [CompilerGeneratedAttribute]
public void set_MapperAction(List`1<Action`1<T>> value);
    [CompilerGeneratedAttribute]
public Action`2<T, MapperCache`1<T>> get_MapperActionWithCache();
    [CompilerGeneratedAttribute]
public void set_MapperActionWithCache(Action`2<T, MapperCache`1<T>> value);
    [CompilerGeneratedAttribute]
public List`1<Action`1<List`1<T>>> get_Mappers();
    [CompilerGeneratedAttribute]
public void set_Mappers(List`1<Action`1<List`1<T>>> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCache();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsCache(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_CacheTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheTime(int value);
    [CompilerGeneratedAttribute]
public string get_CacheKey();
    [CompilerGeneratedAttribute]
public void set_CacheKey(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAs();
    [CompilerGeneratedAttribute]
public void set_IsAs(bool value);
    public sealed virtual QueryBuilder get_QueryBuilder();
    public sealed virtual void set_QueryBuilder(QueryBuilder value);
    public EntityInfo get_EntityInfo();
    public sealed virtual ISugarQueryable`1<T> CrossQuery(string configId);
    public sealed virtual ISugarQueryable`1<T> CrossQuery(Type type, string configId);
    public sealed virtual ISugarQueryable`1<T> IncludeLeftJoin(Expression`1<Func`2<T, object>> leftObjectExp);
    public sealed virtual ISugarQueryable`1<T> IncludeInnerJoin(Expression`1<Func`2<T, object>> innerObjectExt);
    public sealed virtual ISugarQueryable`1<T> IncludeFullJoin(Expression`1<Func`2<T, object>> fullObjectExp);
    public sealed virtual ISugarQueryable`1<T> IncludeRightJoin(Expression`1<Func`2<T, object>> rightObjectExp);
    public sealed virtual ISugarQueryable`2<T, T2> LeftJoinIF(bool isJoin, ISugarQueryable`1<T2> joinQueryable, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> InnerJoinIF(bool isJoin, ISugarQueryable`1<T2> joinQueryable, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> LeftJoin(ISugarQueryable`1<T2> joinQueryable, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> InnerJoin(ISugarQueryable`1<T2> joinQueryable, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> RightJoin(ISugarQueryable`1<T2> joinQueryable, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> FullJoin(ISugarQueryable`1<T2> joinQueryable, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> LeftJoin(Expression`1<Func`3<T, T2, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`2<T, T2> LeftJoinIF(bool isLeftJoin, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> InnerJoinIF(bool isJoin, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> LeftJoin(Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> FullJoin(Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> FullJoin(Expression`1<Func`3<T, T2, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`2<T, T2> RightJoin(Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> RightJoin(Expression`1<Func`3<T, T2, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`2<T, T2> InnerJoin(Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> InnerJoin(Expression`1<Func`3<T, T2, bool>> joinExpression, string tableName);
    public sealed virtual void Clear();
    public sealed virtual ISugarQueryable`1<T> IgnoreColumns(Expression`1<Func`2<T, object>> columns);
    public sealed virtual ISugarQueryable`1<T> IgnoreColumns(String[] columns);
    public sealed virtual void AddQueue();
    public sealed virtual ISugarQueryable`1<T> Clone();
    public sealed virtual ISugarQueryable`1<T> Hints(string hints);
    public virtual ISugarQueryable`1<T> AS(string tableName);
    public sealed virtual ISugarQueryable`1<T> AS(string tableName);
    public sealed virtual ISugarQueryable`1<T> AsWithAttr();
    public sealed virtual ISugarQueryable`1<T> AsType(Type tableNameType);
    public virtual ISugarQueryable`1<T> With(string withString);
    public virtual ISugarQueryable`1<T> Filter(string FilterName, bool isDisabledGobalFilter);
    public sealed virtual ISugarQueryable`1<T> ClearFilter();
    public sealed virtual ISugarQueryable`1<T> ClearFilter(Type[] types);
    public sealed virtual ISugarQueryable`1<T> ClearFilter();
    public sealed virtual ISugarQueryable`1<T> ClearFilter();
    public sealed virtual ISugarQueryable`1<T> ClearFilter();
    public sealed virtual ISugarQueryable`1<T> Filter(Type type);
    public virtual ISugarQueryable`1<T> Mapper(Action`1<T> mapperAction);
    public sealed virtual ISugarQueryable`1<T> Mapper(Expression`1<Func`2<MappingType, ManyToMany>> expression);
    public virtual ISugarQueryable`1<T> Mapper(Action`2<T, MapperCache`1<T>> mapperAction);
    public sealed virtual ISugarQueryable`1<T> Mapper(Expression`1<Func`2<T, TObject>> mapperObject, Expression`1<Func`2<T, object>> mainField, Expression`1<Func`2<T, object>> childField);
    public sealed virtual ISugarQueryable`1<T> Mapper(Expression`1<Func`2<T, List`1<TObject>>> mapperObject, Expression`1<Func`2<T, object>> mainField, Expression`1<Func`2<T, object>> childField);
    public virtual ISugarQueryable`1<T> Mapper(Expression`1<Func`2<T, List`1<TObject>>> mapperObject, Expression`1<Func`2<T, object>> mapperField);
    public virtual ISugarQueryable`1<T> Mapper(Expression`1<Func`2<T, TObject>> mapperObject, Expression`1<Func`2<T, object>> mapperField);
    public sealed virtual ISugarQueryable`1<T> Where(string fieldName, string conditionalType, object fieldValue);
    public virtual ISugarQueryable`1<T> AddParameters(object parameters);
    public virtual ISugarQueryable`1<T> AddParameters(SugarParameter[] parameters);
    public virtual ISugarQueryable`1<T> AddParameters(List`1<SugarParameter> parameters);
    public virtual ISugarQueryable`1<T> AddParameters(SugarParameter parameter);
    public sealed virtual ISugarQueryable`1<T> AddJoinInfo(Type JoinType, Dictionary`2<string, Type> keyIsShortName_ValueIsType_Dictionary, FormattableString onExpString, JoinType type);
    public sealed virtual ISugarQueryable`1<T> AddJoinInfo(Type JoinType, string shortName, string joinWhere, JoinType type);
    public virtual ISugarQueryable`1<T> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public sealed virtual ISugarQueryable`1<T> WhereClass(ClassType whereClass, bool ignoreDefaultValue);
    public sealed virtual ISugarQueryable`1<T> WhereClassByPrimaryKey(List`1<T> list);
    public sealed virtual ISugarQueryable`1<T> WhereClassByWhereColumns(List`1<T> list, String[] whereColumns);
    public sealed virtual ISugarQueryable`1<T> WhereClassByPrimaryKey(T data);
    public sealed virtual ISugarQueryable`1<T> TranLock(Nullable`1<DbLockType> LockType);
    public sealed virtual ISugarQueryable`1<T> WhereColumns(Dictionary`2<string, object> dictionary);
    public sealed virtual ISugarQueryable`1<T> WhereColumns(Dictionary`2<string, object> columns, bool ignoreDefaultValue);
    public sealed virtual ISugarQueryable`1<T> WhereColumns(List`1<Dictionary`2<string, object>> list);
    public ISugarQueryable`1<T> _WhereClassByPrimaryKey(List`1<T> whereClassTypes);
    public ISugarQueryable`1<T> _WhereClassByWhereColumns(List`1<T> whereClassTypes, String[] whereColumns);
    public sealed virtual ISugarQueryable`1<T> WhereClass(List`1<ClassType> whereClassTypes, bool ignoreDefaultValue);
    public sealed virtual ISugarQueryable`1<T> Where(Dictionary`2<string, Type> keyIsShortName_ValueIsType_Dictionary, FormattableString expressionString);
    public virtual ISugarQueryable`1<T> Where(string expShortName, FormattableString expressionString);
    public virtual ISugarQueryable`1<T> Where(Expression`1<Func`2<T, bool>> expression);
    public virtual ISugarQueryable`1<T> Where(string whereString, object whereObj);
    public virtual ISugarQueryable`1<T> Where(IFuncModel funcModel);
    public virtual ISugarQueryable`1<T> Where(List`1<IConditionalModel> conditionalModels);
    public sealed virtual ISugarQueryable`1<T> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public virtual ISugarQueryable`1<T> Where(string whereString, object whereObj);
    public virtual ISugarQueryable`1<T> Having(Expression`1<Func`2<T, bool>> expression);
    public virtual ISugarQueryable`1<T> HavingIF(bool isHaving, Expression`1<Func`2<T, bool>> expression);
    public virtual ISugarQueryable`1<T> Having(string whereString, object parameters);
    public virtual ISugarQueryable`1<T> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public virtual ISugarQueryable`1<T> WhereIF(bool isWhere, string whereString, object whereObj);
    public virtual T InSingle(object pkValue);
    public sealed virtual ISugarQueryable`1<T> InIF(bool isIn, string fieldName, TParamter[] pkValues);
    public sealed virtual ISugarQueryable`1<T> InIF(bool isIn, TParamter[] pkValues);
    public virtual ISugarQueryable`1<T> In(TParamter[] pkValues);
    public virtual ISugarQueryable`1<T> In(string filed, FieldType[] inValues);
    public virtual ISugarQueryable`1<T> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public virtual ISugarQueryable`1<T> In(List`1<TParamter> pkValues);
    public virtual ISugarQueryable`1<T> In(string InFieldName, List`1<FieldType> inValues);
    public virtual ISugarQueryable`1<T> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`1<T> InIF(bool isWhere, Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public virtual ISugarQueryable`1<T> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`1<T> SampleBy(int timeNumber, SampleByUnit timeType);
    public sealed virtual ISugarQueryable`1<T> SampleBy(int timeNumber, string timeType);
    public sealed virtual ISugarQueryable`1<T> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public sealed virtual ISugarQueryable`1<T> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public virtual ISugarQueryable`1<T> OrderBy(string orderByFields);
    public virtual ISugarQueryable`1<T> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public virtual ISugarQueryable`1<T> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`1<T> GroupBy(Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`1<T> GroupByIF(bool isGroupBy, Expression`1<Func`2<T, object>> expression);
    public sealed virtual ISugarQueryable`1<T> GroupByIF(bool isGroupBy, string groupFields);
    public virtual ISugarQueryable`1<T> OrderByIF(bool isOrderBy, string orderByFields);
    public virtual ISugarQueryable`1<T> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public virtual ISugarQueryable`1<T> GroupBy(string groupFileds);
    public virtual ISugarQueryable`1<T> PartitionBy(Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`1<T> PartitionBy(string groupFileds);
    public virtual ISugarQueryable`1<T> Skip(int num);
    public virtual ISugarQueryable`1<T> Take(int num);
    public virtual ISugarQueryable`1<TResult> Select(Expression expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Dictionary`2<string, Type> keyIsShortName_ValueIsType_Dictionary, FormattableString expSelect, Type resultType);
    public sealed virtual ISugarQueryable`1<TResult> Select(string expShortName, FormattableString expSelect, Type resultType);
    public sealed virtual ISugarQueryable`1<TResult> Select(string expShortName, FormattableString expSelect, Type EntityType, Type resultType);
    public sealed virtual ISugarQueryable`1<T> Select(string expShortName, FormattableString expSelect, Type resultType);
    public virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`2<T, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`2<T, TResult>> expression, bool isAutoFill);
    public virtual ISugarQueryable`1<TResult> Select();
    public virtual ISugarQueryable`1<TResult> Select(string selectValue);
    public virtual ISugarQueryable`1<T> Select(string selectValue);
    public virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`2<T, TResult>> expression);
    public virtual ISugarQueryable`1<T> MergeTable();
    public sealed virtual ISugarQueryable`1<T> SplitTable();
    public sealed virtual ISugarQueryable`1<T> SplitTable(DateTime beginTime, DateTime endTime);
    public sealed virtual ISugarQueryable`1<T> SplitTable(Func`2<List`1<SplitTableInfo>, IEnumerable`1<SplitTableInfo>> getTableNamesFunc);
    public sealed virtual ISugarQueryable`1<T> WithCache(string cacheKey, int cacheDurationInSeconds);
    public sealed virtual ISugarQueryable`1<T> WithCache(int cacheDurationInSeconds);
    public sealed virtual ISugarQueryable`1<T> WithCacheIF(bool isCache, int cacheDurationInSeconds);
    public sealed virtual ISugarQueryable`1<T> Distinct();
    public sealed virtual ISugarQueryable`1<T> AddJoinInfo(string tableName, string shortName, IFuncModel models, JoinType type);
    public sealed virtual ISugarQueryable`1<T> AddJoinInfo(List`1<JoinInfoParameter> joinInfoParameters);
    public sealed virtual ISugarQueryable`1<T> AS(string tableName, string shortName);
    public sealed virtual ISugarQueryable`1<T> OrderBy(List`1<OrderByModel> models);
    public sealed virtual ISugarQueryable`1<T> GroupBy(List`1<GroupByModel> models);
    public sealed virtual ISugarQueryable`1<T> Select(List`1<SelectModel> models);
    public sealed virtual ISugarQueryable`1<TResult> Select(List`1<SelectModel> models);
    public sealed virtual ISugarQueryable`1<T> Select(List`1<SelectModel> models, AsNameFormatType type);
    public sealed virtual ISugarQueryable`1<T> Having(IFuncModel model);
    [CompilerGeneratedAttribute]
private int <Count>b__45_0();
    [CompilerGeneratedAttribute]
private string <ToJson>b__56_0();
    [CompilerGeneratedAttribute]
private int <CountAsync>b__121_0();
    [CompilerGeneratedAttribute]
private string <ToJsonAsync>b__144_0();
    [CompilerGeneratedAttribute]
private bool <SelectNavQuery>b__210_0(EntityColumnInfo a);
    [CompilerGeneratedAttribute]
private string <IgnoreColumns>b__344_0(string it);
    [CompilerGeneratedAttribute]
private bool <Where>b__392_0(SugarParameter it);
    [CompilerGeneratedAttribute]
private string <In>b__403_0(string it);
    [CompilerGeneratedAttribute]
private string <Select>b__434_2(EntityColumnInfo it);
    [CompilerGeneratedAttribute]
private string <Select>b__435_2(EntityColumnInfo it);
}
public class SqlSugar.QueryableProvider`10 : QueryableProvider`1<T> {
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Hints(string hints);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> LeftJoinIF(bool isLeftJoin, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> InnerJoinIF(bool isJoin, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> LeftJoin(ISugarQueryable`1<T11> joinQueryable, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> InnerJoin(ISugarQueryable`1<T11> joinQueryable, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> RightJoin(ISugarQueryable`1<T11> joinQueryable, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> LeftJoin(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FullJoin(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> RightJoin(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> InnerJoin(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> LeftJoin(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FullJoin(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> InnerJoin(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> RightJoin(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(string expShortName, FormattableString expressionString);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(List`1<IConditionalModel> conditionalModels);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(string whereString, object whereObj);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIF(bool isWhere, string whereString, object whereObj);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression, bool isAutoFill);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression);
    public virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`4<T, T2, T3, object>> expression);
    public virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression);
    public virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression);
    public virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(List`1<OrderByModel> models);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(string orderByFields);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression, OrderByType type);
    public ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, string orderByFields);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIF(bool isOrderBy, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`2<T, object>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> GroupBy(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression);
    public sealed virtual TResult Max(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression);
    public sealed virtual TResult Min(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression);
    public sealed virtual TResult Sum(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression);
    public sealed virtual TResult Avg(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Take(int num);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Clone();
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> AS(string tableName);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> AS(string tableName);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> ClearFilter();
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Filter(string FilterName, bool isDisabledGobalFilter);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> ClearFilter(Type[] types);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> ClearFilter();
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> ClearFilter();
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> ClearFilter();
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> AddParameters(object parameters);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> AddParameters(SugarParameter[] parameters);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> AddParameters(List`1<SugarParameter> parameters);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> With(string withString);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithCache(int cacheDurationInSeconds);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithCacheIF(bool isCache, int cacheDurationInSeconds);
}
public class SqlSugar.QueryableProvider`11 : QueryableProvider`1<T> {
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Hints(string hints);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> LeftJoinIF(bool isLeftJoin, Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> InnerJoinIF(bool isJoin, Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> LeftJoin(ISugarQueryable`1<T12> joinQueryable, Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> InnerJoin(ISugarQueryable`1<T12> joinQueryable, Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> RightJoin(ISugarQueryable`1<T12> joinQueryable, Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> LeftJoin(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FullJoin(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> RightJoin(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> InnerJoin(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> LeftJoin(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FullJoin(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> InnerJoin(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> RightJoin(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(string expShortName, FormattableString expressionString);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(List`1<IConditionalModel> conditionalModels);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(string whereString, object whereObj);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIF(bool isWhere, string whereString, object whereObj);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression, bool isAutoFill);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(List`1<OrderByModel> models);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(string orderByFields);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, object>> expression, OrderByType type);
    public ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, string orderByFields);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIF(bool isOrderBy, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`2<T, object>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GroupBy(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, object>> expression);
    public sealed virtual TResult Max(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression);
    public sealed virtual TResult Min(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression);
    public sealed virtual TResult Sum(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression);
    public sealed virtual TResult Avg(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Take(int num);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Clone();
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> AS(string tableName);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> AS(string tableName);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ClearFilter();
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Filter(string FilterName, bool isDisabledGobalFilter);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ClearFilter(Type[] types);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ClearFilter();
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ClearFilter();
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ClearFilter();
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> AddParameters(object parameters);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> AddParameters(SugarParameter[] parameters);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> AddParameters(List`1<SugarParameter> parameters);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> With(string withString);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithCache(int cacheDurationInSeconds);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithCacheIF(bool isCache, int cacheDurationInSeconds);
}
public class SqlSugar.QueryableProvider`12 : QueryableProvider`1<T> {
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Hints(string hints);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(string expShortName, FormattableString expressionString);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(List`1<IConditionalModel> conditionalModels);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(string whereString, object whereObj);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIF(bool isWhere, string whereString, object whereObj);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> expression, bool isAutoFill);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(List`1<OrderByModel> models);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(string orderByFields);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, object>> expression, OrderByType type);
    public ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, string orderByFields);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIF(bool isOrderBy, Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`2<T, object>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, object>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, object>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GroupBy(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, object>> expression);
    public sealed virtual TResult Max(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> expression);
    public sealed virtual TResult Min(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> expression);
    public sealed virtual TResult Sum(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> expression);
    public sealed virtual TResult Avg(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> expression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Take(int num);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Clone();
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> AS(string tableName);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> AS(string tableName);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ClearFilter();
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Filter(string FilterName, bool isDisabledGobalFilter);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ClearFilter(Type[] types);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ClearFilter();
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ClearFilter();
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ClearFilter();
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> AddParameters(object parameters);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> AddParameters(SugarParameter[] parameters);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> AddParameters(List`1<SugarParameter> parameters);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> With(string withString);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithCache(int cacheDurationInSeconds);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithCacheIF(bool isCache, int cacheDurationInSeconds);
}
public class SqlSugar.QueryableProvider`2 : QueryableProvider`1<T> {
    public sealed virtual ISugarQueryable`2<T, T2> Hints(string hints);
    public sealed virtual ISugarQueryable`2<T, T2> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public sealed virtual ISugarQueryable`2<T, T2> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public sealed virtual ISugarQueryable`2<T, T2> SampleBy(int timeNumber, SampleByUnit timeType);
    public sealed virtual ISugarQueryable`2<T, T2> SampleBy(int timeNumber, string timeType);
    public virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> LeftJoinIF(bool isLeftJoin, Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> InnerJoinIF(bool isJoin, Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> LeftJoin(ISugarQueryable`1<T3> joinQueryable, Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> LeftJoinIF(bool isJoin, ISugarQueryable`1<T3> joinQueryable, Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> InnerJoinIF(bool isJoin, ISugarQueryable`1<T3> joinQueryable, Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> InnerJoin(ISugarQueryable`1<T3> joinQueryable, Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> RightJoin(ISugarQueryable`1<T3> joinQueryable, Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> FullJoin(ISugarQueryable`1<T3> joinQueryable, Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> LeftJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> FullJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> RightJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> LeftJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`3<T, T2, T3> FullJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`3<T, T2, T3> InnerJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`3<T, T2, T3> RightJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`3<T, T2, T3> InnerJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public sealed virtual ISugarQueryable`2<T, T2> Where(string expShortName, FormattableString expressionString);
    public sealed virtual ISugarQueryable`2<T, T2> Where(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`2<T, T2> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`2<T, T2> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`2<T, T2> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`2<T, T2> Where(string whereString, object whereObj);
    public sealed virtual ISugarQueryable`2<T, T2> Where(List`1<IConditionalModel> conditionalModels);
    public sealed virtual ISugarQueryable`2<T, T2> Where(IFuncModel funcModel);
    public sealed virtual ISugarQueryable`2<T, T2> WhereIF(bool isWhere, string whereString, object whereObj);
    public sealed virtual ISugarQueryable`2<T, T2> WhereClass(ClassType whereClass, bool ignoreDefaultValue);
    public sealed virtual ISugarQueryable`2<T, T2> WhereClass(List`1<ClassType> whereClassTypes, bool ignoreDefaultValue);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression, bool isAutoFill);
    public sealed virtual ISugarQueryable`2<T, T2> OrderBy(List`1<OrderByModel> models);
    public sealed virtual ISugarQueryable`2<T, T2> OrderBy(string orderByFields);
    public sealed virtual ISugarQueryable`2<T, T2> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public virtual ISugarQueryable`2<T, T2> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`2<T, T2> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public sealed virtual ISugarQueryable`2<T, T2> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`2<T, T2> OrderByIF(bool isOrderBy, string orderByFields);
    public sealed virtual ISugarQueryable`2<T, T2> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`2<T, T2> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`2<T, T2> PartitionBy(Expression`1<Func`2<T, object>> expression);
    public sealed virtual ISugarQueryable`2<T, T2> PartitionBy(Expression`1<Func`3<T, T2, object>> expression);
    public sealed virtual ISugarQueryable`2<T, T2> PartitionBy(string groupFileds);
    public virtual ISugarQueryable`2<T, T2> GroupByIF(bool isGroupBy, Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`2<T, T2> GroupByIF(bool isGroupBy, string groupFields);
    public virtual ISugarQueryable`2<T, T2> GroupByIF(bool isGroupBy, Expression`1<Func`3<T, T2, object>> expression);
    public virtual ISugarQueryable`2<T, T2> HavingIF(bool isHaving, Expression`1<Func`2<T, bool>> expression);
    public virtual ISugarQueryable`2<T, T2> HavingIF(bool isHaving, Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`2<T, T2> GroupBy(Expression`1<Func`2<T, object>> expression);
    public sealed virtual ISugarQueryable`2<T, T2> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public sealed virtual ISugarQueryable`2<T, T2> Having(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`2<T, T2> Having(Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`2<T, T2> Having(string whereString, object whereObj);
    public sealed virtual TResult Max(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual TResult Min(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual TResult Sum(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual TResult Avg(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual Task`1<TResult> MaxAsync(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual Task`1<TResult> MinAsync(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual Task`1<TResult> SumAsync(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual Task`1<TResult> AvgAsync(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual ISugarQueryable`2<T, T2> InIF(bool isIn, string fieldName, TParamter[] pkValues);
    public sealed virtual ISugarQueryable`2<T, T2> InIF(bool isIn, TParamter[] pkValues);
    public sealed virtual ISugarQueryable`2<T, T2> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public sealed virtual ISugarQueryable`2<T, T2> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`2<T, T2> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`2<T, T2> In(Expression`1<Func`3<T, T2, object>> expression, FieldType[] inValues);
    public sealed virtual ISugarQueryable`2<T, T2> In(Expression`1<Func`3<T, T2, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`2<T, T2> In(Expression`1<Func`3<T, T2, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`2<T, T2> Clone();
    public sealed virtual ISugarQueryable`2<T, T2> AS(string tableName);
    public sealed virtual ISugarQueryable`2<T, T2> AS(string tableName);
    public sealed virtual ISugarQueryable`2<T, T2> ClearFilter();
    public sealed virtual ISugarQueryable`2<T, T2> ClearFilter(Type[] types);
    public sealed virtual ISugarQueryable`2<T, T2> ClearFilter();
    public sealed virtual ISugarQueryable`2<T, T2> ClearFilter();
    public sealed virtual ISugarQueryable`2<T, T2> ClearFilter();
    public sealed virtual ISugarQueryable`2<T, T2> Filter(string FilterName, bool isDisabledGobalFilter);
    public sealed virtual ISugarQueryable`2<T, T2> AddParameters(object parameters);
    public sealed virtual ISugarQueryable`2<T, T2> AddParameters(SugarParameter[] parameters);
    public sealed virtual ISugarQueryable`2<T, T2> AddParameters(List`1<SugarParameter> parameters);
    public sealed virtual ISugarQueryable`2<T, T2> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public sealed virtual ISugarQueryable`2<T, T2> With(string withString);
    public sealed virtual ISugarQueryable`2<T, T2> WithCache(int cacheDurationInSeconds);
    public sealed virtual ISugarQueryable`2<T, T2> WithCacheIF(bool isCache, int cacheDurationInSeconds);
    public sealed virtual bool Any(Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`2<T, T2> Distinct();
    public sealed virtual ISugarQueryable`2<T, T2> Take(int num);
}
public class SqlSugar.QueryableProvider`3 : QueryableProvider`1<T> {
    public sealed virtual ISugarQueryable`3<T, T2, T3> Hints(string hints);
    public sealed virtual ISugarQueryable`3<T, T2, T3> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public sealed virtual ISugarQueryable`3<T, T2, T3> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public sealed virtual ISugarQueryable`3<T, T2, T3> SampleBy(int timeNumber, SampleByUnit timeType);
    public sealed virtual ISugarQueryable`3<T, T2, T3> SampleBy(int timeNumber, string timeType);
    public virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> LeftJoinIF(bool isLeftJoin, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> InnerJoinIF(bool isJoin, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> LeftJoin(ISugarQueryable`1<T4> joinQueryable, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> LeftJoinIF(bool isJoin, ISugarQueryable`1<T4> joinQueryable, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> InnerJoinIF(bool isJoin, ISugarQueryable`1<T4> joinQueryable, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> InnerJoin(ISugarQueryable`1<T4> joinQueryable, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> RightJoin(ISugarQueryable`1<T4> joinQueryable, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> FullJoin(ISugarQueryable`1<T4> joinQueryable, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> LeftJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> FullJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> RightJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> InnerJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> LeftJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> FullJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> InnerJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> RightJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`3<T, T2, T3> PartitionBy(Expression`1<Func`2<T, object>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> PartitionBy(Expression`1<Func`3<T, T2, object>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> PartitionBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> PartitionBy(string groupFileds);
    public virtual ISugarQueryable`3<T, T2, T3> GroupByIF(bool isGroupBy, Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`3<T, T2, T3> GroupByIF(bool isGroupBy, string groupFields);
    public virtual ISugarQueryable`3<T, T2, T3> GroupByIF(bool isGroupBy, Expression`1<Func`3<T, T2, object>> expression);
    public virtual ISugarQueryable`3<T, T2, T3> GroupByIF(bool isGroupBy, Expression`1<Func`4<T, T2, T3, object>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> GroupBy(Expression`1<Func`2<T, object>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Having(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Having(Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Having(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Having(string whereString, object whereObj);
    public virtual ISugarQueryable`3<T, T2, T3> HavingIF(bool isHaving, Expression`1<Func`2<T, bool>> expression);
    public virtual ISugarQueryable`3<T, T2, T3> HavingIF(bool isHaving, Expression`1<Func`3<T, T2, bool>> expression);
    public virtual ISugarQueryable`3<T, T2, T3> HavingIF(bool isHaving, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> OrderBy(List`1<OrderByModel> models);
    public virtual ISugarQueryable`3<T, T2, T3> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`3<T, T2, T3> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public virtual ISugarQueryable`3<T, T2, T3> OrderByDescending(Expression`1<Func`4<T, T2, T3, object>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> OrderBy(string orderByFields);
    public sealed virtual ISugarQueryable`3<T, T2, T3> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`3<T, T2, T3> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`3<T, T2, T3> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`3<T, T2, T3> OrderByIF(bool isOrderBy, string orderByFields);
    public sealed virtual ISugarQueryable`3<T, T2, T3> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`3<T, T2, T3> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`3<T, T2, T3> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression, bool isAutoFill);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Where(string expShortName, FormattableString expressionString);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Where(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Where(List`1<IConditionalModel> conditionalModels);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Where(IFuncModel funcModel);
    public sealed virtual ISugarQueryable`3<T, T2, T3> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Where(string whereString, object whereObj);
    public sealed virtual ISugarQueryable`3<T, T2, T3> WhereIF(bool isWhere, string whereString, object whereObj);
    public sealed virtual ISugarQueryable`3<T, T2, T3> WhereClass(ClassType whereClass, bool ignoreDefaultValue);
    public sealed virtual ISugarQueryable`3<T, T2, T3> WhereClass(List`1<ClassType> whereClassTypes, bool ignoreDefaultValue);
    public sealed virtual TResult Max(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual TResult Min(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual TResult Sum(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual TResult Avg(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual Task`1<TResult> MaxAsync(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual Task`1<TResult> MinAsync(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual Task`1<TResult> SumAsync(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual Task`1<TResult> AvgAsync(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> InIF(bool isIn, string fieldName, TParamter[] pkValues);
    public sealed virtual ISugarQueryable`3<T, T2, T3> InIF(bool isIn, TParamter[] pkValues);
    public sealed virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public sealed virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`3<T, T2, object>> expression, FieldType[] inValues);
    public sealed virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`3<T, T2, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`3<T, T2, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`4<T, T2, T3, object>> expression, FieldType[] inValues);
    public sealed virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`4<T, T2, T3, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`3<T, T2, T3> In(Expression`1<Func`4<T, T2, T3, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Take(int num);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Clone();
    public sealed virtual ISugarQueryable`3<T, T2, T3> AS(string tableName);
    public sealed virtual ISugarQueryable`3<T, T2, T3> AS(string tableName);
    public sealed virtual ISugarQueryable`3<T, T2, T3> ClearFilter();
    public sealed virtual ISugarQueryable`3<T, T2, T3> Filter(string FilterName, bool isDisabledGobalFilter);
    public sealed virtual ISugarQueryable`3<T, T2, T3> ClearFilter(Type[] types);
    public sealed virtual ISugarQueryable`3<T, T2, T3> ClearFilter();
    public sealed virtual ISugarQueryable`3<T, T2, T3> ClearFilter();
    public sealed virtual ISugarQueryable`3<T, T2, T3> ClearFilter();
    public sealed virtual ISugarQueryable`3<T, T2, T3> AddParameters(object parameters);
    public sealed virtual ISugarQueryable`3<T, T2, T3> AddParameters(SugarParameter[] parameters);
    public sealed virtual ISugarQueryable`3<T, T2, T3> AddParameters(List`1<SugarParameter> parameters);
    public sealed virtual ISugarQueryable`3<T, T2, T3> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public sealed virtual ISugarQueryable`3<T, T2, T3> With(string withString);
    public sealed virtual ISugarQueryable`3<T, T2, T3> WithCache(int cacheDurationInSeconds);
    public sealed virtual ISugarQueryable`3<T, T2, T3> WithCacheIF(bool isCache, int cacheDurationInSeconds);
    public sealed virtual bool Any(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Distinct();
}
public class SqlSugar.QueryableProvider`4 : QueryableProvider`1<T> {
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Hints(string hints);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> SampleBy(int timeNumber, SampleByUnit timeType);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> SampleBy(int timeNumber, string timeType);
    public virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> LeftJoinIF(bool isLeftJoin, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> InnerJoinIF(bool isJoin, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> LeftJoin(ISugarQueryable`1<T5> joinQueryable, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> LeftJoinIF(bool isJoin, ISugarQueryable`1<T5> joinQueryable, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> InnerJoinIF(bool isJoin, ISugarQueryable`1<T5> joinQueryable, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> InnerJoin(ISugarQueryable`1<T5> joinQueryable, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> RightJoin(ISugarQueryable`1<T5> joinQueryable, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> LeftJoin(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> FullJoin(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> RightJoin(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> InnerJoin(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> LeftJoin(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> FullJoin(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> InnerJoin(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> RightJoin(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Where(string expShortName, FormattableString expressionString);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Where(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Where(List`1<IConditionalModel> conditionalModels);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Where(IFuncModel funcModel);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Where(string whereString, object whereObj);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> WhereIF(bool isWhere, string whereString, object whereObj);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> WhereClass(ClassType whereClass, bool ignoreDefaultValue);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> WhereClass(List`1<ClassType> whereClassTypes, bool ignoreDefaultValue);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression, bool isAutoFill);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> OrderBy(List`1<OrderByModel> models);
    public virtual ISugarQueryable`4<T, T2, T3, T4> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`4<T, T2, T3, T4> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public virtual ISugarQueryable`4<T, T2, T3, T4> OrderByDescending(Expression`1<Func`4<T, T2, T3, object>> expression);
    public virtual ISugarQueryable`4<T, T2, T3, T4> OrderByDescending(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> OrderBy(string orderByFields);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> OrderByIF(bool isOrderBy, string orderByFields);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public virtual ISugarQueryable`4<T, T2, T3, T4> GroupByIF(bool isGroupBy, Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`4<T, T2, T3, T4> GroupByIF(bool isGroupBy, Expression`1<Func`3<T, T2, object>> expression);
    public virtual ISugarQueryable`4<T, T2, T3, T4> GroupByIF(bool isGroupBy, Expression`1<Func`4<T, T2, T3, object>> expression);
    public virtual ISugarQueryable`4<T, T2, T3, T4> GroupByIF(bool isGroupBy, string groupFields);
    public virtual ISugarQueryable`4<T, T2, T3, T4> GroupByIF(bool isGroupBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> GroupBy(Expression`1<Func`2<T, object>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Having(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Having(Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Having(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Having(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Having(string whereString, object whereObj);
    public virtual ISugarQueryable`4<T, T2, T3, T4> HavingIF(bool isHaving, Expression`1<Func`2<T, bool>> expression);
    public virtual ISugarQueryable`4<T, T2, T3, T4> HavingIF(bool isHaving, Expression`1<Func`3<T, T2, bool>> expression);
    public virtual ISugarQueryable`4<T, T2, T3, T4> HavingIF(bool isHaving, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public virtual ISugarQueryable`4<T, T2, T3, T4> HavingIF(bool isHaving, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual TResult Max(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public sealed virtual TResult Min(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public sealed virtual TResult Sum(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public sealed virtual TResult Avg(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> InIF(bool isIn, string fieldName, TParamter[] pkValues);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> InIF(bool isIn, TParamter[] pkValues);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`3<T, T2, object>> expression, FieldType[] inValues);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`3<T, T2, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`3<T, T2, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`4<T, T2, T3, object>> expression, FieldType[] inValues);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`4<T, T2, T3, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`4<T, T2, T3, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`5<T, T2, T3, T4, object>> expression, FieldType[] inValues);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`5<T, T2, T3, T4, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> In(Expression`1<Func`5<T, T2, T3, T4, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Take(int num);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Clone();
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> AS(string tableName);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> AS(string tableName);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> ClearFilter();
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Filter(string FilterName, bool isDisabledGobalFilter);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> ClearFilter(Type[] types);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> ClearFilter();
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> ClearFilter();
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> ClearFilter();
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> AddParameters(object parameters);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> AddParameters(SugarParameter[] parameters);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> AddParameters(List`1<SugarParameter> parameters);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> With(string withString);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> WithCache(int cacheDurationInSeconds);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> WithCacheIF(bool isCache, int cacheDurationInSeconds);
    public sealed virtual bool Any(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Distinct();
}
public class SqlSugar.QueryableProvider`5 : QueryableProvider`1<T> {
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Hints(string hints);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> SampleBy(int timeNumber, SampleByUnit timeType);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> SampleBy(int timeNumber, string timeType);
    public virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> LeftJoinIF(bool isLeftJoin, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> InnerJoinIF(bool isJoin, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> LeftJoin(ISugarQueryable`1<T6> joinQueryable, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> LeftJoinIF(bool isJoin, ISugarQueryable`1<T6> joinQueryable, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> InnerJoinIF(bool isJoin, ISugarQueryable`1<T6> joinQueryable, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> InnerJoin(ISugarQueryable`1<T6> joinQueryable, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> RightJoin(ISugarQueryable`1<T6> joinQueryable, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> LeftJoin(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> FullJoin(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> RightJoin(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> InnerJoin(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> LeftJoin(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> FullJoin(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> InnerJoin(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> RightJoin(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(string expShortName, FormattableString expressionString);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(List`1<IConditionalModel> conditionalModels);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(IFuncModel funcModel);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> WhereIF(bool isWhere, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Where(string whereString, object whereObj);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> WhereIF(bool isWhere, string whereString, object whereObj);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> WhereClass(ClassType whereClass, bool ignoreDefaultValue);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> WhereClass(List`1<ClassType> whereClassTypes, bool ignoreDefaultValue);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression, bool isAutoFill);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderBy(List`1<OrderByModel> models);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByDescending(Expression`1<Func`4<T, T2, T3, object>> expression);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByDescending(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByDescending(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderBy(string orderByFields);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByIF(bool isOrderBy, string orderByFields);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> OrderByIF(bool isOrderBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupByIF(bool isGroupBy, Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupByIF(bool isGroupBy, Expression`1<Func`3<T, T2, object>> expression);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupByIF(bool isGroupBy, Expression`1<Func`4<T, T2, T3, object>> expression);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupByIF(bool isGroupBy, string groupFields);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupByIF(bool isGroupBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupByIF(bool isGroupBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupBy(Expression`1<Func`2<T, object>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> GroupBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Having(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Having(Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Having(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Having(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Having(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Having(string whereString, object whereObj);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> HavingIF(bool isHaving, Expression`1<Func`2<T, bool>> expression);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> HavingIF(bool isHaving, Expression`1<Func`3<T, T2, bool>> expression);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> HavingIF(bool isHaving, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> HavingIF(bool isHaving, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> HavingIF(bool isHaving, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual TResult Max(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public sealed virtual TResult Min(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public sealed virtual TResult Sum(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public sealed virtual TResult Avg(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Take(int num);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Clone();
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> AS(string tableName);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> AS(string tableName);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> ClearFilter();
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Filter(string FilterName, bool isDisabledGobalFilter);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> ClearFilter(Type[] types);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> ClearFilter();
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> ClearFilter();
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> ClearFilter();
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> AddParameters(object parameters);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> AddParameters(SugarParameter[] parameters);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> AddParameters(List`1<SugarParameter> parameters);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> With(string withString);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> WithCache(int cacheDurationInSeconds);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> WithCacheIF(bool isCache, int cacheDurationInSeconds);
    public sealed virtual bool Any(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Distinct();
}
public class SqlSugar.QueryableProvider`6 : QueryableProvider`1<T> {
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Hints(string hints);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> LeftJoinIF(bool isLeftJoin, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> InnerJoinIF(bool isJoin, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> LeftJoin(ISugarQueryable`1<T7> joinQueryable, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> InnerJoin(ISugarQueryable`1<T7> joinQueryable, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> RightJoin(ISugarQueryable`1<T7> joinQueryable, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> LeftJoin(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> FullJoin(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> RightJoin(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> InnerJoin(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> LeftJoin(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> FullJoin(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> InnerJoin(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> RightJoin(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(string expShortName, FormattableString expressionString);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(List`1<IConditionalModel> conditionalModels);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(IFuncModel funcModel);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereIF(bool isWhere, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereIF(bool isWhere, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Where(string whereString, object whereObj);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereIF(bool isWhere, string whereString, object whereObj);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereClass(ClassType whereClass, bool ignoreDefaultValue);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WhereClass(List`1<ClassType> whereClassTypes, bool ignoreDefaultValue);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression, bool isAutoFill);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderBy(List`1<OrderByModel> models);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByDescending(Expression`1<Func`4<T, T2, T3, object>> expression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByDescending(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByDescending(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByDescending(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderBy(string orderByFields);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByIF(bool isOrderBy, string orderByFields);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByIF(bool isOrderBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> OrderByIF(bool isOrderBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupByIF(bool isGroupBy, Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupByIF(bool isGroupBy, Expression`1<Func`3<T, T2, object>> expression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupByIF(bool isGroupBy, Expression`1<Func`4<T, T2, T3, object>> expression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupByIF(bool isGroupBy, string groupFields);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupByIF(bool isGroupBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupByIF(bool isGroupBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupByIF(bool isGroupBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupBy(Expression`1<Func`2<T, object>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> GroupBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Having(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Having(Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Having(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Having(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Having(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Having(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Having(string whereString, object whereObj);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> HavingIF(bool isHaving, Expression`1<Func`2<T, bool>> expression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> HavingIF(bool isHaving, Expression`1<Func`3<T, T2, bool>> expression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> HavingIF(bool isHaving, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> HavingIF(bool isHaving, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> HavingIF(bool isHaving, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> HavingIF(bool isHaving, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public sealed virtual TResult Max(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public sealed virtual TResult Min(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public sealed virtual TResult Sum(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public sealed virtual TResult Avg(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Take(int num);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Clone();
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> AS(string tableName);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> AS(string tableName);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> ClearFilter();
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Filter(string FilterName, bool isDisabledGobalFilter);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> ClearFilter(Type[] types);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> ClearFilter();
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> ClearFilter();
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> ClearFilter();
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> AddParameters(object parameters);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> AddParameters(SugarParameter[] parameters);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> AddParameters(List`1<SugarParameter> parameters);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> With(string withString);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WithCache(int cacheDurationInSeconds);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> WithCacheIF(bool isCache, int cacheDurationInSeconds);
    public sealed virtual bool Any(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Distinct();
}
public class SqlSugar.QueryableProvider`7 : QueryableProvider`1<T> {
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Hints(string hints);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> LeftJoinIF(bool isLeftJoin, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> InnerJoinIF(bool isJoin, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> LeftJoin(ISugarQueryable`1<T8> joinQueryable, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> InnerJoin(ISugarQueryable`1<T8> joinQueryable, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> RightJoin(ISugarQueryable`1<T8> joinQueryable, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> LeftJoin(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> FullJoin(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> RightJoin(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> InnerJoin(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> LeftJoin(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> FullJoin(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> InnerJoin(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> RightJoin(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(string expShortName, FormattableString expressionString);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(List`1<IConditionalModel> conditionalModels);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereIF(bool isWhere, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereIF(bool isWhere, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereIF(bool isWhere, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Where(string whereString, object whereObj);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereIF(bool isWhere, string whereString, object whereObj);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereClass(ClassType whereClass, bool ignoreDefaultValue);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WhereClass(List`1<ClassType> whereClassTypes, bool ignoreDefaultValue);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression, bool isAutoFill);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(List`1<OrderByModel> models);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByDescending(Expression`1<Func`4<T, T2, T3, object>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByDescending(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByDescending(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByDescending(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByDescending(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(string orderByFields);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupByIF(bool isGroupBy, Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupByIF(bool isGroupBy, Expression`1<Func`3<T, T2, object>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupByIF(bool isGroupBy, Expression`1<Func`4<T, T2, T3, object>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupByIF(bool isGroupBy, string groupFields);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupByIF(bool isGroupBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupByIF(bool isGroupBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupByIF(bool isGroupBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupByIF(bool isGroupBy, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupBy(Expression`1<Func`2<T, object>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> GroupBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByIF(bool isOrderBy, string orderByFields);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByIF(bool isOrderBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByIF(bool isOrderBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> OrderByIF(bool isOrderBy, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> HavingIF(bool isHaving, Expression`1<Func`2<T, bool>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> HavingIF(bool isHaving, Expression`1<Func`3<T, T2, bool>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> HavingIF(bool isHaving, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> HavingIF(bool isHaving, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> HavingIF(bool isHaving, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> HavingIF(bool isHaving, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> HavingIF(bool isHaving, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public sealed virtual TResult Max(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public sealed virtual TResult Min(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public sealed virtual TResult Sum(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public sealed virtual TResult Avg(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Take(int num);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Clone();
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> AS(string tableName);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> AS(string tableName);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> ClearFilter();
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Filter(string FilterName, bool isDisabledGobalFilter);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> ClearFilter(Type[] types);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> ClearFilter();
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> ClearFilter();
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> ClearFilter();
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> AddParameters(object parameters);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> AddParameters(SugarParameter[] parameters);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> AddParameters(List`1<SugarParameter> parameters);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> With(string withString);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WithCache(int cacheDurationInSeconds);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> WithCacheIF(bool isCache, int cacheDurationInSeconds);
    public sealed virtual bool Any(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Distinct();
}
public class SqlSugar.QueryableProvider`8 : QueryableProvider`1<T> {
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Hints(string hints);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> LeftJoinIF(bool isLeftJoin, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> InnerJoinIF(bool isJoin, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> LeftJoin(ISugarQueryable`1<T9> joinQueryable, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> InnerJoin(ISugarQueryable`1<T9> joinQueryable, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> RightJoin(ISugarQueryable`1<T9> joinQueryable, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> LeftJoin(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> FullJoin(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> RightJoin(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> InnerJoin(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> LeftJoin(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> FullJoin(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> InnerJoin(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> RightJoin(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(string expShortName, FormattableString expressionString);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(List`1<IConditionalModel> conditionalModels);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Where(string whereString, object whereObj);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereIF(bool isWhere, string whereString, object whereObj);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereClass(ClassType whereClass, bool ignoreDefaultValue);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WhereClass(List`1<ClassType> whereClassTypes, bool ignoreDefaultValue);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression, bool isAutoFill);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(List`1<OrderByModel> models);
    public virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`4<T, T2, T3, object>> expression);
    public virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(string orderByFields);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, string orderByFields);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> OrderByIF(bool isOrderBy, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> GroupBy(Expression`1<Func`2<T, object>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> GroupBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> GroupBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> GroupBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> GroupBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression);
    public sealed virtual TResult Max(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public sealed virtual TResult Min(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public sealed virtual TResult Sum(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public sealed virtual TResult Avg(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Take(int num);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Clone();
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> AS(string tableName);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> AS(string tableName);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> ClearFilter();
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Filter(string FilterName, bool isDisabledGobalFilter);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> AddParameters(object parameters);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> ClearFilter(Type[] types);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> ClearFilter();
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> ClearFilter();
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> ClearFilter();
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> AddParameters(SugarParameter[] parameters);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> AddParameters(List`1<SugarParameter> parameters);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> With(string withString);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WithCache(int cacheDurationInSeconds);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> WithCacheIF(bool isCache, int cacheDurationInSeconds);
    public sealed virtual bool Any(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Distinct();
}
public class SqlSugar.QueryableProvider`9 : QueryableProvider`1<T> {
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Hints(string hints);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByPropertyNameIF(bool isOrderBy, string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByPropertyName(string orderPropertyName, Nullable`1<OrderByType> orderByType);
    public virtual ISugarQueryable`1<TResult> SelectMergeTable(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> LeftJoinIF(bool isLeftJoin, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> InnerJoinIF(bool isJoin, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> LeftJoin(ISugarQueryable`1<T10> joinQueryable, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> InnerJoin(ISugarQueryable`1<T10> joinQueryable, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> RightJoin(ISugarQueryable`1<T10> joinQueryable, Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> LeftJoin(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> FullJoin(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> RightJoin(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> InnerJoin(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> LeftJoin(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> FullJoin(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> InnerJoin(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> RightJoin(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression, string tableName);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(string expShortName, FormattableString expressionString);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(List`1<IConditionalModel> conditionalModels);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`3<T, T2, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`4<T, T2, T3, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`5<T, T2, T3, T4, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`6<T, T2, T3, T4, T5, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Where(string whereString, object whereObj);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WhereIF(bool isWhere, string whereString, object whereObj);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression, bool isAutoFill);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`3<T, T2, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`4<T, T2, T3, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`5<T, T2, T3, T4, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`6<T, T2, T3, T4, T5, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`7<T, T2, T3, T4, T5, T6, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, TResult>> expression);
    public sealed virtual ISugarQueryable`1<TResult> Select(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`2<T, object>> expression);
    public virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`3<T, T2, object>> expression);
    public virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`4<T, T2, T3, object>> expression);
    public virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression);
    public virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(List`1<OrderByModel> models);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(string orderByFields);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression, OrderByType type);
    public ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, string orderByFields);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`2<T, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`3<T, T2, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`4<T, T2, T3, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`5<T, T2, T3, T4, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIF(bool isOrderBy, Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression, OrderByType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`2<T, object>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`3<T, T2, object>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`4<T, T2, T3, object>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`5<T, T2, T3, T4, object>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`6<T, T2, T3, T4, T5, object>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`7<T, T2, T3, T4, T5, T6, object>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, object>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, object>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> GroupBy(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, object>> expression);
    public sealed virtual TResult Max(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public sealed virtual TResult Min(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public sealed virtual TResult Sum(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public sealed virtual TResult Avg(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> In(Expression`1<Func`2<T, object>> expression, FieldType[] inValues);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> In(Expression`1<Func`2<T, object>> expression, List`1<FieldType> inValues);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> In(Expression`1<Func`2<T, object>> expression, ISugarQueryable`1<FieldType> childQueryExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Take(int num);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Clone();
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> AS(string tableName);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> AS(string tableName);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> ClearFilter();
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Filter(string FilterName, bool isDisabledGobalFilter);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> ClearFilter(Type[] types);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> ClearFilter();
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> ClearFilter();
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> ClearFilter();
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> AddParameters(object parameters);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> AddParameters(SugarParameter[] parameters);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> AddParameters(List`1<SugarParameter> parameters);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> AddJoinInfo(string tableName, string shortName, string joinWhere, JoinType type);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> With(string withString);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WithCache(int cacheDurationInSeconds);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> WithCacheIF(bool isCache, int cacheDurationInSeconds);
}
public abstract class SqlSugar.QueryBuilder : object {
    protected List`1<JoinQueryInfo> _JoinQueryInfos;
    protected Dictionary`2<string, string> _EasyJoinInfos;
    private List`1<string> _WhereInfos;
    private string _HavingInfos;
    protected string _TableNameString;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private StringBuilder <sql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ILambdaExpressions <LambdaExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsParameterizedConstructor>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Hints>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AppendNavInfo <AppendNavInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type[] <RemoveFilters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, object> <SubToListParameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<QueryableAppendColumn> <AppendColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<List`1<QueryableAppendColumn>> <AppendValues>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsCrossQueryWithAttr>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, string> <CrossQueryItems>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSelectSingleFiledJson>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSelectSingleFiledArray>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TranLock>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDisableMasterSlaveSeparation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsEnableMasterSlaveSeparation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsQueryInQuery>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<object> <Includes>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <IgnoreColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSqlQuery>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSqlQuerySelect>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ExternalPageIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ExternalPageSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Take>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DisableTop>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SampleBy>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <OrderByValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <SelectValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SelectCacheKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <EntityName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <OldSql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <ResultType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableWithString>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <GroupByValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PartitionByValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <WhereIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDistinct>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <JoinIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDisabledGobalFilter>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SugarParameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <JoinExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableShortName>k__BackingField;
    public Dictionary`2<string, string> AsTables;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MasterDbTableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<QueryableFormat> <QueryableFormats>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsClone>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <NoCheckInclude>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSelectNoAll>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <AutoAppendedColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, string> <MappingKeys>k__BackingField;
    public StringBuilder sql { get; public set; }
    public SqlSugarProvider Context { get; public set; }
    public ILambdaExpressions LambdaExpressions { get; public set; }
    public ISqlBuilder Builder { get; public set; }
    public bool IsParameterizedConstructor { get; public set; }
    public string Hints { get; public set; }
    internal AppendNavInfo AppendNavInfo { get; internal set; }
    public Type[] RemoveFilters { get; public set; }
    public Dictionary`2<string, object> SubToListParameters { get; public set; }
    internal List`1<QueryableAppendColumn> AppendColumns { get; internal set; }
    internal List`1<List`1<QueryableAppendColumn>> AppendValues { get; internal set; }
    public bool IsCrossQueryWithAttr { get; public set; }
    public Dictionary`2<string, string> CrossQueryItems { get; public set; }
    public bool IsSelectSingleFiledJson { get; public set; }
    public bool IsSelectSingleFiledArray { get; public set; }
    public string TranLock { get; public set; }
    public bool IsDisableMasterSlaveSeparation { get; public set; }
    public bool IsEnableMasterSlaveSeparation { get; public set; }
    public bool IsQueryInQuery { get; public set; }
    public List`1<object> Includes { get; public set; }
    public List`1<string> IgnoreColumns { get; public set; }
    public bool IsCount { get; public set; }
    public bool IsSqlQuery { get; public set; }
    public bool IsSqlQuerySelect { get; public set; }
    public Nullable`1<int> Skip { get; public set; }
    public int ExternalPageIndex { get; public set; }
    public int ExternalPageSize { get; public set; }
    public Nullable`1<int> Take { get; public set; }
    public bool DisableTop { get; public set; }
    public string SampleBy { get; public set; }
    public string OrderByValue { get; public set; }
    public object SelectValue { get; public set; }
    public string SelectCacheKey { get; public set; }
    public string EntityName { get; public set; }
    public string OldSql { get; public set; }
    public Type EntityType { get; public set; }
    public Type ResultType { get; public set; }
    public string TableWithString { get; public set; }
    public string GroupByValue { get; public set; }
    public string PartitionByValue { get; public set; }
    public int WhereIndex { get; public set; }
    public bool IsDistinct { get; public set; }
    public int JoinIndex { get; public set; }
    public bool IsDisabledGobalFilter { get; public set; }
    public List`1<SugarParameter> Parameters { get; public set; }
    public Expression JoinExpression { get; public set; }
    public Dictionary`2<string, string> EasyJoinInfos { get; public set; }
    public List`1<JoinQueryInfo> JoinQueryInfos { get; public set; }
    public string TableShortName { get; public set; }
    public List`1<string> WhereInfos { get; public set; }
    public string HavingInfos { get; public set; }
    public ResolveExpressType SelectType { get; }
    public ResolveExpressType WheretType { get; }
    public string SqlTemplate { get; }
    public string JoinTemplate { get; }
    public string PageTempalte { get; }
    public string ExternalPageTempalte { get; }
    public string DefaultOrderByTemplate { get; }
    public string OrderByTemplate { get; }
    public string GroupByTemplate { get; }
    public string PartitionByTemplate { get; }
    public string MaxTemplate { get; }
    public string MinTemplate { get; }
    public string SumTemplate { get; }
    public string AvgTemplate { get; }
    public string InTemplate { get; }
    public string EqualTemplate { get; }
    public string Offset { get; public set; }
    public string GetSelectValue { get; }
    public string GetWhereValueString { get; }
    public string GetJoinValueString { get; }
    public string MasterDbTableName { get; public set; }
    public string GetTableNameString { get; }
    public string GetOrderByString { get; }
    public string GetGroupByString { get; }
    internal List`1<QueryableFormat> QueryableFormats { get; internal set; }
    internal bool IsClone { get; internal set; }
    public bool NoCheckInclude { get; public set; }
    public bool IsSelectNoAll { get; public set; }
    public List`1<string> AutoAppendedColumns { get; public set; }
    public Dictionary`2<string, string> MappingKeys { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual StringBuilder get_sql();
    [CompilerGeneratedAttribute]
public sealed virtual void set_sql(StringBuilder value);
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public ILambdaExpressions get_LambdaExpressions();
    [CompilerGeneratedAttribute]
public void set_LambdaExpressions(ILambdaExpressions value);
    [CompilerGeneratedAttribute]
public ISqlBuilder get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(ISqlBuilder value);
    [CompilerGeneratedAttribute]
public bool get_IsParameterizedConstructor();
    [CompilerGeneratedAttribute]
public void set_IsParameterizedConstructor(bool value);
    [CompilerGeneratedAttribute]
public string get_Hints();
    [CompilerGeneratedAttribute]
public void set_Hints(string value);
    [CompilerGeneratedAttribute]
internal AppendNavInfo get_AppendNavInfo();
    [CompilerGeneratedAttribute]
internal void set_AppendNavInfo(AppendNavInfo value);
    [CompilerGeneratedAttribute]
public Type[] get_RemoveFilters();
    [CompilerGeneratedAttribute]
public void set_RemoveFilters(Type[] value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_SubToListParameters();
    [CompilerGeneratedAttribute]
public void set_SubToListParameters(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
internal List`1<QueryableAppendColumn> get_AppendColumns();
    [CompilerGeneratedAttribute]
internal void set_AppendColumns(List`1<QueryableAppendColumn> value);
    [CompilerGeneratedAttribute]
internal List`1<List`1<QueryableAppendColumn>> get_AppendValues();
    [CompilerGeneratedAttribute]
internal void set_AppendValues(List`1<List`1<QueryableAppendColumn>> value);
    [CompilerGeneratedAttribute]
public bool get_IsCrossQueryWithAttr();
    [CompilerGeneratedAttribute]
public void set_IsCrossQueryWithAttr(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CrossQueryItems();
    [CompilerGeneratedAttribute]
public void set_CrossQueryItems(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_IsSelectSingleFiledJson();
    [CompilerGeneratedAttribute]
public void set_IsSelectSingleFiledJson(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSelectSingleFiledArray();
    [CompilerGeneratedAttribute]
public void set_IsSelectSingleFiledArray(bool value);
    [CompilerGeneratedAttribute]
public string get_TranLock();
    [CompilerGeneratedAttribute]
public void set_TranLock(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDisableMasterSlaveSeparation();
    [CompilerGeneratedAttribute]
public void set_IsDisableMasterSlaveSeparation(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEnableMasterSlaveSeparation();
    [CompilerGeneratedAttribute]
public void set_IsEnableMasterSlaveSeparation(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsQueryInQuery();
    [CompilerGeneratedAttribute]
public void set_IsQueryInQuery(bool value);
    [CompilerGeneratedAttribute]
public List`1<object> get_Includes();
    [CompilerGeneratedAttribute]
public void set_Includes(List`1<object> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_IgnoreColumns();
    [CompilerGeneratedAttribute]
public void set_IgnoreColumns(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IsCount();
    [CompilerGeneratedAttribute]
public void set_IsCount(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSqlQuery();
    [CompilerGeneratedAttribute]
public void set_IsSqlQuery(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSqlQuerySelect();
    [CompilerGeneratedAttribute]
public void set_IsSqlQuerySelect(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_ExternalPageIndex();
    [CompilerGeneratedAttribute]
public void set_ExternalPageIndex(int value);
    [CompilerGeneratedAttribute]
public int get_ExternalPageSize();
    [CompilerGeneratedAttribute]
public void set_ExternalPageSize(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Take();
    [CompilerGeneratedAttribute]
public void set_Take(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_DisableTop();
    [CompilerGeneratedAttribute]
public void set_DisableTop(bool value);
    [CompilerGeneratedAttribute]
public string get_SampleBy();
    [CompilerGeneratedAttribute]
public void set_SampleBy(string value);
    [CompilerGeneratedAttribute]
public string get_OrderByValue();
    [CompilerGeneratedAttribute]
public void set_OrderByValue(string value);
    [CompilerGeneratedAttribute]
public object get_SelectValue();
    [CompilerGeneratedAttribute]
public void set_SelectValue(object value);
    [CompilerGeneratedAttribute]
public string get_SelectCacheKey();
    [CompilerGeneratedAttribute]
public void set_SelectCacheKey(string value);
    [CompilerGeneratedAttribute]
public string get_EntityName();
    [CompilerGeneratedAttribute]
public void set_EntityName(string value);
    [CompilerGeneratedAttribute]
public string get_OldSql();
    [CompilerGeneratedAttribute]
public void set_OldSql(string value);
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(Type value);
    [CompilerGeneratedAttribute]
public Type get_ResultType();
    [CompilerGeneratedAttribute]
public void set_ResultType(Type value);
    [CompilerGeneratedAttribute]
public string get_TableWithString();
    [CompilerGeneratedAttribute]
public void set_TableWithString(string value);
    [CompilerGeneratedAttribute]
public string get_GroupByValue();
    [CompilerGeneratedAttribute]
public void set_GroupByValue(string value);
    [CompilerGeneratedAttribute]
public string get_PartitionByValue();
    [CompilerGeneratedAttribute]
public void set_PartitionByValue(string value);
    [CompilerGeneratedAttribute]
public int get_WhereIndex();
    [CompilerGeneratedAttribute]
public void set_WhereIndex(int value);
    [CompilerGeneratedAttribute]
public bool get_IsDistinct();
    [CompilerGeneratedAttribute]
public void set_IsDistinct(bool value);
    [CompilerGeneratedAttribute]
public int get_JoinIndex();
    [CompilerGeneratedAttribute]
public void set_JoinIndex(int value);
    [CompilerGeneratedAttribute]
public bool get_IsDisabledGobalFilter();
    [CompilerGeneratedAttribute]
public void set_IsDisabledGobalFilter(bool value);
    [CompilerGeneratedAttribute]
public virtual List`1<SugarParameter> get_Parameters();
    [CompilerGeneratedAttribute]
public virtual void set_Parameters(List`1<SugarParameter> value);
    [CompilerGeneratedAttribute]
public Expression get_JoinExpression();
    [CompilerGeneratedAttribute]
public void set_JoinExpression(Expression value);
    public Dictionary`2<string, string> get_EasyJoinInfos();
    public void set_EasyJoinInfos(Dictionary`2<string, string> value);
    public virtual List`1<JoinQueryInfo> get_JoinQueryInfos();
    public virtual void set_JoinQueryInfos(List`1<JoinQueryInfo> value);
    [CompilerGeneratedAttribute]
public virtual string get_TableShortName();
    [CompilerGeneratedAttribute]
public virtual void set_TableShortName(string value);
    public virtual List`1<string> get_WhereInfos();
    public virtual void set_WhereInfos(List`1<string> value);
    public virtual string get_HavingInfos();
    public virtual void set_HavingInfos(string value);
    public ResolveExpressType get_SelectType();
    public ResolveExpressType get_WheretType();
    public virtual string get_SqlTemplate();
    public virtual string get_JoinTemplate();
    public virtual string get_PageTempalte();
    public virtual string get_ExternalPageTempalte();
    public virtual string get_DefaultOrderByTemplate();
    public virtual string get_OrderByTemplate();
    public virtual string get_GroupByTemplate();
    public virtual string get_PartitionByTemplate();
    public virtual string get_MaxTemplate();
    public virtual string get_MinTemplate();
    public virtual string get_SumTemplate();
    public virtual string get_AvgTemplate();
    public virtual string get_InTemplate();
    public virtual string get_EqualTemplate();
    public virtual bool IsSingle();
    public virtual ExpressionResult GetExpressionValue(Expression expression, ResolveExpressType resolveType);
    internal string GetFilters(Type type);
    public virtual string ToSqlString();
    public virtual void AppendFilter();
    private void AppendTableFilter(SqlFilterItem item);
    private string ReplaceFilterColumnName(string sql, Type filterType, string shortName);
    private string GetSql(Expression exp, bool isSingle);
    public virtual string GetExternalOrderBy(string externalOrderBy);
    public virtual string ToCountSql(string sql);
    public virtual string ToPageSql(string sql, Nullable`1<int> take, Nullable`1<int> skip, bool isExternal);
    public virtual string ToPageSql2(string sql, Nullable`1<int> pageIndex, Nullable`1<int> pageSize, bool isExternal);
    public virtual string GetSelectByItems(List`1<KeyValuePair`2<string, JoinMapper>> items);
    public virtual string ToJoinString(JoinQueryInfo joinInfo);
    public virtual void Clear();
    public virtual bool IsComplexModel(string sql);
    public string GetSqlQuerySql(string result);
    protected virtual string ReplaceHints(string result);
    protected string SubToListMethod(string result);
    [CompilerGeneratedAttribute]
public string get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(string value);
    public virtual string get_GetSelectValue();
    public virtual string GetSelectValueByExpression();
    public virtual string GetSelectValueByString();
    private string GetSelectStringByColumnInfo(EntityColumnInfo it, string pre);
    public virtual string get_GetWhereValueString();
    public virtual string get_GetJoinValueString();
    [CompilerGeneratedAttribute]
public virtual string get_MasterDbTableName();
    [CompilerGeneratedAttribute]
public virtual void set_MasterDbTableName(string value);
    public virtual string get_GetTableNameString();
    public virtual string get_GetOrderByString();
    public virtual string get_GetGroupByString();
    [CompilerGeneratedAttribute]
internal List`1<QueryableFormat> get_QueryableFormats();
    [CompilerGeneratedAttribute]
internal void set_QueryableFormats(List`1<QueryableFormat> value);
    [CompilerGeneratedAttribute]
internal bool get_IsClone();
    [CompilerGeneratedAttribute]
internal void set_IsClone(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoCheckInclude();
    [CompilerGeneratedAttribute]
public void set_NoCheckInclude(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsSelectNoAll();
    [CompilerGeneratedAttribute]
public virtual void set_IsSelectNoAll(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AutoAppendedColumns();
    [CompilerGeneratedAttribute]
public void set_AutoAppendedColumns(List`1<string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_MappingKeys();
    [CompilerGeneratedAttribute]
public void set_MappingKeys(Dictionary`2<string, string> value);
    private string GetTableName(string entityName);
    public void CheckExpression(Expression expression, string methodName);
    public void CheckExpressionNew(Expression expression, string methodName);
    private bool IsSingleSubToList();
    private static bool HasAppText(string result);
    [CompilerGeneratedAttribute]
private bool <AppendFilter>b__243_1(SqlFilterItem it);
    [CompilerGeneratedAttribute]
private bool <AppendFilter>b__243_3(SqlFilterItem it);
    [CompilerGeneratedAttribute]
private string <GetSelectByItems>b__251_0(KeyValuePair`2<string, JoinMapper> it);
    [CompilerGeneratedAttribute]
private string <ReplaceHints>b__256_0(Match it);
    [CompilerGeneratedAttribute]
private bool <GetSelectValueByExpression>b__264_0(string it);
    [CompilerGeneratedAttribute]
private bool <GetSelectValueByString>b__265_3(JoinQueryInfo it);
    [CompilerGeneratedAttribute]
private bool <GetSelectValueByString>b__265_4(KeyValuePair`2<string, string> it);
    [CompilerGeneratedAttribute]
private bool <GetSelectValueByString>b__265_1(EntityColumnInfo c);
    [CompilerGeneratedAttribute]
private string <get_GetJoinValueString>b__270_0(JoinQueryInfo it);
    [CompilerGeneratedAttribute]
private bool <get_GetTableNameString>b__276_3(KeyValuePair`2<string, string> it);
    [CompilerGeneratedAttribute]
private bool <get_GetTableNameString>b__276_0(KeyValuePair`2<string, string> it);
    [CompilerGeneratedAttribute]
private string <get_GetTableNameString>b__276_1(KeyValuePair`2<string, string> it);
    [CompilerGeneratedAttribute]
private string <get_GetTableNameString>b__276_2(KeyValuePair`2<string, string> it);
}
public class SqlSugar.QueryFilterProvider : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SqlFilterItem> <_Filters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SqlFilterItem> <_BackUpFilters>k__BackingField;
    internal SqlSugarProvider Context { get; internal set; }
    private List`1<SqlFilterItem> _Filters { get; private set; }
    private List`1<SqlFilterItem> _BackUpFilters { get; private set; }
    public List`1<SqlFilterItem> GeFilterList { get; }
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
private List`1<SqlFilterItem> get__Filters();
    [CompilerGeneratedAttribute]
private void set__Filters(List`1<SqlFilterItem> value);
    [CompilerGeneratedAttribute]
private List`1<SqlFilterItem> get__BackUpFilters();
    [CompilerGeneratedAttribute]
private void set__BackUpFilters(List`1<SqlFilterItem> value);
    public bool Any();
    public sealed virtual IFilter Add(SqlFilterItem filter);
    public sealed virtual void Remove(string filterName);
    public sealed virtual List`1<SqlFilterItem> get_GeFilterList();
    public void Clear();
    public void Clear();
    public void Clear(Type[] types);
    public void Clear();
    public void Clear();
    public void ClearAndBackup();
    public void ClearAndBackup();
    public void ClearAndBackup();
    public void ClearAndBackup();
    public void ClearAndBackup(Type[] types);
    public void Restore();
    public QueryFilterProvider AddTableFilter(Expression`1<Func`2<T, bool>> expression, FilterJoinPosition filterJoinType);
    public QueryFilterProvider AddTableFilterIF(bool isAppendFilter, Expression`1<Func`2<T, bool>> expression, FilterJoinPosition filterJoinType);
    public QueryFilterProvider AddTableFilter(Type type, string shortName, FormattableString expString, FilterJoinPosition filterJoinType);
    public QueryFilterProvider AddTableFilter(Type type, Expression expression, FilterJoinPosition filterJoinType);
    public QueryFilterProvider AddTableFilterIF(bool isAppendFilter, Type type, Expression expression, FilterJoinPosition posType);
}
public class SqlSugar.QueryMethodInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <QueryableObj>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <EntityType>k__BackingField;
    public object QueryableObj { get; internal set; }
    public SqlSugarProvider Context { get; internal set; }
    public Type EntityType { get; public set; }
    [CompilerGeneratedAttribute]
public object get_QueryableObj();
    [CompilerGeneratedAttribute]
internal void set_QueryableObj(object value);
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(Type value);
    public QueryMethodInfo MergeTable();
    public QueryMethodInfo AS(string tableName);
    public QueryMethodInfo AS(string tableName, string shortName);
    public QueryMethodInfo OrderBy(List`1<OrderByModel> models);
    public QueryMethodInfo OrderBy(string orderBySql);
    public QueryMethodInfo AddJoinInfo(string tableName, string shortName, string onWhere, JoinType type);
    public QueryMethodInfo AddJoinInfo(string tableName, string shortName, IFuncModel onFunc, JoinType type);
    public QueryMethodInfo AddJoinInfo(List`1<JoinInfoParameter> joinInfoParameters);
    public QueryMethodInfo AddJoinInfo(Type joinEntityType, Dictionary`2<string, Type> keyIsShortName_ValueIsType_Dictionary, FormattableString expOnWhere, JoinType type);
    public QueryMethodInfo AddJoinInfo(Type joinEntityType, string shortName, string onWhere, JoinType type);
    public QueryMethodInfo GroupBy(List`1<GroupByModel> models);
    public QueryMethodInfo GroupBy(string groupBySql);
    public QueryMethodInfo Where(string expShortName, FormattableString expressionString);
    public QueryMethodInfo Where(Dictionary`2<string, Type> keyIsShortName_ValueIsType_Dictionary, FormattableString expressionString);
    public QueryMethodInfo Where(List`1<IConditionalModel> conditionalModels);
    public QueryMethodInfo Where(IFuncModel model);
    public QueryMethodInfo Where(List`1<IConditionalModel> conditionalModels, bool isWrap);
    public QueryMethodInfo Where(string sql, object parameters);
    public QueryMethodInfo Having(IFuncModel model);
    public QueryMethodInfo Having(string sql, object parameters);
    public QueryMethodInfo SplitTable(Func`2<List`1<SplitTableInfo>, IEnumerable`1<SplitTableInfo>> getTableNamesFunc);
    public QueryMethodInfo SplitTable(DateTime begintTime, DateTime endTime);
    public QueryMethodInfo SplitTable();
    public QueryMethodInfo Select(List`1<SelectModel> models);
    public QueryMethodInfo Select(string expShortName, FormattableString expSelect, Type resultType);
    public QueryMethodInfo Select(Dictionary`2<string, Type> keyIsShortName_ValueIsType_Dictionary, FormattableString expSelect, Type resultType);
    public QueryMethodInfo Select(string selectorSql);
    public QueryMethodInfo Select(string selectorSql, Type selectType);
    public QueryMethodInfo IncludesAllFirstLayer(String[] ignoreNavPropertyNames);
    public QueryMethodInfo Includes(string navProperyName);
    public QueryMethodInfo IgnoreColumns(String[] ignoreColumns);
    public QueryMethodInfo Includes(string navProperyName, string thenNavProperyName2);
    public QueryMethodInfo Includes(string navProperyName, string thenNavProperyName2, string thenNavProperyName3);
    public object ToPageList(int pageNumber, int pageSize);
    public object ToPageList(int pageNumber, int pageSize, Int32& count);
    public object ToList();
    public DataTable ToDataTablePage(int pageNumber, int pageSize, Int32& count);
    public DataTable ToDataTable();
    public string ToSqlString();
    public KeyValuePair`2<string, List`1<SugarParameter>> ToSql();
    public object InSingle(object pkValue);
    public bool CreateView(string viewNameFomat);
    public object First();
    public bool Any();
    public object ToTree(string childPropertyName, string parentIdPropertyName, object rootValue, string primaryKeyPropertyName);
    [AsyncStateMachineAttribute("SqlSugar.QueryMethodInfo/<ToPageListAsync>d__57")]
[DebuggerStepThroughAttribute]
public Task`1<object> ToPageListAsync(int pageNumber, int pageSize);
    [AsyncStateMachineAttribute("SqlSugar.QueryMethodInfo/<ToPageListAsync>d__58")]
[DebuggerStepThroughAttribute]
public Task`1<object> ToPageListAsync(int pageNumber, int pageSize, RefAsync`1<int> count);
    [AsyncStateMachineAttribute("SqlSugar.QueryMethodInfo/<ToListAsync>d__59")]
[DebuggerStepThroughAttribute]
public Task`1<object> ToListAsync();
    [AsyncStateMachineAttribute("SqlSugar.QueryMethodInfo/<ToDataTablePageAsync>d__60")]
[DebuggerStepThroughAttribute]
public Task`1<object> ToDataTablePageAsync(int pageNumber, int pageSize, RefAsync`1<int> count);
    [AsyncStateMachineAttribute("SqlSugar.QueryMethodInfo/<ToDataTableAsync>d__61")]
[DebuggerStepThroughAttribute]
public Task`1<object> ToDataTableAsync();
    [AsyncStateMachineAttribute("SqlSugar.QueryMethodInfo/<FirstAsync>d__62")]
[DebuggerStepThroughAttribute]
public Task`1<object> FirstAsync();
    [AsyncStateMachineAttribute("SqlSugar.QueryMethodInfo/<AnyAsync>d__63")]
[DebuggerStepThroughAttribute]
public Task`1<bool> AnyAsync();
    [AsyncStateMachineAttribute("SqlSugar.QueryMethodInfo/<InSingleAsync>d__64")]
[DebuggerStepThroughAttribute]
public Task`1<object> InSingleAsync(object pkValue);
    [AsyncStateMachineAttribute("SqlSugar.QueryMethodInfo/<ToTreeAsync>d__65")]
[DebuggerStepThroughAttribute]
public Task`1<object> ToTreeAsync(string childPropertyName, string parentIdPropertyName, object rootValue, string primaryKeyPropertyName);
    [AsyncStateMachineAttribute("SqlSugar.QueryMethodInfo/<GetTask>d__66")]
[DebuggerStepThroughAttribute]
private static Task`1<object> GetTask(Task task);
}
public class SqlSugar.QuestDBBuilder : SqlBuilderProvider {
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    public string SqlDateNow { get; }
    public string FullSqlDateNow { get; }
    public bool isAutoToLower { get; }
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
    public virtual string get_SqlDateNow();
    public virtual string get_FullSqlDateNow();
    public bool get_isAutoToLower();
    public virtual string GetTranslationColumnName(string propertyName);
    public virtual string GetTranslationColumnName(string entityName, string propertyName);
    public virtual string GetTranslationTableName(string name);
    public virtual string GetUnionFomatSql(string sql);
    [CompilerGeneratedAttribute]
private string <GetTranslationColumnName>b__10_0(string it);
}
public class SqlSugar.QuestDBCodeFirst : CodeFirstProvider {
    protected virtual void ExistLogicEnd(List`1<EntityColumnInfo> dbColumns);
    public virtual void NoExistLogic(EntityInfo entityInfo);
    protected virtual DbColumnInfo EntityColumnToDbColumn(EntityInfo entityInfo, string tableName, EntityColumnInfo item);
    protected virtual void ConvertColumns(List`1<DbColumnInfo> dbColumns);
    protected virtual void ChangeKey(EntityInfo entityInfo, string tableName, EntityColumnInfo item);
}
public class SqlSugar.QuestDBDbBind : DbBindProvider {
    public static List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypesConst;
    public List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypes { get; }
    public List`1<string> StringThrow { get; }
    private static QuestDBDbBind();
    public virtual string GetDbTypeName(string csharpTypeName);
    public virtual string GetPropertyTypeName(string dbTypeName);
    public virtual List`1<KeyValuePair`2<string, CSharpDataType>> get_MappingTypes();
    public virtual List`1<string> get_StringThrow();
}
public class SqlSugar.QuestDBDbFirst : DbFirstProvider {
}
public class SqlSugar.QuestDBDbMaintenance : DbMaintenanceProvider {
    protected string GetDataBaseSql { get; }
    protected string GetColumnInfosByTableNameSql { get; }
    protected string GetTableInfoListSql { get; }
    protected string GetViewInfoListSql { get; }
    protected string CreateDataBaseSql { get; }
    protected string AddPrimaryKeySql { get; }
    protected string AddColumnToTableSql { get; }
    protected string AlterColumnToTableSql { get; }
    protected string BackupDataBaseSql { get; }
    protected string CreateTableSql { get; }
    protected string CreateTableColumn { get; }
    protected string TruncateTableSql { get; }
    protected string BackupTableSql { get; }
    protected string DropTableSql { get; }
    protected string DropColumnToTableSql { get; }
    protected string DropConstraintSql { get; }
    protected string RenameColumnSql { get; }
    protected string AddColumnRemarkSql { get; }
    protected string DeleteColumnRemarkSql { get; }
    protected string IsAnyColumnRemarkSql { get; }
    protected string AddTableRemarkSql { get; }
    protected string DeleteTableRemarkSql { get; }
    protected string IsAnyTableRemarkSql { get; }
    protected string RenameTableSql { get; }
    protected string CreateIndexSql { get; }
    protected string AddDefaultValueSql { get; }
    protected string IsAnyIndexSql { get; }
    protected string IsAnyProcedureSql { get; }
    protected string CheckSystemTablePermissionsSql { get; }
    protected string CreateTableNull { get; }
    protected string CreateTableNotNull { get; }
    protected string CreateTablePirmaryKey { get; }
    protected string CreateTableIdentity { get; }
    protected virtual string get_GetDataBaseSql();
    protected virtual string get_GetColumnInfosByTableNameSql();
    protected virtual string get_GetTableInfoListSql();
    protected virtual string get_GetViewInfoListSql();
    protected virtual string get_CreateDataBaseSql();
    protected virtual string get_AddPrimaryKeySql();
    protected virtual string get_AddColumnToTableSql();
    protected virtual string get_AlterColumnToTableSql();
    protected virtual string get_BackupDataBaseSql();
    protected virtual string get_CreateTableSql();
    protected virtual string get_CreateTableColumn();
    protected virtual string get_TruncateTableSql();
    protected virtual string get_BackupTableSql();
    protected virtual string get_DropTableSql();
    protected virtual string get_DropColumnToTableSql();
    protected virtual string get_DropConstraintSql();
    protected virtual string get_RenameColumnSql();
    protected virtual string get_AddColumnRemarkSql();
    protected virtual string get_DeleteColumnRemarkSql();
    protected virtual string get_IsAnyColumnRemarkSql();
    protected virtual string get_AddTableRemarkSql();
    protected virtual string get_DeleteTableRemarkSql();
    protected virtual string get_IsAnyTableRemarkSql();
    protected virtual string get_RenameTableSql();
    protected virtual string get_CreateIndexSql();
    protected virtual string get_AddDefaultValueSql();
    protected virtual string get_IsAnyIndexSql();
    protected virtual string get_IsAnyProcedureSql();
    protected virtual string get_CheckSystemTablePermissionsSql();
    protected virtual string get_CreateTableNull();
    protected virtual string get_CreateTableNotNull();
    protected virtual string get_CreateTablePirmaryKey();
    protected virtual string get_CreateTableIdentity();
    public virtual bool IsAnySystemTablePermissions();
    public virtual void AddIndex(EntityInfo entityInfo);
    public virtual bool CreateIndex(string tableName, String[] columnNames, bool isUnique);
    public virtual bool CreateIndex(string tableName, String[] columnNames, string IndexName, bool isUnique);
    public virtual bool CreateUniqueIndex(string tableName, String[] columnNames);
    public virtual bool IsAnyIndex(string indexName);
    public virtual List`1<DbTableInfo> GetTableInfoList(bool isCache);
    public virtual bool AddDefaultValue(string tableName, string columnName, string defaultValue);
    public virtual bool AddColumnRemark(string columnName, string tableName, string description);
    public virtual bool AddTableRemark(string tableName, string description);
    public virtual bool UpdateColumn(string tableName, DbColumnInfo columnInfo);
    public virtual bool AddPrimaryKey(string tableName, string columnName);
    public virtual bool CreateDatabase(string databaseName, string databaseDirectory);
    public virtual bool AddRemark(EntityInfo entity);
    public virtual bool CreateTable(string tableName, List`1<DbColumnInfo> columns, bool isCreatePrimaryKey);
    protected virtual string GetCreateTableSql(string tableName, List`1<DbColumnInfo> columns);
    public virtual bool IsAnyConstraint(string constraintName);
    public virtual bool BackupDataBase(string databaseName, string fullFileName);
    public virtual List`1<DbColumnInfo> GetColumnInfosByTableName(string tableName, bool isCache);
    private string GetSchema();
    [CompilerGeneratedAttribute]
private string <CreateTable>b__80_1(DbColumnInfo it);
}
public class SqlSugar.QuestDBDeleteBuilder : DeleteBuilder {
}
public class SqlSugar.QuestDBExpressionContext : ExpressionContext {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    public bool isAutoToLower { get; }
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
    public virtual string GetTranslationText(string name);
    public bool get_isAutoToLower();
    public virtual string GetTranslationTableName(string entityName, bool isMapping);
    public virtual string GetTranslationColumnName(string columnName);
    public virtual string GetDbColumnName(string entityName, string propertyName);
    public string GetValue(object entityValue);
    [CompilerGeneratedAttribute]
private string <GetTranslationColumnName>b__13_0(string it);
}
public class SqlSugar.QuestDBFastBuilder : FastBuilder {
    public static Dictionary`2<string, NpgsqlDbType> PgSqlType;
    private EntityInfo entityInfo;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UpdateSql>k__BackingField;
    public string UpdateSql { get; public set; }
    public QuestDBFastBuilder(EntityInfo entityInfo);
    private static QuestDBFastBuilder();
    [CompilerGeneratedAttribute]
public virtual string get_UpdateSql();
    [CompilerGeneratedAttribute]
public virtual void set_UpdateSql(string value);
    [AsyncStateMachineAttribute("SqlSugar.QuestDBFastBuilder/<ExecuteBulkCopyAsync>d__7")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> ExecuteBulkCopyAsync(DataTable dt);
    private void BulkCopy(DataTable dt, string copyString, NpgsqlConnection conn, List`1<DbColumnInfo> columns);
    [AsyncStateMachineAttribute("SqlSugar.QuestDBFastBuilder/<UpdateByTempAsync>d__9")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> UpdateByTempAsync(string tableName, string tempName, String[] updateColumns, String[] whereColumns);
    [AsyncStateMachineAttribute("SqlSugar.QuestDBFastBuilder/<CreateTempAsync>d__10`1")]
[DebuggerStepThroughAttribute]
public virtual Task CreateTempAsync(DataTable dt);
}
public class SqlSugar.QuestDBInsertBuilder : InsertBuilder {
    public string SqlTemplate { get; }
    public string SqlTemplateBatch { get; }
    public string SqlTemplateBatchUnion { get; }
    public string SqlTemplateBatchSelect { get; }
    public virtual string get_SqlTemplate();
    public virtual string get_SqlTemplateBatch();
    public virtual string get_SqlTemplateBatchUnion();
    public virtual string get_SqlTemplateBatchSelect();
    public virtual string ToSqlString();
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__8_2(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__8_3(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private object <ToSqlString>b__8_4(DbColumnInfo it);
}
public class SqlSugar.QuestDBMethod : DefaultDbMethod {
    public virtual string AggregateCount(MethodCallExpressionModel model);
    public virtual string Contains(MethodCallExpressionModel model);
    public virtual string DateDiff(MethodCallExpressionModel model);
    public virtual string TrueValue();
    public virtual string FalseValue();
    public virtual string IIF(MethodCallExpressionModel model);
    public virtual string DateValue(MethodCallExpressionModel model);
    public virtual string StartsWith(MethodCallExpressionModel model);
    public virtual string EndsWith(MethodCallExpressionModel model);
    public virtual string DateIsSameDay(MethodCallExpressionModel model);
    public virtual string HasValue(MethodCallExpressionModel model);
    public virtual string DateIsSameByType(MethodCallExpressionModel model);
    public virtual string ToDateShort(MethodCallExpressionModel model);
    public virtual string ToDate(MethodCallExpressionModel model);
    public virtual string DateAddByType(MethodCallExpressionModel model);
    public virtual string DateAddDay(MethodCallExpressionModel model);
    public virtual string ToInt32(MethodCallExpressionModel model);
    public virtual string ToInt64(MethodCallExpressionModel model);
    public virtual string ToString(MethodCallExpressionModel model);
    public virtual string ToGuid(MethodCallExpressionModel model);
    public virtual string ToDouble(MethodCallExpressionModel model);
    public virtual string ToBool(MethodCallExpressionModel model);
    public virtual string ToDecimal(MethodCallExpressionModel model);
    public virtual string Length(MethodCallExpressionModel model);
    public virtual string MergeString(String[] strings);
    public virtual string IsNull(MethodCallExpressionModel model);
    public virtual string GetDate();
    public virtual string GetRandom();
    public virtual string EqualTrue(string fieldName);
    public virtual string GetDateString(string dateValue, string format);
}
public class SqlSugar.QuestDBProvider : AdoProvider {
    private static Dictionary`2<Type, NpgsqlDbType> ArrayMapping;
    public IDbConnection Connection { get; public set; }
    private static QuestDBProvider();
    public virtual IDbConnection get_Connection();
    public virtual void set_Connection(IDbConnection value);
    public virtual void BeginTran(string transactionName);
    public virtual void BeginTran(IsolationLevel iso, string transactionName);
    public virtual IDataAdapter GetAdapter();
    public virtual DbCommand GetCommand(string sql, SugarParameter[] parameters);
    public virtual void CheckConnection();
    public virtual void SetCommandToAdapter(IDataAdapter dataAdapter, DbCommand command);
    public virtual IDataParameter[] ToIDbDataParameter(SugarParameter[] parameters);
}
public class SqlSugar.QuestDBQueryable`1 : QueryableProvider`1<T> {
    public virtual ISugarQueryable`1<T> With(string withString);
    public virtual ISugarQueryable`1<T> PartitionBy(string groupFileds);
}
public class SqlSugar.QuestDBQueryable`10 : QueryableProvider`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> {
}
public class SqlSugar.QuestDBQueryable`11 : QueryableProvider`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> {
}
public class SqlSugar.QuestDBQueryable`12 : QueryableProvider`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> {
}
public class SqlSugar.QuestDBQueryable`2 : QueryableProvider`2<T, T2> {
    public ISugarQueryable`2<T, T2> With(string withString);
}
public class SqlSugar.QuestDBQueryable`3 : QueryableProvider`3<T, T2, T3> {
}
public class SqlSugar.QuestDBQueryable`4 : QueryableProvider`4<T, T2, T3, T4> {
}
public class SqlSugar.QuestDBQueryable`5 : QueryableProvider`5<T, T2, T3, T4, T5> {
}
public class SqlSugar.QuestDBQueryable`6 : QueryableProvider`6<T, T2, T3, T4, T5, T6> {
}
public class SqlSugar.QuestDBQueryable`7 : QueryableProvider`7<T, T2, T3, T4, T5, T6, T7> {
}
public class SqlSugar.QuestDBQueryable`8 : QueryableProvider`8<T, T2, T3, T4, T5, T6, T7, T8> {
}
public class SqlSugar.QuestDBQueryable`9 : QueryableProvider`9<T, T2, T3, T4, T5, T6, T7, T8, T9> {
}
public class SqlSugar.QuestDBQueryBuilder : QueryBuilder {
    public string PageTempalte { get; }
    public string DefaultOrderByTemplate { get; }
    public string GetSelectValue { get; }
    public virtual string get_PageTempalte();
    public virtual string get_DefaultOrderByTemplate();
    public virtual bool IsComplexModel(string sql);
    public virtual string ToSqlString();
    private string ToCountSqlString();
    public virtual string ToCountSql(string sql);
    public virtual string get_GetSelectValue();
}
public class SqlSugar.QuestDBUpdateBuilder : UpdateBuilder {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ReSetValueBySqlExpListType>k__BackingField;
    public string ReSetValueBySqlExpListType { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_ReSetValueBySqlExpListType();
    [CompilerGeneratedAttribute]
public virtual void set_ReSetValueBySqlExpListType(string value);
    protected virtual string TomultipleSqlString(List`1<IGrouping`2<int, DbColumnInfo>> groupList);
    private string GetOracleUpdateColums(int i, DbColumnInfo m, bool iswhere);
    public object FormatValue(int i, string name, object value, bool iswhere);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private string <>n__0();
}
public class SqlSugar.QueueItem : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SugarParameter[] <Parameters>k__BackingField;
    public string Sql { get; public set; }
    public SugarParameter[] Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
    [CompilerGeneratedAttribute]
public SugarParameter[] get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(SugarParameter[] value);
}
public class SqlSugar.QueueList : List`1<QueueItem> {
    public void Add(string sql, SugarParameter[] parameters);
    public void Add(string sql, List`1<SugarParameter> parameters);
    public void Clear();
}
public class SqlSugar.RazorColumnInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ColumnDescription>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsPrimarykey>k__BackingField;
    public string DbColumnName { get; public set; }
    public string DataType { get; public set; }
    public int Length { get; public set; }
    public string ColumnDescription { get; public set; }
    public string DefaultValue { get; public set; }
    public bool IsNullable { get; public set; }
    public bool IsIdentity { get; public set; }
    public bool IsPrimarykey { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DbColumnName();
    [CompilerGeneratedAttribute]
public void set_DbColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(string value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    [CompilerGeneratedAttribute]
public string get_ColumnDescription();
    [CompilerGeneratedAttribute]
public void set_ColumnDescription(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsIdentity();
    [CompilerGeneratedAttribute]
public void set_IsIdentity(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPrimarykey();
    [CompilerGeneratedAttribute]
public void set_IsPrimarykey(bool value);
}
public class SqlSugar.RazorFirst : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<KeyValuePair`2<string, string>> <ClassStringList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<string, string> <FormatFileNameFunc>k__BackingField;
    public static string DefaultRazorClassTemplate;
    internal List`1<KeyValuePair`2<string, string>> ClassStringList { get; internal set; }
    internal Func`2<string, string> FormatFileNameFunc { get; internal set; }
    private static RazorFirst();
    [CompilerGeneratedAttribute]
internal List`1<KeyValuePair`2<string, string>> get_ClassStringList();
    [CompilerGeneratedAttribute]
internal void set_ClassStringList(List`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
internal Func`2<string, string> get_FormatFileNameFunc();
    [CompilerGeneratedAttribute]
internal void set_FormatFileNameFunc(Func`2<string, string> value);
    public void CreateClassFile(string directoryPath);
    public List`1<KeyValuePair`2<string, string>> GetClassStringList();
}
public class SqlSugar.RazorTableInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbTableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbObjectType <DbObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<RazorColumnInfo> <Columns>k__BackingField;
    public string DbTableName { get; public set; }
    public string ClassName { get; public set; }
    public string Description { get; public set; }
    public DbObjectType DbObjectType { get; public set; }
    public List`1<RazorColumnInfo> Columns { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DbTableName();
    [CompilerGeneratedAttribute]
public void set_DbTableName(string value);
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public DbObjectType get_DbObjectType();
    [CompilerGeneratedAttribute]
public void set_DbObjectType(DbObjectType value);
    [CompilerGeneratedAttribute]
public List`1<RazorColumnInfo> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(List`1<RazorColumnInfo> value);
}
public class SqlSugar.RefAsync`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <Value>k__BackingField;
    public T Value { get; public set; }
    public RefAsync`1(T value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    public virtual string ToString();
    public static T op_Implicit(RefAsync`1<T> r);
    public static RefAsync`1<T> op_Implicit(T value);
}
[ExtensionAttribute]
public static class SqlSugar.ReflectionExtensions : object {
    [ExtensionAttribute]
public static Type GetTypeInfo(Type typeInfo);
    [ExtensionAttribute]
public static Type[] GetGenericArguments(Type type);
    [ExtensionAttribute]
public static bool IsGenericType(Type type);
    [ExtensionAttribute]
public static PropertyInfo[] GetProperties(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetProperty(Type type, string name);
    [ExtensionAttribute]
public static FieldInfo GetField(Type type, string name);
    [ExtensionAttribute]
public static bool IsEnum(Type type);
    [ExtensionAttribute]
public static MethodInfo GetMethod(Type type, string name);
    [ExtensionAttribute]
public static MethodInfo GetMethod(Type type, string name, Type[] types);
    [ExtensionAttribute]
public static ConstructorInfo GetConstructor(Type type, Type[] types);
    [ExtensionAttribute]
public static bool IsValueType(Type type);
    [ExtensionAttribute]
public static bool IsEntity(Type type);
    [ExtensionAttribute]
public static Type ReflectedType(MethodInfo method);
}
public class SqlSugar.ReflectionInoCacheService : object {
    public sealed virtual void Add(string key, V value);
    public sealed virtual void Add(string key, V value, int cacheDurationInSeconds);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual V Get(string key);
    public sealed virtual IEnumerable`1<string> GetAllKey();
    public sealed virtual V GetOrCreate(string cacheKey, Func`1<V> create, int cacheDurationInSeconds);
    public sealed virtual void Remove(string key);
}
[DefaultMemberAttribute("Item")]
public class SqlSugar.ReflectionInoCore`1 : object {
    private ConcurrentDictionary`2<string, V> InstanceCache;
    private static ReflectionInoCore`1<V> _instance;
    private static object _instanceLock;
    public V Item { get; }
    private static ReflectionInoCore`1();
    public V get_Item(string key);
    public bool ContainsKey(string key);
    public V Get(string key);
    public static ReflectionInoCore`1<V> GetInstance();
    public void Add(string key, V value);
    public void Add(string key, V value, int cacheDurationInSeconds);
    public void Remove(string key);
    public void RemoveAllCache();
    public IEnumerable`1<string> GetAllKey();
    public V GetOrCreate(string cacheKey, Func`1<V> create);
}
internal static class SqlSugar.ReflectionInoHelper : object {
    private static List`1<Action> removeActions;
    private static ReflectionInoHelper();
    internal static void AddRemoveFunc(Action removeAction);
    public static void RemoveAllCache();
}
public enum SqlSugar.ReportableDateType : Enum {
    public int value__;
    public static ReportableDateType MonthsInLast1years;
    public static ReportableDateType MonthsInLast3years;
    public static ReportableDateType MonthsInLast10years;
    public static ReportableDateType years1;
    public static ReportableDateType years3;
    public static ReportableDateType years10;
}
public class SqlSugar.ReportableProvider`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    private List`1<T> datas;
    private List`1<DateTime> dates;
    private bool isDates;
    internal QueryBuilder queryBuilder;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private InsertBuilder <formatBuilder>k__BackingField;
    private bool _isOnlySelectEntity;
    public SqlSugarProvider Context { get; public set; }
    internal InsertBuilder formatBuilder { get; internal set; }
    public string GetNextSql { get; }
    public ReportableProvider`1(T data);
    public ReportableProvider`1(List`1<T> list);
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal InsertBuilder get_formatBuilder();
    [CompilerGeneratedAttribute]
internal void set_formatBuilder(InsertBuilder value);
    public sealed virtual ISugarQueryable`1<T> ToQueryable();
    public sealed virtual ISugarQueryable`1<SingleColumnEntity`1<Y>> ToQueryable();
    public sealed virtual ISugarQueryable`1<SingleColumnEntity`1<Y>> ToQueryable(bool isOnlySelectEntity);
    private void Each(StringBuilder sb, List`1<Y> list);
    private void ClassMethod(Y data, StringBuilder sb, bool isLast);
    private object GetSelect(EntityColumnInfo it, Y data);
    private void NoClassMethod(Y data, StringBuilder sb, bool isLast);
    public string get_GetNextSql();
    private void Init();
    private List`1<DateTime> GetYears(int v);
    private List`1<DateTime> GetMonths(int v);
    private object FormatValue(object value, EntityColumnInfo entityColumnInfo);
}
public class SqlSugar.ReSetValueBySqlExpListModel : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<ReSetValueBySqlExpListModelType> <Type>k__BackingField;
    public string DbColumnName { get; public set; }
    public string Sql { get; public set; }
    public Nullable`1<ReSetValueBySqlExpListModelType> Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DbColumnName();
    [CompilerGeneratedAttribute]
public void set_DbColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReSetValueBySqlExpListModelType> get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Nullable`1<ReSetValueBySqlExpListModelType> value);
}
public enum SqlSugar.ReSetValueBySqlExpListModelType : Enum {
    public int value__;
    public static ReSetValueBySqlExpListModelType Default;
    public static ReSetValueBySqlExpListModelType List;
}
public enum SqlSugar.ResolveExpressType : Enum {
    public int value__;
    public static ResolveExpressType None;
    public static ResolveExpressType WhereSingle;
    public static ResolveExpressType WhereMultiple;
    public static ResolveExpressType SelectSingle;
    public static ResolveExpressType SelectMultiple;
    public static ResolveExpressType FieldSingle;
    public static ResolveExpressType FieldMultiple;
    public static ResolveExpressType Join;
    public static ResolveExpressType ArraySingle;
    public static ResolveExpressType ArrayMultiple;
    public static ResolveExpressType Update;
}
public enum SqlSugar.SampleByUnit : Enum {
    public int value__;
    public static SampleByUnit Second;
    public static SampleByUnit Minute;
    public static SampleByUnit Hour;
    public static SampleByUnit Day;
    public static SampleByUnit Month;
    public static SampleByUnit Year;
    public static SampleByUnit Millisecond;
    public static SampleByUnit Microsecond;
}
public class SqlSugar.SaveableProvider`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    public List`1<T> saveObjects;
    public List`1<T> existsObjects;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IInsertable`1<T> <insertable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IUpdateable`1<T> <updateable>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public List`1<T> insertObjects { get; }
    public List`1<T> updatObjects { get; }
    public IInsertable`1<T> insertable { get; public set; }
    public IUpdateable`1<T> updateable { get; public set; }
    public EntityInfo EntityInfo { get; }
    internal SaveableProvider`1(SqlSugarProvider context, List`1<T> saveObjects);
    internal SaveableProvider`1(SqlSugarProvider context, T saveObject);
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    public List`1<T> get_insertObjects();
    public List`1<T> get_updatObjects();
    [CompilerGeneratedAttribute]
public IInsertable`1<T> get_insertable();
    [CompilerGeneratedAttribute]
public void set_insertable(IInsertable`1<T> value);
    [CompilerGeneratedAttribute]
public IUpdateable`1<T> get_updateable();
    [CompilerGeneratedAttribute]
public void set_updateable(IUpdateable`1<T> value);
    public EntityInfo get_EntityInfo();
    public sealed virtual int ExecuteCommand();
    public sealed virtual T ExecuteReturnEntity();
    public sealed virtual List`1<T> ExecuteReturnList();
    public sealed virtual Task`1<int> ExecuteCommandAsync();
    public sealed virtual Task`1<T> ExecuteReturnEntityAsync();
    public sealed virtual Task`1<List`1<T>> ExecuteReturnListAsync();
    public sealed virtual ISaveable`1<T> InsertColumns(Expression`1<Func`2<T, object>> columns);
    public sealed virtual ISaveable`1<T> EnableDiffLogEvent(object businessData);
    public sealed virtual ISaveable`1<T> RemoveDataCache();
    public sealed virtual ISaveable`1<T> InsertIgnoreColumns(Expression`1<Func`2<T, object>> columns);
    public sealed virtual ISaveable`1<T> UpdateColumns(Expression`1<Func`2<T, object>> columns);
    public sealed virtual ISaveable`1<T> UpdateIgnoreColumns(Expression`1<Func`2<T, object>> columns);
    public sealed virtual ISaveable`1<T> UpdateWhereColumns(Expression`1<Func`2<T, object>> columns);
    protected virtual List`1<string> GetPrimaryKeys();
    private void LoadInsertable();
    private void LoadUpdateable();
}
public class SqlSugar.SchemaInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SchemaName>k__BackingField;
    public string TableName { get; public set; }
    public string SchemaName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
}
public class SqlSugar.SelectModel : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AsName>k__BackingField;
    public object FieldName { get; public set; }
    [ObsoleteAttribute("名字拼错使用FieldName")]
public object FiledName { get; public set; }
    public string AsName { get; public set; }
    [CompilerGeneratedAttribute]
public object get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(object value);
    public object get_FiledName();
    public void set_FiledName(object value);
    [CompilerGeneratedAttribute]
public string get_AsName();
    [CompilerGeneratedAttribute]
public void set_AsName(string value);
    public static List`1<SelectModel> Create(SelectModel[] SelectModels);
}
public class SqlSugar.SerializeService : object {
    public sealed virtual string SerializeObject(object value);
    public sealed virtual string SugarSerializeObject(object value);
    public sealed virtual T DeserializeObject(string value);
}
public class SqlSugar.SimpleClient`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlSugarClient <Context>k__BackingField;
    public ISqlSugarClient Context { get; public set; }
    public SimpleClient`1(ISqlSugarClient context);
    [CompilerGeneratedAttribute]
public virtual ISqlSugarClient get_Context();
    [CompilerGeneratedAttribute]
public virtual void set_Context(ISqlSugarClient value);
    public virtual ITenant AsTenant();
    public virtual ISqlSugarClient AsSugarClient();
    public sealed virtual SimpleClient`1<ChangeType> Change();
    public sealed virtual SimpleClient`1<T> CopyNew();
    public virtual RepositoryType CopyNew();
    public virtual RepositoryType CopyNew(IServiceProvider serviceProvider);
    private object handleDependencies(Type type, IServiceProvider serviceProvider, bool needNewCopy);
    private ISugarRepository setContext(ISugarRepository sugarRepository, bool needNewCopy);
    private bool IsAssignableToBaseRepository(Type type);
    public virtual RepositoryType ChangeRepository();
    public virtual RepositoryType ChangeRepository(IServiceProvider serviceProvider);
    public virtual ISugarQueryable`1<T> AsQueryable();
    public virtual IInsertable`1<T> AsInsertable(T insertObj);
    public virtual IInsertable`1<T> AsInsertable(T[] insertObjs);
    public virtual IInsertable`1<T> AsInsertable(List`1<T> insertObjs);
    public virtual IUpdateable`1<T> AsUpdateable(T updateObj);
    public virtual IUpdateable`1<T> AsUpdateable(T[] updateObjs);
    public virtual IUpdateable`1<T> AsUpdateable(List`1<T> updateObjs);
    public virtual IUpdateable`1<T> AsUpdateable();
    public virtual IDeleteable`1<T> AsDeleteable();
    public virtual T GetById(object id);
    public virtual List`1<T> GetList();
    public virtual List`1<T> GetList(Expression`1<Func`2<T, bool>> whereExpression);
    public virtual T GetSingle(Expression`1<Func`2<T, bool>> whereExpression);
    public virtual T GetFirst(Expression`1<Func`2<T, bool>> whereExpression);
    public virtual List`1<T> GetPageList(Expression`1<Func`2<T, bool>> whereExpression, PageModel page);
    public virtual List`1<T> GetPageList(Expression`1<Func`2<T, bool>> whereExpression, PageModel page, Expression`1<Func`2<T, object>> orderByExpression, OrderByType orderByType);
    public virtual List`1<T> GetPageList(List`1<IConditionalModel> conditionalList, PageModel page);
    public virtual List`1<T> GetPageList(List`1<IConditionalModel> conditionalList, PageModel page, Expression`1<Func`2<T, object>> orderByExpression, OrderByType orderByType);
    public virtual bool IsAny(Expression`1<Func`2<T, bool>> whereExpression);
    public virtual int Count(Expression`1<Func`2<T, bool>> whereExpression);
    public virtual bool Insert(T insertObj);
    public virtual bool InsertOrUpdate(T data);
    public virtual bool InsertOrUpdate(List`1<T> datas);
    public virtual int InsertReturnIdentity(T insertObj);
    public virtual long InsertReturnBigIdentity(T insertObj);
    public virtual long InsertReturnSnowflakeId(T insertObj);
    public virtual List`1<long> InsertReturnSnowflakeId(List`1<T> insertObjs);
    public virtual Task`1<long> InsertReturnSnowflakeIdAsync(T insertObj);
    public virtual Task`1<List`1<long>> InsertReturnSnowflakeIdAsync(List`1<T> insertObjs);
    public virtual T InsertReturnEntity(T insertObj);
    public virtual bool InsertRange(T[] insertObjs);
    public virtual bool InsertRange(List`1<T> insertObjs);
    public virtual bool Update(T updateObj);
    public virtual bool UpdateRange(T[] updateObjs);
    public virtual bool UpdateRange(List`1<T> updateObjs);
    public virtual bool Update(Expression`1<Func`2<T, T>> columns, Expression`1<Func`2<T, bool>> whereExpression);
    public virtual bool UpdateSetColumnsTrue(Expression`1<Func`2<T, T>> columns, Expression`1<Func`2<T, bool>> whereExpression);
    public virtual bool Delete(T deleteObj);
    public virtual bool Delete(List`1<T> deleteObjs);
    public virtual bool Delete(Expression`1<Func`2<T, bool>> whereExpression);
    public virtual bool DeleteById(object id);
    public virtual bool DeleteByIds(Object[] ids);
    public virtual Task`1<T> GetByIdAsync(object id);
    public virtual Task`1<List`1<T>> GetListAsync();
    public virtual Task`1<List`1<T>> GetListAsync(Expression`1<Func`2<T, bool>> whereExpression);
    public virtual Task`1<T> GetSingleAsync(Expression`1<Func`2<T, bool>> whereExpression);
    public virtual Task`1<T> GetFirstAsync(Expression`1<Func`2<T, bool>> whereExpression);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<GetPageListAsync>d__64")]
[DebuggerStepThroughAttribute]
public virtual Task`1<List`1<T>> GetPageListAsync(Expression`1<Func`2<T, bool>> whereExpression, PageModel page);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<GetPageListAsync>d__65")]
[DebuggerStepThroughAttribute]
public virtual Task`1<List`1<T>> GetPageListAsync(Expression`1<Func`2<T, bool>> whereExpression, PageModel page, Expression`1<Func`2<T, object>> orderByExpression, OrderByType orderByType);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<GetPageListAsync>d__66")]
[DebuggerStepThroughAttribute]
public virtual Task`1<List`1<T>> GetPageListAsync(List`1<IConditionalModel> conditionalList, PageModel page);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<GetPageListAsync>d__67")]
[DebuggerStepThroughAttribute]
public virtual Task`1<List`1<T>> GetPageListAsync(List`1<IConditionalModel> conditionalList, PageModel page, Expression`1<Func`2<T, object>> orderByExpression, OrderByType orderByType);
    public virtual Task`1<bool> IsAnyAsync(Expression`1<Func`2<T, bool>> whereExpression);
    public virtual Task`1<int> CountAsync(Expression`1<Func`2<T, bool>> whereExpression);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<InsertOrUpdateAsync>d__70")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> InsertOrUpdateAsync(T data);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<InsertOrUpdateAsync>d__71")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> InsertOrUpdateAsync(List`1<T> datas);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<InsertAsync>d__72")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> InsertAsync(T insertObj);
    public virtual Task`1<int> InsertReturnIdentityAsync(T insertObj);
    public virtual Task`1<long> InsertReturnBigIdentityAsync(T insertObj);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<InsertReturnEntityAsync>d__75")]
[DebuggerStepThroughAttribute]
public virtual Task`1<T> InsertReturnEntityAsync(T insertObj);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<InsertRangeAsync>d__76")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> InsertRangeAsync(T[] insertObjs);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<InsertRangeAsync>d__77")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> InsertRangeAsync(List`1<T> insertObjs);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<UpdateAsync>d__78")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> UpdateAsync(T updateObj);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<UpdateRangeAsync>d__79")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> UpdateRangeAsync(T[] updateObjs);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<UpdateRangeAsync>d__80")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> UpdateRangeAsync(List`1<T> updateObjs);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<UpdateAsync>d__81")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> UpdateAsync(Expression`1<Func`2<T, T>> columns, Expression`1<Func`2<T, bool>> whereExpression);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<UpdateSetColumnsTrueAsync>d__82")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> UpdateSetColumnsTrueAsync(Expression`1<Func`2<T, T>> columns, Expression`1<Func`2<T, bool>> whereExpression);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<DeleteAsync>d__83")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> DeleteAsync(T deleteObj);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<DeleteAsync>d__84")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> DeleteAsync(List`1<T> deleteObjs);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<DeleteAsync>d__85")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> DeleteAsync(Expression`1<Func`2<T, bool>> whereExpression);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<DeleteByIdAsync>d__86")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> DeleteByIdAsync(object id);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<DeleteByIdsAsync>d__87")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> DeleteByIdsAsync(Object[] ids);
    public virtual Task`1<long> InsertReturnSnowflakeIdAsync(T insertObj, CancellationToken cancellationToken);
    public virtual Task`1<List`1<long>> InsertReturnSnowflakeIdAsync(List`1<T> insertObjs, CancellationToken cancellationToken);
    public virtual Task`1<T> GetByIdAsync(object id, CancellationToken cancellationToken);
    public virtual Task`1<List`1<T>> GetListAsync(CancellationToken cancellationToken);
    public virtual Task`1<List`1<T>> GetListAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public virtual Task`1<T> GetSingleAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public virtual Task`1<T> GetFirstAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<GetPageListAsync>d__95")]
[DebuggerStepThroughAttribute]
public virtual Task`1<List`1<T>> GetPageListAsync(Expression`1<Func`2<T, bool>> whereExpression, PageModel page, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<GetPageListAsync>d__96")]
[DebuggerStepThroughAttribute]
public virtual Task`1<List`1<T>> GetPageListAsync(Expression`1<Func`2<T, bool>> whereExpression, PageModel page, Expression`1<Func`2<T, object>> orderByExpression, OrderByType orderByType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<GetPageListAsync>d__97")]
[DebuggerStepThroughAttribute]
public virtual Task`1<List`1<T>> GetPageListAsync(List`1<IConditionalModel> conditionalList, PageModel page, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<GetPageListAsync>d__98")]
[DebuggerStepThroughAttribute]
public virtual Task`1<List`1<T>> GetPageListAsync(List`1<IConditionalModel> conditionalList, PageModel page, Expression`1<Func`2<T, object>> orderByExpression, OrderByType orderByType, CancellationToken cancellationToken);
    public virtual Task`1<bool> IsAnyAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public virtual Task`1<int> CountAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<InsertOrUpdateAsync>d__101")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> InsertOrUpdateAsync(T data, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<InsertOrUpdateAsync>d__102")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> InsertOrUpdateAsync(List`1<T> datas, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<InsertAsync>d__103")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> InsertAsync(T insertObj, CancellationToken cancellationToken);
    public virtual Task`1<int> InsertReturnIdentityAsync(T insertObj, CancellationToken cancellationToken);
    public virtual Task`1<long> InsertReturnBigIdentityAsync(T insertObj, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<InsertReturnEntityAsync>d__106")]
[DebuggerStepThroughAttribute]
public virtual Task`1<T> InsertReturnEntityAsync(T insertObj, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<InsertRangeAsync>d__107")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> InsertRangeAsync(T[] insertObjs, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<InsertRangeAsync>d__108")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> InsertRangeAsync(List`1<T> insertObjs, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<UpdateAsync>d__109")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> UpdateAsync(T updateObj, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<UpdateRangeAsync>d__110")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> UpdateRangeAsync(T[] updateObjs, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<UpdateRangeAsync>d__111")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> UpdateRangeAsync(List`1<T> updateObjs, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<UpdateAsync>d__112")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> UpdateAsync(Expression`1<Func`2<T, T>> columns, Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<UpdateSetColumnsTrueAsync>d__113")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> UpdateSetColumnsTrueAsync(Expression`1<Func`2<T, T>> columns, Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<DeleteAsync>d__114")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> DeleteAsync(T deleteObj, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<DeleteAsync>d__115")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> DeleteAsync(List`1<T> deleteObjs, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<DeleteAsync>d__116")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> DeleteAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<DeleteByIdAsync>d__117")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> DeleteByIdAsync(object id, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.SimpleClient`1/<DeleteByIdsAsync>d__118")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> DeleteByIdsAsync(Object[] ids, CancellationToken cancellationToken);
    public sealed virtual int Count(List`1<IConditionalModel> conditionalModels);
    public sealed virtual bool Delete(List`1<IConditionalModel> conditionalModels);
    public sealed virtual List`1<T> GetList(Expression`1<Func`2<T, bool>> whereExpression, List`1<OrderByModel> orderByModels);
    public sealed virtual List`1<T> GetList(List`1<IConditionalModel> conditionalList);
    public sealed virtual List`1<T> GetList(List`1<IConditionalModel> conditionalList, List`1<OrderByModel> orderByModels);
    public sealed virtual List`1<T> GetPageList(Expression`1<Func`2<T, bool>> whereExpression, PageModel page, List`1<OrderByModel> orderByModels);
    public sealed virtual List`1<T> GetPageList(List`1<IConditionalModel> conditionalList, PageModel page, List`1<OrderByModel> orderByModels);
    public sealed virtual T GetSingle(List`1<IConditionalModel> conditionalModels);
    public sealed virtual T GetFirst(List`1<IConditionalModel> conditionalModels);
    public sealed virtual bool IsAny(List`1<IConditionalModel> conditionalModels);
    public T GetFirst(Expression`1<Func`2<T, bool>> whereExpression, List`1<OrderByModel> orderByModels);
    public sealed virtual T GetFirst(List`1<IConditionalModel> conditionalModels, List`1<OrderByModel> orderByModels);
}
public class SqlSugar.SingleColumnEntity`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <ColumnName>k__BackingField;
    public T ColumnName { get; public set; }
    [CompilerGeneratedAttribute]
public T get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(T value);
}
public class SqlSugar.SlaveConnectionConfig : object {
    public int HitRate;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ConnectionString>k__BackingField;
    public string ConnectionString { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
}
public class SqlSugar.SnowFlakeSingle : object {
    private static object LockObject;
    private static IdWorker worker;
    public static int WorkId;
    public static int DatacenterId;
    public static IdWorker Instance { get; }
    public static IdWorker instance { get; }
    private static SnowFlakeSingle();
    public static IdWorker get_Instance();
    public static IdWorker get_instance();
}
public class SqlSugar.SplitCodeFirstProvider : object {
    public SqlSugarProvider Context;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <DefaultLength>k__BackingField;
    public int DefaultLength { get; public set; }
    [CompilerGeneratedAttribute]
public int get_DefaultLength();
    [CompilerGeneratedAttribute]
public void set_DefaultLength(int value);
    public void InitTables();
    public void InitTables(Type type);
    private void _InitTables(Type type);
    public void InitTables(Type[] types);
}
public class SqlSugar.SplitFastest`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FastestProvider`1<T> <FastestProvider>k__BackingField;
    public FastestProvider`1<T> FastestProvider { get; public set; }
    public SqlSugarProvider Context { get; }
    public EntityInfo EntityInfo { get; }
    [CompilerGeneratedAttribute]
public FastestProvider`1<T> get_FastestProvider();
    [CompilerGeneratedAttribute]
public void set_FastestProvider(FastestProvider`1<T> value);
    public SqlSugarProvider get_Context();
    public EntityInfo get_EntityInfo();
    public int BulkCopy(List`1<T> datas);
    [AsyncStateMachineAttribute("SqlSugar.SplitFastest`1/<BulkCopyAsync>d__9")]
[DebuggerStepThroughAttribute]
public Task`1<int> BulkCopyAsync(List`1<T> datas);
    public int BulkUpdate(List`1<T> datas);
    [AsyncStateMachineAttribute("SqlSugar.SplitFastest`1/<BulkUpdateAsync>d__11")]
[DebuggerStepThroughAttribute]
public Task`1<int> BulkUpdateAsync(List`1<T> datas);
    public int BulkUpdate(List`1<T> datas, String[] wherColumns, String[] updateColumns);
    [AsyncStateMachineAttribute("SqlSugar.SplitFastest`1/<BulkUpdateAsync>d__13")]
[DebuggerStepThroughAttribute]
public Task`1<int> BulkUpdateAsync(List`1<T> datas, String[] wherColumns, String[] updateColumns);
    private void CreateTable(string tableName);
    private void GroupDataList(List`1<T> datas, List`1& groupModels, Int32& result);
}
[AttributeUsageAttribute("128")]
public class SqlSugar.SplitFieldAttribute : Attribute {
}
public class SqlSugar.SplitInsertable`1 : object {
    private static object SplitLockObj;
    public SqlSugarProvider Context;
    internal SplitTableContext Helper;
    public EntityInfo EntityInfo;
    public SplitType SplitType;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IInsertable`1<T> <Inserable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<KeyValuePair`2<string, object>> <TableNames>k__BackingField;
    internal IInsertable`1<T> Inserable { get; internal set; }
    internal List`1<KeyValuePair`2<string, object>> TableNames { get; internal set; }
    private static SplitInsertable`1();
    [CompilerGeneratedAttribute]
internal IInsertable`1<T> get_Inserable();
    [CompilerGeneratedAttribute]
internal void set_Inserable(IInsertable`1<T> value);
    [CompilerGeneratedAttribute]
internal List`1<KeyValuePair`2<string, object>> get_TableNames();
    [CompilerGeneratedAttribute]
internal void set_TableNames(List`1<KeyValuePair`2<string, object>> value);
    public int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.SplitInsertable`1/<ExecuteCommandAsync>d__14")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
    public List`1<long> ExecuteReturnSnowflakeIdList();
    [AsyncStateMachineAttribute("SqlSugar.SplitInsertable`1/<ExecuteReturnSnowflakeIdListAsync>d__16")]
[DebuggerStepThroughAttribute]
public Task`1<List`1<long>> ExecuteReturnSnowflakeIdListAsync();
    public long ExecuteReturnSnowflakeId();
    [AsyncStateMachineAttribute("SqlSugar.SplitInsertable`1/<ExecuteReturnSnowflakeIdAsync>d__18")]
[DebuggerStepThroughAttribute]
public Task`1<long> ExecuteReturnSnowflakeIdAsync();
    internal int _ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.SplitInsertable`1/<_ExecuteCommandAsync>d__20")]
[DebuggerStepThroughAttribute]
internal Task`1<int> _ExecuteCommandAsync();
    internal List`1<long> _ExecuteReturnSnowflakeIdList();
    [AsyncStateMachineAttribute("SqlSugar.SplitInsertable`1/<_ExecuteReturnSnowflakeIdListAsync>d__22")]
[DebuggerStepThroughAttribute]
internal Task`1<List`1<long>> _ExecuteReturnSnowflakeIdListAsync();
    private void CreateTable();
}
public class SqlSugar.SplitMethodInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Context>k__BackingField;
    internal object Context { get; internal set; }
    [CompilerGeneratedAttribute]
internal object get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(object value);
    public int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.SplitMethodInfo/<ExecuteCommandAsync>d__5")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
}
[AttributeUsageAttribute("4")]
public class SqlSugar.SplitTableAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SplitType <SplitType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <CustomSplitTableService>k__BackingField;
    public SplitType SplitType { get; public set; }
    public Type CustomSplitTableService { get; public set; }
    public SplitTableAttribute(SplitType splitType);
    public SplitTableAttribute(SplitType splitType, Type customSplitTableService);
    [CompilerGeneratedAttribute]
public SplitType get_SplitType();
    [CompilerGeneratedAttribute]
public void set_SplitType(SplitType value);
    [CompilerGeneratedAttribute]
public Type get_CustomSplitTableService();
    [CompilerGeneratedAttribute]
public void set_CustomSplitTableService(Type value);
}
public class SqlSugar.SplitTableContext : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <EntityInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISplitTableService <Service>k__BackingField;
    internal SqlSugarProvider Context { get; internal set; }
    internal EntityInfo EntityInfo { get; internal set; }
    internal ISplitTableService Service { get; internal set; }
    internal SplitTableContext(SqlSugarProvider context);
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal EntityInfo get_EntityInfo();
    [CompilerGeneratedAttribute]
internal void set_EntityInfo(EntityInfo value);
    [CompilerGeneratedAttribute]
internal ISplitTableService get_Service();
    [CompilerGeneratedAttribute]
internal void set_Service(ISplitTableService value);
    public List`1<SplitTableInfo> GetTables();
    private List`1<SplitTableInfo> GetCustomGetTables();
    public string GetDefaultTableName();
    public string GetTableName(SplitType splitType);
    public string GetTableName(SplitType splitType, object fieldValue);
    public string GetTableName(object fieldValue);
    public object GetValue(SplitType splitType, object entityValue);
    internal void CheckPrimaryKey();
}
public class SqlSugar.SplitTableContextResult`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<T> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SplitTableContext <Helper>k__BackingField;
    public List`1<T> Items { get; public set; }
    public SplitTableContext Helper { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<T> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<T> value);
    [CompilerGeneratedAttribute]
public SplitTableContext get_Helper();
    [CompilerGeneratedAttribute]
public void set_Helper(SplitTableContext value);
    public string GetTableName();
    public String[] GetTableNames();
    public String[] GetTableNames(SplitType splitType);
}
public class SqlSugar.SplitTableDeleteByObjectProvider`1 : object {
    public ISqlSugarClient Context;
    public DeleteableProvider`1<T> deleteobj;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T[] <deleteObjects>k__BackingField;
    public T[] deleteObjects { get; public set; }
    [CompilerGeneratedAttribute]
public T[] get_deleteObjects();
    [CompilerGeneratedAttribute]
public void set_deleteObjects(T[] value);
    public int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.SplitTableDeleteByObjectProvider`1/<ExecuteCommandAsync>d__7")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
    private void GroupDataList(T[] datas, List`1& groupModels, Int32& result);
}
public class SqlSugar.SplitTableDeleteProvider`1 : object {
    public ISqlSugarClient Context;
    public DeleteableProvider`1<T> deleteobj;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<SplitTableInfo> <Tables>k__BackingField;
    public IEnumerable`1<SplitTableInfo> Tables { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<SplitTableInfo> get_Tables();
    [CompilerGeneratedAttribute]
public void set_Tables(IEnumerable`1<SplitTableInfo> value);
    public int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.SplitTableDeleteProvider`1/<ExecuteCommandAsync>d__7")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
    internal int _ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.SplitTableDeleteProvider`1/<_ExecuteCommandAsync>d__9")]
[DebuggerStepThroughAttribute]
internal Task`1<int> _ExecuteCommandAsync();
    private KeyValuePair`2<string, List`1<SugarParameter>> GetSqlObj(KeyValuePair`2<string, List`1<SugarParameter>> keyValuePair, string asName);
}
[ExtensionAttribute]
public static class SqlSugar.SplitTableExtensions.Extensions : object {
    [ExtensionAttribute]
public static List`1<T> SplitTable(List`1<T> thisValue, Func`2<List`1<SplitTableInfo>, IEnumerable`1<SplitTableInfo>> getTableNamesFunc);
    [ExtensionAttribute]
public static List`1<T> SplitTable(T thisValue, Func`2<List`1<SplitTableInfo>, IEnumerable`1<SplitTableInfo>> getTableNamesFunc);
}
public class SqlSugar.SplitTableInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <Date>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <String>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private decimal <Decimal>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <Long>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Int>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Byte[] <ByteArray>k__BackingField;
    public string TableName { get; public set; }
    public DateTime Date { get; public set; }
    public string String { get; public set; }
    public decimal Decimal { get; public set; }
    public long Long { get; public set; }
    public int Int { get; public set; }
    public Byte[] ByteArray { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(DateTime value);
    [CompilerGeneratedAttribute]
public string get_String();
    [CompilerGeneratedAttribute]
public void set_String(string value);
    [CompilerGeneratedAttribute]
public decimal get_Decimal();
    [CompilerGeneratedAttribute]
public void set_Decimal(decimal value);
    [CompilerGeneratedAttribute]
public long get_Long();
    [CompilerGeneratedAttribute]
public void set_Long(long value);
    [CompilerGeneratedAttribute]
public int get_Int();
    [CompilerGeneratedAttribute]
public void set_Int(int value);
    [CompilerGeneratedAttribute]
public Byte[] get_ByteArray();
    [CompilerGeneratedAttribute]
public void set_ByteArray(Byte[] value);
}
[ExtensionAttribute]
public static class SqlSugar.SplitTableInfoExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<SplitTableInfo> InTableNames(List`1<SplitTableInfo> tables, String[] tableNames);
    [ExtensionAttribute]
public static IEnumerable`1<SplitTableInfo> ContainsTableNames(List`1<SplitTableInfo> tables, String[] tableNames);
    [ExtensionAttribute]
public static IEnumerable`1<SplitTableInfo> ContainsTableNamesIfNullDefaultFirst(List`1<SplitTableInfo> tables, String[] tableNames);
}
public class SqlSugar.SplitTableUpdateByObjectProvider`1 : object {
    public SqlSugarProvider Context;
    public UpdateableProvider`1<T> updateobj;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T[] <UpdateObjects>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<SplitTableInfo> <Tables>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <WhereColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsEnableDiffLogEvent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <BusinessData>k__BackingField;
    public T[] UpdateObjects { get; public set; }
    public IEnumerable`1<SplitTableInfo> Tables { get; public set; }
    internal List`1<string> WhereColumns { get; internal set; }
    internal bool IsEnableDiffLogEvent { get; internal set; }
    internal object BusinessData { get; internal set; }
    [CompilerGeneratedAttribute]
public T[] get_UpdateObjects();
    [CompilerGeneratedAttribute]
public void set_UpdateObjects(T[] value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SplitTableInfo> get_Tables();
    [CompilerGeneratedAttribute]
public void set_Tables(IEnumerable`1<SplitTableInfo> value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_WhereColumns();
    [CompilerGeneratedAttribute]
internal void set_WhereColumns(List`1<string> value);
    [CompilerGeneratedAttribute]
internal bool get_IsEnableDiffLogEvent();
    [CompilerGeneratedAttribute]
internal void set_IsEnableDiffLogEvent(bool value);
    [CompilerGeneratedAttribute]
internal object get_BusinessData();
    [CompilerGeneratedAttribute]
internal void set_BusinessData(object value);
    public int ExecuteCommandWithOptLock(bool isThrowError);
    public int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.SplitTableUpdateByObjectProvider`1/<ExecuteCommandAsync>d__24")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
    [AsyncStateMachineAttribute("SqlSugar.SplitTableUpdateByObjectProvider`1/<ExecuteCommandWithOptLockAsync>d__25")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandWithOptLockAsync(bool isThrowError);
    private String[] GetIgnoreColumns();
    private void GroupDataList(T[] datas, List`1& groupModels, Int32& result);
    private bool IsVersion();
}
public class SqlSugar.SplitTableUpdateProvider`1 : object {
    public SqlSugarProvider Context;
    public UpdateableProvider`1<T> updateobj;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<SplitTableInfo> <Tables>k__BackingField;
    public IEnumerable`1<SplitTableInfo> Tables { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<SplitTableInfo> get_Tables();
    [CompilerGeneratedAttribute]
public void set_Tables(IEnumerable`1<SplitTableInfo> value);
    public int ExecuteCommandWithOptLock(bool isThrowError);
    public int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.SplitTableUpdateProvider`1/<ExecuteCommandWithOptLockAsync>d__8")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandWithOptLockAsync(bool isThrowError);
    [AsyncStateMachineAttribute("SqlSugar.SplitTableUpdateProvider`1/<ExecuteCommandAsync>d__9")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
    private int _ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.SplitTableUpdateProvider`1/<_ExecuteCommandAsync>d__11")]
[DebuggerStepThroughAttribute]
private Task`1<int> _ExecuteCommandAsync();
    private KeyValuePair`2<string, List`1<SugarParameter>> GetSqlObj(KeyValuePair`2<string, List`1<SugarParameter>> keyValuePair, string asName);
}
public enum SqlSugar.SplitType : Enum {
    public int value__;
    public static SplitType Day;
    public static SplitType Week;
    public static SplitType Month;
    public static SplitType Month_6;
    public static SplitType Season;
    public static SplitType Year;
    public static SplitType _Custom01;
    public static SplitType _Custom02;
    public static SplitType _Custom03;
    public static SplitType _Custom04;
    public static SplitType _Custom05;
    public static SplitType _Custom06;
}
public class SqlSugar.SqlBuilderAccessory : object {
    protected DeleteBuilder _DeleteBuilder;
    protected InsertBuilder _InsertBuilder;
    protected QueryBuilder _QueryBuilder;
    protected SqlQueryBuilder _SqlQueryBuilder;
    protected UpdateBuilder _UpdateBuilder;
}
public abstract class SqlSugar.SqlBuilderProvider : SqlBuilderAccessory {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CommandType <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DeleteBuilder <DeleteBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private InsertBuilder <InsertBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private QueryBuilder <QueryBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UpdateBuilder <UpdateBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <SupportReadToken>k__BackingField;
    private String[] SqlSplicingOperator;
    internal int GetParameterNameIndex;
    public SqlSugarProvider Context { get; public set; }
    public CommandType CommandType { get; public set; }
    public DeleteBuilder DeleteBuilder { get; public set; }
    public InsertBuilder InsertBuilder { get; public set; }
    public QueryBuilder QueryBuilder { get; public set; }
    public UpdateBuilder UpdateBuilder { get; public set; }
    public SqlQueryBuilder SqlQueryBuilder { get; public set; }
    public bool SupportReadToken { get; public set; }
    public string SqlParameterKeyWord { get; }
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    public string SqlFalse { get; }
    public string SqlDateNow { get; }
    public string FullSqlDateNow { get; }
    public string SqlSelectAll { get; }
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual CommandType get_CommandType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CommandType(CommandType value);
    [CompilerGeneratedAttribute]
public sealed virtual DeleteBuilder get_DeleteBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeleteBuilder(DeleteBuilder value);
    [CompilerGeneratedAttribute]
public sealed virtual InsertBuilder get_InsertBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InsertBuilder(InsertBuilder value);
    [CompilerGeneratedAttribute]
public sealed virtual QueryBuilder get_QueryBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QueryBuilder(QueryBuilder value);
    [CompilerGeneratedAttribute]
public sealed virtual UpdateBuilder get_UpdateBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UpdateBuilder(UpdateBuilder value);
    public sealed virtual SqlQueryBuilder get_SqlQueryBuilder();
    public sealed virtual void set_SqlQueryBuilder(SqlQueryBuilder value);
    [CompilerGeneratedAttribute]
public virtual bool get_SupportReadToken();
    [CompilerGeneratedAttribute]
public virtual void set_SupportReadToken(bool value);
    public virtual Task`1<bool> GetReaderByToken(IDataReader dataReader, CancellationToken cancellationToken);
    public virtual void ChangeJsonType(SugarParameter paramter);
    public virtual string GetTranslationTableName(string name);
    public virtual string GetTranslationColumnName(string entityName, string propertyName);
    public virtual string GetTranslationColumnName(string propertyName);
    public virtual string GetNoTranslationColumnName(string name);
    public virtual string GetPackTable(string sql, string shortName);
    public virtual string GetDefaultShortName();
    public sealed virtual string GetWhere(string fieldName, string conditionalType, Nullable`1<int> parameterIndex);
    public virtual string GetUnionAllSql(List`1<string> sqlList);
    public virtual string GetUnionSql(List`1<string> sqlList);
    public virtual void RepairReplicationParameters(String& appendSql, SugarParameter[] parameters, int addIndex);
    public virtual string GetUnionFomatSql(string sql);
    public virtual Type GetNullType(string tableName, string columnName);
    public virtual string RemoveParentheses(string sql);
    private static object GetFieldValue(ConditionalModel item);
    public virtual void FormatSaveQueueSql(StringBuilder sqlBuilder);
    public virtual string RemoveN(string sql);
    public sealed virtual string AppendWhereOrAnd(bool isWhere, string sqlString);
    public sealed virtual string AppendHaving(string sqlString);
    public virtual string get_SqlParameterKeyWord();
    public abstract virtual string get_SqlTranslationLeft();
    public abstract virtual string get_SqlTranslationRight();
    public virtual string get_SqlFalse();
    public virtual string get_SqlDateNow();
    public virtual string get_FullSqlDateNow();
    public virtual string get_SqlSelectAll();
    public sealed virtual KeyValuePair`2<string, SugarParameter[]> ConditionalModelToSql(List`1<IConditionalModel> models, int beginIndex);
    private static void Range(StringBuilder builder, List`1<SugarParameter> parameters, ConditionalModel item, int index, string type, string parameterName);
    private static void InLike(StringBuilder builder, List`1<SugarParameter> parameters, ConditionalModel item, int index, string type, string parameterName);
    private static void EqualNull(StringBuilder builder, List`1<SugarParameter> parameters, ConditionalModel item, string type, string temp, string parameterName);
    private static void IsNot(StringBuilder builder, List`1<SugarParameter> parameters, ConditionalModel item, string type, string temp, string parameterName);
    private static void NotIn(StringBuilder builder, List`1<SugarParameter> parameters, ConditionalModel item, string type, string temp, string parameterName);
    private void In(StringBuilder builder, ConditionalModel item, string type, string temp);
    private void InBig(StringBuilder builder, ConditionalModel item, string type, string temp, String[] inArray, int pageSize);
    private string In_GetInValue(ConditionalModel item, String[] inArray);
    private static void Equal(StringBuilder builder, List`1<SugarParameter> parameters, ConditionalModel item, string type, string temp, string parameterName);
    private void BuilderTree(StringBuilder builder, ConditionalTree item, Int32& indexTree, List`1<SugarParameter> parameters, Int32& mainIndex);
    private ConditionalCollections ToConditionalCollections(ConditionalTree item, Int32& indexTree, List`1<SugarParameter> parameters);
    public sealed virtual KeyValuePair`2<string, SugarParameter[]> FuncModelToSql(IFuncModel model);
    private string GetSql(List`1<object> parameters, IDbMethods dbMethods, string methodName, MethodInfo methodInfo, ParameterInfo[] pars, List`1<SugarParameter> resPars);
    private static MethodInfo GetMethod(IDbMethods dbMethods, string methodName);
    private static string GetMethodName(string name, List`1<string> methods);
    private static List`1<string> GetAllMethods(IDbMethods dbMethods);
    private static string GetNoSupportMethodSql(MethodInfo methodInfo);
    private string GetSqlFuncSql(List`1<object> parameters, IDbMethods dbMethods, string methodName, MethodInfo methodInfo, List`1<SugarParameter> resPars);
    private static bool IsToStringFormat(string methodName, List`1<MethodCallExpressionArgs> args);
    private string GetFormatMethodSql(List`1<object> parameters, List`1<SugarParameter> resPars);
    private static string GetNoParameterMehtodSql(IDbMethods dbMethods, MethodInfo methodInfo);
    private static bool IsMergeStringMethod(string methodName);
    private static bool IsSqlFuncMethod(ParameterInfo[] pars);
    private static bool IsFormatMethod(string methodName);
    private static bool IsNoParameter(ParameterInfo[] pars);
    public sealed virtual KeyValuePair`2<string, SugarParameter[]> GroupByModelToSql(List`1<GroupByModel> models);
    public sealed virtual KeyValuePair`2<string, SugarParameter[]> OrderByModelToSql(List`1<OrderByModel> models);
    public sealed virtual KeyValuePair`2<string, SugarParameter[]> SelectModelToSql(List`1<SelectModel> models);
    private string GetAsName(SelectModel orderByModel);
    private void AppendFiledName(StringBuilder sql, SelectModel orderByModel);
    private string GetSqlPart(object value, List`1<SugarParameter> pars);
    private static string GetSqlSplicingOperator(object value);
    private static string GetSqlPartError(object value);
    private string GetSqlPartByObjectFuncModel(object value, List`1<SugarParameter> pars);
    private string GetSqlPartByListObject(object value, List`1<SugarParameter> pars);
    private string GetSqlPartByString(object value, List`1<SugarParameter> pars);
    private string GetSplicingOperator(string valueString);
    private string GetParameterName(List`1<SugarParameter> pars, string valueString);
    private string GetParameterName(List`1<SugarParameter> pars, object parvalue);
    private static bool IsListObject(object value);
    private static bool IsString(object value);
    private static bool IsObjectFunc(object value);
    private bool IsSqlSplicingOperator(object value);
    [CompilerGeneratedAttribute]
private string <GetTranslationColumnName>b__35_0(string it);
}
public class SqlSugar.SqlDataAdapter : object {
    private SqlCommand command;
    private string sql;
    private SqlConnection _sqlConnection;
    public SqlCommand SelectCommand { get; public set; }
    public SqlDataAdapter(SqlCommand command);
    public SqlDataAdapter(string sql, SqlConnection _sqlConnection);
    public SqlCommand get_SelectCommand();
    public void set_SelectCommand(SqlCommand value);
    public void Fill(DataTable dt);
    public sealed virtual void Fill(DataSet ds);
}
public class SqlSugar.SqlFilterItem : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FilterName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<ISqlSugarClient, SqlFilterResult> <FilterValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsJoinQuery>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <type>k__BackingField;
    public string FilterName { get; public set; }
    public Func`2<ISqlSugarClient, SqlFilterResult> FilterValue { get; public set; }
    public bool IsJoinQuery { get; public set; }
    internal Type type { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_FilterName();
    [CompilerGeneratedAttribute]
public void set_FilterName(string value);
    [CompilerGeneratedAttribute]
public Func`2<ISqlSugarClient, SqlFilterResult> get_FilterValue();
    [CompilerGeneratedAttribute]
public void set_FilterValue(Func`2<ISqlSugarClient, SqlFilterResult> value);
    [CompilerGeneratedAttribute]
public bool get_IsJoinQuery();
    [CompilerGeneratedAttribute]
public void set_IsJoinQuery(bool value);
    [CompilerGeneratedAttribute]
internal Type get_type();
    [CompilerGeneratedAttribute]
internal void set_type(Type value);
}
public class SqlSugar.SqlFilterResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Parameters>k__BackingField;
    public string Sql { get; public set; }
    public object Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
    [CompilerGeneratedAttribute]
public object get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(object value);
}
public class SqlSugar.SqlFunc : object {
    public static bool FullTextContains(String[] columnNames, string keyword);
    public static bool FullTextContains(string columnName, string keyword);
    public static int Floor(object value);
    public static int Ceil(object value);
    public static int WeekOfYear(DateTime fieldName);
    public static string Left(string value, int number);
    public static string Right(string value, int number);
    public static string PadLeft(string value, int number, char padChar);
    public static bool Like(string fieldName, string likeValue);
    public static int Modulo(decimal numA, decimal numB);
    public static int CompareTo(decimal numA, decimal numB);
    public static int CompareTo(int numA, int numB);
    public static int CompareTo(string strA, string strB);
    public static int RowNumber(object orderByField, object partitionBy);
    public static int RowNumber(object orderByField);
    public static int Rank(object orderByField, object partitionBy);
    public static int Rank(object orderByField);
    public static int DenseRank(object orderByField, object partitionBy);
    public static int DenseRank(object orderByField);
    public static int RowCount(object countFiledName, object orderByField, object partitionBy);
    public static int RowCount();
    public static TRestult RowSum(TRestult filedName);
    public static TRestult RowSum(TRestult filedName, object orderByField, object partitionBy);
    public static TRestult RowMax(TRestult filedName);
    public static TRestult RowMax(TRestult filedNameobject, object orderByField, object partitionBy);
    public static TRestult RowMin(TRestult filedName);
    public static TRestult RowMin(TRestult filedName, object orderByField, object partitionBy);
    public static TRestult RowAvg(TRestult filedName);
    public static TRestult RowAvg(TRestult filedName, object orderByField, object partitionBy);
    public static string JsonField(object json, string fieldName);
    public static string JsonIndex(object json, int jsonIndex);
    public static string JsonField(object json, string fieldName, string includeFieldName);
    public static string JsonField(object json, string fieldName, string includeFieldName, string ThenIncludeFieldName);
    public static string JsonField(object json, string fieldName, string includeFieldName, string ThenIncludeFieldName, string ThenIncludeFieldName2);
    public static string JsonField(object json, string fieldName, string includeFieldName, string ThenIncludeFieldName, string ThenIncludeFieldName2, string ThenIncludeFieldName3);
    public static bool JsonContainsFieldName(object json, string fieldName);
    public static int JsonArrayLength(object json);
    public static string JsonParse(object json);
    public static bool JsonLike(object json, string likeStr);
    public static T Desc(T value);
    public static T Asc(T value);
    public static int DateDiff(DateType dateType, DateTime littleTime, DateTime bigTime);
    public static bool GreaterThan(object thisValue, object gtValue);
    public static string Stuff(string sourceString, int start, int length, string AddString);
    public static bool GreaterThanOrEqual(object thisValue, object gtValue);
    public static bool GreaterThan_LinqDynamicCore(object thisValue, object ltValue);
    public static bool LessThan(object thisValue, object ltValue);
    public static bool LessThan_LinqDynamicCore(object thisValue, object ltValue);
    public static bool LessThanOrEqual(object thisValue, object ltValue);
    public static bool HasNumber(object thisValue);
    public static bool HasValue(object thisValue);
    public static bool IsNullOrEmpty(object thisValue);
    public static string ToLower(object thisValue);
    public static string ToUpper(object thisValue);
    public static string Trim(object thisValue);
    public static string TrimEnd(object thisValue, string trimChar);
    public static string TrimStart(object thisValue, string trimChar);
    public static bool Contains(string thisValue, string parameterValue);
    public static bool ContainsArray(T[] thisValue, object InField);
    public static bool ContainsArray(List`1<T> thisValue, object InField);
    public static bool ContainsArrayUseSqlParameters(List`1<T> thisValue, object InField);
    public static bool ContainsArrayUseSqlParameters(T[] thisValue, object InField);
    public static bool StartsWith(string thisValue, string parameterValue);
    public static bool EndsWith(string thisValue, string parameterValue);
    public static bool Equals(object thisValue, object parameterValue);
    public static bool EqualsNull(object thisValue, object parameterValue);
    public static bool Exists(string subQueryableName_Or_OneToOnePropertyName);
    public static bool Exists(valueType subQueryableName_Or_OneToOnePropertyName);
    public static bool Exists(string subQueryableName_Or_OneToOnePropertyName, List`1<IConditionalModel> conditionalModels);
    public static bool Exists(valueType subQueryableName_Or_OneToOnePropertyName, List`1<IConditionalModel> conditionalModels);
    public static bool DateIsSame(DateTime date1, DateTime date2);
    public static bool DateIsSame(Nullable`1<DateTime> date1, Nullable`1<DateTime> date2);
    public static bool DateIsSame(DateTime date1, DateTime date2, DateType dataType);
    public static DateTime DateAdd(DateTime date, int addValue, DateType dataType);
    public static DateTimeOffset DateAdd(DateTimeOffset date, int addValue, DateType dataType);
    public static DateTime DateAdd(DateTime date, int addValue);
    public static DateTimeOffset DateAdd(DateTimeOffset date, int addValue);
    public static int DateValue(DateTime date, DateType dataType);
    public static int DateValue(DateTimeOffset date, DateTimeOffset dataType);
    public static bool Between(object value, object start, object end);
    public static TResult IIF(bool isTrue, TResult thenValue, TResult elseValue);
    public static TResult IsNull(TResult thisValue, TResult ifNullValue);
    public static string MergeString(string value1, string value2);
    public static string MergeString(string value1, string value2, string value3);
    public static string MergeString(string value1, string value2, string value3, string value4);
    public static string MergeString(string value1, string value2, string value3, string value4, string value5);
    public static string MergeString(string value1, string value2, string value3, string value4, string value5, string value6);
    public static string MergeString(string value1, string value2, string value3, string value4, string value5, string value6, string value7);
    public static int ToInt32(object value);
    public static float ToSingle(object value);
    public static long ToInt64(object value);
    public static DateTime ToDate(object value);
    public static DateTime ToDateShort(object value);
    public static TimeSpan ToTime(object value);
    public static string ToString(object value);
    public static string ToVarchar(object value);
    public static decimal ToDecimal(object value);
    public static Guid ToGuid(object value);
    public static Guid NewUid();
    public static double ToDouble(object value);
    public static bool ToBool(object value);
    public static string Substring(object value, int index, int length);
    public static string Replace(object value, string oldChar, string newChar);
    public static int Length(object value);
    public static TResult AggregateSum(TResult thisValue);
    public static TResult AggregateSumNoNull(TResult thisValue);
    public static string Collate(string thisValue);
    public static TResult AggregateAvg(TResult thisValue);
    public static TResult AggregateAvgNoNull(TResult thisValue);
    public static TResult AggregateMin(TResult thisValue);
    public static TResult AggregateMax(TResult thisValue);
    public static int AggregateCount(TResult thisValue);
    public static int AggregateDistinctCount(TResult thisValue);
    public static TResult MappingColumn(TResult type, string newColumnName);
    public static TResult MappingColumn(string newColumnName);
    public static TResult GetSelfAndAutoFill(TResult value);
    public static DateTime GetDate();
    public static string GetRandom();
    public static T Abs(T value);
    public static T Round(T value, int precision);
    public static Subqueryable`1<T> Subqueryable();
    public static CaseThen IF(bool condition);
    [ObsoleteAttribute("多库下参数顺序不一至，为了保证多库下更好体验请使用 SqlFunc.CharIndexNew")]
public static int CharIndex(string findChar, string searchValue);
    public static int CharIndexNew(string stringValue, string charValue);
    public static int BitwiseAnd(int left, int right);
    public static int BitwiseInclusiveOR(int left, int right);
    public static int BitwiseAnd(long left, long right);
    public static int BitwiseInclusiveOR(long left, long right);
    public static DateTime Oracle_ToDate(string date, string format);
    public static string Oracle_ToChar(DateTime date, string format);
    public static string Oracle_ToChar(object objValue, string format);
    public static int SqlServer_DateDiff(string dateType, DateTime date1, DateTime date2);
    public static bool JsonListObjectAny(object jsonListObject, string fieldName, object value);
    public static bool PgsqlArrayContains(object jsonArray, object arrayValue);
    public static bool JsonArrayAny(object jsonArray, object arrayValue);
    public static bool SplitIn(string CommaSegmentationString, string inValue);
    public static bool SplitIn(string CommaSegmentationString, string inValue, char splitChar);
    public static bool ListAny(List`1<T> listConstant, Expression`1<Func`2<T, bool>> expression);
    public static bool ListAll(List`1<T> listConstant, Expression`1<Func`2<T, bool>> expression);
    public static string OnlyInSelectConvertToString(string stringValue, MethodInfo methodInfo);
    public static void SelectFields(string fieldName1);
    public static void SelectFields(string fieldName1, string fieldName2);
    public static void SelectFields(string fieldName1, string fieldName2, string fieldName3);
    public static void SelectFields(string fieldName1, string fieldName2, string fieldName3, string fieldName4);
    public static void SelectFields(string fieldName1, string fieldName2, string fieldName3, string fieldName4, string fieldName5);
}
[ExtensionAttribute]
public static class SqlSugar.SqlFuncExtendsion : object {
    internal static List`1<ConfigTableInfo> TableInfos;
    private static SqlFuncExtendsion();
    [ExtensionAttribute]
public static string GetConfigValue(object field);
    [ExtensionAttribute]
public static string GetConfigValue(object field, string uniqueCode);
    [ExtensionAttribute]
public static FieldType SelectAll(FieldType field);
    [ExtensionAttribute]
public static FieldType SelectAll(FieldType field, string singleTableQueryShortName);
}
public class SqlSugar.SqlFuncExternal : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UniqueMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`4<MethodCallExpressionModel, DbType, ExpressionContext, string> <MethodValue>k__BackingField;
    public string UniqueMethodName { get; public set; }
    public Func`4<MethodCallExpressionModel, DbType, ExpressionContext, string> MethodValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UniqueMethodName();
    [CompilerGeneratedAttribute]
public void set_UniqueMethodName(string value);
    [CompilerGeneratedAttribute]
public Func`4<MethodCallExpressionModel, DbType, ExpressionContext, string> get_MethodValue();
    [CompilerGeneratedAttribute]
public void set_MethodValue(Func`4<MethodCallExpressionModel, DbType, ExpressionContext, string> value);
}
internal class SqlSugar.SqlInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Take>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <WhereString>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <OrderByString>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SelectString>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SugarParameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<MappingFieldsExpression> <MappingExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableShortName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<List`1<SplitTableInfo>, IEnumerable`1<SplitTableInfo>> <SplitTable>k__BackingField;
    public Nullable`1<int> Take { get; public set; }
    public Nullable`1<int> Skip { get; public set; }
    public string WhereString { get; public set; }
    public string OrderByString { get; public set; }
    public string SelectString { get; public set; }
    public List`1<SugarParameter> Parameters { get; public set; }
    public List`1<MappingFieldsExpression> MappingExpressions { get; public set; }
    public string TableShortName { get; public set; }
    public Func`2<List`1<SplitTableInfo>, IEnumerable`1<SplitTableInfo>> SplitTable { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Take();
    [CompilerGeneratedAttribute]
public void set_Take(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_WhereString();
    [CompilerGeneratedAttribute]
public void set_WhereString(string value);
    [CompilerGeneratedAttribute]
public string get_OrderByString();
    [CompilerGeneratedAttribute]
public void set_OrderByString(string value);
    [CompilerGeneratedAttribute]
public string get_SelectString();
    [CompilerGeneratedAttribute]
public void set_SelectString(string value);
    [CompilerGeneratedAttribute]
public List`1<SugarParameter> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(List`1<SugarParameter> value);
    [CompilerGeneratedAttribute]
public List`1<MappingFieldsExpression> get_MappingExpressions();
    [CompilerGeneratedAttribute]
public void set_MappingExpressions(List`1<MappingFieldsExpression> value);
    [CompilerGeneratedAttribute]
public string get_TableShortName();
    [CompilerGeneratedAttribute]
public void set_TableShortName(string value);
    [CompilerGeneratedAttribute]
public Func`2<List`1<SplitTableInfo>, IEnumerable`1<SplitTableInfo>> get_SplitTable();
    [CompilerGeneratedAttribute]
public void set_SplitTable(Func`2<List`1<SplitTableInfo>, IEnumerable`1<SplitTableInfo>> value);
}
public class SqlSugar.SqliteBuilder : SqlBuilderProvider {
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    public string SqlDateNow { get; }
    public string FullSqlDateNow { get; }
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
    public virtual string get_SqlDateNow();
    public virtual string get_FullSqlDateNow();
    public virtual string RemoveParentheses(string sql);
    public virtual string RemoveN(string sql);
}
public class SqlSugar.SqliteCodeFirst : CodeFirstProvider {
    public virtual void ExistLogic(EntityInfo entityInfo);
    private void AddColumn(EntityInfo entityInfo);
    public virtual void NoExistLogic(EntityInfo entityInfo);
    protected virtual DbColumnInfo EntityColumnToDbColumn(EntityInfo entityInfo, string tableName, EntityColumnInfo item);
    protected virtual void ConvertColumns(List`1<DbColumnInfo> dbColumns);
    protected virtual void ChangeKey(EntityInfo entityInfo, string tableName, EntityColumnInfo item);
}
public class SqlSugar.SqliteDataAdapter : object {
    private SqliteCommand command;
    private string sql;
    private SqliteConnection _sqlConnection;
    public SqliteCommand SelectCommand { get; public set; }
    public SqliteDataAdapter(SqliteCommand command);
    public SqliteDataAdapter(string sql, SqliteConnection _sqlConnection);
    public SqliteCommand get_SelectCommand();
    public void set_SelectCommand(SqliteCommand value);
    public void Fill(DataTable dt);
    public sealed virtual void Fill(DataSet ds);
}
public class SqlSugar.SqliteDbBind : DbBindProvider {
    public static List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypesConst;
    public List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypes { get; }
    public List`1<string> StringThrow { get; }
    private static SqliteDbBind();
    public virtual string GetDbTypeName(string csharpTypeName);
    public virtual List`1<KeyValuePair`2<string, CSharpDataType>> get_MappingTypes();
    public virtual List`1<string> get_StringThrow();
}
public class SqlSugar.SqliteDbFirst : DbFirstProvider {
}
public class SqlSugar.SqliteDbMaintenance : DbMaintenanceProvider {
    protected string GetDataBaseSql { get; }
    protected string GetColumnInfosByTableNameSql { get; }
    protected string GetTableInfoListSql { get; }
    protected string GetViewInfoListSql { get; }
    protected string CreateDataBaseSql { get; }
    protected string AddPrimaryKeySql { get; }
    protected string AddColumnToTableSql { get; }
    protected string AlterColumnToTableSql { get; }
    protected string BackupDataBaseSql { get; }
    protected string CreateTableSql { get; }
    protected string CreateTableColumn { get; }
    protected string TruncateTableSql { get; }
    protected string BackupTableSql { get; }
    protected string DropTableSql { get; }
    protected string DropColumnToTableSql { get; }
    protected string DropConstraintSql { get; }
    protected string RenameColumnSql { get; }
    protected string IsAnyProcedureSql { get; }
    protected string CheckSystemTablePermissionsSql { get; }
    protected string CreateTableNull { get; }
    protected string CreateTableNotNull { get; }
    protected string CreateTablePirmaryKey { get; }
    protected string CreateTableIdentity { get; }
    protected string AddColumnRemarkSql { get; }
    protected string DeleteColumnRemarkSql { get; }
    protected string IsAnyColumnRemarkSql { get; }
    protected string AddTableRemarkSql { get; }
    protected string DeleteTableRemarkSql { get; }
    protected string IsAnyTableRemarkSql { get; }
    protected string RenameTableSql { get; }
    protected string CreateIndexSql { get; }
    protected string IsAnyIndexSql { get; }
    protected string AddDefaultValueSql { get; }
    protected virtual string get_GetDataBaseSql();
    protected virtual string get_GetColumnInfosByTableNameSql();
    protected virtual string get_GetTableInfoListSql();
    protected virtual string get_GetViewInfoListSql();
    protected virtual string get_CreateDataBaseSql();
    protected virtual string get_AddPrimaryKeySql();
    protected virtual string get_AddColumnToTableSql();
    protected virtual string get_AlterColumnToTableSql();
    protected virtual string get_BackupDataBaseSql();
    protected virtual string get_CreateTableSql();
    protected virtual string get_CreateTableColumn();
    protected virtual string get_TruncateTableSql();
    protected virtual string get_BackupTableSql();
    protected virtual string get_DropTableSql();
    protected virtual string get_DropColumnToTableSql();
    protected virtual string get_DropConstraintSql();
    protected virtual string get_RenameColumnSql();
    protected virtual string get_IsAnyProcedureSql();
    protected virtual string get_CheckSystemTablePermissionsSql();
    protected virtual string get_CreateTableNull();
    protected virtual string get_CreateTableNotNull();
    protected virtual string get_CreateTablePirmaryKey();
    protected virtual string get_CreateTableIdentity();
    protected virtual string get_AddColumnRemarkSql();
    protected virtual string get_DeleteColumnRemarkSql();
    protected virtual string get_IsAnyColumnRemarkSql();
    protected virtual string get_AddTableRemarkSql();
    protected virtual string get_DeleteTableRemarkSql();
    protected virtual string get_IsAnyTableRemarkSql();
    protected virtual string get_RenameTableSql();
    protected virtual string get_CreateIndexSql();
    protected virtual string get_IsAnyIndexSql();
    protected virtual string get_AddDefaultValueSql();
    public virtual bool UpdateColumn(string tableName, DbColumnInfo column);
    public virtual List`1<string> GetDbTypes();
    public virtual List`1<string> GetTriggerNames(string tableName);
    public virtual List`1<string> GetFuncList();
    public virtual List`1<string> GetIndexList(string tableName);
    public virtual void AddDefaultValue(EntityInfo entityInfo);
    public virtual bool AddDefaultValue(string tableName, string columnName, string defaultValue);
    public virtual bool TruncateTable(string tableName);
    public virtual bool CreateDatabase(string databaseName, string databaseDirectory);
    public virtual List`1<DbColumnInfo> GetColumnInfosByTableName(string tableName, bool isCache);
    private List`1<DbColumnInfo> GetColumnInfosByTableName(string tableName);
    private List`1<DbColumnInfo> GetColumnsByTableName2(string tableName);
    public virtual bool AddRemark(EntityInfo entity);
    public virtual bool BackupTable(string oldTableName, string newTableName, int maxBackupDataRows);
    public virtual bool CreateTable(string tableName, List`1<DbColumnInfo> columns, bool isCreatePrimaryKey);
    protected virtual string GetCreateTableSql(string tableName, List`1<DbColumnInfo> columns);
    public virtual bool IsAnyConstraint(string constraintName);
    public virtual bool BackupDataBase(string databaseName, string fullFileName);
    [CompilerGeneratedAttribute]
private string <CreateTable>b__80_1(DbColumnInfo it);
}
public class SqlSugar.SqliteDeleteBuilder : DeleteBuilder {
}
public class SqlSugar.SqliteExpressionContext : ExpressionContext {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContextCase <Case>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    public ExpressionContextCase Case { get; public set; }
    public SqlSugarProvider Context { get; public set; }
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    [CompilerGeneratedAttribute]
public virtual ExpressionContextCase get_Case();
    [CompilerGeneratedAttribute]
public virtual void set_Case(ExpressionContextCase value);
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
}
public class SqlSugar.SqliteFastBuilder : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <FastEntityInfo>k__BackingField;
    private EntityInfo entityInfo;
    private bool IsUpdate;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CharacterSet>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DataTable <UpdateDataTable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsActionUpdateColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbFastestProperties <DbFastestProperties>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    public EntityInfo FastEntityInfo { get; public set; }
    public string CharacterSet { get; public set; }
    private DataTable UpdateDataTable { get; private set; }
    public bool IsActionUpdateColumns { get; public set; }
    public DbFastestProperties DbFastestProperties { get; public set; }
    public SqlSugarProvider Context { get; public set; }
    public SqliteFastBuilder(EntityInfo entityInfo);
    [CompilerGeneratedAttribute]
public sealed virtual EntityInfo get_FastEntityInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FastEntityInfo(EntityInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CharacterSet();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CharacterSet(string value);
    [CompilerGeneratedAttribute]
private DataTable get_UpdateDataTable();
    [CompilerGeneratedAttribute]
private void set_UpdateDataTable(DataTable value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsActionUpdateColumns();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsActionUpdateColumns(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual DbFastestProperties get_DbFastestProperties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DbFastestProperties(DbFastestProperties value);
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    public sealed virtual void CloseDb();
    [AsyncStateMachineAttribute("SqlSugar.SqliteFastBuilder/<CreateTempAsync>d__28`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task CreateTempAsync(DataTable dt);
    [AsyncStateMachineAttribute("SqlSugar.SqliteFastBuilder/<ExecuteBulkCopyAsync>d__29")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> ExecuteBulkCopyAsync(DataTable dt);
    [AsyncStateMachineAttribute("SqlSugar.SqliteFastBuilder/<_BulkCopy>d__30")]
[DebuggerStepThroughAttribute]
private Task`1<int> _BulkCopy(DataTable dt, List`1<Dictionary`2<string, object>> dictionary, int i, SqliteConnection cn);
    [AsyncStateMachineAttribute("SqlSugar.SqliteFastBuilder/<_BulkUpdate>d__31")]
[DebuggerStepThroughAttribute]
private Task`1<int> _BulkUpdate(DataTable dt, List`1<Dictionary`2<string, object>> dictionary, int i, String[] whereColums, String[] updateColums, SqliteConnection cn);
    private static bool IsBoolFalse(DataRow dataRow, DataColumn item);
    private static bool IsBoolTrue(DataRow dataRow, DataColumn item);
    private static void Open(SqliteConnection cn);
    [AsyncStateMachineAttribute("SqlSugar.SqliteFastBuilder/<UpdateByTempAsync>d__35")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> UpdateByTempAsync(string tableName, string tempName, String[] updateColumns, String[] whereColumns);
    [AsyncStateMachineAttribute("SqlSugar.SqliteFastBuilder/<Merge>d__36`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> Merge(string tableName, DataTable dt, EntityInfo entityInfo, String[] whereColumns, String[] updateColumns, List`1<T> datas);
}
public class SqlSugar.SqliteInsertBuilder : InsertBuilder {
    public string SqlTemplate { get; }
    public string SqlTemplateBatch { get; }
    public virtual string get_SqlTemplate();
    public virtual string get_SqlTemplateBatch();
    public virtual string ToSqlString();
    public object FormatValue(int i, string name, object value);
    private object GetDateTimeOffsetString(object value);
    private object GetDateTimeString(object value);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__4_2(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__4_3(DbColumnInfo it);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private string <>n__0(DbColumnInfo columnInfo, object name);
}
public class SqlSugar.SqliteMethod : DefaultDbMethod {
    public virtual string WeekOfYear(MethodCallExpressionModel mode);
    public virtual string Equals(MethodCallExpressionModel model);
    public virtual string JsonIndex(MethodCallExpressionModel model);
    public virtual string JsonField(MethodCallExpressionModel model);
    public virtual string GetStringJoinSelector(string result, string separator);
    public virtual string DateDiff(MethodCallExpressionModel model);
    public virtual string Length(MethodCallExpressionModel model);
    public virtual string Substring(MethodCallExpressionModel model);
    public virtual string Contains(MethodCallExpressionModel model);
    public virtual string StartsWith(MethodCallExpressionModel model);
    public virtual string EndsWith(MethodCallExpressionModel model);
    public virtual string ToInt32(MethodCallExpressionModel model);
    public virtual string ToInt64(MethodCallExpressionModel model);
    public virtual string ToString(MethodCallExpressionModel model);
    public virtual string ToGuid(MethodCallExpressionModel model);
    public virtual string ToDouble(MethodCallExpressionModel model);
    public virtual string ToBool(MethodCallExpressionModel model);
    public virtual string ToDecimal(MethodCallExpressionModel model);
    public virtual string ToDate(MethodCallExpressionModel model);
    public virtual string ToDateShort(MethodCallExpressionModel model);
    public virtual string DateAddDay(MethodCallExpressionModel model);
    public virtual string DateAddByType(MethodCallExpressionModel model);
    public virtual string DateValue(MethodCallExpressionModel model);
    public virtual string DateIsSameDay(MethodCallExpressionModel model);
    public virtual string DateIsSameByType(MethodCallExpressionModel model);
    public virtual string MergeString(String[] strings);
    public virtual string IsNull(MethodCallExpressionModel model);
    public virtual string GetDate();
    public virtual string GetRandom();
    public virtual string CharIndex(MethodCallExpressionModel model);
    public virtual string TrimEnd(MethodCallExpressionModel mode);
    public virtual string TrimStart(MethodCallExpressionModel mode);
    public virtual string PadLeft(MethodCallExpressionModel mode);
    public virtual string Left(MethodCallExpressionModel mode);
    public virtual string Right(MethodCallExpressionModel mode);
    public virtual string NewUid(MethodCallExpressionModel mode);
}
public class SqlSugar.SqliteProvider : AdoProvider {
    public IDbConnection Connection { get; public set; }
    public virtual void ExecuteBefore(string sql, SugarParameter[] parameters);
    public virtual IDbConnection get_Connection();
    public virtual void set_Connection(IDbConnection value);
    public virtual void BeginTran(string transactionName);
    public virtual void BeginTran(IsolationLevel iso, string transactionName);
    public virtual IDataAdapter GetAdapter();
    public virtual DbCommand GetCommand(string sql, SugarParameter[] parameters);
    public virtual void SetCommandToAdapter(IDataAdapter dataAdapter, DbCommand command);
    public virtual IDataParameter[] ToIDbDataParameter(SugarParameter[] parameters);
}
public class SqlSugar.SqliteQueryable`1 : QueryableProvider`1<T> {
    public virtual ISugarQueryable`1<T> With(string withString);
    public virtual ISugarQueryable`1<T> PartitionBy(string groupFileds);
}
public class SqlSugar.SqliteQueryable`10 : QueryableProvider`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> {
}
public class SqlSugar.SqliteQueryable`11 : QueryableProvider`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> {
}
public class SqlSugar.SqliteQueryable`12 : QueryableProvider`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> {
}
public class SqlSugar.SqliteQueryable`2 : QueryableProvider`2<T, T2> {
}
public class SqlSugar.SqliteQueryable`3 : QueryableProvider`3<T, T2, T3> {
}
public class SqlSugar.SqliteQueryable`4 : QueryableProvider`4<T, T2, T3, T4> {
}
public class SqlSugar.SqliteQueryable`5 : QueryableProvider`5<T, T2, T3, T4, T5> {
}
public class SqlSugar.SqliteQueryable`6 : QueryableProvider`6<T, T2, T3, T4, T5, T6> {
}
public class SqlSugar.SqliteQueryable`7 : QueryableProvider`7<T, T2, T3, T4, T5, T6, T7> {
}
public class SqlSugar.SqliteQueryable`8 : QueryableProvider`8<T, T2, T3, T4, T5, T6, T7, T8> {
}
public class SqlSugar.SqliteQueryable`9 : QueryableProvider`9<T, T2, T3, T4, T5, T6, T7, T8, T9> {
}
public class SqlSugar.SqliteQueryBuilder : QueryBuilder {
    public string PageTempalte { get; }
    public string DefaultOrderByTemplate { get; }
    public string GetSelectValue { get; }
    public virtual string get_PageTempalte();
    public virtual string get_DefaultOrderByTemplate();
    public virtual bool IsComplexModel(string sql);
    public virtual string ToSqlString();
    public virtual string get_GetSelectValue();
}
public class SqlSugar.SqliteUpdateBuilder : UpdateBuilder {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ReSetValueBySqlExpListType>k__BackingField;
    public string ReSetValueBySqlExpListType { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_ReSetValueBySqlExpListType();
    [CompilerGeneratedAttribute]
public virtual void set_ReSetValueBySqlExpListType(string value);
    protected virtual string TomultipleSqlString(List`1<IGrouping`2<int, DbColumnInfo>> groupList);
    private string GetOracleUpdateColums(int i, DbColumnInfo m, bool iswhere);
    public object FormatValue(int i, string name, object value, bool iswhere);
    private object GetDateTimeOffsetString(object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private string <>n__0();
}
public class SqlSugar.SqlMiddle : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <IsSqlMiddle>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`3<string, SugarParameter[], object> <GetScalar>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`3<string, SugarParameter[], int> <ExecuteCommand>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`3<string, SugarParameter[], IDataReader> <GetDataReader>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`3<string, SugarParameter[], DataSet> <GetDataSetAll>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`3<string, SugarParameter[], Task`1<object>> <GetScalarAsync>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`3<string, SugarParameter[], Task`1<int>> <ExecuteCommandAsync>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`3<string, SugarParameter[], Task`1<IDataReader>> <GetDataReaderAsync>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`3<string, SugarParameter[], Task`1<DataSet>> <GetDataSetAllAsync>k__BackingField;
    public Nullable`1<bool> IsSqlMiddle { get; public set; }
    public Func`3<string, SugarParameter[], object> GetScalar { get; public set; }
    public Func`3<string, SugarParameter[], int> ExecuteCommand { get; public set; }
    public Func`3<string, SugarParameter[], IDataReader> GetDataReader { get; public set; }
    public Func`3<string, SugarParameter[], DataSet> GetDataSetAll { get; public set; }
    public Func`3<string, SugarParameter[], Task`1<object>> GetScalarAsync { get; public set; }
    public Func`3<string, SugarParameter[], Task`1<int>> ExecuteCommandAsync { get; public set; }
    public Func`3<string, SugarParameter[], Task`1<IDataReader>> GetDataReaderAsync { get; public set; }
    public Func`3<string, SugarParameter[], Task`1<DataSet>> GetDataSetAllAsync { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsSqlMiddle();
    [CompilerGeneratedAttribute]
public void set_IsSqlMiddle(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Func`3<string, SugarParameter[], object> get_GetScalar();
    [CompilerGeneratedAttribute]
public void set_GetScalar(Func`3<string, SugarParameter[], object> value);
    [CompilerGeneratedAttribute]
public Func`3<string, SugarParameter[], int> get_ExecuteCommand();
    [CompilerGeneratedAttribute]
public void set_ExecuteCommand(Func`3<string, SugarParameter[], int> value);
    [CompilerGeneratedAttribute]
public Func`3<string, SugarParameter[], IDataReader> get_GetDataReader();
    [CompilerGeneratedAttribute]
public void set_GetDataReader(Func`3<string, SugarParameter[], IDataReader> value);
    [CompilerGeneratedAttribute]
public Func`3<string, SugarParameter[], DataSet> get_GetDataSetAll();
    [CompilerGeneratedAttribute]
public void set_GetDataSetAll(Func`3<string, SugarParameter[], DataSet> value);
    [CompilerGeneratedAttribute]
public Func`3<string, SugarParameter[], Task`1<object>> get_GetScalarAsync();
    [CompilerGeneratedAttribute]
public void set_GetScalarAsync(Func`3<string, SugarParameter[], Task`1<object>> value);
    [CompilerGeneratedAttribute]
public Func`3<string, SugarParameter[], Task`1<int>> get_ExecuteCommandAsync();
    [CompilerGeneratedAttribute]
public void set_ExecuteCommandAsync(Func`3<string, SugarParameter[], Task`1<int>> value);
    [CompilerGeneratedAttribute]
public Func`3<string, SugarParameter[], Task`1<IDataReader>> get_GetDataReaderAsync();
    [CompilerGeneratedAttribute]
public void set_GetDataReaderAsync(Func`3<string, SugarParameter[], Task`1<IDataReader>> value);
    [CompilerGeneratedAttribute]
public Func`3<string, SugarParameter[], Task`1<DataSet>> get_GetDataSetAllAsync();
    [CompilerGeneratedAttribute]
public void set_GetDataSetAllAsync(Func`3<string, SugarParameter[], Task`1<DataSet>> value);
}
public class SqlSugar.SqlObjectResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private JsonProviderType <JsonSqlType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SugarParameter> <Parameters>k__BackingField;
    public JsonProviderType JsonSqlType { get; public set; }
    public string Sql { get; public set; }
    public List`1<SugarParameter> Parameters { get; public set; }
    public SqlObjectResult(KeyValuePair`2<string, List`1<SugarParameter>> keyValuePair, JsonProviderType jsonSqlType);
    [CompilerGeneratedAttribute]
public JsonProviderType get_JsonSqlType();
    [CompilerGeneratedAttribute]
public void set_JsonSqlType(JsonProviderType value);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
    [CompilerGeneratedAttribute]
public List`1<SugarParameter> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(List`1<SugarParameter> value);
}
public class SqlSugar.SqlQueryBuilder : object {
    private string _Fields;
    private StringBuilder _Sql;
    private List`1<SugarParameter> _Parameters;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public string Fields { get; public set; }
    public StringBuilder sql { get; public set; }
    public string SqlTemplate { get; }
    public List`1<SugarParameter> Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    public string get_Fields();
    public void set_Fields(string value);
    public sealed virtual StringBuilder get_sql();
    public sealed virtual void set_sql(StringBuilder value);
    public sealed virtual string get_SqlTemplate();
    public sealed virtual List`1<SugarParameter> get_Parameters();
    public sealed virtual void set_Parameters(List`1<SugarParameter> value);
    public sealed virtual string ToSqlString();
    public sealed virtual void Clear();
}
public class SqlSugar.SqlServerBlukCopy : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<IGrouping`2<int, DbColumnInfo>> <DbColumnInfoList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private InsertBuilder <InsertBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Object[] <Inserts>k__BackingField;
    internal List`1<IGrouping`2<int, DbColumnInfo>> DbColumnInfoList { get; internal set; }
    internal SqlSugarProvider Context { get; internal set; }
    internal ISqlBuilder Builder { get; internal set; }
    internal InsertBuilder InsertBuilder { get; internal set; }
    internal Object[] Inserts { get; internal set; }
    [CompilerGeneratedAttribute]
internal List`1<IGrouping`2<int, DbColumnInfo>> get_DbColumnInfoList();
    [CompilerGeneratedAttribute]
internal void set_DbColumnInfoList(List`1<IGrouping`2<int, DbColumnInfo>> value);
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal ISqlBuilder get_Builder();
    [CompilerGeneratedAttribute]
internal void set_Builder(ISqlBuilder value);
    [CompilerGeneratedAttribute]
internal InsertBuilder get_InsertBuilder();
    [CompilerGeneratedAttribute]
internal void set_InsertBuilder(InsertBuilder value);
    [CompilerGeneratedAttribute]
internal Object[] get_Inserts();
    [CompilerGeneratedAttribute]
internal void set_Inserts(Object[] value);
    public int ExecuteBulkCopy();
    [AsyncStateMachineAttribute("SqlSugar.SqlServerBlukCopy/<ExecuteBulkCopyAsync>d__21")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteBulkCopyAsync();
    private int WriteToServer();
    private DataTable GetCopyWriteDataTable(DataTable dt);
    private SqlBulkCopy GetBulkCopyInstance();
    private DataTable GetCopyData();
    private void CloseDb();
}
public class SqlSugar.SqlServerBuilder : SqlBuilderProvider {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <SupportReadToken>k__BackingField;
    public string SqlTranslationLeft { get; }
    public string SqlTranslationRight { get; }
    public bool SupportReadToken { get; public set; }
    public virtual string get_SqlTranslationLeft();
    public virtual string get_SqlTranslationRight();
    [CompilerGeneratedAttribute]
public virtual bool get_SupportReadToken();
    [CompilerGeneratedAttribute]
public virtual void set_SupportReadToken(bool value);
    public virtual string RemoveParentheses(string sql);
    public virtual void ChangeJsonType(SugarParameter paramter);
    public virtual Task`1<bool> GetReaderByToken(IDataReader dataReader, CancellationToken cancellationToken);
}
public class SqlSugar.SqlServerCodeFirst : CodeFirstProvider {
    protected virtual string GetTableName(EntityInfo entityInfo);
    protected virtual void GetDbType(EntityColumnInfo item, Type propertyType, DbColumnInfo result);
}
public class SqlSugar.SqlServerDbBind : DbBindProvider {
    public static List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypesConst;
    public List`1<KeyValuePair`2<string, CSharpDataType>> MappingTypes { get; }
    private static SqlServerDbBind();
    public virtual string GetDbTypeName(string csharpTypeName);
    public virtual List`1<KeyValuePair`2<string, CSharpDataType>> get_MappingTypes();
}
public class SqlSugar.SqlServerDbFirst : DbFirstProvider {
}
public class SqlSugar.SqlServerDbMaintenance : DbMaintenanceProvider {
    protected string GetDataBaseSql { get; }
    protected string GetColumnInfosByTableNameSql { get; }
    protected string GetTableInfoListSql { get; }
    protected string GetViewInfoListSql { get; }
    protected string CreateDataBaseSql { get; }
    protected string AddPrimaryKeySql { get; }
    protected string AddColumnToTableSql { get; }
    protected string AlterColumnToTableSql { get; }
    protected string BackupDataBaseSql { get; }
    protected string CreateTableSql { get; }
    protected string CreateTableColumn { get; }
    protected string TruncateTableSql { get; }
    protected string BackupTableSql { get; }
    protected string DropTableSql { get; }
    protected string DropColumnToTableSql { get; }
    protected string DropConstraintSql { get; }
    protected string RenameColumnSql { get; }
    protected string AddColumnRemarkSql { get; }
    protected string DeleteColumnRemarkSql { get; }
    protected string IsAnyColumnRemarkSql { get; }
    protected string AddTableRemarkSql { get; }
    protected string DeleteTableRemarkSql { get; }
    protected string IsAnyTableRemarkSql { get; }
    protected string RenameTableSql { get; }
    protected string CreateIndexSql { get; }
    protected string AddDefaultValueSql { get; }
    protected string IsAnyIndexSql { get; }
    protected string IsAnyProcedureSql { get; }
    protected string CheckSystemTablePermissionsSql { get; }
    protected string CreateTableNull { get; }
    protected string CreateTableNotNull { get; }
    protected string CreateTablePirmaryKey { get; }
    protected string CreateTableIdentity { get; }
    protected virtual string get_GetDataBaseSql();
    protected virtual string get_GetColumnInfosByTableNameSql();
    protected virtual string get_GetTableInfoListSql();
    protected virtual string get_GetViewInfoListSql();
    protected virtual string get_CreateDataBaseSql();
    protected virtual string get_AddPrimaryKeySql();
    protected virtual string get_AddColumnToTableSql();
    protected virtual string get_AlterColumnToTableSql();
    protected virtual string get_BackupDataBaseSql();
    protected virtual string get_CreateTableSql();
    protected virtual string get_CreateTableColumn();
    protected virtual string get_TruncateTableSql();
    protected virtual string get_BackupTableSql();
    protected virtual string get_DropTableSql();
    protected virtual string get_DropColumnToTableSql();
    protected virtual string get_DropConstraintSql();
    protected virtual string get_RenameColumnSql();
    protected virtual string get_AddColumnRemarkSql();
    protected virtual string get_DeleteColumnRemarkSql();
    protected virtual string get_IsAnyColumnRemarkSql();
    protected virtual string get_AddTableRemarkSql();
    protected virtual string get_DeleteTableRemarkSql();
    protected virtual string get_IsAnyTableRemarkSql();
    protected virtual string get_RenameTableSql();
    protected virtual string get_CreateIndexSql();
    protected virtual string get_AddDefaultValueSql();
    protected virtual string get_IsAnyIndexSql();
    protected virtual string get_IsAnyProcedureSql();
    protected virtual string get_CheckSystemTablePermissionsSql();
    protected virtual string get_CreateTableNull();
    protected virtual string get_CreateTableNotNull();
    protected virtual string get_CreateTablePirmaryKey();
    protected virtual string get_CreateTableIdentity();
    public virtual bool SetAutoIncrementInitialValue(string tableName, int initialValue);
    public virtual bool SetAutoIncrementInitialValue(Type entityType, int initialValue);
    public virtual List`1<DbTableInfo> GetSchemaTables(EntityInfo entityInfo);
    public virtual bool DropColumn(string tableName, string columnName);
    public virtual List`1<string> GetDbTypes();
    public virtual List`1<string> GetTriggerNames(string tableName);
    public virtual List`1<string> GetFuncList();
    private bool IsAnySchemaTable(string tableName);
    public virtual bool IsAnyColumnRemark(string columnName, string tableName);
    public virtual bool DeleteColumnRemark(string columnName, string tableName);
    public virtual bool AddColumnRemark(string columnName, string tableName, string description);
    public virtual void AddDefaultValue(EntityInfo entityInfo);
    public virtual List`1<string> GetIndexList(string tableName);
    public virtual List`1<string> GetProcList(string dbName);
    public virtual bool UpdateColumn(string tableName, DbColumnInfo column);
    public virtual bool IsAnyTable(string tableName, bool isCache);
    public List`1<string> GetSchemas();
    public virtual bool DeleteTableRemark(string tableName);
    public virtual bool IsAnyTableRemark(string tableName);
    public virtual bool AddTableRemark(string tableName, string description);
    public virtual bool AddDefaultValue(string tableName, string columnName, string defaultValue);
    public virtual bool CreateDatabase(string databaseName, string databaseDirectory);
    public virtual bool CreateTable(string tableName, List`1<DbColumnInfo> columns, bool isCreatePrimaryKey);
    private static void ConvertCreateColumnInfo(DbColumnInfo x);
    public virtual List`1<DbColumnInfo> GetColumnInfosByTableName(string tableName, bool isCache);
    public virtual bool RenameColumn(string tableName, string oldColumnName, string newColumnName);
    [CompilerGeneratedAttribute]
private string <IsAnyColumnRemark>b__74_0(string it);
    [CompilerGeneratedAttribute]
private string <DeleteColumnRemark>b__75_0(string it);
    [CompilerGeneratedAttribute]
private string <AddColumnRemark>b__76_0(string it);
}
public class SqlSugar.SqlServerDeleteBuilder : DeleteBuilder {
}
public class SqlSugar.SqlServerExpressionContext : ExpressionContext {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
}
public class SqlSugar.SqlServerFastBuilder : FastBuilder {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsActionUpdateColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbFastestProperties <DbFastestProperties>k__BackingField;
    public bool IsActionUpdateColumns { get; public set; }
    public DbFastestProperties DbFastestProperties { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_IsActionUpdateColumns();
    [CompilerGeneratedAttribute]
public virtual void set_IsActionUpdateColumns(bool value);
    [CompilerGeneratedAttribute]
public virtual DbFastestProperties get_DbFastestProperties();
    [CompilerGeneratedAttribute]
public virtual void set_DbFastestProperties(DbFastestProperties value);
    [AsyncStateMachineAttribute("SqlSugar.SqlServerFastBuilder/<ExecuteBulkCopyAsync>d__8")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> ExecuteBulkCopyAsync(DataTable dt);
    public SqlBulkCopy GetBulkCopyInstance();
    public virtual Task`1<int> Merge(string tableName, DataTable dt, EntityInfo entityInfo, String[] whereColumns, String[] updateColumns, List`1<T> datas);
}
public class SqlSugar.SqlServerInsertBuilder : InsertBuilder {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`3<string, string, string> <ConvertInsertReturnIdFunc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNoPage>k__BackingField;
    public Func`3<string, string, string> ConvertInsertReturnIdFunc { get; public set; }
    public bool IsNoPage { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Func`3<string, string, string> get_ConvertInsertReturnIdFunc();
    [CompilerGeneratedAttribute]
public virtual void set_ConvertInsertReturnIdFunc(Func`3<string, string, string> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNoPage();
    [CompilerGeneratedAttribute]
public virtual void set_IsNoPage(bool value);
    public virtual string ToSqlString();
    public virtual string FormatDateTimeOffset(object value);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__8_2(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__8_3(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <ToSqlString>b__8_4(DbColumnInfo it);
}
public class SqlSugar.SqlServerMethod : DefaultDbMethod {
    public virtual string ToDecimal(MethodCallExpressionModel model);
    public virtual string JsonArrayLength(MethodCallExpressionModel model);
    public virtual string JsonIndex(MethodCallExpressionModel model);
    public virtual string CharIndexNew(MethodCallExpressionModel model);
    public virtual string WeekOfYear(MethodCallExpressionModel mode);
    public virtual string GetTableWithDataBase(string dataBaseName, string tableName);
    public virtual string GetForXmlPath();
    public virtual string GetStringJoinSelector(string result, string separator);
    public virtual string DateValue(MethodCallExpressionModel model);
    public virtual string HasValue(MethodCallExpressionModel model);
    public virtual string JsonField(MethodCallExpressionModel model);
    private string GetJson(object memberName1, object memberName2, bool isLast);
    public virtual string JsonListObjectAny(MethodCallExpressionModel model);
    public virtual string JsonArrayAny(MethodCallExpressionModel model);
    public virtual string TrimEnd(MethodCallExpressionModel mode);
    public virtual string TrimStart(MethodCallExpressionModel mode);
    public virtual string PadLeft(MethodCallExpressionModel mode);
    public virtual string NewUid(MethodCallExpressionModel mode);
    public virtual string FullTextContains(MethodCallExpressionModel mode);
}
public class SqlSugar.SqlServerProvider : AdoProvider {
    public IDbConnection Connection { get; public set; }
    public virtual IDbConnection get_Connection();
    public virtual void set_Connection(IDbConnection value);
    public virtual void BeginTran(string transactionName);
    public virtual void BeginTran(IsolationLevel iso, string transactionName);
    public virtual IDataAdapter GetAdapter();
    public virtual DbCommand GetCommand(string sql, SugarParameter[] parameters);
    public virtual void SetCommandToAdapter(IDataAdapter dataAdapter, DbCommand command);
    public virtual IDataParameter[] ToIDbDataParameter(SugarParameter[] parameters);
    public SqlParameter[] GetSqlParameter(SugarParameter[] parameters);
    private static DbType GetDbType(SugarParameter parameter);
}
public class SqlSugar.SqlServerQueryable`1 : QueryableProvider`1<T> {
}
public class SqlSugar.SqlServerQueryable`10 : QueryableProvider`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> {
}
public class SqlSugar.SqlServerQueryable`11 : QueryableProvider`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> {
}
public class SqlSugar.SqlServerQueryable`12 : QueryableProvider`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> {
}
public class SqlSugar.SqlServerQueryable`2 : QueryableProvider`2<T, T2> {
}
public class SqlSugar.SqlServerQueryable`3 : QueryableProvider`3<T, T2, T3> {
}
public class SqlSugar.SqlServerQueryable`4 : QueryableProvider`4<T, T2, T3, T4> {
}
public class SqlSugar.SqlServerQueryable`5 : QueryableProvider`5<T, T2, T3, T4, T5> {
}
public class SqlSugar.SqlServerQueryable`6 : QueryableProvider`6<T, T2, T3, T4, T5, T6> {
}
public class SqlSugar.SqlServerQueryable`7 : QueryableProvider`7<T, T2, T3, T4, T5, T6, T7> {
}
public class SqlSugar.SqlServerQueryable`8 : QueryableProvider`8<T, T2, T3, T4, T5, T6, T7, T8> {
}
public class SqlSugar.SqlServerQueryable`9 : QueryableProvider`9<T, T2, T3, T4, T5, T6, T7, T8, T9> {
}
public class SqlSugar.SqlServerQueryBuilder : QueryBuilder {
    public string SqlTemplate { get; }
    public virtual string get_SqlTemplate();
    public virtual string ToSqlString();
    public string _ToSqlString();
    private string GetSelect(bool isFirst, bool isTop);
}
public class SqlSugar.SqlServerUpdateBuilder : UpdateBuilder {
    protected virtual string TomultipleSqlString(List`1<IGrouping`2<int, DbColumnInfo>> groupList);
    private StringBuilder GetBatchUpdateSql(StringBuilder batchUpdateSql);
    private object GetValue(DbColumnInfo it);
    public virtual string FormatDateTimeOffset(object value);
    [CompilerGeneratedAttribute]
private bool <TomultipleSqlString>b__0_0(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <TomultipleSqlString>b__0_1(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <TomultipleSqlString>b__0_3(DbColumnInfo it);
}
public class SqlSugar.SqlSugarClient : object {
    private SqlSugarProvider _Context;
    private string _ThreadId;
    private ConnectionConfig _CurrentConnectionConfig;
    internal List`1<SugarTenant> _AllClients;
    private bool _IsAllTran;
    private bool _IsOpen;
    private MappingTableList _MappingTables;
    private MappingColumnList _MappingColumns;
    private IgnoreColumnList _IgnoreColumns;
    private IgnoreColumnList _IgnoreInsertColumns;
    private Action`1<SqlSugarClient> _configAction;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<Guid> <AsyncId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <IsSingleInstance>k__BackingField;
    internal Nullable`1<Guid> AsyncId { get; internal set; }
    internal Nullable`1<bool> IsSingleInstance { get; internal set; }
    public SugarActionType SugarActionType { get; public set; }
    public SqlSugarProvider Context { get; }
    public bool IsSystemTablesConfig { get; }
    public ConnectionConfig CurrentConnectionConfig { get; public set; }
    public Guid ContextID { get; public set; }
    public ConfigQuery ConfigQuery { get; public set; }
    public MappingTableList MappingTables { get; public set; }
    public MappingColumnList MappingColumns { get; public set; }
    public IgnoreColumnList IgnoreColumns { get; public set; }
    public IgnoreColumnList IgnoreInsertColumns { get; public set; }
    public Dictionary`2<string, object> TempItems { get; public set; }
    public QueueList Queues { get; public set; }
    public IAdo Ado { get; }
    public IContextMethods Utilities { get; public set; }
    public AopProvider Aop { get; }
    public ICodeFirst CodeFirst { get; }
    public IDbFirst DbFirst { get; }
    public IDbMaintenance DbMaintenance { get; }
    public EntityMaintenance EntityMaintenance { get; public set; }
    public QueryFilterProvider QueryFilter { get; public set; }
    public SugarCacheProvider DataCache { get; }
    public SqlSugarClient(ConnectionConfig config);
    public SqlSugarClient(List`1<ConnectionConfig> configs);
    public SqlSugarClient(ConnectionConfig config, Action`1<SqlSugarClient> configAction);
    public SqlSugarClient(List`1<ConnectionConfig> configs, Action`1<SqlSugarClient> configAction);
    [CompilerGeneratedAttribute]
internal Nullable`1<Guid> get_AsyncId();
    [CompilerGeneratedAttribute]
internal void set_AsyncId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_IsSingleInstance();
    [CompilerGeneratedAttribute]
internal void set_IsSingleInstance(Nullable`1<bool> value);
    public sealed virtual SugarActionType get_SugarActionType();
    public sealed virtual void set_SugarActionType(SugarActionType value);
    public SqlSugarProvider get_Context();
    public sealed virtual bool get_IsSystemTablesConfig();
    public sealed virtual ConnectionConfig get_CurrentConnectionConfig();
    public sealed virtual void set_CurrentConnectionConfig(ConnectionConfig value);
    public sealed virtual Guid get_ContextID();
    public sealed virtual void set_ContextID(Guid value);
    public sealed virtual ConfigQuery get_ConfigQuery();
    public sealed virtual void set_ConfigQuery(ConfigQuery value);
    public sealed virtual MappingTableList get_MappingTables();
    public sealed virtual void set_MappingTables(MappingTableList value);
    public sealed virtual MappingColumnList get_MappingColumns();
    public sealed virtual void set_MappingColumns(MappingColumnList value);
    public sealed virtual IgnoreColumnList get_IgnoreColumns();
    public sealed virtual void set_IgnoreColumns(IgnoreColumnList value);
    public sealed virtual IgnoreColumnList get_IgnoreInsertColumns();
    public sealed virtual void set_IgnoreInsertColumns(IgnoreColumnList value);
    public sealed virtual Dictionary`2<string, object> get_TempItems();
    public sealed virtual void set_TempItems(Dictionary`2<string, object> value);
    public sealed virtual T CreateContext(bool isTran);
    public sealed virtual SugarUnitOfWork CreateContext(bool isTran);
    private SugarUnitOfWork _CreateContext(bool isTran, SugarUnitOfWork sugarUnitOf);
    public sealed virtual SimpleClient`1<T> GetSimpleClient();
    public sealed virtual RepositoryType GetRepository();
    public sealed virtual IInsertable`1<Dictionary`2<string, object>> InsertableByDynamic(object insertDynamicObject);
    public sealed virtual InsertMethodInfo InsertableByObject(object singleEntityObjectOrListObject);
    public sealed virtual IInsertable`1<T> Insertable(Dictionary`2<string, object> columnDictionary);
    public sealed virtual IInsertable`1<T> Insertable(object insertDynamicObject);
    public sealed virtual IInsertable`1<T> Insertable(List`1<T> insertObjs);
    public sealed virtual IInsertable`1<T> Insertable(T insertObj);
    public sealed virtual IInsertable`1<T> Insertable(T[] insertObjs);
    public sealed virtual InsertNavTaskInit`2<T, T> InsertNav(T data);
    public sealed virtual InsertNavTaskInit`2<T, T> InsertNav(List`1<T> datas);
    public sealed virtual InsertNavTaskInit`2<T, T> InsertNav(T data, InsertNavRootOptions rootOptions);
    public sealed virtual InsertNavTaskInit`2<T, T> InsertNav(List`1<T> datas, InsertNavRootOptions rootOptions);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(T data);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(List`1<T> datas);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(Expression`1<Func`2<T, bool>> whereExpression);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(T data, DeleteNavRootOptions options);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(List`1<T> datas, DeleteNavRootOptions options);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(Expression`1<Func`2<T, bool>> whereExpression, DeleteNavRootOptions options);
    public sealed virtual UpdateNavTaskInit`2<T, T> UpdateNav(T data);
    public sealed virtual UpdateNavTaskInit`2<T, T> UpdateNav(List`1<T> datas, UpdateNavRootOptions rootOptions);
    public sealed virtual UpdateNavTaskInit`2<T, T> UpdateNav(T data, UpdateNavRootOptions rootOptions);
    public sealed virtual UpdateNavTaskInit`2<T, T> UpdateNav(List`1<T> datas);
    public sealed virtual ISugarQueryable`1<T> Union(List`1<ISugarQueryable`1<T>> queryables);
    public sealed virtual ISugarQueryable`1<T> Union(ISugarQueryable`1[] queryables);
    public sealed virtual ISugarQueryable`1<T> UnionAll(List`1<ISugarQueryable`1<T>> queryables);
    public sealed virtual ISugarQueryable`1<T> UnionAll(ISugarQueryable`1[] queryables);
    public sealed virtual QueryMethodInfo QueryableByObject(Type entityType);
    public sealed virtual QueryMethodInfo QueryableByObject(Type entityType, string shortName);
    public sealed virtual ISugarQueryable`1<T> MasterQueryable();
    public sealed virtual ISugarQueryable`1<T> SlaveQueryable();
    public sealed virtual ISugarQueryable`1<T> SqlQueryable(string sql);
    public sealed virtual ISugarQueryable`1<ExpandoObject> Queryable(string tableName, string shortName);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Queryable(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Queryable(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Queryable(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Queryable(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Queryable(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Queryable(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Queryable(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Queryable(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Queryable(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Queryable(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Queryable(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Queryable(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Queryable(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Queryable(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Queryable(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Queryable(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Queryable(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Queryable(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Queryable(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Queryable(Expression`1<Func`7<T, T2, T3, T4, T5, T6, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Queryable(Expression`1<Func`7<T, T2, T3, T4, T5, T6, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Queryable(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Queryable(Expression`1<Func`6<T, T2, T3, T4, T5, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Queryable(Expression`1<Func`6<T, T2, T3, T4, T5, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(Expression`1<Func`5<T, T2, T3, T4, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(Expression`1<Func`5<T, T2, T3, T4, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Queryable(Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Queryable(Expression`1<Func`4<T, T2, T3, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Queryable(Expression`1<Func`4<T, T2, T3, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> Queryable(Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> Queryable(Expression`1<Func`3<T, T2, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> Queryable(Expression`1<Func`3<T, T2, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, JoinType joinType, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, ISugarQueryable`1<T3> joinQueryable3, JoinType joinType1, Expression`1<Func`4<T, T2, T3, bool>> joinExpression1, JoinType joinType2, Expression`1<Func`4<T, T2, T3, bool>> joinExpression2);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, ISugarQueryable`1<T3> joinQueryable3, ISugarQueryable`1<T4> joinQueryable4, JoinType joinType1, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression1, JoinType joinType2, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression2, JoinType joinType3, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression3);
    public sealed virtual ISugarQueryable`1<T> Queryable();
    public sealed virtual ISugarQueryable`1<T> Queryable(ISugarQueryable`1<T> queryable);
    public sealed virtual ISugarQueryable`1<T> Queryable(ISugarQueryable`1<T> queryable, string shortName);
    public sealed virtual ISugarQueryable`1<T> Queryable(string shortName);
    public sealed virtual GridSaveProvider`1<T> GridSave(List`1<T> saveList);
    public sealed virtual GridSaveProvider`1<T> GridSave(List`1<T> oldList, List`1<T> saveList);
    public sealed virtual StorageableDataTable Storageable(DataTable data);
    public sealed virtual StorageableDataTable Storageable(List`1<Dictionary`2<string, object>> dictionaryList, string tableName);
    public sealed virtual StorageableDataTable Storageable(Dictionary`2<string, object> dictionary, string tableName);
    public sealed virtual IStorageable`1<T> Storageable(List`1<T> dataList);
    public sealed virtual IStorageable`1<T> Storageable(IList`1<T> dataList);
    public sealed virtual IStorageable`1<T> Storageable(T[] dataList);
    public sealed virtual IStorageable`1<T> Storageable(T data);
    [ObsoleteAttribute("use Storageable")]
public sealed virtual ISaveable`1<T> Saveable(List`1<T> saveObjects);
    [ObsoleteAttribute("use Storageable")]
public sealed virtual ISaveable`1<T> Saveable(T saveObject);
    public sealed virtual StorageableMethodInfo StorageableByObject(object singleEntityObjectOrListObject);
    public sealed virtual IReportable`1<T> Reportable(T data);
    public sealed virtual IReportable`1<T> Reportable(List`1<T> list);
    public sealed virtual IReportable`1<T> Reportable(T[] array);
    public sealed virtual QueueList get_Queues();
    public sealed virtual void set_Queues(QueueList value);
    public sealed virtual void AddQueue(string sql, object parsmeters);
    public sealed virtual void AddQueue(string sql, List`1<SugarParameter> parsmeters);
    public sealed virtual void AddQueue(string sql, SugarParameter parsmeter);
    public sealed virtual int SaveQueues(bool isTran);
    public sealed virtual Tuple`7<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>, List`1<T7>> SaveQueues(bool isTran);
    public sealed virtual Tuple`6<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>> SaveQueues(bool isTran);
    public sealed virtual Tuple`5<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> SaveQueues(bool isTran);
    public sealed virtual Tuple`4<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>> SaveQueues(bool isTran);
    public sealed virtual Tuple`3<List`1<T>, List`1<T2>, List`1<T3>> SaveQueues(bool isTran);
    public sealed virtual Tuple`2<List`1<T>, List`1<T2>> SaveQueues(bool isTran);
    public sealed virtual List`1<T> SaveQueues(bool isTran);
    public sealed virtual Task`1<int> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`7<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>, List`1<T7>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`6<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`5<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`4<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`3<List`1<T>, List`1<T2>, List`1<T3>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`2<List`1<T>, List`1<T2>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<List`1<T>> SaveQueuesAsync(bool isTran);
    public sealed virtual IUpdateable`1<Dictionary`2<string, object>> UpdateableByDynamic(object updateDynamicObject);
    public sealed virtual UpdateMethodInfo UpdateableByObject(object singleEntityObjectOrListObject);
    public sealed virtual UpdateExpressionMethodInfo UpdateableByObject(Type entityType);
    public sealed virtual IUpdateable`1<T> Updateable();
    public sealed virtual IUpdateable`1<T> Updateable(Dictionary`2<string, object> columnDictionary);
    public sealed virtual IUpdateable`1<T> Updateable(object updateDynamicObject);
    public sealed virtual IUpdateable`1<T> Updateable(Expression`1<Func`2<T, bool>> columns);
    public sealed virtual IUpdateable`1<T> Updateable(Expression`1<Func`2<T, T>> columns);
    public sealed virtual IUpdateable`1<T> Updateable(List`1<T> UpdateObjs);
    public sealed virtual IUpdateable`1<T> Updateable(T UpdateObj);
    public sealed virtual IUpdateable`1<T> Updateable(T[] UpdateObjs);
    public sealed virtual IAdo get_Ado();
    public sealed virtual DeleteMethodInfo DeleteableByObject(object singleEntityObjectOrListObject);
    public sealed virtual IDeleteable`1<T> Deleteable();
    public sealed virtual IDeleteable`1<T> Deleteable(object primaryKeyValue);
    public sealed virtual IDeleteable`1<T> Deleteable(Object[] primaryKeyValues);
    public sealed virtual IDeleteable`1<T> Deleteable(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual IDeleteable`1<T> Deleteable(List`1<object> pkValue);
    public sealed virtual IDeleteable`1<T> Deleteable(List`1<T> deleteObjs);
    public sealed virtual IDeleteable`1<T> Deleteable(T deleteObj);
    public sealed virtual IFastest`1<T> Fastest();
    public sealed virtual void ThenMapper(IEnumerable`1<T> list, Action`1<T> action);
    public sealed virtual Task ThenMapperAsync(IEnumerable`1<T> list, Func`2<T, Task> action);
    public sealed virtual String[] GetCurrentConfigIds();
    public sealed virtual IContextMethods get_Utilities();
    public sealed virtual void set_Utilities(IContextMethods value);
    public sealed virtual AopProvider get_Aop();
    public sealed virtual ICodeFirst get_CodeFirst();
    public sealed virtual IDbFirst get_DbFirst();
    public sealed virtual IDbMaintenance get_DbMaintenance();
    public sealed virtual EntityMaintenance get_EntityMaintenance();
    public sealed virtual void set_EntityMaintenance(EntityMaintenance value);
    public sealed virtual QueryFilterProvider get_QueryFilter();
    public sealed virtual void set_QueryFilter(QueryFilterProvider value);
    public sealed virtual ITenant AsTenant();
    public sealed virtual SqlSugarTransaction UseTran();
    public sealed virtual void RemoveConnection(object configId);
    public sealed virtual void AddConnection(ConnectionConfig connection);
    public sealed virtual SqlSugarProvider GetConnectionWithAttr();
    public SqlSugarProvider GetConnectionWithAttr(Type type);
    public sealed virtual SqlSugarScopeProvider GetConnectionScopeWithAttr();
    public sealed virtual SqlSugarProvider GetConnection(object configId);
    public sealed virtual SqlSugarScopeProvider GetConnectionScope(object configId);
    public sealed virtual bool IsAnyConnection(object configId);
    public sealed virtual void ChangeDatabase(object configId);
    public sealed virtual void ChangeDatabase(Func`2<ConnectionConfig, bool> changeExpression);
    public sealed virtual void BeginTran();
    public sealed virtual void BeginTran(IsolationLevel iso);
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarClient/<BeginTranAsync>d__224")]
[DebuggerStepThroughAttribute]
public sealed virtual Task BeginTranAsync();
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarClient/<BeginTranAsync>d__225")]
[DebuggerStepThroughAttribute]
public sealed virtual Task BeginTranAsync(IsolationLevel iso);
    public sealed virtual void CommitTran();
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarClient/<CommitTranAsync>d__227")]
[DebuggerStepThroughAttribute]
public sealed virtual Task CommitTranAsync();
    public sealed virtual DbResult`1<bool> UseTran(Action action, Action`1<Exception> errorCallBack);
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarClient/<UseTranAsync>d__229")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<DbResult`1<bool>> UseTranAsync(Func`1<Task> action, Action`1<Exception> errorCallBack);
    public sealed virtual DbResult`1<T> UseTran(Func`1<T> action, Action`1<Exception> errorCallBack);
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarClient/<UseTranAsync>d__231`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<DbResult`1<T>> UseTranAsync(Func`1<Task`1<T>> action, Action`1<Exception> errorCallBack);
    public sealed virtual void RollbackTran();
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarClient/<RollbackTranAsync>d__233")]
[DebuggerStepThroughAttribute]
public sealed virtual Task RollbackTranAsync();
    public sealed virtual void Close();
    public sealed virtual void Open();
    public sealed virtual void Dispose();
    public sealed virtual SugarCacheProvider get_DataCache();
    public sealed virtual DynamicBuilder DynamicBuilder();
    public sealed virtual void Tracking(T data);
    public sealed virtual void ClearTracking();
    public sealed virtual void Tracking(List`1<T> datas);
    public sealed virtual SqlSugarClient CopyNew();
    public sealed virtual DateTime GetDate();
    public sealed virtual void InitMappingInfo(Type type);
    public sealed virtual void InitMappingInfo();
    public sealed virtual Task`1<SugarAsyncLock> AsyncLock(int timeOutSeconds);
    public sealed virtual SplitTableContext SplitHelper();
    public sealed virtual SplitTableContext SplitHelper(Type entityType);
    public sealed virtual SplitTableContextResult`1<T> SplitHelper(T data);
    public sealed virtual SplitTableContextResult`1<T> SplitHelper(List`1<T> dataList);
    private SqlSugarProvider GetContext();
    private SqlSugarProvider NoSameThreadAsync();
    private SqlSugarProvider NoSameThread();
    private void InitTenant();
    private SqlSugarProvider Synchronization();
    private SqlSugarProvider NoSameThreadAndShard();
    private SqlSugarProvider SameThreadAndShard();
    private bool IsAsync();
    private bool IsSingleInstanceAsync();
    private bool IsSynchronization();
    private SqlSugarProvider CopyClient();
    private void AddCallContext(SqlSugarProvider context);
    private SqlSugarProvider GetCallContext();
    protected virtual void InitContext(ConnectionConfig config);
    private void InitConfigs(List`1<ConnectionConfig> configs);
    private void AllClientEach(Action`1<ISqlSugarClient> action);
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarClient/<AllClientEachAsync>d__268")]
[DebuggerStepThroughAttribute]
private Task AllClientEachAsync(Func`2<ISqlSugarClient, Task> action);
    private void InitTenant(SugarTenant Tenant);
    public sealed virtual ISugarQueryable`1<T> QueryableWithAttr();
    public sealed virtual IInsertable`1<T> InsertableWithAttr(T insertObj);
    public sealed virtual IInsertable`1<T> InsertableWithAttr(List`1<T> insertObjs);
    public sealed virtual IUpdateable`1<T> UpdateableWithAttr(T updateObj);
    public sealed virtual IUpdateable`1<T> UpdateableWithAttr();
    public sealed virtual IUpdateable`1<T> UpdateableWithAttr(List`1<T> updateObjs);
    public sealed virtual IDeleteable`1<T> DeleteableWithAttr(T deleteObject);
    public sealed virtual IDeleteable`1<T> DeleteableWithAttr();
    public sealed virtual IDeleteable`1<T> DeleteableWithAttr(List`1<T> deleteObjects);
    [CompilerGeneratedAttribute]
private bool <GetCallContext>b__264_0(SqlSugarProvider it);
}
public class SqlSugar.SqlSugarDynamicExpressionParser : object {
    public static LambdaExpression ParseLambda(ParameterExpression[] parameterExpressions, Type type, string sql, Object[] objects);
}
public class SqlSugar.SqlSugarException : Exception {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Parametres>k__BackingField;
    public Exception InnerException;
    public string StackTrace;
    public MethodBase TargetSite;
    public string Source;
    public string Sql { get; public set; }
    public object Parametres { get; public set; }
    public SqlSugarException(string message);
    public SqlSugarException(SqlSugarProvider context, string message, string sql);
    public SqlSugarException(SqlSugarProvider context, string message, string sql, object pars);
    public SqlSugarException(SqlSugarProvider context, Exception ex, string sql, object pars);
    public SqlSugarException(SqlSugarProvider context, string message, object pars);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public void set_Sql(string value);
    [CompilerGeneratedAttribute]
public object get_Parametres();
    [CompilerGeneratedAttribute]
public void set_Parametres(object value);
}
public class SqlSugar.SqlSugarProvider : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarClient <Root>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConnectionConfig <CurrentConnectionConfig>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Guid <ContextID>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MappingTableList <MappingTables>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MappingColumnList <MappingColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IgnoreColumnList <IgnoreColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IgnoreColumnList <IgnoreInsertColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SugarActionType <SugarActionType>k__BackingField;
    public Dictionary`2<string, object> _TempItems;
    public QueueList _Queues;
    protected ISqlBuilder _SqlBuilder;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <_Context>k__BackingField;
    protected EntityMaintenance _EntityProvider;
    protected IAdo _Ado;
    protected ILambdaExpressions _LambdaExpressions;
    protected IContextMethods _RewritableMethods;
    protected IDbMaintenance _DbMaintenance;
    protected QueryFilterProvider _QueryFilterProvider;
    protected ConfigQuery _SqlConfigTable;
    public SqlSugarProvider Context { get; public set; }
    public SqlSugarClient Root { get; public set; }
    public ConnectionConfig CurrentConnectionConfig { get; public set; }
    public Dictionary`2<string, object> TempItems { get; public set; }
    public bool IsSystemTablesConfig { get; }
    public Guid ContextID { get; public set; }
    public MappingTableList MappingTables { get; public set; }
    public MappingColumnList MappingColumns { get; public set; }
    public IgnoreColumnList IgnoreColumns { get; public set; }
    public IgnoreColumnList IgnoreInsertColumns { get; public set; }
    public SugarActionType SugarActionType { get; public set; }
    public ConfigQuery ConfigQuery { get; public set; }
    protected SqlSugarProvider _Context { get; protected set; }
    protected IAdo ContextAdo { get; protected set; }
    protected IContextMethods ContextRewritableMethods { get; protected set; }
    public IAdo Ado { get; }
    public AopProvider Aop { get; }
    [ObsoleteAttribute("Use SqlSugarClient.Utilities")]
public IContextMethods RewritableMethods { get; public set; }
    public IContextMethods Utilities { get; public set; }
    public IDbFirst DbFirst { get; }
    public ICodeFirst CodeFirst { get; }
    public IDbMaintenance DbMaintenance { get; }
    public EntityMaintenance EntityMaintenance { get; public set; }
    public QueryFilterProvider QueryFilter { get; public set; }
    public QueueList Queues { get; public set; }
    public SugarCacheProvider DataCache { get; }
    public SqlSugarProvider(ConnectionConfig config);
    public SqlSugarProvider get_Context();
    public void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public SqlSugarClient get_Root();
    [CompilerGeneratedAttribute]
public void set_Root(SqlSugarClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ConnectionConfig get_CurrentConnectionConfig();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CurrentConnectionConfig(ConnectionConfig value);
    public sealed virtual Dictionary`2<string, object> get_TempItems();
    public sealed virtual void set_TempItems(Dictionary`2<string, object> value);
    public sealed virtual bool get_IsSystemTablesConfig();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ContextID();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContextID(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual MappingTableList get_MappingTables();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MappingTables(MappingTableList value);
    [CompilerGeneratedAttribute]
public sealed virtual MappingColumnList get_MappingColumns();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MappingColumns(MappingColumnList value);
    [CompilerGeneratedAttribute]
public sealed virtual IgnoreColumnList get_IgnoreColumns();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IgnoreColumns(IgnoreColumnList value);
    [CompilerGeneratedAttribute]
public sealed virtual IgnoreColumnList get_IgnoreInsertColumns();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IgnoreInsertColumns(IgnoreColumnList value);
    [CompilerGeneratedAttribute]
public sealed virtual SugarActionType get_SugarActionType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SugarActionType(SugarActionType value);
    public sealed virtual ConfigQuery get_ConfigQuery();
    public sealed virtual void set_ConfigQuery(ConfigQuery value);
    [CompilerGeneratedAttribute]
protected SqlSugarProvider get__Context();
    [CompilerGeneratedAttribute]
protected void set__Context(SqlSugarProvider value);
    protected IAdo get_ContextAdo();
    protected void set_ContextAdo(IAdo value);
    protected IContextMethods get_ContextRewritableMethods();
    protected void set_ContextRewritableMethods(IContextMethods value);
    protected void InitMappingInfo();
    protected void InitMappingInfo();
    protected void InitMappingInfo();
    protected void InitMappingInfo();
    protected void InitMappingInfo();
    protected void InitMappingInfo();
    protected void InitMappingInfo();
    protected void InitMappingInfo();
    protected void InitMappingInfo();
    protected void InitMappingInfo();
    protected void InitMappingInfo();
    public sealed virtual void InitMappingInfo();
    public sealed virtual void InitMappingInfo(Type type);
    public void InitMappingInfoNoCache(Type type);
    public EntityInfo GetEntityNoCacheInitMappingInfo(Type type);
    private void InitMappingInfo(EntityInfo entityInfo);
    protected ISugarQueryable`1<T> CreateQueryable();
    protected ISugarQueryable`1<T> CreateQueryable(ISugarQueryable`1<T> result);
    protected InsertableProvider`1<T> CreateInsertable(T[] insertObjs);
    protected DeleteableProvider`1<T> CreateDeleteable();
    protected UpdateableProvider`1<T> CreateUpdateable(T[] UpdateObjs);
    protected void CreateQueryJoin(Expression joinExpression, Type[] types, ISugarQueryable`1<T> queryable);
    protected void CreateEasyQueryJoin(Expression joinExpression, Type[] types, ISugarQueryable`1<T> queryable);
    private void _ThenMapper(IEnumerable`1<T> list, Action`1<T> action);
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarProvider/<_ThenMapperAsync>d__87`1")]
[DebuggerStepThroughAttribute]
private Task _ThenMapperAsync(IEnumerable`1<T> list, Func`2<T, Task> action);
    internal string GetN();
    public bool IsVarchar();
    private void CheckDbDependency(ConnectionConfig config);
    protected List`1<JoinQueryInfo> GetJoinInfos(ISqlBuilder sqlBuilder, Expression joinExpression, List`1& parameters, String& shortName, Type[] entityTypeArray);
    private String[] MergeJoinArray(String[] joinArray);
    protected Dictionary`2<string, string> GetEasyJoinInfo(Expression joinExpression, String& shortName, ISqlBuilder builder, Type[] entityTypeArray);
    public virtual IAdo get_Ado();
    public virtual AopProvider get_Aop();
    public virtual IContextMethods get_RewritableMethods();
    public virtual void set_RewritableMethods(IContextMethods value);
    public virtual IContextMethods get_Utilities();
    public virtual void set_Utilities(IContextMethods value);
    public sealed virtual QueryMethodInfo QueryableByObject(Type entityType);
    public sealed virtual QueryMethodInfo QueryableByObject(Type entityType, string shortName);
    public sealed virtual DateTime GetDate();
    public sealed virtual ISugarQueryable`1<T> MasterQueryable();
    public sealed virtual ISugarQueryable`1<T> SlaveQueryable();
    public virtual ISugarQueryable`1<T> Queryable();
    public virtual ISugarQueryable`1<T> Queryable(string shortName);
    public virtual ISugarQueryable`1<ExpandoObject> Queryable(string tableName, string shortName);
    public virtual ISugarQueryable`2<T, T2> Queryable(Expression`1<Func`3<T, T2, Object[]>> joinExpression);
    public virtual ISugarQueryable`2<T, T2> Queryable(Expression`1<Func`3<T, T2, JoinQueryInfos>> joinExpression);
    public virtual ISugarQueryable`3<T, T2, T3> Queryable(Expression`1<Func`4<T, T2, T3, Object[]>> joinExpression);
    public virtual ISugarQueryable`3<T, T2, T3> Queryable(Expression`1<Func`4<T, T2, T3, JoinQueryInfos>> joinExpression);
    public virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(Expression`1<Func`5<T, T2, T3, T4, Object[]>> joinExpression);
    public virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(Expression`1<Func`5<T, T2, T3, T4, JoinQueryInfos>> joinExpression);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> Queryable(Expression`1<Func`6<T, T2, T3, T4, T5, Object[]>> joinExpression);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> Queryable(Expression`1<Func`6<T, T2, T3, T4, T5, JoinQueryInfos>> joinExpression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Queryable(Expression`1<Func`7<T, T2, T3, T4, T5, T6, Object[]>> joinExpression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Queryable(Expression`1<Func`7<T, T2, T3, T4, T5, T6, JoinQueryInfos>> joinExpression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Queryable(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, Object[]>> joinExpression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Queryable(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, JoinQueryInfos>> joinExpression);
    public virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Queryable(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, Object[]>> joinExpression);
    public virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Queryable(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, JoinQueryInfos>> joinExpression);
    public virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Queryable(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, Object[]>> joinExpression);
    public virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Queryable(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, JoinQueryInfos>> joinExpression);
    public virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Queryable(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, Object[]>> joinExpression);
    public virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Queryable(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, JoinQueryInfos>> joinExpression);
    public virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Queryable(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Object[]>> joinExpression);
    public virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Queryable(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, JoinQueryInfos>> joinExpression);
    public virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Queryable(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Object[]>> joinExpression);
    public virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Queryable(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, JoinQueryInfos>> joinExpression);
    public virtual ISugarQueryable`2<T, T2> Queryable(Expression`1<Func`3<T, T2, bool>> joinExpression);
    public virtual ISugarQueryable`3<T, T2, T3> Queryable(Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public virtual ISugarQueryable`5<T, T2, T3, T4, T5> Queryable(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Queryable(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Queryable(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Queryable(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Queryable(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Queryable(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Queryable(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Queryable(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public virtual ISugarQueryable`1<T> Queryable(ISugarQueryable`1<T> queryable);
    public virtual ISugarQueryable`1<T> Queryable(ISugarQueryable`1<T> queryable, string shortName);
    public virtual ISugarQueryable`2<T, T2> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public virtual ISugarQueryable`2<T, T2> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, JoinType joinType, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public virtual ISugarQueryable`3<T, T2, T3> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, ISugarQueryable`1<T3> joinQueryable3, JoinType joinType1, Expression`1<Func`4<T, T2, T3, bool>> joinExpression1, JoinType joinType2, Expression`1<Func`4<T, T2, T3, bool>> joinExpression2);
    public virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, ISugarQueryable`1<T3> joinQueryable3, ISugarQueryable`1<T4> joinQueryable4, JoinType joinType1, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression1, JoinType joinType2, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression2, JoinType joinType3, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression3);
    public virtual ISugarQueryable`1<T> UnionAll(ISugarQueryable`1[] queryables);
    internal ISugarQueryable`1<T> _UnionAll(ISugarQueryable`1[] queryables);
    public virtual ISugarQueryable`1<T> UnionAll(List`1<ISugarQueryable`1<T>> queryables);
    public virtual ISugarQueryable`1<T> Union(ISugarQueryable`1[] queryables);
    public virtual ISugarQueryable`1<T> Union(List`1<ISugarQueryable`1<T>> queryables);
    public sealed virtual ISugarQueryable`1<T> SqlQueryable(string sql);
    public sealed virtual IInsertable`1<Dictionary`2<string, object>> InsertableByDynamic(object insertDynamicObject);
    public sealed virtual InsertMethodInfo InsertableByObject(object singleEntityObjectOrListObject);
    public virtual IInsertable`1<T> Insertable(T[] insertObjs);
    public virtual IInsertable`1<T> Insertable(List`1<T> insertObjs);
    public virtual IInsertable`1<T> Insertable(T insertObj);
    public virtual IInsertable`1<T> Insertable(Dictionary`2<string, object> columnDictionary);
    public virtual IInsertable`1<T> Insertable(object insertDynamicObject);
    public sealed virtual DeleteMethodInfo DeleteableByObject(object singleEntityObjectOrListObject);
    public virtual IDeleteable`1<T> Deleteable();
    public virtual IDeleteable`1<T> Deleteable(Expression`1<Func`2<T, bool>> expression);
    public virtual IDeleteable`1<T> Deleteable(object primaryKeyValue);
    public virtual IDeleteable`1<T> Deleteable(Object[] primaryKeyValues);
    public virtual IDeleteable`1<T> Deleteable(List`1<object> pkValue);
    public virtual IDeleteable`1<T> Deleteable(T deleteObj);
    public virtual IDeleteable`1<T> Deleteable(List`1<T> deleteObjs);
    public sealed virtual UpdateMethodInfo UpdateableByObject(object singleEntityObjectOrListObject);
    public sealed virtual UpdateExpressionMethodInfo UpdateableByObject(Type entityType);
    public virtual IUpdateable`1<T> Updateable(T[] UpdateObjs);
    public virtual IUpdateable`1<T> Updateable(List`1<T> UpdateObjs);
    public virtual IUpdateable`1<T> Updateable(T UpdateObj);
    public virtual IUpdateable`1<T> Updateable();
    public virtual IUpdateable`1<T> Updateable(Expression`1<Func`2<T, T>> columns);
    public virtual IUpdateable`1<T> Updateable(Expression`1<Func`2<T, bool>> columns);
    public sealed virtual IUpdateable`1<Dictionary`2<string, object>> UpdateableByDynamic(object updateDynamicObject);
    public virtual IUpdateable`1<T> Updateable(Dictionary`2<string, object> columnDictionary);
    public virtual IUpdateable`1<T> Updateable(object updateDynamicObject);
    public sealed virtual GridSaveProvider`1<T> GridSave(List`1<T> saveList);
    public sealed virtual GridSaveProvider`1<T> GridSave(List`1<T> oldList, List`1<T> saveList);
    public sealed virtual IStorageable`1<T> Storageable(T[] dataList);
    public sealed virtual ISaveable`1<T> Saveable(List`1<T> saveObjects);
    public sealed virtual ISaveable`1<T> Saveable(T saveObject);
    public sealed virtual StorageableDataTable Storageable(List`1<Dictionary`2<string, object>> dictionaryList, string tableName);
    public sealed virtual StorageableDataTable Storageable(Dictionary`2<string, object> dictionary, string tableName);
    public sealed virtual IStorageable`1<T> Storageable(List`1<T> dataList);
    public sealed virtual IStorageable`1<T> Storageable(IList`1<T> dataList);
    public sealed virtual IStorageable`1<T> Storageable(T data);
    public sealed virtual StorageableDataTable Storageable(DataTable data);
    public sealed virtual StorageableMethodInfo StorageableByObject(object singleEntityObjectOrList);
    public sealed virtual IReportable`1<T> Reportable(T data);
    public sealed virtual IReportable`1<T> Reportable(List`1<T> list);
    public sealed virtual IReportable`1<T> Reportable(T[] list);
    public sealed virtual InsertNavTaskInit`2<T, T> InsertNav(T data);
    public sealed virtual InsertNavTaskInit`2<T, T> InsertNav(List`1<T> datas);
    public sealed virtual InsertNavTaskInit`2<T, T> InsertNav(T data, InsertNavRootOptions rootOptions);
    public sealed virtual InsertNavTaskInit`2<T, T> InsertNav(List`1<T> datas, InsertNavRootOptions rootOptions);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(T data);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(List`1<T> datas);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(Expression`1<Func`2<T, bool>> whereExpression);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(T data, DeleteNavRootOptions options);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(List`1<T> datas, DeleteNavRootOptions options);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(Expression`1<Func`2<T, bool>> whereExpression, DeleteNavRootOptions options);
    public sealed virtual UpdateNavTaskInit`2<T, T> UpdateNav(T data);
    public sealed virtual UpdateNavTaskInit`2<T, T> UpdateNav(List`1<T> datas);
    public sealed virtual UpdateNavTaskInit`2<T, T> UpdateNav(T data, UpdateNavRootOptions rootOptions);
    public sealed virtual UpdateNavTaskInit`2<T, T> UpdateNav(List`1<T> datas, UpdateNavRootOptions rootOptions);
    public virtual IDbFirst get_DbFirst();
    public virtual ICodeFirst get_CodeFirst();
    public virtual IDbMaintenance get_DbMaintenance();
    public virtual EntityMaintenance get_EntityMaintenance();
    public virtual void set_EntityMaintenance(EntityMaintenance value);
    public virtual QueryFilterProvider get_QueryFilter();
    public virtual void set_QueryFilter(QueryFilterProvider value);
    public sealed virtual T CreateContext(bool isTran);
    public sealed virtual SugarUnitOfWork CreateContext(bool isTran);
    public virtual SimpleClient`1<T> GetSimpleClient();
    public sealed virtual RepositoryType GetRepository();
    public virtual void Close();
    public virtual void Open();
    public virtual void Dispose();
    public sealed virtual int SaveQueues(bool isTran);
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarProvider/<SaveQueuesAsync>d__233")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> SaveQueuesAsync(bool isTran);
    public sealed virtual List`1<T> SaveQueues(bool isTran);
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarProvider/<SaveQueuesAsync>d__235`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> SaveQueuesAsync(bool isTran);
    public sealed virtual Tuple`2<List`1<T>, List`1<T2>> SaveQueues(bool isTran);
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarProvider/<SaveQueuesAsync>d__237`2")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Tuple`2<List`1<T>, List`1<T2>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Tuple`3<List`1<T>, List`1<T2>, List`1<T3>> SaveQueues(bool isTran);
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarProvider/<SaveQueuesAsync>d__239`3")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Tuple`3<List`1<T>, List`1<T2>, List`1<T3>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Tuple`4<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>> SaveQueues(bool isTran);
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarProvider/<SaveQueuesAsync>d__241`4")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Tuple`4<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Tuple`5<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> SaveQueues(bool isTran);
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarProvider/<SaveQueuesAsync>d__243`5")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Tuple`5<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Tuple`6<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>> SaveQueues(bool isTran);
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarProvider/<SaveQueuesAsync>d__245`6")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Tuple`6<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Tuple`7<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>, List`1<T7>> SaveQueues(bool isTran);
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarProvider/<SaveQueuesAsync>d__247`7")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Tuple`7<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>, List`1<T7>>> SaveQueuesAsync(bool isTran);
    public sealed virtual void AddQueue(string sql, object parsmeters);
    public sealed virtual void AddQueue(string sql, SugarParameter parsmeter);
    public sealed virtual void AddQueue(string sql, List`1<SugarParameter> parsmeters);
    public sealed virtual QueueList get_Queues();
    public sealed virtual void set_Queues(QueueList value);
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarProvider/<SaveQueuesProviderAsync>d__254`1")]
[DebuggerStepThroughAttribute]
private Task`1<T> SaveQueuesProviderAsync(bool isTran, Func`3<string, List`1<SugarParameter>, Task`1<T>> func);
    private T SaveQueuesProvider(bool isTran, Func`3<string, List`1<SugarParameter>, T> func);
    public sealed virtual SugarCacheProvider get_DataCache();
    public sealed virtual SplitTableContext SplitHelper();
    public sealed virtual SplitTableContext SplitHelper(Type entityType);
    public sealed virtual SplitTableContextResult`1<T> SplitHelper(T data);
    public sealed virtual SplitTableContextResult`1<T> SplitHelper(List`1<T> data);
    public sealed virtual ITenant AsTenant();
    public sealed virtual IFastest`1<T> Fastest();
    public sealed virtual Task`1<SugarAsyncLock> AsyncLock(int timeOutSeconds);
    public sealed virtual DynamicBuilder DynamicBuilder();
    public sealed virtual void Tracking(T data);
    public sealed virtual void ClearTracking();
    public sealed virtual void Tracking(List`1<T> datas);
    public sealed virtual SqlSugarClient CopyNew();
    public sealed virtual void ThenMapper(IEnumerable`1<T> list, Action`1<T> action);
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarProvider/<ThenMapperAsync>d__271`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task ThenMapperAsync(IEnumerable`1<T> list, Func`2<T, Task> action);
    [CompilerGeneratedAttribute]
private int <SaveQueues>b__232_0(string sql, List`1<SugarParameter> parameters);
    [CompilerGeneratedAttribute]
private Task`1<int> <SaveQueuesAsync>b__233_0(string sql, List`1<SugarParameter> parameters);
    [CompilerGeneratedAttribute]
private List`1<T> <SaveQueues>b__234_0(string sql, List`1<SugarParameter> parameters);
    [CompilerGeneratedAttribute]
private Task`1<List`1<T>> <SaveQueuesAsync>b__235_0(string sql, List`1<SugarParameter> parameters);
    [CompilerGeneratedAttribute]
private Tuple`2<List`1<T>, List`1<T2>> <SaveQueues>b__236_0(string sql, List`1<SugarParameter> parameters);
    [CompilerGeneratedAttribute]
private Task`1<Tuple`2<List`1<T>, List`1<T2>>> <SaveQueuesAsync>b__237_0(string sql, List`1<SugarParameter> parameters);
    [CompilerGeneratedAttribute]
private Tuple`3<List`1<T>, List`1<T2>, List`1<T3>> <SaveQueues>b__238_0(string sql, List`1<SugarParameter> parameters);
    [CompilerGeneratedAttribute]
private Task`1<Tuple`3<List`1<T>, List`1<T2>, List`1<T3>>> <SaveQueuesAsync>b__239_0(string sql, List`1<SugarParameter> parameters);
    [CompilerGeneratedAttribute]
private Tuple`4<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>> <SaveQueues>b__240_0(string sql, List`1<SugarParameter> parameters);
    [CompilerGeneratedAttribute]
private Task`1<Tuple`4<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>>> <SaveQueuesAsync>b__241_0(string sql, List`1<SugarParameter> parameters);
    [CompilerGeneratedAttribute]
private Tuple`5<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> <SaveQueues>b__242_0(string sql, List`1<SugarParameter> parameters);
    [CompilerGeneratedAttribute]
private Task`1<Tuple`5<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> <SaveQueuesAsync>b__243_0(string sql, List`1<SugarParameter> parameters);
    [CompilerGeneratedAttribute]
private Tuple`6<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>> <SaveQueues>b__244_0(string sql, List`1<SugarParameter> parameters);
    [CompilerGeneratedAttribute]
private Task`1<Tuple`6<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>>> <SaveQueuesAsync>b__245_0(string sql, List`1<SugarParameter> parameters);
    [CompilerGeneratedAttribute]
private Tuple`7<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>, List`1<T7>> <SaveQueues>b__246_0(string sql, List`1<SugarParameter> parameters);
    [CompilerGeneratedAttribute]
private Task`1<Tuple`7<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>, List`1<T7>>> <SaveQueuesAsync>b__247_0(string sql, List`1<SugarParameter> parameters);
}
public class SqlSugar.SqlSugarScope : object {
    private List`1<ConnectionConfig> _configs;
    private Action`1<SqlSugarClient> _configAction;
    public SqlSugarClient ScopedContext { get; }
    public SugarActionType SugarActionType { get; public set; }
    public MappingTableList MappingTables { get; public set; }
    public MappingColumnList MappingColumns { get; public set; }
    public IgnoreColumnList IgnoreColumns { get; public set; }
    public IgnoreColumnList IgnoreInsertColumns { get; public set; }
    public Dictionary`2<string, object> TempItems { get; public set; }
    public ConfigQuery ConfigQuery { get; public set; }
    public bool IsSystemTablesConfig { get; }
    public Guid ContextID { get; public set; }
    public ConnectionConfig CurrentConnectionConfig { get; public set; }
    public IAdo Ado { get; }
    public AopProvider Aop { get; }
    public ICodeFirst CodeFirst { get; }
    public IDbFirst DbFirst { get; }
    public IDbMaintenance DbMaintenance { get; }
    public EntityMaintenance EntityMaintenance { get; public set; }
    public QueryFilterProvider QueryFilter { get; public set; }
    public IContextMethods Utilities { get; public set; }
    public QueueList Queues { get; public set; }
    public SugarCacheProvider DataCache { get; }
    public SqlSugarScope(ConnectionConfig config);
    public SqlSugarScope(List`1<ConnectionConfig> configs);
    public SqlSugarScope(ConnectionConfig config, Action`1<SqlSugarClient> configAction);
    public SqlSugarScope(List`1<ConnectionConfig> configs, Action`1<SqlSugarClient> configAction);
    protected virtual SqlSugarClient GetContext();
    private SqlSugarClient GetAsyncContext(string key);
    private SqlSugarClient GetThreadContext(string key);
    private List`1<ConnectionConfig> GetCopyConfigs();
    public SqlSugarClient get_ScopedContext();
    public sealed virtual SugarActionType get_SugarActionType();
    public sealed virtual void set_SugarActionType(SugarActionType value);
    public sealed virtual MappingTableList get_MappingTables();
    public sealed virtual void set_MappingTables(MappingTableList value);
    public sealed virtual MappingColumnList get_MappingColumns();
    public sealed virtual void set_MappingColumns(MappingColumnList value);
    public sealed virtual IgnoreColumnList get_IgnoreColumns();
    public sealed virtual void set_IgnoreColumns(IgnoreColumnList value);
    public sealed virtual IgnoreColumnList get_IgnoreInsertColumns();
    public sealed virtual void set_IgnoreInsertColumns(IgnoreColumnList value);
    public sealed virtual Dictionary`2<string, object> get_TempItems();
    public sealed virtual void set_TempItems(Dictionary`2<string, object> value);
    public sealed virtual ConfigQuery get_ConfigQuery();
    public sealed virtual void set_ConfigQuery(ConfigQuery value);
    public sealed virtual bool get_IsSystemTablesConfig();
    public sealed virtual Guid get_ContextID();
    public sealed virtual void set_ContextID(Guid value);
    public sealed virtual ConnectionConfig get_CurrentConnectionConfig();
    public sealed virtual void set_CurrentConnectionConfig(ConnectionConfig value);
    public sealed virtual IAdo get_Ado();
    public sealed virtual AopProvider get_Aop();
    public sealed virtual ICodeFirst get_CodeFirst();
    public sealed virtual IDbFirst get_DbFirst();
    public sealed virtual IDbMaintenance get_DbMaintenance();
    public sealed virtual EntityMaintenance get_EntityMaintenance();
    public sealed virtual void set_EntityMaintenance(EntityMaintenance value);
    public sealed virtual QueryFilterProvider get_QueryFilter();
    public sealed virtual void set_QueryFilter(QueryFilterProvider value);
    public sealed virtual IContextMethods get_Utilities();
    public sealed virtual void set_Utilities(IContextMethods value);
    public sealed virtual QueueList get_Queues();
    public sealed virtual void set_Queues(QueueList value);
    public sealed virtual SugarCacheProvider get_DataCache();
    public sealed virtual ITenant AsTenant();
    public sealed virtual void AddConnection(ConnectionConfig connection);
    public sealed virtual void AddQueue(string sql, object parsmeters);
    public sealed virtual void AddQueue(string sql, List`1<SugarParameter> parsmeters);
    public sealed virtual void AddQueue(string sql, SugarParameter parsmeter);
    public sealed virtual void BeginTran();
    public sealed virtual void BeginTran(IsolationLevel iso);
    public sealed virtual Task BeginTranAsync();
    [AsyncStateMachineAttribute("SqlSugar.SqlSugarScope/<BeginTranAsync>d__74")]
[DebuggerStepThroughAttribute]
public sealed virtual Task BeginTranAsync(IsolationLevel iso);
    public sealed virtual void ChangeDatabase(object configId);
    public sealed virtual void ChangeDatabase(Func`2<ConnectionConfig, bool> changeExpression);
    public sealed virtual void Close();
    public sealed virtual void CommitTran();
    public sealed virtual Task CommitTranAsync();
    public sealed virtual DeleteMethodInfo DeleteableByObject(object singleEntityObjectOrListObject);
    public sealed virtual IDeleteable`1<T> Deleteable();
    public sealed virtual IDeleteable`1<T> Deleteable(object primaryKeyValue);
    public sealed virtual IDeleteable`1<T> Deleteable(Object[] primaryKeyValues);
    public sealed virtual IDeleteable`1<T> Deleteable(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual IDeleteable`1<T> Deleteable(List`1<object> pkValue);
    public sealed virtual IDeleteable`1<T> Deleteable(List`1<T> deleteObjs);
    public sealed virtual IDeleteable`1<T> Deleteable(T deleteObj);
    public sealed virtual void Dispose();
    public sealed virtual SqlSugarProvider GetConnection(object configId);
    public sealed virtual SqlSugarScopeProvider GetConnectionScope(object configId);
    public sealed virtual SqlSugarProvider GetConnectionWithAttr();
    public sealed virtual SqlSugarScopeProvider GetConnectionScopeWithAttr();
    public sealed virtual DateTime GetDate();
    public sealed virtual T CreateContext(bool isTran);
    public sealed virtual SugarUnitOfWork CreateContext(bool isTran);
    public sealed virtual SimpleClient`1<T> GetSimpleClient();
    public sealed virtual RepositoryType GetRepository();
    public sealed virtual void InitMappingInfo(Type type);
    public sealed virtual void InitMappingInfo();
    public sealed virtual IInsertable`1<Dictionary`2<string, object>> InsertableByDynamic(object insertDynamicObject);
    public sealed virtual IInsertable`1<T> Insertable(Dictionary`2<string, object> columnDictionary);
    public sealed virtual IInsertable`1<T> Insertable(object insertDynamicObject);
    public sealed virtual IInsertable`1<T> Insertable(List`1<T> insertObjs);
    public sealed virtual IInsertable`1<T> Insertable(T insertObj);
    public sealed virtual IInsertable`1<T> Insertable(T[] insertObjs);
    public sealed virtual InsertMethodInfo InsertableByObject(object singleEntityObjectOrListObject);
    public sealed virtual void Open();
    public sealed virtual ISugarQueryable`1<T> SlaveQueryable();
    public sealed virtual ISugarQueryable`1<T> MasterQueryable();
    public sealed virtual ISugarQueryable`1<ExpandoObject> Queryable(string tableName, string shortName);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Queryable(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Queryable(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Queryable(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Queryable(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Queryable(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Queryable(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Queryable(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Queryable(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Queryable(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Queryable(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Queryable(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Queryable(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Queryable(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Queryable(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Queryable(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Queryable(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Queryable(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Queryable(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Queryable(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Queryable(Expression`1<Func`7<T, T2, T3, T4, T5, T6, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Queryable(Expression`1<Func`7<T, T2, T3, T4, T5, T6, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Queryable(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Queryable(Expression`1<Func`6<T, T2, T3, T4, T5, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Queryable(Expression`1<Func`6<T, T2, T3, T4, T5, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(Expression`1<Func`5<T, T2, T3, T4, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(Expression`1<Func`5<T, T2, T3, T4, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Queryable(Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Queryable(Expression`1<Func`4<T, T2, T3, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Queryable(Expression`1<Func`4<T, T2, T3, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> Queryable(Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> Queryable(Expression`1<Func`3<T, T2, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> Queryable(Expression`1<Func`3<T, T2, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, JoinType joinType, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, ISugarQueryable`1<T3> joinQueryable3, JoinType joinType1, Expression`1<Func`4<T, T2, T3, bool>> joinExpression1, JoinType joinType2, Expression`1<Func`4<T, T2, T3, bool>> joinExpression2);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, ISugarQueryable`1<T3> joinQueryable3, ISugarQueryable`1<T4> joinQueryable4, JoinType joinType1, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression1, JoinType joinType2, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression2, JoinType joinType3, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression3);
    public sealed virtual ISugarQueryable`1<T> Queryable();
    public sealed virtual ISugarQueryable`1<T> Queryable(ISugarQueryable`1<T> queryable);
    public sealed virtual ISugarQueryable`1<T> Queryable(ISugarQueryable`1<T> queryable, string shortName);
    public sealed virtual ISugarQueryable`1<T> Queryable(string shortName);
    public sealed virtual IReportable`1<T> Reportable(T data);
    public sealed virtual IReportable`1<T> Reportable(List`1<T> list);
    public sealed virtual IReportable`1<T> Reportable(T[] array);
    public sealed virtual void RollbackTran();
    public sealed virtual Task RollbackTranAsync();
    [ObsoleteAttribute("use Storageable")]
public sealed virtual ISaveable`1<T> Saveable(List`1<T> saveObjects);
    [ObsoleteAttribute("use Storageable")]
public sealed virtual ISaveable`1<T> Saveable(T saveObject);
    public sealed virtual int SaveQueues(bool isTran);
    public sealed virtual Tuple`7<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>, List`1<T7>> SaveQueues(bool isTran);
    public sealed virtual Tuple`6<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>> SaveQueues(bool isTran);
    public sealed virtual Tuple`5<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> SaveQueues(bool isTran);
    public sealed virtual Tuple`4<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>> SaveQueues(bool isTran);
    public sealed virtual Tuple`3<List`1<T>, List`1<T2>, List`1<T3>> SaveQueues(bool isTran);
    public sealed virtual Tuple`2<List`1<T>, List`1<T2>> SaveQueues(bool isTran);
    public sealed virtual List`1<T> SaveQueues(bool isTran);
    public sealed virtual Task`1<int> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`7<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>, List`1<T7>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`6<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`5<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`4<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`3<List`1<T>, List`1<T2>, List`1<T3>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`2<List`1<T>, List`1<T2>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<List`1<T>> SaveQueuesAsync(bool isTran);
    public sealed virtual ISugarQueryable`1<T> SqlQueryable(string sql);
    public sealed virtual IStorageable`1<T> Storageable(T[] dataList);
    public sealed virtual StorageableDataTable Storageable(List`1<Dictionary`2<string, object>> dictionaryList, string tableName);
    public sealed virtual StorageableDataTable Storageable(Dictionary`2<string, object> dictionary, string tableName);
    public sealed virtual IStorageable`1<T> Storageable(List`1<T> dataList);
    public sealed virtual IStorageable`1<T> Storageable(IList`1<T> dataList);
    public sealed virtual IStorageable`1<T> Storageable(T data);
    public sealed virtual StorageableDataTable Storageable(DataTable data);
    public sealed virtual StorageableMethodInfo StorageableByObject(object singleEntityObjectOrListObject);
    public sealed virtual ISugarQueryable`1<T> Union(List`1<ISugarQueryable`1<T>> queryables);
    public sealed virtual ISugarQueryable`1<T> Union(ISugarQueryable`1[] queryables);
    public sealed virtual ISugarQueryable`1<T> UnionAll(List`1<ISugarQueryable`1<T>> queryables);
    public sealed virtual ISugarQueryable`1<T> UnionAll(ISugarQueryable`1[] queryables);
    public sealed virtual UpdateMethodInfo UpdateableByObject(object singleEntityObjectOrListObject);
    public sealed virtual UpdateExpressionMethodInfo UpdateableByObject(Type entityType);
    public sealed virtual IUpdateable`1<Dictionary`2<string, object>> UpdateableByDynamic(object updateDynamicObject);
    public sealed virtual IUpdateable`1<T> Updateable();
    public sealed virtual IUpdateable`1<T> Updateable(Dictionary`2<string, object> columnDictionary);
    public sealed virtual IUpdateable`1<T> Updateable(object updateDynamicObject);
    public sealed virtual IUpdateable`1<T> Updateable(Expression`1<Func`2<T, bool>> columns);
    public sealed virtual IUpdateable`1<T> Updateable(Expression`1<Func`2<T, T>> columns);
    public sealed virtual IUpdateable`1<T> Updateable(List`1<T> UpdateObjs);
    public sealed virtual IUpdateable`1<T> Updateable(T UpdateObj);
    public sealed virtual IUpdateable`1<T> Updateable(T[] UpdateObjs);
    public sealed virtual SplitTableContext SplitHelper();
    public sealed virtual SplitTableContext SplitHelper(Type entityType);
    public sealed virtual SplitTableContextResult`1<T> SplitHelper(T data);
    public sealed virtual SplitTableContextResult`1<T> SplitHelper(List`1<T> dataList);
    public sealed virtual SqlSugarTransaction UseTran();
    public sealed virtual DbResult`1<bool> UseTran(Action action, Action`1<Exception> errorCallBack);
    public sealed virtual DbResult`1<T> UseTran(Func`1<T> action, Action`1<Exception> errorCallBack);
    public sealed virtual Task`1<DbResult`1<bool>> UseTranAsync(Func`1<Task> action, Action`1<Exception> errorCallBack);
    public sealed virtual Task`1<DbResult`1<T>> UseTranAsync(Func`1<Task`1<T>> action, Action`1<Exception> errorCallBack);
    public sealed virtual bool IsAnyConnection(object configId);
    public sealed virtual IFastest`1<T> Fastest();
    public sealed virtual void ThenMapper(IEnumerable`1<T> list, Action`1<T> action);
    public sealed virtual Task ThenMapperAsync(IEnumerable`1<T> list, Func`2<T, Task> action);
    public sealed virtual ISugarQueryable`1<T> QueryableWithAttr();
    public sealed virtual IInsertable`1<T> InsertableWithAttr(T insertObj);
    public sealed virtual IInsertable`1<T> InsertableWithAttr(List`1<T> insertObjs);
    public sealed virtual IUpdateable`1<T> UpdateableWithAttr(T updateObj);
    public sealed virtual IUpdateable`1<T> UpdateableWithAttr();
    public sealed virtual IUpdateable`1<T> UpdateableWithAttr(List`1<T> updateObjs);
    public sealed virtual IDeleteable`1<T> DeleteableWithAttr(T deleteObj);
    public sealed virtual IDeleteable`1<T> DeleteableWithAttr();
    public sealed virtual IDeleteable`1<T> DeleteableWithAttr(List`1<T> deleteObjs);
    public sealed virtual InsertNavTaskInit`2<T, T> InsertNav(T data);
    public sealed virtual InsertNavTaskInit`2<T, T> InsertNav(List`1<T> datas);
    public sealed virtual InsertNavTaskInit`2<T, T> InsertNav(T data, InsertNavRootOptions rootOptions);
    public sealed virtual InsertNavTaskInit`2<T, T> InsertNav(List`1<T> datas, InsertNavRootOptions rootOptions);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(T data);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(List`1<T> datas);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(Expression`1<Func`2<T, bool>> whereExpression);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(T data, DeleteNavRootOptions options);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(List`1<T> datas, DeleteNavRootOptions options);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(Expression`1<Func`2<T, bool>> whereExpression, DeleteNavRootOptions options);
    public sealed virtual UpdateNavTaskInit`2<T, T> UpdateNav(T data);
    public sealed virtual UpdateNavTaskInit`2<T, T> UpdateNav(List`1<T> datas);
    public sealed virtual UpdateNavTaskInit`2<T, T> UpdateNav(T data, UpdateNavRootOptions rootOptions);
    public sealed virtual UpdateNavTaskInit`2<T, T> UpdateNav(List`1<T> datas, UpdateNavRootOptions rootOptions);
    public sealed virtual SqlSugarClient CopyNew();
    public sealed virtual DynamicBuilder DynamicBuilder();
    public sealed virtual void Tracking(T data);
    public sealed virtual void Tracking(List`1<T> datas);
    public sealed virtual void RemoveConnection(object configId);
    public sealed virtual Task`1<SugarAsyncLock> AsyncLock(int timeOutSeconds);
    public sealed virtual QueryMethodInfo QueryableByObject(Type entityType);
    public sealed virtual QueryMethodInfo QueryableByObject(Type entityType, string shortName);
    public sealed virtual GridSaveProvider`1<T> GridSave(List`1<T> oldList, List`1<T> saveList);
    public sealed virtual GridSaveProvider`1<T> GridSave(List`1<T> saveList);
    public sealed virtual void ClearTracking();
    public sealed virtual String[] GetCurrentConfigIds();
}
public class SqlSugar.SqlSugarScopeProvider : object {
    internal SqlSugarProvider conn;
    internal string initThreadMainId;
    internal string initkey;
    private StackFrame[] frames;
    public SqlSugarProvider ScopedContext { get; }
    public SugarActionType SugarActionType { get; public set; }
    public MappingTableList MappingTables { get; public set; }
    public MappingColumnList MappingColumns { get; public set; }
    public IgnoreColumnList IgnoreColumns { get; public set; }
    public IgnoreColumnList IgnoreInsertColumns { get; public set; }
    public Dictionary`2<string, object> TempItems { get; public set; }
    public ConfigQuery ConfigQuery { get; public set; }
    public bool IsSystemTablesConfig { get; }
    public Guid ContextID { get; public set; }
    public ConnectionConfig CurrentConnectionConfig { get; public set; }
    public IAdo Ado { get; }
    public AopProvider Aop { get; }
    public ICodeFirst CodeFirst { get; }
    public IDbFirst DbFirst { get; }
    public IDbMaintenance DbMaintenance { get; }
    public EntityMaintenance EntityMaintenance { get; public set; }
    public QueryFilterProvider QueryFilter { get; public set; }
    public IContextMethods Utilities { get; public set; }
    public QueueList Queues { get; public set; }
    public SugarCacheProvider DataCache { get; }
    public SqlSugarScopeProvider(SqlSugarProvider conn);
    private static string GetCurrentThreadId();
    public SqlSugarProvider get_ScopedContext();
    private SqlSugarProvider GetAsyncContext(bool isInit);
    private SqlSugarProvider GetThreadContext(bool isInit);
    protected virtual SqlSugarProvider GetContext(bool isInit);
    private string GetKey();
    public sealed virtual Task`1<SugarAsyncLock> AsyncLock(int timeOutSeconds);
    public sealed virtual SugarActionType get_SugarActionType();
    public sealed virtual void set_SugarActionType(SugarActionType value);
    public sealed virtual MappingTableList get_MappingTables();
    public sealed virtual void set_MappingTables(MappingTableList value);
    public sealed virtual MappingColumnList get_MappingColumns();
    public sealed virtual void set_MappingColumns(MappingColumnList value);
    public sealed virtual IgnoreColumnList get_IgnoreColumns();
    public sealed virtual void set_IgnoreColumns(IgnoreColumnList value);
    public sealed virtual IgnoreColumnList get_IgnoreInsertColumns();
    public sealed virtual void set_IgnoreInsertColumns(IgnoreColumnList value);
    public sealed virtual Dictionary`2<string, object> get_TempItems();
    public sealed virtual void set_TempItems(Dictionary`2<string, object> value);
    public sealed virtual ConfigQuery get_ConfigQuery();
    public sealed virtual void set_ConfigQuery(ConfigQuery value);
    public sealed virtual bool get_IsSystemTablesConfig();
    public sealed virtual Guid get_ContextID();
    public sealed virtual void set_ContextID(Guid value);
    public sealed virtual ConnectionConfig get_CurrentConnectionConfig();
    public sealed virtual void set_CurrentConnectionConfig(ConnectionConfig value);
    public sealed virtual IAdo get_Ado();
    public sealed virtual AopProvider get_Aop();
    public sealed virtual ICodeFirst get_CodeFirst();
    public sealed virtual IDbFirst get_DbFirst();
    public sealed virtual IDbMaintenance get_DbMaintenance();
    public sealed virtual EntityMaintenance get_EntityMaintenance();
    public sealed virtual void set_EntityMaintenance(EntityMaintenance value);
    public sealed virtual QueryFilterProvider get_QueryFilter();
    public sealed virtual void set_QueryFilter(QueryFilterProvider value);
    public sealed virtual IContextMethods get_Utilities();
    public sealed virtual void set_Utilities(IContextMethods value);
    public sealed virtual QueueList get_Queues();
    public sealed virtual void set_Queues(QueueList value);
    public sealed virtual SugarCacheProvider get_DataCache();
    public sealed virtual void AddQueue(string sql, object parsmeters);
    public sealed virtual void AddQueue(string sql, List`1<SugarParameter> parsmeters);
    public sealed virtual void AddQueue(string sql, SugarParameter parsmeter);
    public sealed virtual void Close();
    public sealed virtual DeleteMethodInfo DeleteableByObject(object singleEntityObjectOrListObject);
    public sealed virtual IDeleteable`1<T> Deleteable();
    public sealed virtual IDeleteable`1<T> Deleteable(object primaryKeyValue);
    public sealed virtual IDeleteable`1<T> Deleteable(Object[] primaryKeyValues);
    public sealed virtual IDeleteable`1<T> Deleteable(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual IDeleteable`1<T> Deleteable(List`1<object> pkValue);
    public sealed virtual IDeleteable`1<T> Deleteable(List`1<T> deleteObjs);
    public sealed virtual IDeleteable`1<T> Deleteable(T deleteObj);
    public sealed virtual void Dispose();
    public sealed virtual DateTime GetDate();
    public sealed virtual T CreateContext(bool isTran);
    public sealed virtual SugarUnitOfWork CreateContext(bool isTran);
    public sealed virtual SimpleClient`1<T> GetSimpleClient();
    public sealed virtual RepositoryType GetRepository();
    public sealed virtual void InitMappingInfo(Type type);
    public sealed virtual void InitMappingInfo();
    public sealed virtual IInsertable`1<Dictionary`2<string, object>> InsertableByDynamic(object insertDynamicObject);
    public sealed virtual InsertMethodInfo InsertableByObject(object singleEntityObjectOrListObject);
    public sealed virtual IInsertable`1<T> Insertable(Dictionary`2<string, object> columnDictionary);
    public sealed virtual IInsertable`1<T> Insertable(object insertDynamicObject);
    public sealed virtual IInsertable`1<T> Insertable(List`1<T> insertObjs);
    public sealed virtual IInsertable`1<T> Insertable(T insertObj);
    public sealed virtual IInsertable`1<T> Insertable(T[] insertObjs);
    public sealed virtual void Open();
    public sealed virtual ISugarQueryable`1<T> SlaveQueryable();
    public sealed virtual ISugarQueryable`1<T> MasterQueryable();
    public sealed virtual ISugarQueryable`1<ExpandoObject> Queryable(string tableName, string shortName);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Queryable(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> joinExpression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Queryable(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Queryable(Expression`1<Func`13<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Queryable(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Queryable(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Queryable(Expression`1<Func`12<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Queryable(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Queryable(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`10<T, T2, T3, T4, T5, T6, T7, T8, T9, T10> Queryable(Expression`1<Func`11<T, T2, T3, T4, T5, T6, T7, T8, T9, T10, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Queryable(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, bool>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Queryable(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`9<T, T2, T3, T4, T5, T6, T7, T8, T9> Queryable(Expression`1<Func`10<T, T2, T3, T4, T5, T6, T7, T8, T9, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Queryable(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, bool>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Queryable(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`8<T, T2, T3, T4, T5, T6, T7, T8> Queryable(Expression`1<Func`9<T, T2, T3, T4, T5, T6, T7, T8, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Queryable(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, bool>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Queryable(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`7<T, T2, T3, T4, T5, T6, T7> Queryable(Expression`1<Func`8<T, T2, T3, T4, T5, T6, T7, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Queryable(Expression`1<Func`7<T, T2, T3, T4, T5, T6, bool>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Queryable(Expression`1<Func`7<T, T2, T3, T4, T5, T6, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`6<T, T2, T3, T4, T5, T6> Queryable(Expression`1<Func`7<T, T2, T3, T4, T5, T6, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Queryable(Expression`1<Func`6<T, T2, T3, T4, T5, bool>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Queryable(Expression`1<Func`6<T, T2, T3, T4, T5, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`5<T, T2, T3, T4, T5> Queryable(Expression`1<Func`6<T, T2, T3, T4, T5, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(Expression`1<Func`5<T, T2, T3, T4, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(Expression`1<Func`5<T, T2, T3, T4, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Queryable(Expression`1<Func`4<T, T2, T3, bool>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Queryable(Expression`1<Func`4<T, T2, T3, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Queryable(Expression`1<Func`4<T, T2, T3, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> Queryable(Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> Queryable(Expression`1<Func`3<T, T2, JoinQueryInfos>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> Queryable(Expression`1<Func`3<T, T2, Object[]>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`2<T, T2> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, JoinType joinType, Expression`1<Func`3<T, T2, bool>> joinExpression);
    public sealed virtual ISugarQueryable`3<T, T2, T3> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, ISugarQueryable`1<T3> joinQueryable3, JoinType joinType1, Expression`1<Func`4<T, T2, T3, bool>> joinExpression1, JoinType joinType2, Expression`1<Func`4<T, T2, T3, bool>> joinExpression2);
    public sealed virtual ISugarQueryable`4<T, T2, T3, T4> Queryable(ISugarQueryable`1<T> joinQueryable1, ISugarQueryable`1<T2> joinQueryable2, ISugarQueryable`1<T3> joinQueryable3, ISugarQueryable`1<T4> joinQueryable4, JoinType joinType1, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression1, JoinType joinType2, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression2, JoinType joinType3, Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpression3);
    public sealed virtual ISugarQueryable`1<T> Queryable();
    public sealed virtual ISugarQueryable`1<T> Queryable(ISugarQueryable`1<T> queryable);
    public sealed virtual ISugarQueryable`1<T> Queryable(ISugarQueryable`1<T> queryable, string shortName);
    public sealed virtual ISugarQueryable`1<T> Queryable(string shortName);
    public sealed virtual IReportable`1<T> Reportable(T data);
    public sealed virtual IReportable`1<T> Reportable(List`1<T> list);
    public sealed virtual IReportable`1<T> Reportable(T[] array);
    public sealed virtual int SaveQueues(bool isTran);
    public sealed virtual Tuple`7<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>, List`1<T7>> SaveQueues(bool isTran);
    public sealed virtual Tuple`6<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>> SaveQueues(bool isTran);
    public sealed virtual Tuple`5<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> SaveQueues(bool isTran);
    public sealed virtual Tuple`4<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>> SaveQueues(bool isTran);
    public sealed virtual Tuple`3<List`1<T>, List`1<T2>, List`1<T3>> SaveQueues(bool isTran);
    public sealed virtual Tuple`2<List`1<T>, List`1<T2>> SaveQueues(bool isTran);
    public sealed virtual List`1<T> SaveQueues(bool isTran);
    public sealed virtual Task`1<int> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`7<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>, List`1<T7>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`6<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>, List`1<T6>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`5<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`4<List`1<T>, List`1<T2>, List`1<T3>, List`1<T4>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`3<List`1<T>, List`1<T2>, List`1<T3>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<Tuple`2<List`1<T>, List`1<T2>>> SaveQueuesAsync(bool isTran);
    public sealed virtual Task`1<List`1<T>> SaveQueuesAsync(bool isTran);
    public sealed virtual ISugarQueryable`1<T> SqlQueryable(string sql);
    public sealed virtual IStorageable`1<T> Storageable(T[] dataList);
    public sealed virtual StorageableDataTable Storageable(List`1<Dictionary`2<string, object>> dictionaryList, string tableName);
    public sealed virtual StorageableDataTable Storageable(Dictionary`2<string, object> dictionary, string tableName);
    public sealed virtual IStorageable`1<T> Storageable(List`1<T> dataList);
    public sealed virtual IStorageable`1<T> Storageable(IList`1<T> dataList);
    public sealed virtual IStorageable`1<T> Storageable(T data);
    public sealed virtual StorageableDataTable Storageable(DataTable data);
    public sealed virtual StorageableMethodInfo StorageableByObject(object singleEntityObjectOrListObject);
    public sealed virtual ISugarQueryable`1<T> Union(List`1<ISugarQueryable`1<T>> queryables);
    public sealed virtual ISugarQueryable`1<T> Union(ISugarQueryable`1[] queryables);
    public sealed virtual ISugarQueryable`1<T> UnionAll(List`1<ISugarQueryable`1<T>> queryables);
    public sealed virtual ISugarQueryable`1<T> UnionAll(ISugarQueryable`1[] queryables);
    public sealed virtual UpdateExpressionMethodInfo UpdateableByObject(Type entityType);
    public sealed virtual UpdateMethodInfo UpdateableByObject(object singleEntityObjectOrListObject);
    public sealed virtual IUpdateable`1<Dictionary`2<string, object>> UpdateableByDynamic(object updateDynamicObject);
    public sealed virtual IUpdateable`1<T> Updateable();
    public sealed virtual IUpdateable`1<T> Updateable(Dictionary`2<string, object> columnDictionary);
    public sealed virtual IUpdateable`1<T> Updateable(object updateDynamicObject);
    public sealed virtual IUpdateable`1<T> Updateable(Expression`1<Func`2<T, bool>> columns);
    public sealed virtual IUpdateable`1<T> Updateable(Expression`1<Func`2<T, T>> columns);
    public sealed virtual IUpdateable`1<T> Updateable(List`1<T> UpdateObjs);
    public sealed virtual IUpdateable`1<T> Updateable(T UpdateObj);
    public sealed virtual IUpdateable`1<T> Updateable(T[] UpdateObjs);
    public sealed virtual SplitTableContext SplitHelper();
    public sealed virtual SplitTableContext SplitHelper(Type entityType);
    public sealed virtual SplitTableContextResult`1<T> SplitHelper(T data);
    public sealed virtual SplitTableContextResult`1<T> SplitHelper(List`1<T> dataList);
    public sealed virtual IFastest`1<T> Fastest();
    public sealed virtual void ThenMapper(IEnumerable`1<T> list, Action`1<T> action);
    public sealed virtual Task ThenMapperAsync(IEnumerable`1<T> list, Func`2<T, Task> action);
    public sealed virtual ITenant AsTenant();
    public sealed virtual ISaveable`1<T> Saveable(List`1<T> saveObjects);
    public sealed virtual ISaveable`1<T> Saveable(T saveObject);
    public sealed virtual InsertNavTaskInit`2<T, T> InsertNav(T data);
    public sealed virtual InsertNavTaskInit`2<T, T> InsertNav(List`1<T> datas);
    public sealed virtual InsertNavTaskInit`2<T, T> InsertNav(T data, InsertNavRootOptions rootOptions);
    public sealed virtual InsertNavTaskInit`2<T, T> InsertNav(List`1<T> datas, InsertNavRootOptions rootOptions);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(T data);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(List`1<T> datas);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(Expression`1<Func`2<T, bool>> whereExpression);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(T data, DeleteNavRootOptions options);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(List`1<T> datas, DeleteNavRootOptions options);
    public sealed virtual DeleteNavTaskInit`2<T, T> DeleteNav(Expression`1<Func`2<T, bool>> whereExpression, DeleteNavRootOptions options);
    public sealed virtual UpdateNavTaskInit`2<T, T> UpdateNav(T data);
    public sealed virtual UpdateNavTaskInit`2<T, T> UpdateNav(List`1<T> datas);
    public sealed virtual UpdateNavTaskInit`2<T, T> UpdateNav(List`1<T> datas, UpdateNavRootOptions rootOptions);
    public sealed virtual UpdateNavTaskInit`2<T, T> UpdateNav(T data, UpdateNavRootOptions rootOptions);
    public sealed virtual SqlSugarClient CopyNew();
    public sealed virtual DynamicBuilder DynamicBuilder();
    public sealed virtual void Tracking(T data);
    public sealed virtual void Tracking(List`1<T> datas);
    public sealed virtual QueryMethodInfo QueryableByObject(Type entityType);
    public sealed virtual QueryMethodInfo QueryableByObject(Type entityType, string shortName);
    public sealed virtual GridSaveProvider`1<T> GridSave(List`1<T> oldList, List`1<T> saveList);
    public sealed virtual GridSaveProvider`1<T> GridSave(List`1<T> saveList);
    public sealed virtual void ClearTracking();
}
public class SqlSugar.SqlSugarTransaction : object {
    private SqlSugarClient context;
    public SqlSugarTransaction(SqlSugarClient client);
    public void CommitTran();
    public void RollbackTran();
    public sealed virtual void Dispose();
}
public class SqlSugar.SqlSugarTransactionAdo : object {
    private ISqlSugarClient context;
    public SqlSugarTransactionAdo(ISqlSugarClient client);
    public void CommitTran();
    public void RollbackTran();
    public sealed virtual void Dispose();
}
public class SqlSugar.SqlWith : object {
    public static string NoLock;
    public static string HoldLock;
    public static string PagLock;
    public static string ReadCommitted;
    public static string TabLockX;
    public static string UpdLock;
    public static string RowLock;
    public static string ReadPast;
    public static string Null;
}
public class SqlSugar.StackTraceInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<StackTraceInfoItem> <MyStackTraceList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<StackTraceInfoItem> <SugarStackTraceList>k__BackingField;
    public string FirstFileName { get; }
    public string FirstMethodName { get; }
    public int FirstLine { get; }
    public List`1<StackTraceInfoItem> MyStackTraceList { get; public set; }
    public List`1<StackTraceInfoItem> SugarStackTraceList { get; public set; }
    public string get_FirstFileName();
    public string get_FirstMethodName();
    public int get_FirstLine();
    [CompilerGeneratedAttribute]
public List`1<StackTraceInfoItem> get_MyStackTraceList();
    [CompilerGeneratedAttribute]
public void set_MyStackTraceList(List`1<StackTraceInfoItem> value);
    [CompilerGeneratedAttribute]
public List`1<StackTraceInfoItem> get_SugarStackTraceList();
    [CompilerGeneratedAttribute]
public void set_SugarStackTraceList(List`1<StackTraceInfoItem> value);
}
public class SqlSugar.StackTraceInfoItem : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Line>k__BackingField;
    public string FileName { get; public set; }
    public string MethodName { get; public set; }
    public int Line { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
}
public class SqlSugar.StaticConfig : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <EnableAot>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Func`2<string, string> <Encode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Func`2<string, string> <Decode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <AppContext_ConvertInfinityDateTime>k__BackingField;
    public static string CodeFirst_BigString;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <CodeFirst_MySqlCollate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <CodeFirst_MySqlTableEngine>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Type <Backup_MySqlBackupType>k__BackingField;
    public static Func`1<long> CustomSnowFlakeFunc;
    public static Func`1<long> CustomSnowFlakeTimeErrorFunc;
    public static Func`1<Guid> CustomGuidFunc;
    public static Action`1<object> CompleteQueryableFunc;
    public static Action`1<object> CompleteInsertableFunc;
    public static Action`1<object> CompleteUpdateableFunc;
    public static Action`1<object> CompleteDeleteableFunc;
    public static Action`1<ISqlSugarClient> CompleteDbFunc;
    public static Func`1<List`1<SplitTableInfo>> SplitTableGetTablesFunc;
    public static bool Check_StringIdentity;
    public static bool EnableAllWhereIF;
    public static Func`2<string, string> Check_FieldFunc;
    public static Type DynamicExpressionParserType;
    public static object DynamicExpressionParsingConfig;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Action`2<ICacheService, string> <CacheRemoveByLikeStringFunc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Guid <TableQuerySqlKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <BulkCopy_MySqlCsvPath>k__BackingField;
    public static bool EnableAot { get; public set; }
    public static Func`2<string, string> Encode { get; public set; }
    public static Func`2<string, string> Decode { get; public set; }
    public static bool AppContext_ConvertInfinityDateTime { get; public set; }
    public static string CodeFirst_MySqlCollate { get; public set; }
    public static string CodeFirst_MySqlTableEngine { get; public set; }
    public static Type Backup_MySqlBackupType { get; public set; }
    public static Action`2<ICacheService, string> CacheRemoveByLikeStringFunc { get; public set; }
    public static Guid TableQuerySqlKey { get; public set; }
    public static string BulkCopy_MySqlCsvPath { get; public set; }
    private static StaticConfig();
    [CompilerGeneratedAttribute]
public static bool get_EnableAot();
    [CompilerGeneratedAttribute]
public static void set_EnableAot(bool value);
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_Encode();
    [CompilerGeneratedAttribute]
public static void set_Encode(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_Decode();
    [CompilerGeneratedAttribute]
public static void set_Decode(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public static bool get_AppContext_ConvertInfinityDateTime();
    [CompilerGeneratedAttribute]
public static void set_AppContext_ConvertInfinityDateTime(bool value);
    [CompilerGeneratedAttribute]
public static string get_CodeFirst_MySqlCollate();
    [CompilerGeneratedAttribute]
public static void set_CodeFirst_MySqlCollate(string value);
    [CompilerGeneratedAttribute]
public static string get_CodeFirst_MySqlTableEngine();
    [CompilerGeneratedAttribute]
public static void set_CodeFirst_MySqlTableEngine(string value);
    [CompilerGeneratedAttribute]
public static Type get_Backup_MySqlBackupType();
    [CompilerGeneratedAttribute]
public static void set_Backup_MySqlBackupType(Type value);
    [CompilerGeneratedAttribute]
public static Action`2<ICacheService, string> get_CacheRemoveByLikeStringFunc();
    [CompilerGeneratedAttribute]
public static void set_CacheRemoveByLikeStringFunc(Action`2<ICacheService, string> value);
    [CompilerGeneratedAttribute]
public static Guid get_TableQuerySqlKey();
    [CompilerGeneratedAttribute]
public static void set_TableQuerySqlKey(Guid value);
    [CompilerGeneratedAttribute]
public static string get_BulkCopy_MySqlCsvPath();
    [CompilerGeneratedAttribute]
public static void set_BulkCopy_MySqlCsvPath(string value);
}
public class SqlSugar.Storageable`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    internal ISqlBuilder Builder;
    private List`1<SugarParameter> Parameters;
    private List`1<StorageableInfo`1<T>> allDatas;
    private List`1<T> dbDataList;
    private List`1<KeyValuePair`3<StorageType, Func`2<StorageableInfo`1<T>, bool>, string>> whereFuncs;
    private Expression`1<Func`2<T, object>> whereExpression;
    private Func`2<DateTime, string> formatTime;
    private Nullable`1<DbLockType> lockType;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <asname>k__BackingField;
    private bool isDisableFilters;
    private Expression`1<Func`2<T, bool>> queryableWhereExp;
    private List`1<EntityColumnInfo> wherecolumnList;
    private SqlSugarProvider Context { get; private set; }
    private string asname { get; private set; }
    public Storageable`1(List`1<T> datas, SqlSugarProvider context);
    [CompilerGeneratedAttribute]
private SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
private string get_asname();
    [CompilerGeneratedAttribute]
private void set_asname(string value);
    public sealed virtual IStorageable`1<T> TableDataRange(Expression`1<Func`2<T, bool>> exp);
    public sealed virtual IStorageable`1<T> SplitInsert(Func`2<StorageableInfo`1<T>, bool> conditions, string message);
    public sealed virtual IStorageable`1<T> SplitDelete(Func`2<StorageableInfo`1<T>, bool> conditions, string message);
    public sealed virtual IStorageable`1<T> SplitUpdate(Func`2<StorageableInfo`1<T>, bool> conditions, string message);
    public sealed virtual IStorageable`1<T> Saveable(string inserMessage, string updateMessage);
    public sealed virtual IStorageable`1<T> SplitError(Func`2<StorageableInfo`1<T>, bool> conditions, string message);
    public sealed virtual IStorageable`1<T> SplitIgnore(Func`2<StorageableInfo`1<T>, bool> conditions, string message);
    public sealed virtual IStorageable`1<T> DisableFilters();
    public sealed virtual IStorageable`1<T> TranLock(DbLockType dbLockType);
    public sealed virtual IStorageable`1<T> TranLock(Nullable`1<DbLockType> LockType);
    public sealed virtual IStorageable`1<T> SplitOther(Func`2<StorageableInfo`1<T>, bool> conditions, string message);
    public sealed virtual StorageablePage`1<T> PageSize(int PageSize, Action`1<int> ActionCallBack);
    public sealed virtual StorageableSplitProvider`1<T> SplitTable();
    public sealed virtual IStorageable`1<T> DefaultAddElseUpdate();
    public sealed virtual int ExecuteCommand();
    public sealed virtual T ExecuteReturnEntity();
    [AsyncStateMachineAttribute("SqlSugar.Storageable`1/<ExecuteReturnEntityAsync>d__35")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<T> ExecuteReturnEntityAsync();
    public sealed virtual Task`1<int> ExecuteCommandAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("SqlSugar.Storageable`1/<ExecuteCommandAsync>d__37")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> ExecuteCommandAsync();
    public sealed virtual int ExecuteSqlBulkCopy();
    [AsyncStateMachineAttribute("SqlSugar.Storageable`1/<ExecuteSqlBulkCopyAsync>d__39")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> ExecuteSqlBulkCopyAsync();
    public sealed virtual StorageableResult`1<T> ToStorage();
    public sealed virtual StorageableResult`1<T> GetStorageableResult();
    [AsyncStateMachineAttribute("SqlSugar.Storageable`1/<ToStorageAsync>d__42")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<StorageableResult`1<T>> ToStorageAsync();
    private String[] GetPkProperties(IEnumerable`1<EntityColumnInfo> pkInfos);
    public sealed virtual IStorageable`1<T> WhereColumns(Expression`1<Func`2<T, object>> columns, Func`2<DateTime, string> formatTime);
    public sealed virtual IStorageable`1<T> WhereColumns(Expression`1<Func`2<T, object>> columns);
    public sealed virtual IStorageable`1<T> WhereColumns(String[] columns);
    public sealed virtual IStorageable`1<T> WhereColumns(String[] columns, Func`2<DateTime, string> formatTime);
    private void SetConditList(List`1<StorageableInfo`1<T>> itemList, List`1<EntityColumnInfo> whereColumns, List`1<IConditionalModel> conditList);
    public virtual ExpressionResult GetExpressionValue(Expression expression, ResolveExpressType resolveType);
    public sealed virtual IStorageable`1<T> As(string tableName);
    [CompilerGeneratedAttribute]
private string <WhereColumns>b__46_0(string it);
    [CompilerGeneratedAttribute]
private string <WhereColumns>b__47_0(string it);
}
public class SqlSugar.StorageableAsMethodInfo : object {
    private string type;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <ObjectValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MethodInfo <Method>k__BackingField;
    internal object ObjectValue { get; internal set; }
    internal MethodInfo Method { get; internal set; }
    public StorageableAsMethodInfo(string type);
    [CompilerGeneratedAttribute]
internal object get_ObjectValue();
    [CompilerGeneratedAttribute]
internal void set_ObjectValue(object value);
    [CompilerGeneratedAttribute]
internal MethodInfo get_Method();
    [CompilerGeneratedAttribute]
internal void set_Method(MethodInfo value);
    public int ExecuteCommand();
    public StorageableCommonMethodInfo IgnoreColumns(String[] ignoreColumns);
}
public class SqlSugar.StorageableCommonMethodInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Value>k__BackingField;
    public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    public int ExecuteCommand();
}
public class SqlSugar.StorageableDataTable : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DataTable <DataTable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <Columns>k__BackingField;
    internal string SugarGroupId;
    internal string SugarUpdateRows;
    internal string SugarColumns;
    internal string SugarErrorMessage;
    internal List`1<DataRow> dbDataList;
    internal Func`2<DateTime, string> formatTime;
    private List`1<KeyValuePair`3<StorageType, Func`2<DataRow, bool>, string>> whereFuncs;
    internal DataTable DataTable { get; internal set; }
    internal SqlSugarProvider Context { get; internal set; }
    internal String[] Columns { get; internal set; }
    [CompilerGeneratedAttribute]
internal DataTable get_DataTable();
    [CompilerGeneratedAttribute]
internal void set_DataTable(DataTable value);
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal String[] get_Columns();
    [CompilerGeneratedAttribute]
internal void set_Columns(String[] value);
    public StorageableDataTable WhereColumns(string name);
    public StorageableDataTable WhereColumns(string name, Func`2<DateTime, string> formatTime);
    public StorageableDataTable WhereColumns(String[] names, Func`2<DateTime, string> formatTime);
    public StorageableDataTable WhereColumns(String[] names);
    public StorageableDataTable WhereColumns(List`1<string> names);
    public StorageableDataTable SplitInsert(Func`2<DataRow, bool> conditions, string message);
    public StorageableDataTable SplitDelete(Func`2<DataRow, bool> conditions, string message);
    public StorageableDataTable SplitUpdate(Func`2<DataRow, bool> conditions, string message);
    public StorageableDataTable Saveable(string inserMessage, string updateMessage);
    public StorageableDataTable SplitError(Func`2<DataRow, bool> conditions, string message);
    public StorageableDataTable SplitIgnore(Func`2<DataRow, bool> conditions, string message);
    public DataTableResult ToStorage();
    private void SplitMethod(Func`2<DataRow, bool> conditions, StorageType type, DataRow item, string message);
    private void SetConditList(List`1<DataRow> itemList, String[] whereColumns, List`1<IConditionalModel> conditList);
    [CompilerGeneratedAttribute]
private bool <ToStorage>b__30_0(DataRow it);
    [CompilerGeneratedAttribute]
private string <ToStorage>b__30_1(DataRow it);
}
[ExtensionAttribute]
public static class SqlSugar.StorageableDataTableExtensions : object {
    [ExtensionAttribute]
public static bool Any(DataRow row);
}
public class SqlSugar.StorageableInfo`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <Item>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<T> <Database>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <PkFields>k__BackingField;
    public T Item { get; public set; }
    internal List`1<T> Database { get; internal set; }
    internal String[] PkFields { get; internal set; }
    [CompilerGeneratedAttribute]
public T get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(T value);
    [CompilerGeneratedAttribute]
internal List`1<T> get_Database();
    [CompilerGeneratedAttribute]
internal void set_Database(List`1<T> value);
    [CompilerGeneratedAttribute]
internal String[] get_PkFields();
    [CompilerGeneratedAttribute]
internal void set_PkFields(String[] value);
    public bool Any(Func`2<T, bool> expression);
    public bool NotAny(Func`2<T, bool> expression);
    public bool Any();
    private bool IsEquals(T it, string pk);
    public bool NotAny();
}
public class SqlSugar.StorageableMessage`1 : StorageableInfo`1<T> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <StorageMessage>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<StorageType> <StorageType>k__BackingField;
    public string StorageMessage { get; public set; }
    public Nullable`1<StorageType> StorageType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_StorageMessage();
    [CompilerGeneratedAttribute]
public void set_StorageMessage(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<StorageType> get_StorageType();
    [CompilerGeneratedAttribute]
public void set_StorageType(Nullable`1<StorageType> value);
}
public class SqlSugar.StorageableMethodInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <objectValue>k__BackingField;
    internal SqlSugarProvider Context { get; internal set; }
    internal MethodInfo MethodInfo { get; internal set; }
    internal object objectValue { get; internal set; }
    public StorageableAsMethodInfo AsInsertable { get; }
    public StorageableAsMethodInfo AsUpdateable { get; }
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
internal void set_MethodInfo(MethodInfo value);
    [CompilerGeneratedAttribute]
internal object get_objectValue();
    [CompilerGeneratedAttribute]
internal void set_objectValue(object value);
    public int ExecuteCommand();
    public StorageableAsMethodInfo get_AsInsertable();
    public StorageableAsMethodInfo get_AsUpdateable();
    private StorageableAsMethodInfo GetAs(string type);
    private MethodInfo GetSaveMethod(Object& callValue);
    public StorageableMethodInfo ToStorage();
    public StorageableSplitTableMethodInfo SplitTable();
    public StorageableSplitTableMethodInfo AS(string tableName);
}
public class SqlSugar.StorageablePage`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DbLockType> <lockType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<T> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action`1<int> <ActionCallBack>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression`1<Func`2<T, object>> <whereExpression>k__BackingField;
    internal Nullable`1<DbLockType> lockType { get; internal set; }
    public SqlSugarProvider Context { get; public set; }
    public List`1<T> Data { get; public set; }
    public int PageSize { get; internal set; }
    public Action`1<int> ActionCallBack { get; internal set; }
    public string TableName { get; internal set; }
    public Expression`1<Func`2<T, object>> whereExpression { get; internal set; }
    [CompilerGeneratedAttribute]
internal Nullable`1<DbLockType> get_lockType();
    [CompilerGeneratedAttribute]
internal void set_lockType(Nullable`1<DbLockType> value);
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public List`1<T> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(List`1<T> value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
internal void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public Action`1<int> get_ActionCallBack();
    [CompilerGeneratedAttribute]
internal void set_ActionCallBack(Action`1<int> value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
internal void set_TableName(string value);
    [CompilerGeneratedAttribute]
public Expression`1<Func`2<T, object>> get_whereExpression();
    [CompilerGeneratedAttribute]
internal void set_whereExpression(Expression`1<Func`2<T, object>> value);
    public int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.StorageablePage`1/<ExecuteCommandAsync>d__29")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync(Nullable`1<CancellationToken> cancellationToken);
    public int ExecuteSqlBulkCopy();
    [AsyncStateMachineAttribute("SqlSugar.StorageablePage`1/<ExecuteSqlBulkCopyAsync>d__31")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteSqlBulkCopyAsync(Nullable`1<CancellationToken> cancellationToken);
}
public class SqlSugar.StorageableResult`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<StorageableMessage`1<T>> <TotalList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<StorageableMessage`1<T>> <InsertList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<StorageableMessage`1<T>> <UpdateList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<StorageableMessage`1<T>> <DeleteList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<StorageableMessage`1<T>> <ErrorList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<StorageableMessage`1<T>> <IgnoreList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<StorageableMessage`1<T>> <OtherList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IInsertable`1<T> <AsInsertable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IUpdateable`1<T> <AsUpdateable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDeleteable`1<T> <AsDeleteable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<EntityColumnInfo> <_WhereColumnList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <_AsName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <_Context>k__BackingField;
    public List`1<StorageableMessage`1<T>> TotalList { get; public set; }
    public List`1<StorageableMessage`1<T>> InsertList { get; public set; }
    public List`1<StorageableMessage`1<T>> UpdateList { get; public set; }
    public List`1<StorageableMessage`1<T>> DeleteList { get; public set; }
    public List`1<StorageableMessage`1<T>> ErrorList { get; public set; }
    public List`1<StorageableMessage`1<T>> IgnoreList { get; public set; }
    public List`1<StorageableMessage`1<T>> OtherList { get; public set; }
    public IInsertable`1<T> AsInsertable { get; public set; }
    public IUpdateable`1<T> AsUpdateable { get; public set; }
    public IDeleteable`1<T> AsDeleteable { get; public set; }
    internal List`1<EntityColumnInfo> _WhereColumnList { get; internal set; }
    internal string _AsName { get; internal set; }
    internal SqlSugarProvider _Context { get; internal set; }
    [CompilerGeneratedAttribute]
public List`1<StorageableMessage`1<T>> get_TotalList();
    [CompilerGeneratedAttribute]
public void set_TotalList(List`1<StorageableMessage`1<T>> value);
    [CompilerGeneratedAttribute]
public List`1<StorageableMessage`1<T>> get_InsertList();
    [CompilerGeneratedAttribute]
public void set_InsertList(List`1<StorageableMessage`1<T>> value);
    [CompilerGeneratedAttribute]
public List`1<StorageableMessage`1<T>> get_UpdateList();
    [CompilerGeneratedAttribute]
public void set_UpdateList(List`1<StorageableMessage`1<T>> value);
    [CompilerGeneratedAttribute]
public List`1<StorageableMessage`1<T>> get_DeleteList();
    [CompilerGeneratedAttribute]
public void set_DeleteList(List`1<StorageableMessage`1<T>> value);
    [CompilerGeneratedAttribute]
public List`1<StorageableMessage`1<T>> get_ErrorList();
    [CompilerGeneratedAttribute]
public void set_ErrorList(List`1<StorageableMessage`1<T>> value);
    [CompilerGeneratedAttribute]
public List`1<StorageableMessage`1<T>> get_IgnoreList();
    [CompilerGeneratedAttribute]
public void set_IgnoreList(List`1<StorageableMessage`1<T>> value);
    [CompilerGeneratedAttribute]
public List`1<StorageableMessage`1<T>> get_OtherList();
    [CompilerGeneratedAttribute]
public void set_OtherList(List`1<StorageableMessage`1<T>> value);
    [CompilerGeneratedAttribute]
public IInsertable`1<T> get_AsInsertable();
    [CompilerGeneratedAttribute]
public void set_AsInsertable(IInsertable`1<T> value);
    [CompilerGeneratedAttribute]
public IUpdateable`1<T> get_AsUpdateable();
    [CompilerGeneratedAttribute]
public void set_AsUpdateable(IUpdateable`1<T> value);
    [CompilerGeneratedAttribute]
public IDeleteable`1<T> get_AsDeleteable();
    [CompilerGeneratedAttribute]
public void set_AsDeleteable(IDeleteable`1<T> value);
    [CompilerGeneratedAttribute]
internal List`1<EntityColumnInfo> get__WhereColumnList();
    [CompilerGeneratedAttribute]
internal void set__WhereColumnList(List`1<EntityColumnInfo> value);
    [CompilerGeneratedAttribute]
internal string get__AsName();
    [CompilerGeneratedAttribute]
internal void set__AsName(string value);
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get__Context();
    [CompilerGeneratedAttribute]
internal void set__Context(SqlSugarProvider value);
    public int BulkCopy();
    public Task`1<int> BulkCopyAsync();
    public int BulkUpdate();
    public Task`1<int> BulkUpdateAsync();
    public int BulkUpdate(String[] UpdateColumns);
    [AsyncStateMachineAttribute("SqlSugar.StorageableResult`1/<BulkUpdateAsync>d__57")]
[DebuggerStepThroughAttribute]
public Task`1<int> BulkUpdateAsync(String[] UpdateColumns);
}
public class SqlSugar.StorageableSplitProvider`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Storageable`1<T> <SaveInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<T> <List>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <EntityInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression`1<Func`2<T, object>> <whereExpression>k__BackingField;
    internal int pageSize;
    internal Action`1<int> ActionCallBack;
    internal Storageable`1<T> SaveInfo { get; internal set; }
    internal SqlSugarProvider Context { get; internal set; }
    internal List`1<T> List { get; internal set; }
    internal EntityInfo EntityInfo { get; internal set; }
    internal Expression`1<Func`2<T, object>> whereExpression { get; internal set; }
    [CompilerGeneratedAttribute]
internal Storageable`1<T> get_SaveInfo();
    [CompilerGeneratedAttribute]
internal void set_SaveInfo(Storageable`1<T> value);
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal List`1<T> get_List();
    [CompilerGeneratedAttribute]
internal void set_List(List`1<T> value);
    [CompilerGeneratedAttribute]
internal EntityInfo get_EntityInfo();
    [CompilerGeneratedAttribute]
internal void set_EntityInfo(EntityInfo value);
    [CompilerGeneratedAttribute]
internal Expression`1<Func`2<T, object>> get_whereExpression();
    [CompilerGeneratedAttribute]
internal void set_whereExpression(Expression`1<Func`2<T, object>> value);
    public StorageableSplitProvider`1<T> PageSize(int size, Action`1<int> ActionCallBack);
    public int ExecuteCommand();
    public int ExecuteSqlBulkCopy();
    [AsyncStateMachineAttribute("SqlSugar.StorageableSplitProvider`1/<ExecuteCommandAsync>d__25")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
    [AsyncStateMachineAttribute("SqlSugar.StorageableSplitProvider`1/<ExecuteSqlBulkCopyAsync>d__26")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteSqlBulkCopyAsync();
    [AsyncStateMachineAttribute("SqlSugar.StorageableSplitProvider`1/<_ExecuteCommandAsync>d__27")]
[DebuggerStepThroughAttribute]
private Task`1<int> _ExecuteCommandAsync(List`1<T> list);
    private int _ExecuteCommand(List`1<T> list);
    [AsyncStateMachineAttribute("SqlSugar.StorageableSplitProvider`1/<_ExecuteSqlBulkCopyAsync>d__29")]
[DebuggerStepThroughAttribute]
private Task`1<int> _ExecuteSqlBulkCopyAsync(List`1<T> list);
    private int _ExecuteSqlBulkCopy(List`1<T> list);
    private void GroupDataList(List`1<T> datas, List`1& groupModels, Int32& result);
    private void CreateTable(List`1<string> tableNames);
}
public class SqlSugar.StorageableSplitTableMethodInfo : object {
    private string type;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <ObjectValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MethodInfo <Method>k__BackingField;
    internal object ObjectValue { get; internal set; }
    internal MethodInfo Method { get; internal set; }
    public StorageableSplitTableMethodInfo(string type);
    [CompilerGeneratedAttribute]
internal object get_ObjectValue();
    [CompilerGeneratedAttribute]
internal void set_ObjectValue(object value);
    [CompilerGeneratedAttribute]
internal MethodInfo get_Method();
    [CompilerGeneratedAttribute]
internal void set_Method(MethodInfo value);
    public int ExecuteCommand();
}
public enum SqlSugar.StorageType : Enum {
    public int value__;
    public static StorageType Insert;
    public static StorageType Update;
    public static StorageType Delete;
    public static StorageType Error;
    public static StorageType Other;
    public static StorageType Ignore;
}
public class SqlSugar.SubAnd : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    public bool HasWhere { get; public set; }
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string GetValue(Expression expression);
    private object GetValue(string result, string regex);
}
public class SqlSugar.SubAndIF : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubAny : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    public ExpressionContext Context { get; public set; }
    public Expression Expression { get; public set; }
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public int Sort { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    public sealed virtual int get_Sort();
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubAs : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubAsWithAttr : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubAvg : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubBegin : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubCount : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubDistinctCount : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
    private void InitType(MethodCallExpression exp);
}
public class SqlSugar.SubEnableTableFilter : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    public ExpressionContext Context { get; public set; }
    public Expression Expression { get; public set; }
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public int Sort { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    public sealed virtual int get_Sort();
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubFirst : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
    private void InitType(MethodCallExpression exp);
    public void SetShortName(MethodCallExpression exp, string result);
    public void SetShortNameNext(MethodCallExpression exp, string result);
    private string GetValueByAuto(MethodCallExpression exp);
    private static bool IsAutoSelect(MethodCallExpression exp);
    private static bool IsAutoGeneric(MethodCallExpression exp);
    [CompilerGeneratedAttribute]
private string <GetValue>b__16_2(EntityColumnInfo it);
}
public class SqlSugar.SubFromTable : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubGroupBy : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubHaving : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubInnerJoin : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubInsertable`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SubInsertTreeExpression> <SubList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T[] <InsertObjects>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private InsertBuilder <InsertBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Pk>k__BackingField;
    internal EntityInfo Entity { get; internal set; }
    internal List`1<SubInsertTreeExpression> SubList { get; internal set; }
    internal SqlSugarProvider Context { get; internal set; }
    internal T[] InsertObjects { get; internal set; }
    internal InsertBuilder InsertBuilder { get; internal set; }
    internal string Pk { get; internal set; }
    [CompilerGeneratedAttribute]
internal EntityInfo get_Entity();
    [CompilerGeneratedAttribute]
internal void set_Entity(EntityInfo value);
    [CompilerGeneratedAttribute]
internal List`1<SubInsertTreeExpression> get_SubList();
    [CompilerGeneratedAttribute]
internal void set_SubList(List`1<SubInsertTreeExpression> value);
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal T[] get_InsertObjects();
    [CompilerGeneratedAttribute]
internal void set_InsertObjects(T[] value);
    [CompilerGeneratedAttribute]
internal InsertBuilder get_InsertBuilder();
    [CompilerGeneratedAttribute]
internal void set_InsertBuilder(InsertBuilder value);
    [CompilerGeneratedAttribute]
internal string get_Pk();
    [CompilerGeneratedAttribute]
internal void set_Pk(string value);
    public sealed virtual ISubInsertable`1<T> AddSubList(Expression`1<Func`2<T, object>> items);
    public sealed virtual ISubInsertable`1<T> AddSubList(Expression`1<Func`2<T, SubInsertTree>> tree);
    private List`1<SubInsertTreeExpression> GetSubInsertTree(Expression expression);
    [ObsoleteAttribute("use ExecuteCommand")]
public sealed virtual object ExecuteReturnPrimaryKey();
    [AsyncStateMachineAttribute("SqlSugar.SubInsertable`1/<ExecuteCommandAsync>d__28")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<object> ExecuteCommandAsync();
    public sealed virtual object ExecuteCommand();
    private object Execute();
    [ObsoleteAttribute("use ExecuteCommandAsync")]
public Task`1<object> ExecuteReturnPrimaryKeyAsync();
    private bool IsIdEntity(EntityInfo entity);
    private void AddChildList(List`1<SubInsertTreeExpression> items, object insertObject, object pkValue);
    private Dictionary`2<string, object> GetInsertDictionary(object insetObject, EntityInfo subEntity);
    private static string GetChildName(SubInsertTreeExpression item, MemberExpression subMemberException);
    private static string GetMemberName(SubInsertTreeExpression item, MemberExpression& subMemberException);
    private object GetPrimaryKey(EntityInfo entityInfo, object InsertObject, int id);
}
public class SqlSugar.SubInsertTree : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SubInsertTree> <ChildExpression>k__BackingField;
    public object Expression { get; public set; }
    public List`1<SubInsertTree> ChildExpression { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(object value);
    [CompilerGeneratedAttribute]
public List`1<SubInsertTree> get_ChildExpression();
    [CompilerGeneratedAttribute]
public void set_ChildExpression(List`1<SubInsertTree> value);
}
internal class SqlSugar.SubInsertTreeExpression : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SubInsertTreeExpression> <Childs>k__BackingField;
    public Expression Expression { get; public set; }
    public List`1<SubInsertTreeExpression> Childs { get; public set; }
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(Expression value);
    [CompilerGeneratedAttribute]
public List`1<SubInsertTreeExpression> get_Childs();
    [CompilerGeneratedAttribute]
public void set_Childs(List`1<SubInsertTreeExpression> value);
}
public class SqlSugar.SubLeftBracket : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    public bool HasWhere { get; public set; }
    public ExpressionContext Context { get; public set; }
    public Expression Expression { get; public set; }
    public string Name { get; }
    public int Sort { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual string get_Name();
    public sealed virtual int get_Sort();
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubLeftJoin : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubMax : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubMin : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubNotAny : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    public bool HasWhere { get; public set; }
    public ExpressionContext Context { get; public set; }
    public Expression Expression { get; public set; }
    public string Name { get; }
    public int Sort { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual string get_Name();
    public sealed virtual int get_Sort();
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubOrderBy : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <OrderIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public int OrderIndex { get; public set; }
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public int get_OrderIndex();
    [CompilerGeneratedAttribute]
public void set_OrderIndex(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubOrderByDesc : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <OrderIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public int OrderIndex { get; public set; }
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public int get_OrderIndex();
    [CompilerGeneratedAttribute]
public void set_OrderIndex(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.Subqueryable`1 : object {
    public Subqueryable`1<T> AS(string tableName);
    public Subqueryable`2<T, JoinType> InnerJoin(Func`3<T, JoinType, bool> expression);
    public Subqueryable`2<T, JoinType> InnerJoin(Func`3<T, JoinType, bool> expression, string tableName);
    public Subqueryable`2<T, JoinType> LeftJoin(Func`3<T, JoinType, bool> expression);
    public Subqueryable`2<T, JoinType> LeftJoin(Func`3<T, JoinType, bool> expression, string tableName);
    public Subqueryable`1<T> Where(string where);
    public Subqueryable`1<T> Where(List`1<IConditionalModel> conditionals);
    public Subqueryable`1<T> Where(Expression exp);
    public Subqueryable`1<T> Where(Func`2<T, bool> expression);
    public Subqueryable`1<T> Having(Func`2<T, bool> expression);
    public Subqueryable`1<T> Where(Func`3<Main, Join1, bool> expression);
    public Subqueryable`1<T> Where(Func`4<Main, Join1, Join2, bool> expression);
    public Subqueryable`1<T> Where(Func`5<Main, Join1, Join2, Join3, bool> expression);
    public Subqueryable`1<T> Where(Func`6<Main, Join1, Join2, Join3, Join4, bool> expression);
    public Subqueryable`1<T> WhereIF(bool isWhere, Func`2<T, bool> expression);
    public Subqueryable`1<T> OrderBy(Func`2<T, object> expression);
    public Subqueryable`1<T> GroupBy(Func`2<T, object> expression);
    public Subqueryable`1<T> OrderByDesc(Func`2<T, object> expression);
    public TResult Select(Func`2<T, TResult> expression);
    public Byte[] Select(Func`2<T, Byte[]> expression);
    public string Select(Func`2<T, string> expression);
    public string SelectStringJoin(Func`2<T, string> expression, string separator);
    public TResult Max(Func`2<T, TResult> expression);
    public Byte[] Max(Func`2<T, Byte[]> expression);
    public string Max(Func`2<T, string> expression);
    public string Min(Func`2<T, string> expression);
    public TResult Min(Func`2<T, TResult> expression);
    public Byte[] Min(Func`2<T, Byte[]> expression);
    public string Sum(Func`2<T, string> expression);
    public int DistinctCount(Func`2<T, object> expression);
    public TResult Sum(Func`2<T, TResult> expression);
    public Byte[] Sum(Func`2<T, Byte[]> expression);
    public string Avg(Func`2<T, string> expression);
    public TResult Avg(Func`2<T, TResult> expression);
    public Byte[] Avg(Func`2<T, Byte[]> expression);
    public bool Any();
    public bool NotAny();
    public int Count();
    public Subqueryable`1<T> WithNoLock();
    public Subqueryable`1<T> EnableTableFilter();
    public List`1<T> ToList();
    public List`1<TResult> ToList(Func`2<T, TResult> selector);
    public List`1<TResult> ToList();
    public List`1<TResult> ToList(Func`2<T, TResult> selector, bool isAutoDto);
    public T First();
    public TResult First(Func`2<T, TResult> selector);
    public TResult First(Func`2<T, TResult> selector, bool isAutoDto);
    public TResult First();
    public Subqueryable`1<T> AsWithAttr();
}
public class SqlSugar.Subqueryable`10 : Subqueryable`1<T1> {
}
public class SqlSugar.Subqueryable`2 : Subqueryable`1<T1> {
    public Subqueryable`2<T1, T2> AsWithAttr();
    public Subqueryable`2<T1, T2> Where(List`1<IConditionalModel> conditionals);
    public Subqueryable`3<T1, T2, JoinType> InnerJoin(Func`4<T1, T2, JoinType, bool> expression);
    public Subqueryable`3<T1, T2, JoinType> LeftJoin(Func`4<T1, T2, JoinType, bool> expression);
    public Subqueryable`3<T1, T2, JoinType> InnerJoin(Func`4<T1, T2, JoinType, bool> expression, string tableName);
    public Subqueryable`3<T1, T2, JoinType> LeftJoin(Func`4<T1, T2, JoinType, bool> expression, string tableName);
    public Subqueryable`2<T1, T2> Where(Func`2<T1, bool> expression);
    public Subqueryable`2<T1, T2> Where(Func`3<T1, T2, bool> expression);
    public Subqueryable`2<T1, T2> OrderBy(Func`3<T1, T2, object> expression);
    public Subqueryable`2<T1, T2> OrderBy(Func`2<T1, object> expression);
    public Subqueryable`2<T1, T2> OrderByDesc(Func`3<T1, T2, object> expression);
    public Subqueryable`2<T1, T2> OrderByDesc(Func`2<T1, object> expression);
    public Subqueryable`2<T1, T2> GroupBy(Func`3<T1, T2, object> expression);
    public Subqueryable`2<T1, T2> GroupBy(Func`2<T1, object> expression);
    public Subqueryable`2<T1, T2> WhereIF(bool isWhere, Func`3<T1, T2, bool> expression);
    public TResult Select(Func`3<T1, T2, TResult> expression);
    public string Select(Func`3<T1, T2, string> expression);
    public string SelectStringJoin(Func`3<T1, T2, string> expression, string separator);
    public List`1<TResult> ToList(Func`3<T1, T2, TResult> selector);
    public List`1<TResult> ToList(Func`3<T1, T2, TResult> selector, bool isAutoDto);
    public TResult First(Func`3<T1, T2, TResult> selector, bool isAutoDto);
    public TResult Max(Func`3<T1, T2, TResult> expression);
    public Byte[] Max(Func`3<T1, T2, Byte[]> expression);
    public string Max(Func`3<T1, T2, string> expression);
    public string Min(Func`3<T1, T2, string> expression);
    public TResult Min(Func`3<T1, T2, TResult> expression);
    public Byte[] Min(Func`3<T1, T2, Byte[]> expression);
    public string Sum(Func`3<T1, T2, string> expression);
    public TResult Sum(Func`3<T1, T2, TResult> expression);
}
public class SqlSugar.Subqueryable`3 : Subqueryable`1<T1> {
    public Subqueryable`3<T1, T2, T3> AsWithAttr();
    public Subqueryable`3<T1, T2, T3> Where(List`1<IConditionalModel> conditionals);
    public Subqueryable`4<T1, T2, T3, JoinType> InnerJoin(Func`5<T1, T2, T3, JoinType, bool> expression);
    public Subqueryable`4<T1, T2, T3, JoinType> LeftJoin(Func`5<T1, T2, T3, JoinType, bool> expression);
    public Subqueryable`3<T1, T2, T3> Where(Func`2<T1, bool> expression);
    public Subqueryable`3<T1, T2, T3> Where(Func`3<T1, T2, bool> expression);
    public Subqueryable`3<T1, T2, T3> Where(Func`4<T1, T2, T3, bool> expression);
    public Subqueryable`3<T1, T2, T3> WhereIF(bool isWhere, Func`4<T1, T2, T3, bool> expression);
    public Subqueryable`3<T1, T2, T3> OrderBy(Func`4<T1, T2, T3, object> expression);
    public Subqueryable`3<T1, T2, T3> OrderBy(Func`3<T1, T2, object> expression);
    public Subqueryable`3<T1, T2, T3> OrderBy(Func`2<T1, object> expression);
    public Subqueryable`3<T1, T2, T3> OrderByDesc(Func`4<T1, T2, T3, object> expression);
    public Subqueryable`3<T1, T2, T3> OrderByDesc(Func`3<T1, T2, object> expression);
    public Subqueryable`3<T1, T2, T3> OrderByDesc(Func`2<T1, object> expression);
    public Subqueryable`3<T1, T2, T3> GroupBy(Func`4<T1, T2, T3, object> expression);
    public Subqueryable`3<T1, T2, T3> GroupBy(Func`3<T1, T2, object> expression);
    public Subqueryable`3<T1, T2, T3> GroupBy(Func`2<T1, object> expression);
    public TResult Select(Func`4<T1, T2, T3, TResult> expression);
    public string Select(Func`4<T1, T2, T3, string> expression);
    public string SelectStringJoin(Func`4<T1, T2, T3, string> expression, string separator);
    public List`1<TResult> ToList(Func`4<T1, T2, T3, TResult> selector);
    public List`1<TResult> ToList(Func`4<T1, T2, T3, TResult> selector, bool isAutoDto);
    public TResult First(Func`4<T1, T2, T3, TResult> selector, bool isAutoDto);
    public TResult Max(Func`4<T1, T2, T3, TResult> expression);
    public Byte[] Max(Func`4<T1, T2, T3, Byte[]> expression);
    public string Max(Func`4<T1, T2, T3, string> expression);
    public string Min(Func`4<T1, T2, T3, string> expression);
    public TResult Min(Func`4<T1, T2, T3, TResult> expression);
    public Byte[] Min(Func`4<T1, T2, T3, Byte[]> expression);
    public string Sum(Func`4<T1, T2, T3, string> expression);
    public TResult Sum(Func`4<T1, T2, T3, TResult> expression);
}
public class SqlSugar.Subqueryable`4 : Subqueryable`1<T1> {
    public Subqueryable`4<T1, T2, T3, T4> AsWithAttr();
    public Subqueryable`4<T1, T2, T3, T4> Where(List`1<IConditionalModel> conditionals);
    public Subqueryable`5<T1, T2, T3, T4, JoinType> InnerJoin(Func`6<T1, T2, T3, T4, JoinType, bool> expression);
    public Subqueryable`5<T1, T2, T3, T4, JoinType> LeftJoin(Func`6<T1, T2, T3, T4, JoinType, bool> expression);
    public Subqueryable`5<T1, T2, T3, T4, JoinType> InnerJoin(Func`6<T1, T2, T3, T4, JoinType, bool> expression, string tableName);
    public Subqueryable`5<T1, T2, T3, T4, JoinType> LeftJoin(Func`6<T1, T2, T3, T4, JoinType, bool> expression, string tableName);
    public Subqueryable`4<T1, T2, T3, T4> Where(Func`2<T1, bool> expression);
    public Subqueryable`4<T1, T2, T3, T4> Where(Func`3<T1, T2, bool> expression);
    public Subqueryable`4<T1, T2, T3, T4> Where(Func`4<T1, T2, T3, bool> expression);
    public Subqueryable`4<T1, T2, T3, T4> Where(Func`5<T1, T2, T3, T4, bool> expression);
    public Subqueryable`4<T1, T2, T3, T4> WhereIF(bool isWhere, Func`5<T1, T2, T3, T4, bool> expression);
    public TResult Select(Func`5<T1, T2, T3, T4, TResult> expression);
    public string Select(Func`5<T1, T2, T3, T4, string> expression);
    public Subqueryable`4<T1, T2, T3, T4> OrderBy(Func`5<T1, T2, T3, T4, object> expression);
    public Subqueryable`4<T1, T2, T3, T4> OrderByDesc(Func`5<T1, T2, T3, T4, object> expression);
    public Subqueryable`4<T1, T2, T3, T4> GroupBy(Func`5<T1, T2, T3, T4, object> expression);
    public string SelectStringJoin(Func`5<T1, T2, T3, T4, string> expression, string separator);
    public List`1<TResult> ToList(Func`5<T1, T2, T3, T4, TResult> selector);
    public List`1<TResult> ToList(Func`5<T1, T2, T3, T4, TResult> selector, bool isAutoDto);
    public TResult First(Func`5<T1, T2, T3, T4, TResult> selector, bool isAutoDto);
    public TResult Max(Func`5<T1, T2, T3, T4, TResult> expression);
    public Byte[] Max(Func`5<T1, T2, T3, T4, Byte[]> expression);
    public string Max(Func`5<T1, T2, T3, T4, string> expression);
    public string Min(Func`5<T1, T2, T3, T4, string> expression);
    public TResult Min(Func`5<T1, T2, T3, T4, TResult> expression);
    public Byte[] Min(Func`5<T1, T2, T3, T4, Byte[]> expression);
    public string Sum(Func`5<T1, T2, T3, T4, string> expression);
    public TResult Sum(Func`5<T1, T2, T3, T4, TResult> expression);
}
public class SqlSugar.Subqueryable`5 : Subqueryable`1<T1> {
    public string SelectStringJoin(Func`6<T1, T2, T3, T4, T5, string> expression, string separator);
    public Subqueryable`5<T1, T2, T3, T4, T5> AsWithAttr();
    public Subqueryable`5<T1, T2, T3, T4, T5> Where(List`1<IConditionalModel> conditionals);
    public Subqueryable`6<T1, T2, T3, T4, T5, JoinType> InnerJoin(Func`7<T1, T2, T3, T4, T5, JoinType, bool> expression);
    public Subqueryable`6<T1, T2, T3, T4, T5, JoinType> LeftJoin(Func`7<T1, T2, T3, T4, T5, JoinType, bool> expression);
    public Subqueryable`6<T1, T2, T3, T4, T5, JoinType> InnerJoin(Func`7<T1, T2, T3, T4, T5, JoinType, bool> expression, string tableName);
    public Subqueryable`6<T1, T2, T3, T4, T5, JoinType> LeftJoin(Func`7<T1, T2, T3, T4, T5, JoinType, bool> expression, string tableName);
    public Subqueryable`5<T1, T2, T3, T4, T5> Where(Func`2<T1, bool> expression);
    public Subqueryable`5<T1, T2, T3, T4, T5> Where(Func`3<T1, T2, bool> expression);
    public Subqueryable`5<T1, T2, T3, T4, T5> Where(Func`4<T1, T2, T3, bool> expression);
    public Subqueryable`5<T1, T2, T3, T4, T5> Where(Func`5<T1, T2, T3, T4, bool> expression);
    public Subqueryable`5<T1, T2, T3, T4, T5> Where(Func`6<T1, T2, T3, T4, T5, bool> expression);
    public List`1<TResult> ToList(Func`6<T1, T2, T3, T4, T5, TResult> selector);
}
public class SqlSugar.Subqueryable`6 : Subqueryable`1<T1> {
    public string SelectStringJoin(Func`7<T1, T2, T3, T4, T5, T6, string> expression, string separator);
    public Subqueryable`6<T1, T2, T3, T4, T5, T6> AsWithAttr();
    public Subqueryable`6<T1, T2, T3, T4, T5, T6> Where(List`1<IConditionalModel> conditionals);
    public Subqueryable`7<T1, T2, T3, T4, T5, T6, JoinType> InnerJoin(Func`8<T1, T2, T3, T4, T5, T6, JoinType, bool> expression);
    public Subqueryable`7<T1, T2, T3, T4, T5, T6, JoinType> LeftJoin(Func`8<T1, T2, T3, T4, T5, T6, JoinType, bool> expression);
    public Subqueryable`7<T1, T2, T3, T4, T5, T6, JoinType> InnerJoin(Func`8<T1, T2, T3, T4, T5, T6, JoinType, bool> expression, string tableName);
    public Subqueryable`7<T1, T2, T3, T4, T5, T6, JoinType> LeftJoin(Func`8<T1, T2, T3, T4, T5, T6, JoinType, bool> expression, string tableName);
    public Subqueryable`6<T1, T2, T3, T4, T5, T6> Where(Func`2<T1, bool> expression);
    public Subqueryable`6<T1, T2, T3, T4, T5, T6> Where(Func`3<T1, T2, bool> expression);
    public Subqueryable`6<T1, T2, T3, T4, T5, T6> Where(Func`4<T1, T2, T3, bool> expression);
    public Subqueryable`6<T1, T2, T3, T4, T5, T6> Where(Func`5<T1, T2, T3, T4, bool> expression);
    public Subqueryable`6<T1, T2, T3, T4, T5, T6> Where(Func`6<T1, T2, T3, T4, T5, bool> expression);
    public Subqueryable`6<T1, T2, T3, T4, T5, T6> Where(Func`7<T1, T2, T3, T4, T5, T6, bool> expression);
    public List`1<TResult> ToList(Func`7<T1, T2, T3, T4, T5, T6, TResult> selector);
}
public class SqlSugar.Subqueryable`7 : Subqueryable`1<T1> {
    public Subqueryable`7<T1, T2, T3, T4, T5, T6, T7> AsWithAttr();
    public Subqueryable`8<T1, T2, T3, T4, T5, T6, T7, JoinType> InnerJoin(Func`9<T1, T2, T3, T4, T5, T6, T7, JoinType, bool> expression);
    public Subqueryable`8<T1, T2, T3, T4, T5, T6, T7, JoinType> LeftJoin(Func`9<T1, T2, T3, T4, T5, T6, T7, JoinType, bool> expression);
    public Subqueryable`8<T1, T2, T3, T4, T5, T6, T7, JoinType> InnerJoin(Func`9<T1, T2, T3, T4, T5, T6, T7, JoinType, bool> expression, string tableName);
    public Subqueryable`8<T1, T2, T3, T4, T5, T6, T7, JoinType> LeftJoin(Func`9<T1, T2, T3, T4, T5, T6, T7, JoinType, bool> expression, string tableName);
    public Subqueryable`7<T1, T2, T3, T4, T5, T6, T7> Where(Func`2<T1, bool> expression);
    public Subqueryable`7<T1, T2, T3, T4, T5, T6, T7> Where(Func`3<T1, T2, bool> expression);
    public Subqueryable`7<T1, T2, T3, T4, T5, T6, T7> Where(Func`4<T1, T2, T3, bool> expression);
    public Subqueryable`7<T1, T2, T3, T4, T5, T6, T7> Where(Func`5<T1, T2, T3, T4, bool> expression);
    public Subqueryable`7<T1, T2, T3, T4, T5, T6, T7> Where(Func`6<T1, T2, T3, T4, T5, bool> expression);
    public Subqueryable`7<T1, T2, T3, T4, T5, T6, T7> Where(Func`7<T1, T2, T3, T4, T5, T6, bool> expression);
    public Subqueryable`7<T1, T2, T3, T4, T5, T6, T7> Where(Func`8<T1, T2, T3, T4, T5, T6, T7, bool> expression);
    public List`1<TResult> ToList(Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> selector);
}
public class SqlSugar.Subqueryable`8 : Subqueryable`1<T1> {
    public Subqueryable`8<T1, T2, T3, T4, T5, T6, T7, T8> AsWithAttr();
    public Subqueryable`9<T1, T2, T3, T4, T5, T6, T7, T8, JoinType> InnerJoin(Func`10<T1, T2, T3, T4, T5, T6, T7, T8, JoinType, bool> expression);
    public Subqueryable`9<T1, T2, T3, T4, T5, T6, T7, T8, JoinType> LeftJoin(Func`10<T1, T2, T3, T4, T5, T6, T7, T8, JoinType, bool> expression);
    public Subqueryable`9<T1, T2, T3, T4, T5, T6, T7, T8, JoinType> InnerJoin(Func`10<T1, T2, T3, T4, T5, T6, T7, T8, JoinType, bool> expression, string tableName);
    public Subqueryable`9<T1, T2, T3, T4, T5, T6, T7, T8, JoinType> LeftJoin(Func`10<T1, T2, T3, T4, T5, T6, T7, T8, JoinType, bool> expression, string tableName);
    public Subqueryable`8<T1, T2, T3, T4, T5, T6, T7, T8> Where(Func`2<T1, bool> expression);
    public Subqueryable`8<T1, T2, T3, T4, T5, T6, T7, T8> Where(Func`3<T1, T2, bool> expression);
    public Subqueryable`8<T1, T2, T3, T4, T5, T6, T7, T8> Where(Func`4<T1, T2, T3, bool> expression);
    public Subqueryable`8<T1, T2, T3, T4, T5, T6, T7, T8> Where(Func`5<T1, T2, T3, T4, bool> expression);
    public Subqueryable`8<T1, T2, T3, T4, T5, T6, T7, T8> Where(Func`6<T1, T2, T3, T4, T5, bool> expression);
    public Subqueryable`8<T1, T2, T3, T4, T5, T6, T7, T8> Where(Func`7<T1, T2, T3, T4, T5, T6, bool> expression);
    public Subqueryable`8<T1, T2, T3, T4, T5, T6, T7, T8> Where(Func`8<T1, T2, T3, T4, T5, T6, T7, bool> expression);
    public Subqueryable`8<T1, T2, T3, T4, T5, T6, T7, T8> Where(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool> expression);
    public List`1<TResult> ToList(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> selector);
}
public class SqlSugar.Subqueryable`9 : Subqueryable`1<T1> {
    public Subqueryable`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> AsWithAttr();
    public Subqueryable`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, JoinType> InnerJoin(Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, JoinType, bool> expression);
    public Subqueryable`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, JoinType> LeftJoin(Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, JoinType, bool> expression);
    public Subqueryable`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, JoinType> InnerJoin(Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, JoinType, bool> expression, string tableName);
    public Subqueryable`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, JoinType> LeftJoin(Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, JoinType, bool> expression, string tableName);
    public Subqueryable`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Where(Func`2<T1, bool> expression);
    public Subqueryable`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Where(Func`3<T1, T2, bool> expression);
    public Subqueryable`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Where(Func`4<T1, T2, T3, bool> expression);
    public Subqueryable`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Where(Func`5<T1, T2, T3, T4, bool> expression);
    public Subqueryable`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Where(Func`6<T1, T2, T3, T4, T5, bool> expression);
    public Subqueryable`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Where(Func`7<T1, T2, T3, T4, T5, T6, bool> expression);
    public Subqueryable`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Where(Func`8<T1, T2, T3, T4, T5, T6, T7, bool> expression);
    public Subqueryable`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Where(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool> expression);
    public Subqueryable`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Where(Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool> expression);
    public List`1<TResult> ToList(Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> selector);
}
internal class SqlSugar.SubQueryToListDefaultT : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <sugarIndex>k__BackingField;
    public object id { get; public set; }
    public object sugarIndex { get; public set; }
    [CompilerGeneratedAttribute]
public object get_id();
    [CompilerGeneratedAttribute]
public void set_id(object value);
    [CompilerGeneratedAttribute]
public object get_sugarIndex();
    [CompilerGeneratedAttribute]
public void set_sugarIndex(object value);
}
public class SqlSugar.SubResolve : object {
    private List`1<MethodCallExpression> allMethods;
    private ExpressionContext context;
    private string subKey;
    private bool hasWhere;
    private bool isXmlPath;
    private bool isAsAttr;
    public SubResolve(MethodCallExpression expression, ExpressionContext context, Expression oppsiteExpression);
    public string GetSql();
    private static bool IsJoin(string it);
    private void GetSubAs(List`1<string> sqlItems, List`1<string> asItems);
    private void GetShortName(List`1<string> sqlItems);
    private List`1<string> GetSubItems();
    private static void SetOrderByIndex(List`1<ISubOperation> isubList);
    [CompilerGeneratedAttribute]
private bool <GetSql>b__7_0(string it);
    [CompilerGeneratedAttribute]
private bool <GetSql>b__7_1(string it);
}
public class SqlSugar.SubRightBracket : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    public bool HasWhere { get; public set; }
    public ExpressionContext Context { get; public set; }
    public Expression Expression { get; public set; }
    public string Name { get; }
    public int Sort { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual string get_Name();
    public sealed virtual int get_Sort();
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubSelect : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
    private void InitType(MethodCallExpression exp);
    public void SetShortName(MethodCallExpression exp, string result);
    public void SetShortNameNext(MethodCallExpression exp, string result);
}
public class SqlSugar.SubSelectDefault : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    public bool HasWhere { get; public set; }
    public ExpressionContext Context { get; public set; }
    public Expression Expression { get; public set; }
    public string Name { get; }
    public int Sort { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual string get_Name();
    public sealed virtual int get_Sort();
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubSelectStringJoin : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
    private void InitType(MethodCallExpression exp);
    public void SetShortName(MethodCallExpression exp, string result);
    public void SetShortNameNext(MethodCallExpression exp, string result);
    [CompilerGeneratedAttribute]
private string <GetValue>b__16_0(string it);
}
public class SqlSugar.SubSum : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubToList : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
    private void InitType(MethodCallExpression exp);
    public void SetShortName(MethodCallExpression exp, string result);
    public void SetShortNameNext(MethodCallExpression exp, string result);
    private string GetValueByAuto(MethodCallExpression exp);
    private string AppendParameter(ExpressionContext copyContext, string select);
    private static bool IsAutoSelect(MethodCallExpression exp);
    private static bool IsAutoGeneric(MethodCallExpression exp);
    [CompilerGeneratedAttribute]
private string <GetValue>b__16_3(EntityColumnInfo it);
}
public class SqlSugar.SubTools : object {
    public static List`1<ISubOperation> SubItemsConst;
    private static SubTools();
    public static List`1<ISubOperation> SubItems(ExpressionContext Context);
    public static string GetSubReplace(ExpressionContext context);
    public static string GetMethodValue(ExpressionContext context, Expression item, ResolveExpressType type);
    public static string GetMethodValueSubJoin(ExpressionContext context, Expression item, ResolveExpressType type);
}
public class SqlSugar.SubTop : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    public bool HasWhere { get; public set; }
    public ExpressionContext Context { get; public set; }
    public Expression Expression { get; public set; }
    public string Name { get; }
    public int Sort { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual string get_Name();
    public sealed virtual int get_Sort();
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubWhere : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
    private object GetValue(string result, string regex);
}
public class SqlSugar.SubWhereIF : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public Expression Expression { get; public set; }
    public int Sort { get; }
    public ExpressionContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    public sealed virtual int get_Sort();
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SubWithNolock : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExpressionContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <HasWhere>k__BackingField;
    public ExpressionContext Context { get; public set; }
    public Expression Expression { get; public set; }
    public bool HasWhere { get; public set; }
    public string Name { get; }
    public int Sort { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ExpressionContext value);
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Expression(Expression value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasWhere();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasWhere(bool value);
    public sealed virtual string get_Name();
    public sealed virtual int get_Sort();
    public sealed virtual string GetValue(Expression expression);
}
public class SqlSugar.SugarAbMapping : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Aid>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Bid>k__BackingField;
    public string Aid { get; public set; }
    public string Bid { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Aid();
    [CompilerGeneratedAttribute]
public void set_Aid(string value);
    [CompilerGeneratedAttribute]
public string get_Bid();
    [CompilerGeneratedAttribute]
public void set_Bid(string value);
}
public enum SqlSugar.SugarActionType : Enum {
    public int value__;
    public static SugarActionType Insert;
    public static SugarActionType Update;
    public static SugarActionType Delete;
    public static SugarActionType Query;
    public static SugarActionType UnKnown;
}
public class SqlSugar.SugarAsyncLock : object {
    private static SemaphoreSlim SemaphoreSlim;
    public SugarAsyncLock(SqlSugarProvider db);
    private static SugarAsyncLock();
    [AsyncStateMachineAttribute("SqlSugar.SugarAsyncLock/<AsyncLock>d__2")]
[DebuggerStepThroughAttribute]
public Task`1<SugarAsyncLock> AsyncLock(int timeOutSeconds);
    public sealed virtual void Dispose();
}
internal class SqlSugar.SugarCacheDataTable : object {
}
internal class SqlSugar.SugarCacheDictionary : object {
}
internal class SqlSugar.SugarCacheDictionaryList : object {
}
public class SqlSugar.SugarCacheProvider : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICacheService <Servie>k__BackingField;
    public ICacheService Servie { get; public set; }
    [CompilerGeneratedAttribute]
public ICacheService get_Servie();
    [CompilerGeneratedAttribute]
public void set_Servie(ICacheService value);
    public void RemoveDataCache(string likeString);
    public List`1<string> GetAllKey();
    public void Add(string key, object value);
    public void Add(string key, object value, int seconds);
    public T Get(string key);
}
[AttributeUsageAttribute("128")]
public class SqlSugar.SugarColumn : Attribute {
    private string _ColumnName;
    private bool _IsIgnore;
    private bool _IsPrimaryKey;
    private bool _IsIdentity;
    private string _MappingKeys;
    private string _ColumnDescription;
    private int _Length;
    private bool _IsNullable;
    private string _OldColumnName;
    private string _ColumnDataType;
    private int _DecimalDigits;
    private string _OracleSequenceName;
    private bool _IsOnlyIgnoreInsert;
    private bool _IsOnlyIgnoreUpdate;
    private bool _IsEnableUpdateVersionValidation;
    private bool _IsTranscoding;
    private bool _NoSerialize;
    private string _SerializeDateTimeFormat;
    private bool _IsJson;
    private string _DefaultValue;
    private String[] _IndexGroupNameList;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <UniqueGroupNameList>k__BackingField;
    private bool _IsArray;
    private bool _IsTreeKey;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <SqlParameterDbType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <SqlParameterSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <CreateTableFieldSort>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <InsertServerTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <InsertSql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <QuerySql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UpdateServerTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UpdateSql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <ExtendedAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDisabledAlterColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsOwnsOne>k__BackingField;
    public string ColumnName { get; public set; }
    public bool IsIgnore { get; public set; }
    public bool IsPrimaryKey { get; public set; }
    public bool IsIdentity { get; public set; }
    public string MappingKeys { get; public set; }
    public string ColumnDescription { get; public set; }
    public int Length { get; public set; }
    public bool IsNullable { get; public set; }
    public string OldColumnName { get; public set; }
    public string ColumnDataType { get; public set; }
    public int DecimalDigits { get; public set; }
    public string OracleSequenceName { get; public set; }
    public bool IsOnlyIgnoreInsert { get; public set; }
    public bool IsOnlyIgnoreUpdate { get; public set; }
    public bool IsEnableUpdateVersionValidation { get; public set; }
    public bool IsTranscoding { get; public set; }
    public bool NoSerialize { get; public set; }
    public string SerializeDateTimeFormat { get; public set; }
    public bool IsJson { get; public set; }
    public string DefaultValue { get; public set; }
    public String[] IndexGroupNameList { get; public set; }
    public String[] UniqueGroupNameList { get; public set; }
    public bool IsArray { get; public set; }
    public bool IsTreeKey { get; public set; }
    public object SqlParameterDbType { get; public set; }
    public object SqlParameterSize { get; public set; }
    public int CreateTableFieldSort { get; public set; }
    public bool InsertServerTime { get; public set; }
    public string InsertSql { get; public set; }
    public string QuerySql { get; public set; }
    public bool UpdateServerTime { get; public set; }
    public string UpdateSql { get; public set; }
    public object ExtendedAttribute { get; public set; }
    public bool IsDisabledAlterColumn { get; public set; }
    public bool IsOwnsOne { get; public set; }
    public string get_ColumnName();
    public void set_ColumnName(string value);
    public bool get_IsIgnore();
    public void set_IsIgnore(bool value);
    public bool get_IsPrimaryKey();
    public void set_IsPrimaryKey(bool value);
    public bool get_IsIdentity();
    public void set_IsIdentity(bool value);
    public string get_MappingKeys();
    public void set_MappingKeys(string value);
    public string get_ColumnDescription();
    public void set_ColumnDescription(string value);
    public int get_Length();
    public void set_Length(int value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    public string get_OldColumnName();
    public void set_OldColumnName(string value);
    public string get_ColumnDataType();
    public void set_ColumnDataType(string value);
    public int get_DecimalDigits();
    public void set_DecimalDigits(int value);
    public string get_OracleSequenceName();
    public void set_OracleSequenceName(string value);
    public bool get_IsOnlyIgnoreInsert();
    public void set_IsOnlyIgnoreInsert(bool value);
    public bool get_IsOnlyIgnoreUpdate();
    public void set_IsOnlyIgnoreUpdate(bool value);
    public bool get_IsEnableUpdateVersionValidation();
    public void set_IsEnableUpdateVersionValidation(bool value);
    public bool get_IsTranscoding();
    public void set_IsTranscoding(bool value);
    public bool get_NoSerialize();
    public void set_NoSerialize(bool value);
    public string get_SerializeDateTimeFormat();
    public void set_SerializeDateTimeFormat(string value);
    public bool get_IsJson();
    public void set_IsJson(bool value);
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public String[] get_IndexGroupNameList();
    public void set_IndexGroupNameList(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_UniqueGroupNameList();
    [CompilerGeneratedAttribute]
public void set_UniqueGroupNameList(String[] value);
    public bool get_IsArray();
    public void set_IsArray(bool value);
    public bool get_IsTreeKey();
    public void set_IsTreeKey(bool value);
    [CompilerGeneratedAttribute]
public object get_SqlParameterDbType();
    [CompilerGeneratedAttribute]
public void set_SqlParameterDbType(object value);
    [CompilerGeneratedAttribute]
public object get_SqlParameterSize();
    [CompilerGeneratedAttribute]
public void set_SqlParameterSize(object value);
    [CompilerGeneratedAttribute]
public int get_CreateTableFieldSort();
    [CompilerGeneratedAttribute]
public void set_CreateTableFieldSort(int value);
    [CompilerGeneratedAttribute]
public bool get_InsertServerTime();
    [CompilerGeneratedAttribute]
public void set_InsertServerTime(bool value);
    [CompilerGeneratedAttribute]
public string get_InsertSql();
    [CompilerGeneratedAttribute]
public void set_InsertSql(string value);
    [CompilerGeneratedAttribute]
public string get_QuerySql();
    [CompilerGeneratedAttribute]
public void set_QuerySql(string value);
    [CompilerGeneratedAttribute]
public bool get_UpdateServerTime();
    [CompilerGeneratedAttribute]
public void set_UpdateServerTime(bool value);
    [CompilerGeneratedAttribute]
public string get_UpdateSql();
    [CompilerGeneratedAttribute]
public void set_UpdateSql(string value);
    [CompilerGeneratedAttribute]
public object get_ExtendedAttribute();
    [CompilerGeneratedAttribute]
public void set_ExtendedAttribute(object value);
    [CompilerGeneratedAttribute]
public bool get_IsDisabledAlterColumn();
    [CompilerGeneratedAttribute]
public void set_IsDisabledAlterColumn(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOwnsOne();
    [CompilerGeneratedAttribute]
public void set_IsOwnsOne(bool value);
}
public class SqlSugar.SugarCompatible : object {
    public static bool IsFramework;
}
public class SqlSugar.SugarConnection : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDbConnection <conn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAutoClose>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlSugarClient <Context>k__BackingField;
    public IDbConnection conn { get; public set; }
    public bool IsAutoClose { get; public set; }
    public ISqlSugarClient Context { get; public set; }
    [CompilerGeneratedAttribute]
public IDbConnection get_conn();
    [CompilerGeneratedAttribute]
public void set_conn(IDbConnection value);
    [CompilerGeneratedAttribute]
public bool get_IsAutoClose();
    [CompilerGeneratedAttribute]
public void set_IsAutoClose(bool value);
    [CompilerGeneratedAttribute]
public ISqlSugarClient get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(ISqlSugarClient value);
    public sealed virtual void Dispose();
}
public class SqlSugar.SugarDateTimeFormat : object {
    public static string Default;
    public static string Date;
}
public class SqlSugar.SugarDebugger : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <EnableThreadSecurityValidation>k__BackingField;
    public bool EnableThreadSecurityValidation { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableThreadSecurityValidation();
    [CompilerGeneratedAttribute]
public void set_EnableThreadSecurityValidation(bool value);
}
[AttributeUsageAttribute("4")]
public class SqlSugar.SugarIndexAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <IndexName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, OrderByType> <IndexFields>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsUnique>k__BackingField;
    public string IndexName { get; public set; }
    public Dictionary`2<string, OrderByType> IndexFields { get; public set; }
    public bool IsUnique { get; public set; }
    public SugarIndexAttribute(string indexName, string fieldName, OrderByType sortType, bool isUnique);
    public SugarIndexAttribute(string indexName, string fieldName1, OrderByType sortType1, string fieldName2, OrderByType sortType2, bool isUnique);
    public SugarIndexAttribute(string indexName, string fieldName1, OrderByType sortType1, string fieldName2, OrderByType sortType2, string fieldName3, OrderByType sortType3, bool isUnique);
    public SugarIndexAttribute(string indexName, string fieldName1, OrderByType sortType1, string fieldName2, OrderByType sortType2, string fieldName3, OrderByType sortType3, string fieldName4, OrderByType sortType4, bool isUnique);
    public SugarIndexAttribute(string indexName, string fieldName1, OrderByType sortType1, string fieldName2, OrderByType sortType2, string fieldName3, OrderByType sortType3, string fieldName4, OrderByType sortType4, string fieldName5, OrderByType sortType5, bool isUnique);
    public SugarIndexAttribute(string indexName, string fieldName1, OrderByType sortType1, string fieldName2, OrderByType sortType2, string fieldName3, OrderByType sortType3, string fieldName4, OrderByType sortType4, string fieldName5, OrderByType sortType5, string fieldName6, OrderByType sortType6, bool isUnique);
    public SugarIndexAttribute(string indexName, string fieldName1, OrderByType sortType1, string fieldName2, OrderByType sortType2, string fieldName3, OrderByType sortType3, string fieldName4, OrderByType sortType4, string fieldName5, OrderByType sortType5, string fieldName6, OrderByType sortType6, string fieldName7, OrderByType sortType7, bool isUnique);
    public SugarIndexAttribute(string indexName, string fieldName1, OrderByType sortType1, string fieldName2, OrderByType sortType2, string fieldName3, OrderByType sortType3, string fieldName4, OrderByType sortType4, string fieldName5, OrderByType sortType5, string fieldName6, OrderByType sortType6, string fieldName7, OrderByType sortType7, string fieldName8, OrderByType sortType8, bool isUnique);
    public SugarIndexAttribute(string indexName, string fieldName1, OrderByType sortType1, string fieldName2, OrderByType sortType2, string fieldName3, OrderByType sortType3, string fieldName4, OrderByType sortType4, string fieldName5, OrderByType sortType5, string fieldName6, OrderByType sortType6, string fieldName7, OrderByType sortType7, string fieldName8, OrderByType sortType8, string fieldName9, OrderByType sortType9, bool isUnique);
    public SugarIndexAttribute(string indexName, string fieldName1, OrderByType sortType1, string fieldName2, OrderByType sortType2, string fieldName3, OrderByType sortType3, string fieldName4, OrderByType sortType4, string fieldName5, OrderByType sortType5, string fieldName6, OrderByType sortType6, string fieldName7, OrderByType sortType7, string fieldName8, OrderByType sortType8, string fieldName9, OrderByType sortType9, string fieldName10, OrderByType sortType10, bool isUnique);
    public SugarIndexAttribute(string indexName, String[] fieldNames, OrderByType[] sortTypes, bool isUnique);
    [CompilerGeneratedAttribute]
public string get_IndexName();
    [CompilerGeneratedAttribute]
public void set_IndexName(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, OrderByType> get_IndexFields();
    [CompilerGeneratedAttribute]
public void set_IndexFields(Dictionary`2<string, OrderByType> value);
    [CompilerGeneratedAttribute]
public bool get_IsUnique();
    [CompilerGeneratedAttribute]
public void set_IsUnique(bool value);
}
public class SqlSugar.SugarMapper : object {
    private ISqlSugarClient _context;
    public SugarMapper(ISqlSugarClient context);
    public string GetSelectValue(QueryBuilder queryBuilder);
}
public class SqlSugar.SugarParameter : DbParameter {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsRefCursor>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsClob>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNClob>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNvarchar2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbType <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ParameterDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private byte <Scale>k__BackingField;
    public int _Size;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SourceColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <SourceColumnNullMapping>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UdtTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, object> <TempDate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DataRowVersion <SourceVersion>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsJson>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsArray>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <CustomDbType>k__BackingField;
    public bool IsRefCursor { get; public set; }
    public bool IsClob { get; public set; }
    public bool IsNClob { get; public set; }
    public bool IsNvarchar2 { get; public set; }
    public DbType DbType { get; public set; }
    public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    public string ParameterName { get; public set; }
    public byte Scale { get; public set; }
    public int Size { get; public set; }
    public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    public string UdtTypeName { get; public set; }
    public object Value { get; public set; }
    public Dictionary`2<string, object> TempDate { get; public set; }
    public DataRowVersion SourceVersion { get; public set; }
    public string TypeName { get; public set; }
    public bool IsJson { get; public set; }
    public bool IsArray { get; public set; }
    public object CustomDbType { get; public set; }
    public SugarParameter(string name, object value);
    public SugarParameter(string name, object value, Type type);
    public SugarParameter(string name, object value, Type type, ParameterDirection direction);
    public SugarParameter(string name, object value, Type type, ParameterDirection direction, int size);
    public SugarParameter(string name, object value, DbType type);
    public SugarParameter(string name, DataTable value, string SqlServerTypeName);
    public SugarParameter(string name, object value, DbType type, ParameterDirection direction);
    public SugarParameter(string name, object value, DbType type, ParameterDirection direction, int size);
    public SugarParameter(string name, object value, bool isOutput);
    [CompilerGeneratedAttribute]
public bool get_IsRefCursor();
    [CompilerGeneratedAttribute]
public void set_IsRefCursor(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsClob();
    [CompilerGeneratedAttribute]
public void set_IsClob(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNClob();
    [CompilerGeneratedAttribute]
public void set_IsNClob(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNvarchar2();
    [CompilerGeneratedAttribute]
public void set_IsNvarchar2(bool value);
    private void SettingDataType(Type type);
    [CompilerGeneratedAttribute]
public virtual DbType get_DbType();
    [CompilerGeneratedAttribute]
public virtual void set_DbType(DbType value);
    [CompilerGeneratedAttribute]
public virtual ParameterDirection get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(ParameterDirection value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_ParameterName();
    [CompilerGeneratedAttribute]
public virtual void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public virtual byte get_Scale();
    [CompilerGeneratedAttribute]
public virtual void set_Scale(byte value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    [CompilerGeneratedAttribute]
public virtual string get_SourceColumn();
    [CompilerGeneratedAttribute]
public virtual void set_SourceColumn(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_SourceColumnNullMapping();
    [CompilerGeneratedAttribute]
public virtual void set_SourceColumnNullMapping(bool value);
    [CompilerGeneratedAttribute]
public string get_UdtTypeName();
    [CompilerGeneratedAttribute]
public void set_UdtTypeName(string value);
    [CompilerGeneratedAttribute]
public virtual object get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(object value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_TempDate();
    [CompilerGeneratedAttribute]
public void set_TempDate(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public virtual DataRowVersion get_SourceVersion();
    [CompilerGeneratedAttribute]
public virtual void set_SourceVersion(DataRowVersion value);
    public virtual void ResetDbType();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsJson();
    [CompilerGeneratedAttribute]
public void set_IsJson(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsArray();
    [CompilerGeneratedAttribute]
public void set_IsArray(bool value);
    [CompilerGeneratedAttribute]
public object get_CustomDbType();
    [CompilerGeneratedAttribute]
public void set_CustomDbType(object value);
}
public static class SqlSugar.SugarRetry : object {
    public static void Execute(Action action, TimeSpan retryInterval, int retryCount);
    public static void Execute(Action`1<T1> action, T1 arg1, TimeSpan retryInterval, int retryCount);
    public static void Execute(Action`2<T1, T2> action, T1 arg1, T2 arg2, TimeSpan retryInterval, int retryCount);
    public static void Execute(Action`3<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3, TimeSpan retryInterval, int retryCount);
    public static void Execute(Action`4<T1, T2, T3, T4> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, TimeSpan retryInterval, int retryCount);
    public static T Execute(Func`1<T> func, TimeSpan retryInterval, int retryCount);
    public static T Execute(Func`2<T1, T> func, T1 arg1, TimeSpan retryInterval, int retryCount);
    public static T Execute(Func`3<T1, T2, T> func, T1 arg1, T2 arg2, TimeSpan retryInterval, int retryCount);
    public static T Execute(Func`4<T1, T2, T3, T> func, T1 arg1, T2 arg2, T3 arg3, TimeSpan retryInterval, int retryCount);
    public static T Execute(Func`5<T1, T2, T3, T4, T> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, TimeSpan retryInterval, int retryCount);
}
[AttributeUsageAttribute("4")]
public class SqlSugar.SugarTable : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableDescription>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDisabledDelete>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDisabledUpdateAll>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsCreateTableFiledSort>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Discrimator>k__BackingField;
    public string TableName { get; public set; }
    public string TableDescription { get; public set; }
    public bool IsDisabledDelete { get; public set; }
    public bool IsDisabledUpdateAll { get; public set; }
    public bool IsCreateTableFiledSort { get; public set; }
    public string Discrimator { get; public set; }
    public SugarTable(string tableName);
    public SugarTable(string tableName, string tableDescription);
    public SugarTable(string tableName, string tableDescription, bool isDisabledDelete);
    public SugarTable(string tableName, string tableDescription, bool isDisabledDelete, bool isCreateTableFieldSort);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_TableDescription();
    [CompilerGeneratedAttribute]
public void set_TableDescription(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDisabledDelete();
    [CompilerGeneratedAttribute]
public void set_IsDisabledDelete(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDisabledUpdateAll();
    [CompilerGeneratedAttribute]
public void set_IsDisabledUpdateAll(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCreateTableFiledSort();
    [CompilerGeneratedAttribute]
public void set_IsCreateTableFiledSort(bool value);
    [CompilerGeneratedAttribute]
public string get_Discrimator();
    [CompilerGeneratedAttribute]
public void set_Discrimator(string value);
}
public class SqlSugar.SugarTenant : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConnectionConfig <ConnectionConfig>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public ConnectionConfig ConnectionConfig { get; public set; }
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public ConnectionConfig get_ConnectionConfig();
    [CompilerGeneratedAttribute]
public void set_ConnectionConfig(ConnectionConfig value);
}
public class SqlSugar.SugarUnitOfWork : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlSugarClient <Db>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITenant <Tenant>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsTran>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsCommit>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsClose>k__BackingField;
    public ISqlSugarClient Db { get; internal set; }
    public ITenant Tenant { get; internal set; }
    public bool IsTran { get; internal set; }
    public bool IsCommit { get; internal set; }
    public bool IsClose { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual ISqlSugarClient get_Db();
    [CompilerGeneratedAttribute]
internal void set_Db(ISqlSugarClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ITenant get_Tenant();
    [CompilerGeneratedAttribute]
internal void set_Tenant(ITenant value);
    [CompilerGeneratedAttribute]
public bool get_IsTran();
    [CompilerGeneratedAttribute]
internal void set_IsTran(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCommit();
    [CompilerGeneratedAttribute]
internal void set_IsCommit(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsClose();
    [CompilerGeneratedAttribute]
internal void set_IsClose(bool value);
    public sealed virtual void Dispose();
    public sealed virtual SimpleClient`1<T> GetRepository();
    public sealed virtual RepositoryType GetMyRepository();
    public sealed virtual bool Commit();
}
public class SqlSugar.SugarUnitOfWork`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlSugarClient <Db>k__BackingField;
    public ISqlSugarClient Db { get; public set; }
    public SugarUnitOfWork`1(ISqlSugarClient db);
    [CompilerGeneratedAttribute]
public sealed virtual ISqlSugarClient get_Db();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Db(ISqlSugarClient value);
    public sealed virtual T CreateContext(bool isTran);
}
public class SqlSugar.TableDifferenceInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DiffColumsInfo> <DeleteColums>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DiffColumsInfo> <UpdateColums>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DiffColumsInfo> <AddColums>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DiffColumsInfo> <UpdateRemark>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    public List`1<DiffColumsInfo> DeleteColums { get; public set; }
    public List`1<DiffColumsInfo> UpdateColums { get; public set; }
    public List`1<DiffColumsInfo> AddColums { get; public set; }
    public List`1<DiffColumsInfo> UpdateRemark { get; public set; }
    public bool IsDiff { get; }
    public string TableName { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<DiffColumsInfo> get_DeleteColums();
    [CompilerGeneratedAttribute]
public void set_DeleteColums(List`1<DiffColumsInfo> value);
    [CompilerGeneratedAttribute]
public List`1<DiffColumsInfo> get_UpdateColums();
    [CompilerGeneratedAttribute]
public void set_UpdateColums(List`1<DiffColumsInfo> value);
    [CompilerGeneratedAttribute]
public List`1<DiffColumsInfo> get_AddColums();
    [CompilerGeneratedAttribute]
public void set_AddColums(List`1<DiffColumsInfo> value);
    [CompilerGeneratedAttribute]
public List`1<DiffColumsInfo> get_UpdateRemark();
    [CompilerGeneratedAttribute]
public void set_UpdateRemark(List`1<DiffColumsInfo> value);
    public bool get_IsDiff();
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
}
public class SqlSugar.TableDifferenceProvider : object {
    internal List`1<DiffTableInfo> tableInfos;
    public string ToDiffString();
    public List`1<TableDifferenceInfo> ToDiffList();
    private static List`1<DiffColumsInfo> GetDeleteColumn(DiffTableInfo tableInfo);
    private List`1<DiffColumsInfo> GetUpdateColumn(DiffTableInfo tableInfo);
    private static List`1<DiffColumsInfo> GetAddColumn(DiffTableInfo tableInfo);
    private static string GetColumnString(DbColumnInfo it);
    private static string GetUpdateColumnString(DbColumnInfo it, DbColumnInfo old);
}
public class SqlSugar.TableFilterItem`1 : SqlFilterItem {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <exp>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FilterName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<ISqlSugarClient, SqlFilterResult> <FilterValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsJoinQuery>k__BackingField;
    private Expression exp { get; private set; }
    private string FilterName { get; private set; }
    private Func`2<ISqlSugarClient, SqlFilterResult> FilterValue { get; private set; }
    private bool IsJoinQuery { get; private set; }
    public TableFilterItem`1(Expression`1<Func`2<T, bool>> expression, bool isJoinOn);
    public TableFilterItem`1(Type entityType, Expression expression, bool isJoinOn);
    [CompilerGeneratedAttribute]
private Expression get_exp();
    [CompilerGeneratedAttribute]
private void set_exp(Expression value);
    [CompilerGeneratedAttribute]
private string get_FilterName();
    [CompilerGeneratedAttribute]
private void set_FilterName(string value);
    [CompilerGeneratedAttribute]
private Func`2<ISqlSugarClient, SqlFilterResult> get_FilterValue();
    [CompilerGeneratedAttribute]
private void set_FilterValue(Func`2<ISqlSugarClient, SqlFilterResult> value);
    [CompilerGeneratedAttribute]
private bool get_IsJoinQuery();
    [CompilerGeneratedAttribute]
private void set_IsJoinQuery(bool value);
}
[AttributeUsageAttribute("4")]
public class SqlSugar.TenantAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <configId>k__BackingField;
    public object configId { get; public set; }
    public TenantAttribute(object configId);
    [CompilerGeneratedAttribute]
public object get_configId();
    [CompilerGeneratedAttribute]
public void set_configId(object value);
}
[AttributeUsageAttribute("128")]
public class SqlSugar.TimeDbSplitFieldAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateType> <DateType>k__BackingField;
    public Nullable`1<DateType> DateType { get; public set; }
    public TimeDbSplitFieldAttribute(DateType type);
    [CompilerGeneratedAttribute]
public Nullable`1<DateType> get_DateType();
    [CompilerGeneratedAttribute]
public void set_DateType(Nullable`1<DateType> value);
}
public class SqlSugar.TypeParameterExpressionReolve : BaseResolve {
    public TypeParameterExpressionReolve(ExpressionParameter parameter);
}
public class SqlSugar.UnaryExpressionResolve : BaseResolve {
    public UnaryExpressionResolve(ExpressionParameter parameter);
    private void MemberLogic(ExpressionParameter parameter, ExpressionParameter baseParameter, ExpressionType nodeType);
    private void Result(ExpressionParameter parameter, ExpressionType nodeType);
    private void Append(ExpressionParameter parameter, ExpressionType nodeType);
    private void AppendNotMember(ExpressionParameter parameter, ExpressionType nodeType);
    private void AppendNotParameter(ExpressionParameter parameter, ExpressionType nodeType);
}
public class SqlSugar.UpdateableFilter`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T[] <DataList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsEnableDiffLogEvent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DiffLogModel <DiffModel>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <UpdateColumns>k__BackingField;
    public T[] DataList { get; public set; }
    public SqlSugarProvider Context { get; public set; }
    public int PageSize { get; internal set; }
    public string TableName { get; internal set; }
    public bool IsEnableDiffLogEvent { get; internal set; }
    public DiffLogModel DiffModel { get; internal set; }
    public List`1<string> UpdateColumns { get; internal set; }
    [CompilerGeneratedAttribute]
public T[] get_DataList();
    [CompilerGeneratedAttribute]
public void set_DataList(T[] value);
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
internal void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
internal void set_TableName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsEnableDiffLogEvent();
    [CompilerGeneratedAttribute]
internal void set_IsEnableDiffLogEvent(bool value);
    [CompilerGeneratedAttribute]
public DiffLogModel get_DiffModel();
    [CompilerGeneratedAttribute]
internal void set_DiffModel(DiffLogModel value);
    [CompilerGeneratedAttribute]
public List`1<string> get_UpdateColumns();
    [CompilerGeneratedAttribute]
internal void set_UpdateColumns(List`1<string> value);
    public int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.UpdateableFilter`1/<ExecuteCommandAsync>d__29")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
    private IUpdateable`1<T> SetFilterSql(IUpdateable`1<T> updateable);
}
public class SqlSugar.UpdateablePage`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T[] <DataList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsEnableDiffLogEvent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DiffLogModel <DiffModel>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <UpdateColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <WhereColumnList>k__BackingField;
    public T[] DataList { get; public set; }
    public SqlSugarProvider Context { get; public set; }
    public int PageSize { get; internal set; }
    public string TableName { get; internal set; }
    public bool IsEnableDiffLogEvent { get; internal set; }
    public DiffLogModel DiffModel { get; internal set; }
    public List`1<string> UpdateColumns { get; internal set; }
    public String[] WhereColumnList { get; internal set; }
    [CompilerGeneratedAttribute]
public T[] get_DataList();
    [CompilerGeneratedAttribute]
public void set_DataList(T[] value);
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
internal void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
internal void set_TableName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsEnableDiffLogEvent();
    [CompilerGeneratedAttribute]
internal void set_IsEnableDiffLogEvent(bool value);
    [CompilerGeneratedAttribute]
public DiffLogModel get_DiffModel();
    [CompilerGeneratedAttribute]
internal void set_DiffModel(DiffLogModel value);
    [CompilerGeneratedAttribute]
public List`1<string> get_UpdateColumns();
    [CompilerGeneratedAttribute]
internal void set_UpdateColumns(List`1<string> value);
    [CompilerGeneratedAttribute]
public String[] get_WhereColumnList();
    [CompilerGeneratedAttribute]
internal void set_WhereColumnList(String[] value);
    public UpdateableFilter`1<T> EnableQueryFilter();
    public int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.UpdateablePage`1/<ExecuteCommandAsync>d__34")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
}
public class SqlSugar.UpdateableProvider`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <EntityInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlBuilder <SqlBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UpdateBuilder <UpdateBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T[] <UpdateObjs>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UpdateParameterIsNull>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<MappingColumn> <MappingColumnList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <IgnoreColumnNameList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <WhereColumnList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsWhereColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsOffIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsVersionValidation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MappingTableList <OldMappingTableList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAs>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsEnableDiffLogEvent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DiffLogModel <diffModel>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Action <RemoveCacheFunc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <SetColumnsIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DbColumnInfo> <columns>k__BackingField;
    public SqlSugarProvider Context { get; internal set; }
    public EntityInfo EntityInfo { get; internal set; }
    public ISqlBuilder SqlBuilder { get; internal set; }
    public UpdateBuilder UpdateBuilder { get; public set; }
    public IAdo Ado { get; }
    public T[] UpdateObjs { get; public set; }
    public bool UpdateParameterIsNull { get; public set; }
    public bool IsMappingTable { get; }
    public bool IsMappingColumns { get; }
    public bool IsSingle { get; }
    public List`1<MappingColumn> MappingColumnList { get; public set; }
    private List`1<string> IgnoreColumnNameList { get; private set; }
    internal List`1<string> WhereColumnList { get; internal set; }
    private bool IsWhereColumns { get; private set; }
    private bool IsOffIdentity { get; private set; }
    private bool IsVersionValidation { get; private set; }
    public MappingTableList OldMappingTableList { get; public set; }
    public bool IsAs { get; public set; }
    public bool IsEnableDiffLogEvent { get; public set; }
    public DiffLogModel diffModel { get; public set; }
    internal Action RemoveCacheFunc { get; internal set; }
    private int SetColumnsIndex { get; private set; }
    private List`1<DbColumnInfo> columns { get; private set; }
    private bool IsUpdateNullByList();
    private int DatasTrackingExecommand();
    [AsyncStateMachineAttribute("SqlSugar.UpdateableProvider`1/<DatasTrackingExecommandAsync>d__2")]
[DebuggerStepThroughAttribute]
private Task`1<int> DatasTrackingExecommandAsync();
    private bool UpdateObjectNotWhere();
    private void AppendTracking(T item, IUpdateable`1<T> newUpdateable);
    private void AppendSets();
    private string _ExecuteCommand();
    private void CheckWhere();
    private void _WhereColumn(string columnName);
    private void AutoRemoveDataCache();
    internal void Init();
    private void Tracking(T item);
    private bool IsTrakingData();
    private bool IsTrakingDatas();
    private void DataAop(T item);
    private void DataChangesAop(T[] items);
    private void CheckTranscodeing(bool checkIsJson);
    private void SetUpdateItemByDic(int i, T item, List`1<DbColumnInfo> updateItem);
    private void SetUpdateItemByEntity(int i, T item, List`1<DbColumnInfo> updateItem);
    private static object GetValue(T item, EntityColumnInfo column);
    private string GetSetSql(string value, Expression`1<Func`2<T, T>> columns);
    private void PreToSql();
    private static void ArrayNull(DbColumnInfo item, SugarParameter parameter);
    private void OptRollBack(int updateRows, T updateData, object oldValue, string name);
    private string GetDbColumnName(string propertyName);
    protected List`1<string> GetPrimaryKeys();
    protected virtual List`1<string> GetIdentityKeys();
    private void RestoreMapping();
    private void ValidateVersion();
    private void After(string sql);
    private string _ExecuteCommandWithOptLock(T updateData, Object& oldVerValue);
    private void Before(string sql);
    private bool IsPrimaryKey(DbColumnInfo it);
    internal List`1<DiffLogTableInfo> GetTableDiff(DataTable dt);
    private List`1<DiffLogTableInfo> GetDiffTable(string sql, List`1<SugarParameter> parameters);
    private static bool IsExists(string sql);
    private void ThrowUpdateByExpression();
    private void ThrowUpdateByObject();
    private void ThrowUpdateByExpressionByMesage(string message);
    private void ThrowUpdateByObjectByMesage(string message);
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public EntityInfo get_EntityInfo();
    [CompilerGeneratedAttribute]
internal void set_EntityInfo(EntityInfo value);
    [CompilerGeneratedAttribute]
public ISqlBuilder get_SqlBuilder();
    [CompilerGeneratedAttribute]
internal void set_SqlBuilder(ISqlBuilder value);
    [CompilerGeneratedAttribute]
public sealed virtual UpdateBuilder get_UpdateBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UpdateBuilder(UpdateBuilder value);
    public IAdo get_Ado();
    [CompilerGeneratedAttribute]
public T[] get_UpdateObjs();
    [CompilerGeneratedAttribute]
public void set_UpdateObjs(T[] value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UpdateParameterIsNull();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UpdateParameterIsNull(bool value);
    public bool get_IsMappingTable();
    public bool get_IsMappingColumns();
    public bool get_IsSingle();
    [CompilerGeneratedAttribute]
public List`1<MappingColumn> get_MappingColumnList();
    [CompilerGeneratedAttribute]
public void set_MappingColumnList(List`1<MappingColumn> value);
    [CompilerGeneratedAttribute]
private List`1<string> get_IgnoreColumnNameList();
    [CompilerGeneratedAttribute]
private void set_IgnoreColumnNameList(List`1<string> value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_WhereColumnList();
    [CompilerGeneratedAttribute]
internal void set_WhereColumnList(List`1<string> value);
    [CompilerGeneratedAttribute]
private bool get_IsWhereColumns();
    [CompilerGeneratedAttribute]
private void set_IsWhereColumns(bool value);
    [CompilerGeneratedAttribute]
private bool get_IsOffIdentity();
    [CompilerGeneratedAttribute]
private void set_IsOffIdentity(bool value);
    [CompilerGeneratedAttribute]
private bool get_IsVersionValidation();
    [CompilerGeneratedAttribute]
private void set_IsVersionValidation(bool value);
    [CompilerGeneratedAttribute]
public MappingTableList get_OldMappingTableList();
    [CompilerGeneratedAttribute]
public void set_OldMappingTableList(MappingTableList value);
    [CompilerGeneratedAttribute]
public bool get_IsAs();
    [CompilerGeneratedAttribute]
public void set_IsAs(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEnableDiffLogEvent();
    [CompilerGeneratedAttribute]
public void set_IsEnableDiffLogEvent(bool value);
    [CompilerGeneratedAttribute]
public DiffLogModel get_diffModel();
    [CompilerGeneratedAttribute]
public void set_diffModel(DiffLogModel value);
    [CompilerGeneratedAttribute]
internal Action get_RemoveCacheFunc();
    [CompilerGeneratedAttribute]
internal void set_RemoveCacheFunc(Action value);
    [CompilerGeneratedAttribute]
private int get_SetColumnsIndex();
    [CompilerGeneratedAttribute]
private void set_SetColumnsIndex(int value);
    [CompilerGeneratedAttribute]
private List`1<DbColumnInfo> get_columns();
    [CompilerGeneratedAttribute]
private void set_columns(List`1<DbColumnInfo> value);
    public virtual string ToSqlString();
    public sealed virtual KeyValuePair`2<string, List`1<SugarParameter>> ToSql();
    public sealed virtual void AddQueue();
    public virtual int ExecuteCommandWithOptLockIF(Nullable`1<bool> IsVersionValidation, Nullable`1<bool> IsOptLock);
    public virtual int ExecuteCommandWithOptLock(bool IsVersionValidation);
    public virtual int ExecuteCommand();
    public sealed virtual bool ExecuteCommandHasChange();
    [AsyncStateMachineAttribute("SqlSugar.UpdateableProvider`1/<ExecuteCommandWithOptLockAsync>d__131")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> ExecuteCommandWithOptLockAsync(bool IsVersionValidation);
    public sealed virtual Task`1<int> ExecuteCommandAsync(CancellationToken token);
    [AsyncStateMachineAttribute("SqlSugar.UpdateableProvider`1/<ExecuteCommandAsync>d__133")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> ExecuteCommandAsync();
    public sealed virtual Task`1<bool> ExecuteCommandHasChangeAsync(CancellationToken token);
    [AsyncStateMachineAttribute("SqlSugar.UpdateableProvider`1/<ExecuteCommandHasChangeAsync>d__135")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<bool> ExecuteCommandHasChangeAsync();
    public sealed virtual UpdateablePage`1<T> PageSize(int pageSize);
    public sealed virtual IUpdateable`2<T, T2> InnerJoin(Expression`1<Func`3<T, T2, bool>> joinExpress);
    public sealed virtual IUpdateable`2<T, T2> InnerJoin(ISugarQueryable`1<T> queryable, Expression`1<Func`3<T, T2, bool>> joinExpress);
    public sealed virtual IUpdateable`2<T, T2> InnerJoin(Expression`1<Func`3<T, T2, bool>> joinExpress, string TableName);
    public sealed virtual IUpdateable`1<T> Clone();
    public sealed virtual IUpdateable`1<T> With(string lockString);
    public sealed virtual SplitTableUpdateProvider`1<T> SplitTable(Func`2<List`1<SplitTableInfo>, IEnumerable`1<SplitTableInfo>> getTableNamesFunc);
    public sealed virtual SplitTableUpdateByObjectProvider`1<T> SplitTable();
    public sealed virtual IUpdateable`1<T> RemoveDataCache();
    public sealed virtual IUpdateable`1<T> RemoveDataCache(string likeString);
    public sealed virtual IUpdateable`1<T> IsEnableUpdateVersionValidation();
    public sealed virtual IUpdateable`1<T> AsType(Type tableNameType);
    public sealed virtual IUpdateable`1<T> AS(string tableName);
    public sealed virtual IUpdateable`1<T> EnableDiffLogEventIF(bool isEnableDiffLog, object businessData);
    public sealed virtual IUpdateable`1<T> EnableDiffLogEvent(object businessData);
    public sealed virtual IUpdateable`1<T> IgnoreColumns(bool ignoreAllNullColumns, bool isOffIdentity, bool ignoreAllDefaultValue);
    public sealed virtual IUpdateable`1<T> IgnoreColumns(Expression`1<Func`2<T, object>> columns);
    public sealed virtual IUpdateable`1<T> IgnoreColumnsIF(bool IsIgnore, Expression`1<Func`2<T, object>> columns);
    public sealed virtual IUpdateable`1<T> IgnoreNullColumns(bool isIgnoreNull);
    public sealed virtual IUpdateable`1<T> IgnoreColumns(String[] columns);
    public sealed virtual IUpdateable`1<T> ReSetValue(Action`1<T> setValueExpression);
    public sealed virtual IUpdateable`1<T> PublicSetColumns(Expression`1<Func`2<T, object>> filedNameExpression, string computationalSymbol);
    public sealed virtual IUpdateable`1<T> PublicSetColumns(Expression`1<Func`2<T, object>> filedNameExpression, Expression`1<Func`2<T, object>> ValueExpExpression);
    public sealed virtual IUpdateable`1<T> CallEntityMethod(Expression`1<Action`1<T>> method);
    public sealed virtual IUpdateable`1<T> WhereColumns(Expression`1<Func`2<T, object>> columns);
    public sealed virtual IUpdateable`1<T> WhereColumns(string columnName);
    public sealed virtual IUpdateable`1<T> WhereColumns(String[] columnNames);
    public sealed virtual IUpdateable`1<T> UpdateColumns(Expression`1<Func`2<T, object>> columns, bool appendColumnsByDataFilter);
    public sealed virtual IUpdateable`1<T> UpdateColumns(Expression`1<Func`2<T, object>> columns);
    public sealed virtual IUpdateable`1<T> UpdateColumns(String[] columns, bool appendColumnsByDataFilter);
    public sealed virtual IUpdateable`1<T> UpdateColumns(String[] columns);
    public sealed virtual IUpdateable`1<T> UpdateColumnsIF(bool isUpdateColumns, Expression`1<Func`2<T, object>> columns);
    public sealed virtual IUpdateable`1<T> UpdateColumnsIF(bool isUpdateColumns, String[] columns);
    public sealed virtual IUpdateable`1<T> EnableQueryFilter();
    public sealed virtual IUpdateable`1<T> SetColumns(string fieldName, object fieldValue);
    public sealed virtual IUpdateable`1<T> SetColumnsIF(bool isUpdateColumns, Expression`1<Func`2<T, object>> filedNameExpression, object fieldValue);
    public sealed virtual IUpdateable`1<T> SetColumns(Expression`1<Func`2<T, object>> filedNameExpression, Expression`1<Func`2<T, object>> valueExpression);
    public sealed virtual IUpdateable`1<T> SetColumns(Expression`1<Func`2<T, object>> filedNameExpression, object fieldValue);
    public sealed virtual IUpdateable`1<T> SetColumns(Expression`1<Func`2<T, T>> columns);
    public sealed virtual IUpdateable`1<T> SetColumns(Expression`1<Func`2<T, T>> columns, bool appendColumnsByDataFilter);
    public sealed virtual IUpdateable`1<T> SetColumns(Expression`1<Func`2<T, bool>> columns);
    public sealed virtual IUpdateable`1<T> SetColumnsIF(bool isUpdateColumns, Expression`1<Func`2<T, bool>> columns);
    public sealed virtual IUpdateable`1<T> SetColumnsIF(bool isUpdateColumns, Expression`1<Func`2<T, T>> columns);
    public sealed virtual IUpdateable`1<T> In(Expression`1<Func`2<T, object>> inField, ISugarQueryable`1<PkType> childQueryExpression);
    public sealed virtual IUpdateable`1<T> WhereIF(bool isWhere, Expression`1<Func`2<T, bool>> expression);
    public sealed virtual IUpdateable`1<T> Where(Expression`1<Func`2<T, bool>> expression);
    public sealed virtual IUpdateable`1<T> Where(string whereSql, object parameters);
    public sealed virtual IUpdateable`1<T> Where(string fieldName, string conditionalType, object fieldValue);
    public sealed virtual IUpdateable`1<T> Where(List`1<IConditionalModel> conditionalModels);
    public sealed virtual ParameterUpdateable`1<T> UseParameter();
    public sealed virtual IUpdateable`1<T> In(Object[] ids);
    [CompilerGeneratedAttribute]
private string <AppendSets>b__5_0(KeyValuePair`2<string, string> it);
    [CompilerGeneratedAttribute]
private bool <AppendSets>b__5_1(string k);
    [CompilerGeneratedAttribute]
private bool <Init>b__10_4(MappingTable it);
    [CompilerGeneratedAttribute]
private void <RemoveDataCache>b__144_0();
    [CompilerGeneratedAttribute]
private string <WhereColumns>b__160_0(string it);
    [CompilerGeneratedAttribute]
private string <UpdateColumns>b__163_0(string it);
    [CompilerGeneratedAttribute]
private string <UpdateColumns>b__164_0(string it);
    [CompilerGeneratedAttribute]
private bool <SetColumns>b__172_0(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private bool <SetColumns>b__174_0(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private bool <SetColumns>b__175_0(DbColumnInfo it);
}
public class SqlSugar.UpdateableProvider`2 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IUpdateable`1<T> <updateableObj>k__BackingField;
    public IUpdateable`1<T> updateableObj { get; public set; }
    [CompilerGeneratedAttribute]
public IUpdateable`1<T> get_updateableObj();
    [CompilerGeneratedAttribute]
public void set_updateableObj(IUpdateable`1<T> value);
    public sealed virtual int ExecuteCommand();
    public sealed virtual Task`1<int> ExecuteCommandAsync();
    public sealed virtual IUpdateable`3<T, T2, T3> InnerJoin(Expression`1<Func`4<T, T2, T3, bool>> joinExpress);
    public sealed virtual IUpdateable`2<T, T2> SetColumns(Expression`1<Func`3<T, T2, T>> columns);
    public sealed virtual IUpdateable`2<T, T2> Where(Expression`1<Func`3<T, T2, bool>> whereExpression);
}
public class SqlSugar.UpdateableProvider`3 : object {
    internal IUpdateable`1<T> updateableObj;
    public sealed virtual int ExecuteCommand();
    public sealed virtual Task`1<int> ExecuteCommandAsync();
    public sealed virtual IUpdateable`4<T, T2, T3, T4> InnerJoin(Expression`1<Func`5<T, T2, T3, T4, bool>> joinExpress);
    public sealed virtual IUpdateable`3<T, T2, T3> SetColumns(Expression`1<Func`4<T, T2, T3, T>> columns);
    public sealed virtual IUpdateable`3<T, T2, T3> Where(Expression`1<Func`4<T, T2, T3, bool>> whereExpression);
}
public class SqlSugar.UpdateableProvider`4 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IUpdateable`1<T> <updateableObj>k__BackingField;
    public IUpdateable`1<T> updateableObj { get; public set; }
    [CompilerGeneratedAttribute]
public IUpdateable`1<T> get_updateableObj();
    [CompilerGeneratedAttribute]
public void set_updateableObj(IUpdateable`1<T> value);
    public sealed virtual int ExecuteCommand();
    public sealed virtual Task`1<int> ExecuteCommandAsync();
    public sealed virtual IUpdateable`4<T, T2, T3, T4> SetColumns(Expression`1<Func`5<T, T2, T3, T4, T>> columns);
    public sealed virtual IUpdateable`4<T, T2, T3, T4> Where(Expression`1<Func`5<T, T2, T3, T4, bool>> whereExpression);
}
public class SqlSugar.UpdateBuilder : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ILambdaExpressions <LambdaExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISqlBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private StringBuilder <sql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SugarParameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TableWithString>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DbColumnInfo> <DbColumnInfoList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <WhereValues>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AppendWhere>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<KeyValuePair`2<string, string>> <SetValues>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNoUpdateNull>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNoUpdateDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <PrimaryKeys>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <OldPrimaryKeys>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsOffIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsWhereColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <IsListUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <UpdateColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<string> <IgnoreColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<JoinQueryInfo> <JoinInfos>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, ReSetValueBySqlExpListModel> <ReSetValueBySqlExpList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ReSetValueBySqlExpListType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <EntityInfo>k__BackingField;
    private int GetDbColumnIndex;
    public SqlSugarProvider Context { get; public set; }
    public ILambdaExpressions LambdaExpressions { get; public set; }
    public ISqlBuilder Builder { get; public set; }
    public StringBuilder sql { get; public set; }
    public List`1<SugarParameter> Parameters { get; public set; }
    public string TableName { get; public set; }
    public string TableWithString { get; public set; }
    public List`1<DbColumnInfo> DbColumnInfoList { get; public set; }
    public List`1<string> WhereValues { get; public set; }
    public string AppendWhere { get; public set; }
    public List`1<KeyValuePair`2<string, string>> SetValues { get; public set; }
    public bool IsNoUpdateNull { get; public set; }
    public bool IsNoUpdateDefaultValue { get; public set; }
    public List`1<string> PrimaryKeys { get; public set; }
    public List`1<string> OldPrimaryKeys { get; public set; }
    public bool IsOffIdentity { get; public set; }
    public bool IsWhereColumns { get; public set; }
    public Nullable`1<bool> IsListUpdate { get; public set; }
    public List`1<string> UpdateColumns { get; public set; }
    public List`1<string> IgnoreColumns { get; public set; }
    public List`1<JoinQueryInfo> JoinInfos { get; public set; }
    public string ShortName { get; public set; }
    public Dictionary`2<string, ReSetValueBySqlExpListModel> ReSetValueBySqlExpList { get; public set; }
    public string ReSetValueBySqlExpListType { get; public set; }
    public EntityInfo EntityInfo { get; public set; }
    public string SqlTemplate { get; }
    public string SqlTemplateBatch { get; }
    public string SqlTemplateJoin { get; }
    public string SqlTemplateBatchSet { get; }
    public string SqlTemplateBatchSelect { get; }
    public string SqlTemplateBatchUnion { get; }
    public string GetTableNameString { get; }
    public string GetTableNameStringNoWith { get; }
    [CompilerGeneratedAttribute]
public sealed virtual SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public ILambdaExpressions get_LambdaExpressions();
    [CompilerGeneratedAttribute]
public void set_LambdaExpressions(ILambdaExpressions value);
    [CompilerGeneratedAttribute]
public ISqlBuilder get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(ISqlBuilder value);
    [CompilerGeneratedAttribute]
public sealed virtual StringBuilder get_sql();
    [CompilerGeneratedAttribute]
public sealed virtual void set_sql(StringBuilder value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<SugarParameter> get_Parameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parameters(List`1<SugarParameter> value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_TableWithString();
    [CompilerGeneratedAttribute]
public void set_TableWithString(string value);
    [CompilerGeneratedAttribute]
public List`1<DbColumnInfo> get_DbColumnInfoList();
    [CompilerGeneratedAttribute]
public void set_DbColumnInfoList(List`1<DbColumnInfo> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_WhereValues();
    [CompilerGeneratedAttribute]
public void set_WhereValues(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_AppendWhere();
    [CompilerGeneratedAttribute]
public void set_AppendWhere(string value);
    [CompilerGeneratedAttribute]
public List`1<KeyValuePair`2<string, string>> get_SetValues();
    [CompilerGeneratedAttribute]
public void set_SetValues(List`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public bool get_IsNoUpdateNull();
    [CompilerGeneratedAttribute]
public void set_IsNoUpdateNull(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNoUpdateDefaultValue();
    [CompilerGeneratedAttribute]
public void set_IsNoUpdateDefaultValue(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_PrimaryKeys();
    [CompilerGeneratedAttribute]
public void set_PrimaryKeys(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_OldPrimaryKeys();
    [CompilerGeneratedAttribute]
public void set_OldPrimaryKeys(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IsOffIdentity();
    [CompilerGeneratedAttribute]
public void set_IsOffIdentity(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsWhereColumns();
    [CompilerGeneratedAttribute]
public void set_IsWhereColumns(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsListUpdate();
    [CompilerGeneratedAttribute]
public void set_IsListUpdate(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_UpdateColumns();
    [CompilerGeneratedAttribute]
public void set_UpdateColumns(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_IgnoreColumns();
    [CompilerGeneratedAttribute]
public void set_IgnoreColumns(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<JoinQueryInfo> get_JoinInfos();
    [CompilerGeneratedAttribute]
public void set_JoinInfos(List`1<JoinQueryInfo> value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ReSetValueBySqlExpListModel> get_ReSetValueBySqlExpList();
    [CompilerGeneratedAttribute]
public void set_ReSetValueBySqlExpList(Dictionary`2<string, ReSetValueBySqlExpListModel> value);
    [CompilerGeneratedAttribute]
public virtual string get_ReSetValueBySqlExpListType();
    [CompilerGeneratedAttribute]
public virtual void set_ReSetValueBySqlExpListType(string value);
    [CompilerGeneratedAttribute]
public EntityInfo get_EntityInfo();
    [CompilerGeneratedAttribute]
public void set_EntityInfo(EntityInfo value);
    public virtual string get_SqlTemplate();
    public virtual string get_SqlTemplateBatch();
    public virtual string get_SqlTemplateJoin();
    public virtual string get_SqlTemplateBatchSet();
    public virtual string get_SqlTemplateBatchSelect();
    public virtual string get_SqlTemplateBatchUnion();
    public virtual void Clear();
    public virtual string get_GetTableNameString();
    public virtual string get_GetTableNameStringNoWith();
    public virtual ExpressionResult GetExpressionValue(Expression expression, ResolveExpressType resolveType, bool isMapping);
    public virtual string ToSqlString();
    protected virtual string TomultipleSqlString(List`1<IGrouping`2<int, DbColumnInfo>> groupList);
    protected virtual string ToSingleSqlString(List`1<IGrouping`2<int, DbColumnInfo>> groupList);
    private EntityColumnInfo GetColumnInfo(string item);
    private bool GetPkIsSugarDataConverter();
    protected virtual string GetJoinUpdate(string columnsString, String& whereString);
    public virtual void ActionMinDate();
    public virtual object FormatValue(object value);
    public virtual string FormatDateTimeOffset(object value);
    public virtual string GetDbColumn(DbColumnInfo columnInfo, object name);
    private bool IsSingleSetExp(DbColumnInfo columnInfo);
    private bool IsListSetExp(DbColumnInfo columnInfo);
    [CompilerGeneratedAttribute]
private bool <TomultipleSqlString>b__120_0(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <TomultipleSqlString>b__120_1(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <TomultipleSqlString>b__120_3(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private bool <ToSingleSqlString>b__121_0(DbColumnInfo it);
    [CompilerGeneratedAttribute]
private string <ToSingleSqlString>b__121_1(DbColumnInfo it);
}
public class SqlSugar.UpdateCommonMethodInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Context>k__BackingField;
    internal object Context { get; internal set; }
    [CompilerGeneratedAttribute]
internal object get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(object value);
    public int ExecuteCommand();
    public UpdateCommonMethodInfo WhereColumns(String[] columns);
    public UpdateCommonMethodInfo UpdateColumns(String[] columns);
    [AsyncStateMachineAttribute("SqlSugar.UpdateCommonMethodInfo/<ExecuteCommandAsync>d__7")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
    public UpdateCommonMethodInfo SplitTable();
}
public class SqlSugar.UpdateExpressionMethodInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <objectValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <Type>k__BackingField;
    internal SqlSugarProvider Context { get; internal set; }
    internal MethodInfo MethodInfo { get; internal set; }
    internal object objectValue { get; internal set; }
    internal Type Type { get; internal set; }
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
internal void set_MethodInfo(MethodInfo value);
    [CompilerGeneratedAttribute]
internal object get_objectValue();
    [CompilerGeneratedAttribute]
internal void set_objectValue(object value);
    [CompilerGeneratedAttribute]
internal Type get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(Type value);
    public int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.UpdateExpressionMethodInfo/<ExecuteCommandAsync>d__17")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
    public UpdateExpressionMethodInfo Where(string expShortName, FormattableString whereExpressionString);
    public UpdateExpressionMethodInfo SetColumns(string expShortName, FormattableString fieldExpressionString);
}
public class SqlSugar.UpdateMethodInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <objectValue>k__BackingField;
    internal SqlSugarProvider Context { get; internal set; }
    internal MethodInfo MethodInfo { get; internal set; }
    internal object objectValue { get; internal set; }
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
internal void set_MethodInfo(MethodInfo value);
    [CompilerGeneratedAttribute]
internal object get_objectValue();
    [CompilerGeneratedAttribute]
internal void set_objectValue(object value);
    public int ExecuteCommandWithOptLock(bool isThrowError);
    [AsyncStateMachineAttribute("SqlSugar.UpdateMethodInfo/<ExecuteCommandWithOptLockAsync>d__13")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandWithOptLockAsync(bool isThrowError);
    public int ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.UpdateMethodInfo/<ExecuteCommandAsync>d__15")]
[DebuggerStepThroughAttribute]
public Task`1<int> ExecuteCommandAsync();
    public UpdateCommonMethodInfo EnableDiffLogEvent(object businessData);
    public UpdateCommonMethodInfo IgnoreColumns(String[] ignoreColumns);
    public UpdateCommonMethodInfo IgnoreNullColumns();
    public UpdateCommonMethodInfo UpdateColumns(String[] updateColumns);
    public UpdateCommonMethodInfo WhereColumns(String[] whereColumns);
    public UpdateCommonMethodInfo AS(string tableName);
    public UpdateCommonMethodInfo SplitTable();
}
public class SqlSugar.UpdateNavMethodInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <MethodInfos>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    internal object MethodInfos { get; internal set; }
    internal SqlSugarProvider Context { get; internal set; }
    [CompilerGeneratedAttribute]
internal object get_MethodInfos();
    [CompilerGeneratedAttribute]
internal void set_MethodInfos(object value);
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    public UpdateNavMethodInfo IncludeByNameString(string navMemberName, UpdateNavOptions updateNavOptions);
    public UpdateNavMethodInfo ThenIncludeByNameString(string navMemberName, UpdateNavOptions updateNavOptions);
    [AsyncStateMachineAttribute("SqlSugar.UpdateNavMethodInfo/<ExecuteCommandAsync>d__10")]
[DebuggerStepThroughAttribute]
public Task`1<bool> ExecuteCommandAsync();
    public bool ExecuteCommand();
}
public class SqlSugar.UpdateNavOptions : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ManyToManyIsUpdateA>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ManyToManyIsUpdateB>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <ManyToManySaveMappingTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ManyToManyEnableLogicDelete>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <OneToManyDeleteAll>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <OneToManyEnableLogicDelete>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <OneToManyNoDeleteNull>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <OneToManyInsertOrUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <RootFunc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <CurrentFunc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <IgnoreColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IgnoreNullColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <OneToOneSaveByPrimaryKey>k__BackingField;
    public bool ManyToManyIsUpdateA { get; public set; }
    public bool ManyToManyIsUpdateB { get; public set; }
    public object ManyToManySaveMappingTemplate { get; public set; }
    public bool ManyToManyEnableLogicDelete { get; public set; }
    public bool OneToManyDeleteAll { get; public set; }
    public bool OneToManyEnableLogicDelete { get; public set; }
    public bool OneToManyNoDeleteNull { get; public set; }
    public bool OneToManyInsertOrUpdate { get; public set; }
    public Expression RootFunc { get; public set; }
    public Expression CurrentFunc { get; public set; }
    public String[] IgnoreColumns { get; public set; }
    public bool IgnoreNullColumns { get; public set; }
    public bool OneToOneSaveByPrimaryKey { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ManyToManyIsUpdateA();
    [CompilerGeneratedAttribute]
public void set_ManyToManyIsUpdateA(bool value);
    [CompilerGeneratedAttribute]
public bool get_ManyToManyIsUpdateB();
    [CompilerGeneratedAttribute]
public void set_ManyToManyIsUpdateB(bool value);
    [CompilerGeneratedAttribute]
public object get_ManyToManySaveMappingTemplate();
    [CompilerGeneratedAttribute]
public void set_ManyToManySaveMappingTemplate(object value);
    [CompilerGeneratedAttribute]
public bool get_ManyToManyEnableLogicDelete();
    [CompilerGeneratedAttribute]
public void set_ManyToManyEnableLogicDelete(bool value);
    [CompilerGeneratedAttribute]
public bool get_OneToManyDeleteAll();
    [CompilerGeneratedAttribute]
public void set_OneToManyDeleteAll(bool value);
    [CompilerGeneratedAttribute]
public bool get_OneToManyEnableLogicDelete();
    [CompilerGeneratedAttribute]
public void set_OneToManyEnableLogicDelete(bool value);
    [CompilerGeneratedAttribute]
public bool get_OneToManyNoDeleteNull();
    [CompilerGeneratedAttribute]
public void set_OneToManyNoDeleteNull(bool value);
    [CompilerGeneratedAttribute]
public bool get_OneToManyInsertOrUpdate();
    [CompilerGeneratedAttribute]
public void set_OneToManyInsertOrUpdate(bool value);
    [CompilerGeneratedAttribute]
public Expression get_RootFunc();
    [CompilerGeneratedAttribute]
public void set_RootFunc(Expression value);
    [CompilerGeneratedAttribute]
public Expression get_CurrentFunc();
    [CompilerGeneratedAttribute]
public void set_CurrentFunc(Expression value);
    [CompilerGeneratedAttribute]
public String[] get_IgnoreColumns();
    [CompilerGeneratedAttribute]
public void set_IgnoreColumns(String[] value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreNullColumns();
    [CompilerGeneratedAttribute]
public void set_IgnoreNullColumns(bool value);
    [CompilerGeneratedAttribute]
public bool get_OneToOneSaveByPrimaryKey();
    [CompilerGeneratedAttribute]
public void set_OneToOneSaveByPrimaryKey(bool value);
}
public class SqlSugar.UpdateNavProvider`2 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<NavigateType> <_NavigateType>k__BackingField;
    private int childIndex;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UpdateNavRootOptions <_RootOptions>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<Root> <_Roots>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<object> <_ParentList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<object> <_RootList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityInfo <_ParentEntity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EntityColumnInfo <_ParentPkColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <_Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UpdateNavOptions <_Options>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsFirst>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAsNav>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NavContext <NavContext>k__BackingField;
    public Nullable`1<NavigateType> _NavigateType { get; public set; }
    protected bool IsDeleted { get; protected set; }
    internal UpdateNavRootOptions _RootOptions { get; internal set; }
    public List`1<Root> _Roots { get; public set; }
    public List`1<object> _ParentList { get; public set; }
    public List`1<object> _RootList { get; public set; }
    public EntityInfo _ParentEntity { get; public set; }
    public EntityColumnInfo _ParentPkColumn { get; public set; }
    public SqlSugarProvider _Context { get; public set; }
    public UpdateNavOptions _Options { get; public set; }
    public bool IsFirst { get; public set; }
    public bool IsAsNav { get; public set; }
    internal NavContext NavContext { get; internal set; }
    private void UpdateManyToMany(string name, EntityColumnInfo nav);
    private bool HasMappingTemplate(EntityInfo mappingEntity);
    private void InertMappingWithTemplate(EntityInfo mappingEntity, EntityColumnInfo mappingA, EntityColumnInfo mappingB, List`1<Dictionary`2<string, object>> mappgingTables);
    private void SetMappingTableDefaultValue(EntityColumnInfo mappingPk, Dictionary`2<string, object> keyValuePairs);
    [CompilerGeneratedAttribute]
public Nullable`1<NavigateType> get__NavigateType();
    [CompilerGeneratedAttribute]
public void set__NavigateType(Nullable`1<NavigateType> value);
    private void UpdateOneToMany(string name, EntityColumnInfo nav);
    private void InsertOrUpdate(string name, EntityColumnInfo nav);
    private void DeleteInsert(string name, EntityColumnInfo nav);
    private static bool ParentIsPk(EntityColumnInfo parentNavigateProperty);
    private void DeleteMany(EntityInfo thisEntity, List`1<object> ids, string fkName);
    private void DeleteChild(Object[] fks, EntityInfo entity, string column);
    private void DeleteChildChild(List`1<object> ids, List`1<EntityColumnInfo> childs);
    private EntityColumnInfo GetParentPkColumn();
    private EntityColumnInfo GetParentPkNavColumn(EntityColumnInfo nav);
    private void SetNewParent(EntityInfo entityInfo, EntityColumnInfo entityColumnInfo);
    public List`1<TChild> GetNoExistsId(List`1<TChild> old, List`1<TChild> newList, string pkName);
    private string GetPropertyValueAsString(TChild item, string propertyName);
    [CompilerGeneratedAttribute]
protected bool get_IsDeleted();
    [CompilerGeneratedAttribute]
protected void set_IsDeleted(bool value);
    private void UpdateOneToOne(string name, EntityColumnInfo nav);
    [CompilerGeneratedAttribute]
internal UpdateNavRootOptions get__RootOptions();
    [CompilerGeneratedAttribute]
internal void set__RootOptions(UpdateNavRootOptions value);
    [CompilerGeneratedAttribute]
public List`1<Root> get__Roots();
    [CompilerGeneratedAttribute]
public void set__Roots(List`1<Root> value);
    [CompilerGeneratedAttribute]
public List`1<object> get__ParentList();
    [CompilerGeneratedAttribute]
public void set__ParentList(List`1<object> value);
    [CompilerGeneratedAttribute]
public List`1<object> get__RootList();
    [CompilerGeneratedAttribute]
public void set__RootList(List`1<object> value);
    [CompilerGeneratedAttribute]
public EntityInfo get__ParentEntity();
    [CompilerGeneratedAttribute]
public void set__ParentEntity(EntityInfo value);
    [CompilerGeneratedAttribute]
public EntityColumnInfo get__ParentPkColumn();
    [CompilerGeneratedAttribute]
public void set__ParentPkColumn(EntityColumnInfo value);
    [CompilerGeneratedAttribute]
public SqlSugarProvider get__Context();
    [CompilerGeneratedAttribute]
public void set__Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public UpdateNavOptions get__Options();
    [CompilerGeneratedAttribute]
public void set__Options(UpdateNavOptions value);
    [CompilerGeneratedAttribute]
public bool get_IsFirst();
    [CompilerGeneratedAttribute]
public void set_IsFirst(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAsNav();
    [CompilerGeneratedAttribute]
public void set_IsAsNav(bool value);
    [CompilerGeneratedAttribute]
internal NavContext get_NavContext();
    [CompilerGeneratedAttribute]
internal void set_NavContext(NavContext value);
    public UpdateNavProvider`2<Root, Root> AsNav();
    public UpdateNavProvider`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, TChild>> expression);
    public UpdateNavProvider`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, List`1<TChild>>> expression);
    public UpdateNavProvider`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, TChild>> expression, UpdateNavOptions options);
    public UpdateNavProvider`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, List`1<TChild>>> expression, UpdateNavOptions options);
    private UpdateNavProvider`2<Root, TChild> _ThenInclude(Expression`1<Func`2<T, TChild>> expression);
    private UpdateNavProvider`2<Root, TChild> _ThenInclude(Expression`1<Func`2<T, List`1<TChild>>> expression);
    private void UpdateRoot(bool isRoot, EntityColumnInfo nav);
    private void UpdateRoot();
    private void AddContextInfo(string name, bool isRoot);
    private bool NotAny(string name);
    private static bool IsDefaultValue(object pvValue);
    private void InitParentList();
    private UpdateNavProvider`2<Root, TChild> GetResult();
    private void InsertIdentity(List`1<Type> datas);
    private EntityColumnInfo GetPkColumnByNav(EntityInfo entity, EntityColumnInfo nav);
    private EntityColumnInfo GetPkColumnByNav2(EntityInfo entity, EntityColumnInfo nav);
    private EntityColumnInfo GetFKColumnByNav(EntityInfo entity, EntityColumnInfo nav);
    private void InsertDatas(List`1<TChild> children, EntityColumnInfo pkColumn, EntityColumnInfo NavColumn);
    private void InitData(EntityColumnInfo pkColumn, List`1<TChild> UpdateData);
    private void SetValue(EntityColumnInfo pkColumn, List`1<TChild> UpdateData, Func`1<object> value);
    private void SetError(EntityColumnInfo pkColumn, List`1<TChild> UpdateData);
}
public class SqlSugar.UpdateNavRootOptions : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <IgnoreColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <UpdateColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsIgnoreAllNullColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsInsertRoot>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDisableUpdateRoot>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDiffLogEvent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <DiffLogBizData>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <IgnoreInsertColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsOptLock>k__BackingField;
    public String[] IgnoreColumns { get; public set; }
    public String[] UpdateColumns { get; public set; }
    public bool IsIgnoreAllNullColumns { get; public set; }
    public bool IsInsertRoot { get; public set; }
    public bool IsDisableUpdateRoot { get; public set; }
    public bool IsDiffLogEvent { get; public set; }
    public object DiffLogBizData { get; public set; }
    public String[] IgnoreInsertColumns { get; public set; }
    public bool IsOptLock { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_IgnoreColumns();
    [CompilerGeneratedAttribute]
public void set_IgnoreColumns(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_UpdateColumns();
    [CompilerGeneratedAttribute]
public void set_UpdateColumns(String[] value);
    [CompilerGeneratedAttribute]
public bool get_IsIgnoreAllNullColumns();
    [CompilerGeneratedAttribute]
public void set_IsIgnoreAllNullColumns(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInsertRoot();
    [CompilerGeneratedAttribute]
public void set_IsInsertRoot(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDisableUpdateRoot();
    [CompilerGeneratedAttribute]
public void set_IsDisableUpdateRoot(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDiffLogEvent();
    [CompilerGeneratedAttribute]
public void set_IsDiffLogEvent(bool value);
    [CompilerGeneratedAttribute]
public object get_DiffLogBizData();
    [CompilerGeneratedAttribute]
public void set_DiffLogBizData(object value);
    [CompilerGeneratedAttribute]
public String[] get_IgnoreInsertColumns();
    [CompilerGeneratedAttribute]
public void set_IgnoreInsertColumns(String[] value);
    [CompilerGeneratedAttribute]
public bool get_IsOptLock();
    [CompilerGeneratedAttribute]
public void set_IsOptLock(bool value);
}
public class SqlSugar.UpdateNavTask`2 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`1<UpdateNavProvider`2<Root, T>> <PreFunc>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NavContext <NavContext>k__BackingField;
    public SqlSugarProvider Context { get; public set; }
    public Func`1<UpdateNavProvider`2<Root, T>> PreFunc { get; public set; }
    internal NavContext NavContext { get; internal set; }
    [CompilerGeneratedAttribute]
public SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
public Func`1<UpdateNavProvider`2<Root, T>> get_PreFunc();
    [CompilerGeneratedAttribute]
public void set_PreFunc(Func`1<UpdateNavProvider`2<Root, T>> value);
    [CompilerGeneratedAttribute]
internal NavContext get_NavContext();
    [CompilerGeneratedAttribute]
internal void set_NavContext(NavContext value);
    public UpdateNavTask`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, TChild>> expression);
    public UpdateNavTask`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, List`1<TChild>>> expression);
    public UpdateNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, TChild>> expression);
    public UpdateNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, List`1<TChild>>> expression);
    public UpdateNavTask`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, TChild>> expression, UpdateNavOptions options);
    public UpdateNavTask`2<Root, TChild> ThenInclude(Expression`1<Func`2<T, List`1<TChild>>> expression, UpdateNavOptions options);
    public UpdateNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, TChild>> expression, UpdateNavOptions options);
    public UpdateNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, List`1<TChild>>> expression, UpdateNavOptions options);
    public bool ExecuteCommand();
    [AsyncStateMachineAttribute("SqlSugar.UpdateNavTask`2/<ExecuteCommandAsync>d__21")]
[DebuggerStepThroughAttribute]
public Task`1<bool> ExecuteCommandAsync();
    private UpdateNavTask`2<Root, Root> AsNav();
    [CompilerGeneratedAttribute]
private void <ExecuteCommand>b__20_0();
    [AsyncStateMachineAttribute("SqlSugar.UpdateNavTask`2/<<ExecuteCommandAsync>b__21_0>d")]
[DebuggerStepThroughAttribute]
[CompilerGeneratedAttribute]
private Task <ExecuteCommandAsync>b__21_0();
    [CompilerGeneratedAttribute]
private UpdateNavProvider`2<Root, Root> <AsNav>b__22_0();
}
public class SqlSugar.UpdateNavTaskInit`2 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SqlSugarProvider <Context>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UpdateNavProvider`2<Root, Root> <UpdateNavProvider>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private NavContext <NavContext>k__BackingField;
    internal SqlSugarProvider Context { get; internal set; }
    internal UpdateNavProvider`2<Root, Root> UpdateNavProvider { get; internal set; }
    internal NavContext NavContext { get; internal set; }
    [CompilerGeneratedAttribute]
internal SqlSugarProvider get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(SqlSugarProvider value);
    [CompilerGeneratedAttribute]
internal UpdateNavProvider`2<Root, Root> get_UpdateNavProvider();
    [CompilerGeneratedAttribute]
internal void set_UpdateNavProvider(UpdateNavProvider`2<Root, Root> value);
    [CompilerGeneratedAttribute]
internal NavContext get_NavContext();
    [CompilerGeneratedAttribute]
internal void set_NavContext(NavContext value);
    public UpdateNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, TChild>> expression);
    public UpdateNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, List`1<TChild>>> expression);
    public UpdateNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, TChild>> expression, UpdateNavOptions options);
    public UpdateNavTask`2<Root, TChild> Include(Expression`1<Func`2<Root, List`1<TChild>>> expression, UpdateNavOptions options);
    public UpdateNavMethodInfo IncludesAllFirstLayer(String[] ignoreColumns);
    public UpdateNavMethodInfo IncludesAllFirstLayer(UpdateNavOptions updateNavOptions, String[] ignoreColumns);
    public UpdateNavMethodInfo IncludeByNameString(string navMemberName, UpdateNavOptions updateNavOptions);
}
internal static class SqlSugar.UtilConstants : object {
    public static string Dot;
    public static char DotChar;
    internal static string Space;
    internal static char SpaceChar;
    internal static string AssemblyName;
    internal static string ReplaceKey;
    internal static string ReplaceCommaKey;
    internal static Type UShortType;
    internal static Type ULongType;
    internal static Type UIntType;
    internal static Type IntType;
    internal static Type LongType;
    internal static Type GuidType;
    internal static Type BoolType;
    internal static Type BoolTypeNull;
    internal static Type ByteType;
    internal static Type SByteType;
    internal static Type ObjType;
    internal static Type DobType;
    internal static Type FloatType;
    internal static Type ShortType;
    internal static Type DecType;
    internal static Type StringType;
    internal static Type DateType;
    internal static Type DateTimeOffsetType;
    internal static Type TimeSpanType;
    internal static Type ByteArrayType;
    internal static Type ModelType;
    internal static Type DynamicType;
    internal static Type Dicii;
    internal static Type DicIS;
    internal static Type DicSi;
    internal static Type DicSS;
    internal static Type DicOO;
    internal static Type DicSo;
    internal static Type DicArraySS;
    internal static Type DicArraySO;
    public static Type SqlConvertType;
    public static Type SugarType;
    internal static Type[] NumericalTypes;
    internal static String[] DateTypeStringList;
    private static UtilConstants();
}
[ExtensionAttribute]
internal static class SqlSugar.UtilConvert : object {
    [ExtensionAttribute]
public static int ObjToInt(object thisValue);
    [ExtensionAttribute]
public static long ObjToLong(object thisValue);
    [ExtensionAttribute]
public static int ObjToInt(object thisValue, int errorValue);
    [ExtensionAttribute]
public static double ObjToMoney(object thisValue);
    [ExtensionAttribute]
public static double ObjToMoney(object thisValue, double errorValue);
    [ExtensionAttribute]
public static bool EqualCase(string thisValue, string equalValue);
    [ExtensionAttribute]
public static string ObjToString(object thisValue, Func`2<DateTime, string> formatTime);
    [ExtensionAttribute]
public static string ObjToString(object thisValue);
    [ExtensionAttribute]
public static string ObjToStringNoTrim(object thisValue);
    [ExtensionAttribute]
public static string ObjToStringNew(object thisValue);
    [ExtensionAttribute]
public static string ObjToString(object thisValue, string errorValue);
    [ExtensionAttribute]
public static decimal ObjToDecimal(object thisValue);
    [ExtensionAttribute]
public static decimal ObjToDecimal(object thisValue, decimal errorValue);
    [ExtensionAttribute]
public static DateTime ObjToDate(object thisValue);
    [ExtensionAttribute]
public static DateTime ObjToDate(object thisValue, DateTime errorValue);
    [ExtensionAttribute]
public static bool ObjToBool(object thisValue);
    internal static MemberExpression ToMemberExpression(Expression parentIdExpression);
}
public class SqlSugar.UtilMethods : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Nullable`1<bool> <_IsErrorDecimalString>k__BackingField;
    internal static Nullable`1<bool> _IsErrorDecimalString { get; internal set; }
    public static List`1<SugarParameter> CopySugarParameters(List`1<SugarParameter> pars);
    public static bool IsTuple(Type tType, List`1<PropertyInfo> classProperties);
    internal static string GetTableByDbLink(SqlSugarProvider context, string tableName, string oldTableName, TenantAttribute attr);
    public static List`1<Tuple`2<string, Type>> GetColumnInfo(IDataReader reader);
    public static object ConvertToObjectList(Type targetType, List`1<object> sourceList);
    public static Dictionary`2<string, object> DataRowToDictionary(DataRow row);
    public static IEnumerable`1<T> BuildTree(ISqlSugarClient db, IEnumerable`1<T> list, string idName, string pIdName, string childName, object rootValue);
    private static void BuildTreeGroup(IEnumerable`1<T> list, PropertyInfo mainIdProp, PropertyInfo pIdProp, Dictionary`2& kvList, IEnumerable`1& group);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get__IsErrorDecimalString();
    [CompilerGeneratedAttribute]
internal static void set__IsErrorDecimalString(Nullable`1<bool> value);
    internal static Nullable`1<bool> IsErrorDecimalString();
    internal static bool IsParameterConverter(EntityColumnInfo columnInfo);
    internal static SugarParameter GetParameterConverter(int index, ISqlSugarClient db, object value, Expression oppoSiteExpression, EntityColumnInfo columnInfo);
    internal static SugarParameter GetParameterConverter(int index, ISqlSugarClient db, object value, EntityInfo entity, EntityColumnInfo columnInfo);
    internal static bool IsErrorParameterName(ConnectionConfig connectionConfig, DbColumnInfo columnInfo);
    public static bool StringCheckFirstAndLast(string withString, string first, string last);
    public static bool HasInterface(Type targetType, Type interfaceType);
    public static void ClearPublicProperties(T obj, EntityInfo entity);
    internal static Expression GetIncludeExpression(string navMemberName, EntityInfo entityInfo, Type& properyItemType, Boolean& isList);
    public static string RemoveEqualOne(string value);
    internal static object GetFormatValue(object addValue, QueryableFormat valueFomatInfo);
    public static int CountSubstringOccurrences(string mainString, string searchString);
    public static string RemoveBeforeFirstWhere(string query);
    public static List`1<object> ConvertToListOfObjects(object inValues);
    public static bool IsValueTypeArray(object memberValue);
    internal static void EndCustomSplitTable(ISqlSugarClient context, Type entityType);
    internal static void StartCustomSplitTable(ISqlSugarClient context, Type entityType);
    public static void ConvertParameter(SugarParameter p, ISqlBuilder builder);
    public static object SetAnonymousObjectPropertyValue(object obj, string propertyName, object propertyValue);
    internal static bool IsNumberArray(Type type);
    public static string GetNativeSql(string sql, SugarParameter[] pars);
    public static string ToUnderLine(string str, bool isToUpper);
    internal static bool IsArrayMember(Expression expression, SqlSugarProvider context);
    internal static bool IsJsonMember(Expression expression, SqlSugarProvider context);
    public static string GetSeparatorChar();
    public static bool IsParentheses(object name);
    internal static bool IsDefaultValue(object value);
    internal static DateTime ConvertFromDateTimeOffset(DateTimeOffset dateTime);
    internal static object To(object value, Type destinationType);
    internal static object To(object value, Type destinationType, CultureInfo culture);
    public static bool IsAnyAsyncMethod(StackFrame[] methods);
    public static ConnectionConfig CopyConfig(ConnectionConfig it);
    internal static object GetRandomByType(Type underType);
    public static bool IsAsyncMethod(MethodBase method);
    public static StackTraceInfo GetStackTrace();
    internal static object GetConvertValue(object entityValue);
    internal static T To(object value);
    internal static DateTime GetMinDate(ConnectionConfig currentConnectionConfig);
    public static Type GetUnderType(Type oldType);
    public static object GetDefaultValue(Type type);
    public static string ReplaceFirstMatch(string input, string pattern, string replacement);
    public static string ReplaceSqlParameter(string itemSql, SugarParameter itemParameter, string newName);
    internal static Type GetRootBaseType(Type entityType);
    internal static Type GetUnderType(PropertyInfo propertyInfo, Boolean& isNullable);
    internal static Type GetUnderType(PropertyInfo propertyInfo);
    internal static bool IsNullable(PropertyInfo propertyInfo);
    internal static bool IsNullable(Type type);
    internal static T IsNullReturnNew(T returnObj);
    public static object ChangeType2(object value, Type type);
    internal static T ChangeType(T obj, Type type);
    internal static T ChangeType(T obj);
    internal static DateTimeOffset GetDateTimeOffsetByDateTime(DateTime date);
    internal static void RepairReplicationParameters(String& appendSql, SugarParameter[] parameters, int addIndex, string append);
    internal static void RepairReplicationParameters(ISqlSugarClient db, String& appendSql, SugarParameter[] parameters, int addIndex, string append);
    internal static string GetPackTable(string sql, string shortName);
    public static Func`2<string, object> GetTypeConvert(object value);
    internal static string GetTypeName(object value);
    internal static string GetParenthesesValue(string dbTypeName);
    internal static T GetOldValue(T value, Action action);
    internal static object DefaultForType(Type targetType);
    internal static long GetLong(Byte[] bytes);
    public static object GetPropertyValue(T t, string PropertyName);
    internal static string GetMD5(string myString);
    public static string EncodeBase64(string code);
    public static string ConvertNumbersToString(string value);
    public static string ConvertStringToNumbers(string value);
    public static string DecodeBase64(string code);
    public static string GetSqlValue(object value);
    public static void DataInoveByExpresson(Type[] datas, MethodCallExpression callExpresion);
    public static Dictionary`2<string, T> EnumToDictionary();
    public static Type GetTypeByTypeName(string ctypename);
    public static object ConvertDataByTypeName(string ctypename, string value);
    public static bool IsNumber(string ctypename);
    public static DateTime GetWeekLastDaySun(DateTime datetime);
    public static DateTime GetWeekFirstDayMon(DateTime datetime);
    public static string GetSqlString(DbType dbType, string sql, SugarParameter[] parametres, bool DisableNvarchar);
    public static string GetSqlString(ConnectionConfig connectionConfig, KeyValuePair`2<string, List`1<SugarParameter>> sqlObj);
    public static string ByteArrayToPostgreByteaLiteral(Byte[] data);
    public static void CheckArray(T[] insertObjs);
    [ObsoleteAttribute("请使用新名字：FieldNameSql")]
public static string FiledNameSql();
    public static string FieldNameSql();
    internal static object TimeOnlyToTimeSpan(object value);
    internal static object DateOnlyToDateTime(object value);
    internal static object DateTimeToDateOnly(object value);
    internal static void AddDiscrimator(Type type, ISugarQueryable`1<T> queryable, string shortName);
    internal static string GetDiscrimator(EntityInfo entityInfo, ISqlBuilder builer);
    internal static bool NoErrorParameter(string parameterName);
}
public class SqlSugar.UtilRandom : object {
    public static Random Random;
    private static UtilRandom();
    public static int GetRandomIndex(Dictionary`2<int, int> pars);
}
[ExtensionAttribute]
internal static class SqlSugar.ValidateExtensions : object {
    public static Type StringType;
    private static ValidateExtensions();
    [ExtensionAttribute]
public static bool IsInRange(int thisValue, int begin, int end);
    [ExtensionAttribute]
public static bool IsInRange(DateTime thisValue, DateTime begin, DateTime end);
    [ExtensionAttribute]
public static bool IsIn(T thisValue, T[] values);
    [ExtensionAttribute]
public static bool IsContainsIn(string thisValue, String[] inValues);
    [ExtensionAttribute]
public static bool IsContainsStartWithIn(string thisValue, String[] inValues);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(object thisValue);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(Nullable`1<Guid> thisValue);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(Guid thisValue);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(IEnumerable`1<object> thisValue);
    [ExtensionAttribute]
public static bool HasValue(object thisValue);
    [ExtensionAttribute]
public static bool HasValue(IEnumerable`1<object> thisValue);
    [ExtensionAttribute]
public static bool IsValuable(IEnumerable`1<KeyValuePair`2<string, string>> thisValue);
    [ExtensionAttribute]
public static bool IsZero(object thisValue);
    [ExtensionAttribute]
public static bool IsInt(object thisValue);
    [ExtensionAttribute]
public static bool IsNoInt(object thisValue);
    [ExtensionAttribute]
public static bool IsMoney(object thisValue);
    [ExtensionAttribute]
public static bool IsGuid(object thisValue);
    [ExtensionAttribute]
public static bool IsDate(object thisValue);
    [ExtensionAttribute]
public static bool IsEamil(object thisValue);
    [ExtensionAttribute]
public static bool IsMobile(object thisValue);
    [ExtensionAttribute]
public static bool IsTelephone(object thisValue);
    [ExtensionAttribute]
public static bool IsIDcard(object thisValue);
    [ExtensionAttribute]
public static bool IsFax(object thisValue);
    [ExtensionAttribute]
public static bool IsMatch(object thisValue, string pattern);
    [ExtensionAttribute]
public static bool IsAnonymousType(Type type);
    [ExtensionAttribute]
public static bool IsCollectionsList(string thisValue);
    [ExtensionAttribute]
public static bool IsIterator(Type type);
    [ExtensionAttribute]
public static bool IsStringArray(string thisValue);
    [ExtensionAttribute]
public static bool IsEnumerable(string thisValue);
    [ExtensionAttribute]
public static bool IsClass(Type thisValue);
}
public class SqlSugar.ValueToStringConverter : JsonConverter {
    public bool CanRead { get; }
    public virtual bool get_CanRead();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class SqlSugar.VersionExceptions : SqlSugarException {
    public VersionExceptions(string message);
}
public enum SqlSugar.WhereType : Enum {
    public int value__;
    public static WhereType And;
    public static WhereType Or;
    public static WhereType Null;
}
[ExtensionAttribute]
public static class System.Collections.Generic.EnumerableExtensions : object {
    [ExtensionAttribute]
public static bool Contains(IEnumerable`1<T> thisValue, T likeKey, bool isNvarchar);
}
