[AttributeUsageAttribute("7104")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; private set; }
    public bool ForceFullStates { get; private set; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
private void set_Contract(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
    [CompilerGeneratedAttribute]
private void set_ForceFullStates(bool value);
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.ItemCanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.ItemNotNullAttribute : Attribute {
}
[AttributeUsageAttribute("16388")]
internal class JetBrains.Annotations.MeansImplicitUseAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    [UsedImplicitlyAttribute]
public ImplicitUseKindFlags UseKindFlags { get; private set; }
    [UsedImplicitlyAttribute]
public ImplicitUseTargetFlags TargetFlags { get; private set; }
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags);
    public MeansImplicitUseAttribute(ImplicitUseTargetFlags targetFlags);
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("7104")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[MeansImplicitUseAttribute("3")]
internal class JetBrains.Annotations.PublicAPIAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public string Comment { get; private set; }
    public PublicAPIAttribute(string comment);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(string value);
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; private set; }
    public ImplicitUseTargetFlags TargetFlags { get; private set; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
internal class Kdbndp.AwaitableSocket : object {
    private static Action Sentinel;
    private SocketAsyncEventArgs _socketAsyncEventArgs;
    private Socket _socket;
    private Action _continuation;
    [CompilerGeneratedAttribute]
private bool <IsCompleted>k__BackingField;
    public bool IsConnected { get; }
    public int BytesTransferred { get; }
    public bool IsCompleted { get; private set; }
    public AwaitableSocket(SocketAsyncEventArgs socketAsyncEventArgs, Socket socket);
    private static AwaitableSocket();
    public bool get_IsConnected();
    public int get_BytesTransferred();
    public void SetBuffer(Byte[] buffer, int offset, int count);
    public AwaitableSocket ConnectAsync(CancellationToken cancellationToken);
    public AwaitableSocket ReceiveAsync();
    public AwaitableSocket SendAsync();
    private void Reset();
    public AwaitableSocket GetAwaiter();
    [CompilerGeneratedAttribute]
public bool get_IsCompleted();
    [CompilerGeneratedAttribute]
private void set_IsCompleted(bool value);
    public sealed virtual void OnCompleted(Action continuation);
    public void GetResult();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(object _, SocketAsyncEventArgs __);
    [CompilerGeneratedAttribute]
private void <ConnectAsync>g__Cancel|10_0();
}
internal enum Kdbndp.BackendMessageCode : Enum {
    public byte value__;
    public static BackendMessageCode AuthenticationRequest;
    public static BackendMessageCode BackendKeyData;
    public static BackendMessageCode BindComplete;
    public static BackendMessageCode CloseComplete;
    public static BackendMessageCode CompletedResponse;
    public static BackendMessageCode CopyData;
    public static BackendMessageCode CopyDone;
    public static BackendMessageCode CopyBothResponse;
    public static BackendMessageCode CopyInResponse;
    public static BackendMessageCode CopyOutResponse;
    public static BackendMessageCode DataRow;
    public static BackendMessageCode EmptyQueryResponse;
    public static BackendMessageCode ErrorResponse;
    public static BackendMessageCode FunctionCall;
    public static BackendMessageCode FunctionCallResponse;
    public static BackendMessageCode NoData;
    public static BackendMessageCode NoticeResponse;
    public static BackendMessageCode NotificationResponse;
    public static BackendMessageCode ParameterDescription;
    public static BackendMessageCode ParameterStatus;
    public static BackendMessageCode ParseComplete;
    public static BackendMessageCode PasswordPacket;
    public static BackendMessageCode PortalSuspended;
    public static BackendMessageCode ReadyForQuery;
    public static BackendMessageCode RowDescription;
}
internal class Kdbndp.BackendMessages.AuthenticationCleartextPasswordMessage : AuthenticationRequestMessage {
    internal static AuthenticationCleartextPasswordMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationCleartextPasswordMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal class Kdbndp.BackendMessages.AuthenticationGSSContinueMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <AuthenticationData>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal Byte[] AuthenticationData { get; private set; }
    private AuthenticationGSSContinueMessage(Byte[] authenticationData);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal Byte[] get_AuthenticationData();
    [CompilerGeneratedAttribute]
private void set_AuthenticationData(Byte[] value);
    internal static AuthenticationGSSContinueMessage Load(KdbndpReadBuffer buf, int len);
}
internal class Kdbndp.BackendMessages.AuthenticationGSSMessage : AuthenticationRequestMessage {
    internal static AuthenticationGSSMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationGSSMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal class Kdbndp.BackendMessages.AuthenticationKerberosV5Message : AuthenticationRequestMessage {
    internal static AuthenticationKerberosV5Message Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationKerberosV5Message();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal class Kdbndp.BackendMessages.AuthenticationMD5PasswordMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <Salt>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal Byte[] Salt { get; private set; }
    private AuthenticationMD5PasswordMessage(Byte[] salt);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal Byte[] get_Salt();
    [CompilerGeneratedAttribute]
private void set_Salt(Byte[] value);
    internal static AuthenticationMD5PasswordMessage Load(KdbndpReadBuffer buf);
}
internal class Kdbndp.BackendMessages.AuthenticationOkMessage : AuthenticationRequestMessage {
    internal static AuthenticationOkMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationOkMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal abstract class Kdbndp.BackendMessages.AuthenticationRequestMessage : object {
    public BackendMessageCode Code { get; }
    internal AuthenticationRequestType AuthRequestType { get; }
    public sealed virtual BackendMessageCode get_Code();
    internal abstract virtual AuthenticationRequestType get_AuthRequestType();
}
internal enum Kdbndp.BackendMessages.AuthenticationRequestType : Enum {
    public int value__;
    public static AuthenticationRequestType AuthenticationOk;
    public static AuthenticationRequestType AuthenticationKerberosV4;
    public static AuthenticationRequestType AuthenticationKerberosV5;
    public static AuthenticationRequestType AuthenticationCleartextPassword;
    public static AuthenticationRequestType AuthenticationCryptPassword;
    public static AuthenticationRequestType AuthenticationMD5Password;
    public static AuthenticationRequestType AuthenticationSCMCredential;
    public static AuthenticationRequestType AuthenticationGSS;
    public static AuthenticationRequestType AuthenticationGSSContinue;
    public static AuthenticationRequestType AuthenticationSSPI;
    public static AuthenticationRequestType AuthenticationSASL;
    public static AuthenticationRequestType AuthenticationSASLContinue;
    public static AuthenticationRequestType AuthenticationSASLFinal;
    public static AuthenticationRequestType AuthenticationSM3Password;
}
internal class Kdbndp.BackendMessages.AuthenticationSASLContinueMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <Payload>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal Byte[] Payload { get; }
    internal AuthenticationSASLContinueMessage(KdbndpReadBuffer buf, int len);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal Byte[] get_Payload();
}
internal class Kdbndp.BackendMessages.AuthenticationSASLFinalMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <Payload>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal Byte[] Payload { get; }
    internal AuthenticationSASLFinalMessage(KdbndpReadBuffer buf, int len);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal Byte[] get_Payload();
}
internal class Kdbndp.BackendMessages.AuthenticationSASLMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private List`1<string> <Mechanisms>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal List`1<string> Mechanisms { get; }
    internal AuthenticationSASLMessage(KdbndpReadBuffer buf);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal List`1<string> get_Mechanisms();
}
internal class Kdbndp.BackendMessages.AuthenticationSCMCredentialMessage : AuthenticationRequestMessage {
    internal static AuthenticationSCMCredentialMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationSCMCredentialMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal class Kdbndp.BackendMessages.AuthenticationSCRAMServerFinalMessage : object {
    private static KdbndpLogger Log;
    [CompilerGeneratedAttribute]
private string <ServerSignature>k__BackingField;
    internal string ServerSignature { get; }
    internal AuthenticationSCRAMServerFinalMessage(Byte[] bytes);
    private static AuthenticationSCRAMServerFinalMessage();
    [CompilerGeneratedAttribute]
internal string get_ServerSignature();
}
internal class Kdbndp.BackendMessages.AuthenticationSCRAMServerFirstMessage : object {
    private static KdbndpLogger Log;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Salt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Iteration>k__BackingField;
    internal string Nonce { get; }
    internal string Salt { get; }
    internal int Iteration { get; }
    internal AuthenticationSCRAMServerFirstMessage(Byte[] bytes);
    private static AuthenticationSCRAMServerFirstMessage();
    [CompilerGeneratedAttribute]
internal string get_Nonce();
    [CompilerGeneratedAttribute]
internal string get_Salt();
    [CompilerGeneratedAttribute]
internal int get_Iteration();
}
internal class Kdbndp.BackendMessages.AuthenticationSM3PasswordMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <Salt>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal Byte[] Salt { get; private set; }
    private AuthenticationSM3PasswordMessage(Byte[] salt);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal Byte[] get_Salt();
    [CompilerGeneratedAttribute]
private void set_Salt(Byte[] value);
    internal static AuthenticationSM3PasswordMessage Load(KdbndpReadBuffer buf);
}
internal class Kdbndp.BackendMessages.AuthenticationSSPIMessage : AuthenticationRequestMessage {
    internal static AuthenticationSSPIMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationSSPIMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal class Kdbndp.BackendMessages.BackendKeyDataMessage : object {
    [CompilerGeneratedAttribute]
private int <BackendProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BackendSecretKey>k__BackingField;
    public BackendMessageCode Code { get; }
    internal int BackendProcessId { get; private set; }
    internal int BackendSecretKey { get; private set; }
    internal BackendKeyDataMessage(KdbndpReadBuffer buf);
    public sealed virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
internal int get_BackendProcessId();
    [CompilerGeneratedAttribute]
private void set_BackendProcessId(int value);
    [CompilerGeneratedAttribute]
internal int get_BackendSecretKey();
    [CompilerGeneratedAttribute]
private void set_BackendSecretKey(int value);
}
internal class Kdbndp.BackendMessages.BindCompleteMessage : object {
    internal static BindCompleteMessage Instance;
    public BackendMessageCode Code { get; }
    private static BindCompleteMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Kdbndp.BackendMessages.CloseCompletedMessage : object {
    internal static CloseCompletedMessage Instance;
    public BackendMessageCode Code { get; }
    private static CloseCompletedMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Kdbndp.BackendMessages.CommandCompleteMessage : object {
    [CompilerGeneratedAttribute]
private StatementType <StatementType>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OID>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Rows>k__BackingField;
    internal StatementType StatementType { get; private set; }
    internal UInt32 OID { get; private set; }
    internal UInt32 Rows { get; private set; }
    public BackendMessageCode Code { get; }
    [CompilerGeneratedAttribute]
internal StatementType get_StatementType();
    [CompilerGeneratedAttribute]
private void set_StatementType(StatementType value);
    [CompilerGeneratedAttribute]
internal UInt32 get_OID();
    [CompilerGeneratedAttribute]
private void set_OID(UInt32 value);
    [CompilerGeneratedAttribute]
internal UInt32 get_Rows();
    [CompilerGeneratedAttribute]
private void set_Rows(UInt32 value);
    internal CommandCompleteMessage Load(KdbndpReadBuffer buf, int len);
    private static bool AreEqual(Byte[] bytes, int pos, string s);
    private static UInt32 ParseNumber(Byte[] bytes, Int32& pos);
    public sealed virtual BackendMessageCode get_Code();
}
internal class Kdbndp.BackendMessages.CopyBothResponseMessage : CopyResponseMessageBase {
    public BackendMessageCode Code { get; }
    public virtual BackendMessageCode get_Code();
    internal CopyBothResponseMessage Load(KdbndpReadBuffer buf);
}
internal class Kdbndp.BackendMessages.CopyDataMessage : object {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public BackendMessageCode Code { get; }
    public int Length { get; private set; }
    public sealed virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    internal CopyDataMessage Load(int len);
}
internal class Kdbndp.BackendMessages.CopyDoneMessage : SimpleFrontendMessage {
    internal static CopyDoneMessage Instance;
    public BackendMessageCode Code { get; }
    internal int Length { get; }
    private static CopyDoneMessage();
    public sealed virtual BackendMessageCode get_Code();
    internal virtual int get_Length();
    internal virtual void WriteFully(KdbndpWriteBuffer buf);
}
internal class Kdbndp.BackendMessages.CopyInResponseMessage : CopyResponseMessageBase {
    public BackendMessageCode Code { get; }
    public virtual BackendMessageCode get_Code();
    internal CopyInResponseMessage Load(KdbndpReadBuffer buf);
}
internal class Kdbndp.BackendMessages.CopyOutResponseMessage : CopyResponseMessageBase {
    public BackendMessageCode Code { get; }
    public virtual BackendMessageCode get_Code();
    internal CopyOutResponseMessage Load(KdbndpReadBuffer buf);
}
internal abstract class Kdbndp.BackendMessages.CopyResponseMessageBase : object {
    [CompilerGeneratedAttribute]
private bool <IsBinary>k__BackingField;
    [CompilerGeneratedAttribute]
private short <NumColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FormatCode> <ColumnFormatCodes>k__BackingField;
    public BackendMessageCode Code { get; }
    internal bool IsBinary { get; private set; }
    internal short NumColumns { get; private set; }
    internal List`1<FormatCode> ColumnFormatCodes { get; }
    public abstract virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
internal bool get_IsBinary();
    [CompilerGeneratedAttribute]
private void set_IsBinary(bool value);
    [CompilerGeneratedAttribute]
internal short get_NumColumns();
    [CompilerGeneratedAttribute]
private void set_NumColumns(short value);
    [CompilerGeneratedAttribute]
internal List`1<FormatCode> get_ColumnFormatCodes();
    internal void Load(KdbndpReadBuffer buf);
}
internal class Kdbndp.BackendMessages.DataRowMessage : object {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public BackendMessageCode Code { get; }
    internal int Length { get; private set; }
    public sealed virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
internal int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    internal DataRowMessage Load(int len);
}
internal class Kdbndp.BackendMessages.EmptyQueryMessage : object {
    internal static EmptyQueryMessage Instance;
    public BackendMessageCode Code { get; }
    private static EmptyQueryMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Kdbndp.BackendMessages.ErrorOrNoticeMessage : object {
    [CompilerGeneratedAttribute]
private string <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InternalPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Routine>k__BackingField;
    private static KdbndpLogger Log;
    internal string Severity { get; private set; }
    internal string Code { get; private set; }
    internal string Message { get; private set; }
    internal string Detail { get; private set; }
    internal string Hint { get; private set; }
    internal int Position { get; private set; }
    internal int InternalPosition { get; private set; }
    internal string InternalQuery { get; private set; }
    internal string Where { get; private set; }
    internal string SchemaName { get; private set; }
    internal string TableName { get; private set; }
    internal string ColumnName { get; private set; }
    internal string DataTypeName { get; private set; }
    internal string ConstraintName { get; private set; }
    internal string File { get; private set; }
    internal string Line { get; private set; }
    internal string Routine { get; private set; }
    internal ErrorOrNoticeMessage(KdbndpReadBuffer buf);
    private static ErrorOrNoticeMessage();
    [CompilerGeneratedAttribute]
internal string get_Severity();
    [CompilerGeneratedAttribute]
private void set_Severity(string value);
    [CompilerGeneratedAttribute]
internal string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
    [CompilerGeneratedAttribute]
internal string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
internal string get_Detail();
    [CompilerGeneratedAttribute]
private void set_Detail(string value);
    [CompilerGeneratedAttribute]
internal string get_Hint();
    [CompilerGeneratedAttribute]
private void set_Hint(string value);
    [CompilerGeneratedAttribute]
internal int get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(int value);
    [CompilerGeneratedAttribute]
internal int get_InternalPosition();
    [CompilerGeneratedAttribute]
private void set_InternalPosition(int value);
    [CompilerGeneratedAttribute]
internal string get_InternalQuery();
    [CompilerGeneratedAttribute]
private void set_InternalQuery(string value);
    [CompilerGeneratedAttribute]
internal string get_Where();
    [CompilerGeneratedAttribute]
private void set_Where(string value);
    [CompilerGeneratedAttribute]
internal string get_SchemaName();
    [CompilerGeneratedAttribute]
private void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
internal string get_TableName();
    [CompilerGeneratedAttribute]
private void set_TableName(string value);
    [CompilerGeneratedAttribute]
internal string get_ColumnName();
    [CompilerGeneratedAttribute]
private void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
internal string get_DataTypeName();
    [CompilerGeneratedAttribute]
private void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
internal string get_ConstraintName();
    [CompilerGeneratedAttribute]
private void set_ConstraintName(string value);
    [CompilerGeneratedAttribute]
internal string get_File();
    [CompilerGeneratedAttribute]
private void set_File(string value);
    [CompilerGeneratedAttribute]
internal string get_Line();
    [CompilerGeneratedAttribute]
private void set_Line(string value);
    [CompilerGeneratedAttribute]
internal string get_Routine();
    [CompilerGeneratedAttribute]
private void set_Routine(string value);
}
public class Kdbndp.BackendMessages.FieldDescription : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TypeOID>k__BackingField;
    [CompilerGeneratedAttribute]
private short <TypeSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TypeModifier>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TableOID>k__BackingField;
    [CompilerGeneratedAttribute]
private short <ColumnAttributeNumber>k__BackingField;
    private FormatCode _formatCode;
    [CompilerGeneratedAttribute]
private KdbndpTypeHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private KdbndpTypeHandler <RealHandler>k__BackingField;
    private ConnectorTypeMapper _typeMapper;
    internal string Name { get; internal set; }
    internal UInt32 TypeOID { get; private set; }
    public short TypeSize { get; public set; }
    public int TypeModifier { get; public set; }
    internal UInt32 TableOID { get; internal set; }
    internal short ColumnAttributeNumber { get; internal set; }
    internal FormatCode FormatCode { get; internal set; }
    internal string TypeDisplayName { get; }
    internal KdbndpTypeHandler Handler { get; private set; }
    internal KdbndpTypeHandler RealHandler { get; private set; }
    internal KingbaseType KingbaseType { get; }
    internal Type FieldType { get; }
    internal bool IsBinaryFormat { get; }
    internal bool IsTextFormat { get; }
    internal void Populate(ConnectorTypeMapper typeMapper, string name, UInt32 tableOID, short columnAttributeNumber, UInt32 oid, short typeSize, int typeModifier, FormatCode formatCode);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
internal UInt32 get_TypeOID();
    [CompilerGeneratedAttribute]
private void set_TypeOID(UInt32 value);
    [CompilerGeneratedAttribute]
public short get_TypeSize();
    [CompilerGeneratedAttribute]
public void set_TypeSize(short value);
    [CompilerGeneratedAttribute]
public int get_TypeModifier();
    [CompilerGeneratedAttribute]
public void set_TypeModifier(int value);
    [CompilerGeneratedAttribute]
internal UInt32 get_TableOID();
    [CompilerGeneratedAttribute]
internal void set_TableOID(UInt32 value);
    [CompilerGeneratedAttribute]
internal short get_ColumnAttributeNumber();
    [CompilerGeneratedAttribute]
internal void set_ColumnAttributeNumber(short value);
    internal FormatCode get_FormatCode();
    internal void set_FormatCode(FormatCode value);
    internal string get_TypeDisplayName();
    [CompilerGeneratedAttribute]
internal KdbndpTypeHandler get_Handler();
    [CompilerGeneratedAttribute]
private void set_Handler(KdbndpTypeHandler value);
    [CompilerGeneratedAttribute]
internal KdbndpTypeHandler get_RealHandler();
    [CompilerGeneratedAttribute]
private void set_RealHandler(KdbndpTypeHandler value);
    internal KingbaseType get_KingbaseType();
    internal Type get_FieldType();
    private void ResolveHandler();
    internal bool get_IsBinaryFormat();
    internal bool get_IsTextFormat();
    public virtual string ToString();
}
internal class Kdbndp.BackendMessages.NoDataMessage : object {
    internal static NoDataMessage Instance;
    public BackendMessageCode Code { get; }
    private static NoDataMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Kdbndp.BackendMessages.ParameterDescriptionMessage : object {
    [CompilerGeneratedAttribute]
private List`1<UInt32> <TypeOIDs>k__BackingField;
    internal List`1<UInt32> TypeOIDs { get; }
    public BackendMessageCode Code { get; }
    [CompilerGeneratedAttribute]
internal List`1<UInt32> get_TypeOIDs();
    internal ParameterDescriptionMessage Load(KdbndpReadBuffer buf);
    public sealed virtual BackendMessageCode get_Code();
}
internal class Kdbndp.BackendMessages.ParseCompleteMessage : object {
    internal static ParseCompleteMessage Instance;
    public BackendMessageCode Code { get; }
    private static ParseCompleteMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Kdbndp.BackendMessages.PortalSuspendedMessage : object {
    internal static PortalSuspendedMessage Instance;
    public BackendMessageCode Code { get; }
    private static PortalSuspendedMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Kdbndp.BackendMessages.ReadyForQueryMessage : object {
    [CompilerGeneratedAttribute]
private TransactionStatus <TransactionStatusIndicator>k__BackingField;
    public BackendMessageCode Code { get; }
    internal TransactionStatus TransactionStatusIndicator { get; private set; }
    public sealed virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
internal TransactionStatus get_TransactionStatusIndicator();
    [CompilerGeneratedAttribute]
private void set_TransactionStatusIndicator(TransactionStatus value);
    internal ReadyForQueryMessage Load(KdbndpReadBuffer buf);
}
[DefaultMemberAttribute("Item")]
internal class Kdbndp.BackendMessages.RowDescriptionMessage : object {
    [CompilerGeneratedAttribute]
private List`1<FieldDescription> <Fields>k__BackingField;
    private Dictionary`2<string, int> _nameIndex;
    [CanBeNullAttribute]
private Dictionary`2<string, int> _insensitiveIndex;
    private bool _isInsensitiveIndexInitialized;
    public List`1<FieldDescription> Fields { get; }
    internal FieldDescription Item { get; }
    internal int NumFields { get; }
    public BackendMessageCode Code { get; }
    [CompilerGeneratedAttribute]
public List`1<FieldDescription> get_Fields();
    internal RowDescriptionMessage Load(KdbndpReadBuffer buf, ConnectorTypeMapper typeMapper);
    internal FieldDescription get_Item(int index);
    internal int get_NumFields();
    internal int GetFieldIndex(string name);
    internal bool TryGetFieldIndex(string name, Int32& fieldIndex);
    public sealed virtual BackendMessageCode get_Code();
}
public static class Kdbndp.BouncyCastle.KdbndpArrays : object {
    public static Byte[] EmptyBytes;
    public static Int32[] EmptyInts;
    private static KdbndpArrays();
    public static bool AreAllZeroes(Byte[] buf, int off, int len);
    public static bool AreEqual(Boolean[] a, Boolean[] b);
    public static bool AreEqual(Char[] a, Char[] b);
    public static bool AreEqual(Byte[] a, Byte[] b);
    public static bool AreEqual(Byte[] a, int aFromIndex, int aToIndex, Byte[] b, int bFromIndex, int bToIndex);
    [CLSCompliantAttribute("False")]
public static bool AreEqual(UInt64[] a, int aFromIndex, int aToIndex, UInt64[] b, int bFromIndex, int bToIndex);
    public static bool AreEqual(Object[] a, Object[] b);
    public static bool AreEqual(Object[] a, int aFromIndex, int aToIndex, Object[] b, int bFromIndex, int bToIndex);
    [ObsoleteAttribute("Use 'FixedTimeEquals' instead")]
public static bool ConstantTimeAreEqual(Byte[] a, Byte[] b);
    [ObsoleteAttribute("Use 'FixedTimeEquals' instead")]
public static bool ConstantTimeAreEqual(int len, Byte[] a, int aOff, Byte[] b, int bOff);
    public static bool FixedTimeEquals(Byte[] a, Byte[] b);
    public static bool FixedTimeEquals(int len, Byte[] a, int aOff, Byte[] b, int bOff);
    public static bool AreEqual(Int32[] a, Int32[] b);
    [CLSCompliantAttribute("False")]
public static bool AreEqual(UInt32[] a, UInt32[] b);
    public static bool AreEqual(Int64[] a, Int64[] b);
    [CLSCompliantAttribute("False")]
public static bool AreEqual(UInt64[] a, UInt64[] b);
    private static bool HaveSameContents(Boolean[] a, Boolean[] b);
    private static bool HaveSameContents(Char[] a, Char[] b);
    private static bool HaveSameContents(Byte[] a, Byte[] b);
    private static bool HaveSameContents(Int32[] a, Int32[] b);
    private static bool HaveSameContents(UInt32[] a, UInt32[] b);
    private static bool HaveSameContents(Int64[] a, Int64[] b);
    private static bool HaveSameContents(UInt64[] a, UInt64[] b);
    public static string ToString(Object[] a);
    public static int GetHashCode(Byte[] data);
    public static int GetHashCode(Byte[] data, int off, int len);
    public static int GetHashCode(Int32[] data);
    [CLSCompliantAttribute("False")]
public static int GetHashCode(UInt16[] data);
    public static int GetHashCode(Int32[] data, int off, int len);
    [CLSCompliantAttribute("False")]
public static int GetHashCode(UInt32[] data);
    [CLSCompliantAttribute("False")]
public static int GetHashCode(UInt32[] data, int off, int len);
    [CLSCompliantAttribute("False")]
public static int GetHashCode(UInt64[] data);
    [CLSCompliantAttribute("False")]
public static int GetHashCode(UInt64[] data, int off, int len);
    public static int GetHashCode(Object[] data);
    public static int GetHashCode(Object[] data, int off, int len);
    public static Boolean[] Clone(Boolean[] data);
    public static Byte[] Clone(Byte[] data);
    public static Int16[] Clone(Int16[] data);
    [CLSCompliantAttribute("False")]
public static UInt16[] Clone(UInt16[] data);
    public static Int32[] Clone(Int32[] data);
    [CLSCompliantAttribute("False")]
public static UInt32[] Clone(UInt32[] data);
    public static Int64[] Clone(Int64[] data);
    [CLSCompliantAttribute("False")]
public static UInt64[] Clone(UInt64[] data);
    public static Byte[] Clone(Byte[] data, Byte[] existing);
    [CLSCompliantAttribute("False")]
public static UInt64[] Clone(UInt64[] data, UInt64[] existing);
    public static bool Contains(Byte[] a, byte n);
    public static bool Contains(Int16[] a, short n);
    public static bool Contains(Int32[] a, int n);
    public static void Fill(Byte[] buf, byte b);
    [CLSCompliantAttribute("False")]
public static void Fill(UInt64[] buf, ulong b);
    public static void Fill(Byte[] buf, int from, int to, byte b);
    public static void Fill(T[] ts, T t);
    public static Byte[] CopyOf(Byte[] data, int newLength);
    public static Char[] CopyOf(Char[] data, int newLength);
    public static Int32[] CopyOf(Int32[] data, int newLength);
    [CLSCompliantAttribute("False")]
public static UInt32[] CopyOf(UInt32[] data, int newLength);
    public static Int64[] CopyOf(Int64[] data, int newLength);
    public static Byte[] CopyOfRange(Byte[] data, int from, int to);
    public static Int32[] CopyOfRange(Int32[] data, int from, int to);
    public static Int64[] CopyOfRange(Int64[] data, int from, int to);
    private static int GetLength(int from, int to);
    public static Byte[] Append(Byte[] a, byte b);
    public static Int16[] Append(Int16[] a, short b);
    public static Int32[] Append(Int32[] a, int b);
    public static Byte[] Concatenate(Byte[] a, Byte[] b);
    [CLSCompliantAttribute("False")]
public static UInt16[] Concatenate(UInt16[] a, UInt16[] b);
    public static Byte[] ConcatenateAll(Byte[][] vs);
    public static Int32[] Concatenate(Int32[] a, Int32[] b);
    [CLSCompliantAttribute("False")]
public static UInt32[] Concatenate(UInt32[] a, UInt32[] b);
    public static Byte[] Prepend(Byte[] a, byte b);
    public static Int16[] Prepend(Int16[] a, short b);
    public static Int32[] Prepend(Int32[] a, int b);
    public static T[] Prepend(T[] a, T b);
    public static Byte[] Reverse(Byte[] a);
    public static Int32[] Reverse(Int32[] a);
    internal static void Reverse(T[] input, T[] output);
    public static T[] ReverseInPlace(T[] array);
    public static void Clear(Byte[] data);
    public static void Clear(Int32[] data);
    public static bool IsNullOrContainsNull(Object[] array);
    public static bool IsNullOrEmpty(Byte[] array);
    public static bool IsNullOrEmpty(Object[] array);
}
internal static class Kdbndp.BouncyCastle.KdbndpBits : object {
    internal static UInt32 BitPermuteStep(UInt32 x, UInt32 m, int s);
    internal static ulong BitPermuteStep(ulong x, ulong m, int s);
    internal static void BitPermuteStep2(UInt32& hi, UInt32& lo, UInt32 m, int s);
    internal static void BitPermuteStep2(UInt64& hi, UInt64& lo, ulong m, int s);
    internal static UInt32 BitPermuteStepSimple(UInt32 x, UInt32 m, int s);
    internal static ulong BitPermuteStepSimple(ulong x, ulong m, int s);
}
public interface Kdbndp.BouncyCastle.KdbndpBlockCipher {
    public string AlgorithmName { get; }
    public abstract virtual string get_AlgorithmName();
    public abstract virtual void Init(bool forEncryption, KdbndpICipherParameters parameters);
    public abstract virtual int GetBlockSize();
    public abstract virtual int ProcessBlock(Byte[] inBuf, int inOff, Byte[] outBuf, int outOff);
}
internal static class Kdbndp.BouncyCastle.KdbndpCheck : object {
    internal static void DataLength(bool condition, string message);
    internal static void DataLength(Byte[] buf, int off, int len, string message);
    internal static void OutputLength(bool condition, string message);
    internal static void OutputLength(Byte[] buf, int off, int len, string message);
    internal static void ThrowDataLengthException(string message);
    internal static void ThrowOutputLengthException(string message);
}
public class Kdbndp.BouncyCastle.KdbndpCryptoException : Exception {
    public KdbndpCryptoException(string message);
    public KdbndpCryptoException(string message, Exception innerException);
    protected KdbndpCryptoException(SerializationInfo info, StreamingContext context);
}
public class Kdbndp.BouncyCastle.KdbndpDataLengthException : KdbndpCryptoException {
    public KdbndpDataLengthException(string message);
    public KdbndpDataLengthException(string message, Exception innerException);
    protected KdbndpDataLengthException(SerializationInfo info, StreamingContext context);
}
public abstract class Kdbndp.BouncyCastle.KdbndpGeneralDigest : object {
    private static int BYTE_LENGTH;
    private Byte[] xBuf;
    private int xBufOff;
    private long byteCount;
    public string AlgorithmName { get; }
    internal KdbndpGeneralDigest(KdbndpGeneralDigest t);
    protected void CopyIn(KdbndpGeneralDigest t);
    public sealed virtual void Update(byte input);
    public sealed virtual void BlockUpdate(Byte[] input, int inOff, int length);
    public void Finish();
    public virtual void Reset();
    public sealed virtual int GetByteLength();
    internal abstract virtual void ProcessWord(Byte[] input, int inOff);
    internal abstract virtual void ProcessLength(long bitLength);
    internal abstract virtual void ProcessBlock();
    public abstract virtual string get_AlgorithmName();
    public abstract virtual int GetDigestSize();
    public abstract virtual int DoFinal(Byte[] output, int outOff);
    public abstract virtual KdbndpIMemoable Copy();
    public abstract virtual void Reset(KdbndpIMemoable t);
}
public class Kdbndp.BouncyCastle.KdbndpICipherParameters : object {
}
public interface Kdbndp.BouncyCastle.KdbndpIDigest {
    public string AlgorithmName { get; }
    public abstract virtual string get_AlgorithmName();
    public abstract virtual int GetDigestSize();
    public abstract virtual int GetByteLength();
    public abstract virtual void Update(byte input);
    public abstract virtual void BlockUpdate(Byte[] input, int inOff, int inLen);
    public abstract virtual int DoFinal(Byte[] output, int outOff);
    public abstract virtual void Reset();
}
public interface Kdbndp.BouncyCastle.KdbndpIMac {
    public string AlgorithmName { get; }
    public abstract virtual void Init(KdbndpICipherParameters parameters);
    public abstract virtual string get_AlgorithmName();
    public abstract virtual int GetMacSize();
    public abstract virtual void Update(byte input);
    public abstract virtual void BlockUpdate(Byte[] input, int inOff, int inLen);
    public abstract virtual int DoFinal(Byte[] output, int outOff);
    public abstract virtual void Reset();
}
public interface Kdbndp.BouncyCastle.KdbndpIMemoable {
    public abstract virtual KdbndpIMemoable Copy();
    public abstract virtual void Reset(KdbndpIMemoable other);
}
public static class Kdbndp.BouncyCastle.KdbndpIntegers : object {
    public static int NumBits;
    public static int NumBytes;
    private static Byte[] DeBruijnTZ;
    private static KdbndpIntegers();
    public static int HighestOneBit(int i);
    [CLSCompliantAttribute("False")]
public static UInt32 HighestOneBit(UInt32 i);
    public static int LowestOneBit(int i);
    [CLSCompliantAttribute("False")]
public static UInt32 LowestOneBit(UInt32 i);
    public static int NumberOfLeadingZeros(int i);
    public static int NumberOfTrailingZeros(int i);
    public static int PopCount(int i);
    [CLSCompliantAttribute("False")]
public static int PopCount(UInt32 u);
    public static int Reverse(int i);
    [CLSCompliantAttribute("False")]
public static UInt32 Reverse(UInt32 i);
    public static int ReverseBytes(int i);
    [CLSCompliantAttribute("False")]
public static UInt32 ReverseBytes(UInt32 i);
    public static int RotateLeft(int i, int distance);
    [CLSCompliantAttribute("False")]
public static UInt32 RotateLeft(UInt32 i, int distance);
    public static int RotateRight(int i, int distance);
    [CLSCompliantAttribute("False")]
public static UInt32 RotateRight(UInt32 i, int distance);
}
public class Kdbndp.BouncyCastle.KdbndpKeyParameter : KdbndpICipherParameters {
    private Byte[] m_key;
    public int KeyLength { get; }
    public KdbndpKeyParameter(Byte[] key);
    public KdbndpKeyParameter(Byte[] key, int keyOff, int keyLen);
    private KdbndpKeyParameter(int length);
    public void CopyTo(Byte[] buf, int off, int len);
    public Byte[] GetKey();
    public int get_KeyLength();
    internal bool FixedTimeEquals(Byte[] data);
    public KdbndpKeyParameter Reverse();
}
public class Kdbndp.BouncyCastle.KdbndpMacs : object {
    private static byte IPAD;
    private static byte OPAD;
    private KdbndpIDigest digest;
    private int digestSize;
    private int blockLength;
    private KdbndpIMemoable ipadState;
    private KdbndpIMemoable opadState;
    private Byte[] inputPad;
    private Byte[] outputBuf;
    public string AlgorithmName { get; }
    public KdbndpMacs(KdbndpIDigest digest);
    public KdbndpMacs(KdbndpIDigest digest, int blockLength);
    public virtual string get_AlgorithmName();
    public virtual KdbndpIDigest GetUnderlyingDigest();
    public virtual void Init(KdbndpICipherParameters parameters);
    public virtual int GetMacSize();
    public virtual void Update(byte input);
    public virtual void BlockUpdate(Byte[] input, int inOff, int len);
    public virtual int DoFinal(Byte[] output, int outOff);
    public virtual void Reset();
    private static void XorPad(Byte[] pad, int len, byte n);
}
public static class Kdbndp.BouncyCastle.KdbndpObjects : object {
    public static int GetHashCode(object obj);
    internal static TValue EnsureSingletonInitialized(TValue& value, TArg arg, Func`2<TArg, TValue> initialize);
}
public class Kdbndp.BouncyCastle.KdbndpOutputLengthException : KdbndpDataLengthException {
    public KdbndpOutputLengthException(string message);
    public KdbndpOutputLengthException(string message, Exception innerException);
    protected KdbndpOutputLengthException(SerializationInfo info, StreamingContext context);
}
internal static class Kdbndp.BouncyCastle.KdbndpPack : object {
    internal static void UInt16_To_BE(ushort n, Byte[] bs);
    internal static void UInt16_To_BE(ushort n, Byte[] bs, int off);
    internal static void UInt16_To_BE(UInt16[] ns, Byte[] bs, int off);
    internal static void UInt16_To_BE(UInt16[] ns, int nsOff, int nsLen, Byte[] bs, int bsOff);
    internal static Byte[] UInt16_To_BE(ushort n);
    internal static Byte[] UInt16_To_BE(UInt16[] ns);
    internal static Byte[] UInt16_To_BE(UInt16[] ns, int nsOff, int nsLen);
    internal static ushort BE_To_UInt16(Byte[] bs, int off);
    internal static void BE_To_UInt16(Byte[] bs, int bsOff, UInt16[] ns, int nsOff);
    internal static UInt16[] BE_To_UInt16(Byte[] bs);
    internal static UInt16[] BE_To_UInt16(Byte[] bs, int off, int len);
    internal static void UInt24_To_BE(UInt32 n, Byte[] bs);
    internal static void UInt24_To_BE(UInt32 n, Byte[] bs, int off);
    internal static UInt32 BE_To_UInt24(Byte[] bs);
    internal static UInt32 BE_To_UInt24(Byte[] bs, int off);
    internal static void UInt32_To_BE(UInt32 n, Byte[] bs);
    internal static void UInt32_To_BE(UInt32 n, Byte[] bs, int off);
    internal static void UInt32_To_BE_High(UInt32 n, Byte[] bs, int off, int len);
    internal static void UInt32_To_BE_Low(UInt32 n, Byte[] bs, int off, int len);
    internal static void UInt32_To_BE(UInt32[] ns, Byte[] bs, int off);
    internal static void UInt32_To_BE(UInt32[] ns, int nsOff, int nsLen, Byte[] bs, int bsOff);
    internal static Byte[] UInt32_To_BE(UInt32 n);
    internal static Byte[] UInt32_To_BE(UInt32[] ns);
    internal static UInt32 BE_To_UInt32(Byte[] bs);
    internal static UInt32 BE_To_UInt32(Byte[] bs, int off);
    internal static UInt32 BE_To_UInt32_High(Byte[] bs, int off, int len);
    internal static UInt32 BE_To_UInt32_Low(Byte[] bs, int off, int len);
    internal static void BE_To_UInt32(Byte[] bs, int off, UInt32[] ns);
    internal static void BE_To_UInt32(Byte[] bs, int bsOff, UInt32[] ns, int nsOff, int nsLen);
    internal static Byte[] UInt64_To_BE(ulong n);
    internal static void UInt64_To_BE(ulong n, Byte[] bs);
    internal static void UInt64_To_BE(ulong n, Byte[] bs, int off);
    internal static void UInt64_To_BE_High(ulong n, Byte[] bs, int off, int len);
    internal static void UInt64_To_BE_Low(ulong n, Byte[] bs, int off, int len);
    internal static Byte[] UInt64_To_BE(UInt64[] ns);
    internal static void UInt64_To_BE(UInt64[] ns, Byte[] bs, int off);
    internal static void UInt64_To_BE(UInt64[] ns, int nsOff, int nsLen, Byte[] bs, int bsOff);
    internal static ulong BE_To_UInt64(Byte[] bs);
    internal static ulong BE_To_UInt64(Byte[] bs, int off);
    internal static ulong BE_To_UInt64_High(Byte[] bs, int off, int len);
    internal static ulong BE_To_UInt64_Low(Byte[] bs, int off, int len);
    internal static void BE_To_UInt64(Byte[] bs, int off, UInt64[] ns);
    internal static void BE_To_UInt64(Byte[] bs, int bsOff, UInt64[] ns, int nsOff, int nsLen);
    internal static void UInt16_To_LE(ushort n, Byte[] bs);
    internal static void UInt16_To_LE(ushort n, Byte[] bs, int off);
    internal static Byte[] UInt16_To_LE(ushort n);
    internal static Byte[] UInt16_To_LE(UInt16[] ns);
    internal static void UInt16_To_LE(UInt16[] ns, Byte[] bs, int off);
    internal static void UInt16_To_LE(UInt16[] ns, int nsOff, int nsLen, Byte[] bs, int bsOff);
    internal static ushort LE_To_UInt16(Byte[] bs);
    internal static ushort LE_To_UInt16(Byte[] bs, int off);
    internal static void LE_To_UInt16(Byte[] bs, int off, UInt16[] ns);
    internal static void LE_To_UInt16(Byte[] bs, int bOff, UInt16[] ns, int nOff, int count);
    internal static UInt16[] LE_To_UInt16(Byte[] bs, int off, int count);
    internal static Byte[] UInt32_To_LE(UInt32 n);
    internal static void UInt32_To_LE(UInt32 n, Byte[] bs);
    internal static void UInt32_To_LE(UInt32 n, Byte[] bs, int off);
    internal static void UInt32_To_LE_High(UInt32 n, Byte[] bs, int off, int len);
    internal static void UInt32_To_LE_Low(UInt32 n, Byte[] bs, int off, int len);
    internal static Byte[] UInt32_To_LE(UInt32[] ns);
    internal static void UInt32_To_LE(UInt32[] ns, Byte[] bs, int off);
    internal static void UInt32_To_LE(UInt32[] ns, int nsOff, int nsLen, Byte[] bs, int bsOff);
    internal static UInt32 LE_To_UInt24(Byte[] bs, int off);
    internal static UInt32 LE_To_UInt32(Byte[] bs);
    internal static UInt32 LE_To_UInt32(Byte[] bs, int off);
    internal static UInt32 LE_To_UInt32_High(Byte[] bs, int off, int len);
    internal static UInt32 LE_To_UInt32_Low(Byte[] bs, int off, int len);
    internal static void LE_To_UInt32(Byte[] bs, int off, UInt32[] ns);
    internal static void LE_To_UInt32(Byte[] bs, int bOff, UInt32[] ns, int nOff, int count);
    internal static UInt32[] LE_To_UInt32(Byte[] bs, int off, int count);
    internal static Byte[] UInt64_To_LE(ulong n);
    internal static void UInt64_To_LE(ulong n, Byte[] bs);
    internal static void UInt64_To_LE(ulong n, Byte[] bs, int off);
    internal static void UInt64_To_LE_High(ulong n, Byte[] bs, int off, int len);
    internal static void UInt64_To_LE_Low(ulong n, Byte[] bs, int off, int len);
    internal static Byte[] UInt64_To_LE(UInt64[] ns);
    internal static void UInt64_To_LE(UInt64[] ns, Byte[] bs, int off);
    internal static void UInt64_To_LE(UInt64[] ns, int nsOff, int nsLen, Byte[] bs, int bsOff);
    internal static ulong LE_To_UInt64(Byte[] bs);
    internal static ulong LE_To_UInt64(Byte[] bs, int off);
    internal static ulong LE_To_UInt64_High(Byte[] bs, int off, int len);
    internal static ulong LE_To_UInt64_Low(Byte[] bs, int off, int len);
    internal static void LE_To_UInt64(Byte[] bs, int off, UInt64[] ns);
    internal static void LE_To_UInt64(Byte[] bs, int bsOff, UInt64[] ns, int nsOff, int nsLen);
    internal static UInt64[] LE_To_UInt64(Byte[] bs, int off, int count);
}
internal static class Kdbndp.BouncyCastle.KdbndpPlatform : object {
    private static CompareInfo InvariantCompareInfo;
    internal static bool Is64BitProcess { get; }
    private static KdbndpPlatform();
    internal static bool EqualsIgnoreCase(string a, string b);
    internal static string GetEnvironmentVariable(string variable);
    internal static int IndexOf(string source, char value);
    internal static int IndexOf(string source, string value);
    internal static int IndexOf(string source, char value, int startIndex);
    internal static int IndexOf(string source, string value, int startIndex);
    internal static bool get_Is64BitProcess();
    internal static int LastIndexOf(string source, string value);
    internal static bool StartsWith(string source, string prefix);
    internal static bool StartsWithIgnoreCase(string source, string prefix);
    internal static bool EndsWith(string source, string suffix);
    internal static string GetTypeName(object obj);
    internal static string GetTypeName(Type t);
}
public class Kdbndp.BouncyCastle.KdbndpSM3Digest : KdbndpGeneralDigest {
    private static int DIGEST_LENGTH;
    private static int BLOCK_SIZE;
    private UInt32[] V;
    private UInt32[] inwords;
    private int xOff;
    private UInt32[] W;
    private static UInt32[] T;
    public string AlgorithmName { get; }
    private static KdbndpSM3Digest();
    public KdbndpSM3Digest(KdbndpSM3Digest t);
    private void CopyIn(KdbndpSM3Digest t);
    public virtual string get_AlgorithmName();
    public virtual int GetDigestSize();
    public virtual KdbndpIMemoable Copy();
    public virtual void Reset(KdbndpIMemoable other);
    public virtual void Reset();
    public virtual int DoFinal(Byte[] output, int outOff);
    internal virtual void ProcessWord(Byte[] input, int inOff);
    internal virtual void ProcessLength(long bitLength);
    private UInt32 P0(UInt32 x);
    private UInt32 P1(UInt32 x);
    private UInt32 FF0(UInt32 x, UInt32 y, UInt32 z);
    private UInt32 FF1(UInt32 x, UInt32 y, UInt32 z);
    private UInt32 GG0(UInt32 x, UInt32 y, UInt32 z);
    private UInt32 GG1(UInt32 x, UInt32 y, UInt32 z);
    internal virtual void ProcessBlock();
}
public class Kdbndp.BouncyCastle.KdbndpSM4Engine : object {
    private static int BlockSize;
    private static Byte[] Sbox;
    private static UInt32[] CK;
    private static UInt32[] FK;
    private UInt32[] rk;
    public string AlgorithmName { get; }
    private static KdbndpSM4Engine();
    private static UInt32 tau(UInt32 A);
    private static UInt32 L_ap(UInt32 B);
    private UInt32 T_ap(UInt32 Z);
    private void ExpandKey(bool forEncryption, Byte[] key);
    private static UInt32 L(UInt32 B);
    private static UInt32 T(UInt32 Z);
    public virtual void Init(bool forEncryption, KdbndpICipherParameters parameters);
    public virtual string get_AlgorithmName();
    public virtual int GetBlockSize();
    public virtual int ProcessBlock(Byte[] input, int inOff, Byte[] output, int outOff);
}
internal enum Kdbndp.CommandState : Enum {
    public int value__;
    public static CommandState Idle;
    public static CommandState InProgress;
    public static CommandState Disposed;
}
internal class Kdbndp.ConnectorPool : object {
    [CompilerGeneratedAttribute]
private KdbndpConnectionStringBuilder <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserFacingConnectionString>k__BackingField;
    private int _max;
    private int _min;
    [ItemCanBeNullAttribute]
private KdbndpConnector[] _idle;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentQueue`1<ValueTuple`2<TaskCompletionSource`1<KdbndpConnector>, bool>> _waiting;
    internal PoolState State;
    private int _clearCounter;
    [CanBeNullAttribute]
private Timer _pruningTimer;
    private TimeSpan _pruningInterval;
    internal static int PoolSizeLimit;
    private static KdbndpLogger Log;
    private Dictionary`2<Transaction, List`1<KdbndpConnector>> _pendingEnlistedConnectors;
    internal KdbndpConnectionStringBuilder Settings { get; }
    internal string UserFacingConnectionString { get; }
    internal ConnectorPool(KdbndpConnectionStringBuilder settings, string connString);
    private static ConnectorPool();
    [CompilerGeneratedAttribute]
internal KdbndpConnectionStringBuilder get_Settings();
    [CompilerGeneratedAttribute]
internal string get_UserFacingConnectionString();
    internal bool TryAllocateFast(KdbndpConnection conn, KdbndpConnector& connector);
    [AsyncStateMachineAttribute("Kdbndp.ConnectorPool/<AllocateLong>d__19")]
internal ValueTask`1<KdbndpConnector> AllocateLong(KdbndpConnection conn, KdbndpTimeout timeout, bool async, CancellationToken cancellationToken);
    internal void Release(KdbndpConnector connector);
    private void CloseConnector(KdbndpConnector connector, bool wasIdle);
    private void PruneIdleConnectors(object _);
    internal void Clear();
    internal void AddPendingEnlistedConnector(KdbndpConnector connector, Transaction transaction);
    internal void TryRemovePendingEnlistedConnector(KdbndpConnector connector, Transaction transaction);
    [CanBeNullAttribute]
internal KdbndpConnector TryAllocateEnlistedPending(Transaction transaction);
    [ConditionalAttribute("DEBUG")]
private void CheckInvariants(PoolState state);
    public sealed virtual void Dispose();
    public virtual string ToString();
}
internal enum Kdbndp.ConnectorState : Enum {
    public int value__;
    public static ConnectorState Closed;
    public static ConnectorState Connecting;
    public static ConnectorState Ready;
    public static ConnectorState Executing;
    public static ConnectorState Fetching;
    public static ConnectorState Waiting;
    public static ConnectorState Broken;
    public static ConnectorState Copy;
}
internal class Kdbndp.Counter : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    internal Counter(bool enabled, string diagnosticsCounterName);
    [CompilerGeneratedAttribute]
public string get_Name();
    internal void Increment();
    internal void Decrement();
    public sealed virtual void Dispose();
    public virtual string ToString();
}
internal static class Kdbndp.Counters : object {
    internal static Counter HardConnectsPerSecond;
    internal static Counter HardDisconnectsPerSecond;
    internal static Counter NumberOfActiveConnectionPools;
    internal static Counter NumberOfActiveConnections;
    internal static Counter NumberOfFreeConnections;
    internal static Counter NumberOfNonPooledConnections;
    internal static Counter NumberOfPooledConnections;
    internal static Counter SoftConnectsPerSecond;
    internal static Counter SoftDisconnectsPerSecond;
    private static bool _initialized;
    private static object InitLock;
    private static KdbndpLogger Log;
    private static Counters();
    internal static void Initialize(bool usePerfCounters);
}
internal class Kdbndp.CultureSetter : object {
    private CultureInfo _oldCulture;
    internal CultureSetter(CultureInfo newCulture);
    public sealed virtual void Dispose();
}
internal enum Kdbndp.DataRowLoadingMode : Enum {
    public int value__;
    public static DataRowLoadingMode NonSequential;
    public static DataRowLoadingMode Sequential;
    public static DataRowLoadingMode Skip;
}
public enum Kdbndp.DbMode : Enum {
    public int value__;
    public static DbMode Oracle;
    public static DbMode Pg;
    public static DbMode Mysql;
    public static DbMode SqlServer;
    public static DbMode NoMode;
}
[ExtensionAttribute]
internal static class Kdbndp.EnumerableExtensions : object {
    [ExtensionAttribute]
internal static string Join(IEnumerable`1<string> values, string separator);
}
internal enum Kdbndp.FormatCode : Enum {
    public short value__;
    public static FormatCode Text;
    public static FormatCode Binary;
}
internal abstract class Kdbndp.FrontendMessage : object {
    internal int ResponseMessageCount { get; }
    internal abstract virtual Task Write(KdbndpWriteBuffer buf, bool async);
    internal virtual int get_ResponseMessageCount();
}
internal class Kdbndp.FrontendMessages.BindMessage : FrontendMessage {
    [CompilerGeneratedAttribute]
private string <Portal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Statement>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KdbndpParameter> <InputParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KdbndpParameter> <OutputParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KdbndpParameter> <InOutputParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KdbndpParameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FormatCode> <ResultFormatCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllResultTypesAreUnknown>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DbOracleMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Boolean[] <UnknownResultTypeList>k__BackingField;
    private static byte Code;
    private string Portal { get; private set; }
    private string Statement { get; private set; }
    private List`1<KdbndpParameter> InputParameters { get; private set; }
    private List`1<KdbndpParameter> OutputParameters { get; private set; }
    private List`1<KdbndpParameter> InOutputParameters { get; private set; }
    private List`1<KdbndpParameter> Parameters { get; private set; }
    internal List`1<FormatCode> ResultFormatCodes { get; private set; }
    internal bool AllResultTypesAreUnknown { get; internal set; }
    internal bool DbOracleMode { get; internal set; }
    [CanBeNullAttribute]
internal Boolean[] UnknownResultTypeList { get; internal set; }
    [CompilerGeneratedAttribute]
private string get_Portal();
    [CompilerGeneratedAttribute]
private void set_Portal(string value);
    [CompilerGeneratedAttribute]
private string get_Statement();
    [CompilerGeneratedAttribute]
private void set_Statement(string value);
    [CompilerGeneratedAttribute]
private List`1<KdbndpParameter> get_InputParameters();
    [CompilerGeneratedAttribute]
private void set_InputParameters(List`1<KdbndpParameter> value);
    [CompilerGeneratedAttribute]
private List`1<KdbndpParameter> get_OutputParameters();
    [CompilerGeneratedAttribute]
private void set_OutputParameters(List`1<KdbndpParameter> value);
    [CompilerGeneratedAttribute]
private List`1<KdbndpParameter> get_InOutputParameters();
    [CompilerGeneratedAttribute]
private void set_InOutputParameters(List`1<KdbndpParameter> value);
    [CompilerGeneratedAttribute]
private List`1<KdbndpParameter> get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(List`1<KdbndpParameter> value);
    [CompilerGeneratedAttribute]
internal List`1<FormatCode> get_ResultFormatCodes();
    [CompilerGeneratedAttribute]
private void set_ResultFormatCodes(List`1<FormatCode> value);
    [CompilerGeneratedAttribute]
internal bool get_AllResultTypesAreUnknown();
    [CompilerGeneratedAttribute]
internal void set_AllResultTypesAreUnknown(bool value);
    [CompilerGeneratedAttribute]
internal bool get_DbOracleMode();
    [CompilerGeneratedAttribute]
internal void set_DbOracleMode(bool value);
    [CompilerGeneratedAttribute]
internal Boolean[] get_UnknownResultTypeList();
    [CompilerGeneratedAttribute]
internal void set_UnknownResultTypeList(Boolean[] value);
    internal BindMessage Populate(List`1<KdbndpParameter> inputParameters, string portal, string statement);
    internal BindMessage Populate(string portal, string statement);
    internal BindMessage Populate(KdbndpStatement statement, string portal, string statementname);
    [AsyncStateMachineAttribute("Kdbndp.FrontendMessages.BindMessage/<Write>d__44")]
internal virtual Task Write(KdbndpWriteBuffer buf, bool async);
    public virtual string ToString();
}
internal class Kdbndp.FrontendMessages.CancelRequestMessage : SimpleFrontendMessage {
    [CompilerGeneratedAttribute]
private int <BackendProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BackendSecretKey>k__BackingField;
    private static int CancelRequestCode;
    internal int BackendProcessId { get; }
    internal int BackendSecretKey { get; }
    internal int Length { get; }
    internal CancelRequestMessage(int backendProcessId, int backendSecretKey);
    [CompilerGeneratedAttribute]
internal int get_BackendProcessId();
    [CompilerGeneratedAttribute]
internal int get_BackendSecretKey();
    internal virtual int get_Length();
    internal virtual void WriteFully(KdbndpWriteBuffer buf);
    public virtual string ToString();
}
internal class Kdbndp.FrontendMessages.CloseMessage : SimpleFrontendMessage {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private StatementOrPortal <StatementOrPortal>k__BackingField;
    private static byte Code;
    internal string Name { get; private set; }
    internal StatementOrPortal StatementOrPortal { get; private set; }
    internal int Length { get; }
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
internal StatementOrPortal get_StatementOrPortal();
    [CompilerGeneratedAttribute]
private void set_StatementOrPortal(StatementOrPortal value);
    internal CloseMessage Populate(StatementOrPortal type, string name);
    internal virtual int get_Length();
    internal virtual void WriteFully(KdbndpWriteBuffer buf);
    public virtual string ToString();
}
internal class Kdbndp.FrontendMessages.CopyFailMessage : SimpleFrontendMessage {
    private static byte Code;
    [CanBeNullAttribute]
private string _errorMessage;
    private int _errorMessageLen;
    internal int Length { get; }
    internal CopyFailMessage(string errorMessage);
    internal virtual int get_Length();
    internal virtual void WriteFully(KdbndpWriteBuffer buf);
    public virtual string ToString();
}
internal class Kdbndp.FrontendMessages.DescribeMessage : SimpleFrontendMessage {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private StatementOrPortal <StatementOrPortal>k__BackingField;
    private static byte Code;
    internal string Name { get; internal set; }
    internal StatementOrPortal StatementOrPortal { get; internal set; }
    internal int Length { get; }
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
internal StatementOrPortal get_StatementOrPortal();
    [CompilerGeneratedAttribute]
internal void set_StatementOrPortal(StatementOrPortal value);
    internal DescribeMessage Populate(StatementOrPortal type, string name);
    internal virtual int get_Length();
    internal virtual void WriteFully(KdbndpWriteBuffer buf);
    public virtual string ToString();
}
internal class Kdbndp.FrontendMessages.ExecuteMessage : SimpleFrontendMessage {
    internal static ExecuteMessage DefaultExecute;
    [CompilerGeneratedAttribute]
private string <Portal>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxRows>k__BackingField;
    private static byte Code;
    internal string Portal { get; private set; }
    internal int MaxRows { get; private set; }
    internal int Length { get; }
    private static ExecuteMessage();
    [CompilerGeneratedAttribute]
internal string get_Portal();
    [CompilerGeneratedAttribute]
private void set_Portal(string value);
    [CompilerGeneratedAttribute]
internal int get_MaxRows();
    [CompilerGeneratedAttribute]
private void set_MaxRows(int value);
    internal ExecuteMessage Populate(string portal, int maxRows);
    internal ExecuteMessage Populate(int maxRows);
    internal virtual int get_Length();
    internal virtual void WriteFully(KdbndpWriteBuffer buf);
    public virtual string ToString();
}
internal class Kdbndp.FrontendMessages.FlushMessage : SimpleFrontendMessage {
    private static byte Code;
    internal static FlushMessage Instance;
    internal int Length { get; }
    private static FlushMessage();
    internal virtual int get_Length();
    internal virtual void WriteFully(KdbndpWriteBuffer buf);
    public virtual string ToString();
}
internal class Kdbndp.FrontendMessages.ParseMessage : FrontendMessage {
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Statement>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UInt32> <ParameterTypeOIDs>k__BackingField;
    private Encoding _encoding;
    private static byte Code;
    private string Query { get; private set; }
    private string Statement { get; private set; }
    private List`1<UInt32> ParameterTypeOIDs { get; }
    internal ParseMessage(Encoding encoding);
    [CompilerGeneratedAttribute]
private string get_Query();
    [CompilerGeneratedAttribute]
private void set_Query(string value);
    [CompilerGeneratedAttribute]
private string get_Statement();
    [CompilerGeneratedAttribute]
private void set_Statement(string value);
    [CompilerGeneratedAttribute]
private List`1<UInt32> get_ParameterTypeOIDs();
    internal ParseMessage Populate_V8R3(string sql, string statementName, KdbndpStatement statement, ConnectorTypeMapper typeMapper);
    internal ParseMessage Populate(string sql, string statementName, KdbndpStatement statement, ConnectorTypeMapper typeMapper);
    internal ParseMessage Populate(string sql, string statementName);
    internal ParseMessage Populate();
    [AsyncStateMachineAttribute("Kdbndp.FrontendMessages.ParseMessage/<Write>d__18")]
internal virtual Task Write(KdbndpWriteBuffer buf, bool async);
    public virtual string ToString();
}
internal class Kdbndp.FrontendMessages.PasswordMessage : FrontendMessage {
    [CompilerGeneratedAttribute]
private Byte[] <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PayloadOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PayloadLength>k__BackingField;
    private static byte Code;
    internal Byte[] Payload { get; private set; }
    internal int PayloadOffset { get; private set; }
    internal int PayloadLength { get; private set; }
    private PasswordMessage(Byte[] payload);
    [CompilerGeneratedAttribute]
internal Byte[] get_Payload();
    [CompilerGeneratedAttribute]
private void set_Payload(Byte[] value);
    [CompilerGeneratedAttribute]
internal int get_PayloadOffset();
    [CompilerGeneratedAttribute]
private void set_PayloadOffset(int value);
    [CompilerGeneratedAttribute]
internal int get_PayloadLength();
    [CompilerGeneratedAttribute]
private void set_PayloadLength(int value);
    internal static PasswordMessage CreateClearText(string password);
    internal static PasswordMessage CreateMD5(string password, string username, Byte[] serverSalt);
    internal static void bytesToHex(Byte[] bytes, Byte[] hex, int offset);
    internal static PasswordMessage CreateSM3(string password, string username, Byte[] serverSalt);
    internal PasswordMessage Populate(Byte[] payload, int offset, int count);
    [AsyncStateMachineAttribute("Kdbndp.FrontendMessages.PasswordMessage/<Write>d__20")]
internal virtual Task Write(KdbndpWriteBuffer buf, bool async);
    public virtual string ToString();
}
internal class Kdbndp.FrontendMessages.PregeneratedMessage : SimpleFrontendMessage {
    private Byte[] _data;
    private string _description;
    [CompilerGeneratedAttribute]
private int <ResponseMessageCount>k__BackingField;
    internal static PregeneratedMessage BeginTrans;
    internal static PregeneratedMessage SetTransRepeatableRead;
    internal static PregeneratedMessage SetTransSerializable;
    internal static PregeneratedMessage SetTransReadCommitted;
    internal static PregeneratedMessage SetTransReadUncommitted;
    internal static PregeneratedMessage CommitTransaction;
    internal static PregeneratedMessage RollbackTransaction;
    internal static PregeneratedMessage KeepAlive;
    internal static PregeneratedMessage DiscardAll;
    internal int Length { get; }
    internal int ResponseMessageCount { get; }
    internal PregeneratedMessage(Byte[] data, string description, int responseMessageCount);
    private static PregeneratedMessage();
    internal virtual int get_Length();
    [CompilerGeneratedAttribute]
internal virtual int get_ResponseMessageCount();
    internal virtual void WriteFully(KdbndpWriteBuffer buf);
    public virtual string ToString();
    internal static PregeneratedMessage Generate(KdbndpWriteBuffer buf, QueryMessage queryMessage, string query, int responseMessageCount);
}
internal class Kdbndp.FrontendMessages.QueryMessage : FrontendMessage {
    private Encoding _encoding;
    private string _query;
    private static byte Code;
    internal QueryMessage(Encoding encoding);
    internal QueryMessage Populate(string query);
    [AsyncStateMachineAttribute("Kdbndp.FrontendMessages.QueryMessage/<Write>d__5")]
internal virtual Task Write(KdbndpWriteBuffer buf, bool async);
    public virtual string ToString();
}
internal class Kdbndp.FrontendMessages.SASLInitialResponseMessage : SimpleFrontendMessage {
    private static byte Code;
    private string _mechanism;
    [CanBeNullAttribute]
private Byte[] _initialResponse;
    internal int Length { get; }
    internal SASLInitialResponseMessage(string mechanism, Byte[] initialResponse);
    internal virtual int get_Length();
    internal virtual void WriteFully(KdbndpWriteBuffer buf);
}
internal class Kdbndp.FrontendMessages.SCRAMClientFinalMessage : SimpleFrontendMessage {
    private static byte Code;
    private string _messageStr;
    private static string ClientKey;
    private static string ServerKey;
    [CompilerGeneratedAttribute]
private Byte[] <ServerSignature>k__BackingField;
    internal Byte[] ServerSignature { get; }
    internal int Length { get; }
    internal SCRAMClientFinalMessage(string password, string serverNonce, string salt, int serverIteration, string clientNonce);
    [CompilerGeneratedAttribute]
internal Byte[] get_ServerSignature();
    internal virtual int get_Length();
    internal virtual void WriteFully(KdbndpWriteBuffer buf);
    private static Byte[] Hi(string str, Byte[] salt, int count);
    private static Byte[] XOR(Byte[] buffer1, Byte[] buffer2);
    private static Byte[] HMAC(Byte[] data, string key);
}
internal class Kdbndp.FrontendMessages.SSLRequestMessage : SimpleFrontendMessage {
    internal static SSLRequestMessage Instance;
    internal int Length { get; }
    private static SSLRequestMessage();
    internal virtual int get_Length();
    internal virtual void WriteFully(KdbndpWriteBuffer buf);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class Kdbndp.FrontendMessages.StartupMessage : SimpleFrontendMessage {
    private Dictionary`2<string, string> _parameters;
    private int _length;
    private static int ProtocolVersion3;
    unknown string Item {internal set; }
    internal int Length { get; }
    internal void set_Item(string key, string value);
    internal virtual int get_Length();
    internal virtual void WriteFully(KdbndpWriteBuffer buf);
}
internal class Kdbndp.FrontendMessages.SyncMessage : SimpleFrontendMessage {
    private static byte Code;
    internal static SyncMessage Instance;
    internal int Length { get; }
    private static SyncMessage();
    internal virtual int get_Length();
    internal virtual void WriteFully(KdbndpWriteBuffer buf);
    public virtual string ToString();
}
internal class Kdbndp.FrontendMessages.TerminateMessage : SimpleFrontendMessage {
    private static byte Code;
    internal static TerminateMessage Instance;
    internal int Length { get; }
    private static TerminateMessage();
    internal virtual int get_Length();
    internal virtual void WriteFully(KdbndpWriteBuffer buf);
    public virtual string ToString();
}
internal interface Kdbndp.IBackendMessage {
    public BackendMessageCode Code { get; }
    public abstract virtual BackendMessageCode get_Code();
}
internal interface Kdbndp.ICancelable {
    public abstract virtual void Cancel();
}
public interface Kdbndp.IKdbndpDatabaseInfoFactory {
    [ItemCanBeNullAttribute]
public abstract virtual Task`1<KdbndpDatabaseInfo> Load(KdbndpConnection conn, KdbndpTimeout timeout, bool async);
}
public interface Kdbndp.IKdbndpNameTranslator {
    public abstract virtual string TranslateTypeName(string clrName);
    public abstract virtual string TranslateMemberName(string clrName);
}
internal static class Kdbndp.KBUtil : object {
    internal static Byte[] EmptyBuffer;
    internal static UTF8Encoding UTF8Encoding;
    internal static UTF8Encoding RelaxedUTF8Encoding;
    internal static int BitsInInt;
    internal static Task CompletedTask;
    internal static Task`1<bool> TrueTask;
    internal static Task`1<bool> FalseTask;
    internal static Task`1<int> CancelledTask;
    internal static StringComparer InvariantCaseIgnoringStringComparer { get; }
    internal static bool IsWindows { get; }
    private static KBUtil();
    internal static void ValidateBackendMessageCode(BackendMessageCode code);
    internal static int RotateShift(int val, int shift);
    internal static short ReverseEndianness(short value);
    internal static int ReverseEndianness(int value);
    internal static long ReverseEndianness(long value);
    internal static ushort ReverseEndianness(ushort value);
    internal static UInt32 ReverseEndianness(UInt32 value);
    internal static ulong ReverseEndianness(ulong value);
    private static Task`1<T> CreateCancelledTask();
    internal static StringComparer get_InvariantCaseIgnoringStringComparer();
    internal static bool get_IsWindows();
}
public class Kdbndp.KdbndpBinaryExporter : object {
    private KdbndpConnector _connector;
    private KdbndpReadBuffer _buf;
    private ConnectorTypeMapper _typeMapper;
    private bool _isConsumed;
    private bool _isDisposed;
    private int _leftToReadInDataMsg;
    private int _columnLen;
    private short _column;
    [CompilerGeneratedAttribute]
private int <NumColumns>k__BackingField;
    [ItemCanBeNullAttribute]
private KdbndpTypeHandler[] _typeHandlerCache;
    private static KdbndpLogger Log;
    internal int NumColumns { get; }
    public bool IsNull { get; }
    internal KdbndpBinaryExporter(KdbndpConnector connector, string copyToCommand);
    private static KdbndpBinaryExporter();
    [CompilerGeneratedAttribute]
internal int get_NumColumns();
    private void ReadHeader();
    private void ReadHeader_R6();
    public int StartRow();
    public T Read();
    public T Read(KdbndpDbType type);
    private T DoRead(KdbndpTypeHandler handler);
    public bool get_IsNull();
    public void Skip();
    private void ReadColumnLenIfNeeded();
    private void CheckDisposed();
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    private void Cleanup();
    [CompilerGeneratedAttribute]
private bool <ReadHeader>b__14_0(byte t);
    [CompilerGeneratedAttribute]
private bool <ReadHeader_R6>b__15_0(byte t);
}
public class Kdbndp.KdbndpBinaryImporter : object {
    private KdbndpConnector _connector;
    private KdbndpWriteBuffer _buf;
    private ImporterState _state;
    private short _column;
    [CompilerGeneratedAttribute]
private int <NumColumns>k__BackingField;
    [ItemCanBeNullAttribute]
private KdbndpParameter[] _params;
    private static KdbndpLogger Log;
    internal int NumColumns { get; }
    private bool InMiddleOfRow { get; }
    internal KdbndpBinaryImporter(KdbndpConnector connector, string copyFromCommand);
    private static KdbndpBinaryImporter();
    [CompilerGeneratedAttribute]
internal int get_NumColumns();
    private bool get_InMiddleOfRow();
    private void WriteHeader();
    private void WriteHeader_R6();
    public void StartRow();
    public void Write(T value);
    public void Write(T value, KdbndpDbType kdbndpDbType);
    public void Write(T value, string dataTypeName);
    private void Write(T value, KdbndpParameter param);
    public void WriteNull();
    public void WriteRow(Object[] values);
    public void Complete();
    private sealed virtual override void Kdbndp.ICancelable.Cancel();
    public sealed virtual void Dispose();
    private void Cancel();
    [PublicAPIAttribute]
public void Close();
    private void Cleanup();
    private void WriteTrailer();
    private void CheckReady();
}
[DesignerCategoryAttribute("")]
public class Kdbndp.KdbndpCommand : DbCommand {
    [CanBeNullAttribute]
private KdbndpConnection _connection;
    [CanBeNullAttribute]
private KdbndpConnector _connectorPreparedOn;
    private KdbndpTransaction _transaction;
    private string _commandText;
    private Nullable`1<int> _timeout;
    private static DbMode _dbMode;
    private bool CursorRunOrNo;
    private bool _modeFlag;
    private bool _functionFlag;
    private static String[] ProcParamList;
    private KdbndpParameterCollection _parameters;
    private List`1<KdbndpStatement> _statements;
    private UpdateRowSource _updateRowSource;
    private static SingleThreadSynchronizationContext SingleThreadSynchronizationContext;
    private static KdbndpLogger Log;
    internal static int DefaultTimeout;
    [CompilerGeneratedAttribute]
private CommandType <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeVisible>k__BackingField;
    private bool _allResultTypesAreUnknown;
    private Boolean[] _unknownResultTypeList;
    [CompilerGeneratedAttribute]
private Type[] <ObjectResultTypes>k__BackingField;
    private int _state;
    private static string DeriveParametersForFunctionQuery;
    [CompilerGeneratedAttribute]
private bool <FlushOccurred>k__BackingField;
    public IReadOnlyList`1<KdbndpStatement> Statements { get; }
    private bool IsExplicitlyPrepared { get; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public string CommandText { get; public set; }
    [DefaultValueAttribute("30")]
public int CommandTimeout { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DbMode DbModeType { get; public set; }
    [DefaultValueAttribute("False")]
public bool FunctionFlag { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
public CommandType CommandType { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[CanBeNullAttribute]
public KdbndpConnection Connection { get; public set; }
    public bool DesignTimeVisible { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    public bool IsPrepared { get; }
    public bool AllResultTypesAreUnknown { get; public set; }
    public Boolean[] UnknownResultTypeList { get; public set; }
    internal Type[] ObjectResultTypes { get; internal set; }
    private CommandState State { get; internal set; }
    protected DbParameterCollection DbParameterCollection { get; }
    public KdbndpParameterCollection Parameters { get; }
    internal bool FlushOccurred { get; internal set; }
    protected DbTransaction DbTransaction { get; protected set; }
    public KdbndpTransaction Transaction { get; public set; }
    public KdbndpCommand(string cmdText);
    public KdbndpCommand(string cmdText, KdbndpConnection connection);
    public KdbndpCommand(string cmdText, KdbndpConnection connection, KdbndpTransaction transaction);
    private static KdbndpCommand();
    public IReadOnlyList`1<KdbndpStatement> get_Statements();
    private bool get_IsExplicitlyPrepared();
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public DbMode get_DbModeType();
    public void set_DbModeType(DbMode value);
    public bool get_FunctionFlag();
    public void set_FunctionFlag(bool value);
    [CompilerGeneratedAttribute]
public virtual CommandType get_CommandType();
    [CompilerGeneratedAttribute]
public virtual void set_CommandType(CommandType value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    public KdbndpConnection get_Connection();
    public void set_Connection(KdbndpConnection value);
    [CompilerGeneratedAttribute]
public virtual bool get_DesignTimeVisible();
    [CompilerGeneratedAttribute]
public virtual void set_DesignTimeVisible(bool value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    public bool get_IsPrepared();
    public bool get_AllResultTypesAreUnknown();
    public void set_AllResultTypesAreUnknown(bool value);
    public Boolean[] get_UnknownResultTypeList();
    public void set_UnknownResultTypeList(Boolean[] value);
    [CompilerGeneratedAttribute]
internal Type[] get_ObjectResultTypes();
    [CompilerGeneratedAttribute]
internal void set_ObjectResultTypes(Type[] value);
    private CommandState get_State();
    internal void set_State(CommandState value);
    private void ResetExplicitPreparation();
    protected virtual DbParameter CreateDbParameter();
    public KdbndpParameter CreateParameter();
    protected virtual DbParameterCollection get_DbParameterCollection();
    public KdbndpParameterCollection get_Parameters();
    internal void DeriveParameters();
    private void DeriveParametersForFunction();
    private void DeriveParametersForQuery();
    public virtual void Prepare();
    public Task PrepareAsync();
    public Task PrepareAsync(CancellationToken cancellationToken);
    private Task Prepare(bool async);
    public void Unprepare();
    private void SelectFunction(KdbndpStatement statement);
    private bool IsFunction();
    [CanBeNullAttribute]
private String[] ParamList();
    private void ProcessRawQuery(bool deriveParameters);
    private void ValidateParameters();
    [CompilerGeneratedAttribute]
internal bool get_FlushOccurred();
    [CompilerGeneratedAttribute]
internal void set_FlushOccurred(bool value);
    private void BeginSend();
    private void CleanupSend();
    [AsyncStateMachineAttribute("Kdbndp.KdbndpCommand/<SendExecute>d__98")]
private Task SendExecute(bool async);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpCommand/<SendExecuteSchemaOnly>d__99")]
private Task SendExecuteSchemaOnly(bool async);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpCommand/<SendDeriveParameters>d__100")]
private Task SendDeriveParameters(bool async);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpCommand/<SendPrepare>d__101")]
private Task SendPrepare(bool async);
    private bool ForceAsyncIfNecessary(bool async, int numberOfStatementInBatch);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpCommand/<SendClose>d__103")]
private Task SendClose(bool async);
    public virtual int ExecuteNonQuery();
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpCommand/<ExecuteNonQuery>d__106")]
private Task`1<int> ExecuteNonQuery(bool async, CancellationToken cancellationToken);
    [CanBeNullAttribute]
public virtual object ExecuteScalar();
    [ItemCanBeNullAttribute]
public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpCommand/<ExecuteScalar>d__109")]
[ItemCanBeNullAttribute]
private ValueTask`1<object> ExecuteScalar(bool async, CancellationToken cancellationToken);
    public KdbndpDataReader ExecuteReader();
    public KdbndpDataReader ExecuteReader(CommandBehavior behavior);
    protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    [NotNullAttribute]
protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpCommand/<ExecuteDbDataReader>d__114")]
private ValueTask`1<DbDataReader> ExecuteDbDataReader(CommandBehavior behavior, bool async, CancellationToken cancellationToken);
    private KdbndpDataReader GetDataWithCursor(string strSql);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public KdbndpTransaction get_Transaction();
    public void set_Transaction(KdbndpTransaction value);
    public virtual void Cancel();
    protected virtual void Dispose(bool disposing);
    internal void FixupRowDescription(RowDescriptionMessage rowDescription, bool isFirst);
    private void LogCommand();
    private sealed virtual override object System.ICloneable.Clone();
    [PublicAPIAttribute]
public KdbndpCommand Clone();
    private KdbndpConnector CheckReadyAndGetConnector();
}
[DesignerCategoryAttribute("")]
public class Kdbndp.KdbndpCommandBuilder : DbCommandBuilder {
    public string QuotePrefix { get; public set; }
    public string QuoteSuffix { get; public set; }
    public KdbndpCommandBuilder(KdbndpDataAdapter adapter);
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public static void DeriveParameters(KdbndpCommand command);
    public KdbndpCommand GetInsertCommand();
    public KdbndpCommand GetInsertCommand(bool useColumnsForParameterNames);
    public KdbndpCommand GetUpdateCommand();
    public KdbndpCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public KdbndpCommand GetDeleteCommand();
    public KdbndpCommand GetDeleteCommand(bool useColumnsForParameterNames);
    protected virtual void ApplyParameterInfo(DbParameter p, DataRow row, StatementType statementType, bool whereClause);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    private void RowUpdatingHandler(object sender, KdbndpRowUpdatingEventArgs e);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
}
[DesignerCategoryAttribute("")]
public class Kdbndp.KdbndpConnection : DbConnection {
    private bool _disposed;
    private string _userFacingConnectionString;
    private string _connectionString;
    [CanBeNullAttribute]
internal KdbndpConnector Connector;
    [CompilerGeneratedAttribute]
private KdbndpConnectionStringBuilder <Settings>k__BackingField;
    private static KdbndpConnectionStringBuilder DefaultSettings;
    [CanBeNullAttribute]
private ConnectorPool _pool;
    private bool _wasBroken;
    [CompilerGeneratedAttribute]
private Transaction <EnlistedTransaction>k__BackingField;
    public static int DefaultPort;
    internal static int TimeoutLimit;
    private static KdbndpLogger Log;
    private static bool _countersInitialized;
    private static StateChangeEventArgs ClosedToOpenEventArgs;
    private static StateChangeEventArgs OpenToClosedEventArgs;
    [CompilerGeneratedAttribute]
private NoticeEventHandler Notice;
    [CompilerGeneratedAttribute]
private NotificationEventHandler Notification;
    [CompilerGeneratedAttribute]
private ProvideClientCertificatesCallback <ProvideClientCertificatesCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <UserCertificateValidationCallback>k__BackingField;
    internal string OriginalConnectionString { get; }
    internal KdbndpConnectionStringBuilder Settings { get; private set; }
    [CanBeNullAttribute]
internal Transaction EnlistedTransaction { get; internal set; }
    public static IKdbndpTypeMapper GlobalTypeMapper { get; }
    public IKdbndpTypeMapper TypeMapper { get; }
    [CanBeNullAttribute]
public string ConnectionString { get; public set; }
    [BrowsableAttribute("True")]
[PublicAPIAttribute]
public string Host { get; }
    [BrowsableAttribute("True")]
[PublicAPIAttribute]
public int Port { get; }
    public int ConnectionTimeout { get; }
    public int CommandTimeout { get; }
    [CanBeNullAttribute]
public string Database { get; }
    public string DataSource { get; }
    [PublicAPIAttribute]
public bool IntegratedSecurity { get; }
    [PublicAPIAttribute]
[CanBeNullAttribute]
public string UserName { get; }
    [CanBeNullAttribute]
internal string Password { get; }
    internal string EntityTemplateDatabase { get; }
    internal string EntityAdminDatabase { get; }
    [BrowsableAttribute("False")]
public ConnectionState FullState { get; }
    [BrowsableAttribute("False")]
public ConnectionState State { get; }
    internal bool IsSecure { get; }
    [CanBeNullAttribute]
public ProvideClientCertificatesCallback ProvideClientCertificatesCallback { get; public set; }
    [CanBeNullAttribute]
public RemoteCertificateValidationCallback UserCertificateValidationCallback { get; public set; }
    [BrowsableAttribute("False")]
public Version KingbaseESVersion { get; }
    public string ServerVersion { get; }
    [BrowsableAttribute("False")]
public int ProcessID { get; }
    [BrowsableAttribute("False")]
[PublicAPIAttribute]
public bool HasIntegerDateTimes { get; }
    [BrowsableAttribute("False")]
[PublicAPIAttribute]
public string Timezone { get; }
    [BrowsableAttribute("False")]
[PublicAPIAttribute]
public IReadOnlyDictionary`2<string, string> KingbaseParameters { get; }
    protected DbProviderFactory DbProviderFactory { get; }
    public KdbndpConnection(string connectionString);
    private static KdbndpConnection();
    internal string get_OriginalConnectionString();
    [CompilerGeneratedAttribute]
internal KdbndpConnectionStringBuilder get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(KdbndpConnectionStringBuilder value);
    [CompilerGeneratedAttribute]
internal Transaction get_EnlistedTransaction();
    [CompilerGeneratedAttribute]
internal void set_EnlistedTransaction(Transaction value);
    public static IKdbndpTypeMapper get_GlobalTypeMapper();
    public IKdbndpTypeMapper get_TypeMapper();
    public virtual void Open();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    private void GetPoolAndSettings();
    private Task Open(bool async, CancellationToken cancellationToken);
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public string get_Host();
    public int get_Port();
    public virtual int get_ConnectionTimeout();
    public int get_CommandTimeout();
    public virtual string get_Database();
    public virtual string get_DataSource();
    public bool get_IntegratedSecurity();
    public string get_UserName();
    internal string get_Password();
    internal string get_EntityTemplateDatabase();
    internal string get_EntityAdminDatabase();
    public ConnectionState get_FullState();
    public virtual ConnectionState get_State();
    protected virtual DbCommand CreateDbCommand();
    public KdbndpCommand CreateCommand();
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public KdbndpTransaction BeginTransaction();
    public KdbndpTransaction BeginTransaction(IsolationLevel level);
    public virtual void EnlistTransaction(Transaction transaction);
    public virtual void Close();
    internal void Close(bool wasBroken);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public void add_Notice(NoticeEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Notice(NoticeEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Notification(NotificationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Notification(NotificationEventHandler value);
    internal void OnNotice(KingbaseNotice e);
    internal void OnNotification(KdbndpNotificationEventArgs e);
    internal bool get_IsSecure();
    [CompilerGeneratedAttribute]
public ProvideClientCertificatesCallback get_ProvideClientCertificatesCallback();
    [CompilerGeneratedAttribute]
public void set_ProvideClientCertificatesCallback(ProvideClientCertificatesCallback value);
    [CompilerGeneratedAttribute]
public RemoteCertificateValidationCallback get_UserCertificateValidationCallback();
    [CompilerGeneratedAttribute]
public void set_UserCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public Version get_KingbaseESVersion();
    public virtual string get_ServerVersion();
    public int get_ProcessID();
    public bool get_HasIntegerDateTimes();
    public string get_Timezone();
    public IReadOnlyDictionary`2<string, string> get_KingbaseParameters();
    public KdbndpBinaryImporter BeginBinaryImport(string copyFromCommand);
    public KdbndpBinaryExporter BeginBinaryExport(string copyToCommand);
    public TextWriter BeginTextImport(string copyFromCommand);
    public TextReader BeginTextExport(string copyToCommand);
    public KdbndpRawCopyStream BeginRawBinaryCopy(string copyCommand);
    [PublicAPIAttribute]
[ObsoleteAttribute("Use KdbndpConnection.TypeMapper.MapEnum() instead")]
public void MapEnum(string pgName, IKdbndpNameTranslator nameTranslator);
    [PublicAPIAttribute]
[ObsoleteAttribute("Use KdbndpConnection.GlobalTypeMapper.MapEnum() instead")]
public static void MapEnumGlobally(string pgName, IKdbndpNameTranslator nameTranslator);
    [ObsoleteAttribute("Use KdbndpConnection.GlobalTypeMapper.UnmapEnum() instead")]
public static void UnmapEnumGlobally(string pgName, IKdbndpNameTranslator nameTranslator);
    [ObsoleteAttribute("Use KdbndpConnection.TypeMapper.MapComposite() instead")]
public void MapComposite(string pgName, IKdbndpNameTranslator nameTranslator);
    [ObsoleteAttribute("Use KdbndpConnection.GlobalTypeMapper.MapComposite() instead")]
public static void MapCompositeGlobally(string pgName, IKdbndpNameTranslator nameTranslator);
    [ObsoleteAttribute("Use KdbndpConnection.GlobalTypeMapper.UnmapComposite() instead")]
public static void UnmapCompositeGlobally(string pgName, IKdbndpNameTranslator nameTranslator);
    public bool Wait(int timeout);
    [PublicAPIAttribute]
public bool Wait(TimeSpan timeout);
    [PublicAPIAttribute]
public void Wait();
    [PublicAPIAttribute]
public Task WaitAsync(CancellationToken cancellationToken);
    public Task WaitAsync();
    private void CheckConnectionOpen();
    private void CheckConnectionClosed();
    private void CheckDisposed();
    internal KdbndpConnector CheckReadyAndGetConnector();
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictions);
    private sealed virtual override object System.ICloneable.Clone();
    [PublicAPIAttribute]
public KdbndpConnection CloneWith(string connectionString);
    public virtual void ChangeDatabase(string dbName);
    protected virtual DbProviderFactory get_DbProviderFactory();
    public static void ClearPool(KdbndpConnection connection);
    public static void ClearAllPools();
    [PublicAPIAttribute]
public void UnprepareAll();
    public void ReloadTypes();
}
[DefaultMemberAttribute("Item")]
public class Kdbndp.KdbndpConnectionStringBuilder : DbConnectionStringBuilder {
    private static Dictionary`2<string, PropertyInfo> PropertiesByKeyword;
    private static Dictionary`2<string, string> PropertyNameToCanonicalKeyword;
    private static Dictionary`2<PropertyInfo, object> PropertyDefaults;
    private string _host;
    private int _port;
    private string _database;
    private string _username;
    private string _password;
    private string _passfile;
    private string _applicationName;
    private bool _enlist;
    private string _searchpath;
    private string _clientEncoding;
    private string _encoding;
    private string _timezone;
    private SslMode _sslmode;
    private bool _trustServerCertificate;
    private bool _checkCertificateRevocation;
    private bool _useSslStream;
    private bool _integratedSecurity;
    private string _kerberosServiceName;
    private bool _includeRealm;
    private bool _persistSecurityInfo;
    private bool _pooling;
    private int _minPoolSize;
    private int _maxPoolSize;
    private int _connectionIdleLifetime;
    private int _connectionPruningInterval;
    private int _timeout;
    internal static int DefaultTimeout;
    private int _commandTimeout;
    private int _internalCommandTimeout;
    private string _entityTemplateDatabase;
    private string _entityAdminDatabase;
    private int _keepAlive;
    private bool _tcpKeepAlive;
    private int _tcpKeepAliveTime;
    private int _tcpKeepAliveInterval;
    private int _readBufferSize;
    private int _writeBufferSize;
    private int _socketReceiveBufferSize;
    private int _socketSendBufferSize;
    private int _maxAutoPrepare;
    private int _autoPrepareMinUsages;
    private bool _usePerfCounters;
    private bool _noResetOnClose;
    private bool _loadTableComposites;
    private bool _cursorasdataread;
    private ServerCompatibilityMode _serverCompatibilityMode;
    private bool _convertInfinityDateTime;
    private bool _byteAsBoolSet;
    internal static String[] EmptyStringArray;
    public object Item { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The hostname or IP address of the KingbaseES server to connect to.")]
[DisplayNameAttribute("Host")]
[KdbndpConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CanBeNullAttribute]
public string Host { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The TCP port of the KingbaseES server.")]
[DisplayNameAttribute("Port")]
[KdbndpConnectionStringPropertyAttribute]
[DefaultValueAttribute("5432")]
public int Port { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The KingbaseES database to connect to.")]
[DisplayNameAttribute("Database")]
[KdbndpConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CanBeNullAttribute]
public string Database { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The username to connect with. Not required if using IntegratedSecurity.")]
[DisplayNameAttribute("Username")]
[KdbndpConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CanBeNullAttribute]
public string Username { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The password to connect with. Not required if using IntegratedSecurity.")]
[PasswordPropertyTextAttribute("True")]
[DisplayNameAttribute("Password")]
[KdbndpConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CanBeNullAttribute]
public string Password { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Path to a KingbaseES password file (KBPASSFILE), from which the password would be taken.")]
[DisplayNameAttribute("Passfile")]
[KdbndpConnectionStringPropertyAttribute]
[CanBeNullAttribute]
public string Passfile { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The optional application name parameter to be sent to the backend during connection initiation")]
[DisplayNameAttribute("Application Name")]
[DefaultValueAttribute("Ado.net provider Kbdndp for KingbaseES")]
[KdbndpConnectionStringPropertyAttribute]
public string ApplicationName { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Whether to enlist in an ambient TransactionScope.")]
[DisplayNameAttribute("Enlist")]
[DefaultValueAttribute("True")]
[KdbndpConnectionStringPropertyAttribute]
public bool Enlist { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Gets or sets the schema search path.")]
[DisplayNameAttribute("Search Path")]
[KdbndpConnectionStringPropertyAttribute]
public string SearchPath { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Gets or sets the client_encoding parameter.")]
[DisplayNameAttribute("Client Encoding")]
[KdbndpConnectionStringPropertyAttribute]
[CanBeNullAttribute]
public string ClientEncoding { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Gets or sets the .NET encoding that will be used to encode/decode KingbaseES string data.")]
[DisplayNameAttribute("Encoding")]
[DefaultValueAttribute("UTF8")]
[KdbndpConnectionStringPropertyAttribute]
public string Encoding { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Gets or sets the KingbaseES session timezone, in Olson/IANA database format.")]
[DisplayNameAttribute("Timezone")]
[KdbndpConnectionStringPropertyAttribute]
[CanBeNullAttribute]
public string Timezone { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Controls whether SSL is required, disabled or preferred, depending on server support.")]
[DisplayNameAttribute("SSL Mode")]
[KdbndpConnectionStringPropertyAttribute]
public SslMode SslMode { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Whether to trust the server certificate without validating it.")]
[DisplayNameAttribute("Trust Server Certificate")]
[KdbndpConnectionStringPropertyAttribute]
public bool TrustServerCertificate { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Whether to check the certificate revocation list during authentication.")]
[DisplayNameAttribute("Check Certificate Revocation")]
[KdbndpConnectionStringPropertyAttribute]
public bool CheckCertificateRevocation { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Kdbndp uses its own internal implementation of TLS/SSL. Turn this on to use .NET SslStream instead.")]
[DisplayNameAttribute("Use SSL Stream")]
[DefaultValueAttribute("True")]
[KdbndpConnectionStringPropertyAttribute]
public bool UseSslStream { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Whether to use Windows integrated security to log in.")]
[DisplayNameAttribute("Integrated Security")]
[KdbndpConnectionStringPropertyAttribute]
public bool IntegratedSecurity { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("The Kerberos service name to be used for authentication.")]
[DisplayNameAttribute("Kerberos Service Name")]
[KdbndpConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DefaultValueAttribute("postgres")]
public string KerberosServiceName { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("The Kerberos realm to be used for authentication.")]
[DisplayNameAttribute("Include Realm")]
[KdbndpConnectionStringPropertyAttribute]
public bool IncludeRealm { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state.")]
[DisplayNameAttribute("Persist Security Info")]
[KdbndpConnectionStringPropertyAttribute]
public bool PersistSecurityInfo { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("Whether connection pooling should be used.")]
[DisplayNameAttribute("Pooling")]
[KdbndpConnectionStringPropertyAttribute]
[DefaultValueAttribute("True")]
public bool Pooling { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("The minimum connection pool size.")]
[DisplayNameAttribute("Minimum Pool Size")]
[KdbndpConnectionStringPropertyAttribute]
[DefaultValueAttribute("0")]
public int MinPoolSize { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("The maximum connection pool size.")]
[DisplayNameAttribute("Maximum Pool Size")]
[KdbndpConnectionStringPropertyAttribute]
[DefaultValueAttribute("100")]
public int MaxPoolSize { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("The time to wait before closing unused connections in the pool if the count of all connections exceeds MinPoolSize.")]
[DisplayNameAttribute("Connection Idle Lifetime")]
[KdbndpConnectionStringPropertyAttribute]
[DefaultValueAttribute("300")]
public int ConnectionIdleLifetime { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("How many seconds the pool waits before attempting to prune idle connections that are beyond idle lifetime.")]
[DisplayNameAttribute("Connection Pruning Interval")]
[KdbndpConnectionStringPropertyAttribute]
[DefaultValueAttribute("10")]
public int ConnectionPruningInterval { get; public set; }
    [CategoryAttribute("Timeouts")]
[DescriptionAttribute("The time to wait (in seconds) while trying to establish a connection before terminating the attempt and generating an error.")]
[DisplayNameAttribute("Timeout")]
[KdbndpConnectionStringPropertyAttribute]
[DefaultValueAttribute("15")]
public int Timeout { get; public set; }
    [CategoryAttribute("Timeouts")]
[DescriptionAttribute("The time to wait (in seconds) while trying to execute a command before terminating the attempt and generating an error. Set to zero for infinity.")]
[DisplayNameAttribute("Command Timeout")]
[KdbndpConnectionStringPropertyAttribute]
[DefaultValueAttribute("30")]
public int CommandTimeout { get; public set; }
    [CategoryAttribute("Timeouts")]
[DescriptionAttribute("The time to wait (in seconds) while trying to execute a an internal command before terminating the attempt and generating an error. -1 uses CommandTimeout, 0 means no timeout.")]
[DisplayNameAttribute("Internal Command Timeout")]
[KdbndpConnectionStringPropertyAttribute]
[DefaultValueAttribute("-1")]
public int InternalCommandTimeout { get; public set; }
    [CategoryAttribute("Entity Framework")]
[DescriptionAttribute("The database template to specify when creating a database in Entity Framework. If not specified, KingbaseES defaults to "TEMPLATE1".")]
[DisplayNameAttribute("EF Template Database")]
[KdbndpConnectionStringPropertyAttribute]
public string EntityTemplateDatabase { get; public set; }
    [CategoryAttribute("Entity Framework")]
[DescriptionAttribute("The database admin to specify when creating and dropping a database in Entity Framework. If not specified, defaults to "TEMPLATE1".")]
[DisplayNameAttribute("EF Admin Database")]
[KdbndpConnectionStringPropertyAttribute]
public string EntityAdminDatabase { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("The number of seconds of connection inactivity before Kdbndp sends a keepalive query.")]
[DisplayNameAttribute("Keepalive")]
[KdbndpConnectionStringPropertyAttribute]
public int KeepAlive { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Whether to use TCP keepalive with system defaults if overrides isn't specified.")]
[DisplayNameAttribute("TCP Keepalive")]
[KdbndpConnectionStringPropertyAttribute]
public bool TcpKeepAlive { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("The number of milliseconds of connection inactivity before a TCP keepalive query is sent.")]
[DisplayNameAttribute("TCP Keepalive Time")]
[KdbndpConnectionStringPropertyAttribute]
public int TcpKeepAliveTime { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("The interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.")]
[DisplayNameAttribute("TCP Keepalive Interval")]
[KdbndpConnectionStringPropertyAttribute]
public int TcpKeepAliveInterval { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Determines the size of the internal buffer Kdbndp uses when reading. Increasing may improve performance if transferring large values from the database.")]
[DisplayNameAttribute("Read Buffer Size")]
[KdbndpConnectionStringPropertyAttribute]
[DefaultValueAttribute("8192")]
public int ReadBufferSize { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Determines the size of the internal buffer Kdbndp uses when writing. Increasing may improve performance if transferring large values to the database.")]
[DisplayNameAttribute("Write Buffer Size")]
[KdbndpConnectionStringPropertyAttribute]
[DefaultValueAttribute("8192")]
public int WriteBufferSize { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Determines the size of socket receive buffer.")]
[DisplayNameAttribute("Socket Receive Buffer Size")]
[KdbndpConnectionStringPropertyAttribute]
[CanBeNullAttribute]
public int SocketReceiveBufferSize { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Determines the size of socket send buffer.")]
[DisplayNameAttribute("Socket Send Buffer Size")]
[KdbndpConnectionStringPropertyAttribute]
public int SocketSendBufferSize { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("The maximum number SQL statements that can be automatically prepared at any given point. Beyond this number the least-recently-used statement will be recycled. Zero (the default) disables automatic preparation.")]
[DisplayNameAttribute("Max Auto Prepare")]
[KdbndpConnectionStringPropertyAttribute]
public int MaxAutoPrepare { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("The minimum number of usages an SQL statement is used before it's automatically prepared. Defaults to 5.")]
[DisplayNameAttribute("Auto Prepare Min Usages")]
[KdbndpConnectionStringPropertyAttribute]
[DefaultValueAttribute("5")]
public int AutoPrepareMinUsages { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Writes connection performance information to performance counters.")]
[DisplayNameAttribute("Use Perf Counters")]
[KdbndpConnectionStringPropertyAttribute]
public bool UsePerfCounters { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("If set to true, a pool connection's state won't be reset when it is closed (improves performance). Do not specify this unless you know what you're doing.")]
[DisplayNameAttribute("No Reset On Close")]
[KdbndpConnectionStringPropertyAttribute]
public bool NoResetOnClose { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Load table composite type definitions, and not just free-standing composite types.")]
[DisplayNameAttribute("Load Table Composites")]
[KdbndpConnectionStringPropertyAttribute]
public bool LoadTableComposites { get; public set; }
    [CategoryAttribute("CursorAsDataRead")]
[DescriptionAttribute("Enables CursorAsDataRead, which allows cursor as DataRead.")]
[DisplayNameAttribute("CursorAsDataRead")]
[KdbndpConnectionStringPropertyAttribute]
[DefaultValueAttribute("False")]
public bool CursorAsDataRead { get; public set; }
    [CategoryAttribute("Compatibility")]
[DescriptionAttribute("A compatibility mode for special KingbaseES server types.")]
[DisplayNameAttribute("Server Compatibility Mode")]
[KdbndpConnectionStringPropertyAttribute]
public ServerCompatibilityMode ServerCompatibilityMode { get; public set; }
    [CategoryAttribute("Compatibility")]
[DescriptionAttribute("Makes MaxValue and MinValue timestamps and dates readable as infinity and negative infinity.")]
[DisplayNameAttribute("Convert Infinity DateTime")]
[KdbndpConnectionStringPropertyAttribute]
public bool ConvertInfinityDateTime { get; public set; }
    [CategoryAttribute("Mysql_support")]
[DescriptionAttribute("Makes mysql support setting")]
[DisplayNameAttribute("ByteAsBool")]
[KdbndpConnectionStringPropertyAttribute]
[DefaultValueAttribute("False")]
public bool ByteAsBoolSet { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Obsolete, see http://www.kdbndp.org/doc/migration/3.1.html")]
[DisplayNameAttribute("Connection Lifetime")]
[KdbndpConnectionStringPropertyAttribute]
[ObsoleteAttribute("The ConnectionLifeTime parameter is no longer supported")]
public int ConnectionLifeTime { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Obsolete, see http://www.kdbndp.org/doc/migration/3.1.html")]
[DisplayNameAttribute("Continuous Processing")]
[KdbndpConnectionStringPropertyAttribute]
[ObsoleteAttribute("The ContinuousProcessing parameter is no longer supported.")]
public bool ContinuousProcessing { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Obsolete, see http://www.kdbndp.org/doc/migration/3.1.html")]
[DisplayNameAttribute("Backend Timeouts")]
[KdbndpConnectionStringPropertyAttribute]
[ObsoleteAttribute("The BackendTimeouts parameter is no longer supported")]
public bool BackendTimeouts { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Obsolete, see http://www.kdbndp.org/doc/migration/3.0.html")]
[DisplayNameAttribute("Preload Reader")]
[KdbndpConnectionStringPropertyAttribute]
[ObsoleteAttribute("The PreloadReader parameter is no longer supported")]
public bool PreloadReader { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Obsolete, see http://www.kdbndp.org/doc/migration/3.0.html")]
[DisplayNameAttribute("Use Extended Types")]
[KdbndpConnectionStringPropertyAttribute]
[ObsoleteAttribute("The UseExtendedTypes parameter is no longer supported")]
public bool UseExtendedTypes { get; public set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public KdbndpConnectionStringBuilder(bool useOdbcRules);
    public KdbndpConnectionStringBuilder(string connectionString);
    private static KdbndpConnectionStringBuilder();
    private void Init();
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public virtual bool Remove(string keyword);
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    private PropertyInfo GetProperty(string keyword);
    public virtual bool TryGetValue(string keyword, Object& value);
    private void SetValue(string propertyName, object value);
    public string get_Host();
    public void set_Host(string value);
    public int get_Port();
    public void set_Port(int value);
    public string get_Database();
    public void set_Database(string value);
    public string get_Username();
    public void set_Username(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_Passfile();
    public void set_Passfile(string value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public bool get_Enlist();
    public void set_Enlist(bool value);
    public string get_SearchPath();
    public void set_SearchPath(string value);
    public string get_ClientEncoding();
    public void set_ClientEncoding(string value);
    public string get_Encoding();
    public void set_Encoding(string value);
    public string get_Timezone();
    public void set_Timezone(string value);
    public SslMode get_SslMode();
    public void set_SslMode(SslMode value);
    public bool get_TrustServerCertificate();
    public void set_TrustServerCertificate(bool value);
    public bool get_CheckCertificateRevocation();
    public void set_CheckCertificateRevocation(bool value);
    public bool get_UseSslStream();
    public void set_UseSslStream(bool value);
    public bool get_IntegratedSecurity();
    public void set_IntegratedSecurity(bool value);
    public string get_KerberosServiceName();
    public void set_KerberosServiceName(string value);
    public bool get_IncludeRealm();
    public void set_IncludeRealm(bool value);
    public bool get_PersistSecurityInfo();
    public void set_PersistSecurityInfo(bool value);
    public bool get_Pooling();
    public void set_Pooling(bool value);
    public int get_MinPoolSize();
    public void set_MinPoolSize(int value);
    public int get_MaxPoolSize();
    public void set_MaxPoolSize(int value);
    public int get_ConnectionIdleLifetime();
    public void set_ConnectionIdleLifetime(int value);
    public int get_ConnectionPruningInterval();
    public void set_ConnectionPruningInterval(int value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public int get_CommandTimeout();
    public void set_CommandTimeout(int value);
    public int get_InternalCommandTimeout();
    public void set_InternalCommandTimeout(int value);
    public string get_EntityTemplateDatabase();
    public void set_EntityTemplateDatabase(string value);
    public string get_EntityAdminDatabase();
    public void set_EntityAdminDatabase(string value);
    public int get_KeepAlive();
    public void set_KeepAlive(int value);
    public bool get_TcpKeepAlive();
    public void set_TcpKeepAlive(bool value);
    public int get_TcpKeepAliveTime();
    public void set_TcpKeepAliveTime(int value);
    public int get_TcpKeepAliveInterval();
    public void set_TcpKeepAliveInterval(int value);
    public int get_ReadBufferSize();
    public void set_ReadBufferSize(int value);
    public int get_WriteBufferSize();
    public void set_WriteBufferSize(int value);
    public int get_SocketReceiveBufferSize();
    public void set_SocketReceiveBufferSize(int value);
    public int get_SocketSendBufferSize();
    public void set_SocketSendBufferSize(int value);
    public int get_MaxAutoPrepare();
    public void set_MaxAutoPrepare(int value);
    public int get_AutoPrepareMinUsages();
    public void set_AutoPrepareMinUsages(int value);
    public bool get_UsePerfCounters();
    public void set_UsePerfCounters(bool value);
    public bool get_NoResetOnClose();
    public void set_NoResetOnClose(bool value);
    public bool get_LoadTableComposites();
    public void set_LoadTableComposites(bool value);
    public bool get_CursorAsDataRead();
    public void set_CursorAsDataRead(bool value);
    public ServerCompatibilityMode get_ServerCompatibilityMode();
    public void set_ServerCompatibilityMode(ServerCompatibilityMode value);
    public bool get_ConvertInfinityDateTime();
    public void set_ConvertInfinityDateTime(bool value);
    public bool get_ByteAsBoolSet();
    public void set_ByteAsBoolSet(bool value);
    public int get_ConnectionLifeTime();
    public void set_ConnectionLifeTime(int value);
    public bool get_ContinuousProcessing();
    public void set_ContinuousProcessing(bool value);
    public bool get_BackendTimeouts();
    public void set_BackendTimeouts(bool value);
    public bool get_PreloadReader();
    public void set_PreloadReader(bool value);
    public bool get_UseExtendedTypes();
    public void set_UseExtendedTypes(bool value);
    internal string ToStringWithoutPassword();
    internal KdbndpConnectionStringBuilder Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    [IteratorStateMachineAttribute("Kdbndp.KdbndpConnectionStringBuilder/<GetEnumerator>d__233")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    protected virtual void GetProperties(Hashtable propertyDescriptors);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Object>.Add(string key, object value);
}
[AttributeUsageAttribute("128")]
[MeansImplicitUseAttribute]
public class Kdbndp.KdbndpConnectionStringPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Synonyms>k__BackingField;
    public String[] Synonyms { get; }
    public KdbndpConnectionStringPropertyAttribute(String[] synonyms);
    [CompilerGeneratedAttribute]
public String[] get_Synonyms();
}
internal class Kdbndp.KdbndpConnector : object {
    private Socket _socket;
    private NetworkStream _baseStream;
    private Stream _stream;
    [CompilerGeneratedAttribute]
private KdbndpConnectionStringBuilder <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private ProvideClientCertificatesCallback <ProvideClientCertificatesCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <UserCertificateValidationCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <TextEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private KdbndpReadBuffer <ReadBuffer>k__BackingField;
    [CanBeNullAttribute]
private KdbndpReadBuffer _origReadBuffer;
    [CompilerGeneratedAttribute]
private KdbndpWriteBuffer <WriteBuffer>k__BackingField;
    private int _backendSecretKey;
    [CompilerGeneratedAttribute]
private int <BackendProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private KdbndpDatabaseInfo <DatabaseInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectorTypeMapper <TypeMapper>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionStatus <TransactionStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private KdbndpTransaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private KdbndpConnection <Connection>k__BackingField;
    private int _pendingPrependedResponses;
    [CanBeNullAttribute]
internal KdbndpDataReader CurrentReader;
    internal PreparedStatementManager PreparedStatementManager;
    [CanBeNullAttribute]
internal ICancelable CurrentCopyOperation;
    internal Dictionary`2<string, string> KingbaseParameters;
    [CompilerGeneratedAttribute]
private int <UserTimeout>k__BackingField;
    private int _currentTimeout;
    [CompilerGeneratedAttribute]
private SqlQueryParser <SqlParser>k__BackingField;
    [CanBeNullAttribute]
private SemaphoreSlim _userLock;
    [CompilerGeneratedAttribute]
private object <CancelLock>k__BackingField;
    private int _keepAlive;
    private bool _isKeepAliveEnabled;
    private Timer _keepAliveTimer;
    [CanBeNullAttribute]
private KdbndpCommand _currentCommand;
    [CompilerGeneratedAttribute]
private DateTime <ReleaseTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClearCounter>k__BackingField;
    private static KdbndpLogger Log;
    internal static int MinimumInternalCommandTimeout;
    internal BindMessage BindMessage;
    internal DescribeMessage DescribeMessage;
    internal CloseMessage CloseMessage;
    internal ParseMessage ParseMessage;
    internal QueryMessage QueryMessage;
    [CanBeNullAttribute]
private PregeneratedMessage _resetWithoutDeallocateMessage;
    private CommandCompleteMessage _commandCompleteMessage;
    private ReadyForQueryMessage _readyForQueryMessage;
    private ParameterDescriptionMessage _parameterDescriptionMessage;
    private DataRowMessage _dataRowMessage;
    private CopyInResponseMessage _copyInResponseMessage;
    private CopyOutResponseMessage _copyOutResponseMessage;
    private CopyDataMessage _copyDataMessage;
    [CompilerGeneratedAttribute]
private KdbndpDefaultDataReader <DefaultDataReader>k__BackingField;
    [CompilerGeneratedAttribute]
private KdbndpSequentialDataReader <SequentialDataReader>k__BackingField;
    private DbMode dbTypeMode;
    private int _state;
    private bool _isConnecting;
    [CompilerGeneratedAttribute]
private bool <IsSecure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseConformantStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Timezone>k__BackingField;
    internal KdbndpConnectionStringBuilder Settings { get; }
    internal string ConnectionString { get; }
    [CanBeNullAttribute]
private ProvideClientCertificatesCallback ProvideClientCertificatesCallback { get; }
    [CanBeNullAttribute]
private RemoteCertificateValidationCallback UserCertificateValidationCallback { get; }
    internal Encoding TextEncoding { get; private set; }
    internal KdbndpReadBuffer ReadBuffer { get; private set; }
    internal KdbndpWriteBuffer WriteBuffer { get; private set; }
    internal int BackendProcessId { get; private set; }
    internal int Id { get; }
    internal KdbndpDatabaseInfo DatabaseInfo { get; private set; }
    internal ConnectorTypeMapper TypeMapper { get; internal set; }
    internal TransactionStatus TransactionStatus { get; internal set; }
    internal KdbndpTransaction Transaction { get; internal set; }
    [CanBeNullAttribute]
internal KdbndpConnection Connection { get; internal set; }
    private int UserTimeout { get; internal set; }
    unknown int ReceiveTimeout {private set; }
    internal SqlQueryParser SqlParser { get; }
    internal object CancelLock { get; }
    internal DateTime ReleaseTimestamp { get; internal set; }
    internal int ClearCounter { get; internal set; }
    internal KdbndpDefaultDataReader DefaultDataReader { get; }
    internal KdbndpSequentialDataReader SequentialDataReader { get; }
    private string Host { get; }
    private int Port { get; }
    private string KerberosServiceName { get; }
    private SslMode SslMode { get; }
    private bool UseSslStream { get; }
    private int ConnectionTimeout { get; }
    private bool IntegratedSecurity { get; }
    internal bool ConvertInfinityDateTime { get; }
    private int InternalCommandTimeout { get; }
    internal ConnectorState State { get; internal set; }
    internal DbMode dbModeType { get; internal set; }
    private bool IsConnected { get; }
    internal bool IsReady { get; }
    internal bool IsClosed { get; }
    internal bool IsBroken { get; }
    internal bool InTransaction { get; }
    internal bool IsSecure { get; private set; }
    internal bool UseConformantStrings { get; private set; }
    internal string Timezone { get; private set; }
    private bool IsRedshift { get; }
    internal KdbndpConnector(KdbndpConnection connection);
    private KdbndpConnector(KdbndpConnector connector);
    private KdbndpConnector(KdbndpConnectionStringBuilder settings, string connectionString);
    private static KdbndpConnector();
    [AsyncStateMachineAttribute("Kdbndp.KdbndpConnector/<Authenticate>d__0")]
private Task Authenticate(string username, KdbndpTimeout timeout, bool async);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpConnector/<AuthenticateCleartext>d__1")]
private Task AuthenticateCleartext(bool async);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpConnector/<AuthenticateSASL>d__2")]
private Task AuthenticateSASL(List`1<string> mechanisms, bool async);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpConnector/<AuthenticateMD5>d__3")]
private Task AuthenticateMD5(string username, Byte[] salt, bool async);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpConnector/<AuthenticateSM3>d__4")]
private Task AuthenticateSM3(string username, Byte[] salt, bool async);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpConnector/<AuthenticateGSS>d__5")]
private Task AuthenticateGSS(bool async);
    [CanBeNullAttribute]
private string GetPassword();
    [CompilerGeneratedAttribute]
internal KdbndpConnectionStringBuilder get_Settings();
    [CompilerGeneratedAttribute]
internal string get_ConnectionString();
    [CompilerGeneratedAttribute]
private ProvideClientCertificatesCallback get_ProvideClientCertificatesCallback();
    [CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback get_UserCertificateValidationCallback();
    [CompilerGeneratedAttribute]
internal Encoding get_TextEncoding();
    [CompilerGeneratedAttribute]
private void set_TextEncoding(Encoding value);
    [CompilerGeneratedAttribute]
internal KdbndpReadBuffer get_ReadBuffer();
    [CompilerGeneratedAttribute]
private void set_ReadBuffer(KdbndpReadBuffer value);
    [CompilerGeneratedAttribute]
internal KdbndpWriteBuffer get_WriteBuffer();
    [CompilerGeneratedAttribute]
private void set_WriteBuffer(KdbndpWriteBuffer value);
    [CompilerGeneratedAttribute]
internal int get_BackendProcessId();
    [CompilerGeneratedAttribute]
private void set_BackendProcessId(int value);
    internal int get_Id();
    [CompilerGeneratedAttribute]
internal KdbndpDatabaseInfo get_DatabaseInfo();
    [CompilerGeneratedAttribute]
private void set_DatabaseInfo(KdbndpDatabaseInfo value);
    [CompilerGeneratedAttribute]
internal ConnectorTypeMapper get_TypeMapper();
    [CompilerGeneratedAttribute]
internal void set_TypeMapper(ConnectorTypeMapper value);
    [CompilerGeneratedAttribute]
internal TransactionStatus get_TransactionStatus();
    [CompilerGeneratedAttribute]
internal void set_TransactionStatus(TransactionStatus value);
    [CompilerGeneratedAttribute]
internal KdbndpTransaction get_Transaction();
    [CompilerGeneratedAttribute]
internal void set_Transaction(KdbndpTransaction value);
    [CompilerGeneratedAttribute]
internal KdbndpConnection get_Connection();
    [CompilerGeneratedAttribute]
internal void set_Connection(KdbndpConnection value);
    [CompilerGeneratedAttribute]
private int get_UserTimeout();
    [CompilerGeneratedAttribute]
internal void set_UserTimeout(int value);
    private void set_ReceiveTimeout(int value);
    [CompilerGeneratedAttribute]
internal SqlQueryParser get_SqlParser();
    [CompilerGeneratedAttribute]
internal object get_CancelLock();
    [CompilerGeneratedAttribute]
internal DateTime get_ReleaseTimestamp();
    [CompilerGeneratedAttribute]
internal void set_ReleaseTimestamp(DateTime value);
    [CompilerGeneratedAttribute]
internal int get_ClearCounter();
    [CompilerGeneratedAttribute]
internal void set_ClearCounter(int value);
    [CompilerGeneratedAttribute]
internal KdbndpDefaultDataReader get_DefaultDataReader();
    [CompilerGeneratedAttribute]
internal KdbndpSequentialDataReader get_SequentialDataReader();
    private string get_Host();
    private int get_Port();
    private string get_KerberosServiceName();
    private SslMode get_SslMode();
    private bool get_UseSslStream();
    private int get_ConnectionTimeout();
    private bool get_IntegratedSecurity();
    internal bool get_ConvertInfinityDateTime();
    private int get_InternalCommandTimeout();
    internal ConnectorState get_State();
    internal void set_State(ConnectorState value);
    internal DbMode get_dbModeType();
    internal void set_dbModeType(DbMode value);
    private bool get_IsConnected();
    internal bool get_IsReady();
    internal bool get_IsClosed();
    internal bool get_IsBroken();
    [AsyncStateMachineAttribute("Kdbndp.KdbndpConnector/<Open>d__154")]
internal Task Open(KdbndpTimeout timeout, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpConnector/<LoadDatabaseInfo>d__155")]
internal Task LoadDatabaseInfo(KdbndpTimeout timeout, bool async);
    private void WriteStartupMessage(string username);
    private string GetUsername();
    [AsyncStateMachineAttribute("Kdbndp.KdbndpConnector/<RawOpen>d__158")]
private Task RawOpen(KdbndpTimeout timeout, bool async, CancellationToken cancellationToken);
    private void Connect(KdbndpTimeout timeout);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpConnector/<ConnectAsync>d__160")]
private Task ConnectAsync(KdbndpTimeout timeout, CancellationToken cancellationToken);
    private void SetSocketOptions(Socket socket);
    internal void PrependInternalMessage(FrontendMessage msg);
    internal void SendQuery(string query);
    internal void SendMessage(FrontendMessage message);
    internal IBackendMessage ReadMessage(DataRowLoadingMode dataRowLoadingMode);
    [ItemCanBeNullAttribute]
internal ValueTask`1<IBackendMessage> ReadMessage(bool async, DataRowLoadingMode dataRowLoadingMode, bool readingNotifications);
    [CanBeNullAttribute]
internal IBackendMessage ParseServerMessage(KdbndpReadBuffer buf, BackendMessageCode code, int len, bool isPrependedMessage);
    internal IBackendMessage SkipUntil(BackendMessageCode stopAt);
    internal Task Rollback(bool async);
    internal bool get_InTransaction();
    private void ProcessNewTransactionStatus(TransactionStatus newStatus);
    private void ClearTransaction();
    [CompilerGeneratedAttribute]
internal bool get_IsSecure();
    [CompilerGeneratedAttribute]
private void set_IsSecure(bool value);
    private static bool DefaultUserCertificateValidationCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    internal void CancelRequest();
    private void DoCancelRequest(int backendProcessId, int backendSecretKey);
    internal void CloseOngoingOperations();
    internal void Close();
    public sealed virtual void Dispose();
    internal Exception UnexpectedMessageReceived(BackendMessageCode received);
    internal void Break();
    private void Cleanup();
    private void GenerateResetMessage();
    internal void Reset();
    internal void UnprepareAll();
    internal UserAction StartUserAction(KdbndpCommand command);
    internal UserAction StartUserAction(ConnectorState newState, KdbndpCommand command);
    internal void EndUserAction();
    private void PerformKeepAlive(object state);
    public bool Wait(int timeout);
    public Task WaitAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpConnector/<DoWaitAsync>d__197")]
private Task DoWaitAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal bool get_UseConformantStrings();
    [CompilerGeneratedAttribute]
private void set_UseConformantStrings(bool value);
    [CompilerGeneratedAttribute]
internal string get_Timezone();
    [CompilerGeneratedAttribute]
private void set_Timezone(string value);
    private bool get_IsRedshift();
    internal void ExecuteInternalCommand(string query);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpConnector/<ExecuteInternalCommand>d__209")]
internal Task ExecuteInternalCommand(FrontendMessage message, bool async);
    private void HandleParameterStatus(string name, string value);
    [CompilerGeneratedAttribute]
internal static string <AuthenticateSASL>g__GetNonce|2_0();
    [CompilerGeneratedAttribute]
private IPEndPoint <Connect>b__159_0(IPAddress a);
    [CompilerGeneratedAttribute]
private IPEndPoint <ConnectAsync>b__160_0(IPAddress a);
    [CompilerGeneratedAttribute]
private UserAction <StartUserAction>g__DoStartUserAction|191_0(<>c__DisplayClass191_0& );
}
public class Kdbndp.KdbndpCopyTextReader : StreamReader {
    internal KdbndpCopyTextReader(KdbndpRawCopyStream underlying);
    public sealed virtual void Cancel();
}
public class Kdbndp.KdbndpCopyTextWriter : StreamWriter {
    internal KdbndpCopyTextWriter(KdbndpRawCopyStream underlying);
    public sealed virtual void Cancel();
}
[DesignerCategoryAttribute("")]
public class Kdbndp.KdbndpDataAdapter : DbDataAdapter {
    [CompilerGeneratedAttribute]
private KdbndpRowUpdatedEventHandler RowUpdated;
    [CompilerGeneratedAttribute]
private KdbndpRowUpdatingEventHandler RowUpdating;
    public KdbndpCommand DeleteCommand { get; public set; }
    public KdbndpCommand SelectCommand { get; public set; }
    public KdbndpCommand UpdateCommand { get; public set; }
    public KdbndpCommand InsertCommand { get; public set; }
    public KdbndpDataAdapter(KdbndpCommand selectCommand);
    public KdbndpDataAdapter(string selectCommandText, KdbndpConnection selectConnection);
    public KdbndpDataAdapter(string selectCommandText, string selectConnectionString);
    [CompilerGeneratedAttribute]
public void add_RowUpdated(KdbndpRowUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowUpdated(KdbndpRowUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_RowUpdating(KdbndpRowUpdatingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowUpdating(KdbndpRowUpdatingEventHandler value);
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    public KdbndpCommand get_DeleteCommand();
    public void set_DeleteCommand(KdbndpCommand value);
    public KdbndpCommand get_SelectCommand();
    public void set_SelectCommand(KdbndpCommand value);
    public KdbndpCommand get_UpdateCommand();
    public void set_UpdateCommand(KdbndpCommand value);
    public KdbndpCommand get_InsertCommand();
    public void set_InsertCommand(KdbndpCommand value);
    public int Fill(DataSet dataSet);
}
public abstract class Kdbndp.KdbndpDatabaseInfo : object {
    internal static ConcurrentDictionary`2<string, KdbndpDatabaseInfo> Cache;
    private static List`1<IKdbndpDatabaseInfoFactory> Factories;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasIntegerDateTimes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsTransactions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<KingbaseBaseType> <BaseTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<KingbaseArrayType> <ArrayTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<KingbaseRangeType> <RangeTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<KingbaseEnumType> <EnumTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<KingbaseCompositeType> <CompositeTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<KingbaseDomainType> <DomainTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<UInt32, KingbaseType> <ByOID>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, KingbaseType> <ByFullName>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, KingbaseType> <ByName>k__BackingField;
    public string Host { get; protected set; }
    public int Port { get; protected set; }
    public string Name { get; protected set; }
    public Version Version { get; protected set; }
    public bool SupportsRangeTypes { get; }
    public bool SupportsEnumTypes { get; }
    public bool SupportsCloseAll { get; }
    public bool SupportsAdvisoryLocks { get; }
    public bool SupportsDiscardSequences { get; }
    public bool SupportsUnlisten { get; }
    public bool SupportsDiscardTemp { get; }
    public bool SupportsDiscard { get; }
    public bool HasIntegerDateTimes { get; protected set; }
    public bool SupportsTransactions { get; protected set; }
    internal IReadOnlyList`1<KingbaseBaseType> BaseTypes { get; private set; }
    internal IReadOnlyList`1<KingbaseArrayType> ArrayTypes { get; private set; }
    internal IReadOnlyList`1<KingbaseRangeType> RangeTypes { get; private set; }
    internal IReadOnlyList`1<KingbaseEnumType> EnumTypes { get; private set; }
    internal IReadOnlyList`1<KingbaseCompositeType> CompositeTypes { get; private set; }
    internal IReadOnlyList`1<KingbaseDomainType> DomainTypes { get; private set; }
    internal Dictionary`2<UInt32, KingbaseType> ByOID { get; }
    internal Dictionary`2<string, KingbaseType> ByFullName { get; }
    internal Dictionary`2<string, KingbaseType> ByName { get; }
    private static KdbndpDatabaseInfo();
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
protected void set_Host(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
protected void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
protected void set_Version(Version value);
    public virtual bool get_SupportsRangeTypes();
    public virtual bool get_SupportsEnumTypes();
    public virtual bool get_SupportsCloseAll();
    public virtual bool get_SupportsAdvisoryLocks();
    public virtual bool get_SupportsDiscardSequences();
    public virtual bool get_SupportsUnlisten();
    public virtual bool get_SupportsDiscardTemp();
    public virtual bool get_SupportsDiscard();
    [CompilerGeneratedAttribute]
public virtual bool get_HasIntegerDateTimes();
    [CompilerGeneratedAttribute]
protected virtual void set_HasIntegerDateTimes(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_SupportsTransactions();
    [CompilerGeneratedAttribute]
protected virtual void set_SupportsTransactions(bool value);
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<KingbaseBaseType> get_BaseTypes();
    [CompilerGeneratedAttribute]
private void set_BaseTypes(IReadOnlyList`1<KingbaseBaseType> value);
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<KingbaseArrayType> get_ArrayTypes();
    [CompilerGeneratedAttribute]
private void set_ArrayTypes(IReadOnlyList`1<KingbaseArrayType> value);
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<KingbaseRangeType> get_RangeTypes();
    [CompilerGeneratedAttribute]
private void set_RangeTypes(IReadOnlyList`1<KingbaseRangeType> value);
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<KingbaseEnumType> get_EnumTypes();
    [CompilerGeneratedAttribute]
private void set_EnumTypes(IReadOnlyList`1<KingbaseEnumType> value);
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<KingbaseCompositeType> get_CompositeTypes();
    [CompilerGeneratedAttribute]
private void set_CompositeTypes(IReadOnlyList`1<KingbaseCompositeType> value);
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<KingbaseDomainType> get_DomainTypes();
    [CompilerGeneratedAttribute]
private void set_DomainTypes(IReadOnlyList`1<KingbaseDomainType> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<UInt32, KingbaseType> get_ByOID();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, KingbaseType> get_ByFullName();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, KingbaseType> get_ByName();
    internal void ProcessTypes();
    protected abstract virtual IEnumerable`1<KingbaseType> GetTypes();
    protected static Version ParseServerVersion(string value);
    public static void RegisterFactory(IKdbndpDatabaseInfoFactory factory);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpDatabaseInfo/<Load>d__79")]
internal static Task`1<KdbndpDatabaseInfo> Load(KdbndpConnection conn, KdbndpTimeout timeout, bool async);
    internal static void ResetFactories();
}
[DefaultMemberAttribute("Item")]
public abstract class Kdbndp.KdbndpDataReader : DbDataReader {
    [CompilerGeneratedAttribute]
private KdbndpCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private KdbndpConnector <Connector>k__BackingField;
    private KdbndpConnection _connection;
    protected CommandBehavior Behavior;
    private Task _sendTask;
    internal ReaderState State;
    public bool Data_flag;
    internal KdbndpReadBuffer Buffer;
    internal int row_num;
    private List`1<KdbndpStatement> _statements;
    [CompilerGeneratedAttribute]
private int <StatementIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PB_ReadOver>k__BackingField;
    internal int ColumnLen;
    internal int PosInColumn;
    private int _charPos;
    [CanBeNullAttribute]
internal RowDescriptionMessage RowDescription;
    internal RowDescriptionMessage RowDescription_BP;
    private Nullable`1<UInt32> _recordsAffected;
    private bool _hasRows;
    [CompilerGeneratedAttribute]
private EventHandler ReaderClosed;
    [CanBeNullAttribute]
private protected ColumnStream ColumnStream;
    [CanBeNullAttribute]
private Char[] _tempCharBuf;
    private static KdbndpLogger Log;
    internal KdbndpCommand Command { get; private set; }
    internal KdbndpConnector Connector { get; }
    internal int StatementIndex { get; private set; }
    internal bool PB_ReadOver { get; private set; }
    private bool IsSchemaOnly { get; }
    private bool IsSequential { get; }
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public IReadOnlyList`1<KdbndpStatement> Statements { get; }
    public bool HasRows { get; }
    [PublicAPIAttribute]
public bool IsOnRow { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    internal KdbndpDataReader(KdbndpConnector connector);
    private static KdbndpDataReader();
    [CompilerGeneratedAttribute]
internal KdbndpCommand get_Command();
    [CompilerGeneratedAttribute]
private void set_Command(KdbndpCommand value);
    [CompilerGeneratedAttribute]
internal KdbndpConnector get_Connector();
    [CompilerGeneratedAttribute]
internal int get_StatementIndex();
    [CompilerGeneratedAttribute]
private void set_StatementIndex(int value);
    [CompilerGeneratedAttribute]
internal bool get_PB_ReadOver();
    [CompilerGeneratedAttribute]
private void set_PB_ReadOver(bool value);
    [CompilerGeneratedAttribute]
public void add_ReaderClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ReaderClosed(EventHandler value);
    private bool get_IsSchemaOnly();
    private bool get_IsSequential();
    internal void Init(KdbndpCommand command, CommandBehavior behavior, List`1<KdbndpStatement> statements, Task sendTask);
    public virtual bool Read();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    private Task`1<bool> Read(bool async);
    internal void ProcessMessage(IBackendMessage msg);
    internal abstract virtual ValueTask`1<IBackendMessage> ReadMessage(bool async);
    internal abstract virtual void ProcessDataMessage(DataRowMessage dataMsg);
    internal abstract virtual Task SeekToColumn(int column, bool async);
    internal abstract virtual Task SeekInColumn(int posInColumn, bool async);
    internal abstract virtual Task ConsumeRow(bool async);
    public sealed virtual bool NextResult();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpDataReader/<NextResult>d__53")]
private Task`1<bool> NextResult(bool async, bool isConsuming);
    private void PopulateOutputParameters();
    private KdbndpDataReader GetDataReaderWithCursor(int index);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpDataReader/<NextResultSchemaOnly>d__56")]
private Task`1<bool> NextResultSchemaOnly(bool async);
    public virtual int get_Depth();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public IReadOnlyList`1<KdbndpStatement> get_Statements();
    public virtual bool get_HasRows();
    public bool get_IsOnRow();
    public virtual string GetName(int ordinal);
    public virtual int get_FieldCount();
    [AsyncStateMachineAttribute("Kdbndp.KdbndpDataReader/<Consume>d__72")]
private Task Consume(bool async);
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    public Task CloseAsync();
    [AsyncStateMachineAttribute("Kdbndp.KdbndpDataReader/<Close>d__76")]
internal Task Close(bool connectionClosing, bool async);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpDataReader/<Cleanup>d__77")]
internal Task Cleanup(bool async, bool connectionClosing);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public sbyte GetSByte(int ordinal);
    public virtual char GetChar(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public UInt32 GetUInt32(int ordinal);
    public ulong GetUInt64(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual int GetValues(Object[] values);
    public object StringToUserType(object result, FieldDescription fieldDescription);
    private KdbndpDbColumn SetUpNonColumnField(FieldDescription field);
    private void ColumnPostConfig(KdbndpDbColumn column, int typeModifier);
    public virtual object get_Item(int ordinal);
    public KdbndpDate GetDate(int ordinal);
    public TimeSpan GetTimeSpan(int ordinal);
    public KdbndpTimeSpan GetInterval(int ordinal);
    public KdbndpIntervalDS GetIntervalDS(int ordinal);
    public KdbndpIntervalYM GetIntervalYM(int ordinal);
    public KdbndpDateTime GetTimeStamp(int ordinal);
    public KdbndpDateTime GetMysqlTimeStamp(int ordinal);
    public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual Stream GetStream(int ordinal);
    public Task`1<Stream> GetStreamAsync(int ordinal);
    private ValueTask`1<Stream> GetStream(int ordinal, bool async);
    private ValueTask`1<Stream> GetStreamInternal(int ordinal, bool async);
    public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    private ValueTuple`2<int, int> DecodeChars(Decoder decoder, Char[] output, int outputOffset, int charCount, int byteCount);
    internal ValueTuple`2<int, int> SkipChars(Decoder decoder, int charCount, int byteCount);
    public virtual TextReader GetTextReader(int ordinal);
    public Task`1<TextReader> GetTextReaderAsync(int ordinal);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpDataReader/<GetTextReader>d__120")]
private ValueTask`1<TextReader> GetTextReader(int ordinal, bool async);
    public virtual object get_Item(string name);
    public virtual int GetOrdinal(string name);
    [PublicAPIAttribute]
public KingbaseType GetKingbaseType(int ordinal);
    public virtual string GetDataTypeName(int ordinal);
    public UInt32 GetDataTypeOID(int ordinal);
    [NotNullAttribute]
public virtual Type GetFieldType(int ordinal);
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual IEnumerator GetEnumerator();
    public ReadOnlyCollection`1<KdbndpDbColumn> GetColumnSchema();
    private sealed virtual override ReadOnlyCollection`1<DbColumn> System.Data.Common.IDbColumnSchemaGenerator.GetColumnSchema();
    [CanBeNullAttribute]
public virtual DataTable GetSchemaTable();
    internal void CheckRowAndOrdinal(int ordinal);
    private void CheckRow();
    internal void CheckColumn(int column);
    private void CheckResultSet();
    [AsyncStateMachineAttribute("Kdbndp.KdbndpDataReader/<<GetStreamInternal>g__GetStreamLong|114_0>d")]
[CompilerGeneratedAttribute]
private Task`1<Stream> <GetStreamInternal>g__GetStreamLong|114_0(Task seekTask);
}
internal class Kdbndp.KdbndpDefaultDataReader : KdbndpDataReader {
    private int _column;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<int, int>> _columns;
    private int _dataMsgEnd;
    internal KdbndpDefaultDataReader(KdbndpConnector connector);
    internal virtual ValueTask`1<IBackendMessage> ReadMessage(bool async);
    internal virtual Task ConsumeRow(bool async);
    internal virtual void ProcessDataMessage(DataRowMessage dataMsg);
    public virtual Task`1<T> GetFieldValueAsync(int column, CancellationToken cancellationToken);
    public virtual T GetFieldValue(int column);
    public virtual object GetValue(int ordinal);
    public virtual object GetProviderSpecificValue(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    private void SeekToColumn(int column);
    internal virtual Task SeekToColumn(int column, bool async);
    internal virtual Task SeekInColumn(int posInColumn, bool async);
}
public class Kdbndp.KdbndpException : DbException {
    public bool IsTransient { get; }
    public KdbndpException(string message, Exception innerException);
    public KdbndpException(string message);
    protected internal KdbndpException(SerializationInfo info, StreamingContext context);
    public virtual bool get_IsTransient();
}
public class Kdbndp.KdbndpFactory : DbProviderFactory {
    private static KdbndpLogger Log;
    public static KdbndpFactory Instance;
    [CanBeNullAttribute]
private static object _legacyEntityFrameworkServices;
    private static KdbndpFactory();
    [NotNullAttribute]
public virtual DbCommand CreateCommand();
    [NotNullAttribute]
public virtual DbConnection CreateConnection();
    [NotNullAttribute]
public virtual DbParameter CreateParameter();
    [NotNullAttribute]
public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    [NotNullAttribute]
public virtual DbCommandBuilder CreateCommandBuilder();
    [NotNullAttribute]
public virtual DbDataAdapter CreateDataAdapter();
    [CanBeNullAttribute]
public sealed virtual object GetService(Type serviceType);
}
public class Kdbndp.KdbndpLargeObjectManager : object {
    private static int INV_WRITE;
    private static int INV_READ;
    internal KdbndpConnection _connection;
    [CompilerGeneratedAttribute]
private int <MaxTransferBlockSize>k__BackingField;
    public int MaxTransferBlockSize { get; public set; }
    public bool Has64BitSupport { get; }
    public KdbndpLargeObjectManager(KdbndpConnection connection);
    [CompilerGeneratedAttribute]
public int get_MaxTransferBlockSize();
    [CompilerGeneratedAttribute]
public void set_MaxTransferBlockSize(int value);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpLargeObjectManager/<ExecuteFunction>d__8`1")]
internal Task`1<T> ExecuteFunction(string function, bool async, Object[] arguments);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpLargeObjectManager/<ExecuteFunctionGetBytes>d__9")]
internal Task`1<int> ExecuteFunctionGetBytes(string function, Byte[] buffer, int offset, int len, bool async, Object[] arguments);
    public UInt32 Create(UInt32 preferredOid);
    public Task`1<UInt32> CreateAsync(UInt32 preferredOid, CancellationToken cancellationToken);
    private Task`1<UInt32> Create(UInt32 preferredOid, bool async);
    public KdbndpLargeObjectStream OpenRead(UInt32 oid);
    public Task`1<KdbndpLargeObjectStream> OpenReadAsync(UInt32 oid, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpLargeObjectManager/<OpenRead>d__15")]
private Task`1<KdbndpLargeObjectStream> OpenRead(UInt32 oid, bool async);
    public KdbndpLargeObjectStream OpenReadWrite(UInt32 oid);
    public Task`1<KdbndpLargeObjectStream> OpenReadWriteAsync(UInt32 oid, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpLargeObjectManager/<OpenReadWrite>d__18")]
private Task`1<KdbndpLargeObjectStream> OpenReadWrite(UInt32 oid, bool async);
    public void Unlink(UInt32 oid);
    public Task UnlinkAsync(UInt32 oid, CancellationToken cancellationToken);
    public void ExportRemote(UInt32 oid, string path);
    public Task ExportRemoteAsync(UInt32 oid, string path, CancellationToken cancellationToken);
    public void ImportRemote(string path, UInt32 oid);
    public Task ImportRemoteAsync(string path, UInt32 oid, CancellationToken cancellationToken);
    public bool get_Has64BitSupport();
}
public class Kdbndp.KdbndpLargeObjectStream : Stream {
    private KdbndpLargeObjectManager _manager;
    private int _fd;
    private long _pos;
    private bool _writeable;
    private bool _disposed;
    public bool Has64BitSupport { get; }
    public bool CanTimeout { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Position { get; public set; }
    public long Length { get; }
    internal KdbndpLargeObjectStream(KdbndpLargeObjectManager manager, int fd, bool writeable);
    private void CheckDisposed();
    public bool get_Has64BitSupport();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpLargeObjectStream/<Read>d__11")]
private Task`1<int> Read(Byte[] buffer, int offset, int count, bool async);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpLargeObjectStream/<Write>d__14")]
private Task Write(Byte[] buffer, int offset, int count, bool async);
    public virtual bool get_CanTimeout();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    public Task`1<long> GetLengthAsync();
    [AsyncStateMachineAttribute("Kdbndp.KdbndpLargeObjectStream/<GetLength>d__29")]
private Task`1<long> GetLength(bool async);
    public virtual long Seek(long offset, SeekOrigin origin);
    public Task`1<long> SeekAsync(long offset, SeekOrigin origin, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpLargeObjectStream/<Seek>d__32")]
private Task`1<long> Seek(long offset, SeekOrigin origin, bool async);
    public virtual void Flush();
    public virtual void SetLength(long value);
    public Task SetLength(long value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpLargeObjectStream/<SetLength>d__36")]
private Task SetLength(long value, bool async);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
}
public class Kdbndp.KdbndpLengthCache : object {
    internal bool IsPopulated;
    internal int Position;
    internal List`1<int> Lengths;
    internal KdbndpLengthCache(int capacity);
    public int Set(int len);
    public int Get();
    internal int GetLast();
    internal void Rewind();
    internal void Clear();
}
public class Kdbndp.KdbndpNoticeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private KingbaseNotice <Notice>k__BackingField;
    public KingbaseNotice Notice { get; }
    internal KdbndpNoticeEventArgs(KingbaseNotice notice);
    [CompilerGeneratedAttribute]
public KingbaseNotice get_Notice();
}
public class Kdbndp.KdbndpNotificationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <PID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalInformation>k__BackingField;
    public int PID { get; }
    public string Condition { get; }
    public string AdditionalInformation { get; }
    internal KdbndpNotificationEventArgs(KdbndpReadBuffer buf);
    [CompilerGeneratedAttribute]
public int get_PID();
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public string get_AdditionalInformation();
}
public class Kdbndp.KdbndpOperationInProgressException : InvalidOperationException {
    [CompilerGeneratedAttribute]
private KdbndpCommand <CommandInProgress>k__BackingField;
    public KdbndpCommand CommandInProgress { get; }
    internal KdbndpOperationInProgressException(KdbndpCommand command);
    internal KdbndpOperationInProgressException(ConnectorState state);
    [CompilerGeneratedAttribute]
public KdbndpCommand get_CommandInProgress();
}
public class Kdbndp.KdbndpParameter : DbParameter {
    private byte _precision;
    private byte _scale;
    private int _size;
    internal Nullable`1<KdbndpDbType> _kdbndpDbType;
    internal Nullable`1<DbType> _dbType;
    [CanBeNullAttribute]
internal string _dataTypeName;
    [CanBeNullAttribute]
private Type _specificType;
    private string _name;
    [CanBeNullAttribute]
private object _value;
    [CompilerGeneratedAttribute]
private string <TrimmedName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ConvertedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private KdbndpLengthCache <LengthCache>k__BackingField;
    [CompilerGeneratedAttribute]
private KdbndpTypeHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private FormatCode <FormatCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <bBegin_end>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private DataRowVersion <SourceVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceColumnNullMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private KdbndpParameterCollection <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private KingbaseType <KingbaseType>k__BackingField;
    internal string TrimmedName { get; private set; }
    public object ConvertedValue { get; public set; }
    [CanBeNullAttribute]
internal KdbndpLengthCache LengthCache { get; internal set; }
    [CanBeNullAttribute]
internal KdbndpTypeHandler Handler { get; internal set; }
    internal FormatCode FormatCode { get; private set; }
    internal bool bBegin_end { get; internal set; }
    [DefaultValueAttribute("")]
public string ParameterName { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.StringConverter")]
[CategoryAttribute("Data")]
[CanBeNullAttribute]
public object Value { get; public set; }
    [CategoryAttribute("Data")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[CanBeNullAttribute]
public object KdbndpValue { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
[RefreshPropertiesAttribute("1")]
public DbType DbType { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
[RefreshPropertiesAttribute("1")]
[DbProviderSpecificTypePropertyAttribute("True")]
public KdbndpDbType KdbndpDbType { get; public set; }
    [PublicAPIAttribute]
[CanBeNullAttribute]
public string DataTypeName { get; public set; }
    public bool IsNullable { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
public ParameterDirection Direction { get; public set; }
    [DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
public byte Precision { get; public set; }
    [DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
public byte Scale { get; public set; }
    [DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
public int Size { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public string SourceColumn { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataRowVersion SourceVersion { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    [CanBeNullAttribute]
public KdbndpParameterCollection Collection { get; public set; }
    public KingbaseType KingbaseType { get; internal set; }
    internal bool IsTypeExplicitlySet { get; }
    internal bool IsInputDirection { get; }
    internal bool IsOutputDirection { get; }
    internal bool IsInputDirection_ora { get; }
    internal bool IsOutputDirection_ora { get; }
    internal bool IsInOutputDirection_ora { get; }
    public KdbndpParameter(string parameterName, object value);
    public KdbndpParameter(string parameterName, KdbndpDbType parameterType);
    public KdbndpParameter(string parameterName, DbType parameterType);
    public KdbndpParameter(string parameterName, KdbndpDbType parameterType, int size);
    public KdbndpParameter(string parameterName, DbType parameterType, int size);
    public KdbndpParameter(string parameterName, KdbndpDbType parameterType, int size, string sourceColumn);
    public KdbndpParameter(string parameterName, DbType parameterType, int size, string sourceColumn);
    public KdbndpParameter(string parameterName, KdbndpDbType parameterType, int size, string sourceColumn, ParameterDirection direction, bool isNullable, byte precision, byte scale, DataRowVersion sourceVersion, object value);
    public KdbndpParameter(string parameterName, DbType parameterType, int size, string sourceColumn, ParameterDirection direction, bool isNullable, byte precision, byte scale, DataRowVersion sourceVersion, object value);
    [CompilerGeneratedAttribute]
internal string get_TrimmedName();
    [CompilerGeneratedAttribute]
private void set_TrimmedName(string value);
    [CompilerGeneratedAttribute]
public object get_ConvertedValue();
    [CompilerGeneratedAttribute]
public void set_ConvertedValue(object value);
    [CompilerGeneratedAttribute]
internal KdbndpLengthCache get_LengthCache();
    [CompilerGeneratedAttribute]
internal void set_LengthCache(KdbndpLengthCache value);
    [CompilerGeneratedAttribute]
internal KdbndpTypeHandler get_Handler();
    [CompilerGeneratedAttribute]
internal void set_Handler(KdbndpTypeHandler value);
    [CompilerGeneratedAttribute]
internal FormatCode get_FormatCode();
    [CompilerGeneratedAttribute]
private void set_FormatCode(FormatCode value);
    [CompilerGeneratedAttribute]
internal bool get_bBegin_end();
    [CompilerGeneratedAttribute]
internal void set_bBegin_end(bool value);
    public sealed virtual string get_ParameterName();
    public sealed virtual void set_ParameterName(string value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public object get_KdbndpValue();
    public void set_KdbndpValue(object value);
    public sealed virtual DbType get_DbType();
    public sealed virtual void set_DbType(DbType value);
    public KdbndpDbType get_KdbndpDbType();
    public void set_KdbndpDbType(KdbndpDbType value);
    public string get_DataTypeName();
    public void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ParameterDirection get_Direction();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Direction(ParameterDirection value);
    public sealed virtual byte get_Precision();
    public sealed virtual void set_Precision(byte value);
    public sealed virtual byte get_Scale();
    public sealed virtual void set_Scale(byte value);
    public sealed virtual int get_Size();
    public sealed virtual void set_Size(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceColumn();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceColumn(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DataRowVersion get_SourceVersion();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceVersion(DataRowVersion value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SourceColumnNullMapping();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceColumnNullMapping(bool value);
    [CompilerGeneratedAttribute]
public KdbndpParameterCollection get_Collection();
    [CompilerGeneratedAttribute]
public void set_Collection(KdbndpParameterCollection value);
    [CompilerGeneratedAttribute]
public KingbaseType get_KingbaseType();
    [CompilerGeneratedAttribute]
internal void set_KingbaseType(KingbaseType value);
    internal bool get_IsTypeExplicitlySet();
    internal virtual void ResolveHandler(ConnectorTypeMapper typeMapper);
    internal void Bind(ConnectorTypeMapper typeMapper);
    internal virtual int ValidateAndGetLength();
    internal virtual Task WriteWithLength(KdbndpWriteBuffer buf, bool async);
    public virtual void ResetDbType();
    internal bool get_IsInputDirection();
    internal bool get_IsOutputDirection();
    internal bool get_IsInputDirection_ora();
    internal bool get_IsOutputDirection_ora();
    internal bool get_IsInOutputDirection_ora();
    public KdbndpParameter Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
public class Kdbndp.KdbndpParameter`1 : KdbndpParameter {
    [CompilerGeneratedAttribute]
private T <TypedValue>k__BackingField;
    public T TypedValue { get; public set; }
    public object Value { get; public set; }
    public KdbndpParameter`1(string parameterName, T value);
    public KdbndpParameter`1(string parameterName, KdbndpDbType kdbndpDbType);
    public KdbndpParameter`1(string parameterName, DbType dbType);
    [CompilerGeneratedAttribute]
public T get_TypedValue();
    [CompilerGeneratedAttribute]
public void set_TypedValue(T value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    internal virtual void ResolveHandler(ConnectorTypeMapper typeMapper);
    internal virtual int ValidateAndGetLength();
    internal virtual Task WriteWithLength(KdbndpWriteBuffer buf, bool async);
}
[DefaultMemberAttribute("Item")]
public class Kdbndp.KdbndpParameterCollection : DbParameterCollection {
    private List`1<KdbndpParameter> _internalList;
    [CanBeNullAttribute]
private Dictionary`2<string, int> _lookup;
    [CanBeNullAttribute]
private Dictionary`2<string, int> _lookupIgnoreCase;
    [PublicAPIAttribute]
public KdbndpParameter Item { get; public set; }
    [PublicAPIAttribute]
public KdbndpParameter Item { get; public set; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<Kdbndp.KdbndpParameter>.IsReadOnly { get; }
    public object SyncRoot { get; }
    internal bool HasOutputParameters { get; }
    internal void InvalidateHashLookups();
    public KdbndpParameter get_Item(string parameterName);
    public void set_Item(string parameterName, KdbndpParameter value);
    public sealed virtual KdbndpParameter get_Item(int index);
    public sealed virtual void set_Item(int index, KdbndpParameter value);
    public KdbndpParameter Add(KdbndpParameter value);
    private sealed virtual override void System.Collections.Generic.ICollection<Kdbndp.KdbndpParameter>.Add(KdbndpParameter item);
    [PublicAPIAttribute]
public KdbndpParameter AddWithValue(string parameterName, object value);
    [PublicAPIAttribute]
public KdbndpParameter AddWithValue(string parameterName, KdbndpDbType parameterType, object value);
    [PublicAPIAttribute]
public KdbndpParameter AddWithValue(string parameterName, KdbndpDbType parameterType, int size, object value);
    [PublicAPIAttribute]
public KdbndpParameter AddWithValue(string parameterName, KdbndpDbType parameterType, int size, string sourceColumn, object value);
    [PublicAPIAttribute]
public KdbndpParameter AddWithValue(object value);
    [PublicAPIAttribute]
public KdbndpParameter AddWithValue(KdbndpDbType parameterType, object value);
    [PublicAPIAttribute]
public KdbndpParameter Add(string parameterName, KdbndpDbType parameterType);
    [PublicAPIAttribute]
public KdbndpParameter Add(string parameterName, KdbndpDbType parameterType, int size);
    [PublicAPIAttribute]
public KdbndpParameter Add(string parameterName, KdbndpDbType parameterType, int size, string sourceColumn);
    [PublicAPIAttribute]
public virtual void RemoveAt(string parameterName);
    public virtual bool Contains(string parameterName);
    public virtual int IndexOf(string parameterName);
    public virtual bool get_IsReadOnly();
    public virtual void RemoveAt(int index);
    public virtual void Insert(int index, object value);
    [PublicAPIAttribute]
public void Remove(string parameterName);
    public virtual void Remove(object value);
    public virtual bool Contains(object value);
    [ContractAnnotationAttribute("=>true,parameter:notnull; =>false,parameter:null")]
public bool TryGetValue(string parameterName, KdbndpParameter& parameter);
    public virtual void Clear();
    public virtual int IndexOf(object value);
    public virtual int Add(object value);
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsSynchronized();
    public virtual int get_Count();
    public virtual void CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.Generic.ICollection<Kdbndp.KdbndpParameter>.get_IsReadOnly();
    public virtual object get_SyncRoot();
    private sealed virtual override IEnumerator`1<KdbndpParameter> System.Collections.Generic.IEnumerable<Kdbndp.KdbndpParameter>.GetEnumerator();
    public virtual IEnumerator GetEnumerator();
    public virtual void AddRange(Array values);
    protected virtual DbParameter GetParameter(string parameterName);
    protected virtual DbParameter GetParameter(int index);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    protected virtual void SetParameter(int index, DbParameter value);
    [PublicAPIAttribute]
public sealed virtual int IndexOf(KdbndpParameter item);
    [PublicAPIAttribute]
public sealed virtual void Insert(int index, KdbndpParameter item);
    [PublicAPIAttribute]
public sealed virtual bool Contains(KdbndpParameter item);
    [PublicAPIAttribute]
public sealed virtual bool Remove(KdbndpParameter item);
    [PublicAPIAttribute]
public sealed virtual void CopyTo(KdbndpParameter[] array, int arrayIndex);
    [PublicAPIAttribute]
public KdbndpParameter[] ToArray();
    internal void CloneTo(KdbndpParameterCollection other);
    internal bool get_HasOutputParameters();
}
public class Kdbndp.KdbndpRawCopyStream : Stream {
    private KdbndpConnector _connector;
    private KdbndpReadBuffer _readBuf;
    private KdbndpWriteBuffer _writeBuf;
    private int _leftToReadInDataMsg;
    private bool _isDisposed;
    private bool _isConsumed;
    private bool _canRead;
    private bool _canWrite;
    [CompilerGeneratedAttribute]
private bool <IsBinary>k__BackingField;
    internal static Byte[] BinarySignature_R6;
    internal static Byte[] BinarySignature;
    private static KdbndpLogger Log;
    internal bool IsBinary { get; private set; }
    public bool CanWrite { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal KdbndpRawCopyStream(KdbndpConnector connector, string copyCommand);
    private static KdbndpRawCopyStream();
    [CompilerGeneratedAttribute]
internal bool get_IsBinary();
    [CompilerGeneratedAttribute]
private void set_IsBinary(bool value);
    public virtual bool get_CanWrite();
    public virtual bool get_CanRead();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public sealed virtual void Cancel();
    protected virtual void Dispose(bool disposing);
    private void Cleanup();
    private void CheckDisposed();
    public virtual bool get_CanSeek();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
}
public class Kdbndp.KdbndpReadBuffer : object {
    internal KdbndpConnector Connector;
    [CompilerGeneratedAttribute]
private Stream <Underlying>k__BackingField;
    [CompilerGeneratedAttribute]
private AwaitableSocket <AwaitableSocket>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <TextEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadPosition>k__BackingField;
    internal Byte[] Buffer;
    internal int FilledBytes;
    [CanBeNullAttribute]
private ColumnStream _columnStream;
    internal static int MinimumSize;
    internal static int DefaultSize;
    public KdbndpConnection Connection { get; }
    private Stream Underlying { get; internal set; }
    [CanBeNullAttribute]
internal AwaitableSocket AwaitableSocket { get; internal set; }
    internal int Size { get; }
    internal Encoding TextEncoding { get; }
    internal int ReadPosition { get; internal set; }
    internal int ReadBytesLeft { get; }
    internal KdbndpReadBuffer(KdbndpConnector connector, Stream stream, int size, Encoding textEncoding);
    public KdbndpConnection get_Connection();
    [CompilerGeneratedAttribute]
private Stream get_Underlying();
    [CompilerGeneratedAttribute]
internal void set_Underlying(Stream value);
    [CompilerGeneratedAttribute]
internal AwaitableSocket get_AwaitableSocket();
    [CompilerGeneratedAttribute]
internal void set_AwaitableSocket(AwaitableSocket value);
    [CompilerGeneratedAttribute]
internal int get_Size();
    [CompilerGeneratedAttribute]
internal Encoding get_TextEncoding();
    [CompilerGeneratedAttribute]
internal int get_ReadPosition();
    [CompilerGeneratedAttribute]
internal void set_ReadPosition(int value);
    internal int get_ReadBytesLeft();
    public Task Ensure(int count, bool async);
    internal void Ensure(int count);
    internal Task Ensure(int count, bool async, bool dontBreakOnTimeouts);
    internal Task ReadMore(bool async);
    internal KdbndpReadBuffer AllocateOversize(int count);
    internal void Skip(long len);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpReadBuffer/<Skip>d__35")]
public Task Skip(long len, bool async);
    public sbyte ReadSByte();
    public byte ReadByte();
    public short ReadInt16();
    public short ReadInt16(bool littleEndian);
    public ushort ReadUInt16();
    public ushort ReadUInt16(bool littleEndian);
    public int ReadInt32();
    public int ReadInt32(bool littleEndian);
    public UInt32 ReadUInt32();
    public UInt32 ReadUInt32(bool littleEndian);
    public long ReadInt64();
    public long ReadInt64(bool littleEndian);
    public ulong ReadUInt64();
    public ulong ReadUInt64(bool littleEndian);
    public float ReadSingle();
    public float ReadSingle(bool littleEndian);
    public double ReadDouble();
    public double ReadDouble(bool littleEndian);
    private T Read();
    private static void ThrowNotSpaceLeft();
    public string ReadString(int byteLen);
    public Char[] ReadChars(int byteLen);
    public void ReadBytes(Span`1<byte> output);
    public void ReadBytes(Byte[] output, int outputOffset, int len);
    public ValueTask`1<int> ReadBytes(Byte[] output, int outputOffset, int len, bool async);
    public Stream GetStream(int len, bool canSeek);
    public string ReadNullTerminatedString();
    internal string ReadNullTerminatedString(Encoding encoding);
    internal void Clear();
    internal void CopyTo(KdbndpReadBuffer other);
}
public class Kdbndp.KdbndpRowUpdatedEventArgs : RowUpdatedEventArgs {
    public KdbndpRowUpdatedEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
}
public class Kdbndp.KdbndpRowUpdatedEventHandler : MulticastDelegate {
    public KdbndpRowUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, KdbndpRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, KdbndpRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Kdbndp.KdbndpRowUpdatingEventArgs : RowUpdatingEventArgs {
    public KdbndpRowUpdatingEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
}
public class Kdbndp.KdbndpRowUpdatingEventHandler : MulticastDelegate {
    public KdbndpRowUpdatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, KdbndpRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, KdbndpRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Kdbndp.KdbndpSchema : object {
    private static string MetaDataResourceName;
    private static String[] ReservedKeywords;
    private static KdbndpSchema();
    internal static DataTable GetMetaDataCollections();
    internal static DataTable GetRestrictions();
    private static KdbndpCommand BuildCommand(KdbndpConnection conn, StringBuilder query, String[] restrictions, String[] names);
    private static KdbndpCommand BuildCommand(KdbndpConnection conn, StringBuilder query, String[] restrictions, bool addWhere, String[] names);
    private static string RemoveSpecialChars(string paramName);
    internal static DataTable GetDatabases(KdbndpConnection conn, String[] restrictions);
    internal static DataTable GetSchemata(KdbndpConnection conn, String[] restrictions);
    internal static DataTable GetTables(KdbndpConnection conn, String[] restrictions);
    internal static DataTable GetColumns(KdbndpConnection conn, String[] restrictions);
    internal static DataTable GetViews(KdbndpConnection conn, String[] restrictions);
    internal static DataTable GetUsers(KdbndpConnection conn, String[] restrictions);
    internal static DataTable GetIndexes(KdbndpConnection conn, String[] restrictions);
    internal static DataTable GetIndexColumns(KdbndpConnection conn, String[] restrictions);
    internal static DataTable GetConstraints(KdbndpConnection conn, String[] restrictions, string constraintType);
    internal static DataTable GetConstraintColumns(KdbndpConnection conn, String[] restrictions);
    internal static DataTable GetDataSourceInformation();
    public static DataTable GetReservedWords();
    private static void LoadMetaDataXmlResource(DataSet dataSet);
}
internal class Kdbndp.KdbndpSequentialDataReader : KdbndpDataReader {
    private int _numColumns;
    private int _column;
    internal KdbndpSequentialDataReader(KdbndpConnector connector);
    internal virtual ValueTask`1<IBackendMessage> ReadMessage(bool async);
    internal virtual void ProcessDataMessage(DataRowMessage dataMsg);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public virtual T GetFieldValue(int column);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpSequentialDataReader/<GetFieldValue>d__7`1")]
private ValueTask`1<T> GetFieldValue(int column, bool async);
    public virtual object GetValue(int column);
    public virtual object GetProviderSpecificValue(int column);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpSequentialDataReader/<SeekToColumn>d__10")]
internal virtual Task SeekToColumn(int column, bool async);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpSequentialDataReader/<SeekInColumn>d__11")]
internal virtual Task SeekInColumn(int posInColumn, bool async);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpSequentialDataReader/<ConsumeRow>d__12")]
internal virtual Task ConsumeRow(bool async);
    public virtual bool IsDBNull(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kdbndp.KdbndpSequentialDataReader/<IsDBNull>d__15")]
private Task`1<bool> IsDBNull(int ordinal, bool async);
    public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    private void CheckColumnStart();
}
public class Kdbndp.KdbndpStatement : object {
    [CompilerGeneratedAttribute]
private string <SQL>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DbOracleMode>k__BackingField;
    [CompilerGeneratedAttribute]
private StatementType <StatementType>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OID>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KdbndpParameter> <InputParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KdbndpParameter> <OutputParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KdbndpParameter> <InOutputParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KdbndpParameter> <Parameters>k__BackingField;
    [CanBeNullAttribute]
private RowDescriptionMessage _description;
    [CanBeNullAttribute]
private PreparedStatement _preparedStatement;
    public string SQL { get; public set; }
    public bool DbOracleMode { get; public set; }
    public StatementType StatementType { get; internal set; }
    public UInt32 Rows { get; internal set; }
    public UInt32 OID { get; internal set; }
    public List`1<KdbndpParameter> InputParameters { get; }
    public List`1<KdbndpParameter> OutputParameters { get; }
    public List`1<KdbndpParameter> InOutputParameters { get; }
    public List`1<KdbndpParameter> Parameters { get; }
    [CanBeNullAttribute]
internal RowDescriptionMessage Description { get; internal set; }
    [CanBeNullAttribute]
internal PreparedStatement PreparedStatement { get; internal set; }
    internal string StatementName { get; }
    internal bool IsPrepared { get; }
    [CompilerGeneratedAttribute]
public string get_SQL();
    [CompilerGeneratedAttribute]
public void set_SQL(string value);
    [CompilerGeneratedAttribute]
public bool get_DbOracleMode();
    [CompilerGeneratedAttribute]
public void set_DbOracleMode(bool value);
    [CompilerGeneratedAttribute]
public StatementType get_StatementType();
    [CompilerGeneratedAttribute]
internal void set_StatementType(StatementType value);
    [CompilerGeneratedAttribute]
public UInt32 get_Rows();
    [CompilerGeneratedAttribute]
internal void set_Rows(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_OID();
    [CompilerGeneratedAttribute]
internal void set_OID(UInt32 value);
    [CompilerGeneratedAttribute]
public List`1<KdbndpParameter> get_InputParameters();
    [CompilerGeneratedAttribute]
public List`1<KdbndpParameter> get_OutputParameters();
    [CompilerGeneratedAttribute]
public List`1<KdbndpParameter> get_InOutputParameters();
    [CompilerGeneratedAttribute]
public List`1<KdbndpParameter> get_Parameters();
    internal RowDescriptionMessage get_Description();
    internal void set_Description(RowDescriptionMessage value);
    internal PreparedStatement get_PreparedStatement();
    internal void set_PreparedStatement(PreparedStatement value);
    internal string get_StatementName();
    internal bool get_IsPrepared();
    internal void Reset();
    internal void ApplyCommandComplete(CommandCompleteMessage msg);
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class Kdbndp.KdbndpTimeout : ValueType {
    private DateTime _expiration;
    internal static KdbndpTimeout Infinite;
    internal DateTime Expiration { get; }
    internal bool IsSet { get; }
    internal bool HasExpired { get; }
    internal TimeSpan TimeLeft { get; }
    internal KdbndpTimeout(TimeSpan expiration);
    private static KdbndpTimeout();
    internal DateTime get_Expiration();
    internal void Check();
    internal bool get_IsSet();
    internal bool get_HasExpired();
    internal TimeSpan get_TimeLeft();
}
public class Kdbndp.KdbndpTransaction : DbTransaction {
    [CompilerGeneratedAttribute]
private KdbndpConnection <Connection>k__BackingField;
    private KdbndpConnector _connector;
    private bool _isDisposed;
    private IsolationLevel _isolationLevel;
    private static KdbndpLogger Log;
    private static IsolationLevel DefaultIsolationLevel;
    [CanBeNullAttribute]
public KdbndpConnection Connection { get; internal set; }
    public bool IsCompleted { get; }
    [CanBeNullAttribute]
protected DbConnection DbConnection { get; }
    public IsolationLevel IsolationLevel { get; }
    internal KdbndpTransaction(KdbndpConnection conn, IsolationLevel isolationLevel);
    private static KdbndpTransaction();
    [CompilerGeneratedAttribute]
public KdbndpConnection get_Connection();
    [CompilerGeneratedAttribute]
internal void set_Connection(KdbndpConnection value);
    public bool get_IsCompleted();
    protected virtual DbConnection get_DbConnection();
    public virtual IsolationLevel get_IsolationLevel();
    public virtual void Commit();
    [AsyncStateMachineAttribute("Kdbndp.KdbndpTransaction/<Commit>d__17")]
private Task Commit(bool async);
    [PublicAPIAttribute]
public Task CommitAsync(CancellationToken cancellationToken);
    [PublicAPIAttribute]
public Task CommitAsync();
    public virtual void Rollback();
    [AsyncStateMachineAttribute("Kdbndp.KdbndpTransaction/<Rollback>d__21")]
private Task Rollback(bool async);
    [PublicAPIAttribute]
public Task RollbackAsync(CancellationToken cancellationToken);
    [PublicAPIAttribute]
public Task RollbackAsync();
    public void Save(string name);
    public void Rollback(string name);
    public void Release(string name);
    protected virtual void Dispose(bool disposing);
    internal void Clear();
    private void CheckReady();
    private void CheckCompleted();
    private void CheckDisposed();
}
public class Kdbndp.KdbndpWriteBuffer : object {
    internal KdbndpConnector Connector;
    [CompilerGeneratedAttribute]
private Stream <Underlying>k__BackingField;
    [CompilerGeneratedAttribute]
private AwaitableSocket <AwaitableSocket>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    private bool _copyMode;
    [CompilerGeneratedAttribute]
private Encoding <TextEncoding>k__BackingField;
    internal Byte[] Buffer;
    private Encoder _textEncoder;
    internal int WritePosition;
    [CanBeNullAttribute]
private ParameterStream _parameterStream;
    internal static int MinimumSize;
    internal static int DefaultSize;
    [CompilerGeneratedAttribute]
private KdbndpCommand <CurrentCommand>k__BackingField;
    private Stream Underlying { get; internal set; }
    [CanBeNullAttribute]
internal AwaitableSocket AwaitableSocket { get; internal set; }
    internal int Size { get; private set; }
    internal Encoding TextEncoding { get; }
    public int WriteSpaceLeft { get; }
    [CanBeNullAttribute]
internal KdbndpCommand CurrentCommand { get; internal set; }
    internal KdbndpWriteBuffer(KdbndpConnector connector, Stream stream, int size, Encoding textEncoding);
    [CompilerGeneratedAttribute]
private Stream get_Underlying();
    [CompilerGeneratedAttribute]
internal void set_Underlying(Stream value);
    [CompilerGeneratedAttribute]
internal AwaitableSocket get_AwaitableSocket();
    [CompilerGeneratedAttribute]
internal void set_AwaitableSocket(AwaitableSocket value);
    [CompilerGeneratedAttribute]
internal int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    [CompilerGeneratedAttribute]
internal Encoding get_TextEncoding();
    public int get_WriteSpaceLeft();
    [AsyncStateMachineAttribute("Kdbndp.KdbndpWriteBuffer/<Flush>d__26")]
public Task Flush(bool async);
    internal void Flush();
    [CompilerGeneratedAttribute]
internal KdbndpCommand get_CurrentCommand();
    [CompilerGeneratedAttribute]
internal void set_CurrentCommand(KdbndpCommand value);
    internal void DirectWrite(Byte[] buffer, int offset, int count);
    public void WriteSByte(sbyte value);
    public void WriteByte(byte value);
    internal void WriteInt16(int value);
    public void WriteInt16(short value);
    public void WriteInt16(short value, bool littleEndian);
    public void WriteUInt16(ushort value);
    public void WriteUInt16(ushort value, bool littleEndian);
    public void WriteInt32(int value);
    public void WriteInt32(int value, bool littleEndian);
    public void WriteUInt32(UInt32 value);
    public void WriteUInt32(UInt32 value, bool littleEndian);
    public void WriteInt64(long value);
    public void WriteInt64(long value, bool littleEndian);
    public void WriteUInt64(ulong value);
    public void WriteUInt64(ulong value, bool littleEndian);
    public void WriteSingle(float value);
    public void WriteSingle(float value, bool littleEndian);
    public void WriteDouble(double value);
    public void WriteDouble(double value, bool littleEndian);
    private void Write(T value);
    private static void ThrowNotSpaceLeft();
    public Task WriteString(string s, int byteLen, bool async);
    public Task WriteString(string s, int charLen, int byteLen, bool async);
    internal Task WriteChars(Char[] chars, int offset, int charLen, int byteLen, bool async);
    public void WriteString(string s, int len);
    internal void WriteChars(Char[] chars, int offset, int len);
    public void WriteBytes(ReadOnlySpan`1<byte> buf);
    public void WriteBytes(Byte[] buf, int offset, int count);
    public Task WriteBytesRaw(Byte[] bytes, bool async);
    public void WriteNullTerminatedString(string s);
    public Stream GetStream();
    internal void WriteStringChunked(Char[] chars, int charIndex, int charCount, bool flush, Int32& charsUsed, Boolean& completed);
    internal void WriteStringChunked(string s, int charIndex, int charCount, bool flush, Int32& charsUsed, Boolean& completed);
    internal void StartCopyMode();
    internal void EndCopyMode();
    private void WriteCopyDataHeader();
    internal void Clear();
    internal Byte[] GetContents();
}
internal class Kdbndp.KerberosUsernameProvider : object {
    private static bool _performedDetection;
    private static string _principalWithRealm;
    private static string _principalWithoutRealm;
    private static KdbndpLogger Log;
    private static KerberosUsernameProvider();
    [CanBeNullAttribute]
internal static string GetUsername(bool includeRealm);
    private static void DetectUsername();
    private static string FindInPath(string name);
}
internal class Kdbndp.KingbaseDatabaseInfo : KdbndpDatabaseInfo {
    [NotNullAttribute]
private static KdbndpLogger Log;
    [CanBeNullAttribute]
private List`1<KingbaseType> _types;
    [CompilerGeneratedAttribute]
private bool <IsRedshift>k__BackingField;
    public bool IsRedshift { get; private set; }
    public bool SupportsUnlisten { get; }
    public bool HasEnumSortOrder { get; }
    private static KingbaseDatabaseInfo();
    [NotNullAttribute]
protected virtual IEnumerable`1<KingbaseType> GetTypes();
    [CompilerGeneratedAttribute]
public bool get_IsRedshift();
    [CompilerGeneratedAttribute]
private void set_IsRedshift(bool value);
    public virtual bool get_SupportsUnlisten();
    public virtual bool get_HasEnumSortOrder();
    [AsyncStateMachineAttribute("Kdbndp.KingbaseDatabaseInfo/<LoadKingbaseInfo>d__11")]
[NotNullAttribute]
internal Task LoadKingbaseInfo(KdbndpConnection conn, KdbndpTimeout timeout, bool async);
    [NotNullAttribute]
private static string GenerateTypesQuery(bool withRange, bool withEnum, bool withEnumSortOrder, bool loadTableComposites);
    private static string GenerateTypesQuery_R6(bool withRange, bool withEnum, bool withEnumSortOrder, bool loadTableComposites);
    [AsyncStateMachineAttribute("Kdbndp.KingbaseDatabaseInfo/<LoadBackendTypes>d__14")]
[NotNullAttribute]
internal Task`1<List`1<KingbaseType>> LoadBackendTypes(KdbndpConnection conn, KdbndpTimeout timeout, bool async);
    [AsyncStateMachineAttribute("Kdbndp.KingbaseDatabaseInfo/<LoadBackendTypes_v8r6>d__15")]
[NotNullAttribute]
internal Task`1<List`1<KingbaseType>> LoadBackendTypes_v8r6(KdbndpConnection conn, KdbndpTimeout timeout, bool async);
    private static void LoadCompositeFields(DbDataReader reader, Dictionary`2<UInt32, KingbaseType> byOID);
    private static void LoadEnumLabels(DbDataReader reader, Dictionary`2<UInt32, KingbaseType> byOID);
}
internal class Kdbndp.KingbaseDatabaseInfoFactory : object {
    [AsyncStateMachineAttribute("Kdbndp.KingbaseDatabaseInfoFactory/<Load>d__0")]
[NotNullAttribute]
public sealed virtual Task`1<KdbndpDatabaseInfo> Load(KdbndpConnection conn, KdbndpTimeout timeout, bool async);
}
public class Kdbndp.KingbaseException : KdbndpException {
    [CanBeNullAttribute]
private bool _dataInitialized;
    [CompilerGeneratedAttribute]
private string <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SqlState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InternalPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Routine>k__BackingField;
    [CompilerGeneratedAttribute]
private KdbndpStatement <Statement>k__BackingField;
    [PublicAPIAttribute]
public string Severity { get; public set; }
    [PublicAPIAttribute]
public string SqlState { get; public set; }
    [PublicAPIAttribute]
[ObsoleteAttribute("Use SqlState instead")]
public string Code { get; }
    [PublicAPIAttribute]
public string MessageText { get; public set; }
    [PublicAPIAttribute]
public string Detail { get; public set; }
    [PublicAPIAttribute]
public string Hint { get; public set; }
    [PublicAPIAttribute]
public int Position { get; public set; }
    [PublicAPIAttribute]
public int InternalPosition { get; public set; }
    [PublicAPIAttribute]
public string InternalQuery { get; public set; }
    [PublicAPIAttribute]
public string Where { get; public set; }
    [PublicAPIAttribute]
public string SchemaName { get; public set; }
    [PublicAPIAttribute]
public string TableName { get; public set; }
    [PublicAPIAttribute]
public string ColumnName { get; public set; }
    [PublicAPIAttribute]
public string DataTypeName { get; public set; }
    [PublicAPIAttribute]
public string ConstraintName { get; public set; }
    [PublicAPIAttribute]
public string File { get; public set; }
    [PublicAPIAttribute]
public string Line { get; public set; }
    [PublicAPIAttribute]
public string Routine { get; public set; }
    public string Message { get; }
    public bool IsTransient { get; }
    public KdbndpStatement Statement { get; internal set; }
    public IDictionary Data { get; }
    internal KingbaseException(KdbndpReadBuffer buf);
    private KingbaseException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(string value);
    [CompilerGeneratedAttribute]
public string get_SqlState();
    [CompilerGeneratedAttribute]
public void set_SqlState(string value);
    public string get_Code();
    [CompilerGeneratedAttribute]
public string get_MessageText();
    [CompilerGeneratedAttribute]
public void set_MessageText(string value);
    [CompilerGeneratedAttribute]
public string get_Detail();
    [CompilerGeneratedAttribute]
public void set_Detail(string value);
    [CompilerGeneratedAttribute]
public string get_Hint();
    [CompilerGeneratedAttribute]
public void set_Hint(string value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    [CompilerGeneratedAttribute]
public int get_InternalPosition();
    [CompilerGeneratedAttribute]
public void set_InternalPosition(int value);
    [CompilerGeneratedAttribute]
public string get_InternalQuery();
    [CompilerGeneratedAttribute]
public void set_InternalQuery(string value);
    [CompilerGeneratedAttribute]
public string get_Where();
    [CompilerGeneratedAttribute]
public void set_Where(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
public void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ConstraintName();
    [CompilerGeneratedAttribute]
public void set_ConstraintName(string value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public string get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(string value);
    [CompilerGeneratedAttribute]
public string get_Routine();
    [CompilerGeneratedAttribute]
public void set_Routine(string value);
    public virtual string get_Message();
    public virtual bool get_IsTransient();
    [CompilerGeneratedAttribute]
public KdbndpStatement get_Statement();
    [CompilerGeneratedAttribute]
internal void set_Statement(KdbndpStatement value);
    public virtual IDictionary get_Data();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType4`2<<>f__AnonymousType3`2<PropertyInfo, string>, object> <get_Data>b__82_3(<>f__AnonymousType3`2<PropertyInfo, string> <>h__TransparentIdentifier0);
}
internal class Kdbndp.KingbaseMinimalDatabaseInfo : KingbaseDatabaseInfo {
    private static Version DefaultVersion;
    private static KingbaseBaseType[] Types;
    internal KingbaseMinimalDatabaseInfo(KdbndpConnection conn);
    private static KingbaseMinimalDatabaseInfo();
    protected virtual IEnumerable`1<KingbaseType> GetTypes();
}
internal class Kdbndp.KingbaseMinimalDatabaseInfoFactory : object {
    public sealed virtual Task`1<KdbndpDatabaseInfo> Load(KdbndpConnection conn, KdbndpTimeout timeout, bool async);
}
public class Kdbndp.KingbaseNotice : object {
    [CompilerGeneratedAttribute]
private string <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SqlState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InternalPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Routine>k__BackingField;
    [PublicAPIAttribute]
public string Severity { get; public set; }
    [PublicAPIAttribute]
public string SqlState { get; public set; }
    [PublicAPIAttribute]
[ObsoleteAttribute("Use SqlState instead")]
public string Code { get; }
    [PublicAPIAttribute]
public string MessageText { get; public set; }
    [PublicAPIAttribute]
public string Detail { get; public set; }
    [PublicAPIAttribute]
public string Hint { get; public set; }
    [PublicAPIAttribute]
public int Position { get; public set; }
    [PublicAPIAttribute]
public int InternalPosition { get; public set; }
    [PublicAPIAttribute]
public string InternalQuery { get; public set; }
    [PublicAPIAttribute]
public string Where { get; public set; }
    [PublicAPIAttribute]
public string SchemaName { get; public set; }
    [PublicAPIAttribute]
public string TableName { get; public set; }
    [PublicAPIAttribute]
public string ColumnName { get; public set; }
    [PublicAPIAttribute]
public string DataTypeName { get; public set; }
    [PublicAPIAttribute]
public string ConstraintName { get; public set; }
    [PublicAPIAttribute]
public string File { get; public set; }
    [PublicAPIAttribute]
public string Line { get; public set; }
    [PublicAPIAttribute]
public string Routine { get; public set; }
    internal KingbaseNotice(KdbndpReadBuffer buf);
    [CompilerGeneratedAttribute]
public string get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(string value);
    [CompilerGeneratedAttribute]
public string get_SqlState();
    [CompilerGeneratedAttribute]
public void set_SqlState(string value);
    public string get_Code();
    [CompilerGeneratedAttribute]
public string get_MessageText();
    [CompilerGeneratedAttribute]
public void set_MessageText(string value);
    [CompilerGeneratedAttribute]
public string get_Detail();
    [CompilerGeneratedAttribute]
public void set_Detail(string value);
    [CompilerGeneratedAttribute]
public string get_Hint();
    [CompilerGeneratedAttribute]
public void set_Hint(string value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    [CompilerGeneratedAttribute]
public int get_InternalPosition();
    [CompilerGeneratedAttribute]
public void set_InternalPosition(int value);
    [CompilerGeneratedAttribute]
public string get_InternalQuery();
    [CompilerGeneratedAttribute]
public void set_InternalQuery(string value);
    [CompilerGeneratedAttribute]
public string get_Where();
    [CompilerGeneratedAttribute]
public void set_Where(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
public void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ConstraintName();
    [CompilerGeneratedAttribute]
public void set_ConstraintName(string value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public string get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(string value);
    [CompilerGeneratedAttribute]
public string get_Routine();
    [CompilerGeneratedAttribute]
public void set_Routine(string value);
}
public class Kdbndp.KingbaseTypes.KingbaseArrayType : KingbaseType {
    [CompilerGeneratedAttribute]
private KingbaseType <Element>k__BackingField;
    [PublicAPIAttribute]
public KingbaseType Element { get; }
    protected internal KingbaseArrayType(string ns, string internalName, UInt32 oid, KingbaseType elementKingbaseType);
    [CompilerGeneratedAttribute]
public KingbaseType get_Element();
    internal virtual string GetPartialNameWithFacets(int typeModifier);
    internal virtual KingbaseFacets GetFacets(int typeModifier);
}
public class Kdbndp.KingbaseTypes.KingbaseBaseType : KingbaseType {
    protected internal KingbaseBaseType(string ns, string internalName, UInt32 oid);
    internal virtual string GetPartialNameWithFacets(int typeModifier);
    internal virtual KingbaseFacets GetFacets(int typeModifier);
    private static string TranslateInternalName(string internalName);
}
public class Kdbndp.KingbaseTypes.KingbaseCompositeType : KingbaseType {
    [CompilerGeneratedAttribute]
private List`1<Field> <MutableFields>k__BackingField;
    public IReadOnlyList`1<Field> Fields { get; }
    internal List`1<Field> MutableFields { get; }
    internal KingbaseCompositeType(string ns, string name, UInt32 oid);
    public IReadOnlyList`1<Field> get_Fields();
    [CompilerGeneratedAttribute]
internal List`1<Field> get_MutableFields();
}
public class Kdbndp.KingbaseTypes.KingbaseDomainType : KingbaseType {
    [CompilerGeneratedAttribute]
private KingbaseType <BaseType>k__BackingField;
    [PublicAPIAttribute]
public KingbaseType BaseType { get; }
    protected internal KingbaseDomainType(string ns, string name, UInt32 oid, KingbaseType baseType);
    [CompilerGeneratedAttribute]
public KingbaseType get_BaseType();
    internal virtual KingbaseFacets GetFacets(int typeModifier);
}
public class Kdbndp.KingbaseTypes.KingbaseEnumType : KingbaseType {
    [CompilerGeneratedAttribute]
private List`1<string> <MutableLabels>k__BackingField;
    public IReadOnlyList`1<string> Labels { get; }
    internal List`1<string> MutableLabels { get; }
    protected internal KingbaseEnumType(string ns, string name, UInt32 oid);
    public IReadOnlyList`1<string> get_Labels();
    [CompilerGeneratedAttribute]
internal List`1<string> get_MutableLabels();
}
[IsReadOnlyAttribute]
internal class Kdbndp.KingbaseTypes.KingbaseFacets : ValueType {
    internal static KingbaseFacets None;
    public Nullable`1<int> Size;
    public Nullable`1<int> Precision;
    public Nullable`1<int> Scale;
    internal KingbaseFacets(Nullable`1<int> size, Nullable`1<int> precision, Nullable`1<int> scale);
    private static KingbaseFacets();
    public virtual bool Equals(object o);
    public sealed virtual bool Equals(KingbaseFacets o);
    public static bool op_Equality(KingbaseFacets x, KingbaseFacets y);
    public static bool op_Inequality(KingbaseFacets x, KingbaseFacets y);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Kdbndp.KingbaseTypes.KingbaseRangeType : KingbaseType {
    [CompilerGeneratedAttribute]
private KingbaseType <Subtype>k__BackingField;
    [PublicAPIAttribute]
public KingbaseType Subtype { get; }
    protected internal KingbaseRangeType(string ns, string name, UInt32 oid, KingbaseType subtypeKingbaseType);
    [CompilerGeneratedAttribute]
public KingbaseType get_Subtype();
}
public abstract class Kdbndp.KingbaseTypes.KingbaseType : object {
    [CompilerGeneratedAttribute]
private UInt32 <OID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalName>k__BackingField;
    [CompilerGeneratedAttribute]
private KingbaseArrayType <Array>k__BackingField;
    [CompilerGeneratedAttribute]
private KingbaseRangeType <Range>k__BackingField;
    [PublicAPIAttribute]
public UInt32 OID { get; }
    [PublicAPIAttribute]
public string Namespace { get; }
    [PublicAPIAttribute]
public string Name { get; }
    [PublicAPIAttribute]
public string FullName { get; }
    [PublicAPIAttribute]
public string DisplayName { get; }
    [PublicAPIAttribute]
public string InternalName { get; }
    [PublicAPIAttribute]
[CanBeNullAttribute]
public KingbaseArrayType Array { get; internal set; }
    [PublicAPIAttribute]
[CanBeNullAttribute]
public KingbaseRangeType Range { get; internal set; }
    protected KingbaseType(string ns, string name, UInt32 oid);
    protected KingbaseType(string ns, string name, string internalName, UInt32 oid);
    [CompilerGeneratedAttribute]
public UInt32 get_OID();
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_FullName();
    public string get_DisplayName();
    [CompilerGeneratedAttribute]
public string get_InternalName();
    [CompilerGeneratedAttribute]
public KingbaseArrayType get_Array();
    [CompilerGeneratedAttribute]
internal void set_Array(KingbaseArrayType value);
    [CompilerGeneratedAttribute]
public KingbaseRangeType get_Range();
    [CompilerGeneratedAttribute]
internal void set_Range(KingbaseRangeType value);
    internal virtual string GetPartialNameWithFacets(int typeModifier);
    internal string GetDisplayNameWithFacets(int typeModifier);
    internal virtual KingbaseFacets GetFacets(int typeModifier);
    public virtual string ToString();
}
public class Kdbndp.KingbaseTypes.UnknownBackendType : KingbaseType {
    internal static KingbaseType Instance;
    private static UnknownBackendType();
}
internal class Kdbndp.Logging.ConsoleLogger : KdbndpLogger {
    private KdbndpLogLevel _minLevel;
    private bool _printLevel;
    private bool _printConnectorId;
    internal ConsoleLogger(KdbndpLogLevel minLevel, bool printLevel, bool printConnectorId);
    public virtual bool IsEnabled(KdbndpLogLevel level);
    public virtual void Log(KdbndpLogLevel level, int connectorId, string msg, Exception exception);
}
public class Kdbndp.Logging.ConsoleLoggingProvider : object {
    private KdbndpLogLevel _minLevel;
    private bool _printLevel;
    private bool _printConnectorId;
    public ConsoleLoggingProvider(KdbndpLogLevel minLevel, bool printLevel, bool printConnectorId);
    public sealed virtual KdbndpLogger CreateLogger(string name);
}
public interface Kdbndp.Logging.IKdbndpLoggingProvider {
    public abstract virtual KdbndpLogger CreateLogger(string name);
}
public abstract class Kdbndp.Logging.KdbndpLogger : object {
    public abstract virtual bool IsEnabled(KdbndpLogLevel level);
    public abstract virtual void Log(KdbndpLogLevel level, int connectorId, string msg, Exception exception);
    internal void Trace(string msg, int connectionId);
    internal void Debug(string msg, int connectionId);
    internal void Info(string msg, int connectionId);
    internal void Warn(string msg, int connectionId);
    internal void Error(string msg, int connectionId);
    internal void Fatal(string msg, int connectionId);
    internal void Trace(string msg, Exception ex, int connectionId);
    internal void Debug(string msg, Exception ex, int connectionId);
    internal void Info(string msg, Exception ex, int connectionId);
    internal void Warn(string msg, Exception ex, int connectionId);
    internal void Error(string msg, Exception ex, int connectionId);
    internal void Fatal(string msg, Exception ex, int connectionId);
}
public enum Kdbndp.Logging.KdbndpLogLevel : Enum {
    public int value__;
    public static KdbndpLogLevel Trace;
    public static KdbndpLogLevel Debug;
    public static KdbndpLogLevel Info;
    public static KdbndpLogLevel Warn;
    public static KdbndpLogLevel Error;
    public static KdbndpLogLevel Fatal;
}
public static class Kdbndp.Logging.KdbndpLogManager : object {
    [CompilerGeneratedAttribute]
private static bool <IsParameterLoggingEnabled>k__BackingField;
    private static IKdbndpLoggingProvider _provider;
    private static bool _providerRetrieved;
    public static IKdbndpLoggingProvider Provider { get; public set; }
    public static bool IsParameterLoggingEnabled { get; public set; }
    private static KdbndpLogManager();
    public static IKdbndpLoggingProvider get_Provider();
    public static void set_Provider(IKdbndpLoggingProvider value);
    [CompilerGeneratedAttribute]
public static bool get_IsParameterLoggingEnabled();
    [CompilerGeneratedAttribute]
public static void set_IsParameterLoggingEnabled(bool value);
    internal static KdbndpLogger CreateLogger(string name);
    internal static KdbndpLogger GetCurrentClassLogger();
    private static string GetClassFullName();
}
internal class Kdbndp.Logging.NoOpLogger : KdbndpLogger {
    internal static NoOpLogger Instance;
    private static NoOpLogger();
    public virtual bool IsEnabled(KdbndpLogLevel level);
    public virtual void Log(KdbndpLogLevel level, int connectorId, string msg, Exception exception);
}
internal class Kdbndp.Logging.NoOpLoggingProvider : object {
    public sealed virtual KdbndpLogger CreateLogger(string name);
}
public class Kdbndp.NameTranslation.KdbndpNullNameTranslator : object {
    public sealed virtual string TranslateTypeName(string clrName);
    public sealed virtual string TranslateMemberName(string clrName);
}
public class Kdbndp.NameTranslation.KdbndpSnakeCaseNameTranslator : object {
    [CompilerGeneratedAttribute]
private bool <LegacyMode>k__BackingField;
    private bool LegacyMode { get; }
    public KdbndpSnakeCaseNameTranslator(bool legacyMode);
    [CompilerGeneratedAttribute]
private bool get_LegacyMode();
    public sealed virtual string TranslateTypeName(string clrName);
    public sealed virtual string TranslateMemberName(string clrName);
    public static string ConvertToSnakeCase(string value);
}
internal static class Kdbndp.NoSynchronizationContextScope : object {
    internal static Disposable Enter();
}
public class Kdbndp.NoticeEventHandler : MulticastDelegate {
    public NoticeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, KdbndpNoticeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, KdbndpNoticeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Kdbndp.NotificationEventHandler : MulticastDelegate {
    public NotificationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, KdbndpNotificationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, KdbndpNotificationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Kdbndp.PgPassFile : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    internal string FileName { get; }
    internal IEnumerable`1<Entry> Entries { get; }
    private PgPassFile(string fileName);
    [CompilerGeneratedAttribute]
internal string get_FileName();
    [CanBeNullAttribute]
internal static PgPassFile Load(string pgPassFile);
    internal IEnumerable`1<Entry> get_Entries();
    [CanBeNullAttribute]
internal Entry GetFirstMatchingEntry(string host, Nullable`1<int> port, string database, string username);
    [CanBeNullAttribute]
internal static string GetSystemPgPassFilePath();
}
internal static class Kdbndp.PoolManager : object {
    internal static int InitialPoolsSize;
    private static object _lock;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ValueTuple`2[] _pools;
    private static int _nextSlot;
    private static PoolManager();
    internal static bool TryGetValue(string key, ConnectorPool& pool);
    internal static ConnectorPool GetOrAdd(string key, ConnectorPool pool);
    internal static void Clear(string connString);
    internal static void ClearAll();
    internal static void Reset();
}
internal enum Kdbndp.PreparedState : Enum {
    public int value__;
    public static PreparedState NotPrepared;
    public static PreparedState ToBePrepared;
    public static PreparedState BeingPrepared;
    public static PreparedState Prepared;
    public static PreparedState BeingUnprepared;
    public static PreparedState Unprepared;
}
internal class Kdbndp.PreparedStatement : object {
    private PreparedStatementManager _manager;
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    internal string Name;
    [CanBeNullAttribute]
internal RowDescriptionMessage Description;
    internal int Usages;
    [CompilerGeneratedAttribute]
private PreparedState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExplicit>k__BackingField;
    [CanBeNullAttribute]
internal PreparedStatement StatementBeingReplaced;
    [CompilerGeneratedAttribute]
private DateTime <LastUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <HandlerParamTypes>k__BackingField;
    private static Type[] EmptyParamTypes;
    internal string Sql { get; }
    internal PreparedState State { get; internal set; }
    internal bool IsPrepared { get; }
    internal bool IsExplicit { get; private set; }
    internal DateTime LastUsed { get; internal set; }
    [CanBeNullAttribute]
internal Type[] HandlerParamTypes { get; private set; }
    private PreparedStatement(PreparedStatementManager manager, string sql, bool isExplicit);
    private static PreparedStatement();
    [CompilerGeneratedAttribute]
internal string get_Sql();
    [CompilerGeneratedAttribute]
internal PreparedState get_State();
    [CompilerGeneratedAttribute]
internal void set_State(PreparedState value);
    internal bool get_IsPrepared();
    [CompilerGeneratedAttribute]
internal bool get_IsExplicit();
    [CompilerGeneratedAttribute]
private void set_IsExplicit(bool value);
    [CompilerGeneratedAttribute]
internal DateTime get_LastUsed();
    [CompilerGeneratedAttribute]
internal void set_LastUsed(DateTime value);
    [CompilerGeneratedAttribute]
internal Type[] get_HandlerParamTypes();
    [CompilerGeneratedAttribute]
private void set_HandlerParamTypes(Type[] value);
    internal static PreparedStatement CreateExplicit(PreparedStatementManager manager, string sql, string name, List`1<KdbndpParameter> parameters, PreparedStatement statementBeingReplaced);
    internal static PreparedStatement CreateAutoPrepareCandidate(PreparedStatementManager manager, string sql);
    internal void SetParamTypes(List`1<KdbndpParameter> parameters);
    internal bool DoParametersMatch(List`1<KdbndpParameter> parameters);
    internal void CompletePrepare();
    internal void CompleteUnprepare();
    public virtual string ToString();
}
internal class Kdbndp.PreparedStatementManager : object {
    [CompilerGeneratedAttribute]
private int <MaxAutoPrepared>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UsagesBeforePrepare>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, PreparedStatement> <BySql>k__BackingField;
    private PreparedStatement[] _autoPrepared;
    private int _numAutoPrepared;
    [CanBeNullAttribute]
[ItemCanBeNullAttribute]
private PreparedStatement[] _candidates;
    internal int NumPrepared;
    private KdbndpConnector _connector;
    private ulong _preparedStatementIndex;
    private static KdbndpLogger Log;
    internal static int CandidateCount;
    internal int MaxAutoPrepared { get; }
    internal int UsagesBeforePrepare { get; }
    internal Dictionary`2<string, PreparedStatement> BySql { get; }
    internal PreparedStatementManager(KdbndpConnector connector);
    private static PreparedStatementManager();
    [CompilerGeneratedAttribute]
internal int get_MaxAutoPrepared();
    [CompilerGeneratedAttribute]
internal int get_UsagesBeforePrepare();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, PreparedStatement> get_BySql();
    internal string NextPreparedStatementName();
    [CanBeNullAttribute]
internal PreparedStatement GetOrAddExplicit(KdbndpStatement statement);
    [CanBeNullAttribute]
internal PreparedStatement TryGetAutoPrepared(KdbndpStatement statement);
    private void RemoveCandidate(PreparedStatement candidate);
    internal void ClearAll();
}
public class Kdbndp.ProvideClientCertificatesCallback : MulticastDelegate {
    public ProvideClientCertificatesCallback(object object, IntPtr method);
    public virtual void Invoke(X509CertificateCollection certificates);
    public virtual IAsyncResult BeginInvoke(X509CertificateCollection certificates, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum Kdbndp.ReaderState : Enum {
    public int value__;
    public static ReaderState BeforeResult;
    public static ReaderState InResult;
    public static ReaderState BetweenResults;
    public static ReaderState Consumed;
    public static ReaderState Closed;
}
internal class Kdbndp.Schema.DbColumnSchemaGenerator : object {
    private RowDescriptionMessage _rowDescription;
    private KdbndpConnection _connection;
    private bool _fetchAdditionalInfo;
    internal DbColumnSchemaGenerator(KdbndpConnection connection, RowDescriptionMessage rowDescription, bool fetchAdditionalInfo);
    private static string GenerateColumnsQuery(Version pgVersion, string columnFieldFilter);
    private static string GenerateOldColumnsQuery(string columnFieldFilter);
    internal ReadOnlyCollection`1<KdbndpDbColumn> GetColumnSchema();
    private KdbndpDbColumn LoadColumnDefinition(KdbndpDataReader reader, KdbndpDatabaseInfo databaseInfo);
    private KdbndpDbColumn SetUpNonColumnField(FieldDescription field);
    private void ColumnPostConfig(KdbndpDbColumn column, int typeModifier);
}
[DefaultMemberAttribute("Item")]
public class Kdbndp.Schema.KdbndpDbColumn : DbColumn {
    [CompilerGeneratedAttribute]
private KingbaseType <KingbaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TypeOID>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TableOID>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<short> <ColumnAttributeNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<KdbndpDbType> <KdbndpDbType>k__BackingField;
    public Nullable`1<bool> AllowDBNull { get; protected internal set; }
    public string BaseCatalogName { get; protected internal set; }
    public string BaseColumnName { get; protected internal set; }
    public string BaseSchemaName { get; protected internal set; }
    public string BaseServerName { get; protected internal set; }
    public string BaseTableName { get; protected internal set; }
    public string ColumnName { get; protected internal set; }
    public Nullable`1<int> ColumnOrdinal { get; protected internal set; }
    public Nullable`1<int> ColumnSize { get; protected internal set; }
    public Nullable`1<bool> IsAutoIncrement { get; protected internal set; }
    public Nullable`1<bool> IsKey { get; protected internal set; }
    public Nullable`1<bool> IsLong { get; protected internal set; }
    public Nullable`1<bool> IsReadOnly { get; protected internal set; }
    public Nullable`1<bool> IsUnique { get; protected internal set; }
    public Nullable`1<int> NumericPrecision { get; protected internal set; }
    public Nullable`1<int> NumericScale { get; protected internal set; }
    public string UdtAssemblyQualifiedName { get; protected internal set; }
    public Type DataType { get; protected internal set; }
    public string DataTypeName { get; protected internal set; }
    [PublicAPIAttribute]
public KingbaseType KingbaseType { get; internal set; }
    [PublicAPIAttribute]
public UInt32 TypeOID { get; internal set; }
    [PublicAPIAttribute]
public UInt32 TableOID { get; internal set; }
    [PublicAPIAttribute]
public Nullable`1<short> ColumnAttributeNumber { get; internal set; }
    [PublicAPIAttribute]
public string DefaultValue { get; internal set; }
    [PublicAPIAttribute]
public Nullable`1<KdbndpDbType> KdbndpDbType { get; internal set; }
    [CanBeNullAttribute]
public object Item { get; }
    public Nullable`1<bool> get_AllowDBNull();
    protected internal void set_AllowDBNull(Nullable`1<bool> value);
    public string get_BaseCatalogName();
    protected internal void set_BaseCatalogName(string value);
    public string get_BaseColumnName();
    protected internal void set_BaseColumnName(string value);
    public string get_BaseSchemaName();
    protected internal void set_BaseSchemaName(string value);
    public string get_BaseServerName();
    protected internal void set_BaseServerName(string value);
    public string get_BaseTableName();
    protected internal void set_BaseTableName(string value);
    public string get_ColumnName();
    protected internal void set_ColumnName(string value);
    public Nullable`1<int> get_ColumnOrdinal();
    protected internal void set_ColumnOrdinal(Nullable`1<int> value);
    public Nullable`1<int> get_ColumnSize();
    protected internal void set_ColumnSize(Nullable`1<int> value);
    public Nullable`1<bool> get_IsAutoIncrement();
    protected internal void set_IsAutoIncrement(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsKey();
    protected internal void set_IsKey(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsLong();
    protected internal void set_IsLong(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsReadOnly();
    protected internal void set_IsReadOnly(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsUnique();
    protected internal void set_IsUnique(Nullable`1<bool> value);
    public Nullable`1<int> get_NumericPrecision();
    protected internal void set_NumericPrecision(Nullable`1<int> value);
    public Nullable`1<int> get_NumericScale();
    protected internal void set_NumericScale(Nullable`1<int> value);
    public string get_UdtAssemblyQualifiedName();
    protected internal void set_UdtAssemblyQualifiedName(string value);
    public Type get_DataType();
    protected internal void set_DataType(Type value);
    public string get_DataTypeName();
    protected internal void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
public KingbaseType get_KingbaseType();
    [CompilerGeneratedAttribute]
internal void set_KingbaseType(KingbaseType value);
    [CompilerGeneratedAttribute]
public UInt32 get_TypeOID();
    [CompilerGeneratedAttribute]
internal void set_TypeOID(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_TableOID();
    [CompilerGeneratedAttribute]
internal void set_TableOID(UInt32 value);
    [CompilerGeneratedAttribute]
public Nullable`1<short> get_ColumnAttributeNumber();
    [CompilerGeneratedAttribute]
internal void set_ColumnAttributeNumber(Nullable`1<short> value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
internal void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<KdbndpDbType> get_KdbndpDbType();
    [CompilerGeneratedAttribute]
internal void set_KdbndpDbType(Nullable`1<KdbndpDbType> value);
    public virtual object get_Item(string propertyName);
}
[PublicAPIAttribute]
public enum Kdbndp.ServerCompatibilityMode : Enum {
    public int value__;
    public static ServerCompatibilityMode None;
    public static ServerCompatibilityMode Redshift;
    public static ServerCompatibilityMode NoTypeLoading;
}
internal abstract class Kdbndp.SimpleFrontendMessage : FrontendMessage {
    internal int Length { get; }
    internal abstract virtual int get_Length();
    internal abstract virtual void WriteFully(KdbndpWriteBuffer buf);
    internal sealed virtual Task Write(KdbndpWriteBuffer buf, bool async);
    [AsyncStateMachineAttribute("Kdbndp.SimpleFrontendMessage/<FlushAndWrite>d__4")]
private Task FlushAndWrite(KdbndpWriteBuffer buf, bool async);
}
internal class Kdbndp.SingleThreadSynchronizationContext : SynchronizationContext {
    private BlockingCollection`1<CallbackAndState> _tasks;
    [CanBeNullAttribute]
private Thread _thread;
    private static int ThreadStayAliveMs;
    private string _threadName;
    internal SingleThreadSynchronizationContext(string threadName);
    public virtual void Post(SendOrPostCallback callback, object state);
    public sealed virtual void Dispose();
    private void WorkLoop();
}
internal class Kdbndp.SqlQueryParser : object {
    private Dictionary`2<string, int> _paramIndexMap;
    private StringBuilder _rewrittenSql;
    private List`1<string> oracleList;
    private List`1<KdbndpStatement> _statements;
    private KdbndpStatement _statement;
    private int _statementIndex;
    internal void ParseRawQuery(string sql, bool standardConformantStrings, KdbndpParameterCollection parameters, List`1<KdbndpStatement> statements, DbMode mode, bool deriveParameters);
    private void MoveToNextStatement();
    private static bool IsLetter(char ch);
    private static bool IsIdentifierStart(char ch);
    private static bool IsDollarTagIdentifier(char ch);
    private static bool IsIdentifier(char ch);
    private static bool IsParamNameChar(char ch);
}
[PublicAPIAttribute]
public enum Kdbndp.SslMode : Enum {
    public int value__;
    public static SslMode Disable;
    public static SslMode Prefer;
    public static SslMode Require;
}
internal enum Kdbndp.StatementOrPortal : Enum {
    public byte value__;
    public static StatementOrPortal Statement;
    public static StatementOrPortal Portal;
}
public enum Kdbndp.StatementType : Enum {
    public int value__;
    public static StatementType Select;
    public static StatementType Insert;
    public static StatementType Delete;
    public static StatementType Update;
    public static StatementType CreateTableAs;
    public static StatementType Move;
    public static StatementType Fetch;
    public static StatementType Copy;
    public static StatementType Other;
}
internal static class Kdbndp.Statics : object {
    internal static T Expect(IBackendMessage msg);
}
[ExtensionAttribute]
internal static class Kdbndp.TaskExtensions : object {
    [AsyncStateMachineAttribute("Kdbndp.TaskExtensions/<WithTimeout>d__0`1")]
[ExtensionAttribute]
internal static Task`1<T> WithTimeout(Task`1<T> task, KdbndpTimeout timeout);
    [AsyncStateMachineAttribute("Kdbndp.TaskExtensions/<WithTimeout>d__1")]
[ExtensionAttribute]
internal static Task WithTimeout(Task task, KdbndpTimeout timeout);
    [AsyncStateMachineAttribute("Kdbndp.TaskExtensions/<WithCancellation>d__2`1")]
[ExtensionAttribute]
internal static Task`1<T> WithCancellation(Task`1<T> task, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kdbndp.TaskExtensions/<WithCancellation>d__3")]
[ExtensionAttribute]
internal static Task WithCancellation(Task task, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<T> WithCancellationAndTimeout(Task`1<T> task, KdbndpTimeout timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task WithCancellationAndTimeout(Task task, KdbndpTimeout timeout, CancellationToken cancellationToken);
}
internal enum Kdbndp.Tls.AesMode : Enum {
    public byte value__;
    public static AesMode CBC;
    public static AesMode GCM;
}
internal enum Kdbndp.Tls.AlertDescription : Enum {
    public byte value__;
    public static AlertDescription CloseNotify;
    public static AlertDescription UnexpectedMessage;
    public static AlertDescription BadRecordMac;
    public static AlertDescription RecordOverflow;
    public static AlertDescription HandshakeFailure;
    public static AlertDescription BadCertificate;
    public static AlertDescription CertificateRevoked;
    public static AlertDescription CertificateExpired;
    public static AlertDescription CertificateUnknown;
    public static AlertDescription IllegalParameter;
    public static AlertDescription DecodeError;
    public static AlertDescription DecryptError;
    public static AlertDescription ProtocolVersion;
}
internal enum Kdbndp.Tls.AlertLevel : Enum {
    public byte value__;
    public static AlertLevel Warning;
    public static AlertLevel Fatal;
}
internal enum Kdbndp.Tls.CipherSuite : Enum {
    public ushort value__;
    public static CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA;
    public static CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA;
    public static CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA;
    public static CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA;
    public static CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA;
    public static CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA;
    public static CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA256;
    public static CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA256;
    public static CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA256;
    public static CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA256;
    public static CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA256;
    public static CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA256;
    public static CipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256;
    public static CipherSuite TLS_RSA_WITH_AES_256_GCM_SHA384;
    public static CipherSuite TLS_DHE_RSA_WITH_AES_128_GCM_SHA256;
    public static CipherSuite TLS_DHE_RSA_WITH_AES_256_GCM_SHA384;
    public static CipherSuite TLS_DHE_DSS_WITH_AES_128_GCM_SHA256;
    public static CipherSuite TLS_DHE_DSS_WITH_AES_256_GCM_SHA384;
    public static CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA;
    public static CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA;
    public static CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA;
    public static CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA;
    public static CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA;
    public static CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA;
    public static CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256;
    public static CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384;
    public static CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256;
    public static CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384;
    public static CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256;
    public static CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384;
    public static CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256;
    public static CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384;
    public static CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256;
    public static CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384;
    public static CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256;
    public static CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384;
    public static CipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256;
    public static CipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384;
    public static CipherSuite TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256;
    public static CipherSuite TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384;
}
internal class Kdbndp.Tls.CipherSuiteInfo : object {
    internal CipherSuite Id;
    internal KeyExchange KeyExchange;
    internal int AesKeyLen;
    internal TlsHashAlgorithm HashAlgorithm;
    internal PRFAlgorithm PRFAlgorithm;
    internal AesMode AesMode;
    public static CipherSuiteInfo[] Supported;
    public int MACLen { get; }
    public bool IsAllowedBefore1_2 { get; }
    private static CipherSuiteInfo();
    public int get_MACLen();
    public IncrementalHash CreateHMAC(Byte[] key);
    public HMAC CreatePrfHMAC(Byte[] key);
    public SignatureAlgorithm GetSignatureAlgorithm();
    public bool get_IsAllowedBefore1_2();
}
internal class Kdbndp.Tls.ClientAlertException : Exception {
    [CompilerGeneratedAttribute]
private AlertDescription <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtraInfo>k__BackingField;
    public AlertDescription Description { get; public set; }
    public string ExtraInfo { get; public set; }
    public ClientAlertException(AlertDescription description, string message);
    [CompilerGeneratedAttribute]
public AlertDescription get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(AlertDescription value);
    [CompilerGeneratedAttribute]
public string get_ExtraInfo();
    [CompilerGeneratedAttribute]
public void set_ExtraInfo(string value);
}
internal enum Kdbndp.Tls.ClientCertificateType : Enum {
    public byte value__;
    public static ClientCertificateType RSASign;
    public static ClientCertificateType DSSSign;
    public static ClientCertificateType RSAFixedDH;
    public static ClientCertificateType DSSFixedDH;
    public static ClientCertificateType ECDSASign;
    public static ClientCertificateType RSAFixedECDH;
    public static ClientCertificateType ECDSAFixedECDH;
}
internal class Kdbndp.Tls.ConnectionState : object {
    [CompilerGeneratedAttribute]
private TlsVersion <TlsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private CipherSuiteInfo <CipherSuite>k__BackingField;
    [CompilerGeneratedAttribute]
private Aes <ReadAes>k__BackingField;
    [CompilerGeneratedAttribute]
private Aes <WriteAes>k__BackingField;
    [CompilerGeneratedAttribute]
private IncrementalHash <ReadMac>k__BackingField;
    [CompilerGeneratedAttribute]
private IncrementalHash <WriteMac>k__BackingField;
    [CompilerGeneratedAttribute]
private ICryptoTransform <ReadAesECB>k__BackingField;
    [CompilerGeneratedAttribute]
private ICryptoTransform <WriteAesECB>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt64[] <ReadGCMTable>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt64[] <WriteGCMTable>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <MasterSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ClientRandom>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ServerRandom>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ReadSeqNum>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <WriteSeqNum>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ReadIv>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <WriteIv>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SecureRenegotiation>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ClientVerifyData>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ServerVerifyData>k__BackingField;
    public TlsVersion TlsVersion { get; public set; }
    [CanBeNullAttribute]
public CipherSuiteInfo CipherSuite { get; public set; }
    public Aes ReadAes { get; public set; }
    public Aes WriteAes { get; public set; }
    public int BlockLen { get; }
    public IncrementalHash ReadMac { get; public set; }
    public IncrementalHash WriteMac { get; public set; }
    public ICryptoTransform ReadAesECB { get; public set; }
    public ICryptoTransform WriteAesECB { get; public set; }
    public UInt64[] ReadGCMTable { get; public set; }
    public UInt64[] WriteGCMTable { get; public set; }
    public int MacLen { get; }
    public Byte[] MasterSecret { get; public set; }
    public Byte[] ClientRandom { get; public set; }
    public Byte[] ServerRandom { get; public set; }
    public ulong ReadSeqNum { get; public set; }
    public ulong WriteSeqNum { get; public set; }
    public Byte[] ReadIv { get; public set; }
    public Byte[] WriteIv { get; public set; }
    public bool SecureRenegotiation { get; public set; }
    public Byte[] ClientVerifyData { get; public set; }
    public Byte[] ServerVerifyData { get; public set; }
    public int IvLen { get; }
    public PRFAlgorithm PRFAlgorithm { get; }
    public bool IsAuthenticated { get; }
    public int WriteStartPos { get; }
    [CompilerGeneratedAttribute]
public TlsVersion get_TlsVersion();
    [CompilerGeneratedAttribute]
public void set_TlsVersion(TlsVersion value);
    [CompilerGeneratedAttribute]
public CipherSuiteInfo get_CipherSuite();
    [CompilerGeneratedAttribute]
public void set_CipherSuite(CipherSuiteInfo value);
    [CompilerGeneratedAttribute]
public Aes get_ReadAes();
    [CompilerGeneratedAttribute]
public void set_ReadAes(Aes value);
    [CompilerGeneratedAttribute]
public Aes get_WriteAes();
    [CompilerGeneratedAttribute]
public void set_WriteAes(Aes value);
    public int get_BlockLen();
    [CompilerGeneratedAttribute]
public IncrementalHash get_ReadMac();
    [CompilerGeneratedAttribute]
public void set_ReadMac(IncrementalHash value);
    [CompilerGeneratedAttribute]
public IncrementalHash get_WriteMac();
    [CompilerGeneratedAttribute]
public void set_WriteMac(IncrementalHash value);
    [CompilerGeneratedAttribute]
public ICryptoTransform get_ReadAesECB();
    [CompilerGeneratedAttribute]
public void set_ReadAesECB(ICryptoTransform value);
    [CompilerGeneratedAttribute]
public ICryptoTransform get_WriteAesECB();
    [CompilerGeneratedAttribute]
public void set_WriteAesECB(ICryptoTransform value);
    [CompilerGeneratedAttribute]
public UInt64[] get_ReadGCMTable();
    [CompilerGeneratedAttribute]
public void set_ReadGCMTable(UInt64[] value);
    [CompilerGeneratedAttribute]
public UInt64[] get_WriteGCMTable();
    [CompilerGeneratedAttribute]
public void set_WriteGCMTable(UInt64[] value);
    public int get_MacLen();
    [CompilerGeneratedAttribute]
public Byte[] get_MasterSecret();
    [CompilerGeneratedAttribute]
public void set_MasterSecret(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_ClientRandom();
    [CompilerGeneratedAttribute]
public void set_ClientRandom(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_ServerRandom();
    [CompilerGeneratedAttribute]
public void set_ServerRandom(Byte[] value);
    [CompilerGeneratedAttribute]
public ulong get_ReadSeqNum();
    [CompilerGeneratedAttribute]
public void set_ReadSeqNum(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_WriteSeqNum();
    [CompilerGeneratedAttribute]
public void set_WriteSeqNum(ulong value);
    [CompilerGeneratedAttribute]
public Byte[] get_ReadIv();
    [CompilerGeneratedAttribute]
public void set_ReadIv(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_WriteIv();
    [CompilerGeneratedAttribute]
public void set_WriteIv(Byte[] value);
    [CompilerGeneratedAttribute]
public bool get_SecureRenegotiation();
    [CompilerGeneratedAttribute]
public void set_SecureRenegotiation(bool value);
    [CompilerGeneratedAttribute]
public Byte[] get_ClientVerifyData();
    [CompilerGeneratedAttribute]
public void set_ClientVerifyData(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_ServerVerifyData();
    [CompilerGeneratedAttribute]
public void set_ServerVerifyData(Byte[] value);
    public int get_IvLen();
    public PRFAlgorithm get_PRFAlgorithm();
    public bool get_IsAuthenticated();
    public int get_WriteStartPos();
    public sealed virtual void Dispose();
}
internal enum Kdbndp.Tls.ContentType : Enum {
    public byte value__;
    public static ContentType ChangeCipherSpec;
    public static ContentType Alert;
    public static ContentType Handshake;
    public static ContentType ApplicationData;
}
internal class Kdbndp.Tls.EllipticCurve : object {
    internal static EllipticCurve P256;
    internal static EllipticCurve P384;
    internal static EllipticCurve P521;
    internal BigInt p;
    private BigInteger b;
    private BigInteger q;
    private BigInt negP;
    internal BigInt xg;
    internal BigInt yg;
    private Func`2<BigInt, BigInt> modp;
    internal int curveLen;
    internal Byte[] asnName;
    internal int curveByteLen { get; }
    private EllipticCurve(BigInt p, BigInteger b, BigInteger q, BigInt xg, BigInt yg, Func`2<BigInt, BigInt> modp, int curveLen, Byte[] asnName);
    private static EllipticCurve();
    internal int get_curveByteLen();
    internal Projective EcDouble(Projective s);
    private BigInt Replace(BigInt old, BigInt new_);
    private void Assign(BigInt& variable, BigInt new_);
    internal Projective EcAdd(Projective s, Projective t);
    internal Projective EcFullAdd(Projective s, Projective t);
    internal Projective EcFullSub(Projective s, Projective t);
    internal Affine EcAffinify(Projective s);
    internal Projective EcProjectify(Affine s);
    internal Projective EcMult(BigInt d, Projective s);
    internal Projective EcTwinMult(BigInt d0, Projective S, BigInt d1, Projective T);
    internal BigInt GenPriv(RandomNumberGenerator rng);
    internal static EllipticCurve GetCurveFromParameters(Byte[] pkParameters);
    internal void Ecdh(BigInt publicX, BigInt publicY, RandomNumberGenerator rng, Byte[]& preMasterSecret, Affine& publicPoint);
    internal static Nullable`1<bool> VerifySignature(Byte[] pkParameters, Byte[] pkKey, Byte[] hash, Byte[] signature);
}
internal enum Kdbndp.Tls.ExtensionType : Enum {
    public ushort value__;
    public static ExtensionType ServerName;
    public static ExtensionType SupportedEllipticCurves;
    public static ExtensionType SupportedPointFormats;
    public static ExtensionType SignatureAlgorithms;
    public static ExtensionType RenegotiationInfo;
}
internal class Kdbndp.Tls.GaloisCounterMode : object {
    private static void Mul(ulong h1, ulong h2, ulong y1, ulong y2, ulong x1, ulong x2, UInt64& ynext1, UInt64& ynext2);
    private static void MulWithTable(UInt64[] tbl, ulong y1, ulong y2, ulong x1, ulong x2, UInt64& ynext1, UInt64& ynext2);
    private static void MulWithTable2(UInt64[] tbl, ulong y1, ulong y2, Byte[] x, int offset, UInt64& ynext1, UInt64& ynext2);
    private static UInt64[] Construct(ulong h1, ulong h2);
    private static void Encrypt(Byte[] data, int offset, int len, ICryptoTransform key, Byte[] iv, int startCounter, Byte[] temp512);
    private static void CalcHash(ICryptoTransform key, Byte[] iv, Byte[] data, int offset, int len, ulong seqNum, ulong header, UInt64[] h, Byte[] temp512);
    private static ulong GetHeader(byte contentType, int length);
    public static void GCMAE(ICryptoTransform key, Byte[] iv, Byte[] data, int offset, int len, ulong seqNum, byte contentType, UInt64[] h, Byte[] temp512);
    public static bool GCMAD(ICryptoTransform key, Byte[] iv, Byte[] data, int offset, int len, ulong seqNum, byte contentType, UInt64[] h, Byte[] temp512);
    public static UInt64[] GetH(ICryptoTransform key);
}
internal class Kdbndp.Tls.HandshakeData : object {
    internal List`1<X509Certificate2> CertList;
    internal X509Chain CertChain;
    internal Hasher HandshakeHash1;
    internal Hasher HandshakeHash2;
    internal Hasher HandshakeHash1_384;
    internal Hasher HandshakeHash2_384;
    internal Hasher HandshakeHash1_MD5SHA1;
    internal Hasher HandshakeHash2_MD5SHA1;
    internal Hasher CertificateVerifyHash_SHA1;
    internal Hasher CertificateVerifyHash_MD5;
    internal Byte[] P;
    internal Byte[] G;
    internal Byte[] Ys;
    internal EllipticCurve EcCurve;
    internal BigInt EcX;
    internal BigInt EcY;
    internal List`1<ClientCertificateType> CertificateTypes;
    internal List`1<Tuple`2<TlsHashAlgorithm, SignatureAlgorithm>> SupportedSignatureAlgorithms;
    internal List`1<string> CertificateAuthorities;
    internal X509Chain SelectedClientCertificate;
}
internal class Kdbndp.Tls.HandshakeMessagesBuffer : object {
    private List`1<Byte[]> _messages;
    private Byte[] _headerBuffer;
    private int _headerBufferLen;
    private Byte[] _buffer;
    private int _bufferLen;
    [CompilerGeneratedAttribute]
private bool <HasServerHelloDone>k__BackingField;
    private bool _hasFinished;
    private bool _hasHelloRequest;
    public List`1<Byte[]> Messages { get; }
    public bool HasServerHelloDone { get; private set; }
    public bool HasBufferedData { get; }
    public List`1<Byte[]> get_Messages();
    [CompilerGeneratedAttribute]
public bool get_HasServerHelloDone();
    [CompilerGeneratedAttribute]
private void set_HasServerHelloDone(bool value);
    public bool get_HasBufferedData();
    private void CheckType(HandshakeType type);
    public static bool IsHelloRequest(Byte[] message);
    public int AddBytes(Byte[] buffer, int offset, int length, IgnoreHelloRequestsSetting ignoreHelloRequests);
    public void RemoveFirst();
    public void ClearMessages();
    public sealed virtual void Dispose();
}
internal enum Kdbndp.Tls.HandshakeType : Enum {
    public byte value__;
    public static HandshakeType HelloRequest;
    public static HandshakeType ClientHello;
    public static HandshakeType ServerHello;
    public static HandshakeType Certificate;
    public static HandshakeType ServerKeyExchange;
    public static HandshakeType CertificateRequest;
    public static HandshakeType ServerHelloDone;
    public static HandshakeType CertificateVerify;
    public static HandshakeType ClientKeyExchange;
    public static HandshakeType Finished;
}
internal abstract class Kdbndp.Tls.Hasher : object {
    internal static Byte[] EmptyByteArray;
    private static Hasher();
    public virtual void Initialize();
    public abstract virtual void Update(Byte[] arr, int offset, int len);
    public abstract virtual Byte[] Final();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public static HashAlgorithmName GetHashAlgorithmName(TlsHashAlgorithm hashAlgorithm);
    public static Hasher Create(TlsHashAlgorithm hashAlgorithm);
}
internal enum Kdbndp.Tls.KeyExchange : Enum {
    public byte value__;
    public static KeyExchange NULL;
    public static KeyExchange RSA;
    public static KeyExchange DHE_RSA;
    public static KeyExchange DHE_DSS;
    public static KeyExchange ECDHE_RSA;
    public static KeyExchange ECDHE_ECDSA;
    public static KeyExchange ECDH_RSA;
    public static KeyExchange ECDH_ECDSA;
}
internal enum Kdbndp.Tls.NamedCurve : Enum {
    public ushort value__;
    public static NamedCurve secp256r1;
    public static NamedCurve secp384r1;
    public static NamedCurve secp521r1;
}
internal enum Kdbndp.Tls.PRFAlgorithm : Enum {
    public byte value__;
    public static PRFAlgorithm TLSPrfSHA256;
    public static PRFAlgorithm TLSPrfSHA384;
    public static PRFAlgorithm TLSPrfMD5SHA1;
}
internal static class Kdbndp.Tls.RsaPKCS1 : object {
    public static bool VerifyRsaPKCS1(RSA key, Byte[] signature, Byte[] hash, bool allowNoPadding);
    public static Byte[] SignRsaPKCS1(RSA key, Byte[] hash);
}
internal class Kdbndp.Tls.ServerAlertException : Exception {
    [CompilerGeneratedAttribute]
private AlertDescription <Description>k__BackingField;
    private AlertDescription Description { get; private set; }
    public ServerAlertException(AlertDescription description);
    [CompilerGeneratedAttribute]
private AlertDescription get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(AlertDescription value);
}
internal enum Kdbndp.Tls.SignatureAlgorithm : Enum {
    public byte value__;
    public static SignatureAlgorithm RSA;
    public static SignatureAlgorithm DSA;
    public static SignatureAlgorithm ECDSA;
}
internal class Kdbndp.Tls.TlsClientStream : Stream {
    private static TlsVersion HighestTlsVersionSupported;
    private static int MaxEncryptedRecordLen;
    private Byte[] _readBuf;
    private Byte[] _writeBuf;
    private int _readStart;
    private int _readEnd;
    private int _readPacketLen;
    private SemaphoreSlim _writeLock;
    private Stream _baseStream;
    private ConnectionState _connState;
    private ConnectionState _readConnState;
    [CanBeNullAttribute]
private ConnectionState _pendingConnState;
    private RandomNumberGenerator _rng;
    private ContentType _contentType;
    private int _plaintextLen;
    private int _plaintextStart;
    private Byte[] _tempBuf8_1;
    private Byte[] _tempBuf8_2;
    private Byte[] _temp512_1;
    private Byte[] _temp512_2;
    private HandshakeMessagesBuffer _handshakeMessagesBuffer;
    private HandshakeData _handshakeData;
    private bool _noRenegotiationExtensionSupportIsFatal;
    private string _hostName;
    private X509CertificateCollection _clientCertificates;
    private RemoteCertificateValidationCallback _remoteCertificationValidationCallback;
    private bool _checkCertificateRevocation;
    private bool _waitingForChangeCipherSpec;
    private bool _waitingForFinished;
    private int _writePos;
    private int _decryptedReadPos;
    private int _decryptedReadEnd;
    private static int MaxBufferedReadData;
    private Queue`1<Byte[]> _bufferedReadData;
    private int _posBufferedReadData;
    private int _lenBufferedReadData;
    private bool _eof;
    private bool _closed;
    private int WriteSpaceLeft { get; }
    public long Position { get; public set; }
    public long Length { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public TlsClientStream(Stream baseStream);
    [AsyncStateMachineAttribute("Kdbndp.Tls.TlsClientStream/<ReadRecord>d__39")]
private Task`1<bool> ReadRecord(bool async);
    private void Decrypt();
    private int Encrypt(int startPos, int len);
    private void UpdateHandshakeHash(Byte[] buf, int offset, int len);
    [AsyncStateMachineAttribute("Kdbndp.Tls.TlsClientStream/<GetInitialHandshakeMessages>d__43")]
private Task GetInitialHandshakeMessages(bool async, bool allowApplicationData);
    private int TraverseHandshakeMessages();
    private int GenerateHandshakeResponse();
    private void SendHandshakeMessage(SendHandshakeMessageDelegate func, Int32& offset, int ivLen);
    [AsyncStateMachineAttribute("Kdbndp.Tls.TlsClientStream/<WaitForHandshakeCompleted>d__48")]
private Task WaitForHandshakeCompleted(bool initialHandshake, bool async);
    private HandshakeType SendClientHello(Int32& offset);
    private void ParseServerHelloMessage(Byte[] buf, Int32& pos, int endPos);
    private void ParseCertificateMessage(Byte[] buf, Int32& pos);
    private void SetMasterSecret(Byte[] preMasterSecret);
    private HandshakeType SendClientKeyExchangeRsa(Int32& offset);
    private void ParseServerKeyExchangeMessage(Byte[] buf, Int32& pos);
    private HandshakeType SendClientKeyExchangeDhe(Int32& offset);
    private HandshakeType SendClientKeyExchangeEcdh(Int32& offset);
    private HandshakeType SendClientKeyExchangeEcdhe(Int32& offset);
    private void ParseCertificateRequest(Byte[] buf, Int32& pos);
    private HandshakeType SendClientCertificate(Int32& offset);
    private HandshakeType SendCertificateVerify(Int32& offset);
    private void SendChangeCipherSpec(Int32& offset, int ivLen);
    private HandshakeType SendFinished(Int32& offset);
    private void ParseChangeCipherSpec();
    private void ParseFinishedMessage(Byte[] buf);
    private void SendAlertFatal(AlertDescription description, string message);
    [AsyncStateMachineAttribute("Kdbndp.Tls.TlsClientStream/<WriteAlertFatal>d__66")]
private Task WriteAlertFatal(AlertDescription description, bool async);
    [AsyncStateMachineAttribute("Kdbndp.Tls.TlsClientStream/<SendClosureAlert>d__67")]
private Task SendClosureAlert(bool async);
    [AsyncStateMachineAttribute("Kdbndp.Tls.TlsClientStream/<HandleAlertMessage>d__68")]
private Task HandleAlertMessage(bool async);
    private void ResetWritePos();
    private void CheckNotClosed();
    private void EnqueueReadData(bool allowApplicationData);
    [AsyncStateMachineAttribute("Kdbndp.Tls.TlsClientStream/<PerformInitialHandshake>d__72")]
public Task PerformInitialHandshake(string hostName, X509CertificateCollection clientCertificates, RemoteCertificateValidationCallback remoteCertificateValidationCallback, bool checkCertificateRevocation, bool async);
    private int get_WriteSpaceLeft();
    public virtual void Write(Byte[] buffer, int offset, int len);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int len, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kdbndp.Tls.TlsClientStream/<Write>d__77")]
private Task Write(Byte[] buffer, int offset, int len, bool async);
    public virtual void Flush();
    [AsyncStateMachineAttribute("Kdbndp.Tls.TlsClientStream/<FlushAsync>d__79")]
public virtual Task FlushAsync(CancellationToken cancellataionToken);
    [AsyncStateMachineAttribute("Kdbndp.Tls.TlsClientStream/<Flush>d__80")]
private Task Flush(bool async);
    public virtual int Read(Byte[] buffer, int offset, int len);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int len, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kdbndp.Tls.TlsClientStream/<Read>d__83")]
private Task`1<int> Read(Byte[] buffer, int offset, int len, bool onlyProcessHandshake, bool readNewDataIfAvailable, bool async);
    protected virtual void Dispose(bool disposing);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual void SetLength(long value);
    public virtual bool get_CanSeek();
    public bool HasBufferedReadData(bool checkNetworkStream);
}
internal enum Kdbndp.Tls.TlsHashAlgorithm : Enum {
    public byte value__;
    public static TlsHashAlgorithm MD5;
    public static TlsHashAlgorithm SHA1;
    public static TlsHashAlgorithm SHA256;
    public static TlsHashAlgorithm SHA384;
    public static TlsHashAlgorithm SHA512;
    public static TlsHashAlgorithm SM3;
    public static TlsHashAlgorithm MD5SHA1;
}
internal enum Kdbndp.Tls.TlsVersion : Enum {
    public ushort value__;
    public static TlsVersion TLSv1_0;
    public static TlsVersion TLSv1_1;
    public static TlsVersion TLSv1_2;
}
internal static class Kdbndp.Tls.Utils : object {
    public static Dictionary`2<string, string> HashNameToOID;
    private static Utils();
    public static int GetHashLen(TlsHashAlgorithm hashAlgorithm);
    public static void ClearArray(Array array);
    public static bool ArraysEqual(Byte[] arr1, int offset1, Byte[] arr2, int offset2, int len);
    public static int WriteUInt64(Byte[] buf, int offset, ulong v);
    public static int WriteUInt32(Byte[] buf, int offset, UInt32 v);
    public static int WriteUInt24(Byte[] buf, int offset, int v);
    public static int WriteUInt16(Byte[] buf, int offset, ushort v);
    public static ushort ReadUInt16(Byte[] buf, Int32& offset);
    public static int ReadUInt24(Byte[] buf, Int32& offset);
    public static UInt32 ReadUInt32(Byte[] buf, Int32& offset);
    public static ulong ReadUInt64(Byte[] buf, Int32& offset);
    public static Byte[] PRF(HMAC hmac, string label, Byte[] seed, int bytesNeeded);
    public static Byte[] PRF(PRFAlgorithm prfAlgorithm, Byte[] key, string label, Byte[] seed, int bytesNeeded);
    public static int GetASNLength(Byte[] buf, Int32& offset);
    public static bool HostnameInCertificate(X509Certificate2 certificate, string hostname);
    public static bool MatchHostname(string altname, string hostname);
    public static Byte[] DecodeDERSignature(Byte[] signature, int offset, int integerLength);
    public static BigInteger BigIntegerFromBigEndian(Byte[] arr, int offset, int len);
    public static Byte[] BigEndianFromBigInteger(BigInteger bi);
    public static Byte[] EncryptPkcsPadding(X509Certificate2 cert, Byte[] rgb);
}
internal enum Kdbndp.TransactionStatus : Enum {
    public byte value__;
    public static TransactionStatus Idle;
    public static TransactionStatus InTransactionBlock;
    public static TransactionStatus InFailedTransactionBlock;
    public static TransactionStatus Pending;
}
[ObsoleteAttribute("Purely for EF Core backwards compatibility")]
internal class Kdbndp.TypeAndMapping : ValueType {
    internal Type HandlerType;
    internal TypeMappingAttribute Mapping;
}
[ObsoleteAttribute("Purely for EF Core backwards compatibility")]
internal class Kdbndp.TypeHandler`1 : object {
}
[ObsoleteAttribute("Purely for EF Core backwards compatibility")]
internal class Kdbndp.TypeHandlerRegistry : object {
    internal static Dictionary`2<string, TypeAndMapping> HandlerTypes;
    private static TypeHandlerRegistry();
}
public abstract class Kdbndp.TypeHandlers.ArrayHandler : KdbndpTypeHandler {
    public virtual ArrayHandler CreateArrayHandler(KingbaseType arrayBackendType);
    public virtual RangeHandler CreateRangeHandler(KingbaseType rangeBackendType);
}
public class Kdbndp.TypeHandlers.ArrayHandler`1 : ArrayHandler {
    private int _lowerBound;
    private KdbndpTypeHandler _elementHandler;
    public ArrayHandler`1(KdbndpTypeHandler elementHandler, int lowerBound);
    internal virtual Type GetFieldType(FieldDescription fieldDescription);
    internal virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    internal virtual TAny Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.ArrayHandler`1/<Read>d__6`1")]
protected internal virtual ValueTask`1<TAny> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.ArrayHandler`1/<ReadAsObject>d__7")]
internal virtual ValueTask`1<object> ReadAsObject(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    internal virtual object ReadAsObject(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.ArrayHandler`1/<ReadArray>d__9`1")]
protected ValueTask`1<Array> ReadArray(KdbndpReadBuffer buf, bool async);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.ArrayHandler`1/<ReadList>d__10`1")]
protected ValueTask`1<List`1<T>> ReadList(KdbndpReadBuffer buf, bool async);
    private static Exception MixedTypesOrJaggedArrayException(Exception innerException);
    private static Exception CantWriteTypeException(Type type);
    protected internal virtual int ValidateAndGetLength(TAny value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    protected internal virtual int ValidateObjectAndGetLength(object value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    private int ValidateAndGetLength(object value, KdbndpLengthCache& lengthCache);
    private int ValidateAndGetLengthGeneric(ICollection`1<TElement> value, KdbndpLengthCache& lengthCache);
    private int ValidateAndGetLengthNonGeneric(ICollection value, KdbndpLengthCache& lengthCache);
    internal virtual Task WriteWithLengthInternal(TAny value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    protected internal virtual Task WriteObjectWithLength(object value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.ArrayHandler`1/<WriteGeneric>d__20")]
private Task WriteGeneric(ICollection`1<TElement> value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, bool async);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.ArrayHandler`1/<WriteNonGeneric>d__21")]
private Task WriteNonGeneric(ICollection value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, bool async);
}
internal class Kdbndp.TypeHandlers.ArrayHandlerWithPsv`2 : ArrayHandler`1<TElement> {
    public ArrayHandlerWithPsv`2(KdbndpTypeHandler elementHandler);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.ArrayHandlerWithPsv`2/<Read>d__1`1")]
protected internal virtual ValueTask`1<TAny> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    internal virtual object ReadPsvAsObject(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.ArrayHandlerWithPsv`2/<ReadPsvAsObject>d__3")]
internal virtual ValueTask`1<object> ReadPsvAsObject(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<TAny> <>n__0(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
}
internal class Kdbndp.TypeHandlers.BitStringArrayHandler : ArrayHandler`1<BitArray> {
    public BitStringArrayHandler(BitStringHandler elementHandler);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.BitStringArrayHandler/<Read>d__1`1")]
protected internal virtual ValueTask`1<TAny> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    internal virtual object ReadAsObject(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.BitStringArrayHandler/<ReadAsObject>d__3")]
internal virtual ValueTask`1<object> ReadAsObject(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<TAny> <>n__0(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
}
[TypeMappingAttribute("bit varying", "39", "Mono.Cecil.CustomAttributeArgument[]")]
[TypeMappingAttribute("bit", "25")]
internal class Kdbndp.TypeHandlers.BitStringHandler : KdbndpTypeHandler`1<BitArray> {
    internal virtual Type GetFieldType(FieldDescription fieldDescription);
    internal virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    public virtual ArrayHandler CreateArrayHandler(KingbaseType backendType);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.BitStringHandler/<Read>d__3")]
public virtual ValueTask`1<BitArray> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.BitStringHandler/<Kdbndp-TypeHandling-IKdbndpTypeHandler<System-Collections-Specialized-BitVector32>-Read>d__4")]
private sealed virtual override ValueTask`1<BitVector32> Kdbndp.TypeHandling.IKdbndpTypeHandler<System.Collections.Specialized.BitVector32>.Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.BitStringHandler/<Kdbndp-TypeHandling-IKdbndpTypeHandler<System-Boolean>-Read>d__5")]
private sealed virtual override ValueTask`1<bool> Kdbndp.TypeHandling.IKdbndpTypeHandler<System.Boolean>.Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    private sealed virtual override ValueTask`1<string> Kdbndp.TypeHandling.IKdbndpTypeHandler<System.String>.Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.BitStringHandler/<ReadAsObject>d__7")]
internal virtual ValueTask`1<object> ReadAsObject(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    internal virtual object ReadAsObject(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(BitArray value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(BitVector32 value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(bool value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(string value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.BitStringHandler/<Write>d__13")]
public virtual Task Write(BitArray value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.BitStringHandler/<Write>d__14")]
public sealed virtual Task Write(BitVector32 value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.BitStringHandler/<Write>d__15")]
public sealed virtual Task Write(bool value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.BitStringHandler/<Write>d__16")]
public sealed virtual Task Write(string value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
}
[TypeMappingAttribute("boolean", "2", "3", "System.Boolean")]
[TypeMappingAttribute("sqlserver_bit", "534", "3")]
internal class Kdbndp.TypeHandlers.BoolHandler : KdbndpSimpleTypeHandler`1<bool> {
    public virtual bool Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(bool value, KdbndpParameter parameter);
    public virtual void Write(bool value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("bytea", "4", "1", "Mono.Cecil.CustomAttributeArgument[]")]
[TypeMappingAttribute("blob", "505", "1")]
[TypeMappingAttribute("tinyblob", "510", "1")]
[TypeMappingAttribute("mediumblob", "511", "1")]
[TypeMappingAttribute("longblob", "512", "1")]
[TypeMappingAttribute("binary", "506", "1")]
[TypeMappingAttribute("varbinary", "507", "1")]
[TypeMappingAttribute("sqlserver_binary", "508", "1")]
[TypeMappingAttribute("sqlserver_varbinary", "509", "1")]
public class Kdbndp.TypeHandlers.ByteaHandler : KdbndpTypeHandler`1<Byte[]> {
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.ByteaHandler/<Read>d__0")]
public virtual ValueTask`1<Byte[]> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    private sealed virtual override ValueTask`1<ArraySegment`1<byte>> Kdbndp.TypeHandling.IKdbndpTypeHandler<System.ArraySegment<System.Byte>>.Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(Byte[] value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(ArraySegment`1<byte> value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.ByteaHandler/<Write>d__4")]
public virtual Task Write(Byte[] value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.ByteaHandler/<Write>d__5")]
public sealed virtual Task Write(ArraySegment`1<byte> value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
}
internal class Kdbndp.TypeHandlers.DateTimeHandlers.DateHandler : KdbndpSimpleTypeHandlerWithPsv`2<DateTime, KdbndpDate> {
    internal static int KingbaseEpochJdate;
    internal static int MonthsPerYear;
    private bool _convertInfinityDateTime;
    public DateHandler(bool convertInfinityDateTime);
    public virtual DateTime Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    protected virtual KdbndpDate ReadPsv(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(DateTime value, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(KdbndpDate value, KdbndpParameter parameter);
    public virtual void Write(DateTime value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public virtual void Write(KdbndpDate value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("date", "7", "5", "KdbndpTypes.KdbndpDate")]
internal class Kdbndp.TypeHandlers.DateTimeHandlers.DateHandlerFactory : KdbndpTypeHandlerFactory`1<DateTime> {
    protected virtual KdbndpTypeHandler`1<DateTime> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.DateTimeHandlers.DateTimeHandler : TimestampHandler {
    public DateTimeHandler(bool integerFormat, bool convertInfinityDateTime);
    public virtual DateTime Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    protected virtual KdbndpDateTime ReadPsv(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override DateTimeOffset Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.DateTimeOffset>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public sealed virtual int ValidateAndGetLength(DateTimeOffset value, KdbndpParameter parameter);
    public virtual void Write(KdbndpDateTime value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public virtual void Write(DateTime value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(DateTimeOffset value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("mysql_datetime", "524", "6")]
internal class Kdbndp.TypeHandlers.DateTimeHandlers.DateTimeHandlerFactory : KdbndpTypeHandlerFactory`1<DateTime> {
    protected virtual KdbndpTypeHandler`1<DateTime> Create(KdbndpConnection conn);
}
[TypeMappingAttribute("dsinterval", "655", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Kdbndp.TypeHandlers.DateTimeHandlers.DSIntervalHandlerFactory : KdbndpTypeHandlerFactory`1<TimeSpan> {
    protected virtual KdbndpTypeHandler`1<TimeSpan> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.DateTimeHandlers.IntervalDSHandler : KdbndpSimpleTypeHandlerWithPsv`2<TimeSpan, KdbndpIntervalDS> {
    private bool _integerFormat;
    public IntervalDSHandler(bool integerFormat);
    public virtual TimeSpan Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    protected virtual KdbndpIntervalDS ReadPsv(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(TimeSpan value, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(KdbndpIntervalDS value, KdbndpParameter parameter);
    public virtual void Write(KdbndpIntervalDS value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public virtual void Write(TimeSpan value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
internal class Kdbndp.TypeHandlers.DateTimeHandlers.IntervalHandler : KdbndpSimpleTypeHandlerWithPsv`2<TimeSpan, KdbndpTimeSpan> {
    private bool _integerFormat;
    public IntervalHandler(bool integerFormat);
    public virtual TimeSpan Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    protected virtual KdbndpTimeSpan ReadPsv(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(TimeSpan value, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(KdbndpTimeSpan value, KdbndpParameter parameter);
    public virtual void Write(KdbndpTimeSpan value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public virtual void Write(TimeSpan value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("interval", "30", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Kdbndp.TypeHandlers.DateTimeHandlers.IntervalHandlerFactory : KdbndpTypeHandlerFactory`1<TimeSpan> {
    protected virtual KdbndpTypeHandler`1<TimeSpan> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.DateTimeHandlers.IntervalYMHandler : KdbndpSimpleTypeHandlerWithPsv`2<TimeSpan, KdbndpIntervalYM> {
    private bool _integerFormat;
    public IntervalYMHandler(bool integerFormat);
    public virtual TimeSpan Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    protected virtual KdbndpIntervalYM ReadPsv(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(KdbndpIntervalYM value, KdbndpParameter parameter);
    public virtual void Write(KdbndpIntervalYM value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(TimeSpan value, KdbndpParameter parameter);
    public virtual void Write(TimeSpan value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("yminterval", "656", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Kdbndp.TypeHandlers.DateTimeHandlers.IntervalYMHandlerFactory : KdbndpTypeHandlerFactory`1<TimeSpan> {
    protected virtual KdbndpTypeHandler`1<TimeSpan> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.DateTimeHandlers.MsqlTimeHandler : KdbndpSimpleTypeHandler`1<TimeSpan> {
    private bool _integerFormat;
    public MsqlTimeHandler(bool integerFormat);
    public virtual TimeSpan Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(TimeSpan value, KdbndpParameter parameter);
    public virtual void Write(TimeSpan value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
internal class Kdbndp.TypeHandlers.DateTimeHandlers.MysqlDateHandler : KdbndpSimpleTypeHandlerWithPsv`2<DateTime, KdbndpDate> {
    internal static int KingbaseEpochJdate;
    internal static int MonthsPerYear;
    private bool _convertInfinityDateTime;
    public MysqlDateHandler(bool convertInfinityDateTime);
    public virtual DateTime Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    protected virtual KdbndpDate ReadPsv(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(DateTime value, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(KdbndpDate value, KdbndpParameter parameter);
    public virtual void Write(DateTime value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public virtual void Write(KdbndpDate value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("mysql_date", "523", "5")]
internal class Kdbndp.TypeHandlers.DateTimeHandlers.MysqlDateHandlerFactory : KdbndpTypeHandlerFactory`1<DateTime> {
    protected virtual KdbndpTypeHandler`1<DateTime> Create(KdbndpConnection conn);
}
[TypeMappingAttribute("mysql_time", "522", "17")]
internal class Kdbndp.TypeHandlers.DateTimeHandlers.MysqlTimeHandlerFactory : KdbndpTypeHandlerFactory`1<TimeSpan> {
    protected virtual KdbndpTypeHandler`1<TimeSpan> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.DateTimeHandlers.MysqlTimestampHandler : KdbndpSimpleTypeHandlerWithPsv`2<DateTime, KdbndpDateTime> {
    internal static UInt32 TypeOID;
    private bool _integerFormat;
    protected bool ConvertInfinityDateTime;
    internal MysqlTimestampHandler(bool integerFormat, bool convertInfinityDateTime);
    public virtual DateTime Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    protected virtual KdbndpDateTime ReadPsv(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    protected KdbndpDateTime ReadTimeStamp(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private KdbndpDateTime ReadInteger(KdbndpReadBuffer buf);
    private KdbndpDateTime ReadDouble(KdbndpReadBuffer buf);
    public virtual int ValidateAndGetLength(DateTime value, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(KdbndpDateTime value, KdbndpParameter parameter);
    public virtual void Write(KdbndpDateTime value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    private void WriteInteger(KdbndpDateTime value, KdbndpWriteBuffer buf);
    private void WriteDouble(KdbndpDateTime value, KdbndpWriteBuffer buf);
    public virtual void Write(DateTime value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("mysql_timestamp", "521", "6")]
internal class Kdbndp.TypeHandlers.DateTimeHandlers.MysqlTimestampHandlerFactory : KdbndpTypeHandlerFactory`1<DateTime> {
    protected virtual KdbndpTypeHandler`1<DateTime> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.DateTimeHandlers.SqlServerDateHandler : KdbndpSimpleTypeHandlerWithPsv`2<DateTime, KdbndpDate> {
    internal static int KingbaseEpochJdate;
    internal static int MonthsPerYear;
    private bool _convertInfinityDateTime;
    public SqlServerDateHandler(bool convertInfinityDateTime);
    public virtual DateTime Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    protected virtual KdbndpDate ReadPsv(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(DateTime value, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(KdbndpDate value, KdbndpParameter parameter);
    public virtual void Write(DateTime value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public virtual void Write(KdbndpDate value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("sqlserver_date", "527", "5")]
internal class Kdbndp.TypeHandlers.DateTimeHandlers.SqlServerDateHandlerFactory : KdbndpTypeHandlerFactory`1<DateTime> {
    protected virtual KdbndpTypeHandler`1<DateTime> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.DateTimeHandlers.SqlServerDateTimeHandler : TimestampHandler {
    public SqlServerDateTimeHandler(bool integerFormat, bool convertInfinityDateTime);
    public virtual DateTime Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    protected virtual KdbndpDateTime ReadPsv(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override DateTimeOffset Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.DateTimeOffset>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public sealed virtual int ValidateAndGetLength(DateTimeOffset value, KdbndpParameter parameter);
    public virtual void Write(KdbndpDateTime value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public virtual void Write(DateTime value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(DateTimeOffset value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("sqlserver_datetime", "528", "6")]
internal class Kdbndp.TypeHandlers.DateTimeHandlers.SqlServerDateTimeHandlerFactory : KdbndpTypeHandlerFactory`1<DateTime> {
    protected virtual KdbndpTypeHandler`1<DateTime> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.DateTimeHandlers.SqlServerTimeHandler : KdbndpSimpleTypeHandler`1<TimeSpan> {
    private bool _integerFormat;
    public SqlServerTimeHandler(bool integerFormat);
    public virtual TimeSpan Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(TimeSpan value, KdbndpParameter parameter);
    public virtual void Write(TimeSpan value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("sqlserver_time", "532", "17")]
internal class Kdbndp.TypeHandlers.DateTimeHandlers.SqlServerTimeHandlerFactory : KdbndpTypeHandlerFactory`1<TimeSpan> {
    protected virtual KdbndpTypeHandler`1<TimeSpan> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.DateTimeHandlers.TimeHandler : KdbndpSimpleTypeHandler`1<TimeSpan> {
    private bool _integerFormat;
    public TimeHandler(bool integerFormat);
    public virtual TimeSpan Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(TimeSpan value, KdbndpParameter parameter);
    public virtual void Write(TimeSpan value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("time", "20", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Kdbndp.TypeHandlers.DateTimeHandlers.TimeHandlerFactory : KdbndpTypeHandlerFactory`1<TimeSpan> {
    protected virtual KdbndpTypeHandler`1<TimeSpan> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.DateTimeHandlers.TimestampHandler : KdbndpSimpleTypeHandlerWithPsv`2<DateTime, KdbndpDateTime> {
    internal static UInt32 TypeOID;
    private bool _integerFormat;
    protected bool ConvertInfinityDateTime;
    internal TimestampHandler(bool integerFormat, bool convertInfinityDateTime);
    public virtual DateTime Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    protected virtual KdbndpDateTime ReadPsv(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    protected KdbndpDateTime ReadTimeStamp(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private KdbndpDateTime ReadInteger(KdbndpReadBuffer buf);
    private KdbndpDateTime ReadDouble(KdbndpReadBuffer buf);
    public virtual int ValidateAndGetLength(DateTime value, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(KdbndpDateTime value, KdbndpParameter parameter);
    public virtual void Write(KdbndpDateTime value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    private void WriteInteger(KdbndpDateTime value, KdbndpWriteBuffer buf);
    private void WriteDouble(KdbndpDateTime value, KdbndpWriteBuffer buf);
    public virtual void Write(DateTime value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("timestamp", "21", "Mono.Cecil.CustomAttributeArgument[]", "Mono.Cecil.CustomAttributeArgument[]", "6")]
[TypeMappingAttribute("ora_date", "634", "6")]
[TypeMappingAttribute("sys.datetime", "635", "6")]
internal class Kdbndp.TypeHandlers.DateTimeHandlers.TimestampHandlerFactory : KdbndpTypeHandlerFactory`1<DateTime> {
    protected virtual KdbndpTypeHandler`1<DateTime> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.DateTimeHandlers.TimestampTzHandler : TimestampHandler {
    public TimestampTzHandler(bool integerFormat, bool convertInfinityDateTime);
    public virtual DateTime Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    protected virtual KdbndpDateTime ReadPsv(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override DateTimeOffset Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.DateTimeOffset>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public sealed virtual int ValidateAndGetLength(DateTimeOffset value, KdbndpParameter parameter);
    public virtual void Write(KdbndpDateTime value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public virtual void Write(DateTime value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(DateTimeOffset value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("timestamp with time zone", "26", "27", "System.DateTimeOffset")]
internal class Kdbndp.TypeHandlers.DateTimeHandlers.TimestampTzHandlerFactory : KdbndpTypeHandlerFactory`1<DateTime> {
    protected virtual KdbndpTypeHandler`1<DateTime> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.DateTimeHandlers.TimeTzHandler : KdbndpSimpleTypeHandler`1<DateTimeOffset> {
    private bool _integerFormat;
    public TimeTzHandler(bool integerFormat);
    public virtual DateTimeOffset Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override DateTime Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.DateTime>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override TimeSpan Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.TimeSpan>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(DateTimeOffset value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(TimeSpan value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(DateTime value, KdbndpParameter parameter);
    public virtual void Write(DateTimeOffset value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(DateTime value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(TimeSpan value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("time with time zone", "31")]
internal class Kdbndp.TypeHandlers.DateTimeHandlers.TimeTzHandlerFactory : KdbndpTypeHandlerFactory`1<DateTimeOffset> {
    protected virtual KdbndpTypeHandler`1<DateTimeOffset> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.EnumHandler`1 : KdbndpSimpleTypeHandler`1<TEnum> {
    private Dictionary`2<TEnum, string> _enumToLabel;
    private Dictionary`2<string, TEnum> _labelToEnum;
    public Type EnumType { get; }
    internal EnumHandler`1(Dictionary`2<TEnum, string> enumToLabel, Dictionary`2<string, TEnum> labelToEnum);
    public sealed virtual Type get_EnumType();
    public virtual TEnum Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(TEnum value, KdbndpParameter parameter);
    public virtual void Write(TEnum value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
internal class Kdbndp.TypeHandlers.EnumTypeHandlerFactory`1 : KdbndpTypeHandlerFactory`1<TEnum> {
    private Dictionary`2<TEnum, string> _enumToLabel;
    private Dictionary`2<string, TEnum> _labelToEnum;
    [CompilerGeneratedAttribute]
private IKdbndpNameTranslator <NameTranslator>k__BackingField;
    public IKdbndpNameTranslator NameTranslator { get; }
    internal EnumTypeHandlerFactory`1(IKdbndpNameTranslator nameTranslator);
    protected virtual KdbndpTypeHandler`1<TEnum> Create(KdbndpConnection conn);
    [CompilerGeneratedAttribute]
public sealed virtual IKdbndpNameTranslator get_NameTranslator();
}
[TypeMappingAttribute("tsquery", "46", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Kdbndp.TypeHandlers.FullTextSearchHandlers.TsQueryHandler : KdbndpTypeHandler`1<KdbndpTsQuery> {
    private static int MaxSingleTokenBytes;
    private Stack`1<Tuple`2<KdbndpTsQuery, int>> _nodes;
    private KdbndpTsQuery _value;
    private Stack`1<KdbndpTsQuery> _stack;
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.FullTextSearchHandlers.TsQueryHandler/<Read>d__4")]
public virtual ValueTask`1<KdbndpTsQuery> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.FullTextSearchHandlers.TsQueryHandler/<Kdbndp-TypeHandling-IKdbndpTypeHandler<KdbndpTypes-KdbndpTsQueryEmpty>-Read>d__5")]
private sealed virtual override ValueTask`1<KdbndpTsQueryEmpty> Kdbndp.TypeHandling.IKdbndpTypeHandler<KdbndpTypes.KdbndpTsQueryEmpty>.Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.FullTextSearchHandlers.TsQueryHandler/<Kdbndp-TypeHandling-IKdbndpTypeHandler<KdbndpTypes-KdbndpTsQueryLexeme>-Read>d__6")]
private sealed virtual override ValueTask`1<KdbndpTsQueryLexeme> Kdbndp.TypeHandling.IKdbndpTypeHandler<KdbndpTypes.KdbndpTsQueryLexeme>.Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.FullTextSearchHandlers.TsQueryHandler/<Kdbndp-TypeHandling-IKdbndpTypeHandler<KdbndpTypes-KdbndpTsQueryNot>-Read>d__7")]
private sealed virtual override ValueTask`1<KdbndpTsQueryNot> Kdbndp.TypeHandling.IKdbndpTypeHandler<KdbndpTypes.KdbndpTsQueryNot>.Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.FullTextSearchHandlers.TsQueryHandler/<Kdbndp-TypeHandling-IKdbndpTypeHandler<KdbndpTypes-KdbndpTsQueryAnd>-Read>d__8")]
private sealed virtual override ValueTask`1<KdbndpTsQueryAnd> Kdbndp.TypeHandling.IKdbndpTypeHandler<KdbndpTypes.KdbndpTsQueryAnd>.Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.FullTextSearchHandlers.TsQueryHandler/<Kdbndp-TypeHandling-IKdbndpTypeHandler<KdbndpTypes-KdbndpTsQueryOr>-Read>d__9")]
private sealed virtual override ValueTask`1<KdbndpTsQueryOr> Kdbndp.TypeHandling.IKdbndpTypeHandler<KdbndpTypes.KdbndpTsQueryOr>.Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.FullTextSearchHandlers.TsQueryHandler/<Kdbndp-TypeHandling-IKdbndpTypeHandler<KdbndpTypes-KdbndpTsQueryFollowedBy>-Read>d__10")]
private sealed virtual override ValueTask`1<KdbndpTsQueryFollowedBy> Kdbndp.TypeHandling.IKdbndpTypeHandler<KdbndpTypes.KdbndpTsQueryFollowedBy>.Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    private void InsertInTree(KdbndpTsQuery node);
    public virtual int ValidateAndGetLength(KdbndpTsQuery value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    private int GetNodeLength(KdbndpTsQuery node);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.FullTextSearchHandlers.TsQueryHandler/<Write>d__14")]
public virtual Task Write(KdbndpTsQuery query, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    private int GetTokenCount(KdbndpTsQuery node);
    public sealed virtual int ValidateAndGetLength(KdbndpTsQueryOr value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(KdbndpTsQueryAnd value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(KdbndpTsQueryNot value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(KdbndpTsQueryLexeme value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(KdbndpTsQueryEmpty value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(KdbndpTsQueryFollowedBy value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public sealed virtual Task Write(KdbndpTsQueryOr value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    public sealed virtual Task Write(KdbndpTsQueryAnd value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    public sealed virtual Task Write(KdbndpTsQueryNot value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    public sealed virtual Task Write(KdbndpTsQueryLexeme value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    public sealed virtual Task Write(KdbndpTsQueryEmpty value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    public sealed virtual Task Write(KdbndpTsQueryFollowedBy value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
}
[TypeMappingAttribute("tsvector", "45", "KdbndpTypes.KdbndpTsVector")]
internal class Kdbndp.TypeHandlers.FullTextSearchHandlers.TsVectorHandler : KdbndpTypeHandler`1<KdbndpTsVector> {
    private static int MaxSingleLexemeBytes;
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.FullTextSearchHandlers.TsVectorHandler/<Read>d__1")]
public virtual ValueTask`1<KdbndpTsVector> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(KdbndpTsVector value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.FullTextSearchHandlers.TsVectorHandler/<Write>d__3")]
public virtual Task Write(KdbndpTsVector vector, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
}
[TypeMappingAttribute("box", "3", "KdbndpTypes.KdbndpBox")]
internal class Kdbndp.TypeHandlers.GeometricHandlers.BoxHandler : KdbndpSimpleTypeHandler`1<KdbndpBox> {
    public virtual KdbndpBox Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(KdbndpBox value, KdbndpParameter parameter);
    public virtual void Write(KdbndpBox value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("circle", "5", "KdbndpTypes.KdbndpCircle")]
internal class Kdbndp.TypeHandlers.GeometricHandlers.CircleHandler : KdbndpSimpleTypeHandler`1<KdbndpCircle> {
    public virtual KdbndpCircle Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(KdbndpCircle value, KdbndpParameter parameter);
    public virtual void Write(KdbndpCircle value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("line", "10", "KdbndpTypes.KdbndpLine")]
internal class Kdbndp.TypeHandlers.GeometricHandlers.LineHandler : KdbndpSimpleTypeHandler`1<KdbndpLine> {
    public virtual KdbndpLine Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(KdbndpLine value, KdbndpParameter parameter);
    public virtual void Write(KdbndpLine value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("lseg", "11", "KdbndpTypes.KdbndpLSeg")]
internal class Kdbndp.TypeHandlers.GeometricHandlers.LineSegmentHandler : KdbndpSimpleTypeHandler`1<KdbndpLSeg> {
    public virtual KdbndpLSeg Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(KdbndpLSeg value, KdbndpParameter parameter);
    public virtual void Write(KdbndpLSeg value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("path", "14", "KdbndpTypes.KdbndpPath")]
internal class Kdbndp.TypeHandlers.GeometricHandlers.PathHandler : KdbndpTypeHandler`1<KdbndpPath> {
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.GeometricHandlers.PathHandler/<Read>d__0")]
public virtual ValueTask`1<KdbndpPath> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(KdbndpPath value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.GeometricHandlers.PathHandler/<Write>d__2")]
public virtual Task Write(KdbndpPath value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
}
[TypeMappingAttribute("point", "15", "KdbndpTypes.KdbndpPoint")]
internal class Kdbndp.TypeHandlers.GeometricHandlers.PointHandler : KdbndpSimpleTypeHandler`1<KdbndpPoint> {
    public virtual KdbndpPoint Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(KdbndpPoint value, KdbndpParameter parameter);
    public virtual void Write(KdbndpPoint value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("polygon", "16", "KdbndpTypes.KdbndpPolygon")]
internal class Kdbndp.TypeHandlers.GeometricHandlers.PolygonHandler : KdbndpTypeHandler`1<KdbndpPolygon> {
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.GeometricHandlers.PolygonHandler/<Read>d__0")]
public virtual ValueTask`1<KdbndpPolygon> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(KdbndpPolygon value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.GeometricHandlers.PolygonHandler/<Write>d__2")]
public virtual Task Write(KdbndpPolygon value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
}
internal class Kdbndp.TypeHandlers.HstoreHandler : KdbndpTypeHandler`1<Dictionary`2<string, string>> {
    private TextHandler _textHandler;
    internal HstoreHandler(KdbndpConnection connection);
    public sealed virtual int ValidateAndGetLength(IDictionary`2<string, string> value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(Dictionary`2<string, string> value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.HstoreHandler/<Write>d__4")]
public sealed virtual Task Write(IDictionary`2<string, string> value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    public virtual Task Write(Dictionary`2<string, string> value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.HstoreHandler/<Read>d__6")]
public virtual ValueTask`1<Dictionary`2<string, string>> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    private sealed virtual override ValueTask`1<IDictionary`2<string, string>> Kdbndp.TypeHandling.IKdbndpTypeHandler<System.Collections.Generic.IDictionary<System.String,System.String>>.Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
}
[TypeMappingAttribute("hstore", "37", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Kdbndp.TypeHandlers.HstoreHandlerFactory : KdbndpTypeHandlerFactory`1<Dictionary`2<string, string>> {
    protected virtual KdbndpTypeHandler`1<Dictionary`2<string, string>> Create(KdbndpConnection conn);
}
internal interface Kdbndp.TypeHandlers.IDynamicCompositeTypeHandlerFactory {
}
internal interface Kdbndp.TypeHandlers.IEnumHandler {
    public Type EnumType { get; }
    public abstract virtual Type get_EnumType();
}
public interface Kdbndp.TypeHandlers.IEnumTypeHandlerFactory {
    public IKdbndpNameTranslator NameTranslator { get; }
    public abstract virtual IKdbndpNameTranslator get_NameTranslator();
}
internal interface Kdbndp.TypeHandlers.IMappedCompositeHandler {
    public Type CompositeType { get; }
    public abstract virtual Type get_CompositeType();
}
public interface Kdbndp.TypeHandlers.IMappedCompositeTypeHandlerFactory {
    public IKdbndpNameTranslator NameTranslator { get; }
    public abstract virtual IKdbndpNameTranslator get_NameTranslator();
}
internal interface Kdbndp.TypeHandlers.IMappedEnumHandler {
    public Type EnumType { get; }
    public abstract virtual Type get_EnumType();
}
[TypeMappingAttribute("char", "38")]
internal class Kdbndp.TypeHandlers.InternalCharHandler : KdbndpSimpleTypeHandler`1<char> {
    public virtual char Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override byte Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Byte>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override short Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Int16>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override int Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Int32>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override long Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Int64>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(char value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(byte value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(short value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(int value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(long value, KdbndpParameter parameter);
    public virtual void Write(char value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(byte value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(short value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(int value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(long value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
internal class Kdbndp.TypeHandlers.InternalTypesHandlers.Int2VectorHandler : ArrayHandler`1<short> {
    public Int2VectorHandler(KingbaseType postgresShortType);
    public virtual ArrayHandler CreateArrayHandler(KingbaseType arrayBackendType);
}
[TypeMappingAttribute("int2vector", "52")]
internal class Kdbndp.TypeHandlers.InternalTypesHandlers.Int2VectorHandlerFactory : KdbndpTypeHandlerFactory {
    internal Type DefaultValueType { get; }
    internal virtual KdbndpTypeHandler Create(KingbaseType pgType, KdbndpConnection conn);
    internal virtual Type get_DefaultValueType();
}
internal class Kdbndp.TypeHandlers.InternalTypesHandlers.OIDVectorHandler : ArrayHandler`1<UInt32> {
    public OIDVectorHandler(KingbaseType postgresOIDType);
    public virtual ArrayHandler CreateArrayHandler(KingbaseType arrayBackendType);
}
[TypeMappingAttribute("oidvector", "29")]
internal class Kdbndp.TypeHandlers.InternalTypesHandlers.OIDVectorHandlerFactory : KdbndpTypeHandlerFactory {
    internal Type DefaultValueType { get; }
    internal virtual KdbndpTypeHandler Create(KingbaseType pgType, KdbndpConnection conn);
    internal virtual Type get_DefaultValueType();
}
[TypeMappingAttribute("tid", "53", "KdbndpTypes.KdbndpTid")]
internal class Kdbndp.TypeHandlers.InternalTypesHandlers.TidHandler : KdbndpSimpleTypeHandler`1<KdbndpTid> {
    public virtual KdbndpTid Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(KdbndpTid value, KdbndpParameter parameter);
    public virtual void Write(KdbndpTid value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
public class Kdbndp.TypeHandlers.JsonbHandler : TextHandler {
    private static byte JsonbProtocolVersion;
    internal bool PreferTextWrite { get; }
    protected internal JsonbHandler(KdbndpConnection connection);
    internal virtual bool get_PreferTextWrite();
    public virtual int ValidateAndGetLength(string value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(Char[] value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(ArraySegment`1<char> value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.JsonbHandler/<Write>d__7")]
public virtual Task Write(string value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.JsonbHandler/<Write>d__8")]
public virtual Task Write(Char[] value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.JsonbHandler/<Write>d__9")]
public virtual Task Write(ArraySegment`1<char> value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.JsonbHandler/<Read>d__10")]
public virtual ValueTask`1<string> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public virtual TextReader GetTextReader(Stream stream);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(string value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(Char[] value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(ArraySegment`1<char> value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<string> <>n__3(KdbndpReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription);
}
[TypeMappingAttribute("jsonb", "36")]
public class Kdbndp.TypeHandlers.JsonbHandlerFactory : KdbndpTypeHandlerFactory`1<string> {
    protected virtual KdbndpTypeHandler`1<string> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.MappedCompositeHandler`1 : KdbndpTypeHandler`1<T> {
    private IKdbndpNameTranslator _nameTranslator;
    private KdbndpConnection _conn;
    private UnmappedCompositeHandler _wrappedHandler;
    public Type CompositeType { get; }
    internal MappedCompositeHandler`1(IKdbndpNameTranslator nameTranslator, KingbaseType pgType, KdbndpConnection conn);
    public sealed virtual Type get_CompositeType();
    public virtual ValueTask`1<T> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(T value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public virtual Task Write(T value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
}
internal class Kdbndp.TypeHandlers.MappedCompositeTypeHandlerFactory`1 : KdbndpTypeHandlerFactory`1<T> {
    [CompilerGeneratedAttribute]
private IKdbndpNameTranslator <NameTranslator>k__BackingField;
    public IKdbndpNameTranslator NameTranslator { get; }
    internal MappedCompositeTypeHandlerFactory`1(IKdbndpNameTranslator nameTranslator);
    [CompilerGeneratedAttribute]
public sealed virtual IKdbndpNameTranslator get_NameTranslator();
    internal virtual KdbndpTypeHandler Create(KingbaseType pgType, KdbndpConnection conn);
    protected virtual KdbndpTypeHandler`1<T> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.MappedEnumHandler`1 : KdbndpTypeHandler`1<T> {
    private IKdbndpNameTranslator _nameTranslator;
    private KdbndpConnection _conn;
    private UnmappedEnumHandler _wrappedHandler;
    public Type EnumType { get; }
    internal MappedEnumHandler`1(IKdbndpNameTranslator nameTranslator, KingbaseType pgType, KdbndpConnection conn);
    public sealed virtual Type get_EnumType();
    public virtual ValueTask`1<T> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(T value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public virtual Task Write(T value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
}
internal class Kdbndp.TypeHandlers.MappedEnumTypeHandlerFactory`1 : KdbndpTypeHandlerFactory`1<T> {
    private IKdbndpNameTranslator _nameTranslator;
    internal MappedEnumTypeHandlerFactory`1(IKdbndpNameTranslator nameTranslator);
    internal virtual KdbndpTypeHandler Create(KingbaseType pgType, KdbndpConnection conn);
    protected virtual KdbndpTypeHandler`1<T> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.MySqlBitStringArrayHandler : ArrayHandler`1<BitArray> {
    public MySqlBitStringArrayHandler(MySqlBitStringHandler elementHandler);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.MySqlBitStringArrayHandler/<Read>d__1`1")]
protected internal virtual ValueTask`1<TAny> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    internal virtual object ReadAsObject(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.MySqlBitStringArrayHandler/<ReadAsObject>d__3")]
internal virtual ValueTask`1<object> ReadAsObject(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<TAny> <>n__0(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
}
[TypeMappingAttribute("mysql_bit", "550")]
internal class Kdbndp.TypeHandlers.MySqlBitStringHandler : KdbndpTypeHandler`1<BitArray> {
    internal virtual Type GetFieldType(FieldDescription fieldDescription);
    internal virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    public virtual ArrayHandler CreateArrayHandler(KingbaseType backendType);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.MySqlBitStringHandler/<Read>d__3")]
public virtual ValueTask`1<BitArray> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.MySqlBitStringHandler/<Kdbndp-TypeHandling-IKdbndpTypeHandler<System-Collections-Specialized-BitVector32>-Read>d__4")]
private sealed virtual override ValueTask`1<BitVector32> Kdbndp.TypeHandling.IKdbndpTypeHandler<System.Collections.Specialized.BitVector32>.Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.MySqlBitStringHandler/<Kdbndp-TypeHandling-IKdbndpTypeHandler<System-Boolean>-Read>d__5")]
private sealed virtual override ValueTask`1<bool> Kdbndp.TypeHandling.IKdbndpTypeHandler<System.Boolean>.Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    private sealed virtual override ValueTask`1<string> Kdbndp.TypeHandling.IKdbndpTypeHandler<System.String>.Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.MySqlBitStringHandler/<ReadAsObject>d__7")]
internal virtual ValueTask`1<object> ReadAsObject(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    internal virtual object ReadAsObject(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(BitArray value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(BitVector32 value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(bool value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(string value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.MySqlBitStringHandler/<Write>d__13")]
public virtual Task Write(BitArray value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.MySqlBitStringHandler/<Write>d__14")]
public sealed virtual Task Write(BitVector32 value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.MySqlBitStringHandler/<Write>d__15")]
public sealed virtual Task Write(bool value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.MySqlBitStringHandler/<Write>d__16")]
public sealed virtual Task Write(string value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TypeMappingAttribute("cidr", "44")]
internal class Kdbndp.TypeHandlers.NetworkHandlers.CidrHandler : KdbndpSimpleTypeHandler`1<ValueTuple`2<IPAddress, int>> {
    public virtual ValueTuple`2<IPAddress, int> Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override KdbndpInet Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<KdbndpTypes.KdbndpInet>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(ValueTuple`2<IPAddress, int> value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(KdbndpInet value, KdbndpParameter parameter);
    public virtual void Write(ValueTuple`2<IPAddress, int> value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(KdbndpInet value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TypeMappingAttribute("inet", "24", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Kdbndp.TypeHandlers.NetworkHandlers.InetHandler : KdbndpSimpleTypeHandlerWithPsv`2<IPAddress, ValueTuple`2<IPAddress, int>> {
    private static byte IPv4;
    private static byte IPv6;
    public virtual IPAddress Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    internal static ValueTuple`2<IPAddress, int> DoRead(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription, bool isCidrHandler);
    protected virtual ValueTuple`2<IPAddress, int> ReadPsv(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override KdbndpInet Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<KdbndpTypes.KdbndpInet>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    protected internal virtual int ValidateObjectAndGetLength(object value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    protected internal virtual Task WriteObjectWithLength(object value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    public virtual int ValidateAndGetLength(IPAddress value, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(ValueTuple`2<IPAddress, int> value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(KdbndpInet value, KdbndpParameter parameter);
    public virtual void Write(IPAddress value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public virtual void Write(ValueTuple`2<IPAddress, int> value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(KdbndpInet value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    internal static void DoWrite(IPAddress ip, int mask, KdbndpWriteBuffer buf, bool isCidrHandler);
    internal static int GetLength(IPAddress value);
}
[TypeMappingAttribute("macaddr8", "54")]
internal class Kdbndp.TypeHandlers.NetworkHandlers.Macaddr8Handler : KdbndpSimpleTypeHandler`1<PhysicalAddress> {
    public virtual PhysicalAddress Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(PhysicalAddress value, KdbndpParameter parameter);
    public virtual void Write(PhysicalAddress value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("macaddr", "34", "System.Net.NetworkInformation.PhysicalAddress")]
internal class Kdbndp.TypeHandlers.NetworkHandlers.MacaddrHandler : KdbndpSimpleTypeHandler`1<PhysicalAddress> {
    public virtual PhysicalAddress Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(PhysicalAddress value, KdbndpParameter parameter);
    public virtual void Write(PhysicalAddress value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
internal class Kdbndp.TypeHandlers.NumericHandlers.DecimalRaw : ValueType {
    private static int SignMask;
    private static int ScaleMask;
    private static int ScaleShift;
    internal static UInt32[] Powers10;
    internal static int MaxUInt32Scale;
    private decimal _value;
    private int _flags;
    private UInt32 _high;
    private UInt32 _low;
    private UInt32 _mid;
    public bool Negative { get; }
    public int Scale { get; public set; }
    public UInt32 High { get; }
    public UInt32 Mid { get; }
    public UInt32 Low { get; }
    public decimal Value { get; }
    public DecimalRaw(decimal value);
    public DecimalRaw(long value);
    private static DecimalRaw();
    public bool get_Negative();
    public int get_Scale();
    public void set_Scale(int value);
    public UInt32 get_High();
    public UInt32 get_Mid();
    public UInt32 get_Low();
    public decimal get_Value();
    public static void Negate(DecimalRaw& value);
    public static void Add(DecimalRaw& value, UInt32 addend);
    public static void Multiply(DecimalRaw& value, UInt32 multiplier);
    public static UInt32 Divide(DecimalRaw& value, UInt32 divisor);
}
[TypeMappingAttribute("double precision", "8", "8", "System.Double")]
[TypeMappingAttribute("sqlserver_float", "544", "8")]
internal class Kdbndp.TypeHandlers.NumericHandlers.DoubleHandler : KdbndpSimpleTypeHandler`1<double> {
    public virtual double Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(double value, KdbndpParameter parameter);
    public virtual void Write(double value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("smallint", "18", "Mono.Cecil.CustomAttributeArgument[]", "Mono.Cecil.CustomAttributeArgument[]", "10")]
[TypeMappingAttribute("sqlserver_smallint", "535", "10")]
[TypeMappingAttribute("year", "548", "10")]
internal class Kdbndp.TypeHandlers.NumericHandlers.Int16Handler : KdbndpSimpleTypeHandler`1<short> {
    public virtual short Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override byte Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Byte>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override sbyte Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.SByte>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override int Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Int32>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override long Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Int64>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override float Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Single>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override double Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Double>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override decimal Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Decimal>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(short value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(int value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(long value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(byte value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(sbyte value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(float value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(double value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(decimal value, KdbndpParameter parameter);
    public virtual void Write(short value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(int value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(long value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(byte value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(sbyte value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(decimal value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(double value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(float value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("integer", "9", "11", "System.Int32")]
[TypeMappingAttribute("uint4", "530", "19")]
[TypeMappingAttribute("sqlserver_int", "539", "11")]
[TypeMappingAttribute("mediumint", "545", "11")]
internal class Kdbndp.TypeHandlers.NumericHandlers.Int32Handler : KdbndpSimpleTypeHandler`1<int> {
    public virtual int Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override UInt32 Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.UInt32>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override byte Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Byte>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override short Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Int16>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override long Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Int64>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override float Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Single>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override double Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Double>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override decimal Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Decimal>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(int value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(UInt32 value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(short value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(long value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(float value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(double value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(decimal value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(byte value, KdbndpParameter parameter);
    public virtual void Write(int value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(UInt32 value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(short value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(long value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(byte value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(float value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(double value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(decimal value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("bigint", "1", "12", "System.Int64")]
[TypeMappingAttribute("uint8", "531", "20")]
[TypeMappingAttribute("sqlserver_bigint", "540", "12")]
internal class Kdbndp.TypeHandlers.NumericHandlers.Int64Handler : KdbndpSimpleTypeHandler`1<long> {
    public virtual long Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override ulong Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.UInt64>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override byte Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Byte>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override short Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Int16>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override int Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Int32>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override float Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Single>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override double Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Double>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override decimal Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Decimal>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(long value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(ulong value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(short value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(int value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(float value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(double value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(decimal value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(byte value, KdbndpParameter parameter);
    public virtual void Write(long value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(ulong value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(short value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(int value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(byte value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(float value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(double value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(decimal value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("money", "12", "4", "")]
[TypeMappingAttribute("sqlserver_money", "541", "4")]
internal class Kdbndp.TypeHandlers.NumericHandlers.MoneyHandler : KdbndpSimpleTypeHandler`1<decimal> {
    private static int MoneyScale;
    private static int MoneyScale_SqlServer;
    public virtual decimal Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(decimal value, KdbndpParameter parameter);
    public virtual void Write(decimal value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("numeric", "13", "Mono.Cecil.CustomAttributeArgument[]", "System.Decimal", "7")]
[TypeMappingAttribute("sqlserver_numeric", "542", "7")]
internal class Kdbndp.TypeHandlers.NumericHandlers.NumericHandler : KdbndpSimpleTypeHandler`1<decimal> {
    private static int MaxDecimalScale;
    private static int SignPositive;
    private static int SignNegative;
    private static int SignNan;
    private static int MaxGroupCount;
    private static int MaxGroupScale;
    private static UInt32 MaxGroupSize;
    private static NumericHandler();
    public virtual decimal Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override byte Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Byte>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override short Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Int16>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override int Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Int32>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override long Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Int64>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override float Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Single>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override double Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Double>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(decimal value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(short value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(int value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(long value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(float value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(double value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(byte value, KdbndpParameter parameter);
    public virtual void Write(decimal value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(short value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(int value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(long value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(byte value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(float value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(double value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("tinyint", "525", "14")]
internal class Kdbndp.TypeHandlers.NumericHandlers.SByteHandler : KdbndpSimpleTypeHandler`1<sbyte> {
    public virtual sbyte Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override byte Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Byte>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override sbyte Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.SByte>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override int Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Int32>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override long Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Int64>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override float Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Single>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override double Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Double>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override decimal Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Decimal>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override bool Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Boolean>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public sealed virtual int ValidateAndGetLength(int value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(long value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(byte value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(float value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(double value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(decimal value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(bool value, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(sbyte value, KdbndpParameter parameter);
    public virtual void Write(sbyte value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(byte value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(int value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(long value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(float value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(double value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(decimal value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    private sealed virtual override void Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Boolean>.Write(bool value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("real", "17", "15", "System.Single")]
[TypeMappingAttribute("sqlserver_real", "543", "15")]
internal class Kdbndp.TypeHandlers.NumericHandlers.SingleHandler : KdbndpSimpleTypeHandler`1<float> {
    public virtual float Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override double Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Double>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public sealed virtual int ValidateAndGetLength(double value, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(float value, KdbndpParameter parameter);
    public sealed virtual void Write(double value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public virtual void Write(float value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("sqlserver_tinyint", "533", "2")]
internal class Kdbndp.TypeHandlers.NumericHandlers.SqlServerByteHandler : KdbndpSimpleTypeHandler`1<byte> {
    public virtual byte Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override short Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Int16>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override int Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Int32>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override long Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Int64>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override float Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Single>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override double Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Double>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override decimal Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<System.Decimal>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public sealed virtual int ValidateAndGetLength(int value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(long value, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(byte value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(float value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(short value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(double value, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(decimal value, KdbndpParameter parameter);
    public virtual void Write(byte value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(int value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(long value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(short value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(float value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(double value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    public sealed virtual void Write(decimal value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("oid", "41")]
[TypeMappingAttribute("xid", "42")]
[TypeMappingAttribute("cid", "43")]
[TypeMappingAttribute("regtype", "49")]
[TypeMappingAttribute("regconfig", "56")]
internal class Kdbndp.TypeHandlers.NumericHandlers.UInt32Handler : KdbndpSimpleTypeHandler`1<UInt32> {
    public virtual UInt32 Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(UInt32 value, KdbndpParameter parameter);
    public virtual void Write(UInt32 value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
public abstract class Kdbndp.TypeHandlers.RangeHandler : KdbndpTypeHandler {
    public virtual RangeHandler CreateRangeHandler(KingbaseType rangeBackendType);
}
public class Kdbndp.TypeHandlers.RangeHandler`1 : RangeHandler {
    private KdbndpTypeHandler _elementHandler;
    public RangeHandler`1(KdbndpTypeHandler elementHandler);
    public virtual ArrayHandler CreateArrayHandler(KingbaseType arrayBackendType);
    internal virtual Type GetFieldType(FieldDescription fieldDescription);
    internal virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    internal virtual TAny Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    protected internal virtual ValueTask`1<TAny> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.RangeHandler`1/<ReadAsObject>d__7")]
internal virtual ValueTask`1<object> ReadAsObject(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    internal virtual object ReadAsObject(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.RangeHandler`1/<Read>d__9")]
public sealed virtual ValueTask`1<KdbndpRange`1<TElement>> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    protected internal virtual int ValidateAndGetLength(TAny value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    protected internal virtual int ValidateObjectAndGetLength(object value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(KdbndpRange`1<TElement> value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    internal virtual Task WriteWithLengthInternal(TAny value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    protected internal virtual Task WriteObjectWithLength(object value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.RangeHandler`1/<Write>d__15")]
public sealed virtual Task Write(KdbndpRange`1<TElement> value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
}
internal class Kdbndp.TypeHandlers.RecordHandler : KdbndpTypeHandler`1<Object[]> {
    private ConnectorTypeMapper _typeMapper;
    public RecordHandler(ConnectorTypeMapper typeMapper);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.RecordHandler/<Read>d__2")]
public virtual ValueTask`1<Object[]> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(Object[] value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public virtual Task Write(Object[] value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
}
[TypeMappingAttribute("record")]
internal class Kdbndp.TypeHandlers.RecordHandlerFactory : KdbndpTypeHandlerFactory`1<Object[]> {
    protected virtual KdbndpTypeHandler`1<Object[]> Create(KdbndpConnection conn);
}
public class Kdbndp.TypeHandlers.TextHandler : KdbndpTypeHandler`1<string> {
    private Encoding _encoding;
    private Char[] _singleCharArray;
    internal bool PreferTextWrite { get; }
    protected internal TextHandler(KdbndpConnection connection);
    internal virtual bool get_PreferTextWrite();
    public virtual ValueTask`1<string> Read(KdbndpReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.TextHandler/<Kdbndp-TypeHandling-IKdbndpTypeHandler<System-Char[]>-Read>d__6")]
private sealed virtual override ValueTask`1<Char[]> Kdbndp.TypeHandling.IKdbndpTypeHandler<System.Char[]>.Read(KdbndpReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.TextHandler/<Kdbndp-TypeHandling-IKdbndpTypeHandler<System-Char>-Read>d__7")]
private sealed virtual override ValueTask`1<char> Kdbndp.TypeHandling.IKdbndpTypeHandler<System.Char>.Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    private sealed virtual override ValueTask`1<ArraySegment`1<char>> Kdbndp.TypeHandling.IKdbndpTypeHandler<System.ArraySegment<System.Char>>.Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    private sealed virtual override ValueTask`1<Byte[]> Kdbndp.TypeHandling.IKdbndpTypeHandler<System.Byte[]>.Read(KdbndpReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(string value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(Char[] value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(ArraySegment`1<char> value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(char value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public sealed virtual int ValidateAndGetLength(Byte[] value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public virtual Task Write(string value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    public virtual Task Write(Char[] value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    public virtual Task Write(ArraySegment`1<char> value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    private Task WriteString(string str, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    public sealed virtual Task Write(char value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    public sealed virtual Task Write(Byte[] value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    public virtual TextReader GetTextReader(Stream stream);
}
[TypeMappingAttribute("text", "19", "Mono.Cecil.CustomAttributeArgument[]", "Mono.Cecil.CustomAttributeArgument[]", "16")]
[TypeMappingAttribute("clob", "425", "16")]
[TypeMappingAttribute("sqlserver_text", "553", "16")]
[TypeMappingAttribute("nclob", "513", "16")]
[TypeMappingAttribute("bfile", "552", "16")]
[TypeMappingAttribute("rowid", "551", "16")]
[TypeMappingAttribute("varcharbyte varying", "423", "16")]
[TypeMappingAttribute("characterbyte", "424", "16")]
[TypeMappingAttribute("xml", "28", "25", "")]
[TypeMappingAttribute("character varying", "22", "16")]
[TypeMappingAttribute("character", "6", "16")]
[TypeMappingAttribute("name", "32", "16")]
[TypeMappingAttribute("geometry", "50", "16")]
[TypeMappingAttribute("json", "35", "16")]
[TypeMappingAttribute("refcursor", "23", "16")]
[TypeMappingAttribute("citext", "51", "16")]
[TypeMappingAttribute("mediumtext", "529", "16")]
[TypeMappingAttribute("tinytext", "546", "16")]
[TypeMappingAttribute("longtext", "547", "16")]
[TypeMappingAttribute("nvarchar", "536", "16")]
[TypeMappingAttribute("nchar", "537", "16")]
[TypeMappingAttribute("unknown")]
public class Kdbndp.TypeHandlers.TextHandlerFactory : KdbndpTypeHandlerFactory`1<string> {
    protected virtual KdbndpTypeHandler`1<string> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.UnknownTypeHandler : TextHandler {
    private KdbndpConnector _connector;
    internal UnknownTypeHandler(KdbndpConnection connection);
    public virtual ValueTask`1<string> Read(KdbndpReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription);
    protected internal virtual int ValidateAndGetLength(T2 value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    protected internal virtual int ValidateObjectAndGetLength(object value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    protected internal virtual Task WriteObjectWithLength(object value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(string value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
}
internal class Kdbndp.TypeHandlers.UnmappedCompositeHandler : KdbndpTypeHandler`1<object> {
    private ConnectorTypeMapper _typeMapper;
    private IKdbndpNameTranslator _nameTranslator;
    [CanBeNullAttribute]
private List`1<MemberDescriptor> _members;
    [CanBeNullAttribute]
private Type _resolvedType;
    internal UnmappedCompositeHandler(IKdbndpNameTranslator nameTranslator, ConnectorTypeMapper typeMapper);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.UnmappedCompositeHandler/<Read>d__5`1")]
protected internal virtual ValueTask`1<TAny> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    internal virtual ValueTask`1<object> ReadAsObject(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    internal virtual object ReadAsObject(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.UnmappedCompositeHandler/<Read>d__8")]
public virtual ValueTask`1<object> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    protected internal virtual int ValidateObjectAndGetLength(object value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    protected internal virtual int ValidateAndGetLength(TAny value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public virtual int ValidateAndGetLength(object value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    protected internal virtual Task WriteObjectWithLength(object value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    protected virtual Task WriteWithLength(T2 value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.UnmappedCompositeHandler/<Write>d__14")]
public virtual Task Write(object value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    private void ResolveFields();
    private void Map(Type type);
    private void MapDynamic(IDictionary`2<string, object> dict);
}
internal class Kdbndp.TypeHandlers.UnmappedCompositeTypeHandlerFactory : KdbndpTypeHandlerFactory`1<object> {
    private IKdbndpNameTranslator _nameTranslator;
    internal UnmappedCompositeTypeHandlerFactory(IKdbndpNameTranslator nameTranslator);
    protected virtual KdbndpTypeHandler`1<object> Create(KdbndpConnection conn);
}
internal class Kdbndp.TypeHandlers.UnmappedEnumHandler : TextHandler {
    private IKdbndpNameTranslator _nameTranslator;
    private Dictionary`2<Enum, string> _enumToLabel;
    private Dictionary`2<string, Enum> _labelToEnum;
    [CanBeNullAttribute]
private Type _resolvedType;
    internal UnmappedEnumHandler(IKdbndpNameTranslator nameTranslator, KdbndpConnection connection);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandlers.UnmappedEnumHandler/<Read>d__5`1")]
protected internal virtual ValueTask`1<TAny> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public virtual ValueTask`1<string> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    protected internal virtual int ValidateObjectAndGetLength(object value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    protected internal virtual int ValidateAndGetLength(TAny value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    private int ValidateAndGetLength(object value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    protected virtual Task WriteWithLength(TAny value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    protected internal virtual Task WriteObjectWithLength(object value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    internal Task Write(object value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    private void Map(Type type);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<string> <>n__0(KdbndpReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription);
}
internal class Kdbndp.TypeHandlers.UnmappedEnumTypeHandlerFactory : KdbndpTypeHandlerFactory`1<string> {
    [CompilerGeneratedAttribute]
private IKdbndpNameTranslator <NameTranslator>k__BackingField;
    public IKdbndpNameTranslator NameTranslator { get; }
    internal UnmappedEnumTypeHandlerFactory(IKdbndpNameTranslator nameTranslator);
    protected virtual KdbndpTypeHandler`1<string> Create(KdbndpConnection conn);
    [CompilerGeneratedAttribute]
public sealed virtual IKdbndpNameTranslator get_NameTranslator();
}
[TypeMappingAttribute("uuid", "27", "9", "System.Guid")]
internal class Kdbndp.TypeHandlers.UuidHandler : KdbndpSimpleTypeHandler`1<Guid> {
    public virtual Guid Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(Guid value, KdbndpParameter parameter);
    public virtual void Write(Guid value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
[TypeMappingAttribute("void")]
internal class Kdbndp.TypeHandlers.VoidHandler : KdbndpSimpleTypeHandler`1<DBNull> {
    public virtual DBNull Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(DBNull value, KdbndpParameter parameter);
    public virtual void Write(DBNull value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
internal class Kdbndp.TypeHandling.DefaultTypeHandlerFactory : KdbndpTypeHandlerFactory {
    private Type _handlerType;
    [CompilerGeneratedAttribute]
private Type <DefaultValueType>k__BackingField;
    internal Type DefaultValueType { get; }
    internal DefaultTypeHandlerFactory(Type handlerType);
    internal virtual KdbndpTypeHandler Create(KingbaseType pgType, KdbndpConnection conn);
    [CompilerGeneratedAttribute]
internal virtual Type get_DefaultValueType();
}
public interface Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler`1 {
    public abstract virtual T Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public abstract virtual int ValidateAndGetLength(T value, KdbndpParameter parameter);
    public abstract virtual void Write(T value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
}
public interface Kdbndp.TypeHandling.IKdbndpTypeHandler`1 {
    public abstract virtual ValueTask`1<T> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public abstract virtual int ValidateAndGetLength(T value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public abstract virtual Task Write(T value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
}
internal interface Kdbndp.TypeHandling.ITextReaderHandler {
    public abstract virtual TextReader GetTextReader(Stream stream);
}
public class Kdbndp.TypeHandling.KdbndpSafeReadException : Exception {
    public KdbndpSafeReadException(Exception innerException);
}
public abstract class Kdbndp.TypeHandling.KdbndpSimpleTypeHandler`1 : KdbndpTypeHandler`1<TDefault> {
    private NonGenericValidateAndGetLength<TDefault> _nonGenericValidateAndGetLength;
    private NonGenericWriteWithLength _nonGenericWriteWithLength;
    private static ConcurrentDictionary`2<Type, ValueTuple`2<NonGenericValidateAndGetLength<TDefault>, NonGenericWriteWithLength>> NonGenericDelegateCache;
    private static KdbndpSimpleTypeHandler`1();
    public abstract virtual TDefault Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public sealed virtual ValueTask`1<TDefault> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandling.KdbndpSimpleTypeHandler`1/<Read>d__7`1")]
protected internal sealed virtual ValueTask`1<TAny> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    internal virtual TAny Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public abstract virtual int ValidateAndGetLength(TDefault value, KdbndpParameter parameter);
    public abstract virtual void Write(TDefault value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    protected internal virtual int ValidateAndGetLength(TAny value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    internal sealed virtual Task WriteWithLengthInternal(TAny value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    public sealed virtual Task Write(TDefault value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    public sealed virtual int ValidateAndGetLength(TDefault value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    protected internal virtual int ValidateObjectAndGetLength(object value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    protected internal virtual Task WriteObjectWithLength(object value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    private static NonGenericValidateAndGetLength<TDefault> GenerateNonGenericValidationMethod(Type handlerType);
    [CompilerGeneratedAttribute]
private ValueTuple`2<NonGenericValidateAndGetLength<TDefault>, NonGenericWriteWithLength> <.ctor>b__4_0(Type t);
}
public abstract class Kdbndp.TypeHandling.KdbndpSimpleTypeHandlerWithPsv`2 : KdbndpSimpleTypeHandler`1<TDefault> {
    protected abstract virtual TPsv ReadPsv(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override TPsv Kdbndp.TypeHandling.IKdbndpSimpleTypeHandler<TPsv>.Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    internal virtual object ReadPsvAsObject(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandling.KdbndpSimpleTypeHandlerWithPsv`2/<ReadPsvAsObject>d__3")]
internal virtual ValueTask`1<object> ReadPsvAsObject(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public abstract virtual int ValidateAndGetLength(TPsv value, KdbndpParameter parameter);
    public abstract virtual void Write(TPsv value, KdbndpWriteBuffer buf, KdbndpParameter parameter);
    internal virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    public virtual ArrayHandler CreateArrayHandler(KingbaseType arrayBackendType);
}
public abstract class Kdbndp.TypeHandling.KdbndpTypeHandler : object {
    [CompilerGeneratedAttribute]
private KingbaseType <KingbaseType>k__BackingField;
    internal KingbaseType KingbaseType { get; internal set; }
    internal bool PreferTextWrite { get; }
    internal string KbDisplayName { get; }
    [CompilerGeneratedAttribute]
internal KingbaseType get_KingbaseType();
    [CompilerGeneratedAttribute]
internal void set_KingbaseType(KingbaseType value);
    protected internal abstract virtual ValueTask`1<TAny> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    internal abstract virtual TAny Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    internal abstract virtual object ReadAsObject(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    internal abstract virtual ValueTask`1<object> ReadAsObject(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    internal virtual object ReadPsvAsObject(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    internal virtual ValueTask`1<object> ReadPsvAsObject(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandling.KdbndpTypeHandler/<ReadWithLength>d__10`1")]
[ItemCanBeNullAttribute]
internal ValueTask`1<TAny> ReadWithLength(KdbndpReadBuffer buf, bool async, FieldDescription fieldDescription);
    protected internal abstract virtual int ValidateAndGetLength(TAny value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    internal abstract virtual Task WriteWithLengthInternal(TAny value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    protected internal abstract virtual int ValidateObjectAndGetLength(object value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    protected internal abstract virtual Task WriteObjectWithLength(object value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    internal abstract virtual Type GetFieldType(FieldDescription fieldDescription);
    internal abstract virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    internal virtual bool get_PreferTextWrite();
    public abstract virtual ArrayHandler CreateArrayHandler(KingbaseType arrayBackendType);
    public abstract virtual RangeHandler CreateRangeHandler(KingbaseType rangeBackendType);
    protected Exception CreateConversionButNoParamException(Type clrType);
    internal string get_KbDisplayName();
    internal static NonGenericWriteWithLength GenerateNonGenericWriteMethod(Type handlerType, Type interfaceType);
}
public abstract class Kdbndp.TypeHandling.KdbndpTypeHandler`1 : KdbndpTypeHandler {
    private NonGenericValidateAndGetLength<TDefault> _nonGenericValidateAndGetLength;
    private NonGenericWriteWithLength _nonGenericWriteWithLength;
    private static ConcurrentDictionary`2<Type, ValueTuple`2<NonGenericValidateAndGetLength<TDefault>, NonGenericWriteWithLength>> NonGenericDelegateCache;
    private static KdbndpTypeHandler`1();
    public abstract virtual ValueTask`1<TDefault> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    protected internal virtual ValueTask`1<TAny> Read(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    internal virtual TAny Read(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Kdbndp.TypeHandling.KdbndpTypeHandler`1/<ReadAsObject>d__8")]
internal virtual ValueTask`1<object> ReadAsObject(KdbndpReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    internal virtual object ReadAsObject(KdbndpReadBuffer buf, int len, FieldDescription fieldDescription);
    public abstract virtual int ValidateAndGetLength(TDefault value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    public abstract virtual Task Write(TDefault value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    protected internal virtual int ValidateAndGetLength(TAny value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    internal virtual Task WriteWithLengthInternal(TAny value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    protected virtual Task WriteWithLength(TAny value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    protected internal virtual int ValidateObjectAndGetLength(object value, KdbndpLengthCache& lengthCache, KdbndpParameter parameter);
    protected internal virtual Task WriteObjectWithLength(object value, KdbndpWriteBuffer buf, KdbndpLengthCache lengthCache, KdbndpParameter parameter, bool async);
    private static NonGenericValidateAndGetLength<TDefault> GenerateNonGenericValidationMethod(Type handlerType);
    internal virtual Type GetFieldType(FieldDescription fieldDescription);
    internal virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    public virtual ArrayHandler CreateArrayHandler(KingbaseType arrayBackendType);
    public virtual RangeHandler CreateRangeHandler(KingbaseType rangeBackendType);
    [CompilerGeneratedAttribute]
private ValueTuple`2<NonGenericValidateAndGetLength<TDefault>, NonGenericWriteWithLength> <.ctor>b__4_0(Type t);
}
public abstract class Kdbndp.TypeHandling.KdbndpTypeHandlerFactory : object {
    internal Type DefaultValueType { get; }
    internal abstract virtual KdbndpTypeHandler Create(KingbaseType pgType, KdbndpConnection conn);
    internal abstract virtual Type get_DefaultValueType();
}
public abstract class Kdbndp.TypeHandling.KdbndpTypeHandlerFactory`1 : KdbndpTypeHandlerFactory {
    internal Type DefaultValueType { get; }
    internal virtual KdbndpTypeHandler Create(KingbaseType pgType, KdbndpConnection conn);
    protected abstract virtual KdbndpTypeHandler`1<TDefault> Create(KdbndpConnection conn);
    internal virtual Type get_DefaultValueType();
}
internal class Kdbndp.TypeMapping.ConnectorTypeMapper : TypeMapperBase {
    [CanBeNullAttribute]
private KdbndpConnector _connector;
    [CompilerGeneratedAttribute]
private KdbndpDatabaseInfo <DatabaseInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private KdbndpTypeHandler <UnrecognizedTypeHandler>k__BackingField;
    private Dictionary`2<UInt32, KdbndpTypeHandler> _byOID;
    private Dictionary`2<KdbndpDbType, KdbndpTypeHandler> _byKdbndpDbType;
    private Dictionary`2<DbType, KdbndpTypeHandler> _byDbType;
    private Dictionary`2<string, KdbndpTypeHandler> _byTypeName;
    private Dictionary`2<Type, KdbndpTypeHandler> _byClrType;
    private Dictionary`2<Type, KdbndpTypeHandler> _arrayHandlerByClrType;
    [CompilerGeneratedAttribute]
private int <ChangeCounter>k__BackingField;
    private static KdbndpLogger Log;
    internal KdbndpDatabaseInfo DatabaseInfo { get; internal set; }
    internal KdbndpTypeHandler UnrecognizedTypeHandler { get; }
    internal int ChangeCounter { get; private set; }
    internal ConnectorTypeMapper(KdbndpConnector connector);
    private static ConnectorTypeMapper();
    [CompilerGeneratedAttribute]
internal KdbndpDatabaseInfo get_DatabaseInfo();
    [CompilerGeneratedAttribute]
internal void set_DatabaseInfo(KdbndpDatabaseInfo value);
    [CompilerGeneratedAttribute]
internal KdbndpTypeHandler get_UnrecognizedTypeHandler();
    [CompilerGeneratedAttribute]
internal int get_ChangeCounter();
    [CompilerGeneratedAttribute]
private void set_ChangeCounter(int value);
    internal KdbndpTypeHandler GetByOID(UInt32 oid);
    internal bool TryGetByOID(UInt32 oid, KdbndpTypeHandler& handler);
    internal KdbndpTypeHandler GetByKdbndpDbType(KdbndpDbType kdbndpDbType);
    internal KdbndpTypeHandler GetByDbType(DbType dbType);
    internal KdbndpTypeHandler GetByDataTypeName(string typeName);
    internal KdbndpTypeHandler GetByClrType(Type type);
    [CanBeNullAttribute]
private static Type GetArrayElementType(Type type);
    public virtual IKdbndpTypeMapper AddMapping(KdbndpTypeMapping mapping);
    public virtual bool RemoveMapping(string pgTypeName);
    private void CheckReady();
    private void ResetMappings();
    private void ClearBindings();
    public virtual void Reset();
    internal void Bind(KdbndpDatabaseInfo databaseInfo);
    private void BindTypes();
    private void BindType(KdbndpTypeMapping mapping, KdbndpConnector connector, bool externalCall);
    private void BindType(KdbndpTypeHandler handler, KingbaseType pgType, Nullable`1<KdbndpDbType> kdbndpDbType, DbType[] dbTypes, Type[] clrTypes);
    private void BindArrayType(KdbndpTypeHandler elementHandler, KingbaseArrayType pgArrayType, Nullable`1<KdbndpDbType> elementKdbndpDbType, Type[] elementClrTypes);
    private void BindRangeType(KdbndpTypeHandler elementHandler, KingbaseRangeType pgRangeType, Nullable`1<KdbndpDbType> elementKdbndpDbType, Type[] elementClrTypes);
    internal ValueTuple`2<Nullable`1<KdbndpDbType>, KingbaseType> GetTypeInfoByOid(UInt32 oid);
    [CompilerGeneratedAttribute]
private bool <BindTypes>b__34_0(KingbaseEnumType e);
    [CompilerGeneratedAttribute]
private bool <BindTypes>b__34_1(KingbaseCompositeType e);
    [CompilerGeneratedAttribute]
private bool <GetTypeInfoByOid>g__TryGetMapping|39_0(KingbaseType pgType, KdbndpTypeMapping& mapping);
}
internal class Kdbndp.TypeMapping.GlobalTypeMapper : TypeMapperBase {
    [CompilerGeneratedAttribute]
private static GlobalTypeMapper <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private ReaderWriterLockSlim <Lock>k__BackingField;
    private int _changeCounter;
    private Dictionary`2<KdbndpDbType, DbType> _kdbndpDbTypeToDbType;
    private Dictionary`2<DbType, KdbndpDbType> _dbTypeToKdbndpDbType;
    private Dictionary`2<Type, KdbndpDbType> _typeToKdbndpDbType;
    private Dictionary`2<Type, DbType> _typeToDbType;
    public static GlobalTypeMapper Instance { get; }
    internal int ChangeCounter { get; }
    internal ReaderWriterLockSlim Lock { get; }
    private static GlobalTypeMapper();
    [CompilerGeneratedAttribute]
public static GlobalTypeMapper get_Instance();
    internal int get_ChangeCounter();
    [CompilerGeneratedAttribute]
internal ReaderWriterLockSlim get_Lock();
    public virtual IKdbndpTypeMapper AddMapping(KdbndpTypeMapping mapping);
    public virtual bool RemoveMapping(string pgTypeName);
    public virtual void Reset();
    internal void RecordChange();
    internal DbType ToDbType(KdbndpDbType kdbndpDbType);
    internal KdbndpDbType ToKdbndpDbType(DbType dbType);
    internal DbType ToDbType(Type type);
    internal KdbndpDbType ToKdbndpDbType(Type type);
    private void SetupGlobalTypeMapper();
}
[PublicAPIAttribute]
public interface Kdbndp.TypeMapping.IKdbndpTypeMapper {
    [NotNullAttribute]
public IKdbndpNameTranslator DefaultNameTranslator { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<KdbndpTypeMapping> Mappings { get; }
    public abstract virtual IKdbndpNameTranslator get_DefaultNameTranslator();
    public abstract virtual IEnumerable`1<KdbndpTypeMapping> get_Mappings();
    [NotNullAttribute]
public abstract virtual IKdbndpTypeMapper AddMapping(KdbndpTypeMapping mapping);
    public abstract virtual bool RemoveMapping(string pgTypeName);
    public abstract virtual IKdbndpTypeMapper MapEnum(string pgName, IKdbndpNameTranslator nameTranslator);
    public abstract virtual bool UnmapEnum(string pgName, IKdbndpNameTranslator nameTranslator);
    [NotNullAttribute]
public abstract virtual IKdbndpTypeMapper MapComposite(string pgName, IKdbndpNameTranslator nameTranslator);
    public abstract virtual bool UnmapComposite(string pgName, IKdbndpNameTranslator nameTranslator);
    public abstract virtual void Reset();
}
public class Kdbndp.TypeMapping.KdbndpTypeMapping : object {
    [CompilerGeneratedAttribute]
private string <PgTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<KdbndpDbType> <KdbndpDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private DbType[] <DbTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <ClrTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DbType> <InferredDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private KdbndpTypeHandlerFactory <TypeHandlerFactory>k__BackingField;
    private static DbType[] EmptyDbTypes;
    private static Type[] EmptyClrTypes;
    public string PgTypeName { get; }
    public Nullable`1<KdbndpDbType> KdbndpDbType { get; }
    public DbType[] DbTypes { get; }
    public Type[] ClrTypes { get; }
    public Nullable`1<DbType> InferredDbType { get; }
    public KdbndpTypeHandlerFactory TypeHandlerFactory { get; }
    internal Type DefaultClrType { get; }
    internal KdbndpTypeMapping(string pgTypeName, Nullable`1<KdbndpDbType> kdbndpDbType, DbType[] dbTypes, Type[] clrTypes, Nullable`1<DbType> inferredDbType, KdbndpTypeHandlerFactory typeHandlerFactory);
    private static KdbndpTypeMapping();
    [CompilerGeneratedAttribute]
public string get_PgTypeName();
    [CompilerGeneratedAttribute]
public Nullable`1<KdbndpDbType> get_KdbndpDbType();
    [CompilerGeneratedAttribute]
public DbType[] get_DbTypes();
    [CompilerGeneratedAttribute]
public Type[] get_ClrTypes();
    [CompilerGeneratedAttribute]
public Nullable`1<DbType> get_InferredDbType();
    [CompilerGeneratedAttribute]
public KdbndpTypeHandlerFactory get_TypeHandlerFactory();
    internal Type get_DefaultClrType();
    public virtual string ToString();
}
public class Kdbndp.TypeMapping.KdbndpTypeMappingBuilder : object {
    [CompilerGeneratedAttribute]
private string <PgTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<KdbndpDbType> <KdbndpDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private DbType[] <DbTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <ClrTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DbType> <InferredDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private KdbndpTypeHandlerFactory <TypeHandlerFactory>k__BackingField;
    public string PgTypeName { get; public set; }
    public Nullable`1<KdbndpDbType> KdbndpDbType { get; public set; }
    public DbType[] DbTypes { get; public set; }
    public Type[] ClrTypes { get; public set; }
    public Nullable`1<DbType> InferredDbType { get; public set; }
    public KdbndpTypeHandlerFactory TypeHandlerFactory { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PgTypeName();
    [CompilerGeneratedAttribute]
public void set_PgTypeName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<KdbndpDbType> get_KdbndpDbType();
    [CompilerGeneratedAttribute]
public void set_KdbndpDbType(Nullable`1<KdbndpDbType> value);
    [CompilerGeneratedAttribute]
public DbType[] get_DbTypes();
    [CompilerGeneratedAttribute]
public void set_DbTypes(DbType[] value);
    [CompilerGeneratedAttribute]
public Type[] get_ClrTypes();
    [CompilerGeneratedAttribute]
public void set_ClrTypes(Type[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<DbType> get_InferredDbType();
    [CompilerGeneratedAttribute]
public void set_InferredDbType(Nullable`1<DbType> value);
    [CompilerGeneratedAttribute]
public KdbndpTypeHandlerFactory get_TypeHandlerFactory();
    [CompilerGeneratedAttribute]
public void set_TypeHandlerFactory(KdbndpTypeHandlerFactory value);
    public KdbndpTypeMapping Build();
}
internal abstract class Kdbndp.TypeMapping.TypeMapperBase : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, KdbndpTypeMapping> <Mappings>k__BackingField;
    [CompilerGeneratedAttribute]
private IKdbndpNameTranslator <DefaultNameTranslator>k__BackingField;
    internal Dictionary`2<string, KdbndpTypeMapping> Mappings { get; internal set; }
    public IKdbndpNameTranslator DefaultNameTranslator { get; }
    private IEnumerable`1<KdbndpTypeMapping> Kdbndp.TypeMapping.IKdbndpTypeMapper.Mappings { get; }
    protected TypeMapperBase(IKdbndpNameTranslator defaultNameTranslator);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, KdbndpTypeMapping> get_Mappings();
    [CompilerGeneratedAttribute]
internal void set_Mappings(Dictionary`2<string, KdbndpTypeMapping> value);
    [CompilerGeneratedAttribute]
public sealed virtual IKdbndpNameTranslator get_DefaultNameTranslator();
    public virtual IKdbndpTypeMapper AddMapping(KdbndpTypeMapping mapping);
    public virtual bool RemoveMapping(string pgTypeName);
    private sealed virtual override IEnumerable`1<KdbndpTypeMapping> Kdbndp.TypeMapping.IKdbndpTypeMapper.get_Mappings();
    public abstract virtual void Reset();
    public sealed virtual IKdbndpTypeMapper MapEnum(string pgName, IKdbndpNameTranslator nameTranslator);
    public sealed virtual bool UnmapEnum(string pgName, IKdbndpNameTranslator nameTranslator);
    public sealed virtual IKdbndpTypeMapper MapComposite(string pgName, IKdbndpNameTranslator nameTranslator);
    public sealed virtual bool UnmapComposite(string pgName, IKdbndpNameTranslator nameTranslator);
    private static string GetPgName(IKdbndpNameTranslator nameTranslator);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
internal class Kdbndp.TypeMapping.TypeMappingAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PgName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<KdbndpDbType> <KdbndpDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private DbType[] <DbTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <ClrTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DbType> <InferredDbType>k__BackingField;
    internal string PgName { get; }
    internal Nullable`1<KdbndpDbType> KdbndpDbType { get; }
    internal DbType[] DbTypes { get; }
    internal Type[] ClrTypes { get; }
    internal Nullable`1<DbType> InferredDbType { get; }
    internal TypeMappingAttribute(string pgName, Nullable`1<KdbndpDbType> kdbndpDbType, DbType[] dbTypes, Type[] clrTypes, Nullable`1<DbType> inferredDbType);
    internal TypeMappingAttribute(string pgName, KdbndpDbType kdbndpDbType, DbType[] dbTypes, Type[] clrTypes, DbType inferredDbType);
    internal TypeMappingAttribute(string pgName, KdbndpDbType kdbndpDbType);
    internal TypeMappingAttribute(string pgName, KdbndpDbType kdbndpDbType, DbType inferredDbType);
    internal TypeMappingAttribute(string pgName, KdbndpDbType kdbndpDbType, DbType[] dbTypes, Type clrType, DbType inferredDbType);
    internal TypeMappingAttribute(string pgName, KdbndpDbType kdbndpDbType, DbType[] dbTypes);
    internal TypeMappingAttribute(string pgName, KdbndpDbType kdbndpDbType, DbType dbType, Type[] clrTypes);
    internal TypeMappingAttribute(string pgName, KdbndpDbType kdbndpDbType, DbType dbType, Type clrType);
    internal TypeMappingAttribute(string pgName, KdbndpDbType kdbndpDbType, Type[] clrTypes, DbType inferredDbType);
    internal TypeMappingAttribute(string pgName, KdbndpDbType kdbndpDbType, Type[] clrTypes);
    internal TypeMappingAttribute(string pgName, KdbndpDbType kdbndpDbType, Type clrType, DbType inferredDbType);
    internal TypeMappingAttribute(string pgName, KdbndpDbType kdbndpDbType, Type clrType);
    internal TypeMappingAttribute(string pgName);
    [CompilerGeneratedAttribute]
internal string get_PgName();
    [CompilerGeneratedAttribute]
internal Nullable`1<KdbndpDbType> get_KdbndpDbType();
    [CompilerGeneratedAttribute]
internal DbType[] get_DbTypes();
    [CompilerGeneratedAttribute]
internal Type[] get_ClrTypes();
    [CompilerGeneratedAttribute]
internal Nullable`1<DbType> get_InferredDbType();
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class Kdbndp.Util.VersionExtensions : object {
    [ExtensionAttribute]
public static bool IsGreaterOrEqual(Version version, int major, int minor, int build);
}
internal class Kdbndp.VolatileResourceManager : object {
    [CanBeNullAttribute]
private KdbndpConnector _connector;
    [CanBeNullAttribute]
private Transaction _transaction;
    [CanBeNullAttribute]
private string _txId;
    [CanBeNullAttribute]
private KdbndpTransaction _localTx;
    [CanBeNullAttribute]
private string _preparedTxName;
    private bool _isDisposed;
    private static KdbndpLogger Log;
    private static int MaximumRollbackAttempts;
    private bool IsPrepared { get; }
    internal VolatileResourceManager(KdbndpConnection connection, Transaction transaction);
    private static VolatileResourceManager();
    private bool get_IsPrepared();
    public sealed virtual void SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment);
    public sealed virtual void Prepare(PreparingEnlistment preparingEnlistment);
    public sealed virtual void Commit(Enlistment enlistment);
    public sealed virtual void Rollback(Enlistment enlistment);
    public sealed virtual void InDoubt(Enlistment enlistment);
    private void RollbackLocal();
    private void RollbackTwoPhase();
    private void Dispose();
    private void CheckDisposed();
    private static IsolationLevel ConvertIsolationLevel(IsolationLevel isolationLevel);
}
internal class KdbndpTypes.BuiltInKingbaseType : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OID>k__BackingField;
    internal string Name { get; }
    internal UInt32 OID { get; }
    internal BuiltInKingbaseType(string name, UInt32 oid);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal UInt32 get_OID();
}
public class KdbndpTypes.KdbndpBox : ValueType {
    private static Regex Regex;
    [CompilerGeneratedAttribute]
private KdbndpPoint <UpperRight>k__BackingField;
    [CompilerGeneratedAttribute]
private KdbndpPoint <LowerLeft>k__BackingField;
    public KdbndpPoint UpperRight { get; public set; }
    public KdbndpPoint LowerLeft { get; public set; }
    public double Left { get; }
    public double Right { get; }
    public double Bottom { get; }
    public double Top { get; }
    public double Width { get; }
    public double Height { get; }
    public bool IsEmpty { get; }
    public KdbndpBox(KdbndpPoint upperRight, KdbndpPoint lowerLeft);
    public KdbndpBox(double top, double right, double bottom, double left);
    private static KdbndpBox();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public KdbndpPoint get_UpperRight();
    [CompilerGeneratedAttribute]
public void set_UpperRight(KdbndpPoint value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public KdbndpPoint get_LowerLeft();
    [CompilerGeneratedAttribute]
public void set_LowerLeft(KdbndpPoint value);
    public double get_Left();
    public double get_Right();
    public double get_Bottom();
    public double get_Top();
    public double get_Width();
    public double get_Height();
    public bool get_IsEmpty();
    public sealed virtual bool Equals(KdbndpBox other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(KdbndpBox x, KdbndpBox y);
    public static bool op_Inequality(KdbndpBox x, KdbndpBox y);
    public virtual string ToString();
    public static KdbndpBox Parse(string s);
    public virtual int GetHashCode();
}
public class KdbndpTypes.KdbndpCircle : ValueType {
    private static Regex Regex;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Radius { get; public set; }
    public KdbndpPoint Center { get; public set; }
    public KdbndpCircle(KdbndpPoint center, double radius);
    public KdbndpCircle(double x, double y, double radius);
    private static KdbndpCircle();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(double value);
    public KdbndpPoint get_Center();
    public void set_Center(KdbndpPoint value);
    public sealed virtual bool Equals(KdbndpCircle other);
    public virtual bool Equals(object obj);
    public static KdbndpCircle Parse(string s);
    public virtual string ToString();
    public static bool op_Equality(KdbndpCircle x, KdbndpCircle y);
    public static bool op_Inequality(KdbndpCircle x, KdbndpCircle y);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
public class KdbndpTypes.KdbndpDate : ValueType {
    private int _daysSinceEra;
    private InternalType _type;
    private static Int32[] CommonYearDays;
    private static Int32[] LeapYearDays;
    private static Int32[] CommonYearMaxes;
    private static Int32[] LeapYearMaxes;
    public static KdbndpDate Epoch;
    public static KdbndpDate Era;
    [PublicAPIAttribute]
public static int MaxYear;
    [PublicAPIAttribute]
public static int MinYear;
    [PublicAPIAttribute]
public static KdbndpDate MaxCalculableValue;
    [PublicAPIAttribute]
public static KdbndpDate MinCalculableValue;
    public static KdbndpDate Infinity;
    public static KdbndpDate NegativeInfinity;
    private static int DaysInYear;
    private static int DaysIn4Years;
    private static int DaysInCentury;
    private static int DaysIn4Centuries;
    [PublicAPIAttribute]
public static KdbndpDate Now { get; }
    [PublicAPIAttribute]
public static KdbndpDate Today { get; }
    [PublicAPIAttribute]
public static KdbndpDate Yesterday { get; }
    [PublicAPIAttribute]
public static KdbndpDate Tomorrow { get; }
    [PublicAPIAttribute]
public int DayOfYear { get; }
    [PublicAPIAttribute]
public int Year { get; }
    [PublicAPIAttribute]
public int Month { get; }
    [PublicAPIAttribute]
public int Day { get; }
    [PublicAPIAttribute]
public DayOfWeek DayOfWeek { get; }
    internal int DaysSinceEra { get; }
    [PublicAPIAttribute]
public bool IsLeapYear { get; }
    [PublicAPIAttribute]
public bool IsInfinity { get; }
    [PublicAPIAttribute]
public bool IsNegativeInfinity { get; }
    [PublicAPIAttribute]
public bool IsFinite { get; }
    private KdbndpDate(InternalType type);
    internal KdbndpDate(int days);
    public KdbndpDate(DateTime dateTime);
    public KdbndpDate(KdbndpDate copyFrom);
    public KdbndpDate(int year, int month, int day);
    private static KdbndpDate();
    public virtual string ToString();
    public static KdbndpDate Parse(string str);
    [PublicAPIAttribute]
public static bool TryParse(string str, KdbndpDate& date);
    public static KdbndpDate get_Now();
    public static KdbndpDate get_Today();
    public static KdbndpDate get_Yesterday();
    public static KdbndpDate get_Tomorrow();
    public int get_DayOfYear();
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public DayOfWeek get_DayOfWeek();
    internal int get_DaysSinceEra();
    public bool get_IsLeapYear();
    public bool get_IsInfinity();
    public bool get_IsNegativeInfinity();
    public bool get_IsFinite();
    private static int DaysForYears(int years);
    private static bool IsLeap(int year);
    [PublicAPIAttribute]
public KdbndpDate AddDays(int days);
    [PublicAPIAttribute]
public KdbndpDate AddYears(int years);
    [PublicAPIAttribute]
public KdbndpDate AddMonths(int months);
    [PublicAPIAttribute]
public KdbndpDate Add(KdbndpTimeSpan interval);
    [PublicAPIAttribute]
internal KdbndpDate Add(KdbndpTimeSpan interval, int carriedOverflow);
    public sealed virtual int Compare(KdbndpDate x, KdbndpDate y);
    public sealed virtual int Compare(object x, object y);
    public sealed virtual bool Equals(KdbndpDate other);
    public virtual bool Equals(object obj);
    public sealed virtual int CompareTo(KdbndpDate other);
    public sealed virtual int CompareTo(object o);
    public virtual int GetHashCode();
    public static bool op_Equality(KdbndpDate x, KdbndpDate y);
    public static bool op_Inequality(KdbndpDate x, KdbndpDate y);
    public static bool op_LessThan(KdbndpDate x, KdbndpDate y);
    public static bool op_GreaterThan(KdbndpDate x, KdbndpDate y);
    public static bool op_LessThanOrEqual(KdbndpDate x, KdbndpDate y);
    public static bool op_GreaterThanOrEqual(KdbndpDate x, KdbndpDate y);
    public static DateTime ToDateTime(KdbndpDate date);
    public static DateTime op_Explicit(KdbndpDate date);
    public static KdbndpDate ToKdbndpDate(DateTime date);
    public static KdbndpDate op_Explicit(DateTime date);
    public static KdbndpDate op_Addition(KdbndpDate date, KdbndpTimeSpan interval);
    public static KdbndpDate op_Addition(KdbndpTimeSpan interval, KdbndpDate date);
    public static KdbndpDate op_Subtraction(KdbndpDate date, KdbndpTimeSpan interval);
    public KdbndpDate Subtract(KdbndpTimeSpan interval);
    public static KdbndpTimeSpan op_Subtraction(KdbndpDate dateX, KdbndpDate dateY);
}
[IsReadOnlyAttribute]
public class KdbndpTypes.KdbndpDateTime : ValueType {
    private KdbndpDate _date;
    private TimeSpan _time;
    private InternalType _type;
    public static KdbndpDateTime Epoch;
    public static KdbndpDateTime Era;
    public static KdbndpDateTime Infinity;
    public static KdbndpDateTime NegativeInfinity;
    private static int MaxDateTimeDay;
    public KdbndpDate Date { get; }
    public TimeSpan Time { get; }
    public int DayOfYear { get; }
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    public DayOfWeek DayOfWeek { get; }
    public bool IsLeapYear { get; }
    public long Ticks { get; }
    public int Millisecond { get; }
    public int Second { get; }
    public int Minute { get; }
    public int Hour { get; }
    public bool IsInfinity { get; }
    public bool IsNegativeInfinity { get; }
    public bool IsFinite { get; }
    public DateTimeKind Kind { get; }
    public static KdbndpDateTime Now { get; }
    private KdbndpDateTime(InternalType type, KdbndpDate date, TimeSpan time);
    public KdbndpDateTime(KdbndpDate date, TimeSpan time, DateTimeKind kind);
    public KdbndpDateTime(KdbndpDate date);
    public KdbndpDateTime(int year, int month, int day, int hours, int minutes, int seconds, DateTimeKind kind);
    public KdbndpDateTime(int year, int month, int day, int hours, int minutes, int seconds, int milliseconds, DateTimeKind kind);
    public KdbndpDateTime(DateTime dateTime);
    public KdbndpDateTime(long ticks, DateTimeKind kind);
    public KdbndpDateTime(long ticks);
    private static KdbndpDateTime();
    public KdbndpDate get_Date();
    public TimeSpan get_Time();
    public int get_DayOfYear();
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public DayOfWeek get_DayOfWeek();
    public bool get_IsLeapYear();
    public long get_Ticks();
    public int get_Millisecond();
    public int get_Second();
    public int get_Minute();
    public int get_Hour();
    public bool get_IsInfinity();
    public bool get_IsNegativeInfinity();
    public bool get_IsFinite();
    public DateTimeKind get_Kind();
    public DateTime ToDateTime();
    public KdbndpDateTime ToUniversalTime();
    public KdbndpDateTime ToLocalTime();
    public static KdbndpDateTime get_Now();
    public virtual string ToString();
    public static KdbndpDateTime Parse(string str);
    public sealed virtual bool Equals(KdbndpDateTime other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(KdbndpDateTime other);
    public sealed virtual int CompareTo(object o);
    public sealed virtual int Compare(KdbndpDateTime x, KdbndpDateTime y);
    public sealed virtual int Compare(object x, object y);
    public KdbndpDateTime Add(KdbndpTimeSpan value);
    public KdbndpDateTime Add(TimeSpan value);
    public KdbndpDateTime AddYears(int value);
    public KdbndpDateTime AddMonths(int value);
    public KdbndpDateTime AddDays(double value);
    public KdbndpDateTime AddHours(double value);
    public KdbndpDateTime AddMinutes(double value);
    public KdbndpDateTime AddSeconds(double value);
    public KdbndpDateTime AddMilliseconds(double value);
    public KdbndpDateTime AddTicks(long value);
    public KdbndpDateTime Subtract(KdbndpTimeSpan interval);
    public KdbndpTimeSpan Subtract(KdbndpDateTime timestamp);
    public static KdbndpDateTime op_Addition(KdbndpDateTime timestamp, KdbndpTimeSpan interval);
    public static KdbndpDateTime op_Addition(KdbndpTimeSpan interval, KdbndpDateTime timestamp);
    public static KdbndpDateTime op_Subtraction(KdbndpDateTime timestamp, KdbndpTimeSpan interval);
    public static KdbndpTimeSpan op_Subtraction(KdbndpDateTime x, KdbndpDateTime y);
    public static bool op_Equality(KdbndpDateTime x, KdbndpDateTime y);
    public static bool op_Inequality(KdbndpDateTime x, KdbndpDateTime y);
    public static bool op_LessThan(KdbndpDateTime x, KdbndpDateTime y);
    public static bool op_GreaterThan(KdbndpDateTime x, KdbndpDateTime y);
    public static bool op_LessThanOrEqual(KdbndpDateTime x, KdbndpDateTime y);
    public static bool op_GreaterThanOrEqual(KdbndpDateTime x, KdbndpDateTime y);
    public static KdbndpDateTime op_Implicit(DateTime dateTime);
    public static KdbndpDateTime ToKdbndpDateTime(DateTime dateTime);
    public static DateTime op_Explicit(KdbndpDateTime kdbndpDateTime);
    public KdbndpDateTime Normalize();
    private static InternalType KindToInternalType(DateTimeKind kind);
}
public enum KdbndpTypes.KdbndpDbType : Enum {
    public int value__;
    [BuiltInKingbaseType("int8", "20")]
public static KdbndpDbType Bigint;
    [BuiltInKingbaseType("sqlserver_bigint", "5065")]
public static KdbndpDbType SqlServer_Bigint;
    [BuiltInKingbaseType("uint4", "7082")]
public static KdbndpDbType Uint4;
    [BuiltInKingbaseType("uint8", "7084")]
public static KdbndpDbType Uint8;
    [BuiltInKingbaseType("float8", "701")]
public static KdbndpDbType Double;
    [BuiltInKingbaseType("sqlserver_float", "6071")]
public static KdbndpDbType SqlServer_Float;
    [BuiltInKingbaseType("int4", "23")]
public static KdbndpDbType Integer;
    [BuiltInKingbaseType("sqlserver_int", "5063")]
public static KdbndpDbType SqlServer_Int;
    [BuiltInKingbaseType("numeric", "1700")]
public static KdbndpDbType Numeric;
    [BuiltInKingbaseType("sqlserver_numeric", "5067")]
public static KdbndpDbType SqlServer_Numeric;
    [BuiltInKingbaseType("float4", "700")]
public static KdbndpDbType Real;
    [BuiltInKingbaseType("sqlserver_real", "6069")]
public static KdbndpDbType SqlServer_Real;
    [BuiltInKingbaseType("int2", "21")]
public static KdbndpDbType Smallint;
    [BuiltInKingbaseType("smallint", "5061")]
public static KdbndpDbType SqlServer_Smallint;
    [BuiltInKingbaseType("mediumint", "7016")]
public static KdbndpDbType Mediumint;
    [BuiltInKingbaseType("year", "7024")]
public static KdbndpDbType Year;
    [BuiltInKingbaseType("money", "790")]
public static KdbndpDbType Money;
    [BuiltInKingbaseType("sqlserver_money", "5069")]
public static KdbndpDbType SqlServer_Money;
    [BuiltInKingbaseType("bool", "16")]
public static KdbndpDbType Boolean;
    [BuiltInKingbaseType("box", "603")]
public static KdbndpDbType Box;
    [BuiltInKingbaseType("circle", "718")]
public static KdbndpDbType Circle;
    [BuiltInKingbaseType("line", "628")]
public static KdbndpDbType Line;
    [BuiltInKingbaseType("lseg", "601")]
public static KdbndpDbType LSeg;
    [BuiltInKingbaseType("path", "602")]
public static KdbndpDbType Path;
    [BuiltInKingbaseType("point", "600")]
public static KdbndpDbType Point;
    [BuiltInKingbaseType("polygon", "604")]
public static KdbndpDbType Polygon;
    [BuiltInKingbaseType("bpchar", "1042")]
public static KdbndpDbType Char;
    [BuiltInKingbaseType("text", "25")]
public static KdbndpDbType Text;
    [BuiltInKingbaseType("sqlserver_text", "6075")]
public static KdbndpDbType Sqlserver_Text;
    [BuiltInKingbaseType("mediumtext", "7019")]
public static KdbndpDbType Mediumtext;
    [BuiltInKingbaseType("tinytext", "7020")]
public static KdbndpDbType Tinytext;
    [BuiltInKingbaseType("longtext", "7018")]
public static KdbndpDbType Longtext;
    [BuiltInKingbaseType("varchar", "1043")]
public static KdbndpDbType Varchar;
    [BuiltInKingbaseType("varcharbyte", "8018")]
public static KdbndpDbType VarcharByte;
    [BuiltInKingbaseType("bpcharbyte", "8016")]
public static KdbndpDbType CharByte;
    [BuiltInKingbaseType("clob", "8014")]
public static KdbndpDbType Clob;
    [BuiltInKingbaseType("nclob", "8015")]
public static KdbndpDbType Nclob;
    [BuiltInKingbaseType("bfile", "8078")]
public static KdbndpDbType Bfile;
    [BuiltInKingbaseType("nvarchar", "5041")]
public static KdbndpDbType NVarchar;
    [BuiltInKingbaseType("nchar", "5039")]
public static KdbndpDbType NChar;
    [BuiltInKingbaseType("rowid", "6123")]
public static KdbndpDbType Rowid;
    [BuiltInKingbaseType("name", "19")]
public static KdbndpDbType Name;
    public static KdbndpDbType Citext;
    [BuiltInKingbaseType("char", "18")]
public static KdbndpDbType InternalChar;
    [BuiltInKingbaseType("bytea", "17")]
public static KdbndpDbType Bytea;
    [BuiltInKingbaseType("blob", "8013")]
public static KdbndpDbType Blob;
    [BuiltInKingbaseType("tinyblob", "7023")]
public static KdbndpDbType TinyBlob;
    [BuiltInKingbaseType("mediumblob", "7022")]
public static KdbndpDbType MediumBlob;
    [BuiltInKingbaseType("longblob", "7021")]
public static KdbndpDbType LongBlob;
    [BuiltInKingbaseType("binary", "3383")]
public static KdbndpDbType Binary;
    [BuiltInKingbaseType("varbinary", "3384")]
public static KdbndpDbType VarBinary;
    [BuiltInKingbaseType("sqlserver_binary", "5022")]
public static KdbndpDbType SqlServer_Binary;
    [BuiltInKingbaseType("sqlserver_varbinary", "5024")]
public static KdbndpDbType SqlServer_VarBinary;
    [BuiltInKingbaseType("date", "1082")]
public static KdbndpDbType Date;
    [BuiltInKingbaseType("time", "1083")]
public static KdbndpDbType Time;
    [BuiltInKingbaseType("timestamp", "1114")]
public static KdbndpDbType Timestamp;
    [BuiltInKingbaseType("ora_date", "8020")]
public static KdbndpDbType Oradate;
    [BuiltInKingbaseType("datetime", "4189")]
public static KdbndpDbType Datetime;
    [BuiltInKingbaseType("dsinterval", "7000")]
public static KdbndpDbType DSInterval;
    [BuiltInKingbaseType("yminterval", "7002")]
public static KdbndpDbType YMInterval;
    [BuiltInKingbaseType("mysql_timestamp", "7954")]
public static KdbndpDbType Mysql_Timestamp;
    [BuiltInKingbaseType("mysql_time", "7950")]
public static KdbndpDbType Mysql_Time;
    [BuiltInKingbaseType("mysql_date", "7944")]
public static KdbndpDbType Mysql_Date;
    [BuiltInKingbaseType("mysql_datetime", "7952")]
public static KdbndpDbType Mysql_DateTime;
    [BuiltInKingbaseType("tinyint", "8100")]
public static KdbndpDbType Tinyint;
    [ObsoleteAttribute("Use TimestampTz instead")]
public static KdbndpDbType TimestampTZ;
    [BuiltInKingbaseType("timestamptz", "1184")]
public static KdbndpDbType TimestampTz;
    [BuiltInKingbaseType("interval", "1186")]
public static KdbndpDbType Interval;
    [ObsoleteAttribute("Use TimeTz instead")]
public static KdbndpDbType TimeTZ;
    [BuiltInKingbaseType("timetz", "1266")]
public static KdbndpDbType TimeTz;
    [ObsoleteAttribute("The KingbaseES abstime time is obsolete.")]
[BuiltInKingbaseType("abstime", "702")]
public static KdbndpDbType Abstime;
    [BuiltInKingbaseType("sqlserver_tinyint", "5026")]
public static KdbndpDbType SqlServer_Tinyint;
    [BuiltInKingbaseType("sqlserver_date", "7754")]
public static KdbndpDbType SqlServer_Date;
    [BuiltInKingbaseType("sqlserver_datetime", "7881")]
public static KdbndpDbType SqlServer_DateTime;
    [BuiltInKingbaseType("sqlserver_time", "7755")]
public static KdbndpDbType SqlServer_Time;
    [BuiltInKingbaseType("inet", "869")]
public static KdbndpDbType Inet;
    [BuiltInKingbaseType("cidr", "650")]
public static KdbndpDbType Cidr;
    [BuiltInKingbaseType("macaddr", "829")]
public static KdbndpDbType MacAddr;
    [BuiltInKingbaseType("macaddr8", "774")]
public static KdbndpDbType MacAddr8;
    [BuiltInKingbaseType("bit", "1560")]
public static KdbndpDbType Bit;
    [BuiltInKingbaseType("mysql_bit", "4655")]
public static KdbndpDbType Mysql_Bit;
    [BuiltInKingbaseType("sqlserver_bit", "7915")]
public static KdbndpDbType SqlServer_Bit;
    [BuiltInKingbaseType("varbit", "1562")]
public static KdbndpDbType Varbit;
    [BuiltInKingbaseType("tsvector", "3614")]
public static KdbndpDbType TsVector;
    [BuiltInKingbaseType("tsquery", "3615")]
public static KdbndpDbType TsQuery;
    [BuiltInKingbaseType("regconfig", "3734")]
public static KdbndpDbType Regconfig;
    [BuiltInKingbaseType("uuid", "2950")]
public static KdbndpDbType Uuid;
    [BuiltInKingbaseType("xml", "142")]
public static KdbndpDbType Xml;
    [BuiltInKingbaseType("json", "114")]
public static KdbndpDbType Json;
    [BuiltInKingbaseType("jsonb", "3802")]
public static KdbndpDbType Jsonb;
    public static KdbndpDbType Hstore;
    public static KdbndpDbType Array;
    public static KdbndpDbType Range;
    [BuiltInKingbaseType("refcursor", "1790")]
public static KdbndpDbType Refcursor;
    [BuiltInKingbaseType("oidvector", "30")]
public static KdbndpDbType Oidvector;
    [BuiltInKingbaseType("int2vector", "22")]
public static KdbndpDbType Int2Vector;
    [BuiltInKingbaseType("oid", "26")]
public static KdbndpDbType Oid;
    [BuiltInKingbaseType("xid", "28")]
public static KdbndpDbType Xid;
    [BuiltInKingbaseType("cid", "29")]
public static KdbndpDbType Cid;
    [BuiltInKingbaseType("regtype", "2206")]
public static KdbndpDbType Regtype;
    [BuiltInKingbaseType("tid", "27")]
public static KdbndpDbType Tid;
    [BuiltInKingbaseType("unknown", "705")]
public static KdbndpDbType Unknown;
    public static KdbndpDbType Geometry;
    public static KdbndpDbType Geography;
}
[ObsoleteAttribute("Use ValueTuple<IPAddress, int> instead")]
public class KdbndpTypes.KdbndpInet : ValueType {
    [CompilerGeneratedAttribute]
private IPAddress <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Netmask>k__BackingField;
    public IPAddress Address { get; public set; }
    public int Netmask { get; public set; }
    public KdbndpInet(IPAddress address, int netmask);
    public KdbndpInet(IPAddress address);
    public KdbndpInet(string addr);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IPAddress get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(IPAddress value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Netmask();
    [CompilerGeneratedAttribute]
public void set_Netmask(int value);
    public virtual string ToString();
    public static IPAddress ToIPAddress(KdbndpInet inet);
    public static IPAddress op_Explicit(KdbndpInet inet);
    public static KdbndpInet ToKdbndpInet(IPAddress ip);
    public static KdbndpInet op_Implicit(IPAddress ip);
    public void Deconstruct(IPAddress& address, Int32& netmask);
    public sealed virtual bool Equals(KdbndpInet other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(KdbndpInet x, KdbndpInet y);
    public static bool op_Inequality(KdbndpInet x, KdbndpInet y);
}
[IsReadOnlyAttribute]
public class KdbndpTypes.KdbndpIntervalDS : ValueType {
    internal static int MaxDay;
    internal static int MinDay;
    internal static long TicksPerMicrosecond;
    internal static long TicksPerMillsecond;
    internal static long TicksPerSecond;
    internal static long TicksPerMinute;
    internal static long TicksPerHour;
    internal static long TicksPerDay;
    internal static int HoursPerDay;
    public static KdbndpIntervalDS MaxValue;
    public static KdbndpIntervalDS MinValue;
    public static KdbndpIntervalDS Zero;
    public static KdbndpIntervalDS Null;
    private Nullable`1<int> _days;
    private Nullable`1<long> _ticks;
    private int _dayPrec;
    private int _fSecondPrec;
    internal long Ticks { get; }
    public int Nanoseconds { get; }
    public double Milliseconds { get; }
    public int Seconds { get; }
    public int Minutes { get; }
    public int Hours { get; }
    public int Days { get; }
    public bool IsNull { get; }
    public TimeSpan Value { get; }
    public Byte[] BinData { get; }
    public double TotalDays { get; }
    public KdbndpIntervalDS(double totalDays);
    public KdbndpIntervalDS(string intervalStr);
    public KdbndpIntervalDS(TimeSpan timespan);
    internal KdbndpIntervalDS(int days, long ticks);
    internal KdbndpIntervalDS(int days, long ticks, int dayPrecision, int fracSecPrecision);
    public KdbndpIntervalDS(int days, int hours, int minutes, int seconds, int nanoseconds);
    public KdbndpIntervalDS(int days, int hours, int minutes, int seconds, double milliseconds);
    public KdbndpIntervalDS(Byte[] binData);
    private static KdbndpIntervalDS();
    internal long get_Ticks();
    public int get_Nanoseconds();
    public double get_Milliseconds();
    public int get_Seconds();
    public int get_Minutes();
    public int get_Hours();
    public int get_Days();
    public bool get_IsNull();
    public TimeSpan get_Value();
    public Byte[] get_BinData();
    public double get_TotalDays();
    internal KdbndpIntervalDS Negate();
    public KdbndpIntervalDS Duration();
    internal static Byte[] intToBytes(Nullable`1<int> days, Nullable`1<long> ticks);
    public static KdbndpIntervalDS op_Implicit(TimeSpan value1);
    public static TimeSpan op_Explicit(KdbndpIntervalDS value1);
    public static KdbndpIntervalDS op_Explicit(string intervalStr);
    public sealed virtual bool Equals(KdbndpIntervalDS other);
    public static bool Equals(KdbndpIntervalDS value1, KdbndpIntervalDS value2);
    public static bool GreaterThan(KdbndpIntervalDS value1, KdbndpIntervalDS value2);
    public static bool GreaterThanOrEqual(KdbndpIntervalDS value1, KdbndpIntervalDS value2);
    public static bool LessThan(KdbndpIntervalDS value1, KdbndpIntervalDS value2);
    public static bool LessThanOrEqual(KdbndpIntervalDS value1, KdbndpIntervalDS value2);
    public static bool NotEquals(KdbndpIntervalDS value1, KdbndpIntervalDS value2);
    public virtual bool Equals(object obj);
    public static int Compare(KdbndpIntervalDS value1, KdbndpIntervalDS value2);
    private sealed virtual override int System.Collections.Generic.IComparer<KdbndpTypes.KdbndpIntervalDS>.Compare(KdbndpIntervalDS value1, KdbndpIntervalDS value2);
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(KdbndpIntervalDS other);
    public sealed virtual int CompareTo(object other);
    public static KdbndpIntervalDS Parse(string str);
    public static KdbndpIntervalDS SetPrecision(KdbndpIntervalDS value1, int dayPrecision, int fracSecPrecision);
    public virtual string ToString();
    public static KdbndpIntervalDS op_Addition(KdbndpIntervalDS value1, KdbndpIntervalDS value2);
    public static KdbndpIntervalDS op_Subtraction(KdbndpIntervalDS value1, KdbndpIntervalDS value2);
    public static KdbndpIntervalDS op_Multiply(KdbndpIntervalDS value1, int multiplier);
    public static KdbndpIntervalDS op_Division(KdbndpIntervalDS value1, int divisor);
    public static bool op_Equality(KdbndpIntervalDS value1, KdbndpIntervalDS value2);
    public static bool op_Inequality(KdbndpIntervalDS value1, KdbndpIntervalDS value2);
    public static bool op_LessThan(KdbndpIntervalDS value1, KdbndpIntervalDS value2);
    public static bool op_LessThanOrEqual(KdbndpIntervalDS value1, KdbndpIntervalDS value2);
    public static bool op_GreaterThan(KdbndpIntervalDS value1, KdbndpIntervalDS value2);
    public static bool op_GreaterThanOrEqual(KdbndpIntervalDS value1, KdbndpIntervalDS value2);
    public static KdbndpIntervalDS op_UnaryNegation(KdbndpIntervalDS value1);
}
[IsReadOnlyAttribute]
public class KdbndpTypes.KdbndpIntervalYM : ValueType {
    internal static int MonthsPerYear;
    internal static int MaxYear;
    internal static int MinYear;
    public static KdbndpIntervalYM MaxValue;
    public static KdbndpIntervalYM MinValue;
    public static KdbndpIntervalYM Zero;
    public static KdbndpIntervalYM Null;
    [CanBeNullAttribute]
private Nullable`1<int> _months;
    private Nullable`1<int> _years;
    private int _yearPrec;
    public int Months { get; }
    public int Years { get; }
    public bool IsNull { get; }
    public Byte[] BinData { get; }
    public long TotalMonths { get; }
    public double TotalYears { get; }
    public KdbndpIntervalYM(long totalMonths);
    public KdbndpIntervalYM(double totalYears);
    public KdbndpIntervalYM(int years, int months);
    public KdbndpIntervalYM(int years, int months, int yearPrecision);
    public KdbndpIntervalYM(string intervalStr);
    public KdbndpIntervalYM(Byte[] binData);
    private static KdbndpIntervalYM();
    public int get_Months();
    public int get_Years();
    public sealed virtual bool get_IsNull();
    public Byte[] get_BinData();
    public long get_TotalMonths();
    public double get_TotalYears();
    internal KdbndpIntervalYM Negate();
    internal static Byte[] intToBytes(Nullable`1<int> year, Nullable`1<int> month);
    public static KdbndpIntervalYM op_Implicit(long value1);
    public static long op_Explicit(KdbndpIntervalYM value1);
    public static KdbndpIntervalYM op_Explicit(string intervalStr);
    public bool Equals(KdbndpIntervalYM other);
    public static bool Equals(KdbndpIntervalYM value1, KdbndpIntervalYM value2);
    public static bool GreaterThan(KdbndpIntervalYM value1, KdbndpIntervalYM value2);
    public static bool GreaterThanOrEqual(KdbndpIntervalYM value1, KdbndpIntervalYM value2);
    public static bool LessThan(KdbndpIntervalYM value1, KdbndpIntervalYM value2);
    public static bool LessThanOrEqual(KdbndpIntervalYM value1, KdbndpIntervalYM value2);
    public static bool NotEquals(KdbndpIntervalYM value1, KdbndpIntervalYM value2);
    public virtual bool Equals(object obj);
    internal static int Compare(KdbndpIntervalYM value1, KdbndpIntervalYM value2);
    private sealed virtual override int System.Collections.Generic.IComparer<KdbndpTypes.KdbndpIntervalYM>.Compare(KdbndpIntervalYM value1, KdbndpIntervalYM value2);
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
    public virtual int GetHashCode();
    public int CompareTo(KdbndpIntervalYM other);
    public sealed virtual int CompareTo(object other);
    public static KdbndpIntervalYM Parse(string str);
    public static KdbndpIntervalYM SetPrecision(KdbndpIntervalYM value1, int yearPrecision);
    public virtual string ToString();
    public static KdbndpIntervalYM op_Addition(KdbndpIntervalYM value1, KdbndpIntervalYM value2);
    public static KdbndpIntervalYM op_Subtraction(KdbndpIntervalYM value1, KdbndpIntervalYM value2);
    public static KdbndpIntervalYM op_Multiply(KdbndpIntervalYM value1, int multiplier);
    public static KdbndpIntervalYM op_Division(KdbndpIntervalYM value1, int divisor);
    public static bool op_Equality(KdbndpIntervalYM value1, KdbndpIntervalYM value2);
    public static bool op_Inequality(KdbndpIntervalYM value1, KdbndpIntervalYM value2);
    public static bool op_LessThan(KdbndpIntervalYM value1, KdbndpIntervalYM value2);
    public static bool op_LessThanOrEqual(KdbndpIntervalYM value1, KdbndpIntervalYM value2);
    public static bool op_GreaterThan(KdbndpIntervalYM value1, KdbndpIntervalYM value2);
    public static bool op_GreaterThanOrEqual(KdbndpIntervalYM value1, KdbndpIntervalYM value2);
    public static KdbndpIntervalYM op_UnaryNegation(KdbndpIntervalYM value1);
    public static TimeSpan op_Explicit(KdbndpIntervalYM v);
}
public class KdbndpTypes.KdbndpLine : ValueType {
    private static Regex Regex;
    [CompilerGeneratedAttribute]
private double <A>k__BackingField;
    [CompilerGeneratedAttribute]
private double <B>k__BackingField;
    [CompilerGeneratedAttribute]
private double <C>k__BackingField;
    public double A { get; public set; }
    public double B { get; public set; }
    public double C { get; public set; }
    public KdbndpLine(double a, double b, double c);
    private static KdbndpLine();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_A();
    [CompilerGeneratedAttribute]
public void set_A(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_B();
    [CompilerGeneratedAttribute]
public void set_B(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_C();
    [CompilerGeneratedAttribute]
public void set_C(double value);
    public static KdbndpLine Parse(string s);
    public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(KdbndpLine other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(KdbndpLine x, KdbndpLine y);
    public static bool op_Inequality(KdbndpLine x, KdbndpLine y);
}
public class KdbndpTypes.KdbndpLSeg : ValueType {
    private static Regex Regex;
    [CompilerGeneratedAttribute]
private KdbndpPoint <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private KdbndpPoint <End>k__BackingField;
    public KdbndpPoint Start { get; public set; }
    public KdbndpPoint End { get; public set; }
    public KdbndpLSeg(KdbndpPoint start, KdbndpPoint end);
    public KdbndpLSeg(double startx, double starty, double endx, double endy);
    private static KdbndpLSeg();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public KdbndpPoint get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(KdbndpPoint value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public KdbndpPoint get_End();
    [CompilerGeneratedAttribute]
public void set_End(KdbndpPoint value);
    public static KdbndpLSeg Parse(string s);
    public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(KdbndpLSeg other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(KdbndpLSeg x, KdbndpLSeg y);
    public static bool op_Inequality(KdbndpLSeg x, KdbndpLSeg y);
}
[DefaultMemberAttribute("Item")]
public class KdbndpTypes.KdbndpPath : ValueType {
    private List`1<KdbndpPoint> _points;
    [CompilerGeneratedAttribute]
private bool <Open>k__BackingField;
    public bool Open { get; public set; }
    public KdbndpPoint Item { get; public set; }
    public int Capacity { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public KdbndpPath(IEnumerable`1<KdbndpPoint> points, bool open);
    public KdbndpPath(IEnumerable`1<KdbndpPoint> points);
    public KdbndpPath(KdbndpPoint[] points);
    public KdbndpPath(bool open);
    public KdbndpPath(int capacity, bool open);
    public KdbndpPath(int capacity);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Open();
    [CompilerGeneratedAttribute]
public void set_Open(bool value);
    public sealed virtual KdbndpPoint get_Item(int index);
    public sealed virtual void set_Item(int index, KdbndpPoint value);
    public int get_Capacity();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(KdbndpPoint item);
    public sealed virtual void Insert(int index, KdbndpPoint item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(KdbndpPoint item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KdbndpPoint item);
    public sealed virtual void CopyTo(KdbndpPoint[] array, int arrayIndex);
    public sealed virtual bool Remove(KdbndpPoint item);
    public sealed virtual IEnumerator`1<KdbndpPoint> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Equals(KdbndpPath other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(KdbndpPath x, KdbndpPath y);
    public static bool op_Inequality(KdbndpPath x, KdbndpPath y);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static KdbndpPath Parse(string s);
}
public class KdbndpTypes.KdbndpPoint : ValueType {
    private static Regex Regex;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; public set; }
    public double Y { get; public set; }
    public KdbndpPoint(double x, double y);
    private static KdbndpPoint();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    public sealed virtual bool Equals(KdbndpPoint other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(KdbndpPoint x, KdbndpPoint y);
    public static bool op_Inequality(KdbndpPoint x, KdbndpPoint y);
    public virtual int GetHashCode();
    public static KdbndpPoint Parse(string s);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class KdbndpTypes.KdbndpPolygon : ValueType {
    private List`1<KdbndpPoint> _points;
    public KdbndpPoint Item { get; public set; }
    public int Capacity { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public KdbndpPolygon(IEnumerable`1<KdbndpPoint> points);
    public KdbndpPolygon(KdbndpPoint[] points);
    public KdbndpPolygon(int capacity);
    public sealed virtual KdbndpPoint get_Item(int index);
    public sealed virtual void set_Item(int index, KdbndpPoint value);
    public int get_Capacity();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(KdbndpPoint item);
    public sealed virtual void Insert(int index, KdbndpPoint item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(KdbndpPoint item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KdbndpPoint item);
    public sealed virtual void CopyTo(KdbndpPoint[] array, int arrayIndex);
    public sealed virtual bool Remove(KdbndpPoint item);
    public sealed virtual IEnumerator`1<KdbndpPoint> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Equals(KdbndpPolygon other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(KdbndpPolygon x, KdbndpPolygon y);
    public static bool op_Inequality(KdbndpPolygon x, KdbndpPolygon y);
    public virtual int GetHashCode();
    public static KdbndpPolygon Parse(string s);
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[PublicAPIAttribute]
public class KdbndpTypes.KdbndpRange`1 : ValueType {
    private static string EmptyLiteral;
    private static string LowerInfinityLiteral;
    private static string UpperInfinityLiteral;
    private static string NullLiteral;
    private static char LowerInclusiveBound;
    private static char LowerExclusiveBound;
    private static char UpperInclusiveBound;
    private static char UpperExclusiveBound;
    private static char BoundSeparator;
    private static TypeConverter BoundConverter;
    private static bool HasEquatableBounds;
    public static KdbndpRange`1<T> Empty;
    [CompilerGeneratedAttribute]
private T <LowerBound>k__BackingField;
    [CompilerGeneratedAttribute]
private T <UpperBound>k__BackingField;
    internal RangeFlags Flags;
    [CanBeNullAttribute]
public T LowerBound { get; }
    [CanBeNullAttribute]
public T UpperBound { get; }
    public bool LowerBoundIsInclusive { get; }
    public bool UpperBoundIsInclusive { get; }
    public bool LowerBoundInfinite { get; }
    public bool UpperBoundInfinite { get; }
    public bool IsEmpty { get; }
    public KdbndpRange`1(T lowerBound, T upperBound);
    public KdbndpRange`1(T lowerBound, bool lowerBoundIsInclusive, T upperBound, bool upperBoundIsInclusive);
    public KdbndpRange`1(T lowerBound, bool lowerBoundIsInclusive, bool lowerBoundInfinite, T upperBound, bool upperBoundIsInclusive, bool upperBoundInfinite);
    internal KdbndpRange`1(T lowerBound, T upperBound, RangeFlags flags);
    private static KdbndpRange`1();
    [CompilerGeneratedAttribute]
public T get_LowerBound();
    [CompilerGeneratedAttribute]
public T get_UpperBound();
    public bool get_LowerBoundIsInclusive();
    public bool get_UpperBoundIsInclusive();
    public bool get_LowerBoundInfinite();
    public bool get_UpperBoundInfinite();
    public bool get_IsEmpty();
    private static bool IsEmptyRange(T lowerBound, T upperBound, RangeFlags flags);
    private static RangeFlags EvaluateBoundaryFlags(bool lowerBoundIsInclusive, bool upperBoundIsInclusive, bool lowerBoundInfinite, bool upperBoundInfinite);
    public static bool op_Equality(KdbndpRange`1<T> x, KdbndpRange`1<T> y);
    public static bool op_Inequality(KdbndpRange`1<T> x, KdbndpRange`1<T> y);
    public virtual bool Equals(object o);
    public sealed virtual bool Equals(KdbndpRange`1<T> other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static KdbndpRange`1<T> Parse(string value);
}
[IsReadOnlyAttribute]
public class KdbndpTypes.KdbndpTid : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <BlockNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <OffsetNumber>k__BackingField;
    public UInt32 BlockNumber { get; }
    public ushort OffsetNumber { get; }
    public KdbndpTid(UInt32 blockNumber, ushort offsetNumber);
    [CompilerGeneratedAttribute]
public UInt32 get_BlockNumber();
    [CompilerGeneratedAttribute]
public ushort get_OffsetNumber();
    public sealed virtual bool Equals(KdbndpTid other);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public static bool op_Equality(KdbndpTid left, KdbndpTid right);
    public static bool op_Inequality(KdbndpTid left, KdbndpTid right);
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class KdbndpTypes.KdbndpTimeSpan : ValueType {
    public static long TicksPerMicrosecond;
    public static long TicksPerMillsecond;
    public static long TicksPerSecond;
    public static long TicksPerMinute;
    public static long TicksPerHour;
    public static long TicksPerDay;
    public static int HoursPerDay;
    public static int DaysPerMonth;
    public static long TicksPerMonth;
    public static int MonthsPerYear;
    public static KdbndpTimeSpan MaxValue;
    public static KdbndpTimeSpan MinValue;
    public static KdbndpTimeSpan Zero;
    private int _months;
    private int _days;
    private long _ticks;
    public long Ticks { get; }
    public int Microseconds { get; }
    public int Milliseconds { get; }
    public int Seconds { get; }
    public int Minutes { get; }
    public int Hours { get; }
    public int Days { get; }
    public int Months { get; }
    public TimeSpan Time { get; }
    public long TotalTicks { get; }
    public double TotalMicroseconds { get; }
    public double TotalMilliseconds { get; }
    public double TotalSeconds { get; }
    public double TotalMinutes { get; }
    public double TotalHours { get; }
    public double TotalDays { get; }
    public double TotalMonths { get; }
    public KdbndpTimeSpan(long ticks);
    public KdbndpTimeSpan(TimeSpan timespan);
    public KdbndpTimeSpan(int months, int days, long ticks);
    public KdbndpTimeSpan(int days, int hours, int minutes, int seconds);
    public KdbndpTimeSpan(int days, int hours, int minutes, int seconds, int milliseconds);
    public KdbndpTimeSpan(int months, int days, int hours, int minutes, int seconds, int milliseconds);
    public KdbndpTimeSpan(int years, int months, int days, int hours, int minutes, int seconds, int milliseconds);
    private static KdbndpTimeSpan();
    public long get_Ticks();
    public int get_Microseconds();
    public int get_Milliseconds();
    public int get_Seconds();
    public int get_Minutes();
    public int get_Hours();
    public int get_Days();
    public int get_Months();
    public TimeSpan get_Time();
    public long get_TotalTicks();
    public double get_TotalMicroseconds();
    public double get_TotalMilliseconds();
    public double get_TotalSeconds();
    public double get_TotalMinutes();
    public double get_TotalHours();
    public double get_TotalDays();
    public double get_TotalMonths();
    public static KdbndpTimeSpan FromTicks(long ticks);
    public static KdbndpTimeSpan FromMicroseconds(double micro);
    public static KdbndpTimeSpan FromMilliseconds(double milli);
    public static KdbndpTimeSpan FromSeconds(double seconds);
    public static KdbndpTimeSpan FromMinutes(double minutes);
    public static KdbndpTimeSpan FromHours(double hours);
    public static KdbndpTimeSpan FromDays(double days);
    public static KdbndpTimeSpan FromMonths(double months);
    public KdbndpTimeSpan Add(KdbndpTimeSpan interval);
    public KdbndpTimeSpan Subtract(KdbndpTimeSpan interval);
    public KdbndpTimeSpan Negate();
    public KdbndpTimeSpan Duration();
    public KdbndpTimeSpan JustifyDays();
    public KdbndpTimeSpan UnjustifyDays();
    public KdbndpTimeSpan JustifyMonths();
    public KdbndpTimeSpan UnjustifyMonths();
    public KdbndpTimeSpan JustifyInterval();
    public KdbndpTimeSpan UnjustifyInterval();
    public KdbndpTimeSpan Canonicalize();
    public static KdbndpTimeSpan op_Implicit(TimeSpan timespan);
    public static KdbndpTimeSpan ToKdbndpTimeSpan(TimeSpan timespan);
    public static TimeSpan op_Explicit(KdbndpTimeSpan interval);
    public static TimeSpan ToTimeSpan(KdbndpTimeSpan interval);
    public sealed virtual bool Equals(KdbndpTimeSpan other);
    public virtual bool Equals(object obj);
    public static int Compare(KdbndpTimeSpan x, KdbndpTimeSpan y);
    private sealed virtual override int System.Collections.Generic.IComparer<KdbndpTypes.KdbndpTimeSpan>.Compare(KdbndpTimeSpan x, KdbndpTimeSpan y);
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(KdbndpTimeSpan other);
    public sealed virtual int CompareTo(object other);
    public static KdbndpTimeSpan Parse(string str);
    private static string SafeSubstring(string s, int startIndex);
    public static bool TryParse(string str, KdbndpTimeSpan& result);
    public virtual string ToString();
    public static KdbndpTimeSpan op_Addition(KdbndpTimeSpan x, KdbndpTimeSpan y);
    public static KdbndpTimeSpan op_Subtraction(KdbndpTimeSpan x, KdbndpTimeSpan y);
    public static bool op_Equality(KdbndpTimeSpan x, KdbndpTimeSpan y);
    public static bool op_Inequality(KdbndpTimeSpan x, KdbndpTimeSpan y);
    public static bool op_LessThan(KdbndpTimeSpan x, KdbndpTimeSpan y);
    public static bool op_LessThanOrEqual(KdbndpTimeSpan x, KdbndpTimeSpan y);
    public static bool op_GreaterThan(KdbndpTimeSpan x, KdbndpTimeSpan y);
    public static bool op_GreaterThanOrEqual(KdbndpTimeSpan x, KdbndpTimeSpan y);
    public static KdbndpTimeSpan op_UnaryPlus(KdbndpTimeSpan x);
    public static KdbndpTimeSpan Plus(KdbndpTimeSpan x);
    public static KdbndpTimeSpan op_UnaryNegation(KdbndpTimeSpan x);
}
public abstract class KdbndpTypes.KdbndpTsQuery : object {
    [CompilerGeneratedAttribute]
private NodeKind <Kind>k__BackingField;
    public NodeKind Kind { get; protected set; }
    [CompilerGeneratedAttribute]
public NodeKind get_Kind();
    [CompilerGeneratedAttribute]
protected void set_Kind(NodeKind value);
    internal abstract virtual void Write(StringBuilder sb, bool first);
    public virtual string ToString();
    public static KdbndpTsQuery Parse(string value);
}
public class KdbndpTypes.KdbndpTsQueryAnd : KdbndpTsQueryBinOp {
    public KdbndpTsQueryAnd(KdbndpTsQuery left, KdbndpTsQuery right);
    internal virtual void Write(StringBuilder sb, bool first);
}
public abstract class KdbndpTypes.KdbndpTsQueryBinOp : KdbndpTsQuery {
    [CompilerGeneratedAttribute]
private KdbndpTsQuery <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private KdbndpTsQuery <Right>k__BackingField;
    public KdbndpTsQuery Left { get; public set; }
    public KdbndpTsQuery Right { get; public set; }
    [CompilerGeneratedAttribute]
public KdbndpTsQuery get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(KdbndpTsQuery value);
    [CompilerGeneratedAttribute]
public KdbndpTsQuery get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(KdbndpTsQuery value);
}
public class KdbndpTypes.KdbndpTsQueryEmpty : KdbndpTsQuery {
    internal virtual void Write(StringBuilder sb, bool first);
}
public class KdbndpTypes.KdbndpTsQueryFollowedBy : KdbndpTsQueryBinOp {
    [CompilerGeneratedAttribute]
private int <Distance>k__BackingField;
    public int Distance { get; public set; }
    public KdbndpTsQueryFollowedBy(KdbndpTsQuery left, int distance, KdbndpTsQuery right);
    [CompilerGeneratedAttribute]
public int get_Distance();
    [CompilerGeneratedAttribute]
public void set_Distance(int value);
    internal virtual void Write(StringBuilder sb, bool first);
}
public class KdbndpTypes.KdbndpTsQueryLexeme : KdbndpTsQuery {
    private string _text;
    private Weight _weights;
    [CompilerGeneratedAttribute]
private bool <IsPrefixSearch>k__BackingField;
    public string Text { get; public set; }
    public Weight Weights { get; public set; }
    public bool IsPrefixSearch { get; public set; }
    public KdbndpTsQueryLexeme(string text);
    public KdbndpTsQueryLexeme(string text, Weight weights);
    public KdbndpTsQueryLexeme(string text, Weight weights, bool isPrefixSearch);
    public string get_Text();
    public void set_Text(string value);
    public Weight get_Weights();
    public void set_Weights(Weight value);
    [CompilerGeneratedAttribute]
public bool get_IsPrefixSearch();
    [CompilerGeneratedAttribute]
public void set_IsPrefixSearch(bool value);
    internal virtual void Write(StringBuilder sb, bool first);
}
public class KdbndpTypes.KdbndpTsQueryNot : KdbndpTsQuery {
    [CompilerGeneratedAttribute]
private KdbndpTsQuery <Child>k__BackingField;
    public KdbndpTsQuery Child { get; public set; }
    public KdbndpTsQueryNot(KdbndpTsQuery child);
    [CompilerGeneratedAttribute]
public KdbndpTsQuery get_Child();
    [CompilerGeneratedAttribute]
public void set_Child(KdbndpTsQuery value);
    internal virtual void Write(StringBuilder sb, bool first);
}
[IsReadOnlyAttribute]
internal class KdbndpTypes.KdbndpTsQueryOperator : ValueType {
    public char Char;
    public int FollowedByDistance;
    public KdbndpTsQueryOperator(char character, int followedByDistance);
    public static KdbndpTsQueryOperator op_Implicit(char c);
    public static char op_Implicit(KdbndpTsQueryOperator o);
}
public class KdbndpTypes.KdbndpTsQueryOr : KdbndpTsQueryBinOp {
    public KdbndpTsQueryOr(KdbndpTsQuery left, KdbndpTsQuery right);
    internal virtual void Write(StringBuilder sb, bool first);
}
[DefaultMemberAttribute("Item")]
public class KdbndpTypes.KdbndpTsVector : object {
    private List`1<Lexeme> _lexemes;
    public Lexeme Item { get; }
    public int Count { get; }
    internal KdbndpTsVector(List`1<Lexeme> lexemes, bool noCheck);
    public KdbndpTsVector(List`1<Lexeme> lexemes);
    private void Load(List`1<Lexeme> lexemes);
    public static KdbndpTsVector Parse(string value);
    public Lexeme get_Item(int index);
    public int get_Count();
    public sealed virtual IEnumerator`1<Lexeme> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
[AttributeUsageAttribute("384")]
public class KdbndpTypes.PgNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PgName>k__BackingField;
    public string PgName { get; private set; }
    public PgNameAttribute(string pgName);
    [CompilerGeneratedAttribute]
public string get_PgName();
    [CompilerGeneratedAttribute]
private void set_PgName(string value);
}
[FlagsAttribute]
internal enum KdbndpTypes.RangeFlags : Enum {
    public byte value__;
    public static RangeFlags None;
    public static RangeFlags Empty;
    public static RangeFlags LowerBoundInclusive;
    public static RangeFlags UpperBoundInclusive;
    public static RangeFlags LowerBoundInfinite;
    public static RangeFlags UpperBoundInfinite;
    public static RangeFlags Inclusive;
    public static RangeFlags Infinite;
    public static RangeFlags LowerInclusiveInfinite;
    public static RangeFlags UpperInclusiveInfinite;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class System.Net.UnixEndPoint : EndPoint {
    private string _filename;
    public string Filename { get; public set; }
    public AddressFamily AddressFamily { get; }
    public UnixEndPoint(string filename);
    public string get_Filename();
    public void set_Filename(string value);
    public virtual AddressFamily get_AddressFamily();
    public virtual EndPoint Create(SocketAddress socketAddress);
    public virtual SocketAddress Serialize();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
