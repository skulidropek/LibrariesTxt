[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Renci.SshNet.Abstractions.CryptoAbstraction : object {
    private static RandomNumberGenerator Randomizer;
    private static CryptoAbstraction();
    public static Byte[] GenerateRandom(int length);
    public static void GenerateRandom(Byte[] data);
    public static RandomNumberGenerator CreateRandomNumberGenerator();
    public static MD5 CreateMD5();
    public static SHA1 CreateSHA1();
    public static SHA256 CreateSHA256();
    public static SHA384 CreateSHA384();
    public static SHA512 CreateSHA512();
    public static HMACMD5 CreateHMACMD5(Byte[] key);
    public static HMACMD5 CreateHMACMD5(Byte[] key, int hashSize);
    public static HMACSHA1 CreateHMACSHA1(Byte[] key);
    public static HMACSHA1 CreateHMACSHA1(Byte[] key, int hashSize);
    public static HMACSHA256 CreateHMACSHA256(Byte[] key);
    public static HMACSHA256 CreateHMACSHA256(Byte[] key, int hashSize);
    public static HMACSHA384 CreateHMACSHA384(Byte[] key);
    public static HMACSHA384 CreateHMACSHA384(Byte[] key, int hashSize);
    public static HMACSHA512 CreateHMACSHA512(Byte[] key);
    public static HMACSHA512 CreateHMACSHA512(Byte[] key, int hashSize);
}
[EditorBrowsableAttribute("1")]
public static class Renci.SshNet.Abstractions.DiagnosticAbstraction : object {
    public static TraceSource Source;
    private static DiagnosticAbstraction();
    [ConditionalAttribute("DEBUG")]
public static void Log(string text, TraceEventType type);
}
[ExtensionAttribute]
internal static class Renci.SshNet.Abstractions.ReflectionAbstraction : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> GetCustomAttributes(Type type, bool inherit);
}
internal static class Renci.SshNet.Abstractions.SocketAbstraction : object {
    public static bool CanRead(Socket socket);
    public static bool CanWrite(Socket socket);
    public static Socket Connect(IPEndPoint remoteEndpoint, TimeSpan connectTimeout);
    public static void Connect(Socket socket, EndPoint remoteEndpoint, TimeSpan connectTimeout);
    [AsyncStateMachineAttribute("Renci.SshNet.Abstractions.SocketAbstraction/<ConnectAsync>d__4")]
public static Task ConnectAsync(Socket socket, EndPoint remoteEndpoint, CancellationToken cancellationToken);
    private static void ConnectCore(Socket socket, EndPoint remoteEndpoint, TimeSpan connectTimeout, bool ownsSocket);
    public static void ClearReadBuffer(Socket socket);
    public static int ReadPartial(Socket socket, Byte[] buffer, int offset, int size, TimeSpan timeout);
    public static void ReadContinuous(Socket socket, Byte[] buffer, int offset, int size, Action`3<Byte[], int, int> processReceivedBytesAction);
    public static int ReadByte(Socket socket, TimeSpan timeout);
    public static void SendByte(Socket socket, byte value);
    public static Byte[] Read(Socket socket, int size, TimeSpan timeout);
    public static int Read(Socket socket, Byte[] buffer, int offset, int size, TimeSpan readTimeout);
    public static Task`1<int> ReadAsync(Socket socket, Byte[] buffer, CancellationToken cancellationToken);
    public static void Send(Socket socket, Byte[] data);
    public static void Send(Socket socket, Byte[] data, int offset, int size);
    public static bool IsErrorResumable(SocketError socketError);
    private static void ConnectCompleted(object sender, SocketAsyncEventArgs e);
}
[ExtensionAttribute]
internal static class Renci.SshNet.Abstractions.SocketExtensions : object {
    [AsyncStateMachineAttribute("Renci.SshNet.Abstractions.SocketExtensions/<ConnectAsync>d__1")]
[ExtensionAttribute]
public static Task ConnectAsync(Socket socket, EndPoint remoteEndpoint, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Renci.SshNet.Abstractions.SocketExtensions/<ReceiveAsync>d__2")]
[ExtensionAttribute]
public static Task`1<int> ReceiveAsync(Socket socket, Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
}
internal static class Renci.SshNet.Abstractions.ThreadAbstraction : object {
    public static void Sleep(int millisecondsTimeout);
    public static Task ExecuteThreadLongRunning(Action action);
    public static void ExecuteThread(Action action);
}
public abstract class Renci.SshNet.AuthenticationMethod : object {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AllowedAuthentications>k__BackingField;
    public string Name { get; }
    public string Username { get; private set; }
    public String[] AllowedAuthentications { get; protected set; }
    protected AuthenticationMethod(string username);
    public abstract virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
private void set_Username(string value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_AllowedAuthentications();
    [CompilerGeneratedAttribute]
protected void set_AllowedAuthentications(String[] value);
    public abstract virtual AuthenticationResult Authenticate(Session session);
    private sealed virtual override AuthenticationResult Renci.SshNet.IAuthenticationMethod.Authenticate(ISession session);
}
public enum Renci.SshNet.AuthenticationResult : Enum {
    public int value__;
    public static AuthenticationResult Success;
    public static AuthenticationResult PartialSuccess;
    public static AuthenticationResult Failure;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Renci.SshNet.BaseClient : object {
    private bool _ownsConnectionInfo;
    private IServiceFactory _serviceFactory;
    private object _keepAliveLock;
    private TimeSpan _keepAliveInterval;
    [NullableAttribute("2")]
private Timer _keepAliveTimer;
    private ConnectionInfo _connectionInfo;
    private bool _isDisposed;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISession <Session>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ExceptionEventArgs> ErrorOccurred;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<HostKeyEventArgs> HostKeyReceived;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<SshIdentificationEventArgs> ServerIdentificationReceived;
    [NullableAttribute("2")]
internal ISession Session { get; private set; }
    internal IServiceFactory ServiceFactory { get; }
    public ConnectionInfo ConnectionInfo { get; private set; }
    public bool IsConnected { get; }
    public TimeSpan KeepAliveInterval { get; public set; }
    protected BaseClient(ConnectionInfo connectionInfo, bool ownsConnectionInfo);
    private protected BaseClient(ConnectionInfo connectionInfo, bool ownsConnectionInfo, IServiceFactory serviceFactory);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal ISession get_Session();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Session(ISession value);
    internal IServiceFactory get_ServiceFactory();
    public sealed virtual ConnectionInfo get_ConnectionInfo();
    private void set_ConnectionInfo(ConnectionInfo value);
    public virtual bool get_IsConnected();
    public sealed virtual TimeSpan get_KeepAliveInterval();
    public sealed virtual void set_KeepAliveInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ErrorOccurred(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ErrorOccurred(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_HostKeyReceived(EventHandler`1<HostKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_HostKeyReceived(EventHandler`1<HostKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ServerIdentificationReceived(EventHandler`1<SshIdentificationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ServerIdentificationReceived(EventHandler`1<SshIdentificationEventArgs> value);
    public sealed virtual void Connect();
    [AsyncStateMachineAttribute("Renci.SshNet.BaseClient/<ConnectAsync>d__33")]
public sealed virtual Task ConnectAsync(CancellationToken cancellationToken);
    public sealed virtual void Disconnect();
    [ObsoleteAttribute("Use KeepAliveInterval to send a keep-alive message at regular intervals.")]
public sealed virtual void SendKeepAlive();
    protected virtual void OnConnecting();
    protected virtual void OnConnected();
    protected virtual void OnDisconnecting();
    protected virtual void OnDisconnected();
    private void Session_ErrorOccured(object sender, ExceptionEventArgs e);
    private void Session_HostKeyReceived(object sender, HostKeyEventArgs e);
    private void Session_ServerIdentificationReceived(object sender, SshIdentificationEventArgs e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected void CheckDisposed();
    protected virtual override void Finalize();
    private void StopKeepAliveTimer();
    private void SendKeepAliveMessage();
    private void StartKeepAliveTimer();
    private Timer CreateKeepAliveTimer(TimeSpan dueTime, TimeSpan period);
    private ISession CreateAndConnectSession();
    [AsyncStateMachineAttribute("Renci.SshNet.BaseClient/<CreateAndConnectSessionAsync>d__52")]
private Task`1<ISession> CreateAndConnectSessionAsync(CancellationToken cancellationToken);
    private void DisposeSession(ISession session);
    private void DisposeSession();
    private bool IsSessionConnected();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <CreateKeepAliveTimer>b__50_0(object state);
}
internal abstract class Renci.SshNet.Channels.Channel : object {
    private object _serverWindowSizeLock;
    private object _messagingLock;
    private UInt32 _initialWindowSize;
    private ISession _session;
    private EventWaitHandle _channelClosedWaitHandle;
    private EventWaitHandle _channelServerWindowAdjustWaitHandle;
    private Nullable`1<UInt32> _remoteWindowSize;
    private Nullable`1<UInt32> _remoteChannelNumber;
    private Nullable`1<UInt32> _remotePacketSize;
    private bool _isDisposed;
    private bool _closeMessageSent;
    private bool _closeMessageReceived;
    private bool _eofMessageReceived;
    private bool _eofMessageSent;
    [CompilerGeneratedAttribute]
private EventHandler`1<ExceptionEventArgs> Exception;
    [CompilerGeneratedAttribute]
private UInt32 <LocalChannelNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LocalPacketSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LocalWindowSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ChannelDataEventArgs> DataReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<ChannelExtendedDataEventArgs> ExtendedDataReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<ChannelEventArgs> EndOfData;
    [CompilerGeneratedAttribute]
private EventHandler`1<ChannelEventArgs> Closed;
    [CompilerGeneratedAttribute]
private EventHandler`1<ChannelRequestEventArgs> RequestReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<ChannelEventArgs> RequestSucceeded;
    [CompilerGeneratedAttribute]
private EventHandler`1<ChannelEventArgs> RequestFailed;
    protected ISession Session { get; }
    public ChannelTypes ChannelType { get; }
    public UInt32 LocalChannelNumber { get; private set; }
    public UInt32 LocalPacketSize { get; private set; }
    public UInt32 LocalWindowSize { get; private set; }
    public UInt32 RemoteChannelNumber { get; private set; }
    public UInt32 RemotePacketSize { get; private set; }
    public UInt32 RemoteWindowSize { get; private set; }
    public bool IsOpen { get; protected set; }
    protected bool IsConnected { get; }
    protected IConnectionInfo ConnectionInfo { get; }
    protected SemaphoreSlim SessionSemaphore { get; }
    protected Channel(ISession session, UInt32 localChannelNumber, UInt32 localWindowSize, UInt32 localPacketSize);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Exception(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Exception(EventHandler`1<ExceptionEventArgs> value);
    protected ISession get_Session();
    public abstract virtual ChannelTypes get_ChannelType();
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_LocalChannelNumber();
    [CompilerGeneratedAttribute]
private void set_LocalChannelNumber(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_LocalPacketSize();
    [CompilerGeneratedAttribute]
private void set_LocalPacketSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_LocalWindowSize();
    [CompilerGeneratedAttribute]
private void set_LocalWindowSize(UInt32 value);
    public sealed virtual UInt32 get_RemoteChannelNumber();
    private void set_RemoteChannelNumber(UInt32 value);
    public sealed virtual UInt32 get_RemotePacketSize();
    private void set_RemotePacketSize(UInt32 value);
    public UInt32 get_RemoteWindowSize();
    private void set_RemoteWindowSize(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsOpen();
    [CompilerGeneratedAttribute]
protected void set_IsOpen(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DataReceived(EventHandler`1<ChannelDataEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DataReceived(EventHandler`1<ChannelDataEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ExtendedDataReceived(EventHandler`1<ChannelExtendedDataEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ExtendedDataReceived(EventHandler`1<ChannelExtendedDataEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_EndOfData(EventHandler`1<ChannelEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_EndOfData(EventHandler`1<ChannelEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Closed(EventHandler`1<ChannelEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Closed(EventHandler`1<ChannelEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RequestReceived(EventHandler`1<ChannelRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RequestReceived(EventHandler`1<ChannelRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RequestSucceeded(EventHandler`1<ChannelEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RequestSucceeded(EventHandler`1<ChannelEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RequestFailed(EventHandler`1<ChannelEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RequestFailed(EventHandler`1<ChannelEventArgs> value);
    protected bool get_IsConnected();
    protected IConnectionInfo get_ConnectionInfo();
    protected SemaphoreSlim get_SessionSemaphore();
    protected void InitializeRemoteInfo(UInt32 remoteChannelNumber, UInt32 remoteWindowSize, UInt32 remotePacketSize);
    public sealed virtual void SendData(Byte[] data);
    public sealed virtual void SendData(Byte[] data, int offset, int size);
    protected virtual void OnWindowAdjust(UInt32 bytesToAdd);
    protected virtual void OnData(Byte[] data);
    protected virtual void OnExtendedData(Byte[] data, UInt32 dataTypeCode);
    protected virtual void OnEof();
    protected virtual void OnClose();
    protected virtual void OnRequest(RequestInfo info);
    protected virtual void OnSuccess();
    protected virtual void OnFailure();
    private void RaiseExceptionEvent(Exception exception);
    private bool TrySendMessage(Message message);
    protected void SendMessage(Message message);
    public sealed virtual void SendEof();
    protected void WaitOnHandle(WaitHandle waitHandle);
    protected virtual void Close();
    protected virtual void OnDisconnected();
    protected virtual void OnErrorOccured(Exception exp);
    private void Session_Disconnected(object sender, EventArgs e);
    protected void OnChannelException(Exception ex);
    private void Session_ErrorOccured(object sender, ExceptionEventArgs e);
    private void OnChannelWindowAdjust(object sender, MessageEventArgs`1<ChannelWindowAdjustMessage> e);
    private void OnChannelData(object sender, MessageEventArgs`1<ChannelDataMessage> e);
    private void OnChannelExtendedData(object sender, MessageEventArgs`1<ChannelExtendedDataMessage> e);
    private void OnChannelEof(object sender, MessageEventArgs`1<ChannelEofMessage> e);
    private void OnChannelClose(object sender, MessageEventArgs`1<ChannelCloseMessage> e);
    private void OnChannelRequest(object sender, MessageEventArgs`1<ChannelRequestMessage> e);
    private void OnChannelSuccess(object sender, MessageEventArgs`1<ChannelSuccessMessage> e);
    private void OnChannelFailure(object sender, MessageEventArgs`1<ChannelFailureMessage> e);
    private void AdjustDataWindow(Byte[] messageData);
    private int GetDataLengthThatCanBeSentInMessage(int messageLength);
    private static InvalidOperationException CreateRemoteChannelInfoNotAvailableException();
    private static InvalidOperationException CreateChannelClosedException();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class Renci.SshNet.Channels.ChannelDirectTcpip : ClientChannel {
    private object _socketLock;
    private EventWaitHandle _channelOpen;
    private EventWaitHandle _channelData;
    private IForwardedPort _forwardedPort;
    private Socket _socket;
    public ChannelTypes ChannelType { get; }
    public ChannelDirectTcpip(ISession session, UInt32 localChannelNumber, UInt32 localWindowSize, UInt32 localPacketSize);
    public virtual ChannelTypes get_ChannelType();
    public sealed virtual void Open(string remoteHost, UInt32 port, IForwardedPort forwardedPort, Socket socket);
    private void ForwardedPort_Closing(object sender, EventArgs eventArgs);
    public sealed virtual void Bind();
    private void CloseSocket();
    private void ShutdownSocket(SocketShutdown how);
    protected virtual void Close();
    protected virtual void OnData(Byte[] data);
    protected virtual void OnOpenConfirmation(UInt32 remoteChannelNumber, UInt32 initialWindowSize, UInt32 maximumPacketSize);
    protected virtual void OnOpenFailure(UInt32 reasonCode, string description, string language);
    protected virtual void OnEof();
    protected virtual void OnErrorOccured(Exception exp);
    protected virtual void OnDisconnected();
    protected virtual void Dispose(bool disposing);
}
internal class Renci.SshNet.Channels.ChannelForwardedTcpip : ServerChannel {
    private object _socketShutdownAndCloseLock;
    private Socket _socket;
    private IForwardedPort _forwardedPort;
    public ChannelTypes ChannelType { get; }
    internal ChannelForwardedTcpip(ISession session, UInt32 localChannelNumber, UInt32 localWindowSize, UInt32 localPacketSize, UInt32 remoteChannelNumber, UInt32 remoteWindowSize, UInt32 remotePacketSize);
    public virtual ChannelTypes get_ChannelType();
    public sealed virtual void Bind(IPEndPoint remoteEndpoint, IForwardedPort forwardedPort);
    protected virtual void OnErrorOccured(Exception exp);
    private void ForwardedPort_Closing(object sender, EventArgs eventArgs);
    private void ShutdownSocket(SocketShutdown how);
    private void CloseSocket();
    protected virtual void Close();
    protected virtual void OnData(Byte[] data);
}
internal class Renci.SshNet.Channels.ChannelSession : ClientChannel {
    private int _failedOpenAttempts;
    private int _sessionSemaphoreObtained;
    private EventWaitHandle _channelOpenResponseWaitHandle;
    private EventWaitHandle _channelRequestResponse;
    private bool _channelRequestSucces;
    public ChannelTypes ChannelType { get; }
    public ChannelSession(ISession session, UInt32 localChannelNumber, UInt32 localWindowSize, UInt32 localPacketSize);
    public virtual ChannelTypes get_ChannelType();
    public sealed virtual void Open();
    protected virtual void OnOpenConfirmation(UInt32 remoteChannelNumber, UInt32 initialWindowSize, UInt32 maximumPacketSize);
    protected virtual void OnOpenFailure(UInt32 reasonCode, string description, string language);
    protected virtual void Close();
    public sealed virtual bool SendPseudoTerminalRequest(string environmentVariable, UInt32 columns, UInt32 rows, UInt32 width, UInt32 height, IDictionary`2<TerminalModes, UInt32> terminalModeValues);
    public sealed virtual bool SendX11ForwardingRequest(bool isSingleConnection, string protocol, Byte[] cookie, UInt32 screenNumber);
    public sealed virtual bool SendEnvironmentVariableRequest(string variableName, string variableValue);
    public sealed virtual bool SendShellRequest();
    public sealed virtual bool SendExecRequest(string command);
    public sealed virtual bool SendBreakRequest(UInt32 breakLength);
    public sealed virtual bool SendSubsystemRequest(string subsystem);
    public sealed virtual bool SendWindowChangeRequest(UInt32 columns, UInt32 rows, UInt32 width, UInt32 height);
    public sealed virtual bool SendLocalFlowRequest(bool clientCanDo);
    public sealed virtual bool SendSignalRequest(string signalName);
    public sealed virtual bool SendEndOfWriteRequest();
    public sealed virtual bool SendKeepAliveRequest();
    protected virtual void OnSuccess();
    protected virtual void OnFailure();
    private void SendChannelOpenMessage();
    protected virtual void Dispose(bool disposing);
    private void ReleaseSemaphore();
}
internal enum Renci.SshNet.Channels.ChannelTypes : Enum {
    public int value__;
    public static ChannelTypes Session;
    public static ChannelTypes X11;
    public static ChannelTypes ForwardedTcpip;
    public static ChannelTypes DirectTcpip;
}
internal abstract class Renci.SshNet.Channels.ClientChannel : Channel {
    [CompilerGeneratedAttribute]
private EventHandler`1<ChannelOpenConfirmedEventArgs> OpenConfirmed;
    [CompilerGeneratedAttribute]
private EventHandler`1<ChannelOpenFailedEventArgs> OpenFailed;
    protected ClientChannel(ISession session, UInt32 localChannelNumber, UInt32 localWindowSize, UInt32 localPacketSize);
    [CompilerGeneratedAttribute]
public void add_OpenConfirmed(EventHandler`1<ChannelOpenConfirmedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OpenConfirmed(EventHandler`1<ChannelOpenConfirmedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_OpenFailed(EventHandler`1<ChannelOpenFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OpenFailed(EventHandler`1<ChannelOpenFailedEventArgs> value);
    protected virtual void OnOpenConfirmation(UInt32 remoteChannelNumber, UInt32 initialWindowSize, UInt32 maximumPacketSize);
    protected void SendMessage(ChannelOpenMessage message);
    protected virtual void OnOpenFailure(UInt32 reasonCode, string description, string language);
    private void OnChannelOpenConfirmation(object sender, MessageEventArgs`1<ChannelOpenConfirmationMessage> e);
    private void OnChannelOpenFailure(object sender, MessageEventArgs`1<ChannelOpenFailureMessage> e);
    protected virtual void Dispose(bool disposing);
    private void UnsubscribeFromSessionEvents(ISession session);
}
internal interface Renci.SshNet.Channels.IChannel {
    public UInt32 LocalChannelNumber { get; }
    public UInt32 LocalPacketSize { get; }
    public UInt32 RemoteChannelNumber { get; }
    public UInt32 RemotePacketSize { get; }
    public bool IsOpen { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataReceived(EventHandler`1<ChannelDataEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataReceived(EventHandler`1<ChannelDataEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Exception(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Exception(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ExtendedDataReceived(EventHandler`1<ChannelExtendedDataEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ExtendedDataReceived(EventHandler`1<ChannelExtendedDataEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RequestReceived(EventHandler`1<ChannelRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RequestReceived(EventHandler`1<ChannelRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(EventHandler`1<ChannelEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(EventHandler`1<ChannelEventArgs> value);
    public abstract virtual UInt32 get_LocalChannelNumber();
    public abstract virtual UInt32 get_LocalPacketSize();
    public abstract virtual UInt32 get_RemoteChannelNumber();
    public abstract virtual UInt32 get_RemotePacketSize();
    public abstract virtual bool get_IsOpen();
    public abstract virtual void SendData(Byte[] data);
    public abstract virtual void SendData(Byte[] data, int offset, int size);
    public abstract virtual void SendEof();
}
internal interface Renci.SshNet.Channels.IChannelDirectTcpip {
    public bool IsOpen { get; }
    public UInt32 LocalChannelNumber { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Exception(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Exception(EventHandler`1<ExceptionEventArgs> value);
    public abstract virtual bool get_IsOpen();
    public abstract virtual UInt32 get_LocalChannelNumber();
    public abstract virtual void Open(string remoteHost, UInt32 port, IForwardedPort forwardedPort, Socket socket);
    public abstract virtual void Bind();
}
internal interface Renci.SshNet.Channels.IChannelForwardedTcpip {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Exception(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Exception(EventHandler`1<ExceptionEventArgs> value);
    public abstract virtual void Bind(IPEndPoint remoteEndpoint, IForwardedPort forwardedPort);
}
internal interface Renci.SshNet.Channels.IChannelSession {
    public abstract virtual void Open();
    public abstract virtual bool SendPseudoTerminalRequest(string environmentVariable, UInt32 columns, UInt32 rows, UInt32 width, UInt32 height, IDictionary`2<TerminalModes, UInt32> terminalModeValues);
    public abstract virtual bool SendX11ForwardingRequest(bool isSingleConnection, string protocol, Byte[] cookie, UInt32 screenNumber);
    public abstract virtual bool SendEnvironmentVariableRequest(string variableName, string variableValue);
    public abstract virtual bool SendShellRequest();
    public abstract virtual bool SendExecRequest(string command);
    public abstract virtual bool SendBreakRequest(UInt32 breakLength);
    public abstract virtual bool SendSubsystemRequest(string subsystem);
    public abstract virtual bool SendWindowChangeRequest(UInt32 columns, UInt32 rows, UInt32 width, UInt32 height);
    public abstract virtual bool SendLocalFlowRequest(bool clientCanDo);
    public abstract virtual bool SendSignalRequest(string signalName);
    public abstract virtual bool SendEndOfWriteRequest();
    public abstract virtual bool SendKeepAliveRequest();
}
internal abstract class Renci.SshNet.Channels.ServerChannel : Channel {
    protected ServerChannel(ISession session, UInt32 localChannelNumber, UInt32 localWindowSize, UInt32 localPacketSize, UInt32 remoteChannelNumber, UInt32 remoteWindowSize, UInt32 remotePacketSize);
    protected void SendMessage(ChannelOpenConfirmationMessage message);
}
public class Renci.SshNet.CipherInfo : object {
    [CompilerGeneratedAttribute]
private int <KeySize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAead>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<Byte[], Byte[], Cipher> <Cipher>k__BackingField;
    public int KeySize { get; private set; }
    public bool IsAead { get; private set; }
    public Func`3<Byte[], Byte[], Cipher> Cipher { get; private set; }
    public CipherInfo(int keySize, Func`3<Byte[], Byte[], Cipher> cipher, bool isAead);
    [CompilerGeneratedAttribute]
public int get_KeySize();
    [CompilerGeneratedAttribute]
private void set_KeySize(int value);
    [CompilerGeneratedAttribute]
public bool get_IsAead();
    [CompilerGeneratedAttribute]
private void set_IsAead(bool value);
    [CompilerGeneratedAttribute]
public Func`3<Byte[], Byte[], Cipher> get_Cipher();
    [CompilerGeneratedAttribute]
private void set_Cipher(Func`3<Byte[], Byte[], Cipher> value);
}
internal class Renci.SshNet.ClientAuthentication : object {
    private int _partialSuccessLimit;
    internal int PartialSuccessLimit { get; }
    public ClientAuthentication(int partialSuccessLimit);
    internal int get_PartialSuccessLimit();
    public sealed virtual void Authenticate(IConnectionInfoInternal connectionInfo, ISession session);
    private bool TryAuthenticate(ISession session, AuthenticationState authenticationState, String[] allowedAuthenticationMethods, SshAuthenticationException& authenticationException);
}
public abstract class Renci.SshNet.Common.AsyncResult : object {
    private static int StatePending;
    private static int StateCompletedSynchronously;
    private static int StateCompletedAsynchronously;
    private AsyncCallback _asyncCallback;
    private object _asyncState;
    private int _completedState;
    private ManualResetEvent _asyncWaitHandle;
    private Exception _exception;
    [CompilerGeneratedAttribute]
private bool <EndInvokeCalled>k__BackingField;
    public bool EndInvokeCalled { get; private set; }
    public object AsyncState { get; }
    public bool CompletedSynchronously { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool IsCompleted { get; }
    protected AsyncResult(AsyncCallback asyncCallback, object state);
    [CompilerGeneratedAttribute]
public bool get_EndInvokeCalled();
    [CompilerGeneratedAttribute]
private void set_EndInvokeCalled(bool value);
    public void SetAsCompleted(Exception exception, bool completedSynchronously);
    internal void EndInvoke();
    public sealed virtual object get_AsyncState();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_IsCompleted();
}
public abstract class Renci.SshNet.Common.AsyncResult`1 : AsyncResult {
    private TResult _result;
    protected AsyncResult`1(AsyncCallback asyncCallback, object state);
    public void SetAsCompleted(TResult result, bool completedSynchronously);
    public TResult EndInvoke();
}
public class Renci.SshNet.Common.AuthenticationBannerEventArgs : AuthenticationEventArgs {
    [CompilerGeneratedAttribute]
private string <BannerMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    public string BannerMessage { get; private set; }
    public string Language { get; private set; }
    public AuthenticationBannerEventArgs(string username, string message, string language);
    [CompilerGeneratedAttribute]
public string get_BannerMessage();
    [CompilerGeneratedAttribute]
private void set_BannerMessage(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
private void set_Language(string value);
}
public abstract class Renci.SshNet.Common.AuthenticationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    public string Username { get; }
    protected AuthenticationEventArgs(string username);
    [CompilerGeneratedAttribute]
public string get_Username();
}
public class Renci.SshNet.Common.AuthenticationPasswordChangeEventArgs : AuthenticationEventArgs {
    [CompilerGeneratedAttribute]
private Byte[] <NewPassword>k__BackingField;
    public Byte[] NewPassword { get; public set; }
    public AuthenticationPasswordChangeEventArgs(string username);
    [CompilerGeneratedAttribute]
public Byte[] get_NewPassword();
    [CompilerGeneratedAttribute]
public void set_NewPassword(Byte[] value);
}
public class Renci.SshNet.Common.AuthenticationPrompt : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEchoed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Response>k__BackingField;
    public int Id { get; }
    public bool IsEchoed { get; }
    public string Request { get; }
    public string Response { get; public set; }
    public AuthenticationPrompt(int id, bool isEchoed, string request);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public bool get_IsEchoed();
    [CompilerGeneratedAttribute]
public string get_Request();
    [CompilerGeneratedAttribute]
public string get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(string value);
}
public class Renci.SshNet.Common.AuthenticationPromptEventArgs : AuthenticationEventArgs {
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Instruction>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<AuthenticationPrompt> <Prompts>k__BackingField;
    public string Language { get; }
    public string Instruction { get; }
    public IReadOnlyList`1<AuthenticationPrompt> Prompts { get; }
    public AuthenticationPromptEventArgs(string username, string instruction, string language, IReadOnlyList`1<AuthenticationPrompt> prompts);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public string get_Instruction();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<AuthenticationPrompt> get_Prompts();
}
public class Renci.SshNet.Common.BigInteger : ValueType {
    private static ulong Base;
    private static int Bias;
    private static int DecimalSignMask;
    private static BigInteger ZeroSingleton;
    private static BigInteger OneSingleton;
    private static BigInteger MinusOneSingleton;
    private UInt32[] _data;
    private short _sign;
    public int BitLength { get; }
    public bool IsEven { get; }
    public bool IsOne { get; }
    public bool IsPowerOfTwo { get; }
    public bool IsZero { get; }
    public int Sign { get; }
    public static BigInteger MinusOne { get; }
    public static BigInteger One { get; }
    public static BigInteger Zero { get; }
    private BigInteger(short sign, UInt32[] data);
    public BigInteger(int value);
    [CLSCompliantAttribute("False")]
public BigInteger(UInt32 value);
    public BigInteger(long value);
    [CLSCompliantAttribute("False")]
public BigInteger(ulong value);
    public BigInteger(double value);
    public BigInteger(float value);
    public BigInteger(decimal value);
    [CLSCompliantAttribute("False")]
public BigInteger(Byte[] value);
    private static BigInteger();
    [IsReadOnlyAttribute]
public int get_BitLength();
    public static BigInteger ModInverse(BigInteger bi, BigInteger modulus);
    public static BigInteger PositiveMod(BigInteger dividend, BigInteger divisor);
    public static BigInteger Random(int bitLength);
    private static bool Negative(Byte[] v);
    private static ushort Exponent(Byte[] v);
    private static ulong Mantissa(Byte[] v);
    [IsReadOnlyAttribute]
public bool get_IsEven();
    [IsReadOnlyAttribute]
public bool get_IsOne();
    private static int PopulationCount(UInt32 x);
    private static int PopulationCount(ulong x);
    private static int LeadingZeroCount(UInt32 value);
    private static int LeadingZeroCount(ulong value);
    private static double BuildDouble(int sign, ulong mantissa, int exponent);
    [IsReadOnlyAttribute]
public bool get_IsPowerOfTwo();
    [IsReadOnlyAttribute]
public bool get_IsZero();
    [IsReadOnlyAttribute]
public int get_Sign();
    public static BigInteger get_MinusOne();
    public static BigInteger get_One();
    public static BigInteger get_Zero();
    public static int op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static UInt32 op_Explicit(BigInteger value);
    public static short op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static ushort op_Explicit(BigInteger value);
    public static byte op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static sbyte op_Explicit(BigInteger value);
    public static long op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static ulong op_Explicit(BigInteger value);
    public static double op_Explicit(BigInteger value);
    public static float op_Explicit(BigInteger value);
    public static decimal op_Explicit(BigInteger value);
    public static BigInteger op_Implicit(int value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(UInt32 value);
    public static BigInteger op_Implicit(short value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(ushort value);
    public static BigInteger op_Implicit(byte value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(sbyte value);
    public static BigInteger op_Implicit(long value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(ulong value);
    public static BigInteger op_Explicit(double value);
    public static BigInteger op_Explicit(float value);
    public static BigInteger op_Explicit(decimal value);
    public static BigInteger op_Addition(BigInteger left, BigInteger right);
    public static BigInteger op_Subtraction(BigInteger left, BigInteger right);
    public static BigInteger op_Multiply(BigInteger left, BigInteger right);
    public static BigInteger op_Division(BigInteger dividend, BigInteger divisor);
    public static BigInteger op_Modulus(BigInteger dividend, BigInteger divisor);
    public static BigInteger op_UnaryNegation(BigInteger value);
    public static BigInteger op_UnaryPlus(BigInteger value);
    public static BigInteger op_Increment(BigInteger value);
    public static BigInteger op_Decrement(BigInteger value);
    public static BigInteger op_BitwiseAnd(BigInteger left, BigInteger right);
    public static BigInteger op_BitwiseOr(BigInteger left, BigInteger right);
    public static BigInteger op_ExclusiveOr(BigInteger left, BigInteger right);
    public static BigInteger op_OnesComplement(BigInteger value);
    private static int BitScanBackward(UInt32 word);
    public static BigInteger op_LeftShift(BigInteger value, int shift);
    public static BigInteger op_RightShift(BigInteger value, int shift);
    public static bool op_LessThan(BigInteger left, BigInteger right);
    public static bool op_LessThan(BigInteger left, long right);
    public static bool op_LessThan(long left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_LessThan(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_LessThan(ulong left, BigInteger right);
    public static bool op_LessThanOrEqual(BigInteger left, BigInteger right);
    public static bool op_LessThanOrEqual(BigInteger left, long right);
    public static bool op_LessThanOrEqual(long left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_LessThanOrEqual(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_LessThanOrEqual(ulong left, BigInteger right);
    public static bool op_GreaterThan(BigInteger left, BigInteger right);
    public static bool op_GreaterThan(BigInteger left, long right);
    public static bool op_GreaterThan(long left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_GreaterThan(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_GreaterThan(ulong left, BigInteger right);
    public static bool op_GreaterThanOrEqual(BigInteger left, BigInteger right);
    public static bool op_GreaterThanOrEqual(BigInteger left, long right);
    public static bool op_GreaterThanOrEqual(long left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_GreaterThanOrEqual(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_GreaterThanOrEqual(ulong left, BigInteger right);
    public static bool op_Equality(BigInteger left, BigInteger right);
    public static bool op_Equality(BigInteger left, long right);
    public static bool op_Equality(long left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_Equality(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_Equality(ulong left, BigInteger right);
    public static bool op_Inequality(BigInteger left, BigInteger right);
    public static bool op_Inequality(BigInteger left, long right);
    public static bool op_Inequality(long left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_Inequality(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_Inequality(ulong left, BigInteger right);
    [IsReadOnlyAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(BigInteger other);
    [IsReadOnlyAttribute]
public bool Equals(long other);
    [IsReadOnlyAttribute]
[CLSCompliantAttribute("False")]
public bool Equals(ulong other);
    [IsReadOnlyAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
public string ToString(string format);
    [IsReadOnlyAttribute]
public string ToString(IFormatProvider provider);
    [IsReadOnlyAttribute]
public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    [IsReadOnlyAttribute]
private string ToStringWithPadding(string format, UInt32 radix, IFormatProvider provider);
    private static UInt32[] MakeTwoComplement(UInt32[] v);
    [IsReadOnlyAttribute]
private string ToString(UInt32 radix, IFormatProvider provider);
    public static BigInteger Parse(string value);
    public static BigInteger Parse(string value, NumberStyles style);
    public static BigInteger Parse(string value, IFormatProvider provider);
    public static BigInteger Parse(string value, NumberStyles style, IFormatProvider provider);
    public static bool TryParse(string value, BigInteger& result);
    public static bool TryParse(string value, NumberStyles style, IFormatProvider provider, BigInteger& result);
    private static bool Parse(string value, NumberStyles style, IFormatProvider fp, bool tryParse, BigInteger& result, Exception& exc);
    private static bool CheckStyle(NumberStyles style, bool tryParse, Exception& exc);
    private static bool JumpOverWhitespace(Int32& pos, string s, bool reportError, bool tryParse, Exception& exc);
    private static void FindSign(Int32& pos, string s, NumberFormatInfo nfi, Boolean& foundSign, Boolean& negative);
    private static void FindCurrency(Int32& pos, string s, NumberFormatInfo nfi, Boolean& foundCurrency);
    private static bool FindExponent(Int32& pos, string s, Int32& exponent, bool tryParse, Exception& exc);
    private static bool FindOther(Int32& pos, string s, string other);
    private static bool ValidDigit(char e, bool allowHex);
    private static FormatException GetFormatException();
    private static bool ProcessTrailingWhitespace(bool tryParse, string s, int position, Exception& exc);
    private static bool Parse(string value, bool tryParse, BigInteger& result, Exception& exc);
    public static BigInteger Min(BigInteger left, BigInteger right);
    public static BigInteger Max(BigInteger left, BigInteger right);
    public static BigInteger Abs(BigInteger value);
    public static BigInteger DivRem(BigInteger dividend, BigInteger divisor, BigInteger& remainder);
    public static BigInteger Pow(BigInteger value, int exponent);
    public static BigInteger ModPow(BigInteger value, BigInteger exponent, BigInteger modulus);
    public static BigInteger GreatestCommonDivisor(BigInteger left, BigInteger right);
    public static double Log(BigInteger value, double baseValue);
    public static double Log(BigInteger value);
    public static double Log10(BigInteger value);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
    public static BigInteger Add(BigInteger left, BigInteger right);
    public static BigInteger Subtract(BigInteger left, BigInteger right);
    public static BigInteger Multiply(BigInteger left, BigInteger right);
    public static BigInteger Divide(BigInteger dividend, BigInteger divisor);
    public static BigInteger Remainder(BigInteger dividend, BigInteger divisor);
    public static BigInteger Negate(BigInteger value);
    [IsReadOnlyAttribute]
public sealed virtual int CompareTo(object obj);
    [IsReadOnlyAttribute]
public sealed virtual int CompareTo(BigInteger other);
    [IsReadOnlyAttribute]
[CLSCompliantAttribute("False")]
public int CompareTo(ulong other);
    [IsReadOnlyAttribute]
public int CompareTo(long other);
    [IsReadOnlyAttribute]
private int LongCompare(UInt32 low, UInt32 high);
    public static int Compare(BigInteger left, BigInteger right);
    private static int TopByte(UInt32 x);
    private static int FirstNonFfByte(UInt32 word);
    [IsReadOnlyAttribute]
public Byte[] ToByteArray();
    private static UInt32[] CoreAdd(UInt32[] a, UInt32[] b);
    private static UInt32[] CoreAdd(UInt32[] a, UInt32 b);
    private static UInt32[] CoreSub(UInt32[] a, UInt32[] b);
    private static UInt32[] CoreSub(UInt32[] a, UInt32 b);
    private static int CoreCompare(UInt32[] a, UInt32[] b);
    private static int GetNormalizeShift(UInt32 value);
    private static void Normalize(UInt32[] u, int l, UInt32[] un, int shift);
    private static void Unnormalize(UInt32[] un, UInt32[]& r, int shift);
    private static void DivModUnsigned(UInt32[] u, UInt32[] v, UInt32[]& q, UInt32[]& r);
}
internal class Renci.SshNet.Common.ChannelDataEventArgs : ChannelEventArgs {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public Byte[] Data { get; }
    public ChannelDataEventArgs(UInt32 channelNumber, Byte[] data);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
}
internal class Renci.SshNet.Common.ChannelEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private UInt32 <ChannelNumber>k__BackingField;
    public UInt32 ChannelNumber { get; }
    public ChannelEventArgs(UInt32 channelNumber);
    [CompilerGeneratedAttribute]
public UInt32 get_ChannelNumber();
}
internal class Renci.SshNet.Common.ChannelExtendedDataEventArgs : ChannelDataEventArgs {
    [CompilerGeneratedAttribute]
private UInt32 <DataTypeCode>k__BackingField;
    public UInt32 DataTypeCode { get; }
    public ChannelExtendedDataEventArgs(UInt32 channelNumber, Byte[] data, UInt32 dataTypeCode);
    [CompilerGeneratedAttribute]
public UInt32 get_DataTypeCode();
}
internal class Renci.SshNet.Common.ChannelInputStream : Stream {
    private IChannelSession _channel;
    private long _totalPosition;
    private bool _isDisposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal ChannelInputStream(IChannelSession channel);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    private ObjectDisposedException CreateObjectDisposedException();
}
internal class Renci.SshNet.Common.ChannelOpenConfirmedEventArgs : ChannelEventArgs {
    [CompilerGeneratedAttribute]
private UInt32 <InitialWindowSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaximumPacketSize>k__BackingField;
    public UInt32 InitialWindowSize { get; }
    public UInt32 MaximumPacketSize { get; }
    public ChannelOpenConfirmedEventArgs(UInt32 remoteChannelNumber, UInt32 initialWindowSize, UInt32 maximumPacketSize);
    [CompilerGeneratedAttribute]
public UInt32 get_InitialWindowSize();
    [CompilerGeneratedAttribute]
public UInt32 get_MaximumPacketSize();
}
internal class Renci.SshNet.Common.ChannelOpenFailedEventArgs : ChannelEventArgs {
    [CompilerGeneratedAttribute]
private UInt32 <ReasonCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    public UInt32 ReasonCode { get; }
    public string Description { get; }
    public string Language { get; }
    public ChannelOpenFailedEventArgs(UInt32 channelNumber, UInt32 reasonCode, string description, string language);
    [CompilerGeneratedAttribute]
public UInt32 get_ReasonCode();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public string get_Language();
}
internal class Renci.SshNet.Common.ChannelRequestEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private RequestInfo <Info>k__BackingField;
    public RequestInfo Info { get; }
    public ChannelRequestEventArgs(RequestInfo info);
    [CompilerGeneratedAttribute]
public RequestInfo get_Info();
}
public class Renci.SshNet.Common.DerData : object {
    private static byte Constructed;
    private static byte Boolean;
    private static byte Integer;
    private static byte BITSTRING;
    private static byte Octetstring;
    private static byte Null;
    private static byte Objectidentifier;
    private static byte Sequence;
    private List`1<byte> _data;
    private int _lastIndex;
    private int _readerIndex;
    public bool IsEndOfData { get; }
    public DerData(Byte[] data, bool construct);
    public bool get_IsEndOfData();
    public Byte[] Encode();
    public BigInteger ReadBigInteger();
    public int ReadInteger();
    public Byte[] ReadOctetString();
    public Byte[] ReadBitString();
    public Byte[] ReadObject();
    public void Write(bool data);
    public void Write(UInt32 data);
    public void Write(BigInteger data);
    public void Write(Byte[] data);
    public void Write(ObjectIdentifier identifier);
    public void Write(DerData data);
    public void WriteBitstring(Byte[] data);
    public void WriteObjectIdentifier(Byte[] bytes);
    public void WriteNull();
    private static Byte[] GetLength(int length);
    public int ReadLength();
    public void WriteBytes(IEnumerable`1<byte> data);
    public byte ReadByte();
    public Byte[] ReadBytes(int length);
}
public class Renci.SshNet.Common.ExceptionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; }
    public ExceptionEventArgs(Exception exception);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
[ExtensionAttribute]
internal static class Renci.SshNet.Common.Extensions : object {
    [ExtensionAttribute]
internal static Byte[] ToArray(ServiceName serviceName);
    [ExtensionAttribute]
internal static ServiceName ToServiceName(Byte[] data);
    [ExtensionAttribute]
internal static BigInteger ToBigInteger(Byte[] data);
    [ExtensionAttribute]
public static BigInteger ToBigInteger2(Byte[] data);
    [ExtensionAttribute]
public static Byte[] ToByteArray(BigInteger bigInt, bool isUnsigned, bool isBigEndian);
    [ExtensionAttribute]
public static Byte[] ExportKeyParameter(BigInteger value, int length);
    [ExtensionAttribute]
internal static T[] Reverse(T[] array);
    [ExtensionAttribute]
internal static void DebugPrint(IEnumerable`1<byte> bytes);
    [ExtensionAttribute]
internal static void ValidatePort(UInt32 value, string argument);
    [ExtensionAttribute]
internal static void ValidatePort(int value, string argument);
    [ExtensionAttribute]
public static Byte[] Take(Byte[] value, int offset, int count);
    [ExtensionAttribute]
public static Byte[] Take(Byte[] value, int count);
    [ExtensionAttribute]
public static bool IsEqualTo(Byte[] left, Byte[] right);
    [ExtensionAttribute]
public static Byte[] TrimLeadingZeros(Byte[] value);
    [ExtensionAttribute]
public static Byte[] Pad(Byte[] data, int length);
    [ExtensionAttribute]
public static Byte[] Concat(Byte[] first, Byte[] second);
    [ExtensionAttribute]
internal static bool CanRead(Socket socket);
    [ExtensionAttribute]
internal static bool CanWrite(Socket socket);
    [ExtensionAttribute]
internal static bool IsConnected(Socket socket);
}
public class Renci.SshNet.Common.HostKeyEventArgs : EventArgs {
    private Lazy`1<Byte[]> _lazyFingerPrint;
    private Lazy`1<string> _lazyFingerPrintSHA256;
    private Lazy`1<string> _lazyFingerPrintMD5;
    [CompilerGeneratedAttribute]
private bool <CanTrust>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <HostKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostKeyName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeyLength>k__BackingField;
    public bool CanTrust { get; public set; }
    public Byte[] HostKey { get; private set; }
    public string HostKeyName { get; private set; }
    public Byte[] FingerPrint { get; }
    public string FingerPrintSHA256 { get; }
    public string FingerPrintMD5 { get; }
    public int KeyLength { get; private set; }
    public HostKeyEventArgs(KeyHostAlgorithm host);
    [CompilerGeneratedAttribute]
public bool get_CanTrust();
    [CompilerGeneratedAttribute]
public void set_CanTrust(bool value);
    [CompilerGeneratedAttribute]
public Byte[] get_HostKey();
    [CompilerGeneratedAttribute]
private void set_HostKey(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_HostKeyName();
    [CompilerGeneratedAttribute]
private void set_HostKeyName(string value);
    public Byte[] get_FingerPrint();
    public string get_FingerPrintSHA256();
    public string get_FingerPrintMD5();
    [CompilerGeneratedAttribute]
public int get_KeyLength();
    [CompilerGeneratedAttribute]
private void set_KeyLength(int value);
    [CompilerGeneratedAttribute]
private Byte[] <.ctor>b__25_0();
    [CompilerGeneratedAttribute]
private string <.ctor>b__25_1();
    [CompilerGeneratedAttribute]
private string <.ctor>b__25_2();
}
public class Renci.SshNet.Common.NetConfServerException : SshException {
    public NetConfServerException(string message);
    public NetConfServerException(string message, Exception innerException);
}
public class Renci.SshNet.Common.ObjectIdentifier : ValueType {
    [CompilerGeneratedAttribute]
private UInt64[] <Identifiers>k__BackingField;
    public UInt64[] Identifiers { get; private set; }
    public ObjectIdentifier(UInt64[] identifiers);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt64[] get_Identifiers();
    [CompilerGeneratedAttribute]
private void set_Identifiers(UInt64[] value);
    internal static ObjectIdentifier FromHashAlgorithmName(HashAlgorithmName hashAlgorithmName);
}
internal static class Renci.SshNet.Common.Pack : object {
    internal static ushort LittleEndianToUInt16(Byte[] buffer);
    internal static UInt32 LittleEndianToUInt32(Byte[] buffer);
    internal static ulong LittleEndianToUInt64(Byte[] buffer);
    internal static Byte[] UInt16ToLittleEndian(ushort value);
    private static void UInt16ToLittleEndian(ushort value, Byte[] buffer);
    internal static Byte[] UInt32ToLittleEndian(UInt32 value);
    private static void UInt32ToLittleEndian(UInt32 value, Byte[] buffer);
    internal static Byte[] UInt64ToLittleEndian(ulong value);
    private static void UInt64ToLittleEndian(ulong value, Byte[] buffer);
    internal static Byte[] UInt16ToBigEndian(ushort value);
    internal static void UInt16ToBigEndian(ushort value, Byte[] buffer, int offset);
    internal static void UInt32ToBigEndian(UInt32 value, Byte[] buffer);
    internal static void UInt32ToBigEndian(UInt32 value, Byte[] buffer, int offset);
    internal static Byte[] UInt32ToBigEndian(UInt32 value);
    internal static Byte[] UInt64ToBigEndian(ulong value);
    private static void UInt64ToBigEndian(ulong value, Byte[] buffer, int offset);
    internal static ushort BigEndianToUInt16(Byte[] buffer);
    internal static UInt32 BigEndianToUInt32(Byte[] buffer, int offset);
    internal static UInt32 BigEndianToUInt32(Byte[] buffer);
    internal static ulong BigEndianToUInt64(Byte[] buffer);
}
internal static class Renci.SshNet.Common.PacketDump : object {
    public static string Create(List`1<byte> data, int indentLevel);
    public static string Create(Byte[] data, int indentLevel);
    private static string AsHex(Byte[] data, int length);
    private static string AsAscii(Byte[] data, int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Renci.SshNet.Common.PipeStream : Stream {
    private object _sync;
    private Byte[] _buffer;
    private int _head;
    private int _tail;
    private bool _disposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    [ConditionalAttribute("DEBUG")]
private void AssertValid();
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    private void ThrowIfDisposed();
}
public class Renci.SshNet.Common.PortForwardEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <OriginatorHost>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OriginatorPort>k__BackingField;
    public string OriginatorHost { get; }
    public UInt32 OriginatorPort { get; }
    internal PortForwardEventArgs(string host, UInt32 port);
    [CompilerGeneratedAttribute]
public string get_OriginatorHost();
    [CompilerGeneratedAttribute]
public UInt32 get_OriginatorPort();
}
internal class Renci.SshNet.Common.PosixPath : object {
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    public string Directory { get; private set; }
    public string File { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
private void set_Directory(string value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
private void set_File(string value);
    public static PosixPath CreateAbsoluteOrRelativeFilePath(string path);
    public static string GetFileName(string path);
    public static string GetDirectoryName(string path);
}
public class Renci.SshNet.Common.ProxyException : SshException {
    public ProxyException(string message);
    public ProxyException(string message, Exception innerException);
}
public class Renci.SshNet.Common.ScpDownloadEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Downloaded>k__BackingField;
    public string Filename { get; }
    public long Size { get; }
    public long Downloaded { get; }
    public ScpDownloadEventArgs(string filename, long size, long downloaded);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public long get_Downloaded();
}
public class Renci.SshNet.Common.ScpException : SshException {
    public ScpException(string message);
    public ScpException(string message, Exception innerException);
}
public class Renci.SshNet.Common.ScpUploadEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Uploaded>k__BackingField;
    public string Filename { get; }
    public long Size { get; }
    public long Uploaded { get; }
    public ScpUploadEventArgs(string filename, long size, long uploaded);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public long get_Uploaded();
}
public class Renci.SshNet.Common.SftpPathNotFoundException : SshException {
    public SftpPathNotFoundException(string message);
    public SftpPathNotFoundException(string message, Exception innerException);
}
public class Renci.SshNet.Common.SftpPermissionDeniedException : SshException {
    public SftpPermissionDeniedException(string message);
    public SftpPermissionDeniedException(string message, Exception innerException);
}
public class Renci.SshNet.Common.ShellDataEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Line>k__BackingField;
    public Byte[] Data { get; }
    public string Line { get; }
    public ShellDataEventArgs(Byte[] data);
    public ShellDataEventArgs(string line);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public string get_Line();
}
public class Renci.SshNet.Common.SshAuthenticationException : SshException {
    public SshAuthenticationException(string message);
    public SshAuthenticationException(string message, Exception innerException);
}
public class Renci.SshNet.Common.SshConnectionException : SshException {
    [CompilerGeneratedAttribute]
private DisconnectReason <DisconnectReason>k__BackingField;
    public DisconnectReason DisconnectReason { get; private set; }
    public SshConnectionException(string message);
    public SshConnectionException(string message, DisconnectReason disconnectReasonCode);
    public SshConnectionException(string message, Exception inner);
    public SshConnectionException(string message, DisconnectReason disconnectReasonCode, Exception inner);
    [CompilerGeneratedAttribute]
public DisconnectReason get_DisconnectReason();
    [CompilerGeneratedAttribute]
private void set_DisconnectReason(DisconnectReason value);
}
public abstract class Renci.SshNet.Common.SshData : object {
    internal static int DefaultCapacity;
    internal static Encoding Ascii;
    internal static Encoding Utf8;
    private SshDataStream _stream;
    protected SshDataStream DataStream { get; }
    protected bool IsEndOfData { get; }
    protected int BufferCapacity { get; }
    private static SshData();
    protected SshDataStream get_DataStream();
    protected bool get_IsEndOfData();
    protected virtual int get_BufferCapacity();
    public Byte[] GetBytes();
    protected virtual void WriteBytes(SshDataStream stream);
    public void Load(Byte[] data);
    public void Load(Byte[] data, int offset, int count);
    private void LoadInternal(Byte[] value, int offset, int count);
    protected abstract virtual void LoadData();
    protected abstract virtual void SaveData();
    protected Byte[] ReadBytes();
    protected Byte[] ReadBytes(int length);
    protected byte ReadByte();
    protected bool ReadBoolean();
    protected ushort ReadUInt16();
    protected UInt32 ReadUInt32();
    protected ulong ReadUInt64();
    protected string ReadString(Encoding encoding);
    protected Byte[] ReadBinary();
    protected String[] ReadNamesList();
    protected Dictionary`2<string, string> ReadExtensionPair();
    protected void Write(Byte[] data);
    protected void Write(Byte[] buffer, int offset, int count);
    protected void Write(byte data);
    protected void Write(bool data);
    protected void Write(UInt32 data);
    protected void Write(ulong data);
    protected void Write(string data);
    protected void Write(string data, Encoding encoding);
    protected void Write(BigInteger data);
    protected void Write(String[] data);
    protected void Write(IDictionary`2<string, string> data);
    protected void WriteBinaryString(Byte[] buffer);
    protected void WriteBinary(Byte[] buffer, int offset, int count);
}
public class Renci.SshNet.Common.SshDataStream : MemoryStream {
    public bool IsEndOfData { get; }
    public SshDataStream(int capacity);
    public SshDataStream(Byte[] buffer);
    public SshDataStream(Byte[] buffer, int offset, int count);
    public bool get_IsEndOfData();
    public void Write(UInt32 value);
    public void Write(ulong value);
    public void Write(BigInteger data);
    public void Write(Byte[] data);
    public void Write(string s, Encoding encoding);
    public Byte[] ReadBinary();
    public void WriteBinary(Byte[] buffer);
    public void WriteBinary(Byte[] buffer, int offset, int count);
    public BigInteger ReadBigInt();
    public ushort ReadUInt16();
    public UInt32 ReadUInt32();
    public ulong ReadUInt64();
    public string ReadString(Encoding encoding);
    public virtual Byte[] ToArray();
    internal Byte[] ReadBytes(int length);
    private void ReadBytes(Span`1<byte> buffer);
}
public class Renci.SshNet.Common.SshException : Exception {
    public SshException(string message);
    public SshException(string message, Exception inner);
}
public class Renci.SshNet.Common.SshIdentificationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SshIdentification <SshIdentification>k__BackingField;
    public SshIdentification SshIdentification { get; private set; }
    public SshIdentificationEventArgs(SshIdentification sshIdentification);
    [CompilerGeneratedAttribute]
public SshIdentification get_SshIdentification();
    [CompilerGeneratedAttribute]
private void set_SshIdentification(SshIdentification value);
}
public class Renci.SshNet.Common.SshOperationTimeoutException : SshException {
    public SshOperationTimeoutException(string message);
    public SshOperationTimeoutException(string message, Exception innerException);
}
public class Renci.SshNet.Common.SshPassPhraseNullOrEmptyException : SshException {
    public SshPassPhraseNullOrEmptyException(string message);
    public SshPassPhraseNullOrEmptyException(string message, Exception innerException);
}
public enum Renci.SshNet.Common.TerminalModes : Enum {
    public byte value__;
    public static TerminalModes TTY_OP_END;
    public static TerminalModes VINTR;
    public static TerminalModes VQUIT;
    public static TerminalModes VERASE;
    public static TerminalModes VKILL;
    public static TerminalModes VEOF;
    public static TerminalModes VEOL;
    public static TerminalModes VEOL2;
    public static TerminalModes VSTART;
    public static TerminalModes VSTOP;
    public static TerminalModes VSUSP;
    public static TerminalModes VDSUSP;
    public static TerminalModes VREPRINT;
    public static TerminalModes VWERASE;
    public static TerminalModes VLNEXT;
    public static TerminalModes VFLUSH;
    public static TerminalModes VSWTCH;
    public static TerminalModes VSTATUS;
    public static TerminalModes VDISCARD;
    public static TerminalModes IGNPAR;
    public static TerminalModes PARMRK;
    public static TerminalModes INPCK;
    public static TerminalModes ISTRIP;
    public static TerminalModes INLCR;
    public static TerminalModes IGNCR;
    public static TerminalModes ICRNL;
    public static TerminalModes IUCLC;
    public static TerminalModes IXON;
    public static TerminalModes IXANY;
    public static TerminalModes IXOFF;
    public static TerminalModes IMAXBEL;
    public static TerminalModes IUTF8;
    public static TerminalModes ISIG;
    public static TerminalModes ICANON;
    public static TerminalModes XCASE;
    public static TerminalModes ECHO;
    public static TerminalModes ECHOE;
    public static TerminalModes ECHOK;
    public static TerminalModes ECHONL;
    public static TerminalModes NOFLSH;
    public static TerminalModes TOSTOP;
    public static TerminalModes IEXTEN;
    public static TerminalModes ECHOCTL;
    public static TerminalModes ECHOKE;
    public static TerminalModes PENDIN;
    public static TerminalModes OPOST;
    public static TerminalModes OLCUC;
    public static TerminalModes ONLCR;
    public static TerminalModes OCRNL;
    public static TerminalModes ONOCR;
    public static TerminalModes ONLRET;
    public static TerminalModes CS7;
    public static TerminalModes CS8;
    public static TerminalModes PARENB;
    public static TerminalModes PARODD;
    public static TerminalModes TTY_OP_ISPEED;
    public static TerminalModes TTY_OP_OSPEED;
}
[ExtensionAttribute]
internal static class Renci.SshNet.Common.TimeSpanExtensions : object {
    private static string OutOfRangeTimeoutMessage;
    [ExtensionAttribute]
public static int AsTimeout(TimeSpan timeSpan, string callerMemberName);
    [ExtensionAttribute]
public static void EnsureValidTimeout(TimeSpan timeSpan, string callerMemberName);
}
public abstract class Renci.SshNet.Compression.Compressor : Algorithm {
    private bool _delayedCompression;
    private bool _isActive;
    private Session _session;
    private bool _isDisposed;
    protected Compressor(bool delayedCompression);
    public virtual void Init(Session session);
    public Byte[] Compress(Byte[] data);
    public virtual Byte[] Compress(Byte[] data, int offset, int length);
    protected abstract virtual Byte[] CompressCore(Byte[] data, int offset, int length);
    public Byte[] Decompress(Byte[] data);
    public virtual Byte[] Decompress(Byte[] data, int offset, int length);
    protected abstract virtual Byte[] DecompressCore(Byte[] data, int offset, int length);
    private void Session_UserAuthenticationSuccessReceived(object sender, MessageEventArgs`1<SuccessMessage> e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal abstract class Renci.SshNet.Connection.ConnectorBase : object {
    [CompilerGeneratedAttribute]
private ISocketFactory <SocketFactory>k__BackingField;
    internal ISocketFactory SocketFactory { get; private set; }
    protected ConnectorBase(ISocketFactory socketFactory);
    [CompilerGeneratedAttribute]
internal ISocketFactory get_SocketFactory();
    [CompilerGeneratedAttribute]
private void set_SocketFactory(ISocketFactory value);
    public abstract virtual Socket Connect(IConnectionInfo connectionInfo);
    public abstract virtual Task`1<Socket> ConnectAsync(IConnectionInfo connectionInfo, CancellationToken cancellationToken);
    protected Socket SocketConnect(EndPoint endPoint, TimeSpan timeout);
    [AsyncStateMachineAttribute("Renci.SshNet.Connection.ConnectorBase/<SocketConnectAsync>d__8")]
protected Task`1<Socket> SocketConnectAsync(EndPoint endPoint, CancellationToken cancellationToken);
    protected static byte SocketReadByte(Socket socket);
    protected static byte SocketReadByte(Socket socket, TimeSpan readTimeout);
    protected static int SocketRead(Socket socket, Byte[] buffer, int offset, int length);
    protected static int SocketRead(Socket socket, Byte[] buffer, int offset, int length, TimeSpan readTimeout);
}
internal class Renci.SshNet.Connection.DirectConnector : ConnectorBase {
    public DirectConnector(ISocketFactory socketFactory);
    public virtual Socket Connect(IConnectionInfo connectionInfo);
    public virtual Task`1<Socket> ConnectAsync(IConnectionInfo connectionInfo, CancellationToken cancellationToken);
}
internal class Renci.SshNet.Connection.HttpConnector : ProxyConnector {
    private static string HttpResponsePattern;
    private static string HttpHeaderPattern;
    private static Regex HttpResponseRegex;
    private static Regex HttpHeaderRegex;
    public HttpConnector(ISocketFactory socketFactory);
    private static HttpConnector();
    protected virtual void HandleProxyConnect(IConnectionInfo connectionInfo, Socket socket);
    private static string SocketReadLine(Socket socket, TimeSpan readTimeout);
}
internal interface Renci.SshNet.Connection.IConnector {
    public abstract virtual Socket Connect(IConnectionInfo connectionInfo);
    public abstract virtual Task`1<Socket> ConnectAsync(IConnectionInfo connectionInfo, CancellationToken cancellationToken);
}
internal interface Renci.SshNet.Connection.IProtocolVersionExchange {
    public abstract virtual SshIdentification Start(string clientVersion, Socket socket, TimeSpan timeout);
    public abstract virtual Task`1<SshIdentification> StartAsync(string clientVersion, Socket socket, CancellationToken cancellationToken);
}
internal interface Renci.SshNet.Connection.ISocketFactory {
    public abstract virtual Socket Create(SocketType socketType, ProtocolType protocolType);
}
internal class Renci.SshNet.Connection.ProtocolVersionExchange : object {
    private static byte Null;
    private static string ServerVersionPattern;
    private static Regex ServerVersionRegex;
    private static ProtocolVersionExchange();
    public sealed virtual SshIdentification Start(string clientVersion, Socket socket, TimeSpan timeout);
    [AsyncStateMachineAttribute("Renci.SshNet.Connection.ProtocolVersionExchange/<StartAsync>d__4")]
public sealed virtual Task`1<SshIdentification> StartAsync(string clientVersion, Socket socket, CancellationToken cancellationToken);
    private static string GetGroupValue(Match match, string groupName);
    private static string SocketReadLine(Socket socket, TimeSpan timeout, List`1<byte> buffer);
    [AsyncStateMachineAttribute("Renci.SshNet.Connection.ProtocolVersionExchange/<SocketReadLineAsync>d__7")]
private static Task`1<string> SocketReadLineAsync(Socket socket, List`1<byte> buffer, CancellationToken cancellationToken);
    private static SshConnectionException CreateConnectionLostException();
    private static SshConnectionException CreateServerResponseContainsNullCharacterException(List`1<byte> buffer);
    private static SshConnectionException CreateServerResponseDoesNotContainIdentification(List`1<byte> bytesReceived);
}
internal abstract class Renci.SshNet.Connection.ProxyConnector : ConnectorBase {
    protected ProxyConnector(ISocketFactory socketFactory);
    protected abstract virtual void HandleProxyConnect(IConnectionInfo connectionInfo, Socket socket);
    [AsyncStateMachineAttribute("Renci.SshNet.Connection.ProxyConnector/<HandleProxyConnectAsync>d__2")]
protected virtual Task HandleProxyConnectAsync(IConnectionInfo connectionInfo, Socket socket, CancellationToken cancellationToken);
    public virtual Socket Connect(IConnectionInfo connectionInfo);
    [AsyncStateMachineAttribute("Renci.SshNet.Connection.ProxyConnector/<ConnectAsync>d__4")]
public virtual Task`1<Socket> ConnectAsync(IConnectionInfo connectionInfo, CancellationToken cancellationToken);
}
internal class Renci.SshNet.Connection.SocketFactory : object {
    public sealed virtual Socket Create(SocketType socketType, ProtocolType protocolType);
}
internal class Renci.SshNet.Connection.Socks4Connector : ProxyConnector {
    public Socks4Connector(ISocketFactory socketFactory);
    protected virtual void HandleProxyConnect(IConnectionInfo connectionInfo, Socket socket);
    private static Byte[] CreateSocks4ConnectionRequest(string hostname, ushort port, string username);
    private static Byte[] GetSocks4DestinationAddress(string hostname);
    private static Byte[] GetProxyUserBytes(string proxyUser);
}
internal class Renci.SshNet.Connection.Socks5Connector : ProxyConnector {
    public Socks5Connector(ISocketFactory socketFactory);
    protected virtual void HandleProxyConnect(IConnectionInfo connectionInfo, Socket socket);
    private static Byte[] CreateSocks5UserNameAndPasswordAuthenticationRequest(string username, string password);
    private static Byte[] CreateSocks5ConnectionRequest(string hostname, ushort port);
    private static Byte[] GetSocks5DestinationAddress(string hostname, Byte& addressType);
}
public class Renci.SshNet.Connection.SshIdentification : object {
    [CompilerGeneratedAttribute]
private string <SoftwareVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProtocolVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comments>k__BackingField;
    public string SoftwareVersion { get; }
    public string ProtocolVersion { get; }
    public string Comments { get; }
    public SshIdentification(string protocolVersion, string softwareVersion);
    public SshIdentification(string protocolVersion, string softwareVersion, string comments);
    [CompilerGeneratedAttribute]
public string get_SoftwareVersion();
    [CompilerGeneratedAttribute]
public string get_ProtocolVersion();
    [CompilerGeneratedAttribute]
public string get_Comments();
    public virtual string ToString();
}
public class Renci.SshNet.ConnectionInfo : object {
    internal static int DefaultPort;
    private static TimeSpan DefaultTimeout;
    private static TimeSpan DefaultChannelCloseTimeout;
    private TimeSpan _timeout;
    private TimeSpan _channelCloseTimeout;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Func`1<IKeyExchange>> <KeyExchangeAlgorithms>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, CipherInfo> <Encryptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, HashInfo> <HmacAlgorithms>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Func`2<Byte[], KeyHostAlgorithm>> <HostKeyAlgorithms>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<AuthenticationMethod> <AuthenticationMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Func`1<Compressor>> <CompressionAlgorithms>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, RequestInfo> <ChannelRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAuthenticated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private ProxyTypes <ProxyType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProxyHost>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProxyPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProxyUsername>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProxyPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RetryAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxSessions>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<AuthenticationBannerEventArgs> AuthenticationBanner;
    [CompilerGeneratedAttribute]
private string <CurrentKeyExchangeAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentServerEncryption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentClientEncryption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentServerHmacAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentClientHmacAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentHostKeyAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentServerCompressionAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentClientCompressionAlgorithm>k__BackingField;
    public IDictionary`2<string, Func`1<IKeyExchange>> KeyExchangeAlgorithms { get; private set; }
    public IDictionary`2<string, CipherInfo> Encryptions { get; private set; }
    public IDictionary`2<string, HashInfo> HmacAlgorithms { get; private set; }
    public IDictionary`2<string, Func`2<Byte[], KeyHostAlgorithm>> HostKeyAlgorithms { get; private set; }
    public IList`1<AuthenticationMethod> AuthenticationMethods { get; private set; }
    public IDictionary`2<string, Func`1<Compressor>> CompressionAlgorithms { get; private set; }
    public IDictionary`2<string, RequestInfo> ChannelRequests { get; private set; }
    public bool IsAuthenticated { get; private set; }
    public string Host { get; private set; }
    public int Port { get; private set; }
    public string Username { get; private set; }
    public ProxyTypes ProxyType { get; private set; }
    public string ProxyHost { get; private set; }
    public int ProxyPort { get; private set; }
    public string ProxyUsername { get; private set; }
    public string ProxyPassword { get; private set; }
    public TimeSpan Timeout { get; public set; }
    public TimeSpan ChannelCloseTimeout { get; public set; }
    public Encoding Encoding { get; public set; }
    public int RetryAttempts { get; public set; }
    public int MaxSessions { get; public set; }
    public string CurrentKeyExchangeAlgorithm { get; internal set; }
    public string CurrentServerEncryption { get; internal set; }
    public string CurrentClientEncryption { get; internal set; }
    public string CurrentServerHmacAlgorithm { get; internal set; }
    public string CurrentClientHmacAlgorithm { get; internal set; }
    public string CurrentHostKeyAlgorithm { get; internal set; }
    public string CurrentServerCompressionAlgorithm { get; internal set; }
    public string ServerVersion { get; internal set; }
    public string ClientVersion { get; internal set; }
    public string CurrentClientCompressionAlgorithm { get; internal set; }
    private IList`1<IAuthenticationMethod> Renci.SshNet.IConnectionInfoInternal.AuthenticationMethods { get; }
    public ConnectionInfo(string host, string username, AuthenticationMethod[] authenticationMethods);
    public ConnectionInfo(string host, int port, string username, AuthenticationMethod[] authenticationMethods);
    public ConnectionInfo(string host, int port, string username, ProxyTypes proxyType, string proxyHost, int proxyPort, string proxyUsername, string proxyPassword, AuthenticationMethod[] authenticationMethods);
    private static ConnectionInfo();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, Func`1<IKeyExchange>> get_KeyExchangeAlgorithms();
    [CompilerGeneratedAttribute]
private void set_KeyExchangeAlgorithms(IDictionary`2<string, Func`1<IKeyExchange>> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, CipherInfo> get_Encryptions();
    [CompilerGeneratedAttribute]
private void set_Encryptions(IDictionary`2<string, CipherInfo> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, HashInfo> get_HmacAlgorithms();
    [CompilerGeneratedAttribute]
private void set_HmacAlgorithms(IDictionary`2<string, HashInfo> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, Func`2<Byte[], KeyHostAlgorithm>> get_HostKeyAlgorithms();
    [CompilerGeneratedAttribute]
private void set_HostKeyAlgorithms(IDictionary`2<string, Func`2<Byte[], KeyHostAlgorithm>> value);
    [CompilerGeneratedAttribute]
public IList`1<AuthenticationMethod> get_AuthenticationMethods();
    [CompilerGeneratedAttribute]
private void set_AuthenticationMethods(IList`1<AuthenticationMethod> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, Func`1<Compressor>> get_CompressionAlgorithms();
    [CompilerGeneratedAttribute]
private void set_CompressionAlgorithms(IDictionary`2<string, Func`1<Compressor>> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, RequestInfo> get_ChannelRequests();
    [CompilerGeneratedAttribute]
private void set_ChannelRequests(IDictionary`2<string, RequestInfo> value);
    [CompilerGeneratedAttribute]
public bool get_IsAuthenticated();
    [CompilerGeneratedAttribute]
private void set_IsAuthenticated(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Port();
    [CompilerGeneratedAttribute]
private void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
private void set_Username(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ProxyTypes get_ProxyType();
    [CompilerGeneratedAttribute]
private void set_ProxyType(ProxyTypes value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProxyHost();
    [CompilerGeneratedAttribute]
private void set_ProxyHost(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProxyPort();
    [CompilerGeneratedAttribute]
private void set_ProxyPort(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProxyUsername();
    [CompilerGeneratedAttribute]
private void set_ProxyUsername(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProxyPassword();
    [CompilerGeneratedAttribute]
private void set_ProxyPassword(string value);
    public sealed virtual TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public sealed virtual TimeSpan get_ChannelCloseTimeout();
    public void set_ChannelCloseTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_RetryAttempts();
    [CompilerGeneratedAttribute]
public void set_RetryAttempts(int value);
    [CompilerGeneratedAttribute]
public int get_MaxSessions();
    [CompilerGeneratedAttribute]
public void set_MaxSessions(int value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AuthenticationBanner(EventHandler`1<AuthenticationBannerEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AuthenticationBanner(EventHandler`1<AuthenticationBannerEventArgs> value);
    [CompilerGeneratedAttribute]
public string get_CurrentKeyExchangeAlgorithm();
    [CompilerGeneratedAttribute]
internal void set_CurrentKeyExchangeAlgorithm(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentServerEncryption();
    [CompilerGeneratedAttribute]
internal void set_CurrentServerEncryption(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentClientEncryption();
    [CompilerGeneratedAttribute]
internal void set_CurrentClientEncryption(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentServerHmacAlgorithm();
    [CompilerGeneratedAttribute]
internal void set_CurrentServerHmacAlgorithm(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentClientHmacAlgorithm();
    [CompilerGeneratedAttribute]
internal void set_CurrentClientHmacAlgorithm(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentHostKeyAlgorithm();
    [CompilerGeneratedAttribute]
internal void set_CurrentHostKeyAlgorithm(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentServerCompressionAlgorithm();
    [CompilerGeneratedAttribute]
internal void set_CurrentServerCompressionAlgorithm(string value);
    [CompilerGeneratedAttribute]
public string get_ServerVersion();
    [CompilerGeneratedAttribute]
internal void set_ServerVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ClientVersion();
    [CompilerGeneratedAttribute]
internal void set_ClientVersion(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentClientCompressionAlgorithm();
    [CompilerGeneratedAttribute]
internal void set_CurrentClientCompressionAlgorithm(string value);
    internal void Authenticate(ISession session, IServiceFactory serviceFactory);
    private sealed virtual override void Renci.SshNet.IConnectionInfoInternal.UserAuthenticationBannerReceived(object sender, MessageEventArgs`1<BannerMessage> e);
    private sealed virtual override IAuthenticationMethod Renci.SshNet.IConnectionInfoInternal.CreateNoneAuthenticationMethod();
    private sealed virtual override IList`1<IAuthenticationMethod> Renci.SshNet.IConnectionInfoInternal.get_AuthenticationMethods();
}
public class Renci.SshNet.ExpectAction : object {
    [CompilerGeneratedAttribute]
private Regex <Expect>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <Action>k__BackingField;
    public Regex Expect { get; private set; }
    public Action`1<string> Action { get; private set; }
    public ExpectAction(Regex expect, Action`1<string> action);
    public ExpectAction(string expect, Action`1<string> action);
    [CompilerGeneratedAttribute]
public Regex get_Expect();
    [CompilerGeneratedAttribute]
private void set_Expect(Regex value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(Action`1<string> value);
}
public abstract class Renci.SshNet.ForwardedPort : object {
    [CompilerGeneratedAttribute]
private ISession <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler Closing;
    [CompilerGeneratedAttribute]
private EventHandler`1<ExceptionEventArgs> Exception;
    [CompilerGeneratedAttribute]
private EventHandler`1<PortForwardEventArgs> RequestReceived;
    internal ISession Session { get; internal set; }
    public bool IsStarted { get; }
    [CompilerGeneratedAttribute]
internal ISession get_Session();
    [CompilerGeneratedAttribute]
internal void set_Session(ISession value);
    public abstract virtual bool get_IsStarted();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Closing(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Closing(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Exception(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Exception(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RequestReceived(EventHandler`1<PortForwardEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RequestReceived(EventHandler`1<PortForwardEventArgs> value);
    public virtual void Start();
    public virtual void Stop();
    public sealed virtual void Dispose();
    protected abstract virtual void StartPort();
    protected virtual void StopPort(TimeSpan timeout);
    protected virtual void Dispose(bool disposing);
    protected abstract virtual void CheckDisposed();
    protected void RaiseExceptionEvent(Exception exception);
    protected void RaiseRequestReceived(string host, UInt32 port);
    private void RaiseClosing();
    private void Session_ErrorOccured(object sender, ExceptionEventArgs e);
}
public class Renci.SshNet.ForwardedPortDynamic : ForwardedPort {
    private ForwardedPortStatus _status;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private string <BoundHost>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BoundPort>k__BackingField;
    private Socket _listener;
    private CountdownEvent _pendingChannelCountdown;
    public string BoundHost { get; }
    public UInt32 BoundPort { get; }
    public bool IsStarted { get; }
    public ForwardedPortDynamic(UInt32 port);
    public ForwardedPortDynamic(string host, UInt32 port);
    [CompilerGeneratedAttribute]
public string get_BoundHost();
    [CompilerGeneratedAttribute]
public UInt32 get_BoundPort();
    public virtual bool get_IsStarted();
    protected virtual void StartPort();
    protected virtual void StopPort(TimeSpan timeout);
    protected virtual void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    private void InternalStart();
    private void StartAccept(SocketAsyncEventArgs e);
    private void AcceptCompleted(object sender, SocketAsyncEventArgs e);
    private void ProcessAccept(Socket clientSocket);
    private void InitializePendingChannelCountdown();
    private bool HandleSocks(IChannelDirectTcpip channel, Socket clientSocket, TimeSpan timeout);
    private static void CloseClientSocket(Socket clientSocket);
    private void StopListener();
    private void InternalStop(TimeSpan timeout);
    private void InternalDispose(bool disposing);
    private void Session_Disconnected(object sender, EventArgs e);
    private void Session_ErrorOccured(object sender, ExceptionEventArgs e);
    private void Channel_Exception(object sender, ExceptionEventArgs e);
    private bool HandleSocks4(Socket socket, IChannelDirectTcpip channel, TimeSpan timeout);
    private bool HandleSocks5(Socket socket, IChannelDirectTcpip channel, TimeSpan timeout);
    private static string GetSocks5Host(int addressType, Socket socket, TimeSpan timeout);
    private static Byte[] CreateSocks5Reply(bool channelOpen);
    private static string ReadString(Socket socket, TimeSpan timeout);
    protected virtual override void Finalize();
}
public class Renci.SshNet.ForwardedPortLocal : ForwardedPort {
    private ForwardedPortStatus _status;
    private bool _isDisposed;
    private Socket _listener;
    private CountdownEvent _pendingChannelCountdown;
    [CompilerGeneratedAttribute]
private string <BoundHost>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BoundPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Port>k__BackingField;
    public string BoundHost { get; private set; }
    public UInt32 BoundPort { get; private set; }
    public string Host { get; private set; }
    public UInt32 Port { get; private set; }
    public bool IsStarted { get; }
    public ForwardedPortLocal(UInt32 boundPort, string host, UInt32 port);
    public ForwardedPortLocal(string boundHost, string host, UInt32 port);
    public ForwardedPortLocal(string boundHost, UInt32 boundPort, string host, UInt32 port);
    [CompilerGeneratedAttribute]
public string get_BoundHost();
    [CompilerGeneratedAttribute]
private void set_BoundHost(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_BoundPort();
    [CompilerGeneratedAttribute]
private void set_BoundPort(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_Port();
    [CompilerGeneratedAttribute]
private void set_Port(UInt32 value);
    public virtual bool get_IsStarted();
    protected virtual void StartPort();
    protected virtual void StopPort(TimeSpan timeout);
    protected virtual void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    private void InternalStart();
    private void StartAccept(SocketAsyncEventArgs e);
    private void AcceptCompleted(object sender, SocketAsyncEventArgs e);
    private void ProcessAccept(Socket clientSocket);
    private void InitializePendingChannelCountdown();
    private static void CloseClientSocket(Socket clientSocket);
    private void StopListener();
    private void InternalStop(TimeSpan timeout);
    private void InternalDispose(bool disposing);
    private void Session_Disconnected(object sender, EventArgs e);
    private void Session_ErrorOccured(object sender, ExceptionEventArgs e);
    private void Channel_Exception(object sender, ExceptionEventArgs e);
}
public class Renci.SshNet.ForwardedPortRemote : ForwardedPort {
    private ForwardedPortStatus _status;
    private bool _requestStatus;
    private EventWaitHandle _globalRequestResponse;
    private CountdownEvent _pendingChannelCountdown;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private IPAddress <BoundHostAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BoundPort>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <HostAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Port>k__BackingField;
    public bool IsStarted { get; }
    public IPAddress BoundHostAddress { get; private set; }
    public string BoundHost { get; }
    public UInt32 BoundPort { get; private set; }
    public IPAddress HostAddress { get; private set; }
    public string Host { get; }
    public UInt32 Port { get; private set; }
    public ForwardedPortRemote(IPAddress boundHostAddress, UInt32 boundPort, IPAddress hostAddress, UInt32 port);
    public ForwardedPortRemote(UInt32 boundPort, string host, UInt32 port);
    public ForwardedPortRemote(string boundHost, UInt32 boundPort, string host, UInt32 port);
    public virtual bool get_IsStarted();
    [CompilerGeneratedAttribute]
public IPAddress get_BoundHostAddress();
    [CompilerGeneratedAttribute]
private void set_BoundHostAddress(IPAddress value);
    public string get_BoundHost();
    [CompilerGeneratedAttribute]
public UInt32 get_BoundPort();
    [CompilerGeneratedAttribute]
private void set_BoundPort(UInt32 value);
    [CompilerGeneratedAttribute]
public IPAddress get_HostAddress();
    [CompilerGeneratedAttribute]
private void set_HostAddress(IPAddress value);
    public string get_Host();
    [CompilerGeneratedAttribute]
public UInt32 get_Port();
    [CompilerGeneratedAttribute]
private void set_Port(UInt32 value);
    protected virtual void StartPort();
    protected virtual void StopPort(TimeSpan timeout);
    protected virtual void CheckDisposed();
    private void Session_ChannelOpening(object sender, MessageEventArgs`1<ChannelOpenMessage> e);
    private void InitializePendingChannelCountdown();
    private void Channel_Exception(object sender, ExceptionEventArgs exceptionEventArgs);
    private void Session_RequestFailure(object sender, EventArgs e);
    private void Session_RequestSuccess(object sender, MessageEventArgs`1<RequestSuccessMessage> e);
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class Renci.SshNet.ForwardedPortStatus : object {
    public static ForwardedPortStatus Stopped;
    public static ForwardedPortStatus Stopping;
    public static ForwardedPortStatus Started;
    public static ForwardedPortStatus Starting;
    private int _value;
    private string _name;
    private ForwardedPortStatus(int value, string name);
    private static ForwardedPortStatus();
    public virtual bool Equals(object obj);
    public static bool op_Equality(ForwardedPortStatus left, ForwardedPortStatus right);
    public static bool op_Inequality(ForwardedPortStatus left, ForwardedPortStatus right);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool ToStopping(ForwardedPortStatus& status);
    public static bool ToStarting(ForwardedPortStatus& status);
}
public class Renci.SshNet.HashInfo : object {
    [CompilerGeneratedAttribute]
private int <KeySize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEncryptThenMAC>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Byte[], HashAlgorithm> <HashAlgorithm>k__BackingField;
    public int KeySize { get; private set; }
    public bool IsEncryptThenMAC { get; private set; }
    public Func`2<Byte[], HashAlgorithm> HashAlgorithm { get; private set; }
    public HashInfo(int keySize, Func`2<Byte[], HashAlgorithm> hash, bool isEncryptThenMAC);
    [CompilerGeneratedAttribute]
public int get_KeySize();
    [CompilerGeneratedAttribute]
private void set_KeySize(int value);
    [CompilerGeneratedAttribute]
public bool get_IsEncryptThenMAC();
    [CompilerGeneratedAttribute]
private void set_IsEncryptThenMAC(bool value);
    [CompilerGeneratedAttribute]
public Func`2<Byte[], HashAlgorithm> get_HashAlgorithm();
    [CompilerGeneratedAttribute]
private void set_HashAlgorithm(Func`2<Byte[], HashAlgorithm> value);
}
internal interface Renci.SshNet.IAuthenticationMethod {
    public String[] AllowedAuthentications { get; }
    public string Name { get; }
    public abstract virtual AuthenticationResult Authenticate(ISession session);
    public abstract virtual String[] get_AllowedAuthentications();
    public abstract virtual string get_Name();
}
[NullableContextAttribute("1")]
public interface Renci.SshNet.IBaseClient {
    public ConnectionInfo ConnectionInfo { get; }
    public bool IsConnected { get; }
    public TimeSpan KeepAliveInterval { get; public set; }
    public abstract virtual ConnectionInfo get_ConnectionInfo();
    public abstract virtual bool get_IsConnected();
    public abstract virtual TimeSpan get_KeepAliveInterval();
    public abstract virtual void set_KeepAliveInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ErrorOccurred(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ErrorOccurred(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_HostKeyReceived(EventHandler`1<HostKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_HostKeyReceived(EventHandler`1<HostKeyEventArgs> value);
    public abstract virtual void Connect();
    public abstract virtual Task ConnectAsync(CancellationToken cancellationToken);
    public abstract virtual void Disconnect();
    public abstract virtual void SendKeepAlive();
}
internal interface Renci.SshNet.IClientAuthentication {
    public abstract virtual void Authenticate(IConnectionInfoInternal connectionInfo, ISession session);
}
internal interface Renci.SshNet.IConnectionInfo {
    public TimeSpan ChannelCloseTimeout { get; }
    public IDictionary`2<string, RequestInfo> ChannelRequests { get; }
    public Encoding Encoding { get; }
    public string Host { get; }
    public int Port { get; }
    public ProxyTypes ProxyType { get; }
    public string ProxyHost { get; }
    public int ProxyPort { get; }
    public string ProxyUsername { get; }
    public string ProxyPassword { get; }
    public int RetryAttempts { get; }
    public TimeSpan Timeout { get; }
    public abstract virtual TimeSpan get_ChannelCloseTimeout();
    public abstract virtual IDictionary`2<string, RequestInfo> get_ChannelRequests();
    public abstract virtual Encoding get_Encoding();
    public abstract virtual string get_Host();
    public abstract virtual int get_Port();
    public abstract virtual ProxyTypes get_ProxyType();
    public abstract virtual string get_ProxyHost();
    public abstract virtual int get_ProxyPort();
    public abstract virtual string get_ProxyUsername();
    public abstract virtual string get_ProxyPassword();
    public abstract virtual int get_RetryAttempts();
    public abstract virtual TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public abstract virtual void add_AuthenticationBanner(EventHandler`1<AuthenticationBannerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AuthenticationBanner(EventHandler`1<AuthenticationBannerEventArgs> value);
}
internal interface Renci.SshNet.IConnectionInfoInternal {
    public IList`1<IAuthenticationMethod> AuthenticationMethods { get; }
    public abstract virtual void UserAuthenticationBannerReceived(object sender, MessageEventArgs`1<BannerMessage> e);
    public abstract virtual IList`1<IAuthenticationMethod> get_AuthenticationMethods();
    public abstract virtual IAuthenticationMethod CreateNoneAuthenticationMethod();
}
public interface Renci.SshNet.IForwardedPort {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closing(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closing(EventHandler value);
}
public interface Renci.SshNet.IPrivateKeySource {
    public IReadOnlyCollection`1<HostAlgorithm> HostKeyAlgorithms { get; }
    public abstract virtual IReadOnlyCollection`1<HostAlgorithm> get_HostKeyAlgorithms();
}
public interface Renci.SshNet.IRemotePathTransformation {
    public abstract virtual string Transform(string path);
}
internal interface Renci.SshNet.IServiceFactory {
    public abstract virtual IClientAuthentication CreateClientAuthentication();
    public abstract virtual INetConfSession CreateNetConfSession(ISession session, int operationTimeout);
    public abstract virtual ISession CreateSession(ConnectionInfo connectionInfo, ISocketFactory socketFactory);
    public abstract virtual ISftpSession CreateSftpSession(ISession session, int operationTimeout, Encoding encoding, ISftpResponseFactory sftpMessageFactory);
    public abstract virtual PipeStream CreatePipeStream();
    public abstract virtual IKeyExchange CreateKeyExchange(IDictionary`2<string, Func`1<IKeyExchange>> clientAlgorithms, String[] serverAlgorithms);
    public abstract virtual ISftpFileReader CreateSftpFileReader(string fileName, ISftpSession sftpSession, UInt32 bufferSize);
    public abstract virtual ISftpResponseFactory CreateSftpResponseFactory();
    public abstract virtual ShellStream CreateShellStream(ISession session, string terminalName, UInt32 columns, UInt32 rows, UInt32 width, UInt32 height, IDictionary`2<TerminalModes, UInt32> terminalModeValues, int bufferSize);
    public abstract virtual ShellStream CreateShellStreamNoTerminal(ISession session, int bufferSize);
    public abstract virtual IRemotePathTransformation CreateRemotePathDoubleQuoteTransformation();
    public abstract virtual IConnector CreateConnector(IConnectionInfo connectionInfo, ISocketFactory socketFactory);
    public abstract virtual IProtocolVersionExchange CreateProtocolVersionExchange();
    public abstract virtual ISocketFactory CreateSocketFactory();
}
internal interface Renci.SshNet.ISession {
    public IConnectionInfo ConnectionInfo { get; }
    public bool IsConnected { get; }
    public SemaphoreSlim SessionSemaphore { get; }
    public WaitHandle MessageListenerCompleted { get; }
    public abstract virtual IConnectionInfo get_ConnectionInfo();
    public abstract virtual bool get_IsConnected();
    public abstract virtual SemaphoreSlim get_SessionSemaphore();
    public abstract virtual WaitHandle get_MessageListenerCompleted();
    public abstract virtual void Connect();
    public abstract virtual Task ConnectAsync(CancellationToken cancellationToken);
    public abstract virtual IChannelSession CreateChannelSession();
    public abstract virtual IChannelDirectTcpip CreateChannelDirectTcpip();
    public abstract virtual IChannelForwardedTcpip CreateChannelForwardedTcpip(UInt32 remoteChannelNumber, UInt32 remoteWindowSize, UInt32 remoteChannelDataPacketSize);
    public abstract virtual void Disconnect();
    public abstract virtual void OnDisconnecting();
    public abstract virtual void RegisterMessage(string messageName);
    public abstract virtual void SendMessage(Message message);
    public abstract virtual bool TrySendMessage(Message message);
    public abstract virtual void UnRegisterMessage(string messageName);
    public abstract virtual void WaitOnHandle(WaitHandle waitHandle);
    public abstract virtual void WaitOnHandle(WaitHandle waitHandle, TimeSpan timeout);
    public abstract virtual WaitResult TryWait(WaitHandle waitHandle, TimeSpan timeout, Exception& exception);
    public abstract virtual WaitResult TryWait(WaitHandle waitHandle, TimeSpan timeout);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ChannelCloseReceived(EventHandler`1<MessageEventArgs`1<ChannelCloseMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ChannelCloseReceived(EventHandler`1<MessageEventArgs`1<ChannelCloseMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ChannelDataReceived(EventHandler`1<MessageEventArgs`1<ChannelDataMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ChannelDataReceived(EventHandler`1<MessageEventArgs`1<ChannelDataMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ChannelEofReceived(EventHandler`1<MessageEventArgs`1<ChannelEofMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ChannelEofReceived(EventHandler`1<MessageEventArgs`1<ChannelEofMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ChannelExtendedDataReceived(EventHandler`1<MessageEventArgs`1<ChannelExtendedDataMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ChannelExtendedDataReceived(EventHandler`1<MessageEventArgs`1<ChannelExtendedDataMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ChannelFailureReceived(EventHandler`1<MessageEventArgs`1<ChannelFailureMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ChannelFailureReceived(EventHandler`1<MessageEventArgs`1<ChannelFailureMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ChannelOpenConfirmationReceived(EventHandler`1<MessageEventArgs`1<ChannelOpenConfirmationMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ChannelOpenConfirmationReceived(EventHandler`1<MessageEventArgs`1<ChannelOpenConfirmationMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ChannelOpenFailureReceived(EventHandler`1<MessageEventArgs`1<ChannelOpenFailureMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ChannelOpenFailureReceived(EventHandler`1<MessageEventArgs`1<ChannelOpenFailureMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ChannelOpenReceived(EventHandler`1<MessageEventArgs`1<ChannelOpenMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ChannelOpenReceived(EventHandler`1<MessageEventArgs`1<ChannelOpenMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ChannelRequestReceived(EventHandler`1<MessageEventArgs`1<ChannelRequestMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ChannelRequestReceived(EventHandler`1<MessageEventArgs`1<ChannelRequestMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ChannelSuccessReceived(EventHandler`1<MessageEventArgs`1<ChannelSuccessMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ChannelSuccessReceived(EventHandler`1<MessageEventArgs`1<ChannelSuccessMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ChannelWindowAdjustReceived(EventHandler`1<MessageEventArgs`1<ChannelWindowAdjustMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ChannelWindowAdjustReceived(EventHandler`1<MessageEventArgs`1<ChannelWindowAdjustMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Disconnected(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Disconnected(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ErrorOccured(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ErrorOccured(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ServerIdentificationReceived(EventHandler`1<SshIdentificationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ServerIdentificationReceived(EventHandler`1<SshIdentificationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_HostKeyReceived(EventHandler`1<HostKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_HostKeyReceived(EventHandler`1<HostKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RequestSuccessReceived(EventHandler`1<MessageEventArgs`1<RequestSuccessMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RequestSuccessReceived(EventHandler`1<MessageEventArgs`1<RequestSuccessMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RequestFailureReceived(EventHandler`1<MessageEventArgs`1<RequestFailureMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RequestFailureReceived(EventHandler`1<MessageEventArgs`1<RequestFailureMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_UserAuthenticationBannerReceived(EventHandler`1<MessageEventArgs`1<BannerMessage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_UserAuthenticationBannerReceived(EventHandler`1<MessageEventArgs`1<BannerMessage>> value);
}
[NullableContextAttribute("1")]
public interface Renci.SshNet.ISftpClient {
    public UInt32 BufferSize { get; public set; }
    public TimeSpan OperationTimeout { get; public set; }
    public int ProtocolVersion { get; }
    public string WorkingDirectory { get; }
    public abstract virtual UInt32 get_BufferSize();
    public abstract virtual void set_BufferSize(UInt32 value);
    public abstract virtual TimeSpan get_OperationTimeout();
    public abstract virtual void set_OperationTimeout(TimeSpan value);
    public abstract virtual int get_ProtocolVersion();
    public abstract virtual string get_WorkingDirectory();
    public abstract virtual void AppendAllLines(string path, IEnumerable`1<string> contents);
    public abstract virtual void AppendAllLines(string path, IEnumerable`1<string> contents, Encoding encoding);
    public abstract virtual void AppendAllText(string path, string contents);
    public abstract virtual void AppendAllText(string path, string contents, Encoding encoding);
    public abstract virtual StreamWriter AppendText(string path);
    public abstract virtual StreamWriter AppendText(string path, Encoding encoding);
    public abstract virtual IAsyncResult BeginDownloadFile(string path, Stream output);
    public abstract virtual IAsyncResult BeginDownloadFile(string path, Stream output, AsyncCallback asyncCallback);
    public abstract virtual IAsyncResult BeginDownloadFile(string path, Stream output, AsyncCallback asyncCallback, object state, Action`1<ulong> downloadCallback);
    [NullableContextAttribute("2")]
public abstract virtual IAsyncResult BeginListDirectory(string path, AsyncCallback asyncCallback, object state, Action`1<int> listCallback);
    public abstract virtual IAsyncResult BeginSynchronizeDirectories(string sourcePath, string destinationPath, string searchPattern, AsyncCallback asyncCallback, object state);
    public abstract virtual IAsyncResult BeginUploadFile(Stream input, string path);
    public abstract virtual IAsyncResult BeginUploadFile(Stream input, string path, AsyncCallback asyncCallback);
    public abstract virtual IAsyncResult BeginUploadFile(Stream input, string path, AsyncCallback asyncCallback, object state, Action`1<ulong> uploadCallback);
    public abstract virtual IAsyncResult BeginUploadFile(Stream input, string path, bool canOverride, AsyncCallback asyncCallback, object state, Action`1<ulong> uploadCallback);
    public abstract virtual void ChangeDirectory(string path);
    public abstract virtual void ChangePermissions(string path, short mode);
    public abstract virtual SftpFileStream Create(string path);
    public abstract virtual SftpFileStream Create(string path, int bufferSize);
    public abstract virtual void CreateDirectory(string path);
    public abstract virtual StreamWriter CreateText(string path);
    public abstract virtual StreamWriter CreateText(string path, Encoding encoding);
    public abstract virtual void Delete(string path);
    public abstract virtual void DeleteDirectory(string path);
    public abstract virtual void DeleteFile(string path);
    public abstract virtual Task DeleteFileAsync(string path, CancellationToken cancellationToken);
    public abstract virtual void DownloadFile(string path, Stream output, Action`1<ulong> downloadCallback);
    public abstract virtual void EndDownloadFile(IAsyncResult asyncResult);
    public abstract virtual IEnumerable`1<ISftpFile> EndListDirectory(IAsyncResult asyncResult);
    public abstract virtual IEnumerable`1<FileInfo> EndSynchronizeDirectories(IAsyncResult asyncResult);
    public abstract virtual void EndUploadFile(IAsyncResult asyncResult);
    public abstract virtual bool Exists(string path);
    public abstract virtual ISftpFile Get(string path);
    public abstract virtual SftpFileAttributes GetAttributes(string path);
    public abstract virtual DateTime GetLastAccessTime(string path);
    public abstract virtual DateTime GetLastAccessTimeUtc(string path);
    public abstract virtual DateTime GetLastWriteTime(string path);
    public abstract virtual DateTime GetLastWriteTimeUtc(string path);
    public abstract virtual SftpFileSystemInformation GetStatus(string path);
    public abstract virtual Task`1<SftpFileSystemInformation> GetStatusAsync(string path, CancellationToken cancellationToken);
    public abstract virtual IEnumerable`1<ISftpFile> ListDirectory(string path, Action`1<int> listCallback);
    public abstract virtual IAsyncEnumerable`1<ISftpFile> ListDirectoryAsync(string path, CancellationToken cancellationToken);
    public abstract virtual SftpFileStream Open(string path, FileMode mode);
    public abstract virtual SftpFileStream Open(string path, FileMode mode, FileAccess access);
    public abstract virtual Task`1<SftpFileStream> OpenAsync(string path, FileMode mode, FileAccess access, CancellationToken cancellationToken);
    public abstract virtual SftpFileStream OpenRead(string path);
    public abstract virtual StreamReader OpenText(string path);
    public abstract virtual SftpFileStream OpenWrite(string path);
    public abstract virtual Byte[] ReadAllBytes(string path);
    public abstract virtual String[] ReadAllLines(string path);
    public abstract virtual String[] ReadAllLines(string path, Encoding encoding);
    public abstract virtual string ReadAllText(string path);
    public abstract virtual string ReadAllText(string path, Encoding encoding);
    public abstract virtual IEnumerable`1<string> ReadLines(string path);
    public abstract virtual IEnumerable`1<string> ReadLines(string path, Encoding encoding);
    public abstract virtual void RenameFile(string oldPath, string newPath);
    public abstract virtual void RenameFile(string oldPath, string newPath, bool isPosix);
    public abstract virtual Task RenameFileAsync(string oldPath, string newPath, CancellationToken cancellationToken);
    public abstract virtual void SetLastAccessTime(string path, DateTime lastAccessTime);
    public abstract virtual void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc);
    public abstract virtual void SetLastWriteTime(string path, DateTime lastWriteTime);
    public abstract virtual void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc);
    public abstract virtual void SetAttributes(string path, SftpFileAttributes fileAttributes);
    public abstract virtual void SymbolicLink(string path, string linkPath);
    public abstract virtual IEnumerable`1<FileInfo> SynchronizeDirectories(string sourcePath, string destinationPath, string searchPattern);
    public abstract virtual void UploadFile(Stream input, string path, Action`1<ulong> uploadCallback);
    public abstract virtual void UploadFile(Stream input, string path, bool canOverride, Action`1<ulong> uploadCallback);
    public abstract virtual void WriteAllBytes(string path, Byte[] bytes);
    public abstract virtual void WriteAllLines(string path, IEnumerable`1<string> contents);
    public abstract virtual void WriteAllLines(string path, IEnumerable`1<string> contents, Encoding encoding);
    public abstract virtual void WriteAllLines(string path, String[] contents);
    public abstract virtual void WriteAllLines(string path, String[] contents, Encoding encoding);
    public abstract virtual void WriteAllText(string path, string contents);
    public abstract virtual void WriteAllText(string path, string contents, Encoding encoding);
}
internal interface Renci.SshNet.ISubsystemSession {
    public int OperationTimeout { get; }
    public bool IsOpen { get; }
    public abstract virtual int get_OperationTimeout();
    public abstract virtual bool get_IsOpen();
    public abstract virtual void Connect();
    public abstract virtual void Disconnect();
    public abstract virtual void WaitOnHandle(WaitHandle waitHandle, int millisecondsTimeout);
    public abstract virtual bool WaitOne(WaitHandle waitHandle, int millisecondsTimeout);
    public abstract virtual int WaitAny(WaitHandle waitHandleA, WaitHandle waitHandleB, int millisecondsTimeout);
    public abstract virtual int WaitAny(WaitHandle[] waitHandles, int millisecondsTimeout);
    public abstract virtual WaitHandle[] CreateWaitHandleArray(WaitHandle[] waitHandles);
    public abstract virtual WaitHandle[] CreateWaitHandleArray(WaitHandle waitHandle1, WaitHandle waitHandle2);
}
public class Renci.SshNet.KeyboardInteractiveAuthenticationMethod : AuthenticationMethod {
    private RequestMessageKeyboardInteractive _requestMessage;
    private AuthenticationResult _authenticationResult;
    private Session _session;
    private EventWaitHandle _authenticationCompleted;
    private Exception _exception;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private EventHandler`1<AuthenticationPromptEventArgs> AuthenticationPrompt;
    public string Name { get; }
    public KeyboardInteractiveAuthenticationMethod(string username);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public void add_AuthenticationPrompt(EventHandler`1<AuthenticationPromptEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AuthenticationPrompt(EventHandler`1<AuthenticationPromptEventArgs> value);
    public virtual AuthenticationResult Authenticate(Session session);
    private void Session_UserAuthenticationSuccessReceived(object sender, MessageEventArgs`1<SuccessMessage> e);
    private void Session_UserAuthenticationFailureReceived(object sender, MessageEventArgs`1<FailureMessage> e);
    private void Session_UserAuthenticationInformationRequestReceived(object sender, MessageEventArgs`1<InformationRequestMessage> e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class Renci.SshNet.KeyboardInteractiveConnectionInfo : ConnectionInfo {
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private EventHandler`1<AuthenticationPromptEventArgs> AuthenticationPrompt;
    public KeyboardInteractiveConnectionInfo(string host, string username);
    public KeyboardInteractiveConnectionInfo(string host, int port, string username);
    public KeyboardInteractiveConnectionInfo(string host, int port, string username, ProxyTypes proxyType, string proxyHost, int proxyPort);
    public KeyboardInteractiveConnectionInfo(string host, int port, string username, ProxyTypes proxyType, string proxyHost, int proxyPort, string proxyUsername);
    public KeyboardInteractiveConnectionInfo(string host, string username, ProxyTypes proxyType, string proxyHost, int proxyPort);
    public KeyboardInteractiveConnectionInfo(string host, string username, ProxyTypes proxyType, string proxyHost, int proxyPort, string proxyUsername);
    public KeyboardInteractiveConnectionInfo(string host, string username, ProxyTypes proxyType, string proxyHost, int proxyPort, string proxyUsername, string proxyPassword);
    public KeyboardInteractiveConnectionInfo(string host, int port, string username, ProxyTypes proxyType, string proxyHost, int proxyPort, string proxyUsername, string proxyPassword);
    [CompilerGeneratedAttribute]
public void add_AuthenticationPrompt(EventHandler`1<AuthenticationPromptEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AuthenticationPrompt(EventHandler`1<AuthenticationPromptEventArgs> value);
    private void AuthenticationMethod_AuthenticationPrompt(object sender, AuthenticationPromptEventArgs e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class Renci.SshNet.MessageEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private T <Message>k__BackingField;
    public T Message { get; private set; }
    public MessageEventArgs`1(T message);
    [CompilerGeneratedAttribute]
public T get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(T value);
}
public class Renci.SshNet.Messages.Authentication.BannerMessage : Message {
    private Byte[] _message;
    private Byte[] _language;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public string Message { get; }
    public string Language { get; }
    protected int BufferCapacity { get; }
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    public string get_Message();
    public string get_Language();
    protected virtual int get_BufferCapacity();
    internal virtual void Process(Session session);
    protected virtual void LoadData();
    protected virtual void SaveData();
}
public class Renci.SshNet.Messages.Authentication.FailureMessage : Message {
    [CompilerGeneratedAttribute]
private String[] <AllowedAuthentications>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PartialSuccess>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public String[] AllowedAuthentications { get; public set; }
    public string Message { get; private set; }
    public bool PartialSuccess { get; private set; }
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public String[] get_AllowedAuthentications();
    [CompilerGeneratedAttribute]
public void set_AllowedAuthentications(String[] value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public bool get_PartialSuccess();
    [CompilerGeneratedAttribute]
private void set_PartialSuccess(bool value);
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
    public virtual string ToString();
}
internal class Renci.SshNet.Messages.Authentication.InformationRequestMessage : Message {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Instruction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<AuthenticationPrompt> <Prompts>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public string Name { get; private set; }
    public string Instruction { get; private set; }
    public string Language { get; private set; }
    public IReadOnlyList`1<AuthenticationPrompt> Prompts { get; private set; }
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Instruction();
    [CompilerGeneratedAttribute]
private void set_Instruction(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
private void set_Language(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<AuthenticationPrompt> get_Prompts();
    [CompilerGeneratedAttribute]
private void set_Prompts(IReadOnlyList`1<AuthenticationPrompt> value);
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
internal class Renci.SshNet.Messages.Authentication.InformationResponseMessage : Message {
    [CompilerGeneratedAttribute]
private List`1<string> <Responses>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public List`1<string> Responses { get; private set; }
    protected int BufferCapacity { get; }
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public List`1<string> get_Responses();
    [CompilerGeneratedAttribute]
private void set_Responses(List`1<string> value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
internal class Renci.SshNet.Messages.Authentication.PasswordChangeRequiredMessage : Message {
    [CompilerGeneratedAttribute]
private Byte[] <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Language>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public Byte[] Message { get; private set; }
    public Byte[] Language { get; private set; }
    protected int BufferCapacity { get; }
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public Byte[] get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Language();
    [CompilerGeneratedAttribute]
private void set_Language(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
internal class Renci.SshNet.Messages.Authentication.PublicKeyMessage : Message {
    [CompilerGeneratedAttribute]
private Byte[] <PublicKeyAlgorithmName>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PublicKeyData>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public Byte[] PublicKeyAlgorithmName { get; private set; }
    public Byte[] PublicKeyData { get; private set; }
    protected int BufferCapacity { get; }
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public Byte[] get_PublicKeyAlgorithmName();
    [CompilerGeneratedAttribute]
private void set_PublicKeyAlgorithmName(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_PublicKeyData();
    [CompilerGeneratedAttribute]
private void set_PublicKeyData(Byte[] value);
    protected virtual int get_BufferCapacity();
    internal virtual void Process(Session session);
    protected virtual void LoadData();
    protected virtual void SaveData();
    public virtual string ToString();
}
public abstract class Renci.SshNet.Messages.Authentication.RequestMessage : Message {
    internal static int AuthenticationMessageCode;
    private Byte[] _serviceName;
    private Byte[] _userName;
    private Byte[] _methodNameBytes;
    private string _methodName;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public Byte[] Username { get; }
    public Byte[] ServiceName { get; }
    public string MethodName { get; }
    protected int BufferCapacity { get; }
    protected RequestMessage(ServiceName serviceName, string username, string methodName);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    public Byte[] get_Username();
    public Byte[] get_ServiceName();
    public virtual string get_MethodName();
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
    public virtual string ToString();
}
internal class Renci.SshNet.Messages.Authentication.RequestMessageHost : RequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <PublicKeyAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PublicHostKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ClientHostName>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ClientUsername>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Signature>k__BackingField;
    public Byte[] PublicKeyAlgorithm { get; }
    public Byte[] PublicHostKey { get; }
    public Byte[] ClientHostName { get; }
    public Byte[] ClientUsername { get; }
    public Byte[] Signature { get; }
    protected int BufferCapacity { get; }
    public RequestMessageHost(ServiceName serviceName, string username, string publicKeyAlgorithm, Byte[] publicHostKey, string clientHostName, string clientUsername, Byte[] signature);
    [CompilerGeneratedAttribute]
public Byte[] get_PublicKeyAlgorithm();
    [CompilerGeneratedAttribute]
public Byte[] get_PublicHostKey();
    [CompilerGeneratedAttribute]
public Byte[] get_ClientHostName();
    [CompilerGeneratedAttribute]
public Byte[] get_ClientUsername();
    [CompilerGeneratedAttribute]
public Byte[] get_Signature();
    protected virtual int get_BufferCapacity();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Messages.Authentication.RequestMessageKeyboardInteractive : RequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SubMethods>k__BackingField;
    public Byte[] Language { get; private set; }
    public Byte[] SubMethods { get; private set; }
    protected int BufferCapacity { get; }
    public RequestMessageKeyboardInteractive(ServiceName serviceName, string username);
    [CompilerGeneratedAttribute]
public Byte[] get_Language();
    [CompilerGeneratedAttribute]
private void set_Language(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_SubMethods();
    [CompilerGeneratedAttribute]
private void set_SubMethods(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Messages.Authentication.RequestMessageNone : RequestMessage {
    public RequestMessageNone(ServiceName serviceName, string username);
}
internal class Renci.SshNet.Messages.Authentication.RequestMessagePassword : RequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <NewPassword>k__BackingField;
    public Byte[] Password { get; private set; }
    public Byte[] NewPassword { get; private set; }
    protected int BufferCapacity { get; }
    public RequestMessagePassword(ServiceName serviceName, string username, Byte[] password);
    public RequestMessagePassword(ServiceName serviceName, string username, Byte[] password, Byte[] newPassword);
    [CompilerGeneratedAttribute]
public Byte[] get_Password();
    [CompilerGeneratedAttribute]
private void set_Password(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_NewPassword();
    [CompilerGeneratedAttribute]
private void set_NewPassword(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void SaveData();
}
public class Renci.SshNet.Messages.Authentication.RequestMessagePublicKey : RequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <PublicKeyAlgorithmName>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PublicKeyData>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Signature>k__BackingField;
    public Byte[] PublicKeyAlgorithmName { get; private set; }
    public Byte[] PublicKeyData { get; private set; }
    public Byte[] Signature { get; public set; }
    protected int BufferCapacity { get; }
    public RequestMessagePublicKey(ServiceName serviceName, string username, string keyAlgorithmName, Byte[] keyData);
    public RequestMessagePublicKey(ServiceName serviceName, string username, string keyAlgorithmName, Byte[] keyData, Byte[] signature);
    [CompilerGeneratedAttribute]
public Byte[] get_PublicKeyAlgorithmName();
    [CompilerGeneratedAttribute]
private void set_PublicKeyAlgorithmName(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_PublicKeyData();
    [CompilerGeneratedAttribute]
private void set_PublicKeyData(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void SaveData();
    public virtual string ToString();
}
public class Renci.SshNet.Messages.Authentication.SuccessMessage : Message {
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
internal class Renci.SshNet.Messages.Connection.BreakRequestInfo : RequestInfo {
    public static string Name;
    [CompilerGeneratedAttribute]
private UInt32 <BreakLength>k__BackingField;
    public string RequestName { get; }
    public UInt32 BreakLength { get; private set; }
    protected int BufferCapacity { get; }
    public BreakRequestInfo(UInt32 breakLength);
    public virtual string get_RequestName();
    [CompilerGeneratedAttribute]
public UInt32 get_BreakLength();
    [CompilerGeneratedAttribute]
private void set_BreakLength(UInt32 value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Messages.Connection.CancelTcpIpForwardGlobalRequestMessage : GlobalRequestMessage {
    private Byte[] _addressToBind;
    [CompilerGeneratedAttribute]
private UInt32 <PortToBind>k__BackingField;
    public string AddressToBind { get; private set; }
    public UInt32 PortToBind { get; private set; }
    protected int BufferCapacity { get; }
    public CancelTcpIpForwardGlobalRequestMessage(string addressToBind, UInt32 portToBind);
    public string get_AddressToBind();
    private void set_AddressToBind(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_PortToBind();
    [CompilerGeneratedAttribute]
private void set_PortToBind(UInt32 value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
public class Renci.SshNet.Messages.Connection.ChannelCloseMessage : ChannelMessage {
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public ChannelCloseMessage(UInt32 localChannelNumber);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    internal virtual void Process(Session session);
}
public class Renci.SshNet.Messages.Connection.ChannelDataMessage : ChannelMessage {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public Byte[] Data { get; private set; }
    public int Offset { get; private set; }
    public int Size { get; private set; }
    protected int BufferCapacity { get; }
    public ChannelDataMessage(UInt32 localChannelNumber, Byte[] data);
    public ChannelDataMessage(UInt32 localChannelNumber, Byte[] data, int offset, int size);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(int value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    protected virtual int get_BufferCapacity();
    internal virtual void Process(Session session);
    protected virtual void LoadData();
    protected virtual void SaveData();
}
public class Renci.SshNet.Messages.Connection.ChannelEofMessage : ChannelMessage {
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public ChannelEofMessage(UInt32 localChannelNumber);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    internal virtual void Process(Session session);
}
public class Renci.SshNet.Messages.Connection.ChannelExtendedDataMessage : ChannelMessage {
    [CompilerGeneratedAttribute]
private UInt32 <DataTypeCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public UInt32 DataTypeCode { get; private set; }
    public Byte[] Data { get; private set; }
    protected int BufferCapacity { get; }
    public ChannelExtendedDataMessage(UInt32 localChannelNumber, UInt32 dataTypeCode, Byte[] data);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public UInt32 get_DataTypeCode();
    [CompilerGeneratedAttribute]
private void set_DataTypeCode(UInt32 value);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
public class Renci.SshNet.Messages.Connection.ChannelFailureMessage : ChannelMessage {
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public ChannelFailureMessage(UInt32 localChannelNumber);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    internal virtual void Process(Session session);
}
public abstract class Renci.SshNet.Messages.Connection.ChannelMessage : Message {
    [CompilerGeneratedAttribute]
private UInt32 <LocalChannelNumber>k__BackingField;
    public UInt32 LocalChannelNumber { get; protected set; }
    protected int BufferCapacity { get; }
    protected ChannelMessage(UInt32 localChannelNumber);
    [CompilerGeneratedAttribute]
public UInt32 get_LocalChannelNumber();
    [CompilerGeneratedAttribute]
protected void set_LocalChannelNumber(UInt32 value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    public virtual string ToString();
}
public class Renci.SshNet.Messages.Connection.ChannelOpenConfirmationMessage : ChannelMessage {
    [CompilerGeneratedAttribute]
private UInt32 <RemoteChannelNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <InitialWindowSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaximumPacketSize>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public UInt32 RemoteChannelNumber { get; private set; }
    public UInt32 InitialWindowSize { get; private set; }
    public UInt32 MaximumPacketSize { get; private set; }
    protected int BufferCapacity { get; }
    public ChannelOpenConfirmationMessage(UInt32 localChannelNumber, UInt32 initialWindowSize, UInt32 maximumPacketSize, UInt32 remoteChannelNumber);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public UInt32 get_RemoteChannelNumber();
    [CompilerGeneratedAttribute]
private void set_RemoteChannelNumber(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_InitialWindowSize();
    [CompilerGeneratedAttribute]
private void set_InitialWindowSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_MaximumPacketSize();
    [CompilerGeneratedAttribute]
private void set_MaximumPacketSize(UInt32 value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
public class Renci.SshNet.Messages.Connection.ChannelOpenFailureMessage : ChannelMessage {
    internal static UInt32 AdministrativelyProhibited;
    internal static UInt32 ConnectFailed;
    internal static UInt32 UnknownChannelType;
    internal static UInt32 ResourceShortage;
    private Byte[] _description;
    private Byte[] _language;
    [CompilerGeneratedAttribute]
private UInt32 <ReasonCode>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public UInt32 ReasonCode { get; private set; }
    public string Description { get; private set; }
    public string Language { get; private set; }
    protected int BufferCapacity { get; }
    public ChannelOpenFailureMessage(UInt32 localChannelNumber, string description, UInt32 reasonCode);
    public ChannelOpenFailureMessage(UInt32 localChannelNumber, string description, UInt32 reasonCode, string language);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public UInt32 get_ReasonCode();
    [CompilerGeneratedAttribute]
private void set_ReasonCode(UInt32 value);
    public string get_Description();
    private void set_Description(string value);
    public string get_Language();
    private void set_Language(string value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
internal enum Renci.SshNet.Messages.Connection.ChannelOpenFailureReasons : Enum {
    public UInt32 value__;
    public static ChannelOpenFailureReasons AdministativelyProhibited;
    public static ChannelOpenFailureReasons ConnectFailed;
    public static ChannelOpenFailureReasons UnknownChannelType;
    public static ChannelOpenFailureReasons ResourceShortage;
}
public abstract class Renci.SshNet.Messages.Connection.ChannelOpenInfo : SshData {
    public string ChannelType { get; }
    public abstract virtual string get_ChannelType();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
public class Renci.SshNet.Messages.Connection.ChannelOpenMessage : Message {
    private Byte[] _infoBytes;
    [CompilerGeneratedAttribute]
private Byte[] <ChannelType>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LocalChannelNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <InitialWindowSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaximumPacketSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ChannelOpenInfo <Info>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public Byte[] ChannelType { get; private set; }
    public UInt32 LocalChannelNumber { get; protected set; }
    public UInt32 InitialWindowSize { get; private set; }
    public UInt32 MaximumPacketSize { get; private set; }
    public ChannelOpenInfo Info { get; private set; }
    protected int BufferCapacity { get; }
    public ChannelOpenMessage(UInt32 channelNumber, UInt32 initialWindowSize, UInt32 maximumPacketSize, ChannelOpenInfo info);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public Byte[] get_ChannelType();
    [CompilerGeneratedAttribute]
private void set_ChannelType(Byte[] value);
    [CompilerGeneratedAttribute]
public UInt32 get_LocalChannelNumber();
    [CompilerGeneratedAttribute]
protected void set_LocalChannelNumber(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_InitialWindowSize();
    [CompilerGeneratedAttribute]
private void set_InitialWindowSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_MaximumPacketSize();
    [CompilerGeneratedAttribute]
private void set_MaximumPacketSize(UInt32 value);
    [CompilerGeneratedAttribute]
public ChannelOpenInfo get_Info();
    [CompilerGeneratedAttribute]
private void set_Info(ChannelOpenInfo value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
public class Renci.SshNet.Messages.Connection.ChannelRequestMessage : ChannelMessage {
    private string _requestName;
    private Byte[] _requestNameBytes;
    [CompilerGeneratedAttribute]
private Byte[] <RequestData>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public string RequestName { get; private set; }
    public Byte[] RequestData { get; private set; }
    protected int BufferCapacity { get; }
    public ChannelRequestMessage(UInt32 localChannelNumber, RequestInfo info);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    public string get_RequestName();
    private void set_RequestName(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_RequestData();
    [CompilerGeneratedAttribute]
private void set_RequestData(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
public class Renci.SshNet.Messages.Connection.ChannelSuccessMessage : ChannelMessage {
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public ChannelSuccessMessage(UInt32 localChannelNumber);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    internal virtual void Process(Session session);
}
public class Renci.SshNet.Messages.Connection.ChannelWindowAdjustMessage : ChannelMessage {
    [CompilerGeneratedAttribute]
private UInt32 <BytesToAdd>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public UInt32 BytesToAdd { get; private set; }
    protected int BufferCapacity { get; }
    public ChannelWindowAdjustMessage(UInt32 localChannelNumber, UInt32 bytesToAdd);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public UInt32 get_BytesToAdd();
    [CompilerGeneratedAttribute]
private void set_BytesToAdd(UInt32 value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
internal class Renci.SshNet.Messages.Connection.DirectTcpipChannelInfo : ChannelOpenInfo {
    private Byte[] _hostToConnect;
    private Byte[] _originatorAddress;
    public static string NAME;
    [CompilerGeneratedAttribute]
private UInt32 <PortToConnect>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OriginatorPort>k__BackingField;
    public string ChannelType { get; }
    public string HostToConnect { get; private set; }
    public UInt32 PortToConnect { get; private set; }
    public string OriginatorAddress { get; private set; }
    public UInt32 OriginatorPort { get; private set; }
    protected int BufferCapacity { get; }
    public DirectTcpipChannelInfo(Byte[] data);
    public DirectTcpipChannelInfo(string hostToConnect, UInt32 portToConnect, string originatorAddress, UInt32 originatorPort);
    public virtual string get_ChannelType();
    public string get_HostToConnect();
    private void set_HostToConnect(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_PortToConnect();
    [CompilerGeneratedAttribute]
private void set_PortToConnect(UInt32 value);
    public string get_OriginatorAddress();
    private void set_OriginatorAddress(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_OriginatorPort();
    [CompilerGeneratedAttribute]
private void set_OriginatorPort(UInt32 value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
public class Renci.SshNet.Messages.Connection.EndOfWriteRequestInfo : RequestInfo {
    public static string Name;
    public string RequestName { get; }
    public virtual string get_RequestName();
}
internal class Renci.SshNet.Messages.Connection.EnvironmentVariableRequestInfo : RequestInfo {
    private Byte[] _variableName;
    private Byte[] _variableValue;
    public static string Name;
    public string RequestName { get; }
    public string VariableName { get; }
    public string VariableValue { get; }
    protected int BufferCapacity { get; }
    public EnvironmentVariableRequestInfo(string variableName, string variableValue);
    public virtual string get_RequestName();
    public string get_VariableName();
    public string get_VariableValue();
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Messages.Connection.ExecRequestInfo : RequestInfo {
    private Byte[] _command;
    public static string Name;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public string RequestName { get; }
    public string Command { get; }
    public Encoding Encoding { get; private set; }
    protected int BufferCapacity { get; }
    public ExecRequestInfo(string command, Encoding encoding);
    public virtual string get_RequestName();
    public string get_Command();
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Messages.Connection.ExitSignalRequestInfo : RequestInfo {
    private Byte[] _signalName;
    private Byte[] _errorMessage;
    private Byte[] _language;
    public static string Name;
    [CompilerGeneratedAttribute]
private bool <CoreDumped>k__BackingField;
    public string RequestName { get; }
    public string SignalName { get; private set; }
    public bool CoreDumped { get; private set; }
    public string ErrorMessage { get; private set; }
    public string Language { get; private set; }
    protected int BufferCapacity { get; }
    public ExitSignalRequestInfo(string signalName, bool coreDumped, string errorMessage, string language);
    public virtual string get_RequestName();
    public string get_SignalName();
    private void set_SignalName(string value);
    [CompilerGeneratedAttribute]
public bool get_CoreDumped();
    [CompilerGeneratedAttribute]
private void set_CoreDumped(bool value);
    public string get_ErrorMessage();
    private void set_ErrorMessage(string value);
    public string get_Language();
    private void set_Language(string value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Messages.Connection.ExitStatusRequestInfo : RequestInfo {
    public static string Name;
    [CompilerGeneratedAttribute]
private UInt32 <ExitStatus>k__BackingField;
    public string RequestName { get; }
    public UInt32 ExitStatus { get; private set; }
    protected int BufferCapacity { get; }
    public ExitStatusRequestInfo(UInt32 exitStatus);
    public virtual string get_RequestName();
    [CompilerGeneratedAttribute]
public UInt32 get_ExitStatus();
    [CompilerGeneratedAttribute]
private void set_ExitStatus(UInt32 value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Messages.Connection.ForwardedTcpipChannelInfo : ChannelOpenInfo {
    public static string NAME;
    private Byte[] _connectedAddress;
    private Byte[] _originatorAddress;
    [CompilerGeneratedAttribute]
private UInt32 <ConnectedPort>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OriginatorPort>k__BackingField;
    public string ChannelType { get; }
    public string ConnectedAddress { get; private set; }
    public UInt32 ConnectedPort { get; private set; }
    public string OriginatorAddress { get; private set; }
    public UInt32 OriginatorPort { get; private set; }
    protected int BufferCapacity { get; }
    public ForwardedTcpipChannelInfo(Byte[] data);
    public ForwardedTcpipChannelInfo(string connectedAddress, UInt32 connectedPort, string originatorAddress, UInt32 originatorPort);
    public virtual string get_ChannelType();
    public string get_ConnectedAddress();
    private void set_ConnectedAddress(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_ConnectedPort();
    [CompilerGeneratedAttribute]
private void set_ConnectedPort(UInt32 value);
    public string get_OriginatorAddress();
    private void set_OriginatorAddress(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_OriginatorPort();
    [CompilerGeneratedAttribute]
private void set_OriginatorPort(UInt32 value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
public class Renci.SshNet.Messages.Connection.GlobalRequestMessage : Message {
    private Byte[] _requestName;
    [CompilerGeneratedAttribute]
private bool <WantReply>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public string RequestName { get; }
    public bool WantReply { get; private set; }
    protected int BufferCapacity { get; }
    internal GlobalRequestMessage(Byte[] requestName, bool wantReply);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    public string get_RequestName();
    [CompilerGeneratedAttribute]
public bool get_WantReply();
    [CompilerGeneratedAttribute]
private void set_WantReply(bool value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
public enum Renci.SshNet.Messages.Connection.GlobalRequestName : Enum {
    public int value__;
    public static GlobalRequestName TcpIpForward;
    public static GlobalRequestName CancelTcpIpForward;
}
public class Renci.SshNet.Messages.Connection.KeepAliveRequestInfo : RequestInfo {
    public static string Name;
    public string RequestName { get; }
    public virtual string get_RequestName();
}
internal class Renci.SshNet.Messages.Connection.PseudoTerminalRequestInfo : RequestInfo {
    public static string Name;
    [CompilerGeneratedAttribute]
private string <EnvironmentVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PixelWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PixelHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<TerminalModes, UInt32> <TerminalModeValues>k__BackingField;
    public string RequestName { get; }
    public string EnvironmentVariable { get; public set; }
    public UInt32 Columns { get; public set; }
    public UInt32 Rows { get; public set; }
    public UInt32 PixelWidth { get; public set; }
    public UInt32 PixelHeight { get; public set; }
    public IDictionary`2<TerminalModes, UInt32> TerminalModeValues { get; public set; }
    protected int BufferCapacity { get; }
    public PseudoTerminalRequestInfo(string environmentVariable, UInt32 columns, UInt32 rows, UInt32 width, UInt32 height, IDictionary`2<TerminalModes, UInt32> terminalModeValues);
    public virtual string get_RequestName();
    [CompilerGeneratedAttribute]
public string get_EnvironmentVariable();
    [CompilerGeneratedAttribute]
public void set_EnvironmentVariable(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Rows();
    [CompilerGeneratedAttribute]
public void set_Rows(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_PixelWidth();
    [CompilerGeneratedAttribute]
public void set_PixelWidth(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_PixelHeight();
    [CompilerGeneratedAttribute]
public void set_PixelHeight(UInt32 value);
    [CompilerGeneratedAttribute]
public IDictionary`2<TerminalModes, UInt32> get_TerminalModeValues();
    [CompilerGeneratedAttribute]
public void set_TerminalModeValues(IDictionary`2<TerminalModes, UInt32> value);
    protected virtual int get_BufferCapacity();
    protected virtual void SaveData();
}
public class Renci.SshNet.Messages.Connection.RequestFailureMessage : Message {
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
public abstract class Renci.SshNet.Messages.Connection.RequestInfo : SshData {
    [CompilerGeneratedAttribute]
private bool <WantReply>k__BackingField;
    public string RequestName { get; }
    public bool WantReply { get; protected set; }
    protected int BufferCapacity { get; }
    public abstract virtual string get_RequestName();
    [CompilerGeneratedAttribute]
public bool get_WantReply();
    [CompilerGeneratedAttribute]
protected void set_WantReply(bool value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
public class Renci.SshNet.Messages.Connection.RequestSuccessMessage : Message {
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <BoundPort>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public Nullable`1<UInt32> BoundPort { get; private set; }
    protected int BufferCapacity { get; }
    public RequestSuccessMessage(UInt32 boundPort);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_BoundPort();
    [CompilerGeneratedAttribute]
private void set_BoundPort(Nullable`1<UInt32> value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
internal class Renci.SshNet.Messages.Connection.SessionChannelOpenInfo : ChannelOpenInfo {
    public static string Name;
    public string ChannelType { get; }
    public SessionChannelOpenInfo(Byte[] data);
    public virtual string get_ChannelType();
}
internal class Renci.SshNet.Messages.Connection.ShellRequestInfo : RequestInfo {
    public static string Name;
    public string RequestName { get; }
    public virtual string get_RequestName();
}
internal class Renci.SshNet.Messages.Connection.SignalRequestInfo : RequestInfo {
    private Byte[] _signalName;
    public static string Name;
    public string RequestName { get; }
    public string SignalName { get; private set; }
    protected int BufferCapacity { get; }
    public SignalRequestInfo(string signalName);
    public virtual string get_RequestName();
    public string get_SignalName();
    private void set_SignalName(string value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Messages.Connection.SubsystemRequestInfo : RequestInfo {
    private Byte[] _subsystemName;
    public static string Name;
    public string RequestName { get; }
    public string SubsystemName { get; private set; }
    protected int BufferCapacity { get; }
    public SubsystemRequestInfo(string subsystem);
    public virtual string get_RequestName();
    public string get_SubsystemName();
    private void set_SubsystemName(string value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Messages.Connection.TcpIpForwardGlobalRequestMessage : GlobalRequestMessage {
    private Byte[] _addressToBind;
    [CompilerGeneratedAttribute]
private UInt32 <PortToBind>k__BackingField;
    public string AddressToBind { get; private set; }
    public UInt32 PortToBind { get; private set; }
    protected int BufferCapacity { get; }
    public TcpIpForwardGlobalRequestMessage(string addressToBind, UInt32 portToBind);
    public string get_AddressToBind();
    private void set_AddressToBind(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_PortToBind();
    [CompilerGeneratedAttribute]
private void set_PortToBind(UInt32 value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Messages.Connection.UnknownRequestInfo : RequestInfo {
    [CompilerGeneratedAttribute]
private string <RequestName>k__BackingField;
    public string RequestName { get; }
    internal UnknownRequestInfo(string requestName);
    [CompilerGeneratedAttribute]
public virtual string get_RequestName();
}
internal class Renci.SshNet.Messages.Connection.WindowChangeRequestInfo : RequestInfo {
    public static string Name;
    [CompilerGeneratedAttribute]
private UInt32 <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Height>k__BackingField;
    public string RequestName { get; }
    public UInt32 Columns { get; private set; }
    public UInt32 Rows { get; private set; }
    public UInt32 Width { get; private set; }
    public UInt32 Height { get; private set; }
    protected int BufferCapacity { get; }
    public WindowChangeRequestInfo(UInt32 columns, UInt32 rows, UInt32 width, UInt32 height);
    public virtual string get_RequestName();
    [CompilerGeneratedAttribute]
public UInt32 get_Columns();
    [CompilerGeneratedAttribute]
private void set_Columns(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Rows();
    [CompilerGeneratedAttribute]
private void set_Rows(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Width();
    [CompilerGeneratedAttribute]
private void set_Width(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(UInt32 value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Messages.Connection.X11ChannelOpenInfo : ChannelOpenInfo {
    private Byte[] _originatorAddress;
    public static string Name;
    [CompilerGeneratedAttribute]
private UInt32 <OriginatorPort>k__BackingField;
    public string ChannelType { get; }
    public string OriginatorAddress { get; private set; }
    public UInt32 OriginatorPort { get; private set; }
    protected int BufferCapacity { get; }
    public X11ChannelOpenInfo(Byte[] data);
    public X11ChannelOpenInfo(string originatorAddress, UInt32 originatorPort);
    public virtual string get_ChannelType();
    public string get_OriginatorAddress();
    private void set_OriginatorAddress(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_OriginatorPort();
    [CompilerGeneratedAttribute]
private void set_OriginatorPort(UInt32 value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Messages.Connection.X11ForwardingRequestInfo : RequestInfo {
    private Byte[] _authenticationProtocol;
    public static string Name;
    [CompilerGeneratedAttribute]
private bool <IsSingleConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <AuthenticationCookie>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ScreenNumber>k__BackingField;
    public string RequestName { get; }
    public bool IsSingleConnection { get; public set; }
    public string AuthenticationProtocol { get; private set; }
    public Byte[] AuthenticationCookie { get; public set; }
    public UInt32 ScreenNumber { get; public set; }
    protected int BufferCapacity { get; }
    public X11ForwardingRequestInfo(bool isSingleConnection, string protocol, Byte[] cookie, UInt32 screenNumber);
    public virtual string get_RequestName();
    [CompilerGeneratedAttribute]
public bool get_IsSingleConnection();
    [CompilerGeneratedAttribute]
public void set_IsSingleConnection(bool value);
    public string get_AuthenticationProtocol();
    private void set_AuthenticationProtocol(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_AuthenticationCookie();
    [CompilerGeneratedAttribute]
public void set_AuthenticationCookie(Byte[] value);
    [CompilerGeneratedAttribute]
public UInt32 get_ScreenNumber();
    [CompilerGeneratedAttribute]
public void set_ScreenNumber(UInt32 value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Messages.Connection.XonXoffRequestInfo : RequestInfo {
    public static string Name;
    [CompilerGeneratedAttribute]
private bool <ClientCanDo>k__BackingField;
    public string RequestName { get; }
    public bool ClientCanDo { get; public set; }
    protected int BufferCapacity { get; }
    public XonXoffRequestInfo(bool clientCanDo);
    public virtual string get_RequestName();
    [CompilerGeneratedAttribute]
public bool get_ClientCanDo();
    [CompilerGeneratedAttribute]
public void set_ClientCanDo(bool value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
public abstract class Renci.SshNet.Messages.Message : SshData {
    public string MessageName { get; }
    public byte MessageNumber { get; }
    protected int BufferCapacity { get; }
    public abstract virtual string get_MessageName();
    public abstract virtual byte get_MessageNumber();
    protected virtual int get_BufferCapacity();
    protected virtual void WriteBytes(SshDataStream stream);
    internal Byte[] GetPacket(byte paddingMultiplier, Compressor compressor, bool excludePacketLengthFieldWhenPadding);
    private static UInt32 GetPacketDataLength(int messageLength, byte paddingLength);
    private static byte GetPaddingLength(byte paddingMultiplier, long packetLength);
    public virtual string ToString();
    internal abstract virtual void Process(Session session);
}
public enum Renci.SshNet.Messages.ServiceName : Enum {
    public int value__;
    public static ServiceName UserAuthentication;
    public static ServiceName Connection;
}
public class Renci.SshNet.Messages.Transport.DebugMessage : Message {
    private Byte[] _message;
    private Byte[] _language;
    [CompilerGeneratedAttribute]
private bool <IsAlwaysDisplay>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public bool IsAlwaysDisplay { get; private set; }
    public string Message { get; }
    public string Language { get; }
    protected int BufferCapacity { get; }
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public bool get_IsAlwaysDisplay();
    [CompilerGeneratedAttribute]
private void set_IsAlwaysDisplay(bool value);
    public string get_Message();
    public string get_Language();
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
public class Renci.SshNet.Messages.Transport.DisconnectMessage : Message {
    private Byte[] _description;
    private Byte[] _language;
    [CompilerGeneratedAttribute]
private DisconnectReason <ReasonCode>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public DisconnectReason ReasonCode { get; private set; }
    public string Description { get; private set; }
    public string Language { get; private set; }
    protected int BufferCapacity { get; }
    public DisconnectMessage(DisconnectReason reasonCode, string message);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public DisconnectReason get_ReasonCode();
    [CompilerGeneratedAttribute]
private void set_ReasonCode(DisconnectReason value);
    public string get_Description();
    private void set_Description(string value);
    public string get_Language();
    private void set_Language(string value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
public enum Renci.SshNet.Messages.Transport.DisconnectReason : Enum {
    public int value__;
    public static DisconnectReason None;
    public static DisconnectReason HostNotAllowedToConnect;
    public static DisconnectReason ProtocolError;
    public static DisconnectReason KeyExchangeFailed;
    public static DisconnectReason Reserved;
    public static DisconnectReason MacError;
    public static DisconnectReason CompressionError;
    public static DisconnectReason ServiceNotAvailable;
    public static DisconnectReason ProtocolVersionNotSupported;
    public static DisconnectReason HostKeyNotVerifiable;
    public static DisconnectReason ConnectionLost;
    public static DisconnectReason ByApplication;
    public static DisconnectReason TooManyConnections;
    public static DisconnectReason AuthenticationCanceledByUser;
    public static DisconnectReason NoMoreAuthenticationMethodsAvailable;
    public static DisconnectReason IllegalUserName;
}
public class Renci.SshNet.Messages.Transport.IgnoreMessage : Message {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public Byte[] Data { get; private set; }
    protected int BufferCapacity { get; }
    public IgnoreMessage(Byte[] data);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
public interface Renci.SshNet.Messages.Transport.IKeyExchangedAllowed {
}
public class Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeGroup : Message {
    private Byte[] _safePrime;
    private Byte[] _subGroup;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public BigInteger SafePrime { get; }
    public BigInteger SubGroup { get; }
    protected int BufferCapacity { get; }
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    public BigInteger get_SafePrime();
    public BigInteger get_SubGroup();
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
internal class Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeInit : Message {
    [CompilerGeneratedAttribute]
private Byte[] <E>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public Byte[] E { get; private set; }
    protected int BufferCapacity { get; }
    public KeyExchangeDhGroupExchangeInit(Byte[] clientExchangeValue);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public Byte[] get_E();
    [CompilerGeneratedAttribute]
private void set_E(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
internal class Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeReply : Message {
    [CompilerGeneratedAttribute]
private Byte[] <HostKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <F>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Signature>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public Byte[] HostKey { get; private set; }
    public Byte[] F { get; private set; }
    public Byte[] Signature { get; private set; }
    protected int BufferCapacity { get; }
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public Byte[] get_HostKey();
    [CompilerGeneratedAttribute]
private void set_HostKey(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_F();
    [CompilerGeneratedAttribute]
private void set_F(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Signature();
    [CompilerGeneratedAttribute]
private void set_Signature(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
internal class Renci.SshNet.Messages.Transport.KeyExchangeDhGroupExchangeRequest : Message {
    [CompilerGeneratedAttribute]
private UInt32 <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Preferred>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Maximum>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public UInt32 Minimum { get; private set; }
    public UInt32 Preferred { get; private set; }
    public UInt32 Maximum { get; private set; }
    protected int BufferCapacity { get; }
    public KeyExchangeDhGroupExchangeRequest(UInt32 minimum, UInt32 preferred, UInt32 maximum);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public UInt32 get_Minimum();
    [CompilerGeneratedAttribute]
private void set_Minimum(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Preferred();
    [CompilerGeneratedAttribute]
private void set_Preferred(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Maximum();
    [CompilerGeneratedAttribute]
private void set_Maximum(UInt32 value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
internal class Renci.SshNet.Messages.Transport.KeyExchangeDhInitMessage : Message {
    [CompilerGeneratedAttribute]
private Byte[] <E>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public Byte[] E { get; private set; }
    protected int BufferCapacity { get; }
    public KeyExchangeDhInitMessage(Byte[] clientExchangeValue);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public Byte[] get_E();
    [CompilerGeneratedAttribute]
private void set_E(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
public class Renci.SshNet.Messages.Transport.KeyExchangeDhReplyMessage : Message {
    [CompilerGeneratedAttribute]
private Byte[] <HostKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <F>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Signature>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public Byte[] HostKey { get; private set; }
    public Byte[] F { get; private set; }
    public Byte[] Signature { get; private set; }
    protected int BufferCapacity { get; }
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public Byte[] get_HostKey();
    [CompilerGeneratedAttribute]
private void set_HostKey(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_F();
    [CompilerGeneratedAttribute]
private void set_F(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Signature();
    [CompilerGeneratedAttribute]
private void set_Signature(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
internal class Renci.SshNet.Messages.Transport.KeyExchangeEcdhInitMessage : Message {
    [CompilerGeneratedAttribute]
private Byte[] <QC>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public Byte[] QC { get; private set; }
    protected int BufferCapacity { get; }
    public KeyExchangeEcdhInitMessage(Byte[] q);
    public KeyExchangeEcdhInitMessage(BigInteger d, BigInteger q);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public Byte[] get_QC();
    [CompilerGeneratedAttribute]
private void set_QC(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
public class Renci.SshNet.Messages.Transport.KeyExchangeEcdhReplyMessage : Message {
    [CompilerGeneratedAttribute]
private Byte[] <KS>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <QS>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Signature>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public Byte[] KS { get; private set; }
    public Byte[] QS { get; private set; }
    public Byte[] Signature { get; private set; }
    protected int BufferCapacity { get; }
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public Byte[] get_KS();
    [CompilerGeneratedAttribute]
private void set_KS(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_QS();
    [CompilerGeneratedAttribute]
private void set_QS(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Signature();
    [CompilerGeneratedAttribute]
private void set_Signature(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
public class Renci.SshNet.Messages.Transport.KeyExchangeInitMessage : Message {
    [CompilerGeneratedAttribute]
private Byte[] <Cookie>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <KeyExchangeAlgorithms>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ServerHostKeyAlgorithms>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <EncryptionAlgorithmsClientToServer>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <EncryptionAlgorithmsServerToClient>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <MacAlgorithmsClientToServer>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <MacAlgorithmsServerToClient>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CompressionAlgorithmsClientToServer>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CompressionAlgorithmsServerToClient>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LanguagesClientToServer>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LanguagesServerToClient>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FirstKexPacketFollows>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Reserved>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public Byte[] Cookie { get; private set; }
    public String[] KeyExchangeAlgorithms { get; public set; }
    public String[] ServerHostKeyAlgorithms { get; public set; }
    public String[] EncryptionAlgorithmsClientToServer { get; public set; }
    public String[] EncryptionAlgorithmsServerToClient { get; public set; }
    public String[] MacAlgorithmsClientToServer { get; public set; }
    public String[] MacAlgorithmsServerToClient { get; public set; }
    public String[] CompressionAlgorithmsClientToServer { get; public set; }
    public String[] CompressionAlgorithmsServerToClient { get; public set; }
    public String[] LanguagesClientToServer { get; public set; }
    public String[] LanguagesServerToClient { get; public set; }
    public bool FirstKexPacketFollows { get; public set; }
    public UInt32 Reserved { get; public set; }
    protected int BufferCapacity { get; }
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public Byte[] get_Cookie();
    [CompilerGeneratedAttribute]
private void set_Cookie(Byte[] value);
    [CompilerGeneratedAttribute]
public String[] get_KeyExchangeAlgorithms();
    [CompilerGeneratedAttribute]
public void set_KeyExchangeAlgorithms(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ServerHostKeyAlgorithms();
    [CompilerGeneratedAttribute]
public void set_ServerHostKeyAlgorithms(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_EncryptionAlgorithmsClientToServer();
    [CompilerGeneratedAttribute]
public void set_EncryptionAlgorithmsClientToServer(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_EncryptionAlgorithmsServerToClient();
    [CompilerGeneratedAttribute]
public void set_EncryptionAlgorithmsServerToClient(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_MacAlgorithmsClientToServer();
    [CompilerGeneratedAttribute]
public void set_MacAlgorithmsClientToServer(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_MacAlgorithmsServerToClient();
    [CompilerGeneratedAttribute]
public void set_MacAlgorithmsServerToClient(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_CompressionAlgorithmsClientToServer();
    [CompilerGeneratedAttribute]
public void set_CompressionAlgorithmsClientToServer(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_CompressionAlgorithmsServerToClient();
    [CompilerGeneratedAttribute]
public void set_CompressionAlgorithmsServerToClient(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_LanguagesClientToServer();
    [CompilerGeneratedAttribute]
public void set_LanguagesClientToServer(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_LanguagesServerToClient();
    [CompilerGeneratedAttribute]
public void set_LanguagesServerToClient(String[] value);
    [CompilerGeneratedAttribute]
public bool get_FirstKexPacketFollows();
    [CompilerGeneratedAttribute]
public void set_FirstKexPacketFollows(bool value);
    [CompilerGeneratedAttribute]
public UInt32 get_Reserved();
    [CompilerGeneratedAttribute]
public void set_Reserved(UInt32 value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
public class Renci.SshNet.Messages.Transport.NewKeysMessage : Message {
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
public class Renci.SshNet.Messages.Transport.ServiceAcceptMessage : Message {
    [CompilerGeneratedAttribute]
private ServiceName <ServiceName>k__BackingField;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public ServiceName ServiceName { get; private set; }
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    [CompilerGeneratedAttribute]
public ServiceName get_ServiceName();
    [CompilerGeneratedAttribute]
private void set_ServiceName(ServiceName value);
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
public class Renci.SshNet.Messages.Transport.ServiceRequestMessage : Message {
    private Byte[] _serviceName;
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public ServiceName ServiceName { get; }
    protected int BufferCapacity { get; }
    public ServiceRequestMessage(ServiceName serviceName);
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    public ServiceName get_ServiceName();
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
public class Renci.SshNet.Messages.Transport.UnimplementedMessage : Message {
    public string MessageName { get; }
    public byte MessageNumber { get; }
    public virtual string get_MessageName();
    public virtual byte get_MessageNumber();
    protected virtual void LoadData();
    protected virtual void SaveData();
    internal virtual void Process(Session session);
}
internal interface Renci.SshNet.NetConf.INetConfSession {
    public XmlDocument ServerCapabilities { get; }
    public XmlDocument ClientCapabilities { get; }
    public abstract virtual XmlDocument get_ServerCapabilities();
    public abstract virtual XmlDocument get_ClientCapabilities();
    public abstract virtual XmlDocument SendReceiveRpc(XmlDocument rpc, bool automaticMessageIdHandling);
}
internal class Renci.SshNet.NetConf.NetConfSession : SubsystemSession {
    private static string Prompt;
    private static string LengthPattern;
    private static string ReplyPattern;
    private StringBuilder _data;
    private bool _usingFramingProtocol;
    private EventWaitHandle _serverCapabilitiesConfirmed;
    private EventWaitHandle _rpcReplyReceived;
    private StringBuilder _rpcReply;
    private int _messageId;
    private static Regex LengthRegex;
    private static Regex ReplyRegex;
    [CompilerGeneratedAttribute]
private XmlDocument <ServerCapabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDocument <ClientCapabilities>k__BackingField;
    public XmlDocument ServerCapabilities { get; private set; }
    public XmlDocument ClientCapabilities { get; private set; }
    public NetConfSession(ISession session, int operationTimeout);
    private static NetConfSession();
    [CompilerGeneratedAttribute]
public sealed virtual XmlDocument get_ServerCapabilities();
    [CompilerGeneratedAttribute]
private void set_ServerCapabilities(XmlDocument value);
    [CompilerGeneratedAttribute]
public sealed virtual XmlDocument get_ClientCapabilities();
    [CompilerGeneratedAttribute]
private void set_ClientCapabilities(XmlDocument value);
    public sealed virtual XmlDocument SendReceiveRpc(XmlDocument rpc, bool automaticMessageIdHandling);
    protected virtual void OnChannelOpen();
    protected virtual void OnDataReceived(Byte[] data);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Renci.SshNet.NetConfClient : BaseClient {
    private int _operationTimeout;
    [NullableAttribute("2")]
private INetConfSession _netConfSession;
    [CompilerGeneratedAttribute]
private bool <AutomaticMessageIdHandling>k__BackingField;
    public TimeSpan OperationTimeout { get; public set; }
    [NullableAttribute("2")]
internal INetConfSession NetConfSession { get; }
    public XmlDocument ServerCapabilities { get; }
    public XmlDocument ClientCapabilities { get; }
    public bool AutomaticMessageIdHandling { get; public set; }
    public NetConfClient(ConnectionInfo connectionInfo);
    public NetConfClient(string host, int port, string username, string password);
    public NetConfClient(string host, string username, string password);
    public NetConfClient(string host, int port, string username, IPrivateKeySource[] keyFiles);
    public NetConfClient(string host, string username, IPrivateKeySource[] keyFiles);
    private NetConfClient(ConnectionInfo connectionInfo, bool ownsConnectionInfo);
    internal NetConfClient(ConnectionInfo connectionInfo, bool ownsConnectionInfo, IServiceFactory serviceFactory);
    public TimeSpan get_OperationTimeout();
    public void set_OperationTimeout(TimeSpan value);
    [NullableContextAttribute("2")]
internal INetConfSession get_NetConfSession();
    public XmlDocument get_ServerCapabilities();
    public XmlDocument get_ClientCapabilities();
    [CompilerGeneratedAttribute]
public bool get_AutomaticMessageIdHandling();
    [CompilerGeneratedAttribute]
public void set_AutomaticMessageIdHandling(bool value);
    public XmlDocument SendReceiveRpc(XmlDocument rpc);
    public XmlDocument SendReceiveRpc(string xml);
    public XmlDocument SendCloseRpc();
    protected virtual void OnConnected();
    protected virtual void OnDisconnecting();
    protected virtual void Dispose(bool disposing);
    private INetConfSession CreateAndConnectNetConfSession();
}
public class Renci.SshNet.NoneAuthenticationMethod : AuthenticationMethod {
    private AuthenticationResult _authenticationResult;
    private EventWaitHandle _authenticationCompleted;
    private bool _isDisposed;
    public string Name { get; }
    public NoneAuthenticationMethod(string username);
    public virtual string get_Name();
    public virtual AuthenticationResult Authenticate(Session session);
    private void Session_UserAuthenticationSuccessReceived(object sender, MessageEventArgs`1<SuccessMessage> e);
    private void Session_UserAuthenticationFailureReceived(object sender, MessageEventArgs`1<FailureMessage> e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class Renci.SshNet.PasswordAuthenticationMethod : AuthenticationMethod {
    private RequestMessagePassword _requestMessage;
    private Byte[] _password;
    private AuthenticationResult _authenticationResult;
    private Session _session;
    private EventWaitHandle _authenticationCompleted;
    private Exception _exception;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private EventHandler`1<AuthenticationPasswordChangeEventArgs> PasswordExpired;
    public string Name { get; }
    internal Byte[] Password { get; }
    public PasswordAuthenticationMethod(string username, string password);
    public PasswordAuthenticationMethod(string username, Byte[] password);
    public virtual string get_Name();
    internal Byte[] get_Password();
    [CompilerGeneratedAttribute]
public void add_PasswordExpired(EventHandler`1<AuthenticationPasswordChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PasswordExpired(EventHandler`1<AuthenticationPasswordChangeEventArgs> value);
    public virtual AuthenticationResult Authenticate(Session session);
    private void Session_UserAuthenticationSuccessReceived(object sender, MessageEventArgs`1<SuccessMessage> e);
    private void Session_UserAuthenticationFailureReceived(object sender, MessageEventArgs`1<FailureMessage> e);
    private void Session_UserAuthenticationPasswordChangeRequiredReceived(object sender, MessageEventArgs`1<PasswordChangeRequiredMessage> e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
private void <Session_UserAuthenticationPasswordChangeRequiredReceived>b__19_0();
}
public class Renci.SshNet.PasswordConnectionInfo : ConnectionInfo {
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private EventHandler`1<AuthenticationPasswordChangeEventArgs> PasswordExpired;
    public PasswordConnectionInfo(string host, string username, string password);
    public PasswordConnectionInfo(string host, int port, string username, string password);
    public PasswordConnectionInfo(string host, int port, string username, string password, ProxyTypes proxyType, string proxyHost, int proxyPort);
    public PasswordConnectionInfo(string host, int port, string username, string password, ProxyTypes proxyType, string proxyHost, int proxyPort, string proxyUsername);
    public PasswordConnectionInfo(string host, string username, string password, ProxyTypes proxyType, string proxyHost, int proxyPort);
    public PasswordConnectionInfo(string host, string username, string password, ProxyTypes proxyType, string proxyHost, int proxyPort, string proxyUsername);
    public PasswordConnectionInfo(string host, string username, string password, ProxyTypes proxyType, string proxyHost, int proxyPort, string proxyUsername, string proxyPassword);
    public PasswordConnectionInfo(string host, string username, Byte[] password);
    public PasswordConnectionInfo(string host, int port, string username, Byte[] password);
    public PasswordConnectionInfo(string host, int port, string username, Byte[] password, ProxyTypes proxyType, string proxyHost, int proxyPort);
    public PasswordConnectionInfo(string host, int port, string username, Byte[] password, ProxyTypes proxyType, string proxyHost, int proxyPort, string proxyUsername);
    public PasswordConnectionInfo(string host, string username, Byte[] password, ProxyTypes proxyType, string proxyHost, int proxyPort);
    public PasswordConnectionInfo(string host, string username, Byte[] password, ProxyTypes proxyType, string proxyHost, int proxyPort, string proxyUsername);
    public PasswordConnectionInfo(string host, string username, Byte[] password, ProxyTypes proxyType, string proxyHost, int proxyPort, string proxyUsername, string proxyPassword);
    public PasswordConnectionInfo(string host, int port, string username, Byte[] password, ProxyTypes proxyType, string proxyHost, int proxyPort, string proxyUsername, string proxyPassword);
    [CompilerGeneratedAttribute]
public void add_PasswordExpired(EventHandler`1<AuthenticationPasswordChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PasswordExpired(EventHandler`1<AuthenticationPasswordChangeEventArgs> value);
    private void AuthenticationMethod_PasswordExpired(object sender, AuthenticationPasswordChangeEventArgs e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class Renci.SshNet.PrivateKeyAuthenticationMethod : AuthenticationMethod {
    private AuthenticationResult _authenticationResult;
    private EventWaitHandle _authenticationCompleted;
    private bool _isSignatureRequired;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private ICollection`1<IPrivateKeySource> <KeyFiles>k__BackingField;
    public string Name { get; }
    public ICollection`1<IPrivateKeySource> KeyFiles { get; private set; }
    public PrivateKeyAuthenticationMethod(string username, IPrivateKeySource[] keyFiles);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public ICollection`1<IPrivateKeySource> get_KeyFiles();
    [CompilerGeneratedAttribute]
private void set_KeyFiles(ICollection`1<IPrivateKeySource> value);
    public virtual AuthenticationResult Authenticate(Session session);
    private void Session_UserAuthenticationSuccessReceived(object sender, MessageEventArgs`1<SuccessMessage> e);
    private void Session_UserAuthenticationFailureReceived(object sender, MessageEventArgs`1<FailureMessage> e);
    private void Session_UserAuthenticationPublicKeyReceived(object sender, MessageEventArgs`1<PublicKeyMessage> e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class Renci.SshNet.PrivateKeyConnectionInfo : ConnectionInfo {
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private ICollection`1<IPrivateKeySource> <KeyFiles>k__BackingField;
    public ICollection`1<IPrivateKeySource> KeyFiles { get; private set; }
    public PrivateKeyConnectionInfo(string host, string username, PrivateKeyFile[] keyFiles);
    public PrivateKeyConnectionInfo(string host, int port, string username, IPrivateKeySource[] keyFiles);
    public PrivateKeyConnectionInfo(string host, int port, string username, ProxyTypes proxyType, string proxyHost, int proxyPort, IPrivateKeySource[] keyFiles);
    public PrivateKeyConnectionInfo(string host, int port, string username, ProxyTypes proxyType, string proxyHost, int proxyPort, string proxyUsername, IPrivateKeySource[] keyFiles);
    public PrivateKeyConnectionInfo(string host, string username, ProxyTypes proxyType, string proxyHost, int proxyPort, IPrivateKeySource[] keyFiles);
    public PrivateKeyConnectionInfo(string host, string username, ProxyTypes proxyType, string proxyHost, int proxyPort, string proxyUsername, IPrivateKeySource[] keyFiles);
    public PrivateKeyConnectionInfo(string host, string username, ProxyTypes proxyType, string proxyHost, int proxyPort, string proxyUsername, string proxyPassword, IPrivateKeySource[] keyFiles);
    public PrivateKeyConnectionInfo(string host, int port, string username, ProxyTypes proxyType, string proxyHost, int proxyPort, string proxyUsername, string proxyPassword, IPrivateKeySource[] keyFiles);
    [CompilerGeneratedAttribute]
public ICollection`1<IPrivateKeySource> get_KeyFiles();
    [CompilerGeneratedAttribute]
private void set_KeyFiles(ICollection`1<IPrivateKeySource> value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class Renci.SshNet.PrivateKeyFile : object {
    private static string PrivateKeyPattern;
    private static Regex PrivateKeyRegex;
    private List`1<HostAlgorithm> _hostAlgorithms;
    private Key _key;
    private bool _isDisposed;
    public IReadOnlyCollection`1<HostAlgorithm> HostKeyAlgorithms { get; }
    public Key Key { get; }
    public PrivateKeyFile(Key key);
    public PrivateKeyFile(Stream privateKey);
    public PrivateKeyFile(string fileName);
    public PrivateKeyFile(string fileName, string passPhrase);
    public PrivateKeyFile(Stream privateKey, string passPhrase);
    private static PrivateKeyFile();
    public sealed virtual IReadOnlyCollection`1<HostAlgorithm> get_HostKeyAlgorithms();
    public Key get_Key();
    private void Open(Stream privateKey, string passPhrase);
    private static Byte[] GetCipherKey(string passphrase, int length);
    private static Byte[] DecryptKey(CipherInfo cipherInfo, Byte[] cipherData, string passPhrase, Byte[] binarySalt);
    private static Key ParseOpenSshV1Key(Byte[] keyFileData, string passPhrase);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public enum Renci.SshNet.ProxyTypes : Enum {
    public int value__;
    public static ProxyTypes None;
    public static ProxyTypes Socks4;
    public static ProxyTypes Socks5;
    public static ProxyTypes Http;
}
internal class Renci.SshNet.RemotePathDoubleQuoteTransformation : object {
    public sealed virtual string Transform(string path);
}
internal class Renci.SshNet.RemotePathNoneTransformation : object {
    public sealed virtual string Transform(string path);
}
internal class Renci.SshNet.RemotePathShellQuoteTransformation : object {
    public sealed virtual string Transform(string path);
}
public static class Renci.SshNet.RemotePathTransformation : object {
    private static IRemotePathTransformation ShellQuoteTransformation;
    private static IRemotePathTransformation NoneTransformation;
    private static IRemotePathTransformation DoubleQuoteTransformation;
    public static IRemotePathTransformation ShellQuote { get; }
    public static IRemotePathTransformation None { get; }
    public static IRemotePathTransformation DoubleQuote { get; }
    private static RemotePathTransformation();
    public static IRemotePathTransformation get_ShellQuote();
    public static IRemotePathTransformation get_None();
    public static IRemotePathTransformation get_DoubleQuote();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Renci.SshNet.ScpClient : BaseClient {
    private static string Message;
    private static string FileInfoPattern;
    private static string DirectoryInfoPattern;
    private static string TimestampPattern;
    private static Regex FileInfoRegex;
    private static Regex DirectoryInfoRegex;
    private static Regex TimestampRegex;
    private static Byte[] SuccessConfirmationCode;
    private static Byte[] ErrorConfirmationCode;
    private IRemotePathTransformation _remotePathTransformation;
    private TimeSpan _operationTimeout;
    [CompilerGeneratedAttribute]
private UInt32 <BufferSize>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ScpDownloadEventArgs> Downloading;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ScpUploadEventArgs> Uploading;
    public TimeSpan OperationTimeout { get; public set; }
    public UInt32 BufferSize { get; public set; }
    public IRemotePathTransformation RemotePathTransformation { get; public set; }
    public ScpClient(ConnectionInfo connectionInfo);
    public ScpClient(string host, int port, string username, string password);
    public ScpClient(string host, string username, string password);
    public ScpClient(string host, int port, string username, IPrivateKeySource[] keyFiles);
    public ScpClient(string host, string username, IPrivateKeySource[] keyFiles);
    private ScpClient(ConnectionInfo connectionInfo, bool ownsConnectionInfo);
    internal ScpClient(ConnectionInfo connectionInfo, bool ownsConnectionInfo, IServiceFactory serviceFactory);
    private static ScpClient();
    public TimeSpan get_OperationTimeout();
    public void set_OperationTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public UInt32 get_BufferSize();
    [CompilerGeneratedAttribute]
public void set_BufferSize(UInt32 value);
    public IRemotePathTransformation get_RemotePathTransformation();
    public void set_RemotePathTransformation(IRemotePathTransformation value);
    [CompilerGeneratedAttribute]
public void add_Downloading(EventHandler`1<ScpDownloadEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Downloading(EventHandler`1<ScpDownloadEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Uploading(EventHandler`1<ScpUploadEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Uploading(EventHandler`1<ScpUploadEventArgs> value);
    public void Upload(Stream source, string path);
    public void Upload(FileInfo fileInfo, string path);
    public void Upload(DirectoryInfo directoryInfo, string path);
    public void Download(string filename, FileInfo fileInfo);
    public void Download(string directoryName, DirectoryInfo directoryInfo);
    public void Download(string filename, Stream destination);
    private static void SendData(IChannel channel, Byte[] buffer, int length);
    private static void SendData(IChannel channel, Byte[] buffer);
    private static int ReadByte(Stream stream);
    private static SshException SecureExecutionRequestRejectedException();
    private void UploadFileModeAndName(IChannelSession channel, Stream input, long fileSize, string serverFileName);
    private void UploadFileContent(IChannelSession channel, Stream input, Stream source, string remoteFileName);
    private void RaiseDownloadingEvent(string filename, long size, long downloaded);
    private void RaiseUploadingEvent(string filename, long size, long uploaded);
    private static void SendSuccessConfirmation(IChannel channel);
    private void SendErrorConfirmation(IChannel channel, string message);
    private void CheckReturnCode(Stream input);
    private void SendData(IChannel channel, string command);
    private string ReadString(Stream stream);
    private void UploadTimes(IChannelSession channel, Stream input, FileSystemInfo fileOrDirectory);
    private void UploadDirectoryContent(IChannelSession channel, Stream input, DirectoryInfo directoryInfo);
    private void UploadDirectoryModeAndName(IChannelSession channel, Stream input, string directoryName);
    private void InternalDownload(IChannel channel, Stream input, Stream output, string filename, long length);
    private void InternalDownload(IChannelSession channel, Stream input, FileSystemInfo fileSystemInfo);
}
public abstract class Renci.SshNet.Security.Algorithm : object {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public class Renci.SshNet.Security.CertificateHostAlgorithm : HostAlgorithm {
    public Byte[] Data { get; }
    public CertificateHostAlgorithm(string name);
    public virtual Byte[] get_Data();
    public virtual Byte[] Sign(Byte[] data);
    public virtual bool VerifySignature(Byte[] data, Byte[] signature);
}
internal static class Renci.SshNet.Security.Chaos.NaCl.CryptoBytes : object {
    internal static bool ConstantTimeEquals(Byte[] x, Byte[] y);
    internal static bool ConstantTimeEquals(ArraySegment`1<byte> x, ArraySegment`1<byte> y);
    internal static bool ConstantTimeEquals(Byte[] x, int xOffset, Byte[] y, int yOffset, int length);
    private static UInt32 InternalConstantTimeEquals(Byte[] x, int xOffset, Byte[] y, int yOffset, int length);
    internal static void Wipe(Byte[] data);
    internal static void Wipe(Byte[] data, int offset, int count);
    internal static void Wipe(ArraySegment`1<byte> data);
    internal static void InternalWipe(Byte[] data, int offset, int count);
    internal static void InternalWipe(T& data);
    internal static string ToHexStringUpper(Byte[] data);
    internal static string ToHexStringLower(Byte[] data);
    internal static Byte[] FromHexString(string hexString);
    internal static string ToBase64String(Byte[] data);
    internal static Byte[] FromBase64String(string s);
}
internal static class Renci.SshNet.Security.Chaos.NaCl.Ed25519 : object {
    public static int PublicKeySizeInBytes;
    public static int SignatureSizeInBytes;
    public static int ExpandedPrivateKeySizeInBytes;
    public static int PrivateKeySeedSizeInBytes;
    public static int SharedKeySizeInBytes;
    private static Ed25519();
    public static bool Verify(ArraySegment`1<byte> signature, ArraySegment`1<byte> message, ArraySegment`1<byte> publicKey);
    public static bool Verify(Byte[] signature, Byte[] message, Byte[] publicKey);
    public static void Sign(ArraySegment`1<byte> signature, ArraySegment`1<byte> message, ArraySegment`1<byte> expandedPrivateKey);
    public static Byte[] Sign(Byte[] message, Byte[] expandedPrivateKey);
    public static Byte[] PublicKeyFromSeed(Byte[] privateKeySeed);
    public static Byte[] ExpandedPrivateKeyFromSeed(Byte[] privateKeySeed);
    public static void KeyPairFromSeed(Byte[]& publicKey, Byte[]& expandedPrivateKey, Byte[] privateKeySeed);
    public static void KeyPairFromSeed(ArraySegment`1<byte> publicKey, ArraySegment`1<byte> expandedPrivateKey, ArraySegment`1<byte> privateKeySeed);
    [ObsoleteAttribute("Needs more testing")]
public static Byte[] KeyExchange(Byte[] publicKey, Byte[] privateKey);
    [ObsoleteAttribute("Needs more testing")]
public static void KeyExchange(ArraySegment`1<byte> sharedKey, ArraySegment`1<byte> publicKey, ArraySegment`1<byte> privateKey);
}
internal class Renci.SshNet.Security.Chaos.NaCl.Internal.Array16`1 : ValueType {
    public T x0;
    public T x1;
    public T x2;
    public T x3;
    public T x4;
    public T x5;
    public T x6;
    public T x7;
    public T x8;
    public T x9;
    public T x10;
    public T x11;
    public T x12;
    public T x13;
    public T x14;
    public T x15;
}
internal class Renci.SshNet.Security.Chaos.NaCl.Internal.Array8`1 : ValueType {
    public T x0;
    public T x1;
    public T x2;
    public T x3;
    public T x4;
    public T x5;
    public T x6;
    public T x7;
}
internal static class Renci.SshNet.Security.Chaos.NaCl.Internal.ByteIntegerConverter : object {
    internal static UInt32 LoadLittleEndian32(Byte[] buf, int offset);
    internal static void StoreLittleEndian32(Byte[] buf, int offset, UInt32 value);
    internal static ulong LoadBigEndian64(Byte[] buf, int offset);
    internal static void StoreBigEndian64(Byte[] buf, int offset, ulong value);
    internal static void Array8LoadLittleEndian32(Array8`1& output, Byte[] input, int inputOffset);
    internal static void Array16LoadBigEndian64(Array16`1& output, Byte[] input, int inputOffset);
    internal static void Array16LoadLittleEndian32(Array16`1& output, Byte[] input, int inputOffset);
    internal static void Array16StoreLittleEndian32(Byte[] output, int outputOffset, Array16`1& input);
}
internal static class Renci.SshNet.Security.Chaos.NaCl.Internal.Ed25519Ref10.Ed25519Operations : object {
    internal static void crypto_sign_keypair(Byte[] pk, int pkoffset, Byte[] sk, int skoffset, Byte[] seed, int seedoffset);
    internal static bool crypto_sign_verify(Byte[] sig, int sigoffset, Byte[] m, int moffset, int mlen, Byte[] pk, int pkoffset);
    internal static void crypto_sign2(Byte[] sig, int sigoffset, Byte[] m, int moffset, int mlen, Byte[] sk, int skoffset);
}
internal class Renci.SshNet.Security.Chaos.NaCl.Internal.Ed25519Ref10.FieldElement : ValueType {
    internal int x0;
    internal int x1;
    internal int x2;
    internal int x3;
    internal int x4;
    internal int x5;
    internal int x6;
    internal int x7;
    internal int x8;
    internal int x9;
    internal FieldElement(Int32[] elements);
}
internal static class Renci.SshNet.Security.Chaos.NaCl.Internal.Ed25519Ref10.FieldOperations : object {
    internal static void fe_0(FieldElement& h);
    internal static void fe_1(FieldElement& h);
    internal static void fe_add(FieldElement& h, FieldElement& f, FieldElement& g);
    internal static void fe_cmov(FieldElement& f, FieldElement& g, int b);
    internal static void fe_cswap(FieldElement& f, FieldElement& g, UInt32 b);
    private static long load_3(Byte[] data, int offset);
    private static long load_4(Byte[] data, int offset);
    internal static void fe_frombytes(FieldElement& h, Byte[] data, int offset);
    internal static void fe_frombytes2(FieldElement& h, Byte[] data, int offset);
    internal static void fe_invert(FieldElement& result, FieldElement& z);
    internal static int fe_isnegative(FieldElement& f);
    internal static int fe_isnonzero(FieldElement& f);
    internal static void fe_mul(FieldElement& h, FieldElement& f, FieldElement& g);
    internal static void fe_mul121666(FieldElement& h, FieldElement& f);
    internal static void fe_neg(FieldElement& h, FieldElement& f);
    internal static void fe_pow22523(FieldElement& result, FieldElement& z);
    internal static void fe_sq(FieldElement& h, FieldElement& f);
    internal static void fe_sq2(FieldElement& h, FieldElement& f);
    internal static void fe_sub(FieldElement& h, FieldElement& f, FieldElement& g);
    internal static void fe_tobytes(Byte[] s, int offset, FieldElement& h);
    internal static void fe_reduce(FieldElement& hr, FieldElement& h);
}
internal class Renci.SshNet.Security.Chaos.NaCl.Internal.Ed25519Ref10.GroupElementCached : ValueType {
    public FieldElement YplusX;
    public FieldElement YminusX;
    public FieldElement Z;
    public FieldElement T2d;
}
internal class Renci.SshNet.Security.Chaos.NaCl.Internal.Ed25519Ref10.GroupElementP1P1 : ValueType {
    public FieldElement X;
    public FieldElement Y;
    public FieldElement Z;
    public FieldElement T;
}
internal class Renci.SshNet.Security.Chaos.NaCl.Internal.Ed25519Ref10.GroupElementP2 : ValueType {
    public FieldElement X;
    public FieldElement Y;
    public FieldElement Z;
}
internal class Renci.SshNet.Security.Chaos.NaCl.Internal.Ed25519Ref10.GroupElementP3 : ValueType {
    public FieldElement X;
    public FieldElement Y;
    public FieldElement Z;
    public FieldElement T;
}
internal class Renci.SshNet.Security.Chaos.NaCl.Internal.Ed25519Ref10.GroupElementPreComp : ValueType {
    public FieldElement yplusx;
    public FieldElement yminusx;
    public FieldElement xy2d;
    public GroupElementPreComp(FieldElement yplusx, FieldElement yminusx, FieldElement xy2d);
}
internal static class Renci.SshNet.Security.Chaos.NaCl.Internal.Ed25519Ref10.GroupOperations : object {
    internal static void ge_add(GroupElementP1P1& r, GroupElementP3& p, GroupElementCached& q);
    private static void slide(SByte[] r, Byte[] a);
    internal static void ge_double_scalarmult_vartime(GroupElementP2& r, Byte[] a, GroupElementP3& A, Byte[] b);
    internal static int ge_frombytes_negate_vartime(GroupElementP3& h, Byte[] data, int offset);
    internal static void ge_madd(GroupElementP1P1& r, GroupElementP3& p, GroupElementPreComp& q);
    internal static void ge_msub(GroupElementP1P1& r, GroupElementP3& p, GroupElementPreComp& q);
    internal static void ge_p1p1_to_p2(GroupElementP2& r, GroupElementP1P1& p);
    internal static void ge_p1p1_to_p3(GroupElementP3& r, GroupElementP1P1& p);
    internal static void ge_p2_0(GroupElementP2& h);
    internal static void ge_p2_dbl(GroupElementP1P1& r, GroupElementP2& p);
    internal static void ge_p3_0(GroupElementP3& h);
    internal static void ge_p3_dbl(GroupElementP1P1& r, GroupElementP3& p);
    internal static void ge_p3_tobytes(Byte[] s, int offset, GroupElementP3& h);
    internal static void ge_p3_to_cached(GroupElementCached& r, GroupElementP3& p);
    internal static void ge_p3_to_p2(GroupElementP2& r, GroupElementP3& p);
    internal static void ge_precomp_0(GroupElementPreComp& h);
    private static byte equal(byte b, byte c);
    private static byte negative(sbyte b);
    private static void cmov(GroupElementPreComp& t, GroupElementPreComp& u, byte b);
    private static void select(GroupElementPreComp& t, int pos, sbyte b);
    internal static void ge_scalarmult_base(GroupElementP3& h, Byte[] a, int offset);
    internal static void ge_sub(GroupElementP1P1& r, GroupElementP3& p, GroupElementCached& q);
    internal static void ge_tobytes(Byte[] s, int offset, GroupElementP2& h);
}
internal static class Renci.SshNet.Security.Chaos.NaCl.Internal.Ed25519Ref10.LookupTables : object {
    internal static GroupElementPreComp[][] Base;
    internal static GroupElementPreComp[] Base2;
    internal static FieldElement d;
    internal static FieldElement d2;
    internal static FieldElement sqrtm1;
    private static LookupTables();
}
internal static class Renci.SshNet.Security.Chaos.NaCl.Internal.Ed25519Ref10.MontgomeryOperations : object {
    internal static void scalarmult(Byte[] q, int qoffset, Byte[] n, int noffset, Byte[] p, int poffset);
    internal static void scalarmult(FieldElement& q, Byte[] n, int noffset, FieldElement& p);
}
internal static class Renci.SshNet.Security.Chaos.NaCl.Internal.Ed25519Ref10.ScalarOperations : object {
    internal static void sc_clamp(Byte[] s, int offset);
    private static long load_3(Byte[] input, int offset);
    private static long load_4(Byte[] input, int offset);
    internal static void sc_muladd(Byte[] s, Byte[] a, Byte[] b, Byte[] c);
    internal static void sc_reduce(Byte[] s);
}
internal static class Renci.SshNet.Security.Chaos.NaCl.Internal.InternalAssert : object {
    internal static void Assert(bool condition, string message);
}
internal class Renci.SshNet.Security.Chaos.NaCl.Internal.Poly1305Donna : object {
    internal static void poly1305_auth(Byte[] output, int outputOffset, Byte[] m, int mStart, int mLength, Array8`1& key);
}
internal class Renci.SshNet.Security.Chaos.NaCl.Internal.Salsa.Salsa20 : object {
    public static UInt32 SalsaConst0;
    public static UInt32 SalsaConst1;
    public static UInt32 SalsaConst2;
    public static UInt32 SalsaConst3;
    internal static void HSalsa20(Byte[] output, int outputOffset, Byte[] key, int keyOffset, Byte[] nonce, int nonceOffset);
}
internal static class Renci.SshNet.Security.Chaos.NaCl.Internal.Salsa.SalsaCore : object {
    internal static void HSalsa(Array16`1& output, Array16`1& input, int rounds);
    internal static void Salsa(Array16`1& output, Array16`1& input, int rounds);
}
internal static class Renci.SshNet.Security.Chaos.NaCl.Internal.Sha512Internal : object {
    private static UInt64[] K;
    private static Sha512Internal();
    internal static void Sha512Init(Array8`1& state);
    internal static void Core(Array8`1& outputState, Array8`1& inputState, Array16`1& input);
}
internal static class Renci.SshNet.Security.Chaos.NaCl.MontgomeryCurve25519 : object {
    internal static int PublicKeySizeInBytes;
    internal static int PrivateKeySizeInBytes;
    internal static int SharedKeySizeInBytes;
    private static Byte[] _basePoint;
    private static Byte[] _zero16;
    private static MontgomeryCurve25519();
    internal static Byte[] GetPublicKey(Byte[] privateKey);
    internal static void GetPublicKey(ArraySegment`1<byte> publicKey, ArraySegment`1<byte> privateKey);
    internal static void KeyExchangeOutputHashCurve25519Paper(Byte[] sharedKey, int offset);
    internal static void KeyExchangeOutputHashNaCl(Byte[] sharedKey, int offset);
    internal static Byte[] KeyExchange(Byte[] publicKey, Byte[] privateKey);
    internal static void KeyExchange(ArraySegment`1<byte> sharedKey, ArraySegment`1<byte> publicKey, ArraySegment`1<byte> privateKey);
    internal static void EdwardsToMontgomeryX(FieldElement& montgomeryX, FieldElement& edwardsY, FieldElement& edwardsZ);
}
internal class Renci.SshNet.Security.Chaos.NaCl.Sha512 : object {
    private Array8`1<ulong> _state;
    private Byte[] _buffer;
    private ulong _totalBytes;
    public static int BlockSize;
    private static Byte[] _padding;
    private static Sha512();
    public void Init();
    public void Update(ArraySegment`1<byte> data);
    public void Update(Byte[] data, int offset, int count);
    public void Finish(ArraySegment`1<byte> output);
    public Byte[] Finish();
    internal static Byte[] Hash(Byte[] data);
    internal static Byte[] Hash(Byte[] data, int offset, int count);
}
internal class Renci.SshNet.Security.Cryptography.BCrypt : object {
    private static int GENSALT_DEFAULT_LOG2_ROUNDS;
    private static int BCRYPT_SALT_LEN;
    private static int BLOWFISH_NUM_ROUNDS;
    private static UInt32[] _POrig;
    private static UInt32[] _SOrig;
    private static UInt32[] _OpenBsdIv;
    private static UInt32[] _BfCryptCiphertext;
    private static Char[] _Base64Code;
    private static Int32[] _Index64;
    private UInt32[] _P;
    private UInt32[] _S;
    private static BCrypt();
    public static string HashString(string source);
    public static string HashString(string source, int workFactor);
    public static string HashPassword(string input);
    public static string HashPassword(string input, int workFactor);
    public static string HashPassword(string input, string salt);
    public static string GenerateSalt(int workFactor);
    public static string GenerateSalt();
    public static bool Verify(string text, string hash);
    private static string EncodeBase64(Byte[] byteArray, int length);
    private static Byte[] DecodeBase64(string encodedstring, int maximumBytes);
    private static int Char64(char character);
    private void Encipher(UInt32[] blockArray, int offset);
    private static UInt32 StreamToWord(Byte[] data, Int32& offset);
    private void InitializeKey();
    private void Key(Byte[] keyBytes);
    private void EKSKey(Byte[] saltBytes, Byte[] inputBytes);
    private Byte[] CryptRaw(Byte[] inputBytes, Byte[] saltBytes, int logRounds);
    public void Hash(Byte[] hpass, Byte[] hsalt, Byte[] output);
    public void Pbkdf(Byte[] password, Byte[] salt, int rounds, Byte[] output);
    private Byte[] AppendArrays(Byte[] b1, Byte[][] others);
}
public abstract class Renci.SshNet.Security.Cryptography.BlockCipher : SymmetricCipher {
    private CipherMode _mode;
    private CipherPadding _padding;
    private byte _blockSize;
    public byte MinimumSize { get; }
    public byte BlockSize { get; }
    protected BlockCipher(Byte[] key, byte blockSize, CipherMode mode, CipherPadding padding);
    public virtual byte get_MinimumSize();
    public byte get_BlockSize();
    public virtual Byte[] Encrypt(Byte[] input, int offset, int length);
    public virtual Byte[] Decrypt(Byte[] input, int offset, int length);
    public abstract virtual int EncryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public abstract virtual int DecryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
}
public abstract class Renci.SshNet.Security.Cryptography.Cipher : object {
    [CompilerGeneratedAttribute]
private int <TagSize>k__BackingField;
    public byte MinimumSize { get; }
    public int TagSize { get; }
    public abstract virtual byte get_MinimumSize();
    [CompilerGeneratedAttribute]
public virtual int get_TagSize();
    public Byte[] Encrypt(Byte[] input);
    public abstract virtual Byte[] Encrypt(Byte[] input, int offset, int length);
    public Byte[] Decrypt(Byte[] input);
    public abstract virtual Byte[] Decrypt(Byte[] input, int offset, int length);
}
public class Renci.SshNet.Security.Cryptography.Ciphers.AesCipher : BlockCipher {
    private BlockCipher _impl;
    public AesCipher(Byte[] key, Byte[] iv, AesCipherMode mode, bool pkcs7Padding);
    public virtual int EncryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public virtual int DecryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public virtual Byte[] Encrypt(Byte[] input, int offset, int length);
    public virtual Byte[] Decrypt(Byte[] input, int offset, int length);
    public void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public enum Renci.SshNet.Security.Cryptography.Ciphers.AesCipherMode : Enum {
    public int value__;
    public static AesCipherMode CBC;
    public static AesCipherMode ECB;
    public static AesCipherMode OFB;
    public static AesCipherMode CFB;
    public static AesCipherMode CTS;
    public static AesCipherMode CTR;
}
public class Renci.SshNet.Security.Cryptography.Ciphers.Arc4Cipher : StreamCipher {
    private static int STATE_LENGTH;
    private Byte[] _engineState;
    private int _x;
    private int _y;
    public byte MinimumSize { get; }
    public Arc4Cipher(Byte[] key, bool dischargeFirstBytes);
    public virtual byte get_MinimumSize();
    public virtual Byte[] Encrypt(Byte[] input, int offset, int length);
    public virtual Byte[] Decrypt(Byte[] input, int offset, int length);
    private int ProcessBytes(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    private void SetKey(Byte[] keyBytes);
}
public class Renci.SshNet.Security.Cryptography.Ciphers.BlowfishCipher : BlockCipher {
    private static int Rounds;
    private static int SboxSk;
    private static int PSize;
    private static UInt32[] KP;
    private static UInt32[] KS0;
    private static UInt32[] KS1;
    private static UInt32[] KS2;
    private static UInt32[] KS3;
    private UInt32[] _s0;
    private UInt32[] _s1;
    private UInt32[] _s2;
    private UInt32[] _s3;
    private UInt32[] _p;
    public BlowfishCipher(Byte[] key, CipherMode mode, CipherPadding padding);
    private static BlowfishCipher();
    public virtual int EncryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public virtual int DecryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    private UInt32 F(UInt32 x);
    private void SetKey(Byte[] key);
    private void ProcessTable(UInt32 xl, UInt32 xr, UInt32[] table);
}
public class Renci.SshNet.Security.Cryptography.Ciphers.CastCipher : BlockCipher {
    private static int MaxRounds;
    private static int RedRounds;
    private Int32[] _kr;
    private UInt32[] _km;
    private int _rounds;
    internal static UInt32[] S1;
    internal static UInt32[] S2;
    internal static UInt32[] S3;
    internal static UInt32[] S4;
    internal static UInt32[] S5;
    internal static UInt32[] S6;
    internal static UInt32[] S7;
    internal static UInt32[] S8;
    public CastCipher(Byte[] key, CipherMode mode, CipherPadding padding);
    private static CastCipher();
    public virtual int EncryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public virtual int DecryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    private void SetKey(Byte[] key);
    private static UInt32 F1(UInt32 d, UInt32 kmi, int kri);
    private static UInt32 F2(UInt32 d, UInt32 kmi, int kri);
    private static UInt32 F3(UInt32 d, UInt32 kmi, int kri);
    private void CastEncipher(UInt32 l0, UInt32 r0, UInt32[] result);
    private void CastDecipher(UInt32 l16, UInt32 r16, UInt32[] result);
    private static void Bits32ToInts(UInt32 inData, Int32[] b, int offset);
    private static UInt32 IntsTo32Bits(Int32[] b, int i);
}
public abstract class Renci.SshNet.Security.Cryptography.Ciphers.CipherMode : object {
    protected BlockCipher Cipher;
    protected Byte[] IV;
    protected int _blockSize;
    protected CipherMode(Byte[] iv);
    internal void Init(BlockCipher cipher);
    public abstract virtual int EncryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public abstract virtual int DecryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
}
public abstract class Renci.SshNet.Security.Cryptography.Ciphers.CipherPadding : object {
    public Byte[] Pad(int blockSize, Byte[] input);
    public abstract virtual Byte[] Pad(int blockSize, Byte[] input, int offset, int length);
    public Byte[] Pad(Byte[] input, int paddinglength);
    public abstract virtual Byte[] Pad(Byte[] input, int offset, int length, int paddinglength);
}
public class Renci.SshNet.Security.Cryptography.Ciphers.DesCipher : BlockCipher {
    private Int32[] _encryptionKey;
    private Int32[] _decryptionKey;
    private static Int16[] Bytebit;
    private static Int32[] Bigbyte;
    private static Byte[] Pc1;
    private static Byte[] Totrot;
    private static Byte[] Pc2;
    private static UInt32[] Sp1;
    private static UInt32[] Sp2;
    private static UInt32[] Sp3;
    private static UInt32[] Sp4;
    private static UInt32[] Sp5;
    private static UInt32[] Sp6;
    private static UInt32[] Sp7;
    private static UInt32[] Sp8;
    public DesCipher(Byte[] key, CipherMode mode, CipherPadding padding);
    private static DesCipher();
    public virtual int EncryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public virtual int DecryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    protected Int32[] GenerateWorkingKey(bool encrypting, Byte[] key);
    protected virtual void ValidateKey();
    protected static void DesFunc(Int32[] wKey, Byte[] input, int inOff, Byte[] outBytes, int outOff);
}
public class Renci.SshNet.Security.Cryptography.Ciphers.Modes.CbcCipherMode : CipherMode {
    public CbcCipherMode(Byte[] iv);
    public virtual int EncryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public virtual int DecryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
}
public class Renci.SshNet.Security.Cryptography.Ciphers.Modes.CfbCipherMode : CipherMode {
    private Byte[] _ivOutput;
    public CfbCipherMode(Byte[] iv);
    public virtual int EncryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public virtual int DecryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
}
public class Renci.SshNet.Security.Cryptography.Ciphers.Modes.CtrCipherMode : CipherMode {
    private Byte[] _ivOutput;
    public CtrCipherMode(Byte[] iv);
    public virtual int EncryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public virtual int DecryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
}
public class Renci.SshNet.Security.Cryptography.Ciphers.Modes.OfbCipherMode : CipherMode {
    private Byte[] _ivOutput;
    public OfbCipherMode(Byte[] iv);
    public virtual int EncryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public virtual int DecryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
}
public class Renci.SshNet.Security.Cryptography.Ciphers.Paddings.PKCS5Padding : CipherPadding {
    public virtual Byte[] Pad(int blockSize, Byte[] input, int offset, int length);
    public virtual Byte[] Pad(Byte[] input, int offset, int length, int paddinglength);
}
public class Renci.SshNet.Security.Cryptography.Ciphers.Paddings.PKCS7Padding : CipherPadding {
    public virtual Byte[] Pad(int blockSize, Byte[] input, int offset, int length);
    public virtual Byte[] Pad(Byte[] input, int offset, int length, int paddinglength);
}
public class Renci.SshNet.Security.Cryptography.Ciphers.SerpentCipher : BlockCipher {
    private static int Rounds;
    private static int Phi;
    private Int32[] _workingKey;
    private int _x0;
    private int _x1;
    private int _x2;
    private int _x3;
    public SerpentCipher(Byte[] key, CipherMode mode, CipherPadding padding);
    public virtual int EncryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public virtual int DecryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    private Int32[] MakeWorkingKey(Byte[] key);
    private static int RotateLeft(int x, int bits);
    private static int RotateRight(int x, int bits);
    private static int BytesToWord(Byte[] src, int srcOff);
    private static void WordToBytes(int word, Byte[] dst, int dstOff);
    private void Sb0(int a, int b, int c, int d);
    private void Ib0(int a, int b, int c, int d);
    private void Sb1(int a, int b, int c, int d);
    private void Ib1(int a, int b, int c, int d);
    private void Sb2(int a, int b, int c, int d);
    private void Ib2(int a, int b, int c, int d);
    private void Sb3(int a, int b, int c, int d);
    private void Ib3(int a, int b, int c, int d);
    private void Sb4(int a, int b, int c, int d);
    private void Ib4(int a, int b, int c, int d);
    private void Sb5(int a, int b, int c, int d);
    private void Ib5(int a, int b, int c, int d);
    private void Sb6(int a, int b, int c, int d);
    private void Ib6(int a, int b, int c, int d);
    private void Sb7(int a, int b, int c, int d);
    private void Ib7(int a, int b, int c, int d);
    private void LT();
    private void InverseLT();
}
public class Renci.SshNet.Security.Cryptography.Ciphers.TripleDesCipher : DesCipher {
    private Int32[] _encryptionKey1;
    private Int32[] _encryptionKey2;
    private Int32[] _encryptionKey3;
    private Int32[] _decryptionKey1;
    private Int32[] _decryptionKey2;
    private Int32[] _decryptionKey3;
    public TripleDesCipher(Byte[] key, CipherMode mode, CipherPadding padding);
    public virtual int EncryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public virtual int DecryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    protected virtual void ValidateKey();
}
public class Renci.SshNet.Security.Cryptography.Ciphers.TwofishCipher : BlockCipher {
    private static int P_00;
    private static int P_01;
    private static int P_02;
    private static int P_03;
    private static int P_04;
    private static int P_10;
    private static int P_11;
    private static int P_12;
    private static int P_13;
    private static int P_14;
    private static int P_20;
    private static int P_21;
    private static int P_22;
    private static int P_23;
    private static int P_24;
    private static int P_30;
    private static int P_31;
    private static int P_32;
    private static int P_33;
    private static int P_34;
    private static int GF256_FDBK;
    private static int GF256_FDBK_2;
    private static int GF256_FDBK_4;
    private static int RS_GF_FDBK;
    private static int ROUNDS;
    private static int MAX_ROUNDS;
    private static int MAX_KEY_BITS;
    private static int INPUT_WHITEN;
    private static int OUTPUT_WHITEN;
    private static int ROUND_SUBKEYS;
    private static int TOTAL_SUBKEYS;
    private static int SK_STEP;
    private static int SK_BUMP;
    private static int SK_ROTL;
    private Int32[] _gMDS0;
    private Int32[] _gMDS1;
    private Int32[] _gMDS2;
    private Int32[] _gMDS3;
    private int _k64Cnt;
    private Int32[] _gSubKeys;
    private Int32[] _gSBox;
    private static Byte[] P;
    public TwofishCipher(Byte[] key, CipherMode mode, CipherPadding padding);
    private static TwofishCipher();
    public virtual int EncryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public virtual int DecryptBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    private void SetKey(Byte[] key);
    private int F32(int x, Int32[] k32);
    private static int RS_MDS_Encode(int k0, int k1);
    private static int RS_rem(int x);
    private static int LFSR1(int x);
    private static int LFSR2(int x);
    private static int Mx_X(int x);
    private static int Mx_Y(int x);
    private static int M_b0(int x);
    private static int M_b1(int x);
    private static int M_b2(int x);
    private static int M_b3(int x);
    private static int Fe32_0(Int32[] gSBox1, int x);
    private static int Fe32_3(Int32[] gSBox1, int x);
    private static int BytesTo32Bits(Byte[] b, int p);
    private static void Bits32ToBytes(int inData, Byte[] b, int offset);
}
public abstract class Renci.SshNet.Security.Cryptography.DigitalSignature : object {
    public abstract virtual bool Verify(Byte[] input, Byte[] signature);
    public abstract virtual Byte[] Sign(Byte[] input);
}
public class Renci.SshNet.Security.Cryptography.DsaDigitalSignature : DigitalSignature {
    private DsaKey _key;
    private HashAlgorithm _hash;
    private bool _isDisposed;
    public DsaDigitalSignature(DsaKey key);
    public virtual bool Verify(Byte[] input, Byte[] signature);
    public virtual Byte[] Sign(Byte[] input);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class Renci.SshNet.Security.Cryptography.EcdsaDigitalSignature : DigitalSignature {
    private EcdsaKey _key;
    private bool _isDisposed;
    public EcdsaDigitalSignature(EcdsaKey key);
    public virtual bool Verify(Byte[] input, Byte[] signature);
    public virtual Byte[] Sign(Byte[] input);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class Renci.SshNet.Security.Cryptography.ED25519DigitalSignature : DigitalSignature {
    private ED25519Key _key;
    private bool _isDisposed;
    public ED25519DigitalSignature(ED25519Key key);
    public virtual bool Verify(Byte[] input, Byte[] signature);
    public virtual Byte[] Sign(Byte[] input);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class Renci.SshNet.Security.Cryptography.HMACMD5 : HMACMD5 {
    private int _hashSize;
    public int HashSize { get; }
    public HMACMD5(Byte[] key);
    public HMACMD5(Byte[] key, int hashSize);
    public virtual int get_HashSize();
    protected virtual Byte[] HashFinal();
}
public class Renci.SshNet.Security.Cryptography.HMACSHA1 : HMACSHA1 {
    private int _hashSize;
    public int HashSize { get; }
    public HMACSHA1(Byte[] key);
    public HMACSHA1(Byte[] key, int hashSize);
    public virtual int get_HashSize();
    protected virtual Byte[] HashFinal();
}
public class Renci.SshNet.Security.Cryptography.HMACSHA256 : HMACSHA256 {
    private int _hashSize;
    public int HashSize { get; }
    public HMACSHA256(Byte[] key);
    public HMACSHA256(Byte[] key, int hashSize);
    public virtual int get_HashSize();
    protected virtual Byte[] HashFinal();
}
public class Renci.SshNet.Security.Cryptography.HMACSHA384 : HMACSHA384 {
    private int _hashSize;
    public int HashSize { get; }
    public HMACSHA384(Byte[] key);
    public HMACSHA384(Byte[] key, int hashSize);
    public virtual int get_HashSize();
    protected virtual Byte[] HashFinal();
}
public class Renci.SshNet.Security.Cryptography.HMACSHA512 : HMACSHA512 {
    private int _hashSize;
    public int HashSize { get; }
    public HMACSHA512(Byte[] key);
    public HMACSHA512(Byte[] key, int hashSize);
    public virtual int get_HashSize();
    protected virtual Byte[] HashFinal();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Renci.SshNet.Security.Cryptography.RsaDigitalSignature : DigitalSignature {
    private RsaKey _key;
    private HashAlgorithmName _hashAlgorithmName;
    public RsaDigitalSignature(RsaKey rsaKey);
    public RsaDigitalSignature(RsaKey rsaKey, HashAlgorithmName hashAlgorithmName);
    public virtual bool Verify(Byte[] input, Byte[] signature);
    public virtual Byte[] Sign(Byte[] input);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public abstract class Renci.SshNet.Security.Cryptography.StreamCipher : SymmetricCipher {
    protected StreamCipher(Byte[] key);
}
public abstract class Renci.SshNet.Security.Cryptography.SymmetricCipher : Cipher {
    [CompilerGeneratedAttribute]
private Byte[] <Key>k__BackingField;
    protected Byte[] Key { get; private set; }
    protected SymmetricCipher(Byte[] key);
    [CompilerGeneratedAttribute]
protected Byte[] get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(Byte[] value);
}
public class Renci.SshNet.Security.DsaKey : Key {
    private DsaDigitalSignature _digitalSignature;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private BigInteger <P>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <Q>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <G>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <X>k__BackingField;
    public BigInteger P { get; }
    public BigInteger Q { get; }
    public BigInteger G { get; }
    public BigInteger Y { get; }
    public BigInteger X { get; }
    public int KeyLength { get; }
    protected internal DigitalSignature DigitalSignature { get; }
    public BigInteger[] Public { get; }
    public DsaKey(SshKeyData publicKeyData);
    public DsaKey(Byte[] privateKeyData);
    public DsaKey(BigInteger p, BigInteger q, BigInteger g, BigInteger y, BigInteger x);
    [CompilerGeneratedAttribute]
public BigInteger get_P();
    [CompilerGeneratedAttribute]
public BigInteger get_Q();
    [CompilerGeneratedAttribute]
public BigInteger get_G();
    [CompilerGeneratedAttribute]
public BigInteger get_Y();
    [CompilerGeneratedAttribute]
public BigInteger get_X();
    public virtual int get_KeyLength();
    protected internal virtual DigitalSignature get_DigitalSignature();
    public virtual BigInteger[] get_Public();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class Renci.SshNet.Security.EcdsaKey : Key {
    private static string ECDSA_P256_OID_VALUE;
    private static string ECDSA_P384_OID_VALUE;
    private static string ECDSA_P521_OID_VALUE;
    private EcdsaDigitalSignature _digitalSignature;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private Byte[] <PrivateKey>k__BackingField;
    [CompilerGeneratedAttribute]
private ECDsa <Ecdsa>k__BackingField;
    public HashAlgorithmName HashAlgorithm { get; }
    public int KeyLength { get; }
    protected internal DigitalSignature DigitalSignature { get; }
    public BigInteger[] Public { get; }
    public Byte[] PrivateKey { get; private set; }
    public ECDsa Ecdsa { get; private set; }
    public EcdsaKey(SshKeyData publicKeyData);
    public EcdsaKey(string curve, Byte[] publickey, Byte[] privatekey);
    public EcdsaKey(Byte[] data);
    public virtual string ToString();
    public HashAlgorithmName get_HashAlgorithm();
    public virtual int get_KeyLength();
    protected internal virtual DigitalSignature get_DigitalSignature();
    public virtual BigInteger[] get_Public();
    [CompilerGeneratedAttribute]
public Byte[] get_PrivateKey();
    [CompilerGeneratedAttribute]
private void set_PrivateKey(Byte[] value);
    [CompilerGeneratedAttribute]
public ECDsa get_Ecdsa();
    [CompilerGeneratedAttribute]
private void set_Ecdsa(ECDsa value);
    private void Import(string curve_oid, Byte[] publickey, Byte[] privatekey);
    private static string GetCurveOid(string curve_s);
    private static string OidByteArrayToString(Byte[] oid);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class Renci.SshNet.Security.ED25519Key : Key {
    private ED25519DigitalSignature _digitalSignature;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private Byte[] <PublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PrivateKey>k__BackingField;
    public BigInteger[] Public { get; }
    public int KeyLength { get; }
    protected internal DigitalSignature DigitalSignature { get; }
    public Byte[] PublicKey { get; }
    public Byte[] PrivateKey { get; }
    public ED25519Key(SshKeyData publicKeyData);
    public ED25519Key(Byte[] privateKeyData);
    public virtual string ToString();
    public virtual BigInteger[] get_Public();
    public virtual int get_KeyLength();
    protected internal virtual DigitalSignature get_DigitalSignature();
    [CompilerGeneratedAttribute]
public Byte[] get_PublicKey();
    [CompilerGeneratedAttribute]
public Byte[] get_PrivateKey();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class Renci.SshNet.Security.GroupExchangeHashData : SshData {
    private Byte[] _serverVersion;
    private Byte[] _clientVersion;
    private Byte[] _prime;
    private Byte[] _subGroup;
    [CompilerGeneratedAttribute]
private Byte[] <ClientPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ServerPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <HostKey>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MinimumGroupSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PreferredGroupSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaximumGroupSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ClientExchangeValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ServerExchangeValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SharedKey>k__BackingField;
    private string ServerVersion { get; public set; }
    private string ClientVersion { get; public set; }
    public Byte[] ClientPayload { get; public set; }
    public Byte[] ServerPayload { get; public set; }
    public Byte[] HostKey { get; public set; }
    public UInt32 MinimumGroupSize { get; public set; }
    public UInt32 PreferredGroupSize { get; public set; }
    public UInt32 MaximumGroupSize { get; public set; }
    private BigInteger Prime { get; public set; }
    private BigInteger SubGroup { get; public set; }
    public Byte[] ClientExchangeValue { get; public set; }
    public Byte[] ServerExchangeValue { get; public set; }
    public Byte[] SharedKey { get; public set; }
    protected int BufferCapacity { get; }
    private string get_ServerVersion();
    public void set_ServerVersion(string value);
    private string get_ClientVersion();
    public void set_ClientVersion(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_ClientPayload();
    [CompilerGeneratedAttribute]
public void set_ClientPayload(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_ServerPayload();
    [CompilerGeneratedAttribute]
public void set_ServerPayload(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_HostKey();
    [CompilerGeneratedAttribute]
public void set_HostKey(Byte[] value);
    [CompilerGeneratedAttribute]
public UInt32 get_MinimumGroupSize();
    [CompilerGeneratedAttribute]
public void set_MinimumGroupSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_PreferredGroupSize();
    [CompilerGeneratedAttribute]
public void set_PreferredGroupSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_MaximumGroupSize();
    [CompilerGeneratedAttribute]
public void set_MaximumGroupSize(UInt32 value);
    private BigInteger get_Prime();
    public void set_Prime(BigInteger value);
    private BigInteger get_SubGroup();
    public void set_SubGroup(BigInteger value);
    [CompilerGeneratedAttribute]
public Byte[] get_ClientExchangeValue();
    [CompilerGeneratedAttribute]
public void set_ClientExchangeValue(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_ServerExchangeValue();
    [CompilerGeneratedAttribute]
public void set_ServerExchangeValue(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_SharedKey();
    [CompilerGeneratedAttribute]
public void set_SharedKey(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
public abstract class Renci.SshNet.Security.HostAlgorithm : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public Byte[] Data { get; }
    protected HostAlgorithm(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public abstract virtual Byte[] get_Data();
    public abstract virtual Byte[] Sign(Byte[] data);
    public abstract virtual bool VerifySignature(Byte[] data, Byte[] signature);
}
public interface Renci.SshNet.Security.IKeyExchange {
    public string Name { get; }
    public Byte[] ExchangeHash { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_HostKeyReceived(EventHandler`1<HostKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_HostKeyReceived(EventHandler`1<HostKeyEventArgs> value);
    public abstract virtual string get_Name();
    public abstract virtual Byte[] get_ExchangeHash();
    public abstract virtual void Start(Session session, KeyExchangeInitMessage message, bool sendClientInitMessage);
    public abstract virtual void Finish();
    public abstract virtual Cipher CreateClientCipher(Boolean& isAead);
    public abstract virtual Cipher CreateServerCipher(Boolean& isAead);
    public abstract virtual HashAlgorithm CreateServerHash(Boolean& isEncryptThenMAC);
    public abstract virtual HashAlgorithm CreateClientHash(Boolean& isEncryptThenMAC);
    public abstract virtual Compressor CreateCompressor();
    public abstract virtual Compressor CreateDecompressor();
}
public abstract class Renci.SshNet.Security.Key : object {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    protected internal DigitalSignature DigitalSignature { get; }
    public BigInteger[] Public { get; }
    public int KeyLength { get; }
    public string Comment { get; public set; }
    protected internal abstract virtual DigitalSignature get_DigitalSignature();
    public abstract virtual BigInteger[] get_Public();
    public abstract virtual int get_KeyLength();
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    public Byte[] Sign(Byte[] data);
    public bool VerifySignature(Byte[] data, Byte[] signature);
}
public abstract class Renci.SshNet.Security.KeyExchange : Algorithm {
    private CipherInfo _clientCipherInfo;
    private CipherInfo _serverCipherInfo;
    private HashInfo _clientHashInfo;
    private HashInfo _serverHashInfo;
    private Func`1<Compressor> _compressorFactory;
    private Func`1<Compressor> _decompressorFactory;
    [CompilerGeneratedAttribute]
private Session <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SharedKey>k__BackingField;
    private Byte[] _exchangeHash;
    [CompilerGeneratedAttribute]
private EventHandler`1<HostKeyEventArgs> HostKeyReceived;
    protected Session Session { get; private set; }
    public Byte[] SharedKey { get; protected set; }
    public Byte[] ExchangeHash { get; }
    [CompilerGeneratedAttribute]
protected Session get_Session();
    [CompilerGeneratedAttribute]
private void set_Session(Session value);
    [CompilerGeneratedAttribute]
public Byte[] get_SharedKey();
    [CompilerGeneratedAttribute]
protected void set_SharedKey(Byte[] value);
    public sealed virtual Byte[] get_ExchangeHash();
    [CompilerGeneratedAttribute]
public sealed virtual void add_HostKeyReceived(EventHandler`1<HostKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_HostKeyReceived(EventHandler`1<HostKeyEventArgs> value);
    public virtual void Start(Session session, KeyExchangeInitMessage message, bool sendClientInitMessage);
    public virtual void Finish();
    public sealed virtual Cipher CreateServerCipher(Boolean& isAead);
    public sealed virtual Cipher CreateClientCipher(Boolean& isAead);
    public sealed virtual HashAlgorithm CreateServerHash(Boolean& isEncryptThenMAC);
    public sealed virtual HashAlgorithm CreateClientHash(Boolean& isEncryptThenMAC);
    public sealed virtual Compressor CreateCompressor();
    public sealed virtual Compressor CreateDecompressor();
    protected bool CanTrustHostKey(KeyHostAlgorithm host);
    protected abstract virtual bool ValidateExchangeHash();
    private protected bool ValidateExchangeHash(Byte[] encodedKey, Byte[] encodedSignature);
    protected abstract virtual Byte[] CalculateHash();
    protected abstract virtual Byte[] Hash(Byte[] hashData);
    protected void SendMessage(Message message);
    private Byte[] GenerateSessionKey(Byte[] sharedKey, Byte[] exchangeHash, Byte[] key, int size);
    private static Byte[] GenerateSessionKey(Byte[] sharedKey, Byte[] exchangeHash, char p, Byte[] sessionId);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal abstract class Renci.SshNet.Security.KeyExchangeDiffieHellman : KeyExchange {
    protected BigInteger _group;
    protected BigInteger _prime;
    protected Byte[] _clientPayload;
    protected Byte[] _serverPayload;
    protected Byte[] _clientExchangeValue;
    protected Byte[] _serverExchangeValue;
    protected BigInteger _privateExponent;
    protected Byte[] _hostKey;
    protected Byte[] _signature;
    protected int HashSize { get; }
    protected abstract virtual int get_HashSize();
    protected virtual bool ValidateExchangeHash();
    public virtual void Start(Session session, KeyExchangeInitMessage message, bool sendClientInitMessage);
    protected void PopulateClientExchangeValue();
    protected virtual void HandleServerDhReply(Byte[] hostKey, Byte[] serverExchangeValue, Byte[] signature);
}
internal class Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup14Sha1 : KeyExchangeDiffieHellmanGroupSha1 {
    private static Byte[] SecondOkleyGroupReversed;
    public string Name { get; }
    public BigInteger GroupPrime { get; }
    private static KeyExchangeDiffieHellmanGroup14Sha1();
    public virtual string get_Name();
    public virtual BigInteger get_GroupPrime();
}
internal class Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup14Sha256 : KeyExchangeDiffieHellmanGroupSha256 {
    private static Byte[] SecondOkleyGroupReversed;
    public string Name { get; }
    public BigInteger GroupPrime { get; }
    private static KeyExchangeDiffieHellmanGroup14Sha256();
    public virtual string get_Name();
    public virtual BigInteger get_GroupPrime();
}
internal class Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup16Sha512 : KeyExchangeDiffieHellmanGroupSha512 {
    private static Byte[] MoreModularExponentialGroup16Reversed;
    public BigInteger GroupPrime { get; }
    public string Name { get; }
    private static KeyExchangeDiffieHellmanGroup16Sha512();
    public virtual BigInteger get_GroupPrime();
    public virtual string get_Name();
}
internal class Renci.SshNet.Security.KeyExchangeDiffieHellmanGroup1Sha1 : KeyExchangeDiffieHellmanGroupSha1 {
    private static Byte[] SecondOkleyGroupReversed;
    public string Name { get; }
    public BigInteger GroupPrime { get; }
    private static KeyExchangeDiffieHellmanGroup1Sha1();
    public virtual string get_Name();
    public virtual BigInteger get_GroupPrime();
}
internal class Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupExchangeSha1 : KeyExchangeDiffieHellmanGroupExchangeShaBase {
    public string Name { get; }
    protected int HashSize { get; }
    public virtual string get_Name();
    protected virtual int get_HashSize();
    protected virtual Byte[] Hash(Byte[] hashData);
}
internal class Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupExchangeSha256 : KeyExchangeDiffieHellmanGroupExchangeShaBase {
    public string Name { get; }
    protected int HashSize { get; }
    public virtual string get_Name();
    protected virtual int get_HashSize();
    protected virtual Byte[] Hash(Byte[] hashData);
}
internal abstract class Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupExchangeShaBase : KeyExchangeDiffieHellman {
    private static int MinimumGroupSize;
    private static int PreferredGroupSize;
    private static int MaximumProupSize;
    protected virtual Byte[] CalculateHash();
    public virtual void Start(Session session, KeyExchangeInitMessage message, bool sendClientInitMessage);
    public virtual void Finish();
    private void Session_KeyExchangeDhGroupExchangeGroupReceived(object sender, MessageEventArgs`1<KeyExchangeDhGroupExchangeGroup> e);
    private void Session_KeyExchangeDhGroupExchangeReplyReceived(object sender, MessageEventArgs`1<KeyExchangeDhGroupExchangeReply> e);
}
internal abstract class Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupSha1 : KeyExchangeDiffieHellmanGroupShaBase {
    protected int HashSize { get; }
    protected virtual int get_HashSize();
    protected virtual Byte[] Hash(Byte[] hashData);
}
internal abstract class Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupSha256 : KeyExchangeDiffieHellmanGroupShaBase {
    protected int HashSize { get; }
    protected virtual int get_HashSize();
    protected virtual Byte[] Hash(Byte[] hashData);
}
internal abstract class Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupSha512 : KeyExchangeDiffieHellmanGroupShaBase {
    protected int HashSize { get; }
    protected virtual int get_HashSize();
    protected virtual Byte[] Hash(Byte[] hashData);
}
internal abstract class Renci.SshNet.Security.KeyExchangeDiffieHellmanGroupShaBase : KeyExchangeDiffieHellman {
    public BigInteger GroupPrime { get; }
    public abstract virtual BigInteger get_GroupPrime();
    public virtual void Start(Session session, KeyExchangeInitMessage message, bool sendClientInitMessage);
    public virtual void Finish();
    protected virtual Byte[] CalculateHash();
    private void Session_KeyExchangeDhReplyMessageReceived(object sender, MessageEventArgs`1<KeyExchangeDhReplyMessage> e);
}
internal abstract class Renci.SshNet.Security.KeyExchangeEC : KeyExchange {
    protected Byte[] _clientPayload;
    protected Byte[] _serverPayload;
    protected Byte[] _clientExchangeValue;
    protected Byte[] _serverExchangeValue;
    protected Byte[] _hostKey;
    protected Byte[] _signature;
    protected int HashSize { get; }
    protected abstract virtual int get_HashSize();
    protected virtual Byte[] CalculateHash();
    protected virtual bool ValidateExchangeHash();
    public virtual void Start(Session session, KeyExchangeInitMessage message, bool sendClientInitMessage);
}
internal class Renci.SshNet.Security.KeyExchangeECCurve25519 : KeyExchangeEC {
    private Byte[] _privateKey;
    public string Name { get; }
    protected int HashSize { get; }
    public virtual string get_Name();
    protected virtual int get_HashSize();
    public virtual void Start(Session session, KeyExchangeInitMessage message, bool sendClientInitMessage);
    public virtual void Finish();
    protected virtual Byte[] Hash(Byte[] hashData);
    private void Session_KeyExchangeEcdhReplyMessageReceived(object sender, MessageEventArgs`1<KeyExchangeEcdhReplyMessage> e);
    private void HandleServerEcdhReply(Byte[] hostKey, Byte[] serverExchangeValue, Byte[] signature);
}
internal abstract class Renci.SshNet.Security.KeyExchangeECDH : KeyExchangeEC {
    private ECDHCBasicAgreement _keyAgreement;
    private ECDomainParameters _domainParameters;
    protected X9ECParameters CurveParameter { get; }
    protected abstract virtual X9ECParameters get_CurveParameter();
    public virtual void Start(Session session, KeyExchangeInitMessage message, bool sendClientInitMessage);
    public virtual void Finish();
    private void Session_KeyExchangeEcdhReplyMessageReceived(object sender, MessageEventArgs`1<KeyExchangeEcdhReplyMessage> e);
    private void HandleServerEcdhReply(Byte[] hostKey, Byte[] serverExchangeValue, Byte[] signature);
}
internal class Renci.SshNet.Security.KeyExchangeECDH256 : KeyExchangeECDH {
    public string Name { get; }
    protected X9ECParameters CurveParameter { get; }
    protected int HashSize { get; }
    public virtual string get_Name();
    protected virtual X9ECParameters get_CurveParameter();
    protected virtual int get_HashSize();
    protected virtual Byte[] Hash(Byte[] hashData);
}
internal class Renci.SshNet.Security.KeyExchangeECDH384 : KeyExchangeECDH {
    public string Name { get; }
    protected X9ECParameters CurveParameter { get; }
    protected int HashSize { get; }
    public virtual string get_Name();
    protected virtual X9ECParameters get_CurveParameter();
    protected virtual int get_HashSize();
    protected virtual Byte[] Hash(Byte[] hashData);
}
internal class Renci.SshNet.Security.KeyExchangeECDH521 : KeyExchangeECDH {
    public string Name { get; }
    protected X9ECParameters CurveParameter { get; }
    protected int HashSize { get; }
    public virtual string get_Name();
    protected virtual X9ECParameters get_CurveParameter();
    protected virtual int get_HashSize();
    protected virtual Byte[] Hash(Byte[] hashData);
}
internal class Renci.SshNet.Security.KeyExchangeHashData : SshData {
    private Byte[] _serverVersion;
    private Byte[] _clientVersion;
    [CompilerGeneratedAttribute]
private Byte[] <ClientPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ServerPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <HostKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ClientExchangeValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ServerExchangeValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SharedKey>k__BackingField;
    private string ServerVersion { get; public set; }
    private string ClientVersion { get; public set; }
    public Byte[] ClientPayload { get; public set; }
    public Byte[] ServerPayload { get; public set; }
    public Byte[] HostKey { get; public set; }
    public Byte[] ClientExchangeValue { get; public set; }
    public Byte[] ServerExchangeValue { get; public set; }
    public Byte[] SharedKey { get; public set; }
    protected int BufferCapacity { get; }
    private string get_ServerVersion();
    public void set_ServerVersion(string value);
    private string get_ClientVersion();
    public void set_ClientVersion(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_ClientPayload();
    [CompilerGeneratedAttribute]
public void set_ClientPayload(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_ServerPayload();
    [CompilerGeneratedAttribute]
public void set_ServerPayload(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_HostKey();
    [CompilerGeneratedAttribute]
public void set_HostKey(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_ClientExchangeValue();
    [CompilerGeneratedAttribute]
public void set_ClientExchangeValue(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_ServerExchangeValue();
    [CompilerGeneratedAttribute]
public void set_ServerExchangeValue(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_SharedKey();
    [CompilerGeneratedAttribute]
public void set_SharedKey(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
public class Renci.SshNet.Security.KeyHostAlgorithm : HostAlgorithm {
    [CompilerGeneratedAttribute]
private Key <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private DigitalSignature <DigitalSignature>k__BackingField;
    public Key Key { get; private set; }
    public DigitalSignature DigitalSignature { get; private set; }
    public Byte[] Data { get; }
    public KeyHostAlgorithm(string name, Key key);
    public KeyHostAlgorithm(string name, Key key, DigitalSignature digitalSignature);
    [CompilerGeneratedAttribute]
public Key get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(Key value);
    [CompilerGeneratedAttribute]
public DigitalSignature get_DigitalSignature();
    [CompilerGeneratedAttribute]
private void set_DigitalSignature(DigitalSignature value);
    public virtual Byte[] get_Data();
    public virtual Byte[] Sign(Byte[] data);
    public virtual bool VerifySignature(Byte[] data, Byte[] signature);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Asn1.Sec.SecNamedCurves : object {
    public static X9ECParameters GetByName(string name);
    private static BigInteger FromHex(string hex);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Asn1.X9.X9Curve : object {
    private ECCurve curve;
    private Byte[] seed;
    public ECCurve Curve { get; }
    public X9Curve(ECCurve curve);
    public X9Curve(ECCurve curve, Byte[] seed);
    public ECCurve get_Curve();
    public Byte[] GetSeed();
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Asn1.X9.X9ECParameters : object {
    private Byte[] seed;
    [CompilerGeneratedAttribute]
private ECCurve <Curve>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <N>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <H>k__BackingField;
    [CompilerGeneratedAttribute]
private X9ECPoint <BaseEntry>k__BackingField;
    public ECCurve Curve { get; private set; }
    public ECPoint G { get; }
    public BigInteger N { get; private set; }
    public BigInteger H { get; private set; }
    public X9Curve CurveEntry { get; }
    public X9ECPoint BaseEntry { get; private set; }
    public X9ECParameters(ECCurve curve, ECPoint g, BigInteger n);
    public X9ECParameters(ECCurve curve, X9ECPoint g, BigInteger n, BigInteger h);
    public X9ECParameters(ECCurve curve, ECPoint g, BigInteger n, BigInteger h);
    public X9ECParameters(ECCurve curve, ECPoint g, BigInteger n, BigInteger h, Byte[] seed);
    public X9ECParameters(ECCurve curve, X9ECPoint g, BigInteger n, BigInteger h, Byte[] seed);
    public static X9ECParameters GetInstance(object obj);
    [CompilerGeneratedAttribute]
public ECCurve get_Curve();
    [CompilerGeneratedAttribute]
private void set_Curve(ECCurve value);
    public ECPoint get_G();
    [CompilerGeneratedAttribute]
public BigInteger get_N();
    [CompilerGeneratedAttribute]
private void set_N(BigInteger value);
    [CompilerGeneratedAttribute]
public BigInteger get_H();
    [CompilerGeneratedAttribute]
private void set_H(BigInteger value);
    public Byte[] GetSeed();
    public X9Curve get_CurveEntry();
    [CompilerGeneratedAttribute]
public X9ECPoint get_BaseEntry();
    [CompilerGeneratedAttribute]
private void set_BaseEntry(X9ECPoint value);
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder : object {
    private X9ECParameters parameters;
    public X9ECParameters Parameters { get; }
    public X9ECParameters get_Parameters();
    protected abstract virtual X9ECParameters CreateParameters();
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Asn1.X9.X9ECPoint : object {
    private Byte[] encoding;
    private ECCurve c;
    private ECPoint p;
    public ECPoint Point { get; }
    public bool IsPointCompressed { get; }
    public X9ECPoint(ECPoint p);
    public X9ECPoint(ECPoint p, bool compressed);
    public X9ECPoint(ECCurve c, Byte[] encoding);
    public Byte[] GetPointEncoding();
    public ECPoint get_Point();
    public bool get_IsPointCompressed();
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Crypto.Agreement.ECDHCBasicAgreement : object {
    private ECPrivateKeyParameters privKey;
    public virtual void Init(AsymmetricKeyParameter parameters);
    public virtual int GetFieldSize();
    public virtual BigInteger CalculateAgreement(ECPublicKeyParameters pubKey);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair : object {
    private AsymmetricKeyParameter publicParameter;
    private AsymmetricKeyParameter privateParameter;
    public AsymmetricKeyParameter Public { get; }
    public AsymmetricKeyParameter Private { get; }
    public AsymmetricCipherKeyPair(AsymmetricKeyParameter publicParameter, AsymmetricKeyParameter privateParameter);
    public AsymmetricKeyParameter get_Public();
    public AsymmetricKeyParameter get_Private();
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Crypto.AsymmetricKeyParameter : object {
    private bool privateKey;
    public bool IsPrivate { get; }
    protected AsymmetricKeyParameter(bool privateKey);
    public bool get_IsPrivate();
    public virtual bool Equals(object obj);
    protected bool Equals(AsymmetricKeyParameter other);
    public virtual int GetHashCode();
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Crypto.Digests.GeneralDigest : object {
    private static int BYTE_LENGTH;
    private Byte[] xBuf;
    private int xBufOff;
    private long byteCount;
    public string AlgorithmName { get; }
    internal GeneralDigest(GeneralDigest t);
    protected void CopyIn(GeneralDigest t);
    public sealed virtual void Update(byte input);
    public sealed virtual void BlockUpdate(Byte[] input, int inOff, int length);
    public void Finish();
    public virtual void Reset();
    public sealed virtual int GetByteLength();
    internal abstract virtual void ProcessWord(Byte[] input, int inOff);
    internal abstract virtual void ProcessLength(long bitLength);
    internal abstract virtual void ProcessBlock();
    public abstract virtual string get_AlgorithmName();
    public abstract virtual int GetDigestSize();
    public abstract virtual int DoFinal(Byte[] output, int outOff);
    public abstract virtual IMemoable Copy();
    public abstract virtual void Reset(IMemoable t);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Crypto.Digests.Sha256Digest : GeneralDigest {
    private static int DigestLength;
    private UInt32 H1;
    private UInt32 H2;
    private UInt32 H3;
    private UInt32 H4;
    private UInt32 H5;
    private UInt32 H6;
    private UInt32 H7;
    private UInt32 H8;
    private UInt32[] X;
    private int xOff;
    private static UInt32[] K;
    public string AlgorithmName { get; }
    public Sha256Digest(Sha256Digest t);
    private static Sha256Digest();
    private void CopyIn(Sha256Digest t);
    public virtual string get_AlgorithmName();
    public virtual int GetDigestSize();
    internal virtual void ProcessWord(Byte[] input, int inOff);
    internal virtual void ProcessLength(long bitLength);
    public virtual int DoFinal(Byte[] output, int outOff);
    public virtual void Reset();
    private void initHs();
    internal virtual void ProcessBlock();
    private static UInt32 Sum1Ch(UInt32 x, UInt32 y, UInt32 z);
    private static UInt32 Sum0Maj(UInt32 x, UInt32 y, UInt32 z);
    private static UInt32 Theta0(UInt32 x);
    private static UInt32 Theta1(UInt32 x);
    public virtual IMemoable Copy();
    public virtual void Reset(IMemoable other);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Crypto.Generators.ECKeyPairGenerator : object {
    private string algorithm;
    private ECDomainParameters parameters;
    private SecureRandom random;
    public ECKeyPairGenerator(string algorithm);
    public sealed virtual void Init(KeyGenerationParameters parameters);
    public sealed virtual AsymmetricCipherKeyPair GenerateKeyPair();
    protected virtual ECMultiplier CreateBasePointMultiplier();
    internal static ECPublicKeyParameters GetCorrespondingPublicKey(ECPrivateKeyParameters privKey);
}
internal interface Renci.SshNet.Security.Org.BouncyCastle.Crypto.IAsymmetricCipherKeyPairGenerator {
    public abstract virtual void Init(KeyGenerationParameters parameters);
    public abstract virtual AsymmetricCipherKeyPair GenerateKeyPair();
}
internal interface Renci.SshNet.Security.Org.BouncyCastle.Crypto.IDigest {
    public string AlgorithmName { get; }
    public abstract virtual string get_AlgorithmName();
    public abstract virtual int GetDigestSize();
    public abstract virtual int GetByteLength();
    public abstract virtual void Update(byte input);
    public abstract virtual void BlockUpdate(Byte[] input, int inOff, int length);
    public abstract virtual int DoFinal(Byte[] output, int outOff);
    public abstract virtual void Reset();
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Crypto.KeyGenerationParameters : object {
    private SecureRandom random;
    private int strength;
    public SecureRandom Random { get; }
    public int Strength { get; }
    public KeyGenerationParameters(SecureRandom random, int strength);
    public SecureRandom get_Random();
    public int get_Strength();
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters : object {
    internal ECCurve curve;
    internal Byte[] seed;
    internal ECPoint g;
    internal BigInteger n;
    internal BigInteger h;
    internal BigInteger hInv;
    public ECCurve Curve { get; }
    public ECPoint G { get; }
    public BigInteger N { get; }
    public BigInteger H { get; }
    public BigInteger HInv { get; }
    public ECDomainParameters(ECCurve curve, ECPoint g, BigInteger n, BigInteger h, Byte[] seed);
    public ECCurve get_Curve();
    public ECPoint get_G();
    public BigInteger get_N();
    public BigInteger get_H();
    public BigInteger get_HInv();
    internal static ECPoint Validate(ECCurve c, ECPoint q);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Crypto.Parameters.ECKeyGenerationParameters : KeyGenerationParameters {
    private ECDomainParameters domainParams;
    public ECDomainParameters DomainParameters { get; }
    public ECKeyGenerationParameters(ECDomainParameters domainParameters, SecureRandom random);
    public ECDomainParameters get_DomainParameters();
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Crypto.Parameters.ECKeyParameters : AsymmetricKeyParameter {
    private static String[] algorithms;
    private string algorithm;
    private ECDomainParameters parameters;
    public string AlgorithmName { get; }
    public ECDomainParameters Parameters { get; }
    protected ECKeyParameters(string algorithm, bool isPrivate, ECDomainParameters parameters);
    private static ECKeyParameters();
    public string get_AlgorithmName();
    public ECDomainParameters get_Parameters();
    public virtual bool Equals(object obj);
    protected bool Equals(ECKeyParameters other);
    public virtual int GetHashCode();
    internal ECKeyGenerationParameters CreateKeyGenerationParameters(SecureRandom random);
    internal static string VerifyAlgorithmName(string algorithm);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters : ECKeyParameters {
    private BigInteger d;
    public BigInteger D { get; }
    public ECPrivateKeyParameters(BigInteger d, ECDomainParameters parameters);
    public ECPrivateKeyParameters(string algorithm, BigInteger d, ECDomainParameters parameters);
    public BigInteger get_D();
    public virtual bool Equals(object obj);
    protected bool Equals(ECPrivateKeyParameters other);
    public virtual int GetHashCode();
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters : ECKeyParameters {
    private ECPoint q;
    public ECPoint Q { get; }
    public ECPublicKeyParameters(ECPoint q, ECDomainParameters parameters);
    public ECPublicKeyParameters(string algorithm, ECPoint q, ECDomainParameters parameters);
    public ECPoint get_Q();
    public virtual bool Equals(object obj);
    protected bool Equals(ECPublicKeyParameters other);
    public virtual int GetHashCode();
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator : object {
    private RandomNumberGenerator rndProv;
    public CryptoApiRandomGenerator(RandomNumberGenerator rng);
    public virtual void AddSeedMaterial(Byte[] seed);
    public virtual void AddSeedMaterial(long seed);
    public virtual void NextBytes(Byte[] bytes);
    public virtual void NextBytes(Byte[] bytes, int start, int len);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Crypto.Prng.DigestRandomGenerator : object {
    private static long CYCLE_COUNT;
    private long stateCounter;
    private long seedCounter;
    private IDigest digest;
    private Byte[] state;
    private Byte[] seed;
    public DigestRandomGenerator(IDigest digest);
    public sealed virtual void AddSeedMaterial(Byte[] inSeed);
    public sealed virtual void AddSeedMaterial(long rSeed);
    public sealed virtual void NextBytes(Byte[] bytes);
    public sealed virtual void NextBytes(Byte[] bytes, int start, int len);
    private void CycleSeed();
    private void GenerateState();
    private void DigestAddCounter(long seedVal);
    private void DigestUpdate(Byte[] inSeed);
    private void DigestDoFinal(Byte[] result);
}
internal interface Renci.SshNet.Security.Org.BouncyCastle.Crypto.Prng.IRandomGenerator {
    public abstract virtual void AddSeedMaterial(Byte[] seed);
    public abstract virtual void AddSeedMaterial(long seed);
    public abstract virtual void NextBytes(Byte[] bytes);
    public abstract virtual void NextBytes(Byte[] bytes, int start, int len);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Crypto.Utilities.Pack : object {
    internal static void UInt16_To_BE(ushort n, Byte[] bs);
    internal static void UInt16_To_BE(ushort n, Byte[] bs, int off);
    internal static ushort BE_To_UInt16(Byte[] bs);
    internal static ushort BE_To_UInt16(Byte[] bs, int off);
    internal static Byte[] UInt32_To_BE(UInt32 n);
    internal static void UInt32_To_BE(UInt32 n, Byte[] bs);
    internal static void UInt32_To_BE(UInt32 n, Byte[] bs, int off);
    internal static Byte[] UInt32_To_BE(UInt32[] ns);
    internal static void UInt32_To_BE(UInt32[] ns, Byte[] bs, int off);
    internal static UInt32 BE_To_UInt32(Byte[] bs);
    internal static UInt32 BE_To_UInt32(Byte[] bs, int off);
    internal static void BE_To_UInt32(Byte[] bs, int off, UInt32[] ns);
    internal static Byte[] UInt64_To_BE(ulong n);
    internal static void UInt64_To_BE(ulong n, Byte[] bs);
    internal static void UInt64_To_BE(ulong n, Byte[] bs, int off);
    internal static Byte[] UInt64_To_BE(UInt64[] ns);
    internal static void UInt64_To_BE(UInt64[] ns, Byte[] bs, int off);
    internal static ulong BE_To_UInt64(Byte[] bs);
    internal static ulong BE_To_UInt64(Byte[] bs, int off);
    internal static void BE_To_UInt64(Byte[] bs, int off, UInt64[] ns);
    internal static void UInt16_To_LE(ushort n, Byte[] bs);
    internal static void UInt16_To_LE(ushort n, Byte[] bs, int off);
    internal static ushort LE_To_UInt16(Byte[] bs);
    internal static ushort LE_To_UInt16(Byte[] bs, int off);
    internal static Byte[] UInt32_To_LE(UInt32 n);
    internal static void UInt32_To_LE(UInt32 n, Byte[] bs);
    internal static void UInt32_To_LE(UInt32 n, Byte[] bs, int off);
    internal static Byte[] UInt32_To_LE(UInt32[] ns);
    internal static void UInt32_To_LE(UInt32[] ns, Byte[] bs, int off);
    internal static UInt32 LE_To_UInt32(Byte[] bs);
    internal static UInt32 LE_To_UInt32(Byte[] bs, int off);
    internal static void LE_To_UInt32(Byte[] bs, int off, UInt32[] ns);
    internal static void LE_To_UInt32(Byte[] bs, int bOff, UInt32[] ns, int nOff, int count);
    internal static UInt32[] LE_To_UInt32(Byte[] bs, int off, int count);
    internal static Byte[] UInt64_To_LE(ulong n);
    internal static void UInt64_To_LE(ulong n, Byte[] bs);
    internal static void UInt64_To_LE(ulong n, Byte[] bs, int off);
    internal static Byte[] UInt64_To_LE(UInt64[] ns);
    internal static void UInt64_To_LE(UInt64[] ns, Byte[] bs, int off);
    internal static void UInt64_To_LE(UInt64[] ns, int nsOff, int nsLen, Byte[] bs, int bsOff);
    internal static ulong LE_To_UInt64(Byte[] bs);
    internal static ulong LE_To_UInt64(Byte[] bs, int off);
    internal static void LE_To_UInt64(Byte[] bs, int off, UInt64[] ns);
    internal static void LE_To_UInt64(Byte[] bs, int bsOff, UInt64[] ns, int nsOff, int nsLen);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.BigInteger : object {
    internal static Int32[][] primeLists;
    internal static Int32[] primeProducts;
    private static long IMASK;
    private static ulong UIMASK;
    private static Int32[] ZeroMagnitude;
    private static Byte[] ZeroEncoding;
    private static BigInteger[] SMALL_CONSTANTS;
    public static BigInteger Zero;
    public static BigInteger One;
    public static BigInteger Two;
    public static BigInteger Three;
    public static BigInteger Ten;
    private static Byte[] BitLengthTable;
    private static int chunk2;
    private static int chunk8;
    private static int chunk10;
    private static int chunk16;
    private static BigInteger radix2;
    private static BigInteger radix2E;
    private static BigInteger radix8;
    private static BigInteger radix8E;
    private static BigInteger radix10;
    private static BigInteger radix10E;
    private static BigInteger radix16;
    private static BigInteger radix16E;
    private static SecureRandom RandomSource;
    private static Int32[] ExpWindowThresholds;
    private static int BitsPerByte;
    private static int BitsPerInt;
    private static int BytesPerInt;
    private Int32[] magnitude;
    private int sign;
    private int nBits;
    private int nBitLength;
    private int mQuote;
    public int BitCount { get; }
    public int BitLength { get; }
    public int IntValue { get; }
    public long LongValue { get; }
    public int SignValue { get; }
    private static BigInteger();
    private BigInteger(int signum, Int32[] mag, bool checkMag);
    public BigInteger(string value);
    public BigInteger(string str, int radix);
    public BigInteger(Byte[] bytes);
    public BigInteger(Byte[] bytes, int offset, int length);
    public BigInteger(int sign, Byte[] bytes);
    public BigInteger(int sign, Byte[] bytes, int offset, int length);
    public BigInteger(int sizeInBits, Random random);
    public BigInteger(int bitLength, int certainty, Random random);
    private static int GetByteLength(int nBits);
    internal static BigInteger Arbitrary(int sizeInBits);
    private static Int32[] MakeMagnitude(Byte[] bytes, int offset, int length);
    public BigInteger Abs();
    private static Int32[] AddMagnitudes(Int32[] a, Int32[] b);
    public BigInteger Add(BigInteger value);
    private BigInteger AddToMagnitude(Int32[] magToAdd);
    public BigInteger And(BigInteger value);
    public BigInteger AndNot(BigInteger val);
    public int get_BitCount();
    public static int BitCnt(int i);
    private static int CalcBitLength(int sign, int indx, Int32[] mag);
    public int get_BitLength();
    internal static int BitLen(int w);
    private bool QuickPow2Check();
    public int CompareTo(object obj);
    private static int CompareTo(int xIndx, Int32[] x, int yIndx, Int32[] y);
    private static int CompareNoLeadingZeroes(int xIndx, Int32[] x, int yIndx, Int32[] y);
    public int CompareTo(BigInteger value);
    private Int32[] Divide(Int32[] x, Int32[] y);
    public BigInteger Divide(BigInteger val);
    public BigInteger[] DivideAndRemainder(BigInteger val);
    public virtual bool Equals(object obj);
    private bool IsEqualMagnitude(BigInteger x);
    public BigInteger Gcd(BigInteger value);
    public virtual int GetHashCode();
    private BigInteger Inc();
    public int get_IntValue();
    public bool IsProbablePrime(int certainty);
    internal bool IsProbablePrime(int certainty, bool randomlySelected);
    private bool CheckProbablePrime(int certainty, Random random, bool randomlySelected);
    public bool RabinMillerTest(int certainty, Random random);
    internal bool RabinMillerTest(int certainty, Random random, bool randomlySelected);
    public long get_LongValue();
    public BigInteger Max(BigInteger value);
    public BigInteger Min(BigInteger value);
    public BigInteger Mod(BigInteger m);
    public BigInteger ModInverse(BigInteger m);
    private BigInteger ModInversePow2(BigInteger m);
    private static int ModInverse32(int d);
    private static long ModInverse64(long d);
    private static BigInteger ExtEuclid(BigInteger a, BigInteger b, BigInteger& u1Out);
    private static void ZeroOut(Int32[] x);
    public BigInteger ModPow(BigInteger e, BigInteger m);
    private static BigInteger ModPowBarrett(BigInteger b, BigInteger e, BigInteger m);
    private static BigInteger ReduceBarrett(BigInteger x, BigInteger m, BigInteger mr, BigInteger yu);
    private static BigInteger ModPowMonty(BigInteger b, BigInteger e, BigInteger m, bool convert);
    private static Int32[] GetWindowList(Int32[] mag, int extraBits);
    private static int CreateWindowEntry(int mult, int zeroes);
    private static Int32[] Square(Int32[] w, Int32[] x);
    private static Int32[] Multiply(Int32[] x, Int32[] y, Int32[] z);
    private int GetMQuote();
    private static void MontgomeryReduce(Int32[] x, Int32[] m, UInt32 mDash);
    private static void MultiplyMonty(Int32[] a, Int32[] x, Int32[] y, Int32[] m, UInt32 mDash, bool smallMontyModulus);
    private static void SquareMonty(Int32[] a, Int32[] x, Int32[] m, UInt32 mDash, bool smallMontyModulus);
    private static UInt32 MultiplyMontyNIsOne(UInt32 x, UInt32 y, UInt32 m, UInt32 mDash);
    public BigInteger Multiply(BigInteger val);
    public BigInteger Square();
    public BigInteger Negate();
    public BigInteger NextProbablePrime();
    public BigInteger Not();
    public BigInteger Pow(int exp);
    public static BigInteger ProbablePrime(int bitLength, Random random);
    private int Remainder(int m);
    private static Int32[] Remainder(Int32[] x, Int32[] y);
    public BigInteger Remainder(BigInteger n);
    private Int32[] LastNBits(int n);
    private BigInteger DivideWords(int w);
    private BigInteger RemainderWords(int w);
    private static Int32[] ShiftLeft(Int32[] mag, int n);
    private static int ShiftLeftOneInPlace(Int32[] x, int carry);
    public BigInteger ShiftLeft(int n);
    private static void ShiftRightInPlace(int start, Int32[] mag, int n);
    private static void ShiftRightOneInPlace(int start, Int32[] mag);
    public BigInteger ShiftRight(int n);
    public int get_SignValue();
    private static Int32[] Subtract(int xStart, Int32[] x, int yStart, Int32[] y);
    public BigInteger Subtract(BigInteger n);
    private static Int32[] doSubBigLil(Int32[] bigMag, Int32[] lilMag);
    public Byte[] ToByteArray();
    public Byte[] ToByteArrayUnsigned();
    private Byte[] ToByteArray(bool unsigned);
    public virtual string ToString();
    public string ToString(int radix);
    private static void ToString(StringBuilder sb, int radix, IList moduli, int scale, BigInteger pos);
    private static void AppendZeroExtendedString(StringBuilder sb, string s, int minLength);
    private static BigInteger CreateUValueOf(ulong value);
    private static BigInteger CreateValueOf(long value);
    public static BigInteger ValueOf(long value);
    public int GetLowestSetBit();
    private int GetLowestSetBitMaskFirst(int firstWordMask);
    public bool TestBit(int n);
    public BigInteger Or(BigInteger value);
    public BigInteger Xor(BigInteger value);
    public BigInteger SetBit(int n);
    public BigInteger ClearBit(int n);
    public BigInteger FlipBit(int n);
    private BigInteger FlipExistingBit(int n);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal : object {
    private BigInteger bigInt;
    private int scale;
    public int IntValue { get; }
    public long LongValue { get; }
    public int Scale { get; }
    public SimpleBigDecimal(BigInteger bigInt, int scale);
    private SimpleBigDecimal(SimpleBigDecimal limBigDec);
    public static SimpleBigDecimal GetInstance(BigInteger val, int scale);
    private void CheckScale(SimpleBigDecimal b);
    public SimpleBigDecimal AdjustScale(int newScale);
    public SimpleBigDecimal Add(SimpleBigDecimal b);
    public SimpleBigDecimal Add(BigInteger b);
    public SimpleBigDecimal Negate();
    public SimpleBigDecimal Subtract(SimpleBigDecimal b);
    public SimpleBigDecimal Subtract(BigInteger b);
    public SimpleBigDecimal Multiply(SimpleBigDecimal b);
    public SimpleBigDecimal Multiply(BigInteger b);
    public SimpleBigDecimal Divide(SimpleBigDecimal b);
    public SimpleBigDecimal Divide(BigInteger b);
    public SimpleBigDecimal ShiftLeft(int n);
    public int CompareTo(SimpleBigDecimal val);
    public int CompareTo(BigInteger val);
    public BigInteger Floor();
    public BigInteger Round();
    public int get_IntValue();
    public long get_LongValue();
    public int get_Scale();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Abc.Tnaf : object {
    private static BigInteger MinusOne;
    private static BigInteger MinusTwo;
    private static BigInteger MinusThree;
    private static BigInteger Four;
    public static sbyte Width;
    public static sbyte Pow2Width;
    public static ZTauElement[] Alpha0;
    public static SByte[][] Alpha0Tnaf;
    public static ZTauElement[] Alpha1;
    public static SByte[][] Alpha1Tnaf;
    private static Tnaf();
    public static BigInteger Norm(sbyte mu, ZTauElement lambda);
    public static SimpleBigDecimal Norm(sbyte mu, SimpleBigDecimal u, SimpleBigDecimal v);
    public static ZTauElement Round(SimpleBigDecimal lambda0, SimpleBigDecimal lambda1, sbyte mu);
    public static SimpleBigDecimal ApproximateDivisionByN(BigInteger k, BigInteger s, BigInteger vm, sbyte a, int m, int c);
    public static SByte[] TauAdicNaf(sbyte mu, ZTauElement lambda);
    public static AbstractF2mPoint Tau(AbstractF2mPoint p);
    public static sbyte GetMu(AbstractF2mCurve curve);
    public static sbyte GetMu(ECFieldElement curveA);
    public static sbyte GetMu(int curveA);
    public static BigInteger[] GetLucas(sbyte mu, int k, bool doV);
    public static BigInteger GetTw(sbyte mu, int w);
    public static BigInteger[] GetSi(AbstractF2mCurve curve);
    public static BigInteger[] GetSi(int fieldSize, int curveA, BigInteger cofactor);
    protected static int GetShiftsForCofactor(BigInteger h);
    public static ZTauElement PartModReduction(BigInteger k, int m, sbyte a, BigInteger[] s, sbyte mu, sbyte c);
    public static AbstractF2mPoint MultiplyRTnaf(AbstractF2mPoint p, BigInteger k);
    public static AbstractF2mPoint MultiplyTnaf(AbstractF2mPoint p, ZTauElement lambda);
    public static AbstractF2mPoint MultiplyFromTnaf(AbstractF2mPoint p, SByte[] u);
    public static SByte[] TauAdicWNaf(sbyte mu, ZTauElement lambda, sbyte width, BigInteger pow2w, BigInteger tw, ZTauElement[] alpha);
    public static AbstractF2mPoint[] GetPreComp(AbstractF2mPoint p, sbyte a);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Abc.ZTauElement : object {
    public BigInteger u;
    public BigInteger v;
    public ZTauElement(BigInteger u, BigInteger v);
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.AbstractF2mCurve : ECCurve {
    private BigInteger[] si;
    public bool IsKoblitz { get; }
    protected AbstractF2mCurve(int m, int k1, int k2, int k3);
    public static BigInteger Inverse(int m, Int32[] ks, BigInteger x);
    private static IFiniteField BuildField(int m, int k1, int k2, int k3);
    public virtual bool IsValidFieldElement(BigInteger x);
    public virtual ECPoint CreatePoint(BigInteger x, BigInteger y, bool withCompression);
    protected virtual ECPoint DecompressPoint(int yTilde, BigInteger X1);
    internal ECFieldElement SolveQuadraticEquation(ECFieldElement beta);
    internal virtual BigInteger[] GetSi();
    public virtual bool get_IsKoblitz();
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement : ECFieldElement {
    public virtual ECFieldElement HalfTrace();
    public virtual int Trace();
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.AbstractF2mPoint : ECPointBase {
    protected AbstractF2mPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression);
    protected AbstractF2mPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression);
    protected virtual bool SatisfiesCurveEquation();
    protected virtual bool SatisfiesOrder();
    public virtual ECPoint ScaleX(ECFieldElement scale);
    public virtual ECPoint ScaleY(ECFieldElement scale);
    public virtual ECPoint Subtract(ECPoint b);
    public virtual AbstractF2mPoint Tau();
    public virtual AbstractF2mPoint TauPow(int pow);
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.AbstractFpCurve : ECCurve {
    protected AbstractFpCurve(BigInteger q);
    public virtual bool IsValidFieldElement(BigInteger x);
    protected virtual ECPoint DecompressPoint(int yTilde, BigInteger X1);
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.AbstractFpFieldElement : ECFieldElement {
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.AbstractFpPoint : ECPointBase {
    protected internal bool CompressionYTilde { get; }
    protected AbstractFpPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression);
    protected AbstractFpPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression);
    protected internal virtual bool get_CompressionYTilde();
    protected virtual bool SatisfiesCurveEquation();
    public virtual ECPoint Subtract(ECPoint b);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.ECAlgorithms : object {
    public static bool IsF2mCurve(ECCurve c);
    public static bool IsF2mField(IFiniteField field);
    public static bool IsFpCurve(ECCurve c);
    public static bool IsFpField(IFiniteField field);
    public static ECPoint SumOfMultiplies(ECPoint[] ps, BigInteger[] ks);
    public static ECPoint SumOfTwoMultiplies(ECPoint P, BigInteger a, ECPoint Q, BigInteger b);
    public static ECPoint ShamirsTrick(ECPoint P, BigInteger k, ECPoint Q, BigInteger l);
    public static ECPoint ImportPoint(ECCurve c, ECPoint p);
    public static void MontgomeryTrick(ECFieldElement[] zs, int off, int len);
    public static void MontgomeryTrick(ECFieldElement[] zs, int off, int len, ECFieldElement scale);
    public static ECPoint ReferenceMultiply(ECPoint p, BigInteger k);
    public static ECPoint ValidatePoint(ECPoint p);
    public static ECPoint CleanPoint(ECCurve c, ECPoint p);
    internal static ECPoint ImplCheckResult(ECPoint p);
    internal static ECPoint ImplShamirsTrickJsf(ECPoint P, BigInteger k, ECPoint Q, BigInteger l);
    internal static ECPoint ImplShamirsTrickWNaf(ECPoint P, BigInteger k, ECPoint Q, BigInteger l);
    internal static ECPoint ImplShamirsTrickWNaf(ECPoint P, BigInteger k, ECPointMap pointMapQ, BigInteger l);
    private static ECPoint ImplShamirsTrickWNaf(ECPoint[] preCompP, ECPoint[] preCompNegP, Byte[] wnafP, ECPoint[] preCompQ, ECPoint[] preCompNegQ, Byte[] wnafQ);
    internal static ECPoint ImplSumOfMultiplies(ECPoint[] ps, BigInteger[] ks);
    internal static ECPoint ImplSumOfMultipliesGlv(ECPoint[] ps, BigInteger[] ks, GlvEndomorphism glvEndomorphism);
    internal static ECPoint ImplSumOfMultiplies(ECPoint[] ps, ECPointMap pointMap, BigInteger[] ks);
    private static ECPoint ImplSumOfMultiplies(Boolean[] negs, WNafPreCompInfo[] infos, Byte[][] wnafs);
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.ECCurve : object {
    public static int COORD_AFFINE;
    public static int COORD_HOMOGENEOUS;
    public static int COORD_JACOBIAN;
    public static int COORD_JACOBIAN_CHUDNOVSKY;
    public static int COORD_JACOBIAN_MODIFIED;
    public static int COORD_LAMBDA_AFFINE;
    public static int COORD_LAMBDA_PROJECTIVE;
    public static int COORD_SKEWED;
    protected IFiniteField m_field;
    protected ECFieldElement m_a;
    protected ECFieldElement m_b;
    protected BigInteger m_order;
    protected BigInteger m_cofactor;
    protected int m_coord;
    protected ECEndomorphism m_endomorphism;
    protected ECMultiplier m_multiplier;
    public int FieldSize { get; }
    public ECPoint Infinity { get; }
    public IFiniteField Field { get; }
    public ECFieldElement A { get; }
    public ECFieldElement B { get; }
    public BigInteger Order { get; }
    public BigInteger Cofactor { get; }
    public int CoordinateSystem { get; }
    protected ECCurve(IFiniteField field);
    public static Int32[] GetAllCoordinateSystems();
    public abstract virtual int get_FieldSize();
    public abstract virtual ECFieldElement FromBigInteger(BigInteger x);
    public abstract virtual bool IsValidFieldElement(BigInteger x);
    public virtual Config Configure();
    public virtual ECPoint ValidatePoint(BigInteger x, BigInteger y);
    public virtual ECPoint ValidatePoint(BigInteger x, BigInteger y, bool withCompression);
    public virtual ECPoint CreatePoint(BigInteger x, BigInteger y);
    public virtual ECPoint CreatePoint(BigInteger x, BigInteger y, bool withCompression);
    protected abstract virtual ECCurve CloneCurve();
    protected internal abstract virtual ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression);
    protected internal abstract virtual ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression);
    protected virtual ECMultiplier CreateDefaultMultiplier();
    public virtual bool SupportsCoordinateSystem(int coord);
    public virtual PreCompInfo GetPreCompInfo(ECPoint point, string name);
    public virtual PreCompInfo Precompute(ECPoint point, string name, IPreCompCallback callback);
    public virtual ECPoint ImportPoint(ECPoint p);
    public virtual void NormalizeAll(ECPoint[] points);
    public virtual void NormalizeAll(ECPoint[] points, int off, int len, ECFieldElement iso);
    public abstract virtual ECPoint get_Infinity();
    public virtual IFiniteField get_Field();
    public virtual ECFieldElement get_A();
    public virtual ECFieldElement get_B();
    public virtual BigInteger get_Order();
    public virtual BigInteger get_Cofactor();
    public virtual int get_CoordinateSystem();
    public virtual ECLookupTable CreateCacheSafeLookupTable(ECPoint[] points, int off, int len);
    protected virtual void CheckPoint(ECPoint point);
    protected virtual void CheckPoints(ECPoint[] points);
    protected virtual void CheckPoints(ECPoint[] points, int off, int len);
    public virtual bool Equals(ECCurve other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected abstract virtual ECPoint DecompressPoint(int yTilde, BigInteger X1);
    public virtual ECEndomorphism GetEndomorphism();
    public virtual ECMultiplier GetMultiplier();
    public virtual ECPoint DecodePoint(Byte[] encoded);
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.ECFieldElement : object {
    public string FieldName { get; }
    public int FieldSize { get; }
    public int BitLength { get; }
    public bool IsOne { get; }
    public bool IsZero { get; }
    public abstract virtual BigInteger ToBigInteger();
    public abstract virtual string get_FieldName();
    public abstract virtual int get_FieldSize();
    public abstract virtual ECFieldElement Add(ECFieldElement b);
    public abstract virtual ECFieldElement AddOne();
    public abstract virtual ECFieldElement Subtract(ECFieldElement b);
    public abstract virtual ECFieldElement Multiply(ECFieldElement b);
    public abstract virtual ECFieldElement Divide(ECFieldElement b);
    public abstract virtual ECFieldElement Negate();
    public abstract virtual ECFieldElement Square();
    public abstract virtual ECFieldElement Invert();
    public abstract virtual ECFieldElement Sqrt();
    public virtual int get_BitLength();
    public virtual bool get_IsOne();
    public virtual bool get_IsZero();
    public virtual ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y);
    public virtual ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y);
    public virtual ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y);
    public virtual ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y);
    public virtual ECFieldElement SquarePow(int pow);
    public virtual bool TestBitZero();
    public virtual bool Equals(object obj);
    public virtual bool Equals(ECFieldElement other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual Byte[] GetEncoded();
}
internal interface Renci.SshNet.Security.Org.BouncyCastle.Math.EC.ECLookupTable {
    public int Size { get; }
    public abstract virtual int get_Size();
    public abstract virtual ECPoint Lookup(int index);
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.ECPoint : object {
    protected static ECFieldElement[] EMPTY_ZS;
    protected internal ECCurve m_curve;
    protected internal ECFieldElement m_x;
    protected internal ECFieldElement m_y;
    protected internal ECFieldElement[] m_zs;
    protected internal bool m_withCompression;
    protected internal IDictionary m_preCompTable;
    public ECCurve Curve { get; }
    protected int CurveCoordinateSystem { get; }
    public ECFieldElement AffineXCoord { get; }
    public ECFieldElement AffineYCoord { get; }
    public ECFieldElement XCoord { get; }
    public ECFieldElement YCoord { get; }
    protected internal ECFieldElement RawXCoord { get; }
    protected internal ECFieldElement RawYCoord { get; }
    protected internal ECFieldElement[] RawZCoords { get; }
    public bool IsInfinity { get; }
    public bool IsCompressed { get; }
    protected internal bool CompressionYTilde { get; }
    protected ECPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression);
    internal ECPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression);
    private static ECPoint();
    protected static ECFieldElement[] GetInitialZCoords(ECCurve curve);
    protected abstract virtual bool SatisfiesCurveEquation();
    protected virtual bool SatisfiesOrder();
    public ECPoint GetDetachedPoint();
    public virtual ECCurve get_Curve();
    protected abstract virtual ECPoint Detach();
    protected virtual int get_CurveCoordinateSystem();
    public virtual ECFieldElement get_AffineXCoord();
    public virtual ECFieldElement get_AffineYCoord();
    public virtual ECFieldElement get_XCoord();
    public virtual ECFieldElement get_YCoord();
    public virtual ECFieldElement GetZCoord(int index);
    public virtual ECFieldElement[] GetZCoords();
    protected internal ECFieldElement get_RawXCoord();
    protected internal ECFieldElement get_RawYCoord();
    protected internal ECFieldElement[] get_RawZCoords();
    protected virtual void CheckNormalized();
    public virtual bool IsNormalized();
    public virtual ECPoint Normalize();
    internal virtual ECPoint Normalize(ECFieldElement zInv);
    protected virtual ECPoint CreateScaledPoint(ECFieldElement sx, ECFieldElement sy);
    public bool get_IsInfinity();
    public bool get_IsCompressed();
    public bool IsValid();
    internal bool IsValidPartial();
    internal bool ImplIsValid(bool decompressed, bool checkOrder);
    public virtual ECPoint ScaleX(ECFieldElement scale);
    public virtual ECPoint ScaleY(ECFieldElement scale);
    public virtual bool Equals(object obj);
    public virtual bool Equals(ECPoint other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual Byte[] GetEncoded();
    public abstract virtual Byte[] GetEncoded(bool compressed);
    protected internal abstract virtual bool get_CompressionYTilde();
    public abstract virtual ECPoint Add(ECPoint b);
    public abstract virtual ECPoint Subtract(ECPoint b);
    public abstract virtual ECPoint Negate();
    public virtual ECPoint TimesPow2(int e);
    public abstract virtual ECPoint Twice();
    public abstract virtual ECPoint Multiply(BigInteger b);
    public virtual ECPoint TwicePlus(ECPoint b);
    public virtual ECPoint ThreeTimes();
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.ECPointBase : ECPoint {
    protected internal ECPointBase(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression);
    protected internal ECPointBase(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression);
    public virtual Byte[] GetEncoded(bool compressed);
    public virtual ECPoint Multiply(BigInteger k);
}
internal interface Renci.SshNet.Security.Org.BouncyCastle.Math.EC.ECPointMap {
    public abstract virtual ECPoint Map(ECPoint p);
}
internal interface Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism {
    public ECPointMap PointMap { get; }
    public bool HasEfficientPointMap { get; }
    public abstract virtual ECPointMap get_PointMap();
    public abstract virtual bool get_HasEfficientPointMap();
}
internal interface Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Endo.GlvEndomorphism {
    public abstract virtual BigInteger[] DecomposeScalar(BigInteger k);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.F2mCurve : AbstractF2mCurve {
    private static int F2M_DEFAULT_COORDS;
    private int m;
    private int k1;
    private int k2;
    private int k3;
    protected F2mPoint m_infinity;
    public int FieldSize { get; }
    public ECPoint Infinity { get; }
    public int M { get; }
    public int K1 { get; }
    public int K2 { get; }
    public int K3 { get; }
    [ObsoleteAttribute("Use constructor taking order/cofactor")]
public F2mCurve(int m, int k, BigInteger a, BigInteger b);
    public F2mCurve(int m, int k, BigInteger a, BigInteger b, BigInteger order, BigInteger cofactor);
    [ObsoleteAttribute("Use constructor taking order/cofactor")]
public F2mCurve(int m, int k1, int k2, int k3, BigInteger a, BigInteger b);
    public F2mCurve(int m, int k1, int k2, int k3, BigInteger a, BigInteger b, BigInteger order, BigInteger cofactor);
    protected F2mCurve(int m, int k1, int k2, int k3, ECFieldElement a, ECFieldElement b, BigInteger order, BigInteger cofactor);
    protected virtual ECCurve CloneCurve();
    public virtual bool SupportsCoordinateSystem(int coord);
    protected virtual ECMultiplier CreateDefaultMultiplier();
    public virtual int get_FieldSize();
    public virtual ECFieldElement FromBigInteger(BigInteger x);
    protected internal virtual ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression);
    protected internal virtual ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression);
    public virtual ECPoint get_Infinity();
    public int get_M();
    public bool IsTrinomial();
    public int get_K1();
    public int get_K2();
    public int get_K3();
    public virtual ECLookupTable CreateCacheSafeLookupTable(ECPoint[] points, int off, int len);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.F2mFieldElement : AbstractF2mFieldElement {
    public static int Gnb;
    public static int Tpb;
    public static int Ppb;
    private int representation;
    private int m;
    private Int32[] ks;
    internal LongArray x;
    public int BitLength { get; }
    public bool IsOne { get; }
    public bool IsZero { get; }
    public string FieldName { get; }
    public int FieldSize { get; }
    public int Representation { get; }
    public int M { get; }
    public int K1 { get; }
    public int K2 { get; }
    public int K3 { get; }
    public F2mFieldElement(int m, int k1, int k2, int k3, BigInteger x);
    public F2mFieldElement(int m, int k, BigInteger x);
    internal F2mFieldElement(int m, Int32[] ks, LongArray x);
    public virtual int get_BitLength();
    public virtual bool get_IsOne();
    public virtual bool get_IsZero();
    public virtual bool TestBitZero();
    public virtual BigInteger ToBigInteger();
    public virtual string get_FieldName();
    public virtual int get_FieldSize();
    public static void CheckFieldElements(ECFieldElement a, ECFieldElement b);
    public virtual ECFieldElement Add(ECFieldElement b);
    public virtual ECFieldElement AddOne();
    public virtual ECFieldElement Subtract(ECFieldElement b);
    public virtual ECFieldElement Multiply(ECFieldElement b);
    public virtual ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y);
    public virtual ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y);
    public virtual ECFieldElement Divide(ECFieldElement b);
    public virtual ECFieldElement Negate();
    public virtual ECFieldElement Square();
    public virtual ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y);
    public virtual ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y);
    public virtual ECFieldElement SquarePow(int pow);
    public virtual ECFieldElement Invert();
    public virtual ECFieldElement Sqrt();
    public int get_Representation();
    public int get_M();
    public int get_K1();
    public int get_K2();
    public int get_K3();
    public virtual bool Equals(object obj);
    public virtual bool Equals(F2mFieldElement other);
    public virtual int GetHashCode();
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.F2mPoint : AbstractF2mPoint {
    public ECFieldElement YCoord { get; }
    protected internal bool CompressionYTilde { get; }
    public F2mPoint(ECCurve curve, ECFieldElement x, ECFieldElement y);
    public F2mPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression);
    internal F2mPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression);
    protected virtual ECPoint Detach();
    public virtual ECFieldElement get_YCoord();
    protected internal virtual bool get_CompressionYTilde();
    public virtual ECPoint Add(ECPoint b);
    public virtual ECPoint Twice();
    public virtual ECPoint TwicePlus(ECPoint b);
    public virtual ECPoint Negate();
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.FpCurve : AbstractFpCurve {
    private static int FP_DEFAULT_COORDS;
    protected BigInteger m_q;
    protected BigInteger m_r;
    protected FpPoint m_infinity;
    public BigInteger Q { get; }
    public ECPoint Infinity { get; }
    public int FieldSize { get; }
    public FpCurve(BigInteger q, BigInteger a, BigInteger b);
    public FpCurve(BigInteger q, BigInteger a, BigInteger b, BigInteger order, BigInteger cofactor);
    protected FpCurve(BigInteger q, BigInteger r, ECFieldElement a, ECFieldElement b);
    protected FpCurve(BigInteger q, BigInteger r, ECFieldElement a, ECFieldElement b, BigInteger order, BigInteger cofactor);
    protected virtual ECCurve CloneCurve();
    public virtual bool SupportsCoordinateSystem(int coord);
    public virtual BigInteger get_Q();
    public virtual ECPoint get_Infinity();
    public virtual int get_FieldSize();
    public virtual ECFieldElement FromBigInteger(BigInteger x);
    protected internal virtual ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression);
    protected internal virtual ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression);
    public virtual ECPoint ImportPoint(ECPoint p);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.FpFieldElement : AbstractFpFieldElement {
    private BigInteger q;
    private BigInteger r;
    private BigInteger x;
    public string FieldName { get; }
    public int FieldSize { get; }
    public BigInteger Q { get; }
    [ObsoleteAttribute("Use ECCurve.FromBigInteger to construct field elements")]
public FpFieldElement(BigInteger q, BigInteger x);
    internal FpFieldElement(BigInteger q, BigInteger r, BigInteger x);
    internal static BigInteger CalculateResidue(BigInteger p);
    public virtual BigInteger ToBigInteger();
    public virtual string get_FieldName();
    public virtual int get_FieldSize();
    public BigInteger get_Q();
    public virtual ECFieldElement Add(ECFieldElement b);
    public virtual ECFieldElement AddOne();
    public virtual ECFieldElement Subtract(ECFieldElement b);
    public virtual ECFieldElement Multiply(ECFieldElement b);
    public virtual ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y);
    public virtual ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y);
    public virtual ECFieldElement Divide(ECFieldElement b);
    public virtual ECFieldElement Negate();
    public virtual ECFieldElement Square();
    public virtual ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y);
    public virtual ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y);
    public virtual ECFieldElement Invert();
    public virtual ECFieldElement Sqrt();
    private ECFieldElement CheckSqrt(ECFieldElement z);
    private BigInteger[] LucasSequence(BigInteger P, BigInteger Q, BigInteger k);
    protected virtual BigInteger ModAdd(BigInteger x1, BigInteger x2);
    protected virtual BigInteger ModDouble(BigInteger x);
    protected virtual BigInteger ModHalf(BigInteger x);
    protected virtual BigInteger ModHalfAbs(BigInteger x);
    protected virtual BigInteger ModInverse(BigInteger x);
    protected virtual BigInteger ModMult(BigInteger x1, BigInteger x2);
    protected virtual BigInteger ModReduce(BigInteger x);
    protected virtual BigInteger ModSubtract(BigInteger x1, BigInteger x2);
    public virtual bool Equals(object obj);
    public virtual bool Equals(FpFieldElement other);
    public virtual int GetHashCode();
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.FpPoint : AbstractFpPoint {
    public FpPoint(ECCurve curve, ECFieldElement x, ECFieldElement y);
    public FpPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression);
    internal FpPoint(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression);
    protected virtual ECPoint Detach();
    public virtual ECFieldElement GetZCoord(int index);
    public virtual ECPoint Add(ECPoint b);
    public virtual ECPoint Twice();
    public virtual ECPoint TwicePlus(ECPoint b);
    public virtual ECPoint ThreeTimes();
    public virtual ECPoint TimesPow2(int e);
    protected virtual ECFieldElement Two(ECFieldElement x);
    protected virtual ECFieldElement Three(ECFieldElement x);
    protected virtual ECFieldElement Four(ECFieldElement x);
    protected virtual ECFieldElement Eight(ECFieldElement x);
    protected virtual ECFieldElement DoubleProductFromSquares(ECFieldElement a, ECFieldElement b, ECFieldElement aSquared, ECFieldElement bSquared);
    public virtual ECPoint Negate();
    protected virtual ECFieldElement CalculateJacobianModifiedW(ECFieldElement Z, ECFieldElement ZSquared);
    protected virtual ECFieldElement GetJacobianModifiedW();
    protected virtual FpPoint TwiceJacobianModified(bool calculateW);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.LongArray : object {
    private static UInt16[] INTERLEAVE2_TABLE;
    private static Int32[] INTERLEAVE3_TABLE;
    private static Int32[] INTERLEAVE4_TABLE;
    private static Int32[] INTERLEAVE5_TABLE;
    private static Int64[] INTERLEAVE7_TABLE;
    private static string ZEROES;
    internal static Byte[] BitLengths;
    private Int64[] m_ints;
    public int Length { get; }
    public LongArray(int intLen);
    public LongArray(Int64[] ints);
    public LongArray(Int64[] ints, int off, int len);
    public LongArray(BigInteger bigInt);
    private static LongArray();
    internal void CopyTo(Int64[] z, int zOff);
    public bool IsOne();
    public bool IsZero();
    public int GetUsedLength();
    public int GetUsedLengthFrom(int from);
    public int Degree();
    private int DegreeFrom(int limit);
    private static int BitLength(long w);
    private Int64[] ResizedInts(int newLen);
    public BigInteger ToBigInteger();
    private static long ShiftUp(Int64[] x, int xOff, int count, int shift);
    private static long ShiftUp(Int64[] x, int xOff, Int64[] z, int zOff, int count, int shift);
    public LongArray AddOne();
    private void AddShiftedByBitsSafe(LongArray other, int otherDegree, int bits);
    private static long AddShiftedUp(Int64[] x, int xOff, Int64[] y, int yOff, int count, int shift);
    private static long AddShiftedDown(Int64[] x, int xOff, Int64[] y, int yOff, int count, int shift);
    public void AddShiftedByWords(LongArray other, int words);
    private static void Add(Int64[] x, int xOff, Int64[] y, int yOff, int count);
    private static void Add(Int64[] x, int xOff, Int64[] y, int yOff, Int64[] z, int zOff, int count);
    private static void AddBoth(Int64[] x, int xOff, Int64[] y1, int y1Off, Int64[] y2, int y2Off, int count);
    private static void Distribute(Int64[] x, int src, int dst1, int dst2, int count);
    public int get_Length();
    private static void FlipWord(Int64[] buf, int off, int bit, long word);
    public bool TestBitZero();
    private static bool TestBit(Int64[] buf, int off, int n);
    private static void FlipBit(Int64[] buf, int off, int n);
    private static void MultiplyWord(long a, Int64[] b, int bLen, Int64[] c, int cOff);
    public LongArray ModMultiplyLD(LongArray other, int m, Int32[] ks);
    public LongArray ModMultiply(LongArray other, int m, Int32[] ks);
    public LongArray ModMultiplyAlt(LongArray other, int m, Int32[] ks);
    public LongArray ModReduce(int m, Int32[] ks);
    public LongArray Multiply(LongArray other, int m, Int32[] ks);
    public void Reduce(int m, Int32[] ks);
    private static LongArray ReduceResult(Int64[] buf, int off, int len, int m, Int32[] ks);
    private static int ReduceInPlace(Int64[] buf, int off, int len, int m, Int32[] ks);
    private static void ReduceBitWise(Int64[] buf, int off, int BitLength, int m, Int32[] ks);
    private static void ReduceBit(Int64[] buf, int off, int bit, int m, Int32[] ks);
    private static void ReduceWordWise(Int64[] buf, int off, int len, int toBit, int m, Int32[] ks);
    private static void ReduceWord(Int64[] buf, int off, int bit, long word, int m, Int32[] ks);
    private static void ReduceVectorWise(Int64[] buf, int off, int len, int words, int m, Int32[] ks);
    private static void FlipVector(Int64[] x, int xOff, Int64[] y, int yOff, int yLen, int bits);
    public LongArray ModSquare(int m, Int32[] ks);
    public LongArray ModSquareN(int n, int m, Int32[] ks);
    public LongArray Square(int m, Int32[] ks);
    private static void SquareInPlace(Int64[] x, int xLen, int m, Int32[] ks);
    private static void Interleave(Int64[] x, int xOff, Int64[] z, int zOff, int count, int width);
    private static void Interleave3(Int64[] x, int xOff, Int64[] z, int zOff, int count);
    private static long Interleave3(long x);
    private static long Interleave3_21to63(int x);
    private static void Interleave5(Int64[] x, int xOff, Int64[] z, int zOff, int count);
    private static long Interleave5(long x);
    private static long Interleave3_13to65(int x);
    private static void Interleave7(Int64[] x, int xOff, Int64[] z, int zOff, int count);
    private static long Interleave7(long x);
    private static void Interleave2_n(Int64[] x, int xOff, Int64[] z, int zOff, int count, int rounds);
    private static long Interleave2_n(long x, int rounds);
    private static long Interleave4_16to64(int x);
    private static long Interleave2_32to64(int x);
    public LongArray ModInverse(int m, Int32[] ks);
    public virtual bool Equals(object obj);
    public virtual bool Equals(LongArray other);
    public virtual int GetHashCode();
    public LongArray Copy();
    public virtual string ToString();
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier : object {
    public virtual ECPoint Multiply(ECPoint p, BigInteger k);
    protected abstract virtual ECPoint MultiplyPositive(ECPoint p, BigInteger k);
    protected virtual ECPoint CheckResult(ECPoint p);
}
internal interface Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier {
    public abstract virtual ECPoint Multiply(ECPoint p, BigInteger k);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Multiplier.FixedPointCombMultiplier : AbstractECMultiplier {
    protected virtual ECPoint MultiplyPositive(ECPoint p, BigInteger k);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo : object {
    protected ECPoint m_offset;
    protected ECLookupTable m_lookupTable;
    protected int m_width;
    public ECLookupTable LookupTable { get; public set; }
    public ECPoint Offset { get; public set; }
    public int Width { get; public set; }
    public virtual ECLookupTable get_LookupTable();
    public virtual void set_LookupTable(ECLookupTable value);
    public virtual ECPoint get_Offset();
    public virtual void set_Offset(ECPoint value);
    public virtual int get_Width();
    public virtual void set_Width(int value);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Multiplier.FixedPointUtilities : object {
    public static string PRECOMP_NAME;
    private static FixedPointUtilities();
    public static int GetCombSize(ECCurve c);
    public static FixedPointPreCompInfo GetFixedPointPreCompInfo(PreCompInfo preCompInfo);
    public static FixedPointPreCompInfo Precompute(ECPoint p);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Multiplier.GlvMultiplier : AbstractECMultiplier {
    protected ECCurve curve;
    protected GlvEndomorphism glvEndomorphism;
    public GlvMultiplier(ECCurve curve, GlvEndomorphism glvEndomorphism);
    protected virtual ECPoint MultiplyPositive(ECPoint p, BigInteger k);
}
internal interface Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback {
    public abstract virtual PreCompInfo Precompute(PreCompInfo existing);
}
internal interface Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo {
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Multiplier.ValidityPreCompInfo : object {
    internal static string PRECOMP_NAME;
    private bool failed;
    private bool curveEquationPassed;
    private bool orderPassed;
    private static ValidityPreCompInfo();
    internal bool HasFailed();
    internal void ReportFailed();
    internal bool HasCurveEquationPassed();
    internal void ReportCurveEquationPassed();
    internal bool HasOrderPassed();
    internal void ReportOrderPassed();
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Multiplier.WNafL2RMultiplier : AbstractECMultiplier {
    protected virtual ECPoint MultiplyPositive(ECPoint p, BigInteger k);
    protected virtual int GetWindowSize(int bits);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo : object {
    protected ECPoint[] m_preComp;
    protected ECPoint[] m_preCompNeg;
    protected ECPoint m_twice;
    public ECPoint[] PreComp { get; public set; }
    public ECPoint[] PreCompNeg { get; public set; }
    public ECPoint Twice { get; public set; }
    public virtual ECPoint[] get_PreComp();
    public virtual void set_PreComp(ECPoint[] value);
    public virtual ECPoint[] get_PreCompNeg();
    public virtual void set_PreCompNeg(ECPoint[] value);
    public virtual ECPoint get_Twice();
    public virtual void set_Twice(ECPoint value);
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities : object {
    public static string PRECOMP_NAME;
    private static Int32[] DEFAULT_WINDOW_SIZE_CUTOFFS;
    private static ECPoint[] EMPTY_POINTS;
    private static WNafUtilities();
    public static Int32[] GenerateCompactNaf(BigInteger k);
    public static Int32[] GenerateCompactWindowNaf(int width, BigInteger k);
    public static Byte[] GenerateJsf(BigInteger g, BigInteger h);
    public static Byte[] GenerateNaf(BigInteger k);
    public static Byte[] GenerateWindowNaf(int width, BigInteger k);
    public static int GetNafWeight(BigInteger k);
    public static WNafPreCompInfo GetWNafPreCompInfo(ECPoint p);
    public static WNafPreCompInfo GetWNafPreCompInfo(PreCompInfo preCompInfo);
    public static int GetWindowSize(int bits);
    public static int GetWindowSize(int bits, Int32[] windowSizeCutoffs);
    public static ECPoint MapPointWithPrecomp(ECPoint p, int width, bool includeNegated, ECPointMap pointMap);
    public static WNafPreCompInfo Precompute(ECPoint p, int width, bool includeNegated);
    private static Byte[] Trim(Byte[] a, int length);
    private static Int32[] Trim(Int32[] a, int length);
    private static ECPoint[] ResizeTable(ECPoint[] a, int length);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Multiplier.WTauNafMultiplier : AbstractECMultiplier {
    internal static string PRECOMP_NAME;
    private static WTauNafMultiplier();
    protected virtual ECPoint MultiplyPositive(ECPoint point, BigInteger k);
    private AbstractF2mPoint MultiplyWTnaf(AbstractF2mPoint p, ZTauElement lambda, sbyte a, sbyte mu);
    private static AbstractF2mPoint MultiplyFromWTnaf(AbstractF2mPoint p, SByte[] u);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.EC.Multiplier.WTauNafPreCompInfo : object {
    protected AbstractF2mPoint[] m_preComp;
    public AbstractF2mPoint[] PreComp { get; public set; }
    public virtual AbstractF2mPoint[] get_PreComp();
    public virtual void set_PreComp(AbstractF2mPoint[] value);
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Math.Field.FiniteFields : object {
    internal static IFiniteField GF_2;
    internal static IFiniteField GF_3;
    private static FiniteFields();
    public static IPolynomialExtensionField GetBinaryExtensionField(Int32[] exponents);
    public static IFiniteField GetPrimeField(BigInteger characteristic);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.Field.GenericPolynomialExtensionField : object {
    protected IFiniteField subfield;
    protected IPolynomial minimalPolynomial;
    public BigInteger Characteristic { get; }
    public int Dimension { get; }
    public IFiniteField Subfield { get; }
    public int Degree { get; }
    public IPolynomial MinimalPolynomial { get; }
    internal GenericPolynomialExtensionField(IFiniteField subfield, IPolynomial polynomial);
    public virtual BigInteger get_Characteristic();
    public virtual int get_Dimension();
    public virtual IFiniteField get_Subfield();
    public virtual int get_Degree();
    public virtual IPolynomial get_MinimalPolynomial();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.Field.GF2Polynomial : object {
    protected Int32[] exponents;
    public int Degree { get; }
    internal GF2Polynomial(Int32[] exponents);
    public virtual int get_Degree();
    public virtual Int32[] GetExponentsPresent();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal interface Renci.SshNet.Security.Org.BouncyCastle.Math.Field.IExtensionField {
    public IFiniteField Subfield { get; }
    public int Degree { get; }
    public abstract virtual IFiniteField get_Subfield();
    public abstract virtual int get_Degree();
}
internal interface Renci.SshNet.Security.Org.BouncyCastle.Math.Field.IFiniteField {
    public BigInteger Characteristic { get; }
    public int Dimension { get; }
    public abstract virtual BigInteger get_Characteristic();
    public abstract virtual int get_Dimension();
}
internal interface Renci.SshNet.Security.Org.BouncyCastle.Math.Field.IPolynomial {
    public int Degree { get; }
    public abstract virtual int get_Degree();
    public abstract virtual Int32[] GetExponentsPresent();
}
internal interface Renci.SshNet.Security.Org.BouncyCastle.Math.Field.IPolynomialExtensionField {
    public IPolynomial MinimalPolynomial { get; }
    public abstract virtual IPolynomial get_MinimalPolynomial();
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Math.Field.PrimeField : object {
    protected BigInteger characteristic;
    public BigInteger Characteristic { get; }
    public int Dimension { get; }
    internal PrimeField(BigInteger characteristic);
    public virtual BigInteger get_Characteristic();
    public virtual int get_Dimension();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Math.Raw.Mod : object {
    private static SecureRandom RandomSource;
    private static Mod();
    public static void Invert(UInt32[] p, UInt32[] x, UInt32[] z);
    public static UInt32[] Random(UInt32[] p);
    public static void Add(UInt32[] p, UInt32[] x, UInt32[] y, UInt32[] z);
    public static void Subtract(UInt32[] p, UInt32[] x, UInt32[] y, UInt32[] z);
    private static void InversionResult(UInt32[] p, int ac, UInt32[] a, UInt32[] z);
    private static void InversionStep(UInt32[] p, UInt32[] u, int uLen, UInt32[] x, Int32& xc);
    private static int GetTrailingZeroes(UInt32 x);
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Math.Raw.Nat : object {
    private static ulong M;
    public static UInt32 Add(int len, UInt32[] x, UInt32[] y, UInt32[] z);
    public static UInt32 Add33At(int len, UInt32 x, UInt32[] z, int zPos);
    public static UInt32 Add33At(int len, UInt32 x, UInt32[] z, int zOff, int zPos);
    public static UInt32 Add33To(int len, UInt32 x, UInt32[] z);
    public static UInt32 Add33To(int len, UInt32 x, UInt32[] z, int zOff);
    public static UInt32 AddBothTo(int len, UInt32[] x, UInt32[] y, UInt32[] z);
    public static UInt32 AddBothTo(int len, UInt32[] x, int xOff, UInt32[] y, int yOff, UInt32[] z, int zOff);
    public static UInt32 AddDWordAt(int len, ulong x, UInt32[] z, int zPos);
    public static UInt32 AddDWordAt(int len, ulong x, UInt32[] z, int zOff, int zPos);
    public static UInt32 AddDWordTo(int len, ulong x, UInt32[] z);
    public static UInt32 AddDWordTo(int len, ulong x, UInt32[] z, int zOff);
    public static UInt32 AddTo(int len, UInt32[] x, UInt32[] z);
    public static UInt32 AddTo(int len, UInt32[] x, int xOff, UInt32[] z, int zOff);
    public static UInt32 AddWordAt(int len, UInt32 x, UInt32[] z, int zPos);
    public static UInt32 AddWordAt(int len, UInt32 x, UInt32[] z, int zOff, int zPos);
    public static UInt32 AddWordTo(int len, UInt32 x, UInt32[] z);
    public static UInt32 AddWordTo(int len, UInt32 x, UInt32[] z, int zOff);
    public static UInt32 CAdd(int len, int mask, UInt32[] x, UInt32[] y, UInt32[] z);
    public static void CMov(int len, int mask, UInt32[] x, int xOff, UInt32[] z, int zOff);
    public static void CMov(int len, int mask, Int32[] x, int xOff, Int32[] z, int zOff);
    public static void Copy(int len, UInt32[] x, UInt32[] z);
    public static UInt32[] Copy(int len, UInt32[] x);
    public static void Copy(int len, UInt32[] x, int xOff, UInt32[] z, int zOff);
    public static UInt32[] Create(int len);
    public static UInt64[] Create64(int len);
    public static int Dec(int len, UInt32[] z);
    public static int Dec(int len, UInt32[] x, UInt32[] z);
    public static int DecAt(int len, UInt32[] z, int zPos);
    public static int DecAt(int len, UInt32[] z, int zOff, int zPos);
    public static bool Eq(int len, UInt32[] x, UInt32[] y);
    public static UInt32[] FromBigInteger(int bits, BigInteger x);
    public static UInt32 GetBit(UInt32[] x, int bit);
    public static bool Gte(int len, UInt32[] x, UInt32[] y);
    public static UInt32 Inc(int len, UInt32[] z);
    public static UInt32 Inc(int len, UInt32[] x, UInt32[] z);
    public static UInt32 IncAt(int len, UInt32[] z, int zPos);
    public static UInt32 IncAt(int len, UInt32[] z, int zOff, int zPos);
    public static bool IsOne(int len, UInt32[] x);
    public static bool IsZero(int len, UInt32[] x);
    public static void Mul(int len, UInt32[] x, UInt32[] y, UInt32[] zz);
    public static void Mul(int len, UInt32[] x, int xOff, UInt32[] y, int yOff, UInt32[] zz, int zzOff);
    public static void Mul(UInt32[] x, int xOff, int xLen, UInt32[] y, int yOff, int yLen, UInt32[] zz, int zzOff);
    public static UInt32 MulAddTo(int len, UInt32[] x, UInt32[] y, UInt32[] zz);
    public static UInt32 MulAddTo(int len, UInt32[] x, int xOff, UInt32[] y, int yOff, UInt32[] zz, int zzOff);
    public static UInt32 Mul31BothAdd(int len, UInt32 a, UInt32[] x, UInt32 b, UInt32[] y, UInt32[] z, int zOff);
    public static UInt32 MulWord(int len, UInt32 x, UInt32[] y, UInt32[] z);
    public static UInt32 MulWord(int len, UInt32 x, UInt32[] y, int yOff, UInt32[] z, int zOff);
    public static UInt32 MulWordAddTo(int len, UInt32 x, UInt32[] y, int yOff, UInt32[] z, int zOff);
    public static UInt32 MulWordDwordAddAt(int len, UInt32 x, ulong y, UInt32[] z, int zPos);
    public static UInt32 ShiftDownBit(int len, UInt32[] z, UInt32 c);
    public static UInt32 ShiftDownBit(int len, UInt32[] z, int zOff, UInt32 c);
    public static UInt32 ShiftDownBit(int len, UInt32[] x, UInt32 c, UInt32[] z);
    public static UInt32 ShiftDownBit(int len, UInt32[] x, int xOff, UInt32 c, UInt32[] z, int zOff);
    public static UInt32 ShiftDownBits(int len, UInt32[] z, int bits, UInt32 c);
    public static UInt32 ShiftDownBits(int len, UInt32[] z, int zOff, int bits, UInt32 c);
    public static UInt32 ShiftDownBits(int len, UInt32[] x, int bits, UInt32 c, UInt32[] z);
    public static UInt32 ShiftDownBits(int len, UInt32[] x, int xOff, int bits, UInt32 c, UInt32[] z, int zOff);
    public static UInt32 ShiftDownWord(int len, UInt32[] z, UInt32 c);
    public static UInt32 ShiftUpBit(int len, UInt32[] z, UInt32 c);
    public static UInt32 ShiftUpBit(int len, UInt32[] z, int zOff, UInt32 c);
    public static UInt32 ShiftUpBit(int len, UInt32[] x, UInt32 c, UInt32[] z);
    public static UInt32 ShiftUpBit(int len, UInt32[] x, int xOff, UInt32 c, UInt32[] z, int zOff);
    public static ulong ShiftUpBit64(int len, UInt64[] x, int xOff, ulong c, UInt64[] z, int zOff);
    public static UInt32 ShiftUpBits(int len, UInt32[] z, int bits, UInt32 c);
    public static UInt32 ShiftUpBits(int len, UInt32[] z, int zOff, int bits, UInt32 c);
    public static ulong ShiftUpBits64(int len, UInt64[] z, int zOff, int bits, ulong c);
    public static UInt32 ShiftUpBits(int len, UInt32[] x, int bits, UInt32 c, UInt32[] z);
    public static UInt32 ShiftUpBits(int len, UInt32[] x, int xOff, int bits, UInt32 c, UInt32[] z, int zOff);
    public static ulong ShiftUpBits64(int len, UInt64[] x, int xOff, int bits, ulong c, UInt64[] z, int zOff);
    public static void Square(int len, UInt32[] x, UInt32[] zz);
    public static void Square(int len, UInt32[] x, int xOff, UInt32[] zz, int zzOff);
    public static UInt32 SquareWordAdd(UInt32[] x, int xPos, UInt32[] z);
    public static UInt32 SquareWordAdd(UInt32[] x, int xOff, int xPos, UInt32[] z, int zOff);
    public static int Sub(int len, UInt32[] x, UInt32[] y, UInt32[] z);
    public static int Sub(int len, UInt32[] x, int xOff, UInt32[] y, int yOff, UInt32[] z, int zOff);
    public static int Sub33At(int len, UInt32 x, UInt32[] z, int zPos);
    public static int Sub33At(int len, UInt32 x, UInt32[] z, int zOff, int zPos);
    public static int Sub33From(int len, UInt32 x, UInt32[] z);
    public static int Sub33From(int len, UInt32 x, UInt32[] z, int zOff);
    public static int SubBothFrom(int len, UInt32[] x, UInt32[] y, UInt32[] z);
    public static int SubBothFrom(int len, UInt32[] x, int xOff, UInt32[] y, int yOff, UInt32[] z, int zOff);
    public static int SubDWordAt(int len, ulong x, UInt32[] z, int zPos);
    public static int SubDWordAt(int len, ulong x, UInt32[] z, int zOff, int zPos);
    public static int SubDWordFrom(int len, ulong x, UInt32[] z);
    public static int SubDWordFrom(int len, ulong x, UInt32[] z, int zOff);
    public static int SubFrom(int len, UInt32[] x, UInt32[] z);
    public static int SubFrom(int len, UInt32[] x, int xOff, UInt32[] z, int zOff);
    public static int SubWordAt(int len, UInt32 x, UInt32[] z, int zPos);
    public static int SubWordAt(int len, UInt32 x, UInt32[] z, int zOff, int zPos);
    public static int SubWordFrom(int len, UInt32 x, UInt32[] z);
    public static int SubWordFrom(int len, UInt32 x, UInt32[] z, int zOff);
    public static BigInteger ToBigInteger(int len, UInt32[] x);
    public static void Zero(int len, UInt32[] z);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Security.DigestUtilities : object {
    public static Byte[] DoFinal(IDigest digest);
    public static Byte[] DoFinal(IDigest digest, Byte[] input);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Security.SecureRandom : Random {
    private static long counter;
    private static SecureRandom master;
    protected IRandomGenerator generator;
    private static double DoubleScale;
    private static SecureRandom Master { get; }
    public SecureRandom(IRandomGenerator generator);
    private static SecureRandom();
    private static long NextCounterValue();
    private static SecureRandom get_Master();
    private static DigestRandomGenerator CreatePrng(IDigest digest, bool autoSeed);
    public static Byte[] GetNextBytes(SecureRandom secureRandom, int length);
    public virtual Byte[] GenerateSeed(int length);
    public virtual void SetSeed(Byte[] seed);
    public virtual void SetSeed(long seed);
    public virtual int Next();
    public virtual int Next(int maxValue);
    public virtual int Next(int minValue, int maxValue);
    public virtual void NextBytes(Byte[] buf);
    public virtual void NextBytes(Byte[] buf, int off, int len);
    public virtual double NextDouble();
    public virtual int NextInt();
    public virtual long NextLong();
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Security.SecurityUtilityException : Exception {
    public SecurityUtilityException(string message);
    public SecurityUtilityException(string message, Exception exception);
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Utilities.Arrays : object {
    public static Byte[] EmptyBytes;
    public static Int32[] EmptyInts;
    private static Arrays();
    public static bool AreAllZeroes(Byte[] buf, int off, int len);
    public static bool AreEqual(Boolean[] a, Boolean[] b);
    public static bool AreEqual(Char[] a, Char[] b);
    public static bool AreEqual(Byte[] a, Byte[] b);
    [ObsoleteAttribute("Use 'AreEqual' method instead")]
public static bool AreSame(Byte[] a, Byte[] b);
    public static bool ConstantTimeAreEqual(Byte[] a, Byte[] b);
    public static bool AreEqual(Int32[] a, Int32[] b);
    public static bool AreEqual(UInt32[] a, UInt32[] b);
    private static bool HaveSameContents(Boolean[] a, Boolean[] b);
    private static bool HaveSameContents(Char[] a, Char[] b);
    private static bool HaveSameContents(Byte[] a, Byte[] b);
    private static bool HaveSameContents(Int32[] a, Int32[] b);
    private static bool HaveSameContents(UInt32[] a, UInt32[] b);
    public static string ToString(Object[] a);
    public static int GetHashCode(Byte[] data);
    public static int GetHashCode(Byte[] data, int off, int len);
    public static int GetHashCode(Int32[] data);
    public static int GetHashCode(Int32[] data, int off, int len);
    public static int GetHashCode(UInt32[] data);
    public static int GetHashCode(UInt32[] data, int off, int len);
    public static int GetHashCode(UInt64[] data);
    public static int GetHashCode(UInt64[] data, int off, int len);
    public static Byte[] Clone(Byte[] data);
    public static Byte[] Clone(Byte[] data, Byte[] existing);
    public static Int32[] Clone(Int32[] data);
    internal static UInt32[] Clone(UInt32[] data);
    public static Int64[] Clone(Int64[] data);
    public static UInt64[] Clone(UInt64[] data);
    public static UInt64[] Clone(UInt64[] data, UInt64[] existing);
    public static bool Contains(Byte[] a, byte n);
    public static bool Contains(Int16[] a, short n);
    public static bool Contains(Int32[] a, int n);
    public static void Fill(Byte[] buf, byte b);
    public static void Fill(Byte[] buf, int from, int to, byte b);
    public static Byte[] CopyOf(Byte[] data, int newLength);
    public static Char[] CopyOf(Char[] data, int newLength);
    public static Int32[] CopyOf(Int32[] data, int newLength);
    public static Int64[] CopyOf(Int64[] data, int newLength);
    public static BigInteger[] CopyOf(BigInteger[] data, int newLength);
    public static Byte[] CopyOfRange(Byte[] data, int from, int to);
    public static Int32[] CopyOfRange(Int32[] data, int from, int to);
    public static Int64[] CopyOfRange(Int64[] data, int from, int to);
    public static BigInteger[] CopyOfRange(BigInteger[] data, int from, int to);
    private static int GetLength(int from, int to);
    public static Byte[] Append(Byte[] a, byte b);
    public static Int16[] Append(Int16[] a, short b);
    public static Int32[] Append(Int32[] a, int b);
    public static Byte[] Concatenate(Byte[] a, Byte[] b);
    public static Byte[] ConcatenateAll(Byte[][] vs);
    public static Int32[] Concatenate(Int32[] a, Int32[] b);
    public static Byte[] Prepend(Byte[] a, byte b);
    public static Int16[] Prepend(Int16[] a, short b);
    public static Int32[] Prepend(Int32[] a, int b);
    public static Byte[] Reverse(Byte[] a);
    public static Int32[] Reverse(Int32[] a);
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Utilities.BigIntegers : object {
    private static int MaxIterations;
    public static Byte[] AsUnsignedByteArray(BigInteger n);
    public static Byte[] AsUnsignedByteArray(int length, BigInteger n);
    public static BigInteger CreateRandomInRange(BigInteger min, BigInteger max, SecureRandom random);
    public static int GetUnsignedByteLength(BigInteger n);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Utilities.Encoders.Hex : object {
    private static HexEncoder encoder;
    private static Hex();
    public static string ToHexString(Byte[] data);
    public static string ToHexString(Byte[] data, int off, int length);
    public static Byte[] Encode(Byte[] data);
    public static Byte[] Encode(Byte[] data, int off, int length);
    public static int Encode(Byte[] data, Stream outStream);
    public static int Encode(Byte[] data, int off, int length, Stream outStream);
    public static Byte[] Decode(Byte[] data);
    public static Byte[] Decode(string data);
    public static int Decode(string data, Stream outStream);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Utilities.Encoders.HexEncoder : object {
    protected Byte[] encodingTable;
    protected Byte[] decodingTable;
    protected void InitialiseDecodingTable();
    public int Encode(Byte[] data, int off, int length, Stream outStream);
    private static bool Ignore(char c);
    public int Decode(Byte[] data, int off, int length, Stream outStream);
    public int DecodeString(string data, Stream outStream);
}
internal interface Renci.SshNet.Security.Org.BouncyCastle.Utilities.IMemoable {
    public abstract virtual IMemoable Copy();
    public abstract virtual void Reset(IMemoable other);
}
internal abstract class Renci.SshNet.Security.Org.BouncyCastle.Utilities.Integers : object {
    public static int RotateLeft(int i, int distance);
    public static UInt32 RotateLeft(UInt32 i, int distance);
    public static int RotateRight(int i, int distance);
    public static UInt32 RotateRight(UInt32 i, int distance);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Utilities.MemoableResetException : InvalidCastException {
    public MemoableResetException(string msg);
}
internal class Renci.SshNet.Security.Org.BouncyCastle.Utilities.Times : object {
    private static long NanosecondsPerTick;
    private static Times();
    public static long NanoTime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Renci.SshNet.Security.RsaKey : Key {
    [NullableAttribute("2")]
private RsaDigitalSignature _digitalSignature;
    [CompilerGeneratedAttribute]
private RSA <RSA>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <Modulus>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <Exponent>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <D>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <P>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <Q>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <DP>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <DQ>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <InverseQ>k__BackingField;
    internal RSA RSA { get; }
    public BigInteger Modulus { get; }
    public BigInteger Exponent { get; }
    public BigInteger D { get; }
    public BigInteger P { get; }
    public BigInteger Q { get; }
    public BigInteger DP { get; }
    public BigInteger DQ { get; }
    public BigInteger InverseQ { get; }
    public int KeyLength { get; }
    protected internal DigitalSignature DigitalSignature { get; }
    public BigInteger[] Public { get; }
    public RsaKey(SshKeyData publicKeyData);
    public RsaKey(Byte[] privateKeyData);
    public RsaKey(BigInteger modulus, BigInteger exponent, BigInteger d, BigInteger p, BigInteger q, BigInteger inverseQ);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
internal RSA get_RSA();
    [CompilerGeneratedAttribute]
public BigInteger get_Modulus();
    [CompilerGeneratedAttribute]
public BigInteger get_Exponent();
    [CompilerGeneratedAttribute]
public BigInteger get_D();
    [CompilerGeneratedAttribute]
public BigInteger get_P();
    [CompilerGeneratedAttribute]
public BigInteger get_Q();
    [CompilerGeneratedAttribute]
public BigInteger get_DP();
    [CompilerGeneratedAttribute]
public BigInteger get_DQ();
    [CompilerGeneratedAttribute]
public BigInteger get_InverseQ();
    public virtual int get_KeyLength();
    protected internal virtual DigitalSignature get_DigitalSignature();
    public virtual BigInteger[] get_Public();
    internal RSAParameters GetRSAParameters();
    private static BigInteger PrimeExponent(BigInteger privateExponent, BigInteger prime);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Renci.SshNet.Security.SshKeyData : SshData {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger[] <Keys>k__BackingField;
    public string Name { get; private set; }
    public BigInteger[] Keys { get; private set; }
    protected int BufferCapacity { get; }
    public SshKeyData(Byte[] data);
    public SshKeyData(string name, BigInteger[] keys);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public BigInteger[] get_Keys();
    [CompilerGeneratedAttribute]
private void set_Keys(BigInteger[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.ServiceFactory : object {
    private static int PartialSuccessLimit;
    public sealed virtual IClientAuthentication CreateClientAuthentication();
    public sealed virtual ISession CreateSession(ConnectionInfo connectionInfo, ISocketFactory socketFactory);
    public sealed virtual ISftpSession CreateSftpSession(ISession session, int operationTimeout, Encoding encoding, ISftpResponseFactory sftpMessageFactory);
    public sealed virtual PipeStream CreatePipeStream();
    public sealed virtual IKeyExchange CreateKeyExchange(IDictionary`2<string, Func`1<IKeyExchange>> clientAlgorithms, String[] serverAlgorithms);
    public sealed virtual INetConfSession CreateNetConfSession(ISession session, int operationTimeout);
    public sealed virtual ISftpFileReader CreateSftpFileReader(string fileName, ISftpSession sftpSession, UInt32 bufferSize);
    public sealed virtual ISftpResponseFactory CreateSftpResponseFactory();
    public sealed virtual ShellStream CreateShellStream(ISession session, string terminalName, UInt32 columns, UInt32 rows, UInt32 width, UInt32 height, IDictionary`2<TerminalModes, UInt32> terminalModeValues, int bufferSize);
    public sealed virtual ShellStream CreateShellStreamNoTerminal(ISession session, int bufferSize);
    public sealed virtual IRemotePathTransformation CreateRemotePathDoubleQuoteTransformation();
    public sealed virtual IConnector CreateConnector(IConnectionInfo connectionInfo, ISocketFactory socketFactory);
    public sealed virtual IProtocolVersionExchange CreateProtocolVersionExchange();
    public sealed virtual ISocketFactory CreateSocketFactory();
}
public class Renci.SshNet.Session : object {
    internal static byte CarriageReturn;
    internal static byte LineFeed;
    internal static int MaximumSshPacketSize;
    private static int InitialLocalWindowSize;
    private static int LocalChannelDataPacketSize;
    private IServiceFactory _serviceFactory;
    private ISocketFactory _socketFactory;
    private object _socketReadLock;
    private object _socketWriteLock;
    private SemaphoreSlim _socketDisposeLock;
    private SemaphoreSlim _connectLock;
    private SshMessageFactory _sshMessageFactory;
    private ManualResetEvent _messageListenerCompleted;
    private UInt32 modreq(System.Runtime.CompilerServices.IsVolatile) _outboundPacketSequence;
    private UInt32 _inboundPacketSequence;
    private EventWaitHandle _serviceAccepted;
    private EventWaitHandle _exceptionWaitHandle;
    private ManualResetEventSlim _keyExchangeCompletedWaitHandle;
    private Exception _exception;
    private bool _isAuthenticated;
    private bool _isDisconnecting;
    private bool _isInitialKex;
    private bool _isStrictKex;
    private IKeyExchange _keyExchange;
    private HashAlgorithm _serverMac;
    private HashAlgorithm _clientMac;
    private bool _serverEtm;
    private bool _clientEtm;
    private Cipher _serverCipher;
    private Cipher _clientCipher;
    private bool _serverAead;
    private bool _clientAead;
    private Compressor _serverDecompression;
    private Compressor _clientCompression;
    private SemaphoreSlim _sessionSemaphore;
    private bool _isDisconnectMessageSent;
    private int _nextChannelNumber;
    private Socket _socket;
    [CompilerGeneratedAttribute]
private Byte[] <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <ClientInitMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionInfo <ConnectionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ExceptionEventArgs> ErrorOccured;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Disconnected;
    [CompilerGeneratedAttribute]
private EventHandler`1<SshIdentificationEventArgs> ServerIdentificationReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<HostKeyEventArgs> HostKeyReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<BannerMessage>> UserAuthenticationBannerReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<InformationRequestMessage>> UserAuthenticationInformationRequestReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<PasswordChangeRequiredMessage>> UserAuthenticationPasswordChangeRequiredReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<PublicKeyMessage>> UserAuthenticationPublicKeyReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<KeyExchangeDhGroupExchangeGroup>> KeyExchangeDhGroupExchangeGroupReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<KeyExchangeDhGroupExchangeReply>> KeyExchangeDhGroupExchangeReplyReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<DisconnectMessage>> DisconnectReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<IgnoreMessage>> IgnoreReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<UnimplementedMessage>> UnimplementedReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<DebugMessage>> DebugReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<ServiceRequestMessage>> ServiceRequestReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<ServiceAcceptMessage>> ServiceAcceptReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<KeyExchangeInitMessage>> KeyExchangeInitReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<KeyExchangeDhReplyMessage>> KeyExchangeDhReplyMessageReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<KeyExchangeEcdhReplyMessage>> KeyExchangeEcdhReplyMessageReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<NewKeysMessage>> NewKeysReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<RequestMessage>> UserAuthenticationRequestReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<FailureMessage>> UserAuthenticationFailureReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<SuccessMessage>> UserAuthenticationSuccessReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<GlobalRequestMessage>> GlobalRequestReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<RequestSuccessMessage>> RequestSuccessReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<RequestFailureMessage>> RequestFailureReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<ChannelOpenMessage>> ChannelOpenReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<ChannelOpenConfirmationMessage>> ChannelOpenConfirmationReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<ChannelOpenFailureMessage>> ChannelOpenFailureReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<ChannelWindowAdjustMessage>> ChannelWindowAdjustReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<ChannelDataMessage>> ChannelDataReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<ChannelExtendedDataMessage>> ChannelExtendedDataReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<ChannelEofMessage>> ChannelEofReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<ChannelCloseMessage>> ChannelCloseReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<ChannelRequestMessage>> ChannelRequestReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<ChannelSuccessMessage>> ChannelSuccessReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs`1<ChannelFailureMessage>> ChannelFailureReceived;
    private bool _disposed;
    public SemaphoreSlim SessionSemaphore { get; }
    private UInt32 NextChannelNumber { get; }
    public bool IsConnected { get; }
    public Byte[] SessionId { get; private set; }
    public Message ClientInitMessage { get; private set; }
    public string ServerVersion { get; private set; }
    public string ClientVersion { get; private set; }
    public ConnectionInfo ConnectionInfo { get; private set; }
    private IConnectionInfo Renci.SshNet.ISession.ConnectionInfo { get; }
    private WaitHandle Renci.SshNet.ISession.MessageListenerCompleted { get; }
    internal Session(ConnectionInfo connectionInfo, IServiceFactory serviceFactory, ISocketFactory socketFactory);
    public sealed virtual SemaphoreSlim get_SessionSemaphore();
    private UInt32 get_NextChannelNumber();
    public sealed virtual bool get_IsConnected();
    [CompilerGeneratedAttribute]
public Byte[] get_SessionId();
    [CompilerGeneratedAttribute]
private void set_SessionId(Byte[] value);
    [CompilerGeneratedAttribute]
public Message get_ClientInitMessage();
    [CompilerGeneratedAttribute]
private void set_ClientInitMessage(Message value);
    [CompilerGeneratedAttribute]
public string get_ServerVersion();
    [CompilerGeneratedAttribute]
private void set_ServerVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ClientVersion();
    [CompilerGeneratedAttribute]
private void set_ClientVersion(string value);
    [CompilerGeneratedAttribute]
public ConnectionInfo get_ConnectionInfo();
    [CompilerGeneratedAttribute]
private void set_ConnectionInfo(ConnectionInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ErrorOccured(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ErrorOccured(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Disconnected(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Disconnected(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ServerIdentificationReceived(EventHandler`1<SshIdentificationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ServerIdentificationReceived(EventHandler`1<SshIdentificationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_HostKeyReceived(EventHandler`1<HostKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_HostKeyReceived(EventHandler`1<HostKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_UserAuthenticationBannerReceived(EventHandler`1<MessageEventArgs`1<BannerMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_UserAuthenticationBannerReceived(EventHandler`1<MessageEventArgs`1<BannerMessage>> value);
    [CompilerGeneratedAttribute]
internal void add_UserAuthenticationInformationRequestReceived(EventHandler`1<MessageEventArgs`1<InformationRequestMessage>> value);
    [CompilerGeneratedAttribute]
internal void remove_UserAuthenticationInformationRequestReceived(EventHandler`1<MessageEventArgs`1<InformationRequestMessage>> value);
    [CompilerGeneratedAttribute]
internal void add_UserAuthenticationPasswordChangeRequiredReceived(EventHandler`1<MessageEventArgs`1<PasswordChangeRequiredMessage>> value);
    [CompilerGeneratedAttribute]
internal void remove_UserAuthenticationPasswordChangeRequiredReceived(EventHandler`1<MessageEventArgs`1<PasswordChangeRequiredMessage>> value);
    [CompilerGeneratedAttribute]
internal void add_UserAuthenticationPublicKeyReceived(EventHandler`1<MessageEventArgs`1<PublicKeyMessage>> value);
    [CompilerGeneratedAttribute]
internal void remove_UserAuthenticationPublicKeyReceived(EventHandler`1<MessageEventArgs`1<PublicKeyMessage>> value);
    [CompilerGeneratedAttribute]
internal void add_KeyExchangeDhGroupExchangeGroupReceived(EventHandler`1<MessageEventArgs`1<KeyExchangeDhGroupExchangeGroup>> value);
    [CompilerGeneratedAttribute]
internal void remove_KeyExchangeDhGroupExchangeGroupReceived(EventHandler`1<MessageEventArgs`1<KeyExchangeDhGroupExchangeGroup>> value);
    [CompilerGeneratedAttribute]
internal void add_KeyExchangeDhGroupExchangeReplyReceived(EventHandler`1<MessageEventArgs`1<KeyExchangeDhGroupExchangeReply>> value);
    [CompilerGeneratedAttribute]
internal void remove_KeyExchangeDhGroupExchangeReplyReceived(EventHandler`1<MessageEventArgs`1<KeyExchangeDhGroupExchangeReply>> value);
    [CompilerGeneratedAttribute]
internal void add_DisconnectReceived(EventHandler`1<MessageEventArgs`1<DisconnectMessage>> value);
    [CompilerGeneratedAttribute]
internal void remove_DisconnectReceived(EventHandler`1<MessageEventArgs`1<DisconnectMessage>> value);
    [CompilerGeneratedAttribute]
internal void add_IgnoreReceived(EventHandler`1<MessageEventArgs`1<IgnoreMessage>> value);
    [CompilerGeneratedAttribute]
internal void remove_IgnoreReceived(EventHandler`1<MessageEventArgs`1<IgnoreMessage>> value);
    [CompilerGeneratedAttribute]
internal void add_UnimplementedReceived(EventHandler`1<MessageEventArgs`1<UnimplementedMessage>> value);
    [CompilerGeneratedAttribute]
internal void remove_UnimplementedReceived(EventHandler`1<MessageEventArgs`1<UnimplementedMessage>> value);
    [CompilerGeneratedAttribute]
internal void add_DebugReceived(EventHandler`1<MessageEventArgs`1<DebugMessage>> value);
    [CompilerGeneratedAttribute]
internal void remove_DebugReceived(EventHandler`1<MessageEventArgs`1<DebugMessage>> value);
    [CompilerGeneratedAttribute]
internal void add_ServiceRequestReceived(EventHandler`1<MessageEventArgs`1<ServiceRequestMessage>> value);
    [CompilerGeneratedAttribute]
internal void remove_ServiceRequestReceived(EventHandler`1<MessageEventArgs`1<ServiceRequestMessage>> value);
    [CompilerGeneratedAttribute]
internal void add_ServiceAcceptReceived(EventHandler`1<MessageEventArgs`1<ServiceAcceptMessage>> value);
    [CompilerGeneratedAttribute]
internal void remove_ServiceAcceptReceived(EventHandler`1<MessageEventArgs`1<ServiceAcceptMessage>> value);
    [CompilerGeneratedAttribute]
internal void add_KeyExchangeInitReceived(EventHandler`1<MessageEventArgs`1<KeyExchangeInitMessage>> value);
    [CompilerGeneratedAttribute]
internal void remove_KeyExchangeInitReceived(EventHandler`1<MessageEventArgs`1<KeyExchangeInitMessage>> value);
    [CompilerGeneratedAttribute]
internal void add_KeyExchangeDhReplyMessageReceived(EventHandler`1<MessageEventArgs`1<KeyExchangeDhReplyMessage>> value);
    [CompilerGeneratedAttribute]
internal void remove_KeyExchangeDhReplyMessageReceived(EventHandler`1<MessageEventArgs`1<KeyExchangeDhReplyMessage>> value);
    [CompilerGeneratedAttribute]
internal void add_KeyExchangeEcdhReplyMessageReceived(EventHandler`1<MessageEventArgs`1<KeyExchangeEcdhReplyMessage>> value);
    [CompilerGeneratedAttribute]
internal void remove_KeyExchangeEcdhReplyMessageReceived(EventHandler`1<MessageEventArgs`1<KeyExchangeEcdhReplyMessage>> value);
    [CompilerGeneratedAttribute]
internal void add_NewKeysReceived(EventHandler`1<MessageEventArgs`1<NewKeysMessage>> value);
    [CompilerGeneratedAttribute]
internal void remove_NewKeysReceived(EventHandler`1<MessageEventArgs`1<NewKeysMessage>> value);
    [CompilerGeneratedAttribute]
internal void add_UserAuthenticationRequestReceived(EventHandler`1<MessageEventArgs`1<RequestMessage>> value);
    [CompilerGeneratedAttribute]
internal void remove_UserAuthenticationRequestReceived(EventHandler`1<MessageEventArgs`1<RequestMessage>> value);
    [CompilerGeneratedAttribute]
internal void add_UserAuthenticationFailureReceived(EventHandler`1<MessageEventArgs`1<FailureMessage>> value);
    [CompilerGeneratedAttribute]
internal void remove_UserAuthenticationFailureReceived(EventHandler`1<MessageEventArgs`1<FailureMessage>> value);
    [CompilerGeneratedAttribute]
internal void add_UserAuthenticationSuccessReceived(EventHandler`1<MessageEventArgs`1<SuccessMessage>> value);
    [CompilerGeneratedAttribute]
internal void remove_UserAuthenticationSuccessReceived(EventHandler`1<MessageEventArgs`1<SuccessMessage>> value);
    [CompilerGeneratedAttribute]
internal void add_GlobalRequestReceived(EventHandler`1<MessageEventArgs`1<GlobalRequestMessage>> value);
    [CompilerGeneratedAttribute]
internal void remove_GlobalRequestReceived(EventHandler`1<MessageEventArgs`1<GlobalRequestMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RequestSuccessReceived(EventHandler`1<MessageEventArgs`1<RequestSuccessMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RequestSuccessReceived(EventHandler`1<MessageEventArgs`1<RequestSuccessMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RequestFailureReceived(EventHandler`1<MessageEventArgs`1<RequestFailureMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RequestFailureReceived(EventHandler`1<MessageEventArgs`1<RequestFailureMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ChannelOpenReceived(EventHandler`1<MessageEventArgs`1<ChannelOpenMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ChannelOpenReceived(EventHandler`1<MessageEventArgs`1<ChannelOpenMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ChannelOpenConfirmationReceived(EventHandler`1<MessageEventArgs`1<ChannelOpenConfirmationMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ChannelOpenConfirmationReceived(EventHandler`1<MessageEventArgs`1<ChannelOpenConfirmationMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ChannelOpenFailureReceived(EventHandler`1<MessageEventArgs`1<ChannelOpenFailureMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ChannelOpenFailureReceived(EventHandler`1<MessageEventArgs`1<ChannelOpenFailureMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ChannelWindowAdjustReceived(EventHandler`1<MessageEventArgs`1<ChannelWindowAdjustMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ChannelWindowAdjustReceived(EventHandler`1<MessageEventArgs`1<ChannelWindowAdjustMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ChannelDataReceived(EventHandler`1<MessageEventArgs`1<ChannelDataMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ChannelDataReceived(EventHandler`1<MessageEventArgs`1<ChannelDataMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ChannelExtendedDataReceived(EventHandler`1<MessageEventArgs`1<ChannelExtendedDataMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ChannelExtendedDataReceived(EventHandler`1<MessageEventArgs`1<ChannelExtendedDataMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ChannelEofReceived(EventHandler`1<MessageEventArgs`1<ChannelEofMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ChannelEofReceived(EventHandler`1<MessageEventArgs`1<ChannelEofMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ChannelCloseReceived(EventHandler`1<MessageEventArgs`1<ChannelCloseMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ChannelCloseReceived(EventHandler`1<MessageEventArgs`1<ChannelCloseMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ChannelRequestReceived(EventHandler`1<MessageEventArgs`1<ChannelRequestMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ChannelRequestReceived(EventHandler`1<MessageEventArgs`1<ChannelRequestMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ChannelSuccessReceived(EventHandler`1<MessageEventArgs`1<ChannelSuccessMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ChannelSuccessReceived(EventHandler`1<MessageEventArgs`1<ChannelSuccessMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ChannelFailureReceived(EventHandler`1<MessageEventArgs`1<ChannelFailureMessage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ChannelFailureReceived(EventHandler`1<MessageEventArgs`1<ChannelFailureMessage>> value);
    public sealed virtual void Connect();
    [AsyncStateMachineAttribute("Renci.SshNet.Session/<ConnectAsync>d__177")]
public sealed virtual Task ConnectAsync(CancellationToken cancellationToken);
    public sealed virtual void Disconnect();
    private void Disconnect(DisconnectReason reason, string message);
    private sealed virtual override void Renci.SshNet.ISession.WaitOnHandle(WaitHandle waitHandle);
    private sealed virtual override void Renci.SshNet.ISession.WaitOnHandle(WaitHandle waitHandle, TimeSpan timeout);
    private sealed virtual override WaitResult Renci.SshNet.ISession.TryWait(WaitHandle waitHandle, TimeSpan timeout);
    private sealed virtual override WaitResult Renci.SshNet.ISession.TryWait(WaitHandle waitHandle, TimeSpan timeout, Exception& exception);
    private WaitResult TryWait(WaitHandle waitHandle, TimeSpan timeout, Exception& exception);
    internal void WaitOnHandle(WaitHandle waitHandle);
    internal void WaitOnHandle(WaitHandle waitHandle, TimeSpan timeout);
    internal void SendMessage(Message message);
    private void SendPacket(Byte[] packet, int offset, int length);
    private bool TrySendMessage(Message message);
    private Message ReceiveMessage(Socket socket);
    private void TrySendDisconnect(DisconnectReason reasonCode, string message);
    internal void OnDisconnectReceived(DisconnectMessage message);
    internal void OnIgnoreReceived(IgnoreMessage message);
    internal void OnUnimplementedReceived(UnimplementedMessage message);
    internal void OnDebugReceived(DebugMessage message);
    internal void OnServiceRequestReceived(ServiceRequestMessage message);
    internal void OnServiceAcceptReceived(ServiceAcceptMessage message);
    internal void OnKeyExchangeDhGroupExchangeGroupReceived(KeyExchangeDhGroupExchangeGroup message);
    internal void OnKeyExchangeDhGroupExchangeReplyReceived(KeyExchangeDhGroupExchangeReply message);
    internal void OnKeyExchangeInitReceived(KeyExchangeInitMessage message);
    internal void OnKeyExchangeDhReplyMessageReceived(KeyExchangeDhReplyMessage message);
    internal void OnKeyExchangeEcdhReplyMessageReceived(KeyExchangeEcdhReplyMessage message);
    internal void OnNewKeysReceived(NewKeysMessage message);
    private sealed virtual override void Renci.SshNet.ISession.OnDisconnecting();
    internal void OnUserAuthenticationRequestReceived(RequestMessage message);
    internal void OnUserAuthenticationFailureReceived(FailureMessage message);
    internal void OnUserAuthenticationSuccessReceived(SuccessMessage message);
    internal void OnUserAuthenticationBannerReceived(BannerMessage message);
    internal void OnUserAuthenticationInformationRequestReceived(InformationRequestMessage message);
    internal void OnUserAuthenticationPasswordChangeRequiredReceived(PasswordChangeRequiredMessage message);
    internal void OnUserAuthenticationPublicKeyReceived(PublicKeyMessage message);
    internal void OnGlobalRequestReceived(GlobalRequestMessage message);
    internal void OnRequestSuccessReceived(RequestSuccessMessage message);
    internal void OnRequestFailureReceived(RequestFailureMessage message);
    internal void OnChannelOpenReceived(ChannelOpenMessage message);
    internal void OnChannelOpenConfirmationReceived(ChannelOpenConfirmationMessage message);
    internal void OnChannelOpenFailureReceived(ChannelOpenFailureMessage message);
    internal void OnChannelWindowAdjustReceived(ChannelWindowAdjustMessage message);
    internal void OnChannelDataReceived(ChannelDataMessage message);
    internal void OnChannelExtendedDataReceived(ChannelExtendedDataMessage message);
    internal void OnChannelEofReceived(ChannelEofMessage message);
    internal void OnChannelCloseReceived(ChannelCloseMessage message);
    internal void OnChannelRequestReceived(ChannelRequestMessage message);
    internal void OnChannelSuccessReceived(ChannelSuccessMessage message);
    internal void OnChannelFailureReceived(ChannelFailureMessage message);
    private void KeyExchange_HostKeyReceived(object sender, HostKeyEventArgs e);
    public sealed virtual void RegisterMessage(string messageName);
    public sealed virtual void UnRegisterMessage(string messageName);
    private Message LoadMessage(Byte[] data, int offset, int count);
    private static string ToHex(Byte[] bytes, int offset);
    internal static string ToHex(Byte[] bytes);
    private bool IsSocketConnected();
    private static int TrySocketRead(Socket socket, Byte[] buffer, int offset, int length);
    private void SocketDisconnectAndDispose();
    private void MessageListener();
    private void RaiseError(Exception exp);
    private void Reset();
    private static SshConnectionException CreateConnectionAbortedByServerException();
    private KeyExchangeInitMessage BuildClientInitMessage(bool includeStrictKexPseudoAlgorithm);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    private sealed virtual override IConnectionInfo Renci.SshNet.ISession.get_ConnectionInfo();
    private sealed virtual override WaitHandle Renci.SshNet.ISession.get_MessageListenerCompleted();
    private sealed virtual override IChannelSession Renci.SshNet.ISession.CreateChannelSession();
    private sealed virtual override IChannelDirectTcpip Renci.SshNet.ISession.CreateChannelDirectTcpip();
    private sealed virtual override IChannelForwardedTcpip Renci.SshNet.ISession.CreateChannelForwardedTcpip(UInt32 remoteChannelNumber, UInt32 remoteWindowSize, UInt32 remoteChannelDataPacketSize);
    private sealed virtual override void Renci.SshNet.ISession.SendMessage(Message message);
    private sealed virtual override bool Renci.SshNet.ISession.TrySendMessage(Message message);
}
[FlagsAttribute]
internal enum Renci.SshNet.Sftp.Flags : Enum {
    public int value__;
    public static Flags None;
    public static Flags Read;
    public static Flags Write;
    public static Flags Append;
    public static Flags CreateNewOrOpen;
    public static Flags Truncate;
    public static Flags CreateNew;
}
public interface Renci.SshNet.Sftp.ISftpFile {
    public SftpFileAttributes Attributes { get; }
    public string FullName { get; }
    public string Name { get; }
    public DateTime LastAccessTime { get; public set; }
    public DateTime LastWriteTime { get; public set; }
    public DateTime LastAccessTimeUtc { get; public set; }
    public DateTime LastWriteTimeUtc { get; public set; }
    public long Length { get; }
    public int UserId { get; public set; }
    public int GroupId { get; public set; }
    public bool IsSocket { get; }
    public bool IsSymbolicLink { get; }
    public bool IsRegularFile { get; }
    public bool IsBlockDevice { get; }
    public bool IsDirectory { get; }
    public bool IsCharacterDevice { get; }
    public bool IsNamedPipe { get; }
    public bool OwnerCanRead { get; public set; }
    public bool OwnerCanWrite { get; public set; }
    public bool OwnerCanExecute { get; public set; }
    public bool GroupCanRead { get; public set; }
    public bool GroupCanWrite { get; public set; }
    public bool GroupCanExecute { get; public set; }
    public bool OthersCanRead { get; public set; }
    public bool OthersCanWrite { get; public set; }
    public bool OthersCanExecute { get; public set; }
    public abstract virtual SftpFileAttributes get_Attributes();
    public abstract virtual string get_FullName();
    public abstract virtual string get_Name();
    public abstract virtual DateTime get_LastAccessTime();
    public abstract virtual void set_LastAccessTime(DateTime value);
    public abstract virtual DateTime get_LastWriteTime();
    public abstract virtual void set_LastWriteTime(DateTime value);
    public abstract virtual DateTime get_LastAccessTimeUtc();
    public abstract virtual void set_LastAccessTimeUtc(DateTime value);
    public abstract virtual DateTime get_LastWriteTimeUtc();
    public abstract virtual void set_LastWriteTimeUtc(DateTime value);
    public abstract virtual long get_Length();
    public abstract virtual int get_UserId();
    public abstract virtual void set_UserId(int value);
    public abstract virtual int get_GroupId();
    public abstract virtual void set_GroupId(int value);
    public abstract virtual bool get_IsSocket();
    public abstract virtual bool get_IsSymbolicLink();
    public abstract virtual bool get_IsRegularFile();
    public abstract virtual bool get_IsBlockDevice();
    public abstract virtual bool get_IsDirectory();
    public abstract virtual bool get_IsCharacterDevice();
    public abstract virtual bool get_IsNamedPipe();
    public abstract virtual bool get_OwnerCanRead();
    public abstract virtual void set_OwnerCanRead(bool value);
    public abstract virtual bool get_OwnerCanWrite();
    public abstract virtual void set_OwnerCanWrite(bool value);
    public abstract virtual bool get_OwnerCanExecute();
    public abstract virtual void set_OwnerCanExecute(bool value);
    public abstract virtual bool get_GroupCanRead();
    public abstract virtual void set_GroupCanRead(bool value);
    public abstract virtual bool get_GroupCanWrite();
    public abstract virtual void set_GroupCanWrite(bool value);
    public abstract virtual bool get_GroupCanExecute();
    public abstract virtual void set_GroupCanExecute(bool value);
    public abstract virtual bool get_OthersCanRead();
    public abstract virtual void set_OthersCanRead(bool value);
    public abstract virtual bool get_OthersCanWrite();
    public abstract virtual void set_OthersCanWrite(bool value);
    public abstract virtual bool get_OthersCanExecute();
    public abstract virtual void set_OthersCanExecute(bool value);
    public abstract virtual void SetPermissions(short mode);
    public abstract virtual void Delete();
    public abstract virtual void MoveTo(string destFileName);
    public abstract virtual void UpdateStatus();
}
internal interface Renci.SshNet.Sftp.ISftpFileReader {
    public abstract virtual Byte[] Read();
}
internal interface Renci.SshNet.Sftp.ISftpResponseFactory {
    public abstract virtual SftpMessage Create(UInt32 protocolVersion, byte messageType, Encoding encoding);
}
internal interface Renci.SshNet.Sftp.ISftpSession {
    public UInt32 ProtocolVersion { get; }
    public string WorkingDirectory { get; }
    public abstract virtual UInt32 get_ProtocolVersion();
    public abstract virtual string get_WorkingDirectory();
    public abstract virtual void ChangeDirectory(string path);
    public abstract virtual string GetCanonicalPath(string path);
    public abstract virtual Task`1<string> GetCanonicalPathAsync(string path, CancellationToken cancellationToken);
    public abstract virtual SftpFileAttributes RequestFStat(Byte[] handle, bool nullOnError);
    public abstract virtual Task`1<SftpFileAttributes> RequestFStatAsync(Byte[] handle, CancellationToken cancellationToken);
    public abstract virtual SftpFileAttributes RequestStat(string path, bool nullOnError);
    public abstract virtual SFtpStatAsyncResult BeginStat(string path, AsyncCallback callback, object state);
    public abstract virtual SftpFileAttributes EndStat(SFtpStatAsyncResult asyncResult);
    public abstract virtual SftpFileAttributes RequestLStat(string path);
    public abstract virtual SFtpStatAsyncResult BeginLStat(string path, AsyncCallback callback, object state);
    public abstract virtual SftpFileAttributes EndLStat(SFtpStatAsyncResult asyncResult);
    public abstract virtual void RequestMkDir(string path);
    public abstract virtual Byte[] RequestOpen(string path, Flags flags, bool nullOnError);
    public abstract virtual Task`1<Byte[]> RequestOpenAsync(string path, Flags flags, CancellationToken cancellationToken);
    public abstract virtual SftpOpenAsyncResult BeginOpen(string path, Flags flags, AsyncCallback callback, object state);
    public abstract virtual Byte[] EndOpen(SftpOpenAsyncResult asyncResult);
    public abstract virtual Byte[] RequestOpenDir(string path, bool nullOnError);
    public abstract virtual Task`1<Byte[]> RequestOpenDirAsync(string path, CancellationToken cancellationToken);
    public abstract virtual void RequestPosixRename(string oldPath, string newPath);
    public abstract virtual Byte[] RequestRead(Byte[] handle, ulong offset, UInt32 length);
    public abstract virtual SftpReadAsyncResult BeginRead(Byte[] handle, ulong offset, UInt32 length, AsyncCallback callback, object state);
    public abstract virtual Byte[] EndRead(SftpReadAsyncResult asyncResult);
    public abstract virtual Task`1<Byte[]> RequestReadAsync(Byte[] handle, ulong offset, UInt32 length, CancellationToken cancellationToken);
    public abstract virtual KeyValuePair`2[] RequestReadDir(Byte[] handle);
    public abstract virtual Task`1<KeyValuePair`2[]> RequestReadDirAsync(Byte[] handle, CancellationToken cancellationToken);
    public abstract virtual SftpRealPathAsyncResult BeginRealPath(string path, AsyncCallback callback, object state);
    public abstract virtual string EndRealPath(SftpRealPathAsyncResult asyncResult);
    public abstract virtual void RequestRemove(string path);
    public abstract virtual Task RequestRemoveAsync(string path, CancellationToken cancellationToken);
    public abstract virtual void RequestRename(string oldPath, string newPath);
    public abstract virtual Task RequestRenameAsync(string oldPath, string newPath, CancellationToken cancellationToken);
    public abstract virtual void RequestRmDir(string path);
    public abstract virtual void RequestSetStat(string path, SftpFileAttributes attributes);
    public abstract virtual SftpFileSystemInformation RequestStatVfs(string path, bool nullOnError);
    public abstract virtual Task`1<SftpFileSystemInformation> RequestStatVfsAsync(string path, CancellationToken cancellationToken);
    public abstract virtual void RequestSymLink(string linkpath, string targetpath);
    public abstract virtual void RequestFSetStat(Byte[] handle, SftpFileAttributes attributes);
    public abstract virtual void RequestWrite(Byte[] handle, ulong serverOffset, Byte[] data, int offset, int length, AutoResetEvent wait, Action`1<SftpStatusResponse> writeCompleted);
    public abstract virtual Task RequestWriteAsync(Byte[] handle, ulong serverOffset, Byte[] data, int offset, int length, CancellationToken cancellationToken);
    public abstract virtual void RequestClose(Byte[] handle);
    public abstract virtual Task RequestCloseAsync(Byte[] handle, CancellationToken cancellationToken);
    public abstract virtual SftpCloseAsyncResult BeginClose(Byte[] handle, AsyncCallback callback, object state);
    public abstract virtual void EndClose(SftpCloseAsyncResult asyncResult);
    public abstract virtual UInt32 CalculateOptimalReadLength(UInt32 bufferSize);
    public abstract virtual UInt32 CalculateOptimalWriteLength(UInt32 bufferSize, Byte[] handle);
    public abstract virtual ISftpFileReader CreateFileReader(Byte[] handle, ISftpSession sftpSession, UInt32 chunkSize, int maxPendingReads, Nullable`1<long> fileSize);
}
internal class Renci.SshNet.Sftp.Requests.FStatVfsRequest : SftpExtendedRequest {
    private Action`1<SftpExtendedReplyResponse> _extendedReplyAction;
    [CompilerGeneratedAttribute]
private Byte[] <Handle>k__BackingField;
    public Byte[] Handle { get; private set; }
    protected int BufferCapacity { get; }
    public FStatVfsRequest(UInt32 protocolVersion, UInt32 requestId, Byte[] handle, Action`1<SftpExtendedReplyResponse> extendedAction, Action`1<SftpStatusResponse> statusAction);
    [CompilerGeneratedAttribute]
public Byte[] get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void SaveData();
    public virtual void Complete(SftpResponse response);
}
internal class Renci.SshNet.Sftp.Requests.HardLinkRequest : SftpExtendedRequest {
    private Byte[] _oldPath;
    private Byte[] _newPath;
    public string OldPath { get; private set; }
    public string NewPath { get; private set; }
    protected int BufferCapacity { get; }
    public HardLinkRequest(UInt32 protocolVersion, UInt32 requestId, string oldPath, string newPath, Action`1<SftpStatusResponse> statusAction);
    public string get_OldPath();
    private void set_OldPath(string value);
    public string get_NewPath();
    private void set_NewPath(string value);
    protected virtual int get_BufferCapacity();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Requests.PosixRenameRequest : SftpExtendedRequest {
    private Byte[] _oldPath;
    private Byte[] _newPath;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public string OldPath { get; private set; }
    public string NewPath { get; private set; }
    public Encoding Encoding { get; }
    protected int BufferCapacity { get; }
    public PosixRenameRequest(UInt32 protocolVersion, UInt32 requestId, string oldPath, string newPath, Encoding encoding, Action`1<SftpStatusResponse> statusAction);
    public string get_OldPath();
    private void set_OldPath(string value);
    public string get_NewPath();
    private void set_NewPath(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    protected virtual int get_BufferCapacity();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Requests.SftpBlockRequest : SftpRequest {
    [CompilerGeneratedAttribute]
private Byte[] <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LockMask>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public Byte[] Handle { get; private set; }
    public ulong Offset { get; private set; }
    public ulong Length { get; private set; }
    public UInt32 LockMask { get; private set; }
    protected int BufferCapacity { get; }
    public SftpBlockRequest(UInt32 protocolVersion, UInt32 requestId, Byte[] handle, ulong offset, ulong length, UInt32 lockMask, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    [CompilerGeneratedAttribute]
public Byte[] get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(Byte[] value);
    [CompilerGeneratedAttribute]
public ulong get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(ulong value);
    [CompilerGeneratedAttribute]
public UInt32 get_LockMask();
    [CompilerGeneratedAttribute]
private void set_LockMask(UInt32 value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Requests.SftpCloseRequest : SftpRequest {
    [CompilerGeneratedAttribute]
private Byte[] <Handle>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public Byte[] Handle { get; private set; }
    protected int BufferCapacity { get; }
    public SftpCloseRequest(UInt32 protocolVersion, UInt32 requestId, Byte[] handle, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    [CompilerGeneratedAttribute]
public Byte[] get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal abstract class Renci.SshNet.Sftp.Requests.SftpExtendedRequest : SftpRequest {
    private Byte[] _nameBytes;
    private string _name;
    public SftpMessageTypes SftpMessageType { get; }
    public string Name { get; private set; }
    protected int BufferCapacity { get; }
    protected SftpExtendedRequest(UInt32 protocolVersion, UInt32 requestId, Action`1<SftpStatusResponse> statusAction, string name);
    public virtual SftpMessageTypes get_SftpMessageType();
    public string get_Name();
    private void set_Name(string value);
    protected virtual int get_BufferCapacity();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Requests.SftpFSetStatRequest : SftpRequest {
    private Byte[] _attributesBytes;
    [CompilerGeneratedAttribute]
private Byte[] <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private SftpFileAttributes <Attributes>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public Byte[] Handle { get; private set; }
    private SftpFileAttributes Attributes { get; private set; }
    private Byte[] AttributesBytes { get; }
    protected int BufferCapacity { get; }
    public SftpFSetStatRequest(UInt32 protocolVersion, UInt32 requestId, Byte[] handle, SftpFileAttributes attributes, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    [CompilerGeneratedAttribute]
public Byte[] get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(Byte[] value);
    [CompilerGeneratedAttribute]
private SftpFileAttributes get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(SftpFileAttributes value);
    private Byte[] get_AttributesBytes();
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Requests.SftpFStatRequest : SftpRequest {
    private Action`1<SftpAttrsResponse> _attrsAction;
    [CompilerGeneratedAttribute]
private Byte[] <Handle>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public Byte[] Handle { get; private set; }
    protected int BufferCapacity { get; }
    public SftpFStatRequest(UInt32 protocolVersion, UInt32 requestId, Byte[] handle, Action`1<SftpAttrsResponse> attrsAction, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    [CompilerGeneratedAttribute]
public Byte[] get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    public virtual void Complete(SftpResponse response);
}
internal class Renci.SshNet.Sftp.Requests.SftpInitRequest : SftpMessage {
    [CompilerGeneratedAttribute]
private UInt32 <Version>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public UInt32 Version { get; private set; }
    protected int BufferCapacity { get; }
    public SftpInitRequest(UInt32 version);
    public virtual SftpMessageTypes get_SftpMessageType();
    [CompilerGeneratedAttribute]
public UInt32 get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(UInt32 value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Requests.SftpLinkRequest : SftpRequest {
    private Byte[] _newLinkPath;
    private Byte[] _existingPath;
    [CompilerGeneratedAttribute]
private bool <IsSymLink>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public string NewLinkPath { get; private set; }
    public string ExistingPath { get; private set; }
    public bool IsSymLink { get; private set; }
    protected int BufferCapacity { get; }
    public SftpLinkRequest(UInt32 protocolVersion, UInt32 requestId, string newLinkPath, string existingPath, bool isSymLink, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    public string get_NewLinkPath();
    private void set_NewLinkPath(string value);
    public string get_ExistingPath();
    private void set_ExistingPath(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSymLink();
    [CompilerGeneratedAttribute]
private void set_IsSymLink(bool value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Requests.SftpLStatRequest : SftpRequest {
    private Action`1<SftpAttrsResponse> _attrsAction;
    private Byte[] _path;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public string Path { get; private set; }
    public Encoding Encoding { get; private set; }
    protected int BufferCapacity { get; }
    public SftpLStatRequest(UInt32 protocolVersion, UInt32 requestId, string path, Encoding encoding, Action`1<SftpAttrsResponse> attrsAction, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    public string get_Path();
    private void set_Path(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    public virtual void Complete(SftpResponse response);
}
internal class Renci.SshNet.Sftp.Requests.SftpMkDirRequest : SftpRequest {
    private Byte[] _path;
    private Byte[] _attributesBytes;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private SftpFileAttributes <Attributes>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public string Path { get; private set; }
    public Encoding Encoding { get; private set; }
    private SftpFileAttributes Attributes { get; private set; }
    private Byte[] AttributesBytes { get; }
    protected int BufferCapacity { get; }
    public SftpMkDirRequest(UInt32 protocolVersion, UInt32 requestId, string path, Encoding encoding, Action`1<SftpStatusResponse> statusAction);
    private SftpMkDirRequest(UInt32 protocolVersion, UInt32 requestId, string path, Encoding encoding, SftpFileAttributes attributes, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    public string get_Path();
    private void set_Path(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
private SftpFileAttributes get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(SftpFileAttributes value);
    private Byte[] get_AttributesBytes();
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Requests.SftpOpenDirRequest : SftpRequest {
    private Action`1<SftpHandleResponse> _handleAction;
    private Byte[] _path;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public string Path { get; private set; }
    public Encoding Encoding { get; private set; }
    protected int BufferCapacity { get; }
    public SftpOpenDirRequest(UInt32 protocolVersion, UInt32 requestId, string path, Encoding encoding, Action`1<SftpHandleResponse> handleAction, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    public string get_Path();
    private void set_Path(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    public virtual void Complete(SftpResponse response);
}
internal class Renci.SshNet.Sftp.Requests.SftpOpenRequest : SftpRequest {
    private Action`1<SftpHandleResponse> _handleAction;
    private Byte[] _fileName;
    private Byte[] _attributes;
    [CompilerGeneratedAttribute]
private Flags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public string Filename { get; private set; }
    public Flags Flags { get; }
    public SftpFileAttributes Attributes { get; private set; }
    public Encoding Encoding { get; }
    protected int BufferCapacity { get; }
    public SftpOpenRequest(UInt32 protocolVersion, UInt32 requestId, string fileName, Encoding encoding, Flags flags, Action`1<SftpHandleResponse> handleAction, Action`1<SftpStatusResponse> statusAction);
    private SftpOpenRequest(UInt32 protocolVersion, UInt32 requestId, string fileName, Encoding encoding, Flags flags, SftpFileAttributes attributes, Action`1<SftpHandleResponse> handleAction, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    public string get_Filename();
    private void set_Filename(string value);
    [CompilerGeneratedAttribute]
public Flags get_Flags();
    public SftpFileAttributes get_Attributes();
    private void set_Attributes(SftpFileAttributes value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    public virtual void Complete(SftpResponse response);
}
internal class Renci.SshNet.Sftp.Requests.SftpReadDirRequest : SftpRequest {
    private Action`1<SftpNameResponse> _nameAction;
    [CompilerGeneratedAttribute]
private Byte[] <Handle>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public Byte[] Handle { get; private set; }
    protected int BufferCapacity { get; }
    public SftpReadDirRequest(UInt32 protocolVersion, UInt32 requestId, Byte[] handle, Action`1<SftpNameResponse> nameAction, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    [CompilerGeneratedAttribute]
public Byte[] get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(Byte[] value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    public virtual void Complete(SftpResponse response);
}
internal class Renci.SshNet.Sftp.Requests.SftpReadLinkRequest : SftpRequest {
    private Action`1<SftpNameResponse> _nameAction;
    private Byte[] _path;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public string Path { get; private set; }
    public Encoding Encoding { get; }
    protected int BufferCapacity { get; }
    public SftpReadLinkRequest(UInt32 protocolVersion, UInt32 requestId, string path, Encoding encoding, Action`1<SftpNameResponse> nameAction, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    public string get_Path();
    private void set_Path(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    public virtual void Complete(SftpResponse response);
}
internal class Renci.SshNet.Sftp.Requests.SftpReadRequest : SftpRequest {
    private Action`1<SftpDataResponse> _dataAction;
    [CompilerGeneratedAttribute]
private Byte[] <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Length>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public Byte[] Handle { get; private set; }
    public ulong Offset { get; private set; }
    public UInt32 Length { get; private set; }
    protected int BufferCapacity { get; }
    public SftpReadRequest(UInt32 protocolVersion, UInt32 requestId, Byte[] handle, ulong offset, UInt32 length, Action`1<SftpDataResponse> dataAction, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    [CompilerGeneratedAttribute]
public Byte[] get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(Byte[] value);
    [CompilerGeneratedAttribute]
public ulong get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(ulong value);
    [CompilerGeneratedAttribute]
public UInt32 get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(UInt32 value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    public virtual void Complete(SftpResponse response);
}
internal class Renci.SshNet.Sftp.Requests.SftpRealPathRequest : SftpRequest {
    private Action`1<SftpNameResponse> _nameAction;
    private Byte[] _path;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public string Path { get; private set; }
    public Encoding Encoding { get; }
    protected int BufferCapacity { get; }
    public SftpRealPathRequest(UInt32 protocolVersion, UInt32 requestId, string path, Encoding encoding, Action`1<SftpNameResponse> nameAction, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    public string get_Path();
    private void set_Path(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    protected virtual int get_BufferCapacity();
    protected virtual void SaveData();
    public virtual void Complete(SftpResponse response);
}
internal class Renci.SshNet.Sftp.Requests.SftpRemoveRequest : SftpRequest {
    private Byte[] _fileName;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public string Filename { get; private set; }
    public Encoding Encoding { get; private set; }
    protected int BufferCapacity { get; }
    public SftpRemoveRequest(UInt32 protocolVersion, UInt32 requestId, string filename, Encoding encoding, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    public string get_Filename();
    private void set_Filename(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Requests.SftpRenameRequest : SftpRequest {
    private Byte[] _oldPath;
    private Byte[] _newPath;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public string OldPath { get; private set; }
    public string NewPath { get; private set; }
    public Encoding Encoding { get; private set; }
    protected int BufferCapacity { get; }
    public SftpRenameRequest(UInt32 protocolVersion, UInt32 requestId, string oldPath, string newPath, Encoding encoding, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    public string get_OldPath();
    private void set_OldPath(string value);
    public string get_NewPath();
    private void set_NewPath(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal abstract class Renci.SshNet.Sftp.Requests.SftpRequest : SftpMessage {
    private Action`1<SftpStatusResponse> _statusAction;
    [CompilerGeneratedAttribute]
private UInt32 <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ProtocolVersion>k__BackingField;
    public UInt32 RequestId { get; }
    public UInt32 ProtocolVersion { get; }
    protected int BufferCapacity { get; }
    protected SftpRequest(UInt32 protocolVersion, UInt32 requestId, Action`1<SftpStatusResponse> statusAction);
    [CompilerGeneratedAttribute]
public UInt32 get_RequestId();
    [CompilerGeneratedAttribute]
public UInt32 get_ProtocolVersion();
    protected virtual int get_BufferCapacity();
    public virtual void Complete(SftpResponse response);
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Requests.SftpRmDirRequest : SftpRequest {
    private Byte[] _path;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public string Path { get; private set; }
    public Encoding Encoding { get; private set; }
    protected int BufferCapacity { get; }
    public SftpRmDirRequest(UInt32 protocolVersion, UInt32 requestId, string path, Encoding encoding, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    public string get_Path();
    private void set_Path(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Requests.SftpSetStatRequest : SftpRequest {
    private Byte[] _path;
    private Byte[] _attributesBytes;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private SftpFileAttributes <Attributes>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public string Path { get; private set; }
    public Encoding Encoding { get; private set; }
    private SftpFileAttributes Attributes { get; private set; }
    private Byte[] AttributesBytes { get; }
    protected int BufferCapacity { get; }
    public SftpSetStatRequest(UInt32 protocolVersion, UInt32 requestId, string path, Encoding encoding, SftpFileAttributes attributes, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    public string get_Path();
    private void set_Path(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
private SftpFileAttributes get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(SftpFileAttributes value);
    private Byte[] get_AttributesBytes();
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Requests.SftpStatRequest : SftpRequest {
    private Action`1<SftpAttrsResponse> _attrsAction;
    private Byte[] _path;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public string Path { get; private set; }
    public Encoding Encoding { get; }
    protected int BufferCapacity { get; }
    public SftpStatRequest(UInt32 protocolVersion, UInt32 requestId, string path, Encoding encoding, Action`1<SftpAttrsResponse> attrsAction, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    public string get_Path();
    private void set_Path(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
    public virtual void Complete(SftpResponse response);
}
internal class Renci.SshNet.Sftp.Requests.SftpSymLinkRequest : SftpRequest {
    private Byte[] _newLinkPath;
    private Byte[] _existingPath;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public string NewLinkPath { get; private set; }
    public string ExistingPath { get; private set; }
    public Encoding Encoding { get; public set; }
    protected int BufferCapacity { get; }
    public SftpSymLinkRequest(UInt32 protocolVersion, UInt32 requestId, string newLinkPath, string existingPath, Encoding encoding, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    public string get_NewLinkPath();
    private void set_NewLinkPath(string value);
    public string get_ExistingPath();
    private void set_ExistingPath(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Requests.SftpUnblockRequest : SftpRequest {
    [CompilerGeneratedAttribute]
private Byte[] <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Length>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public Byte[] Handle { get; private set; }
    public ulong Offset { get; private set; }
    public ulong Length { get; private set; }
    protected int BufferCapacity { get; }
    public SftpUnblockRequest(UInt32 protocolVersion, UInt32 requestId, Byte[] handle, ulong offset, ulong length, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    [CompilerGeneratedAttribute]
public Byte[] get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(Byte[] value);
    [CompilerGeneratedAttribute]
public ulong get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(ulong value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Requests.SftpWriteRequest : SftpRequest {
    [CompilerGeneratedAttribute]
private Byte[] <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ServerFileOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public Byte[] Handle { get; private set; }
    public ulong ServerFileOffset { get; private set; }
    public Byte[] Data { get; private set; }
    public int Offset { get; private set; }
    public int Length { get; private set; }
    protected int BufferCapacity { get; }
    public SftpWriteRequest(UInt32 protocolVersion, UInt32 requestId, Byte[] handle, ulong serverFileOffset, Byte[] data, int offset, int length, Action`1<SftpStatusResponse> statusAction);
    public virtual SftpMessageTypes get_SftpMessageType();
    [CompilerGeneratedAttribute]
public Byte[] get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(Byte[] value);
    [CompilerGeneratedAttribute]
public ulong get_ServerFileOffset();
    [CompilerGeneratedAttribute]
private void set_ServerFileOffset(ulong value);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    protected virtual int get_BufferCapacity();
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Requests.StatVfsRequest : SftpExtendedRequest {
    private Action`1<SftpExtendedReplyResponse> _extendedReplyAction;
    private Byte[] _path;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public string Path { get; private set; }
    public Encoding Encoding { get; private set; }
    protected int BufferCapacity { get; }
    public StatVfsRequest(UInt32 protocolVersion, UInt32 requestId, string path, Encoding encoding, Action`1<SftpExtendedReplyResponse> extendedAction, Action`1<SftpStatusResponse> statusAction);
    public string get_Path();
    private void set_Path(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    protected virtual int get_BufferCapacity();
    protected virtual void SaveData();
    public virtual void Complete(SftpResponse response);
}
internal abstract class Renci.SshNet.Sftp.Responses.ExtendedReplyInfo : object {
    public abstract virtual void LoadData(SshDataStream stream);
}
internal class Renci.SshNet.Sftp.Responses.SftpAttrsResponse : SftpResponse {
    [CompilerGeneratedAttribute]
private SftpFileAttributes <Attributes>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public SftpFileAttributes Attributes { get; private set; }
    public SftpAttrsResponse(UInt32 protocolVersion);
    public virtual SftpMessageTypes get_SftpMessageType();
    [CompilerGeneratedAttribute]
public SftpFileAttributes get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(SftpFileAttributes value);
    protected virtual void LoadData();
}
internal class Renci.SshNet.Sftp.Responses.SftpDataResponse : SftpResponse {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public Byte[] Data { get; public set; }
    public SftpDataResponse(UInt32 protocolVersion);
    public virtual SftpMessageTypes get_SftpMessageType();
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[] value);
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Responses.SftpExtendedReplyResponse : SftpResponse {
    public SftpMessageTypes SftpMessageType { get; }
    public SftpExtendedReplyResponse(UInt32 protocolVersion);
    public virtual SftpMessageTypes get_SftpMessageType();
    public T GetReply();
}
internal class Renci.SshNet.Sftp.Responses.SftpHandleResponse : SftpResponse {
    [CompilerGeneratedAttribute]
private Byte[] <Handle>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public Byte[] Handle { get; public set; }
    public SftpHandleResponse(UInt32 protocolVersion);
    public virtual SftpMessageTypes get_SftpMessageType();
    [CompilerGeneratedAttribute]
public Byte[] get_Handle();
    [CompilerGeneratedAttribute]
public void set_Handle(Byte[] value);
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Responses.SftpNameResponse : SftpResponse {
    [CompilerGeneratedAttribute]
private UInt32 <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValuePair`2[] <Files>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public UInt32 Count { get; private set; }
    public Encoding Encoding { get; private set; }
    public KeyValuePair`2[] Files { get; public set; }
    public SftpNameResponse(UInt32 protocolVersion, Encoding encoding);
    public virtual SftpMessageTypes get_SftpMessageType();
    [CompilerGeneratedAttribute]
public UInt32 get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(UInt32 value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public KeyValuePair`2[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(KeyValuePair`2[] value);
    protected virtual void LoadData();
    protected virtual void SaveData();
    private static bool SupportsLongName(UInt32 protocolVersion);
}
internal abstract class Renci.SshNet.Sftp.Responses.SftpResponse : SftpMessage {
    [CompilerGeneratedAttribute]
private UInt32 <ResponseId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ProtocolVersion>k__BackingField;
    public UInt32 ResponseId { get; public set; }
    public UInt32 ProtocolVersion { get; private set; }
    protected SftpResponse(UInt32 protocolVersion);
    [CompilerGeneratedAttribute]
public UInt32 get_ResponseId();
    [CompilerGeneratedAttribute]
public void set_ResponseId(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ProtocolVersion();
    [CompilerGeneratedAttribute]
private void set_ProtocolVersion(UInt32 value);
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Responses.SftpStatusResponse : SftpResponse {
    [CompilerGeneratedAttribute]
private StatusCodes <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public StatusCodes StatusCode { get; private set; }
    public string ErrorMessage { get; private set; }
    public string Language { get; private set; }
    public SftpStatusResponse(UInt32 protocolVersion);
    public virtual SftpMessageTypes get_SftpMessageType();
    [CompilerGeneratedAttribute]
public StatusCodes get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(StatusCodes value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
private void set_Language(string value);
    protected virtual void LoadData();
}
internal class Renci.SshNet.Sftp.Responses.SftpVersionResponse : SftpMessage {
    [CompilerGeneratedAttribute]
private UInt32 <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Extentions>k__BackingField;
    public SftpMessageTypes SftpMessageType { get; }
    public UInt32 Version { get; public set; }
    public IDictionary`2<string, string> Extentions { get; public set; }
    public virtual SftpMessageTypes get_SftpMessageType();
    [CompilerGeneratedAttribute]
public UInt32 get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(UInt32 value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Extentions();
    [CompilerGeneratedAttribute]
public void set_Extentions(IDictionary`2<string, string> value);
    protected virtual void LoadData();
    protected virtual void SaveData();
}
internal class Renci.SshNet.Sftp.Responses.StatVfsReplyInfo : ExtendedReplyInfo {
    [CompilerGeneratedAttribute]
private SftpFileSystemInformation <Information>k__BackingField;
    public SftpFileSystemInformation Information { get; private set; }
    [CompilerGeneratedAttribute]
public SftpFileSystemInformation get_Information();
    [CompilerGeneratedAttribute]
private void set_Information(SftpFileSystemInformation value);
    public virtual void LoadData(SshDataStream stream);
}
internal class Renci.SshNet.Sftp.SftpCloseAsyncResult : AsyncResult {
    public SftpCloseAsyncResult(AsyncCallback asyncCallback, object state);
}
public class Renci.SshNet.Sftp.SftpDownloadAsyncResult : AsyncResult {
    [CompilerGeneratedAttribute]
private bool <IsDownloadCanceled>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <DownloadedBytes>k__BackingField;
    public bool IsDownloadCanceled { get; public set; }
    public ulong DownloadedBytes { get; private set; }
    public SftpDownloadAsyncResult(AsyncCallback asyncCallback, object state);
    [CompilerGeneratedAttribute]
public bool get_IsDownloadCanceled();
    [CompilerGeneratedAttribute]
public void set_IsDownloadCanceled(bool value);
    [CompilerGeneratedAttribute]
public ulong get_DownloadedBytes();
    [CompilerGeneratedAttribute]
private void set_DownloadedBytes(ulong value);
    internal void Update(ulong downloadedBytes);
}
public class Renci.SshNet.Sftp.SftpFile : object {
    private ISftpSession _sftpSession;
    [CompilerGeneratedAttribute]
private SftpFileAttributes <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public SftpFileAttributes Attributes { get; private set; }
    public string FullName { get; private set; }
    public string Name { get; private set; }
    public DateTime LastAccessTime { get; public set; }
    public DateTime LastWriteTime { get; public set; }
    public DateTime LastAccessTimeUtc { get; public set; }
    public DateTime LastWriteTimeUtc { get; public set; }
    public long Length { get; }
    public int UserId { get; public set; }
    public int GroupId { get; public set; }
    public bool IsSocket { get; }
    public bool IsSymbolicLink { get; }
    public bool IsRegularFile { get; }
    public bool IsBlockDevice { get; }
    public bool IsDirectory { get; }
    public bool IsCharacterDevice { get; }
    public bool IsNamedPipe { get; }
    public bool OwnerCanRead { get; public set; }
    public bool OwnerCanWrite { get; public set; }
    public bool OwnerCanExecute { get; public set; }
    public bool GroupCanRead { get; public set; }
    public bool GroupCanWrite { get; public set; }
    public bool GroupCanExecute { get; public set; }
    public bool OthersCanRead { get; public set; }
    public bool OthersCanWrite { get; public set; }
    public bool OthersCanExecute { get; public set; }
    internal SftpFile(ISftpSession sftpSession, string fullName, SftpFileAttributes attributes);
    [CompilerGeneratedAttribute]
public sealed virtual SftpFileAttributes get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(SftpFileAttributes value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FullName();
    [CompilerGeneratedAttribute]
private void set_FullName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public sealed virtual DateTime get_LastAccessTime();
    public sealed virtual void set_LastAccessTime(DateTime value);
    public sealed virtual DateTime get_LastWriteTime();
    public sealed virtual void set_LastWriteTime(DateTime value);
    public sealed virtual DateTime get_LastAccessTimeUtc();
    public sealed virtual void set_LastAccessTimeUtc(DateTime value);
    public sealed virtual DateTime get_LastWriteTimeUtc();
    public sealed virtual void set_LastWriteTimeUtc(DateTime value);
    public sealed virtual long get_Length();
    public sealed virtual int get_UserId();
    public sealed virtual void set_UserId(int value);
    public sealed virtual int get_GroupId();
    public sealed virtual void set_GroupId(int value);
    public sealed virtual bool get_IsSocket();
    public sealed virtual bool get_IsSymbolicLink();
    public sealed virtual bool get_IsRegularFile();
    public sealed virtual bool get_IsBlockDevice();
    public sealed virtual bool get_IsDirectory();
    public sealed virtual bool get_IsCharacterDevice();
    public sealed virtual bool get_IsNamedPipe();
    public sealed virtual bool get_OwnerCanRead();
    public sealed virtual void set_OwnerCanRead(bool value);
    public sealed virtual bool get_OwnerCanWrite();
    public sealed virtual void set_OwnerCanWrite(bool value);
    public sealed virtual bool get_OwnerCanExecute();
    public sealed virtual void set_OwnerCanExecute(bool value);
    public sealed virtual bool get_GroupCanRead();
    public sealed virtual void set_GroupCanRead(bool value);
    public sealed virtual bool get_GroupCanWrite();
    public sealed virtual void set_GroupCanWrite(bool value);
    public sealed virtual bool get_GroupCanExecute();
    public sealed virtual void set_GroupCanExecute(bool value);
    public sealed virtual bool get_OthersCanRead();
    public sealed virtual void set_OthersCanRead(bool value);
    public sealed virtual bool get_OthersCanWrite();
    public sealed virtual void set_OthersCanWrite(bool value);
    public sealed virtual bool get_OthersCanExecute();
    public sealed virtual void set_OthersCanExecute(bool value);
    public sealed virtual void SetPermissions(short mode);
    public sealed virtual void Delete();
    public sealed virtual void MoveTo(string destFileName);
    public sealed virtual void UpdateStatus();
    public virtual string ToString();
}
public class Renci.SshNet.Sftp.SftpFileAttributes : object {
    private static UInt32 S_IFMT;
    private static UInt32 S_IFSOCK;
    private static UInt32 S_IFLNK;
    private static UInt32 S_IFREG;
    private static UInt32 S_IFBLK;
    private static UInt32 S_IFDIR;
    private static UInt32 S_IFCHR;
    private static UInt32 S_IFIFO;
    private static UInt32 S_ISUID;
    private static UInt32 S_ISGID;
    private static UInt32 S_ISVTX;
    private static UInt32 S_IRUSR;
    private static UInt32 S_IWUSR;
    private static UInt32 S_IXUSR;
    private static UInt32 S_IRGRP;
    private static UInt32 S_IWGRP;
    private static UInt32 S_IXGRP;
    private static UInt32 S_IROTH;
    private static UInt32 S_IWOTH;
    private static UInt32 S_IXOTH;
    private DateTime _originalLastAccessTimeUtc;
    private DateTime _originalLastWriteTimeUtc;
    private long _originalSize;
    private int _originalUserId;
    private int _originalGroupId;
    private UInt32 _originalPermissions;
    private IDictionary`2<string, string> _originalExtensions;
    private bool _isBitFiledsBitSet;
    private bool _isUIDBitSet;
    private bool _isGroupIDBitSet;
    private bool _isStickyBitSet;
    [CompilerGeneratedAttribute]
private DateTime <LastAccessTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastWriteTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSocket>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSymbolicLink>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRegularFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBlockDevice>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCharacterDevice>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNamedPipe>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OwnerCanRead>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OwnerCanWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OwnerCanExecute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GroupCanRead>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GroupCanWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GroupCanExecute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OthersCanRead>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OthersCanWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OthersCanExecute>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Extensions>k__BackingField;
    internal static SftpFileAttributes Empty;
    internal bool IsLastAccessTimeChanged { get; }
    internal bool IsLastWriteTimeChanged { get; }
    internal bool IsSizeChanged { get; }
    internal bool IsUserIdChanged { get; }
    internal bool IsGroupIdChanged { get; }
    internal bool IsPermissionsChanged { get; }
    internal bool IsExtensionsChanged { get; }
    public DateTime LastAccessTime { get; public set; }
    public DateTime LastWriteTime { get; public set; }
    public DateTime LastAccessTimeUtc { get; public set; }
    public DateTime LastWriteTimeUtc { get; public set; }
    public long Size { get; public set; }
    public int UserId { get; public set; }
    public int GroupId { get; public set; }
    public bool IsSocket { get; private set; }
    public bool IsSymbolicLink { get; private set; }
    public bool IsRegularFile { get; private set; }
    public bool IsBlockDevice { get; private set; }
    public bool IsDirectory { get; private set; }
    public bool IsCharacterDevice { get; private set; }
    public bool IsNamedPipe { get; private set; }
    public bool OwnerCanRead { get; public set; }
    public bool OwnerCanWrite { get; public set; }
    public bool OwnerCanExecute { get; public set; }
    public bool GroupCanRead { get; public set; }
    public bool GroupCanWrite { get; public set; }
    public bool GroupCanExecute { get; public set; }
    public bool OthersCanRead { get; public set; }
    public bool OthersCanWrite { get; public set; }
    public bool OthersCanExecute { get; public set; }
    public IDictionary`2<string, string> Extensions { get; private set; }
    internal UInt32 Permissions { get; private set; }
    internal SftpFileAttributes(DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc, long size, int userId, int groupId, UInt32 permissions, IDictionary`2<string, string> extensions);
    private static SftpFileAttributes();
    internal bool get_IsLastAccessTimeChanged();
    internal bool get_IsLastWriteTimeChanged();
    internal bool get_IsSizeChanged();
    internal bool get_IsUserIdChanged();
    internal bool get_IsGroupIdChanged();
    internal bool get_IsPermissionsChanged();
    internal bool get_IsExtensionsChanged();
    public DateTime get_LastAccessTime();
    public void set_LastAccessTime(DateTime value);
    public DateTime get_LastWriteTime();
    public void set_LastWriteTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastAccessTimeUtc();
    [CompilerGeneratedAttribute]
public void set_LastAccessTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastWriteTimeUtc();
    [CompilerGeneratedAttribute]
public void set_LastWriteTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
    [CompilerGeneratedAttribute]
public int get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(int value);
    [CompilerGeneratedAttribute]
public int get_GroupId();
    [CompilerGeneratedAttribute]
public void set_GroupId(int value);
    [CompilerGeneratedAttribute]
public bool get_IsSocket();
    [CompilerGeneratedAttribute]
private void set_IsSocket(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSymbolicLink();
    [CompilerGeneratedAttribute]
private void set_IsSymbolicLink(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRegularFile();
    [CompilerGeneratedAttribute]
private void set_IsRegularFile(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsBlockDevice();
    [CompilerGeneratedAttribute]
private void set_IsBlockDevice(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDirectory();
    [CompilerGeneratedAttribute]
private void set_IsDirectory(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCharacterDevice();
    [CompilerGeneratedAttribute]
private void set_IsCharacterDevice(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNamedPipe();
    [CompilerGeneratedAttribute]
private void set_IsNamedPipe(bool value);
    [CompilerGeneratedAttribute]
public bool get_OwnerCanRead();
    [CompilerGeneratedAttribute]
public void set_OwnerCanRead(bool value);
    [CompilerGeneratedAttribute]
public bool get_OwnerCanWrite();
    [CompilerGeneratedAttribute]
public void set_OwnerCanWrite(bool value);
    [CompilerGeneratedAttribute]
public bool get_OwnerCanExecute();
    [CompilerGeneratedAttribute]
public void set_OwnerCanExecute(bool value);
    [CompilerGeneratedAttribute]
public bool get_GroupCanRead();
    [CompilerGeneratedAttribute]
public void set_GroupCanRead(bool value);
    [CompilerGeneratedAttribute]
public bool get_GroupCanWrite();
    [CompilerGeneratedAttribute]
public void set_GroupCanWrite(bool value);
    [CompilerGeneratedAttribute]
public bool get_GroupCanExecute();
    [CompilerGeneratedAttribute]
public void set_GroupCanExecute(bool value);
    [CompilerGeneratedAttribute]
public bool get_OthersCanRead();
    [CompilerGeneratedAttribute]
public void set_OthersCanRead(bool value);
    [CompilerGeneratedAttribute]
public bool get_OthersCanWrite();
    [CompilerGeneratedAttribute]
public void set_OthersCanWrite(bool value);
    [CompilerGeneratedAttribute]
public bool get_OthersCanExecute();
    [CompilerGeneratedAttribute]
public void set_OthersCanExecute(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Extensions();
    [CompilerGeneratedAttribute]
private void set_Extensions(IDictionary`2<string, string> value);
    internal UInt32 get_Permissions();
    private void set_Permissions(UInt32 value);
    public void SetPermissions(short mode);
    public Byte[] GetBytes();
    internal static SftpFileAttributes FromBytes(SshDataStream stream);
    internal static SftpFileAttributes FromBytes(Byte[] buffer);
    private static DateTime ToLocalTime(DateTime value);
    private static DateTime ToUniversalTime(DateTime value);
}
internal class Renci.SshNet.Sftp.SftpFileReader : object {
    private static int ReadAheadWaitTimeoutInMilliseconds;
    private Byte[] _handle;
    private ISftpSession _sftpSession;
    private UInt32 _chunkSize;
    private SemaphoreSlim _semaphore;
    private object _readLock;
    private ManualResetEvent _disposingWaitHandle;
    private ManualResetEvent _readAheadCompleted;
    private Dictionary`2<int, BufferedRead> _queue;
    private WaitHandle[] _waitHandles;
    private Nullable`1<long> _fileSize;
    private ulong _offset;
    private int _readAheadChunkIndex;
    private ulong _readAheadOffset;
    private int _nextChunkIndex;
    private bool _endOfFileReceived;
    private bool _isEndOfFileRead;
    private bool _disposingOrDisposed;
    private Exception _exception;
    public SftpFileReader(Byte[] handle, ISftpSession sftpSession, UInt32 chunkSize, int maxPendingReads, Nullable`1<long> fileSize);
    public sealed virtual Byte[] Read();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private void StartReadAhead();
    private bool ContinueReadAhead();
    private void ReadCompleted(IAsyncResult result);
    private void ReadCompletedCore(BufferedRead bufferedRead, Byte[] data);
    private void HandleFailure(Exception cause);
    [CompilerGeneratedAttribute]
private void <StartReadAhead>b__24_0();
}
public class Renci.SshNet.Sftp.SftpFileStream : Stream {
    private object _lock;
    private int _readBufferSize;
    private int _writeBufferSize;
    private Byte[] _handle;
    private ISftpSession _session;
    private Byte[] _readBuffer;
    private Byte[] _writeBuffer;
    private int _bufferPosition;
    private int _bufferLen;
    private long _position;
    private bool _bufferOwnedByWrite;
    private bool _canRead;
    private bool _canSeek;
    private bool _canWrite;
    private TimeSpan _timeout;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public bool CanTimeout { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public string Name { get; private set; }
    public Byte[] Handle { get; }
    public TimeSpan Timeout { get; public set; }
    private SftpFileStream(ISftpSession session, string path, FileAccess access, int bufferSize, Byte[] handle, long position);
    internal SftpFileStream(ISftpSession session, string path, FileMode mode, FileAccess access, int bufferSize);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual bool get_CanTimeout();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public virtual Byte[] get_Handle();
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    [AsyncStateMachineAttribute("Renci.SshNet.Sftp.SftpFileStream/<OpenAsync>d__39")]
internal static Task`1<SftpFileStream> OpenAsync(ISftpSession session, string path, FileMode mode, FileAccess access, int bufferSize, CancellationToken cancellationToken);
    protected virtual override void Finalize();
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Renci.SshNet.Sftp.SftpFileStream/<ReadAsync>d__44")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Renci.SshNet.Sftp.SftpFileStream/<WriteAsync>d__49")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
    protected virtual void Dispose(bool disposing);
    private Byte[] GetOrCreateReadBuffer();
    private Byte[] GetOrCreateWriteBuffer();
    private void FlushReadBuffer();
    private void FlushWriteBuffer();
    [AsyncStateMachineAttribute("Renci.SshNet.Sftp.SftpFileStream/<FlushWriteBufferAsync>d__56")]
private Task FlushWriteBufferAsync(CancellationToken cancellationToken);
    private void SetupRead();
    private void SetupWrite();
    private void CheckSessionIsOpen();
}
public class Renci.SshNet.Sftp.SftpFileSystemInformation : object {
    internal static ulong SSH_FXE_STATVFS_ST_RDONLY;
    internal static ulong SSH_FXE_STATVFS_ST_NOSUID;
    private ulong _flag;
    [CompilerGeneratedAttribute]
private ulong <FileSystemBlockSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <BlockSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TotalBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <FreeBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <AvailableBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TotalNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <FreeNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <AvailableNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Sid>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <MaxNameLenght>k__BackingField;
    public ulong FileSystemBlockSize { get; private set; }
    public ulong BlockSize { get; private set; }
    public ulong TotalBlocks { get; private set; }
    public ulong FreeBlocks { get; private set; }
    public ulong AvailableBlocks { get; private set; }
    public ulong TotalNodes { get; private set; }
    public ulong FreeNodes { get; private set; }
    public ulong AvailableNodes { get; private set; }
    public ulong Sid { get; private set; }
    public bool IsReadOnly { get; }
    public bool SupportsSetUid { get; }
    public ulong MaxNameLenght { get; private set; }
    internal SftpFileSystemInformation(ulong bsize, ulong frsize, ulong blocks, ulong bfree, ulong bavail, ulong files, ulong ffree, ulong favail, ulong sid, ulong flag, ulong namemax);
    [CompilerGeneratedAttribute]
public ulong get_FileSystemBlockSize();
    [CompilerGeneratedAttribute]
private void set_FileSystemBlockSize(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_BlockSize();
    [CompilerGeneratedAttribute]
private void set_BlockSize(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_TotalBlocks();
    [CompilerGeneratedAttribute]
private void set_TotalBlocks(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_FreeBlocks();
    [CompilerGeneratedAttribute]
private void set_FreeBlocks(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_AvailableBlocks();
    [CompilerGeneratedAttribute]
private void set_AvailableBlocks(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_TotalNodes();
    [CompilerGeneratedAttribute]
private void set_TotalNodes(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_FreeNodes();
    [CompilerGeneratedAttribute]
private void set_FreeNodes(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_AvailableNodes();
    [CompilerGeneratedAttribute]
private void set_AvailableNodes(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_Sid();
    [CompilerGeneratedAttribute]
private void set_Sid(ulong value);
    public bool get_IsReadOnly();
    public bool get_SupportsSetUid();
    [CompilerGeneratedAttribute]
public ulong get_MaxNameLenght();
    [CompilerGeneratedAttribute]
private void set_MaxNameLenght(ulong value);
    internal void SaveData(SshDataStream stream);
}
public class Renci.SshNet.Sftp.SftpListDirectoryAsyncResult : AsyncResult`1<IEnumerable`1<ISftpFile>> {
    [CompilerGeneratedAttribute]
private int <FilesRead>k__BackingField;
    public int FilesRead { get; private set; }
    public SftpListDirectoryAsyncResult(AsyncCallback asyncCallback, object state);
    [CompilerGeneratedAttribute]
public int get_FilesRead();
    [CompilerGeneratedAttribute]
private void set_FilesRead(int value);
    internal void Update(int filesRead);
}
internal abstract class Renci.SshNet.Sftp.SftpMessage : SshData {
    protected int BufferCapacity { get; }
    public SftpMessageTypes SftpMessageType { get; }
    protected virtual int get_BufferCapacity();
    public abstract virtual SftpMessageTypes get_SftpMessageType();
    protected virtual void LoadData();
    protected virtual void SaveData();
    protected virtual void WriteBytes(SshDataStream stream);
    protected SftpFileAttributes ReadAttributes();
    public virtual string ToString();
}
internal enum Renci.SshNet.Sftp.SftpMessageTypes : Enum {
    public byte value__;
    public static SftpMessageTypes Init;
    public static SftpMessageTypes Version;
    public static SftpMessageTypes Open;
    public static SftpMessageTypes Close;
    public static SftpMessageTypes Read;
    public static SftpMessageTypes Write;
    public static SftpMessageTypes LStat;
    public static SftpMessageTypes FStat;
    public static SftpMessageTypes SetStat;
    public static SftpMessageTypes FSetStat;
    public static SftpMessageTypes OpenDir;
    public static SftpMessageTypes ReadDir;
    public static SftpMessageTypes Remove;
    public static SftpMessageTypes MkDir;
    public static SftpMessageTypes RmDir;
    public static SftpMessageTypes RealPath;
    public static SftpMessageTypes Stat;
    public static SftpMessageTypes Rename;
    public static SftpMessageTypes ReadLink;
    public static SftpMessageTypes SymLink;
    public static SftpMessageTypes Link;
    public static SftpMessageTypes Block;
    public static SftpMessageTypes Unblock;
    public static SftpMessageTypes Status;
    public static SftpMessageTypes Handle;
    public static SftpMessageTypes Data;
    public static SftpMessageTypes Name;
    public static SftpMessageTypes Attrs;
    public static SftpMessageTypes Extended;
    public static SftpMessageTypes ExtendedReply;
}
internal class Renci.SshNet.Sftp.SftpOpenAsyncResult : AsyncResult`1<Byte[]> {
    public SftpOpenAsyncResult(AsyncCallback asyncCallback, object state);
}
internal class Renci.SshNet.Sftp.SftpReadAsyncResult : AsyncResult`1<Byte[]> {
    public SftpReadAsyncResult(AsyncCallback asyncCallback, object state);
}
internal class Renci.SshNet.Sftp.SftpRealPathAsyncResult : AsyncResult`1<string> {
    public SftpRealPathAsyncResult(AsyncCallback asyncCallback, object state);
}
internal class Renci.SshNet.Sftp.SftpResponseFactory : object {
    public sealed virtual SftpMessage Create(UInt32 protocolVersion, byte messageType, Encoding encoding);
}
internal class Renci.SshNet.Sftp.SftpSession : SubsystemSession {
    internal static int MaximumSupportedVersion;
    private static int MinimumSupportedVersion;
    private Dictionary`2<UInt32, SftpRequest> _requests;
    private ISftpResponseFactory _sftpResponseFactory;
    private List`1<byte> _data;
    private Encoding _encoding;
    private EventWaitHandle _sftpVersionConfirmed;
    private IDictionary`2<string, string> _supportedExtensions;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ProtocolVersion>k__BackingField;
    private long _requestId;
    public string WorkingDirectory { get; private set; }
    public UInt32 ProtocolVersion { get; private set; }
    public UInt32 NextRequestId { get; }
    public SftpSession(ISession session, int operationTimeout, Encoding encoding, ISftpResponseFactory sftpResponseFactory);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
private void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_ProtocolVersion();
    [CompilerGeneratedAttribute]
private void set_ProtocolVersion(UInt32 value);
    public UInt32 get_NextRequestId();
    public sealed virtual void ChangeDirectory(string path);
    internal void SendMessage(SftpMessage sftpMessage);
    public sealed virtual string GetCanonicalPath(string path);
    [AsyncStateMachineAttribute("Renci.SshNet.Sftp.SftpSession/<GetCanonicalPathAsync>d__23")]
public sealed virtual Task`1<string> GetCanonicalPathAsync(string path, CancellationToken cancellationToken);
    public sealed virtual ISftpFileReader CreateFileReader(Byte[] handle, ISftpSession sftpSession, UInt32 chunkSize, int maxPendingReads, Nullable`1<long> fileSize);
    internal string GetFullRemotePath(string path);
    protected virtual void OnChannelOpen();
    protected virtual void OnDataReceived(Byte[] data);
    private bool TryLoadSftpMessage(Byte[] packetData, int offset, int count);
    protected virtual void Dispose(bool disposing);
    private void SendRequest(SftpRequest request);
    public sealed virtual Byte[] RequestOpen(string path, Flags flags, bool nullOnError);
    [AsyncStateMachineAttribute("Renci.SshNet.Sftp.SftpSession/<RequestOpenAsync>d__32")]
public sealed virtual Task`1<Byte[]> RequestOpenAsync(string path, Flags flags, CancellationToken cancellationToken);
    public sealed virtual SftpOpenAsyncResult BeginOpen(string path, Flags flags, AsyncCallback callback, object state);
    public sealed virtual Byte[] EndOpen(SftpOpenAsyncResult asyncResult);
    public sealed virtual void RequestClose(Byte[] handle);
    [AsyncStateMachineAttribute("Renci.SshNet.Sftp.SftpSession/<RequestCloseAsync>d__36")]
public sealed virtual Task RequestCloseAsync(Byte[] handle, CancellationToken cancellationToken);
    public sealed virtual SftpCloseAsyncResult BeginClose(Byte[] handle, AsyncCallback callback, object state);
    public sealed virtual void EndClose(SftpCloseAsyncResult asyncResult);
    public sealed virtual SftpReadAsyncResult BeginRead(Byte[] handle, ulong offset, UInt32 length, AsyncCallback callback, object state);
    public sealed virtual Byte[] EndRead(SftpReadAsyncResult asyncResult);
    public sealed virtual Byte[] RequestRead(Byte[] handle, ulong offset, UInt32 length);
    [AsyncStateMachineAttribute("Renci.SshNet.Sftp.SftpSession/<RequestReadAsync>d__42")]
public sealed virtual Task`1<Byte[]> RequestReadAsync(Byte[] handle, ulong offset, UInt32 length, CancellationToken cancellationToken);
    public sealed virtual void RequestWrite(Byte[] handle, ulong serverOffset, Byte[] data, int offset, int length, AutoResetEvent wait, Action`1<SftpStatusResponse> writeCompleted);
    [AsyncStateMachineAttribute("Renci.SshNet.Sftp.SftpSession/<RequestWriteAsync>d__44")]
public sealed virtual Task RequestWriteAsync(Byte[] handle, ulong serverOffset, Byte[] data, int offset, int length, CancellationToken cancellationToken);
    public sealed virtual SftpFileAttributes RequestLStat(string path);
    public sealed virtual SFtpStatAsyncResult BeginLStat(string path, AsyncCallback callback, object state);
    public sealed virtual SftpFileAttributes EndLStat(SFtpStatAsyncResult asyncResult);
    public sealed virtual SftpFileAttributes RequestFStat(Byte[] handle, bool nullOnError);
    [AsyncStateMachineAttribute("Renci.SshNet.Sftp.SftpSession/<RequestFStatAsync>d__49")]
public sealed virtual Task`1<SftpFileAttributes> RequestFStatAsync(Byte[] handle, CancellationToken cancellationToken);
    public sealed virtual void RequestSetStat(string path, SftpFileAttributes attributes);
    public sealed virtual void RequestFSetStat(Byte[] handle, SftpFileAttributes attributes);
    public sealed virtual Byte[] RequestOpenDir(string path, bool nullOnError);
    [AsyncStateMachineAttribute("Renci.SshNet.Sftp.SftpSession/<RequestOpenDirAsync>d__53")]
public sealed virtual Task`1<Byte[]> RequestOpenDirAsync(string path, CancellationToken cancellationToken);
    public sealed virtual KeyValuePair`2[] RequestReadDir(Byte[] handle);
    [AsyncStateMachineAttribute("Renci.SshNet.Sftp.SftpSession/<RequestReadDirAsync>d__55")]
public sealed virtual Task`1<KeyValuePair`2[]> RequestReadDirAsync(Byte[] handle, CancellationToken cancellationToken);
    public sealed virtual void RequestRemove(string path);
    [AsyncStateMachineAttribute("Renci.SshNet.Sftp.SftpSession/<RequestRemoveAsync>d__57")]
public sealed virtual Task RequestRemoveAsync(string path, CancellationToken cancellationToken);
    public sealed virtual void RequestMkDir(string path);
    public sealed virtual void RequestRmDir(string path);
    internal KeyValuePair`2[] RequestRealPath(string path, bool nullOnError);
    [AsyncStateMachineAttribute("Renci.SshNet.Sftp.SftpSession/<RequestRealPathAsync>d__61")]
internal Task`1<KeyValuePair`2[]> RequestRealPathAsync(string path, bool nullOnError, CancellationToken cancellationToken);
    public sealed virtual SftpRealPathAsyncResult BeginRealPath(string path, AsyncCallback callback, object state);
    public sealed virtual string EndRealPath(SftpRealPathAsyncResult asyncResult);
    public sealed virtual SftpFileAttributes RequestStat(string path, bool nullOnError);
    public sealed virtual SFtpStatAsyncResult BeginStat(string path, AsyncCallback callback, object state);
    public sealed virtual SftpFileAttributes EndStat(SFtpStatAsyncResult asyncResult);
    public sealed virtual void RequestRename(string oldPath, string newPath);
    [AsyncStateMachineAttribute("Renci.SshNet.Sftp.SftpSession/<RequestRenameAsync>d__68")]
public sealed virtual Task RequestRenameAsync(string oldPath, string newPath, CancellationToken cancellationToken);
    internal KeyValuePair`2[] RequestReadLink(string path, bool nullOnError);
    public sealed virtual void RequestSymLink(string linkpath, string targetpath);
    public sealed virtual void RequestPosixRename(string oldPath, string newPath);
    public sealed virtual SftpFileSystemInformation RequestStatVfs(string path, bool nullOnError);
    [AsyncStateMachineAttribute("Renci.SshNet.Sftp.SftpSession/<RequestStatVfsAsync>d__73")]
public sealed virtual Task`1<SftpFileSystemInformation> RequestStatVfsAsync(string path, CancellationToken cancellationToken);
    internal SftpFileSystemInformation RequestFStatVfs(Byte[] handle, bool nullOnError);
    internal void HardLink(string oldPath, string newPath);
    public sealed virtual UInt32 CalculateOptimalReadLength(UInt32 bufferSize);
    public sealed virtual UInt32 CalculateOptimalWriteLength(UInt32 bufferSize, Byte[] handle);
    private static SshException GetSftpException(SftpStatusResponse response);
    private void HandleResponse(SftpResponse response);
}
internal class Renci.SshNet.Sftp.SFtpStatAsyncResult : AsyncResult`1<SftpFileAttributes> {
    public SFtpStatAsyncResult(AsyncCallback asyncCallback, object state);
}
public class Renci.SshNet.Sftp.SftpSynchronizeDirectoriesAsyncResult : AsyncResult`1<IEnumerable`1<FileInfo>> {
    [CompilerGeneratedAttribute]
private int <FilesRead>k__BackingField;
    public int FilesRead { get; private set; }
    public SftpSynchronizeDirectoriesAsyncResult(AsyncCallback asyncCallback, object state);
    [CompilerGeneratedAttribute]
public int get_FilesRead();
    [CompilerGeneratedAttribute]
private void set_FilesRead(int value);
    internal void Update(int filesRead);
}
public class Renci.SshNet.Sftp.SftpUploadAsyncResult : AsyncResult {
    [CompilerGeneratedAttribute]
private bool <IsUploadCanceled>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <UploadedBytes>k__BackingField;
    public bool IsUploadCanceled { get; public set; }
    public ulong UploadedBytes { get; private set; }
    public SftpUploadAsyncResult(AsyncCallback asyncCallback, object state);
    [CompilerGeneratedAttribute]
public bool get_IsUploadCanceled();
    [CompilerGeneratedAttribute]
public void set_IsUploadCanceled(bool value);
    [CompilerGeneratedAttribute]
public ulong get_UploadedBytes();
    [CompilerGeneratedAttribute]
private void set_UploadedBytes(ulong value);
    internal void Update(ulong uploadedBytes);
}
internal enum Renci.SshNet.Sftp.StatusCodes : Enum {
    public UInt32 value__;
    public static StatusCodes Ok;
    public static StatusCodes Eof;
    public static StatusCodes NoSuchFile;
    public static StatusCodes PermissionDenied;
    public static StatusCodes Failure;
    public static StatusCodes BadMessage;
    public static StatusCodes NoConnection;
    public static StatusCodes ConnectionLost;
    public static StatusCodes OperationUnsupported;
    public static StatusCodes InvalidHandle;
    public static StatusCodes NoSuchPath;
    public static StatusCodes FileAlreadyExists;
    public static StatusCodes WriteProtect;
    public static StatusCodes NoMedia;
    public static StatusCodes NoSpaceOnFilesystem;
    public static StatusCodes QuotaExceeded;
    public static StatusCodes UnknownPrincipal;
    public static StatusCodes LockConflict;
    public static StatusCodes DirNotEmpty;
    public static StatusCodes NotDirectory;
    public static StatusCodes InvalidFilename;
    public static StatusCodes LinkLoop;
    public static StatusCodes CannotDelete;
    public static StatusCodes InvalidParameter;
    public static StatusCodes FileIsADirectory;
    public static StatusCodes ByteRangeLockConflict;
    public static StatusCodes ByteRangeLockRefused;
    public static StatusCodes DeletePending;
    public static StatusCodes FileCorrupt;
    public static StatusCodes OwnerInvalid;
    public static StatusCodes GroupInvalid;
    public static StatusCodes NoMatchingByteRangeLock;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Renci.SshNet.SftpClient : BaseClient {
    private static Encoding Utf8NoBOM;
    [NullableAttribute("2")]
private ISftpSession _sftpSession;
    private int _operationTimeout;
    private UInt32 _bufferSize;
    public TimeSpan OperationTimeout { get; public set; }
    public UInt32 BufferSize { get; public set; }
    public bool IsConnected { get; }
    public string WorkingDirectory { get; }
    public int ProtocolVersion { get; }
    [NullableAttribute("2")]
internal ISftpSession SftpSession { get; }
    public SftpClient(ConnectionInfo connectionInfo);
    public SftpClient(string host, int port, string username, string password);
    public SftpClient(string host, string username, string password);
    public SftpClient(string host, int port, string username, IPrivateKeySource[] keyFiles);
    public SftpClient(string host, string username, IPrivateKeySource[] keyFiles);
    private SftpClient(ConnectionInfo connectionInfo, bool ownsConnectionInfo);
    internal SftpClient(ConnectionInfo connectionInfo, bool ownsConnectionInfo, IServiceFactory serviceFactory);
    private static SftpClient();
    public sealed virtual TimeSpan get_OperationTimeout();
    public sealed virtual void set_OperationTimeout(TimeSpan value);
    public sealed virtual UInt32 get_BufferSize();
    public sealed virtual void set_BufferSize(UInt32 value);
    public virtual bool get_IsConnected();
    public sealed virtual string get_WorkingDirectory();
    public sealed virtual int get_ProtocolVersion();
    [NullableContextAttribute("2")]
internal ISftpSession get_SftpSession();
    public sealed virtual void ChangeDirectory(string path);
    public sealed virtual void ChangePermissions(string path, short mode);
    public sealed virtual void CreateDirectory(string path);
    public sealed virtual void DeleteDirectory(string path);
    public sealed virtual void DeleteFile(string path);
    [AsyncStateMachineAttribute("Renci.SshNet.SftpClient/<DeleteFileAsync>d__30")]
public sealed virtual Task DeleteFileAsync(string path, CancellationToken cancellationToken);
    public sealed virtual void RenameFile(string oldPath, string newPath);
    public sealed virtual void RenameFile(string oldPath, string newPath, bool isPosix);
    [AsyncStateMachineAttribute("Renci.SshNet.SftpClient/<RenameFileAsync>d__33")]
public sealed virtual Task RenameFileAsync(string oldPath, string newPath, CancellationToken cancellationToken);
    public sealed virtual void SymbolicLink(string path, string linkPath);
    public sealed virtual IEnumerable`1<ISftpFile> ListDirectory(string path, Action`1<int> listCallback);
    [AsyncIteratorStateMachineAttribute("Renci.SshNet.SftpClient/<ListDirectoryAsync>d__36")]
public sealed virtual IAsyncEnumerable`1<ISftpFile> ListDirectoryAsync(string path, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual IAsyncResult BeginListDirectory(string path, AsyncCallback asyncCallback, object state, Action`1<int> listCallback);
    public sealed virtual IEnumerable`1<ISftpFile> EndListDirectory(IAsyncResult asyncResult);
    public sealed virtual ISftpFile Get(string path);
    public sealed virtual bool Exists(string path);
    public sealed virtual void DownloadFile(string path, Stream output, Action`1<ulong> downloadCallback);
    public sealed virtual IAsyncResult BeginDownloadFile(string path, Stream output);
    public sealed virtual IAsyncResult BeginDownloadFile(string path, Stream output, AsyncCallback asyncCallback);
    public sealed virtual IAsyncResult BeginDownloadFile(string path, Stream output, AsyncCallback asyncCallback, object state, Action`1<ulong> downloadCallback);
    public sealed virtual void EndDownloadFile(IAsyncResult asyncResult);
    public sealed virtual void UploadFile(Stream input, string path, Action`1<ulong> uploadCallback);
    public sealed virtual void UploadFile(Stream input, string path, bool canOverride, Action`1<ulong> uploadCallback);
    public sealed virtual IAsyncResult BeginUploadFile(Stream input, string path);
    public sealed virtual IAsyncResult BeginUploadFile(Stream input, string path, AsyncCallback asyncCallback);
    public sealed virtual IAsyncResult BeginUploadFile(Stream input, string path, AsyncCallback asyncCallback, object state, Action`1<ulong> uploadCallback);
    public sealed virtual IAsyncResult BeginUploadFile(Stream input, string path, bool canOverride, AsyncCallback asyncCallback, object state, Action`1<ulong> uploadCallback);
    public sealed virtual void EndUploadFile(IAsyncResult asyncResult);
    public sealed virtual SftpFileSystemInformation GetStatus(string path);
    [AsyncStateMachineAttribute("Renci.SshNet.SftpClient/<GetStatusAsync>d__54")]
public sealed virtual Task`1<SftpFileSystemInformation> GetStatusAsync(string path, CancellationToken cancellationToken);
    public sealed virtual void AppendAllLines(string path, IEnumerable`1<string> contents);
    public sealed virtual void AppendAllLines(string path, IEnumerable`1<string> contents, Encoding encoding);
    public sealed virtual void AppendAllText(string path, string contents);
    public sealed virtual void AppendAllText(string path, string contents, Encoding encoding);
    public sealed virtual StreamWriter AppendText(string path);
    public sealed virtual StreamWriter AppendText(string path, Encoding encoding);
    public sealed virtual SftpFileStream Create(string path);
    public sealed virtual SftpFileStream Create(string path, int bufferSize);
    public sealed virtual StreamWriter CreateText(string path);
    public sealed virtual StreamWriter CreateText(string path, Encoding encoding);
    public sealed virtual void Delete(string path);
    public sealed virtual DateTime GetLastAccessTime(string path);
    public sealed virtual DateTime GetLastAccessTimeUtc(string path);
    public sealed virtual DateTime GetLastWriteTime(string path);
    public sealed virtual DateTime GetLastWriteTimeUtc(string path);
    public sealed virtual SftpFileStream Open(string path, FileMode mode);
    public sealed virtual SftpFileStream Open(string path, FileMode mode, FileAccess access);
    public sealed virtual Task`1<SftpFileStream> OpenAsync(string path, FileMode mode, FileAccess access, CancellationToken cancellationToken);
    public sealed virtual SftpFileStream OpenRead(string path);
    public sealed virtual StreamReader OpenText(string path);
    public sealed virtual SftpFileStream OpenWrite(string path);
    public sealed virtual Byte[] ReadAllBytes(string path);
    public sealed virtual String[] ReadAllLines(string path);
    public sealed virtual String[] ReadAllLines(string path, Encoding encoding);
    public sealed virtual string ReadAllText(string path);
    public sealed virtual string ReadAllText(string path, Encoding encoding);
    public sealed virtual IEnumerable`1<string> ReadLines(string path);
    public sealed virtual IEnumerable`1<string> ReadLines(string path, Encoding encoding);
    public sealed virtual void SetLastAccessTime(string path, DateTime lastAccessTime);
    public sealed virtual void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc);
    public sealed virtual void SetLastWriteTime(string path, DateTime lastWriteTime);
    public sealed virtual void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc);
    public sealed virtual void WriteAllBytes(string path, Byte[] bytes);
    public sealed virtual void WriteAllLines(string path, IEnumerable`1<string> contents);
    public sealed virtual void WriteAllLines(string path, String[] contents);
    public sealed virtual void WriteAllLines(string path, IEnumerable`1<string> contents, Encoding encoding);
    public sealed virtual void WriteAllLines(string path, String[] contents, Encoding encoding);
    public sealed virtual void WriteAllText(string path, string contents);
    public sealed virtual void WriteAllText(string path, string contents, Encoding encoding);
    public sealed virtual SftpFileAttributes GetAttributes(string path);
    public sealed virtual void SetAttributes(string path, SftpFileAttributes fileAttributes);
    public sealed virtual IEnumerable`1<FileInfo> SynchronizeDirectories(string sourcePath, string destinationPath, string searchPattern);
    public sealed virtual IAsyncResult BeginSynchronizeDirectories(string sourcePath, string destinationPath, string searchPattern, AsyncCallback asyncCallback, object state);
    public sealed virtual IEnumerable`1<FileInfo> EndSynchronizeDirectories(IAsyncResult asyncResult);
    private List`1<FileInfo> InternalSynchronizeDirectories(string sourcePath, string destinationPath, string searchPattern, SftpSynchronizeDirectoriesAsyncResult asynchResult);
    private List`1<ISftpFile> InternalListDirectory(string path, SftpListDirectoryAsyncResult asyncResult, Action`1<int> listCallback);
    private void InternalDownloadFile(string path, Stream output, SftpDownloadAsyncResult asyncResult, Action`1<ulong> downloadCallback);
    private void InternalUploadFile(Stream input, string path, Flags flags, SftpUploadAsyncResult asyncResult, Action`1<ulong> uploadCallback);
    protected virtual void OnConnected();
    protected virtual void OnDisconnecting();
    protected virtual void Dispose(bool disposing);
    private ISftpSession CreateAndConnectToSftpSession();
}
public class Renci.SshNet.Shell : object {
    private static int DefaultBufferSize;
    private ISession _session;
    private string _terminalName;
    private UInt32 _columns;
    private UInt32 _rows;
    private UInt32 _width;
    private UInt32 _height;
    private IDictionary`2<TerminalModes, UInt32> _terminalModes;
    private Stream _outputStream;
    private Stream _extendedOutputStream;
    private int _bufferSize;
    private bool _noTerminal;
    private ManualResetEvent _dataReaderTaskCompleted;
    private IChannelSession _channel;
    private AutoResetEvent _channelClosedWaitHandle;
    private Stream _input;
    [CompilerGeneratedAttribute]
private bool <IsStarted>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Starting;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Started;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Stopping;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Stopped;
    [CompilerGeneratedAttribute]
private EventHandler`1<ExceptionEventArgs> ErrorOccurred;
    private bool _disposed;
    public bool IsStarted { get; private set; }
    internal Shell(ISession session, Stream input, Stream output, Stream extendedOutput, string terminalName, UInt32 columns, UInt32 rows, UInt32 width, UInt32 height, IDictionary`2<TerminalModes, UInt32> terminalModes, int bufferSize);
    internal Shell(ISession session, Stream input, Stream output, Stream extendedOutput, int bufferSize);
    private Shell(ISession session, Stream input, Stream output, Stream extendedOutput, int bufferSize, bool noTerminal);
    [CompilerGeneratedAttribute]
public bool get_IsStarted();
    [CompilerGeneratedAttribute]
private void set_IsStarted(bool value);
    [CompilerGeneratedAttribute]
public void add_Starting(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Starting(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Started(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Started(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Stopping(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Stopping(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Stopped(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Stopped(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ErrorOccurred(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ErrorOccurred(EventHandler`1<ExceptionEventArgs> value);
    public void Start();
    public void Stop();
    private void Session_ErrorOccured(object sender, ExceptionEventArgs e);
    private void RaiseError(ExceptionEventArgs e);
    private void Session_Disconnected(object sender, EventArgs e);
    private void Channel_ExtendedDataReceived(object sender, ChannelExtendedDataEventArgs e);
    private void Channel_DataReceived(object sender, ChannelDataEventArgs e);
    private void Channel_Closed(object sender, ChannelEventArgs e);
    private void UnsubscribeFromSessionEvents(ISession session);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
private void <Start>b__38_0();
    [CompilerGeneratedAttribute]
private void <Channel_Closed>b__45_0();
    [CompilerGeneratedAttribute]
private void <Channel_Closed>b__45_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Renci.SshNet.ShellStream : Stream {
    private static int DefaultBufferSize;
    private ISession _session;
    private Encoding _encoding;
    private IChannelSession _channel;
    private Byte[] _carriageReturnBytes;
    private Byte[] _lineFeedBytes;
    private object _sync;
    private Byte[] _writeBuffer;
    private bool _noTerminal;
    private int _writeLength;
    private Byte[] _readBuffer;
    private int _readHead;
    private int _readTail;
    private bool _disposed;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ShellDataEventArgs> DataReceived;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ExceptionEventArgs> ErrorOccurred;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Closed;
    public bool DataAvailable { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal ShellStream(ISession session, string terminalName, UInt32 columns, UInt32 rows, UInt32 width, UInt32 height, IDictionary`2<TerminalModes, UInt32> terminalModeValues, int bufferSize);
    internal ShellStream(ISession session, int bufferSize);
    private ShellStream(ISession session, int bufferSize, bool noTerminal);
    [CompilerGeneratedAttribute]
public void add_DataReceived(EventHandler`1<ShellDataEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DataReceived(EventHandler`1<ShellDataEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ErrorOccurred(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ErrorOccurred(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Closed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Closed(EventHandler`1<EventArgs> value);
    public bool get_DataAvailable();
    [ConditionalAttribute("DEBUG")]
private void AssertValid();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public void Expect(ExpectAction[] expectActions);
    public void Expect(TimeSpan timeout, ExpectAction[] expectActions);
    public void Expect(TimeSpan timeout, int lookback, ExpectAction[] expectActions);
    public string Expect(string text);
    public string Expect(string text, TimeSpan timeout, int lookback);
    public string Expect(Regex regex);
    public string Expect(Regex regex, TimeSpan timeout, int lookback);
    private string ExpectRegex(TimeSpan timeout, int lookback, ExpectAction[] expectActions);
    public IAsyncResult BeginExpect(ExpectAction[] expectActions);
    public IAsyncResult BeginExpect(AsyncCallback callback, ExpectAction[] expectActions);
    public IAsyncResult BeginExpect(AsyncCallback callback, object state, ExpectAction[] expectActions);
    public IAsyncResult BeginExpect(TimeSpan timeout, AsyncCallback callback, object state, ExpectAction[] expectActions);
    public IAsyncResult BeginExpect(TimeSpan timeout, int lookback, AsyncCallback callback, object state, ExpectAction[] expectActions);
    public string EndExpect(IAsyncResult asyncResult);
    [NullableContextAttribute("2")]
public string ReadLine();
    [NullableContextAttribute("2")]
public string ReadLine(TimeSpan timeout);
    private static void ValidateTimeout(TimeSpan timeout);
    private static void ValidateLookback(int lookback);
    private void ThrowIfDisposed();
    public string Read();
    public virtual int Read(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("2")]
public void Write(string text);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public void WriteLine(string line);
    protected virtual void Dispose(bool disposing);
    private void Session_ErrorOccured(object sender, ExceptionEventArgs e);
    private void Session_Disconnected(object sender, EventArgs e);
    private void Channel_Closed(object sender, ChannelEventArgs e);
    private void Channel_DataReceived(object sender, ChannelDataEventArgs e);
    [CompilerGeneratedAttribute]
private void <Channel_Closed>b__70_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Renci.SshNet.SshClient : BaseClient {
    private List`1<ForwardedPort> _forwardedPorts;
    private bool _isDisposed;
    [NullableAttribute("2")]
private MemoryStream _inputStream;
    public IEnumerable`1<ForwardedPort> ForwardedPorts { get; }
    public SshClient(ConnectionInfo connectionInfo);
    public SshClient(string host, int port, string username, string password);
    public SshClient(string host, string username, string password);
    public SshClient(string host, int port, string username, IPrivateKeySource[] keyFiles);
    public SshClient(string host, string username, IPrivateKeySource[] keyFiles);
    private SshClient(ConnectionInfo connectionInfo, bool ownsConnectionInfo);
    internal SshClient(ConnectionInfo connectionInfo, bool ownsConnectionInfo, IServiceFactory serviceFactory);
    public IEnumerable`1<ForwardedPort> get_ForwardedPorts();
    protected virtual void OnDisconnecting();
    public void AddForwardedPort(ForwardedPort port);
    public void RemoveForwardedPort(ForwardedPort port);
    private void AttachForwardedPort(ForwardedPort port);
    private static void DetachForwardedPort(ForwardedPort port);
    public SshCommand CreateCommand(string commandText);
    public SshCommand CreateCommand(string commandText, Encoding encoding);
    public SshCommand RunCommand(string commandText);
    public Shell CreateShell(Stream input, Stream output, Stream extendedOutput, string terminalName, UInt32 columns, UInt32 rows, UInt32 width, UInt32 height, IDictionary`2<TerminalModes, UInt32> terminalModes, int bufferSize);
    public Shell CreateShell(Stream input, Stream output, Stream extendedOutput, string terminalName, UInt32 columns, UInt32 rows, UInt32 width, UInt32 height, IDictionary`2<TerminalModes, UInt32> terminalModes);
    public Shell CreateShell(Stream input, Stream output, Stream extendedOutput);
    public Shell CreateShell(Encoding encoding, string input, Stream output, Stream extendedOutput, string terminalName, UInt32 columns, UInt32 rows, UInt32 width, UInt32 height, IDictionary`2<TerminalModes, UInt32> terminalModes, int bufferSize);
    public Shell CreateShell(Encoding encoding, string input, Stream output, Stream extendedOutput, string terminalName, UInt32 columns, UInt32 rows, UInt32 width, UInt32 height, IDictionary`2<TerminalModes, UInt32> terminalModes);
    public Shell CreateShell(Encoding encoding, string input, Stream output, Stream extendedOutput);
    public Shell CreateShellNoTerminal(Stream input, Stream output, Stream extendedOutput, int bufferSize);
    public ShellStream CreateShellStream(string terminalName, UInt32 columns, UInt32 rows, UInt32 width, UInt32 height, int bufferSize);
    public ShellStream CreateShellStream(string terminalName, UInt32 columns, UInt32 rows, UInt32 width, UInt32 height, int bufferSize, IDictionary`2<TerminalModes, UInt32> terminalModeValues);
    public ShellStream CreateShellStreamNoTerminal(int bufferSize);
    protected virtual void OnDisconnected();
    protected virtual void Dispose(bool disposing);
    private void EnsureSessionIsOpen();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Renci.SshNet.SshCommand : object {
    private ISession _session;
    private Encoding _encoding;
    [NullableAttribute("2")]
private IChannelSession _channel;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TaskCompletionSource`1<object> _tcs;
    [NullableAttribute("2")]
private CancellationTokenSource _cts;
    private CancellationTokenRegistration _tokenRegistration;
    [NullableAttribute("2")]
private string _stdOut;
    [NullableAttribute("2")]
private string _stdErr;
    private bool _hasError;
    private bool _isDisposed;
    [NullableAttribute("2")]
private ChannelInputStream _inputStream;
    private TimeSpan _commandTimeout;
    private CancellationToken _userToken;
    private bool _cancellationRequested;
    private int _exitStatus;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _haveExitStatus;
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ExitSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <OutputStream>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <ExtendedOutputStream>k__BackingField;
    public string CommandText { get; private set; }
    public TimeSpan CommandTimeout { get; public set; }
    public Nullable`1<int> ExitStatus { get; }
    [NullableAttribute("2")]
public string ExitSignal { get; private set; }
    public Stream OutputStream { get; private set; }
    public Stream ExtendedOutputStream { get; private set; }
    public string Result { get; }
    public string Error { get; }
    internal SshCommand(ISession session, string commandText, Encoding encoding);
    [CompilerGeneratedAttribute]
public string get_CommandText();
    [CompilerGeneratedAttribute]
private void set_CommandText(string value);
    public TimeSpan get_CommandTimeout();
    public void set_CommandTimeout(TimeSpan value);
    public Nullable`1<int> get_ExitStatus();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ExitSignal();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ExitSignal(string value);
    [CompilerGeneratedAttribute]
public Stream get_OutputStream();
    [CompilerGeneratedAttribute]
private void set_OutputStream(Stream value);
    [CompilerGeneratedAttribute]
public Stream get_ExtendedOutputStream();
    [CompilerGeneratedAttribute]
private void set_ExtendedOutputStream(Stream value);
    public Stream CreateInputStream();
    public string get_Result();
    public string get_Error();
    public Task ExecuteAsync(CancellationToken cancellationToken);
    public IAsyncResult BeginExecute();
    public IAsyncResult BeginExecute(AsyncCallback callback);
    [NullableContextAttribute("2")]
public IAsyncResult BeginExecute(AsyncCallback callback, object state);
    public IAsyncResult BeginExecute(string commandText, AsyncCallback callback, object state);
    public string EndExecute(IAsyncResult asyncResult);
    public void CancelAsync(bool forceKill, int millisecondsTimeout);
    public string Execute();
    public string Execute(string commandText);
    private void Session_Disconnected(object sender, EventArgs e);
    private void Session_ErrorOccured(object sender, ExceptionEventArgs e);
    private void SetAsyncComplete(bool setResult);
    private void Channel_Closed(object sender, ChannelEventArgs e);
    private void Channel_RequestReceived(object sender, ChannelRequestEventArgs e);
    private void Channel_ExtendedDataReceived(object sender, ChannelExtendedDataEventArgs e);
    private void Channel_DataReceived(object sender, ChannelDataEventArgs e);
    private void UnsubscribeFromEventsAndDisposeChannel();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class Renci.SshNet.SshMessageFactory : object {
    private MessageMetadata[] _enabledMessagesByNumber;
    private Boolean[] _activatedMessagesById;
    private object _lock;
    private static MessageMetadata[] AllMessages;
    private static Dictionary`2<string, MessageMetadata> MessagesByName;
    internal static byte HighestMessageNumber;
    internal static int TotalMessageCount;
    private static SshMessageFactory();
    public void Reset();
    public Message Create(byte messageNumber);
    public void DisableNonKeyExchangeMessages(bool strict);
    public void EnableActivatedMessages();
    public void EnableAndActivateMessage(string messageName);
    public void DisableAndDeactivateMessage(string messageName);
    private static Dictionary`2<string, MessageMetadata> CreateMessagesByNameMapping();
    private static SshException CreateMessageTypeNotSupportedException(byte messageNumber);
    private static SshException CreateMessageNotSupportedException(string messageName);
    private static SshException CreateMessageTypeAlreadyEnabledForOtherMessageException(byte messageNumber, string messageName, string currentEnabledForMessageName);
}
internal abstract class Renci.SshNet.SubsystemSession : object {
    private static int SystemWaitHandleCount;
    private string _subsystemName;
    private ISession _session;
    private IChannelSession _channel;
    private Exception _exception;
    private EventWaitHandle _errorOccuredWaitHandle;
    private EventWaitHandle _sessionDisconnectedWaitHandle;
    private EventWaitHandle _channelClosedWaitHandle;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private int <OperationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ExceptionEventArgs> ErrorOccurred;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Disconnected;
    public int OperationTimeout { get; private set; }
    internal IChannelSession Channel { get; }
    public bool IsOpen { get; }
    protected SubsystemSession(ISession session, string subsystemName, int operationTimeout);
    [CompilerGeneratedAttribute]
public sealed virtual int get_OperationTimeout();
    [CompilerGeneratedAttribute]
private void set_OperationTimeout(int value);
    [CompilerGeneratedAttribute]
public void add_ErrorOccurred(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ErrorOccurred(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Disconnected(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Disconnected(EventHandler`1<EventArgs> value);
    internal IChannelSession get_Channel();
    public sealed virtual bool get_IsOpen();
    public sealed virtual void Connect();
    public sealed virtual void Disconnect();
    public void SendData(Byte[] data);
    protected abstract virtual void OnChannelOpen();
    protected abstract virtual void OnDataReceived(Byte[] data);
    protected void RaiseError(Exception error);
    private void Channel_DataReceived(object sender, ChannelDataEventArgs e);
    private void Channel_Exception(object sender, ExceptionEventArgs e);
    private void Channel_Closed(object sender, ChannelEventArgs e);
    public sealed virtual void WaitOnHandle(WaitHandle waitHandle, int millisecondsTimeout);
    public sealed virtual bool WaitOne(WaitHandle waitHandle, int millisecondsTimeout);
    public sealed virtual int WaitAny(WaitHandle waitHandleA, WaitHandle waitHandleB, int millisecondsTimeout);
    public sealed virtual int WaitAny(WaitHandle[] waitHandles, int millisecondsTimeout);
    public sealed virtual WaitHandle[] CreateWaitHandleArray(WaitHandle waitHandle1, WaitHandle waitHandle2);
    public sealed virtual WaitHandle[] CreateWaitHandleArray(WaitHandle[] waitHandles);
    private void Session_Disconnected(object sender, EventArgs e);
    private void Session_ErrorOccured(object sender, ExceptionEventArgs e);
    private void SignalErrorOccurred(Exception error);
    private void SignalDisconnected();
    private void EnsureSessionIsOpen();
    private void UnsubscribeFromSessionEvents(ISession session);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    private void EnsureNotDisposed();
}
internal enum Renci.SshNet.WaitResult : Enum {
    public int value__;
    public static WaitResult Success;
    public static WaitResult TimedOut;
    public static WaitResult Disconnected;
    public static WaitResult Failed;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.Threading.Tasks.TaskToAsyncResult : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
    public static Task Unwrap(IAsyncResult asyncResult);
    public static Task`1<TResult> Unwrap(IAsyncResult asyncResult);
}
