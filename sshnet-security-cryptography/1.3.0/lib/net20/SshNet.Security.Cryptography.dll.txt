internal abstract class SshNet.Security.Cryptography.HashProviderBase : object {
    private bool _disposed;
    private Byte[] _hashValue;
    public Byte[] Hash { get; }
    public int HashSize { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public sealed virtual Byte[] get_Hash();
    public sealed virtual int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public sealed virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    public sealed virtual Byte[] ComputeHash(Byte[] buffer);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual int get_HashSize();
    public abstract virtual int get_InputBlockSize();
    public abstract virtual int get_OutputBlockSize();
    public abstract virtual void Reset();
    public abstract virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    public abstract virtual Byte[] HashFinal();
}
public abstract class SshNet.Security.Cryptography.HMAC : KeyedHashAlgorithm {
    private IHashProvider _hashProvider;
    private Byte[] _innerPadding;
    private Byte[] _outerPadding;
    private int _hashSize;
    private bool _innerPaddingWritten;
    protected int BlockSize { get; }
    public int HashSize { get; }
    public Byte[] Key { get; public set; }
    private HMAC(IHashProvider hashProvider);
    internal HMAC(IHashProvider hashProvider, Byte[] key, int hashSize);
    internal HMAC(IHashProvider hashProvider, Byte[] key);
    protected abstract virtual int get_BlockSize();
    public virtual int get_HashSize();
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    protected virtual void Dispose(bool disposing);
    private Byte[] GetTruncatedHash(Byte[] hash);
    private void SetKey(Byte[] value);
    private Byte[] GetShortenedKey(Byte[] key);
}
public class SshNet.Security.Cryptography.HMACMD5 : HMAC {
    protected int BlockSize { get; }
    public HMACMD5(Byte[] key);
    public HMACMD5(Byte[] key, int hashSize);
    protected virtual int get_BlockSize();
}
public class SshNet.Security.Cryptography.HMACRIPEMD160 : HMAC {
    protected int BlockSize { get; }
    public HMACRIPEMD160(Byte[] key);
    protected virtual int get_BlockSize();
}
public class SshNet.Security.Cryptography.HMACSHA1 : HMAC {
    protected int BlockSize { get; }
    public HMACSHA1(Byte[] key);
    public HMACSHA1(Byte[] key, int hashSize);
    protected virtual int get_BlockSize();
}
public class SshNet.Security.Cryptography.HMACSHA256 : HMAC {
    protected int BlockSize { get; }
    public HMACSHA256(Byte[] key);
    public HMACSHA256(Byte[] key, int hashSize);
    protected virtual int get_BlockSize();
}
public class SshNet.Security.Cryptography.HMACSHA384 : HMAC {
    protected int BlockSize { get; }
    public HMACSHA384(Byte[] key);
    public HMACSHA384(Byte[] key, int hashSize);
    protected virtual int get_BlockSize();
}
public class SshNet.Security.Cryptography.HMACSHA512 : HMAC {
    protected int BlockSize { get; }
    public HMACSHA512(Byte[] key);
    public HMACSHA512(Byte[] key, int hashSize);
    protected virtual int get_BlockSize();
}
internal interface SshNet.Security.Cryptography.IHashProvider {
    public int HashSize { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public Byte[] Hash { get; }
    public abstract virtual int get_HashSize();
    public abstract virtual int get_InputBlockSize();
    public abstract virtual int get_OutputBlockSize();
    public abstract virtual Byte[] get_Hash();
    public abstract virtual void Reset();
    public abstract virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    public abstract virtual Byte[] HashFinal();
    public abstract virtual int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public abstract virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    public abstract virtual Byte[] ComputeHash(Byte[] buffer);
}
public class SshNet.Security.Cryptography.MD5 : HashAlgorithm {
    private IHashProvider _hashProvider;
    public int HashSize { get; }
    public virtual int get_HashSize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
    protected virtual void Dispose(bool disposing);
}
internal class SshNet.Security.Cryptography.MD5HashProvider : HashProviderBase {
    private Byte[] _buffer;
    private int _bufferOffset;
    private long _byteCount;
    private int _h1;
    private int _h2;
    private int _h3;
    private int _h4;
    private Int32[] _x;
    private int _offset;
    private static int S11;
    private static int S12;
    private static int S13;
    private static int S14;
    private static int S21;
    private static int S22;
    private static int S23;
    private static int S24;
    private static int S31;
    private static int S32;
    private static int S33;
    private static int S34;
    private static int S41;
    private static int S42;
    private static int S43;
    private static int S44;
    public int HashSize { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public virtual int get_HashSize();
    public virtual int get_InputBlockSize();
    public virtual int get_OutputBlockSize();
    public virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    public virtual Byte[] HashFinal();
    public virtual void Reset();
    private void InitializeHashValue();
    private void Update(byte input);
    private void ProcessWord(Byte[] input, int inOff);
    private static void UnpackWord(int word, Byte[] outBytes, int outOff);
    private static int RotateLeft(int x, int n);
    private static int F(int u, int v, int w);
    private static int G(int u, int v, int w);
    private static int H(int u, int v, int w);
    private static int K(int u, int v, int w);
    private void ProcessBlock();
}
public class SshNet.Security.Cryptography.RIPEMD160 : HashAlgorithm {
    private IHashProvider _hashProvider;
    public int HashSize { get; }
    public virtual int get_HashSize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
    protected virtual void Dispose(bool disposing);
}
internal class SshNet.Security.Cryptography.RIPEMD160HashProvider : HashProviderBase {
    private static int DigestSize;
    private Byte[] _buffer;
    private int _bufferOffset;
    private long _byteCount;
    private int _offset;
    private int H0;
    private int H1;
    private int H2;
    private int H3;
    private int H4;
    private Int32[] X;
    public int HashSize { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public virtual int get_HashSize();
    public virtual int get_InputBlockSize();
    public virtual int get_OutputBlockSize();
    public virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    public virtual Byte[] HashFinal();
    public virtual void Reset();
    private void InitializeHashValue();
    private void ProcessWord(Byte[] input, int inOff);
    private void ProcessLength(long bitLength);
    private void UnpackWord(int word, Byte[] outBytes, int outOff);
    private void Update(byte input);
    private int RL(int x, int n);
    private int F1(int x, int y, int z);
    private int F2(int x, int y, int z);
    private int F3(int x, int y, int z);
    private int F4(int x, int y, int z);
    private int F5(int x, int y, int z);
    private void ProcessBlock();
}
public class SshNet.Security.Cryptography.SHA1 : HashAlgorithm {
    private IHashProvider _hashProvider;
    public int HashSize { get; }
    public virtual int get_HashSize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
    protected virtual void Dispose(bool disposing);
}
internal class SshNet.Security.Cryptography.SHA1HashProvider : HashProviderBase {
    private static int DigestSize;
    private static int BlockSize;
    private static UInt32 Y1;
    private static UInt32 Y2;
    private static UInt32 Y3;
    private static UInt32 Y4;
    private UInt32 _h1;
    private UInt32 _h2;
    private UInt32 _h3;
    private UInt32 _h4;
    private UInt32 _h5;
    private UInt32[] _words;
    private Byte[] _buffer;
    private int _bufferByteCount;
    private long _messageByteCount;
    public int HashSize { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public virtual int get_HashSize();
    public virtual int get_InputBlockSize();
    public virtual int get_OutputBlockSize();
    public virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    public virtual Byte[] HashFinal();
    public virtual void Reset();
    private void InitializeHashValue();
    private static UInt32 F(UInt32 u, UInt32 v, UInt32 w);
    private static UInt32 H(UInt32 u, UInt32 v, UInt32 w);
    private static UInt32 G(UInt32 u, UInt32 v, UInt32 w);
    private void ProcessBlock(Byte[] buffer, int offset);
    private static UInt32 BigEndianToUInt32(Byte[] bs, int off);
    private static void UInt32ToBigEndian(UInt32 number, Byte[] buffer, int offset);
    private static void UInt64ToBigEndian(ulong number, Byte[] buffer, int offset);
}
public class SshNet.Security.Cryptography.SHA256 : HashAlgorithm {
    private IHashProvider _hashProvider;
    public int HashSize { get; }
    public virtual int get_HashSize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
    protected virtual void Dispose(bool disposing);
}
internal class SshNet.Security.Cryptography.SHA256HashProvider : HashProviderBase {
    private static int DigestSize;
    private UInt32 _h1;
    private UInt32 _h2;
    private UInt32 _h3;
    private UInt32 _h4;
    private UInt32 _h5;
    private UInt32 _h6;
    private UInt32 _h7;
    private UInt32 _h8;
    private UInt32[] _x;
    private int _offset;
    private Byte[] _buffer;
    private int _bufferOffset;
    private long _byteCount;
    private static UInt32[] K;
    public int HashSize { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    private static SHA256HashProvider();
    public virtual int get_HashSize();
    public virtual int get_InputBlockSize();
    public virtual int get_OutputBlockSize();
    public virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    public virtual Byte[] HashFinal();
    public virtual void Reset();
    private void InitializeHashValue();
    private void Update(byte input);
    private static UInt32 BE_To_UInt32(Byte[] bs, int off);
    private static void UInt32_To_BE(UInt32 n, Byte[] bs, int off);
    private void ProcessWord(Byte[] input, int inOff);
    private void ProcessBlock();
    private static UInt32 Sum1Ch(UInt32 x, UInt32 y, UInt32 z);
    private static UInt32 Sum0Maj(UInt32 x, UInt32 y, UInt32 z);
    private static UInt32 Theta0(UInt32 x);
    private static UInt32 Theta1(UInt32 x);
}
internal abstract class SshNet.Security.Cryptography.SHA2HashProviderBase : HashProviderBase {
    protected ulong H1;
    protected ulong H2;
    protected ulong H3;
    protected ulong H4;
    protected ulong H5;
    protected ulong H6;
    protected ulong H7;
    protected ulong H8;
    private UInt64[] _x;
    private int _offset;
    private Byte[] _buffer;
    private int _bufferOffset;
    private long _byteCount1;
    private long _byteCount2;
    private static UInt64[] K;
    private static SHA2HashProviderBase();
    public virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    public virtual void Reset();
    protected void Finish();
    private void Update(byte input);
    private void ProcessWord(Byte[] input, int inOff);
    internal void ProcessLength(long lowW, long hiW);
    private void ProcessBlock();
    private void AdjustByteCounts();
    private static ulong Ch(ulong x, ulong y, ulong z);
    private static ulong Maj(ulong x, ulong y, ulong z);
    private static ulong Sum0(ulong x);
    private static ulong Sum1(ulong x);
    private static ulong Sigma0(ulong x);
    private static ulong Sigma1(ulong x);
    private static void UInt32_To_BE(UInt32 n, Byte[] bs, int offset);
    protected static void UInt64_To_BE(ulong n, Byte[] bs, int offset);
    private static ulong BE_To_UInt64(Byte[] bs, int offset);
    private static UInt32 BE_To_UInt32(Byte[] bs, int offset);
}
public class SshNet.Security.Cryptography.SHA384 : HashAlgorithm {
    private IHashProvider _hashProvider;
    public int HashSize { get; }
    public virtual int get_HashSize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
    protected virtual void Dispose(bool disposing);
}
internal class SshNet.Security.Cryptography.SHA384HashProvider : SHA2HashProviderBase {
    private static int DigestSize;
    public int HashSize { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public virtual int get_HashSize();
    public virtual int get_InputBlockSize();
    public virtual int get_OutputBlockSize();
    public virtual Byte[] HashFinal();
    public virtual void Reset();
    private void InitializeHashValue();
}
public class SshNet.Security.Cryptography.SHA512 : HashAlgorithm {
    private IHashProvider _hashProvider;
    public int HashSize { get; }
    public virtual int get_HashSize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
    protected virtual void Dispose(bool disposing);
}
internal class SshNet.Security.Cryptography.SHA512HashProvider : SHA2HashProviderBase {
    private static int DigestSize;
    public int HashSize { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public virtual int get_HashSize();
    public virtual int get_InputBlockSize();
    public virtual int get_OutputBlockSize();
    public virtual Byte[] HashFinal();
    public virtual void Reset();
    private void InitializeHashValue();
}
