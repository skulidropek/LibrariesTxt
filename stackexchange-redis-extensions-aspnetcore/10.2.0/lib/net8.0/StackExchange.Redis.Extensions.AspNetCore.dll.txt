[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.IApplicationBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IApplicationBuilder UseRedisInformation(IApplicationBuilder application, Action`1<RedisMiddlewareAccessOptions> options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddStackExchangeRedisExtensions(IServiceCollection services, RedisConfiguration redisConfiguration);
    [ExtensionAttribute]
public static IServiceCollection AddStackExchangeRedisExtensions(IServiceCollection services, IEnumerable`1<RedisConfiguration> redisConfiguration);
    [ExtensionAttribute]
public static IServiceCollection AddStackExchangeRedisExtensions(IServiceCollection services, Func`2<IServiceProvider, IEnumerable`1<RedisConfiguration>> redisConfigurationFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class StackExchange.Redis.Extensions.AspNetCore.Middlewares.RedisInformationMiddleware : object {
    private ILogger`1<RedisInformationMiddleware> logger;
    private RequestDelegate next;
    private IRedisClientFactory redisClientFactory;
    private IRedisDatabase redisDatabase;
    private RedisMiddlewareAccessOptions options;
    public RedisInformationMiddleware(RequestDelegate next, RedisMiddlewareAccessOptions options, ILogger`1<RedisInformationMiddleware> logger, IRedisClientFactory redisClientFactory, IRedisDatabase redisDatabase);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.AspNetCore.Middlewares.RedisInformationMiddleware/<Invoke>d__6")]
public Task Invoke(HttpContext context);
    private bool IsClientAllowed(HttpContext context);
}
public class StackExchange.Redis.Extensions.AspNetCore.Middlewares.RedisMiddlewareAccessOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HttpContext, bool> <AllowFunction>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IPAddress[] <AllowedIPs>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HttpContext, bool> AllowFunction { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IPAddress[] AllowedIPs { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<HttpContext, bool> get_AllowFunction();
    [CompilerGeneratedAttribute]
public void set_AllowFunction(Func`2<HttpContext, bool> value);
    [CompilerGeneratedAttribute]
public IPAddress[] get_AllowedIPs();
    [CompilerGeneratedAttribute]
public void set_AllowedIPs(IPAddress[] value);
}
