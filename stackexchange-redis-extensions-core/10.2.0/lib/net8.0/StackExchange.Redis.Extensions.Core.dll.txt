[NullableContextAttribute("1")]
public interface StackExchange.Redis.Extensions.Core.Abstractions.IRedisClient {
    public IRedisDatabase Db0 { get; }
    public IRedisDatabase Db1 { get; }
    public IRedisDatabase Db2 { get; }
    public IRedisDatabase Db3 { get; }
    public IRedisDatabase Db4 { get; }
    public IRedisDatabase Db5 { get; }
    public IRedisDatabase Db6 { get; }
    public IRedisDatabase Db7 { get; }
    public IRedisDatabase Db8 { get; }
    public IRedisDatabase Db9 { get; }
    public IRedisDatabase Db10 { get; }
    public IRedisDatabase Db11 { get; }
    public IRedisDatabase Db12 { get; }
    public IRedisDatabase Db13 { get; }
    public IRedisDatabase Db14 { get; }
    public IRedisDatabase Db15 { get; }
    public IRedisDatabase Db16 { get; }
    public ISerializer Serializer { get; }
    public IRedisConnectionPoolManager ConnectionPoolManager { get; }
    public abstract virtual IRedisDatabase get_Db0();
    public abstract virtual IRedisDatabase get_Db1();
    public abstract virtual IRedisDatabase get_Db2();
    public abstract virtual IRedisDatabase get_Db3();
    public abstract virtual IRedisDatabase get_Db4();
    public abstract virtual IRedisDatabase get_Db5();
    public abstract virtual IRedisDatabase get_Db6();
    public abstract virtual IRedisDatabase get_Db7();
    public abstract virtual IRedisDatabase get_Db8();
    public abstract virtual IRedisDatabase get_Db9();
    public abstract virtual IRedisDatabase get_Db10();
    public abstract virtual IRedisDatabase get_Db11();
    public abstract virtual IRedisDatabase get_Db12();
    public abstract virtual IRedisDatabase get_Db13();
    public abstract virtual IRedisDatabase get_Db14();
    public abstract virtual IRedisDatabase get_Db15();
    public abstract virtual IRedisDatabase get_Db16();
    public abstract virtual ISerializer get_Serializer();
    public abstract virtual IRedisDatabase GetDb(int dbNumber, string keyPrefix);
    public abstract virtual IRedisDatabase GetDefaultDatabase();
    public abstract virtual IRedisConnectionPoolManager get_ConnectionPoolManager();
}
[NullableContextAttribute("1")]
public interface StackExchange.Redis.Extensions.Core.Abstractions.IRedisClientFactory {
    public abstract virtual IEnumerable`1<IRedisClient> GetAllClients();
    public abstract virtual IRedisClient GetDefaultRedisClient();
    public abstract virtual IRedisClient GetRedisClient(string name);
    public abstract virtual IRedisDatabase GetDefaultRedisDatabase();
    public abstract virtual IRedisDatabase GetRedisDatabase(string name);
}
[NullableContextAttribute("1")]
public interface StackExchange.Redis.Extensions.Core.Abstractions.IRedisConnectionPoolManager {
    public abstract virtual IConnectionMultiplexer GetConnection();
    public abstract virtual IEnumerable`1<IConnectionMultiplexer> GetConnections();
    public abstract virtual ConnectionPoolInformation GetConnectionInformation();
}
[NullableContextAttribute("1")]
public interface StackExchange.Redis.Extensions.Core.Abstractions.IRedisDatabase {
    public IDatabase Database { get; }
    public ISerializer Serializer { get; }
    public abstract virtual IDatabase get_Database();
    public abstract virtual ISerializer get_Serializer();
    public abstract virtual Task`1<bool> ExistsAsync(string key, CommandFlags flag);
    public abstract virtual Task`1<bool> RemoveAsync(string key, CommandFlags flag);
    public abstract virtual Task`1<long> RemoveAllAsync(String[] keys, CommandFlags flag);
    public abstract virtual Task`1<T> GetAsync(string key, CommandFlags flag);
    public abstract virtual Task`1<T> GetAsync(string key, DateTimeOffset expiresAt, CommandFlags flag);
    public abstract virtual Task`1<T> GetAsync(string key, TimeSpan expiresIn, CommandFlags flag);
    public abstract virtual Task`1<bool> AddAsync(string key, T value, When when, CommandFlags flag, HashSet`1<string> tags);
    public abstract virtual Task`1<bool> ReplaceAsync(string key, T value, When when, CommandFlags flag);
    public abstract virtual Task`1<bool> AddAsync(string key, T value, DateTimeOffset expiresAt, When when, CommandFlags flag, HashSet`1<string> tags);
    public abstract virtual Task`1<bool> ReplaceAsync(string key, T value, DateTimeOffset expiresAt, When when, CommandFlags flag);
    public abstract virtual Task`1<bool> AddAsync(string key, T value, TimeSpan expiresIn, When when, CommandFlags flag, HashSet`1<string> tags);
    public abstract virtual Task`1<bool> ReplaceAsync(string key, T value, TimeSpan expiresIn, When when, CommandFlags flag);
    public abstract virtual Task`1<IDictionary`2<string, T>> GetAllAsync(HashSet`1<string> keys, CommandFlags flag);
    public abstract virtual Task`1<IDictionary`2<string, T>> GetAllAsync(HashSet`1<string> keys, DateTimeOffset expiresAt, CommandFlags flag);
    public abstract virtual Task`1<IDictionary`2<string, T>> GetAllAsync(HashSet`1<string> keys, TimeSpan expiresIn, CommandFlags flag);
    public abstract virtual Task`1<bool> AddAllAsync(Tuple`2[] items, DateTimeOffset expiresAt, When when, CommandFlags flag);
    public abstract virtual Task`1<bool> AddAllAsync(Tuple`2[] items, When when, CommandFlags flag);
    public abstract virtual Task`1<bool> AddAllAsync(Tuple`2[] items, TimeSpan expiresIn, When when, CommandFlags flag);
    public abstract virtual Task`1<bool> SetAddAsync(string key, T item, CommandFlags flag);
    public abstract virtual Task`1<T> SetPopAsync(string key, CommandFlags flag);
    public abstract virtual Task`1<IEnumerable`1<T>> SetPopAsync(string key, long count, CommandFlags flag);
    public abstract virtual Task`1<bool> SetContainsAsync(string key, T item, CommandFlags flag);
    public abstract virtual Task`1<long> SetAddAllAsync(string key, CommandFlags flag, T[] items);
    public abstract virtual Task`1<bool> SetRemoveAsync(string key, T item, CommandFlags flag);
    public abstract virtual Task`1<long> SetRemoveAllAsync(string key, CommandFlags flag, T[] items);
    public abstract virtual Task`1<String[]> SetMemberAsync(string memberName, CommandFlags flag);
    public abstract virtual Task`1<T[]> SetMembersAsync(string key, CommandFlags flag);
    public abstract virtual Task`1<IEnumerable`1<string>> SearchKeysAsync(string pattern);
    public abstract virtual Task FlushDbAsync();
    public abstract virtual Task SaveAsync(SaveType saveType, CommandFlags flag);
    public abstract virtual Task`1<Dictionary`2<string, string>> GetInfoAsync();
    public abstract virtual Task`1<InfoDetail[]> GetInfoCategorizedAsync();
    public abstract virtual Task`1<bool> UpdateExpiryAsync(string key, DateTimeOffset expiresAt, CommandFlags flag);
    public abstract virtual Task`1<bool> UpdateExpiryAsync(string key, TimeSpan expiresIn, CommandFlags flag);
    public abstract virtual Task`1<IDictionary`2<string, bool>> UpdateExpiryAllAsync(HashSet`1<string> keys, DateTimeOffset expiresAt, CommandFlags flag);
    public abstract virtual Task`1<IDictionary`2<string, bool>> UpdateExpiryAllAsync(HashSet`1<string> keys, TimeSpan expiresIn, CommandFlags flag);
    public abstract virtual Task`1<bool> HashDeleteAsync(string hashKey, string key, CommandFlags flag);
    public abstract virtual Task`1<long> HashDeleteAsync(string hashKey, String[] keys, CommandFlags flag);
    public abstract virtual Task`1<bool> HashExistsAsync(string hashKey, string key, CommandFlags flag);
    public abstract virtual Task`1<T> HashGetAsync(string hashKey, string key, CommandFlags flag);
    public abstract virtual Task`1<IDictionary`2<string, T>> HashGetAsync(string hashKey, String[] keys, CommandFlags flag);
    public abstract virtual Task`1<IDictionary`2<string, T>> HashGetAllAsyncAtOneTimeAsync(string hashKey, String[] keys, CommandFlags flag);
    public abstract virtual Task`1<IDictionary`2<string, T>> HashGetAllAsync(string hashKey, CommandFlags flag);
    public abstract virtual Task`1<long> HashIncrementByAsync(string hashKey, string key, long value, CommandFlags flag);
    public abstract virtual Task`1<double> HashIncrementByAsync(string hashKey, string key, double value, CommandFlags flag);
    public abstract virtual Task`1<IEnumerable`1<string>> HashKeysAsync(string hashKey, CommandFlags flag);
    public abstract virtual Task`1<long> HashLengthAsync(string hashKey, CommandFlags flag);
    public abstract virtual Task`1<bool> HashSetAsync(string hashKey, string key, T value, bool nx, CommandFlags flag);
    public abstract virtual Task HashSetAsync(string hashKey, IDictionary`2<string, T> values, CommandFlags flag);
    public abstract virtual Task`1<IEnumerable`1<T>> HashValuesAsync(string hashKey, CommandFlags flag);
    public abstract virtual Dictionary`2<string, T> HashScan(string hashKey, string pattern, int pageSize, CommandFlags flag);
    public abstract virtual Task`1<long> ListAddToLeftAsync(string key, T item, When when, CommandFlags flag);
    public abstract virtual Task`1<long> ListAddToLeftAsync(string key, T[] items, CommandFlags flag);
    public abstract virtual Task`1<T> ListGetFromRightAsync(string key, CommandFlags flag);
    public abstract virtual Task`1<long> PublishAsync(RedisChannel channel, T message, CommandFlags flag);
    public abstract virtual Task SubscribeAsync(RedisChannel channel, Func`2<T, Task> handler, CommandFlags flag);
    public abstract virtual Task UnsubscribeAsync(RedisChannel channel, Func`2<T, Task> handler, CommandFlags flag);
    public abstract virtual Task UnsubscribeAllAsync(CommandFlags flag);
    public abstract virtual Task`1<bool> SortedSetAddAsync(string key, T value, double score, CommandFlags flag);
    public abstract virtual Task`1<bool> SortedSetRemoveAsync(string key, T value, CommandFlags flag);
    public abstract virtual Task`1<IEnumerable`1<T>> SortedSetRangeByScoreAsync(string key, double start, double stop, Exclude exclude, Order order, long skip, long take, CommandFlags flag);
    public abstract virtual Task`1<IEnumerable`1<ScoreRankResult`1<T>>> SortedSetRangeByRankWithScoresAsync(string key, long start, long stop, Order order, CommandFlags commandFlags);
    public abstract virtual Task`1<double> SortedSetAddIncrementAsync(string key, T value, double score, CommandFlags flag);
    public abstract virtual Task`1<IEnumerable`1<T>> GetByTagAsync(string tag, CommandFlags commandFlags);
    public abstract virtual Task`1<long> RemoveByTagAsync(string tag, CommandFlags flags);
}
[NullableContextAttribute("1")]
public interface StackExchange.Redis.Extensions.Core.Abstractions.IStateAwareConnection {
    public IConnectionMultiplexer Connection { get; }
    public abstract virtual IConnectionMultiplexer get_Connection();
    public abstract virtual bool IsConnected();
    public abstract virtual long TotalOutstanding();
}
public enum StackExchange.Redis.Extensions.Core.Configuration.ConnectionSelectionStrategy : Enum {
    public int value__;
    public static ConnectionSelectionStrategy RoundRobin;
    public static ConnectionSelectionStrategy LeastLoaded;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class StackExchange.Redis.Extensions.Core.Configuration.RedisConfiguration : object {
    private ConfigurationOptions options;
    [NullableAttribute("1")]
private string keyPrefix;
    private string user;
    private string password;
    private bool allowAdmin;
    private bool ssl;
    private int connectTimeout;
    private int syncTimeout;
    private bool abortOnConnectFail;
    private int database;
    [NullableAttribute("1")]
private RedisHost[] hosts;
    [NullableAttribute("1")]
private ServerEnumerationStrategy serverEnumerationStrategy;
    private UInt32 maxValueLength;
    private int poolSize;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] excludeCommands;
    private string configurationChannel;
    private string connectionString;
    private string serviceName;
    private Nullable`1<int> connectRetry;
    private Nullable`1<SslProtocols> sslProtocols;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<ProfilingSession> profilingSessionProvider;
    private int workCount;
    private ConnectionSelectionStrategy connectionSelectionStrategy;
    private ILoggerFactory loggerFactory;
    private SocketManagerOptions socketManagerOptions;
    [CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback CertificateValidation;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private StateAwareConnectionResolver <StateAwareConnectionFactory>k__BackingField;
    public bool IsDefault { get; public set; }
    public string Name { get; public set; }
    public ConnectionSelectionStrategy ConnectionSelectionStrategy { get; public set; }
    public int WorkCount { get; public set; }
    public Nullable`1<int> ConnectRetry { get; public set; }
    public string ServiceName { get; public set; }
    public bool IsSentinelCluster { get; }
    public Nullable`1<SslProtocols> SslProtocols { get; public set; }
    public string ConnectionString { get; public set; }
    public string ConfigurationChannel { get; public set; }
    [NullableAttribute("1")]
public string KeyPrefix { get; public set; }
    public string User { get; public set; }
    public string Password { get; public set; }
    public bool AllowAdmin { get; public set; }
    public bool Ssl { get; public set; }
    public int ConnectTimeout { get; public set; }
    public int SyncTimeout { get; public set; }
    public bool AbortOnConnectFail { get; public set; }
    public int Database { get; public set; }
    [NullableAttribute("1")]
public RedisHost[] Hosts { get; public set; }
    [NullableAttribute("1")]
public ServerEnumerationStrategy ServerEnumerationStrategy { get; public set; }
    public UInt32 MaxValueLength { get; public set; }
    public int PoolSize { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] ExcludeCommands { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<ProfilingSession> ProfilingSessionProvider { get; public set; }
    public ILoggerFactory LoggerFactory { get; public set; }
    public SocketManagerOptions SocketManagerOptions { get; public set; }
    [NullableAttribute("1")]
public StateAwareConnectionResolver StateAwareConnectionFactory { get; public set; }
    [NullableAttribute("1")]
public ConfigurationOptions ConfigurationOptions { get; }
    [CompilerGeneratedAttribute]
public void add_CertificateValidation(RemoteCertificateValidationCallback value);
    [CompilerGeneratedAttribute]
public void remove_CertificateValidation(RemoteCertificateValidationCallback value);
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public void set_IsDefault(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public ConnectionSelectionStrategy get_ConnectionSelectionStrategy();
    public void set_ConnectionSelectionStrategy(ConnectionSelectionStrategy value);
    public int get_WorkCount();
    public void set_WorkCount(int value);
    public Nullable`1<int> get_ConnectRetry();
    public void set_ConnectRetry(Nullable`1<int> value);
    public string get_ServiceName();
    public void set_ServiceName(string value);
    public bool get_IsSentinelCluster();
    public Nullable`1<SslProtocols> get_SslProtocols();
    public void set_SslProtocols(Nullable`1<SslProtocols> value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public string get_ConfigurationChannel();
    public void set_ConfigurationChannel(string value);
    [NullableContextAttribute("1")]
public string get_KeyPrefix();
    [NullableContextAttribute("1")]
public void set_KeyPrefix(string value);
    public string get_User();
    public void set_User(string value);
    public string get_Password();
    public void set_Password(string value);
    public bool get_AllowAdmin();
    public void set_AllowAdmin(bool value);
    public bool get_Ssl();
    public void set_Ssl(bool value);
    public int get_ConnectTimeout();
    public void set_ConnectTimeout(int value);
    public int get_SyncTimeout();
    public void set_SyncTimeout(int value);
    public bool get_AbortOnConnectFail();
    public void set_AbortOnConnectFail(bool value);
    public int get_Database();
    public void set_Database(int value);
    [NullableContextAttribute("1")]
public RedisHost[] get_Hosts();
    [NullableContextAttribute("1")]
public void set_Hosts(RedisHost[] value);
    [NullableContextAttribute("1")]
public ServerEnumerationStrategy get_ServerEnumerationStrategy();
    [NullableContextAttribute("1")]
public void set_ServerEnumerationStrategy(ServerEnumerationStrategy value);
    public UInt32 get_MaxValueLength();
    public void set_MaxValueLength(UInt32 value);
    public int get_PoolSize();
    public void set_PoolSize(int value);
    public String[] get_ExcludeCommands();
    public void set_ExcludeCommands(String[] value);
    public Func`1<ProfilingSession> get_ProfilingSessionProvider();
    public void set_ProfilingSessionProvider(Func`1<ProfilingSession> value);
    public ILoggerFactory get_LoggerFactory();
    public void set_LoggerFactory(ILoggerFactory value);
    public SocketManagerOptions get_SocketManagerOptions();
    public void set_SocketManagerOptions(SocketManagerOptions value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public StateAwareConnectionResolver get_StateAwareConnectionFactory();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_StateAwareConnectionFactory(StateAwareConnectionResolver value);
    [NullableContextAttribute("1")]
public ConfigurationOptions get_ConfigurationOptions();
    private void ResetConfigurationOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Redis.Extensions.Core.Configuration.RedisHost : object {
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    public string Host { get; public set; }
    public int Port { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
}
public class StackExchange.Redis.Extensions.Core.Configuration.ServerEnumerationStrategy : object {
    [CompilerGeneratedAttribute]
private ModeOptions <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetRoleOptions <TargetRole>k__BackingField;
    [CompilerGeneratedAttribute]
private UnreachableServerActionOptions <UnreachableServerAction>k__BackingField;
    public ModeOptions Mode { get; public set; }
    public TargetRoleOptions TargetRole { get; public set; }
    public UnreachableServerActionOptions UnreachableServerAction { get; public set; }
    [CompilerGeneratedAttribute]
public ModeOptions get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(ModeOptions value);
    [CompilerGeneratedAttribute]
public TargetRoleOptions get_TargetRole();
    [CompilerGeneratedAttribute]
public void set_TargetRole(TargetRoleOptions value);
    [CompilerGeneratedAttribute]
public UnreachableServerActionOptions get_UnreachableServerAction();
    [CompilerGeneratedAttribute]
public void set_UnreachableServerAction(UnreachableServerActionOptions value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class StackExchange.Redis.Extensions.Core.Extensions.ValueLengthExtensions : object {
    [IteratorStateMachineAttribute("StackExchange.Redis.Extensions.Core.Extensions.ValueLengthExtensions/<OfValueInListSize>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<string, Byte[]>> OfValueInListSize(IEnumerable`1<Tuple`2<string, T>> items, ISerializer serializer, UInt32 maxValueLength);
    [ExtensionAttribute]
public static Byte[] OfValueSize(T value, ISerializer serializer, UInt32 maxValueLength, string key);
    [ExtensionAttribute]
private static Byte[] SerializeItem(T item, ISerializer serializer);
    [ExtensionAttribute]
private static Byte[] CheckLength(Byte[] byteArray, UInt32 maxValueLength, string paramName);
    [ExtensionAttribute]
public static TSource MinBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector, IComparer`1<TKey> comparer);
}
public static class StackExchange.Redis.Extensions.Core.Helpers.TagHelper : object {
    [NullableContextAttribute("1")]
public static string GenerateTagKey(string tag);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Redis.Extensions.Core.Implementations.RedisClient : object {
    private RedisConfiguration redisConfiguration;
    [CompilerGeneratedAttribute]
private ISerializer <Serializer>k__BackingField;
    [CompilerGeneratedAttribute]
private IRedisConnectionPoolManager <ConnectionPoolManager>k__BackingField;
    public IRedisDatabase Db0 { get; }
    public IRedisDatabase Db1 { get; }
    public IRedisDatabase Db2 { get; }
    public IRedisDatabase Db3 { get; }
    public IRedisDatabase Db4 { get; }
    public IRedisDatabase Db5 { get; }
    public IRedisDatabase Db6 { get; }
    public IRedisDatabase Db7 { get; }
    public IRedisDatabase Db8 { get; }
    public IRedisDatabase Db9 { get; }
    public IRedisDatabase Db10 { get; }
    public IRedisDatabase Db11 { get; }
    public IRedisDatabase Db12 { get; }
    public IRedisDatabase Db13 { get; }
    public IRedisDatabase Db14 { get; }
    public IRedisDatabase Db15 { get; }
    public IRedisDatabase Db16 { get; }
    public ISerializer Serializer { get; }
    public IRedisConnectionPoolManager ConnectionPoolManager { get; }
    public RedisClient(IRedisConnectionPoolManager connectionPoolManager, ISerializer serializer, RedisConfiguration redisConfiguration);
    public sealed virtual IRedisDatabase get_Db0();
    public sealed virtual IRedisDatabase get_Db1();
    public sealed virtual IRedisDatabase get_Db2();
    public sealed virtual IRedisDatabase get_Db3();
    public sealed virtual IRedisDatabase get_Db4();
    public sealed virtual IRedisDatabase get_Db5();
    public sealed virtual IRedisDatabase get_Db6();
    public sealed virtual IRedisDatabase get_Db7();
    public sealed virtual IRedisDatabase get_Db8();
    public sealed virtual IRedisDatabase get_Db9();
    public sealed virtual IRedisDatabase get_Db10();
    public sealed virtual IRedisDatabase get_Db11();
    public sealed virtual IRedisDatabase get_Db12();
    public sealed virtual IRedisDatabase get_Db13();
    public sealed virtual IRedisDatabase get_Db14();
    public sealed virtual IRedisDatabase get_Db15();
    public sealed virtual IRedisDatabase get_Db16();
    [CompilerGeneratedAttribute]
public sealed virtual ISerializer get_Serializer();
    public sealed virtual IRedisDatabase GetDb(int dbNumber, string keyPrefix);
    public sealed virtual IRedisDatabase GetDefaultDatabase();
    [CompilerGeneratedAttribute]
public sealed virtual IRedisConnectionPoolManager get_ConnectionPoolManager();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Redis.Extensions.Core.Implementations.RedisClientFactory : object {
    private Dictionary`2<string, IRedisClient> redisCacheClients;
    [NullableAttribute("2")]
private string defaultConnectionName;
    public RedisClientFactory(IEnumerable`1<RedisConfiguration> configurations, ILoggerFactory loggerFactory, ISerializer serializer);
    public sealed virtual IEnumerable`1<IRedisClient> GetAllClients();
    public sealed virtual IRedisClient GetDefaultRedisClient();
    public sealed virtual IRedisClient GetRedisClient(string name);
    public sealed virtual IRedisDatabase GetDefaultRedisDatabase();
    public sealed virtual IRedisDatabase GetRedisDatabase(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Redis.Extensions.Core.Implementations.RedisConnectionPoolManager : object {
    private static object lock;
    private IStateAwareConnection[] connections;
    private RedisConfiguration redisConfiguration;
    private ILogger`1<RedisConnectionPoolManager> logger;
    private bool isDisposed;
    public RedisConnectionPoolManager(RedisConfiguration redisConfiguration, ILogger`1<RedisConnectionPoolManager> logger);
    private static RedisConnectionPoolManager();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public sealed virtual IConnectionMultiplexer GetConnection();
    [IteratorStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisConnectionPoolManager/<GetConnections>d__9")]
public sealed virtual IEnumerable`1<IConnectionMultiplexer> GetConnections();
    public sealed virtual ConnectionPoolInformation GetConnectionInformation();
    private void EmitConnections();
    [CompilerGeneratedAttribute]
private void <EmitConnections>b__11_0(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase : object {
    private IRedisConnectionPoolManager connectionPoolManager;
    private ServerEnumerationStrategy serverEnumerationStrategy;
    private string keyPrefix;
    private UInt32 maxValueLength;
    private int dbNumber;
    [CompilerGeneratedAttribute]
private ISerializer <Serializer>k__BackingField;
    public IDatabase Database { get; }
    public ISerializer Serializer { get; }
    public RedisDatabase(IRedisConnectionPoolManager connectionPoolManager, ISerializer serializer, ServerEnumerationStrategy serverEnumerationStrategy, int dbNumber, UInt32 maxvalueLength, string keyPrefix);
    public sealed virtual IDatabase get_Database();
    [CompilerGeneratedAttribute]
public sealed virtual ISerializer get_Serializer();
    public sealed virtual Task`1<bool> ExistsAsync(string key, CommandFlags flags);
    public sealed virtual Task`1<bool> RemoveAsync(string key, CommandFlags flags);
    public sealed virtual Task`1<long> RemoveAllAsync(String[] keys, CommandFlags flags);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<GetAsync>d__14`1")]
public sealed virtual Task`1<T> GetAsync(string key, CommandFlags flag);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<GetAsync>d__15`1")]
public sealed virtual Task`1<T> GetAsync(string key, DateTimeOffset expiresAt, CommandFlags flag);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<GetAsync>d__16`1")]
public sealed virtual Task`1<T> GetAsync(string key, TimeSpan expiresIn, CommandFlags flag);
    public sealed virtual Task`1<bool> AddAsync(string key, T value, When when, CommandFlags flag, HashSet`1<string> tags);
    public sealed virtual Task`1<bool> ReplaceAsync(string key, T value, When when, CommandFlags flag);
    public sealed virtual Task`1<bool> AddAsync(string key, T value, DateTimeOffset expiresAt, When when, CommandFlags flag, HashSet`1<string> tags);
    public sealed virtual Task`1<bool> ReplaceAsync(string key, T value, DateTimeOffset expiresAt, When when, CommandFlags flag);
    public sealed virtual Task`1<bool> AddAsync(string key, T value, TimeSpan expiresIn, When when, CommandFlags flag, HashSet`1<string> tags);
    public sealed virtual Task`1<bool> ReplaceAsync(string key, T value, TimeSpan expiresIn, When when, CommandFlags flag);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<GetAllAsync>d__23`1")]
public sealed virtual Task`1<IDictionary`2<string, T>> GetAllAsync(HashSet`1<string> keys, CommandFlags flag);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<GetAllAsync>d__24`1")]
public sealed virtual Task`1<IDictionary`2<string, T>> GetAllAsync(HashSet`1<string> keys, DateTimeOffset expiresAt, CommandFlags flag);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<GetAllAsync>d__25`1")]
public sealed virtual Task`1<IDictionary`2<string, T>> GetAllAsync(HashSet`1<string> keys, TimeSpan expiresIn, CommandFlags flag);
    public sealed virtual Task`1<bool> AddAllAsync(Tuple`2[] items, When when, CommandFlags flag);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<AddAllAsync>d__27`1")]
public sealed virtual Task`1<bool> AddAllAsync(Tuple`2[] items, DateTimeOffset expiresAt, When when, CommandFlags flag);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<AddAllAsync>d__28`1")]
public sealed virtual Task`1<bool> AddAllAsync(Tuple`2[] items, TimeSpan expiresOn, When when, CommandFlags flag);
    public sealed virtual Task`1<bool> SetAddAsync(string key, T item, CommandFlags flag);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<SetPopAsync>d__30`1")]
public sealed virtual Task`1<T> SetPopAsync(string key, CommandFlags flag);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<SetPopAsync>d__31`1")]
public sealed virtual Task`1<IEnumerable`1<T>> SetPopAsync(string key, long count, CommandFlags flag);
    public sealed virtual Task`1<bool> SetContainsAsync(string key, T item, CommandFlags flag);
    public sealed virtual Task`1<long> SetAddAllAsync(string key, CommandFlags flag, T[] items);
    public sealed virtual Task`1<bool> SetRemoveAsync(string key, T item, CommandFlags flag);
    public sealed virtual Task`1<long> SetRemoveAllAsync(string key, CommandFlags flag, T[] items);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<SetMemberAsync>d__36")]
public sealed virtual Task`1<String[]> SetMemberAsync(string memberName, CommandFlags flag);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<SetMembersAsync>d__37`1")]
public sealed virtual Task`1<T[]> SetMembersAsync(string key, CommandFlags flag);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<SearchKeysAsync>d__38")]
public sealed virtual Task`1<IEnumerable`1<string>> SearchKeysAsync(string pattern);
    public sealed virtual Task FlushDbAsync();
    public sealed virtual Task SaveAsync(SaveType saveType, CommandFlags flags);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<GetInfoAsync>d__41")]
public sealed virtual Task`1<Dictionary`2<string, string>> GetInfoAsync();
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<GetInfoCategorizedAsync>d__42")]
public sealed virtual Task`1<InfoDetail[]> GetInfoCategorizedAsync();
    public sealed virtual Task`1<double> SortedSetAddIncrementAsync(string key, T value, double score, CommandFlags commandFlags);
    private Dictionary`2<string, string> ParseInfo(string info);
    private InfoDetail[] ParseCategorizedInfo(string info);
    public sealed virtual Task`1<bool> HashDeleteAsync(string hashKey, string key, CommandFlags commandFlags);
    public sealed virtual Task`1<long> HashDeleteAsync(string hashKey, String[] keys, CommandFlags commandFlags);
    public sealed virtual Task`1<bool> HashExistsAsync(string hashKey, string key, CommandFlags commandFlags);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<HashGetAsync>d__49`1")]
public sealed virtual Task`1<T> HashGetAsync(string hashKey, string key, CommandFlags commandFlags);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<HashGetAsync>d__50`1")]
public sealed virtual Task`1<IDictionary`2<string, T>> HashGetAsync(string hashKey, String[] keys, CommandFlags commandFlags);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<HashGetAllAsyncAtOneTimeAsync>d__51`1")]
public sealed virtual Task`1<IDictionary`2<string, T>> HashGetAllAsyncAtOneTimeAsync(string hashKey, String[] keys, CommandFlags commandFlags);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<HashGetAllAsync>d__52`1")]
public sealed virtual Task`1<IDictionary`2<string, T>> HashGetAllAsync(string hashKey, CommandFlags commandFlags);
    public sealed virtual Task`1<long> HashIncrementByAsync(string hashKey, string key, long value, CommandFlags commandFlags);
    public sealed virtual Task`1<double> HashIncrementByAsync(string hashKey, string key, double value, CommandFlags commandFlags);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<HashKeysAsync>d__55")]
public sealed virtual Task`1<IEnumerable`1<string>> HashKeysAsync(string hashKey, CommandFlags commandFlags);
    public sealed virtual Task`1<long> HashLengthAsync(string hashKey, CommandFlags commandFlags);
    public sealed virtual Task`1<bool> HashSetAsync(string hashKey, string key, T value, bool nx, CommandFlags commandFlags);
    public sealed virtual Task HashSetAsync(string hashKey, IDictionary`2<string, T> values, CommandFlags commandFlags);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<HashValuesAsync>d__59`1")]
public sealed virtual Task`1<IEnumerable`1<T>> HashValuesAsync(string hashKey, CommandFlags commandFlags);
    public sealed virtual Dictionary`2<string, T> HashScan(string hashKey, string pattern, int pageSize, CommandFlags commandFlags);
    public sealed virtual Task`1<long> ListAddToLeftAsync(string key, T item, When when, CommandFlags flags);
    public sealed virtual Task`1<long> ListAddToLeftAsync(string key, T[] items, CommandFlags flags);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<ListGetFromRightAsync>d__63`1")]
public sealed virtual Task`1<T> ListGetFromRightAsync(string key, CommandFlags flags);
    public sealed virtual Task`1<long> PublishAsync(RedisChannel channel, T message, CommandFlags flags);
    public sealed virtual Task SubscribeAsync(RedisChannel channel, Func`2<T, Task> handler, CommandFlags flags);
    public sealed virtual Task UnsubscribeAsync(RedisChannel channel, Func`2<T, Task> handler, CommandFlags flags);
    public sealed virtual Task UnsubscribeAllAsync(CommandFlags flags);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<UpdateExpiryAsync>d__68")]
public sealed virtual Task`1<bool> UpdateExpiryAsync(string key, DateTimeOffset expiresAt, CommandFlags flags);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<UpdateExpiryAsync>d__69")]
public sealed virtual Task`1<bool> UpdateExpiryAsync(string key, TimeSpan expiresIn, CommandFlags flags);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<UpdateExpiryAllAsync>d__70")]
public sealed virtual Task`1<IDictionary`2<string, bool>> UpdateExpiryAllAsync(HashSet`1<string> keys, DateTimeOffset expiresAt, CommandFlags flags);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<UpdateExpiryAllAsync>d__71")]
public sealed virtual Task`1<IDictionary`2<string, bool>> UpdateExpiryAllAsync(HashSet`1<string> keys, TimeSpan expiresIn, CommandFlags flags);
    public sealed virtual Task`1<bool> SortedSetAddAsync(string key, T value, double score, CommandFlags commandFlags);
    public sealed virtual Task`1<bool> SortedSetRemoveAsync(string key, T value, CommandFlags commandFlags);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<SortedSetRangeByScoreAsync>d__74`1")]
public sealed virtual Task`1<IEnumerable`1<T>> SortedSetRangeByScoreAsync(string key, double start, double stop, Exclude exclude, Order order, long skip, long take, CommandFlags commandFlags);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<SortedSetRangeByRankWithScoresAsync>d__75`1")]
public sealed virtual Task`1<IEnumerable`1<ScoreRankResult`1<T>>> SortedSetRangeByRankWithScoresAsync(string key, long start, long stop, Order order, CommandFlags commandFlags);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<GetByTagAsync>d__76`1")]
public sealed virtual Task`1<IEnumerable`1<T>> GetByTagAsync(string tag, CommandFlags commandFlags);
    [AsyncStateMachineAttribute("StackExchange.Redis.Extensions.Core.Implementations.RedisDatabase/<RemoveByTagAsync>d__77")]
public sealed virtual Task`1<long> RemoveByTagAsync(string tag, CommandFlags commandFlags);
    private Task`1<bool> ExecuteAddWithTagsAsync(string key, HashSet`1<string> tags, Func`2<IDatabaseAsync, Task`1<bool>> action, When when, CommandFlags commandFlags);
    private static void TryAddCondition(ITransaction transaction, When when, string key);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private T <SetPopAsync>b__31_0(RedisValue item);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Byte[] <SetAddAllAsync>b__33_1(T item);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Byte[] <SetRemoveAllAsync>b__35_1(T item);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <SearchKeysAsync>b__38_0(string k);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private T <HashGetAllAsync>b__52_1(HashEntry x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private HashEntry <HashSetAsync>b__58_0(KeyValuePair`2<string, T> kv);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private T <HashValuesAsync>b__59_0(RedisValue x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private T <HashScan>b__60_1(HashEntry x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private RedisValue <ListAddToLeftAsync>b__62_0(T x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private T <SortedSetRangeByScoreAsync>b__74_0(RedisValue m);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ScoreRankResult`1<T> <SortedSetRangeByRankWithScoresAsync>b__75_0(SortedSetEntry x);
}
[NullableContextAttribute("2")]
public interface StackExchange.Redis.Extensions.Core.ISerializer {
    public abstract virtual Byte[] Serialize(T item);
    public abstract virtual T Deserialize(Byte[] serializedObject);
}
public class StackExchange.Redis.Extensions.Core.Models.ConnectionPoolInformation : object {
    [CompilerGeneratedAttribute]
private int <RequiredPoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ActiveConnections>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InvalidConnections>k__BackingField;
    public int RequiredPoolSize { get; public set; }
    public int ActiveConnections { get; public set; }
    public int InvalidConnections { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RequiredPoolSize();
    [CompilerGeneratedAttribute]
public void set_RequiredPoolSize(int value);
    [CompilerGeneratedAttribute]
public int get_ActiveConnections();
    [CompilerGeneratedAttribute]
public void set_ActiveConnections(int value);
    [CompilerGeneratedAttribute]
public int get_InvalidConnections();
    [CompilerGeneratedAttribute]
public void set_InvalidConnections(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Redis.Extensions.Core.Models.InfoDetail : object {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InfoValue>k__BackingField;
    public string Category { get; }
    public string Key { get; }
    public string InfoValue { get; }
    public InfoDetail(string category, string key, string infoValue);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public string get_InfoValue();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class StackExchange.Redis.Extensions.Core.Models.ScoreRankResult`1 : object {
    [CompilerGeneratedAttribute]
private T <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Score>k__BackingField;
    public T Element { get; }
    public double Score { get; }
    public ScoreRankResult`1(T element, double score);
    [CompilerGeneratedAttribute]
public T get_Element();
    [CompilerGeneratedAttribute]
public double get_Score();
}
public class StackExchange.Redis.Extensions.Core.Models.StateAwareConnectionResolver : MulticastDelegate {
    public StateAwareConnectionResolver(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual IStateAwareConnection Invoke(IConnectionMultiplexer connectionMultiplexer, ILogger logger);
    public virtual IAsyncResult BeginInvoke(IConnectionMultiplexer connectionMultiplexer, ILogger logger, AsyncCallback callback, object object);
    public virtual IStateAwareConnection EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Redis.Extensions.Core.ServerIteration.ServerEnumerable : object {
    private IConnectionMultiplexer multiplexer;
    private TargetRoleOptions targetRole;
    private UnreachableServerActionOptions unreachableServerAction;
    public ServerEnumerable(IConnectionMultiplexer multiplexer, TargetRoleOptions targetRole, UnreachableServerActionOptions unreachableServerAction);
    [IteratorStateMachineAttribute("StackExchange.Redis.Extensions.Core.ServerIteration.ServerEnumerable/<GetEnumerator>d__4")]
public sealed virtual IEnumerator`1<IServer> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public static class StackExchange.Redis.Extensions.Core.ServerIteration.ServerIteratorFactory : object {
    [NullableContextAttribute("1")]
public static IEnumerable`1<IServer> GetServers(IConnectionMultiplexer multiplexer, ServerEnumerationStrategy serverEnumerationStrategy);
}
