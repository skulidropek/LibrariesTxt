public class EllipticCurve.CurveFp : object {
    [CompilerGeneratedAttribute]
private BigInteger <A>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <B>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <P>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <N>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <G>k__BackingField;
    [CompilerGeneratedAttribute]
private string <name>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <oid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <nistName>k__BackingField;
    public BigInteger A { get; private set; }
    public BigInteger B { get; private set; }
    public BigInteger P { get; private set; }
    public BigInteger N { get; private set; }
    public Point G { get; private set; }
    public string name { get; private set; }
    public Int32[] oid { get; private set; }
    public string nistName { get; private set; }
    public CurveFp(BigInteger A, BigInteger B, BigInteger P, BigInteger N, BigInteger Gx, BigInteger Gy, string name, Int32[] oid, string nistName);
    [CompilerGeneratedAttribute]
public BigInteger get_A();
    [CompilerGeneratedAttribute]
private void set_A(BigInteger value);
    [CompilerGeneratedAttribute]
public BigInteger get_B();
    [CompilerGeneratedAttribute]
private void set_B(BigInteger value);
    [CompilerGeneratedAttribute]
public BigInteger get_P();
    [CompilerGeneratedAttribute]
private void set_P(BigInteger value);
    [CompilerGeneratedAttribute]
public BigInteger get_N();
    [CompilerGeneratedAttribute]
private void set_N(BigInteger value);
    [CompilerGeneratedAttribute]
public Point get_G();
    [CompilerGeneratedAttribute]
private void set_G(Point value);
    [CompilerGeneratedAttribute]
public string get_name();
    [CompilerGeneratedAttribute]
private void set_name(string value);
    [CompilerGeneratedAttribute]
public Int32[] get_oid();
    [CompilerGeneratedAttribute]
private void set_oid(Int32[] value);
    [CompilerGeneratedAttribute]
public string get_nistName();
    [CompilerGeneratedAttribute]
private void set_nistName(string value);
    public bool contains(Point p);
    public int length();
}
public static class EllipticCurve.Curves : object {
    public static CurveFp secp256k1;
    public static CurveFp prime256v1;
    public static CurveFp p256;
    public static CurveFp[] supportedCurves;
    public static Dictionary`2<string, CurveFp> curvesByOid;
    private static Curves();
    public static CurveFp getCurveByName(string name);
}
public static class EllipticCurve.Ecdsa : object {
    public static Signature sign(string message, PrivateKey privateKey);
    public static bool verify(string message, Signature signature, PublicKey publicKey);
    private static string sha256(string message);
}
public static class EllipticCurve.EcdsaMath : object {
    public static Point multiply(Point p, BigInteger n, BigInteger N, BigInteger A, BigInteger P);
    public static Point add(Point p, Point q, BigInteger A, BigInteger P);
    public static BigInteger inv(BigInteger x, BigInteger n);
    private static Point toJacobian(Point p);
    private static Point fromJacobian(Point p, BigInteger P);
    private static Point jacobianDouble(Point p, BigInteger A, BigInteger P);
    private static Point jacobianAdd(Point p, Point q, BigInteger A, BigInteger P);
    private static Point jacobianMultiply(Point p, BigInteger n, BigInteger N, BigInteger A, BigInteger P);
}
public class EllipticCurve.Point : object {
    [CompilerGeneratedAttribute]
private BigInteger <x>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <y>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <z>k__BackingField;
    public BigInteger x { get; }
    public BigInteger y { get; }
    public BigInteger z { get; }
    public Point(BigInteger x, BigInteger y, Nullable`1<BigInteger> z);
    [CompilerGeneratedAttribute]
public BigInteger get_x();
    [CompilerGeneratedAttribute]
public BigInteger get_y();
    [CompilerGeneratedAttribute]
public BigInteger get_z();
    public bool isAtInfinity();
}
public class EllipticCurve.PrivateKey : object {
    [CompilerGeneratedAttribute]
private CurveFp <curve>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <secret>k__BackingField;
    public CurveFp curve { get; private set; }
    public BigInteger secret { get; private set; }
    public PrivateKey(string curve, Nullable`1<BigInteger> secret);
    [CompilerGeneratedAttribute]
public CurveFp get_curve();
    [CompilerGeneratedAttribute]
private void set_curve(CurveFp value);
    [CompilerGeneratedAttribute]
public BigInteger get_secret();
    [CompilerGeneratedAttribute]
private void set_secret(BigInteger value);
    public PublicKey publicKey();
    public Byte[] toString();
    public Byte[] toDer();
    public string toPem();
    public static PrivateKey fromPem(string str);
    public static PrivateKey fromDer(Byte[] der);
    public static PrivateKey fromString(Byte[] str, string curve);
}
public class EllipticCurve.PublicKey : object {
    [CompilerGeneratedAttribute]
private Point <point>k__BackingField;
    [CompilerGeneratedAttribute]
private CurveFp <curve>k__BackingField;
    public Point point { get; }
    public CurveFp curve { get; private set; }
    public PublicKey(Point point, CurveFp curve);
    [CompilerGeneratedAttribute]
public Point get_point();
    [CompilerGeneratedAttribute]
public CurveFp get_curve();
    [CompilerGeneratedAttribute]
private void set_curve(CurveFp value);
    public Byte[] toString(bool encoded);
    public Byte[] toDer();
    public string toPem();
    public static PublicKey fromPem(string pem);
    public static PublicKey fromDer(Byte[] der);
    public static PublicKey fromString(Byte[] str, string curve, bool validatePoint);
}
public class EllipticCurve.Signature : object {
    [CompilerGeneratedAttribute]
private BigInteger <r>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <s>k__BackingField;
    public BigInteger r { get; }
    public BigInteger s { get; }
    public Signature(BigInteger r, BigInteger s);
    [CompilerGeneratedAttribute]
public BigInteger get_r();
    [CompilerGeneratedAttribute]
public BigInteger get_s();
    public Byte[] toDer();
    public string toBase64();
    public static Signature fromDer(Byte[] bytes);
    public static Signature fromBase64(string str);
}
public static class EllipticCurve.Utils.Base64 : object {
    public static Byte[] decode(string base64String);
    public static string encode(Byte[] bytes);
}
public static class EllipticCurve.Utils.BinaryAscii : object {
    public static string hexFromBinary(Byte[] bytes);
    public static Byte[] binaryFromHex(string hex);
    public static BigInteger numberFromHex(string hex);
    public static string hexFromNumber(BigInteger number, int length);
    public static Byte[] stringFromNumber(BigInteger number, int length);
    public static BigInteger numberFromString(Byte[] bytes);
}
public static class EllipticCurve.Utils.Bytes : object {
    public static Byte[] sliceByteArray(Byte[] bytes, int start);
    public static Byte[] sliceByteArray(Byte[] bytes, int start, int length);
    public static Byte[] intToCharBytes(int num);
}
public static class EllipticCurve.Utils.Der : object {
    private static int hex31;
    private static int hex127;
    private static int hex128;
    private static int hex160;
    private static int hex224;
    private static string hexAt;
    private static string hexB;
    private static string hexC;
    private static string hexD;
    private static string hexF;
    private static string hex0;
    private static Byte[] bytesHexAt;
    private static Byte[] bytesHexB;
    private static Byte[] bytesHexC;
    private static Byte[] bytesHexD;
    private static Byte[] bytesHexF;
    private static Byte[] bytesHex0;
    private static Der();
    public static Byte[] encodeSequence(List`1<Byte[]> encodedPieces);
    public static Byte[] encodeInteger(BigInteger x);
    public static Byte[] encodeOid(Int32[] oid);
    public static Byte[] encodeBitString(Byte[] t);
    public static Byte[] encodeOctetString(Byte[] t);
    public static Byte[] encodeConstructed(int tag, Byte[] value);
    public static Tuple`2<Byte[], Byte[]> removeSequence(Byte[] bytes);
    public static Tuple`2<BigInteger, Byte[]> removeInteger(Byte[] bytes);
    public static Tuple`2<Int32[], Byte[]> removeObject(Byte[] bytes);
    public static Tuple`2<Byte[], Byte[]> removeBitString(Byte[] bytes);
    public static Tuple`2<Byte[], Byte[]> removeOctetString(Byte[] bytes);
    public static Tuple`3<int, Byte[], Byte[]> removeConstructed(Byte[] bytes);
    public static Byte[] fromPem(string pem);
    public static string toPem(Byte[] der, string name);
    public static Byte[] combineByteArrays(List`1<Byte[]> byteArrayList);
    private static Byte[] encodeLength(int length);
    private static Byte[] encodeNumber(int n);
    private static Tuple`2<int, int> readLength(Byte[] bytes);
    private static Tuple`2<int, int> readNumber(Byte[] str);
    private static void checkSequenceError(Byte[] bytes, string start, string expected);
    private static int extractFirstInt(Byte[] str);
}
public static class EllipticCurve.Utils.File : object {
    public static string read(string path);
    public static Byte[] readBytes(string path);
}
public static class EllipticCurve.Utils.Integer : object {
    public static BigInteger modulo(BigInteger dividend, BigInteger divisor);
    public static BigInteger randomBetween(BigInteger minimum, BigInteger maximum);
    private static Tuple`2<int, BigInteger> calculateParameters(BigInteger range);
}
public static class EllipticCurve.Utils.String : object {
    public static string substring(string str, int index, int length);
}
