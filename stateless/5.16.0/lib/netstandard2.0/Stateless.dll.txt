public enum Stateless.FiringMode : Enum {
    public int value__;
    public static FiringMode Immediate;
    public static FiringMode Queued;
}
public class Stateless.Graph.Decision : State {
    [CompilerGeneratedAttribute]
private InvocationInfo <Method>k__BackingField;
    public InvocationInfo Method { get; private set; }
    public Decision(InvocationInfo method, int num);
    [CompilerGeneratedAttribute]
public InvocationInfo get_Method();
    [CompilerGeneratedAttribute]
private void set_Method(InvocationInfo value);
}
public class Stateless.Graph.DynamicTransition : Transition {
    [CompilerGeneratedAttribute]
private State <DestinationState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Criterion>k__BackingField;
    public State DestinationState { get; private set; }
    public string Criterion { get; private set; }
    public DynamicTransition(State sourceState, State destinationState, TriggerInfo trigger, string criterion);
    [CompilerGeneratedAttribute]
public State get_DestinationState();
    [CompilerGeneratedAttribute]
private void set_DestinationState(State value);
    [CompilerGeneratedAttribute]
public string get_Criterion();
    [CompilerGeneratedAttribute]
private void set_Criterion(string value);
}
public class Stateless.Graph.FixedTransition : Transition {
    [CompilerGeneratedAttribute]
private State <DestinationState>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<InvocationInfo> <Guards>k__BackingField;
    public State DestinationState { get; private set; }
    public IEnumerable`1<InvocationInfo> Guards { get; private set; }
    public FixedTransition(State sourceState, State destinationState, TriggerInfo trigger, IEnumerable`1<InvocationInfo> guards);
    [CompilerGeneratedAttribute]
public State get_DestinationState();
    [CompilerGeneratedAttribute]
private void set_DestinationState(State value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<InvocationInfo> get_Guards();
    [CompilerGeneratedAttribute]
private void set_Guards(IEnumerable`1<InvocationInfo> value);
}
public abstract class Stateless.Graph.GraphStyleBase : object {
    public abstract virtual string GetPrefix();
    public abstract virtual string GetInitialTransition(StateInfo initialState);
    public abstract virtual string FormatOneState(State state);
    public abstract virtual string FormatOneCluster(SuperState stateInfo);
    public abstract virtual string FormatOneDecisionNode(string nodeName, string label);
    public virtual List`1<string> FormatAllTransitions(List`1<Transition> transitions);
    public virtual string FormatOneTransition(string sourceNodeName, string trigger, IEnumerable`1<string> actions, string destinationNodeName, IEnumerable`1<string> guards);
}
public class Stateless.Graph.State : object {
    [CompilerGeneratedAttribute]
private SuperState <SuperState>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Transition> <Leaving>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Transition> <Arriving>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StateName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <EntryActions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExitActions>k__BackingField;
    public SuperState SuperState { get; public set; }
    public List`1<Transition> Leaving { get; }
    public List`1<Transition> Arriving { get; }
    public string NodeName { get; private set; }
    public string StateName { get; private set; }
    public List`1<string> EntryActions { get; private set; }
    public List`1<string> ExitActions { get; private set; }
    public State(StateInfo stateInfo);
    public State(string nodeName);
    [CompilerGeneratedAttribute]
public SuperState get_SuperState();
    [CompilerGeneratedAttribute]
public void set_SuperState(SuperState value);
    [CompilerGeneratedAttribute]
public List`1<Transition> get_Leaving();
    [CompilerGeneratedAttribute]
public List`1<Transition> get_Arriving();
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
private void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public string get_StateName();
    [CompilerGeneratedAttribute]
private void set_StateName(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_EntryActions();
    [CompilerGeneratedAttribute]
private void set_EntryActions(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ExitActions();
    [CompilerGeneratedAttribute]
private void set_ExitActions(List`1<string> value);
}
public class Stateless.Graph.StateGraph : object {
    private StateInfo initialState;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, State> <States>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Transition> <Transitions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Decision> <Decisions>k__BackingField;
    public Dictionary`2<string, State> States { get; private set; }
    public List`1<Transition> Transitions { get; private set; }
    public List`1<Decision> Decisions { get; private set; }
    public StateGraph(StateMachineInfo machineInfo);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, State> get_States();
    [CompilerGeneratedAttribute]
private void set_States(Dictionary`2<string, State> value);
    [CompilerGeneratedAttribute]
public List`1<Transition> get_Transitions();
    [CompilerGeneratedAttribute]
private void set_Transitions(List`1<Transition> value);
    [CompilerGeneratedAttribute]
public List`1<Decision> get_Decisions();
    [CompilerGeneratedAttribute]
private void set_Decisions(List`1<Decision> value);
    public string ToGraph(GraphStyleBase style);
    private void ProcessOnEntryFrom(StateMachineInfo machineInfo);
    private void AddTransitions(StateMachineInfo machineInfo);
    private void AddSingleStates(StateMachineInfo machineInfo);
    private void AddSuperstates(StateMachineInfo machineInfo);
    private void AddSubstates(SuperState superState, IEnumerable`1<StateInfo> substates);
}
public class Stateless.Graph.StayTransition : Transition {
    [CompilerGeneratedAttribute]
private IEnumerable`1<InvocationInfo> <Guards>k__BackingField;
    public IEnumerable`1<InvocationInfo> Guards { get; private set; }
    public StayTransition(State sourceState, TriggerInfo trigger, IEnumerable`1<InvocationInfo> guards, bool executeEntryExitActions);
    [CompilerGeneratedAttribute]
public IEnumerable`1<InvocationInfo> get_Guards();
    [CompilerGeneratedAttribute]
private void set_Guards(IEnumerable`1<InvocationInfo> value);
}
public class Stateless.Graph.SuperState : State {
    [CompilerGeneratedAttribute]
private List`1<State> <SubStates>k__BackingField;
    public List`1<State> SubStates { get; }
    public SuperState(StateInfo stateInfo);
    [CompilerGeneratedAttribute]
public List`1<State> get_SubStates();
}
public class Stateless.Graph.Transition : object {
    [CompilerGeneratedAttribute]
private TriggerInfo <Trigger>k__BackingField;
    public List`1<ActionInfo> DestinationEntryActions;
    [CompilerGeneratedAttribute]
private bool <ExecuteEntryExitActions>k__BackingField;
    [CompilerGeneratedAttribute]
private State <SourceState>k__BackingField;
    public TriggerInfo Trigger { get; private set; }
    public bool ExecuteEntryExitActions { get; protected set; }
    public State SourceState { get; private set; }
    public Transition(State sourceState, TriggerInfo trigger);
    [CompilerGeneratedAttribute]
public TriggerInfo get_Trigger();
    [CompilerGeneratedAttribute]
private void set_Trigger(TriggerInfo value);
    [CompilerGeneratedAttribute]
public bool get_ExecuteEntryExitActions();
    [CompilerGeneratedAttribute]
protected void set_ExecuteEntryExitActions(bool value);
    [CompilerGeneratedAttribute]
public State get_SourceState();
    [CompilerGeneratedAttribute]
private void set_SourceState(State value);
}
public static class Stateless.Graph.UmlDotGraph : object {
    public static string Format(StateMachineInfo machineInfo);
}
public class Stateless.Graph.UmlDotGraphStyle : GraphStyleBase {
    public virtual string GetPrefix();
    public virtual string FormatOneCluster(SuperState stateInfo);
    public virtual string FormatOneState(State state);
    public virtual string FormatOneTransition(string sourceNodeName, string trigger, IEnumerable`1<string> actions, string destinationNodeName, IEnumerable`1<string> guards);
    public virtual string FormatOneDecisionNode(string nodeName, string label);
    public virtual string GetInitialTransition(StateInfo initialState);
    internal string FormatOneLine(string fromNodeName, string toNodeName, string label);
}
internal static class Stateless.ParameterConversion : object {
    public static object Unpack(Object[] args, Type argType, int index);
    public static TArg Unpack(Object[] args, int index);
    public static void Validate(Object[] args, Type[] expected);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Stateless.ParameterConversionResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgOfTypeRequiredInPosition { get; }
    internal static string TooManyParameters { get; }
    internal static string WrongArgType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgOfTypeRequiredInPosition();
    internal static string get_TooManyParameters();
    internal static string get_WrongArgType();
}
public class Stateless.Reflection.ActionInfo : object {
    [CompilerGeneratedAttribute]
private InvocationInfo <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FromTrigger>k__BackingField;
    public InvocationInfo Method { get; internal set; }
    public string FromTrigger { get; internal set; }
    public ActionInfo(InvocationInfo method, string fromTrigger);
    [CompilerGeneratedAttribute]
public InvocationInfo get_Method();
    [CompilerGeneratedAttribute]
internal void set_Method(InvocationInfo value);
    [CompilerGeneratedAttribute]
public string get_FromTrigger();
    [CompilerGeneratedAttribute]
internal void set_FromTrigger(string value);
    internal static ActionInfo Create(EntryActionBehavior<TState, TTrigger> entryAction);
}
public class Stateless.Reflection.DynamicStateInfo : object {
    [CompilerGeneratedAttribute]
private string <DestinationState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Criterion>k__BackingField;
    public string DestinationState { get; public set; }
    public string Criterion { get; public set; }
    public DynamicStateInfo(string destinationState, string criterion);
    [CompilerGeneratedAttribute]
public string get_DestinationState();
    [CompilerGeneratedAttribute]
public void set_DestinationState(string value);
    [CompilerGeneratedAttribute]
public string get_Criterion();
    [CompilerGeneratedAttribute]
public void set_Criterion(string value);
}
public class Stateless.Reflection.DynamicStateInfos : List`1<DynamicStateInfo> {
    public void Add(string destinationState, string criterion);
    public void Add(TState destinationState, string criterion);
}
public class Stateless.Reflection.DynamicTransitionInfo : TransitionInfo {
    [CompilerGeneratedAttribute]
private InvocationInfo <DestinationStateSelectorDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private DynamicStateInfos <PossibleDestinationStates>k__BackingField;
    public InvocationInfo DestinationStateSelectorDescription { get; private set; }
    public DynamicStateInfos PossibleDestinationStates { get; private set; }
    [CompilerGeneratedAttribute]
public InvocationInfo get_DestinationStateSelectorDescription();
    [CompilerGeneratedAttribute]
private void set_DestinationStateSelectorDescription(InvocationInfo value);
    [CompilerGeneratedAttribute]
public DynamicStateInfos get_PossibleDestinationStates();
    [CompilerGeneratedAttribute]
private void set_PossibleDestinationStates(DynamicStateInfos value);
    public static DynamicTransitionInfo Create(TTrigger trigger, IEnumerable`1<InvocationInfo> guards, InvocationInfo selector, DynamicStateInfos possibleStates);
}
public class Stateless.Reflection.FixedTransitionInfo : TransitionInfo {
    [CompilerGeneratedAttribute]
private StateInfo <DestinationState>k__BackingField;
    public StateInfo DestinationState { get; private set; }
    internal static FixedTransitionInfo Create(TriggerBehaviour<TState, TTrigger> behaviour, StateInfo destinationStateInfo);
    [CompilerGeneratedAttribute]
public StateInfo get_DestinationState();
    [CompilerGeneratedAttribute]
private void set_DestinationState(StateInfo value);
}
public class Stateless.Reflection.IgnoredTransitionInfo : TransitionInfo {
    internal static IgnoredTransitionInfo Create(IgnoredTriggerBehaviour<TState, TTrigger> behaviour);
}
public class Stateless.Reflection.InvocationInfo : object {
    private string _description;
    private Timing _timing;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DefaultFunctionDescription>k__BackingField;
    public string MethodName { get; private set; }
    public static string DefaultFunctionDescription { get; public set; }
    public string Description { get; }
    public bool IsAsync { get; }
    public InvocationInfo(string methodName, string description, Timing timing);
    private static InvocationInfo();
    internal static InvocationInfo Create(Delegate method, string description, Timing timing);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
private void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public static string get_DefaultFunctionDescription();
    [CompilerGeneratedAttribute]
public static void set_DefaultFunctionDescription(string value);
    public string get_Description();
    public bool get_IsAsync();
}
public class Stateless.Reflection.StateInfo : object {
    [CompilerGeneratedAttribute]
private object <UnderlyingState>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<StateInfo> <Substates>k__BackingField;
    [CompilerGeneratedAttribute]
private StateInfo <Superstate>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ActionInfo> <EntryActions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<InvocationInfo> <ActivateActions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<InvocationInfo> <DeactivateActions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<InvocationInfo> <ExitActions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<FixedTransitionInfo> <FixedTransitions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<DynamicTransitionInfo> <DynamicTransitions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IgnoredTransitionInfo> <IgnoredTriggers>k__BackingField;
    public object UnderlyingState { get; }
    public IEnumerable`1<StateInfo> Substates { get; private set; }
    public StateInfo Superstate { get; private set; }
    public IEnumerable`1<ActionInfo> EntryActions { get; private set; }
    public IEnumerable`1<InvocationInfo> ActivateActions { get; private set; }
    public IEnumerable`1<InvocationInfo> DeactivateActions { get; private set; }
    public IEnumerable`1<InvocationInfo> ExitActions { get; private set; }
    public IEnumerable`1<TransitionInfo> Transitions { get; }
    public IEnumerable`1<FixedTransitionInfo> FixedTransitions { get; private set; }
    public IEnumerable`1<DynamicTransitionInfo> DynamicTransitions { get; private set; }
    public IEnumerable`1<IgnoredTransitionInfo> IgnoredTriggers { get; private set; }
    private StateInfo(object underlyingState, IEnumerable`1<IgnoredTransitionInfo> ignoredTriggers, IEnumerable`1<ActionInfo> entryActions, IEnumerable`1<InvocationInfo> activateActions, IEnumerable`1<InvocationInfo> deactivateActions, IEnumerable`1<InvocationInfo> exitActions);
    internal static StateInfo CreateStateInfo(StateRepresentation<TState, TTrigger> stateRepresentation);
    internal static void AddRelationships(StateInfo info, StateRepresentation<TState, TTrigger> stateRepresentation, Func`2<TState, StateInfo> lookupState);
    private void AddRelationships(StateInfo superstate, IEnumerable`1<StateInfo> substates, IEnumerable`1<FixedTransitionInfo> transitions, IEnumerable`1<DynamicTransitionInfo> dynamicTransitions);
    [CompilerGeneratedAttribute]
public object get_UnderlyingState();
    [CompilerGeneratedAttribute]
public IEnumerable`1<StateInfo> get_Substates();
    [CompilerGeneratedAttribute]
private void set_Substates(IEnumerable`1<StateInfo> value);
    [CompilerGeneratedAttribute]
public StateInfo get_Superstate();
    [CompilerGeneratedAttribute]
private void set_Superstate(StateInfo value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ActionInfo> get_EntryActions();
    [CompilerGeneratedAttribute]
private void set_EntryActions(IEnumerable`1<ActionInfo> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<InvocationInfo> get_ActivateActions();
    [CompilerGeneratedAttribute]
private void set_ActivateActions(IEnumerable`1<InvocationInfo> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<InvocationInfo> get_DeactivateActions();
    [CompilerGeneratedAttribute]
private void set_DeactivateActions(IEnumerable`1<InvocationInfo> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<InvocationInfo> get_ExitActions();
    [CompilerGeneratedAttribute]
private void set_ExitActions(IEnumerable`1<InvocationInfo> value);
    public IEnumerable`1<TransitionInfo> get_Transitions();
    [CompilerGeneratedAttribute]
public IEnumerable`1<FixedTransitionInfo> get_FixedTransitions();
    [CompilerGeneratedAttribute]
private void set_FixedTransitions(IEnumerable`1<FixedTransitionInfo> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<DynamicTransitionInfo> get_DynamicTransitions();
    [CompilerGeneratedAttribute]
private void set_DynamicTransitions(IEnumerable`1<DynamicTransitionInfo> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IgnoredTransitionInfo> get_IgnoredTriggers();
    [CompilerGeneratedAttribute]
private void set_IgnoredTriggers(IEnumerable`1<IgnoredTransitionInfo> value);
    public virtual string ToString();
}
public class Stateless.Reflection.StateMachineInfo : object {
    [CompilerGeneratedAttribute]
private StateInfo <InitialState>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<StateInfo> <States>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StateType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TriggerType>k__BackingField;
    public StateInfo InitialState { get; }
    public IEnumerable`1<StateInfo> States { get; }
    public Type StateType { get; private set; }
    public Type TriggerType { get; private set; }
    internal StateMachineInfo(IEnumerable`1<StateInfo> states, Type stateType, Type triggerType, StateInfo initialState);
    [CompilerGeneratedAttribute]
public StateInfo get_InitialState();
    [CompilerGeneratedAttribute]
public IEnumerable`1<StateInfo> get_States();
    [CompilerGeneratedAttribute]
public Type get_StateType();
    [CompilerGeneratedAttribute]
private void set_StateType(Type value);
    [CompilerGeneratedAttribute]
public Type get_TriggerType();
    [CompilerGeneratedAttribute]
private void set_TriggerType(Type value);
}
public abstract class Stateless.Reflection.TransitionInfo : object {
    [CompilerGeneratedAttribute]
private TriggerInfo <Trigger>k__BackingField;
    public IEnumerable`1<InvocationInfo> GuardConditionsMethodDescriptions;
    public TriggerInfo Trigger { get; protected set; }
    [CompilerGeneratedAttribute]
public TriggerInfo get_Trigger();
    [CompilerGeneratedAttribute]
protected void set_Trigger(TriggerInfo value);
}
public class Stateless.Reflection.TriggerInfo : object {
    [CompilerGeneratedAttribute]
private object <UnderlyingTrigger>k__BackingField;
    public object UnderlyingTrigger { get; }
    internal TriggerInfo(object underlyingTrigger);
    [CompilerGeneratedAttribute]
public object get_UnderlyingTrigger();
    public virtual string ToString();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Stateless.StateConfigurationResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string SelfTransitionsEitherIgnoredOrReentrant { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_SelfTransitionsEitherIgnoredOrReentrant();
}
public class Stateless.StateMachine`2 : object {
    private IDictionary`2<TState, StateRepresentation<TState, TTrigger>> _stateConfiguration;
    private IDictionary`2<TTrigger, TriggerWithParameters<TState, TTrigger>> _triggerConfiguration;
    private Func`1<TState> _stateAccessor;
    private Action`1<TState> _stateMutator;
    private UnhandledTriggerAction<TState, TTrigger> _unhandledTriggerAction;
    private OnTransitionedEvent<TState, TTrigger> _onTransitionedEvent;
    private OnTransitionedEvent<TState, TTrigger> _onTransitionCompletedEvent;
    private TState _initialState;
    private FiringMode _firingMode;
    private Queue`1<QueuedTrigger<TState, TTrigger>> _eventQueue;
    private bool _firing;
    [CompilerGeneratedAttribute]
private bool <RetainSynchronizationContext>k__BackingField;
    public bool RetainSynchronizationContext { get; public set; }
    public TState State { get; private set; }
    public IEnumerable`1<TTrigger> PermittedTriggers { get; }
    private StateRepresentation<TState, TTrigger> CurrentRepresentation { get; }
    public StateMachine`2(Func`1<TState> stateAccessor, Action`1<TState> stateMutator);
    public StateMachine`2(TState initialState);
    public StateMachine`2(Func`1<TState> stateAccessor, Action`1<TState> stateMutator, FiringMode firingMode);
    public StateMachine`2(TState initialState, FiringMode firingMode);
    public Task ActivateAsync();
    public Task DeactivateAsync();
    public Task FireAsync(TTrigger trigger);
    public Task FireAsync(TTrigger trigger, Object[] args);
    public Task FireAsync(TriggerWithParameters<TState, TTrigger> trigger, Object[] args);
    public Task FireAsync(TriggerWithParameters`1<TState, TTrigger, TArg0> trigger, TArg0 arg0);
    public Task FireAsync(TriggerWithParameters`2<TState, TTrigger, TArg0, TArg1> trigger, TArg0 arg0, TArg1 arg1);
    public Task FireAsync(TriggerWithParameters`3<TState, TTrigger, TArg0, TArg1, TArg2> trigger, TArg0 arg0, TArg1 arg1, TArg2 arg2);
    [AsyncStateMachineAttribute("Stateless.StateMachine`2/<InternalFireAsync>d__20")]
private Task InternalFireAsync(TTrigger trigger, Object[] args);
    [AsyncStateMachineAttribute("Stateless.StateMachine`2/<InternalFireQueuedAsync>d__21")]
private Task InternalFireQueuedAsync(TTrigger trigger, Object[] args);
    [AsyncStateMachineAttribute("Stateless.StateMachine`2/<InternalFireOneAsync>d__22")]
private Task InternalFireOneAsync(TTrigger trigger, Object[] args);
    [AsyncStateMachineAttribute("Stateless.StateMachine`2/<HandleReentryTriggerAsync>d__23")]
private Task HandleReentryTriggerAsync(Object[] args, StateRepresentation<TState, TTrigger> representativeState, Transition<TState, TTrigger> transition);
    [AsyncStateMachineAttribute("Stateless.StateMachine`2/<HandleTransitioningTriggerAsync>d__24")]
private Task HandleTransitioningTriggerAsync(Object[] args, StateRepresentation<TState, TTrigger> representativeState, Transition<TState, TTrigger> transition);
    [AsyncStateMachineAttribute("Stateless.StateMachine`2/<EnterStateAsync>d__25")]
private Task`1<StateRepresentation<TState, TTrigger>> EnterStateAsync(StateRepresentation<TState, TTrigger> representation, Transition<TState, TTrigger> transition, Object[] args);
    public void OnUnhandledTriggerAsync(Func`3<TState, TTrigger, Task> unhandledTriggerAction);
    public void OnUnhandledTriggerAsync(Func`4<TState, TTrigger, ICollection`1<string>, Task> unhandledTriggerAction);
    public void OnTransitionedAsync(Func`2<Transition<TState, TTrigger>, Task> onTransitionAction);
    public void OnTransitionCompletedAsync(Func`2<Transition<TState, TTrigger>, Task> onTransitionAction);
    [CompilerGeneratedAttribute]
public bool get_RetainSynchronizationContext();
    [CompilerGeneratedAttribute]
public void set_RetainSynchronizationContext(bool value);
    public TState get_State();
    private void set_State(TState value);
    public IEnumerable`1<TTrigger> get_PermittedTriggers();
    public IEnumerable`1<TTrigger> GetPermittedTriggers(Object[] args);
    public IEnumerable`1<TriggerDetails`2<TState, TTrigger>> GetDetailedPermittedTriggers(Object[] args);
    private StateRepresentation<TState, TTrigger> get_CurrentRepresentation();
    public StateMachineInfo GetInfo();
    private StateRepresentation<TState, TTrigger> GetRepresentation(TState state);
    public StateConfiguration<TState, TTrigger> Configure(TState state);
    public void Fire(TTrigger trigger);
    public void Fire(TriggerWithParameters<TState, TTrigger> trigger, Object[] args);
    public TriggerWithParameters<TState, TTrigger> SetTriggerParameters(TTrigger trigger, Type[] argumentTypes);
    public void Fire(TriggerWithParameters`1<TState, TTrigger, TArg0> trigger, TArg0 arg0);
    public void Fire(TriggerWithParameters`2<TState, TTrigger, TArg0, TArg1> trigger, TArg0 arg0, TArg1 arg1);
    public void Fire(TriggerWithParameters`3<TState, TTrigger, TArg0, TArg1, TArg2> trigger, TArg0 arg0, TArg1 arg1, TArg2 arg2);
    public void Activate();
    public void Deactivate();
    private void InternalFire(TTrigger trigger, Object[] args);
    private void InternalFireQueued(TTrigger trigger, Object[] args);
    private void InternalFireOne(TTrigger trigger, Object[] args);
    private void HandleReentryTrigger(Object[] args, StateRepresentation<TState, TTrigger> representativeState, Transition<TState, TTrigger> transition);
    private void HandleTransitioningTrigger(Object[] args, StateRepresentation<TState, TTrigger> representativeState, Transition<TState, TTrigger> transition);
    private StateRepresentation<TState, TTrigger> EnterState(StateRepresentation<TState, TTrigger> representation, Transition<TState, TTrigger> transition, Object[] args);
    public void OnUnhandledTrigger(Action`2<TState, TTrigger> unhandledTriggerAction);
    public void OnUnhandledTrigger(Action`3<TState, TTrigger, ICollection`1<string>> unhandledTriggerAction);
    public bool IsInState(TState state);
    public bool CanFire(TTrigger trigger);
    public bool CanFire(TriggerWithParameters`1<TState, TTrigger, TArg0> trigger, TArg0 arg0);
    public bool CanFire(TriggerWithParameters`2<TState, TTrigger, TArg0, TArg1> trigger, TArg0 arg0, TArg1 arg1);
    public bool CanFire(TriggerWithParameters`3<TState, TTrigger, TArg0, TArg1, TArg2> trigger, TArg0 arg0, TArg1 arg1, TArg2 arg2);
    public bool CanFire(TTrigger trigger, ICollection`1& unmetGuards);
    public bool CanFire(TriggerWithParameters`1<TState, TTrigger, TArg0> trigger, TArg0 arg0, ICollection`1& unmetGuards);
    public bool CanFire(TriggerWithParameters`2<TState, TTrigger, TArg0, TArg1> trigger, TArg0 arg0, TArg1 arg1, ICollection`1& unmetGuards);
    public bool CanFire(TriggerWithParameters`3<TState, TTrigger, TArg0, TArg1, TArg2> trigger, TArg0 arg0, TArg1 arg1, TArg2 arg2, ICollection`1& unmetGuards);
    public virtual string ToString();
    public TriggerWithParameters`1<TState, TTrigger, TArg0> SetTriggerParameters(TTrigger trigger);
    public TriggerWithParameters`2<TState, TTrigger, TArg0, TArg1> SetTriggerParameters(TTrigger trigger);
    public TriggerWithParameters`3<TState, TTrigger, TArg0, TArg1, TArg2> SetTriggerParameters(TTrigger trigger);
    private void SaveTriggerConfiguration(TriggerWithParameters<TState, TTrigger> trigger);
    private void DefaultUnhandledTriggerAction(TState state, TTrigger trigger, ICollection`1<string> unmetGuardConditions);
    public void OnTransitioned(Action`1<Transition<TState, TTrigger>> onTransitionAction);
    public void OnTransitionCompleted(Action`1<Transition<TState, TTrigger>> onTransitionAction);
    [CompilerGeneratedAttribute]
private TriggerDetails`2<TState, TTrigger> <GetDetailedPermittedTriggers>b__57_0(TTrigger trigger);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Stateless.StateMachineResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string CannotReconfigureParameters { get; }
    public static string NoTransitionsPermitted { get; }
    public static string NoTransitionsUnmetGuardConditions { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_CannotReconfigureParameters();
    public static string get_NoTransitionsPermitted();
    public static string get_NoTransitionsUnmetGuardConditions();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Stateless.StateRepresentationResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string MultipleTransitionsPermitted { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_MultipleTransitionsPermitted();
}
internal static class Stateless.TaskResult : object {
    internal static Task Done;
    private static TaskResult();
    private static Task`1<T> FromResult(T value);
}
public class Stateless.TriggerDetails`2 : object {
    [CompilerGeneratedAttribute]
private TTrigger <Trigger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private TriggerWithParameters<TState, TTrigger> <Parameters>k__BackingField;
    public TTrigger Trigger { get; }
    public bool HasParameters { get; }
    public TriggerWithParameters<TState, TTrigger> Parameters { get; }
    internal TriggerDetails`2(TTrigger trigger, IDictionary`2<TTrigger, TriggerWithParameters<TState, TTrigger>> triggerConfiguration);
    [CompilerGeneratedAttribute]
public TTrigger get_Trigger();
    [CompilerGeneratedAttribute]
public bool get_HasParameters();
    [CompilerGeneratedAttribute]
public TriggerWithParameters<TState, TTrigger> get_Parameters();
}
