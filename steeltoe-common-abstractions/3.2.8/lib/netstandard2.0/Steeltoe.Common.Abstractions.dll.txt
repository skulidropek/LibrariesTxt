[AttributeUsageAttribute("1")]
public abstract class Steeltoe.Common.Attributes.AssemblyContainsTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ContainedType>k__BackingField;
    public Type ContainedType { get; private set; }
    protected AssemblyContainsTypeAttribute(Type type);
    [CompilerGeneratedAttribute]
public Type get_ContainedType();
    [CompilerGeneratedAttribute]
private void set_ContainedType(Type value);
}
[AttributeUsageAttribute("64")]
public class Steeltoe.Common.Attributes.ServiceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ServiceAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public interface Steeltoe.Common.Availability.IAvailabilityState {
}
public interface Steeltoe.Common.Contexts.IApplicationContext {
    public IConfiguration Configuration { get; }
    public IServiceProvider ServiceProvider { get; }
    public IServiceExpressionResolver ServiceExpressionResolver { get; public set; }
    public abstract virtual IConfiguration get_Configuration();
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual IServiceExpressionResolver get_ServiceExpressionResolver();
    public abstract virtual void set_ServiceExpressionResolver(IServiceExpressionResolver value);
    public abstract virtual object GetService(string name);
    public abstract virtual object GetService(string name, Type serviceType);
    public abstract virtual T GetService(string name);
    public abstract virtual T GetService();
    public abstract virtual object GetService(Type serviceType);
    public abstract virtual IEnumerable`1<T> GetServices();
    public abstract virtual bool ContainsService(string name);
    public abstract virtual bool ContainsService(string name, Type serviceType);
    public abstract virtual bool ContainsService(string name);
    public abstract virtual void Register(string name, object instance);
    public abstract virtual object Deregister(string name);
    public abstract virtual string ResolveEmbeddedValue(string value);
}
public interface Steeltoe.Common.Converter.IConditionalConverter {
    public abstract virtual bool Matches(Type sourceType, Type targetType);
}
public interface Steeltoe.Common.Converter.IConditionalGenericConverter {
}
public interface Steeltoe.Common.Converter.IConversionService {
    public abstract virtual bool CanConvert(Type sourceType, Type targetType);
    public abstract virtual bool CanBypassConvert(Type sourceType, Type targetType);
    public abstract virtual T Convert(object source);
    public abstract virtual object Convert(object source, Type sourceType, Type targetType);
}
public interface Steeltoe.Common.Converter.IConverter`2 {
    public abstract virtual T Convert(S source);
}
public interface Steeltoe.Common.Converter.IConverterRegistry {
    public abstract virtual void AddConverter(IGenericConverter converter);
}
public interface Steeltoe.Common.Converter.IGenericConverter {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ISet`1<ValueTuple`2<Type, Type>> ConvertibleTypes { get; }
    public abstract virtual ISet`1<ValueTuple`2<Type, Type>> get_ConvertibleTypes();
    public abstract virtual object Convert(object source, Type sourceType, Type targetType);
}
public interface Steeltoe.Common.Discovery.IServiceInstance {
    public string ServiceId { get; }
    public string Host { get; }
    public int Port { get; }
    public bool IsSecure { get; }
    public Uri Uri { get; }
    public IDictionary`2<string, string> Metadata { get; }
    public abstract virtual string get_ServiceId();
    public abstract virtual string get_Host();
    public abstract virtual int get_Port();
    public abstract virtual bool get_IsSecure();
    public abstract virtual Uri get_Uri();
    public abstract virtual IDictionary`2<string, string> get_Metadata();
}
public interface Steeltoe.Common.Discovery.IServiceInstanceProvider {
    public string Description { get; }
    public IList`1<string> Services { get; }
    public abstract virtual string get_Description();
    public abstract virtual IList`1<string> get_Services();
    public abstract virtual IList`1<IServiceInstance> GetInstances(string serviceId);
}
public interface Steeltoe.Common.Discovery.IServiceRegistry`1 {
    public abstract virtual void Register(T registration);
    public abstract virtual void Deregister(T registration);
    public abstract virtual void SetStatus(T registration, string status);
    public abstract virtual S GetStatus(T registration);
}
public interface Steeltoe.Common.Expression.Internal.Contexts.IServiceExpressionContext {
    public IApplicationContext ApplicationContext { get; }
    public abstract virtual IApplicationContext get_ApplicationContext();
    public abstract virtual bool ContainsService(string serviceName);
    public abstract virtual bool ContainsService(string serviceName, Type serviceType);
    public abstract virtual object GetService(string serviceName);
    public abstract virtual object GetService(string serviceName, Type serviceType);
}
public interface Steeltoe.Common.Expression.Internal.Contexts.IServiceExpressionResolver {
    public abstract virtual object Evaluate(string value, IServiceExpressionContext evalContext);
}
public interface Steeltoe.Common.Expression.Internal.IConstructorExecutor {
    public abstract virtual ITypedValue Execute(IEvaluationContext context, Object[] arguments);
}
public interface Steeltoe.Common.Expression.Internal.IConstructorResolver {
    public abstract virtual IConstructorExecutor Resolve(IEvaluationContext context, string typeName, List`1<Type> argumentTypes);
}
public interface Steeltoe.Common.Expression.Internal.IEvaluationContext {
    public ITypedValue RootObject { get; }
    public List`1<IPropertyAccessor> PropertyAccessors { get; }
    public List`1<IConstructorResolver> ConstructorResolvers { get; }
    public List`1<IMethodResolver> MethodResolvers { get; }
    public IServiceResolver ServiceResolver { get; }
    public ITypeLocator TypeLocator { get; }
    public ITypeConverter TypeConverter { get; }
    public ITypeComparator TypeComparator { get; }
    public IOperatorOverloader OperatorOverloader { get; }
    public abstract virtual ITypedValue get_RootObject();
    public abstract virtual List`1<IPropertyAccessor> get_PropertyAccessors();
    public abstract virtual List`1<IConstructorResolver> get_ConstructorResolvers();
    public abstract virtual List`1<IMethodResolver> get_MethodResolvers();
    public abstract virtual IServiceResolver get_ServiceResolver();
    public abstract virtual ITypeLocator get_TypeLocator();
    public abstract virtual ITypeConverter get_TypeConverter();
    public abstract virtual ITypeComparator get_TypeComparator();
    public abstract virtual IOperatorOverloader get_OperatorOverloader();
    public abstract virtual void SetVariable(string name, object value);
    public abstract virtual object LookupVariable(string name);
    public abstract virtual T LookupVariable(string name);
}
public interface Steeltoe.Common.Expression.Internal.IExpression {
    public string ExpressionString { get; }
    public abstract virtual string get_ExpressionString();
    public abstract virtual object GetValue();
    public abstract virtual object GetValue(Type desiredResultType);
    public abstract virtual T GetValue();
    public abstract virtual object GetValue(object rootObject);
    public abstract virtual object GetValue(object rootObject, Type desiredResultType);
    public abstract virtual T GetValue(object rootObject);
    public abstract virtual object GetValue(IEvaluationContext context);
    public abstract virtual object GetValue(IEvaluationContext context, object rootObject);
    public abstract virtual object GetValue(IEvaluationContext context, Type desiredResultType);
    public abstract virtual T GetValue(IEvaluationContext context);
    public abstract virtual object GetValue(IEvaluationContext context, object rootObject, Type desiredResultType);
    public abstract virtual T GetValue(IEvaluationContext context, object rootObject);
    public abstract virtual Type GetValueType();
    public abstract virtual Type GetValueType(object rootObject);
    public abstract virtual Type GetValueType(IEvaluationContext context);
    public abstract virtual Type GetValueType(IEvaluationContext context, object rootObject);
    public abstract virtual bool IsWritable(object rootObject);
    public abstract virtual bool IsWritable(IEvaluationContext context);
    public abstract virtual bool IsWritable(IEvaluationContext context, object rootObject);
    public abstract virtual void SetValue(object rootObject, object value);
    public abstract virtual void SetValue(IEvaluationContext context, object value);
    public abstract virtual void SetValue(IEvaluationContext context, object rootObject, object value);
}
public interface Steeltoe.Common.Expression.Internal.IExpressionParser {
    public abstract virtual IExpression ParseExpression(string expressionString);
    public abstract virtual IExpression ParseExpression(string expressionString, IParserContext context);
}
public interface Steeltoe.Common.Expression.Internal.IMethodExecutor {
    public abstract virtual ITypedValue Execute(IEvaluationContext context, object target, Object[] arguments);
}
public interface Steeltoe.Common.Expression.Internal.IMethodFilter {
    public abstract virtual List`1<MethodInfo> Filter(List`1<MethodInfo> methods);
}
public interface Steeltoe.Common.Expression.Internal.IMethodResolver {
    public abstract virtual IMethodExecutor Resolve(IEvaluationContext context, object targetObject, string name, List`1<Type> argumentTypes);
}
public interface Steeltoe.Common.Expression.Internal.IOperatorOverloader {
    public abstract virtual bool OverridesOperation(Operation operation, object leftOperand, object rightOperand);
    public abstract virtual object Operate(Operation operation, object leftOperand, object rightOperand);
}
public interface Steeltoe.Common.Expression.Internal.IParserContext {
    public bool IsTemplate { get; }
    public string ExpressionPrefix { get; }
    public string ExpressionSuffix { get; }
    public abstract virtual bool get_IsTemplate();
    public abstract virtual string get_ExpressionPrefix();
    public abstract virtual string get_ExpressionSuffix();
}
public interface Steeltoe.Common.Expression.Internal.IPropertyAccessor {
    public abstract virtual IList`1<Type> GetSpecificTargetClasses();
    public abstract virtual bool CanRead(IEvaluationContext context, object target, string name);
    public abstract virtual ITypedValue Read(IEvaluationContext context, object target, string name);
    public abstract virtual bool CanWrite(IEvaluationContext context, object target, string name);
    public abstract virtual void Write(IEvaluationContext context, object target, string name, object newValue);
}
public interface Steeltoe.Common.Expression.Internal.IServiceResolver {
    public abstract virtual object Resolve(IEvaluationContext context, string serviceName);
}
public interface Steeltoe.Common.Expression.Internal.ITypeComparator {
    public abstract virtual bool CanCompare(object firstObject, object secondObject);
    public abstract virtual int Compare(object firstObject, object secondObject);
}
public interface Steeltoe.Common.Expression.Internal.ITypeConverter {
    public IConversionService ConversionService { get; public set; }
    public abstract virtual IConversionService get_ConversionService();
    public abstract virtual void set_ConversionService(IConversionService value);
    public abstract virtual bool CanConvert(Type source, Type target);
    public abstract virtual object ConvertValue(object value, Type source, Type target);
}
public interface Steeltoe.Common.Expression.Internal.ITypedValue {
    public object Value { get; }
    public Type TypeDescriptor { get; }
    public abstract virtual object get_Value();
    public abstract virtual Type get_TypeDescriptor();
}
public interface Steeltoe.Common.Expression.Internal.ITypeLocator {
    public abstract virtual Type FindType(string typeName);
}
public enum Steeltoe.Common.Expression.Internal.Operation : Enum {
    public int value__;
    public static Operation ADD;
    public static Operation SUBTRACT;
    public static Operation DIVIDE;
    public static Operation MULTIPLY;
    public static Operation MODULUS;
    public static Operation POWER;
}
public class Steeltoe.Common.HealthChecks.HealthCheckResult : object {
    [CompilerGeneratedAttribute]
private HealthStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Details>k__BackingField;
    public HealthStatus Status { get; public set; }
    public string Description { get; public set; }
    public Dictionary`2<string, object> Details { get; public set; }
    [CompilerGeneratedAttribute]
public HealthStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(HealthStatus value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(Dictionary`2<string, object> value);
}
public enum Steeltoe.Common.HealthChecks.HealthStatus : Enum {
    public int value__;
    public static HealthStatus UNKNOWN;
    public static HealthStatus UP;
    public static HealthStatus WARNING;
    public static HealthStatus OUT_OF_SERVICE;
    public static HealthStatus DOWN;
}
public interface Steeltoe.Common.HealthChecks.IHealthAggregator {
    public abstract virtual HealthCheckResult Aggregate(IList`1<IHealthContributor> contributors);
}
public interface Steeltoe.Common.HealthChecks.IHealthContributor {
    public string Id { get; }
    public abstract virtual string get_Id();
    public abstract virtual HealthCheckResult Health();
}
public interface Steeltoe.Common.IApplicationInstanceInfo {
    public string InstanceId { get; }
    public string ApplicationId { get; }
    public string ApplicationName { get; }
    public IEnumerable`1<string> Uris { get; }
    public int InstanceIndex { get; }
    public int Port { get; }
    public string Version { get; }
    public int DiskLimit { get; }
    public int MemoryLimit { get; }
    public int FileDescriptorLimit { get; }
    public string InternalIP { get; }
    public string InstanceIP { get; }
    public abstract virtual string get_InstanceId();
    public abstract virtual string get_ApplicationId();
    public abstract virtual string get_ApplicationName();
    public abstract virtual IEnumerable`1<string> get_Uris();
    public abstract virtual int get_InstanceIndex();
    public abstract virtual int get_Port();
    public abstract virtual string get_Version();
    public abstract virtual int get_DiskLimit();
    public abstract virtual int get_MemoryLimit();
    public abstract virtual int get_FileDescriptorLimit();
    public abstract virtual string get_InternalIP();
    public abstract virtual string get_InstanceIP();
    public abstract virtual string ApplicationNameInContext(SteeltoeComponent steeltoeComponent, string additionalSearchPath);
}
public interface Steeltoe.Common.IApplicationTask {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual void Run();
}
public interface Steeltoe.Common.ICertificateSource {
    public Type OptionsConfigurer { get; }
    public abstract virtual Type get_OptionsConfigurer();
}
public interface Steeltoe.Common.IHttpClientHandlerProvider {
    public abstract virtual HttpClientHandler GetHttpClientHandler();
}
public interface Steeltoe.Common.Lifecycle.ILifecycle {
    public bool IsRunning { get; }
    public abstract virtual Task Start();
    public abstract virtual Task Stop();
    public abstract virtual bool get_IsRunning();
}
public interface Steeltoe.Common.Lifecycle.ILifecycleProcessor {
    public bool IsRunning { get; }
    public abstract virtual Task Start();
    public abstract virtual Task Stop();
    public abstract virtual bool get_IsRunning();
    public abstract virtual Task OnRefresh();
    public abstract virtual Task OnClose();
}
public interface Steeltoe.Common.Lifecycle.IPhased {
    public int Phase { get; }
    public abstract virtual int get_Phase();
}
public interface Steeltoe.Common.Lifecycle.ISmartLifecycle {
    public bool IsAutoStartup { get; }
    public abstract virtual bool get_IsAutoStartup();
    public abstract virtual Task Stop(Action callback);
}
public interface Steeltoe.Common.LoadBalancer.ILoadBalancer {
    public abstract virtual Task`1<Uri> ResolveServiceInstanceAsync(Uri request);
    public abstract virtual Task UpdateStatsAsync(Uri originalUri, Uri resolvedUri, TimeSpan responseTime, Exception exception);
}
public abstract class Steeltoe.Common.Options.AbstractOptions : object {
    protected AbstractOptions(IConfiguration root, string sectionPrefix);
}
public class Steeltoe.Common.Options.CertificateOptions : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<X509Certificate2> <IssuerChain>k__BackingField;
    public string Name { get; public set; }
    public X509Certificate2 Certificate { get; public set; }
    public List`1<X509Certificate2> IssuerChain { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
public void set_Certificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public List`1<X509Certificate2> get_IssuerChain();
    [CompilerGeneratedAttribute]
public void set_IssuerChain(List`1<X509Certificate2> value);
}
public interface Steeltoe.Common.Order.IOrdered {
    public int Order { get; }
    public abstract virtual int get_Order();
}
public interface Steeltoe.Common.Order.IPriorityOrdered {
}
public interface Steeltoe.Common.Retry.IRecoveryCallback {
    public abstract virtual object Recover(IRetryContext context);
}
public interface Steeltoe.Common.Retry.IRecoveryCallback`1 {
    public abstract virtual T Recover(IRetryContext context);
}
public interface Steeltoe.Common.Retry.IRetryContext {
    public Exception LastException { get; }
    public int RetryCount { get; }
    public IRetryContext Parent { get; }
    public abstract virtual Exception get_LastException();
    public abstract virtual int get_RetryCount();
    public abstract virtual IRetryContext get_Parent();
}
public interface Steeltoe.Common.Retry.IRetryListener {
    public abstract virtual bool Open(IRetryContext context);
    public abstract virtual void Close(IRetryContext context, Exception exception);
    public abstract virtual void OnError(IRetryContext context, Exception exception);
}
public interface Steeltoe.Common.Retry.IRetryOperation {
    public abstract virtual T Execute(Func`2<IRetryContext, T> retryCallback);
    public abstract virtual T Execute(Func`2<IRetryContext, T> retryCallback, IRecoveryCallback`1<T> recoveryCallback);
    public abstract virtual T Execute(Func`2<IRetryContext, T> retryCallback, Func`2<IRetryContext, T> recoveryCallback);
    public abstract virtual void Execute(Action`1<IRetryContext> retryCallback);
    public abstract virtual void Execute(Action`1<IRetryContext> retryCallback, IRecoveryCallback recoveryCallback);
    public abstract virtual void Execute(Action`1<IRetryContext> retryCallback, Action`1<IRetryContext> recoveryCallback);
}
public interface Steeltoe.Common.Services.IServiceNameAware {
    public string ServiceName { get; public set; }
    public abstract virtual string get_ServiceName();
    public abstract virtual void set_ServiceName(string value);
}
public enum Steeltoe.Common.SteeltoeComponent : Enum {
    public int value__;
    public static SteeltoeComponent Discovery;
    public static SteeltoeComponent CircuitBreaker;
    public static SteeltoeComponent Configuration;
    public static SteeltoeComponent Connectors;
    public static SteeltoeComponent Kubernetes;
    public static SteeltoeComponent Management;
    public static SteeltoeComponent Security;
}
public interface Steeltoe.Common.Transaction.IPlatformTransactionManager {
    public abstract virtual ITransactionStatus GetTransaction(ITransactionDefinition definition);
    public abstract virtual void Commit(ITransactionStatus status);
    public abstract virtual void Rollback(ITransactionStatus status);
}
public interface Steeltoe.Common.Transaction.IResourceHolder {
    public bool IsVoid { get; }
    public abstract virtual void Reset();
    public abstract virtual void Unbound();
    public abstract virtual bool get_IsVoid();
}
public interface Steeltoe.Common.Transaction.IResourceTransactionManager {
    public object ResourceFactory { get; }
    public abstract virtual object get_ResourceFactory();
}
public interface Steeltoe.Common.Transaction.ISavepointManager {
    public abstract virtual object CreateSavepoint();
    public abstract virtual void RollbackToSavepoint(object savepoint);
    public abstract virtual void ReleaseSavepoint(object savepoint);
}
public interface Steeltoe.Common.Transaction.ISmartTransactionObject {
    public bool IsRollbackOnly { get; }
    public abstract virtual bool get_IsRollbackOnly();
    public abstract virtual void Flush();
}
public interface Steeltoe.Common.Transaction.ITransactionAttribute {
    public string Qualifier { get; }
    public abstract virtual string get_Qualifier();
    public abstract virtual bool RollbackOn(Exception exception);
}
public interface Steeltoe.Common.Transaction.ITransactionCallback`1 {
    public abstract virtual T DoInTransaction(ITransactionStatus status);
}
public interface Steeltoe.Common.Transaction.ITransactionDefinition {
    public int PropagationBehavior { get; }
    public int IsolationLevel { get; }
    public int Timeout { get; }
    public bool IsReadOnly { get; }
    public string Name { get; }
    public abstract virtual int get_PropagationBehavior();
    public abstract virtual int get_IsolationLevel();
    public abstract virtual int get_Timeout();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual string get_Name();
}
public interface Steeltoe.Common.Transaction.ITransactionExecution {
    public bool IsCompleted { get; }
    public bool IsRollbackOnly { get; }
    public bool IsNewTransaction { get; }
    public abstract virtual void SetRollbackOnly();
    public abstract virtual bool get_IsCompleted();
    public abstract virtual bool get_IsRollbackOnly();
    public abstract virtual bool get_IsNewTransaction();
}
public interface Steeltoe.Common.Transaction.ITransactionOperations {
    public abstract virtual T Execute(Func`2<ITransactionStatus, T> action);
    public abstract virtual void ExecuteWithoutResult(Action`1<ITransactionStatus> action);
}
public interface Steeltoe.Common.Transaction.ITransactionStatus {
    public bool HasSavepoint { get; }
    public abstract virtual bool get_HasSavepoint();
    public abstract virtual void Flush();
}
public interface Steeltoe.Common.Transaction.ITransactionSynchronization {
    public abstract virtual void Suspend();
    public abstract virtual void Resume();
    public abstract virtual void Flush();
    public abstract virtual void BeforeCommit(bool readOnly);
    public abstract virtual void BeforeCompletion();
    public abstract virtual void AfterCommit();
    public abstract virtual void AfterCompletion(int status);
}
public class Steeltoe.Common.Util.ActualTime : object {
    public long CurrentTimeInMillis { get; }
    public sealed virtual long get_CurrentTimeInMillis();
}
public class Steeltoe.Common.Util.AtomicBoolean : object {
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _value;
    public bool Value { get; public set; }
    public AtomicBoolean(bool value);
    public bool get_Value();
    public void set_Value(bool value);
    public bool CompareAndSet(bool expected, bool update);
    public bool GetAndSet(bool newValue);
}
public class Steeltoe.Common.Util.AtomicInteger : object {
    protected Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _value;
    public int Value { get; public set; }
    public AtomicInteger(int value);
    public int get_Value();
    public void set_Value(int value);
    public bool CompareAndSet(int expected, int update);
    public int IncrementAndGet();
    public int DecrementAndGet();
    public int GetAndIncrement();
    public int AddAndGet(int value);
}
public class Steeltoe.Common.Util.AtomicIntegerArray : AtomicReferenceArray`1<int> {
    public AtomicIntegerArray(int length);
}
public class Steeltoe.Common.Util.AtomicLong : object {
    private long _value;
    public long Value { get; public set; }
    public AtomicLong(long value);
    public long get_Value();
    public void set_Value(long value);
    public bool CompareAndSet(long expected, long update);
    public long GetAndSet(long value);
    public long AddAndGet(long value);
}
public class Steeltoe.Common.Util.AtomicReference`1 : object {
    private T modreq(System.Runtime.CompilerServices.IsVolatile) _value;
    public T Value { get; public set; }
    public AtomicReference`1(T value);
    public T get_Value();
    public void set_Value(T value);
    public bool CompareAndSet(T expected, T update);
    public T GetAndSet(T value);
}
[DefaultMemberAttribute("Item")]
public class Steeltoe.Common.Util.AtomicReferenceArray`1 : object {
    private T[] _array;
    public T Item { get; public set; }
    public int Length { get; }
    public AtomicReferenceArray`1(int length);
    public T get_Item(int index);
    public void set_Item(int index, T value);
    public T[] ToArray();
    public int get_Length();
}
public interface Steeltoe.Common.Util.IAsyncRunnable {
    public abstract virtual Task`1<bool> Run();
}
public interface Steeltoe.Common.Util.IAttributeAccessor {
    public String[] AttributeNames { get; }
    public abstract virtual void SetAttribute(string name, object value);
    public abstract virtual object GetAttribute(string name);
    public abstract virtual object RemoveAttribute(string name);
    public abstract virtual bool HasAttribute(string name);
    public abstract virtual String[] get_AttributeNames();
}
public interface Steeltoe.Common.Util.IBackOff {
    public abstract virtual IBackOffExecution Start();
}
public interface Steeltoe.Common.Util.IBackOffExecution {
    public abstract virtual int NextBackOff();
}
public interface Steeltoe.Common.Util.IClassifier`2 {
    public abstract virtual T Classify(C classifiable);
}
public interface Steeltoe.Common.Util.IErrorHandler {
    public abstract virtual bool HandleError(Exception exception);
}
public interface Steeltoe.Common.Util.IIDGenerator {
    public abstract virtual string GenerateId();
}
public interface Steeltoe.Common.Util.IPathMatcher {
    public abstract virtual bool IsPattern(string path);
    public abstract virtual bool Match(string pattern, string path);
    public abstract virtual bool MatchStart(string pattern, string path);
    public abstract virtual string ExtractPathWithinPattern(string pattern, string path);
    public abstract virtual IDictionary`2<string, string> ExtractUriTemplateVariables(string pattern, string path);
    public abstract virtual IComparer`1<string> GetPatternComparer(string path);
    public abstract virtual string Combine(string pattern1, string pattern2);
}
public interface Steeltoe.Common.Util.IRoute {
    public string Value { get; }
    public abstract virtual string get_Value();
}
public interface Steeltoe.Common.Util.IRouteMatcher {
    public abstract virtual IRoute ParseRoute(string routeValue);
    public abstract virtual bool IsPattern(string route);
    public abstract virtual string Combine(string pattern1, string pattern2);
    public abstract virtual bool Match(string pattern, IRoute route);
    public abstract virtual IDictionary`2<string, string> MatchAndExtract(string pattern, IRoute route);
    public abstract virtual IComparer`1<string> GetPatternComparer(IRoute route);
}
public interface Steeltoe.Common.Util.IRunnable {
    public abstract virtual bool Run();
}
public interface Steeltoe.Common.Util.IStringValueResolver {
    public abstract virtual string ResolveStringValue(string strVal);
}
public interface Steeltoe.Common.Util.ITime {
    public long CurrentTimeInMillis { get; }
    public abstract virtual long get_CurrentTimeInMillis();
}
public interface Steeltoe.Common.Util.ITimerListener {
    public int IntervalTimeInMilliseconds { get; }
    public abstract virtual void Tick();
    public abstract virtual int get_IntervalTimeInMilliseconds();
}
public static class Steeltoe.Common.Util.Time : object {
    private static int SPIN_WAIT_ITERATIONS;
    private static long YIELD_THRESHOLD;
    private static long SLEEP_THRESHOLD;
    public static long CurrentTimeMillis { get; }
    public static long CurrentTimeMillisJava { get; }
    public static long get_CurrentTimeMillis();
    public static long get_CurrentTimeMillisJava();
    public static bool WaitUntil(Func`1<bool> check, int maxWaitMilli);
    public static void Wait(int maxWaitMilli);
    private static void DoWait(long ticksLeft);
}
public class Steeltoe.Common.Util.TimerReference : object {
    internal ITimerListener _listener;
    internal CancellationTokenSource _tokenSource;
    internal TimeSpan _period;
    internal Task _timerTask;
    public TimerReference(ITimerListener listener, TimeSpan period);
    public void Start();
    public void Run(CancellationTokenSource tokenSource);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0();
}
