[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.LoadBalancerHttpClientBuilderExtensions : object {
    [ExtensionAttribute]
public static IHttpClientBuilder AddRandomLoadBalancer(IHttpClientBuilder httpClientBuilder);
    [ExtensionAttribute]
public static IHttpClientBuilder AddRoundRobinLoadBalancer(IHttpClientBuilder httpClientBuilder);
    [ExtensionAttribute]
public static IHttpClientBuilder AddLoadBalancer(IHttpClientBuilder httpClientBuilder);
}
public class Steeltoe.Common.Discovery.DiscoveryHttpClientHandler : HttpClientHandler {
    private ILogger _logger;
    private DiscoveryHttpClientHandlerBase _discoveryBase;
    public DiscoveryHttpClientHandler(IDiscoveryClient discoveryClient, ILogger logger, ILoadBalancer loadBalancer);
    [AsyncStateMachineAttribute("Steeltoe.Common.Discovery.DiscoveryHttpClientHandler/<SendAsync>d__3")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Steeltoe.Common.Discovery.DiscoveryHttpClientHandlerBase : object {
    protected IDiscoveryClient _client;
    protected ILoadBalancer _loadBalancer;
    protected ILogger _logger;
    public DiscoveryHttpClientHandlerBase(IDiscoveryClient client, ILogger logger, ILoadBalancer loadBalancer);
    public virtual Uri LookupService(Uri current);
    [AsyncStateMachineAttribute("Steeltoe.Common.Discovery.DiscoveryHttpClientHandlerBase/<LookupServiceAsync>d__5")]
public virtual Task`1<Uri> LookupServiceAsync(Uri current);
}
public class Steeltoe.Common.Http.ClientCertificateHttpHandler : HttpClientHandler {
    private SemaphoreSlim _lock;
    private IOptionsMonitor`1<CertificateOptions> _certificateOptions;
    private CertificateOptions _lastValue;
    public ClientCertificateHttpHandler(IOptionsMonitor`1<CertificateOptions> certOptions);
    [AsyncStateMachineAttribute("Steeltoe.Common.Http.ClientCertificateHttpHandler/<SendAsync>d__4")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private void RotateCert(CertificateOptions newCert);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[ObsoleteAttribute("Use ClientCertificateHttpHandler directly instead")]
public class Steeltoe.Common.Http.ClientCertificateHttpHandlerProvider : object {
    private ClientCertificateHttpHandler _handler;
    public ClientCertificateHttpHandlerProvider(IOptionsMonitor`1<CertificateOptions> certOptions);
    public sealed virtual HttpClientHandler GetHttpClientHandler();
}
[ExtensionAttribute]
public static class Steeltoe.Common.Http.Discovery.DiscoveryHttpClientBuilderExtensions : object {
    [ExtensionAttribute]
public static IHttpClientBuilder AddServiceDiscovery(IHttpClientBuilder builder);
}
public class Steeltoe.Common.Http.Discovery.DiscoveryHttpMessageHandler : DelegatingHandler {
    private ILogger _logger;
    private DiscoveryHttpClientHandlerBase _discoveryBase;
    public DiscoveryHttpMessageHandler(IDiscoveryClient discoveryClient, ILogger`1<DiscoveryHttpClientHandler> logger, ILoadBalancer loadBalancer);
    [AsyncStateMachineAttribute("Steeltoe.Common.Http.Discovery.DiscoveryHttpMessageHandler/<SendAsync>d__3")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public static class Steeltoe.Common.Http.HttpClientHelper : object {
    [CompilerGeneratedAttribute]
private static string <SteeltoeUserAgent>k__BackingField;
    private static int DEFAULT_GETACCESSTOKEN_TIMEOUT;
    private static bool DEFAULT_VALIDATE_CERTIFICATES;
    private static Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> _reflectedDelegate;
    [CompilerGeneratedAttribute]
private static Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> <DefaultDelegate>k__BackingField;
    public static string SteeltoeUserAgent { get; }
    private static Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> DefaultDelegate { get; }
    private static HttpClientHelper();
    [CompilerGeneratedAttribute]
public static string get_SteeltoeUserAgent();
    [CompilerGeneratedAttribute]
private static Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> get_DefaultDelegate();
    public static HttpClient GetHttpClient(bool validateCertificates, int timeoutMillis);
    public static HttpClient GetHttpClient(bool validateCertificates, HttpClientHandler handler, int timeoutMillis);
    public static HttpClient GetHttpClient(HttpMessageHandler handler, int timeoutMillis);
    public static void ConfigureCertificateValidation(bool validateCertificates, SecurityProtocolType& protocolType, RemoteCertificateValidationCallback& prevValidator);
    public static void RestoreCertificateValidation(bool validateCertificates, SecurityProtocolType protocolType, RemoteCertificateValidationCallback prevValidator);
    public static string GetEncodedUserPassword(string user, string password);
    public static HttpRequestMessage GetRequestMessage(HttpMethod method, string requestUri, Func`1<string> getAccessToken);
    public static HttpRequestMessage GetRequestMessage(HttpMethod method, string requestUri, string userName, string password);
    public static Task`1<string> GetAccessToken(string accessTokenUri, string clientId, string clientSecret, int timeout, bool validateCertificates, HttpClient httpClient, ILogger logger);
    public static Task`1<string> GetAccessToken(Uri accessTokenUri, string clientId, string clientSecret, int timeout, bool validateCertificates, Dictionary`2<string, string> additionalParams, HttpClient httpClient, ILogger logger);
    [AsyncStateMachineAttribute("Steeltoe.Common.Http.HttpClientHelper/<GetAccessTokenInternal>d__19")]
private static Task`1<string> GetAccessTokenInternal(Uri accessTokenUri, string clientId, string clientSecret, int timeout, bool validateCertificates, HttpClient httpClient, Dictionary`2<string, string> additionalParams, ILogger logger);
    internal static Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> GetDisableDelegate();
}
public class Steeltoe.Common.Http.LoadBalancer.LoadBalancerDelegatingHandler : DelegatingHandler {
    private ILoadBalancer _loadBalancer;
    public LoadBalancerDelegatingHandler(ILoadBalancer loadBalancer);
    [ObsoleteAttribute("Please remove ILogger parameter")]
public LoadBalancerDelegatingHandler(ILoadBalancer loadBalancer, ILogger logger);
    [AsyncStateMachineAttribute("Steeltoe.Common.Http.LoadBalancer.LoadBalancerDelegatingHandler/<SendAsync>d__3")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Steeltoe.Common.Http.LoadBalancer.LoadBalancerHttpClientHandler : HttpClientHandler {
    private ILoadBalancer _loadBalancer;
    public LoadBalancerHttpClientHandler(ILoadBalancer loadBalancer);
    [ObsoleteAttribute("Please remove ILogger parameter")]
public LoadBalancerHttpClientHandler(ILoadBalancer loadBalancer, ILogger logger);
    [AsyncStateMachineAttribute("Steeltoe.Common.Http.LoadBalancer.LoadBalancerHttpClientHandler/<SendAsync>d__3")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Steeltoe.Common.Http.Serialization.BoolStringJsonConverter : JsonConverter`1<bool> {
    public virtual bool Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, bool value, JsonSerializerOptions options);
}
public class Steeltoe.Common.Http.Serialization.LongStringJsonConverter : JsonConverter`1<long> {
    public virtual long Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, long value, JsonSerializerOptions options);
}
