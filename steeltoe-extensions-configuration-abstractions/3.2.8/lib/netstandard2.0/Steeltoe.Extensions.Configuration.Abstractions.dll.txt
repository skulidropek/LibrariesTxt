public abstract class Steeltoe.Extensions.Configuration.AbstractServiceOptions : AbstractOptions {
    [CompilerGeneratedAttribute]
private string <CONFIGURATION_PREFIX>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Plan>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IEnumerable`1<Service>> <Services>k__BackingField;
    public string CONFIGURATION_PREFIX { get; protected set; }
    public string Name { get; public set; }
    public string Label { get; public set; }
    public IEnumerable`1<string> Tags { get; public set; }
    public string Plan { get; public set; }
    public Dictionary`2<string, IEnumerable`1<Service>> Services { get; public set; }
    protected AbstractServiceOptions(IConfigurationRoot root, string sectionPrefix);
    protected AbstractServiceOptions(IConfiguration config, string sectionPrefix);
    [CompilerGeneratedAttribute]
public virtual string get_CONFIGURATION_PREFIX();
    [CompilerGeneratedAttribute]
protected virtual void set_CONFIGURATION_PREFIX(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Plan();
    [CompilerGeneratedAttribute]
public void set_Plan(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IEnumerable`1<Service>> get_Services();
    [CompilerGeneratedAttribute]
public void set_Services(Dictionary`2<string, IEnumerable`1<Service>> value);
    public sealed virtual IEnumerable`1<Service> GetServicesList();
    public sealed virtual IEnumerable`1<Service> GetInstancesOfType(string serviceType);
    public void Bind(IConfiguration configuration, string serviceName);
    internal IConfigurationSection FindServiceSection(IConfigurationSection section, string serviceName);
}
[ExtensionAttribute]
internal static class Steeltoe.Extensions.Configuration.ConfigurationDictionaryExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<string> Filter(IDictionary`2<string, string> configData, string keyPrefix, string keySuffix, string keyValue);
    [ExtensionAttribute]
public static IEnumerable`1<string> Filter(IDictionary`2<string, string> configData, string keyPrefix);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<string> keys, Action`1<string> mapping);
}
internal abstract class Steeltoe.Extensions.Configuration.ConfigurationDictionaryMapper : object {
    [CompilerGeneratedAttribute]
private string <BindingKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ConfigData>k__BackingField;
    public string BindingKey { get; }
    public string ToPrefix { get; }
    public IDictionary`2<string, string> ConfigData { get; }
    protected ConfigurationDictionaryMapper(IDictionary`2<string, string> configData, string bindingKey, String[] toPrefix);
    [CompilerGeneratedAttribute]
public string get_BindingKey();
    [CompilerGeneratedAttribute]
public string get_ToPrefix();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ConfigData();
    public void MapFromTo(string existingKey, string newKey);
    public void MapFromTo(string existingKey, String[] newKeyPath);
    public void AddKeyValue(string newKey, string value);
    public string Get(string key);
    public string Get(string key, string defaultValue);
}
[TypeConverterAttribute("Steeltoe.Extensions.Configuration.CredentialConverter")]
public class Steeltoe.Extensions.Configuration.Credential : Dictionary`2<string, Credential> {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public Credential(string value);
    protected Credential(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_Value();
}
public class Steeltoe.Extensions.Configuration.CredentialConverter : TypeConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
}
internal interface Steeltoe.Extensions.Configuration.IConfigurationPostProcessor {
    public abstract virtual void PostProcessConfiguration(PostProcessorConfigurationProvider provider, IDictionary`2<string, string> configData);
}
public interface Steeltoe.Extensions.Configuration.IPlaceholderResolverProvider {
    public IList`1<IConfigurationProvider> Providers { get; }
    public IList`1<string> ResolvedKeys { get; }
    public abstract virtual IList`1<IConfigurationProvider> get_Providers();
    public abstract virtual IList`1<string> get_ResolvedKeys();
}
[ExtensionAttribute]
public static class Steeltoe.Extensions.Configuration.IServiceCollectionExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("This method builds a temporary service provider and should not be used")]
public static IServicesInfo GetServicesInfo(IServiceCollection serviceCollection);
}
public interface Steeltoe.Extensions.Configuration.IServicesInfo {
    public abstract virtual IEnumerable`1<Service> GetServicesList();
    public abstract virtual IEnumerable`1<Service> GetInstancesOfType(string serviceType);
}
internal abstract class Steeltoe.Extensions.Configuration.PostProcessorConfigurationProvider : ConfigurationProvider {
    [CompilerGeneratedAttribute]
private PostProcessorConfigurationSource <Source>k__BackingField;
    public PostProcessorConfigurationSource Source { get; }
    protected PostProcessorConfigurationProvider(PostProcessorConfigurationSource source);
    [CompilerGeneratedAttribute]
public PostProcessorConfigurationSource get_Source();
    protected virtual void PostProcessConfiguration();
}
internal abstract class Steeltoe.Extensions.Configuration.PostProcessorConfigurationSource : object {
    [CompilerGeneratedAttribute]
private IList`1<IConfigurationPostProcessor> <RegisteredProcessors>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationRoot <ParentConfiguration>k__BackingField;
    public IList`1<IConfigurationPostProcessor> RegisteredProcessors { get; }
    public IConfigurationRoot ParentConfiguration { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<IConfigurationPostProcessor> get_RegisteredProcessors();
    [CompilerGeneratedAttribute]
public IConfigurationRoot get_ParentConfiguration();
    [CompilerGeneratedAttribute]
public void set_ParentConfiguration(IConfigurationRoot value);
    public void RegisterPostProcessor(IConfigurationPostProcessor processor);
}
public class Steeltoe.Extensions.Configuration.Service : AbstractServiceOptions {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Credential> <Credentials>k__BackingField;
    public Dictionary`2<string, Credential> Credentials { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Credential> get_Credentials();
    [CompilerGeneratedAttribute]
public void set_Credentials(Dictionary`2<string, Credential> value);
}
public class Steeltoe.Extensions.Configuration.ServicesOptions : AbstractServiceOptions {
    public ServicesOptions(IConfigurationRoot root, string configPrefix);
    public ServicesOptions(IConfiguration config, string configPrefix);
}
