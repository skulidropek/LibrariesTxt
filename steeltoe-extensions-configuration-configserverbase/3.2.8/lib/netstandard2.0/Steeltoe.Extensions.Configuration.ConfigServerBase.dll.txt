public class Steeltoe.Extensions.Configuration.ConfigServer.ConfigEnvironment : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Profiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PropertySource> <PropertySources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    public string Name { get; public set; }
    public string Label { get; public set; }
    public IList`1<string> Profiles { get; public set; }
    public IList`1<PropertySource> PropertySources { get; public set; }
    public string Version { get; public set; }
    public string State { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Profiles();
    [CompilerGeneratedAttribute]
public void set_Profiles(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<PropertySource> get_PropertySources();
    [CompilerGeneratedAttribute]
public void set_PropertySources(IList`1<PropertySource> value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
public void set_State(string value);
}
public class Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerClientSettings : object {
    public static string DEFAULT_URI;
    public static string DEFAULT_ENVIRONMENT;
    public static bool DEFAULT_FAILFAST;
    public static bool DEFAULT_PROVIDER_ENABLED;
    public static bool DEFAULT_CERTIFICATE_VALIDATION;
    public static int DEFAULT_MAX_RETRY_ATTEMPTS;
    public static int DEFAULT_INITIAL_RETRY_INTERVAL;
    public static double DEFAULT_RETRY_MULTIPLIER;
    public static int DEFAULT_MAX_RETRY_INTERVAL;
    public static bool DEFAULT_RETRY_ENABLED;
    public static int DEFAULT_TIMEOUT_MILLISECONDS;
    public static int DEFAULT_VAULT_TOKEN_TTL;
    public static int DEFAULT_VAULT_TOKEN_RENEW_RATE;
    public static bool DEFAULT_DISABLE_TOKEN_RENEWAL;
    public static string DEFAULT_ACCESS_TOKEN_URI;
    public static string DEFAULT_CLIENT_ID;
    public static string DEFAULT_CLIENT_SECRET;
    public static bool DEFAULT_DISCOVERY_ENABLED;
    public static string DEFAULT_CONFIGSERVER_SERVICEID;
    public static bool DEFAULT_HEALTH_ENABLED;
    public static long DEFAULT_HEALTH_TIMETOLIVE;
    private static Char[] COLON_DELIMIT;
    private static Char[] COMMA_DELIMIT;
    private string _username;
    private string _password;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <PollingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailFast>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateCertificates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RetryEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RetryInitialInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RetryMaxInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RetryMultiplier>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RetryAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DiscoveryEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DiscoveryServiceId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HealthEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HealthTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessTokenUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TokenTtl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TokenRenewRate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableTokenRenewal>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    public string Uri { get; public set; }
    public bool Enabled { get; public set; }
    public string Environment { get; public set; }
    public string Name { get; public set; }
    public string Label { get; public set; }
    public TimeSpan PollingInterval { get; public set; }
    public string Username { get; public set; }
    public string Password { get; public set; }
    public bool FailFast { get; public set; }
    public bool ValidateCertificates { get; public set; }
    public bool RetryEnabled { get; public set; }
    public int RetryInitialInterval { get; public set; }
    public int RetryMaxInterval { get; public set; }
    public double RetryMultiplier { get; public set; }
    public int RetryAttempts { get; public set; }
    public bool DiscoveryEnabled { get; public set; }
    public string DiscoveryServiceId { get; public set; }
    public bool HealthEnabled { get; public set; }
    public long HealthTimeToLive { get; public set; }
    [ObsoleteAttribute("Will be removed, use RawUris instead")]
public string RawUri { get; }
    public String[] RawUris { get; }
    public string Token { get; public set; }
    public int Timeout { get; public set; }
    public string AccessTokenUri { get; public set; }
    public string ClientId { get; public set; }
    public string ClientSecret { get; public set; }
    public X509Certificate2 ClientCertificate { get; public set; }
    public int TokenTtl { get; public set; }
    public int TokenRenewRate { get; public set; }
    public bool DisableTokenRenewal { get; public set; }
    public Dictionary`2<string, string> Headers { get; public set; }
    private static ConfigServerClientSettings();
    [CompilerGeneratedAttribute]
public virtual string get_Uri();
    [CompilerGeneratedAttribute]
public virtual void set_Uri(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_Environment();
    [CompilerGeneratedAttribute]
public virtual void set_Environment(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Label();
    [CompilerGeneratedAttribute]
public virtual void set_Label(string value);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_PollingInterval();
    [CompilerGeneratedAttribute]
public virtual void set_PollingInterval(TimeSpan value);
    public virtual string get_Username();
    public virtual void set_Username(string value);
    public virtual string get_Password();
    public virtual void set_Password(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_FailFast();
    [CompilerGeneratedAttribute]
public virtual void set_FailFast(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_ValidateCertificates();
    [CompilerGeneratedAttribute]
public virtual void set_ValidateCertificates(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_RetryEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_RetryEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_RetryInitialInterval();
    [CompilerGeneratedAttribute]
public virtual void set_RetryInitialInterval(int value);
    [CompilerGeneratedAttribute]
public virtual int get_RetryMaxInterval();
    [CompilerGeneratedAttribute]
public virtual void set_RetryMaxInterval(int value);
    [CompilerGeneratedAttribute]
public virtual double get_RetryMultiplier();
    [CompilerGeneratedAttribute]
public virtual void set_RetryMultiplier(double value);
    [CompilerGeneratedAttribute]
public virtual int get_RetryAttempts();
    [CompilerGeneratedAttribute]
public virtual void set_RetryAttempts(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_DiscoveryEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_DiscoveryEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_DiscoveryServiceId();
    [CompilerGeneratedAttribute]
public virtual void set_DiscoveryServiceId(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_HealthEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_HealthEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual long get_HealthTimeToLive();
    [CompilerGeneratedAttribute]
public virtual void set_HealthTimeToLive(long value);
    public virtual string get_RawUri();
    public virtual String[] get_RawUris();
    [CompilerGeneratedAttribute]
public virtual string get_Token();
    [CompilerGeneratedAttribute]
public virtual void set_Token(string value);
    [CompilerGeneratedAttribute]
public virtual int get_Timeout();
    [CompilerGeneratedAttribute]
public virtual void set_Timeout(int value);
    [CompilerGeneratedAttribute]
public virtual string get_AccessTokenUri();
    [CompilerGeneratedAttribute]
public virtual void set_AccessTokenUri(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ClientId();
    [CompilerGeneratedAttribute]
public virtual void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ClientSecret();
    [CompilerGeneratedAttribute]
public virtual void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
public virtual X509Certificate2 get_ClientCertificate();
    [CompilerGeneratedAttribute]
public virtual void set_ClientCertificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public virtual int get_TokenTtl();
    [CompilerGeneratedAttribute]
public virtual void set_TokenTtl(int value);
    [CompilerGeneratedAttribute]
public virtual int get_TokenRenewRate();
    [CompilerGeneratedAttribute]
public virtual void set_TokenRenewRate(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_DisableTokenRenewal();
    [CompilerGeneratedAttribute]
public virtual void set_DisableTokenRenewal(bool value);
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public virtual void set_Headers(Dictionary`2<string, string> value);
    internal static bool IsMultiServerConfig(string uris);
    [ObsoleteAttribute("Will be removed, use GetRawUris() instead")]
internal string GetRawUri();
    internal string GetRawUri(string uri);
    internal String[] GetRawUris();
    internal String[] GetUris();
    internal string GetPassword();
    internal string GetPassword(string uri);
    internal string GetUserName();
    internal string GetUserName(string uri);
    private static string GetUserInfo(string uri);
    private static string GetUserPassElement(string uri, int index);
}
public class Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerClientSettingsOptions : AbstractOptions {
    public static string CONFIGURATION_PREFIX;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailFast>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Env>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Validate_Certificates>k__BackingField;
    [CompilerGeneratedAttribute]
private SpringCloudConfigRetry <Retry>k__BackingField;
    [CompilerGeneratedAttribute]
private SpringCloudConfigDiscovery <Discovery>k__BackingField;
    [CompilerGeneratedAttribute]
private SpringCloudConfigHealth <Health>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Access_Token_Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Client_Secret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Client_Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TokenTtl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TokenRenewRate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableTokenRenewal>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    public bool Enabled { get; public set; }
    public bool FailFast { get; public set; }
    public string Env { get; public set; }
    public string Label { get; public set; }
    public string Name { get; public set; }
    public string Password { get; public set; }
    public string Uri { get; public set; }
    public string Username { get; public set; }
    public string Token { get; public set; }
    public int Timeout { get; public set; }
    public bool Validate_Certificates { get; public set; }
    public SpringCloudConfigRetry Retry { get; public set; }
    public SpringCloudConfigDiscovery Discovery { get; public set; }
    public SpringCloudConfigHealth Health { get; public set; }
    public bool ValidateCertificates { get; }
    public string Environment { get; }
    public bool RetryEnabled { get; }
    public int RetryInitialInterval { get; }
    public int RetryMaxInterval { get; }
    public double RetryMultiplier { get; }
    public int RetryAttempts { get; }
    public bool DiscoveryEnabled { get; }
    public string DiscoveryServiceId { get; }
    public bool HealthEnabled { get; }
    public long HealthTimeToLive { get; }
    public string Access_Token_Uri { get; public set; }
    public string Client_Secret { get; public set; }
    public string Client_Id { get; public set; }
    public int TokenTtl { get; public set; }
    public int TokenRenewRate { get; public set; }
    public bool DisableTokenRenewal { get; public set; }
    public string AccessTokenUri { get; }
    public string ClientSecret { get; }
    public string ClientId { get; }
    public Dictionary`2<string, string> Headers { get; public set; }
    public ConfigServerClientSettings Settings { get; }
    public ConfigServerClientSettingsOptions(IConfigurationRoot root);
    public ConfigServerClientSettingsOptions(IConfiguration config);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_FailFast();
    [CompilerGeneratedAttribute]
public void set_FailFast(bool value);
    [CompilerGeneratedAttribute]
public string get_Env();
    [CompilerGeneratedAttribute]
public void set_Env(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public int get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(int value);
    [CompilerGeneratedAttribute]
public bool get_Validate_Certificates();
    [CompilerGeneratedAttribute]
public void set_Validate_Certificates(bool value);
    [CompilerGeneratedAttribute]
public SpringCloudConfigRetry get_Retry();
    [CompilerGeneratedAttribute]
public void set_Retry(SpringCloudConfigRetry value);
    [CompilerGeneratedAttribute]
public SpringCloudConfigDiscovery get_Discovery();
    [CompilerGeneratedAttribute]
public void set_Discovery(SpringCloudConfigDiscovery value);
    [CompilerGeneratedAttribute]
public SpringCloudConfigHealth get_Health();
    [CompilerGeneratedAttribute]
public void set_Health(SpringCloudConfigHealth value);
    public bool get_ValidateCertificates();
    public string get_Environment();
    public bool get_RetryEnabled();
    public int get_RetryInitialInterval();
    public int get_RetryMaxInterval();
    public double get_RetryMultiplier();
    public int get_RetryAttempts();
    public bool get_DiscoveryEnabled();
    public string get_DiscoveryServiceId();
    public bool get_HealthEnabled();
    public long get_HealthTimeToLive();
    [CompilerGeneratedAttribute]
public string get_Access_Token_Uri();
    [CompilerGeneratedAttribute]
public void set_Access_Token_Uri(string value);
    [CompilerGeneratedAttribute]
public string get_Client_Secret();
    [CompilerGeneratedAttribute]
public void set_Client_Secret(string value);
    [CompilerGeneratedAttribute]
public string get_Client_Id();
    [CompilerGeneratedAttribute]
public void set_Client_Id(string value);
    [CompilerGeneratedAttribute]
public int get_TokenTtl();
    [CompilerGeneratedAttribute]
public void set_TokenTtl(int value);
    [CompilerGeneratedAttribute]
public int get_TokenRenewRate();
    [CompilerGeneratedAttribute]
public void set_TokenRenewRate(int value);
    [CompilerGeneratedAttribute]
public bool get_DisableTokenRenewal();
    [CompilerGeneratedAttribute]
public void set_DisableTokenRenewal(bool value);
    public string get_AccessTokenUri();
    public string get_ClientSecret();
    public string get_ClientId();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Dictionary`2<string, string> value);
    public ConfigServerClientSettings get_Settings();
}
[ExtensionAttribute]
public static class Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerConfigurationBuilderExtensions : object {
    [ExtensionAttribute]
public static IConfigurationBuilder AddConfigServer(IConfigurationBuilder configurationBuilder, ILoggerFactory logFactory);
    [ExtensionAttribute]
public static IConfigurationBuilder AddConfigServer(IConfigurationBuilder configurationBuilder, string environment, ILoggerFactory logFactory);
    [ExtensionAttribute]
public static IConfigurationBuilder AddConfigServer(IConfigurationBuilder configurationBuilder, string environment, string applicationName, ILoggerFactory logFactory);
    [ExtensionAttribute]
public static IConfigurationBuilder AddConfigServer(IConfigurationBuilder configurationBuilder, ConfigServerClientSettings defaultSettings, ILoggerFactory logFactory);
}
public class Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerConfigurationProvider : ConfigurationProvider {
    public static string PREFIX;
    public static string TOKEN_HEADER;
    public static string STATE_HEADER;
    protected ConfigServerClientSettings _settings;
    protected HttpClient _httpClient;
    protected ILogger _logger;
    protected ILoggerFactory _loggerFactory;
    protected IConfiguration _configuration;
    protected Timer _tokenRenewTimer;
    protected Timer _refreshTimer;
    protected bool _hasConfiguration;
    private static string ArrayPattern;
    private static string VAULT_RENEW_PATH;
    private static string VAULT_TOKEN_HEADER;
    private static string DELIMITER_STRING;
    private static char DELIMITER_CHAR;
    private static char ESCAPE_CHAR;
    private static string ESCAPE_STRING;
    private static Char[] COMMA_DELIMIT;
    private static String[] EMPTY_LABELS;
    [CompilerGeneratedAttribute]
private JsonSerializerOptions <SerializerOptions>k__BackingField;
    internal ConfigServerDiscoveryService _configServerDiscoveryService;
    private bool _disposedValue;
    public ConfigServerClientSettings Settings { get; }
    internal JsonSerializerOptions SerializerOptions { get; private set; }
    internal IDictionary`2<string, string> Properties { get; }
    internal ILogger Logger { get; }
    public ConfigServerConfigurationProvider(ILoggerFactory logFactory);
    public ConfigServerConfigurationProvider(ConfigServerClientSettings settings, ILoggerFactory logFactory);
    public ConfigServerConfigurationProvider(ConfigServerClientSettings settings, HttpClient httpClient, ILoggerFactory logFactory);
    public ConfigServerConfigurationProvider(ConfigServerConfigurationSource source);
    public ConfigServerConfigurationProvider(ConfigServerConfigurationSource source, HttpClient httpClient);
    private static ConfigServerConfigurationProvider();
    internal void Initialize(ConfigServerConfigurationSource source, HttpClient httpClient, ILoggerFactory logFactory);
    internal void Initialize(ConfigServerClientSettings settings, IConfiguration configuration, HttpClient httpClient, ILoggerFactory logFactory);
    private void OnSettingsChanged();
    private void DoPolledLoad();
    public virtual ConfigServerClientSettings get_Settings();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
internal JsonSerializerOptions get_SerializerOptions();
    [CompilerGeneratedAttribute]
private void set_SerializerOptions(JsonSerializerOptions value);
    internal IDictionary`2<string, string> get_Properties();
    internal ILogger get_Logger();
    public virtual void Load();
    [ObsoleteAttribute("Will be removed in next release, use the ConfigServerConfigurationSource")]
public virtual IConfigurationProvider Build(IConfigurationBuilder builder);
    internal ConfigEnvironment LoadInternal(bool updateDictionary);
    internal ConfigEnvironment DoLoad(bool updateDictionary);
    internal String[] GetLabels();
    internal void DiscoverServerInstances();
    internal void UpdateSettingsFromDiscovery(IEnumerable`1<IServiceInstance> instances, ConfigServerClientSettings settings);
    [AsyncStateMachineAttribute("Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerConfigurationProvider/<ProvideRuntimeReplacementsAsync>d__49")]
internal Task ProvideRuntimeReplacementsAsync(IDiscoveryClient discoveryClientFromDI, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerConfigurationProvider/<ShutdownAsync>d__50")]
internal Task ShutdownAsync();
    protected internal virtual HttpRequestMessage GetRequestMessage(string requestUri, string username, string password);
    [ObsoleteAttribute("Will be removed in next release. See GetRequestMessage(string, string, string)")]
protected internal virtual HttpRequestMessage GetRequestMessage(string requestUri);
    protected internal virtual void AddConfigServerClientSettings();
    protected internal virtual void AddConfigServerClientSettings(IDictionary`2<string, string> data);
    [AsyncStateMachineAttribute("Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerConfigurationProvider/<RemoteLoadAsync>d__55")]
protected internal Task`1<ConfigEnvironment> RemoteLoadAsync(String[] requestUris, string label);
    [AsyncStateMachineAttribute("Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerConfigurationProvider/<RemoteLoadAsync>d__56")]
[ObsoleteAttribute("Will be removed in next release. See RemoteLoadAsync(string[], string)")]
protected internal virtual Task`1<ConfigEnvironment> RemoteLoadAsync(string requestUri);
    protected internal virtual string GetConfigServerUri(string baseRawUri, string label);
    [ObsoleteAttribute("Will be removed in next release. See GetConfigServerUri(string, string)")]
protected internal virtual string GetConfigServerUri(string label);
    [ObsoleteAttribute("Will be removed in next release.")]
protected internal virtual void AddPropertySource(PropertySource source);
    protected internal void AddPropertySource(PropertySource source, IDictionary`2<string, string> data);
    protected internal virtual string ConvertKey(string key);
    protected internal virtual String[] Split(string source);
    protected internal virtual string ConvertArrayKey(string key);
    protected internal virtual string ConvertValue(object value);
    protected internal string GetEncoded(string user, string password);
    protected internal virtual void RenewToken(string token);
    protected internal string FetchAccessToken();
    [AsyncStateMachineAttribute("Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerConfigurationProvider/<RefreshVaultTokenAsync>d__68")]
protected internal void RefreshVaultTokenAsync(object state);
    protected internal virtual string GetVaultRenewUri();
    protected internal virtual HttpRequestMessage GetVaultRenewMessage(string requestUri);
    [ObsoleteAttribute("Will be removed in next release. See GetVaultRenewMessage(string)")]
protected internal virtual HttpRequestMessage GetValutRenewMessage(string requestUri);
    protected internal bool IsDiscoveryFirstEnabled();
    protected static HttpClient GetHttpClient(ConfigServerClientSettings settings);
    protected virtual void Dispose(bool disposing);
    private IConfiguration WrapWithPlaceholderResolver(IConfiguration configuration);
    private bool IsContinueExceptionType(Exception e);
    [CompilerGeneratedAttribute]
private void <OnSettingsChanged>b__27_0(object _);
    [CompilerGeneratedAttribute]
private void <OnSettingsChanged>b__27_1(object _);
    [CompilerGeneratedAttribute]
internal static bool <DoLoad>g__AreEqual|45_0(IDictionary`2<TKey, TValue> dict1, IDictionary`2<TKey, TValue> dict2);
    [CompilerGeneratedAttribute]
internal static string <Split>g__UnEscapeString|62_0(string src);
}
public class Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerConfigurationSource : object {
    protected internal IList`1<IConfigurationSource> _sources;
    protected internal IDictionary`2<string, object> _properties;
    [CompilerGeneratedAttribute]
private ConfigServerClientSettings <DefaultSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggerFactory <LogFactory>k__BackingField;
    public ConfigServerClientSettings DefaultSettings { get; }
    public IConfiguration Configuration { get; protected set; }
    public ILoggerFactory LogFactory { get; }
    public ConfigServerConfigurationSource(IConfiguration configuration, ILoggerFactory logFactory);
    public ConfigServerConfigurationSource(ConfigServerClientSettings defaultSettings, IConfiguration configuration, ILoggerFactory logFactory);
    public ConfigServerConfigurationSource(IList`1<IConfigurationSource> sources, IDictionary`2<string, object> properties, ILoggerFactory logFactory);
    public ConfigServerConfigurationSource(ConfigServerClientSettings defaultSettings, IList`1<IConfigurationSource> sources, IDictionary`2<string, object> properties, ILoggerFactory logFactory);
    [CompilerGeneratedAttribute]
public ConfigServerClientSettings get_DefaultSettings();
    [CompilerGeneratedAttribute]
public IConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
protected void set_Configuration(IConfiguration value);
    [CompilerGeneratedAttribute]
public ILoggerFactory get_LogFactory();
    public virtual IConfigurationProvider Build(IConfigurationBuilder builder);
}
internal class Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerDiscoveryService : object {
    protected internal IConfiguration _configuration;
    protected internal ConfigServerClientSettings _settings;
    protected internal ILoggerFactory _logFactory;
    protected internal ILogger _logger;
    protected internal IDiscoveryClient _discoveryClient;
    private bool _usingInitialDiscoveryClient;
    internal ConfigServerDiscoveryService(IConfiguration configuration, ConfigServerClientSettings settings, ILoggerFactory logFactory);
    internal void SetupDiscoveryClient();
    internal IEnumerable`1<IServiceInstance> GetConfigServerInstances();
    [AsyncStateMachineAttribute("Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerDiscoveryService/<ProvideRuntimeReplacementsAsync>d__9")]
internal Task ProvideRuntimeReplacementsAsync(IDiscoveryClient discoveryClientFromDI, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerDiscoveryService/<ShutdownAsync>d__10")]
internal Task ShutdownAsync();
}
public class Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerException : Exception {
    public ConfigServerException(string message, Exception error);
    public ConfigServerException(string message);
    protected ConfigServerException(SerializationInfo info, StreamingContext context);
}
public class Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerHealthContributor : object {
    [CompilerGeneratedAttribute]
private ConfigServerConfigurationProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private ConfigEnvironment <Cached>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<ConfigServerHealthContributor> <Logger>k__BackingField;
    public string Id { get; }
    internal ConfigServerConfigurationProvider Provider { get; internal set; }
    internal ConfigEnvironment Cached { get; internal set; }
    internal long LastAccess { get; internal set; }
    internal IConfiguration Configuration { get; internal set; }
    internal ILogger`1<ConfigServerHealthContributor> Logger { get; internal set; }
    public ConfigServerHealthContributor(IConfiguration configuration, ILogger`1<ConfigServerHealthContributor> logger);
    public static IHealthContributor GetHealthContributor(IConfiguration configuration, ILogger`1<ConfigServerHealthContributor> logger);
    public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
internal ConfigServerConfigurationProvider get_Provider();
    [CompilerGeneratedAttribute]
internal void set_Provider(ConfigServerConfigurationProvider value);
    [CompilerGeneratedAttribute]
internal ConfigEnvironment get_Cached();
    [CompilerGeneratedAttribute]
internal void set_Cached(ConfigEnvironment value);
    [CompilerGeneratedAttribute]
internal long get_LastAccess();
    [CompilerGeneratedAttribute]
internal void set_LastAccess(long value);
    [CompilerGeneratedAttribute]
internal IConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
internal void set_Configuration(IConfiguration value);
    [CompilerGeneratedAttribute]
internal ILogger`1<ConfigServerHealthContributor> get_Logger();
    [CompilerGeneratedAttribute]
internal void set_Logger(ILogger`1<ConfigServerHealthContributor> value);
    public sealed virtual HealthCheckResult Health();
    internal void UpdateHealth(HealthCheckResult health, IList`1<PropertySource> sources);
    internal IList`1<PropertySource> GetPropertySources();
    internal bool IsCacheStale(long accessTime);
    internal bool IsEnabled();
    internal long GetTimeToLive();
    internal ConfigServerConfigurationProvider FindProvider(IConfiguration configuration);
}
public class Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerHostedService : object {
    private ConfigServerConfigurationProvider _configuration;
    private ILoggerFactory _loggerFactory;
    private IDiscoveryClient _discoveryClient;
    public ConfigServerHostedService(IConfigurationRoot configuration, ILoggerFactory loggerFactory, IDiscoveryClient discoveryClient);
    [AsyncStateMachineAttribute("Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerHostedService/<StartAsync>d__4")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerHostedService/<StopAsync>d__5")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Steeltoe.Extensions.Configuration.ConfigServer.ConfigServerServiceCollectionExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("IConfiguration parameter is not needed anymore")]
public static IServiceCollection ConfigureConfigServerClientOptions(IServiceCollection services, IConfiguration config);
    [ExtensionAttribute]
public static IServiceCollection ConfigureConfigServerClientOptions(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddConfigServerHealthContributor(IServiceCollection services);
    [ExtensionAttribute]
public static void AddConfigServerServices(IServiceCollection services);
}
public static class Steeltoe.Extensions.Configuration.ConfigServer.ConfigurationSettingsHelper : object {
    private static string SPRING_APPLICATION_PREFIX;
    private static string VCAP_APPLICATION_PREFIX;
    private static string VCAP_SERVICES_CONFIGSERVER_PREFIX;
    private static string VCAP_SERVICES_CONFIGSERVER30_PREFIX;
    private static string VCAP_SERVICES_CONFIGSERVERALT_PREFIX;
    public static void Initialize(string configPrefix, ConfigServerClientSettings settings, IConfiguration config);
    private static bool GetHealthEnabled(IConfigurationSection clientConfigsection, bool def);
    private static long GetHealthTimeToLive(IConfigurationSection clientConfigsection, long def);
    private static bool GetDiscoveryEnabled(IConfigurationSection clientConfigsection, bool def);
    private static string GetDiscoveryServiceId(IConfigurationSection clientConfigsection, string def);
    private static int GetRetryMaxAttempts(IConfigurationSection clientConfigsection, int def);
    private static double GetRetryMultiplier(IConfigurationSection clientConfigsection, double def);
    private static int GetRetryMaxInterval(IConfigurationSection clientConfigsection, int def);
    private static int GetRetryInitialInterval(IConfigurationSection clientConfigsection, int def);
    private static bool GetRetryEnabled(IConfigurationSection clientConfigsection, bool def);
    private static bool GetFailFast(IConfigurationSection clientConfigsection, bool def);
    private static bool GetEnabled(IConfigurationSection clientConfigsection, bool def);
    private static string GetToken(IConfigurationSection clientConfigsection, string def);
    private static int GetTimeout(IConfigurationSection clientConfigsection, int def);
    private static string GetUri(IConfigurationSection clientConfigsection, string def);
    private static string GetPassword(IConfigurationSection clientConfigsection, string defaultPassword);
    private static string GetUsername(IConfigurationSection clientConfigsection, string defaultUser);
    private static string GetLabel(IConfigurationSection clientConfigsection, string defaultLabel);
    private static string GetEnvironment(IConfigurationSection section, string def);
    private static bool GetCertificateValidation(IConfigurationSection clientConfigsection, bool def);
    private static int GetTokenRenewRate(IConfigurationSection configServerSection);
    private static bool GetDisableTokenRenewal(IConfigurationSection configServerSection);
    private static int GetTokenTtl(IConfigurationSection configServerSection);
    private static TimeSpan GetPollingInterval(IConfigurationSection clientConfigsection, TimeSpan def);
    private static string GetClientSecret(string configPrefix, IConfiguration config);
    private static string GetClientId(string configPrefix, IConfiguration config);
    private static string GetAccessTokenUri(string configPrefix, IConfiguration config);
    private static string GetApplicationName(string configPrefix, IConfiguration config, string defName);
    private static string GetCloudFoundryUri(string configPrefix, IConfiguration config, string def);
}
public class Steeltoe.Extensions.Configuration.ConfigServer.PropertySource : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Source>k__BackingField;
    public string Name { get; public set; }
    public IDictionary`2<string, object> Source { get; public set; }
    public PropertySource(string name, IDictionary`2<string, object> properties);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(IDictionary`2<string, object> value);
}
public class Steeltoe.Extensions.Configuration.ConfigServer.SpringCloudConfigDiscovery : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceId>k__BackingField;
    public bool Enabled { get; public set; }
    public string ServiceId { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_ServiceId();
    [CompilerGeneratedAttribute]
public void set_ServiceId(string value);
}
public class Steeltoe.Extensions.Configuration.ConfigServer.SpringCloudConfigHealth : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TimeToLive>k__BackingField;
    public bool Enabled { get; public set; }
    public long TimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public long get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(long value);
}
public class Steeltoe.Extensions.Configuration.ConfigServer.SpringCloudConfigRetry : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InitialInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Multiplier>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxAttempts>k__BackingField;
    public bool Enabled { get; public set; }
    public int InitialInterval { get; public set; }
    public int MaxInterval { get; public set; }
    public double Multiplier { get; public set; }
    public int MaxAttempts { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public int get_InitialInterval();
    [CompilerGeneratedAttribute]
public void set_InitialInterval(int value);
    [CompilerGeneratedAttribute]
public int get_MaxInterval();
    [CompilerGeneratedAttribute]
public void set_MaxInterval(int value);
    [CompilerGeneratedAttribute]
public double get_Multiplier();
    [CompilerGeneratedAttribute]
public void set_Multiplier(double value);
    [CompilerGeneratedAttribute]
public int get_MaxAttempts();
    [CompilerGeneratedAttribute]
public void set_MaxAttempts(int value);
}
