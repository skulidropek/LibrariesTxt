[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public abstract class StockSharp.Logging.BaseLogReceiver : BaseLogSource {
    private sealed virtual override void StockSharp.Logging.ILogReceiver.AddLog(LogMessage message);
}
public abstract class StockSharp.Logging.BaseLogSource : Disposable {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    private string _name;
    private ILogSource _parent;
    [CompilerGeneratedAttribute]
private Action`1<ILogSource> ParentRemoved;
    [CompilerGeneratedAttribute]
private LogLevels <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRoot>k__BackingField;
    private Action`1<LogMessage> _log;
    [DisplayAttribute]
[ReadOnlyAttribute("True")]
public Guid Id { get; public set; }
    [ReadOnlyAttribute("True")]
[DisplayAttribute]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
public ILogSource Parent { get; public set; }
    [DisplayAttribute]
public LogLevels LogLevel { get; public set; }
    [BrowsableAttribute("False")]
public DateTimeOffset CurrentTime { get; }
    [BrowsableAttribute("False")]
public bool IsRoot { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(Guid value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual ILogSource get_Parent();
    public sealed virtual void set_Parent(ILogSource value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ParentRemoved(Action`1<ILogSource> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ParentRemoved(Action`1<ILogSource> value);
    [CompilerGeneratedAttribute]
public virtual LogLevels get_LogLevel();
    [CompilerGeneratedAttribute]
public virtual void set_LogLevel(LogLevels value);
    public virtual DateTimeOffset get_CurrentTime();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRoot();
    [CompilerGeneratedAttribute]
public void set_IsRoot(bool value);
    public sealed virtual void add_Log(Action`1<LogMessage> value);
    public sealed virtual void remove_Log(Action`1<LogMessage> value);
    protected virtual void RaiseLog(LogMessage message);
    public virtual string ToString();
    public virtual void Load(SettingsStorage storage);
    public virtual void Save(SettingsStorage storage);
}
public class StockSharp.Logging.ConsoleLogListener : LogListener {
    protected virtual void OnWriteMessage(LogMessage message);
}
public class StockSharp.Logging.DebugLogListener : LogListener {
    protected virtual void OnWriteMessages(IEnumerable`1<LogMessage> messages);
    private static void Dump(LogLevels level, StringBuilder builder);
}
public class StockSharp.Logging.EmailLogListener : LogListener {
    private BlockingQueue`1<Tuple`2<string, string>> _queue;
    private bool _isThreadStarted;
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    [CompilerGeneratedAttribute]
private string <To>k__BackingField;
    public string From { get; public set; }
    public string To { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_From();
    [CompilerGeneratedAttribute]
public virtual void set_From(string value);
    [CompilerGeneratedAttribute]
public virtual string get_To();
    [CompilerGeneratedAttribute]
public virtual void set_To(string value);
    protected virtual SmtpClient CreateClient();
    protected virtual string GetSubject(LogMessage message);
    private void EnqueueMessage(LogMessage message);
    protected virtual void OnWriteMessage(LogMessage message);
    public virtual void Load(SettingsStorage storage);
    public virtual void Save(SettingsStorage storage);
    protected virtual void DisposeManaged();
    [CompilerGeneratedAttribute]
private void <EnqueueMessage>b__13_0();
}
public class StockSharp.Logging.ExternalLogListener : LogListener {
    [CompilerGeneratedAttribute]
private ILogListener <Logger>k__BackingField;
    public ILogListener Logger { get; }
    public ExternalLogListener(ILogListener logger);
    [CompilerGeneratedAttribute]
public ILogListener get_Logger();
    protected virtual void OnWriteMessages(IEnumerable`1<LogMessage> messages);
}
public enum StockSharp.Logging.FileLogHistoryPolicies : Enum {
    public int value__;
    public static FileLogHistoryPolicies None;
    public static FileLogHistoryPolicies Delete;
    public static FileLogHistoryPolicies Compression;
    public static FileLogHistoryPolicies Move;
}
public class StockSharp.Logging.FileLogListener : LogListener {
    private static Char[] _digitChars;
    private PairSet`2<ValueTuple`2<string, DateTime>, StreamWriterEx> _writers;
    private string _fileName;
    private Encoding _encoding;
    private long _maxLength;
    private int _maxCount;
    [CompilerGeneratedAttribute]
private bool <Append>k__BackingField;
    private string _logDirectory;
    [CompilerGeneratedAttribute]
private bool <WriteChildDataToRootFile>k__BackingField;
    private string _extension;
    [CompilerGeneratedAttribute]
private bool <WriteSourceId>k__BackingField;
    private string _directoryDateFormat;
    [CompilerGeneratedAttribute]
private SeparateByDateModes <SeparateByDates>k__BackingField;
    [CompilerGeneratedAttribute]
private FileLogHistoryPolicies <HistoryPolicy>k__BackingField;
    private TimeSpan _historyAfter;
    [CompilerGeneratedAttribute]
private string <HistoryMove>k__BackingField;
    [CompilerGeneratedAttribute]
private CompressionLevel <HistoryCompressionLevel>k__BackingField;
    private bool _triedHistoryPolicy;
    public string FileName { get; public set; }
    public Encoding Encoding { get; public set; }
    public long MaxLength { get; public set; }
    public int MaxCount { get; public set; }
    public bool Append { get; public set; }
    public string LogDirectory { get; public set; }
    public bool WriteChildDataToRootFile { get; public set; }
    public string Extension { get; public set; }
    public bool WriteSourceId { get; public set; }
    public string DirectoryDateFormat { get; public set; }
    public SeparateByDateModes SeparateByDates { get; public set; }
    public FileLogHistoryPolicies HistoryPolicy { get; public set; }
    public TimeSpan HistoryAfter { get; public set; }
    public string HistoryMove { get; public set; }
    public CompressionLevel HistoryCompressionLevel { get; public set; }
    private static FileLogListener();
    public FileLogListener(string fileName);
    public string get_FileName();
    public void set_FileName(string value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public long get_MaxLength();
    public void set_MaxLength(long value);
    public int get_MaxCount();
    public void set_MaxCount(int value);
    [CompilerGeneratedAttribute]
public bool get_Append();
    [CompilerGeneratedAttribute]
public void set_Append(bool value);
    public string get_LogDirectory();
    public void set_LogDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_WriteChildDataToRootFile();
    [CompilerGeneratedAttribute]
public void set_WriteChildDataToRootFile(bool value);
    public string get_Extension();
    public void set_Extension(string value);
    [CompilerGeneratedAttribute]
public bool get_WriteSourceId();
    [CompilerGeneratedAttribute]
public void set_WriteSourceId(bool value);
    public string get_DirectoryDateFormat();
    public void set_DirectoryDateFormat(string value);
    [CompilerGeneratedAttribute]
public SeparateByDateModes get_SeparateByDates();
    [CompilerGeneratedAttribute]
public void set_SeparateByDates(SeparateByDateModes value);
    [CompilerGeneratedAttribute]
public FileLogHistoryPolicies get_HistoryPolicy();
    [CompilerGeneratedAttribute]
public void set_HistoryPolicy(FileLogHistoryPolicies value);
    public TimeSpan get_HistoryAfter();
    public void set_HistoryAfter(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_HistoryMove();
    [CompilerGeneratedAttribute]
public void set_HistoryMove(string value);
    [CompilerGeneratedAttribute]
public CompressionLevel get_HistoryCompressionLevel();
    [CompilerGeneratedAttribute]
public void set_HistoryCompressionLevel(CompressionLevel value);
    private string GetFileName(string sourceName, DateTime date);
    private StreamWriterEx OnCreateWriter(string fileName);
    private void TryDoHistoryPolicy();
    protected virtual void OnWriteMessages(IEnumerable`1<LogMessage> messages);
    private static string GetRollingFileName(string fileName, int index);
    private string GetSourceName(ILogSource source);
    private void WriteMessage(TextWriter writer, LogMessage message);
    private Char[] ToFastDateCharArray(DateTimeOffset time);
    public virtual void Load(SettingsStorage storage);
    public virtual void Save(SettingsStorage storage);
    protected virtual void DisposeManaged();
}
public class StockSharp.Logging.GlobalLogReceiver : object {
    [CompilerGeneratedAttribute]
private static GlobalLogReceiver <Instance>k__BackingField;
    private ILogReceiver App { get; }
    public static GlobalLogReceiver Instance { get; }
    private Guid StockSharp.Logging.ILogSource.Id { get; }
    private string StockSharp.Logging.ILogSource.Name { get; private set; }
    private ILogSource StockSharp.Logging.ILogSource.Parent { get; private set; }
    private LogLevels StockSharp.Logging.ILogSource.LogLevel { get; private set; }
    private DateTimeOffset StockSharp.Logging.ILogSource.CurrentTime { get; }
    private bool StockSharp.Logging.ILogSource.IsRoot { get; }
    private static GlobalLogReceiver();
    private ILogReceiver get_App();
    [CompilerGeneratedAttribute]
public static GlobalLogReceiver get_Instance();
    private sealed virtual override Guid StockSharp.Logging.ILogSource.get_Id();
    private sealed virtual override string StockSharp.Logging.ILogSource.get_Name();
    private sealed virtual override void StockSharp.Logging.ILogSource.set_Name(string value);
    private sealed virtual override ILogSource StockSharp.Logging.ILogSource.get_Parent();
    private sealed virtual override void StockSharp.Logging.ILogSource.set_Parent(ILogSource value);
    public sealed virtual void add_ParentRemoved(Action`1<ILogSource> value);
    public sealed virtual void remove_ParentRemoved(Action`1<ILogSource> value);
    private sealed virtual override LogLevels StockSharp.Logging.ILogSource.get_LogLevel();
    private sealed virtual override void StockSharp.Logging.ILogSource.set_LogLevel(LogLevels value);
    private sealed virtual override DateTimeOffset StockSharp.Logging.ILogSource.get_CurrentTime();
    private sealed virtual override bool StockSharp.Logging.ILogSource.get_IsRoot();
    private sealed virtual override void StockSharp.Logging.ILogSource.add_Log(Action`1<LogMessage> value);
    private sealed virtual override void StockSharp.Logging.ILogSource.remove_Log(Action`1<LogMessage> value);
    private sealed virtual override void StockSharp.Logging.ILogReceiver.AddLog(LogMessage message);
    private sealed virtual override void System.IDisposable.Dispose();
}
public interface StockSharp.Logging.ILogListener {
    public bool CanSave { get; }
    public abstract virtual bool get_CanSave();
    public abstract virtual void WriteMessages(IEnumerable`1<LogMessage> messages);
}
public interface StockSharp.Logging.ILogReceiver {
    public abstract virtual void AddLog(LogMessage message);
}
public interface StockSharp.Logging.ILogSource {
    public Guid Id { get; }
    public string Name { get; public set; }
    public ILogSource Parent { get; public set; }
    public LogLevels LogLevel { get; public set; }
    public DateTimeOffset CurrentTime { get; }
    public bool IsRoot { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual ILogSource get_Parent();
    public abstract virtual void set_Parent(ILogSource value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ParentRemoved(Action`1<ILogSource> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ParentRemoved(Action`1<ILogSource> value);
    public abstract virtual LogLevels get_LogLevel();
    public abstract virtual void set_LogLevel(LogLevels value);
    public abstract virtual DateTimeOffset get_CurrentTime();
    public abstract virtual bool get_IsRoot();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Log(Action`1<LogMessage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Log(Action`1<LogMessage> value);
}
[ExtensionAttribute]
public static class StockSharp.Logging.LoggingHelper : object {
    public static Func`2<LogMessage, bool> OnlyWarning;
    public static Func`2<LogMessage, bool> OnlyError;
    private static LoggingHelper();
    [ExtensionAttribute]
public static void AddInfoLog(ILogReceiver receiver, Func`1<string> getMessage);
    [ExtensionAttribute]
public static void AddWarningLog(ILogReceiver receiver, Func`1<string> getMessage);
    [ExtensionAttribute]
public static void AddErrorLog(ILogReceiver receiver, Func`1<string> getMessage);
    [ExtensionAttribute]
public static void AddLog(ILogReceiver receiver, LogLevels level, Func`1<string> getMessage);
    [ExtensionAttribute]
public static void AddInfoLog(ILogReceiver receiver, string message, Object[] args);
    [ExtensionAttribute]
public static void AddVerboseLog(ILogReceiver receiver, string message, Object[] args);
    [ExtensionAttribute]
public static void AddDebugLog(ILogReceiver receiver, string message, Object[] args);
    [ExtensionAttribute]
public static void AddWarningLog(ILogReceiver receiver, string message, Object[] args);
    [ExtensionAttribute]
public static void AddErrorLog(ILogReceiver receiver, Exception exception);
    [ExtensionAttribute]
public static void AddErrorLog(ILogReceiver receiver, Exception exception, string format);
    [ExtensionAttribute]
public static void AddErrorLog(ILogReceiver receiver, string message, Object[] args);
    [ExtensionAttribute]
private static void AddMessage(ILogReceiver receiver, LogLevels level, string message, Object[] args);
    [ExtensionAttribute]
public static void LogError(Exception error, string format);
    [ExtensionAttribute]
public static LogLevels GetLogLevel(ILogSource source);
    [ExtensionAttribute]
public static void DoWithLog(Action action);
    [ExtensionAttribute]
public static T DoWithLog(Func`1<T> action);
    public static void DoWithLog(Func`1<IDictionary`2<T, Exception>> action);
    [ExtensionAttribute]
public static T2[] SafeAdd(IEnumerable from, Func`2<T1, T2> func);
    [ExtensionAttribute]
public static IEnumerable`1<LogMessage> Filter(IEnumerable`1<LogMessage> messages, ICollection`1<Func`2<LogMessage, bool>> filters);
    [ExtensionAttribute]
public static void WriteMessage(ILogListener listener, LogMessage message);
}
[DataContractAttribute]
public enum StockSharp.Logging.LogLevels : Enum {
    public int value__;
    [DisplayAttribute]
[EnumMemberAttribute]
public static LogLevels Inherit;
    [EnumMemberAttribute]
[DisplayAttribute]
public static LogLevels Verbose;
    [EnumMemberAttribute]
[DisplayAttribute]
public static LogLevels Debug;
    [EnumMemberAttribute]
[DisplayAttribute]
public static LogLevels Info;
    [EnumMemberAttribute]
[DisplayAttribute]
public static LogLevels Warning;
    [EnumMemberAttribute]
[DisplayAttribute]
public static LogLevels Error;
    [EnumMemberAttribute]
[DisplayAttribute]
public static LogLevels Off;
}
public abstract class StockSharp.Logging.LogListener : Disposable {
    [CompilerGeneratedAttribute]
private IList`1<Func`2<LogMessage, bool>> <Filters>k__BackingField;
    private string _dateFormat;
    private string _timeFormat;
    [CompilerGeneratedAttribute]
private bool <CanSave>k__BackingField;
    public IList`1<Func`2<LogMessage, bool>> Filters { get; }
    public string DateFormat { get; public set; }
    public string TimeFormat { get; public set; }
    public bool CanSave { get; }
    [CompilerGeneratedAttribute]
public IList`1<Func`2<LogMessage, bool>> get_Filters();
    public string get_DateFormat();
    public void set_DateFormat(string value);
    public string get_TimeFormat();
    public void set_TimeFormat(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_CanSave();
    public sealed virtual void WriteMessages(IEnumerable`1<LogMessage> messages);
    protected virtual void OnWriteMessages(IEnumerable`1<LogMessage> messages);
    protected virtual void OnWriteMessage(LogMessage message);
    public virtual void Load(SettingsStorage storage);
    public virtual void Save(SettingsStorage storage);
}
public class StockSharp.Logging.LogManager : Disposable {
    private static DisposeLogMessage _disposeMessage;
    private object _syncRoot;
    private List`1<LogMessage> _pendingMessages;
    private Timer _flushTimer;
    private bool _isFlusing;
    private bool _asyncMode;
    [CompilerGeneratedAttribute]
private static LogManager <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeZoneInfo <LocalTimeZone>k__BackingField;
    private ILogReceiver _application;
    private CachedSynchronizedSet`1<ILogListener> _listeners;
    [CompilerGeneratedAttribute]
private IList`1<ILogSource> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClearPendingOnDispose>k__BackingField;
    public static LogManager Instance { get; private set; }
    public TimeZoneInfo LocalTimeZone { get; public set; }
    public ILogReceiver Application { get; public set; }
    public IList`1<ILogListener> Listeners { get; }
    public IList`1<ILogSource> Sources { get; }
    public TimeSpan FlushInterval { get; public set; }
    public bool ClearPendingOnDispose { get; public set; }
    public LogManager(bool asyncMode);
    private static LogManager();
    [CompilerGeneratedAttribute]
public static LogManager get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(LogManager value);
    [CompilerGeneratedAttribute]
public TimeZoneInfo get_LocalTimeZone();
    [CompilerGeneratedAttribute]
public void set_LocalTimeZone(TimeZoneInfo value);
    private void Flush();
    public ILogReceiver get_Application();
    public void set_Application(ILogReceiver value);
    public IList`1<ILogListener> get_Listeners();
    [CompilerGeneratedAttribute]
public IList`1<ILogSource> get_Sources();
    public TimeSpan get_FlushInterval();
    public void set_FlushInterval(TimeSpan value);
    private void SourceLog(LogMessage message);
    private void ImmediateFlush();
    [CompilerGeneratedAttribute]
public bool get_ClearPendingOnDispose();
    [CompilerGeneratedAttribute]
public void set_ClearPendingOnDispose(bool value);
    protected virtual void DisposeManaged();
    public virtual void Load(SettingsStorage storage);
    public virtual void Save(SettingsStorage storage);
}
public class StockSharp.Logging.LogMessage : object {
    [CompilerGeneratedAttribute]
private bool <IsDispose>k__BackingField;
    private Func`1<string> _getMessage;
    [CompilerGeneratedAttribute]
private ILogSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevels <Level>k__BackingField;
    private SyncObject _messageLock;
    private string _message;
    public bool IsDispose { get; internal set; }
    public ILogSource Source { get; public set; }
    public DateTimeOffset Time { get; public set; }
    public LogLevels Level { get; }
    public string Message { get; }
    public LogMessage(ILogSource source, DateTimeOffset time, LogLevels level, string message, Object[] args);
    public LogMessage(ILogSource source, DateTimeOffset time, LogLevels level, Func`1<string> getMessage);
    [CompilerGeneratedAttribute]
public bool get_IsDispose();
    [CompilerGeneratedAttribute]
internal void set_IsDispose(bool value);
    [CompilerGeneratedAttribute]
public ILogSource get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(ILogSource value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Time();
    [CompilerGeneratedAttribute]
public void set_Time(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public LogLevels get_Level();
    public string get_Message();
    public virtual string ToString();
}
public class StockSharp.Logging.LogReceiver : BaseLogReceiver {
    public LogReceiver(string name);
}
public enum StockSharp.Logging.SeparateByDateModes : Enum {
    public int value__;
    public static SeparateByDateModes None;
    public static SeparateByDateModes FileName;
    public static SeparateByDateModes SubDirectories;
}
public class StockSharp.Logging.TraceSource : BaseLogSource {
    private TraceListenerEx _listenerEx;
    public string Name { get; }
    private void RaiseDebugLog(string message);
    public virtual string get_Name();
    protected virtual void DisposeManaged();
}
public class StockSharp.Logging.UnhandledExceptionSource : BaseLogSource {
    public string Name { get; }
    public virtual string get_Name();
    private void OnUnhandledException(object sender, UnhandledExceptionEventArgs e);
    private void OnTaskSchedulerException(object sender, UnobservedTaskExceptionEventArgs e);
    protected virtual void DisposeManaged();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
