[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public abstract class StockSharp.Messages.AsyncMessageAdapter : MessageAdapter {
    private AsyncMessageProcessor _asyncMessageProcessor;
    [CompilerGeneratedAttribute]
private TimeSpan <DisconnectTimeout>k__BackingField;
    private int _maxParallelMessages;
    private TimeSpan _faultDelay;
    [BrowsableAttribute("False")]
public bool IsSupportPartialDownloading { get; }
    [BrowsableAttribute("False")]
public TimeSpan DisconnectTimeout { get; }
    [DisplayAttribute]
public int MaxParallelMessages { get; public set; }
    [DisplayAttribute]
public TimeSpan FaultDelay { get; public set; }
    protected AsyncMessageAdapter(IdGenerator transactionIdGenerator);
    protected virtual void DisposeManaged();
    public virtual bool get_IsSupportPartialDownloading();
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_DisconnectTimeout();
    public int get_MaxParallelMessages();
    public void set_MaxParallelMessages(int value);
    public TimeSpan get_FaultDelay();
    public void set_FaultDelay(TimeSpan value);
    protected virtual bool OnSendInMessage(Message message);
    public virtual ValueTask ConnectAsync(ConnectMessage connectMsg, CancellationToken cancellationToken);
    public virtual ValueTask DisconnectAsync(DisconnectMessage disconnectMsg, CancellationToken cancellationToken);
    public virtual ValueTask ResetAsync(ResetMessage resetMsg, CancellationToken cancellationToken);
    public virtual ValueTask SecurityLookupAsync(SecurityLookupMessage lookupMsg, CancellationToken cancellationToken);
    public virtual ValueTask PortfolioLookupAsync(PortfolioLookupMessage lookupMsg, CancellationToken cancellationToken);
    public virtual ValueTask BoardLookupAsync(BoardLookupMessage lookupMsg, CancellationToken cancellationToken);
    public virtual ValueTask OrderStatusAsync(OrderStatusMessage statusMsg, CancellationToken cancellationToken);
    public virtual ValueTask RegisterOrderAsync(OrderRegisterMessage regMsg, CancellationToken cancellationToken);
    public virtual ValueTask ReplaceOrderAsync(OrderReplaceMessage replaceMsg, CancellationToken cancellationToken);
    public virtual ValueTask CancelOrderAsync(OrderCancelMessage cancelMsg, CancellationToken cancellationToken);
    public virtual ValueTask CancelOrderGroupAsync(OrderGroupCancelMessage cancelMsg, CancellationToken cancellationToken);
    public virtual ValueTask TimeAsync(TimeMessage timeMsg, CancellationToken cancellationToken);
    public virtual ValueTask ProcessMessageAsync(Message msg, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("StockSharp.Messages.AsyncMessageAdapter/<MarketDataAsync>d__30")]
public virtual ValueTask MarketDataAsync(MarketDataMessage mdMsg, CancellationToken cancellationToken);
    protected virtual ValueTask OnNewsSubscriptionAsync(MarketDataMessage mdMsg, CancellationToken cancellationToken);
    protected virtual ValueTask OnLevel1SubscriptionAsync(MarketDataMessage mdMsg, CancellationToken cancellationToken);
    protected virtual ValueTask OnTicksSubscriptionAsync(MarketDataMessage mdMsg, CancellationToken cancellationToken);
    protected virtual ValueTask OnMarketDepthSubscriptionAsync(MarketDataMessage mdMsg, CancellationToken cancellationToken);
    protected virtual ValueTask OnOrderLogSubscriptionAsync(MarketDataMessage mdMsg, CancellationToken cancellationToken);
    protected virtual ValueTask OnTFCandlesSubscriptionAsync(MarketDataMessage mdMsg, CancellationToken cancellationToken);
    protected virtual ValueTask OnCandlesSubscriptionAsync(MarketDataMessage mdMsg, CancellationToken cancellationToken);
    public virtual TimeSpan GetHistoryStepSize(SecurityId securityId, DataType dataType, TimeSpan& iterationInterval);
    public virtual void Save(SettingsStorage storage);
    public virtual void Load(SettingsStorage storage);
}
internal class StockSharp.Messages.AsyncMessageProcessor : Disposable {
    private SynchronizedList`1<MessageQueueItem> _messages;
    private SynchronizedDictionary`2<MessageQueueItem, Task> _childTasks;
    private SynchronizedDictionary`2<long, MessageQueueItem> _subscriptionItems;
    private AsyncManualResetEvent _processMessageEvt;
    private CancellationTokenSource _globalCts;
    private bool _isConnectionStarted;
    private bool _isDisconnecting;
    private AsyncMessageAdapter _adapter;
    public AsyncMessageProcessor(AsyncMessageAdapter adapter);
    protected virtual void DisposeManaged();
    public bool EnqueueMessage(Message msg);
    [AsyncStateMachineAttribute("StockSharp.Messages.AsyncMessageProcessor/<ProcessMessagesAsync>d__12")]
private Task ProcessMessagesAsync();
    private ValueTask ConnectAsync(ConnectMessage msg, CancellationToken token);
    [AsyncStateMachineAttribute("StockSharp.Messages.AsyncMessageProcessor/<DisconnectAsync>d__14")]
private ValueTask DisconnectAsync(DisconnectMessage msg);
    [AsyncStateMachineAttribute("StockSharp.Messages.AsyncMessageProcessor/<ResetAsync>d__15")]
private ValueTask ResetAsync(ResetMessage msg);
    private void CancelAndReplaceGlobalCts();
    [AsyncStateMachineAttribute("StockSharp.Messages.AsyncMessageProcessor/<WhenChildrenComplete>d__17")]
private Task`1<bool> WhenChildrenComplete(CancellationToken token);
    [CompilerGeneratedAttribute]
private bool <ProcessMessagesAsync>g__nextMessage|12_0();
    [AsyncStateMachineAttribute("StockSharp.Messages.AsyncMessageProcessor/<<ProcessMessagesAsync>b__12_1>d")]
[CompilerGeneratedAttribute]
private Task <ProcessMessagesAsync>b__12_1();
    [CompilerGeneratedAttribute]
private Task <ResetAsync>b__15_0();
}
public class StockSharp.Messages.AvailableDataInfoMessage : BaseSubscriptionIdMessage`1<AvailableDataInfoMessage> {
    [CompilerGeneratedAttribute]
private SecurityId <SecurityId>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <FileDataType>k__BackingField;
    private DateTime[] _dates;
    [CompilerGeneratedAttribute]
private int <Format>k__BackingField;
    [DataMemberAttribute]
public SecurityId SecurityId { get; public set; }
    [DataMemberAttribute]
public DataType FileDataType { get; public set; }
    [DataMemberAttribute]
public DateTime[] Dates { get; public set; }
    [DataMemberAttribute]
public int Format { get; public set; }
    public DataType DataType { get; }
    [CompilerGeneratedAttribute]
public sealed virtual SecurityId get_SecurityId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SecurityId(SecurityId value);
    [CompilerGeneratedAttribute]
public DataType get_FileDataType();
    [CompilerGeneratedAttribute]
public void set_FileDataType(DataType value);
    public DateTime[] get_Dates();
    public void set_Dates(DateTime[] value);
    [CompilerGeneratedAttribute]
public int get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(int value);
    public virtual DataType get_DataType();
    public virtual Message Clone();
    public virtual string ToString();
}
public class StockSharp.Messages.AvailableDataRequestMessage : Message {
    [CompilerGeneratedAttribute]
private long <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityId <SecurityId>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <RequestDataType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDates>k__BackingField;
    [DataMemberAttribute]
public long TransactionId { get; public set; }
    [DataMemberAttribute]
public SecurityId SecurityId { get; public set; }
    [DataMemberAttribute]
public DataType RequestDataType { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> Format { get; public set; }
    [DataMemberAttribute]
public bool IncludeDates { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual long get_TransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual SecurityId get_SecurityId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SecurityId(SecurityId value);
    [CompilerGeneratedAttribute]
public DataType get_RequestDataType();
    [CompilerGeneratedAttribute]
public void set_RequestDataType(DataType value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_IncludeDates();
    [CompilerGeneratedAttribute]
public void set_IncludeDates(bool value);
    public virtual Message Clone();
    public virtual string ToString();
}
[DataContractAttribute]
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class StockSharp.Messages.BankDetails : object {
    [CompilerGeneratedAttribute]
private string <Account>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Country>k__BackingField;
    [CompilerGeneratedAttribute]
private string <City>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Swift>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Bic>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Iban>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostalCode>k__BackingField;
    [CompilerGeneratedAttribute]
private CurrencyTypes <Currency>k__BackingField;
    [DataMemberAttribute]
[DisplayAttribute]
public string Account { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string AccountName { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Address { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Country { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string City { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Swift { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Bic { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Iban { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string PostalCode { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public CurrencyTypes Currency { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Account();
    [CompilerGeneratedAttribute]
public void set_Account(string value);
    [CompilerGeneratedAttribute]
public string get_AccountName();
    [CompilerGeneratedAttribute]
public void set_AccountName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public string get_Country();
    [CompilerGeneratedAttribute]
public void set_Country(string value);
    [CompilerGeneratedAttribute]
public string get_City();
    [CompilerGeneratedAttribute]
public void set_City(string value);
    [CompilerGeneratedAttribute]
public string get_Swift();
    [CompilerGeneratedAttribute]
public void set_Swift(string value);
    [CompilerGeneratedAttribute]
public string get_Bic();
    [CompilerGeneratedAttribute]
public void set_Bic(string value);
    [CompilerGeneratedAttribute]
public string get_Iban();
    [CompilerGeneratedAttribute]
public void set_Iban(string value);
    [CompilerGeneratedAttribute]
public string get_PostalCode();
    [CompilerGeneratedAttribute]
public void set_PostalCode(string value);
    [CompilerGeneratedAttribute]
public CurrencyTypes get_Currency();
    [CompilerGeneratedAttribute]
public void set_Currency(CurrencyTypes value);
    public sealed virtual void Load(SettingsStorage storage);
    public sealed virtual void Save(SettingsStorage storage);
    public virtual string ToString();
}
[DataContractAttribute]
public abstract class StockSharp.Messages.BaseChangeMessage`2 : BaseSubscriptionIdMessage`1<TMessage> {
    [CompilerGeneratedAttribute]
private DateTimeOffset <ServerTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <BuildFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<TField, object> <Changes>k__BackingField;
    [DataMemberAttribute]
[DisplayAttribute]
public DateTimeOffset ServerTime { get; public set; }
    [DataMemberAttribute]
public DataType BuildFrom { get; public set; }
    [BrowsableAttribute("False")]
[XmlIgnoreAttribute]
public IDictionary`2<TField, object> Changes { get; }
    protected BaseChangeMessage`2(MessageTypes type);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_ServerTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServerTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public sealed virtual DataType get_BuildFrom();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildFrom(DataType value);
    [CompilerGeneratedAttribute]
public IDictionary`2<TField, object> get_Changes();
    public virtual void CopyTo(TMessage destination);
    public virtual string ToString();
}
[DataContractAttribute]
public abstract class StockSharp.Messages.BaseConnectionMessage : Message {
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [DataMemberAttribute]
[XmlIgnoreAttribute]
public Exception Error { get; public set; }
    protected BaseConnectionMessage(MessageTypes type);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Error();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Error(Exception value);
    protected virtual void CopyTo(BaseConnectionMessage destination);
    public virtual string ToString();
}
public abstract class StockSharp.Messages.BaseMessageQueue : BaseOrderedBlockingQueue`3<long, Message, PriorityQueue`2<long, Message>> {
    public abstract virtual void Enqueue(Message message);
    private sealed virtual override bool StockSharp.Messages.IMessageQueue.TryDequeue(Message& message, bool exitOnClose, bool block);
}
[DataContractAttribute]
public abstract class StockSharp.Messages.BaseRequestMessage : BaseSubscriptionMessage {
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> From { get; }
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> To { get; }
    [DataMemberAttribute]
public bool IsSubscribe { get; }
    [DataMemberAttribute]
public long OriginalTransactionId { get; }
    public BaseRequestMessage(MessageTypes type);
    public virtual Nullable`1<DateTimeOffset> get_From();
    public virtual Nullable`1<DateTimeOffset> get_To();
    public virtual bool get_IsSubscribe();
    public virtual long get_OriginalTransactionId();
}
[DataContractAttribute]
public abstract class StockSharp.Messages.BaseResultMessage`1 : Message {
    [CompilerGeneratedAttribute]
private long <OriginalTransactionId>k__BackingField;
    [DataMemberAttribute]
public long OriginalTransactionId { get; public set; }
    protected BaseResultMessage`1(MessageTypes type);
    [CompilerGeneratedAttribute]
public sealed virtual long get_OriginalTransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OriginalTransactionId(long value);
    public virtual Message Clone();
    protected virtual void CopyTo(TMessage destination);
    public virtual string ToString();
}
[DataContractAttribute]
public abstract class StockSharp.Messages.BaseRouteMessage`1 : BaseSubscriptionIdMessage`1<TMessage> {
    [CompilerGeneratedAttribute]
private Guid <AdapterId>k__BackingField;
    [DataMemberAttribute]
public Guid AdapterId { get; public set; }
    protected BaseRouteMessage`1(MessageTypes type);
    [CompilerGeneratedAttribute]
public Guid get_AdapterId();
    [CompilerGeneratedAttribute]
public void set_AdapterId(Guid value);
    public virtual void CopyTo(TMessage destination);
}
[DataContractAttribute]
public abstract class StockSharp.Messages.BaseSubscriptionIdMessage`1 : Message {
    [CompilerGeneratedAttribute]
private long <OriginalTransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SubscriptionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Int64[] <SubscriptionIds>k__BackingField;
    [DataMemberAttribute]
public long OriginalTransactionId { get; public set; }
    [XmlIgnoreAttribute]
public long SubscriptionId { get; public set; }
    [XmlIgnoreAttribute]
public Int64[] SubscriptionIds { get; public set; }
    public DataType DataType { get; }
    protected BaseSubscriptionIdMessage`1(MessageTypes type);
    [CompilerGeneratedAttribute]
public sealed virtual long get_OriginalTransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OriginalTransactionId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_SubscriptionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SubscriptionId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual Int64[] get_SubscriptionIds();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SubscriptionIds(Int64[] value);
    public abstract virtual DataType get_DataType();
    public virtual void CopyTo(TMessage destination);
    public virtual string ToString();
    public virtual Message Clone();
}
[DataContractAttribute]
public abstract class StockSharp.Messages.BaseSubscriptionMessage : Message {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <From>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <To>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FillGapsDays> <FillGaps>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSubscribe>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <OriginalTransactionId>k__BackingField;
    public bool FilterEnabled { get; }
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> From { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> To { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> Skip { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> Count { get; public set; }
    [DataMemberAttribute]
public Nullable`1<FillGapsDays> FillGaps { get; public set; }
    [DataMemberAttribute]
public bool IsSubscribe { get; public set; }
    [DataMemberAttribute]
public long TransactionId { get; public set; }
    [DataMemberAttribute]
public long OriginalTransactionId { get; public set; }
    public DataType DataType { get; }
    public BaseSubscriptionMessage(MessageTypes type);
    public virtual bool get_FilterEnabled();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTimeOffset> get_From();
    [CompilerGeneratedAttribute]
public virtual void set_From(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTimeOffset> get_To();
    [CompilerGeneratedAttribute]
public virtual void set_To(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_Skip();
    [CompilerGeneratedAttribute]
public virtual void set_Skip(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_Count();
    [CompilerGeneratedAttribute]
public virtual void set_Count(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<FillGapsDays> get_FillGaps();
    [CompilerGeneratedAttribute]
public virtual void set_FillGaps(Nullable`1<FillGapsDays> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsSubscribe();
    [CompilerGeneratedAttribute]
public virtual void set_IsSubscribe(bool value);
    [CompilerGeneratedAttribute]
public virtual long get_TransactionId();
    [CompilerGeneratedAttribute]
public virtual void set_TransactionId(long value);
    [CompilerGeneratedAttribute]
public virtual long get_OriginalTransactionId();
    [CompilerGeneratedAttribute]
public virtual void set_OriginalTransactionId(long value);
    public abstract virtual DataType get_DataType();
    protected BaseSubscriptionMessage CopyTo(BaseSubscriptionMessage destination);
    public virtual string ToString();
}
[DataContractAttribute]
public abstract class StockSharp.Messages.BaseWithdrawOrderCondition : OrderCondition {
    [DataMemberAttribute]
[DisplayAttribute]
public bool IsWithdraw { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public WithdrawInfo WithdrawInfo { get; public set; }
    public sealed virtual bool get_IsWithdraw();
    public sealed virtual void set_IsWithdraw(bool value);
    public sealed virtual WithdrawInfo get_WithdrawInfo();
    public sealed virtual void set_WithdrawInfo(WithdrawInfo value);
}
public static class StockSharp.Messages.BoardCodes : object {
    public static string Associated;
    public static string Test;
    public static string Forts;
    public static string Micex;
    public static string MicexAuct;
    public static string MicexAubb;
    public static string MicexCasf;
    public static string MicexEqbr;
    public static string MicexEqbs;
    public static string MicexEqdp;
    public static string MicexEqeu;
    public static string MicexEqus;
    public static string MicexEqnb;
    public static string MicexEqne;
    public static string MicexEqnl;
    public static string MicexEqno;
    public static string MicexEqob;
    public static string MicexEqos;
    public static string MicexEqov;
    public static string MicexEqlv;
    public static string MicexEqdb;
    public static string MicexEqde;
    public static string MicexEqli;
    public static string MicexEqqi;
    public static string MicexSmal;
    public static string MicexSpob;
    public static string MicexTqbr;
    public static string MicexTqde;
    public static string MicexTqbs;
    public static string MicexTqeu;
    public static string MicexTqus;
    public static string MicexTqnb;
    public static string MicexTqne;
    public static string MicexTqnl;
    public static string MicexTqno;
    public static string MicexTqob;
    public static string MicexTqos;
    public static string MicexTqov;
    public static string MicexTqlv;
    public static string MicexTqli;
    public static string MicexTqqi;
    public static string MicexEqrp;
    public static string MicexPsrp;
    public static string MicexRfnd;
    public static string MicexTadm;
    public static string MicexNadm;
    public static string MicexPsau;
    public static string MicexPaus;
    public static string MicexPsbb;
    public static string MicexPseq;
    public static string MicexPses;
    public static string MicexPseu;
    public static string MicexPsdb;
    public static string MicexPsde;
    public static string MicexPsus;
    public static string MicexPsnb;
    public static string MicexPsne;
    public static string MicexPsnl;
    public static string MicexPsno;
    public static string MicexPsob;
    public static string MicexPsos;
    public static string MicexPsov;
    public static string MicexPslv;
    public static string MicexPsli;
    public static string MicexPsqi;
    public static string MicexRpeu;
    public static string MicexRpma;
    public static string MicexRpmo;
    public static string MicexRpua;
    public static string MicexRpuo;
    public static string MicexRpuq;
    public static string MicexFbcb;
    public static string MicexFbfx;
    public static string MicexIrk2;
    public static string MicexRpqi;
    public static string MicexPteq;
    public static string MicexPtes;
    public static string MicexPteu;
    public static string MicexPtus;
    public static string MicexPtnb;
    public static string MicexPtne;
    public static string MicexPtnl;
    public static string MicexPtno;
    public static string MicexPtob;
    public static string MicexPtos;
    public static string MicexPtov;
    public static string MicexPtlv;
    public static string MicexPtli;
    public static string MicexPtqi;
    public static string MicexScvc;
    public static string MicexRpng;
    public static string MicexRpfg;
    public static string MicexCbcr;
    public static string MicexCred;
    public static string MicexDepz;
    public static string MicexDpvb;
    public static string MicexDpfk;
    public static string MicexDpfo;
    public static string MicexDppf;
    public static string MicexCets;
    public static string MicexAets;
    public static string MicexCngd;
    public static string MicexTran;
    public static string MicexJunior;
    public static string Spb;
    public static string Ux;
    public static string UxStock;
    public static string Cme;
    public static string CmeMini;
    public static string Cce;
    public static string Cbot;
    public static string Nymex;
    public static string Amex;
    public static string Nyse;
    public static string Nasdaq;
    public static string Nqlx;
    public static string Lse;
    public static string Lme;
    public static string Tse;
    public static string Hkex;
    public static string Hkfe;
    public static string Sse;
    public static string Szse;
    public static string Tsx;
    public static string Fwb;
    public static string Asx;
    public static string Nzx;
    public static string Bse;
    public static string Nse;
    public static string Swx;
    public static string Krx;
    public static string Mse;
    public static string Jse;
    public static string Sgx;
    public static string Tsec;
    public static string Pse;
    public static string Klse;
    public static string Idx;
    public static string Set;
    public static string Cse;
    public static string Tase;
    public static string Lmax;
    public static string DukasCopy;
    public static string GainCapital;
    public static string MBTrading;
    public static string TrueFX;
    public static string Integral;
    public static string Cfh;
    public static string Ond;
    public static string Smart;
    public static string Btce;
    public static string BitStamp;
    public static string BtcChina;
    public static string Icbit;
    public static string Finam;
    public static string Mfd;
    public static string Arca;
    public static string Bats;
    public static string Currenex;
    public static string Fxcm;
    public static string Poloniex;
    public static string Kraken;
    public static string Bittrex;
    public static string Bitfinex;
    public static string Coinbase;
    public static string Gdax;
    public static string Bithumb;
    public static string HitBtc;
    public static string OkCoin;
    public static string Coincheck;
    public static string Binance;
    public static string BinanceCoin;
    public static string BinanceFut;
    public static string Bitexbook;
    public static string Bitmex;
    public static string Cex;
    public static string Cryptopia;
    public static string Okex;
    public static string Bitmart;
    public static string Yobit;
    public static string CoinExchange;
    public static string LiveCoin;
    public static string Exmo;
    public static string Deribit;
    public static string Kucoin;
    public static string Liqui;
    public static string Huobi;
    public static string Globex;
    public static string IEX;
    public static string AlphaVantage;
    public static string Bitbank;
    public static string Zaif;
    public static string Quoinex;
    public static string Wiki;
    public static string Idax;
    public static string Digifinex;
    public static string TradeOgre;
    public static string CoinCap;
    public static string Coinigy;
    public static string LBank;
    public static string BitMax;
    public static string BW;
    public static string Bibox;
    public static string CoinBene;
    public static string BitZ;
    public static string ZB;
    public static string Tradier;
    public static string SwSq;
    public static string StockSharp;
    public static string Upbit;
    public static string CoinEx;
    public static string FatBtc;
    public static string Latoken;
    public static string Gopax;
    public static string CoinHub;
    public static string Hotbit;
    public static string Bitalong;
    public static string PrizmBit;
    public static string DigitexFutures;
    public static string Bovespa;
    public static string Bvmt;
    public static string IQFeed;
    public static string IBKR;
    public static string STRLG;
    public static string QNDL;
    public static string FTX;
    public static string Moex;
    public static string QTFD;
    public static string YHF;
    public static string EUREX;
    public static string ByBit;
    public static string ByBitInv;
    public static string ByBitLin;
    public static string ByBitOpt;
    public static string cTrader;
    public static string DevExperts;
    public static string TradingTechnologies;
    public static string GateIO;
    public static string GateIODelivery;
    public static string GateIOPerpetual;
    public static string GateIOOptions;
    public static string Bitget;
    public static string BitgetFut;
}
[DataContractAttribute]
public class StockSharp.Messages.BoardLookupMessage : BaseSubscriptionMessage {
    [CompilerGeneratedAttribute]
private string <Like>k__BackingField;
    [DataMemberAttribute]
public string Like { get; public set; }
    public DataType DataType { get; }
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> From { get; }
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> To { get; }
    [DataMemberAttribute]
public bool IsSubscribe { get; }
    [DataMemberAttribute]
public long OriginalTransactionId { get; }
    [CompilerGeneratedAttribute]
public string get_Like();
    [CompilerGeneratedAttribute]
public void set_Like(string value);
    public virtual DataType get_DataType();
    public virtual Message Clone();
    protected BoardLookupMessage CopyTo(BoardLookupMessage destination);
    public virtual string ToString();
    public virtual Nullable`1<DateTimeOffset> get_From();
    public virtual Nullable`1<DateTimeOffset> get_To();
    public virtual bool get_IsSubscribe();
    public virtual long get_OriginalTransactionId();
}
[DataContractAttribute]
public class StockSharp.Messages.BoardMessage : BaseSubscriptionIdMessage`1<BoardMessage> {
    [CompilerGeneratedAttribute]
private string <ExchangeCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ExpiryTime>k__BackingField;
    private WorkingTime _workingTime;
    private TimeZoneInfo _timeZone;
    [DataMemberAttribute]
[DisplayAttribute]
public string ExchangeCode { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Code { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public TimeSpan ExpiryTime { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public WorkingTime WorkingTime { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
[XmlIgnoreAttribute]
public TimeZoneInfo TimeZone { get; public set; }
    public DataType DataType { get; }
    [CompilerGeneratedAttribute]
public string get_ExchangeCode();
    [CompilerGeneratedAttribute]
public void set_ExchangeCode(string value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ExpiryTime();
    [CompilerGeneratedAttribute]
public void set_ExpiryTime(TimeSpan value);
    public WorkingTime get_WorkingTime();
    public void set_WorkingTime(WorkingTime value);
    public TimeZoneInfo get_TimeZone();
    public void set_TimeZone(TimeZoneInfo value);
    public virtual DataType get_DataType();
    public virtual void CopyTo(BoardMessage destination);
    public virtual string ToString();
}
[DataContractAttribute]
public class StockSharp.Messages.BoardStateMessage : BaseSubscriptionIdMessage`1<BoardStateMessage> {
    [CompilerGeneratedAttribute]
private string <BoardCode>k__BackingField;
    [CompilerGeneratedAttribute]
private SessionStates <State>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ServerTime>k__BackingField;
    public DataType DataType { get; }
    [DataMemberAttribute]
public string BoardCode { get; public set; }
    [DataMemberAttribute]
public SessionStates State { get; public set; }
    [DataMemberAttribute]
public DateTimeOffset ServerTime { get; public set; }
    public virtual DataType get_DataType();
    [CompilerGeneratedAttribute]
public string get_BoardCode();
    [CompilerGeneratedAttribute]
public void set_BoardCode(string value);
    [CompilerGeneratedAttribute]
public SessionStates get_State();
    [CompilerGeneratedAttribute]
public void set_State(SessionStates value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_ServerTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServerTime(DateTimeOffset value);
    public virtual void CopyTo(BoardStateMessage destination);
    public virtual string ToString();
}
public class StockSharp.Messages.BuildCandlesFieldSource : ItemsSourceBase`1<Level1Fields> {
    private static IEnumerable`1<Level1Fields> _values;
    private static BuildCandlesFieldSource();
    protected virtual IEnumerable`1<Level1Fields> GetValues();
}
public class StockSharp.Messages.BuildCandlesFromSource : ItemsSourceBase`1<DataType> {
    protected virtual IEnumerable`1<DataType> GetValues();
}
[DataContractAttribute]
public abstract class StockSharp.Messages.CandleMessage : Message {
    [CompilerGeneratedAttribute]
private SecurityId <SecurityId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <OpenTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <HighTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <LowTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CloseTime>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <OpenPrice>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <HighPrice>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <LowPrice>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <ClosePrice>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <OpenVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <CloseVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <HighVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <LowVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <RelativeVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <TotalPrice>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <TotalVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <BuyVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <SellVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <OpenInterest>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TotalTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <UpTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DownTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private CandleStates <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<CandlePriceLevel> <PriceLevels>k__BackingField;
    private DataType _dataType;
    [CompilerGeneratedAttribute]
private long <OriginalTransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SubscriptionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Int64[] <SubscriptionIds>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <BuildFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SeqNum>k__BackingField;
    [DataMemberAttribute]
[DisplayAttribute]
public SecurityId SecurityId { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public DateTimeOffset OpenTime { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public DateTimeOffset HighTime { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public DateTimeOffset LowTime { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public DateTimeOffset CloseTime { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public decimal OpenPrice { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public decimal HighPrice { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public decimal LowPrice { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public decimal ClosePrice { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> OpenVolume { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> CloseVolume { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> HighVolume { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> LowVolume { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> RelativeVolume { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public decimal TotalPrice { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public decimal TotalVolume { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> BuyVolume { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> SellVolume { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> OpenInterest { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<int> TotalTicks { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<int> UpTicks { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<int> DownTicks { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public CandleStates State { get; public set; }
    [DataMemberAttribute]
[XmlIgnoreAttribute]
public IEnumerable`1<CandlePriceLevel> PriceLevels { get; public set; }
    public object Arg { get; }
    public Type ArgType { get; }
    public DataType DataType { get; public set; }
    [DataMemberAttribute]
public long OriginalTransactionId { get; public set; }
    [XmlIgnoreAttribute]
public long SubscriptionId { get; public set; }
    [XmlIgnoreAttribute]
public Int64[] SubscriptionIds { get; public set; }
    [DataMemberAttribute]
public DataType BuildFrom { get; public set; }
    [DataMemberAttribute]
public long SeqNum { get; public set; }
    private DateTimeOffset StockSharp.Messages.IServerTimeMessage.ServerTime { get; private set; }
    protected CandleMessage(MessageTypes type);
    [CompilerGeneratedAttribute]
public sealed virtual SecurityId get_SecurityId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SecurityId(SecurityId value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_OpenTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OpenTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_HighTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HighTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_LowTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LowTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_CloseTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CloseTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_OpenPrice();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OpenPrice(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_HighPrice();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HighPrice(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_LowPrice();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LowPrice(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_ClosePrice();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClosePrice(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_OpenVolume();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OpenVolume(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_CloseVolume();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CloseVolume(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_HighVolume();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HighVolume(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_LowVolume();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LowVolume(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_RelativeVolume();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RelativeVolume(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_TotalPrice();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TotalPrice(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_TotalVolume();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TotalVolume(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_BuyVolume();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuyVolume(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_SellVolume();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SellVolume(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_OpenInterest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OpenInterest(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TotalTicks();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TotalTicks(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_UpTicks();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UpTicks(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_DownTicks();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DownTicks(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual CandleStates get_State();
    [CompilerGeneratedAttribute]
public sealed virtual void set_State(CandleStates value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<CandlePriceLevel> get_PriceLevels();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PriceLevels(IEnumerable`1<CandlePriceLevel> value);
    public abstract virtual object get_Arg();
    public abstract virtual Type get_ArgType();
    public sealed virtual DataType get_DataType();
    public sealed virtual void set_DataType(DataType value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_OriginalTransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OriginalTransactionId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_SubscriptionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SubscriptionId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual Int64[] get_SubscriptionIds();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SubscriptionIds(Int64[] value);
    [CompilerGeneratedAttribute]
public sealed virtual DataType get_BuildFrom();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildFrom(DataType value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_SeqNum();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SeqNum(long value);
    protected CandleMessage CopyTo(CandleMessage copy);
    public virtual string ToString();
    private sealed virtual override DateTimeOffset StockSharp.Messages.IServerTimeMessage.get_ServerTime();
    private sealed virtual override void StockSharp.Messages.IServerTimeMessage.set_ServerTime(DateTimeOffset value);
}
[DataContractAttribute]
public class StockSharp.Messages.CandlePriceLevel : ValueType {
    [CompilerGeneratedAttribute]
private decimal <Price>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <TotalVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <BuyVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <SellVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BuyCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SellCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<decimal> <BuyVolumes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<decimal> <SellVolumes>k__BackingField;
    [DataMemberAttribute]
public decimal Price { get; public set; }
    [DataMemberAttribute]
public decimal TotalVolume { get; public set; }
    [DataMemberAttribute]
public decimal BuyVolume { get; public set; }
    [DataMemberAttribute]
public decimal SellVolume { get; public set; }
    [DataMemberAttribute]
public int BuyCount { get; public set; }
    [DataMemberAttribute]
public int SellCount { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<decimal> BuyVolumes { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<decimal> SellVolumes { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public decimal get_Price();
    [CompilerGeneratedAttribute]
public void set_Price(decimal value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public decimal get_TotalVolume();
    [CompilerGeneratedAttribute]
public void set_TotalVolume(decimal value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public decimal get_BuyVolume();
    [CompilerGeneratedAttribute]
public void set_BuyVolume(decimal value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public decimal get_SellVolume();
    [CompilerGeneratedAttribute]
public void set_SellVolume(decimal value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_BuyCount();
    [CompilerGeneratedAttribute]
public void set_BuyCount(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_SellCount();
    [CompilerGeneratedAttribute]
public void set_SellCount(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IEnumerable`1<decimal> get_BuyVolumes();
    [CompilerGeneratedAttribute]
public void set_BuyVolumes(IEnumerable`1<decimal> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IEnumerable`1<decimal> get_SellVolumes();
    [CompilerGeneratedAttribute]
public void set_SellVolumes(IEnumerable`1<decimal> value);
}
[DataContractAttribute]
public enum StockSharp.Messages.CandleStates : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static CandleStates None;
    [EnumMemberAttribute]
[DisplayAttribute]
public static CandleStates Active;
    [EnumMemberAttribute]
[DisplayAttribute]
public static CandleStates Finished;
}
[DataContractAttribute]
public class StockSharp.Messages.ChangePasswordMessage : BaseResultMessage`1<ChangePasswordMessage> {
    [CompilerGeneratedAttribute]
private long <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    private SecureString _newPassword;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    private SecureString _oldPassword;
    [DataMemberAttribute]
public long TransactionId { get; public set; }
    [DataMemberAttribute]
[XmlIgnoreAttribute]
public Exception Error { get; public set; }
    [DataMemberAttribute]
public SecureString NewPassword { get; public set; }
    [DataMemberAttribute]
public string UserName { get; public set; }
    [DataMemberAttribute]
public SecureString OldPassword { get; public set; }
    protected ChangePasswordMessage(MessageTypes type);
    [CompilerGeneratedAttribute]
public sealed virtual long get_TransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Error();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Error(Exception value);
    public SecureString get_NewPassword();
    public void set_NewPassword(SecureString value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    public SecureString get_OldPassword();
    public void set_OldPassword(SecureString value);
    protected virtual void CopyTo(ChangePasswordMessage destination);
    public virtual string ToString();
}
public class StockSharp.Messages.ChannelMessageAdapter : MessageAdapterWrapper {
    [CompilerGeneratedAttribute]
private IMessageChannel <InputChannel>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageChannel <OutputChannel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OwnInputChannel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OwnOutputChannel>k__BackingField;
    public IMessageChannel InputChannel { get; }
    public IMessageChannel OutputChannel { get; }
    public bool OwnInputChannel { get; public set; }
    public bool OwnOutputChannel { get; public set; }
    public ChannelMessageAdapter(IMessageAdapter innerAdapter, IMessageChannel inputChannel, IMessageChannel outputChannel);
    [CompilerGeneratedAttribute]
public IMessageChannel get_InputChannel();
    [CompilerGeneratedAttribute]
public IMessageChannel get_OutputChannel();
    [CompilerGeneratedAttribute]
public bool get_OwnInputChannel();
    [CompilerGeneratedAttribute]
public void set_OwnInputChannel(bool value);
    [CompilerGeneratedAttribute]
public bool get_OwnOutputChannel();
    [CompilerGeneratedAttribute]
public void set_OwnOutputChannel(bool value);
    private void OutputChannelOnNewOutMessage(Message message);
    protected virtual void OnInnerAdapterNewOutMessage(Message message);
    private void InputChannelOnNewOutMessage(Message message);
    public virtual void Dispose();
    protected virtual bool OnSendInMessage(Message message);
    public void SendOutMessage(Message message);
    public virtual IMessageChannel Clone();
}
[DataContractAttribute]
public enum StockSharp.Messages.ChannelStates : Enum {
    public int value__;
    [DisplayAttribute]
[EnumMemberAttribute]
public static ChannelStates Stopped;
    [DisplayAttribute]
[EnumMemberAttribute]
public static ChannelStates Stopping;
    [DisplayAttribute]
[EnumMemberAttribute]
public static ChannelStates Starting;
    [DisplayAttribute]
[EnumMemberAttribute]
public static ChannelStates Started;
    [DisplayAttribute]
[EnumMemberAttribute]
public static ChannelStates Suspending;
    [DisplayAttribute]
[EnumMemberAttribute]
public static ChannelStates Suspended;
}
[DataContractAttribute]
public class StockSharp.Messages.CommandMessage : BaseRequestMessage {
    [CompilerGeneratedAttribute]
private CommandTypes <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandScopes <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    private Dictionary`2<string, string> _parameters;
    [DataMemberAttribute]
public CommandTypes Command { get; public set; }
    [DataMemberAttribute]
public CommandScopes Scope { get; public set; }
    [DataMemberAttribute]
public string ObjectId { get; public set; }
    [XmlIgnoreAttribute]
public IDictionary`2<string, string> Parameters { get; }
    public DataType DataType { get; }
    protected CommandMessage(MessageTypes type);
    [CompilerGeneratedAttribute]
public CommandTypes get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(CommandTypes value);
    [CompilerGeneratedAttribute]
public CommandScopes get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(CommandScopes value);
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
    public IDictionary`2<string, string> get_Parameters();
    public virtual Message Clone();
    protected void CopyTo(CommandMessage destination);
    public virtual DataType get_DataType();
    public virtual string ToString();
}
[DataContractAttribute]
public enum StockSharp.Messages.CommandScopes : Enum {
    public int value__;
    [EnumMemberAttribute]
public static CommandScopes Application;
    [EnumMemberAttribute]
public static CommandScopes Adapter;
    [EnumMemberAttribute]
public static CommandScopes Strategy;
    [EnumMemberAttribute]
public static CommandScopes Position;
    [EnumMemberAttribute]
public static CommandScopes Order;
    [EnumMemberAttribute]
public static CommandScopes File;
    [EnumMemberAttribute]
public static CommandScopes FileGroup;
    [EnumMemberAttribute]
public static CommandScopes Product;
    [EnumMemberAttribute]
public static CommandScopes License;
    [EnumMemberAttribute]
public static CommandScopes LicenseFeature;
    [EnumMemberAttribute]
public static CommandScopes ProductCategory;
    [EnumMemberAttribute]
public static CommandScopes ProductPermission;
    [EnumMemberAttribute]
public static CommandScopes ProductFeedback;
}
[DataContractAttribute]
public enum StockSharp.Messages.CommandTypes : Enum {
    public int value__;
    [EnumMemberAttribute]
public static CommandTypes Start;
    [EnumMemberAttribute]
public static CommandTypes Stop;
    [EnumMemberAttribute]
public static CommandTypes Enable;
    [EnumMemberAttribute]
public static CommandTypes Disable;
    [EnumMemberAttribute]
public static CommandTypes Update;
    [EnumMemberAttribute]
public static CommandTypes Add;
    [EnumMemberAttribute]
public static CommandTypes Remove;
    [EnumMemberAttribute]
public static CommandTypes Get;
    [EnumMemberAttribute]
public static CommandTypes ClosePosition;
    [EnumMemberAttribute]
public static CommandTypes CancelOrders;
    [EnumMemberAttribute]
public static CommandTypes RegisterOrder;
    [EnumMemberAttribute]
public static CommandTypes CancelOrder;
    [EnumMemberAttribute]
public static CommandTypes Restart;
    [EnumMemberAttribute]
public static CommandTypes Share;
    [EnumMemberAttribute]
public static CommandTypes UnShare;
    [EnumMemberAttribute]
public static CommandTypes List;
}
[DataContractAttribute]
public enum StockSharp.Messages.ConnectionStates : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static ConnectionStates Disconnected;
    [EnumMemberAttribute]
[DisplayAttribute]
public static ConnectionStates Disconnecting;
    [EnumMemberAttribute]
[DisplayAttribute]
public static ConnectionStates Connecting;
    [EnumMemberAttribute]
[DisplayAttribute]
public static ConnectionStates Connected;
    [EnumMemberAttribute]
[DisplayAttribute]
public static ConnectionStates Failed;
}
[DataContractAttribute]
public class StockSharp.Messages.ConnectMessage : BaseConnectionMessage {
    [CompilerGeneratedAttribute]
private string <ClientVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [DataMemberAttribute]
public string ClientVersion { get; public set; }
    [DataMemberAttribute]
public string SessionId { get; public set; }
    [DataMemberAttribute]
public string Language { get; public set; }
    private DateTimeOffset StockSharp.Messages.IServerTimeMessage.ServerTime { get; private set; }
    [CompilerGeneratedAttribute]
public string get_ClientVersion();
    [CompilerGeneratedAttribute]
public void set_ClientVersion(string value);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    public virtual Message Clone();
    private sealed virtual override DateTimeOffset StockSharp.Messages.IServerTimeMessage.get_ServerTime();
    private sealed virtual override void StockSharp.Messages.IServerTimeMessage.set_ServerTime(DateTimeOffset value);
}
[DataContractAttribute]
public class StockSharp.Messages.DataType : Equatable`1<DataType> {
    private bool _immutable;
    [CompilerGeneratedAttribute]
private static DataType <Level1>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <MarketDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <FilteredMarketDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <PositionChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <News>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <Securities>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <Ticks>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <OrderLog>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <Transactions>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <Board>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <BoardState>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <Users>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <TimeFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <CandleTimeFrame>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <CandleVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <CandleTick>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <CandleRange>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <CandleRenko>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <CandlePnF>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <SecurityLegs>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <RemoteFile>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <SecurityMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private static DataType <AvailableDataInfo>k__BackingField;
    private Type _messageType;
    private object _arg;
    private int _hashCode;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private bool _isSecurityRequired;
    [CompilerGeneratedAttribute]
private static ISet`1<DataType> <CandleSources>k__BackingField;
    public static DataType Level1 { get; }
    public static DataType MarketDepth { get; }
    public static DataType FilteredMarketDepth { get; }
    public static DataType PositionChanges { get; }
    public static DataType News { get; }
    public static DataType Securities { get; }
    public static DataType Ticks { get; }
    public static DataType OrderLog { get; }
    public static DataType Transactions { get; }
    public static DataType Board { get; }
    public static DataType BoardState { get; }
    public static DataType Users { get; }
    public static DataType TimeFrames { get; }
    public static DataType CandleTimeFrame { get; }
    public static DataType CandleVolume { get; }
    public static DataType CandleTick { get; }
    public static DataType CandleRange { get; }
    public static DataType CandleRenko { get; }
    public static DataType CandlePnF { get; }
    public static DataType SecurityLegs { get; }
    public static DataType Command { get; }
    public static DataType RemoteFile { get; }
    public static DataType SecurityMapping { get; }
    public static DataType AvailableDataInfo { get; }
    [DataMemberAttribute]
public Type MessageType { get; public set; }
    [DataMemberAttribute]
public object Arg { get; public set; }
    public string Name { get; public set; }
    public bool IsCandles { get; }
    public bool IsTFCandles { get; }
    public bool IsPortfolio { get; }
    public bool IsMarketData { get; }
    public bool IsSecurityRequired { get; }
    public bool IsNonSecurity { get; }
    public bool IsCandleSource { get; }
    public static ISet`1<DataType> CandleSources { get; }
    private static DataType();
    public static DataType Create(object arg, bool isSecurityRequired);
    public static DataType Create(Type messageType, object arg);
    public static DataType Create(Type messageType, object arg, bool isSecurityRequired);
    public DataType Immutable();
    private void CheckImmutable();
    private static DataType CreateImmutable(object arg);
    [CompilerGeneratedAttribute]
public static DataType get_Level1();
    [CompilerGeneratedAttribute]
public static DataType get_MarketDepth();
    [CompilerGeneratedAttribute]
public static DataType get_FilteredMarketDepth();
    [CompilerGeneratedAttribute]
public static DataType get_PositionChanges();
    [CompilerGeneratedAttribute]
public static DataType get_News();
    [CompilerGeneratedAttribute]
public static DataType get_Securities();
    [CompilerGeneratedAttribute]
public static DataType get_Ticks();
    [CompilerGeneratedAttribute]
public static DataType get_OrderLog();
    [CompilerGeneratedAttribute]
public static DataType get_Transactions();
    [CompilerGeneratedAttribute]
public static DataType get_Board();
    [CompilerGeneratedAttribute]
public static DataType get_BoardState();
    [CompilerGeneratedAttribute]
public static DataType get_Users();
    [CompilerGeneratedAttribute]
public static DataType get_TimeFrames();
    [CompilerGeneratedAttribute]
public static DataType get_CandleTimeFrame();
    [CompilerGeneratedAttribute]
public static DataType get_CandleVolume();
    [CompilerGeneratedAttribute]
public static DataType get_CandleTick();
    [CompilerGeneratedAttribute]
public static DataType get_CandleRange();
    [CompilerGeneratedAttribute]
public static DataType get_CandleRenko();
    [CompilerGeneratedAttribute]
public static DataType get_CandlePnF();
    [CompilerGeneratedAttribute]
public static DataType get_SecurityLegs();
    [CompilerGeneratedAttribute]
public static DataType get_Command();
    [CompilerGeneratedAttribute]
public static DataType get_RemoteFile();
    [CompilerGeneratedAttribute]
public static DataType get_SecurityMapping();
    [CompilerGeneratedAttribute]
public static DataType get_AvailableDataInfo();
    public static DataType TimeFrame(TimeSpan tf);
    public static DataType Portfolio(string portfolioName);
    public Type get_MessageType();
    public void set_MessageType(Type value);
    public object get_Arg();
    public void set_Arg(object value);
    protected virtual bool OnEquals(DataType other);
    private void ReInitHashCode();
    public virtual int GetHashCode();
    public virtual DataType Clone();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public DataType SetName(string name);
    public virtual string ToString();
    public bool get_IsCandles();
    public bool get_IsTFCandles();
    public bool get_IsPortfolio();
    public bool get_IsMarketData();
    public bool get_IsSecurityRequired();
    public bool get_IsNonSecurity();
    public bool get_IsCandleSource();
    [CompilerGeneratedAttribute]
public static ISet`1<DataType> get_CandleSources();
    private static object TryParseArg(object arg);
    public sealed virtual void Load(SettingsStorage storage);
    public sealed virtual void Save(SettingsStorage storage);
}
[DataContractAttribute]
public class StockSharp.Messages.DisconnectMessage : BaseConnectionMessage {
    public virtual Message Clone();
}
public class StockSharp.Messages.EmulationStateMessage : Message {
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StopDate>k__BackingField;
    [CompilerGeneratedAttribute]
private ChannelStates <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    public DateTimeOffset StartDate { get; public set; }
    public DateTimeOffset StopDate { get; public set; }
    public ChannelStates State { get; public set; }
    public Exception Error { get; public set; }
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StartDate();
    [CompilerGeneratedAttribute]
public void set_StartDate(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StopDate();
    [CompilerGeneratedAttribute]
public void set_StopDate(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public ChannelStates get_State();
    [CompilerGeneratedAttribute]
public void set_State(ChannelStates value);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Error();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Error(Exception value);
    public virtual Message Clone();
}
[DataContractAttribute]
public class StockSharp.Messages.ErrorMessage : Message {
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private long <OriginalTransactionId>k__BackingField;
    [DataMemberAttribute]
[XmlIgnoreAttribute]
public Exception Error { get; public set; }
    [DataMemberAttribute]
public long OriginalTransactionId { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Error();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Error(Exception value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_OriginalTransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OriginalTransactionId(long value);
    public virtual string ToString();
    public virtual Message Clone();
}
[DataContractAttribute]
public class StockSharp.Messages.ExecutionMessage : BaseSubscriptionIdMessage`1<ExecutionMessage> {
    [CompilerGeneratedAttribute]
private SecurityId <SecurityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PortfolioName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrokerCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DepoName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ServerTime>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCancellation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <OrderId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderStringId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderBoardId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasOrderInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <OrderPrice>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <OrderVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <TradeVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <VisibleVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Sides <Side>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Balance>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<OrderTypes> <OrderType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <OrderStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<OrderStates> <OrderState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SystemComment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ExpiryDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeInForce> <TimeInForce>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <TradeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TradeStringId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <TradePrice>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <TradeStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Sides> <OriginSide>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <OpenInterest>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderCondition <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsUpTick>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Commission>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommissionCurrency>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Latency>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Slippage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserOrderId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StrategyId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CurrencyTypes> <Currency>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <PnL>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsMarketMaker>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MarginModes> <MarginMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsManual>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <AveragePrice>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Yield>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <MinVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<OrderPositionEffects> <PositionEffect>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PostOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Initiator>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SeqNum>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <BuildFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Leverage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <OrderBuyId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <OrderSellId>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <DataTypeEx>k__BackingField;
    private OrderStates StockSharp.Messages.IOrderMessage.State { get; }
    private decimal StockSharp.Messages.IOrderMessage.Balance { get; }
    private decimal StockSharp.Messages.IOrderMessage.Volume { get; }
    [DataMemberAttribute]
[DisplayAttribute]
public SecurityId SecurityId { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string PortfolioName { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string ClientCode { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string BrokerCode { get; public set; }
    [DisplayAttribute]
public string DepoName { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public DateTimeOffset ServerTime { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public long TransactionId { get; public set; }
    [DataMemberAttribute]
[ObsoleteAttribute("Use DataTypeEx property.")]
[BrowsableAttribute("False")]
public Nullable`1<ExecutionTypes> ExecutionType { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public bool IsCancellation { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<long> OrderId { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string OrderStringId { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string OrderBoardId { get; public set; }
    public bool HasOrderInfo { get; public set; }
    public bool HasTradeInfo { get; }
    [DataMemberAttribute]
[DisplayAttribute]
public decimal OrderPrice { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> OrderVolume { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> TradeVolume { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> VisibleVolume { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Sides Side { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> Balance { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<OrderTypes> OrderType { get; public set; }
    [DataMemberAttribute]
[BrowsableAttribute("False")]
public Nullable`1<long> OrderStatus { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<OrderStates> OrderState { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Comment { get; public set; }
    [DisplayAttribute]
public string SystemComment { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<bool> IsSystem { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<DateTimeOffset> ExpiryDate { get; public set; }
    [DisplayAttribute]
public Nullable`1<TimeInForce> TimeInForce { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<long> TradeId { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string TradeStringId { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> TradePrice { get; public set; }
    [DataMemberAttribute]
[BrowsableAttribute("False")]
public Nullable`1<long> TradeStatus { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<Sides> OriginSide { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> OpenInterest { get; public set; }
    [DisplayAttribute]
[XmlIgnoreAttribute]
public Exception Error { get; public set; }
    [DisplayAttribute]
[XmlIgnoreAttribute]
public OrderCondition Condition { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<bool> IsUpTick { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> Commission { get; public set; }
    public string CommissionCurrency { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<TimeSpan> Latency { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> Slippage { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string UserOrderId { get; public set; }
    [DataMemberAttribute]
public string StrategyId { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<CurrencyTypes> Currency { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> PnL { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> Position { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<bool> IsMarketMaker { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<MarginModes> MarginMode { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<bool> IsManual { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> AveragePrice { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> Yield { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> MinVolume { get; public set; }
    [DataMemberAttribute]
public Nullable`1<OrderPositionEffects> PositionEffect { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> PostOnly { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> Initiator { get; public set; }
    [DataMemberAttribute]
public long SeqNum { get; public set; }
    [DataMemberAttribute]
public DataType BuildFrom { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> Leverage { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> OrderBuyId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> OrderSellId { get; public set; }
    public DataType DataType { get; }
    public DataType DataTypeEx { get; public set; }
    private Nullable`1<long> StockSharp.Messages.IComplexIdMessage.Id { get; }
    private string StockSharp.Messages.IComplexIdMessage.StringId { get; }
    private decimal StockSharp.Messages.ITickTradeMessage.Price { get; }
    private decimal StockSharp.Messages.ITickTradeMessage.Volume { get; }
    private Nullable`1<long> StockSharp.Messages.ISystemMessage.Status { get; }
    private IOrderMessage StockSharp.Messages.IOrderLogMessage.Order { get; }
    private ITickTradeMessage StockSharp.Messages.IOrderLogMessage.Trade { get; }
    private Nullable`1<OrderTypes> StockSharp.Messages.IOrderMessage.Type { get; }
    private decimal StockSharp.Messages.IOrderMessage.Price { get; }
    private sealed virtual override OrderStates StockSharp.Messages.IOrderMessage.get_State();
    private sealed virtual override decimal StockSharp.Messages.IOrderMessage.get_Balance();
    private sealed virtual override decimal StockSharp.Messages.IOrderMessage.get_Volume();
    [CompilerGeneratedAttribute]
public sealed virtual SecurityId get_SecurityId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SecurityId(SecurityId value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PortfolioName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PortfolioName(string value);
    [CompilerGeneratedAttribute]
public string get_ClientCode();
    [CompilerGeneratedAttribute]
public void set_ClientCode(string value);
    [CompilerGeneratedAttribute]
public string get_BrokerCode();
    [CompilerGeneratedAttribute]
public void set_BrokerCode(string value);
    [CompilerGeneratedAttribute]
public string get_DepoName();
    [CompilerGeneratedAttribute]
public void set_DepoName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_ServerTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServerTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_TransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionId(long value);
    public Nullable`1<ExecutionTypes> get_ExecutionType();
    public void set_ExecutionType(Nullable`1<ExecutionTypes> value);
    [CompilerGeneratedAttribute]
public bool get_IsCancellation();
    [CompilerGeneratedAttribute]
public void set_IsCancellation(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_OrderId();
    [CompilerGeneratedAttribute]
public void set_OrderId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_OrderStringId();
    [CompilerGeneratedAttribute]
public void set_OrderStringId(string value);
    [CompilerGeneratedAttribute]
public string get_OrderBoardId();
    [CompilerGeneratedAttribute]
public void set_OrderBoardId(string value);
    [CompilerGeneratedAttribute]
public bool get_HasOrderInfo();
    [CompilerGeneratedAttribute]
public void set_HasOrderInfo(bool value);
    public bool get_HasTradeInfo();
    [CompilerGeneratedAttribute]
public decimal get_OrderPrice();
    [CompilerGeneratedAttribute]
public void set_OrderPrice(decimal value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_OrderVolume();
    [CompilerGeneratedAttribute]
public void set_OrderVolume(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_TradeVolume();
    [CompilerGeneratedAttribute]
public void set_TradeVolume(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_VisibleVolume();
    [CompilerGeneratedAttribute]
public void set_VisibleVolume(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Sides get_Side();
    [CompilerGeneratedAttribute]
public void set_Side(Sides value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Balance();
    [CompilerGeneratedAttribute]
public void set_Balance(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<OrderTypes> get_OrderType();
    [CompilerGeneratedAttribute]
public void set_OrderType(Nullable`1<OrderTypes> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_OrderStatus();
    [CompilerGeneratedAttribute]
public void set_OrderStatus(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<OrderStates> get_OrderState();
    [CompilerGeneratedAttribute]
public void set_OrderState(Nullable`1<OrderStates> value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public string get_SystemComment();
    [CompilerGeneratedAttribute]
public void set_SystemComment(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsSystem();
    [CompilerGeneratedAttribute]
public void set_IsSystem(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_ExpiryDate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExpiryDate(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeInForce> get_TimeInForce();
    [CompilerGeneratedAttribute]
public void set_TimeInForce(Nullable`1<TimeInForce> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_TradeId();
    [CompilerGeneratedAttribute]
public void set_TradeId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_TradeStringId();
    [CompilerGeneratedAttribute]
public void set_TradeStringId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_TradePrice();
    [CompilerGeneratedAttribute]
public void set_TradePrice(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_TradeStatus();
    [CompilerGeneratedAttribute]
public void set_TradeStatus(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Sides> get_OriginSide();
    [CompilerGeneratedAttribute]
public void set_OriginSide(Nullable`1<Sides> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_OpenInterest();
    [CompilerGeneratedAttribute]
public void set_OpenInterest(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Error();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Error(Exception value);
    [CompilerGeneratedAttribute]
public OrderCondition get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(OrderCondition value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsUpTick();
    [CompilerGeneratedAttribute]
public void set_IsUpTick(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Commission();
    [CompilerGeneratedAttribute]
public void set_Commission(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public string get_CommissionCurrency();
    [CompilerGeneratedAttribute]
public void set_CommissionCurrency(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Latency();
    [CompilerGeneratedAttribute]
public void set_Latency(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Slippage();
    [CompilerGeneratedAttribute]
public void set_Slippage(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public string get_UserOrderId();
    [CompilerGeneratedAttribute]
public void set_UserOrderId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StrategyId();
    [CompilerGeneratedAttribute]
public void set_StrategyId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CurrencyTypes> get_Currency();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Currency(Nullable`1<CurrencyTypes> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_PnL();
    [CompilerGeneratedAttribute]
public void set_PnL(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsMarketMaker();
    [CompilerGeneratedAttribute]
public void set_IsMarketMaker(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<MarginModes> get_MarginMode();
    [CompilerGeneratedAttribute]
public void set_MarginMode(Nullable`1<MarginModes> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsManual();
    [CompilerGeneratedAttribute]
public void set_IsManual(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_AveragePrice();
    [CompilerGeneratedAttribute]
public void set_AveragePrice(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<decimal> get_Yield();
    [CompilerGeneratedAttribute]
public void set_Yield(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_MinVolume();
    [CompilerGeneratedAttribute]
public void set_MinVolume(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<OrderPositionEffects> get_PositionEffect();
    [CompilerGeneratedAttribute]
public void set_PositionEffect(Nullable`1<OrderPositionEffects> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PostOnly();
    [CompilerGeneratedAttribute]
public void set_PostOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Initiator();
    [CompilerGeneratedAttribute]
public void set_Initiator(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_SeqNum();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SeqNum(long value);
    [CompilerGeneratedAttribute]
public sealed virtual DataType get_BuildFrom();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildFrom(DataType value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Leverage();
    [CompilerGeneratedAttribute]
public void set_Leverage(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_OrderBuyId();
    [CompilerGeneratedAttribute]
public void set_OrderBuyId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_OrderSellId();
    [CompilerGeneratedAttribute]
public void set_OrderSellId(Nullable`1<long> value);
    public virtual DataType get_DataType();
    [CompilerGeneratedAttribute]
public DataType get_DataTypeEx();
    [CompilerGeneratedAttribute]
public void set_DataTypeEx(DataType value);
    private sealed virtual override Nullable`1<long> StockSharp.Messages.IComplexIdMessage.get_Id();
    private sealed virtual override string StockSharp.Messages.IComplexIdMessage.get_StringId();
    private sealed virtual override decimal StockSharp.Messages.ITickTradeMessage.get_Price();
    private sealed virtual override decimal StockSharp.Messages.ITickTradeMessage.get_Volume();
    private sealed virtual override Nullable`1<long> StockSharp.Messages.ISystemMessage.get_Status();
    private sealed virtual override IOrderMessage StockSharp.Messages.IOrderLogMessage.get_Order();
    private sealed virtual override ITickTradeMessage StockSharp.Messages.IOrderLogMessage.get_Trade();
    private sealed virtual override Nullable`1<OrderTypes> StockSharp.Messages.IOrderMessage.get_Type();
    private sealed virtual override decimal StockSharp.Messages.IOrderMessage.get_Price();
    public virtual string ToString();
    public virtual void CopyTo(ExecutionMessage destination);
}
[DataContractAttribute]
public enum StockSharp.Messages.ExecutionTypes : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ExecutionTypes Tick;
    [EnumMemberAttribute]
public static ExecutionTypes Transaction;
    [EnumMemberAttribute]
[ObsoleteAttribute]
public static ExecutionTypes Obsolete;
    [EnumMemberAttribute]
public static ExecutionTypes OrderLog;
}
[ExtensionAttribute]
public static class StockSharp.Messages.Extensions : object {
    private static StateChangeValidator`1<OrderStates> _orderStateValidator;
    private static StateChangeValidator`1<ChannelStates> _channelStateValidator;
    private static CachedSynchronizedSet`1<MessageTypes> _transactionalTypes;
    private static CachedSynchronizedSet`1<MessageTypes> _marketDataTypes;
    private static SynchronizedDictionary`2<Type, Type> _candleArgTypes;
    private static SynchronizedDictionary`2<Type, Func`2<object, bool>> _candleArgValidators;
    private static CachedSynchronizedPairSet`2<MessageTypes, Type> _candleDataTypes;
    private static SynchronizedPairSet`2<MessageTypes, Type> _messageTypeMap;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static SynchronizedDictionary`2<Type, ValueTuple`2<Func`2<string, object>, Func`2<object, string>>> _dataTypeArgConverters;
    private static SynchronizedPairSet`2<DataType, string> _fileNames;
    [CompilerGeneratedAttribute]
private static CachedSynchronizedSet`1<Level1Fields> <LastTradeFields>k__BackingField;
    [CompilerGeneratedAttribute]
private static CachedSynchronizedSet`1<Level1Fields> <BestBidFields>k__BackingField;
    [CompilerGeneratedAttribute]
private static CachedSynchronizedSet`1<Level1Fields> <BestAskFields>k__BackingField;
    private static string _dateFormat;
    private static string _timeFormat;
    public static IEnumerable`1<int> AnyDepths;
    public static string NewsStockSharpSource;
    public static string SimulatorPortfolioName;
    public static string AnonymousPortfolioName;
    [CompilerGeneratedAttribute]
private static SecurityMessage <AllSecurity>k__BackingField;
    public static SecurityLookupMessage LookupAllCriteriaMessage;
    private static SynchronizedDictionary`2<DataType, MessageTypes> _messageTypes;
    public static DateTimeOffset Today;
    private static SecurityIdGenerator _defaultGenerator;
    public static string AllSecurityId;
    private static WorkingTime _time;
    private static long _weekTf;
    private static WorkingTime _allRange;
    private static SynchronizedDictionary`2<Type, IEnumerable`1<PropertyInfo>> _basicSettingsCache;
    [ObsoleteAttribute]
private static SynchronizedPairSet`2<MarketDataTypes, ValueTuple`2<MessageTypes, object>> _messageTypeMapOld;
    public static IEnumerable`1<MessageTypes> TransactionalMessageTypes { get; }
    public static IEnumerable`1<MessageTypes> MarketDataMessageTypes { get; }
    public static IEnumerable`1<Type> AllCandleTypes { get; }
    public static CachedSynchronizedSet`1<Level1Fields> LastTradeFields { get; }
    public static CachedSynchronizedSet`1<Level1Fields> BestBidFields { get; }
    public static CachedSynchronizedSet`1<Level1Fields> BestAskFields { get; }
    public static SecurityMessage AllSecurity { get; }
    private static Extensions();
    [ExtensionAttribute]
public static PositionChangeMessage CreatePortfolioChangeMessage(IMessageAdapter adapter, string pfName);
    [ExtensionAttribute]
public static PositionChangeMessage CreatePositionChangeMessage(IMessageAdapter adapter, string pfName, SecurityId securityId, string depoName);
    [ExtensionAttribute]
public static Nullable`1<QuoteChange> GetBestBid(IOrderBookMessage message);
    [ExtensionAttribute]
public static Nullable`1<QuoteChange> GetBestAsk(IOrderBookMessage message);
    [ExtensionAttribute]
public static Nullable`1<decimal> GetSpreadMiddle(IOrderBookMessage message, Nullable`1<decimal> priceStep);
    [ExtensionAttribute]
public static Nullable`1<decimal> GetPrice(IOrderBookMessage message, Nullable`1<Sides> side);
    [ExtensionAttribute]
public static Nullable`1<decimal> GetSpreadMiddle(Level1ChangeMessage message, Nullable`1<decimal> priceStep);
    [ExtensionAttribute]
public static Nullable`1<decimal> GetSpreadMiddle(Nullable`1<decimal> bestBidPrice, Nullable`1<decimal> bestAskPrice, Nullable`1<decimal> priceStep);
    [ExtensionAttribute]
public static decimal GetSpreadMiddle(decimal bestBidPrice, decimal bestAskPrice, Nullable`1<decimal> priceStep);
    [ExtensionAttribute]
public static Nullable`1<decimal> GetLastTradePrice(Level1ChangeMessage message);
    [ExtensionAttribute]
public static ExecutionMessage CreateReply(OrderMessage message, Exception error);
    [ExtensionAttribute]
public static ExecutionMessage CreateOrderReply(long transactionId, DateTimeOffset serverTime);
    [ExtensionAttribute]
public static DateTimeOffset GetServerTime(Message message);
    [ExtensionAttribute]
public static bool TryGetServerTime(Message message, DateTimeOffset& serverTime);
    [ExtensionAttribute]
public static MessageTypeInfo ToInfo(MessageTypes type, Nullable`1<bool> isMarketData);
    public static IEnumerable`1<MessageTypes> get_TransactionalMessageTypes();
    [ExtensionAttribute]
public static void AddTransactionalSupport(MessageAdapter adapter);
    [ExtensionAttribute]
public static void RemoveTransactionalSupport(MessageAdapter adapter);
    public static IEnumerable`1<MessageTypes> get_MarketDataMessageTypes();
    [ExtensionAttribute]
public static void AddMarketDataSupport(MessageAdapter adapter);
    [ExtensionAttribute]
public static void RemoveMarketDataSupport(MessageAdapter adapter);
    private static Nullable`1<bool> IsMarketData(MessageTypes type);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static void AddSupportedMessage(MessageAdapter adapter, MessageTypes type);
    [ExtensionAttribute]
public static void AddSupportedMessage(MessageAdapter adapter, MessageTypes type, Nullable`1<bool> isMarketData);
    [ExtensionAttribute]
public static void AddSupportedMessage(MessageAdapter adapter, MessageTypeInfo info);
    [ExtensionAttribute]
public static void RemoveSupportedMessage(MessageAdapter adapter, MessageTypes type);
    [ExtensionAttribute]
public static bool IsMessageSupported(IMessageAdapter adapter, MessageTypes type);
    [ExtensionAttribute]
public static void AddSupportedMarketDataType(MessageAdapter adapter, DataType dataType);
    [ExtensionAttribute]
public static void RemoveSupportedMarketDataType(MessageAdapter adapter, DataType type);
    [ExtensionAttribute]
public static void AddSupportedResultMessage(MessageAdapter adapter, MessageTypes type);
    [ExtensionAttribute]
public static void RemoveSupportedResultMessage(MessageAdapter adapter, MessageTypes type);
    [ExtensionAttribute]
public static bool IsResultMessageSupported(IMessageAdapter adapter, MessageTypes type);
    [ExtensionAttribute]
public static Type GetCandleArgType(Type candleMessageType);
    [ExtensionAttribute]
public static bool ValidateCandleArg(Type candleMessageType, object value);
    [ExtensionAttribute]
public static bool IsCandle(MessageTypes type);
    [ExtensionAttribute]
public static MessageTypes ToMessageType(Type type);
    [ExtensionAttribute]
public static Type ToMessageType(MessageTypes type);
    [ExtensionAttribute]
public static Type ToCandleMessageType(MessageTypes type);
    [ExtensionAttribute]
public static object ToDataTypeArg(Type messageType, string str);
    [ExtensionAttribute]
public static string DataTypeArgToString(DataType dataType);
    [ExtensionAttribute]
public static string DataTypeArgToString(Type messageType, object arg);
    [ExtensionAttribute]
public static DataType FileNameToDataType(string fileName);
    [ExtensionAttribute]
public static string DataTypeToFileName(DataType dataType);
    [ExtensionAttribute]
public static bool IsStorageSupported(DataType dataType);
    public static IEnumerable`1<Type> get_AllCandleTypes();
    public static void RegisterCandleType(Type messageType, MessageTypes type, MarketDataTypes dataType, string fileName, Func`2<string, TArg> argParse, Func`2<TArg, string> argToString, Func`2<TArg, bool> argValidator);
    [ExtensionAttribute]
public static Type ToCandleMessage(MessageTypes type);
    [ExtensionAttribute]
public static bool IsCandlesSupported(IMessageAdapter adapter, MarketDataMessage subscription);
    [ExtensionAttribute]
public static IEnumerable`1<TimeSpan> GetTimeFrames(IMessageAdapter adapter, SecurityId securityId, Nullable`1<DateTimeOffset> from, Nullable`1<DateTimeOffset> to);
    [ExtensionAttribute]
public static IEnumerable`1<TArg> GetCandleArgs(IMessageAdapter adapter, Type candleType, SecurityId securityId, Nullable`1<DateTimeOffset> from, Nullable`1<DateTimeOffset> to);
    [ExtensionAttribute]
public static DataType ToDataType(string type, string arg);
    [ExtensionAttribute]
public static ValueTuple`2<string, string> FormatToString(DataType dataType);
    [ExtensionAttribute]
public static DataType ToDataType(ExecutionTypes type);
    [ExtensionAttribute]
public static ExecutionTypes ToExecutionType(DataType type);
    [ExtensionAttribute]
public static bool IsMarketDataTypeSupported(IMessageAdapter adapter, DataType type);
    [ExtensionAttribute]
public static void RemoveSupportedAllMarketDataTypes(MessageAdapter adapter);
    [ExtensionAttribute]
public static bool IsCandleMessage(Type messageType);
    [ExtensionAttribute]
public static bool HasOrderInfo(ExecutionMessage message);
    [ExtensionAttribute]
public static bool HasTradeInfo(ExecutionMessage message);
    [ExtensionAttribute]
public static ErrorMessage ToErrorMessage(string description);
    [ExtensionAttribute]
public static ErrorMessage ToErrorMessage(Exception error, long originalTransactionId);
    [ExtensionAttribute]
public static bool IsObsolete(PositionChangeTypes type);
    [ExtensionAttribute]
public static bool IsObsolete(Level1Fields field);
    [ExtensionAttribute]
public static void TryInitLocalTime(Message message, ILogSource source);
    [ExtensionAttribute]
public static MarketDataMessage ValidateBounds(MarketDataMessage message);
    [CompilerGeneratedAttribute]
public static CachedSynchronizedSet`1<Level1Fields> get_LastTradeFields();
    [ExtensionAttribute]
public static bool IsLastTradeField(Level1Fields field);
    [CompilerGeneratedAttribute]
public static CachedSynchronizedSet`1<Level1Fields> get_BestBidFields();
    [ExtensionAttribute]
public static bool IsBestBidField(Level1Fields field);
    [CompilerGeneratedAttribute]
public static CachedSynchronizedSet`1<Level1Fields> get_BestAskFields();
    [ExtensionAttribute]
public static bool IsBestAskField(Level1Fields field);
    [ExtensionAttribute]
public static SecurityMessage FillDefaultCryptoFields(SecurityId secId);
    [ExtensionAttribute]
public static SecurityMessage FillDefaultCryptoFields(SecurityMessage message);
    [ExtensionAttribute]
public static string GetPreferredLanguage(Nullable`1<MessageAdapterCategories> categories);
    [ExtensionAttribute]
public static bool IsOrderLogRegistered(ExecutionMessage item);
    [ExtensionAttribute]
public static bool IsOrderLogCanceled(ExecutionMessage item);
    [ExtensionAttribute]
public static bool IsOrderLogMatched(ExecutionMessage item);
    [ExtensionAttribute]
public static WorkingTimePeriod GetPeriod(WorkingTime time, DateTime date);
    [ExtensionAttribute]
public static string EncodeToString(IEnumerable`1<WorkingTimePeriod> periods);
    [ExtensionAttribute]
public static IEnumerable`1<WorkingTimePeriod> DecodeToPeriods(string input);
    [ExtensionAttribute]
public static string EncodeToString(IDictionary`2<DateTime, Range`1[]> specialDays);
    [ExtensionAttribute]
public static IDictionary`2<DateTime, Range`1[]> DecodeToSpecialDays(string input);
    [ExtensionAttribute]
public static bool IsMarketData(IMessageAdapter adapter);
    [ExtensionAttribute]
public static bool IsTransactional(IMessageAdapter adapter);
    [ExtensionAttribute]
private static bool IsOrderConditionOf(IMessageAdapter adapter, Type interfaceType);
    [ExtensionAttribute]
public static bool IsSupportStopLoss(IMessageAdapter adapter);
    [ExtensionAttribute]
public static bool IsSupportTakeProfit(IMessageAdapter adapter);
    [ExtensionAttribute]
public static bool IsSupportWithdraw(IMessageAdapter adapter);
    [ExtensionAttribute]
public static void SetSecurityCode(SecurityMessage message, string secCode);
    [ExtensionAttribute]
public static SecurityId SetNativeId(SecurityId secId, object nativeId);
    [ExtensionAttribute]
public static void SetSecurityTypes(SecurityLookupMessage message, Nullable`1<SecurityTypes> type, IEnumerable`1<SecurityTypes> types);
    [ExtensionAttribute]
public static HashSet`1<SecurityTypes> GetSecurityTypes(SecurityLookupMessage message);
    [ExtensionAttribute]
public static IMessageAdapter FindById(IEnumerable`1<IMessageAdapter> adapters, Guid id);
    [ExtensionAttribute]
public static IMessageAdapter CreateAdapter(Type adapterType);
    [ExtensionAttribute]
public static IMessageAdapter CreateAdapter(Type adapterType, IdGenerator idGenerator);
    [ExtensionAttribute]
public static TAdapter TryRemoveWrapper(IMessageAdapter adapter);
    [ExtensionAttribute]
public static TAdapter FindAdapter(IMessageAdapter adapter);
    [ExtensionAttribute]
public static TAdapter FindAdapter(IMessageAdapterWrapper wrapper);
    [ExtensionAttribute]
public static bool IsOk(SubscriptionResponseMessage message);
    [ExtensionAttribute]
public static bool IsNotSupported(SubscriptionResponseMessage message);
    [ExtensionAttribute]
public static SubscriptionResponseMessage CreateNotSupported(long id);
    [ExtensionAttribute]
public static SubscriptionResponseMessage CreateSubscriptionResponse(long id, Exception error);
    [ExtensionAttribute]
public static SubscriptionResponseMessage CreateResponse(ISubscriptionMessage message, Exception error);
    [ExtensionAttribute]
public static Message CreateResult(ISubscriptionMessage message);
    [ExtensionAttribute]
public static Nullable`1<int> NearestSupportedDepth(IMessageAdapter adapter, int depth);
    [ExtensionAttribute]
public static IOrderLogMarketDepthBuilder CreateOrderLogMarketDepthBuilder(Type builderType, SecurityId securityId);
    [ExtensionAttribute]
public static object GetArg(MarketDataMessage mdMsg);
    [ExtensionAttribute]
public static TimeSpan GetTimeFrame(DataType dataType);
    [ExtensionAttribute]
public static DataType TimeFrame(TimeSpan tf);
    [ExtensionAttribute]
public static TArg GetArg(MarketDataMessage mdMsg);
    [ExtensionAttribute]
public static MarketDataMessage SetArg(MarketDataMessage mdMsg, TArg arg);
    [ExtensionAttribute]
public static TimeSpan GetTimeFrame(MarketDataMessage mdMsg);
    [ExtensionAttribute]
public static bool IsIntraday(TimeSpan tf);
    [ExtensionAttribute]
public static ValueTuple`2<string, string> SplitToPair(string symbol);
    [ExtensionAttribute]
public static Message CreateErrorResponse(Message message, Exception ex, ILogReceiver logs, Func`2<DataType, Int64[]> getSubscribers);
    [ExtensionAttribute]
public static TMessage SetSubscriptionIds(TMessage message, Int64[] subscriptionIds, long subscriptionId);
    [ExtensionAttribute]
public static Int64[] GetSubscriptionIds(ISubscriptionIdMessage message);
    [ExtensionAttribute]
public static bool IsMarketData(ExecutionMessage execMsg);
    [ExtensionAttribute]
public static decimal GetTradePrice(ExecutionMessage message);
    [ExtensionAttribute]
public static decimal GetBalance(ExecutionMessage message);
    [ExtensionAttribute]
public static Nullable`1<SecurityId> TryGetSecurityId(Message message);
    [ExtensionAttribute]
public static Message ReplaceSecurityId(Message message, SecurityId securityId);
    [ExtensionAttribute]
public static bool IsSupportSubscriptionByPortfolio(IMessageAdapter adapter);
    [ExtensionAttribute]
public static bool IsMoney(SecurityId secId);
    [ExtensionAttribute]
public static bool IsMoney(PositionChangeMessage posMsg);
    [ExtensionAttribute]
public static OrderCondition CreateOrderCondition(IMessageAdapter adapter);
    [ExtensionAttribute]
public static OrderCondition CreateOrderCondition(Type orderConditionType);
    [ExtensionAttribute]
public static bool IsSupportSecuritiesLookupAll(IMessageAdapter adapter);
    [ExtensionAttribute]
public static bool HasOrderId(OrderStatusMessage message);
    [ExtensionAttribute]
public static TMessage LoopBack(TMessage message, IMessageAdapter adapter, MessageBackModes mode);
    [ExtensionAttribute]
public static TMessage UndoBack(TMessage message);
    [ExtensionAttribute]
public static bool IsBack(IMessage message);
    [ExtensionAttribute]
public static TimeSpan GetHistoryStepSize(IMessageAdapter adapter, SecurityId securityId, DataType dataType, TimeSpan& iterationInterval);
    [ExtensionAttribute]
public static Nullable`1<int> GetDefaultMaxCount(DataType dataType);
    [ExtensionAttribute]
public static IEnumerable`1<ExecutionMessage> ToTicks(IEnumerable`1<Level1ChangeMessage> level1);
    [ExtensionAttribute]
public static bool IsContainsTick(Level1ChangeMessage level1);
    [ExtensionAttribute]
public static ExecutionMessage ToTick(Level1ChangeMessage level1);
    [ExtensionAttribute]
public static bool IsContainsCandle(Level1ChangeMessage level1);
    [ExtensionAttribute]
public static IEnumerable`1<QuoteChangeMessage> ToOrderBooks(IEnumerable`1<Level1ChangeMessage> level1);
    [ExtensionAttribute]
public static bool IsContainsQuotes(Level1ChangeMessage level1);
    [ExtensionAttribute]
public static decimal GetPriceStep(int decimals);
    [ExtensionAttribute]
public static bool IsAllSecurity(ISecurityIdMessage message);
    [ExtensionAttribute]
public static bool IsAllSecurity(SecurityId securityId);
    [ExtensionAttribute]
public static string ToMicexCurrencyName(CurrencyTypes type);
    [ExtensionAttribute]
public static Nullable`1<CurrencyTypes> FromMicexCurrencyName(string name, Action`1<Exception> errorHandler);
    [ExtensionAttribute]
public static Type ToType(Level1Fields field);
    [ExtensionAttribute]
public static Type ToType(PositionChangeTypes type);
    [ExtensionAttribute]
public static Level1ChangeMessage ToLevel1(IOrderBookMessage message);
    [ExtensionAttribute]
public static Level1ChangeMessage ToLevel1(CandleMessage message);
    [ExtensionAttribute]
public static Level1ChangeMessage ToLevel1(ExecutionMessage message);
    [IteratorStateMachineAttribute("StockSharp.Messages.Extensions/<ToLevel1>d__179")]
[ExtensionAttribute]
public static IEnumerable`1<Level1ChangeMessage> ToLevel1(IEnumerable`1<QuoteChangeMessage> quotes);
    [ExtensionAttribute]
public static IEnumerable`1<TimeSpan> FilterTimeFrames(IEnumerable`1<DataType> dataTypes);
    [ExtensionAttribute]
public static bool Verify(IOrderBookMessage book);
    private static bool Verify(QuoteChange[] quotes, bool isBids);
    private static bool Verify(QuoteChange quote);
    [ExtensionAttribute]
public static bool IsMatch(ISubscriptionIdMessage message, MessageTypes type, ISubscriptionMessage criteria);
    [ExtensionAttribute]
public static bool IsMatch(BoardMessage board, BoardLookupMessage criteria);
    [ExtensionAttribute]
public static bool IsMatch(PortfolioMessage portfolio, PortfolioLookupMessage criteria, bool compareName);
    [ExtensionAttribute]
public static bool IsMatch(PositionChangeMessage position, PortfolioLookupMessage criteria, bool compareName);
    [ExtensionAttribute]
public static bool IsMatch(ExecutionMessage transaction, OrderStatusMessage criteria);
    [ExtensionAttribute]
public static bool IsMatch(ExecutionMessage transaction, OrderStatusMessage criteria, ISet`1<OrderStates> states);
    [ExtensionAttribute]
public static bool IsMatch(SecurityMessage security, SecurityLookupMessage criteria);
    [ExtensionAttribute]
public static bool IsMatch(SecurityMessage security, SecurityLookupMessage criteria, HashSet`1<SecurityTypes> secTypes);
    [ExtensionAttribute]
public static IEnumerable`1<SecurityMessage> Filter(IEnumerable`1<SecurityMessage> securities, SecurityLookupMessage criteria);
    [CompilerGeneratedAttribute]
public static SecurityMessage get_AllSecurity();
    [ExtensionAttribute]
public static bool IsLookupAll(SecurityLookupMessage criteria);
    [ExtensionAttribute]
public static void ChangeSupported(IMessageAdapter adapter, bool add, bool isMarketData);
    [ExtensionAttribute]
public static MessageTypes ToMessageType2(DataType type);
    [ExtensionAttribute]
public static bool IsOpened(IMessageChannel channel);
    [ExtensionAttribute]
public static bool IsToday(Nullable`1<DateTimeOffset> date);
    [ExtensionAttribute]
public static bool IsToday(DateTimeOffset date);
    [ExtensionAttribute]
public static Nullable`1<DateTimeOffset> EnsureToday(Nullable`1<DateTimeOffset> date);
    [ExtensionAttribute]
public static Nullable`1<DateTimeOffset> EnsureToday(Nullable`1<DateTimeOffset> date, Nullable`1<DateTimeOffset> todayValue);
    [ExtensionAttribute]
public static IEnumerable`1<DataType> GetSupportedDataTypes(IMessageAdapter adapter);
    [ExtensionAttribute]
public static QuoteChangeMessage Truncate(IOrderBookMessage depth, int maxDepth);
    [ExtensionAttribute]
private static void CheckIsSnapshot(IOrderBookMessage depth);
    [ExtensionAttribute]
public static QuoteChangeMessage Sparse(IOrderBookMessage depth, decimal priceRange, Nullable`1<decimal> priceStep);
    [ExtensionAttribute]
[ObsoleteAttribute("Use method with decimal priceRange parameter")]
public static QuoteChangeMessage Sparse(IOrderBookMessage depth, Unit priceRange, Nullable`1<decimal> priceStep);
    private static void ValidatePriceRange(decimal priceRange);
    private static decimal GetActualPriceRange(Unit priceRange);
    [ExtensionAttribute]
[ObsoleteAttribute("Use method with decimal priceRange parameter")]
public static ValueTuple`2<QuoteChange[], QuoteChange[]> Sparse(QuoteChange bid, QuoteChange ask, Unit priceRange, Nullable`1<decimal> priceStep);
    [ExtensionAttribute]
public static ValueTuple`2<QuoteChange[], QuoteChange[]> Sparse(QuoteChange bid, QuoteChange ask, decimal priceRange, Nullable`1<decimal> priceStep);
    [ExtensionAttribute]
public static QuoteChange[] Sparse(QuoteChange[] quotes, Sides side, decimal priceRange, Nullable`1<decimal> priceStep);
    [ExtensionAttribute]
[ObsoleteAttribute("Use method with decimal priceRange parameter")]
public static QuoteChange[] Sparse(QuoteChange[] quotes, Sides side, Unit priceRange, Nullable`1<decimal> priceStep);
    [ExtensionAttribute]
[ObsoleteAttribute("Use method with decimal priceRange parameter")]
public static QuoteChangeMessage Group(IOrderBookMessage depth, Unit priceRange);
    [ExtensionAttribute]
public static QuoteChangeMessage Group(IOrderBookMessage depth, decimal priceRange);
    [ExtensionAttribute]
public static QuoteChangeMessage UnGroup(IOrderBookMessage depth);
    [ExtensionAttribute]
public static QuoteChange[] Group(QuoteChange[] quotes, Sides side, decimal priceRange);
    [ExtensionAttribute]
[ObsoleteAttribute("Use method with decimal priceRange")]
public static QuoteChange[] Group(QuoteChange[] quotes, Sides side, Unit priceRange);
    [ExtensionAttribute]
public static QuoteChangeMessage GetDelta(IOrderBookMessage from, IOrderBookMessage to);
    [ExtensionAttribute]
private static QuoteChange[] GetDelta(IEnumerable`1<QuoteChange> from, IEnumerable`1<QuoteChange> to, IComparer`1<decimal> comparer);
    [ExtensionAttribute]
public static QuoteChangeMessage AddDelta(IOrderBookMessage from, IOrderBookMessage delta);
    [ExtensionAttribute]
public static QuoteChange[] AddDelta(IEnumerable`1<QuoteChange> fromQuotes, IEnumerable`1<QuoteChange> deltaQuotes, bool isBids);
    [ExtensionAttribute]
public static QuoteChangeMessage Join(IOrderBookMessage original, IOrderBookMessage rare);
    [ExtensionAttribute]
public static ValueTuple`2<Nullable`1<QuoteChange>, Nullable`1<QuoteChange>> GetBestPair(IOrderBookMessage book);
    [ExtensionAttribute]
private static Nullable`1<QuoteChange> GetQuote(IOrderBookMessage book, Sides side, int idx);
    [ExtensionAttribute]
public static ValueTuple`2<Nullable`1<QuoteChange>, Nullable`1<QuoteChange>> GetPair(IOrderBookMessage book, int depthIndex);
    [IteratorStateMachineAttribute("StockSharp.Messages.Extensions/<GetTopPairs>d__231")]
[ExtensionAttribute]
public static IEnumerable`1<ValueTuple`2<Nullable`1<QuoteChange>, Nullable`1<QuoteChange>>> GetTopPairs(IOrderBookMessage book, int depth);
    [ExtensionAttribute]
public static IEnumerable`1<QuoteChange> GetTopQuotes(IOrderBookMessage book, int depth);
    [ExtensionAttribute]
public static decimal ShrinkPrice(decimal price, Nullable`1<decimal> priceStep, Nullable`1<int> decimals, ShrinkRules rule);
    [ExtensionAttribute]
public static OrderRegisterMessage ToReg(ExecutionMessage execMsg);
    [ExtensionAttribute]
public static ExecutionMessage ToExec(OrderRegisterMessage regMsg);
    [ExtensionAttribute]
public static bool IsHistoryOnly(ISubscriptionMessage message);
    [ExtensionAttribute]
public static IEnumerable`1<BoardMessage> Filter(IEnumerable`1<BoardMessage> boards, BoardLookupMessage criteria);
    [ExtensionAttribute]
public static string TryGet(IDictionary`2<string, string> parameters, string name, string defaultValue);
    [ExtensionAttribute]
public static Sides Invert(Sides side);
    [ExtensionAttribute]
public static bool IsCanceled(IOrderMessage order);
    [ExtensionAttribute]
public static bool IsMatched(IOrderMessage order);
    [ExtensionAttribute]
public static bool IsMatchedPartially(IOrderMessage order);
    [ExtensionAttribute]
public static bool IsMatchedEmpty(IOrderMessage order);
    [ExtensionAttribute]
public static decimal GetMatchedVolume(IOrderMessage order);
    [ExtensionAttribute]
public static bool IsBasket(SecurityMessage security);
    [ExtensionAttribute]
public static bool IsIndex(SecurityMessage security);
    [ExtensionAttribute]
public static string ToReadableString(DataType dt);
    [ExtensionAttribute]
public static string Iso10962(SecurityMessage security);
    [ExtensionAttribute]
public static Nullable`1<SecurityTypes> Iso10962ToSecurityType(string cfi);
    [ExtensionAttribute]
public static Nullable`1<OptionTypes> Iso10962ToOptionType(string cfi);
    [ExtensionAttribute]
public static SecurityIdGenerator EnsureGetGenerator(SecurityIdGenerator generator);
    [ExtensionAttribute]
public static string ToStringId(SecurityId securityId, SecurityIdGenerator generator, bool nullIfEmpty);
    [ExtensionAttribute]
public static SecurityId ToNullableSecurityId(string id, SecurityIdGenerator generator);
    [ExtensionAttribute]
public static SecurityId ToSecurityId(string id, SecurityIdGenerator generator);
    [ExtensionAttribute]
public static bool IsAssociated(SecurityId securityId, string boardCode);
    [ExtensionAttribute]
public static SecurityMessage TryFillUnderlyingId(SecurityMessage secMsg, string underlyingCode);
    [ExtensionAttribute]
public static string GetUnderlyingCode(SecurityMessage secMsg);
    [ExtensionAttribute]
public static decimal SafeGetVolume(ExecutionMessage message);
    [ExtensionAttribute]
public static long SafeGetOrderId(ExecutionMessage message);
    [ExtensionAttribute]
public static bool IsFinal(OrderStates state);
    [ExtensionAttribute]
public static Nullable`1<TimeInForce> GetPlazaTimeInForce(long status);
    [ExtensionAttribute]
public static bool IsPlazaSystem(long status);
    [ExtensionAttribute]
public static OrderLogCancelReasons GetOrderLogCancelReason(ExecutionMessage item);
    [ExtensionAttribute]
public static Range`1<DateTimeOffset> GetCandleBounds(TimeSpan timeFrame, DateTimeOffset currentTime);
    [ExtensionAttribute]
public static Range`1<DateTimeOffset> GetCandleBounds(TimeSpan timeFrame, DateTimeOffset currentTime, TimeZoneInfo timeZone, WorkingTime time);
    [ExtensionAttribute]
public static long GetTimeFrameCount(Range`1<DateTimeOffset> range, TimeSpan timeFrame, WorkingTime workingTime, TimeZoneInfo timeZone);
    [ExtensionAttribute]
private static long GetTimeFrameCount(WorkingTime workingTime, DateTime date, Range`1<TimeSpan> fromToRange, TimeSpan timeFrame);
    [ExtensionAttribute]
public static IEnumerable`1<SecurityMessage> LookupByCode(ISecurityMessageProvider provider, string code, Nullable`1<SecurityTypes> type);
    [ExtensionAttribute]
public static Uri MakeVectorIconUri(string key);
    [ExtensionAttribute]
public static Uri TryGetVectorIcon(Type type);
    [ExtensionAttribute]
public static Uri TryGetIconUrl(Type type);
    [ExtensionAttribute]
public static T GetId(CommandMessage message);
    [ExtensionAttribute]
public static void SetId(CommandMessage message, T id);
    [ExtensionAttribute]
public static bool IsTradeTime(BoardMessage board, DateTimeOffset time);
    [ExtensionAttribute]
public static bool IsTradeTime(BoardMessage board, DateTimeOffset time, Nullable`1& isWorkingDay, WorkingTimePeriod& period);
    [ExtensionAttribute]
public static bool IsTradeTime(WorkingTime workingTime, DateTime time, Nullable`1& isWorkingDay, WorkingTimePeriod& period);
    [ExtensionAttribute]
public static bool IsTradeDate(BoardMessage board, DateTimeOffset date, bool checkHolidays);
    [ExtensionAttribute]
public static bool IsTradeDate(WorkingTime workingTime, DateTime date, bool checkHolidays);
    [ExtensionAttribute]
public static DateTimeOffset LastTradeDay(BoardMessage board, DateTimeOffset date, bool checkHolidays);
    [ExtensionAttribute]
public static DateTimeOffset AddOrSubtractTradingDays(BoardMessage board, DateTimeOffset date, int n, bool checkHolidays);
    [ExtensionAttribute]
public static IEnumerable`1<T> TryLimitByCount(IEnumerable`1<T> set, SecurityLookupMessage msg);
    [ExtensionAttribute]
public static IEnumerable`1<TMessage> Filter(IEnumerable`1<TMessage> messages, DateTimeOffset from, DateTimeOffset to);
    [ExtensionAttribute]
public static ExecutionMessage ToTick(ExecutionMessage item);
    [ExtensionAttribute]
public static IEnumerable`1<ExecutionMessage> ToTicks(IEnumerable`1<ExecutionMessage> items);
    [ExtensionAttribute]
public static IEnumerable`1<Level1ChangeMessage> ToLevel1(IEnumerable`1<ExecutionMessage> items, IOrderLogMarketDepthBuilder builder, TimeSpan interval);
    [IteratorStateMachineAttribute("StockSharp.Messages.Extensions/<BuildIfNeed>d__293")]
[ExtensionAttribute]
public static IEnumerable`1<QuoteChangeMessage> BuildIfNeed(IEnumerable`1<QuoteChangeMessage> books, ILogReceiver logs);
    [IteratorStateMachineAttribute("StockSharp.Messages.Extensions/<ToOrderBooks>d__294")]
[ExtensionAttribute]
public static IEnumerable`1<QuoteChangeMessage> ToOrderBooks(IEnumerable`1<ExecutionMessage> items, IOrderLogMarketDepthBuilder builder, TimeSpan interval, int maxDepth);
    [ExtensionAttribute]
public static bool IsFullEmpty(IOrderBookMessage depth);
    [ExtensionAttribute]
public static bool IsHalfEmpty(IOrderBookMessage depth);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetBasicProperties(Type adapterType);
    [ExtensionAttribute]
public static ExecutionMessage ToOrderSnapshot(IEnumerable`1<ExecutionMessage> diffs, long transactionId, ILogReceiver logs);
    [ExtensionAttribute]
public static decimal ApplyNewBalance(Nullable`1<decimal> currBal, decimal newBal, long transactionId, ILogReceiver logs);
    [ExtensionAttribute]
public static bool ValidateChannelState(ChannelStates currState, ChannelStates newState);
    [ExtensionAttribute]
public static bool VerifyOrderState(Nullable`1<OrderStates> currState, OrderStates newState, long transactionId, ILogReceiver logs);
    [ExtensionAttribute]
public static bool IsSet(Unit value);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static MessageTypes ToMessageType(MarketDataTypes type, Object& arg);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static DataType ToDataType(MarketDataTypes type, object arg);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static MarketDataTypes ToMarketDataType(DataType dataType);
    [ExtensionAttribute]
public static bool HasChanges(BaseChangeMessage`2<TMessage, TChange> message);
    [ExtensionAttribute]
public static object TryGet(TMessage message, TChange type);
    [ExtensionAttribute]
public static Nullable`1<decimal> TryGetDecimal(TMessage message, TChange type);
    [ExtensionAttribute]
public static TMessage Add(TMessage message, TChange type, object value);
    [ExtensionAttribute]
public static TMessage Add(TMessage message, TChange type, decimal value);
    [ExtensionAttribute]
public static TMessage Add(TMessage message, TChange type, int value);
    [ExtensionAttribute]
public static TMessage Add(TMessage message, TChange type, long value);
    [ExtensionAttribute]
public static TMessage Add(TMessage message, TChange type, SecurityStates value);
    [ExtensionAttribute]
public static TMessage TryAdd(TMessage message, TChange type, Nullable`1<SecurityStates> value);
    [ExtensionAttribute]
public static TMessage TryAdd(TMessage message, TChange type, string value);
    [ExtensionAttribute]
public static TMessage Add(TMessage message, TChange type, Sides value);
    [ExtensionAttribute]
public static TMessage TryAdd(TMessage message, TChange type, Nullable`1<Sides> value);
    [ExtensionAttribute]
public static TMessage Add(TMessage message, TChange type, CurrencyTypes value);
    [ExtensionAttribute]
public static TMessage TryAdd(TMessage message, TChange type, Nullable`1<CurrencyTypes> value);
    [ExtensionAttribute]
public static TMessage Add(TMessage message, TChange type, PortfolioStates value);
    [ExtensionAttribute]
public static TMessage TryAdd(TMessage message, TChange type, Nullable`1<PortfolioStates> value);
    [ExtensionAttribute]
public static TMessage Add(TMessage message, TChange type, DateTimeOffset value);
    [ExtensionAttribute]
public static TMessage TryAdd(TMessage message, TChange type, Nullable`1<DateTimeOffset> value);
    [ExtensionAttribute]
public static TMessage Add(TMessage message, TChange type, bool value);
    [ExtensionAttribute]
public static TMessage TryAdd(TMessage message, TChange type, Nullable`1<bool> value);
    [ExtensionAttribute]
public static TMessage TryAdd(TMessage message, TChange type, decimal value, bool isZeroAcceptable);
    [ExtensionAttribute]
public static TMessage TryAdd(TMessage message, TChange type, Nullable`1<decimal> value, bool isZeroAcceptable);
    [ExtensionAttribute]
public static TMessage TryAdd(TMessage message, TChange type, int value, bool isZeroAcceptable);
    [ExtensionAttribute]
public static TMessage TryAdd(TMessage message, TChange type, Nullable`1<int> value, bool isZeroAcceptable);
    [ExtensionAttribute]
public static TMessage TryAdd(TMessage message, TChange type, long value, bool isZeroAcceptable);
    [ExtensionAttribute]
public static TMessage TryAdd(TMessage message, TChange type, Nullable`1<long> value, bool isZeroAcceptable);
    [CompilerGeneratedAttribute]
internal static string <.cctor>g__TimeSpanToString|3_0(TimeSpan arg);
    [CompilerGeneratedAttribute]
internal static TimeSpan <.cctor>g__StringToTimeSpan|3_1(string str);
    [CompilerGeneratedAttribute]
internal static T <RegisterCandleType>g__Do|60_0(Func`1<T> func);
    [CompilerGeneratedAttribute]
internal static ExecutionMessage <CreateErrorResponse>g__makeErrorExecution|138_0(ExecutionMessage execMsg, <>c__DisplayClass138_0& );
    [CompilerGeneratedAttribute]
internal static QuoteChange[] <UnGroup>g__GetInner|220_0(QuoteChange quote);
}
public enum StockSharp.Messages.FillGapsDays : Enum {
    public int value__;
    [DisplayAttribute]
public static FillGapsDays Weekdays;
    [DisplayAttribute]
public static FillGapsDays All;
}
[DataContractAttribute]
[DisplayAttribute]
public class StockSharp.Messages.HeikinAshiCandleMessage : TimeFrameCandleMessage {
    public virtual Message Clone();
}
public abstract class StockSharp.Messages.HistoricalAsyncMessageAdapter : AsyncMessageAdapter {
    protected HistoricalAsyncMessageAdapter(IdGenerator transactionIdGenerator);
    public virtual ValueTask MarketDataAsync(MarketDataMessage mdMsg, CancellationToken cancellationToken);
}
public interface StockSharp.Messages.IAddressAdapter`1 {
    public TAddress Address { get; public set; }
    public abstract virtual TAddress get_Address();
    public abstract virtual void set_Address(TAddress value);
}
public interface StockSharp.Messages.IBasketSecurityProcessor {
    public SecurityId SecurityId { get; }
    public string BasketExpression { get; }
    public SecurityId[] BasketLegs { get; }
    public abstract virtual SecurityId get_SecurityId();
    public abstract virtual string get_BasketExpression();
    public abstract virtual SecurityId[] get_BasketLegs();
    public abstract virtual IEnumerable`1<Message> Process(Message message);
}
public interface StockSharp.Messages.IBasketSecurityProcessorProvider {
    public abstract virtual void Register(string basketCode, Type processorType, Type securityType);
    public abstract virtual void UnRegister(string basketCode);
    public abstract virtual Type GetProcessorType(string basketCode);
    public abstract virtual Type GetSecurityType(string basketCode);
}
public interface StockSharp.Messages.IBoardMessageProvider {
    public abstract virtual IEnumerable`1<BoardMessage> Lookup(BoardLookupMessage criteria);
}
public interface StockSharp.Messages.ICandleMessage {
    public decimal OpenPrice { get; public set; }
    public decimal HighPrice { get; public set; }
    public decimal LowPrice { get; public set; }
    public decimal ClosePrice { get; public set; }
    public DateTimeOffset OpenTime { get; public set; }
    public DateTimeOffset CloseTime { get; public set; }
    public DateTimeOffset HighTime { get; public set; }
    public DateTimeOffset LowTime { get; public set; }
    public CandleStates State { get; public set; }
    public IEnumerable`1<CandlePriceLevel> PriceLevels { get; public set; }
    public DataType DataType { get; public set; }
    public decimal TotalPrice { get; public set; }
    public Nullable`1<decimal> OpenVolume { get; public set; }
    public Nullable`1<decimal> CloseVolume { get; public set; }
    public Nullable`1<decimal> HighVolume { get; public set; }
    public Nullable`1<decimal> LowVolume { get; public set; }
    public decimal TotalVolume { get; public set; }
    public Nullable`1<decimal> RelativeVolume { get; public set; }
    public Nullable`1<decimal> BuyVolume { get; public set; }
    public Nullable`1<decimal> SellVolume { get; public set; }
    public Nullable`1<int> TotalTicks { get; public set; }
    public Nullable`1<int> UpTicks { get; public set; }
    public Nullable`1<int> DownTicks { get; public set; }
    public Nullable`1<decimal> OpenInterest { get; public set; }
    public Type ArgType { get; }
    public abstract virtual decimal get_OpenPrice();
    public abstract virtual void set_OpenPrice(decimal value);
    public abstract virtual decimal get_HighPrice();
    public abstract virtual void set_HighPrice(decimal value);
    public abstract virtual decimal get_LowPrice();
    public abstract virtual void set_LowPrice(decimal value);
    public abstract virtual decimal get_ClosePrice();
    public abstract virtual void set_ClosePrice(decimal value);
    public abstract virtual DateTimeOffset get_OpenTime();
    public abstract virtual void set_OpenTime(DateTimeOffset value);
    public abstract virtual DateTimeOffset get_CloseTime();
    public abstract virtual void set_CloseTime(DateTimeOffset value);
    public abstract virtual DateTimeOffset get_HighTime();
    public abstract virtual void set_HighTime(DateTimeOffset value);
    public abstract virtual DateTimeOffset get_LowTime();
    public abstract virtual void set_LowTime(DateTimeOffset value);
    public abstract virtual CandleStates get_State();
    public abstract virtual void set_State(CandleStates value);
    public abstract virtual IEnumerable`1<CandlePriceLevel> get_PriceLevels();
    public abstract virtual void set_PriceLevels(IEnumerable`1<CandlePriceLevel> value);
    public abstract virtual DataType get_DataType();
    public abstract virtual void set_DataType(DataType value);
    public abstract virtual decimal get_TotalPrice();
    public abstract virtual void set_TotalPrice(decimal value);
    public abstract virtual Nullable`1<decimal> get_OpenVolume();
    public abstract virtual void set_OpenVolume(Nullable`1<decimal> value);
    public abstract virtual Nullable`1<decimal> get_CloseVolume();
    public abstract virtual void set_CloseVolume(Nullable`1<decimal> value);
    public abstract virtual Nullable`1<decimal> get_HighVolume();
    public abstract virtual void set_HighVolume(Nullable`1<decimal> value);
    public abstract virtual Nullable`1<decimal> get_LowVolume();
    public abstract virtual void set_LowVolume(Nullable`1<decimal> value);
    public abstract virtual decimal get_TotalVolume();
    public abstract virtual void set_TotalVolume(decimal value);
    public abstract virtual Nullable`1<decimal> get_RelativeVolume();
    public abstract virtual void set_RelativeVolume(Nullable`1<decimal> value);
    public abstract virtual Nullable`1<decimal> get_BuyVolume();
    public abstract virtual void set_BuyVolume(Nullable`1<decimal> value);
    public abstract virtual Nullable`1<decimal> get_SellVolume();
    public abstract virtual void set_SellVolume(Nullable`1<decimal> value);
    public abstract virtual Nullable`1<int> get_TotalTicks();
    public abstract virtual void set_TotalTicks(Nullable`1<int> value);
    public abstract virtual Nullable`1<int> get_UpTicks();
    public abstract virtual void set_UpTicks(Nullable`1<int> value);
    public abstract virtual Nullable`1<int> get_DownTicks();
    public abstract virtual void set_DownTicks(Nullable`1<int> value);
    public abstract virtual Nullable`1<decimal> get_OpenInterest();
    public abstract virtual void set_OpenInterest(Nullable`1<decimal> value);
    public abstract virtual Type get_ArgType();
}
public interface StockSharp.Messages.ICandleMessage`1 {
    public TArg TypedArg { get; public set; }
    public abstract virtual TArg get_TypedArg();
    public abstract virtual void set_TypedArg(TArg value);
}
public interface StockSharp.Messages.IComplexIdMessage {
    public Nullable`1<long> Id { get; }
    public string StringId { get; }
    public abstract virtual Nullable`1<long> get_Id();
    public abstract virtual string get_StringId();
}
public interface StockSharp.Messages.ICurrencyMessage {
    public Nullable`1<CurrencyTypes> Currency { get; public set; }
    public abstract virtual Nullable`1<CurrencyTypes> get_Currency();
    public abstract virtual void set_Currency(Nullable`1<CurrencyTypes> value);
}
public interface StockSharp.Messages.IDemoAdapter {
    public bool IsDemo { get; public set; }
    public abstract virtual bool get_IsDemo();
    public abstract virtual void set_IsDemo(bool value);
}
public interface StockSharp.Messages.IErrorMessage {
    public Exception Error { get; public set; }
    public abstract virtual Exception get_Error();
    public abstract virtual void set_Error(Exception value);
}
public interface StockSharp.Messages.IFileMessage {
    public Byte[] Body { get; public set; }
    public abstract virtual Byte[] get_Body();
    public abstract virtual void set_Body(Byte[] value);
}
public interface StockSharp.Messages.IGeneratedMessage {
    public DataType BuildFrom { get; public set; }
    public abstract virtual DataType get_BuildFrom();
    public abstract virtual void set_BuildFrom(DataType value);
}
public interface StockSharp.Messages.IHeikinAshiCandleMessage {
}
public interface StockSharp.Messages.IKeySecretAdapter {
    public SecureString Key { get; public set; }
    public SecureString Secret { get; public set; }
    public abstract virtual SecureString get_Key();
    public abstract virtual void set_Key(SecureString value);
    public abstract virtual SecureString get_Secret();
    public abstract virtual void set_Secret(SecureString value);
}
public interface StockSharp.Messages.ILocalTimeMessage {
    public DateTimeOffset LocalTime { get; }
    public abstract virtual DateTimeOffset get_LocalTime();
}
public interface StockSharp.Messages.ILoginPasswordAdapter {
    public string Login { get; public set; }
    public SecureString Password { get; public set; }
    public abstract virtual string get_Login();
    public abstract virtual void set_Login(string value);
    public abstract virtual SecureString get_Password();
    public abstract virtual void set_Password(SecureString value);
}
public interface StockSharp.Messages.IMessage {
    public MessageTypes Type { get; }
    public IMessageAdapter Adapter { get; public set; }
    public MessageBackModes BackMode { get; public set; }
    public abstract virtual MessageTypes get_Type();
    public abstract virtual IMessageAdapter get_Adapter();
    public abstract virtual void set_Adapter(IMessageAdapter value);
    public abstract virtual MessageBackModes get_BackMode();
    public abstract virtual void set_BackMode(MessageBackModes value);
}
public interface StockSharp.Messages.IMessageAdapter {
    public IdGenerator TransactionIdGenerator { get; }
    public IEnumerable`1<MessageTypeInfo> PossibleSupportedMessages { get; }
    public IEnumerable`1<MessageTypes> SupportedInMessages { get; public set; }
    public IEnumerable`1<MessageTypes> SupportedResultMessages { get; }
    public IEnumerable`1<DataType> SupportedMarketDataTypes { get; }
    public IEnumerable`1<Level1Fields> CandlesBuildFrom { get; }
    public bool CheckTimeFrameByRequest { get; }
    public ReConnectionSettings ReConnectionSettings { get; }
    public TimeSpan HeartbeatInterval { get; public set; }
    public string StorageName { get; }
    public bool IsNativeIdentifiersPersistable { get; }
    public bool IsNativeIdentifiers { get; }
    public bool IsFullCandlesOnly { get; }
    public bool IsSupportSubscriptions { get; }
    public bool IsSupportPartialDownloading { get; }
    public MessageAdapterCategories Categories { get; }
    public IEnumerable`1<Tuple`2<string, Type>> SecurityExtendedFields { get; }
    public IEnumerable`1<int> SupportedOrderBookDepths { get; }
    public bool IsSupportOrderBookIncrements { get; }
    public bool IsSupportExecutionsPnL { get; }
    public bool IsSecurityNewsOnly { get; }
    public bool EnqueueSubscriptions { get; public set; }
    public Type OrderConditionType { get; }
    public bool HeartbeatBeforConnect { get; }
    public Uri Icon { get; }
    public bool IsAutoReplyOnTransactonalUnsubscription { get; }
    public bool IsSupportTransactionLog { get; }
    public Nullable`1<bool> IsPositionsEmulationRequired { get; }
    public bool IsReplaceCommandEditCurrent { get; }
    public bool GenerateOrderBookFromLevel1 { get; public set; }
    public String[] AssociatedBoards { get; }
    public bool ExtraSetup { get; }
    public bool UseChannels { get; }
    public string FeatureName { get; }
    public TimeSpan IterationInterval { get; }
    public Nullable`1<TimeSpan> LookupTimeout { get; }
    public abstract virtual IdGenerator get_TransactionIdGenerator();
    public abstract virtual IEnumerable`1<MessageTypeInfo> get_PossibleSupportedMessages();
    public abstract virtual IEnumerable`1<MessageTypes> get_SupportedInMessages();
    public abstract virtual void set_SupportedInMessages(IEnumerable`1<MessageTypes> value);
    public abstract virtual IEnumerable`1<MessageTypes> get_SupportedResultMessages();
    public abstract virtual IEnumerable`1<DataType> get_SupportedMarketDataTypes();
    public abstract virtual IEnumerable`1<DataType> GetSupportedDataTypes(SecurityId securityId);
    public abstract virtual IEnumerable`1<Level1Fields> get_CandlesBuildFrom();
    public abstract virtual bool get_CheckTimeFrameByRequest();
    public abstract virtual ReConnectionSettings get_ReConnectionSettings();
    public abstract virtual TimeSpan get_HeartbeatInterval();
    public abstract virtual void set_HeartbeatInterval(TimeSpan value);
    public abstract virtual string get_StorageName();
    public abstract virtual bool get_IsNativeIdentifiersPersistable();
    public abstract virtual bool get_IsNativeIdentifiers();
    public abstract virtual bool get_IsFullCandlesOnly();
    public abstract virtual bool get_IsSupportSubscriptions();
    public abstract virtual bool IsSupportCandlesUpdates(MarketDataMessage subscription);
    public abstract virtual bool IsSupportCandlesPriceLevels(MarketDataMessage subscription);
    public abstract virtual bool get_IsSupportPartialDownloading();
    public abstract virtual MessageAdapterCategories get_Categories();
    public abstract virtual IEnumerable`1<Tuple`2<string, Type>> get_SecurityExtendedFields();
    public abstract virtual IEnumerable`1<int> get_SupportedOrderBookDepths();
    public abstract virtual bool get_IsSupportOrderBookIncrements();
    public abstract virtual bool get_IsSupportExecutionsPnL();
    public abstract virtual bool get_IsSecurityNewsOnly();
    public abstract virtual bool get_EnqueueSubscriptions();
    public abstract virtual void set_EnqueueSubscriptions(bool value);
    public abstract virtual Type get_OrderConditionType();
    public abstract virtual bool get_HeartbeatBeforConnect();
    public abstract virtual Uri get_Icon();
    public abstract virtual bool get_IsAutoReplyOnTransactonalUnsubscription();
    public abstract virtual bool get_IsSupportTransactionLog();
    public abstract virtual Nullable`1<bool> get_IsPositionsEmulationRequired();
    public abstract virtual bool get_IsReplaceCommandEditCurrent();
    public abstract virtual bool get_GenerateOrderBookFromLevel1();
    public abstract virtual void set_GenerateOrderBookFromLevel1(bool value);
    public abstract virtual String[] get_AssociatedBoards();
    public abstract virtual bool get_ExtraSetup();
    public abstract virtual IOrderLogMarketDepthBuilder CreateOrderLogMarketDepthBuilder(SecurityId securityId);
    public abstract virtual IEnumerable`1<object> GetCandleArgs(Type candleType, SecurityId securityId, Nullable`1<DateTimeOffset> from, Nullable`1<DateTimeOffset> to);
    public abstract virtual TimeSpan GetHistoryStepSize(SecurityId securityId, DataType dataType, TimeSpan& iterationInterval);
    public abstract virtual Nullable`1<int> GetMaxCount(DataType dataType);
    public abstract virtual bool IsAllDownloadingSupported(DataType dataType);
    public abstract virtual bool IsSecurityRequired(DataType dataType);
    public abstract virtual bool get_UseChannels();
    public abstract virtual string get_FeatureName();
    public abstract virtual TimeSpan get_IterationInterval();
    public abstract virtual Nullable`1<TimeSpan> get_LookupTimeout();
}
public interface StockSharp.Messages.IMessageAdapterProvider {
    public IEnumerable`1<IMessageAdapter> CurrentAdapters { get; }
    public IEnumerable`1<IMessageAdapter> PossibleAdapters { get; }
    public abstract virtual IEnumerable`1<IMessageAdapter> get_CurrentAdapters();
    public abstract virtual IEnumerable`1<IMessageAdapter> get_PossibleAdapters();
    public abstract virtual IMessageAdapter CreateTransportAdapter(IdGenerator transactionIdGenerator);
    public abstract virtual IEnumerable`1<IMessageAdapter> CreateStockSharpAdapters(IdGenerator transactionIdGenerator, string login, SecureString password);
}
public interface StockSharp.Messages.IMessageAdapterWrapper {
    public IMessageAdapter InnerAdapter { get; public set; }
    public abstract virtual IMessageAdapter get_InnerAdapter();
    public abstract virtual void set_InnerAdapter(IMessageAdapter value);
}
public interface StockSharp.Messages.IMessageChannel {
    public ChannelStates State { get; }
    public abstract virtual ChannelStates get_State();
    [CompilerGeneratedAttribute]
public abstract virtual void add_StateChanged(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StateChanged(Action value);
    public abstract virtual void Open();
    public abstract virtual void Close();
    public abstract virtual void Suspend();
    public abstract virtual void Resume();
    public abstract virtual void Clear();
    public abstract virtual bool SendInMessage(Message message);
    [CompilerGeneratedAttribute]
public abstract virtual void add_NewOutMessage(Action`1<Message> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NewOutMessage(Action`1<Message> value);
}
public interface StockSharp.Messages.IMessageQueue {
    public abstract virtual void Enqueue(Message message);
    public abstract virtual bool TryDequeue(Message& message, bool exitOnClose, bool block);
}
public class StockSharp.Messages.InMemoryMessageChannel : object {
    private IMessageQueue _queue;
    private Action`1<Exception> _errorHandler;
    private SyncObject _suspendLock;
    private int _version;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    private ChannelStates _state;
    [CompilerGeneratedAttribute]
private Action StateChanged;
    [CompilerGeneratedAttribute]
private Action`1<Message> NewOutMessage;
    public string Name { get; }
    public int MessageCount { get; }
    public int MaxMessageCount { get; public set; }
    public bool Disabled { get; public set; }
    public ChannelStates State { get; private set; }
    public InMemoryMessageChannel(IMessageQueue queue, string name, Action`1<Exception> errorHandler);
    [CompilerGeneratedAttribute]
public string get_Name();
    public int get_MessageCount();
    public int get_MaxMessageCount();
    public void set_MaxMessageCount(int value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    public sealed virtual ChannelStates get_State();
    private void set_State(ChannelStates value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StateChanged(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StateChanged(Action value);
    public sealed virtual void Open();
    public sealed virtual void Close();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Suspend();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Resume();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Clear();
    public sealed virtual bool SendInMessage(Message message);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NewOutMessage(Action`1<Message> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NewOutMessage(Action`1<Message> value);
    public virtual IMessageChannel Clone();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class StockSharp.Messages.InsufficientFundException : InvalidOperationException {
    public InsufficientFundException(string message);
}
public interface StockSharp.Messages.INtmOrderCondition {
    public bool IsNtm { get; public set; }
    public NtmOrderInfo NtmInfo { get; public set; }
    public abstract virtual bool get_IsNtm();
    public abstract virtual void set_IsNtm(bool value);
    public abstract virtual NtmOrderInfo get_NtmInfo();
    public abstract virtual void set_NtmInfo(NtmOrderInfo value);
}
public interface StockSharp.Messages.INullableSecurityIdMessage {
    public Nullable`1<SecurityId> SecurityId { get; public set; }
    public abstract virtual Nullable`1<SecurityId> get_SecurityId();
    public abstract virtual void set_SecurityId(Nullable`1<SecurityId> value);
}
public interface StockSharp.Messages.IOrderBookMessage {
    public QuoteChange[] Bids { get; }
    public QuoteChange[] Asks { get; }
    public Nullable`1<QuoteChangeStates> State { get; public set; }
    public abstract virtual QuoteChange[] get_Bids();
    public abstract virtual QuoteChange[] get_Asks();
    public abstract virtual Nullable`1<QuoteChangeStates> get_State();
    public abstract virtual void set_State(Nullable`1<QuoteChangeStates> value);
}
public interface StockSharp.Messages.IOrderLogMarketDepthBuilder {
    public abstract virtual QuoteChangeMessage GetSnapshot(DateTimeOffset serverTime);
    public abstract virtual QuoteChangeMessage Update(ExecutionMessage item);
}
public interface StockSharp.Messages.IOrderLogMessage {
    public IOrderMessage Order { get; }
    public ITickTradeMessage Trade { get; }
    public abstract virtual IOrderMessage get_Order();
    public abstract virtual ITickTradeMessage get_Trade();
}
public interface StockSharp.Messages.IOrderMessage {
    public Sides Side { get; }
    public OrderStates State { get; }
    public Nullable`1<TimeInForce> TimeInForce { get; }
    public Nullable`1<DateTimeOffset> ExpiryDate { get; public set; }
    public Nullable`1<OrderTypes> Type { get; }
    public decimal Balance { get; }
    public decimal Price { get; }
    public decimal Volume { get; }
    public abstract virtual Sides get_Side();
    public abstract virtual OrderStates get_State();
    public abstract virtual Nullable`1<TimeInForce> get_TimeInForce();
    public abstract virtual Nullable`1<DateTimeOffset> get_ExpiryDate();
    public abstract virtual void set_ExpiryDate(Nullable`1<DateTimeOffset> value);
    public abstract virtual Nullable`1<OrderTypes> get_Type();
    public abstract virtual decimal get_Balance();
    public abstract virtual decimal get_Price();
    public abstract virtual decimal get_Volume();
}
public interface StockSharp.Messages.IOriginalTransactionIdMessage {
    public long OriginalTransactionId { get; public set; }
    public abstract virtual long get_OriginalTransactionId();
    public abstract virtual void set_OriginalTransactionId(long value);
}
public interface StockSharp.Messages.IPassphraseAdapter {
    public SecureString Passphrase { get; public set; }
    public abstract virtual SecureString get_Passphrase();
    public abstract virtual void set_Passphrase(SecureString value);
}
public interface StockSharp.Messages.IPnFCandleMessage {
}
public interface StockSharp.Messages.IPortfolioNameMessage {
    public string PortfolioName { get; public set; }
    public abstract virtual string get_PortfolioName();
    public abstract virtual void set_PortfolioName(string value);
}
public interface StockSharp.Messages.IRangeCandleMessage {
}
public interface StockSharp.Messages.IRenkoCandleMessage {
}
public interface StockSharp.Messages.IRepoOrderCondition {
    public bool IsRepo { get; public set; }
    public RepoOrderInfo RepoInfo { get; public set; }
    public abstract virtual bool get_IsRepo();
    public abstract virtual void set_IsRepo(bool value);
    public abstract virtual RepoOrderInfo get_RepoInfo();
    public abstract virtual void set_RepoInfo(RepoOrderInfo value);
}
public interface StockSharp.Messages.IScheduledTask {
    public WorkingTime WorkingTime { get; }
    public bool CanStart { get; }
    public bool CanStop { get; }
    public abstract virtual WorkingTime get_WorkingTime();
    public abstract virtual bool get_CanStart();
    public abstract virtual bool get_CanStop();
}
public interface StockSharp.Messages.ISecurityIdMessage {
    public SecurityId SecurityId { get; public set; }
    public abstract virtual SecurityId get_SecurityId();
    public abstract virtual void set_SecurityId(SecurityId value);
}
public interface StockSharp.Messages.ISecurityMessageProvider {
    public abstract virtual SecurityMessage LookupMessageById(SecurityId id);
    public abstract virtual IEnumerable`1<SecurityMessage> LookupMessages(SecurityLookupMessage criteria);
}
public interface StockSharp.Messages.ISenderTargetAdapter {
    public string SenderCompId { get; public set; }
    public string TargetCompId { get; public set; }
    public abstract virtual string get_SenderCompId();
    public abstract virtual void set_SenderCompId(string value);
    public abstract virtual string get_TargetCompId();
    public abstract virtual void set_TargetCompId(string value);
}
public interface StockSharp.Messages.ISeqNumMessage {
    public long SeqNum { get; public set; }
    public abstract virtual long get_SeqNum();
    public abstract virtual void set_SeqNum(long value);
}
public interface StockSharp.Messages.IServerTimeMessage {
    public DateTimeOffset ServerTime { get; public set; }
    public abstract virtual DateTimeOffset get_ServerTime();
    public abstract virtual void set_ServerTime(DateTimeOffset value);
}
public interface StockSharp.Messages.IStopLossOrderCondition {
    public Nullable`1<decimal> ClosePositionPrice { get; public set; }
    public Nullable`1<decimal> ActivationPrice { get; public set; }
    public bool IsTrailing { get; public set; }
    public abstract virtual Nullable`1<decimal> get_ClosePositionPrice();
    public abstract virtual void set_ClosePositionPrice(Nullable`1<decimal> value);
    public abstract virtual Nullable`1<decimal> get_ActivationPrice();
    public abstract virtual void set_ActivationPrice(Nullable`1<decimal> value);
    public abstract virtual bool get_IsTrailing();
    public abstract virtual void set_IsTrailing(bool value);
}
public interface StockSharp.Messages.IStrategyIdMessage {
    public string StrategyId { get; }
    public abstract virtual string get_StrategyId();
}
public interface StockSharp.Messages.ISubscriptionIdMessage {
    public long SubscriptionId { get; public set; }
    public Int64[] SubscriptionIds { get; public set; }
    public DataType DataType { get; }
    public abstract virtual long get_SubscriptionId();
    public abstract virtual void set_SubscriptionId(long value);
    public abstract virtual Int64[] get_SubscriptionIds();
    public abstract virtual void set_SubscriptionIds(Int64[] value);
    public abstract virtual DataType get_DataType();
}
public interface StockSharp.Messages.ISubscriptionMessage {
    public bool FilterEnabled { get; }
    public Nullable`1<DateTimeOffset> From { get; public set; }
    public Nullable`1<DateTimeOffset> To { get; public set; }
    public bool IsSubscribe { get; public set; }
    public Nullable`1<long> Skip { get; public set; }
    public Nullable`1<long> Count { get; public set; }
    public DataType DataType { get; }
    public Nullable`1<FillGapsDays> FillGaps { get; public set; }
    public abstract virtual bool get_FilterEnabled();
    public abstract virtual Nullable`1<DateTimeOffset> get_From();
    public abstract virtual void set_From(Nullable`1<DateTimeOffset> value);
    public abstract virtual Nullable`1<DateTimeOffset> get_To();
    public abstract virtual void set_To(Nullable`1<DateTimeOffset> value);
    public abstract virtual bool get_IsSubscribe();
    public abstract virtual void set_IsSubscribe(bool value);
    public abstract virtual Nullable`1<long> get_Skip();
    public abstract virtual void set_Skip(Nullable`1<long> value);
    public abstract virtual Nullable`1<long> get_Count();
    public abstract virtual void set_Count(Nullable`1<long> value);
    public abstract virtual DataType get_DataType();
    public abstract virtual Nullable`1<FillGapsDays> get_FillGaps();
    public abstract virtual void set_FillGaps(Nullable`1<FillGapsDays> value);
}
public interface StockSharp.Messages.ISystemMessage {
    public Nullable`1<bool> IsSystem { get; }
    public Nullable`1<long> Status { get; }
    public abstract virtual Nullable`1<bool> get_IsSystem();
    public abstract virtual Nullable`1<long> get_Status();
}
public interface StockSharp.Messages.ITakeProfitOrderCondition {
    public Nullable`1<decimal> ClosePositionPrice { get; public set; }
    public Nullable`1<decimal> ActivationPrice { get; public set; }
    public abstract virtual Nullable`1<decimal> get_ClosePositionPrice();
    public abstract virtual void set_ClosePositionPrice(Nullable`1<decimal> value);
    public abstract virtual Nullable`1<decimal> get_ActivationPrice();
    public abstract virtual void set_ActivationPrice(Nullable`1<decimal> value);
}
public interface StockSharp.Messages.ITickCandleMessage {
}
public interface StockSharp.Messages.ITickTradeMessage {
    public decimal Price { get; }
    public decimal Volume { get; }
    public Nullable`1<Sides> OriginSide { get; }
    public Nullable`1<decimal> OpenInterest { get; }
    public Nullable`1<bool> IsUpTick { get; }
    public Nullable`1<decimal> Yield { get; }
    public Nullable`1<long> OrderBuyId { get; }
    public Nullable`1<long> OrderSellId { get; }
    public abstract virtual decimal get_Price();
    public abstract virtual decimal get_Volume();
    public abstract virtual Nullable`1<Sides> get_OriginSide();
    public abstract virtual Nullable`1<decimal> get_OpenInterest();
    public abstract virtual Nullable`1<bool> get_IsUpTick();
    public abstract virtual Nullable`1<decimal> get_Yield();
    public abstract virtual Nullable`1<long> get_OrderBuyId();
    public abstract virtual Nullable`1<long> get_OrderSellId();
}
public interface StockSharp.Messages.ITimeFrameCandleMessage {
}
public interface StockSharp.Messages.ITokenAdapter {
    public SecureString Token { get; public set; }
    public abstract virtual SecureString get_Token();
    public abstract virtual void set_Token(SecureString value);
}
public interface StockSharp.Messages.ITransactionIdMessage {
    public long TransactionId { get; public set; }
    public abstract virtual long get_TransactionId();
    public abstract virtual void set_TransactionId(long value);
}
public interface StockSharp.Messages.IVolumeCandleMessage {
}
public interface StockSharp.Messages.IWithdrawOrderCondition {
    public bool IsWithdraw { get; public set; }
    public WithdrawInfo WithdrawInfo { get; public set; }
    public abstract virtual bool get_IsWithdraw();
    public abstract virtual void set_IsWithdraw(bool value);
    public abstract virtual WithdrawInfo get_WithdrawInfo();
    public abstract virtual void set_WithdrawInfo(WithdrawInfo value);
}
[DataContractAttribute]
[DisplayAttribute]
public class StockSharp.Messages.Level1ChangeMessage : BaseChangeMessage`2<Level1ChangeMessage, Level1Fields> {
    [CompilerGeneratedAttribute]
private SecurityId <SecurityId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SeqNum>k__BackingField;
    [DataMemberAttribute]
[DisplayAttribute]
public SecurityId SecurityId { get; public set; }
    [DataMemberAttribute]
public long SeqNum { get; public set; }
    public DataType DataType { get; }
    [CompilerGeneratedAttribute]
public sealed virtual SecurityId get_SecurityId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SecurityId(SecurityId value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_SeqNum();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SeqNum(long value);
    public virtual DataType get_DataType();
    public virtual void CopyTo(Level1ChangeMessage destination);
    public virtual string ToString();
}
[DataContractAttribute]
public enum StockSharp.Messages.Level1Fields : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields OpenPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields HighPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields LowPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields ClosePrice;
    [EnumMemberAttribute]
[DisplayAttribute]
[ObsoleteAttribute]
public static Level1Fields LastTrade;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields StepPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
[ObsoleteAttribute]
public static Level1Fields BestBid;
    [EnumMemberAttribute]
[DisplayAttribute]
[ObsoleteAttribute]
public static Level1Fields BestAsk;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields ImpliedVolatility;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields TheorPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields OpenInterest;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields MinPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields MaxPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields BidsVolume;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields BidsCount;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields AsksVolume;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields AsksCount;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields HistoricalVolatility;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields Delta;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields Gamma;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields Vega;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields Theta;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields MarginBuy;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields MarginSell;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields PriceStep;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields VolumeStep;
    [EnumMemberAttribute]
[DisplayAttribute]
[ObsoleteAttribute]
public static Level1Fields ExtensionInfo;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields State;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields LastTradePrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields LastTradeVolume;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields Volume;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields AveragePrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields SettlementPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields Change;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields BestBidPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields BestBidVolume;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields BestAskPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields BestAskVolume;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields Rho;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields AccruedCouponIncome;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields HighBidPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields LowAskPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields Yield;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields LastTradeTime;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields TradesCount;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields VWAP;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields LastTradeId;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields BestBidTime;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields BestAskTime;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields LastTradeUpDown;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields LastTradeOrigin;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields Multiplier;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields PriceEarnings;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields ForwardPriceEarnings;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields PriceEarningsGrowth;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields PriceSales;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields PriceBook;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields PriceCash;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields PriceFreeCash;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields Payout;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields SharesOutstanding;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields SharesFloat;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields FloatShort;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields ShortRatio;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields ReturnOnAssets;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields ReturnOnEquity;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields ReturnOnInvestment;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields CurrentRatio;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields QuickRatio;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields LongTermDebtEquity;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields TotalDebtEquity;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields GrossMargin;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields OperatingMargin;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields ProfitMargin;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields Beta;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields AverageTrueRange;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields HistoricalVolatilityWeek;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields HistoricalVolatilityMonth;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields IsSystem;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields Decimals;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields Duration;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields IssueSize;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields BuyBackDate;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields BuyBackPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields Turnover;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields SpreadMiddle;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields Dividend;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields AfterSplit;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields BeforeSplit;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields CommissionTaker;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields CommissionMaker;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields MinVolume;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields UnderlyingMinVolume;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields CouponValue;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields CouponDate;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields CouponPeriod;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields MarketPriceYesterday;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields MarketPriceToday;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields VWAPPrev;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields YieldVWAP;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields YieldVWAPPrev;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields Index;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields Imbalance;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields UnderlyingPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields MaxVolume;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields LowBidPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields HighAskPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields LastTradeVolumeLow;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields LastTradeVolumeHigh;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields OptionMargin;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields OptionSyntheticMargin;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields LowBidVolume;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields HighAskVolume;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields UnderlyingBestBidPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields UnderlyingBestAskPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields MedianPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields HighPrice52Week;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields LowPrice52Week;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Level1Fields LastTradeStringId;
}
public enum StockSharp.Messages.MarginModes : Enum {
    public int value__;
    public static MarginModes Cross;
    public static MarginModes Isolated;
}
[DataContractAttribute]
public enum StockSharp.Messages.MarketDataBuildModes : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static MarketDataBuildModes LoadAndBuild;
    [EnumMemberAttribute]
[DisplayAttribute]
public static MarketDataBuildModes Load;
    [EnumMemberAttribute]
[DisplayAttribute]
public static MarketDataBuildModes Build;
}
[DataContractAttribute]
public class StockSharp.Messages.MarketDataMessage : SecurityMessage {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <From>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <To>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Level1Fields> <Fields>k__BackingField;
    private DataType _dataType2;
    [CompilerGeneratedAttribute]
private bool <IsSubscribe>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewsId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCalcVolumeProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private MarketDataBuildModes <BuildMode>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <BuildFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Level1Fields> <BuildField>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowBuildFromSmallerTimeFrame>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsRegularTradingHours>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFinishedOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BoardCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RefreshSpeed>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrderLogMarketDepthBuilder <DepthBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FillGapsDays> <FillGaps>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoNotBuildOrderBookIncrement>k__BackingField;
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<DateTimeOffset> From { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<DateTimeOffset> To { get; public set; }
    [DisplayAttribute]
public IEnumerable`1<Level1Fields> Fields { get; public set; }
    private DataType StockSharp.Messages.ISubscriptionMessage.DataType { get; }
    [DataMemberAttribute]
public DataType DataType2 { get; public set; }
    [BrowsableAttribute("False")]
[DataMemberAttribute]
public MarketDataTypes DataType { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
[ObsoleteAttribute("Use DataType2 property.")]
public object Arg { get; public set; }
    [DataMemberAttribute]
public bool IsSubscribe { get; public set; }
    [DataMemberAttribute]
public long TransactionId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> Skip { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> Count { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> MaxDepth { get; public set; }
    [DataMemberAttribute]
public string NewsId { get; public set; }
    [DataMemberAttribute]
public bool IsCalcVolumeProfile { get; public set; }
    [DataMemberAttribute]
public MarketDataBuildModes BuildMode { get; public set; }
    [DataMemberAttribute]
public DataType BuildFrom { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Level1Fields> BuildField { get; public set; }
    [DataMemberAttribute]
public bool AllowBuildFromSmallerTimeFrame { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> IsRegularTradingHours { get; public set; }
    [DataMemberAttribute]
public bool IsFinishedOnly { get; public set; }
    [DataMemberAttribute]
public string BoardCode { get; public set; }
    [DataMemberAttribute]
public Nullable`1<TimeSpan> RefreshSpeed { get; public set; }
    public IOrderLogMarketDepthBuilder DepthBuilder { get; public set; }
    [DataMemberAttribute]
public Nullable`1<FillGapsDays> FillGaps { get; public set; }
    [DataMemberAttribute]
public bool DoNotBuildOrderBookIncrement { get; public set; }
    private bool StockSharp.Messages.ISubscriptionMessage.FilterEnabled { get; }
    protected MarketDataMessage(MessageTypes type);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_From();
    [CompilerGeneratedAttribute]
public sealed virtual void set_From(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_To();
    [CompilerGeneratedAttribute]
public sealed virtual void set_To(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Level1Fields> get_Fields();
    [CompilerGeneratedAttribute]
public void set_Fields(IEnumerable`1<Level1Fields> value);
    private sealed virtual override DataType StockSharp.Messages.ISubscriptionMessage.get_DataType();
    public DataType get_DataType2();
    public void set_DataType2(DataType value);
    public MarketDataTypes get_DataType();
    public void set_DataType(MarketDataTypes value);
    public object get_Arg();
    public void set_Arg(object value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSubscribe();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsSubscribe(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_TransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_Skip();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Skip(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Count(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxDepth();
    [CompilerGeneratedAttribute]
public void set_MaxDepth(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_NewsId();
    [CompilerGeneratedAttribute]
public void set_NewsId(string value);
    [CompilerGeneratedAttribute]
public bool get_IsCalcVolumeProfile();
    [CompilerGeneratedAttribute]
public void set_IsCalcVolumeProfile(bool value);
    [CompilerGeneratedAttribute]
public MarketDataBuildModes get_BuildMode();
    [CompilerGeneratedAttribute]
public void set_BuildMode(MarketDataBuildModes value);
    [CompilerGeneratedAttribute]
public sealed virtual DataType get_BuildFrom();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildFrom(DataType value);
    [CompilerGeneratedAttribute]
public Nullable`1<Level1Fields> get_BuildField();
    [CompilerGeneratedAttribute]
public void set_BuildField(Nullable`1<Level1Fields> value);
    [CompilerGeneratedAttribute]
public bool get_AllowBuildFromSmallerTimeFrame();
    [CompilerGeneratedAttribute]
public void set_AllowBuildFromSmallerTimeFrame(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsRegularTradingHours();
    [CompilerGeneratedAttribute]
public void set_IsRegularTradingHours(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_IsFinishedOnly();
    [CompilerGeneratedAttribute]
public void set_IsFinishedOnly(bool value);
    [CompilerGeneratedAttribute]
public string get_BoardCode();
    [CompilerGeneratedAttribute]
public void set_BoardCode(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_RefreshSpeed();
    [CompilerGeneratedAttribute]
public void set_RefreshSpeed(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public IOrderLogMarketDepthBuilder get_DepthBuilder();
    [CompilerGeneratedAttribute]
public void set_DepthBuilder(IOrderLogMarketDepthBuilder value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<FillGapsDays> get_FillGaps();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FillGaps(Nullable`1<FillGapsDays> value);
    [CompilerGeneratedAttribute]
public bool get_DoNotBuildOrderBookIncrement();
    [CompilerGeneratedAttribute]
public void set_DoNotBuildOrderBookIncrement(bool value);
    private sealed virtual override bool StockSharp.Messages.ISubscriptionMessage.get_FilterEnabled();
    public virtual Message Clone();
    public void CopyTo(MarketDataMessage destination);
    public virtual string ToString();
}
[DataContractAttribute]
public enum StockSharp.Messages.MarketDataTypes : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static MarketDataTypes Level1;
    [EnumMemberAttribute]
[DisplayAttribute]
public static MarketDataTypes MarketDepth;
    [EnumMemberAttribute]
[DisplayAttribute]
public static MarketDataTypes Trades;
    [EnumMemberAttribute]
[DisplayAttribute]
public static MarketDataTypes OrderLog;
    [EnumMemberAttribute]
[DisplayAttribute]
public static MarketDataTypes News;
    [EnumMemberAttribute]
[DisplayAttribute]
public static MarketDataTypes CandleTimeFrame;
    [EnumMemberAttribute]
[DisplayAttribute]
public static MarketDataTypes CandleTick;
    [EnumMemberAttribute]
[DisplayAttribute]
public static MarketDataTypes CandleVolume;
    [EnumMemberAttribute]
[DisplayAttribute]
public static MarketDataTypes CandleRange;
    [EnumMemberAttribute]
[DisplayAttribute]
public static MarketDataTypes CandlePnF;
    [EnumMemberAttribute]
[DisplayAttribute]
public static MarketDataTypes CandleRenko;
    [EnumMemberAttribute]
[DisplayAttribute]
public static MarketDataTypes Board;
    [EnumMemberAttribute]
[DisplayAttribute]
public static MarketDataTypes CandleHeikinAshi;
}
[DataContractAttribute]
public abstract class StockSharp.Messages.Message : Cloneable`1<Message> {
    [CompilerGeneratedAttribute]
private DateTimeOffset <LocalTime>k__BackingField;
    private MessageTypes _type;
    [CompilerGeneratedAttribute]
private MessageBackModes <BackMode>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageOfflineModes <OfflineMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageAdapter <Adapter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Forced>k__BackingField;
    [DisplayAttribute]
[DataMemberAttribute]
public DateTimeOffset LocalTime { get; public set; }
    public MessageTypes Type { get; }
    [XmlIgnoreAttribute]
[ObsoleteAttribute("Use BackMode property.")]
public bool IsBack { get; public set; }
    [XmlIgnoreAttribute]
public MessageBackModes BackMode { get; public set; }
    [XmlIgnoreAttribute]
public MessageOfflineModes OfflineMode { get; public set; }
    [XmlIgnoreAttribute]
public IMessageAdapter Adapter { get; public set; }
    [XmlIgnoreAttribute]
public bool Forced { get; public set; }
    protected Message(MessageTypes type);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_LocalTime();
    [CompilerGeneratedAttribute]
public void set_LocalTime(DateTimeOffset value);
    public sealed virtual MessageTypes get_Type();
    public bool get_IsBack();
    public void set_IsBack(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual MessageBackModes get_BackMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BackMode(MessageBackModes value);
    [CompilerGeneratedAttribute]
public MessageOfflineModes get_OfflineMode();
    [CompilerGeneratedAttribute]
public void set_OfflineMode(MessageOfflineModes value);
    [CompilerGeneratedAttribute]
public sealed virtual IMessageAdapter get_Adapter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Adapter(IMessageAdapter value);
    [CompilerGeneratedAttribute]
public bool get_Forced();
    [CompilerGeneratedAttribute]
public void set_Forced(bool value);
    public virtual string ToString();
    public abstract virtual Message Clone();
    protected void CopyTo(Message destination);
}
public abstract class StockSharp.Messages.MessageAdapter : BaseLogReceiver {
    private IEnumerable`1<MessageTypes> _supportedInMessages;
    private IEnumerable`1<MessageTypes> _supportedResultMessages;
    private IEnumerable`1<MessageTypeInfo> _possibleSupportedMessages;
    private IEnumerable`1<DataType> _supportedMarketDataTypes;
    [CompilerGeneratedAttribute]
private bool <CheckTimeFrameByRequest>k__BackingField;
    private TimeSpan _heartbeatInterval;
    [CompilerGeneratedAttribute]
private MessageAdapterCategories <Categories>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageName>k__BackingField;
    [CompilerGeneratedAttribute]
private Platforms <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Tuple`2<string, Type>> <SecurityExtendedFields>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnqueueSubscriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateOrderBookFromLevel1>k__BackingField;
    [CompilerGeneratedAttribute]
private ReConnectionSettings <ReConnectionSettings>k__BackingField;
    private IdGenerator _transactionIdGenerator;
    [CompilerGeneratedAttribute]
private Action`1<Message> NewOutMessage;
    private HashSet`1<TimeSpan> _timeFrames;
    [CompilerGeneratedAttribute]
private bool <UseChannels>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <IterationInterval>k__BackingField;
    private PropertyChangedEventHandler _propertyChanged;
    [BrowsableAttribute("False")]
public IEnumerable`1<MessageTypes> SupportedInMessages { get; public set; }
    [BrowsableAttribute("False")]
public IEnumerable`1<MessageTypes> SupportedResultMessages { get; public set; }
    [BrowsableAttribute("False")]
public IEnumerable`1<MessageTypeInfo> PossibleSupportedMessages { get; public set; }
    [BrowsableAttribute("False")]
public IEnumerable`1<DataType> SupportedMarketDataTypes { get; public set; }
    [BrowsableAttribute("False")]
public IEnumerable`1<Level1Fields> CandlesBuildFrom { get; }
    [BrowsableAttribute("False")]
public bool CheckTimeFrameByRequest { get; public set; }
    [DisplayAttribute]
public TimeSpan HeartbeatInterval { get; public set; }
    [BrowsableAttribute("False")]
public bool IsNativeIdentifiersPersistable { get; }
    [BrowsableAttribute("False")]
public bool IsNativeIdentifiers { get; }
    [BrowsableAttribute("False")]
public bool IsFullCandlesOnly { get; }
    [BrowsableAttribute("False")]
public bool IsSupportSubscriptions { get; }
    [BrowsableAttribute("False")]
public bool IsSupportPartialDownloading { get; }
    [BrowsableAttribute("False")]
public MessageAdapterCategories Categories { get; }
    [BrowsableAttribute("False")]
public string StorageName { get; }
    [BrowsableAttribute("False")]
public Platforms Platform { get; protected set; }
    [BrowsableAttribute("False")]
public string FeatureName { get; }
    [BrowsableAttribute("False")]
public IEnumerable`1<Tuple`2<string, Type>> SecurityExtendedFields { get; }
    [BrowsableAttribute("False")]
public IEnumerable`1<int> SupportedOrderBookDepths { get; }
    [BrowsableAttribute("False")]
public bool IsSupportOrderBookIncrements { get; }
    [BrowsableAttribute("False")]
public bool IsSupportExecutionsPnL { get; }
    [BrowsableAttribute("False")]
public bool IsSecurityNewsOnly { get; }
    [BrowsableAttribute("False")]
public Type OrderConditionType { get; }
    [BrowsableAttribute("False")]
public bool HeartbeatBeforConnect { get; }
    [BrowsableAttribute("False")]
public Uri Icon { get; }
    [BrowsableAttribute("False")]
public bool IsAutoReplyOnTransactonalUnsubscription { get; }
    [DisplayAttribute]
public bool EnqueueSubscriptions { get; public set; }
    [BrowsableAttribute("False")]
public bool IsSupportTransactionLog { get; }
    [BrowsableAttribute("False")]
public bool IsReplaceCommandEditCurrent { get; }
    [DisplayAttribute]
public bool GenerateOrderBookFromLevel1 { get; public set; }
    [DisplayAttribute]
public ReConnectionSettings ReConnectionSettings { get; }
    [BrowsableAttribute("False")]
public IdGenerator TransactionIdGenerator { get; public set; }
    [BrowsableAttribute("False")]
public bool ExtraSetup { get; }
    private ChannelStates StockSharp.Messages.IMessageChannel.State { get; }
    [BrowsableAttribute("False")]
public String[] AssociatedBoards { get; }
    protected IEnumerable`1<TimeSpan> TimeFrames { get; }
    [DisplayAttribute]
public bool UseChannels { get; public set; }
    [DisplayAttribute]
public TimeSpan IterationInterval { get; public set; }
    [BrowsableAttribute("False")]
public Nullable`1<TimeSpan> LookupTimeout { get; }
    [BrowsableAttribute("False")]
public Nullable`1<bool> IsPositionsEmulationRequired { get; }
    [ReadOnlyAttribute("False")]
public string Name { get; public set; }
    protected MessageAdapter(IdGenerator transactionIdGenerator);
    private IEnumerable`1<MessageTypes> CheckDuplicate(IEnumerable`1<MessageTypes> value, string propName);
    public virtual IEnumerable`1<MessageTypes> get_SupportedInMessages();
    public virtual void set_SupportedInMessages(IEnumerable`1<MessageTypes> value);
    public virtual IEnumerable`1<MessageTypes> get_SupportedResultMessages();
    public virtual void set_SupportedResultMessages(IEnumerable`1<MessageTypes> value);
    public virtual IEnumerable`1<MessageTypeInfo> get_PossibleSupportedMessages();
    public virtual void set_PossibleSupportedMessages(IEnumerable`1<MessageTypeInfo> value);
    public virtual IEnumerable`1<DataType> get_SupportedMarketDataTypes();
    public virtual void set_SupportedMarketDataTypes(IEnumerable`1<DataType> value);
    public virtual IEnumerable`1<DataType> GetSupportedDataTypes(SecurityId securityId);
    public virtual IEnumerable`1<Level1Fields> get_CandlesBuildFrom();
    [CompilerGeneratedAttribute]
public virtual bool get_CheckTimeFrameByRequest();
    [CompilerGeneratedAttribute]
public virtual void set_CheckTimeFrameByRequest(bool value);
    public sealed virtual TimeSpan get_HeartbeatInterval();
    public sealed virtual void set_HeartbeatInterval(TimeSpan value);
    public virtual bool get_IsNativeIdentifiersPersistable();
    public virtual bool get_IsNativeIdentifiers();
    public virtual bool get_IsFullCandlesOnly();
    public virtual bool get_IsSupportSubscriptions();
    public virtual bool IsSupportCandlesUpdates(MarketDataMessage subscription);
    public virtual bool IsSupportCandlesPriceLevels(MarketDataMessage subscription);
    public virtual bool get_IsSupportPartialDownloading();
    [CompilerGeneratedAttribute]
public virtual MessageAdapterCategories get_Categories();
    [CompilerGeneratedAttribute]
public virtual string get_StorageName();
    [CompilerGeneratedAttribute]
public Platforms get_Platform();
    [CompilerGeneratedAttribute]
protected void set_Platform(Platforms value);
    public virtual string get_FeatureName();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<Tuple`2<string, Type>> get_SecurityExtendedFields();
    public virtual IEnumerable`1<int> get_SupportedOrderBookDepths();
    public virtual bool get_IsSupportOrderBookIncrements();
    public virtual bool get_IsSupportExecutionsPnL();
    public virtual bool get_IsSecurityNewsOnly();
    public virtual Type get_OrderConditionType();
    public virtual bool get_HeartbeatBeforConnect();
    public virtual Uri get_Icon();
    public virtual bool get_IsAutoReplyOnTransactonalUnsubscription();
    [CompilerGeneratedAttribute]
public virtual bool get_EnqueueSubscriptions();
    [CompilerGeneratedAttribute]
public virtual void set_EnqueueSubscriptions(bool value);
    public virtual bool get_IsSupportTransactionLog();
    public virtual bool get_IsReplaceCommandEditCurrent();
    [CompilerGeneratedAttribute]
public virtual bool get_GenerateOrderBookFromLevel1();
    [CompilerGeneratedAttribute]
public virtual void set_GenerateOrderBookFromLevel1(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ReConnectionSettings get_ReConnectionSettings();
    public sealed virtual IdGenerator get_TransactionIdGenerator();
    public void set_TransactionIdGenerator(IdGenerator value);
    public virtual bool get_ExtraSetup();
    [CompilerGeneratedAttribute]
public sealed virtual void add_NewOutMessage(Action`1<Message> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NewOutMessage(Action`1<Message> value);
    private sealed virtual override ChannelStates StockSharp.Messages.IMessageChannel.get_State();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Open();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Close();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Suspend();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Resume();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Clear();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.add_StateChanged(Action value);
    private sealed virtual override void StockSharp.Messages.IMessageChannel.remove_StateChanged(Action value);
    public virtual String[] get_AssociatedBoards();
    protected virtual bool ValidateSecurityId(SecurityId secId);
    public sealed virtual bool SendInMessage(Message message);
    protected abstract virtual bool OnSendInMessage(Message message);
    protected internal virtual void SendOutMessage(Message message);
    private void InitMessageLocalTime(Message message);
    protected void SendOutDisconnectMessage(bool expected);
    protected void SendOutDisconnectMessage(Exception error);
    protected void SendOutError(string description);
    protected void SendOutError(Exception error);
    protected void SendSubscriptionReply(long originalTransactionId, Exception error);
    protected void SendSubscriptionNotSupported(long originalTransactionId);
    protected void SendSubscriptionFinished(long originalTransactionId, Nullable`1<DateTimeOffset> nextFrom);
    protected void SendSubscriptionOnline(long originalTransactionId);
    protected void SendSubscriptionResult(ISubscriptionMessage message);
    public virtual IOrderLogMarketDepthBuilder CreateOrderLogMarketDepthBuilder(SecurityId securityId);
    protected virtual IEnumerable`1<TimeSpan> get_TimeFrames();
    [ObsoleteAttribute("Use GetCandleArgs method.")]
protected virtual IEnumerable`1<TimeSpan> GetTimeFrames(SecurityId securityId, Nullable`1<DateTimeOffset> from, Nullable`1<DateTimeOffset> to);
    public virtual IEnumerable`1<object> GetCandleArgs(Type candleType, SecurityId securityId, Nullable`1<DateTimeOffset> from, Nullable`1<DateTimeOffset> to);
    public virtual TimeSpan GetHistoryStepSize(SecurityId securityId, DataType dataType, TimeSpan& iterationInterval);
    public virtual Nullable`1<int> GetMaxCount(DataType dataType);
    public virtual bool IsAllDownloadingSupported(DataType dataType);
    public virtual bool IsSecurityRequired(DataType dataType);
    [CompilerGeneratedAttribute]
public virtual bool get_UseChannels();
    [CompilerGeneratedAttribute]
public virtual void set_UseChannels(bool value);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_IterationInterval();
    [CompilerGeneratedAttribute]
public virtual void set_IterationInterval(TimeSpan value);
    public virtual Nullable`1<TimeSpan> get_LookupTimeout();
    public virtual Nullable`1<bool> get_IsPositionsEmulationRequired();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual void Load(SettingsStorage storage);
    public virtual void Save(SettingsStorage storage);
    public virtual IMessageChannel Clone();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private String[] <Save>b__148_0();
}
[FlagsAttribute]
[DataContractAttribute]
public enum StockSharp.Messages.MessageAdapterCategories : Enum {
    public int value__;
    [EnumMemberAttribute]
public static MessageAdapterCategories Russia;
    [EnumMemberAttribute]
public static MessageAdapterCategories US;
    [EnumMemberAttribute]
public static MessageAdapterCategories Europe;
    [EnumMemberAttribute]
public static MessageAdapterCategories Asia;
    [EnumMemberAttribute]
public static MessageAdapterCategories Stock;
    [EnumMemberAttribute]
public static MessageAdapterCategories FX;
    [EnumMemberAttribute]
public static MessageAdapterCategories Crypto;
    [EnumMemberAttribute]
public static MessageAdapterCategories History;
    [EnumMemberAttribute]
public static MessageAdapterCategories RealTime;
    [EnumMemberAttribute]
public static MessageAdapterCategories Free;
    [EnumMemberAttribute]
public static MessageAdapterCategories Paid;
    [EnumMemberAttribute]
public static MessageAdapterCategories Ticks;
    [EnumMemberAttribute]
public static MessageAdapterCategories Candles;
    [EnumMemberAttribute]
public static MessageAdapterCategories MarketDepth;
    [EnumMemberAttribute]
public static MessageAdapterCategories Level1;
    [EnumMemberAttribute]
public static MessageAdapterCategories OrderLog;
    [EnumMemberAttribute]
public static MessageAdapterCategories News;
    [EnumMemberAttribute]
public static MessageAdapterCategories Transactions;
    [EnumMemberAttribute]
public static MessageAdapterCategories Tool;
    [EnumMemberAttribute]
public static MessageAdapterCategories Futures;
    [EnumMemberAttribute]
public static MessageAdapterCategories Options;
    [EnumMemberAttribute]
public static MessageAdapterCategories Commodities;
}
public class StockSharp.Messages.MessageAdapterCategoryAttribute : Attribute {
    [CompilerGeneratedAttribute]
private MessageAdapterCategories <Categories>k__BackingField;
    public MessageAdapterCategories Categories { get; }
    public MessageAdapterCategoryAttribute(MessageAdapterCategories categories);
    [CompilerGeneratedAttribute]
public MessageAdapterCategories get_Categories();
}
public abstract class StockSharp.Messages.MessageAdapterWrapper : Cloneable`1<IMessageChannel> {
    private IMessageAdapter _innerAdapter;
    [CompilerGeneratedAttribute]
private bool <OwnInnerAdapter>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Message> NewOutMessage;
    private string _innerAdapterName;
    public IMessageAdapter InnerAdapter { get; public set; }
    public bool OwnInnerAdapter { get; public set; }
    private ChannelStates StockSharp.Messages.IMessageChannel.State { get; }
    protected bool SendInBackFurther { get; }
    private Guid StockSharp.Logging.ILogSource.Id { get; }
    private string StockSharp.Logging.ILogSource.Name { get; private set; }
    public ILogSource Parent { get; public set; }
    private LogLevels StockSharp.Logging.ILogSource.LogLevel { get; private set; }
    public DateTimeOffset CurrentTime { get; }
    private bool StockSharp.Logging.ILogSource.IsRoot { get; }
    public bool CheckTimeFrameByRequest { get; }
    public ReConnectionSettings ReConnectionSettings { get; }
    public IdGenerator TransactionIdGenerator { get; }
    public IEnumerable`1<MessageTypeInfo> PossibleSupportedMessages { get; }
    public IEnumerable`1<MessageTypes> SupportedInMessages { get; public set; }
    public IEnumerable`1<MessageTypes> SupportedResultMessages { get; }
    public IEnumerable`1<DataType> SupportedMarketDataTypes { get; }
    public TimeSpan HeartbeatInterval { get; public set; }
    public string StorageName { get; }
    public bool IsNativeIdentifiersPersistable { get; }
    public bool IsNativeIdentifiers { get; }
    public bool IsFullCandlesOnly { get; }
    public bool IsSupportSubscriptions { get; }
    public bool IsSupportPartialDownloading { get; }
    public MessageAdapterCategories Categories { get; }
    private IEnumerable`1<Tuple`2<string, Type>> StockSharp.Messages.IMessageAdapter.SecurityExtendedFields { get; }
    public IEnumerable`1<int> SupportedOrderBookDepths { get; }
    public bool IsSupportOrderBookIncrements { get; }
    public bool IsSupportExecutionsPnL { get; }
    public bool IsSecurityNewsOnly { get; }
    public IEnumerable`1<Level1Fields> CandlesBuildFrom { get; }
    public bool IsSupportTransactionLog { get; }
    private Type StockSharp.Messages.IMessageAdapter.OrderConditionType { get; }
    private bool StockSharp.Messages.IMessageAdapter.HeartbeatBeforConnect { get; }
    private Uri StockSharp.Messages.IMessageAdapter.Icon { get; }
    private bool StockSharp.Messages.IMessageAdapter.IsAutoReplyOnTransactonalUnsubscription { get; }
    private bool StockSharp.Messages.IMessageAdapter.IsReplaceCommandEditCurrent { get; }
    private bool StockSharp.Messages.IMessageAdapter.EnqueueSubscriptions { get; private set; }
    private bool StockSharp.Messages.IMessageAdapter.UseChannels { get; }
    private TimeSpan StockSharp.Messages.IMessageAdapter.IterationInterval { get; }
    private Nullable`1<TimeSpan> StockSharp.Messages.IMessageAdapter.LookupTimeout { get; }
    private string StockSharp.Messages.IMessageAdapter.FeatureName { get; }
    private bool StockSharp.Messages.IMessageAdapter.ExtraSetup { get; }
    public Nullable`1<bool> IsPositionsEmulationRequired { get; }
    private bool StockSharp.Messages.IMessageAdapter.GenerateOrderBookFromLevel1 { get; private set; }
    private String[] StockSharp.Messages.IMessageAdapter.AssociatedBoards { get; }
    protected MessageAdapterWrapper(IMessageAdapter innerAdapter);
    private IMessageAdapter GetUnderlyingAdapter(IMessageAdapter adapter);
    public sealed virtual IMessageAdapter get_InnerAdapter();
    public sealed virtual void set_InnerAdapter(IMessageAdapter value);
    [CompilerGeneratedAttribute]
public bool get_OwnInnerAdapter();
    [CompilerGeneratedAttribute]
public void set_OwnInnerAdapter(bool value);
    protected virtual void InnerAdapterNewOutMessage(Message message);
    protected virtual void OnInnerAdapterNewOutMessage(Message message);
    protected void RaiseNewOutMessage(Message message);
    private sealed virtual override ChannelStates StockSharp.Messages.IMessageChannel.get_State();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Open();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Close();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Suspend();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Resume();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Clear();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.add_StateChanged(Action value);
    private sealed virtual override void StockSharp.Messages.IMessageChannel.remove_StateChanged(Action value);
    protected virtual bool get_SendInBackFurther();
    public virtual bool SendInMessage(Message message);
    protected virtual bool OnSendInMessage(Message message);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NewOutMessage(Action`1<Message> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NewOutMessage(Action`1<Message> value);
    public virtual void Load(SettingsStorage storage);
    public virtual void Save(SettingsStorage storage);
    private sealed virtual override Guid StockSharp.Logging.ILogSource.get_Id();
    private sealed virtual override string StockSharp.Logging.ILogSource.get_Name();
    private sealed virtual override void StockSharp.Logging.ILogSource.set_Name(string value);
    public virtual ILogSource get_Parent();
    public virtual void set_Parent(ILogSource value);
    public sealed virtual void add_ParentRemoved(Action`1<ILogSource> value);
    public sealed virtual void remove_ParentRemoved(Action`1<ILogSource> value);
    private sealed virtual override LogLevels StockSharp.Logging.ILogSource.get_LogLevel();
    private sealed virtual override void StockSharp.Logging.ILogSource.set_LogLevel(LogLevels value);
    public sealed virtual DateTimeOffset get_CurrentTime();
    private sealed virtual override bool StockSharp.Logging.ILogSource.get_IsRoot();
    private sealed virtual override void StockSharp.Logging.ILogSource.add_Log(Action`1<LogMessage> value);
    private sealed virtual override void StockSharp.Logging.ILogSource.remove_Log(Action`1<LogMessage> value);
    private sealed virtual override void StockSharp.Logging.ILogReceiver.AddLog(LogMessage message);
    public sealed virtual bool get_CheckTimeFrameByRequest();
    public sealed virtual ReConnectionSettings get_ReConnectionSettings();
    public sealed virtual IdGenerator get_TransactionIdGenerator();
    public virtual IEnumerable`1<MessageTypeInfo> get_PossibleSupportedMessages();
    public virtual IEnumerable`1<MessageTypes> get_SupportedInMessages();
    public virtual void set_SupportedInMessages(IEnumerable`1<MessageTypes> value);
    public virtual IEnumerable`1<MessageTypes> get_SupportedResultMessages();
    public virtual IEnumerable`1<DataType> get_SupportedMarketDataTypes();
    public virtual IEnumerable`1<DataType> GetSupportedDataTypes(SecurityId securityId);
    public sealed virtual TimeSpan get_HeartbeatInterval();
    public sealed virtual void set_HeartbeatInterval(TimeSpan value);
    public sealed virtual string get_StorageName();
    public virtual bool get_IsNativeIdentifiersPersistable();
    public virtual bool get_IsNativeIdentifiers();
    public virtual bool get_IsFullCandlesOnly();
    public virtual bool get_IsSupportSubscriptions();
    public virtual bool IsSupportCandlesUpdates(MarketDataMessage subscription);
    public virtual bool IsSupportCandlesPriceLevels(MarketDataMessage subscription);
    public virtual bool get_IsSupportPartialDownloading();
    public virtual MessageAdapterCategories get_Categories();
    private sealed virtual override IEnumerable`1<Tuple`2<string, Type>> StockSharp.Messages.IMessageAdapter.get_SecurityExtendedFields();
    public virtual IEnumerable`1<int> get_SupportedOrderBookDepths();
    public virtual bool get_IsSupportOrderBookIncrements();
    public virtual bool get_IsSupportExecutionsPnL();
    public virtual bool get_IsSecurityNewsOnly();
    public sealed virtual IEnumerable`1<Level1Fields> get_CandlesBuildFrom();
    public virtual bool get_IsSupportTransactionLog();
    private sealed virtual override Type StockSharp.Messages.IMessageAdapter.get_OrderConditionType();
    private sealed virtual override bool StockSharp.Messages.IMessageAdapter.get_HeartbeatBeforConnect();
    private sealed virtual override Uri StockSharp.Messages.IMessageAdapter.get_Icon();
    private sealed virtual override bool StockSharp.Messages.IMessageAdapter.get_IsAutoReplyOnTransactonalUnsubscription();
    private sealed virtual override bool StockSharp.Messages.IMessageAdapter.get_IsReplaceCommandEditCurrent();
    private sealed virtual override bool StockSharp.Messages.IMessageAdapter.get_EnqueueSubscriptions();
    private sealed virtual override void StockSharp.Messages.IMessageAdapter.set_EnqueueSubscriptions(bool value);
    private sealed virtual override bool StockSharp.Messages.IMessageAdapter.get_UseChannels();
    private sealed virtual override TimeSpan StockSharp.Messages.IMessageAdapter.get_IterationInterval();
    private sealed virtual override Nullable`1<TimeSpan> StockSharp.Messages.IMessageAdapter.get_LookupTimeout();
    private sealed virtual override string StockSharp.Messages.IMessageAdapter.get_FeatureName();
    private sealed virtual override bool StockSharp.Messages.IMessageAdapter.get_ExtraSetup();
    public virtual Nullable`1<bool> get_IsPositionsEmulationRequired();
    private sealed virtual override bool StockSharp.Messages.IMessageAdapter.get_GenerateOrderBookFromLevel1();
    private sealed virtual override void StockSharp.Messages.IMessageAdapter.set_GenerateOrderBookFromLevel1(bool value);
    private sealed virtual override String[] StockSharp.Messages.IMessageAdapter.get_AssociatedBoards();
    private sealed virtual override IOrderLogMarketDepthBuilder StockSharp.Messages.IMessageAdapter.CreateOrderLogMarketDepthBuilder(SecurityId securityId);
    public virtual IEnumerable`1<object> GetCandleArgs(Type candleType, SecurityId securityId, Nullable`1<DateTimeOffset> from, Nullable`1<DateTimeOffset> to);
    public virtual TimeSpan GetHistoryStepSize(SecurityId securityId, DataType dataType, TimeSpan& iterationInterval);
    public virtual Nullable`1<int> GetMaxCount(DataType dataType);
    public virtual bool IsAllDownloadingSupported(DataType dataType);
    public virtual bool IsSecurityRequired(DataType dataType);
    public virtual void Dispose();
    public virtual string ToString();
}
public enum StockSharp.Messages.MessageBackModes : Enum {
    public int value__;
    public static MessageBackModes None;
    public static MessageBackModes Direct;
    public static MessageBackModes Chain;
}
public class StockSharp.Messages.MessageByLocalTimeQueue : BaseMessageQueue {
    public virtual void Enqueue(Message message);
}
public class StockSharp.Messages.MessageByOrderQueue : BaseMessageQueue {
    private IdGenerator _idGen;
    public virtual void Enqueue(Message message);
}
public enum StockSharp.Messages.MessageOfflineModes : Enum {
    public int value__;
    public static MessageOfflineModes None;
    public static MessageOfflineModes Ignore;
    public static MessageOfflineModes Cancel;
}
public class StockSharp.Messages.MessageTypeInfo : Equatable`1<MessageTypeInfo> {
    [CompilerGeneratedAttribute]
private MessageTypes <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsMarketData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public MessageTypes Type { get; }
    public Nullable`1<bool> IsMarketData { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public MessageTypeInfo(MessageTypes type, Nullable`1<bool> isMarketData);
    public MessageTypeInfo(MessageTypes type, Nullable`1<bool> isMarketData, string displayName, string description);
    [CompilerGeneratedAttribute]
public MessageTypes get_Type();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsMarketData();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public string get_Description();
    public virtual string ToString();
    protected virtual bool OnEquals(MessageTypeInfo other);
    public virtual int GetHashCode();
    public virtual MessageTypeInfo Clone();
}
public enum StockSharp.Messages.MessageTypes : Enum {
    public int value__;
    public static MessageTypes Security;
    public static MessageTypes Level1Change;
    public static MessageTypes OrderRegister;
    public static MessageTypes OrderReplace;
    [ObsoleteAttribute]
public static MessageTypes OrderPairReplace;
    public static MessageTypes OrderCancel;
    public static MessageTypes OrderGroupCancel;
    public static MessageTypes Time;
    public static MessageTypes News;
    [ObsoleteAttribute]
public static MessageTypes OrderError;
    public static MessageTypes Portfolio;
    [ObsoleteAttribute]
public static MessageTypes Position;
    public static MessageTypes CandleTimeFrame;
    public static MessageTypes QuoteChange;
    public static MessageTypes Execution;
    public static MessageTypes PositionChange;
    [ObsoleteAttribute]
public static MessageTypes PortfolioChange;
    public static MessageTypes MarketData;
    [ObsoleteAttribute]
public static MessageTypes NativeSecurityId;
    public static MessageTypes Connect;
    public static MessageTypes Disconnect;
    public static MessageTypes SecurityLookup;
    public static MessageTypes PortfolioLookup;
    [ObsoleteAttribute]
public static MessageTypes SecurityLookupResult;
    public static MessageTypes Error;
    public static MessageTypes BoardState;
    public static MessageTypes OrderStatus;
    public static MessageTypes Board;
    [ObsoleteAttribute]
public static MessageTypes PortfolioLookupResult;
    public static MessageTypes ChangePassword;
    [ObsoleteAttribute]
public static MessageTypes ClearQueue;
    public static MessageTypes CandleTick;
    public static MessageTypes CandleVolume;
    public static MessageTypes CandleRange;
    public static MessageTypes CandlePnF;
    public static MessageTypes CandleRenko;
    public static MessageTypes Reset;
    public static MessageTypes SubscriptionFinished;
    public static MessageTypes Remove;
    public static MessageTypes UserInfo;
    public static MessageTypes UserLookup;
    [ObsoleteAttribute]
public static MessageTypes UserLookupResult;
    [ObsoleteAttribute]
public static MessageTypes BoardRequest;
    public static MessageTypes BoardLookup;
    [ObsoleteAttribute]
public static MessageTypes BoardLookupResult;
    public static MessageTypes UserRequest;
    public static MessageTypes TimeFrameLookup;
    public static MessageTypes TimeFrameInfo;
    [ObsoleteAttribute]
public static MessageTypes SecurityMappingRequest;
    [ObsoleteAttribute]
public static MessageTypes SecurityMappingInfo;
    public static MessageTypes SecurityLegsRequest;
    public static MessageTypes SecurityLegsInfo;
    [ObsoleteAttribute]
public static MessageTypes AdapterListRequest;
    [ObsoleteAttribute]
public static MessageTypes AdapterListFinished;
    public static MessageTypes Command;
    [ObsoleteAttribute]
public static MessageTypes AdapterResponse;
    public static MessageTypes SubscriptionListRequest;
    [ObsoleteAttribute]
public static MessageTypes SubscriptionListFinished;
    [ObsoleteAttribute]
public static MessageTypes SecurityRouteListRequest;
    [ObsoleteAttribute]
public static MessageTypes SecurityRoute;
    [ObsoleteAttribute]
public static MessageTypes SecurityRouteListFinished;
    [ObsoleteAttribute]
public static MessageTypes PortfolioRouteListRequest;
    [ObsoleteAttribute]
public static MessageTypes PortfolioRoute;
    [ObsoleteAttribute]
public static MessageTypes PortfolioRouteListFinished;
    public static MessageTypes SecurityMapping;
    public static MessageTypes SubscriptionOnline;
    public static MessageTypes SubscriptionResponse;
    public static MessageTypes CandleHeikinAshi;
    public static MessageTypes ProcessSuspended;
    public static MessageTypes EmulationState;
    [ObsoleteAttribute]
public static MessageTypes ChangeTimeInterval;
    [ObsoleteAttribute]
public static MessageTypes StrategyInfo;
    [ObsoleteAttribute]
public static MessageTypes StrategyType;
    [ObsoleteAttribute]
public static MessageTypes StrategyState;
    public static MessageTypes RemoteFile;
    public static MessageTypes RemoteFileCommand;
    [ObsoleteAttribute]
public static MessageTypes StrategySubscriptionInfo;
    [ObsoleteAttribute]
public static MessageTypes StrategyBacktestResult;
    public static MessageTypes AvailableDataRequest;
    public static MessageTypes AvailableDataInfo;
}
[DataContractAttribute]
[DisplayAttribute]
public class StockSharp.Messages.NewsMessage : BaseSubscriptionIdMessage`1<NewsMessage> {
    [CompilerGeneratedAttribute]
private long <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BoardCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SecurityId> <SecurityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Headline>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Story>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ServerTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NewsPriorities> <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ProductId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ExpiryDate>k__BackingField;
    private Int64[] _attachments;
    [CompilerGeneratedAttribute]
private long <SeqNum>k__BackingField;
    [DataMemberAttribute]
public long TransactionId { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string BoardCode { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<SecurityId> SecurityId { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Source { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Headline { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Story { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public DateTimeOffset ServerTime { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<NewsPriorities> Priority { get; public set; }
    [DataMemberAttribute]
[BrowsableAttribute("False")]
public long ProductId { get; public set; }
    [DataMemberAttribute]
public string Language { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> ExpiryDate { get; public set; }
    public DataType DataType { get; }
    [DataMemberAttribute]
public Int64[] Attachments { get; public set; }
    [DataMemberAttribute]
public long SeqNum { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual long get_TransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionId(long value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_BoardCode();
    [CompilerGeneratedAttribute]
public void set_BoardCode(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<SecurityId> get_SecurityId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SecurityId(Nullable`1<SecurityId> value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Headline();
    [CompilerGeneratedAttribute]
public void set_Headline(string value);
    [CompilerGeneratedAttribute]
public string get_Story();
    [CompilerGeneratedAttribute]
public void set_Story(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_ServerTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServerTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<NewsPriorities> get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(Nullable`1<NewsPriorities> value);
    [CompilerGeneratedAttribute]
public long get_ProductId();
    [CompilerGeneratedAttribute]
public void set_ProductId(long value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ExpiryDate();
    [CompilerGeneratedAttribute]
public void set_ExpiryDate(Nullable`1<DateTimeOffset> value);
    public virtual DataType get_DataType();
    public Int64[] get_Attachments();
    public void set_Attachments(Int64[] value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_SeqNum();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SeqNum(long value);
    public virtual string ToString();
    public virtual void CopyTo(NewsMessage destination);
}
[DataContractAttribute]
public enum StockSharp.Messages.NewsPriorities : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static NewsPriorities Low;
    [EnumMemberAttribute]
[DisplayAttribute]
public static NewsPriorities Regular;
    [EnumMemberAttribute]
[DisplayAttribute]
public static NewsPriorities High;
}
[DataContractAttribute]
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class StockSharp.Messages.NtmOrderInfo : Cloneable`1<NtmOrderInfo> {
    [CompilerGeneratedAttribute]
private string <Partner>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <SettleDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MatchRef>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SettleCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForAccount>k__BackingField;
    [CompilerGeneratedAttribute]
private CurrencyTypes <CurrencyType>k__BackingField;
    [DataMemberAttribute]
public string Partner { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> SettleDate { get; public set; }
    [DataMemberAttribute]
public string MatchRef { get; public set; }
    [DataMemberAttribute]
public string SettleCode { get; public set; }
    [DataMemberAttribute]
public string ForAccount { get; public set; }
    [DataMemberAttribute]
public CurrencyTypes CurrencyType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Partner();
    [CompilerGeneratedAttribute]
public void set_Partner(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_SettleDate();
    [CompilerGeneratedAttribute]
public void set_SettleDate(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public string get_MatchRef();
    [CompilerGeneratedAttribute]
public void set_MatchRef(string value);
    [CompilerGeneratedAttribute]
public string get_SettleCode();
    [CompilerGeneratedAttribute]
public void set_SettleCode(string value);
    [CompilerGeneratedAttribute]
public string get_ForAccount();
    [CompilerGeneratedAttribute]
public void set_ForAccount(string value);
    [CompilerGeneratedAttribute]
public CurrencyTypes get_CurrencyType();
    [CompilerGeneratedAttribute]
public void set_CurrencyType(CurrencyTypes value);
    public virtual NtmOrderInfo Clone();
    public sealed virtual void Load(SettingsStorage storage);
    public sealed virtual void Save(SettingsStorage storage);
}
[DataContractAttribute]
public enum StockSharp.Messages.OptionStyles : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static OptionStyles European;
    [EnumMemberAttribute]
[DisplayAttribute]
public static OptionStyles American;
    [EnumMemberAttribute]
[DisplayAttribute]
public static OptionStyles Exotic;
}
[DataContractAttribute]
public enum StockSharp.Messages.OptionTypes : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static OptionTypes Call;
    [EnumMemberAttribute]
[DisplayAttribute]
public static OptionTypes Put;
}
public class StockSharp.Messages.OrderBookIncrementBuilder : BaseLogReceiver {
    private static QuoteChangeStates _none;
    private QuoteChangeStates _state;
    private SortedList`2<decimal, QuoteChange> _bids;
    private SortedList`2<decimal, QuoteChange> _asks;
    private List`1<QuoteChange> _bidsByPos;
    private List`1<QuoteChange> _asksByPos;
    private HashSet`1<long> _invalidSubscriptions;
    public SecurityId SecurityId;
    public OrderBookIncrementBuilder(SecurityId securityId);
    public QuoteChangeMessage TryApply(QuoteChangeMessage change, long subscriptionId);
    [CompilerGeneratedAttribute]
private void <TryApply>g__WriteWarning|9_0(<>c__DisplayClass9_0& );
    [CompilerGeneratedAttribute]
private bool <TryApply>g__CheckSwitch|9_1(<>c__DisplayClass9_0& );
    [CompilerGeneratedAttribute]
internal static void <TryApply>g__Apply|9_2(IEnumerable`1<QuoteChange> from, SortedList`2<decimal, QuoteChange> to);
    [CompilerGeneratedAttribute]
internal static void <TryApply>g__ApplyByPos|9_3(IEnumerable`1<QuoteChange> from, List`1<QuoteChange> to);
}
[DataContractAttribute]
public class StockSharp.Messages.OrderCancelMessage : OrderMessage {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <OrderId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderStringId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Balance>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Volume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Sides> <Side>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<long> OrderId { get; public set; }
    [DataMemberAttribute]
public string OrderStringId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> Balance { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> Volume { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Sides> Side { get; public set; }
    protected OrderCancelMessage(MessageTypes type);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_OrderId();
    [CompilerGeneratedAttribute]
public void set_OrderId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_OrderStringId();
    [CompilerGeneratedAttribute]
public void set_OrderStringId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Balance();
    [CompilerGeneratedAttribute]
public void set_Balance(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Volume();
    [CompilerGeneratedAttribute]
public void set_Volume(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Sides> get_Side();
    [CompilerGeneratedAttribute]
public void set_Side(Nullable`1<Sides> value);
    protected void CopyTo(OrderCancelMessage destination);
    public virtual Message Clone();
    public virtual string ToString();
}
[DataContractAttribute]
public abstract class StockSharp.Messages.OrderCondition : Cloneable`1<OrderCondition> {
    private SynchronizedDictionary`2<string, object> _parameters;
    [BrowsableAttribute("False")]
[DataMemberAttribute]
public IDictionary`2<string, object> Parameters { get; public set; }
    public IDictionary`2<string, object> get_Parameters();
    public void set_Parameters(IDictionary`2<string, object> value);
    public virtual OrderCondition Clone();
    public virtual string ToString();
}
[AttributeUsageAttribute("4")]
public class StockSharp.Messages.OrderConditionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ConditionType>k__BackingField;
    public Type ConditionType { get; }
    public OrderConditionAttribute(Type conditionType);
    [CompilerGeneratedAttribute]
public Type get_ConditionType();
}
[DataContractAttribute]
public class StockSharp.Messages.OrderGroupCancelMessage : OrderMessage {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsStop>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Sides> <Side>k__BackingField;
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<bool> IsStop { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<Sides> Side { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsStop();
    [CompilerGeneratedAttribute]
public void set_IsStop(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Sides> get_Side();
    [CompilerGeneratedAttribute]
public void set_Side(Nullable`1<Sides> value);
    public virtual string ToString();
    public virtual Message Clone();
    public void CopyTo(OrderGroupCancelMessage destination);
}
public enum StockSharp.Messages.OrderLogCancelReasons : Enum {
    public int value__;
    public static OrderLogCancelReasons ReRegistered;
    public static OrderLogCancelReasons Canceled;
    public static OrderLogCancelReasons GroupCanceled;
    public static OrderLogCancelReasons CrossTrade;
}
public class StockSharp.Messages.OrderLogMarketDepthBuilder : object {
    private Dictionary`2<long, decimal> _ordersByNum;
    private Dictionary`2<string, decimal> _ordersByString;
    private SortedList`2<decimal, QuoteChange> _bids;
    private SortedList`2<decimal, QuoteChange> _asks;
    private QuoteChangeMessage _depth;
    public OrderLogMarketDepthBuilder(SecurityId securityId);
    public OrderLogMarketDepthBuilder(QuoteChangeMessage depth);
    private sealed virtual override QuoteChangeMessage StockSharp.Messages.IOrderLogMarketDepthBuilder.GetSnapshot(DateTimeOffset serverTime);
    private sealed virtual override QuoteChangeMessage StockSharp.Messages.IOrderLogMarketDepthBuilder.Update(ExecutionMessage item);
    [CompilerGeneratedAttribute]
internal static QuoteChange <StockSharp.Messages.IOrderLogMarketDepthBuilder.Update>g__ProcessRegister|8_0(T id, Dictionary`2<T, decimal> orders, <>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
internal static Nullable`1<QuoteChange> <StockSharp.Messages.IOrderLogMarketDepthBuilder.Update>g__ProcessMatched|8_3(T id, Dictionary`2<T, decimal> orders, <>c__DisplayClass8_0& , <>c__DisplayClass8_1& );
    [CompilerGeneratedAttribute]
internal static Nullable`1<QuoteChange> <StockSharp.Messages.IOrderLogMarketDepthBuilder.Update>g__ProcessCanceled|8_1(T id, Dictionary`2<T, decimal> orders, <>c__DisplayClass8_0& );
}
[DataContractAttribute]
public abstract class StockSharp.Messages.OrderMessage : SecurityMessage {
    [CompilerGeneratedAttribute]
private long <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PortfolioName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<OrderTypes> <OrderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserOrderId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StrategyId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrokerCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientCode>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderCondition <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MarginModes> <MarginMode>k__BackingField;
    [DataMemberAttribute]
[DisplayAttribute]
public long TransactionId { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string PortfolioName { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<OrderTypes> OrderType { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string UserOrderId { get; public set; }
    [DataMemberAttribute]
public string StrategyId { get; public set; }
    [DisplayAttribute]
public string BrokerCode { get; public set; }
    [DisplayAttribute]
public string ClientCode { get; public set; }
    [DisplayAttribute]
[XmlIgnoreAttribute]
public OrderCondition Condition { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Comment { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<MarginModes> MarginMode { get; public set; }
    protected OrderMessage(MessageTypes type);
    [CompilerGeneratedAttribute]
public sealed virtual long get_TransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PortfolioName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PortfolioName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<OrderTypes> get_OrderType();
    [CompilerGeneratedAttribute]
public void set_OrderType(Nullable`1<OrderTypes> value);
    [CompilerGeneratedAttribute]
public string get_UserOrderId();
    [CompilerGeneratedAttribute]
public void set_UserOrderId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StrategyId();
    [CompilerGeneratedAttribute]
public void set_StrategyId(string value);
    [CompilerGeneratedAttribute]
public string get_BrokerCode();
    [CompilerGeneratedAttribute]
public void set_BrokerCode(string value);
    [CompilerGeneratedAttribute]
public string get_ClientCode();
    [CompilerGeneratedAttribute]
public void set_ClientCode(string value);
    [CompilerGeneratedAttribute]
public OrderCondition get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(OrderCondition value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<MarginModes> get_MarginMode();
    [CompilerGeneratedAttribute]
public void set_MarginMode(Nullable`1<MarginModes> value);
    public void CopyTo(OrderMessage destination);
    public virtual string ToString();
}
[DataContractAttribute]
[ObsoleteAttribute]
public class StockSharp.Messages.OrderPairReplaceMessage : Message {
    [CompilerGeneratedAttribute]
private OrderReplaceMessage <Message1>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderReplaceMessage <Message2>k__BackingField;
    [DataMemberAttribute]
public OrderReplaceMessage Message1 { get; public set; }
    [DataMemberAttribute]
public OrderReplaceMessage Message2 { get; public set; }
    [CompilerGeneratedAttribute]
public OrderReplaceMessage get_Message1();
    [CompilerGeneratedAttribute]
public void set_Message1(OrderReplaceMessage value);
    [CompilerGeneratedAttribute]
public OrderReplaceMessage get_Message2();
    [CompilerGeneratedAttribute]
public void set_Message2(OrderReplaceMessage value);
    public virtual Message Clone();
    public virtual string ToString();
}
[DataContractAttribute]
public enum StockSharp.Messages.OrderPositionEffects : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static OrderPositionEffects Default;
    [EnumMemberAttribute]
[DisplayAttribute]
public static OrderPositionEffects OpenOnly;
    [EnumMemberAttribute]
[DisplayAttribute]
public static OrderPositionEffects CloseOnly;
}
[DataContractAttribute]
public class StockSharp.Messages.OrderRegisterMessage : OrderMessage {
    [CompilerGeneratedAttribute]
private decimal <Price>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Volume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <VisibleVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Sides <Side>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <TillDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeInForce> <TimeInForce>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsMarketMaker>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Slippage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsManual>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <MinOrderVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<OrderPositionEffects> <PositionEffect>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PostOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Leverage>k__BackingField;
    [DataMemberAttribute]
[DisplayAttribute]
public decimal Price { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public decimal Volume { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> VisibleVolume { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Sides Side { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<DateTimeOffset> TillDate { get; public set; }
    [DisplayAttribute]
public Nullable`1<TimeInForce> TimeInForce { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<bool> IsMarketMaker { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> Slippage { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<bool> IsManual { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> MinOrderVolume { get; public set; }
    [DataMemberAttribute]
public Nullable`1<OrderPositionEffects> PositionEffect { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> PostOnly { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> Leverage { get; public set; }
    protected OrderRegisterMessage(MessageTypes type);
    [CompilerGeneratedAttribute]
public decimal get_Price();
    [CompilerGeneratedAttribute]
public void set_Price(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_Volume();
    [CompilerGeneratedAttribute]
public void set_Volume(decimal value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_VisibleVolume();
    [CompilerGeneratedAttribute]
public void set_VisibleVolume(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Sides get_Side();
    [CompilerGeneratedAttribute]
public void set_Side(Sides value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_TillDate();
    [CompilerGeneratedAttribute]
public void set_TillDate(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeInForce> get_TimeInForce();
    [CompilerGeneratedAttribute]
public void set_TimeInForce(Nullable`1<TimeInForce> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsMarketMaker();
    [CompilerGeneratedAttribute]
public void set_IsMarketMaker(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Slippage();
    [CompilerGeneratedAttribute]
public void set_Slippage(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsManual();
    [CompilerGeneratedAttribute]
public void set_IsManual(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_MinOrderVolume();
    [CompilerGeneratedAttribute]
public void set_MinOrderVolume(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<OrderPositionEffects> get_PositionEffect();
    [CompilerGeneratedAttribute]
public void set_PositionEffect(Nullable`1<OrderPositionEffects> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PostOnly();
    [CompilerGeneratedAttribute]
public void set_PostOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Leverage();
    [CompilerGeneratedAttribute]
public void set_Leverage(Nullable`1<int> value);
    public virtual Message Clone();
    public void CopyTo(OrderRegisterMessage destination);
    public virtual string ToString();
}
[DataContractAttribute]
public class StockSharp.Messages.OrderReplaceMessage : OrderRegisterMessage {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <OldOrderId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldOrderStringId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <OldOrderPrice>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <OldOrderVolume>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<long> OldOrderId { get; public set; }
    [DataMemberAttribute]
public string OldOrderStringId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> OldOrderPrice { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> OldOrderVolume { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_OldOrderId();
    [CompilerGeneratedAttribute]
public void set_OldOrderId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_OldOrderStringId();
    [CompilerGeneratedAttribute]
public void set_OldOrderStringId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_OldOrderPrice();
    [CompilerGeneratedAttribute]
public void set_OldOrderPrice(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_OldOrderVolume();
    [CompilerGeneratedAttribute]
public void set_OldOrderVolume(Nullable`1<decimal> value);
    public virtual Message Clone();
    public void CopyTo(OrderReplaceMessage destination);
    public virtual string ToString();
}
[DataContractAttribute]
public enum StockSharp.Messages.OrderStates : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static OrderStates None;
    [EnumMemberAttribute]
[DisplayAttribute]
public static OrderStates Active;
    [EnumMemberAttribute]
[DisplayAttribute]
public static OrderStates Done;
    [EnumMemberAttribute]
[DisplayAttribute]
public static OrderStates Failed;
    [EnumMemberAttribute]
[DisplayAttribute]
public static OrderStates Pending;
}
[DataContractAttribute]
public class StockSharp.Messages.OrderStatusMessage : OrderCancelMessage {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <From>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <To>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FillGapsDays> <FillGaps>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSubscribe>k__BackingField;
    private OrderStates[] _states;
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<DateTimeOffset> From { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<DateTimeOffset> To { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> Skip { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> Count { get; public set; }
    [DataMemberAttribute]
public Nullable`1<FillGapsDays> FillGaps { get; public set; }
    [DataMemberAttribute]
public bool IsSubscribe { get; public set; }
    [DataMemberAttribute]
public OrderStates[] States { get; public set; }
    private bool StockSharp.Messages.ISubscriptionMessage.FilterEnabled { get; }
    private DataType StockSharp.Messages.ISubscriptionMessage.DataType { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_From();
    [CompilerGeneratedAttribute]
public sealed virtual void set_From(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_To();
    [CompilerGeneratedAttribute]
public sealed virtual void set_To(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_Skip();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Skip(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Count(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<FillGapsDays> get_FillGaps();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FillGaps(Nullable`1<FillGapsDays> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSubscribe();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsSubscribe(bool value);
    public OrderStates[] get_States();
    public void set_States(OrderStates[] value);
    private sealed virtual override bool StockSharp.Messages.ISubscriptionMessage.get_FilterEnabled();
    private sealed virtual override DataType StockSharp.Messages.ISubscriptionMessage.get_DataType();
    protected void CopyTo(OrderStatusMessage destination);
    public virtual Message Clone();
    public virtual string ToString();
}
[DataContractAttribute]
public enum StockSharp.Messages.OrderTypes : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static OrderTypes Limit;
    [EnumMemberAttribute]
[DisplayAttribute]
public static OrderTypes Market;
    [EnumMemberAttribute]
[DisplayAttribute]
public static OrderTypes Conditional;
}
public class StockSharp.Messages.PassThroughMessageAdapter : MessageAdapter {
    public PassThroughMessageAdapter(IdGenerator transactionIdGenerator);
    protected virtual bool OnSendInMessage(Message message);
}
public class StockSharp.Messages.PassThroughMessageChannel : Cloneable`1<IMessageChannel> {
    private Action`1<Message> _newMessage;
    private ChannelStates StockSharp.Messages.IMessageChannel.State { get; }
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override ChannelStates StockSharp.Messages.IMessageChannel.get_State();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.add_StateChanged(Action value);
    private sealed virtual override void StockSharp.Messages.IMessageChannel.remove_StateChanged(Action value);
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Open();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Close();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Suspend();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Resume();
    private sealed virtual override void StockSharp.Messages.IMessageChannel.Clear();
    private sealed virtual override bool StockSharp.Messages.IMessageChannel.SendInMessage(Message message);
    private sealed virtual override void StockSharp.Messages.IMessageChannel.add_NewOutMessage(Action`1<Message> value);
    private sealed virtual override void StockSharp.Messages.IMessageChannel.remove_NewOutMessage(Action`1<Message> value);
    public virtual IMessageChannel Clone();
}
[DataContractAttribute]
public class StockSharp.Messages.PnFArg : Equatable`1<PnFArg> {
    private Unit _boxSize;
    private int _reversalAmount;
    [DataMemberAttribute]
public Unit BoxSize { get; public set; }
    [DataMemberAttribute]
public int ReversalAmount { get; public set; }
    public Unit get_BoxSize();
    public void set_BoxSize(Unit value);
    public int get_ReversalAmount();
    public void set_ReversalAmount(int value);
    public virtual string ToString();
    public virtual PnFArg Clone();
    protected virtual bool OnEquals(PnFArg other);
    public virtual int GetHashCode();
}
[DataContractAttribute]
[DisplayAttribute]
public class StockSharp.Messages.PnFCandleMessage : TypedCandleMessage`1<PnFArg> {
    public virtual Message Clone();
}
[DataContractAttribute]
public class StockSharp.Messages.PortfolioLookupMessage : PortfolioMessage {
    [CompilerGeneratedAttribute]
private string <StrategyId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Sides> <Side>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SecurityId> <SecurityId>k__BackingField;
    [DataMemberAttribute]
public string StrategyId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Sides> Side { get; public set; }
    public DataType DataType { get; }
    [TypeConverterAttribute("StockSharp.Messages.StringToSecurityIdTypeConverter")]
public Nullable`1<SecurityId> SecurityId { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_StrategyId();
    [CompilerGeneratedAttribute]
public void set_StrategyId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Sides> get_Side();
    [CompilerGeneratedAttribute]
public void set_Side(Nullable`1<Sides> value);
    public virtual DataType get_DataType();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<SecurityId> get_SecurityId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SecurityId(Nullable`1<SecurityId> value);
    public virtual Message Clone();
    protected virtual void CopyTo(PortfolioLookupMessage destination);
    public virtual string ToString();
}
[DataContractAttribute]
public class StockSharp.Messages.PortfolioMessage : BaseSubscriptionIdMessage`1<PortfolioMessage> {
    [CompilerGeneratedAttribute]
private string <PortfolioName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CurrencyTypes> <Currency>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BoardCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientCode>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSubscribe>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <From>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <To>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FillGapsDays> <FillGaps>k__BackingField;
    [DataMemberAttribute]
[DisplayAttribute]
public string PortfolioName { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<CurrencyTypes> Currency { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string BoardCode { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string ClientCode { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public long TransactionId { get; public set; }
    [DataMemberAttribute]
public bool IsSubscribe { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<DateTimeOffset> From { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<DateTimeOffset> To { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> Skip { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> Count { get; public set; }
    [DataMemberAttribute]
public Nullable`1<FillGapsDays> FillGaps { get; public set; }
    public DataType DataType { get; }
    private bool StockSharp.Messages.ISubscriptionMessage.FilterEnabled { get; }
    protected PortfolioMessage(MessageTypes type);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PortfolioName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PortfolioName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<CurrencyTypes> get_Currency();
    [CompilerGeneratedAttribute]
public void set_Currency(Nullable`1<CurrencyTypes> value);
    [CompilerGeneratedAttribute]
public string get_BoardCode();
    [CompilerGeneratedAttribute]
public void set_BoardCode(string value);
    [CompilerGeneratedAttribute]
public string get_ClientCode();
    [CompilerGeneratedAttribute]
public void set_ClientCode(string value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_TransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSubscribe();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsSubscribe(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_From();
    [CompilerGeneratedAttribute]
public sealed virtual void set_From(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_To();
    [CompilerGeneratedAttribute]
public sealed virtual void set_To(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_Skip();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Skip(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Count(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<FillGapsDays> get_FillGaps();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FillGaps(Nullable`1<FillGapsDays> value);
    public virtual DataType get_DataType();
    private sealed virtual override bool StockSharp.Messages.ISubscriptionMessage.get_FilterEnabled();
    public virtual string ToString();
    public virtual void CopyTo(PortfolioMessage destination);
}
[DataContractAttribute]
public enum StockSharp.Messages.PortfolioStates : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PortfolioStates Active;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PortfolioStates Blocked;
}
[DataContractAttribute]
[DisplayAttribute]
public class StockSharp.Messages.PositionChangeMessage : BaseChangeMessage`2<PositionChangeMessage, PositionChangeTypes> {
    [CompilerGeneratedAttribute]
private string <PortfolioName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientCode>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityId <SecurityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DepoName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TPlusLimits> <LimitType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BoardCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StrategyId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Sides> <Side>k__BackingField;
    [DataMemberAttribute]
[DisplayAttribute]
public string PortfolioName { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string ClientCode { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public SecurityId SecurityId { get; public set; }
    [DisplayAttribute]
public string DepoName { get; public set; }
    [DisplayAttribute]
public Nullable`1<TPlusLimits> LimitType { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string BoardCode { get; public set; }
    [DataMemberAttribute]
public string StrategyId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Sides> Side { get; public set; }
    public DataType DataType { get; }
    protected PositionChangeMessage(MessageTypes type);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PortfolioName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PortfolioName(string value);
    [CompilerGeneratedAttribute]
public string get_ClientCode();
    [CompilerGeneratedAttribute]
public void set_ClientCode(string value);
    [CompilerGeneratedAttribute]
public sealed virtual SecurityId get_SecurityId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SecurityId(SecurityId value);
    [CompilerGeneratedAttribute]
public string get_DepoName();
    [CompilerGeneratedAttribute]
public void set_DepoName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TPlusLimits> get_LimitType();
    [CompilerGeneratedAttribute]
public void set_LimitType(Nullable`1<TPlusLimits> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_BoardCode();
    [CompilerGeneratedAttribute]
public void set_BoardCode(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StrategyId();
    [CompilerGeneratedAttribute]
public void set_StrategyId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Sides> get_Side();
    [CompilerGeneratedAttribute]
public void set_Side(Nullable`1<Sides> value);
    public virtual DataType get_DataType();
    public virtual Message Clone();
    public virtual void CopyTo(PositionChangeMessage destination);
    public virtual string ToString();
}
[DataContractAttribute]
public enum StockSharp.Messages.PositionChangeTypes : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes BeginValue;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes CurrentValue;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes BlockedValue;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes CurrentPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes AveragePrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes UnrealizedPnL;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes RealizedPnL;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes VariationMargin;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes Currency;
    [EnumMemberAttribute]
[DisplayAttribute]
[ObsoleteAttribute]
public static PositionChangeTypes ExtensionInfo;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes Leverage;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes Commission;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes CurrentValueInLots;
    [EnumMemberAttribute]
[DisplayAttribute]
[ObsoleteAttribute]
public static PositionChangeTypes DepoName;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes State;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes ExpirationDate;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes CommissionTaker;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes CommissionMaker;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes SettlementPrice;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes BuyOrdersCount;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes SellOrdersCount;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes BuyOrdersMargin;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes SellOrdersMargin;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes OrdersMargin;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes OrdersCount;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes TradesCount;
    [EnumMemberAttribute]
[DisplayAttribute]
public static PositionChangeTypes LiquidationPrice;
}
[DataContractAttribute]
public class StockSharp.Messages.ProcessSuspendedMessage : Message {
    [CompilerGeneratedAttribute]
private object <Arg>k__BackingField;
    [DataMemberAttribute]
public object Arg { get; }
    public ProcessSuspendedMessage(IMessageAdapter adapter, object arg);
    [CompilerGeneratedAttribute]
public object get_Arg();
    public virtual Message Clone();
}
[DataContractAttribute]
public class StockSharp.Messages.QuoteChange : ValueType {
    [CompilerGeneratedAttribute]
private decimal <Price>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Volume>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BoardCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OrdersCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <EndPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<QuoteChangeActions> <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private QuoteConditions <Condition>k__BackingField;
    private QuoteChange[] _innerQuotes;
    [DataMemberAttribute]
[DisplayAttribute]
public decimal Price { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public decimal Volume { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string BoardCode { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> OrdersCount { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> StartPosition { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> EndPosition { get; public set; }
    [DataMemberAttribute]
public Nullable`1<QuoteChangeActions> Action { get; public set; }
    [DataMemberAttribute]
public QuoteConditions Condition { get; public set; }
    public QuoteChange[] InnerQuotes { get; public set; }
    public QuoteChange(decimal price, decimal volume, Nullable`1<int> ordersCount, QuoteConditions condition);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public decimal get_Price();
    [CompilerGeneratedAttribute]
public void set_Price(decimal value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public decimal get_Volume();
    [CompilerGeneratedAttribute]
public void set_Volume(decimal value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_BoardCode();
    [CompilerGeneratedAttribute]
public void set_BoardCode(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<int> get_OrdersCount();
    [CompilerGeneratedAttribute]
public void set_OrdersCount(Nullable`1<int> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<int> get_StartPosition();
    [CompilerGeneratedAttribute]
public void set_StartPosition(Nullable`1<int> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<int> get_EndPosition();
    [CompilerGeneratedAttribute]
public void set_EndPosition(Nullable`1<int> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<QuoteChangeActions> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(Nullable`1<QuoteChangeActions> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public QuoteConditions get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(QuoteConditions value);
    public QuoteChange[] get_InnerQuotes();
    public void set_InnerQuotes(QuoteChange[] value);
    public virtual string ToString();
}
[DataContractAttribute]
public enum StockSharp.Messages.QuoteChangeActions : Enum {
    public byte value__;
    [EnumMemberAttribute]
public static QuoteChangeActions New;
    [EnumMemberAttribute]
public static QuoteChangeActions Update;
    [EnumMemberAttribute]
public static QuoteChangeActions Delete;
}
[DataContractAttribute]
public class StockSharp.Messages.QuoteChangeMessage : BaseSubscriptionIdMessage`1<QuoteChangeMessage> {
    [CompilerGeneratedAttribute]
private SecurityId <SecurityId>k__BackingField;
    private QuoteChange[] _bids;
    private QuoteChange[] _asks;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ServerTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <BuildFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFiltered>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CurrencyTypes> <Currency>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<QuoteChangeStates> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPositions>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SeqNum>k__BackingField;
    [DataMemberAttribute]
[DisplayAttribute]
public SecurityId SecurityId { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public QuoteChange[] Bids { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public QuoteChange[] Asks { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public DateTimeOffset ServerTime { get; public set; }
    [DataMemberAttribute]
public DataType BuildFrom { get; public set; }
    [BrowsableAttribute("False")]
public bool IsFiltered { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<CurrencyTypes> Currency { get; public set; }
    [DataMemberAttribute]
public Nullable`1<QuoteChangeStates> State { get; public set; }
    [DataMemberAttribute]
public bool HasPositions { get; public set; }
    [DataMemberAttribute]
public long SeqNum { get; public set; }
    public DataType DataType { get; }
    [CompilerGeneratedAttribute]
public sealed virtual SecurityId get_SecurityId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SecurityId(SecurityId value);
    public sealed virtual QuoteChange[] get_Bids();
    public void set_Bids(QuoteChange[] value);
    public sealed virtual QuoteChange[] get_Asks();
    public void set_Asks(QuoteChange[] value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_ServerTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServerTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public sealed virtual DataType get_BuildFrom();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildFrom(DataType value);
    [CompilerGeneratedAttribute]
public bool get_IsFiltered();
    [CompilerGeneratedAttribute]
public void set_IsFiltered(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CurrencyTypes> get_Currency();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Currency(Nullable`1<CurrencyTypes> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<QuoteChangeStates> get_State();
    [CompilerGeneratedAttribute]
public sealed virtual void set_State(Nullable`1<QuoteChangeStates> value);
    [CompilerGeneratedAttribute]
public bool get_HasPositions();
    [CompilerGeneratedAttribute]
public void set_HasPositions(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_SeqNum();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SeqNum(long value);
    public virtual DataType get_DataType();
    public virtual void CopyTo(QuoteChangeMessage destination);
    public virtual string ToString();
}
[DataContractAttribute]
public enum StockSharp.Messages.QuoteChangeStates : Enum {
    public int value__;
    [EnumMemberAttribute]
public static QuoteChangeStates SnapshotStarted;
    [EnumMemberAttribute]
public static QuoteChangeStates SnapshotBuilding;
    [EnumMemberAttribute]
public static QuoteChangeStates SnapshotComplete;
    [EnumMemberAttribute]
public static QuoteChangeStates Increment;
}
[DataContractAttribute]
public enum StockSharp.Messages.QuoteConditions : Enum {
    public byte value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static QuoteConditions Active;
    [EnumMemberAttribute]
[DisplayAttribute]
public static QuoteConditions Indicative;
}
[DataContractAttribute]
[DisplayAttribute]
public class StockSharp.Messages.RangeCandleMessage : TypedCandleMessage`1<Unit> {
    public virtual Message Clone();
}
[DisplayAttribute]
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class StockSharp.Messages.ReConnectionSettings : object {
    private TimeSpan _interval;
    private int _attemptCount;
    private int _reAttemptCount;
    private TimeSpan _timeOutInterval;
    private WorkingTime _workingTime;
    [DisplayAttribute]
public TimeSpan Interval { get; public set; }
    [DisplayAttribute]
public int AttemptCount { get; public set; }
    [DisplayAttribute]
public int ReAttemptCount { get; public set; }
    [DisplayAttribute]
public TimeSpan TimeOutInterval { get; public set; }
    [DisplayAttribute]
public WorkingTime WorkingTime { get; public set; }
    public TimeSpan get_Interval();
    public void set_Interval(TimeSpan value);
    public int get_AttemptCount();
    public void set_AttemptCount(int value);
    public int get_ReAttemptCount();
    public void set_ReAttemptCount(int value);
    public TimeSpan get_TimeOutInterval();
    public void set_TimeOutInterval(TimeSpan value);
    public WorkingTime get_WorkingTime();
    public void set_WorkingTime(WorkingTime value);
    public sealed virtual void Load(SettingsStorage storage);
    public sealed virtual void Save(SettingsStorage storage);
}
public class StockSharp.Messages.RemoteFileCommandMessage : CommandMessage {
    [CompilerGeneratedAttribute]
private SecurityId <SecurityId>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <FileDataType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <From>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <To>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Format>k__BackingField;
    private Byte[] _body;
    [DataMemberAttribute]
public SecurityId SecurityId { get; public set; }
    [DataMemberAttribute]
public DataType FileDataType { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> From { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> To { get; public set; }
    [DataMemberAttribute]
public int Format { get; public set; }
    [DataMemberAttribute]
public Byte[] Body { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual SecurityId get_SecurityId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SecurityId(SecurityId value);
    [CompilerGeneratedAttribute]
public DataType get_FileDataType();
    [CompilerGeneratedAttribute]
public void set_FileDataType(DataType value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTimeOffset> get_From();
    [CompilerGeneratedAttribute]
public virtual void set_From(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTimeOffset> get_To();
    [CompilerGeneratedAttribute]
public virtual void set_To(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public int get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(int value);
    public sealed virtual Byte[] get_Body();
    public sealed virtual void set_Body(Byte[] value);
    public virtual Message Clone();
    public virtual string ToString();
}
public class StockSharp.Messages.RemoteFileMessage : BaseSubscriptionIdMessage`1<RemoteFileMessage> {
    [CompilerGeneratedAttribute]
private long <TransactionId>k__BackingField;
    private Byte[] _body;
    [CompilerGeneratedAttribute]
private SecurityId <SecurityId>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <FileDataType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Format>k__BackingField;
    [DataMemberAttribute]
public long TransactionId { get; public set; }
    [DataMemberAttribute]
public Byte[] Body { get; public set; }
    [DataMemberAttribute]
public SecurityId SecurityId { get; public set; }
    [DataMemberAttribute]
public DataType FileDataType { get; public set; }
    [DataMemberAttribute]
public DateTimeOffset Date { get; public set; }
    [DataMemberAttribute]
public int Format { get; public set; }
    public DataType DataType { get; }
    [CompilerGeneratedAttribute]
public sealed virtual long get_TransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionId(long value);
    public sealed virtual Byte[] get_Body();
    public sealed virtual void set_Body(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual SecurityId get_SecurityId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SecurityId(SecurityId value);
    [CompilerGeneratedAttribute]
public DataType get_FileDataType();
    [CompilerGeneratedAttribute]
public void set_FileDataType(DataType value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public int get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(int value);
    public virtual void CopyTo(RemoteFileMessage destination);
    public virtual Message Clone();
    public virtual DataType get_DataType();
    public virtual string ToString();
}
[DataContractAttribute]
public class StockSharp.Messages.RemoveMessage : Message {
    [CompilerGeneratedAttribute]
private RemoveTypes <RemoveType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoveId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TransactionId>k__BackingField;
    [DataMemberAttribute]
public RemoveTypes RemoveType { get; public set; }
    [DataMemberAttribute]
public string RemoveId { get; public set; }
    [DataMemberAttribute]
public long TransactionId { get; public set; }
    [CompilerGeneratedAttribute]
public RemoveTypes get_RemoveType();
    [CompilerGeneratedAttribute]
public void set_RemoveType(RemoveTypes value);
    [CompilerGeneratedAttribute]
public string get_RemoveId();
    [CompilerGeneratedAttribute]
public void set_RemoveId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_TransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionId(long value);
    public virtual Message Clone();
}
[DataContractAttribute]
public enum StockSharp.Messages.RemoveTypes : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static RemoveTypes Security;
    [EnumMemberAttribute]
[DisplayAttribute]
public static RemoveTypes Portfolio;
    [EnumMemberAttribute]
[DisplayAttribute]
public static RemoveTypes Exchange;
    [EnumMemberAttribute]
[DisplayAttribute]
public static RemoveTypes Board;
    [EnumMemberAttribute]
[DisplayAttribute]
public static RemoveTypes User;
}
[DataContractAttribute]
[DisplayAttribute]
public class StockSharp.Messages.RenkoCandleMessage : TypedCandleMessage`1<Unit> {
    public virtual Message Clone();
}
[DataContractAttribute]
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class StockSharp.Messages.RepoOrderInfo : Cloneable`1<RepoOrderInfo> {
    [CompilerGeneratedAttribute]
private string <Partner>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Term>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Rate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <BlockSecurities>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <RefundRate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MatchRef>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SettleCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <SecondPrice>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <SettleDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <StartDiscount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <LowerDiscount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <UpperDiscount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsModified>k__BackingField;
    [DataMemberAttribute]
public string Partner { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> Term { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> Rate { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> BlockSecurities { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> RefundRate { get; public set; }
    [DataMemberAttribute]
public string MatchRef { get; public set; }
    [DataMemberAttribute]
public string SettleCode { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> SecondPrice { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> SettleDate { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> StartDiscount { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> LowerDiscount { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> UpperDiscount { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> Value { get; public set; }
    public bool IsModified { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Partner();
    [CompilerGeneratedAttribute]
public void set_Partner(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Term();
    [CompilerGeneratedAttribute]
public void set_Term(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Rate();
    [CompilerGeneratedAttribute]
public void set_Rate(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_BlockSecurities();
    [CompilerGeneratedAttribute]
public void set_BlockSecurities(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_RefundRate();
    [CompilerGeneratedAttribute]
public void set_RefundRate(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public string get_MatchRef();
    [CompilerGeneratedAttribute]
public void set_MatchRef(string value);
    [CompilerGeneratedAttribute]
public string get_SettleCode();
    [CompilerGeneratedAttribute]
public void set_SettleCode(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_SecondPrice();
    [CompilerGeneratedAttribute]
public void set_SecondPrice(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_SettleDate();
    [CompilerGeneratedAttribute]
public void set_SettleDate(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_StartDiscount();
    [CompilerGeneratedAttribute]
public void set_StartDiscount(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_LowerDiscount();
    [CompilerGeneratedAttribute]
public void set_LowerDiscount(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_UpperDiscount();
    [CompilerGeneratedAttribute]
public void set_UpperDiscount(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public bool get_IsModified();
    [CompilerGeneratedAttribute]
public void set_IsModified(bool value);
    public virtual RepoOrderInfo Clone();
    public sealed virtual void Load(SettingsStorage storage);
    public sealed virtual void Save(SettingsStorage storage);
}
[DataContractAttribute]
public class StockSharp.Messages.ResetMessage : Message {
    public virtual Message Clone();
}
[DataContractAttribute]
public class StockSharp.Messages.SecurityId : ValueType {
    private string _securityCode;
    private string _boardCode;
    private object _native;
    private long _nativeAsInt;
    private Nullable`1<SecurityTypes> _securityType;
    [CompilerGeneratedAttribute]
private string <Sedol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cusip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Isin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ric>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Bloomberg>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IQFeed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <InteractiveBrokers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Plaza>k__BackingField;
    private int _hashCode;
    public static string AssociatedBoardCode;
    public static SecurityId Money;
    public static SecurityId News;
    [CompilerGeneratedAttribute]
private bool <IsSpecial>k__BackingField;
    private bool _immutable;
    [DataMemberAttribute]
[DisplayAttribute]
public string SecurityCode { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string BoardCode { get; public set; }
    public object Native { get; public set; }
    public long NativeAsInt { get; public set; }
    [ObsoleteAttribute]
public Nullable`1<SecurityTypes> SecurityType { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Sedol { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Cusip { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Isin { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Ric { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Bloomberg { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string IQFeed { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<int> InteractiveBrokers { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Plaza { get; public set; }
    public bool IsSpecial { get; private set; }
    private static SecurityId();
    public string get_SecurityCode();
    public void set_SecurityCode(string value);
    public string get_BoardCode();
    public void set_BoardCode(string value);
    public object get_Native();
    public void set_Native(object value);
    public long get_NativeAsInt();
    public void set_NativeAsInt(long value);
    public Nullable`1<SecurityTypes> get_SecurityType();
    public void set_SecurityType(Nullable`1<SecurityTypes> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Sedol();
    [CompilerGeneratedAttribute]
public void set_Sedol(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Cusip();
    [CompilerGeneratedAttribute]
public void set_Cusip(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Isin();
    [CompilerGeneratedAttribute]
public void set_Isin(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Ric();
    [CompilerGeneratedAttribute]
public void set_Ric(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Bloomberg();
    [CompilerGeneratedAttribute]
public void set_Bloomberg(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_IQFeed();
    [CompilerGeneratedAttribute]
public void set_IQFeed(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<int> get_InteractiveBrokers();
    [CompilerGeneratedAttribute]
public void set_InteractiveBrokers(Nullable`1<int> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Plaza();
    [CompilerGeneratedAttribute]
public void set_Plaza(string value);
    public virtual int GetHashCode();
    private int EnsureGetHashCode();
    public virtual bool Equals(object other);
    public sealed virtual bool Equals(SecurityId other);
    public static bool op_Inequality(SecurityId left, SecurityId right);
    public static bool op_Equality(SecurityId left, SecurityId right);
    public virtual string ToString();
    public sealed virtual void Load(SettingsStorage storage);
    public sealed virtual void Save(SettingsStorage storage);
    public static SecurityId CreateAssociated(string securityCode);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsSpecial();
    [CompilerGeneratedAttribute]
private void set_IsSpecial(bool value);
    public SecurityId Immutable();
    private void CheckImmutable();
}
public class StockSharp.Messages.SecurityIdGenerator : object {
    private string _delimiter;
    public string Delimiter { get; public set; }
    public string get_Delimiter();
    public void set_Delimiter(string value);
    public virtual string GenerateId(string secCode, string boardCode);
    public virtual SecurityId Split(string securityId, bool nullIfInvalid);
}
[DataContractAttribute]
public class StockSharp.Messages.SecurityIdMapping : object {
    [CompilerGeneratedAttribute]
private SecurityId <StockSharpId>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityId <AdapterId>k__BackingField;
    [DataMemberAttribute]
public SecurityId StockSharpId { get; public set; }
    [DataMemberAttribute]
public SecurityId AdapterId { get; public set; }
    [CompilerGeneratedAttribute]
public SecurityId get_StockSharpId();
    [CompilerGeneratedAttribute]
public void set_StockSharpId(SecurityId value);
    [CompilerGeneratedAttribute]
public SecurityId get_AdapterId();
    [CompilerGeneratedAttribute]
public void set_AdapterId(SecurityId value);
    public static SecurityIdMapping op_Implicit(KeyValuePair`2<SecurityId, SecurityId> pair);
    public static KeyValuePair`2<SecurityId, SecurityId> op_Explicit(SecurityIdMapping mapping);
    public virtual string ToString();
    public sealed virtual void Load(SettingsStorage storage);
    public sealed virtual void Save(SettingsStorage storage);
}
[DataContractAttribute]
public class StockSharp.Messages.SecurityLegsInfoMessage : BaseSubscriptionIdMessage`1<SecurityLegsInfoMessage> {
    private IDictionary`2<SecurityId, IEnumerable`1<SecurityId>> _legs;
    public DataType DataType { get; }
    [DataMemberAttribute]
[XmlIgnoreAttribute]
public IDictionary`2<SecurityId, IEnumerable`1<SecurityId>> Legs { get; public set; }
    public virtual DataType get_DataType();
    public IDictionary`2<SecurityId, IEnumerable`1<SecurityId>> get_Legs();
    public void set_Legs(IDictionary`2<SecurityId, IEnumerable`1<SecurityId>> value);
    public virtual void CopyTo(SecurityLegsInfoMessage destination);
    public virtual string ToString();
}
[DataContractAttribute]
public class StockSharp.Messages.SecurityLegsRequestMessage : BaseRequestMessage {
    [CompilerGeneratedAttribute]
private string <Like>k__BackingField;
    public DataType DataType { get; }
    [DataMemberAttribute]
public string Like { get; public set; }
    public virtual DataType get_DataType();
    [CompilerGeneratedAttribute]
public string get_Like();
    [CompilerGeneratedAttribute]
public void set_Like(string value);
    public virtual Message Clone();
}
[DataContractAttribute]
public class StockSharp.Messages.SecurityLookupMessage : SecurityMessage {
    [CompilerGeneratedAttribute]
private long <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityTypes[] <SecurityTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnlySecurityId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FillGapsDays> <FillGaps>k__BackingField;
    private SecurityId[] _securityIds;
    [CompilerGeneratedAttribute]
private bool <IncludeExpired>k__BackingField;
    [DataMemberAttribute]
[DisplayAttribute]
public long TransactionId { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public SecurityTypes[] SecurityTypes { get; public set; }
    [DataMemberAttribute]
public bool OnlySecurityId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> Skip { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> Count { get; public set; }
    [DataMemberAttribute]
public Nullable`1<FillGapsDays> FillGaps { get; public set; }
    [DataMemberAttribute]
public SecurityId[] SecurityIds { get; public set; }
    [DataMemberAttribute]
public bool IncludeExpired { get; public set; }
    private DataType StockSharp.Messages.ISubscriptionMessage.DataType { get; }
    private bool StockSharp.Messages.ISubscriptionMessage.FilterEnabled { get; }
    private Nullable`1<DateTimeOffset> StockSharp.Messages.ISubscriptionMessage.From { get; private set; }
    private Nullable`1<DateTimeOffset> StockSharp.Messages.ISubscriptionMessage.To { get; private set; }
    private bool StockSharp.Messages.ISubscriptionMessage.IsSubscribe { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual long get_TransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionId(long value);
    [CompilerGeneratedAttribute]
public SecurityTypes[] get_SecurityTypes();
    [CompilerGeneratedAttribute]
public void set_SecurityTypes(SecurityTypes[] value);
    [CompilerGeneratedAttribute]
public bool get_OnlySecurityId();
    [CompilerGeneratedAttribute]
public void set_OnlySecurityId(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_Skip();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Skip(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Count(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<FillGapsDays> get_FillGaps();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FillGaps(Nullable`1<FillGapsDays> value);
    public SecurityId[] get_SecurityIds();
    public void set_SecurityIds(SecurityId[] value);
    [CompilerGeneratedAttribute]
public bool get_IncludeExpired();
    [CompilerGeneratedAttribute]
public void set_IncludeExpired(bool value);
    private sealed virtual override DataType StockSharp.Messages.ISubscriptionMessage.get_DataType();
    private sealed virtual override bool StockSharp.Messages.ISubscriptionMessage.get_FilterEnabled();
    public virtual Message Clone();
    public void CopyTo(SecurityLookupMessage destination);
    public virtual string ToString();
    private sealed virtual override Nullable`1<DateTimeOffset> StockSharp.Messages.ISubscriptionMessage.get_From();
    private sealed virtual override void StockSharp.Messages.ISubscriptionMessage.set_From(Nullable`1<DateTimeOffset> value);
    private sealed virtual override Nullable`1<DateTimeOffset> StockSharp.Messages.ISubscriptionMessage.get_To();
    private sealed virtual override void StockSharp.Messages.ISubscriptionMessage.set_To(Nullable`1<DateTimeOffset> value);
    private sealed virtual override bool StockSharp.Messages.ISubscriptionMessage.get_IsSubscribe();
    private sealed virtual override void StockSharp.Messages.ISubscriptionMessage.set_IsSubscribe(bool value);
}
[DataContractAttribute]
public class StockSharp.Messages.SecurityMappingMessage : Message {
    [CompilerGeneratedAttribute]
private bool <IsDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityIdMapping <Mapping>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FillGapsDays> <StockSharp.Messages.ISubscriptionMessage.FillGaps>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <OriginalTransactionId>k__BackingField;
    public bool IsDelete { get; public set; }
    [DataMemberAttribute]
public SecurityIdMapping Mapping { get; public set; }
    [DataMemberAttribute]
public string StorageName { get; public set; }
    private Nullable`1<FillGapsDays> StockSharp.Messages.ISubscriptionMessage.FillGaps { get; private set; }
    private bool StockSharp.Messages.ISubscriptionMessage.FilterEnabled { get; }
    private Nullable`1<DateTimeOffset> StockSharp.Messages.ISubscriptionMessage.From { get; private set; }
    private Nullable`1<DateTimeOffset> StockSharp.Messages.ISubscriptionMessage.To { get; private set; }
    private Nullable`1<long> StockSharp.Messages.ISubscriptionMessage.Skip { get; private set; }
    private Nullable`1<long> StockSharp.Messages.ISubscriptionMessage.Count { get; private set; }
    private bool StockSharp.Messages.ISubscriptionMessage.IsSubscribe { get; private set; }
    public DataType DataType { get; }
    [DataMemberAttribute]
public long TransactionId { get; public set; }
    [DataMemberAttribute]
public long OriginalTransactionId { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsDelete();
    [CompilerGeneratedAttribute]
public void set_IsDelete(bool value);
    [CompilerGeneratedAttribute]
public SecurityIdMapping get_Mapping();
    [CompilerGeneratedAttribute]
public void set_Mapping(SecurityIdMapping value);
    [CompilerGeneratedAttribute]
public string get_StorageName();
    [CompilerGeneratedAttribute]
public void set_StorageName(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override Nullable`1<FillGapsDays> StockSharp.Messages.ISubscriptionMessage.get_FillGaps();
    [CompilerGeneratedAttribute]
private sealed virtual override void StockSharp.Messages.ISubscriptionMessage.set_FillGaps(Nullable`1<FillGapsDays> value);
    private sealed virtual override bool StockSharp.Messages.ISubscriptionMessage.get_FilterEnabled();
    private sealed virtual override Nullable`1<DateTimeOffset> StockSharp.Messages.ISubscriptionMessage.get_From();
    private sealed virtual override void StockSharp.Messages.ISubscriptionMessage.set_From(Nullable`1<DateTimeOffset> value);
    private sealed virtual override Nullable`1<DateTimeOffset> StockSharp.Messages.ISubscriptionMessage.get_To();
    private sealed virtual override void StockSharp.Messages.ISubscriptionMessage.set_To(Nullable`1<DateTimeOffset> value);
    private sealed virtual override Nullable`1<long> StockSharp.Messages.ISubscriptionMessage.get_Skip();
    private sealed virtual override void StockSharp.Messages.ISubscriptionMessage.set_Skip(Nullable`1<long> value);
    private sealed virtual override Nullable`1<long> StockSharp.Messages.ISubscriptionMessage.get_Count();
    private sealed virtual override void StockSharp.Messages.ISubscriptionMessage.set_Count(Nullable`1<long> value);
    private sealed virtual override bool StockSharp.Messages.ISubscriptionMessage.get_IsSubscribe();
    private sealed virtual override void StockSharp.Messages.ISubscriptionMessage.set_IsSubscribe(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual DataType get_DataType();
    [CompilerGeneratedAttribute]
public sealed virtual long get_TransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_OriginalTransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OriginalTransactionId(long value);
    public virtual Message Clone();
    public virtual string ToString();
}
[DataContractAttribute]
public class StockSharp.Messages.SecurityMessage : BaseSubscriptionIdMessage`1<SecurityMessage> {
    [CompilerGeneratedAttribute]
private SecurityId <SecurityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <VolumeStep>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <MinVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <MaxVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Multiplier>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Decimals>k__BackingField;
    private Nullable`1<decimal> _priceStep;
    [CompilerGeneratedAttribute]
private Nullable`1<SecurityTypes> <SecurityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CfiCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ExpiryDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <SettlementDate>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityId <UnderlyingSecurityId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <UnderlyingSecurityMinVolume>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Strike>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<OptionTypes> <OptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BinaryOptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CurrencyTypes> <Currency>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <IssueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <IssueDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SecurityTypes> <UnderlyingSecurityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Shortable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BasketCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BasketExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <FaceValue>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityId <PrimaryId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SettlementTypes> <SettlementType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<OptionStyles> <OptionStyle>k__BackingField;
    [DataMemberAttribute]
[DisplayAttribute]
[TypeConverterAttribute("StockSharp.Messages.StringToSecurityIdTypeConverter")]
public SecurityId SecurityId { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string ShortName { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> VolumeStep { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> MinVolume { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> MaxVolume { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> Multiplier { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<int> Decimals { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> PriceStep { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<SecurityTypes> SecurityType { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string CfiCode { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<DateTimeOffset> ExpiryDate { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<DateTimeOffset> SettlementDate { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public SecurityId UnderlyingSecurityId { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> UnderlyingSecurityMinVolume { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> Strike { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<OptionTypes> OptionType { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string BinaryOptionType { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<CurrencyTypes> Currency { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Class { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> IssueSize { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> IssueDate { get; public set; }
    [DataMemberAttribute]
public Nullable`1<SecurityTypes> UnderlyingSecurityType { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> Shortable { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string BasketCode { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string BasketExpression { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> FaceValue { get; public set; }
    [DataMemberAttribute]
public SecurityId PrimaryId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<SettlementTypes> SettlementType { get; public set; }
    [DataMemberAttribute]
public Nullable`1<OptionStyles> OptionStyle { get; public set; }
    public DataType DataType { get; }
    protected SecurityMessage(MessageTypes type);
    [CompilerGeneratedAttribute]
public sealed virtual SecurityId get_SecurityId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SecurityId(SecurityId value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_VolumeStep();
    [CompilerGeneratedAttribute]
public void set_VolumeStep(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_MinVolume();
    [CompilerGeneratedAttribute]
public void set_MinVolume(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_MaxVolume();
    [CompilerGeneratedAttribute]
public void set_MaxVolume(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Multiplier();
    [CompilerGeneratedAttribute]
public void set_Multiplier(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Decimals();
    [CompilerGeneratedAttribute]
public void set_Decimals(Nullable`1<int> value);
    public Nullable`1<decimal> get_PriceStep();
    public void set_PriceStep(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SecurityTypes> get_SecurityType();
    [CompilerGeneratedAttribute]
public void set_SecurityType(Nullable`1<SecurityTypes> value);
    [CompilerGeneratedAttribute]
public string get_CfiCode();
    [CompilerGeneratedAttribute]
public void set_CfiCode(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ExpiryDate();
    [CompilerGeneratedAttribute]
public void set_ExpiryDate(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_SettlementDate();
    [CompilerGeneratedAttribute]
public void set_SettlementDate(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public SecurityId get_UnderlyingSecurityId();
    [CompilerGeneratedAttribute]
public void set_UnderlyingSecurityId(SecurityId value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_UnderlyingSecurityMinVolume();
    [CompilerGeneratedAttribute]
public void set_UnderlyingSecurityMinVolume(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Strike();
    [CompilerGeneratedAttribute]
public void set_Strike(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<OptionTypes> get_OptionType();
    [CompilerGeneratedAttribute]
public void set_OptionType(Nullable`1<OptionTypes> value);
    [CompilerGeneratedAttribute]
public string get_BinaryOptionType();
    [CompilerGeneratedAttribute]
public void set_BinaryOptionType(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<CurrencyTypes> get_Currency();
    [CompilerGeneratedAttribute]
public void set_Currency(Nullable`1<CurrencyTypes> value);
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_IssueSize();
    [CompilerGeneratedAttribute]
public void set_IssueSize(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_IssueDate();
    [CompilerGeneratedAttribute]
public void set_IssueDate(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SecurityTypes> get_UnderlyingSecurityType();
    [CompilerGeneratedAttribute]
public void set_UnderlyingSecurityType(Nullable`1<SecurityTypes> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Shortable();
    [CompilerGeneratedAttribute]
public void set_Shortable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_BasketCode();
    [CompilerGeneratedAttribute]
public void set_BasketCode(string value);
    [CompilerGeneratedAttribute]
public string get_BasketExpression();
    [CompilerGeneratedAttribute]
public void set_BasketExpression(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_FaceValue();
    [CompilerGeneratedAttribute]
public void set_FaceValue(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public SecurityId get_PrimaryId();
    [CompilerGeneratedAttribute]
public void set_PrimaryId(SecurityId value);
    [CompilerGeneratedAttribute]
public Nullable`1<SettlementTypes> get_SettlementType();
    [CompilerGeneratedAttribute]
public void set_SettlementType(Nullable`1<SettlementTypes> value);
    [CompilerGeneratedAttribute]
public Nullable`1<OptionStyles> get_OptionStyle();
    [CompilerGeneratedAttribute]
public void set_OptionStyle(Nullable`1<OptionStyles> value);
    public virtual DataType get_DataType();
    public void CopyTo(SecurityMessage destination, bool copyOriginalTransactionId);
    public virtual void CopyTo(SecurityMessage destination);
    public void CopyEx(SecurityMessage destination, bool copyBase);
    public virtual string ToString();
}
[DataContractAttribute]
public enum StockSharp.Messages.SecurityStates : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityStates Trading;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityStates Stoped;
}
[DataContractAttribute]
public enum StockSharp.Messages.SecurityTypes : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Stock;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Future;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Option;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Index;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Currency;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Bond;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Warrant;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Forward;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Swap;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Commodity;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Cfd;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes News;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Weather;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Fund;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Adr;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes CryptoCurrency;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Etf;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes MultiLeg;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Loan;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Spread;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Gdr;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Receipt;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Indicator;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Strategy;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Volatility;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SecurityTypes Repo;
}
[DataContractAttribute]
public enum StockSharp.Messages.SessionStates : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SessionStates Assigned;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SessionStates Active;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SessionStates Paused;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SessionStates ForceStopped;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SessionStates Ended;
}
[DataContractAttribute]
public enum StockSharp.Messages.SettlementTypes : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SettlementTypes Delivery;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SettlementTypes Cash;
}
public enum StockSharp.Messages.ShrinkRules : Enum {
    public int value__;
    public static ShrinkRules Auto;
    public static ShrinkRules Less;
    public static ShrinkRules More;
}
[DataContractAttribute]
public enum StockSharp.Messages.Sides : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Sides Buy;
    [EnumMemberAttribute]
[DisplayAttribute]
public static Sides Sell;
}
public enum StockSharp.Messages.StatisticParameterTypes : Enum {
    public int value__;
    public static StatisticParameterTypes WinningTrades;
    public static StatisticParameterTypes TradeCount;
    public static StatisticParameterTypes RoundtripCount;
    public static StatisticParameterTypes AverageTradeProfit;
    public static StatisticParameterTypes AverageWinTrades;
    public static StatisticParameterTypes AverageLossTrades;
    public static StatisticParameterTypes LossingTrades;
    public static StatisticParameterTypes MaxLongPosition;
    public static StatisticParameterTypes MaxShortPosition;
    public static StatisticParameterTypes MaxProfit;
    public static StatisticParameterTypes MaxDrawdown;
    public static StatisticParameterTypes MaxRelativeDrawdown;
    public static StatisticParameterTypes Return;
    public static StatisticParameterTypes RecoveryFactor;
    public static StatisticParameterTypes NetProfit;
    public static StatisticParameterTypes MaxLatencyRegistration;
    public static StatisticParameterTypes MaxLatencyCancellation;
    public static StatisticParameterTypes MinLatencyRegistration;
    public static StatisticParameterTypes MinLatencyCancellation;
    public static StatisticParameterTypes OrderCount;
    public static StatisticParameterTypes OrderErrorCount;
    public static StatisticParameterTypes OrderInsufficientFundErrorCount;
    public static StatisticParameterTypes PerMonthTrades;
    public static StatisticParameterTypes PerDayTrades;
    public static StatisticParameterTypes MaxDrawdownDate;
    public static StatisticParameterTypes MaxProfitDate;
    public static StatisticParameterTypes Commission;
    public static StatisticParameterTypes MaxDrawdownPercent;
    public static StatisticParameterTypes NetProfitPercent;
}
public class StockSharp.Messages.StringToSecurityIdTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext ctx, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo culture, object value);
}
public class StockSharp.Messages.SubscriptionBase : object {
    [CompilerGeneratedAttribute]
private ISubscriptionMessage <SubscriptionMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private SubscriptionStates <State>k__BackingField;
    public Nullable`1<SecurityId> SecurityId { get; }
    public DataType DataType { get; }
    public ISubscriptionMessage SubscriptionMessage { get; }
    public MarketDataMessage MarketData { get; }
    public SecurityLookupMessage SecurityLookup { get; }
    public PortfolioLookupMessage PortfolioLookup { get; }
    public OrderStatusMessage OrderStatus { get; }
    public long TransactionId { get; public set; }
    public SubscriptionStates State { get; public set; }
    protected SubscriptionBase(ISubscriptionMessage subscriptionMessage, SecurityMessage security);
    public Nullable`1<SecurityId> get_SecurityId();
    public DataType get_DataType();
    [CompilerGeneratedAttribute]
public ISubscriptionMessage get_SubscriptionMessage();
    public MarketDataMessage get_MarketData();
    public SecurityLookupMessage get_SecurityLookup();
    public PortfolioLookupMessage get_PortfolioLookup();
    public OrderStatusMessage get_OrderStatus();
    public long get_TransactionId();
    public void set_TransactionId(long value);
    [CompilerGeneratedAttribute]
public SubscriptionStates get_State();
    [CompilerGeneratedAttribute]
public void set_State(SubscriptionStates value);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class StockSharp.Messages.SubscriptionExtensions : object {
    [ExtensionAttribute]
public static bool IsActive(SubscriptionStates state);
    [ExtensionAttribute]
public static SubscriptionStates ChangeSubscriptionState(SubscriptionStates currState, SubscriptionStates newState, long subscriptionId, ILogReceiver receiver);
    [ExtensionAttribute]
public static ISubscriptionMessage ToSubscriptionMessage(DataType dataType);
}
[DataContractAttribute]
public class StockSharp.Messages.SubscriptionFinishedMessage : BaseResultMessage`1<SubscriptionFinishedMessage> {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <NextFrom>k__BackingField;
    private Byte[] _body;
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> NextFrom { get; public set; }
    [DataMemberAttribute]
public Byte[] Body { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_NextFrom();
    [CompilerGeneratedAttribute]
public void set_NextFrom(Nullable`1<DateTimeOffset> value);
    public sealed virtual Byte[] get_Body();
    public sealed virtual void set_Body(Byte[] value);
    protected virtual void CopyTo(SubscriptionFinishedMessage destination);
    public virtual string ToString();
}
[DataContractAttribute]
public class StockSharp.Messages.SubscriptionListRequestMessage : BaseRequestMessage {
    public DataType DataType { get; }
    public virtual DataType get_DataType();
    public virtual Message Clone();
}
[DataContractAttribute]
public class StockSharp.Messages.SubscriptionOnlineMessage : Message {
    [CompilerGeneratedAttribute]
private long <OriginalTransactionId>k__BackingField;
    [DataMemberAttribute]
public long OriginalTransactionId { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual long get_OriginalTransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OriginalTransactionId(long value);
    public virtual Message Clone();
    public virtual string ToString();
}
public class StockSharp.Messages.SubscriptionResponseMessage : Message {
    public static NotSupportedException NotSupported;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private long <OriginalTransactionId>k__BackingField;
    [DataMemberAttribute]
[XmlIgnoreAttribute]
public Exception Error { get; public set; }
    [DataMemberAttribute]
public long OriginalTransactionId { get; public set; }
    private static SubscriptionResponseMessage();
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Error();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Error(Exception value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_OriginalTransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OriginalTransactionId(long value);
    public virtual Message Clone();
    protected void CopyTo(SubscriptionResponseMessage destination);
    public virtual string ToString();
}
[DataContractAttribute]
public enum StockSharp.Messages.SubscriptionStates : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SubscriptionStates Stopped;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SubscriptionStates Active;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SubscriptionStates Error;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SubscriptionStates Finished;
    [EnumMemberAttribute]
[DisplayAttribute]
public static SubscriptionStates Online;
}
[DataContractAttribute]
[DisplayAttribute]
public class StockSharp.Messages.TickCandleMessage : TypedCandleMessage`1<int> {
    public virtual Message Clone();
}
[DataContractAttribute]
[DisplayAttribute]
public class StockSharp.Messages.TimeFrameCandleMessage : TypedCandleMessage`1<TimeSpan> {
    public TimeSpan TimeFrame { get; }
    protected TimeFrameCandleMessage(MessageTypes type);
    public TimeSpan get_TimeFrame();
    public virtual Message Clone();
}
[DataContractAttribute]
public class StockSharp.Messages.TimeFrameInfoMessage : BaseSubscriptionIdMessage`1<TimeFrameInfoMessage> {
    private TimeSpan[] _timeFrames;
    [DataMemberAttribute]
public TimeSpan[] TimeFrames { get; public set; }
    public DataType DataType { get; }
    public TimeSpan[] get_TimeFrames();
    public void set_TimeFrames(TimeSpan[] value);
    public virtual DataType get_DataType();
    public virtual void CopyTo(TimeFrameInfoMessage destination);
    public virtual string ToString();
}
[DataContractAttribute]
public class StockSharp.Messages.TimeFrameLookupMessage : BaseRequestMessage {
    public DataType DataType { get; }
    public virtual DataType get_DataType();
    public virtual Message Clone();
}
[DataContractAttribute]
public enum StockSharp.Messages.TimeInForce : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static TimeInForce PutInQueue;
    [EnumMemberAttribute]
[DisplayAttribute]
public static TimeInForce MatchOrCancel;
    [EnumMemberAttribute]
[DisplayAttribute]
public static TimeInForce CancelBalance;
}
[DataContractAttribute]
public class StockSharp.Messages.TimeMessage : Message {
    [CompilerGeneratedAttribute]
private long <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalTransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ServerTime>k__BackingField;
    [DataMemberAttribute]
public long TransactionId { get; public set; }
    [DataMemberAttribute]
public string OriginalTransactionId { get; public set; }
    [DataMemberAttribute]
public DateTimeOffset ServerTime { get; public set; }
    protected TimeMessage(MessageTypes type);
    [CompilerGeneratedAttribute]
public sealed virtual long get_TransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionId(long value);
    [CompilerGeneratedAttribute]
public string get_OriginalTransactionId();
    [CompilerGeneratedAttribute]
public void set_OriginalTransactionId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_ServerTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServerTime(DateTimeOffset value);
    public virtual string ToString();
    public virtual Message Clone();
}
[DataContractAttribute]
public enum StockSharp.Messages.TPlusLimits : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static TPlusLimits T0;
    [EnumMemberAttribute]
[DisplayAttribute]
public static TPlusLimits T1;
    [EnumMemberAttribute]
[DisplayAttribute]
public static TPlusLimits T2;
    [EnumMemberAttribute]
[DisplayAttribute]
public static TPlusLimits Tx;
}
[DataContractAttribute]
public abstract class StockSharp.Messages.TypedCandleMessage`1 : CandleMessage {
    [CompilerGeneratedAttribute]
private TArg <TypedArg>k__BackingField;
    public object Arg { get; }
    public Type ArgType { get; }
    public TArg TypedArg { get; public set; }
    protected TypedCandleMessage`1(MessageTypes type, TArg arg);
    public virtual object get_Arg();
    public virtual Type get_ArgType();
    [CompilerGeneratedAttribute]
public sealed virtual TArg get_TypedArg();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TypedArg(TArg value);
    protected TypedCandleMessage`1<TArg> CopyTo(TypedCandleMessage`1<TArg> copy);
}
[DataContractAttribute]
public class StockSharp.Messages.Unit : Equatable`1<Unit> {
    [CompilerGeneratedAttribute]
private UnitTypes <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Value>k__BackingField;
    private Func`2<UnitTypes, Nullable`1<decimal>> _getTypeValue;
    [DataMemberAttribute]
public UnitTypes Type { get; public set; }
    [DataMemberAttribute]
public decimal Value { get; public set; }
    [XmlIgnoreAttribute]
public Func`2<UnitTypes, Nullable`1<decimal>> GetTypeValue { get; public set; }
    private static Unit();
    public Unit(decimal value);
    public Unit(decimal value, UnitTypes type);
    public Unit(decimal value, UnitTypes type, Func`2<UnitTypes, Nullable`1<decimal>> getTypeValue);
    [CompilerGeneratedAttribute]
public UnitTypes get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(UnitTypes value);
    [CompilerGeneratedAttribute]
public decimal get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(decimal value);
    public Func`2<UnitTypes, Nullable`1<decimal>> get_GetTypeValue();
    public void set_GetTypeValue(Func`2<UnitTypes, Nullable`1<decimal>> value);
    public virtual Unit Clone();
    public virtual int CompareTo(Unit other);
    public static Unit op_Implicit(decimal value);
    public static Unit op_Implicit(int value);
    public static decimal op_Explicit(Unit unit);
    public static Nullable`1<decimal> op_Explicit(Unit unit);
    public static Unit op_Implicit(double value);
    public static double op_Explicit(Unit unit);
    public static Nullable`1<double> op_Explicit(Unit unit);
    private decimal SafeGetTypeValue(Func`2<UnitTypes, Nullable`1<decimal>> getTypeValue);
    private static Unit CreateResult(Unit u1, Unit u2, Func`3<decimal, decimal, decimal> operation, Func`3<decimal, decimal, decimal> percentOperation);
    public static Unit op_Addition(Unit u1, Unit u2);
    public static Unit op_Multiply(Unit u1, Unit u2);
    public static Unit op_Subtraction(Unit u1, Unit u2);
    public static Unit op_Division(Unit u1, Unit u2);
    public virtual int GetHashCode();
    private Nullable`1<bool> EqualsImpl(Unit other);
    protected virtual bool OnEquals(Unit other);
    public virtual bool Equals(object other);
    public static bool op_Inequality(Unit u1, Unit u2);
    public static bool op_Equality(Unit u1, Unit u2);
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public static string GetTypeSuffix(UnitTypes type);
    public Unit Convert(UnitTypes destinationType, bool throwException);
    public Unit Convert(UnitTypes destinationType, Func`2<UnitTypes, Nullable`1<decimal>> getTypeValue, bool throwException);
    private static Nullable`1<bool> MoreThan(Unit u1, Unit u2);
    public static bool op_GreaterThan(Unit u1, Unit u2);
    public static bool op_GreaterThanOrEqual(Unit u1, Unit u2);
    public static bool op_LessThan(Unit u1, Unit u2);
    public static bool op_LessThanOrEqual(Unit u1, Unit u2);
    public static Unit op_UnaryNegation(Unit u);
    private sealed virtual override Unit Ecng.Common.IOperable<StockSharp.Messages.Unit>.Add(Unit other);
    private sealed virtual override Unit Ecng.Common.IOperable<StockSharp.Messages.Unit>.Subtract(Unit other);
    private sealed virtual override Unit Ecng.Common.IOperable<StockSharp.Messages.Unit>.Multiply(Unit other);
    private sealed virtual override Unit Ecng.Common.IOperable<StockSharp.Messages.Unit>.Divide(Unit other);
    public sealed virtual void Load(SettingsStorage storage);
    public sealed virtual void Save(SettingsStorage storage);
}
[ExtensionAttribute]
public static class StockSharp.Messages.UnitHelper : object {
    [ExtensionAttribute]
public static Unit Percents(int value);
    [ExtensionAttribute]
public static Unit Percents(double value);
    [ExtensionAttribute]
public static Unit Percents(decimal value);
    [ExtensionAttribute]
public static Unit ToUnit(string str, bool throwIfNull, Func`2<UnitTypes, Nullable`1<decimal>> getTypeValue);
    [ExtensionAttribute]
public static Unit Times(Unit unit, int times);
}
[DataContractAttribute]
public enum StockSharp.Messages.UnitTypes : Enum {
    public int value__;
    [EnumMemberAttribute]
[DisplayAttribute]
public static UnitTypes Absolute;
    [EnumMemberAttribute]
[DisplayAttribute]
public static UnitTypes Percent;
    [EnumMemberAttribute]
[DisplayAttribute]
public static UnitTypes Point;
    [EnumMemberAttribute]
[DisplayAttribute]
public static UnitTypes Step;
    [EnumMemberAttribute]
[DisplayAttribute]
public static UnitTypes Limit;
}
[DataContractAttribute]
public class StockSharp.Messages.UserInfoMessage : BaseSubscriptionIdMessage`1<UserInfoMessage> {
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    private SecureString _password;
    [CompilerGeneratedAttribute]
private long <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBlocked>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Phone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Homepage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Skype>k__BackingField;
    [CompilerGeneratedAttribute]
private string <City>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Gender>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsSubscription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Balance>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Avatar>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <CreationDate>k__BackingField;
    private IEnumerable`1<IPAddress> _ipRestrictions;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<UserPermissions, IDictionary`2<ValueTuple`4<string, string, string, Nullable`1<DateTime>>, bool>> <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanPublish>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAgreementAccepted>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UploadLimit>k__BackingField;
    private String[] _features;
    [CompilerGeneratedAttribute]
private bool <IsTrialVerified>k__BackingField;
    [DataMemberAttribute]
[DisplayAttribute]
public string Login { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public SecureString Password { get; public set; }
    [DataMemberAttribute]
public long TransactionId { get; public set; }
    [DataMemberAttribute]
public bool IsBlocked { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> Id { get; public set; }
    [DataMemberAttribute]
public string DisplayName { get; public set; }
    [DataMemberAttribute]
public string Phone { get; public set; }
    [DataMemberAttribute]
public string Homepage { get; public set; }
    [DataMemberAttribute]
public string Skype { get; public set; }
    [DataMemberAttribute]
public string City { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> Gender { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> IsSubscription { get; public set; }
    [DataMemberAttribute]
public string Language { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> Balance { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> Avatar { get; public set; }
    [DataMemberAttribute]
public string AuthToken { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> CreationDate { get; public set; }
    [XmlIgnoreAttribute]
public IEnumerable`1<IPAddress> IpRestrictions { get; public set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<UserPermissions, IDictionary`2<ValueTuple`4<string, string, string, Nullable`1<DateTime>>, bool>> Permissions { get; }
    [DataMemberAttribute]
public bool CanPublish { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> IsAgreementAccepted { get; public set; }
    public DataType DataType { get; }
    [DataMemberAttribute]
public long UploadLimit { get; public set; }
    [DataMemberAttribute]
public String[] Features { get; public set; }
    [DataMemberAttribute]
public bool IsTrialVerified { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
public void set_Login(string value);
    public SecureString get_Password();
    public void set_Password(SecureString value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_TransactionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionId(long value);
    [CompilerGeneratedAttribute]
public bool get_IsBlocked();
    [CompilerGeneratedAttribute]
public void set_IsBlocked(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Phone();
    [CompilerGeneratedAttribute]
public void set_Phone(string value);
    [CompilerGeneratedAttribute]
public string get_Homepage();
    [CompilerGeneratedAttribute]
public void set_Homepage(string value);
    [CompilerGeneratedAttribute]
public string get_Skype();
    [CompilerGeneratedAttribute]
public void set_Skype(string value);
    [CompilerGeneratedAttribute]
public string get_City();
    [CompilerGeneratedAttribute]
public void set_City(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Gender();
    [CompilerGeneratedAttribute]
public void set_Gender(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsSubscription();
    [CompilerGeneratedAttribute]
public void set_IsSubscription(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Balance();
    [CompilerGeneratedAttribute]
public void set_Balance(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_Avatar();
    [CompilerGeneratedAttribute]
public void set_Avatar(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_AuthToken();
    [CompilerGeneratedAttribute]
public void set_AuthToken(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_CreationDate();
    [CompilerGeneratedAttribute]
public void set_CreationDate(Nullable`1<DateTimeOffset> value);
    public IEnumerable`1<IPAddress> get_IpRestrictions();
    public void set_IpRestrictions(IEnumerable`1<IPAddress> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<UserPermissions, IDictionary`2<ValueTuple`4<string, string, string, Nullable`1<DateTime>>, bool>> get_Permissions();
    [CompilerGeneratedAttribute]
public bool get_CanPublish();
    [CompilerGeneratedAttribute]
public void set_CanPublish(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAgreementAccepted();
    [CompilerGeneratedAttribute]
public void set_IsAgreementAccepted(Nullable`1<bool> value);
    public virtual DataType get_DataType();
    [CompilerGeneratedAttribute]
public long get_UploadLimit();
    [CompilerGeneratedAttribute]
public void set_UploadLimit(long value);
    public String[] get_Features();
    public void set_Features(String[] value);
    [CompilerGeneratedAttribute]
public bool get_IsTrialVerified();
    [CompilerGeneratedAttribute]
public void set_IsTrialVerified(bool value);
    public virtual string ToString();
    public virtual void CopyTo(UserInfoMessage destination);
}
[DataContractAttribute]
public class StockSharp.Messages.UserLookupMessage : BaseSubscriptionMessage {
    [CompilerGeneratedAttribute]
private string <Like>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Own>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <UserId>k__BackingField;
    public DataType DataType { get; }
    [DataMemberAttribute]
public string Like { get; public set; }
    [DataMemberAttribute]
public bool Own { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> UserId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> From { get; }
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> To { get; }
    [DataMemberAttribute]
public bool IsSubscribe { get; }
    [DataMemberAttribute]
public long OriginalTransactionId { get; }
    public virtual DataType get_DataType();
    [CompilerGeneratedAttribute]
public string get_Like();
    [CompilerGeneratedAttribute]
public void set_Like(string value);
    [CompilerGeneratedAttribute]
public bool get_Own();
    [CompilerGeneratedAttribute]
public void set_Own(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(Nullable`1<long> value);
    public virtual string ToString();
    public virtual Message Clone();
    protected UserLookupMessage CopyTo(UserLookupMessage destination);
    public virtual Nullable`1<DateTimeOffset> get_From();
    public virtual Nullable`1<DateTimeOffset> get_To();
    public virtual bool get_IsSubscribe();
    public virtual long get_OriginalTransactionId();
}
[FlagsAttribute]
[DataContractAttribute]
public enum StockSharp.Messages.UserPermissions : Enum {
    public int value__;
    [DisplayAttribute]
[EnumMemberAttribute]
public static UserPermissions Save;
    [DisplayAttribute]
[EnumMemberAttribute]
public static UserPermissions Load;
    [DisplayAttribute]
[EnumMemberAttribute]
public static UserPermissions Delete;
    [DisplayAttribute]
[EnumMemberAttribute]
public static UserPermissions SecurityLookup;
    [DisplayAttribute]
[EnumMemberAttribute]
public static UserPermissions ExchangeBoardLookup;
    [DisplayAttribute]
[EnumMemberAttribute]
public static UserPermissions EditSecurities;
    [DisplayAttribute]
[EnumMemberAttribute]
public static UserPermissions EditBoards;
    [DisplayAttribute]
[EnumMemberAttribute]
public static UserPermissions DeleteSecurities;
    [DisplayAttribute]
[EnumMemberAttribute]
public static UserPermissions DeleteBoards;
    [DisplayAttribute]
[EnumMemberAttribute]
public static UserPermissions GetUsers;
    [DisplayAttribute]
[EnumMemberAttribute]
public static UserPermissions EditUsers;
    [DisplayAttribute]
[EnumMemberAttribute]
public static UserPermissions DeleteUsers;
    [DisplayAttribute]
[EnumMemberAttribute]
public static UserPermissions ServerManage;
    [DisplayAttribute]
[EnumMemberAttribute]
public static UserPermissions Trading;
    [DisplayAttribute]
[EnumMemberAttribute]
public static UserPermissions Withdraw;
}
[DataContractAttribute]
public class StockSharp.Messages.UserRequestMessage : BaseRequestMessage {
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Id>k__BackingField;
    [DataMemberAttribute]
[DisplayAttribute]
public string Login { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> Id { get; public set; }
    public DataType DataType { get; }
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
public void set_Login(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<long> value);
    public virtual DataType get_DataType();
    public virtual Message Clone();
    protected UserRequestMessage CopyTo(UserRequestMessage destination);
    public virtual string ToString();
}
[DataContractAttribute]
[DisplayAttribute]
public class StockSharp.Messages.VolumeCandleMessage : TypedCandleMessage`1<decimal> {
    public virtual Message Clone();
}
[DataContractAttribute]
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class StockSharp.Messages.WithdrawInfo : object {
    [CompilerGeneratedAttribute]
private WithdrawTypes <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CryptoAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Express>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <ChargeFee>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PaymentId>k__BackingField;
    private BankDetails _bankDetails;
    private BankDetails _intermediaryBankDetails;
    private BankDetails _companyDetails;
    [CompilerGeneratedAttribute]
private string <CardNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [DataMemberAttribute]
[DisplayAttribute]
public WithdrawTypes Type { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string CryptoAddress { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public bool Express { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public Nullable`1<decimal> ChargeFee { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string PaymentId { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public BankDetails BankDetails { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public BankDetails IntermediaryBankDetails { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public BankDetails CompanyDetails { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string CardNumber { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public string Comment { get; public set; }
    [CompilerGeneratedAttribute]
public WithdrawTypes get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(WithdrawTypes value);
    [CompilerGeneratedAttribute]
public string get_CryptoAddress();
    [CompilerGeneratedAttribute]
public void set_CryptoAddress(string value);
    [CompilerGeneratedAttribute]
public bool get_Express();
    [CompilerGeneratedAttribute]
public void set_Express(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_ChargeFee();
    [CompilerGeneratedAttribute]
public void set_ChargeFee(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public string get_PaymentId();
    [CompilerGeneratedAttribute]
public void set_PaymentId(string value);
    public BankDetails get_BankDetails();
    public void set_BankDetails(BankDetails value);
    public BankDetails get_IntermediaryBankDetails();
    public void set_IntermediaryBankDetails(BankDetails value);
    public BankDetails get_CompanyDetails();
    public void set_CompanyDetails(BankDetails value);
    [CompilerGeneratedAttribute]
public string get_CardNumber();
    [CompilerGeneratedAttribute]
public void set_CardNumber(string value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    public sealed virtual void Load(SettingsStorage storage);
    public sealed virtual void Save(SettingsStorage storage);
    public virtual string ToString();
}
public enum StockSharp.Messages.WithdrawTypes : Enum {
    public int value__;
    [DisplayAttribute]
public static WithdrawTypes Crypto;
    [DisplayAttribute]
public static WithdrawTypes BankWire;
    [DisplayAttribute]
public static WithdrawTypes BankCard;
}
[DataContractAttribute]
[DisplayAttribute]
public class StockSharp.Messages.WorkingTime : object {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    private List`1<WorkingTimePeriod> _periods;
    private IDictionary`2<DateTime, Range`1[]> _specialDays;
    private bool _checkDates;
    [DisplayAttribute]
public bool IsEnabled { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public List`1<WorkingTimePeriod> Periods { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public DateTime[] SpecialWorkingDays { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public DateTime[] SpecialHolidays { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
[XmlIgnoreAttribute]
public IDictionary`2<DateTime, Range`1[]> SpecialDays { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    public List`1<WorkingTimePeriod> get_Periods();
    public void set_Periods(List`1<WorkingTimePeriod> value);
    public DateTime[] get_SpecialWorkingDays();
    public void set_SpecialWorkingDays(DateTime[] value);
    public DateTime[] get_SpecialHolidays();
    public void set_SpecialHolidays(DateTime[] value);
    public IDictionary`2<DateTime, Range`1[]> get_SpecialDays();
    public void set_SpecialDays(IDictionary`2<DateTime, Range`1[]> value);
    private DateTime[] CheckDates(DateTime[] dates);
    public sealed virtual void Load(SettingsStorage storage);
    public sealed virtual void Save(SettingsStorage storage);
    public virtual string ToString();
}
[DataContractAttribute]
[DisplayAttribute]
public class StockSharp.Messages.WorkingTimePeriod : Cloneable`1<WorkingTimePeriod> {
    [CompilerGeneratedAttribute]
private DateTime <Till>k__BackingField;
    private List`1<Range`1<TimeSpan>> _times;
    private IDictionary`2<DayOfWeek, Range`1[]> _specialDays;
    [DataMemberAttribute]
[DisplayAttribute]
public DateTime Till { get; public set; }
    [DataMemberAttribute]
[DisplayAttribute]
public List`1<Range`1<TimeSpan>> Times { get; public set; }
    [XmlIgnoreAttribute]
public IDictionary`2<DayOfWeek, Range`1[]> SpecialDays { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_Till();
    [CompilerGeneratedAttribute]
public void set_Till(DateTime value);
    public List`1<Range`1<TimeSpan>> get_Times();
    public void set_Times(List`1<Range`1<TimeSpan>> value);
    public IDictionary`2<DayOfWeek, Range`1[]> get_SpecialDays();
    public void set_SpecialDays(IDictionary`2<DayOfWeek, Range`1[]> value);
    public virtual WorkingTimePeriod Clone();
    public sealed virtual void Load(SettingsStorage storage);
    public sealed virtual void Save(SettingsStorage storage);
    public virtual string ToString();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
