[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.SerializerServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddSerializer(IServiceCollection services, T serializer);
    [ExtensionAttribute]
public static IServiceCollection AddSerializer(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StrawberryShake.CachePolicy : object {
    private IDisposable _session;
    public CachePolicy(IDisposable session);
    public sealed virtual void Dispose();
    public static CachePolicy Default(IStoreAccessor storeAccessor);
    public static CachePolicy Default(IStoreAccessor storeAccessor, TimeSpan timeToLive);
    public static CachePolicy NoCache(IStoreAccessor storeAccessor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StrawberryShake.ClientBuilder`1 : object {
    [CompilerGeneratedAttribute]
private string <ClientName>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceCollection <ClientServices>k__BackingField;
    public string ClientName { get; }
    public IServiceCollection Services { get; }
    public IServiceCollection ClientServices { get; }
    public ClientBuilder`1(string clientName, IServiceCollection services, IServiceCollection clientServices);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientName();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_ClientServices();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class StrawberryShake.ClientError : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Location> <Locations>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Extensions>k__BackingField;
    [NullableAttribute("1")]
public string Message { get; }
    public string Code { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<object> Path { get; }
    public IReadOnlyList`1<Location> Locations { get; }
    public Exception Exception { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extensions { get; }
    public ClientError(string message, string code, IReadOnlyList`1<object> path, IReadOnlyList`1<Location> locations, Exception exception, IReadOnlyDictionary`2<string, object> extensions);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Code();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<object> get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<Location> get_Locations();
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Exception();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, object> get_Extensions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class StrawberryShake.DelegateObserver`1 : object {
    private Action`1<T> _next;
    [NullableAttribute("2")]
private Action _complete;
    public DelegateObserver`1(Action`1<T> next, Action complete);
    public sealed virtual void OnNext(T value);
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnCompleted();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class StrawberryShake.DocumentHash : ValueType {
    [CompilerGeneratedAttribute]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Algorithm { get; }
    public string Value { get; }
    public DocumentHash(string algorithm, string value);
    [CompilerGeneratedAttribute]
public string get_Algorithm();
    [CompilerGeneratedAttribute]
public string get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class StrawberryShake.EntityId : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Name { get; }
    public object Value { get; }
    public EntityId(string name, object value);
    public void Deconstruct(String& name, Object& value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public object get_Value();
    public bool Equals(EntityId other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(EntityId x, EntityId y);
    public static bool op_Inequality(EntityId x, EntityId y);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class StrawberryShake.EntityIdOrData : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<EntityId> <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    public Nullable`1<EntityId> EntityId { get; }
    public bool IsEntityId { get; }
    public object Data { get; }
    public bool IsData { get; }
    public EntityIdOrData(EntityId entityId);
    [NullableContextAttribute("1")]
public EntityIdOrData(object data);
    [CompilerGeneratedAttribute]
public Nullable`1<EntityId> get_EntityId();
    public bool get_IsEntityId();
    [CompilerGeneratedAttribute]
public object get_Data();
    public bool get_IsData();
    public static EntityIdOrData op_Implicit(EntityId entityId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class StrawberryShake.EntityInfo : ValueType {
    [CompilerGeneratedAttribute]
private EntityId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Entity>k__BackingField;
    public EntityId Id { get; }
    public object Entity { get; }
    public EntityInfo(EntityId id, object entity);
    [CompilerGeneratedAttribute]
public EntityId get_Id();
    [CompilerGeneratedAttribute]
public object get_Entity();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StrawberryShake.EntityStore : object {
    private object _sync;
    private CancellationTokenSource _cts;
    private Channel`1<EntityUpdate> _updates;
    private EntityUpdateObservable _entityUpdateObservable;
    private EntityStoreSnapshot _snapshot;
    private bool _disposed;
    public IEntityStoreSnapshot CurrentSnapshot { get; }
    public sealed virtual IEntityStoreSnapshot get_CurrentSnapshot();
    public sealed virtual void Update(Action`1<IEntityStoreUpdateSession> action);
    public sealed virtual IObservable`1<EntityUpdate> Watch();
    public sealed virtual void Dispose();
    private void BeginProcessEntityUpdates();
    [AsyncStateMachineAttribute("StrawberryShake.EntityStore/<ProcessEntityUpdates>d__13")]
private Task ProcessEntityUpdates();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class StrawberryShake.EntityStoreSnapshot : object {
    private Dictionary`2<EntityId, object> _entities;
    [CompilerGeneratedAttribute]
private ulong <Version>k__BackingField;
    public ulong Version { get; }
    public EntityStoreSnapshot(Dictionary`2<EntityId, object> entities, ulong version);
    internal Dictionary`2<EntityId, object> Copy();
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_Version();
    public sealed virtual TEntity GetEntity(EntityId id);
    public sealed virtual bool TryGetEntity(EntityId id, TEntity& entity);
    public sealed virtual IReadOnlyList`1<TEntity> GetEntities(IEnumerable`1<EntityId> ids);
    public sealed virtual IEnumerable`1<EntityInfo> GetEntities(string typeName);
    public sealed virtual IReadOnlyCollection`1<EntityId> GetEntityIds();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class StrawberryShake.EntityStoreUpdateSession : object {
    private Dictionary`2<EntityId, object> _entities;
    [CompilerGeneratedAttribute]
private EntityStoreSnapshot <CurrentSnapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<EntityId> <UpdatedEntityIds>k__BackingField;
    public EntityStoreSnapshot CurrentSnapshot { get; }
    public HashSet`1<EntityId> UpdatedEntityIds { get; }
    private IEntityStoreSnapshot StrawberryShake.IEntityStoreUpdateSession.CurrentSnapshot { get; }
    public EntityStoreUpdateSession(EntityStoreSnapshot originalSnapshot);
    [CompilerGeneratedAttribute]
public EntityStoreSnapshot get_CurrentSnapshot();
    [CompilerGeneratedAttribute]
public HashSet`1<EntityId> get_UpdatedEntityIds();
    private sealed virtual override IEntityStoreSnapshot StrawberryShake.IEntityStoreUpdateSession.get_CurrentSnapshot();
    public sealed virtual void SetEntity(EntityId id, TEntity entity);
    public sealed virtual void RemoveEntity(EntityId id);
    public sealed virtual void RemoveEntityRange(IEnumerable`1<EntityId> entityIds);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StrawberryShake.EntityUpdate : object {
    [CompilerGeneratedAttribute]
private IEntityStoreSnapshot <Snapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<EntityId> <UpdatedEntityIds>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Version>k__BackingField;
    public IEntityStoreSnapshot Snapshot { get; }
    public ISet`1<EntityId> UpdatedEntityIds { get; }
    public ulong Version { get; }
    public EntityUpdate(IEntityStoreSnapshot snapshot, ISet`1<EntityId> updatedEntityIds);
    [CompilerGeneratedAttribute]
public IEntityStoreSnapshot get_Snapshot();
    [CompilerGeneratedAttribute]
public ISet`1<EntityId> get_UpdatedEntityIds();
    [CompilerGeneratedAttribute]
public ulong get_Version();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class StrawberryShake.ErrorCodes : object {
    public static string InvalidRuntimeType;
    public static string InvalidResultDataStructure;
}
public enum StrawberryShake.ExecutionStrategy : Enum {
    public int value__;
    public static ExecutionStrategy CacheFirst;
    public static ExecutionStrategy CacheAndNetwork;
    public static ExecutionStrategy NetworkOnly;
}
[ExtensionAttribute]
public static class StrawberryShake.Extensions.ObservableExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable Subscribe(IObservable`1<T> observable, Action`1<T> next, Action complete);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StrawberryShake.GraphQLClientException : Exception {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IClientError> <Errors>k__BackingField;
    public string Message { get; }
    public IReadOnlyList`1<IClientError> Errors { get; }
    public GraphQLClientException(string message);
    public GraphQLClientException(IClientError error);
    public GraphQLClientException(IClientError[] errors);
    public GraphQLClientException(IEnumerable`1<IClientError> errors);
    protected GraphQLClientException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IClientError> get_Errors();
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IClientBuilder`1 {
    public string ClientName { get; }
    public IServiceCollection Services { get; }
    public IServiceCollection ClientServices { get; }
    public abstract virtual string get_ClientName();
    public abstract virtual IServiceCollection get_Services();
    public abstract virtual IServiceCollection get_ClientServices();
}
[NullableContextAttribute("2")]
public interface StrawberryShake.IClientError {
    [NullableAttribute("1")]
public string Message { get; }
    public string Code { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<object> Path { get; }
    public IReadOnlyList`1<Location> Locations { get; }
    public Exception Exception { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extensions { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Message();
    public abstract virtual string get_Code();
    public abstract virtual IReadOnlyList`1<object> get_Path();
    public abstract virtual IReadOnlyList`1<Location> get_Locations();
    public abstract virtual Exception get_Exception();
    public abstract virtual IReadOnlyDictionary`2<string, object> get_Extensions();
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IConnection`1 {
    public abstract virtual IAsyncEnumerable`1<Response`1<TResponseBody>> ExecuteAsync(OperationRequest request);
}
public interface StrawberryShake.IDocument {
    public OperationKind Kind { get; }
    public ReadOnlySpan`1<byte> Body { get; }
    public DocumentHash Hash { get; }
    public abstract virtual OperationKind get_Kind();
    public abstract virtual ReadOnlySpan`1<byte> get_Body();
    public abstract virtual DocumentHash get_Hash();
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IEntityIdSerializer {
    public abstract virtual EntityId Parse(JsonElement obj);
    public abstract virtual string Format(EntityId entityId);
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IEntityMapper`2 {
    public abstract virtual TModel Map(TEntity entity, IEntityStoreSnapshot snapshot);
}
public interface StrawberryShake.IEntityReadSession {
    public ulong Version { get; }
    public abstract virtual ulong get_Version();
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IEntityStore {
    public IEntityStoreSnapshot CurrentSnapshot { get; }
    public abstract virtual IEntityStoreSnapshot get_CurrentSnapshot();
    public abstract virtual void Update(Action`1<IEntityStoreUpdateSession> action);
    public abstract virtual IObservable`1<EntityUpdate> Watch();
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IEntityStoreSnapshot {
    public ulong Version { get; }
    public abstract virtual ulong get_Version();
    public abstract virtual TEntity GetEntity(EntityId id);
    public abstract virtual bool TryGetEntity(EntityId id, TEntity& entity);
    public abstract virtual IReadOnlyList`1<TEntity> GetEntities(IEnumerable`1<EntityId> ids);
    public abstract virtual IEnumerable`1<EntityInfo> GetEntities(string typeName);
    public abstract virtual IReadOnlyCollection`1<EntityId> GetEntityIds();
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IEntityStoreUpdateSession {
    public IEntityStoreSnapshot CurrentSnapshot { get; }
    public abstract virtual IEntityStoreSnapshot get_CurrentSnapshot();
    public abstract virtual void SetEntity(EntityId id, TEntity entity);
    public abstract virtual void RemoveEntity(EntityId id);
    public abstract virtual void RemoveEntityRange(IEnumerable`1<EntityId> entityIds);
}
public interface StrawberryShake.IEntityUpdateSession {
    public ulong Version { get; }
    public abstract virtual ulong get_Version();
}
public class StrawberryShake.Internal.ArrayWriter : object {
    private static int _initialBufferSize;
    [NullableAttribute("1")]
private Byte[] _buffer;
    private int _capacity;
    private int _start;
    private bool _disposed;
    public int Length { get; }
    public int get_Length();
    [NullableContextAttribute("1")]
public Byte[] GetInternalBuffer();
    public ReadOnlyMemory`1<byte> GetWrittenMemory();
    public ReadOnlySpan`1<byte> GetWrittenSpan();
    public sealed virtual void Advance(int count);
    public sealed virtual Memory`1<byte> GetMemory(int sizeHint);
    public sealed virtual Span`1<byte> GetSpan(int sizeHint);
    public ArraySegment`1<byte> ToArraySegment();
    private void EnsureBufferCapacity(int neededCapacity);
    public void Reset();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class StrawberryShake.Internal.ComparisonHelper : object {
    public static bool SequenceEqual(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    public static bool SequenceEqual(IEnumerable`1<IEnumerable`1<TSource>> first, IEnumerable`1<IEnumerable`1<TSource>> second);
    public static bool SequenceEqual(IEnumerable first, IEnumerable second);
    public static bool DictionaryEqual(IReadOnlyDictionary`2<string, object> first, IReadOnlyDictionary`2<string, object> second);
    [NullableContextAttribute("1")]
private static bool DictionaryEqualInternal(T first, T second);
    [NullableContextAttribute("1")]
private static bool ListEqualInternal(T first, T second);
    private static bool ObjEqual(object first, object second);
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IOperationExecutor`1 {
    public abstract virtual Task`1<IOperationResult`1<TResultData>> ExecuteAsync(OperationRequest request, CancellationToken cancellationToken);
    public abstract virtual IObservable`1<IOperationResult`1<TResultData>> Watch(OperationRequest request, Nullable`1<ExecutionStrategy> strategy);
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IOperationRequestFactory {
    public Type ResultType { get; }
    public abstract virtual Type get_ResultType();
    public abstract virtual OperationRequest Create(IReadOnlyDictionary`2<string, object> variables);
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IOperationResult {
    [NullableAttribute("2")]
public object Data { get; }
    public Type DataType { get; }
    [NullableAttribute("2")]
public IOperationResultDataInfo DataInfo { get; }
    public object DataFactory { get; }
    public IReadOnlyList`1<IClientError> Errors { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extensions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> ContextData { get; }
    [NullableContextAttribute("2")]
public abstract virtual object get_Data();
    public abstract virtual Type get_DataType();
    [NullableContextAttribute("2")]
public abstract virtual IOperationResultDataInfo get_DataInfo();
    public abstract virtual object get_DataFactory();
    public abstract virtual IReadOnlyList`1<IClientError> get_Errors();
    public abstract virtual IReadOnlyDictionary`2<string, object> get_Extensions();
    public abstract virtual IReadOnlyDictionary`2<string, object> get_ContextData();
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IOperationResult`1 {
    [NullableAttribute("2")]
public TResultData Data { get; }
    public IOperationResultDataFactory`1<TResultData> DataFactory { get; }
    [NullableContextAttribute("2")]
public abstract virtual TResultData get_Data();
    public abstract virtual IOperationResultDataFactory`1<TResultData> get_DataFactory();
    public abstract virtual IOperationResult`1<TResultData> WithData(TResultData data, IOperationResultDataInfo dataInfo);
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IOperationResultBuilder`2 {
    public abstract virtual IOperationResult`1<TResultData> Build(Response`1<TResponseBody> response);
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IOperationResultDataFactory {
    public Type ResultType { get; }
    public abstract virtual Type get_ResultType();
    public abstract virtual object Create(IOperationResultDataInfo dataInfo, IEntityStoreSnapshot snapshot);
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IOperationResultDataFactory`1 {
    public abstract virtual TResultData Create(IOperationResultDataInfo dataInfo, IEntityStoreSnapshot snapshot);
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IOperationResultDataInfo {
    public IReadOnlyCollection`1<EntityId> EntityIds { get; }
    public ulong Version { get; }
    public abstract virtual IReadOnlyCollection`1<EntityId> get_EntityIds();
    public abstract virtual ulong get_Version();
    public abstract virtual IOperationResultDataInfo WithVersion(ulong version);
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IOperationStore {
    public abstract virtual void Set(OperationRequest operationRequest, IOperationResult`1<TResultData> operationResult);
    public abstract virtual void Set(OperationRequest operationRequest, IOperationResult operationResult);
    public abstract virtual void Reset(OperationRequest operationRequest);
    public abstract virtual void Remove(OperationRequest operationRequest);
    public abstract virtual void Clear();
    public abstract virtual bool TryGet(OperationRequest operationRequest, IOperationResult`1& result);
    public abstract virtual IEnumerable`1<StoredOperationVersion> GetAll();
    public abstract virtual IReadOnlyList`1<EntityId> GetUsedEntityIds();
    public abstract virtual IObservable`1<IOperationResult`1<TResultData>> Watch(OperationRequest operationRequest);
    public abstract virtual IObservable`1<OperationUpdate> Watch();
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IResultPatcher`1 {
    public abstract virtual void SetResponse(Response`1<TData> response);
    public abstract virtual Response`1<TData> PatchResponse(Response`1<TData> response);
}
[NullableContextAttribute("1")]
public interface StrawberryShake.IStoreAccessor {
    public IOperationStore OperationStore { get; }
    public IEntityStore EntityStore { get; }
    public IEntityIdSerializer EntityIdSerializer { get; }
    public abstract virtual IOperationStore get_OperationStore();
    public abstract virtual IEntityStore get_EntityStore();
    public abstract virtual IEntityIdSerializer get_EntityIdSerializer();
    public abstract virtual IOperationRequestFactory GetOperationRequestFactory(Type resultType);
    public abstract virtual IOperationResultDataFactory GetOperationResultDataFactory(Type resultType);
}
[NullableContextAttribute("1")]
internal interface StrawberryShake.IStoredOperation {
    public OperationRequest Request { get; }
    [NullableAttribute("2")]
public IOperationResult LastResult { get; }
    public IReadOnlyCollection`1<EntityId> EntityIds { get; }
    public ulong Version { get; }
    public int Subscribers { get; }
    public DateTime LastModified { get; }
    public abstract virtual OperationRequest get_Request();
    [NullableContextAttribute("2")]
public abstract virtual IOperationResult get_LastResult();
    public abstract virtual IReadOnlyCollection`1<EntityId> get_EntityIds();
    public abstract virtual ulong get_Version();
    public abstract virtual int get_Subscribers();
    public abstract virtual DateTime get_LastModified();
    public abstract virtual void ClearResult();
    public abstract virtual void UpdateResult(ulong version);
    public abstract virtual void Complete();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class StrawberryShake.Json.JsonElementExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<JsonElement> GetPropertyOrNull(JsonElement obj, string key);
    [ExtensionAttribute]
public static Nullable`1<JsonElement> GetPropertyOrNull(Nullable`1<JsonElement> obj, string key);
    [ExtensionAttribute]
public static bool ContainsFragment(Nullable`1<JsonElement> obj, string key);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class StrawberryShake.Json.JsonErrorParser : object {
    public static IReadOnlyList`1<IClientError> ParseErrors(JsonElement result);
    [NullableContextAttribute("1")]
private static IClientError ParseError(JsonElement error);
    [ExtensionAttribute]
private static IReadOnlyList`1<object> ParsePath(JsonElement error);
    [ExtensionAttribute]
private static IReadOnlyList`1<Location> ParseLocations(JsonElement error);
    [ExtensionAttribute]
private static IReadOnlyDictionary`2<string, object> ParseExtensions(JsonElement error);
    [ExtensionAttribute]
private static string ParseCode(JsonElement error, IReadOnlyDictionary`2<string, object> extensions);
    private static object ParseValue(JsonElement element);
}
internal static class StrawberryShake.Json.JsonExtensionParser : object {
    public static IReadOnlyDictionary`2<string, object> ParseExtensions(JsonElement result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StrawberryShake.Json.JsonOperationRequestSerializer : object {
    public static JsonOperationRequestSerializer Default;
    private static JsonOperationRequestSerializer();
    public void Serialize(OperationRequest request, IBufferWriter`1<byte> bufferWriter, bool ignoreExtensions);
    public void Serialize(OperationRequest request, Utf8JsonWriter jsonWriter, bool ignoreExtensions);
    private static void WriteRequest(OperationRequest request, Utf8JsonWriter writer);
    private static void WriteVariables(OperationRequest request, Utf8JsonWriter writer);
    private static void WriteExtensions(OperationRequest request, Utf8JsonWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StrawberryShake.Json.JsonResultPatcher : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Response`1<JsonDocument> _response;
    [NullableAttribute("2")]
private JsonObject _json;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _extensions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _contextData;
    public sealed virtual void SetResponse(Response`1<JsonDocument> response);
    public sealed virtual Response`1<JsonDocument> PatchResponse(Response`1<JsonDocument> response);
    private static Dictionary`2<string, object> MergeExtensions(IReadOnlyDictionary`2<string, object> source, Dictionary`2<string, object> target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class StrawberryShake.Json.JsonSerializationHelper : object {
    public static string WriteValue(object value);
    public static void WriteValue(object value, Utf8JsonWriter writer);
    public static void WriteDictionary(IEnumerable`1<KeyValuePair`2<string, object>> dictionary, Utf8JsonWriter writer);
    public static void WriteList(IList list, Utf8JsonWriter writer);
    public static object ReadValue(string json);
    [NullableContextAttribute("2")]
public static object ReadValue(JsonElement element);
    public static Dictionary`2<string, object> ReadDictionary(string json);
    public static Dictionary`2<string, object> ReadDictionary(JsonElement element);
    public static List`1<object> ReadList(string json);
    public static List`1<object> ReadList(JsonElement element);
}
[IsReadOnlyAttribute]
public class StrawberryShake.Location : ValueType {
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public int Line { get; }
    public int Column { get; }
    public Location(int line, int column);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public int get_Column();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class StrawberryShake.ObserverSession : object {
    private object _sync;
    [NullableAttribute("2")]
private IDisposable _storeSession;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private RequestSession <RequestSession>k__BackingField;
    public RequestSession RequestSession { get; }
    public bool HasStoreSession { get; }
    [CompilerGeneratedAttribute]
public RequestSession get_RequestSession();
    public bool get_HasStoreSession();
    public void SetStoreSession(IDisposable storeSession);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StrawberryShake.OperationExecutor`2 : object {
    private IConnection`1<TData> _connection;
    private Func`1<IOperationResultBuilder`2<TData, TResult>> _resultBuilder;
    private Func`1<IResultPatcher`1<TData>> _resultPatcher;
    private IOperationStore _operationStore;
    private ExecutionStrategy _strategy;
    public OperationExecutor`2(IConnection`1<TData> connection, Func`1<IOperationResultBuilder`2<TData, TResult>> resultBuilder, Func`1<IResultPatcher`1<TData>> resultPatcher, IOperationStore operationStore, ExecutionStrategy strategy);
    [AsyncStateMachineAttribute("StrawberryShake.OperationExecutor`2/<ExecuteAsync>d__6")]
public sealed virtual Task`1<IOperationResult`1<TResult>> ExecuteAsync(OperationRequest request, CancellationToken cancellationToken);
    public sealed virtual IObservable`1<IOperationResult`1<TResult>> Watch(OperationRequest request, Nullable`1<ExecutionStrategy> strategy);
}
public enum StrawberryShake.OperationKind : Enum {
    public byte value__;
    public static OperationKind Query;
    public static OperationKind Mutation;
    public static OperationKind Subscription;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StrawberryShake.OperationRequest : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _extensions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _contextData;
    [NullableAttribute("2")]
private string _hash;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IDocument <Document>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, Nullable`1<Upload>> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestStrategy <Strategy>k__BackingField;
    [NullableAttribute("2")]
public string Id { get; }
    public string Name { get; }
    public IDocument Document { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Variables { get; }
    public IReadOnlyDictionary`2<string, Nullable`1<Upload>> Files { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Extensions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> ContextData { get; }
    public RequestStrategy Strategy { get; }
    public OperationRequest(string name, IDocument document, IReadOnlyDictionary`2<string, object> variables, IReadOnlyDictionary`2<string, Nullable`1<Upload>> files, RequestStrategy strategy);
    public OperationRequest(string id, string name, IDocument document, IReadOnlyDictionary`2<string, object> variables, IReadOnlyDictionary`2<string, Nullable`1<Upload>> files, RequestStrategy strategy);
    public void Deconstruct(String& id, String& name, IDocument& document, IReadOnlyDictionary`2& variables, IReadOnlyDictionary`2& extensions, IReadOnlyDictionary`2& contextData, IReadOnlyDictionary`2& files, RequestStrategy& strategy);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IDocument get_Document();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Variables();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, Nullable`1<Upload>> get_Files();
    public IDictionary`2<string, object> get_Extensions();
    public IDictionary`2<string, object> get_ContextData();
    [CompilerGeneratedAttribute]
public RequestStrategy get_Strategy();
    public IReadOnlyDictionary`2<string, object> GetExtensionsOrNull();
    public IReadOnlyDictionary`2<string, object> GetContextDataOrNull();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(OperationRequest other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public string GetHash();
    public virtual int GetHashCode();
    private static int GetHashCodeFromList(IEnumerable enumerable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class StrawberryShake.OperationResult : object {
    private static MethodInfo _factory;
    private static OperationResult();
    public static IOperationResult Create(object data, Type dataType, IOperationResultDataInfo dataInfo, IOperationResultDataFactory dataFactory, IReadOnlyList`1<IClientError> errors, IReadOnlyDictionary`2<string, object> extensions, IReadOnlyDictionary`2<string, object> contextData);
    public static IOperationResult`1<TData> Create(TData data, IOperationResultDataInfo dataInfo, IOperationResultDataFactory`1<TData> dataFactory, IReadOnlyList`1<IClientError> errors, IReadOnlyDictionary`2<string, object> extensions, IReadOnlyDictionary`2<string, object> contextData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StrawberryShake.OperationResult`1 : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IOperationResultDataInfo <DataInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IOperationResultDataFactory`1<T> <DataFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IClientError> <Errors>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Extensions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <ContextData>k__BackingField;
    [NullableAttribute("2")]
public T Data { get; }
    [NullableAttribute("2")]
private object StrawberryShake.IOperationResult.Data { get; }
    private Type StrawberryShake.IOperationResult.DataType { get; }
    [NullableAttribute("2")]
public IOperationResultDataInfo DataInfo { get; }
    public IOperationResultDataFactory`1<T> DataFactory { get; }
    private object StrawberryShake.IOperationResult.DataFactory { get; }
    public IReadOnlyList`1<IClientError> Errors { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extensions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> ContextData { get; }
    [NullableContextAttribute("2")]
public OperationResult`1(T data, IOperationResultDataInfo dataInfo, IOperationResultDataFactory`1<T> dataFactory, IReadOnlyList`1<IClientError> errors, IReadOnlyDictionary`2<string, object> extensions, IReadOnlyDictionary`2<string, object> contextData);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual T get_Data();
    [NullableContextAttribute("2")]
private sealed virtual override object StrawberryShake.IOperationResult.get_Data();
    private sealed virtual override Type StrawberryShake.IOperationResult.get_DataType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IOperationResultDataInfo get_DataInfo();
    [CompilerGeneratedAttribute]
public sealed virtual IOperationResultDataFactory`1<T> get_DataFactory();
    private sealed virtual override object StrawberryShake.IOperationResult.get_DataFactory();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<IClientError> get_Errors();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, object> get_Extensions();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, object> get_ContextData();
    public sealed virtual IOperationResult`1<T> WithData(T data, IOperationResultDataInfo dataInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class StrawberryShake.OperationResultBuilder`1 : object {
    protected IOperationResultDataFactory`1<TResultData> ResultDataFactory { get; }
    protected abstract virtual IOperationResultDataFactory`1<TResultData> get_ResultDataFactory();
    public sealed virtual IOperationResult`1<TResultData> Build(Response`1<JsonDocument> response);
    protected abstract virtual IOperationResultDataInfo BuildData(JsonElement obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class StrawberryShake.OperationResultExtensions : object {
    [ExtensionAttribute]
public static void EnsureNoErrors(IOperationResult result);
    [ExtensionAttribute]
public static bool IsErrorResult(IOperationResult result);
    [ExtensionAttribute]
public static bool IsSuccessResult(IOperationResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StrawberryShake.OperationStore : object {
    private static MethodInfo _setGeneric;
    private CancellationTokenSource _cts;
    private ConcurrentDictionary`2<OperationRequest, IStoredOperation> _results;
    private IEntityStore _entityStore;
    private OperationStoreObservable _operationStoreObservable;
    private IDisposable _entityChangeObserverSession;
    private Channel`1<OperationUpdate> _updates;
    private bool _disposed;
    public OperationStore(IEntityStore entityStore);
    private static OperationStore();
    public sealed virtual void Set(OperationRequest operationRequest, IOperationResult`1<T> operationResult);
    public sealed virtual void Set(OperationRequest operationRequest, IOperationResult operationResult);
    public sealed virtual void Reset(OperationRequest operationRequest);
    public sealed virtual void Remove(OperationRequest operationRequest);
    public sealed virtual void Clear();
    private void CleanEntityStore();
    public sealed virtual bool TryGet(OperationRequest operationRequest, IOperationResult`1& result);
    public sealed virtual IEnumerable`1<StoredOperationVersion> GetAll();
    public sealed virtual IReadOnlyList`1<EntityId> GetUsedEntityIds();
    public sealed virtual IObservable`1<IOperationResult`1<T>> Watch(OperationRequest operationRequest);
    public sealed virtual IObservable`1<OperationUpdate> Watch();
    private void OnEntityUpdate(EntityUpdate update);
    private StoredOperation`1<T> GetOrAddStoredOperation(OperationRequest request);
    private void OnUpdate(IStoredOperation operation, OperationUpdateKind kind);
    private void OnUpdate(IEnumerable`1<IStoredOperation> operations, OperationUpdateKind kind);
    private void OnUpdate(IReadOnlyList`1<StoredOperationVersion> operations, OperationUpdateKind kind);
    public sealed virtual void Dispose();
    private void BeginProcessOperationUpdates(CancellationToken ct);
    [AsyncStateMachineAttribute("StrawberryShake.OperationStore/<ProcessOperationUpdates>d__27")]
private Task ProcessOperationUpdates(CancellationToken ct);
    [CompilerGeneratedAttribute]
private void <CleanEntityStore>b__14_0(IEntityStoreUpdateSession session);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StrawberryShake.OperationUpdate : object {
    [CompilerGeneratedAttribute]
private OperationUpdateKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<StoredOperationVersion> <OperationVersions>k__BackingField;
    public OperationUpdateKind Kind { get; }
    public IReadOnlyList`1<StoredOperationVersion> OperationVersions { get; }
    public OperationUpdate(OperationUpdateKind kind, IReadOnlyList`1<StoredOperationVersion> operationVersions);
    [CompilerGeneratedAttribute]
public OperationUpdateKind get_Kind();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<StoredOperationVersion> get_OperationVersions();
}
public enum StrawberryShake.OperationUpdateKind : Enum {
    public int value__;
    public static OperationUpdateKind Updated;
    public static OperationUpdateKind Removed;
}
internal class StrawberryShake.RequestSession : object {
    [NullableAttribute("1")]
private CancellationTokenSource _cts;
    private bool _disposed;
    public CancellationToken Abort { get; }
    public CancellationToken get_Abort();
    public void Cancel();
    public sealed virtual void Dispose();
}
public enum StrawberryShake.RequestStrategy : Enum {
    public int value__;
    public static RequestStrategy Default;
    public static RequestStrategy PersistedQuery;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class StrawberryShake.Response`1 : object {
    private bool _disposed;
    [CompilerGeneratedAttribute]
private TBody <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPatch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasNext>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Extensions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <ContextData>k__BackingField;
    public TBody Body { get; }
    public Exception Exception { get; }
    public bool IsPatch { get; }
    public bool HasNext { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extensions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> ContextData { get; }
    public Response`1(TBody body, Exception exception, bool isPatch, bool hasNext, IReadOnlyDictionary`2<string, object> extensions, IReadOnlyDictionary`2<string, object> contextData);
    [CompilerGeneratedAttribute]
public TBody get_Body();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public bool get_IsPatch();
    [CompilerGeneratedAttribute]
public bool get_HasNext();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Extensions();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_ContextData();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class StrawberryShake.ResultFields : object {
    public static string Data;
    public static string Errors;
    public static string Path;
    public static string Label;
    public static string HasNext;
    public static string Extensions;
}
public class StrawberryShake.Serialization.BooleanSerializer : ScalarSerializer`1<bool> {
    [NullableContextAttribute("1")]
public BooleanSerializer(string typeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class StrawberryShake.Serialization.BuiltInScalarNames : object {
    public static string String;
    public static string ID;
    public static string Boolean;
    public static string Short;
    public static string Int;
    public static string Long;
    public static string Float;
    public static string Decimal;
    public static string Url;
    public static string Upload;
    public static string UUID;
    public static string Byte;
    public static string ByteArray;
    public static string Any;
    public static string DateTime;
    public static string Date;
    public static string TimeSpan;
    public static string MultiplierPath;
    public static string Name;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class StrawberryShake.Serialization.ByteArraySerializer : ScalarSerializer`1<Byte[]> {
    public ByteArraySerializer(string typeName);
}
public class StrawberryShake.Serialization.ByteSerializer : ScalarSerializer`1<byte> {
    [NullableContextAttribute("1")]
public ByteSerializer(string typeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class StrawberryShake.Serialization.DateSerializer : ScalarSerializer`2<string, DateTime> {
    private static string _dateFormat;
    public DateSerializer(string typeName);
    public virtual DateTime Parse(string serializedValue);
    protected virtual string Format(DateTime runtimeValue);
    [NullableContextAttribute("2")]
private static bool TryDeserializeFromString(string serialized, Nullable`1& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class StrawberryShake.Serialization.DateTimeSerializer : ScalarSerializer`2<string, DateTimeOffset> {
    private static string _utcFormat;
    private static string _localFormat;
    public DateTimeSerializer(string typeName);
    public virtual DateTimeOffset Parse(string serializedValue);
    protected virtual string Format(DateTimeOffset runtimeValue);
    [NullableContextAttribute("2")]
private static bool TryDeserializeFromString(string serialized, Nullable`1& value);
}
public class StrawberryShake.Serialization.DecimalSerializer : ScalarSerializer`1<decimal> {
    [NullableContextAttribute("1")]
public DecimalSerializer(string typeName);
}
public class StrawberryShake.Serialization.FloatSerializer : ScalarSerializer`1<double> {
    [NullableContextAttribute("1")]
public FloatSerializer(string typeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class StrawberryShake.Serialization.IdSerializer : ScalarSerializer`1<string> {
    public IdSerializer(string typeName);
}
public interface StrawberryShake.Serialization.IInputObjectFormatter {
    [NullableContextAttribute("1")]
public abstract virtual void Initialize(ISerializerResolver serializerResolver);
}
public interface StrawberryShake.Serialization.IInputValueFormatter {
    [NullableContextAttribute("2")]
public abstract virtual object Format(object runtimeValue);
}
[NullableContextAttribute("2")]
public interface StrawberryShake.Serialization.ILeafValueParser`2 {
    [NullableContextAttribute("1")]
public abstract virtual TRuntime Parse(TSerialized serializedValue);
}
public class StrawberryShake.Serialization.IntSerializer : ScalarSerializer`1<int> {
    [NullableContextAttribute("1")]
public IntSerializer(string typeName);
}
[NullableContextAttribute("1")]
public interface StrawberryShake.Serialization.ISerializer {
    public string TypeName { get; }
    public abstract virtual string get_TypeName();
}
[NullableContextAttribute("1")]
public interface StrawberryShake.Serialization.ISerializerResolver {
    public abstract virtual ILeafValueParser`2<TSerialized, TRuntime> GetLeafValueParser(string typeName);
    public abstract virtual IInputValueFormatter GetInputValueFormatter(string typeName);
}
internal class StrawberryShake.Serialization.Iso8601Duration : ValueType {
    internal static bool TryToTimeSpan(int years, int months, int weeks, int days, int hours, int minutes, int seconds, UInt32 nanoseconds, bool isNegative, Nullable`1& result);
    [NullableContextAttribute("1")]
internal static bool TryParse(string s, Nullable`1& result);
    [NullableContextAttribute("1")]
private static bool TryParseDigits(string s, Int32& offset, bool eatDigits, Int32& result, Int32& numDigits);
}
public class StrawberryShake.Serialization.JsonSerializer : ScalarSerializer`2<JsonElement, JsonElement> {
    [NullableContextAttribute("1")]
public JsonSerializer(string typeName);
    public virtual JsonElement Parse(JsonElement serializedValue);
    protected virtual JsonElement Format(JsonElement runtimeValue);
}
public class StrawberryShake.Serialization.LongSerializer : ScalarSerializer`1<long> {
    [NullableContextAttribute("1")]
public LongSerializer(string typeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class StrawberryShake.Serialization.ScalarSerializer`1 : ScalarSerializer`2<T, T> {
    protected ScalarSerializer`1(string typeName);
    public virtual T Parse(T serializedValue);
    protected virtual T Format(T runtimeValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class StrawberryShake.Serialization.ScalarSerializer`2 : object {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string TypeName { get; }
    protected ScalarSerializer`2(string typeName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TypeName();
    public abstract virtual TRuntime Parse(TSerialized serializedValue);
    [NullableContextAttribute("2")]
public sealed virtual object Format(object runtimeValue);
    protected abstract virtual TSerialized Format(TRuntime runtimeValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StrawberryShake.Serialization.SerializerResolver : object {
    private Dictionary`2<string, ISerializer> _serializers;
    public SerializerResolver(IEnumerable`1<ISerializer> serializers);
    public sealed virtual ILeafValueParser`2<TSerialized, TRuntime> GetLeafValueParser(string typeName);
    public sealed virtual IInputValueFormatter GetInputValueFormatter(string typeName);
}
public class StrawberryShake.Serialization.ShortSerializer : ScalarSerializer`1<short> {
    [NullableContextAttribute("1")]
public ShortSerializer(string typeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class StrawberryShake.Serialization.StringSerializer : ScalarSerializer`1<string> {
    public StringSerializer(string typeName);
}
public enum StrawberryShake.Serialization.TimeSpanFormat : Enum {
    public int value__;
    public static TimeSpanFormat Iso8601;
    public static TimeSpanFormat DotNet;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class StrawberryShake.Serialization.TimeSpanSerializer : ScalarSerializer`2<string, TimeSpan> {
    private TimeSpanFormat _format;
    public TimeSpanSerializer(string typeName, TimeSpanFormat format);
    public virtual TimeSpan Parse(string serializedValue);
    protected virtual string Format(TimeSpan runtimeValue);
    private static bool TryDeserializeFromString(string serialized, TimeSpanFormat format, Nullable`1& value);
    [NullableContextAttribute("2")]
private bool TrySerialize(object runtimeValue, String& resultValue);
    private static bool TryDeserializeIso8601(string serialized, Nullable`1& value);
    private static bool TryDeserializeDotNet(string serialized, Nullable`1& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class StrawberryShake.Serialization.UploadSerializer : ScalarSerializer`2<string, Upload> {
    public UploadSerializer(string typeName);
    public virtual Upload Parse(string serializedValue);
    protected virtual string Format(Upload runtimeValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class StrawberryShake.Serialization.UrlSerializer : ScalarSerializer`2<string, Uri> {
    public UrlSerializer(string typeName);
    public virtual Uri Parse(string serializedValue);
    protected virtual string Format(Uri runtimeValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class StrawberryShake.Serialization.UUIDSerializer : ScalarSerializer`2<string, Guid> {
    private string _format;
    public UUIDSerializer(string typeName, string format);
    public virtual Guid Parse(string serializedValue);
    protected virtual string Format(Guid runtimeValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class StrawberryShake.StoreAccessor : object {
    private Dictionary`2<Type, IOperationRequestFactory> _requestFactories;
    private Dictionary`2<Type, IOperationResultDataFactory> _resultDataFactories;
    [CompilerGeneratedAttribute]
private IOperationStore <OperationStore>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityStore <EntityStore>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityIdSerializer <EntityIdSerializer>k__BackingField;
    public IOperationStore OperationStore { get; }
    public IEntityStore EntityStore { get; }
    public IEntityIdSerializer EntityIdSerializer { get; }
    protected StoreAccessor(IOperationStore operationStore, IEntityStore entityStore, IEntityIdSerializer entityIdSerializer, IEnumerable`1<IOperationRequestFactory> operationRequestFactories, IEnumerable`1<IOperationResultDataFactory> operationResultDataFactories);
    [CompilerGeneratedAttribute]
public sealed virtual IOperationStore get_OperationStore();
    [CompilerGeneratedAttribute]
public sealed virtual IEntityStore get_EntityStore();
    [CompilerGeneratedAttribute]
public sealed virtual IEntityIdSerializer get_EntityIdSerializer();
    public sealed virtual IOperationRequestFactory GetOperationRequestFactory(Type resultType);
    public sealed virtual IOperationResultDataFactory GetOperationResultDataFactory(Type resultType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class StrawberryShake.StoredOperation`1 : object {
    private object _sync;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ImmutableList`1<Subscription<T>> _subscriptions;
    private bool _disposed;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IOperationResult`1<T> _lastResult;
    [CompilerGeneratedAttribute]
private OperationRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastModified>k__BackingField;
    public OperationRequest Request { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IOperationResult`1<T> LastResult { get; private set; }
    [NullableAttribute("2")]
private IOperationResult StrawberryShake.IStoredOperation.LastResult { get; }
    public IReadOnlyCollection`1<EntityId> EntityIds { get; }
    public ulong Version { get; }
    public int Subscribers { get; }
    public DateTime LastModified { get; private set; }
    public StoredOperation`1(OperationRequest request);
    [CompilerGeneratedAttribute]
public sealed virtual OperationRequest get_Request();
    public IOperationResult`1<T> get_LastResult();
    private void set_LastResult(IOperationResult`1<T> value);
    [NullableContextAttribute("2")]
private sealed virtual override IOperationResult StrawberryShake.IStoredOperation.get_LastResult();
    public sealed virtual IReadOnlyCollection`1<EntityId> get_EntityIds();
    public sealed virtual ulong get_Version();
    public sealed virtual int get_Subscribers();
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_LastModified();
    [CompilerGeneratedAttribute]
private void set_LastModified(DateTime value);
    public void SetResult(IOperationResult`1<T> result);
    public sealed virtual void ClearResult();
    public sealed virtual void UpdateResult(ulong version);
    public sealed virtual void Complete();
    public sealed virtual IDisposable Subscribe(IObserver`1<IOperationResult`1<T>> observer);
    private void Unsubscribe(Subscription<T> subscription);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class StrawberryShake.StoredOperationVersion : ValueType {
    [CompilerGeneratedAttribute]
private OperationRequest <Request>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IOperationResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Subscribers>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastModified>k__BackingField;
    public OperationRequest Request { get; }
    [NullableAttribute("2")]
public IOperationResult Result { get; }
    public int Subscribers { get; }
    public DateTime LastModified { get; }
    public StoredOperationVersion(OperationRequest request, IOperationResult result, int subscribers, DateTime lastModified);
    [CompilerGeneratedAttribute]
public OperationRequest get_Request();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IOperationResult get_Result();
    [CompilerGeneratedAttribute]
public int get_Subscribers();
    [CompilerGeneratedAttribute]
public DateTime get_LastModified();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StrawberryShake.StorelessOperationExecutor`2 : object {
    private IConnection`1<TData> _connection;
    private Func`1<IOperationResultBuilder`2<TData, TResult>> _resultBuilder;
    private Func`1<IResultPatcher`1<TData>> _resultPatcher;
    public StorelessOperationExecutor`2(IConnection`1<TData> connection, Func`1<IOperationResultBuilder`2<TData, TResult>> resultBuilder, Func`1<IResultPatcher`1<TData>> resultPatcher);
    [AsyncStateMachineAttribute("StrawberryShake.StorelessOperationExecutor`2/<ExecuteAsync>d__4")]
public sealed virtual Task`1<IOperationResult`1<TResult>> ExecuteAsync(OperationRequest request, CancellationToken cancellationToken);
    public sealed virtual IObservable`1<IOperationResult`1<TResult>> Watch(OperationRequest request, Nullable`1<ExecutionStrategy> strategy);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class StrawberryShake.ThrowHelper : object {
    internal static GraphQLClientException InputFormatter_InvalidType(string runtimeType, string scalarType);
    internal static GraphQLClientException DateTimeSerializer_InvalidFormat(string serializedValue);
    internal static GraphQLClientException DateSerializer_InvalidFormat(string serializedValue);
    internal static GraphQLClientException UrlFormatter_CouldNotParseUri(string value);
    internal static GraphQLClientException UrlFormatter_DoesNotStartWithSlash(string uri);
    internal static GraphQLClientException TimeSpanSerializer_CouldNotParseValue(string value, TimeSpanFormat format);
    internal static GraphQLClientException TimeSpanSerializer_CouldNotFormatValue(TimeSpan value, TimeSpanFormat format);
    internal static GraphQLClientException UuidSerializer_CouldNotParse(string guid);
    internal static NotSupportedException UploadScalar_OutputNotSupported();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class StrawberryShake.Upload : ValueType {
    [CompilerGeneratedAttribute]
private Stream <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public Stream Content { get; }
    public string FileName { get; }
    public Upload(Stream content, string fileName);
    [CompilerGeneratedAttribute]
public Stream get_Content();
    [CompilerGeneratedAttribute]
public string get_FileName();
}
public enum StrawberryShake.ValueKind : Enum {
    public int value__;
    public static ValueKind String;
    public static ValueKind Integer;
    public static ValueKind Float;
    public static ValueKind Boolean;
    public static ValueKind Enum;
}
