[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StreamJsonRpc.ActivityTracingStrategy : object {
    [NullableAttribute("2")]
private ActivitySource activitySource;
    [NullableContextAttribute("2")]
public ActivityTracingStrategy(ActivitySource activitySource);
    public sealed virtual void ApplyOutboundActivity(JsonRpcRequest request);
    public sealed virtual IDisposable ApplyInboundActivity(JsonRpcRequest request);
    private Activity CreateNewActivity(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class StreamJsonRpc.AwaitExtensions : object {
    [ExtensionAttribute]
internal static SynchronizationContextAwaiter GetAwaiter(SynchronizationContext synchronizationContext);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class StreamJsonRpc.BadRpcHeaderException : RemoteRpcException {
    public BadRpcHeaderException(string message);
    public BadRpcHeaderException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected BadRpcHeaderException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class StreamJsonRpc.CommonMethodNameTransforms : object {
    public static Func`2<string, string> CamelCase { get; }
    public static Func`2<string, string> get_CamelCase();
    public static Func`2<string, string> Prepend(string prefix);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class StreamJsonRpc.ConnectionLostException : RemoteRpcException {
    public ConnectionLostException(string message);
    public ConnectionLostException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected ConnectionLostException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class StreamJsonRpc.CorrelationManagerTracingStrategy : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AsyncLocal`1<string> TraceStateAsyncLocal;
    [CompilerGeneratedAttribute]
private TraceSource <TraceSource>k__BackingField;
    public static string TraceState { get; public set; }
    public TraceSource TraceSource { get; public set; }
    private static CorrelationManagerTracingStrategy();
    public static string get_TraceState();
    public static void set_TraceState(string value);
    [CompilerGeneratedAttribute]
public TraceSource get_TraceSource();
    [CompilerGeneratedAttribute]
public void set_TraceSource(TraceSource value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyOutboundActivity(JsonRpcRequest request);
    [NullableContextAttribute("1")]
public sealed virtual IDisposable ApplyInboundActivity(JsonRpcRequest request);
    [NullableContextAttribute("1")]
protected virtual string GetInboundActivityName(JsonRpcRequest request);
    [NullableContextAttribute("0")]
private static void FillRandomBytes(Span`1<byte> buffer);
    [NullableContextAttribute("0")]
private static void CopyGuidToBuffer(Guid guid, Span`1<byte> buffer);
}
public enum StreamJsonRpc.DisconnectedReason : Enum {
    public int value__;
    public static DisconnectedReason StreamError;
    public static DisconnectedReason ParseError;
    public static DisconnectedReason LocallyDisposed;
    public static DisconnectedReason RemotePartyTerminated;
    public static DisconnectedReason FatalException;
    public static DisconnectedReason LocalContractViolation;
    public static DisconnectedReason RemoteProtocolViolation;
}
internal class StreamJsonRpc.DisposableAction : object {
    [NullableAttribute("1")]
private static Action EmptyAction;
    [NullableAttribute("2")]
private Action disposeAction;
    public bool IsDisposed { get; }
    [NullableContextAttribute("2")]
internal DisposableAction(Action disposeAction);
    private static DisposableAction();
    public sealed virtual bool get_IsDisposed();
    public sealed virtual void Dispose();
}
public enum StreamJsonRpc.ExceptionProcessing : Enum {
    public int value__;
    public static ExceptionProcessing CommonErrorData;
    public static ExceptionProcessing ISerializable;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class StreamJsonRpc.ExceptionSettings : object {
    public static ExceptionSettings TrustedData;
    public static ExceptionSettings UntrustedData;
    [CompilerGeneratedAttribute]
private int <RecursionLimit>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public int RecursionLimit { get; public set; }
    protected ExceptionSettings(int recursionLimit);
    [CompilerGeneratedAttribute]
protected ExceptionSettings(ExceptionSettings original);
    private static ExceptionSettings();
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public int get_RecursionLimit();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RecursionLimit(int value);
    public abstract virtual bool CanDeserialize(Type type);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ExceptionSettings left, ExceptionSettings right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ExceptionSettings left, ExceptionSettings right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ExceptionSettings other);
    [CompilerGeneratedAttribute]
public abstract virtual ExceptionSettings <Clone>$();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class StreamJsonRpc.FormatterBase : object {
    private JsonRpc rpc;
    private MultiplexingStream multiplexingStream;
    private MessageFormatterProgressTracker formatterProgressTracker;
    private MessageFormatterDuplexPipeTracker duplexPipeTracker;
    private MessageFormatterEnumerableTracker enumerableTracker;
    private MessageFormatterRpcMarshaledContextTracker rpcMarshaledContextTracker;
    private RequestId serializingMessageWithId;
    private RequestId deserializingMessageWithId;
    private bool serializingRequest;
    [CompilerGeneratedAttribute]
private JsonRpcMethodAttribute <ApplicableMethodAttributeOnDeserializingMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonRpcMessage <DeserializingMessage>k__BackingField;
    private RequestId StreamJsonRpc.Reflection.IJsonRpcFormatterState.SerializingMessageWithId { get; }
    private RequestId StreamJsonRpc.Reflection.IJsonRpcFormatterState.DeserializingMessageWithId { get; }
    private bool StreamJsonRpc.Reflection.IJsonRpcFormatterState.SerializingRequest { get; }
    [NullableAttribute("1")]
unknown JsonRpc StreamJsonRpc.IJsonRpcInstanceContainer.Rpc {private set; }
    public MultiplexingStream MultiplexingStream { get; public set; }
    protected JsonRpc JsonRpc { get; }
    [NullableAttribute("1")]
protected MessageFormatterProgressTracker FormatterProgressTracker { get; }
    [NullableAttribute("1")]
protected MessageFormatterDuplexPipeTracker DuplexPipeTracker { get; }
    [NullableAttribute("1")]
protected MessageFormatterEnumerableTracker EnumerableTracker { get; }
    protected JsonRpcMethodAttribute ApplicableMethodAttributeOnDeserializingMethod { get; private set; }
    [NullableAttribute("1")]
private protected MessageFormatterRpcMarshaledContextTracker RpcMarshaledContextTracker { get; }
    private protected JsonRpcMessage DeserializingMessage { get; private set; }
    private sealed virtual override RequestId StreamJsonRpc.Reflection.IJsonRpcFormatterState.get_SerializingMessageWithId();
    private sealed virtual override RequestId StreamJsonRpc.Reflection.IJsonRpcFormatterState.get_DeserializingMessageWithId();
    private sealed virtual override bool StreamJsonRpc.Reflection.IJsonRpcFormatterState.get_SerializingRequest();
    [NullableContextAttribute("1")]
private sealed virtual override void StreamJsonRpc.IJsonRpcInstanceContainer.set_Rpc(JsonRpc value);
    public MultiplexingStream get_MultiplexingStream();
    public void set_MultiplexingStream(MultiplexingStream value);
    protected JsonRpc get_JsonRpc();
    [NullableContextAttribute("1")]
protected MessageFormatterProgressTracker get_FormatterProgressTracker();
    [NullableContextAttribute("1")]
protected MessageFormatterDuplexPipeTracker get_DuplexPipeTracker();
    [NullableContextAttribute("1")]
protected MessageFormatterEnumerableTracker get_EnumerableTracker();
    [CompilerGeneratedAttribute]
protected JsonRpcMethodAttribute get_ApplicableMethodAttributeOnDeserializingMethod();
    [CompilerGeneratedAttribute]
private void set_ApplicableMethodAttributeOnDeserializingMethod(JsonRpcMethodAttribute value);
    [NullableContextAttribute("1")]
private protected MessageFormatterRpcMarshaledContextTracker get_RpcMarshaledContextTracker();
    [CompilerGeneratedAttribute]
private protected JsonRpcMessage get_DeserializingMessage();
    [CompilerGeneratedAttribute]
private void set_DeserializingMessage(JsonRpcMessage value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
protected DeserializationTracking TrackDeserialization(JsonRpcMessage message, ReadOnlySpan`1<ParameterInfo> parameters);
    [NullableContextAttribute("1")]
protected SerializationTracking TrackSerialization(JsonRpcMessage message);
    [NullableContextAttribute("1")]
private protected void TryHandleSpecialIncomingMessage(JsonRpcMessage message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StreamJsonRpc.HeaderDelimitedMessageHandler : PipeMessageHandler {
    private static string ContentLengthHeaderNameText;
    private static string ContentTypeHeaderNameText;
    private static string DefaultSubType;
    private static Encoding DefaultContentEncoding;
    private static Encoding HeaderEncoding;
    private static Byte[] ContentLengthHeaderName;
    private static Byte[] HeaderKeyValueDelimiter;
    private static Byte[] ContentTypeHeaderName;
    private static Byte[] CrlfBytes;
    private Sequence`1<byte> contentSequenceBuilder;
    private string subType;
    public string SubType { get; public set; }
    public Encoding Encoding { get; public set; }
    private IJsonRpcMessageTextFormatter TextFormatter { get; }
    [NullableContextAttribute("2")]
public HeaderDelimitedMessageHandler(PipeWriter writer, PipeReader reader, IJsonRpcMessageFormatter formatter);
    public HeaderDelimitedMessageHandler(IDuplexPipe pipe, IJsonRpcMessageFormatter formatter);
    public HeaderDelimitedMessageHandler(Stream duplexStream, IJsonRpcMessageFormatter formatter);
    public HeaderDelimitedMessageHandler(Stream duplexStream);
    [NullableContextAttribute("2")]
public HeaderDelimitedMessageHandler(Stream sendingStream, Stream receivingStream);
    [NullableContextAttribute("2")]
public HeaderDelimitedMessageHandler(Stream sendingStream, Stream receivingStream, IJsonRpcMessageFormatter formatter);
    private static HeaderDelimitedMessageHandler();
    public string get_SubType();
    public void set_SubType(string value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    private IJsonRpcMessageTextFormatter get_TextFormatter();
    [AsyncStateMachineAttribute("StreamJsonRpc.HeaderDelimitedMessageHandler/<ReadCoreAsync>d__26")]
protected virtual ValueTask`1<JsonRpcMessage> ReadCoreAsync(CancellationToken cancellationToken);
    protected virtual void Write(JsonRpcMessage content, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
private static Encoding ParseEncodingFromContentTypeHeader(ReadOnlySequence`1<byte> contentTypeValue);
    private static bool IsLastFourBytesCrlfCrlf(Byte[] buffer, int lastIndex);
    [NullableContextAttribute("0")]
private static int GetContentLength(ReadOnlySequence`1<byte> contentLengthValue);
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<byte> Trim(ReadOnlySpan`1<byte> span);
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<byte> TrimStart(ReadOnlySpan`1<byte> span);
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<byte> TrimEnd(ReadOnlySpan`1<byte> span);
    [AsyncStateMachineAttribute("StreamJsonRpc.HeaderDelimitedMessageHandler/<ReadHeadersAsync>d__34")]
private ValueTask`1<Nullable`1<ValueTuple`2<Nullable`1<int>, Encoding>>> ReadHeadersAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static int <Write>g__WriteHeaderText|27_0(string value, Span`1<byte> memory);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static bool <ReadHeadersAsync>g__IsHeaderName|34_0(ReadOnlySequence`1<byte> buffer, ReadOnlySpan`1<byte> asciiHeaderName);
}
internal static class StreamJsonRpc.Hex : object {
    [NullableAttribute("1")]
private static Byte[] HexBytes;
    [NullableAttribute("1")]
private static Byte[] ReverseHexDigits;
    private static Hex();
    internal static void Encode(ReadOnlySpan`1<byte> src, Span`1& dest);
    internal static void Decode(ReadOnlySpan`1<char> value, Span`1<byte> bytes);
    [NullableContextAttribute("1")]
private static Byte[] BuildReverseHexDigits();
}
[NullableContextAttribute("1")]
public interface StreamJsonRpc.IActivityTracingStrategy {
    public abstract virtual void ApplyOutboundActivity(JsonRpcRequest request);
    public abstract virtual IDisposable ApplyInboundActivity(JsonRpcRequest request);
}
[NullableContextAttribute("1")]
public interface StreamJsonRpc.ICancellationStrategy {
    public abstract virtual void CancelOutboundRequest(RequestId requestId);
    public abstract virtual void OutboundRequestEnded(RequestId requestId);
    public abstract virtual void IncomingRequestStarted(RequestId requestId, CancellationTokenSource cancellationTokenSource);
    public abstract virtual void IncomingRequestEnded(RequestId requestId);
}
public interface StreamJsonRpc.IJsonRpcAsyncMessageFormatter {
    [NullableContextAttribute("1")]
public abstract virtual ValueTask`1<JsonRpcMessage> DeserializeAsync(PipeReader reader, CancellationToken cancellationToken);
}
public interface StreamJsonRpc.IJsonRpcAsyncMessageTextFormatter {
    [NullableContextAttribute("1")]
public abstract virtual ValueTask`1<JsonRpcMessage> DeserializeAsync(PipeReader reader, Encoding encoding, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface StreamJsonRpc.IJsonRpcClientProxy {
    public JsonRpc JsonRpc { get; }
    public abstract virtual JsonRpc get_JsonRpc();
}
[NullableContextAttribute("1")]
internal interface StreamJsonRpc.IJsonRpcClientProxyInternal {
    [CompilerGeneratedAttribute]
public abstract virtual void add_CallingMethod(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CallingMethod(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CalledMethod(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CalledMethod(EventHandler`1<string> value);
}
[NullableContextAttribute("1")]
public interface StreamJsonRpc.IJsonRpcInstanceContainer {
    unknown JsonRpc Rpc {public set; }
    public abstract virtual void set_Rpc(JsonRpc value);
}
[NullableContextAttribute("1")]
public interface StreamJsonRpc.IJsonRpcMessageFactory {
    public abstract virtual JsonRpcRequest CreateRequestMessage();
    public abstract virtual JsonRpcError CreateErrorMessage();
    public abstract virtual JsonRpcResult CreateResultMessage();
}
[NullableContextAttribute("1")]
public interface StreamJsonRpc.IJsonRpcMessageFormatter {
    [NullableContextAttribute("0")]
public abstract virtual JsonRpcMessage Deserialize(ReadOnlySequence`1<byte> contentBuffer);
    public abstract virtual void Serialize(IBufferWriter`1<byte> bufferWriter, JsonRpcMessage message);
    [ObsoleteAttribute("Tracing is now done via the IJsonRpcTracingCallbacks and IJsonRpcFormatterTracingCallbacks interfaces. Formatters may throw NotSupportedException from this method.")]
public abstract virtual object GetJsonText(JsonRpcMessage message);
}
[NullableContextAttribute("1")]
public interface StreamJsonRpc.IJsonRpcMessageHandler {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public IJsonRpcMessageFormatter Formatter { get; }
    public abstract virtual bool get_CanRead();
    public abstract virtual bool get_CanWrite();
    public abstract virtual IJsonRpcMessageFormatter get_Formatter();
    public abstract virtual ValueTask`1<JsonRpcMessage> ReadAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask WriteAsync(JsonRpcMessage jsonRpcMessage, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface StreamJsonRpc.IJsonRpcMessageTextFormatter {
    public Encoding Encoding { get; public set; }
    public abstract virtual Encoding get_Encoding();
    public abstract virtual void set_Encoding(Encoding value);
    public abstract virtual JsonRpcMessage Deserialize(ReadOnlySequence`1<byte> contentBuffer, Encoding encoding);
}
[NullableContextAttribute("1")]
internal interface StreamJsonRpc.IRpcMarshaledContext`1 {
    public T Proxy { get; }
    public JsonRpcTargetOptions JsonRpcTargetOptions { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void add_Disposed(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void remove_Disposed(EventHandler value);
    public abstract virtual T get_Proxy();
    public abstract virtual JsonRpcTargetOptions get_JsonRpcTargetOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StreamJsonRpc.JsonMessageFormatter : FormatterBase {
    internal static string ExceptionDataKey;
    private static JsonLoadSettings LoadSettings;
    private static IReadOnlyCollection`1<Version> SupportedProtocolVersions;
    private static Encoding DefaultEncoding;
    private static IArrayPool`1<char> JsonCharArrayPool;
    private static JsonSerializer DefaultSerializer;
    private BufferTextWriter bufferTextWriter;
    private SequenceTextReader sequenceTextReader;
    private object syncObject;
    private bool observedTransmittedRequestWithStringId;
    [DebuggerBrowsableAttribute("0")]
private Version protocolVersion;
    [DebuggerBrowsableAttribute("0")]
private Encoding encoding;
    private bool formatterInitializationChecked;
    [CompilerGeneratedAttribute]
private JsonSerializer <JsonSerializer>k__BackingField;
    public Encoding Encoding { get; public set; }
    public Version ProtocolVersion { get; public set; }
    public JsonSerializer JsonSerializer { get; }
    [NullableAttribute("2")]
public MultiplexingStream MultiplexingStream { get; public set; }
    public JsonMessageFormatter(Encoding encoding);
    private static JsonMessageFormatter();
    public sealed virtual Encoding get_Encoding();
    public sealed virtual void set_Encoding(Encoding value);
    public Version get_ProtocolVersion();
    public void set_ProtocolVersion(Version value);
    [CompilerGeneratedAttribute]
public JsonSerializer get_JsonSerializer();
    [NullableContextAttribute("2")]
public MultiplexingStream get_MultiplexingStream();
    [NullableContextAttribute("2")]
public void set_MultiplexingStream(MultiplexingStream value);
    [NullableContextAttribute("0")]
public sealed virtual JsonRpcMessage Deserialize(ReadOnlySequence`1<byte> contentBuffer);
    public sealed virtual JsonRpcMessage Deserialize(ReadOnlySequence`1<byte> contentBuffer, Encoding encoding);
    [AsyncStateMachineAttribute("StreamJsonRpc.JsonMessageFormatter/<DeserializeAsync>d__29")]
public sealed virtual ValueTask`1<JsonRpcMessage> DeserializeAsync(PipeReader reader, Encoding encoding, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<JsonRpcMessage> DeserializeAsync(PipeReader reader, CancellationToken cancellationToken);
    public sealed virtual void Serialize(IBufferWriter`1<byte> contentBuffer, JsonRpcMessage message);
    public JsonRpcMessage Deserialize(JToken json);
    public JToken Serialize(JsonRpcMessage message);
    public sealed virtual object GetJsonText(JsonRpcMessage message);
    private sealed virtual override JsonRpcRequest StreamJsonRpc.IJsonRpcMessageFactory.CreateRequestMessage();
    private sealed virtual override JsonRpcError StreamJsonRpc.IJsonRpcMessageFactory.CreateErrorMessage();
    private sealed virtual override JsonRpcResult StreamJsonRpc.IJsonRpcMessageFactory.CreateResultMessage();
    protected virtual void Dispose(bool disposing);
    private static IReadOnlyDictionary`2<string, object> PartiallyParseNamedArguments(JObject args);
    private static Object[] PartiallyParsePositionalArguments(JArray args);
    private void EnforceFormatterIsInitialized();
    private void VerifyProtocolCompliance(bool condition, JToken message, string explanation);
    private Exception CreateProtocolNonComplianceException(JToken message, string explanation);
    private void WriteJToken(IBufferWriter`1<byte> contentBuffer, JToken json);
    private JToken ReadJToken(ReadOnlySequence`1<byte> contentBuffer, Encoding encoding);
    private void ConfigureJsonTextReader(JsonTextReader reader);
    private void TokenizeUserData(JsonRpcMessage jsonRpcMessage);
    [NullableContextAttribute("2")]
private JToken TokenizeUserData(Type declaredType, object value);
    private JTokenWriter CreateJTokenWriter();
    private bool TryGetMarshaledJsonConverter(Type type, RpcMarshalableConverter& converter);
    private InboundJsonRpcRequest ReadRequest(JToken json);
    private JsonRpcResult ReadResult(JToken json);
    private JsonRpcError ReadError(JToken json);
    private RequestId ExtractRequestId(JToken json);
    private RequestId NormalizeId(RequestId id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StreamJsonRpc.JsonRpc : object {
    internal static SynchronizationContext DefaultSynchronizationContext;
    private static string JoinableTaskTokenHeaderName;
    private static MethodInfo MarshalWithControlledLifetimeOpenGenericMethodInfo;
    [DebuggerBrowsableAttribute("0")]
private object syncObject;
    [DebuggerBrowsableAttribute("0")]
private object dispatcherMapLock;
    [DebuggerBrowsableAttribute("0")]
private object disconnectedEventLock;
    private Dictionary`2<RequestId, OutstandingCallData> resultDispatcherMap;
    [DebuggerBrowsableAttribute("0")]
private Action`1<object> cancelPendingOutboundRequestAction;
    [DebuggerBrowsableAttribute("0")]
private CancellationTokenSource disconnectedSource;
    [DebuggerBrowsableAttribute("0")]
private TaskCompletionSource`1<bool> completionSource;
    [DebuggerBrowsableAttribute("0")]
private AsyncManualResetEvent dispatchCompletionSource;
    private RpcTargetInfo rpcTargetInfo;
    private ImmutableList`1<JsonRpc> remoteRpcTargets;
    [NullableAttribute("2")]
private Task readLinesTask;
    private long nextId;
    private int requestsInDispatchCount;
    [NullableAttribute("2")]
private JsonRpcDisconnectedEventArgs disconnectedEventArgs;
    [DebuggerBrowsableAttribute("0")]
private TraceSource traceSource;
    [DebuggerBrowsableAttribute("0")]
private bool cancelLocallyInvokedMethodsWhenConnectionIsClosed;
    [NullableAttribute("2")]
[DebuggerBrowsableAttribute("0")]
private SynchronizationContext synchronizationContext;
    [NullableAttribute("2")]
[DebuggerBrowsableAttribute("0")]
private JoinableTaskFactory joinableTaskFactory;
    [DebuggerBrowsableAttribute("0")]
private JoinableTaskTokenTracker joinableTaskTracker;
    [NullableAttribute("2")]
private ICancellationStrategy cancellationStrategy;
    [NullableAttribute("2")]
private IActivityTracingStrategy activityTracingStrategy;
    private ExceptionProcessing exceptionStrategy;
    private ExceptionSettings exceptionSettings;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventHandler`1<JsonRpcMessageEventArgs> requestTransmissionAborted;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventHandler`1<JsonRpcResponseEventArgs> responseReceived;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventHandler`1<JsonRpcResponseEventArgs> responseSent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<JsonRpcDisconnectedEventArgs> DisconnectedPrivate;
    [CompilerGeneratedAttribute]
private bool <AllowModificationWhileListening>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private IJsonRpcMessageHandler <MessageHandler>k__BackingField;
    [NullableAttribute("2")]
public SynchronizationContext SynchronizationContext { get; public set; }
    [NullableAttribute("2")]
public JoinableTaskFactory JoinableTaskFactory { get; public set; }
    public JoinableTaskTokenTracker JoinableTaskTracker { get; public set; }
    public Task Completion { get; }
    public Task DispatchCompletion { get; }
    public bool AllowModificationWhileListening { get; public set; }
    public bool IsDisposed { get; private set; }
    public bool CancelLocallyInvokedMethodsWhenConnectionIsClosed { get; public set; }
    public TraceSource TraceSource { get; public set; }
    [NullableAttribute("2")]
public ICancellationStrategy CancellationStrategy { get; public set; }
    public ExceptionProcessing ExceptionStrategy { get; public set; }
    public ExceptionSettings ExceptionOptions { get; public set; }
    [NullableAttribute("2")]
public IActivityTracingStrategy ActivityTracingStrategy { get; public set; }
    internal IJsonRpcMessageHandler MessageHandler { get; }
    internal CancellationToken DisconnectedToken { get; }
    internal SynchronizationContext SynchronizationContextOrDefault { get; }
    private bool HasListeningStarted { get; }
    public JsonRpc(Stream stream);
    [NullableContextAttribute("2")]
public JsonRpc(Stream sendingStream, Stream receivingStream, object target);
    public JsonRpc(IJsonRpcMessageHandler messageHandler, object target);
    public JsonRpc(IJsonRpcMessageHandler messageHandler);
    private static JsonRpc();
    public void add_Disconnected(EventHandler`1<JsonRpcDisconnectedEventArgs> value);
    public void remove_Disconnected(EventHandler`1<JsonRpcDisconnectedEventArgs> value);
    private sealed virtual override void StreamJsonRpc.Reflection.IJsonRpcFormatterCallbacks.add_RequestTransmissionAborted(EventHandler`1<JsonRpcMessageEventArgs> value);
    private sealed virtual override void StreamJsonRpc.Reflection.IJsonRpcFormatterCallbacks.remove_RequestTransmissionAborted(EventHandler`1<JsonRpcMessageEventArgs> value);
    private sealed virtual override void StreamJsonRpc.Reflection.IJsonRpcFormatterCallbacks.add_ResponseReceived(EventHandler`1<JsonRpcResponseEventArgs> value);
    private sealed virtual override void StreamJsonRpc.Reflection.IJsonRpcFormatterCallbacks.remove_ResponseReceived(EventHandler`1<JsonRpcResponseEventArgs> value);
    private sealed virtual override void StreamJsonRpc.Reflection.IJsonRpcFormatterCallbacks.add_ResponseSent(EventHandler`1<JsonRpcResponseEventArgs> value);
    private sealed virtual override void StreamJsonRpc.Reflection.IJsonRpcFormatterCallbacks.remove_ResponseSent(EventHandler`1<JsonRpcResponseEventArgs> value);
    [CompilerGeneratedAttribute]
private void add_DisconnectedPrivate(EventHandler`1<JsonRpcDisconnectedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_DisconnectedPrivate(EventHandler`1<JsonRpcDisconnectedEventArgs> value);
    [NullableContextAttribute("2")]
public SynchronizationContext get_SynchronizationContext();
    [NullableContextAttribute("2")]
public void set_SynchronizationContext(SynchronizationContext value);
    [NullableContextAttribute("2")]
public JoinableTaskFactory get_JoinableTaskFactory();
    [NullableContextAttribute("2")]
public void set_JoinableTaskFactory(JoinableTaskFactory value);
    public JoinableTaskTokenTracker get_JoinableTaskTracker();
    public void set_JoinableTaskTracker(JoinableTaskTokenTracker value);
    public Task get_Completion();
    public Task get_DispatchCompletion();
    [CompilerGeneratedAttribute]
public bool get_AllowModificationWhileListening();
    [CompilerGeneratedAttribute]
public void set_AllowModificationWhileListening(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public bool get_CancelLocallyInvokedMethodsWhenConnectionIsClosed();
    public void set_CancelLocallyInvokedMethodsWhenConnectionIsClosed(bool value);
    public TraceSource get_TraceSource();
    public void set_TraceSource(TraceSource value);
    [NullableContextAttribute("2")]
public ICancellationStrategy get_CancellationStrategy();
    [NullableContextAttribute("2")]
public void set_CancellationStrategy(ICancellationStrategy value);
    public ExceptionProcessing get_ExceptionStrategy();
    public void set_ExceptionStrategy(ExceptionProcessing value);
    public ExceptionSettings get_ExceptionOptions();
    public void set_ExceptionOptions(ExceptionSettings value);
    [NullableContextAttribute("2")]
public IActivityTracingStrategy get_ActivityTracingStrategy();
    [NullableContextAttribute("2")]
public void set_ActivityTracingStrategy(IActivityTracingStrategy value);
    [CompilerGeneratedAttribute]
internal IJsonRpcMessageHandler get_MessageHandler();
    internal CancellationToken get_DisconnectedToken();
    internal SynchronizationContext get_SynchronizationContextOrDefault();
    private bool get_HasListeningStarted();
    public static JsonRpc Attach(Stream stream, object target);
    [NullableContextAttribute("2")]
public static JsonRpc Attach(Stream sendingStream, Stream receivingStream, object target);
    public static T Attach(Stream stream);
    public static T Attach(Stream sendingStream, Stream receivingStream);
    public static T Attach(IJsonRpcMessageHandler handler);
    public static T Attach(IJsonRpcMessageHandler handler, JsonRpcProxyOptions options);
    public T Attach();
    public T Attach(JsonRpcProxyOptions options);
    public object Attach(Type interfaceType);
    public object Attach(Type interfaceType, JsonRpcProxyOptions options);
    public void AddLocalRpcTarget(object target);
    public void AddLocalRpcTarget(object target, JsonRpcTargetOptions options);
    public void AddLocalRpcTarget(T target, JsonRpcTargetOptions options);
    public void AddLocalRpcTarget(Type exposingMembersOn, object target, JsonRpcTargetOptions options);
    public void AddRemoteRpcTarget(JsonRpc remoteTarget);
    public void AddLocalRpcMethod(string rpcMethodName, Delegate handler);
    [NullableContextAttribute("2")]
public void AddLocalRpcMethod(string rpcMethodName, MethodInfo handler, object target);
    [NullableContextAttribute("2")]
public void AddLocalRpcMethod(MethodInfo handler, object target, JsonRpcMethodAttribute methodRpcSettings);
    public JsonRpcMethodAttribute GetJsonRpcMethodAttribute(string methodName, ReadOnlySpan`1<ParameterInfo> parameters);
    public void StartListening();
    public Task InvokeAsync(string targetName, object argument);
    public Task InvokeAsync(string targetName, Object[] arguments);
    public Task`1<TResult> InvokeAsync(string targetName, object argument);
    public Task`1<TResult> InvokeAsync(string targetName, Object[] arguments);
    public Task InvokeWithParameterObjectAsync(string targetName, object argument, CancellationToken cancellationToken);
    public Task InvokeWithParameterObjectAsync(string targetName, object argument, IReadOnlyDictionary`2<string, Type> argumentDeclaredTypes, CancellationToken cancellationToken);
    public Task`1<TResult> InvokeWithParameterObjectAsync(string targetName, object argument, CancellationToken cancellationToken);
    public Task`1<TResult> InvokeWithParameterObjectAsync(string targetName, object argument, IReadOnlyDictionary`2<string, Type> argumentDeclaredTypes, CancellationToken cancellationToken);
    public Task InvokeWithCancellationAsync(string targetName, IReadOnlyList`1<object> arguments, CancellationToken cancellationToken);
    public Task InvokeWithCancellationAsync(string targetName, IReadOnlyList`1<object> arguments, IReadOnlyList`1<Type> argumentDeclaredTypes, CancellationToken cancellationToken);
    public Task`1<TResult> InvokeWithCancellationAsync(string targetName, IReadOnlyList`1<object> arguments, CancellationToken cancellationToken);
    public Task`1<TResult> InvokeWithCancellationAsync(string targetName, IReadOnlyList`1<object> arguments, IReadOnlyList`1<Type> argumentDeclaredTypes, CancellationToken cancellationToken);
    public Task NotifyAsync(string targetName, object argument);
    public Task NotifyAsync(string targetName, Object[] arguments);
    public Task NotifyAsync(string targetName, Object[] arguments, IReadOnlyList`1<Type> argumentDeclaredTypes);
    public Task NotifyWithParameterObjectAsync(string targetName, object argument);
    public Task NotifyWithParameterObjectAsync(string targetName, object argument, IReadOnlyDictionary`2<string, Type> argumentDeclaredTypes);
    private sealed virtual override void StreamJsonRpc.Reflection.IJsonRpcTracingCallbacks.OnMessageSerialized(JsonRpcMessage message, object encodedMessage);
    private sealed virtual override void StreamJsonRpc.Reflection.IJsonRpcTracingCallbacks.OnMessageDeserialized(JsonRpcMessage message, object encodedMessage);
    public sealed virtual void Dispose();
    internal static IRpcMarshaledContext`1<T> MarshalWithControlledLifetime(T marshaledObject, JsonRpcTargetOptions options);
    internal static IRpcMarshaledContext`1<object> MarshalWithControlledLifetime(Type interfaceType, object marshaledObject, JsonRpcTargetOptions options);
    internal static T MarshalLimitedArgument(T marshaledObject);
    internal object Attach(Type contractInterface, ValueTuple`2[] implementedOptionalInterfaces, JsonRpcProxyOptions options);
    [NullableContextAttribute("2")]
internal void AddLocalRpcMethod(MethodInfo handler, object target, JsonRpcMethodAttribute methodRpcSettings, SynchronizationContext synchronizationContext);
    internal RevertAddLocalRpcTarget AddLocalRpcTargetInternal(Type exposingMembersOn, object target, JsonRpcTargetOptions options, bool requestRevertOption);
    internal void AddRpcInterfaceToTargetInternal(Type exposingMembersOn, object target, JsonRpcTargetOptions options, RevertAddLocalRpcTarget revertAddLocalRpcTarget);
    [NullableContextAttribute("2")]
protected internal virtual Type LoadType(string typeFullName, string assemblyName);
    protected virtual void Dispose(bool disposing);
    protected virtual bool IsFatalException(Exception ex);
    protected virtual ErrorDetail CreateErrorDetails(JsonRpcRequest request, Exception exception);
    protected virtual RemoteRpcException CreateExceptionFromRpcError(JsonRpcRequest request, JsonRpcError response);
    protected virtual Type GetErrorDetailsDataType(JsonRpcError error);
    [ObsoleteAttribute("Use the InvokeCoreAsync(RequestId, ...) overload instead.")]
protected Task`1<TResult> InvokeCoreAsync(Nullable`1<long> id, string targetName, IReadOnlyList`1<object> arguments, CancellationToken cancellationToken);
    protected Task`1<TResult> InvokeCoreAsync(RequestId id, string targetName, IReadOnlyList`1<object> arguments, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use the InvokeCoreAsync(RequestId, ...) overload instead.")]
protected Task`1<TResult> InvokeCoreAsync(Nullable`1<long> id, string targetName, IReadOnlyList`1<object> arguments, CancellationToken cancellationToken, bool isParameterObject);
    protected Task`1<TResult> InvokeCoreAsync(RequestId id, string targetName, IReadOnlyList`1<object> arguments, CancellationToken cancellationToken, bool isParameterObject);
    [AsyncStateMachineAttribute("StreamJsonRpc.JsonRpc/<InvokeCoreAsync>d__154`1")]
protected Task`1<TResult> InvokeCoreAsync(RequestId id, string targetName, IReadOnlyList`1<object> arguments, IReadOnlyList`1<Type> positionalArgumentDeclaredTypes, IReadOnlyDictionary`2<string, Type> namedArgumentDeclaredTypes, CancellationToken cancellationToken, bool isParameterObject);
    protected virtual RequestId CreateNewRequestId();
    protected virtual void OnRequestTransmissionAborted(JsonRpcRequest request);
    protected virtual void OnResponseReceived(JsonRpcMessage response);
    protected virtual void OnResponseSent(JsonRpcMessage response);
    [AsyncStateMachineAttribute("StreamJsonRpc.JsonRpc/<DispatchRequestAsync>d__159")]
protected virtual ValueTask`1<JsonRpcMessage> DispatchRequestAsync(JsonRpcRequest request, TargetMethod targetMethod, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("StreamJsonRpc.JsonRpc/<SendAsync>d__160")]
protected virtual ValueTask SendAsync(JsonRpcMessage message, CancellationToken cancellationToken);
    private static Exception StripExceptionToInnerException(Exception exception);
    private static bool TryGetTaskOfTOrValueTaskOfTType(TypeInfo taskTypeInfo, TypeInfo& taskOfTTypeInfo);
    [NullableContextAttribute("2")]
private static bool TryGetTaskFromValueTask(object result, Task& task);
    private JsonRpcError CreateCancellationResponse(JsonRpcRequest request);
    [AsyncStateMachineAttribute("StreamJsonRpc.JsonRpc/<InvokeCoreAsync>d__165")]
private Task`1<JsonRpcMessage> InvokeCoreAsync(JsonRpcRequest request, Type expectedResultType, CancellationToken cancellationToken);
    private JsonRpcError CreateErrorForResponseTransmissionFailure(JsonRpcRequest request, Exception exception);
    private JsonRpcError CreateError(JsonRpcRequest request, Exception exception);
    private void ThrowIfNullDetail(Exception exception, ErrorDetail errorDetails);
    [AsyncStateMachineAttribute("StreamJsonRpc.JsonRpc/<DispatchIncomingRequestAsync>d__169")]
private ValueTask`1<JsonRpcMessage> DispatchIncomingRequestAsync(JsonRpcRequest request);
    private JsonRpcMessage HandleInvocationTaskResult(JsonRpcRequest request, Task t);
    [AsyncStateMachineAttribute("StreamJsonRpc.JsonRpc/<HandleInvocationTaskOfTResultAsync>d__171")]
private ValueTask`1<JsonRpcMessage> HandleInvocationTaskOfTResultAsync(JsonRpcRequest request, Task t, CancellationToken cancellationToken);
    private Task ProcessResultBeforeSerializingAsync(object result, CancellationToken cancellationToken);
    private void OnJsonRpcDisconnected(JsonRpcDisconnectedEventArgs eventArgs);
    [AsyncStateMachineAttribute("StreamJsonRpc.JsonRpc/<JsonRpcDisconnectedShutdownAsync>d__174")]
private Task JsonRpcDisconnectedShutdownAsync(JsonRpcDisconnectedEventArgs eventArgs);
    [AsyncStateMachineAttribute("StreamJsonRpc.JsonRpc/<ReadAndHandleRequestsAsync>d__175")]
private Task ReadAndHandleRequestsAsync();
    [AsyncStateMachineAttribute("StreamJsonRpc.JsonRpc/<HandleRpcAsync>d__176")]
private Task HandleRpcAsync(JsonRpcMessage rpc);
    private void FaultPendingRequests();
    private void CancelPendingOutboundRequest(object state);
    private void ThrowIfConfigurationLocked();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class StreamJsonRpc.JsonRpcDisconnectedEventArgs : EventArgs {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private DisconnectedReason <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <LastMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [NullableAttribute("1")]
public string Description { get; }
    public DisconnectedReason Reason { get; }
    [ObsoleteAttribute("Avoid using properties that assume the message is exchanged by JToken.")]
public JToken LastMessage { get; }
    public Exception Exception { get; }
    [NullableContextAttribute("1")]
public JsonRpcDisconnectedEventArgs(string description, DisconnectedReason reason);
    [NullableContextAttribute("1")]
public JsonRpcDisconnectedEventArgs(string description, DisconnectedReason reason, Exception exception);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("Avoid overloads that assume the message is exchanged by JToken.")]
public JsonRpcDisconnectedEventArgs(string description, DisconnectedReason reason, JToken lastMessage);
    [ObsoleteAttribute("Avoid overloads that assume the message is exchanged by JToken.")]
public JsonRpcDisconnectedEventArgs(string description, DisconnectedReason reason, JToken lastMessage, Exception exception);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public DisconnectedReason get_Reason();
    [CompilerGeneratedAttribute]
public JToken get_LastMessage();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
public class StreamJsonRpc.JsonRpcEnumerableSettings : object {
    [NullableAttribute("1")]
internal static JsonRpcEnumerableSettings DefaultSettings;
    private int minBatchSize;
    private int maxReadAhead;
    private int prefetch;
    public int MaxReadAhead { get; public set; }
    public int MinBatchSize { get; public set; }
    public int Prefetch { get; public set; }
    private static JsonRpcEnumerableSettings();
    public int get_MaxReadAhead();
    public void set_MaxReadAhead(int value);
    public int get_MinBatchSize();
    public void set_MinBatchSize(int value);
    public int get_Prefetch();
    public void set_Prefetch(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EventSourceAttribute]
internal class StreamJsonRpc.JsonRpcEventSource : EventSource {
    internal static JsonRpcEventSource Instance;
    private static int SendingNotificationEvent;
    private static int SendingRequestEvent;
    private static int SendingCancellationRequestEvent;
    private static int ReceivedResultEvent;
    private static int ReceivedErrorEvent;
    private static int ReceivedNoResponseEvent;
    private static int ReceivedNotificationEvent;
    private static int ReceivedRequestEvent;
    private static int ReceivedCancellationRequestEvent;
    private static int SendingResultEvent;
    private static int SendingErrorEvent;
    private static int TransmissionQueuedEvent;
    private static int TransmissionCompletedEvent;
    private static int MessageHandlerTransmittedEvent;
    private static int MessageHandlerReceivedEvent;
    private static EventSourceTestMode EventSourceTestingActive;
    private static JsonRpcEventSource();
    public bool IsEnabled(EventLevel level, EventKeywords keywords);
    [EventAttribute("1")]
public void SendingNotification(string method, string args);
    [EventAttribute("2")]
public void SendingRequest(long requestId, string method, string args);
    [EventAttribute("4")]
public void ReceivedResult(long requestId);
    [EventAttribute("5")]
public void ReceivedError(long requestId, JsonRpcErrorCode errorCode);
    [EventAttribute("6")]
public void ReceivedNoResponse(long requestId);
    [EventAttribute("3")]
public void SendingCancellationRequest(long requestId);
    [EventAttribute("20")]
public void ReceivedNotification(string method, string args);
    [EventAttribute("21")]
public void ReceivedRequest(long requestId, string method, string args);
    [EventAttribute("23")]
public void SendingResult(long requestId);
    [EventAttribute("24")]
public void SendingError(long requestId, JsonRpcErrorCode errorCode);
    [EventAttribute("22")]
public void ReceivedCancellationRequest(long requestId);
    [EventAttribute("30")]
public void TransmissionQueued();
    [EventAttribute("31")]
public void TransmissionCompleted();
    [EventAttribute("32")]
public void HandlerTransmitted(long size);
    [EventAttribute("33")]
public void HandlerReceived(long size);
    internal static string GetArgumentsString(JsonRpcRequest request);
    [CompilerGeneratedAttribute]
internal static void <GetArgumentsString>g__Format|34_0(StringBuilder builder, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class StreamJsonRpc.JsonRpcExtensions : object {
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> WithJsonRpcSettings(IAsyncEnumerable`1<T> enumerable, JsonRpcEnumerableSettings settings);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> AsAsyncEnumerable(IEnumerable`1<T> enumerable);
    [AsyncIteratorStateMachineAttribute("StreamJsonRpc.JsonRpcExtensions/<AsAsyncEnumerable>d__3`1")]
[ExtensionAttribute]
public static IAsyncEnumerable`1<T> AsAsyncEnumerable(IEnumerable`1<T> enumerable, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> AsAsyncEnumerable(IEnumerable`1<T> enumerable, JsonRpcEnumerableSettings settings);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> AsAsyncEnumerable(IEnumerable`1<T> enumerable, JsonRpcEnumerableSettings settings, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("StreamJsonRpc.JsonRpcExtensions/<WithPrefetchAsync>d__6`1")]
[ExtensionAttribute]
public static ValueTask`1<IAsyncEnumerable`1<T>> WithPrefetchAsync(IAsyncEnumerable`1<T> enumerable, int count, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static JsonRpcEnumerableSettings GetJsonRpcSettings(IAsyncEnumerable`1<T> enumerable);
    internal static Task PrefetchIfApplicableAsync(object possibleEnumerable, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static ValueTuple`2<IReadOnlyList`1<T>, bool> TearOffPrefetchedElements(IAsyncEnumerable`1<T> enumerable);
    private static RpcEnumerable`1<T> GetRpcEnumerable(IAsyncEnumerable`1<T> enumerable);
}
[AttributeUsageAttribute("64")]
public class StreamJsonRpc.JsonRpcIgnoreAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class StreamJsonRpc.JsonRpcMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSingleObjectParameterDeserialization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClientRequiresNamedArguments>k__BackingField;
    public string Name { get; }
    public bool UseSingleObjectParameterDeserialization { get; public set; }
    public bool ClientRequiresNamedArguments { get; public set; }
    public JsonRpcMethodAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_UseSingleObjectParameterDeserialization();
    [CompilerGeneratedAttribute]
public void set_UseSingleObjectParameterDeserialization(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClientRequiresNamedArguments();
    [CompilerGeneratedAttribute]
public void set_ClientRequiresNamedArguments(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StreamJsonRpc.JsonRpcProxyOptions : object {
    private Func`2<string, string> methodNameTransform;
    private Func`2<string, string> eventNameTransform;
    [CompilerGeneratedAttribute]
private bool <ServerRequiresNamedArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonRpcProxyOptions <Default>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Action <OnDispose>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<IJsonRpcClientProxyInternal> <OnProxyConstructed>k__BackingField;
    public Func`2<string, string> MethodNameTransform { get; public set; }
    public Func`2<string, string> EventNameTransform { get; public set; }
    public bool ServerRequiresNamedArguments { get; public set; }
    internal static JsonRpcProxyOptions Default { get; }
    [NullableAttribute("2")]
internal Action OnDispose { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`1<IJsonRpcClientProxyInternal> OnProxyConstructed { get; internal set; }
    public JsonRpcProxyOptions(JsonRpcProxyOptions copyFrom);
    private static JsonRpcProxyOptions();
    public Func`2<string, string> get_MethodNameTransform();
    public void set_MethodNameTransform(Func`2<string, string> value);
    public Func`2<string, string> get_EventNameTransform();
    public void set_EventNameTransform(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_ServerRequiresNamedArguments();
    [CompilerGeneratedAttribute]
public void set_ServerRequiresNamedArguments(bool value);
    [CompilerGeneratedAttribute]
internal static JsonRpcProxyOptions get_Default();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Action get_OnDispose();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_OnDispose(Action value);
    [CompilerGeneratedAttribute]
internal Action`1<IJsonRpcClientProxyInternal> get_OnProxyConstructed();
    [CompilerGeneratedAttribute]
internal void set_OnProxyConstructed(Action`1<IJsonRpcClientProxyInternal> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StreamJsonRpc.JsonRpcTargetOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, string> <MethodNameTransform>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, string> <EventNameTransform>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotifyClientOfEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowNonPublicInvocation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSingleObjectParameterDeserialization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClientRequiresNamedArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisposeOnDisconnect>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonRpcTargetOptions <Default>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, string> MethodNameTransform { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, string> EventNameTransform { get; public set; }
    public bool NotifyClientOfEvents { get; public set; }
    public bool AllowNonPublicInvocation { get; public set; }
    public bool UseSingleObjectParameterDeserialization { get; public set; }
    public bool ClientRequiresNamedArguments { get; public set; }
    public bool DisposeOnDisconnect { get; public set; }
    internal static JsonRpcTargetOptions Default { get; }
    public JsonRpcTargetOptions(JsonRpcTargetOptions copyFrom);
    private static JsonRpcTargetOptions();
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_MethodNameTransform();
    [CompilerGeneratedAttribute]
public void set_MethodNameTransform(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_EventNameTransform();
    [CompilerGeneratedAttribute]
public void set_EventNameTransform(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_NotifyClientOfEvents();
    [CompilerGeneratedAttribute]
public void set_NotifyClientOfEvents(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowNonPublicInvocation();
    [CompilerGeneratedAttribute]
public void set_AllowNonPublicInvocation(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseSingleObjectParameterDeserialization();
    [CompilerGeneratedAttribute]
public void set_UseSingleObjectParameterDeserialization(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClientRequiresNamedArguments();
    [CompilerGeneratedAttribute]
public void set_ClientRequiresNamedArguments(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisposeOnDisconnect();
    [CompilerGeneratedAttribute]
public void set_DisposeOnDisconnect(bool value);
    [CompilerGeneratedAttribute]
internal static JsonRpcTargetOptions get_Default();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StreamJsonRpc.LengthHeaderMessageHandler : PipeMessageHandler {
    private IJsonRpcMessageFormatter formatter;
    private Sequence`1<byte> contentSequenceBuilder;
    public LengthHeaderMessageHandler(IDuplexPipe pipe, IJsonRpcMessageFormatter formatter);
    [NullableContextAttribute("2")]
public LengthHeaderMessageHandler(PipeWriter writer, PipeReader reader, IJsonRpcMessageFormatter formatter);
    [NullableContextAttribute("2")]
public LengthHeaderMessageHandler(Stream sendingStream, Stream receivingStream, IJsonRpcMessageFormatter formatter);
    [AsyncStateMachineAttribute("StreamJsonRpc.LengthHeaderMessageHandler/<ReadCoreAsync>d__5")]
protected virtual ValueTask`1<JsonRpcMessage> ReadCoreAsync(CancellationToken cancellationToken);
    protected virtual void Write(JsonRpcMessage content, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class StreamJsonRpc.LocalRpcException : Exception {
    [CompilerGeneratedAttribute]
private object <ErrorData>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    public object ErrorData { get; public set; }
    public int ErrorCode { get; public set; }
    public LocalRpcException(string message);
    public LocalRpcException(string message, Exception inner);
    [CompilerGeneratedAttribute]
public object get_ErrorData();
    [CompilerGeneratedAttribute]
public void set_ErrorData(object value);
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class StreamJsonRpc.MessageHandlerBase : object {
    private CancellationTokenSource disposalTokenSource;
    private AsyncSemaphore sendingSemaphore;
    private object syncObject;
    private AsyncManualResetEvent readingCompleted;
    private AsyncManualResetEvent writingCompleted;
    private MessageHandlerState state;
    [CompilerGeneratedAttribute]
private IJsonRpcMessageFormatter <Formatter>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <Completion>k__BackingField;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public IJsonRpcMessageFormatter Formatter { get; }
    private bool Microsoft.IDisposableObservable.IsDisposed { get; }
    protected CancellationToken DisposalToken { get; }
    private Task Completion { get; }
    public MessageHandlerBase(IJsonRpcMessageFormatter formatter);
    public abstract virtual bool get_CanRead();
    public abstract virtual bool get_CanWrite();
    [CompilerGeneratedAttribute]
public sealed virtual IJsonRpcMessageFormatter get_Formatter();
    private sealed virtual override bool Microsoft.IDisposableObservable.get_IsDisposed();
    protected CancellationToken get_DisposalToken();
    [CompilerGeneratedAttribute]
private Task get_Completion();
    [AsyncStateMachineAttribute("StreamJsonRpc.MessageHandlerBase/<ReadAsync>d__22")]
public sealed virtual ValueTask`1<JsonRpcMessage> ReadAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("StreamJsonRpc.MessageHandlerBase/<WriteAsync>d__23")]
public sealed virtual ValueTask WriteAsync(JsonRpcMessage content, CancellationToken cancellationToken);
    [ObsoleteAttribute("Call IAsyncDisposable.DisposeAsync instead.")]
public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("StreamJsonRpc.MessageHandlerBase/<DisposeAsync>d__25")]
public virtual Task DisposeAsync();
    protected virtual void Dispose(bool disposing);
    protected virtual void DisposeReader();
    protected virtual void DisposeWriter();
    protected abstract virtual ValueTask`1<JsonRpcMessage> ReadCoreAsync(CancellationToken cancellationToken);
    protected abstract virtual ValueTask WriteCoreAsync(JsonRpcMessage content, CancellationToken cancellationToken);
    protected abstract virtual ValueTask FlushAsync(CancellationToken cancellationToken);
    private void SetState(MessageHandlerState startingOperation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StreamJsonRpc.MessagePackFormatter : FormatterBase {
    private static CommonString VersionPropertyName;
    private static CommonString IdPropertyName;
    private static CommonString MethodPropertyName;
    private static CommonString ResultPropertyName;
    private static CommonString ErrorPropertyName;
    private static CommonString ParamsPropertyName;
    private static CommonString TraceParentPropertyName;
    private static CommonString TraceStatePropertyName;
    private static CommonString Version2;
    private static Dictionary`2<Type, IReadOnlyDictionary`2<string, Type>> ParameterObjectPropertyTypes;
    private static IFormatterResolver BasicTypesResolver;
    private static IFormatterResolver StringInterningResolver;
    private MessagePackSerializerOptions messageSerializationOptions;
    private ProgressFormatterResolver progressFormatterResolver;
    private AsyncEnumerableFormatterResolver asyncEnumerableFormatterResolver;
    private PipeFormatterResolver pipeFormatterResolver;
    private MessagePackExceptionResolver exceptionResolver;
    private ToStringHelper serializationToStringHelper;
    private ToStringHelper deserializationToStringHelper;
    private MessagePackSerializerOptions userDataSerializationOptions;
    [CompilerGeneratedAttribute]
private static MessagePackSerializerOptions <DefaultUserDataSerializationOptions>k__BackingField;
    public static MessagePackSerializerOptions DefaultUserDataSerializationOptions { get; }
    [NullableAttribute("2")]
public MultiplexingStream MultiplexingStream { get; public set; }
    private static MessagePackFormatter();
    [CompilerGeneratedAttribute]
public static MessagePackSerializerOptions get_DefaultUserDataSerializationOptions();
    [NullableContextAttribute("2")]
public MultiplexingStream get_MultiplexingStream();
    [NullableContextAttribute("2")]
public void set_MultiplexingStream(MultiplexingStream value);
    public void SetMessagePackSerializerOptions(MessagePackSerializerOptions options);
    [NullableContextAttribute("0")]
public sealed virtual JsonRpcMessage Deserialize(ReadOnlySequence`1<byte> contentBuffer);
    public sealed virtual void Serialize(IBufferWriter`1<byte> contentBuffer, JsonRpcMessage message);
    public sealed virtual object GetJsonText(JsonRpcMessage message);
    private sealed virtual override JsonRpcRequest StreamJsonRpc.IJsonRpcMessageFactory.CreateRequestMessage();
    private sealed virtual override JsonRpcError StreamJsonRpc.IJsonRpcMessageFactory.CreateErrorMessage();
    private sealed virtual override JsonRpcResult StreamJsonRpc.IJsonRpcMessageFactory.CreateResultMessage();
    [NullableContextAttribute("0")]
private sealed virtual override void StreamJsonRpc.Reflection.IJsonRpcFormatterTracingCallbacks.OnSerializationComplete(JsonRpcMessage message, ReadOnlySequence`1<byte> encodedMessage);
    [NullableContextAttribute("2")]
private static Nullable`1<ValueTuple`2<IReadOnlyDictionary`2<string, object>, IReadOnlyDictionary`2<string, Type>>> GetParamsObjectDictionary(object paramsObject);
    [NullableContextAttribute("0")]
private static ReadOnlySequence`1<byte> GetSliceForNextToken(MessagePackReader& reader);
    private static string ReadProtocolVersion(MessagePackReader& reader);
    private static void WriteProtocolVersionPropertyAndValue(MessagePackWriter& writer, string version);
    [NullableContextAttribute("0")]
private static void ReadUnknownProperty(MessagePackReader& reader, Dictionary`2& topLevelProperties, ReadOnlySpan`1<byte> stringKey);
    private MessagePackSerializerOptions MassageUserDataOptions(MessagePackSerializerOptions userSuppliedOptions);
    private IFormatterResolver CreateTopLevelMessageResolver();
    [CompilerGeneratedAttribute]
internal static bool <GetParamsObjectDictionary>g__TryGetSerializationInfo|36_0(MemberInfo memberInfo, String& key, <>c__DisplayClass36_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay}")]
internal class StreamJsonRpc.MethodSignature : object {
    private static StringComparer TypeNameComparer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ParameterInfo[] parameters;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsonRpcMethodAttribute <Attribute>k__BackingField;
    internal MethodInfo MethodInfo { get; }
    [NullableAttribute("2")]
internal JsonRpcMethodAttribute Attribute { get; }
    internal ParameterInfo[] Parameters { get; }
    internal bool IsPublic { get; }
    internal string Name { get; }
    internal int RequiredParamCount { get; }
    internal int TotalParamCountExcludingCancellationToken { get; }
    internal bool HasCancellationTokenParameter { get; }
    internal bool HasOutOrRefParameters { get; }
    [ExcludeFromCodeCoverageAttribute]
private string DebuggerDisplay { get; }
    internal MethodSignature(MethodInfo methodInfo, JsonRpcMethodAttribute attribute);
    private static MethodSignature();
    [CompilerGeneratedAttribute]
internal MethodInfo get_MethodInfo();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal JsonRpcMethodAttribute get_Attribute();
    internal ParameterInfo[] get_Parameters();
    internal bool get_IsPublic();
    internal string get_Name();
    internal int get_RequiredParamCount();
    internal int get_TotalParamCountExcludingCancellationToken();
    internal bool get_HasCancellationTokenParameter();
    internal bool get_HasOutOrRefParameters();
    private string get_DebuggerDisplay();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(MethodSignature other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal bool MatchesParametersExcludingCancellationToken(ReadOnlySpan`1<ParameterInfo> parameters);
    private static bool IsCancellationToken(ParameterInfo parameter);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
internal class StreamJsonRpc.MethodSignatureAndTarget : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private MethodSignature <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private SynchronizationContext <SynchronizationContext>k__BackingField;
    [NullableAttribute("1")]
internal MethodSignature Signature { get; }
    internal object Target { get; }
    internal SynchronizationContext SynchronizationContext { get; }
    [NullableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
private string DebuggerDisplay { get; }
    internal MethodSignatureAndTarget(MethodInfo method, object target, JsonRpcMethodAttribute attribute, SynchronizationContext perMethodSynchronizationContext);
    internal MethodSignatureAndTarget(MethodSignature signature, object target, SynchronizationContext perMethodSynchronizationContext);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal MethodSignature get_Signature();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal object get_Target();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal SynchronizationContext get_SynchronizationContext();
    [NullableContextAttribute("1")]
private string get_DebuggerDisplay();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MethodSignatureAndTarget other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StreamJsonRpc.NewLineDelimitedMessageHandler : PipeMessageHandler {
    private Sequence`1<byte> contentSequenceBuilder;
    private NewLineStyle newLine;
    [NullableAttribute("0")]
private ReadOnlyMemory`1<byte> newLineBytes;
    public NewLineStyle NewLine { get; public set; }
    public IJsonRpcMessageTextFormatter Formatter { get; }
    public NewLineDelimitedMessageHandler(IDuplexPipe pipe, IJsonRpcMessageTextFormatter formatter);
    [NullableContextAttribute("2")]
public NewLineDelimitedMessageHandler(PipeWriter writer, PipeReader reader, IJsonRpcMessageTextFormatter formatter);
    public NewLineDelimitedMessageHandler(Stream writer, Stream reader, IJsonRpcMessageTextFormatter formatter);
    public NewLineStyle get_NewLine();
    public void set_NewLine(NewLineStyle value);
    public IJsonRpcMessageTextFormatter get_Formatter();
    protected virtual void Write(JsonRpcMessage content, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("StreamJsonRpc.NewLineDelimitedMessageHandler/<ReadCoreAsync>d__13")]
protected virtual ValueTask`1<JsonRpcMessage> ReadCoreAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
private static ReadOnlyMemory`1<byte> GetLineFeedSequence(Encoding encoding, NewLineStyle style);
    private void CommonConstructor();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class StreamJsonRpc.PipeMessageHandler : MessageHandlerBase {
    private static long LargeMessageThreshold;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<IJsonRpcMessageBufferManager, SequencePosition> deserializationReservedBuffer;
    [CompilerGeneratedAttribute]
private PipeReader <Reader>k__BackingField;
    [CompilerGeneratedAttribute]
private PipeWriter <Writer>k__BackingField;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    protected PipeReader Reader { get; }
    protected PipeWriter Writer { get; }
    [NullableContextAttribute("1")]
public PipeMessageHandler(IDuplexPipe pipe, IJsonRpcMessageFormatter formatter);
    public PipeMessageHandler(PipeWriter writer, PipeReader reader, IJsonRpcMessageFormatter formatter);
    public PipeMessageHandler(Stream writer, Stream reader, IJsonRpcMessageFormatter formatter);
    private static PipeMessageHandler();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    [CompilerGeneratedAttribute]
protected PipeReader get_Reader();
    [CompilerGeneratedAttribute]
protected PipeWriter get_Writer();
    [NullableContextAttribute("1")]
private sealed virtual override void StreamJsonRpc.Reflection.IJsonRpcMessageBufferManager.DeserializationComplete(JsonRpcMessage message);
    [NullableContextAttribute("1")]
protected sealed virtual ValueTask WriteCoreAsync(JsonRpcMessage content, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
protected abstract virtual void Write(JsonRpcMessage content, CancellationToken cancellationToken);
    protected virtual void DisposeReader();
    protected virtual void DisposeWriter();
    [AsyncStateMachineAttribute("StreamJsonRpc.PipeMessageHandler/<FlushAsync>d__20")]
protected virtual ValueTask FlushAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("StreamJsonRpc.PipeMessageHandler/<ReadAtLeastAsync>d__21")]
protected ValueTask`1<ReadResult> ReadAtLeastAsync(int requiredBytes, bool allowEmpty, CancellationToken cancellationToken);
    private protected ValueTask`1<JsonRpcMessage> DeserializeMessageAsync(int contentLength, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("StreamJsonRpc.PipeMessageHandler/<DeserializeMessageAsync>d__23")]
private protected ValueTask`1<JsonRpcMessage> DeserializeMessageAsync(int contentLength, Encoding specificEncoding, Encoding defaultEncoding, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
private protected Exception ThrowNoTextEncoder();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class StreamJsonRpc.Protocol.CommonErrorData : object {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HResult>k__BackingField;
    [CompilerGeneratedAttribute]
private CommonErrorData <Inner>k__BackingField;
    [DataMemberAttribute]
[JsonPropertyNameAttribute("type")]
[JsonPropertyOrderAttribute("0")]
public string TypeName { get; public set; }
    [DataMemberAttribute]
[JsonPropertyNameAttribute("message")]
[JsonPropertyOrderAttribute("1")]
public string Message { get; public set; }
    [DataMemberAttribute]
[JsonPropertyNameAttribute("stack")]
[JsonPropertyOrderAttribute("2")]
public string StackTrace { get; public set; }
    [DataMemberAttribute]
[JsonPropertyNameAttribute("code")]
[JsonPropertyOrderAttribute("3")]
public int HResult { get; public set; }
    [DataMemberAttribute]
[JsonPropertyNameAttribute("inner")]
[JsonPropertyOrderAttribute("4")]
public CommonErrorData Inner { get; public set; }
    [NullableContextAttribute("1")]
public CommonErrorData(Exception copyFrom);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
public void set_StackTrace(string value);
    [CompilerGeneratedAttribute]
public int get_HResult();
    [CompilerGeneratedAttribute]
public void set_HResult(int value);
    [CompilerGeneratedAttribute]
public CommonErrorData get_Inner();
    [CompilerGeneratedAttribute]
public void set_Inner(CommonErrorData value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class StreamJsonRpc.Protocol.Constants : object {
    internal static string jsonrpc;
    internal static string id;
}
public interface StreamJsonRpc.Protocol.IJsonRpcMessageWithId {
    public RequestId RequestId { get; public set; }
    public abstract virtual RequestId get_RequestId();
    public abstract virtual void set_RequestId(RequestId value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay}")]
public class StreamJsonRpc.Protocol.JsonRpcError : JsonRpcMessage {
    [CompilerGeneratedAttribute]
private ErrorDetail <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestId <RequestId>k__BackingField;
    [DataMemberAttribute]
[JsonPropertyNameAttribute("error")]
[JsonPropertyOrderAttribute("2")]
[JsonRequiredAttribute]
public ErrorDetail Error { get; public set; }
    [ObsoleteAttribute("Use RequestId instead.")]
[IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
public object Id { get; public set; }
    [DataMemberAttribute]
[JsonPropertyNameAttribute("id")]
[JsonPropertyOrderAttribute("1")]
[JsonRequiredAttribute]
public RequestId RequestId { get; public set; }
    [NullableAttribute("1")]
protected string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public ErrorDetail get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(ErrorDetail value);
    public object get_Id();
    public void set_Id(object value);
    [CompilerGeneratedAttribute]
public sealed virtual RequestId get_RequestId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestId(RequestId value);
    [NullableContextAttribute("1")]
protected string get_DebuggerDisplay();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public enum StreamJsonRpc.Protocol.JsonRpcErrorCode : Enum {
    public int value__;
    public static JsonRpcErrorCode InvocationError;
    public static JsonRpcErrorCode NoMarshaledObjectFound;
    public static JsonRpcErrorCode ResponseSerializationFailure;
    public static JsonRpcErrorCode InvocationErrorWithException;
    public static JsonRpcErrorCode ParseError;
    public static JsonRpcErrorCode InvalidRequest;
    public static JsonRpcErrorCode MethodNotFound;
    public static JsonRpcErrorCode InvalidParams;
    public static JsonRpcErrorCode InternalError;
    public static JsonRpcErrorCode RequestCanceled;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
[KnownTypeAttribute("StreamJsonRpc.Protocol.JsonRpcRequest")]
[KnownTypeAttribute("StreamJsonRpc.Protocol.JsonRpcResult")]
[KnownTypeAttribute("StreamJsonRpc.Protocol.JsonRpcError")]
public abstract class StreamJsonRpc.Protocol.JsonRpcMessage : object {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [DataMemberAttribute]
[JsonPropertyNameAttribute("jsonrpc")]
[JsonPropertyOrderAttribute("0")]
[JsonRequiredAttribute]
public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    public virtual bool TryGetTopLevelProperty(string name, T& value);
    public virtual bool TrySetTopLevelProperty(string name, T value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class StreamJsonRpc.Protocol.JsonRpcRequest : JsonRpcMessage {
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestId <RequestId>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, Type> <NamedArgumentDeclaredTypes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<Type> <ArgumentListDeclaredTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceParent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceState>k__BackingField;
    [DataMemberAttribute]
[JsonPropertyNameAttribute("method")]
[JsonPropertyOrderAttribute("2")]
[JsonRequiredAttribute]
public string Method { get; public set; }
    [DataMemberAttribute]
[JsonPropertyNameAttribute("params")]
[JsonPropertyOrderAttribute("3")]
[JsonIgnoreAttribute]
public object Arguments { get; public set; }
    [ObsoleteAttribute("Use RequestId instead.")]
[IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
public object Id { get; public set; }
    [DataMemberAttribute]
[JsonPropertyNameAttribute("id")]
[JsonPropertyOrderAttribute("1")]
[JsonIgnoreAttribute]
public RequestId RequestId { get; public set; }
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
public bool IsResponseExpected { get; }
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
public bool IsNotification { get; }
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
public int ArgumentCount { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
public IReadOnlyDictionary`2<string, object> NamedArguments { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
public IReadOnlyDictionary`2<string, Type> NamedArgumentDeclaredTypes { get; public set; }
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
[ObsoleteAttribute("Use ArgumentsList instead.")]
public Object[] ArgumentsArray { get; public set; }
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
public IReadOnlyList`1<object> ArgumentsList { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
public IReadOnlyList`1<Type> ArgumentListDeclaredTypes { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
public IEnumerable`1<string> ArgumentNames { get; }
    [DataMemberAttribute]
[JsonPropertyNameAttribute("traceparent")]
[JsonIgnoreAttribute]
public string TraceParent { get; public set; }
    [DataMemberAttribute]
[JsonPropertyNameAttribute("tracestate")]
[JsonIgnoreAttribute]
public string TraceState { get; public set; }
    [NullableAttribute("1")]
protected string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public object get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(object value);
    public object get_Id();
    public void set_Id(object value);
    [CompilerGeneratedAttribute]
public sealed virtual RequestId get_RequestId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestId(RequestId value);
    public bool get_IsResponseExpected();
    public bool get_IsNotification();
    public virtual int get_ArgumentCount();
    public IReadOnlyDictionary`2<string, object> get_NamedArguments();
    public void set_NamedArguments(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, Type> get_NamedArgumentDeclaredTypes();
    [CompilerGeneratedAttribute]
public void set_NamedArgumentDeclaredTypes(IReadOnlyDictionary`2<string, Type> value);
    public Object[] get_ArgumentsArray();
    public void set_ArgumentsArray(Object[] value);
    public IReadOnlyList`1<object> get_ArgumentsList();
    public void set_ArgumentsList(IReadOnlyList`1<object> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Type> get_ArgumentListDeclaredTypes();
    [CompilerGeneratedAttribute]
public void set_ArgumentListDeclaredTypes(IReadOnlyList`1<Type> value);
    public virtual IEnumerable`1<string> get_ArgumentNames();
    [CompilerGeneratedAttribute]
public string get_TraceParent();
    [CompilerGeneratedAttribute]
public void set_TraceParent(string value);
    [CompilerGeneratedAttribute]
public string get_TraceState();
    [CompilerGeneratedAttribute]
public void set_TraceState(string value);
    [NullableContextAttribute("1")]
protected string get_DebuggerDisplay();
    public virtual ArgumentMatchResult TryGetTypedArguments(ReadOnlySpan`1<ParameterInfo> parameters, Span`1<object> typedArguments);
    public virtual bool TryGetArgumentByNameOrIndex(string name, int position, Type typeHint, Object& value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class StreamJsonRpc.Protocol.JsonRpcResult : JsonRpcMessage {
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResultDeclaredType>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestId <RequestId>k__BackingField;
    [DataMemberAttribute]
[JsonPropertyNameAttribute("result")]
[JsonPropertyOrderAttribute("2")]
[JsonRequiredAttribute]
public object Result { get; public set; }
    [IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
public Type ResultDeclaredType { get; public set; }
    [ObsoleteAttribute("Use RequestId instead.")]
[IgnoreDataMemberAttribute]
[JsonIgnoreAttribute]
public object Id { get; public set; }
    [DataMemberAttribute]
[JsonPropertyNameAttribute("id")]
[JsonPropertyOrderAttribute("1")]
[JsonRequiredAttribute]
public RequestId RequestId { get; public set; }
    [NullableAttribute("1")]
protected string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(object value);
    [CompilerGeneratedAttribute]
public Type get_ResultDeclaredType();
    [CompilerGeneratedAttribute]
public void set_ResultDeclaredType(Type value);
    public object get_Id();
    public void set_Id(object value);
    [CompilerGeneratedAttribute]
public sealed virtual RequestId get_RequestId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestId(RequestId value);
    [NullableContextAttribute("1")]
protected string get_DebuggerDisplay();
    [NullableContextAttribute("1")]
public virtual T GetResult();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
protected internal virtual void SetExpectedResultType(Type resultType);
}
internal class StreamJsonRpc.Protocol.TraceParent : ValueType {
    internal static int VersionByteCount;
    internal static int ParentIdByteCount;
    internal static int TraceIdByteCount;
    internal static int FlagsByteCount;
    internal byte Version;
    [FixedBufferAttribute("System.Byte", "16")]
internal <TraceId>e__FixedBuffer TraceId;
    [FixedBufferAttribute("System.Byte", "8")]
internal <ParentId>e__FixedBuffer ParentId;
    internal TraceFlags Flags;
    internal Guid TraceIdGuid { get; }
    [NullableContextAttribute("2")]
internal TraceParent(string traceparent);
    internal Guid get_TraceIdGuid();
    [NullableContextAttribute("1")]
public virtual string ToString();
    private static Guid CopyBufferToGuid(ReadOnlySpan`1<byte> buffer);
    [CompilerGeneratedAttribute]
internal static void <.ctor>g__ConsumeHyphen|8_0(ReadOnlySpan`1& value);
    [CompilerGeneratedAttribute]
internal static ReadOnlySpan`1<char> <.ctor>g__Consume|8_1(ReadOnlySpan`1& buffer, int length);
    [CompilerGeneratedAttribute]
internal static void <ToString>g__AddHyphen|12_0(Span`1& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class StreamJsonRpc.ProxyGeneration : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static List`1<ValueTuple`2<ImmutableHashSet`1<AssemblyName>, ModuleBuilder>> TransparentProxyModuleBuilderByVisibilityCheck;
    private static object BuilderLock;
    private static AssemblyName ProxyAssemblyName;
    private static MethodInfo DelegateCombineMethod;
    private static MethodInfo DelegateRemoveMethod;
    private static MethodInfo ActionInvokeMethod;
    private static MethodInfo EventHandlerOfStringInvoke;
    private static MethodInfo CancellationTokenNonePropertyGetter;
    private static ConstructorInfo ObjectCtor;
    private static ConstructorInfo ObjectDisposedExceptionCtor;
    private static MethodInfo GetTypeFromHandleMethod;
    private static Dictionary`2<GeneratedProxiesByInterfaceKey, TypeInfo> GeneratedProxiesByInterface;
    private static MethodInfo CompareExchangeMethod;
    private static MethodInfo NotifyAsyncOfTaskMethodInfo;
    private static MethodInfo AddLocalRpcMethodMethodInfo;
    private static MethodInfo MethodNameTransformPropertyGetter;
    private static MethodInfo MethodNameTransformInvoke;
    private static MethodInfo EventNameTransformPropertyGetter;
    private static MethodInfo EventNameTransformInvoke;
    private static MethodInfo ServerRequiresNamedArgumentsPropertyGetter;
    private static MethodInfo DisposeMethod;
    private static MethodInfo IsDisposedPropertyGetter;
    private static ProxyGeneration();
    internal static TypeInfo Get(TypeInfo contractInterface, ValueTuple`2[] implementedOptionalInterfaces);
    private static void SortRpcInterfaces(List`1<ValueTuple`2<TypeInfo, Nullable`1<int>>> list);
    private static void EmitRaiseCallEvent(ILGenerator il, FieldBuilder eventHandlerField, string methodName);
    private static void ImplementIJsonRpcClientProxyInternal(TypeBuilder proxyTypeBuilder, FieldBuilder callingMethodField, FieldBuilder calledMethodField);
    private static void LoadParameterTypeArrayField(TypeBuilder proxyTypeBuilder, ParameterInfo[] parameterInfos, ILGenerator il);
    private static void EmitThrowIfDisposed(TypeBuilder proxyTypeBuilder, ILGenerator il, FieldBuilder disposedField);
    private static void ImplementDisposeMethod(TypeBuilder proxyTypeBuilder, FieldBuilder jsonRpcField, FieldBuilder onDisposeField, FieldBuilder disposedField);
    private static void ImplementIsDisposedProperty(TypeBuilder proxyTypeBuilder, FieldBuilder jsonRpcField, FieldBuilder disposedField);
    private static void AdaptReturnType(MethodInfo method, bool returnTypeIsValueTask, bool returnTypeIsIAsyncEnumerable, ILGenerator il, MethodInfo invokingMethod, ParameterInfo cancellationTokenParameter);
    private static ModuleBuilder GetProxyModuleBuilder(TypeInfo interfaceType);
    private static AssemblyBuilder CreateProxyAssemblyBuilder();
    private static ConstructorInfo CreateParameterObjectType(ModuleBuilder moduleBuilder, ParameterInfo[] parameters);
    private static void ImplementRaiseEventMethod(ILGenerator il, FieldBuilder evtField, FieldBuilder jsonRpcField);
    private static void ImplementEventAccessor(ILGenerator il, FieldInfo evtField, MethodInfo combineOrRemoveMethod);
    private static void VerifySupported(bool condition, string messageFormat, MemberInfo problematicMember, Object[] otherArgs);
    private static IEnumerable`1<T> FindAllOnThisAndOtherInterfaces(TypeInfo interfaceType, Func`2<TypeInfo, IEnumerable`1<T>> oneInterfaceQuery);
    [CompilerGeneratedAttribute]
internal static int <SortRpcInterfaces>g__CompareRpcInterfaces|23_1(ValueTuple`3<TypeInfo, Nullable`1<int>, int> a, ValueTuple`3<TypeInfo, Nullable`1<int>, int> b);
    [CompilerGeneratedAttribute]
internal static void <ImplementIJsonRpcClientProxyInternal>g__AddEvent|25_0(FieldBuilder evtField, string eventName, <>c__DisplayClass25_0& );
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This class is only for invoking from dynamically generated code.")]
public static class StreamJsonRpc.Reflection.CodeGenHelpers : object {
    [NullableContextAttribute("1")]
public static IAsyncEnumerable`1<T> CreateAsyncEnumerableProxy(Task`1<IAsyncEnumerable`1<T>> enumerableTask, CancellationToken defaultCancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class StreamJsonRpc.Reflection.ExceptionSerializationHelpers : object {
    internal static string WatsonBucketsKey;
    private static string AssemblyNameKeyName;
    private static Type[] DeserializingConstructorParameterTypes;
    private static StreamingContext Context { get; }
    private static ExceptionSerializationHelpers();
    private static StreamingContext get_Context();
    internal static T Deserialize(JsonRpc jsonRpc, SerializationInfo info, TraceSource traceSource);
    internal static void Serialize(Exception exception, SerializationInfo info);
    internal static bool IsSerializable(Exception exception);
    internal static object Convert(IFormatterConverter formatterConverter, object value, TypeCode typeCode);
    [ExtensionAttribute]
internal static int GetSafeMemberCount(SerializationInfo info);
    [IteratorStateMachineAttribute("StreamJsonRpc.Reflection.ExceptionSerializationHelpers/<GetSafeMembers>d__10")]
[ExtensionAttribute]
internal static IEnumerable`1<SerializationEntry> GetSafeMembers(SerializationInfo info);
    [ExtensionAttribute]
internal static void AddSafeValue(SerializationInfo info, string name, object value);
    private static void EnsureSerializableAttribute(Type runtimeType);
    private static ConstructorInfo FindDeserializingConstructor(Type runtimeType);
    private static bool TryGetValue(SerializationInfo info, string key, String& value);
}
[NullableContextAttribute("1")]
public interface StreamJsonRpc.Reflection.IJsonRpcFormatterCallbacks {
    [CompilerGeneratedAttribute]
public abstract virtual void add_RequestTransmissionAborted(EventHandler`1<JsonRpcMessageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RequestTransmissionAborted(EventHandler`1<JsonRpcMessageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ResponseReceived(EventHandler`1<JsonRpcResponseEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ResponseReceived(EventHandler`1<JsonRpcResponseEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ResponseSent(EventHandler`1<JsonRpcResponseEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ResponseSent(EventHandler`1<JsonRpcResponseEventArgs> value);
}
public interface StreamJsonRpc.Reflection.IJsonRpcFormatterState {
    public RequestId SerializingMessageWithId { get; }
    public RequestId DeserializingMessageWithId { get; }
    public bool SerializingRequest { get; }
    public abstract virtual RequestId get_SerializingMessageWithId();
    public abstract virtual RequestId get_DeserializingMessageWithId();
    public abstract virtual bool get_SerializingRequest();
}
public interface StreamJsonRpc.Reflection.IJsonRpcFormatterTracingCallbacks {
    public abstract virtual void OnSerializationComplete(JsonRpcMessage message, ReadOnlySequence`1<byte> encodedMessage);
}
[NullableContextAttribute("1")]
public interface StreamJsonRpc.Reflection.IJsonRpcMessageBufferManager {
    public abstract virtual void DeserializationComplete(JsonRpcMessage message);
}
[NullableContextAttribute("1")]
public interface StreamJsonRpc.Reflection.IJsonRpcTracingCallbacks {
    public abstract virtual void OnMessageSerialized(JsonRpcMessage message, object encodedMessage);
    public abstract virtual void OnMessageDeserialized(JsonRpcMessage message, object encodedMessage);
}
public class StreamJsonRpc.Reflection.JsonRpcMessageEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private RequestId <RequestId>k__BackingField;
    public RequestId RequestId { get; private set; }
    public JsonRpcMessageEventArgs(RequestId requestId);
    [NullableContextAttribute("1")]
internal JsonRpcMessageEventArgs(IJsonRpcMessageWithId message);
    [CompilerGeneratedAttribute]
public RequestId get_RequestId();
    [CompilerGeneratedAttribute]
private void set_RequestId(RequestId value);
}
public class StreamJsonRpc.Reflection.JsonRpcResponseEventArgs : JsonRpcMessageEventArgs {
    [CompilerGeneratedAttribute]
private bool <IsSuccessfulResponse>k__BackingField;
    public bool IsSuccessfulResponse { get; }
    public JsonRpcResponseEventArgs(RequestId requestId, bool isSuccessfulResponse);
    [NullableContextAttribute("1")]
internal JsonRpcResponseEventArgs(IJsonRpcMessageWithId message);
    [CompilerGeneratedAttribute]
public bool get_IsSuccessfulResponse();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class StreamJsonRpc.Reflection.MessageFormatterDuplexPipeTracker : object {
    [NullableAttribute("1")]
private IJsonRpcFormatterState formatterState;
    [NullableAttribute("1")]
private ImmutableDictionary`2<RequestId, ImmutableList`1<Channel>> outboundRequestChannelMap;
    [NullableAttribute("1")]
private ImmutableDictionary`2<RequestId, ImmutableList`1<Channel>> inboundRequestChannelMap;
    [NullableAttribute("1")]
private ImmutableDictionary`2<QualifiedChannelId, Channel> openOutboundChannels;
    [NullableAttribute("1")]
private ImmutableDictionary`2<QualifiedChannelId, Channel> openInboundChannels;
    private bool isDisposed;
    [CompilerGeneratedAttribute]
private MultiplexingStream <MultiplexingStream>k__BackingField;
    public MultiplexingStream MultiplexingStream { get; public set; }
    private bool Microsoft.IDisposableObservable.IsDisposed { get; }
    private RequestId RequestIdBeingSerialized { get; }
    private RequestId RequestIdBeingDeserialized { get; }
    [NullableContextAttribute("1")]
public MessageFormatterDuplexPipeTracker(JsonRpc jsonRpc, IJsonRpcFormatterState formatterState);
    [CompilerGeneratedAttribute]
public MultiplexingStream get_MultiplexingStream();
    [CompilerGeneratedAttribute]
public void set_MultiplexingStream(MultiplexingStream value);
    private sealed virtual override bool Microsoft.IDisposableObservable.get_IsDisposed();
    private RequestId get_RequestIdBeingSerialized();
    private RequestId get_RequestIdBeingDeserialized();
    [ObsoleteAttribute("Use GetULongToken instead.")]
public Nullable`1<int> GetToken(IDuplexPipe duplexPipe);
    public Nullable`1<ulong> GetULongToken(IDuplexPipe duplexPipe);
    [ObsoleteAttribute("Use GetULongToken instead.")]
public Nullable`1<int> GetToken(PipeReader reader);
    public Nullable`1<ulong> GetULongToken(PipeReader reader);
    [ObsoleteAttribute("Use GetULongToken instead.")]
public Nullable`1<int> GetToken(PipeWriter writer);
    public Nullable`1<ulong> GetULongToken(PipeWriter writer);
    [ObsoleteAttribute("Use GetPipe(ulong?) instead.")]
public IDuplexPipe GetPipe(Nullable`1<int> token);
    public IDuplexPipe GetPipe(Nullable`1<ulong> token);
    [ObsoleteAttribute("Use GetPipeReader(ulong?) instead.")]
public PipeReader GetPipeReader(Nullable`1<int> token);
    public PipeReader GetPipeReader(Nullable`1<ulong> token);
    [ObsoleteAttribute("Use GetPipeWriter(ulong?) instead.")]
public PipeWriter GetPipeWriter(Nullable`1<int> token);
    public PipeWriter GetPipeWriter(Nullable`1<ulong> token);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void CleanUpInboundResources(RequestId requestId, bool successful);
    private void CleanUpOutboundResources(RequestId requestId, bool successful);
    [NullableContextAttribute("1")]
private MultiplexingStream GetMultiplexingStreamOrThrow();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__6_0(object s, JsonRpcMessageEventArgs e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__6_1(object s, JsonRpcResponseEventArgs e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__6_2(object s, JsonRpcResponseEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StreamJsonRpc.Reflection.MessageFormatterEnumerableTracker : object {
    public static string TokenPropertyName;
    public static string ValuesPropertyName;
    private static string FinishedPropertyName;
    private static string NextMethodName;
    private static string DisposeMethodName;
    private static MethodInfo OnNextAsyncMethodInfo;
    private static MethodInfo OnDisposeAsyncMethodInfo;
    private Dictionary`2<RequestId, ImmutableList`1<long>> generatorTokensByRequestId;
    private Dictionary`2<long, IGeneratingEnumeratorTracker> generatorsByToken;
    private JsonRpc jsonRpc;
    private IJsonRpcFormatterState formatterState;
    [NullableAttribute("2")]
private MessageFormatterRpcMarshaledContextTracker rpcTracker;
    private object syncObject;
    private long nextToken;
    public MessageFormatterEnumerableTracker(JsonRpc jsonRpc, IJsonRpcFormatterState formatterState);
    internal MessageFormatterEnumerableTracker(JsonRpc jsonRpc, IJsonRpcFormatterState formatterState, MessageFormatterRpcMarshaledContextTracker rpcTracker);
    private static MessageFormatterEnumerableTracker();
    public static bool CanSerialize(Type objectType);
    public static bool CanDeserialize(Type objectType);
    public long GetToken(IAsyncEnumerable`1<T> enumerable);
    [NullableContextAttribute("2")]
public IAsyncEnumerable`1<T> CreateEnumerableProxy(object handle, IReadOnlyList`1<T> prefetchedItems);
    private ValueTask`1<object> OnNextAsync(long token, CancellationToken cancellationToken);
    private ValueTask OnDisposeAsync(long token);
    private void CleanUpResources(RequestId outboundRequestId);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__15_0(object s, JsonRpcMessageEventArgs e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__15_1(object s, JsonRpcResponseEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StreamJsonRpc.Reflection.MessageFormatterProgressTracker : object {
    public static string ProgressRequestSpecialMethod;
    private Dictionary`2<RequestId, ImmutableList`1<ProgressParamInformation>> requestProgressMap;
    private Dictionary`2<long, ProgressParamInformation> progressMap;
    private object progressLock;
    private IJsonRpcFormatterState formatterState;
    private long nextProgressId;
    private RequestId RequestIdBeingSerialized { get; }
    public MessageFormatterProgressTracker(JsonRpc jsonRpc, IJsonRpcFormatterState formatterState);
    private RequestId get_RequestIdBeingSerialized();
    public static Type FindIProgressOfT(Type objectType);
    [ObsoleteAttribute("Use CanSerialize instead.")]
public static bool IsSupportedProgressType(Type objectType);
    public static bool CanSerialize(Type objectType);
    public static bool CanDeserialize(Type objectType);
    public long GetTokenForProgress(object value);
    [NullableContextAttribute("2")]
public bool TryGetProgressObject(long progressId, ProgressParamInformation& valueType);
    public IProgress`1<T> CreateProgress(JsonRpc rpc, object token);
    public IProgress`1<T> CreateProgress(JsonRpc rpc, object token, bool clientRequiresNamedArguments);
    public object CreateProgress(JsonRpc rpc, object token, Type valueType);
    public object CreateProgress(JsonRpc rpc, object token, Type valueType, bool clientRequiresNamedArguments);
    private void CleanUpResources(RequestId requestId);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__6_0(object s, JsonRpcMessageEventArgs e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__6_1(object s, JsonRpcResponseEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class StreamJsonRpc.Reflection.MessageFormatterRpcMarshaledContextTracker : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static IReadOnlyCollection`1<ValueTuple`4<Type, JsonRpcProxyOptions, JsonRpcTargetOptions, RpcMarshalableAttribute>> ImplicitlyMarshaledTypes;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<Type, ValueTuple`3<JsonRpcProxyOptions, JsonRpcTargetOptions, RpcMarshalableAttribute>> MarshaledTypes;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ValueTuple`2<JsonRpcProxyOptions, JsonRpcTargetOptions> RpcMarshalableInterfaceDefaultOptions;
    private static MethodInfo ReleaseMarshaledObjectMethodInfo;
    private static ConcurrentDictionary`2<Type, RpcMarshalableOptionalInterfaceAttribute[]> MarshalableOptionalInterfaces;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<long, ValueTuple`2<IRpcMarshaledContext`1<object>, IDisposable>> marshaledObjects;
    private JsonRpc jsonRpc;
    private IJsonRpcFormatterState formatterState;
    private long nextUniqueHandle;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ImmutableDictionary`2<RequestId, ImmutableList`1<ValueTuple`2<long, bool>>> outboundRequestIdMarshalMap;
    internal MessageFormatterRpcMarshaledContextTracker(JsonRpc jsonRpc, IJsonRpcFormatterState formatterState);
    private static MessageFormatterRpcMarshaledContextTracker();
    [NullableContextAttribute("2")]
internal static bool TryGetMarshalOptionsForType(Type type, JsonRpcProxyOptions& proxyOptions, JsonRpcTargetOptions& targetOptions, RpcMarshalableAttribute& rpcMarshalableAttribute);
    internal static RpcMarshalableOptionalInterfaceAttribute[] GetMarshalableOptionalInterfaces(Type declaredType, RpcMarshalableAttribute rpcMarshalableAttribute);
    internal MarshalToken GetToken(object marshaledObject, JsonRpcTargetOptions options, Type declaredType, RpcMarshalableAttribute rpcMarshalableAttribute);
    internal object GetObject(Type interfaceType, Nullable`1<MarshalToken> token, JsonRpcProxyOptions options);
    [NullableContextAttribute("2")]
internal IDisposable OutboundCleanupDeferral(RequestId requestId);
    private static void ValidateMarshalableInterface(Type type, RpcMarshalableAttribute attribute);
    private void ReleaseMarshaledObject(long handle, bool ownedBySender);
    private void CleanUpOutboundResources(RequestId requestId, bool successful);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__10_0(object s, JsonRpcMessageEventArgs e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__10_1(object s, JsonRpcResponseEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class StreamJsonRpc.Reflection.RpcTargetInfo : object {
    private static string ImpliedMethodNameAsyncSuffix;
    private static Dictionary`2<TypeInfo, MethodNameMap> MethodNameMaps;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<ValueTuple`4<TypeInfo, bool, bool, bool>, Dictionary`2<string, List`1<MethodSignature>>> RequestMethodToClrMethodMap;
    private JsonRpc jsonRpc;
    private Dictionary`2<string, List`1<MethodSignatureAndTarget>> targetRequestMethodToClrMethodMap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<EventReceiver> eventReceivers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<object> localTargetObjectsToDispose;
    private TraceSource TraceSource { get; }
    private object SyncObject { get; }
    internal RpcTargetInfo(JsonRpc jsonRpc);
    private static RpcTargetInfo();
    private TraceSource get_TraceSource();
    private object get_SyncObject();
    [AsyncStateMachineAttribute("StreamJsonRpc.Reflection.RpcTargetInfo/<DisposeAsync>d__12")]
public sealed virtual ValueTask DisposeAsync();
    internal static MethodNameMap GetMethodNameMap(TypeInfo type);
    internal JsonRpcMethodAttribute GetJsonRpcMethodAttribute(string methodName, ReadOnlySpan`1<ParameterInfo> parameters);
    internal bool TryGetTargetMethod(JsonRpcRequest request, TargetMethod& targetMethod);
    internal RevertAddLocalRpcTarget AddLocalRpcTarget(Type exposingMembersOn, object target, JsonRpcTargetOptions options, bool requestRevertOption);
    internal void AddRpcInterfaceToTarget(Type exposingMembersOn, object target, JsonRpcTargetOptions options, RevertAddLocalRpcTarget revertAddLocalRpcTarget);
    [NullableContextAttribute("2")]
internal void AddLocalRpcMethod(MethodInfo handler, object target, JsonRpcMethodAttribute methodRpcSettings, SynchronizationContext synchronizationContext);
    internal void UnregisterEventHandlersFromTargetObjects();
    private static IReadOnlyDictionary`2<string, List`1<MethodSignature>> GetRequestMethodToClrMethodMap(TypeInfo exposedMembersOnType, bool allowNonPublicInvocation, bool useSingleObjectParameterDeserialization, bool clientRequiresNamedArguments);
    private static IReadOnlyList`1<EventInfo> GetEventInfos(TypeInfo exposedMembersOnType);
    private void AddRpcInterfaceToTarget(IReadOnlyDictionary`2<string, List`1<MethodSignature>> mapping, object target, JsonRpcTargetOptions options, RevertAddLocalRpcTarget revertAddLocalRpcTarget);
    private void TraceLocalMethodAdded(string rpcMethodName, MethodSignatureAndTarget targetMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class StreamJsonRpc.Reflection.TrackerHelpers`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<Type, Type> TypeToImplementedInterfaceMap;
    private static Type InterfaceGenericTypeDefinition;
    private static TrackerHelpers`1();
    internal static Type FindInterfaceImplementedBy(Type objectType);
    internal static bool CanSerialize(Type objectType);
    internal static bool CanDeserialize(Type objectType);
    internal static bool IsActualInterfaceMatch(Type objectType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class StreamJsonRpc.RemoteInvocationException : RemoteRpcException {
    public int ErrorCode { get; }
    public object ErrorData { get; }
    public object DeserializedErrorData { get; }
    public RemoteInvocationException(string message, int errorCode, object errorData);
    public RemoteInvocationException(string message, int errorCode, object errorData, object deserializedErrorData);
    [NullableContextAttribute("1")]
public RemoteInvocationException(string message, int errorCode, Exception innerException);
    [NullableContextAttribute("1")]
protected RemoteInvocationException(SerializationInfo info, StreamingContext context);
    public int get_ErrorCode();
    public object get_ErrorData();
    public object get_DeserializedErrorData();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
private static void ContributeInnerExceptionDetails(StringBuilder builder, CommonErrorData errorData);
    [NullableContextAttribute("1")]
private static void ContributeStackTrace(StringBuilder builder, CommonErrorData errorData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StreamJsonRpc.RemoteMethodNotFoundException : RemoteRpcException {
    [CompilerGeneratedAttribute]
private string <TargetMethod>k__BackingField;
    public string TargetMethod { get; }
    public JsonRpcErrorCode ErrorCode { get; }
    [NullableAttribute("2")]
public object ErrorData { get; }
    [NullableAttribute("2")]
public object DeserializedErrorData { get; }
    [NullableContextAttribute("2")]
internal RemoteMethodNotFoundException(string message, string targetMethod, JsonRpcErrorCode errorCode, object errorData, object deserializedErrorData);
    protected RemoteMethodNotFoundException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_TargetMethod();
    public JsonRpcErrorCode get_ErrorCode();
    [NullableContextAttribute("2")]
public object get_ErrorData();
    [NullableContextAttribute("2")]
public object get_DeserializedErrorData();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class StreamJsonRpc.RemoteRpcException : Exception {
    [CompilerGeneratedAttribute]
private Nullable`1<JsonRpcErrorCode> <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ErrorData>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DeserializedErrorData>k__BackingField;
    public Nullable`1<JsonRpcErrorCode> ErrorCode { get; protected set; }
    public object ErrorData { get; protected set; }
    public object DeserializedErrorData { get; protected set; }
    protected RemoteRpcException(string message);
    protected RemoteRpcException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected RemoteRpcException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public Nullable`1<JsonRpcErrorCode> get_ErrorCode();
    [CompilerGeneratedAttribute]
protected void set_ErrorCode(Nullable`1<JsonRpcErrorCode> value);
    [CompilerGeneratedAttribute]
public object get_ErrorData();
    [CompilerGeneratedAttribute]
protected void set_ErrorData(object value);
    [CompilerGeneratedAttribute]
public object get_DeserializedErrorData();
    [CompilerGeneratedAttribute]
protected void set_DeserializedErrorData(object value);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class StreamJsonRpc.RemoteSerializationException : RemoteRpcException {
    [NullableContextAttribute("2")]
public RemoteSerializationException(string message, object errorData, object deserializedErrorData);
    [NullableContextAttribute("1")]
protected RemoteSerializationException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[JsonConverterAttribute("StreamJsonRpc.RequestIdJsonConverter")]
public class StreamJsonRpc.RequestId : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private string <String>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    public static RequestId NotSpecified { get; }
    public static RequestId Null { get; }
    [DebuggerBrowsableAttribute("0")]
public Nullable`1<long> Number { get; }
    [DebuggerBrowsableAttribute("0")]
public string String { get; }
    [DebuggerBrowsableAttribute("0")]
public bool IsNull { get; }
    public bool IsEmpty { get; }
    internal object ObjectValue { get; }
    [DebuggerBrowsableAttribute("0")]
internal long NumberIfPossibleForEvent { get; }
    public RequestId(long id);
    public RequestId(string id);
    public static RequestId get_NotSpecified();
    public static RequestId get_Null();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<long> get_Number();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_String();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsNull();
    public bool get_IsEmpty();
    internal object get_ObjectValue();
    internal long get_NumberIfPossibleForEvent();
    public static bool op_Equality(RequestId first, RequestId second);
    public static bool op_Inequality(RequestId first, RequestId second);
    public sealed virtual bool Equals(RequestId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    internal static RequestId Parse(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class StreamJsonRpc.RequestIdJsonConverter : JsonConverter`1<RequestId> {
    public virtual RequestId ReadJson(JsonReader reader, Type objectType, RequestId existingValue, bool hasExistingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, RequestId value, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class StreamJsonRpc.Resources : object {
    [NullableAttribute("2")]
private static ResourceManager s_resourceManager;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    public static ResourceManager ResourceManager { get; }
    [NullableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string AddRpcInterfaceToTargetParameterNotInterface { get; }
    public static string BothReadableWritableAreNull { get; }
    public static string CallScopedMarshaledObjectInReturnValueNotAllowed { get; }
    public static string CancellationTokenMustBeLastParameter { get; }
    public static string CannotBeCalledAfterGetAsyncEnumerator { get; }
    public static string ClientProxyTypeArgumentMustBeAnInterface { get; }
    public static string ConflictingMethodAttributeValue { get; }
    public static string ConflictingMethodNameAttribute { get; }
    public static string ConflictMethodSignatureAlreadyRegistered { get; }
    public static string ConnectionDropped { get; }
    public static string DroppingRequestDueToNoTargetObject { get; }
    public static string ElementsAlreadyPrefetched { get; }
    public static string EnumValueNotRecognized { get; }
    public static string ErrorWritingJsonRpcMessage { get; }
    public static string ErrorWritingJsonRpcResult { get; }
    public static string FailureDeserializingJsonRpc { get; }
    public static string FailureDeserializingRpcArgument { get; }
    public static string FailureDeserializingRpcResult { get; }
    public static string FatalExceptionWasThrown { get; }
    public static string FillBufferFirst { get; }
    public static string FindIProgressOfTError { get; }
    public static string FormatterConfigurationLockedAfterJsonRpcAssigned { get; }
    public static string HeaderContentLengthNotParseable { get; }
    public static string HeaderValueTooLarge { get; }
    public static string InboundMessageOnly { get; }
    public static string InvalidAfterListenHasStarted { get; }
    public static string InvalidBeforeListenHasStarted { get; }
    public static string JsonRpcCannotBeNull { get; }
    public static string JsonRpcMethodAndIgnoreAttributesFound { get; }
    public static string MarshalableInterfaceHasEvents { get; }
    public static string MarshalableInterfaceHasProperties { get; }
    public static string MarshalableInterfaceNotDisposable { get; }
    public static string MarshaledObjectInNotificationError { get; }
    public static string MarshaledObjectInResponseOrNotificationError { get; }
    public static string MethodHasRefOrOutParameters { get; }
    public static string MethodParameterCountDoesNotMatch { get; }
    public static string MethodParametersNotCompatible { get; }
    public static string MustBeListening { get; }
    public static string MustNotBeListening { get; }
    public static string NonNegativeIntegerRequired { get; }
    public static string NotSupportedWithoutMultiplexingStream { get; }
    public static string OutboundMessageOnly { get; }
    public static string ParameterNotObject { get; }
    public static string ParameterObjectsNotSupportedInJsonRpc10 { get; }
    public static string PositiveIntegerRequired { get; }
    public static string ReachedEndOfStream { get; }
    public static string ReadingJsonRpcStreamFailed { get; }
    public static string RelayAlreadySet { get; }
    public static string RequiredArgumentMissing { get; }
    public static string ReservedPropertyName { get; }
    public static string ResponseIsNotError { get; }
    public static string ResponseSerializationFailure { get; }
    public static string ResponseUnexpectedFormat { get; }
    public static string RpcMarshalableDuplicatedOptionalInterface { get; }
    public static string RpcMarshalableDuplicatedOptionalInterfaceCode { get; }
    public static string RpcMarshalableOptionalInterfaceMustBeMarshalable { get; }
    public static string RpcMethodNameNotFound { get; }
    public static string SerializationFailure { get; }
    public static string StreamDisposed { get; }
    public static string StreamMustBeReadable { get; }
    public static string StreamMustBeWriteable { get; }
    public static string SumOfTwoParametersExceedsArrayLength { get; }
    public static string TargetObjectAndMethodStaticFlagMismatch { get; }
    public static string TaskNotCompleted { get; }
    public static string TaskWasCancelled { get; }
    public static string TextEncoderNotApplicable { get; }
    public static string TypedArgumentsLengthMismatch { get; }
    public static string UnableToFindMethod { get; }
    public static string UnexpectedErrorProcessingJsonRpc { get; }
    public static string UnexpectedNullValueInMap { get; }
    public static string UnexpectedResponseWithNoMatchingRequest { get; }
    public static string UnexpectedTokenReadingHeader { get; }
    public static string UnknownTokenToMarshaledObject { get; }
    public static string UnrecognizableMessage { get; }
    public static string UnrecognizedIncomingJsonRpc { get; }
    public static string UnsupportedEventHandlerTypeOnClientProxyInterface { get; }
    public static string UnsupportedGenericMethodsOnClientProxyInterface { get; }
    public static string UnsupportedJsonRpcProtocolVersion { get; }
    public static string UnsupportedMethodReturnTypeOnClientProxyInterface { get; }
    public static string UnsupportedPropertiesOnClientProxyInterface { get; }
    public static string UsableOnceOnly { get; }
    public static ResourceManager get_ResourceManager();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static CultureInfo get_Culture();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static void set_Culture(CultureInfo value);
    [NullableContextAttribute("2")]
internal static string GetResourceString(string resourceKey, string defaultValue);
    public static string get_AddRpcInterfaceToTargetParameterNotInterface();
    public static string get_BothReadableWritableAreNull();
    public static string get_CallScopedMarshaledObjectInReturnValueNotAllowed();
    public static string get_CancellationTokenMustBeLastParameter();
    public static string get_CannotBeCalledAfterGetAsyncEnumerator();
    public static string get_ClientProxyTypeArgumentMustBeAnInterface();
    public static string get_ConflictingMethodAttributeValue();
    public static string get_ConflictingMethodNameAttribute();
    public static string get_ConflictMethodSignatureAlreadyRegistered();
    public static string get_ConnectionDropped();
    public static string get_DroppingRequestDueToNoTargetObject();
    public static string get_ElementsAlreadyPrefetched();
    public static string get_EnumValueNotRecognized();
    public static string get_ErrorWritingJsonRpcMessage();
    public static string get_ErrorWritingJsonRpcResult();
    public static string get_FailureDeserializingJsonRpc();
    public static string get_FailureDeserializingRpcArgument();
    public static string get_FailureDeserializingRpcResult();
    public static string get_FatalExceptionWasThrown();
    public static string get_FillBufferFirst();
    public static string get_FindIProgressOfTError();
    public static string get_FormatterConfigurationLockedAfterJsonRpcAssigned();
    public static string get_HeaderContentLengthNotParseable();
    public static string get_HeaderValueTooLarge();
    public static string get_InboundMessageOnly();
    public static string get_InvalidAfterListenHasStarted();
    public static string get_InvalidBeforeListenHasStarted();
    public static string get_JsonRpcCannotBeNull();
    public static string get_JsonRpcMethodAndIgnoreAttributesFound();
    public static string get_MarshalableInterfaceHasEvents();
    public static string get_MarshalableInterfaceHasProperties();
    public static string get_MarshalableInterfaceNotDisposable();
    public static string get_MarshaledObjectInNotificationError();
    public static string get_MarshaledObjectInResponseOrNotificationError();
    public static string get_MethodHasRefOrOutParameters();
    public static string get_MethodParameterCountDoesNotMatch();
    public static string get_MethodParametersNotCompatible();
    public static string get_MustBeListening();
    public static string get_MustNotBeListening();
    public static string get_NonNegativeIntegerRequired();
    public static string get_NotSupportedWithoutMultiplexingStream();
    public static string get_OutboundMessageOnly();
    public static string get_ParameterNotObject();
    public static string get_ParameterObjectsNotSupportedInJsonRpc10();
    public static string get_PositiveIntegerRequired();
    public static string get_ReachedEndOfStream();
    public static string get_ReadingJsonRpcStreamFailed();
    public static string get_RelayAlreadySet();
    public static string get_RequiredArgumentMissing();
    public static string get_ReservedPropertyName();
    public static string get_ResponseIsNotError();
    public static string get_ResponseSerializationFailure();
    public static string get_ResponseUnexpectedFormat();
    public static string get_RpcMarshalableDuplicatedOptionalInterface();
    public static string get_RpcMarshalableDuplicatedOptionalInterfaceCode();
    public static string get_RpcMarshalableOptionalInterfaceMustBeMarshalable();
    public static string get_RpcMethodNameNotFound();
    public static string get_SerializationFailure();
    public static string get_StreamDisposed();
    public static string get_StreamMustBeReadable();
    public static string get_StreamMustBeWriteable();
    public static string get_SumOfTwoParametersExceedsArrayLength();
    public static string get_TargetObjectAndMethodStaticFlagMismatch();
    public static string get_TaskNotCompleted();
    public static string get_TaskWasCancelled();
    public static string get_TextEncoderNotApplicable();
    public static string get_TypedArgumentsLengthMismatch();
    public static string get_UnableToFindMethod();
    public static string get_UnexpectedErrorProcessingJsonRpc();
    public static string get_UnexpectedNullValueInMap();
    public static string get_UnexpectedResponseWithNoMatchingRequest();
    public static string get_UnexpectedTokenReadingHeader();
    public static string get_UnknownTokenToMarshaledObject();
    public static string get_UnrecognizableMessage();
    public static string get_UnrecognizedIncomingJsonRpc();
    public static string get_UnsupportedEventHandlerTypeOnClientProxyInterface();
    public static string get_UnsupportedGenericMethodsOnClientProxyInterface();
    public static string get_UnsupportedJsonRpcProtocolVersion();
    public static string get_UnsupportedMethodReturnTypeOnClientProxyInterface();
    public static string get_UnsupportedPropertiesOnClientProxyInterface();
    public static string get_UsableOnceOnly();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class StreamJsonRpc.RpcArgumentDeserializationException : RemoteRpcException {
    [CompilerGeneratedAttribute]
private string <ArgumentName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ArgumentPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DeserializedType>k__BackingField;
    public string ArgumentName { get; private set; }
    public Nullable`1<int> ArgumentPosition { get; private set; }
    public Type DeserializedType { get; private set; }
    public RpcArgumentDeserializationException(string argumentName, Nullable`1<int> argumentPosition, Type deserializedType, Exception innerException);
    [NullableContextAttribute("1")]
public RpcArgumentDeserializationException(string message);
    [NullableContextAttribute("1")]
public RpcArgumentDeserializationException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected RpcArgumentDeserializationException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_ArgumentName();
    [CompilerGeneratedAttribute]
private void set_ArgumentName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ArgumentPosition();
    [CompilerGeneratedAttribute]
private void set_ArgumentPosition(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Type get_DeserializedType();
    [CompilerGeneratedAttribute]
private void set_DeserializedType(Type value);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[AttributeUsageAttribute("1024")]
public class StreamJsonRpc.RpcMarshalableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <CallScopedLifetime>k__BackingField;
    public bool CallScopedLifetime { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CallScopedLifetime();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CallScopedLifetime(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1024")]
public class StreamJsonRpc.RpcMarshalableOptionalInterfaceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <OptionalInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OptionalInterfaceCode>k__BackingField;
    public Type OptionalInterface { get; }
    public int OptionalInterfaceCode { get; }
    public RpcMarshalableOptionalInterfaceAttribute(int optionalInterfaceCode, Type optionalInterface);
    [CompilerGeneratedAttribute]
public Type get_OptionalInterface();
    [CompilerGeneratedAttribute]
public int get_OptionalInterfaceCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class StreamJsonRpc.RpcMarshaledContext`1 : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler Disposed;
    [CompilerGeneratedAttribute]
private T <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonRpcTargetOptions <JsonRpcTargetOptions>k__BackingField;
    public T Proxy { get; private set; }
    public bool IsDisposed { get; private set; }
    public JsonRpcTargetOptions JsonRpcTargetOptions { get; }
    internal RpcMarshaledContext`1(T value, JsonRpcTargetOptions options);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_Disposed(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Proxy();
    [CompilerGeneratedAttribute]
private void set_Proxy(T value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual JsonRpcTargetOptions get_JsonRpcTargetOptions();
    public sealed virtual void Dispose();
}
internal static class StreamJsonRpc.SharedUtilities : object {
    internal static EventSourceTestMode GetEventSourceTestMode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class StreamJsonRpc.SkipClrVisibilityChecks : object {
    private static ConstructorInfo AttributeBaseClassCtor;
    private static ConstructorInfo AttributeUsageCtor;
    private static PropertyInfo AttributeUsageAllowMultipleProperty;
    private AssemblyBuilder assemblyBuilder;
    private ModuleBuilder moduleBuilder;
    private HashSet`1<string> attributedAssemblyNames;
    [NullableAttribute("2")]
private ConstructorInfo magicAttributeCtor;
    internal SkipClrVisibilityChecks(AssemblyBuilder assemblyBuilder, ModuleBuilder moduleBuilder);
    private static SkipClrVisibilityChecks();
    internal static ImmutableHashSet`1<AssemblyName> GetSkipVisibilityChecksRequirements(TypeInfo typeInfo);
    internal void SkipVisibilityChecksFor(IEnumerable`1<AssemblyName> assemblyNames);
    internal void SkipVisibilityChecksFor(AssemblyName assemblyName);
    [IteratorStateMachineAttribute("StreamJsonRpc.SkipClrVisibilityChecks/<ThisAndBaseTypes>d__11")]
private static IEnumerable`1<TypeInfo> ThisAndBaseTypes(TypeInfo interfaceType);
    private static void CheckForNonPublicTypes(TypeInfo typeInfo, Builder<AssemblyName> assembliesDeclaringInternalTypes, HashSet`1<TypeInfo> visitedTypes);
    private static bool IsEmbeddedType(Type type);
    private ConstructorInfo GetMagicAttributeCtor();
    private TypeInfo EmitMagicAttribute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class StreamJsonRpc.StandardCancellationStrategy : object {
    private static string CancelRequestSpecialMethod;
    private static MethodInfo CancelInboundRequestMethodInfo;
    private Dictionary`2<RequestId, CancellationTokenSource> inboundCancellationSources;
    [CompilerGeneratedAttribute]
private JsonRpc <JsonRpc>k__BackingField;
    internal JsonRpc JsonRpc { get; }
    public StandardCancellationStrategy(JsonRpc jsonRpc);
    private static StandardCancellationStrategy();
    [CompilerGeneratedAttribute]
internal JsonRpc get_JsonRpc();
    public sealed virtual void IncomingRequestStarted(RequestId requestId, CancellationTokenSource cancellationTokenSource);
    public sealed virtual void IncomingRequestEnded(RequestId requestId);
    public sealed virtual void CancelOutboundRequest(RequestId requestId);
    public sealed virtual void OutboundRequestEnded(RequestId requestId);
    protected void CancelInboundRequest(RequestId id);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class StreamJsonRpc.StreamMessageHandler : MessageHandlerBase {
    [CompilerGeneratedAttribute]
private Stream <SendingStream>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <ReceivingStream>k__BackingField;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    protected Stream SendingStream { get; }
    protected Stream ReceivingStream { get; }
    protected StreamMessageHandler(Stream sendingStream, Stream receivingStream, IJsonRpcMessageFormatter formatter);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    [CompilerGeneratedAttribute]
protected Stream get_SendingStream();
    [CompilerGeneratedAttribute]
protected Stream get_ReceivingStream();
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask FlushAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StreamJsonRpc.SystemTextJsonFormatter : FormatterBase {
    private static JsonWriterOptions WriterOptions;
    private static JsonDocumentOptions DocumentOptions;
    private static JsonSerializerOptions BuiltInSerializerOptions;
    private static Encoding DefaultEncoding;
    private ToStringHelper serializationToStringHelper;
    private JsonSerializerOptions massagedUserDataSerializerOptions;
    [NullableAttribute("2")]
private JsonDocument deserializingDocument;
    public Encoding Encoding { get; public set; }
    public JsonSerializerOptions JsonSerializerOptions { get; public set; }
    private static SystemTextJsonFormatter();
    public sealed virtual Encoding get_Encoding();
    public sealed virtual void set_Encoding(Encoding value);
    public JsonSerializerOptions get_JsonSerializerOptions();
    public void set_JsonSerializerOptions(JsonSerializerOptions value);
    [NullableContextAttribute("0")]
public sealed virtual JsonRpcMessage Deserialize(ReadOnlySequence`1<byte> contentBuffer);
    public sealed virtual JsonRpcMessage Deserialize(ReadOnlySequence`1<byte> contentBuffer, Encoding encoding);
    public sealed virtual object GetJsonText(JsonRpcMessage message);
    public sealed virtual void Serialize(IBufferWriter`1<byte> bufferWriter, JsonRpcMessage message);
    [NullableContextAttribute("0")]
private sealed virtual override void StreamJsonRpc.Reflection.IJsonRpcFormatterTracingCallbacks.OnSerializationComplete(JsonRpcMessage message, ReadOnlySequence`1<byte> encodedMessage);
    private sealed virtual override JsonRpcRequest StreamJsonRpc.IJsonRpcMessageFactory.CreateRequestMessage();
    private sealed virtual override JsonRpcError StreamJsonRpc.IJsonRpcMessageFactory.CreateErrorMessage();
    private sealed virtual override JsonRpcResult StreamJsonRpc.IJsonRpcMessageFactory.CreateResultMessage();
    private JsonSerializerOptions MassageUserDataSerializerOptions(JsonSerializerOptions options);
    [CompilerGeneratedAttribute]
internal static RequestId <Deserialize>g__ReadRequestId|15_0(<>c__DisplayClass15_0& );
    [CompilerGeneratedAttribute]
private void <Serialize>g__WriteVersion|17_0(<>c__DisplayClass17_0& , <>c__DisplayClass17_1& );
    [CompilerGeneratedAttribute]
internal static void <Serialize>g__WriteId|17_1(RequestId id, <>c__DisplayClass17_1& );
    [CompilerGeneratedAttribute]
private void <Serialize>g__WriteArguments|17_2(JsonRpcRequest request, <>c__DisplayClass17_0& , <>c__DisplayClass17_1& );
    [CompilerGeneratedAttribute]
private void <Serialize>g__WriteResult|17_3(JsonRpcResult result, <>c__DisplayClass17_0& , <>c__DisplayClass17_1& );
    [CompilerGeneratedAttribute]
private void <Serialize>g__WriteError|17_4(JsonRpcError error, <>c__DisplayClass17_0& , <>c__DisplayClass17_1& );
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <Serialize>g__WriteUserData|17_5(object value, Type declaredType, <>c__DisplayClass17_0& , <>c__DisplayClass17_1& );
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class StreamJsonRpc.TargetMethod : object {
    [NullableAttribute("1")]
private JsonRpcRequest request;
    private object target;
    private MethodSignature signature;
    private Object[] arguments;
    private SynchronizationContext synchronizationContext;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<string> errorMessages;
    [CompilerGeneratedAttribute]
private AggregateException <ArgumentDeserializationFailures>k__BackingField;
    public Type TargetObjectType { get; }
    public MethodInfo TargetMethodInfo { get; }
    internal AggregateException ArgumentDeserializationFailures { get; }
    internal bool IsFound { get; }
    internal bool AcceptsCancellationToken { get; }
    [NullableAttribute("1")]
internal string LookupErrorMessage { get; }
    internal Type ReturnType { get; }
    [NullableContextAttribute("1")]
internal TargetMethod(JsonRpcRequest request, List`1<MethodSignatureAndTarget> candidateMethodTargets, SynchronizationContext fallbackSynchronizationContext);
    public Type get_TargetObjectType();
    public MethodInfo get_TargetMethodInfo();
    [CompilerGeneratedAttribute]
internal AggregateException get_ArgumentDeserializationFailures();
    internal bool get_IsFound();
    internal bool get_AcceptsCancellationToken();
    [NullableContextAttribute("1")]
internal string get_LookupErrorMessage();
    internal Type get_ReturnType();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [AsyncStateMachineAttribute("StreamJsonRpc.TargetMethod/<InvokeAsync>d__23")]
internal Task`1<object> InvokeAsync(CancellationToken cancellationToken);
    private string GetParameterSignature();
    [NullableContextAttribute("1")]
private void AddErrorMessage(string message);
    [NullableContextAttribute("1")]
private bool TryGetArguments(JsonRpcRequest request, MethodSignature method, Span`1<object> arguments);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class StreamJsonRpc.UnexpectedEmptyEnumerableResponseException : RemoteRpcException {
    public UnexpectedEmptyEnumerableResponseException(string message);
    public UnexpectedEmptyEnumerableResponseException(string message, Exception innerException);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class StreamJsonRpc.UnrecognizedJsonRpcMessageException : RemoteRpcException {
    public UnrecognizedJsonRpcMessageException(string message);
    public UnrecognizedJsonRpcMessageException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected UnrecognizedJsonRpcMessageException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
internal static class StreamJsonRpc.Utilities : object {
    internal static int ReadInt32BE(ReadOnlySequence`1<byte> sequence);
    internal static int ReadIntBE(ReadOnlySpan`1<byte> buffer);
    internal static void Write(Span`1<byte> buffer, int value);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static void CopyTo(ReadOnlySequence`1& sequence, IBufferWriter`1<T> writer);
    [NullableContextAttribute("2")]
internal static string ToCamelCase(string identifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StreamJsonRpc.WebSocketMessageHandler : MessageHandlerBase {
    private int sizeHint;
    private Sequence`1<byte> contentSequenceBuilder;
    [NullableAttribute("2")]
private IJsonRpcMessageBufferManager bufferedMessage;
    [CompilerGeneratedAttribute]
private WebSocket <WebSocket>k__BackingField;
    public bool CanWrite { get; }
    public bool CanRead { get; }
    public WebSocket WebSocket { get; }
    public WebSocketMessageHandler(WebSocket webSocket);
    public WebSocketMessageHandler(WebSocket webSocket, IJsonRpcMessageFormatter formatter, int sizeHint);
    public virtual bool get_CanWrite();
    public virtual bool get_CanRead();
    [CompilerGeneratedAttribute]
public WebSocket get_WebSocket();
    private sealed virtual override void StreamJsonRpc.Reflection.IJsonRpcMessageBufferManager.DeserializationComplete(JsonRpcMessage message);
    [AsyncStateMachineAttribute("StreamJsonRpc.WebSocketMessageHandler/<ReadCoreAsync>d__13")]
protected virtual ValueTask`1<JsonRpcMessage> ReadCoreAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("StreamJsonRpc.WebSocketMessageHandler/<WriteCoreAsync>d__14")]
protected virtual ValueTask WriteCoreAsync(JsonRpcMessage content, CancellationToken cancellationToken);
    protected virtual ValueTask FlushAsync(CancellationToken cancellationToken);
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.139.59561")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
