internal static class Mono.Security.Cryptography.CryptoConvert : object {
    private static int ToInt32LE(Byte[] bytes, int offset);
    private static UInt32 ToUInt32LE(Byte[] bytes, int offset);
    private static Byte[] GetBytesLE(int val);
    private static Byte[] Trim(Byte[] array);
    private static RSA FromCapiPrivateKeyBlob(Byte[] blob, int offset);
    private static RSA FromCapiPublicKeyBlob(Byte[] blob, int offset);
    public static RSA FromCapiKeyBlob(Byte[] blob);
    public static RSA FromCapiKeyBlob(Byte[] blob, int offset);
    public static Byte[] ToCapiPublicKeyBlob(RSA rsa);
}
public class StrongNamer.AddStrongName : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <SignedAssemblyFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <CopyLocalFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <SignedAssembliesToReference>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <NewCopyLocalFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <KeyFile>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] Assemblies { get; public set; }
    [RequiredAttribute]
public ITaskItem SignedAssemblyFolder { get; public set; }
    public ITaskItem[] CopyLocalFiles { get; public set; }
    [OutputAttribute]
public ITaskItem[] SignedAssembliesToReference { get; public set; }
    [OutputAttribute]
public ITaskItem[] NewCopyLocalFiles { get; public set; }
    [RequiredAttribute]
public ITaskItem KeyFile { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Assemblies();
    [CompilerGeneratedAttribute]
public void set_Assemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_SignedAssemblyFolder();
    [CompilerGeneratedAttribute]
public void set_SignedAssemblyFolder(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_CopyLocalFiles();
    [CompilerGeneratedAttribute]
public void set_CopyLocalFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SignedAssembliesToReference();
    [CompilerGeneratedAttribute]
public void set_SignedAssembliesToReference(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_NewCopyLocalFiles();
    [CompilerGeneratedAttribute]
public void set_NewCopyLocalFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_KeyFile();
    [CompilerGeneratedAttribute]
public void set_KeyFile(ITaskItem value);
    public virtual bool Execute();
    private ITaskItem ProcessAssembly(ITaskItem assemblyItem, Byte[] keyBytes, StrongNamerAssemblyResolver resolver);
    private static Byte[] GetKeyTokenFromKey(Byte[] fullKey);
    private static RSA CreateRSA(Byte[] blob);
    public static Byte[] GetPublicKey(Byte[] keyBlob);
}
internal class StrongNamer.StrongNamerAssemblyResolver : BaseAssemblyResolver {
    private String[] _assemblyPaths;
    private List`1<AssemblyDefinition> _assemblies;
    public StrongNamerAssemblyResolver(IEnumerable`1<string> assemblyPaths);
    public virtual AssemblyDefinition Resolve(AssemblyNameReference name, ReaderParameters parameters);
    public virtual AssemblyDefinition Resolve(AssemblyNameReference name);
    protected virtual void Dispose(bool disposing);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.0.26.31022")]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
