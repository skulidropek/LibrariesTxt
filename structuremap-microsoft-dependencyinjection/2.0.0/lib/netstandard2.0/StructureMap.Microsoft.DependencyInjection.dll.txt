internal class StructureMap.AspNetConstructorSelector : object {
    public sealed virtual ConstructorInfo Find(Type pluggedType, DependencyCollection dependencies, PluginGraph graph);
    private static bool PublicConstructors(ConstructorInfo constructor);
}
[ExtensionAttribute]
public static class StructureMap.ContainerExtensions : object {
    [ExtensionAttribute]
public static void Populate(IContainer container, IEnumerable`1<ServiceDescriptor> descriptors);
    [ExtensionAttribute]
public static void Populate(IContainer container, IEnumerable`1<ServiceDescriptor> descriptors, bool checkDuplicateCalls);
    [ExtensionAttribute]
public static void Populate(ConfigurationExpression config, IEnumerable`1<ServiceDescriptor> descriptors);
    [ExtensionAttribute]
public static void Populate(ConfigurationExpression config, IEnumerable`1<ServiceDescriptor> descriptors, bool checkDuplicateCalls);
    [ExtensionAttribute]
public static void Populate(Registry registry, IEnumerable`1<ServiceDescriptor> descriptors);
    [ExtensionAttribute]
public static void Populate(Registry registry, IEnumerable`1<ServiceDescriptor> descriptors, bool checkDuplicateCalls);
    private static void ThrowIfMarkerInterfaceIsRegistered(PluginGraph graph);
    [ExtensionAttribute]
private static void Register(IProfileRegistry registry, IEnumerable`1<ServiceDescriptor> descriptors);
    [ExtensionAttribute]
private static void Register(IProfileRegistry registry, ServiceDescriptor descriptor);
    [ExtensionAttribute]
private static Expression`1<Func`2<IContext, object>> CreateFactory(ServiceDescriptor descriptor);
}
[ExtensionAttribute]
internal static class StructureMap.HelperExtensions : object {
    [ExtensionAttribute]
public static bool IsGenericEnumerable(Type type);
    [ExtensionAttribute]
public static GenericFamilyExpression LifecycleIs(GenericFamilyExpression instance, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static bool HasFamily(PluginGraph graph);
}
[ExtensionAttribute]
public static class StructureMap.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddStructureMap(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddStructureMap(IServiceCollection services, Registry registry);
}
public class StructureMap.StructureMapServiceProvider : object {
    private Stack`1<IContainer> _containers;
    public IContainer Container { get; }
    public StructureMapServiceProvider(IContainer container);
    public IContainer get_Container();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual object GetRequiredService(Type serviceType);
    public void StartNewScope();
    public void TeardownScope();
}
public class StructureMap.StructureMapServiceProviderFactory : object {
    [CompilerGeneratedAttribute]
private Registry <Registry>k__BackingField;
    private Registry Registry { get; }
    public StructureMapServiceProviderFactory(Registry registry);
    [CompilerGeneratedAttribute]
private Registry get_Registry();
    public sealed virtual Registry CreateBuilder(IServiceCollection services);
    public sealed virtual IServiceProvider CreateServiceProvider(Registry registry);
}
internal class StructureMap.StructureMapServiceScopeFactory : object {
    [CompilerGeneratedAttribute]
private IContainer <Container>k__BackingField;
    private IContainer Container { get; }
    public StructureMapServiceScopeFactory(IContainer container);
    [CompilerGeneratedAttribute]
private IContainer get_Container();
    public sealed virtual IServiceScope CreateScope();
}
