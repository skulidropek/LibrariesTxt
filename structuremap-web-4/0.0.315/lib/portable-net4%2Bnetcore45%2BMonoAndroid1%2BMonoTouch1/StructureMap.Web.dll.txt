[ExtensionAttribute]
public static class StructureMap.Web.CreatePluginFamilyExpressionExtensions : object {
    [ExtensionAttribute]
public static CreatePluginFamilyExpression`1<TPluginType> HybridHttpOrThreadLocalScoped(CreatePluginFamilyExpression`1<TPluginType> source);
    [ExtensionAttribute]
public static CreatePluginFamilyExpression`1<TPluginType> HttpContextScoped(CreatePluginFamilyExpression`1<TPluginType> source);
}
[ExtensionAttribute]
public static class StructureMap.Web.GenericFamilyExpressionExtensions : object {
    [ExtensionAttribute]
public static GenericFamilyExpression HybridHttpOrThreadLocalScoped(GenericFamilyExpression expression);
    [ExtensionAttribute]
public static GenericFamilyExpression HttpContextScoped(GenericFamilyExpression expression);
}
public class StructureMap.Web.Pipeline.HttpContextLifecycle : LifecycleBase {
    public static string ITEM_NAME;
    private static HttpContextLifecycle();
    public virtual void EjectAll(ILifecycleContext context);
    public virtual IObjectCache FindCache(ILifecycleContext context);
    public static bool HasContext();
    public static void DisposeAndClearAll();
    protected virtual IDictionary findHttpDictionary();
}
public abstract class StructureMap.Web.Pipeline.HttpLifecycleBase`2 : LifecycleBase {
    private ILifecycle _http;
    private ILifecycle _nonHttp;
    public virtual void EjectAll(ILifecycleContext context);
    public virtual IObjectCache FindCache(ILifecycleContext context);
}
public class StructureMap.Web.Pipeline.HttpSessionLifecycle : HttpContextLifecycle {
    protected virtual IDictionary findHttpDictionary();
}
public class StructureMap.Web.Pipeline.HybridLifecycle : HttpLifecycleBase`2<HttpContextLifecycle, ThreadLocalStorageLifecycle> {
}
public class StructureMap.Web.Pipeline.HybridSessionLifecycle : HttpLifecycleBase`2<HttpSessionLifecycle, ThreadLocalStorageLifecycle> {
}
[DefaultMemberAttribute("Item")]
public class StructureMap.Web.SessionWrapper : object {
    private HttpSessionState _session;
    public int Count { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public object Item { get; public set; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public SessionWrapper(HttpSessionState session);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual bool Contains(object key);
    public sealed virtual void Add(object key, object value);
    public sealed virtual void Clear();
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    public sealed virtual void Remove(object key);
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    public sealed virtual ICollection get_Keys();
    public sealed virtual ICollection get_Values();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsFixedSize();
}
public static class StructureMap.Web.WebLifecycles : object {
    public static HybridLifecycle Hybrid;
    public static HttpSessionLifecycle HttpSession;
    public static HybridSessionLifecycle HybridSession;
    public static HttpContextLifecycle HttpContext;
    private static WebLifecycles();
}
