[AttributeUsageAttribute("1")]
public class System.Data.SQLite.AssemblySourceIdAttribute : Attribute {
    private string sourceId;
    public string SourceId { get; }
    public AssemblySourceIdAttribute(string value);
    public string get_SourceId();
}
[AttributeUsageAttribute("1")]
public class System.Data.SQLite.AssemblySourceTimeStampAttribute : Attribute {
    private string sourceTimeStamp;
    public string SourceTimeStamp { get; }
    public AssemblySourceTimeStampAttribute(string value);
    public string get_SourceTimeStamp();
}
public class System.Data.SQLite.AuthorizerEventArgs : EventArgs {
    public IntPtr UserData;
    public SQLiteAuthorizerActionCode ActionCode;
    public string Argument1;
    public string Argument2;
    public string Database;
    public string Context;
    public SQLiteAuthorizerReturnCode ReturnCode;
    internal AuthorizerEventArgs(IntPtr pUserData, SQLiteAuthorizerActionCode actionCode, string argument1, string argument2, string database, string context, SQLiteAuthorizerReturnCode returnCode);
}
public class System.Data.SQLite.BusyEventArgs : EventArgs {
    public IntPtr UserData;
    public int Count;
    public SQLiteBusyReturnCode ReturnCode;
    internal BusyEventArgs(IntPtr pUserData, int count, SQLiteBusyReturnCode returnCode);
}
public enum System.Data.SQLite.CollationEncodingEnum : Enum {
    public int value__;
    public static CollationEncodingEnum UTF8;
    public static CollationEncodingEnum UTF16LE;
    public static CollationEncodingEnum UTF16BE;
}
public class System.Data.SQLite.CollationSequence : ValueType {
    public string Name;
    public CollationTypeEnum Type;
    public CollationEncodingEnum Encoding;
    internal SQLiteFunction _func;
    public int Compare(string s1, string s2);
    public int Compare(Char[] c1, Char[] c2);
}
public enum System.Data.SQLite.CollationTypeEnum : Enum {
    public int value__;
    public static CollationTypeEnum Binary;
    public static CollationTypeEnum NoCase;
    public static CollationTypeEnum Reverse;
    public static CollationTypeEnum Custom;
}
public class System.Data.SQLite.CommitEventArgs : EventArgs {
    public bool AbortTransaction;
}
public class System.Data.SQLite.ConnectionEventArgs : EventArgs {
    private static long createCount;
    public SQLiteConnectionEventType EventType;
    public StateChangeEventArgs EventArgs;
    public IDbTransaction Transaction;
    public IDbCommand Command;
    public IDataReader DataReader;
    public CriticalHandle CriticalHandle;
    public string Text;
    public object Data;
    private string result;
    public static long CreateCount { get; }
    public string Result { get; public set; }
    internal ConnectionEventArgs(SQLiteConnectionEventType eventType, StateChangeEventArgs eventArgs, IDbTransaction transaction, IDbCommand command, IDataReader dataReader, CriticalHandle criticalHandle, string text, object data);
    internal ConnectionEventArgs(SQLiteConnectionEventType eventType, StateChangeEventArgs eventArgs, IDbTransaction transaction, IDbCommand command, IDataReader dataReader, CriticalHandle criticalHandle, string text, object data, string result);
    public static long get_CreateCount();
    public string get_Result();
    public void set_Result(string value);
}
internal static class System.Data.SQLite.DebugData : object {
    internal static int connectionCount;
    internal static int statementCount;
    internal static int backupCount;
    internal static int blobCount;
}
internal enum System.Data.SQLite.FlagsOperation : Enum {
    public int value__;
    public static FlagsOperation None;
    public static FlagsOperation Add;
    public static FlagsOperation Remove;
    public static FlagsOperation Set;
    public static FlagsOperation Default;
}
public enum System.Data.SQLite.FunctionType : Enum {
    public int value__;
    public static FunctionType Scalar;
    public static FunctionType Aggregate;
    public static FunctionType Collation;
    public static FunctionType Window;
}
public class System.Data.SQLite.Generic.SQLiteModuleEnumerable`1 : SQLiteModuleEnumerable {
    private IEnumerable`1<T> enumerable;
    private bool disposed;
    public SQLiteModuleEnumerable`1(string name, IEnumerable`1<T> enumerable);
    public virtual SQLiteErrorCode Open(SQLiteVirtualTable table, SQLiteVirtualTableCursor& cursor);
    public virtual SQLiteErrorCode Column(SQLiteVirtualTableCursor cursor, SQLiteContext context, int index);
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
}
public class System.Data.SQLite.Generic.SQLiteVirtualTableCursorEnumerator`1 : SQLiteVirtualTableCursorEnumerator {
    private IEnumerator`1<T> enumerator;
    private bool disposed;
    private T System.Collections.Generic.IEnumerator<T>.Current { get; }
    public SQLiteVirtualTableCursorEnumerator`1(SQLiteVirtualTable table, IEnumerator`1<T> enumerator);
    private sealed virtual override T System.Collections.Generic.IEnumerator<T>.get_Current();
    public virtual void Close();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
}
internal static class System.Data.SQLite.HelperMethods : object {
    private static string DisplayNullObject;
    private static string DisplayEmptyString;
    private static string DisplayStringFormat;
    private static string DisplayNullArray;
    private static string DisplayEmptyArray;
    private static string TraceDateTimeFormat;
    private static char ArrayOpen;
    private static string ElementSeparator;
    private static char ArrayClose;
    private static Char[] SpaceChars;
    private static Char[] SeparatorChars;
    private static object staticSyncRoot;
    private static string MonoRuntimeType;
    private static string DotNetCoreLibType;
    private static Nullable`1<bool> isMono;
    private static Nullable`1<bool> isDotNetCore;
    private static Nullable`1<bool> debuggerBreak;
    private static TraceCategory traceCategories;
    private static bool traceCategoriesSet;
    private static HelperMethods();
    private static int GetProcessId();
    private static bool IsMono();
    private static bool IsTraceCategoryEnabled(TraceCategory category);
    internal static void ResetBreakIntoDebugger();
    internal static void MaybeBreakIntoDebugger(bool enabled);
    internal static int GetThreadId();
    internal static bool IsWindows();
    internal static string StringFormat(IFormatProvider provider, string format, Object[] args);
    internal static bool IsDotNetCore();
    internal static Nullable`1<TraceCategory> ParseTraceCategories(string value);
    internal static bool AreTraceCategoriesSet();
    internal static void SetTraceCategories(TraceCategory categories);
    [ConditionalAttribute("TRACE")]
internal static void Trace(string message, TraceCategory category);
    internal static string ToDisplayString(object value);
    internal static string ToDisplayString(Array array);
    internal static bool HasFlags(SQLiteConnectionFlags flags, SQLiteConnectionFlags hasFlags);
    internal static bool LogPrepare(SQLiteConnectionFlags flags);
    internal static bool LogPreBind(SQLiteConnectionFlags flags);
    internal static bool LogBind(SQLiteConnectionFlags flags);
    internal static bool LogCallbackExceptions(SQLiteConnectionFlags flags);
    internal static bool LogBackup(SQLiteConnectionFlags flags);
    internal static bool NoLogModule(SQLiteConnectionFlags flags);
    internal static bool LogModuleError(SQLiteConnectionFlags flags);
    internal static bool LogModuleException(SQLiteConnectionFlags flags);
    internal static bool LogRetry(SQLiteConnectionFlags flags);
}
public interface System.Data.SQLite.ISQLiteChangeGroup {
    public abstract virtual void AddChangeSet(Byte[] rawData);
    public abstract virtual void AddChangeSet(Stream stream);
    public abstract virtual void CreateChangeSet(Byte[]& rawData);
    public abstract virtual void CreateChangeSet(Stream stream);
}
public interface System.Data.SQLite.ISQLiteChangeSet {
    public abstract virtual ISQLiteChangeSet Invert();
    public abstract virtual ISQLiteChangeSet CombineWith(ISQLiteChangeSet changeSet);
    public abstract virtual void Apply(SessionConflictCallback conflictCallback, object clientData);
    public abstract virtual void Apply(SessionConflictCallback conflictCallback, SessionTableFilterCallback tableFilterCallback, object clientData);
}
public interface System.Data.SQLite.ISQLiteChangeSetMetadataItem {
    public string TableName { get; }
    public int NumberOfColumns { get; }
    public SQLiteAuthorizerActionCode OperationCode { get; }
    public bool Indirect { get; }
    public Boolean[] PrimaryKeyColumns { get; }
    public int NumberOfForeignKeyConflicts { get; }
    public abstract virtual string get_TableName();
    public abstract virtual int get_NumberOfColumns();
    public abstract virtual SQLiteAuthorizerActionCode get_OperationCode();
    public abstract virtual bool get_Indirect();
    public abstract virtual Boolean[] get_PrimaryKeyColumns();
    public abstract virtual int get_NumberOfForeignKeyConflicts();
    public abstract virtual SQLiteValue GetOldValue(int columnIndex);
    public abstract virtual SQLiteValue GetNewValue(int columnIndex);
    public abstract virtual SQLiteValue GetConflictValue(int columnIndex);
}
public interface System.Data.SQLite.ISQLiteConnectionPool {
    public abstract virtual void GetCounts(string fileName, Dictionary`2& counts, Int32& openCount, Int32& closeCount, Int32& totalCount);
    public abstract virtual void ClearPool(string fileName);
    public abstract virtual void ClearAllPools();
    public abstract virtual void Add(string fileName, object handle, int version);
    public abstract virtual object Remove(string fileName, int maxPoolSize, Int32& version);
}
public interface System.Data.SQLite.ISQLiteConnectionPool2 {
    public abstract virtual void Initialize(object argument);
    public abstract virtual void Terminate(object argument);
    public abstract virtual void GetCounts(Int32& openCount, Int32& closeCount);
    public abstract virtual void ResetCounts();
}
public interface System.Data.SQLite.ISQLiteManagedModule {
    public bool Declared { get; }
    public string Name { get; }
    public abstract virtual bool get_Declared();
    public abstract virtual string get_Name();
    public abstract virtual SQLiteErrorCode Create(SQLiteConnection connection, IntPtr pClientData, String[] arguments, SQLiteVirtualTable& table, String& error);
    public abstract virtual SQLiteErrorCode Connect(SQLiteConnection connection, IntPtr pClientData, String[] arguments, SQLiteVirtualTable& table, String& error);
    public abstract virtual SQLiteErrorCode BestIndex(SQLiteVirtualTable table, SQLiteIndex index);
    public abstract virtual SQLiteErrorCode Disconnect(SQLiteVirtualTable table);
    public abstract virtual SQLiteErrorCode Destroy(SQLiteVirtualTable table);
    public abstract virtual SQLiteErrorCode Open(SQLiteVirtualTable table, SQLiteVirtualTableCursor& cursor);
    public abstract virtual SQLiteErrorCode Close(SQLiteVirtualTableCursor cursor);
    public abstract virtual SQLiteErrorCode Filter(SQLiteVirtualTableCursor cursor, int indexNumber, string indexString, SQLiteValue[] values);
    public abstract virtual SQLiteErrorCode Next(SQLiteVirtualTableCursor cursor);
    public abstract virtual bool Eof(SQLiteVirtualTableCursor cursor);
    public abstract virtual SQLiteErrorCode Column(SQLiteVirtualTableCursor cursor, SQLiteContext context, int index);
    public abstract virtual SQLiteErrorCode RowId(SQLiteVirtualTableCursor cursor, Int64& rowId);
    public abstract virtual SQLiteErrorCode Update(SQLiteVirtualTable table, SQLiteValue[] values, Int64& rowId);
    public abstract virtual SQLiteErrorCode Begin(SQLiteVirtualTable table);
    public abstract virtual SQLiteErrorCode Sync(SQLiteVirtualTable table);
    public abstract virtual SQLiteErrorCode Commit(SQLiteVirtualTable table);
    public abstract virtual SQLiteErrorCode Rollback(SQLiteVirtualTable table);
    public abstract virtual bool FindFunction(SQLiteVirtualTable table, int argumentCount, string name, SQLiteFunction& function, IntPtr& pClientData);
    public abstract virtual SQLiteErrorCode Rename(SQLiteVirtualTable table, string newName);
    public abstract virtual SQLiteErrorCode Savepoint(SQLiteVirtualTable table, int savepoint);
    public abstract virtual SQLiteErrorCode Release(SQLiteVirtualTable table, int savepoint);
    public abstract virtual SQLiteErrorCode RollbackTo(SQLiteVirtualTable table, int savepoint);
}
public interface System.Data.SQLite.ISQLiteNativeHandle {
    public IntPtr NativeHandle { get; }
    public abstract virtual IntPtr get_NativeHandle();
}
public interface System.Data.SQLite.ISQLiteNativeModule {
    public abstract virtual SQLiteErrorCode xCreate(IntPtr pDb, IntPtr pAux, int argc, IntPtr argv, IntPtr& pVtab, IntPtr& pError);
    public abstract virtual SQLiteErrorCode xConnect(IntPtr pDb, IntPtr pAux, int argc, IntPtr argv, IntPtr& pVtab, IntPtr& pError);
    public abstract virtual SQLiteErrorCode xBestIndex(IntPtr pVtab, IntPtr pIndex);
    public abstract virtual SQLiteErrorCode xDisconnect(IntPtr pVtab);
    public abstract virtual SQLiteErrorCode xDestroy(IntPtr pVtab);
    public abstract virtual SQLiteErrorCode xOpen(IntPtr pVtab, IntPtr& pCursor);
    public abstract virtual SQLiteErrorCode xClose(IntPtr pCursor);
    public abstract virtual SQLiteErrorCode xFilter(IntPtr pCursor, int idxNum, IntPtr idxStr, int argc, IntPtr argv);
    public abstract virtual SQLiteErrorCode xNext(IntPtr pCursor);
    public abstract virtual int xEof(IntPtr pCursor);
    public abstract virtual SQLiteErrorCode xColumn(IntPtr pCursor, IntPtr pContext, int index);
    public abstract virtual SQLiteErrorCode xRowId(IntPtr pCursor, Int64& rowId);
    public abstract virtual SQLiteErrorCode xUpdate(IntPtr pVtab, int argc, IntPtr argv, Int64& rowId);
    public abstract virtual SQLiteErrorCode xBegin(IntPtr pVtab);
    public abstract virtual SQLiteErrorCode xSync(IntPtr pVtab);
    public abstract virtual SQLiteErrorCode xCommit(IntPtr pVtab);
    public abstract virtual SQLiteErrorCode xRollback(IntPtr pVtab);
    public abstract virtual int xFindFunction(IntPtr pVtab, int nArg, IntPtr zName, SQLiteCallback& callback, IntPtr& pClientData);
    public abstract virtual SQLiteErrorCode xRename(IntPtr pVtab, IntPtr zNew);
    public abstract virtual SQLiteErrorCode xSavepoint(IntPtr pVtab, int iSavepoint);
    public abstract virtual SQLiteErrorCode xRelease(IntPtr pVtab, int iSavepoint);
    public abstract virtual SQLiteErrorCode xRollbackTo(IntPtr pVtab, int iSavepoint);
}
public interface System.Data.SQLite.ISQLiteSchemaExtensions {
    public abstract virtual void BuildTempSchema(SQLiteConnection connection);
}
public interface System.Data.SQLite.ISQLiteSession {
    public abstract virtual bool IsEnabled();
    public abstract virtual void SetToEnabled();
    public abstract virtual void SetToDisabled();
    public abstract virtual bool IsIndirect();
    public abstract virtual void SetToIndirect();
    public abstract virtual void SetToDirect();
    public abstract virtual bool IsEmpty();
    public abstract virtual long GetMemoryBytesInUse();
    public abstract virtual void AttachTable(string name);
    public abstract virtual void SetTableFilter(SessionTableFilterCallback callback, object clientData);
    public abstract virtual void CreateChangeSet(Byte[]& rawData);
    public abstract virtual void CreateChangeSet(Stream stream);
    public abstract virtual void CreatePatchSet(Byte[]& rawData);
    public abstract virtual void CreatePatchSet(Stream stream);
    public abstract virtual void LoadDifferencesFromTable(string fromDatabaseName, string tableName);
}
public class System.Data.SQLite.LogEventArgs : EventArgs {
    public object ErrorCode;
    public string Message;
    public object Data;
    internal LogEventArgs(IntPtr pUserData, object errorCode, string message, object data);
}
internal static class System.Data.SQLite.NativeLibraryHelper : object {
    private static IntPtr LoadLibraryWin32(string fileName);
    private static string GetMachineWin32();
    private static IntPtr LoadLibraryPosix(string fileName);
    private static string GetMachinePosix();
    public static IntPtr LoadLibrary(string fileName);
    public static string GetMachine();
}
[ObfuscationAttribute]
internal enum System.Data.SQLite.OpResult : Enum {
    public int value__;
    public static OpResult Success;
    public static OpResult Failure;
    public static OpResult Unknown;
    public static OpResult Skipped;
    public static OpResult Queued;
}
public enum System.Data.SQLite.PasswordMode : Enum {
    public int value__;
    public static PasswordMode None;
    public static PasswordMode Password;
    public static PasswordMode HexPassword;
    public static PasswordMode TextPassword;
    public static PasswordMode TextHexPassword;
}
internal class System.Data.SQLite.PoolQueue`1 : object {
    internal Queue`1<T> Queue;
    internal int PoolVersion;
    internal int MaxPoolSize;
    internal PoolQueue`1(int version, int maxSize);
}
public class System.Data.SQLite.ProgressEventArgs : EventArgs {
    public IntPtr UserData;
    public SQLiteProgressReturnCode ReturnCode;
    internal ProgressEventArgs(IntPtr pUserData, SQLiteProgressReturnCode returnCode);
}
public class System.Data.SQLite.SessionConflictCallback : MulticastDelegate {
    public SessionConflictCallback(object object, IntPtr method);
    public virtual SQLiteChangeSetConflictResult Invoke(object clientData, SQLiteChangeSetConflictType type, ISQLiteChangeSetMetadataItem item);
    public virtual IAsyncResult BeginInvoke(object clientData, SQLiteChangeSetConflictType type, ISQLiteChangeSetMetadataItem item, AsyncCallback callback, object object);
    public virtual SQLiteChangeSetConflictResult EndInvoke(IAsyncResult result);
}
public class System.Data.SQLite.SessionTableFilterCallback : MulticastDelegate {
    public SessionTableFilterCallback(object object, IntPtr method);
    public virtual bool Invoke(object clientData, string name);
    public virtual IAsyncResult BeginInvoke(object clientData, string name, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class System.Data.SQLite.SQLite3 : SQLiteBase {
    private static object syncRoot;
    private IntPtr dbName;
    internal static string PublicKey;
    internal static string DesignerVersion;
    private static string PoolHashFileNamePrefix;
    protected internal SQLiteConnectionHandle _sql;
    protected string _fileName;
    protected string _returnToFileName;
    protected int _maxPoolSize;
    protected SQLiteConnectionFlags _flags;
    private bool _setLogCallback;
    protected bool _usePool;
    private bool _returnToPool;
    protected int _poolVersion;
    private int _cancelCount;
    protected Dictionary`2<SQLiteFunctionAttribute, SQLiteFunction> _functions;
    protected string _shimExtensionFileName;
    protected Nullable`1<bool> _shimIsLoadNeeded;
    protected string _shimExtensionProcName;
    protected Dictionary`2<string, SQLiteModule> _modules;
    private bool _forceLogPrepare;
    private bool _forceLogRetry;
    private bool disposed;
    private static Nullable`1<bool> have_errstr;
    private static Nullable`1<bool> have_stmt_readonly;
    private static Nullable`1<bool> forceLogLifecycle;
    private static int MINIMUM_PAGE_SIZE;
    private static int MAXIMUM_PAGE_SIZE;
    private static int PAGE_SIZE_OFFSET;
    internal bool ForceLogPrepare { get; }
    internal bool ForceLogRetry { get; }
    internal string Version { get; }
    internal int VersionNumber { get; }
    internal static string ProviderDefineConstants { get; }
    internal static string DefineConstants { get; }
    internal static string SQLiteVersion { get; }
    internal static int SQLiteVersionNumber { get; }
    internal static string SQLiteSourceId { get; }
    internal static IList`1<string> SQLiteCompileOptionList { get; }
    internal static string SQLiteCompileOptions { get; }
    internal static string InteropVersion { get; }
    internal static string InteropSourceId { get; }
    internal static IList`1<string> InteropCompileOptionList { get; }
    internal static string InteropCompileOptions { get; }
    internal bool AutoCommit { get; }
    internal long LastInsertRowId { get; }
    internal int Changes { get; }
    internal long MemoryUsed { get; }
    internal static long StaticMemoryUsed { get; }
    internal long MemoryHighwater { get; }
    internal static long StaticMemoryHighwater { get; }
    internal bool OwnHandle { get; }
    internal IDictionary`2<SQLiteFunctionAttribute, SQLiteFunction> Functions { get; }
    internal SQLite3(SQLiteDateFormats fmt, DateTimeKind kind, string fmtString, IntPtr db, string fileName, bool ownHandle);
    private static SQLite3();
    private void InitializeForceLogPrepare();
    internal virtual bool get_ForceLogPrepare();
    private void InitializeForceLogRetry();
    internal virtual bool get_ForceLogRetry();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    private void DisposeModules();
    internal virtual bool Close(bool disposing);
    internal virtual Byte[] Serialize(string schema);
    internal virtual void Deserialize(string schema, Byte[] data, bool readOnly);
    protected string HandleToString();
    private int GetCancelCount();
    private bool ShouldThrowForCancel();
    private int ResetCancelCount();
    internal virtual void Cancel();
    internal virtual bool IsCanceled();
    internal virtual void BindFunction(SQLiteFunctionAttribute functionAttribute, SQLiteFunction function, SQLiteConnectionFlags flags);
    internal virtual bool UnbindFunction(SQLiteFunctionAttribute functionAttribute, SQLiteConnectionFlags flags);
    internal virtual string get_Version();
    internal virtual int get_VersionNumber();
    internal static string get_ProviderDefineConstants();
    internal static string get_DefineConstants();
    internal static string get_SQLiteVersion();
    internal static int get_SQLiteVersionNumber();
    internal static string get_SQLiteSourceId();
    internal static IList`1<string> get_SQLiteCompileOptionList();
    internal static string get_SQLiteCompileOptions();
    internal static string get_InteropVersion();
    internal static string get_InteropSourceId();
    internal static IList`1<string> get_InteropCompileOptionList();
    internal static string get_InteropCompileOptions();
    internal virtual bool get_AutoCommit();
    internal virtual bool IsReadOnly(string name);
    internal virtual long get_LastInsertRowId();
    internal virtual int get_Changes();
    internal virtual long get_MemoryUsed();
    internal static long get_StaticMemoryUsed();
    internal virtual long get_MemoryHighwater();
    internal static long get_StaticMemoryHighwater();
    internal virtual bool get_OwnHandle();
    internal virtual IDictionary`2<SQLiteFunctionAttribute, SQLiteFunction> get_Functions();
    internal virtual SQLiteErrorCode SetMemoryStatus(bool value);
    internal static SQLiteErrorCode StaticSetMemoryStatus(bool value);
    internal virtual SQLiteErrorCode ReleaseMemory();
    internal static SQLiteErrorCode StaticReleaseMemory(int nBytes, bool reset, bool compact, Int32& nFree, Boolean& resetOk, UInt32& nLargest);
    internal virtual SQLiteErrorCode Shutdown();
    internal static SQLiteErrorCode StaticShutdown(bool directories);
    internal virtual bool IsOpen();
    internal virtual string GetFileName(string dbName);
    protected static bool IsAllowedToUsePool(SQLiteOpenFlagsEnum openFlags);
    internal virtual void Open(string strFilename, string vfsName, SQLiteConnectionFlags connectionFlags, SQLiteOpenFlagsEnum openFlags, int maxPoolSize, bool usePool);
    internal virtual void ClearPool();
    internal virtual int CountPool();
    internal virtual void SetTimeout(int nTimeoutMS);
    internal virtual bool Step(SQLiteStatement stmt);
    internal static string GetErrorString(SQLiteErrorCode rc);
    internal virtual bool IsReadOnly(SQLiteStatement stmt);
    internal virtual SQLiteErrorCode Reset(SQLiteStatement stmt);
    internal virtual string GetLastError();
    internal virtual string GetLastError(string defValue);
    internal static bool ForceLogLifecycle();
    internal virtual SQLiteStatement Prepare(SQLiteConnection cnn, SQLiteCommand command, string strSql, SQLiteStatement previous, UInt32 timeoutMS, String& strRemain);
    protected static void LogBind(SQLiteStatementHandle handle, int index);
    protected static void LogBind(SQLiteStatementHandle handle, int index, ValueType value);
    private static string FormatDateTime(DateTime value);
    protected static void LogBind(SQLiteStatementHandle handle, int index, DateTime value);
    protected static void LogBind(SQLiteStatementHandle handle, int index, string value);
    private static string ToHexadecimalString(Byte[] array);
    protected static void LogBind(SQLiteStatementHandle handle, int index, Byte[] value);
    internal virtual void Bind_Double(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, double value);
    internal virtual void Bind_Int32(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, int value);
    internal virtual void Bind_UInt32(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, UInt32 value);
    internal virtual void Bind_Int64(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, long value);
    internal virtual void Bind_UInt64(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, ulong value);
    internal virtual void Bind_Boolean(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, bool value);
    internal virtual void Bind_Text(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, string value);
    internal virtual void Bind_DateTime(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, DateTime dt);
    internal virtual void Bind_Blob(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, Byte[] blobData);
    internal virtual void Bind_Null(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index);
    internal virtual int Bind_ParamCount(SQLiteStatement stmt, SQLiteConnectionFlags flags);
    internal virtual string Bind_ParamName(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index);
    internal virtual int Bind_ParamIndex(SQLiteStatement stmt, SQLiteConnectionFlags flags, string paramName);
    internal virtual int ColumnCount(SQLiteStatement stmt);
    internal virtual string ColumnName(SQLiteStatement stmt, int index);
    internal virtual TypeAffinity ColumnAffinity(SQLiteStatement stmt, int index);
    internal virtual string ColumnType(SQLiteStatement stmt, int index, TypeAffinity& nAffinity);
    internal virtual int ColumnIndex(SQLiteStatement stmt, string columnName);
    internal virtual string ColumnOriginalName(SQLiteStatement stmt, int index);
    internal virtual string ColumnDatabaseName(SQLiteStatement stmt, int index);
    internal virtual string ColumnTableName(SQLiteStatement stmt, int index);
    internal virtual bool DoesTableExist(string dataBase, string table);
    internal virtual bool ColumnMetaData(string dataBase, string table, string column, bool canThrow, String& dataType, String& collateSequence, Boolean& notNull, Boolean& primaryKey, Boolean& autoIncrement);
    internal virtual object GetObject(SQLiteStatement stmt, int index);
    internal virtual double GetDouble(SQLiteStatement stmt, int index);
    internal virtual bool GetBoolean(SQLiteStatement stmt, int index);
    internal virtual sbyte GetSByte(SQLiteStatement stmt, int index);
    internal virtual byte GetByte(SQLiteStatement stmt, int index);
    internal virtual short GetInt16(SQLiteStatement stmt, int index);
    internal virtual ushort GetUInt16(SQLiteStatement stmt, int index);
    internal virtual int GetInt32(SQLiteStatement stmt, int index);
    internal virtual UInt32 GetUInt32(SQLiteStatement stmt, int index);
    internal virtual long GetInt64(SQLiteStatement stmt, int index);
    internal virtual ulong GetUInt64(SQLiteStatement stmt, int index);
    internal virtual string GetText(SQLiteStatement stmt, int index);
    internal virtual DateTime GetDateTime(SQLiteStatement stmt, int index);
    internal virtual long GetBytes(SQLiteStatement stmt, int index, int nDataOffset, Byte[] bDest, int nStart, int nLength);
    internal virtual char GetChar(SQLiteStatement stmt, int index);
    internal virtual long GetChars(SQLiteStatement stmt, int index, int nDataOffset, Char[] bDest, int nStart, int nLength);
    internal virtual bool IsNull(SQLiteStatement stmt, int index);
    internal virtual int AggregateCount(IntPtr context);
    internal virtual SQLiteErrorCode CreateFunction(FunctionType type, string strFunction, int nArgs, SQLiteFunctionFlags flags, bool needCollSeq, SQLiteCallback func, SQLiteCallback funcstep, SQLiteFinalCallback funcfinal, SQLiteFinalCallback funcvalue, SQLiteCallback funcinverse, bool canThrow);
    internal virtual SQLiteErrorCode CreateCollation(string strCollation, SQLiteCollation func, SQLiteCollation func16, bool canThrow);
    internal virtual int ContextCollateCompare(CollationEncodingEnum enc, IntPtr context, string s1, string s2);
    internal virtual int ContextCollateCompare(CollationEncodingEnum enc, IntPtr context, Char[] c1, Char[] c2);
    internal virtual CollationSequence GetCollationSequence(SQLiteFunction func, IntPtr context);
    internal virtual long GetParamValueBytes(IntPtr p, int nDataOffset, Byte[] bDest, int nStart, int nLength);
    internal virtual double GetParamValueDouble(IntPtr ptr);
    internal virtual int GetParamValueInt32(IntPtr ptr);
    internal virtual long GetParamValueInt64(IntPtr ptr);
    internal virtual string GetParamValueText(IntPtr ptr);
    internal virtual TypeAffinity GetParamValueType(IntPtr ptr);
    internal virtual UInt32 GetParamValueSubType(IntPtr ptr);
    internal virtual TypeAffinity GetParamValueNumericType(IntPtr ptr);
    internal virtual int GetParamValueNoChange(IntPtr ptr);
    internal virtual int GetParamValueFromBind(IntPtr ptr);
    internal virtual void ReturnBlob(IntPtr context, Byte[] value);
    internal virtual void ReturnDouble(IntPtr context, double value);
    internal virtual void ReturnError(IntPtr context, string value);
    internal virtual void ReturnInt32(IntPtr context, int value);
    internal virtual void ReturnInt64(IntPtr context, long value);
    internal virtual void ReturnNull(IntPtr context);
    internal virtual void ReturnText(IntPtr context, string value);
    internal virtual void ReturnSubType(IntPtr context, UInt32 value);
    private string GetShimExtensionFileName(Boolean& isLoadNeeded);
    internal virtual void CreateModule(SQLiteModule module, SQLiteConnectionFlags flags);
    internal virtual void DisposeModule(SQLiteModule module, SQLiteConnectionFlags flags);
    internal virtual IntPtr AggregateContext(IntPtr context);
    internal virtual SQLiteErrorCode DeclareVirtualTable(SQLiteModule module, string strSql, String& error);
    internal virtual SQLiteErrorCode DeclareVirtualFunction(SQLiteModule module, int argumentCount, string name, String& error);
    private static string GetStatusDbOpsNames();
    private static string GetLimitOpsNames();
    private static string GetConfigDbOpsNames();
    internal virtual SQLiteErrorCode GetStatusParameter(SQLiteStatusOpsEnum option, bool reset, Int32& current, Int32& highwater);
    internal virtual int SetLimitOption(SQLiteLimitOpsEnum option, int value);
    internal virtual SQLiteErrorCode SetConfigurationOption(SQLiteConfigDbOpsEnum option, object value);
    internal virtual void SetLoadExtension(bool bOnOff);
    internal virtual void LoadExtension(string fileName, string procName);
    internal virtual void SetExtendedResultCodes(bool bOnOff);
    internal virtual SQLiteErrorCode ResultCode();
    internal virtual SQLiteErrorCode ExtendedResultCode();
    internal virtual void LogMessage(SQLiteErrorCode iErrCode, string zMessage);
    internal static void StaticLogMessage(SQLiteErrorCode iErrCode, string zMessage);
    private static int GetLegacyDatabasePageSize(SQLiteConnection connection, string fileName, Byte[] passwordBytes, Nullable`1<int> pageSize);
    private static void DecryptLegacyDatabasePage(SQLiteConnection connection, Byte[] passwordBytes, Byte[] inputBytes, Byte[]& outputBytes);
    private static void DecryptLegacyDatabasePage(SQLiteConnection connection, FileStream inputStream, FileStream outputStream, int pageSize, Byte[] passwordBytes, Byte[] inputBytes, Int64& totalReadCount, Int64& totalWriteCount);
    internal static string DecryptLegacyDatabase(string fileName, Byte[] passwordBytes, Nullable`1<int> pageSize, SQLiteProgressEventHandler progress);
    private static void ZeroPassword(Byte[] passwordBytes);
    private static Byte[] CalculatePoolHash(string fileName, Byte[] passwordBytes, bool asText);
    private static string CalculatePoolFileName(string fileName, Byte[] poolHash);
    private bool TryToUsePool(int maxPoolSize, string fileName, Byte[] passwordBytes, bool asText, String& returnToFileName);
    internal virtual void SetPassword(Byte[] passwordBytes, bool asText);
    internal virtual void ChangePassword(Byte[] newPasswordBytes, bool asText);
    internal virtual void SetBusyHook(SQLiteBusyCallback func);
    internal virtual void SetProgressHook(int nOps, SQLiteProgressCallback func);
    internal virtual void SetAuthorizerHook(SQLiteAuthorizerCallback func);
    internal virtual void SetUpdateHook(SQLiteUpdateCallback func);
    internal virtual void SetCommitHook(SQLiteCommitCallback func);
    internal virtual void SetTraceCallback(SQLiteTraceCallback func);
    internal virtual void SetTraceCallback2(SQLiteTraceFlags mask, SQLiteTraceCallback2 func);
    internal virtual void SetRollbackHook(SQLiteRollbackCallback func);
    internal virtual SQLiteErrorCode SetLogCallback(SQLiteLogCallback func);
    internal virtual SQLiteTransactionState GetTransactionState(string schema);
    private static void AppendError(StringBuilder builder, string message);
    private bool UnhookTraceCallback(StringBuilder builder);
    private bool UnhookNativeCallbacks(bool includeTrace, bool includeGlobal, bool canThrow);
    private bool FreeDbName(bool canThrow);
    internal virtual SQLiteBackup InitializeBackup(SQLiteConnection destCnn, string destName, string sourceName);
    internal virtual bool StepBackup(SQLiteBackup backup, int nPage, Boolean& retry);
    internal virtual int RemainingBackup(SQLiteBackup backup);
    internal virtual int PageCountBackup(SQLiteBackup backup);
    internal virtual void FinishBackup(SQLiteBackup backup);
    internal virtual bool IsInitialized();
    internal static bool StaticIsInitialized();
    internal virtual object GetValue(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, SQLiteType typ);
    internal virtual int GetCursorForTable(SQLiteStatement stmt, int db, int rootPage);
    internal virtual long GetRowIdForCursor(SQLiteStatement stmt, int cursor);
    internal virtual void GetIndexColumnExtendedInfo(string database, string index, string column, Int32& sortMode, Int32& onError, String& collationSequence);
    internal virtual SQLiteErrorCode FileControl(string zDbName, int op, IntPtr pArg);
}
internal class System.Data.SQLite.SQLite3_UTF16 : SQLite3 {
    private bool disposed;
    internal SQLite3_UTF16(SQLiteDateFormats fmt, DateTimeKind kind, string fmtString, IntPtr db, string fileName, bool ownHandle);
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    public virtual string ToString(IntPtr b, int nbytelen);
    public static string UTF16ToString(IntPtr b, int nbytelen);
    internal virtual void Open(string strFilename, string vfsName, SQLiteConnectionFlags connectionFlags, SQLiteOpenFlagsEnum openFlags, int maxPoolSize, bool usePool);
    internal virtual void Bind_DateTime(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, DateTime dt);
    internal virtual void Bind_Text(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, string value);
    internal virtual DateTime GetDateTime(SQLiteStatement stmt, int index);
    internal virtual string ColumnName(SQLiteStatement stmt, int index);
    internal virtual string ColumnType(SQLiteStatement stmt, int index, TypeAffinity& nAffinity);
    internal virtual string GetText(SQLiteStatement stmt, int index);
    internal virtual string ColumnOriginalName(SQLiteStatement stmt, int index);
    internal virtual string ColumnDatabaseName(SQLiteStatement stmt, int index);
    internal virtual string ColumnTableName(SQLiteStatement stmt, int index);
    internal virtual string GetParamValueText(IntPtr ptr);
    internal virtual void ReturnError(IntPtr context, string value);
    internal virtual void ReturnText(IntPtr context, string value);
}
public enum System.Data.SQLite.SQLiteAuthorizerActionCode : Enum {
    public int value__;
    public static SQLiteAuthorizerActionCode None;
    public static SQLiteAuthorizerActionCode Copy;
    public static SQLiteAuthorizerActionCode CreateIndex;
    public static SQLiteAuthorizerActionCode CreateTable;
    public static SQLiteAuthorizerActionCode CreateTempIndex;
    public static SQLiteAuthorizerActionCode CreateTempTable;
    public static SQLiteAuthorizerActionCode CreateTempTrigger;
    public static SQLiteAuthorizerActionCode CreateTempView;
    public static SQLiteAuthorizerActionCode CreateTrigger;
    public static SQLiteAuthorizerActionCode CreateView;
    public static SQLiteAuthorizerActionCode Delete;
    public static SQLiteAuthorizerActionCode DropIndex;
    public static SQLiteAuthorizerActionCode DropTable;
    public static SQLiteAuthorizerActionCode DropTempIndex;
    public static SQLiteAuthorizerActionCode DropTempTable;
    public static SQLiteAuthorizerActionCode DropTempTrigger;
    public static SQLiteAuthorizerActionCode DropTempView;
    public static SQLiteAuthorizerActionCode DropTrigger;
    public static SQLiteAuthorizerActionCode DropView;
    public static SQLiteAuthorizerActionCode Insert;
    public static SQLiteAuthorizerActionCode Pragma;
    public static SQLiteAuthorizerActionCode Read;
    public static SQLiteAuthorizerActionCode Select;
    public static SQLiteAuthorizerActionCode Transaction;
    public static SQLiteAuthorizerActionCode Update;
    public static SQLiteAuthorizerActionCode Attach;
    public static SQLiteAuthorizerActionCode Detach;
    public static SQLiteAuthorizerActionCode AlterTable;
    public static SQLiteAuthorizerActionCode Reindex;
    public static SQLiteAuthorizerActionCode Analyze;
    public static SQLiteAuthorizerActionCode CreateVtable;
    public static SQLiteAuthorizerActionCode DropVtable;
    public static SQLiteAuthorizerActionCode Function;
    public static SQLiteAuthorizerActionCode Savepoint;
    public static SQLiteAuthorizerActionCode Recursive;
}
[UnmanagedFunctionPointerAttribute("2")]
internal class System.Data.SQLite.SQLiteAuthorizerCallback : MulticastDelegate {
    public SQLiteAuthorizerCallback(object object, IntPtr method);
    public virtual SQLiteAuthorizerReturnCode Invoke(IntPtr pUserData, SQLiteAuthorizerActionCode actionCode, IntPtr pArgument1, IntPtr pArgument2, IntPtr pDatabase, IntPtr pAuthContext);
    public virtual IAsyncResult BeginInvoke(IntPtr pUserData, SQLiteAuthorizerActionCode actionCode, IntPtr pArgument1, IntPtr pArgument2, IntPtr pDatabase, IntPtr pAuthContext, AsyncCallback callback, object object);
    public virtual SQLiteAuthorizerReturnCode EndInvoke(IAsyncResult result);
}
public class System.Data.SQLite.SQLiteAuthorizerEventHandler : MulticastDelegate {
    public SQLiteAuthorizerEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AuthorizerEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AuthorizerEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Data.SQLite.SQLiteAuthorizerReturnCode : Enum {
    public int value__;
    public static SQLiteAuthorizerReturnCode Ok;
    public static SQLiteAuthorizerReturnCode Deny;
    public static SQLiteAuthorizerReturnCode Ignore;
}
internal class System.Data.SQLite.SQLiteBackup : object {
    internal SQLiteBase _sql;
    internal SQLiteBackupHandle _sqlite_backup;
    internal IntPtr _destDb;
    internal Byte[] _zDestName;
    internal IntPtr _sourceDb;
    internal Byte[] _zSourceName;
    internal SQLiteErrorCode _stepResult;
    private bool disposed;
    internal SQLiteBackup(SQLiteBase sqlbase, SQLiteBackupHandle backup, IntPtr destDb, Byte[] zDestName, IntPtr sourceDb, Byte[] zSourceName);
    public sealed virtual void Dispose();
    private void CheckDisposed();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class System.Data.SQLite.SQLiteBackupCallback : MulticastDelegate {
    public SQLiteBackupCallback(object object, IntPtr method);
    public virtual bool Invoke(SQLiteConnection source, string sourceName, SQLiteConnection destination, string destinationName, int pages, int remainingPages, int totalPages, bool retry);
    public virtual IAsyncResult BeginInvoke(SQLiteConnection source, string sourceName, SQLiteConnection destination, string destinationName, int pages, int remainingPages, int totalPages, bool retry, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class System.Data.SQLite.SQLiteBackupHandle : CriticalHandle {
    private SQLiteConnectionHandle cnn;
    public bool IsInvalid { get; }
    internal SQLiteBackupHandle(SQLiteConnectionHandle cnn, IntPtr backup);
    public static IntPtr op_Implicit(SQLiteBackupHandle backup);
    protected virtual bool ReleaseHandle();
    public int WasReleasedOk();
    public virtual bool get_IsInvalid();
}
internal abstract class System.Data.SQLite.SQLiteBase : SQLiteConvert {
    internal static int COR_E_EXCEPTION;
    private static long _createCount;
    private static long _openCount;
    private static long _closeCount;
    private static long _disposeCount;
    private static long _finalizeCount;
    private bool disposed;
    protected bool wasDisposed;
    private static String[] _errorMessages;
    internal string Version { get; }
    internal int VersionNumber { get; }
    internal long LastInsertRowId { get; }
    internal int Changes { get; }
    internal long MemoryUsed { get; }
    internal long MemoryHighwater { get; }
    internal bool OwnHandle { get; }
    internal bool ForceLogPrepare { get; }
    internal bool ForceLogRetry { get; }
    internal IDictionary`2<SQLiteFunctionAttribute, SQLiteFunction> Functions { get; }
    internal bool AutoCommit { get; }
    internal static long CreateCount { get; }
    internal static long OpenCount { get; }
    internal static long CloseCount { get; }
    internal static long DisposeCount { get; }
    internal static long FinalizeCount { get; }
    internal SQLiteBase(SQLiteDateFormats fmt, DateTimeKind kind, string fmtString);
    private static SQLiteBase();
    internal abstract virtual string get_Version();
    internal abstract virtual int get_VersionNumber();
    internal abstract virtual bool IsReadOnly(string name);
    internal abstract virtual long get_LastInsertRowId();
    internal abstract virtual int get_Changes();
    internal abstract virtual long get_MemoryUsed();
    internal abstract virtual long get_MemoryHighwater();
    internal abstract virtual bool get_OwnHandle();
    internal abstract virtual bool get_ForceLogPrepare();
    internal abstract virtual bool get_ForceLogRetry();
    internal abstract virtual IDictionary`2<SQLiteFunctionAttribute, SQLiteFunction> get_Functions();
    internal abstract virtual SQLiteErrorCode SetMemoryStatus(bool value);
    internal abstract virtual SQLiteErrorCode ReleaseMemory();
    internal abstract virtual SQLiteErrorCode Shutdown();
    internal abstract virtual bool IsOpen();
    internal abstract virtual string GetFileName(string dbName);
    internal abstract virtual void Open(string strFilename, string vfsName, SQLiteConnectionFlags connectionFlags, SQLiteOpenFlagsEnum openFlags, int maxPoolSize, bool usePool);
    internal abstract virtual bool Close(bool disposing);
    internal abstract virtual Byte[] Serialize(string schema);
    internal abstract virtual void Deserialize(string schema, Byte[] data, bool readOnly);
    internal abstract virtual void SetTimeout(int nTimeoutMS);
    internal abstract virtual string GetLastError();
    internal abstract virtual string GetLastError(string defValue);
    internal abstract virtual void ClearPool();
    internal abstract virtual int CountPool();
    internal abstract virtual SQLiteStatement Prepare(SQLiteConnection cnn, SQLiteCommand command, string strSql, SQLiteStatement previous, UInt32 timeoutMS, String& strRemain);
    internal abstract virtual bool Step(SQLiteStatement stmt);
    internal abstract virtual bool IsReadOnly(SQLiteStatement stmt);
    internal abstract virtual SQLiteErrorCode Reset(SQLiteStatement stmt);
    internal abstract virtual void Cancel();
    internal abstract virtual bool IsCanceled();
    internal abstract virtual void BindFunction(SQLiteFunctionAttribute functionAttribute, SQLiteFunction function, SQLiteConnectionFlags flags);
    internal abstract virtual bool UnbindFunction(SQLiteFunctionAttribute functionAttribute, SQLiteConnectionFlags flags);
    internal abstract virtual void Bind_Double(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, double value);
    internal abstract virtual void Bind_Int32(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, int value);
    internal abstract virtual void Bind_UInt32(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, UInt32 value);
    internal abstract virtual void Bind_Int64(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, long value);
    internal abstract virtual void Bind_UInt64(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, ulong value);
    internal abstract virtual void Bind_Boolean(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, bool value);
    internal abstract virtual void Bind_Text(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, string value);
    internal abstract virtual void Bind_Blob(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, Byte[] blobData);
    internal abstract virtual void Bind_DateTime(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, DateTime dt);
    internal abstract virtual void Bind_Null(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index);
    internal abstract virtual int Bind_ParamCount(SQLiteStatement stmt, SQLiteConnectionFlags flags);
    internal abstract virtual string Bind_ParamName(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index);
    internal abstract virtual int Bind_ParamIndex(SQLiteStatement stmt, SQLiteConnectionFlags flags, string paramName);
    internal abstract virtual int ColumnCount(SQLiteStatement stmt);
    internal abstract virtual string ColumnName(SQLiteStatement stmt, int index);
    internal abstract virtual TypeAffinity ColumnAffinity(SQLiteStatement stmt, int index);
    internal abstract virtual string ColumnType(SQLiteStatement stmt, int index, TypeAffinity& nAffinity);
    internal abstract virtual int ColumnIndex(SQLiteStatement stmt, string columnName);
    internal abstract virtual string ColumnOriginalName(SQLiteStatement stmt, int index);
    internal abstract virtual string ColumnDatabaseName(SQLiteStatement stmt, int index);
    internal abstract virtual string ColumnTableName(SQLiteStatement stmt, int index);
    internal abstract virtual bool DoesTableExist(string dataBase, string table);
    internal abstract virtual bool ColumnMetaData(string dataBase, string table, string column, bool canThrow, String& dataType, String& collateSequence, Boolean& notNull, Boolean& primaryKey, Boolean& autoIncrement);
    internal abstract virtual void GetIndexColumnExtendedInfo(string database, string index, string column, Int32& sortMode, Int32& onError, String& collationSequence);
    internal abstract virtual object GetObject(SQLiteStatement stmt, int index);
    internal abstract virtual double GetDouble(SQLiteStatement stmt, int index);
    internal abstract virtual bool GetBoolean(SQLiteStatement stmt, int index);
    internal abstract virtual sbyte GetSByte(SQLiteStatement stmt, int index);
    internal abstract virtual byte GetByte(SQLiteStatement stmt, int index);
    internal abstract virtual short GetInt16(SQLiteStatement stmt, int index);
    internal abstract virtual ushort GetUInt16(SQLiteStatement stmt, int index);
    internal abstract virtual int GetInt32(SQLiteStatement stmt, int index);
    internal abstract virtual UInt32 GetUInt32(SQLiteStatement stmt, int index);
    internal abstract virtual long GetInt64(SQLiteStatement stmt, int index);
    internal abstract virtual ulong GetUInt64(SQLiteStatement stmt, int index);
    internal abstract virtual string GetText(SQLiteStatement stmt, int index);
    internal abstract virtual long GetBytes(SQLiteStatement stmt, int index, int nDataoffset, Byte[] bDest, int nStart, int nLength);
    internal abstract virtual char GetChar(SQLiteStatement stmt, int index);
    internal abstract virtual long GetChars(SQLiteStatement stmt, int index, int nDataoffset, Char[] bDest, int nStart, int nLength);
    internal abstract virtual DateTime GetDateTime(SQLiteStatement stmt, int index);
    internal abstract virtual bool IsNull(SQLiteStatement stmt, int index);
    internal abstract virtual SQLiteErrorCode CreateCollation(string strCollation, SQLiteCollation func, SQLiteCollation func16, bool throw);
    internal abstract virtual SQLiteErrorCode CreateFunction(FunctionType type, string strFunction, int nArgs, SQLiteFunctionFlags flags, bool needCollSeq, SQLiteCallback func, SQLiteCallback funcstep, SQLiteFinalCallback funcfinal, SQLiteFinalCallback funcvalue, SQLiteCallback funcinverse, bool throw);
    internal abstract virtual CollationSequence GetCollationSequence(SQLiteFunction func, IntPtr context);
    internal abstract virtual int ContextCollateCompare(CollationEncodingEnum enc, IntPtr context, string s1, string s2);
    internal abstract virtual int ContextCollateCompare(CollationEncodingEnum enc, IntPtr context, Char[] c1, Char[] c2);
    internal abstract virtual int AggregateCount(IntPtr context);
    internal abstract virtual IntPtr AggregateContext(IntPtr context);
    internal abstract virtual long GetParamValueBytes(IntPtr ptr, int nDataOffset, Byte[] bDest, int nStart, int nLength);
    internal abstract virtual double GetParamValueDouble(IntPtr ptr);
    internal abstract virtual int GetParamValueInt32(IntPtr ptr);
    internal abstract virtual long GetParamValueInt64(IntPtr ptr);
    internal abstract virtual string GetParamValueText(IntPtr ptr);
    internal abstract virtual TypeAffinity GetParamValueType(IntPtr ptr);
    internal abstract virtual UInt32 GetParamValueSubType(IntPtr ptr);
    internal abstract virtual TypeAffinity GetParamValueNumericType(IntPtr ptr);
    internal abstract virtual int GetParamValueNoChange(IntPtr ptr);
    internal abstract virtual int GetParamValueFromBind(IntPtr ptr);
    internal abstract virtual void ReturnBlob(IntPtr context, Byte[] value);
    internal abstract virtual void ReturnDouble(IntPtr context, double value);
    internal abstract virtual void ReturnError(IntPtr context, string value);
    internal abstract virtual void ReturnInt32(IntPtr context, int value);
    internal abstract virtual void ReturnInt64(IntPtr context, long value);
    internal abstract virtual void ReturnNull(IntPtr context);
    internal abstract virtual void ReturnText(IntPtr context, string value);
    internal abstract virtual void ReturnSubType(IntPtr context, UInt32 value);
    internal abstract virtual void CreateModule(SQLiteModule module, SQLiteConnectionFlags flags);
    internal abstract virtual void DisposeModule(SQLiteModule module, SQLiteConnectionFlags flags);
    internal abstract virtual SQLiteErrorCode DeclareVirtualTable(SQLiteModule module, string strSql, String& error);
    internal abstract virtual SQLiteErrorCode DeclareVirtualFunction(SQLiteModule module, int argumentCount, string name, String& error);
    internal abstract virtual SQLiteErrorCode GetStatusParameter(SQLiteStatusOpsEnum option, bool reset, Int32& current, Int32& highwater);
    internal abstract virtual int SetLimitOption(SQLiteLimitOpsEnum option, int value);
    internal abstract virtual SQLiteErrorCode SetConfigurationOption(SQLiteConfigDbOpsEnum option, object value);
    internal abstract virtual void SetLoadExtension(bool bOnOff);
    internal abstract virtual void LoadExtension(string fileName, string procName);
    internal abstract virtual void SetExtendedResultCodes(bool bOnOff);
    internal abstract virtual SQLiteErrorCode ResultCode();
    internal abstract virtual SQLiteErrorCode ExtendedResultCode();
    internal abstract virtual void LogMessage(SQLiteErrorCode iErrCode, string zMessage);
    internal abstract virtual void SetPassword(Byte[] passwordBytes, bool asText);
    internal abstract virtual void ChangePassword(Byte[] newPasswordBytes, bool asText);
    internal abstract virtual void SetBusyHook(SQLiteBusyCallback func);
    internal abstract virtual void SetProgressHook(int nOps, SQLiteProgressCallback func);
    internal abstract virtual void SetAuthorizerHook(SQLiteAuthorizerCallback func);
    internal abstract virtual void SetUpdateHook(SQLiteUpdateCallback func);
    internal abstract virtual void SetCommitHook(SQLiteCommitCallback func);
    internal abstract virtual void SetTraceCallback(SQLiteTraceCallback func);
    internal abstract virtual void SetTraceCallback2(SQLiteTraceFlags mask, SQLiteTraceCallback2 func);
    internal abstract virtual void SetRollbackHook(SQLiteRollbackCallback func);
    internal abstract virtual SQLiteErrorCode SetLogCallback(SQLiteLogCallback func);
    internal abstract virtual SQLiteTransactionState GetTransactionState(string schema);
    internal abstract virtual bool IsInitialized();
    internal abstract virtual int GetCursorForTable(SQLiteStatement stmt, int database, int rootPage);
    internal abstract virtual long GetRowIdForCursor(SQLiteStatement stmt, int cursor);
    internal abstract virtual object GetValue(SQLiteStatement stmt, SQLiteConnectionFlags flags, int index, SQLiteType typ);
    internal abstract virtual bool get_AutoCommit();
    internal abstract virtual SQLiteErrorCode FileControl(string zDbName, int op, IntPtr pArg);
    internal abstract virtual SQLiteBackup InitializeBackup(SQLiteConnection destCnn, string destName, string sourceName);
    internal abstract virtual bool StepBackup(SQLiteBackup backup, int nPage, Boolean& retry);
    internal abstract virtual int RemainingBackup(SQLiteBackup backup);
    internal abstract virtual int PageCountBackup(SQLiteBackup backup);
    internal abstract virtual void FinishBackup(SQLiteBackup backup);
    protected static long BumpCreateCount();
    protected static long BumpOpenCount();
    protected static long BumpCloseCount();
    protected static long BumpDisposeCount();
    protected static long BumpFinalizeCount();
    internal static long get_CreateCount();
    internal static long get_OpenCount();
    internal static long get_CloseCount();
    internal static long get_DisposeCount();
    internal static long get_FinalizeCount();
    public sealed virtual void Dispose();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    protected static string FallbackGetErrorString(SQLiteErrorCode rc);
    internal static string GetLastError(SQLiteConnectionHandle hdl, IntPtr db);
    internal static void FinishBackup(SQLiteConnectionHandle hdl, IntPtr backup);
    internal static void CloseBlob(SQLiteConnectionHandle hdl, IntPtr blob);
    internal static void FinalizeStatement(SQLiteConnectionHandle hdl, IntPtr stmt);
    internal static void CloseConnection(SQLiteConnectionHandle hdl, IntPtr db);
    internal static void CloseConnectionV2(SQLiteConnectionHandle hdl, IntPtr db);
    internal static bool ResetConnection(SQLiteConnectionHandle hdl, IntPtr db, bool canThrow);
    internal static bool IsAutocommit(SQLiteConnectionHandle hdl, IntPtr db);
}
public class System.Data.SQLite.SQLiteBindValueCallback : MulticastDelegate {
    public SQLiteBindValueCallback(object object, IntPtr method);
    public virtual void Invoke(SQLiteConvert convert, SQLiteCommand command, SQLiteConnectionFlags flags, SQLiteParameter parameter, string typeName, int index, object userData, Boolean& complete);
    public virtual IAsyncResult BeginInvoke(SQLiteConvert convert, SQLiteCommand command, SQLiteConnectionFlags flags, SQLiteParameter parameter, string typeName, int index, object userData, Boolean& complete, AsyncCallback callback, object object);
    public virtual void EndInvoke(Boolean& complete, IAsyncResult result);
}
public class System.Data.SQLite.SQLiteBlob : object {
    internal SQLiteBase _sql;
    internal SQLiteBlobHandle _sqlite_blob;
    private bool disposed;
    private SQLiteBlob(SQLiteBase sqlbase, SQLiteBlobHandle blob);
    public static SQLiteBlob Create(SQLiteDataReader dataReader, int i, bool readOnly);
    public static SQLiteBlob Create(SQLiteConnection connection, string databaseName, string tableName, string columnName, long rowId, bool readOnly);
    private void CheckOpen();
    private void VerifyParameters(Byte[] buffer, int count, int offset);
    public void Reopen(long rowId);
    public int GetCount();
    public void Read(Byte[] buffer, int count, int offset);
    public void Write(Byte[] buffer, int count, int offset);
    public void Close();
    public sealed virtual void Dispose();
    private void CheckDisposed();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class System.Data.SQLite.SQLiteBlobHandle : CriticalHandle {
    private SQLiteConnectionHandle cnn;
    public bool IsInvalid { get; }
    internal SQLiteBlobHandle(SQLiteConnectionHandle cnn, IntPtr blob);
    public static IntPtr op_Implicit(SQLiteBlobHandle blob);
    protected virtual bool ReleaseHandle();
    public int WasReleasedOk();
    public virtual bool get_IsInvalid();
}
[UnmanagedFunctionPointerAttribute("2")]
internal class System.Data.SQLite.SQLiteBusyCallback : MulticastDelegate {
    public SQLiteBusyCallback(object object, IntPtr method);
    public virtual SQLiteBusyReturnCode Invoke(IntPtr pUserData, int count);
    public virtual IAsyncResult BeginInvoke(IntPtr pUserData, int count, AsyncCallback callback, object object);
    public virtual SQLiteBusyReturnCode EndInvoke(IAsyncResult result);
}
public class System.Data.SQLite.SQLiteBusyEventHandler : MulticastDelegate {
    public SQLiteBusyEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BusyEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BusyEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Data.SQLite.SQLiteBusyReturnCode : Enum {
    public int value__;
    public static SQLiteBusyReturnCode Stop;
    public static SQLiteBusyReturnCode Retry;
}
internal static class System.Data.SQLite.SQLiteBytes : object {
    public static Byte[] FromIntPtr(IntPtr pValue, int length);
    public static IntPtr ToIntPtr(Byte[] value);
    public static IntPtr ToIntPtr(Byte[] value, Int32& length);
}
[UnmanagedFunctionPointerAttribute("2")]
public class System.Data.SQLite.SQLiteCallback : MulticastDelegate {
    public SQLiteCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr context, int argc, IntPtr argv);
    public virtual IAsyncResult BeginInvoke(IntPtr context, int argc, IntPtr argv, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.SQLite.SQLiteChangeGroup : object {
    private SQLiteSessionStreamManager streamManager;
    private SQLiteConnectionFlags flags;
    private IntPtr changeGroup;
    private bool disposed;
    public SQLiteChangeGroup(SQLiteConnectionFlags flags);
    private void CheckHandle();
    private void InitializeHandle();
    private void InitializeStreamManager();
    private SQLiteStreamAdapter GetStreamAdapter(Stream stream);
    public sealed virtual void AddChangeSet(Byte[] rawData);
    public sealed virtual void AddChangeSet(Stream stream);
    public sealed virtual void CreateChangeSet(Byte[]& rawData);
    public sealed virtual void CreateChangeSet(Stream stream);
    public sealed virtual void Dispose();
    private void CheckDisposed();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class System.Data.SQLite.SQLiteChangeSetBase : SQLiteConnectionLock {
    private bool disposed;
    internal SQLiteChangeSetBase(SQLiteConnectionHandle handle, SQLiteConnectionFlags flags);
    private ISQLiteChangeSetMetadataItem CreateMetadataItem(IntPtr iterator);
    protected xSessionFilter GetDelegate(SessionTableFilterCallback tableFilterCallback, object clientData);
    protected xSessionConflict GetDelegate(SessionConflictCallback conflictCallback, object clientData);
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
}
public enum System.Data.SQLite.SQLiteChangeSetConflictResult : Enum {
    public int value__;
    public static SQLiteChangeSetConflictResult Omit;
    public static SQLiteChangeSetConflictResult Replace;
    public static SQLiteChangeSetConflictResult Abort;
}
public enum System.Data.SQLite.SQLiteChangeSetConflictType : Enum {
    public int value__;
    public static SQLiteChangeSetConflictType Data;
    public static SQLiteChangeSetConflictType NotFound;
    public static SQLiteChangeSetConflictType Conflict;
    public static SQLiteChangeSetConflictType Constraint;
    public static SQLiteChangeSetConflictType ForeignKey;
}
internal abstract class System.Data.SQLite.SQLiteChangeSetEnumerator : object {
    private SQLiteChangeSetIterator iterator;
    private bool disposed;
    public ISQLiteChangeSetMetadataItem Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public SQLiteChangeSetEnumerator(SQLiteChangeSetIterator iterator);
    private void CheckIterator();
    private void SetIterator(SQLiteChangeSetIterator iterator);
    private void CloseIterator();
    protected void ResetIterator(SQLiteChangeSetIterator iterator);
    public sealed virtual ISQLiteChangeSetMetadataItem get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public virtual void Reset();
    public sealed virtual void Dispose();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class System.Data.SQLite.SQLiteChangeSetIterator : object {
    private IntPtr iterator;
    private bool ownHandle;
    private bool disposed;
    protected SQLiteChangeSetIterator(IntPtr iterator, bool ownHandle);
    internal void CheckHandle();
    internal IntPtr GetIntPtr();
    public bool Next();
    public static SQLiteChangeSetIterator Attach(IntPtr iterator);
    public sealed virtual void Dispose();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class System.Data.SQLite.SQLiteChangeSetMetadataItem : object {
    private SQLiteChangeSetIterator iterator;
    private string tableName;
    private Nullable`1<int> numberOfColumns;
    private Nullable`1<SQLiteAuthorizerActionCode> operationCode;
    private Nullable`1<bool> indirect;
    private Boolean[] primaryKeyColumns;
    private Nullable`1<int> numberOfForeignKeyConflicts;
    private bool disposed;
    public string TableName { get; }
    public int NumberOfColumns { get; }
    public SQLiteAuthorizerActionCode OperationCode { get; }
    public bool Indirect { get; }
    public Boolean[] PrimaryKeyColumns { get; }
    public int NumberOfForeignKeyConflicts { get; }
    public SQLiteChangeSetMetadataItem(SQLiteChangeSetIterator iterator);
    private void CheckIterator();
    private void PopulateOperationMetadata();
    private void PopulatePrimaryKeyColumns();
    private void PopulateNumberOfForeignKeyConflicts();
    public sealed virtual string get_TableName();
    public sealed virtual int get_NumberOfColumns();
    public sealed virtual SQLiteAuthorizerActionCode get_OperationCode();
    public sealed virtual bool get_Indirect();
    public sealed virtual Boolean[] get_PrimaryKeyColumns();
    public sealed virtual int get_NumberOfForeignKeyConflicts();
    public sealed virtual SQLiteValue GetOldValue(int columnIndex);
    public sealed virtual SQLiteValue GetNewValue(int columnIndex);
    public sealed virtual SQLiteValue GetConflictValue(int columnIndex);
    public sealed virtual void Dispose();
    private void CheckDisposed();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public enum System.Data.SQLite.SQLiteChangeSetStartFlags : Enum {
    public int value__;
    public static SQLiteChangeSetStartFlags None;
    public static SQLiteChangeSetStartFlags Invert;
}
[UnmanagedFunctionPointerAttribute("2")]
internal class System.Data.SQLite.SQLiteCollation : MulticastDelegate {
    public SQLiteCollation(object object, IntPtr method);
    public virtual int Invoke(IntPtr puser, int len1, IntPtr pv1, int len2, IntPtr pv2);
    public virtual IAsyncResult BeginInvoke(IntPtr puser, int len1, IntPtr pv1, int len2, IntPtr pv2, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
[DesignerAttribute("SQLite.Designer.SQLiteCommandDesigner, SQLite.Designer, Version=1.0.119.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139")]
[ToolboxItemAttribute("True")]
public class System.Data.SQLite.SQLiteCommand : DbCommand {
    public static Nullable`1<CommandBehavior> GlobalCommandBehaviors;
    internal static string DefaultConnectionString;
    private string _commandText;
    private SQLiteConnection _cnn;
    private int _version;
    private WeakReference _activeReader;
    internal int _commandTimeout;
    internal int _maximumSleepTime;
    private bool _designTimeVisible;
    private UpdateRowSource _updateRowSource;
    private SQLiteParameterCollection _parameterCollection;
    internal List`1<SQLiteStatement> _statementList;
    internal string _remainingText;
    private SQLiteTransaction _transaction;
    private bool disposed;
    public static CommandBehavior SkipExtraReads;
    public static CommandBehavior ForceExtraReads;
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
[EditorAttribute("Microsoft.VSDesigner.Data.SQL.Design.SqlCommandTextEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string CommandText { get; public set; }
    [DefaultValueAttribute("30")]
public int CommandTimeout { get; public set; }
    [DefaultValueAttribute("150")]
public int MaximumSleepTime { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CommandType CommandType { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SQLiteConnection Connection { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    [DesignerSerializationVisibilityAttribute("2")]
public SQLiteParameterCollection Parameters { get; }
    protected DbParameterCollection DbParameterCollection { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SQLiteTransaction Transaction { get; public set; }
    protected DbTransaction DbTransaction { get; protected set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    [DesignOnlyAttribute("True")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
[EditorBrowsableAttribute("1")]
public bool DesignTimeVisible { get; public set; }
    private static SQLiteCommand();
    public SQLiteCommand(string commandText);
    public SQLiteCommand(string commandText, SQLiteConnection connection);
    public SQLiteCommand(SQLiteConnection connection);
    private SQLiteCommand(SQLiteCommand source);
    public SQLiteCommand(string commandText, SQLiteConnection connection, SQLiteTransaction transaction);
    [ConditionalAttribute("CHECK_STATE")]
internal static void Check(SQLiteCommand command);
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    internal static SQLiteConnectionFlags GetFlags(SQLiteCommand command);
    internal static int GetPrepareRetries(SQLiteCommand command);
    internal static int GetStepRetries(SQLiteCommand command);
    internal static int GetMaximumSleepTime(SQLiteCommand command);
    private void MaybeAddGlobalCommandBehaviors(CommandBehavior& behavior);
    private static void InitializeGlobalCommandBehaviors();
    private void DisposeStatements();
    internal static void DisposeStatements(bool force, List`1& statements);
    private void ClearDataReader();
    internal void ClearCommands();
    internal SQLiteStatement BuildNextCommand();
    internal SQLiteStatement GetStatement(int index);
    public virtual void Cancel();
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public int get_MaximumSleepTime();
    public void set_MaximumSleepTime(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    protected virtual DbParameter CreateDbParameter();
    public SQLiteParameter CreateParameter();
    public SQLiteConnection get_Connection();
    public void set_Connection(SQLiteConnection value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    public SQLiteParameterCollection get_Parameters();
    protected virtual DbParameterCollection get_DbParameterCollection();
    public SQLiteTransaction get_Transaction();
    public void set_Transaction(SQLiteTransaction value);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public void VerifyOnly();
    private void InitializeForReader();
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public static object Execute(string commandText, SQLiteExecuteType executeType, string connectionString, Object[] args);
    public static object Execute(string commandText, SQLiteExecuteType executeType, CommandBehavior commandBehavior, string connectionString, Object[] args);
    public static object Execute(string commandText, SQLiteExecuteType executeType, CommandBehavior commandBehavior, SQLiteConnection connection, Object[] args);
    public SQLiteDataReader ExecuteReader(CommandBehavior behavior);
    public SQLiteDataReader ExecuteReader();
    internal void ResetDataReader();
    public virtual int ExecuteNonQuery();
    public int ExecuteNonQuery(CommandBehavior behavior);
    private bool ShouldSkipExtraReads(CommandBehavior behavior);
    private bool ShouldForceExtraReads(CommandBehavior behavior);
    public static Nullable`1<CommandBehavior> CombineBehaviors(Nullable`1<CommandBehavior> behavior, string flags, String& error);
    public int MaybeReadRemaining(SQLiteDataReader reader, CommandBehavior behavior);
    private int PrivateMaybeReadRemaining(SQLiteDataReader reader, CommandBehavior behavior);
    private bool MatchTransactionState(SQLiteTransactionState transactionState);
    public virtual object ExecuteScalar();
    public object ExecuteScalar(CommandBehavior behavior);
    public void Reset();
    public void Reset(bool clearBindings, bool ignoreErrors);
    public virtual void Prepare();
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public sealed virtual object Clone();
    public string GetDiagnostics();
}
public class System.Data.SQLite.SQLiteCommandBuilder : DbCommandBuilder {
    private bool disposed;
    public SQLiteDataAdapter DataAdapter { get; public set; }
    [BrowsableAttribute("False")]
public CatalogLocation CatalogLocation { get; public set; }
    [BrowsableAttribute("False")]
public string CatalogSeparator { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("[")]
public string QuotePrefix { get; public set; }
    [BrowsableAttribute("False")]
public string QuoteSuffix { get; public set; }
    [BrowsableAttribute("False")]
public string SchemaSeparator { get; public set; }
    public SQLiteCommandBuilder(SQLiteDataAdapter adp);
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow row, StatementType statementType, bool whereClause);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    private void RowUpdatingEventHandler(object sender, RowUpdatingEventArgs e);
    public SQLiteDataAdapter get_DataAdapter();
    public void set_DataAdapter(SQLiteDataAdapter value);
    public SQLiteCommand GetDeleteCommand();
    public SQLiteCommand GetDeleteCommand(bool useColumnsForParameterNames);
    public SQLiteCommand GetUpdateCommand();
    public SQLiteCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public SQLiteCommand GetInsertCommand();
    public SQLiteCommand GetInsertCommand(bool useColumnsForParameterNames);
    public virtual CatalogLocation get_CatalogLocation();
    public virtual void set_CatalogLocation(CatalogLocation value);
    public virtual string get_CatalogSeparator();
    public virtual void set_CatalogSeparator(string value);
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
    public virtual string get_SchemaSeparator();
    public virtual void set_SchemaSeparator(string value);
    protected virtual DataTable GetSchemaTable(DbCommand sourceCommand);
    private bool HasSchemaPrimaryKey(DataTable schema);
    private void ResetIsUniqueSchemaColumn(DataTable schema);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class System.Data.SQLite.SQLiteCommitCallback : MulticastDelegate {
    public SQLiteCommitCallback(object object, IntPtr method);
    public virtual int Invoke(IntPtr puser);
    public virtual IAsyncResult BeginInvoke(IntPtr puser, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class System.Data.SQLite.SQLiteCommitHandler : MulticastDelegate {
    public SQLiteCommitHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CommitEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CommitEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.SQLite.SQLiteCompareDelegate : MulticastDelegate {
    public SQLiteCompareDelegate(object object, IntPtr method);
    public virtual int Invoke(string param0, string param1, string param2);
    public virtual IAsyncResult BeginInvoke(string param0, string param1, string param2, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public enum System.Data.SQLite.SQLiteConfigDbOpsEnum : Enum {
    public int value__;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_NONE;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_MAINDBNAME;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_LOOKASIDE;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_ENABLE_FKEY;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_ENABLE_TRIGGER;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_ENABLE_QPSG;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_TRIGGER_EQP;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_RESET_DATABASE;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_DEFENSIVE;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_WRITABLE_SCHEMA;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_LEGACY_ALTER_TABLE;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_DQS_DML;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_DQS_DDL;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_ENABLE_VIEW;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_LEGACY_FILE_FORMAT;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_TRUSTED_SCHEMA;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_STMT_SCANSTATUS;
    public static SQLiteConfigDbOpsEnum SQLITE_DBCONFIG_REVERSE_SCANORDER;
}
internal enum System.Data.SQLite.SQLiteConfigOpsEnum : Enum {
    public int value__;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_NONE;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_SINGLETHREAD;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_MULTITHREAD;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_SERIALIZED;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_MALLOC;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_GETMALLOC;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_SCRATCH;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_PAGECACHE;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_HEAP;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_MEMSTATUS;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_MUTEX;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_GETMUTEX;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_LOOKASIDE;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_PCACHE;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_GETPCACHE;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_LOG;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_URI;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_PCACHE2;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_GETPCACHE2;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_COVERING_INDEX_SCAN;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_SQLLOG;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_MMAP_SIZE;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_WIN32_HEAPSIZE;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_PCACHE_HDRSZ;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_PMASZ;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_STMTJRNL_SPILL;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_SMALL_MALLOC;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_SORTERREF_SIZE;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_MEMDB_MAXSIZE;
    public static SQLiteConfigOpsEnum SQLITE_CONFIG_ROWID_IN_VIEW;
}
public class System.Data.SQLite.SQLiteConnection : DbConnection {
    internal static DbType BadDbType;
    internal static string DefaultBaseSchemaName;
    private static string MemoryFileName;
    internal static IsolationLevel DeferredIsolationLevel;
    internal static IsolationLevel ImmediateIsolationLevel;
    private static SQLiteConnectionFlags FallbackDefaultFlags;
    private static SQLiteSynchronousEnum DefaultSynchronous;
    private static SQLiteJournalModeEnum DefaultJournalMode;
    private static IsolationLevel DefaultIsolationLevel;
    internal static SQLiteDateFormats DefaultDateTimeFormat;
    internal static DateTimeKind DefaultDateTimeKind;
    internal static string DefaultDateTimeFormatString;
    private static string DefaultDataSource;
    private static string DefaultUri;
    private static string DefaultFullUri;
    private static string DefaultTextPassword;
    private static string DefaultTextHexPassword;
    private static string DefaultHexPassword;
    private static string DefaultPassword;
    private static int DefaultVersion;
    private static int DefaultPageSize;
    private static int DefaultMaxPageCount;
    private static int DefaultCacheSize;
    private static int DefaultMaxPoolSize;
    private static int DefaultConnectionTimeout;
    internal static int DefaultConnectionMaximumSleepTime;
    private static int DefaultBusyTimeout;
    private static int DefaultWaitTimeout;
    private static bool DefaultNoDefaultFlags;
    private static bool DefaultIncludeDefaultFlags;
    private static bool DefaultNoSharedFlags;
    private static bool DefaultFailIfMissing;
    private static bool DefaultReadOnly;
    internal static bool DefaultBinaryGUID;
    private static bool DefaultUseUTF16Encoding;
    private static bool DefaultToFullPath;
    private static bool DefaultPooling;
    private static bool DefaultLegacyFormat;
    private static bool DefaultForeignKeys;
    private static bool DefaultRecursiveTriggers;
    private static bool DefaultEnlist;
    private static bool DefaultSetDefaults;
    internal static int DefaultPrepareRetries;
    internal static int DefaultStepRetries;
    private static Nullable`1<DbType> _DefaultDbType;
    private static string _DefaultTypeName;
    private static string DefaultVfsName;
    private static int DefaultProgressOps;
    private static int SQLITE_FCNTL_CHUNK_SIZE;
    private static int SQLITE_FCNTL_WIN32_AV_RETRY;
    private static string _dataDirectory;
    private static string _defaultCatalogName;
    private static string _defaultMasterTableName;
    private static string _temporaryCatalogName;
    private static string _temporaryMasterTableName;
    private static Assembly _assembly;
    private static object _syncRoot;
    [CompilerGeneratedAttribute]
private static SQLiteConnectionEventHandler _handlers;
    private static SQLiteConnectionFlags _sharedFlags;
    [ThreadStaticAttribute]
private static SQLiteConnection _lastConnectionInOpen;
    private static long _onChangedHit;
    private static long _onChangedMiss;
    private ConnectionState _connectionState;
    private string _connectionString;
    internal int _transactionLevel;
    internal int _transactionSequence;
    internal bool _noDispose;
    private bool _disposing;
    private IsolationLevel _defaultIsolation;
    internal object _enlistmentSyncRoot;
    internal SQLiteEnlistment _enlistment;
    internal SQLiteDbTypeMap _typeNames;
    private SQLiteTypeCallbacksMap _typeCallbacks;
    internal SQLiteBase _sql;
    private string _dataSource;
    private Byte[] _password;
    private bool _passwordWasText;
    private bool _passwordWasHex;
    internal string _baseSchemaName;
    private SQLiteConnectionFlags _flags;
    private SQLiteTraceFlags _traceFlags;
    private Dictionary`2<string, object> _cachedSettings;
    private Nullable`1<DbType> _defaultDbType;
    private string _defaultTypeName;
    private string _vfsName;
    private int _defaultTimeout;
    internal int _defaultMaximumSleepTime;
    private int _busyTimeout;
    private int _waitTimeout;
    internal int _prepareRetries;
    internal int _stepRetries;
    private int _progressOps;
    private bool _parseViaFramework;
    internal bool _binaryGuid;
    internal int _version;
    [CompilerGeneratedAttribute]
private SQLiteBusyEventHandler _busyHandler;
    [CompilerGeneratedAttribute]
private SQLiteProgressEventHandler _progressHandler;
    [CompilerGeneratedAttribute]
private SQLiteAuthorizerEventHandler _authorizerHandler;
    [CompilerGeneratedAttribute]
private SQLiteUpdateEventHandler _updateHandler;
    [CompilerGeneratedAttribute]
private SQLiteCommitHandler _commitHandler;
    [CompilerGeneratedAttribute]
private SQLiteTraceEventHandler _traceHandler;
    [CompilerGeneratedAttribute]
private SQLiteTraceEventHandler _traceHandler2;
    [CompilerGeneratedAttribute]
private EventHandler _rollbackHandler;
    private SQLiteBusyCallback _busyCallback;
    private SQLiteProgressCallback _progressCallback;
    private SQLiteAuthorizerCallback _authorizerCallback;
    private SQLiteUpdateCallback _updateCallback;
    private SQLiteCommitCallback _commitCallback;
    private SQLiteTraceCallback _traceCallback;
    private SQLiteTraceCallback2 _traceCallback2;
    private SQLiteRollbackCallback _rollbackCallback;
    private static string ConfigureFileNameOnly;
    private static string ConfigureDirectoryEnvVarName;
    private static string NoConfigureEnvVarName;
    private static string NoThrowConfigureEnvVarName;
    private static string PluginsDirectoryEnvVarName;
    private static string NoPluginsEnvVarName;
    private static string PluginFilePattern;
    private static object configureSyncRoot;
    private static int configureCount;
    [CompilerGeneratedAttribute]
private StateChangeEventHandler StateChange;
    private bool disposed;
    private SQLiteGetPasswordCallback _getPasswordCallback;
    private object _tag;
    public static ISQLiteConnectionPool ConnectionPool { get; public set; }
    public int PoolCount { get; }
    public static long CreateCount { get; }
    public static long OpenCount { get; }
    public static long CloseCount { get; }
    public static long DisposeCount { get; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
[EditorAttribute("SQLite.Designer.SQLiteConnectionStringEditor, SQLite.Designer, Version=1.0.119.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string ConnectionString { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string DataSource { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public string FileName { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public string Database { get; }
    public SQLiteGetPasswordCallback GetPasswordCallback { get; public set; }
    public int DefaultTimeout { get; public set; }
    public int DefaultMaximumSleepTime { get; public set; }
    public int BusyTimeout { get; public set; }
    public int WaitTimeout { get; public set; }
    public int PrepareRetries { get; public set; }
    public int StepRetries { get; public set; }
    public int ProgressOps { get; public set; }
    public bool ParseViaFramework { get; public set; }
    public SQLiteConnectionFlags Flags { get; public set; }
    public Nullable`1<DbType> DefaultDbType { get; public set; }
    public string DefaultTypeName { get; public set; }
    public string VfsName { get; public set; }
    public bool OwnHandle { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ServerVersion { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public long LastInsertRowId { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int Changes { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoCommit { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public long MemoryUsed { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public long MemoryHighwater { get; }
    public static string DefineConstants { get; }
    public static string SQLiteVersion { get; }
    public static string SQLiteSourceId { get; }
    public static string SQLiteCompileOptions { get; }
    public static string InteropVersion { get; }
    public static string InteropSourceId { get; }
    public static string InteropCompileOptions { get; }
    public static string ProviderVersion { get; }
    public static string ProviderSourceId { get; }
    public static string ProviderDefineConstants { get; }
    public static SQLiteConnectionFlags DefaultFlags { get; }
    public static SQLiteConnectionFlags SharedFlags { get; public set; }
    public object Tag { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ConnectionState State { get; }
    public SQLiteTraceFlags TraceFlags { get; public set; }
    protected DbProviderFactory DbProviderFactory { get; }
    public SQLiteConnection(string connectionString);
    internal SQLiteConnection(IntPtr db, string fileName, bool ownHandle);
    public SQLiteConnection(string connectionString, bool parseViaFramework);
    public SQLiteConnection(SQLiteConnection connection);
    private static SQLiteConnection();
    [CompilerGeneratedAttribute]
private static void add__handlers(SQLiteConnectionEventHandler value);
    [CompilerGeneratedAttribute]
private static void remove__handlers(SQLiteConnectionEventHandler value);
    [CompilerGeneratedAttribute]
private void add__busyHandler(SQLiteBusyEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__busyHandler(SQLiteBusyEventHandler value);
    [CompilerGeneratedAttribute]
private void add__progressHandler(SQLiteProgressEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__progressHandler(SQLiteProgressEventHandler value);
    [CompilerGeneratedAttribute]
private void add__authorizerHandler(SQLiteAuthorizerEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__authorizerHandler(SQLiteAuthorizerEventHandler value);
    [CompilerGeneratedAttribute]
private void add__updateHandler(SQLiteUpdateEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__updateHandler(SQLiteUpdateEventHandler value);
    [CompilerGeneratedAttribute]
private void add__commitHandler(SQLiteCommitHandler value);
    [CompilerGeneratedAttribute]
private void remove__commitHandler(SQLiteCommitHandler value);
    [CompilerGeneratedAttribute]
private void add__traceHandler(SQLiteTraceEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__traceHandler(SQLiteTraceEventHandler value);
    [CompilerGeneratedAttribute]
private void add__traceHandler2(SQLiteTraceEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__traceHandler2(SQLiteTraceEventHandler value);
    [CompilerGeneratedAttribute]
private void add__rollbackHandler(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__rollbackHandler(EventHandler value);
    internal static SQLiteConnectionFlags GetFlags(SQLiteConnection connection);
    private static string GetDefaultCatalogName();
    private static bool IsDefaultCatalogName(string catalogName);
    private static string GetTemporaryCatalogName();
    private static bool IsTemporaryCatalogName(string catalogName);
    private static string GetMasterTableName(bool temporary);
    [CompilerGeneratedAttribute]
public virtual void add_StateChange(StateChangeEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_StateChange(StateChangeEventHandler value);
    private void InitializeDefaults();
    private static string GetEeeCertificateFileName();
    private static void CheckForPluginEnvironment(string fileName, bool isolated);
    private static bool HasInMemoryDataSource(SQLiteConnection connection, string connectionString, bool parseViaFramework);
    private static string GetDirectory(DirectoryType type);
    private static IEnumerable`1<string> GetPluginFileNames(string directory);
    private static void ConfigureViaOneFile(string fileName);
    private static void ConfigureViaPluginFiles(string directory);
    private static SQLiteConnectionHandle GetCriticalHandle(SQLiteConnection connection);
    public object GetCriticalHandle();
    public static ISQLiteConnectionPool CreatePool(string typeName, object argument);
    internal static bool CanOnChanged(SQLiteConnection connection, bool ignoreDisposed);
    internal static void OnChanged(SQLiteConnection connection, ConnectionEventArgs e);
    public static void add_Changed(SQLiteConnectionEventHandler value);
    public static void remove_Changed(SQLiteConnectionEventHandler value);
    public static ISQLiteConnectionPool get_ConnectionPool();
    public static void set_ConnectionPool(ISQLiteConnectionPool value);
    public static object CreateHandle(IntPtr nativeHandle);
    public void BackupDatabase(SQLiteConnection destination, string destinationName, string sourceName, int pages, SQLiteBackupCallback callback, int retryMilliseconds);
    public int ClearCachedSettings();
    internal bool TryGetCachedSetting(string name, object default, Object& value);
    internal void SetCachedSetting(string name, object value);
    public int ClearTypeMappings();
    public Dictionary`2<string, object> GetTypeMappings();
    public int AddTypeMapping(string typeName, DbType dataType, bool primary);
    public int ClearTypeCallbacks();
    public bool TryGetTypeCallbacks(string typeName, SQLiteTypeCallbacks& callbacks);
    public bool SetTypeCallbacks(string typeName, SQLiteTypeCallbacks callbacks);
    public void BindFunction(SQLiteFunctionAttribute functionAttribute, SQLiteFunction function);
    public void BindFunction(SQLiteFunctionAttribute functionAttribute, Delegate callback1, Delegate callback2);
    public bool UnbindFunction(SQLiteFunctionAttribute functionAttribute);
    public bool UnbindAllFunctions(bool registered);
    [ConditionalAttribute("CHECK_STATE")]
internal static void Check(SQLiteConnection connection);
    internal static SortedList`2<string, string> ParseConnectionString(string connectionString, bool parseViaFramework, bool allowNameOnly, bool strict);
    public static SortedList`2<string, string> ParseConnectionString(SQLiteConnection connection, string connectionString, bool parseViaFramework, bool allowNameOnly, bool strict);
    private static string EscapeForConnectionString(string value, bool allowEquals);
    private static string BuildConnectionString(SortedList`2<string, string> opts);
    private void SetupSQLiteBase(SortedList`2<string, string> opts);
    public sealed virtual void Dispose();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    public sealed virtual object Clone();
    public static void CreateFile(string databaseFileName);
    internal void OnStateChange(ConnectionState newState, StateChangeEventArgs& eventArgs);
    private static IsolationLevel GetFallbackDefaultIsolationLevel();
    internal IsolationLevel GetDefaultIsolationLevel();
    [ObsoleteAttribute("Use one of the standard BeginTransaction methods, this one will be removed soon")]
public SQLiteTransaction BeginTransaction(IsolationLevel isolationLevel, bool deferredLock);
    [ObsoleteAttribute("Use one of the standard BeginTransaction methods, this one will be removed soon")]
public SQLiteTransaction BeginTransaction(bool deferredLock);
    public SQLiteTransaction BeginTransaction(IsolationLevel isolationLevel);
    public SQLiteTransaction BeginTransaction();
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public virtual void ChangeDatabase(string databaseName);
    public virtual void Close();
    public int get_PoolCount();
    public static long get_CreateCount();
    public static long get_OpenCount();
    public static long get_CloseCount();
    public static long get_DisposeCount();
    public static void ClearPool(SQLiteConnection connection);
    public static void ClearAllPools();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public SQLiteCommand CreateCommand();
    protected virtual DbCommand CreateDbCommand();
    public ISQLiteSession CreateSession(string databaseName);
    public ISQLiteChangeSet CreateChangeSet(Byte[] rawData);
    public ISQLiteChangeSet CreateChangeSet(Byte[] rawData, SQLiteChangeSetStartFlags flags);
    public ISQLiteChangeSet CreateChangeSet(Stream inputStream, Stream outputStream);
    public ISQLiteChangeSet CreateChangeSet(Stream inputStream, Stream outputStream, SQLiteChangeSetStartFlags flags);
    public ISQLiteChangeGroup CreateChangeGroup();
    public virtual string get_DataSource();
    public string get_FileName();
    public virtual string get_Database();
    internal static string MapUriPath(string path);
    private static bool ShouldUseLegacyConnectionStringParser(SQLiteConnection connection);
    private static SortedList`2<string, string> ParseConnectionString(string connectionString, bool allowNameOnly);
    private static SortedList`2<string, string> ParseConnectionString(SQLiteConnection connection, string connectionString, bool allowNameOnly);
    private static SortedList`2<string, string> ParseConnectionStringViaFramework(SQLiteConnection connection, string connectionString, bool strict);
    public virtual void EnlistTransaction(Transaction transaction);
    public bool WaitForEnlistmentReset(int timeoutMilliseconds, Nullable`1<bool> returnOnDisposed);
    internal static string FindKey(SortedList`2<string, string> items, string key, string defValue);
    internal static object TryParseEnum(Type type, string value, bool ignoreCase);
    private static bool TryParseByte(string value, NumberStyles style, Byte& result);
    public int SetLimitOption(SQLiteLimitOpsEnum option, int value);
    public void SetConfigurationOption(SQLiteConfigDbOpsEnum option, object value);
    public void EnableExtensions(bool enable);
    public void LoadExtension(string fileName);
    public void LoadExtension(string fileName, string procName);
    public void CreateModule(SQLiteModule module);
    internal static Byte[] FromHexString(string text);
    internal static string ToHexString(Byte[] array);
    private static Byte[] FromHexString(string text, bool allowNul, String& error);
    private bool GetDefaultPooling();
    private IsolationLevel GetEffectiveIsolationLevel(IsolationLevel isolationLevel);
    public SQLiteGetPasswordCallback get_GetPasswordCallback();
    public void set_GetPasswordCallback(SQLiteGetPasswordCallback value);
    public Byte[] Serialize(string schema);
    public void Deserialize(string schema, Byte[] data, bool readOnly);
    public virtual void Open();
    public SQLiteConnection OpenAndReturn();
    public int get_DefaultTimeout();
    public void set_DefaultTimeout(int value);
    public int get_DefaultMaximumSleepTime();
    public void set_DefaultMaximumSleepTime(int value);
    public int get_BusyTimeout();
    public void set_BusyTimeout(int value);
    public int get_WaitTimeout();
    public void set_WaitTimeout(int value);
    public int get_PrepareRetries();
    public void set_PrepareRetries(int value);
    public int get_StepRetries();
    public void set_StepRetries(int value);
    public int get_ProgressOps();
    public void set_ProgressOps(int value);
    public bool get_ParseViaFramework();
    public void set_ParseViaFramework(bool value);
    public SQLiteConnectionFlags get_Flags();
    public void set_Flags(SQLiteConnectionFlags value);
    public Nullable`1<DbType> get_DefaultDbType();
    public void set_DefaultDbType(Nullable`1<DbType> value);
    public string get_DefaultTypeName();
    public void set_DefaultTypeName(string value);
    public string get_VfsName();
    public void set_VfsName(string value);
    public bool get_OwnHandle();
    public virtual string get_ServerVersion();
    public long get_LastInsertRowId();
    public void Cancel();
    public bool IsCanceled();
    public int get_Changes();
    public bool IsReadOnly(string name);
    public bool get_AutoCommit();
    public long get_MemoryUsed();
    public long get_MemoryHighwater();
    public static void GetMemoryStatistics(IDictionary`2& statistics);
    public void ReleaseMemory();
    public static SQLiteErrorCode ReleaseMemory(int nBytes, bool reset, bool compact, Int32& nFree, Boolean& resetOk, UInt32& nLargest);
    public static SQLiteErrorCode SetMemoryStatus(bool value);
    public static string get_DefineConstants();
    public static string get_SQLiteVersion();
    public static string get_SQLiteSourceId();
    public static string get_SQLiteCompileOptions();
    public static string get_InteropVersion();
    public static string get_InteropSourceId();
    public static string get_InteropCompileOptions();
    public static string get_ProviderVersion();
    public static string get_ProviderSourceId();
    public static string get_ProviderDefineConstants();
    private static bool TryGetLastCachedSetting(string name, object default, Object& value);
    private static void SetLastCachedSetting(string name, object value);
    public static SQLiteConnectionFlags get_DefaultFlags();
    public static SQLiteConnectionFlags get_SharedFlags();
    public static void set_SharedFlags(SQLiteConnectionFlags value);
    public object get_Tag();
    public void set_Tag(object value);
    public virtual ConnectionState get_State();
    public SQLiteErrorCode Shutdown();
    public static void Shutdown(bool directories, bool noThrow);
    public void SetExtendedResultCodes(bool bOnOff);
    public SQLiteErrorCode ResultCode();
    public SQLiteErrorCode ExtendedResultCode();
    public void LogMessage(SQLiteErrorCode iErrCode, string zMessage);
    public void LogMessage(int iErrCode, string zMessage);
    public static string DecryptLegacyDatabase(string fileName, Byte[] passwordBytes, Nullable`1<int> pageSize, SQLiteProgressEventHandler progress);
    public void ChangePassword(string newPassword);
    public void ChangePassword(Byte[] newPassword);
    public void SetPassword(string databasePassword);
    public void SetPassword(Byte[] databasePassword);
    public SQLiteErrorCode SetAvRetry(Int32& count, Int32& interval);
    public SQLiteErrorCode SetChunkSize(int size);
    private static string UnwrapString(string value);
    private static string GetDataDirectory();
    private static string ExpandFileName(string sourceFile, bool toFullPath);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    private static DataTable Schema_ReservedWords();
    private static DataTable Schema_MetaDataCollections();
    private DataTable Schema_DataSourceInformation();
    private DataTable Schema_Columns(string strCatalog, string strTable, string strColumn);
    private DataTable Schema_Indexes(string strCatalog, string strTable, string strIndex);
    private DataTable Schema_Triggers(string catalog, string table, string triggerName);
    private DataTable Schema_Tables(string strCatalog, string strTable, string strType);
    private DataTable Schema_Views(string strCatalog, string strView);
    private DataTable Schema_Catalogs(string strCatalog);
    private DataTable Schema_DataTypes();
    private DataTable Schema_IndexColumns(string strCatalog, string strTable, string strIndex, string strColumn);
    private DataTable Schema_ViewColumns(string strCatalog, string strView, string strColumn);
    private DataTable Schema_ForeignKeys(string strCatalog, string strTable, string strKeyName);
    public void add_Busy(SQLiteBusyEventHandler value);
    public void remove_Busy(SQLiteBusyEventHandler value);
    public void add_Progress(SQLiteProgressEventHandler value);
    public void remove_Progress(SQLiteProgressEventHandler value);
    public void add_Authorize(SQLiteAuthorizerEventHandler value);
    public void remove_Authorize(SQLiteAuthorizerEventHandler value);
    public void add_Update(SQLiteUpdateEventHandler value);
    public void remove_Update(SQLiteUpdateEventHandler value);
    private SQLiteBusyReturnCode BusyCallback(IntPtr pUserData, int count);
    private SQLiteProgressReturnCode ProgressCallback(IntPtr pUserData);
    private SQLiteAuthorizerReturnCode AuthorizerCallback(IntPtr pUserData, SQLiteAuthorizerActionCode actionCode, IntPtr pArgument1, IntPtr pArgument2, IntPtr pDatabase, IntPtr pAuthContext);
    private void UpdateCallback(IntPtr puser, int type, IntPtr database, IntPtr table, long rowid);
    public void add_Commit(SQLiteCommitHandler value);
    public void remove_Commit(SQLiteCommitHandler value);
    public void add_Trace(SQLiteTraceEventHandler value);
    public void remove_Trace(SQLiteTraceEventHandler value);
    public void add_Trace2(SQLiteTraceEventHandler value);
    public void remove_Trace2(SQLiteTraceEventHandler value);
    private void TraceCallback(IntPtr pUser, IntPtr statement);
    private void TraceCallback2(SQLiteTraceFlags flags, IntPtr pUser, IntPtr pCtx1, IntPtr pCtx2);
    public SQLiteTraceFlags get_TraceFlags();
    public void set_TraceFlags(SQLiteTraceFlags value);
    public void add_RollBack(EventHandler value);
    public void remove_RollBack(EventHandler value);
    private int CommitCallback(IntPtr parg);
    private void RollbackCallback(IntPtr parg);
    protected virtual DbProviderFactory get_DbProviderFactory();
}
public class System.Data.SQLite.SQLiteConnectionEventHandler : MulticastDelegate {
    public SQLiteConnectionEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ConnectionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ConnectionEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Data.SQLite.SQLiteConnectionEventType : Enum {
    public int value__;
    public static SQLiteConnectionEventType Invalid;
    public static SQLiteConnectionEventType Unknown;
    public static SQLiteConnectionEventType Opening;
    public static SQLiteConnectionEventType ConnectionString;
    public static SQLiteConnectionEventType Opened;
    public static SQLiteConnectionEventType ChangeDatabase;
    public static SQLiteConnectionEventType NewTransaction;
    public static SQLiteConnectionEventType EnlistTransaction;
    public static SQLiteConnectionEventType NewCommand;
    public static SQLiteConnectionEventType NewDataReader;
    public static SQLiteConnectionEventType NewCriticalHandle;
    public static SQLiteConnectionEventType Closing;
    public static SQLiteConnectionEventType Closed;
    public static SQLiteConnectionEventType DisposingCommand;
    public static SQLiteConnectionEventType DisposingDataReader;
    public static SQLiteConnectionEventType ClosingDataReader;
    public static SQLiteConnectionEventType OpenedFromPool;
    public static SQLiteConnectionEventType ClosedToPool;
    public static SQLiteConnectionEventType DisposingConnection;
    public static SQLiteConnectionEventType DisposedConnection;
    public static SQLiteConnectionEventType FinalizingConnection;
    public static SQLiteConnectionEventType FinalizedConnection;
    public static SQLiteConnectionEventType NothingToDo;
    public static SQLiteConnectionEventType ConnectionStringPreview;
    public static SQLiteConnectionEventType SqlStringPreview;
    public static SQLiteConnectionEventType Canceled;
    public static SQLiteConnectionEventType DataReaderPreview;
}
[FlagsAttribute]
public enum System.Data.SQLite.SQLiteConnectionFlags : Enum {
    public long value__;
    public static SQLiteConnectionFlags None;
    public static SQLiteConnectionFlags LogPrepare;
    public static SQLiteConnectionFlags LogPreBind;
    public static SQLiteConnectionFlags LogBind;
    public static SQLiteConnectionFlags LogCallbackException;
    public static SQLiteConnectionFlags LogBackup;
    public static SQLiteConnectionFlags NoExtensionFunctions;
    public static SQLiteConnectionFlags BindUInt32AsInt64;
    public static SQLiteConnectionFlags BindAllAsText;
    public static SQLiteConnectionFlags GetAllAsText;
    public static SQLiteConnectionFlags NoLoadExtension;
    public static SQLiteConnectionFlags NoCreateModule;
    public static SQLiteConnectionFlags NoBindFunctions;
    public static SQLiteConnectionFlags NoLogModule;
    public static SQLiteConnectionFlags LogModuleError;
    public static SQLiteConnectionFlags LogModuleException;
    public static SQLiteConnectionFlags TraceWarning;
    public static SQLiteConnectionFlags ConvertInvariantText;
    public static SQLiteConnectionFlags BindInvariantText;
    public static SQLiteConnectionFlags NoConnectionPool;
    public static SQLiteConnectionFlags UseConnectionPool;
    public static SQLiteConnectionFlags UseConnectionTypes;
    public static SQLiteConnectionFlags NoGlobalTypes;
    public static SQLiteConnectionFlags StickyHasRows;
    public static SQLiteConnectionFlags StrictEnlistment;
    public static SQLiteConnectionFlags MapIsolationLevels;
    public static SQLiteConnectionFlags DetectTextAffinity;
    public static SQLiteConnectionFlags DetectStringType;
    public static SQLiteConnectionFlags NoConvertSettings;
    public static SQLiteConnectionFlags BindDateTimeWithKind;
    public static SQLiteConnectionFlags RollbackOnException;
    public static SQLiteConnectionFlags DenyOnException;
    public static SQLiteConnectionFlags InterruptOnException;
    public static SQLiteConnectionFlags UnbindFunctionsOnClose;
    public static SQLiteConnectionFlags NoVerifyTextAffinity;
    public static SQLiteConnectionFlags UseConnectionBindValueCallbacks;
    public static SQLiteConnectionFlags UseConnectionReadValueCallbacks;
    public static SQLiteConnectionFlags UseParameterNameForTypeName;
    public static SQLiteConnectionFlags UseParameterDbTypeForTypeName;
    public static SQLiteConnectionFlags NoVerifyTypeAffinity;
    public static SQLiteConnectionFlags AllowNestedTransactions;
    public static SQLiteConnectionFlags BindDecimalAsText;
    public static SQLiteConnectionFlags GetDecimalAsText;
    public static SQLiteConnectionFlags BindInvariantDecimal;
    public static SQLiteConnectionFlags GetInvariantDecimal;
    public static SQLiteConnectionFlags WaitForEnlistmentReset;
    public static SQLiteConnectionFlags GetInvariantInt64;
    public static SQLiteConnectionFlags GetInvariantDouble;
    public static SQLiteConnectionFlags StrictConformance;
    public static SQLiteConnectionFlags HidePassword;
    public static SQLiteConnectionFlags NoCoreFunctions;
    public static SQLiteConnectionFlags StopOnException;
    public static SQLiteConnectionFlags LogRetry;
    public static SQLiteConnectionFlags ConnectionPoolOnly;
    public static SQLiteConnectionFlags AggressiveDisposal;
    public static SQLiteConnectionFlags BindAndGetAllAsText;
    public static SQLiteConnectionFlags ConvertAndBindInvariantText;
    public static SQLiteConnectionFlags BindAndGetAllAsInvariantText;
    public static SQLiteConnectionFlags ConvertAndBindAndGetAllAsInvariantText;
    public static SQLiteConnectionFlags UseConnectionAllValueCallbacks;
    public static SQLiteConnectionFlags UseParameterAnythingForTypeName;
    public static SQLiteConnectionFlags LogAll;
    public static SQLiteConnectionFlags LogDefault;
    public static SQLiteConnectionFlags Default;
    public static SQLiteConnectionFlags DefaultAndLogAll;
}
internal class System.Data.SQLite.SQLiteConnectionHandle : CriticalHandle {
    private bool ownHandle;
    public bool OwnHandle { get; }
    public bool IsInvalid { get; }
    internal SQLiteConnectionHandle(IntPtr db, bool ownHandle);
    private SQLiteConnectionHandle(bool ownHandle);
    public static IntPtr op_Implicit(SQLiteConnectionHandle db);
    protected virtual bool ReleaseHandle();
    public int WasReleasedOk();
    public bool get_OwnHandle();
    public virtual bool get_IsInvalid();
}
internal abstract class System.Data.SQLite.SQLiteConnectionLock : object {
    private static string LockNopSql;
    private static string StatementMessageFormat;
    private SQLiteConnectionHandle handle;
    private SQLiteConnectionFlags flags;
    private IntPtr statement;
    private bool disposed;
    public SQLiteConnectionLock(SQLiteConnectionHandle handle, SQLiteConnectionFlags flags, bool autoLock);
    protected SQLiteConnectionHandle GetHandle();
    protected SQLiteConnectionFlags GetFlags();
    protected IntPtr GetIntPtr();
    public void Lock();
    public void Unlock();
    public sealed virtual void Dispose();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal static class System.Data.SQLite.SQLiteConnectionPool : object {
    private static object _syncRoot;
    private static ISQLiteConnectionPool _connectionPool;
    private static SQLiteConnectionPool();
    public static void GetCounts(string fileName, Dictionary`2& counts, Int32& openCount, Int32& closeCount, Int32& totalCount);
    public static void ClearPool(string fileName);
    public static void ClearAllPools();
    public static void Add(string fileName, SQLiteConnectionHandle handle, int version);
    public static SQLiteConnectionHandle Remove(string fileName, int maxPoolSize, Int32& version);
    public static void Initialize(object argument);
    public static void Terminate(object argument);
    public static void GetCounts(Int32& openCount, Int32& closeCount);
    public static void ResetCounts();
    public static void CreateAndInitialize(object argument, bool strong, bool force);
    public static void TerminateAndReset(object argument);
    public static ISQLiteConnectionPool GetConnectionPool();
    public static void SetConnectionPool(ISQLiteConnectionPool connectionPool);
}
[DefaultPropertyAttribute("DataSource")]
[DefaultMemberAttribute("Item")]
public class System.Data.SQLite.SQLiteConnectionStringBuilder : DbConnectionStringBuilder {
    private Hashtable _properties;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("3")]
public int Version { get; public set; }
    [DisplayNameAttribute("Synchronous")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SynchronizationModes SyncMode { get; public set; }
    [DisplayNameAttribute("Use UTF-16 Encoding")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool UseUTF16Encoding { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool Pooling { get; public set; }
    [DisplayNameAttribute("Binary GUID")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool BinaryGUID { get; public set; }
    [DisplayNameAttribute("Data Source")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("")]
public string DataSource { get; public set; }
    [DisplayNameAttribute("URI")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("")]
public string Uri { get; public set; }
    [DisplayNameAttribute("Full URI")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("")]
public string FullUri { get; public set; }
    [DisplayNameAttribute("Default Timeout")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("30")]
public int DefaultTimeout { get; public set; }
    [DisplayNameAttribute("Default Maximum Sleep Time")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("150")]
public int DefaultMaximumSleepTime { get; public set; }
    [DisplayNameAttribute("Busy Timeout")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
public int BusyTimeout { get; public set; }
    [DisplayNameAttribute("Wait Timeout")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("30000")]
public int WaitTimeout { get; public set; }
    [DisplayNameAttribute("Prepare Retries")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("3")]
public int PrepareRetries { get; public set; }
    [DisplayNameAttribute("Step Retries")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("40")]
public int StepRetries { get; public set; }
    [DisplayNameAttribute("Progress Ops")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
public int ProgressOps { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool Enlist { get; public set; }
    [DisplayNameAttribute("Fail If Missing")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool FailIfMissing { get; public set; }
    [DisplayNameAttribute("Legacy Format")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool LegacyFormat { get; public set; }
    [DisplayNameAttribute("Read Only")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool ReadOnly { get; public set; }
    [BrowsableAttribute("True")]
[PasswordPropertyTextAttribute("True")]
[DefaultValueAttribute("")]
public string Password { get; public set; }
    [DisplayNameAttribute("Hexadecimal Password")]
[BrowsableAttribute("True")]
[PasswordPropertyTextAttribute("True")]
[DefaultValueAttribute("")]
public Byte[] HexPassword { get; public set; }
    [DisplayNameAttribute("Textual Password")]
[BrowsableAttribute("True")]
[PasswordPropertyTextAttribute("True")]
[DefaultValueAttribute("")]
public string TextPassword { get; public set; }
    [DisplayNameAttribute("Textual Hexadecimal Password")]
[BrowsableAttribute("True")]
[PasswordPropertyTextAttribute("True")]
[DefaultValueAttribute("")]
public Byte[] TextHexPassword { get; public set; }
    [DisplayNameAttribute("Page Size")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("4096")]
public int PageSize { get; public set; }
    [DisplayNameAttribute("Maximum Page Count")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
public int MaxPageCount { get; public set; }
    [DisplayNameAttribute("Cache Size")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("-2000")]
public int CacheSize { get; public set; }
    [DisplayNameAttribute("DateTime Format")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SQLiteDateFormats DateTimeFormat { get; public set; }
    [DisplayNameAttribute("DateTime Kind")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DateTimeKind DateTimeKind { get; public set; }
    [DisplayNameAttribute("DateTime Format String")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("")]
public string DateTimeFormatString { get; public set; }
    [DisplayNameAttribute("Base Schema Name")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("sqlite_default_schema")]
public string BaseSchemaName { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DisplayNameAttribute("Journal Mode")]
public SQLiteJournalModeEnum JournalMode { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DisplayNameAttribute("Default Isolation Level")]
public IsolationLevel DefaultIsolationLevel { get; public set; }
    [DisplayNameAttribute("Default Database Type")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DbType DefaultDbType { get; public set; }
    [DisplayNameAttribute("Default Type Name")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("")]
public string DefaultTypeName { get; public set; }
    [DisplayNameAttribute("VFS Name")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("")]
public string VfsName { get; public set; }
    [DisplayNameAttribute("Foreign Keys")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool ForeignKeys { get; public set; }
    [DisplayNameAttribute("Recursive Triggers")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool RecursiveTriggers { get; public set; }
    [DisplayNameAttribute("ZipVFS Version")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("")]
public string ZipVfsVersion { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SQLiteConnectionFlags Flags { get; public set; }
    [DisplayNameAttribute("Set Defaults")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool SetDefaults { get; public set; }
    [DisplayNameAttribute("To Full Path")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool ToFullPath { get; public set; }
    [DisplayNameAttribute("No Default Flags")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool NoDefaultFlags { get; public set; }
    [DisplayNameAttribute("No Shared Flags")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool NoSharedFlags { get; public set; }
    public SQLiteConnectionStringBuilder(string connectionString);
    private void Initialize(string cnnString);
    public int get_Version();
    public void set_Version(int value);
    public SynchronizationModes get_SyncMode();
    public void set_SyncMode(SynchronizationModes value);
    public bool get_UseUTF16Encoding();
    public void set_UseUTF16Encoding(bool value);
    public bool get_Pooling();
    public void set_Pooling(bool value);
    public bool get_BinaryGUID();
    public void set_BinaryGUID(bool value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public string get_Uri();
    public void set_Uri(string value);
    public string get_FullUri();
    public void set_FullUri(string value);
    public int get_DefaultTimeout();
    public void set_DefaultTimeout(int value);
    public int get_DefaultMaximumSleepTime();
    public void set_DefaultMaximumSleepTime(int value);
    public int get_BusyTimeout();
    public void set_BusyTimeout(int value);
    public int get_WaitTimeout();
    public void set_WaitTimeout(int value);
    public int get_PrepareRetries();
    public void set_PrepareRetries(int value);
    public int get_StepRetries();
    public void set_StepRetries(int value);
    public int get_ProgressOps();
    public void set_ProgressOps(int value);
    public bool get_Enlist();
    public void set_Enlist(bool value);
    public bool get_FailIfMissing();
    public void set_FailIfMissing(bool value);
    public bool get_LegacyFormat();
    public void set_LegacyFormat(bool value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public string get_Password();
    public void set_Password(string value);
    public Byte[] get_HexPassword();
    public void set_HexPassword(Byte[] value);
    public string get_TextPassword();
    public void set_TextPassword(string value);
    public Byte[] get_TextHexPassword();
    public void set_TextHexPassword(Byte[] value);
    public int get_PageSize();
    public void set_PageSize(int value);
    public int get_MaxPageCount();
    public void set_MaxPageCount(int value);
    public int get_CacheSize();
    public void set_CacheSize(int value);
    public SQLiteDateFormats get_DateTimeFormat();
    public void set_DateTimeFormat(SQLiteDateFormats value);
    public DateTimeKind get_DateTimeKind();
    public void set_DateTimeKind(DateTimeKind value);
    public string get_DateTimeFormatString();
    public void set_DateTimeFormatString(string value);
    public string get_BaseSchemaName();
    public void set_BaseSchemaName(string value);
    public SQLiteJournalModeEnum get_JournalMode();
    public void set_JournalMode(SQLiteJournalModeEnum value);
    public IsolationLevel get_DefaultIsolationLevel();
    public void set_DefaultIsolationLevel(IsolationLevel value);
    public DbType get_DefaultDbType();
    public void set_DefaultDbType(DbType value);
    public string get_DefaultTypeName();
    public void set_DefaultTypeName(string value);
    public string get_VfsName();
    public void set_VfsName(string value);
    public bool get_ForeignKeys();
    public void set_ForeignKeys(bool value);
    public bool get_RecursiveTriggers();
    public void set_RecursiveTriggers(bool value);
    public string get_ZipVfsVersion();
    public void set_ZipVfsVersion(string value);
    public SQLiteConnectionFlags get_Flags();
    public void set_Flags(SQLiteConnectionFlags value);
    public bool get_SetDefaults();
    public void set_SetDefaults(bool value);
    public bool get_ToFullPath();
    public void set_ToFullPath(bool value);
    public bool get_NoDefaultFlags();
    public void set_NoDefaultFlags(bool value);
    public bool get_NoSharedFlags();
    public void set_NoSharedFlags(bool value);
    public virtual bool TryGetValue(string keyword, Object& value);
    private void FallbackGetProperties(Hashtable propertyList);
}
public class System.Data.SQLite.SQLiteContext : object {
    private IntPtr pContext;
    public IntPtr NativeHandle { get; }
    internal SQLiteContext(IntPtr pContext);
    public sealed virtual IntPtr get_NativeHandle();
    public int NoChange();
    public void SetNull();
    public void SetDouble(double value);
    public void SetInt(int value);
    public void SetInt64(long value);
    public void SetString(string value);
    public void SetError(string value);
    public void SetErrorCode(SQLiteErrorCode value);
    public void SetErrorTooBig();
    public void SetErrorNoMemory();
    public void SetBlob(Byte[] value);
    public void SetZeroBlob(int value);
    public void SetSubType(UInt32 value);
    public void SetValue(SQLiteValue value);
}
public abstract class System.Data.SQLite.SQLiteConvert : object {
    internal static char EscapeChar;
    internal static char QuoteChar;
    internal static char AltQuoteChar;
    internal static char ValueChar;
    internal static char PairChar;
    internal static Char[] SpecialChars;
    private static DbType FallbackDefaultDbType;
    private static string FallbackDefaultTypeName;
    protected static DateTime UnixEpoch;
    private static double OleAutomationEpochAsJulianDay;
    private static string FullFormat;
    private static long MinimumJd;
    private static long MaximumJd;
    private static String[] _datetimeFormats;
    private static string _datetimeFormatUtc;
    private static string _datetimeFormatLocal;
    private static Encoding _utf8;
    internal SQLiteDateFormats _datetimeFormat;
    internal DateTimeKind _datetimeKind;
    internal string _datetimeFormatString;
    private static Type[] _affinitytotype;
    private static DbType[] _typetodbtype;
    private static Int32[] _dbtypetocolumnsize;
    private static Object[] _dbtypetonumericprecision;
    private static Object[] _dbtypetonumericscale;
    private static Type[] _dbtypeToType;
    private static TypeAffinity[] _typecodeAffinities;
    private static SQLiteDbTypeMap _typeNames;
    internal SQLiteConvert(SQLiteDateFormats fmt, DateTimeKind kind, string fmtString);
    private static SQLiteConvert();
    public static Byte[] ToUTF8(string sourceText);
    public Byte[] ToUTF8(DateTime dateTimeValue);
    public virtual string ToString(IntPtr nativestring, int nativestringlen);
    public static string UTF8ToString(IntPtr nativestring, int nativestringlen);
    private static bool isValidJd(long jd);
    private static long DoubleToJd(double julianDay);
    private static double JdToDouble(long jd);
    private static DateTime computeYMD(long jd, Nullable`1<DateTime> badValue);
    private static DateTime computeHMS(long jd, Nullable`1<DateTime> badValue);
    private static long computeJD(Nullable`1<DateTime> dateTime);
    public DateTime ToDateTime(string dateText);
    public static DateTime ToDateTime(string dateText, SQLiteDateFormats format, DateTimeKind kind, string formatString);
    public DateTime ToDateTime(double julianDay);
    public static DateTime ToDateTime(double julianDay, DateTimeKind kind);
    internal static DateTime UnixEpochToDateTime(long seconds, DateTimeKind kind);
    internal static DateTime TicksToDateTime(long ticks, DateTimeKind kind);
    public static double ToJulianDay(Nullable`1<DateTime> value);
    public static long ToUnixEpoch(DateTime value);
    private static string GetDateTimeKindFormat(DateTimeKind kind, string formatString);
    internal static string ToString(IList`1<string> list, bool emptyOnNull);
    public string ToString(DateTime dateValue);
    public static string ToString(DateTime dateValue, SQLiteDateFormats format, DateTimeKind kind, string formatString);
    internal DateTime ToDateTime(IntPtr ptr, int len);
    public static String[] Split(string source, char separator);
    internal static String[] NewSplit(string value, char separator, bool keepQuote, String& error);
    public static string ToStringWithProvider(object obj, IFormatProvider provider);
    internal static bool ToBoolean(object obj, IFormatProvider provider, bool viaFramework);
    public static bool ToBoolean(object source);
    internal static string ToString(int value);
    public static bool ToBoolean(string source);
    internal static Type SQLiteTypeToType(SQLiteType t);
    public static DbType TypeToDbType(Type type);
    internal static int DbTypeToColumnSize(DbType typ);
    internal static object DbTypeToNumericPrecision(DbType typ);
    internal static object DbTypeToNumericScale(DbType typ);
    private static string GetDefaultTypeName(SQLiteConnection connection);
    private static void DefaultTypeNameWarning(DbType dbType, SQLiteConnectionFlags flags, string typeName);
    private static void DefaultDbTypeWarning(string typeName, SQLiteConnectionFlags flags, Nullable`1<DbType> dbType);
    internal static string DbTypeToTypeName(SQLiteConnection connection, DbType dbType, SQLiteConnectionFlags flags);
    internal static Type DbTypeToType(DbType typ);
    internal static TypeAffinity TypeToAffinity(Type typ, SQLiteConnectionFlags flags);
    private static SQLiteDbTypeMap GetSQLiteDbTypeMap();
    internal static bool IsStringDbType(DbType type);
    private static string SettingValueToString(object value);
    private static DbType GetDefaultDbType(SQLiteConnection connection);
    public static string GetStringOrNull(object value);
    internal static bool LooksLikeNull(string text);
    internal static bool LooksLikeInt64(string text);
    internal static bool LooksLikeDouble(string text);
    internal static bool LooksLikeDateTime(SQLiteConvert convert, string text);
    internal static DbType TypeNameToDbType(SQLiteConnection connection, string typeName, SQLiteConnectionFlags flags);
}
[DefaultEventAttribute("RowUpdated")]
[ToolboxItemAttribute("SQLite.Designer.SQLiteDataAdapterToolboxItem, SQLite.Designer, Version=1.0.119.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139")]
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.SqlDataAdapterDesigner, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Data.SQLite.SQLiteDataAdapter : DbDataAdapter {
    private bool disposeSelect;
    private static object _updatingEventPH;
    private static object _updatedEventPH;
    private bool disposed;
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SQLiteCommand SelectCommand { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SQLiteCommand InsertCommand { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SQLiteCommand UpdateCommand { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SQLiteCommand DeleteCommand { get; public set; }
    public SQLiteDataAdapter(SQLiteCommand cmd);
    public SQLiteDataAdapter(string commandText, SQLiteConnection connection);
    public SQLiteDataAdapter(string commandText, string connectionString);
    public SQLiteDataAdapter(string commandText, string connectionString, bool parseViaFramework);
    private static SQLiteDataAdapter();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    public void add_RowUpdating(EventHandler`1<RowUpdatingEventArgs> value);
    public void remove_RowUpdating(EventHandler`1<RowUpdatingEventArgs> value);
    internal static Delegate FindBuilder(MulticastDelegate mcd);
    public void add_RowUpdated(EventHandler`1<RowUpdatedEventArgs> value);
    public void remove_RowUpdated(EventHandler`1<RowUpdatedEventArgs> value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    public SQLiteCommand get_SelectCommand();
    public void set_SelectCommand(SQLiteCommand value);
    public SQLiteCommand get_InsertCommand();
    public void set_InsertCommand(SQLiteCommand value);
    public SQLiteCommand get_UpdateCommand();
    public void set_UpdateCommand(SQLiteCommand value);
    public SQLiteCommand get_DeleteCommand();
    public void set_DeleteCommand(SQLiteCommand value);
}
[DefaultMemberAttribute("Item")]
public class System.Data.SQLite.SQLiteDataReader : DbDataReader {
    private SQLiteCommand _command;
    internal SQLiteConnectionFlags _flags;
    private int _activeStatementIndex;
    private SQLiteStatement _activeStatement;
    private int _readingState;
    private int _rowsAffected;
    private int _fieldCount;
    private int _stepCount;
    private Dictionary`2<string, int> _fieldIndexes;
    private SQLiteType[] _fieldTypeArray;
    private CommandBehavior _commandBehavior;
    internal bool _disposeCommand;
    internal List`1<SQLiteStatement> _statementList;
    internal bool _throwOnDisposed;
    private SQLiteKeyReader _keyInfo;
    internal int _version;
    private string _baseSchemaName;
    private bool disposed;
    public int Depth { get; }
    public int FieldCount { get; }
    public int StepCount { get; }
    private int PrivateVisibleFieldCount { get; }
    public int VisibleFieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public object Item { get; }
    public object Item { get; }
    internal SQLiteDataReader(SQLiteCommand cmd, CommandBehavior behave);
    private void ResetIterationState();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    internal void Cancel();
    public virtual void Close();
    private void CheckClosed();
    private void CheckValidRow();
    public virtual IEnumerator GetEnumerator();
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public void RefreshFlags();
    public int get_StepCount();
    private int get_PrivateVisibleFieldCount();
    public virtual int get_VisibleFieldCount();
    private void VerifyForGet();
    private TypeAffinity VerifyType(int i, DbType typ);
    private void InvokeReadValueCallback(int index, SQLiteReadEventArgs eventArgs, Boolean& complete);
    internal Nullable`1<long> GetRowId(int i);
    public SQLiteBlob GetBlob(int i, bool readOnly);
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public virtual string GetDataTypeName(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public TypeAffinity GetFieldAffinity(int i);
    public virtual Type GetFieldType(int i);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual string GetName(int i);
    public string GetDatabaseName(int i);
    public string GetTableName(int i);
    public string GetOriginalName(int i);
    public virtual int GetOrdinal(string name);
    public virtual DataTable GetSchemaTable();
    private static void GetStatementColumnParents(SQLiteBase sql, SQLiteStatement stmt, int fieldCount, Dictionary`2& parentToColumns, Dictionary`2& columnToParent);
    private static int CountParents(Dictionary`2<ColumnParent, List`1<int>> parentToColumns);
    internal DataTable GetSchemaTable(bool wantUniqueInfo, bool wantDefaultValue);
    public virtual string GetString(int i);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    public NameValueCollection GetValues();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual bool IsDBNull(int i);
    private void CheckForRowsAffected(SQLiteStatement statement);
    private bool Step(SQLiteStatement statement);
    public virtual bool NextResult();
    internal static SQLiteConnection GetConnection(SQLiteDataReader dataReader);
    private SQLiteType GetSQLiteType(SQLiteType oldType, string text);
    private SQLiteType GetSQLiteType(SQLiteConnectionFlags flags, int i);
    public virtual bool Read();
    internal bool PrivateRead(bool ignoreSingleRow);
    public virtual int get_RecordsAffected();
    public virtual object get_Item(string name);
    public virtual object get_Item(int i);
    private void LoadKeyInfo();
}
public class System.Data.SQLite.SQLiteDataReaderValue : object {
    public SQLiteBlob BlobValue;
    public Nullable`1<bool> BooleanValue;
    public Nullable`1<byte> ByteValue;
    public Byte[] BytesValue;
    public Nullable`1<char> CharValue;
    public Char[] CharsValue;
    public Nullable`1<DateTime> DateTimeValue;
    public Nullable`1<decimal> DecimalValue;
    public Nullable`1<double> DoubleValue;
    public Nullable`1<float> FloatValue;
    public Nullable`1<Guid> GuidValue;
    public Nullable`1<short> Int16Value;
    public Nullable`1<int> Int32Value;
    public Nullable`1<long> Int64Value;
    public string StringValue;
    public object Value;
}
public enum System.Data.SQLite.SQLiteDateFormats : Enum {
    public int value__;
    public static SQLiteDateFormats Ticks;
    public static SQLiteDateFormats ISO8601;
    public static SQLiteDateFormats JulianDay;
    public static SQLiteDateFormats UnixEpoch;
    public static SQLiteDateFormats InvariantCulture;
    public static SQLiteDateFormats CurrentCulture;
    public static SQLiteDateFormats Default;
}
internal class System.Data.SQLite.SQLiteDbTypeMap : Dictionary`2<string, SQLiteDbTypeMapping> {
    private Dictionary`2<DbType, SQLiteDbTypeMapping> reverse;
    public SQLiteDbTypeMap(IEnumerable`1<SQLiteDbTypeMapping> collection);
    public int Clear();
    public void Add(IEnumerable`1<SQLiteDbTypeMapping> collection);
    public void Add(SQLiteDbTypeMapping item);
    public bool ContainsKey(DbType key);
    public bool TryGetValue(DbType key, SQLiteDbTypeMapping& value);
    public bool Remove(DbType key);
}
internal class System.Data.SQLite.SQLiteDbTypeMapping : object {
    internal string typeName;
    internal DbType dataType;
    internal bool primary;
    internal SQLiteDbTypeMapping(string newTypeName, DbType newDataType, bool newPrimary);
}
internal static class System.Data.SQLite.SQLiteDefineConstants : object {
    public static IList`1<string> OptionList;
    private static SQLiteDefineConstants();
}
public class System.Data.SQLite.SQLiteDelegateFunction : SQLiteFunction {
    private static string NoCallbackError;
    private static string ResultInt32Error;
    private Delegate callback1;
    private Delegate callback2;
    private Delegate callback3;
    private Delegate callback4;
    public Delegate Callback1 { get; public set; }
    public Delegate Callback2 { get; public set; }
    public Delegate Callback3 { get; public set; }
    public Delegate Callback4 { get; public set; }
    public SQLiteDelegateFunction(Delegate callback1, Delegate callback2);
    public SQLiteDelegateFunction(Delegate callback1, Delegate callback2, Delegate callback3, Delegate callback4);
    protected virtual Object[] GetInvokeArgs(Object[] args, bool earlyBound);
    protected virtual Object[] GetStepArgs(Object[] args, int stepNumber, object contextData, bool earlyBound);
    protected virtual void UpdateStepArgs(Object[] args, Object& contextData, bool earlyBound);
    protected virtual Object[] GetFinalArgs(object contextData, bool earlyBound);
    protected virtual Object[] GetValueArgs(object contextData, bool earlyBound);
    protected virtual Object[] GetInverseArgs(Object[] args, int stepNumber, object contextData, bool earlyBound);
    protected virtual void UpdateInverseArgs(Object[] args, Object& contextData, bool earlyBound);
    protected virtual Object[] GetCompareArgs(string param1, string param2, bool earlyBound);
    public virtual Delegate get_Callback1();
    public virtual void set_Callback1(Delegate value);
    public virtual Delegate get_Callback2();
    public virtual void set_Callback2(Delegate value);
    public virtual Delegate get_Callback3();
    public virtual void set_Callback3(Delegate value);
    public virtual Delegate get_Callback4();
    public virtual void set_Callback4(Delegate value);
    public virtual object Invoke(Object[] args);
    public virtual void Step(Object[] args, int stepNumber, Object& contextData);
    public virtual object Final(object contextData);
    public virtual object Value(object contextData);
    public virtual void Inverse(Object[] args, int stepNumber, Object& contextData);
    public virtual int Compare(string param1, string param2);
}
[FlagsAttribute]
internal enum System.Data.SQLite.SQLiteDeserializeFlags : Enum {
    public int value__;
    public static SQLiteDeserializeFlags SQLITE_DESERIALIZE_NONE;
    public static SQLiteDeserializeFlags SQLITE_DESERIALIZE_FREEONCLOSE;
    public static SQLiteDeserializeFlags SQLITE_DESERIALIZE_RESIZEABLE;
    public static SQLiteDeserializeFlags SQLITE_DESERIALIZE_READONLY;
}
[UnmanagedFunctionPointerAttribute("2")]
internal class System.Data.SQLite.SQLiteDestroyCallback : MulticastDelegate {
    public SQLiteDestroyCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr pUserData);
    public virtual IAsyncResult BeginInvoke(IntPtr pUserData, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.SQLite.SQLiteEnlistment : object {
    internal SQLiteTransaction _transaction;
    internal Transaction _scope;
    internal bool _disposeConnection;
    private bool disposed;
    internal SQLiteEnlistment(SQLiteConnection cnn, Transaction scope, IsolationLevel defaultIsolationLevel, bool throwOnUnavailable, bool throwOnUnsupported);
    private IsolationLevel GetSystemDataIsolationLevel(SQLiteConnection connection, Transaction transaction, IsolationLevel defaultIsolationLevel, bool throwOnUnavailable, bool throwOnUnsupported);
    private void Cleanup(SQLiteConnection cnn);
    public sealed virtual void Dispose();
    private void CheckDisposed();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual void Commit(Enlistment enlistment);
    public sealed virtual void InDoubt(Enlistment enlistment);
    public sealed virtual void Prepare(PreparingEnlistment preparingEnlistment);
    public sealed virtual void Rollback(Enlistment enlistment);
}
public enum System.Data.SQLite.SQLiteErrorCode : Enum {
    public int value__;
    public static SQLiteErrorCode Unknown;
    public static SQLiteErrorCode Ok;
    public static SQLiteErrorCode Error;
    public static SQLiteErrorCode Internal;
    public static SQLiteErrorCode Perm;
    public static SQLiteErrorCode Abort;
    public static SQLiteErrorCode Busy;
    public static SQLiteErrorCode Locked;
    public static SQLiteErrorCode NoMem;
    public static SQLiteErrorCode ReadOnly;
    public static SQLiteErrorCode Interrupt;
    public static SQLiteErrorCode IoErr;
    public static SQLiteErrorCode Corrupt;
    public static SQLiteErrorCode NotFound;
    public static SQLiteErrorCode Full;
    public static SQLiteErrorCode CantOpen;
    public static SQLiteErrorCode Protocol;
    public static SQLiteErrorCode Empty;
    public static SQLiteErrorCode Schema;
    public static SQLiteErrorCode TooBig;
    public static SQLiteErrorCode Constraint;
    public static SQLiteErrorCode Mismatch;
    public static SQLiteErrorCode Misuse;
    public static SQLiteErrorCode NoLfs;
    public static SQLiteErrorCode Auth;
    public static SQLiteErrorCode Format;
    public static SQLiteErrorCode Range;
    public static SQLiteErrorCode NotADb;
    public static SQLiteErrorCode Notice;
    public static SQLiteErrorCode Warning;
    public static SQLiteErrorCode Row;
    public static SQLiteErrorCode Done;
    public static SQLiteErrorCode NonExtendedMask;
    public static SQLiteErrorCode Error_Missing_CollSeq;
    public static SQLiteErrorCode Error_Retry;
    public static SQLiteErrorCode Error_Snapshot;
    public static SQLiteErrorCode IoErr_Read;
    public static SQLiteErrorCode IoErr_Short_Read;
    public static SQLiteErrorCode IoErr_Write;
    public static SQLiteErrorCode IoErr_Fsync;
    public static SQLiteErrorCode IoErr_Dir_Fsync;
    public static SQLiteErrorCode IoErr_Truncate;
    public static SQLiteErrorCode IoErr_Fstat;
    public static SQLiteErrorCode IoErr_Unlock;
    public static SQLiteErrorCode IoErr_RdLock;
    public static SQLiteErrorCode IoErr_Delete;
    public static SQLiteErrorCode IoErr_Blocked;
    public static SQLiteErrorCode IoErr_NoMem;
    public static SQLiteErrorCode IoErr_Access;
    public static SQLiteErrorCode IoErr_CheckReservedLock;
    public static SQLiteErrorCode IoErr_Lock;
    public static SQLiteErrorCode IoErr_Close;
    public static SQLiteErrorCode IoErr_Dir_Close;
    public static SQLiteErrorCode IoErr_ShmOpen;
    public static SQLiteErrorCode IoErr_ShmSize;
    public static SQLiteErrorCode IoErr_ShmLock;
    public static SQLiteErrorCode IoErr_ShmMap;
    public static SQLiteErrorCode IoErr_Seek;
    public static SQLiteErrorCode IoErr_Delete_NoEnt;
    public static SQLiteErrorCode IoErr_Mmap;
    public static SQLiteErrorCode IoErr_GetTempPath;
    public static SQLiteErrorCode IoErr_ConvPath;
    public static SQLiteErrorCode IoErr_VNode;
    public static SQLiteErrorCode IoErr_Auth;
    public static SQLiteErrorCode IoErr_Begin_Atomic;
    public static SQLiteErrorCode IoErr_Commit_Atomic;
    public static SQLiteErrorCode IoErr_Rollback_Atomic;
    public static SQLiteErrorCode IoErr_Data;
    public static SQLiteErrorCode IoErr_CorruptFs;
    public static SQLiteErrorCode IoErr_In_Page;
    public static SQLiteErrorCode Locked_SharedCache;
    public static SQLiteErrorCode Locked_Vtab;
    public static SQLiteErrorCode Busy_Recovery;
    public static SQLiteErrorCode Busy_Snapshot;
    public static SQLiteErrorCode Busy_Timeout;
    public static SQLiteErrorCode CantOpen_NoTempDir;
    public static SQLiteErrorCode CantOpen_IsDir;
    public static SQLiteErrorCode CantOpen_FullPath;
    public static SQLiteErrorCode CantOpen_ConvPath;
    public static SQLiteErrorCode CantOpen_DirtyWal;
    public static SQLiteErrorCode CantOpen_SymLink;
    public static SQLiteErrorCode Corrupt_Vtab;
    public static SQLiteErrorCode Corrupt_Sequence;
    public static SQLiteErrorCode Corrupt_Index;
    public static SQLiteErrorCode ReadOnly_Recovery;
    public static SQLiteErrorCode ReadOnly_CantLock;
    public static SQLiteErrorCode ReadOnly_Rollback;
    public static SQLiteErrorCode ReadOnly_DbMoved;
    public static SQLiteErrorCode ReadOnly_CantInit;
    public static SQLiteErrorCode ReadOnly_Directory;
    public static SQLiteErrorCode Abort_Rollback;
    public static SQLiteErrorCode Constraint_Check;
    public static SQLiteErrorCode Constraint_CommitHook;
    public static SQLiteErrorCode Constraint_ForeignKey;
    public static SQLiteErrorCode Constraint_Function;
    public static SQLiteErrorCode Constraint_NotNull;
    public static SQLiteErrorCode Constraint_PrimaryKey;
    public static SQLiteErrorCode Constraint_Trigger;
    public static SQLiteErrorCode Constraint_Unique;
    public static SQLiteErrorCode Constraint_Vtab;
    public static SQLiteErrorCode Constraint_RowId;
    public static SQLiteErrorCode Constraint_Pinned;
    public static SQLiteErrorCode Constraint_DataType;
    public static SQLiteErrorCode Misuse_No_License;
    public static SQLiteErrorCode Notice_Recover_Wal;
    public static SQLiteErrorCode Notice_Recover_Rollback;
    public static SQLiteErrorCode Notice_Rbu;
    public static SQLiteErrorCode Warning_AutoIndex;
    public static SQLiteErrorCode Auth_User;
    public static SQLiteErrorCode Ok_Load_Permanently;
    public static SQLiteErrorCode Ok_SymLink;
}
public class System.Data.SQLite.SQLiteException : DbException {
    private static int FACILITY_SQLITE;
    private SQLiteErrorCode _errorCode;
    public SQLiteErrorCode ResultCode { get; }
    public int ErrorCode { get; }
    private SQLiteException(SerializationInfo info, StreamingContext context);
    public SQLiteException(SQLiteErrorCode errorCode, string message);
    public SQLiteException(string message);
    public SQLiteException(string message, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public SQLiteErrorCode get_ResultCode();
    public virtual int get_ErrorCode();
    private void Initialize();
    private static int MakeHResult(int errorCode, bool success);
    private static int MaybeMutateErrorCode(int value);
    private static SQLiteErrorCode MaybeMutateErrorCode(SQLiteErrorCode value);
    private static int GetErrorCodeForHResult(int hResult);
    private static Nullable`1<int> GetHResultForErrorCode(SQLiteErrorCode errorCode);
    private static string GetErrorString(SQLiteErrorCode errorCode);
    private static string GetStockErrorMessage(SQLiteErrorCode errorCode, string message);
    public virtual string ToString();
}
public enum System.Data.SQLite.SQLiteExecuteType : Enum {
    public int value__;
    public static SQLiteExecuteType None;
    public static SQLiteExecuteType NonQuery;
    public static SQLiteExecuteType Scalar;
    public static SQLiteExecuteType Reader;
    public static SQLiteExecuteType Default;
}
[ObfuscationAttribute]
public static class System.Data.SQLite.SQLiteExtra : object {
    private static Assembly EntryAssembly;
    private static Assembly ThisAssembly;
    private static string TargetPublicKeyToken;
    private static string LegacyPublicKeyToken;
    private static string TargetAssemblyNameShortFormat;
    private static string TargetAssemblyNameFullFormat;
    private static string TargetTypeName;
    private static string VerifyMethodName;
    private static string ConfigureMethodName;
    private static string CleanupMethodName;
    private static string FileName;
    private static string CrashDirectoryEnvVarName;
    private static string CrashFileName;
    private static string TracePrioritiesEnvVarName;
    private static string TracePrioritiesEnvVarValue;
    private static string NoTraceLimitsEnvVarName;
    private static string ForceEnableTraceEnvVarName;
    private static string ForceEnableTraceLogFileEnvVarName;
    private static string BasePurchaseUri1;
    private static string BasePurchaseUri2;
    private static string Separator;
    private static string NullValue;
    private static string EmptyValue;
    private static string UnknownValue;
    private static string NameFormat;
    private static string ValueFormat;
    private static string ElementFormat;
    private static string BaseEnvVarName;
    private static string FileNameEnvVarFormat;
    private static string NoPurchaseUriEnvVarFormat;
    private static string AlwaysVerifyEnvVarName;
    private static string AsynchronousLicensingEnvVarName;
    private static int VerifyEveryCountMaximum;
    private static int VerifyEverySecondsMaximum;
    private static object syncRoot;
    private static Assembly targetAssembly;
    private static Type targetType;
    private static MethodInfo verifyMethodInfo;
    private static MethodInfo configureMethodInfo;
    private static MethodInfo cleanupMethodInfo;
    private static string verifyDirectory;
    private static int verifyCount;
    private static int verifyEveryCount;
    private static int verifyPurchaseCount;
    private static int configureCount;
    private static int cleanupCount;
    private static Nullable`1<DateTime> verifyEveryWhen;
    private static Nullable`1<DateTime> configureEveryWhen;
    private static Nullable`1<DateTime> cleanupEveryWhen;
    private static double verifyMilliseconds;
    private static double configureMilliseconds;
    private static double cleanupMilliseconds;
    private static SQLiteExtra();
    private static string GetCrashFileName();
    private static bool CheckForCrashFile();
    private static void WriteCrashFile(string methodName, string argument, string error);
    private static string GetAssemblyTitle(Assembly assembly);
    private static string DisplayString(string value, bool wrap);
    private static string CertificateToString(IList`1<string> certificate);
    private static string EscapeUriString(string value);
    private static string BuildUri(string baseUri, Assembly assembly, string error);
    private static bool ShouldVerify();
    private static WaitCallback CreateWaitCallback(string argument);
    private static OpResult InnerVerify(string argument);
    private static OpResult InnerConfigure(string argument);
    private static OpResult InnerCleanup();
    private static void FinallyForVerify(OpResult result, DateTime start);
    private static void FinallyForConfigure(OpResult result, DateTime start);
    private static void FinallyForCleanup(OpResult result, DateTime start);
    public static int Verify(string argument);
    public static int Configure(string argument);
    public static int Cleanup();
}
public class System.Data.SQLite.SQLiteFactory : DbProviderFactory {
    private bool disposed;
    public static SQLiteFactory Instance;
    private static string DefaultTypeName;
    private static BindingFlags DefaultBindingFlags;
    private static Type _dbProviderServicesType;
    private static object _sqliteServices;
    private static SQLiteFactory();
    public sealed virtual void Dispose();
    private void CheckDisposed();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    public void add_Log(SQLiteLogEventHandler value);
    public void remove_Log(SQLiteLogEventHandler value);
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
    internal static void PreInitialize();
    private static void InitializeDbProviderServices();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private object GetSQLiteProviderServicesInstance();
}
[UnmanagedFunctionPointerAttribute("2")]
internal class System.Data.SQLite.SQLiteFinalCallback : MulticastDelegate {
    public SQLiteFinalCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr context);
    public virtual IAsyncResult BeginInvoke(IntPtr context, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.SQLite.SQLiteFinalDelegate : MulticastDelegate {
    public SQLiteFinalDelegate(object object, IntPtr method);
    public virtual object Invoke(string param0, object contextData);
    public virtual IAsyncResult BeginInvoke(string param0, object contextData, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public abstract class System.Data.SQLite.SQLiteFunction : object {
    internal SQLiteBase _base;
    private Dictionary`2<IntPtr, AggregateData> _contextDataList;
    private SQLiteConnectionFlags _flags;
    private SQLiteCallback _InvokeFunc;
    private SQLiteCallback _StepFunc;
    private SQLiteFinalCallback _FinalFunc;
    private SQLiteFinalCallback _ValueFunc;
    private SQLiteCallback _InverseFunc;
    private SQLiteCollation _CompareFunc;
    private SQLiteCollation _CompareFunc16;
    private IntPtr[] _params;
    internal IntPtr _context;
    private static IDictionary`2<SQLiteFunctionAttribute, object> _registeredFunctions;
    private bool disposed;
    public SQLiteConvert SQLiteConvert { get; }
    protected SQLiteFunction(SQLiteDateFormats format, DateTimeKind kind, string formatString, bool utf16);
    private static SQLiteFunction();
    public sealed virtual void Dispose();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public SQLiteConvert get_SQLiteConvert();
    public virtual object Invoke(Object[] args);
    public virtual void Step(Object[] args, int stepNumber, Object& contextData);
    public virtual object Final(object contextData);
    public virtual object Value(object contextData);
    public virtual void Inverse(Object[] args, int stepNumber, Object& contextData);
    public virtual int Compare(string param1, string param2);
    public UInt32 GetParameterSubType(int index);
    public TypeAffinity GetParameterNumericType(int index);
    public int GetParameterNoChange(int index);
    public int GetParameterFromBind(int index);
    public void SetReturnSubType(UInt32 value);
    private void CheckParameterIndex(int index);
    internal Object[] ConvertParams(int nArgs, IntPtr argsptr, IntPtr[]& paramptrs);
    private void SetReturnValue(IntPtr context, object returnValue);
    internal void ScalarCallback(IntPtr context, int nArgs, IntPtr argsptr);
    internal int CompareCallback(IntPtr ptr, int len1, IntPtr ptr1, int len2, IntPtr ptr2);
    internal int CompareCallback16(IntPtr ptr, int len1, IntPtr ptr1, int len2, IntPtr ptr2);
    internal void StepCallback(IntPtr context, int nArgs, IntPtr argsptr);
    internal void FinalCallback(IntPtr context);
    internal void ValueCallback(IntPtr context);
    internal void InverseCallback(IntPtr context, int nArgs, IntPtr argsptr);
    public static void RegisterFunction(Type typ);
    public static void RegisterFunction(string name, int argumentCount, FunctionType functionType, Type instanceType, Delegate callback1, Delegate callback2);
    public static void RegisterFunction(string name, int argumentCount, FunctionType functionType, SQLiteFunctionFlags functionFlags, Type instanceType, Delegate callback1, Delegate callback2, Delegate callback3, Delegate callback4);
    private static bool ReplaceFunction(SQLiteFunctionAttribute at, object newValue);
    private static bool CreateFunction(SQLiteFunctionAttribute functionAttribute, SQLiteFunction& function);
    internal static IDictionary`2<SQLiteFunctionAttribute, SQLiteFunction> BindFunctions(SQLiteBase sqlbase, SQLiteConnectionFlags flags);
    internal static bool UnbindAllFunctions(SQLiteBase sqlbase, SQLiteConnectionFlags flags, bool registered);
    internal static void BindFunction(SQLiteBase sqliteBase, SQLiteFunctionAttribute functionAttribute, SQLiteFunction function, SQLiteConnectionFlags flags);
    internal static bool UnbindFunction(SQLiteBase sqliteBase, SQLiteFunctionAttribute functionAttribute, SQLiteFunction function, SQLiteConnectionFlags flags);
}
[AttributeUsageAttribute("4")]
public class System.Data.SQLite.SQLiteFunctionAttribute : Attribute {
    private string _name;
    private int _argumentCount;
    private FunctionType _functionType;
    private SQLiteFunctionFlags _functionFlags;
    private Type _instanceType;
    private Delegate _callback1;
    private Delegate _callback2;
    private Delegate _callback3;
    private Delegate _callback4;
    public string Name { get; public set; }
    public int Arguments { get; public set; }
    public FunctionType FuncType { get; public set; }
    public SQLiteFunctionFlags FuncFlags { get; public set; }
    internal Type InstanceType { get; internal set; }
    internal Delegate Callback1 { get; internal set; }
    internal Delegate Callback2 { get; internal set; }
    internal Delegate Callback3 { get; internal set; }
    internal Delegate Callback4 { get; internal set; }
    public SQLiteFunctionAttribute(string name, int argumentCount, FunctionType functionType);
    public SQLiteFunctionAttribute(string name, int argumentCount, FunctionType functionType, SQLiteFunctionFlags functionFlags);
    public string get_Name();
    public void set_Name(string value);
    public int get_Arguments();
    public void set_Arguments(int value);
    public FunctionType get_FuncType();
    public void set_FuncType(FunctionType value);
    public SQLiteFunctionFlags get_FuncFlags();
    public void set_FuncFlags(SQLiteFunctionFlags value);
    internal Type get_InstanceType();
    internal void set_InstanceType(Type value);
    internal Delegate get_Callback1();
    internal void set_Callback1(Delegate value);
    internal Delegate get_Callback2();
    internal void set_Callback2(Delegate value);
    internal Delegate get_Callback3();
    internal void set_Callback3(Delegate value);
    internal Delegate get_Callback4();
    internal void set_Callback4(Delegate value);
}
public class System.Data.SQLite.SQLiteFunctionEx : SQLiteFunction {
    private bool disposed;
    protected CollationSequence GetCollationSequence();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
}
[FlagsAttribute]
public enum System.Data.SQLite.SQLiteFunctionFlags : Enum {
    public int value__;
    public static SQLiteFunctionFlags NONE;
    public static SQLiteFunctionFlags SQLITE_UTF8;
    public static SQLiteFunctionFlags SQLITE_UTF16LE;
    public static SQLiteFunctionFlags SQLITE_UTF16BE;
    public static SQLiteFunctionFlags SQLITE_UTF16;
    public static SQLiteFunctionFlags SQLITE_ANY;
    public static SQLiteFunctionFlags SQLITE_UTF16_ALIGNED;
    public static SQLiteFunctionFlags ENCODING_MASK;
    public static SQLiteFunctionFlags SQLITE_DETERMINISTIC;
    public static SQLiteFunctionFlags SQLITE_DIRECTONLY;
    public static SQLiteFunctionFlags SQLITE_SUBTYPE;
    public static SQLiteFunctionFlags SQLITE_INNOCUOUS;
    public static SQLiteFunctionFlags SQLITE_RESULT_SUBTYPE;
}
public class System.Data.SQLite.SQLiteGetPasswordCallback : MulticastDelegate {
    public SQLiteGetPasswordCallback(object object, IntPtr method);
    public virtual Byte[] Invoke(SQLiteConnection connection, PasswordMode& passwordMode);
    public virtual IAsyncResult BeginInvoke(SQLiteConnection connection, PasswordMode& passwordMode, AsyncCallback callback, object object);
    public virtual Byte[] EndInvoke(PasswordMode& passwordMode, IAsyncResult result);
}
public class System.Data.SQLite.SQLiteIndex : object {
    private SQLiteIndexInputs inputs;
    private SQLiteIndexOutputs outputs;
    public SQLiteIndexInputs Inputs { get; }
    public SQLiteIndexOutputs Outputs { get; }
    internal SQLiteIndex(int nConstraint, int nOrderBy);
    private static void SizeOfNative(Int32& sizeOfInfoType, Int32& sizeOfConstraintType, Int32& sizeOfOrderByType, Int32& sizeOfConstraintUsageType);
    private static IntPtr AllocateAndInitializeNative(int nConstraint, int nOrderBy);
    private static void FreeNative(IntPtr pIndex);
    internal static void FromIntPtr(IntPtr pIndex, bool includeOutput, SQLiteIndex& index);
    internal static void ToIntPtr(SQLiteIndex index, IntPtr pIndex, bool includeInput);
    public SQLiteIndexInputs get_Inputs();
    public SQLiteIndexOutputs get_Outputs();
}
public class System.Data.SQLite.SQLiteIndexConstraint : object {
    public int iColumn;
    public SQLiteIndexConstraintOp op;
    public byte usable;
    public int iTermOffset;
    internal SQLiteIndexConstraint(sqlite3_index_constraint constraint);
    private SQLiteIndexConstraint(int iColumn, SQLiteIndexConstraintOp op, byte usable, int iTermOffset);
}
public enum System.Data.SQLite.SQLiteIndexConstraintOp : Enum {
    public byte value__;
    public static SQLiteIndexConstraintOp EqualTo;
    public static SQLiteIndexConstraintOp GreaterThan;
    public static SQLiteIndexConstraintOp LessThanOrEqualTo;
    public static SQLiteIndexConstraintOp LessThan;
    public static SQLiteIndexConstraintOp GreaterThanOrEqualTo;
    public static SQLiteIndexConstraintOp Match;
    public static SQLiteIndexConstraintOp Like;
    public static SQLiteIndexConstraintOp Glob;
    public static SQLiteIndexConstraintOp Regexp;
    public static SQLiteIndexConstraintOp NotEqualTo;
    public static SQLiteIndexConstraintOp IsNot;
    public static SQLiteIndexConstraintOp IsNotNull;
    public static SQLiteIndexConstraintOp IsNull;
    public static SQLiteIndexConstraintOp Is;
}
public class System.Data.SQLite.SQLiteIndexConstraintUsage : object {
    public int argvIndex;
    public byte omit;
    internal SQLiteIndexConstraintUsage(sqlite3_index_constraint_usage constraintUsage);
    private SQLiteIndexConstraintUsage(int argvIndex, byte omit);
}
[FlagsAttribute]
public enum System.Data.SQLite.SQLiteIndexFlags : Enum {
    public int value__;
    public static SQLiteIndexFlags None;
    public static SQLiteIndexFlags ScanUnique;
}
public class System.Data.SQLite.SQLiteIndexInputs : object {
    private SQLiteIndexConstraint[] constraints;
    private SQLiteIndexOrderBy[] orderBys;
    public SQLiteIndexConstraint[] Constraints { get; }
    public SQLiteIndexOrderBy[] OrderBys { get; }
    internal SQLiteIndexInputs(int nConstraint, int nOrderBy);
    public SQLiteIndexConstraint[] get_Constraints();
    public SQLiteIndexOrderBy[] get_OrderBys();
}
public class System.Data.SQLite.SQLiteIndexOrderBy : object {
    public int iColumn;
    public byte desc;
    internal SQLiteIndexOrderBy(sqlite3_index_orderby orderBy);
    private SQLiteIndexOrderBy(int iColumn, byte desc);
}
public class System.Data.SQLite.SQLiteIndexOutputs : object {
    private SQLiteIndexConstraintUsage[] constraintUsages;
    private int indexNumber;
    private string indexString;
    private int needToFreeIndexString;
    private int orderByConsumed;
    private Nullable`1<double> estimatedCost;
    private Nullable`1<long> estimatedRows;
    private Nullable`1<SQLiteIndexFlags> indexFlags;
    private Nullable`1<long> columnsUsed;
    public SQLiteIndexConstraintUsage[] ConstraintUsages { get; }
    public int IndexNumber { get; public set; }
    public string IndexString { get; public set; }
    public int NeedToFreeIndexString { get; public set; }
    public int OrderByConsumed { get; public set; }
    public Nullable`1<double> EstimatedCost { get; public set; }
    public Nullable`1<long> EstimatedRows { get; public set; }
    public Nullable`1<SQLiteIndexFlags> IndexFlags { get; public set; }
    public Nullable`1<long> ColumnsUsed { get; public set; }
    internal SQLiteIndexOutputs(int nConstraint);
    public bool CanUseEstimatedRows();
    public bool CanUseIndexFlags();
    public bool CanUseColumnsUsed();
    public SQLiteIndexConstraintUsage[] get_ConstraintUsages();
    public int get_IndexNumber();
    public void set_IndexNumber(int value);
    public string get_IndexString();
    public void set_IndexString(string value);
    public int get_NeedToFreeIndexString();
    public void set_NeedToFreeIndexString(int value);
    public int get_OrderByConsumed();
    public void set_OrderByConsumed(int value);
    public Nullable`1<double> get_EstimatedCost();
    public void set_EstimatedCost(Nullable`1<double> value);
    public Nullable`1<long> get_EstimatedRows();
    public void set_EstimatedRows(Nullable`1<long> value);
    public Nullable`1<SQLiteIndexFlags> get_IndexFlags();
    public void set_IndexFlags(Nullable`1<SQLiteIndexFlags> value);
    public Nullable`1<long> get_ColumnsUsed();
    public void set_ColumnsUsed(Nullable`1<long> value);
}
public class System.Data.SQLite.SQLiteInvokeDelegate : MulticastDelegate {
    public SQLiteInvokeDelegate(object object, IntPtr method);
    public virtual object Invoke(string param0, Object[] args);
    public virtual IAsyncResult BeginInvoke(string param0, Object[] args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public enum System.Data.SQLite.SQLiteJournalModeEnum : Enum {
    public int value__;
    public static SQLiteJournalModeEnum Default;
    public static SQLiteJournalModeEnum Delete;
    public static SQLiteJournalModeEnum Persist;
    public static SQLiteJournalModeEnum Off;
    public static SQLiteJournalModeEnum Truncate;
    public static SQLiteJournalModeEnum Memory;
    public static SQLiteJournalModeEnum Wal;
}
internal class System.Data.SQLite.SQLiteKeyReader : object {
    private KeyInfo[] _keyInfo;
    private SQLiteStatement _stmt;
    private bool _isValid;
    private RowIdInfo[] _rowIdInfo;
    private bool disposed;
    internal int Count { get; }
    internal SQLiteKeyReader(SQLiteConnection cnn, SQLiteDataReader reader, SQLiteStatement stmt);
    internal int GetRowIdIndex(string databaseName, string tableName);
    internal Nullable`1<long> GetRowId(string databaseName, string tableName);
    public sealed virtual void Dispose();
    private void CheckDisposed();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    internal int get_Count();
    private void Sync(int i);
    private void Sync();
    internal void Reset();
    internal string GetDataTypeName(int i);
    internal TypeAffinity GetFieldAffinity(int i);
    internal Type GetFieldType(int i);
    internal string GetDatabaseName(int i);
    internal string GetTableName(int i);
    internal string GetName(int i);
    internal int GetOrdinal(string name);
    internal SQLiteBlob GetBlob(int i, bool readOnly);
    internal bool GetBoolean(int i);
    internal byte GetByte(int i);
    internal long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    internal char GetChar(int i);
    internal long GetChars(int i, long fieldOffset, Char[] buffer, int bufferoffset, int length);
    internal DateTime GetDateTime(int i);
    internal decimal GetDecimal(int i);
    internal double GetDouble(int i);
    internal float GetFloat(int i);
    internal Guid GetGuid(int i);
    internal short GetInt16(int i);
    internal int GetInt32(int i);
    internal long GetInt64(int i);
    internal string GetString(int i);
    internal object GetValue(int i);
    internal bool IsDBNull(int i);
    internal void AppendSchemaTable(DataTable tbl);
}
public enum System.Data.SQLite.SQLiteLimitOpsEnum : Enum {
    public int value__;
    public static SQLiteLimitOpsEnum SQLITE_LIMIT_NONE;
    public static SQLiteLimitOpsEnum SQLITE_LIMIT_LENGTH;
    public static SQLiteLimitOpsEnum SQLITE_LIMIT_SQL_LENGTH;
    public static SQLiteLimitOpsEnum SQLITE_LIMIT_COLUMN;
    public static SQLiteLimitOpsEnum SQLITE_LIMIT_EXPR_DEPTH;
    public static SQLiteLimitOpsEnum SQLITE_LIMIT_COMPOUND_SELECT;
    public static SQLiteLimitOpsEnum SQLITE_LIMIT_VDBE_OP;
    public static SQLiteLimitOpsEnum SQLITE_LIMIT_FUNCTION_ARG;
    public static SQLiteLimitOpsEnum SQLITE_LIMIT_ATTACHED;
    public static SQLiteLimitOpsEnum SQLITE_LIMIT_LIKE_PATTERN_LENGTH;
    public static SQLiteLimitOpsEnum SQLITE_LIMIT_VARIABLE_NUMBER;
    public static SQLiteLimitOpsEnum SQLITE_LIMIT_TRIGGER_DEPTH;
    public static SQLiteLimitOpsEnum SQLITE_LIMIT_WORKER_THREADS;
}
public static class System.Data.SQLite.SQLiteLog : object {
    private static int _initializeTimeout;
    private static object syncRoot;
    private static EventWaitHandle _initializeEvent;
    private static EventHandler _domainUnload;
    [CompilerGeneratedAttribute]
private static SQLiteLogEventHandler _handlers;
    private static SQLiteLogEventHandler _defaultHandler;
    private static SQLiteLogCallback _callback;
    private static SQLiteBase _sql;
    private static int _initializeCallCount;
    private static int _uninitializeCallCount;
    private static int _initializeDoneCount;
    private static int _attemptedInitialize;
    private static bool _enabled;
    public static bool Enabled { get; public set; }
    internal static bool InternalEnabled { get; internal set; }
    private static SQLiteLog();
    [CompilerGeneratedAttribute]
private static void add__handlers(SQLiteLogEventHandler value);
    [CompilerGeneratedAttribute]
private static void remove__handlers(SQLiteLogEventHandler value);
    private static EventWaitHandle CreateAndOrGetTheEvent();
    private static bool CanIgnoreIsInitialized();
    public static void Initialize();
    internal static void Initialize(string className);
    private static bool PrivateInitialize(string className);
    public static void Uninitialize();
    internal static void Uninitialize(string className, bool shutdown);
    private static void DomainUnload(object sender, EventArgs e);
    public static void add_Log(SQLiteLogEventHandler value);
    public static void remove_Log(SQLiteLogEventHandler value);
    public static bool get_Enabled();
    public static void set_Enabled(bool value);
    internal static bool get_InternalEnabled();
    internal static void set_InternalEnabled(bool value);
    public static void LogMessage(string message);
    public static void LogMessage(SQLiteErrorCode errorCode, string message);
    public static void LogMessage(int errorCode, string message);
    private static void LogMessage(object errorCode, string message);
    private static void InitializeDefaultHandler();
    public static void AddDefaultHandler();
    public static void RemoveDefaultHandler();
    private static void LogCallback(IntPtr pUserData, int errorCode, IntPtr pMessage);
    private static void LogEventHandler(object sender, LogEventArgs e);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class System.Data.SQLite.SQLiteLogCallback : MulticastDelegate {
    public SQLiteLogCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr pUserData, int errorCode, IntPtr pMessage);
    public virtual IAsyncResult BeginInvoke(IntPtr pUserData, int errorCode, IntPtr pMessage, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.SQLite.SQLiteLogEventHandler : MulticastDelegate {
    public SQLiteLogEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LogEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LogEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class System.Data.SQLite.SQLiteMarshal : object {
    public static IntPtr IntPtrForOffset(IntPtr pointer, int offset);
    public static int RoundUp(int size, int alignment);
    public static int NextOffsetOf(int offset, int size, int alignment);
    public static int ReadInt32(IntPtr pointer, int offset);
    public static long ReadInt64(IntPtr pointer, int offset);
    public static double ReadDouble(IntPtr pointer, int offset);
    public static IntPtr ReadIntPtr(IntPtr pointer, int offset);
    public static void WriteInt32(IntPtr pointer, int offset, int value);
    public static void WriteInt64(IntPtr pointer, int offset, long value);
    public static void WriteDouble(IntPtr pointer, int offset, double value);
    public static void WriteIntPtr(IntPtr pointer, int offset, IntPtr value);
    public static int GetHashCode(object value, bool identity);
}
internal static class System.Data.SQLite.SQLiteMemory : object {
    private static object syncRoot;
    private static ulong bytesAllocated;
    private static ulong maximumBytesAllocated;
    private static SQLiteMemory();
    private static ulong GetBlockSize(IntPtr pMemory);
    private static void MemoryWasAllocated(IntPtr pMemory);
    private static void MemoryIsBeingFreed(IntPtr pMemory);
    private static bool CanUseSize64();
    public static IntPtr Allocate(int size);
    public static IntPtr Allocate64(ulong size);
    public static IntPtr AllocateUntracked(int size);
    public static IntPtr Allocate64Untracked(ulong size);
    public static int Size(IntPtr pMemory);
    public static ulong Size64(IntPtr pMemory);
    public static void Free(IntPtr pMemory);
    public static void FreeUntracked(IntPtr pMemory);
}
internal class System.Data.SQLite.SQLiteMemoryChangeSet : SQLiteChangeSetBase {
    private Byte[] rawData;
    private SQLiteChangeSetStartFlags startFlags;
    private bool disposed;
    internal SQLiteMemoryChangeSet(Byte[] rawData, SQLiteConnectionHandle handle, SQLiteConnectionFlags connectionFlags);
    internal SQLiteMemoryChangeSet(Byte[] rawData, SQLiteConnectionHandle handle, SQLiteConnectionFlags connectionFlags, SQLiteChangeSetStartFlags startFlags);
    public sealed virtual ISQLiteChangeSet Invert();
    public sealed virtual ISQLiteChangeSet CombineWith(ISQLiteChangeSet changeSet);
    public sealed virtual void Apply(SessionConflictCallback conflictCallback, object clientData);
    public sealed virtual void Apply(SessionConflictCallback conflictCallback, SessionTableFilterCallback tableFilterCallback, object clientData);
    public sealed virtual IEnumerator`1<ISQLiteChangeSetMetadataItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
}
internal class System.Data.SQLite.SQLiteMemoryChangeSetEnumerator : SQLiteChangeSetEnumerator {
    private Byte[] rawData;
    private SQLiteChangeSetStartFlags flags;
    private bool disposed;
    public SQLiteMemoryChangeSetEnumerator(Byte[] rawData);
    public SQLiteMemoryChangeSetEnumerator(Byte[] rawData, SQLiteChangeSetStartFlags flags);
    public virtual void Reset();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
}
internal class System.Data.SQLite.SQLiteMemoryChangeSetIterator : SQLiteChangeSetIterator {
    private IntPtr pData;
    private bool disposed;
    private SQLiteMemoryChangeSetIterator(IntPtr pData, IntPtr iterator, bool ownHandle);
    public static SQLiteMemoryChangeSetIterator Create(Byte[] rawData);
    public static SQLiteMemoryChangeSetIterator Create(Byte[] rawData, SQLiteChangeSetStartFlags flags);
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
}
public static class System.Data.SQLite.SQLiteMetaDataCollectionNames : object {
    public static string Catalogs;
    public static string Columns;
    public static string Indexes;
    public static string IndexColumns;
    public static string Tables;
    public static string Views;
    public static string ViewColumns;
    public static string ForeignKeys;
    public static string Triggers;
    private static SQLiteMetaDataCollectionNames();
}
public abstract class System.Data.SQLite.SQLiteModule : object {
    private static int DefaultModuleVersion;
    private sqlite3_module nativeModule;
    private xDestroyModule destroyModule;
    private IntPtr disposableModule;
    private Dictionary`2<IntPtr, SQLiteVirtualTable> tables;
    private Dictionary`2<IntPtr, SQLiteVirtualTableCursor> cursors;
    private Dictionary`2<string, SQLiteFunction> functions;
    private bool logErrors;
    private bool logExceptions;
    private bool declared;
    private string name;
    private bool disposed;
    protected bool LogErrorsNoThrow { get; protected set; }
    protected bool LogExceptionsNoThrow { get; protected set; }
    public bool LogErrors { get; public set; }
    public bool LogExceptions { get; public set; }
    public bool Declared { get; internal set; }
    public string Name { get; }
    public SQLiteModule(string name);
    private static SQLiteModule();
    internal bool CreateDisposableModule(IntPtr pDb);
    private void xDestroyModule(IntPtr pClientData);
    private sqlite3_module AllocateNativeModule();
    private sqlite3_module AllocateNativeModule(ISQLiteNativeModule module);
    private sqlite3_module CopyNativeModule(sqlite3_module module);
    private SQLiteErrorCode CreateOrConnect(bool create, IntPtr pDb, IntPtr pAux, int argc, IntPtr argv, IntPtr& pVtab, IntPtr& pError);
    private SQLiteErrorCode DestroyOrDisconnect(bool destroy, IntPtr pVtab);
    private static bool SetTableError(SQLiteModule module, IntPtr pVtab, bool logErrors, bool logExceptions, string error);
    private static bool SetTableError(SQLiteModule module, SQLiteVirtualTable table, bool logErrors, bool logExceptions, string error);
    private static bool SetCursorError(SQLiteModule module, IntPtr pCursor, bool logErrors, bool logExceptions, string error);
    private static bool SetCursorError(SQLiteModule module, SQLiteVirtualTableCursor cursor, bool logErrors, bool logExceptions, string error);
    protected virtual ISQLiteNativeModule GetNativeModuleImpl();
    protected virtual ISQLiteNativeModule CreateNativeModuleImpl();
    protected virtual IntPtr AllocateTable();
    protected virtual void ZeroTable(IntPtr pVtab);
    protected virtual void FreeTable(IntPtr pVtab);
    protected virtual IntPtr AllocateCursor();
    protected virtual void FreeCursor(IntPtr pCursor);
    private static IntPtr TableFromCursor(SQLiteModule module, IntPtr pCursor);
    protected virtual IntPtr TableFromCursor(IntPtr pCursor);
    protected virtual SQLiteVirtualTable TableFromIntPtr(IntPtr pVtab);
    protected virtual IntPtr TableToIntPtr(SQLiteVirtualTable table);
    protected virtual SQLiteVirtualTableCursor CursorFromIntPtr(IntPtr pVtab, IntPtr pCursor);
    protected virtual IntPtr CursorToIntPtr(SQLiteVirtualTableCursor cursor);
    protected virtual string GetFunctionKey(int argumentCount, string name, SQLiteFunction function);
    protected virtual SQLiteErrorCode DeclareTable(SQLiteConnection connection, string sql, String& error);
    protected virtual SQLiteErrorCode DeclareFunction(SQLiteConnection connection, int argumentCount, string name, String& error);
    protected virtual bool get_LogErrorsNoThrow();
    protected virtual void set_LogErrorsNoThrow(bool value);
    protected virtual bool get_LogExceptionsNoThrow();
    protected virtual void set_LogExceptionsNoThrow(bool value);
    protected virtual bool SetTableError(IntPtr pVtab, string error);
    protected virtual bool SetTableError(SQLiteVirtualTable table, string error);
    protected virtual bool SetCursorError(SQLiteVirtualTableCursor cursor, string error);
    protected virtual bool SetEstimatedCost(SQLiteIndex index, Nullable`1<double> estimatedCost);
    protected virtual bool SetEstimatedCost(SQLiteIndex index);
    protected virtual bool SetEstimatedRows(SQLiteIndex index, Nullable`1<long> estimatedRows);
    protected virtual bool SetEstimatedRows(SQLiteIndex index);
    protected virtual bool SetIndexFlags(SQLiteIndex index, Nullable`1<SQLiteIndexFlags> indexFlags);
    protected virtual bool SetIndexFlags(SQLiteIndex index);
    public virtual bool get_LogErrors();
    public virtual void set_LogErrors(bool value);
    public virtual bool get_LogExceptions();
    public virtual void set_LogExceptions(bool value);
    private SQLiteErrorCode xCreate(IntPtr pDb, IntPtr pAux, int argc, IntPtr argv, IntPtr& pVtab, IntPtr& pError);
    private SQLiteErrorCode xConnect(IntPtr pDb, IntPtr pAux, int argc, IntPtr argv, IntPtr& pVtab, IntPtr& pError);
    private SQLiteErrorCode xBestIndex(IntPtr pVtab, IntPtr pIndex);
    private SQLiteErrorCode xDisconnect(IntPtr pVtab);
    private SQLiteErrorCode xDestroy(IntPtr pVtab);
    private SQLiteErrorCode xOpen(IntPtr pVtab, IntPtr& pCursor);
    private SQLiteErrorCode xClose(IntPtr pCursor);
    private SQLiteErrorCode xFilter(IntPtr pCursor, int idxNum, IntPtr idxStr, int argc, IntPtr argv);
    private SQLiteErrorCode xNext(IntPtr pCursor);
    private int xEof(IntPtr pCursor);
    private SQLiteErrorCode xColumn(IntPtr pCursor, IntPtr pContext, int index);
    private SQLiteErrorCode xRowId(IntPtr pCursor, Int64& rowId);
    private SQLiteErrorCode xUpdate(IntPtr pVtab, int argc, IntPtr argv, Int64& rowId);
    private SQLiteErrorCode xBegin(IntPtr pVtab);
    private SQLiteErrorCode xSync(IntPtr pVtab);
    private SQLiteErrorCode xCommit(IntPtr pVtab);
    private SQLiteErrorCode xRollback(IntPtr pVtab);
    private int xFindFunction(IntPtr pVtab, int nArg, IntPtr zName, SQLiteCallback& callback, IntPtr& pClientData);
    private SQLiteErrorCode xRename(IntPtr pVtab, IntPtr zNew);
    private SQLiteErrorCode xSavepoint(IntPtr pVtab, int iSavepoint);
    private SQLiteErrorCode xRelease(IntPtr pVtab, int iSavepoint);
    private SQLiteErrorCode xRollbackTo(IntPtr pVtab, int iSavepoint);
    public virtual bool get_Declared();
    internal virtual void set_Declared(bool value);
    public virtual string get_Name();
    public abstract virtual SQLiteErrorCode Create(SQLiteConnection connection, IntPtr pClientData, String[] arguments, SQLiteVirtualTable& table, String& error);
    public abstract virtual SQLiteErrorCode Connect(SQLiteConnection connection, IntPtr pClientData, String[] arguments, SQLiteVirtualTable& table, String& error);
    public abstract virtual SQLiteErrorCode BestIndex(SQLiteVirtualTable table, SQLiteIndex index);
    public abstract virtual SQLiteErrorCode Disconnect(SQLiteVirtualTable table);
    public abstract virtual SQLiteErrorCode Destroy(SQLiteVirtualTable table);
    public abstract virtual SQLiteErrorCode Open(SQLiteVirtualTable table, SQLiteVirtualTableCursor& cursor);
    public abstract virtual SQLiteErrorCode Close(SQLiteVirtualTableCursor cursor);
    public abstract virtual SQLiteErrorCode Filter(SQLiteVirtualTableCursor cursor, int indexNumber, string indexString, SQLiteValue[] values);
    public abstract virtual SQLiteErrorCode Next(SQLiteVirtualTableCursor cursor);
    public abstract virtual bool Eof(SQLiteVirtualTableCursor cursor);
    public abstract virtual SQLiteErrorCode Column(SQLiteVirtualTableCursor cursor, SQLiteContext context, int index);
    public abstract virtual SQLiteErrorCode RowId(SQLiteVirtualTableCursor cursor, Int64& rowId);
    public abstract virtual SQLiteErrorCode Update(SQLiteVirtualTable table, SQLiteValue[] values, Int64& rowId);
    public abstract virtual SQLiteErrorCode Begin(SQLiteVirtualTable table);
    public abstract virtual SQLiteErrorCode Sync(SQLiteVirtualTable table);
    public abstract virtual SQLiteErrorCode Commit(SQLiteVirtualTable table);
    public abstract virtual SQLiteErrorCode Rollback(SQLiteVirtualTable table);
    public abstract virtual bool FindFunction(SQLiteVirtualTable table, int argumentCount, string name, SQLiteFunction& function, IntPtr& pClientData);
    public abstract virtual SQLiteErrorCode Rename(SQLiteVirtualTable table, string newName);
    public abstract virtual SQLiteErrorCode Savepoint(SQLiteVirtualTable table, int savepoint);
    public abstract virtual SQLiteErrorCode Release(SQLiteVirtualTable table, int savepoint);
    public abstract virtual SQLiteErrorCode RollbackTo(SQLiteVirtualTable table, int savepoint);
    public sealed virtual void Dispose();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class System.Data.SQLite.SQLiteModuleCommon : SQLiteModuleNoop {
    private static string declareSql;
    private bool objectIdentity;
    private bool disposed;
    public SQLiteModuleCommon(string name);
    public SQLiteModuleCommon(string name, bool objectIdentity);
    private static SQLiteModuleCommon();
    protected virtual string GetSqlForDeclareTable();
    protected virtual SQLiteErrorCode CursorTypeMismatchError(SQLiteVirtualTableCursor cursor, Type type);
    protected virtual string GetStringFromObject(SQLiteVirtualTableCursor cursor, object value);
    protected virtual long MakeRowId(int rowIndex, int hashCode);
    protected virtual long GetRowIdFromObject(SQLiteVirtualTableCursor cursor, object value);
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
}
public class System.Data.SQLite.SQLiteModuleEnumerable : SQLiteModuleCommon {
    private IEnumerable enumerable;
    private bool disposed;
    public SQLiteModuleEnumerable(string name, IEnumerable enumerable);
    public SQLiteModuleEnumerable(string name, IEnumerable enumerable, bool objectIdentity);
    protected virtual SQLiteErrorCode CursorEndOfEnumeratorError(SQLiteVirtualTableCursor cursor);
    public virtual SQLiteErrorCode Create(SQLiteConnection connection, IntPtr pClientData, String[] arguments, SQLiteVirtualTable& table, String& error);
    public virtual SQLiteErrorCode Connect(SQLiteConnection connection, IntPtr pClientData, String[] arguments, SQLiteVirtualTable& table, String& error);
    public virtual SQLiteErrorCode BestIndex(SQLiteVirtualTable table, SQLiteIndex index);
    public virtual SQLiteErrorCode Disconnect(SQLiteVirtualTable table);
    public virtual SQLiteErrorCode Destroy(SQLiteVirtualTable table);
    public virtual SQLiteErrorCode Open(SQLiteVirtualTable table, SQLiteVirtualTableCursor& cursor);
    public virtual SQLiteErrorCode Close(SQLiteVirtualTableCursor cursor);
    public virtual SQLiteErrorCode Filter(SQLiteVirtualTableCursor cursor, int indexNumber, string indexString, SQLiteValue[] values);
    public virtual SQLiteErrorCode Next(SQLiteVirtualTableCursor cursor);
    public virtual bool Eof(SQLiteVirtualTableCursor cursor);
    public virtual SQLiteErrorCode Column(SQLiteVirtualTableCursor cursor, SQLiteContext context, int index);
    public virtual SQLiteErrorCode RowId(SQLiteVirtualTableCursor cursor, Int64& rowId);
    public virtual SQLiteErrorCode Update(SQLiteVirtualTable table, SQLiteValue[] values, Int64& rowId);
    public virtual SQLiteErrorCode Rename(SQLiteVirtualTable table, string newName);
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
}
public class System.Data.SQLite.SQLiteModuleNoop : SQLiteModule {
    private Dictionary`2<string, SQLiteErrorCode> resultCodes;
    private bool disposed;
    public SQLiteModuleNoop(string name);
    protected virtual SQLiteErrorCode GetDefaultResultCode();
    protected virtual bool ResultCodeToEofResult(SQLiteErrorCode resultCode);
    protected virtual bool ResultCodeToFindFunctionResult(SQLiteErrorCode resultCode);
    protected virtual SQLiteErrorCode GetMethodResultCode(string methodName);
    protected virtual bool SetMethodResultCode(string methodName, SQLiteErrorCode resultCode);
    public virtual SQLiteErrorCode Create(SQLiteConnection connection, IntPtr pClientData, String[] arguments, SQLiteVirtualTable& table, String& error);
    public virtual SQLiteErrorCode Connect(SQLiteConnection connection, IntPtr pClientData, String[] arguments, SQLiteVirtualTable& table, String& error);
    public virtual SQLiteErrorCode BestIndex(SQLiteVirtualTable table, SQLiteIndex index);
    public virtual SQLiteErrorCode Disconnect(SQLiteVirtualTable table);
    public virtual SQLiteErrorCode Destroy(SQLiteVirtualTable table);
    public virtual SQLiteErrorCode Open(SQLiteVirtualTable table, SQLiteVirtualTableCursor& cursor);
    public virtual SQLiteErrorCode Close(SQLiteVirtualTableCursor cursor);
    public virtual SQLiteErrorCode Filter(SQLiteVirtualTableCursor cursor, int indexNumber, string indexString, SQLiteValue[] values);
    public virtual SQLiteErrorCode Next(SQLiteVirtualTableCursor cursor);
    public virtual bool Eof(SQLiteVirtualTableCursor cursor);
    public virtual SQLiteErrorCode Column(SQLiteVirtualTableCursor cursor, SQLiteContext context, int index);
    public virtual SQLiteErrorCode RowId(SQLiteVirtualTableCursor cursor, Int64& rowId);
    public virtual SQLiteErrorCode Update(SQLiteVirtualTable table, SQLiteValue[] values, Int64& rowId);
    public virtual SQLiteErrorCode Begin(SQLiteVirtualTable table);
    public virtual SQLiteErrorCode Sync(SQLiteVirtualTable table);
    public virtual SQLiteErrorCode Commit(SQLiteVirtualTable table);
    public virtual SQLiteErrorCode Rollback(SQLiteVirtualTable table);
    public virtual bool FindFunction(SQLiteVirtualTable table, int argumentCount, string name, SQLiteFunction& function, IntPtr& pClientData);
    public virtual SQLiteErrorCode Rename(SQLiteVirtualTable table, string newName);
    public virtual SQLiteErrorCode Savepoint(SQLiteVirtualTable table, int savepoint);
    public virtual SQLiteErrorCode Release(SQLiteVirtualTable table, int savepoint);
    public virtual SQLiteErrorCode RollbackTo(SQLiteVirtualTable table, int savepoint);
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
}
[FlagsAttribute]
internal enum System.Data.SQLite.SQLiteOpenFlagsEnum : Enum {
    public int value__;
    public static SQLiteOpenFlagsEnum None;
    public static SQLiteOpenFlagsEnum ReadOnly;
    public static SQLiteOpenFlagsEnum ReadWrite;
    public static SQLiteOpenFlagsEnum Create;
    public static SQLiteOpenFlagsEnum Uri;
    public static SQLiteOpenFlagsEnum Memory;
    public static SQLiteOpenFlagsEnum Default;
}
public class System.Data.SQLite.SQLiteParameter : DbParameter {
    public static DbType UnknownDbType;
    private IDbCommand _command;
    internal DbType _dbType;
    private DataRowVersion _rowVersion;
    private object _objValue;
    private string _sourceColumn;
    private string _parameterName;
    private int _dataSize;
    private bool _nullable;
    private bool _nullMapping;
    private string _typeName;
    public IDbCommand Command { get; public set; }
    public bool IsNullable { get; public set; }
    [DbProviderSpecificTypePropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public DbType DbType { get; public set; }
    public ParameterDirection Direction { get; public set; }
    public string ParameterName { get; public set; }
    [DefaultValueAttribute("0")]
public int Size { get; public set; }
    public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    public DataRowVersion SourceVersion { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.StringConverter")]
[RefreshPropertiesAttribute("1")]
public object Value { get; public set; }
    public string TypeName { get; public set; }
    internal SQLiteParameter(IDbCommand command);
    public SQLiteParameter(string parameterName);
    public SQLiteParameter(string parameterName, object value);
    public SQLiteParameter(string parameterName, DbType dbType);
    public SQLiteParameter(string parameterName, DbType dbType, string sourceColumn);
    public SQLiteParameter(string parameterName, DbType dbType, string sourceColumn, DataRowVersion rowVersion);
    public SQLiteParameter(DbType dbType);
    public SQLiteParameter(DbType dbType, object value);
    public SQLiteParameter(DbType dbType, string sourceColumn);
    public SQLiteParameter(DbType dbType, string sourceColumn, DataRowVersion rowVersion);
    public SQLiteParameter(string parameterName, DbType parameterType, int parameterSize);
    public SQLiteParameter(string parameterName, DbType parameterType, int parameterSize, string sourceColumn);
    public SQLiteParameter(string parameterName, DbType parameterType, int parameterSize, string sourceColumn, DataRowVersion rowVersion);
    private SQLiteParameter(SQLiteParameter source);
    [EditorBrowsableAttribute("2")]
public SQLiteParameter(string parameterName, DbType parameterType, int parameterSize, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion rowVersion, object value);
    [EditorBrowsableAttribute("2")]
public SQLiteParameter(string parameterName, DbType parameterType, int parameterSize, ParameterDirection direction, byte precision, byte scale, string sourceColumn, DataRowVersion rowVersion, bool sourceColumnNullMapping, object value);
    public SQLiteParameter(DbType parameterType, int parameterSize);
    public SQLiteParameter(DbType parameterType, int parameterSize, string sourceColumn);
    public SQLiteParameter(DbType parameterType, int parameterSize, string sourceColumn, DataRowVersion rowVersion);
    public IDbCommand get_Command();
    public void set_Command(IDbCommand value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    public virtual void ResetDbType();
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public sealed virtual object Clone();
    internal static string CreateNameForIndex(int index, bool placeholder);
    internal static bool IsUnnamedPlaceholder(string name, Int32& index);
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBParametersEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ListBindableAttribute("False")]
public class System.Data.SQLite.SQLiteParameterCollection : DbParameterCollection {
    private SQLiteCommand _command;
    private List`1<SQLiteParameter> _parameterList;
    private bool _unboundFlag;
    private bool noCase;
    public bool IsSynchronized { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object SyncRoot { get; }
    public bool NoCase { get; public set; }
    public int Count { get; }
    public SQLiteParameter Item { get; public set; }
    public SQLiteParameter Item { get; public set; }
    internal SQLiteParameterCollection(SQLiteCommand cmd);
    public virtual bool get_IsSynchronized();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual object get_SyncRoot();
    public bool get_NoCase();
    public void set_NoCase(bool value);
    public virtual IEnumerator GetEnumerator();
    public SQLiteParameter Add(string parameterName, DbType parameterType, int parameterSize, string sourceColumn);
    public SQLiteParameter Add(string parameterName, DbType parameterType, int parameterSize);
    public SQLiteParameter Add(string parameterName, DbType parameterType);
    public int Add(SQLiteParameter parameter);
    [EditorBrowsableAttribute("1")]
public virtual int Add(object value);
    public SQLiteParameter AddWithValue(string parameterName, object value);
    public void AddRange(SQLiteParameter[] values);
    public virtual void AddRange(Array values);
    public virtual void Clear();
    public virtual bool Contains(string parameterName);
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual int get_Count();
    public SQLiteParameter get_Item(string parameterName);
    public void set_Item(string parameterName, SQLiteParameter value);
    public SQLiteParameter get_Item(int index);
    public void set_Item(int index, SQLiteParameter value);
    protected virtual DbParameter GetParameter(string parameterName);
    protected virtual DbParameter GetParameter(int index);
    public virtual int IndexOf(string parameterName);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    public virtual void Remove(object value);
    public virtual void RemoveAt(string parameterName);
    public virtual void RemoveAt(int index);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    protected virtual void SetParameter(int index, DbParameter value);
    internal void Unbind();
    internal void MapParameters(SQLiteStatement activeStatement);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class System.Data.SQLite.SQLiteProgressCallback : MulticastDelegate {
    public SQLiteProgressCallback(object object, IntPtr method);
    public virtual SQLiteProgressReturnCode Invoke(IntPtr pUserData);
    public virtual IAsyncResult BeginInvoke(IntPtr pUserData, AsyncCallback callback, object object);
    public virtual SQLiteProgressReturnCode EndInvoke(IAsyncResult result);
}
public class System.Data.SQLite.SQLiteProgressEventHandler : MulticastDelegate {
    public SQLiteProgressEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ProgressEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ProgressEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Data.SQLite.SQLiteProgressReturnCode : Enum {
    public int value__;
    public static SQLiteProgressReturnCode Continue;
    public static SQLiteProgressReturnCode Interrupt;
}
public class System.Data.SQLite.SQLiteReadArrayEventArgs : SQLiteReadEventArgs {
    private long dataOffset;
    private Byte[] byteBuffer;
    private Char[] charBuffer;
    private int bufferOffset;
    private int length;
    public long DataOffset { get; public set; }
    public Byte[] ByteBuffer { get; }
    public Char[] CharBuffer { get; }
    public int BufferOffset { get; public set; }
    public int Length { get; public set; }
    internal SQLiteReadArrayEventArgs(long dataOffset, Byte[] byteBuffer, int bufferOffset, int length);
    internal SQLiteReadArrayEventArgs(long dataOffset, Char[] charBuffer, int bufferOffset, int length);
    public long get_DataOffset();
    public void set_DataOffset(long value);
    public Byte[] get_ByteBuffer();
    public Char[] get_CharBuffer();
    public int get_BufferOffset();
    public void set_BufferOffset(int value);
    public int get_Length();
    public void set_Length(int value);
}
public class System.Data.SQLite.SQLiteReadBlobEventArgs : SQLiteReadEventArgs {
    private bool readOnly;
    public bool ReadOnly { get; public set; }
    internal SQLiteReadBlobEventArgs(bool readOnly);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
}
public abstract class System.Data.SQLite.SQLiteReadEventArgs : EventArgs {
}
public class System.Data.SQLite.SQLiteReadValueCallback : MulticastDelegate {
    public SQLiteReadValueCallback(object object, IntPtr method);
    public virtual void Invoke(SQLiteConvert convert, SQLiteDataReader dataReader, SQLiteConnectionFlags flags, SQLiteReadEventArgs eventArgs, string typeName, int index, object userData, Boolean& complete);
    public virtual IAsyncResult BeginInvoke(SQLiteConvert convert, SQLiteDataReader dataReader, SQLiteConnectionFlags flags, SQLiteReadEventArgs eventArgs, string typeName, int index, object userData, Boolean& complete, AsyncCallback callback, object object);
    public virtual void EndInvoke(Boolean& complete, IAsyncResult result);
}
public class System.Data.SQLite.SQLiteReadValueEventArgs : SQLiteReadEventArgs {
    private string methodName;
    private SQLiteReadEventArgs extraEventArgs;
    private SQLiteDataReaderValue value;
    public string MethodName { get; }
    public SQLiteReadEventArgs ExtraEventArgs { get; }
    public SQLiteDataReaderValue Value { get; }
    internal SQLiteReadValueEventArgs(string methodName, SQLiteReadEventArgs extraEventArgs, SQLiteDataReaderValue value);
    public string get_MethodName();
    public SQLiteReadEventArgs get_ExtraEventArgs();
    public SQLiteDataReaderValue get_Value();
}
[UnmanagedFunctionPointerAttribute("2")]
internal class System.Data.SQLite.SQLiteRollbackCallback : MulticastDelegate {
    public SQLiteRollbackCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr puser);
    public virtual IAsyncResult BeginInvoke(IntPtr puser, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
internal enum System.Data.SQLite.SQLiteSerializeFlags : Enum {
    public int value__;
    public static SQLiteSerializeFlags SQLITE_SERIALIZE_NONE;
    public static SQLiteSerializeFlags SQLITE_SERIALIZE_NOCOPY;
}
internal class System.Data.SQLite.SQLiteSession : SQLiteConnectionLock {
    private SQLiteSessionStreamManager streamManager;
    private string databaseName;
    private IntPtr session;
    private xSessionFilter xFilter;
    private SessionTableFilterCallback tableFilterCallback;
    private object tableFilterClientData;
    private bool disposed;
    public SQLiteSession(SQLiteConnectionHandle handle, SQLiteConnectionFlags flags, string databaseName);
    private void CheckHandle();
    private void InitializeHandle();
    private xSessionFilter ApplyTableFilter(SessionTableFilterCallback callback, object clientData);
    private void InitializeStreamManager();
    private SQLiteStreamAdapter GetStreamAdapter(Stream stream);
    private int Filter(IntPtr context, IntPtr pTblName);
    public sealed virtual bool IsEnabled();
    public sealed virtual void SetToEnabled();
    public sealed virtual void SetToDisabled();
    public sealed virtual bool IsIndirect();
    public sealed virtual void SetToIndirect();
    public sealed virtual void SetToDirect();
    public sealed virtual bool IsEmpty();
    public sealed virtual long GetMemoryBytesInUse();
    public sealed virtual void AttachTable(string name);
    public sealed virtual void SetTableFilter(SessionTableFilterCallback callback, object clientData);
    public sealed virtual void CreateChangeSet(Byte[]& rawData);
    public sealed virtual void CreateChangeSet(Stream stream);
    public sealed virtual void CreatePatchSet(Byte[]& rawData);
    public sealed virtual void CreatePatchSet(Stream stream);
    public sealed virtual void LoadDifferencesFromTable(string fromDatabaseName, string tableName);
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
}
internal static class System.Data.SQLite.SQLiteSessionHelpers : object {
    public static void CheckRawData(Byte[] rawData);
}
internal class System.Data.SQLite.SQLiteSessionStreamManager : object {
    private Dictionary`2<Stream, SQLiteStreamAdapter> streamAdapters;
    private SQLiteConnectionFlags flags;
    private bool disposed;
    public SQLiteSessionStreamManager(SQLiteConnectionFlags flags);
    private void InitializeStreamAdapters();
    private void DisposeStreamAdapters();
    public SQLiteStreamAdapter GetAdapter(Stream stream);
    public sealed virtual void Dispose();
    private void CheckDisposed();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class System.Data.SQLite.SQLiteStatement : object {
    internal SQLiteBase _sql;
    internal string _sqlStatement;
    internal SQLiteStatementHandle _sqlite_stmt;
    internal int _unnamedParameters;
    internal String[] _paramNames;
    internal SQLiteParameter[] _paramValues;
    internal SQLiteCommand _command;
    internal int _prepareSchemaRetries;
    internal int _prepareLockRetries;
    internal int _stepSchemaRetries;
    internal int _stepLockRetries;
    private SQLiteConnectionFlags _flags;
    private String[] _types;
    private int _referenceCount;
    private bool disposed;
    internal String[] TypeDefinitions { get; }
    internal SQLiteStatement(SQLiteBase sqlbase, SQLiteConnectionFlags flags, SQLiteStatementHandle stmt, string strCommand, SQLiteStatement previous);
    internal int AddReference();
    internal int RemoveReference();
    public sealed virtual void Dispose();
    private void CheckDisposed();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    internal bool TryGetChanges(Int32& changes, Boolean& readOnly);
    internal bool MapUnnamedParameter(string s, SQLiteParameter p, bool noCase);
    internal bool MapParameter(string s, SQLiteParameter p, bool noCase);
    internal void BindParameters();
    private static SQLiteConnection GetConnection(SQLiteStatement statement);
    private void InvokeBindValueCallback(int index, SQLiteParameter parameter, Boolean& complete);
    private void BindParameter(int index, SQLiteParameter param);
    internal String[] get_TypeDefinitions();
    internal void SetTypes(string typedefs);
}
internal class System.Data.SQLite.SQLiteStatementHandle : CriticalHandle {
    private SQLiteConnectionHandle cnn;
    public bool IsInvalid { get; }
    internal SQLiteStatementHandle(SQLiteConnectionHandle cnn, IntPtr stmt);
    public static IntPtr op_Implicit(SQLiteStatementHandle stmt);
    protected virtual bool ReleaseHandle();
    public int WasReleasedOk();
    public virtual bool get_IsInvalid();
}
internal enum System.Data.SQLite.SQLiteStatusOpsEnum : Enum {
    public int value__;
    public static SQLiteStatusOpsEnum SQLITE_DBSTATUS_LOOKASIDE_USED;
    public static SQLiteStatusOpsEnum SQLITE_DBSTATUS_CACHE_USED;
    public static SQLiteStatusOpsEnum SQLITE_DBSTATUS_SCHEMA_USED;
    public static SQLiteStatusOpsEnum SQLITE_DBSTATUS_STMT_USED;
    public static SQLiteStatusOpsEnum SQLITE_DBSTATUS_LOOKASIDE_HIT;
    public static SQLiteStatusOpsEnum SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE;
    public static SQLiteStatusOpsEnum SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL;
    public static SQLiteStatusOpsEnum SQLITE_DBSTATUS_CACHE_HIT;
    public static SQLiteStatusOpsEnum SQLITE_DBSTATUS_CACHE_MISS;
    public static SQLiteStatusOpsEnum SQLITE_DBSTATUS_CACHE_WRITE;
    public static SQLiteStatusOpsEnum SQLITE_DBSTATUS_DEFERRED_FKS;
    public static SQLiteStatusOpsEnum SQLITE_DBSTATUS_CACHE_USED_SHARED;
    public static SQLiteStatusOpsEnum SQLITE_DBSTATUS_CACHE_SPILL;
}
public class System.Data.SQLite.SQLiteStepDelegate : MulticastDelegate {
    public SQLiteStepDelegate(object object, IntPtr method);
    public virtual void Invoke(string param0, Object[] args, int stepNumber, Object& contextData);
    public virtual IAsyncResult BeginInvoke(string param0, Object[] args, int stepNumber, Object& contextData, AsyncCallback callback, object object);
    public virtual void EndInvoke(Object& contextData, IAsyncResult result);
}
internal class System.Data.SQLite.SQLiteStreamAdapter : object {
    private Stream stream;
    private SQLiteConnectionFlags flags;
    private xSessionInput xInput;
    private xSessionOutput xOutput;
    private bool disposed;
    public SQLiteStreamAdapter(Stream stream, SQLiteConnectionFlags flags);
    private SQLiteConnectionFlags GetFlags();
    public xSessionInput GetInputDelegate();
    public xSessionOutput GetOutputDelegate();
    private SQLiteErrorCode Input(IntPtr context, IntPtr pData, Int32& nData);
    private SQLiteErrorCode Output(IntPtr context, IntPtr pData, int nData);
    public sealed virtual void Dispose();
    private void CheckDisposed();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class System.Data.SQLite.SQLiteStreamChangeSet : SQLiteChangeSetBase {
    private SQLiteStreamAdapter inputStreamAdapter;
    private SQLiteStreamAdapter outputStreamAdapter;
    private Stream inputStream;
    private Stream outputStream;
    private SQLiteChangeSetStartFlags startFlags;
    private bool disposed;
    internal SQLiteStreamChangeSet(Stream inputStream, Stream outputStream, SQLiteConnectionHandle handle, SQLiteConnectionFlags connectionFlags);
    internal SQLiteStreamChangeSet(Stream inputStream, Stream outputStream, SQLiteConnectionHandle handle, SQLiteConnectionFlags connectionFlags, SQLiteChangeSetStartFlags startFlags);
    private void CheckInputStream();
    private void CheckOutputStream();
    public sealed virtual ISQLiteChangeSet Invert();
    public sealed virtual ISQLiteChangeSet CombineWith(ISQLiteChangeSet changeSet);
    public sealed virtual void Apply(SessionConflictCallback conflictCallback, object clientData);
    public sealed virtual void Apply(SessionConflictCallback conflictCallback, SessionTableFilterCallback tableFilterCallback, object clientData);
    public sealed virtual IEnumerator`1<ISQLiteChangeSetMetadataItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
}
internal class System.Data.SQLite.SQLiteStreamChangeSetEnumerator : SQLiteChangeSetEnumerator {
    private bool disposed;
    public SQLiteStreamChangeSetEnumerator(Stream stream, SQLiteConnectionFlags connectionFlags);
    public SQLiteStreamChangeSetEnumerator(Stream stream, SQLiteConnectionFlags connectionFlags, SQLiteChangeSetStartFlags startFlags);
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
}
internal class System.Data.SQLite.SQLiteStreamChangeSetIterator : SQLiteChangeSetIterator {
    private SQLiteStreamAdapter streamAdapter;
    private bool disposed;
    private SQLiteStreamChangeSetIterator(SQLiteStreamAdapter streamAdapter, IntPtr iterator, bool ownHandle);
    public static SQLiteStreamChangeSetIterator Create(Stream stream, SQLiteConnectionFlags connectionFlags);
    public static SQLiteStreamChangeSetIterator Create(Stream stream, SQLiteConnectionFlags connectionFlags, SQLiteChangeSetStartFlags startFlags);
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
}
internal static class System.Data.SQLite.SQLiteString : object {
    private static int ThirtyBits;
    private static Encoding Utf8Encoding;
    private static SQLiteString();
    public static Byte[] GetUtf8BytesFromString(string value);
    public static string GetStringFromUtf8Bytes(Byte[] bytes);
    public static int ProbeForUtf8ByteLength(IntPtr pValue, int limit);
    public static string StringFromUtf8IntPtr(IntPtr pValue);
    public static string StringFromUtf8IntPtr(IntPtr pValue, int length);
    public static IntPtr Utf8IntPtrFromString(string value);
    public static IntPtr Utf8IntPtrFromString(string value, bool tracked);
    public static IntPtr Utf8IntPtrFromString(string value, Int32& length);
    public static IntPtr Utf8IntPtrFromString(string value, bool tracked, Int32& length);
    public static String[] StringArrayFromUtf8SizeAndIntPtr(int argc, IntPtr argv);
    public static IntPtr[] Utf8IntPtrArrayFromStringArray(String[] values, bool tracked);
}
internal enum System.Data.SQLite.SQLiteSynchronousEnum : Enum {
    public int value__;
    public static SQLiteSynchronousEnum Default;
    public static SQLiteSynchronousEnum Off;
    public static SQLiteSynchronousEnum Normal;
    public static SQLiteSynchronousEnum Full;
}
[UnmanagedFunctionPointerAttribute("2")]
internal class System.Data.SQLite.SQLiteTraceCallback : MulticastDelegate {
    public SQLiteTraceCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr puser, IntPtr statement);
    public virtual IAsyncResult BeginInvoke(IntPtr puser, IntPtr statement, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class System.Data.SQLite.SQLiteTraceCallback2 : MulticastDelegate {
    public SQLiteTraceCallback2(object object, IntPtr method);
    public virtual void Invoke(SQLiteTraceFlags type, IntPtr puser, IntPtr pCtx1, IntPtr pCtx2);
    public virtual IAsyncResult BeginInvoke(SQLiteTraceFlags type, IntPtr puser, IntPtr pCtx1, IntPtr pCtx2, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.SQLite.SQLiteTraceEventHandler : MulticastDelegate {
    public SQLiteTraceEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TraceEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TraceEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Data.SQLite.SQLiteTraceFlags : Enum {
    public int value__;
    public static SQLiteTraceFlags SQLITE_TRACE_NONE;
    public static SQLiteTraceFlags SQLITE_TRACE_STMT;
    public static SQLiteTraceFlags SQLITE_TRACE_PROFILE;
    public static SQLiteTraceFlags SQLITE_TRACE_ROW;
    public static SQLiteTraceFlags SQLITE_TRACE_CLOSE;
    public static SQLiteTraceFlags SQLITE_TRACE_ALL;
}
public class System.Data.SQLite.SQLiteTransaction : SQLiteTransactionBase {
    private bool disposed;
    internal SQLiteTransaction(SQLiteConnection connection, bool deferredLock);
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    public virtual void Commit();
    protected virtual void Begin(bool deferredLock);
    protected virtual void IssueRollback(bool throwError);
}
public class System.Data.SQLite.SQLiteTransaction2 : SQLiteTransaction {
    private int _beginLevel;
    private string _savePointName;
    private bool disposed;
    internal SQLiteTransaction2(SQLiteConnection connection, bool deferredLock);
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    public virtual void Commit();
    protected virtual void Begin(bool deferredLock);
    protected virtual void IssueRollback(bool throwError);
    private string GetSavePointName();
}
public abstract class System.Data.SQLite.SQLiteTransactionBase : DbTransaction {
    internal SQLiteConnection _cnn;
    internal int _version;
    private IsolationLevel _level;
    private bool disposed;
    public IsolationLevel IsolationLevel { get; }
    public SQLiteConnection Connection { get; }
    protected DbConnection DbConnection { get; }
    internal SQLiteTransactionBase(SQLiteConnection connection, bool deferredLock);
    public virtual IsolationLevel get_IsolationLevel();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    public SQLiteConnection get_Connection();
    protected virtual DbConnection get_DbConnection();
    public virtual void Rollback();
    protected abstract virtual void Begin(bool deferredLock);
    protected abstract virtual void IssueRollback(bool throwError);
    internal bool IsValid(bool throwError);
}
internal enum System.Data.SQLite.SQLiteTransactionState : Enum {
    public int value__;
    public static SQLiteTransactionState SQLITE_TXN_UNKNOWN;
    public static SQLiteTransactionState SQLITE_TXN_NONE;
    public static SQLiteTransactionState SQLITE_TXN_READ;
    public static SQLiteTransactionState SQLITE_TXN_WRITE;
}
internal class System.Data.SQLite.SQLiteType : object {
    internal DbType Type;
    internal TypeAffinity Affinity;
    public SQLiteType(TypeAffinity affinity, DbType type);
}
public class System.Data.SQLite.SQLiteTypeCallbacks : object {
    private string typeName;
    private SQLiteBindValueCallback bindValueCallback;
    private SQLiteReadValueCallback readValueCallback;
    private object bindValueUserData;
    private object readValueUserData;
    public string TypeName { get; internal set; }
    public SQLiteBindValueCallback BindValueCallback { get; }
    public SQLiteReadValueCallback ReadValueCallback { get; }
    public object BindValueUserData { get; }
    public object ReadValueUserData { get; }
    private SQLiteTypeCallbacks(SQLiteBindValueCallback bindValueCallback, SQLiteReadValueCallback readValueCallback, object bindValueUserData, object readValueUserData);
    public static SQLiteTypeCallbacks Create(SQLiteBindValueCallback bindValueCallback, SQLiteReadValueCallback readValueCallback, object bindValueUserData, object readValueUserData);
    public string get_TypeName();
    internal void set_TypeName(string value);
    public SQLiteBindValueCallback get_BindValueCallback();
    public SQLiteReadValueCallback get_ReadValueCallback();
    public object get_BindValueUserData();
    public object get_ReadValueUserData();
}
internal class System.Data.SQLite.SQLiteTypeCallbacksMap : Dictionary`2<string, SQLiteTypeCallbacks> {
}
[UnmanagedFunctionPointerAttribute("2")]
internal class System.Data.SQLite.SQLiteUpdateCallback : MulticastDelegate {
    public SQLiteUpdateCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr puser, int type, IntPtr database, IntPtr table, long rowid);
    public virtual IAsyncResult BeginInvoke(IntPtr puser, int type, IntPtr database, IntPtr table, long rowid, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.SQLite.SQLiteUpdateEventHandler : MulticastDelegate {
    public SQLiteUpdateEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UpdateEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UpdateEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.SQLite.SQLiteValue : object {
    private IntPtr pValue;
    private bool persisted;
    private object value;
    private UInt32 subType;
    private int noChange;
    private int fromBind;
    public IntPtr NativeHandle { get; }
    public bool Persisted { get; }
    public object Value { get; }
    public UInt32 SubType { get; }
    public int NoChange { get; }
    public int FromBind { get; }
    private SQLiteValue(IntPtr pValue);
    private void PreventNativeAccess();
    internal static SQLiteValue FromIntPtr(IntPtr pValue);
    internal static SQLiteValue[] ArrayFromSizeAndIntPtr(int argc, IntPtr argv);
    public sealed virtual IntPtr get_NativeHandle();
    public bool get_Persisted();
    public object get_Value();
    public UInt32 get_SubType();
    public int get_NoChange();
    public int get_FromBind();
    public UInt32 GetSubType();
    public int GetNoChange();
    public int GetFromBind();
    public TypeAffinity GetNumericType();
    public TypeAffinity GetTypeAffinity();
    public int GetBytes();
    public int GetInt();
    public long GetInt64();
    public double GetDouble();
    public string GetString();
    public Byte[] GetBlob();
    public object GetObject();
    public bool Persist();
}
public class System.Data.SQLite.SQLiteVirtualTable : object {
    private static int ModuleNameIndex;
    private static int DatabaseNameIndex;
    private static int TableNameIndex;
    private String[] arguments;
    private SQLiteIndex index;
    private IntPtr nativeHandle;
    private bool disposed;
    public String[] Arguments { get; }
    public string ModuleName { get; }
    public string DatabaseName { get; }
    public string TableName { get; }
    public SQLiteIndex Index { get; }
    public IntPtr NativeHandle { get; internal set; }
    public SQLiteVirtualTable(String[] arguments);
    public virtual String[] get_Arguments();
    public virtual string get_ModuleName();
    public virtual string get_DatabaseName();
    public virtual string get_TableName();
    public virtual SQLiteIndex get_Index();
    public virtual bool BestIndex(SQLiteIndex index);
    public virtual bool Rename(string name);
    public virtual IntPtr get_NativeHandle();
    internal virtual void set_NativeHandle(IntPtr value);
    public sealed virtual void Dispose();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class System.Data.SQLite.SQLiteVirtualTableCursor : object {
    protected static int InvalidRowIndex;
    private int rowIndex;
    private SQLiteVirtualTable table;
    private int indexNumber;
    private string indexString;
    private SQLiteValue[] values;
    private IntPtr nativeHandle;
    private bool disposed;
    public SQLiteVirtualTable Table { get; }
    public int IndexNumber { get; }
    public string IndexString { get; }
    public SQLiteValue[] Values { get; }
    public IntPtr NativeHandle { get; internal set; }
    public SQLiteVirtualTableCursor(SQLiteVirtualTable table);
    public virtual SQLiteVirtualTable get_Table();
    public virtual int get_IndexNumber();
    public virtual string get_IndexString();
    public virtual SQLiteValue[] get_Values();
    protected virtual int TryPersistValues(SQLiteValue[] values);
    public virtual void Filter(int indexNumber, string indexString, SQLiteValue[] values);
    public virtual int GetRowIndex();
    public virtual void NextRowIndex();
    public virtual IntPtr get_NativeHandle();
    internal virtual void set_NativeHandle(IntPtr value);
    public sealed virtual void Dispose();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class System.Data.SQLite.SQLiteVirtualTableCursorEnumerator : SQLiteVirtualTableCursor {
    private IEnumerator enumerator;
    private bool endOfEnumerator;
    private bool disposed;
    public object Current { get; }
    public bool EndOfEnumerator { get; }
    public bool IsOpen { get; }
    public SQLiteVirtualTableCursorEnumerator(SQLiteVirtualTable table, IEnumerator enumerator);
    public virtual bool MoveNext();
    public virtual object get_Current();
    public virtual void Reset();
    public virtual bool get_EndOfEnumerator();
    public virtual bool get_IsOpen();
    public virtual void Close();
    public virtual void CheckClosed();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Data.SQLite.SR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DataTypes { get; }
    internal static string Keywords { get; }
    internal static string MetaDataCollections { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DataTypes();
    internal static string get_Keywords();
    internal static string get_MetaDataCollections();
}
internal static class System.Data.SQLite.StaticStrongConnectionPool`1 : object {
    private static object _syncRoot;
    private static SortedList`2<string, PoolQueue`1<T>> _queueList;
    private static int _poolVersion;
    private static int _poolOpened;
    private static int _poolClosed;
    private static StaticStrongConnectionPool`1();
    public static void GetCounts(string fileName, Dictionary`2& counts, Int32& openCount, Int32& closeCount, Int32& totalCount);
    public static void ClearPool(string fileName);
    public static void ClearAllPools();
    public static void Add(string fileName, SQLiteConnectionHandle handle, int version);
    public static SQLiteConnectionHandle Remove(string fileName, int maxPoolSize, Int32& version);
    public static void ResetCounts();
    public static void GetCounts(Int32& openCount, Int32& closeCount);
    private static void ResizePool(PoolQueue`1<T> queue, bool add);
}
internal static class System.Data.SQLite.StaticWeakConnectionPool`1 : object {
    private static object _syncRoot;
    private static SortedList`2<string, PoolQueue`1<T>> _queueList;
    private static int _poolVersion;
    private static int _poolOpened;
    private static int _poolClosed;
    private static StaticWeakConnectionPool`1();
    public static void GetCounts(string fileName, Dictionary`2& counts, Int32& openCount, Int32& closeCount, Int32& totalCount);
    public static void ClearPool(string fileName);
    public static void ClearAllPools();
    public static void Add(string fileName, SQLiteConnectionHandle handle, int version);
    public static SQLiteConnectionHandle Remove(string fileName, int maxPoolSize, Int32& version);
    public static void ResetCounts();
    public static void GetCounts(Int32& openCount, Int32& closeCount);
    private static void ResizePool(PoolQueue`1<T> queue, bool add);
}
internal class System.Data.SQLite.StrongConnectionPool : object {
    public sealed virtual void GetCounts(string fileName, Dictionary`2& counts, Int32& openCount, Int32& closeCount, Int32& totalCount);
    public sealed virtual void ClearPool(string fileName);
    public sealed virtual void ClearAllPools();
    public sealed virtual void Add(string fileName, object handle, int version);
    public sealed virtual object Remove(string fileName, int maxPoolSize, Int32& version);
    public sealed virtual void Initialize(object argument);
    public sealed virtual void Terminate(object argument);
    public sealed virtual void GetCounts(Int32& openCount, Int32& closeCount);
    public sealed virtual void ResetCounts();
}
public enum System.Data.SQLite.SynchronizationModes : Enum {
    public int value__;
    public static SynchronizationModes Normal;
    public static SynchronizationModes Full;
    public static SynchronizationModes Off;
}
[FlagsAttribute]
internal enum System.Data.SQLite.TraceCategory : Enum {
    public int value__;
    public static TraceCategory None;
    public static TraceCategory Self;
    public static TraceCategory Log;
    public static TraceCategory Connection;
    public static TraceCategory Detection;
    public static TraceCategory Handle;
    public static TraceCategory Preload;
    public static TraceCategory Shared;
    public static TraceCategory Statement;
    public static TraceCategory Warning;
    public static TraceCategory Verify;
    public static TraceCategory Complain;
    public static TraceCategory Exception;
    public static TraceCategory Crash;
    public static TraceCategory Timing;
    public static TraceCategory All;
    public static TraceCategory Default;
}
public class System.Data.SQLite.TraceEventArgs : EventArgs {
    public Nullable`1<SQLiteTraceFlags> Flags;
    public Nullable`1<IntPtr> DatabaseConnection;
    public Nullable`1<IntPtr> PreparedStatement;
    public string Statement;
    public Nullable`1<long> Elapsed;
    internal TraceEventArgs(string statement);
    internal TraceEventArgs(Nullable`1<SQLiteTraceFlags> flags, Nullable`1<IntPtr> databaseConnection, Nullable`1<IntPtr> preparedStatement, string statement, Nullable`1<long> elapsed);
}
public enum System.Data.SQLite.TypeAffinity : Enum {
    public int value__;
    public static TypeAffinity Uninitialized;
    public static TypeAffinity Int64;
    public static TypeAffinity Double;
    public static TypeAffinity Text;
    public static TypeAffinity Blob;
    public static TypeAffinity Null;
    public static TypeAffinity DateTime;
    public static TypeAffinity None;
}
internal class System.Data.SQLite.TypeNameStringComparer : object {
    public sealed virtual bool Equals(string left, string right);
    public sealed virtual int GetHashCode(string value);
    public sealed virtual int Compare(string x, string y);
}
[SuppressUnmanagedCodeSecurityAttribute]
internal static class System.Data.SQLite.UnsafeNativeMethods : object {
    public static string ExceptionMessageFormat;
    private static string DllFileExtension;
    private static string ConfigFileExtension;
    private static string AltConfigFileExtension;
    private static string XmlConfigFileName;
    private static string XmlAltConfigFileName;
    private static string XmlConfigDirectoryToken;
    private static string AssemblyDirectoryToken;
    private static string TargetFrameworkToken;
    private static object staticSyncRoot;
    private static Dictionary`2<string, string> targetFrameworkAbbreviations;
    private static Dictionary`2<string, string> processorArchitecturePlatforms;
    private static Dictionary`2<string, string> processorArchitectureRuntimes;
    private static string cachedAssemblyDirectory;
    private static bool noAssemblyDirectory;
    private static string cachedXmlConfigFileName;
    private static bool noXmlConfigFileName;
    private static string PROCESSOR_ARCHITECTURE;
    private static string _SQLiteNativeModuleFileName;
    private static IntPtr _SQLiteNativeModuleHandle;
    internal static string SQLITE_DLL;
    private static UnsafeNativeMethods();
    internal static void Initialize();
    private static string MaybeCombinePath(string path1, string path2);
    private static void ResetCachedXmlConfigFileName();
    private static string GetCachedXmlConfigFileName();
    private static string GetXmlConfigFileName();
    private static string ReplaceXmlConfigFileTokens(string fileName, string value);
    private static string GetSettingValueViaXmlConfigFile(string fileName, string name, string default, bool expand, bool tokens);
    private static string GetAssemblyTargetFramework(Assembly assembly);
    private static string AbbreviateTargetFramework(string targetFramework);
    private static string ReplaceEnvironmentVariableTokens(string value);
    internal static string GetSettingValue(string name, string default);
    private static string ListToString(IList`1<string> list);
    private static int CheckForArchitecturesAndPlatforms(string directory, List`1& matches);
    private static int CheckForArchitecturesAndRuntimes(string directory, List`1& matches);
    private static bool CheckAssemblyCodeBase(Assembly assembly, String& fileName);
    private static void ResetCachedAssemblyDirectory();
    public static string GetCachedAssemblyDirectory();
    private static string GetAssemblyDirectory();
    internal static string GetNativeModuleFileName();
    internal static string GetNativeLibraryFileNameOnly();
    private static bool SearchForDirectory(String& baseDirectory, String& processorArchitecture, Boolean& allowBaseDirectoryOnly);
    private static string GetBaseDirectory(bool overrideOnly);
    private static string FixUpDllFileName(string fileName);
    private static string GetProcessorArchitecture();
    private static string GetPlatformName(string processorArchitecture);
    private static string GetRuntimeName(string processorArchitecture, bool forUseAsPath);
    private static bool PreLoadSQLiteDll(string baseDirectory, string processorArchitecture, bool allowBaseDirectoryOnly, bool whatIf, String& nativeModuleFileName, IntPtr& nativeModuleHandle);
    internal static IntPtr sqlite3_bind_parameter_name_interop(IntPtr stmt, int index, Int32& len);
    internal static IntPtr sqlite3_column_database_name_interop(IntPtr stmt, int index, Int32& len);
    internal static IntPtr sqlite3_column_database_name16_interop(IntPtr stmt, int index, Int32& len);
    internal static IntPtr sqlite3_column_decltype_interop(IntPtr stmt, int index, Int32& len);
    internal static IntPtr sqlite3_column_decltype16_interop(IntPtr stmt, int index, Int32& len);
    internal static IntPtr sqlite3_column_name_interop(IntPtr stmt, int index, Int32& len);
    internal static IntPtr sqlite3_column_name16_interop(IntPtr stmt, int index, Int32& len);
    internal static IntPtr sqlite3_column_origin_name_interop(IntPtr stmt, int index, Int32& len);
    internal static IntPtr sqlite3_column_origin_name16_interop(IntPtr stmt, int index, Int32& len);
    internal static IntPtr sqlite3_column_table_name_interop(IntPtr stmt, int index, Int32& len);
    internal static IntPtr sqlite3_column_table_name16_interop(IntPtr stmt, int index, Int32& len);
    internal static IntPtr sqlite3_column_text_interop(IntPtr stmt, int index, Int32& len);
    internal static IntPtr sqlite3_column_text16_interop(IntPtr stmt, int index, Int32& len);
    internal static IntPtr sqlite3_errmsg_interop(IntPtr db, Int32& len);
    internal static SQLiteErrorCode sqlite3_prepare_interop(IntPtr db, IntPtr pSql, int nBytes, IntPtr& stmt, IntPtr& ptrRemain, Int32& nRemain);
    internal static SQLiteErrorCode sqlite3_table_column_metadata_interop(IntPtr db, Byte[] dbName, Byte[] tblName, Byte[] colName, IntPtr& ptrDataType, IntPtr& ptrCollSeq, Int32& notNull, Int32& primaryKey, Int32& autoInc, Int32& dtLen, Int32& csLen);
    internal static IntPtr sqlite3_value_text_interop(IntPtr p, Int32& len);
    internal static IntPtr sqlite3_value_text16_interop(IntPtr p, Int32& len);
    internal static int sqlite3_malloc_size_interop(IntPtr p);
    internal static IntPtr interop_libversion();
    internal static IntPtr interop_sourceid();
    internal static int interop_compileoption_used(IntPtr zOptName);
    internal static IntPtr interop_compileoption_get(int N);
    internal static SQLiteErrorCode sqlite3_close_interop(IntPtr db);
    internal static SQLiteErrorCode sqlite3_create_function_interop(IntPtr db, Byte[] strName, int nArgs, SQLiteFunctionFlags nType, IntPtr pvUser, SQLiteCallback func, SQLiteCallback fstep, SQLiteFinalCallback ffinal, int needCollSeq);
    internal static SQLiteErrorCode sqlite3_create_window_function_interop(IntPtr db, Byte[] strName, int nArgs, SQLiteFunctionFlags nType, IntPtr pvUser, SQLiteCallback fstep, SQLiteFinalCallback ffinal, SQLiteFinalCallback fvalue, SQLiteCallback finverse, int needCollSeq);
    internal static SQLiteErrorCode sqlite3_finalize_interop(IntPtr stmt);
    internal static SQLiteErrorCode sqlite3_backup_finish_interop(IntPtr backup);
    internal static SQLiteErrorCode sqlite3_blob_close_interop(IntPtr blob);
    internal static SQLiteErrorCode sqlite3_open_interop(Byte[] utf8Filename, Byte[] vfsName, SQLiteOpenFlagsEnum flags, int extFuncs, IntPtr& db);
    internal static SQLiteErrorCode sqlite3_open16_interop(Byte[] utf8Filename, Byte[] vfsName, SQLiteOpenFlagsEnum flags, int extFuncs, IntPtr& db);
    internal static SQLiteErrorCode sqlite3_reset_interop(IntPtr stmt);
    internal static int sqlite3_changes_interop(IntPtr db);
    internal static IntPtr sqlite3_context_collseq_interop(IntPtr context, Int32& type, Int32& enc, Int32& len);
    internal static int sqlite3_context_collcompare_interop(IntPtr context, Byte[] p1, int p1len, Byte[] p2, int p2len);
    internal static SQLiteErrorCode sqlite3_cursor_rowid_interop(IntPtr stmt, int cursor, Int64& rowid);
    internal static SQLiteErrorCode sqlite3_index_column_info_interop(IntPtr db, Byte[] catalog, Byte[] IndexName, Byte[] ColumnName, Int32& sortOrder, Int32& onError, IntPtr& Collation, Int32& colllen);
    internal static int sqlite3_table_cursor_interop(IntPtr stmt, int db, int tableRootPage);
    internal static IntPtr sqlite3_libversion();
    internal static int sqlite3_libversion_number();
    internal static IntPtr sqlite3_sourceid();
    internal static int sqlite3_compileoption_used(IntPtr zOptName);
    internal static IntPtr sqlite3_compileoption_get(int N);
    internal static SQLiteErrorCode sqlite3_enable_shared_cache(int enable);
    internal static SQLiteErrorCode sqlite3_enable_load_extension(IntPtr db, int enable);
    internal static SQLiteErrorCode sqlite3_load_extension(IntPtr db, Byte[] fileName, Byte[] procName, IntPtr& pError);
    internal static SQLiteErrorCode sqlite3_overload_function(IntPtr db, IntPtr zName, int nArgs);
    internal static SQLiteErrorCode sqlite3_win32_set_directory(UInt32 type, string value);
    internal static SQLiteErrorCode sqlite3_win32_reset_heap();
    internal static SQLiteErrorCode sqlite3_win32_compact_heap(UInt32& largest);
    internal static IntPtr sqlite3_malloc(int n);
    internal static IntPtr sqlite3_malloc64(ulong n);
    internal static IntPtr sqlite3_realloc(IntPtr p, int n);
    internal static IntPtr sqlite3_realloc64(IntPtr p, ulong n);
    internal static ulong sqlite3_msize(IntPtr p);
    internal static void sqlite3_free(IntPtr p);
    internal static void sqlite3_interrupt(IntPtr db);
    internal static int sqlite3_is_interrupted(IntPtr db);
    internal static long sqlite3_last_insert_rowid(IntPtr db);
    internal static int sqlite3_changes(IntPtr db);
    internal static long sqlite3_memory_used();
    internal static long sqlite3_memory_highwater(int resetFlag);
    internal static SQLiteErrorCode sqlite3_shutdown();
    internal static SQLiteErrorCode sqlite3_busy_timeout(IntPtr db, int ms);
    internal static SQLiteErrorCode sqlite3_clear_bindings(IntPtr stmt);
    internal static SQLiteErrorCode sqlite3_bind_blob(IntPtr stmt, int index, Byte[] value, int nSize, IntPtr nTransient);
    internal static SQLiteErrorCode sqlite3_bind_double(IntPtr stmt, int index, double value);
    internal static SQLiteErrorCode sqlite3_bind_int(IntPtr stmt, int index, int value);
    internal static SQLiteErrorCode sqlite3_bind_uint(IntPtr stmt, int index, UInt32 value);
    internal static SQLiteErrorCode sqlite3_bind_int64(IntPtr stmt, int index, long value);
    internal static SQLiteErrorCode sqlite3_bind_uint64(IntPtr stmt, int index, ulong value);
    internal static SQLiteErrorCode sqlite3_bind_null(IntPtr stmt, int index);
    internal static SQLiteErrorCode sqlite3_bind_text(IntPtr stmt, int index, Byte[] value, int nlen, IntPtr pvReserved);
    internal static int sqlite3_bind_parameter_count(IntPtr stmt);
    internal static int sqlite3_bind_parameter_index(IntPtr stmt, Byte[] strName);
    internal static int sqlite3_column_count(IntPtr stmt);
    internal static SQLiteErrorCode sqlite3_step(IntPtr stmt);
    internal static int sqlite3_stmt_readonly(IntPtr stmt);
    internal static double sqlite3_column_double(IntPtr stmt, int index);
    internal static int sqlite3_column_int(IntPtr stmt, int index);
    internal static long sqlite3_column_int64(IntPtr stmt, int index);
    internal static IntPtr sqlite3_column_blob(IntPtr stmt, int index);
    internal static int sqlite3_column_bytes(IntPtr stmt, int index);
    internal static int sqlite3_column_bytes16(IntPtr stmt, int index);
    internal static TypeAffinity sqlite3_column_type(IntPtr stmt, int index);
    internal static SQLiteErrorCode sqlite3_create_collation(IntPtr db, Byte[] strName, SQLiteFunctionFlags nType, IntPtr pvUser, SQLiteCollation func);
    internal static int sqlite3_aggregate_count(IntPtr context);
    internal static IntPtr sqlite3_value_blob(IntPtr p);
    internal static int sqlite3_value_bytes(IntPtr p);
    internal static int sqlite3_value_bytes16(IntPtr p);
    internal static double sqlite3_value_double(IntPtr p);
    internal static int sqlite3_value_int(IntPtr p);
    internal static long sqlite3_value_int64(IntPtr p);
    internal static TypeAffinity sqlite3_value_type(IntPtr p);
    internal static UInt32 sqlite3_value_subtype(IntPtr p);
    internal static TypeAffinity sqlite3_value_numeric_type(IntPtr p);
    internal static int sqlite3_value_nochange(IntPtr p);
    internal static int sqlite3_vtab_nochange(IntPtr context);
    internal static int sqlite3_value_frombind(IntPtr p);
    internal static void sqlite3_result_blob(IntPtr context, Byte[] value, int nSize, IntPtr pvReserved);
    internal static void sqlite3_result_double(IntPtr context, double value);
    internal static void sqlite3_result_error(IntPtr context, Byte[] strErr, int nLen);
    internal static void sqlite3_result_error_code(IntPtr context, SQLiteErrorCode value);
    internal static void sqlite3_result_error_toobig(IntPtr context);
    internal static void sqlite3_result_error_nomem(IntPtr context);
    internal static void sqlite3_result_value(IntPtr context, IntPtr value);
    internal static void sqlite3_result_zeroblob(IntPtr context, int nLen);
    internal static void sqlite3_result_int(IntPtr context, int value);
    internal static void sqlite3_result_int64(IntPtr context, long value);
    internal static void sqlite3_result_null(IntPtr context);
    internal static void sqlite3_result_text(IntPtr context, Byte[] value, int nLen, IntPtr pvReserved);
    internal static void sqlite3_result_subtype(IntPtr context, UInt32 subType);
    internal static IntPtr sqlite3_aggregate_context(IntPtr context, int nBytes);
    internal static SQLiteErrorCode sqlite3_bind_text16(IntPtr stmt, int index, string value, int nlen, IntPtr pvReserved);
    internal static void sqlite3_result_error16(IntPtr context, string strName, int nLen);
    internal static void sqlite3_result_text16(IntPtr context, string strName, int nLen, IntPtr pvReserved);
    internal static SQLiteErrorCode sqlite3_key(IntPtr db, Byte[] key, int keylen);
    internal static SQLiteErrorCode sqlite3_rekey(IntPtr db, Byte[] key, int keylen);
    internal static void sqlite3_busy_handler(IntPtr db, SQLiteBusyCallback func, IntPtr pvUser);
    internal static void sqlite3_progress_handler(IntPtr db, int ops, SQLiteProgressCallback func, IntPtr pvUser);
    internal static IntPtr sqlite3_set_authorizer(IntPtr db, SQLiteAuthorizerCallback func, IntPtr pvUser);
    internal static IntPtr sqlite3_update_hook(IntPtr db, SQLiteUpdateCallback func, IntPtr pvUser);
    internal static IntPtr sqlite3_commit_hook(IntPtr db, SQLiteCommitCallback func, IntPtr pvUser);
    internal static IntPtr sqlite3_trace(IntPtr db, SQLiteTraceCallback func, IntPtr pvUser);
    internal static IntPtr sqlite3_trace_v2(IntPtr db, SQLiteTraceFlags mask, SQLiteTraceCallback2 func, IntPtr pvUser);
    internal static int sqlite3_limit(IntPtr db, SQLiteLimitOpsEnum op, int value);
    internal static SQLiteErrorCode sqlite3_config_none(SQLiteConfigOpsEnum op);
    internal static SQLiteErrorCode sqlite3_config_int(SQLiteConfigOpsEnum op, int value);
    internal static SQLiteErrorCode sqlite3_config_log(SQLiteConfigOpsEnum op, SQLiteLogCallback func, IntPtr pvUser);
    internal static SQLiteErrorCode sqlite3_db_config_charptr(IntPtr db, SQLiteConfigDbOpsEnum op, IntPtr charPtr);
    internal static SQLiteErrorCode sqlite3_db_config_int_refint(IntPtr db, SQLiteConfigDbOpsEnum op, int value, Int32& result);
    internal static SQLiteErrorCode sqlite3_db_config_intptr_two_ints(IntPtr db, SQLiteConfigDbOpsEnum op, IntPtr ptr, int int0, int int1);
    internal static SQLiteErrorCode sqlite3_db_status(IntPtr db, SQLiteStatusOpsEnum op, Int32& current, Int32& highwater, int resetFlag);
    internal static IntPtr sqlite3_rollback_hook(IntPtr db, SQLiteRollbackCallback func, IntPtr pvUser);
    internal static IntPtr sqlite3_db_handle(IntPtr stmt);
    internal static SQLiteErrorCode sqlite3_db_release_memory(IntPtr db);
    internal static IntPtr sqlite3_db_filename(IntPtr db, IntPtr dbName);
    internal static int sqlite3_db_readonly(IntPtr db, IntPtr dbName);
    internal static IntPtr sqlite3_db_filename_bytes(IntPtr db, Byte[] dbName);
    internal static IntPtr sqlite3_next_stmt(IntPtr db, IntPtr stmt);
    internal static SQLiteErrorCode sqlite3_exec(IntPtr db, Byte[] strSql, IntPtr pvCallback, IntPtr pvParam, IntPtr& errMsg);
    internal static int sqlite3_release_memory(int nBytes);
    internal static int sqlite3_get_autocommit(IntPtr db);
    internal static SQLiteErrorCode sqlite3_extended_result_codes(IntPtr db, int onoff);
    internal static SQLiteErrorCode sqlite3_errcode(IntPtr db);
    internal static SQLiteErrorCode sqlite3_extended_errcode(IntPtr db);
    internal static IntPtr sqlite3_errstr(SQLiteErrorCode rc);
    internal static void sqlite3_log(SQLiteErrorCode iErrCode, Byte[] zFormat);
    internal static SQLiteErrorCode sqlite3_file_control(IntPtr db, Byte[] zDbName, int op, IntPtr pArg);
    internal static IntPtr sqlite3_backup_init(IntPtr destDb, Byte[] zDestName, IntPtr sourceDb, Byte[] zSourceName);
    internal static SQLiteErrorCode sqlite3_backup_step(IntPtr backup, int nPage);
    internal static int sqlite3_backup_remaining(IntPtr backup);
    internal static int sqlite3_backup_pagecount(IntPtr backup);
    internal static SQLiteErrorCode sqlite3_blob_close(IntPtr blob);
    internal static int sqlite3_blob_bytes(IntPtr blob);
    internal static SQLiteErrorCode sqlite3_blob_open(IntPtr db, Byte[] dbName, Byte[] tblName, Byte[] colName, long rowId, int flags, IntPtr& ptrBlob);
    internal static SQLiteErrorCode sqlite3_blob_read(IntPtr blob, Byte[] buffer, int count, int offset);
    internal static SQLiteErrorCode sqlite3_blob_reopen(IntPtr blob, long rowId);
    internal static SQLiteErrorCode sqlite3_blob_write(IntPtr blob, Byte[] buffer, int count, int offset);
    internal static SQLiteErrorCode sqlite3_declare_vtab(IntPtr db, IntPtr zSQL);
    internal static IntPtr sqlite3_mprintf(IntPtr format);
    internal static SQLiteTransactionState sqlite3_txn_state(IntPtr db, IntPtr zSchema);
    internal static IntPtr sqlite3_serialize(IntPtr db, IntPtr zSchema, Int64& dataSize, SQLiteSerializeFlags flags);
    internal static SQLiteErrorCode sqlite3_deserialize(IntPtr db, IntPtr zSchema, IntPtr pData, long dataSize, long bufferSize, SQLiteDeserializeFlags flags);
    internal static IntPtr sqlite3_create_disposable_module(IntPtr db, IntPtr name, sqlite3_module& module, IntPtr pClientData, xDestroyModule xDestroy);
    internal static void sqlite3_dispose_module(IntPtr pModule);
    internal static long sqlite3session_memory_used(IntPtr session);
    internal static SQLiteErrorCode sqlite3session_create(IntPtr db, Byte[] dbName, IntPtr& session);
    internal static void sqlite3session_delete(IntPtr session);
    internal static int sqlite3session_enable(IntPtr session, int enable);
    internal static int sqlite3session_indirect(IntPtr session, int indirect);
    internal static SQLiteErrorCode sqlite3session_attach(IntPtr session, Byte[] tblName);
    internal static void sqlite3session_table_filter(IntPtr session, xSessionFilter xFilter, IntPtr context);
    internal static SQLiteErrorCode sqlite3session_changeset(IntPtr session, Int32& nChangeSet, IntPtr& pChangeSet);
    internal static SQLiteErrorCode sqlite3session_diff(IntPtr session, Byte[] fromDbName, Byte[] tblName, IntPtr& errMsg);
    internal static SQLiteErrorCode sqlite3session_patchset(IntPtr session, Int32& nPatchSet, IntPtr& pPatchSet);
    internal static int sqlite3session_isempty(IntPtr session);
    internal static SQLiteErrorCode sqlite3changeset_start(IntPtr& iterator, int nChangeSet, IntPtr pChangeSet);
    internal static SQLiteErrorCode sqlite3changeset_start_v2(IntPtr& iterator, int nChangeSet, IntPtr pChangeSet, SQLiteChangeSetStartFlags flags);
    internal static SQLiteErrorCode sqlite3changeset_next(IntPtr iterator);
    internal static SQLiteErrorCode sqlite3changeset_op(IntPtr iterator, IntPtr& pTblName, Int32& nColumns, SQLiteAuthorizerActionCode& op, Int32& bIndirect);
    internal static SQLiteErrorCode sqlite3changeset_pk(IntPtr iterator, IntPtr& pPrimaryKeys, Int32& nColumns);
    internal static SQLiteErrorCode sqlite3changeset_old(IntPtr iterator, int columnIndex, IntPtr& pValue);
    internal static SQLiteErrorCode sqlite3changeset_new(IntPtr iterator, int columnIndex, IntPtr& pValue);
    internal static SQLiteErrorCode sqlite3changeset_conflict(IntPtr iterator, int columnIndex, IntPtr& pValue);
    internal static SQLiteErrorCode sqlite3changeset_fk_conflicts(IntPtr iterator, Int32& conflicts);
    internal static SQLiteErrorCode sqlite3changeset_finalize(IntPtr iterator);
    internal static SQLiteErrorCode sqlite3changeset_invert(int nIn, IntPtr pIn, Int32& nOut, IntPtr& pOut);
    internal static SQLiteErrorCode sqlite3changeset_concat(int nA, IntPtr pA, int nB, IntPtr pB, Int32& nOut, IntPtr& pOut);
    internal static SQLiteErrorCode sqlite3changegroup_new(IntPtr& changeGroup);
    internal static SQLiteErrorCode sqlite3changegroup_add(IntPtr changeGroup, int nData, IntPtr pData);
    internal static SQLiteErrorCode sqlite3changegroup_output(IntPtr changeGroup, Int32& nData, IntPtr& pData);
    internal static void sqlite3changegroup_delete(IntPtr changeGroup);
    internal static SQLiteErrorCode sqlite3changeset_apply(IntPtr db, int nChangeSet, IntPtr pChangeSet, xSessionFilter xFilter, xSessionConflict xConflict, IntPtr context);
    internal static SQLiteErrorCode sqlite3changeset_apply_strm(IntPtr db, xSessionInput xInput, IntPtr pIn, xSessionFilter xFilter, xSessionConflict xConflict, IntPtr context);
    internal static SQLiteErrorCode sqlite3changeset_concat_strm(xSessionInput xInputA, IntPtr pInA, xSessionInput xInputB, IntPtr pInB, xSessionOutput xOutput, IntPtr pOut);
    internal static SQLiteErrorCode sqlite3changeset_invert_strm(xSessionInput xInput, IntPtr pIn, xSessionOutput xOutput, IntPtr pOut);
    internal static SQLiteErrorCode sqlite3changeset_start_strm(IntPtr& iterator, xSessionInput xInput, IntPtr pIn);
    internal static SQLiteErrorCode sqlite3changeset_start_v2_strm(IntPtr& iterator, xSessionInput xInput, IntPtr pIn, SQLiteChangeSetStartFlags flags);
    internal static SQLiteErrorCode sqlite3session_changeset_strm(IntPtr session, xSessionOutput xOutput, IntPtr pOut);
    internal static SQLiteErrorCode sqlite3session_patchset_strm(IntPtr session, xSessionOutput xOutput, IntPtr pOut);
    internal static SQLiteErrorCode sqlite3changegroup_add_strm(IntPtr changeGroup, xSessionInput xInput, IntPtr pIn);
    internal static SQLiteErrorCode sqlite3changegroup_output_strm(IntPtr changeGroup, xSessionOutput xOutput, IntPtr pOut);
}
[SuppressUnmanagedCodeSecurityAttribute]
internal static class System.Data.SQLite.UnsafeNativeMethodsPosix : object {
    internal static int RTLD_LAZY;
    internal static int RTLD_NOW;
    internal static int RTLD_GLOBAL;
    internal static int RTLD_LOCAL;
    internal static int RTLD_DEFAULT;
    private static Char[] utsNameSeparators;
    private static UnsafeNativeMethodsPosix();
    private static int uname(utsname_interop& name);
    internal static IntPtr dlopen(string fileName, int mode);
    internal static int dlclose(IntPtr module);
    internal static bool GetOsVersionInfo(utsname& utsName);
}
[SuppressUnmanagedCodeSecurityAttribute]
internal static class System.Data.SQLite.UnsafeNativeMethodsWin32 : object {
    internal static IntPtr LoadLibrary(string fileName);
    internal static void GetSystemInfo(SYSTEM_INFO& systemInfo);
}
public class System.Data.SQLite.UpdateEventArgs : EventArgs {
    public string Database;
    public string Table;
    public UpdateEventType Event;
    public long RowId;
    internal UpdateEventArgs(string database, string table, UpdateEventType eventType, long rowid);
}
public enum System.Data.SQLite.UpdateEventType : Enum {
    public int value__;
    public static UpdateEventType Delete;
    public static UpdateEventType Insert;
    public static UpdateEventType Update;
}
internal class System.Data.SQLite.WeakConnectionPool : object {
    public sealed virtual void GetCounts(string fileName, Dictionary`2& counts, Int32& openCount, Int32& closeCount, Int32& totalCount);
    public sealed virtual void ClearPool(string fileName);
    public sealed virtual void ClearAllPools();
    public sealed virtual void Add(string fileName, object handle, int version);
    public sealed virtual object Remove(string fileName, int maxPoolSize, Int32& version);
    public sealed virtual void Initialize(object argument);
    public sealed virtual void Terminate(object argument);
    public sealed virtual void GetCounts(Int32& openCount, Int32& closeCount);
    public sealed virtual void ResetCounts();
}
