[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Stubble.Core.Builders.ParserPipelineBuilder : object {
    private ParserPipeline pipeline;
    [CompilerGeneratedAttribute]
private List`1<InlineParser> <InlineParsers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BlockParser> <BlockParsers>k__BackingField;
    public List`1<InlineParser> InlineParsers { get; }
    public List`1<BlockParser> BlockParsers { get; }
    [CompilerGeneratedAttribute]
public List`1<InlineParser> get_InlineParsers();
    [CompilerGeneratedAttribute]
public List`1<BlockParser> get_BlockParsers();
    public ParserPipeline Build();
    public ParserPipelineBuilder Replace(InlineParser parser);
    public ParserPipelineBuilder Replace(BlockParser parser);
    public ParserPipelineBuilder AddAfter(InlineParser parser);
    public ParserPipelineBuilder AddAfter(BlockParser parser);
    public ParserPipelineBuilder AddBefore(InlineParser parser);
    public ParserPipelineBuilder AddBefore(BlockParser parser);
    public ParserPipelineBuilder Remove();
    private static void Remove(IList`1<TItem> collection);
    private static void Replace(IList`1<TItem> collection, TItem value);
    private static void AddAfter(IList`1<TItem> collection, TItem value);
    private static void AddBefore(IList`1<TItem> collection, TItem value);
}
public class Stubble.Core.Builders.StubbleBuilder : object {
    [CompilerGeneratedAttribute]
private Action`1<RendererSettingsBuilder> <ConfigureSettings>k__BackingField;
    internal Action`1<RendererSettingsBuilder> ConfigureSettings { get; private set; }
    [CompilerGeneratedAttribute]
internal Action`1<RendererSettingsBuilder> get_ConfigureSettings();
    [CompilerGeneratedAttribute]
private void set_ConfigureSettings(Action`1<RendererSettingsBuilder> value);
    public sealed virtual StubbleVisitorRenderer Build();
    public StubbleBuilder Configure(Action`1<RendererSettingsBuilder> configureSettings);
}
public static class Stubble.Core.Classes.EncodingFunctions : object {
    [CompilerGeneratedAttribute]
private static Func`2<string, string> <WebUtilityHtmlEncoding>k__BackingField;
    public static Func`2<string, string> WebUtilityHtmlEncoding { get; }
    private static EncodingFunctions();
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_WebUtilityHtmlEncoding();
}
[DefaultMemberAttribute("Item")]
internal class Stubble.Core.Classes.LimitedSizeConcurrentDictionary`2 : ConcurrentDictionary`2<TKey, TValue> {
    [CompilerGeneratedAttribute]
private int <MaxSize>k__BackingField;
    private int MaxSize { get; }
    public TValue Item { get; public set; }
    public LimitedSizeConcurrentDictionary`2(int maxSize);
    [CompilerGeneratedAttribute]
private int get_MaxSize();
    public TValue get_Item(TKey key);
    public void set_Item(TKey key, TValue value);
    private void DumpFirstItem();
}
public class Stubble.Core.Classes.Tags : object {
    [CompilerGeneratedAttribute]
private string <StartTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndTag>k__BackingField;
    public string StartTag { get; }
    public string EndTag { get; }
    public Tags(string startTag, string endTag);
    [CompilerGeneratedAttribute]
public string get_StartTag();
    [CompilerGeneratedAttribute]
public string get_EndTag();
    public static bool op_Equality(Tags left, Tags right);
    public static bool op_Inequality(Tags left, Tags right);
    public virtual string ToString();
    public sealed virtual bool Equals(Tags other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Stubble.Core.Classes.TypeBySubclassAndAssignableImpl : Comparer`1<Type> {
    private static Type ObjectType;
    [CompilerGeneratedAttribute]
private static IComparer`1<Type> <Default>k__BackingField;
    public static IComparer`1<Type> Default { get; }
    private static TypeBySubclassAndAssignableImpl();
    [CompilerGeneratedAttribute]
public static IComparer`1<Type> get_Default();
    public virtual int Compare(Type x, Type y);
}
public abstract class Stubble.Core.Contexts.BaseContext`1 : object {
    [CompilerGeneratedAttribute]
private TContext <ParentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IStubbleLoader <PartialLoader>k__BackingField;
    public TContext ParentContext { get; }
    public IStubbleLoader PartialLoader { get; }
    public BaseContext`1(IStubbleLoader partialLoader, TContext parentContext);
    [CompilerGeneratedAttribute]
public TContext get_ParentContext();
    [CompilerGeneratedAttribute]
public IStubbleLoader get_PartialLoader();
    public abstract virtual TContext Push(object newView);
}
public class Stubble.Core.Contexts.Context : BaseContext`1<Context> {
    private object view;
    [DynamicAttribute]
[CompilerGeneratedAttribute]
private object <View>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderSettings <RenderSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private RendererSettings <RendererSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Cache>k__BackingField;
    [DynamicAttribute]
public object View { get; }
    public RenderSettings RenderSettings { get; }
    public RendererSettings RendererSettings { get; }
    private IDictionary`2<string, object> Cache { get; }
    public Context(object view, RendererSettings rendererSettings, RenderSettings settings);
    public Context(object view, RendererSettings rendererSettings, IStubbleLoader partialLoader, RenderSettings settings);
    public Context(object view, RendererSettings rendererSettings, IStubbleLoader partialLoader, Context parentContext, RenderSettings settings);
    [CompilerGeneratedAttribute]
public object get_View();
    [CompilerGeneratedAttribute]
public RenderSettings get_RenderSettings();
    [CompilerGeneratedAttribute]
public RendererSettings get_RendererSettings();
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> get_Cache();
    public object Lookup(string name);
    public bool IsTruthyValue(object value);
    public virtual Context Push(object newView);
    private static void ThrowDataMissException(string name, bool skipRecursiveLookup);
    private object GetValueFromRegistry(object value, string key);
    private object TryEnumerationConversionIfRequired(object value);
}
public class Stubble.Core.Exceptions.StubbleAmbigousMatchException : StubbleException {
    public StubbleAmbigousMatchException(string message);
    public StubbleAmbigousMatchException(string message, Exception innerException);
}
public class Stubble.Core.Exceptions.StubbleDataMissException : StubbleException {
    public StubbleDataMissException(string message);
    public StubbleDataMissException(string message, Exception innerException);
}
public class Stubble.Core.Exceptions.StubbleException : Exception {
    public StubbleException(string message);
    public StubbleException(string message, Exception innerException);
}
public class Stubble.Core.Exceptions.UnknownTemplateException : StubbleException {
    public UnknownTemplateException(string message);
    public UnknownTemplateException(string message, Exception innerException);
}
[ExtensionAttribute]
public static class Stubble.Core.Helpers.Helpers : object {
    [ExtensionAttribute]
public static Dictionary`2<TK, TV> MergeLeft(IDictionary`2<TK, TV> me, IDictionary`2[] others);
}
public static class Stubble.Core.Helpers.ReflectionHelper : object {
    public static Dictionary`2<string, Lazy`1<Func`2<object, object>>> GetMemberFunctionLookup(Type objectType);
    public static Expression GetExpressionFromMemberInfo(MemberInfo m, Expression instance);
    [CompilerGeneratedAttribute]
internal static bool <GetExpressionFromMemberInfo>g__IsZeroArityGetterMethod|1_0(MethodInfo mi);
}
public static class Stubble.Core.Helpers.SliceHelpers : object {
    [IteratorStateMachineAttribute("Stubble.Core.Helpers.SliceHelpers/<SplitSliceToLines>d__0")]
public static IEnumerable`1<StringSlice> SplitSliceToLines(StringSlice slice);
}
public static class Stubble.Core.Helpers.TaskHelpers : object {
    [CompilerGeneratedAttribute]
private static Task <CompletedTask>k__BackingField;
    public static Task CompletedTask { get; }
    private static TaskHelpers();
    [CompilerGeneratedAttribute]
public static Task get_CompletedTask();
}
[ExtensionAttribute]
public static class Stubble.Core.Imported.CharHelper : object {
    [ExtensionAttribute]
public static bool IsWhitespace(char c);
}
public interface Stubble.Core.Imported.ICharIterator {
    public int Start { get; }
    public char CurrentChar { get; }
    public int End { get; }
    public bool IsEmpty { get; }
    public abstract virtual int get_Start();
    public abstract virtual char get_CurrentChar();
    public abstract virtual int get_End();
    public abstract virtual char NextChar();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual bool TrimStart();
}
internal static class Stubble.Core.Imported.MethodImplOptionPortable : object {
    public static MethodImplOptions AggressiveInlining;
}
public class Stubble.Core.Imported.OrderedList`1 : List`1<T> {
    public OrderedList`1(IEnumerable`1<T> collection);
    public bool InsertBefore(T element);
    public TElement Find();
    public TElement FindExact();
    public void AddIfNotAlready();
    public void AddIfNotAlready(TElement telement);
    public bool InsertAfter(T element);
    public bool Contains();
    public bool Replace(T replacement);
}
[DefaultMemberAttribute("Item")]
public class Stubble.Core.Imported.StringSlice : ValueType {
    public static StringSlice Empty;
    public string Text;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    public int Start { get; public set; }
    public int End { get; public set; }
    public int Length { get; }
    public char CurrentChar { get; }
    public bool IsEmpty { get; }
    public char Item { get; }
    public StringSlice(string text);
    public StringSlice(string text, int start, int end);
    private static StringSlice();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual int get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual int get_End();
    [CompilerGeneratedAttribute]
public void set_End(int value);
    public int get_Length();
    public sealed virtual char get_CurrentChar();
    public sealed virtual bool get_IsEmpty();
    public char get_Item(int index);
    public sealed virtual char NextChar();
    public char PeekChar(int offset);
    public char PeekCharAbsolute(int index);
    public char PeekCharExtra(int offset);
    public bool Match(string text, int offset);
    public bool Match(string text, int end, int offset);
    public bool MatchLowercase(string text, int end, int offset);
    public int IndexOf(string text, int offset, bool ignoreCase);
    public int IndexOf(char c);
    public sealed virtual bool TrimStart();
    public void TrimStart(Int32& spaceCount);
    public bool TrimEnd();
    public void Trim();
    public virtual string ToString();
    public string ToString(int startIndex, int endIndex);
    public bool IsEmptyOrWhitespace();
    public bool IsNewLine();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool Equals(StringSlice other);
}
public interface Stubble.Core.Interfaces.IAsyncStubbleRenderer {
    public abstract virtual ValueTask`1<string> RenderAsync(string template, object view);
    public abstract virtual ValueTask`1<string> RenderAsync(string template, object view, RenderSettings settings);
    public abstract virtual ValueTask`1<string> RenderAsync(string template, object view, IDictionary`2<string, string> partials);
    public abstract virtual ValueTask`1<string> RenderAsync(string template, object view, IDictionary`2<string, string> partials, RenderSettings settings);
}
public interface Stubble.Core.Interfaces.IStubbleBuilder`1 {
    public abstract virtual TRenderer Build();
}
public interface Stubble.Core.Interfaces.IStubbleLoader {
    public abstract virtual string Load(string name);
    public abstract virtual ValueTask`1<string> LoadAsync(string name);
    public abstract virtual IStubbleLoader Clone();
}
public interface Stubble.Core.Interfaces.IStubbleRenderer {
    public abstract virtual string Render(string template, object view);
    public abstract virtual string Render(string template, object view, RenderSettings settings);
    public abstract virtual string Render(string template, object view, IDictionary`2<string, string> partials);
    public abstract virtual string Render(string template, object view, IDictionary`2<string, string> partials, RenderSettings settings);
}
public class Stubble.Core.Loaders.CompositeLoader : object {
    [CompilerGeneratedAttribute]
private List`1<IStubbleLoader> <Loaders>k__BackingField;
    internal List`1<IStubbleLoader> Loaders { get; }
    public CompositeLoader(IStubbleLoader[] loaders);
    [CompilerGeneratedAttribute]
internal List`1<IStubbleLoader> get_Loaders();
    public CompositeLoader AddLoader(IStubbleLoader loader);
    public CompositeLoader AddLoaders(IStubbleLoader[] newLoaders);
    public sealed virtual IStubbleLoader Clone();
    public sealed virtual string Load(string name);
    [AsyncStateMachineAttribute("Stubble.Core.Loaders.CompositeLoader/<LoadAsync>d__8")]
public sealed virtual ValueTask`1<string> LoadAsync(string name);
}
public class Stubble.Core.Loaders.DictionaryLoader : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <TemplateCache>k__BackingField;
    internal IDictionary`2<string, string> TemplateCache { get; }
    public DictionaryLoader(IDictionary`2<string, string> templates);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, string> get_TemplateCache();
    public sealed virtual IStubbleLoader Clone();
    public sealed virtual string Load(string name);
    public sealed virtual ValueTask`1<string> LoadAsync(string name);
}
public class Stubble.Core.Loaders.StringLoader : object {
    public sealed virtual IStubbleLoader Clone();
    public sealed virtual string Load(string name);
    public sealed virtual ValueTask`1<string> LoadAsync(string name);
}
public class Stubble.Core.Parser.CachedMustacheParser : object {
    [CompilerGeneratedAttribute]
private LimitedSizeConcurrentDictionary`2<TemplateKey, MustacheTemplate> <Cache>k__BackingField;
    internal LimitedSizeConcurrentDictionary`2<TemplateKey, MustacheTemplate> Cache { get; }
    public CachedMustacheParser(UInt32 cacheLimit);
    [CompilerGeneratedAttribute]
internal LimitedSizeConcurrentDictionary`2<TemplateKey, MustacheTemplate> get_Cache();
    public sealed virtual MustacheTemplate Parse(string text, Tags startingTags, int lineIndent, ParserPipeline pipeline);
}
public class Stubble.Core.Parser.InstanceMustacheParser : object {
    public sealed virtual MustacheTemplate Parse(string text, Tags startingTags, int lineIndent, ParserPipeline pipeline);
}
public abstract class Stubble.Core.Parser.Interfaces.BlockParser : object {
    public abstract virtual ParserState TryOpenBlock(Processor processor, StringSlice& slice);
    public abstract virtual bool TryClose(Processor processor, StringSlice& slice, BlockToken token);
    public abstract virtual void EndBlock(Processor processor, BlockToken token, BlockCloseToken closeToken, StringSlice content);
}
public interface Stubble.Core.Parser.Interfaces.IMustacheParser {
    public abstract virtual MustacheTemplate Parse(string text, Tags startingTags, int lineIndent, ParserPipeline pipeline);
}
public abstract class Stubble.Core.Parser.Interfaces.InlineParser : object {
    public abstract virtual bool Match(Processor processor, StringSlice& slice);
}
public enum Stubble.Core.Parser.LiteralTagResult : Enum {
    public int value__;
    public static LiteralTagResult NewLine;
    public static LiteralTagResult EndOfFile;
    public static LiteralTagResult TagStart;
    public static LiteralTagResult NoContent;
}
public class Stubble.Core.Parser.MustacheParser : object {
    private Processor processor;
    private StringSlice content;
    private MustacheParser(string text, Tags startingTags, int lineIndent, ParserPipeline pipeline);
    public static MustacheTemplate Parse(string text, Tags startingTags, int lineIndent, ParserPipeline pipeline);
    private MustacheTemplate Parse();
}
public class Stubble.Core.Parser.ParserPipeline : object {
    [CompilerGeneratedAttribute]
private List`1<InlineParser> <InlineParsers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BlockParser> <BlockParsers>k__BackingField;
    internal List`1<InlineParser> InlineParsers { get; }
    internal List`1<BlockParser> BlockParsers { get; }
    internal ParserPipeline(List`1<InlineParser> inlineParsers, List`1<BlockParser> blockParsers);
    [CompilerGeneratedAttribute]
internal List`1<InlineParser> get_InlineParsers();
    [CompilerGeneratedAttribute]
internal List`1<BlockParser> get_BlockParsers();
}
public enum Stubble.Core.Parser.ParserState : Enum {
    public int value__;
    public static ParserState None;
    public static ParserState Skip;
    public static ParserState Continue;
    public static ParserState Break;
}
public class Stubble.Core.Parser.Processor : object {
    private List`1<InlineParser> inlineParsers;
    private List`1<BlockParser> blockParsers;
    private LiteralTagParser literalParser;
    private List`1<MustacheToken> tagCache;
    private bool firstOnLine;
    private StringSlice content;
    [CompilerGeneratedAttribute]
private Tags <CurrentTags>k__BackingField;
    [CompilerGeneratedAttribute]
private MustacheToken <CurrentToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasTagOnLine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSeenNonSpaceOnLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineIndent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultLineIndent>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <DefaultLineIndentSlice>k__BackingField;
    [CompilerGeneratedAttribute]
private MustacheTemplate <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<BlockToken> <OpenBlocks>k__BackingField;
    public Tags CurrentTags { get; public set; }
    public MustacheToken CurrentToken { get; public set; }
    public bool HasTagOnLine { get; public set; }
    public bool HasSeenNonSpaceOnLine { get; public set; }
    public int LineIndent { get; public set; }
    public int DefaultLineIndent { get; public set; }
    public StringSlice DefaultLineIndentSlice { get; public set; }
    public MustacheTemplate Document { get; }
    private Stack`1<BlockToken> OpenBlocks { get; }
    public Processor(List`1<InlineParser> inlineParsers, List`1<BlockParser> blockParsers);
    [CompilerGeneratedAttribute]
public Tags get_CurrentTags();
    [CompilerGeneratedAttribute]
public void set_CurrentTags(Tags value);
    [CompilerGeneratedAttribute]
public MustacheToken get_CurrentToken();
    [CompilerGeneratedAttribute]
public void set_CurrentToken(MustacheToken value);
    [CompilerGeneratedAttribute]
public bool get_HasTagOnLine();
    [CompilerGeneratedAttribute]
public void set_HasTagOnLine(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasSeenNonSpaceOnLine();
    [CompilerGeneratedAttribute]
public void set_HasSeenNonSpaceOnLine(bool value);
    [CompilerGeneratedAttribute]
public int get_LineIndent();
    [CompilerGeneratedAttribute]
public void set_LineIndent(int value);
    [CompilerGeneratedAttribute]
public int get_DefaultLineIndent();
    [CompilerGeneratedAttribute]
public void set_DefaultLineIndent(int value);
    [CompilerGeneratedAttribute]
public StringSlice get_DefaultLineIndentSlice();
    [CompilerGeneratedAttribute]
public void set_DefaultLineIndentSlice(StringSlice value);
    [CompilerGeneratedAttribute]
public MustacheTemplate get_Document();
    [CompilerGeneratedAttribute]
private Stack`1<BlockToken> get_OpenBlocks();
    public void ProcessTemplate(StringSlice content);
    private void SquashAndNestTokens();
    private void SetTagContent();
    private bool TryOpenBlocks();
    private void ProcessInlineTags();
    private void AddTag(MustacheToken token);
    private void NewLine();
    private void RemoveEmptyTags();
    private void ClearTagCache();
    private void AddIndentToTag(MustacheToken token);
    [CompilerGeneratedAttribute]
private void <SetTagContent>g__ProcessTag|43_0(MustacheToken tag);
}
public class Stubble.Core.Parser.TokenParsers.CommentTagParser : InlineParser {
    private static char TagId;
    public virtual bool Match(Processor processor, StringSlice& slice);
}
public class Stubble.Core.Parser.TokenParsers.DelimiterTagParser : InlineParser {
    private Char[] openingTagDelimiter;
    private Char[] closingTagDelimiter;
    public virtual bool Match(Processor processor, StringSlice& slice);
}
public class Stubble.Core.Parser.TokenParsers.InterpolationTagParser : InlineParser {
    public virtual bool Match(Processor processor, StringSlice& slice);
}
public class Stubble.Core.Parser.TokenParsers.InvertedSectionParser : BlockParser {
    private static char OpeningTagDelimiter;
    public virtual ParserState TryOpenBlock(Processor processor, StringSlice& slice);
    public virtual void EndBlock(Processor processor, BlockToken token, BlockCloseToken closeToken, StringSlice content);
    public virtual bool TryClose(Processor processor, StringSlice& slice, BlockToken token);
}
public class Stubble.Core.Parser.TokenParsers.LiteralTagParser : object {
    public LiteralTagResult Match(Processor processor, StringSlice& slice);
}
public class Stubble.Core.Parser.TokenParsers.PartialTagParser : InlineParser {
    private static char TagId;
    public virtual bool Match(Processor processor, StringSlice& slice);
}
public class Stubble.Core.Parser.TokenParsers.SectionTagParser : BlockParser {
    private static char OpeningTagDelimiter;
    public virtual ParserState TryOpenBlock(Processor processor, StringSlice& slice);
    public virtual void EndBlock(Processor processor, BlockToken token, BlockCloseToken closeToken, StringSlice content);
    public virtual bool TryClose(Processor processor, StringSlice& slice, BlockToken token);
}
public interface Stubble.Core.Renderers.Interfaces.ITokenRenderer`1 {
    public abstract virtual bool Accept(RendererBase`1<TContext> renderer, MustacheToken obj);
    public abstract virtual void Write(RendererBase`1<TContext> renderer, MustacheToken objectToRender, TContext context);
    public abstract virtual Task WriteAsync(RendererBase`1<TContext> renderer, MustacheToken objectToRender, TContext context);
}
public abstract class Stubble.Core.Renderers.MustacheTokenRenderer`3 : object {
    public sealed virtual bool Accept(RendererBase`1<TContext> renderer, MustacheToken obj);
    public virtual void Write(RendererBase`1<TContext> renderer, MustacheToken obj, TContext context);
    public sealed virtual Task WriteAsync(RendererBase`1<TContext> renderer, MustacheToken obj, TContext context);
    protected abstract virtual void Write(TRenderer renderer, TToken obj, TContext context);
    protected abstract virtual Task WriteAsync(TRenderer renderer, TToken obj, TContext context);
}
public abstract class Stubble.Core.Renderers.RendererBase`1 : object {
    private TokenRendererPipeline`1<TContext> rendererPipeline;
    protected RendererBase`1(TokenRendererPipeline`1<TContext> rendererPipeline);
    public abstract virtual object Render(BlockToken token, TContext context);
    public abstract virtual ValueTask`1<object> RenderAsync(BlockToken token, TContext context);
    public void Write(T obj, TContext context);
    [AsyncStateMachineAttribute("Stubble.Core.Renderers.RendererBase`1/<WriteAsync>d__5`1")]
public Task WriteAsync(T obj, TContext context);
}
public abstract class Stubble.Core.Renderers.StringRenderer.StringObjectRenderer`1 : MustacheTokenRenderer`3<StringRender, TToken, Context> {
}
public class Stubble.Core.Renderers.StringRenderer.StringRender : TextRendererBase`1<StringRender> {
    public StringRender(TextWriter writer, TokenRendererPipeline`1<Context> rendererPipeline);
    public StringRender(TextWriter writer, TokenRendererPipeline`1<Context> rendererPipeline, UInt32 maxDepth);
}
public class Stubble.Core.Renderers.StringRenderer.TextRendererBase : RendererBase`1<Context> {
    private UInt32 maxDepth;
    private TextWriter writer;
    private UInt32 currentDepth;
    public TextWriter Writer { get; public set; }
    protected TextRendererBase(TextWriter writer, TokenRendererPipeline`1<Context> rendererPipeline, UInt32 maxDepth);
    public TextWriter get_Writer();
    public void set_Writer(TextWriter value);
    public virtual object Render(BlockToken block, Context context);
    [AsyncStateMachineAttribute("Stubble.Core.Renderers.StringRenderer.TextRendererBase/<RenderAsync>d__8")]
public virtual ValueTask`1<object> RenderAsync(BlockToken block, Context context);
}
public abstract class Stubble.Core.Renderers.StringRenderer.TextRendererBase`1 : TextRendererBase {
    private Char[] buffer;
    protected TextRendererBase`1(TextWriter writer, TokenRendererPipeline`1<Context> rendererPipeline, UInt32 maxDepth);
    public T Write(string content);
    public T Write(StringSlice& slice);
    public T Write(char character, int repeat);
    public T Write(string content, int offset, int length);
}
public class Stubble.Core.Renderers.StringRenderer.TokenRenderers.InterpolationTokenRenderer : StringObjectRenderer`1<InterpolationToken> {
    protected static string ConvertToStringInCulture(object obj, CultureInfo culture);
    protected virtual void Write(StringRender renderer, InterpolationToken obj, Context context);
    [AsyncStateMachineAttribute("Stubble.Core.Renderers.StringRenderer.TokenRenderers.InterpolationTokenRenderer/<WriteAsync>d__2")]
protected virtual Task WriteAsync(StringRender renderer, InterpolationToken obj, Context context);
}
internal class Stubble.Core.Renderers.StringRenderer.TokenRenderers.InvertedSectionTokenRenderer : StringObjectRenderer`1<InvertedSectionToken> {
    protected virtual void Write(StringRender renderer, InvertedSectionToken obj, Context context);
    [AsyncStateMachineAttribute("Stubble.Core.Renderers.StringRenderer.TokenRenderers.InvertedSectionTokenRenderer/<WriteAsync>d__1")]
protected virtual Task WriteAsync(StringRender renderer, InvertedSectionToken obj, Context context);
}
internal class Stubble.Core.Renderers.StringRenderer.TokenRenderers.LiteralTokenRenderer : StringObjectRenderer`1<LiteralToken> {
    protected virtual void Write(StringRender renderer, LiteralToken obj, Context context);
    protected virtual Task WriteAsync(StringRender renderer, LiteralToken obj, Context context);
}
internal class Stubble.Core.Renderers.StringRenderer.TokenRenderers.PartialTokenRenderer : StringObjectRenderer`1<PartialToken> {
    protected virtual void Write(StringRender renderer, PartialToken obj, Context context);
    [AsyncStateMachineAttribute("Stubble.Core.Renderers.StringRenderer.TokenRenderers.PartialTokenRenderer/<WriteAsync>d__1")]
protected virtual Task WriteAsync(StringRender renderer, PartialToken obj, Context context);
}
internal class Stubble.Core.Renderers.StringRenderer.TokenRenderers.SectionTokenRenderer : StringObjectRenderer`1<SectionToken> {
    private static HashSet`1<Type> LambdaTypes;
    private static SectionTokenRenderer();
    protected virtual void Write(StringRender renderer, SectionToken obj, Context context);
    [AsyncStateMachineAttribute("Stubble.Core.Renderers.StringRenderer.TokenRenderers.SectionTokenRenderer/<WriteAsync>d__2")]
protected virtual Task WriteAsync(StringRender renderer, SectionToken obj, Context context);
    private Func`2<string, string> RenderInContext(Context context, Tags tags);
    private Func`2<string, Task`1<string>> RenderInContextAsync(Context context, Tags tags);
}
public class Stubble.Core.Renderers.TokenRendererPipeline`1 : object {
    private OrderedList`1<ITokenRenderer`1<TContext>> tokenRenderers;
    private ConcurrentDictionary`2<Type, ITokenRenderer`1<TContext>> renderersPerType;
    public TokenRendererPipeline`1(List`1<ITokenRenderer`1<TContext>> initalRenderers);
    public ITokenRenderer`1<TContext> TryGetTokenRenderer(RendererBase`1<TContext> renderer, T obj);
}
public abstract class Stubble.Core.Settings.BaseSettings : object {
    [CompilerGeneratedAttribute]
private IStubbleLoader <TemplateLoader>k__BackingField;
    [CompilerGeneratedAttribute]
private IStubbleLoader <PartialTemplateLoader>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaxRecursionDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreCaseOnKeyLookup>k__BackingField;
    [CompilerGeneratedAttribute]
private IMustacheParser <Parser>k__BackingField;
    [CompilerGeneratedAttribute]
private ParserPipeline <ParserPipeline>k__BackingField;
    [CompilerGeneratedAttribute]
private Tags <DefaultTags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableHashSet`1<Type> <SectionBlacklistTypes>k__BackingField;
    public IStubbleLoader TemplateLoader { get; }
    public IStubbleLoader PartialTemplateLoader { get; }
    public UInt32 MaxRecursionDepth { get; }
    public bool IgnoreCaseOnKeyLookup { get; }
    public IMustacheParser Parser { get; }
    public ParserPipeline ParserPipeline { get; }
    public Tags DefaultTags { get; }
    public ImmutableHashSet`1<Type> SectionBlacklistTypes { get; }
    public BaseSettings(IStubbleLoader templateLoader, IStubbleLoader partialLoader, UInt32 maxRecursionDepth, bool ignoreCaseOnLookup, IMustacheParser parser, Tags defaultTags, ParserPipeline parserPipeline, HashSet`1<Type> sectionBlacklistTypes);
    [CompilerGeneratedAttribute]
public IStubbleLoader get_TemplateLoader();
    [CompilerGeneratedAttribute]
public IStubbleLoader get_PartialTemplateLoader();
    [CompilerGeneratedAttribute]
public UInt32 get_MaxRecursionDepth();
    [CompilerGeneratedAttribute]
public bool get_IgnoreCaseOnKeyLookup();
    [CompilerGeneratedAttribute]
public IMustacheParser get_Parser();
    [CompilerGeneratedAttribute]
public ParserPipeline get_ParserPipeline();
    [CompilerGeneratedAttribute]
public Tags get_DefaultTags();
    [CompilerGeneratedAttribute]
public ImmutableHashSet`1<Type> get_SectionBlacklistTypes();
}
public abstract class Stubble.Core.Settings.BaseSettingsBuilder`2 : object {
    private IStubbleLoader templateLoader;
    private IStubbleLoader partialTemplateLoader;
    [CompilerGeneratedAttribute]
private ParserPipelineBuilder <ParserPipelineBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <MaxRecursionDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreCaseOnKeyLookup>k__BackingField;
    [CompilerGeneratedAttribute]
private IMustacheParser <Parser>k__BackingField;
    [CompilerGeneratedAttribute]
private Tags <DefaultTags>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <SectionBlacklistTypes>k__BackingField;
    protected internal ParserPipelineBuilder ParserPipelineBuilder { get; }
    protected internal IStubbleLoader TemplateLoader { get; }
    protected internal IStubbleLoader PartialTemplateLoader { get; }
    protected internal Nullable`1<UInt32> MaxRecursionDepth { get; protected internal set; }
    protected internal bool IgnoreCaseOnKeyLookup { get; protected internal set; }
    protected internal IMustacheParser Parser { get; protected internal set; }
    protected internal Tags DefaultTags { get; protected internal set; }
    protected internal HashSet`1<Type> SectionBlacklistTypes { get; protected internal set; }
    [CompilerGeneratedAttribute]
protected internal ParserPipelineBuilder get_ParserPipelineBuilder();
    protected internal IStubbleLoader get_TemplateLoader();
    protected internal IStubbleLoader get_PartialTemplateLoader();
    [CompilerGeneratedAttribute]
protected internal Nullable`1<UInt32> get_MaxRecursionDepth();
    [CompilerGeneratedAttribute]
protected internal void set_MaxRecursionDepth(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
protected internal bool get_IgnoreCaseOnKeyLookup();
    [CompilerGeneratedAttribute]
protected internal void set_IgnoreCaseOnKeyLookup(bool value);
    [CompilerGeneratedAttribute]
protected internal IMustacheParser get_Parser();
    [CompilerGeneratedAttribute]
protected internal void set_Parser(IMustacheParser value);
    [CompilerGeneratedAttribute]
protected internal Tags get_DefaultTags();
    [CompilerGeneratedAttribute]
protected internal void set_DefaultTags(Tags value);
    [CompilerGeneratedAttribute]
protected internal HashSet`1<Type> get_SectionBlacklistTypes();
    [CompilerGeneratedAttribute]
protected internal void set_SectionBlacklistTypes(HashSet`1<Type> value);
    public abstract virtual TSettings BuildSettings();
    public TBuilder AddToTemplateLoader(IStubbleLoader loader);
    public TBuilder SetTemplateLoader(IStubbleLoader loader);
    public TBuilder AddToPartialTemplateLoader(IStubbleLoader loader);
    public TBuilder ConfigureParserPipeline(Action`1<ParserPipelineBuilder> builder);
    public TBuilder SetPartialTemplateLoader(IStubbleLoader loader);
    public TBuilder SetMaxRecursionDepth(UInt32 maxRecursionDepth);
    public TBuilder SetIgnoreCaseOnKeyLookup(bool ignoreCaseOnKeyLookup);
    public TBuilder SetMustacheParser(IMustacheParser parser);
    public TBuilder SetDefaultTags(Tags tags);
    [ObsoleteAttribute("Use the ConfigureParserPipeline to modify the pipeline.", "True")]
public TBuilder SetParserPipeline(ParserPipeline pipeline);
    public TBuilder SetSectionBlacklistTypes(HashSet`1<Type> types);
    public TBuilder AddSectionBlacklistType(Type type);
    private TBuilder CombineLoaders(IStubbleLoader& currentLoader, IStubbleLoader loader);
}
public class Stubble.Core.Settings.RendererSettings : BaseSettings {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<Type> <OrderedValueGetters>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Type, ValueGetterDelegate> <ValueGetters>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Type, ImmutableArray`1<Func`2<object, bool>>> <TruthyChecks>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderSettings <RenderSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Type, Func`2<object, IEnumerable>> <EnumerationConverters>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenRendererPipeline`1<Context> <RendererPipeline>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <EncodingFuction>k__BackingField;
    public ImmutableArray`1<Type> OrderedValueGetters { get; }
    public ImmutableDictionary`2<Type, ValueGetterDelegate> ValueGetters { get; }
    public ImmutableDictionary`2<Type, ImmutableArray`1<Func`2<object, bool>>> TruthyChecks { get; }
    public RenderSettings RenderSettings { get; }
    public ImmutableDictionary`2<Type, Func`2<object, IEnumerable>> EnumerationConverters { get; }
    public TokenRendererPipeline`1<Context> RendererPipeline { get; }
    public Func`2<string, string> EncodingFuction { get; }
    public RendererSettings(Dictionary`2<Type, ValueGetterDelegate> valueGetters, Dictionary`2<Type, List`1<Func`2<object, bool>>> truthyChecks, IStubbleLoader templateLoader, IStubbleLoader partialLoader, UInt32 maxRecursionDepth, RenderSettings renderSettings, Dictionary`2<Type, Func`2<object, IEnumerable>> enumerationConverters, bool ignoreCaseOnLookup, IMustacheParser parser, TokenRendererPipeline`1<Context> rendererPipeline, Tags defaultTags, ParserPipeline parserPipeline, HashSet`1<Type> sectionBlacklistTypes, Func`2<string, string> encodingFunction);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<Type> get_OrderedValueGetters();
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<Type, ValueGetterDelegate> get_ValueGetters();
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<Type, ImmutableArray`1<Func`2<object, bool>>> get_TruthyChecks();
    [CompilerGeneratedAttribute]
public RenderSettings get_RenderSettings();
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<Type, Func`2<object, IEnumerable>> get_EnumerationConverters();
    [CompilerGeneratedAttribute]
public TokenRendererPipeline`1<Context> get_RendererPipeline();
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_EncodingFuction();
}
public class Stubble.Core.Settings.RendererSettingsBuilder : BaseSettingsBuilder`2<RendererSettingsBuilder, RendererSettings> {
    [CompilerGeneratedAttribute]
private OrderedList`1<ITokenRenderer`1<Context>> <TokenRenderers>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, ValueGetterDelegate> <ValueGetters>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, List`1<Func`2<object, bool>>> <TruthyChecks>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderSettings <RenderSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <EncodingFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, Func`2<object, IEnumerable>> <EnumerationConverters>k__BackingField;
    public OrderedList`1<ITokenRenderer`1<Context>> TokenRenderers { get; internal set; }
    internal Dictionary`2<Type, ValueGetterDelegate> ValueGetters { get; internal set; }
    internal Dictionary`2<Type, List`1<Func`2<object, bool>>> TruthyChecks { get; internal set; }
    internal RenderSettings RenderSettings { get; internal set; }
    internal Func`2<string, string> EncodingFunction { get; internal set; }
    internal Dictionary`2<Type, Func`2<object, IEnumerable>> EnumerationConverters { get; internal set; }
    [CompilerGeneratedAttribute]
public OrderedList`1<ITokenRenderer`1<Context>> get_TokenRenderers();
    [CompilerGeneratedAttribute]
internal void set_TokenRenderers(OrderedList`1<ITokenRenderer`1<Context>> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<Type, ValueGetterDelegate> get_ValueGetters();
    [CompilerGeneratedAttribute]
internal void set_ValueGetters(Dictionary`2<Type, ValueGetterDelegate> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<Type, List`1<Func`2<object, bool>>> get_TruthyChecks();
    [CompilerGeneratedAttribute]
internal void set_TruthyChecks(Dictionary`2<Type, List`1<Func`2<object, bool>>> value);
    [CompilerGeneratedAttribute]
internal RenderSettings get_RenderSettings();
    [CompilerGeneratedAttribute]
internal void set_RenderSettings(RenderSettings value);
    [CompilerGeneratedAttribute]
internal Func`2<string, string> get_EncodingFunction();
    [CompilerGeneratedAttribute]
internal void set_EncodingFunction(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<Type, Func`2<object, IEnumerable>> get_EnumerationConverters();
    [CompilerGeneratedAttribute]
internal void set_EnumerationConverters(Dictionary`2<Type, Func`2<object, IEnumerable>> value);
    public virtual RendererSettings BuildSettings();
    public RendererSettingsBuilder AddValueGetter(Type type, ValueGetterDelegate valueGetter);
    public RendererSettingsBuilder AddEnumerationConversion(Type type, Func`2<object, IEnumerable> enumerationConversion);
    public RendererSettingsBuilder AddTruthyCheck(Func`2<T, bool> truthyCheck);
    public RendererSettingsBuilder SetEncodingFunction(Func`2<string, string> encodingFunction);
}
public static class Stubble.Core.Settings.RendererSettingsDefaults : object {
    private static ConcurrentDictionary`2<Type, Tuple`2<Dictionary`2<string, Lazy`1<Func`2<object, object>>>, Dictionary`2<string, Lazy`1<Func`2<object, object>>>>> GettersCache;
    private static LimitedSizeConcurrentDictionary`2<Tuple`2<object, string>, CallSite`1<Func`3<CallSite, object, object>>> DynamicCallSiteCache;
    private static CSharpArgumentInfo[] EmptyCSharpArgumentInfo;
    private static RendererSettingsDefaults();
    public static Dictionary`2<Type, ValueGetterDelegate> DefaultValueGetters();
    public static List`1<ITokenRenderer`1<Context>> DefaultTokenRenderers();
    public static HashSet`1<Type> DefaultSectionBlacklistTypes();
    private static object GetValueFromDynamicByName(object value, string key, bool ignoreCase);
    private static object GetValueFromObjectByName(object value, string key, bool ignoreCase);
    private static void CheckKeyDistinct(KeyCollection<string, Lazy`1<Func`2<object, object>>> keys, string key);
}
public class Stubble.Core.Settings.RenderSettings : object {
    [CompilerGeneratedAttribute]
private bool <SkipRecursiveLookup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnDataMiss>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipHtmlEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <CultureInfo>k__BackingField;
    public bool SkipRecursiveLookup { get; public set; }
    public bool ThrowOnDataMiss { get; public set; }
    public bool SkipHtmlEncoding { get; public set; }
    public CultureInfo CultureInfo { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SkipRecursiveLookup();
    [CompilerGeneratedAttribute]
public void set_SkipRecursiveLookup(bool value);
    [CompilerGeneratedAttribute]
public bool get_ThrowOnDataMiss();
    [CompilerGeneratedAttribute]
public void set_ThrowOnDataMiss(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipHtmlEncoding();
    [CompilerGeneratedAttribute]
public void set_SkipHtmlEncoding(bool value);
    [CompilerGeneratedAttribute]
public CultureInfo get_CultureInfo();
    [CompilerGeneratedAttribute]
public void set_CultureInfo(CultureInfo value);
    public static RenderSettings GetDefaultRenderSettings();
}
public class Stubble.Core.StaticStubbleRenderer : object {
    private static Lazy`1<StubbleVisitorRenderer> Lazy;
    public static StubbleVisitorRenderer Instance { get; }
    private static StaticStubbleRenderer();
    public static StubbleVisitorRenderer get_Instance();
    public static string Render(string template, object view);
    public static string Render(string template, object view, RenderSettings settings);
    public static string Render(string template, object view, IDictionary`2<string, string> partials);
    public static string Render(string template, object view, IDictionary`2<string, string> partials, RenderSettings settings);
}
public class Stubble.Core.StubbleVisitorRenderer : object {
    [CompilerGeneratedAttribute]
private RendererSettings <RendererSettings>k__BackingField;
    internal RendererSettings RendererSettings { get; }
    public StubbleVisitorRenderer(RendererSettings registry);
    [CompilerGeneratedAttribute]
internal RendererSettings get_RendererSettings();
    public sealed virtual string Render(string template, object view);
    public sealed virtual string Render(string template, object view, RenderSettings settings);
    public sealed virtual string Render(string template, object view, IDictionary`2<string, string> partials);
    public sealed virtual string Render(string template, object view, IDictionary`2<string, string> partials, RenderSettings settings);
    public sealed virtual ValueTask`1<string> RenderAsync(string template, object view);
    public sealed virtual ValueTask`1<string> RenderAsync(string template, object view, RenderSettings settings);
    public sealed virtual ValueTask`1<string> RenderAsync(string template, object view, IDictionary`2<string, string> partials);
    [AsyncStateMachineAttribute("Stubble.Core.StubbleVisitorRenderer/<RenderAsync>d__12")]
public sealed virtual ValueTask`1<string> RenderAsync(string template, object view, IDictionary`2<string, string> partials, RenderSettings settings);
}
public abstract class Stubble.Core.Tokens.BlockCloseToken : MustacheToken {
}
public abstract class Stubble.Core.Tokens.BlockToken : MustacheToken {
    [CompilerGeneratedAttribute]
private BlockParser <Parser>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MustacheToken> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContentStartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContentEndPosition>k__BackingField;
    public string Identifier { get; }
    public BlockParser Parser { get; public set; }
    public List`1<MustacheToken> Children { get; public set; }
    public int ContentStartPosition { get; public set; }
    public int ContentEndPosition { get; public set; }
    public abstract virtual string get_Identifier();
    [CompilerGeneratedAttribute]
public BlockParser get_Parser();
    [CompilerGeneratedAttribute]
public void set_Parser(BlockParser value);
    [CompilerGeneratedAttribute]
public List`1<MustacheToken> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(List`1<MustacheToken> value);
    [CompilerGeneratedAttribute]
public int get_ContentStartPosition();
    [CompilerGeneratedAttribute]
public void set_ContentStartPosition(int value);
    [CompilerGeneratedAttribute]
public int get_ContentEndPosition();
    [CompilerGeneratedAttribute]
public void set_ContentEndPosition(int value);
}
public abstract class Stubble.Core.Tokens.BlockToken`1 : BlockToken {
    [CompilerGeneratedAttribute]
private Tags <Tags>k__BackingField;
    public Tags Tags { get; public set; }
    [CompilerGeneratedAttribute]
public Tags get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(Tags value);
    public abstract virtual bool Equals(T other);
    public abstract virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Stubble.Core.Tokens.CommentToken : InlineToken`1<CommentToken> {
    public virtual bool Equals(CommentToken other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Stubble.Core.Tokens.DelimiterToken : InlineToken`1<DelimiterToken> {
    [CompilerGeneratedAttribute]
private string <StartTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndTag>k__BackingField;
    public string StartTag { get; public set; }
    public string EndTag { get; public set; }
    [CompilerGeneratedAttribute]
public string get_StartTag();
    [CompilerGeneratedAttribute]
public void set_StartTag(string value);
    [CompilerGeneratedAttribute]
public string get_EndTag();
    [CompilerGeneratedAttribute]
public void set_EndTag(string value);
    public virtual bool Equals(DelimiterToken other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class Stubble.Core.Tokens.InlineToken : MustacheToken {
    [CompilerGeneratedAttribute]
private int <TagStartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TagEndPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContentStartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContentEndPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <Content>k__BackingField;
    public int TagStartPosition { get; public set; }
    public int TagEndPosition { get; public set; }
    public int ContentStartPosition { get; public set; }
    public int ContentEndPosition { get; public set; }
    public StringSlice Content { get; public set; }
    [CompilerGeneratedAttribute]
public int get_TagStartPosition();
    [CompilerGeneratedAttribute]
public void set_TagStartPosition(int value);
    [CompilerGeneratedAttribute]
public int get_TagEndPosition();
    [CompilerGeneratedAttribute]
public void set_TagEndPosition(int value);
    [CompilerGeneratedAttribute]
public int get_ContentStartPosition();
    [CompilerGeneratedAttribute]
public void set_ContentStartPosition(int value);
    [CompilerGeneratedAttribute]
public int get_ContentEndPosition();
    [CompilerGeneratedAttribute]
public void set_ContentEndPosition(int value);
    [CompilerGeneratedAttribute]
public StringSlice get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(StringSlice value);
}
public abstract class Stubble.Core.Tokens.InlineToken`1 : InlineToken {
    public abstract virtual bool Equals(T other);
    public abstract virtual bool Equals(object obj);
    public abstract virtual int GetHashCode();
}
public interface Stubble.Core.Tokens.INonSpace {
}
public class Stubble.Core.Tokens.InterpolationToken : InlineToken`1<InterpolationToken> {
    [CompilerGeneratedAttribute]
private bool <EscapeResult>k__BackingField;
    public bool EscapeResult { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EscapeResult();
    [CompilerGeneratedAttribute]
public void set_EscapeResult(bool value);
    public virtual bool Equals(InterpolationToken other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Stubble.Core.Tokens.InvertedSectionToken : BlockToken`1<InvertedSectionToken> {
    [CompilerGeneratedAttribute]
private string <SectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndPosition>k__BackingField;
    public string SectionName { get; public set; }
    public int StartPosition { get; public set; }
    public int EndPosition { get; public set; }
    public string Identifier { get; }
    [CompilerGeneratedAttribute]
public string get_SectionName();
    [CompilerGeneratedAttribute]
public void set_SectionName(string value);
    [CompilerGeneratedAttribute]
public int get_StartPosition();
    [CompilerGeneratedAttribute]
public void set_StartPosition(int value);
    [CompilerGeneratedAttribute]
public int get_EndPosition();
    [CompilerGeneratedAttribute]
public void set_EndPosition(int value);
    public virtual string get_Identifier();
    public virtual bool Equals(InvertedSectionToken other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Stubble.Core.Tokens.LiteralToken : MustacheToken {
    [CompilerGeneratedAttribute]
private int <ContentStartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContentEndPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice[] <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWhitespace>k__BackingField;
    public int ContentStartPosition { get; public set; }
    public int ContentEndPosition { get; public set; }
    public StringSlice[] Content { get; public set; }
    public bool IsWhitespace { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ContentStartPosition();
    [CompilerGeneratedAttribute]
public void set_ContentStartPosition(int value);
    [CompilerGeneratedAttribute]
public int get_ContentEndPosition();
    [CompilerGeneratedAttribute]
public void set_ContentEndPosition(int value);
    [CompilerGeneratedAttribute]
public StringSlice[] get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(StringSlice[] value);
    [CompilerGeneratedAttribute]
public bool get_IsWhitespace();
    [CompilerGeneratedAttribute]
public void set_IsWhitespace(bool value);
    public bool Equals(LiteralToken other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Stubble.Core.Tokens.MustacheTemplate : BlockToken {
    public string Identifier { get; }
    public virtual string get_Identifier();
}
public abstract class Stubble.Core.Tokens.MustacheToken : object {
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Indent>k__BackingField;
    public bool IsClosed { get; public set; }
    public int Indent { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsClosed();
    [CompilerGeneratedAttribute]
public void set_IsClosed(bool value);
    [CompilerGeneratedAttribute]
public int get_Indent();
    [CompilerGeneratedAttribute]
public void set_Indent(int value);
}
public class Stubble.Core.Tokens.PartialToken : InlineToken`1<PartialToken> {
    [CompilerGeneratedAttribute]
private int <LineIndent>k__BackingField;
    public int LineIndent { get; public set; }
    [CompilerGeneratedAttribute]
public int get_LineIndent();
    [CompilerGeneratedAttribute]
public void set_LineIndent(int value);
    public virtual bool Equals(PartialToken other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Stubble.Core.Tokens.SectionEndToken : BlockCloseToken {
    [CompilerGeneratedAttribute]
private string <SectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContentEndPosition>k__BackingField;
    public string SectionName { get; public set; }
    public int EndPosition { get; public set; }
    public int ContentEndPosition { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SectionName();
    [CompilerGeneratedAttribute]
public void set_SectionName(string value);
    [CompilerGeneratedAttribute]
public int get_EndPosition();
    [CompilerGeneratedAttribute]
public void set_EndPosition(int value);
    [CompilerGeneratedAttribute]
public int get_ContentEndPosition();
    [CompilerGeneratedAttribute]
public void set_ContentEndPosition(int value);
}
public class Stubble.Core.Tokens.SectionToken : BlockToken`1<SectionToken> {
    [CompilerGeneratedAttribute]
private int <StartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSlice <SectionContent>k__BackingField;
    public int StartPosition { get; public set; }
    public int EndPosition { get; public set; }
    public string SectionName { get; public set; }
    public string Identifier { get; }
    public StringSlice SectionContent { get; public set; }
    [CompilerGeneratedAttribute]
public int get_StartPosition();
    [CompilerGeneratedAttribute]
public void set_StartPosition(int value);
    [CompilerGeneratedAttribute]
public int get_EndPosition();
    [CompilerGeneratedAttribute]
public void set_EndPosition(int value);
    [CompilerGeneratedAttribute]
public string get_SectionName();
    [CompilerGeneratedAttribute]
public void set_SectionName(string value);
    public virtual string get_Identifier();
    [CompilerGeneratedAttribute]
public StringSlice get_SectionContent();
    [CompilerGeneratedAttribute]
public void set_SectionContent(StringSlice value);
    public virtual bool Equals(SectionToken other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.5.109.64445")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string RootNamespace;
    private static ThisAssembly();
}
