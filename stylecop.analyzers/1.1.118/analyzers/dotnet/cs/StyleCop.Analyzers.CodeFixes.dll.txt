[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.DocumentationRules.FileHeaderCodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.DocumentationRules.FileHeaderCodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.DocumentationRules.FileHeaderCodeFixProvider/<GetTransformedSyntaxRootAsync>d__6")]
private static Task`1<SyntaxNode> GetTransformedSyntaxRootAsync(Document document, CancellationToken cancellationToken);
    private static SyntaxNode ReplaceWellFormedMultiLineCommentHeader(Document document, SyntaxNode root, StyleCopSettings settings, int commentIndex, XmlFileHeader header);
    private static SyntaxNode ReplaceHeader(Document document, SyntaxNode root, StyleCopSettings settings, bool isMalformedHeader);
    private static bool FirstLineIsComment(SyntaxTriviaList trivia);
    private static SyntaxNode AddHeader(Document document, SyntaxNode root, string name, StyleCopSettings settings);
    private static SyntaxTriviaList CreateNewHeader(string prefixWithLeadingSpaces, string fileName, StyleCopSettings settings, string newLineText);
    private static string WrapInXmlComment(string prefixWithLeadingSpaces, string copyrightText, string fileName, StyleCopSettings settings, string newLineText);
    private static string GetCopyrightText(string prefixWithLeadingSpaces, string copyrightText, string newLineText);
    private static SyntaxTriviaList RemoveHeaderDecorationLines(SyntaxTriviaList trivia, StyleCopSettings settings);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.DocumentationRules.InheritdocCodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.DocumentationRules.InheritdocCodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.DocumentationRules.InheritdocCodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, SyntaxNode root, SyntaxToken identifierToken, CancellationToken cancellationToken);
    private static Document GetTransformedDocumentForBasePropertyDeclaration(Document document, Diagnostic diagnostic, SyntaxNode root, SemanticModel semanticModel, BasePropertyDeclarationSyntax basePropertyDeclaration, CancellationToken cancellationToken);
    private static Document GetTransformedDocumentForMethodDeclaration(Document document, Diagnostic diagnostic, SyntaxNode root, SemanticModel semanticModel, MethodDeclarationSyntax methodDeclaration, CancellationToken cancellationToken);
    private static Document GetTransformedDocumentForEventFieldDeclaration(Document document, Diagnostic diagnostic, SyntaxNode root, SemanticModel semanticModel, EventFieldDeclarationSyntax eventFieldDeclaration, CancellationToken cancellationToken);
    private static Document GetTransformedDocumentForIndexerDeclaration(Document document, Diagnostic diagnostic, SyntaxNode root, SemanticModel semanticModel, IndexerDeclarationSyntax indexerDeclaration, CancellationToken cancellationToken);
    private static Document InsertInheritdocComment(Document document, Diagnostic diagnostic, SyntaxNode root, SyntaxNode syntaxNode, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class StyleCop.Analyzers.DocumentationRules.PropertySummaryDocumentationCodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.DocumentationRules.PropertySummaryDocumentationCodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.DocumentationRules.SA1600CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.DocumentationRules.SA1600CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static bool IsCoveredByInheritDoc(SemanticModel semanticModel, MethodDeclarationSyntax methodDeclaration, CancellationToken cancellationToken);
    private static Task`1<Document> GetConstructorOrDestructorDocumentationTransformedDocumentAsync(Document document, Diagnostic diagnostic, SyntaxNode root, BaseMethodDeclarationSyntax declaration, CancellationToken cancellationToken);
    private static Task`1<Document> GetMethodDocumentationTransformedDocumentAsync(Document document, Diagnostic diagnostic, SyntaxNode root, SemanticModel semanticModel, MethodDeclarationSyntax methodDeclaration, CancellationToken cancellationToken);
    private static int GetInsertionIndex(SyntaxTriviaList& leadingTrivia);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.DocumentationRules.SA1609SA1610CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static bool IsContentElement(XmlNodeSyntax syntax);
    private static SyntaxTrivia GetLastDocumentationCommentExteriorTrivia(SyntaxNode node);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.DocumentationRules.SA1609SA1610CodeFixProvider/<GetTransformedDocumentAsync>d__7")]
private Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private bool TryRemoveSummaryPrefix(SyntaxList`1& summaryContent, string prefix);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.DocumentationRules.SA1615SA1616CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.DocumentationRules.SA1615SA1616CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static bool IsAsynchronousTestMethod(SemanticModel semanticModel, MethodDeclarationSyntax methodDeclarationSyntax, CancellationToken cancellationToken);
    private static SyntaxTrivia GetLastDocumentationCommentExteriorTrivia(SyntaxNode node);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.DocumentationRules.SA1617CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.DocumentationRules.SA1617CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.DocumentationRules.SA1626CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.DocumentationRules.SA1626CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.DocumentationRules.SA1629CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.DocumentationRules.SA1629CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.DocumentationRules.SA1642SA1643CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.DocumentationRules.SA1642SA1643CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    internal static ImmutableArray`1<string> GenerateStandardText(Document document, BaseMethodDeclarationSyntax methodDeclaration, BaseTypeDeclarationSyntax typeDeclaration, CancellationToken cancellationToken);
    internal static SyntaxList`1<XmlNodeSyntax> BuildStandardTextSyntaxList(BaseTypeDeclarationSyntax typeDeclaration, string newLineText, string preText, string postText);
    private static Task`1<Document> GetTransformedDocumentAsync(Document document, SyntaxNode root, XmlElementSyntax node, CancellationToken cancellationToken);
    private static Task`1<Document> GetTransformedDocumentAsync(Document document, SyntaxNode root, XmlEmptyElementSyntax node);
    private static SyntaxList`1<XmlNodeSyntax> RemoveMalformattedStandardText(SyntaxList`1<XmlNodeSyntax> content, SyntaxToken identifier, string preText, string postText, String& trailingString);
    private static XmlEmptyElementSyntax BuildSeeElement(SyntaxToken identifier, TypeParameterListSyntax typeParameters);
    private static TypeArgumentListSyntax ParameterToArgumentListSyntax(TypeParameterListSyntax typeParameters);
    private static SyntaxList`1<XmlNodeSyntax> RemoveTrailingEmptyLines(SyntaxList`1<XmlNodeSyntax> content);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.DocumentationRules.SA1649CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.DocumentationRules.SA1649CodeFixProvider/<GetTransformedSolutionAsync>d__5")]
private static Task`1<Solution> GetTransformedSolutionAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.DocumentationRules.SA1651CodeFixProvider : CodeFixProvider {
    private static SyntaxAnnotation NodeToReplaceAnnotation;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static SA1651CodeFixProvider();
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.DocumentationRules.SA1651CodeFixProvider/<RegisterCodeFixesAsync>d__5")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static IEnumerable`1<XmlNodeSyntax> RemovePlaceHolder(XmlElementSyntax elementSyntax);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.DocumentationRules.SA1651CodeFixProvider/<GetTransformedDocumentAsync>d__7")]
private Task`1<Document> GetTransformedDocumentAsync(Document document, XmlElementSyntax elementSyntax, CancellationToken cancellationToken);
}
internal class StyleCop.Analyzers.Helpers.CustomBatchFixAllProvider : FixAllProvider {
    [CompilerGeneratedAttribute]
private static FixAllProvider <Instance>k__BackingField;
    public static FixAllProvider Instance { get; }
    private static CustomBatchFixAllProvider();
    [CompilerGeneratedAttribute]
public static FixAllProvider get_Instance();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.Helpers.CustomBatchFixAllProvider/<GetFixAsync>d__4")]
public virtual Task`1<CodeAction> GetFixAsync(FixAllContext fixAllContext);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.Helpers.CustomBatchFixAllProvider/<GetFixAsync>d__5")]
public virtual Task`1<CodeAction> GetFixAsync(ImmutableDictionary`2<Document, ImmutableArray`1<Diagnostic>> documentsAndDiagnosticsToFixMap, FixAllContext fixAllContext);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.Helpers.CustomBatchFixAllProvider/<AddDocumentFixesAsync>d__6")]
public virtual Task AddDocumentFixesAsync(Document document, ImmutableArray`1<Diagnostic> diagnostics, Action`1<CodeAction> addFix, FixAllContext fixAllContext);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.Helpers.CustomBatchFixAllProvider/<GetFixAsync>d__7")]
public virtual Task`1<CodeAction> GetFixAsync(ImmutableDictionary`2<Project, ImmutableArray`1<Diagnostic>> projectsAndDiagnosticsToFixMap, FixAllContext fixAllContext);
    public virtual Task AddProjectFixesAsync(Project project, IEnumerable`1<Diagnostic> diagnostics, Action`1<CodeAction> addFix, FixAllContext fixAllContext);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.Helpers.CustomBatchFixAllProvider/<TryGetMergedFixAsync>d__9")]
public virtual Task`1<CodeAction> TryGetMergedFixAsync(IEnumerable`1<CodeAction> batchOfFixes, FixAllContext fixAllContext);
    public virtual string GetFixAllTitle(FixAllContext fixAllContext);
    public virtual Task`1<ImmutableDictionary`2<Document, ImmutableArray`1<Diagnostic>>> GetDocumentDiagnosticsToFixAsync(FixAllContext fixAllContext);
    public virtual Task`1<ImmutableDictionary`2<Project, ImmutableArray`1<Diagnostic>>> GetProjectDiagnosticsToFixAsync(FixAllContext fixAllContext);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.Helpers.CustomBatchFixAllProvider/<TryMergeFixesAsync>d__13")]
public virtual Task`1<Solution> TryMergeFixesAsync(Solution oldSolution, IEnumerable`1<CodeAction> codeActions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.Helpers.CustomBatchFixAllProvider/<TryAddDocumentMergeChangesAsync>d__14")]
private static Task`1<List`1<TextChange>> TryAddDocumentMergeChangesAsync(Document oldDocument, Document newDocument, List`1<TextChange> cumulativeChanges, CancellationToken cancellationToken);
}
internal static class StyleCop.Analyzers.Helpers.CustomFixAllProviders : object {
    public static FixAllProvider BatchFixer { get; }
    public static FixAllProvider get_BatchFixer();
}
internal abstract class StyleCop.Analyzers.Helpers.DocumentBasedFixAllProvider : FixAllProvider {
    protected string CodeActionTitle { get; }
    protected abstract virtual string get_CodeActionTitle();
    public virtual Task`1<CodeAction> GetFixAsync(FixAllContext fixAllContext);
    protected abstract virtual Task`1<SyntaxNode> FixAllInDocumentAsync(FixAllContext fixAllContext, Document document, ImmutableArray`1<Diagnostic> diagnostics);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.Helpers.DocumentBasedFixAllProvider/<GetDocumentFixesAsync>d__4")]
private Task`1<Document> GetDocumentFixesAsync(FixAllContext fixAllContext);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.Helpers.DocumentBasedFixAllProvider/<GetSolutionFixesAsync>d__5")]
private Task`1<Solution> GetSolutionFixesAsync(FixAllContext fixAllContext, ImmutableArray`1<Document> documents);
    private Task`1<Solution> GetProjectFixesAsync(FixAllContext fixAllContext, Project project);
    private Task`1<Solution> GetSolutionFixesAsync(FixAllContext fixAllContext);
}
internal static class StyleCop.Analyzers.Helpers.FixAllContextHelper : object {
    [AsyncStateMachineAttribute("StyleCop.Analyzers.Helpers.FixAllContextHelper/<GetDocumentDiagnosticsToFixAsync>d__0")]
public static Task`1<ImmutableDictionary`2<Document, ImmutableArray`1<Diagnostic>>> GetDocumentDiagnosticsToFixAsync(FixAllContext fixAllContext);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.Helpers.FixAllContextHelper/<GetProjectDiagnosticsToFixAsync>d__1")]
public static Task`1<ImmutableDictionary`2<Project, ImmutableArray`1<Diagnostic>>> GetProjectDiagnosticsToFixAsync(FixAllContext fixAllContext);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.Helpers.FixAllContextHelper/<GetAllDiagnosticsAsync>d__2")]
private static Task`1<ImmutableArray`1<Diagnostic>> GetAllDiagnosticsAsync(FixAllContext fixAllContext, Project project);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.Helpers.FixAllContextHelper/<GetDocumentDiagnosticsToFixAsync>d__3")]
private static Task`1<ImmutableDictionary`2<Document, ImmutableArray`1<Diagnostic>>> GetDocumentDiagnosticsToFixAsync(ImmutableArray`1<Diagnostic> diagnostics, ImmutableArray`1<Project> projects, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.Helpers.FixAllContextHelper/<GetTreeToDocumentMapAsync>d__4")]
private static Task`1<ImmutableDictionary`2<SyntaxTree, Document>> GetTreeToDocumentMapAsync(ImmutableArray`1<Project> projects, CancellationToken cancellationToken);
    private static Document GetReportedDocument(Diagnostic diagnostic, ImmutableDictionary`2<SyntaxTree, Document> treeToDocumentsMap);
}
[ExtensionAttribute]
internal static class StyleCop.Analyzers.Helpers.FormattingHelper : object {
    public static SyntaxTrivia GetNewLineTrivia(Document document);
    [ExtensionAttribute]
public static TNode WithoutFormatting(TNode node);
    [ExtensionAttribute]
public static SyntaxToken WithoutFormatting(SyntaxToken token);
    [ExtensionAttribute]
public static SyntaxTrivia WithoutFormatting(SyntaxTrivia trivia);
    private static TNode WithoutFormattingImpl(TNode node);
    private static SyntaxToken WithoutFormattingImpl(SyntaxToken token);
    private static SyntaxTrivia WithoutFormattingImpl(SyntaxTrivia trivia);
}
internal static class StyleCop.Analyzers.Helpers.IndentationHelper : object {
    public static SyntaxToken GetFirstTokenOnTextLine(SyntaxToken token);
    public static int GetIndentationSteps(IndentationSettings indentationSettings, SyntaxNode node);
    public static int GetIndentationSteps(IndentationSettings indentationSettings, SyntaxToken token);
    public static string GenerateIndentationString(IndentationSettings indentationSettings, int indentationSteps);
    public static SyntaxTrivia GenerateWhitespaceTrivia(IndentationSettings indentationSettings, int indentationSteps);
    private static int GetIndentationSteps(IndentationSettings indentationSettings, SyntaxTree syntaxTree, SyntaxTriviaList leadingTrivia);
    private static int GetIndentationStepsUnchecked(IndentationSettings indentationSettings, SyntaxTriviaList leadingTrivia);
}
internal static class StyleCop.Analyzers.Helpers.QueryIndentationHelpers : object {
    internal static SyntaxTrivia GetQueryIndentationTrivia(IndentationSettings indentationSettings, QueryExpressionSyntax queryExpression);
    internal static SyntaxTrivia GetQueryIndentationTrivia(IndentationSettings indentationSettings, SyntaxToken token);
}
internal static class StyleCop.Analyzers.Helpers.RenameHelper : object {
    [AsyncStateMachineAttribute("StyleCop.Analyzers.Helpers.RenameHelper/<RenameSymbolAsync>d__0")]
public static Task`1<Solution> RenameSymbolAsync(Document document, SyntaxNode root, SyntaxToken declarationToken, string newName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.Helpers.RenameHelper/<IsValidNewMemberNameAsync>d__1")]
public static Task`1<bool> IsValidNewMemberNameAsync(SemanticModel semanticModel, ISymbol symbol, string name, CancellationToken cancellationToken);
    public static SyntaxNode GetParentDeclaration(SyntaxToken token);
}
internal static class StyleCop.Analyzers.Helpers.TaskHelper : object {
    public static bool IsTaskReturningMethod(SemanticModel semanticModel, MethodDeclarationSyntax methodDeclarationSyntax, CancellationToken cancellationToken);
    public static bool IsTaskReturningMethod(SemanticModel semanticModel, DelegateDeclarationSyntax delegateDeclarationSyntax, CancellationToken cancellationToken);
    public static bool IsTaskType(SemanticModel semanticModel, TypeSyntax typeSyntax, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1500CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1500CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static Dictionary`2<SyntaxToken, SyntaxToken> GenerateBraceFixes(Document document, IndentationSettings indentationSettings, ImmutableArray`1<SyntaxToken> braceTokens);
    private static bool IsAccessorWithSingleLineBlock(SyntaxToken previousToken, SyntaxToken braceToken);
    private static bool IsValidFollowingToken(SyntaxToken nextToken);
    private static int DetermineIndentationSteps(IndentationSettings indentationSettings, SyntaxToken token);
    private static bool ContainsStartOfLine(SyntaxToken token, int startLine);
    private static LinePosition GetTokenStartLinePosition(SyntaxToken token);
    private static void AddReplacement(Dictionary`2<SyntaxToken, SyntaxToken> tokenReplacements, SyntaxToken originalToken, SyntaxToken replacementToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1501CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1501CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static void ReformatStatementAndSurroundings(StatementSyntax statement, IndentationSettings indentationSettings, Dictionary`2<SyntaxToken, SyntaxToken> tokenReplaceMap);
    private static int DetermineIndentationLevel(IndentationSettings indentationSettings, Dictionary`2<SyntaxToken, SyntaxToken> tokenReplaceMap, StatementSyntax statement);
    private static void ReformatBlock(IndentationSettings indentationSettings, BlockSyntax block, Dictionary`2<SyntaxToken, SyntaxToken> tokenReplaceMap);
    private static void ReformatStatement(IndentationSettings indentationSettings, StatementSyntax statement, Dictionary`2<SyntaxToken, SyntaxToken> tokenReplaceMap);
    private static void AddToReplaceMap(Dictionary`2<SyntaxToken, SyntaxToken> tokenReplaceMap, SyntaxToken original, SyntaxToken replacement);
    private static bool AreTriviaEqual(SyntaxTriviaList left, SyntaxTriviaList right);
    private static SyntaxNode GetStatementParent(SyntaxNode node);
    private static SyntaxNode GetFirstOnLineParent(SyntaxNode parent);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1502CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1502CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private Document CreateCodeFix(Document document, IndentationSettings indentationSettings, Diagnostic diagnostic, SyntaxNode syntaxRoot);
    private SyntaxNode RegisterBaseTypeDeclarationCodeFix(SyntaxNode syntaxRoot, BaseTypeDeclarationSyntax node, IndentationSettings indentationSettings);
    private SyntaxNode RegisterPropertyLikeDeclarationCodeFix(SyntaxNode syntaxRoot, BasePropertyDeclarationSyntax node, IndentationSettings indentationSettings);
    private SyntaxNode RegisterMethodLikeDeclarationCodeFix(SyntaxNode syntaxRoot, BaseMethodDeclarationSyntax node, IndentationSettings indentationSettings);
    private SyntaxNode RegisterLocalFunctionStatementCodeFix(SyntaxNode syntaxRoot, LocalFunctionStatementSyntaxWrapper node, IndentationSettings indentationSettings);
    private SyntaxNode RegisterEnumDeclarationCodeFix(SyntaxNode syntaxRoot, EnumDeclarationSyntax node, IndentationSettings indentationSettings);
    private SyntaxNode RegisterNamespaceDeclarationCodeFix(SyntaxNode syntaxRoot, NamespaceDeclarationSyntax node, IndentationSettings indentationSettings);
    private SyntaxNode ReformatElement(SyntaxNode syntaxRoot, SyntaxNode element, SyntaxToken openBraceToken, SyntaxToken closeBraceToken, IndentationSettings indentationSettings);
    private SyntaxToken FormatBraceToken(SyntaxToken braceToken, string indentationString);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1503CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1503CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> GetTransformedDocumentAsync(Document document, SyntaxNode root, StatementSyntax node, CancellationToken cancellationToken);
    private static bool ContainsConditionalDirectiveTrivia(SyntaxNode node);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1504CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1504CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static bool IsAllowedTrivia(SyntaxTrivia trivia);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1504CodeFixProvider/<GetTransformedDocumentForSingleLineAsync>d__6")]
private static Task`1<Document> GetTransformedDocumentForSingleLineAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static SyntaxNode ReformatAccessorAsSingleLine(IndentationSettings indentationSettings, AccessorDeclarationSyntax accessor);
    private static SyntaxTokenList ReformatModifiersAsSingleLine(SyntaxTokenList modifiers);
    private static SyntaxToken ReformatKeywordAsSingleLine(SyntaxToken keyword);
    private static BlockSyntax ReformatBodyAsSingleLine(BlockSyntax body);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1504CodeFixProvider/<GetTransformedDocumentForMutipleLinesAsync>d__11")]
private static Task`1<Document> GetTransformedDocumentForMutipleLinesAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static SyntaxNode ReformatAccessorAsMultipleLines(IndentationSettings indentationSettings, AccessorDeclarationSyntax accessor);
    private static SyntaxTokenList ReformatModifiersAsMultipleLines(SyntaxTokenList modifiers, SyntaxTrivia indentation);
    private static SyntaxToken ReformatKeywordAsMultipleLines(SyntaxToken keyword, SyntaxTrivia indentation, bool insertIdentation);
    private static BlockSyntax ReformatBodyAsMultipleLines(BlockSyntax body, SyntaxTrivia indentation, SyntaxTrivia indentationStatements);
    private static AccessorListSyntax GetAccessorList(SyntaxNode node);
    private static SyntaxTriviaList ReformatTriviaList(IReadOnlyList`1<SyntaxTrivia> triviaList);
    private static SyntaxTriviaList ReformatTriviaListNoTrailingSpace(IReadOnlyList`1<SyntaxTrivia> triviaList);
    private static SyntaxTriviaList ReformatTriviaListNoLeadingSpace(IReadOnlyList`1<SyntaxTrivia> triviaList);
    [IteratorStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1504CodeFixProvider/<ExpandComment>d__20")]
private static IEnumerable`1<SyntaxTrivia> ExpandComment(SyntaxTrivia comment);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1505CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1505CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1506CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1506CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1507CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1507CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken token);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1508CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1508CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1509CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1509CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private IEnumerable`1<SyntaxTrivia> GetPreviousEmptyLines(SyntaxToken openBrace);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1510CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1510CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1511CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1511CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1512CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1512CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static SyntaxTriviaList FixTriviaList(SyntaxTriviaList triviaList, IEnumerable`1<SyntaxTrivia> commentTrivias);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1513CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1513CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1514CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1514CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1515CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1515CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static SyntaxTriviaList FixTriviaList(SyntaxTriviaList triviaList, IEnumerable`1<SyntaxTrivia> commentTrivias);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1516CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1516CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Nullable`1<bool> DetermineCodeFixAction(Diagnostic diagnostic);
    private static Task`1<Document> GetTransformedDocumentAsync(Document document, SyntaxNode syntaxRoot, Diagnostic diagnostic, bool insertBlankLine, CancellationToken cancellationToken);
    private static SyntaxToken ProcessToken(SyntaxToken token, bool insertBlankLine);
    private static SyntaxNode GetRelevantNode(SyntaxNode innerNode);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1517CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1517CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, CancellationToken token);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1517CodeFixProvider/<GetTransformedSyntaxRootAsync>d__6")]
private static Task`1<SyntaxNode> GetTransformedSyntaxRootAsync(Document document, CancellationToken token);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.LayoutRules.SA1518CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.LayoutRules.SA1518CodeFixProvider/<FixEndOfFileAsync>d__5")]
private static Task`1<Document> FixEndOfFileAsync(Document document, Diagnostic diagnostic, OptionSetting newlineAtEndOfFile, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.MaintainabilityRules.SA1119CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.MaintainabilityRules.SA1119CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static SyntaxNode GetReplacement(ParenthesizedExpressionSyntax oldNode);
    private static Task`1<Document> GetTransformedDocumentAsync(Document document, SyntaxNode root, ParenthesizedExpressionSyntax syntax);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.MaintainabilityRules.SA1400CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.MaintainabilityRules.SA1400CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> GetTransformedDocumentAsync(Document document, SyntaxNode root, SyntaxNode declarationNode);
    private static SyntaxNode HandleClassDeclaration(ClassDeclarationSyntax node);
    private static SyntaxNode HandleInterfaceDeclaration(InterfaceDeclarationSyntax node);
    private static SyntaxNode HandleEnumDeclaration(EnumDeclarationSyntax node);
    private static SyntaxNode HandleStructDeclaration(StructDeclarationSyntax node);
    private static SyntaxNode HandleDelegateDeclaration(DelegateDeclarationSyntax node);
    private static SyntaxNode HandleEventDeclaration(EventDeclarationSyntax node);
    private static SyntaxNode HandleEventFieldDeclaration(EventFieldDeclarationSyntax node);
    private static SyntaxNode HandleMethodDeclaration(MethodDeclarationSyntax node);
    private static SyntaxNode HandlePropertyDeclaration(PropertyDeclarationSyntax node);
    private static SyntaxNode HandleFieldDeclaration(FieldDeclarationSyntax node);
    private static SyntaxNode HandleOperatorDeclaration(OperatorDeclarationSyntax node);
    private static SyntaxNode HandleConversionOperatorDeclaration(ConversionOperatorDeclarationSyntax node);
    private static SyntaxNode HandleIndexerDeclaration(IndexerDeclarationSyntax node);
    private static SyntaxNode HandleConstructorDeclaration(ConstructorDeclarationSyntax node);
    private static SyntaxNode FindParentDeclarationNode(SyntaxNode node);
    private static bool IsNestedType(BaseTypeDeclarationSyntax typeDeclaration);
    private static bool IsNestedType(DelegateDeclarationSyntax delegateDeclaration);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.MaintainabilityRules.SA1402CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.MaintainabilityRules.SA1402CodeFixProvider/<GetTransformedSolutionAsync>d__5")]
private static Task`1<Solution> GetTransformedSolutionAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.MaintainabilityRules.SA1404CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.MaintainabilityRules.SA1404CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> UpdateValueOfArgumentAsync(Document document, SyntaxNode root, AttributeArgumentSyntax argument);
    private static Task`1<Document> AddJustificationToAttributeAsync(Document document, SyntaxNode syntaxRoot, AttributeSyntax attribute);
    private static LiteralExpressionSyntax GetNewAttributeValue();
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.MaintainabilityRules.SA1407SA1408CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.MaintainabilityRules.SA1407SA1408CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> GetTransformedDocumentAsync(Document document, SyntaxNode root, BinaryExpressionSyntax syntax);
}
internal class StyleCop.Analyzers.MaintainabilityRules.SA1407SA1408FixAllProvider : DocumentBasedFixAllProvider {
    protected string CodeActionTitle { get; }
    protected virtual string get_CodeActionTitle();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.MaintainabilityRules.SA1407SA1408FixAllProvider/<FixAllInDocumentAsync>d__2")]
protected virtual Task`1<SyntaxNode> FixAllInDocumentAsync(FixAllContext fixAllContext, Document document, ImmutableArray`1<Diagnostic> diagnostics);
    private static SyntaxNode AddParentheses(SyntaxNode originalNode, SyntaxNode rewrittenNode);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.MaintainabilityRules.SA1410SA1411CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.MaintainabilityRules.SA1410SA1411CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> GetTransformedDocumentAsync(Document document, SyntaxNode root, SyntaxNode node);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.MaintainabilityRules.SA1412CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.MaintainabilityRules.SA1412CodeFixProvider/<GetTransformedSolutionAsync>d__5")]
internal static Task`1<Solution> GetTransformedSolutionAsync(Document document, CancellationToken cancellationToken);
}
internal class StyleCop.Analyzers.MaintainabilityRules.SA1412FixAllProvider : FixAllProvider {
    public virtual Task`1<CodeAction> GetFixAsync(FixAllContext fixAllContext);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.MaintainabilityRules.SA1412FixAllProvider/<FixDocumentAsync>d__1")]
private static Task`1<Solution> FixDocumentAsync(Solution solution, DocumentId documentId, ImmutableArray`1<Diagnostic> diagnostics, string codeActionEquivalenceKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.MaintainabilityRules.SA1412FixAllProvider/<GetDocumentFixesAsync>d__2")]
private static Task`1<Solution> GetDocumentFixesAsync(FixAllContext fixAllContext);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.MaintainabilityRules.SA1412FixAllProvider/<GetSolutionFixesAsync>d__3")]
private static Task`1<Solution> GetSolutionFixesAsync(FixAllContext fixAllContext, ImmutableArray`1<Document> documents);
    private static Task`1<Solution> GetProjectFixesAsync(FixAllContext fixAllContext);
    private static Task`1<Solution> GetSolutionFixesAsync(FixAllContext fixAllContext);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.MaintainabilityRules.SA1413CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.MaintainabilityRules.SA1413CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.NamingRules.RenameToLowerCaseCodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.NamingRules.RenameToLowerCaseCodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.NamingRules.RenameToUpperCaseCodeFixProvider : CodeFixProvider {
    private static string Suffix;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.NamingRules.RenameToUpperCaseCodeFixProvider/<RegisterCodeFixesAsync>d__5")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.NamingRules.SA1302CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.NamingRules.SA1302CodeFixProvider/<CreateChangedSolutionAsync>d__4")]
private static Task`1<Solution> CreateChangedSolutionAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.NamingRules.SA1308CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.NamingRules.SA1308CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.NamingRules.SA1309CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.NamingRules.SA1309CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.NamingRules.SA1310CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.NamingRules.SA1310CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static string BuildProposedName(string currentName);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.NamingRules.SA1314CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.NamingRules.SA1314CodeFixProvider/<CreateChangedSolutionAsync>d__4")]
private static Task`1<Solution> CreateChangedSolutionAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.NamingRules.SX1309CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.NamingRules.SX1309CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NoCodeFixAttribute("Disabled until stable")]
[SharedAttribute]
internal class StyleCop.Analyzers.OrderingRules.ElementOrderCodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.OrderingRules.ElementOrderCodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static SyntaxNode UpdateSyntaxRoot(MemberDeclarationSyntax memberDeclaration, ImmutableArray`1<OrderingTrait> elementOrder, SyntaxNode syntaxRoot, IndentationSettings indentationSettings);
    private static SyntaxNode HandleTypeDeclaration(MemberOrderHelper memberOrder, TypeDeclarationSyntax typeDeclarationNode, ImmutableArray`1<OrderingTrait> elementOrder, SyntaxNode syntaxRoot, IndentationSettings indentationSettings);
    private static SyntaxNode HandleCompilationUnitDeclaration(MemberOrderHelper memberOrder, CompilationUnitSyntax compilationUnitDeclaration, ImmutableArray`1<OrderingTrait> elementOrder, SyntaxNode syntaxRoot, IndentationSettings indentationSettings);
    private static SyntaxNode HandleNamespaceDeclaration(MemberOrderHelper memberOrder, NamespaceDeclarationSyntax namespaceDeclaration, ImmutableArray`1<OrderingTrait> elementOrder, SyntaxNode syntaxRoot, IndentationSettings indentationSettings);
    private static SyntaxNode OrderMember(MemberOrderHelper memberOrder, SyntaxList`1<MemberDeclarationSyntax> members, ImmutableArray`1<OrderingTrait> elementOrder, SyntaxNode syntaxRoot, IndentationSettings indentationSettings);
    private static SyntaxNode MoveMember(SyntaxNode syntaxRoot, MemberDeclarationSyntax member, MemberDeclarationSyntax targetMember, IndentationSettings indentationSettings);
    private static SyntaxTriviaList StripFileHeader(SyntaxTriviaList newLeadingTrivia);
    private static SyntaxTriviaList GetFileHeader(SyntaxTriviaList newLeadingTrivia);
    private static bool HasLeadingBlankLines(SyntaxNode node);
    private static SyntaxTriviaList GetLeadingTriviaWithoutLeadingBlankLines(SyntaxNode node);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.OrderingRules.SA1205CodeFixProvider : CodeFixProvider {
    private static ImmutableArray`1<SyntaxKind> PublicAccessibilityKeywords;
    private static ImmutableArray`1<SyntaxKind> InternalAccessibilityKeywords;
    private static ImmutableArray`1<SyntaxKind> ProtectedAccessibilityKeywords;
    private static ImmutableArray`1<SyntaxKind> ProtectedOrInternalAccessibilityKeywords;
    private static ImmutableArray`1<SyntaxKind> PrivateAccessibilityKeywords;
    private static ImmutableArray`1<SyntaxKind> UnexpectedAccessibilityKeywords;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static SA1205CodeFixProvider();
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.OrderingRules.SA1205CodeFixProvider/<GetTransformedDocumentAsync>d__11")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static ImmutableArray`1<SyntaxKind> GetMissingAccessModifiers(Accessibility accessibility);
    private static TypeDeclarationSyntax ReplaceModifiers(TypeDeclarationSyntax node, SyntaxTokenList modifiers);
    private static TypeDeclarationSyntax ReplaceKeyword(TypeDeclarationSyntax node, SyntaxToken keyword);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.OrderingRules.SA1206CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.OrderingRules.SA1206CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static SyntaxNode UpdateSyntaxRoot(MemberDeclarationSyntax memberDeclaration, SyntaxTokenList newModifiers, SyntaxNode syntaxRoot);
    private static SyntaxTokenList FullySortModifiers(SyntaxTokenList modifiers);
    private static SyntaxTokenList PartiallySortModifiers(SyntaxTokenList modifiers, SyntaxToken modifierToFix);
    private static SyntaxTokenList AdjustTrivia(IEnumerable`1<SyntaxToken> newModifiers, SyntaxTokenList oldModifiers);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.OrderingRules.SA1207CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.OrderingRules.SA1207CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static SyntaxToken ComputeReplacementToken(SyntaxToken originalToken, SyntaxToken rewrittenToken, bool hasInternalKeyword);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.OrderingRules.SA1212SA1213CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.OrderingRules.SA1212SA1213CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static bool HasLeadingBlankLines(SyntaxNode node);
    private static bool AccessorsAreOnTheSameLine(AccessorDeclarationSyntax firstAccesor, AccessorDeclarationSyntax secondAccessor);
    private static AccessorDeclarationSyntax GetNewAccessor(AccessorListSyntax accessorList, AccessorDeclarationSyntax firstAccessor, AccessorDeclarationSyntax secondAccessor);
    private static SyntaxTriviaList GetLeadingTriviaWithoutLeadingBlankLines(SyntaxNode secondAccessor);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.OrderingRules.UsingCodeFixProvider : CodeFixProvider {
    private static string SystemUsingDirectiveIdentifier;
    private static List`1<UsingDirectiveSyntax> EmptyUsingsList;
    private static SyntaxAnnotation UsingCodeFixAnnotation;
    private static SymbolDisplayFormat FullNamespaceDisplayFormat;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static UsingCodeFixProvider();
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.OrderingRules.UsingCodeFixProvider/<RegisterCodeFixesAsync>d__8")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.OrderingRules.UsingCodeFixProvider/<GetTransformedDocumentAsync>d__9")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, SyntaxNode syntaxRoot, bool forcePreservePlacement, CancellationToken cancellationToken);
    private static string DetermineIndentation(CompilationUnitSyntax compilationUnit, IndentationSettings indentationSettings, UsingDirectivesPlacement usingDirectivesPlacement);
    private static UsingDirectivesPlacement DeterminePlacement(CompilationUnitSyntax compilationUnit, StyleCopSettings settings);
    private static int CountNamespaces(SyntaxList`1<MemberDeclarationSyntax> members);
    private static List`1<UsingDirectiveSyntax> BuildStripList(UsingsSorter usingsHelper);
    private static void BuildReplaceMapForNamespaces(UsingsSorter usingsHelper, Dictionary`2<UsingDirectiveSyntax, UsingDirectiveSyntax> replaceMap, IndentationSettings indentationSettings, bool qualifyNames);
    private static void BuildReplaceMapForConditionalDirectives(UsingsSorter usingsHelper, Dictionary`2<UsingDirectiveSyntax, UsingDirectiveSyntax> replaceMap, IndentationSettings indentationSettings, TreeTextSpan rootSpan);
    private static int CompareSpanStart(UsingDirectiveSyntax left, UsingDirectiveSyntax right);
    private static SyntaxNode AddUsingsToNamespace(SyntaxNode newSyntaxRoot, UsingsSorter usingsHelper, string usingsIndentation, bool hasConditionalDirectives);
    private static SyntaxNode AddUsingsToCompilationRoot(SyntaxNode newSyntaxRoot, UsingsSorter usingsHelper, string usingsIndentation, bool hasConditionalDirectives);
    private static SyntaxNode StripMultipleBlankLines(SyntaxNode syntaxRoot);
    private static ImmutableArray`1<SyntaxTrivia> GetFileHeader(SyntaxNode syntaxRoot);
    private static SyntaxNode ReAddFileHeader(SyntaxNode syntaxRoot, ImmutableArray`1<SyntaxTrivia> fileHeader);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.IndentationCodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.IndentationCodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static bool TryGetTextChange(Diagnostic diagnostic, SyntaxNode syntaxRoot, TextChange& textChange);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.RemoveRegionCodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.RemoveRegionCodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic);
}
internal class StyleCop.Analyzers.ReadabilityRules.RemoveRegionFixAllProvider : DocumentBasedFixAllProvider {
    protected string CodeActionTitle { get; }
    protected virtual string get_CodeActionTitle();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.RemoveRegionFixAllProvider/<FixAllInDocumentAsync>d__2")]
protected virtual Task`1<SyntaxNode> FixAllInDocumentAsync(FixAllContext fixAllContext, Document document, ImmutableArray`1<Diagnostic> diagnostics);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1100CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static BaseExpressionSyntax GetBaseExpressionNode(SyntaxNode root, TextSpan sourceSpan);
    private static ThisExpressionSyntax RewriteBaseAsThis(BaseExpressionSyntax token);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1100CodeFixProvider/<GetTransformedDocumentAsync>d__7")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1101CodeFixProvider : CodeFixProvider {
    private static ThisExpressionSyntax ThisExpressionSyntax;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static SA1101CodeFixProvider();
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1101CodeFixProvider/<RegisterCodeFixesAsync>d__5")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> GetTransformedDocumentAsync(Document document, SyntaxNode root, SimpleNameSyntax node);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1102CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1102CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1103CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1103CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static bool AcceptableSingleLineTrivia(SyntaxTrivia trivia);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1103CodeFixProvider/<GetTransformedDocumentFromSingleLineAsync>d__6")]
private static Task`1<Document> GetTransformedDocumentFromSingleLineAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1103CodeFixProvider/<GetTransformedDocumentForMultipleLinesAsync>d__7")]
private static Task`1<Document> GetTransformedDocumentForMultipleLinesAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static ImmutableArray`1<SyntaxNode> CreateQueryNodeList(QueryExpressionSyntax queryExpression);
    private static void ProcessQueryBody(QueryBodySyntax body, List`1<SyntaxNode> queryNodes);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1104SA1105CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1104SA1105CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1106CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1106CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1106CodeFixProvider/<RemoveEmptyStatementAsync>d__6")]
private static Task`1<Document> RemoveEmptyStatementAsync(Document document, SyntaxNode root, EmptyStatementSyntax node, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1106CodeFixProvider/<RemoveSemicolonTextAsync>d__7")]
private static Task`1<Document> RemoveSemicolonTextAsync(Document document, SyntaxToken token, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1107CodeFixProvider : CodeFixProvider {
    private static SA1107FixAllProvider FixAllProvider;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static SA1107CodeFixProvider();
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1107CodeFixProvider/<RegisterCodeFixesAsync>d__5")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> GetTransformedDocumentAsync(Document document, SyntaxNode root, SyntaxNode node);
}
internal class StyleCop.Analyzers.ReadabilityRules.SA1107FixAllProvider : DocumentBasedFixAllProvider {
    protected string CodeActionTitle { get; }
    protected virtual string get_CodeActionTitle();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1107FixAllProvider/<FixAllInDocumentAsync>d__2")]
protected virtual Task`1<SyntaxNode> FixAllInDocumentAsync(FixAllContext fixAllContext, Document document, ImmutableArray`1<Diagnostic> diagnostics);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1116CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1116CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1120CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1120CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static bool TriviaHasLeadingContentOnLine(SyntaxNode root, SyntaxTrivia commentTrivia);
    private static bool TriviaHasTrailingContentOnLine(SyntaxNode root, SyntaxTrivia commentTrivia);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1121CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static SyntaxNode ComputeReplacement(SemanticModel semanticModel, SyntaxNode node, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1121CodeFixProvider/<GetTransformedDocumentAsync>d__6")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1122CodeFixProvider : CodeFixProvider {
    private static SyntaxNode StringEmptyExpression;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static SA1122CodeFixProvider();
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1122CodeFixProvider/<RegisterCodeFixesAsync>d__6")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1122CodeFixProvider/<GetTransformedDocumentAsync>d__7")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1127CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1127CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static string GetParentIndentation(SyntaxToken token);
    private static SyntaxTriviaList RemoveUnnecessaryWhitespaceTrivia(SyntaxToken token);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1128CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1128CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static ConstructorDeclarationSyntax ReformatConstructorDeclaration(ConstructorDeclarationSyntax constructorDeclaration, IndentationSettings indentationSettings, SyntaxTrivia newLine);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1129CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1129CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static SyntaxNode GetReplacementNode(SyntaxNode node, SemanticModel semanticModel, CancellationToken cancellationToken);
    private static bool IsType(INamedTypeSymbol namedTypeSymbol);
    private static bool IsDefaultParameterValue(ObjectCreationExpressionSyntax expression);
    private static bool IsEnumWithDefaultMember(INamedTypeSymbol namedTypeSymbol, String& foundMemberName);
    private static SyntaxNode ConstructMemberAccessSyntax(TypeSyntax typeSyntax, string memberName);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1130CodeFixProvider : CodeFixProvider {
    private static SyntaxToken ParameterListSeparator;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static SA1130CodeFixProvider();
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1130CodeFixProvider/<RegisterCodeFixesAsync>d__5")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1130CodeFixProvider/<CanFixAsync>d__6")]
private static Task`1<bool> CanFixAsync(CodeFixContext context, Diagnostic diagnostic);
    private static SyntaxNode ReplaceWithLambda(SemanticModel semanticModel, AnonymousMethodExpressionSyntax anonymousMethod);
    private static ImmutableArray`1<string> GetMethodInvocationArgumentList(SemanticModel semanticModel, AnonymousMethodExpressionSyntax anonymousMethod);
    private static ImmutableArray`1<string> GetEqualsArgumentList(SemanticModel semanticModel, AnonymousMethodExpressionSyntax anonymousMethod);
    private static Nullable`1<ImmutableArray`1<string>> GetAssignmentArgumentList(SemanticModel semanticModel, AnonymousMethodExpressionSyntax anonymousMethod);
    private static ImmutableArray`1<string> GetMemberReturnTypeArgumentList(SemanticModel semanticModel, AnonymousMethodExpressionSyntax anonymousMethod);
    private static List`1<ParameterSyntax> GenerateUniqueParameterNames(SemanticModel semanticModel, AnonymousMethodExpressionSyntax anonymousMethod, ImmutableArray`1<string> argumentNames);
    private static ParameterListSyntax RemoveType(ParameterListSyntax parameterList);
    private static ParameterSyntax RemoveType(ParameterSyntax parameterSyntax);
    private static bool IsValid(ParameterSyntax parameterSyntax);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1130CodeFixProvider/<GetTransformedDocumentAsync>d__16")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1131CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1131CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static BinaryExpressionSyntax TransformExpression(BinaryExpressionSyntax binaryExpression);
    private static SyntaxToken GetCorrectOperatorToken(SyntaxToken operatorToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1132CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1132CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static List`1<BaseFieldDeclarationSyntax> SplitDeclaration(Document document, BaseFieldDeclarationSyntax baseFieldDeclaration);
    private static List`1<BaseFieldDeclarationSyntax> DeclarationSplitter(Document document, VariableDeclarationSyntax declaration, Func`2<VariableDeclarationSyntax, BaseFieldDeclarationSyntax> declarationFactory, SyntaxTriviaList declarationTrailingTrivia);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1133CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1133CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static List`1<AttributeListSyntax> GetNewAttributeList(AttributeListSyntax attributeList, SyntaxTrivia indentationTrivia);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1134CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1134CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1134CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1135CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1135CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static SyntaxNode GetReplacementNode(SemanticModel semanticModel, UsingDirectiveSyntax node, CancellationToken cancellationToken);
    private static TypeSyntax GetReplacementName(TypeSyntax symbolNameSyntax, TypeSyntax nameSyntax);
    private static NameSyntax GetReplacementGenericName(TypeSyntax symbolNameSyntax, GenericNameSyntax genericNameSyntax);
    private static TypeArgumentListSyntax GetReplacementTypeArgumentList(GenericNameSyntax symbolGenericNameSyntax, GenericNameSyntax genericNameSyntax);
    private static NameSyntax GetReplacementQualifiedName(QualifiedNameSyntax symbolNameSyntax, QualifiedNameSyntax nameSyntax);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1136CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1136CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SA1139CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SA1139CodeFixProvider/<GetTransformedDocumentAsync>d__4")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static SyntaxNode GenerateReplacementNode(CastExpressionSyntax node);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.ReadabilityRules.SX1101CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.ReadabilityRules.SX1101CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static SyntaxNode GenerateReplacementNode(ThisExpressionSyntax node);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.Settings.SettingsFileCodeFixProvider : CodeFixProvider {
    internal static string DefaultSettingsFileContent;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    public virtual FixAllProvider GetFixAllProvider();
    private static Task`1<Solution> GetTransformedSolutionAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.SpacingRules.SA1003CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.SpacingRules.SA1003CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.SpacingRules.SA1004CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.SpacingRules.SA1004CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static TextChange GetTextChange(SyntaxNode root, SourceText sourceText, Diagnostic diagnostic);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.SpacingRules.SA1005CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.SpacingRules.SA1005CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.SpacingRules.SA1005CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Location location, CancellationToken cancellationToken);
    private static TextChange GetTextChange(SourceText text, TextSpan sourceSpan);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.SpacingRules.SA1018CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("StyleCop.Analyzers.SpacingRules.SA1018CodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static bool UnsupportedTriviaKind(SyntaxTrivia trivia);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.SpacingRules.SA1018CodeFixProvider/<GetTransformedDocumentAsync>d__6")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.SpacingRules.SA1025CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.SpacingRules.SA1025CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.SpacingRules.SA1027CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.SpacingRules.SA1027CodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static TextChange FixDiagnostic(IndentationSettings indentationSettings, SourceText sourceText, Diagnostic diagnostic);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.SpacingRules.SA1028CodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.SpacingRules.SA1028CodeFixProvider/<RemoveWhitespaceAsync>d__5")]
private static Task`1<Document> RemoveWhitespaceAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
internal class StyleCop.Analyzers.SpacingRules.TokenSpacingCodeFixProvider : CodeFixProvider {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("StyleCop.Analyzers.SpacingRules.TokenSpacingCodeFixProvider/<GetTransformedDocumentAsync>d__5")]
private static Task`1<Document> GetTransformedDocumentAsync(Document document, Diagnostic diagnostic, CancellationToken cancellationToken);
    private static void UpdateReplaceMap(Dictionary`2<SyntaxToken, SyntaxToken> replaceMap, SyntaxToken token, Diagnostic diagnostic);
    private static void UpdateReplaceMap(Dictionary`2<SyntaxToken, SyntaxToken> replaceMap, SyntaxToken token, Func`2<SyntaxToken, SyntaxToken> action);
}
internal class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
}
