public class SumoLogic.Logging.Common.Log.ConsoleLog : object {
    public bool IsTraceEnabled { get; }
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public bool IsErrorEnabled { get; }
    public sealed virtual bool get_IsTraceEnabled();
    public sealed virtual bool get_IsDebugEnabled();
    public sealed virtual bool get_IsInfoEnabled();
    public sealed virtual bool get_IsWarnEnabled();
    public sealed virtual bool get_IsErrorEnabled();
    public sealed virtual void Trace(string msg);
    public sealed virtual void Debug(string msg);
    public sealed virtual void Info(string msg);
    public sealed virtual void Warn(string msg);
    public sealed virtual void Error(string msg);
    private static void WriteToConsole(string prefix, string msg);
}
public class SumoLogic.Logging.Common.Log.DummyLog : object {
    public bool IsTraceEnabled { get; }
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public bool IsErrorEnabled { get; }
    public sealed virtual bool get_IsTraceEnabled();
    public sealed virtual bool get_IsDebugEnabled();
    public sealed virtual bool get_IsInfoEnabled();
    public sealed virtual bool get_IsWarnEnabled();
    public sealed virtual bool get_IsErrorEnabled();
    public sealed virtual void Trace(string msg);
    public sealed virtual void Debug(string msg);
    public sealed virtual void Info(string msg);
    public sealed virtual void Warn(string msg);
    public sealed virtual void Error(string msg);
}
public interface SumoLogic.Logging.Common.Log.ILog {
    public bool IsTraceEnabled { get; }
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public bool IsErrorEnabled { get; }
    public abstract virtual bool get_IsTraceEnabled();
    public abstract virtual bool get_IsDebugEnabled();
    public abstract virtual bool get_IsInfoEnabled();
    public abstract virtual bool get_IsWarnEnabled();
    public abstract virtual bool get_IsErrorEnabled();
    public abstract virtual void Trace(string msg);
    public abstract virtual void Debug(string msg);
    public abstract virtual void Info(string msg);
    public abstract virtual void Warn(string msg);
    public abstract virtual void Error(string msg);
}
public abstract class SumoLogic.Logging.Common.Queue.BufferWithEviction`1 : object {
    private long capacity;
    public long Capacity { get; public set; }
    public int Count { get; }
    protected BufferWithEviction`1(long capacity);
    public long get_Capacity();
    public void set_Capacity(long value);
    public abstract virtual int get_Count();
    public abstract virtual int DrainTo(ICollection`1<T> collection);
    public abstract virtual bool Add(T element);
    protected abstract virtual T Evict();
    protected abstract virtual bool Evict(long cost);
}
public class SumoLogic.Logging.Common.Queue.BufferWithFifoEviction`1 : BufferWithEviction`1<T> {
    private object queueAddLock;
    private CostBoundedConcurrentQueue`1<T> queue;
    private ICostAssigner`1<T> costAssigner;
    private ILog log;
    public int Count { get; }
    public BufferWithFifoEviction`1(long capacity, ICostAssigner`1<T> costAssigner, ILog log);
    public BufferWithFifoEviction`1(long capacity, ICostAssigner`1<T> cost);
    public virtual int get_Count();
    public virtual int DrainTo(ICollection`1<T> collection);
    public virtual bool Add(T element);
    protected virtual T Evict();
    protected virtual bool Evict(long cost);
}
public class SumoLogic.Logging.Common.Queue.CostBoundedConcurrentQueue`1 : object {
    private object enqueueLock;
    private ConcurrentQueue`1<T> queue;
    private ICostAssigner`1<T> costAssigner;
    private long capacity;
    private long cost;
    public long Cost { get; }
    public int Count { get; }
    public CostBoundedConcurrentQueue`1(long capacity, ICostAssigner`1<T> costAssigner);
    public long get_Cost();
    public int get_Count();
    public int DrainTo(ICollection`1<T> collection);
    public bool Enqueue(T element);
    public T Dequeue();
}
public interface SumoLogic.Logging.Common.Queue.ICostAssigner`1 {
    public abstract virtual long Cost(T element);
}
public class SumoLogic.Logging.Common.Queue.StringLengthCostAssigner : object {
    public sealed virtual long Cost(string element);
}
public abstract class SumoLogic.Logging.Common.Sender.BufferFlushingTask`2 : object {
    [CompilerGeneratedAttribute]
private TimeSpan <MaxFlushInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MessagesPerRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessagesName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessagesCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessagesHost>k__BackingField;
    [CompilerGeneratedAttribute]
private ILog <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFlushing>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastFlushedOn>k__BackingField;
    [CompilerGeneratedAttribute]
private BufferWithEviction`1<TBufferItem> <MessageQueue>k__BackingField;
    protected TimeSpan MaxFlushInterval { get; protected set; }
    protected long MessagesPerRequest { get; protected set; }
    protected string MessagesName { get; protected set; }
    protected string MessagesCategory { get; protected set; }
    protected string MessagesHost { get; protected set; }
    protected ILog Log { get; protected set; }
    protected bool IsFlushing { get; protected set; }
    private DateTime LastFlushedOn { get; private set; }
    private BufferWithEviction`1<TBufferItem> MessageQueue { get; private set; }
    protected BufferFlushingTask`2(BufferWithEviction`1<TBufferItem> messageQueue, ILog log);
    [CompilerGeneratedAttribute]
protected TimeSpan get_MaxFlushInterval();
    [CompilerGeneratedAttribute]
protected void set_MaxFlushInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
protected long get_MessagesPerRequest();
    [CompilerGeneratedAttribute]
protected void set_MessagesPerRequest(long value);
    [CompilerGeneratedAttribute]
protected string get_MessagesName();
    [CompilerGeneratedAttribute]
protected void set_MessagesName(string value);
    [CompilerGeneratedAttribute]
protected string get_MessagesCategory();
    [CompilerGeneratedAttribute]
protected void set_MessagesCategory(string value);
    [CompilerGeneratedAttribute]
protected string get_MessagesHost();
    [CompilerGeneratedAttribute]
protected void set_MessagesHost(string value);
    [CompilerGeneratedAttribute]
protected ILog get_Log();
    [CompilerGeneratedAttribute]
protected void set_Log(ILog value);
    [CompilerGeneratedAttribute]
protected bool get_IsFlushing();
    [CompilerGeneratedAttribute]
protected void set_IsFlushing(bool value);
    [CompilerGeneratedAttribute]
private DateTime get_LastFlushedOn();
    [CompilerGeneratedAttribute]
private void set_LastFlushedOn(DateTime value);
    [CompilerGeneratedAttribute]
private BufferWithEviction`1<TBufferItem> get_MessageQueue();
    [CompilerGeneratedAttribute]
private void set_MessageQueue(BufferWithEviction`1<TBufferItem> value);
    [AsyncStateMachineAttribute("SumoLogic.Logging.Common.Sender.BufferFlushingTask`2/<Run>d__37")]
public Task Run();
    [AsyncStateMachineAttribute("SumoLogic.Logging.Common.Sender.BufferFlushingTask`2/<FlushAndSend>d__38")]
public Task FlushAndSend();
    protected abstract virtual TMessage Aggregate(IList`1<TBufferItem> messages);
    [ObsoleteAttribute("use SendOut(TMessage body, string name, string category, string host)")]
protected abstract virtual Task SendOut(TMessage body, string name);
    protected abstract virtual Task SendOut(TMessage body, string name, string category, string host);
    private bool NeedsFlushing();
}
public class SumoLogic.Logging.Common.Sender.SumoLogicMessageSender : object {
    private static string TextPlainMediaType;
    private static string SUMO_SOURCE_NAME_HEADER;
    private static string SUMO_SOURCE_CATEGORY_HEADER;
    private static string SUMO_SOURCE_HOST_HEADER;
    private static string SUMO_CLIENT_HEADER;
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientName>k__BackingField;
    [CompilerGeneratedAttribute]
private ILog <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClient <HttpClient>k__BackingField;
    public Uri Url { get; public set; }
    public TimeSpan RetryInterval { get; public set; }
    public TimeSpan ConnectionTimeout { get; public set; }
    public bool CanTrySend { get; }
    public bool CanSend { get; }
    public string ClientName { get; public set; }
    private ILog Log { get; private set; }
    private HttpClient HttpClient { get; private set; }
    public SumoLogicMessageSender(HttpMessageHandler httpMessageHandler, ILog log);
    public SumoLogicMessageSender(HttpMessageHandler httpMessageHandler, ILog log, string clientName);
    [CompilerGeneratedAttribute]
public Uri get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(Uri value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RetryInterval();
    [CompilerGeneratedAttribute]
public void set_RetryInterval(TimeSpan value);
    public TimeSpan get_ConnectionTimeout();
    public void set_ConnectionTimeout(TimeSpan value);
    public bool get_CanTrySend();
    public bool get_CanSend();
    [CompilerGeneratedAttribute]
public string get_ClientName();
    [CompilerGeneratedAttribute]
public void set_ClientName(string value);
    [CompilerGeneratedAttribute]
private ILog get_Log();
    [CompilerGeneratedAttribute]
private void set_Log(ILog value);
    [CompilerGeneratedAttribute]
private HttpClient get_HttpClient();
    [CompilerGeneratedAttribute]
private void set_HttpClient(HttpClient value);
    [AsyncStateMachineAttribute("SumoLogic.Logging.Common.Sender.SumoLogicMessageSender/<Send>d__34")]
public Task Send(string body, string name, string category, string host);
    [ObsoleteAttribute("use Send(string body, string name, string category, string host)")]
public Task Send(string body, string name);
    [AsyncStateMachineAttribute("SumoLogic.Logging.Common.Sender.SumoLogicMessageSender/<TrySend>d__36")]
public Task TrySend(string body, string name, string category, string host);
    [ObsoleteAttribute("use TrySend(string body, string name, string category, string host)")]
public Task TrySend(string body, string name);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class SumoLogic.Logging.Common.Sender.SumoLogicMessageSenderBufferFlushingTask : BufferFlushingTask`2<string, string> {
    [CompilerGeneratedAttribute]
private SumoLogicMessageSender <MessageSender>k__BackingField;
    private SumoLogicMessageSender MessageSender { get; private set; }
    [ObsoleteAttribute("use SumoLogicMessageSenderBufferFlushingTask(BufferWithEviction<string> messagesQueue, SumoLogicMessageSender messageSender, TimeSpan maxFlushInterval, long messagesPerRequest,string messagesName,string messagesCategory,string messagesHost,ILog log)")]
public SumoLogicMessageSenderBufferFlushingTask(BufferWithEviction`1<string> messagesQueue, SumoLogicMessageSender messageSender, TimeSpan maxFlushInterval, long messagesPerRequest, string messagesName, ILog log);
    public SumoLogicMessageSenderBufferFlushingTask(BufferWithEviction`1<string> messagesQueue, SumoLogicMessageSender messageSender, TimeSpan maxFlushInterval, long messagesPerRequest, string messagesName, string messagesCategory, string messagesHost, ILog log);
    [CompilerGeneratedAttribute]
private SumoLogicMessageSender get_MessageSender();
    [CompilerGeneratedAttribute]
private void set_MessageSender(SumoLogicMessageSender value);
    protected virtual string Aggregate(IList`1<string> messages);
    [ObsoleteAttribute("use SendOut(string body, string name, string category, string host)")]
protected virtual Task SendOut(string body, string name);
    protected virtual Task SendOut(string body, string name, string category, string host);
}
