public class SuperSocket.ClientEngine.ASCIIEncoding : Encoding {
    private static ASCIIEncoding m_Instance;
    private Nullable`1<char> fallbackCharacter;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <FallbackByte>k__BackingField;
    private static Char[] byteToChar;
    private static Dictionary`2<char, byte> charToByte;
    public static ASCIIEncoding Instance { get; }
    public string WebName { get; }
    public Nullable`1<char> FallbackCharacter { get; public set; }
    public Nullable`1<byte> FallbackByte { get; private set; }
    public static int CharacterCount { get; }
    private static ASCIIEncoding();
    public static ASCIIEncoding get_Instance();
    public virtual string get_WebName();
    public virtual int GetHashCode();
    public Nullable`1<char> get_FallbackCharacter();
    public void set_FallbackCharacter(Nullable`1<char> value);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_FallbackByte();
    [CompilerGeneratedAttribute]
private void set_FallbackByte(Nullable`1<byte> value);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    private int GetBytesWithFallBack(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    private int GetBytesWithoutFallback(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    private int GetCharsWithFallback(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    private int GetCharsWithoutFallback(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public static int get_CharacterCount();
}
public class SuperSocket.ClientEngine.AsyncTcpSession : TcpClientSession {
    private SocketAsyncEventArgs m_SocketEventArgs;
    private SocketAsyncEventArgs m_SocketEventArgsSend;
    protected virtual void SocketEventArgsCompleted(object sender, SocketAsyncEventArgs e);
    protected virtual void SetBuffer(ArraySegment`1<byte> bufferSegment);
    protected virtual void OnGetSocket(SocketAsyncEventArgs e);
    private void BeginReceive();
    private void ProcessReceive(SocketAsyncEventArgs e);
    private void StartReceive();
    protected virtual void SendInternal(PosList`1<ArraySegment`1<byte>> items);
    private void Sending_Completed(object sender, SocketAsyncEventArgs e);
    protected virtual void OnClosed();
}
public abstract class SuperSocket.ClientEngine.ClientSession : object {
    public static int DefaultReceiveBufferSize;
    [CompilerGeneratedAttribute]
private Socket <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConnected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SendingQueueSize>k__BackingField;
    private EventHandler m_Closed;
    private EventHandler`1<ErrorEventArgs> m_Error;
    private EventHandler m_Connected;
    private EventHandler`1<DataEventArgs> m_DataReceived;
    private DataEventArgs m_DataArgs;
    [CompilerGeneratedAttribute]
private int <ReceiveBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private IProxyConnector <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <Buffer>k__BackingField;
    protected Socket Client { get; protected set; }
    private Socket SuperSocket.ClientEngine.IClientSession.Socket { get; }
    public bool IsConnected { get; private set; }
    public bool NoDelay { get; public set; }
    public int SendingQueueSize { get; public set; }
    public int ReceiveBufferSize { get; public set; }
    public IProxyConnector Proxy { get; public set; }
    protected ArraySegment`1<byte> Buffer { get; protected set; }
    [CompilerGeneratedAttribute]
protected Socket get_Client();
    [CompilerGeneratedAttribute]
protected void set_Client(Socket value);
    private sealed virtual override Socket SuperSocket.ClientEngine.IClientSession.get_Socket();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsConnected();
    [CompilerGeneratedAttribute]
private void set_IsConnected(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoDelay();
    [CompilerGeneratedAttribute]
public void set_NoDelay(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SendingQueueSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SendingQueueSize(int value);
    public abstract virtual void Connect(EndPoint remoteEndPoint);
    public abstract virtual bool TrySend(ArraySegment`1<byte> segment);
    public abstract virtual bool TrySend(IList`1<ArraySegment`1<byte>> segments);
    public sealed virtual void Send(Byte[] data, int offset, int length);
    public sealed virtual void Send(ArraySegment`1<byte> segment);
    public sealed virtual void Send(IList`1<ArraySegment`1<byte>> segments);
    public abstract virtual void Close();
    public sealed virtual void add_Closed(EventHandler value);
    public sealed virtual void remove_Closed(EventHandler value);
    protected virtual void OnClosed();
    public sealed virtual void add_Error(EventHandler`1<ErrorEventArgs> value);
    public sealed virtual void remove_Error(EventHandler`1<ErrorEventArgs> value);
    protected virtual void OnError(Exception e);
    public sealed virtual void add_Connected(EventHandler value);
    public sealed virtual void remove_Connected(EventHandler value);
    protected virtual void OnConnected();
    public sealed virtual void add_DataReceived(EventHandler`1<DataEventArgs> value);
    public sealed virtual void remove_DataReceived(EventHandler`1<DataEventArgs> value);
    protected virtual void OnDataReceived(Byte[] data, int offset, int length);
    [CompilerGeneratedAttribute]
public virtual int get_ReceiveBufferSize();
    [CompilerGeneratedAttribute]
public virtual void set_ReceiveBufferSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IProxyConnector get_Proxy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Proxy(IProxyConnector value);
    [CompilerGeneratedAttribute]
protected ArraySegment`1<byte> get_Buffer();
    [CompilerGeneratedAttribute]
protected void set_Buffer(ArraySegment`1<byte> value);
    private sealed virtual override void SuperSocket.ClientEngine.IBufferSetter.SetBuffer(ArraySegment`1<byte> bufferSegment);
    protected virtual void SetBuffer(ArraySegment`1<byte> bufferSegment);
}
public class SuperSocket.ClientEngine.ConcurrentBatchQueue`1 : object {
    private object m_Entity;
    private Entity<T> m_BackEntity;
    private static T m_Null;
    private Func`2<T, bool> m_NullValidator;
    private bool m_Rebuilding;
    public bool IsEmpty { get; }
    public int Count { get; }
    public ConcurrentBatchQueue`1(int capacity);
    public ConcurrentBatchQueue`1(int capacity, Func`2<T, bool> nullValidator);
    public ConcurrentBatchQueue`1(T[] array);
    public ConcurrentBatchQueue`1(T[] array, Func`2<T, bool> nullValidator);
    private static ConcurrentBatchQueue`1();
    public sealed virtual bool Enqueue(T item);
    private bool TryEnqueue(T item, Boolean& full);
    public sealed virtual bool Enqueue(IList`1<T> items);
    private bool TryEnqueue(IList`1<T> items, Boolean& full);
    private void EnsureNotRebuild();
    public sealed virtual bool TryDequeue(IList`1<T> outputItems);
    public sealed virtual bool get_IsEmpty();
    public sealed virtual int get_Count();
}
[ExtensionAttribute]
public static class SuperSocket.ClientEngine.ConnectAsyncExtension : object {
    private static void SocketAsyncEventCompleted(object sender, SocketAsyncEventArgs e);
    private static SocketAsyncEventArgs CreateSocketAsyncEventArgs(EndPoint remoteEndPoint, ConnectedCallback callback, object state);
    [ExtensionAttribute]
public static void ConnectAsync(EndPoint remoteEndPoint, SocketClientAccessPolicyProtocol clientAccessPolicyProtocol, ConnectedCallback callback, object state);
}
public class SuperSocket.ClientEngine.ConnectedCallback : MulticastDelegate {
    public ConnectedCallback(object object, IntPtr method);
    public virtual void Invoke(Socket socket, object state, SocketAsyncEventArgs e, Exception exception);
    public virtual IAsyncResult BeginInvoke(Socket socket, object state, SocketAsyncEventArgs e, Exception exception, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SuperSocket.ClientEngine.DataEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public Byte[] Data { get; public set; }
    public int Offset { get; public set; }
    public int Length { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
}
public class SuperSocket.ClientEngine.ErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; private set; }
    public ErrorEventArgs(Exception exception);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
}
[ExtensionAttribute]
public static class SuperSocket.ClientEngine.Extensions : object {
    private static Random m_Random;
    private static Extensions();
    [ExtensionAttribute]
public static int IndexOf(IList`1<T> source, T target, int pos, int length);
    [ExtensionAttribute]
public static Nullable`1<int> SearchMark(IList`1<T> source, T[] mark);
    [ExtensionAttribute]
public static Nullable`1<int> SearchMark(IList`1<T> source, int offset, int length, T[] mark);
    [ExtensionAttribute]
public static Nullable`1<int> SearchMark(IList`1<T> source, int offset, int length, T[] mark, int matched);
    [ExtensionAttribute]
public static int SearchMark(IList`1<T> source, int offset, int length, SearchMarkState`1<T> searchState);
    [ExtensionAttribute]
public static int StartsWith(IList`1<T> source, T[] mark);
    [ExtensionAttribute]
public static int StartsWith(IList`1<T> source, int offset, int length, T[] mark);
    [ExtensionAttribute]
public static bool EndsWith(IList`1<T> source, T[] mark);
    [ExtensionAttribute]
public static bool EndsWith(IList`1<T> source, int offset, int length, T[] mark);
    [ExtensionAttribute]
public static T[] CloneRange(T[] source, int offset, int length);
    [ExtensionAttribute]
public static T[] RandomOrder(T[] source);
    [ExtensionAttribute]
public static string GetValue(NameValueCollection collection, string key);
    [ExtensionAttribute]
public static string GetValue(NameValueCollection collection, string key, string defaultValue);
}
public interface SuperSocket.ClientEngine.IBatchQueue`1 {
    public bool IsEmpty { get; }
    public int Count { get; }
    public abstract virtual bool Enqueue(T item);
    public abstract virtual bool Enqueue(IList`1<T> items);
    public abstract virtual bool TryDequeue(IList`1<T> outputItems);
    public abstract virtual bool get_IsEmpty();
    public abstract virtual int get_Count();
}
public interface SuperSocket.ClientEngine.IBufferSetter {
    public abstract virtual void SetBuffer(ArraySegment`1<byte> bufferSegment);
}
public interface SuperSocket.ClientEngine.IClientSession {
    public Socket Socket { get; }
    public IProxyConnector Proxy { get; public set; }
    public int ReceiveBufferSize { get; public set; }
    public int SendingQueueSize { get; public set; }
    public bool IsConnected { get; }
    public abstract virtual Socket get_Socket();
    public abstract virtual IProxyConnector get_Proxy();
    public abstract virtual void set_Proxy(IProxyConnector value);
    public abstract virtual int get_ReceiveBufferSize();
    public abstract virtual void set_ReceiveBufferSize(int value);
    public abstract virtual int get_SendingQueueSize();
    public abstract virtual void set_SendingQueueSize(int value);
    public abstract virtual bool get_IsConnected();
    public abstract virtual void Connect(EndPoint remoteEndPoint);
    public abstract virtual void Send(ArraySegment`1<byte> segment);
    public abstract virtual void Send(IList`1<ArraySegment`1<byte>> segments);
    public abstract virtual void Send(Byte[] data, int offset, int length);
    public abstract virtual bool TrySend(ArraySegment`1<byte> segment);
    public abstract virtual bool TrySend(IList`1<ArraySegment`1<byte>> segments);
    public abstract virtual void Close();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Connected(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Connected(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Error(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Error(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataReceived(EventHandler`1<DataEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataReceived(EventHandler`1<DataEventArgs> value);
}
public interface SuperSocket.ClientEngine.IPosList`1 {
    public int Position { get; public set; }
    public abstract virtual int get_Position();
    public abstract virtual void set_Position(int value);
}
public interface SuperSocket.ClientEngine.IProxyConnector {
    public abstract virtual void Connect(EndPoint remoteEndPoint);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Completed(EventHandler`1<ProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Completed(EventHandler`1<ProxyEventArgs> value);
}
public class SuperSocket.ClientEngine.PosList`1 : List`1<T> {
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public int Position { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Position();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Position(int value);
}
public class SuperSocket.ClientEngine.Proxy.HttpConnectProxy : ProxyConnectorBase {
    private static string m_RequestTemplate;
    private static string m_ResponsePrefix;
    private static char m_Space;
    private static Byte[] m_LineSeparator;
    private int m_ReceiveBufferSize;
    private static HttpConnectProxy();
    public HttpConnectProxy(EndPoint proxyEndPoint, SocketClientAccessPolicyProtocol clientAccessPolicyProtocol);
    public HttpConnectProxy(EndPoint proxyEndPoint, SocketClientAccessPolicyProtocol clientAccessPolicyProtocol, int receiveBufferSize);
    public virtual void Connect(EndPoint remoteEndPoint);
    protected virtual void ProcessConnect(Socket socket, object targetEndPoint, SocketAsyncEventArgs e, Exception exception);
    protected virtual void ProcessSend(SocketAsyncEventArgs e);
    protected virtual void ProcessReceive(SocketAsyncEventArgs e);
}
public abstract class SuperSocket.ClientEngine.Proxy.ProxyConnectorBase : object {
    [CompilerGeneratedAttribute]
private EndPoint <ProxyEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetHostHame>k__BackingField;
    protected static Encoding ASCIIEncoding;
    [CompilerGeneratedAttribute]
private SocketClientAccessPolicyProtocol <ClientAccessPolicyProtocol>k__BackingField;
    private EventHandler`1<ProxyEventArgs> m_Completed;
    public EndPoint ProxyEndPoint { get; private set; }
    public string TargetHostHame { get; private set; }
    protected SocketClientAccessPolicyProtocol ClientAccessPolicyProtocol { get; private set; }
    public ProxyConnectorBase(EndPoint proxyEndPoint, SocketClientAccessPolicyProtocol clientAccessPolicyProtocol);
    private static ProxyConnectorBase();
    [CompilerGeneratedAttribute]
public EndPoint get_ProxyEndPoint();
    [CompilerGeneratedAttribute]
private void set_ProxyEndPoint(EndPoint value);
    [CompilerGeneratedAttribute]
public string get_TargetHostHame();
    [CompilerGeneratedAttribute]
private void set_TargetHostHame(string value);
    [CompilerGeneratedAttribute]
protected SocketClientAccessPolicyProtocol get_ClientAccessPolicyProtocol();
    [CompilerGeneratedAttribute]
private void set_ClientAccessPolicyProtocol(SocketClientAccessPolicyProtocol value);
    public abstract virtual void Connect(EndPoint remoteEndPoint);
    public sealed virtual void add_Completed(EventHandler`1<ProxyEventArgs> value);
    public sealed virtual void remove_Completed(EventHandler`1<ProxyEventArgs> value);
    protected void OnCompleted(ProxyEventArgs args);
    protected void OnException(Exception exception);
    protected void OnException(string exception);
    protected bool ValidateAsyncResult(SocketAsyncEventArgs e);
    protected void AsyncEventArgsCompleted(object sender, SocketAsyncEventArgs e);
    protected void StartSend(Socket socket, SocketAsyncEventArgs e);
    protected virtual void StartReceive(Socket socket, SocketAsyncEventArgs e);
    protected abstract virtual void ProcessConnect(Socket socket, object targetEndPoint, SocketAsyncEventArgs e, Exception exception);
    protected abstract virtual void ProcessSend(SocketAsyncEventArgs e);
    protected abstract virtual void ProcessReceive(SocketAsyncEventArgs e);
}
internal class SuperSocket.ClientEngine.Proxy.ReceiveState : object {
    [CompilerGeneratedAttribute]
private Byte[] <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public Byte[] Buffer { get; private set; }
    public int Length { get; public set; }
    public ReceiveState(Byte[] buffer);
    [CompilerGeneratedAttribute]
public Byte[] get_Buffer();
    [CompilerGeneratedAttribute]
private void set_Buffer(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
}
public class SuperSocket.ClientEngine.Proxy.Socks4aConnector : Socks4Connector {
    private static Random m_Random;
    public Socks4aConnector(EndPoint proxyEndPoint, SocketClientAccessPolicyProtocol clientAccessPolicyProtocol, string userID);
    private static Socks4aConnector();
    public virtual void Connect(EndPoint remoteEndPoint);
    protected virtual Byte[] GetSendingBuffer(EndPoint targetEndPoint, Int32& actualLength);
    protected virtual void HandleFaultStatus(byte status);
}
public class SuperSocket.ClientEngine.Proxy.Socks4Connector : ProxyConnectorBase {
    [CompilerGeneratedAttribute]
private string <UserID>k__BackingField;
    private static int m_ValidResponseSize;
    public string UserID { get; private set; }
    public Socks4Connector(EndPoint proxyEndPoint, SocketClientAccessPolicyProtocol clientAccessPolicyProtocol, string userID);
    [CompilerGeneratedAttribute]
public string get_UserID();
    [CompilerGeneratedAttribute]
private void set_UserID(string value);
    public virtual void Connect(EndPoint remoteEndPoint);
    protected virtual Byte[] GetSendingBuffer(EndPoint targetEndPoint, Int32& actualLength);
    protected virtual void ProcessConnect(Socket socket, object targetEndPoint, SocketAsyncEventArgs e, Exception exception);
    protected virtual void ProcessSend(SocketAsyncEventArgs e);
    protected virtual void ProcessReceive(SocketAsyncEventArgs e);
    protected virtual void HandleFaultStatus(byte status);
}
public class SuperSocket.ClientEngine.Proxy.Socks5Connector : ProxyConnectorBase {
    private ArraySegment`1<byte> m_UserNameAuthenRequest;
    private static Byte[] m_AuthenHandshake;
    public Socks5Connector(EndPoint proxyEndPoint, SocketClientAccessPolicyProtocol clientAccessPolicyProtocol);
    public Socks5Connector(EndPoint proxyEndPoint, SocketClientAccessPolicyProtocol clientAccessPolicyProtocol, string username, string password);
    private static Socks5Connector();
    public virtual void Connect(EndPoint remoteEndPoint);
    protected virtual void ProcessConnect(Socket socket, object targetEndPoint, SocketAsyncEventArgs e, Exception exception);
    protected virtual void ProcessSend(SocketAsyncEventArgs e);
    private bool ProcessAuthenticationResponse(Socket socket, SocketAsyncEventArgs e);
    protected virtual void ProcessReceive(SocketAsyncEventArgs e);
    private void OnGetFullResponse(SocksContext context);
    private void SendHandshake(SocketAsyncEventArgs e);
    private void AutheticateWithUserNamePassword(SocketAsyncEventArgs e);
}
public class SuperSocket.ClientEngine.ProxyEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Connected>k__BackingField;
    [CompilerGeneratedAttribute]
private Socket <Socket>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetHostName>k__BackingField;
    public bool Connected { get; private set; }
    public Socket Socket { get; private set; }
    public Exception Exception { get; private set; }
    public string TargetHostName { get; private set; }
    public ProxyEventArgs(Socket socket);
    public ProxyEventArgs(Socket socket, string targetHostHame);
    public ProxyEventArgs(Exception exception);
    public ProxyEventArgs(bool connected, Socket socket, string targetHostName, Exception exception);
    [CompilerGeneratedAttribute]
public bool get_Connected();
    [CompilerGeneratedAttribute]
private void set_Connected(bool value);
    [CompilerGeneratedAttribute]
public Socket get_Socket();
    [CompilerGeneratedAttribute]
private void set_Socket(Socket value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public string get_TargetHostName();
    [CompilerGeneratedAttribute]
private void set_TargetHostName(string value);
}
public class SuperSocket.ClientEngine.SearchMarkState`1 : object {
    [CompilerGeneratedAttribute]
private T[] <Mark>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Matched>k__BackingField;
    public T[] Mark { get; private set; }
    public int Matched { get; public set; }
    public SearchMarkState`1(T[] mark);
    [CompilerGeneratedAttribute]
public T[] get_Mark();
    [CompilerGeneratedAttribute]
private void set_Mark(T[] value);
    [CompilerGeneratedAttribute]
public int get_Matched();
    [CompilerGeneratedAttribute]
public void set_Matched(int value);
}
public class SuperSocket.ClientEngine.SecurityOption : object {
    [CompilerGeneratedAttribute]
private bool <EnabledSslProtocols>k__BackingField;
    public bool EnabledSslProtocols { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnabledSslProtocols();
    [CompilerGeneratedAttribute]
public void set_EnabledSslProtocols(bool value);
}
public class SuperSocket.ClientEngine.SslStreamTcpSession : TcpClientSession {
    private SslStream m_SslStream;
    protected virtual void SocketEventArgsCompleted(object sender, SocketAsyncEventArgs e);
    protected virtual void OnGetSocket(SocketAsyncEventArgs e);
    private void OnSslStreamConnected(SslStream sslStream);
    private void OnAuthenticated(IAsyncResult result);
    private void OnDataRead(IAsyncResult result);
    private void BeginRead();
    private void StartRead();
    protected virtual bool IsIgnorableException(Exception e);
    protected virtual void SendInternal(PosList`1<ArraySegment`1<byte>> items);
    private void OnWriteComplete(IAsyncResult result);
    public virtual void Close();
}
public abstract class SuperSocket.ClientEngine.TcpClientSession : ClientSession {
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    private bool m_InConnecting;
    private SocketClientAccessPolicyProtocol m_ClientAccessPolicyProtocol;
    private IBatchQueue`1<ArraySegment`1<byte>> m_SendingQueue;
    private PosList`1<ArraySegment`1<byte>> m_SendingItems;
    private int m_IsSending;
    protected string HostName { get; private set; }
    public int ReceiveBufferSize { get; public set; }
    public SocketClientAccessPolicyProtocol ClientAccessPolicyProtocol { get; public set; }
    protected bool IsSending { get; }
    [CompilerGeneratedAttribute]
protected string get_HostName();
    [CompilerGeneratedAttribute]
private void set_HostName(string value);
    public virtual int get_ReceiveBufferSize();
    public virtual void set_ReceiveBufferSize(int value);
    protected virtual bool IsIgnorableException(Exception e);
    protected bool IsIgnorableSocketError(int errorCode);
    public SocketClientAccessPolicyProtocol get_ClientAccessPolicyProtocol();
    public void set_ClientAccessPolicyProtocol(SocketClientAccessPolicyProtocol value);
    protected abstract virtual void SocketEventArgsCompleted(object sender, SocketAsyncEventArgs e);
    public virtual void Connect(EndPoint remoteEndPoint);
    private void Proxy_Completed(object sender, ProxyEventArgs e);
    protected void ProcessConnect(Socket socket, object state, SocketAsyncEventArgs e, Exception exception);
    private string GetHostOfEndPoint(EndPoint endPoint);
    protected abstract virtual void OnGetSocket(SocketAsyncEventArgs e);
    protected bool EnsureSocketClosed();
    protected bool EnsureSocketClosed(Socket prevClient);
    private bool DetectConnected();
    private IBatchQueue`1<ArraySegment`1<byte>> GetSendingQueue();
    private PosList`1<ArraySegment`1<byte>> GetSendingItems();
    protected bool get_IsSending();
    public virtual bool TrySend(ArraySegment`1<byte> segment);
    public virtual bool TrySend(IList`1<ArraySegment`1<byte>> segments);
    private void DequeueSend();
    protected abstract virtual void SendInternal(PosList`1<ArraySegment`1<byte>> items);
    protected void OnSendingCompleted();
    public virtual void Close();
}
public class System.Collections.Concurrent.ConcurrentQueue`1 : object {
    private Queue`1<T> m_Queue;
    private object m_SyncRoot;
    public ConcurrentQueue`1(int capacity);
    public ConcurrentQueue`1(IEnumerable`1<T> collection);
    public void Enqueue(T item);
    public bool TryDequeue(T& item);
}
[DefaultMemberAttribute("Item")]
public class System.Collections.Specialized.NameValueCollection : List`1<KeyValuePair`2<string, string>> {
    public string Item { get; public set; }
    public string Item { get; public set; }
    public IEnumerable`1<string> AllKeys { get; }
    public NameValueCollection(int capacity);
    public string get_Item(int index);
    public void set_Item(int index, string value);
    public string get_Item(string name);
    public void set_Item(string name, string value);
    public void Add(string name, string value);
    public IEnumerable`1<string> get_AllKeys();
}
public class System.Net.NetworkStream : Stream {
    private Socket m_Socket;
    private SocketAsyncEventArgs m_SendEventArgs;
    private SocketAsyncEventArgs m_ReceiveEventArgs;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public NetworkStream(Socket socket);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    private void OnComplete(IAsyncResult result);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    private void OnReceiveEventCompleted(object sender, SocketAsyncEventArgs e);
    private void ProcessReceive(SocketAsyncEventArgs e);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    private void OnSendEventCompleted(object sender, SocketAsyncEventArgs e);
    private void ProcessSend(SocketAsyncEventArgs e);
    public virtual void EndWrite(IAsyncResult asyncResult);
}
public class System.Net.Security.SslStream : Stream {
    private TlsProtocolHandler m_TlsHandler;
    private Stream m_InnerStream;
    private Stream m_SecureStream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public bool CanTimeout { get; }
    public SslStream(Stream innerStream);
    public IAsyncResult BeginAuthenticateAsClient(string targetHost, AsyncCallback asyncCallback, object asyncState);
    private void StartAuthentication(object state);
    public void EndAuthenticateAsClient(IAsyncResult asyncResult);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    private void StartSend(object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void Close();
    public virtual int ReadByte();
    public virtual void WriteByte(byte value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual bool get_CanTimeout();
}
