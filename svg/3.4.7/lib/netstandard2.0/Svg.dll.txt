[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Svg.AttributeEventArgs : SVGArg {
    public string Attribute;
    public object Value;
}
public class Svg.ChildAddedEventArgs : SVGArg {
    public SvgElement NewChild;
    public SvgElement BeforeSibling;
}
public class Svg.ContentEventArgs : SVGArg {
    public string Content;
}
public static class Svg.CoordinateParser : object {
    private static bool MarkState(bool hasMode, CoordinateParserState& state);
    public static bool TryGetBool(Boolean& result, ReadOnlySpan`1<char> chars, CoordinateParserState& state);
    public static bool TryGetFloat(Single& result, ReadOnlySpan`1<char> chars, CoordinateParserState& state);
    private static bool IsCoordSeparator(char value);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
public class Svg.CoordinateParserState : ValueType {
    public NumState CurrNumState;
    public NumState NewNumState;
    public int CharsPosition;
    public int Position;
    public bool HasMore;
    public CoordinateParserState(ReadOnlySpan`1& chars);
}
[ExtensionAttribute]
internal static class Svg.Css.ExCssQuery : object {
    [ExtensionAttribute]
public static IEnumerable`1<SvgElement> QuerySelectorAll(SvgElement elem, ISelector selector, SvgElementFactory elementFactory);
    private static Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> GetFunc(CompoundSelector selector, ExSvgElementOps ops, Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> inFunc);
    private static Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> GetFunc(FirstChildSelector selector, ExSvgElementOps ops);
    private static Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> GetFunc(FirstTypeSelector selector, ExSvgElementOps ops);
    private static Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> GetFunc(LastTypeSelector selector, ExSvgElementOps ops);
    private static Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> GetFunc(LastChildSelector selector, ExSvgElementOps ops);
    private static Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> GetFunc(ListSelector listSelector, ExSvgElementOps ops, Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> inFunc);
    private static Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> GetFunc(PseudoClassSelector selector, ExSvgElementOps ops, Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> inFunc);
    private static Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> GetFunc(ComplexSelector selector, ExSvgElementOps ops, Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> inFunc);
    private static Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> GetFunc(ISelector selector, ExSvgElementOps ops, Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> inFunc);
    [ExtensionAttribute]
private static HashSet`1<T> ToHashSet(IEnumerable`1<T> enumarable);
    [ExtensionAttribute]
public static int GetSpecificity(ISelector selector);
}
internal class Svg.Css.ExSvgElementOps : object {
    private SvgElementFactory _elementFactory;
    public ExSvgElementOps(SvgElementFactory elementFactory);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> Type(string name);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> Universal();
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> Id(string id);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> Class(string clazz);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> AttributeExists(string name);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> AttributeExact(string name, string value);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> AttributeNotMatch(string name, string value);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> NthType(int step, int offset);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> NthLastType(int step, int offset);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> AttributeIncludes(string name, string value);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> AttributeDashMatch(string name, string value);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> AttributePrefixMatch(string name, string value);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> AttributeSuffixMatch(string name, string value);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> AttributeSubstring(string name, string value);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> FirstChild();
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> LastChild();
    [IteratorStateMachineAttribute("Svg.Css.ExSvgElementOps/<GetByIds>d__18`1")]
private IEnumerable`1<T> GetByIds(IList`1<T> items, IEnumerable`1<int> indices);
    [IteratorStateMachineAttribute("Svg.Css.ExSvgElementOps/<GetByTypes>d__19")]
private IEnumerable`1<SvgElement> GetByTypes(IEnumerable`1<SvgElement> items, int step, int offset);
    [IteratorStateMachineAttribute("Svg.Css.ExSvgElementOps/<GetByIdsReverse>d__20`1")]
private IEnumerable`1<T> GetByIdsReverse(IList`1<T> items, IEnumerable`1<int> indices);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> NthChild(int step, int offset);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> OnlyChild();
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> Empty();
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> Child();
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> Descendant();
    [IteratorStateMachineAttribute("Svg.Css.ExSvgElementOps/<Descendants>d__26")]
private IEnumerable`1<SvgElement> Descendants(SvgElement elem);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> Adjacent();
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> GeneralSibling();
    private IEnumerable`1<SvgElement> ElementsAfterSelf(SvgElement self);
    public sealed virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> NthLastChild(int step, int offset);
    public Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> Root();
    [CompilerGeneratedAttribute]
private IEnumerable`1<SvgElement> <Descendant>b__25_0(IEnumerable`1<SvgElement> nodes);
    [CompilerGeneratedAttribute]
private IEnumerable`1<SvgElement> <Adjacent>b__27_0(IEnumerable`1<SvgElement> nodes);
    [CompilerGeneratedAttribute]
private IEnumerable`1<SvgElement> <Adjacent>b__27_1(SvgElement n);
    [CompilerGeneratedAttribute]
private IEnumerable`1<SvgElement> <GeneralSibling>b__28_0(IEnumerable`1<SvgElement> nodes);
}
internal interface Svg.Css.IExCssSelectorOps`1 {
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> Type(string name);
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> Universal();
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> Id(string id);
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> Class(string clazz);
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> AttributeExists(string name);
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> AttributeExact(string name, string value);
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> AttributeIncludes(string name, string value);
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> AttributeDashMatch(string name, string value);
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> AttributePrefixMatch(string name, string value);
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> AttributeSuffixMatch(string name, string value);
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> AttributeSubstring(string name, string value);
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> FirstChild();
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> LastChild();
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> NthChild(int step, int offset);
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> OnlyChild();
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> Empty();
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> Child();
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> Descendant();
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> Adjacent();
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> GeneralSibling();
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> NthLastChild(int step, int offset);
    public abstract virtual Func`2<IEnumerable`1<SvgElement>, IEnumerable`1<SvgElement>> AttributeNotMatch(string name, string value);
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> NthType(int step, int offset);
    public abstract virtual Func`2<IEnumerable`1<T>, IEnumerable`1<T>> NthLastType(int step, int offset);
}
[TypeConverterAttribute("Svg.SvgColourInterpolationConverter")]
public enum Svg.DataTypes.SvgColourInterpolation : Enum {
    public int value__;
    public static SvgColourInterpolation Auto;
    public static SvgColourInterpolation SRGB;
    public static SvgColourInterpolation LinearRGB;
    public static SvgColourInterpolation Inherit;
}
[TypeConverterAttribute("Svg.SvgMarkerUnitsConverter")]
public enum Svg.DataTypes.SvgMarkerUnits : Enum {
    public int value__;
    public static SvgMarkerUnits StrokeWidth;
    public static SvgMarkerUnits UserSpaceOnUse;
}
public class Svg.DataTypes.SvgOrientConverter : TypeConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Svg.DataTypes.SvgPreserveAspectRatioConverter : TypeConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal enum Svg.DescriptorType : Enum {
    public int value__;
    public static DescriptorType Property;
    public static DescriptorType Event;
}
[ObsoleteAttribute("Use Svg.SvgSymbol.")]
[SvgElementAttribute("")]
public class Svg.Document_Structure.SvgSymbol : SvgSymbol {
}
[AttributeUsageAttribute("4")]
public class Svg.ElementFactoryAttribute : Attribute {
}
public abstract class Svg.EnumBaseConverter`1 : TypeConverter {
    [CompilerGeneratedAttribute]
private CaseHandling<T> <CaseHandlingMode>k__BackingField;
    public CaseHandling<T> CaseHandlingMode { get; }
    public EnumBaseConverter`1(CaseHandling<T> caseHandling);
    [CompilerGeneratedAttribute]
public CaseHandling<T> get_CaseHandlingMode();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Svg.Exceptions.SvgMemoryException : Exception {
    public SvgMemoryException(string message);
    public SvgMemoryException(string message, Exception inner);
    protected SvgMemoryException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class Svg.ExtensionMethods.UriExtensions : object {
    [ExtensionAttribute]
public static Uri ReplaceWithNullIfNone(Uri uri);
}
[ExtensionAttribute]
public static class Svg.Extensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<SvgElement> Descendants(IEnumerable`1<T> source);
    [IteratorStateMachineAttribute("Svg.Extensions/<GetAncestors>d__1`1")]
private static IEnumerable`1<SvgElement> GetAncestors(IEnumerable`1<T> source, bool self);
    [IteratorStateMachineAttribute("Svg.Extensions/<GetDescendants>d__2`1")]
private static IEnumerable`1<SvgElement> GetDescendants(IEnumerable`1<T> source, bool self);
}
[FlagsAttribute]
public enum Svg.ExternalType : Enum {
    public int value__;
    public static ExternalType None;
    public static ExternalType Local;
    public static ExternalType Remote;
}
[ExtensionAttribute]
public static class Svg.ExternalTypeExtensions : object {
    [ExtensionAttribute]
public static bool AllowsResolving(ExternalType externalType, Uri uri);
}
public enum Svg.FilterEffects.BlurType : Enum {
    public int value__;
    public static BlurType Both;
    public static BlurType HorizontalOnly;
    public static BlurType VerticalOnly;
}
[ExtensionAttribute]
internal static class Svg.FilterEffects.DictionaryExtensions : object {
    [ExtensionAttribute]
public static void Clear(Dictionary`2<TKey, TValue> self, Action`1<TValue> action);
    [ExtensionAttribute]
public static bool Remove(Dictionary`2<TKey, TValue> self, TKey key, Action`1<TValue> action);
}
[DefaultMemberAttribute("Item")]
public class Svg.FilterEffects.ImageBuffer : Dictionary`2<string, Bitmap> {
    private static string BufferKey;
    private RectangleF _bounds;
    private ISvgRenderer _renderer;
    private Action`1<ISvgRenderer> _renderMethod;
    private float _inflate;
    private Matrix _transform;
    public Matrix Transform { get; public set; }
    public Bitmap Buffer { get; }
    public Bitmap Item { get; public set; }
    public ImageBuffer(RectangleF bounds, float inflate, ISvgRenderer renderer, Action`1<ISvgRenderer> renderMethod);
    public Matrix get_Transform();
    public void set_Transform(Matrix value);
    public Bitmap get_Buffer();
    public Bitmap get_Item(string key);
    public void set_Item(string key, Bitmap value);
    public void Add(string key, Bitmap value);
    public bool ContainsKey(string key);
    public void Clear();
    public bool Remove(string key);
    public bool TryGetValue(string key, Bitmap& value);
    private Bitmap ProcessResult(string key, Bitmap curr);
    private string ProcessKey(string key);
    private Bitmap CreateSourceGraphic();
    private Bitmap CreateSourceAlpha();
    public sealed virtual void Dispose();
}
public interface Svg.FilterEffects.ISvgFilterable {
    public SvgFilter Filter { get; public set; }
    public abstract virtual SvgFilter get_Filter();
    public abstract virtual void set_Filter(SvgFilter value);
}
internal class Svg.FilterEffects.RawBitmap : object {
    private Bitmap _originBitmap;
    private BitmapData _bitmapData;
    private IntPtr _ptr;
    private int _bytes;
    private Byte[] _argbValues;
    public int Stride { get; }
    public int Width { get; }
    public int Height { get; }
    public Byte[] ArgbValues { get; public set; }
    public Bitmap Bitmap { get; }
    public RawBitmap(Bitmap originBitmap);
    public sealed virtual void Dispose();
    public int get_Stride();
    public int get_Width();
    public int get_Height();
    public Byte[] get_ArgbValues();
    public void set_ArgbValues(Byte[] value);
    public Bitmap get_Bitmap();
}
[SvgElementAttribute("feBlend")]
public class Svg.FilterEffects.SvgBlend : SvgFilterPrimitive {
    internal static List`1<Type> SvgBlendClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgBlendProperties;
    [SvgAttributeAttribute("mode")]
public SvgBlendMode Mode { get; public set; }
    [SvgAttributeAttribute("in2")]
public string Input2 { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgBlend();
    public SvgBlendMode get_Mode();
    public void set_Mode(SvgBlendMode value);
    public string get_Input2();
    public void set_Input2(string value);
    public virtual SvgElement DeepCopy();
    public virtual void Process(ImageBuffer buffer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgBlend/<GetProperties>d__16")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgBlendModeConverter")]
public enum Svg.FilterEffects.SvgBlendMode : Enum {
    public int value__;
    public static SvgBlendMode Normal;
    public static SvgBlendMode Multiply;
    public static SvgBlendMode Screen;
    public static SvgBlendMode Overlay;
    public static SvgBlendMode Darken;
    public static SvgBlendMode Lighten;
    public static SvgBlendMode ColorDodge;
    public static SvgBlendMode ColorBurn;
    public static SvgBlendMode HardLight;
    public static SvgBlendMode SoftLight;
    public static SvgBlendMode Difference;
    public static SvgBlendMode Exclusion;
    public static SvgBlendMode Hue;
    public static SvgBlendMode Saturation;
    public static SvgBlendMode Color;
    public static SvgBlendMode Luminosity;
}
[TypeConverterAttribute("Svg.SvgChannelSelectorConverter")]
public enum Svg.FilterEffects.SvgChannelSelector : Enum {
    public int value__;
    public static SvgChannelSelector R;
    public static SvgChannelSelector G;
    public static SvgChannelSelector B;
    public static SvgChannelSelector A;
}
[SvgElementAttribute("feColorMatrix")]
public class Svg.FilterEffects.SvgColourMatrix : SvgFilterPrimitive {
    private SvgColourMatrixType _type;
    private string _values;
    internal static List`1<Type> SvgColourMatrixClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgColourMatrixProperties;
    [SvgAttributeAttribute("type")]
public SvgColourMatrixType Type { get; public set; }
    [SvgAttributeAttribute("values")]
public string Values { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgColourMatrix();
    public SvgColourMatrixType get_Type();
    public void set_Type(SvgColourMatrixType value);
    public string get_Values();
    public void set_Values(string value);
    public virtual SvgElement DeepCopy();
    public virtual SvgElement DeepCopy();
    public virtual void Process(ImageBuffer buffer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgColourMatrix/<GetProperties>d__19")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgColourMatrixTypeConverter")]
public enum Svg.FilterEffects.SvgColourMatrixType : Enum {
    public int value__;
    public static SvgColourMatrixType Matrix;
    public static SvgColourMatrixType Saturate;
    public static SvgColourMatrixType HueRotate;
    public static SvgColourMatrixType LuminanceToAlpha;
}
[SvgElementAttribute("feComponentTransfer")]
public class Svg.FilterEffects.SvgComponentTransfer : SvgFilterPrimitive {
    internal static List`1<Type> SvgComponentTransferClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgComponentTransferProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgComponentTransfer();
    public virtual SvgElement DeepCopy();
    public virtual void Process(ImageBuffer buffer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgComponentTransfer/<GetProperties>d__10")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public abstract class Svg.FilterEffects.SvgComponentTransferFunction : SvgElement {
    internal static List`1<Type> SvgComponentTransferFunctionClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgComponentTransferFunctionProperties;
    [SvgAttributeAttribute("type")]
public SvgComponentTransferType Type { get; public set; }
    [SvgAttributeAttribute("tableValues")]
public SvgNumberCollection TableValues { get; public set; }
    [SvgAttributeAttribute("slope")]
public float Slope { get; public set; }
    [SvgAttributeAttribute("intercept")]
public float Intercept { get; public set; }
    [SvgAttributeAttribute("amplitude")]
public float Amplitude { get; public set; }
    [SvgAttributeAttribute("exponent")]
public float Exponent { get; public set; }
    [SvgAttributeAttribute("offset")]
public float Offset { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgComponentTransferFunction();
    public SvgComponentTransferType get_Type();
    public void set_Type(SvgComponentTransferType value);
    public SvgNumberCollection get_TableValues();
    public void set_TableValues(SvgNumberCollection value);
    public float get_Slope();
    public void set_Slope(float value);
    public float get_Intercept();
    public void set_Intercept(float value);
    public float get_Amplitude();
    public void set_Amplitude(float value);
    public float get_Exponent();
    public void set_Exponent(float value);
    public float get_Offset();
    public void set_Offset(float value);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgComponentTransferFunction/<GetProperties>d__29")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgComponentTransferTypeConverter")]
public enum Svg.FilterEffects.SvgComponentTransferType : Enum {
    public int value__;
    public static SvgComponentTransferType Identity;
    public static SvgComponentTransferType Table;
    public static SvgComponentTransferType Discrete;
    public static SvgComponentTransferType Linear;
    public static SvgComponentTransferType Gamma;
}
[SvgElementAttribute("feComposite")]
public class Svg.FilterEffects.SvgComposite : SvgFilterPrimitive {
    internal static List`1<Type> SvgCompositeClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgCompositeProperties;
    [SvgAttributeAttribute("operator")]
public SvgCompositeOperator Operator { get; public set; }
    [SvgAttributeAttribute("k1")]
public float K1 { get; public set; }
    [SvgAttributeAttribute("k2")]
public float K2 { get; public set; }
    [SvgAttributeAttribute("k3")]
public float K3 { get; public set; }
    [SvgAttributeAttribute("k4")]
public float K4 { get; public set; }
    [SvgAttributeAttribute("in2")]
public string Input2 { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgComposite();
    public SvgCompositeOperator get_Operator();
    public void set_Operator(SvgCompositeOperator value);
    public float get_K1();
    public void set_K1(float value);
    public float get_K2();
    public void set_K2(float value);
    public float get_K3();
    public void set_K3(float value);
    public float get_K4();
    public void set_K4(float value);
    public string get_Input2();
    public void set_Input2(string value);
    public virtual SvgElement DeepCopy();
    public virtual void Process(ImageBuffer buffer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgComposite/<GetProperties>d__28")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgCompositeOperatorConverter")]
public enum Svg.FilterEffects.SvgCompositeOperator : Enum {
    public int value__;
    public static SvgCompositeOperator Over;
    public static SvgCompositeOperator In;
    public static SvgCompositeOperator Out;
    public static SvgCompositeOperator Atop;
    public static SvgCompositeOperator Xor;
    public static SvgCompositeOperator Arithmetic;
}
[SvgElementAttribute("feConvolveMatrix")]
public class Svg.FilterEffects.SvgConvolveMatrix : SvgFilterPrimitive {
    internal static List`1<Type> SvgConvolveMatrixClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgConvolveMatrixProperties;
    [SvgAttributeAttribute("order")]
public SvgNumberCollection Order { get; public set; }
    [SvgAttributeAttribute("kernelMatrix")]
public SvgNumberCollection KernelMatrix { get; public set; }
    [SvgAttributeAttribute("divisor")]
public float Divisor { get; public set; }
    [SvgAttributeAttribute("bias")]
public float Bias { get; public set; }
    [SvgAttributeAttribute("targetX")]
public int TargetX { get; public set; }
    [SvgAttributeAttribute("targetY")]
public int TargetY { get; public set; }
    [SvgAttributeAttribute("edgeMode")]
public SvgEdgeMode EdgeMode { get; public set; }
    [SvgAttributeAttribute("kernelUnitLength")]
public SvgNumberCollection KernelUnitLength { get; public set; }
    [SvgAttributeAttribute("preserveAlpha")]
public bool PreserveAlpha { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgConvolveMatrix();
    public SvgNumberCollection get_Order();
    public void set_Order(SvgNumberCollection value);
    public SvgNumberCollection get_KernelMatrix();
    public void set_KernelMatrix(SvgNumberCollection value);
    public float get_Divisor();
    public void set_Divisor(float value);
    public float get_Bias();
    public void set_Bias(float value);
    public int get_TargetX();
    public void set_TargetX(int value);
    public int get_TargetY();
    public void set_TargetY(int value);
    public SvgEdgeMode get_EdgeMode();
    public void set_EdgeMode(SvgEdgeMode value);
    public SvgNumberCollection get_KernelUnitLength();
    public void set_KernelUnitLength(SvgNumberCollection value);
    public bool get_PreserveAlpha();
    public void set_PreserveAlpha(bool value);
    public virtual SvgElement DeepCopy();
    public virtual void Process(ImageBuffer buffer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgConvolveMatrix/<GetProperties>d__37")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("feDiffuseLighting")]
public class Svg.FilterEffects.SvgDiffuseLighting : SvgFilterPrimitive {
    internal static List`1<Type> SvgDiffuseLightingClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgDiffuseLightingProperties;
    [SvgAttributeAttribute("surfaceScale")]
public float SurfaceScale { get; public set; }
    [SvgAttributeAttribute("diffuseConstant")]
public float DiffuseConstant { get; public set; }
    [SvgAttributeAttribute("kernelUnitLength")]
public SvgNumberCollection KernelUnitLength { get; public set; }
    [SvgAttributeAttribute("lighting-color")]
[TypeConverterAttribute("Svg.SvgPaintServerFactory")]
public SvgPaintServer LightingColor { get; public set; }
    public SvgElement LightSource { get; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgDiffuseLighting();
    public float get_SurfaceScale();
    public void set_SurfaceScale(float value);
    public float get_DiffuseConstant();
    public void set_DiffuseConstant(float value);
    public SvgNumberCollection get_KernelUnitLength();
    public void set_KernelUnitLength(SvgNumberCollection value);
    public SvgPaintServer get_LightingColor();
    public void set_LightingColor(SvgPaintServer value);
    public SvgElement get_LightSource();
    public virtual SvgElement DeepCopy();
    public virtual void Process(ImageBuffer buffer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgDiffuseLighting/<GetProperties>d__24")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("feDisplacementMap")]
public class Svg.FilterEffects.SvgDisplacementMap : SvgFilterPrimitive {
    internal static List`1<Type> SvgDisplacementMapClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgDisplacementMapProperties;
    [SvgAttributeAttribute("scale")]
public float Scale { get; public set; }
    [SvgAttributeAttribute("xChannelSelector")]
public SvgChannelSelector XChannelSelector { get; public set; }
    [SvgAttributeAttribute("yChannelSelector")]
public SvgChannelSelector YChannelSelector { get; public set; }
    [SvgAttributeAttribute("in2")]
public string Input2 { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgDisplacementMap();
    public float get_Scale();
    public void set_Scale(float value);
    public SvgChannelSelector get_XChannelSelector();
    public void set_XChannelSelector(SvgChannelSelector value);
    public SvgChannelSelector get_YChannelSelector();
    public void set_YChannelSelector(SvgChannelSelector value);
    public string get_Input2();
    public void set_Input2(string value);
    public virtual SvgElement DeepCopy();
    public virtual void Process(ImageBuffer buffer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgDisplacementMap/<GetProperties>d__22")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("feDistantLight")]
public class Svg.FilterEffects.SvgDistantLight : SvgElement {
    internal static List`1<Type> SvgDistantLightClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgDistantLightProperties;
    [SvgAttributeAttribute("azimuth")]
public float Azimuth { get; public set; }
    [SvgAttributeAttribute("elevation")]
public float Elevation { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgDistantLight();
    public float get_Azimuth();
    public void set_Azimuth(float value);
    public float get_Elevation();
    public void set_Elevation(float value);
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgDistantLight/<GetProperties>d__15")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgEdgeModeConverter")]
public enum Svg.FilterEffects.SvgEdgeMode : Enum {
    public int value__;
    public static SvgEdgeMode Duplicate;
    public static SvgEdgeMode Wrap;
    public static SvgEdgeMode None;
}
[SvgElementAttribute("filter")]
public class Svg.FilterEffects.SvgFilter : SvgElement {
    internal static List`1<Type> SvgFilterClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgFilterProperties;
    [SvgAttributeAttribute("filterUnits")]
public SvgCoordinateUnits FilterUnits { get; public set; }
    [SvgAttributeAttribute("primitiveUnits")]
public SvgCoordinateUnits PrimitiveUnits { get; public set; }
    [SvgAttributeAttribute("x")]
public SvgUnit X { get; public set; }
    [SvgAttributeAttribute("y")]
public SvgUnit Y { get; public set; }
    [SvgAttributeAttribute("width")]
public SvgUnit Width { get; public set; }
    [SvgAttributeAttribute("height")]
public SvgUnit Height { get; public set; }
    [SvgAttributeAttribute("href", "http://www.w3.org/1999/xlink")]
public Uri Href { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgFilter();
    public SvgCoordinateUnits get_FilterUnits();
    public void set_FilterUnits(SvgCoordinateUnits value);
    public SvgCoordinateUnits get_PrimitiveUnits();
    public void set_PrimitiveUnits(SvgCoordinateUnits value);
    public SvgUnit get_X();
    public void set_X(SvgUnit value);
    public SvgUnit get_Y();
    public void set_Y(SvgUnit value);
    public SvgUnit get_Width();
    public void set_Width(SvgUnit value);
    public SvgUnit get_Height();
    public void set_Height(SvgUnit value);
    public Uri get_Href();
    public void set_Href(Uri value);
    public virtual SvgElement DeepCopy();
    protected virtual void Render(ISvgRenderer renderer);
    private Matrix GetTransform(SvgVisualElement element);
    private RectangleF GetPathBounds(SvgVisualElement element, ISvgRenderer renderer, Matrix transform);
    public void ApplyFilter(SvgVisualElement element, ISvgRenderer renderer, Action`1<ISvgRenderer> renderMethod);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgFilter/<GetProperties>d__34")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public abstract class Svg.FilterEffects.SvgFilterPrimitive : SvgElement {
    public static string SourceGraphic;
    public static string SourceAlpha;
    public static string BackgroundImage;
    public static string BackgroundAlpha;
    public static string FillPaint;
    public static string StrokePaint;
    internal static List`1<Type> SvgFilterPrimitiveClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgFilterPrimitiveProperties;
    [SvgAttributeAttribute("x")]
public SvgUnit X { get; public set; }
    [SvgAttributeAttribute("y")]
public SvgUnit Y { get; public set; }
    [SvgAttributeAttribute("width")]
public SvgUnit Width { get; public set; }
    [SvgAttributeAttribute("height")]
public SvgUnit Height { get; public set; }
    [SvgAttributeAttribute("in")]
public string Input { get; public set; }
    [SvgAttributeAttribute("result")]
public string Result { get; public set; }
    protected SvgFilter Owner { get; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgFilterPrimitive();
    public SvgUnit get_X();
    public void set_X(SvgUnit value);
    public SvgUnit get_Y();
    public void set_Y(SvgUnit value);
    public SvgUnit get_Width();
    public void set_Width(SvgUnit value);
    public SvgUnit get_Height();
    public void set_Height(SvgUnit value);
    public string get_Input();
    public void set_Input(string value);
    public string get_Result();
    public void set_Result(string value);
    protected SvgFilter get_Owner();
    public abstract virtual void Process(ImageBuffer buffer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgFilterPrimitive/<GetProperties>d__35")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("feFlood")]
public class Svg.FilterEffects.SvgFlood : SvgFilterPrimitive {
    internal static List`1<Type> SvgFloodClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgFloodProperties;
    [SvgAttributeAttribute("flood-color")]
public SvgPaintServer FloodColor { get; public set; }
    [SvgAttributeAttribute("flood-opacity")]
public float FloodOpacity { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgFlood();
    public virtual SvgPaintServer get_FloodColor();
    public virtual void set_FloodColor(SvgPaintServer value);
    public virtual float get_FloodOpacity();
    public virtual void set_FloodOpacity(float value);
    public virtual SvgElement DeepCopy();
    public virtual void Process(ImageBuffer buffer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgFlood/<GetProperties>d__16")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("feFuncA")]
public class Svg.FilterEffects.SvgFuncA : SvgComponentTransferFunction {
    internal static List`1<Type> SvgFuncAClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgFuncAProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgFuncA();
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgFuncA/<GetProperties>d__9")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("feFuncB")]
public class Svg.FilterEffects.SvgFuncB : SvgComponentTransferFunction {
    internal static List`1<Type> SvgFuncBClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgFuncBProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgFuncB();
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgFuncB/<GetProperties>d__9")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("feFuncG")]
public class Svg.FilterEffects.SvgFuncG : SvgComponentTransferFunction {
    internal static List`1<Type> SvgFuncGClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgFuncGProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgFuncG();
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgFuncG/<GetProperties>d__9")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("feFuncR")]
public class Svg.FilterEffects.SvgFuncR : SvgComponentTransferFunction {
    internal static List`1<Type> SvgFuncRClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgFuncRProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgFuncR();
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgFuncR/<GetProperties>d__9")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("feGaussianBlur")]
public class Svg.FilterEffects.SvgGaussianBlur : SvgFilterPrimitive {
    private float _stdDeviationX;
    private float _stdDeviationY;
    private bool _isPrecalculated;
    private Int32[] _kernel;
    private int _kernelSum;
    private Int32[0...,0...] _multable;
    internal static List`1<Type> SvgGaussianBlurClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgGaussianBlurProperties;
    [SvgAttributeAttribute("stdDeviation")]
public SvgNumberCollection StdDeviation { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgGaussianBlur();
    public SvgNumberCollection get_StdDeviation();
    public void set_StdDeviation(SvgNumberCollection value);
    public virtual SvgElement DeepCopy();
    private void PreCalculate();
    public Bitmap Apply(Image inputImage);
    public virtual void Process(ImageBuffer buffer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgGaussianBlur/<GetProperties>d__21")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("feImage")]
public class Svg.FilterEffects.SvgImage : SvgFilterPrimitive {
    internal static List`1<Type> SvgImageClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgImageProperties;
    [SvgAttributeAttribute("href", "http://www.w3.org/1999/xlink")]
public string Href { get; public set; }
    [SvgAttributeAttribute("preserveAspectRatio")]
public SvgAspectRatio AspectRatio { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgImage();
    public virtual string get_Href();
    public virtual void set_Href(string value);
    public SvgAspectRatio get_AspectRatio();
    public void set_AspectRatio(SvgAspectRatio value);
    public virtual SvgElement DeepCopy();
    public virtual void Process(ImageBuffer buffer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgImage/<GetProperties>d__16")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("feMerge")]
public class Svg.FilterEffects.SvgMerge : SvgFilterPrimitive {
    internal static List`1<Type> SvgMergeClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgMergeProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgMerge();
    public virtual SvgElement DeepCopy();
    public virtual void Process(ImageBuffer buffer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgMerge/<GetProperties>d__10")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("feMergeNode")]
public class Svg.FilterEffects.SvgMergeNode : SvgElement {
    internal static List`1<Type> SvgMergeNodeClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgMergeNodeProperties;
    [SvgAttributeAttribute("in")]
public string Input { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgMergeNode();
    public string get_Input();
    public void set_Input(string value);
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgMergeNode/<GetProperties>d__12")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("feMorphology")]
public class Svg.FilterEffects.SvgMorphology : SvgFilterPrimitive {
    internal static List`1<Type> SvgMorphologyClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgMorphologyProperties;
    [SvgAttributeAttribute("operator")]
public SvgMorphologyOperator Operator { get; public set; }
    [SvgAttributeAttribute("radius")]
public SvgNumberCollection Radius { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgMorphology();
    public SvgMorphologyOperator get_Operator();
    public void set_Operator(SvgMorphologyOperator value);
    public SvgNumberCollection get_Radius();
    public void set_Radius(SvgNumberCollection value);
    public virtual SvgElement DeepCopy();
    public virtual void Process(ImageBuffer buffer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgMorphology/<GetProperties>d__16")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgMorphologyOperatorConverter")]
public enum Svg.FilterEffects.SvgMorphologyOperator : Enum {
    public int value__;
    public static SvgMorphologyOperator Erode;
    public static SvgMorphologyOperator Dilate;
}
[SvgElementAttribute("feOffset")]
public class Svg.FilterEffects.SvgOffset : SvgFilterPrimitive {
    private SvgUnit _dx;
    private SvgUnit _dy;
    internal static List`1<Type> SvgOffsetClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgOffsetProperties;
    [SvgAttributeAttribute("dx")]
public SvgUnit Dx { get; public set; }
    [SvgAttributeAttribute("dy")]
public SvgUnit Dy { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgOffset();
    public SvgUnit get_Dx();
    public void set_Dx(SvgUnit value);
    public SvgUnit get_Dy();
    public void set_Dy(SvgUnit value);
    public virtual SvgElement DeepCopy();
    public virtual void Process(ImageBuffer buffer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgOffset/<GetProperties>d__18")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("fePointLight")]
public class Svg.FilterEffects.SvgPointLight : SvgElement {
    internal static List`1<Type> SvgPointLightClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgPointLightProperties;
    [SvgAttributeAttribute("x")]
public float X { get; public set; }
    [SvgAttributeAttribute("y")]
public float Y { get; public set; }
    [SvgAttributeAttribute("z")]
public float Z { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgPointLight();
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    public float get_Z();
    public void set_Z(float value);
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgPointLight/<GetProperties>d__18")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("feSpecularLighting")]
public class Svg.FilterEffects.SvgSpecularLighting : SvgFilterPrimitive {
    internal static List`1<Type> SvgSpecularLightingClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgSpecularLightingProperties;
    [SvgAttributeAttribute("surfaceScale")]
public float SurfaceScale { get; public set; }
    [SvgAttributeAttribute("specularConstant")]
public float SpecularConstant { get; public set; }
    [SvgAttributeAttribute("specularExponent")]
public float SpecularExponent { get; public set; }
    [SvgAttributeAttribute("kernelUnitLength")]
public SvgNumberCollection KernelUnitLength { get; public set; }
    [SvgAttributeAttribute("lighting-color")]
[TypeConverterAttribute("Svg.SvgPaintServerFactory")]
public SvgPaintServer LightingColor { get; public set; }
    public SvgElement LightSource { get; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgSpecularLighting();
    public float get_SurfaceScale();
    public void set_SurfaceScale(float value);
    public float get_SpecularConstant();
    public void set_SpecularConstant(float value);
    public float get_SpecularExponent();
    public void set_SpecularExponent(float value);
    public SvgNumberCollection get_KernelUnitLength();
    public void set_KernelUnitLength(SvgNumberCollection value);
    public SvgPaintServer get_LightingColor();
    public void set_LightingColor(SvgPaintServer value);
    public SvgElement get_LightSource();
    public virtual SvgElement DeepCopy();
    public virtual void Process(ImageBuffer buffer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgSpecularLighting/<GetProperties>d__27")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("feSpotLight")]
public class Svg.FilterEffects.SvgSpotLight : SvgElement {
    internal static List`1<Type> SvgSpotLightClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgSpotLightProperties;
    [SvgAttributeAttribute("x")]
public float X { get; public set; }
    [SvgAttributeAttribute("y")]
public float Y { get; public set; }
    [SvgAttributeAttribute("z")]
public float Z { get; public set; }
    [SvgAttributeAttribute("pointsAtX")]
public float PointsAtX { get; public set; }
    [SvgAttributeAttribute("pointsAtY")]
public float PointsAtY { get; public set; }
    [SvgAttributeAttribute("pointsAtZ")]
public float PointsAtZ { get; public set; }
    [SvgAttributeAttribute("specularExponent")]
public float SpecularExponent { get; public set; }
    [SvgAttributeAttribute("limitingConeAngle")]
public float LimitingConeAngle { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgSpotLight();
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    public float get_Z();
    public void set_Z(float value);
    public float get_PointsAtX();
    public void set_PointsAtX(float value);
    public float get_PointsAtY();
    public void set_PointsAtY(float value);
    public float get_PointsAtZ();
    public void set_PointsAtZ(float value);
    public float get_SpecularExponent();
    public void set_SpecularExponent(float value);
    public float get_LimitingConeAngle();
    public void set_LimitingConeAngle(float value);
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgSpotLight/<GetProperties>d__33")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgStitchTypeConverter")]
public enum Svg.FilterEffects.SvgStitchType : Enum {
    public int value__;
    public static SvgStitchType Stitch;
    public static SvgStitchType NoStitch;
}
[SvgElementAttribute("feTile")]
public class Svg.FilterEffects.SvgTile : SvgFilterPrimitive {
    internal static List`1<Type> SvgTileClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgTileProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgTile();
    public virtual SvgElement DeepCopy();
    public virtual void Process(ImageBuffer buffer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgTile/<GetProperties>d__10")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("feTurbulence")]
public class Svg.FilterEffects.SvgTurbulence : SvgFilterPrimitive {
    internal static List`1<Type> SvgTurbulenceClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgTurbulenceProperties;
    [SvgAttributeAttribute("baseFrequency")]
public SvgNumberCollection BaseFrequency { get; public set; }
    [SvgAttributeAttribute("numOctaves")]
public int NumOctaves { get; public set; }
    [SvgAttributeAttribute("seed")]
public float Seed { get; public set; }
    [SvgAttributeAttribute("stitchTiles")]
public SvgStitchType StitchTiles { get; public set; }
    [SvgAttributeAttribute("type")]
public SvgTurbulenceType Type { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgTurbulence();
    public SvgNumberCollection get_BaseFrequency();
    public void set_BaseFrequency(SvgNumberCollection value);
    public int get_NumOctaves();
    public void set_NumOctaves(int value);
    public float get_Seed();
    public void set_Seed(float value);
    public SvgStitchType get_StitchTiles();
    public void set_StitchTiles(SvgStitchType value);
    public SvgTurbulenceType get_Type();
    public void set_Type(SvgTurbulenceType value);
    public virtual SvgElement DeepCopy();
    public virtual void Process(ImageBuffer buffer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.FilterEffects.SvgTurbulence/<GetProperties>d__25")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgTurbulenceTypeConverter")]
public enum Svg.FilterEffects.SvgTurbulenceType : Enum {
    public int value__;
    public static SvgTurbulenceType FractalNoise;
    public static SvgTurbulenceType Turbulence;
}
public class Svg.GdiFontDefn : object {
    private Font _font;
    private float _ppi;
    public float Size { get; }
    public float SizeInPoints { get; }
    public GdiFontDefn(Font font, float ppi);
    public sealed virtual float get_Size();
    public sealed virtual float get_SizeInPoints();
    public sealed virtual void AddStringToPath(ISvgRenderer renderer, GraphicsPath path, string text, PointF location);
    public sealed virtual float Ascent(ISvgRenderer renderer);
    public sealed virtual IList`1<RectangleF> MeasureCharacters(ISvgRenderer renderer, string text);
    public sealed virtual SizeF MeasureString(ISvgRenderer renderer, string text);
    private Graphics GetGraphics(ISvgRenderer renderer);
    public sealed virtual void Dispose();
}
internal class Svg.GenericBoundable : object {
    private RectangleF _rect;
    public PointF Location { get; }
    public SizeF Size { get; }
    public RectangleF Bounds { get; }
    public GenericBoundable(RectangleF rect);
    public GenericBoundable(float x, float y, float width, float height);
    public sealed virtual PointF get_Location();
    public sealed virtual SizeF get_Size();
    public sealed virtual RectangleF get_Bounds();
}
internal static class Svg.Helpers.StringParser : object {
    private static CultureInfo Format;
    private static StringParser();
    public static float ToFloat(ReadOnlySpan`1<char> value);
    public static float ToFloatAny(ReadOnlySpan`1<char> value);
    public static double ToDouble(ReadOnlySpan`1<char> value);
    public static int ToInt(ReadOnlySpan`1<char> value);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
internal class Svg.Helpers.StringPart : ValueType {
    [CompilerGeneratedAttribute]
private ReadOnlySpan`1<char> <Value>k__BackingField;
    public ReadOnlySpan`1<char> Value { get; }
    public StringPart(ReadOnlySpan`1<char> value);
    [CompilerGeneratedAttribute]
public ReadOnlySpan`1<char> get_Value();
    public static ReadOnlySpan`1<char> op_Implicit(StringPart part);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class Svg.Helpers.StringSplitEnumerator : ValueType {
    private ReadOnlySpan`1<char> _str;
    private ReadOnlySpan`1<char> _chars;
    [CompilerGeneratedAttribute]
private StringPart <Current>k__BackingField;
    public StringPart Current { get; private set; }
    public StringSplitEnumerator(ReadOnlySpan`1<char> str, ReadOnlySpan`1<char> chars);
    public StringSplitEnumerator GetEnumerator();
    public bool MoveNext();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public StringPart get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(StringPart value);
}
public interface Svg.IFontDefn {
    public float Size { get; }
    public float SizeInPoints { get; }
    public abstract virtual float get_Size();
    public abstract virtual float get_SizeInPoints();
    public abstract virtual void AddStringToPath(ISvgRenderer renderer, GraphicsPath path, string text, PointF location);
    public abstract virtual float Ascent(ISvgRenderer renderer);
    public abstract virtual IList`1<RectangleF> MeasureCharacters(ISvgRenderer renderer, string text);
    public abstract virtual SizeF MeasureString(ISvgRenderer renderer, string text);
}
public interface Svg.IGraphicsProvider {
    public abstract virtual Graphics GetGraphics();
}
public interface Svg.ISvgBoundable {
    public PointF Location { get; }
    public SizeF Size { get; }
    public RectangleF Bounds { get; }
    public abstract virtual PointF get_Location();
    public abstract virtual SizeF get_Size();
    public abstract virtual RectangleF get_Bounds();
}
public interface Svg.ISvgClipable {
    public Uri ClipPath { get; public set; }
    public SvgClipRule ClipRule { get; public set; }
    public abstract virtual Uri get_ClipPath();
    public abstract virtual void set_ClipPath(Uri value);
    public abstract virtual SvgClipRule get_ClipRule();
    public abstract virtual void set_ClipRule(SvgClipRule value);
    public abstract virtual void SetClip(ISvgRenderer renderer);
    public abstract virtual void ResetClip(ISvgRenderer renderer);
}
public interface Svg.ISvgDescriptiveElement {
}
internal interface Svg.ISvgElement {
    public SvgElement Parent { get; }
    public SvgElementCollection Children { get; }
    public IList`1<ISvgNode> Nodes { get; }
    public abstract virtual SvgElement get_Parent();
    public abstract virtual SvgElementCollection get_Children();
    public abstract virtual IList`1<ISvgNode> get_Nodes();
    public abstract virtual void Render(ISvgRenderer renderer);
}
public interface Svg.ISvgEventCaller {
    public abstract virtual void RegisterAction(string rpcID, Action action);
    public abstract virtual void RegisterAction(string rpcID, Action`1<T1> action);
    public abstract virtual void RegisterAction(string rpcID, Action`2<T1, T2> action);
    public abstract virtual void RegisterAction(string rpcID, Action`3<T1, T2, T3> action);
    public abstract virtual void RegisterAction(string rpcID, Action`4<T1, T2, T3, T4> action);
    public abstract virtual void RegisterAction(string rpcID, Action`5<T1, T2, T3, T4, T5> action);
    public abstract virtual void RegisterAction(string rpcID, Action`6<T1, T2, T3, T4, T5, T6> action);
    public abstract virtual void RegisterAction(string rpcID, Action`7<T1, T2, T3, T4, T5, T6, T7> action);
    public abstract virtual void RegisterAction(string rpcID, Action`8<T1, T2, T3, T4, T5, T6, T7, T8> action);
    public abstract virtual void UnregisterAction(string rpcID);
}
public interface Svg.ISvgNode {
    public string Content { get; }
    public abstract virtual string get_Content();
    public abstract virtual ISvgNode DeepCopy();
}
internal interface Svg.ISvgPropertyDescriptor {
    public DescriptorType DescriptorType { get; }
    public string AttributeName { get; }
    public string AttributeNamespace { get; }
    public TypeConverter Converter { get; }
    public Type Type { get; }
    public abstract virtual DescriptorType get_DescriptorType();
    public abstract virtual string get_AttributeName();
    public abstract virtual string get_AttributeNamespace();
    public abstract virtual TypeConverter get_Converter();
    public abstract virtual Type get_Type();
    public abstract virtual object GetValue(object component);
    public abstract virtual void SetValue(object component, ITypeDescriptorContext context, CultureInfo culture, object value);
}
public interface Svg.ISvgRenderer {
    public float DpiY { get; }
    public SmoothingMode SmoothingMode { get; public set; }
    public Matrix Transform { get; public set; }
    public abstract virtual float get_DpiY();
    public abstract virtual void DrawImage(Image image, RectangleF destRect, RectangleF srcRect, GraphicsUnit graphicsUnit);
    public abstract virtual void DrawImageUnscaled(Image image, Point location);
    public abstract virtual void DrawPath(Pen pen, GraphicsPath path);
    public abstract virtual void FillPath(Brush brush, GraphicsPath path);
    public abstract virtual ISvgBoundable GetBoundable();
    public abstract virtual Region GetClip();
    public abstract virtual ISvgBoundable PopBoundable();
    public abstract virtual void RotateTransform(float fAngle, MatrixOrder order);
    public abstract virtual void ScaleTransform(float sx, float sy, MatrixOrder order);
    public abstract virtual void SetBoundable(ISvgBoundable boundable);
    public abstract virtual void SetClip(Region region, CombineMode combineMode);
    public abstract virtual SmoothingMode get_SmoothingMode();
    public abstract virtual void set_SmoothingMode(SmoothingMode value);
    public abstract virtual Matrix get_Transform();
    public abstract virtual void set_Transform(Matrix value);
    public abstract virtual void TranslateTransform(float dx, float dy, MatrixOrder order);
    public abstract virtual void DrawImage(Image image, RectangleF destRect, RectangleF srcRect, GraphicsUnit graphicsUnit, float opacity);
}
public interface Svg.ISvgStylable {
    public SvgPaintServer Fill { get; public set; }
    public SvgPaintServer Stroke { get; public set; }
    public SvgFillRule FillRule { get; public set; }
    public float Opacity { get; public set; }
    public float FillOpacity { get; public set; }
    public float StrokeOpacity { get; public set; }
    public SvgUnit StrokeWidth { get; public set; }
    public SvgStrokeLineCap StrokeLineCap { get; public set; }
    public SvgStrokeLineJoin StrokeLineJoin { get; public set; }
    public float StrokeMiterLimit { get; public set; }
    public SvgUnitCollection StrokeDashArray { get; public set; }
    public SvgUnit StrokeDashOffset { get; public set; }
    public abstract virtual SvgPaintServer get_Fill();
    public abstract virtual void set_Fill(SvgPaintServer value);
    public abstract virtual SvgPaintServer get_Stroke();
    public abstract virtual void set_Stroke(SvgPaintServer value);
    public abstract virtual SvgFillRule get_FillRule();
    public abstract virtual void set_FillRule(SvgFillRule value);
    public abstract virtual float get_Opacity();
    public abstract virtual void set_Opacity(float value);
    public abstract virtual float get_FillOpacity();
    public abstract virtual void set_FillOpacity(float value);
    public abstract virtual float get_StrokeOpacity();
    public abstract virtual void set_StrokeOpacity(float value);
    public abstract virtual SvgUnit get_StrokeWidth();
    public abstract virtual void set_StrokeWidth(SvgUnit value);
    public abstract virtual SvgStrokeLineCap get_StrokeLineCap();
    public abstract virtual void set_StrokeLineCap(SvgStrokeLineCap value);
    public abstract virtual SvgStrokeLineJoin get_StrokeLineJoin();
    public abstract virtual void set_StrokeLineJoin(SvgStrokeLineJoin value);
    public abstract virtual float get_StrokeMiterLimit();
    public abstract virtual void set_StrokeMiterLimit(float value);
    public abstract virtual SvgUnitCollection get_StrokeDashArray();
    public abstract virtual void set_StrokeDashArray(SvgUnitCollection value);
    public abstract virtual SvgUnit get_StrokeDashOffset();
    public abstract virtual void set_StrokeDashOffset(SvgUnit value);
    public abstract virtual GraphicsPath Path(ISvgRenderer renderer);
}
[ObsoleteAttribute("ISvgSupportsCoordinateUnits will be removed.")]
internal interface Svg.ISvgSupportsCoordinateUnits {
    public abstract virtual SvgCoordinateUnits GetUnits();
}
public interface Svg.ISvgTransformable {
    public SvgTransformCollection Transforms { get; public set; }
    public abstract virtual SvgTransformCollection get_Transforms();
    public abstract virtual void set_Transforms(SvgTransformCollection value);
    public abstract virtual void PushTransforms(ISvgRenderer renderer);
    public abstract virtual void PopTransforms(ISvgRenderer renderer);
}
public interface Svg.ISvgViewPort {
    public SvgViewBox ViewBox { get; public set; }
    public SvgAspectRatio AspectRatio { get; public set; }
    public SvgOverflow Overflow { get; public set; }
    public abstract virtual SvgViewBox get_ViewBox();
    public abstract virtual void set_ViewBox(SvgViewBox value);
    public abstract virtual SvgAspectRatio get_AspectRatio();
    public abstract virtual void set_AspectRatio(SvgAspectRatio value);
    public abstract virtual SvgOverflow get_Overflow();
    public abstract virtual void set_Overflow(SvgOverflow value);
}
public class Svg.MouseArg : SVGArg {
    public float x;
    public float y;
    public int Button;
    public int ClickCount;
    public bool AltKey;
    public bool ShiftKey;
    public bool CtrlKey;
}
public class Svg.MouseScrollArg : SVGArg {
    public int Scroll;
    public bool AltKey;
    public bool ShiftKey;
    public bool CtrlKey;
}
public class Svg.NonSvgElement : SvgElement {
    internal static List`1<Type> NonSvgElementClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> NonSvgElementProperties;
    public string Name { get; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    public NonSvgElement(string elementName, string elementNamespace);
    private static NonSvgElement();
    public virtual SvgElement DeepCopy();
    public string get_Name();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.NonSvgElement/<GetProperties>d__13")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public enum Svg.NumState : Enum {
    public int value__;
    public static NumState Invalid;
    public static NumState Separator;
    public static NumState Prefix;
    public static NumState Integer;
    public static NumState DecPlace;
    public static NumState Fraction;
    public static NumState Exponent;
    public static NumState ExpPrefix;
    public static NumState ExpValue;
}
public interface Svg.Pathing.ISvgPathElement {
    public abstract virtual void OnPathUpdated();
}
public class Svg.Pathing.SvgArcSegment : SvgPathSegment {
    private static double RadiansPerDegree;
    private static double DoublePI;
    [CompilerGeneratedAttribute]
private float <RadiusX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RadiusY>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Angle>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgArcSweep <Sweep>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgArcSize <Size>k__BackingField;
    public float RadiusX { get; public set; }
    public float RadiusY { get; public set; }
    public float Angle { get; public set; }
    public SvgArcSweep Sweep { get; public set; }
    public SvgArcSize Size { get; public set; }
    public SvgArcSegment(float radiusX, float radiusY, float angle, SvgArcSize size, SvgArcSweep sweep, bool isRelative, PointF end);
    [ObsoleteAttribute("Use new constructor.")]
public SvgArcSegment(PointF start, float radiusX, float radiusY, float angle, SvgArcSize size, SvgArcSweep sweep, PointF end);
    [CompilerGeneratedAttribute]
public float get_RadiusX();
    [CompilerGeneratedAttribute]
public void set_RadiusX(float value);
    [CompilerGeneratedAttribute]
public float get_RadiusY();
    [CompilerGeneratedAttribute]
public void set_RadiusY(float value);
    [CompilerGeneratedAttribute]
public float get_Angle();
    [CompilerGeneratedAttribute]
public void set_Angle(float value);
    [CompilerGeneratedAttribute]
public SvgArcSweep get_Sweep();
    [CompilerGeneratedAttribute]
public void set_Sweep(SvgArcSweep value);
    [CompilerGeneratedAttribute]
public SvgArcSize get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(SvgArcSize value);
    public virtual string ToString();
    private static double CalculateVectorAngle(double ux, double uy, double vx, double vy);
    public virtual PointF AddToPath(GraphicsPath graphicsPath, PointF start, SvgPathSegmentList parent);
    [ObsoleteAttribute("Use new AddToPath.")]
public virtual void AddToPath(GraphicsPath graphicsPath);
}
[FlagsAttribute]
public enum Svg.Pathing.SvgArcSize : Enum {
    public int value__;
    public static SvgArcSize Small;
    public static SvgArcSize Large;
}
[FlagsAttribute]
public enum Svg.Pathing.SvgArcSweep : Enum {
    public int value__;
    public static SvgArcSweep Negative;
    public static SvgArcSweep Positive;
}
public class Svg.Pathing.SvgClosePathSegment : SvgPathSegment {
    public SvgClosePathSegment(bool isRelative);
    public virtual string ToString();
    public virtual PointF AddToPath(GraphicsPath graphicsPath, PointF start, SvgPathSegmentList parent);
    [ObsoleteAttribute("Use new AddToPath.")]
public virtual void AddToPath(GraphicsPath graphicsPath);
}
public class Svg.Pathing.SvgCubicCurveSegment : SvgPathSegment {
    [CompilerGeneratedAttribute]
private PointF <FirstControlPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private PointF <SecondControlPoint>k__BackingField;
    public PointF FirstControlPoint { get; public set; }
    public PointF SecondControlPoint { get; public set; }
    public SvgCubicCurveSegment(bool isRelative, PointF firstControlPoint, PointF secondControlPoint, PointF end);
    public SvgCubicCurveSegment(bool isRelative, PointF secondControlPoint, PointF end);
    [ObsoleteAttribute("Use new constructor.")]
public SvgCubicCurveSegment(PointF start, PointF firstControlPoint, PointF secondControlPoint, PointF end);
    [CompilerGeneratedAttribute]
public PointF get_FirstControlPoint();
    [CompilerGeneratedAttribute]
public void set_FirstControlPoint(PointF value);
    [CompilerGeneratedAttribute]
public PointF get_SecondControlPoint();
    [CompilerGeneratedAttribute]
public void set_SecondControlPoint(PointF value);
    public virtual string ToString();
    public virtual PointF AddToPath(GraphicsPath graphicsPath, PointF start, SvgPathSegmentList parent);
    [ObsoleteAttribute("Use new AddToPath.")]
public virtual void AddToPath(GraphicsPath graphicsPath);
}
public class Svg.Pathing.SvgLineSegment : SvgPathSegment {
    public SvgLineSegment(bool isRelative, PointF end);
    [ObsoleteAttribute("Use new constructor.")]
public SvgLineSegment(PointF start, PointF end);
    public virtual string ToString();
    public virtual PointF AddToPath(GraphicsPath graphicsPath, PointF start, SvgPathSegmentList parent);
    [ObsoleteAttribute("Use new AddToPath.")]
public virtual void AddToPath(GraphicsPath graphicsPath);
}
public class Svg.Pathing.SvgMoveToSegment : SvgPathSegment {
    public SvgMoveToSegment(bool isRelative, PointF moveTo);
    [ObsoleteAttribute("Use new constructor.")]
public SvgMoveToSegment(PointF moveTo);
    public virtual string ToString();
    public virtual PointF AddToPath(GraphicsPath graphicsPath, PointF start, SvgPathSegmentList parent);
    [ObsoleteAttribute("Use new AddToPath.")]
public virtual void AddToPath(GraphicsPath graphicsPath);
}
public abstract class Svg.Pathing.SvgPathSegment : object {
    protected static PointF NaN;
    [CompilerGeneratedAttribute]
private bool <IsRelative>k__BackingField;
    [CompilerGeneratedAttribute]
private PointF <End>k__BackingField;
    [CompilerGeneratedAttribute]
private PointF <Start>k__BackingField;
    public bool IsRelative { get; public set; }
    public PointF End { get; public set; }
    [ObsoleteAttribute("Will be removed.")]
public PointF Start { get; public set; }
    protected SvgPathSegment(bool isRelative);
    protected SvgPathSegment(bool isRelative, PointF end);
    private static SvgPathSegment();
    [CompilerGeneratedAttribute]
public bool get_IsRelative();
    [CompilerGeneratedAttribute]
public void set_IsRelative(bool value);
    [CompilerGeneratedAttribute]
public PointF get_End();
    [CompilerGeneratedAttribute]
public void set_End(PointF value);
    public SvgPathSegment Clone();
    [CompilerGeneratedAttribute]
public PointF get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(PointF value);
    protected static PointF Reflect(PointF point, PointF mirror);
    protected static PointF ToAbsolute(PointF point, bool isRelative, PointF start);
    public abstract virtual PointF AddToPath(GraphicsPath graphicsPath, PointF start, SvgPathSegmentList parent);
    [ObsoleteAttribute("Use new AddToPath.")]
public abstract virtual void AddToPath(GraphicsPath graphicsPath);
}
[DefaultMemberAttribute("Item")]
[TypeConverterAttribute("Svg.SvgPathBuilder")]
public class Svg.Pathing.SvgPathSegmentList : object {
    private List`1<SvgPathSegment> _segments;
    [CompilerGeneratedAttribute]
private ISvgPathElement <Owner>k__BackingField;
    public ISvgPathElement Owner { get; public set; }
    public SvgPathSegment First { get; }
    public SvgPathSegment Last { get; }
    public SvgPathSegment Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    [CompilerGeneratedAttribute]
public ISvgPathElement get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(ISvgPathElement value);
    public SvgPathSegment get_First();
    public SvgPathSegment get_Last();
    public sealed virtual int IndexOf(SvgPathSegment item);
    public sealed virtual void Insert(int index, SvgPathSegment item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual SvgPathSegment get_Item(int index);
    public sealed virtual void set_Item(int index, SvgPathSegment value);
    public sealed virtual void Add(SvgPathSegment item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(SvgPathSegment item);
    public sealed virtual void CopyTo(SvgPathSegment[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(SvgPathSegment item);
    public sealed virtual IEnumerator`1<SvgPathSegment> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual object Clone();
    public virtual string ToString();
}
public class Svg.Pathing.SvgQuadraticCurveSegment : SvgPathSegment {
    [CompilerGeneratedAttribute]
private PointF <ControlPoint>k__BackingField;
    public PointF ControlPoint { get; public set; }
    public SvgQuadraticCurveSegment(bool isRelative, PointF controlPoint, PointF end);
    public SvgQuadraticCurveSegment(bool isRelative, PointF end);
    [ObsoleteAttribute("Use new constructor.")]
public SvgQuadraticCurveSegment(PointF start, PointF controlPoint, PointF end);
    [CompilerGeneratedAttribute]
public PointF get_ControlPoint();
    [CompilerGeneratedAttribute]
public void set_ControlPoint(PointF value);
    public virtual string ToString();
    private static PointF CalculateFirstControlPoint(PointF start, PointF controlPoint);
    private static PointF CalculateSecondControlPoint(PointF controlPoint, PointF end);
    private static PointF CalculateControlPoint(PointF start, PointF firstControlPoint);
    public virtual PointF AddToPath(GraphicsPath graphicsPath, PointF start, SvgPathSegmentList parent);
    [ObsoleteAttribute("Use new AddToPath.")]
public virtual void AddToPath(GraphicsPath graphicsPath);
}
public class Svg.PathStatistics : object {
    private static double GqBreak_TwoPoint;
    private static double GqBreak_ThreePoint;
    private static double GqBreak_FourPoint_01;
    private static double GqBreak_FourPoint_02;
    private static double GqWeight_FourPoint_01;
    private static double GqWeight_FourPoint_02;
    private PathData _data;
    private double _totalLength;
    private List`1<ISegment> _segments;
    public double TotalLength { get; }
    public PathStatistics(PathData data);
    public double get_TotalLength();
    public void LocationAngleAtOffset(double offset, PointF& point, Single& angle);
    public bool OffsetOnPath(double offset);
    private int BinarySearchForSegment(double offset, int first, int last);
}
[ExtensionAttribute]
public static class Svg.PointFExtensions : object {
    [ExtensionAttribute]
public static string ToSvgString(float value);
    [ExtensionAttribute]
public static string ToSvgString(PointF p);
}
public class Svg.StringArg : SVGArg {
    public string s;
}
[SvgElementAttribute("a")]
public class Svg.SvgAnchor : SvgElement {
    internal static List`1<Type> SvgAnchorClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgAnchorProperties;
    [SvgAttributeAttribute("href", "http://www.w3.org/1999/xlink")]
public string Href { get; public set; }
    [SvgAttributeAttribute("show", "http://www.w3.org/1999/xlink")]
public string Show { get; public set; }
    [SvgAttributeAttribute("title", "http://www.w3.org/1999/xlink")]
public string Title { get; public set; }
    [SvgAttributeAttribute("target")]
public string Target { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgAnchor();
    public string get_Href();
    public void set_Href(string value);
    public string get_Show();
    public void set_Show(string value);
    public string get_Title();
    public void set_Title(string value);
    public string get_Target();
    public void set_Target(string value);
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgAnchor/<GetProperties>d__21")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public class Svg.SVGArg : EventArgs {
    public string SessionID;
}
[TypeConverterAttribute("Svg.DataTypes.SvgPreserveAspectRatioConverter")]
public class Svg.SvgAspectRatio : object {
    [CompilerGeneratedAttribute]
private SvgPreserveAspectRatio <Align>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Slice>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Defer>k__BackingField;
    public SvgPreserveAspectRatio Align { get; public set; }
    public bool Slice { get; public set; }
    public bool Defer { get; public set; }
    public SvgAspectRatio(SvgPreserveAspectRatio align);
    public SvgAspectRatio(SvgPreserveAspectRatio align, bool slice);
    public SvgAspectRatio(SvgPreserveAspectRatio align, bool slice, bool defer);
    [CompilerGeneratedAttribute]
public SvgPreserveAspectRatio get_Align();
    [CompilerGeneratedAttribute]
public void set_Align(SvgPreserveAspectRatio value);
    [CompilerGeneratedAttribute]
public bool get_Slice();
    [CompilerGeneratedAttribute]
public void set_Slice(bool value);
    [CompilerGeneratedAttribute]
public bool get_Defer();
    [CompilerGeneratedAttribute]
public void set_Defer(bool value);
    public sealed virtual object Clone();
    public virtual string ToString();
}
[AttributeUsageAttribute("640")]
public class Svg.SvgAttributeAttribute : Attribute {
    public static string XLinkNamespace;
    public static string XmlNamespace;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameSpace>k__BackingField;
    public string Name { get; }
    public string NameSpace { get; }
    internal SvgAttributeAttribute(string name);
    public SvgAttributeAttribute(string name, string nameSpace);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_NameSpace();
}
[DefaultMemberAttribute("Item")]
public class Svg.SvgAttributeCollection : Dictionary`2<string, object> {
    private SvgElement _owner;
    [CompilerGeneratedAttribute]
private EventHandler`1<AttributeEventArgs> AttributeChanged;
    public object Item { get; public set; }
    public SvgAttributeCollection(SvgElement owner);
    public TAttributeType GetAttribute(string attributeName, TAttributeType defaultValue);
    public TAttributeType GetInheritedAttribute(string attributeName, bool inherited, TAttributeType defaultValue);
    private bool IsInheritValue(object value);
    public object get_Item(string attributeName);
    public void set_Item(string attributeName, object value);
    private bool TryUnboxedCheck(object a, object b);
    private bool UnboxAndCheck(object a, object b);
    private bool IsValueType(object obj);
    [CompilerGeneratedAttribute]
public void add_AttributeChanged(EventHandler`1<AttributeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AttributeChanged(EventHandler`1<AttributeEventArgs> value);
    private void OnAttributeChanged(string attribute, object value);
}
public class Svg.SvgBlendModeConverter : EnumBaseConverter`1<SvgBlendMode> {
}
public class Svg.SvgChannelSelectorConverter : EnumBaseConverter`1<SvgChannelSelector> {
}
[SvgElementAttribute("circle")]
public class Svg.SvgCircle : SvgPathBasedElement {
    private SvgUnit _centerX;
    private SvgUnit _centerY;
    private SvgUnit _radius;
    private GraphicsPath _path;
    internal static List`1<Type> SvgCircleClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgCircleProperties;
    public SvgPoint Center { get; }
    [SvgAttributeAttribute("cx")]
public SvgUnit CenterX { get; public set; }
    [SvgAttributeAttribute("cy")]
public SvgUnit CenterY { get; public set; }
    [SvgAttributeAttribute("r")]
public SvgUnit Radius { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgCircle();
    public SvgPoint get_Center();
    public virtual SvgUnit get_CenterX();
    public virtual void set_CenterX(SvgUnit value);
    public virtual SvgUnit get_CenterY();
    public virtual void set_CenterY(SvgUnit value);
    public virtual SvgUnit get_Radius();
    public virtual void set_Radius(SvgUnit value);
    public virtual SvgElement DeepCopy();
    public virtual SvgElement DeepCopy();
    public virtual GraphicsPath Path(ISvgRenderer renderer);
    protected virtual void Render(ISvgRenderer renderer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgCircle/<GetProperties>d__27")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("clipPath")]
public class Svg.SvgClipPath : SvgElement {
    private GraphicsPath _path;
    internal static List`1<Type> SvgClipPathClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgClipPathProperties;
    [SvgAttributeAttribute("clipPathUnits")]
public SvgCoordinateUnits ClipPathUnits { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgClipPath();
    public SvgCoordinateUnits get_ClipPathUnits();
    public void set_ClipPathUnits(SvgCoordinateUnits value);
    protected virtual void AddElement(SvgElement child, int index);
    protected virtual void RemoveElement(SvgElement child);
    public virtual SvgElement DeepCopy();
    public Region GetClipRegion(SvgVisualElement owner, ISvgRenderer renderer);
    private void CombinePaths(GraphicsPath path, SvgElement element, ISvgRenderer renderer);
    protected virtual void Render(ISvgRenderer renderer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgClipPath/<GetProperties>d__18")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgClipRuleConverter")]
public enum Svg.SvgClipRule : Enum {
    public int value__;
    public static SvgClipRule NonZero;
    public static SvgClipRule EvenOdd;
    public static SvgClipRule Inherit;
}
public class Svg.SvgClipRuleConverter : EnumBaseConverter`1<SvgClipRule> {
}
public class Svg.SvgColourConverter : ColorConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    private static string ToHtml(Color c);
    private static Color Hsl2Rgb(double h, double sl, double l);
}
public class Svg.SvgColourInterpolationConverter : EnumBaseConverter`1<SvgColourInterpolation> {
}
public class Svg.SvgColourMatrixTypeConverter : EnumBaseConverter`1<SvgColourMatrixType> {
}
public class Svg.SvgColourServer : SvgPaintServer {
    private Color _colour;
    internal static List`1<Type> SvgColourServerClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgColourServerProperties;
    public Color Colour { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    public SvgColourServer(Color colour);
    private static SvgColourServer();
    public Color get_Colour();
    public void set_Colour(Color value);
    public virtual string ToString();
    public virtual SvgElement DeepCopy();
    public virtual SvgElement DeepCopy();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual Brush GetBrush(SvgVisualElement styleOwner, ISvgRenderer renderer, float opacity, bool forStroke);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgColourServer/<GetProperties>d__20")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public class Svg.SvgComponentTransferTypeConverter : EnumBaseConverter`1<SvgComponentTransferType> {
}
public class Svg.SvgCompositeOperatorConverter : EnumBaseConverter`1<SvgCompositeOperator> {
}
public class Svg.SvgContentNode : object {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public string Content { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    public sealed virtual ISvgNode DeepCopy();
}
[TypeConverterAttribute("Svg.SvgCoordinateUnitsConverter")]
public enum Svg.SvgCoordinateUnits : Enum {
    public int value__;
    public static SvgCoordinateUnits ObjectBoundingBox;
    public static SvgCoordinateUnits UserSpaceOnUse;
}
public class Svg.SvgCoordinateUnitsConverter : EnumBaseConverter`1<SvgCoordinateUnits> {
}
[DefaultMemberAttribute("Item")]
public class Svg.SvgCustomAttributeCollection : Dictionary`2<string, string> {
    private SvgElement _owner;
    [CompilerGeneratedAttribute]
private EventHandler`1<AttributeEventArgs> AttributeChanged;
    public string Item { get; public set; }
    public SvgCustomAttributeCollection(SvgElement owner);
    public string get_Item(string attributeName);
    public void set_Item(string attributeName, string value);
    [CompilerGeneratedAttribute]
public void add_AttributeChanged(EventHandler`1<AttributeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AttributeChanged(EventHandler`1<AttributeEventArgs> value);
    private void OnAttributeChanged(string attribute, object value);
}
[TypeConverterAttribute("Svg.SvgDeferredPaintServerFactory")]
public class Svg.SvgDeferredPaintServer : SvgPaintServer {
    private bool _serverLoaded;
    private SvgPaintServer _concreteServer;
    private SvgPaintServer _fallbackServer;
    [CompilerGeneratedAttribute]
private SvgDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeferredId>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgPaintServer <FallbackServer>k__BackingField;
    internal static List`1<Type> SvgDeferredPaintServerClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgDeferredPaintServerProperties;
    [ObsoleteAttribute("Will be removed.")]
public SvgDocument Document { get; public set; }
    public string DeferredId { get; public set; }
    public SvgPaintServer FallbackServer { get; private set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    [ObsoleteAttribute("Will be removed.")]
public SvgDeferredPaintServer(SvgDocument document, string id);
    public SvgDeferredPaintServer(string id);
    public SvgDeferredPaintServer(string id, SvgPaintServer fallbackServer);
    private static SvgDeferredPaintServer();
    [CompilerGeneratedAttribute]
public SvgDocument get_Document();
    [CompilerGeneratedAttribute]
public void set_Document(SvgDocument value);
    [CompilerGeneratedAttribute]
public string get_DeferredId();
    [CompilerGeneratedAttribute]
public void set_DeferredId(string value);
    [CompilerGeneratedAttribute]
public SvgPaintServer get_FallbackServer();
    [CompilerGeneratedAttribute]
private void set_FallbackServer(SvgPaintServer value);
    public void EnsureServer(SvgElement styleOwner);
    public virtual SvgElement DeepCopy();
    public virtual SvgElement DeepCopy();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static T TryGet(SvgPaintServer server, SvgElement parent);
    public virtual Brush GetBrush(SvgVisualElement styleOwner, ISvgRenderer renderer, float opacity, bool forStroke);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgDeferredPaintServer/<GetProperties>d__35")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
internal class Svg.SvgDeferredPaintServerFactory : SvgPaintServerFactory {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[SvgElementAttribute("defs")]
public class Svg.SvgDefinitionList : SvgElement {
    internal static List`1<Type> SvgDefinitionListClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgDefinitionListProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgDefinitionList();
    public virtual SvgElement DeepCopy();
    protected virtual void Render(ISvgRenderer renderer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgDefinitionList/<GetProperties>d__10")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[DefaultPropertyAttribute("Text")]
[SvgElementAttribute("desc")]
public class Svg.SvgDescription : SvgElement {
    internal static List`1<Type> SvgDescriptionClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgDescriptionProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgDescription();
    public virtual string ToString();
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgDescription/<GetProperties>d__10")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public class Svg.SvgDocument : SvgFragment {
    [CompilerGeneratedAttribute]
private static bool <DisableDtdProcessing>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExternalType <ResolveExternalXmlEntites>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExternalType <ResolveExternalImages>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExternalType <ResolveExternalElements>k__BackingField;
    private static Nullable`1<int> pointsPerInch;
    private SvgElementIdManager _idManager;
    private Dictionary`2<string, IEnumerable`1<SvgFontFace>> _fontDefns;
    private Uri baseUri;
    [CompilerGeneratedAttribute]
private int <Ppi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalCSSHref>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <SkipGdiPlusCapabilityCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private SvgFontManager <FontManager>k__BackingField;
    internal static List`1<Type> SvgDocumentClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgDocumentProperties;
    public static bool DisableDtdProcessing { get; public set; }
    public static ExternalType ResolveExternalXmlEntites { get; public set; }
    public static ExternalType ResolveExternalImages { get; public set; }
    public static ExternalType ResolveExternalElements { get; public set; }
    public static int PointsPerInch { get; public set; }
    public SvgUnit X { get; }
    public SvgUnit Y { get; }
    public SvgOverflow Overflow { get; }
    public Uri BaseUri { get; public set; }
    protected internal SvgElementIdManager IdManager { get; }
    public int Ppi { get; public set; }
    public string ExternalCSSHref { get; public set; }
    private IContainer System.ComponentModel.ITypeDescriptorContext.Container { get; }
    private object System.ComponentModel.ITypeDescriptorContext.Instance { get; }
    private PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor { get; }
    public static bool SkipGdiPlusCapabilityCheck { get; public set; }
    internal SvgFontManager FontManager { get; private set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgDocument();
    [CompilerGeneratedAttribute]
public static bool get_DisableDtdProcessing();
    [CompilerGeneratedAttribute]
public static void set_DisableDtdProcessing(bool value);
    [CompilerGeneratedAttribute]
public static ExternalType get_ResolveExternalXmlEntites();
    [CompilerGeneratedAttribute]
public static void set_ResolveExternalXmlEntites(ExternalType value);
    [CompilerGeneratedAttribute]
public static ExternalType get_ResolveExternalImages();
    [CompilerGeneratedAttribute]
public static void set_ResolveExternalImages(ExternalType value);
    [CompilerGeneratedAttribute]
public static ExternalType get_ResolveExternalElements();
    [CompilerGeneratedAttribute]
public static void set_ResolveExternalElements(ExternalType value);
    public static int get_PointsPerInch();
    public static void set_PointsPerInch(int value);
    public virtual SvgUnit get_X();
    public virtual SvgUnit get_Y();
    public virtual SvgOverflow get_Overflow();
    private static int GetSystemDpi();
    internal Dictionary`2<string, IEnumerable`1<SvgFontFace>> FontDefns();
    public Uri get_BaseUri();
    public void set_BaseUri(Uri value);
    protected internal virtual SvgElementIdManager get_IdManager();
    public void OverwriteIdManager(SvgElementIdManager manager);
    [CompilerGeneratedAttribute]
public int get_Ppi();
    [CompilerGeneratedAttribute]
public void set_Ppi(int value);
    [CompilerGeneratedAttribute]
public string get_ExternalCSSHref();
    [CompilerGeneratedAttribute]
public void set_ExternalCSSHref(string value);
    private sealed virtual override IContainer System.ComponentModel.ITypeDescriptorContext.get_Container();
    private sealed virtual override object System.ComponentModel.ITypeDescriptorContext.get_Instance();
    private sealed virtual override void System.ComponentModel.ITypeDescriptorContext.OnComponentChanged();
    private sealed virtual override bool System.ComponentModel.ITypeDescriptorContext.OnComponentChanging();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.get_PropertyDescriptor();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    public virtual SvgElement GetElementById(string id);
    public virtual TSvgElement GetElementById(string id);
    public static SvgDocument Open(string path);
    public static T Open(string path);
    [ObsoleteAttribute("Use Open<T>(string path, SvgOptions svgOptions)")]
public static T Open(string path, Dictionary`2<string, string> entities);
    public static T Open(string path, SvgOptions svgOptions);
    public static T Open(Stream stream);
    [ObsoleteAttribute("Use Open<T>(Stream stream, SvgOptions svgOptions)")]
public static T Open(Stream stream, Dictionary`2<string, string> entities);
    public static T Open(Stream stream, SvgOptions svgOptions);
    public static T FromSvg(string svg);
    public static T Open(XmlReader reader);
    private static T Create(XmlReader reader, string css);
    internal static T Create(XmlReader reader, SvgElementFactory elementFactory, List`1<ISvgNode> styles);
    public static SvgDocument Open(XmlDocument document);
    public virtual void RasterizeDimensions(SizeF& size, int rasterWidth, int rasterHeight);
    public virtual void Write(XmlWriter writer);
    public void Write(Stream stream, bool useBom);
    public void Write(string path, bool useBom);
    protected virtual void WriteAttributes(XmlWriter writer);
    [CompilerGeneratedAttribute]
public static bool get_SkipGdiPlusCapabilityCheck();
    [CompilerGeneratedAttribute]
public static void set_SkipGdiPlusCapabilityCheck(bool value);
    [CompilerGeneratedAttribute]
internal SvgFontManager get_FontManager();
    [CompilerGeneratedAttribute]
private void set_FontManager(SvgFontManager value);
    public static bool SystemIsGdiPlusCapable();
    public static void EnsureSystemIsGdiPlusCapable();
    private static bool ExceptionCaughtIsGdiPlusRelated(Exception e);
    public static Bitmap OpenAsBitmap(string path);
    public static Bitmap OpenAsBitmap(XmlDocument document);
    private void Draw(ISvgRenderer renderer, ISvgBoundable boundable);
    public void Draw(ISvgRenderer renderer);
    public void Draw(Graphics graphics);
    public void Draw(Graphics graphics, Nullable`1<SizeF> size);
    public virtual Bitmap Draw();
    public virtual void Draw(Bitmap bitmap);
    public virtual Bitmap Draw(int rasterWidth, int rasterHeight);
    private static int GetDeviceCaps(IntPtr hdc, int nIndex);
    private static IntPtr GetDC(IntPtr hWnd);
    private static int ReleaseDC(IntPtr hWnd, IntPtr hDC);
    private static int GetWin32SystemDpi();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgDocument/<GetProperties>d__106")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("metadata")]
public class Svg.SvgDocumentMetadata : SvgElement {
    internal static List`1<Type> SvgDocumentMetadataClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgDocumentMetadataProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgDocumentMetadata();
    protected virtual void WriteChildren(XmlWriter writer);
    public virtual SvgElement DeepCopy();
    public virtual void InitialiseFromXML(XmlReader reader, SvgDocument document);
    protected virtual void Render(ISvgRenderer renderer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgDocumentMetadata/<GetProperties>d__13")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
internal class Svg.SvgDtdResolver : XmlUrlResolver {
    private static Regex _svgDtdRegex;
    internal ExternalType ResolveExternalXmlEntities { get; }
    private static SvgDtdResolver();
    internal ExternalType get_ResolveExternalXmlEntities();
    public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    private static bool IsSvgDtdEntity(Uri absoluteUri);
}
public class Svg.SvgEdgeModeConverter : EnumBaseConverter`1<SvgEdgeMode> {
}
public abstract class Svg.SvgElement : object {
    internal static int StyleSpecificity_PresAttribute;
    internal static int StyleSpecificity_InlineStyle;
    internal SvgElement _parent;
    private string _elementName;
    private SvgAttributeCollection _attributes;
    private EventHandlerList _eventHandlers;
    private SvgElementCollection _children;
    private static object _loadEventKey;
    private SvgCustomAttributeCollection _customAttributes;
    private List`1<ISvgNode> _nodes;
    private Dictionary`2<string, SortedDictionary`2<int, string>> _styles;
    [CompilerGeneratedAttribute]
private static HttpClient <HttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Namespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ElementNamespace>k__BackingField;
    private string _content;
    [CompilerGeneratedAttribute]
private bool <Writing>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ChildAddedEventArgs> ChildAdded;
    public bool AutoPublishEvents;
    [CompilerGeneratedAttribute]
private EventHandler`1<AttributeEventArgs> AttributeChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<ContentEventArgs> ContentChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<MouseArg> Click;
    [CompilerGeneratedAttribute]
private EventHandler`1<MouseArg> MouseDown;
    [CompilerGeneratedAttribute]
private EventHandler`1<MouseArg> MouseUp;
    [CompilerGeneratedAttribute]
private EventHandler`1<MouseArg> MouseMove;
    [CompilerGeneratedAttribute]
private EventHandler`1<MouseScrollArg> MouseScroll;
    [CompilerGeneratedAttribute]
private EventHandler`1<MouseArg> MouseOver;
    [CompilerGeneratedAttribute]
private EventHandler`1<MouseArg> MouseOut;
    private Matrix _graphicsTransform;
    private Region _graphicsClip;
    private bool _dirty;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgElementProperties;
    protected internal static HttpClient HttpClient { get; }
    public Dictionary`2<string, string> Namespaces { get; }
    protected internal string ElementNamespace { get; protected set; }
    protected internal string ElementName { get; internal set; }
    [SvgAttributeAttribute("color")]
public SvgPaintServer Color { get; public set; }
    public string Content { get; public set; }
    protected EventHandlerList Events { get; }
    public SvgElementCollection Children { get; }
    public IList`1<ISvgNode> Nodes { get; }
    public SvgElement Parent { get; }
    public IEnumerable`1<SvgElement> Parents { get; }
    public IEnumerable`1<SvgElement> ParentsAndSelf { get; }
    public SvgDocument OwnerDocument { get; }
    protected internal SvgAttributeCollection Attributes { get; }
    protected bool Writing { get; protected set; }
    public SvgCustomAttributeCollection CustomAttributes { get; }
    [SvgAttributeAttribute("transform")]
public SvgTransformCollection Transforms { get; public set; }
    [SvgAttributeAttribute("id")]
public string ID { get; public set; }
    [SvgAttributeAttribute("space", "http://www.w3.org/XML/1998/namespace")]
public XmlSpaceHandling SpaceHandling { get; public set; }
    protected bool IsPathDirty { get; protected set; }
    [SvgAttributeAttribute("fill")]
public SvgPaintServer Fill { get; public set; }
    [SvgAttributeAttribute("stroke")]
public SvgPaintServer Stroke { get; public set; }
    [SvgAttributeAttribute("fill-rule")]
public SvgFillRule FillRule { get; public set; }
    [SvgAttributeAttribute("fill-opacity")]
public float FillOpacity { get; public set; }
    [SvgAttributeAttribute("stroke-width")]
public SvgUnit StrokeWidth { get; public set; }
    [SvgAttributeAttribute("stroke-linecap")]
public SvgStrokeLineCap StrokeLineCap { get; public set; }
    [SvgAttributeAttribute("stroke-linejoin")]
public SvgStrokeLineJoin StrokeLineJoin { get; public set; }
    [SvgAttributeAttribute("stroke-miterlimit")]
public float StrokeMiterLimit { get; public set; }
    [TypeConverterAttribute("Svg.SvgStrokeDashArrayConverter")]
[SvgAttributeAttribute("stroke-dasharray")]
public SvgUnitCollection StrokeDashArray { get; public set; }
    [SvgAttributeAttribute("stroke-dashoffset")]
public SvgUnit StrokeDashOffset { get; public set; }
    [SvgAttributeAttribute("stroke-opacity")]
public float StrokeOpacity { get; public set; }
    [SvgAttributeAttribute("opacity")]
public float Opacity { get; public set; }
    [SvgAttributeAttribute("shape-rendering")]
public SvgShapeRendering ShapeRendering { get; public set; }
    [SvgAttributeAttribute("color-interpolation")]
public SvgColourInterpolation ColorInterpolation { get; public set; }
    [SvgAttributeAttribute("color-interpolation-filters")]
public SvgColourInterpolation ColorInterpolationFilters { get; public set; }
    [SvgAttributeAttribute("visibility")]
public string Visibility { get; public set; }
    [SvgAttributeAttribute("display")]
public string Display { get; public set; }
    [SvgAttributeAttribute("text-anchor")]
public SvgTextAnchor TextAnchor { get; public set; }
    [SvgAttributeAttribute("baseline-shift")]
public string BaselineShift { get; public set; }
    [SvgAttributeAttribute("font-family")]
public string FontFamily { get; public set; }
    [SvgAttributeAttribute("font-size")]
public SvgUnit FontSize { get; public set; }
    [SvgAttributeAttribute("font-style")]
public SvgFontStyle FontStyle { get; public set; }
    [SvgAttributeAttribute("font-variant")]
public SvgFontVariant FontVariant { get; public set; }
    [SvgAttributeAttribute("text-decoration")]
public SvgTextDecoration TextDecoration { get; public set; }
    [SvgAttributeAttribute("font-weight")]
public SvgFontWeight FontWeight { get; public set; }
    [SvgAttributeAttribute("font-stretch")]
public SvgFontStretch FontStretch { get; public set; }
    [SvgAttributeAttribute("text-transform")]
public SvgTextTransformation TextTransformation { get; public set; }
    [SvgAttributeAttribute("font")]
public string Font { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgElement();
    public void AddStyle(string name, string value, int specificity);
    public void FlushStyles(bool children);
    private void FlushStyles();
    public bool ContainsAttribute(string name);
    public bool TryGetAttribute(string name, String& value);
    [CompilerGeneratedAttribute]
protected internal static HttpClient get_HttpClient();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Namespaces();
    [CompilerGeneratedAttribute]
protected internal string get_ElementNamespace();
    [CompilerGeneratedAttribute]
protected void set_ElementNamespace(string value);
    protected internal string get_ElementName();
    internal void set_ElementName(string value);
    public virtual SvgPaintServer get_Color();
    public virtual void set_Color(SvgPaintServer value);
    public virtual string get_Content();
    public virtual void set_Content(string value);
    protected virtual EventHandlerList get_Events();
    public void add_Load(EventHandler value);
    public void remove_Load(EventHandler value);
    public virtual SvgElementCollection get_Children();
    public sealed virtual IList`1<ISvgNode> get_Nodes();
    public IEnumerable`1<SvgElement> Descendants();
    [IteratorStateMachineAttribute("Svg.SvgElement/<AsEnumerable>d__46")]
private IEnumerable`1<SvgElement> AsEnumerable();
    public virtual bool HasChildren();
    public virtual SvgElement get_Parent();
    [IteratorStateMachineAttribute("Svg.SvgElement/<get_Parents>d__51")]
public IEnumerable`1<SvgElement> get_Parents();
    [IteratorStateMachineAttribute("Svg.SvgElement/<get_ParentsAndSelf>d__53")]
public IEnumerable`1<SvgElement> get_ParentsAndSelf();
    public virtual SvgDocument get_OwnerDocument();
    protected internal virtual SvgAttributeCollection get_Attributes();
    [CompilerGeneratedAttribute]
protected bool get_Writing();
    [CompilerGeneratedAttribute]
protected void set_Writing(bool value);
    protected internal TAttributeType GetAttribute(string attributeName, bool inherited, TAttributeType defaultValue);
    public SvgCustomAttributeCollection get_CustomAttributes();
    public sealed virtual SvgTransformCollection get_Transforms();
    public sealed virtual void set_Transforms(SvgTransformCollection value);
    public string get_ID();
    public void set_ID(string value);
    public virtual XmlSpaceHandling get_SpaceHandling();
    public virtual void set_SpaceHandling(XmlSpaceHandling value);
    public void SetAndForceUniqueID(string value, bool autoForceUniqueID, Action`3<SvgElement, string, string> logElementOldIDNewID);
    internal void ForceUniqueID(string newID);
    protected virtual void AddElement(SvgElement child, int index);
    [CompilerGeneratedAttribute]
public void add_ChildAdded(EventHandler`1<ChildAddedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ChildAdded(EventHandler`1<ChildAddedEventArgs> value);
    internal void OnElementAdded(SvgElement child, int index);
    protected virtual void RemoveElement(SvgElement child);
    internal void OnElementRemoved(SvgElement child);
    private void Attributes_AttributeChanged(object sender, AttributeEventArgs e);
    public virtual void InitialiseFromXML(XmlReader reader, SvgDocument document);
    public virtual bool ShouldWriteElement();
    protected virtual void WriteStartElement(XmlWriter writer);
    protected virtual void WriteEndElement(XmlWriter writer);
    protected virtual void WriteAttributes(XmlWriter writer);
    private Dictionary`2<string, string> WritePropertyAttributes(XmlWriter writer);
    private static void WriteAttributeString(XmlWriter writer, string name, string ns, string value);
    private bool TryResolveParentAttributeValue(string attributeKey, Object& parentAttributeValue);
    public virtual void Write(XmlWriter writer);
    protected virtual void WriteChildren(XmlWriter writer);
    public virtual object Clone();
    public abstract virtual SvgElement DeepCopy();
    private sealed virtual override ISvgNode Svg.ISvgNode.DeepCopy();
    public virtual SvgElement DeepCopy();
    [CompilerGeneratedAttribute]
public void add_AttributeChanged(EventHandler`1<AttributeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AttributeChanged(EventHandler`1<AttributeEventArgs> value);
    protected void OnAttributeChanged(AttributeEventArgs args);
    [CompilerGeneratedAttribute]
public void add_ContentChanged(EventHandler`1<ContentEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ContentChanged(EventHandler`1<ContentEventArgs> value);
    protected void OnContentChanged(ContentEventArgs args);
    public virtual void RegisterEvents(ISvgEventCaller caller);
    public virtual void UnregisterEvents(ISvgEventCaller caller);
    [CompilerGeneratedAttribute]
public void add_Click(EventHandler`1<MouseArg> value);
    [CompilerGeneratedAttribute]
public void remove_Click(EventHandler`1<MouseArg> value);
    [CompilerGeneratedAttribute]
public void add_MouseDown(EventHandler`1<MouseArg> value);
    [CompilerGeneratedAttribute]
public void remove_MouseDown(EventHandler`1<MouseArg> value);
    [CompilerGeneratedAttribute]
public void add_MouseUp(EventHandler`1<MouseArg> value);
    [CompilerGeneratedAttribute]
public void remove_MouseUp(EventHandler`1<MouseArg> value);
    [CompilerGeneratedAttribute]
public void add_MouseMove(EventHandler`1<MouseArg> value);
    [CompilerGeneratedAttribute]
public void remove_MouseMove(EventHandler`1<MouseArg> value);
    [CompilerGeneratedAttribute]
public void add_MouseScroll(EventHandler`1<MouseScrollArg> value);
    [CompilerGeneratedAttribute]
public void remove_MouseScroll(EventHandler`1<MouseScrollArg> value);
    [CompilerGeneratedAttribute]
public void add_MouseOver(EventHandler`1<MouseArg> value);
    [CompilerGeneratedAttribute]
public void remove_MouseOver(EventHandler`1<MouseArg> value);
    [CompilerGeneratedAttribute]
public void add_MouseOut(EventHandler`1<MouseArg> value);
    [CompilerGeneratedAttribute]
public void remove_MouseOut(EventHandler`1<MouseArg> value);
    protected Action`8<float, float, int, int, bool, bool, bool, string> CreateMouseEventAction(Action`2<object, MouseArg> eventRaiser);
    protected void RaiseMouseClick(object sender, MouseArg e);
    protected void RaiseMouseDown(object sender, MouseArg e);
    protected void RaiseMouseUp(object sender, MouseArg e);
    protected void RaiseMouseMove(object sender, MouseArg e);
    protected void RaiseMouseOver(object sender, MouseArg args);
    protected void RaiseMouseOut(object sender, MouseArg args);
    protected void OnMouseScroll(int scroll, bool ctrlKey, bool shiftKey, bool altKey, string sessionID);
    protected void RaiseMouseScroll(object sender, MouseScrollArg e);
    protected internal virtual bool PushTransforms(ISvgRenderer renderer);
    protected internal virtual void PopTransforms(ISvgRenderer renderer);
    private sealed virtual override void Svg.ISvgTransformable.PushTransforms(ISvgRenderer renderer);
    private sealed virtual override void Svg.ISvgTransformable.PopTransforms(ISvgRenderer renderer);
    protected RectangleF TransformedBounds(RectangleF bounds);
    public void RenderElement(ISvgRenderer renderer);
    protected virtual void Render(ISvgRenderer renderer);
    protected virtual void RenderChildren(ISvgRenderer renderer);
    private sealed virtual override void Svg.ISvgElement.Render(ISvgRenderer renderer);
    protected void AddPaths(SvgElement elem, GraphicsPath path);
    protected GraphicsPath GetPaths(SvgElement elem, ISvgRenderer renderer);
    protected virtual bool get_IsPathDirty();
    protected virtual void set_IsPathDirty(bool value);
    public void InvalidateChildPaths();
    protected static float FixOpacityValue(float value);
    public virtual SvgPaintServer get_Fill();
    public virtual void set_Fill(SvgPaintServer value);
    public virtual SvgPaintServer get_Stroke();
    public virtual void set_Stroke(SvgPaintServer value);
    public virtual SvgFillRule get_FillRule();
    public virtual void set_FillRule(SvgFillRule value);
    public virtual float get_FillOpacity();
    public virtual void set_FillOpacity(float value);
    public virtual SvgUnit get_StrokeWidth();
    public virtual void set_StrokeWidth(SvgUnit value);
    public virtual SvgStrokeLineCap get_StrokeLineCap();
    public virtual void set_StrokeLineCap(SvgStrokeLineCap value);
    public virtual SvgStrokeLineJoin get_StrokeLineJoin();
    public virtual void set_StrokeLineJoin(SvgStrokeLineJoin value);
    public virtual float get_StrokeMiterLimit();
    public virtual void set_StrokeMiterLimit(float value);
    public virtual SvgUnitCollection get_StrokeDashArray();
    public virtual void set_StrokeDashArray(SvgUnitCollection value);
    public virtual SvgUnit get_StrokeDashOffset();
    public virtual void set_StrokeDashOffset(SvgUnit value);
    public virtual float get_StrokeOpacity();
    public virtual void set_StrokeOpacity(float value);
    public virtual float get_Opacity();
    public virtual void set_Opacity(float value);
    public virtual SvgShapeRendering get_ShapeRendering();
    public virtual void set_ShapeRendering(SvgShapeRendering value);
    public SvgColourInterpolation get_ColorInterpolation();
    public void set_ColorInterpolation(SvgColourInterpolation value);
    public SvgColourInterpolation get_ColorInterpolationFilters();
    public void set_ColorInterpolationFilters(SvgColourInterpolation value);
    public virtual string get_Visibility();
    public virtual void set_Visibility(string value);
    public virtual string get_Display();
    public virtual void set_Display(string value);
    public virtual SvgTextAnchor get_TextAnchor();
    public virtual void set_TextAnchor(SvgTextAnchor value);
    public virtual string get_BaselineShift();
    public virtual void set_BaselineShift(string value);
    public virtual string get_FontFamily();
    public virtual void set_FontFamily(string value);
    public virtual SvgUnit get_FontSize();
    public virtual void set_FontSize(SvgUnit value);
    public virtual SvgFontStyle get_FontStyle();
    public virtual void set_FontStyle(SvgFontStyle value);
    public virtual SvgFontVariant get_FontVariant();
    public virtual void set_FontVariant(SvgFontVariant value);
    public virtual SvgTextDecoration get_TextDecoration();
    public virtual void set_TextDecoration(SvgTextDecoration value);
    public virtual SvgFontWeight get_FontWeight();
    public virtual void set_FontWeight(SvgFontWeight value);
    public virtual SvgFontStretch get_FontStretch();
    public virtual void set_FontStretch(SvgFontStretch value);
    public virtual SvgTextTransformation get_TextTransformation();
    public virtual void set_TextTransformation(SvgTextTransformation value);
    public virtual string get_Font();
    public virtual void set_Font(string value);
    internal IFontDefn GetFont(ISvgRenderer renderer, SvgFontManager fontManager);
    public static object ValidateFontFamily(string fontFamilyList, SvgDocument doc, SvgFontManager fontManager);
    internal abstract virtual string get_AttributeName();
    internal abstract virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgElement/<GetProperties>d__253")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
}
[AttributeUsageAttribute("4")]
public class Svg.SvgElementAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ElementName>k__BackingField;
    public string ElementName { get; private set; }
    public SvgElementAttribute(string elementName);
    [CompilerGeneratedAttribute]
public string get_ElementName();
    [CompilerGeneratedAttribute]
private void set_ElementName(string value);
}
[DefaultMemberAttribute("Item")]
public class Svg.SvgElementCollection : object {
    private List`1<SvgElement> _elements;
    private SvgElement _owner;
    private bool _mock;
    public SvgElement Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal SvgElementCollection(SvgElement owner);
    internal SvgElementCollection(SvgElement owner, bool mock);
    public sealed virtual int IndexOf(SvgElement item);
    public sealed virtual void Insert(int index, SvgElement item);
    private void LogIDChange(SvgElement elem, string oldId, string newID);
    public void InsertAndForceUniqueID(int index, SvgElement item, bool autoForceUniqueID, bool autoFixChildrenID, Action`3<SvgElement, string, string> logElementOldIDNewID);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual SvgElement get_Item(int index);
    public sealed virtual void set_Item(int index, SvgElement value);
    public sealed virtual void Add(SvgElement item);
    public void AddAndForceUniqueID(SvgElement item, bool autoForceUniqueID, bool autoFixChildrenID, Action`3<SvgElement, string, string> logElementOldIDNewID);
    private void AddToIdManager(SvgElement item, SvgElement sibling, bool autoForceUniqueID, bool autoFixChildrenID, Action`3<SvgElement, string, string> logElementOldIDNewID);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(SvgElement item);
    public sealed virtual void CopyTo(SvgElement[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(SvgElement item);
    public IEnumerable`1<T> FindSvgElementsOf();
    public T FindSvgElementOf();
    public T GetSvgElementOf();
    public sealed virtual IEnumerator`1<SvgElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Svg.SvgElementEventArgs : EventArgs {
    public SvgElement Element;
}
[ElementFactoryAttribute]
internal class Svg.SvgElementFactory : object {
    private StylesheetParser stylesheetParser;
    private static List`1<ElementInfo> availableElements;
    private static Dictionary`2<string, ElementInfo> availableElementsWithoutSvg;
    private static Dictionary`2<string, List`1<Type>> availableElementsDictionary;
    public List`1<ElementInfo> AvailableElements { get; }
    internal Dictionary`2<string, List`1<Type>> AvailableElementsDictionary { get; }
    private static SvgElementFactory();
    public List`1<ElementInfo> get_AvailableElements();
    internal Dictionary`2<string, List`1<Type>> get_AvailableElementsDictionary();
    public T CreateDocument(XmlReader reader);
    public SvgElement CreateElement(XmlReader reader, SvgDocument document);
    private SvgElement CreateElement(XmlReader reader, bool fragmentIsDocument, SvgDocument document);
    private void SetAttributes(SvgElement element, XmlReader reader, SvgDocument document);
    private static bool IsStyleAttribute(string name);
    internal static bool SetPropertyValue(SvgElement element, string ns, string attributeName, string attributeValue, SvgDocument document, bool isStyle);
}
public class Svg.SvgElementIdManager : object {
    private static HttpClient _httpClient;
    private SvgDocument _document;
    private Dictionary`2<string, SvgElement> _idValueMap;
    private static Regex regex;
    [CompilerGeneratedAttribute]
private EventHandler`1<SvgElementEventArgs> ElementAdded;
    [CompilerGeneratedAttribute]
private EventHandler`1<SvgElementEventArgs> ElementRemoved;
    internal ExternalType ResolveExternalElements { get; }
    public SvgElementIdManager(SvgDocument document);
    private static SvgElementIdManager();
    internal ExternalType get_ResolveExternalElements();
    public virtual SvgElement GetElementById(string id);
    public virtual SvgElement GetElementById(Uri uri);
    private static string GetUrlString(string url);
    public virtual void Add(SvgElement element);
    public virtual bool AddAndForceUniqueID(SvgElement element, SvgElement sibling, bool autoForceUniqueID, Action`3<SvgElement, string, string> logElementOldIDNewID);
    public virtual void Remove(SvgElement element);
    public string EnsureValidId(string id, bool autoForceUniqueID);
    [CompilerGeneratedAttribute]
public void add_ElementAdded(EventHandler`1<SvgElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ElementAdded(EventHandler`1<SvgElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ElementRemoved(EventHandler`1<SvgElementEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ElementRemoved(EventHandler`1<SvgElementEventArgs> value);
    protected void OnAdded(SvgElement element);
    protected void OnRemoved(SvgElement element);
}
internal static class Svg.SvgElements : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, string> <ElementNames>k__BackingField;
    public static Dictionary`2<Type, string> ElementNames { get; }
    private static SvgElements();
    [CompilerGeneratedAttribute]
public static Dictionary`2<Type, string> get_ElementNames();
}
public class Svg.SvgElementStyle : object {
}
[SvgElementAttribute("ellipse")]
public class Svg.SvgEllipse : SvgPathBasedElement {
    private SvgUnit _centerX;
    private SvgUnit _centerY;
    private SvgUnit _radiusX;
    private SvgUnit _radiusY;
    private GraphicsPath _path;
    internal static List`1<Type> SvgEllipseClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgEllipseProperties;
    [SvgAttributeAttribute("cx")]
public SvgUnit CenterX { get; public set; }
    [SvgAttributeAttribute("cy")]
public SvgUnit CenterY { get; public set; }
    [SvgAttributeAttribute("rx")]
public SvgUnit RadiusX { get; public set; }
    [SvgAttributeAttribute("ry")]
public SvgUnit RadiusY { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgEllipse();
    public virtual SvgUnit get_CenterX();
    public virtual void set_CenterX(SvgUnit value);
    public virtual SvgUnit get_CenterY();
    public virtual void set_CenterY(SvgUnit value);
    public virtual SvgUnit get_RadiusX();
    public virtual void set_RadiusX(SvgUnit value);
    public virtual SvgUnit get_RadiusY();
    public virtual void set_RadiusY(SvgUnit value);
    public virtual SvgElement DeepCopy();
    public virtual SvgElement DeepCopy();
    public virtual GraphicsPath Path(ISvgRenderer renderer);
    protected virtual void Render(ISvgRenderer renderer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgEllipse/<GetProperties>d__29")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public class Svg.SvgException : FormatException {
    public SvgException(string message);
    public SvgException(string message, Exception inner);
    protected SvgException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class Svg.SvgExtentions : object {
    [ExtensionAttribute]
public static void SetRectangle(SvgRectangle r, RectangleF bounds);
    [ExtensionAttribute]
public static RectangleF GetRectangle(SvgRectangle r);
    [ExtensionAttribute]
public static string GetXML(SvgDocument doc);
    [ExtensionAttribute]
public static string GetXML(SvgElement elem);
    [ExtensionAttribute]
public static bool HasNonEmptyCustomAttribute(SvgElement element, string name);
    [ExtensionAttribute]
public static void ApplyRecursive(SvgElement elem, Action`1<SvgElement> action);
    [ExtensionAttribute]
public static void ApplyRecursiveDepthFirst(SvgElement elem, Action`1<SvgElement> action);
    [IteratorStateMachineAttribute("Svg.SvgExtentions/<Traverse>d__7`1")]
[ExtensionAttribute]
internal static IEnumerable`1<T> Traverse(IEnumerable`1<T> items, Func`2<T, IEnumerable`1<T>> childrenSelector);
    [ExtensionAttribute]
internal static IEnumerable`1<T> Traverse(T root, Func`2<T, IEnumerable`1<T>> childrenSelector);
    [IteratorStateMachineAttribute("Svg.SvgExtentions/<TraverseDepthFirst>d__9`1")]
[ExtensionAttribute]
internal static IEnumerable`1<T> TraverseDepthFirst(IEnumerable`1<T> items, Func`2<T, IEnumerable`1<T>> childrenSelector);
    [ExtensionAttribute]
internal static IEnumerable`1<T> TraverseDepthFirst(T root, Func`2<T, IEnumerable`1<T>> childrenSelector);
}
[ObsoleteAttribute("Will be removed.Use SvgDeferredPaintServer class instead.")]
public class Svg.SvgFallbackPaintServer : SvgPaintServer {
    private IEnumerable`1<SvgPaintServer> _fallbacks;
    private SvgPaintServer _primary;
    internal static List`1<Type> SvgFallbackPaintServerClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgFallbackPaintServerProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    public SvgFallbackPaintServer(SvgPaintServer primary, IEnumerable`1<SvgPaintServer> fallbacks);
    private static SvgFallbackPaintServer();
    public virtual SvgElement DeepCopy();
    public virtual SvgElement DeepCopy();
    public virtual Brush GetBrush(SvgVisualElement styleOwner, ISvgRenderer renderer, float opacity, bool forStroke);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgFallbackPaintServer/<GetProperties>d__15")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
private SvgPaintServer <GetBrush>b__6_0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgFillRuleConverter")]
public enum Svg.SvgFillRule : Enum {
    public int value__;
    public static SvgFillRule NonZero;
    public static SvgFillRule EvenOdd;
    public static SvgFillRule Inherit;
}
public class Svg.SvgFillRuleConverter : EnumBaseConverter`1<SvgFillRule> {
}
[SvgElementAttribute("font")]
public class Svg.SvgFont : SvgElement {
    internal static List`1<Type> SvgFontClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgFontProperties;
    [SvgAttributeAttribute("horiz-adv-x")]
public float HorizAdvX { get; public set; }
    [SvgAttributeAttribute("horiz-origin-x")]
public float HorizOriginX { get; public set; }
    [SvgAttributeAttribute("horiz-origin-y")]
public float HorizOriginY { get; public set; }
    [SvgAttributeAttribute("vert-adv-y")]
public float VertAdvY { get; public set; }
    [SvgAttributeAttribute("vert-origin-x")]
public float VertOriginX { get; public set; }
    [SvgAttributeAttribute("vert-origin-y")]
public float VertOriginY { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgFont();
    public float get_HorizAdvX();
    public void set_HorizAdvX(float value);
    public float get_HorizOriginX();
    public void set_HorizOriginX(float value);
    public float get_HorizOriginY();
    public void set_HorizOriginY(float value);
    public float get_VertAdvY();
    public void set_VertAdvY(float value);
    public float get_VertOriginX();
    public void set_VertOriginX(float value);
    public float get_VertOriginY();
    public void set_VertOriginY(float value);
    public virtual SvgElement DeepCopy();
    protected virtual void Render(ISvgRenderer renderer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgFont/<GetProperties>d__28")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public class Svg.SvgFontDefn : object {
    private SvgFont _font;
    private float _emScale;
    private float _ppi;
    private float _size;
    private Dictionary`2<string, SvgGlyph> _glyphs;
    private Dictionary`2<string, SvgKern> _kerning;
    public float Size { get; }
    public float SizeInPoints { get; }
    public SvgFontDefn(SvgFont font, float size, float ppi);
    public sealed virtual float get_Size();
    public sealed virtual float get_SizeInPoints();
    public sealed virtual float Ascent(ISvgRenderer renderer);
    public sealed virtual IList`1<RectangleF> MeasureCharacters(ISvgRenderer renderer, string text);
    public sealed virtual SizeF MeasureString(ISvgRenderer renderer, string text);
    public sealed virtual void AddStringToPath(ISvgRenderer renderer, GraphicsPath path, string text, PointF location);
    private GraphicsPath GetPath(ISvgRenderer renderer, string text, IList`1<RectangleF> ranges, bool measureSpaces);
    private void EnsureDictionaries();
    public sealed virtual void Dispose();
}
[SvgElementAttribute("font-face")]
public class Svg.SvgFontFace : SvgElement {
    internal static List`1<Type> SvgFontFaceClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgFontFaceProperties;
    [SvgAttributeAttribute("alphabetic")]
public float Alphabetic { get; public set; }
    [SvgAttributeAttribute("ascent")]
public float Ascent { get; public set; }
    [SvgAttributeAttribute("ascent-height")]
public float AscentHeight { get; public set; }
    [SvgAttributeAttribute("descent")]
public float Descent { get; public set; }
    [SvgAttributeAttribute("panose-1")]
public string Panose1 { get; public set; }
    [SvgAttributeAttribute("units-per-em")]
public float UnitsPerEm { get; public set; }
    [SvgAttributeAttribute("x-height")]
public float XHeight { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgFontFace();
    public float get_Alphabetic();
    public void set_Alphabetic(float value);
    public float get_Ascent();
    public void set_Ascent(float value);
    public float get_AscentHeight();
    public void set_AscentHeight(float value);
    public float get_Descent();
    public void set_Descent(float value);
    public string get_Panose1();
    public void set_Panose1(string value);
    public float get_UnitsPerEm();
    public void set_UnitsPerEm(float value);
    public float get_XHeight();
    public void set_XHeight(float value);
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgFontFace/<GetProperties>d__30")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("font-face-src")]
public class Svg.SvgFontFaceSrc : SvgElement {
    internal static List`1<Type> SvgFontFaceSrcClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgFontFaceSrcProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgFontFaceSrc();
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgFontFaceSrc/<GetProperties>d__9")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("font-face-uri")]
public class Svg.SvgFontFaceUri : SvgElement {
    internal static List`1<Type> SvgFontFaceUriClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgFontFaceUriProperties;
    [SvgAttributeAttribute("href", "http://www.w3.org/1999/xlink")]
public Uri ReferencedElement { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgFontFaceUri();
    public virtual Uri get_ReferencedElement();
    public virtual void set_ReferencedElement(Uri value);
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgFontFaceUri/<GetProperties>d__12")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public class Svg.SvgFontManager : object {
    private static String[][] defaultLocalizedFamilyNames;
    [CompilerGeneratedAttribute]
private static List`1<String[]> <LocalizedFamilyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<string> <PrivateFontPathList>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<Byte[]> <PrivateFontDataList>k__BackingField;
    private List`1<FontFamily> families;
    private List`1<String[]> localizedFamilyNames;
    public static List`1<String[]> LocalizedFamilyNames { get; private set; }
    public static List`1<string> PrivateFontPathList { get; private set; }
    public static List`1<Byte[]> PrivateFontDataList { get; private set; }
    private static SvgFontManager();
    [CompilerGeneratedAttribute]
public static List`1<String[]> get_LocalizedFamilyNames();
    [CompilerGeneratedAttribute]
private static void set_LocalizedFamilyNames(List`1<String[]> value);
    [CompilerGeneratedAttribute]
public static List`1<string> get_PrivateFontPathList();
    [CompilerGeneratedAttribute]
private static void set_PrivateFontPathList(List`1<string> value);
    [CompilerGeneratedAttribute]
public static List`1<Byte[]> get_PrivateFontDataList();
    [CompilerGeneratedAttribute]
private static void set_PrivateFontDataList(List`1<Byte[]> value);
    public FontFamily FindFont(string name);
    public sealed virtual void Dispose();
}
[TypeConverterAttribute("Svg.SvgFontStretchConverter")]
public enum Svg.SvgFontStretch : Enum {
    public int value__;
    public static SvgFontStretch Normal;
    public static SvgFontStretch Wider;
    public static SvgFontStretch Narrower;
    public static SvgFontStretch UltraCondensed;
    public static SvgFontStretch ExtraCondensed;
    public static SvgFontStretch Condensed;
    public static SvgFontStretch SemiCondensed;
    public static SvgFontStretch SemiExpanded;
    public static SvgFontStretch Expanded;
    public static SvgFontStretch ExtraExpanded;
    public static SvgFontStretch UltraExpanded;
    public static SvgFontStretch Inherit;
}
public class Svg.SvgFontStretchConverter : EnumBaseConverter`1<SvgFontStretch> {
}
[TypeConverterAttribute("Svg.SvgFontStyleConverter")]
[FlagsAttribute]
public enum Svg.SvgFontStyle : Enum {
    public int value__;
    public static SvgFontStyle Inherit;
    public static SvgFontStyle Normal;
    public static SvgFontStyle Oblique;
    public static SvgFontStyle Italic;
    public static SvgFontStyle All;
}
public class Svg.SvgFontStyleConverter : EnumBaseConverter`1<SvgFontStyle> {
}
[TypeConverterAttribute("Svg.SvgFontVariantConverter")]
public enum Svg.SvgFontVariant : Enum {
    public int value__;
    public static SvgFontVariant Normal;
    public static SvgFontVariant SmallCaps;
    public static SvgFontVariant Inherit;
}
public class Svg.SvgFontVariantConverter : EnumBaseConverter`1<SvgFontVariant> {
}
[TypeConverterAttribute("Svg.SvgFontWeightConverter")]
[FlagsAttribute]
public enum Svg.SvgFontWeight : Enum {
    public int value__;
    public static SvgFontWeight Inherit;
    public static SvgFontWeight Normal;
    public static SvgFontWeight Bold;
    public static SvgFontWeight Bolder;
    public static SvgFontWeight Lighter;
    public static SvgFontWeight W100;
    public static SvgFontWeight W200;
    public static SvgFontWeight W300;
    public static SvgFontWeight W400;
    public static SvgFontWeight W500;
    public static SvgFontWeight W600;
    public static SvgFontWeight W700;
    public static SvgFontWeight W800;
    public static SvgFontWeight W900;
    public static SvgFontWeight All;
}
public class Svg.SvgFontWeightConverter : EnumBaseConverter`1<SvgFontWeight> {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[SvgElementAttribute("foreignObject")]
public class Svg.SvgForeignObject : SvgVisualElement {
    internal static List`1<Type> SvgForeignObjectClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgForeignObjectProperties;
    protected bool Renderable { get; }
    public RectangleF Bounds { get; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgForeignObject();
    protected virtual bool get_Renderable();
    public virtual SvgElement DeepCopy();
    public virtual GraphicsPath Path(ISvgRenderer renderer);
    public virtual RectangleF get_Bounds();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgForeignObject/<GetProperties>d__14")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("svg")]
public class Svg.SvgFragment : SvgElement {
    private SvgUnit _x;
    private SvgUnit _y;
    public static Uri Namespace;
    internal static List`1<Type> SvgFragmentClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgFragmentProperties;
    [SvgAttributeAttribute("x")]
public SvgUnit X { get; public set; }
    [SvgAttributeAttribute("y")]
public SvgUnit Y { get; public set; }
    [SvgAttributeAttribute("width")]
public SvgUnit Width { get; public set; }
    [SvgAttributeAttribute("height")]
public SvgUnit Height { get; public set; }
    [SvgAttributeAttribute("overflow")]
public SvgOverflow Overflow { get; public set; }
    [SvgAttributeAttribute("viewBox")]
public SvgViewBox ViewBox { get; public set; }
    [SvgAttributeAttribute("preserveAspectRatio")]
public SvgAspectRatio AspectRatio { get; public set; }
    [SvgAttributeAttribute("font-size")]
public SvgUnit FontSize { get; public set; }
    [SvgAttributeAttribute("font-family")]
public string FontFamily { get; public set; }
    public XmlSpaceHandling SpaceHandling { get; public set; }
    private PointF Svg.ISvgBoundable.Location { get; }
    private SizeF Svg.ISvgBoundable.Size { get; }
    private RectangleF Svg.ISvgBoundable.Bounds { get; }
    public GraphicsPath Path { get; }
    public RectangleF Bounds { get; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgFragment();
    public virtual SvgUnit get_X();
    public virtual void set_X(SvgUnit value);
    public virtual SvgUnit get_Y();
    public virtual void set_Y(SvgUnit value);
    public SvgUnit get_Width();
    public void set_Width(SvgUnit value);
    public SvgUnit get_Height();
    public void set_Height(SvgUnit value);
    public virtual SvgOverflow get_Overflow();
    public virtual void set_Overflow(SvgOverflow value);
    public sealed virtual SvgViewBox get_ViewBox();
    public sealed virtual void set_ViewBox(SvgViewBox value);
    public sealed virtual SvgAspectRatio get_AspectRatio();
    public sealed virtual void set_AspectRatio(SvgAspectRatio value);
    public virtual SvgUnit get_FontSize();
    public virtual void set_FontSize(SvgUnit value);
    public virtual string get_FontFamily();
    public virtual void set_FontFamily(string value);
    public virtual XmlSpaceHandling get_SpaceHandling();
    public virtual void set_SpaceHandling(XmlSpaceHandling value);
    public virtual SvgElement DeepCopy();
    public virtual SvgElement DeepCopy();
    private sealed virtual override PointF Svg.ISvgBoundable.get_Location();
    private sealed virtual override SizeF Svg.ISvgBoundable.get_Size();
    private sealed virtual override RectangleF Svg.ISvgBoundable.get_Bounds();
    protected internal virtual bool PushTransforms(ISvgRenderer renderer);
    protected virtual void Render(ISvgRenderer renderer);
    public GraphicsPath get_Path();
    public RectangleF get_Bounds();
    public SizeF GetDimensions();
    internal SizeF GetDimensions(ISvgRenderer renderer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgFragment/<GetProperties>d__57")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public class Svg.SvgGdiPlusCannotBeLoadedException : Exception {
    private static string gdiErrorMsg;
    public SvgGdiPlusCannotBeLoadedException(string message);
    public SvgGdiPlusCannotBeLoadedException(Exception inner);
    public SvgGdiPlusCannotBeLoadedException(string message, Exception inner);
    protected SvgGdiPlusCannotBeLoadedException(SerializationInfo info, StreamingContext context);
}
[SvgElementAttribute("glyph")]
public class Svg.SvgGlyph : SvgPathBasedElement {
    private GraphicsPath _path;
    internal static List`1<Type> SvgGlyphClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgGlyphProperties;
    [SvgAttributeAttribute("d")]
public SvgPathSegmentList PathData { get; public set; }
    [SvgAttributeAttribute("glyph-name")]
public string GlyphName { get; public set; }
    [SvgAttributeAttribute("horiz-adv-x")]
public float HorizAdvX { get; public set; }
    [SvgAttributeAttribute("unicode")]
public string Unicode { get; public set; }
    [SvgAttributeAttribute("vert-adv-y")]
public float VertAdvY { get; public set; }
    [SvgAttributeAttribute("vert-origin-x")]
public float VertOriginX { get; public set; }
    [SvgAttributeAttribute("vert-origin-y")]
public float VertOriginY { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgGlyph();
    public SvgPathSegmentList get_PathData();
    public void set_PathData(SvgPathSegmentList value);
    public virtual string get_GlyphName();
    public virtual void set_GlyphName(string value);
    public float get_HorizAdvX();
    public void set_HorizAdvX(float value);
    public string get_Unicode();
    public void set_Unicode(string value);
    public float get_VertAdvY();
    public void set_VertAdvY(float value);
    public float get_VertOriginX();
    public void set_VertOriginX(float value);
    public float get_VertOriginY();
    public void set_VertOriginY(float value);
    public sealed virtual void OnPathUpdated();
    public virtual SvgElement DeepCopy();
    public virtual SvgElement DeepCopy();
    public virtual GraphicsPath Path(ISvgRenderer renderer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgGlyph/<GetProperties>d__34")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public abstract class Svg.SvgGradientServer : SvgPaintServer {
    [CompilerGeneratedAttribute]
private List`1<SvgGradientStop> <Stops>k__BackingField;
    internal static List`1<Type> SvgGradientServerClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgGradientServerProperties;
    public List`1<SvgGradientStop> Stops { get; }
    [SvgAttributeAttribute("spreadMethod")]
public SvgGradientSpreadMethod SpreadMethod { get; public set; }
    [SvgAttributeAttribute("gradientUnits")]
public SvgCoordinateUnits GradientUnits { get; public set; }
    [SvgAttributeAttribute("href", "http://www.w3.org/1999/xlink")]
public SvgDeferredPaintServer InheritGradient { get; public set; }
    [SvgAttributeAttribute("gradientTransform")]
public SvgTransformCollection GradientTransform { get; public set; }
    [SvgAttributeAttribute("stop-color")]
[TypeConverterAttribute("Svg.SvgPaintServerFactory")]
public SvgPaintServer StopColor { get; public set; }
    [SvgAttributeAttribute("stop-opacity")]
public float StopOpacity { get; public set; }
    protected Matrix EffectiveGradientTransform { get; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgGradientServer();
    protected virtual void AddElement(SvgElement child, int index);
    protected virtual void RemoveElement(SvgElement child);
    [CompilerGeneratedAttribute]
public List`1<SvgGradientStop> get_Stops();
    public SvgGradientSpreadMethod get_SpreadMethod();
    public void set_SpreadMethod(SvgGradientSpreadMethod value);
    public SvgCoordinateUnits get_GradientUnits();
    public void set_GradientUnits(SvgCoordinateUnits value);
    public SvgDeferredPaintServer get_InheritGradient();
    public void set_InheritGradient(SvgDeferredPaintServer value);
    public SvgTransformCollection get_GradientTransform();
    public void set_GradientTransform(SvgTransformCollection value);
    public SvgPaintServer get_StopColor();
    public void set_StopColor(SvgPaintServer value);
    public float get_StopOpacity();
    public void set_StopOpacity(float value);
    protected static double CalculateDistance(PointF first, PointF second);
    protected static float CalculateLength(PointF vector);
    private void LoadStops(SvgVisualElement parent);
    public virtual Brush GetBrush(SvgVisualElement styleOwner, ISvgRenderer renderer, float opacity, bool forStroke);
    protected abstract virtual Brush CreateBrush(SvgVisualElement renderingElement, ISvgRenderer renderer, float opacity, bool forStroke);
    protected Matrix get_EffectiveGradientTransform();
    protected ColorBlend GetColorBlend(ISvgRenderer renderer, float opacity, bool radial);
    protected SvgUnit NormalizeUnit(SvgUnit orig);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgGradientServer/<GetProperties>d__40")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
private bool <LoadStops>b__25_0(SvgGradientStop s);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgGradientSpreadMethodConverter")]
public enum Svg.SvgGradientSpreadMethod : Enum {
    public int value__;
    public static SvgGradientSpreadMethod Pad;
    public static SvgGradientSpreadMethod Reflect;
    public static SvgGradientSpreadMethod Repeat;
}
public class Svg.SvgGradientSpreadMethodConverter : EnumBaseConverter`1<SvgGradientSpreadMethod> {
}
[SvgElementAttribute("stop")]
public class Svg.SvgGradientStop : SvgElement {
    private SvgUnit _offset;
    internal static List`1<Type> SvgGradientStopClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgGradientStopProperties;
    [SvgAttributeAttribute("offset")]
public SvgUnit Offset { get; public set; }
    [SvgAttributeAttribute("stop-color")]
[TypeConverterAttribute("Svg.SvgPaintServerFactory")]
public SvgPaintServer StopColor { get; public set; }
    [SvgAttributeAttribute("stop-opacity")]
public float StopOpacity { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    public SvgGradientStop(SvgUnit offset, Color colour);
    private static SvgGradientStop();
    public SvgUnit get_Offset();
    public void set_Offset(SvgUnit value);
    public SvgPaintServer get_StopColor();
    public void set_StopColor(SvgPaintServer value);
    public float get_StopOpacity();
    public void set_StopOpacity(float value);
    public Color GetColor(SvgElement parent);
    public virtual SvgElement DeepCopy();
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgGradientStop/<GetProperties>d__23")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("g")]
public class Svg.SvgGroup : SvgMarkerElement {
    internal static List`1<Type> SvgGroupClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgGroupProperties;
    protected bool Renderable { get; }
    public RectangleF Bounds { get; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgGroup();
    protected virtual bool get_Renderable();
    public virtual SvgElement DeepCopy();
    public virtual GraphicsPath Path(ISvgRenderer renderer);
    public virtual RectangleF get_Bounds();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgGroup/<GetProperties>d__14")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("hkern")]
public class Svg.SvgHorizontalKern : SvgKern {
    internal static List`1<Type> SvgHorizontalKernClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgHorizontalKernProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgHorizontalKern();
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgHorizontalKern/<GetProperties>d__9")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public class Svg.SvgIDException : FormatException {
    public SvgIDException(string message);
    public SvgIDException(string message, Exception inner);
    protected SvgIDException(SerializationInfo info, StreamingContext context);
}
public class Svg.SvgIDExistsException : SvgIDException {
    public SvgIDExistsException(string message);
    public SvgIDExistsException(string message, Exception inner);
    protected SvgIDExistsException(SerializationInfo info, StreamingContext context);
}
public class Svg.SvgIDWrongFormatException : SvgIDException {
    public SvgIDWrongFormatException(string message);
    public SvgIDWrongFormatException(string message, Exception inner);
    protected SvgIDWrongFormatException(SerializationInfo info, StreamingContext context);
}
[SvgElementAttribute("image")]
public class Svg.SvgImage : SvgVisualElement {
    private static string MimeTypeSvg;
    private bool _gettingBounds;
    private GraphicsPath _path;
    internal static List`1<Type> SvgImageClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgImageProperties;
    public SvgPoint Location { get; }
    [SvgAttributeAttribute("preserveAspectRatio")]
public SvgAspectRatio AspectRatio { get; public set; }
    [SvgAttributeAttribute("x")]
public SvgUnit X { get; public set; }
    [SvgAttributeAttribute("y")]
public SvgUnit Y { get; public set; }
    [SvgAttributeAttribute("width")]
public SvgUnit Width { get; public set; }
    [SvgAttributeAttribute("height")]
public SvgUnit Height { get; public set; }
    [SvgAttributeAttribute("href", "http://www.w3.org/1999/xlink")]
public string Href { get; public set; }
    internal ExternalType ResolveExternalImages { get; }
    public RectangleF Bounds { get; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgImage();
    public SvgPoint get_Location();
    public SvgAspectRatio get_AspectRatio();
    public void set_AspectRatio(SvgAspectRatio value);
    public virtual SvgUnit get_X();
    public virtual void set_X(SvgUnit value);
    public virtual SvgUnit get_Y();
    public virtual void set_Y(SvgUnit value);
    public virtual SvgUnit get_Width();
    public virtual void set_Width(SvgUnit value);
    public virtual SvgUnit get_Height();
    public virtual void set_Height(SvgUnit value);
    public virtual string get_Href();
    public virtual void set_Href(string value);
    internal ExternalType get_ResolveExternalImages();
    private SvgDocument LoadSvg(Stream stream, Uri baseUri);
    public virtual SvgElement DeepCopy();
    public virtual RectangleF get_Bounds();
    public virtual GraphicsPath Path(ISvgRenderer renderer);
    protected virtual void Render(ISvgRenderer renderer);
    public object GetImage();
    public object GetImage(string uriString);
    private object GetImageFromDataUri(string uriString);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgImage/<GetProperties>d__42")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgImageRenderingConverter")]
public enum Svg.SvgImageRendering : Enum {
    public int value__;
    public static SvgImageRendering Inherit;
    public static SvgImageRendering Auto;
    public static SvgImageRendering OptimizeSpeed;
    public static SvgImageRendering OptimizeQuality;
}
public class Svg.SvgImageRenderingConverter : EnumBaseConverter`1<SvgImageRendering> {
}
public abstract class Svg.SvgKern : SvgElement {
    internal static List`1<Type> SvgKernClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgKernProperties;
    [SvgAttributeAttribute("g1")]
public string Glyph1 { get; public set; }
    [SvgAttributeAttribute("g2")]
public string Glyph2 { get; public set; }
    [SvgAttributeAttribute("u1")]
public string Unicode1 { get; public set; }
    [SvgAttributeAttribute("u2")]
public string Unicode2 { get; public set; }
    [SvgAttributeAttribute("k")]
public float Kerning { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgKern();
    public string get_Glyph1();
    public void set_Glyph1(string value);
    public string get_Glyph2();
    public void set_Glyph2(string value);
    public string get_Unicode1();
    public void set_Unicode1(string value);
    public string get_Unicode2();
    public void set_Unicode2(string value);
    public float get_Kerning();
    public void set_Kerning(float value);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgKern/<GetProperties>d__23")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("line")]
public class Svg.SvgLine : SvgMarkerElement {
    private SvgUnit _startX;
    private SvgUnit _startY;
    private SvgUnit _endX;
    private SvgUnit _endY;
    private GraphicsPath _path;
    internal static List`1<Type> SvgLineClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgLineProperties;
    [SvgAttributeAttribute("x1")]
public SvgUnit StartX { get; public set; }
    [SvgAttributeAttribute("y1")]
public SvgUnit StartY { get; public set; }
    [SvgAttributeAttribute("x2")]
public SvgUnit EndX { get; public set; }
    [SvgAttributeAttribute("y2")]
public SvgUnit EndY { get; public set; }
    public SvgPaintServer Fill { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgLine();
    public SvgUnit get_StartX();
    public void set_StartX(SvgUnit value);
    public SvgUnit get_StartY();
    public void set_StartY(SvgUnit value);
    public SvgUnit get_EndX();
    public void set_EndX(SvgUnit value);
    public SvgUnit get_EndY();
    public void set_EndY(SvgUnit value);
    public virtual SvgPaintServer get_Fill();
    public virtual void set_Fill(SvgPaintServer value);
    public virtual SvgElement DeepCopy();
    public virtual SvgElement DeepCopy();
    public virtual GraphicsPath Path(ISvgRenderer renderer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgLine/<GetProperties>d__31")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("linearGradient")]
public class Svg.SvgLinearGradientServer : SvgGradientServer {
    internal static List`1<Type> SvgLinearGradientServerClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgLinearGradientServerProperties;
    [SvgAttributeAttribute("x1")]
public SvgUnit X1 { get; public set; }
    [SvgAttributeAttribute("y1")]
public SvgUnit Y1 { get; public set; }
    [SvgAttributeAttribute("x2")]
public SvgUnit X2 { get; public set; }
    [SvgAttributeAttribute("y2")]
public SvgUnit Y2 { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgLinearGradientServer();
    public SvgUnit get_X1();
    public void set_X1(SvgUnit value);
    public SvgUnit get_Y1();
    public void set_Y1(SvgUnit value);
    public SvgUnit get_X2();
    public void set_X2(SvgUnit value);
    public SvgUnit get_Y2();
    public void set_Y2(SvgUnit value);
    public virtual SvgElement DeepCopy();
    protected virtual Brush CreateBrush(SvgVisualElement renderingElement, ISvgRenderer renderer, float opacity, bool forStroke);
    private LinePoints PointsToMove(ISvgBoundable boundable, PointF specifiedStart, PointF specifiedEnd);
    private GradientPoints ExpandGradient(ISvgBoundable boundable, PointF specifiedStart, PointF specifiedEnd);
    private IList`1<PointF> CandidateIntersections(RectangleF bounds, PointF p1, PointF p2);
    private static PointF MovePointAlongVector(PointF start, PointF unitVector, float distance);
    private ColorBlend CalculateColorBlend(ISvgRenderer renderer, float opacity, PointF specifiedStart, PointF effectiveStart, PointF specifiedEnd, PointF effectiveEnd);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgLinearGradientServer/<GetProperties>d__31")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("marker")]
public class Svg.SvgMarker : SvgPathBasedElement {
    private SvgVisualElement _markerElement;
    internal static List`1<Type> SvgMarkerClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgMarkerProperties;
    private SvgVisualElement MarkerElement { get; }
    [SvgAttributeAttribute("refX")]
public SvgUnit RefX { get; public set; }
    [SvgAttributeAttribute("refY")]
public SvgUnit RefY { get; public set; }
    [SvgAttributeAttribute("orient")]
public SvgOrient Orient { get; public set; }
    [SvgAttributeAttribute("overflow")]
public SvgOverflow Overflow { get; public set; }
    [SvgAttributeAttribute("viewBox")]
public SvgViewBox ViewBox { get; public set; }
    [SvgAttributeAttribute("preserveAspectRatio")]
public SvgAspectRatio AspectRatio { get; public set; }
    [SvgAttributeAttribute("markerWidth")]
public SvgUnit MarkerWidth { get; public set; }
    [SvgAttributeAttribute("markerHeight")]
public SvgUnit MarkerHeight { get; public set; }
    [SvgAttributeAttribute("markerUnits")]
public SvgMarkerUnits MarkerUnits { get; public set; }
    public SvgPaintServer Fill { get; }
    public SvgPaintServer Stroke { get; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgMarker();
    private SvgVisualElement get_MarkerElement();
    public virtual SvgUnit get_RefX();
    public virtual void set_RefX(SvgUnit value);
    public virtual SvgUnit get_RefY();
    public virtual void set_RefY(SvgUnit value);
    public virtual SvgOrient get_Orient();
    public virtual void set_Orient(SvgOrient value);
    public virtual SvgOverflow get_Overflow();
    public virtual void set_Overflow(SvgOverflow value);
    public virtual SvgViewBox get_ViewBox();
    public virtual void set_ViewBox(SvgViewBox value);
    public virtual SvgAspectRatio get_AspectRatio();
    public virtual void set_AspectRatio(SvgAspectRatio value);
    public virtual SvgUnit get_MarkerWidth();
    public virtual void set_MarkerWidth(SvgUnit value);
    public virtual SvgUnit get_MarkerHeight();
    public virtual void set_MarkerHeight(SvgUnit value);
    public virtual SvgMarkerUnits get_MarkerUnits();
    public virtual void set_MarkerUnits(SvgMarkerUnits value);
    public virtual SvgPaintServer get_Fill();
    public virtual SvgPaintServer get_Stroke();
    public virtual SvgElement DeepCopy();
    public virtual GraphicsPath Path(ISvgRenderer renderer);
    public void RenderMarker(ISvgRenderer pRenderer, SvgVisualElement pOwner, PointF pRefPoint, PointF pMarkerPoint1, PointF pMarkerPoint2, bool isStartMarker);
    public void RenderMarker(ISvgRenderer pRenderer, SvgVisualElement pOwner, PointF pRefPoint, PointF pMarkerPoint1, PointF pMarkerPoint2, PointF pMarkerPoint3);
    private void RenderPart2(float fAngle, ISvgRenderer pRenderer, SvgVisualElement pOwner, PointF pMarkerPoint);
    private Pen CreatePen(SvgVisualElement pPath, ISvgRenderer renderer);
    private GraphicsPath GetClone(SvgVisualElement pPath, ISvgRenderer renderer);
    private float AdjustForViewBoxWidth(float fWidth);
    private float AdjustForViewBoxHeight(float fHeight);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgMarker/<GetProperties>d__51")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public abstract class Svg.SvgMarkerElement : SvgPathBasedElement {
    internal static List`1<Type> SvgMarkerElementClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgMarkerElementProperties;
    [SvgAttributeAttribute("marker-end")]
public Uri MarkerEnd { get; public set; }
    [SvgAttributeAttribute("marker-mid")]
public Uri MarkerMid { get; public set; }
    [SvgAttributeAttribute("marker-start")]
public Uri MarkerStart { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgMarkerElement();
    public Uri get_MarkerEnd();
    public void set_MarkerEnd(Uri value);
    public Uri get_MarkerMid();
    public void set_MarkerMid(Uri value);
    public Uri get_MarkerStart();
    public void set_MarkerStart(Uri value);
    protected internal virtual bool RenderStroke(ISvgRenderer renderer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgMarkerElement/<GetProperties>d__18")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public class Svg.SvgMarkerUnitsConverter : EnumBaseConverter`1<SvgMarkerUnits> {
}
[SvgElementAttribute("mask")]
public class Svg.SvgMask : SvgElement {
    internal static List`1<Type> SvgMaskClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgMaskProperties;
    [SvgAttributeAttribute("maskUnits")]
public SvgCoordinateUnits MaskUnits { get; public set; }
    [SvgAttributeAttribute("maskContentUnits")]
public SvgCoordinateUnits MaskContentUnits { get; public set; }
    [SvgAttributeAttribute("x")]
public SvgUnit X { get; public set; }
    [SvgAttributeAttribute("y")]
public SvgUnit Y { get; public set; }
    [SvgAttributeAttribute("width")]
public SvgUnit Width { get; public set; }
    [SvgAttributeAttribute("height")]
public SvgUnit Height { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgMask();
    public SvgCoordinateUnits get_MaskUnits();
    public void set_MaskUnits(SvgCoordinateUnits value);
    public SvgCoordinateUnits get_MaskContentUnits();
    public void set_MaskContentUnits(SvgCoordinateUnits value);
    public SvgUnit get_X();
    public void set_X(SvgUnit value);
    public SvgUnit get_Y();
    public void set_Y(SvgUnit value);
    public SvgUnit get_Width();
    public void set_Width(SvgUnit value);
    public SvgUnit get_Height();
    public void set_Height(SvgUnit value);
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgMask/<GetProperties>d__27")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("missing-glyph")]
public class Svg.SvgMissingGlyph : SvgGlyph {
    internal static List`1<Type> SvgMissingGlyphClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgMissingGlyphProperties;
    [SvgAttributeAttribute("glyph-name")]
public string GlyphName { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgMissingGlyph();
    public virtual string get_GlyphName();
    public virtual void set_GlyphName(string value);
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgMissingGlyph/<GetProperties>d__12")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public class Svg.SvgMorphologyOperatorConverter : EnumBaseConverter`1<SvgMorphologyOperator> {
}
public static class Svg.SvgNamespaces : object {
    public static string SvgNamespace;
    public static string XLinkPrefix;
    public static string XLinkNamespace;
    public static string XmlPrefix;
    public static string XmlNamespace;
}
internal class Svg.SvgNodeReader : XmlNodeReader {
    private Dictionary`2<string, string> _entities;
    private string _value;
    private bool _customValue;
    public string Value { get; }
    public SvgNodeReader(XmlNode node, Dictionary`2<string, string> entities);
    public virtual string get_Value();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    private void ParseEntities();
    public virtual void ResolveEntity();
}
[TypeConverterAttribute("Svg.SvgNumberCollectionConverter")]
public class Svg.SvgNumberCollection : List`1<float> {
    public sealed virtual object Clone();
    public virtual string ToString();
}
public class Svg.SvgNumberCollectionConverter : TypeConverter {
    private static Char[] SplitChars;
    private static SvgNumberCollectionConverter();
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public static SvgNumberCollection Parse(ReadOnlySpan`1<char> numbers);
}
[DefaultMemberAttribute("Item")]
public class Svg.SvgOptions : object {
    private IDictionary`2<string, string> _properties;
    private Dictionary`2<string, string> _entities;
    public Dictionary`2<string, string> Entities { get; public set; }
    public string Css { get; public set; }
    public string Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<string> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public SvgOptions(Dictionary`2<string, string> entities);
    public SvgOptions(Dictionary`2<string, string> entities, string css);
    public SvgOptions(string css);
    public Dictionary`2<string, string> get_Entities();
    public void set_Entities(Dictionary`2<string, string> value);
    public string get_Css();
    public void set_Css(string value);
    public sealed virtual string get_Item(string key);
    public sealed virtual void set_Item(string key, string value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<string> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(string key, string value);
    public sealed virtual void Add(KeyValuePair`2<string, string> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, string> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool Remove(KeyValuePair`2<string, string> item);
    public sealed virtual bool TryGetValue(string key, String& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override object System.ICloneable.Clone();
    public SvgOptions Clone();
    protected string GetValue(string key, string defaultVal);
    protected void SetValue(string key, string value);
}
[TypeConverterAttribute("Svg.DataTypes.SvgOrientConverter")]
public class Svg.SvgOrient : object {
    private bool _isAuto;
    private float _angle;
    [CompilerGeneratedAttribute]
private bool <IsAutoStartReverse>k__BackingField;
    public float Angle { get; public set; }
    public bool IsAuto { get; public set; }
    public bool IsAutoStartReverse { get; public set; }
    public SvgOrient(bool isAuto);
    public SvgOrient(bool isAuto, bool isAutoStartReverse);
    public SvgOrient(float angle);
    public float get_Angle();
    public void set_Angle(float value);
    public bool get_IsAuto();
    public void set_IsAuto(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAutoStartReverse();
    [CompilerGeneratedAttribute]
public void set_IsAutoStartReverse(bool value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static SvgOrient op_Implicit(float value);
}
[TypeConverterAttribute("Svg.SvgOverflowConverter")]
public enum Svg.SvgOverflow : Enum {
    public int value__;
    public static SvgOverflow Hidden;
    public static SvgOverflow Inherit;
    public static SvgOverflow Auto;
    public static SvgOverflow Visible;
    public static SvgOverflow Scroll;
}
public class Svg.SvgOverflowConverter : EnumBaseConverter`1<SvgOverflow> {
}
[TypeConverterAttribute("Svg.SvgPaintServerFactory")]
public abstract class Svg.SvgPaintServer : SvgElement {
    [CompilerGeneratedAttribute]
private Func`1<SvgPaintServer> <GetCallback>k__BackingField;
    public static SvgPaintServer None;
    public static SvgPaintServer Inherit;
    public static SvgPaintServer NotSet;
    internal static List`1<Type> SvgPaintServerClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgPaintServerProperties;
    public Func`1<SvgPaintServer> GetCallback { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgPaintServer();
    [CompilerGeneratedAttribute]
public Func`1<SvgPaintServer> get_GetCallback();
    [CompilerGeneratedAttribute]
public void set_GetCallback(Func`1<SvgPaintServer> value);
    public virtual string ToString();
    protected virtual void Render(ISvgRenderer renderer);
    public abstract virtual Brush GetBrush(SvgVisualElement styleOwner, ISvgRenderer renderer, float opacity, bool forStroke);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgPaintServer/<GetProperties>d__18")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
internal class Svg.SvgPaintServerFactory : TypeConverter {
    private static SvgColourConverter _colourConverter;
    private static SvgPaintServerFactory();
    public static SvgPaintServer Create(string value, SvgDocument document);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[SvgElementAttribute("path")]
public class Svg.SvgPath : SvgMarkerElement {
    private GraphicsPath _path;
    internal static List`1<Type> SvgPathClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgPathProperties;
    [SvgAttributeAttribute("d")]
public SvgPathSegmentList PathData { get; public set; }
    [SvgAttributeAttribute("pathLength")]
public float PathLength { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgPath();
    public SvgPathSegmentList get_PathData();
    public void set_PathData(SvgPathSegmentList value);
    public float get_PathLength();
    public void set_PathLength(float value);
    public sealed virtual void OnPathUpdated();
    public virtual SvgElement DeepCopy();
    public virtual SvgElement DeepCopy();
    public virtual GraphicsPath Path(ISvgRenderer renderer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgPath/<GetProperties>d__19")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public abstract class Svg.SvgPathBasedElement : SvgVisualElement {
    internal static List`1<Type> SvgPathBasedElementClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgPathBasedElementProperties;
    public RectangleF Bounds { get; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgPathBasedElement();
    public virtual RectangleF get_Bounds();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgPathBasedElement/<GetProperties>d__10")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public class Svg.SvgPathBuilder : TypeConverter {
    public static SvgPathSegmentList Parse(ReadOnlySpan`1<char> path);
    private static void CreatePathSegment(char command, SvgPathSegmentList segments, CoordinateParserState& state, ReadOnlySpan`1<char> chars);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[SvgElementAttribute("pattern")]
public class Svg.SvgPatternServer : SvgPaintServer {
    private SvgUnit _x;
    private SvgUnit _y;
    private SvgUnit _width;
    private SvgUnit _height;
    private Nullable`1<SvgCoordinateUnits> _patternUnits;
    private Nullable`1<SvgCoordinateUnits> _patternContentUnits;
    private SvgViewBox _viewBox;
    internal static List`1<Type> SvgPatternServerClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgPatternServerProperties;
    [SvgAttributeAttribute("x")]
public SvgUnit X { get; public set; }
    [SvgAttributeAttribute("y")]
public SvgUnit Y { get; public set; }
    [SvgAttributeAttribute("width")]
public SvgUnit Width { get; public set; }
    [SvgAttributeAttribute("height")]
public SvgUnit Height { get; public set; }
    [SvgAttributeAttribute("patternUnits")]
public SvgCoordinateUnits PatternUnits { get; public set; }
    [SvgAttributeAttribute("patternContentUnits")]
public SvgCoordinateUnits PatternContentUnits { get; public set; }
    [SvgAttributeAttribute("viewBox")]
public SvgViewBox ViewBox { get; public set; }
    [SvgAttributeAttribute("href", "http://www.w3.org/1999/xlink")]
public SvgDeferredPaintServer InheritGradient { get; public set; }
    [SvgAttributeAttribute("overflow")]
public SvgOverflow Overflow { get; public set; }
    [SvgAttributeAttribute("preserveAspectRatio")]
public SvgAspectRatio AspectRatio { get; public set; }
    [SvgAttributeAttribute("patternTransform")]
public SvgTransformCollection PatternTransform { get; public set; }
    private Matrix EffectivePatternTransform { get; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgPatternServer();
    public SvgUnit get_X();
    public void set_X(SvgUnit value);
    public SvgUnit get_Y();
    public void set_Y(SvgUnit value);
    public SvgUnit get_Width();
    public void set_Width(SvgUnit value);
    public SvgUnit get_Height();
    public void set_Height(SvgUnit value);
    public SvgCoordinateUnits get_PatternUnits();
    public void set_PatternUnits(SvgCoordinateUnits value);
    public SvgCoordinateUnits get_PatternContentUnits();
    public void set_PatternContentUnits(SvgCoordinateUnits value);
    public sealed virtual SvgViewBox get_ViewBox();
    public sealed virtual void set_ViewBox(SvgViewBox value);
    public SvgDeferredPaintServer get_InheritGradient();
    public void set_InheritGradient(SvgDeferredPaintServer value);
    public sealed virtual SvgOverflow get_Overflow();
    public sealed virtual void set_Overflow(SvgOverflow value);
    public sealed virtual SvgAspectRatio get_AspectRatio();
    public sealed virtual void set_AspectRatio(SvgAspectRatio value);
    public SvgTransformCollection get_PatternTransform();
    public void set_PatternTransform(SvgTransformCollection value);
    public virtual SvgElement DeepCopy();
    public virtual SvgElement DeepCopy();
    private Matrix get_EffectivePatternTransform();
    public virtual Brush GetBrush(SvgVisualElement renderingElement, ISvgRenderer renderer, float opacity, bool forStroke);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgPatternServer/<GetProperties>d__53")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public class Svg.SvgPoint : ValueType {
    private SvgUnit x;
    private SvgUnit y;
    public SvgUnit X { get; public set; }
    public SvgUnit Y { get; public set; }
    public SvgPoint(string x, string y);
    public SvgPoint(SvgUnit x, SvgUnit y);
    public SvgUnit get_X();
    public void set_X(SvgUnit value);
    public SvgUnit get_Y();
    public void set_Y(SvgUnit value);
    public bool IsEmpty();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public PointF ToDeviceValue(ISvgRenderer renderer, SvgElement owner);
}
[TypeConverterAttribute("Svg.SvgPointCollectionConverter")]
public class Svg.SvgPointCollection : List`1<SvgUnit> {
    public sealed virtual object Clone();
    public virtual string ToString();
}
internal class Svg.SvgPointCollectionConverter : TypeConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[SvgElementAttribute("polygon")]
public class Svg.SvgPolygon : SvgMarkerElement {
    private GraphicsPath _path;
    internal static List`1<Type> SvgPolygonClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgPolygonProperties;
    [SvgAttributeAttribute("points")]
public SvgPointCollection Points { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgPolygon();
    public SvgPointCollection get_Points();
    public void set_Points(SvgPointCollection value);
    public virtual SvgElement DeepCopy();
    public virtual GraphicsPath Path(ISvgRenderer renderer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgPolygon/<GetProperties>d__14")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("polyline")]
public class Svg.SvgPolyline : SvgPolygon {
    private GraphicsPath _path;
    internal static List`1<Type> SvgPolylineClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgPolylineProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgPolyline();
    public virtual SvgElement DeepCopy();
    public virtual GraphicsPath Path(ISvgRenderer renderer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgPolyline/<GetProperties>d__11")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.DataTypes.SvgPreserveAspectRatioConverter")]
public enum Svg.SvgPreserveAspectRatio : Enum {
    public int value__;
    public static SvgPreserveAspectRatio xMidYMid;
    public static SvgPreserveAspectRatio none;
    public static SvgPreserveAspectRatio xMinYMin;
    public static SvgPreserveAspectRatio xMidYMin;
    public static SvgPreserveAspectRatio xMaxYMin;
    public static SvgPreserveAspectRatio xMinYMid;
    public static SvgPreserveAspectRatio xMaxYMid;
    public static SvgPreserveAspectRatio xMinYMax;
    public static SvgPreserveAspectRatio xMidYMax;
    public static SvgPreserveAspectRatio xMaxYMax;
}
internal class Svg.SvgPropertyDescriptor`2 : object {
    [CompilerGeneratedAttribute]
private DescriptorType <DescriptorType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<T, TU> <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<T, TU> <Setter>k__BackingField;
    public DescriptorType DescriptorType { get; }
    public string AttributeName { get; }
    public string AttributeNamespace { get; }
    public TypeConverter Converter { get; }
    public Type Type { get; }
    private Func`2<T, TU> Getter { get; }
    private Action`2<T, TU> Setter { get; }
    public SvgPropertyDescriptor`2(DescriptorType descriptorType, string attributeName, string attributeNamespace, TypeConverter converter, Func`2<T, TU> getter, Action`2<T, TU> setter);
    [CompilerGeneratedAttribute]
public sealed virtual DescriptorType get_DescriptorType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_AttributeName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_AttributeNamespace();
    [CompilerGeneratedAttribute]
public sealed virtual TypeConverter get_Converter();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    [CompilerGeneratedAttribute]
private Func`2<T, TU> get_Getter();
    [CompilerGeneratedAttribute]
private Action`2<T, TU> get_Setter();
    public sealed virtual object GetValue(object component);
    public sealed virtual void SetValue(object component, ITypeDescriptorContext context, CultureInfo culture, object value);
}
[SvgElementAttribute("radialGradient")]
public class Svg.SvgRadialGradientServer : SvgGradientServer {
    internal static List`1<Type> SvgRadialGradientServerClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgRadialGradientServerProperties;
    [SvgAttributeAttribute("cx")]
public SvgUnit CenterX { get; public set; }
    [SvgAttributeAttribute("cy")]
public SvgUnit CenterY { get; public set; }
    [SvgAttributeAttribute("r")]
public SvgUnit Radius { get; public set; }
    [SvgAttributeAttribute("fx")]
public SvgUnit FocalX { get; public set; }
    [SvgAttributeAttribute("fy")]
public SvgUnit FocalY { get; public set; }
    [SvgAttributeAttribute("fr")]
public SvgUnit FocalRadius { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgRadialGradientServer();
    public SvgUnit get_CenterX();
    public void set_CenterX(SvgUnit value);
    public SvgUnit get_CenterY();
    public void set_CenterY(SvgUnit value);
    public SvgUnit get_Radius();
    public void set_Radius(SvgUnit value);
    public SvgUnit get_FocalX();
    public void set_FocalX(SvgUnit value);
    public SvgUnit get_FocalY();
    public void set_FocalY(SvgUnit value);
    public SvgUnit get_FocalRadius();
    public void set_FocalRadius(SvgUnit value);
    public virtual SvgElement DeepCopy();
    protected virtual Brush CreateBrush(SvgVisualElement renderingElement, ISvgRenderer renderer, float opacity, bool forStroke);
    private float CalcScale(RectangleF bounds, GraphicsPath path, Graphics graphics);
    [IteratorStateMachineAttribute("Svg.SvgRadialGradientServer/<GetDifference>d__21")]
private static IEnumerable`1<GraphicsPath> GetDifference(RectangleF subject, GraphicsPath clip);
    private static GraphicsPath CreateGraphicsPath(PointF origin, PointF centerPoint, float effectiveRadius);
    private ColorBlend CalculateColorBlend(ISvgRenderer renderer, float opacity, float scale, Single& outScale);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgRadialGradientServer/<GetProperties>d__32")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("rect")]
public class Svg.SvgRectangle : SvgPathBasedElement {
    private SvgUnit _x;
    private SvgUnit _y;
    private SvgUnit _width;
    private SvgUnit _height;
    private SvgUnit _cornerRadiusX;
    private SvgUnit _cornerRadiusY;
    private GraphicsPath _path;
    internal static List`1<Type> SvgRectangleClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgRectangleProperties;
    public SvgPoint Location { get; }
    [SvgAttributeAttribute("x")]
public SvgUnit X { get; public set; }
    [SvgAttributeAttribute("y")]
public SvgUnit Y { get; public set; }
    [SvgAttributeAttribute("width")]
public SvgUnit Width { get; public set; }
    [SvgAttributeAttribute("height")]
public SvgUnit Height { get; public set; }
    [SvgAttributeAttribute("rx")]
public SvgUnit CornerRadiusX { get; public set; }
    [SvgAttributeAttribute("ry")]
public SvgUnit CornerRadiusY { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgRectangle();
    public SvgPoint get_Location();
    public SvgUnit get_X();
    public void set_X(SvgUnit value);
    public SvgUnit get_Y();
    public void set_Y(SvgUnit value);
    public SvgUnit get_Width();
    public void set_Width(SvgUnit value);
    public SvgUnit get_Height();
    public void set_Height(SvgUnit value);
    public SvgUnit get_CornerRadiusX();
    public void set_CornerRadiusX(SvgUnit value);
    public SvgUnit get_CornerRadiusY();
    public void set_CornerRadiusY(SvgUnit value);
    public virtual SvgElement DeepCopy();
    public virtual SvgElement DeepCopy();
    public virtual GraphicsPath Path(ISvgRenderer renderer);
    protected virtual void Render(ISvgRenderer renderer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgRectangle/<GetProperties>d__39")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public class Svg.SvgRenderer : object {
    private Graphics _innerGraphics;
    private bool _disposable;
    private Image _image;
    private Stack`1<ISvgBoundable> _boundables;
    public float DpiY { get; }
    public SmoothingMode SmoothingMode { get; public set; }
    public Matrix Transform { get; public set; }
    private SvgRenderer(Graphics graphics, bool disposable);
    private SvgRenderer(Graphics graphics, Image image);
    public sealed virtual void SetBoundable(ISvgBoundable boundable);
    public sealed virtual ISvgBoundable GetBoundable();
    public sealed virtual ISvgBoundable PopBoundable();
    public sealed virtual float get_DpiY();
    public sealed virtual void DrawImage(Image image, RectangleF destRect, RectangleF srcRect, GraphicsUnit graphicsUnit);
    public sealed virtual void DrawImage(Image image, RectangleF destRect, RectangleF srcRect, GraphicsUnit graphicsUnit, float opacity);
    public sealed virtual void DrawImageUnscaled(Image image, Point location);
    public sealed virtual void DrawPath(Pen pen, GraphicsPath path);
    public sealed virtual void FillPath(Brush brush, GraphicsPath path);
    public sealed virtual Region GetClip();
    public sealed virtual void RotateTransform(float fAngle, MatrixOrder order);
    public sealed virtual void ScaleTransform(float sx, float sy, MatrixOrder order);
    public sealed virtual void SetClip(Region region, CombineMode combineMode);
    public sealed virtual void TranslateTransform(float dx, float dy, MatrixOrder order);
    public sealed virtual SmoothingMode get_SmoothingMode();
    public sealed virtual void set_SmoothingMode(SmoothingMode value);
    public sealed virtual Matrix get_Transform();
    public sealed virtual void set_Transform(Matrix value);
    public sealed virtual void Dispose();
    private sealed virtual override Graphics Svg.IGraphicsProvider.GetGraphics();
    private static Graphics CreateGraphics(Image image);
    public static ISvgRenderer FromImage(Image image);
    public static ISvgRenderer FromGraphics(Graphics graphics);
    public static ISvgRenderer FromNull();
}
[SvgElementAttribute("script")]
public class Svg.SvgScript : SvgElement {
    internal static List`1<Type> SvgScriptClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgScriptProperties;
    public string Script { get; public set; }
    [SvgAttributeAttribute("type")]
public string ScriptType { get; public set; }
    [SvgAttributeAttribute("crossorigin")]
public string CrossOrigin { get; public set; }
    [SvgAttributeAttribute("href", "http://www.w3.org/1999/xlink")]
public string Href { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgScript();
    public string get_Script();
    public void set_Script(string value);
    public string get_ScriptType();
    public void set_ScriptType(string value);
    public string get_CrossOrigin();
    public void set_CrossOrigin(string value);
    public string get_Href();
    public void set_Href(string value);
    public virtual SvgElement DeepCopy();
    protected virtual void WriteChildren(XmlWriter writer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgScript/<GetProperties>d__22")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgShapeRenderingConverter")]
public enum Svg.SvgShapeRendering : Enum {
    public int value__;
    public static SvgShapeRendering Inherit;
    public static SvgShapeRendering Auto;
    public static SvgShapeRendering OptimizeSpeed;
    public static SvgShapeRendering CrispEdges;
    public static SvgShapeRendering GeometricPrecision;
}
public class Svg.SvgShapeRenderingConverter : EnumBaseConverter`1<SvgShapeRendering> {
}
public class Svg.SvgStitchTypeConverter : EnumBaseConverter`1<SvgStitchType> {
}
internal class Svg.SvgStrokeDashArrayConverter : SvgUnitCollectionConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[TypeConverterAttribute("Svg.SvgStrokeLineCapConverter")]
public enum Svg.SvgStrokeLineCap : Enum {
    public int value__;
    public static SvgStrokeLineCap Inherit;
    public static SvgStrokeLineCap Butt;
    public static SvgStrokeLineCap Round;
    public static SvgStrokeLineCap Square;
}
public class Svg.SvgStrokeLineCapConverter : EnumBaseConverter`1<SvgStrokeLineCap> {
}
[TypeConverterAttribute("Svg.SvgStrokeLineJoinConverter")]
public enum Svg.SvgStrokeLineJoin : Enum {
    public int value__;
    public static SvgStrokeLineJoin Inherit;
    public static SvgStrokeLineJoin Miter;
    public static SvgStrokeLineJoin MiterClip;
    public static SvgStrokeLineJoin Round;
    public static SvgStrokeLineJoin Bevel;
    public static SvgStrokeLineJoin Arcs;
}
public class Svg.SvgStrokeLineJoinConverter : EnumBaseConverter`1<SvgStrokeLineJoin> {
}
[SvgElementAttribute("switch")]
public class Svg.SvgSwitch : SvgVisualElement {
    internal static List`1<Type> SvgSwitchClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgSwitchProperties;
    public RectangleF Bounds { get; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgSwitch();
    public virtual SvgElement DeepCopy();
    public virtual GraphicsPath Path(ISvgRenderer renderer);
    public virtual RectangleF get_Bounds();
    protected virtual void Render(ISvgRenderer renderer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgSwitch/<GetProperties>d__13")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("symbol")]
public class Svg.SvgSymbol : SvgVisualElement {
    internal static List`1<Type> SvgSymbolClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgSymbolProperties;
    [SvgAttributeAttribute("viewBox")]
public SvgViewBox ViewBox { get; public set; }
    [SvgAttributeAttribute("preserveAspectRatio")]
public SvgAspectRatio AspectRatio { get; public set; }
    protected bool Renderable { get; }
    public RectangleF Bounds { get; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgSymbol();
    public SvgViewBox get_ViewBox();
    public void set_ViewBox(SvgViewBox value);
    public SvgAspectRatio get_AspectRatio();
    public void set_AspectRatio(SvgAspectRatio value);
    protected virtual bool get_Renderable();
    public virtual SvgElement DeepCopy();
    public virtual GraphicsPath Path(ISvgRenderer renderer);
    public virtual RectangleF get_Bounds();
    protected internal virtual bool PushTransforms(ISvgRenderer renderer);
    protected virtual void Render(ISvgRenderer renderer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgSymbol/<GetProperties>d__22")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("text")]
public class Svg.SvgText : SvgTextBase {
    internal static List`1<Type> SvgTextClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgTextProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    public SvgText(string text);
    private static SvgText();
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgText/<GetProperties>d__11")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgTextAnchorConverter")]
public enum Svg.SvgTextAnchor : Enum {
    public int value__;
    public static SvgTextAnchor Inherit;
    public static SvgTextAnchor Start;
    public static SvgTextAnchor Middle;
    public static SvgTextAnchor End;
}
public class Svg.SvgTextAnchorConverter : EnumBaseConverter`1<SvgTextAnchor> {
}
public abstract class Svg.SvgTextBase : SvgVisualElement {
    private SvgUnitCollection _x;
    private SvgUnitCollection _y;
    private SvgUnitCollection _dy;
    private SvgUnitCollection _dx;
    private string _rotate;
    private List`1<float> _rotations;
    private static Regex MultipleSpaces;
    [CompilerGeneratedAttribute]
private EventHandler`1<StringArg> Change;
    private GraphicsPath _path;
    internal static List`1<Type> SvgTextBaseClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgTextBaseProperties;
    public string Text { get; public set; }
    unknown XmlSpaceHandling SpaceHandling {public set; }
    [SvgAttributeAttribute("x")]
public SvgUnitCollection X { get; public set; }
    [SvgAttributeAttribute("dx")]
public SvgUnitCollection Dx { get; public set; }
    [SvgAttributeAttribute("y")]
public SvgUnitCollection Y { get; public set; }
    [SvgAttributeAttribute("dy")]
public SvgUnitCollection Dy { get; public set; }
    [SvgAttributeAttribute("rotate")]
public string Rotate { get; public set; }
    [SvgAttributeAttribute("textLength")]
public SvgUnit TextLength { get; public set; }
    [SvgAttributeAttribute("lengthAdjust")]
public SvgTextLengthAdjust LengthAdjust { get; public set; }
    [SvgAttributeAttribute("letter-spacing")]
public SvgUnit LetterSpacing { get; public set; }
    [SvgAttributeAttribute("word-spacing")]
public SvgUnit WordSpacing { get; public set; }
    public SvgPaintServer Fill { get; public set; }
    public RectangleF Bounds { get; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgTextBase();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual void set_SpaceHandling(XmlSpaceHandling value);
    public virtual SvgUnitCollection get_X();
    public virtual void set_X(SvgUnitCollection value);
    public virtual SvgUnitCollection get_Dx();
    public virtual void set_Dx(SvgUnitCollection value);
    public virtual SvgUnitCollection get_Y();
    public virtual void set_Y(SvgUnitCollection value);
    public virtual SvgUnitCollection get_Dy();
    public virtual void set_Dy(SvgUnitCollection value);
    private void OnCoordinateChanged(object sender, NotifyCollectionChangedEventArgs args);
    public virtual string get_Rotate();
    public virtual void set_Rotate(string value);
    public virtual SvgUnit get_TextLength();
    public virtual void set_TextLength(SvgUnit value);
    public virtual SvgTextLengthAdjust get_LengthAdjust();
    public virtual void set_LengthAdjust(SvgTextLengthAdjust value);
    public virtual SvgUnit get_LetterSpacing();
    public virtual void set_LetterSpacing(SvgUnit value);
    public virtual SvgUnit get_WordSpacing();
    public virtual void set_WordSpacing(SvgUnit value);
    public virtual SvgPaintServer get_Fill();
    public virtual void set_Fill(SvgPaintServer value);
    public virtual string ToString();
    protected string PrepareText(string value);
    private string ApplyTransformation(string value);
    [CompilerGeneratedAttribute]
public void add_Change(EventHandler`1<StringArg> value);
    [CompilerGeneratedAttribute]
public void remove_Change(EventHandler`1<StringArg> value);
    protected void OnChange(string newString, string sessionID);
    protected void RaiseChange(object sender, StringArg s);
    public virtual void RegisterEvents(ISvgEventCaller caller);
    public virtual void UnregisterEvents(ISvgEventCaller caller);
    public virtual SvgElement DeepCopy();
    public virtual bool ShouldWriteElement();
    public virtual RectangleF get_Bounds();
    protected internal virtual void RenderFillAndStroke(ISvgRenderer renderer);
    internal virtual IEnumerable`1<ISvgNode> GetContentNodes();
    protected virtual GraphicsPath GetBaselinePath(ISvgRenderer renderer);
    protected virtual float GetAuthorPathLength();
    public virtual GraphicsPath Path(ISvgRenderer renderer);
    private void SetPath(TextDrawingState state);
    private void SetPath(TextDrawingState state, bool doMeasurements);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgTextBase/<GetProperties>d__76")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgTextDecorationConverter")]
[FlagsAttribute]
public enum Svg.SvgTextDecoration : Enum {
    public int value__;
    public static SvgTextDecoration Inherit;
    public static SvgTextDecoration None;
    public static SvgTextDecoration Underline;
    public static SvgTextDecoration Overline;
    public static SvgTextDecoration LineThrough;
    public static SvgTextDecoration Blink;
}
public class Svg.SvgTextDecorationConverter : EnumBaseConverter`1<SvgTextDecoration> {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[TypeConverterAttribute("Svg.SvgTextLengthAdjustConverter")]
public enum Svg.SvgTextLengthAdjust : Enum {
    public int value__;
    public static SvgTextLengthAdjust Spacing;
    public static SvgTextLengthAdjust SpacingAndGlyphs;
}
public class Svg.SvgTextLengthAdjustConverter : EnumBaseConverter`1<SvgTextLengthAdjust> {
}
[SvgElementAttribute("textPath")]
public class Svg.SvgTextPath : SvgTextBase {
    internal static List`1<Type> SvgTextPathClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgTextPathProperties;
    public SvgUnitCollection Dx { get; public set; }
    [SvgAttributeAttribute("startOffset")]
public SvgUnit StartOffset { get; public set; }
    [SvgAttributeAttribute("method")]
public SvgTextPathMethod Method { get; public set; }
    [SvgAttributeAttribute("spacing")]
public SvgTextPathSpacing Spacing { get; public set; }
    [SvgAttributeAttribute("href", "http://www.w3.org/1999/xlink")]
public Uri ReferencedPath { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgTextPath();
    public virtual SvgUnitCollection get_Dx();
    public virtual void set_Dx(SvgUnitCollection value);
    public virtual SvgUnit get_StartOffset();
    public virtual void set_StartOffset(SvgUnit value);
    public virtual SvgTextPathMethod get_Method();
    public virtual void set_Method(SvgTextPathMethod value);
    public virtual SvgTextPathSpacing get_Spacing();
    public virtual void set_Spacing(SvgTextPathSpacing value);
    public virtual Uri get_ReferencedPath();
    public virtual void set_ReferencedPath(Uri value);
    public virtual SvgElement DeepCopy();
    protected virtual GraphicsPath GetBaselinePath(ISvgRenderer renderer);
    protected virtual float GetAuthorPathLength();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgTextPath/<GetProperties>d__26")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgTextPathMethodConverter")]
public enum Svg.SvgTextPathMethod : Enum {
    public int value__;
    public static SvgTextPathMethod Align;
    public static SvgTextPathMethod Stretch;
}
public class Svg.SvgTextPathMethodConverter : EnumBaseConverter`1<SvgTextPathMethod> {
}
[TypeConverterAttribute("Svg.SvgTextPathSpacingConverter")]
public enum Svg.SvgTextPathSpacing : Enum {
    public int value__;
    public static SvgTextPathSpacing Exact;
    public static SvgTextPathSpacing Auto;
}
public class Svg.SvgTextPathSpacingConverter : EnumBaseConverter`1<SvgTextPathSpacing> {
}
internal class Svg.SvgTextReader : XmlTextReader {
    private Dictionary`2<string, string> _entities;
    private string _value;
    private bool _customValue;
    public string Value { get; }
    public SvgTextReader(Stream stream, Dictionary`2<string, string> entities);
    public SvgTextReader(TextReader reader, Dictionary`2<string, string> entities);
    public virtual string get_Value();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    private void ParseEntities();
    public virtual void ResolveEntity();
}
[SvgElementAttribute("tref")]
public class Svg.SvgTextRef : SvgTextBase {
    internal static List`1<Type> SvgTextRefClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgTextRefProperties;
    [SvgAttributeAttribute("href", "http://www.w3.org/1999/xlink")]
public Uri ReferencedElement { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgTextRef();
    public virtual Uri get_ReferencedElement();
    public virtual void set_ReferencedElement(Uri value);
    public virtual SvgElement DeepCopy();
    internal virtual IEnumerable`1<ISvgNode> GetContentNodes();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgTextRef/<GetProperties>d__13")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgTextRenderingConverter")]
public enum Svg.SvgTextRendering : Enum {
    public int value__;
    public static SvgTextRendering Inherit;
    public static SvgTextRendering Auto;
    public static SvgTextRendering OptimizeSpeed;
    public static SvgTextRendering OptimizeLegibility;
    public static SvgTextRendering GeometricPrecision;
}
public class Svg.SvgTextRenderingConverter : EnumBaseConverter`1<SvgTextRendering> {
}
[SvgElementAttribute("tspan")]
public class Svg.SvgTextSpan : SvgTextBase {
    internal static List`1<Type> SvgTextSpanClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgTextSpanProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgTextSpan();
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgTextSpan/<GetProperties>d__9")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgTextTransformationConverter")]
[FlagsAttribute]
public enum Svg.SvgTextTransformation : Enum {
    public int value__;
    public static SvgTextTransformation Inherit;
    public static SvgTextTransformation None;
    public static SvgTextTransformation Capitalize;
    public static SvgTextTransformation Uppercase;
    public static SvgTextTransformation Lowercase;
}
public class Svg.SvgTextTransformationConverter : EnumBaseConverter`1<SvgTextTransformation> {
}
[SvgElementAttribute("title")]
public class Svg.SvgTitle : SvgElement {
    internal static List`1<Type> SvgTitleClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgTitleProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgTitle();
    public virtual string ToString();
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgTitle/<GetProperties>d__10")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public class Svg.SvgTurbulenceTypeConverter : EnumBaseConverter`1<SvgTurbulenceType> {
}
[TypeConverterAttribute("Svg.SvgUnitConverter")]
public class Svg.SvgUnit : ValueType {
    private SvgUnitType _type;
    private float _value;
    private bool _isEmpty;
    private Nullable`1<float> _deviceValue;
    public static SvgUnit Empty;
    public static SvgUnit None;
    public bool IsEmpty { get; }
    public bool IsNone { get; }
    public float Value { get; }
    public SvgUnitType Type { get; }
    public SvgUnit(SvgUnitType type, float value);
    public SvgUnit(float value);
    private static SvgUnit();
    public bool get_IsEmpty();
    public bool get_IsNone();
    public float get_Value();
    public SvgUnitType get_Type();
    public SvgUnit ToPercentage();
    public virtual bool Equals(object obj);
    public bool Equals(SvgUnit other);
    public virtual int GetHashCode();
    public static bool op_Equality(SvgUnit lhs, SvgUnit rhs);
    public static bool op_Inequality(SvgUnit lhs, SvgUnit rhs);
    public virtual string ToString();
    public static SvgUnit op_Implicit(float value);
    public float ToDeviceValue(ISvgRenderer renderer, UnitRenderingType renderType, SvgElement owner);
    public static float op_Implicit(SvgUnit value);
    private IFontDefn GetFont(ISvgRenderer renderer, SvgElement owner, SvgFontManager fontManager);
    public static PointF GetDevicePoint(SvgUnit x, SvgUnit y, ISvgRenderer renderer, SvgElement owner);
    public static PointF GetDevicePointOffset(SvgUnit x, SvgUnit y, ISvgRenderer renderer, SvgElement owner);
    public static SizeF GetDeviceSize(SvgUnit width, SvgUnit height, ISvgRenderer renderer, SvgElement owner);
}
[TypeConverterAttribute("Svg.SvgUnitCollectionConverter")]
public class Svg.SvgUnitCollection : ObservableCollection`1<SvgUnit> {
    public static string None;
    public static string Inherit;
    [CompilerGeneratedAttribute]
private string <StringForEmptyValue>k__BackingField;
    public string StringForEmptyValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_StringForEmptyValue();
    [CompilerGeneratedAttribute]
public void set_StringForEmptyValue(string value);
    public void AddRange(IEnumerable`1<SvgUnit> collection);
    public virtual string ToString();
    public static bool IsNullOrEmpty(SvgUnitCollection collection);
    public sealed virtual object Clone();
}
public class Svg.SvgUnitCollectionConverter : TypeConverter {
    private static Char[] SplitChars;
    private static SvgUnitCollectionConverter();
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public static SvgUnitCollection Parse(ReadOnlySpan`1<char> points);
}
public class Svg.SvgUnitConverter : TypeConverter {
    public static SvgUnit Parse(ReadOnlySpan`1<char> unit);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public enum Svg.SvgUnitType : Enum {
    public int value__;
    public static SvgUnitType None;
    public static SvgUnitType Pixel;
    public static SvgUnitType Em;
    public static SvgUnitType Ex;
    public static SvgUnitType Percentage;
    public static SvgUnitType User;
    public static SvgUnitType Inch;
    public static SvgUnitType Centimeter;
    public static SvgUnitType Millimeter;
    public static SvgUnitType Pica;
    public static SvgUnitType Point;
}
public class Svg.SvgUnknownElement : SvgElement {
    internal static List`1<Type> SvgUnknownElementClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgUnknownElementProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    public SvgUnknownElement(string elementName);
    private static SvgUnknownElement();
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgUnknownElement/<GetProperties>d__11")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("use")]
public class Svg.SvgUse : SvgVisualElement {
    internal static List`1<Type> SvgUseClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgUseProperties;
    [SvgAttributeAttribute("href", "http://www.w3.org/1999/xlink")]
public Uri ReferencedElement { get; public set; }
    [SvgAttributeAttribute("x")]
public SvgUnit X { get; public set; }
    [SvgAttributeAttribute("y")]
public SvgUnit Y { get; public set; }
    [SvgAttributeAttribute("width")]
public SvgUnit Width { get; public set; }
    [SvgAttributeAttribute("height")]
public SvgUnit Height { get; public set; }
    public SvgPoint Location { get; }
    protected bool Renderable { get; }
    public RectangleF Bounds { get; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgUse();
    public virtual Uri get_ReferencedElement();
    public virtual void set_ReferencedElement(Uri value);
    private bool ElementReferencesUri(SvgElement element, List`1<Uri> elementUris);
    private bool ReferencedElementReferencesUri(List`1<Uri> elementUris);
    private bool HasRecursiveReference();
    public virtual SvgUnit get_X();
    public virtual void set_X(SvgUnit value);
    public virtual SvgUnit get_Y();
    public virtual void set_Y(SvgUnit value);
    public virtual SvgUnit get_Width();
    public virtual void set_Width(SvgUnit value);
    public virtual SvgUnit get_Height();
    public virtual void set_Height(SvgUnit value);
    public SvgPoint get_Location();
    protected virtual bool get_Renderable();
    public virtual SvgElement DeepCopy();
    protected internal virtual bool PushTransforms(ISvgRenderer renderer);
    public virtual GraphicsPath Path(ISvgRenderer renderer);
    public virtual RectangleF get_Bounds();
    protected virtual void RenderChildren(ISvgRenderer renderer);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgUse/<GetProperties>d__36")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[SvgElementAttribute("vkern")]
public class Svg.SvgVerticalKern : SvgKern {
    internal static List`1<Type> SvgVerticalKernClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgVerticalKernProperties;
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgVerticalKern();
    public virtual SvgElement DeepCopy();
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgVerticalKern/<GetProperties>d__9")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
[TypeConverterAttribute("Svg.SvgViewBoxConverter")]
public class Svg.SvgViewBox : ValueType {
    public static SvgViewBox Empty;
    [CompilerGeneratedAttribute]
private float <MinX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MinY>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    public float MinX { get; public set; }
    public float MinY { get; public set; }
    public float Width { get; public set; }
    public float Height { get; public set; }
    public SvgViewBox(float minX, float minY, float width, float height);
    private static SvgViewBox();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_MinX();
    [CompilerGeneratedAttribute]
public void set_MinX(float value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_MinY();
    [CompilerGeneratedAttribute]
public void set_MinY(float value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(float value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(float value);
    public static RectangleF op_Implicit(SvgViewBox value);
    public static SvgViewBox op_Implicit(RectangleF value);
    public virtual bool Equals(object obj);
    public bool Equals(SvgViewBox other);
    public virtual int GetHashCode();
    public static bool op_Equality(SvgViewBox lhs, SvgViewBox rhs);
    public static bool op_Inequality(SvgViewBox lhs, SvgViewBox rhs);
    public void AddViewBoxTransform(SvgAspectRatio aspectRatio, ISvgRenderer renderer, SvgFragment frag);
}
internal class Svg.SvgViewBoxConverter : TypeConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public enum Svg.SvgVisibility : Enum {
    public int value__;
    public static SvgVisibility Visible;
    public static SvgVisibility Hidden;
    public static SvgVisibility Inherit;
}
public abstract class Svg.SvgVisualElement : SvgElement {
    private Nullable`1<bool> _requiresSmoothRendering;
    private Region _previousClip;
    internal static List`1<Type> SvgVisualElementClassNames;
    internal static Dictionary`2<string, ISvgPropertyDescriptor> SvgVisualElementProperties;
    [SvgAttributeAttribute("clip")]
public string Clip { get; public set; }
    [SvgAttributeAttribute("clip-path")]
public Uri ClipPath { get; public set; }
    [SvgAttributeAttribute("clip-rule")]
public SvgClipRule ClipRule { get; public set; }
    [SvgAttributeAttribute("filter")]
public Uri Filter { get; public set; }
    protected bool RequiresSmoothRendering { get; }
    protected bool Renderable { get; }
    private PointF Svg.ISvgBoundable.Location { get; }
    private SizeF Svg.ISvgBoundable.Size { get; }
    public RectangleF Bounds { get; }
    public bool Visible { get; }
    protected bool Displayable { get; }
    [SvgAttributeAttribute("enable-background")]
public string EnableBackground { get; public set; }
    internal string AttributeName { get; }
    internal List`1<Type> ClassNames { get; }
    internal Dictionary`2<string, ISvgPropertyDescriptor> Properties { get; }
    private static SvgVisualElement();
    public virtual string get_Clip();
    public virtual void set_Clip(string value);
    public virtual Uri get_ClipPath();
    public virtual void set_ClipPath(Uri value);
    public sealed virtual SvgClipRule get_ClipRule();
    public sealed virtual void set_ClipRule(SvgClipRule value);
    public virtual Uri get_Filter();
    public virtual void set_Filter(Uri value);
    protected virtual bool get_RequiresSmoothRendering();
    private bool ConvertShapeRendering2AntiAlias(SvgShapeRendering shapeRendering);
    protected virtual bool get_Renderable();
    public abstract virtual GraphicsPath Path(ISvgRenderer renderer);
    private sealed virtual override PointF Svg.ISvgBoundable.get_Location();
    private sealed virtual override SizeF Svg.ISvgBoundable.get_Size();
    public abstract virtual RectangleF get_Bounds();
    protected virtual void Render(ISvgRenderer renderer);
    private void RenderInternal(ISvgRenderer renderer, bool renderFilter);
    private void RenderInternal(ISvgRenderer renderer, Action`1<ISvgRenderer> renderMethod);
    private bool RenderFilter(ISvgRenderer renderer);
    protected internal virtual void RenderFillAndStroke(ISvgRenderer renderer);
    protected internal virtual void RenderFill(ISvgRenderer renderer);
    protected internal virtual bool RenderStroke(ISvgRenderer renderer);
    protected internal virtual void SetClip(ISvgRenderer renderer);
    protected internal virtual void ResetClip(ISvgRenderer renderer);
    private sealed virtual override void Svg.ISvgClipable.SetClip(ISvgRenderer renderer);
    private sealed virtual override void Svg.ISvgClipable.ResetClip(ISvgRenderer renderer);
    public virtual bool get_Visible();
    protected virtual bool get_Displayable();
    public virtual string get_EnableBackground();
    public virtual void set_EnableBackground(string value);
    internal virtual string get_AttributeName();
    internal virtual List`1<Type> get_ClassNames();
    internal virtual Dictionary`2<string, ISvgPropertyDescriptor> get_Properties();
    [IteratorStateMachineAttribute("Svg.SvgVisualElement/<GetProperties>d__53")]
internal virtual IEnumerable`1<ISvgPropertyDescriptor> GetProperties();
    internal virtual object GetValue(string attributeName);
    internal virtual bool SetValue(string attributeName, ITypeDescriptorContext context, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
private void <RenderFilter>b__30_0(ISvgRenderer r);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ISvgPropertyDescriptor> <>n__0();
}
public class Svg.Transforms.SvgMatrix : SvgTransform {
    [CompilerGeneratedAttribute]
private List`1<float> <Points>k__BackingField;
    public List`1<float> Points { get; public set; }
    public Matrix Matrix { get; }
    public SvgMatrix(List`1<float> m);
    [CompilerGeneratedAttribute]
public List`1<float> get_Points();
    [CompilerGeneratedAttribute]
public void set_Points(List`1<float> value);
    public virtual string WriteToString();
    public virtual object Clone();
    public virtual Matrix get_Matrix();
}
public class Svg.Transforms.SvgRotate : SvgTransform {
    [CompilerGeneratedAttribute]
private float <Angle>k__BackingField;
    [CompilerGeneratedAttribute]
private float <CenterX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <CenterY>k__BackingField;
    public float Angle { get; public set; }
    public float CenterX { get; public set; }
    public float CenterY { get; public set; }
    public Matrix Matrix { get; }
    public SvgRotate(float angle);
    public SvgRotate(float angle, float centerX, float centerY);
    [CompilerGeneratedAttribute]
public float get_Angle();
    [CompilerGeneratedAttribute]
public void set_Angle(float value);
    [CompilerGeneratedAttribute]
public float get_CenterX();
    [CompilerGeneratedAttribute]
public void set_CenterX(float value);
    [CompilerGeneratedAttribute]
public float get_CenterY();
    [CompilerGeneratedAttribute]
public void set_CenterY(float value);
    public virtual string WriteToString();
    public virtual object Clone();
    public virtual Matrix get_Matrix();
}
public class Svg.Transforms.SvgScale : SvgTransform {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    public float X { get; public set; }
    public float Y { get; public set; }
    public Matrix Matrix { get; }
    public SvgScale(float x);
    public SvgScale(float x, float y);
    [CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
    public virtual string WriteToString();
    public virtual object Clone();
    public virtual Matrix get_Matrix();
}
public class Svg.Transforms.SvgShear : SvgTransform {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    public float X { get; public set; }
    public float Y { get; public set; }
    public Matrix Matrix { get; }
    public SvgShear(float x);
    public SvgShear(float x, float y);
    [CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
    public virtual string WriteToString();
    public virtual object Clone();
    public virtual Matrix get_Matrix();
}
public class Svg.Transforms.SvgSkew : SvgTransform {
    [CompilerGeneratedAttribute]
private float <AngleX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <AngleY>k__BackingField;
    public float AngleX { get; public set; }
    public float AngleY { get; public set; }
    public Matrix Matrix { get; }
    public SvgSkew(float x, float y);
    [CompilerGeneratedAttribute]
public float get_AngleX();
    [CompilerGeneratedAttribute]
public void set_AngleX(float value);
    [CompilerGeneratedAttribute]
public float get_AngleY();
    [CompilerGeneratedAttribute]
public void set_AngleY(float value);
    public virtual string WriteToString();
    public virtual object Clone();
    public virtual Matrix get_Matrix();
}
public abstract class Svg.Transforms.SvgTransform : object {
    public Matrix Matrix { get; }
    public abstract virtual string WriteToString();
    public abstract virtual object Clone();
    public virtual string ToString();
    public abstract virtual Matrix get_Matrix();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SvgTransform lhs, SvgTransform rhs);
    public static bool op_Inequality(SvgTransform lhs, SvgTransform rhs);
}
[DefaultMemberAttribute("Item")]
[TypeConverterAttribute("Svg.Transforms.SvgTransformConverter")]
public class Svg.Transforms.SvgTransformCollection : List`1<SvgTransform> {
    [CompilerGeneratedAttribute]
private EventHandler`1<AttributeEventArgs> TransformChanged;
    public SvgTransform Item { get; public set; }
    private void AddItem(SvgTransform item);
    public void Add(SvgTransform item);
    public void AddRange(IEnumerable`1<SvgTransform> collection);
    public void Remove(SvgTransform item);
    public void RemoveAt(int index);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public SvgTransform get_Item(int i);
    public void set_Item(int i, SvgTransform value);
    [CompilerGeneratedAttribute]
public void add_TransformChanged(EventHandler`1<AttributeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TransformChanged(EventHandler`1<AttributeEventArgs> value);
    protected void OnTransformChanged();
    public sealed virtual object Clone();
    public virtual string ToString();
    public Matrix GetMatrix();
}
public class Svg.Transforms.SvgTransformConverter : TypeConverter {
    private static Char[] SplitChars;
    private static string TranslateTransform;
    private static string RotateTransform;
    private static string ScaleTransform;
    private static string MatrixTransform;
    private static string ShearTransform;
    private static string SkewXTransform;
    private static string SkewYTransform;
    private static SvgTransformConverter();
    private static TransformType GetTransformType(ReadOnlySpan`1& transformName);
    public static SvgTransformCollection Parse(ReadOnlySpan`1<char> transform);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Svg.Transforms.SvgTranslate : SvgTransform {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    public float X { get; public set; }
    public float Y { get; public set; }
    public Matrix Matrix { get; }
    public SvgTranslate(float x, float y);
    public SvgTranslate(float x);
    [CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
    public virtual string WriteToString();
    public virtual object Clone();
    public virtual Matrix get_Matrix();
}
public enum Svg.UnitRenderingType : Enum {
    public int value__;
    public static UnitRenderingType Other;
    public static UnitRenderingType Horizontal;
    public static UnitRenderingType HorizontalOffset;
    public static UnitRenderingType Vertical;
    public static UnitRenderingType VerticalOffset;
}
[TypeConverterAttribute("Svg.XmlSpaceHandlingConverter")]
public enum Svg.XmlSpaceHandling : Enum {
    public int value__;
    public static XmlSpaceHandling Default;
    public static XmlSpaceHandling Inherit;
    public static XmlSpaceHandling Preserve;
}
public class Svg.XmlSpaceHandlingConverter : EnumBaseConverter`1<XmlSpaceHandling> {
}
public class System.Drawing.ColorConverter : TypeConverter {
    private static string ColorConstantsLock;
    private static Hashtable colorConstants;
    private static string SystemColorConstantsLock;
    private static Hashtable systemColorConstants;
    private static string ValuesLock;
    private static StandardValuesCollection values;
    private static Hashtable Colors { get; }
    private static Hashtable SystemColors { get; }
    private static ColorConverter();
    private static Hashtable get_Colors();
    private static Hashtable get_SystemColors();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    internal static object GetNamedColor(string name);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    private static void FillConstants(Hashtable hash, Type enumType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
