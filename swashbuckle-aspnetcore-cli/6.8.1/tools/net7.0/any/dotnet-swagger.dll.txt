[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Extensions.Hosting.HostFactoryResolver : object {
    private static BindingFlags DeclaredOnlyLookup;
    public static string BuildWebHost;
    public static string CreateWebHostBuilder;
    public static string CreateHostBuilder;
    private static TimeSpan s_defaultWaitTimeout;
    private static HostFactoryResolver();
    public static Func`2<String[], TWebHost> ResolveWebHostFactory(Assembly assembly);
    public static Func`2<String[], TWebHostBuilder> ResolveWebHostBuilderFactory(Assembly assembly);
    public static Func`2<String[], THostBuilder> ResolveHostBuilderFactory(Assembly assembly);
    public static Func`2<String[], object> ResolveHostFactory(Assembly assembly, Nullable`1<TimeSpan> waitTimeout, bool stopApplication, Action`1<object> configureHostBuilder, Action`1<Exception> entrypointCompleted);
    private static Func`2<String[], T> ResolveFactory(Assembly assembly, string name);
    private static bool IsFactory(MethodInfo factory);
    public static Func`2<String[], IServiceProvider> ResolveServiceProviderFactory(Assembly assembly, Nullable`1<TimeSpan> waitTimeout);
    private static object Build(object builder);
    private static IServiceProvider GetServiceProvider(object host);
}
public class Swashbuckle.AspNetCore.Cli.CommandRunner : object {
    private Dictionary`2<string, string> _argumentDescriptors;
    private Dictionary`2<string, OptionDescriptor> _optionDescriptors;
    private Func`2<IDictionary`2<string, string>, int> _runFunc;
    private List`1<CommandRunner> _subRunners;
    private TextWriter _output;
    [CompilerGeneratedAttribute]
private string <CommandName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandDescription>k__BackingField;
    public string CommandName { get; private set; }
    public string CommandDescription { get; private set; }
    public CommandRunner(string commandName, string commandDescription, TextWriter output);
    [CompilerGeneratedAttribute]
public string get_CommandName();
    [CompilerGeneratedAttribute]
private void set_CommandName(string value);
    [CompilerGeneratedAttribute]
public string get_CommandDescription();
    [CompilerGeneratedAttribute]
private void set_CommandDescription(string value);
    public void Argument(string name, string description);
    public void Option(string name, string description, bool isFlag);
    public void OnRun(Func`2<IDictionary`2<string, string>, int> runFunc);
    public void SubCommand(string name, string description, Action`1<CommandRunner> configAction);
    public int Run(IEnumerable`1<string> args);
    private bool TryParseArgs(IEnumerable`1<string> args, IDictionary`2& namedArgs);
    private void PrintUsage();
}
internal class Swashbuckle.AspNetCore.Cli.HostingApplication : object {
    internal static IServiceProvider GetServiceProvider(Assembly assembly);
    [CompilerGeneratedAttribute]
internal static void <GetServiceProvider>g__ConfigureHostBuilder|0_0(object hostBuilder);
}
public class Swashbuckle.AspNetCore.Cli.Program : object {
    public static int Main(String[] args);
    private static string EscapePath(string path);
    private static IServiceProvider GetServiceProvider(Assembly startupAssembly);
    private static bool TryGetCustomHost(Assembly startupAssembly, string factoryClassName, string factoryMethodName, THost& host);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
