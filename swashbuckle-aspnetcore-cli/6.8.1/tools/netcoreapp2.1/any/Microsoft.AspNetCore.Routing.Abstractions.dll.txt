internal static class Microsoft.AspNetCore.Routing.Abstractions.Resources : object {
    private static ResourceManager _resourceManager;
    internal static string RouteValueDictionary_DuplicateKey { get; }
    internal static string RouteValueDictionary_DuplicatePropertyName { get; }
    private static Resources();
    internal static string get_RouteValueDictionary_DuplicateKey();
    internal static string FormatRouteValueDictionary_DuplicateKey(object p0, object p1);
    internal static string get_RouteValueDictionary_DuplicatePropertyName();
    internal static string FormatRouteValueDictionary_DuplicatePropertyName(object p0, object p1, object p2, object p3);
    private static string GetString(string name, String[] formatterNames);
}
public interface Microsoft.AspNetCore.Routing.IRouteConstraint {
    public abstract virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public interface Microsoft.AspNetCore.Routing.IRouteHandler {
    public abstract virtual RequestDelegate GetRequestHandler(HttpContext httpContext, RouteData routeData);
}
public interface Microsoft.AspNetCore.Routing.IRouter {
    public abstract virtual Task RouteAsync(RouteContext context);
    public abstract virtual VirtualPathData GetVirtualPath(VirtualPathContext context);
}
public interface Microsoft.AspNetCore.Routing.IRoutingFeature {
    public RouteData RouteData { get; public set; }
    public abstract virtual RouteData get_RouteData();
    public abstract virtual void set_RouteData(RouteData value);
}
public class Microsoft.AspNetCore.Routing.RouteContext : object {
    private RouteData _routeData;
    [CompilerGeneratedAttribute]
private RequestDelegate <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpContext <HttpContext>k__BackingField;
    public RequestDelegate Handler { get; public set; }
    public HttpContext HttpContext { get; }
    public RouteData RouteData { get; public set; }
    public RouteContext(HttpContext httpContext);
    [CompilerGeneratedAttribute]
public RequestDelegate get_Handler();
    [CompilerGeneratedAttribute]
public void set_Handler(RequestDelegate value);
    [CompilerGeneratedAttribute]
public HttpContext get_HttpContext();
    public RouteData get_RouteData();
    public void set_RouteData(RouteData value);
}
public class Microsoft.AspNetCore.Routing.RouteData : object {
    private RouteValueDictionary _dataTokens;
    private List`1<IRouter> _routers;
    private RouteValueDictionary _values;
    public RouteValueDictionary DataTokens { get; }
    public IList`1<IRouter> Routers { get; }
    public RouteValueDictionary Values { get; }
    public RouteData(RouteData other);
    public RouteValueDictionary get_DataTokens();
    public IList`1<IRouter> get_Routers();
    public RouteValueDictionary get_Values();
    public RouteDataSnapshot PushState(IRouter router, RouteValueDictionary values, RouteValueDictionary dataTokens);
}
public enum Microsoft.AspNetCore.Routing.RouteDirection : Enum {
    public int value__;
    public static RouteDirection IncomingRequest;
    public static RouteDirection UrlGeneration;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Routing.RouteValueDictionary : object {
    internal Storage _storage;
    public object Item { get; public set; }
    public IEqualityComparer`1<string> Comparer { get; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly { get; }
    public ICollection`1<string> Keys { get; }
    private IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Keys { get; }
    public ICollection`1<object> Values { get; }
    private IEnumerable`1<object> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Values { get; }
    public RouteValueDictionary(object values);
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public IEqualityComparer`1<string> get_Comparer();
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_IsReadOnly();
    public sealed virtual ICollection`1<string> get_Keys();
    private sealed virtual override IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    private sealed virtual override IEnumerable`1<object> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Add(string key, object value);
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair`2<string, object> item);
    public sealed virtual bool ContainsKey(string key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair`2<string, object> item);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    private void Upgrade();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Routing.RoutingHttpContextExtensions : object {
    [ExtensionAttribute]
public static RouteData GetRouteData(HttpContext httpContext);
    [ExtensionAttribute]
public static object GetRouteValue(HttpContext httpContext, string key);
}
public class Microsoft.AspNetCore.Routing.VirtualPathContext : object {
    [CompilerGeneratedAttribute]
private RouteValueDictionary <AmbientValues>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpContext <HttpContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RouteName>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <Values>k__BackingField;
    public RouteValueDictionary AmbientValues { get; }
    public HttpContext HttpContext { get; }
    public string RouteName { get; }
    public RouteValueDictionary Values { get; public set; }
    public VirtualPathContext(HttpContext httpContext, RouteValueDictionary ambientValues, RouteValueDictionary values);
    public VirtualPathContext(HttpContext httpContext, RouteValueDictionary ambientValues, RouteValueDictionary values, string routeName);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_AmbientValues();
    [CompilerGeneratedAttribute]
public HttpContext get_HttpContext();
    [CompilerGeneratedAttribute]
public string get_RouteName();
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(RouteValueDictionary value);
}
public class Microsoft.AspNetCore.Routing.VirtualPathData : object {
    private RouteValueDictionary _dataTokens;
    private string _virtualPath;
    [CompilerGeneratedAttribute]
private IRouter <Router>k__BackingField;
    public RouteValueDictionary DataTokens { get; }
    public IRouter Router { get; public set; }
    public string VirtualPath { get; public set; }
    public VirtualPathData(IRouter router, string virtualPath);
    public VirtualPathData(IRouter router, string virtualPath, RouteValueDictionary dataTokens);
    public RouteValueDictionary get_DataTokens();
    [CompilerGeneratedAttribute]
public IRouter get_Router();
    [CompilerGeneratedAttribute]
public void set_Router(IRouter value);
    public string get_VirtualPath();
    public void set_VirtualPath(string value);
    private static string NormalizePath(string path);
}
internal class Microsoft.Extensions.Internal.PropertyHelper : object {
    private static MethodInfo CallPropertyGetterOpenGenericMethod;
    private static MethodInfo CallPropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo CallNullSafePropertyGetterOpenGenericMethod;
    private static MethodInfo CallNullSafePropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo CallPropertySetterOpenGenericMethod;
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> PropertiesCache;
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> VisiblePropertiesCache;
    private Action`2<object, object> _valueSetter;
    private Func`2<object, object> _valueGetter;
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public PropertyInfo Property { get; }
    public string Name { get; protected set; }
    public Func`2<object, object> ValueGetter { get; }
    public Action`2<object, object> ValueSetter { get; }
    public PropertyHelper(PropertyInfo property);
    private static PropertyHelper();
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    public Func`2<object, object> get_ValueGetter();
    public Action`2<object, object> get_ValueSetter();
    public object GetValue(object instance);
    public void SetValue(object instance, object value);
    public static PropertyHelper[] GetProperties(TypeInfo typeInfo);
    public static PropertyHelper[] GetProperties(Type type);
    public static PropertyHelper[] GetVisibleProperties(TypeInfo typeInfo);
    public static PropertyHelper[] GetVisibleProperties(Type type);
    public static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo);
    public static Func`2<object, object> MakeNullSafeFastPropertyGetter(PropertyInfo propertyInfo);
    private static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo, MethodInfo propertyGetterWrapperMethod, MethodInfo propertyGetterByRefWrapperMethod);
    private static Func`2<object, object> MakeFastPropertyGetter(Type openGenericDelegateType, MethodInfo propertyGetMethod, MethodInfo openGenericWrapperMethod);
    public static Action`2<object, object> MakeFastPropertySetter(PropertyInfo propertyInfo);
    public static IDictionary`2<string, object> ObjectToDictionary(object value);
    private static PropertyHelper CreateInstance(PropertyInfo property);
    private static object CallPropertyGetter(Func`2<TDeclaringType, TValue> getter, object target);
    private static object CallPropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object target);
    private static object CallNullSafePropertyGetter(Func`2<TDeclaringType, TValue> getter, object target);
    private static object CallNullSafePropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object target);
    private static void CallPropertySetter(Action`2<TDeclaringType, TValue> setter, object target, object value);
    protected static PropertyHelper[] GetVisibleProperties(Type type, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> allPropertiesCache, ConcurrentDictionary`2<Type, PropertyHelper[]> visiblePropertiesCache);
    protected static PropertyHelper[] GetProperties(Type type, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> cache);
    private static bool IsInterestingProperty(PropertyInfo property);
}
